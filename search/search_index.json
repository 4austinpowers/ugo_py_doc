{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Let there be light! A Python documentation website. ugo_py_doc is a corpus; a catalog of books, manuals, articles, presentations, videos, podcasts, summaries, notes, code snippets, excerpts, websites, etc. The \u2018docs\u2019 is a searchable knowledge-based system. You type a keyword, it leads to several sources, you identify the document, and you go retrieve the document; whether it is a digital or a material document. Fast and easy! The corpus is unstructured. Knowledge is rather cumulated, layer after layer, resulting in a hotchpotch of information. Information may be repeted among many documents, with different explanations, some more comprehensive. Newer entries might also supplement or contradict older entries.","title":"Home"},{"location":"Apprenez a programmer en Python/","text":"Foreword Notes. Python 3. From Le Livre du Z\u00e9ro, Simple IT, 2011. Shebang Line \u00b6 shebang, top, file, environment, language, kernel, python2, python 2, python3, python 3, utf, utf8, utf-8 Other names: sha-bang, hashbang, pound-bang, hash-pling. At the top of scripts In Windows, Python 2: python . Windows, Python 3: python 3 . UNIX, Python 2: #!/usr/bin/env python . UNIX, Python 3: #!/usr/bin/env python 3 . Add: # -*coding: utf-8 -*- . # -*coding: latin-1 -*- . Launch a script In Windows, Python 2: python script.py . py script.py . py -2 script.py . py -2.7 script.py . In UNIX, Python 2: python script.py . In Windows, Python 3: py -3 script.py . py -3.5 script.py . In UNIX, Python 3: python3 script.py . Launch the shell/bash The shell, Python 2: python . py -2 . py -2.7 . The bash, Python 2: python . python2 . The shell, Python 3: py -3 . py -3.5 . The bash, Python 3: python3 . Chapter 8, Exceptions \u00b6 Basic. try: block. except errors. else: . finally: . assert tests and conditions. raise an exception. Chapter 10, Strings \u00b6 Basic. A \"string\" . str() function. upper() and lower() methods; upper/lower characters. capitalize() method; first-letter upper character. left() , right() , center() methods. strip() , lstrip() , rstrip() methods; remove white space. format() method. count() method. find() method. replace() method. [:] to subset a string. while loop on a string. Chapter 11, Lists and Tuples 1 \u00b6 Basic. delete, length, size Lists are mutable; can add or remove elements from a list; can change the order of elements. A [list] . insert() method. append() method. extends() method. del() function; delete an indexed element. remove() method; remove an occurrence. len() function; length. for loop, in a list. enumerate () function; return the index and elements. Tuples are immutable; cannot be modified. (tuple) . Chapter 12, Lists and Tuples 2 \u00b6 Basic. flexible, function, flexibility, parameter With lists, functions can have an undetermined number of parameters (very flexible!): def my_function(*parameter): . def my_function(a, b, *parameter): . Strings and lists. Create, split, loop through a sequence. Even in a list of list. split() method. join() method. for loop, in a list. Find the type() of a variable (integer, float, boolean, etc.) Chapter 13, Dictionaries \u00b6 Basic. dictionary, flexible, function, flexibility, parameter Dictionaries are mutable; you can add or remove elements from a dictionary; order of elements is unimportant. One-entry dictionary: {'key': 'value'} . With dictionaries, functions can have an undetermined number of parameters (very flexible!): def my_function(**parameter): . def my_function(a, b, **parameter): . Combine lists and dictionaries in a function with an undetermined number of parameters: def my_function(*, parameter, **parameter): . def my_function(a, b, *parameter, **parameter): . del dict['key'] function; delete. pop() method; pop out an element. for loop, in a dictionary. in dict.keys() method; extract the dictionary dict in order. in dict.values() method; extract the values from dictionary dict . in dict.items() method to extract the keys and values from dictionary dict . Chapter 14, Files \u00b6 Basic. os module. Perform bash, shell operations such as opening, closing, reading, and writing files. Manage relative and absolute path. In UNIX and Windows. open() method. close() method. read() method. write() method. with/as method; create aliases. pickle module. Record objects in a file and retrieve them. Pickler() method. Chapter 17, Classes and docstrings \u00b6 Basic. class, instance, self docstring module. Under a Class , a docstring documents the class. Under def __init__(): , a docstring documents the attributes. Under def function(): , a docstring documents the use of the function or class method, under variable , a docstring documents the use of the variable. object.__doc__ method; accesses the docstring. __all__ function; displays the list of public names (of objects). pydoc module. Displays information about an object with the help(object) function. dir(object) function; returns an object\u2019s parameters (all the attributes, methods, functions). object.__dict__ method; returns an object\u2019s attributes. object.__dict__[\"att_a\"] = \"att_b\" changes an object\u2019s attribute. Chapter 18, (Class) Properties \u00b6 Basic. instance, constructor More about the def __init__(): constructor. Chapter 19, Special Methods \u00b6 Basic. mathematics, display results def __repr__(self): modifies the way an object is displayed when called. def __str__(self): method modifies the way an object is displayed when printed. def __getattr__(): defines a message when an inexistent object\u2019s attributes is called (like a try block) vs the built-in object.__dict__ def __setattr__(): does the same when an object\u2019s attribute is modified vs the built-in object.__dict__[\"att_a\"] = \"att_b\" def __delattr__(): does the same when an object\u2019s attribute is deleted. def __hasattr__(): returns true or false if the attribute exists. def __getitem__(): , def __setitem__(): , and def __delitem__(): all define what to do when we write, respectively: object[index] , object[index] = value , and del object[index] . object.__contains__ checks out if a list contains a specific element; like in object.__len__() shows the size of an object. object.__add__(4) is equivalent to object + 4 ; def __add(): as well. object.__sub__() or - . __mul__ or * . __truediv__ or / . __floordiv__ or // . __mod__ or % . __pow__ or ** . __radd__ , __iadd__ , etc. def __eq__(): or == . __ne__ or != . __gt__ or > . __ge__ or >= . __lt__ or < . __le__ or <= . pickle module. Record objects in a file and retrieve them. __getstate__ method. __setstate__ method. Chapter 20, Heritage \u00b6 Basic. except Class heritage transfers all attributes, parameters and methods from a class to a subclass. issubclass verifies (true or false) if a class is a subclass of another class. isinstance verifies if an object comes from a class. A subclass can inherit from two or more classes (multiple heritage). More exceptions in a try block, except , heritage, AttributeError , Exception , BaseException , and resolution. Exceptions are classes with hierarchy. Chapter 21, The for Loop Again \u00b6 Basic. Related to the for loop and how to dig deeper into the iterator with __iter__ and __next__ . Iterator can also skip items in a list: iterate from 1 to 5, them jump to 10 and go on. A sort of conditional break . For that, we must generate intervals with yield . Chapter 23, Decorators \u00b6 Advanced! simplify code A decorator simplifies: 1 2 3 4 def function ( ... ): ... ... function = decorator ( function ) With: 1 2 3 @decorator def function ( ... ): ... There are decorators without parameters, with parameters, applied to classes; chained together. Use: Limit a class instance to only one instance or one object (a singleton ). Add more control on the type of data going into functions. Chapter 24, Metaclasses \u00b6 Advanced! __init__ initiates an object with attributes, but does not create the object itself. It is done by coding a new instance or with __new__ . The method is useful to create immutable objects that cannot be modified. Create dynamic classes with type . Chapter 25, Regular Expressions \u00b6 Basic. regex, string, search, beginning, end, replace, occurrence, character, class, group, number, numbered group, name, named re module. Chapter 26, Time \u00b6 Basic. date, time, year, month, day, hour, minute, second, time zone, timezone, time delta, timedelta, time stamp, timestamp, format time module and datetime module. Chapter 27, System Programming \u00b6 Basic. input, output, stdin, stdout, open, close, read, write, directory, file sys module and os module. Access system variables and control the operating system. signal module. Read process signals sent to programs (such as stopping and exiting). Access and control the OS console, enter CLI arguments, program actions usually done with the mouse and the keyboard. system module, related to os . os.system('ls') on Linux. os.system('dir') on Windows. For example: 1 2 3 4 5 6 import os cmd = os . popen ( 'ls' ) cmd cmd . read () Chapter 28, Maths \u00b6 Basic. math module. Enables new methods in arithmetics, trigonometry, rounding: pow() , sqrt() , exp() , fabs() , radians() , degrees() , ceil() , floor() , trunc() , etc fractions module. Fraction() , from_float() , etc. random module. random() , randrange() , randint() , choice() , etc. Chapter 29, Password Management \u00b6 Web framework. getpass module. Receive a password, cypher a password, etc. Chapter 30, Network \u00b6 Web framework. tcp, protocol, client, server, connection, http, port, socket, connect, socket module and select module. Chapter 31, Tkinter \u00b6 Software, application. gui, graphic, interface, window, button, interactive, box, toggle, widget, labels, square, checkbox, list, command Tkinter module. Chapter 33, Distribute Scripts and Programs \u00b6 Basic. Method 1: Executable File cx_freeze creates a standalone executable file. cx_Freeze is portable (Windows, Linux, Mac OS X), compatible with Py -2 and Py -3, simple, fast, flexible. Download, install, use the cxfreeze script Alternative: py2exe (Windows only). Method 2: Setup File The traditional way of distributing a code and a more powerful approach. Chapter 34, PEP \u00b6 Basic. PEP 20: The Zen of Python. PEP 8: coding conventions. identation, tabulation, line length, line spacing, encoding, importing, spacing, commenting, naming, coding comparisons. PEP 257: documentation and docstrings. Chapter 35, More\u2026 \u00b6 Basic. References. Wiki. PEP. Documentation. Basic library Additional libraries. graphical interfaces: Tk, PyQT, PyGTK, wx Python. web framworks: Django, CherryPy. networks: Twisted. Index.","title":"Apprenez \u00e0 programmer en Python"},{"location":"Apprenez a programmer en Python/#chapter-8-exceptions","text":"Basic. try: block. except errors. else: . finally: . assert tests and conditions. raise an exception.","title":"Chapter 8, Exceptions"},{"location":"Apprenez a programmer en Python/#chapter-10-strings","text":"Basic. A \"string\" . str() function. upper() and lower() methods; upper/lower characters. capitalize() method; first-letter upper character. left() , right() , center() methods. strip() , lstrip() , rstrip() methods; remove white space. format() method. count() method. find() method. replace() method. [:] to subset a string. while loop on a string.","title":"Chapter 10, Strings"},{"location":"Apprenez a programmer en Python/#chapter-11-lists-and-tuples-1","text":"Basic. delete, length, size Lists are mutable; can add or remove elements from a list; can change the order of elements. A [list] . insert() method. append() method. extends() method. del() function; delete an indexed element. remove() method; remove an occurrence. len() function; length. for loop, in a list. enumerate () function; return the index and elements. Tuples are immutable; cannot be modified. (tuple) .","title":"Chapter 11, Lists and Tuples 1"},{"location":"Apprenez a programmer en Python/#chapter-12-lists-and-tuples-2","text":"Basic. flexible, function, flexibility, parameter With lists, functions can have an undetermined number of parameters (very flexible!): def my_function(*parameter): . def my_function(a, b, *parameter): . Strings and lists. Create, split, loop through a sequence. Even in a list of list. split() method. join() method. for loop, in a list. Find the type() of a variable (integer, float, boolean, etc.)","title":"Chapter 12, Lists and Tuples 2"},{"location":"Apprenez a programmer en Python/#chapter-13-dictionaries","text":"Basic. dictionary, flexible, function, flexibility, parameter Dictionaries are mutable; you can add or remove elements from a dictionary; order of elements is unimportant. One-entry dictionary: {'key': 'value'} . With dictionaries, functions can have an undetermined number of parameters (very flexible!): def my_function(**parameter): . def my_function(a, b, **parameter): . Combine lists and dictionaries in a function with an undetermined number of parameters: def my_function(*, parameter, **parameter): . def my_function(a, b, *parameter, **parameter): . del dict['key'] function; delete. pop() method; pop out an element. for loop, in a dictionary. in dict.keys() method; extract the dictionary dict in order. in dict.values() method; extract the values from dictionary dict . in dict.items() method to extract the keys and values from dictionary dict .","title":"Chapter 13, Dictionaries"},{"location":"Apprenez a programmer en Python/#chapter-14-files","text":"Basic. os module. Perform bash, shell operations such as opening, closing, reading, and writing files. Manage relative and absolute path. In UNIX and Windows. open() method. close() method. read() method. write() method. with/as method; create aliases. pickle module. Record objects in a file and retrieve them. Pickler() method.","title":"Chapter 14, Files"},{"location":"Apprenez a programmer en Python/#chapter-17-classes-and-docstrings","text":"Basic. class, instance, self docstring module. Under a Class , a docstring documents the class. Under def __init__(): , a docstring documents the attributes. Under def function(): , a docstring documents the use of the function or class method, under variable , a docstring documents the use of the variable. object.__doc__ method; accesses the docstring. __all__ function; displays the list of public names (of objects). pydoc module. Displays information about an object with the help(object) function. dir(object) function; returns an object\u2019s parameters (all the attributes, methods, functions). object.__dict__ method; returns an object\u2019s attributes. object.__dict__[\"att_a\"] = \"att_b\" changes an object\u2019s attribute.","title":"Chapter 17, Classes and docstrings"},{"location":"Apprenez a programmer en Python/#chapter-18-class-properties","text":"Basic. instance, constructor More about the def __init__(): constructor.","title":"Chapter 18, (Class) Properties"},{"location":"Apprenez a programmer en Python/#chapter-19-special-methods","text":"Basic. mathematics, display results def __repr__(self): modifies the way an object is displayed when called. def __str__(self): method modifies the way an object is displayed when printed. def __getattr__(): defines a message when an inexistent object\u2019s attributes is called (like a try block) vs the built-in object.__dict__ def __setattr__(): does the same when an object\u2019s attribute is modified vs the built-in object.__dict__[\"att_a\"] = \"att_b\" def __delattr__(): does the same when an object\u2019s attribute is deleted. def __hasattr__(): returns true or false if the attribute exists. def __getitem__(): , def __setitem__(): , and def __delitem__(): all define what to do when we write, respectively: object[index] , object[index] = value , and del object[index] . object.__contains__ checks out if a list contains a specific element; like in object.__len__() shows the size of an object. object.__add__(4) is equivalent to object + 4 ; def __add(): as well. object.__sub__() or - . __mul__ or * . __truediv__ or / . __floordiv__ or // . __mod__ or % . __pow__ or ** . __radd__ , __iadd__ , etc. def __eq__(): or == . __ne__ or != . __gt__ or > . __ge__ or >= . __lt__ or < . __le__ or <= . pickle module. Record objects in a file and retrieve them. __getstate__ method. __setstate__ method.","title":"Chapter 19, Special Methods"},{"location":"Apprenez a programmer en Python/#chapter-20-heritage","text":"Basic. except Class heritage transfers all attributes, parameters and methods from a class to a subclass. issubclass verifies (true or false) if a class is a subclass of another class. isinstance verifies if an object comes from a class. A subclass can inherit from two or more classes (multiple heritage). More exceptions in a try block, except , heritage, AttributeError , Exception , BaseException , and resolution. Exceptions are classes with hierarchy.","title":"Chapter 20, Heritage"},{"location":"Apprenez a programmer en Python/#chapter-21-the-for-loop-again","text":"Basic. Related to the for loop and how to dig deeper into the iterator with __iter__ and __next__ . Iterator can also skip items in a list: iterate from 1 to 5, them jump to 10 and go on. A sort of conditional break . For that, we must generate intervals with yield .","title":"Chapter 21, The for Loop Again"},{"location":"Apprenez a programmer en Python/#chapter-23-decorators","text":"Advanced! simplify code A decorator simplifies: 1 2 3 4 def function ( ... ): ... ... function = decorator ( function ) With: 1 2 3 @decorator def function ( ... ): ... There are decorators without parameters, with parameters, applied to classes; chained together. Use: Limit a class instance to only one instance or one object (a singleton ). Add more control on the type of data going into functions.","title":"Chapter 23, Decorators"},{"location":"Apprenez a programmer en Python/#chapter-24-metaclasses","text":"Advanced! __init__ initiates an object with attributes, but does not create the object itself. It is done by coding a new instance or with __new__ . The method is useful to create immutable objects that cannot be modified. Create dynamic classes with type .","title":"Chapter 24, Metaclasses"},{"location":"Apprenez a programmer en Python/#chapter-25-regular-expressions","text":"Basic. regex, string, search, beginning, end, replace, occurrence, character, class, group, number, numbered group, name, named re module.","title":"Chapter 25, Regular Expressions"},{"location":"Apprenez a programmer en Python/#chapter-26-time","text":"Basic. date, time, year, month, day, hour, minute, second, time zone, timezone, time delta, timedelta, time stamp, timestamp, format time module and datetime module.","title":"Chapter 26, Time"},{"location":"Apprenez a programmer en Python/#chapter-27-system-programming","text":"Basic. input, output, stdin, stdout, open, close, read, write, directory, file sys module and os module. Access system variables and control the operating system. signal module. Read process signals sent to programs (such as stopping and exiting). Access and control the OS console, enter CLI arguments, program actions usually done with the mouse and the keyboard. system module, related to os . os.system('ls') on Linux. os.system('dir') on Windows. For example: 1 2 3 4 5 6 import os cmd = os . popen ( 'ls' ) cmd cmd . read ()","title":"Chapter 27, System Programming"},{"location":"Apprenez a programmer en Python/#chapter-28-maths","text":"Basic. math module. Enables new methods in arithmetics, trigonometry, rounding: pow() , sqrt() , exp() , fabs() , radians() , degrees() , ceil() , floor() , trunc() , etc fractions module. Fraction() , from_float() , etc. random module. random() , randrange() , randint() , choice() , etc.","title":"Chapter 28, Maths"},{"location":"Apprenez a programmer en Python/#chapter-29-password-management","text":"Web framework. getpass module. Receive a password, cypher a password, etc.","title":"Chapter 29, Password Management"},{"location":"Apprenez a programmer en Python/#chapter-30-network","text":"Web framework. tcp, protocol, client, server, connection, http, port, socket, connect, socket module and select module.","title":"Chapter 30, Network"},{"location":"Apprenez a programmer en Python/#chapter-31-tkinter","text":"Software, application. gui, graphic, interface, window, button, interactive, box, toggle, widget, labels, square, checkbox, list, command Tkinter module.","title":"Chapter 31, Tkinter"},{"location":"Apprenez a programmer en Python/#chapter-33-distribute-scripts-and-programs","text":"Basic. Method 1: Executable File cx_freeze creates a standalone executable file. cx_Freeze is portable (Windows, Linux, Mac OS X), compatible with Py -2 and Py -3, simple, fast, flexible. Download, install, use the cxfreeze script Alternative: py2exe (Windows only). Method 2: Setup File The traditional way of distributing a code and a more powerful approach.","title":"Chapter 33, Distribute Scripts and Programs"},{"location":"Apprenez a programmer en Python/#chapter-34-pep","text":"Basic. PEP 20: The Zen of Python. PEP 8: coding conventions. identation, tabulation, line length, line spacing, encoding, importing, spacing, commenting, naming, coding comparisons. PEP 257: documentation and docstrings.","title":"Chapter 34, PEP"},{"location":"Apprenez a programmer en Python/#chapter-35-more","text":"Basic. References. Wiki. PEP. Documentation. Basic library Additional libraries. graphical interfaces: Tk, PyQT, PyGTK, wx Python. web framworks: Django, CherryPy. networks: Twisted. Index.","title":"Chapter 35, More..."},{"location":"Automate the Boring Stuff with Python/","text":"Foreword Notes. Python 3. From No Starch Press, 2015. Creative Commons. More at: Online at automatetheboringstuff.com More at Invent with Python.com Books : Develop video games! Make games with graphics! Encrypt messages and hack ciphers! Chapter 2, Flow Control \u00b6 boolean, comparison, operator, flow control, condition, conditional, loop True , False . and , or , not . == , != , < , > , etc. if , else , elif Loops: while , for with in , range . break , continue . import random , sys , os , math . random.randint . from random import * . sys.exit() . Chapter 3, Functions \u00b6 global, local, variable, scope Exception handling with try: and except . Chapter 4, Lists (and Tuples) \u00b6 data type, index, sublist, subset, slice, change, concatenate, concatenation, tuple, convert, tuple to list len() function; length. in and not in operators. += , -= , *= , /= , %= augmented assignments. index() method; extract the position of an element. append() method. insert() method. remove() method. sort() method. copy module and copy() method. deepcopy() method; for inner list or a list of lists (ensure the key exists). Chapter 5, Dictionaries and Structuring Data \u00b6 loop Dictionaries are not indexed and ordered like lists. keys() method; extract keys. values() method; extract values. items() method; extract both. get() method; check out both. in and not in operators. setdefault() method, check out a key and set value to a key. Pretty print with the pprint() and pformat() functions. Nested dictionaries and lists. Chapter 6, Manipulating Strings \u00b6 Escape character: \\ : \\' , \\\" , \\t , \\n , \\\\ . Raw strings: print(r'That is Carol') . Triple quotes: 1 2 3 4 5 6 7 print ( '''Dear Alice, bla-bla-bla cheers''' ) print ( \"\"\"Dear Alice, bla-bla-bla cheers\"\"\" ) Comment: # . Multiline comments: \"\"\" \"\"\" . Slice, subset with [:] . in and not in operators. lower() method. upper() method. capitalize() method. is method; check if x is part of y. islower() method. isupper() method. isalpha() method; check letters, not blank. isalnum() method; check letters and numbers, and not blank. isdecimal() method; check numeric characters and not blank. isspace() method; check spaces, tabs and new lines and not blank. istitle() method; check if it begins with an uppercase letter followed with lowercase letters. startwith() method; check if a string begins with a string of characters. endwith() method; idem. join() method; concatenate. split() method. rjust() method; justify. ljust() method justify. center() method. strip() method; remove white space. rstrip() method; ; remove white space to the right. lstrip() method; remove white space to the left. pyperclip module. The pyperclip.pyclip function send text to and receive text from the clipboard: In addition: 1 2 3 4 import pyperclip pyperclip . copy ( 'Hello world!' ) pyperclip . paste () Chapter 7, Pattern Matching and Regular Expressions \u00b6 patterns of text, with, without regular expression, regex, object, match, matching, group, grouping, pipe, question mark, star, ?, *, plus, +, curly bracket, {, }, character class, digit, numeric, letter, underscore, space, tab, newline, caret, ^, dollar sign, $, wildcard, dot, ., dotstar, newline, symbols, case-sensitive, case-insensitive re module. re.compile() method; find a single occurrence. re.findall() method; find all occurrences. sub() method; substitute. re.IGNORECASE ; ignore capitalization with the compile() method. re.DOTALL ; ignore dots with the re.compile() method. re.VERBOSE ; write comment with the re.compile() method. Chapter 8, Reading and Writing Files \u00b6 file, file path, filename os module. A relative path: ..\\eggs\\spam.txt , .\\fizz\\spam.txt . An absolute path: C:\\bacon\\fizz\\spam.txt . os.getcwd() or os.chdir() functions; extract the current working directory. os.makedir() function; create a new folder. os.path module. Handle absolute and relative paths. Find file sizes and folder contents. Check path validity. Windows: backslash or \\ : 1 2 import os os . path . join ( 'usr' , 'bin' , 'spam' ) Yields: 1 'usr \\\\ bin \\\\ spam' UNIX: forwardslash or / : 1 2 import os os . path . join ( 'usr' , 'bin' , 'spam' ) Yields: 1 'usr/bin/spam' Read and write files: os.path.open() function. os.path.read() method. os.path.readline() method. os.path.write() method. os.path.close() method. shelve module. Handle binary files. pprint module. Pretty printing: pprint.pprint() . pprint.pformat() . Chapter 9, Organizing Files \u00b6 pdf, every sub-folder, folder, foldername, subfolder, filename, file, remove, zero, change titles, compress, decompress, zip, unzip shutil module. Copy, move, rename, and delete files and folders. shutil.rmtree() function; delete file and folder. os module. Delete, empty, remove files and folders, and change the path. os.walk() method; walk the tree directory. send2trash module. Delete files and folders, but much safer. zipfile module. Compress and uncompress. Read the content of compressed and zipped files. zipfile.extracall() ; method extracts all the files and folders from a zip file. write() method; create a zip file. Chapter 10, Debugging \u00b6 Handle errors with try and except . Raise exceptions with a raise statement and the Exception() function. traceback module. Discover what and how an error happens and obtain it as a string with the traceback.format_exc() method. An assertion is a sanity check performed with an assert statement. logging module. Display log messages as the program runs. Log to a file. Debug a code. Enable and disable logging. Enable an IDLE debugger. Set a breakpoint to check out potential bugs. Chapter 11, Web Scraping \u00b6 html webbrowser module. Open a browser to a specific webpage (in conjunction with the sys module). Use: Get a street address from the command line to the clipboard. Go to a Google Maps page. Read command line arguments from sys.argv . Read the clipboard content. Open all links on a page in separate tabs. Open the browser to the url for local weather. Open several social network sites. requests module. Download files and webpages; similar to opening, reading, writing, closing files and folders. Simpler than the urllib2 module. Can check out errors. Save the downloaded files. HTML crash course! bs4 module (BeautifulSoup). BeautifulSoup() function; parses HTML. select() method; find an element. Get data from an element\u2019s attributes. Use: Search Google. Retrieve search results. Open tabs for each results. Read the command line arguments from sys.argv . Fetch results with the requests module. Find the links. Download all images, videos, files, etc. Back up an entire site by following all of its links. Copy all the messages off a web forum. Duplicate the catalogue of items for sale on an online store. selenium module. Launches and controls a web browser. Fill and submit forms. Simulate mouse clicks. Find elements on a page. Click on a page. Send special keys. Combining modules : Command line emailer. Image site downloader. Link verification. Chapter 12, Excel Spreadsheets \u00b6 openpyxl module. Read Excel documents. Open Excel documents. Get sheets from a workbook. Get cells from the sheets. Convert letters and numbers. Get rows and columns from sheets. Write results to a file. Use: Compare data across multiple rows in a spreadsheet. Open multiple files and compare data. Check blank rows or invalid data in any cells. Read data and use it as the input for Python programs. Write Excel Documents. Create and save Excel documents. Create and remove sheets. Write values to cells. Update a spreadsheet. Read data from one spreadsheet and write it to parts of other spreadsheets. Read data from websites, text files, or the clipboard and write it to a spreadsheet. Clean up data, regular expressions. Set the font style, objects, formulas. Adjust rows and columns. Set row height and column width. Merge and unmerge cells. Freeze panes. Create charts. Insert blank rows. Convert text files to spreadsheets, vice-versa. Chapter 13, PDF and Word Documents \u00b6 PyPDF2 module. Extract text from a PDF. Decrypt a PDF. Create PDF. Copy pages, rotate pages, overlay pages from a PDF. Add a logo, a timestamp, a watermark to a PDF. Use: Combine pages from many PDF. Cut out specific pages. Reorder pages. Create a PDF from only those pages that have some specific text. python-docx module. Read word documents. Get the full text from a .docs file. Style paragraphs. Create word documents with nondefault styles. Write word documents. Add headings, lines, page breaks, and pictures. Use: PDF Paranoia or encrypting a bunch of files. Custom invitations in Word. Brute-force PDF password breaker. Chapter 14, CSV Files and JSON Data \u00b6 csv module. Read, open CSV. Split the file. Print CSV. Loop within a file or through many files. Write CSV. Change delimiters and lineterminators. Remove the header. Use: Compare data between different rows in a CSV file or between multiple CSV files. Copy specific data from a CSV file to an Excel file; vice-versa. Check for invalid data or formatting mistakes in CSV files and alert the user. Read data from CSV file as input for Python programs. Excel to CSV to Excel converter (in conjunction with the openpyxl module). json module. Alike web scraping. API. Read, load, write, dump data. Use: Fetch weather from a website. Collect weather forecasts for several campsites or hiking trails. Schedule a program to regularly check weather and send your a frost alert. Pull weather data from multiple sites to show all at once, or calculate and show the average of multiple weather predictions. Chapter 15, Time, Scheduling Tasks, and Launching Programs \u00b6 time module. Read the system clock for the current time. Pause a program (sleep). Round numbers. Use: Track how much time spent on tasks with a stopwatch. Record track times or lap times. Build a program that launches other programs on a schedule by using the subprocess and threading modules. Create a timesheet app that records when you enter data, and use the current time to clock them in or out. Add a feature to a program to display the elapsed time since a process started (in conjunction with the requests module). Check how long a program has been running and offer the user a chance to cancel tasks. datetime module. Compute time and date delta. Retrieve a specific moment. Add a timestamp. Add pauses to a routine. Convert datetime object to strings. Convert strings to datetime objects. Use: Multithreading; modify a program to use a function. Create and start threads (see above). Pass command line arguments. Task scheduler. Open websites (time event). Run Python scripts (time event). Open files (time event). Create a countdown program. Schedule downloader (time event). Chapter 16, Sending Email and Text Messages \u00b6 http, smtp, mail, imap smtplib module. Connect to an SMTP server. Log in. Search for emails. Send a message. Encrypt emails. Retrieve and delete emails. Disconnect from the SMTP server. imapclient module. Connect to an IMAP server. Log in. Search for emails. Fetch an email and mark it as read. Get email addresses from a raw message. Get the body from a raw message. Delete emails. Disconnect from the IMAP server. Use: Send members dues reminders. Send text messages. Random emailer. \u2018Umbrella\u2019 reminder (in conjunction with weather forecasts and the requests module). Auto-unsubscriber. twilio module. Send text messages, SMS. Chapter 17, Manipulating Images \u00b6 Color and RGBA crash course! PIL module. Manipulate images with Pillow. Work with the image data type. Crop, copy, paste an image. Multiply images tiles. Resize, rotate, flip an image. Change pixels. Draw on images (points, lines, rectangles, ellipses, polygons, text). Use: Loop through a folder of images. Image batch processing: resizing, cropping, copying and pasting, rotating, etc. Adding a logo to several images. Identify the photo folders. Create custom cards with custom invitations in Word (see chapter 13). Chapter 18, Controlling the Keyboard and Mouse with GUI Automation \u00b6 virtual keystrokes, mouse clicks pyautogui module and dependencies based of the OS in use. Shutdown the computer. Log out from a session. Pauses, fail-safes. Control mouse movements and move the mouse. Get the mouse position and control the mouse. Control the keyboard. Send a string from the keyboard. Type in key name. Press and release buttons. Activate hotkey. Use: Image recognition. Automatic form filler. Look busy! Instant messenger bot. Game-playing bot tutorial. Appendix A \u00b6 PIP. Installing modules. Appendix B \u00b6 Running programs. Shebang line. On Windows. On UNIX. Appendix C \u00b6 Answers from questions: chapter 2 to 18. Additional Content \u00b6 Download files used in the book. List of JSON API: Twitter API. Facebook Social Graph API. Flickr. YouTube. OpenStreetMap. Google Maps. Imgur API. 26 Weather APIs. Rotten Tomatoes. Reddit. List of programming practice sites. (programming problems you can try to practice your coding skills). List of web comics. Schedulers (operating system scheduling process). How to do PyCon or any tech conference.","title":"Automate the Boring Stuff with Python"},{"location":"Automate the Boring Stuff with Python/#chapter-3-functions","text":"global, local, variable, scope Exception handling with try: and except .","title":"Chapter 3, Functions"},{"location":"Automate the Boring Stuff with Python/#chapter-4-lists-and-tuples","text":"data type, index, sublist, subset, slice, change, concatenate, concatenation, tuple, convert, tuple to list len() function; length. in and not in operators. += , -= , *= , /= , %= augmented assignments. index() method; extract the position of an element. append() method. insert() method. remove() method. sort() method. copy module and copy() method. deepcopy() method; for inner list or a list of lists (ensure the key exists).","title":"Chapter 4, Lists (and Tuples)"},{"location":"Automate the Boring Stuff with Python/#chapter-5-dictionaries-and-structuring-data","text":"loop Dictionaries are not indexed and ordered like lists. keys() method; extract keys. values() method; extract values. items() method; extract both. get() method; check out both. in and not in operators. setdefault() method, check out a key and set value to a key. Pretty print with the pprint() and pformat() functions. Nested dictionaries and lists.","title":"Chapter 5, Dictionaries and Structuring Data"},{"location":"Automate the Boring Stuff with Python/#chapter-6-manipulating-strings","text":"Escape character: \\ : \\' , \\\" , \\t , \\n , \\\\ . Raw strings: print(r'That is Carol') . Triple quotes: 1 2 3 4 5 6 7 print ( '''Dear Alice, bla-bla-bla cheers''' ) print ( \"\"\"Dear Alice, bla-bla-bla cheers\"\"\" ) Comment: # . Multiline comments: \"\"\" \"\"\" . Slice, subset with [:] . in and not in operators. lower() method. upper() method. capitalize() method. is method; check if x is part of y. islower() method. isupper() method. isalpha() method; check letters, not blank. isalnum() method; check letters and numbers, and not blank. isdecimal() method; check numeric characters and not blank. isspace() method; check spaces, tabs and new lines and not blank. istitle() method; check if it begins with an uppercase letter followed with lowercase letters. startwith() method; check if a string begins with a string of characters. endwith() method; idem. join() method; concatenate. split() method. rjust() method; justify. ljust() method justify. center() method. strip() method; remove white space. rstrip() method; ; remove white space to the right. lstrip() method; remove white space to the left. pyperclip module. The pyperclip.pyclip function send text to and receive text from the clipboard: In addition: 1 2 3 4 import pyperclip pyperclip . copy ( 'Hello world!' ) pyperclip . paste ()","title":"Chapter 6, Manipulating Strings"},{"location":"Automate the Boring Stuff with Python/#chapter-7-pattern-matching-and-regular-expressions","text":"patterns of text, with, without regular expression, regex, object, match, matching, group, grouping, pipe, question mark, star, ?, *, plus, +, curly bracket, {, }, character class, digit, numeric, letter, underscore, space, tab, newline, caret, ^, dollar sign, $, wildcard, dot, ., dotstar, newline, symbols, case-sensitive, case-insensitive re module. re.compile() method; find a single occurrence. re.findall() method; find all occurrences. sub() method; substitute. re.IGNORECASE ; ignore capitalization with the compile() method. re.DOTALL ; ignore dots with the re.compile() method. re.VERBOSE ; write comment with the re.compile() method.","title":"Chapter 7, Pattern Matching and Regular Expressions"},{"location":"Automate the Boring Stuff with Python/#chapter-8-reading-and-writing-files","text":"file, file path, filename os module. A relative path: ..\\eggs\\spam.txt , .\\fizz\\spam.txt . An absolute path: C:\\bacon\\fizz\\spam.txt . os.getcwd() or os.chdir() functions; extract the current working directory. os.makedir() function; create a new folder. os.path module. Handle absolute and relative paths. Find file sizes and folder contents. Check path validity. Windows: backslash or \\ : 1 2 import os os . path . join ( 'usr' , 'bin' , 'spam' ) Yields: 1 'usr \\\\ bin \\\\ spam' UNIX: forwardslash or / : 1 2 import os os . path . join ( 'usr' , 'bin' , 'spam' ) Yields: 1 'usr/bin/spam' Read and write files: os.path.open() function. os.path.read() method. os.path.readline() method. os.path.write() method. os.path.close() method. shelve module. Handle binary files. pprint module. Pretty printing: pprint.pprint() . pprint.pformat() .","title":"Chapter 8, Reading and Writing Files"},{"location":"Automate the Boring Stuff with Python/#chapter-9-organizing-files","text":"pdf, every sub-folder, folder, foldername, subfolder, filename, file, remove, zero, change titles, compress, decompress, zip, unzip shutil module. Copy, move, rename, and delete files and folders. shutil.rmtree() function; delete file and folder. os module. Delete, empty, remove files and folders, and change the path. os.walk() method; walk the tree directory. send2trash module. Delete files and folders, but much safer. zipfile module. Compress and uncompress. Read the content of compressed and zipped files. zipfile.extracall() ; method extracts all the files and folders from a zip file. write() method; create a zip file.","title":"Chapter 9, Organizing Files"},{"location":"Automate the Boring Stuff with Python/#chapter-10-debugging","text":"Handle errors with try and except . Raise exceptions with a raise statement and the Exception() function. traceback module. Discover what and how an error happens and obtain it as a string with the traceback.format_exc() method. An assertion is a sanity check performed with an assert statement. logging module. Display log messages as the program runs. Log to a file. Debug a code. Enable and disable logging. Enable an IDLE debugger. Set a breakpoint to check out potential bugs.","title":"Chapter 10, Debugging"},{"location":"Automate the Boring Stuff with Python/#chapter-11-web-scraping","text":"html webbrowser module. Open a browser to a specific webpage (in conjunction with the sys module). Use: Get a street address from the command line to the clipboard. Go to a Google Maps page. Read command line arguments from sys.argv . Read the clipboard content. Open all links on a page in separate tabs. Open the browser to the url for local weather. Open several social network sites. requests module. Download files and webpages; similar to opening, reading, writing, closing files and folders. Simpler than the urllib2 module. Can check out errors. Save the downloaded files. HTML crash course! bs4 module (BeautifulSoup). BeautifulSoup() function; parses HTML. select() method; find an element. Get data from an element\u2019s attributes. Use: Search Google. Retrieve search results. Open tabs for each results. Read the command line arguments from sys.argv . Fetch results with the requests module. Find the links. Download all images, videos, files, etc. Back up an entire site by following all of its links. Copy all the messages off a web forum. Duplicate the catalogue of items for sale on an online store. selenium module. Launches and controls a web browser. Fill and submit forms. Simulate mouse clicks. Find elements on a page. Click on a page. Send special keys. Combining modules : Command line emailer. Image site downloader. Link verification.","title":"Chapter 11, Web Scraping"},{"location":"Automate the Boring Stuff with Python/#chapter-12-excel-spreadsheets","text":"openpyxl module. Read Excel documents. Open Excel documents. Get sheets from a workbook. Get cells from the sheets. Convert letters and numbers. Get rows and columns from sheets. Write results to a file. Use: Compare data across multiple rows in a spreadsheet. Open multiple files and compare data. Check blank rows or invalid data in any cells. Read data and use it as the input for Python programs. Write Excel Documents. Create and save Excel documents. Create and remove sheets. Write values to cells. Update a spreadsheet. Read data from one spreadsheet and write it to parts of other spreadsheets. Read data from websites, text files, or the clipboard and write it to a spreadsheet. Clean up data, regular expressions. Set the font style, objects, formulas. Adjust rows and columns. Set row height and column width. Merge and unmerge cells. Freeze panes. Create charts. Insert blank rows. Convert text files to spreadsheets, vice-versa.","title":"Chapter 12, Excel Spreadsheets"},{"location":"Automate the Boring Stuff with Python/#chapter-13-pdf-and-word-documents","text":"PyPDF2 module. Extract text from a PDF. Decrypt a PDF. Create PDF. Copy pages, rotate pages, overlay pages from a PDF. Add a logo, a timestamp, a watermark to a PDF. Use: Combine pages from many PDF. Cut out specific pages. Reorder pages. Create a PDF from only those pages that have some specific text. python-docx module. Read word documents. Get the full text from a .docs file. Style paragraphs. Create word documents with nondefault styles. Write word documents. Add headings, lines, page breaks, and pictures. Use: PDF Paranoia or encrypting a bunch of files. Custom invitations in Word. Brute-force PDF password breaker.","title":"Chapter 13, PDF and Word Documents"},{"location":"Automate the Boring Stuff with Python/#chapter-14-csv-files-and-json-data","text":"csv module. Read, open CSV. Split the file. Print CSV. Loop within a file or through many files. Write CSV. Change delimiters and lineterminators. Remove the header. Use: Compare data between different rows in a CSV file or between multiple CSV files. Copy specific data from a CSV file to an Excel file; vice-versa. Check for invalid data or formatting mistakes in CSV files and alert the user. Read data from CSV file as input for Python programs. Excel to CSV to Excel converter (in conjunction with the openpyxl module). json module. Alike web scraping. API. Read, load, write, dump data. Use: Fetch weather from a website. Collect weather forecasts for several campsites or hiking trails. Schedule a program to regularly check weather and send your a frost alert. Pull weather data from multiple sites to show all at once, or calculate and show the average of multiple weather predictions.","title":"Chapter 14, CSV Files and JSON Data"},{"location":"Automate the Boring Stuff with Python/#chapter-15-time-scheduling-tasks-and-launching-programs","text":"time module. Read the system clock for the current time. Pause a program (sleep). Round numbers. Use: Track how much time spent on tasks with a stopwatch. Record track times or lap times. Build a program that launches other programs on a schedule by using the subprocess and threading modules. Create a timesheet app that records when you enter data, and use the current time to clock them in or out. Add a feature to a program to display the elapsed time since a process started (in conjunction with the requests module). Check how long a program has been running and offer the user a chance to cancel tasks. datetime module. Compute time and date delta. Retrieve a specific moment. Add a timestamp. Add pauses to a routine. Convert datetime object to strings. Convert strings to datetime objects. Use: Multithreading; modify a program to use a function. Create and start threads (see above). Pass command line arguments. Task scheduler. Open websites (time event). Run Python scripts (time event). Open files (time event). Create a countdown program. Schedule downloader (time event).","title":"Chapter 15, Time, Scheduling Tasks, and Launching Programs"},{"location":"Automate the Boring Stuff with Python/#chapter-16-sending-email-and-text-messages","text":"http, smtp, mail, imap smtplib module. Connect to an SMTP server. Log in. Search for emails. Send a message. Encrypt emails. Retrieve and delete emails. Disconnect from the SMTP server. imapclient module. Connect to an IMAP server. Log in. Search for emails. Fetch an email and mark it as read. Get email addresses from a raw message. Get the body from a raw message. Delete emails. Disconnect from the IMAP server. Use: Send members dues reminders. Send text messages. Random emailer. \u2018Umbrella\u2019 reminder (in conjunction with weather forecasts and the requests module). Auto-unsubscriber. twilio module. Send text messages, SMS.","title":"Chapter 16, Sending Email and Text Messages"},{"location":"Automate the Boring Stuff with Python/#chapter-17-manipulating-images","text":"Color and RGBA crash course! PIL module. Manipulate images with Pillow. Work with the image data type. Crop, copy, paste an image. Multiply images tiles. Resize, rotate, flip an image. Change pixels. Draw on images (points, lines, rectangles, ellipses, polygons, text). Use: Loop through a folder of images. Image batch processing: resizing, cropping, copying and pasting, rotating, etc. Adding a logo to several images. Identify the photo folders. Create custom cards with custom invitations in Word (see chapter 13).","title":"Chapter 17, Manipulating Images"},{"location":"Automate the Boring Stuff with Python/#chapter-18-controlling-the-keyboard-and-mouse-with-gui-automation","text":"virtual keystrokes, mouse clicks pyautogui module and dependencies based of the OS in use. Shutdown the computer. Log out from a session. Pauses, fail-safes. Control mouse movements and move the mouse. Get the mouse position and control the mouse. Control the keyboard. Send a string from the keyboard. Type in key name. Press and release buttons. Activate hotkey. Use: Image recognition. Automatic form filler. Look busy! Instant messenger bot. Game-playing bot tutorial.","title":"Chapter 18, Controlling the Keyboard and Mouse with GUI Automation"},{"location":"Automate the Boring Stuff with Python/#appendix-a","text":"PIP. Installing modules.","title":"Appendix A"},{"location":"Automate the Boring Stuff with Python/#appendix-b","text":"Running programs. Shebang line. On Windows. On UNIX.","title":"Appendix B"},{"location":"Automate the Boring Stuff with Python/#appendix-c","text":"Answers from questions: chapter 2 to 18.","title":"Appendix C"},{"location":"Automate the Boring Stuff with Python/#additional-content","text":"Download files used in the book. List of JSON API: Twitter API. Facebook Social Graph API. Flickr. YouTube. OpenStreetMap. Google Maps. Imgur API. 26 Weather APIs. Rotten Tomatoes. Reddit. List of programming practice sites. (programming problems you can try to practice your coding skills). List of web comics. Schedulers (operating system scheduling process). How to do PyCon or any tech conference.","title":"Additional Content"},{"location":"Codecademy Python/","text":"Foreword Code snippets and excerpts from the course. Python 2. From Codecademy. UNIT 1, Python Syntax \u00b6 Python Syntax \u00b6 Python is an easy to learn programming language. You can use it to create web apps, games, even a search engine! 1 2 3 4 5 6 print \"Welcome to Python!\" print ( \"Welcome\" ) print 5 + 3 print ( 5 + 5 ) print \"What \" + str ( 3 ) print \"What\" , 5 1 2 3 4 5 6 Welcome to Python! Welcome 8 10 What 3 What 5 1 2 3 4 5 6 7 8 a = 30 print \"What \" + str ( a ) b = \"A list \\t *A \\\\ \\\" \\' \" print b c = 10 + 20 print c 1 2 3 What 30 A list *A \\ \" ' 30 1 2 3 4 5 6 print \"1 : %r \" % ( a ) # read# print \"2 : %s \" % ( a ) # string# print \"? : %d \" % ( a ) # digit print \"3 : %r \" % ( b ) print \"4 : %s \" % ( b ) # print \"? : %d\" % (b) !!! 1 2 3 4 5 1 : 30 2 : 30 ? : 30 3 : 'A list \\t*A \\\\ \" \\' ' 4 : A list * A \\ \" ' Creating web apps, games, and search engines all involve storing and working with different types of data. They do so using variables. A variable stores a piece of data, and gives it a specific name. 1 my_variable = 10 You just stored a number in a variable. Numbers are one data type we use in programming. A second data type is called a boolean. A boolean is like a light switch. It can only have two values. Just like a light switch can only be on or off, a boolean can only be True or False . 1 2 3 my_int = 7 my_float = 1.23 my_bool = True Say my_int = 7 . You can change the value of a variable by \u201creassigning\u201d it. 1 2 3 4 5 my_int = 7 my_int = 3 print my_int 1 3 In Python, whitespace is used to structure code. Whitespace is important, so you have to be careful with how you use it. 1 2 3 4 5 def spam (): eggs = 12 return eggs print spam () 1 12 You\u2019ll get this error whenever your whitespace is off. The interpreter runs your code line by line, and checks for any errors. You probably saw us use the # sign a few times in earlier exercises. The # sign is for comments. A comment is a line of text that Python won\u2019t try to run as code. It\u2019s just for humans to read. Comments make your program easier to understand. When you look back at your code or others want to collaborate with you, they can read your comments and easily figure out what your code does. The # sign will only comment out a single line. While you could write a multi-line comment, starting each line with # , that can be a pain. Instead, for multi-line comments, you can include the whole block in a set of triple quotation marks: 1 2 3 4 \"\"\" Sipping from your cup 'til it runneth over, Holy Grail. \"\"\" 1 \"\\nSipping from your cup 'til it runneth over,\\nHoly Grail.\\n\" Great! Now let\u2019s do some math. You can add, subtract, multiply, divide numbers. 1 2 3 4 5 6 7 8 addition = 72 + 23 subtraction = 108 - 204 multiplication = 108 * 0.5 division = 108 / 9 count_to = 72 + 56 print count_to 1 128 All that math can be done on a calculator, so why use Python? Because you can combine math with other data types (e.g. booleans) and commands to create useful programs. Calculators just stick to numbers. Create a new variable called eight and set it to 8, or the result of 2 to the power to 3 ( 2 ^ 3 oe 2 ** 3 ). 1 2 3 eggs = 10 ** 2 print eggs 1 100 Our final operator is modulo. Modulo returns the remainder from a division. So, if you type 3 % 2 , it will return 1, because 2 goes into 3 evenly once, with 1 left over. 1 2 3 spam = 5 % 4 print spam 1 1 Tip Calculator \u00b6 Now let\u2019s apply the concepts from the previous section to a real world example. You\u2019ve finished eating at a restaurant, and received this bill: Cost of meal: $44.50 Restaurant tax: 6.75% Tip: 15% 1 2 3 4 5 6 7 8 meal = 44.50 tax = 6.75 / 100 tip = 0.15 meal = meal + meal * tax total = meal + meal * tip print ( \" %.2f \" ) % total 1 54.63 Quiz 1 \u00b6 OK UNIT 2, Strings and Console Output \u00b6 Strings & Console Output \u00b6 Another useful data type is the string. A string can contain letters, numbers, and symbols. 1 2 3 name = \"Ryan\" age = \"19\" food = \"cheese\" Let\u2019s get a little practice in with strings. 1 2 3 4 5 6 7 caesar = \"Graham\" praline = \"John\" viking = \"Teresa\" print caesar print praline print viking 1 2 3 Graham John Teresa 1 'There' s a snake in my boot ! ' 1 2 3 4 File \"&lt;ipython-input-16-13621f01b99c&gt;\", line 1 'There's a snake in my boot!' ^ SyntaxError: invalid syntax This code breaks because Python thinks the apostrophe in \u2018There\u2019s\u2018 ends the string. We can use the backslash to fix the problem, like this: 1 2 'There \\' s a snake in my boot!' 'This isn \\' t flying, this is falling with style!' 1 \"This isn't flying, this is falling with style!\" Each character in a string is assigned a number. This number is called the index. Check out the diagram in the editor. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 c = \"cats\" [ 0 ] n = \"Ryan\" [ 3 ] \"\"\" The string \"PYTHON\" has six characters, numbered 0 to 5, as shown below: +---+---+---+---+---+---+ | P | Y | T | H | O | N | +---+---+---+---+---+---+ 0 1 2 3 4 5 So if you wanted \"Y\", you could just type \"PYTHON\"[1] (always start counting from 0!) \"\"\" fifth_letter = \"MONTY\" [ 4 ] print fifth_letter 1 Y Now that we know how to store strings, let\u2019s see how we can change them using string methods. String methods let you perform specific tasks for strings. We\u2019ll focus on four string methods: len() lower() upper() str() length, string 1 2 3 4 5 6 7 8 9 parrot = \"Norwegian Blue\" print len ( parrot ) # length, number of characters, including blanks print parrot . lower () # to lowercases print parrot . upper () # to uppercases pi = 3.14 print str ( pi ) # number of character in the string 1 2 3 4 14 norwegian blue NORWEGIAN BLUE 3.14 len(string) and str(object) , but dot notation (such as \u201cString\u201d.upper()) for the rest. Methods that use dot notation only work with strings. On the other hand, len() and str() can work on other data types. The area where we\u2019ve been writing our code is called the editor. The console is where the results of your code is shown. print simply displays your code in the console. 1 2 3 4 print \"Monty Python\" the_machine_goes = \"Ping!\" print the_machine_goes 1 2 Monty Python Ping! Now let\u2019s combine the two! The + operator between strings will \u2018add\u2019 them together, one after the other. Notice that there are spaces inside the quotation marks after Life and of so that we can make the combined string look like 3 words. Combining strings together like this is called concatenation. Let\u2019s try concatenating a few strings together now! 1 2 print \"Life \" + \"of \" + \"Brian\" print \"Spam and eggs\" 1 2 Life of Brian Spam and eggs Sometimes you need to combine a string with something that isn\u2019t a string. In order to do that, you have to convert the non-string into a string. he str() method converts non-strings into strings. In the above example, you convert the number 2 into a string and then you concatenate the strings together. 1 print \"The value of pi is around \" + str ( 3.14 ) 1 The value of pi is around 3.14 When you want to print a variable with a string, the % operator after a string is used to combine a string with variables. The % operator will replace a %s in the string with the string variable that comes after it. 1 2 3 4 5 6 7 8 9 10 11 string_1 = \"Camelot\" string_2 = \"place\" print \"Let's not go to %s . 'Tis a silly %s .\" % ( string_1 , string_2 ) name = raw_input ( \"What is your name?\" ) quest = raw_input ( \"What is your quest?\" ) color = raw_input ( \"What is your favorite color?\" ) print \"Ah, so your name is %s , your quest is %s , \" \\ \"and your favorite color is %s .\" % ( name , quest , color ) 1 2 3 4 5 Let's not go to Camelot. 'Tis a silly place. What is your name?Al What is your quest?Graal What is your favorite color?red Ah, so your name is Al, your quest is Graal, and your favorite color is red. Date and Time \u00b6 A lot of times you want to keep track of when something happened. We can do so in Python using datetime . Here we\u2019ll use datetime to print the date and time in a nice format. 1 2 3 4 5 6 7 8 9 10 11 12 13 from datetime import datetime # all functions from datetime are imported now = datetime . now () print now print now . year print now . month print now . day print ' %s / %s / %s ' % ( now . month , now . day , now . year ) print ' %s : %s : %s ' % ( now . hour , now . minute , now . second ) print ' %s / %s / %s %s : %s : %s ' % ( now . month , now . day , now . year , now . hour , now . minute , now . second ) 1 2 3 4 5 6 7 2016-10-18 14:02:03.661000 2016 10 18 10/18/2016 14:2:3 10/18/2016 14:2:3 Quiz 2 \u00b6 1 2 3 4 5 6 7 8 9 10 11 time = datetime . now () print time . day time = datetime . now () #13:08:09 print str ( time . hour ) + \":\" + str ( time . minute ) + \":\" + str ( time . second ) now = datetime . now () #2013-01-04 19:22:43 print ' %s / %s / %s %s : %s : %s ' % ( now . day , now . month , now . year , now . hour , now . minute , now . second ) day = 04 1 2 3 18 14:2:11 18/10/2016 14:2:11 Project Python Mad Libs \u00b6 concatenate, variable Python can be used for a variety of different tasks. In this project, we\u2019ll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story. Mad Libs require: Words from the reader (for the blank spaces) A story to plug the words into For this project, we\u2019ll provide you with the story (feel free to modify it), but it will be up to you to build a program that does the following: Prompt the user for input Print the entire Mad Libs story with the user\u2019s input in the right places 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \"\"\" Python can be used for a variety of different tasks. In this project, we'll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story. \"\"\" print \"The program is running.\" name = raw_input ( \"Input a name? \" ) adj_one = raw_input ( \"Input an adjective? \" ) adj_two = raw_input ( \"Input another adjective? \" ) adj_three = raw_input ( \"Input a last adjective? \" ) verb_one = raw_input ( \"Input a verb? \" ) verb_two = raw_input ( \"Input another verb? \" ) verb_three = raw_input ( \"Input a last verb? \" ) noun_one = raw_input ( \"Input a noun? \" ) noun_two = raw_input ( \"Input another noun? \" ) noun_three = raw_input ( \"Input another noun? \" ) noun_four = raw_input ( \"Input a last noun? \" ) animal = raw_input ( \"Input an animal? \" ) food = raw_input ( \"Input a food? \" ) fruit = raw_input ( \"Input a fruit? \" ) number = raw_input ( \"Input a number? \" ) superhero = raw_input ( \"Input a superhero? \" ) country = raw_input ( \"Input a country? \" ) dessert = raw_input ( \"Input a dessert? \" ) year = raw_input ( \"Input a year? \" ) print \"\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 The program is running. Input a name? Al Input an adjective? small Input another adjective? great Input a last adjective? yellow Input a verb? dig Input another verb? walk Input a last verb? eat Input a noun? spoon Input another noun? lamp Input another noun? table Input a last noun? pen Input an animal? dog Input a food? pasta Input a fruit? apple Input a number? 10 Input a superhero? spiderman Input a country? mexico Input a dessert? apple pie Input a year? 2016 The template for the story. 1 2 3 STORY = \"This morning I woke up and felt %s because %s was going to finally %s over the big %s %s . On the other side of the %s were many %s s protesting to keep %s in stores. The crowd began to %s to the rythym of the %s , which made all of the %s s very %s . %s tried to %s into the sewers and found %s rats. Needing help, %s quickly called %s . %s appeared and saved %s by flying to %s and dropping %s into a puddle of %s . %s then fell asleep and woke up in the year %s , in a world where %s s ruled the world.\" print STORY % ( adj_one , name , verb_one , adj_two , noun_one , noun_two , animal , food , verb_two , noun_three , fruit , adj_three , name , verb_three , number , name , superhero , superhero , name , country , name , dessert , name , year , noun_four ) 1 This morning I woke up and felt small because Al was going to finally dig over the big great spoon. On the other side of the lamp were many dogs protesting to keep pasta in stores. The crowd began to walk to the rythym of the table, which made all of the apples very yellow. Al tried to eat into the sewers and found 10 rats. Needing help, Al quickly called spiderman. spiderman appeared and saved Al by flying to mexico and dropping Al into a puddle of apple pie. Al then fell asleep and woke up in the year 2016, in a world where pens ruled the world. UNIT 3, Conditionals and Control Flow \u00b6 Conditionals & Control Flow \u00b6 Control flow gives us this ability to choose among outcomes based off what else is happening in the program. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def clinic (): print \"You've just entered the clinic!\" print \"Do you take the door on the left or the right?\" answer = raw_input ( \"Type left or right and hit 'Enter'.\" ) . lower () if answer == \"left\" or answer == \"l\" : print \"This is the Verbal Abuse Room, you heap of parrot droppings!\" elif answer == \"right\" or answer == \"r\" : print \"Of course this is the Argument Room, I've told you that already!\" else : print \"You didn't pick left or right! Try again.\" clinic () # launch the function back clinic () 1 2 3 4 You've just entered the clinic! Do you take the door on the left or the right? Type left or right and hit 'Enter'.left This is the Verbal Abuse Room, you heap of parrot droppings! Comparators. There are six: Equal to: == Not equal to: != Less than: < Less than or equal to: <= Greater than: > Greater than or equal to: >= Note that == compares whether two things are equal, and = assigns a value to a variable. 1 2 3 bool_one = 1 + 2 bool_two = 3 bool_one == bool_two # true 1 True Boolean operators compare statements and result in boolean values. There are three boolean operators: and , which checks if both the statements are True; or , which checks if at least one of the statements is True; not , which gives the opposite of the statement. 1 2 3 4 5 bool_one = 1 > 2 and 2 > 3 # false bool_two = False and True # false bool_one = True or False # true bool_two = 2 == 2 or 2 == 3 # true bool_one = not 40 != 41 # true if is a conditional statement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 answer = \"Left\" if answer == \"Left\" : print \"This is the Verbal Abuse Room, you heap of parrot droppings!\" def using_control_once (): if \"A\" == \"A\" : return \"Success #1\" def using_control_again (): if 1 != 2 : return \"Success #2\" print using_control_once () print using_control_again () 1 2 3 This is the Verbal Abuse Room, you heap of parrot droppings! Success #1 Success #2 The else statement complements the if statement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 answer = \"'This but a scratch!\" def black_knight (): if answer == \"'Tis but a scratch!\" : return True else : return False # Make sure this returns False def french_soldier (): if answer == \"Go away, or I shall taunt you a second time!\" : return True else : return False # Make sure this returns False print black_knight () print french_soldier () 1 2 False False elif is short for \u2018else if\u2019. It means exactly what it sounds like: \u201cotherwise, if the following expression is true, do this!\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def greater_less_equal_5 ( answer ): if answer > 5 : return 1 elif answer < 5 : return - 1 else : return 0 print greater_less_equal_5 ( 4 ) print greater_less_equal_5 ( 5 ) print greater_less_equal_5 ( 6 ) def the_flying_circus (): if 1 != 0 and 3 > 2 : return True elif 0 == 0 or 2 == 2 : return False else : return True print the_flying_circus () 1 2 3 4 -1 0 1 True PygLatin \u00b6 Now let\u2019s take what we\u2019ve learned so far and write a Pig Latin translator. Pig Latin is a language game, where you move the first letter of the word to the end and add \u201cay.\u201d So \u201cPython\u201d becomes \u201cythonpay.\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 print 'Welcome to the Pig Latin Translator!' original = raw_input ( \"Enter a word:\" ) if len ( original ) > 0 and original . isalpha (): print original else : print \"empty\" pyg = 'ay' original = raw_input ( 'Enter a word: ' ) if len ( original ) > 0 and original . isalpha (): word = original . lower () first = word [ 0 ] new_word = word + first + pyg new_word = new_word [ 1 : len ( new_word )] print new_word else : print 'empty' 1 2 3 4 5 Welcome to the Pig Latin Translator! Enter a word:translator translator Enter a word: radiator adiatorray Quiz 3 \u00b6 Takeaway: there no limits to the number of elif . Project Area Calculator \u00b6 Python is especially useful for doing math and can be used to automate many calculations. In this project, you\u2019ll create a calculator than can compute the area of a given shape, as selected by the user. The calculator will be able to determine the area of the following shapes: Circle Triangle The program should do the following: Prompt the user to select a shape Depending on the shape the user selects, calculate the area of that shape Print the area of that shape to the user Python is especially useful for doing math and can be used to automate many calculations. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 from math import pi from time import sleep from datetime import datetime now = datetime . now () # from datetime print \"The calculator is starting up at: \\n \" + str ( now ) print \" \\n Curently: %s / %s / %s %s : %s \" % ( now . month , now . day , now . year , now . hour , now . minute ) sleep ( 1 ) # pause 1 sec hint = \"Don't forget to include the correct units!\" from math import pi from time import sleep def question (): option = raw_input ( \"Enter C for Circle or T for Triangle: \" ) if option . upper () == 'C' or option . upper () == 'CIRCLE' : print circle () elif option . upper () == 'T' or option . upper () == 'TRIANGLE' : print triangle () else : print \"Please answer with a C or T\" , question () #!!!!!! def circle (): radius = float ( raw_input ( \"Enter radius: \" )) areac = pi * ( radius ** 2 ) print \"The pie is baking...\" sleep ( 1 ) return ( str ( \" %.2f \" % areac )) # !!!!! def triangle (): base = float ( raw_input ( \"Enter base: \" )) height = float ( raw_input ( \"Enter height: \" )) areat = base * height / 2 print \"Uni Bi Tri...\" sleep ( 1 ) return ( str ( \" %.2f \" % areat )) # !!!!! question () 1 2 3 4 5 6 7 8 9 The calculator is starting up at: 2016-10-18 14:05:19.204000 Curently: 10/18/2016 14:5 Enter C for Circle or T for Triangle: T Enter base: 10 Enter height: 5 Uni Bi Tri... 25.00 UNIT 4, Functions \u00b6 Functions \u00b6 You might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it\u2019s much cleaner to define a function, which can then be used repeatedly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def tax ( billa ): billb = float ( billa ) * 1.08 return billb def tip ( billc ): billd = float ( billc ) * 1.15 return billd meal_cost = 100.00 meal_with_tax = tax ( meal_cost ) print ( \"With tax: %.2f \" % meal_with_tax ) # !!!!! meal_with_tip = tip ( meal_with_tax ) print ( \"With tip: %.2f \" % meal_with_tip ) # The header, the comment, the body: def spam (): \"\"\"print the string \"Eggs!\" to the console.\"\"\" print \"Eggs!\" 1 2 With tax: 108.00 With tip: 124.20 After defining a function, it must be called to be implemented. 1 2 3 4 5 6 7 def square ( n ): \"\"\"Returns the square of a number.\"\"\" squared = n ** 2 return ( \" %d squared is %d .\" % ( n , squared )) print square ( 10 ) 1 10 squared is 100. Functions can be much more powerful than that. For example, a function can call another function. 1 2 3 4 5 6 7 8 9 n = 1 def one_good_turn ( n ): return n + 1 def deserves_another ( m ): return one_good_turn ( m ) + 2 # calling a function already defined Again. 1 2 3 4 5 6 7 8 9 10 11 12 def cube ( number ): return number ** 3 def by_three ( number ): if number % 3 == 0 : return cube ( number ) else : return False by_three ( 3 ) 1 27 Import modules to use custom functions. 1 2 3 import math print math . sqrt ( 25 ) 1 5.0 However, we only really needed the sqrt function, and it can be frustrating to have to keep typing math.sqrt() . It\u2019s possible to import only certain variables or functions from a given module (like pi above). Pulling in just a single function from a module is called a function import, and it\u2019s done with the from keyword. 1 2 from math import sqrt # module 'math', function 'sqrt' from math import pi # module 'math', variable 'pi' Universal import can handle all of the variables and functions in a module to avoid to constantly type math . 1 from math import * Universal import may look great on the surface, but they\u2019re not a good idea for one very important reason: they fill your program with a ton of variable and function names without the safety of those names still being associated with the module(s) they came from. dir(), dir 1 2 3 4 import math everything = dir ( math ) print everything 1 ['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'] For these reasons, it\u2019s best to stick with either import module and type module . name or just import specific variables and functions from various modules as needed. Let\u2019s look at some of the functions that are built in to Python (no modules required!). 1 2 3 4 5 6 7 8 9 10 11 12 13 def distance_from_zero ( arg ): return abs ( arg ) def biggest_number ( arg1 , arg2 ): return min ( arg1 , arg2 ) def smallest_number ( * args ): return min ( args ) print distance_from_zero ( - 10 ) 1 print biggest_number ( - 10 , - 5 ) 1 -10 1 print biggest_number ( - 10 , - 5 , 5 , 10 ) # test 1 2 3 4 5 6 7 8 9 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-24-40abbc687778&gt; in &lt;module&gt;() ----&gt; 1 print biggest_number(-10, -5, 5, 10) # test TypeError: biggest_number() takes exactly 2 arguments (4 given) 1 2 3 print smallest_number ( 1 , 2 ) print smallest_number ( 3 , 4 , 5 , 6 , 7 ) print smallest_number ( - 10 , - 5 , 5 , 10 ) 1 2 3 1 3 -10 1 2 3 4 5 6 7 8 9 10 11 12 maximum = max ( - 5 , 3 , 5 , 10 ) print maximum minimum = min ( - 3 , - 5 ) print minimum absolute = abs ( - 42 ) print absolute print type ( 42 ) # <type 'int'> print type ( 4.2 ) # <type 'float'> print type ( 'spam' ) # <type 'str'> 1 2 3 4 5 6 10 -5 42 &lt;type 'int'&gt; &lt;type 'float'&gt; &lt;type 'str'&gt; Taking a Vacation \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def hotel_cost ( nights ): return 140 * nights def plane_ride_cost ( city ): if city == \"Charlotte\" : return 183 elif city == \"Tampa\" : return 220 elif city == \"Pittsburgh\" : return 222 elif city == \"Los Angeles\" : return 475 def rental_car_cost ( days ): cost = days * 40 if days >= 7 : cost -= 50 elif days >= 3 and days < 7 : cost -= 20 else : cost return cost def trip_cost ( city , days , spending_money ): return rental_car_cost ( days ) + hotel_cost ( days ) + plane_ride_cost ( city ) + spending_money print trip_cost ( \"Los Angeles\" , 5 , 600 ) 1 1955 Quiz 4 \u00b6 OK Project Number Guess \u00b6 Wanna play a game? In this project, we\u2019ll build a program that rolls a pair of dice and asks the user to guess a number. Based on the user\u2019s guess, the program should determine a winner. If the user\u2019s guess is greater than the total value of the dice roll, they win! Otherwise, the computer wins. The program should do the following: Randomly roll a pair of dice Add the values of the roll Ask the user to guess a number Compare the user\u2019s guess to the total value Decide a winner (the user or the program) Inform the user who the winner is 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 from random import randint from time import sleep def get_user_guess (): user_guess = int ( raw_input ( \"Guess a number: \" )) return user_guess def roll_dice ( number_of_sides ): first_roll = randint ( 1 , number_of_sides ) second_roll = randint ( 1 , number_of_sides ) max_value = number_of_sides * 2 print \"The maximum value is: \" + str ( max_value ) sleep ( 1 ) user_guess = get_user_guess () if user_guess > max_value : print \"Your guess is higher than the max allowed (\" + str ( max_value ) + \"). Please, take another guess.\" return # exit the if block is condition met else : print \"Rolling...\" sleep ( 1 ) print \"First roll is: %d \" % ( first_roll ) sleep ( 1 ) print \"Second roll is: %d \" % ( second_roll ) total_roll = first_roll + second_roll print \"Result...\" sleep ( 1 ) if user_guess > total_roll : print \"You win since your guess, \" + str ( user_guess ) + \", is greater than the total roll, \" + str ( total_roll ) return # exit else : print \"You lose!\" return # exit roll_dice ( 6 ) 1 2 3 4 5 6 7 The maximum value is: 12 Guess a number: 5 Rolling... First roll is: 1 Second roll is: 2 Result... You win since your guess, 5, is greater than the total roll, 3 UNIT 5, Lists & Dictionaries \u00b6 Lists and Dictionaries \u00b6 Lists are a datatype you can use to store a collection of different pieces of information as a sequence under a single variable name. (Datatypes you\u2019ve already learned about include strings, numbers, and booleans.) 1 2 3 4 5 6 7 8 9 zoo_animals = [ \"pangolin\" , \"cassowary\" , \"sloth\" , \"kangourou\" ]; # You can access an individual item on the list by its index. An index is like an address that identifies the item's place in the list. The index appears directly after the list name, in between brackets, like this: list_name[index]. if len ( zoo_animals ) > 3 : print \"The first animal at the zoo is the \" + zoo_animals [ 0 ] print \"The second animal at the zoo is the \" + zoo_animals [ 1 ] print \"The third animal at the zoo is the \" + zoo_animals [ 2 ] print \"The fourth animal at the zoo is the \" + zoo_animals [ 3 ] 1 2 3 4 The first animal at the zoo is the pangolin The second animal at the zoo is the cassowary The third animal at the zoo is the sloth The fourth animal at the zoo is the kangourou 1 2 3 4 5 6 numbers = [ 5 , 6 , 7 , 8 ] print \"Adding the numbers at indices 0 and 2...\" print numbers [ 0 ] + numbers [ 2 ] print \"Adding the numbers at indices 1 and 3...\" print numbers [ 1 ] + numbers [ 3 ] 1 2 3 4 Adding the numbers at indices 0 and 2... 12 Adding the numbers at indices 1 and 3... 14 A list doesn\u2019t have to have a fixed length. You can add items to the end of a list any time you like! 1 2 3 4 5 6 7 8 9 10 11 12 13 suitcase = [] suitcase . append ( \"sunglasses\" ) suitcase . append ( \"calculator\" ) suitcase . append ( \"screen\" ) suitcase . append ( \"mouse\" ) list_length = len ( suitcase ) # Set this to the length of suitcase print list_length print \"There are %d items in the suitcase.\" % ( list_length ) print suitcase 1 2 3 4 There are 4 items in the suitcase. ['sunglasses', 'calculator', 'screen', 'mouse'] 1 2 3 4 5 suitcase = [ \"sunglasses\" , \"hat\" , \"passport\" , \"laptop\" , \"suit\" , \"shoes\" ] first = suitcase [ 0 : 2 ] # The first and second items (index zero and one) middle = suitcase [ 2 : 4 ] # Third and fourth items (index two and three) last = suitcase [ 4 : 6 ] # The last two items (index four and five) You can slice a string exactly like a list! In fact, you can think of strings as lists of characters: each character is a sequential item in the list, starting from index 0. 1 2 3 4 5 animals = \"catdogfrog\" cat = animals [: 3 ] # The first three characters of animals dog = animals [ 3 : 6 ] # The fourth through sixth characters frog = animals [ 6 :] # From the seventh character to the end Sometimes you need to search for an item in a list. 1 2 3 4 5 6 7 8 9 animals = [ \"aardvark\" , \"badger\" , \"duck\" , \"emu\" , \"fennec fox\" ] duck_index = animals . index ( \"duck\" ) # Use index() to find \"duck\" print duck_index animals . insert ( duck_index , \"cobra\" ) print animals # Observe what prints after the insert operation 1 2 2 ['aardvark', 'badger', 'cobra', 'duck', 'emu', 'fennec fox'] If you want to do something with every item in the list, you can use a for loop. 1 2 3 4 my_list = [ 1 , 9 , 3 , 8 , 5 , 7 ] for number in my_list : print 2 * number 1 2 3 4 5 6 2 18 6 16 10 14 If your list is a jumbled mess, you may need to sort() it. 1 2 3 4 5 6 7 8 9 start_list = [ 5 , 3 , 1 , 2 , 4 ] square_list = [] for var in start_list : square_list . append ( var ** 2 ) square_list . sort () print square_list 1 [1, 4, 9, 16, 25] A dictionary is similar to a list, but you access values by looking up a key instead of an index. A key can be any string or number. Dictionaries are great for things like phone books (pairing a name with a phone number), login pages (pairing an e-mail address with a username), and more! 1 2 3 4 5 residents = { 'Puffin' : 104 , 'Sloth' : 105 , 'Burmese Python' : 106 } print residents [ 'Puffin' ] # Prints Puffin's room number print residents [ 'Sloth' ] print residents [ 'Burmese Python' ] 1 2 3 104 105 106 An empty pair of curly braces {} is an empty dictionary, just like an empty pair of [] is an empty list. Like Lists, Dictionaries are \u2018mutable\u2019. This means they can be changed after they are created. One advantage of this is that we can add new key-value pairs to the dictionary after it is created. The length len() of a dictionary is the number of key-value pairs it has. Each pair counts only once, even if the value is a list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 menu = {} # Empty dictionary menu [ 'Chicken Alfredo' ] = 14.50 # Adding new key-value pair print menu [ 'Chicken Alfredo' ] menu [ 'General Tao' ] = 12.00 menu [ 'Pad Thai' ] = 10.50 menu [ 'Poutine' ] = 9.00 print \"There are \" + str ( len ( menu )) + \" items on the menu.\" print menu for key , value in menu . iteritems (): # !!!!! print key , value for key , value in menu . iteritems (): # !!!!! print key for key , value in menu . iteritems (): # !!!!! print value 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14.5 There are 4 items on the menu. {'Chicken Alfredo': 14.5, 'General Tao': 12.0, 'Poutine': 9.0, 'Pad Thai': 10.5} Chicken Alfredo 14.5 General Tao 12.0 Poutine 9.0 Pad Thai 10.5 Chicken Alfredo General Tao Poutine Pad Thai 14.5 12.0 9.0 10.5 Because dictionaries are mutable, they can be changed in many ways. Items can be removed from a dictionary with the del() command. 1 2 3 4 5 6 7 8 9 # key - animal_name : value - location zoo_animals = { 'Unicorn' : 'Cotton Candy House' , 'Sloth' : 'Rainforest Exhibit' , 'Bengal Tiger' : 'Jungle House' , 'Atlantic Puffin' : 'Arctic Exhibit' , 'Rockhopper Penguin' : 'Arctic Exhibit' } A dictionary (or list) declaration may break across multiple lines Removing the \u2018Unicorn\u2019 entry. (Unicorns are incredibly expensive.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 zoo_animals = { 'Unicorn' : 'Cotton Candy House' , 'Sloth' : 'Rainforest Exhibit' , 'Bengal Tiger' : 'Jungle House' , 'Atlantic Puffin' : 'Arctic Exhibit' , 'Rockhopper Penguin' : 'Arctic Exhibit' } del zoo_animals [ 'Unicorn' ] del zoo_animals [ 'Sloth' ] del zoo_animals [ 'Bengal Tiger' ] zoo_animals [ 'Rockhopper Penguin' ] = 'Cotton Candy House' print zoo_animals 1 {'Atlantic Puffin': 'Arctic Exhibit', 'Rockhopper Penguin': 'Cotton Candy House'} Sometimes you need to remove something from a list. 1 2 3 backpack = [ 'xylophone' , 'dagger' , 'tent' , 'bread loaf' ] backpack . remove ( 'dagger' ) We can create a dictionary that holds many types of values. extract, sort, remove 1 2 3 4 5 6 7 8 9 10 11 12 inventory = { 'gold' : 500 , 'pouch' : [ 'flint' , 'twine' , 'gemstone' ], # Assigned a new list to 'pouch' key 'backpack' : [ 'xylophone' , 'dagger' , 'bedroll' , 'bread loaf' ] } print inventory # Adding a key 'burlap bag' and assigning a list to it inventory [ 'burlap bag' ] = [ 'apple' , 'small ruby' , 'three-toed sloth' ] print inventory 1 2 {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'gold': 500} {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500} 1 2 3 4 # Sorting the list found under the key 'pouch' inventory [ 'pouch' ] . sort () print inventory 1 {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500} 1 2 3 inventory [ 'pocket' ] = [ 'seashell' , 'strange berry' , 'lint' ] print inventory 1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500} 1 2 3 inventory [ 'backpack' ] . sort () print inventory 1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'dagger', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500} 1 2 3 inventory [ 'backpack' ] . remove ( 'dagger' ) print inventory 1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500} 1 2 3 inventory [ 'gold' ] += 50 print inventory 1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 550} A Day at the Supermarket \u00b6 for loops allow us to iterate through all of the elements in a list from the left-most (or zeroth element) to the right-most element. 1 2 3 4 names = [ \"Adam\" , \"Alex\" , \"Mariah\" , \"Martine\" , \"Columbus\" ] for items in names : print items 1 2 3 4 5 Adam Alex Mariah Martine Columbus You can also use a for loop on a dictionary to loop through its keys. 1 2 3 4 5 6 7 8 9 webster = { \"Aardvark\" : \"A star of a popular children's cartoon show.\" , \"Baa\" : \"The sound a goat makes.\" , \"Carpet\" : \"Goes on the floor.\" , \"Dab\" : \"A small amount.\" } for item in webster : print webster [ item ] 1 2 3 4 A star of a popular children's cartoon show. Goes on the floor. A small amount. The sound a goat makes. While looping, you may want to perform different actions depending on the particular item in the list. 1 2 3 4 5 a = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 ] for item in a : if item % 2 == 0 : print item 1 2 3 4 5 6 7 0 2 4 6 8 10 12 Functions can also take lists as inputs and perform various operations on those lists. 1 2 3 4 5 6 7 8 9 10 11 12 def count_small ( numbers ): total = 0 for n in numbers : if n < 10 : total = total + 1 return total lost = [ 4 , 8 , 15 , 16 , 23 , 42 ] small = count_small ( lost ) print small 1 2 You can loop through strings the same way you loop through lists! 1 2 3 4 5 6 7 8 9 for letter in \"Codecademy\" : print letter word = \"Programming is fun!\" for letter in word : # Only print out the letter i if letter == \"i\" : print letter 1 2 3 4 5 6 7 8 9 10 11 12 C o d e c a d e m y i i You are now the proud owner of your very own Codecademy brand supermarket. For paperwork and accounting purposes, let\u2019s record the total value of your inventory. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 prices = { \"banana\" : 4 , \"apple\" : 2 , \"orange\" : 1.5 , \"pear\" : 3 } stock = { \"banana\" : 6 , \"apple\" : 0 , \"orange\" : 32 , \"pear\" : 15 } total = 0 for item in prices : print item # print key print \"price: %s \" % prices [ item ] # print value print \"stock: %s \" % stock [ item ] print prices [ item ] * stock [ item ] total += prices [ item ] * stock [ item ] print total 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 orange price: 1.5 stock: 32 48.0 pear price: 3 stock: 15 45 banana price: 4 stock: 6 24 apple price: 2 stock: 0 0 117.0 In order for customers to order online, we are going to have to make a consumer interface. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 shopping_list = [ \"banana\" , \"orange\" , \"apple\" ] stock = { \"banana\" : 6 , \"apple\" : 0 , \"orange\" : 32 , \"pear\" : 15 } prices = { \"banana\" : 4 , \"apple\" : 2 , \"orange\" : 1.5 , \"pear\" : 3 } def compute_bill ( food ): total = 0 for item in food : if stock [ item ] > 0 : total += prices [ item ] # you only pick one from the stock! stock [ item ] = stock [ item ] - 1 # the stock goes down by 1 print total return food print compute_bill ( shopping_list ) 1 2 5.5 ['banana', 'orange', 'apple'] Quiz 5 \u00b6 OK Project Rock, Paper, Scissors \u00b6 In this project, we\u2019ll build Rock-Paper-Scissors! The program should do the following: Prompt the user to select either Rock, Paper, or Scissors Instruct the computer to randomly select either Rock, Paper, or Scissors Compare the user\u2019s choice and the computer\u2019s choice Determine a winner (the user or the computer) Inform the user who the winner is 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 from random import randint from time import sleep options = [ \"R\" , \"P\" , \"S\" ] LOSE = \"You lost!\" # constant, uppercase WIN = \"You win!\" def decide_winner ( user_choice , computer_choice ): print ( \"You picked: \" + str ( user_choice )) print \"Computer selecting...\" sleep ( 1 ) print ( \"Computer picks: \" + str ( computer_choice )) user_choice_index = options . index ( user_choice ) computer_choice_index = options . index ( computer_choice ) # !!!!! if user_choice_index == computer_choice_index : print \"Tie!\" elif user_choice_index == 0 and computer_choice_index == 2 : print WIN elif user_choice_index == 1 and computer_choice_index == 0 : print WIN elif user_choice_index == 2 and computer_choice_index == 1 : print WIN elif user_choice_index > 2 : print \"Invalid choice!!!\" else : print LOSE def play_RPS (): print \"Let's pay Rock-Paper-Scissors\" user_choice = raw_input ( \"Select R for Rock, P for Paper, or S for Scissors: \" ) sleep ( 1 ) user_choice = user_choice . upper () # computer_choice = options[randint(0,2)] # pull out an element from a list, the 1st (0) out of 3 (2) computer_choice = options [ randint ( 0 , len ( options ) - 1 )] # This will ensure that if we ever add more options to the game, we won't have to change this line of code. decide_winner ( user_choice , computer_choice ) play_RPS () 1 2 3 4 5 6 Let's pay Rock-Paper-Scissors Select R for Rock, P for Paper, or S for Scissors: r You picked: R Computer selecting... Computer picks: S You win! UNIT 6, Student Becomes the Teacher \u00b6 Student Becomes the Teacher \u00b6 Make a gradebook for all of your students. First, create 3 dictionaries. Second, add names, marks\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 lloyd = { \"name\" : \"Lloyd\" , \"homework\" : [ 90.0 , 97.0 , 75.0 , 92.0 ], \"quizzes\" : [ 88.0 , 40.0 , 94.0 ], \"tests\" : [ 75.0 , 90.0 ] } alice = { \"name\" : \"Alice\" , \"homework\" : [ 100.0 , 92.0 , 98.0 , 100.0 ], \"quizzes\" : [ 82.0 , 83.0 , 91.0 ], \"tests\" : [ 89.0 , 97.0 ] } tyler = { \"name\" : \"Tyler\" , \"homework\" : [ 0.0 , 87.0 , 75.0 , 22.0 ], \"quizzes\" : [ 0.0 , 75.0 , 78.0 ], \"tests\" : [ 100.0 , 100.0 ] } Third, make a list. 1 2 3 4 5 6 7 students = [ lloyd , alice , tyler ] cases = [ \"homework\" , \"quizzes\" , \"tests\" ] w_calc = [ 0.10 , 0.30 , 0.60 ] all_average = 0.0 Four, print out. 1 2 3 4 5 6 7 8 9 10 11 12 13 print \" \\n Students' Grades\" . upper () print \"\" for student in students : print student [ \"name\" ] . upper () print \"Homework\" print student [ \"homework\" ] print \"Quizzes\" print student [ \"quizzes\" ] print \"Tests\" print student [ \"tests\" ] print \"\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 STUDENTS' GRADES LLOYD Homework [90.0, 97.0, 75.0, 92.0] Quizzes [88.0, 40.0, 94.0] Tests [75.0, 90.0] ALICE Homework [100.0, 92.0, 98.0, 100.0] Quizzes [82.0, 83.0, 91.0] Tests [89.0, 97.0] TYLER Homework [0.0, 87.0, 75.0, 22.0] Quizzes [0.0, 75.0, 78.0] Tests [100.0, 100.0] Compute averages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def average ( numbers ): total = sum ( numbers ) temp = float ( total ) / len ( numbers ) return temp print \"Students' Averages\" . upper () print \"\" for c in cases : cc = c . upper () print cc for student in students : numbers = student [ c ] calc = round ( average ( numbers ), 1 ) print student [ \"name\" ] print calc print \"\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 STUDENTS' AVERAGES HOMEWORK Lloyd 88.5 Alice 97.5 Tyler 46.0 QUIZZES Lloyd 74.0 Alice 85.3 Tyler 51.0 TESTS Lloyd 82.5 Alice 93.0 Tyler 100.0 Compute weighted averages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def w_average ( marks ): #w_calc = [0.10, 0.30, 0.60] s_calc = 0 w = 0 while w < len ( w_calc ): s_calc += w_calc [ w ] * marks [ w ] w += 1 return s_calc def get_letter_grade ( score ): if score >= 90 : return \"A\" elif score >= 80 : return \"B\" elif score >= 70 : return \"C\" elif score >= 60 : return \"D\" else : return \"F\" def get_class_average ( ind ): class_total = round ( ind / len ( students ), 1 ) return class_total print \"Students' Weighted Average\" . upper () print \" Ponderation [Homeworks, Quizzes, Tests]: [\" + str ( float ( w_calc [ 0 ]) * 100 ) + \", \" + str ( float ( w_calc [ 1 ]) * 100 ) + \", \" + str ( float ( w_calc [ 2 ]) * 100 ) + \"]\" print \"\" for student in students : print ( student [ \"name\" ] + \"'s marks are:\" ) . upper () l_calc = [] for c in cases : numbers = student [ c ] calc = round ( average ( numbers ), 1 ) l_calc . append ( calc ) print l_calc print ( \"For a weighted average of:\" ) ind_average = round ( w_average ( l_calc ), 1 ) print ind_average print ( \"Standing for a:\" ) print get_letter_grade ( ind_average ) all_average += ind_average print \"\" print ( \"Finally, The class average is:\" ) . upper () print get_class_average ( all_average ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 STUDENTS' WEIGHTED AVERAGE Ponderation [Homeworks, Quizzes, Tests]: [10.0, 30.0, 60.0] LLOYD'S MARKS ARE: [88.5, 74.0, 82.5] For a weighted average of: 80.5 Standing for a: B ALICE'S MARKS ARE: [97.5, 85.3, 93.0] For a weighted average of: 91.1 Standing for a: A TYLER'S MARKS ARE: [46.0, 51.0, 100.0] For a weighted average of: 79.9 Standing for a: C FINALLY, THE CLASS AVERAGE IS: 83.8 UNIT 7, Lists and Functions \u00b6 Lists and Functions \u00b6 What you can do with a list: extract, add, append, remove, pop out, delete. 1 2 3 4 5 6 7 8 9 10 11 12 13 n = [ 1 , 3 , 5 ] print n [ 1 ] n [ 1 ] = n [ 1 ] * 5 print n # Add elements n . append ( 4 ) print n # Remove elements n . pop ( 0 ) print n 1 2 3 4 3 [1, 15, 5] [1, 15, 5, 4] [15, 5, 4] What you can do with functions. Multiply, divide. 1 2 3 4 5 6 7 8 number = 5 def my_function ( x ): return x * 3 # Print my_function(5) print my_function ( number ) 1 15 Add, substract. 1 2 3 4 5 6 7 8 m = 5 n = 13 def add_function ( x , y ): return x + y print add_function ( m , n ) 1 18 Concatenate. 1 2 3 4 5 6 7 n = \"Hello\" def string_function ( s ): return s + \" world\" print string_function ( n ) 1 Hello world Show all. 1 2 3 4 5 6 7 n = [ 3 , 5 , 7 ] def list_function ( x ): return x print list_function ( n ) 1 [3, 5, 7] Show some. 1 2 3 4 5 6 7 def list_function ( x ): return x [ 1 ] n = [ 3 , 5 , 7 ] print list_function ( n ) 1 5 Extract and modify. 1 2 3 4 5 6 7 8 def list_function ( x ): x [ 1 ] = x [ 1 ] + 3 return x n = [ 3 , 5 , 7 ] print list_function ( n ) 1 [3, 8, 7] Add elements. 1 2 3 4 5 6 7 8 n = [ 3 , 5 , 7 ] def list_extender ( lst ): lst . append ( 9 ) return lst print list_extender ( n ) 1 [3, 5, 7, 9] Remove elements. 1 2 3 4 5 6 7 8 n = [ 3 , 5 , 7 ] def list_shorter ( lst ): lst . remove ( 5 ) return lst print list_shorter ( n ) 1 [3, 7] Pop out the 2 nd element. 1 2 3 4 5 6 7 8 n = [ 3 , 5 , 7 ] def list_extract ( lst ): lst . pop ( 1 ) return lst print list_extract ( n ) 1 [3, 7] Loop through each element. 1 2 3 4 5 6 7 8 n = [ 3 , 5 , 7 ] def print_list ( x ): for i in range ( 0 , len ( x )): print x [ i ] print print_list ( n ) 1 2 3 4 3 5 7 None Loop, transform each element. 1 2 3 4 5 6 7 8 9 n = [ 3 , 5 , 7 ] def double_list ( x ): for i in range ( 0 , len ( x )): x [ i ] = x [ i ] * 2 return x print double_list ( n ) 1 [6, 10, 14] Loop, transform each element. 1 2 3 4 5 6 7 8 9 10 11 def my_function ( x ): for i in range ( 0 , len ( x )): x [ i ] = x [ i ] * 2 return x print my_function ( range ( 3 )) print range ( 6 ) # => [0,1,2,3,4,5] print range ( 1 , 6 ) # => [1,2,3,4,5] print range ( 1 , 6 , 3 ) # => [1,4] 1 2 3 4 [0, 2, 4] [0, 1, 2, 3, 4, 5] [1, 2, 3, 4, 5] [1, 4] Loop, fill the variable with += (or -= , *= , /= ) 1 2 3 4 5 6 7 8 n = [ 3 , 5 , 7 ] def total ( numbers ): result = 0 # empty variable for item in numbers : result += item return result Empty variable, loop, fill the variable. 1 2 3 4 5 6 7 8 9 10 n = [ \"Michael\" , \"Lieberman\" ] def join_strings ( words ): result = \"\" for item in words : result = result + item return result print join_strings ( n ) 1 MichaelLieberman Join (not add up) the list. You want this to print [1, 2, 3, 4, 5, 6] . 1 2 3 4 5 6 7 m = [ 1 , 2 , 3 ] n = [ 4 , 5 , 6 ] def join_lists ( x , y ): return x + y print join_lists ( m , n ) 1 [1, 2, 3, 4, 5, 6] List of lists. Several loops. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 n = [ [ 1 , 2 , 3 ], [ 4 , 5 , 6 , 7 , 8 , 9 ] ] def flatten ( lists ): results = [] for lst in lists : for num in range ( len ( lst )): results . append ( lst [ num ]) return results print flatten ( n ) 1 [1, 2, 3, 4, 5, 6, 7, 8, 9] Use range(len(lst)) . range, length 1 print range ( 6 ) # => [0,1,2,3,4,5] 1 [0, 1, 2, 3, 4, 5] Battleship! \u00b6 This first script is incomplete (work in progress). The next script is functional. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 from random import randint board = [] for x in range ( 5 ): # 0, 1, 2, 3, 4 (stop before 5) board . append ([ \"O\" ] * 5 ) # print 5 rows of 5 'O' def print_board ( board ): for row in board : # print row # print ['O', 'O', 'O', 'O', 'O'] on 5 rows print \" \" . join ( row ) # print O O O O O print \"Let's play Battleship!\" def random_row ( board ): # hide the ship at r-c return randint ( 0 , len ( board ) - 1 ) def random_col ( board ): return randint ( 0 , len ( board ) - 1 ) print random_row ( board ) print random_col ( board ) guess_row = int ( raw_input ( \"Guess Row (1 to 5):\" )) # involve the player guess_col = int ( raw_input ( \"Guess Col (1 to 5):\" )) print ship_col # print ship position print ship_row if ( guess_row == ship_row ) and ( guess_col == ship_col ): print \"Congratulations! You sank my battleship!\" guess_row = guess_row - 1 guess_col = guess_col - 1 board [ guess_row ][ guess_col ] = \"S\" print print_board ( board ) else : #print \"You missed my battleship!\" if guess_row not in range ( 5 ) or guess_row == 0 or guess_col not in range ( 5 ) or guess_col == 0 : # condition for wrong entries print \"Oops, that's not even in the ocean.\" elif board [ guess_row ][ guess_col ] == \"X\" : print \"You guessed that one already.\" else : print \"You missed my battleship!\" guess_row = guess_row - 1 # transform the numbers, 1 becomes 0... guess_col = guess_col - 1 board [ guess_row ][ guess_col ] = \"X\" # replace the 'O' print print_board ( board ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Let's play Battleship! 4 0 Guess Row (1 to 5):1 Guess Col (1 to 5):2 --------------------------------------------------------------------------- NameError Traceback (most recent call last) &lt;ipython-input-87-efd1e0de637a&gt; in &lt;module&gt;() 24 guess_col = int(raw_input(\"Guess Col (1 to 5):\")) 25 ---&gt; 26 print ship_col # print ship position 27 print ship_row 28 NameError: name 'ship_col' is not defined Battleship FINAL! \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 from random import randint board = [] for x in range ( 5 ): board . append ([ \"O\" ] * 5 ) def print_board ( board ): for row in board : print \" \" . join ( row ) print \" \\n Let's play Battleship! You have 4 strikes to sink by ship. \\n \" print_board ( board ) def random_row ( board ): return randint ( 0 , len ( board ) - 1 ) def random_col ( board ): return randint ( 0 , len ( board ) - 1 ) ship_row = random_row ( board ) ship_col = random_col ( board ) #ship_row = 1 to test and fix to (1,1) #ship_col = 1 for turn in range ( 5 ): turn += 1 if turn == 5 : print \" \\n Game Over\" print \"The ship was here => I \\n \" board [ ship_row - 1 ][ ship_col - 1 ] = \"I\" print_board ( board ) break else : print \" \\n Turn\" , turn guess_row = int ( raw_input ( \"Guess Row (1 to 5): \" )) guess_col = int ( raw_input ( \"Guess Col (1 to 5): \" )) if ( guess_row == ship_row ) and ( guess_col == ship_col ): print \" \\n Congratulations! You sank my battleship! \\n \" guess_row = guess_row - 1 guess_col = guess_col - 1 board [ guess_row ][ guess_col ] = \"S\" print_board ( board ) print \" \\n Game Over\" break elif ( guess_row < 1 or guess_row > 5 ) or ( guess_col < 1 or guess_col > 5 ): print \" \\n Oops, that's not even in the ocean. \\n \" elif board [ guess_row - 1 ][ guess_col - 1 ] == \"X\" : print \" \\n You guessed that one already. \\n \" print_board ( board ) else : print \" \\n You missed my battleship! \\n \" board [ guess_row - 1 ][ guess_col - 1 ] = \"X\" print_board ( board ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 Let's play Battleship! You have 4 strikes to sink by ship. O O O O O O O O O O O O O O O O O O O O O O O O O Turn 1 Guess Row (1 to 5): 1 Guess Col (1 to 5): 2 You missed my battleship! O X O O O O O O O O O O O O O O O O O O O O O O O Turn 2 Guess Row (1 to 5): 2 Guess Col (1 to 5): 2 You missed my battleship! O X O O O O X O O O O O O O O O O O O O O O O O O Turn 3 Guess Row (1 to 5): 3 Guess Col (1 to 5): 5 You missed my battleship! O X O O O O X O O O O O O O X O O O O O O O O O O Turn 4 Guess Row (1 to 5): 4 Guess Col (1 to 5): 3 Congratulations! You sank my battleship! O X O O O O X O O O O O O O X O O S O O O O O O O Game Over Joining. join, split 1 2 3 4 letters = [ 'a' , 'b' , 'c' , 'd' ] print \" \" . join ( letters ) # a b c d print \"---\" . join ( letters ) # #---b---c---d 1 2 a b c d a---b---c---d Randomizing. random, rand 1 2 3 4 from random import randint coin = randint ( 0 , 1 ) # randint(low, high) dice = randint ( 1 , 6 ) Quiz 7 \u00b6 Takeaway. 1 2 3 4 5 6 7 my_list = [ 1 , 3 , 5 , 7 ] my_list . pop ( 3 ) # remove the 4th my_list . remove ( 3 ) # remove the '3' range ( 0 , len ( my_list )) # every list item range ( 0 , len ( my_list ), 2 ) # every other list item 1 [0] UNIT 8, Loops \u00b6 Loops \u00b6 A while loop is a sort of if . 1 2 3 4 count = 0 if count <= 9 : # print \"Hello, I am an if statement and count is\" , count 1 Hello, I am an if statement and count is 0 1 2 3 while count <= 9 : # similar to if: executes as long as the condition is true print \"Hello, I am a while and count is\" , count count += 1 1 2 3 4 5 6 7 8 9 10 Hello, I am a while and count is 0 Hello, I am a while and count is 1 Hello, I am a while and count is 2 Hello, I am a while and count is 3 Hello, I am a while and count is 4 Hello, I am a while and count is 5 Hello, I am a while and count is 6 Hello, I am a while and count is 7 Hello, I am a while and count is 8 Hello, I am a while and count is 9 A while loop allows control (checkpoint, a switch, on and off). 1 2 3 4 5 loop_condition = True while loop_condition : # On print \"I am a loop\" loop_condition = False # Off 1 I am a loop 1 2 3 4 5 6 num = 1 while num <= 10 : # the condition print num ** 2 num += num ** ( 1 / 2 ) print num 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 4 3 9 4 16 5 25 6 36 7 49 8 64 9 81 10 100 11 A common application of a while loop is to check user input to see if it is valid. 1 2 3 4 choice = raw_input ( 'Enjoying the course? (y/n)' ) while choice != \"y\" and choice != \"n\" : choice = raw_input ( \"Sorry, I didn't catch that. Enter again (case sensitive): \" ) 1 Enjoying the course? (y/n)y break means \u201cexit the current loop\u201d. Opposite to break is continue . 1 2 3 4 5 6 7 count = 0 while True : print count count += 1 if count >= 10 : break 1 2 3 4 5 6 7 8 9 10 0 1 2 3 4 5 6 7 8 9 while / else are like if / else ; else is executed when while is false. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import random print \"Lucky Numbers! 3 numbers will be generated.\" print \"If one of them is a '5', you lose!\" count = 0 while count < 3 : num = random . randint ( 1 , 6 ) print num if num == 5 : print \"Sorry, you lose!\" break count += 1 else : print \"You win!\" 1 2 3 4 Lucky Numbers! 3 numbers will be generated. If one of them is a '5', you lose! 5 Sorry, you lose! Guess game. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from random import randint # Generates a number from 1 through 10 inclusive random_number = randint ( 1 , 10 ) # print random_number guesses_left = 3 print \"Guess right!\" while guesses_left > 0 : print \"You have \" + str ( guesses_left ) + \" attempts.\" guess = raw_input ( \"Guess a number from 1 to 10: \" ) if int ( guess ) == random_number : print \"You win!\" break elif guesses_left == 1 : print \"You lose.\" break else : guesses_left -= 1 print \"Try again.\" 1 2 3 4 5 6 7 8 9 10 Guess right! You have 3 attempts. Guess a number from 1 to 10: 2 Try again. You have 2 attempts. Guess a number from 1 to 10: 6 Try again. You have 1 attempts. Guess a number from 1 to 10: 9 You lose. if loop. 1 2 3 4 print \"Counting...\" for i in range ( 20 ): print i 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Counting... 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Create a list. 1 2 3 4 5 6 7 8 9 hobbies = [] print hobbies for i in range ( 3 ): hobby = raw_input ( \"Enter a hobby: \" ) hobbies . append ( hobby ) print hobbies 1 2 3 4 5 [] Enter a hobby: fishing Enter a hobby: skiing Enter a hobby: knitting!!! ['fishing', 'skiing', 'knitting!!!'] Run though a string, but each character will be spaced out. 1 2 3 4 5 6 7 8 9 thing = \"spam!\" for c in thing : print c word = \"eggs!\" for char in word : print char , # , print on the same line 1 2 3 4 5 6 s p a m ! e g g s ! Replace a character in a string. , print on the same line. 1 2 3 4 5 6 7 phrase = \"A bird in the hand...\" for char in phrase : if char == \"A\" or char == \"a\" : print \"X\" , else : print char , 1 X b i r d i n t h e h X n d . . . Run though a list. 1 2 3 4 5 6 7 8 9 numbers = [ 7 , 9 , 12 , 54 , 99 ] print \"This list contains: \" for num in numbers : print num for numm in numbers : print numm ** 2 , 1 2 3 4 5 6 7 This list contains: 7 9 12 54 99 49 81 144 2916 9801 Run though a dictionary. 1 2 3 4 5 6 7 d = { 'a' : 'apple' , 'b' : 'berry' , 'c' : 'cherry' } for key in d : # key:value print key + \" \" + d [ key ] print key # key print d [ key ] # value 1 2 3 4 5 6 7 8 9 a apple a apple c cherry c cherry b berry b berry Enumerate a list (numbers and members). 1 2 3 4 5 choices = [ 'pizza' , 'pasta' , 'salad' , 'nachos' ] print 'Your choices are:' for index , item in enumerate ( choices ): print index + 1 , item 1 2 3 4 5 Your choices are: 1 pizza 2 pasta 3 salad 4 nachos Multiple lists. 1 2 3 4 5 6 7 8 9 10 list_a = [ 3 , 9 , 17 , 15 , 19 ] list_b = [ 2 , 4 , 8 , 10 , 30 , 40 , 50 , 60 , 70 , 80 , 90 ] for a , b in zip ( list_a , list_b ): if a > b : print a elif a == b : print \"-\" else : print b 1 2 3 4 5 3 9 17 15 30 List with concatenation. 1 2 3 4 5 6 7 8 9 10 11 fruits = [ 'banana' , 'apple' , 'orange' , 'tomata' , 'pear' , 'grape' ] print 'You have...' for f in fruits : if f == 'tomato' : print 'A tomato is not a fruit!' # (It actually is.) break print ', a' , f , else : print '; A fine selection of fruits!' 1 2 You have... , a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits! Remove the break . 1 2 3 4 5 6 7 8 9 10 11 fruits = [ 'banana' , 'apple' , 'orange' , 'tomata' , 'pear' , 'grape' ] print 'You have...' for f in fruits : if f == 'tomato' : print 'A tomato is not a fruit!' # (It actually is.) else : print ', a' , f , else : print '; A fine selection of fruits!' 1 2 You have... , a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits! Practice Makes Perfect \u00b6 Is it even? 1 2 3 4 5 6 7 8 9 def is_even ( x ): if x % 2 == 0 : return True # if x is even else : return False print is_even ( 2 ) print is_even ( 3 ) 1 2 True False Or not? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 n = - 1.0 print ( n - round ( n , 0 )) def is_int ( x ): if ( x - round ( x , 0 )) == 0 : return True else : return False print is_int ( 7.0 ) print is_int ( 7.5 ) print is_int ( - 1 ) 1 2 3 4 0.0 True False True Summing the digits of a number. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def digit_sum ( n ): liss = [] n = str ( n ) # from integers to characters for char in n : liss . append ( char ) # populate liss total = 0 for i in range ( len ( liss )): liss [ i ] = int ( liss [ i ]) # back to integers total += liss [ i ] # sum them up return total print digit_sum ( 1234 ) print digit_sum ( 8888 ) 1 2 10 32 What is the factorial? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def factorial ( x ): if x == 1 or x == 0 : return 1 else : result = 1 while x > 0 : # say x = 4 # 1 * 4 = 4 # 4 * 3 = 12 # 12 * 2 = 24 # 24 * 1 = 24 result *= x x -= 1 return result print factorial ( 1 ) print factorial ( 2 ) print factorial ( 3 ) print factorial ( 4 ) print factorial ( 5 ) 1 2 3 4 5 1 2 6 24 120 Is it a prime number? (Check the web for the list of prime numbers.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def is_prime ( x ): if ( x > 1 ): # to catch greater than 1 for n in range ( 2 ,( x - 1 )): # range 2 - 1 less than x if x % n == 0 : print x return False else : # ro catch 0 and 1 print x return False print x # the input return True # the output, will be printed when the function will be called for ii in range ( 24 ): print is_prime ( ii ), 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 0 False 1 False 2 True 3 True 4 False 5 True 6 False 7 True 8 False 9 False 10 False 11 True 12 False 13 True 14 False 15 False 16 False 17 True 18 False 19 True 20 False 21 False 22 False 23 True Reverse a string. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def reverse ( text ): count = len ( text ) - 1 # start at the end print text print count # 3 letters will be 0,1,2,3 or 3 reversed_text = \"\" # empty string print reversed_text while count >= 0 : reversed_text += text [ count ] # adding the right-most letter count -= 1 # decrement count return reversed_text print reverse ( \"make\" ) print reverse ( \"codeacademy\" ) 1 2 3 4 5 6 7 8 make 3 ekam codeacademy 10 ymedacaedoc Remove vowels in apunctuation word (could work for punctuation too). 1 2 3 4 5 6 7 8 9 10 def anti_vowel ( text ): vowels = \"aAeEiIoOuU\" for char in text : for vow in vowels : if vow == char : text = text . replace ( char , \"\" ) return text print anti_vowel ( \"allo\" ) 1 ll Remove all but punctuation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def anti_vowel ( text ): text = text . lower () vowels = \"abcdefghijklmnopqrstuvwxyz1234567890$-\" for char in text : for vow in vowels : if vow == char : text = text . replace ( char , \"\" ) for char in text : if char == \" \" : text = text . replace ( char , \"\" ) return text print anti_vowel ( \"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\\" ID \\\" associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\" ) 1 .?,,.,.......\"\"... Scrabble scoring. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 score = { \"a\" : 1 , \"c\" : 3 , \"b\" : 3 , \"e\" : 1 , \"d\" : 2 , \"g\" : 2 , \"f\" : 4 , \"i\" : 1 , \"h\" : 4 , \"k\" : 5 , \"j\" : 8 , \"m\" : 3 , \"l\" : 1 , \"o\" : 1 , \"n\" : 1 , \"q\" : 10 , \"p\" : 3 , \"s\" : 1 , \"r\" : 1 , \"u\" : 1 , \"t\" : 1 , \"w\" : 4 , \"v\" : 4 , \"y\" : 4 , \"x\" : 8 , \"z\" : 10 } def scrabble_score ( word ): word2 = word . lower () print word2 + \":\" , points = 0 for letter in word2 : if letter == str ( letter ): points += score [ letter ] return points print scrabble_score ( \"ab\" ) print scrabble_score ( \"allo\" ) print scrabble_score ( \"xylophone\" ) print scrabble_score ( \"coding\" ) print scrabble_score ( \"yak\" ) 1 2 3 4 5 ab : 4 allo : 4 xylophone : 24 coding : 10 yak : 10 Censor a word in a string. length 1 2 3 4 5 6 7 8 9 def censor ( text , word_to_censor ): text = text . split ( ' ' ) for word in range ( 0 , len ( text )): if text [ word ] == word_to_censor : text [ word ] = \"*\" * len ( text [ word ]) * 2 return \" \" . join ( text ) # join the w separated by spaces print censor ( \"it is two days\" , \"two\" ) 1 it is ****** days Count items is a list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def count ( sequence , item ): sequence = list ( sequence ) count = 0 for i in sequence : if i == item : count += 1 return count list2 = [ 1 , 3 , 1 , 5 ] list3 = [ \"a\" , \"b\" , \"c\" , \"a\" ] list4 = ( \"a\" , \"b\" , \"c\" , \"a\" ) list5 = ( 1 , 2 , 3 , 1 , 1 ) print count ( list2 , 1 ) print count ( list3 , 1 ) print count ( list4 , 1 ) print count ( list5 , 1 ) 1 2 3 4 2 0 0 3 Extract even numbers from a list. 1 2 3 4 5 6 7 8 9 10 11 12 13 def purify ( listing ): listing = list ( listing ) listing2 = [] for l in listing : if l % 2 == 0 : listing2 . append ( l ) return listing2 case1 = [ 1 , 2 , 3 , 4 ] print purify ( case1 ) 1 [2, 4] Compute a product. 1 2 3 4 5 6 7 8 9 10 11 12 13 def product ( listing ): print listing result = 1 for l in listing : result = result * l return result case1 = [ 1 , 2 , 3 ] case2 = ( 5 , 10 , 15 ) print product ( case1 ) print product ( case2 ) 1 2 3 4 [1, 2, 3] 6 (5, 10, 15) 750 Remove duplicates from a list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def remove_duplicates ( listing ): print listing listing = list ( listing ) listing2 = [] for l in listing : if l not in listing2 : listing2 . append ( l ) return listing2 case1 = [ 1 , 2 , 3 , 3 , 4 ] case2 = ( 1 , 6 , 1 , 4 , 2 , 8 , 2 , 1 , 6 , 7 , 4 , 6 ) print remove_duplicates ( case1 ) print remove_duplicates ( case2 ) 1 2 3 4 [1, 2, 3, 3, 4] [1, 2, 3, 4] (1, 6, 1, 4, 2, 8, 2, 1, 6, 7, 4, 6) [1, 6, 4, 2, 8, 7] Extract the median from an unordered list of numbers. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def median ( listing ): median_no = 0 median_low = 0 median_high = 0 low = 0 high = 0 print listing listing = sorted ( listing ) if len ( listing ) % 2 == 0 : low = len ( listing ) / 2 - 1 # 6/2 = 3 -1 = 2 or the 3rd high = len ( listing ) / 2 # 6/2 = 3 or the 4th median_low = float ( listing [ low ]) # extract the 3rd of 6 median_high = float ( listing [ high ]) # the 4th of 6 median_no = ( median_low + median_high ) / 2 else : median_no = listing [( len ( listing )) / 2 ] # on 5, the / will yield 2.5, but coerced to the integer 2 or the 3rd return median_no case1 = ( 7 , 12 , 3 , 1 , 6 ) case2 = ( 7 , 12 , 3 , 1 , 6 , 17 ) print median ( case1 ) print median ( case2 ) 1 2 3 4 (7, 12, 3, 1, 6) 6 (7, 12, 3, 1, 6, 17) 6.5 Quiz 8 \u00b6 Takeaway: built-in functions. 1 2 3 4 5 6 7 8 9 10 x = [ 1 , 2 , 3 ] y = [ 4 , 5 , 6 ] zipped = zip ( x , y ) # zipped = [(1, 4), (2, 5), (3, 6)] x2 , y2 = zip ( * zipped ) x == list ( x2 ) and y == list ( y2 ) # True 1 True 1 2 3 4 5 6 7 seasons = [ 'Spring' , 'Summer' , 'Fall' , 'Winter' ] list ( enumerate ( seasons )) # [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')] list ( enumerate ( seasons , start = 1 )) # [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')] 1 [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')] Project Command Line Calendar \u00b6 In this project, we\u2019ll build a basic calendar that the user will be able to interact with from the command line. The user should be able to choose to: View the calendar Add an event to the calendar Update an existing event Delete an existing event 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 from time import sleep , strftime his_name = raw_input ( \"What is your first name? \" ) his_name = str ( his_name ) # calendar will store the dates as keys and the events as values calendar = {} def welcome (): print ( \"Welcome \" + his_name + \".\" ) print ( \"Calendar starting...\" ) sleep ( 0.5 ) print ( \"Today is: \" + strftime ( \"%A, %B %d , %Y\" )) print ( \"It is currently: \" + strftime ( \"%H:%M:%S\" )) sleep ( 0.5 ) def start_calendar (): welcome () print ( \"What would you like to do?\" ) print ( calendar ) start = True while start : user_choice = raw_input ( \"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \" ) . upper () if user_choice == 'V' : # V if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty\" ) else : print ( calendar ) elif user_choice == 'U' : # U if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty\" ) else : print ( calendar ) date = raw_input ( \"What date? \" ) update = raw_input ( \"Enter the update: \" ) # could be more control here... calendar [ date ] = update # without checking if the date is valid or if it already exists (which could override things)! print ( \"Successful!\" ) print ( calendar ) elif user_choice == 'A' : # A event = raw_input ( \"Enter event: \" ) date = raw_input ( \"Enter date (MM/DD/YYYY): \" ) if ( len ( date ) > 10 or int ( date [ 6 :]) < int ( strftime ( \"%Y\" ))): # could be more control... print ( \"Invalid date format.\" ) try_again = raw_input ( \"Try Again? 'Y' for Yes, 'N' for No: \" ) . upper () if try_again == 'Y' : continue #! break, continue, start is still True else : start == False else : calendar [ date ] = event # without checking if the date is valid or if it already exists (which could override things)! print ( \"Successful!\" ) print ( calendar ) elif user_choice == 'D' : # D if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty.\" ) else : print ( calendar ) event = raw_input ( \"What event? \" ) # could be more option like: What date? for date in calendar . keys (): if event == calendar [ date ]: del calendar [ date ] # del a[], [1], [\"a\"], [1:3], [5:], [:9], etc. print ( \"Deleted.\" ) print ( calendar ) else : print ( \"Incorrect.\" ) elif user_choice == 'X' : # X start = False else : print ( \"Invalid command.\" ) break start_calendar () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 What is your first name? Al Welcome Al. Calendar starting... Today is: Thursday, October 20, 2016 It is currently: 13:42:02 What would you like to do? {} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? a Enter event: Buy stuff Enter date (MM/DD/YYYY): 10/21/2016 Successful! {'10/21/2016': 'Buy stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A Enter event: Sell stuff Enter date (MM/DD/YYYY): 11/01/2016 Successful! {'10/21/2016': 'Buy stuff', '11/01/2016': 'Sell stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A Enter event: Rent stuff Enter date (MM/DD/YYYY): 01/01/2018 Successful! {'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v {'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? u {'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'} What date? 01/01/2018 Enter the update: Lease stuff Successful! {'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v {'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d {'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'} What event? Buy stuff Deleted. {'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'} Incorrect. Incorrect. Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d {'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'} What event? 10/21/2016 Incorrect. Incorrect. Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? x UNIT 9, Exam Statistics \u00b6 Exam Statistics \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 grades = [ 100 , 100 , 90 , 40 , 80 , 100 , 85 , 70 , 90 , 65 , 90 , 85 , 50.5 ] print \"Grades:\" , grades def print_grades ( grades ): # list the grades for i in grades : print i , # , keep the list on the same line print_grades ( grades ) print \"Let's compute some stats!\" def grades_sum ( scores ): # sum up the grades total = 0 for s in scores : total += s return total print grades_sum ( grades ) def grades_average ( grades ): # average the grades sum_of_grades = grades_sum ( grades ) average = sum_of_grades / float ( len ( grades )) return average print grades_average ( grades ) print \"Time to conquer the variance!\" def grades_variance ( scores ): # compute the variance average = grades_average ( scores ) totalvariance = 0 for score in scores : totalvariance += ( score - average ) ** 2 tvariance = totalvariance / float ( len ( scores )) return tvariance variance = grades_variance ( grades ) print variance def grades_std_deviation ( variance ): # compute standard deviation stddevisation = variance ** 0.5 return stddevisation print grades_std_deviation ( variance ) 1 2 3 4 5 6 7 Grades: [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5] 100 100 90 40 80 100 85 70 90 65 90 85 50.5 Let's compute some stats! 1045.5 80.4230769231 Time to conquer the variance! 334.071005917 18.2776094147 UNIT 10, Advanced Topics in Python \u00b6 Advanced Topics in Python \u00b6 Iterate through a dictionary. 1 2 3 4 5 6 7 8 9 10 11 12 my_dict = { \"CodeCademy\" : \"Python\" , \"DataCamp\" : \"R\" , \"Code School\" : \"SQL\" } print my_dict . items () print my_dict . keys () print my_dict . values () for key in my_dict : print key , my_dict [ key ] # key and value 1 2 3 4 5 6 [('CodeCademy', 'Python'), ('Code School', 'SQL'), ('DataCamp', 'R')] ['CodeCademy', 'Code School', 'DataCamp'] ['Python', 'SQL', 'R'] CodeCademy Python Code School SQL DataCamp R Build a list. 1 2 3 evens_to_50 = [ i for i in range ( 51 ) if i % 2 == 0 ] print evens_to_50 1 [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50] Build lists with conditions. 1 2 3 doubles_by_3 = [ x * 2 for x in range ( 1 , 6 ) if ( x * 2 ) % 3 == 0 ] print doubles_by_3 1 [6] 1 2 3 even_squares = [ x ** 2 for x in range ( 2 , 11 ) if ( x ** 2 ) % 2 == 0 ] print even_squares 1 [4, 16, 36, 64, 100] 1 2 3 cubes_by_four = [ x ** 3 for x in range ( 1 , 11 ) if x ** 3 % 4 == 0 ] print cubes_by_four 1 [8, 64, 216, 512, 1000] Lists slicing. extract, list 1 2 3 l = [ i ** 2 for i in range ( 1 , 11 )] # Should be [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] print l [ 2 : 9 : 2 ] # [start:end:stride] 1 [9, 25, 49, 81] 1 2 3 my_list = range ( 1 , 11 ) # list of numbers 1 - 10 print my_list [:: 2 ] 1 [1, 3, 5, 7, 9] 1 2 3 4 5 my_list = range ( 1 , 11 ) backwards = my_list [:: - 1 ] print backwards 1 [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] 1 2 3 4 5 to_one_hundred = range ( 101 ) backwards_by_tens = to_one_hundred [:: - 10 ] print backwards_by_tens 1 [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0] 1 2 3 4 5 6 7 8 9 10 11 to_21 = range ( 1 , 22 ) print to_21 odds = range ( 1 , 22 , 2 ) print odds middle_third = to_21 [ 7 : 14 : 1 ] print middle_third 1 2 3 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21] [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21] [8, 9, 10, 11, 12, 13, 14] Lambda function. 1 2 3 my_list = range ( 16 ) print filter ( lambda x : x % 3 == 0 , my_list ) 1 [0, 3, 6, 9, 12, 15] 1 2 3 languages = [ \"HTML\" , \"JavaScript\" , \"Python\" , \"Ruby\" ] print filter ( lambda x : x == \"Python\" , languages ) 1 ['Python'] 1 2 3 squares = [ x ** 2 for x in range ( 1 , 11 )] print filter ( lambda x : ( x >= 30 and x <= 70 ), squares ) 1 [36, 49, 64] Iterating over dictionaries. 1 2 3 4 5 6 7 movies = { \"Monty Python and the Holy Grail\" : \"Great\" , \"Monty Python's Life of Brian\" : \"Good\" , \"Monty Python's Meaning of Life\" : \"Okay\" } print movies . items () 1 [(\"Monty Python's Life of Brian\", 'Good'), (\"Monty Python's Meaning of Life\", 'Okay'), ('Monty Python and the Holy Grail', 'Great')] Comprehensions. 1 2 3 threes_and_fives = [ x for x in range ( 1 , 16 ) if ( x % 3 == 0 or x % 5 == 0 )] print threes_and_fives 1 [3, 5, 6, 9, 10, 12, 15] Slicing again. extract 1 2 3 4 5 garbled = \"!XeXgXaXsXsXeXmX XtXeXrXcXeXsX XeXhXtX XmXaX XI\" message = garbled [:: - 2 ] print message 1 I am the secret message! 1 2 3 4 5 garbled = \"IXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX\" message = filter ( lambda x : x != \"X\" , garbled ) print message 1 I am another secret message! Introduction to Bitwise Operators \u00b6 Operators. 1 2 3 4 5 6 print 5 >> 4 # Right Shift print 5 << 1 # Left Shift print 8 & 5 # Bitwise AND print 9 | 4 # Bitwise OR print 12 ^ 42 # Bitwise XOR print </ sub > 88 # Bitwise NOT 1 2 3 4 5 6 0 10 0 13 38 -89 Base 2 or binary. 1 2 3 4 5 6 7 8 9 10 print 0b1 , # 1 print 0b10 , # 2 print 0b11 , # 3 print 0b100 , # 4 print 0b101 , # 5 print 0b110 , # 6 print 0b111 # 7 print \"******\" print 0b1 + 0b11 # 1 + 3 = 4 print 0b11 * 0b11 # 3 * 3 = 90 1 2 3 4 1 2 3 4 5 6 7 ****** 4 9 1 2 3 4 5 6 7 8 9 10 11 12 one = 0b1 two = 0b10 three = 0b11 four = 0b100 five = 0b101 six = 0b110 seven = 0b111 eight = 0b1000 nine = 0b1001 ten = 0b1010 eleven = 0b1011 twelve = 0b1100 Decimal to binary. 1 2 3 4 5 print bin ( 1 ) print bin ( 2 ) print bin ( 3 ) print bin ( 4 ) print bin ( 5 ) 1 2 3 4 5 0b1 0b10 0b11 0b100 0b101 Binary to decimal. 1 2 3 4 5 print int ( \"1\" , 2 ) print int ( \"10\" , 2 ) print int ( \"111\" , 2 ) print int ( \"0b100\" , 2 ) print int ( bin ( 5 ), 2 ) 1 2 3 4 5 1 2 7 4 5 Print out the decimal equivalent of the binary 11001001. 1 print int ( \"11001001\" , 2 ) 1 201 Left Bit Shift ( << ) 1 2 0b000001 << 2 == 0b000100 (1 << 2 = 4) 0b000101 << 3 == 0b101000 (5 << 3 = 40) Right Bit Shift ( >> ) 1 2 0b0010100 >> 3 == 0b000010 (20 >> 3 = 2) 0b0000010 >> 2 == 0b000000 (2 >> 2 = 0) This operation is mathematically equivalent to floor dividing and multiplying by 2 (respectively) for every time you shift, but it\u2019s often easier just to think of it as shifting all the 1s and 0s left or right by the specified number of slots. 1 2 3 4 5 6 7 shift_right = 0b1100 shift_left = 0b1 shift_right = 0b1100 >> 2 shift_left = 0b1 << 2 print bin ( shift_right ) print bin ( shift_left ) 1 2 0b11 0b100 The bitwise AND ( & ) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if the corresponding bits of both numbers are 1. For example: 1 2 3 4 a: 00101010 42 b: 00001111 15 =================== a & b: 00001010 10 As you can see, the 2\u2019s bit and the 8\u2019s bit are the only bits that are on in both a and b , so a & b only contains those bits. Note that using the & operator can only result in a number that is less than or equal to the smaller of the two values. 0 & 0 = 0 0 & 1 = 0 1 & 0 = 0 1 & 1 = 1 For example: 0b111 (7) & 0b1010 (10) = 0b10 . 1 2 3 print bin ( 0b1110 & 0b101 ) print bin ( 0b100 ) 1 2 0b100 0b100 The bitwise OR ( | ) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of either number are 1. For example: 1 2 3 4 a: 00101010 42 b: 00001111 15 ================ a | b: 00101111 47 Note that the bitwise | operator can only create results that are greater than or equal to the larger of the two integer inputs. 0 | 0 = 0 0 | 1 = 1 1 | 0 = 1 1 | 1 = 1 For example: 110 (6) | 1010 (10) = 1110 (14) . 1 print bin ( 0b1110 | 0b101 ) 1 0b1111 The XOR ( ^ ) or exclusive or operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of the two numbers are 1, but not both. 1 2 3 4 a: 00101010 42 b: 00001111 15 ================ a ^ b: 00100101 37 Keep in mind that if a bit is off in both numbers, it stays off in the result. Note that XOR -ing a number with itself will always result in 0. 0 ^ 0 = 0 0 ^ 1 = 1 1 ^ 0 = 1 1 ^ 1 = 0 For example: 111 (7) ^ 1010 (10) = 1101 (13) . 1 print bin ( 0b1110 ^ 0b101 ) 1 0b1011 The bitwise NOT operator ( </sub> ) just flips all of the bits in a single number. What this actually means to the computer is actually very complicated, so we\u2019re not going to get into it. Just know that mathematically, this is equivalent to adding one to the number and then making it negative. 1 2 3 4 5 print </ sub > 1 print </ sub > 2 print </ sub > 3 print </ sub > 42 print </ sub > 123 1 2 3 4 5 -2 -3 -4 -43 -124 A bit mask is just a variable that aids you with bitwise operations. A bit mask can help you turn specific bits on, turn others off, or just collect data from an integer about which bits are on or off. 1 2 3 4 5 6 7 8 9 10 def check_bit4 ( input ): mask = 0b1000 desired = input & mask if desired > 0 : return \"on\" else : return \"off\" print check_bit4 ( 0b1100 ) 1 on 1 2 3 4 0b1000 0b1100 ====== 0b1000 You can also use masks to turn a bit in a number on using | . Use a bitmask and the value a in order to achieve a result where the third bit from the right of a is turned on. Be sure to print your answer as a bin() string! 1 2 3 4 a = 0b10111011 mask = 0b100 desired = a | mask print bin ( desired ) 1 0b10111111 1 2 3 4 0b10111011 0b00000100 ========== 0b10111111 Using the XOR ( ^ ) operator is very useful for flipping bits. Using ^ on a bit with the number one will return a result where that bit is flipped. In the editor is the 8 bit variable a. Use a bitmask and the value a in order to achieve a result where all of the bits in a are flipped. Be sure to print your answer as a bin() string! 1 2 3 4 a = 0b11101110 mask = 0b11111111 desired = a ^ mask print bin ( desired ) 1 0b10001 1 2 3 4 0b11101110 0b11111111 ========== 0b00010001 Finally, you can also use the left shift ( << ) and right shift ( >> ) operators to slide masks into place. 1 2 3 4 5 6 7 def flip_bit ( number , n ): mask = ( 0b1 << ( n - 1 )) result = number ^ mask return bin ( result ) print flip_bit ( 0b111 , 2 ) 1 0b101 Project RGB-HEX Converter \u00b6 In this project, we\u2019ll use Bitwise operators to build a calculator that can convert RGB values to Hexadecimal ( hex ) values, and vice-versa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def rgb_hex (): invalid_msg = \"Invalid entry\" red = int ( raw_input ( \"Enter a 'red' (R) value, from 0 to 255: \" )) if red < 0 or red > 255 : print invalid_msg return # return will exit the function, w/o return, the function jumps to the next line... green = int ( raw_input ( \"Enter a 'green' (G) value, from 0 to 255: \" )) if green < 0 or green > 255 : print invalid_msg return blue = int ( raw_input ( \"Enter a 'blue' (B) value, from 0 to 255: \" )) if blue < 0 or blue > 255 : print invalid_msg return val = red << 16 + green << 8 + blue # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character. # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift). # Become familiar with bits by reading more here. print \" %s \" % ( hex ( val )[ 2 :] . upper ()) # string formatting def hex_rgb (): invalid_msg = \"Invalid entry\" hex_val = raw_input ( \"Enter a color (six hexadecimal digits): \" ) if len ( hex_val ) != 6 : print \"Invalid Entry\" else : hex_val = int ( hex_val , 16 ) two_hex_digits = 2 ** 8 blue = hex_val % two_hex_digits hex_val = hex_val >> 8 green = hex_val % two_hex_digits hex_val = hex_val >> 8 red = hex_val % two_hex_digits print \"Red: %s Green: %s Blue: %s \" % ( red , green , blue ) def convert (): while True : option = str ( raw_input ( \"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \" )) if option == '1' : print \"RGB to Hex...\" rgb_hex () elif option == '2' : print \"Hex to RGB...\" hex_rgb () elif option == 'X' or option == 'x' : break else : print \"Error\" convert () 1 2 3 4 5 6 7 Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. 1 RGB to Hex... Enter a 'red' (R) value, from 0 to 255: 10 Enter a 'green' (G) value, from 0 to 255: 10 Enter a 'blue' (B) value, from 0 to 255: 20 280000000000000L Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. x UNIT 11, Introduction to Classes \u00b6 Introduction to Classes \u00b6 You can think of an object as a single data structure that contains data as well as functions; functions of objects are called methods. Class Fruit , lemon instance . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Fruit ( object ): def __init__ ( self , name , color , flavor , poisonous ): self . name = name self . color = color self . flavor = flavor self . poisonous = poisonous def description ( self ): print \"I'm a %s %s and I taste %s .\" % ( self . color , self . name , self . flavor ) def is_edible ( self ): if not self . poisonous : print \"Yep! I'm edible.\" else : print \"Don't eat me! I am super poisonous.\" lemon = Fruit ( \"lemon\" , \"yellow\" , \"sour\" , False ) lemon . description () lemon . is_edible () 1 2 I'm a yellow lemon and I taste sour. Yep! I'm edible. The class keyword, the name of the class, and the class from which the new class inherits in parentheses. By convention, user-defined Python class names start with a capital letter. 1 2 3 4 class Animal ( object ): pass __init__(): this function is required for classes, and it\u2019s used to initialize the objects it creates. __init__() always takes at least one argument, self, that refers to the object being created. You can think of __init__() as the function that \u201cboots up\u201d each object the class creates. Python will use the first parameter that __init__() receives to refer to the object being created; this is why it\u2019s often called self, since this parameter gives the object being created its identity. 1 2 3 4 5 6 class Animal ( object ): def __init__ ( self , name ): self . name = name Start creating objects. We can access attributes of our objects using dot notation. 1 2 3 4 5 6 7 8 9 10 11 class Animal ( object ): def __init__ ( self , name ): self . name = name zebra = Animal ( \"Jeffrey\" ) # instance of Animal print zebra . name # instance with attributes 1 Jeffrey More\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Class Animal ( object ): def __init__ ( self , name , age , is_hungry ): self . name = name self . age = age self . is_hungry = is_hungry zebra = Animal ( \"Jeffrey\" , 2 , True ) giraffe = Animal ( \"Bruce\" , 1 , False ) panda = Animal ( \"Chad\" , 7 , True ) print zebra . name , zebra . age , zebra . is_hungry print giraffe . name , giraffe . age , giraffe . is_hungry print panda . name , panda . age , panda . is_hungry 1 2 3 4 File \"&lt;ipython-input-55-08cd00c1ed56&gt;\", line 1 Class Animal(object): ^ SyntaxError: invalid syntax Another important aspect of Python classes is scope. The scope of a variable is the context in which it\u2019s visible to the program. It may surprise you to learn that not all variables are accessible to all parts of a Python program at all times. When dealing with classes, you can have variables that are available everywhere (global variables), variables that are only available to members of a certain class (member variables), and variables that are only available to particular instances of a class (instance variables). Global variable, (class) member variable, class variable, instance variable The same goes for functions: some are available everywhere, some are only available to members of a certain class, and still others are only available to particular instance objects. Global function, class function, instance function They all have access to the member variable is_alive, since they\u2019re all members of the Animal class. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Animal ( object ): \"\"\"Makes cute animals.\"\"\" is_alive = True def __init__ ( self , name , age ): self . name = name self . age = age zebra = Animal ( \"Jeffrey\" , 2 ) giraffe = Animal ( \"Bruce\" , 1 ) panda = Animal ( \"Chad\" , 7 ) print zebra . name , zebra . age , zebra . is_alive print giraffe . name , giraffe . age , giraffe . is_alive print panda . name , panda . age , panda . is_alive 1 2 3 Jeffrey 2 True Bruce 1 True Chad 7 True When a class has its own functions, those functions are called methods. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Animal ( object ): \"\"\"Makes cute animals.\"\"\" is_alive = True def __init__ ( self , name , age ): self . name = name self . age = age def description ( self ): print self . name print self . age hippo = Animal ( \"Yan\" , 10 ) hippo . description () # will call the class function and print 1 2 Yan 10 A class can have any number of member variables. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Animal ( object ): \"\"\"Makes cute animals.\"\"\" is_alive = True health = \"good\" def __init__ ( self , name , age ): self . name = name self . age = age def description ( self ): print self . name print self . age hippo = Animal ( \"Yan\" , 10 ) sloth = Animal ( \"George\" , 1 ) ocelot = Animal ( \"Holly\" , 2 ) print hippo . health # will call the class variable print sloth . health print ocelot . health 1 2 3 good good good Kind of classes and objects you might find in commercial software: here we have a basic ShoppingCart class for creating shopping cart objects for website customers; though basic, it\u2019s similar to what you\u2019d see in a real program. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class ShoppingCart ( object ): items_in_cart = {} # try it with an empty or not dictionary items_in_cart = { \"cereal\" : 1 } def __init__ ( self , customer_name ): self . customer_name = customer_name def add_item ( self , product , price ): \"\"\"Add product to the cart.\"\"\" if not product in self . items_in_cart : # check the dictionary self . items_in_cart [ product ] = price print product + \" added.\" else : print product + \" is already in the cart.\" def remove_item ( self , product ): \"\"\"Remove product from the cart.\"\"\" if product in self . items_in_cart : # check the dictionary del self . items_in_cart [ product ] print product + \" removed.\" else : print product + \" is not in the cart.\" my_cart = ShoppingCart ( \"Jean\" ) # instance my_cart . add_item ( \"cereal\" , 1 ) # class function 1 cereal is already in the cart. Inheritance is a tricky concept, so let\u2019s go through it step by step. Inheritance is the process by which one class takes on the attributes and methods of another, and it\u2019s used to express an is-a relationship. For example, a Panda is a bear, so a Panda class could inherit from a Bear class. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Customer ( object ): \"\"\"Produces objects that represent customers.\"\"\" def __init__ ( self , customer_id ): self . customer_id = customer_id def display_cart ( self ): print \"I'm a string that stands in for the contents of your shopping cart!\" class ReturningCustomer ( Customer ): \"\"\"For customers of the repeat variety.\"\"\" def display_order_history ( self ): print \"I'm a string that stands in for your order history!\" monty_python = ReturningCustomer ( \"ID: 12345\" ) # class instance monty_python . display_cart () # inherited from the 1st class monty_python . display_order_history () # from the current class 1 2 I'm a string that stands in for the contents of your shopping cart! I'm a string that stands in for your order history! COMPLETE EXAMPLE. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Shape ( object ): \"\"\"make shapes\"\"\" number_of_sides = 5 def __init__ ( self , number_of_sides ): self . number_of_sides = number_of_sides my_shape = Shape ( 4 ) # instance class Triangle ( Shape ): number_of_3sides = 3 # number_of_sides = 3 # would override the above def __init__ ( self , angle1 , angle2 , angle3 ): self . angle1 = angle1 self . angle2 = angle2 self . angle3 = angle3 def check_angles ( self ): if self . angle1 + self . angle2 + self . angle3 == 180 : return True else : return False my_triangle = Triangle ( 90 , 30 , 60 ) # instance print my_triangle . number_of_sides # inherit print my_shape . number_of_sides print my_triangle . number_of_3sides print my_triangle . check_angles () class Equilateral ( Triangle ): angle = 60 def __init__ ( self ): self . angle1 = self . angle # override the above self . angle2 = self . angle self . angle3 = self . angle my_equilateral = Equilateral () # instance print my_equilateral . angle print my_equilateral . angle1 # based on variable angle print my_equilateral . number_of_sides # inherit print my_equilateral . number_of_3sides # inherit print my_equilateral . check_angles () # inherit; method way print Equilateral . check_angles ( my_equilateral ) # function way; IDEM !!! 1 2 3 4 5 6 7 8 9 10 5 4 3 True 60 60 5 3 True True Sometimes you\u2019ll want one class that inherits from another to not only take on the methods and attributes of its parent, but to override one or more of them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Employee ( object ): \"\"\"Models real-life employees!\"\"\" def __init__ ( self , employee_name ): self . employee_name = employee_name def calculate_wage ( self , hours ): self . hours = hours return hours * 20.00 class PartTimeEmployee ( Employee ): def calculate_wage ( self , hours ): self . hours = hours return hours * 12.00 # override what is naturally inherited 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Employee ( object ): def __init__ ( self , name ): self . name = name def greet ( self , other ): print \"Hello, %s \" % other . name class CEO ( Employee ): def greet ( self , other ): print \"Get back to work, %s !\" % other . name # override ceo = CEO ( \"Emily\" ) emp = Employee ( \"Steve\" ) emp . greet ( ceo ) ceo . greet ( emp ) 1 2 Hello, Emily Get back to work, Steve! On the flip side, sometimes you\u2019ll be working with a derived class (or subclass) and realize that you\u2019ve overwritten a method or attribute defined in that class\u2019 base class (also called a parent or superclass) that you actually need. Have no fear! You can directly access the attributes or methods of a superclass with Python\u2019s built-in super call. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Employee ( object ): \"\"\"Models real-life employees!\"\"\" def __init__ ( self , employee_name ): self . employee_name = employee_name def calculate_wage ( self , hours ): self . hours = hours return hours * 20.00 class PartTimeEmployee ( Employee ): def calculate_wage ( self , hours ): # override self . hours = hours return hours * 12.00 def full_time_wage ( self , hours ): # super call: associate the parent's class function with child's new function withtout retyping the function return super ( PartTimeEmployee , self ) . calculate_wage ( hours ) milton = PartTimeEmployee ( \"Jack\" ) print milton . full_time_wage ( 10 ) 1 200.0 More on Classes \u00b6 1 2 3 4 5 6 7 class Car ( object ): # create a class pass my_car = Car () # create a class instance 1 2 3 4 5 6 7 8 9 class Car ( object ): condition = \"new\" # create a member variables my_car = Car () print my_car . condition # call the member variable 1 new 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Car ( object ): condition = \"new\" def __init__ ( self , model , color , mpg ): # initialize or boot up! self . model = model # assign class variables self . color = color self . mpg = mpg my_car = Car ( \"DeLorean\" , \"silver\" , 88 ) # create an instance with its class variables print my_car . condition print my_car . model # call the class variables... print my_car . color print my_car . mpg 1 2 3 4 new DeLorean silver 88 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Car ( object ): condition = \"new\" def __init__ ( self , model , color , mpg ): self . model = model self . color = color self . mpg = mpg def display_car ( self ): return \"This is a %s %s with %s MPG.\" % ( self . color , self . model , str ( self . mpg )) # create a class method (function) my_car = Car ( \"DeLorean\" , \"silver\" , 88 ) print my_car . condition print my_car . model print my_car . color print my_car . mpg print my_car . display_car () # call the class method 1 2 3 4 5 new DeLorean silver 88 This is a silver DeLorean with 88 MPG. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Car ( object ): condition = \"new\" def __init__ ( self , model , color , mpg ): self . model = model self . color = color self . mpg = mpg def display_car ( self ): return \"This is a %s %s with %s MPG.\" % ( self . color , self . model , str ( self . mpg )) def drive_car ( self ): self . condition = \"used\" my_car = Car ( \"DeLorean\" , \"silver\" , 88 ) print my_car . condition # 'new' print my_car . model print my_car . color print my_car . mpg print my_car . display_car () my_car . drive_car () print my_car . condition # the condition changes to 'used' 1 2 3 4 5 6 new DeLorean silver 88 This is a silver DeLorean with 88 MPG. used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 class Car ( object ): condition = \"new\" def __init__ ( self , model , color , mpg ): self . model = model self . color = color self . mpg = mpg def display_car ( self ): return \"This is a %s %s with %s MPG.\" % ( self . color , self . model , str ( self . mpg )) def drive_car ( self ): self . condition = \"used\" my_car = Car ( \"DeLorean\" , \"silver\" , 88 ) print my_car . condition print my_car . model print my_car . color print my_car . mpg print my_car . display_car () my_car . drive_car () print my_car . condition class ElectricCar ( Car ): def __init__ ( self , model , color , mpg , battery_type ): # initialize with some partial inheritance from class Car Car . __init__ ( self , model , color , mpg ) # assign class variable by inheritance from class Car self . battery_type = battery_type # assign a new class variable my_car = ElectricCar ( \"Telsa\" , \"red\" , 0 , \"molten salt\" ) # create an instance with its class variables; OVERRIDE the above print my_car . condition # call the class variables; OVERRIDE the above print my_car . model # call the member variable; OVERRIDE the above print my_car . color print my_car . mpg my_ride = ElectricCar ( \"Google\" , \"blue\" , 10 , \"electrical\" ) # create an instance with its class variables print my_ride . condition # call the class variables print my_ride . model # call the member variable print my_ride . color print my_ride . mpg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 new DeLorean silver 88 This is a silver DeLorean with 88 MPG. used new Telsa red 0 new Google blue 10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 class Car ( object ): condition = \"new\" def __init__ ( self , model , color , mpg ): self . model = model self . color = color self . mpg = mpg def display_car ( self ): return \"This is a %s %s with %s MPG.\" % ( self . color , self . model , str ( self . mpg )) def drive_car ( self ): self . condition = \"used\" my_car = Car ( \"DeLorean\" , \"silver\" , 88 ) print my_car . condition + \"!\" # call the member variable; 'new' print my_car . model print my_car . color print my_car . mpg print my_car . display_car () my_car . drive_car () # call the class method print my_car . condition + \"!!\" # member variable; now 'used' class ElectricCar ( Car ): def __init__ ( self , model , color , mpg , battery_type ): Car . __init__ ( self , model , color , mpg ) self . battery_type = battery_type def drive_car ( self ): # create a class method; OVERRIDE the above self . condition = \"like new\" my_car = ElectricCar ( \"Telsa\" , \"red\" , 0 , \"molten salt\" ) print my_car . condition + \"!\" # 'new' again my_car . drive_car () # call the class method print my_car . condition + \"!!\" # 'like new' now print my_car . model print my_car . color print my_car . mpg my_ride = ElectricCar ( \"Google\" , \"blue\" , 10 , \"electrical\" ) print my_ride . condition + \"!\" # 'used' again my_ride . drive_car () # call the class method print my_ride . condition + \"!!\" # 'like new' now print my_ride . model print my_ride . color print my_ride . mpg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 new! DeLorean silver 88 This is a silver DeLorean with 88 MPG. used!! new! like new!! Telsa red 0 new! like new!! Google blue 10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Point3D ( object ): def __init__ ( self , x , y , z ): # initialize self . x = x self . y = y self . z = z # __repr__() method, which is short for representation; by providing a return value in this method, we can tell Python how to represent an object of our class (for instance, when using a print statement). def __repr__ ( self ): return \"( %d , %d , %d )\" % ( self . x , self . y , self . z ) my_point = Point3D ( 1 , 2 , 3 ) # instance # Print my_point.__repr__() w/o adding variables print my_point 1 (1, 2, 3) Quiz 11 \u00b6 Python writes data to a file when you close the file! Project Bank Account \u00b6 In this project, we\u2019ll create a Python class that can be used to create and manipulate a personal bank account. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class BankAccount ( object ): balance = 0 def __init__ ( self , name ): self . name = name def __repr__ ( self ): # The __repr__() method defines what represents the object when a user tries to print the BnkAccount object using print. Let's add to this method and make it descriptive. return \" %s 's account; Balance: $ %.2f \" % ( self . name , self . balance ) # $%.2f for 2 decimals, self.class attribute, self.member variable def show_balance ( self ): print \"Balance: $ %.2f \\n \" % ( self . balance ) def deposit ( self , amount ): if amount <= 0 : print \"No Account. Invalid \\n \" return # # return will exit the function, w/o return, the function jumps to the next line... else : print \"Depositing: $ %.2f \" % ( amount ) # ? self . balance += amount self . show_balance () # calling a class function def withdraw ( self , amount ): if amount > self . balance : print \"More than the balance. Invalid \\n \" return else : print \"Withdrawing: $ %.2f \" % ( amount ) # ? self . balance -= amount self . show_balance () my_account = BankAccount ( \"Ugo\" ) # Ugo is the argument 'name' print my_account # launch the __repr__ my_account . show_balance () # launch the class function (method) show_balance my_account . deposit ( 2000 ) my_account . withdraw ( 3000 ) my_account . withdraw ( 1000 ) print my_account 1 2 3 4 5 6 7 8 9 10 11 12 Ugo's account; Balance: $0.00 Balance: $0.00 Depositing: $2000.00 Balance: $2000.00 More than the balance. Invalid Withdrawing: $1000.00 Balance: $1000.00 Ugo's account; Balance: $1000.00 UNIT 12, File Input and Output \u00b6 File Input/Output \u00b6 Read information from a file on your computer, and/or write that information to another file? This process is called file I/O. 1 2 3 4 5 6 7 8 my_list = [ i ** 2 for i in range ( 1 , 11 )] f = open ( \"output.txt\" , \"w\" ) # create a file for item in my_list : f . write ( str ( item ) + \" \\n \" ) # write f . close () # save, close First. 1 f = open ( \"output.txt\" , \"w\" ) # This told Python to open output.txt in \"w\" mode (\"w\" stands for \"write\"). Read and write. 1 2 3 4 5 6 7 8 my_list = [ i ** 2 for i in range ( 1 , 11 )] my_file = open ( \"output.txt\" , \"r+\" ) # the file must exist for item in my_list : my_file . write ( str ( item ) + \" \\n \" ) # overwrite my_file . close () # save, close Read on the console. 1 2 3 4 my_file = open ( \"output.txt\" , \"r\" ) # the file must exist print my_file . read () my_file . close () 1 2 3 4 5 6 7 8 9 10 1 4 9 16 25 36 49 64 81 100 Read lines on the console. 1 2 3 4 5 6 7 my_file = open ( \"output.txt\" , \"r\" ) # the file must exist print my_file . readline () # read line 1 print my_file . readline () # read line 2 automatically print my_file . readline () # read line 3 my_file . close () 1 2 3 4 5 1 4 9 Open the file for reading. 1 2 3 read_file = open ( \"output.txt\" , \"r\" ) print read_file . read () read_file . close () 1 2 3 4 5 6 7 8 9 10 1 4 9 16 25 36 49 64 81 100 Use a second file handler to open the file for writing. 1 2 3 4 5 6 7 8 9 write_file = open ( \"text.txt\" , \"w\" ) # Write to the file write_file . write ( \"Not closing files is VERY BAD.\" ) # Try to read from the file print write_file . read () # Not working...`` write_file . close () 1 2 3 4 5 6 7 8 9 10 11 12 13 --------------------------------------------------------------------------- IOError Traceback (most recent call last) &lt;ipython-input-87-db256164394e&gt; in &lt;module&gt;() 5 6 # Try to read from the file ----&gt; 7 print write_file.read() # Not working...`` 8 9 write_file.close() IOError: File not open for reading Try. 1 2 3 4 5 6 7 8 9 10 11 read_file = open ( \"text.txt\" , \"r\" ) print read_file . read () write_file = open ( \"text.txt\" , \"w\" ) write_file . write ( \"Not closing files is VERY BAD.\" ) write_file . close () # close it! write_file = open ( \"text.txt\" , \"r\" ) # reopen it in read mode print write_file . read () # working write_file . close () 1 2 Not closing files is VERY BAD. Not closing files is VERY BAD. And. 1 2 3 write_file = open ( \"text.txt\" , \"w\" ) write_file . write ( \"Not closing files is VERY BAD.\" ) # could be a variable write_file . close () 1 2 3 read_file = open ( \"text.txt\" , \"r\" ) print read_file . read () read_file . close () 1 Not closing files is VERY BAD. 1 2 3 write_file = open ( \"text.txt\" , \"w\" ) write_file . truncate () # delete write_file . close () 1 2 3 read_file = open ( \"text.txt\" , \"r\" ) print read_file . read () read_file . close () You may not know this, but file objects contain a special pair of built-in methods: __enter__() and __exit__() . The details aren\u2019t important, but what is important is that when a file object\u2019s __exit__() method is invoked, it automatically closes the file. How do we invoke this method? With with and as. 1 2 3 with open ( \"text.txt\" , \"w\" ) as textfile : # a variable textfile . write ( \"Success!\" ) textfile . close () 1 2 3 with open ( \"text.txt\" , \"r\" ) as textfile : print textfile . read () textfile . close () 1 Success! More I/O \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 with open ( \"text.txt\" , \"w\" ) as my_file : my_file . write ( \"Youpee!!!\" ) print my_file . closed # true if not my_file . closed == True : my_file . close () print my_file . closed # true with open ( \"text.txt\" , \"r\" ) as my_file : print my_file . read () print my_file . closed # true with open ( \"text.txt\" , \"r\" ) as my_file : print my_file . closed # false my_file . close () print my_file . closed # true 1 2 3 4 5 6 True True Youpee!!! True False True Quiz 12 \u00b6 OK Project DNA Analysis \u00b6 In this project, we\u2019ll use many of the concepts you\u2019ve learned throughout the Python course in order to do some DNA analysis for a crime investigation. The scenario: A spy deleted important files from a computer. There were a few witnesses at the scene of the crime, but no one is sure who exactly the spy was. Three possible suspects were apprehended based on surveillance video. Each suspect had a sample of DNA taken from them. The computer\u2019s keyboard was also swabbed for DNA evidence and, luckily, one small DNA sample was successfully retrieved from the computer\u2019s keyboard. Given the three suspects\u2019 DNA and the sample DNA retreived from the keyboard, it\u2019s up to you to figure out who the spy is! The project should have methods for each of the following: Given a file, read in the DNA for each suspect and save it as a string Take a DNA string and split it into a list of codons Iterate through a suspect\u2019s codon list to see how many of their codons match the sample codons Pick the right suspect to continue the investigation on 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 sample = [ 'GTA' , 'GGG' , 'CAC' ] def read_dna ( dna_file ): dna_data = \"\" # empty string with open ( dna_file , \"r\" ) as f : # f = open(dna_file, \"r\"); with, as for line in f : dna_data += line return dna_data def dna_codons ( dna ): codons = [] for i in range ( 0 , len ( dna ), 3 ): # slice strings of 3 letters if i + 3 < len ( dna ): # make sure that you don't add a string to the codon list that isn't at least 3 letters long codons . append ( dna [ i : i + 3 ]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3 return codons def match_dna ( dna ): matches = 0 for codon in dna : if codon in sample : # if ,in matches += 1 return matches def is_criminal ( dna_sample ): dna_data = read_dna ( dna_sample ) codons = dna_codons ( dna_data ) num_matches = match_dna ( codons ) if num_matches >= 3 : print (( dna_sample )[: - 4 ]) . upper (), print ( \": number of matches = \" + str ( num_matches ) + \"; the investigation will proceed further more with this suspect.\" ) else : print (( dna_sample )[: - 4 ]) . upper (), print ( \": no evidence; the suspect can be freed.\" ) a = \"suspect1.txt\" is_criminal ( a ) a = \"suspect2.txt\" is_criminal ( a ) a = \"suspect3.txt\" is_criminal ( a ) 1 2 3 SUSPECT1 : no evidence ; the suspect can be freed . SUSPECT2 : number of matches = 6 ; the investigation will proceed further more with this suspect . SUSPECT3 : no evidence ; the suspect can be freed . suspect1.txt 1 ATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT suspect2.txt 1 CCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG suspect3.txt 1 TCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA","title":"Codecademy Python"},{"location":"Codecademy Python/#python-syntax","text":"Python is an easy to learn programming language. You can use it to create web apps, games, even a search engine! 1 2 3 4 5 6 print \"Welcome to Python!\" print ( \"Welcome\" ) print 5 + 3 print ( 5 + 5 ) print \"What \" + str ( 3 ) print \"What\" , 5 1 2 3 4 5 6 Welcome to Python! Welcome 8 10 What 3 What 5 1 2 3 4 5 6 7 8 a = 30 print \"What \" + str ( a ) b = \"A list \\t *A \\\\ \\\" \\' \" print b c = 10 + 20 print c 1 2 3 What 30 A list *A \\ \" ' 30 1 2 3 4 5 6 print \"1 : %r \" % ( a ) # read# print \"2 : %s \" % ( a ) # string# print \"? : %d \" % ( a ) # digit print \"3 : %r \" % ( b ) print \"4 : %s \" % ( b ) # print \"? : %d\" % (b) !!! 1 2 3 4 5 1 : 30 2 : 30 ? : 30 3 : 'A list \\t*A \\\\ \" \\' ' 4 : A list * A \\ \" ' Creating web apps, games, and search engines all involve storing and working with different types of data. They do so using variables. A variable stores a piece of data, and gives it a specific name. 1 my_variable = 10 You just stored a number in a variable. Numbers are one data type we use in programming. A second data type is called a boolean. A boolean is like a light switch. It can only have two values. Just like a light switch can only be on or off, a boolean can only be True or False . 1 2 3 my_int = 7 my_float = 1.23 my_bool = True Say my_int = 7 . You can change the value of a variable by \u201creassigning\u201d it. 1 2 3 4 5 my_int = 7 my_int = 3 print my_int 1 3 In Python, whitespace is used to structure code. Whitespace is important, so you have to be careful with how you use it. 1 2 3 4 5 def spam (): eggs = 12 return eggs print spam () 1 12 You\u2019ll get this error whenever your whitespace is off. The interpreter runs your code line by line, and checks for any errors. You probably saw us use the # sign a few times in earlier exercises. The # sign is for comments. A comment is a line of text that Python won\u2019t try to run as code. It\u2019s just for humans to read. Comments make your program easier to understand. When you look back at your code or others want to collaborate with you, they can read your comments and easily figure out what your code does. The # sign will only comment out a single line. While you could write a multi-line comment, starting each line with # , that can be a pain. Instead, for multi-line comments, you can include the whole block in a set of triple quotation marks: 1 2 3 4 \"\"\" Sipping from your cup 'til it runneth over, Holy Grail. \"\"\" 1 \"\\nSipping from your cup 'til it runneth over,\\nHoly Grail.\\n\" Great! Now let\u2019s do some math. You can add, subtract, multiply, divide numbers. 1 2 3 4 5 6 7 8 addition = 72 + 23 subtraction = 108 - 204 multiplication = 108 * 0.5 division = 108 / 9 count_to = 72 + 56 print count_to 1 128 All that math can be done on a calculator, so why use Python? Because you can combine math with other data types (e.g. booleans) and commands to create useful programs. Calculators just stick to numbers. Create a new variable called eight and set it to 8, or the result of 2 to the power to 3 ( 2 ^ 3 oe 2 ** 3 ). 1 2 3 eggs = 10 ** 2 print eggs 1 100 Our final operator is modulo. Modulo returns the remainder from a division. So, if you type 3 % 2 , it will return 1, because 2 goes into 3 evenly once, with 1 left over. 1 2 3 spam = 5 % 4 print spam 1 1","title":"Python Syntax"},{"location":"Codecademy Python/#tip-calculator","text":"Now let\u2019s apply the concepts from the previous section to a real world example. You\u2019ve finished eating at a restaurant, and received this bill: Cost of meal: $44.50 Restaurant tax: 6.75% Tip: 15% 1 2 3 4 5 6 7 8 meal = 44.50 tax = 6.75 / 100 tip = 0.15 meal = meal + meal * tax total = meal + meal * tip print ( \" %.2f \" ) % total 1 54.63","title":"Tip Calculator"},{"location":"Codecademy Python/#quiz-1","text":"OK","title":"Quiz 1"},{"location":"Codecademy Python/#unit-2-strings-and-console-output","text":"","title":"UNIT 2, Strings and Console Output"},{"location":"Codecademy Python/#strings-console-output","text":"Another useful data type is the string. A string can contain letters, numbers, and symbols. 1 2 3 name = \"Ryan\" age = \"19\" food = \"cheese\" Let\u2019s get a little practice in with strings. 1 2 3 4 5 6 7 caesar = \"Graham\" praline = \"John\" viking = \"Teresa\" print caesar print praline print viking 1 2 3 Graham John Teresa 1 'There' s a snake in my boot ! ' 1 2 3 4 File \"&lt;ipython-input-16-13621f01b99c&gt;\", line 1 'There's a snake in my boot!' ^ SyntaxError: invalid syntax This code breaks because Python thinks the apostrophe in \u2018There\u2019s\u2018 ends the string. We can use the backslash to fix the problem, like this: 1 2 'There \\' s a snake in my boot!' 'This isn \\' t flying, this is falling with style!' 1 \"This isn't flying, this is falling with style!\" Each character in a string is assigned a number. This number is called the index. Check out the diagram in the editor. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 c = \"cats\" [ 0 ] n = \"Ryan\" [ 3 ] \"\"\" The string \"PYTHON\" has six characters, numbered 0 to 5, as shown below: +---+---+---+---+---+---+ | P | Y | T | H | O | N | +---+---+---+---+---+---+ 0 1 2 3 4 5 So if you wanted \"Y\", you could just type \"PYTHON\"[1] (always start counting from 0!) \"\"\" fifth_letter = \"MONTY\" [ 4 ] print fifth_letter 1 Y Now that we know how to store strings, let\u2019s see how we can change them using string methods. String methods let you perform specific tasks for strings. We\u2019ll focus on four string methods: len() lower() upper() str() length, string 1 2 3 4 5 6 7 8 9 parrot = \"Norwegian Blue\" print len ( parrot ) # length, number of characters, including blanks print parrot . lower () # to lowercases print parrot . upper () # to uppercases pi = 3.14 print str ( pi ) # number of character in the string 1 2 3 4 14 norwegian blue NORWEGIAN BLUE 3.14 len(string) and str(object) , but dot notation (such as \u201cString\u201d.upper()) for the rest. Methods that use dot notation only work with strings. On the other hand, len() and str() can work on other data types. The area where we\u2019ve been writing our code is called the editor. The console is where the results of your code is shown. print simply displays your code in the console. 1 2 3 4 print \"Monty Python\" the_machine_goes = \"Ping!\" print the_machine_goes 1 2 Monty Python Ping! Now let\u2019s combine the two! The + operator between strings will \u2018add\u2019 them together, one after the other. Notice that there are spaces inside the quotation marks after Life and of so that we can make the combined string look like 3 words. Combining strings together like this is called concatenation. Let\u2019s try concatenating a few strings together now! 1 2 print \"Life \" + \"of \" + \"Brian\" print \"Spam and eggs\" 1 2 Life of Brian Spam and eggs Sometimes you need to combine a string with something that isn\u2019t a string. In order to do that, you have to convert the non-string into a string. he str() method converts non-strings into strings. In the above example, you convert the number 2 into a string and then you concatenate the strings together. 1 print \"The value of pi is around \" + str ( 3.14 ) 1 The value of pi is around 3.14 When you want to print a variable with a string, the % operator after a string is used to combine a string with variables. The % operator will replace a %s in the string with the string variable that comes after it. 1 2 3 4 5 6 7 8 9 10 11 string_1 = \"Camelot\" string_2 = \"place\" print \"Let's not go to %s . 'Tis a silly %s .\" % ( string_1 , string_2 ) name = raw_input ( \"What is your name?\" ) quest = raw_input ( \"What is your quest?\" ) color = raw_input ( \"What is your favorite color?\" ) print \"Ah, so your name is %s , your quest is %s , \" \\ \"and your favorite color is %s .\" % ( name , quest , color ) 1 2 3 4 5 Let's not go to Camelot. 'Tis a silly place. What is your name?Al What is your quest?Graal What is your favorite color?red Ah, so your name is Al, your quest is Graal, and your favorite color is red.","title":"Strings &amp; Console Output"},{"location":"Codecademy Python/#date-and-time","text":"A lot of times you want to keep track of when something happened. We can do so in Python using datetime . Here we\u2019ll use datetime to print the date and time in a nice format. 1 2 3 4 5 6 7 8 9 10 11 12 13 from datetime import datetime # all functions from datetime are imported now = datetime . now () print now print now . year print now . month print now . day print ' %s / %s / %s ' % ( now . month , now . day , now . year ) print ' %s : %s : %s ' % ( now . hour , now . minute , now . second ) print ' %s / %s / %s %s : %s : %s ' % ( now . month , now . day , now . year , now . hour , now . minute , now . second ) 1 2 3 4 5 6 7 2016-10-18 14:02:03.661000 2016 10 18 10/18/2016 14:2:3 10/18/2016 14:2:3","title":"Date and Time"},{"location":"Codecademy Python/#quiz-2","text":"1 2 3 4 5 6 7 8 9 10 11 time = datetime . now () print time . day time = datetime . now () #13:08:09 print str ( time . hour ) + \":\" + str ( time . minute ) + \":\" + str ( time . second ) now = datetime . now () #2013-01-04 19:22:43 print ' %s / %s / %s %s : %s : %s ' % ( now . day , now . month , now . year , now . hour , now . minute , now . second ) day = 04 1 2 3 18 14:2:11 18/10/2016 14:2:11","title":"Quiz 2"},{"location":"Codecademy Python/#project-python-mad-libs","text":"concatenate, variable Python can be used for a variety of different tasks. In this project, we\u2019ll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story. Mad Libs require: Words from the reader (for the blank spaces) A story to plug the words into For this project, we\u2019ll provide you with the story (feel free to modify it), but it will be up to you to build a program that does the following: Prompt the user for input Print the entire Mad Libs story with the user\u2019s input in the right places 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \"\"\" Python can be used for a variety of different tasks. In this project, we'll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story. \"\"\" print \"The program is running.\" name = raw_input ( \"Input a name? \" ) adj_one = raw_input ( \"Input an adjective? \" ) adj_two = raw_input ( \"Input another adjective? \" ) adj_three = raw_input ( \"Input a last adjective? \" ) verb_one = raw_input ( \"Input a verb? \" ) verb_two = raw_input ( \"Input another verb? \" ) verb_three = raw_input ( \"Input a last verb? \" ) noun_one = raw_input ( \"Input a noun? \" ) noun_two = raw_input ( \"Input another noun? \" ) noun_three = raw_input ( \"Input another noun? \" ) noun_four = raw_input ( \"Input a last noun? \" ) animal = raw_input ( \"Input an animal? \" ) food = raw_input ( \"Input a food? \" ) fruit = raw_input ( \"Input a fruit? \" ) number = raw_input ( \"Input a number? \" ) superhero = raw_input ( \"Input a superhero? \" ) country = raw_input ( \"Input a country? \" ) dessert = raw_input ( \"Input a dessert? \" ) year = raw_input ( \"Input a year? \" ) print \"\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 The program is running. Input a name? Al Input an adjective? small Input another adjective? great Input a last adjective? yellow Input a verb? dig Input another verb? walk Input a last verb? eat Input a noun? spoon Input another noun? lamp Input another noun? table Input a last noun? pen Input an animal? dog Input a food? pasta Input a fruit? apple Input a number? 10 Input a superhero? spiderman Input a country? mexico Input a dessert? apple pie Input a year? 2016 The template for the story. 1 2 3 STORY = \"This morning I woke up and felt %s because %s was going to finally %s over the big %s %s . On the other side of the %s were many %s s protesting to keep %s in stores. The crowd began to %s to the rythym of the %s , which made all of the %s s very %s . %s tried to %s into the sewers and found %s rats. Needing help, %s quickly called %s . %s appeared and saved %s by flying to %s and dropping %s into a puddle of %s . %s then fell asleep and woke up in the year %s , in a world where %s s ruled the world.\" print STORY % ( adj_one , name , verb_one , adj_two , noun_one , noun_two , animal , food , verb_two , noun_three , fruit , adj_three , name , verb_three , number , name , superhero , superhero , name , country , name , dessert , name , year , noun_four ) 1 This morning I woke up and felt small because Al was going to finally dig over the big great spoon. On the other side of the lamp were many dogs protesting to keep pasta in stores. The crowd began to walk to the rythym of the table, which made all of the apples very yellow. Al tried to eat into the sewers and found 10 rats. Needing help, Al quickly called spiderman. spiderman appeared and saved Al by flying to mexico and dropping Al into a puddle of apple pie. Al then fell asleep and woke up in the year 2016, in a world where pens ruled the world.","title":"Project Python Mad Libs"},{"location":"Codecademy Python/#unit-3-conditionals-and-control-flow","text":"","title":"UNIT 3, Conditionals and Control Flow"},{"location":"Codecademy Python/#conditionals-control-flow","text":"Control flow gives us this ability to choose among outcomes based off what else is happening in the program. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def clinic (): print \"You've just entered the clinic!\" print \"Do you take the door on the left or the right?\" answer = raw_input ( \"Type left or right and hit 'Enter'.\" ) . lower () if answer == \"left\" or answer == \"l\" : print \"This is the Verbal Abuse Room, you heap of parrot droppings!\" elif answer == \"right\" or answer == \"r\" : print \"Of course this is the Argument Room, I've told you that already!\" else : print \"You didn't pick left or right! Try again.\" clinic () # launch the function back clinic () 1 2 3 4 You've just entered the clinic! Do you take the door on the left or the right? Type left or right and hit 'Enter'.left This is the Verbal Abuse Room, you heap of parrot droppings! Comparators. There are six: Equal to: == Not equal to: != Less than: < Less than or equal to: <= Greater than: > Greater than or equal to: >= Note that == compares whether two things are equal, and = assigns a value to a variable. 1 2 3 bool_one = 1 + 2 bool_two = 3 bool_one == bool_two # true 1 True Boolean operators compare statements and result in boolean values. There are three boolean operators: and , which checks if both the statements are True; or , which checks if at least one of the statements is True; not , which gives the opposite of the statement. 1 2 3 4 5 bool_one = 1 > 2 and 2 > 3 # false bool_two = False and True # false bool_one = True or False # true bool_two = 2 == 2 or 2 == 3 # true bool_one = not 40 != 41 # true if is a conditional statement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 answer = \"Left\" if answer == \"Left\" : print \"This is the Verbal Abuse Room, you heap of parrot droppings!\" def using_control_once (): if \"A\" == \"A\" : return \"Success #1\" def using_control_again (): if 1 != 2 : return \"Success #2\" print using_control_once () print using_control_again () 1 2 3 This is the Verbal Abuse Room, you heap of parrot droppings! Success #1 Success #2 The else statement complements the if statement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 answer = \"'This but a scratch!\" def black_knight (): if answer == \"'Tis but a scratch!\" : return True else : return False # Make sure this returns False def french_soldier (): if answer == \"Go away, or I shall taunt you a second time!\" : return True else : return False # Make sure this returns False print black_knight () print french_soldier () 1 2 False False elif is short for \u2018else if\u2019. It means exactly what it sounds like: \u201cotherwise, if the following expression is true, do this!\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def greater_less_equal_5 ( answer ): if answer > 5 : return 1 elif answer < 5 : return - 1 else : return 0 print greater_less_equal_5 ( 4 ) print greater_less_equal_5 ( 5 ) print greater_less_equal_5 ( 6 ) def the_flying_circus (): if 1 != 0 and 3 > 2 : return True elif 0 == 0 or 2 == 2 : return False else : return True print the_flying_circus () 1 2 3 4 -1 0 1 True","title":"Conditionals &amp; Control Flow"},{"location":"Codecademy Python/#pyglatin","text":"Now let\u2019s take what we\u2019ve learned so far and write a Pig Latin translator. Pig Latin is a language game, where you move the first letter of the word to the end and add \u201cay.\u201d So \u201cPython\u201d becomes \u201cythonpay.\u201d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 print 'Welcome to the Pig Latin Translator!' original = raw_input ( \"Enter a word:\" ) if len ( original ) > 0 and original . isalpha (): print original else : print \"empty\" pyg = 'ay' original = raw_input ( 'Enter a word: ' ) if len ( original ) > 0 and original . isalpha (): word = original . lower () first = word [ 0 ] new_word = word + first + pyg new_word = new_word [ 1 : len ( new_word )] print new_word else : print 'empty' 1 2 3 4 5 Welcome to the Pig Latin Translator! Enter a word:translator translator Enter a word: radiator adiatorray","title":"PygLatin"},{"location":"Codecademy Python/#quiz-3","text":"Takeaway: there no limits to the number of elif .","title":"Quiz 3"},{"location":"Codecademy Python/#project-area-calculator","text":"Python is especially useful for doing math and can be used to automate many calculations. In this project, you\u2019ll create a calculator than can compute the area of a given shape, as selected by the user. The calculator will be able to determine the area of the following shapes: Circle Triangle The program should do the following: Prompt the user to select a shape Depending on the shape the user selects, calculate the area of that shape Print the area of that shape to the user Python is especially useful for doing math and can be used to automate many calculations. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 from math import pi from time import sleep from datetime import datetime now = datetime . now () # from datetime print \"The calculator is starting up at: \\n \" + str ( now ) print \" \\n Curently: %s / %s / %s %s : %s \" % ( now . month , now . day , now . year , now . hour , now . minute ) sleep ( 1 ) # pause 1 sec hint = \"Don't forget to include the correct units!\" from math import pi from time import sleep def question (): option = raw_input ( \"Enter C for Circle or T for Triangle: \" ) if option . upper () == 'C' or option . upper () == 'CIRCLE' : print circle () elif option . upper () == 'T' or option . upper () == 'TRIANGLE' : print triangle () else : print \"Please answer with a C or T\" , question () #!!!!!! def circle (): radius = float ( raw_input ( \"Enter radius: \" )) areac = pi * ( radius ** 2 ) print \"The pie is baking...\" sleep ( 1 ) return ( str ( \" %.2f \" % areac )) # !!!!! def triangle (): base = float ( raw_input ( \"Enter base: \" )) height = float ( raw_input ( \"Enter height: \" )) areat = base * height / 2 print \"Uni Bi Tri...\" sleep ( 1 ) return ( str ( \" %.2f \" % areat )) # !!!!! question () 1 2 3 4 5 6 7 8 9 The calculator is starting up at: 2016-10-18 14:05:19.204000 Curently: 10/18/2016 14:5 Enter C for Circle or T for Triangle: T Enter base: 10 Enter height: 5 Uni Bi Tri... 25.00","title":"Project Area Calculator"},{"location":"Codecademy Python/#unit-4-functions","text":"","title":"UNIT 4, Functions"},{"location":"Codecademy Python/#functions","text":"You might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it\u2019s much cleaner to define a function, which can then be used repeatedly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def tax ( billa ): billb = float ( billa ) * 1.08 return billb def tip ( billc ): billd = float ( billc ) * 1.15 return billd meal_cost = 100.00 meal_with_tax = tax ( meal_cost ) print ( \"With tax: %.2f \" % meal_with_tax ) # !!!!! meal_with_tip = tip ( meal_with_tax ) print ( \"With tip: %.2f \" % meal_with_tip ) # The header, the comment, the body: def spam (): \"\"\"print the string \"Eggs!\" to the console.\"\"\" print \"Eggs!\" 1 2 With tax: 108.00 With tip: 124.20 After defining a function, it must be called to be implemented. 1 2 3 4 5 6 7 def square ( n ): \"\"\"Returns the square of a number.\"\"\" squared = n ** 2 return ( \" %d squared is %d .\" % ( n , squared )) print square ( 10 ) 1 10 squared is 100. Functions can be much more powerful than that. For example, a function can call another function. 1 2 3 4 5 6 7 8 9 n = 1 def one_good_turn ( n ): return n + 1 def deserves_another ( m ): return one_good_turn ( m ) + 2 # calling a function already defined Again. 1 2 3 4 5 6 7 8 9 10 11 12 def cube ( number ): return number ** 3 def by_three ( number ): if number % 3 == 0 : return cube ( number ) else : return False by_three ( 3 ) 1 27 Import modules to use custom functions. 1 2 3 import math print math . sqrt ( 25 ) 1 5.0 However, we only really needed the sqrt function, and it can be frustrating to have to keep typing math.sqrt() . It\u2019s possible to import only certain variables or functions from a given module (like pi above). Pulling in just a single function from a module is called a function import, and it\u2019s done with the from keyword. 1 2 from math import sqrt # module 'math', function 'sqrt' from math import pi # module 'math', variable 'pi' Universal import can handle all of the variables and functions in a module to avoid to constantly type math . 1 from math import * Universal import may look great on the surface, but they\u2019re not a good idea for one very important reason: they fill your program with a ton of variable and function names without the safety of those names still being associated with the module(s) they came from. dir(), dir 1 2 3 4 import math everything = dir ( math ) print everything 1 ['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'] For these reasons, it\u2019s best to stick with either import module and type module . name or just import specific variables and functions from various modules as needed. Let\u2019s look at some of the functions that are built in to Python (no modules required!). 1 2 3 4 5 6 7 8 9 10 11 12 13 def distance_from_zero ( arg ): return abs ( arg ) def biggest_number ( arg1 , arg2 ): return min ( arg1 , arg2 ) def smallest_number ( * args ): return min ( args ) print distance_from_zero ( - 10 ) 1 print biggest_number ( - 10 , - 5 ) 1 -10 1 print biggest_number ( - 10 , - 5 , 5 , 10 ) # test 1 2 3 4 5 6 7 8 9 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-24-40abbc687778&gt; in &lt;module&gt;() ----&gt; 1 print biggest_number(-10, -5, 5, 10) # test TypeError: biggest_number() takes exactly 2 arguments (4 given) 1 2 3 print smallest_number ( 1 , 2 ) print smallest_number ( 3 , 4 , 5 , 6 , 7 ) print smallest_number ( - 10 , - 5 , 5 , 10 ) 1 2 3 1 3 -10 1 2 3 4 5 6 7 8 9 10 11 12 maximum = max ( - 5 , 3 , 5 , 10 ) print maximum minimum = min ( - 3 , - 5 ) print minimum absolute = abs ( - 42 ) print absolute print type ( 42 ) # <type 'int'> print type ( 4.2 ) # <type 'float'> print type ( 'spam' ) # <type 'str'> 1 2 3 4 5 6 10 -5 42 &lt;type 'int'&gt; &lt;type 'float'&gt; &lt;type 'str'&gt;","title":"Functions"},{"location":"Codecademy Python/#taking-a-vacation","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def hotel_cost ( nights ): return 140 * nights def plane_ride_cost ( city ): if city == \"Charlotte\" : return 183 elif city == \"Tampa\" : return 220 elif city == \"Pittsburgh\" : return 222 elif city == \"Los Angeles\" : return 475 def rental_car_cost ( days ): cost = days * 40 if days >= 7 : cost -= 50 elif days >= 3 and days < 7 : cost -= 20 else : cost return cost def trip_cost ( city , days , spending_money ): return rental_car_cost ( days ) + hotel_cost ( days ) + plane_ride_cost ( city ) + spending_money print trip_cost ( \"Los Angeles\" , 5 , 600 ) 1 1955","title":"Taking a Vacation"},{"location":"Codecademy Python/#quiz-4","text":"OK","title":"Quiz 4"},{"location":"Codecademy Python/#project-number-guess","text":"Wanna play a game? In this project, we\u2019ll build a program that rolls a pair of dice and asks the user to guess a number. Based on the user\u2019s guess, the program should determine a winner. If the user\u2019s guess is greater than the total value of the dice roll, they win! Otherwise, the computer wins. The program should do the following: Randomly roll a pair of dice Add the values of the roll Ask the user to guess a number Compare the user\u2019s guess to the total value Decide a winner (the user or the program) Inform the user who the winner is 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 from random import randint from time import sleep def get_user_guess (): user_guess = int ( raw_input ( \"Guess a number: \" )) return user_guess def roll_dice ( number_of_sides ): first_roll = randint ( 1 , number_of_sides ) second_roll = randint ( 1 , number_of_sides ) max_value = number_of_sides * 2 print \"The maximum value is: \" + str ( max_value ) sleep ( 1 ) user_guess = get_user_guess () if user_guess > max_value : print \"Your guess is higher than the max allowed (\" + str ( max_value ) + \"). Please, take another guess.\" return # exit the if block is condition met else : print \"Rolling...\" sleep ( 1 ) print \"First roll is: %d \" % ( first_roll ) sleep ( 1 ) print \"Second roll is: %d \" % ( second_roll ) total_roll = first_roll + second_roll print \"Result...\" sleep ( 1 ) if user_guess > total_roll : print \"You win since your guess, \" + str ( user_guess ) + \", is greater than the total roll, \" + str ( total_roll ) return # exit else : print \"You lose!\" return # exit roll_dice ( 6 ) 1 2 3 4 5 6 7 The maximum value is: 12 Guess a number: 5 Rolling... First roll is: 1 Second roll is: 2 Result... You win since your guess, 5, is greater than the total roll, 3","title":"Project Number Guess"},{"location":"Codecademy Python/#unit-5-lists-dictionaries","text":"","title":"UNIT 5, Lists &amp; Dictionaries"},{"location":"Codecademy Python/#lists-and-dictionaries","text":"Lists are a datatype you can use to store a collection of different pieces of information as a sequence under a single variable name. (Datatypes you\u2019ve already learned about include strings, numbers, and booleans.) 1 2 3 4 5 6 7 8 9 zoo_animals = [ \"pangolin\" , \"cassowary\" , \"sloth\" , \"kangourou\" ]; # You can access an individual item on the list by its index. An index is like an address that identifies the item's place in the list. The index appears directly after the list name, in between brackets, like this: list_name[index]. if len ( zoo_animals ) > 3 : print \"The first animal at the zoo is the \" + zoo_animals [ 0 ] print \"The second animal at the zoo is the \" + zoo_animals [ 1 ] print \"The third animal at the zoo is the \" + zoo_animals [ 2 ] print \"The fourth animal at the zoo is the \" + zoo_animals [ 3 ] 1 2 3 4 The first animal at the zoo is the pangolin The second animal at the zoo is the cassowary The third animal at the zoo is the sloth The fourth animal at the zoo is the kangourou 1 2 3 4 5 6 numbers = [ 5 , 6 , 7 , 8 ] print \"Adding the numbers at indices 0 and 2...\" print numbers [ 0 ] + numbers [ 2 ] print \"Adding the numbers at indices 1 and 3...\" print numbers [ 1 ] + numbers [ 3 ] 1 2 3 4 Adding the numbers at indices 0 and 2... 12 Adding the numbers at indices 1 and 3... 14 A list doesn\u2019t have to have a fixed length. You can add items to the end of a list any time you like! 1 2 3 4 5 6 7 8 9 10 11 12 13 suitcase = [] suitcase . append ( \"sunglasses\" ) suitcase . append ( \"calculator\" ) suitcase . append ( \"screen\" ) suitcase . append ( \"mouse\" ) list_length = len ( suitcase ) # Set this to the length of suitcase print list_length print \"There are %d items in the suitcase.\" % ( list_length ) print suitcase 1 2 3 4 There are 4 items in the suitcase. ['sunglasses', 'calculator', 'screen', 'mouse'] 1 2 3 4 5 suitcase = [ \"sunglasses\" , \"hat\" , \"passport\" , \"laptop\" , \"suit\" , \"shoes\" ] first = suitcase [ 0 : 2 ] # The first and second items (index zero and one) middle = suitcase [ 2 : 4 ] # Third and fourth items (index two and three) last = suitcase [ 4 : 6 ] # The last two items (index four and five) You can slice a string exactly like a list! In fact, you can think of strings as lists of characters: each character is a sequential item in the list, starting from index 0. 1 2 3 4 5 animals = \"catdogfrog\" cat = animals [: 3 ] # The first three characters of animals dog = animals [ 3 : 6 ] # The fourth through sixth characters frog = animals [ 6 :] # From the seventh character to the end Sometimes you need to search for an item in a list. 1 2 3 4 5 6 7 8 9 animals = [ \"aardvark\" , \"badger\" , \"duck\" , \"emu\" , \"fennec fox\" ] duck_index = animals . index ( \"duck\" ) # Use index() to find \"duck\" print duck_index animals . insert ( duck_index , \"cobra\" ) print animals # Observe what prints after the insert operation 1 2 2 ['aardvark', 'badger', 'cobra', 'duck', 'emu', 'fennec fox'] If you want to do something with every item in the list, you can use a for loop. 1 2 3 4 my_list = [ 1 , 9 , 3 , 8 , 5 , 7 ] for number in my_list : print 2 * number 1 2 3 4 5 6 2 18 6 16 10 14 If your list is a jumbled mess, you may need to sort() it. 1 2 3 4 5 6 7 8 9 start_list = [ 5 , 3 , 1 , 2 , 4 ] square_list = [] for var in start_list : square_list . append ( var ** 2 ) square_list . sort () print square_list 1 [1, 4, 9, 16, 25] A dictionary is similar to a list, but you access values by looking up a key instead of an index. A key can be any string or number. Dictionaries are great for things like phone books (pairing a name with a phone number), login pages (pairing an e-mail address with a username), and more! 1 2 3 4 5 residents = { 'Puffin' : 104 , 'Sloth' : 105 , 'Burmese Python' : 106 } print residents [ 'Puffin' ] # Prints Puffin's room number print residents [ 'Sloth' ] print residents [ 'Burmese Python' ] 1 2 3 104 105 106 An empty pair of curly braces {} is an empty dictionary, just like an empty pair of [] is an empty list. Like Lists, Dictionaries are \u2018mutable\u2019. This means they can be changed after they are created. One advantage of this is that we can add new key-value pairs to the dictionary after it is created. The length len() of a dictionary is the number of key-value pairs it has. Each pair counts only once, even if the value is a list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 menu = {} # Empty dictionary menu [ 'Chicken Alfredo' ] = 14.50 # Adding new key-value pair print menu [ 'Chicken Alfredo' ] menu [ 'General Tao' ] = 12.00 menu [ 'Pad Thai' ] = 10.50 menu [ 'Poutine' ] = 9.00 print \"There are \" + str ( len ( menu )) + \" items on the menu.\" print menu for key , value in menu . iteritems (): # !!!!! print key , value for key , value in menu . iteritems (): # !!!!! print key for key , value in menu . iteritems (): # !!!!! print value 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14.5 There are 4 items on the menu. {'Chicken Alfredo': 14.5, 'General Tao': 12.0, 'Poutine': 9.0, 'Pad Thai': 10.5} Chicken Alfredo 14.5 General Tao 12.0 Poutine 9.0 Pad Thai 10.5 Chicken Alfredo General Tao Poutine Pad Thai 14.5 12.0 9.0 10.5 Because dictionaries are mutable, they can be changed in many ways. Items can be removed from a dictionary with the del() command. 1 2 3 4 5 6 7 8 9 # key - animal_name : value - location zoo_animals = { 'Unicorn' : 'Cotton Candy House' , 'Sloth' : 'Rainforest Exhibit' , 'Bengal Tiger' : 'Jungle House' , 'Atlantic Puffin' : 'Arctic Exhibit' , 'Rockhopper Penguin' : 'Arctic Exhibit' } A dictionary (or list) declaration may break across multiple lines Removing the \u2018Unicorn\u2019 entry. (Unicorns are incredibly expensive.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 zoo_animals = { 'Unicorn' : 'Cotton Candy House' , 'Sloth' : 'Rainforest Exhibit' , 'Bengal Tiger' : 'Jungle House' , 'Atlantic Puffin' : 'Arctic Exhibit' , 'Rockhopper Penguin' : 'Arctic Exhibit' } del zoo_animals [ 'Unicorn' ] del zoo_animals [ 'Sloth' ] del zoo_animals [ 'Bengal Tiger' ] zoo_animals [ 'Rockhopper Penguin' ] = 'Cotton Candy House' print zoo_animals 1 {'Atlantic Puffin': 'Arctic Exhibit', 'Rockhopper Penguin': 'Cotton Candy House'} Sometimes you need to remove something from a list. 1 2 3 backpack = [ 'xylophone' , 'dagger' , 'tent' , 'bread loaf' ] backpack . remove ( 'dagger' ) We can create a dictionary that holds many types of values. extract, sort, remove 1 2 3 4 5 6 7 8 9 10 11 12 inventory = { 'gold' : 500 , 'pouch' : [ 'flint' , 'twine' , 'gemstone' ], # Assigned a new list to 'pouch' key 'backpack' : [ 'xylophone' , 'dagger' , 'bedroll' , 'bread loaf' ] } print inventory # Adding a key 'burlap bag' and assigning a list to it inventory [ 'burlap bag' ] = [ 'apple' , 'small ruby' , 'three-toed sloth' ] print inventory 1 2 {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'gold': 500} {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500} 1 2 3 4 # Sorting the list found under the key 'pouch' inventory [ 'pouch' ] . sort () print inventory 1 {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500} 1 2 3 inventory [ 'pocket' ] = [ 'seashell' , 'strange berry' , 'lint' ] print inventory 1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500} 1 2 3 inventory [ 'backpack' ] . sort () print inventory 1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'dagger', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500} 1 2 3 inventory [ 'backpack' ] . remove ( 'dagger' ) print inventory 1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500} 1 2 3 inventory [ 'gold' ] += 50 print inventory 1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 550}","title":"Lists and Dictionaries"},{"location":"Codecademy Python/#a-day-at-the-supermarket","text":"for loops allow us to iterate through all of the elements in a list from the left-most (or zeroth element) to the right-most element. 1 2 3 4 names = [ \"Adam\" , \"Alex\" , \"Mariah\" , \"Martine\" , \"Columbus\" ] for items in names : print items 1 2 3 4 5 Adam Alex Mariah Martine Columbus You can also use a for loop on a dictionary to loop through its keys. 1 2 3 4 5 6 7 8 9 webster = { \"Aardvark\" : \"A star of a popular children's cartoon show.\" , \"Baa\" : \"The sound a goat makes.\" , \"Carpet\" : \"Goes on the floor.\" , \"Dab\" : \"A small amount.\" } for item in webster : print webster [ item ] 1 2 3 4 A star of a popular children's cartoon show. Goes on the floor. A small amount. The sound a goat makes. While looping, you may want to perform different actions depending on the particular item in the list. 1 2 3 4 5 a = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 ] for item in a : if item % 2 == 0 : print item 1 2 3 4 5 6 7 0 2 4 6 8 10 12 Functions can also take lists as inputs and perform various operations on those lists. 1 2 3 4 5 6 7 8 9 10 11 12 def count_small ( numbers ): total = 0 for n in numbers : if n < 10 : total = total + 1 return total lost = [ 4 , 8 , 15 , 16 , 23 , 42 ] small = count_small ( lost ) print small 1 2 You can loop through strings the same way you loop through lists! 1 2 3 4 5 6 7 8 9 for letter in \"Codecademy\" : print letter word = \"Programming is fun!\" for letter in word : # Only print out the letter i if letter == \"i\" : print letter 1 2 3 4 5 6 7 8 9 10 11 12 C o d e c a d e m y i i You are now the proud owner of your very own Codecademy brand supermarket. For paperwork and accounting purposes, let\u2019s record the total value of your inventory. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 prices = { \"banana\" : 4 , \"apple\" : 2 , \"orange\" : 1.5 , \"pear\" : 3 } stock = { \"banana\" : 6 , \"apple\" : 0 , \"orange\" : 32 , \"pear\" : 15 } total = 0 for item in prices : print item # print key print \"price: %s \" % prices [ item ] # print value print \"stock: %s \" % stock [ item ] print prices [ item ] * stock [ item ] total += prices [ item ] * stock [ item ] print total 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 orange price: 1.5 stock: 32 48.0 pear price: 3 stock: 15 45 banana price: 4 stock: 6 24 apple price: 2 stock: 0 0 117.0 In order for customers to order online, we are going to have to make a consumer interface. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 shopping_list = [ \"banana\" , \"orange\" , \"apple\" ] stock = { \"banana\" : 6 , \"apple\" : 0 , \"orange\" : 32 , \"pear\" : 15 } prices = { \"banana\" : 4 , \"apple\" : 2 , \"orange\" : 1.5 , \"pear\" : 3 } def compute_bill ( food ): total = 0 for item in food : if stock [ item ] > 0 : total += prices [ item ] # you only pick one from the stock! stock [ item ] = stock [ item ] - 1 # the stock goes down by 1 print total return food print compute_bill ( shopping_list ) 1 2 5.5 ['banana', 'orange', 'apple']","title":"A Day at the Supermarket"},{"location":"Codecademy Python/#quiz-5","text":"OK","title":"Quiz 5"},{"location":"Codecademy Python/#project-rock-paper-scissors","text":"In this project, we\u2019ll build Rock-Paper-Scissors! The program should do the following: Prompt the user to select either Rock, Paper, or Scissors Instruct the computer to randomly select either Rock, Paper, or Scissors Compare the user\u2019s choice and the computer\u2019s choice Determine a winner (the user or the computer) Inform the user who the winner is 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 from random import randint from time import sleep options = [ \"R\" , \"P\" , \"S\" ] LOSE = \"You lost!\" # constant, uppercase WIN = \"You win!\" def decide_winner ( user_choice , computer_choice ): print ( \"You picked: \" + str ( user_choice )) print \"Computer selecting...\" sleep ( 1 ) print ( \"Computer picks: \" + str ( computer_choice )) user_choice_index = options . index ( user_choice ) computer_choice_index = options . index ( computer_choice ) # !!!!! if user_choice_index == computer_choice_index : print \"Tie!\" elif user_choice_index == 0 and computer_choice_index == 2 : print WIN elif user_choice_index == 1 and computer_choice_index == 0 : print WIN elif user_choice_index == 2 and computer_choice_index == 1 : print WIN elif user_choice_index > 2 : print \"Invalid choice!!!\" else : print LOSE def play_RPS (): print \"Let's pay Rock-Paper-Scissors\" user_choice = raw_input ( \"Select R for Rock, P for Paper, or S for Scissors: \" ) sleep ( 1 ) user_choice = user_choice . upper () # computer_choice = options[randint(0,2)] # pull out an element from a list, the 1st (0) out of 3 (2) computer_choice = options [ randint ( 0 , len ( options ) - 1 )] # This will ensure that if we ever add more options to the game, we won't have to change this line of code. decide_winner ( user_choice , computer_choice ) play_RPS () 1 2 3 4 5 6 Let's pay Rock-Paper-Scissors Select R for Rock, P for Paper, or S for Scissors: r You picked: R Computer selecting... Computer picks: S You win!","title":"Project Rock, Paper, Scissors"},{"location":"Codecademy Python/#unit-6-student-becomes-the-teacher","text":"","title":"UNIT 6, Student Becomes the Teacher"},{"location":"Codecademy Python/#student-becomes-the-teacher","text":"Make a gradebook for all of your students. First, create 3 dictionaries. Second, add names, marks\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 lloyd = { \"name\" : \"Lloyd\" , \"homework\" : [ 90.0 , 97.0 , 75.0 , 92.0 ], \"quizzes\" : [ 88.0 , 40.0 , 94.0 ], \"tests\" : [ 75.0 , 90.0 ] } alice = { \"name\" : \"Alice\" , \"homework\" : [ 100.0 , 92.0 , 98.0 , 100.0 ], \"quizzes\" : [ 82.0 , 83.0 , 91.0 ], \"tests\" : [ 89.0 , 97.0 ] } tyler = { \"name\" : \"Tyler\" , \"homework\" : [ 0.0 , 87.0 , 75.0 , 22.0 ], \"quizzes\" : [ 0.0 , 75.0 , 78.0 ], \"tests\" : [ 100.0 , 100.0 ] } Third, make a list. 1 2 3 4 5 6 7 students = [ lloyd , alice , tyler ] cases = [ \"homework\" , \"quizzes\" , \"tests\" ] w_calc = [ 0.10 , 0.30 , 0.60 ] all_average = 0.0 Four, print out. 1 2 3 4 5 6 7 8 9 10 11 12 13 print \" \\n Students' Grades\" . upper () print \"\" for student in students : print student [ \"name\" ] . upper () print \"Homework\" print student [ \"homework\" ] print \"Quizzes\" print student [ \"quizzes\" ] print \"Tests\" print student [ \"tests\" ] print \"\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 STUDENTS' GRADES LLOYD Homework [90.0, 97.0, 75.0, 92.0] Quizzes [88.0, 40.0, 94.0] Tests [75.0, 90.0] ALICE Homework [100.0, 92.0, 98.0, 100.0] Quizzes [82.0, 83.0, 91.0] Tests [89.0, 97.0] TYLER Homework [0.0, 87.0, 75.0, 22.0] Quizzes [0.0, 75.0, 78.0] Tests [100.0, 100.0] Compute averages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def average ( numbers ): total = sum ( numbers ) temp = float ( total ) / len ( numbers ) return temp print \"Students' Averages\" . upper () print \"\" for c in cases : cc = c . upper () print cc for student in students : numbers = student [ c ] calc = round ( average ( numbers ), 1 ) print student [ \"name\" ] print calc print \"\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 STUDENTS' AVERAGES HOMEWORK Lloyd 88.5 Alice 97.5 Tyler 46.0 QUIZZES Lloyd 74.0 Alice 85.3 Tyler 51.0 TESTS Lloyd 82.5 Alice 93.0 Tyler 100.0 Compute weighted averages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def w_average ( marks ): #w_calc = [0.10, 0.30, 0.60] s_calc = 0 w = 0 while w < len ( w_calc ): s_calc += w_calc [ w ] * marks [ w ] w += 1 return s_calc def get_letter_grade ( score ): if score >= 90 : return \"A\" elif score >= 80 : return \"B\" elif score >= 70 : return \"C\" elif score >= 60 : return \"D\" else : return \"F\" def get_class_average ( ind ): class_total = round ( ind / len ( students ), 1 ) return class_total print \"Students' Weighted Average\" . upper () print \" Ponderation [Homeworks, Quizzes, Tests]: [\" + str ( float ( w_calc [ 0 ]) * 100 ) + \", \" + str ( float ( w_calc [ 1 ]) * 100 ) + \", \" + str ( float ( w_calc [ 2 ]) * 100 ) + \"]\" print \"\" for student in students : print ( student [ \"name\" ] + \"'s marks are:\" ) . upper () l_calc = [] for c in cases : numbers = student [ c ] calc = round ( average ( numbers ), 1 ) l_calc . append ( calc ) print l_calc print ( \"For a weighted average of:\" ) ind_average = round ( w_average ( l_calc ), 1 ) print ind_average print ( \"Standing for a:\" ) print get_letter_grade ( ind_average ) all_average += ind_average print \"\" print ( \"Finally, The class average is:\" ) . upper () print get_class_average ( all_average ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 STUDENTS' WEIGHTED AVERAGE Ponderation [Homeworks, Quizzes, Tests]: [10.0, 30.0, 60.0] LLOYD'S MARKS ARE: [88.5, 74.0, 82.5] For a weighted average of: 80.5 Standing for a: B ALICE'S MARKS ARE: [97.5, 85.3, 93.0] For a weighted average of: 91.1 Standing for a: A TYLER'S MARKS ARE: [46.0, 51.0, 100.0] For a weighted average of: 79.9 Standing for a: C FINALLY, THE CLASS AVERAGE IS: 83.8","title":"Student Becomes the Teacher"},{"location":"Codecademy Python/#unit-7-lists-and-functions","text":"","title":"UNIT 7, Lists and Functions"},{"location":"Codecademy Python/#lists-and-functions","text":"What you can do with a list: extract, add, append, remove, pop out, delete. 1 2 3 4 5 6 7 8 9 10 11 12 13 n = [ 1 , 3 , 5 ] print n [ 1 ] n [ 1 ] = n [ 1 ] * 5 print n # Add elements n . append ( 4 ) print n # Remove elements n . pop ( 0 ) print n 1 2 3 4 3 [1, 15, 5] [1, 15, 5, 4] [15, 5, 4] What you can do with functions. Multiply, divide. 1 2 3 4 5 6 7 8 number = 5 def my_function ( x ): return x * 3 # Print my_function(5) print my_function ( number ) 1 15 Add, substract. 1 2 3 4 5 6 7 8 m = 5 n = 13 def add_function ( x , y ): return x + y print add_function ( m , n ) 1 18 Concatenate. 1 2 3 4 5 6 7 n = \"Hello\" def string_function ( s ): return s + \" world\" print string_function ( n ) 1 Hello world Show all. 1 2 3 4 5 6 7 n = [ 3 , 5 , 7 ] def list_function ( x ): return x print list_function ( n ) 1 [3, 5, 7] Show some. 1 2 3 4 5 6 7 def list_function ( x ): return x [ 1 ] n = [ 3 , 5 , 7 ] print list_function ( n ) 1 5 Extract and modify. 1 2 3 4 5 6 7 8 def list_function ( x ): x [ 1 ] = x [ 1 ] + 3 return x n = [ 3 , 5 , 7 ] print list_function ( n ) 1 [3, 8, 7] Add elements. 1 2 3 4 5 6 7 8 n = [ 3 , 5 , 7 ] def list_extender ( lst ): lst . append ( 9 ) return lst print list_extender ( n ) 1 [3, 5, 7, 9] Remove elements. 1 2 3 4 5 6 7 8 n = [ 3 , 5 , 7 ] def list_shorter ( lst ): lst . remove ( 5 ) return lst print list_shorter ( n ) 1 [3, 7] Pop out the 2 nd element. 1 2 3 4 5 6 7 8 n = [ 3 , 5 , 7 ] def list_extract ( lst ): lst . pop ( 1 ) return lst print list_extract ( n ) 1 [3, 7] Loop through each element. 1 2 3 4 5 6 7 8 n = [ 3 , 5 , 7 ] def print_list ( x ): for i in range ( 0 , len ( x )): print x [ i ] print print_list ( n ) 1 2 3 4 3 5 7 None Loop, transform each element. 1 2 3 4 5 6 7 8 9 n = [ 3 , 5 , 7 ] def double_list ( x ): for i in range ( 0 , len ( x )): x [ i ] = x [ i ] * 2 return x print double_list ( n ) 1 [6, 10, 14] Loop, transform each element. 1 2 3 4 5 6 7 8 9 10 11 def my_function ( x ): for i in range ( 0 , len ( x )): x [ i ] = x [ i ] * 2 return x print my_function ( range ( 3 )) print range ( 6 ) # => [0,1,2,3,4,5] print range ( 1 , 6 ) # => [1,2,3,4,5] print range ( 1 , 6 , 3 ) # => [1,4] 1 2 3 4 [0, 2, 4] [0, 1, 2, 3, 4, 5] [1, 2, 3, 4, 5] [1, 4] Loop, fill the variable with += (or -= , *= , /= ) 1 2 3 4 5 6 7 8 n = [ 3 , 5 , 7 ] def total ( numbers ): result = 0 # empty variable for item in numbers : result += item return result Empty variable, loop, fill the variable. 1 2 3 4 5 6 7 8 9 10 n = [ \"Michael\" , \"Lieberman\" ] def join_strings ( words ): result = \"\" for item in words : result = result + item return result print join_strings ( n ) 1 MichaelLieberman Join (not add up) the list. You want this to print [1, 2, 3, 4, 5, 6] . 1 2 3 4 5 6 7 m = [ 1 , 2 , 3 ] n = [ 4 , 5 , 6 ] def join_lists ( x , y ): return x + y print join_lists ( m , n ) 1 [1, 2, 3, 4, 5, 6] List of lists. Several loops. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 n = [ [ 1 , 2 , 3 ], [ 4 , 5 , 6 , 7 , 8 , 9 ] ] def flatten ( lists ): results = [] for lst in lists : for num in range ( len ( lst )): results . append ( lst [ num ]) return results print flatten ( n ) 1 [1, 2, 3, 4, 5, 6, 7, 8, 9] Use range(len(lst)) . range, length 1 print range ( 6 ) # => [0,1,2,3,4,5] 1 [0, 1, 2, 3, 4, 5]","title":"Lists and Functions"},{"location":"Codecademy Python/#battleship","text":"This first script is incomplete (work in progress). The next script is functional. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 from random import randint board = [] for x in range ( 5 ): # 0, 1, 2, 3, 4 (stop before 5) board . append ([ \"O\" ] * 5 ) # print 5 rows of 5 'O' def print_board ( board ): for row in board : # print row # print ['O', 'O', 'O', 'O', 'O'] on 5 rows print \" \" . join ( row ) # print O O O O O print \"Let's play Battleship!\" def random_row ( board ): # hide the ship at r-c return randint ( 0 , len ( board ) - 1 ) def random_col ( board ): return randint ( 0 , len ( board ) - 1 ) print random_row ( board ) print random_col ( board ) guess_row = int ( raw_input ( \"Guess Row (1 to 5):\" )) # involve the player guess_col = int ( raw_input ( \"Guess Col (1 to 5):\" )) print ship_col # print ship position print ship_row if ( guess_row == ship_row ) and ( guess_col == ship_col ): print \"Congratulations! You sank my battleship!\" guess_row = guess_row - 1 guess_col = guess_col - 1 board [ guess_row ][ guess_col ] = \"S\" print print_board ( board ) else : #print \"You missed my battleship!\" if guess_row not in range ( 5 ) or guess_row == 0 or guess_col not in range ( 5 ) or guess_col == 0 : # condition for wrong entries print \"Oops, that's not even in the ocean.\" elif board [ guess_row ][ guess_col ] == \"X\" : print \"You guessed that one already.\" else : print \"You missed my battleship!\" guess_row = guess_row - 1 # transform the numbers, 1 becomes 0... guess_col = guess_col - 1 board [ guess_row ][ guess_col ] = \"X\" # replace the 'O' print print_board ( board ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Let's play Battleship! 4 0 Guess Row (1 to 5):1 Guess Col (1 to 5):2 --------------------------------------------------------------------------- NameError Traceback (most recent call last) &lt;ipython-input-87-efd1e0de637a&gt; in &lt;module&gt;() 24 guess_col = int(raw_input(\"Guess Col (1 to 5):\")) 25 ---&gt; 26 print ship_col # print ship position 27 print ship_row 28 NameError: name 'ship_col' is not defined","title":"Battleship!"},{"location":"Codecademy Python/#battleship-final","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 from random import randint board = [] for x in range ( 5 ): board . append ([ \"O\" ] * 5 ) def print_board ( board ): for row in board : print \" \" . join ( row ) print \" \\n Let's play Battleship! You have 4 strikes to sink by ship. \\n \" print_board ( board ) def random_row ( board ): return randint ( 0 , len ( board ) - 1 ) def random_col ( board ): return randint ( 0 , len ( board ) - 1 ) ship_row = random_row ( board ) ship_col = random_col ( board ) #ship_row = 1 to test and fix to (1,1) #ship_col = 1 for turn in range ( 5 ): turn += 1 if turn == 5 : print \" \\n Game Over\" print \"The ship was here => I \\n \" board [ ship_row - 1 ][ ship_col - 1 ] = \"I\" print_board ( board ) break else : print \" \\n Turn\" , turn guess_row = int ( raw_input ( \"Guess Row (1 to 5): \" )) guess_col = int ( raw_input ( \"Guess Col (1 to 5): \" )) if ( guess_row == ship_row ) and ( guess_col == ship_col ): print \" \\n Congratulations! You sank my battleship! \\n \" guess_row = guess_row - 1 guess_col = guess_col - 1 board [ guess_row ][ guess_col ] = \"S\" print_board ( board ) print \" \\n Game Over\" break elif ( guess_row < 1 or guess_row > 5 ) or ( guess_col < 1 or guess_col > 5 ): print \" \\n Oops, that's not even in the ocean. \\n \" elif board [ guess_row - 1 ][ guess_col - 1 ] == \"X\" : print \" \\n You guessed that one already. \\n \" print_board ( board ) else : print \" \\n You missed my battleship! \\n \" board [ guess_row - 1 ][ guess_col - 1 ] = \"X\" print_board ( board ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 Let's play Battleship! You have 4 strikes to sink by ship. O O O O O O O O O O O O O O O O O O O O O O O O O Turn 1 Guess Row (1 to 5): 1 Guess Col (1 to 5): 2 You missed my battleship! O X O O O O O O O O O O O O O O O O O O O O O O O Turn 2 Guess Row (1 to 5): 2 Guess Col (1 to 5): 2 You missed my battleship! O X O O O O X O O O O O O O O O O O O O O O O O O Turn 3 Guess Row (1 to 5): 3 Guess Col (1 to 5): 5 You missed my battleship! O X O O O O X O O O O O O O X O O O O O O O O O O Turn 4 Guess Row (1 to 5): 4 Guess Col (1 to 5): 3 Congratulations! You sank my battleship! O X O O O O X O O O O O O O X O O S O O O O O O O Game Over Joining. join, split 1 2 3 4 letters = [ 'a' , 'b' , 'c' , 'd' ] print \" \" . join ( letters ) # a b c d print \"---\" . join ( letters ) # #---b---c---d 1 2 a b c d a---b---c---d Randomizing. random, rand 1 2 3 4 from random import randint coin = randint ( 0 , 1 ) # randint(low, high) dice = randint ( 1 , 6 )","title":"Battleship FINAL!"},{"location":"Codecademy Python/#quiz-7","text":"Takeaway. 1 2 3 4 5 6 7 my_list = [ 1 , 3 , 5 , 7 ] my_list . pop ( 3 ) # remove the 4th my_list . remove ( 3 ) # remove the '3' range ( 0 , len ( my_list )) # every list item range ( 0 , len ( my_list ), 2 ) # every other list item 1 [0]","title":"Quiz 7"},{"location":"Codecademy Python/#unit-8-loops","text":"","title":"UNIT 8, Loops"},{"location":"Codecademy Python/#loops","text":"A while loop is a sort of if . 1 2 3 4 count = 0 if count <= 9 : # print \"Hello, I am an if statement and count is\" , count 1 Hello, I am an if statement and count is 0 1 2 3 while count <= 9 : # similar to if: executes as long as the condition is true print \"Hello, I am a while and count is\" , count count += 1 1 2 3 4 5 6 7 8 9 10 Hello, I am a while and count is 0 Hello, I am a while and count is 1 Hello, I am a while and count is 2 Hello, I am a while and count is 3 Hello, I am a while and count is 4 Hello, I am a while and count is 5 Hello, I am a while and count is 6 Hello, I am a while and count is 7 Hello, I am a while and count is 8 Hello, I am a while and count is 9 A while loop allows control (checkpoint, a switch, on and off). 1 2 3 4 5 loop_condition = True while loop_condition : # On print \"I am a loop\" loop_condition = False # Off 1 I am a loop 1 2 3 4 5 6 num = 1 while num <= 10 : # the condition print num ** 2 num += num ** ( 1 / 2 ) print num 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 4 3 9 4 16 5 25 6 36 7 49 8 64 9 81 10 100 11 A common application of a while loop is to check user input to see if it is valid. 1 2 3 4 choice = raw_input ( 'Enjoying the course? (y/n)' ) while choice != \"y\" and choice != \"n\" : choice = raw_input ( \"Sorry, I didn't catch that. Enter again (case sensitive): \" ) 1 Enjoying the course? (y/n)y break means \u201cexit the current loop\u201d. Opposite to break is continue . 1 2 3 4 5 6 7 count = 0 while True : print count count += 1 if count >= 10 : break 1 2 3 4 5 6 7 8 9 10 0 1 2 3 4 5 6 7 8 9 while / else are like if / else ; else is executed when while is false. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import random print \"Lucky Numbers! 3 numbers will be generated.\" print \"If one of them is a '5', you lose!\" count = 0 while count < 3 : num = random . randint ( 1 , 6 ) print num if num == 5 : print \"Sorry, you lose!\" break count += 1 else : print \"You win!\" 1 2 3 4 Lucky Numbers! 3 numbers will be generated. If one of them is a '5', you lose! 5 Sorry, you lose! Guess game. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from random import randint # Generates a number from 1 through 10 inclusive random_number = randint ( 1 , 10 ) # print random_number guesses_left = 3 print \"Guess right!\" while guesses_left > 0 : print \"You have \" + str ( guesses_left ) + \" attempts.\" guess = raw_input ( \"Guess a number from 1 to 10: \" ) if int ( guess ) == random_number : print \"You win!\" break elif guesses_left == 1 : print \"You lose.\" break else : guesses_left -= 1 print \"Try again.\" 1 2 3 4 5 6 7 8 9 10 Guess right! You have 3 attempts. Guess a number from 1 to 10: 2 Try again. You have 2 attempts. Guess a number from 1 to 10: 6 Try again. You have 1 attempts. Guess a number from 1 to 10: 9 You lose. if loop. 1 2 3 4 print \"Counting...\" for i in range ( 20 ): print i 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Counting... 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Create a list. 1 2 3 4 5 6 7 8 9 hobbies = [] print hobbies for i in range ( 3 ): hobby = raw_input ( \"Enter a hobby: \" ) hobbies . append ( hobby ) print hobbies 1 2 3 4 5 [] Enter a hobby: fishing Enter a hobby: skiing Enter a hobby: knitting!!! ['fishing', 'skiing', 'knitting!!!'] Run though a string, but each character will be spaced out. 1 2 3 4 5 6 7 8 9 thing = \"spam!\" for c in thing : print c word = \"eggs!\" for char in word : print char , # , print on the same line 1 2 3 4 5 6 s p a m ! e g g s ! Replace a character in a string. , print on the same line. 1 2 3 4 5 6 7 phrase = \"A bird in the hand...\" for char in phrase : if char == \"A\" or char == \"a\" : print \"X\" , else : print char , 1 X b i r d i n t h e h X n d . . . Run though a list. 1 2 3 4 5 6 7 8 9 numbers = [ 7 , 9 , 12 , 54 , 99 ] print \"This list contains: \" for num in numbers : print num for numm in numbers : print numm ** 2 , 1 2 3 4 5 6 7 This list contains: 7 9 12 54 99 49 81 144 2916 9801 Run though a dictionary. 1 2 3 4 5 6 7 d = { 'a' : 'apple' , 'b' : 'berry' , 'c' : 'cherry' } for key in d : # key:value print key + \" \" + d [ key ] print key # key print d [ key ] # value 1 2 3 4 5 6 7 8 9 a apple a apple c cherry c cherry b berry b berry Enumerate a list (numbers and members). 1 2 3 4 5 choices = [ 'pizza' , 'pasta' , 'salad' , 'nachos' ] print 'Your choices are:' for index , item in enumerate ( choices ): print index + 1 , item 1 2 3 4 5 Your choices are: 1 pizza 2 pasta 3 salad 4 nachos Multiple lists. 1 2 3 4 5 6 7 8 9 10 list_a = [ 3 , 9 , 17 , 15 , 19 ] list_b = [ 2 , 4 , 8 , 10 , 30 , 40 , 50 , 60 , 70 , 80 , 90 ] for a , b in zip ( list_a , list_b ): if a > b : print a elif a == b : print \"-\" else : print b 1 2 3 4 5 3 9 17 15 30 List with concatenation. 1 2 3 4 5 6 7 8 9 10 11 fruits = [ 'banana' , 'apple' , 'orange' , 'tomata' , 'pear' , 'grape' ] print 'You have...' for f in fruits : if f == 'tomato' : print 'A tomato is not a fruit!' # (It actually is.) break print ', a' , f , else : print '; A fine selection of fruits!' 1 2 You have... , a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits! Remove the break . 1 2 3 4 5 6 7 8 9 10 11 fruits = [ 'banana' , 'apple' , 'orange' , 'tomata' , 'pear' , 'grape' ] print 'You have...' for f in fruits : if f == 'tomato' : print 'A tomato is not a fruit!' # (It actually is.) else : print ', a' , f , else : print '; A fine selection of fruits!' 1 2 You have... , a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!","title":"Loops"},{"location":"Codecademy Python/#practice-makes-perfect","text":"Is it even? 1 2 3 4 5 6 7 8 9 def is_even ( x ): if x % 2 == 0 : return True # if x is even else : return False print is_even ( 2 ) print is_even ( 3 ) 1 2 True False Or not? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 n = - 1.0 print ( n - round ( n , 0 )) def is_int ( x ): if ( x - round ( x , 0 )) == 0 : return True else : return False print is_int ( 7.0 ) print is_int ( 7.5 ) print is_int ( - 1 ) 1 2 3 4 0.0 True False True Summing the digits of a number. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def digit_sum ( n ): liss = [] n = str ( n ) # from integers to characters for char in n : liss . append ( char ) # populate liss total = 0 for i in range ( len ( liss )): liss [ i ] = int ( liss [ i ]) # back to integers total += liss [ i ] # sum them up return total print digit_sum ( 1234 ) print digit_sum ( 8888 ) 1 2 10 32 What is the factorial? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def factorial ( x ): if x == 1 or x == 0 : return 1 else : result = 1 while x > 0 : # say x = 4 # 1 * 4 = 4 # 4 * 3 = 12 # 12 * 2 = 24 # 24 * 1 = 24 result *= x x -= 1 return result print factorial ( 1 ) print factorial ( 2 ) print factorial ( 3 ) print factorial ( 4 ) print factorial ( 5 ) 1 2 3 4 5 1 2 6 24 120 Is it a prime number? (Check the web for the list of prime numbers.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def is_prime ( x ): if ( x > 1 ): # to catch greater than 1 for n in range ( 2 ,( x - 1 )): # range 2 - 1 less than x if x % n == 0 : print x return False else : # ro catch 0 and 1 print x return False print x # the input return True # the output, will be printed when the function will be called for ii in range ( 24 ): print is_prime ( ii ), 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 0 False 1 False 2 True 3 True 4 False 5 True 6 False 7 True 8 False 9 False 10 False 11 True 12 False 13 True 14 False 15 False 16 False 17 True 18 False 19 True 20 False 21 False 22 False 23 True Reverse a string. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def reverse ( text ): count = len ( text ) - 1 # start at the end print text print count # 3 letters will be 0,1,2,3 or 3 reversed_text = \"\" # empty string print reversed_text while count >= 0 : reversed_text += text [ count ] # adding the right-most letter count -= 1 # decrement count return reversed_text print reverse ( \"make\" ) print reverse ( \"codeacademy\" ) 1 2 3 4 5 6 7 8 make 3 ekam codeacademy 10 ymedacaedoc Remove vowels in apunctuation word (could work for punctuation too). 1 2 3 4 5 6 7 8 9 10 def anti_vowel ( text ): vowels = \"aAeEiIoOuU\" for char in text : for vow in vowels : if vow == char : text = text . replace ( char , \"\" ) return text print anti_vowel ( \"allo\" ) 1 ll Remove all but punctuation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def anti_vowel ( text ): text = text . lower () vowels = \"abcdefghijklmnopqrstuvwxyz1234567890$-\" for char in text : for vow in vowels : if vow == char : text = text . replace ( char , \"\" ) for char in text : if char == \" \" : text = text . replace ( char , \"\" ) return text print anti_vowel ( \"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\\" ID \\\" associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\" ) 1 .?,,.,.......\"\"... Scrabble scoring. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 score = { \"a\" : 1 , \"c\" : 3 , \"b\" : 3 , \"e\" : 1 , \"d\" : 2 , \"g\" : 2 , \"f\" : 4 , \"i\" : 1 , \"h\" : 4 , \"k\" : 5 , \"j\" : 8 , \"m\" : 3 , \"l\" : 1 , \"o\" : 1 , \"n\" : 1 , \"q\" : 10 , \"p\" : 3 , \"s\" : 1 , \"r\" : 1 , \"u\" : 1 , \"t\" : 1 , \"w\" : 4 , \"v\" : 4 , \"y\" : 4 , \"x\" : 8 , \"z\" : 10 } def scrabble_score ( word ): word2 = word . lower () print word2 + \":\" , points = 0 for letter in word2 : if letter == str ( letter ): points += score [ letter ] return points print scrabble_score ( \"ab\" ) print scrabble_score ( \"allo\" ) print scrabble_score ( \"xylophone\" ) print scrabble_score ( \"coding\" ) print scrabble_score ( \"yak\" ) 1 2 3 4 5 ab : 4 allo : 4 xylophone : 24 coding : 10 yak : 10 Censor a word in a string. length 1 2 3 4 5 6 7 8 9 def censor ( text , word_to_censor ): text = text . split ( ' ' ) for word in range ( 0 , len ( text )): if text [ word ] == word_to_censor : text [ word ] = \"*\" * len ( text [ word ]) * 2 return \" \" . join ( text ) # join the w separated by spaces print censor ( \"it is two days\" , \"two\" ) 1 it is ****** days Count items is a list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def count ( sequence , item ): sequence = list ( sequence ) count = 0 for i in sequence : if i == item : count += 1 return count list2 = [ 1 , 3 , 1 , 5 ] list3 = [ \"a\" , \"b\" , \"c\" , \"a\" ] list4 = ( \"a\" , \"b\" , \"c\" , \"a\" ) list5 = ( 1 , 2 , 3 , 1 , 1 ) print count ( list2 , 1 ) print count ( list3 , 1 ) print count ( list4 , 1 ) print count ( list5 , 1 ) 1 2 3 4 2 0 0 3 Extract even numbers from a list. 1 2 3 4 5 6 7 8 9 10 11 12 13 def purify ( listing ): listing = list ( listing ) listing2 = [] for l in listing : if l % 2 == 0 : listing2 . append ( l ) return listing2 case1 = [ 1 , 2 , 3 , 4 ] print purify ( case1 ) 1 [2, 4] Compute a product. 1 2 3 4 5 6 7 8 9 10 11 12 13 def product ( listing ): print listing result = 1 for l in listing : result = result * l return result case1 = [ 1 , 2 , 3 ] case2 = ( 5 , 10 , 15 ) print product ( case1 ) print product ( case2 ) 1 2 3 4 [1, 2, 3] 6 (5, 10, 15) 750 Remove duplicates from a list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def remove_duplicates ( listing ): print listing listing = list ( listing ) listing2 = [] for l in listing : if l not in listing2 : listing2 . append ( l ) return listing2 case1 = [ 1 , 2 , 3 , 3 , 4 ] case2 = ( 1 , 6 , 1 , 4 , 2 , 8 , 2 , 1 , 6 , 7 , 4 , 6 ) print remove_duplicates ( case1 ) print remove_duplicates ( case2 ) 1 2 3 4 [1, 2, 3, 3, 4] [1, 2, 3, 4] (1, 6, 1, 4, 2, 8, 2, 1, 6, 7, 4, 6) [1, 6, 4, 2, 8, 7] Extract the median from an unordered list of numbers. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def median ( listing ): median_no = 0 median_low = 0 median_high = 0 low = 0 high = 0 print listing listing = sorted ( listing ) if len ( listing ) % 2 == 0 : low = len ( listing ) / 2 - 1 # 6/2 = 3 -1 = 2 or the 3rd high = len ( listing ) / 2 # 6/2 = 3 or the 4th median_low = float ( listing [ low ]) # extract the 3rd of 6 median_high = float ( listing [ high ]) # the 4th of 6 median_no = ( median_low + median_high ) / 2 else : median_no = listing [( len ( listing )) / 2 ] # on 5, the / will yield 2.5, but coerced to the integer 2 or the 3rd return median_no case1 = ( 7 , 12 , 3 , 1 , 6 ) case2 = ( 7 , 12 , 3 , 1 , 6 , 17 ) print median ( case1 ) print median ( case2 ) 1 2 3 4 (7, 12, 3, 1, 6) 6 (7, 12, 3, 1, 6, 17) 6.5","title":"Practice Makes Perfect"},{"location":"Codecademy Python/#quiz-8","text":"Takeaway: built-in functions. 1 2 3 4 5 6 7 8 9 10 x = [ 1 , 2 , 3 ] y = [ 4 , 5 , 6 ] zipped = zip ( x , y ) # zipped = [(1, 4), (2, 5), (3, 6)] x2 , y2 = zip ( * zipped ) x == list ( x2 ) and y == list ( y2 ) # True 1 True 1 2 3 4 5 6 7 seasons = [ 'Spring' , 'Summer' , 'Fall' , 'Winter' ] list ( enumerate ( seasons )) # [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')] list ( enumerate ( seasons , start = 1 )) # [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')] 1 [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]","title":"Quiz 8"},{"location":"Codecademy Python/#project-command-line-calendar","text":"In this project, we\u2019ll build a basic calendar that the user will be able to interact with from the command line. The user should be able to choose to: View the calendar Add an event to the calendar Update an existing event Delete an existing event 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 from time import sleep , strftime his_name = raw_input ( \"What is your first name? \" ) his_name = str ( his_name ) # calendar will store the dates as keys and the events as values calendar = {} def welcome (): print ( \"Welcome \" + his_name + \".\" ) print ( \"Calendar starting...\" ) sleep ( 0.5 ) print ( \"Today is: \" + strftime ( \"%A, %B %d , %Y\" )) print ( \"It is currently: \" + strftime ( \"%H:%M:%S\" )) sleep ( 0.5 ) def start_calendar (): welcome () print ( \"What would you like to do?\" ) print ( calendar ) start = True while start : user_choice = raw_input ( \"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \" ) . upper () if user_choice == 'V' : # V if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty\" ) else : print ( calendar ) elif user_choice == 'U' : # U if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty\" ) else : print ( calendar ) date = raw_input ( \"What date? \" ) update = raw_input ( \"Enter the update: \" ) # could be more control here... calendar [ date ] = update # without checking if the date is valid or if it already exists (which could override things)! print ( \"Successful!\" ) print ( calendar ) elif user_choice == 'A' : # A event = raw_input ( \"Enter event: \" ) date = raw_input ( \"Enter date (MM/DD/YYYY): \" ) if ( len ( date ) > 10 or int ( date [ 6 :]) < int ( strftime ( \"%Y\" ))): # could be more control... print ( \"Invalid date format.\" ) try_again = raw_input ( \"Try Again? 'Y' for Yes, 'N' for No: \" ) . upper () if try_again == 'Y' : continue #! break, continue, start is still True else : start == False else : calendar [ date ] = event # without checking if the date is valid or if it already exists (which could override things)! print ( \"Successful!\" ) print ( calendar ) elif user_choice == 'D' : # D if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty.\" ) else : print ( calendar ) event = raw_input ( \"What event? \" ) # could be more option like: What date? for date in calendar . keys (): if event == calendar [ date ]: del calendar [ date ] # del a[], [1], [\"a\"], [1:3], [5:], [:9], etc. print ( \"Deleted.\" ) print ( calendar ) else : print ( \"Incorrect.\" ) elif user_choice == 'X' : # X start = False else : print ( \"Invalid command.\" ) break start_calendar () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 What is your first name? Al Welcome Al. Calendar starting... Today is: Thursday, October 20, 2016 It is currently: 13:42:02 What would you like to do? {} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? a Enter event: Buy stuff Enter date (MM/DD/YYYY): 10/21/2016 Successful! {'10/21/2016': 'Buy stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A Enter event: Sell stuff Enter date (MM/DD/YYYY): 11/01/2016 Successful! {'10/21/2016': 'Buy stuff', '11/01/2016': 'Sell stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A Enter event: Rent stuff Enter date (MM/DD/YYYY): 01/01/2018 Successful! {'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v {'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? u {'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'} What date? 01/01/2018 Enter the update: Lease stuff Successful! {'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v {'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'} Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d {'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'} What event? Buy stuff Deleted. {'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'} Incorrect. Incorrect. Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d {'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'} What event? 10/21/2016 Incorrect. Incorrect. Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? x","title":"Project Command Line Calendar"},{"location":"Codecademy Python/#unit-9-exam-statistics","text":"","title":"UNIT 9, Exam Statistics"},{"location":"Codecademy Python/#exam-statistics","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 grades = [ 100 , 100 , 90 , 40 , 80 , 100 , 85 , 70 , 90 , 65 , 90 , 85 , 50.5 ] print \"Grades:\" , grades def print_grades ( grades ): # list the grades for i in grades : print i , # , keep the list on the same line print_grades ( grades ) print \"Let's compute some stats!\" def grades_sum ( scores ): # sum up the grades total = 0 for s in scores : total += s return total print grades_sum ( grades ) def grades_average ( grades ): # average the grades sum_of_grades = grades_sum ( grades ) average = sum_of_grades / float ( len ( grades )) return average print grades_average ( grades ) print \"Time to conquer the variance!\" def grades_variance ( scores ): # compute the variance average = grades_average ( scores ) totalvariance = 0 for score in scores : totalvariance += ( score - average ) ** 2 tvariance = totalvariance / float ( len ( scores )) return tvariance variance = grades_variance ( grades ) print variance def grades_std_deviation ( variance ): # compute standard deviation stddevisation = variance ** 0.5 return stddevisation print grades_std_deviation ( variance ) 1 2 3 4 5 6 7 Grades: [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5] 100 100 90 40 80 100 85 70 90 65 90 85 50.5 Let's compute some stats! 1045.5 80.4230769231 Time to conquer the variance! 334.071005917 18.2776094147","title":"Exam Statistics"},{"location":"Codecademy Python/#unit-10-advanced-topics-in-python","text":"","title":"UNIT 10, Advanced Topics in Python"},{"location":"Codecademy Python/#advanced-topics-in-python","text":"Iterate through a dictionary. 1 2 3 4 5 6 7 8 9 10 11 12 my_dict = { \"CodeCademy\" : \"Python\" , \"DataCamp\" : \"R\" , \"Code School\" : \"SQL\" } print my_dict . items () print my_dict . keys () print my_dict . values () for key in my_dict : print key , my_dict [ key ] # key and value 1 2 3 4 5 6 [('CodeCademy', 'Python'), ('Code School', 'SQL'), ('DataCamp', 'R')] ['CodeCademy', 'Code School', 'DataCamp'] ['Python', 'SQL', 'R'] CodeCademy Python Code School SQL DataCamp R Build a list. 1 2 3 evens_to_50 = [ i for i in range ( 51 ) if i % 2 == 0 ] print evens_to_50 1 [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50] Build lists with conditions. 1 2 3 doubles_by_3 = [ x * 2 for x in range ( 1 , 6 ) if ( x * 2 ) % 3 == 0 ] print doubles_by_3 1 [6] 1 2 3 even_squares = [ x ** 2 for x in range ( 2 , 11 ) if ( x ** 2 ) % 2 == 0 ] print even_squares 1 [4, 16, 36, 64, 100] 1 2 3 cubes_by_four = [ x ** 3 for x in range ( 1 , 11 ) if x ** 3 % 4 == 0 ] print cubes_by_four 1 [8, 64, 216, 512, 1000] Lists slicing. extract, list 1 2 3 l = [ i ** 2 for i in range ( 1 , 11 )] # Should be [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] print l [ 2 : 9 : 2 ] # [start:end:stride] 1 [9, 25, 49, 81] 1 2 3 my_list = range ( 1 , 11 ) # list of numbers 1 - 10 print my_list [:: 2 ] 1 [1, 3, 5, 7, 9] 1 2 3 4 5 my_list = range ( 1 , 11 ) backwards = my_list [:: - 1 ] print backwards 1 [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] 1 2 3 4 5 to_one_hundred = range ( 101 ) backwards_by_tens = to_one_hundred [:: - 10 ] print backwards_by_tens 1 [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0] 1 2 3 4 5 6 7 8 9 10 11 to_21 = range ( 1 , 22 ) print to_21 odds = range ( 1 , 22 , 2 ) print odds middle_third = to_21 [ 7 : 14 : 1 ] print middle_third 1 2 3 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21] [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21] [8, 9, 10, 11, 12, 13, 14] Lambda function. 1 2 3 my_list = range ( 16 ) print filter ( lambda x : x % 3 == 0 , my_list ) 1 [0, 3, 6, 9, 12, 15] 1 2 3 languages = [ \"HTML\" , \"JavaScript\" , \"Python\" , \"Ruby\" ] print filter ( lambda x : x == \"Python\" , languages ) 1 ['Python'] 1 2 3 squares = [ x ** 2 for x in range ( 1 , 11 )] print filter ( lambda x : ( x >= 30 and x <= 70 ), squares ) 1 [36, 49, 64] Iterating over dictionaries. 1 2 3 4 5 6 7 movies = { \"Monty Python and the Holy Grail\" : \"Great\" , \"Monty Python's Life of Brian\" : \"Good\" , \"Monty Python's Meaning of Life\" : \"Okay\" } print movies . items () 1 [(\"Monty Python's Life of Brian\", 'Good'), (\"Monty Python's Meaning of Life\", 'Okay'), ('Monty Python and the Holy Grail', 'Great')] Comprehensions. 1 2 3 threes_and_fives = [ x for x in range ( 1 , 16 ) if ( x % 3 == 0 or x % 5 == 0 )] print threes_and_fives 1 [3, 5, 6, 9, 10, 12, 15] Slicing again. extract 1 2 3 4 5 garbled = \"!XeXgXaXsXsXeXmX XtXeXrXcXeXsX XeXhXtX XmXaX XI\" message = garbled [:: - 2 ] print message 1 I am the secret message! 1 2 3 4 5 garbled = \"IXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX\" message = filter ( lambda x : x != \"X\" , garbled ) print message 1 I am another secret message!","title":"Advanced Topics in Python"},{"location":"Codecademy Python/#introduction-to-bitwise-operators","text":"Operators. 1 2 3 4 5 6 print 5 >> 4 # Right Shift print 5 << 1 # Left Shift print 8 & 5 # Bitwise AND print 9 | 4 # Bitwise OR print 12 ^ 42 # Bitwise XOR print </ sub > 88 # Bitwise NOT 1 2 3 4 5 6 0 10 0 13 38 -89 Base 2 or binary. 1 2 3 4 5 6 7 8 9 10 print 0b1 , # 1 print 0b10 , # 2 print 0b11 , # 3 print 0b100 , # 4 print 0b101 , # 5 print 0b110 , # 6 print 0b111 # 7 print \"******\" print 0b1 + 0b11 # 1 + 3 = 4 print 0b11 * 0b11 # 3 * 3 = 90 1 2 3 4 1 2 3 4 5 6 7 ****** 4 9 1 2 3 4 5 6 7 8 9 10 11 12 one = 0b1 two = 0b10 three = 0b11 four = 0b100 five = 0b101 six = 0b110 seven = 0b111 eight = 0b1000 nine = 0b1001 ten = 0b1010 eleven = 0b1011 twelve = 0b1100 Decimal to binary. 1 2 3 4 5 print bin ( 1 ) print bin ( 2 ) print bin ( 3 ) print bin ( 4 ) print bin ( 5 ) 1 2 3 4 5 0b1 0b10 0b11 0b100 0b101 Binary to decimal. 1 2 3 4 5 print int ( \"1\" , 2 ) print int ( \"10\" , 2 ) print int ( \"111\" , 2 ) print int ( \"0b100\" , 2 ) print int ( bin ( 5 ), 2 ) 1 2 3 4 5 1 2 7 4 5 Print out the decimal equivalent of the binary 11001001. 1 print int ( \"11001001\" , 2 ) 1 201 Left Bit Shift ( << ) 1 2 0b000001 << 2 == 0b000100 (1 << 2 = 4) 0b000101 << 3 == 0b101000 (5 << 3 = 40) Right Bit Shift ( >> ) 1 2 0b0010100 >> 3 == 0b000010 (20 >> 3 = 2) 0b0000010 >> 2 == 0b000000 (2 >> 2 = 0) This operation is mathematically equivalent to floor dividing and multiplying by 2 (respectively) for every time you shift, but it\u2019s often easier just to think of it as shifting all the 1s and 0s left or right by the specified number of slots. 1 2 3 4 5 6 7 shift_right = 0b1100 shift_left = 0b1 shift_right = 0b1100 >> 2 shift_left = 0b1 << 2 print bin ( shift_right ) print bin ( shift_left ) 1 2 0b11 0b100 The bitwise AND ( & ) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if the corresponding bits of both numbers are 1. For example: 1 2 3 4 a: 00101010 42 b: 00001111 15 =================== a & b: 00001010 10 As you can see, the 2\u2019s bit and the 8\u2019s bit are the only bits that are on in both a and b , so a & b only contains those bits. Note that using the & operator can only result in a number that is less than or equal to the smaller of the two values. 0 & 0 = 0 0 & 1 = 0 1 & 0 = 0 1 & 1 = 1 For example: 0b111 (7) & 0b1010 (10) = 0b10 . 1 2 3 print bin ( 0b1110 & 0b101 ) print bin ( 0b100 ) 1 2 0b100 0b100 The bitwise OR ( | ) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of either number are 1. For example: 1 2 3 4 a: 00101010 42 b: 00001111 15 ================ a | b: 00101111 47 Note that the bitwise | operator can only create results that are greater than or equal to the larger of the two integer inputs. 0 | 0 = 0 0 | 1 = 1 1 | 0 = 1 1 | 1 = 1 For example: 110 (6) | 1010 (10) = 1110 (14) . 1 print bin ( 0b1110 | 0b101 ) 1 0b1111 The XOR ( ^ ) or exclusive or operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of the two numbers are 1, but not both. 1 2 3 4 a: 00101010 42 b: 00001111 15 ================ a ^ b: 00100101 37 Keep in mind that if a bit is off in both numbers, it stays off in the result. Note that XOR -ing a number with itself will always result in 0. 0 ^ 0 = 0 0 ^ 1 = 1 1 ^ 0 = 1 1 ^ 1 = 0 For example: 111 (7) ^ 1010 (10) = 1101 (13) . 1 print bin ( 0b1110 ^ 0b101 ) 1 0b1011 The bitwise NOT operator ( </sub> ) just flips all of the bits in a single number. What this actually means to the computer is actually very complicated, so we\u2019re not going to get into it. Just know that mathematically, this is equivalent to adding one to the number and then making it negative. 1 2 3 4 5 print </ sub > 1 print </ sub > 2 print </ sub > 3 print </ sub > 42 print </ sub > 123 1 2 3 4 5 -2 -3 -4 -43 -124 A bit mask is just a variable that aids you with bitwise operations. A bit mask can help you turn specific bits on, turn others off, or just collect data from an integer about which bits are on or off. 1 2 3 4 5 6 7 8 9 10 def check_bit4 ( input ): mask = 0b1000 desired = input & mask if desired > 0 : return \"on\" else : return \"off\" print check_bit4 ( 0b1100 ) 1 on 1 2 3 4 0b1000 0b1100 ====== 0b1000 You can also use masks to turn a bit in a number on using | . Use a bitmask and the value a in order to achieve a result where the third bit from the right of a is turned on. Be sure to print your answer as a bin() string! 1 2 3 4 a = 0b10111011 mask = 0b100 desired = a | mask print bin ( desired ) 1 0b10111111 1 2 3 4 0b10111011 0b00000100 ========== 0b10111111 Using the XOR ( ^ ) operator is very useful for flipping bits. Using ^ on a bit with the number one will return a result where that bit is flipped. In the editor is the 8 bit variable a. Use a bitmask and the value a in order to achieve a result where all of the bits in a are flipped. Be sure to print your answer as a bin() string! 1 2 3 4 a = 0b11101110 mask = 0b11111111 desired = a ^ mask print bin ( desired ) 1 0b10001 1 2 3 4 0b11101110 0b11111111 ========== 0b00010001 Finally, you can also use the left shift ( << ) and right shift ( >> ) operators to slide masks into place. 1 2 3 4 5 6 7 def flip_bit ( number , n ): mask = ( 0b1 << ( n - 1 )) result = number ^ mask return bin ( result ) print flip_bit ( 0b111 , 2 ) 1 0b101","title":"Introduction to Bitwise Operators"},{"location":"Codecademy Python/#project-rgb-hex-converter","text":"In this project, we\u2019ll use Bitwise operators to build a calculator that can convert RGB values to Hexadecimal ( hex ) values, and vice-versa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def rgb_hex (): invalid_msg = \"Invalid entry\" red = int ( raw_input ( \"Enter a 'red' (R) value, from 0 to 255: \" )) if red < 0 or red > 255 : print invalid_msg return # return will exit the function, w/o return, the function jumps to the next line... green = int ( raw_input ( \"Enter a 'green' (G) value, from 0 to 255: \" )) if green < 0 or green > 255 : print invalid_msg return blue = int ( raw_input ( \"Enter a 'blue' (B) value, from 0 to 255: \" )) if blue < 0 or blue > 255 : print invalid_msg return val = red << 16 + green << 8 + blue # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character. # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift). # Become familiar with bits by reading more here. print \" %s \" % ( hex ( val )[ 2 :] . upper ()) # string formatting def hex_rgb (): invalid_msg = \"Invalid entry\" hex_val = raw_input ( \"Enter a color (six hexadecimal digits): \" ) if len ( hex_val ) != 6 : print \"Invalid Entry\" else : hex_val = int ( hex_val , 16 ) two_hex_digits = 2 ** 8 blue = hex_val % two_hex_digits hex_val = hex_val >> 8 green = hex_val % two_hex_digits hex_val = hex_val >> 8 red = hex_val % two_hex_digits print \"Red: %s Green: %s Blue: %s \" % ( red , green , blue ) def convert (): while True : option = str ( raw_input ( \"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \" )) if option == '1' : print \"RGB to Hex...\" rgb_hex () elif option == '2' : print \"Hex to RGB...\" hex_rgb () elif option == 'X' or option == 'x' : break else : print \"Error\" convert () 1 2 3 4 5 6 7 Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. 1 RGB to Hex... Enter a 'red' (R) value, from 0 to 255: 10 Enter a 'green' (G) value, from 0 to 255: 10 Enter a 'blue' (B) value, from 0 to 255: 20 280000000000000L Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. x","title":"Project RGB-HEX Converter"},{"location":"Codecademy Python/#unit-11-introduction-to-classes","text":"","title":"UNIT 11, Introduction to Classes"},{"location":"Codecademy Python/#introduction-to-classes","text":"You can think of an object as a single data structure that contains data as well as functions; functions of objects are called methods. Class Fruit , lemon instance . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Fruit ( object ): def __init__ ( self , name , color , flavor , poisonous ): self . name = name self . color = color self . flavor = flavor self . poisonous = poisonous def description ( self ): print \"I'm a %s %s and I taste %s .\" % ( self . color , self . name , self . flavor ) def is_edible ( self ): if not self . poisonous : print \"Yep! I'm edible.\" else : print \"Don't eat me! I am super poisonous.\" lemon = Fruit ( \"lemon\" , \"yellow\" , \"sour\" , False ) lemon . description () lemon . is_edible () 1 2 I'm a yellow lemon and I taste sour. Yep! I'm edible. The class keyword, the name of the class, and the class from which the new class inherits in parentheses. By convention, user-defined Python class names start with a capital letter. 1 2 3 4 class Animal ( object ): pass __init__(): this function is required for classes, and it\u2019s used to initialize the objects it creates. __init__() always takes at least one argument, self, that refers to the object being created. You can think of __init__() as the function that \u201cboots up\u201d each object the class creates. Python will use the first parameter that __init__() receives to refer to the object being created; this is why it\u2019s often called self, since this parameter gives the object being created its identity. 1 2 3 4 5 6 class Animal ( object ): def __init__ ( self , name ): self . name = name Start creating objects. We can access attributes of our objects using dot notation. 1 2 3 4 5 6 7 8 9 10 11 class Animal ( object ): def __init__ ( self , name ): self . name = name zebra = Animal ( \"Jeffrey\" ) # instance of Animal print zebra . name # instance with attributes 1 Jeffrey More\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Class Animal ( object ): def __init__ ( self , name , age , is_hungry ): self . name = name self . age = age self . is_hungry = is_hungry zebra = Animal ( \"Jeffrey\" , 2 , True ) giraffe = Animal ( \"Bruce\" , 1 , False ) panda = Animal ( \"Chad\" , 7 , True ) print zebra . name , zebra . age , zebra . is_hungry print giraffe . name , giraffe . age , giraffe . is_hungry print panda . name , panda . age , panda . is_hungry 1 2 3 4 File \"&lt;ipython-input-55-08cd00c1ed56&gt;\", line 1 Class Animal(object): ^ SyntaxError: invalid syntax Another important aspect of Python classes is scope. The scope of a variable is the context in which it\u2019s visible to the program. It may surprise you to learn that not all variables are accessible to all parts of a Python program at all times. When dealing with classes, you can have variables that are available everywhere (global variables), variables that are only available to members of a certain class (member variables), and variables that are only available to particular instances of a class (instance variables). Global variable, (class) member variable, class variable, instance variable The same goes for functions: some are available everywhere, some are only available to members of a certain class, and still others are only available to particular instance objects. Global function, class function, instance function They all have access to the member variable is_alive, since they\u2019re all members of the Animal class. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Animal ( object ): \"\"\"Makes cute animals.\"\"\" is_alive = True def __init__ ( self , name , age ): self . name = name self . age = age zebra = Animal ( \"Jeffrey\" , 2 ) giraffe = Animal ( \"Bruce\" , 1 ) panda = Animal ( \"Chad\" , 7 ) print zebra . name , zebra . age , zebra . is_alive print giraffe . name , giraffe . age , giraffe . is_alive print panda . name , panda . age , panda . is_alive 1 2 3 Jeffrey 2 True Bruce 1 True Chad 7 True When a class has its own functions, those functions are called methods. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Animal ( object ): \"\"\"Makes cute animals.\"\"\" is_alive = True def __init__ ( self , name , age ): self . name = name self . age = age def description ( self ): print self . name print self . age hippo = Animal ( \"Yan\" , 10 ) hippo . description () # will call the class function and print 1 2 Yan 10 A class can have any number of member variables. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Animal ( object ): \"\"\"Makes cute animals.\"\"\" is_alive = True health = \"good\" def __init__ ( self , name , age ): self . name = name self . age = age def description ( self ): print self . name print self . age hippo = Animal ( \"Yan\" , 10 ) sloth = Animal ( \"George\" , 1 ) ocelot = Animal ( \"Holly\" , 2 ) print hippo . health # will call the class variable print sloth . health print ocelot . health 1 2 3 good good good Kind of classes and objects you might find in commercial software: here we have a basic ShoppingCart class for creating shopping cart objects for website customers; though basic, it\u2019s similar to what you\u2019d see in a real program. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class ShoppingCart ( object ): items_in_cart = {} # try it with an empty or not dictionary items_in_cart = { \"cereal\" : 1 } def __init__ ( self , customer_name ): self . customer_name = customer_name def add_item ( self , product , price ): \"\"\"Add product to the cart.\"\"\" if not product in self . items_in_cart : # check the dictionary self . items_in_cart [ product ] = price print product + \" added.\" else : print product + \" is already in the cart.\" def remove_item ( self , product ): \"\"\"Remove product from the cart.\"\"\" if product in self . items_in_cart : # check the dictionary del self . items_in_cart [ product ] print product + \" removed.\" else : print product + \" is not in the cart.\" my_cart = ShoppingCart ( \"Jean\" ) # instance my_cart . add_item ( \"cereal\" , 1 ) # class function 1 cereal is already in the cart. Inheritance is a tricky concept, so let\u2019s go through it step by step. Inheritance is the process by which one class takes on the attributes and methods of another, and it\u2019s used to express an is-a relationship. For example, a Panda is a bear, so a Panda class could inherit from a Bear class. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Customer ( object ): \"\"\"Produces objects that represent customers.\"\"\" def __init__ ( self , customer_id ): self . customer_id = customer_id def display_cart ( self ): print \"I'm a string that stands in for the contents of your shopping cart!\" class ReturningCustomer ( Customer ): \"\"\"For customers of the repeat variety.\"\"\" def display_order_history ( self ): print \"I'm a string that stands in for your order history!\" monty_python = ReturningCustomer ( \"ID: 12345\" ) # class instance monty_python . display_cart () # inherited from the 1st class monty_python . display_order_history () # from the current class 1 2 I'm a string that stands in for the contents of your shopping cart! I'm a string that stands in for your order history! COMPLETE EXAMPLE. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Shape ( object ): \"\"\"make shapes\"\"\" number_of_sides = 5 def __init__ ( self , number_of_sides ): self . number_of_sides = number_of_sides my_shape = Shape ( 4 ) # instance class Triangle ( Shape ): number_of_3sides = 3 # number_of_sides = 3 # would override the above def __init__ ( self , angle1 , angle2 , angle3 ): self . angle1 = angle1 self . angle2 = angle2 self . angle3 = angle3 def check_angles ( self ): if self . angle1 + self . angle2 + self . angle3 == 180 : return True else : return False my_triangle = Triangle ( 90 , 30 , 60 ) # instance print my_triangle . number_of_sides # inherit print my_shape . number_of_sides print my_triangle . number_of_3sides print my_triangle . check_angles () class Equilateral ( Triangle ): angle = 60 def __init__ ( self ): self . angle1 = self . angle # override the above self . angle2 = self . angle self . angle3 = self . angle my_equilateral = Equilateral () # instance print my_equilateral . angle print my_equilateral . angle1 # based on variable angle print my_equilateral . number_of_sides # inherit print my_equilateral . number_of_3sides # inherit print my_equilateral . check_angles () # inherit; method way print Equilateral . check_angles ( my_equilateral ) # function way; IDEM !!! 1 2 3 4 5 6 7 8 9 10 5 4 3 True 60 60 5 3 True True Sometimes you\u2019ll want one class that inherits from another to not only take on the methods and attributes of its parent, but to override one or more of them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Employee ( object ): \"\"\"Models real-life employees!\"\"\" def __init__ ( self , employee_name ): self . employee_name = employee_name def calculate_wage ( self , hours ): self . hours = hours return hours * 20.00 class PartTimeEmployee ( Employee ): def calculate_wage ( self , hours ): self . hours = hours return hours * 12.00 # override what is naturally inherited 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Employee ( object ): def __init__ ( self , name ): self . name = name def greet ( self , other ): print \"Hello, %s \" % other . name class CEO ( Employee ): def greet ( self , other ): print \"Get back to work, %s !\" % other . name # override ceo = CEO ( \"Emily\" ) emp = Employee ( \"Steve\" ) emp . greet ( ceo ) ceo . greet ( emp ) 1 2 Hello, Emily Get back to work, Steve! On the flip side, sometimes you\u2019ll be working with a derived class (or subclass) and realize that you\u2019ve overwritten a method or attribute defined in that class\u2019 base class (also called a parent or superclass) that you actually need. Have no fear! You can directly access the attributes or methods of a superclass with Python\u2019s built-in super call. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Employee ( object ): \"\"\"Models real-life employees!\"\"\" def __init__ ( self , employee_name ): self . employee_name = employee_name def calculate_wage ( self , hours ): self . hours = hours return hours * 20.00 class PartTimeEmployee ( Employee ): def calculate_wage ( self , hours ): # override self . hours = hours return hours * 12.00 def full_time_wage ( self , hours ): # super call: associate the parent's class function with child's new function withtout retyping the function return super ( PartTimeEmployee , self ) . calculate_wage ( hours ) milton = PartTimeEmployee ( \"Jack\" ) print milton . full_time_wage ( 10 ) 1 200.0","title":"Introduction to Classes"},{"location":"Codecademy Python/#more-on-classes","text":"1 2 3 4 5 6 7 class Car ( object ): # create a class pass my_car = Car () # create a class instance 1 2 3 4 5 6 7 8 9 class Car ( object ): condition = \"new\" # create a member variables my_car = Car () print my_car . condition # call the member variable 1 new 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Car ( object ): condition = \"new\" def __init__ ( self , model , color , mpg ): # initialize or boot up! self . model = model # assign class variables self . color = color self . mpg = mpg my_car = Car ( \"DeLorean\" , \"silver\" , 88 ) # create an instance with its class variables print my_car . condition print my_car . model # call the class variables... print my_car . color print my_car . mpg 1 2 3 4 new DeLorean silver 88 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Car ( object ): condition = \"new\" def __init__ ( self , model , color , mpg ): self . model = model self . color = color self . mpg = mpg def display_car ( self ): return \"This is a %s %s with %s MPG.\" % ( self . color , self . model , str ( self . mpg )) # create a class method (function) my_car = Car ( \"DeLorean\" , \"silver\" , 88 ) print my_car . condition print my_car . model print my_car . color print my_car . mpg print my_car . display_car () # call the class method 1 2 3 4 5 new DeLorean silver 88 This is a silver DeLorean with 88 MPG. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Car ( object ): condition = \"new\" def __init__ ( self , model , color , mpg ): self . model = model self . color = color self . mpg = mpg def display_car ( self ): return \"This is a %s %s with %s MPG.\" % ( self . color , self . model , str ( self . mpg )) def drive_car ( self ): self . condition = \"used\" my_car = Car ( \"DeLorean\" , \"silver\" , 88 ) print my_car . condition # 'new' print my_car . model print my_car . color print my_car . mpg print my_car . display_car () my_car . drive_car () print my_car . condition # the condition changes to 'used' 1 2 3 4 5 6 new DeLorean silver 88 This is a silver DeLorean with 88 MPG. used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 class Car ( object ): condition = \"new\" def __init__ ( self , model , color , mpg ): self . model = model self . color = color self . mpg = mpg def display_car ( self ): return \"This is a %s %s with %s MPG.\" % ( self . color , self . model , str ( self . mpg )) def drive_car ( self ): self . condition = \"used\" my_car = Car ( \"DeLorean\" , \"silver\" , 88 ) print my_car . condition print my_car . model print my_car . color print my_car . mpg print my_car . display_car () my_car . drive_car () print my_car . condition class ElectricCar ( Car ): def __init__ ( self , model , color , mpg , battery_type ): # initialize with some partial inheritance from class Car Car . __init__ ( self , model , color , mpg ) # assign class variable by inheritance from class Car self . battery_type = battery_type # assign a new class variable my_car = ElectricCar ( \"Telsa\" , \"red\" , 0 , \"molten salt\" ) # create an instance with its class variables; OVERRIDE the above print my_car . condition # call the class variables; OVERRIDE the above print my_car . model # call the member variable; OVERRIDE the above print my_car . color print my_car . mpg my_ride = ElectricCar ( \"Google\" , \"blue\" , 10 , \"electrical\" ) # create an instance with its class variables print my_ride . condition # call the class variables print my_ride . model # call the member variable print my_ride . color print my_ride . mpg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 new DeLorean silver 88 This is a silver DeLorean with 88 MPG. used new Telsa red 0 new Google blue 10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 class Car ( object ): condition = \"new\" def __init__ ( self , model , color , mpg ): self . model = model self . color = color self . mpg = mpg def display_car ( self ): return \"This is a %s %s with %s MPG.\" % ( self . color , self . model , str ( self . mpg )) def drive_car ( self ): self . condition = \"used\" my_car = Car ( \"DeLorean\" , \"silver\" , 88 ) print my_car . condition + \"!\" # call the member variable; 'new' print my_car . model print my_car . color print my_car . mpg print my_car . display_car () my_car . drive_car () # call the class method print my_car . condition + \"!!\" # member variable; now 'used' class ElectricCar ( Car ): def __init__ ( self , model , color , mpg , battery_type ): Car . __init__ ( self , model , color , mpg ) self . battery_type = battery_type def drive_car ( self ): # create a class method; OVERRIDE the above self . condition = \"like new\" my_car = ElectricCar ( \"Telsa\" , \"red\" , 0 , \"molten salt\" ) print my_car . condition + \"!\" # 'new' again my_car . drive_car () # call the class method print my_car . condition + \"!!\" # 'like new' now print my_car . model print my_car . color print my_car . mpg my_ride = ElectricCar ( \"Google\" , \"blue\" , 10 , \"electrical\" ) print my_ride . condition + \"!\" # 'used' again my_ride . drive_car () # call the class method print my_ride . condition + \"!!\" # 'like new' now print my_ride . model print my_ride . color print my_ride . mpg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 new! DeLorean silver 88 This is a silver DeLorean with 88 MPG. used!! new! like new!! Telsa red 0 new! like new!! Google blue 10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Point3D ( object ): def __init__ ( self , x , y , z ): # initialize self . x = x self . y = y self . z = z # __repr__() method, which is short for representation; by providing a return value in this method, we can tell Python how to represent an object of our class (for instance, when using a print statement). def __repr__ ( self ): return \"( %d , %d , %d )\" % ( self . x , self . y , self . z ) my_point = Point3D ( 1 , 2 , 3 ) # instance # Print my_point.__repr__() w/o adding variables print my_point 1 (1, 2, 3)","title":"More on Classes"},{"location":"Codecademy Python/#quiz-11","text":"Python writes data to a file when you close the file!","title":"Quiz 11"},{"location":"Codecademy Python/#project-bank-account","text":"In this project, we\u2019ll create a Python class that can be used to create and manipulate a personal bank account. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class BankAccount ( object ): balance = 0 def __init__ ( self , name ): self . name = name def __repr__ ( self ): # The __repr__() method defines what represents the object when a user tries to print the BnkAccount object using print. Let's add to this method and make it descriptive. return \" %s 's account; Balance: $ %.2f \" % ( self . name , self . balance ) # $%.2f for 2 decimals, self.class attribute, self.member variable def show_balance ( self ): print \"Balance: $ %.2f \\n \" % ( self . balance ) def deposit ( self , amount ): if amount <= 0 : print \"No Account. Invalid \\n \" return # # return will exit the function, w/o return, the function jumps to the next line... else : print \"Depositing: $ %.2f \" % ( amount ) # ? self . balance += amount self . show_balance () # calling a class function def withdraw ( self , amount ): if amount > self . balance : print \"More than the balance. Invalid \\n \" return else : print \"Withdrawing: $ %.2f \" % ( amount ) # ? self . balance -= amount self . show_balance () my_account = BankAccount ( \"Ugo\" ) # Ugo is the argument 'name' print my_account # launch the __repr__ my_account . show_balance () # launch the class function (method) show_balance my_account . deposit ( 2000 ) my_account . withdraw ( 3000 ) my_account . withdraw ( 1000 ) print my_account 1 2 3 4 5 6 7 8 9 10 11 12 Ugo's account; Balance: $0.00 Balance: $0.00 Depositing: $2000.00 Balance: $2000.00 More than the balance. Invalid Withdrawing: $1000.00 Balance: $1000.00 Ugo's account; Balance: $1000.00","title":"Project Bank Account"},{"location":"Codecademy Python/#unit-12-file-input-and-output","text":"","title":"UNIT 12, File Input and Output"},{"location":"Codecademy Python/#file-inputoutput","text":"Read information from a file on your computer, and/or write that information to another file? This process is called file I/O. 1 2 3 4 5 6 7 8 my_list = [ i ** 2 for i in range ( 1 , 11 )] f = open ( \"output.txt\" , \"w\" ) # create a file for item in my_list : f . write ( str ( item ) + \" \\n \" ) # write f . close () # save, close First. 1 f = open ( \"output.txt\" , \"w\" ) # This told Python to open output.txt in \"w\" mode (\"w\" stands for \"write\"). Read and write. 1 2 3 4 5 6 7 8 my_list = [ i ** 2 for i in range ( 1 , 11 )] my_file = open ( \"output.txt\" , \"r+\" ) # the file must exist for item in my_list : my_file . write ( str ( item ) + \" \\n \" ) # overwrite my_file . close () # save, close Read on the console. 1 2 3 4 my_file = open ( \"output.txt\" , \"r\" ) # the file must exist print my_file . read () my_file . close () 1 2 3 4 5 6 7 8 9 10 1 4 9 16 25 36 49 64 81 100 Read lines on the console. 1 2 3 4 5 6 7 my_file = open ( \"output.txt\" , \"r\" ) # the file must exist print my_file . readline () # read line 1 print my_file . readline () # read line 2 automatically print my_file . readline () # read line 3 my_file . close () 1 2 3 4 5 1 4 9 Open the file for reading. 1 2 3 read_file = open ( \"output.txt\" , \"r\" ) print read_file . read () read_file . close () 1 2 3 4 5 6 7 8 9 10 1 4 9 16 25 36 49 64 81 100 Use a second file handler to open the file for writing. 1 2 3 4 5 6 7 8 9 write_file = open ( \"text.txt\" , \"w\" ) # Write to the file write_file . write ( \"Not closing files is VERY BAD.\" ) # Try to read from the file print write_file . read () # Not working...`` write_file . close () 1 2 3 4 5 6 7 8 9 10 11 12 13 --------------------------------------------------------------------------- IOError Traceback (most recent call last) &lt;ipython-input-87-db256164394e&gt; in &lt;module&gt;() 5 6 # Try to read from the file ----&gt; 7 print write_file.read() # Not working...`` 8 9 write_file.close() IOError: File not open for reading Try. 1 2 3 4 5 6 7 8 9 10 11 read_file = open ( \"text.txt\" , \"r\" ) print read_file . read () write_file = open ( \"text.txt\" , \"w\" ) write_file . write ( \"Not closing files is VERY BAD.\" ) write_file . close () # close it! write_file = open ( \"text.txt\" , \"r\" ) # reopen it in read mode print write_file . read () # working write_file . close () 1 2 Not closing files is VERY BAD. Not closing files is VERY BAD. And. 1 2 3 write_file = open ( \"text.txt\" , \"w\" ) write_file . write ( \"Not closing files is VERY BAD.\" ) # could be a variable write_file . close () 1 2 3 read_file = open ( \"text.txt\" , \"r\" ) print read_file . read () read_file . close () 1 Not closing files is VERY BAD. 1 2 3 write_file = open ( \"text.txt\" , \"w\" ) write_file . truncate () # delete write_file . close () 1 2 3 read_file = open ( \"text.txt\" , \"r\" ) print read_file . read () read_file . close () You may not know this, but file objects contain a special pair of built-in methods: __enter__() and __exit__() . The details aren\u2019t important, but what is important is that when a file object\u2019s __exit__() method is invoked, it automatically closes the file. How do we invoke this method? With with and as. 1 2 3 with open ( \"text.txt\" , \"w\" ) as textfile : # a variable textfile . write ( \"Success!\" ) textfile . close () 1 2 3 with open ( \"text.txt\" , \"r\" ) as textfile : print textfile . read () textfile . close () 1 Success!","title":"File Input/Output"},{"location":"Codecademy Python/#more-io","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 with open ( \"text.txt\" , \"w\" ) as my_file : my_file . write ( \"Youpee!!!\" ) print my_file . closed # true if not my_file . closed == True : my_file . close () print my_file . closed # true with open ( \"text.txt\" , \"r\" ) as my_file : print my_file . read () print my_file . closed # true with open ( \"text.txt\" , \"r\" ) as my_file : print my_file . closed # false my_file . close () print my_file . closed # true 1 2 3 4 5 6 True True Youpee!!! True False True","title":"More I/O"},{"location":"Codecademy Python/#quiz-12","text":"OK","title":"Quiz 12"},{"location":"Codecademy Python/#project-dna-analysis","text":"In this project, we\u2019ll use many of the concepts you\u2019ve learned throughout the Python course in order to do some DNA analysis for a crime investigation. The scenario: A spy deleted important files from a computer. There were a few witnesses at the scene of the crime, but no one is sure who exactly the spy was. Three possible suspects were apprehended based on surveillance video. Each suspect had a sample of DNA taken from them. The computer\u2019s keyboard was also swabbed for DNA evidence and, luckily, one small DNA sample was successfully retrieved from the computer\u2019s keyboard. Given the three suspects\u2019 DNA and the sample DNA retreived from the keyboard, it\u2019s up to you to figure out who the spy is! The project should have methods for each of the following: Given a file, read in the DNA for each suspect and save it as a string Take a DNA string and split it into a list of codons Iterate through a suspect\u2019s codon list to see how many of their codons match the sample codons Pick the right suspect to continue the investigation on 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 sample = [ 'GTA' , 'GGG' , 'CAC' ] def read_dna ( dna_file ): dna_data = \"\" # empty string with open ( dna_file , \"r\" ) as f : # f = open(dna_file, \"r\"); with, as for line in f : dna_data += line return dna_data def dna_codons ( dna ): codons = [] for i in range ( 0 , len ( dna ), 3 ): # slice strings of 3 letters if i + 3 < len ( dna ): # make sure that you don't add a string to the codon list that isn't at least 3 letters long codons . append ( dna [ i : i + 3 ]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3 return codons def match_dna ( dna ): matches = 0 for codon in dna : if codon in sample : # if ,in matches += 1 return matches def is_criminal ( dna_sample ): dna_data = read_dna ( dna_sample ) codons = dna_codons ( dna_data ) num_matches = match_dna ( codons ) if num_matches >= 3 : print (( dna_sample )[: - 4 ]) . upper (), print ( \": number of matches = \" + str ( num_matches ) + \"; the investigation will proceed further more with this suspect.\" ) else : print (( dna_sample )[: - 4 ]) . upper (), print ( \": no evidence; the suspect can be freed.\" ) a = \"suspect1.txt\" is_criminal ( a ) a = \"suspect2.txt\" is_criminal ( a ) a = \"suspect3.txt\" is_criminal ( a ) 1 2 3 SUSPECT1 : no evidence ; the suspect can be freed . SUSPECT2 : number of matches = 6 ; the investigation will proceed further more with this suspect . SUSPECT3 : no evidence ; the suspect can be freed . suspect1.txt 1 ATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT suspect2.txt 1 CCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG suspect3.txt 1 TCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA","title":"Project DNA Analysis"},{"location":"Databases/","text":"Foreword Notes. Python 3. Consult the Hitchicker\u2019s Guide to Python . Although we work with SQLite, most concepts are applicable to MySQL and PostgreSQL. SQLite3 \u00b6 Follow the tutorial on TutorialPoint . Especially the Quick Guide for installation, basic commands, syntax, comments, SQL statement, data type, affinity type, boolean, date & time, creating a database, a table, dropping a table, querying, operators, expressions, and clauses. Each topic has also a dedicated section such as unions, joins, truncated table, etc. Install. Download from the SQLite website . Follow the Quick Guide (or find instruction online). On Windows, databases are located on C:\\sqlite. On Linux, SQLite is in the root directory(/usr/lib/\u2026), but databases can be stored in the Personal folder (or in a directory of choice; for example, in a new subdirectory under Documents). SQLite3 CLI \u00b6 Basics In the shell/bash: sqlite3 test.db , create a database/open the database (show the prompt); the database is located in SQLite\u2019s directory. Basic commands inside a database. .help . .databases , show all databases. create table first (a int, b string); , create a table with two fields. .schema , show the last commands. .tables , show all tables in the database. insert into first (a, b) values (1, \"hello\"); , load the table. select * from first; , extract all values from the table. .quit or .exit . drop table first; , delete a table (first). Delete a database by deleting the database file in the directory. Intermediate commands. .mode insert , change the view (insertions to build the database). .dump , dump data on screen. .output . \\ Documents \\ sqlite3Files.sql , create a folder in a file (Windows). .output . / Documents / sqlite3Files.sql , create a folder in a file (UNIX-based). .dump , dump data into the above. VERY USEFUL for recreating a database/table. .output stdout , to the screen. .mode column , change the view (flat table with fixed width). - .width 15 20 , define the width by column. .output . / Documents / sqlite3Files / table.sql , prepare the dump. select * from table; , extract. .output stdout , dump the data. .mode line , change the view (long list without commas). Idem. .mode html , change the view (html formats ready to be dumbed). .output . / Documents / sqlite3Files / table.html , prepare the dump. select * from table; , extract. .output stdout , dump the data. .mode tabs , change the view (flat table separated by tabs). .output . / Documents / sqlite3Files / table.tsv , prepare the dump. select * from table; , extract. .output stdout , dump the data. .mode csv , change the view (flat table separated by commas or semi-colons). .separator ; , change the separator. .output . / Documents / sqlite3Files / table.csv , prepare the dump. select * from table; , extract. .output stdout , dump the data. .mode tcs , change the view (flat table with double-quotes). .headers on , show the headers. .show , show the (above) parameters (and change them). .prompt ' sqlite3 > ' , change the prompt. .read < path > , repopulate the database with the above. Advanced There are plenty of resources about SQLite: books, online documents, online tutorials, etc. We can learn how to: Build a database, tables. Query a database, create, alter, select, order by, limit, offset, update, delete, and other functions. Joins and Triggers. And more. SQL Database GUI, Administration, and Management Tools \u00b6 With database managers, we can create scripts to automate operations. SQLite is free, open source, and cross-platform. DB Browser for SQLite is free, for all OS. Add-ons to browsers such as the SQLite Managers for Firefox. MySQL is free, open source, and cross-platform. MySQL Workbench is free, for all OS. Database Design & Modeling, SQL Development (replacing MySQL Query Browser), and Database Administration (replacing MySQL Administrator). MySQL features: SQL editor, SQL code completion, SQL code formatter, SQL Syntax highlighting, server start/stop, server status/health, server logs, server/replication configuration, user management, session management, and much more. There are web-based managers. PostgreSQL is free, open source, also cross-platform. pgAdminIII. There are web-based managers. SQL in general. DB Browser is free, for all OS. phpMyAdmin is free, for all OS. Toad is free, for Windows. HeidiSQL is free, for Windows. There are web-based managers. Spreadsheet Data and SQLite \u00b6 Import from the spreadsheet Pull data from the spreadsheet into SQLite via an add-on or a database manager (automated procedure). Or export data (save as) from the spreadsheet into a .csv file. Import the .csv into SQLite. In can be done with a manager such as DB Browser for SQLite. It can be done with a web-based manager such as SQLite Managers for Firefox. Adjust the general and field parameters. Create a primary key. Populate a table with the .csv file. Import into a spreadsheet Dump the data from the CLI or a database manager into a .csv file. Or connect the spreadsheet with SQLite with built-in functionalities or add-ons to pull data into the database. There are add-ons that can execute SQL queries in a cell and dump the results in other cells: Excellic, Microsoft SQL Server Data Mining, SaveToDB, Database Connection Wizard, Publish Wizard, etc. R and Python with SQL \u00b6 R can import data from / export data to relational databases using specialized packages such as DBI , RSQLite , RMySQL , RPostgreSQL , etc. Python libraries are: python-sql , sqlalchemy , records , peewee , etc. pip install <library> . The Chinook SQLite Sample Database \u00b6 Learn, practice, and test commands with a fake database. Download the database . Consult the diagram . We can also download the database and diagrams. Using a Python ORM: peewee \u00b6 Install peewee \u00b6 We can run queries with SQL or use a Python wrapper: peewee . It is a lightweight Object Relational Mapper (ORM). peewee works with SQLite, MySQL, and PostgreSQL. Install it with pip. We can manage our databases with Python scripts. Create a database with a script \u00b6 In peewee , models are Python classes. Everything in the database is an object: tables, rows, columns, entries, etc. We create a new database, students.db , with Python. We connect to the database and create two fields with their SQL parameters. We run the script in the terminal. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\students.db' ) class Student ( Model ): # use a singular name convention username = CharField ( max_length = 255 , unique = True ) # varchar, unique value, no duplicates points = IntegerField ( default = 0 ) # if not supplies, it inputs 0 by default class Meta : # a class inside a class (meta-class) database = db if __name__ == '__main__' : # for running the script directly, not import it db . connect () db . create_tables ([ Student ], safe = True ) # safe is a mandatory convention We get no result in the terminal: a good sign. Check out the database to see the results. The script runs on Windows in Python 2. In Python 3, we would need minor adjustments; they are documented along the way. In addition, in UNIX-based OS, we would need two extra lines at the top of the script. 1 2 #!/usr/bin/env python # -*- coding: utf-8 -*- Or. 1 2 #!/usr/bin/env python 3 # -*- coding: utf-8 -*- Create, read, update, and delete (CRUD) \u00b6 Create, read, update, and delete is knows as CRUD; the backbone of ORM. Five useful methods: .create () , add a new record to the table. .select () , pick rows out of the table. .save () , update an existing row in a table. .get () , fetch a single record from a table. .delete_instance () , delete a row from a table. Improve the script, but avoid the false start\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\students.db' ) class Student ( Model ): username = CharField ( max_length = 255 , unique = True ) points = IntegerField ( default = 0 ) class Meta : database = db # ADD a dictionary students = [ { 'username' : 'kennethliff' , 'points' : 4888 }, { 'username' : 'chalkers' , 'points' : 11912 }, { 'username' : 'joykesten2' , 'points' : 7363 }, { 'username' : 'craigsrob' , 'points' : 4079 }, { 'username' : 'adammcfarland' , 'points' : 14717 } ] def add_students (): # ADD a function for student in students : Student . create ( username = student [ 'username' ], points = student [ 'points' ]) if __name__ == '__main__' : db . connect () db . create_tables ([ Student ], safe = True ) add_students () # ADD We can run the script once, but not twice because of the unique=True in the class Student ( Model ) : . We get an IntegrityError in the terminal. We need to add a try block. Take two. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\students.db' ) class Student ( Model ): username = CharField ( max_length = 255 , unique = True ) points = IntegerField ( default = 0 ) class Meta : database = db students = [ { 'username' : 'kennethliff' , 'points' : 4888 }, { 'username' : 'chalkers' , 'points' : 11912 }, { 'username' : 'joykesten2' , 'points' : 7363 }, { 'username' : 'craigsrob' , 'points' : 4079 }, { 'username' : 'adammcfarland' , 'points' : 14717 } ] def add_students (): # CHANGE the function for student in students : try : Student . create ( username = student [ 'username' ], points = student [ 'points' ]) except IntegrityError : student_record = Student . get ( username = student [ 'username' ]) student_record . points = student [ 'points' ] student_record . save () if __name__ == '__main__' : db . connect () db . create_tables ([ Student ], safe = True ) add_students () We get no result in the terminal: a good sign. We can run the script at will. We can check out the results in the database. Add a function to select the top students, order them in descending order (from high to low), and retrieve them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\students.db' ) class Student ( Model ): username = CharField ( max_length = 255 , unique = True ) points = IntegerField ( default = 0 ) class Meta : database = db students = [ { 'username' : 'kennethliff' , 'points' : 4888 }, { 'username' : 'chalkers' , 'points' : 11912 }, { 'username' : 'joykesten2' , 'points' : 7363 }, { 'username' : 'craigsrob' , 'points' : 4079 }, { 'username' : 'adammcfarland' , 'points' : 14717 } ] def add_students (): for student in students : try : Student . create ( username = student [ 'username' ], points = student [ 'points' ]) except IntegrityError : student_record = Student . get ( username = student [ 'username' ]) student_record . points = student [ 'points' ] student_record . save () def top_student (): student = Student . select () . order_by ( Student . points . desc ()) . get () # ADD return student if __name__ == '__main__' : db . connect () db . create_tables ([ Student ], safe = True ) add_students () print ( \"Our top student right now is: {0.username}.\" . format ( top_student ())) # ADD This time, we should get a result in the terminal. 1 Our top student right now is: adammcfarland. Change the points in the dictionary and rerun the script. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\students.db' ) class Student ( Model ): username = CharField ( max_length = 255 , unique = True ) points = IntegerField ( default = 0 ) class Meta : database = db students = [ { 'username' : 'kennethliff' , 'points' : 14718 }, # CHANGE, make it the top student { 'username' : 'chalkers' , 'points' : 11912 }, { 'username' : 'joykesten2' , 'points' : 7363 }, { 'username' : 'craigsrob' , 'points' : 4079 }, { 'username' : 'adammcfarland' , 'points' : 14717 } ] def add_students (): for student in students : try : Student . create ( username = student [ 'username' ], points = student [ 'points' ]) except IntegrityError : student_record = Student . get ( username = student [ 'username' ]) student_record . points = student [ 'points' ] student_record . save () def top_student (): student = Student . select () . order_by ( Student . points . desc ()) . get () return student if __name__ == '__main__' : db . connect () db . create_tables ([ Student ], safe = True ) add_students () print ( \"Our top student right now is: {0.username}.\" . format ( top_student ())) Results in the terminal. 1 Our top student right now is: kennethliff. Recap: .create () , add a new record to the table. .select () , pick rows out of the table. .get () , fetch a single record from a table. A diary app \u2013 A Case \u00b6 A diary app \u2013 The skeleton (empty classes and functions) \u00b6 Now, let\u2019s build a diary application using an SQLite database. Such an application can be integrated into a web framework (like Flask) or frozen as an executive file (embedding SQLite). We want to be able to load data and retrieve them. The more general use could be a log book: we can write stuff and retrieve it. We can classify the entries and search for a specific word. We start with a skeleton, bare functions and docstrings. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): # content # timestamp class Meta : database = db def menu_loop (): \"\"\"Show the menu.\"\"\" def add_entry (): \"\"\"Add an entry.\"\"\" def view_entries (): \"\"\"View previous entries.\"\"\" def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" if __name__ == '__main__' : # for running the script directly, not import it menu_loop () A diary app \u2013 Initialize \u00b6 Let\u2019s add some flesh to the skeleton. Add the the datetime library and a new function to initialize the diary. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import datetime # ADD from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): # CHANGE content = TextField () # content: TextField ia more flexible, holds any type of data; contrary to CharField, a varchar with a maximum length timestamp = DateTimeField ( default = datetime . datetime . now ) # timestamp; now does take parentheses class Meta : database = db def initialize (): # ADD \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def menu_loop (): \"\"\"Show the menu.\"\"\" def add_entry (): \"\"\"Add an entry.\"\"\" def view_entries (): \"\"\"View previous entries.\"\"\" def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" if __name__ == '__main__' : # for running the script directly, not import it initialize () # INSERT menu_loop () We get no result in the terminal: a good sign. We can check out the results in the db. A diary app \u2013 Create a menu \u00b6 We add a menu using a dictionary (we need the OrderedDict library). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 from collections import OrderedDict # ADD import datetime from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): content = TextField () timestamp = DateTimeField ( default = datetime . datetime . now ) class Meta : database = db def initialize (): \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def menu_loop (): \"\"\"Show the menu.\"\"\" choice = None # new variable with a default value while choice != 'q' : # ADD print ( \"Enter 'q' to quit.\" ) # starting message for key , value in menu . items (): # loop through the dictionary print ( '{}) {}' . format ( key , value . __doc__ )) # value from the menu variables furthur down in the script; __doc__ is the docstrings choice = raw_input ( 'Action: ' ) . lower () . strip () # lowercase, remove white spaces if choice in menu : # check if the selection is in the menu menu [ choice ]() # execute the choice def add_entry (): \"\"\"Add an entry.\"\"\" def view_entries (): \"\"\"View previous entries.\"\"\" def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" menu = OrderedDict ([ # ADD tuple ( 'a' , add_entry ), ( 'v' , view_entries ), ]) if __name__ == '__main__' : initialize () menu_loop () This is coded in Python 2. In Python 3, we would replace raw_input by input . The result is dynamic. We can input data in the terminal and the script continues to run until we quit with q . We cannot do much since the functions are still empty ( def add_entry(): and def view_entries(): ). The following is a snapshot. 1 2 3 4 Enter 'q' to quit. a) Add an entry. v) View previous entries. Actions: A diary app \u2013 Data entry \u00b6 Add the sys library. We want to enter data and load the database. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 from collections import OrderedDict import datetime import sys # ADD from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): content = TextField () timestamp = DateTimeField ( default = datetime . datetime . now ) class Meta : database = db def initialize (): \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def menu_loop (): \"\"\"Show the menu.\"\"\" choice = None while choice != 'q' : print ( \"Enter 'q' to quit.\" ) for key , value in menu . items (): print ( '{}) {}' . format ( key , value . __doc__ )) choice = raw_input ( 'Action: ' ) . lower () . strip () if choice in menu : menu [ choice ]() def add_entry (): # IMPROVE \"\"\"Add an entry.\"\"\" print ( \"Enter your entry. Press ctrl+z when finished.\" ) data = sys . stdin . read () . strip () if data : if raw_input ( 'Save entry? [Yn] ' ) . lower () != 'n' : Entry . create ( content = data ) print ( \"Saved successfully!\" ) def view_entries (): \"\"\"View previous entries.\"\"\" def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" menu = OrderedDict ([ ( 'a' , add_entry ), ( 'v' , view_entries ), ]) if __name__ == '__main__' : initialize () menu_loop () The result is dynamic. To the question Enter your entry. Press ctrl+d when finished. , write Working with databases. I enjoy my day. . Press enter, then press ctrl+z, then enter in Windows, ctrl+d in UNIX-based OS (for End-of-File key sequence). Save it (with a y input). Repeat. This time, do not save it ( n ). Check out the results in the database. raw_input in Python 2 vs. input in Python 3. In Python 2, we can print with print \" \" or print(\" \") . The later is only possible in Python 3. A diary app \u2013 Search and view entries \u00b6 We now want to read the data (query the database). We also want to search throught the entries. In SQL, we would code: SELECT * FROM entry WHERE content LIKE '%search_query$' ORDER BY timestamp DESC; . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 from collections import OrderedDict import datetime import sys from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): content = TextField () timestamp = DateTimeField ( default = datetime . datetime . now ) class Meta : database = db def initialize (): \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def menu_loop (): \"\"\"Show the menu.\"\"\" choice = None while choice != 'q' : print ( \"Enter 'q' to quit.\" ) for key , value in menu . items (): print ( '{}) {}' . format ( key , value . __doc__ )) choice = raw_input ( 'Action: ' ) . lower () . strip () if choice in menu : menu [ choice ]() def add_entry (): \"\"\"Add an entry.\"\"\" print ( \"Enter your entry. Press ctrl+z when finished.\" ) data = sys . stdin . read () . strip () if data : if raw_input ( 'Save entry? [Yn] ' ) . lower () != 'n' : Entry . create ( content = data ) print ( \"Saved successfully!\" ) def view_entries ( search_query = None ): # IMPROVE \"\"\"View previous entries.\"\"\" entries = Entry . select () . order_by ( Entry . timestamp . desc ()) # sort them if search_query : entries = entries . where ( Entry . content . contains ( search_query )) for entry in entries : timestamp = entry . timestamp . strftime ( '%A %B %d , %Y %I:%M%p' ) # day name, month, date, year, hour (12h), minute, am/pm print ( timestamp ) print ( '=' * len ( timestamp )) # print the number of characters in the timestamp print ( entry . content ) print ( 'n) next entry' ) print ( 'q) return to main menu' ) next_action = raw_input ( 'Action: [Nq] ' ) . lower () . strip () if next_action == 'q' : break def search_entries (): \"\"\"Search entries for a string.\"\"\" view_entries ( raw_input ( 'Search query: ' )) def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" menu = OrderedDict ([ ( 'a' , add_entry ), ( 'v' , view_entries ), ( 's' , search_entries ), # ADD ]) if __name__ == '__main__' : initialize () menu_loop () The result is dynamic. Try entering stuff, save it. Back to the menu, read the entry. We should get a date, a line of = and the entry. Quit and go back to the menu. Try search for a word. It should find a single word among all the entry and pull out the entry where the word appears. A diary app \u2013 Delete entries \u00b6 Complete the last function: def delete_entry(entry): . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 from collections import OrderedDict import datetime import sys from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): content = TextField () timestamp = DateTimeField ( default = datetime . datetime . now ) class Meta : database = db def initialize (): \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def menu_loop (): \"\"\"Show the menu.\"\"\" choice = None while choice != 'q' : print ( \"Enter 'q' to quit.\" ) for key , value in menu . items (): print ( '{}) {}' . format ( key , value . __doc__ )) choice = raw_input ( 'Action: ' ) . lower () . strip () if choice in menu : menu [ choice ]() def add_entry (): \"\"\"Add an entry.\"\"\" print ( \"Enter your entry. Press ctrl+z when finished.\" ) data = sys . stdin . read () . strip () if data : if raw_input ( 'Save entry? [Yn] ' ) . lower () != 'n' : Entry . create ( content = data ) print ( \"Saved successfully!\" ) def view_entries ( search_query = None ): \"\"\"View previous entries.\"\"\" entries = Entry . select () . order_by ( Entry . timestamp . desc ()) if search_query : entries = entries . where ( Entry . content . contains ( search_query )) for entry in entries : timestamp = entry . timestamp . strftime ( '%A %B %d , %Y %I:%M%p' ) print ( timestamp ) print ( '=' * len ( timestamp )) print ( entry . content ) print ( 'n) next entry' ) print ( 'd) delete entry' ) # ADD print ( 'q) return to main menu' ) next_action = raw_input ( 'Action: [Ndq] ' ) . lower () . strip () if next_action == 'q' : break elif next_action == 'd' : # ADD delete_entry ( entry ) def search_entries (): \"\"\"Search entries for a string.\"\"\" view_entries ( raw_input ( 'Search query: ' )) def delete_entry ( entry ): # IMPROVE \"\"\"Delete an entry.\"\"\" if raw_input ( \"Are you sure? [yN] \" ) . lower () == 'y' : entry . delete_instance () print ( \"Entry deleted!\" ) menu = OrderedDict ([ ( 'a' , add_entry ), ( 'v' , view_entries ), ( 's' , search_entries ), ]) if __name__ == '__main__' : initialize () menu_loop () The result is dynamic. Enter something. Save it. View it. Delete it (the last entry). Confirm it. Go back to the main menu. View the previous entries. The last entry was deleted and we see the previous entry. A diary app \u2013 Finalize and polish up \u00b6 We can polish up the final result. We need to ventilate the onscreen printouts by cleaning the screen here and there. On Windows, we clear the screen with cls ; on UNIX-based OS, with clear . Here is the final product. It\u2019s not perfect, but it works. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 from collections import OrderedDict import datetime import os # ADD import sys from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): content = TextField () timestamp = DateTimeField ( default = datetime . datetime . now ) class Meta : database = db def initialize (): \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def clear (): # ADD os . system ( 'cls' if os . name == 'nt' else 'clear' ) # ADD; cls for Windows, clear for Linux or Mac OS X def menu_loop (): \"\"\"Show the menu.\"\"\" choice = None while choice != 'q' : clear () print ( \"Enter 'q' to quit.\" ) for key , value in menu . items (): print ( '{}) {}' . format ( key , value . __doc__ )) choice = raw_input ( 'Action: ' ) . lower () . strip () if choice in menu : clear () menu [ choice ]() def add_entry (): \"\"\"Add an entry.\"\"\" print ( \"Enter your entry. Press ctrl+z when finished.\" ) data = sys . stdin . read () . strip () if data : if raw_input ( 'Save entry? [Yn] ' ) . lower () != 'n' : Entry . create ( content = data ) print ( \"Saved successfully!\" ) def view_entries ( search_query = None ): \"\"\"View previous entries.\"\"\" entries = Entry . select () . order_by ( Entry . timestamp . desc ()) if search_query : entries = entries . where ( Entry . content . contains ( search_query )) for entry in entries : timestamp = entry . timestamp . strftime ( '%A %B %d , %Y %I:%M%p' ) clear () print ( timestamp ) print ( '=' * len ( timestamp )) print ( entry . content ) print ( ' \\n\\n ' + '=' * len ( timestamp )) # ADD print ( 'n) next entry' ) print ( 'd) delete entry' ) print ( 'q) return to main menu' ) next_action = raw_input ( 'Action: [Ndq] ' ) . lower () . strip () if next_action == 'q' : break elif next_action == 'd' : delete_entry ( entry ) def search_entries (): \"\"\"Search entries for a string.\"\"\" view_entries ( raw_input ( 'Search query: ' )) def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" if raw_input ( \"Are you sure? [yN] \" ) . lower () == 'y' : entry . delete_instance () print ( \"Entry deleted!\" ) menu = OrderedDict ([ ( 'a' , add_entry ), ( 'v' , view_entries ), ( 's' , search_entries ), ]) if __name__ == '__main__' : initialize () menu_loop ()","title":"Databases"},{"location":"Databases/#sqlite3-cli","text":"Basics In the shell/bash: sqlite3 test.db , create a database/open the database (show the prompt); the database is located in SQLite\u2019s directory. Basic commands inside a database. .help . .databases , show all databases. create table first (a int, b string); , create a table with two fields. .schema , show the last commands. .tables , show all tables in the database. insert into first (a, b) values (1, \"hello\"); , load the table. select * from first; , extract all values from the table. .quit or .exit . drop table first; , delete a table (first). Delete a database by deleting the database file in the directory. Intermediate commands. .mode insert , change the view (insertions to build the database). .dump , dump data on screen. .output . \\ Documents \\ sqlite3Files.sql , create a folder in a file (Windows). .output . / Documents / sqlite3Files.sql , create a folder in a file (UNIX-based). .dump , dump data into the above. VERY USEFUL for recreating a database/table. .output stdout , to the screen. .mode column , change the view (flat table with fixed width). - .width 15 20 , define the width by column. .output . / Documents / sqlite3Files / table.sql , prepare the dump. select * from table; , extract. .output stdout , dump the data. .mode line , change the view (long list without commas). Idem. .mode html , change the view (html formats ready to be dumbed). .output . / Documents / sqlite3Files / table.html , prepare the dump. select * from table; , extract. .output stdout , dump the data. .mode tabs , change the view (flat table separated by tabs). .output . / Documents / sqlite3Files / table.tsv , prepare the dump. select * from table; , extract. .output stdout , dump the data. .mode csv , change the view (flat table separated by commas or semi-colons). .separator ; , change the separator. .output . / Documents / sqlite3Files / table.csv , prepare the dump. select * from table; , extract. .output stdout , dump the data. .mode tcs , change the view (flat table with double-quotes). .headers on , show the headers. .show , show the (above) parameters (and change them). .prompt ' sqlite3 > ' , change the prompt. .read < path > , repopulate the database with the above. Advanced There are plenty of resources about SQLite: books, online documents, online tutorials, etc. We can learn how to: Build a database, tables. Query a database, create, alter, select, order by, limit, offset, update, delete, and other functions. Joins and Triggers. And more.","title":"SQLite3 CLI"},{"location":"Databases/#sql-database-gui-administration-and-management-tools","text":"With database managers, we can create scripts to automate operations. SQLite is free, open source, and cross-platform. DB Browser for SQLite is free, for all OS. Add-ons to browsers such as the SQLite Managers for Firefox. MySQL is free, open source, and cross-platform. MySQL Workbench is free, for all OS. Database Design & Modeling, SQL Development (replacing MySQL Query Browser), and Database Administration (replacing MySQL Administrator). MySQL features: SQL editor, SQL code completion, SQL code formatter, SQL Syntax highlighting, server start/stop, server status/health, server logs, server/replication configuration, user management, session management, and much more. There are web-based managers. PostgreSQL is free, open source, also cross-platform. pgAdminIII. There are web-based managers. SQL in general. DB Browser is free, for all OS. phpMyAdmin is free, for all OS. Toad is free, for Windows. HeidiSQL is free, for Windows. There are web-based managers.","title":"SQL Database GUI, Administration, and Management Tools"},{"location":"Databases/#spreadsheet-data-and-sqlite","text":"Import from the spreadsheet Pull data from the spreadsheet into SQLite via an add-on or a database manager (automated procedure). Or export data (save as) from the spreadsheet into a .csv file. Import the .csv into SQLite. In can be done with a manager such as DB Browser for SQLite. It can be done with a web-based manager such as SQLite Managers for Firefox. Adjust the general and field parameters. Create a primary key. Populate a table with the .csv file. Import into a spreadsheet Dump the data from the CLI or a database manager into a .csv file. Or connect the spreadsheet with SQLite with built-in functionalities or add-ons to pull data into the database. There are add-ons that can execute SQL queries in a cell and dump the results in other cells: Excellic, Microsoft SQL Server Data Mining, SaveToDB, Database Connection Wizard, Publish Wizard, etc.","title":"Spreadsheet Data and SQLite"},{"location":"Databases/#r-and-python-with-sql","text":"R can import data from / export data to relational databases using specialized packages such as DBI , RSQLite , RMySQL , RPostgreSQL , etc. Python libraries are: python-sql , sqlalchemy , records , peewee , etc. pip install <library> .","title":"R and Python with SQL"},{"location":"Databases/#the-chinook-sqlite-sample-database","text":"Learn, practice, and test commands with a fake database. Download the database . Consult the diagram . We can also download the database and diagrams.","title":"The Chinook SQLite Sample Database"},{"location":"Databases/#using-a-python-orm-peewee","text":"","title":"Using a Python ORM: peewee"},{"location":"Databases/#install-peewee","text":"We can run queries with SQL or use a Python wrapper: peewee . It is a lightweight Object Relational Mapper (ORM). peewee works with SQLite, MySQL, and PostgreSQL. Install it with pip. We can manage our databases with Python scripts.","title":"Install peewee"},{"location":"Databases/#create-a-database-with-a-script","text":"In peewee , models are Python classes. Everything in the database is an object: tables, rows, columns, entries, etc. We create a new database, students.db , with Python. We connect to the database and create two fields with their SQL parameters. We run the script in the terminal. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\students.db' ) class Student ( Model ): # use a singular name convention username = CharField ( max_length = 255 , unique = True ) # varchar, unique value, no duplicates points = IntegerField ( default = 0 ) # if not supplies, it inputs 0 by default class Meta : # a class inside a class (meta-class) database = db if __name__ == '__main__' : # for running the script directly, not import it db . connect () db . create_tables ([ Student ], safe = True ) # safe is a mandatory convention We get no result in the terminal: a good sign. Check out the database to see the results. The script runs on Windows in Python 2. In Python 3, we would need minor adjustments; they are documented along the way. In addition, in UNIX-based OS, we would need two extra lines at the top of the script. 1 2 #!/usr/bin/env python # -*- coding: utf-8 -*- Or. 1 2 #!/usr/bin/env python 3 # -*- coding: utf-8 -*-","title":"Create a database with a script"},{"location":"Databases/#create-read-update-and-delete-crud","text":"Create, read, update, and delete is knows as CRUD; the backbone of ORM. Five useful methods: .create () , add a new record to the table. .select () , pick rows out of the table. .save () , update an existing row in a table. .get () , fetch a single record from a table. .delete_instance () , delete a row from a table. Improve the script, but avoid the false start\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\students.db' ) class Student ( Model ): username = CharField ( max_length = 255 , unique = True ) points = IntegerField ( default = 0 ) class Meta : database = db # ADD a dictionary students = [ { 'username' : 'kennethliff' , 'points' : 4888 }, { 'username' : 'chalkers' , 'points' : 11912 }, { 'username' : 'joykesten2' , 'points' : 7363 }, { 'username' : 'craigsrob' , 'points' : 4079 }, { 'username' : 'adammcfarland' , 'points' : 14717 } ] def add_students (): # ADD a function for student in students : Student . create ( username = student [ 'username' ], points = student [ 'points' ]) if __name__ == '__main__' : db . connect () db . create_tables ([ Student ], safe = True ) add_students () # ADD We can run the script once, but not twice because of the unique=True in the class Student ( Model ) : . We get an IntegrityError in the terminal. We need to add a try block. Take two. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\students.db' ) class Student ( Model ): username = CharField ( max_length = 255 , unique = True ) points = IntegerField ( default = 0 ) class Meta : database = db students = [ { 'username' : 'kennethliff' , 'points' : 4888 }, { 'username' : 'chalkers' , 'points' : 11912 }, { 'username' : 'joykesten2' , 'points' : 7363 }, { 'username' : 'craigsrob' , 'points' : 4079 }, { 'username' : 'adammcfarland' , 'points' : 14717 } ] def add_students (): # CHANGE the function for student in students : try : Student . create ( username = student [ 'username' ], points = student [ 'points' ]) except IntegrityError : student_record = Student . get ( username = student [ 'username' ]) student_record . points = student [ 'points' ] student_record . save () if __name__ == '__main__' : db . connect () db . create_tables ([ Student ], safe = True ) add_students () We get no result in the terminal: a good sign. We can run the script at will. We can check out the results in the database. Add a function to select the top students, order them in descending order (from high to low), and retrieve them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\students.db' ) class Student ( Model ): username = CharField ( max_length = 255 , unique = True ) points = IntegerField ( default = 0 ) class Meta : database = db students = [ { 'username' : 'kennethliff' , 'points' : 4888 }, { 'username' : 'chalkers' , 'points' : 11912 }, { 'username' : 'joykesten2' , 'points' : 7363 }, { 'username' : 'craigsrob' , 'points' : 4079 }, { 'username' : 'adammcfarland' , 'points' : 14717 } ] def add_students (): for student in students : try : Student . create ( username = student [ 'username' ], points = student [ 'points' ]) except IntegrityError : student_record = Student . get ( username = student [ 'username' ]) student_record . points = student [ 'points' ] student_record . save () def top_student (): student = Student . select () . order_by ( Student . points . desc ()) . get () # ADD return student if __name__ == '__main__' : db . connect () db . create_tables ([ Student ], safe = True ) add_students () print ( \"Our top student right now is: {0.username}.\" . format ( top_student ())) # ADD This time, we should get a result in the terminal. 1 Our top student right now is: adammcfarland. Change the points in the dictionary and rerun the script. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\students.db' ) class Student ( Model ): username = CharField ( max_length = 255 , unique = True ) points = IntegerField ( default = 0 ) class Meta : database = db students = [ { 'username' : 'kennethliff' , 'points' : 14718 }, # CHANGE, make it the top student { 'username' : 'chalkers' , 'points' : 11912 }, { 'username' : 'joykesten2' , 'points' : 7363 }, { 'username' : 'craigsrob' , 'points' : 4079 }, { 'username' : 'adammcfarland' , 'points' : 14717 } ] def add_students (): for student in students : try : Student . create ( username = student [ 'username' ], points = student [ 'points' ]) except IntegrityError : student_record = Student . get ( username = student [ 'username' ]) student_record . points = student [ 'points' ] student_record . save () def top_student (): student = Student . select () . order_by ( Student . points . desc ()) . get () return student if __name__ == '__main__' : db . connect () db . create_tables ([ Student ], safe = True ) add_students () print ( \"Our top student right now is: {0.username}.\" . format ( top_student ())) Results in the terminal. 1 Our top student right now is: kennethliff. Recap: .create () , add a new record to the table. .select () , pick rows out of the table. .get () , fetch a single record from a table.","title":"Create, read, update, and delete (CRUD)"},{"location":"Databases/#a-diary-app-a-case","text":"","title":"A diary app -- A Case"},{"location":"Databases/#a-diary-app-the-skeleton-empty-classes-and-functions","text":"Now, let\u2019s build a diary application using an SQLite database. Such an application can be integrated into a web framework (like Flask) or frozen as an executive file (embedding SQLite). We want to be able to load data and retrieve them. The more general use could be a log book: we can write stuff and retrieve it. We can classify the entries and search for a specific word. We start with a skeleton, bare functions and docstrings. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): # content # timestamp class Meta : database = db def menu_loop (): \"\"\"Show the menu.\"\"\" def add_entry (): \"\"\"Add an entry.\"\"\" def view_entries (): \"\"\"View previous entries.\"\"\" def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" if __name__ == '__main__' : # for running the script directly, not import it menu_loop ()","title":"A diary app -- The skeleton (empty classes and functions)"},{"location":"Databases/#a-diary-app-initialize","text":"Let\u2019s add some flesh to the skeleton. Add the the datetime library and a new function to initialize the diary. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import datetime # ADD from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): # CHANGE content = TextField () # content: TextField ia more flexible, holds any type of data; contrary to CharField, a varchar with a maximum length timestamp = DateTimeField ( default = datetime . datetime . now ) # timestamp; now does take parentheses class Meta : database = db def initialize (): # ADD \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def menu_loop (): \"\"\"Show the menu.\"\"\" def add_entry (): \"\"\"Add an entry.\"\"\" def view_entries (): \"\"\"View previous entries.\"\"\" def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" if __name__ == '__main__' : # for running the script directly, not import it initialize () # INSERT menu_loop () We get no result in the terminal: a good sign. We can check out the results in the db.","title":"A diary app -- Initialize"},{"location":"Databases/#a-diary-app-create-a-menu","text":"We add a menu using a dictionary (we need the OrderedDict library). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 from collections import OrderedDict # ADD import datetime from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): content = TextField () timestamp = DateTimeField ( default = datetime . datetime . now ) class Meta : database = db def initialize (): \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def menu_loop (): \"\"\"Show the menu.\"\"\" choice = None # new variable with a default value while choice != 'q' : # ADD print ( \"Enter 'q' to quit.\" ) # starting message for key , value in menu . items (): # loop through the dictionary print ( '{}) {}' . format ( key , value . __doc__ )) # value from the menu variables furthur down in the script; __doc__ is the docstrings choice = raw_input ( 'Action: ' ) . lower () . strip () # lowercase, remove white spaces if choice in menu : # check if the selection is in the menu menu [ choice ]() # execute the choice def add_entry (): \"\"\"Add an entry.\"\"\" def view_entries (): \"\"\"View previous entries.\"\"\" def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" menu = OrderedDict ([ # ADD tuple ( 'a' , add_entry ), ( 'v' , view_entries ), ]) if __name__ == '__main__' : initialize () menu_loop () This is coded in Python 2. In Python 3, we would replace raw_input by input . The result is dynamic. We can input data in the terminal and the script continues to run until we quit with q . We cannot do much since the functions are still empty ( def add_entry(): and def view_entries(): ). The following is a snapshot. 1 2 3 4 Enter 'q' to quit. a) Add an entry. v) View previous entries. Actions:","title":"A diary app -- Create a menu"},{"location":"Databases/#a-diary-app-data-entry","text":"Add the sys library. We want to enter data and load the database. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 from collections import OrderedDict import datetime import sys # ADD from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): content = TextField () timestamp = DateTimeField ( default = datetime . datetime . now ) class Meta : database = db def initialize (): \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def menu_loop (): \"\"\"Show the menu.\"\"\" choice = None while choice != 'q' : print ( \"Enter 'q' to quit.\" ) for key , value in menu . items (): print ( '{}) {}' . format ( key , value . __doc__ )) choice = raw_input ( 'Action: ' ) . lower () . strip () if choice in menu : menu [ choice ]() def add_entry (): # IMPROVE \"\"\"Add an entry.\"\"\" print ( \"Enter your entry. Press ctrl+z when finished.\" ) data = sys . stdin . read () . strip () if data : if raw_input ( 'Save entry? [Yn] ' ) . lower () != 'n' : Entry . create ( content = data ) print ( \"Saved successfully!\" ) def view_entries (): \"\"\"View previous entries.\"\"\" def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" menu = OrderedDict ([ ( 'a' , add_entry ), ( 'v' , view_entries ), ]) if __name__ == '__main__' : initialize () menu_loop () The result is dynamic. To the question Enter your entry. Press ctrl+d when finished. , write Working with databases. I enjoy my day. . Press enter, then press ctrl+z, then enter in Windows, ctrl+d in UNIX-based OS (for End-of-File key sequence). Save it (with a y input). Repeat. This time, do not save it ( n ). Check out the results in the database. raw_input in Python 2 vs. input in Python 3. In Python 2, we can print with print \" \" or print(\" \") . The later is only possible in Python 3.","title":"A diary app -- Data entry"},{"location":"Databases/#a-diary-app-search-and-view-entries","text":"We now want to read the data (query the database). We also want to search throught the entries. In SQL, we would code: SELECT * FROM entry WHERE content LIKE '%search_query$' ORDER BY timestamp DESC; . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 from collections import OrderedDict import datetime import sys from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): content = TextField () timestamp = DateTimeField ( default = datetime . datetime . now ) class Meta : database = db def initialize (): \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def menu_loop (): \"\"\"Show the menu.\"\"\" choice = None while choice != 'q' : print ( \"Enter 'q' to quit.\" ) for key , value in menu . items (): print ( '{}) {}' . format ( key , value . __doc__ )) choice = raw_input ( 'Action: ' ) . lower () . strip () if choice in menu : menu [ choice ]() def add_entry (): \"\"\"Add an entry.\"\"\" print ( \"Enter your entry. Press ctrl+z when finished.\" ) data = sys . stdin . read () . strip () if data : if raw_input ( 'Save entry? [Yn] ' ) . lower () != 'n' : Entry . create ( content = data ) print ( \"Saved successfully!\" ) def view_entries ( search_query = None ): # IMPROVE \"\"\"View previous entries.\"\"\" entries = Entry . select () . order_by ( Entry . timestamp . desc ()) # sort them if search_query : entries = entries . where ( Entry . content . contains ( search_query )) for entry in entries : timestamp = entry . timestamp . strftime ( '%A %B %d , %Y %I:%M%p' ) # day name, month, date, year, hour (12h), minute, am/pm print ( timestamp ) print ( '=' * len ( timestamp )) # print the number of characters in the timestamp print ( entry . content ) print ( 'n) next entry' ) print ( 'q) return to main menu' ) next_action = raw_input ( 'Action: [Nq] ' ) . lower () . strip () if next_action == 'q' : break def search_entries (): \"\"\"Search entries for a string.\"\"\" view_entries ( raw_input ( 'Search query: ' )) def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" menu = OrderedDict ([ ( 'a' , add_entry ), ( 'v' , view_entries ), ( 's' , search_entries ), # ADD ]) if __name__ == '__main__' : initialize () menu_loop () The result is dynamic. Try entering stuff, save it. Back to the menu, read the entry. We should get a date, a line of = and the entry. Quit and go back to the menu. Try search for a word. It should find a single word among all the entry and pull out the entry where the word appears.","title":"A diary app -- Search and view entries"},{"location":"Databases/#a-diary-app-delete-entries","text":"Complete the last function: def delete_entry(entry): . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 from collections import OrderedDict import datetime import sys from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): content = TextField () timestamp = DateTimeField ( default = datetime . datetime . now ) class Meta : database = db def initialize (): \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def menu_loop (): \"\"\"Show the menu.\"\"\" choice = None while choice != 'q' : print ( \"Enter 'q' to quit.\" ) for key , value in menu . items (): print ( '{}) {}' . format ( key , value . __doc__ )) choice = raw_input ( 'Action: ' ) . lower () . strip () if choice in menu : menu [ choice ]() def add_entry (): \"\"\"Add an entry.\"\"\" print ( \"Enter your entry. Press ctrl+z when finished.\" ) data = sys . stdin . read () . strip () if data : if raw_input ( 'Save entry? [Yn] ' ) . lower () != 'n' : Entry . create ( content = data ) print ( \"Saved successfully!\" ) def view_entries ( search_query = None ): \"\"\"View previous entries.\"\"\" entries = Entry . select () . order_by ( Entry . timestamp . desc ()) if search_query : entries = entries . where ( Entry . content . contains ( search_query )) for entry in entries : timestamp = entry . timestamp . strftime ( '%A %B %d , %Y %I:%M%p' ) print ( timestamp ) print ( '=' * len ( timestamp )) print ( entry . content ) print ( 'n) next entry' ) print ( 'd) delete entry' ) # ADD print ( 'q) return to main menu' ) next_action = raw_input ( 'Action: [Ndq] ' ) . lower () . strip () if next_action == 'q' : break elif next_action == 'd' : # ADD delete_entry ( entry ) def search_entries (): \"\"\"Search entries for a string.\"\"\" view_entries ( raw_input ( 'Search query: ' )) def delete_entry ( entry ): # IMPROVE \"\"\"Delete an entry.\"\"\" if raw_input ( \"Are you sure? [yN] \" ) . lower () == 'y' : entry . delete_instance () print ( \"Entry deleted!\" ) menu = OrderedDict ([ ( 'a' , add_entry ), ( 'v' , view_entries ), ( 's' , search_entries ), ]) if __name__ == '__main__' : initialize () menu_loop () The result is dynamic. Enter something. Save it. View it. Delete it (the last entry). Confirm it. Go back to the main menu. View the previous entries. The last entry was deleted and we see the previous entry.","title":"A diary app -- Delete entries"},{"location":"Databases/#a-diary-app-finalize-and-polish-up","text":"We can polish up the final result. We need to ventilate the onscreen printouts by cleaning the screen here and there. On Windows, we clear the screen with cls ; on UNIX-based OS, with clear . Here is the final product. It\u2019s not perfect, but it works. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 from collections import OrderedDict import datetime import os # ADD import sys from peewee import * db = SqliteDatabase ( 'C:\\sqlite\\diary.db' ) class Entry ( Model ): content = TextField () timestamp = DateTimeField ( default = datetime . datetime . now ) class Meta : database = db def initialize (): \"\"\"Create the database and the table if they don't exist.\"\"\" db . connect () db . create_tables ([ Entry ], safe = True ) def clear (): # ADD os . system ( 'cls' if os . name == 'nt' else 'clear' ) # ADD; cls for Windows, clear for Linux or Mac OS X def menu_loop (): \"\"\"Show the menu.\"\"\" choice = None while choice != 'q' : clear () print ( \"Enter 'q' to quit.\" ) for key , value in menu . items (): print ( '{}) {}' . format ( key , value . __doc__ )) choice = raw_input ( 'Action: ' ) . lower () . strip () if choice in menu : clear () menu [ choice ]() def add_entry (): \"\"\"Add an entry.\"\"\" print ( \"Enter your entry. Press ctrl+z when finished.\" ) data = sys . stdin . read () . strip () if data : if raw_input ( 'Save entry? [Yn] ' ) . lower () != 'n' : Entry . create ( content = data ) print ( \"Saved successfully!\" ) def view_entries ( search_query = None ): \"\"\"View previous entries.\"\"\" entries = Entry . select () . order_by ( Entry . timestamp . desc ()) if search_query : entries = entries . where ( Entry . content . contains ( search_query )) for entry in entries : timestamp = entry . timestamp . strftime ( '%A %B %d , %Y %I:%M%p' ) clear () print ( timestamp ) print ( '=' * len ( timestamp )) print ( entry . content ) print ( ' \\n\\n ' + '=' * len ( timestamp )) # ADD print ( 'n) next entry' ) print ( 'd) delete entry' ) print ( 'q) return to main menu' ) next_action = raw_input ( 'Action: [Ndq] ' ) . lower () . strip () if next_action == 'q' : break elif next_action == 'd' : delete_entry ( entry ) def search_entries (): \"\"\"Search entries for a string.\"\"\" view_entries ( raw_input ( 'Search query: ' )) def delete_entry ( entry ): \"\"\"Delete an entry.\"\"\" if raw_input ( \"Are you sure? [yN] \" ) . lower () == 'y' : entry . delete_instance () print ( \"Entry deleted!\" ) menu = OrderedDict ([ ( 'a' , add_entry ), ( 'v' , view_entries ), ( 's' , search_entries ), ]) if __name__ == '__main__' : initialize () menu_loop ()","title":"A diary app -- Finalize and polish up"},{"location":"Datetime/","text":"Foreword Notes. Python 2 & 3. Consult the Hitchicker\u2019s Guide to Python . The datatime library \u00b6 When building an application incorporating a time triggers, events, records log entries, and much more, we need to deal with dates and times; and time zones. Whether it is a simple script that starts every morning to scrape web data, build a report, and send emails or a comprehensive web framework script that records data entries. now or any date-time \u00b6 The datatime library has handy built-in functions: date , time , datetime , timedelta , and tzinfo . The following script demonstrates some of the functionalities. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import datetime print \"The datatime library: \" print dir ( datetime ) print \"=\" * 25 print \"The current datetime: \" print datetime . datetime . now () print \"...in a variable: \" test_start = datetime . datetime . now () print test_start print \"=\" * 25 print \"Replace the attributes: new formatting.\" test_start = test_start . replace ( hour = 7 , minute = 39 , second = 0 , microsecond = 0 ) print test_start print \"=\" * 25 Results. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import datetime The datatime library : [ 'MAXYEAR' , 'MINYEAR' , '__doc__' , '__name__' , '__package__' , 'date' , 'datetime' , 'datetime_CAPI' , 'time' , 'timedelta' , 'tzinfo' ] ========================= The current datetime : 2016 - 04 - 08 10 : 03 : 06.120000 ... in a variable : 2016 - 04 - 08 10 : 03 : 06.120000 ========================= Replace the attributes : new formatting . 2016 - 04 - 08 07 : 39 : 00 ========================= Date-time difference \u00b6 Create a date-time and compute the time difference. 1 2 3 4 5 6 7 8 9 10 11 12 13 import datetime print \"Start: \" print test_start print \"=\" * 25 duration = datetime . datetime . now () - test_start print \"duration = datetime.datetime.now() - test_start: \" print \"duration = \" , duration print \"day = \" , duration . days print \"microseconds = \" , duration . microseconds print \"seconds = \" , duration . seconds print \"hours (round(seconds/3600)) = \" , round ( duration . seconds / 3600 ) Results. 1 2 3 4 5 6 7 8 9 10 11 12 Start: 2016-04-08 07:39:00 ========================= duration = datetime.datetime.now() - test_start: duration = 2:24:06.120000 day = 0 microseconds = 120000 seconds = 8646 hours (round(seconds/3600)) = 2.0 minutes (round(seconds/60)) = 144.0 ========================= Measure duration with timedelta \u00b6 Create a delta. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 print \"datetime.datetime.now():\" print datetime . datetime . now () print \"datetime.datetime.now() + datetime.timedelta(days=3): \" print datetime . datetime . now () + datetime . timedelta ( days = 3 ) print \"...........................................(days=-5): \" print datetime . datetime . now () + datetime . timedelta ( days =- 5 ) print \"...........................................(days=-1): \" print datetime . datetime . now () + datetime . timedelta ( days =- 1 ) print \"=\" * 25 print \"\" print \"datetime.datetime.now() + datetime.timedelta(hours=1): \" print datetime . datetime . now () + datetime . timedelta ( hours = 1 ) print \"datetime.datetime.now() + datetime.timedelta(0, 3600): \" print datetime . datetime . now () + datetime . timedelta ( 0 , 3600 ) print \"=\" * 25 print \"\" work = 9 print \"work = \" , work print \"datetime.datetime.now() + datetime.timedelta(hours=work):\" print datetime . datetime . now () + datetime . timedelta ( hours = work ) print \"=\" * 25 print \"\" Results. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 datetime.datetime.now(): 2016-04-08 10:06:25.895000 datetime.datetime.now() + datetime.timedelta(days=3): 2016-04-11 10:06:25.895000 ...........................................(days=-5): 2016-04-03 10:06:25.895000 ...........................................(days=-1): 2016-04-07 10:06:25.895000 ========================= datetime.datetime.now() + datetime.timedelta(hours=1): 2016-04-08 11:06:25.895000 datetime.datetime.now() + datetime.timedelta(0, 3600): 2016-04-08 11:06:25.895000 ========================= work = 9 datetime.datetime.now() + datetime.timedelta(hours=work): 2016-04-08 19:06:25.895000 ========================= Use timedelta . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 print \"Simplify: \" now = datetime . datetime . now () print \"now: \" print now print \"now.date: \" print now . date () print \"now.time: \" print now . time () print \"=\" * 25 print \"\" print \"1 hour: \" hour = datetime . timedelta ( hours = 1 ) print hour print \"=\" * 25 print \"\" print \"Add 1 day: \" tomorrow = datetime . datetime . now () . replace ( hour = 9 , minute = 0 ) + datetime . timedelta ( days = 1 ) print tomorrow print \"Add 1 day (2): \" workday = datetime . timedelta ( hours = 8 ) print tomorrow + workday print \"=\" * 25 print \"\" print \"Appointment: \" appointment = datetime . timedelta ( minutes = 45 ) # year, month, day, hour, minute start = datetime . datetime ( 2016 , 8 , 17 , 12 , 45 ) end = start + appointment print end print \"=\" * 25 print \"\" Results. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Simplify: now: 2016-04-08 10:16:11.476000 now.date: 2016-04-08 now.time: 10:16:11.476000 ========================= 1 hour: 1:00:00 ========================= Add 1 day: 2016-04-09 09:00:11.476000 Add 1 day (2): 2016-04-09 17:00:11.476000 ========================= Appointment: 2016-08-17 13:30:00 ========================= now vs. today \u00b6 The difference between now and today is\u2026 1 2 3 4 5 6 7 8 import datetime now = datetime . datetime . now () today = datetime . datetime . today () print now print today print \"=\" * 25 print \"\" Results. 1 2 3 2016-04-08 10:34:28.444000 2016-04-08 10:34:28.444000 ========================= \u2026 now can take a timezone. We deal with timezones further down. Today \u2026 1 2 3 4 5 6 7 8 9 10 import datetime today = datetime . datetime . combine ( datetime . date . today (), datetime . time ()) print today # today at midnight print today . month print today . hour print today . year print today . weekday () # 0 = Monday, 1, 2, 3, 4 print \"=\" * 25 print \"\" Results. 1 2 3 4 5 6 2016-04-08 00:00:00 4 0 2016 5 ========================= Formatting date-time \u00b6 Format date and time. 1 2 3 4 5 6 7 8 9 10 11 import datetime now = datetime . datetime . now () print now # how to better present # strftime (strings-from-time) or turn datetime digits into strings print \"formatting datetime:\" print now . strftime ( '%B %d ' ) print now . strftime ( '%m/%m/%y' ) Results. 1 2 3 4 2016-04-08 11:08:26.757000 formatting datetime: April 08 04/04/16 strptime (strings-parse-time) turns strings into datetime digits. Look for help online for date and time types. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import datetime print \"Formatting datetime: \" print now . strftime ( '%B %d ' ) print now . strftime ( '%m/%m/%y' ) print \"=\" * 25 print \"\" print \"bithday: \" birthday = datetime . datetime . strptime ( '2016-04-21' , '%Y-%m- %d ' ) print birthday print \"=\" * 25 print \"\" print \"bithday_party: \" birthday_party = datetime . datetime . strptime ( '2016-04-22 12:00' , '%Y-%m- %d %H:%M' ) print birthday_party print \"=\" * 25 print \"\" Results. 1 2 3 4 5 6 7 8 9 10 11 12 Formatting datetime: April 08 04/04/16 ========================= bithday: 2016-04-21 00:00:00 ========================= bithday_party: 2016-04-22 12:00:00 ========================= A little printing app \u00b6 Build an application that prints out a date in a sentence. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import datetime answer_format = '%m/ %d ' link_format = '%b_ %d ' link = 'https://en.wikipedia.org/wiki/{}' while True : answer = raw_input ( \"What date would you like? Please use the MM/DD format. Enter 'q' to quit.\" ) answer2 = str ( answer ) if answer2 . upper () == 'Q' : break try : date = datetime . datetime . strptime ( answer , answer_format ) output = link . format ( date . strftime ( link_format )) print ( output ) file = open ( 'output.txt' , 'w' ) file . write ( output ) file . close () except : print ( \"That's not a valid date. Please try again.\" ) break Run it; it creates an output file. Open output.txt. Copy the link and paste it into a web browser. Build a Quiz application \u00b6 Build the skeleton \u00b6 Build an application (questions.py) that add and multiply numbers. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import datetime class Question : answer = None text = None class Add ( Question ): def __init__ ( self , num1 , num2 ): self . text = '{} + {}' . format ( num1 , num2 ) self . answer = num1 + num2 class Multiply ( Question ): def __init__ ( self , num1 , num2 ): self . text = '{} x {}' . format ( num1 , num2 ) self . answer = num1 * num2 print \"Add: \" add1 = Add ( 5 , 7 ) print add1 . text print add1 . answer print \"Multiply: \" multiply1 = Multiply ( 2 , 2 ) print multiply1 . text print multiply1 . answer Results. 1 2 3 4 5 6 Add: 5 + 7 12 Multiply: 2 x 2 4 Import the questions.py module in another script: quiz.py. Build the skeleton. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import datetime import random from questions import Add , Multiply # import the other module class Quiz : questions = [] answers = [] def __init__ ( self ): # generate 10 random questions with numbers from 1 to 10 # add these questions into self.questions pass def take_quiz ( self ): # log the start time # ask all of the questions # log if they got the question right # log the end time # show a summary pass def ask ( self , question ): # log the start time # capture the answer # check the answer # log the end time # if the answer's right, send back True # otherwise, send back False # send back the elapses time, too pass def total_correct ( self ): # return the total # of correct answers pass def summary ( self ): # print how many you got right and the total of questions: 5/10 # print the total time for the quiz: 30 seconds! pass Results (similar). 1 2 3 4 5 6 Add: 5 + 7 12 Multiply: 2 x 2 4 Generate questions \u00b6 Complete some functions and test the script. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 import datetime import random from questions import Add , Multiply class Quiz : # ADD questions = [] answers = [] def __init__ ( self ): \"\"\" generate 10 random questions with numbers from 1 to 10 add these questions into self.questions \"\"\" question_types = ( Add , Multiply ) for _ in range ( 10 ): # _ we don't care if it's 1, 5 or 12, as long as it is a number num1 = random . randint ( 1 , 10 ) num2 = random . randint ( 1 , 10 ) question = random . choice ( question_types )( num1 , num2 ) # add these questions into self.questions self . questions . append ( question ) def take_quiz ( self ): # log the start time # ask all of the questions # log if they got the question right # log the end time # show a summary pass def ask ( self , question ): # log the start time # capture the answer # check the answer # log the end time # if the answer's right, send back True # otherwise, send back False # send back the elapses time, too pass def total_correct ( self ): # ADD \"\"\"return the total # of correct answers\"\"\" total = 0 for answer in self . answers : if answer [ 0 ]: total += 1 return total def summary ( self ): # ADD \"\"\" print how many you got right and the total of questions: 5/10 print the total time for the quiz: 30 seconds! \"\"\" print ( \"You got {} out of {} right.\" . format ( self . total_correct (), len ( self . questions ) )) print ( \"It took you {} seconds total.\" . format ( ( self . end_time - self . start_time ) . seconds )) quiz1 = Quiz () print quiz1 . answers print quiz1 . questions print \"=\" * 25 print quiz1 . questions [ 0 ] . text print quiz1 . questions [ 0 ] . answer Results. 1 2 3 4 5 6 7 8 9 10 11 Add: 5 + 7 12 Multiply: 2 x 2 4 [] [<questions.Add instance at 0x00000000022B7E88>, <questions.Multiply instance at 0x00000000022FBC88>, <questions.Multiply instance at 0x00000000022FB688>, <questions.Multiply instance at 0x00000000022FBDC8>, <questions.Add instance at 0x00000000022FBE08>, <questions.Multiply instance at 0x00000000022FBE48>, <questions.Multiply instance at 0x00000000022FBE88>, <questions.Add instance at 0x00000000022FBEC8>, <questions.Multiply instance at 0x00000000022FBF08>, <questions.Multiply instance at 0x00000000022FBF48>] ========================= 3 + 1 4 Finalize the application \u00b6 Complete the script and test it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 import datetime import random from questions import Add , Multiply class Quiz : questions = [] answers = [] def __init__ ( self ): \"\"\" generate 10 random questions with numbers from 1 to 10 add these questions into self.questions \"\"\" question_types = ( Add , Multiply ) for _ in range ( 10 ): # _ we don't care if it's 1, 5 or 12, as long as it is a number num1 = random . randint ( 1 , 10 ) num2 = random . randint ( 1 , 10 ) question = random . choice ( question_types )( num1 , num2 ) # add these questions into self.questions self . questions . append ( question ) def take_quiz ( self ): # ADD \"\"\" log the start time, ask all of the questions log if they got the question right, log the end time show a summary \"\"\" # log the start time self . start_time = datetime . datetime . now () # ask all of the questions for question in self . questions : self . answers . append ( self . ask ( question )) else : # if the loop reached the end, so else happends self . end_time = datetime . datetime . now () # show a summary return self . summary () def ask ( self , question ): # ADD \"\"\" log the start time, capture the answer, check the answer log the end time, if the answer's right, send back True otherwise, send back False, send back the elapses time, too \"\"\" correct = False # log the start time question_start = datetime . datetime . now () # capture the answer answer = raw_input ( question . text + ' = ' ) # check the answer if answer == str ( question . answer ): correct = True # log the end time question_end = datetime . datetime . now () # if the answer's right, send back True # otherwise, send back False # send back the elapses time, too return correct , question_end - question_start def total_correct ( self ): \"\"\"return the total # of correct answers\"\"\" total = 0 for answer in self . answers : if answer [ 0 ]: total += 1 return total def summary ( self ): \"\"\" print how many you got right and the total of questions: 5/10 print the total time for the quiz: 30 seconds! \"\"\" print ( \"You got {} out of {} right.\" . format ( self . total_correct (), len ( self . questions ) )) print ( \"It took you {} seconds total.\" . format ( ( self . end_time - self . start_time ) . seconds )) Quiz () . take_quiz () # ADD The results are dynamic. We would get something that look like the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Add: 5 + 7 12 Multiply: 2 x 2 4 7 x 6 = 54 9 x 10 = 90 4 x 3 = 12 3 + 6 = 9 5 + 6 = 11 10 x 6 = 60 4 x 6 = 24 9 + 9 = 18 2 x 5 = 10 8 + 3 = 11 You got 9 out of 10 rights. It took you 21 seconds total. Time zones \u00b6 Timezones are major challenges for websites and web frameworks. The following is coded in Python 3 since the most common Python frameworks (Flask, Django, Pyramid) at the time this documentation is written work under Python 3. One of the reason is the multi-language ability. Time zones with datatime only \u00b6 We build two timezone-aware variables. 1 2 3 4 5 6 7 import datetime pacific = datetime . timezone ( datetime . timedelta ( hours =- 8 )) eastern = datetime . timezone ( datetime . timedelta ( hours =- 5 )) print ( pacific ) print ( eastern ) Results. 1 2 UTC - 08 : 00 UTC - 05 : 00 We build one timezone-naive variable and one timezone-aware variable. 1 2 3 4 5 6 7 # ... naive = datetime . datetime ( 2014 , 4 , 21 , 9 ) print ( naive ) aware = datetime . datetime ( 2014 , 4 , 21 , 9 , tzinfo = pacific ) print ( aware ) Results. 1 2 2014 - 04 - 21 09 : 00 : 00 2014 - 04 - 21 09 : 00 : 00 - 08 : 00 Show these in eastern time. 1 2 3 # ... print ( naive . astimezone ( eastern )) Results: cannot be applied to a naive datetime. 1 2 3 # ... print ( aware . astimezone ( eastern )) Results. 1 2014-04-21 12:00:00-05:00 Other interesting time zones. 1 2 3 4 5 6 7 8 9 10 # ... aukland = datetime . timezone ( datetime . timedelta ( hours = 13 )) print ( aukland ) print ( aware . astimezone ( aukland )) print ( \"=\" * 25 ) mumbai = datetime . timezone ( datetime . timedelta ( hours = 13 , minutes = 30 )) print ( mumbai ) print ( aware . astimezone ( mumbai )) Results. 1 2 3 4 5 UTC+13:00 2014-04-22 06:00:00+13:00 ========================= UTC+05:30 2014-04-21 22:30:00+05:30 Time zones with datatime and pytz \u00b6 pytz simplify things (a lot!). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import datetime import pytz pacific = pytz . timezone ( 'US/Pacific' ) eastern = pytz . timezone ( 'US/Eastern' ) fmt = '%Y-%m- %d %H:%M:%S %Z%z' utc = pytz . utc print ( \"set: \" ) start = pacific . localize ( datetime . datetime ( 2014 , 4 , 21 , 9 )) print ( start . strftime ( fmt )) print ( \"=\" * 25 ) print ( \"convert: \" ) start_eastern = start . astimezone ( eastern ) print ( start_eastern ) print ( \"=\" * 25 ) print ( start ) print ( \"=\" * 25 ) Results. 1 2 3 4 5 6 7 8 set: 2014-04-21 09:00:00 PDT-0700 ========================= convert: 2014-04-21 12:00:00-04:00 ========================= 2014-04-21 09:00:00-07:00 ========================= More conversions. 1 2 3 4 5 6 7 8 9 10 11 # ... print ( \"set: \" ) start_utc = datetime . datetime ( 2014 , 4 , 21 , 1 , tzinfo = utc ) print ( start_utc . strftime ( fmt )) print ( \"=\" * 25 ) print ( \"convert: \" ) start_pacific = start_utc . astimezone ( pacific ) print ( start_pacific ) print ( \"=\" * 25 ) Results. 1 2 3 4 5 6 set: 2014-04-21 01:00:00 UTC+0000 ========================= convert: 2014-04-20 18:00:00-07:00 ========================= Set a date-time and convert it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # ... print ( \"set aukland and mumbai\" ) auckland = pytz . timezone ( 'Pacific/Auckland' ) mumbai = pytz . timezone ( 'Asia/Calcutta' ) print ( \"create a date\" ) apollo_13_naive = datetime . datetime ( 1970 , 4 , 11 , 14 , 13 ) apollo_13_eastern = eastern . localize ( apollo_13_naive ) print ( \"print it: \" ) print ( apollo_13_naive ) print ( apollo_13_eastern ) print ( \"=\" * 25 ) print ( \"convert it, change location: \" ) apollo_13_utc = apollo_13_eastern . astimezone ( utc ) print ( apollo_13_utc . astimezone ( pacific ) . strftime ( fmt )) print ( apollo_13_utc . astimezone ( auckland )) print ( apollo_13_utc . astimezone ( mumbai )) Results. 1 2 3 4 5 6 7 8 9 10 set aukland and mumbai create a date print it: 1970-04-11 14:13:00 1970-04-11 14:13:00-05:00 ========================= convert it, change location: 1970-04-11 11:13:00 PST-0800 1970-04-12 07:13:00+12:00 1970-04-12 00:43:00+05:30 Find out more about pytz \u00b6 Find out about timezones: print(pytz.all_timezones) . Or focus on a country\u2019s timezones. The US. 1 print ( pytz . country_timezones [ 'us' ]) Results. 1 ['America/New_York', 'America/Detroit', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Indiana/Indianapolis', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Chicago', 'America/Indiana/Tell_City', 'America/Indiana/Knox', 'America/Menominee', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/North_Dakota/Beulah', 'America/Denver', 'America/Boise', 'America/Phoenix', 'America/Los_Angeles', 'America/Anchorage', 'America/Juneau', 'America/Sitka', 'America/Metlakatla', 'America/Yakutat', 'America/Nome', 'America/Adak', 'Pacific/Honolulu'] Canada. 1 print ( pytz . country_timezones [ 'ca' ]) Results. 1 ['America/St_Johns', 'America/Halifax', 'America/Glace_Bay', 'America/Moncton', 'America/Goose_Bay', 'America/Blanc-Sablon', 'America/Toronto', 'America/Nipigon', 'America/Thunder_Bay', 'America/Iqaluit', 'America/Pangnirtung', 'America/Atikokan', 'America/Winnipeg', 'America/Rainy_River', 'America/Resolute', 'America/Rankin_Inlet', 'America/Regina', 'America/Swift_Current', 'America/Edmonton', 'America/Cambridge_Bay', 'America/Yellowknife', 'America/Inuvik', 'America/Creston', 'America/Dawson_Creek', 'America/Fort_Nelson', 'America/Vancouver', 'America/Whitehorse', 'America/Dawson'] Russia. 1 print ( pytz . country_timezones [ 'ru' ]) Results. 1 ['Europe/Kaliningrad', 'Europe/Moscow', 'Europe/Simferopol', 'Europe/Volgograd', 'Europe/Kirov', 'Europe/Astrakhan', 'Europe/Saratov', 'Europe/Ulyanovsk', 'Europe/Samara', 'Asia/Yekaterinburg', 'Asia/Omsk', 'Asia/Novosibirsk', 'Asia/Barnaul', 'Asia/Tomsk', 'Asia/Novokuznetsk', 'Asia/Krasnoyarsk', 'Asia/Irkutsk', 'Asia/Chita', 'Asia/Yakutsk', 'Asia/Khandyga', 'Asia/Vladivostok', 'Asia/Ust-Nera', 'Asia/Magadan', 'Asia/Sakhalin', 'Asia/Srednekolymsk', 'Asia/Kamchatka', 'Asia/Anadyr'] Build a script to convert time zones \u00b6 Build a script that takes a datetime and give it back in 6 other timezones. For any given datetime, an appointment for example, we can know the equivalent elsewhere in the world. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 from datetime import datetime import pytz OTHER_TIMEZONES = [ pytz . timezone ( 'US/Eastern' ), pytz . timezone ( 'Pacific/Auckland' ), pytz . timezone ( 'Asia/Calcutta' ), pytz . timezone ( 'UTC' ), pytz . timezone ( 'Europe/Paris' ), pytz . timezone ( 'Africa/Khartoum' ), ] fmt = '%Y-%m- %d %H:%M:%S %Z%z' while True : date_input = input ( \"When is your meeting? Please use MM/DD/YYYY HH:MM format. \" ) try : local_date = datetime . strptime ( date_input , '%m/ %d /%Y %H:%M' ) except ValueError : print ( \"{} doesn't seem to be a valid date & time.\" . format ( date_input )) else : local_date = pytz . timezone ( 'US/Pacific' ) . localize ( local_date ) utc_date = local_date . astimezone ( pytz . utc ) output = [] for timezone in OTHER_TIMEZONES : output . append ( utc_date . astimezone ( timezone )) for appointment in output : print ( appointment . strftime ( fmt )) break Results (1 inputs, 6 outputs). 1 2 3 4 5 6 7 When is your meeting? Please use MM/DD/YYYY HH:MM format. 01/01/2018 13:00 2018-01-01 16:00:00 EST-0500 2018-01-02 10:00:00 NZDT+1300 2018-01-02 02:30:00 IST+0530 2018-01-01 21:00:00 UTC+0000 2018-01-01 22:00:00 CET+0100 2018-01-02 00:00:00 EAT+0300","title":"Datetime"},{"location":"Datetime/#now-or-any-date-time","text":"The datatime library has handy built-in functions: date , time , datetime , timedelta , and tzinfo . The following script demonstrates some of the functionalities. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import datetime print \"The datatime library: \" print dir ( datetime ) print \"=\" * 25 print \"The current datetime: \" print datetime . datetime . now () print \"...in a variable: \" test_start = datetime . datetime . now () print test_start print \"=\" * 25 print \"Replace the attributes: new formatting.\" test_start = test_start . replace ( hour = 7 , minute = 39 , second = 0 , microsecond = 0 ) print test_start print \"=\" * 25 Results. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import datetime The datatime library : [ 'MAXYEAR' , 'MINYEAR' , '__doc__' , '__name__' , '__package__' , 'date' , 'datetime' , 'datetime_CAPI' , 'time' , 'timedelta' , 'tzinfo' ] ========================= The current datetime : 2016 - 04 - 08 10 : 03 : 06.120000 ... in a variable : 2016 - 04 - 08 10 : 03 : 06.120000 ========================= Replace the attributes : new formatting . 2016 - 04 - 08 07 : 39 : 00 =========================","title":"now or any date-time"},{"location":"Datetime/#date-time-difference","text":"Create a date-time and compute the time difference. 1 2 3 4 5 6 7 8 9 10 11 12 13 import datetime print \"Start: \" print test_start print \"=\" * 25 duration = datetime . datetime . now () - test_start print \"duration = datetime.datetime.now() - test_start: \" print \"duration = \" , duration print \"day = \" , duration . days print \"microseconds = \" , duration . microseconds print \"seconds = \" , duration . seconds print \"hours (round(seconds/3600)) = \" , round ( duration . seconds / 3600 ) Results. 1 2 3 4 5 6 7 8 9 10 11 12 Start: 2016-04-08 07:39:00 ========================= duration = datetime.datetime.now() - test_start: duration = 2:24:06.120000 day = 0 microseconds = 120000 seconds = 8646 hours (round(seconds/3600)) = 2.0 minutes (round(seconds/60)) = 144.0 =========================","title":"Date-time difference"},{"location":"Datetime/#measure-duration-with-timedelta","text":"Create a delta. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 print \"datetime.datetime.now():\" print datetime . datetime . now () print \"datetime.datetime.now() + datetime.timedelta(days=3): \" print datetime . datetime . now () + datetime . timedelta ( days = 3 ) print \"...........................................(days=-5): \" print datetime . datetime . now () + datetime . timedelta ( days =- 5 ) print \"...........................................(days=-1): \" print datetime . datetime . now () + datetime . timedelta ( days =- 1 ) print \"=\" * 25 print \"\" print \"datetime.datetime.now() + datetime.timedelta(hours=1): \" print datetime . datetime . now () + datetime . timedelta ( hours = 1 ) print \"datetime.datetime.now() + datetime.timedelta(0, 3600): \" print datetime . datetime . now () + datetime . timedelta ( 0 , 3600 ) print \"=\" * 25 print \"\" work = 9 print \"work = \" , work print \"datetime.datetime.now() + datetime.timedelta(hours=work):\" print datetime . datetime . now () + datetime . timedelta ( hours = work ) print \"=\" * 25 print \"\" Results. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 datetime.datetime.now(): 2016-04-08 10:06:25.895000 datetime.datetime.now() + datetime.timedelta(days=3): 2016-04-11 10:06:25.895000 ...........................................(days=-5): 2016-04-03 10:06:25.895000 ...........................................(days=-1): 2016-04-07 10:06:25.895000 ========================= datetime.datetime.now() + datetime.timedelta(hours=1): 2016-04-08 11:06:25.895000 datetime.datetime.now() + datetime.timedelta(0, 3600): 2016-04-08 11:06:25.895000 ========================= work = 9 datetime.datetime.now() + datetime.timedelta(hours=work): 2016-04-08 19:06:25.895000 ========================= Use timedelta . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 print \"Simplify: \" now = datetime . datetime . now () print \"now: \" print now print \"now.date: \" print now . date () print \"now.time: \" print now . time () print \"=\" * 25 print \"\" print \"1 hour: \" hour = datetime . timedelta ( hours = 1 ) print hour print \"=\" * 25 print \"\" print \"Add 1 day: \" tomorrow = datetime . datetime . now () . replace ( hour = 9 , minute = 0 ) + datetime . timedelta ( days = 1 ) print tomorrow print \"Add 1 day (2): \" workday = datetime . timedelta ( hours = 8 ) print tomorrow + workday print \"=\" * 25 print \"\" print \"Appointment: \" appointment = datetime . timedelta ( minutes = 45 ) # year, month, day, hour, minute start = datetime . datetime ( 2016 , 8 , 17 , 12 , 45 ) end = start + appointment print end print \"=\" * 25 print \"\" Results. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Simplify: now: 2016-04-08 10:16:11.476000 now.date: 2016-04-08 now.time: 10:16:11.476000 ========================= 1 hour: 1:00:00 ========================= Add 1 day: 2016-04-09 09:00:11.476000 Add 1 day (2): 2016-04-09 17:00:11.476000 ========================= Appointment: 2016-08-17 13:30:00 =========================","title":"Measure duration with timedelta"},{"location":"Datetime/#now-vs-today","text":"The difference between now and today is\u2026 1 2 3 4 5 6 7 8 import datetime now = datetime . datetime . now () today = datetime . datetime . today () print now print today print \"=\" * 25 print \"\" Results. 1 2 3 2016-04-08 10:34:28.444000 2016-04-08 10:34:28.444000 ========================= \u2026 now can take a timezone. We deal with timezones further down. Today \u2026 1 2 3 4 5 6 7 8 9 10 import datetime today = datetime . datetime . combine ( datetime . date . today (), datetime . time ()) print today # today at midnight print today . month print today . hour print today . year print today . weekday () # 0 = Monday, 1, 2, 3, 4 print \"=\" * 25 print \"\" Results. 1 2 3 4 5 6 2016-04-08 00:00:00 4 0 2016 5 =========================","title":"now vs. today"},{"location":"Datetime/#formatting-date-time","text":"Format date and time. 1 2 3 4 5 6 7 8 9 10 11 import datetime now = datetime . datetime . now () print now # how to better present # strftime (strings-from-time) or turn datetime digits into strings print \"formatting datetime:\" print now . strftime ( '%B %d ' ) print now . strftime ( '%m/%m/%y' ) Results. 1 2 3 4 2016-04-08 11:08:26.757000 formatting datetime: April 08 04/04/16 strptime (strings-parse-time) turns strings into datetime digits. Look for help online for date and time types. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import datetime print \"Formatting datetime: \" print now . strftime ( '%B %d ' ) print now . strftime ( '%m/%m/%y' ) print \"=\" * 25 print \"\" print \"bithday: \" birthday = datetime . datetime . strptime ( '2016-04-21' , '%Y-%m- %d ' ) print birthday print \"=\" * 25 print \"\" print \"bithday_party: \" birthday_party = datetime . datetime . strptime ( '2016-04-22 12:00' , '%Y-%m- %d %H:%M' ) print birthday_party print \"=\" * 25 print \"\" Results. 1 2 3 4 5 6 7 8 9 10 11 12 Formatting datetime: April 08 04/04/16 ========================= bithday: 2016-04-21 00:00:00 ========================= bithday_party: 2016-04-22 12:00:00 =========================","title":"Formatting date-time"},{"location":"Datetime/#a-little-printing-app","text":"Build an application that prints out a date in a sentence. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import datetime answer_format = '%m/ %d ' link_format = '%b_ %d ' link = 'https://en.wikipedia.org/wiki/{}' while True : answer = raw_input ( \"What date would you like? Please use the MM/DD format. Enter 'q' to quit.\" ) answer2 = str ( answer ) if answer2 . upper () == 'Q' : break try : date = datetime . datetime . strptime ( answer , answer_format ) output = link . format ( date . strftime ( link_format )) print ( output ) file = open ( 'output.txt' , 'w' ) file . write ( output ) file . close () except : print ( \"That's not a valid date. Please try again.\" ) break Run it; it creates an output file. Open output.txt. Copy the link and paste it into a web browser.","title":"A little printing app"},{"location":"Datetime/#build-a-quiz-application","text":"","title":"Build a Quiz application"},{"location":"Datetime/#build-the-skeleton","text":"Build an application (questions.py) that add and multiply numbers. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import datetime class Question : answer = None text = None class Add ( Question ): def __init__ ( self , num1 , num2 ): self . text = '{} + {}' . format ( num1 , num2 ) self . answer = num1 + num2 class Multiply ( Question ): def __init__ ( self , num1 , num2 ): self . text = '{} x {}' . format ( num1 , num2 ) self . answer = num1 * num2 print \"Add: \" add1 = Add ( 5 , 7 ) print add1 . text print add1 . answer print \"Multiply: \" multiply1 = Multiply ( 2 , 2 ) print multiply1 . text print multiply1 . answer Results. 1 2 3 4 5 6 Add: 5 + 7 12 Multiply: 2 x 2 4 Import the questions.py module in another script: quiz.py. Build the skeleton. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import datetime import random from questions import Add , Multiply # import the other module class Quiz : questions = [] answers = [] def __init__ ( self ): # generate 10 random questions with numbers from 1 to 10 # add these questions into self.questions pass def take_quiz ( self ): # log the start time # ask all of the questions # log if they got the question right # log the end time # show a summary pass def ask ( self , question ): # log the start time # capture the answer # check the answer # log the end time # if the answer's right, send back True # otherwise, send back False # send back the elapses time, too pass def total_correct ( self ): # return the total # of correct answers pass def summary ( self ): # print how many you got right and the total of questions: 5/10 # print the total time for the quiz: 30 seconds! pass Results (similar). 1 2 3 4 5 6 Add: 5 + 7 12 Multiply: 2 x 2 4","title":"Build the skeleton"},{"location":"Datetime/#generate-questions","text":"Complete some functions and test the script. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 import datetime import random from questions import Add , Multiply class Quiz : # ADD questions = [] answers = [] def __init__ ( self ): \"\"\" generate 10 random questions with numbers from 1 to 10 add these questions into self.questions \"\"\" question_types = ( Add , Multiply ) for _ in range ( 10 ): # _ we don't care if it's 1, 5 or 12, as long as it is a number num1 = random . randint ( 1 , 10 ) num2 = random . randint ( 1 , 10 ) question = random . choice ( question_types )( num1 , num2 ) # add these questions into self.questions self . questions . append ( question ) def take_quiz ( self ): # log the start time # ask all of the questions # log if they got the question right # log the end time # show a summary pass def ask ( self , question ): # log the start time # capture the answer # check the answer # log the end time # if the answer's right, send back True # otherwise, send back False # send back the elapses time, too pass def total_correct ( self ): # ADD \"\"\"return the total # of correct answers\"\"\" total = 0 for answer in self . answers : if answer [ 0 ]: total += 1 return total def summary ( self ): # ADD \"\"\" print how many you got right and the total of questions: 5/10 print the total time for the quiz: 30 seconds! \"\"\" print ( \"You got {} out of {} right.\" . format ( self . total_correct (), len ( self . questions ) )) print ( \"It took you {} seconds total.\" . format ( ( self . end_time - self . start_time ) . seconds )) quiz1 = Quiz () print quiz1 . answers print quiz1 . questions print \"=\" * 25 print quiz1 . questions [ 0 ] . text print quiz1 . questions [ 0 ] . answer Results. 1 2 3 4 5 6 7 8 9 10 11 Add: 5 + 7 12 Multiply: 2 x 2 4 [] [<questions.Add instance at 0x00000000022B7E88>, <questions.Multiply instance at 0x00000000022FBC88>, <questions.Multiply instance at 0x00000000022FB688>, <questions.Multiply instance at 0x00000000022FBDC8>, <questions.Add instance at 0x00000000022FBE08>, <questions.Multiply instance at 0x00000000022FBE48>, <questions.Multiply instance at 0x00000000022FBE88>, <questions.Add instance at 0x00000000022FBEC8>, <questions.Multiply instance at 0x00000000022FBF08>, <questions.Multiply instance at 0x00000000022FBF48>] ========================= 3 + 1 4","title":"Generate questions"},{"location":"Datetime/#finalize-the-application","text":"Complete the script and test it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 import datetime import random from questions import Add , Multiply class Quiz : questions = [] answers = [] def __init__ ( self ): \"\"\" generate 10 random questions with numbers from 1 to 10 add these questions into self.questions \"\"\" question_types = ( Add , Multiply ) for _ in range ( 10 ): # _ we don't care if it's 1, 5 or 12, as long as it is a number num1 = random . randint ( 1 , 10 ) num2 = random . randint ( 1 , 10 ) question = random . choice ( question_types )( num1 , num2 ) # add these questions into self.questions self . questions . append ( question ) def take_quiz ( self ): # ADD \"\"\" log the start time, ask all of the questions log if they got the question right, log the end time show a summary \"\"\" # log the start time self . start_time = datetime . datetime . now () # ask all of the questions for question in self . questions : self . answers . append ( self . ask ( question )) else : # if the loop reached the end, so else happends self . end_time = datetime . datetime . now () # show a summary return self . summary () def ask ( self , question ): # ADD \"\"\" log the start time, capture the answer, check the answer log the end time, if the answer's right, send back True otherwise, send back False, send back the elapses time, too \"\"\" correct = False # log the start time question_start = datetime . datetime . now () # capture the answer answer = raw_input ( question . text + ' = ' ) # check the answer if answer == str ( question . answer ): correct = True # log the end time question_end = datetime . datetime . now () # if the answer's right, send back True # otherwise, send back False # send back the elapses time, too return correct , question_end - question_start def total_correct ( self ): \"\"\"return the total # of correct answers\"\"\" total = 0 for answer in self . answers : if answer [ 0 ]: total += 1 return total def summary ( self ): \"\"\" print how many you got right and the total of questions: 5/10 print the total time for the quiz: 30 seconds! \"\"\" print ( \"You got {} out of {} right.\" . format ( self . total_correct (), len ( self . questions ) )) print ( \"It took you {} seconds total.\" . format ( ( self . end_time - self . start_time ) . seconds )) Quiz () . take_quiz () # ADD The results are dynamic. We would get something that look like the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Add: 5 + 7 12 Multiply: 2 x 2 4 7 x 6 = 54 9 x 10 = 90 4 x 3 = 12 3 + 6 = 9 5 + 6 = 11 10 x 6 = 60 4 x 6 = 24 9 + 9 = 18 2 x 5 = 10 8 + 3 = 11 You got 9 out of 10 rights. It took you 21 seconds total.","title":"Finalize the application"},{"location":"Datetime/#time-zones","text":"Timezones are major challenges for websites and web frameworks. The following is coded in Python 3 since the most common Python frameworks (Flask, Django, Pyramid) at the time this documentation is written work under Python 3. One of the reason is the multi-language ability.","title":"Time zones"},{"location":"Datetime/#time-zones-with-datatime-only","text":"We build two timezone-aware variables. 1 2 3 4 5 6 7 import datetime pacific = datetime . timezone ( datetime . timedelta ( hours =- 8 )) eastern = datetime . timezone ( datetime . timedelta ( hours =- 5 )) print ( pacific ) print ( eastern ) Results. 1 2 UTC - 08 : 00 UTC - 05 : 00 We build one timezone-naive variable and one timezone-aware variable. 1 2 3 4 5 6 7 # ... naive = datetime . datetime ( 2014 , 4 , 21 , 9 ) print ( naive ) aware = datetime . datetime ( 2014 , 4 , 21 , 9 , tzinfo = pacific ) print ( aware ) Results. 1 2 2014 - 04 - 21 09 : 00 : 00 2014 - 04 - 21 09 : 00 : 00 - 08 : 00 Show these in eastern time. 1 2 3 # ... print ( naive . astimezone ( eastern )) Results: cannot be applied to a naive datetime. 1 2 3 # ... print ( aware . astimezone ( eastern )) Results. 1 2014-04-21 12:00:00-05:00 Other interesting time zones. 1 2 3 4 5 6 7 8 9 10 # ... aukland = datetime . timezone ( datetime . timedelta ( hours = 13 )) print ( aukland ) print ( aware . astimezone ( aukland )) print ( \"=\" * 25 ) mumbai = datetime . timezone ( datetime . timedelta ( hours = 13 , minutes = 30 )) print ( mumbai ) print ( aware . astimezone ( mumbai )) Results. 1 2 3 4 5 UTC+13:00 2014-04-22 06:00:00+13:00 ========================= UTC+05:30 2014-04-21 22:30:00+05:30","title":"Time zones with datatime only"},{"location":"Datetime/#time-zones-with-datatime-and-pytz","text":"pytz simplify things (a lot!). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import datetime import pytz pacific = pytz . timezone ( 'US/Pacific' ) eastern = pytz . timezone ( 'US/Eastern' ) fmt = '%Y-%m- %d %H:%M:%S %Z%z' utc = pytz . utc print ( \"set: \" ) start = pacific . localize ( datetime . datetime ( 2014 , 4 , 21 , 9 )) print ( start . strftime ( fmt )) print ( \"=\" * 25 ) print ( \"convert: \" ) start_eastern = start . astimezone ( eastern ) print ( start_eastern ) print ( \"=\" * 25 ) print ( start ) print ( \"=\" * 25 ) Results. 1 2 3 4 5 6 7 8 set: 2014-04-21 09:00:00 PDT-0700 ========================= convert: 2014-04-21 12:00:00-04:00 ========================= 2014-04-21 09:00:00-07:00 ========================= More conversions. 1 2 3 4 5 6 7 8 9 10 11 # ... print ( \"set: \" ) start_utc = datetime . datetime ( 2014 , 4 , 21 , 1 , tzinfo = utc ) print ( start_utc . strftime ( fmt )) print ( \"=\" * 25 ) print ( \"convert: \" ) start_pacific = start_utc . astimezone ( pacific ) print ( start_pacific ) print ( \"=\" * 25 ) Results. 1 2 3 4 5 6 set: 2014-04-21 01:00:00 UTC+0000 ========================= convert: 2014-04-20 18:00:00-07:00 ========================= Set a date-time and convert it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # ... print ( \"set aukland and mumbai\" ) auckland = pytz . timezone ( 'Pacific/Auckland' ) mumbai = pytz . timezone ( 'Asia/Calcutta' ) print ( \"create a date\" ) apollo_13_naive = datetime . datetime ( 1970 , 4 , 11 , 14 , 13 ) apollo_13_eastern = eastern . localize ( apollo_13_naive ) print ( \"print it: \" ) print ( apollo_13_naive ) print ( apollo_13_eastern ) print ( \"=\" * 25 ) print ( \"convert it, change location: \" ) apollo_13_utc = apollo_13_eastern . astimezone ( utc ) print ( apollo_13_utc . astimezone ( pacific ) . strftime ( fmt )) print ( apollo_13_utc . astimezone ( auckland )) print ( apollo_13_utc . astimezone ( mumbai )) Results. 1 2 3 4 5 6 7 8 9 10 set aukland and mumbai create a date print it: 1970-04-11 14:13:00 1970-04-11 14:13:00-05:00 ========================= convert it, change location: 1970-04-11 11:13:00 PST-0800 1970-04-12 07:13:00+12:00 1970-04-12 00:43:00+05:30","title":"Time zones with datatime and pytz"},{"location":"Datetime/#find-out-more-about-pytz","text":"Find out about timezones: print(pytz.all_timezones) . Or focus on a country\u2019s timezones. The US. 1 print ( pytz . country_timezones [ 'us' ]) Results. 1 ['America/New_York', 'America/Detroit', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Indiana/Indianapolis', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Chicago', 'America/Indiana/Tell_City', 'America/Indiana/Knox', 'America/Menominee', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/North_Dakota/Beulah', 'America/Denver', 'America/Boise', 'America/Phoenix', 'America/Los_Angeles', 'America/Anchorage', 'America/Juneau', 'America/Sitka', 'America/Metlakatla', 'America/Yakutat', 'America/Nome', 'America/Adak', 'Pacific/Honolulu'] Canada. 1 print ( pytz . country_timezones [ 'ca' ]) Results. 1 ['America/St_Johns', 'America/Halifax', 'America/Glace_Bay', 'America/Moncton', 'America/Goose_Bay', 'America/Blanc-Sablon', 'America/Toronto', 'America/Nipigon', 'America/Thunder_Bay', 'America/Iqaluit', 'America/Pangnirtung', 'America/Atikokan', 'America/Winnipeg', 'America/Rainy_River', 'America/Resolute', 'America/Rankin_Inlet', 'America/Regina', 'America/Swift_Current', 'America/Edmonton', 'America/Cambridge_Bay', 'America/Yellowknife', 'America/Inuvik', 'America/Creston', 'America/Dawson_Creek', 'America/Fort_Nelson', 'America/Vancouver', 'America/Whitehorse', 'America/Dawson'] Russia. 1 print ( pytz . country_timezones [ 'ru' ]) Results. 1 ['Europe/Kaliningrad', 'Europe/Moscow', 'Europe/Simferopol', 'Europe/Volgograd', 'Europe/Kirov', 'Europe/Astrakhan', 'Europe/Saratov', 'Europe/Ulyanovsk', 'Europe/Samara', 'Asia/Yekaterinburg', 'Asia/Omsk', 'Asia/Novosibirsk', 'Asia/Barnaul', 'Asia/Tomsk', 'Asia/Novokuznetsk', 'Asia/Krasnoyarsk', 'Asia/Irkutsk', 'Asia/Chita', 'Asia/Yakutsk', 'Asia/Khandyga', 'Asia/Vladivostok', 'Asia/Ust-Nera', 'Asia/Magadan', 'Asia/Sakhalin', 'Asia/Srednekolymsk', 'Asia/Kamchatka', 'Asia/Anadyr']","title":"Find out more about pytz"},{"location":"Datetime/#build-a-script-to-convert-time-zones","text":"Build a script that takes a datetime and give it back in 6 other timezones. For any given datetime, an appointment for example, we can know the equivalent elsewhere in the world. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 from datetime import datetime import pytz OTHER_TIMEZONES = [ pytz . timezone ( 'US/Eastern' ), pytz . timezone ( 'Pacific/Auckland' ), pytz . timezone ( 'Asia/Calcutta' ), pytz . timezone ( 'UTC' ), pytz . timezone ( 'Europe/Paris' ), pytz . timezone ( 'Africa/Khartoum' ), ] fmt = '%Y-%m- %d %H:%M:%S %Z%z' while True : date_input = input ( \"When is your meeting? Please use MM/DD/YYYY HH:MM format. \" ) try : local_date = datetime . strptime ( date_input , '%m/ %d /%Y %H:%M' ) except ValueError : print ( \"{} doesn't seem to be a valid date & time.\" . format ( date_input )) else : local_date = pytz . timezone ( 'US/Pacific' ) . localize ( local_date ) utc_date = local_date . astimezone ( pytz . utc ) output = [] for timezone in OTHER_TIMEZONES : output . append ( utc_date . astimezone ( timezone )) for appointment in output : print ( appointment . strftime ( fmt )) break Results (1 inputs, 6 outputs). 1 2 3 4 5 6 7 When is your meeting? Please use MM/DD/YYYY HH:MM format. 01/01/2018 13:00 2018-01-01 16:00:00 EST-0500 2018-01-02 10:00:00 NZDT+1300 2018-01-02 02:30:00 IST+0530 2018-01-01 21:00:00 UTC+0000 2018-01-01 22:00:00 CET+0100 2018-01-02 00:00:00 EAT+0300","title":"Build a script to convert time zones"},{"location":"Decorators/","text":"Foreword Notes and code snippets. Python 3. Consult the Hitchicker\u2019s Guide to Python . The Goal of Decorators \u00b6 Decorators vs the Decorator Pattern Python decorators are best equated to macros. Definition They modify functions, and in the case of class decorators, entire classes. They provide a simpler alternative to metaclasses. A decorator itself is a callable that returns a callable. A decorator is a function that takes a function object as its argument, and returns a function object, and in the process, makes necessary modifications to the input function, possibly enhancing it. Useful for: bookkeeping, repeating insularity functionalities, adding functionality of the function, modifying the behavior of the function; in Django, Flask or other web frameworks. First Thing First \u00b6 First dive Decorators are easy to add or remove. They are nested functions; inserted in another function. Below, inner() can live inside outer() . When you call outer() , you can also call inner() . 1 2 3 4 5 6 7 8 9 10 11 12 from functools import wraps def outer (): number = 5 def inner (): print ( number ) inner () outer () # print 5 inner () # cannot be called Functions are first-class objects that can be passed around: 1 2 3 4 5 6 7 8 9 10 11 def apply ( func , x , y ): return func ( x , y ) def add ( x , y ): return x + y def sub ( x , y ): return x - y print ( apply ( add , 5 , 5 )) # call apply(), that calls add() print ( apply ( sub , 2 , 8 )) # call apply(), that calls sub() Output: 1 2 10 -6 \u2018Predefine scope\u2019: define the environment for the function. inner() has only access to outer() and number = 5 . 1 2 3 4 5 6 7 8 9 10 def close (): x = 5 def inner (): print ( x ) return inner closure = close () # change the function name closure () # call the 'new' function Output: 1 5 1 2 3 4 5 6 7 8 9 def add_to_five ( num ): def inner (): print ( num + 5 ) return inner fifteen = add_to_five ( 10 ) fifteen () Output: 1 15 Take two ! A decorator is a function that accept function as an argument and returns a function. f() is an object, and it\u2019s not different from classes ( MyClass ) or variables ( a ). 1 2 3 4 5 6 7 8 9 >>> a = 10 >>> def f (): ... pass ... >>> class MyClass (): ... pass ... >>> print dir () [ 'MyClass' , '__builtins__' , '__doc__' , '__name__' , '__package__' , 'a' , 'f' ] Assign a function to a variable: 1 2 3 4 5 def func (): print \"func()\" funcObj = func funcObj () # inheritance from func() Functions can be passed around in the same way other types of object such as strings, integers, lists, etc. A function can accept a function as an argument and return a new function object: 1 2 3 4 def myFunction ( in_function ): def out_function (): pass return out_function The myFunction is indeed a decorator because, by definition, a decorator is a function that takes a function object as its argument, and returns a function object (!!!). Elaborate: 1 2 3 4 5 6 def myFunction ( in_function ): def out_function (): print \"Entry: \" , in_function . __name__ in_function () print \"Exit: \" , in_function . __name__ return out_function Invoking a Decorator \u00b6 Put a simple_function into the decorator ( myFunction ) as an argument, and get a enhanced_function as a return value from the decorator. 1 2 3 4 def simple_function (): pass enhanced_function = myFunction ( simple_function ) Apply the decorator syntax to the code above: 1 2 3 @myFunction def simple_function (): pass @myFunction is a decorator line or an annotation line. The @ indicates the application of the decorator. A decorator is the function itself which takes a function, and returns a new function: myFunction . When the compiler passes over this code, simple_function() is compiled. The resulting function object is passed to the myFunction code. It produces a function-like object that is substituted for the original simple_function() . The static method: 1 2 3 4 5 6 7 >>> class A : ... def s ( x ): ... print ( x ) ... s = staticmethod ( s ) ... >>> A . s ( 10 ) 10 The equivalent code using a decorator looks like this: 1 2 3 4 5 6 7 >>> class A : ... @staticmethod ... def s ( x ): ... print ( x ) ... >>> A . s ( 10 ) 10 For example, suppose you\u2019d like to do something at the entry and exit points of a function (perform some kind of security, tracing, locking, etc.): 1 2 3 4 5 6 7 @entryExit def func1 (): print \"inside func1()\" @entryExit def func2 (): print \"inside func2()\" Another example: 1 2 3 4 5 6 >>> def wrapper ( f ): ... return f ... >>> def foo (): ... pass ... Then, the wrapper can be used for rebinding foo() like this: 1 >>> foo = wrapper ( foo ) So, it\u2019s a decorator: 1 2 3 >>> @wrapper ... def foo (): ... pass With a decorator defined as below: 1 2 3 def decorator ( f ): #process function return f Maps the following: 1 2 3 4 5 @decorator def f ( arg ): return arg * arg f ( 123 ) # output 15129 Into: 1 2 3 def f ( arg ): print arg * arg f = decorator ( f ) Decoration maps the following line: 1 f ( 123 ) Into: 1 decorator ( f )( 123 ) A function decorator is applied to a function definition by placing it on the line before that function definition begins: 1 2 3 @myDecorator def aFunction (): print \"inside aFunction\" The compiler passes over the code. The aFunction() is compiled. The resulting function object is passed to the myDecorator code. It produces a function-like object that is then substituted for the original aFunction() . Using Decorators \u00b6 What should the decorator do? Anything! Decorators allow you to modify code in functions or classes. The only constraint upon the object returned by the decorator is that it can be used as a function. Any classes we use as decorators must implement __call__ . Expect the original function code to be used at some point: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class myDecorator ( object ): def __init__ ( self , f ): print \"inside myDecorator.__init__()\" f () # Prove that function definition has completed def __call__ ( self ): print \"inside myDecorator.__call__()\" @myDecorator def aFunction (): print \"inside aFunction()\" print \"Finished decorating aFunction()\" aFunction () Run this code: 1 2 3 4 inside myDecorator . __init__ () inside aFunction () Finished decorating aFunction () inside myDecorator . __call__ () The constructor for myDecorator is executed at the point of decoration of the function. Call f() inside __init__() . The creation of f() is complete before the decorator is called. The decorator constructor receives the function object being decorated. Capture the function object in the constructor and later use it in the __call__() method. When aFunction() is called after it has been decorated, the myDecorator.__call__() method is called instead of the original code. The act of decoration replaces the original function object. Before decorators were added: 1 2 3 def foo (): pass foo = staticmethod ( foo ) With the addition of the @ decoration operator: 1 2 3 @staticmethod def foo (): pass This syntax brings the idea of \u201capplying code to other code\u201d (i.e.: macros). Slightly More Useful Use the code in the decorated functions: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class entryExit ( object ): def __init__ ( self , f ): self . f = f def __call__ ( self ): print \"Entering\" , self . f . __name__ self . f () print \"Exited\" , self . f . __name__ @entryExit def func1 (): print \"inside func1()\" @entryExit def func2 (): print \"inside func2()\" func1 () func2 () Output: 1 2 3 4 5 6 Entering func1 inside func1() Exited func1 Entering func2 inside func2() Exited func2 The decorated functions now have the \u2018Entering\u2019 and \u2018Exited\u2019 trace statements around the call. The constructor stores the argument, which is the function object. In the call, use the __name__ attribute of the function to display that function\u2019s name. Then call the function itself. Using functions as decorators Replace the original function with an object of a class that has a __call__() method. But a function object is also callable. From the previous example, use a function instead of a class: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def entryExit ( f ): def new_f (): print \"Entering\" , f . __name__ f () print \"Exited\" , f . __name__ return new_f @entryExit def func1 (): print \"inside func1()\" @entryExit def func2 (): print \"inside func2()\" func1 () func2 () print func1 . __name__ new_f() is defined within the body of entryExit() . It is created and returned when entryExit() is called. new_f() is a closure; it captures the actual value of f . Once new_f() has been defined, it is returned from entryExit() . The decorator mechanism can assign the result as the decorated function. The output of print func1.__name__ is new_f , because the new_f function has been substituted for the original function during decoration. If this is a problem, change the name of the decorator function before you return it: 1 2 3 4 5 6 7 def entryExit ( f ): def new_f (): print \"Entering\" , f . __name__ f () print \"Exited\" , f . __name__ new_f . __name__ = f . __name__ return new_f Cases \u00b6 1 - Adding $ to the return value from price() function 1 2 3 4 5 6 7 8 9 10 def dollar ( fn ): def new ( * args ): return '$' + str ( fn ( * args )) return new @dollar def price ( amount , tax_rate ): return amount + amount * tax_rate print price ( 100 , 0.1 ) Output: 1 $110 The dollar decorator function takes the price() function, and returns enhanced the output from the original price() after modifying the inner working. Note that the decorator enables us to do it without making any changes on the price() function itself. A decorator works as a wrapper, modifying the behavior of the code before and after a target function execution, without the need to modify the function itself, enhancing the original functionality. With the pound or euro as well: 1 2 3 4 5 6 7 8 9 10 11 def pound ( fn ): def new ( * args ): return ( u \" \\u00A3 \" ) . encode ( 'utf-8' ) + str ( fn ( * args )) return '$' + str ( fn ( * args )) return new @pound def price ( amount , tax_rate ): return amount + amount * tax_rate print price ( 100 , 0.1 ) 2 - How many times a function called? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def count ( f ): def inner ( * args , ** kargs ): inner . counter += 1 return f ( * args , ** kargs ) inner . counter = 0 return inner @count def my_fnc (): pass if __name__ == '__main__' : my_fnc () my_fnc () my_fnc () print 'my_fnc.counter=' , my_fnc . counter Output: 1 my_fnc.counter= 3 3 - Timer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import time def timer ( f ): def inner ( * args , ** kargs ): t = time . time () ret = f ( * args , ** kargs ) print 'timer = %s ' % ( time . time () - t ) return ret return inner @timer def my_fnc (): pass if __name__ == '__main__' : my_fnc () Output: 1 timer = 5.96046447754e-06 More Cases and Examples \u00b6 learnpython.org (tutorial, snippets) Collected examples 1 2 3 4 5 6 7 8 9 10 def logme ( func ): import logging logging . basicConfig ( level = logging . DEBUG ) def inner (): logging . debug ( \"Called {}\" . format ( func . __name__ )) return func () return inner 1 2 3 4 5 6 7 8 9 10 11 def logme ( func ): import logging logging . basicConfig ( level = logging . DEBUG ) def inner ( * args , ** kwargs ): # * for tuple, ** for dict. logging . debug ( \"Called {} with args {} and kwargs {}\" . format ( func . __name__ , args , kwargs )) # to print the tuple and dict. return func ( * args , ** kwargs ) # to use the tuple and dict. return inner 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def logme ( func ): import logging logging . basicConfig ( level = logging . DEBUG ) def inner ( * args , ** kwargs ): # * for tuple, ** for dict. logging . debug ( \"Called {} with args {} and kwargs {}\" . format ( func . __name__ , args , kwargs )) # to print the tuple and dict. return func ( * args , ** kwargs ) # to use the tuple and dict. inner . __doc__ = func . __doc__ inner . __name__ = func . __name__ return inner 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def logme ( func ): import logging logging . basicConfig ( level = logging . DEBUG ) @wraps ( func ) # decorator def inner ( * args , ** kwargs ): # * for tuple, ** for dict. logging . debug ( \"Called {} with args {} and kwargs {}\" . format ( func . __name__ , args , kwargs )) # to print the tuple and dict. return func ( * args , ** kwargs ) # to use the tuple and dict. # replace all this #inner.__doc__ = func.__doc__ #inner.__name__ = func.__name__ # with from functools import wraps at the top # functools packages # wraps is a decorator; see above return inner 1 2 3 4 @logme def sub ( x , y ): \"\"\"Returns the difference between two numbers\"\"\" return x - y","title":"Decorators"},{"location":"Decorators/#first-thing-first","text":"First dive Decorators are easy to add or remove. They are nested functions; inserted in another function. Below, inner() can live inside outer() . When you call outer() , you can also call inner() . 1 2 3 4 5 6 7 8 9 10 11 12 from functools import wraps def outer (): number = 5 def inner (): print ( number ) inner () outer () # print 5 inner () # cannot be called Functions are first-class objects that can be passed around: 1 2 3 4 5 6 7 8 9 10 11 def apply ( func , x , y ): return func ( x , y ) def add ( x , y ): return x + y def sub ( x , y ): return x - y print ( apply ( add , 5 , 5 )) # call apply(), that calls add() print ( apply ( sub , 2 , 8 )) # call apply(), that calls sub() Output: 1 2 10 -6 \u2018Predefine scope\u2019: define the environment for the function. inner() has only access to outer() and number = 5 . 1 2 3 4 5 6 7 8 9 10 def close (): x = 5 def inner (): print ( x ) return inner closure = close () # change the function name closure () # call the 'new' function Output: 1 5 1 2 3 4 5 6 7 8 9 def add_to_five ( num ): def inner (): print ( num + 5 ) return inner fifteen = add_to_five ( 10 ) fifteen () Output: 1 15 Take two ! A decorator is a function that accept function as an argument and returns a function. f() is an object, and it\u2019s not different from classes ( MyClass ) or variables ( a ). 1 2 3 4 5 6 7 8 9 >>> a = 10 >>> def f (): ... pass ... >>> class MyClass (): ... pass ... >>> print dir () [ 'MyClass' , '__builtins__' , '__doc__' , '__name__' , '__package__' , 'a' , 'f' ] Assign a function to a variable: 1 2 3 4 5 def func (): print \"func()\" funcObj = func funcObj () # inheritance from func() Functions can be passed around in the same way other types of object such as strings, integers, lists, etc. A function can accept a function as an argument and return a new function object: 1 2 3 4 def myFunction ( in_function ): def out_function (): pass return out_function The myFunction is indeed a decorator because, by definition, a decorator is a function that takes a function object as its argument, and returns a function object (!!!). Elaborate: 1 2 3 4 5 6 def myFunction ( in_function ): def out_function (): print \"Entry: \" , in_function . __name__ in_function () print \"Exit: \" , in_function . __name__ return out_function","title":"First Thing First"},{"location":"Decorators/#invoking-a-decorator","text":"Put a simple_function into the decorator ( myFunction ) as an argument, and get a enhanced_function as a return value from the decorator. 1 2 3 4 def simple_function (): pass enhanced_function = myFunction ( simple_function ) Apply the decorator syntax to the code above: 1 2 3 @myFunction def simple_function (): pass @myFunction is a decorator line or an annotation line. The @ indicates the application of the decorator. A decorator is the function itself which takes a function, and returns a new function: myFunction . When the compiler passes over this code, simple_function() is compiled. The resulting function object is passed to the myFunction code. It produces a function-like object that is substituted for the original simple_function() . The static method: 1 2 3 4 5 6 7 >>> class A : ... def s ( x ): ... print ( x ) ... s = staticmethod ( s ) ... >>> A . s ( 10 ) 10 The equivalent code using a decorator looks like this: 1 2 3 4 5 6 7 >>> class A : ... @staticmethod ... def s ( x ): ... print ( x ) ... >>> A . s ( 10 ) 10 For example, suppose you\u2019d like to do something at the entry and exit points of a function (perform some kind of security, tracing, locking, etc.): 1 2 3 4 5 6 7 @entryExit def func1 (): print \"inside func1()\" @entryExit def func2 (): print \"inside func2()\" Another example: 1 2 3 4 5 6 >>> def wrapper ( f ): ... return f ... >>> def foo (): ... pass ... Then, the wrapper can be used for rebinding foo() like this: 1 >>> foo = wrapper ( foo ) So, it\u2019s a decorator: 1 2 3 >>> @wrapper ... def foo (): ... pass With a decorator defined as below: 1 2 3 def decorator ( f ): #process function return f Maps the following: 1 2 3 4 5 @decorator def f ( arg ): return arg * arg f ( 123 ) # output 15129 Into: 1 2 3 def f ( arg ): print arg * arg f = decorator ( f ) Decoration maps the following line: 1 f ( 123 ) Into: 1 decorator ( f )( 123 ) A function decorator is applied to a function definition by placing it on the line before that function definition begins: 1 2 3 @myDecorator def aFunction (): print \"inside aFunction\" The compiler passes over the code. The aFunction() is compiled. The resulting function object is passed to the myDecorator code. It produces a function-like object that is then substituted for the original aFunction() .","title":"Invoking a Decorator"},{"location":"Decorators/#using-decorators","text":"What should the decorator do? Anything! Decorators allow you to modify code in functions or classes. The only constraint upon the object returned by the decorator is that it can be used as a function. Any classes we use as decorators must implement __call__ . Expect the original function code to be used at some point: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class myDecorator ( object ): def __init__ ( self , f ): print \"inside myDecorator.__init__()\" f () # Prove that function definition has completed def __call__ ( self ): print \"inside myDecorator.__call__()\" @myDecorator def aFunction (): print \"inside aFunction()\" print \"Finished decorating aFunction()\" aFunction () Run this code: 1 2 3 4 inside myDecorator . __init__ () inside aFunction () Finished decorating aFunction () inside myDecorator . __call__ () The constructor for myDecorator is executed at the point of decoration of the function. Call f() inside __init__() . The creation of f() is complete before the decorator is called. The decorator constructor receives the function object being decorated. Capture the function object in the constructor and later use it in the __call__() method. When aFunction() is called after it has been decorated, the myDecorator.__call__() method is called instead of the original code. The act of decoration replaces the original function object. Before decorators were added: 1 2 3 def foo (): pass foo = staticmethod ( foo ) With the addition of the @ decoration operator: 1 2 3 @staticmethod def foo (): pass This syntax brings the idea of \u201capplying code to other code\u201d (i.e.: macros). Slightly More Useful Use the code in the decorated functions: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class entryExit ( object ): def __init__ ( self , f ): self . f = f def __call__ ( self ): print \"Entering\" , self . f . __name__ self . f () print \"Exited\" , self . f . __name__ @entryExit def func1 (): print \"inside func1()\" @entryExit def func2 (): print \"inside func2()\" func1 () func2 () Output: 1 2 3 4 5 6 Entering func1 inside func1() Exited func1 Entering func2 inside func2() Exited func2 The decorated functions now have the \u2018Entering\u2019 and \u2018Exited\u2019 trace statements around the call. The constructor stores the argument, which is the function object. In the call, use the __name__ attribute of the function to display that function\u2019s name. Then call the function itself. Using functions as decorators Replace the original function with an object of a class that has a __call__() method. But a function object is also callable. From the previous example, use a function instead of a class: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def entryExit ( f ): def new_f (): print \"Entering\" , f . __name__ f () print \"Exited\" , f . __name__ return new_f @entryExit def func1 (): print \"inside func1()\" @entryExit def func2 (): print \"inside func2()\" func1 () func2 () print func1 . __name__ new_f() is defined within the body of entryExit() . It is created and returned when entryExit() is called. new_f() is a closure; it captures the actual value of f . Once new_f() has been defined, it is returned from entryExit() . The decorator mechanism can assign the result as the decorated function. The output of print func1.__name__ is new_f , because the new_f function has been substituted for the original function during decoration. If this is a problem, change the name of the decorator function before you return it: 1 2 3 4 5 6 7 def entryExit ( f ): def new_f (): print \"Entering\" , f . __name__ f () print \"Exited\" , f . __name__ new_f . __name__ = f . __name__ return new_f","title":"Using Decorators"},{"location":"Decorators/#cases","text":"1 - Adding $ to the return value from price() function 1 2 3 4 5 6 7 8 9 10 def dollar ( fn ): def new ( * args ): return '$' + str ( fn ( * args )) return new @dollar def price ( amount , tax_rate ): return amount + amount * tax_rate print price ( 100 , 0.1 ) Output: 1 $110 The dollar decorator function takes the price() function, and returns enhanced the output from the original price() after modifying the inner working. Note that the decorator enables us to do it without making any changes on the price() function itself. A decorator works as a wrapper, modifying the behavior of the code before and after a target function execution, without the need to modify the function itself, enhancing the original functionality. With the pound or euro as well: 1 2 3 4 5 6 7 8 9 10 11 def pound ( fn ): def new ( * args ): return ( u \" \\u00A3 \" ) . encode ( 'utf-8' ) + str ( fn ( * args )) return '$' + str ( fn ( * args )) return new @pound def price ( amount , tax_rate ): return amount + amount * tax_rate print price ( 100 , 0.1 ) 2 - How many times a function called? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def count ( f ): def inner ( * args , ** kargs ): inner . counter += 1 return f ( * args , ** kargs ) inner . counter = 0 return inner @count def my_fnc (): pass if __name__ == '__main__' : my_fnc () my_fnc () my_fnc () print 'my_fnc.counter=' , my_fnc . counter Output: 1 my_fnc.counter= 3 3 - Timer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import time def timer ( f ): def inner ( * args , ** kargs ): t = time . time () ret = f ( * args , ** kargs ) print 'timer = %s ' % ( time . time () - t ) return ret return inner @timer def my_fnc (): pass if __name__ == '__main__' : my_fnc () Output: 1 timer = 5.96046447754e-06","title":"Cases"},{"location":"Decorators/#more-cases-and-examples","text":"learnpython.org (tutorial, snippets) Collected examples 1 2 3 4 5 6 7 8 9 10 def logme ( func ): import logging logging . basicConfig ( level = logging . DEBUG ) def inner (): logging . debug ( \"Called {}\" . format ( func . __name__ )) return func () return inner 1 2 3 4 5 6 7 8 9 10 11 def logme ( func ): import logging logging . basicConfig ( level = logging . DEBUG ) def inner ( * args , ** kwargs ): # * for tuple, ** for dict. logging . debug ( \"Called {} with args {} and kwargs {}\" . format ( func . __name__ , args , kwargs )) # to print the tuple and dict. return func ( * args , ** kwargs ) # to use the tuple and dict. return inner 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def logme ( func ): import logging logging . basicConfig ( level = logging . DEBUG ) def inner ( * args , ** kwargs ): # * for tuple, ** for dict. logging . debug ( \"Called {} with args {} and kwargs {}\" . format ( func . __name__ , args , kwargs )) # to print the tuple and dict. return func ( * args , ** kwargs ) # to use the tuple and dict. inner . __doc__ = func . __doc__ inner . __name__ = func . __name__ return inner 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def logme ( func ): import logging logging . basicConfig ( level = logging . DEBUG ) @wraps ( func ) # decorator def inner ( * args , ** kwargs ): # * for tuple, ** for dict. logging . debug ( \"Called {} with args {} and kwargs {}\" . format ( func . __name__ , args , kwargs )) # to print the tuple and dict. return func ( * args , ** kwargs ) # to use the tuple and dict. # replace all this #inner.__doc__ = func.__doc__ #inner.__name__ = func.__name__ # with from functools import wraps at the top # functools packages # wraps is a decorator; see above return inner 1 2 3 4 @logme def sub ( x , y ): \"\"\"Returns the difference between two numbers\"\"\" return x - y","title":"More Cases and Examples"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/","text":"Foreword Code snippets and excerpts from the tutorial. Python 3. From DataCamp. With Jupyter Notebook and the In [ ] Out [ ] format. Exploratory Data Analysis (EDA) prior to Machine Learning \u00b6 Supervised learning models with the help of exploratory data analysis (EDA) on the Titanic data. How to Start with Supervised Learning (Take 1) \u00b6 Approach supervised learning is the following: Perform an Exploratory Data Analysis (EDA) on a dataset; Build a quick and dirty model, or a baseline model, which can serve as a comparison against later models that we will build; Iterate this process. We will do more EDA and build another model; Engineer features: take the features that we already have and combine them or extract more information from them to eventually come to the last point, which is Get a model that performs better. Import the Data and Explore it \u00b6 1 2 3 4 5 6 7 8 9 10 # Import modules import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from sklearn import tree from sklearn.metrics import accuracy_score # Figures inline and set visualization style % matplotlib inline sns . set () 1 2 3 4 5 6 # Import test and train datasets df_train = pd . read_csv ( 'data/train.csv' ) df_test = pd . read_csv ( 'data/test.csv' ) # View first lines of training data df_train . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S The target variable is the variable we are trying to predict; Other variables are known as \u201cfeatures\u201d (or \u201cpredictor variables\u201d, the features that we are using to predict the target variable). Note that the df_test DataFrame doesn\u2019t have the Survived column because this is what we will try to predict! 1 2 # View first lines of test data df_test . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 892 3 Kelly, Mr. James male 34.5 0 0 330911 7.8292 NaN Q 1 893 3 Wilkes, Mrs. James (Ellen Needs) female 47.0 1 0 363272 7.0000 NaN S 2 894 2 Myles, Mr. Thomas Francis male 62.0 0 0 240276 9.6875 NaN Q 1 df_train . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): PassengerId 891 non-null int64 Survived 891 non-null int64 Pclass 891 non-null int64 Name 891 non-null object Sex 891 non-null object Age 714 non-null float64 SibSp 891 non-null int64 Parch 891 non-null int64 Ticket 891 non-null object Fare 891 non-null float64 Cabin 204 non-null object Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.6+ KB 1 df_train . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Survived Pclass Age SibSp Parch Fare count 891.000000 891.000000 891.000000 714.000000 891.000000 891.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 0.381594 32.204208 std 257.353842 0.486592 0.836071 14.526497 1.102743 0.806057 49.693429 min 1.000000 0.000000 1.000000 0.420000 0.000000 0.000000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 0.000000 7.910400 50% 446.000000 0.000000 3.000000 28.000000 0.000000 0.000000 14.454200 75% 668.500000 1.000000 3.000000 38.000000 1.000000 0.000000 31.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 6.000000 512.329200 Visual Exploratory Data Analysis (EDA) and a First Model \u00b6 With seaborn. 1 sns . countplot ( x = 'Survived' , data = df_train ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc65fa0e668&gt; Take-away : in the training set, less people survived than didn\u2019t. Let\u2019s then build a first model that predicts that nobody survived. This is a bad model as we know that people survived. But it gives us a baseline : any model that we build later needs to do better than this one. Create a column Survived for df_test that encodes \u2018did not survive\u2019 for all rows; Save PassengerId and Survived columns of df_test to a .csv and submit to Kaggle. 1 2 df_test [ 'Survived' ] = 0 df_test [[ 'PassengerId' , 'Survived' ]] . to_csv ( 'results/no_survivors.csv' , index = False ) Submit to Kaggle (1 st ) \u00b6 Go to Kaggle , log in, and search for Titanic: Machine Learning from Disaster . Join the competition and submit the .csv file. Add a description and submit. Kaggle returns a ranking. At the time of the first submission: score 0.63679, rank 9387. EDA on Feature Variables \u00b6 Do some more Exploratory Data Analysis and build another model! 1 sns . countplot ( x = 'Sex' , data = df_train ); 1 2 # kind is the facets sns . factorplot ( x = 'Survived' , col = 'Sex' , kind = 'count' , data = df_train ) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7fc65fa35a20&gt; Take-away : Women were more likely to survive than men. With this take-away, we can use pandas to figure out how many women and how many men survived: 1 df_train . head ( 1 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.25 NaN S 1 2 # Chain a group by Sex, sum Survived df_train . groupby ([ 'Sex' ]) . Survived . sum () 1 2 3 4 Sex female 233 male 109 Name: Survived, dtype: int64 1 2 3 4 5 6 # Chain calculations print ( df_train [ df_train . Sex == 'female' ] . Survived . sum () / df_train [ df_train . Sex == 'female' ] . Survived . count ()) print ( df_train [ df_train . Sex == 'male' ] . Survived . sum () / df_train [ df_train . Sex == 'male' ] . Survived . count ()) 1 2 0.742038216561 0.188908145581 74% of women survived, while 19% of men survived. Build a second model and predict that all women survived and all men didn\u2019t. Create a column Survived for df_test that encodes the above prediction. Save PassengerId and Survived columns of df_test to a .csv and submit to Kaggle. 1 2 3 df_test [ 'Survived' ] = df_test . Sex == 'female' df_test [ 'Survived' ] = df_test . Survived . apply ( lambda x : int ( x )) df_test . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Survived 0 892 3 Kelly, Mr. James male 34.5 0 0 330911 7.8292 NaN Q 0 1 893 3 Wilkes, Mrs. James (Ellen Needs) female 47.0 1 0 363272 7.0000 NaN S 1 2 894 2 Myles, Mr. Thomas Francis male 62.0 0 0 240276 9.6875 NaN Q 0 1 df_test [[ 'PassengerId' , 'Survived' ]] . to_csv ( 'results/women_survived.csv' , index = False ) Submit to Kaggle (2 nd ) \u00b6 Go to Kaggle , log in, and search for Titanic: Machine Learning from Disaster . Join the competition and submit the .csv file. Add a description and submit. Kaggle returns a ranking. At the time of the first submission: score 0.76555 (from 0.62679), rank 7274 (a jump of 2122 places). Explore the Data More! \u00b6 1 2 # kind is the facets sns . factorplot ( x = 'Survived' , col = 'Pclass' , kind = 'count' , data = df_train ) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7fc65f8dcf98&gt; Take-away : Passengers that travelled in first class were more likely to survive. On the other hand, passengers travelling in third class were more unlikely to survive. 1 2 # kind is the facets sns . factorplot ( x = 'Survived' , col = 'Embarked' , kind = 'count' , data = df_train ) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7fc65f937c50&gt; Take-away : Passengers that embarked in Southampton were less likely to survive. EDA with Numeric Variables \u00b6 1 sns . distplot ( df_train . Fare , kde = False ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc6633fb9e8&gt; Take-away : Most passengers paid less than 100 for travelling with the Titanic. 1 2 # Group by Survived, trace histograms of Fare with alpha color 0.6 df_train . groupby ( 'Survived' ) . Fare . hist ( alpha = 0.6 ) 1 2 3 4 Survived 0 Axes(0.125,0.125;0.775x0.775) 1 Axes(0.125,0.125;0.775x0.775) Name: Fare, dtype: object Take-away : It looks as though those that paid more had a higher chance of surviving. 1 2 3 4 # Remove NaN df_train_drop = df_train . dropna () sns . distplot ( df_train_drop . Age , kde = False ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc65f64be80&gt; 1 2 3 4 5 # Alternative to bars or scatter sns . stripplot ( x = 'Survived' , y = 'Fare' , data = df_train , alpha = 0.3 , jitter = True ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc65f5cca58&gt; 1 2 3 4 # Alternative to bars or scatter sns . swarmplot ( x = 'Survived' , y = 'Fare' , data = df_train ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc65f2e4ef0&gt; Take-away : Fare definitely seems to be correlated with survival aboard the Titanic. 1 2 # Group by Survived, describe Fare (descriptive statistics) df_train . groupby ( 'Survived' ) . Fare . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } count mean std min 25% 50% 75% max Survived 0 549.0 22.117887 31.388207 0.0 7.8542 10.5 26.0 263.0000 1 342.0 48.395408 66.596998 0.0 12.4750 26.0 57.0 512.3292 1 2 3 4 5 sns . lmplot ( x = 'Age' , y = 'Fare' , hue = 'Survived' , data = df_train , fit_reg = False , scatter_kws = { 'alpha' : 0.5 }) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7fc65f5ccba8&gt; 1 2 3 4 5 sns . lmplot ( x = 'Age' , y = 'Fare' , hue = 'Survived' , data = df_train , fit_reg = True , scatter_kws = { 'alpha' : 0.5 }) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7fc65f22d710&gt; Take-away : It looks like those who survived either paid quite a bit for their ticket or they were young. 1 sns . pairplot ( df_train_drop , hue = 'Survived' ) 1 &lt;seaborn.axisgrid.PairGrid at 0x7fc65f8826d8&gt; A First Machine Learning Model \u00b6 A decision tree classifier, with the Python scikit-learn. How to Start with Supervised Learning (Take 2) \u00b6 Now that we have done our homeworks with EDA\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import modules import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import re import numpy as np from sklearn import tree from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.model_selection import GridSearchCV # Figures inline and set visualization style % matplotlib inline sns . set () 1 2 3 # Import data df_train = pd . read_csv ( 'data/train.csv' ) df_test = pd . read_csv ( 'data/test.csv' ) 1 df_train . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): PassengerId 891 non-null int64 Survived 891 non-null int64 Pclass 891 non-null int64 Name 891 non-null object Sex 891 non-null object Age 714 non-null float64 SibSp 891 non-null int64 Parch 891 non-null int64 Ticket 891 non-null object Fare 891 non-null float64 Cabin 204 non-null object Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.6+ KB 1 df_test . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 418 entries, 0 to 417 Data columns (total 11 columns): PassengerId 418 non-null int64 Pclass 418 non-null int64 Name 418 non-null object Sex 418 non-null object Age 332 non-null float64 SibSp 418 non-null int64 Parch 418 non-null int64 Ticket 418 non-null object Fare 417 non-null float64 Cabin 91 non-null object Embarked 418 non-null object dtypes: float64(2), int64(4), object(5) memory usage: 36.0+ KB 1 2 3 4 5 6 7 8 9 # Store target variable of training data in a safe place survived_train = df_train . Survived # Concatenate (along the index or axis=1) training and test sets # to preprocess the data a little bit # and make sure that any operations that # we perform on the training set are also # being done on the test data set data = pd . concat ([ df_train . drop ([ 'Survived' ], axis = 1 ), df_test ]) 1 2 # The combined datasets (891+418 entries) data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 11 columns): PassengerId 1309 non-null int64 Pclass 1309 non-null int64 Name 1309 non-null object Sex 1309 non-null object Age 1046 non-null float64 SibSp 1309 non-null int64 Parch 1309 non-null int64 Ticket 1309 non-null object Fare 1308 non-null float64 Cabin 295 non-null object Embarked 1307 non-null object dtypes: float64(2), int64(4), object(5) memory usage: 122.7+ KB Missing values for the Age and Fare columns! Also notice that Cabin and Embarked are also missing values and we will need to deal with that also at some point. However, now we will focus on fixing the numerical variables Age and Fare , using the median of the of these variables where we know them. It\u2019s perfect for dealing with outliers. In other words, the median is useful to use when the distribution of data is skewed. Other ways to impute the missing values would be to use the mean or the mode. 1 2 3 4 5 6 # Impute missing numerical variables where NaN data [ 'Age' ] = data . Age . fillna ( data . Age . median ()) data [ 'Fare' ] = data . Fare . fillna ( data . Fare . median ()) # Check out info of data data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 11 columns): PassengerId 1309 non-null int64 Pclass 1309 non-null int64 Name 1309 non-null object Sex 1309 non-null object Age 1309 non-null float64 SibSp 1309 non-null int64 Parch 1309 non-null int64 Ticket 1309 non-null object Fare 1309 non-null float64 Cabin 295 non-null object Embarked 1307 non-null object dtypes: float64(2), int64(4), object(5) memory usage: 122.7+ KB Encode the data with numbers with .get_dummies () . It creates a new column for female, called Sex_female , and then a new column for Sex_male , which encodes whether that row was male or female (1 if that row is a male - and a 0 if that row is female). Because of drop_first argument, we dropped Sex_female because, essentially, these new columns, Sex_female and Sex_male , encode the same information. 1 2 data = pd . get_dummies ( data , columns = [ 'Sex' ], drop_first = True ) data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Pclass Name Age SibSp Parch Ticket Fare Cabin Embarked Sex_male 0 1 3 Braund, Mr. Owen Harris 22.0 1 0 A/5 21171 7.2500 NaN S 1 1 2 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 38.0 1 0 PC 17599 71.2833 C85 C 0 2 3 3 Heikkinen, Miss. Laina 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 0 1 2 3 # Select columns and view head data = data [[ 'Sex_male' , 'Fare' , 'Age' , 'Pclass' , 'SibSp' ]] data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sex_male Fare Age Pclass SibSp 0 1 7.2500 22.0 3 1 1 0 71.2833 38.0 1 1 2 0 7.9250 26.0 3 0 1 data . info () 1 2 3 4 5 6 7 8 9 10 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 5 columns): Sex_male 1309 non-null uint8 Fare 1309 non-null float64 Age 1309 non-null float64 Pclass 1309 non-null int64 SibSp 1309 non-null int64 dtypes: float64(2), int64(2), uint8(1) memory usage: 52.4 KB All the entries are non-null now. Build a Decision Tree Classifier \u00b6 \u201cWas Sex_male \u201d less than 0.5? In other words, was the data point a female. If the answer to this question is True , we can go down to the left and we get Survived . If False , we go down the right and we get Dead . That the first branch is on Male or not and that Male results in a prediction of Dead . The gini coefficient is used to make these decisions. Before fitting a model to the data, split it back into training and test sets: 1 2 data_train = data . iloc [: 891 ] data_test = data . iloc [ 891 :] scikit-learn requires the data as arrays, not DataFrames. Transform them. 1 2 3 4 5 X = data_train . values test = data_test . values # and from above: survived_train = df_train.Survived y = survived_train . values 1 X 1 2 3 4 5 6 7 array([[ 1. , 7.25 , 22. , 3. , 1. ], [ 0. , 71.2833, 38. , 1. , 1. ], [ 0. , 7.925 , 26. , 3. , 0. ], ..., [ 0. , 23.45 , 28. , 3. , 1. ], [ 1. , 30. , 26. , 1. , 0. ], [ 1. , 7.75 , 32. , 3. , 0. ]]) Build a decision tree classifier! First create such a model with max_depth=3 and then fit it the data. Name the model clf , which is short for \u201cClassifier\u201d. 1 2 3 4 5 6 # Instantiate model and fit to data # The max depth is set at 3 clf = tree . DecisionTreeClassifier ( max_depth = 3 ) # X is the indenpendent variables, y is the dependent variable clf . fit ( X , y ) 1 2 3 4 5 6 DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=3, max_features=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, presort=False, random_state=None, splitter='best') Make predictions on the test set. 1 2 3 4 5 6 7 # Make predictions and store in 'Survived' column of df_test Y_pred = clf . predict ( test ) df_test [ 'Survived' ] = Y_pred # Save it df_test [[ 'PassengerId' , 'Survived' ]] . to_csv ( 'results/1st_dec_tree.csv' , index = False ) Submit to Kaggle (3 rd ) \u00b6 Go to Kaggle , log in, and search for Titanic: Machine Learning from Disaster . Join the competition and submit the .csv file. Add a description and submit. Kaggle returns a ranking. At the time of the first submission: score 0.77990 (from 0.76555), rank 4828 (a jump of 2434 places). 1 2 3 # Compute accuracy on the training set train_accuracy = clf . score ( X , y ) train_accuracy 1 0.8271604938271605 A Decision Tree Classifier in More Details \u00b6 The Decision Tree Classifier we just built had a max_depth=3 and it looks like this: The maximal distance between the first decision and the last is 3, so that\u2019s max_depth=3 . Generate images with graphviz . 1 2 3 4 5 6 import graphviz tree_data = tree . export_graphviz ( clf , out_file = None ) graph = graphviz . Source ( tree_data ) # Save the pdf graph . render ( \"img/tree_data\" ) 1 'img/tree_data.pdf' We get a tree_data test file (the code for generating the image) and a pdf file. We can generate an image. 1 2 feature_names = list ( data_train ) feature_names 1 ['Sex_male', 'Fare', 'Age', 'Pclass', 'SibSp'] 1 2 3 4 5 6 7 8 9 #data_train #data_test tree_data = tree . export_graphviz ( clf , out_file = None , feature_names = feature_names , class_names = None , filled = True , rounded = True , special_characters = True ) graph = graphviz . Source ( tree_data ) graph IN THE NOTEBOOK ONLY! In building this model, what we are essentially doing is creating a decision boundary in the space of feature variables. Why Choose max_depth=3 ? \u00b6 The depth of the tree is known as a hyperparameter, which means a parameter we need to decide before we fit the model to the data. If we choose a larger max_depth , we will get a more complex decision boundary; the bias-variance trade-off. If the decision boundary is too complex, we can overfit to the data, which means that the model will be describing noise as well as signal. If the max_depth is too small, we might be underfitting the data, meaning that the model doesn\u2019t contain enough of the signal. One way is to hold out a test set from the training data. We can then fit the model to the training data, make predictions on the test set and see how well the prediction does on the test set. Split the original training data into training and test sets: 1 X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.33 , random_state = 42 , stratify = y ) Iterate over values of max_depth ranging from 1 to 9 and plot the accuracy of the models on training and test sets: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # Setup arrays to store train and test accuracies dep = np . arange ( 1 , 9 ) train_accuracy = np . empty ( len ( dep )) test_accuracy = np . empty ( len ( dep )) # Loop over different values of k for i , k in enumerate ( dep ): # Setup a k-NN Classifier with k neighbors: knn clf = tree . DecisionTreeClassifier ( max_depth = k ) # Fit the classifier to the training data clf . fit ( X_train , y_train ) # Compute accuracy on the training set train_accuracy [ i ] = clf . score ( X_train , y_train ) # Compute accuracy on the testing set test_accuracy [ i ] = clf . score ( X_test , y_test ) # Generate plot plt . title ( 'clf: Varying depth of tree' ) plt . plot ( dep , test_accuracy , label = 'Testing Accuracy' ) plt . plot ( dep , train_accuracy , label = 'Training Accuracy' ) plt . legend () plt . xlabel ( 'Depth of tree' ) plt . ylabel ( 'Accuracy' ) plt . show () At max_depth-3 , we get the same results as with the model before (around 82%). As we increase the max_depth, we are going to fit better and better to the training data because we will make decisions that describe the training data. The accuracy for the training data will go up and up, but we see that this doesn\u2019t happen for the test data: we are overfitting. So that\u2019s why we chose max_depth=3 . Feature Engineering \u00b6 https://www.datacamp.com/community/tutorials/feature-engineering-kaggle A process where we use domain knowledge of the data to create additional relevant features (create new columns, transform variables and more) that increase the predictive power of the learning algorithm and make the machine learning models perform even better. How to Start with Feature Engineering \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 # Imports import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import re import numpy as np from sklearn import tree from sklearn.model_selection import GridSearchCV # Figures inline and set visualization style % matplotlib inline sns . set () 1 2 3 4 5 6 7 8 9 10 11 12 # Import data df_train = pd . read_csv ( 'data/train.csv' ) df_test = pd . read_csv ( 'data/test.csv' ) # Store target variable of training data in a safe place survived_train = df_train . Survived # Concatenate training and test sets data = pd . concat ([ df_train . drop ([ 'Survived' ], axis = 1 ), df_test ]) # View head data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 11 columns): PassengerId 1309 non-null int64 Pclass 1309 non-null int64 Name 1309 non-null object Sex 1309 non-null object Age 1046 non-null float64 SibSp 1309 non-null int64 Parch 1309 non-null int64 Ticket 1309 non-null object Fare 1308 non-null float64 Cabin 295 non-null object Embarked 1307 non-null object dtypes: float64(2), int64(4), object(5) memory usage: 122.7+ KB Why Feature Engineer At All? \u00b6 Titanic\u2019s Passenger Titles \u00b6 1 2 # View head of 'Name' column data . Name . tail () 1 2 3 4 5 6 413 Spector, Mr. Woolf 414 Oliva y Ocana, Dona. Fermina 415 Saether, Mr. Simon Sivertsen 416 Ware, Mr. Frederick 417 Peter, Master. Michael J Name: Name, dtype: object These titles of course give us information on social status, profession, etc., which in the end could tell us something more about survival. use regular expressions to extract the title and store it in a new column \u2018Title\u2019: 1 2 3 # Extract Title from Name, store in column and plot barplot # One upper character, one lower character, one dot data [ 'Title' ] = data . Name . apply ( lambda x : re . search ( ' ([A-Z][a-z]+)\\.' , x ) . group ( 1 )) 1 2 # New column Title is a new feature of the dataset data . Title . head ( 3 ) 1 2 3 4 0 Mr 1 Mrs 2 Miss Name: Title, dtype: object 1 2 sns . countplot ( x = 'Title' , data = data ); plt . xticks ( rotation = 45 ); 1 2 3 4 # Substitute some title with their English form data [ 'Title' ] = data [ 'Title' ] . replace ({ 'Mlle' : 'Miss' , 'Mme' : 'Mrs' , 'Ms' : 'Miss' }) # Gather exceptions data [ 'Title' ] = data [ 'Title' ] . replace ([ 'Don' , 'Dona' , 'Rev' , 'Dr' , 'Major' , 'Lady' , 'Sir' , 'Col' , 'Capt' , 'Countess' , 'Jonkheer' ], 'Special' ) 1 data . Title . head ( 3 ) 1 2 3 4 0 Mr 1 Mrs 2 Miss Name: Title, dtype: object 1 2 sns . countplot ( x = 'Title' , data = data ); plt . xticks ( rotation = 45 ); 1 2 # View tail of data (for change) data . tail ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Title 415 1307 3 Saether, Mr. Simon Sivertsen male 38.5 0 0 SOTON/O.Q. 3101262 7.2500 NaN S Mr 416 1308 3 Ware, Mr. Frederick male NaN 0 0 359309 8.0500 NaN S Mr 417 1309 3 Peter, Master. Michael J male NaN 1 1 2668 22.3583 NaN C Master Passenger\u2019s Cabins \u00b6 There are several NaNs or missing values in the Cabin column. Those NaNs didn\u2019t have a cabin, which could tell us something about survival. 1 2 # View head of data data [[ 'Name' , 'PassengerId' , 'Ticket' , 'Cabin' ]] . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Name PassengerId Ticket Cabin 0 Braund, Mr. Owen Harris 1 A/5 21171 NaN 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 2 PC 17599 C85 2 Heikkinen, Miss. Laina 3 STON/O2. 3101282 NaN 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) 4 113803 C123 4 Allen, Mr. William Henry 5 373450 NaN 1 2 3 4 5 6 # Did they have a Cabin? # Return True is the passenger has a cabin data [ 'Has_Cabin' ] = ~ data . Cabin . isnull () # # View head of data data [[ 'Name' , 'PassengerId' , 'Ticket' , 'Cabin' , 'Has_Cabin' ]] . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Name PassengerId Ticket Cabin Has_Cabin 0 Braund, Mr. Owen Harris 1 A/5 21171 NaN False 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 2 PC 17599 C85 True 2 Heikkinen, Miss. Laina 3 STON/O2. 3101282 NaN False 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) 4 113803 C123 True 4 Allen, Mr. William Henry 5 373450 NaN False Drop these columns, except Has_Cabin , in the actual data DataFrame; make sure to use the inplace argument in the .drop () method and set it to True : 1 2 3 # Drop columns and view head data . drop ([ 'Cabin' , 'Name' , 'PassengerId' , 'Ticket' ], axis = 1 , inplace = True ) data . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Sex Age SibSp Parch Fare Embarked Title Has_Cabin 0 3 male 22.0 1 0 7.2500 S Mr False 1 1 female 38.0 1 0 71.2833 C Mrs True 2 3 female 26.0 0 0 7.9250 S Miss False 3 1 female 35.0 1 0 53.1000 S Mrs True 4 3 male 35.0 0 0 8.0500 S Mr False New features such as Title and Has_Cabin . Features that don\u2019t add any more useful information for the machine learning model are now dropped from the DataFrame. Handling Missing Values \u00b6 1 data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 9 columns): Pclass 1309 non-null int64 Sex 1309 non-null object Age 1046 non-null float64 SibSp 1309 non-null int64 Parch 1309 non-null int64 Fare 1308 non-null float64 Embarked 1307 non-null object Title 1309 non-null object Has_Cabin 1309 non-null bool dtypes: bool(1), float64(2), int64(3), object(3) memory usage: 133.3+ KB Missing values in Age , Fare , and Embarked . Impute these missing values with the help of .fillna () and use the median to fill in the columns (or the mean, the mode, etc.). 1 2 3 4 5 # Impute missing values for Age, Fare, Embarked data [ 'Age' ] = data . Age . fillna ( data . Age . median ()) data [ 'Fare' ] = data . Fare . fillna ( data . Fare . median ()) data [ 'Embarked' ] = data [ 'Embarked' ] . fillna ( 'S' ) data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 9 columns): Pclass 1309 non-null int64 Sex 1309 non-null object Age 1309 non-null float64 SibSp 1309 non-null int64 Parch 1309 non-null int64 Fare 1309 non-null float64 Embarked 1309 non-null object Title 1309 non-null object Has_Cabin 1309 non-null bool dtypes: bool(1), float64(2), int64(3), object(3) memory usage: 133.3+ KB 1 data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Sex Age SibSp Parch Fare Embarked Title Has_Cabin 0 3 male 22.0 1 0 7.2500 S Mr False 1 1 female 38.0 1 0 71.2833 C Mrs True 2 3 female 26.0 0 0 7.9250 S Miss False Binning Numerical Data \u00b6 1 2 3 4 5 6 # Binning numerical columns # q=4 means 4 quantiles 0, 1, 2, 3 # labels=False are numbers, not characters data [ 'CatAge' ] = pd . qcut ( data . Age , q = 4 , labels = False ) data [ 'CatFare' ] = pd . qcut ( data . Fare , q = 4 , labels = False ) data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Sex Age SibSp Parch Fare Embarked Title Has_Cabin CatAge CatFare 0 3 male 22.0 1 0 7.2500 S Mr False 0 0 1 1 female 38.0 1 0 71.2833 C Mrs True 3 3 2 3 female 26.0 0 0 7.9250 S Miss False 1 1 1 2 3 # Drop the 'Age' and 'Fare' columns data = data . drop ([ 'Age' , 'Fare' ], axis = 1 ) data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Sex SibSp Parch Embarked Title Has_Cabin CatAge CatFare 0 3 male 1 0 S Mr False 0 0 1 1 female 1 0 C Mrs True 3 3 2 3 female 0 0 S Miss False 1 1 Number of Members in Family Onboard \u00b6 Create a new column, which is the number of members in families that were onboard of the Titanic. 1 2 3 4 5 6 # Create column of number of Family members onboard data [ 'Fam_Size' ] = data . Parch + data . SibSp # Drop columns data = data . drop ([ 'SibSp' , 'Parch' ], axis = 1 ) data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Sex Embarked Title Has_Cabin CatAge CatFare Fam_Size 0 3 male S Mr False 0 0 1 1 1 female C Mrs True 3 3 1 2 3 female S Miss False 1 1 0 Transforming all Variables into Numerical Variables \u00b6 Transform all variables into numeric ones. We do this because machine learning models generally take numeric input. 1 2 3 4 5 6 7 8 # Transform into binary variables # Has_Cabin is a boolean # Sex becomes Sex_male=1 or 0 # Embarked becomes Embarked_Q=1 or 0, Embarked_... # Title becomes Title_Miss=1 or 0, ... # The former variables are dropped, only the later variables remain data_dum = pd . get_dummies ( data , drop_first = True ) data_dum . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Has_Cabin CatAge CatFare Fam_Size Sex_male Embarked_Q Embarked_S Title_Miss Title_Mr Title_Mrs Title_Special 0 3 False 0 0 1 1 0 1 0 1 0 0 1 1 True 3 3 1 0 0 0 0 0 1 0 2 3 False 1 1 0 0 0 1 1 0 0 0 First, split the data back into training and test sets. Then, transform them into arrays: 1 2 3 4 5 6 7 8 # Split into test.train data_train = data_dum . iloc [: 891 ] data_test = data_dum . iloc [ 891 :] # Transform into arrays for scikit-learn X = data_train . values test = data_test . values y = survived_train . values Building models with a New Dataset! \u00b6 Build a decision tree on a brand new feature-engineered dataset. To choose the hyperparameter max_depth , we will use a variation on test train split called \u201ccross validation\u201d. Split the dataset into 5 groups or folds. Then we hold out the first fold as a test set, fit the model on the remaining four folds, predict on the test set and compute the metric of interest. Next, we hold out the second fold as the test set, fit on the remaining data, predict on the test set and compute the metric of interest. Then similarly with the third, fourth and fifth. As a result, we get five values of accuracy, from which we can compute statistics of interest, such as the median and/or mean and 95% confidence intervals. We do this for each value of each hyperparameter that we are tuning and choose the set of hyperparameters that performs the best. This is called grid search. In the following, we will use cross validation and grid search to choose the best max_depth for the new feature-engineered dataset: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Setup the hyperparameter grid dep = np . arange ( 1 , 9 ) param_grid = { 'max_depth' : dep } # Instantiate a decision tree classifier: clf clf = tree . DecisionTreeClassifier () # Instantiate the GridSearchCV object: clf_cv clf_cv = GridSearchCV ( clf , param_grid = param_grid , cv = 5 ) # Fit it to the data clf_cv . fit ( X , y ) # Print the tuned parameter and score print ( \"Tuned Decision Tree Parameters: {}\" . format ( clf_cv . best_params_ )) print ( \"Best score is {}\" . format ( clf_cv . best_score_ )) 1 2 Tuned Decision Tree Parameters: {'max_depth': 3} Best score is 0.8294051627384961 Make predictions on the test set, create a new column Survived and store the predictions in it. Save the PassengerId and Survived columns of df_test to a .csv and submit it to Kaggle. 1 2 3 Y_pred = clf_cv . predict ( test ) df_test [ 'Survived' ] = Y_pred df_test [[ 'PassengerId' , 'Survived' ]] . to_csv ( 'results/dec_tree_feat_eng.csv' , index = False ) Submit to Kaggle (4 th ) \u00b6 Go to Kaggle , log in, and search for Titanic: Machine Learning from Disaster . Join the competition and submit the .csv file. Add a description and submit. Kaggle returns a ranking. At the time of the first submission: score 0.78468 (from 0.77980), rank 4009 (a jump of 819 places).","title":"EDA, Machine Learning, Feature Engineering, and Kaggle"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#how-to-start-with-supervised-learning-take-1","text":"Approach supervised learning is the following: Perform an Exploratory Data Analysis (EDA) on a dataset; Build a quick and dirty model, or a baseline model, which can serve as a comparison against later models that we will build; Iterate this process. We will do more EDA and build another model; Engineer features: take the features that we already have and combine them or extract more information from them to eventually come to the last point, which is Get a model that performs better.","title":"How to Start with Supervised Learning (Take 1)"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#import-the-data-and-explore-it","text":"1 2 3 4 5 6 7 8 9 10 # Import modules import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from sklearn import tree from sklearn.metrics import accuracy_score # Figures inline and set visualization style % matplotlib inline sns . set () 1 2 3 4 5 6 # Import test and train datasets df_train = pd . read_csv ( 'data/train.csv' ) df_test = pd . read_csv ( 'data/test.csv' ) # View first lines of training data df_train . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S The target variable is the variable we are trying to predict; Other variables are known as \u201cfeatures\u201d (or \u201cpredictor variables\u201d, the features that we are using to predict the target variable). Note that the df_test DataFrame doesn\u2019t have the Survived column because this is what we will try to predict! 1 2 # View first lines of test data df_test . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 892 3 Kelly, Mr. James male 34.5 0 0 330911 7.8292 NaN Q 1 893 3 Wilkes, Mrs. James (Ellen Needs) female 47.0 1 0 363272 7.0000 NaN S 2 894 2 Myles, Mr. Thomas Francis male 62.0 0 0 240276 9.6875 NaN Q 1 df_train . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): PassengerId 891 non-null int64 Survived 891 non-null int64 Pclass 891 non-null int64 Name 891 non-null object Sex 891 non-null object Age 714 non-null float64 SibSp 891 non-null int64 Parch 891 non-null int64 Ticket 891 non-null object Fare 891 non-null float64 Cabin 204 non-null object Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.6+ KB 1 df_train . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Survived Pclass Age SibSp Parch Fare count 891.000000 891.000000 891.000000 714.000000 891.000000 891.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 0.381594 32.204208 std 257.353842 0.486592 0.836071 14.526497 1.102743 0.806057 49.693429 min 1.000000 0.000000 1.000000 0.420000 0.000000 0.000000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 0.000000 7.910400 50% 446.000000 0.000000 3.000000 28.000000 0.000000 0.000000 14.454200 75% 668.500000 1.000000 3.000000 38.000000 1.000000 0.000000 31.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 6.000000 512.329200","title":"Import the Data and Explore it"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#visual-exploratory-data-analysis-eda-and-a-first-model","text":"With seaborn. 1 sns . countplot ( x = 'Survived' , data = df_train ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc65fa0e668&gt; Take-away : in the training set, less people survived than didn\u2019t. Let\u2019s then build a first model that predicts that nobody survived. This is a bad model as we know that people survived. But it gives us a baseline : any model that we build later needs to do better than this one. Create a column Survived for df_test that encodes \u2018did not survive\u2019 for all rows; Save PassengerId and Survived columns of df_test to a .csv and submit to Kaggle. 1 2 df_test [ 'Survived' ] = 0 df_test [[ 'PassengerId' , 'Survived' ]] . to_csv ( 'results/no_survivors.csv' , index = False )","title":"Visual Exploratory Data Analysis (EDA) and a First Model"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-1st","text":"Go to Kaggle , log in, and search for Titanic: Machine Learning from Disaster . Join the competition and submit the .csv file. Add a description and submit. Kaggle returns a ranking. At the time of the first submission: score 0.63679, rank 9387.","title":"Submit to Kaggle (1st)"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#eda-on-feature-variables","text":"Do some more Exploratory Data Analysis and build another model! 1 sns . countplot ( x = 'Sex' , data = df_train ); 1 2 # kind is the facets sns . factorplot ( x = 'Survived' , col = 'Sex' , kind = 'count' , data = df_train ) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7fc65fa35a20&gt; Take-away : Women were more likely to survive than men. With this take-away, we can use pandas to figure out how many women and how many men survived: 1 df_train . head ( 1 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.25 NaN S 1 2 # Chain a group by Sex, sum Survived df_train . groupby ([ 'Sex' ]) . Survived . sum () 1 2 3 4 Sex female 233 male 109 Name: Survived, dtype: int64 1 2 3 4 5 6 # Chain calculations print ( df_train [ df_train . Sex == 'female' ] . Survived . sum () / df_train [ df_train . Sex == 'female' ] . Survived . count ()) print ( df_train [ df_train . Sex == 'male' ] . Survived . sum () / df_train [ df_train . Sex == 'male' ] . Survived . count ()) 1 2 0.742038216561 0.188908145581 74% of women survived, while 19% of men survived. Build a second model and predict that all women survived and all men didn\u2019t. Create a column Survived for df_test that encodes the above prediction. Save PassengerId and Survived columns of df_test to a .csv and submit to Kaggle. 1 2 3 df_test [ 'Survived' ] = df_test . Sex == 'female' df_test [ 'Survived' ] = df_test . Survived . apply ( lambda x : int ( x )) df_test . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Survived 0 892 3 Kelly, Mr. James male 34.5 0 0 330911 7.8292 NaN Q 0 1 893 3 Wilkes, Mrs. James (Ellen Needs) female 47.0 1 0 363272 7.0000 NaN S 1 2 894 2 Myles, Mr. Thomas Francis male 62.0 0 0 240276 9.6875 NaN Q 0 1 df_test [[ 'PassengerId' , 'Survived' ]] . to_csv ( 'results/women_survived.csv' , index = False )","title":"EDA on Feature Variables"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-2nd","text":"Go to Kaggle , log in, and search for Titanic: Machine Learning from Disaster . Join the competition and submit the .csv file. Add a description and submit. Kaggle returns a ranking. At the time of the first submission: score 0.76555 (from 0.62679), rank 7274 (a jump of 2122 places).","title":"Submit to Kaggle (2nd)"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#explore-the-data-more","text":"1 2 # kind is the facets sns . factorplot ( x = 'Survived' , col = 'Pclass' , kind = 'count' , data = df_train ) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7fc65f8dcf98&gt; Take-away : Passengers that travelled in first class were more likely to survive. On the other hand, passengers travelling in third class were more unlikely to survive. 1 2 # kind is the facets sns . factorplot ( x = 'Survived' , col = 'Embarked' , kind = 'count' , data = df_train ) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7fc65f937c50&gt; Take-away : Passengers that embarked in Southampton were less likely to survive.","title":"Explore the Data More!"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#eda-with-numeric-variables","text":"1 sns . distplot ( df_train . Fare , kde = False ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc6633fb9e8&gt; Take-away : Most passengers paid less than 100 for travelling with the Titanic. 1 2 # Group by Survived, trace histograms of Fare with alpha color 0.6 df_train . groupby ( 'Survived' ) . Fare . hist ( alpha = 0.6 ) 1 2 3 4 Survived 0 Axes(0.125,0.125;0.775x0.775) 1 Axes(0.125,0.125;0.775x0.775) Name: Fare, dtype: object Take-away : It looks as though those that paid more had a higher chance of surviving. 1 2 3 4 # Remove NaN df_train_drop = df_train . dropna () sns . distplot ( df_train_drop . Age , kde = False ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc65f64be80&gt; 1 2 3 4 5 # Alternative to bars or scatter sns . stripplot ( x = 'Survived' , y = 'Fare' , data = df_train , alpha = 0.3 , jitter = True ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc65f5cca58&gt; 1 2 3 4 # Alternative to bars or scatter sns . swarmplot ( x = 'Survived' , y = 'Fare' , data = df_train ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc65f2e4ef0&gt; Take-away : Fare definitely seems to be correlated with survival aboard the Titanic. 1 2 # Group by Survived, describe Fare (descriptive statistics) df_train . groupby ( 'Survived' ) . Fare . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } count mean std min 25% 50% 75% max Survived 0 549.0 22.117887 31.388207 0.0 7.8542 10.5 26.0 263.0000 1 342.0 48.395408 66.596998 0.0 12.4750 26.0 57.0 512.3292 1 2 3 4 5 sns . lmplot ( x = 'Age' , y = 'Fare' , hue = 'Survived' , data = df_train , fit_reg = False , scatter_kws = { 'alpha' : 0.5 }) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7fc65f5ccba8&gt; 1 2 3 4 5 sns . lmplot ( x = 'Age' , y = 'Fare' , hue = 'Survived' , data = df_train , fit_reg = True , scatter_kws = { 'alpha' : 0.5 }) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7fc65f22d710&gt; Take-away : It looks like those who survived either paid quite a bit for their ticket or they were young. 1 sns . pairplot ( df_train_drop , hue = 'Survived' ) 1 &lt;seaborn.axisgrid.PairGrid at 0x7fc65f8826d8&gt;","title":"EDA with Numeric Variables"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#a-first-machine-learning-model","text":"A decision tree classifier, with the Python scikit-learn.","title":"A First Machine Learning Model"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#how-to-start-with-supervised-learning-take-2","text":"Now that we have done our homeworks with EDA\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import modules import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import re import numpy as np from sklearn import tree from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.model_selection import GridSearchCV # Figures inline and set visualization style % matplotlib inline sns . set () 1 2 3 # Import data df_train = pd . read_csv ( 'data/train.csv' ) df_test = pd . read_csv ( 'data/test.csv' ) 1 df_train . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): PassengerId 891 non-null int64 Survived 891 non-null int64 Pclass 891 non-null int64 Name 891 non-null object Sex 891 non-null object Age 714 non-null float64 SibSp 891 non-null int64 Parch 891 non-null int64 Ticket 891 non-null object Fare 891 non-null float64 Cabin 204 non-null object Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.6+ KB 1 df_test . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 418 entries, 0 to 417 Data columns (total 11 columns): PassengerId 418 non-null int64 Pclass 418 non-null int64 Name 418 non-null object Sex 418 non-null object Age 332 non-null float64 SibSp 418 non-null int64 Parch 418 non-null int64 Ticket 418 non-null object Fare 417 non-null float64 Cabin 91 non-null object Embarked 418 non-null object dtypes: float64(2), int64(4), object(5) memory usage: 36.0+ KB 1 2 3 4 5 6 7 8 9 # Store target variable of training data in a safe place survived_train = df_train . Survived # Concatenate (along the index or axis=1) training and test sets # to preprocess the data a little bit # and make sure that any operations that # we perform on the training set are also # being done on the test data set data = pd . concat ([ df_train . drop ([ 'Survived' ], axis = 1 ), df_test ]) 1 2 # The combined datasets (891+418 entries) data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 11 columns): PassengerId 1309 non-null int64 Pclass 1309 non-null int64 Name 1309 non-null object Sex 1309 non-null object Age 1046 non-null float64 SibSp 1309 non-null int64 Parch 1309 non-null int64 Ticket 1309 non-null object Fare 1308 non-null float64 Cabin 295 non-null object Embarked 1307 non-null object dtypes: float64(2), int64(4), object(5) memory usage: 122.7+ KB Missing values for the Age and Fare columns! Also notice that Cabin and Embarked are also missing values and we will need to deal with that also at some point. However, now we will focus on fixing the numerical variables Age and Fare , using the median of the of these variables where we know them. It\u2019s perfect for dealing with outliers. In other words, the median is useful to use when the distribution of data is skewed. Other ways to impute the missing values would be to use the mean or the mode. 1 2 3 4 5 6 # Impute missing numerical variables where NaN data [ 'Age' ] = data . Age . fillna ( data . Age . median ()) data [ 'Fare' ] = data . Fare . fillna ( data . Fare . median ()) # Check out info of data data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 11 columns): PassengerId 1309 non-null int64 Pclass 1309 non-null int64 Name 1309 non-null object Sex 1309 non-null object Age 1309 non-null float64 SibSp 1309 non-null int64 Parch 1309 non-null int64 Ticket 1309 non-null object Fare 1309 non-null float64 Cabin 295 non-null object Embarked 1307 non-null object dtypes: float64(2), int64(4), object(5) memory usage: 122.7+ KB Encode the data with numbers with .get_dummies () . It creates a new column for female, called Sex_female , and then a new column for Sex_male , which encodes whether that row was male or female (1 if that row is a male - and a 0 if that row is female). Because of drop_first argument, we dropped Sex_female because, essentially, these new columns, Sex_female and Sex_male , encode the same information. 1 2 data = pd . get_dummies ( data , columns = [ 'Sex' ], drop_first = True ) data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Pclass Name Age SibSp Parch Ticket Fare Cabin Embarked Sex_male 0 1 3 Braund, Mr. Owen Harris 22.0 1 0 A/5 21171 7.2500 NaN S 1 1 2 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 38.0 1 0 PC 17599 71.2833 C85 C 0 2 3 3 Heikkinen, Miss. Laina 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 0 1 2 3 # Select columns and view head data = data [[ 'Sex_male' , 'Fare' , 'Age' , 'Pclass' , 'SibSp' ]] data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sex_male Fare Age Pclass SibSp 0 1 7.2500 22.0 3 1 1 0 71.2833 38.0 1 1 2 0 7.9250 26.0 3 0 1 data . info () 1 2 3 4 5 6 7 8 9 10 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 5 columns): Sex_male 1309 non-null uint8 Fare 1309 non-null float64 Age 1309 non-null float64 Pclass 1309 non-null int64 SibSp 1309 non-null int64 dtypes: float64(2), int64(2), uint8(1) memory usage: 52.4 KB All the entries are non-null now.","title":"How to Start with Supervised Learning (Take 2)"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#build-a-decision-tree-classifier","text":"\u201cWas Sex_male \u201d less than 0.5? In other words, was the data point a female. If the answer to this question is True , we can go down to the left and we get Survived . If False , we go down the right and we get Dead . That the first branch is on Male or not and that Male results in a prediction of Dead . The gini coefficient is used to make these decisions. Before fitting a model to the data, split it back into training and test sets: 1 2 data_train = data . iloc [: 891 ] data_test = data . iloc [ 891 :] scikit-learn requires the data as arrays, not DataFrames. Transform them. 1 2 3 4 5 X = data_train . values test = data_test . values # and from above: survived_train = df_train.Survived y = survived_train . values 1 X 1 2 3 4 5 6 7 array([[ 1. , 7.25 , 22. , 3. , 1. ], [ 0. , 71.2833, 38. , 1. , 1. ], [ 0. , 7.925 , 26. , 3. , 0. ], ..., [ 0. , 23.45 , 28. , 3. , 1. ], [ 1. , 30. , 26. , 1. , 0. ], [ 1. , 7.75 , 32. , 3. , 0. ]]) Build a decision tree classifier! First create such a model with max_depth=3 and then fit it the data. Name the model clf , which is short for \u201cClassifier\u201d. 1 2 3 4 5 6 # Instantiate model and fit to data # The max depth is set at 3 clf = tree . DecisionTreeClassifier ( max_depth = 3 ) # X is the indenpendent variables, y is the dependent variable clf . fit ( X , y ) 1 2 3 4 5 6 DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=3, max_features=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, presort=False, random_state=None, splitter='best') Make predictions on the test set. 1 2 3 4 5 6 7 # Make predictions and store in 'Survived' column of df_test Y_pred = clf . predict ( test ) df_test [ 'Survived' ] = Y_pred # Save it df_test [[ 'PassengerId' , 'Survived' ]] . to_csv ( 'results/1st_dec_tree.csv' , index = False )","title":"Build a Decision Tree Classifier"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-3rd","text":"Go to Kaggle , log in, and search for Titanic: Machine Learning from Disaster . Join the competition and submit the .csv file. Add a description and submit. Kaggle returns a ranking. At the time of the first submission: score 0.77990 (from 0.76555), rank 4828 (a jump of 2434 places). 1 2 3 # Compute accuracy on the training set train_accuracy = clf . score ( X , y ) train_accuracy 1 0.8271604938271605","title":"Submit to Kaggle (3rd)"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#a-decision-tree-classifier-in-more-details","text":"The Decision Tree Classifier we just built had a max_depth=3 and it looks like this: The maximal distance between the first decision and the last is 3, so that\u2019s max_depth=3 . Generate images with graphviz . 1 2 3 4 5 6 import graphviz tree_data = tree . export_graphviz ( clf , out_file = None ) graph = graphviz . Source ( tree_data ) # Save the pdf graph . render ( \"img/tree_data\" ) 1 'img/tree_data.pdf' We get a tree_data test file (the code for generating the image) and a pdf file. We can generate an image. 1 2 feature_names = list ( data_train ) feature_names 1 ['Sex_male', 'Fare', 'Age', 'Pclass', 'SibSp'] 1 2 3 4 5 6 7 8 9 #data_train #data_test tree_data = tree . export_graphviz ( clf , out_file = None , feature_names = feature_names , class_names = None , filled = True , rounded = True , special_characters = True ) graph = graphviz . Source ( tree_data ) graph IN THE NOTEBOOK ONLY! In building this model, what we are essentially doing is creating a decision boundary in the space of feature variables.","title":"A Decision Tree Classifier in More Details"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#why-choose-max_depth3","text":"The depth of the tree is known as a hyperparameter, which means a parameter we need to decide before we fit the model to the data. If we choose a larger max_depth , we will get a more complex decision boundary; the bias-variance trade-off. If the decision boundary is too complex, we can overfit to the data, which means that the model will be describing noise as well as signal. If the max_depth is too small, we might be underfitting the data, meaning that the model doesn\u2019t contain enough of the signal. One way is to hold out a test set from the training data. We can then fit the model to the training data, make predictions on the test set and see how well the prediction does on the test set. Split the original training data into training and test sets: 1 X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.33 , random_state = 42 , stratify = y ) Iterate over values of max_depth ranging from 1 to 9 and plot the accuracy of the models on training and test sets: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # Setup arrays to store train and test accuracies dep = np . arange ( 1 , 9 ) train_accuracy = np . empty ( len ( dep )) test_accuracy = np . empty ( len ( dep )) # Loop over different values of k for i , k in enumerate ( dep ): # Setup a k-NN Classifier with k neighbors: knn clf = tree . DecisionTreeClassifier ( max_depth = k ) # Fit the classifier to the training data clf . fit ( X_train , y_train ) # Compute accuracy on the training set train_accuracy [ i ] = clf . score ( X_train , y_train ) # Compute accuracy on the testing set test_accuracy [ i ] = clf . score ( X_test , y_test ) # Generate plot plt . title ( 'clf: Varying depth of tree' ) plt . plot ( dep , test_accuracy , label = 'Testing Accuracy' ) plt . plot ( dep , train_accuracy , label = 'Training Accuracy' ) plt . legend () plt . xlabel ( 'Depth of tree' ) plt . ylabel ( 'Accuracy' ) plt . show () At max_depth-3 , we get the same results as with the model before (around 82%). As we increase the max_depth, we are going to fit better and better to the training data because we will make decisions that describe the training data. The accuracy for the training data will go up and up, but we see that this doesn\u2019t happen for the test data: we are overfitting. So that\u2019s why we chose max_depth=3 .","title":"Why Choose max_depth=3?"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#feature-engineering","text":"https://www.datacamp.com/community/tutorials/feature-engineering-kaggle A process where we use domain knowledge of the data to create additional relevant features (create new columns, transform variables and more) that increase the predictive power of the learning algorithm and make the machine learning models perform even better.","title":"Feature Engineering"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#how-to-start-with-feature-engineering","text":"1 2 3 4 5 6 7 8 9 10 11 12 # Imports import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import re import numpy as np from sklearn import tree from sklearn.model_selection import GridSearchCV # Figures inline and set visualization style % matplotlib inline sns . set () 1 2 3 4 5 6 7 8 9 10 11 12 # Import data df_train = pd . read_csv ( 'data/train.csv' ) df_test = pd . read_csv ( 'data/test.csv' ) # Store target variable of training data in a safe place survived_train = df_train . Survived # Concatenate training and test sets data = pd . concat ([ df_train . drop ([ 'Survived' ], axis = 1 ), df_test ]) # View head data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 11 columns): PassengerId 1309 non-null int64 Pclass 1309 non-null int64 Name 1309 non-null object Sex 1309 non-null object Age 1046 non-null float64 SibSp 1309 non-null int64 Parch 1309 non-null int64 Ticket 1309 non-null object Fare 1308 non-null float64 Cabin 295 non-null object Embarked 1307 non-null object dtypes: float64(2), int64(4), object(5) memory usage: 122.7+ KB","title":"How to Start with Feature Engineering"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#why-feature-engineer-at-all","text":"","title":"Why Feature Engineer At All?"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#titanics-passenger-titles","text":"1 2 # View head of 'Name' column data . Name . tail () 1 2 3 4 5 6 413 Spector, Mr. Woolf 414 Oliva y Ocana, Dona. Fermina 415 Saether, Mr. Simon Sivertsen 416 Ware, Mr. Frederick 417 Peter, Master. Michael J Name: Name, dtype: object These titles of course give us information on social status, profession, etc., which in the end could tell us something more about survival. use regular expressions to extract the title and store it in a new column \u2018Title\u2019: 1 2 3 # Extract Title from Name, store in column and plot barplot # One upper character, one lower character, one dot data [ 'Title' ] = data . Name . apply ( lambda x : re . search ( ' ([A-Z][a-z]+)\\.' , x ) . group ( 1 )) 1 2 # New column Title is a new feature of the dataset data . Title . head ( 3 ) 1 2 3 4 0 Mr 1 Mrs 2 Miss Name: Title, dtype: object 1 2 sns . countplot ( x = 'Title' , data = data ); plt . xticks ( rotation = 45 ); 1 2 3 4 # Substitute some title with their English form data [ 'Title' ] = data [ 'Title' ] . replace ({ 'Mlle' : 'Miss' , 'Mme' : 'Mrs' , 'Ms' : 'Miss' }) # Gather exceptions data [ 'Title' ] = data [ 'Title' ] . replace ([ 'Don' , 'Dona' , 'Rev' , 'Dr' , 'Major' , 'Lady' , 'Sir' , 'Col' , 'Capt' , 'Countess' , 'Jonkheer' ], 'Special' ) 1 data . Title . head ( 3 ) 1 2 3 4 0 Mr 1 Mrs 2 Miss Name: Title, dtype: object 1 2 sns . countplot ( x = 'Title' , data = data ); plt . xticks ( rotation = 45 ); 1 2 # View tail of data (for change) data . tail ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Title 415 1307 3 Saether, Mr. Simon Sivertsen male 38.5 0 0 SOTON/O.Q. 3101262 7.2500 NaN S Mr 416 1308 3 Ware, Mr. Frederick male NaN 0 0 359309 8.0500 NaN S Mr 417 1309 3 Peter, Master. Michael J male NaN 1 1 2668 22.3583 NaN C Master","title":"Titanic's Passenger Titles"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#passengers-cabins","text":"There are several NaNs or missing values in the Cabin column. Those NaNs didn\u2019t have a cabin, which could tell us something about survival. 1 2 # View head of data data [[ 'Name' , 'PassengerId' , 'Ticket' , 'Cabin' ]] . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Name PassengerId Ticket Cabin 0 Braund, Mr. Owen Harris 1 A/5 21171 NaN 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 2 PC 17599 C85 2 Heikkinen, Miss. Laina 3 STON/O2. 3101282 NaN 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) 4 113803 C123 4 Allen, Mr. William Henry 5 373450 NaN 1 2 3 4 5 6 # Did they have a Cabin? # Return True is the passenger has a cabin data [ 'Has_Cabin' ] = ~ data . Cabin . isnull () # # View head of data data [[ 'Name' , 'PassengerId' , 'Ticket' , 'Cabin' , 'Has_Cabin' ]] . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Name PassengerId Ticket Cabin Has_Cabin 0 Braund, Mr. Owen Harris 1 A/5 21171 NaN False 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 2 PC 17599 C85 True 2 Heikkinen, Miss. Laina 3 STON/O2. 3101282 NaN False 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) 4 113803 C123 True 4 Allen, Mr. William Henry 5 373450 NaN False Drop these columns, except Has_Cabin , in the actual data DataFrame; make sure to use the inplace argument in the .drop () method and set it to True : 1 2 3 # Drop columns and view head data . drop ([ 'Cabin' , 'Name' , 'PassengerId' , 'Ticket' ], axis = 1 , inplace = True ) data . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Sex Age SibSp Parch Fare Embarked Title Has_Cabin 0 3 male 22.0 1 0 7.2500 S Mr False 1 1 female 38.0 1 0 71.2833 C Mrs True 2 3 female 26.0 0 0 7.9250 S Miss False 3 1 female 35.0 1 0 53.1000 S Mrs True 4 3 male 35.0 0 0 8.0500 S Mr False New features such as Title and Has_Cabin . Features that don\u2019t add any more useful information for the machine learning model are now dropped from the DataFrame.","title":"Passenger's Cabins"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#handling-missing-values","text":"1 data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 9 columns): Pclass 1309 non-null int64 Sex 1309 non-null object Age 1046 non-null float64 SibSp 1309 non-null int64 Parch 1309 non-null int64 Fare 1308 non-null float64 Embarked 1307 non-null object Title 1309 non-null object Has_Cabin 1309 non-null bool dtypes: bool(1), float64(2), int64(3), object(3) memory usage: 133.3+ KB Missing values in Age , Fare , and Embarked . Impute these missing values with the help of .fillna () and use the median to fill in the columns (or the mean, the mode, etc.). 1 2 3 4 5 # Impute missing values for Age, Fare, Embarked data [ 'Age' ] = data . Age . fillna ( data . Age . median ()) data [ 'Fare' ] = data . Fare . fillna ( data . Fare . median ()) data [ 'Embarked' ] = data [ 'Embarked' ] . fillna ( 'S' ) data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 1309 entries, 0 to 417 Data columns (total 9 columns): Pclass 1309 non-null int64 Sex 1309 non-null object Age 1309 non-null float64 SibSp 1309 non-null int64 Parch 1309 non-null int64 Fare 1309 non-null float64 Embarked 1309 non-null object Title 1309 non-null object Has_Cabin 1309 non-null bool dtypes: bool(1), float64(2), int64(3), object(3) memory usage: 133.3+ KB 1 data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Sex Age SibSp Parch Fare Embarked Title Has_Cabin 0 3 male 22.0 1 0 7.2500 S Mr False 1 1 female 38.0 1 0 71.2833 C Mrs True 2 3 female 26.0 0 0 7.9250 S Miss False","title":"Handling Missing Values"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#binning-numerical-data","text":"1 2 3 4 5 6 # Binning numerical columns # q=4 means 4 quantiles 0, 1, 2, 3 # labels=False are numbers, not characters data [ 'CatAge' ] = pd . qcut ( data . Age , q = 4 , labels = False ) data [ 'CatFare' ] = pd . qcut ( data . Fare , q = 4 , labels = False ) data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Sex Age SibSp Parch Fare Embarked Title Has_Cabin CatAge CatFare 0 3 male 22.0 1 0 7.2500 S Mr False 0 0 1 1 female 38.0 1 0 71.2833 C Mrs True 3 3 2 3 female 26.0 0 0 7.9250 S Miss False 1 1 1 2 3 # Drop the 'Age' and 'Fare' columns data = data . drop ([ 'Age' , 'Fare' ], axis = 1 ) data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Sex SibSp Parch Embarked Title Has_Cabin CatAge CatFare 0 3 male 1 0 S Mr False 0 0 1 1 female 1 0 C Mrs True 3 3 2 3 female 0 0 S Miss False 1 1","title":"Binning Numerical Data"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#number-of-members-in-family-onboard","text":"Create a new column, which is the number of members in families that were onboard of the Titanic. 1 2 3 4 5 6 # Create column of number of Family members onboard data [ 'Fam_Size' ] = data . Parch + data . SibSp # Drop columns data = data . drop ([ 'SibSp' , 'Parch' ], axis = 1 ) data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Sex Embarked Title Has_Cabin CatAge CatFare Fam_Size 0 3 male S Mr False 0 0 1 1 1 female C Mrs True 3 3 1 2 3 female S Miss False 1 1 0","title":"Number of Members in Family Onboard"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#transforming-all-variables-into-numerical-variables","text":"Transform all variables into numeric ones. We do this because machine learning models generally take numeric input. 1 2 3 4 5 6 7 8 # Transform into binary variables # Has_Cabin is a boolean # Sex becomes Sex_male=1 or 0 # Embarked becomes Embarked_Q=1 or 0, Embarked_... # Title becomes Title_Miss=1 or 0, ... # The former variables are dropped, only the later variables remain data_dum = pd . get_dummies ( data , drop_first = True ) data_dum . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pclass Has_Cabin CatAge CatFare Fam_Size Sex_male Embarked_Q Embarked_S Title_Miss Title_Mr Title_Mrs Title_Special 0 3 False 0 0 1 1 0 1 0 1 0 0 1 1 True 3 3 1 0 0 0 0 0 1 0 2 3 False 1 1 0 0 0 1 1 0 0 0 First, split the data back into training and test sets. Then, transform them into arrays: 1 2 3 4 5 6 7 8 # Split into test.train data_train = data_dum . iloc [: 891 ] data_test = data_dum . iloc [ 891 :] # Transform into arrays for scikit-learn X = data_train . values test = data_test . values y = survived_train . values","title":"Transforming all Variables into Numerical Variables"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#building-models-with-a-new-dataset","text":"Build a decision tree on a brand new feature-engineered dataset. To choose the hyperparameter max_depth , we will use a variation on test train split called \u201ccross validation\u201d. Split the dataset into 5 groups or folds. Then we hold out the first fold as a test set, fit the model on the remaining four folds, predict on the test set and compute the metric of interest. Next, we hold out the second fold as the test set, fit on the remaining data, predict on the test set and compute the metric of interest. Then similarly with the third, fourth and fifth. As a result, we get five values of accuracy, from which we can compute statistics of interest, such as the median and/or mean and 95% confidence intervals. We do this for each value of each hyperparameter that we are tuning and choose the set of hyperparameters that performs the best. This is called grid search. In the following, we will use cross validation and grid search to choose the best max_depth for the new feature-engineered dataset: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Setup the hyperparameter grid dep = np . arange ( 1 , 9 ) param_grid = { 'max_depth' : dep } # Instantiate a decision tree classifier: clf clf = tree . DecisionTreeClassifier () # Instantiate the GridSearchCV object: clf_cv clf_cv = GridSearchCV ( clf , param_grid = param_grid , cv = 5 ) # Fit it to the data clf_cv . fit ( X , y ) # Print the tuned parameter and score print ( \"Tuned Decision Tree Parameters: {}\" . format ( clf_cv . best_params_ )) print ( \"Best score is {}\" . format ( clf_cv . best_score_ )) 1 2 Tuned Decision Tree Parameters: {'max_depth': 3} Best score is 0.8294051627384961 Make predictions on the test set, create a new column Survived and store the predictions in it. Save the PassengerId and Survived columns of df_test to a .csv and submit it to Kaggle. 1 2 3 Y_pred = clf_cv . predict ( test ) df_test [ 'Survived' ] = Y_pred df_test [[ 'PassengerId' , 'Survived' ]] . to_csv ( 'results/dec_tree_feat_eng.csv' , index = False )","title":"Building models with a New Dataset!"},{"location":"EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-4th","text":"Go to Kaggle , log in, and search for Titanic: Machine Learning from Disaster . Join the competition and submit the .csv file. Add a description and submit. Kaggle returns a ranking. At the time of the first submission: score 0.78468 (from 0.77980), rank 4009 (a jump of 819 places).","title":"Submit to Kaggle (4th)"},{"location":"Exploratory Data Analysis/","text":"Foreword Code snippets and excerpts from the tutorial. Python 3. From DataCamp. With Jupyter Notebook and the In [ ] Out [ ] format. Import the Data \u00b6 sep , delimiter. delimiter , delimiter. names , column names to use. index_col , column to use as the row labels. read_table() , general delimited files. read_excel() , Excel files. read_fwf() , Fixed-Width Formatted data. read_clipboard , data copied to the clipboard. read_sql() , SQL query. Input-output documentation . 1 2 3 % pylab inline import numpy as np import pandas as pd 1 Populating the interactive namespace from numpy and matplotlib digits \u00b6 1 2 3 4 5 # Load in the data with `read_csv()` digits = pd . read_csv ( \"http://archive.ics.uci.edu/ml/machine-learning-databases/optdigits/optdigits.tra\" , header = None ) digits . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 62 63 64 0 0 1 6 15 12 1 0 0 0 7 ... 0 0 0 6 14 7 1 0 0 0 1 0 0 10 16 6 0 0 0 0 7 ... 0 0 0 10 16 15 3 0 0 0 2 0 0 8 15 16 13 0 0 0 1 ... 0 0 0 9 14 0 0 0 0 7 3 0 0 0 3 11 16 0 0 0 0 ... 0 0 0 0 1 15 2 0 0 4 4 0 0 5 14 4 0 0 0 0 0 ... 0 0 0 4 12 14 7 0 0 6 5 rows \u00d7 65 columns Find out about the dataset . iris \u00b6 Another classical dataset. 1 2 3 4 5 iris = pd . read_csv ( \"http://mlr.cs.umass.edu/ml/machine-learning-databases/iris/iris.data\" ) iris . columns = [ 'Sepal_Length' , 'Sepal_Width' , 'Petal_Length' , 'Petal_Width' , 'Class' ] iris . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class 0 4.9 3.0 1.4 0.2 Iris-setosa 1 4.7 3.2 1.3 0.2 Iris-setosa 2 4.6 3.1 1.5 0.2 Iris-setosa 3 5.0 3.6 1.4 0.2 Iris-setosa 4 5.4 3.9 1.7 0.4 Iris-setosa Basic Description of the Data \u00b6 Describing The Data \u00b6 1 iris . dtypes 1 2 3 4 5 6 Sepal_Length float64 Sepal_Width float64 Petal_Length float64 Petal_Width float64 Class object dtype: object 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def get_var_category ( series ): unique_count = series . nunique ( dropna = False ) total_count = len ( series ) if pd . api . types . is_numeric_dtype ( series ): return 'Numerical' elif pd . api . types . is_datetime64_dtype ( series ): return 'Date' elif unique_count == total_count : return 'Text (Unique)' else : return 'Categorical' def print_categories ( df ): for column_name in df . columns : print ( column_name , \": \" , get_var_category ( df [ column_name ])) 1 print_categories ( iris ) 1 2 3 4 5 Sepal_Length : Numerical Sepal_Width : Numerical Petal_Length : Numerical Petal_Width : Numerical Class : Categorical 1 digits . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 62 63 64 count 3823.0 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 ... 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 mean 0.0 0.301334 5.481821 11.805912 11.451478 5.505362 1.387392 0.142297 0.002093 1.960502 ... 0.148313 0.000262 0.283024 5.855872 11.942977 11.461156 6.700497 2.105676 0.202197 4.497253 std 0.0 0.866986 4.631601 4.259811 4.537556 5.613060 3.371444 1.051598 0.088572 3.052353 ... 0.767761 0.016173 0.928046 4.980012 4.334508 4.991934 5.775815 4.028266 1.150694 2.869831 min 0.0 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 ... 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 25% 0.0 0.000000 1.000000 10.000000 9.000000 0.000000 0.000000 0.000000 0.000000 0.000000 ... 0.000000 0.000000 0.000000 1.000000 10.000000 9.000000 0.000000 0.000000 0.000000 2.000000 50% 0.0 0.000000 5.000000 13.000000 13.000000 4.000000 0.000000 0.000000 0.000000 0.000000 ... 0.000000 0.000000 0.000000 5.000000 13.000000 13.000000 6.000000 0.000000 0.000000 4.000000 75% 0.0 0.000000 9.000000 15.000000 15.000000 10.000000 0.000000 0.000000 0.000000 3.000000 ... 0.000000 0.000000 0.000000 10.000000 15.000000 16.000000 12.000000 2.000000 0.000000 7.000000 max 0.0 8.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 5.000000 15.000000 ... 12.000000 1.000000 10.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 9.000000 8 rows \u00d7 65 columns 1 iris . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width count 149.000000 149.000000 149.000000 149.000000 mean 5.848322 3.051007 3.774497 1.205369 std 0.828594 0.433499 1.759651 0.761292 min 4.300000 2.000000 1.000000 0.100000 25% 5.100000 2.800000 1.600000 0.300000 50% 5.800000 3.000000 4.400000 1.300000 75% 6.400000 3.300000 5.100000 1.800000 max 7.900000 4.400000 6.900000 2.500000 1 iris [[ \"Sepal_Length\" , \"Sepal_Width\" ]] . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width count 149.000000 149.000000 mean 5.848322 3.051007 std 0.828594 0.433499 min 4.300000 2.000000 25% 5.100000 2.800000 50% 5.800000 3.000000 75% 6.400000 3.300000 max 7.900000 4.400000 1 2 length = len ( digits ) print ( length ) 1 3823 1 2 count = digits [ 2 ] . count () print ( count ) 1 3823 1 2 3 4 number_of_missing_values = length - count pct_of_missing_values = float ( number_of_missing_values / length ) pct_of_missing_values = \"{0:.1f}%\" . format ( pct_of_missing_values * 100 ) print ( pct_of_missing_values ) 1 0.0% 1 2 print ( \"Minimum value: \" , iris [ \"Sepal_Length\" ] . min ()) print ( \"Maximum value: \" , iris [ \"Sepal_Length\" ] . max ()) 1 2 Minimum value: 4.3 Maximum value: 7.9 1 print ( iris [ \"Sepal_Length\" ] . mode ()) 1 2 0 5.0 dtype: float64 1 print ( iris [ \"Sepal_Length\" ] . mean ()) 1 5.848322147651008 1 print ( iris [ \"Sepal_Length\" ] . median ()) 1 5.8 1 print ( iris [ \"Sepal_Length\" ] . std ()) 1 0.8285940572656172 1 print ( iris [ \"Sepal_Length\" ] . quantile ([ . 25 , . 5 , . 75 ])) 1 2 3 4 0.25 5.1 0.50 5.8 0.75 6.4 Name: Sepal_Length, dtype: float64 1 2 3 4 5 6 import seaborn as sns sns . set ( color_codes = True ) sns . set_palette ( sns . color_palette ( \"muted\" )) sns . distplot ( iris [ \"Sepal_Length\" ] . dropna ()) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f87b39b0320&gt; 1 iris [[ \"Sepal_Length\" , \"Sepal_Width\" ]] . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Sepal_Length 1.000000 -0.103784 Sepal_Width -0.103784 1.000000 1 2 3 4 import pandas_profiling # Print a full report pandas_profiling . ProfileReport ( iris ) .variablerow { border: 1px solid #e1e1e8; border-top: hidden; padding-top: 2em; padding-bottom: 2em; padding-left: 1em; padding-right: 1em; } .headerrow { border: 1px solid #e1e1e8; background-color: #f5f5f5; padding: 2em; } .namecol { margin-top: -1em; overflow-x: auto; } .dl-horizontal dt { text-align: left; padding-right: 1em; white-space: normal; } .dl-horizontal dd { margin-left: 0; } .ignore { opacity: 0.4; } .container.pandas-profiling { max-width:975px; } .col-md-12 { padding-left: 2em; } .indent { margin-left: 1em; } /* Table example_values */ table.example_values { border: 0; } .example_values th { border: 0; padding: 0 ; color: #555; font-weight: 600; } .example_values tr, .example_values td{ border: 0; padding: 0; color: #555; } /* STATS */ table.stats { border: 0; } .stats th { border: 0; padding: 0 2em 0 0; color: #555; font-weight: 600; } .stats tr { border: 0; } .stats tr:hover{ text-decoration: underline; } .stats td{ color: #555; padding: 1px; border: 0; } /* Sample table */ table.sample { border: 0; margin-bottom: 2em; margin-left:1em; } .sample tr { border:0; } .sample td, .sample th{ padding: 0.5em; white-space: nowrap; border: none; } .sample thead { border-top: 0; border-bottom: 2px solid #ddd; } .sample td { width:100%; } /* There is no good solution available to make the divs equal height and then center ... */ .histogram { margin-top: 3em; } /* Freq table */ table.freq { margin-bottom: 2em; border: 0; } table.freq th, table.freq tr, table.freq td { border: 0; padding: 0; } .freq thead { font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } td.fillremaining{ width:auto; max-width: none; } td.number, th.number { text-align:right ; } /* Freq mini */ .freq.mini td{ width: 50%; padding: 1px; font-size: 12px; } table.freq.mini { width:100%; } .freq.mini th { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; max-width: 5em; font-weight: 400; text-align:right; padding-right: 0.5em; } .missing { color: #a94442; } .alert, .alert > th, .alert > td { color: #a94442; } /* Bars in tables */ .freq .bar{ float: left; width: 0; height: 100%; line-height: 20px; color: #fff; text-align: center; background-color: #337ab7; border-radius: 3px; margin-right: 4px; } .other .bar { background-color: #999; } .missing .bar{ background-color: #a94442; } .tooltip-inner { width: 100%; white-space: nowrap; text-align:left; } .extrapadding{ padding: 2em; } Overview Dataset info Number of variables 5 Number of observations 149 Total Missing (%) 0.0% Total size in memory 5.9 KiB Average record size in memory 40.5 B Variables types Numeric 3 Categorical 1 Date 0 Text (Unique) 0 Rejected 1 Warnings Petal_Width is highly correlated with Petal_Length (\u03c1 = 0.96231) Rejected Dataset has 3 duplicate rows Warning Variables Class Categorical Distinct count 3 Unique (%) 2.0% Missing (%) 0.0% Missing (n) 0 Iris-virginica 50 Iris-versicolor 50 Iris-setosa 49 Toggle details Value Count Frequency (%) Iris-virginica 50 33.6% Iris-versicolor 50 33.6% Iris-setosa 49 32.9% Petal_Length Numeric Distinct count 43 Unique (%) 28.9% Missing (%) 0.0% Missing (n) 0 Infinite (%) 0.0% Infinite (n) 0 Mean 3.7745 Minimum 1 Maximum 6.9 Zeros (%) 0.0% Toggle details Statistics Histogram Common Values Extreme Values Quantile statistics Minimum 1 5-th percentile 1.3 Q1 1.6 Median 4.4 Q3 5.1 95-th percentile 6.1 Maximum 6.9 Range 5.9 Interquartile range 3.5 Descriptive statistics Standard deviation 1.7597 Coef of variation 0.46619 Kurtosis -1.385 Mean 3.7745 MAD 1.5526 Skewness -0.28946 Sum 562.4 Variance 3.0964 Memory size 1.2 KiB Value Count Frequency (%) 1.5 14 9.4% 1.4 11 7.4% 5.1 8 5.4% 4.5 8 5.4% 1.3 7 4.7% 1.6 7 4.7% 5.6 6 4.0% 4.0 5 3.4% 4.9 5 3.4% 4.7 5 3.4% Other values (33) 73 49.0% Minimum 5 values Value Count Frequency (%) 1.0 1 0.7% 1.1 1 0.7% 1.2 2 1.3% 1.3 7 4.7% 1.4 11 7.4% Maximum 5 values Value Count Frequency (%) 6.3 1 0.7% 6.4 1 0.7% 6.6 1 0.7% 6.7 2 1.3% 6.9 1 0.7% Petal_Width Highly correlated This variable is highly correlated with Petal_Length and should be ignored for analysis Correlation 0.96231 Sepal_Length Numeric Distinct count 35 Unique (%) 23.5% Missing (%) 0.0% Missing (n) 0 Infinite (%) 0.0% Infinite (n) 0 Mean 5.8483 Minimum 4.3 Maximum 7.9 Zeros (%) 0.0% Toggle details Statistics Histogram Common Values Extreme Values Quantile statistics Minimum 4.3 5-th percentile 4.6 Q1 5.1 Median 5.8 Q3 6.4 95-th percentile 7.26 Maximum 7.9 Range 3.6 Interquartile range 1.3 Descriptive statistics Standard deviation 0.82859 Coef of variation 0.14168 Kurtosis -0.55356 Mean 5.8483 MAD 0.68748 Skewness 0.3031 Sum 871.4 Variance 0.68657 Memory size 1.2 KiB Value Count Frequency (%) 5.0 10 6.7% 6.3 9 6.0% 5.1 8 5.4% 6.7 8 5.4% 5.7 8 5.4% 5.5 7 4.7% 5.8 7 4.7% 6.4 7 4.7% 6.0 6 4.0% 4.9 6 4.0% Other values (25) 73 49.0% Minimum 5 values Value Count Frequency (%) 4.3 1 0.7% 4.4 3 2.0% 4.5 1 0.7% 4.6 4 2.7% 4.7 2 1.3% Maximum 5 values Value Count Frequency (%) 7.3 1 0.7% 7.4 1 0.7% 7.6 1 0.7% 7.7 4 2.7% 7.9 1 0.7% Sepal_Width Numeric Distinct count 23 Unique (%) 15.4% Missing (%) 0.0% Missing (n) 0 Infinite (%) 0.0% Infinite (n) 0 Mean 3.051 Minimum 2 Maximum 4.4 Zeros (%) 0.0% Toggle details Statistics Histogram Common Values Extreme Values Quantile statistics Minimum 2 5-th percentile 2.34 Q1 2.8 Median 3 Q3 3.3 95-th percentile 3.8 Maximum 4.4 Range 2.4 Interquartile range 0.5 Descriptive statistics Standard deviation 0.4335 Coef of variation 0.14208 Kurtosis 0.31865 Mean 3.051 MAD 0.33199 Skewness 0.3501 Sum 454.6 Variance 0.18792 Memory size 1.2 KiB Value Count Frequency (%) 3.0 26 17.4% 2.8 14 9.4% 3.2 13 8.7% 3.4 12 8.1% 3.1 12 8.1% 2.9 10 6.7% 2.7 9 6.0% 2.5 8 5.4% 3.8 6 4.0% 3.3 6 4.0% Other values (13) 33 22.1% Minimum 5 values Value Count Frequency (%) 2.0 1 0.7% 2.2 3 2.0% 2.3 4 2.7% 2.4 3 2.0% 2.5 8 5.4% Maximum 5 values Value Count Frequency (%) 3.9 2 1.3% 4.0 1 0.7% 4.1 1 0.7% 4.2 1 0.7% 4.4 1 0.7% Sample Sepal_Length Sepal_Width Petal_Length Petal_Width Class 0 4.9 3.0 1.4 0.2 Iris-setosa 1 4.7 3.2 1.3 0.2 Iris-setosa 2 4.6 3.1 1.5 0.2 Iris-setosa 3 5.0 3.6 1.4 0.2 Iris-setosa 4 5.4 3.9 1.7 0.4 Iris-setosa 1 2 # Print a full report pandas_profiling . ProfileReport ( digits ) >>> Full (lengthy) report here!!! <<< First and Last DataFrame Rows \u00b6 1 2 3 4 5 # Inspect the first 5 rows of `digits` first = digits . head ( 5 ) # Inspect the last 3 rows last = digits . tail ( 3 ) 1 print ( first ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 62 \\ 0 0 1 6 15 12 1 0 0 0 7 ... 0 0 0 6 14 7 1 0 1 0 0 10 16 6 0 0 0 0 7 ... 0 0 0 10 16 15 3 0 2 0 0 8 15 16 13 0 0 0 1 ... 0 0 0 9 14 0 0 0 3 0 0 0 3 11 16 0 0 0 0 ... 0 0 0 0 1 15 2 0 4 0 0 5 14 4 0 0 0 0 0 ... 0 0 0 4 12 14 7 0 63 64 0 0 0 1 0 0 2 0 7 3 0 4 4 0 6 [5 rows x 65 columns] 1 print ( last ) 1 2 3 4 5 6 7 8 9 10 11 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 \\ 3820 0 0 3 15 0 0 0 0 0 0 ... 0 0 0 4 14 16 9 3821 0 0 6 16 2 0 0 0 0 0 ... 0 0 0 5 16 16 16 3822 0 0 2 15 16 13 1 0 0 0 ... 0 0 0 4 14 1 0 62 63 64 3820 0 0 6 3821 5 0 6 3822 0 0 7 [3 rows x 65 columns] Sample the Data \u00b6 1 2 # Take a sample of 5 digits . sample ( 5 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 62 63 64 1249 0 0 14 14 13 15 5 0 0 0 ... 0 0 0 12 16 10 2 0 0 5 3702 0 0 0 9 16 12 2 0 0 0 ... 0 0 0 0 9 14 2 0 0 0 1605 0 0 7 16 13 2 0 0 0 2 ... 0 0 0 5 14 11 1 0 0 0 1890 0 0 3 15 15 5 0 0 0 0 ... 2 0 0 3 15 16 16 13 1 9 1295 0 0 7 15 13 3 0 0 0 0 ... 0 0 0 9 13 12 3 0 0 0 5 rows \u00d7 65 columns 1 2 3 4 5 6 7 # import `sample` from `random` from random import sample # Create a random index randomIndex = np . array ( sample ( range ( len ( digits )), 5 )) print ( randomIndex ) 1 [ 846 569 315 2932 2328] 1 2 3 4 5 # Get 5 random rows digitsSample = digits . ix [ randomIndex ] # Print the sample print ( digitsSample ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 \\ 846 0 5 14 15 9 1 0 0 0 7 ... 0 0 4 12 16 12 10 569 0 1 7 12 12 0 0 0 0 3 ... 0 0 0 10 16 13 7 315 0 1 6 13 13 4 0 0 0 9 ... 0 0 0 4 14 16 9 2932 0 0 4 12 10 1 0 0 0 0 ... 0 0 0 4 12 11 3 2328 0 0 4 15 16 16 16 15 0 0 ... 0 0 0 5 15 3 0 62 63 64 846 4 0 2 569 0 0 3 315 2 0 2 2932 0 0 0 2328 0 0 7 [5 rows x 65 columns] Queries \u00b6 1 iris . head ( 2 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class 0 4.9 3.0 1.4 0.2 Iris-setosa 1 4.7 3.2 1.3 0.2 Iris-setosa 1 2 # Petal length greater than sepal length? iris . query ( 'Petal_Length > Sepal_Length' ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class 1 2 # reverse iris . query ( 'Sepal_Length > Petal_Length' ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class 0 4.9 3.0 1.4 0.2 Iris-setosa 1 4.7 3.2 1.3 0.2 Iris-setosa 2 4.6 3.1 1.5 0.2 Iris-setosa 3 5.0 3.6 1.4 0.2 Iris-setosa 4 5.4 3.9 1.7 0.4 Iris-setosa 5 4.6 3.4 1.4 0.3 Iris-setosa 6 5.0 3.4 1.5 0.2 Iris-setosa 7 4.4 2.9 1.4 0.2 Iris-setosa 8 4.9 3.1 1.5 0.1 Iris-setosa 9 5.4 3.7 1.5 0.2 Iris-setosa 10 4.8 3.4 1.6 0.2 Iris-setosa 11 4.8 3.0 1.4 0.1 Iris-setosa 12 4.3 3.0 1.1 0.1 Iris-setosa 13 5.8 4.0 1.2 0.2 Iris-setosa 14 5.7 4.4 1.5 0.4 Iris-setosa 15 5.4 3.9 1.3 0.4 Iris-setosa 16 5.1 3.5 1.4 0.3 Iris-setosa 17 5.7 3.8 1.7 0.3 Iris-setosa 18 5.1 3.8 1.5 0.3 Iris-setosa 19 5.4 3.4 1.7 0.2 Iris-setosa 20 5.1 3.7 1.5 0.4 Iris-setosa 21 4.6 3.6 1.0 0.2 Iris-setosa 22 5.1 3.3 1.7 0.5 Iris-setosa 23 4.8 3.4 1.9 0.2 Iris-setosa 24 5.0 3.0 1.6 0.2 Iris-setosa 25 5.0 3.4 1.6 0.4 Iris-setosa 26 5.2 3.5 1.5 0.2 Iris-setosa 27 5.2 3.4 1.4 0.2 Iris-setosa 28 4.7 3.2 1.6 0.2 Iris-setosa 29 4.8 3.1 1.6 0.2 Iris-setosa ... ... ... ... ... ... 119 6.9 3.2 5.7 2.3 Iris-virginica 120 5.6 2.8 4.9 2.0 Iris-virginica 121 7.7 2.8 6.7 2.0 Iris-virginica 122 6.3 2.7 4.9 1.8 Iris-virginica 123 6.7 3.3 5.7 2.1 Iris-virginica 124 7.2 3.2 6.0 1.8 Iris-virginica 125 6.2 2.8 4.8 1.8 Iris-virginica 126 6.1 3.0 4.9 1.8 Iris-virginica 127 6.4 2.8 5.6 2.1 Iris-virginica 128 7.2 3.0 5.8 1.6 Iris-virginica 129 7.4 2.8 6.1 1.9 Iris-virginica 130 7.9 3.8 6.4 2.0 Iris-virginica 131 6.4 2.8 5.6 2.2 Iris-virginica 132 6.3 2.8 5.1 1.5 Iris-virginica 133 6.1 2.6 5.6 1.4 Iris-virginica 134 7.7 3.0 6.1 2.3 Iris-virginica 135 6.3 3.4 5.6 2.4 Iris-virginica 136 6.4 3.1 5.5 1.8 Iris-virginica 137 6.0 3.0 4.8 1.8 Iris-virginica 138 6.9 3.1 5.4 2.1 Iris-virginica 139 6.7 3.1 5.6 2.4 Iris-virginica 140 6.9 3.1 5.1 2.3 Iris-virginica 141 5.8 2.7 5.1 1.9 Iris-virginica 142 6.8 3.2 5.9 2.3 Iris-virginica 143 6.7 3.3 5.7 2.5 Iris-virginica 144 6.7 3.0 5.2 2.3 Iris-virginica 145 6.3 2.5 5.0 1.9 Iris-virginica 146 6.5 3.0 5.2 2.0 Iris-virginica 147 6.2 3.4 5.4 2.3 Iris-virginica 148 5.9 3.0 5.1 1.8 Iris-virginica 149 rows \u00d7 5 columns 1 2 # alternatively iris [ iris . Sepal_Length > iris . Petal_Length ] .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class 0 4.9 3.0 1.4 0.2 Iris-setosa 1 4.7 3.2 1.3 0.2 Iris-setosa 2 4.6 3.1 1.5 0.2 Iris-setosa 3 5.0 3.6 1.4 0.2 Iris-setosa 4 5.4 3.9 1.7 0.4 Iris-setosa 5 4.6 3.4 1.4 0.3 Iris-setosa 6 5.0 3.4 1.5 0.2 Iris-setosa 7 4.4 2.9 1.4 0.2 Iris-setosa 8 4.9 3.1 1.5 0.1 Iris-setosa 9 5.4 3.7 1.5 0.2 Iris-setosa 10 4.8 3.4 1.6 0.2 Iris-setosa 11 4.8 3.0 1.4 0.1 Iris-setosa 12 4.3 3.0 1.1 0.1 Iris-setosa 13 5.8 4.0 1.2 0.2 Iris-setosa 14 5.7 4.4 1.5 0.4 Iris-setosa 15 5.4 3.9 1.3 0.4 Iris-setosa 16 5.1 3.5 1.4 0.3 Iris-setosa 17 5.7 3.8 1.7 0.3 Iris-setosa 18 5.1 3.8 1.5 0.3 Iris-setosa 19 5.4 3.4 1.7 0.2 Iris-setosa 20 5.1 3.7 1.5 0.4 Iris-setosa 21 4.6 3.6 1.0 0.2 Iris-setosa 22 5.1 3.3 1.7 0.5 Iris-setosa 23 4.8 3.4 1.9 0.2 Iris-setosa 24 5.0 3.0 1.6 0.2 Iris-setosa 25 5.0 3.4 1.6 0.4 Iris-setosa 26 5.2 3.5 1.5 0.2 Iris-setosa 27 5.2 3.4 1.4 0.2 Iris-setosa 28 4.7 3.2 1.6 0.2 Iris-setosa 29 4.8 3.1 1.6 0.2 Iris-setosa ... ... ... ... ... ... 119 6.9 3.2 5.7 2.3 Iris-virginica 120 5.6 2.8 4.9 2.0 Iris-virginica 121 7.7 2.8 6.7 2.0 Iris-virginica 122 6.3 2.7 4.9 1.8 Iris-virginica 123 6.7 3.3 5.7 2.1 Iris-virginica 124 7.2 3.2 6.0 1.8 Iris-virginica 125 6.2 2.8 4.8 1.8 Iris-virginica 126 6.1 3.0 4.9 1.8 Iris-virginica 127 6.4 2.8 5.6 2.1 Iris-virginica 128 7.2 3.0 5.8 1.6 Iris-virginica 129 7.4 2.8 6.1 1.9 Iris-virginica 130 7.9 3.8 6.4 2.0 Iris-virginica 131 6.4 2.8 5.6 2.2 Iris-virginica 132 6.3 2.8 5.1 1.5 Iris-virginica 133 6.1 2.6 5.6 1.4 Iris-virginica 134 7.7 3.0 6.1 2.3 Iris-virginica 135 6.3 3.4 5.6 2.4 Iris-virginica 136 6.4 3.1 5.5 1.8 Iris-virginica 137 6.0 3.0 4.8 1.8 Iris-virginica 138 6.9 3.1 5.4 2.1 Iris-virginica 139 6.7 3.1 5.6 2.4 Iris-virginica 140 6.9 3.1 5.1 2.3 Iris-virginica 141 5.8 2.7 5.1 1.9 Iris-virginica 142 6.8 3.2 5.9 2.3 Iris-virginica 143 6.7 3.3 5.7 2.5 Iris-virginica 144 6.7 3.0 5.2 2.3 Iris-virginica 145 6.3 2.5 5.0 1.9 Iris-virginica 146 6.5 3.0 5.2 2.0 Iris-virginica 147 6.2 3.4 5.4 2.3 Iris-virginica 148 5.9 3.0 5.1 1.8 Iris-virginica 149 rows \u00d7 5 columns The Challenges of Data \u00b6 Missing Values \u00b6 1 2 # Identifiy missing values pd . isnull ( digits ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 62 63 64 0 False False False False False False False False False False ... False False False False False False False False False False 1 False False False False False False False False False False ... False False False False False False False False False False 2 False False False False False False False False False False ... False False False False False False False False False False 3 False False False False False False False False False False ... False False False False False False False False False False 4 False False False False False False False False False False ... False False False False False False False False False False 5 False False False False False False False False False False ... False False False False False False False False False False 6 False False False False False False False False False False ... False False False False False False False False False False 7 False False False False False False False False False False ... False False False False False False False False False False 8 False False False False False False False False False False ... False False False False False False False False False False 9 False False False False False False False False False False ... False False False False False False False False False False 10 False False False False False False False False False False ... False False False False False False False False False False 11 False False False False False False False False False False ... False False False False False False False False False False 12 False False False False False False False False False False ... False False False False False False False False False False 13 False False False False False False False False False False ... False False False False False False False False False False 14 False False False False False False False False False False ... False False False False False False False False False False 15 False False False False False False False False False False ... False False False False False False False False False False 16 False False False False False False False False False False ... False False False False False False False False False False 17 False False False False False False False False False False ... False False False False False False False False False False 18 False False False False False False False False False False ... False False False False False False False False False False 19 False False False False False False False False False False ... False False False False False False False False False False 20 False False False False False False False False False False ... False False False False False False False False False False 21 False False False False False False False False False False ... False False False False False False False False False False 22 False False False False False False False False False False ... False False False False False False False False False False 23 False False False False False False False False False False ... False False False False False False False False False False 24 False False False False False False False False False False ... False False False False False False False False False False 25 False False False False False False False False False False ... False False False False False False False False False False 26 False False False False False False False False False False ... False False False False False False False False False False 27 False False False False False False False False False False ... False False False False False False False False False False 28 False False False False False False False False False False ... False False False False False False False False False False 29 False False False False False False False False False False ... False False False False False False False False False False ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 3793 False False False False False False False False False False ... False False False False False False False False False False 3794 False False False False False False False False False False ... False False False False False False False False False False 3795 False False False False False False False False False False ... False False False False False False False False False False 3796 False False False False False False False False False False ... False False False False False False False False False False 3797 False False False False False False False False False False ... False False False False False False False False False False 3798 False False False False False False False False False False ... False False False False False False False False False False 3799 False False False False False False False False False False ... False False False False False False False False False False 3800 False False False False False False False False False False ... False False False False False False False False False False 3801 False False False False False False False False False False ... False False False False False False False False False False 3802 False False False False False False False False False False ... False False False False False False False False False False 3803 False False False False False False False False False False ... False False False False False False False False False False 3804 False False False False False False False False False False ... False False False False False False False False False False 3805 False False False False False False False False False False ... False False False False False False False False False False 3806 False False False False False False False False False False ... False False False False False False False False False False 3807 False False False False False False False False False False ... False False False False False False False False False False 3808 False False False False False False False False False False ... False False False False False False False False False False 3809 False False False False False False False False False False ... False False False False False False False False False False 3810 False False False False False False False False False False ... False False False False False False False False False False 3811 False False False False False False False False False False ... False False False False False False False False False False 3812 False False False False False False False False False False ... False False False False False False False False False False 3813 False False False False False False False False False False ... False False False False False False False False False False 3814 False False False False False False False False False False ... False False False False False False False False False False 3815 False False False False False False False False False False ... False False False False False False False False False False 3816 False False False False False False False False False False ... False False False False False False False False False False 3817 False False False False False False False False False False ... False False False False False False False False False False 3818 False False False False False False False False False False ... False False False False False False False False False False 3819 False False False False False False False False False False ... False False False False False False False False False False 3820 False False False False False False False False False False ... False False False False False False False False False False 3821 False False False False False False False False False False ... False False False False False False False False False False 3822 False False False False False False False False False False ... False False False False False False False False False False 3823 rows \u00d7 65 columns Delete \u00b6 1 2 3 4 5 # Drop rows with missing values df . dropna ( axis = 0 ) # Drop columns with missing values df . dropna ( axis = 1 ) Impute \u00b6 Imputation: mean, median, another variable, estimate with regression ANOVA, logit, k-NN. 1 2 3 4 5 6 7 8 9 10 # Import NumPy import numpy as np # Calculate the mean of the DataFrame variable Salary mean = np . mean ( df . Salary ) # Replace missing values with the mean df = df . Salary . fillna ( mean ) df = df . Salary . fillna ( mean , method = ffill ) ffill and bfill for forward and backward fill. 1 2 3 4 5 6 from scipy import interpolate # Fill the DataFrame df . interpolate () df . interpolate ( method = cubic ) cubic , polynomial . limit and limit_direction . Outliers \u00b6 Delete (data entry, processing errors), transform (assign weights, natural log to reduce variation) or impute them (replace extreme values with median, mean or mode values). The Data\u2019s Features \u00b6 Feature Engineering \u00b6 Increase the predictive power of learning algorithms by creating features from raw data that will help the learning process. Encode categorical variables into numerical ones \u00b6 1 2 3 4 5 6 7 8 # Factorize the values labels , levels = pd . factorize ( iris . Class ) # Save the encoded variables in `iris.Class` iris . Class = labels # Print out the first rows iris . Class . head () 1 2 3 4 5 6 0 0 1 0 2 0 3 0 4 0 Name: Class, dtype: int64 Bin continuous variables in groups \u00b6 1 2 3 4 5 6 7 8 # Define the bins mybins = range ( 0 , df . age . max (), 10 ) # Cut the data from the DataFrame with the help of the bins df [ 'age_bucket' ] = pd . cut ( df . age , bins = mybins ) # Count the number of values per bucket df [ 'age_bucket' ] . value_counts () Scale features \u00b6 Center the data around 0. 1 2 3 4 5 from sklearn.preprocessing import StandardScaler scaler = StandardScaler () . fit ( X ) rescaledX = scaler . transform ( X ) Feature Selection \u00b6 Select the key subset of original data features in an attempt to reduce the dimensionality of the training problem. PCA combines similar (correlated) attributes and creates new ones that are considered superior to the original attributes of the dataset. Feature selection doesn\u2019t combine attributes: it evaluates the quality and predictive power and selects the best set. To find important features, calculate how much better or worse a model does when we leave one variable out of the equation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Import `RandomForestClassifier` from sklearn.ensemble import RandomForestClassifier # Isolate Data, class labels and column values X = iris . iloc [:, 0 : 4 ] Y = iris . iloc [:, - 1 ] names = iris . columns . values # Build the model rfc = RandomForestClassifier () # Fit the model rfc . fit ( X , Y ) # Print the results print ( \"Features sorted by their score:\" ) print ( sorted ( zip ( map ( lambda x : round ( x , 4 ), rfc . feature_importances_ ), names ), reverse = True )) 1 2 Features sorted by their score: [(0.4899, 'Petal_Length'), (0.2752, 'Petal_Width'), (0.2185, 'Sepal_Length'), (0.016400000000000001, 'Sepal_Width')] The best feature set is one that includes the petal length and petal width data. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Isolate feature importances importance = rfc . feature_importances_ # Sort the feature importances sorted_importances = np . argsort ( importance ) # Insert padding padding = np . arange ( len ( names ) - 1 ) + 0.5 # Plot the data plt . barh ( padding , importance [ sorted_importances ], align = 'center' ) # Customize the plot plt . yticks ( padding , names [ sorted_importances ]) plt . xlabel ( \"Relative Importance\" ) plt . title ( \"Variable Importance\" ) # Show the plot plt . show () Patterns In the Data \u00b6 Visualization of the data; static with Matplotlib or Seaborn, interactive with Bokeh or Plotly. Correlation Identification with PCA from scikit-learn \u00b6 Matplotlib \u00b6 Dimensionality Reduction techniques, such as Principal Component Analysis (PCA). From \u2018many\u2019 to two \u2018principal components\u2019. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import `PCA` from `sklearn.decomposition` from sklearn.decomposition import PCA # Build the model pca = PCA ( n_components = 2 ) # Reduce the data, output is ndarray reduced_data = pca . fit_transform ( digits ) # Inspect shape of the `reduced_data` reduced_data . shape # print out the reduced data print ( reduced_data ) 1 2 3 4 5 6 7 [[ 12.65674168 -4.63610357] [ 16.82906354 -12.96575346] [-19.08072301 10.58293767] ..., [ 23.90693984 6.06265415] [ 29.1798759 -3.06847144] [-25.23132536 11.60863909]] 1 reduced_data = pd . DataFrame ( reduced_data ) 1 2 3 4 5 import matplotlib.pyplot as plt plt . scatter ( reduced_data [ 0 ], reduced_data [ 1 ]) plt . show () Bokeh \u00b6 To be implemented in a webpage for example. 1 2 3 4 5 6 7 8 9 10 11 from bokeh.charts import Scatter , output_file , show # Construct the scatter plot p = Scatter ( iris , x = 'Petal_Length' , y = 'Petal_Width' , color = \"Class\" , title = \"Petal Length vs Petal Width\" , xlabel = \"Sepal Length\" , ylabel = \"Sepal Width\" ) # Output the file output_file ( 'scatter.html' ) # Show the scatter plot show ( p ) The GIF output: Correlation Identification with Pandas \u00b6 The Pearson correlation assumes that the variables are normally distributed, that there is a straight line relationship between each of the variables and that the data is normally distributed about the regression line. The Spearman correlation, on the other hand, assumes that we have two ordinal variables or two variables that are related in some way, but not linearly. The Spearman coefficient is the sum of deviation squared by n times n minus 1. The Kendall Tau correlation is a coefficient that represents the degree of concordance between two columns of ranked data. We can use the Spearman correlation to measure the degree of association between two variables. The Kendal Tau coefficient is calculated by the number of concordant pairs minus the number of discordant pairs divided by the total number of pairs. Spearman\u2019s coefficient will usually be larger than the Kendall\u2019s Tau coefficient, but this is not always the case: we\u2019ll get a smaller Spearman\u2019s coefficient when the deviations are huge among the observations of the data. The Spearman correlation is very sensitive to this and this might come in handy in some cases! The two last correlation measures require ranking the data. 1 2 # Pearson correlation iris . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class Sepal_Length 1.000000 -0.103784 0.871283 0.816971 0.781219 Sepal_Width -0.103784 1.000000 -0.415218 -0.350733 -0.414532 Petal_Length 0.871283 -0.415218 1.000000 0.962314 0.948519 Petal_Width 0.816971 -0.350733 0.962314 1.000000 0.956014 Class 0.781219 -0.414532 0.948519 0.956014 1.000000 1 2 3 iris2 = iris . rank () # Kendall Tau correlation iris2 . corr ( 'kendall' ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class Sepal_Length 1.000000 -0.067636 0.718290 0.654197 0.669163 Sepal_Width -0.067636 1.000000 -0.175665 -0.140207 -0.327228 Petal_Length 0.718290 -0.175665 1.000000 0.803041 0.822578 Petal_Width 0.654197 -0.140207 0.803041 1.000000 0.837934 Class 0.669163 -0.327228 0.822578 0.837934 1.000000 1 2 # Spearman Rank correlation iris2 . corr ( 'spearman' ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class Sepal_Length 1.000000 -0.152136 0.881759 0.833586 0.796546 Sepal_Width -0.152136 1.000000 -0.294020 -0.267686 -0.426319 Petal_Length 0.881759 -0.294020 1.000000 0.936188 0.935220 Petal_Width 0.833586 -0.267686 0.936188 1.000000 0.937409 Class 0.796546 -0.426319 0.935220 0.937409 1.000000","title":"Exploratory Data Analysis (EDA)"},{"location":"Exploratory Data Analysis/#digits","text":"1 2 3 4 5 # Load in the data with `read_csv()` digits = pd . read_csv ( \"http://archive.ics.uci.edu/ml/machine-learning-databases/optdigits/optdigits.tra\" , header = None ) digits . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 62 63 64 0 0 1 6 15 12 1 0 0 0 7 ... 0 0 0 6 14 7 1 0 0 0 1 0 0 10 16 6 0 0 0 0 7 ... 0 0 0 10 16 15 3 0 0 0 2 0 0 8 15 16 13 0 0 0 1 ... 0 0 0 9 14 0 0 0 0 7 3 0 0 0 3 11 16 0 0 0 0 ... 0 0 0 0 1 15 2 0 0 4 4 0 0 5 14 4 0 0 0 0 0 ... 0 0 0 4 12 14 7 0 0 6 5 rows \u00d7 65 columns Find out about the dataset .","title":"digits"},{"location":"Exploratory Data Analysis/#iris","text":"Another classical dataset. 1 2 3 4 5 iris = pd . read_csv ( \"http://mlr.cs.umass.edu/ml/machine-learning-databases/iris/iris.data\" ) iris . columns = [ 'Sepal_Length' , 'Sepal_Width' , 'Petal_Length' , 'Petal_Width' , 'Class' ] iris . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class 0 4.9 3.0 1.4 0.2 Iris-setosa 1 4.7 3.2 1.3 0.2 Iris-setosa 2 4.6 3.1 1.5 0.2 Iris-setosa 3 5.0 3.6 1.4 0.2 Iris-setosa 4 5.4 3.9 1.7 0.4 Iris-setosa","title":"iris"},{"location":"Exploratory Data Analysis/#basic-description-of-the-data","text":"","title":"Basic Description of the Data"},{"location":"Exploratory Data Analysis/#describing-the-data","text":"1 iris . dtypes 1 2 3 4 5 6 Sepal_Length float64 Sepal_Width float64 Petal_Length float64 Petal_Width float64 Class object dtype: object 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def get_var_category ( series ): unique_count = series . nunique ( dropna = False ) total_count = len ( series ) if pd . api . types . is_numeric_dtype ( series ): return 'Numerical' elif pd . api . types . is_datetime64_dtype ( series ): return 'Date' elif unique_count == total_count : return 'Text (Unique)' else : return 'Categorical' def print_categories ( df ): for column_name in df . columns : print ( column_name , \": \" , get_var_category ( df [ column_name ])) 1 print_categories ( iris ) 1 2 3 4 5 Sepal_Length : Numerical Sepal_Width : Numerical Petal_Length : Numerical Petal_Width : Numerical Class : Categorical 1 digits . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 62 63 64 count 3823.0 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 ... 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 3823.000000 mean 0.0 0.301334 5.481821 11.805912 11.451478 5.505362 1.387392 0.142297 0.002093 1.960502 ... 0.148313 0.000262 0.283024 5.855872 11.942977 11.461156 6.700497 2.105676 0.202197 4.497253 std 0.0 0.866986 4.631601 4.259811 4.537556 5.613060 3.371444 1.051598 0.088572 3.052353 ... 0.767761 0.016173 0.928046 4.980012 4.334508 4.991934 5.775815 4.028266 1.150694 2.869831 min 0.0 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 ... 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 25% 0.0 0.000000 1.000000 10.000000 9.000000 0.000000 0.000000 0.000000 0.000000 0.000000 ... 0.000000 0.000000 0.000000 1.000000 10.000000 9.000000 0.000000 0.000000 0.000000 2.000000 50% 0.0 0.000000 5.000000 13.000000 13.000000 4.000000 0.000000 0.000000 0.000000 0.000000 ... 0.000000 0.000000 0.000000 5.000000 13.000000 13.000000 6.000000 0.000000 0.000000 4.000000 75% 0.0 0.000000 9.000000 15.000000 15.000000 10.000000 0.000000 0.000000 0.000000 3.000000 ... 0.000000 0.000000 0.000000 10.000000 15.000000 16.000000 12.000000 2.000000 0.000000 7.000000 max 0.0 8.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 5.000000 15.000000 ... 12.000000 1.000000 10.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 9.000000 8 rows \u00d7 65 columns 1 iris . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width count 149.000000 149.000000 149.000000 149.000000 mean 5.848322 3.051007 3.774497 1.205369 std 0.828594 0.433499 1.759651 0.761292 min 4.300000 2.000000 1.000000 0.100000 25% 5.100000 2.800000 1.600000 0.300000 50% 5.800000 3.000000 4.400000 1.300000 75% 6.400000 3.300000 5.100000 1.800000 max 7.900000 4.400000 6.900000 2.500000 1 iris [[ \"Sepal_Length\" , \"Sepal_Width\" ]] . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width count 149.000000 149.000000 mean 5.848322 3.051007 std 0.828594 0.433499 min 4.300000 2.000000 25% 5.100000 2.800000 50% 5.800000 3.000000 75% 6.400000 3.300000 max 7.900000 4.400000 1 2 length = len ( digits ) print ( length ) 1 3823 1 2 count = digits [ 2 ] . count () print ( count ) 1 3823 1 2 3 4 number_of_missing_values = length - count pct_of_missing_values = float ( number_of_missing_values / length ) pct_of_missing_values = \"{0:.1f}%\" . format ( pct_of_missing_values * 100 ) print ( pct_of_missing_values ) 1 0.0% 1 2 print ( \"Minimum value: \" , iris [ \"Sepal_Length\" ] . min ()) print ( \"Maximum value: \" , iris [ \"Sepal_Length\" ] . max ()) 1 2 Minimum value: 4.3 Maximum value: 7.9 1 print ( iris [ \"Sepal_Length\" ] . mode ()) 1 2 0 5.0 dtype: float64 1 print ( iris [ \"Sepal_Length\" ] . mean ()) 1 5.848322147651008 1 print ( iris [ \"Sepal_Length\" ] . median ()) 1 5.8 1 print ( iris [ \"Sepal_Length\" ] . std ()) 1 0.8285940572656172 1 print ( iris [ \"Sepal_Length\" ] . quantile ([ . 25 , . 5 , . 75 ])) 1 2 3 4 0.25 5.1 0.50 5.8 0.75 6.4 Name: Sepal_Length, dtype: float64 1 2 3 4 5 6 import seaborn as sns sns . set ( color_codes = True ) sns . set_palette ( sns . color_palette ( \"muted\" )) sns . distplot ( iris [ \"Sepal_Length\" ] . dropna ()) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f87b39b0320&gt; 1 iris [[ \"Sepal_Length\" , \"Sepal_Width\" ]] . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Sepal_Length 1.000000 -0.103784 Sepal_Width -0.103784 1.000000 1 2 3 4 import pandas_profiling # Print a full report pandas_profiling . ProfileReport ( iris ) .variablerow { border: 1px solid #e1e1e8; border-top: hidden; padding-top: 2em; padding-bottom: 2em; padding-left: 1em; padding-right: 1em; } .headerrow { border: 1px solid #e1e1e8; background-color: #f5f5f5; padding: 2em; } .namecol { margin-top: -1em; overflow-x: auto; } .dl-horizontal dt { text-align: left; padding-right: 1em; white-space: normal; } .dl-horizontal dd { margin-left: 0; } .ignore { opacity: 0.4; } .container.pandas-profiling { max-width:975px; } .col-md-12 { padding-left: 2em; } .indent { margin-left: 1em; } /* Table example_values */ table.example_values { border: 0; } .example_values th { border: 0; padding: 0 ; color: #555; font-weight: 600; } .example_values tr, .example_values td{ border: 0; padding: 0; color: #555; } /* STATS */ table.stats { border: 0; } .stats th { border: 0; padding: 0 2em 0 0; color: #555; font-weight: 600; } .stats tr { border: 0; } .stats tr:hover{ text-decoration: underline; } .stats td{ color: #555; padding: 1px; border: 0; } /* Sample table */ table.sample { border: 0; margin-bottom: 2em; margin-left:1em; } .sample tr { border:0; } .sample td, .sample th{ padding: 0.5em; white-space: nowrap; border: none; } .sample thead { border-top: 0; border-bottom: 2px solid #ddd; } .sample td { width:100%; } /* There is no good solution available to make the divs equal height and then center ... */ .histogram { margin-top: 3em; } /* Freq table */ table.freq { margin-bottom: 2em; border: 0; } table.freq th, table.freq tr, table.freq td { border: 0; padding: 0; } .freq thead { font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } td.fillremaining{ width:auto; max-width: none; } td.number, th.number { text-align:right ; } /* Freq mini */ .freq.mini td{ width: 50%; padding: 1px; font-size: 12px; } table.freq.mini { width:100%; } .freq.mini th { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; max-width: 5em; font-weight: 400; text-align:right; padding-right: 0.5em; } .missing { color: #a94442; } .alert, .alert > th, .alert > td { color: #a94442; } /* Bars in tables */ .freq .bar{ float: left; width: 0; height: 100%; line-height: 20px; color: #fff; text-align: center; background-color: #337ab7; border-radius: 3px; margin-right: 4px; } .other .bar { background-color: #999; } .missing .bar{ background-color: #a94442; } .tooltip-inner { width: 100%; white-space: nowrap; text-align:left; } .extrapadding{ padding: 2em; }","title":"Describing The Data"},{"location":"Exploratory Data Analysis/#first-and-last-dataframe-rows","text":"1 2 3 4 5 # Inspect the first 5 rows of `digits` first = digits . head ( 5 ) # Inspect the last 3 rows last = digits . tail ( 3 ) 1 print ( first ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 62 \\ 0 0 1 6 15 12 1 0 0 0 7 ... 0 0 0 6 14 7 1 0 1 0 0 10 16 6 0 0 0 0 7 ... 0 0 0 10 16 15 3 0 2 0 0 8 15 16 13 0 0 0 1 ... 0 0 0 9 14 0 0 0 3 0 0 0 3 11 16 0 0 0 0 ... 0 0 0 0 1 15 2 0 4 0 0 5 14 4 0 0 0 0 0 ... 0 0 0 4 12 14 7 0 63 64 0 0 0 1 0 0 2 0 7 3 0 4 4 0 6 [5 rows x 65 columns] 1 print ( last ) 1 2 3 4 5 6 7 8 9 10 11 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 \\ 3820 0 0 3 15 0 0 0 0 0 0 ... 0 0 0 4 14 16 9 3821 0 0 6 16 2 0 0 0 0 0 ... 0 0 0 5 16 16 16 3822 0 0 2 15 16 13 1 0 0 0 ... 0 0 0 4 14 1 0 62 63 64 3820 0 0 6 3821 5 0 6 3822 0 0 7 [3 rows x 65 columns]","title":"First and Last DataFrame Rows"},{"location":"Exploratory Data Analysis/#sample-the-data","text":"1 2 # Take a sample of 5 digits . sample ( 5 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 62 63 64 1249 0 0 14 14 13 15 5 0 0 0 ... 0 0 0 12 16 10 2 0 0 5 3702 0 0 0 9 16 12 2 0 0 0 ... 0 0 0 0 9 14 2 0 0 0 1605 0 0 7 16 13 2 0 0 0 2 ... 0 0 0 5 14 11 1 0 0 0 1890 0 0 3 15 15 5 0 0 0 0 ... 2 0 0 3 15 16 16 13 1 9 1295 0 0 7 15 13 3 0 0 0 0 ... 0 0 0 9 13 12 3 0 0 0 5 rows \u00d7 65 columns 1 2 3 4 5 6 7 # import `sample` from `random` from random import sample # Create a random index randomIndex = np . array ( sample ( range ( len ( digits )), 5 )) print ( randomIndex ) 1 [ 846 569 315 2932 2328] 1 2 3 4 5 # Get 5 random rows digitsSample = digits . ix [ randomIndex ] # Print the sample print ( digitsSample ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 \\ 846 0 5 14 15 9 1 0 0 0 7 ... 0 0 4 12 16 12 10 569 0 1 7 12 12 0 0 0 0 3 ... 0 0 0 10 16 13 7 315 0 1 6 13 13 4 0 0 0 9 ... 0 0 0 4 14 16 9 2932 0 0 4 12 10 1 0 0 0 0 ... 0 0 0 4 12 11 3 2328 0 0 4 15 16 16 16 15 0 0 ... 0 0 0 5 15 3 0 62 63 64 846 4 0 2 569 0 0 3 315 2 0 2 2932 0 0 0 2328 0 0 7 [5 rows x 65 columns]","title":"Sample the Data"},{"location":"Exploratory Data Analysis/#queries","text":"1 iris . head ( 2 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class 0 4.9 3.0 1.4 0.2 Iris-setosa 1 4.7 3.2 1.3 0.2 Iris-setosa 1 2 # Petal length greater than sepal length? iris . query ( 'Petal_Length > Sepal_Length' ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class 1 2 # reverse iris . query ( 'Sepal_Length > Petal_Length' ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class 0 4.9 3.0 1.4 0.2 Iris-setosa 1 4.7 3.2 1.3 0.2 Iris-setosa 2 4.6 3.1 1.5 0.2 Iris-setosa 3 5.0 3.6 1.4 0.2 Iris-setosa 4 5.4 3.9 1.7 0.4 Iris-setosa 5 4.6 3.4 1.4 0.3 Iris-setosa 6 5.0 3.4 1.5 0.2 Iris-setosa 7 4.4 2.9 1.4 0.2 Iris-setosa 8 4.9 3.1 1.5 0.1 Iris-setosa 9 5.4 3.7 1.5 0.2 Iris-setosa 10 4.8 3.4 1.6 0.2 Iris-setosa 11 4.8 3.0 1.4 0.1 Iris-setosa 12 4.3 3.0 1.1 0.1 Iris-setosa 13 5.8 4.0 1.2 0.2 Iris-setosa 14 5.7 4.4 1.5 0.4 Iris-setosa 15 5.4 3.9 1.3 0.4 Iris-setosa 16 5.1 3.5 1.4 0.3 Iris-setosa 17 5.7 3.8 1.7 0.3 Iris-setosa 18 5.1 3.8 1.5 0.3 Iris-setosa 19 5.4 3.4 1.7 0.2 Iris-setosa 20 5.1 3.7 1.5 0.4 Iris-setosa 21 4.6 3.6 1.0 0.2 Iris-setosa 22 5.1 3.3 1.7 0.5 Iris-setosa 23 4.8 3.4 1.9 0.2 Iris-setosa 24 5.0 3.0 1.6 0.2 Iris-setosa 25 5.0 3.4 1.6 0.4 Iris-setosa 26 5.2 3.5 1.5 0.2 Iris-setosa 27 5.2 3.4 1.4 0.2 Iris-setosa 28 4.7 3.2 1.6 0.2 Iris-setosa 29 4.8 3.1 1.6 0.2 Iris-setosa ... ... ... ... ... ... 119 6.9 3.2 5.7 2.3 Iris-virginica 120 5.6 2.8 4.9 2.0 Iris-virginica 121 7.7 2.8 6.7 2.0 Iris-virginica 122 6.3 2.7 4.9 1.8 Iris-virginica 123 6.7 3.3 5.7 2.1 Iris-virginica 124 7.2 3.2 6.0 1.8 Iris-virginica 125 6.2 2.8 4.8 1.8 Iris-virginica 126 6.1 3.0 4.9 1.8 Iris-virginica 127 6.4 2.8 5.6 2.1 Iris-virginica 128 7.2 3.0 5.8 1.6 Iris-virginica 129 7.4 2.8 6.1 1.9 Iris-virginica 130 7.9 3.8 6.4 2.0 Iris-virginica 131 6.4 2.8 5.6 2.2 Iris-virginica 132 6.3 2.8 5.1 1.5 Iris-virginica 133 6.1 2.6 5.6 1.4 Iris-virginica 134 7.7 3.0 6.1 2.3 Iris-virginica 135 6.3 3.4 5.6 2.4 Iris-virginica 136 6.4 3.1 5.5 1.8 Iris-virginica 137 6.0 3.0 4.8 1.8 Iris-virginica 138 6.9 3.1 5.4 2.1 Iris-virginica 139 6.7 3.1 5.6 2.4 Iris-virginica 140 6.9 3.1 5.1 2.3 Iris-virginica 141 5.8 2.7 5.1 1.9 Iris-virginica 142 6.8 3.2 5.9 2.3 Iris-virginica 143 6.7 3.3 5.7 2.5 Iris-virginica 144 6.7 3.0 5.2 2.3 Iris-virginica 145 6.3 2.5 5.0 1.9 Iris-virginica 146 6.5 3.0 5.2 2.0 Iris-virginica 147 6.2 3.4 5.4 2.3 Iris-virginica 148 5.9 3.0 5.1 1.8 Iris-virginica 149 rows \u00d7 5 columns 1 2 # alternatively iris [ iris . Sepal_Length > iris . Petal_Length ] .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class 0 4.9 3.0 1.4 0.2 Iris-setosa 1 4.7 3.2 1.3 0.2 Iris-setosa 2 4.6 3.1 1.5 0.2 Iris-setosa 3 5.0 3.6 1.4 0.2 Iris-setosa 4 5.4 3.9 1.7 0.4 Iris-setosa 5 4.6 3.4 1.4 0.3 Iris-setosa 6 5.0 3.4 1.5 0.2 Iris-setosa 7 4.4 2.9 1.4 0.2 Iris-setosa 8 4.9 3.1 1.5 0.1 Iris-setosa 9 5.4 3.7 1.5 0.2 Iris-setosa 10 4.8 3.4 1.6 0.2 Iris-setosa 11 4.8 3.0 1.4 0.1 Iris-setosa 12 4.3 3.0 1.1 0.1 Iris-setosa 13 5.8 4.0 1.2 0.2 Iris-setosa 14 5.7 4.4 1.5 0.4 Iris-setosa 15 5.4 3.9 1.3 0.4 Iris-setosa 16 5.1 3.5 1.4 0.3 Iris-setosa 17 5.7 3.8 1.7 0.3 Iris-setosa 18 5.1 3.8 1.5 0.3 Iris-setosa 19 5.4 3.4 1.7 0.2 Iris-setosa 20 5.1 3.7 1.5 0.4 Iris-setosa 21 4.6 3.6 1.0 0.2 Iris-setosa 22 5.1 3.3 1.7 0.5 Iris-setosa 23 4.8 3.4 1.9 0.2 Iris-setosa 24 5.0 3.0 1.6 0.2 Iris-setosa 25 5.0 3.4 1.6 0.4 Iris-setosa 26 5.2 3.5 1.5 0.2 Iris-setosa 27 5.2 3.4 1.4 0.2 Iris-setosa 28 4.7 3.2 1.6 0.2 Iris-setosa 29 4.8 3.1 1.6 0.2 Iris-setosa ... ... ... ... ... ... 119 6.9 3.2 5.7 2.3 Iris-virginica 120 5.6 2.8 4.9 2.0 Iris-virginica 121 7.7 2.8 6.7 2.0 Iris-virginica 122 6.3 2.7 4.9 1.8 Iris-virginica 123 6.7 3.3 5.7 2.1 Iris-virginica 124 7.2 3.2 6.0 1.8 Iris-virginica 125 6.2 2.8 4.8 1.8 Iris-virginica 126 6.1 3.0 4.9 1.8 Iris-virginica 127 6.4 2.8 5.6 2.1 Iris-virginica 128 7.2 3.0 5.8 1.6 Iris-virginica 129 7.4 2.8 6.1 1.9 Iris-virginica 130 7.9 3.8 6.4 2.0 Iris-virginica 131 6.4 2.8 5.6 2.2 Iris-virginica 132 6.3 2.8 5.1 1.5 Iris-virginica 133 6.1 2.6 5.6 1.4 Iris-virginica 134 7.7 3.0 6.1 2.3 Iris-virginica 135 6.3 3.4 5.6 2.4 Iris-virginica 136 6.4 3.1 5.5 1.8 Iris-virginica 137 6.0 3.0 4.8 1.8 Iris-virginica 138 6.9 3.1 5.4 2.1 Iris-virginica 139 6.7 3.1 5.6 2.4 Iris-virginica 140 6.9 3.1 5.1 2.3 Iris-virginica 141 5.8 2.7 5.1 1.9 Iris-virginica 142 6.8 3.2 5.9 2.3 Iris-virginica 143 6.7 3.3 5.7 2.5 Iris-virginica 144 6.7 3.0 5.2 2.3 Iris-virginica 145 6.3 2.5 5.0 1.9 Iris-virginica 146 6.5 3.0 5.2 2.0 Iris-virginica 147 6.2 3.4 5.4 2.3 Iris-virginica 148 5.9 3.0 5.1 1.8 Iris-virginica 149 rows \u00d7 5 columns","title":"Queries"},{"location":"Exploratory Data Analysis/#the-challenges-of-data","text":"","title":"The Challenges of Data"},{"location":"Exploratory Data Analysis/#missing-values","text":"1 2 # Identifiy missing values pd . isnull ( digits ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } 0 1 2 3 4 5 6 7 8 9 ... 55 56 57 58 59 60 61 62 63 64 0 False False False False False False False False False False ... False False False False False False False False False False 1 False False False False False False False False False False ... False False False False False False False False False False 2 False False False False False False False False False False ... False False False False False False False False False False 3 False False False False False False False False False False ... False False False False False False False False False False 4 False False False False False False False False False False ... False False False False False False False False False False 5 False False False False False False False False False False ... False False False False False False False False False False 6 False False False False False False False False False False ... False False False False False False False False False False 7 False False False False False False False False False False ... False False False False False False False False False False 8 False False False False False False False False False False ... False False False False False False False False False False 9 False False False False False False False False False False ... False False False False False False False False False False 10 False False False False False False False False False False ... False False False False False False False False False False 11 False False False False False False False False False False ... False False False False False False False False False False 12 False False False False False False False False False False ... False False False False False False False False False False 13 False False False False False False False False False False ... False False False False False False False False False False 14 False False False False False False False False False False ... False False False False False False False False False False 15 False False False False False False False False False False ... False False False False False False False False False False 16 False False False False False False False False False False ... False False False False False False False False False False 17 False False False False False False False False False False ... False False False False False False False False False False 18 False False False False False False False False False False ... False False False False False False False False False False 19 False False False False False False False False False False ... False False False False False False False False False False 20 False False False False False False False False False False ... False False False False False False False False False False 21 False False False False False False False False False False ... False False False False False False False False False False 22 False False False False False False False False False False ... False False False False False False False False False False 23 False False False False False False False False False False ... False False False False False False False False False False 24 False False False False False False False False False False ... False False False False False False False False False False 25 False False False False False False False False False False ... False False False False False False False False False False 26 False False False False False False False False False False ... False False False False False False False False False False 27 False False False False False False False False False False ... False False False False False False False False False False 28 False False False False False False False False False False ... False False False False False False False False False False 29 False False False False False False False False False False ... False False False False False False False False False False ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 3793 False False False False False False False False False False ... False False False False False False False False False False 3794 False False False False False False False False False False ... False False False False False False False False False False 3795 False False False False False False False False False False ... False False False False False False False False False False 3796 False False False False False False False False False False ... False False False False False False False False False False 3797 False False False False False False False False False False ... False False False False False False False False False False 3798 False False False False False False False False False False ... False False False False False False False False False False 3799 False False False False False False False False False False ... False False False False False False False False False False 3800 False False False False False False False False False False ... False False False False False False False False False False 3801 False False False False False False False False False False ... False False False False False False False False False False 3802 False False False False False False False False False False ... False False False False False False False False False False 3803 False False False False False False False False False False ... False False False False False False False False False False 3804 False False False False False False False False False False ... False False False False False False False False False False 3805 False False False False False False False False False False ... False False False False False False False False False False 3806 False False False False False False False False False False ... False False False False False False False False False False 3807 False False False False False False False False False False ... False False False False False False False False False False 3808 False False False False False False False False False False ... False False False False False False False False False False 3809 False False False False False False False False False False ... False False False False False False False False False False 3810 False False False False False False False False False False ... False False False False False False False False False False 3811 False False False False False False False False False False ... False False False False False False False False False False 3812 False False False False False False False False False False ... False False False False False False False False False False 3813 False False False False False False False False False False ... False False False False False False False False False False 3814 False False False False False False False False False False ... False False False False False False False False False False 3815 False False False False False False False False False False ... False False False False False False False False False False 3816 False False False False False False False False False False ... False False False False False False False False False False 3817 False False False False False False False False False False ... False False False False False False False False False False 3818 False False False False False False False False False False ... False False False False False False False False False False 3819 False False False False False False False False False False ... False False False False False False False False False False 3820 False False False False False False False False False False ... False False False False False False False False False False 3821 False False False False False False False False False False ... False False False False False False False False False False 3822 False False False False False False False False False False ... False False False False False False False False False False 3823 rows \u00d7 65 columns","title":"Missing Values"},{"location":"Exploratory Data Analysis/#delete","text":"1 2 3 4 5 # Drop rows with missing values df . dropna ( axis = 0 ) # Drop columns with missing values df . dropna ( axis = 1 )","title":"Delete"},{"location":"Exploratory Data Analysis/#impute","text":"Imputation: mean, median, another variable, estimate with regression ANOVA, logit, k-NN. 1 2 3 4 5 6 7 8 9 10 # Import NumPy import numpy as np # Calculate the mean of the DataFrame variable Salary mean = np . mean ( df . Salary ) # Replace missing values with the mean df = df . Salary . fillna ( mean ) df = df . Salary . fillna ( mean , method = ffill ) ffill and bfill for forward and backward fill. 1 2 3 4 5 6 from scipy import interpolate # Fill the DataFrame df . interpolate () df . interpolate ( method = cubic ) cubic , polynomial . limit and limit_direction .","title":"Impute"},{"location":"Exploratory Data Analysis/#outliers","text":"Delete (data entry, processing errors), transform (assign weights, natural log to reduce variation) or impute them (replace extreme values with median, mean or mode values).","title":"Outliers"},{"location":"Exploratory Data Analysis/#the-datas-features","text":"","title":"The Data\u2019s Features"},{"location":"Exploratory Data Analysis/#feature-engineering","text":"Increase the predictive power of learning algorithms by creating features from raw data that will help the learning process.","title":"Feature Engineering"},{"location":"Exploratory Data Analysis/#encode-categorical-variables-into-numerical-ones","text":"1 2 3 4 5 6 7 8 # Factorize the values labels , levels = pd . factorize ( iris . Class ) # Save the encoded variables in `iris.Class` iris . Class = labels # Print out the first rows iris . Class . head () 1 2 3 4 5 6 0 0 1 0 2 0 3 0 4 0 Name: Class, dtype: int64","title":"Encode categorical variables into numerical ones"},{"location":"Exploratory Data Analysis/#bin-continuous-variables-in-groups","text":"1 2 3 4 5 6 7 8 # Define the bins mybins = range ( 0 , df . age . max (), 10 ) # Cut the data from the DataFrame with the help of the bins df [ 'age_bucket' ] = pd . cut ( df . age , bins = mybins ) # Count the number of values per bucket df [ 'age_bucket' ] . value_counts ()","title":"Bin continuous variables in groups"},{"location":"Exploratory Data Analysis/#scale-features","text":"Center the data around 0. 1 2 3 4 5 from sklearn.preprocessing import StandardScaler scaler = StandardScaler () . fit ( X ) rescaledX = scaler . transform ( X )","title":"Scale features"},{"location":"Exploratory Data Analysis/#feature-selection","text":"Select the key subset of original data features in an attempt to reduce the dimensionality of the training problem. PCA combines similar (correlated) attributes and creates new ones that are considered superior to the original attributes of the dataset. Feature selection doesn\u2019t combine attributes: it evaluates the quality and predictive power and selects the best set. To find important features, calculate how much better or worse a model does when we leave one variable out of the equation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Import `RandomForestClassifier` from sklearn.ensemble import RandomForestClassifier # Isolate Data, class labels and column values X = iris . iloc [:, 0 : 4 ] Y = iris . iloc [:, - 1 ] names = iris . columns . values # Build the model rfc = RandomForestClassifier () # Fit the model rfc . fit ( X , Y ) # Print the results print ( \"Features sorted by their score:\" ) print ( sorted ( zip ( map ( lambda x : round ( x , 4 ), rfc . feature_importances_ ), names ), reverse = True )) 1 2 Features sorted by their score: [(0.4899, 'Petal_Length'), (0.2752, 'Petal_Width'), (0.2185, 'Sepal_Length'), (0.016400000000000001, 'Sepal_Width')] The best feature set is one that includes the petal length and petal width data. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Isolate feature importances importance = rfc . feature_importances_ # Sort the feature importances sorted_importances = np . argsort ( importance ) # Insert padding padding = np . arange ( len ( names ) - 1 ) + 0.5 # Plot the data plt . barh ( padding , importance [ sorted_importances ], align = 'center' ) # Customize the plot plt . yticks ( padding , names [ sorted_importances ]) plt . xlabel ( \"Relative Importance\" ) plt . title ( \"Variable Importance\" ) # Show the plot plt . show ()","title":"Feature Selection"},{"location":"Exploratory Data Analysis/#patterns-in-the-data","text":"Visualization of the data; static with Matplotlib or Seaborn, interactive with Bokeh or Plotly.","title":"Patterns In the Data"},{"location":"Exploratory Data Analysis/#correlation-identification-with-pca-from-scikit-learn","text":"","title":"Correlation Identification with PCA from scikit-learn"},{"location":"Exploratory Data Analysis/#matplotlib","text":"Dimensionality Reduction techniques, such as Principal Component Analysis (PCA). From \u2018many\u2019 to two \u2018principal components\u2019. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import `PCA` from `sklearn.decomposition` from sklearn.decomposition import PCA # Build the model pca = PCA ( n_components = 2 ) # Reduce the data, output is ndarray reduced_data = pca . fit_transform ( digits ) # Inspect shape of the `reduced_data` reduced_data . shape # print out the reduced data print ( reduced_data ) 1 2 3 4 5 6 7 [[ 12.65674168 -4.63610357] [ 16.82906354 -12.96575346] [-19.08072301 10.58293767] ..., [ 23.90693984 6.06265415] [ 29.1798759 -3.06847144] [-25.23132536 11.60863909]] 1 reduced_data = pd . DataFrame ( reduced_data ) 1 2 3 4 5 import matplotlib.pyplot as plt plt . scatter ( reduced_data [ 0 ], reduced_data [ 1 ]) plt . show ()","title":"Matplotlib"},{"location":"Exploratory Data Analysis/#bokeh","text":"To be implemented in a webpage for example. 1 2 3 4 5 6 7 8 9 10 11 from bokeh.charts import Scatter , output_file , show # Construct the scatter plot p = Scatter ( iris , x = 'Petal_Length' , y = 'Petal_Width' , color = \"Class\" , title = \"Petal Length vs Petal Width\" , xlabel = \"Sepal Length\" , ylabel = \"Sepal Width\" ) # Output the file output_file ( 'scatter.html' ) # Show the scatter plot show ( p ) The GIF output:","title":"Bokeh"},{"location":"Exploratory Data Analysis/#correlation-identification-with-pandas","text":"The Pearson correlation assumes that the variables are normally distributed, that there is a straight line relationship between each of the variables and that the data is normally distributed about the regression line. The Spearman correlation, on the other hand, assumes that we have two ordinal variables or two variables that are related in some way, but not linearly. The Spearman coefficient is the sum of deviation squared by n times n minus 1. The Kendall Tau correlation is a coefficient that represents the degree of concordance between two columns of ranked data. We can use the Spearman correlation to measure the degree of association between two variables. The Kendal Tau coefficient is calculated by the number of concordant pairs minus the number of discordant pairs divided by the total number of pairs. Spearman\u2019s coefficient will usually be larger than the Kendall\u2019s Tau coefficient, but this is not always the case: we\u2019ll get a smaller Spearman\u2019s coefficient when the deviations are huge among the observations of the data. The Spearman correlation is very sensitive to this and this might come in handy in some cases! The two last correlation measures require ranking the data. 1 2 # Pearson correlation iris . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class Sepal_Length 1.000000 -0.103784 0.871283 0.816971 0.781219 Sepal_Width -0.103784 1.000000 -0.415218 -0.350733 -0.414532 Petal_Length 0.871283 -0.415218 1.000000 0.962314 0.948519 Petal_Width 0.816971 -0.350733 0.962314 1.000000 0.956014 Class 0.781219 -0.414532 0.948519 0.956014 1.000000 1 2 3 iris2 = iris . rank () # Kendall Tau correlation iris2 . corr ( 'kendall' ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class Sepal_Length 1.000000 -0.067636 0.718290 0.654197 0.669163 Sepal_Width -0.067636 1.000000 -0.175665 -0.140207 -0.327228 Petal_Length 0.718290 -0.175665 1.000000 0.803041 0.822578 Petal_Width 0.654197 -0.140207 0.803041 1.000000 0.837934 Class 0.669163 -0.327228 0.822578 0.837934 1.000000 1 2 # Spearman Rank correlation iris2 . corr ( 'spearman' ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Sepal_Length Sepal_Width Petal_Length Petal_Width Class Sepal_Length 1.000000 -0.152136 0.881759 0.833586 0.796546 Sepal_Width -0.152136 1.000000 -0.294020 -0.267686 -0.426319 Petal_Length 0.881759 -0.294020 1.000000 0.936188 0.935220 Petal_Width 0.833586 -0.267686 0.936188 1.000000 0.937409 Class 0.796546 -0.426319 0.935220 0.937409 1.000000","title":"Correlation Identification with Pandas"},{"location":"Feature_Selection_in_Python/","text":"Foreword Notes. A feature selection case \u00b6 We use the Pima Indians Diabetes dataset from Kaggle . The dataset corresponds to classification tasks on which you need to predict if a person has diabetes based on 8 features. 1 2 3 # Loading the primary modules import pandas as pd import numpy as np 1 2 3 4 5 6 7 # Loading the data dataframe = pd . read_csv ( \"data/diabetes.csv\" ) # Alternative way #url = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\" #names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class'] #dataframe = pd.read_csv(url, names=names) 1 dataframe . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Pregnancies Glucose BloodPressure SkinThickness Insulin BMI DiabetesPedigreeFunction Age Outcome 0 6 148 72 35 0 33.6 0.627 50 1 1 1 85 66 29 0 26.6 0.351 31 0 2 8 183 64 0 0 23.3 0.672 32 1 1 2 3 4 # Renaming the features, fields or columns AND the response, dependent variable names = [ 'preg' , 'plas' , 'pres' , 'skin' , 'test' , 'mass' , 'pedi' , 'age' , 'class' ] dataframe . columns = names dataframe . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } preg plas pres skin test mass pedi age class 0 6 148 72 35 0 33.6 0.627 50 1 1 1 85 66 29 0 26.6 0.351 31 0 2 8 183 64 0 0 23.3 0.672 32 1 1 2 3 4 5 6 7 8 9 10 11 12 # Keeping the values only # Converting the DataFrame object to a Numpy ndarray # to achieve faster computation array = dataframe . values # Segregating the data into separate variables # Features and the labels are separated # Features, col 0 to 7 X = array [:, 0 : 8 ] # Response, col 8 Y = array [:, 8 ] Filter feature selection techniques \u00b6 Let\u2019s implement a chi-squared statistical test for non-negative features to select 4 of the best features from the dataset; from the scikit-learn module. Other \u201cCorrelation\u201d techniques: Pearsons\u2019 correlation, LDA, and ANOVA. A word on the chi-squared test The chi-squared test is used to determine whether there is a significant difference between the expected frequencies or proportions or distribution and the observed frequencies or proportions or distribution in one or more categories. It is used to compared the variance of categories or samples vs. population. It test if each category is mutually exclusive or statistically independent from the other categories. If the categories are independent, there are not \u201ccorrelated\u201d. The null hypothesis: mutually exclusive or statistically independent. When we reject the null hypothesis, we conclude to statistical dependence or homogeneity. 1 2 3 4 5 # Importing the necessary modules # SelectKBest class can be used with a suite of different statistical tests # to select a specific number of features from sklearn.feature_selection import SelectKBest from sklearn.feature_selection import chi2 1 2 3 # Feature extraction test = SelectKBest ( score_func = chi2 , k = 4 ) fit = test . fit ( X , Y ) 1 2 3 4 # Summarizing scores np . set_printoptions ( precision = 3 ) print ( fit . scores_ ) 1 2 [ 111.52 1411.887 17.605 53.108 2175.565 127.669 5.393 181.304] 1 2 # Alternative view pd . DataFrame ({ 'names' : names [ 0 : 8 ], 'scores' : fit . scores_ }) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } names scores 0 preg 111.519691 1 plas 1411.887041 2 pres 17.605373 3 skin 53.108040 4 test 2175.565273 5 mass 127.669343 6 pedi 5.392682 7 age 181.303689 You can see the scores for each attribute and the 4 attributes chosen (those with the highest scores): plas, test, mass, age . This scores will help you further in determining the best features for training your model. 1 2 3 4 features = fit . transform ( X ) # Summarizing selected features (plas, test, mass, age) features [ 0 : 5 ,:] 1 2 3 4 5 array([[ 148. , 0. , 33.6, 50. ], [ 85. , 0. , 26.6, 31. ], [ 183. , 0. , 23.3, 32. ], [ 89. , 94. , 28.1, 21. ], [ 137. , 168. , 43.1, 33. ]]) 1 2 # Alternative view pd . DataFrame ( features [ 0 : 5 ,:], columns = [ 'plas' , 'test' , 'mass' , 'age' ]) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } plas test mass age 0 148.0 0.0 33.6 50.0 1 85.0 0.0 26.6 31.0 2 183.0 0.0 23.3 32.0 3 89.0 94.0 28.1 21.0 4 137.0 168.0 43.1 33.0 1 2 # Original dataset dataframe . head ( 5 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } preg plas pres skin test mass pedi age class 0 6 148 72 35 0 33.6 0.627 50 1 1 1 85 66 29 0 26.6 0.351 31 0 2 8 183 64 0 0 23.3 0.672 32 1 3 1 89 66 23 94 28.1 0.167 21 0 4 0 137 40 35 168 43.1 2.288 33 1 In R \u00b6 The caret package provides tools to automatically report on the relevance and importance of attributes in your data and even select the most important features. Data can contain attributes that are highly correlated with each other. Many methods perform better if highly correlated attributes are removed. The caret package provides findCorrelation which will analyze a correlation matrix of your data\u2019s attributes report on attributes that can be removed. Using the Pima Indians Diabetes dataset, let\u2019s remove attributes with an absolute correlation of 0.75 or higher. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Ensuring the results are repeatable set.seed ( 7 ) # Loading the packages library ( mlbench ) library ( caret ) # Loading the data data ( PimaIndiansDiabetes ) # Calculating the correlation matrix correlationMatrix <- cor ( PimaIndiansDiabetes [, 1 : 8 ]) # Summarizing the correlation matrix print ( correlationMatrix ) # Finding attributes that are highly corrected (ideally >0.75) highlyCorrelated <- findCorrelation ( correlationMatrix , cutoff = 0.5 ) # Printing the indexes of highly correlated attributes print ( highlyCorrelated ) r The importance of features can be estimated from data by building a model. Some methods like decision trees have a built-in mechanism to report on variable importance. For other algorithms, the importance can be estimated using a ROC curve analysis conducted for each attribute. Let\u2019s constructs a Learning Vector Quantization (LVQ) model. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Ensuring the results are repeatable set.seed ( 7 ) # Loading the packages library ( mlbench ) library ( caret ) # Loading the data data ( PimaIndiansDiabetes ) # Calculating the correlation matrix correlationMatrix <- cor ( PimaIndiansDiabetes [, 1 : 8 ]) # Summarizing the correlation matrix print ( correlationMatrix ) # Finding attributes that are highly corrected (ideally > 0.75) highlyCorrelated <- findCorrelation ( correlationMatrix , cutoff = 0.5 ) # Printing indexes of highly correlated attributes print ( highlyCorrelated ) Wrapper feature selection techniques \u00b6 Let\u2019s implement a Recursive Feature Elimination from the scikit-learn module. Other techniques: Forward Selection, Backward Elimination, and Combination of forward selection and backward elimination. The Recursive Feature Elimination (or RFE) works by recursively removing attributes and building a model on those attributes that remain. It uses the model accuracy to identify which attributes (and a combination of attributes) contribute the most to predicting the target attribute. You use RFE with the Logistic Regression classifier to select the top 3 features. The choice of algorithms does not matter too much as long as it is consistent. 1 2 3 # Importing your necessary modules from sklearn.feature_selection import RFE from sklearn.linear_model import LogisticRegression 1 2 3 4 5 6 7 8 9 # Feature extraction model = LogisticRegression () rfe = RFE ( model , 3 ) fit = rfe . fit ( X , Y ) # Summarizing the selection of the attributes print ( \"Num Features: %s \" % ( fit . n_features_ )) print ( \"Selected Features: %s \" % ( fit . support_ )) print ( \"Feature Ranking: %s \" % ( fit . ranking_ )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Num Features: 3 Selected Features: [ True False False False False True True False] Feature Ranking: [1 2 3 5 6 1 1 4] /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) 1 2 # Alternative view pd . DataFrame ({ 'names' : names [ 0 : 8 ], 'selected' : fit . support_ , 'ranking' : fit . ranking_ }) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } names ranking selected 0 preg 1 True 1 plas 2 False 2 pres 3 False 3 skin 5 False 4 test 6 False 5 mass 1 True 6 pedi 1 True 7 age 4 False You can see that RFE chose the top 3 features as preg, mass, pedi . These are marked True in the support array and marked with a choice \u201c1\u201d in the ranking array. You can also use RFE with the Bagged decision trees like Random Forest and Extra Trees to estimate the importance of features. 1 2 3 4 5 6 # Feature extraction model = ExtraTreesClassifier () fit = model . fit ( X , Y ) # Summarizing the selection of the attributes print ( fit . feature_importances_ ) 1 2 3 4 5 6 [0.10490793 0.20041541 0.0958495 0.08070628 0.0849718 0.15844774 0.12226854 0.15243279] /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/ensemble/forest.py:248: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22. \"10 in version 0.20 to 100 in 0.22.\", FutureWarning) 1 2 print ( \"Num Features: %s \" % ( fit . n_features_ )) print ( \"Features Importance: %s \" % fit . feature_importances_ ) 1 2 3 Num Features: 8 Features Importance: [0.10490793 0.20041541 0.0958495 0.08070628 0.0849718 0.15844774 0.12226854 0.15243279] 1 2 3 # Alternative view pd . DataFrame ({ 'names' : names [ 0 : 8 ], 'importance' : fit . feature_importances_ }) . \\ sort_values ( by = 'importance' , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } importance names 1 0.200415 plas 5 0.158448 mass 7 0.152433 age 6 0.122269 pedi 0 0.104908 preg 2 0.095849 pres 4 0.084972 test 3 0.080706 skin Another dataset, another example \u00b6 Let\u2019s tackle another example using the built-in iris dataset, reusing the Logistic Regression and the Extra Tree Ensemble. 1 2 3 # Importing your necessary modules from sklearn.feature_selection import RFE from sklearn.linear_model import LogisticRegression 1 2 3 4 5 6 # Loading the iris datasets from sklearn import datasets dataset = datasets . load_iris () names = [ 'sepal length' , 'sepal width' , 'petal length' , 'petal width' ] dataset_df = pd . DataFrame ( dataset . data , columns = names ) dataset_df . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sepal length sepal width petal length petal width 0 5.1 3.5 1.4 0.2 1 4.9 3.0 1.4 0.2 2 4.7 3.2 1.3 0.2 1 2 3 4 5 6 # Creating a base classifier used to evaluate a subset of attributes model = LogisticRegression () # Creating the RFE model and select 3 attributes rfe = RFE ( model , 3 ) fit = rfe . fit ( dataset . data , dataset . target ) 1 2 3 4 5 6 7 8 /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:459: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning. \"this warning.\", FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:459: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning. \"this warning.\", FutureWarning) 1 2 3 print ( \"Num Features: %s \" % ( fit . n_features_ )) print ( \"Selected Features: %s \" % ( fit . support_ )) print ( \"Feature Ranking: %s \" % ( fit . ranking_ )) 1 2 3 Num Features: 3 Selected Features: [False True True True] Feature Ranking: [2 1 1 1] 1 2 # Alternative view pd . DataFrame ({ 'names' : names , 'selected' : fit . support_ , 'ranking' : fit . ranking_ }) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } names ranking selected 0 sepal length 2 False 1 sepal width 1 True 2 petal length 1 True 3 petal width 1 True Keep top-ranking features (rank 1) and leave out the other features (rank 2). 1 2 3 # Importing your necessary modules from sklearn import metrics from sklearn.ensemble import ExtraTreesClassifier 1 2 3 4 5 6 # Creating a base classifier rfe = ExtraTreesClassifier () # Creating the RFE model and select 3 attributes rfe . fit ( dataset . data , dataset . target ) fit = rfe . fit ( dataset . data , dataset . target ) 1 2 3 4 5 [0.08470961 0.02095061 0.37336503 0.52097475] /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/ensemble/forest.py:248: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22. \"10 in version 0.20 to 100 in 0.22.\", FutureWarning) 1 2 print ( \"Num Features: %s \" % ( fit . n_features_ )) print ( \"Features Importance: %s \" % rfe . feature_importances_ ) 1 2 Num Features: 4 Features Importance: [0.08470961 0.02095061 0.37336503 0.52097475] 1 2 3 # Alternative view pd . DataFrame ({ 'names' : names , 'importance' : rfe . feature_importances_ }) . \\ sort_values ( by = 'importance' , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } importance names 3 0.520975 petal width 2 0.373365 petal length 0 0.084710 sepal length 1 0.020951 sepal width The last results confirm the previous results. In R \u00b6 Recursive Feature Elimination or RFE. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # Ensuring the results are repeatable set.seed ( 7 ) # Loading the packages library ( mlbench ) library ( caret ) # Loading the data data ( PimaIndiansDiabetes ) # Defining the control using a random forest selection function control <- rfeControl ( functions = rfFuncs , method = \"cv\" , number = 10 ) # Running the RFE algorithm results <- rfe ( PimaIndiansDiabetes [, 1 : 8 ], PimaIndiansDiabetes [, 9 ], sizes = c ( 1 : 8 ), rfeControl = control ) # Summarize the results print ( results ) # Listing the chosen features predictors ( results ) # Plotting the results plot ( results , type = c ( \"g\" , \"o\" )) Embedded feature selection techniques \u00b6 Let\u2019s use the Ridge regression from the scikit-learn module; a regularization technique as well. Other techniques: LASSO and Elastic Net. Find out more about regularization techniques . 1 2 # Importing your necessary module from sklearn.linear_model import Ridge 1 2 3 # Using Ridge regression to determine the R-squared ridge = Ridge ( alpha = 1.0 ) ridge . fit ( X , Y ) 1 2 Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None, normalize=False, random_state=None, solver='auto', tol=0.001) In order to better understand the results of Ridge regression, you will implement a little helper function that will help you to print the results in a better so that you can interpret them easily. 1 2 3 4 5 6 7 8 9 # Implementing a function for pretty-printing the coefficients def pretty_print_coefs ( coefs , names = None , sort = False ): if names == None : names = [ \"X %s \" % x for x in range ( len ( coefs ))] lst = zip ( coefs , names ) if sort : lst = sorted ( lst , key = lambda x : - np . abs ( x [ 0 ])) return \" + \" . join ( \" %s * %s \" % ( round ( coef , 3 ), name ) for coef , name in lst ) 1 2 3 4 5 # Applying the function print ( \"Ridge model:\" , pretty_print_coefs ( ridge . coef_ )) print ( '' ) # Applying the function with the names print ( \"Ridge model:\" , pretty_print_coefs ( ridge . coef_ , names )) 1 2 3 Ridge model: 0.021 * X0 + 0.006 * X1 + -0.002 * X2 + 0.0 * X3 + -0.0 * X4 + 0.013 * X5 + 0.145 * X6 + 0.003 * X7 Ridge model: 0.021 * preg + 0.006 * plas + -0.002 * pres + 0.0 * skin + -0.0 * test + 0.013 * mass + 0.145 * pedi + 0.003 * age 1 2 # Applying the function with the names and sorting the results print ( \"Ridge model:\" , pretty_print_coefs ( ridge . coef_ , names , True )) 1 Ridge model: 0.145 * pedi + 0.021 * preg + 0.013 * mass + 0.006 * plas + 0.003 * age + -0.002 * pres + -0.0 * test + 0.0 * skin You can spot all the coefficient terms appended with the feature variables. You can pick the most essential features. The sorted top 3 features are pedi, preg, mass . A word on the Ridge regression It is also known as L2-Regularization. For correlated features, it means that they tend to get similar coefficients. Feature having negative coefficients don\u2019t contribute that much. But in a more complex scenario where you are dealing with lots of features, then this score will definitely help you in the ultimate feature selection decision-making process. Takeway \u00b6 The three techniques help to understand the features of a particular dataset in a comprehensive manner. Feature selection is essentially a part of data preprocessing which is considered to be the most time-consuming part of any machine learning pipeline. These techniques will help you to approach it in a more systematic way and machine learning friendly way. You will be able to interpret the features more accurately. Why Penalize the Magnitude of Coefficients? \u00b6 Given a sine curve (between 60\u00b0 and 300\u00b0) and some random noise using the following code: 1 2 3 4 5 6 7 8 # Importing modules import numpy as np import pandas as pd import random import matplotlib.pyplot as plt % matplotlib inline from matplotlib.pylab import rcParams rcParams [ 'figure.figsize' ] = 12 , 10 1 2 3 4 5 6 7 8 9 10 11 # Defining input array with angles # from 60deg to 300deg converted to radians x = np . array ([ i * np . pi / 180 for i in range ( 60 , 300 , 4 )]) # Setting seed for reproducability np . random . seed ( 10 ) y = np . sin ( x ) + np . random . normal ( 0 , 0.15 , len ( x )) data = pd . DataFrame ( np . column_stack ([ x , y ]), columns = [ 'x' , 'y' ]) plt . plot ( data [ 'x' ], data [ 'y' ], '.' ); Let\u2019s try to estimate the sine function using polynomial regression with powers of x form 1 to 15. Let\u2019s add a column for each power up to 15. 1 2 3 4 5 # Power of 1 is already there for i in range ( 2 , 16 ): colname = 'x_ %d ' % i # new var will be x_power data [ colname ] = data [ 'x' ] ** i data . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x y x_2 x_3 x_4 x_5 x_6 x_7 x_8 x_9 x_10 x_11 x_12 x_13 x_14 x_15 0 1.047198 1.065763 1.096623 1.148381 1.202581 1.259340 1.318778 1.381021 1.446202 1.514459 1.585938 1.660790 1.739176 1.821260 1.907219 1.997235 1 1.117011 1.006086 1.247713 1.393709 1.556788 1.738948 1.942424 2.169709 2.423588 2.707173 3.023942 3.377775 3.773011 4.214494 4.707635 5.258479 2 1.186824 0.695374 1.408551 1.671702 1.984016 2.354677 2.794587 3.316683 3.936319 4.671717 5.544505 6.580351 7.809718 9.268760 11.000386 13.055521 3 1.256637 0.949799 1.579137 1.984402 2.493673 3.133642 3.937850 4.948448 6.218404 7.814277 9.819710 12.339811 15.506664 19.486248 24.487142 30.771450 4 1.326450 1.063496 1.759470 2.333850 3.095735 4.106339 5.446854 7.224981 9.583578 12.712139 16.862020 22.366630 29.668222 39.353420 52.200353 69.241170 Now that we have all the 15 powers, let\u2019s make 15 different linear regression models with each model containing variables with powers of x from 1 to the particular model number. For example, the feature set of model 8 will be {x, x_2, x_3, \u2026 , x_8}. 1 2 # Importing the Linear Regression model from scikit-learn from sklearn.linear_model import LinearRegression 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def linear_regression ( data , power , models_to_plot ): #initialize predictors: predictors = [ 'x' ] if power >= 2 : predictors . extend ([ 'x_ %d ' % i for i in range ( 2 , power + 1 )]) # Fitting the model linreg = LinearRegression ( normalize = True ) linreg . fit ( data [ predictors ], data [ 'y' ]) y_pred = linreg . predict ( data [ predictors ]) # Checking if a plot is to be made for the entered power if power in models_to_plot : plt . subplot ( models_to_plot [ power ]) plt . tight_layout () plt . plot ( data [ 'x' ], y_pred ) plt . plot ( data [ 'x' ], data [ 'y' ], '.' ) plt . title ( 'Plot for power: %d ' % power ) # Returning the result in pre-defined format rss = sum (( y_pred - data [ 'y' ]) ** 2 ) ret = [ rss ] ret . extend ([ linreg . intercept_ ]) ret . extend ( linreg . coef_ ) return ret Now, we can make all 15 models and compare the results. 1 2 3 4 # Initializing a DataFrame to store the results col = [ 'rss' , 'intercept' ] + [ 'coef_x_ %d ' % i for i in range ( 1 , 16 )] ind = [ 'model_pow_ %d ' % i for i in range ( 1 , 16 )] coef_matrix_simple = pd . DataFrame ( index = ind , columns = col ) 1 2 # Defining the powers for which a plot is required models_to_plot = { 1 : 231 , 3 : 232 , 6 : 233 , 9 : 234 , 12 : 235 , 15 : 236 } 1 2 3 # Iterating through all powers and assimilate results for i in range ( 1 , 16 ): coef_matrix_simple . iloc [ i - 1 , 0 : i + 2 ] = linear_regression ( data , power = i , models_to_plot = models_to_plot ) As the model complexity increases, the models tend to fit even smaller deviations in the training data set. This leads to overfitting. 1 2 3 # Displaying the analysis pd . options . display . float_format = '{:,.2g}' . format coef_matrix_simple .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } rss intercept coef_x_1 coef_x_2 coef_x_3 coef_x_4 coef_x_5 coef_x_6 coef_x_7 coef_x_8 coef_x_9 coef_x_10 coef_x_11 coef_x_12 coef_x_13 coef_x_14 coef_x_15 model_pow_1 3.3 2 -0.62 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_2 3.3 1.9 -0.58 -0.006 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_3 1.1 -1.1 3 -1.3 0.14 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_4 1.1 -0.27 1.7 -0.53 -0.036 0.014 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_5 1 3 -5.1 4.7 -1.9 0.33 -0.021 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_6 0.99 -2.8 9.5 -9.7 5.2 -1.6 0.23 -0.014 NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_7 0.93 19 -56 69 -45 17 -3.5 0.4 -0.019 NaN NaN NaN NaN NaN NaN NaN NaN model_pow_8 0.92 43 -1.4e+02 1.8e+02 -1.3e+02 58 -15 2.4 -0.21 0.0077 NaN NaN NaN NaN NaN NaN NaN model_pow_9 0.87 1.7e+02 -6.1e+02 9.6e+02 -8.5e+02 4.6e+02 -1.6e+02 37 -5.2 0.42 -0.015 NaN NaN NaN NaN NaN NaN model_pow_10 0.87 1.4e+02 -4.9e+02 7.3e+02 -6e+02 2.9e+02 -87 15 -0.81 -0.14 0.026 -0.0013 NaN NaN NaN NaN NaN model_pow_11 0.87 -75 5.1e+02 -1.3e+03 1.9e+03 -1.6e+03 9.1e+02 -3.5e+02 91 -16 1.8 -0.12 0.0034 NaN NaN NaN NaN model_pow_12 0.87 -3.4e+02 1.9e+03 -4.4e+03 6e+03 -5.2e+03 3.1e+03 -1.3e+03 3.8e+02 -80 12 -1.1 0.062 -0.0016 NaN NaN NaN model_pow_13 0.86 3.2e+03 -1.8e+04 4.5e+04 -6.7e+04 6.6e+04 -4.6e+04 2.3e+04 -8.5e+03 2.3e+03 -4.5e+02 62 -5.7 0.31 -0.0078 NaN NaN model_pow_14 0.79 2.4e+04 -1.4e+05 3.8e+05 -6.1e+05 6.6e+05 -5e+05 2.8e+05 -1.2e+05 3.7e+04 -8.5e+03 1.5e+03 -1.8e+02 15 -0.73 0.017 NaN model_pow_15 0.7 -3.6e+04 2.4e+05 -7.5e+05 1.4e+06 -1.7e+06 1.5e+06 -1e+06 5e+05 -1.9e+05 5.4e+04 -1.2e+04 1.9e+03 -2.2e+02 17 -0.81 0.018 It is clearly evident that the size of coefficients increase exponentially with increase in model complexity. It means that we\u2019re putting a lot of emphasis on that feature, i.e. the particular feature is a good predictor for the outcome. When it becomes too large, the algorithm starts modelling intricate relations to estimate the output and ends up overfitting to the particular training data. Ridge regression \u00b6 A ridge regression performs L2 regularization\u2019, i.e. it adds a factor of sum of squares of coefficients in the optimization objective. Objective = RSS + alpha * (sum of square of coefficients) The alpha parameter balances the amount of emphasis given to minimizing RSS vs minimizing sum of square of coefficients. alpha = 0, a simple linear regression; alpha = infinite, infinite weight on square of coefficients, anything less than zero will make the objective infinite; all coefficients zero; 0 < alpha < infinite, somewhere between 0 and 1 for simple linear regression. One thing is for sure that any non-zero value would give values less than that of simple linear regression. 1 2 # Importing the Ridge Regression model from scikit-learn from sklearn.linear_model import Ridge 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def ridge_regression ( data , predictors , alpha , models_to_plot = {}): # Fitting the model ridgereg = Ridge ( alpha = alpha , normalize = True ) ridgereg . fit ( data [ predictors ], data [ 'y' ]) y_pred = ridgereg . predict ( data [ predictors ]) # Checking if a plot is to be made for the entered alpha if alpha in models_to_plot : plt . subplot ( models_to_plot [ alpha ]) plt . tight_layout () plt . plot ( data [ 'x' ], y_pred ) plt . plot ( data [ 'x' ], data [ 'y' ], '.' ) plt . title ( 'Plot for alpha: %.3g ' % alpha ) # Returning the result in pre-defined format rss = sum (( y_pred - data [ 'y' ]) ** 2 ) ret = [ rss ] ret . extend ([ ridgereg . intercept_ ]) ret . extend ( ridgereg . coef_ ) return ret Let\u2019s analyze the result of Ridge regression for 10 different values of alpha ranging from 1e-15 to 20. Each of these 10 models will contain all the 15 variables and only the value of alpha would differ. This is different from the simple linear regression case where each model had a subset of features. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Initializing predictors to be set of 15 powers of x predictors = [ 'x' ] predictors . extend ([ 'x_ %d ' % i for i in range ( 2 , 16 )]) # Setting the different values of alpha to be tested alpha_ridge = [ 1e-15 , 1e-10 , 1e-8 , 1e-4 , 1e-3 , 1e-2 , 1 , 5 , 10 , 20 ] # Initializing the dataframe for storing coefficients. col = [ 'rss' , 'intercept' ] + [ 'coef_x_ %d ' % i for i in range ( 1 , 16 )] ind = [ 'alpha_ %.2g ' % alpha_ridge [ i ] for i in range ( 0 , 10 )] coef_matrix_ridge = pd . DataFrame ( index = ind , columns = col ) models_to_plot = { 1e-15 : 231 , 1e-10 : 232 , 1e-4 : 233 , 1e-3 : 234 , 1e-2 : 235 , 5 : 236 } for i in range ( 10 ): coef_matrix_ridge . iloc [ i ,] = ridge_regression ( data , predictors , alpha_ridge [ i ], models_to_plot ) 1 2 3 4 /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/ridge.py:125: LinAlgWarning: scipy.linalg.solve Ill-conditioned matrix detected. Result is not guaranteed to be accurate. Reciprocal condition number4.572933e-17 overwrite_a=True).T As the value of alpha increases, the model complexity reduces. Though higher values of alpha reduce overfitting, significantly high values can cause underfitting as well (alpha = 5, for example). Thus alpha should be chosen wisely. A widely accept technique is cross-validation, i.e. the value of alpha is iterated over a range of values and the one giving higher cross-validation score is chosen. 1 2 3 # Displaying the analysis pd . options . display . float_format = '{:,.2g}' . format coef_matrix_ridge .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } rss intercept coef_x_1 coef_x_2 coef_x_3 coef_x_4 coef_x_5 coef_x_6 coef_x_7 coef_x_8 coef_x_9 coef_x_10 coef_x_11 coef_x_12 coef_x_13 coef_x_14 coef_x_15 alpha_1e-15 0.87 94 -3e+02 3.7e+02 -2.3e+02 61 2.6 -5.1 0.62 0.17 -0.03 -0.0052 0.001 0.00017 -4.6e-05 3.1e-06 -3.8e-08 alpha_1e-10 0.92 11 -29 31 -15 2.9 0.17 -0.091 -0.011 0.002 0.00064 2.4e-05 -2e-05 -4.2e-06 2.2e-07 2.3e-07 -2.3e-08 alpha_1e-08 0.95 1.3 -1.5 1.7 -0.68 0.039 0.016 0.00016 -0.00036 -5.4e-05 -2.9e-07 1.1e-06 1.9e-07 2e-08 3.9e-09 8.2e-10 -4.6e-10 alpha_0.0001 0.96 0.56 0.55 -0.13 -0.026 -0.0028 -0.00011 4.1e-05 1.5e-05 3.7e-06 7.4e-07 1.3e-07 1.9e-08 1.9e-09 -1.3e-10 -1.5e-10 -6.2e-11 alpha_0.001 1 0.82 0.31 -0.087 -0.02 -0.0028 -0.00022 1.8e-05 1.2e-05 3.4e-06 7.3e-07 1.3e-07 1.9e-08 1.7e-09 -1.5e-10 -1.4e-10 -5.2e-11 alpha_0.01 1.4 1.3 -0.088 -0.052 -0.01 -0.0014 -0.00013 7.2e-07 4.1e-06 1.3e-06 3e-07 5.6e-08 9e-09 1.1e-09 4.3e-11 -3.1e-11 -1.5e-11 alpha_1 5.6 0.97 -0.14 -0.019 -0.003 -0.00047 -7e-05 -9.9e-06 -1.3e-06 -1.4e-07 -9.3e-09 1.3e-09 7.8e-10 2.4e-10 6.2e-11 1.4e-11 3.2e-12 alpha_5 14 0.55 -0.059 -0.0085 -0.0014 -0.00024 -4.1e-05 -6.9e-06 -1.1e-06 -1.9e-07 -3.1e-08 -5.1e-09 -8.2e-10 -1.3e-10 -2e-11 -3e-12 -4.2e-13 alpha_10 18 0.4 -0.037 -0.0055 -0.00095 -0.00017 -3e-05 -5.2e-06 -9.2e-07 -1.6e-07 -2.9e-08 -5.1e-09 -9.1e-10 -1.6e-10 -2.9e-11 -5.1e-12 -9.1e-13 alpha_20 23 0.28 -0.022 -0.0034 -0.0006 -0.00011 -2e-05 -3.6e-06 -6.6e-07 -1.2e-07 -2.2e-08 -4e-09 -7.5e-10 -1.4e-10 -2.5e-11 -4.7e-12 -8.7e-13 The RSS increases with increases in alpha, this model complexity reduces. An alpha as small as 1e-15 gives us significant reduction in magnitude of coefficients. High alpha values can lead to significant underfitting. Note the rapid increase in RSS for values of alpha greater than 1. Though the coefficients are very very small, they are NOT zero. Let\u2019s reconfirm the same by determining the number of zeros in each row of the coefficients dataset. 1 coef_matrix_ridge . apply ( lambda x : sum ( x . values == 0 ), axis = 1 ) 1 2 3 4 5 6 7 8 9 10 11 alpha_1e-15 0 alpha_1e-10 0 alpha_1e-08 0 alpha_0.0001 0 alpha_0.001 0 alpha_0.01 0 alpha_1 0 alpha_5 0 alpha_10 0 alpha_20 0 dtype: int64 Lasso regression \u00b6 LASSO stands for Least Absolute Shrinkage and Selection Operator . Lasso regression performs L1 regularization, i.e. it adds a factor of sum of absolute value of coefficients in the optimization objective. Objective = RSS + alpha * (sum of absolute value of coefficients) The alpha works similar to that of ridge and provides a trade-off between balancing RSS and magnitude of coefficients. alpha = 0, a simple linear regression; alpha = infinite, infinite weight on square of coefficients, anything less than zero will make the objective infinite; all coefficients zero. 0 < alpha < infinite, somewhere between 0 and 1 for simple linear regression. It appears to be very similar to the Ridge regression. 1 2 # Importing the Ridge Regression model from scikit-learn from sklearn.linear_model import Lasso 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def lasso_regression ( data , predictors , alpha , models_to_plot = {}): #Fit the model lassoreg = Lasso ( alpha = alpha , normalize = True , max_iter = 1e5 ) lassoreg . fit ( data [ predictors ], data [ 'y' ]) y_pred = lassoreg . predict ( data [ predictors ]) #Check if a plot is to be made for the entered alpha if alpha in models_to_plot : plt . subplot ( models_to_plot [ alpha ]) plt . tight_layout () plt . plot ( data [ 'x' ], y_pred ) plt . plot ( data [ 'x' ], data [ 'y' ], '.' ) plt . title ( 'Plot for alpha: %.3g ' % alpha ) #Return the result in pre-defined format rss = sum (( y_pred - data [ 'y' ]) ** 2 ) ret = [ rss ] ret . extend ([ lassoreg . intercept_ ]) ret . extend ( lassoreg . coef_ ) return ret The additional parameters defined in Lasso function max_iter is the maximum number of iterations for which we want the model to run if it doesn\u2019t converge before. This exists for Ridge regression as well but setting this to a higher than default value was required in this case. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Initializing predictors to all 15 powers of x predictors = [ 'x' ] predictors . extend ([ 'x_ %d ' % i for i in range ( 2 , 16 )]) # Defining the alpha values to test alpha_lasso = [ 1e-15 , 1e-10 , 1e-8 , 1e-5 , 1e-4 , 1e-3 , 1e-2 , 1 , 5 , 10 ] # Initializing the dataframe to store coefficients col = [ 'rss' , 'intercept' ] + [ 'coef_x_ %d ' % i for i in range ( 1 , 16 )] ind = [ 'alpha_ %.2g ' % alpha_lasso [ i ] for i in range ( 0 , 10 )] coef_matrix_lasso = pd . DataFrame ( index = ind , columns = col ) # Defining the models to plot models_to_plot = { 1e-10 : 231 , 1e-5 : 232 , 1e-4 : 233 , 1e-3 : 234 , 1e-2 : 235 , 1 : 236 } # Iterating over the 10 alpha values: for i in range ( 10 ): coef_matrix_lasso . iloc [ i ,] = lasso_regression ( data , predictors , alpha_lasso [ i ], models_to_plot ); 1 2 3 4 5 6 /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems. ConvergenceWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems. ConvergenceWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems. ConvergenceWarning) This again tells us that the model complexity decreases with increases in the values of alpha. But notice the straight line at alpha=1. 1 2 3 # Displaying the analysis pd . options . display . float_format = '{:,.2g}' . format coef_matrix_lasso .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } rss intercept coef_x_1 coef_x_2 coef_x_3 coef_x_4 coef_x_5 coef_x_6 coef_x_7 coef_x_8 coef_x_9 coef_x_10 coef_x_11 coef_x_12 coef_x_13 coef_x_14 coef_x_15 alpha_1e-15 0.96 0.22 1.1 -0.37 0.00089 0.0016 -0.00012 -6.4e-05 -6.3e-06 1.4e-06 7.8e-07 2.1e-07 4e-08 5.4e-09 1.8e-10 -2e-10 -9.2e-11 alpha_1e-10 0.96 0.22 1.1 -0.37 0.00088 0.0016 -0.00012 -6.4e-05 -6.3e-06 1.4e-06 7.8e-07 2.1e-07 4e-08 5.4e-09 1.8e-10 -2e-10 -9.2e-11 alpha_1e-08 0.96 0.22 1.1 -0.37 0.00077 0.0016 -0.00011 -6.4e-05 -6.3e-06 1.4e-06 7.8e-07 2.1e-07 4e-08 5.3e-09 2e-10 -1.9e-10 -9.3e-11 alpha_1e-05 0.96 0.5 0.6 -0.13 -0.038 -0 0 0 0 7.7e-06 1e-06 7.7e-08 0 0 0 -0 -7e-11 alpha_0.0001 1 0.9 0.17 -0 -0.048 -0 -0 0 0 9.5e-06 5.1e-07 0 0 0 -0 -0 -4.4e-11 alpha_0.001 1.7 1.3 -0 -0.13 -0 -0 -0 0 0 0 0 0 1.5e-08 7.5e-10 0 0 0 alpha_0.01 3.6 1.8 -0.55 -0.00056 -0 -0 -0 -0 -0 -0 -0 0 0 0 0 0 0 alpha_1 37 0.038 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 alpha_5 37 0.038 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 alpha_10 37 0.038 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 Apart from the expected inference of higher RSS for higher alphas, we can see the following: For the same values of alpha, the coefficients of lasso regression are much smaller as compared to that of ridge regression (compare row 1 of the 2 tables); For the same alpha, lasso has higher RSS (poorer fit) as compared to ridge regression; Many of the coefficients are zero even for very small values of alpha. The real difference from ridge is coming out in the last inference. Let\u2019s check the number of coefficients which are zero in each model using the following code. 1 coef_matrix_lasso . apply ( lambda x : sum ( x . values == 0 ), axis = 1 ) 1 2 3 4 5 6 7 8 9 10 11 alpha_1e-15 0 alpha_1e-10 0 alpha_1e-08 0 alpha_1e-05 8 alpha_0.0001 10 alpha_0.001 12 alpha_0.01 13 alpha_1 15 alpha_5 15 alpha_10 15 dtype: int64 For the same values of alpha, the coefficients of lasso regression are much smaller as compared to that of ridge regression (compare row 1 of the 2 tables). For the same alpha, lasso has higher RSS (poorer fit) as compared to ridge regression. Many of the coefficients are zero even for very small values of alpha. The real difference from ridge is coming out in the last inference. We can observe that even for a small value of alpha, a significant number of coefficients are zero. This also explains the horizontal line fit for alpha=1 in the lasso plots, it\u2019s just a baseline model! This phenomenon of most of the coefficients being zero is called \u2018sparsity\u2019. Although lasso performs feature selection, this level of sparsity is achieved in special cases only which we\u2019ll discuss towards the end. Key Difference \u00b6 Ridge: it includes all (or none) of the features in the model. Thus, the major advantage of ridge regression is coefficient shrinkage and reducing model complexity. Lasso: along with shrinking coefficients, lasso performs feature selection as well. (Remember the \u2018selection\u2019 in the lasso full-form?) As we observed earlier, some of the coefficients become exactly zero, which is equivalent to the particular feature being excluded from the model. Traditionally, techniques like stepwise regression were used to perform feature selection and make parsimonious models. But with advancements in Machine Learning, ridge and lasso regression provide very good alternatives as they give much better output, require fewer tuning parameters and can be automated to a large extent. Typical Use Cases \u00b6 Ridge: it is majorly used to prevent overfitting. Since it includes all the features, it is not very useful in case of an exorbitantly high number of features, say in millions, as it will pose computational challenges. Lasso: since it provides sparse solutions, it is generally the model of choice (or some variant of this concept) for modelling cases where the number of features is in millions or more. In such a case, getting a sparse solution is of great computational advantage as the features with zero coefficients can simply be ignored. It\u2019s not hard to see why the stepwise selection techniques become practically very cumbersome to implement in high dimensionality cases. Thus, lasso provides a significant advantage. Presence of Highly Correlated Features \u00b6 Ridge: it generally works well even in presence of highly correlated features as it will include all of them in the model but the coefficients will be distributed among them depending on the correlation. Lasso: it arbitrarily selects any one feature among the highly correlated ones and reduced the coefficients of the rest to zero. Also, the chosen variable changes randomly with changes in model parameters. This generally doesn\u2019t work that well as compared to ridge regression. This disadvantage of lasso can be observed in the example we discussed above. Since we used a polynomial regression, the variables were highly correlated. (Not sure why? Check the output of data.corr() ). Thus, we saw that even small values of alpha were giving significant sparsity (i.e. high numbers of coefficients as zero). Along with Ridge and Lasso, Elastic Net is another useful technique which combines both L1 and L2 regularization. It can be used to balance out the pros and cons of ridge and lasso regression. I encourage you to explore it further. ElasticNet Regression \u00b6 ElasticNet is hybrid of Lasso and Ridge Regression techniques. It is trained with L1 and L2 prior as regularizers. Elastic-net is useful when there are multiple features which are correlated. Lasso is likely to pick one of these at random, while elastic-net is likely to pick both. Objective = RSS + alpha1 * (sum of square of coefficients) + alpha2 * (sum of absolute value of coefficients) Elastic-Net to inherit some of Ridge\u2019s stability under rotation. It encourages group effect in case of highly correlated variables. There are no limitations on the number of selected variables. It can suffer from double shrinkage. Data reduction techniques \u00b6 Principal Component Analysis (or PCA) uses linear algebra to transform the dataset into a compressed form. Generally, this is called a data reduction technique. A property of PCA is that you can choose the number of dimensions or principal component in the transformed result. 1 2 # Importing your necessary module from sklearn.decomposition import PCA 1 2 3 # Feature extraction pca = PCA ( n_components = 3 ) fit = pca . fit ( X ) 1 2 # Summarizing components print ( \"Explained Variance: %s \" % ( fit . explained_variance_ratio_ )) 1 Explained Variance: [0.88854663 0.06159078 0.02579012] 1 print ( fit . components_ ) 1 2 3 4 5 6 [[-2.02176587e-03 9.78115765e-02 1.60930503e-02 6.07566861e-02 9.93110844e-01 1.40108085e-02 5.37167919e-04 -3.56474430e-03] [-2.26488861e-02 -9.72210040e-01 -1.41909330e-01 5.78614699e-02 9.46266913e-02 -4.69729766e-02 -8.16804621e-04 -1.40168181e-01] [-2.24649003e-02 1.43428710e-01 -9.22467192e-01 -3.07013055e-01 2.09773019e-02 -1.32444542e-01 -6.39983017e-04 -1.25454310e-01]] The transformed dataset (3 principal components) bare little resemblance to the source data.","title":"Feature Selection"},{"location":"Feature_Selection_in_Python/#filter-feature-selection-techniques","text":"Let\u2019s implement a chi-squared statistical test for non-negative features to select 4 of the best features from the dataset; from the scikit-learn module. Other \u201cCorrelation\u201d techniques: Pearsons\u2019 correlation, LDA, and ANOVA. A word on the chi-squared test The chi-squared test is used to determine whether there is a significant difference between the expected frequencies or proportions or distribution and the observed frequencies or proportions or distribution in one or more categories. It is used to compared the variance of categories or samples vs. population. It test if each category is mutually exclusive or statistically independent from the other categories. If the categories are independent, there are not \u201ccorrelated\u201d. The null hypothesis: mutually exclusive or statistically independent. When we reject the null hypothesis, we conclude to statistical dependence or homogeneity. 1 2 3 4 5 # Importing the necessary modules # SelectKBest class can be used with a suite of different statistical tests # to select a specific number of features from sklearn.feature_selection import SelectKBest from sklearn.feature_selection import chi2 1 2 3 # Feature extraction test = SelectKBest ( score_func = chi2 , k = 4 ) fit = test . fit ( X , Y ) 1 2 3 4 # Summarizing scores np . set_printoptions ( precision = 3 ) print ( fit . scores_ ) 1 2 [ 111.52 1411.887 17.605 53.108 2175.565 127.669 5.393 181.304] 1 2 # Alternative view pd . DataFrame ({ 'names' : names [ 0 : 8 ], 'scores' : fit . scores_ }) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } names scores 0 preg 111.519691 1 plas 1411.887041 2 pres 17.605373 3 skin 53.108040 4 test 2175.565273 5 mass 127.669343 6 pedi 5.392682 7 age 181.303689 You can see the scores for each attribute and the 4 attributes chosen (those with the highest scores): plas, test, mass, age . This scores will help you further in determining the best features for training your model. 1 2 3 4 features = fit . transform ( X ) # Summarizing selected features (plas, test, mass, age) features [ 0 : 5 ,:] 1 2 3 4 5 array([[ 148. , 0. , 33.6, 50. ], [ 85. , 0. , 26.6, 31. ], [ 183. , 0. , 23.3, 32. ], [ 89. , 94. , 28.1, 21. ], [ 137. , 168. , 43.1, 33. ]]) 1 2 # Alternative view pd . DataFrame ( features [ 0 : 5 ,:], columns = [ 'plas' , 'test' , 'mass' , 'age' ]) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } plas test mass age 0 148.0 0.0 33.6 50.0 1 85.0 0.0 26.6 31.0 2 183.0 0.0 23.3 32.0 3 89.0 94.0 28.1 21.0 4 137.0 168.0 43.1 33.0 1 2 # Original dataset dataframe . head ( 5 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } preg plas pres skin test mass pedi age class 0 6 148 72 35 0 33.6 0.627 50 1 1 1 85 66 29 0 26.6 0.351 31 0 2 8 183 64 0 0 23.3 0.672 32 1 3 1 89 66 23 94 28.1 0.167 21 0 4 0 137 40 35 168 43.1 2.288 33 1","title":"Filter feature selection techniques"},{"location":"Feature_Selection_in_Python/#in-r","text":"The caret package provides tools to automatically report on the relevance and importance of attributes in your data and even select the most important features. Data can contain attributes that are highly correlated with each other. Many methods perform better if highly correlated attributes are removed. The caret package provides findCorrelation which will analyze a correlation matrix of your data\u2019s attributes report on attributes that can be removed. Using the Pima Indians Diabetes dataset, let\u2019s remove attributes with an absolute correlation of 0.75 or higher. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Ensuring the results are repeatable set.seed ( 7 ) # Loading the packages library ( mlbench ) library ( caret ) # Loading the data data ( PimaIndiansDiabetes ) # Calculating the correlation matrix correlationMatrix <- cor ( PimaIndiansDiabetes [, 1 : 8 ]) # Summarizing the correlation matrix print ( correlationMatrix ) # Finding attributes that are highly corrected (ideally >0.75) highlyCorrelated <- findCorrelation ( correlationMatrix , cutoff = 0.5 ) # Printing the indexes of highly correlated attributes print ( highlyCorrelated ) r The importance of features can be estimated from data by building a model. Some methods like decision trees have a built-in mechanism to report on variable importance. For other algorithms, the importance can be estimated using a ROC curve analysis conducted for each attribute. Let\u2019s constructs a Learning Vector Quantization (LVQ) model. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Ensuring the results are repeatable set.seed ( 7 ) # Loading the packages library ( mlbench ) library ( caret ) # Loading the data data ( PimaIndiansDiabetes ) # Calculating the correlation matrix correlationMatrix <- cor ( PimaIndiansDiabetes [, 1 : 8 ]) # Summarizing the correlation matrix print ( correlationMatrix ) # Finding attributes that are highly corrected (ideally > 0.75) highlyCorrelated <- findCorrelation ( correlationMatrix , cutoff = 0.5 ) # Printing indexes of highly correlated attributes print ( highlyCorrelated )","title":"In R"},{"location":"Feature_Selection_in_Python/#wrapper-feature-selection-techniques","text":"Let\u2019s implement a Recursive Feature Elimination from the scikit-learn module. Other techniques: Forward Selection, Backward Elimination, and Combination of forward selection and backward elimination. The Recursive Feature Elimination (or RFE) works by recursively removing attributes and building a model on those attributes that remain. It uses the model accuracy to identify which attributes (and a combination of attributes) contribute the most to predicting the target attribute. You use RFE with the Logistic Regression classifier to select the top 3 features. The choice of algorithms does not matter too much as long as it is consistent. 1 2 3 # Importing your necessary modules from sklearn.feature_selection import RFE from sklearn.linear_model import LogisticRegression 1 2 3 4 5 6 7 8 9 # Feature extraction model = LogisticRegression () rfe = RFE ( model , 3 ) fit = rfe . fit ( X , Y ) # Summarizing the selection of the attributes print ( \"Num Features: %s \" % ( fit . n_features_ )) print ( \"Selected Features: %s \" % ( fit . support_ )) print ( \"Feature Ranking: %s \" % ( fit . ranking_ )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Num Features: 3 Selected Features: [ True False False False False True True False] Feature Ranking: [1 2 3 5 6 1 1 4] /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) 1 2 # Alternative view pd . DataFrame ({ 'names' : names [ 0 : 8 ], 'selected' : fit . support_ , 'ranking' : fit . ranking_ }) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } names ranking selected 0 preg 1 True 1 plas 2 False 2 pres 3 False 3 skin 5 False 4 test 6 False 5 mass 1 True 6 pedi 1 True 7 age 4 False You can see that RFE chose the top 3 features as preg, mass, pedi . These are marked True in the support array and marked with a choice \u201c1\u201d in the ranking array. You can also use RFE with the Bagged decision trees like Random Forest and Extra Trees to estimate the importance of features. 1 2 3 4 5 6 # Feature extraction model = ExtraTreesClassifier () fit = model . fit ( X , Y ) # Summarizing the selection of the attributes print ( fit . feature_importances_ ) 1 2 3 4 5 6 [0.10490793 0.20041541 0.0958495 0.08070628 0.0849718 0.15844774 0.12226854 0.15243279] /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/ensemble/forest.py:248: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22. \"10 in version 0.20 to 100 in 0.22.\", FutureWarning) 1 2 print ( \"Num Features: %s \" % ( fit . n_features_ )) print ( \"Features Importance: %s \" % fit . feature_importances_ ) 1 2 3 Num Features: 8 Features Importance: [0.10490793 0.20041541 0.0958495 0.08070628 0.0849718 0.15844774 0.12226854 0.15243279] 1 2 3 # Alternative view pd . DataFrame ({ 'names' : names [ 0 : 8 ], 'importance' : fit . feature_importances_ }) . \\ sort_values ( by = 'importance' , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } importance names 1 0.200415 plas 5 0.158448 mass 7 0.152433 age 6 0.122269 pedi 0 0.104908 preg 2 0.095849 pres 4 0.084972 test 3 0.080706 skin","title":"Wrapper feature selection techniques"},{"location":"Feature_Selection_in_Python/#another-dataset-another-example","text":"Let\u2019s tackle another example using the built-in iris dataset, reusing the Logistic Regression and the Extra Tree Ensemble. 1 2 3 # Importing your necessary modules from sklearn.feature_selection import RFE from sklearn.linear_model import LogisticRegression 1 2 3 4 5 6 # Loading the iris datasets from sklearn import datasets dataset = datasets . load_iris () names = [ 'sepal length' , 'sepal width' , 'petal length' , 'petal width' ] dataset_df = pd . DataFrame ( dataset . data , columns = names ) dataset_df . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sepal length sepal width petal length petal width 0 5.1 3.5 1.4 0.2 1 4.9 3.0 1.4 0.2 2 4.7 3.2 1.3 0.2 1 2 3 4 5 6 # Creating a base classifier used to evaluate a subset of attributes model = LogisticRegression () # Creating the RFE model and select 3 attributes rfe = RFE ( model , 3 ) fit = rfe . fit ( dataset . data , dataset . target ) 1 2 3 4 5 6 7 8 /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:459: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning. \"this warning.\", FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning. FutureWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:459: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning. \"this warning.\", FutureWarning) 1 2 3 print ( \"Num Features: %s \" % ( fit . n_features_ )) print ( \"Selected Features: %s \" % ( fit . support_ )) print ( \"Feature Ranking: %s \" % ( fit . ranking_ )) 1 2 3 Num Features: 3 Selected Features: [False True True True] Feature Ranking: [2 1 1 1] 1 2 # Alternative view pd . DataFrame ({ 'names' : names , 'selected' : fit . support_ , 'ranking' : fit . ranking_ }) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } names ranking selected 0 sepal length 2 False 1 sepal width 1 True 2 petal length 1 True 3 petal width 1 True Keep top-ranking features (rank 1) and leave out the other features (rank 2). 1 2 3 # Importing your necessary modules from sklearn import metrics from sklearn.ensemble import ExtraTreesClassifier 1 2 3 4 5 6 # Creating a base classifier rfe = ExtraTreesClassifier () # Creating the RFE model and select 3 attributes rfe . fit ( dataset . data , dataset . target ) fit = rfe . fit ( dataset . data , dataset . target ) 1 2 3 4 5 [0.08470961 0.02095061 0.37336503 0.52097475] /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/ensemble/forest.py:248: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22. \"10 in version 0.20 to 100 in 0.22.\", FutureWarning) 1 2 print ( \"Num Features: %s \" % ( fit . n_features_ )) print ( \"Features Importance: %s \" % rfe . feature_importances_ ) 1 2 Num Features: 4 Features Importance: [0.08470961 0.02095061 0.37336503 0.52097475] 1 2 3 # Alternative view pd . DataFrame ({ 'names' : names , 'importance' : rfe . feature_importances_ }) . \\ sort_values ( by = 'importance' , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } importance names 3 0.520975 petal width 2 0.373365 petal length 0 0.084710 sepal length 1 0.020951 sepal width The last results confirm the previous results.","title":"Another dataset, another example"},{"location":"Feature_Selection_in_Python/#in-r_1","text":"Recursive Feature Elimination or RFE. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # Ensuring the results are repeatable set.seed ( 7 ) # Loading the packages library ( mlbench ) library ( caret ) # Loading the data data ( PimaIndiansDiabetes ) # Defining the control using a random forest selection function control <- rfeControl ( functions = rfFuncs , method = \"cv\" , number = 10 ) # Running the RFE algorithm results <- rfe ( PimaIndiansDiabetes [, 1 : 8 ], PimaIndiansDiabetes [, 9 ], sizes = c ( 1 : 8 ), rfeControl = control ) # Summarize the results print ( results ) # Listing the chosen features predictors ( results ) # Plotting the results plot ( results , type = c ( \"g\" , \"o\" ))","title":"In R"},{"location":"Feature_Selection_in_Python/#embedded-feature-selection-techniques","text":"Let\u2019s use the Ridge regression from the scikit-learn module; a regularization technique as well. Other techniques: LASSO and Elastic Net. Find out more about regularization techniques . 1 2 # Importing your necessary module from sklearn.linear_model import Ridge 1 2 3 # Using Ridge regression to determine the R-squared ridge = Ridge ( alpha = 1.0 ) ridge . fit ( X , Y ) 1 2 Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None, normalize=False, random_state=None, solver='auto', tol=0.001) In order to better understand the results of Ridge regression, you will implement a little helper function that will help you to print the results in a better so that you can interpret them easily. 1 2 3 4 5 6 7 8 9 # Implementing a function for pretty-printing the coefficients def pretty_print_coefs ( coefs , names = None , sort = False ): if names == None : names = [ \"X %s \" % x for x in range ( len ( coefs ))] lst = zip ( coefs , names ) if sort : lst = sorted ( lst , key = lambda x : - np . abs ( x [ 0 ])) return \" + \" . join ( \" %s * %s \" % ( round ( coef , 3 ), name ) for coef , name in lst ) 1 2 3 4 5 # Applying the function print ( \"Ridge model:\" , pretty_print_coefs ( ridge . coef_ )) print ( '' ) # Applying the function with the names print ( \"Ridge model:\" , pretty_print_coefs ( ridge . coef_ , names )) 1 2 3 Ridge model: 0.021 * X0 + 0.006 * X1 + -0.002 * X2 + 0.0 * X3 + -0.0 * X4 + 0.013 * X5 + 0.145 * X6 + 0.003 * X7 Ridge model: 0.021 * preg + 0.006 * plas + -0.002 * pres + 0.0 * skin + -0.0 * test + 0.013 * mass + 0.145 * pedi + 0.003 * age 1 2 # Applying the function with the names and sorting the results print ( \"Ridge model:\" , pretty_print_coefs ( ridge . coef_ , names , True )) 1 Ridge model: 0.145 * pedi + 0.021 * preg + 0.013 * mass + 0.006 * plas + 0.003 * age + -0.002 * pres + -0.0 * test + 0.0 * skin You can spot all the coefficient terms appended with the feature variables. You can pick the most essential features. The sorted top 3 features are pedi, preg, mass . A word on the Ridge regression It is also known as L2-Regularization. For correlated features, it means that they tend to get similar coefficients. Feature having negative coefficients don\u2019t contribute that much. But in a more complex scenario where you are dealing with lots of features, then this score will definitely help you in the ultimate feature selection decision-making process.","title":"Embedded feature selection techniques"},{"location":"Feature_Selection_in_Python/#takeway","text":"The three techniques help to understand the features of a particular dataset in a comprehensive manner. Feature selection is essentially a part of data preprocessing which is considered to be the most time-consuming part of any machine learning pipeline. These techniques will help you to approach it in a more systematic way and machine learning friendly way. You will be able to interpret the features more accurately.","title":"Takeway"},{"location":"Feature_Selection_in_Python/#why-penalize-the-magnitude-of-coefficients","text":"Given a sine curve (between 60\u00b0 and 300\u00b0) and some random noise using the following code: 1 2 3 4 5 6 7 8 # Importing modules import numpy as np import pandas as pd import random import matplotlib.pyplot as plt % matplotlib inline from matplotlib.pylab import rcParams rcParams [ 'figure.figsize' ] = 12 , 10 1 2 3 4 5 6 7 8 9 10 11 # Defining input array with angles # from 60deg to 300deg converted to radians x = np . array ([ i * np . pi / 180 for i in range ( 60 , 300 , 4 )]) # Setting seed for reproducability np . random . seed ( 10 ) y = np . sin ( x ) + np . random . normal ( 0 , 0.15 , len ( x )) data = pd . DataFrame ( np . column_stack ([ x , y ]), columns = [ 'x' , 'y' ]) plt . plot ( data [ 'x' ], data [ 'y' ], '.' ); Let\u2019s try to estimate the sine function using polynomial regression with powers of x form 1 to 15. Let\u2019s add a column for each power up to 15. 1 2 3 4 5 # Power of 1 is already there for i in range ( 2 , 16 ): colname = 'x_ %d ' % i # new var will be x_power data [ colname ] = data [ 'x' ] ** i data . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x y x_2 x_3 x_4 x_5 x_6 x_7 x_8 x_9 x_10 x_11 x_12 x_13 x_14 x_15 0 1.047198 1.065763 1.096623 1.148381 1.202581 1.259340 1.318778 1.381021 1.446202 1.514459 1.585938 1.660790 1.739176 1.821260 1.907219 1.997235 1 1.117011 1.006086 1.247713 1.393709 1.556788 1.738948 1.942424 2.169709 2.423588 2.707173 3.023942 3.377775 3.773011 4.214494 4.707635 5.258479 2 1.186824 0.695374 1.408551 1.671702 1.984016 2.354677 2.794587 3.316683 3.936319 4.671717 5.544505 6.580351 7.809718 9.268760 11.000386 13.055521 3 1.256637 0.949799 1.579137 1.984402 2.493673 3.133642 3.937850 4.948448 6.218404 7.814277 9.819710 12.339811 15.506664 19.486248 24.487142 30.771450 4 1.326450 1.063496 1.759470 2.333850 3.095735 4.106339 5.446854 7.224981 9.583578 12.712139 16.862020 22.366630 29.668222 39.353420 52.200353 69.241170 Now that we have all the 15 powers, let\u2019s make 15 different linear regression models with each model containing variables with powers of x from 1 to the particular model number. For example, the feature set of model 8 will be {x, x_2, x_3, \u2026 , x_8}. 1 2 # Importing the Linear Regression model from scikit-learn from sklearn.linear_model import LinearRegression 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def linear_regression ( data , power , models_to_plot ): #initialize predictors: predictors = [ 'x' ] if power >= 2 : predictors . extend ([ 'x_ %d ' % i for i in range ( 2 , power + 1 )]) # Fitting the model linreg = LinearRegression ( normalize = True ) linreg . fit ( data [ predictors ], data [ 'y' ]) y_pred = linreg . predict ( data [ predictors ]) # Checking if a plot is to be made for the entered power if power in models_to_plot : plt . subplot ( models_to_plot [ power ]) plt . tight_layout () plt . plot ( data [ 'x' ], y_pred ) plt . plot ( data [ 'x' ], data [ 'y' ], '.' ) plt . title ( 'Plot for power: %d ' % power ) # Returning the result in pre-defined format rss = sum (( y_pred - data [ 'y' ]) ** 2 ) ret = [ rss ] ret . extend ([ linreg . intercept_ ]) ret . extend ( linreg . coef_ ) return ret Now, we can make all 15 models and compare the results. 1 2 3 4 # Initializing a DataFrame to store the results col = [ 'rss' , 'intercept' ] + [ 'coef_x_ %d ' % i for i in range ( 1 , 16 )] ind = [ 'model_pow_ %d ' % i for i in range ( 1 , 16 )] coef_matrix_simple = pd . DataFrame ( index = ind , columns = col ) 1 2 # Defining the powers for which a plot is required models_to_plot = { 1 : 231 , 3 : 232 , 6 : 233 , 9 : 234 , 12 : 235 , 15 : 236 } 1 2 3 # Iterating through all powers and assimilate results for i in range ( 1 , 16 ): coef_matrix_simple . iloc [ i - 1 , 0 : i + 2 ] = linear_regression ( data , power = i , models_to_plot = models_to_plot ) As the model complexity increases, the models tend to fit even smaller deviations in the training data set. This leads to overfitting. 1 2 3 # Displaying the analysis pd . options . display . float_format = '{:,.2g}' . format coef_matrix_simple .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } rss intercept coef_x_1 coef_x_2 coef_x_3 coef_x_4 coef_x_5 coef_x_6 coef_x_7 coef_x_8 coef_x_9 coef_x_10 coef_x_11 coef_x_12 coef_x_13 coef_x_14 coef_x_15 model_pow_1 3.3 2 -0.62 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_2 3.3 1.9 -0.58 -0.006 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_3 1.1 -1.1 3 -1.3 0.14 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_4 1.1 -0.27 1.7 -0.53 -0.036 0.014 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_5 1 3 -5.1 4.7 -1.9 0.33 -0.021 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_6 0.99 -2.8 9.5 -9.7 5.2 -1.6 0.23 -0.014 NaN NaN NaN NaN NaN NaN NaN NaN NaN model_pow_7 0.93 19 -56 69 -45 17 -3.5 0.4 -0.019 NaN NaN NaN NaN NaN NaN NaN NaN model_pow_8 0.92 43 -1.4e+02 1.8e+02 -1.3e+02 58 -15 2.4 -0.21 0.0077 NaN NaN NaN NaN NaN NaN NaN model_pow_9 0.87 1.7e+02 -6.1e+02 9.6e+02 -8.5e+02 4.6e+02 -1.6e+02 37 -5.2 0.42 -0.015 NaN NaN NaN NaN NaN NaN model_pow_10 0.87 1.4e+02 -4.9e+02 7.3e+02 -6e+02 2.9e+02 -87 15 -0.81 -0.14 0.026 -0.0013 NaN NaN NaN NaN NaN model_pow_11 0.87 -75 5.1e+02 -1.3e+03 1.9e+03 -1.6e+03 9.1e+02 -3.5e+02 91 -16 1.8 -0.12 0.0034 NaN NaN NaN NaN model_pow_12 0.87 -3.4e+02 1.9e+03 -4.4e+03 6e+03 -5.2e+03 3.1e+03 -1.3e+03 3.8e+02 -80 12 -1.1 0.062 -0.0016 NaN NaN NaN model_pow_13 0.86 3.2e+03 -1.8e+04 4.5e+04 -6.7e+04 6.6e+04 -4.6e+04 2.3e+04 -8.5e+03 2.3e+03 -4.5e+02 62 -5.7 0.31 -0.0078 NaN NaN model_pow_14 0.79 2.4e+04 -1.4e+05 3.8e+05 -6.1e+05 6.6e+05 -5e+05 2.8e+05 -1.2e+05 3.7e+04 -8.5e+03 1.5e+03 -1.8e+02 15 -0.73 0.017 NaN model_pow_15 0.7 -3.6e+04 2.4e+05 -7.5e+05 1.4e+06 -1.7e+06 1.5e+06 -1e+06 5e+05 -1.9e+05 5.4e+04 -1.2e+04 1.9e+03 -2.2e+02 17 -0.81 0.018 It is clearly evident that the size of coefficients increase exponentially with increase in model complexity. It means that we\u2019re putting a lot of emphasis on that feature, i.e. the particular feature is a good predictor for the outcome. When it becomes too large, the algorithm starts modelling intricate relations to estimate the output and ends up overfitting to the particular training data.","title":"Why Penalize the Magnitude of Coefficients?"},{"location":"Feature_Selection_in_Python/#ridge-regression","text":"A ridge regression performs L2 regularization\u2019, i.e. it adds a factor of sum of squares of coefficients in the optimization objective. Objective = RSS + alpha * (sum of square of coefficients) The alpha parameter balances the amount of emphasis given to minimizing RSS vs minimizing sum of square of coefficients. alpha = 0, a simple linear regression; alpha = infinite, infinite weight on square of coefficients, anything less than zero will make the objective infinite; all coefficients zero; 0 < alpha < infinite, somewhere between 0 and 1 for simple linear regression. One thing is for sure that any non-zero value would give values less than that of simple linear regression. 1 2 # Importing the Ridge Regression model from scikit-learn from sklearn.linear_model import Ridge 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def ridge_regression ( data , predictors , alpha , models_to_plot = {}): # Fitting the model ridgereg = Ridge ( alpha = alpha , normalize = True ) ridgereg . fit ( data [ predictors ], data [ 'y' ]) y_pred = ridgereg . predict ( data [ predictors ]) # Checking if a plot is to be made for the entered alpha if alpha in models_to_plot : plt . subplot ( models_to_plot [ alpha ]) plt . tight_layout () plt . plot ( data [ 'x' ], y_pred ) plt . plot ( data [ 'x' ], data [ 'y' ], '.' ) plt . title ( 'Plot for alpha: %.3g ' % alpha ) # Returning the result in pre-defined format rss = sum (( y_pred - data [ 'y' ]) ** 2 ) ret = [ rss ] ret . extend ([ ridgereg . intercept_ ]) ret . extend ( ridgereg . coef_ ) return ret Let\u2019s analyze the result of Ridge regression for 10 different values of alpha ranging from 1e-15 to 20. Each of these 10 models will contain all the 15 variables and only the value of alpha would differ. This is different from the simple linear regression case where each model had a subset of features. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Initializing predictors to be set of 15 powers of x predictors = [ 'x' ] predictors . extend ([ 'x_ %d ' % i for i in range ( 2 , 16 )]) # Setting the different values of alpha to be tested alpha_ridge = [ 1e-15 , 1e-10 , 1e-8 , 1e-4 , 1e-3 , 1e-2 , 1 , 5 , 10 , 20 ] # Initializing the dataframe for storing coefficients. col = [ 'rss' , 'intercept' ] + [ 'coef_x_ %d ' % i for i in range ( 1 , 16 )] ind = [ 'alpha_ %.2g ' % alpha_ridge [ i ] for i in range ( 0 , 10 )] coef_matrix_ridge = pd . DataFrame ( index = ind , columns = col ) models_to_plot = { 1e-15 : 231 , 1e-10 : 232 , 1e-4 : 233 , 1e-3 : 234 , 1e-2 : 235 , 5 : 236 } for i in range ( 10 ): coef_matrix_ridge . iloc [ i ,] = ridge_regression ( data , predictors , alpha_ridge [ i ], models_to_plot ) 1 2 3 4 /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/ridge.py:125: LinAlgWarning: scipy.linalg.solve Ill-conditioned matrix detected. Result is not guaranteed to be accurate. Reciprocal condition number4.572933e-17 overwrite_a=True).T As the value of alpha increases, the model complexity reduces. Though higher values of alpha reduce overfitting, significantly high values can cause underfitting as well (alpha = 5, for example). Thus alpha should be chosen wisely. A widely accept technique is cross-validation, i.e. the value of alpha is iterated over a range of values and the one giving higher cross-validation score is chosen. 1 2 3 # Displaying the analysis pd . options . display . float_format = '{:,.2g}' . format coef_matrix_ridge .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } rss intercept coef_x_1 coef_x_2 coef_x_3 coef_x_4 coef_x_5 coef_x_6 coef_x_7 coef_x_8 coef_x_9 coef_x_10 coef_x_11 coef_x_12 coef_x_13 coef_x_14 coef_x_15 alpha_1e-15 0.87 94 -3e+02 3.7e+02 -2.3e+02 61 2.6 -5.1 0.62 0.17 -0.03 -0.0052 0.001 0.00017 -4.6e-05 3.1e-06 -3.8e-08 alpha_1e-10 0.92 11 -29 31 -15 2.9 0.17 -0.091 -0.011 0.002 0.00064 2.4e-05 -2e-05 -4.2e-06 2.2e-07 2.3e-07 -2.3e-08 alpha_1e-08 0.95 1.3 -1.5 1.7 -0.68 0.039 0.016 0.00016 -0.00036 -5.4e-05 -2.9e-07 1.1e-06 1.9e-07 2e-08 3.9e-09 8.2e-10 -4.6e-10 alpha_0.0001 0.96 0.56 0.55 -0.13 -0.026 -0.0028 -0.00011 4.1e-05 1.5e-05 3.7e-06 7.4e-07 1.3e-07 1.9e-08 1.9e-09 -1.3e-10 -1.5e-10 -6.2e-11 alpha_0.001 1 0.82 0.31 -0.087 -0.02 -0.0028 -0.00022 1.8e-05 1.2e-05 3.4e-06 7.3e-07 1.3e-07 1.9e-08 1.7e-09 -1.5e-10 -1.4e-10 -5.2e-11 alpha_0.01 1.4 1.3 -0.088 -0.052 -0.01 -0.0014 -0.00013 7.2e-07 4.1e-06 1.3e-06 3e-07 5.6e-08 9e-09 1.1e-09 4.3e-11 -3.1e-11 -1.5e-11 alpha_1 5.6 0.97 -0.14 -0.019 -0.003 -0.00047 -7e-05 -9.9e-06 -1.3e-06 -1.4e-07 -9.3e-09 1.3e-09 7.8e-10 2.4e-10 6.2e-11 1.4e-11 3.2e-12 alpha_5 14 0.55 -0.059 -0.0085 -0.0014 -0.00024 -4.1e-05 -6.9e-06 -1.1e-06 -1.9e-07 -3.1e-08 -5.1e-09 -8.2e-10 -1.3e-10 -2e-11 -3e-12 -4.2e-13 alpha_10 18 0.4 -0.037 -0.0055 -0.00095 -0.00017 -3e-05 -5.2e-06 -9.2e-07 -1.6e-07 -2.9e-08 -5.1e-09 -9.1e-10 -1.6e-10 -2.9e-11 -5.1e-12 -9.1e-13 alpha_20 23 0.28 -0.022 -0.0034 -0.0006 -0.00011 -2e-05 -3.6e-06 -6.6e-07 -1.2e-07 -2.2e-08 -4e-09 -7.5e-10 -1.4e-10 -2.5e-11 -4.7e-12 -8.7e-13 The RSS increases with increases in alpha, this model complexity reduces. An alpha as small as 1e-15 gives us significant reduction in magnitude of coefficients. High alpha values can lead to significant underfitting. Note the rapid increase in RSS for values of alpha greater than 1. Though the coefficients are very very small, they are NOT zero. Let\u2019s reconfirm the same by determining the number of zeros in each row of the coefficients dataset. 1 coef_matrix_ridge . apply ( lambda x : sum ( x . values == 0 ), axis = 1 ) 1 2 3 4 5 6 7 8 9 10 11 alpha_1e-15 0 alpha_1e-10 0 alpha_1e-08 0 alpha_0.0001 0 alpha_0.001 0 alpha_0.01 0 alpha_1 0 alpha_5 0 alpha_10 0 alpha_20 0 dtype: int64","title":"Ridge regression"},{"location":"Feature_Selection_in_Python/#lasso-regression","text":"LASSO stands for Least Absolute Shrinkage and Selection Operator . Lasso regression performs L1 regularization, i.e. it adds a factor of sum of absolute value of coefficients in the optimization objective. Objective = RSS + alpha * (sum of absolute value of coefficients) The alpha works similar to that of ridge and provides a trade-off between balancing RSS and magnitude of coefficients. alpha = 0, a simple linear regression; alpha = infinite, infinite weight on square of coefficients, anything less than zero will make the objective infinite; all coefficients zero. 0 < alpha < infinite, somewhere between 0 and 1 for simple linear regression. It appears to be very similar to the Ridge regression. 1 2 # Importing the Ridge Regression model from scikit-learn from sklearn.linear_model import Lasso 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def lasso_regression ( data , predictors , alpha , models_to_plot = {}): #Fit the model lassoreg = Lasso ( alpha = alpha , normalize = True , max_iter = 1e5 ) lassoreg . fit ( data [ predictors ], data [ 'y' ]) y_pred = lassoreg . predict ( data [ predictors ]) #Check if a plot is to be made for the entered alpha if alpha in models_to_plot : plt . subplot ( models_to_plot [ alpha ]) plt . tight_layout () plt . plot ( data [ 'x' ], y_pred ) plt . plot ( data [ 'x' ], data [ 'y' ], '.' ) plt . title ( 'Plot for alpha: %.3g ' % alpha ) #Return the result in pre-defined format rss = sum (( y_pred - data [ 'y' ]) ** 2 ) ret = [ rss ] ret . extend ([ lassoreg . intercept_ ]) ret . extend ( lassoreg . coef_ ) return ret The additional parameters defined in Lasso function max_iter is the maximum number of iterations for which we want the model to run if it doesn\u2019t converge before. This exists for Ridge regression as well but setting this to a higher than default value was required in this case. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Initializing predictors to all 15 powers of x predictors = [ 'x' ] predictors . extend ([ 'x_ %d ' % i for i in range ( 2 , 16 )]) # Defining the alpha values to test alpha_lasso = [ 1e-15 , 1e-10 , 1e-8 , 1e-5 , 1e-4 , 1e-3 , 1e-2 , 1 , 5 , 10 ] # Initializing the dataframe to store coefficients col = [ 'rss' , 'intercept' ] + [ 'coef_x_ %d ' % i for i in range ( 1 , 16 )] ind = [ 'alpha_ %.2g ' % alpha_lasso [ i ] for i in range ( 0 , 10 )] coef_matrix_lasso = pd . DataFrame ( index = ind , columns = col ) # Defining the models to plot models_to_plot = { 1e-10 : 231 , 1e-5 : 232 , 1e-4 : 233 , 1e-3 : 234 , 1e-2 : 235 , 1 : 236 } # Iterating over the 10 alpha values: for i in range ( 10 ): coef_matrix_lasso . iloc [ i ,] = lasso_regression ( data , predictors , alpha_lasso [ i ], models_to_plot ); 1 2 3 4 5 6 /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems. ConvergenceWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems. ConvergenceWarning) /home/ugo/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py:491: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems. ConvergenceWarning) This again tells us that the model complexity decreases with increases in the values of alpha. But notice the straight line at alpha=1. 1 2 3 # Displaying the analysis pd . options . display . float_format = '{:,.2g}' . format coef_matrix_lasso .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } rss intercept coef_x_1 coef_x_2 coef_x_3 coef_x_4 coef_x_5 coef_x_6 coef_x_7 coef_x_8 coef_x_9 coef_x_10 coef_x_11 coef_x_12 coef_x_13 coef_x_14 coef_x_15 alpha_1e-15 0.96 0.22 1.1 -0.37 0.00089 0.0016 -0.00012 -6.4e-05 -6.3e-06 1.4e-06 7.8e-07 2.1e-07 4e-08 5.4e-09 1.8e-10 -2e-10 -9.2e-11 alpha_1e-10 0.96 0.22 1.1 -0.37 0.00088 0.0016 -0.00012 -6.4e-05 -6.3e-06 1.4e-06 7.8e-07 2.1e-07 4e-08 5.4e-09 1.8e-10 -2e-10 -9.2e-11 alpha_1e-08 0.96 0.22 1.1 -0.37 0.00077 0.0016 -0.00011 -6.4e-05 -6.3e-06 1.4e-06 7.8e-07 2.1e-07 4e-08 5.3e-09 2e-10 -1.9e-10 -9.3e-11 alpha_1e-05 0.96 0.5 0.6 -0.13 -0.038 -0 0 0 0 7.7e-06 1e-06 7.7e-08 0 0 0 -0 -7e-11 alpha_0.0001 1 0.9 0.17 -0 -0.048 -0 -0 0 0 9.5e-06 5.1e-07 0 0 0 -0 -0 -4.4e-11 alpha_0.001 1.7 1.3 -0 -0.13 -0 -0 -0 0 0 0 0 0 1.5e-08 7.5e-10 0 0 0 alpha_0.01 3.6 1.8 -0.55 -0.00056 -0 -0 -0 -0 -0 -0 -0 0 0 0 0 0 0 alpha_1 37 0.038 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 alpha_5 37 0.038 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 alpha_10 37 0.038 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 Apart from the expected inference of higher RSS for higher alphas, we can see the following: For the same values of alpha, the coefficients of lasso regression are much smaller as compared to that of ridge regression (compare row 1 of the 2 tables); For the same alpha, lasso has higher RSS (poorer fit) as compared to ridge regression; Many of the coefficients are zero even for very small values of alpha. The real difference from ridge is coming out in the last inference. Let\u2019s check the number of coefficients which are zero in each model using the following code. 1 coef_matrix_lasso . apply ( lambda x : sum ( x . values == 0 ), axis = 1 ) 1 2 3 4 5 6 7 8 9 10 11 alpha_1e-15 0 alpha_1e-10 0 alpha_1e-08 0 alpha_1e-05 8 alpha_0.0001 10 alpha_0.001 12 alpha_0.01 13 alpha_1 15 alpha_5 15 alpha_10 15 dtype: int64 For the same values of alpha, the coefficients of lasso regression are much smaller as compared to that of ridge regression (compare row 1 of the 2 tables). For the same alpha, lasso has higher RSS (poorer fit) as compared to ridge regression. Many of the coefficients are zero even for very small values of alpha. The real difference from ridge is coming out in the last inference. We can observe that even for a small value of alpha, a significant number of coefficients are zero. This also explains the horizontal line fit for alpha=1 in the lasso plots, it\u2019s just a baseline model! This phenomenon of most of the coefficients being zero is called \u2018sparsity\u2019. Although lasso performs feature selection, this level of sparsity is achieved in special cases only which we\u2019ll discuss towards the end.","title":"Lasso regression"},{"location":"Feature_Selection_in_Python/#key-difference","text":"Ridge: it includes all (or none) of the features in the model. Thus, the major advantage of ridge regression is coefficient shrinkage and reducing model complexity. Lasso: along with shrinking coefficients, lasso performs feature selection as well. (Remember the \u2018selection\u2019 in the lasso full-form?) As we observed earlier, some of the coefficients become exactly zero, which is equivalent to the particular feature being excluded from the model. Traditionally, techniques like stepwise regression were used to perform feature selection and make parsimonious models. But with advancements in Machine Learning, ridge and lasso regression provide very good alternatives as they give much better output, require fewer tuning parameters and can be automated to a large extent.","title":"Key Difference"},{"location":"Feature_Selection_in_Python/#typical-use-cases","text":"Ridge: it is majorly used to prevent overfitting. Since it includes all the features, it is not very useful in case of an exorbitantly high number of features, say in millions, as it will pose computational challenges. Lasso: since it provides sparse solutions, it is generally the model of choice (or some variant of this concept) for modelling cases where the number of features is in millions or more. In such a case, getting a sparse solution is of great computational advantage as the features with zero coefficients can simply be ignored. It\u2019s not hard to see why the stepwise selection techniques become practically very cumbersome to implement in high dimensionality cases. Thus, lasso provides a significant advantage.","title":"Typical Use Cases"},{"location":"Feature_Selection_in_Python/#presence-of-highly-correlated-features","text":"Ridge: it generally works well even in presence of highly correlated features as it will include all of them in the model but the coefficients will be distributed among them depending on the correlation. Lasso: it arbitrarily selects any one feature among the highly correlated ones and reduced the coefficients of the rest to zero. Also, the chosen variable changes randomly with changes in model parameters. This generally doesn\u2019t work that well as compared to ridge regression. This disadvantage of lasso can be observed in the example we discussed above. Since we used a polynomial regression, the variables were highly correlated. (Not sure why? Check the output of data.corr() ). Thus, we saw that even small values of alpha were giving significant sparsity (i.e. high numbers of coefficients as zero). Along with Ridge and Lasso, Elastic Net is another useful technique which combines both L1 and L2 regularization. It can be used to balance out the pros and cons of ridge and lasso regression. I encourage you to explore it further.","title":"Presence of Highly Correlated Features"},{"location":"Feature_Selection_in_Python/#elasticnet-regression","text":"ElasticNet is hybrid of Lasso and Ridge Regression techniques. It is trained with L1 and L2 prior as regularizers. Elastic-net is useful when there are multiple features which are correlated. Lasso is likely to pick one of these at random, while elastic-net is likely to pick both. Objective = RSS + alpha1 * (sum of square of coefficients) + alpha2 * (sum of absolute value of coefficients) Elastic-Net to inherit some of Ridge\u2019s stability under rotation. It encourages group effect in case of highly correlated variables. There are no limitations on the number of selected variables. It can suffer from double shrinkage.","title":"ElasticNet Regression"},{"location":"Feature_Selection_in_Python/#data-reduction-techniques","text":"Principal Component Analysis (or PCA) uses linear algebra to transform the dataset into a compressed form. Generally, this is called a data reduction technique. A property of PCA is that you can choose the number of dimensions or principal component in the transformed result. 1 2 # Importing your necessary module from sklearn.decomposition import PCA 1 2 3 # Feature extraction pca = PCA ( n_components = 3 ) fit = pca . fit ( X ) 1 2 # Summarizing components print ( \"Explained Variance: %s \" % ( fit . explained_variance_ratio_ )) 1 Explained Variance: [0.88854663 0.06159078 0.02579012] 1 print ( fit . components_ ) 1 2 3 4 5 6 [[-2.02176587e-03 9.78115765e-02 1.60930503e-02 6.07566861e-02 9.93110844e-01 1.40108085e-02 5.37167919e-04 -3.56474430e-03] [-2.26488861e-02 -9.72210040e-01 -1.41909330e-01 5.78614699e-02 9.46266913e-02 -4.69729766e-02 -8.16804621e-04 -1.40168181e-01] [-2.24649003e-02 1.43428710e-01 -9.22467192e-01 -3.07013055e-01 2.09773019e-02 -1.32444542e-01 -6.39983017e-04 -1.25454310e-01]] The transformed dataset (3 principal components) bare little resemblance to the source data.","title":"Data reduction techniques"},{"location":"Freeze_the_Code/","text":"Foreword Notes. Python 2. Consult the Hitchicker\u2019s Guide to Python . Freezing a Python file is similar to compiling the file. When running the executable file, the code runs faster than with interpreted code. http://docs.python-guide.org/en/latest/shipping/freezing/?highlight=freeze It is done on Windows in the following examples. It can be executed on all OS: Windows, Linux and Max OS X (using Wine for all UNIX OS). Distutils (an Overview) \u00b6 Building with distutils works well on all OS. The package provides support for building and installing additional modules (libraries or packages) into a Python installation. The new modules may be either 100%-pure Python, written in C, or coded in both Python and C. distutils autogenerates an install script. Documentation https://wiki.python.org/moin/Distutils/Tutorial https://docs.python.org/2/distutils/ cx-Freeze (with Snippets) \u00b6 cx_Freeze freezes Python scripts into executables. Alike py2exe for Windows only and py2app for Mac OS X only. Building with cx_Freeze works best on Windows. Supports Python 2.3 or higher (including Python 3). Simpler than distutils . Documentation http://cx-freeze.readthedocs.io https://anthony-tuininga.github.io/cx_Freeze/ Install cx_Freeze (works on Pyhon 2 & 3). The easiest way is with pip install cx_Freeze or pip3 install cx_Freeze . Procedure with a single script Have the hello.py ready. 1 2 3 4 5 6 def main (): print ( \"Hello World\" ) input ( \"nPlease press ENTER to continue...\" ) if __name__ == \"__main__\" : main () Create a setup.py . Find out more in the doc. Simple setup. 1 2 3 4 5 6 7 8 9 import sys from cx_Freeze import setup , Executable setup ( name = \"Hello\" , version = \"0.1\" , description = \"A general utility\" , executables = [ Executable ( \"hello.py\" , base = None )] ) Better setup. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import sys from cx_Freeze import setup , Executable includefiles = [] # include any files here that you wish excludes = [] packages = [] exe = Executable ( # what to build script = \"hello.py\" , # the name of the main python script goes here initScript = None , base = None , # if creating a GUI instead of a console app, type \"Win32GUI\" targetName = \"hello.exe\" , # the name of the executable file icon = None # if you want to use an icon file, specify the file name here ) setup ( # the actual setup & the definition of other misc. info name = \"Hello\" , # the program name version = \"0.1\" , description = \"A general utility\" , author = \"Your name\" , author_email = \"your@email.com\" , options = { \"build_exe\" : { \"excludes\" : excludes , \"packages\" : packages , \"include_files\" : includefiles }}, executables = [ exe ] ) Place the files in C:\\PythonXX\\, where Pip and Python are installed. Make sure the path is in the environment variables or exported (we assume this is understood and done). Open the shell, go to the C:\\PythonXX directory. Build the executable by calling the setup.py script with the Python version of our choice. 1 python setup . py build The created files are located in C:\\PythonXX\\build\u2026 Go in the subfolder, find the .exe file and launch it. On Linux and Mac OS X, the .exe file must to be run with Wine (executing Windows apps). Build an installer for Windows containing all the files. 1 python setup . py bdist_msi The installer is located in C:\\PythonXX\\dist . It can be distributed and installed/repaired/removed as a Windows program. The installation creates what the build command does in a directory of our choice. Build an installer on Mac OS X. 1 python setup . py bdist_dmg Procedure with a set of scripts (with folders) The project might look like this. 1 2 3 \u2514\u2500\u2500\u2500project \u251c\u2500\u2500\u2500bin \u2514\u2500\u2500\u2500map Under the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders. The setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX . Create a setup.py . Find out more in the doc. Simple setup (or a more elaborate setup). 1 2 3 4 5 6 7 8 9 import sys from cx_Freeze import setup , Executable setup ( name = \"Any Names\" , version = \"0.1\" , description = \"Any Description\" , executables = [ Executable ( \"bin/FileName.py\" , base = None )] ) Build the executable by calling the setup.py script with the Python version of choice. Pros & Cons It can handle a set of files (such as with the last example). Linux and Mac OS X can read the executable (using Wine). Easy to deploy (download, open, execute). It does not generate a single file, except with the bdist_ commands. However, a distribution requires additional steps to deploy. pyInstaller (with Snippets) \u00b6 pyinstaller is a simpler alternative to cx-Freeze. Libraries like PyQt , Django or matplotlib are fully supported, without having to handle plugins or external data files manually. Documentation http://www.pyinstaller.org/ https://github.com/pyinstaller/pyinstaller Install pyinstaller (works on Pyhon 2 & 3). The easiest way is with pip install pyinstaller or pip3 install pyinstaller . Procedure with a single script Have the hello.py ready. 1 2 3 4 5 6 def main (): print ( \"Hello World\" ) input ( \"nPlease press ENTER to continue...\" ) if __name__ == \"__main__\" : main () Place the files in C:\\PythonXX\\, where Pip and Python are installed. Make sure the path is in the environment variables or exported (we assume this is understood and done). Open the shell, go to the C:\\PythonXX directory. Build the executable. 1 pyinstaller hello . py Or 1 pyinstaller - D hello . py The created files are located in C:\\PythonXX\\dist\u2026 Go in the subfolder, find the .exe file and launch it. The default option is -D (above) is facultative. Build the single executable file with the bundle option -F (below). 1 pyinstaller - F hello . py The created file is located in C:\\PythonXX\\dist\u2026 Find the single .exe file and launch it. Build with an icon (.ico file). The .ico and .py files are located in the same folder, otherwise we have to specify the path with filename.ico. 1 pyinstaller - F - i \"favicon.ico\" hello . py Procedure with a set of scripts (with folders). The project might look like this. 1 2 3 \u2514\u2500\u2500\u2500project \u251c\u2500\u2500\u2500bin \u2514\u2500\u2500\u2500map Under the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders. The setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX . Build the single executable file. 1 pyinstaller - F - i \"favicon.ico\" bin / hello . py Pros & Cons It can handle a set of files (such as with the last example). Linux and Mac OS X can read the executable (using Wine). Easy to deploy (download, open, execute). Easier than with cx-Freeze, but without the flexibility a setup.py file can allow. However, it can generate a single file: dowload, then launch in a single click. Nuitka (an Overview) \u00b6 Python compiler compatible with CPython. Works on all OS. Compiled files are faster. Documentation http://nuitka.net/pages/overview.html. Check out the requirements. Need for a C++ compiler. PyPy (an Overview) \u00b6 Alternative to CPython: RPython (restricted Python). Works on all OS, best on Linux. Compiled files are faster. Documentation http://pypy.org/index.html","title":"Freeze the Code"},{"location":"Freeze_the_Code/#cx-freeze-with-snippets","text":"cx_Freeze freezes Python scripts into executables. Alike py2exe for Windows only and py2app for Mac OS X only. Building with cx_Freeze works best on Windows. Supports Python 2.3 or higher (including Python 3). Simpler than distutils . Documentation http://cx-freeze.readthedocs.io https://anthony-tuininga.github.io/cx_Freeze/ Install cx_Freeze (works on Pyhon 2 & 3). The easiest way is with pip install cx_Freeze or pip3 install cx_Freeze . Procedure with a single script Have the hello.py ready. 1 2 3 4 5 6 def main (): print ( \"Hello World\" ) input ( \"nPlease press ENTER to continue...\" ) if __name__ == \"__main__\" : main () Create a setup.py . Find out more in the doc. Simple setup. 1 2 3 4 5 6 7 8 9 import sys from cx_Freeze import setup , Executable setup ( name = \"Hello\" , version = \"0.1\" , description = \"A general utility\" , executables = [ Executable ( \"hello.py\" , base = None )] ) Better setup. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import sys from cx_Freeze import setup , Executable includefiles = [] # include any files here that you wish excludes = [] packages = [] exe = Executable ( # what to build script = \"hello.py\" , # the name of the main python script goes here initScript = None , base = None , # if creating a GUI instead of a console app, type \"Win32GUI\" targetName = \"hello.exe\" , # the name of the executable file icon = None # if you want to use an icon file, specify the file name here ) setup ( # the actual setup & the definition of other misc. info name = \"Hello\" , # the program name version = \"0.1\" , description = \"A general utility\" , author = \"Your name\" , author_email = \"your@email.com\" , options = { \"build_exe\" : { \"excludes\" : excludes , \"packages\" : packages , \"include_files\" : includefiles }}, executables = [ exe ] ) Place the files in C:\\PythonXX\\, where Pip and Python are installed. Make sure the path is in the environment variables or exported (we assume this is understood and done). Open the shell, go to the C:\\PythonXX directory. Build the executable by calling the setup.py script with the Python version of our choice. 1 python setup . py build The created files are located in C:\\PythonXX\\build\u2026 Go in the subfolder, find the .exe file and launch it. On Linux and Mac OS X, the .exe file must to be run with Wine (executing Windows apps). Build an installer for Windows containing all the files. 1 python setup . py bdist_msi The installer is located in C:\\PythonXX\\dist . It can be distributed and installed/repaired/removed as a Windows program. The installation creates what the build command does in a directory of our choice. Build an installer on Mac OS X. 1 python setup . py bdist_dmg Procedure with a set of scripts (with folders) The project might look like this. 1 2 3 \u2514\u2500\u2500\u2500project \u251c\u2500\u2500\u2500bin \u2514\u2500\u2500\u2500map Under the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders. The setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX . Create a setup.py . Find out more in the doc. Simple setup (or a more elaborate setup). 1 2 3 4 5 6 7 8 9 import sys from cx_Freeze import setup , Executable setup ( name = \"Any Names\" , version = \"0.1\" , description = \"Any Description\" , executables = [ Executable ( \"bin/FileName.py\" , base = None )] ) Build the executable by calling the setup.py script with the Python version of choice. Pros & Cons It can handle a set of files (such as with the last example). Linux and Mac OS X can read the executable (using Wine). Easy to deploy (download, open, execute). It does not generate a single file, except with the bdist_ commands. However, a distribution requires additional steps to deploy.","title":"cx-Freeze (with Snippets)"},{"location":"Freeze_the_Code/#pyinstaller-with-snippets","text":"pyinstaller is a simpler alternative to cx-Freeze. Libraries like PyQt , Django or matplotlib are fully supported, without having to handle plugins or external data files manually. Documentation http://www.pyinstaller.org/ https://github.com/pyinstaller/pyinstaller Install pyinstaller (works on Pyhon 2 & 3). The easiest way is with pip install pyinstaller or pip3 install pyinstaller . Procedure with a single script Have the hello.py ready. 1 2 3 4 5 6 def main (): print ( \"Hello World\" ) input ( \"nPlease press ENTER to continue...\" ) if __name__ == \"__main__\" : main () Place the files in C:\\PythonXX\\, where Pip and Python are installed. Make sure the path is in the environment variables or exported (we assume this is understood and done). Open the shell, go to the C:\\PythonXX directory. Build the executable. 1 pyinstaller hello . py Or 1 pyinstaller - D hello . py The created files are located in C:\\PythonXX\\dist\u2026 Go in the subfolder, find the .exe file and launch it. The default option is -D (above) is facultative. Build the single executable file with the bundle option -F (below). 1 pyinstaller - F hello . py The created file is located in C:\\PythonXX\\dist\u2026 Find the single .exe file and launch it. Build with an icon (.ico file). The .ico and .py files are located in the same folder, otherwise we have to specify the path with filename.ico. 1 pyinstaller - F - i \"favicon.ico\" hello . py Procedure with a set of scripts (with folders). The project might look like this. 1 2 3 \u2514\u2500\u2500\u2500project \u251c\u2500\u2500\u2500bin \u2514\u2500\u2500\u2500map Under the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders. The setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX . Build the single executable file. 1 pyinstaller - F - i \"favicon.ico\" bin / hello . py Pros & Cons It can handle a set of files (such as with the last example). Linux and Mac OS X can read the executable (using Wine). Easy to deploy (download, open, execute). Easier than with cx-Freeze, but without the flexibility a setup.py file can allow. However, it can generate a single file: dowload, then launch in a single click.","title":"pyInstaller (with Snippets)"},{"location":"Freeze_the_Code/#nuitka-an-overview","text":"Python compiler compatible with CPython. Works on all OS. Compiled files are faster. Documentation http://nuitka.net/pages/overview.html. Check out the requirements. Need for a C++ compiler.","title":"Nuitka (an Overview)"},{"location":"Freeze_the_Code/#pypy-an-overview","text":"Alternative to CPython: RPython (restricted Python). Works on all OS, best on Linux. Compiled files are faster. Documentation http://pypy.org/index.html","title":"PyPy (an Overview)"},{"location":"Gedit_Execute_Highlighted_Python_Code/","text":"Foreword Notes. Python 3 and gedit. In the gedit menu: Tools/Manage External Tools. On the left, add: Execute Highlighted Python Code. On the right, add: 1 2 3 #!/usr/bin/env python3 import sys exec ( sys . stdin . read ()) At the bottom, Choose a shortcut key: Alt + X . Input: Current selection (default to document) . Output: Display in bottom pane . Do not change the other parameters. Create a python document (.py), add Python code, highlight the code, and press Alt + X : a bottom pane opens showing the results. The external tool is now part of gedit and ready to use.","title":"Gedit, Execute Highlighted Code"},{"location":"Geospatial_Data_in_Python/","text":"Foreword Notes. Geospatial Data in Python \u00b6 Install all the packages. Some packages are pre-requisites to the others: to install GeoPandas, it requires Shapely, and to install Shapely, RTree, GDAL, and Fiona should be installed first. RTree: a ctypes Python wrapper of libspatialindex that provides a number of advanced spatial indexing features; GDAL: translator library for raster and vector geospatial data formats; Fiona: Fiona reads and writes spatial data files; Shapely: Geometric objects, predicates, and operations; GeoPandas: extends the datatypes used by pandas to allow spatial operations on geometric types; PySAL: a library of spatial analysis functions written in Python intended to support the development of high-level applications; Missingno: Missing data visualization module for Python. The dataset \u00b6 We take hurricane Florence \u2018s trajectory for plotting points on a map of the US States . 1 2 3 4 5 6 7 8 9 10 11 12 13 # Loading the packages import geopandas import numpy as np import pandas as pd from shapely.geometry import Point import missingno as msn import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline Let\u2019s look at the geospatial file from the US States (a GeoJSON file). 1 2 3 # Loading the file country = geopandas . read_file ( \"data/gz_2010_us_040_00_5m.json\" ) country . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } GEO_ID STATE NAME LSAD CENSUSAREA geometry 0 0400000US01 01 Alabama 50645.326 (POLYGON ((-88.124658 30.28364, -88.0868119999... 1 0400000US02 02 Alaska 570640.950 (POLYGON ((-166.10574 53.988606, -166.075283 5... 2 0400000US04 04 Arizona 113594.084 POLYGON ((-112.538593 37.000674, -112.534545 3... It is GeoDataFrame , which has all the regular characteristics of a Pandas DataFrame . 1 2 # Printing type ( country ) 1 geopandas.geodataframe.GeoDataFrame The column ( geometry ) containing the coordinates is a GeoSeries . 1 2 # Printing type ( country . geometry ) 1 geopandas.geoseries.GeoSeries Each value in the GeoSeries is a Shapely Object: a point, a segment, a polygon (and a multipolygon). Each object can represent something: a point for a building, a segment for a street, a polygon for acity, and multipolygon for a country with multiple borders inside. For more information about each Geometric object, consult this article . 1 2 # Printing type ( country . geometry [ 0 ]) 1 shapely.geometry.multipolygon.MultiPolygon Similar to a Pandas DataFrame , a GeoDataFrame can be plotted. 1 2 # Plotting the multipolygon country . plot (); As we may see, the US map is relatively small compared to the frame. It\u2019s because the information includes Alaska, Hawaii, and Puerto Rico. For this tutorial purpose, we can exclude Alaska and Hawaii as the hurricane did not go anywhere near those two states. We can also add the figure size and colour to customize the plot 1 2 3 4 # Plotting # Excluding Alaska and Hawaii with a conditional selection country [ country [ 'NAME' ] . isin ([ 'Alaska' , 'Hawaii' ]) == False ] . plot ( figsize = ( 30 , 20 ), color = '#3B3C6E' ); 1 2 3 # Loading the hurricane data florence = pd . read_csv ( 'data/florence.csv' ) florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } AdvisoryNumber Date Lat Long Wind Pres Movement Type Name Received Forecaster 0 1 08/30/2018 11:00 12.9 18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 08/30/2018 10:45 Avila 1 1A 08/30/2018 14:00 12.9 19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 08/30/2018 13:36 Avila 2 2 08/30/2018 17:00 12.9 19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six 08/30/2018 16:36 Avila Exploratory Data Analysis \u00b6 The first thing to do is EDA: Check the information, data type; Find out about missing values; Explore the descriptive statistics. 1 2 # Printing florence . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 105 entries, 0 to 104 Data columns (total 11 columns): AdvisoryNumber 105 non-null object Date 105 non-null object Lat 105 non-null float64 Long 105 non-null float64 Wind 105 non-null int64 Pres 105 non-null int64 Movement 105 non-null object Type 105 non-null object Name 105 non-null object Received 105 non-null object Forecaster 104 non-null object dtypes: float64(2), int64(2), object(7) memory usage: 9.1+ KB Checking missing values using the missingno package. There is only one missing value in column Forecaster which we don\u2019t need. So we can ignore it. 1 2 3 4 # The package alias is msn (missingno) # Printing msn . bar ( florence , color = 'darkolivegreen' ); 1 2 3 # Descriptive statistics (numerical columns, Series, fields or features only) # Printing florence . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Lat Long Wind Pres count 105.000000 105.000000 105.000000 105.000000 mean 25.931429 56.938095 74.428571 981.571429 std 7.975917 20.878865 36.560765 22.780667 min 12.900000 18.400000 25.000000 939.000000 25% 18.900000 41.000000 40.000000 956.000000 50% 25.100000 60.000000 70.000000 989.000000 75% 33.600000 76.400000 105.000000 1002.000000 max 42.600000 82.900000 140.000000 1008.000000 We only need the date , the coordinates: lat (latitude) and long (longitude), Wind speed, Pres sure, and Name . Movement and Type are optional, but the rest can be dropped. 1 2 3 4 5 6 # Droping all unused features florence = florence . drop ([ 'AdvisoryNumber' , 'Forecaster' , 'Received' ], axis = 1 ) # Printing florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Lat Long Wind Pres Movement Type Name 0 08/30/2018 11:00 12.9 18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 1 08/30/2018 14:00 12.9 19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 2 08/30/2018 17:00 12.9 19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six It is important to check out the longitude and latitude. Here the longitude is west. Add - to the Long values to correctly plot the data. The US are west of the Greenwich meridian (0 degree). Everything east of the 0 degree is positive, everything west is negative. The same goes for the northern/southern hemispheres. 1 2 3 4 5 # Modifying florence [ 'Long' ] = 0 - florence [ 'Long' ] # Printing florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Lat Long Wind Pres Movement Type Name 0 08/30/2018 11:00 12.9 -18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 1 08/30/2018 14:00 12.9 -19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 2 08/30/2018 17:00 12.9 -19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six Let\u2019s combine the latitude and longitude to create coordinates, which will subsequently be turned into a GeoSeries for visualization purpose. 1 2 3 4 5 # Combining florence [ 'coordinates' ] = florence [[ 'Long' , 'Lat' ]] . values . tolist () # Printing florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Lat Long Wind Pres Movement Type Name coordinates 0 08/30/2018 11:00 12.9 -18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six [-18.4, 12.9] 1 08/30/2018 14:00 12.9 -19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six [-19.0, 12.9] 2 08/30/2018 17:00 12.9 -19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six [-19.4, 12.9] 1 2 3 4 5 # Changing the coordinates into GeoPoint florence [ 'coordinates' ] = florence [ 'coordinates' ] . apply ( Point ) # Printing florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Lat Long Wind Pres Movement Type Name coordinates 0 08/30/2018 11:00 12.9 -18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six POINT (-18.4 12.9) 1 08/30/2018 14:00 12.9 -19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six POINT (-19 12.9) 2 08/30/2018 17:00 12.9 -19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six POINT (-19.4 12.9) Checking the type of the florence and column coordinates : it is a DataFrame and a Series . 1 2 # Printing type ( florence ) 1 pandas.core.frame.DataFrame 1 2 # Printing type ( florence [ 'coordinates' ]) 1 pandas.core.series.Series Convert the DataFrame into a GeoDataFrame and check the types once again: it is a GeoDataFrame and GeoSeries . 1 2 3 4 5 6 # Converting florence = geopandas . GeoDataFrame ( florence , geometry = 'coordinates' ) # Printing florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Lat Long Wind Pres Movement Type Name coordinates 0 08/30/2018 11:00 12.9 -18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six POINT (-18.4 12.9) 1 08/30/2018 14:00 12.9 -19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six POINT (-19 12.9) 2 08/30/2018 17:00 12.9 -19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six POINT (-19.4 12.9) 1 2 # Printing type ( florence ) 1 geopandas.geodataframe.GeoDataFrame 1 2 # Printing type ( florence [ 'coordinates' ]) 1 geopandas.geoseries.GeoSeries Notice that even though it\u2019s now a GeoDataFrame and a GeoSeries , we can still filter the rows. 1 2 3 4 5 6 # Filtering by the Name column # (a hurricane is of category 6 and lower values are tropical storms) florence [ florence [ 'Name' ] == 'Six' ] # Agregating by the Name column florence . groupby ( 'Name' ) . Type . count () 1 2 3 4 5 6 Name FLORENCE 6 Florence 85 SIX 4 Six 10 Name: Type, dtype: int64 Let\u2019s find the average wind speed. 1 2 3 4 # Printing print ( \"The average wind speed of Hurricane Florence is {} mph, and it can go up to {} mph maximum\" . \\ format ( round ( florence . Wind . mean (), 4 ), florence . Wind . max ())) 1 The average wind speed of Hurricane Florence is 74.4286 mph, and it can go up to 140 mph maximum So the average wind speed of hurricane Florence is 74.43 miles per hour (119.78 km per hour) and the maximum is 140 miles per hour (225.308 km per hour). To imagine how scary this wind speed is, the Beaufort Wind Scale, developed by U.K Royal Navy, shows the appearance of wind effects on the water and on land. With the speed of 48 to 55 miles per hours, it can already break and uproot trees, and cause \u201cconsiderable structural damage\u201d. Visualization \u00b6 A GeoDataFrame also has a plot method. 1 2 # Plotting florence . plot ( figsize = ( 20 , 10 )); Because this GeoDataFrame only have coordinates information (location) of some points in time, we can only plot the position on a blank map. Let\u2019s plot the hurricane position on a US map to see where Florence transited and how strong the wind was at that time. We use a US States map (data we loaded at the beginning) as the background and we overlay Florence\u2019s positions on top. 1 2 3 4 5 6 7 8 9 10 # Plotting the US map fig , ax = plt . subplots ( 1 , figsize = ( 30 , 20 )) base = country [ country [ 'NAME' ] . isin ([ 'Alaska' , 'Hawaii' ]) == False ] . plot ( ax = ax , color = '#3B3C6E' ) # Plotting the hurricane position florence . plot ( ax = base , color = 'darkred' , marker = \"*\" , markersize = 20 ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Improving fig , ax = plt . subplots ( 1 , figsize = ( 20 , 20 )) base = country [ country [ 'NAME' ] . isin ([ 'Alaska' , 'Hawaii' ]) == False ] . plot ( ax = ax , color = '#3B3C6E' ) florence . plot ( ax = base , column = 'Wind' , marker = \"<\" , markersize = 30 , cmap = 'Oranges' , label = \"Wind speed(mph)\" ) _ = ax . axis ( 'off' ) plt . legend ( labels = [ \"Wind Speed (mph) \\n\\n darker = stronger\" ], fontsize = 20 , facecolor = 'orangered' , markerscale = 2 , loc = 'best' , scatterpoints = 5 , fancybox = True , edgecolor = '#3B3C6E' ) ax . set_title ( \"Hurricane Florence\" , fontsize = 30 ) # Saving plt . savefig ( 'Hurricane_footage.png' , bbox_inches = 'tight' ); So the hurricane was strongest when it is offshore, near the east coast. As it approached the land, the hurricane started losing its strength, but with wind speeds ranging 60 to 77 miles per hour can still make horrible damages. For more, consult Python Geospatial Development Essentials .","title":"Geospatial Data"},{"location":"Geospatial_Data_in_Python/#the-dataset","text":"We take hurricane Florence \u2018s trajectory for plotting points on a map of the US States . 1 2 3 4 5 6 7 8 9 10 11 12 13 # Loading the packages import geopandas import numpy as np import pandas as pd from shapely.geometry import Point import missingno as msn import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline Let\u2019s look at the geospatial file from the US States (a GeoJSON file). 1 2 3 # Loading the file country = geopandas . read_file ( \"data/gz_2010_us_040_00_5m.json\" ) country . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } GEO_ID STATE NAME LSAD CENSUSAREA geometry 0 0400000US01 01 Alabama 50645.326 (POLYGON ((-88.124658 30.28364, -88.0868119999... 1 0400000US02 02 Alaska 570640.950 (POLYGON ((-166.10574 53.988606, -166.075283 5... 2 0400000US04 04 Arizona 113594.084 POLYGON ((-112.538593 37.000674, -112.534545 3... It is GeoDataFrame , which has all the regular characteristics of a Pandas DataFrame . 1 2 # Printing type ( country ) 1 geopandas.geodataframe.GeoDataFrame The column ( geometry ) containing the coordinates is a GeoSeries . 1 2 # Printing type ( country . geometry ) 1 geopandas.geoseries.GeoSeries Each value in the GeoSeries is a Shapely Object: a point, a segment, a polygon (and a multipolygon). Each object can represent something: a point for a building, a segment for a street, a polygon for acity, and multipolygon for a country with multiple borders inside. For more information about each Geometric object, consult this article . 1 2 # Printing type ( country . geometry [ 0 ]) 1 shapely.geometry.multipolygon.MultiPolygon Similar to a Pandas DataFrame , a GeoDataFrame can be plotted. 1 2 # Plotting the multipolygon country . plot (); As we may see, the US map is relatively small compared to the frame. It\u2019s because the information includes Alaska, Hawaii, and Puerto Rico. For this tutorial purpose, we can exclude Alaska and Hawaii as the hurricane did not go anywhere near those two states. We can also add the figure size and colour to customize the plot 1 2 3 4 # Plotting # Excluding Alaska and Hawaii with a conditional selection country [ country [ 'NAME' ] . isin ([ 'Alaska' , 'Hawaii' ]) == False ] . plot ( figsize = ( 30 , 20 ), color = '#3B3C6E' ); 1 2 3 # Loading the hurricane data florence = pd . read_csv ( 'data/florence.csv' ) florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } AdvisoryNumber Date Lat Long Wind Pres Movement Type Name Received Forecaster 0 1 08/30/2018 11:00 12.9 18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 08/30/2018 10:45 Avila 1 1A 08/30/2018 14:00 12.9 19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 08/30/2018 13:36 Avila 2 2 08/30/2018 17:00 12.9 19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six 08/30/2018 16:36 Avila","title":"The dataset"},{"location":"Geospatial_Data_in_Python/#exploratory-data-analysis","text":"The first thing to do is EDA: Check the information, data type; Find out about missing values; Explore the descriptive statistics. 1 2 # Printing florence . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 105 entries, 0 to 104 Data columns (total 11 columns): AdvisoryNumber 105 non-null object Date 105 non-null object Lat 105 non-null float64 Long 105 non-null float64 Wind 105 non-null int64 Pres 105 non-null int64 Movement 105 non-null object Type 105 non-null object Name 105 non-null object Received 105 non-null object Forecaster 104 non-null object dtypes: float64(2), int64(2), object(7) memory usage: 9.1+ KB Checking missing values using the missingno package. There is only one missing value in column Forecaster which we don\u2019t need. So we can ignore it. 1 2 3 4 # The package alias is msn (missingno) # Printing msn . bar ( florence , color = 'darkolivegreen' ); 1 2 3 # Descriptive statistics (numerical columns, Series, fields or features only) # Printing florence . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Lat Long Wind Pres count 105.000000 105.000000 105.000000 105.000000 mean 25.931429 56.938095 74.428571 981.571429 std 7.975917 20.878865 36.560765 22.780667 min 12.900000 18.400000 25.000000 939.000000 25% 18.900000 41.000000 40.000000 956.000000 50% 25.100000 60.000000 70.000000 989.000000 75% 33.600000 76.400000 105.000000 1002.000000 max 42.600000 82.900000 140.000000 1008.000000 We only need the date , the coordinates: lat (latitude) and long (longitude), Wind speed, Pres sure, and Name . Movement and Type are optional, but the rest can be dropped. 1 2 3 4 5 6 # Droping all unused features florence = florence . drop ([ 'AdvisoryNumber' , 'Forecaster' , 'Received' ], axis = 1 ) # Printing florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Lat Long Wind Pres Movement Type Name 0 08/30/2018 11:00 12.9 18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 1 08/30/2018 14:00 12.9 19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 2 08/30/2018 17:00 12.9 19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six It is important to check out the longitude and latitude. Here the longitude is west. Add - to the Long values to correctly plot the data. The US are west of the Greenwich meridian (0 degree). Everything east of the 0 degree is positive, everything west is negative. The same goes for the northern/southern hemispheres. 1 2 3 4 5 # Modifying florence [ 'Long' ] = 0 - florence [ 'Long' ] # Printing florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Lat Long Wind Pres Movement Type Name 0 08/30/2018 11:00 12.9 -18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 1 08/30/2018 14:00 12.9 -19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six 2 08/30/2018 17:00 12.9 -19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six Let\u2019s combine the latitude and longitude to create coordinates, which will subsequently be turned into a GeoSeries for visualization purpose. 1 2 3 4 5 # Combining florence [ 'coordinates' ] = florence [[ 'Long' , 'Lat' ]] . values . tolist () # Printing florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Lat Long Wind Pres Movement Type Name coordinates 0 08/30/2018 11:00 12.9 -18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six [-18.4, 12.9] 1 08/30/2018 14:00 12.9 -19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six [-19.0, 12.9] 2 08/30/2018 17:00 12.9 -19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six [-19.4, 12.9] 1 2 3 4 5 # Changing the coordinates into GeoPoint florence [ 'coordinates' ] = florence [ 'coordinates' ] . apply ( Point ) # Printing florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Lat Long Wind Pres Movement Type Name coordinates 0 08/30/2018 11:00 12.9 -18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six POINT (-18.4 12.9) 1 08/30/2018 14:00 12.9 -19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six POINT (-19 12.9) 2 08/30/2018 17:00 12.9 -19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six POINT (-19.4 12.9) Checking the type of the florence and column coordinates : it is a DataFrame and a Series . 1 2 # Printing type ( florence ) 1 pandas.core.frame.DataFrame 1 2 # Printing type ( florence [ 'coordinates' ]) 1 pandas.core.series.Series Convert the DataFrame into a GeoDataFrame and check the types once again: it is a GeoDataFrame and GeoSeries . 1 2 3 4 5 6 # Converting florence = geopandas . GeoDataFrame ( florence , geometry = 'coordinates' ) # Printing florence . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Lat Long Wind Pres Movement Type Name coordinates 0 08/30/2018 11:00 12.9 -18.4 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six POINT (-18.4 12.9) 1 08/30/2018 14:00 12.9 -19.0 30 1007 W at 12 MPH (280 deg) Potential Tropical Cyclone Six POINT (-19 12.9) 2 08/30/2018 17:00 12.9 -19.4 30 1007 W at 9 MPH (280 deg) Potential Tropical Cyclone Six POINT (-19.4 12.9) 1 2 # Printing type ( florence ) 1 geopandas.geodataframe.GeoDataFrame 1 2 # Printing type ( florence [ 'coordinates' ]) 1 geopandas.geoseries.GeoSeries Notice that even though it\u2019s now a GeoDataFrame and a GeoSeries , we can still filter the rows. 1 2 3 4 5 6 # Filtering by the Name column # (a hurricane is of category 6 and lower values are tropical storms) florence [ florence [ 'Name' ] == 'Six' ] # Agregating by the Name column florence . groupby ( 'Name' ) . Type . count () 1 2 3 4 5 6 Name FLORENCE 6 Florence 85 SIX 4 Six 10 Name: Type, dtype: int64 Let\u2019s find the average wind speed. 1 2 3 4 # Printing print ( \"The average wind speed of Hurricane Florence is {} mph, and it can go up to {} mph maximum\" . \\ format ( round ( florence . Wind . mean (), 4 ), florence . Wind . max ())) 1 The average wind speed of Hurricane Florence is 74.4286 mph, and it can go up to 140 mph maximum So the average wind speed of hurricane Florence is 74.43 miles per hour (119.78 km per hour) and the maximum is 140 miles per hour (225.308 km per hour). To imagine how scary this wind speed is, the Beaufort Wind Scale, developed by U.K Royal Navy, shows the appearance of wind effects on the water and on land. With the speed of 48 to 55 miles per hours, it can already break and uproot trees, and cause \u201cconsiderable structural damage\u201d.","title":"Exploratory Data Analysis"},{"location":"Geospatial_Data_in_Python/#visualization","text":"A GeoDataFrame also has a plot method. 1 2 # Plotting florence . plot ( figsize = ( 20 , 10 )); Because this GeoDataFrame only have coordinates information (location) of some points in time, we can only plot the position on a blank map. Let\u2019s plot the hurricane position on a US map to see where Florence transited and how strong the wind was at that time. We use a US States map (data we loaded at the beginning) as the background and we overlay Florence\u2019s positions on top. 1 2 3 4 5 6 7 8 9 10 # Plotting the US map fig , ax = plt . subplots ( 1 , figsize = ( 30 , 20 )) base = country [ country [ 'NAME' ] . isin ([ 'Alaska' , 'Hawaii' ]) == False ] . plot ( ax = ax , color = '#3B3C6E' ) # Plotting the hurricane position florence . plot ( ax = base , color = 'darkred' , marker = \"*\" , markersize = 20 ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Improving fig , ax = plt . subplots ( 1 , figsize = ( 20 , 20 )) base = country [ country [ 'NAME' ] . isin ([ 'Alaska' , 'Hawaii' ]) == False ] . plot ( ax = ax , color = '#3B3C6E' ) florence . plot ( ax = base , column = 'Wind' , marker = \"<\" , markersize = 30 , cmap = 'Oranges' , label = \"Wind speed(mph)\" ) _ = ax . axis ( 'off' ) plt . legend ( labels = [ \"Wind Speed (mph) \\n\\n darker = stronger\" ], fontsize = 20 , facecolor = 'orangered' , markerscale = 2 , loc = 'best' , scatterpoints = 5 , fancybox = True , edgecolor = '#3B3C6E' ) ax . set_title ( \"Hurricane Florence\" , fontsize = 30 ) # Saving plt . savefig ( 'Hurricane_footage.png' , bbox_inches = 'tight' ); So the hurricane was strongest when it is offshore, near the east coast. As it approached the land, the hurricane started losing its strength, but with wind speeds ranging 60 to 77 miles per hour can still make horrible damages. For more, consult Python Geospatial Development Essentials .","title":"Visualization"},{"location":"Importing Data into Python/","text":"Foreword Code snippets and excerpts from the courses. Python 3. From DataCamp. Importing from Flat Files \u00b6 Load the script and run it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # %load \"Importing Data in Python.py\" file = open ( 'moby_dick.txt' , 'r' ) # Print it print ( file . read ()) # Check whether file is closed print ( file . closed ) # Close file file . close () # Check whether file is closed print ( file . closed ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 CHAPTER 1. Loomings. Call me Ishmael. Some years ago--never mind how long precisely--having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world. It is a way I have of driving off the spleen and regulating the circulation. Whenever I find myself growing grim about the mouth; whenever it is a damp, drizzly November in my soul; whenever I find myself involuntarily pausing before coffin warehouses, and bringing up the rear of every funeral I meet; and especially whenever my hypos get such an upper hand of me, that it requires a strong moral principle to prevent me from deliberately stepping into the street, and methodically knocking people's hats off--then, I account it high time to get to sea as soon as I can. This is my substitute for pistol and ball. With a philosophical flourish Cato throws himself upon his sword; I quietly take to the ship. There is nothing surprising in this. If they but knew it, almost all men in their degree, some time or other, cherish very nearly the same feelings towards the ocean with me. False True 1 2 3 4 5 6 7 8 # Read & print the first 3 lines with open ( 'moby_dick.txt' ) as file : print ( file . readline ()) print ( file . readline ()) print ( file . readline ()) print ( file . readline ( 10 )) print ( file . readline ( 50 )) print ( file . readline ( 50 )) 1 2 3 4 5 6 7 CHAPTER 1. Loomings. Call me Ishmael. Some years ago--never mind how long precisely--having little or no money in my purse, and nothing particular to in terest me on this is a special package about PEP 20. 1 import this 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 The Zen of Python , by Tim Peters Beautiful is better than ugly . Explicit is better than implicit . Simple is better than complex . Complex is better than complicated . Flat is better than nested . Sparse is better than dense . Readability counts . Special cases aren 't special enough to break the rules. Although practicality beats purity . Errors should never pass silently . Unless explicitly silenced . In the face of ambiguity , refuse the temptation to guess . There should be one -- and preferably only one -- obvious way to do it . Although that way may not be obvious at first unless you 're Dutch. Now is better than never . Although never is often better than * right * now . If the implementation is hard to explain , it 's a bad idea. If the implementation is easy to explain , it may be a good idea . Namespaces are one honking great idea -- let 's do more of those! BDFL: Benevolent Dictator For Life, a.k.a. Guido van Rossum, Python\u2019s creator. Numpy \u00b6 Numpy arrays are a standard for storing numerical data. Arrays are essential to other packages such as the scikit-learn , for machine learning. Import numpy and matplotlib (or invoke them with the %pylab magic command). 1 2 import numpy as np import matplotlib.pyplot as plt 1 2 3 4 # or... % pylab inline # no need for preceeding functions (methods) with np. or plt. 1 Populating the interactive namespace from numpy and matplotlib Import a csv file and assign the content to an array. 1 2 3 4 5 6 7 8 9 10 11 12 13 file = 'digits.csv' # Load the file as an array called digits digits = loadtxt ( file , delimiter = ',' ) # Print the datatype of digits print ( type ( digits )) print ( digits ) # Select a row im = digits [ 2 , 2 :] print ( im ) 1 2 3 4 5 6 7 8 &lt;class 'numpy.ndarray'&gt; [[ 1. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0.] [ 1. 0. 0. 0. 0. 0.] [ 2. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0.] [ 5. 0. 0. 0. 0. 0.]] [ 0. 0. 0. 0.] Import a txt file. The delimiter can be '\\t' , ',' , ';' , etc. Skip the first 90 rows. 1 2 3 4 5 6 7 file = 'digits_header.txt' # Load the data into array data data = loadtxt ( file , delimiter = ' ' , skiprows = 90 ) # Print data print ( data ) 1 2 3 4 5 6 7 8 9 10 [[ 3. 0.] [ 6. 0.] [ 4. 0.] [ 6. 0.] [ 2. 0.] [ 9. 0.] [ 1. 0.] [ 2. 0.] [ 0. 0.] [ 5. 0.]] Import a txt file, but only the last rows and first column. 1 2 3 4 data2 = loadtxt ( file , delimiter = ' ' , skiprows = 90 , usecols = [ 0 ]) # Print data print ( data2 ) 1 [ 3. 6. 4. 6. 2. 9. 1. 2. 0. 5.] Import a txt file as string. 1 2 3 4 5 6 7 file = 'seaslug.txt' # Import file: data data = loadtxt ( file , delimiter = ' ' , dtype = str ) # Print the first element of data print ( data [ 0 ]) 1 ['b\"b\\'Time\\'\"' 'b\"b\\'Percent\\'\"'] Import a txt file as float numbers. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 file = 'seaslug2.txt' # Import data as floats and skip the first row: data_float data_float = loadtxt ( file , delimiter = ' ' , dtype = float , skiprows = 1 ) # Print the 10th element of data_float print ( data_float [ 9 ]) # Plot a scatterplot of the data scatter ( data_float [:, 0 ], data_float [:, 1 ]) xlabel ( 'time (min.)' ) ylabel ( 'percentage of larvae' ) show () 1 [ 0. 0.357] Import a csv file. Format the data. 1 data = genfromtxt ( 'titanic.csv' , delimiter = ',' , names = True , dtype = None ) 1 2 # A structred array shape ( data ) 1 (891,) Extract a row, a column. 1 2 # to get the ith row, merely execute data[i] print ( data [ 0 : 10 ]) 1 2 3 4 5 6 7 8 9 10 [ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\") (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\") (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\") (4, 1, 1, b\" b'female'\", 35.0, 1, 0, b\" b'113803'\", 53.1, b\" b'C123'\", b\" b'S'\") (5, 0, 3, b\" b'male'\", 35.0, 0, 0, b\" b'373450'\", 8.05, b\" b''\", b\" b'S'\") (6, 0, 3, b\" b'male'\", nan, 0, 0, b\" b'330877'\", 8.4583, b\" b''\", b\" b'Q'\") (7, 0, 1, b\" b'male'\", 54.0, 0, 0, b\" b'17463'\", 51.8625, b\" b'E46'\", b\" b'S'\") (8, 0, 3, b\" b'male'\", 2.0, 3, 1, b\" b'349909'\", 21.075, b\" b''\", b\" b'S'\") (9, 1, 3, b\" b'female'\", 27.0, 0, 2, b\" b'347742'\", 11.1333, b\" b''\", b\" b'S'\") (10, 1, 2, b\" b'female'\", 14.0, 1, 0, b\" b'237736'\", 30.0708, b\" b''\", b\" b'C'\")] 1 2 # to get the column with name 'Fare', execute data['Fare'] print ( data [ 'Fare' ][ 0 : 10 ]) 1 2 [ 7.25 71.2833 7.925 53.1 8.05 8.4583 51.8625 21.075 11.1333 30.0708] Import a csv file. Format the data. 1 2 # default dtype is None data2 = recfromcsv ( 'titanic.csv' , delimiter = ',' , names = True , dtype = None ) 1 2 # Print out first three entries print ( data2 [: 3 ]) 1 2 3 [ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\") (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\") (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")] Pandas \u00b6 Two-dimensional labeled data structure(s) or data frame (DataFrame). Pythonic analog of R\u2019s dataframes. Columns can be of potentially different types. Excellent object for: Manipulate, slice, reshape, groupby, join, merge. Perform statistics. Work with time series data. Exploratory data analysis. Data wrangling. Data preprocessing. Building models. Visualization. There exists standards and best practices to use Pandas. 1 2 # Import pandas import pandas as pd Pandas is not part of %pylab . Import a file. 1 2 3 4 5 6 7 file = 'titanic.csv' # Read the file into a DataFrame: df df = pd . read_csv ( file ) # View the head of the DataFrame print ( df . head ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 Passengerid Survived Pclass Sex Age SibSp Parch \\ 0 1 0 3 b'male' 22.0 1 0 1 2 1 1 b'female' 38.0 1 0 2 3 1 3 b'female' 26.0 0 0 3 4 1 1 b'female' 35.0 1 0 4 5 0 3 b'male' 35.0 0 0 Ticket Fare Cabin Embarked 0 b'A/5 21171' 7.2500 b'' b'S' 1 b'PC 17599' 71.2833 b'C85' b'C' 2 b'STON/O2. 3101282' 7.9250 b'' b'S' 3 b'113803' 53.1000 b'C123' b'S' 4 b'373450' 8.0500 b'' b'S' Import another file; no header and some rows. 1 2 3 4 5 6 7 8 9 10 11 12 13 file = 'digits2.csv' # Read the first 5 rows of the file into a DataFrame: data data = pd . read_csv ( file , nrows = 5 , header = None ) # Print the datatype of data print ( type ( data )) # Build a numpy array from the DataFrame: data_array data_array = data . values # Print the datatype of data_array to the shell print ( type ( data_array )) 1 2 &lt;class 'pandas.core.frame.DataFrame'&gt; &lt;class 'numpy.ndarray'&gt; Import another file; replace the missing data (NA). 1 2 3 4 5 6 7 8 9 10 file = 'titanic_corrupt.csv' # Assign filename: file file = 'titanic_corrupt.csv' # Import file: data data = pd . read_csv ( file , sep = ';' , comment = '#' , na_values = [ 'Nothing' ]) # Print the head of the DataFrame print ( data . head ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 PassengerId Survived Pclass Sex Age SibSp Parch \\ 0 1 0 3 male 22.0 1 0 1 2 1 1 female 38.0 1 0 2 3 1 3 female 26.0 0 0 3 4 1 1 female 35.0 1 0 4 5 0 3 male 35.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7,25 NaN S 1 PC 17599 NaN NaN NaN 2 STON/O2. 3101282 7,925 NaN S 3 113803 53,1 C123 S 4 373450 8,05 NaN S Plot the Age variable in a histogram. 1 2 3 4 5 pd . DataFrame . hist ( data [[ 'Age' ]]) plt . xlabel ( 'Age (years)' ) plt . ylabel ( 'count' ) plt . show () Importing from Other Files \u00b6 With Pandas\u2026 and a bit of Numpy. Excel spreadsheets. MATLAB files. SAS files. Stata files. HDF5 files (large datasets, scientific, legal, etc.). Feather. Julia. Pickle files (binary). 1 2 3 4 import os wd = os . getcwd () os . listdir ( wd ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 ['.ipynb_checkpoints', 'a_movie.json', 'cars.csv', 'count.svg', 'CYratioCyt.png', 'CYratioCyt.svg', 'digits.csv', 'digits2.csv', 'digits_header.txt', 'disa10.png', 'disa10.svg', 'economic.csv', 'economic2.xls', 'Importing Data into Python 3.ipynb', 'importing_python_ch1_pdf_slides.pdf', 'importing_python_ch2_pdf_slides.pdf', 'importing_python_ch3_pdf_slides.pdf', 'importing_python_ch4_pdf_slides.pdf', 'importing_python_ch5_pdf_slides.pdf', 'intermediate_python_ch1_slides.pdf', 'intermediate_python_ch2_slides.pdf', 'intermediate_python_ch3_slides.pdf', 'intermediate_python_ch4_slides.pdf', 'intermediate_python_ch5_slides.pdf', 'intro_python_ch1_slides.pdf', 'intro_python_ch2_slides.pdf', 'intro_python_ch3_slides.pdf', 'intro_python_ch4_slides.pdf', 'moby_dick.txt', 'new1.py', 'p.png', 'PRIO_bd3.0.xls', 'Python 3.ipynb', 'Python3.py', 'sales.sas7bdat', 'save.p', 'seaslug.txt', 'seaslug2.txt', 'strain.png', 'strain.svg', 'Thumbs.db', 'titanic.csv', 'titanic_corrupt.csv', 'tweets_figure.png', 'tweets_figure.svg', 'winequality-red.csv'] Pickled files There are a number of datatypes that cannot be saved easily to flat files, such as lists and dictionaries. If you want your files to be human readable, you may want to save them as text files in a clever manner (JSONs, which you will see in a later chapter, are appropriate for Python dictionaries). If, however, you merely want to be able to import them into Python, you can serialize them. All this means is converting the object into a sequence of bytes, or bytestream. Import it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import pickle # Save a dictionary into a pickle file. fav = { 'Airline' : '8' , 'Aug' : '85' , 'June' : '69.4' , 'Mar' : '84.4' } pickle . dump ( fav , open ( \"save.p\" , \"wb\" )) # save.p # Open pickle file and load data: d with open ( 'save.p' , 'rb' ) as file : d = pickle . load ( file ) # Print d print ( d ) # Print datatype of d print ( type ( d )) 1 2 {'Aug': '85', 'Airline': '8', 'Mar': '84.4', 'June': '69.4'} &lt;class 'dict'&gt; Excel files 1 2 3 4 5 6 7 file = 'PRIO_bd3.0.xls' # Load spreadsheet: xl xl = pd . ExcelFile ( file ) # Print sheet names print ( xl . sheet_names ) 1 ['bdonly'] Parse the sheets. By name or by number (first, second, \u2026). 1 df1 = xl . parse ( 'bdonly' ) 1 df2 = xl . parse ( 0 ) Options: parse the first sheet by index, skip the first row of data, then name the columns Country and AAM due to War (2002) . 1 df2 = xl . parse ( 0 , parse_cols = [ 0 ], skiprows = [ 0 ], names = [ 'Country' , 'AAM due to War (2002)' ]) Options: parse the second sheet, parse only the first column, skip the first row and rename the column Country . 1 df2 = xl . parse ( 1 , parse_cols = [ 0 ], skiprows = [ 0 ], names = [ 'Country' ]) Print the head of the DataFrame . 1 print ( df1 . head ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 id year bdeadlow bdeadhig bdeadbes annualdata source bdversion \\ 0 1 1946 1000 9999 1000 2 1 3 1 1 1952 450 3000 -999 2 1 3 2 1 1967 25 999 82 2 1 3 3 2 1946 25 999 -999 0 0 3 4 2 1947 25 999 -999 0 0 3 location sidea ... epend ependdate ependprec gwnoa gwnoa2nd \\ 0 Bolivia Bolivia ... 1 1946-07-21 -99.0 145 NaN 1 Bolivia Bolivia ... 1 1952-04-12 -99.0 145 NaN 2 Bolivia Bolivia ... 1 1967-10-16 -99.0 145 NaN 3 Cambodia France ... 0 NaT NaN 220 NaN 4 Cambodia France ... 0 NaT NaN 220 NaN gwnob gwnob2nd gwnoloc region version 0 NaN NaN 145 5 2009-4 1 NaN NaN 145 5 2009-4 2 NaN NaN 145 5 2009-4 3 NaN NaN 811 3 2009-4 4 NaN NaN 811 3 2009-4 [5 rows x 32 columns] We process images since we cheat a little. Many packages are not installed. We are not be able to import some data. Images will then present the final results. 1 2 from IPython.display import Image # for the following pictures... SAS files Advanced analytics Multivariate analysis Business intelligence Data management Predictive analytics Standard for computational analysis Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Import sas7bdat package from sas7bdat import SAS7BDAT # Save file to a DataFrame: df_sas with SAS7BDAT ( 'sales.sas7bdat' ) as file : df_sas = file . to_data_frame () # Print head of DataFrame print ( df_sas . head ()) # Plot histogram of DataFrame features pd . DataFrame . hist ( df_sas [[ 'P' ]]) plt . ylabel ( 'count' ) plt . show () The data are adapted from the website of the undergraduate text book Principles of Economics by Hill, Griffiths and Lim. The chart would be: 1 Image ( 'p.png' ) Stata files The data consist of disease extent for several diseases in various countries (more information can be found . 1 2 3 4 5 6 7 8 # Import pandas import pandas as pd # Load Stata file into a pandas DataFrame: df df = pd . read_stata ( 'disarea.dta' ) # Print the head of the DataFrame df print ( df . head ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 wbcode country disa1 disa2 disa3 disa4 disa5 disa6 \\ 0 AFG Afghanistan 0.00 0.00 0.76 0.73 0.0 0.00 1 AGO Angola 0.32 0.02 0.56 0.00 0.0 0.00 2 ALB Albania 0.00 0.00 0.02 0.00 0.0 0.00 3 ARE United Arab Emirates 0.00 0.00 0.00 0.00 0.0 0.00 4 ARG Argentina 0.00 0.24 0.24 0.00 0.0 0.23 disa7 disa8 ... disa16 disa17 disa18 disa19 disa20 disa21 \\ 0 0.00 0.0 ... 0.0 0.0 0.0 0.00 0.00 0.0 1 0.56 0.0 ... 0.0 0.4 0.0 0.61 0.00 0.0 2 0.00 0.0 ... 0.0 0.0 0.0 0.00 0.00 0.0 3 0.00 0.0 ... 0.0 0.0 0.0 0.00 0.00 0.0 4 0.00 0.0 ... 0.0 0.0 0.0 0.00 0.05 0.0 disa22 disa23 disa24 disa25 0 0.00 0.02 0.00 0.00 1 0.99 0.98 0.61 0.00 2 0.00 0.00 0.00 0.16 3 0.00 0.00 0.00 0.00 4 0.00 0.01 0.00 0.11 [5 rows x 27 columns] Plot histogram of one column of the DataFrame . 1 2 3 4 5 pd . DataFrame . hist ( df [[ 'disa10' ]]) plt . xlabel ( 'Extent of disease' ) plt . ylabel ( 'Number of coutries' ) plt . show () HDF5 files Standard for storing large quantities of numerical data. Datasets can be hundreds of gigabytes or terabytes. HDF5 can scale to exabytes. Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 # Import packages import numpy as np import h5py # Assign filename: file file = 'LIGO_data.hdf5' # Load file: data data = h5py . File ( file , 'r' ) # Print the datatype of the loaded file print ( type ( data )) # Print the keys of the file for key in data . keys (): print ( key ) # Get the HDF5 group: group group = data [ 'strain' ] # Check out keys of group for key in group . keys (): print ( key ) # Set variable equal to time series data: strain strain = data [ 'strain' ][ 'Strain' ] . value # Set number of time points to sample: num_samples num_samples = 10000 # Set time vector time = np . arange ( 0 , 1 , 1 / num_samples ) # Plot data plt . plot ( time , strain [: num_samples ]) plt . xlabel ( 'GPS Time (s)' ) plt . ylabel ( 'strain' ) plt . show () You can find the LIGO data plus loads of documentation and tutorials on Signal Processing with the data. 1 Image ( 'strain.png' ) MATLAB \u201cMatrix Laboratory\u201d. Industry standard in engineering and science. Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Import package import scipy.io # Load MATLAB file: mat mat = scipy . io . loadmat ( 'albeck_gene_expression.mat' ) # Print the datatype type of mat print ( type ( mat )) # Print the keys of the MATLAB dictionary print ( mat . keys ()) # Print the type of the value corresponding to the key 'CYratioCyt' print ( type ( mat [ 'CYratioCyt' ])) # Print the shape of the value corresponding to the key 'CYratioCyt' print ( np . shape ( mat [ 'CYratioCyt' ])) # Subset the array and plot it data = mat [ 'CYratioCyt' ][ 25 , 5 :] fig = plt . figure () plt . plot ( data ) plt . xlabel ( 'time (min.)' ) plt . ylabel ( 'normalized fluorescence (measure of expression)' ) plt . show () This file contains gene expression data from the Albeck Lab at UC Davis. You can find the data and some great documentation. 1 Image ( 'CYratioCyt.png' ) Working with Relational Databases \u00b6 Relational Database Management System PostgreSQL. MySQL. SQLite. Code (instead of importing the package): 1 2 3 4 5 # Import necessary module from sqlalchemy import create_engine # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) 'sqlite:///Northwind.sqlite' is called the connection string to the SQLite database. The Chinook database contains information about a semi-fictional digital media store in which media data is real and customer, employee and sales data has been manually created. Code (instead of importing the package): 1 2 3 4 5 # Save the table names to a list: table_names table_names = engine . table_names () # Print the table names to the shell print ( table_names ) Query the DB The final ; is facultative. Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # Open engine connection: con con = engine . connect () # Perform query: rs rs = con . execute ( 'SELECT * FROM Album' ) # Save results of the query to DataFrame: df df = pd . DataFrame ( rs . fetchall ()) # Close connection con . close () # Print head of DataFrame df print ( df . head ()) Customize queries Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # becomes facultative with many queries # Open engine in context manager # Perform query and save results to DataFrame: df with engine . connect () as con : rs = con . execute ( 'SELECT LastName, Title FROM Employee' ) df = pd . DataFrame ( rs . fetchmany ( size = 3 )) df . columns = rs . keys () # set the DataFrame's column names to the corresponding names of the table columns # Print the length of the DataFrame df print ( len ( df )) # Print the head of the DataFrame df print ( df . head ()) Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # becomes facultative with many queries # Open engine in context manager # Perform query and save results to DataFrame: df with engine . connect () as con : rs = con . execute ( \"SELECT * FROM Employee WHERE EmployeeId >= 6\" ) df = pd . DataFrame ( rs . fetchall ()) df . columns = rs . keys () # Print the head of the DataFrame df print ( df . head ()) Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # Open engine in context manager with engine . connect () as con : rs = con . execute ( 'SELECT * FROM Employee ORDER BY BirthDate' ) df = pd . DataFrame ( rs . fetchall ()) # Set the DataFrame's column names df . columns = rs . keys () # Print head of DataFrame print ( df . head ()) Query the DB the Pandas way Simpler code (instead of importing the package)!!! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Import packages from sqlalchemy import create_engine import pandas as pd # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # Execute query and store records in DataFrame: df df = pd . read_sql_query ( \"SELECT * FROM Album\" , engine ) # Print head of DataFrame print ( df . head ()) # Open engine in context manager # Perform query and save results to DataFrame: df1 with engine . connect () as con : rs = con . execute ( \"SELECT * FROM Album\" ) df1 = pd . DataFrame ( rs . fetchall ()) df1 . columns = rs . keys () # Confirm that both methods yield the same result: does df = df1 ? print ( df . equals ( df1 )) Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 # Import packages from sqlalchemy import create_engine import pandas as pd # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # Execute query and store records in DataFrame: df df = pd . read_sql_query ( \"SELECT * FROM Employee WHERE EmployeeId >= 6 ORDER BY BirthDate\" , engine ) # Print head of DataFrame print ( df . head ()) INNER JOIN Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import pandas as pd from sqlalchemy import create_engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # Open engine in context manager # Perform query and save results to DataFrame: df with engine . connect () as con : rs = con . execute ( \"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\" ) df = pd . DataFrame ( rs . fetchall ()) df . columns = rs . keys () # Print head of DataFrame df print ( df . head ()) Alternative code: 1 2 3 4 df = pd . read_sql_query ( \"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\" , engine ) # Print head of DataFrame df print ( df . head ()) Code (instead of importing the package): 1 2 3 4 5 # Execute query and store records in DataFrame: df df = pd . read_sql_query ( \"SELECT * FROM PlaylistTrack INNER JOIN Track on PlaylistTrack.TrackId = Track.TrackId WHERE Milliseconds < 250000\" , engine ) # Print head of DataFrame print ( df . head ()) Importing Flat Files from the Web (Web Scraping) \u00b6 Import and locally save datasets from the web. Load datasets into Pandas DataFrame . Make HTTP requests (GET requests). Scrape web data such as HTML. Parse HTML into useful data (BeautifulSoup). Use the urllib and requests packages. Using the urllib package on csv files Import the package. 1 2 3 4 5 6 7 8 9 10 11 12 13 from urllib.request import urlretrieve # import pandas as pd # Assign url of file: url url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv' # Save file locally urlretrieve ( url , 'winequality-red.csv' ) # Read file into a DataFrame and print its head df = pd . read_csv ( 'winequality-red.csv' , sep = ';' ) print ( df . head ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 fixed acidity volatile acidity citric acid residual sugar chlorides \\ 0 7.4 0.70 0.00 1.9 0.076 1 7.8 0.88 0.00 2.6 0.098 2 7.8 0.76 0.04 2.3 0.092 3 11.2 0.28 0.56 1.9 0.075 4 7.4 0.70 0.00 1.9 0.076 free sulfur dioxide total sulfur dioxide density pH sulphates \\ 0 11.0 34.0 0.9978 3.51 0.56 1 25.0 67.0 0.9968 3.20 0.68 2 15.0 54.0 0.9970 3.26 0.65 3 17.0 60.0 0.9980 3.16 0.58 4 11.0 34.0 0.9978 3.51 0.56 alcohol quality 0 9.4 5 1 9.8 5 2 9.8 5 3 9.8 6 4 9.4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # import matplotlib.pyplot as plt # import pandas as pd # Assign url of file: url url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv' # Read file into a DataFrame: df df = pd . read_csv ( url , sep = ';' ) # Print the head of the DataFrame print ( df . head ()) # Plot first column of df pd . DataFrame . hist ( df . ix [:, 0 : 1 ]) plt . xlabel ( 'fixed acidity (g(tartaric acid)/dm$^3$)' ) plt . ylabel ( 'count' ) plt . show () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 fixed acidity volatile acidity citric acid residual sugar chlorides \\ 0 7.4 0.70 0.00 1.9 0.076 1 7.8 0.88 0.00 2.6 0.098 2 7.8 0.76 0.04 2.3 0.092 3 11.2 0.28 0.56 1.9 0.075 4 7.4 0.70 0.00 1.9 0.076 free sulfur dioxide total sulfur dioxide density pH sulphates \\ 0 11.0 34.0 0.9978 3.51 0.56 1 25.0 67.0 0.9968 3.20 0.68 2 15.0 54.0 0.9970 3.26 0.65 3 17.0 60.0 0.9980 3.16 0.58 4 11.0 34.0 0.9978 3.51 0.56 alcohol quality 0 9.4 5 1 9.8 5 2 9.8 5 3 9.8 6 4 9.4 5 Using the urllib package on Excel files 1 2 3 4 5 6 7 8 9 10 11 12 13 # import pandas as pd # Assign url of file: url url = 'http://s3.amazonaws.com/assets.datacamp.com/course/importing_data_into_r/latitude.xls' # Read in all sheets of Excel file: xl xl = pd . read_excel ( url , sheetname = None ) # Print the sheetnames (keys) to the shell !!! print ( xl . keys ()) # Print the head of the first sheet (using its name, NOT its index) print ( xl [ '1700' ] . head ()) 1 2 3 4 5 6 7 dict_keys(['1700', '1900']) country 1700 0 Afghanistan 34.565000 1 Akrotiri and Dhekelia 34.616667 2 Albania 41.312000 3 Algeria 36.720000 4 American Samoa -14.307000 HTTP requests to import files from the web requests is one of the most downloaded Python packages. requests works with urllib . Import the package. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from urllib.request import urlopen , Request # Specify the url url = \"http://www.datacamp.com/teach/documentation\" # This packages the request: request request = Request ( url ) # Send the request and catches the response: response response = urlopen ( request ) # Print the datatype of response print ( type ( response )) # Be polite and close the response! response . close () 1 &lt;class 'http.client.HTTPResponse'&gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from urllib.request import urlopen , Request url = \"http://docs.datacamp.com/teach/\" request = Request ( url ) response = urlopen ( request ) # Extract the response: html html = response . read () # Print the html print ( html ) # Be polite and close the response! response . close () 1 b ' & lt ; ! DOCTYPE html & gt ; \\ n & lt ; link rel = \"shortcut icon\" href = \"images/favicon.ico\" /& gt ; \\ n & lt ; html & gt ; \\ n \\ n & lt ; head & gt ; \\ n & lt ; meta charset = \"utf-8\" & gt ; \\ n & lt ; meta http - equiv = \"X-UA-Compatible\" content = \"IE=edge\" & gt ; \\ n & lt ; meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" & gt ; \\ n \\ n & lt ; title & gt ; Home & lt ; / title & gt ; \\ n & lt ; meta name = \"description\" content = \"All Documentation on Course Creation\" & gt ; \\ n \\ n & lt ; link rel = \"stylesheet\" href = \"/teach/css/main.css\" & gt ; \\ n & lt ; link rel = \"canonical\" href = \"/teach/\" & gt ; \\ n & lt ; link rel = \"alternate\" type = \"application/rss+xml\" title = \"DataCamp Teach Documentation\" href = \"/teach/feed.xml\" /& gt ; \\ n & lt ; / head & gt ; \\ n \\ n \\ n & lt ; body & gt ; \\ n \\ n & lt ; header class = \"site-header\" & gt ; \\ n \\ n & lt ; div class = \"wrapper\" & gt ; \\ n \\ n & lt ; a class = \"site-title\" href = \"/teach/\" & gt ; DataCamp Teach Documentation & lt ; / a & gt ; \\ n \\ n & lt ; / div & gt ; \\ n \\ n & lt ; / header & gt ; \\ n \\ n \\ n & lt ; div class = \"page-content\" & gt ; \\ n & lt ; div class = \"wrapper\" & gt ; \\ n & lt ; p & gt ; The Teach Documentation has been moved to & lt ; a href = \"https://www.datacamp.com/teach/documentation\" & gt ; https : //www.datacamp.com/teach/documentation&lt;/a&gt;!&lt;/p&gt;\\n\\n&lt;!-- Everybody can teach on DataCamp. The resources on this website explain all the steps to build your own course on DataCamp\\'s interactive data science platform.\\n\\nInterested in partnering with DataCamp? Head over to the [Course Material](/teach/course-material.html) page to get an idea of the requirements to build your own interactive course together with DataCamp!\\n\\n## Table of Contents\\n\\n- [Course Material](/teach/course-material.html) - Content required to build a DataCamp course.\\n- [Video Lectures](/teach/video-lectures.html) - Details on video recording and editing.\\n- [DataCamp Teach](https://www.datacamp.com/teach) - Use the DataCamp Teach website to create DataCamp courses (preferred).\\n- [datacamp R Package](https://github.com/datacamp/datacamp/wiki) - Use R Package to create DataCamp courses (legacy).\\n- [Code DataCamp Exercises](/teach/code-datacamp-exercises.html)\\n- [SCT Design (R)](https://github.com/datacamp/testwhat/wiki)\\n- [SCT Design (Python)](https://github.com/datacamp/pythonwhat/wiki)\\n- [Style Guide](/teach/style-guide.html) --&gt;\\n\\n\\n &lt;/div&gt;\\n &lt;/div&gt;\\n\\n \\n\\n &lt;/body&gt;\\n\\n&lt;/html&gt;\\n' Using requests 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import requests url = \"http://docs.datacamp.com/teach/\" r = requests . get ( url ) text = r . text # Print part of the html (split the paragraphs) instead of all with print(text) head = text . split ( ' \\n\\n ' ) print ( head [ 0 ]) print ( '' ) print ( head [ 1 ]) print ( '' ) print ( head [ 2 ]) print ( '' ) print ( head [ 3 ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;!DOCTYPE html&gt; &lt;link rel=\"shortcut icon\" href=\"images/favicon.ico\" /&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;title&gt;Home&lt;/title&gt; &lt;meta name=\"description\" content=\"All Documentation on Course Creation\"&gt; &lt;link rel=\"stylesheet\" href=\"/teach/css/main.css\"&gt; &lt;link rel=\"canonical\" href=\"/teach/\"&gt; &lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"DataCamp Teach Documentation\" href=\"/teach/feed.xml\" /&gt; &lt;/head&gt; Scraping the web Scrape unstructured data. Scrape structured data, parse it and extract the data from HTML using the BeautifulSoup package. Import the packages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import requests from bs4 import BeautifulSoup url = 'https://www.python.org/~guido/' r = requests . get ( url ) html_doc = r . text # Create a BeautifulSoup object from the HTML: soup soup = BeautifulSoup ( html_doc , 'lxml' ) # Prettify the BeautifulSoup object: pretty_soup pretty_soup = soup . prettify () # Print the response print ( type ( pretty_soup )) # Print part of the html (split the text), not all with print(pretty_soup) head = pretty_soup . split ( '</h3>' ) print ( head [ 0 ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 & lt ; class 'str' & gt ; & lt ; html & gt ; & lt ; head & gt ; & lt ; title & gt ; Guido ' s Personal Home Page & lt ;/ title & gt ; & lt ;/ head & gt ; & lt ; body bgcolor = \"#FFFFFF\" text = \"#000000\" & gt ; & lt ; h1 & gt ; & lt ; a href = \"pics.html\" & gt ; & lt ; img border = \"0\" src = \"images/IMG_2192.jpg\" /& gt ; & lt ;/ a & gt ; Guido van Rossum - Personal Home Page & lt ;/ h1 & gt ; & lt ; p & gt ; & lt ; a href = \"http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\" & gt ; & lt ; i & gt ; \"Gawky and proud of it.\" & lt ;/ i & gt ; & lt ;/ a & gt ; & lt ;/ p & gt ; & lt ; h3 & gt ; & lt ; a href = \"http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\" & gt ; Who I Am & lt ;/ a & gt ; Other operations with BeautifulSoup. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import requests from bs4 import BeautifulSoup url = 'https://www.python.org/~guido/' r = requests . get ( url ) html_doc = r . text # Create a BeautifulSoup object from the HTML: soup soup = BeautifulSoup ( html_doc , 'lxml' ) # Get the title of Guido's webpage: guido_title guido_title = soup . title # attribute # Print the title of Guido's webpage to the shell print ( guido_title ) # Get Guido's text: guido_text guido_text = soup . get_text () # method # Print Guido's text to the shell print ( guido_text ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 &lt ; title&gt ; Guido 's Personal Home Page&lt;/title&gt; Guido's Personal Home Page Guido van Rossum - Personal Home Page \"Gawky and proud of it.\" Who I Am I am the author of the Python programming language . See also my resume and my publications list , a brief bio , assorted writings , presentations and interviews ( all about Python ), some pictures of me , my new blog , and my old blog on Artima . com . I am @gvanrossum on Twitter . I also have a G + profile . In January 2013 I joined Dropbox . I work on various Dropbox products and have 50 % for my Python work, no strings attached. Previously , I have worked for Google , Elemental Security , Zope Corporation , BeOpen . com , CNRI , CWI , and SARA . ( See my resume .) I created Python while at CWI . How to Reach Me You can send email for me to guido ( at ) python . org . I read everything sent there , but if you ask me a question about using Python , it's likely that I won't have time to answer it , and will instead refer you to help ( at ) python . org , comp . lang . python or StackOverflow . If you need to talk to me on the phone or send me something by snail mail , send me an email and I 'll gladly email you instructions on how to reach me. My Name My name often poses difficulties for Americans. Pronunciation: in Dutch, the \"G\" in Guido is a hard G, pronounced roughly like the \"ch\" in Scottish \"loch\". (Listen to the sound clip.) However, if you're American , you may also pronounce it as the Italian \"Guido\" . I 'm not too worried about the associations with mob assassins that some people have. :-) Spelling: my last name is two words, and I'd like keep it that way , the spelling on some of my credit cards notwithstanding . Dutch spelling rules dictate that when used in combination with my first name , \"van\" is not capitalized : \"Guido van Rossum\" . But when my last name is used alone to refer to me , it is capitalized , for example : \"As usual, Van Rossum was right.\" Alphabetization : in America , I show up in the alphabet under \"V\" . But in Europe , I show up under \"R\" . And some of my friends put me under \"G\" in their address book ... More Hyperlinks Here 's a collection of essays relating to Python that I've written , including the foreword I wrote for Mark Lutz ' book \"Programming Python\". I own the official Python license. The Audio File Formats FAQ I was the original creator and maintainer of the Audio File Formats FAQ. It is now maintained by Chris Bagwell at http://www.cnpbagwell.com/audio-faq. And here is a link to SOX, to which I contributed some early code. \"On the Internet, nobody knows you're a dog . \" More. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import requests from bs4 import BeautifulSoup url = 'https://www.python.org/~guido/' r = requests . get ( url ) html_doc = r . text # create a BeautifulSoup object from the HTML: soup soup = BeautifulSoup ( html_doc , 'lxml' ) # Print the title of Guido's webpage print ( soup . title ) # Find all 'a' tags (which define hyperlinks): a_tags a_tags = soup . find_all ( 'a' ) # for <a>, hyperlinks # Print the URLs to the shell for link in a_tags : print ( link . get ( 'href' )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &lt;title&gt;Guido's Personal Home Page&lt;/title&gt; pics.html http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg http://www.python.org Resume.html Publications.html bio.html http://legacy.python.org/doc/essays/ http://legacy.python.org/doc/essays/ppt/ interviews.html pics.html http://neopythonic.blogspot.com http://www.artima.com/weblogs/index.jsp?blogger=12088 https://twitter.com/gvanrossum https://plus.google.com/u/0/115212051037621986145/posts http://www.dropbox.com Resume.html http://groups.google.com/groups?q=comp.lang.python http://stackoverflow.com guido.au http://legacy.python.org/doc/essays/ images/license.jpg http://www.cnpbagwell.com/audio-faq http://sox.sourceforge.net/ images/internetdog.gif Introduction to APIs and JSONs \u00b6 API or Application Programming Interface are protocols and routines providing access to websites and web apps like OMDb, Wikipedia, Uber, Uber Developers, BGG, ImDB, Facebook, Instagram, and Twitter. Most of data coming from APIS are JSON files. Import the json package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import json # Load JSON: json_data with open ( 'a_movie.json' , 'r' ) as json_file : json_data = json . load ( json_file ) print ( type ( json_data )) print ( json_data [ 'Title' ]) print ( json_data [ 'Year' ]) print ( '' ) # Print each key-value pair in json_data for k in json_data . keys (): print ( k + ': ' , json_data [ k ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 & lt ; class 'dict' & gt ; The Social Network 2010 Response : True Rated : PG-13 Poster : http :// ia . media-imdb . com / images / M / MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw @@ . _V1_SX300 . jpg imdbID : tt1285016 Year : 2010 Awards : Won 3 Oscars . Another 161 wins & amp ; 162 nominations . Metascore : 95 Language : English , French Country : USA Plot : Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook , but is later sued by two brothers who claimed he stole their idea , and the co-founder who was later squeezed out of the business . imdbRating : 7 . 7 Actors : Jesse Eisenberg , Rooney Mara , Bryan Barter , Dustin Fitzsimons Title : The Social Network imdbVotes : 478 , 258 Released : 01 Oct 2010 Runtime : 120 min Genre : Biography , Drama Type : movie Director : David Fincher Writer : Aaron Sorkin ( screenplay ), Ben Mezrich ( book ) The requests package again Pull some movie data down from the Open Movie Database (OMDB) using their API. Pull it as text. 1 2 3 4 5 6 7 8 9 10 11 import requests url = 'http://www.omdbapi.com/?t=social+network' r = requests . get ( url ) print ( type ( r )) print ( '' ) # Print the text of the response print ( r . text ) 1 2 3 &lt;class 'requests.models.Response'&gt; {\"Title\":\"The Social Network\",\"Year\":\"2010\",\"Rated\":\"PG-13\",\"Released\":\"01 Oct 2010\",\"Runtime\":\"120 min\",\"Genre\":\"Biography, Drama\",\"Director\":\"David Fincher\",\"Writer\":\"Aaron Sorkin (screenplay), Ben Mezrich (book)\",\"Actors\":\"Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\",\"Plot\":\"Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\",\"Language\":\"English, French\",\"Country\":\"USA\",\"Awards\":\"Won 3 Oscars. Another 161 wins &amp; 162 nominations.\",\"Poster\":\"http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\",\"Metascore\":\"95\",\"imdbRating\":\"7.7\",\"imdbVotes\":\"478,258\",\"imdbID\":\"tt1285016\",\"Type\":\"movie\",\"Response\":\"True\"} Pull it as JSON or a dictionary. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import requests url = 'http://www.omdbapi.com/?t=social+network' r = requests . get ( url ) # Decode the JSON data into a dictionary: json_data json_data = r . json () print ( type ( json_data )) print ( '' ) # Print each key-value pair in json_data for k in json_data . keys (): print ( k + ': ' , json_data [ k ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 & lt ; class 'dict' & gt ; Response : True Rated : PG-13 Poster : http :// ia . media-imdb . com / images / M / MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw @@ . _V1_SX300 . jpg imdbID : tt1285016 Year : 2010 Metascore : 95 Language : English , French Country : USA Awards : Won 3 Oscars . Another 161 wins & amp ; 162 nominations . Plot : Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook , but is later sued by two brothers who claimed he stole their idea , and the co-founder who was later squeezed out of the business . Director : David Fincher imdbRating : 7 . 7 Actors : Jesse Eisenberg , Rooney Mara , Bryan Barter , Dustin Fitzsimons imdbVotes : 478 , 258 Released : 01 Oct 2010 Runtime : 120 min Genre : Biography , Drama Type : movie Title : The Social Network Writer : Aaron Sorkin ( screenplay ), Ben Mezrich ( book ) Search the Library of Congress. Pull a dictionary of dictionaries. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import requests url = 'http://chroniclingamerica.loc.gov/search/titles/results/?terms=new%20york&format=json' r = requests . get ( url ) # Decode the JSON data into a dictionary: json_data json_data = r . json () # Select the first element in the list json_data['items']: nyc_loc # dict of dict nyc_loc = json_data [ 'items' ][ 0 ] # Print each key-value pair in nyc_loc for k in nyc_loc . keys (): print ( k + ': ' , nyc_loc [ k ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 county: ['New York'] place_of_publication: New York oclc: 12928956 subject: ['New York (N.Y.)--Newspapers.', 'New York (State)--New York.--fast--(OCoLC)fst01204333'] alt_title: [] title: The New York thrice-a-week world. type: title edition: New York and Pennsylvania ed. id: /lccn/sn85047837/ note: ['Democrat.', 'Description based on: Vol. 36, no. 3,670 (Oct. 4, 1895).', 'The words \"New York thrice-a-week\" appear in title ornament.'] place: ['New York--New York--New York'] essay: [] start_year: 1890 end_year: 1999 publisher: Press Pub. Co. lccn: sn85047837 holding_type: ['Unspecified'] state: ['New York'] city: ['New York'] language: ['English'] country: New York title_normal: new york thrice-a-week world. url: http://chroniclingamerica.loc.gov/lccn/sn85047837.json frequency: Three times a week The Wikipedia API. Documentation . Dictionary of dictionary of dictionary. 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = 'https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles=pizza' r = requests . get ( url ) # Decode the JSON data into a dictionary: json_data json_data = r . json () # Print the Wikipedia page extract pizza_extract = json_data [ 'query' ][ 'pages' ][ '24768' ][ 'extract' ] print ( pizza_extract ) 1 2 3 4 &lt;p&gt;&lt;b&gt;Pizza&lt;/b&gt; is a flatbread generally topped with tomato sauce and cheese and baked in an oven. It is commonly topped with a selection of meats, vegetables and condiments. The term was first recorded in the 10th century, in a Latin manuscript from Gaeta in Central Italy. The modern pizza was invented in Naples, Italy, and the dish and its variants have since become popular in many areas of the world.&lt;/p&gt; &lt;p&gt;In 2009, upon Italy's request, Neapolitan pizza was safeguarded in the European Union as a Traditional Speciality Guaranteed dish. The Associazione Verace Pizza Napoletana (the True Neapolitan Pizza Association) is a non-profit organization founded in 1984 with headquarters in Naples. It promotes and protects the \"true Neapolitan pizza\".&lt;/p&gt; &lt;p&gt;Pizza is sold fresh or frozen, either whole or in portions, and is a common fast food item in Europe and North America. Various types of ovens are used to cook them and many varieties exist. Several similar dishes are prepared from ingredients commonly used in pizza preparation, such as calzone and stromboli.&lt;/p&gt; &lt;p&gt;&lt;/p&gt; The Twitter API and Authentification Twitter has many APIs: the main API, the REST API, Streaming APIs (private, public), Firehouse (expensive), etc. Field Guide . Consult the documentation to set an authentification key (available online). tweepy package The authentication looks like the following: Code: 1 2 3 4 5 6 7 8 9 10 11 12 # Import package import tweepy , json # Store OAuth authentication credentials in relevant variables access_token = \"---\" access_token_secret = \"---\" consumer_key = \"---\" consumer_secret = \"---\" # Pass OAuth details to tweepy's OAuth handler auth = tweepy . OAuthHandler ( consumer_key , consumer_secret ) auth . set_access_token ( access_token , access_token_secret ) Start streaming tweets Code: 1 2 3 4 5 6 7 8 9 # Initialize Stream listener l = MyStreamListener () # Create you Stream object with authentication stream = tweepy . Stream ( auth , l ) # Filter Twitter Streams to capture data by the keywords: stream . filter ( track = [ 'clinton' , 'trump' , 'sanders' , 'cruz' ]) Code of MyStreamListener() : Creates a file called tweets.txt, collects streaming tweets as .jsons and writes them to the file tweets.txt; once 100 tweets have been streamed, the listener closes the file and stops listening. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class MyStreamListener ( tweepy . StreamListener ): def __init__ ( self , api = None ): super ( MyStreamListener , self ) . __init__ () self . num_tweets = 0 self . file = open ( \"tweets.txt\" , \"w\" ) def on_status ( self , status ): tweet = status . _json self . file . write ( json . dumps ( tweet ) + ' \\n ' ) tweet_list . append ( status ) self . num_tweets += 1 if self . num_tweets < 100 : return True else : return False self . file . close () def on_error ( self , status ): print ( status ) Load and explore your Twitter data Code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Import package import json # String of path to file: tweets_data_path tweets_data_path = 'tweets.txt' # Initialize empty list to store tweets: tweets_data tweets_data = [] # Open connection to file tweets_file = open ( tweets_data_path , \"r\" ) # Read in tweets and store in list: tweets_data for line in tweets_file : tweet = json . loads ( line ) tweets_data . append ( tweet ) # Close connection to file tweets_file . close () # Print the keys of the first tweet dict print ( tweets_data [ 0 ] . keys ()) Send the Twitter data to a DataFrame Twitter data in a list of dictionaries tweets_data , where each dictionary corresponds to a single tweet. The text in a tweet t1 is stored as the value t1['text'] ; similarly, the language is stored in t1['lang'] . Code: 1 2 3 4 5 6 7 8 # Import package import pandas as pd # Build DataFrame of tweet texts and languages df = pd . DataFrame ( tweets_data , columns = [ 'text' , 'lang' ]) # Print head of DataFrame print ( df . head ()) Analyze the tweets (NLP, regex) A little bit of Twitter text analysis and plotting. Use the statistical data visualization library seaborn . Code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 # Import the regular expressions library import re # The function tells you whether the first argument (a word) occurs within the 2nd argument (a tweet) def word_in_text ( word , tweet ): word = word . lower () text = tweet . lower () match = re . search ( word , tweet ) if match : return True return False # Initialize list to store tweet counts [ clinton , trump , sanders , cruz ] = [ 0 , 0 , 0 , 0 ] # Iterate through df, counting the number of tweets in which # each candidate is mentioned for index , row in df . iterrows (): clinton += word_in_text ( 'clinton' , row [ 'text' ]) trump += word_in_text ( 'trump' , row [ 'text' ]) sanders += word_in_text ( 'sanders' , row [ 'text' ]) cruz += word_in_text ( 'cruz' , row [ 'text' ]) # Import packages import matplotlib.pyplot as plt import seaborn as sns # Set seaborn style sns . set ( color_codes = True ) # Create a list of labels:cd cd = [ 'clinton' , 'trump' , 'sanders' , 'cruz' ] # Plot histogram ax = sns . barplot ( cd , [ clinton , trump , sanders , cruz ]) ax . set ( ylabel = \"count\" ) plt . show () 1 2 from IPython.display import Image # for the following pictures... 1 Image ( 'tweets_figure.png' )","title":"Importing Data"},{"location":"Importing Data into Python/#numpy","text":"Numpy arrays are a standard for storing numerical data. Arrays are essential to other packages such as the scikit-learn , for machine learning. Import numpy and matplotlib (or invoke them with the %pylab magic command). 1 2 import numpy as np import matplotlib.pyplot as plt 1 2 3 4 # or... % pylab inline # no need for preceeding functions (methods) with np. or plt. 1 Populating the interactive namespace from numpy and matplotlib Import a csv file and assign the content to an array. 1 2 3 4 5 6 7 8 9 10 11 12 13 file = 'digits.csv' # Load the file as an array called digits digits = loadtxt ( file , delimiter = ',' ) # Print the datatype of digits print ( type ( digits )) print ( digits ) # Select a row im = digits [ 2 , 2 :] print ( im ) 1 2 3 4 5 6 7 8 &lt;class 'numpy.ndarray'&gt; [[ 1. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0.] [ 1. 0. 0. 0. 0. 0.] [ 2. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0.] [ 5. 0. 0. 0. 0. 0.]] [ 0. 0. 0. 0.] Import a txt file. The delimiter can be '\\t' , ',' , ';' , etc. Skip the first 90 rows. 1 2 3 4 5 6 7 file = 'digits_header.txt' # Load the data into array data data = loadtxt ( file , delimiter = ' ' , skiprows = 90 ) # Print data print ( data ) 1 2 3 4 5 6 7 8 9 10 [[ 3. 0.] [ 6. 0.] [ 4. 0.] [ 6. 0.] [ 2. 0.] [ 9. 0.] [ 1. 0.] [ 2. 0.] [ 0. 0.] [ 5. 0.]] Import a txt file, but only the last rows and first column. 1 2 3 4 data2 = loadtxt ( file , delimiter = ' ' , skiprows = 90 , usecols = [ 0 ]) # Print data print ( data2 ) 1 [ 3. 6. 4. 6. 2. 9. 1. 2. 0. 5.] Import a txt file as string. 1 2 3 4 5 6 7 file = 'seaslug.txt' # Import file: data data = loadtxt ( file , delimiter = ' ' , dtype = str ) # Print the first element of data print ( data [ 0 ]) 1 ['b\"b\\'Time\\'\"' 'b\"b\\'Percent\\'\"'] Import a txt file as float numbers. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 file = 'seaslug2.txt' # Import data as floats and skip the first row: data_float data_float = loadtxt ( file , delimiter = ' ' , dtype = float , skiprows = 1 ) # Print the 10th element of data_float print ( data_float [ 9 ]) # Plot a scatterplot of the data scatter ( data_float [:, 0 ], data_float [:, 1 ]) xlabel ( 'time (min.)' ) ylabel ( 'percentage of larvae' ) show () 1 [ 0. 0.357] Import a csv file. Format the data. 1 data = genfromtxt ( 'titanic.csv' , delimiter = ',' , names = True , dtype = None ) 1 2 # A structred array shape ( data ) 1 (891,) Extract a row, a column. 1 2 # to get the ith row, merely execute data[i] print ( data [ 0 : 10 ]) 1 2 3 4 5 6 7 8 9 10 [ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\") (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\") (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\") (4, 1, 1, b\" b'female'\", 35.0, 1, 0, b\" b'113803'\", 53.1, b\" b'C123'\", b\" b'S'\") (5, 0, 3, b\" b'male'\", 35.0, 0, 0, b\" b'373450'\", 8.05, b\" b''\", b\" b'S'\") (6, 0, 3, b\" b'male'\", nan, 0, 0, b\" b'330877'\", 8.4583, b\" b''\", b\" b'Q'\") (7, 0, 1, b\" b'male'\", 54.0, 0, 0, b\" b'17463'\", 51.8625, b\" b'E46'\", b\" b'S'\") (8, 0, 3, b\" b'male'\", 2.0, 3, 1, b\" b'349909'\", 21.075, b\" b''\", b\" b'S'\") (9, 1, 3, b\" b'female'\", 27.0, 0, 2, b\" b'347742'\", 11.1333, b\" b''\", b\" b'S'\") (10, 1, 2, b\" b'female'\", 14.0, 1, 0, b\" b'237736'\", 30.0708, b\" b''\", b\" b'C'\")] 1 2 # to get the column with name 'Fare', execute data['Fare'] print ( data [ 'Fare' ][ 0 : 10 ]) 1 2 [ 7.25 71.2833 7.925 53.1 8.05 8.4583 51.8625 21.075 11.1333 30.0708] Import a csv file. Format the data. 1 2 # default dtype is None data2 = recfromcsv ( 'titanic.csv' , delimiter = ',' , names = True , dtype = None ) 1 2 # Print out first three entries print ( data2 [: 3 ]) 1 2 3 [ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\") (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\") (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")]","title":"Numpy"},{"location":"Importing Data into Python/#pandas","text":"Two-dimensional labeled data structure(s) or data frame (DataFrame). Pythonic analog of R\u2019s dataframes. Columns can be of potentially different types. Excellent object for: Manipulate, slice, reshape, groupby, join, merge. Perform statistics. Work with time series data. Exploratory data analysis. Data wrangling. Data preprocessing. Building models. Visualization. There exists standards and best practices to use Pandas. 1 2 # Import pandas import pandas as pd Pandas is not part of %pylab . Import a file. 1 2 3 4 5 6 7 file = 'titanic.csv' # Read the file into a DataFrame: df df = pd . read_csv ( file ) # View the head of the DataFrame print ( df . head ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 Passengerid Survived Pclass Sex Age SibSp Parch \\ 0 1 0 3 b'male' 22.0 1 0 1 2 1 1 b'female' 38.0 1 0 2 3 1 3 b'female' 26.0 0 0 3 4 1 1 b'female' 35.0 1 0 4 5 0 3 b'male' 35.0 0 0 Ticket Fare Cabin Embarked 0 b'A/5 21171' 7.2500 b'' b'S' 1 b'PC 17599' 71.2833 b'C85' b'C' 2 b'STON/O2. 3101282' 7.9250 b'' b'S' 3 b'113803' 53.1000 b'C123' b'S' 4 b'373450' 8.0500 b'' b'S' Import another file; no header and some rows. 1 2 3 4 5 6 7 8 9 10 11 12 13 file = 'digits2.csv' # Read the first 5 rows of the file into a DataFrame: data data = pd . read_csv ( file , nrows = 5 , header = None ) # Print the datatype of data print ( type ( data )) # Build a numpy array from the DataFrame: data_array data_array = data . values # Print the datatype of data_array to the shell print ( type ( data_array )) 1 2 &lt;class 'pandas.core.frame.DataFrame'&gt; &lt;class 'numpy.ndarray'&gt; Import another file; replace the missing data (NA). 1 2 3 4 5 6 7 8 9 10 file = 'titanic_corrupt.csv' # Assign filename: file file = 'titanic_corrupt.csv' # Import file: data data = pd . read_csv ( file , sep = ';' , comment = '#' , na_values = [ 'Nothing' ]) # Print the head of the DataFrame print ( data . head ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 PassengerId Survived Pclass Sex Age SibSp Parch \\ 0 1 0 3 male 22.0 1 0 1 2 1 1 female 38.0 1 0 2 3 1 3 female 26.0 0 0 3 4 1 1 female 35.0 1 0 4 5 0 3 male 35.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7,25 NaN S 1 PC 17599 NaN NaN NaN 2 STON/O2. 3101282 7,925 NaN S 3 113803 53,1 C123 S 4 373450 8,05 NaN S Plot the Age variable in a histogram. 1 2 3 4 5 pd . DataFrame . hist ( data [[ 'Age' ]]) plt . xlabel ( 'Age (years)' ) plt . ylabel ( 'count' ) plt . show ()","title":"Pandas"},{"location":"Importing Data into Python/#importing-from-other-files","text":"With Pandas\u2026 and a bit of Numpy. Excel spreadsheets. MATLAB files. SAS files. Stata files. HDF5 files (large datasets, scientific, legal, etc.). Feather. Julia. Pickle files (binary). 1 2 3 4 import os wd = os . getcwd () os . listdir ( wd ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 ['.ipynb_checkpoints', 'a_movie.json', 'cars.csv', 'count.svg', 'CYratioCyt.png', 'CYratioCyt.svg', 'digits.csv', 'digits2.csv', 'digits_header.txt', 'disa10.png', 'disa10.svg', 'economic.csv', 'economic2.xls', 'Importing Data into Python 3.ipynb', 'importing_python_ch1_pdf_slides.pdf', 'importing_python_ch2_pdf_slides.pdf', 'importing_python_ch3_pdf_slides.pdf', 'importing_python_ch4_pdf_slides.pdf', 'importing_python_ch5_pdf_slides.pdf', 'intermediate_python_ch1_slides.pdf', 'intermediate_python_ch2_slides.pdf', 'intermediate_python_ch3_slides.pdf', 'intermediate_python_ch4_slides.pdf', 'intermediate_python_ch5_slides.pdf', 'intro_python_ch1_slides.pdf', 'intro_python_ch2_slides.pdf', 'intro_python_ch3_slides.pdf', 'intro_python_ch4_slides.pdf', 'moby_dick.txt', 'new1.py', 'p.png', 'PRIO_bd3.0.xls', 'Python 3.ipynb', 'Python3.py', 'sales.sas7bdat', 'save.p', 'seaslug.txt', 'seaslug2.txt', 'strain.png', 'strain.svg', 'Thumbs.db', 'titanic.csv', 'titanic_corrupt.csv', 'tweets_figure.png', 'tweets_figure.svg', 'winequality-red.csv'] Pickled files There are a number of datatypes that cannot be saved easily to flat files, such as lists and dictionaries. If you want your files to be human readable, you may want to save them as text files in a clever manner (JSONs, which you will see in a later chapter, are appropriate for Python dictionaries). If, however, you merely want to be able to import them into Python, you can serialize them. All this means is converting the object into a sequence of bytes, or bytestream. Import it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import pickle # Save a dictionary into a pickle file. fav = { 'Airline' : '8' , 'Aug' : '85' , 'June' : '69.4' , 'Mar' : '84.4' } pickle . dump ( fav , open ( \"save.p\" , \"wb\" )) # save.p # Open pickle file and load data: d with open ( 'save.p' , 'rb' ) as file : d = pickle . load ( file ) # Print d print ( d ) # Print datatype of d print ( type ( d )) 1 2 {'Aug': '85', 'Airline': '8', 'Mar': '84.4', 'June': '69.4'} &lt;class 'dict'&gt; Excel files 1 2 3 4 5 6 7 file = 'PRIO_bd3.0.xls' # Load spreadsheet: xl xl = pd . ExcelFile ( file ) # Print sheet names print ( xl . sheet_names ) 1 ['bdonly'] Parse the sheets. By name or by number (first, second, \u2026). 1 df1 = xl . parse ( 'bdonly' ) 1 df2 = xl . parse ( 0 ) Options: parse the first sheet by index, skip the first row of data, then name the columns Country and AAM due to War (2002) . 1 df2 = xl . parse ( 0 , parse_cols = [ 0 ], skiprows = [ 0 ], names = [ 'Country' , 'AAM due to War (2002)' ]) Options: parse the second sheet, parse only the first column, skip the first row and rename the column Country . 1 df2 = xl . parse ( 1 , parse_cols = [ 0 ], skiprows = [ 0 ], names = [ 'Country' ]) Print the head of the DataFrame . 1 print ( df1 . head ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 id year bdeadlow bdeadhig bdeadbes annualdata source bdversion \\ 0 1 1946 1000 9999 1000 2 1 3 1 1 1952 450 3000 -999 2 1 3 2 1 1967 25 999 82 2 1 3 3 2 1946 25 999 -999 0 0 3 4 2 1947 25 999 -999 0 0 3 location sidea ... epend ependdate ependprec gwnoa gwnoa2nd \\ 0 Bolivia Bolivia ... 1 1946-07-21 -99.0 145 NaN 1 Bolivia Bolivia ... 1 1952-04-12 -99.0 145 NaN 2 Bolivia Bolivia ... 1 1967-10-16 -99.0 145 NaN 3 Cambodia France ... 0 NaT NaN 220 NaN 4 Cambodia France ... 0 NaT NaN 220 NaN gwnob gwnob2nd gwnoloc region version 0 NaN NaN 145 5 2009-4 1 NaN NaN 145 5 2009-4 2 NaN NaN 145 5 2009-4 3 NaN NaN 811 3 2009-4 4 NaN NaN 811 3 2009-4 [5 rows x 32 columns] We process images since we cheat a little. Many packages are not installed. We are not be able to import some data. Images will then present the final results. 1 2 from IPython.display import Image # for the following pictures... SAS files Advanced analytics Multivariate analysis Business intelligence Data management Predictive analytics Standard for computational analysis Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Import sas7bdat package from sas7bdat import SAS7BDAT # Save file to a DataFrame: df_sas with SAS7BDAT ( 'sales.sas7bdat' ) as file : df_sas = file . to_data_frame () # Print head of DataFrame print ( df_sas . head ()) # Plot histogram of DataFrame features pd . DataFrame . hist ( df_sas [[ 'P' ]]) plt . ylabel ( 'count' ) plt . show () The data are adapted from the website of the undergraduate text book Principles of Economics by Hill, Griffiths and Lim. The chart would be: 1 Image ( 'p.png' ) Stata files The data consist of disease extent for several diseases in various countries (more information can be found . 1 2 3 4 5 6 7 8 # Import pandas import pandas as pd # Load Stata file into a pandas DataFrame: df df = pd . read_stata ( 'disarea.dta' ) # Print the head of the DataFrame df print ( df . head ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 wbcode country disa1 disa2 disa3 disa4 disa5 disa6 \\ 0 AFG Afghanistan 0.00 0.00 0.76 0.73 0.0 0.00 1 AGO Angola 0.32 0.02 0.56 0.00 0.0 0.00 2 ALB Albania 0.00 0.00 0.02 0.00 0.0 0.00 3 ARE United Arab Emirates 0.00 0.00 0.00 0.00 0.0 0.00 4 ARG Argentina 0.00 0.24 0.24 0.00 0.0 0.23 disa7 disa8 ... disa16 disa17 disa18 disa19 disa20 disa21 \\ 0 0.00 0.0 ... 0.0 0.0 0.0 0.00 0.00 0.0 1 0.56 0.0 ... 0.0 0.4 0.0 0.61 0.00 0.0 2 0.00 0.0 ... 0.0 0.0 0.0 0.00 0.00 0.0 3 0.00 0.0 ... 0.0 0.0 0.0 0.00 0.00 0.0 4 0.00 0.0 ... 0.0 0.0 0.0 0.00 0.05 0.0 disa22 disa23 disa24 disa25 0 0.00 0.02 0.00 0.00 1 0.99 0.98 0.61 0.00 2 0.00 0.00 0.00 0.16 3 0.00 0.00 0.00 0.00 4 0.00 0.01 0.00 0.11 [5 rows x 27 columns] Plot histogram of one column of the DataFrame . 1 2 3 4 5 pd . DataFrame . hist ( df [[ 'disa10' ]]) plt . xlabel ( 'Extent of disease' ) plt . ylabel ( 'Number of coutries' ) plt . show () HDF5 files Standard for storing large quantities of numerical data. Datasets can be hundreds of gigabytes or terabytes. HDF5 can scale to exabytes. Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 # Import packages import numpy as np import h5py # Assign filename: file file = 'LIGO_data.hdf5' # Load file: data data = h5py . File ( file , 'r' ) # Print the datatype of the loaded file print ( type ( data )) # Print the keys of the file for key in data . keys (): print ( key ) # Get the HDF5 group: group group = data [ 'strain' ] # Check out keys of group for key in group . keys (): print ( key ) # Set variable equal to time series data: strain strain = data [ 'strain' ][ 'Strain' ] . value # Set number of time points to sample: num_samples num_samples = 10000 # Set time vector time = np . arange ( 0 , 1 , 1 / num_samples ) # Plot data plt . plot ( time , strain [: num_samples ]) plt . xlabel ( 'GPS Time (s)' ) plt . ylabel ( 'strain' ) plt . show () You can find the LIGO data plus loads of documentation and tutorials on Signal Processing with the data. 1 Image ( 'strain.png' ) MATLAB \u201cMatrix Laboratory\u201d. Industry standard in engineering and science. Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Import package import scipy.io # Load MATLAB file: mat mat = scipy . io . loadmat ( 'albeck_gene_expression.mat' ) # Print the datatype type of mat print ( type ( mat )) # Print the keys of the MATLAB dictionary print ( mat . keys ()) # Print the type of the value corresponding to the key 'CYratioCyt' print ( type ( mat [ 'CYratioCyt' ])) # Print the shape of the value corresponding to the key 'CYratioCyt' print ( np . shape ( mat [ 'CYratioCyt' ])) # Subset the array and plot it data = mat [ 'CYratioCyt' ][ 25 , 5 :] fig = plt . figure () plt . plot ( data ) plt . xlabel ( 'time (min.)' ) plt . ylabel ( 'normalized fluorescence (measure of expression)' ) plt . show () This file contains gene expression data from the Albeck Lab at UC Davis. You can find the data and some great documentation. 1 Image ( 'CYratioCyt.png' )","title":"Importing from Other Files"},{"location":"Importing Data into Python/#working-with-relational-databases","text":"Relational Database Management System PostgreSQL. MySQL. SQLite. Code (instead of importing the package): 1 2 3 4 5 # Import necessary module from sqlalchemy import create_engine # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) 'sqlite:///Northwind.sqlite' is called the connection string to the SQLite database. The Chinook database contains information about a semi-fictional digital media store in which media data is real and customer, employee and sales data has been manually created. Code (instead of importing the package): 1 2 3 4 5 # Save the table names to a list: table_names table_names = engine . table_names () # Print the table names to the shell print ( table_names ) Query the DB The final ; is facultative. Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # Open engine connection: con con = engine . connect () # Perform query: rs rs = con . execute ( 'SELECT * FROM Album' ) # Save results of the query to DataFrame: df df = pd . DataFrame ( rs . fetchall ()) # Close connection con . close () # Print head of DataFrame df print ( df . head ()) Customize queries Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # becomes facultative with many queries # Open engine in context manager # Perform query and save results to DataFrame: df with engine . connect () as con : rs = con . execute ( 'SELECT LastName, Title FROM Employee' ) df = pd . DataFrame ( rs . fetchmany ( size = 3 )) df . columns = rs . keys () # set the DataFrame's column names to the corresponding names of the table columns # Print the length of the DataFrame df print ( len ( df )) # Print the head of the DataFrame df print ( df . head ()) Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # becomes facultative with many queries # Open engine in context manager # Perform query and save results to DataFrame: df with engine . connect () as con : rs = con . execute ( \"SELECT * FROM Employee WHERE EmployeeId >= 6\" ) df = pd . DataFrame ( rs . fetchall ()) df . columns = rs . keys () # Print the head of the DataFrame df print ( df . head ()) Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # Open engine in context manager with engine . connect () as con : rs = con . execute ( 'SELECT * FROM Employee ORDER BY BirthDate' ) df = pd . DataFrame ( rs . fetchall ()) # Set the DataFrame's column names df . columns = rs . keys () # Print head of DataFrame print ( df . head ()) Query the DB the Pandas way Simpler code (instead of importing the package)!!! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Import packages from sqlalchemy import create_engine import pandas as pd # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # Execute query and store records in DataFrame: df df = pd . read_sql_query ( \"SELECT * FROM Album\" , engine ) # Print head of DataFrame print ( df . head ()) # Open engine in context manager # Perform query and save results to DataFrame: df1 with engine . connect () as con : rs = con . execute ( \"SELECT * FROM Album\" ) df1 = pd . DataFrame ( rs . fetchall ()) df1 . columns = rs . keys () # Confirm that both methods yield the same result: does df = df1 ? print ( df . equals ( df1 )) Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 # Import packages from sqlalchemy import create_engine import pandas as pd # Create engine: engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # Execute query and store records in DataFrame: df df = pd . read_sql_query ( \"SELECT * FROM Employee WHERE EmployeeId >= 6 ORDER BY BirthDate\" , engine ) # Print head of DataFrame print ( df . head ()) INNER JOIN Code (instead of importing the package): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import pandas as pd from sqlalchemy import create_engine engine = create_engine ( 'sqlite:///Chinook.sqlite' ) # Open engine in context manager # Perform query and save results to DataFrame: df with engine . connect () as con : rs = con . execute ( \"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\" ) df = pd . DataFrame ( rs . fetchall ()) df . columns = rs . keys () # Print head of DataFrame df print ( df . head ()) Alternative code: 1 2 3 4 df = pd . read_sql_query ( \"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\" , engine ) # Print head of DataFrame df print ( df . head ()) Code (instead of importing the package): 1 2 3 4 5 # Execute query and store records in DataFrame: df df = pd . read_sql_query ( \"SELECT * FROM PlaylistTrack INNER JOIN Track on PlaylistTrack.TrackId = Track.TrackId WHERE Milliseconds < 250000\" , engine ) # Print head of DataFrame print ( df . head ())","title":"Working with Relational Databases"},{"location":"Importing Data into Python/#importing-flat-files-from-the-web-web-scraping","text":"Import and locally save datasets from the web. Load datasets into Pandas DataFrame . Make HTTP requests (GET requests). Scrape web data such as HTML. Parse HTML into useful data (BeautifulSoup). Use the urllib and requests packages. Using the urllib package on csv files Import the package. 1 2 3 4 5 6 7 8 9 10 11 12 13 from urllib.request import urlretrieve # import pandas as pd # Assign url of file: url url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv' # Save file locally urlretrieve ( url , 'winequality-red.csv' ) # Read file into a DataFrame and print its head df = pd . read_csv ( 'winequality-red.csv' , sep = ';' ) print ( df . head ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 fixed acidity volatile acidity citric acid residual sugar chlorides \\ 0 7.4 0.70 0.00 1.9 0.076 1 7.8 0.88 0.00 2.6 0.098 2 7.8 0.76 0.04 2.3 0.092 3 11.2 0.28 0.56 1.9 0.075 4 7.4 0.70 0.00 1.9 0.076 free sulfur dioxide total sulfur dioxide density pH sulphates \\ 0 11.0 34.0 0.9978 3.51 0.56 1 25.0 67.0 0.9968 3.20 0.68 2 15.0 54.0 0.9970 3.26 0.65 3 17.0 60.0 0.9980 3.16 0.58 4 11.0 34.0 0.9978 3.51 0.56 alcohol quality 0 9.4 5 1 9.8 5 2 9.8 5 3 9.8 6 4 9.4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # import matplotlib.pyplot as plt # import pandas as pd # Assign url of file: url url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv' # Read file into a DataFrame: df df = pd . read_csv ( url , sep = ';' ) # Print the head of the DataFrame print ( df . head ()) # Plot first column of df pd . DataFrame . hist ( df . ix [:, 0 : 1 ]) plt . xlabel ( 'fixed acidity (g(tartaric acid)/dm$^3$)' ) plt . ylabel ( 'count' ) plt . show () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 fixed acidity volatile acidity citric acid residual sugar chlorides \\ 0 7.4 0.70 0.00 1.9 0.076 1 7.8 0.88 0.00 2.6 0.098 2 7.8 0.76 0.04 2.3 0.092 3 11.2 0.28 0.56 1.9 0.075 4 7.4 0.70 0.00 1.9 0.076 free sulfur dioxide total sulfur dioxide density pH sulphates \\ 0 11.0 34.0 0.9978 3.51 0.56 1 25.0 67.0 0.9968 3.20 0.68 2 15.0 54.0 0.9970 3.26 0.65 3 17.0 60.0 0.9980 3.16 0.58 4 11.0 34.0 0.9978 3.51 0.56 alcohol quality 0 9.4 5 1 9.8 5 2 9.8 5 3 9.8 6 4 9.4 5 Using the urllib package on Excel files 1 2 3 4 5 6 7 8 9 10 11 12 13 # import pandas as pd # Assign url of file: url url = 'http://s3.amazonaws.com/assets.datacamp.com/course/importing_data_into_r/latitude.xls' # Read in all sheets of Excel file: xl xl = pd . read_excel ( url , sheetname = None ) # Print the sheetnames (keys) to the shell !!! print ( xl . keys ()) # Print the head of the first sheet (using its name, NOT its index) print ( xl [ '1700' ] . head ()) 1 2 3 4 5 6 7 dict_keys(['1700', '1900']) country 1700 0 Afghanistan 34.565000 1 Akrotiri and Dhekelia 34.616667 2 Albania 41.312000 3 Algeria 36.720000 4 American Samoa -14.307000 HTTP requests to import files from the web requests is one of the most downloaded Python packages. requests works with urllib . Import the package. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from urllib.request import urlopen , Request # Specify the url url = \"http://www.datacamp.com/teach/documentation\" # This packages the request: request request = Request ( url ) # Send the request and catches the response: response response = urlopen ( request ) # Print the datatype of response print ( type ( response )) # Be polite and close the response! response . close () 1 &lt;class 'http.client.HTTPResponse'&gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from urllib.request import urlopen , Request url = \"http://docs.datacamp.com/teach/\" request = Request ( url ) response = urlopen ( request ) # Extract the response: html html = response . read () # Print the html print ( html ) # Be polite and close the response! response . close () 1 b ' & lt ; ! DOCTYPE html & gt ; \\ n & lt ; link rel = \"shortcut icon\" href = \"images/favicon.ico\" /& gt ; \\ n & lt ; html & gt ; \\ n \\ n & lt ; head & gt ; \\ n & lt ; meta charset = \"utf-8\" & gt ; \\ n & lt ; meta http - equiv = \"X-UA-Compatible\" content = \"IE=edge\" & gt ; \\ n & lt ; meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" & gt ; \\ n \\ n & lt ; title & gt ; Home & lt ; / title & gt ; \\ n & lt ; meta name = \"description\" content = \"All Documentation on Course Creation\" & gt ; \\ n \\ n & lt ; link rel = \"stylesheet\" href = \"/teach/css/main.css\" & gt ; \\ n & lt ; link rel = \"canonical\" href = \"/teach/\" & gt ; \\ n & lt ; link rel = \"alternate\" type = \"application/rss+xml\" title = \"DataCamp Teach Documentation\" href = \"/teach/feed.xml\" /& gt ; \\ n & lt ; / head & gt ; \\ n \\ n \\ n & lt ; body & gt ; \\ n \\ n & lt ; header class = \"site-header\" & gt ; \\ n \\ n & lt ; div class = \"wrapper\" & gt ; \\ n \\ n & lt ; a class = \"site-title\" href = \"/teach/\" & gt ; DataCamp Teach Documentation & lt ; / a & gt ; \\ n \\ n & lt ; / div & gt ; \\ n \\ n & lt ; / header & gt ; \\ n \\ n \\ n & lt ; div class = \"page-content\" & gt ; \\ n & lt ; div class = \"wrapper\" & gt ; \\ n & lt ; p & gt ; The Teach Documentation has been moved to & lt ; a href = \"https://www.datacamp.com/teach/documentation\" & gt ; https : //www.datacamp.com/teach/documentation&lt;/a&gt;!&lt;/p&gt;\\n\\n&lt;!-- Everybody can teach on DataCamp. The resources on this website explain all the steps to build your own course on DataCamp\\'s interactive data science platform.\\n\\nInterested in partnering with DataCamp? Head over to the [Course Material](/teach/course-material.html) page to get an idea of the requirements to build your own interactive course together with DataCamp!\\n\\n## Table of Contents\\n\\n- [Course Material](/teach/course-material.html) - Content required to build a DataCamp course.\\n- [Video Lectures](/teach/video-lectures.html) - Details on video recording and editing.\\n- [DataCamp Teach](https://www.datacamp.com/teach) - Use the DataCamp Teach website to create DataCamp courses (preferred).\\n- [datacamp R Package](https://github.com/datacamp/datacamp/wiki) - Use R Package to create DataCamp courses (legacy).\\n- [Code DataCamp Exercises](/teach/code-datacamp-exercises.html)\\n- [SCT Design (R)](https://github.com/datacamp/testwhat/wiki)\\n- [SCT Design (Python)](https://github.com/datacamp/pythonwhat/wiki)\\n- [Style Guide](/teach/style-guide.html) --&gt;\\n\\n\\n &lt;/div&gt;\\n &lt;/div&gt;\\n\\n \\n\\n &lt;/body&gt;\\n\\n&lt;/html&gt;\\n' Using requests 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import requests url = \"http://docs.datacamp.com/teach/\" r = requests . get ( url ) text = r . text # Print part of the html (split the paragraphs) instead of all with print(text) head = text . split ( ' \\n\\n ' ) print ( head [ 0 ]) print ( '' ) print ( head [ 1 ]) print ( '' ) print ( head [ 2 ]) print ( '' ) print ( head [ 3 ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;!DOCTYPE html&gt; &lt;link rel=\"shortcut icon\" href=\"images/favicon.ico\" /&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;title&gt;Home&lt;/title&gt; &lt;meta name=\"description\" content=\"All Documentation on Course Creation\"&gt; &lt;link rel=\"stylesheet\" href=\"/teach/css/main.css\"&gt; &lt;link rel=\"canonical\" href=\"/teach/\"&gt; &lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"DataCamp Teach Documentation\" href=\"/teach/feed.xml\" /&gt; &lt;/head&gt; Scraping the web Scrape unstructured data. Scrape structured data, parse it and extract the data from HTML using the BeautifulSoup package. Import the packages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import requests from bs4 import BeautifulSoup url = 'https://www.python.org/~guido/' r = requests . get ( url ) html_doc = r . text # Create a BeautifulSoup object from the HTML: soup soup = BeautifulSoup ( html_doc , 'lxml' ) # Prettify the BeautifulSoup object: pretty_soup pretty_soup = soup . prettify () # Print the response print ( type ( pretty_soup )) # Print part of the html (split the text), not all with print(pretty_soup) head = pretty_soup . split ( '</h3>' ) print ( head [ 0 ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 & lt ; class 'str' & gt ; & lt ; html & gt ; & lt ; head & gt ; & lt ; title & gt ; Guido ' s Personal Home Page & lt ;/ title & gt ; & lt ;/ head & gt ; & lt ; body bgcolor = \"#FFFFFF\" text = \"#000000\" & gt ; & lt ; h1 & gt ; & lt ; a href = \"pics.html\" & gt ; & lt ; img border = \"0\" src = \"images/IMG_2192.jpg\" /& gt ; & lt ;/ a & gt ; Guido van Rossum - Personal Home Page & lt ;/ h1 & gt ; & lt ; p & gt ; & lt ; a href = \"http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\" & gt ; & lt ; i & gt ; \"Gawky and proud of it.\" & lt ;/ i & gt ; & lt ;/ a & gt ; & lt ;/ p & gt ; & lt ; h3 & gt ; & lt ; a href = \"http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\" & gt ; Who I Am & lt ;/ a & gt ; Other operations with BeautifulSoup. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import requests from bs4 import BeautifulSoup url = 'https://www.python.org/~guido/' r = requests . get ( url ) html_doc = r . text # Create a BeautifulSoup object from the HTML: soup soup = BeautifulSoup ( html_doc , 'lxml' ) # Get the title of Guido's webpage: guido_title guido_title = soup . title # attribute # Print the title of Guido's webpage to the shell print ( guido_title ) # Get Guido's text: guido_text guido_text = soup . get_text () # method # Print Guido's text to the shell print ( guido_text ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 &lt ; title&gt ; Guido 's Personal Home Page&lt;/title&gt; Guido's Personal Home Page Guido van Rossum - Personal Home Page \"Gawky and proud of it.\" Who I Am I am the author of the Python programming language . See also my resume and my publications list , a brief bio , assorted writings , presentations and interviews ( all about Python ), some pictures of me , my new blog , and my old blog on Artima . com . I am @gvanrossum on Twitter . I also have a G + profile . In January 2013 I joined Dropbox . I work on various Dropbox products and have 50 % for my Python work, no strings attached. Previously , I have worked for Google , Elemental Security , Zope Corporation , BeOpen . com , CNRI , CWI , and SARA . ( See my resume .) I created Python while at CWI . How to Reach Me You can send email for me to guido ( at ) python . org . I read everything sent there , but if you ask me a question about using Python , it's likely that I won't have time to answer it , and will instead refer you to help ( at ) python . org , comp . lang . python or StackOverflow . If you need to talk to me on the phone or send me something by snail mail , send me an email and I 'll gladly email you instructions on how to reach me. My Name My name often poses difficulties for Americans. Pronunciation: in Dutch, the \"G\" in Guido is a hard G, pronounced roughly like the \"ch\" in Scottish \"loch\". (Listen to the sound clip.) However, if you're American , you may also pronounce it as the Italian \"Guido\" . I 'm not too worried about the associations with mob assassins that some people have. :-) Spelling: my last name is two words, and I'd like keep it that way , the spelling on some of my credit cards notwithstanding . Dutch spelling rules dictate that when used in combination with my first name , \"van\" is not capitalized : \"Guido van Rossum\" . But when my last name is used alone to refer to me , it is capitalized , for example : \"As usual, Van Rossum was right.\" Alphabetization : in America , I show up in the alphabet under \"V\" . But in Europe , I show up under \"R\" . And some of my friends put me under \"G\" in their address book ... More Hyperlinks Here 's a collection of essays relating to Python that I've written , including the foreword I wrote for Mark Lutz ' book \"Programming Python\". I own the official Python license. The Audio File Formats FAQ I was the original creator and maintainer of the Audio File Formats FAQ. It is now maintained by Chris Bagwell at http://www.cnpbagwell.com/audio-faq. And here is a link to SOX, to which I contributed some early code. \"On the Internet, nobody knows you're a dog . \" More. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import requests from bs4 import BeautifulSoup url = 'https://www.python.org/~guido/' r = requests . get ( url ) html_doc = r . text # create a BeautifulSoup object from the HTML: soup soup = BeautifulSoup ( html_doc , 'lxml' ) # Print the title of Guido's webpage print ( soup . title ) # Find all 'a' tags (which define hyperlinks): a_tags a_tags = soup . find_all ( 'a' ) # for <a>, hyperlinks # Print the URLs to the shell for link in a_tags : print ( link . get ( 'href' )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &lt;title&gt;Guido's Personal Home Page&lt;/title&gt; pics.html http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg http://www.python.org Resume.html Publications.html bio.html http://legacy.python.org/doc/essays/ http://legacy.python.org/doc/essays/ppt/ interviews.html pics.html http://neopythonic.blogspot.com http://www.artima.com/weblogs/index.jsp?blogger=12088 https://twitter.com/gvanrossum https://plus.google.com/u/0/115212051037621986145/posts http://www.dropbox.com Resume.html http://groups.google.com/groups?q=comp.lang.python http://stackoverflow.com guido.au http://legacy.python.org/doc/essays/ images/license.jpg http://www.cnpbagwell.com/audio-faq http://sox.sourceforge.net/ images/internetdog.gif","title":"Importing Flat Files from the Web (Web Scraping)"},{"location":"Importing Data into Python/#introduction-to-apis-and-jsons","text":"API or Application Programming Interface are protocols and routines providing access to websites and web apps like OMDb, Wikipedia, Uber, Uber Developers, BGG, ImDB, Facebook, Instagram, and Twitter. Most of data coming from APIS are JSON files. Import the json package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import json # Load JSON: json_data with open ( 'a_movie.json' , 'r' ) as json_file : json_data = json . load ( json_file ) print ( type ( json_data )) print ( json_data [ 'Title' ]) print ( json_data [ 'Year' ]) print ( '' ) # Print each key-value pair in json_data for k in json_data . keys (): print ( k + ': ' , json_data [ k ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 & lt ; class 'dict' & gt ; The Social Network 2010 Response : True Rated : PG-13 Poster : http :// ia . media-imdb . com / images / M / MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw @@ . _V1_SX300 . jpg imdbID : tt1285016 Year : 2010 Awards : Won 3 Oscars . Another 161 wins & amp ; 162 nominations . Metascore : 95 Language : English , French Country : USA Plot : Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook , but is later sued by two brothers who claimed he stole their idea , and the co-founder who was later squeezed out of the business . imdbRating : 7 . 7 Actors : Jesse Eisenberg , Rooney Mara , Bryan Barter , Dustin Fitzsimons Title : The Social Network imdbVotes : 478 , 258 Released : 01 Oct 2010 Runtime : 120 min Genre : Biography , Drama Type : movie Director : David Fincher Writer : Aaron Sorkin ( screenplay ), Ben Mezrich ( book ) The requests package again Pull some movie data down from the Open Movie Database (OMDB) using their API. Pull it as text. 1 2 3 4 5 6 7 8 9 10 11 import requests url = 'http://www.omdbapi.com/?t=social+network' r = requests . get ( url ) print ( type ( r )) print ( '' ) # Print the text of the response print ( r . text ) 1 2 3 &lt;class 'requests.models.Response'&gt; {\"Title\":\"The Social Network\",\"Year\":\"2010\",\"Rated\":\"PG-13\",\"Released\":\"01 Oct 2010\",\"Runtime\":\"120 min\",\"Genre\":\"Biography, Drama\",\"Director\":\"David Fincher\",\"Writer\":\"Aaron Sorkin (screenplay), Ben Mezrich (book)\",\"Actors\":\"Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\",\"Plot\":\"Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\",\"Language\":\"English, French\",\"Country\":\"USA\",\"Awards\":\"Won 3 Oscars. Another 161 wins &amp; 162 nominations.\",\"Poster\":\"http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\",\"Metascore\":\"95\",\"imdbRating\":\"7.7\",\"imdbVotes\":\"478,258\",\"imdbID\":\"tt1285016\",\"Type\":\"movie\",\"Response\":\"True\"} Pull it as JSON or a dictionary. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import requests url = 'http://www.omdbapi.com/?t=social+network' r = requests . get ( url ) # Decode the JSON data into a dictionary: json_data json_data = r . json () print ( type ( json_data )) print ( '' ) # Print each key-value pair in json_data for k in json_data . keys (): print ( k + ': ' , json_data [ k ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 & lt ; class 'dict' & gt ; Response : True Rated : PG-13 Poster : http :// ia . media-imdb . com / images / M / MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw @@ . _V1_SX300 . jpg imdbID : tt1285016 Year : 2010 Metascore : 95 Language : English , French Country : USA Awards : Won 3 Oscars . Another 161 wins & amp ; 162 nominations . Plot : Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook , but is later sued by two brothers who claimed he stole their idea , and the co-founder who was later squeezed out of the business . Director : David Fincher imdbRating : 7 . 7 Actors : Jesse Eisenberg , Rooney Mara , Bryan Barter , Dustin Fitzsimons imdbVotes : 478 , 258 Released : 01 Oct 2010 Runtime : 120 min Genre : Biography , Drama Type : movie Title : The Social Network Writer : Aaron Sorkin ( screenplay ), Ben Mezrich ( book ) Search the Library of Congress. Pull a dictionary of dictionaries. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import requests url = 'http://chroniclingamerica.loc.gov/search/titles/results/?terms=new%20york&format=json' r = requests . get ( url ) # Decode the JSON data into a dictionary: json_data json_data = r . json () # Select the first element in the list json_data['items']: nyc_loc # dict of dict nyc_loc = json_data [ 'items' ][ 0 ] # Print each key-value pair in nyc_loc for k in nyc_loc . keys (): print ( k + ': ' , nyc_loc [ k ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 county: ['New York'] place_of_publication: New York oclc: 12928956 subject: ['New York (N.Y.)--Newspapers.', 'New York (State)--New York.--fast--(OCoLC)fst01204333'] alt_title: [] title: The New York thrice-a-week world. type: title edition: New York and Pennsylvania ed. id: /lccn/sn85047837/ note: ['Democrat.', 'Description based on: Vol. 36, no. 3,670 (Oct. 4, 1895).', 'The words \"New York thrice-a-week\" appear in title ornament.'] place: ['New York--New York--New York'] essay: [] start_year: 1890 end_year: 1999 publisher: Press Pub. Co. lccn: sn85047837 holding_type: ['Unspecified'] state: ['New York'] city: ['New York'] language: ['English'] country: New York title_normal: new york thrice-a-week world. url: http://chroniclingamerica.loc.gov/lccn/sn85047837.json frequency: Three times a week The Wikipedia API. Documentation . Dictionary of dictionary of dictionary. 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = 'https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles=pizza' r = requests . get ( url ) # Decode the JSON data into a dictionary: json_data json_data = r . json () # Print the Wikipedia page extract pizza_extract = json_data [ 'query' ][ 'pages' ][ '24768' ][ 'extract' ] print ( pizza_extract ) 1 2 3 4 &lt;p&gt;&lt;b&gt;Pizza&lt;/b&gt; is a flatbread generally topped with tomato sauce and cheese and baked in an oven. It is commonly topped with a selection of meats, vegetables and condiments. The term was first recorded in the 10th century, in a Latin manuscript from Gaeta in Central Italy. The modern pizza was invented in Naples, Italy, and the dish and its variants have since become popular in many areas of the world.&lt;/p&gt; &lt;p&gt;In 2009, upon Italy's request, Neapolitan pizza was safeguarded in the European Union as a Traditional Speciality Guaranteed dish. The Associazione Verace Pizza Napoletana (the True Neapolitan Pizza Association) is a non-profit organization founded in 1984 with headquarters in Naples. It promotes and protects the \"true Neapolitan pizza\".&lt;/p&gt; &lt;p&gt;Pizza is sold fresh or frozen, either whole or in portions, and is a common fast food item in Europe and North America. Various types of ovens are used to cook them and many varieties exist. Several similar dishes are prepared from ingredients commonly used in pizza preparation, such as calzone and stromboli.&lt;/p&gt; &lt;p&gt;&lt;/p&gt; The Twitter API and Authentification Twitter has many APIs: the main API, the REST API, Streaming APIs (private, public), Firehouse (expensive), etc. Field Guide . Consult the documentation to set an authentification key (available online). tweepy package The authentication looks like the following: Code: 1 2 3 4 5 6 7 8 9 10 11 12 # Import package import tweepy , json # Store OAuth authentication credentials in relevant variables access_token = \"---\" access_token_secret = \"---\" consumer_key = \"---\" consumer_secret = \"---\" # Pass OAuth details to tweepy's OAuth handler auth = tweepy . OAuthHandler ( consumer_key , consumer_secret ) auth . set_access_token ( access_token , access_token_secret ) Start streaming tweets Code: 1 2 3 4 5 6 7 8 9 # Initialize Stream listener l = MyStreamListener () # Create you Stream object with authentication stream = tweepy . Stream ( auth , l ) # Filter Twitter Streams to capture data by the keywords: stream . filter ( track = [ 'clinton' , 'trump' , 'sanders' , 'cruz' ]) Code of MyStreamListener() : Creates a file called tweets.txt, collects streaming tweets as .jsons and writes them to the file tweets.txt; once 100 tweets have been streamed, the listener closes the file and stops listening. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class MyStreamListener ( tweepy . StreamListener ): def __init__ ( self , api = None ): super ( MyStreamListener , self ) . __init__ () self . num_tweets = 0 self . file = open ( \"tweets.txt\" , \"w\" ) def on_status ( self , status ): tweet = status . _json self . file . write ( json . dumps ( tweet ) + ' \\n ' ) tweet_list . append ( status ) self . num_tweets += 1 if self . num_tweets < 100 : return True else : return False self . file . close () def on_error ( self , status ): print ( status ) Load and explore your Twitter data Code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Import package import json # String of path to file: tweets_data_path tweets_data_path = 'tweets.txt' # Initialize empty list to store tweets: tweets_data tweets_data = [] # Open connection to file tweets_file = open ( tweets_data_path , \"r\" ) # Read in tweets and store in list: tweets_data for line in tweets_file : tweet = json . loads ( line ) tweets_data . append ( tweet ) # Close connection to file tweets_file . close () # Print the keys of the first tweet dict print ( tweets_data [ 0 ] . keys ()) Send the Twitter data to a DataFrame Twitter data in a list of dictionaries tweets_data , where each dictionary corresponds to a single tweet. The text in a tweet t1 is stored as the value t1['text'] ; similarly, the language is stored in t1['lang'] . Code: 1 2 3 4 5 6 7 8 # Import package import pandas as pd # Build DataFrame of tweet texts and languages df = pd . DataFrame ( tweets_data , columns = [ 'text' , 'lang' ]) # Print head of DataFrame print ( df . head ()) Analyze the tweets (NLP, regex) A little bit of Twitter text analysis and plotting. Use the statistical data visualization library seaborn . Code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 # Import the regular expressions library import re # The function tells you whether the first argument (a word) occurs within the 2nd argument (a tweet) def word_in_text ( word , tweet ): word = word . lower () text = tweet . lower () match = re . search ( word , tweet ) if match : return True return False # Initialize list to store tweet counts [ clinton , trump , sanders , cruz ] = [ 0 , 0 , 0 , 0 ] # Iterate through df, counting the number of tweets in which # each candidate is mentioned for index , row in df . iterrows (): clinton += word_in_text ( 'clinton' , row [ 'text' ]) trump += word_in_text ( 'trump' , row [ 'text' ]) sanders += word_in_text ( 'sanders' , row [ 'text' ]) cruz += word_in_text ( 'cruz' , row [ 'text' ]) # Import packages import matplotlib.pyplot as plt import seaborn as sns # Set seaborn style sns . set ( color_codes = True ) # Create a list of labels:cd cd = [ 'clinton' , 'trump' , 'sanders' , 'cruz' ] # Plot histogram ax = sns . barplot ( cd , [ clinton , trump , sanders , cruz ]) ax . set ( ylabel = \"count\" ) plt . show () 1 2 from IPython.display import Image # for the following pictures... 1 Image ( 'tweets_figure.png' )","title":"Introduction to APIs and JSONs"},{"location":"Intro to data.world in Python/","text":"Foreword Code snippets and excerpts from the course. Python 3. From DataCamp. With Jupyter Notebook and the In [ ] Out [ ] format. Introduction \u00b6 Open data is at the heart of data.world . Open an account, log in, find a dataset, download it or copy URL or integrate data.world with Python/R/Tableau by installing dw in the terminal. In Python for example. pip install datadotworld[pandas] or conda install datadotworld-py . then, dw configure . Pull the API token from the account and enter it. There are similar procedures for R and Tableau. Everything is documented on the website (when trying to download any dataset, more options appear for Python/R/Tableau). Option 1: use the data.world Jupyter Notebook template as a way to jump-start a project with Python. Option 2: 1 2 3 4 5 6 % pylab inline import pandas as pd import os # Import the datadotworld module as dw import datadotworld as dw 1 Populating the interactive namespace from numpy and matplotlib Working with Datasets \u00b6 Import a Dataset \u00b6 Once the module is loaded, there are two ways to import a dataset. 1 2 3 # First # Import the city council votes dataset dataset = dw . load_dataset ( 'stephen-hoover/chicago-city-council-votes' ) The dataset is now in the cache. 1 2 3 # Second # Import the city council votes dataset dataset = dw . load_dataset ( 'https://data.world/stephen-hoover/chicago-city-council-votes' ) Working with Datasets \u00b6 From the beginning. 1 2 3 4 # Import the datadotworld module as dw import datadotworld as dw # Import the Pretty Print module import pprint as pp 1 2 3 4 5 6 7 # Import the city council votes dataset dataset = dw . load_dataset ( 'https://data.world/stephen-hoover/chicago-city-council-votes' ) # Use describe() # Review all the metadata that is downloaded with the dataset # Print it to the screen using pp.pprint() pp . pprint ( dataset . describe ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 { ' description ' : ' Chicago city council voting records from May 2006 to March ' ' 2017 \\ n ' '\\n' '# About this project \\ n ' ' This dataset aims to increase transparency into the Chicago ' \"city government by publishing each Alderman's voting record \" ' in an easily machine - readable format . These data come from ' ' pdfs [ published by the Office of the City ' ' Clerk ]( http : //www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports).\\n' '\\n' ' This work was done as part of the Data for Democracy ' ' [ \"Chicago ' ' Lobbyists \"](https://data.world/lilianhj/chicago-lobbyists) ' ' project . \\ n ' '\\n' ' The code which produced these data is at ' ' https : //github.com/stephen-hoover/data-processing/blob/master/scraping/Scrape%20Chicago%20City%20Clerk%20Website.ipynb ' ' . \\ n ' '\\n' '# Still to - do \\ n ' ' It would be useful to include more information about each ' ' measure -- sponsors , full text , and subject tags would be ' ' particularly good to have . \\ n ' '\\n' ' Aldermen names in the voting records are not fully ' ' standardized yet . Ideally the same person would always have ' ' exactly the same string . \\ n ' '\\n' '# External resources \\ n ' ' [ City council meeting ' ' reports ]( http : //www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports)\\n' '\\n' ' [ Chicago Councilmatic ]( https : //chicago.councilmatic.org)\\n' '\\n' ' [ City of Chicago Legislative Information ' ' Center ]( https : //chicago.legistar.com)', ' homepage ' : ' https : //data.world/stephen-hoover/chicago-city-council-votes', ' keywords ' : [ ' chicago ' , ' government ' ], ' license ' : ' Public Domain ' , ' name ' : ' stephen - hoover_chicago - city - council - votes ' , ' resources ' : [{ ' format ' : ' csv ' , ' name ' : ' alderman_votes ' , ' path ' : ' data / alderman_votes . csv ' }, { ' format ' : ' csv ' , ' name ' : ' legislation_titles ' , ' path ' : ' data / legislation_titles . csv ' }, { ' bytes ' : 428918 , ' format ' : ' csv ' , ' keywords ' : [ ' clean data ' ], ' mediatype ' : ' text / csv ' , ' name ' : ' original / alderman_votes . csv ' , ' path ' : ' original / alderman_votes . csv ' }, { ' bytes ' : 29658 , ' description ' : ' These are titles for each of the issues in the ' ' alderman_votes . csv document . Join on \"Record\" . ' , ' format ' : ' csv ' , ' keywords ' : [ ' clean data ' ], ' mediatype ' : ' text / csv ' , ' name ' : ' original / legislation_titles . csv ' , ' path ' : ' original / legislation_titles . csv ' }], ' title ' : ' Chicago City Council Votes ' } 1 2 3 4 # Use describe() again # Get a description of a specific resource: alderman_votes # Print it to the screen pp . pprint ( dataset . describe ( 'alderman_votes' )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { 'format': 'csv', 'name': 'alderman_votes', 'path': 'data/alderman_votes.csv', 'schema': {'fields': [ { 'description' : 'Note that some entries contain a full ' 'name and others only have a last name.' , 'name' : 'alderman' , 'rdfType' : 'http://www.w3.org/2001/XMLSchema#string' , 'title' : 'Alderman' , 'type' : 'string' }, { 'description' : 'VOTE KEY: Y=Yes; N=No; A=Absent; ' 'NV=Not Voting; E=Excused; V=Vacant ' 'R=Recusals from voting' , 'name' : 'vote' , 'rdfType' : 'http://www.w3.org/2001/XMLSchema#string' , 'title' : 'Vote' , 'type' : 'string' }, { 'name' : 'ward' , 'rdfType' : 'http://www.w3.org/2001/XMLSchema#integer' , 'title' : 'Ward' , 'type' : 'integer' }, { 'description' : 'YYYY-MM-DD' , 'name' : 'date' , 'rdfType' : 'http://www.w3.org/2001/XMLSchema#date' , 'title' : 'Date' , 'type' : 'date' }, { 'name' : 'record' , 'rdfType' : 'http://www.w3.org/2001/XMLSchema#string' , 'title' : 'Record' , 'type' : 'string' } ] } } Reading the metadata \u00b6 All fields begin with { . The alderman_votes variable has 5 fields. Accessing the data \u00b6 We have access to three properties: raw_data , tables , and dataframes . Each of these returns a dictionary of values, just in different formats: bytes , list and pandas.DataFrame objects. 1 2 3 4 5 6 7 # Use the dataframes property # Assign the alderman_votes table to the variable votes_dataframe votes_dataframe = dataset . dataframes [ 'alderman_votes' ] # Use the pandas shape property # Get rows/columns size for the `votes_dataframe` dataframe pp . pprint ( votes_dataframe . shape ) 1 (10850, 5) 1 2 3 # Use the pandas head function # Print the first 3 rows of the `votes_dataframe` dataframe pp . pprint ( votes_dataframe . head ( 3 )) 1 2 3 4 alderman vote ward date record 0 Manuel Flores N 1 2006-07-26 SO2006-3086 1 Madeline L. Haithcock N 2 2006-07-26 SO2006-3086 2 Dorothy J. Tillman N 3 2006-07-26 SO2006-3086 Working with multiple datasets \u00b6 1 2 3 4 5 import datadotworld as dw # Loaded two datasets int_dataset = dw . load_dataset ( 'https://data.world/jonloyens/intermediate-data-world' ) fipsCodes_dataset = dw . load_dataset ( 'https://data.world/uscensusbureau/fips-state-codes' ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Create two dataframes: # police_shootings from the 'fatal_police_shootings_data' table of int_dataset and # state_abbrvs, from the 'statesfipscodes' table of fipsCodes_dataset police_shootings = int_dataset . dataframes [ 'fatal_police_shootings_data' ] state_abbrvs = fipsCodes_dataset . dataframes [ 'statesfipscodes' ] # Merge the two datasets together # on the state and stusab fields # Assign to a merged_dataframe variable merged_dataframe = police_shootings . merge ( state_abbrvs , how = 'left' , left_on = 'state' , right_on = 'stusab' ) # Add a 'citystate' column to the merged_dataframe dataframe, # populating it with the concatinated values from the 'city' and 'state_name' columns, # separated by ', ' merged_dataframe [ \"citystate\" ] = merged_dataframe [ \"city\" ] + \\ \", \" + merged_dataframe [ \"state_name\" ] ## Print head of merged_dataframe pp . pprint ( merged_dataframe . head ( 5 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 id name date manner_of_death armed age \\ 0 3 Tim Elliot 2015-01-02 shot gun 53.0 1 4 Lewis Lee Lembke 2015-01-02 shot gun 47.0 2 5 John Paul Quintero 2015-01-03 shot and Tasered unarmed 23.0 3 8 Matthew Hoffman 2015-01-04 shot toy weapon 32.0 4 9 Michael Rodriguez 2015-01-04 shot nail gun 39.0 gender race city state signs_of_mental_illness threat_level \\ 0 M A Shelton WA True attack 1 M W Aloha OR False attack 2 M H Wichita KS False other 3 M W San Francisco CA True attack 4 M H Evans CO False attack flee body_camera state_fips stusab state_name statens \\ 0 Not fleeing False 53 WA Washington 1779804 1 Not fleeing False 41 OR Oregon 1155107 2 Not fleeing False 20 KS Kansas 481813 3 Not fleeing False 6 CA California 1779778 4 Not fleeing False 8 CO Colorado 1779779 citystate 0 Shelton, Washington 1 Aloha, Oregon 2 Wichita, Kansas 3 San Francisco, California 4 Evans, Colorado Querying with data.world \u00b6 Another way to pull data in from data.world is to use the query() method to use SQL or SPARQL to query one or more datasets. Check out the full dwSQL documentation . SQL: Querying a table \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import datadotworld as dw # Run a SQL query # Select all rows from the `unhcr_all` table where `Year` equals 2010 # Assign the query string to a `sql_query` variable sql_query = \"SELECT * FROM `unhcr_all` WHERE Year = 2010\" # Use the `query` method of the datadotworld module # Run the `sql_query` # Assign the results to a `query2010` variable query2010 = dw . query ( 'https://data.world/agriculture/national-farmers-markets' , sql_query ) # Use the dataframe property of the resulting query # Create a dataframe variable named `unhcr2010` unhcr2010 = query2010 . dataframe # Print the first 5 rows using the head method pp . pprint ( unhcr2010 . head ( 5 )) SQL: Query multiple tables (join) \u00b6 Write queries against multiple tables within a single dataset or across many datasets! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import datadotworld as dw # Run a SQL query # Select state, the count of farmers markets (fmid), # and average obesity rate # from agriculture.`national-farmers-markets`.export, # LEFT JOINED against health.`obesity-by-state-2014` # adult_obese on state and location sql_query = \"SELECT state, count(fmid) as count, Avg(obesity.Value) as obesityAvg FROM Export LEFT JOIN health.`obesity-by-state-2014`.`adult_obese` as obesity ON state = obesity.location GROUP BY state ORDER BY count desc\" # Use the `query` method of the datadotworld module # Run the `sql_query` against the `https://data.world/agriculture/national-farmers-markets` dataset # Assign the results to a `queryResults` variable queryResults = dw . query ( 'https://data.world/agriculture/national-farmers-markets' , \\ sql_query ) # Use the dataframes property of the resulting query # Create a dataframe variable named `stateStats` stateStats = queryResults . dataframe 1 2 3 4 5 6 import matplotlib.pyplot as plt # Plot the stateStats results using state as the x-axis stateStats . plot ( x = 'state' ) plt . show () SPARQL: Querying linked data \u00b6 Behind the scenes, data.world is converting all tabular data files into linked data using Semantic Web technologies. This allows to upload any tabular format, like xlsx, csv, tsv or json, and instantly be able to query and join them without issue. SQL is great for this, but SPARQL - which is the query language for linked data - can be more robust and flexible than SQL, allowing for more complex queries. Check out the full SPARQL documentation . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import datadotworld as dw # A SPARQL query assigned to the `sparql_query` variable: sparql_query = \"PREFIX GOT: <https://tutorial.linked.data.world/d/sparqltutorial/> SELECT ?FName ?LName WHERE {?person GOT:col-got-house \\\" Stark \\\" . ?person GOT:col-got-fname ?FName . ?person GOT:col-got-lname ?LName .}\" # Use the pre-defined SPARQL query # Query dataset http://data.world/tutorial/sparqltutorial and # return the results to a queryResults variable queryResults = dw . query ( 'http://data.world/tutorial/sparqltutorial' , \\ sparql_query , query_type = 'sparql' ) # Use the dataframe property of the resulting query # Create a dataframe variable named `houseStark` houseStark = queryResults . dataframe # Use pp.pprint() to print the dataframe to the screen pp . pprint ( houseStark ) 1 2 3 4 5 6 7 FName LName 0 Robb Stark 1 Jon Snow 2 Sansa Stark 3 Arya Stark 4 Bran Stark 5 Rickon Stark Wrap up \u00b6 1 2 3 4 5 6 7 8 9 import datadotworld as dw # Import the sys module import sys # Import a dataset refugee_dataset = dw . load_dataset ( 'nrippner/refugee-host-nations' ) # Get the size of the dataset: sys . getsizeof ( refugee_dataset ) 1 56 1 2 3 4 # List all of the data files: dataframes = refugee_dataset . dataframes for df in dataframes : pp . pprint ( df ) 1 2 3 4 5 6 7 'refugees2011_15' 'refugees_all_years' 'refugees_per_capita' 'unhcr_2015' 'unhcr_all' 'worldbank_data_dict' 'worldbank_indicators' 1 2 3 4 5 6 7 8 # Print all of the files in a dataset: resources = refugee_dataset . describe ()[ 'resources' ] pp . pprint ( 'name:' ) for r in resources : pp . pprint ( r [ 'name' ]) pp . pprint ( ' \\n type of file:' ) for r in resources : pp . pprint ( r [ 'format' ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 'name:' 'refugees2011_15' 'refugees_all_years' 'refugees_per_capita' 'unhcr_2015' 'unhcr_all' 'worldbank_data_dict' 'worldbank_indicators' 'original/Refugees.ipynb' 'original/refs.py' 'original/refugees2011-15.csv' 'original/refugees_all_years.csv' 'original/refugees_per_capita.csv' 'original/unhcr_2015.csv' 'original/unhcr_all.csv' 'original/worldbank_data_dict.csv' 'original/worldbank_indicators.csv' '\\ntype of file:' 'csv' 'csv' 'csv' 'csv' 'csv' 'csv' 'csv' 'ipynb' 'py' 'csv' 'csv' 'csv' 'csv' 'csv' 'csv' 'csv' Advanced SDK Functionality \u00b6 The data.world Python SDK includes a variety of API wrappers, available via the ApiClient class, to create, replace, update, and delete a dataset. In this section, we walk through a few common tasks: Use api_client() to get an instance of the ApiClient . Create a dataset. Add a file from a data frame: we write to a local csv and the upload the file. Add a file from a source URL: this is an easy way to add external data to the dataset and keep it up to date. We use a file from GitHub as an example, but we can use any URL source that points to a file. Sync the dataset: this simple call reloads any files with a source URL, to ensure the latest version. Update the dataset: after creating a dataset, use update_dataset to change attiributes like description, summary or tags. Use help(api_client) to learn more about each available function or see the full data.world API documentation . Open the API \u00b6 1 2 3 4 5 6 7 import datadotworld as dw # Create an instance of the ApiClient using `api_client()` api_client = dw . api_client () # See api_client documentation help ( api_client ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 Help on RestApiClient in module datadotworld . client . api object : class RestApiClient ( builtins . object ) | REST API client | | Parameters | ---------- | profile : str , optional | Name of the configuration profile to use | | Methods defined here : | | __init__ ( self , config ) | Initialize self . See help ( type ( self )) for accurate signature . | | add_files_via_url ( self , dataset_key , files = {}) | Add or update dataset files linked to source URLs | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | files : dict | File names and source URLs to add or update | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; url = 'http://www.acme.inc/example.csv' | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . add_files_via_url ( | ... 'username/test-dataset' , | ... { 'example.csv' : url }) # doctest: +SKIP | | create_dataset ( self , owner_id , ** kwargs ) | Create a new dataset | | Parameters | ---------- | owner_id : str | Username of the owner of the new dataset | title : str | Dataset title ( will be used to generate dataset id on creation ) | description : str , optional | Dataset description | summary : str , optional | Dataset summary markdown | tags : list , optional | Dataset tags | license : { 'Public Domain' , 'PDDL' , 'CC-0' , 'CC-BY' , 'ODC-BY' , | 'CC-BY-SA' , 'ODC-ODbL' , 'CC BY-NC' , 'CC BY-NC-SA' , 'Other' } | Dataset license | visibility : { 'OPEN' , 'PRIVATE' } | Dataset visibility | files : dict , optional | File names and source URLs | | Returns | ------- | str | Newly created dataset key | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . create_dataset ( | ... 'username' , title = 'Test dataset' , visibility = 'PRIVATE' , | ... license = 'Public Domain' ) # doctest: +SKIP | | delete_files ( self , dataset_key , names ) | Delete dataset file ( s ) | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | names : list of str | The list of names for files to be deleted | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . delete_files ( | ... 'username/test-dataset' , [ 'example.csv' ]) # doctest: +SKIP | | download_datapackage ( self , dataset_key , dest_dir ) | Download and unzip a dataset 's datapackage | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | dest_dir : str or path | Directory under which datapackage should be saved | | Returns | ------- | path | Location of the datapackage descriptor ( datapackage . json ) in the | local filesystem | | Raises | ------ | RestApiException | If a server error occurs | | Examples | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; datapackage_descriptor = api_client . download_datapackage ( | ... 'jonloyens/an-intro-to-dataworld-dataset' , '/tmp/test' ) | & gt ; & gt ; & gt ; datapackage_descriptor | '/tmp/test/datapackage.json' | | get_dataset ( self , dataset_key ) | Retrieve an existing dataset definition | | This method retrieves metadata about an existing | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | | Returns | ------- | dict | Dataset definition , with all attributes | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; intro_dataset = api_client . get_dataset ( | ... 'jonloyens/an-intro-to-dataworld-dataset' ) | & gt ; & gt ; & gt ; intro_dataset [ 'title' ] | 'An Intro to data.world Dataset' | | replace_dataset ( self , dataset_key , ** kwargs ) | Replace an existing dataset | | * This method will completely overwrite an existing dataset .* | | Parameters | ---------- | description : str , optional | Dataset description | summary : str , optional | Dataset summary markdown | tags : list , optional | Dataset tags | license : { 'Public Domain' , 'PDDL' , 'CC-0' , 'CC-BY' , 'ODC-BY' , | 'CC-BY-SA' , 'ODC-ODbL' , 'CC BY-NC' , 'CC BY-NC-SA' , 'Other' } | Dataset license | visibility : { 'OPEN' , 'PRIVATE' } | Dataset visibility | files : dict , optional | File names and source URLs to add or update | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . replace_dataset ( | ... 'username/test-dataset' , | ... visibility = 'PRIVATE' , license = 'Public Domain' , | ... description = 'A better description' ) # doctest: +SKIP | | sync_files ( self , dataset_key ) | Trigger synchronization process to update all dataset files linked to | source URLs . | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . sync_files ( 'username/test-dataset' ) # doctest: +SKIP | | update_dataset ( self , dataset_key , ** kwargs ) | Update an existing dataset | | Parameters | ---------- | description : str , optional | Dataset description | summary : str , optional | Dataset summary markdown | tags : list , optional | Dataset tags | license : { 'Public Domain' , 'PDDL' , 'CC-0' , 'CC-BY' , 'ODC-BY' , | 'CC-BY-SA' , 'ODC-ODbL' , 'CC BY-NC' , 'CC BY-NC-SA' , 'Other' } | Dataset license | visibility : { 'OPEN' , 'PRIVATE' }, optional | Dataset visibility | files : dict , optional | File names and source URLs to add or update | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . update_dataset ( | ... 'username/test-dataset' , | ... tags = [ 'demo' , 'datadotworld' ]) # doctest: +SKIP | | upload_files ( self , dataset_key , files ) | Upload dataset files | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | files : list of str | The list of names / paths for files stored in the local filesystem | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . upload_files ( | ... 'username/test-dataset' , | ... [ '/my/local/example.csv' ]) # doctest: +SKIP | | ---------------------------------------------------------------------- | Data descriptors defined here : | | __dict__ | dictionary for instance variables ( if defined ) | | __weakref__ | list of weak references to the object ( if defined ) Create a dataset using create_dataset method \u00b6 api_client.create_dataset(owner_id=\"<YOUR_USERNAME>\", title=\"<DATASET_TITLE>\", visibility='PRIVATE') . 1 2 3 4 5 import datadotworld as dw # Replace the < > items with your username and desired dataset title # Visibility can be changed to 'OPEN' if you choose api_client . create_dataset ( owner_id = \"ugo\" , title = \"intermediate-data-world\" , visibility = 'OPEN' ) 1 'https://data.world/ugo/intermediate-data-world' Write a data frame to a local file and upload to dataset \u00b6 Add file to the dataset using upload_files() . Replace the < > items with the dataset values. api_client.upload_files('<YOUR_USERNAME>/<DATASET_TITLE>',['police_shootings.csv']) . 1 2 3 4 import os cwd = os . getcwd () #print(cwd) 1 2 3 4 5 6 7 8 import datadotworld as dw # Create a dataframe police_shootings = dw . load_dataset ( 'https://data.world/jonloyens/intermediate-data-world' ) . dataframes [ 'fatal_police_shootings_data' ] # Write dataframe to local csv using pandas to_csv() method # in the current working directory (cwd) police_shootings . to_csv ( 'police_shootings.csv' , encoding = 'utf-8' ) Check the current working directory. Update dataset \u00b6 Add a file from an external source URL. In this example we use GitHub. Replace the < > items with the dataset values api_client.add_files_via_url('<YOUR_USERNAME>/<DATASET_TITLE>',{'shootings_of_police.csv': 'https://github.com/fivethirtyeight/data/blob/master/police-deaths/all_data.csv\u2019}) . For files added with add_files_via_url , fetch the latest version using the sync() method: api_client.sync_files('<YOUR_USERNAME>/<DATASET_TITLE>') . Use the update_dataset() method to update the metadata after dataset creation: api_client.update_dataset('<YOUR_USERNAME>/<DATASET_TITLE>', description='Dataset created to test out the python SDK functionality.', tags=['test', 'datacamp']) .","title":"Introduction to data.world"},{"location":"Intro to data.world in Python/#working-with-datasets","text":"","title":"Working with Datasets"},{"location":"Intro to data.world in Python/#import-a-dataset","text":"Once the module is loaded, there are two ways to import a dataset. 1 2 3 # First # Import the city council votes dataset dataset = dw . load_dataset ( 'stephen-hoover/chicago-city-council-votes' ) The dataset is now in the cache. 1 2 3 # Second # Import the city council votes dataset dataset = dw . load_dataset ( 'https://data.world/stephen-hoover/chicago-city-council-votes' )","title":"Import a Dataset"},{"location":"Intro to data.world in Python/#working-with-datasets_1","text":"From the beginning. 1 2 3 4 # Import the datadotworld module as dw import datadotworld as dw # Import the Pretty Print module import pprint as pp 1 2 3 4 5 6 7 # Import the city council votes dataset dataset = dw . load_dataset ( 'https://data.world/stephen-hoover/chicago-city-council-votes' ) # Use describe() # Review all the metadata that is downloaded with the dataset # Print it to the screen using pp.pprint() pp . pprint ( dataset . describe ()) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 { ' description ' : ' Chicago city council voting records from May 2006 to March ' ' 2017 \\ n ' '\\n' '# About this project \\ n ' ' This dataset aims to increase transparency into the Chicago ' \"city government by publishing each Alderman's voting record \" ' in an easily machine - readable format . These data come from ' ' pdfs [ published by the Office of the City ' ' Clerk ]( http : //www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports).\\n' '\\n' ' This work was done as part of the Data for Democracy ' ' [ \"Chicago ' ' Lobbyists \"](https://data.world/lilianhj/chicago-lobbyists) ' ' project . \\ n ' '\\n' ' The code which produced these data is at ' ' https : //github.com/stephen-hoover/data-processing/blob/master/scraping/Scrape%20Chicago%20City%20Clerk%20Website.ipynb ' ' . \\ n ' '\\n' '# Still to - do \\ n ' ' It would be useful to include more information about each ' ' measure -- sponsors , full text , and subject tags would be ' ' particularly good to have . \\ n ' '\\n' ' Aldermen names in the voting records are not fully ' ' standardized yet . Ideally the same person would always have ' ' exactly the same string . \\ n ' '\\n' '# External resources \\ n ' ' [ City council meeting ' ' reports ]( http : //www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports)\\n' '\\n' ' [ Chicago Councilmatic ]( https : //chicago.councilmatic.org)\\n' '\\n' ' [ City of Chicago Legislative Information ' ' Center ]( https : //chicago.legistar.com)', ' homepage ' : ' https : //data.world/stephen-hoover/chicago-city-council-votes', ' keywords ' : [ ' chicago ' , ' government ' ], ' license ' : ' Public Domain ' , ' name ' : ' stephen - hoover_chicago - city - council - votes ' , ' resources ' : [{ ' format ' : ' csv ' , ' name ' : ' alderman_votes ' , ' path ' : ' data / alderman_votes . csv ' }, { ' format ' : ' csv ' , ' name ' : ' legislation_titles ' , ' path ' : ' data / legislation_titles . csv ' }, { ' bytes ' : 428918 , ' format ' : ' csv ' , ' keywords ' : [ ' clean data ' ], ' mediatype ' : ' text / csv ' , ' name ' : ' original / alderman_votes . csv ' , ' path ' : ' original / alderman_votes . csv ' }, { ' bytes ' : 29658 , ' description ' : ' These are titles for each of the issues in the ' ' alderman_votes . csv document . Join on \"Record\" . ' , ' format ' : ' csv ' , ' keywords ' : [ ' clean data ' ], ' mediatype ' : ' text / csv ' , ' name ' : ' original / legislation_titles . csv ' , ' path ' : ' original / legislation_titles . csv ' }], ' title ' : ' Chicago City Council Votes ' } 1 2 3 4 # Use describe() again # Get a description of a specific resource: alderman_votes # Print it to the screen pp . pprint ( dataset . describe ( 'alderman_votes' )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { 'format': 'csv', 'name': 'alderman_votes', 'path': 'data/alderman_votes.csv', 'schema': {'fields': [ { 'description' : 'Note that some entries contain a full ' 'name and others only have a last name.' , 'name' : 'alderman' , 'rdfType' : 'http://www.w3.org/2001/XMLSchema#string' , 'title' : 'Alderman' , 'type' : 'string' }, { 'description' : 'VOTE KEY: Y=Yes; N=No; A=Absent; ' 'NV=Not Voting; E=Excused; V=Vacant ' 'R=Recusals from voting' , 'name' : 'vote' , 'rdfType' : 'http://www.w3.org/2001/XMLSchema#string' , 'title' : 'Vote' , 'type' : 'string' }, { 'name' : 'ward' , 'rdfType' : 'http://www.w3.org/2001/XMLSchema#integer' , 'title' : 'Ward' , 'type' : 'integer' }, { 'description' : 'YYYY-MM-DD' , 'name' : 'date' , 'rdfType' : 'http://www.w3.org/2001/XMLSchema#date' , 'title' : 'Date' , 'type' : 'date' }, { 'name' : 'record' , 'rdfType' : 'http://www.w3.org/2001/XMLSchema#string' , 'title' : 'Record' , 'type' : 'string' } ] } }","title":"Working with Datasets"},{"location":"Intro to data.world in Python/#reading-the-metadata","text":"All fields begin with { . The alderman_votes variable has 5 fields.","title":"Reading the metadata"},{"location":"Intro to data.world in Python/#accessing-the-data","text":"We have access to three properties: raw_data , tables , and dataframes . Each of these returns a dictionary of values, just in different formats: bytes , list and pandas.DataFrame objects. 1 2 3 4 5 6 7 # Use the dataframes property # Assign the alderman_votes table to the variable votes_dataframe votes_dataframe = dataset . dataframes [ 'alderman_votes' ] # Use the pandas shape property # Get rows/columns size for the `votes_dataframe` dataframe pp . pprint ( votes_dataframe . shape ) 1 (10850, 5) 1 2 3 # Use the pandas head function # Print the first 3 rows of the `votes_dataframe` dataframe pp . pprint ( votes_dataframe . head ( 3 )) 1 2 3 4 alderman vote ward date record 0 Manuel Flores N 1 2006-07-26 SO2006-3086 1 Madeline L. Haithcock N 2 2006-07-26 SO2006-3086 2 Dorothy J. Tillman N 3 2006-07-26 SO2006-3086","title":"Accessing the data"},{"location":"Intro to data.world in Python/#working-with-multiple-datasets","text":"1 2 3 4 5 import datadotworld as dw # Loaded two datasets int_dataset = dw . load_dataset ( 'https://data.world/jonloyens/intermediate-data-world' ) fipsCodes_dataset = dw . load_dataset ( 'https://data.world/uscensusbureau/fips-state-codes' ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Create two dataframes: # police_shootings from the 'fatal_police_shootings_data' table of int_dataset and # state_abbrvs, from the 'statesfipscodes' table of fipsCodes_dataset police_shootings = int_dataset . dataframes [ 'fatal_police_shootings_data' ] state_abbrvs = fipsCodes_dataset . dataframes [ 'statesfipscodes' ] # Merge the two datasets together # on the state and stusab fields # Assign to a merged_dataframe variable merged_dataframe = police_shootings . merge ( state_abbrvs , how = 'left' , left_on = 'state' , right_on = 'stusab' ) # Add a 'citystate' column to the merged_dataframe dataframe, # populating it with the concatinated values from the 'city' and 'state_name' columns, # separated by ', ' merged_dataframe [ \"citystate\" ] = merged_dataframe [ \"city\" ] + \\ \", \" + merged_dataframe [ \"state_name\" ] ## Print head of merged_dataframe pp . pprint ( merged_dataframe . head ( 5 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 id name date manner_of_death armed age \\ 0 3 Tim Elliot 2015-01-02 shot gun 53.0 1 4 Lewis Lee Lembke 2015-01-02 shot gun 47.0 2 5 John Paul Quintero 2015-01-03 shot and Tasered unarmed 23.0 3 8 Matthew Hoffman 2015-01-04 shot toy weapon 32.0 4 9 Michael Rodriguez 2015-01-04 shot nail gun 39.0 gender race city state signs_of_mental_illness threat_level \\ 0 M A Shelton WA True attack 1 M W Aloha OR False attack 2 M H Wichita KS False other 3 M W San Francisco CA True attack 4 M H Evans CO False attack flee body_camera state_fips stusab state_name statens \\ 0 Not fleeing False 53 WA Washington 1779804 1 Not fleeing False 41 OR Oregon 1155107 2 Not fleeing False 20 KS Kansas 481813 3 Not fleeing False 6 CA California 1779778 4 Not fleeing False 8 CO Colorado 1779779 citystate 0 Shelton, Washington 1 Aloha, Oregon 2 Wichita, Kansas 3 San Francisco, California 4 Evans, Colorado","title":"Working with multiple datasets"},{"location":"Intro to data.world in Python/#querying-with-dataworld","text":"Another way to pull data in from data.world is to use the query() method to use SQL or SPARQL to query one or more datasets. Check out the full dwSQL documentation .","title":"Querying with data.world"},{"location":"Intro to data.world in Python/#sql-querying-a-table","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import datadotworld as dw # Run a SQL query # Select all rows from the `unhcr_all` table where `Year` equals 2010 # Assign the query string to a `sql_query` variable sql_query = \"SELECT * FROM `unhcr_all` WHERE Year = 2010\" # Use the `query` method of the datadotworld module # Run the `sql_query` # Assign the results to a `query2010` variable query2010 = dw . query ( 'https://data.world/agriculture/national-farmers-markets' , sql_query ) # Use the dataframe property of the resulting query # Create a dataframe variable named `unhcr2010` unhcr2010 = query2010 . dataframe # Print the first 5 rows using the head method pp . pprint ( unhcr2010 . head ( 5 ))","title":"SQL: Querying a table"},{"location":"Intro to data.world in Python/#sql-query-multiple-tables-join","text":"Write queries against multiple tables within a single dataset or across many datasets! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import datadotworld as dw # Run a SQL query # Select state, the count of farmers markets (fmid), # and average obesity rate # from agriculture.`national-farmers-markets`.export, # LEFT JOINED against health.`obesity-by-state-2014` # adult_obese on state and location sql_query = \"SELECT state, count(fmid) as count, Avg(obesity.Value) as obesityAvg FROM Export LEFT JOIN health.`obesity-by-state-2014`.`adult_obese` as obesity ON state = obesity.location GROUP BY state ORDER BY count desc\" # Use the `query` method of the datadotworld module # Run the `sql_query` against the `https://data.world/agriculture/national-farmers-markets` dataset # Assign the results to a `queryResults` variable queryResults = dw . query ( 'https://data.world/agriculture/national-farmers-markets' , \\ sql_query ) # Use the dataframes property of the resulting query # Create a dataframe variable named `stateStats` stateStats = queryResults . dataframe 1 2 3 4 5 6 import matplotlib.pyplot as plt # Plot the stateStats results using state as the x-axis stateStats . plot ( x = 'state' ) plt . show ()","title":"SQL: Query multiple tables (join)"},{"location":"Intro to data.world in Python/#sparql-querying-linked-data","text":"Behind the scenes, data.world is converting all tabular data files into linked data using Semantic Web technologies. This allows to upload any tabular format, like xlsx, csv, tsv or json, and instantly be able to query and join them without issue. SQL is great for this, but SPARQL - which is the query language for linked data - can be more robust and flexible than SQL, allowing for more complex queries. Check out the full SPARQL documentation . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import datadotworld as dw # A SPARQL query assigned to the `sparql_query` variable: sparql_query = \"PREFIX GOT: <https://tutorial.linked.data.world/d/sparqltutorial/> SELECT ?FName ?LName WHERE {?person GOT:col-got-house \\\" Stark \\\" . ?person GOT:col-got-fname ?FName . ?person GOT:col-got-lname ?LName .}\" # Use the pre-defined SPARQL query # Query dataset http://data.world/tutorial/sparqltutorial and # return the results to a queryResults variable queryResults = dw . query ( 'http://data.world/tutorial/sparqltutorial' , \\ sparql_query , query_type = 'sparql' ) # Use the dataframe property of the resulting query # Create a dataframe variable named `houseStark` houseStark = queryResults . dataframe # Use pp.pprint() to print the dataframe to the screen pp . pprint ( houseStark ) 1 2 3 4 5 6 7 FName LName 0 Robb Stark 1 Jon Snow 2 Sansa Stark 3 Arya Stark 4 Bran Stark 5 Rickon Stark","title":"SPARQL: Querying linked data"},{"location":"Intro to data.world in Python/#wrap-up","text":"1 2 3 4 5 6 7 8 9 import datadotworld as dw # Import the sys module import sys # Import a dataset refugee_dataset = dw . load_dataset ( 'nrippner/refugee-host-nations' ) # Get the size of the dataset: sys . getsizeof ( refugee_dataset ) 1 56 1 2 3 4 # List all of the data files: dataframes = refugee_dataset . dataframes for df in dataframes : pp . pprint ( df ) 1 2 3 4 5 6 7 'refugees2011_15' 'refugees_all_years' 'refugees_per_capita' 'unhcr_2015' 'unhcr_all' 'worldbank_data_dict' 'worldbank_indicators' 1 2 3 4 5 6 7 8 # Print all of the files in a dataset: resources = refugee_dataset . describe ()[ 'resources' ] pp . pprint ( 'name:' ) for r in resources : pp . pprint ( r [ 'name' ]) pp . pprint ( ' \\n type of file:' ) for r in resources : pp . pprint ( r [ 'format' ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 'name:' 'refugees2011_15' 'refugees_all_years' 'refugees_per_capita' 'unhcr_2015' 'unhcr_all' 'worldbank_data_dict' 'worldbank_indicators' 'original/Refugees.ipynb' 'original/refs.py' 'original/refugees2011-15.csv' 'original/refugees_all_years.csv' 'original/refugees_per_capita.csv' 'original/unhcr_2015.csv' 'original/unhcr_all.csv' 'original/worldbank_data_dict.csv' 'original/worldbank_indicators.csv' '\\ntype of file:' 'csv' 'csv' 'csv' 'csv' 'csv' 'csv' 'csv' 'ipynb' 'py' 'csv' 'csv' 'csv' 'csv' 'csv' 'csv' 'csv'","title":"Wrap up"},{"location":"Intro to data.world in Python/#advanced-sdk-functionality","text":"The data.world Python SDK includes a variety of API wrappers, available via the ApiClient class, to create, replace, update, and delete a dataset. In this section, we walk through a few common tasks: Use api_client() to get an instance of the ApiClient . Create a dataset. Add a file from a data frame: we write to a local csv and the upload the file. Add a file from a source URL: this is an easy way to add external data to the dataset and keep it up to date. We use a file from GitHub as an example, but we can use any URL source that points to a file. Sync the dataset: this simple call reloads any files with a source URL, to ensure the latest version. Update the dataset: after creating a dataset, use update_dataset to change attiributes like description, summary or tags. Use help(api_client) to learn more about each available function or see the full data.world API documentation .","title":"Advanced SDK Functionality"},{"location":"Intro to data.world in Python/#open-the-api","text":"1 2 3 4 5 6 7 import datadotworld as dw # Create an instance of the ApiClient using `api_client()` api_client = dw . api_client () # See api_client documentation help ( api_client ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 Help on RestApiClient in module datadotworld . client . api object : class RestApiClient ( builtins . object ) | REST API client | | Parameters | ---------- | profile : str , optional | Name of the configuration profile to use | | Methods defined here : | | __init__ ( self , config ) | Initialize self . See help ( type ( self )) for accurate signature . | | add_files_via_url ( self , dataset_key , files = {}) | Add or update dataset files linked to source URLs | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | files : dict | File names and source URLs to add or update | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; url = 'http://www.acme.inc/example.csv' | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . add_files_via_url ( | ... 'username/test-dataset' , | ... { 'example.csv' : url }) # doctest: +SKIP | | create_dataset ( self , owner_id , ** kwargs ) | Create a new dataset | | Parameters | ---------- | owner_id : str | Username of the owner of the new dataset | title : str | Dataset title ( will be used to generate dataset id on creation ) | description : str , optional | Dataset description | summary : str , optional | Dataset summary markdown | tags : list , optional | Dataset tags | license : { 'Public Domain' , 'PDDL' , 'CC-0' , 'CC-BY' , 'ODC-BY' , | 'CC-BY-SA' , 'ODC-ODbL' , 'CC BY-NC' , 'CC BY-NC-SA' , 'Other' } | Dataset license | visibility : { 'OPEN' , 'PRIVATE' } | Dataset visibility | files : dict , optional | File names and source URLs | | Returns | ------- | str | Newly created dataset key | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . create_dataset ( | ... 'username' , title = 'Test dataset' , visibility = 'PRIVATE' , | ... license = 'Public Domain' ) # doctest: +SKIP | | delete_files ( self , dataset_key , names ) | Delete dataset file ( s ) | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | names : list of str | The list of names for files to be deleted | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . delete_files ( | ... 'username/test-dataset' , [ 'example.csv' ]) # doctest: +SKIP | | download_datapackage ( self , dataset_key , dest_dir ) | Download and unzip a dataset 's datapackage | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | dest_dir : str or path | Directory under which datapackage should be saved | | Returns | ------- | path | Location of the datapackage descriptor ( datapackage . json ) in the | local filesystem | | Raises | ------ | RestApiException | If a server error occurs | | Examples | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; datapackage_descriptor = api_client . download_datapackage ( | ... 'jonloyens/an-intro-to-dataworld-dataset' , '/tmp/test' ) | & gt ; & gt ; & gt ; datapackage_descriptor | '/tmp/test/datapackage.json' | | get_dataset ( self , dataset_key ) | Retrieve an existing dataset definition | | This method retrieves metadata about an existing | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | | Returns | ------- | dict | Dataset definition , with all attributes | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; intro_dataset = api_client . get_dataset ( | ... 'jonloyens/an-intro-to-dataworld-dataset' ) | & gt ; & gt ; & gt ; intro_dataset [ 'title' ] | 'An Intro to data.world Dataset' | | replace_dataset ( self , dataset_key , ** kwargs ) | Replace an existing dataset | | * This method will completely overwrite an existing dataset .* | | Parameters | ---------- | description : str , optional | Dataset description | summary : str , optional | Dataset summary markdown | tags : list , optional | Dataset tags | license : { 'Public Domain' , 'PDDL' , 'CC-0' , 'CC-BY' , 'ODC-BY' , | 'CC-BY-SA' , 'ODC-ODbL' , 'CC BY-NC' , 'CC BY-NC-SA' , 'Other' } | Dataset license | visibility : { 'OPEN' , 'PRIVATE' } | Dataset visibility | files : dict , optional | File names and source URLs to add or update | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . replace_dataset ( | ... 'username/test-dataset' , | ... visibility = 'PRIVATE' , license = 'Public Domain' , | ... description = 'A better description' ) # doctest: +SKIP | | sync_files ( self , dataset_key ) | Trigger synchronization process to update all dataset files linked to | source URLs . | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . sync_files ( 'username/test-dataset' ) # doctest: +SKIP | | update_dataset ( self , dataset_key , ** kwargs ) | Update an existing dataset | | Parameters | ---------- | description : str , optional | Dataset description | summary : str , optional | Dataset summary markdown | tags : list , optional | Dataset tags | license : { 'Public Domain' , 'PDDL' , 'CC-0' , 'CC-BY' , 'ODC-BY' , | 'CC-BY-SA' , 'ODC-ODbL' , 'CC BY-NC' , 'CC BY-NC-SA' , 'Other' } | Dataset license | visibility : { 'OPEN' , 'PRIVATE' }, optional | Dataset visibility | files : dict , optional | File names and source URLs to add or update | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . update_dataset ( | ... 'username/test-dataset' , | ... tags = [ 'demo' , 'datadotworld' ]) # doctest: +SKIP | | upload_files ( self , dataset_key , files ) | Upload dataset files | | Parameters | ---------- | dataset_key : str | Dataset identifier , in the form of owner / id | files : list of str | The list of names / paths for files stored in the local filesystem | | Raises | ------ | RestApiException | If a server error occurs | | Examples | -------- | & gt ; & gt ; & gt ; import datadotworld as dw | & gt ; & gt ; & gt ; api_client = dw . api_client () | & gt ; & gt ; & gt ; api_client . upload_files ( | ... 'username/test-dataset' , | ... [ '/my/local/example.csv' ]) # doctest: +SKIP | | ---------------------------------------------------------------------- | Data descriptors defined here : | | __dict__ | dictionary for instance variables ( if defined ) | | __weakref__ | list of weak references to the object ( if defined )","title":"Open the API"},{"location":"Intro to data.world in Python/#create-a-dataset-using-create_dataset-method","text":"api_client.create_dataset(owner_id=\"<YOUR_USERNAME>\", title=\"<DATASET_TITLE>\", visibility='PRIVATE') . 1 2 3 4 5 import datadotworld as dw # Replace the < > items with your username and desired dataset title # Visibility can be changed to 'OPEN' if you choose api_client . create_dataset ( owner_id = \"ugo\" , title = \"intermediate-data-world\" , visibility = 'OPEN' ) 1 'https://data.world/ugo/intermediate-data-world'","title":"Create a dataset using create_dataset method"},{"location":"Intro to data.world in Python/#write-a-data-frame-to-a-local-file-and-upload-to-dataset","text":"Add file to the dataset using upload_files() . Replace the < > items with the dataset values. api_client.upload_files('<YOUR_USERNAME>/<DATASET_TITLE>',['police_shootings.csv']) . 1 2 3 4 import os cwd = os . getcwd () #print(cwd) 1 2 3 4 5 6 7 8 import datadotworld as dw # Create a dataframe police_shootings = dw . load_dataset ( 'https://data.world/jonloyens/intermediate-data-world' ) . dataframes [ 'fatal_police_shootings_data' ] # Write dataframe to local csv using pandas to_csv() method # in the current working directory (cwd) police_shootings . to_csv ( 'police_shootings.csv' , encoding = 'utf-8' ) Check the current working directory.","title":"Write a data frame to a local file and upload to dataset"},{"location":"Intro to data.world in Python/#update-dataset","text":"Add a file from an external source URL. In this example we use GitHub. Replace the < > items with the dataset values api_client.add_files_via_url('<YOUR_USERNAME>/<DATASET_TITLE>',{'shootings_of_police.csv': 'https://github.com/fivethirtyeight/data/blob/master/police-deaths/all_data.csv\u2019}) . For files added with add_files_via_url , fetch the latest version using the sync() method: api_client.sync_files('<YOUR_USERNAME>/<DATASET_TITLE>') . Use the update_dataset() method to update the metadata after dataset creation: api_client.update_dataset('<YOUR_USERNAME>/<DATASET_TITLE>', description='Dataset created to test out the python SDK functionality.', tags=['test', 'datacamp']) .","title":"Update dataset"},{"location":"Introduction_to_Customer_Segmentation_in_Python/","text":"Foreword Notes. What is Customer Segmentation? \u00b6 Customer segmentation is a method of dividing customers into groups or clusters on the basis of common characteristics. The market researcher can segment customers into the B2C model using various customer\u2019s demographic characteristics such as occupation, gender, age, location, and marital status. Psychographic characteristics such as social class, lifestyle and personality characteristics and behavioral characteristics such as spending, consumption habits, product/service usage, and previously purchased products. In the B2B model using various company\u2019s characteristics such as the size of the company, type of industry, and location. Need of Customer Segmentation \u00b6 In the Retail sector, the various chain of hypermarkets generating an exceptionally large amount of data. This data is generated on a daily basis across the stores. This extensive database of customers transactions needs to analyze for designing profitable strategies. All customers have different-different kind of needs. With the increase in customer base and transaction, it is not easy to understand the requirement of each customer. Segmentation can play a better role in grouping those customers into various segments: It helps in identifying the most potential customers. It helps managers to easily communicate with a targetted group of the audience. It helps in selecting the best medium for communicating with the targetted segment. It improves the quality of service, loyalty, and retention. It improves customer relationship via better understanding needs of segments. It provides opportunities for upselling and cross-selling. It helps managers to design special offers for targetted customers, to encourage them to buy more products. It helps companies to stay a step ahead of competitors. It also helps in identifying new products that customers could be interested in. Types of Segmentation \u00b6 Customer Segmentation using RFM analysis \u00b6 RFM (Recency, Frequency, Monetary) analysis is a behavior-based approach grouping customers into segments. It groups the customers on the basis of their previous purchase transactions. How recently, how often, and how much did a customer buy. RFM filters customers into various groups for the purpose of better service. Recency (R): Who have purchased recently? Number of days since last purchase (least recency). Frequency (F): Who has purchased frequently? It means the total number of purchases. ( high frequency). Monetary Value(M): Who have high purchase amount? It means the total money customer spent (high monetary value). Steps of RFM(Recency, Frequency, Monetary): Calculate the Recency, Frequency, Monetary values for each customer. Add segment bin values to RFM table using quartile. Sort the customer RFM score in ascending order. RFM in Python \u00b6 Importing Data \u00b6 The dataset is over 500K lines! 1 2 3 4 5 # Importing the necessary modules import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import datetime as dt 1 2 # Loading the dataset data = pd . read_csv ( \"Online_Retail.csv\" , sep = ';' , decimal = ',' ) 1 2 # Examining the data data . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } InvoiceNo StockCode Description Quantity InvoiceDate UnitPrice CustomerID Country 0 536365 85123A WHITE HANGING HEART T-LIGHT HOLDER 6 2010-12-01 08:26 2.55 17850.0 United Kingdom 1 536365 71053 WHITE METAL LANTERN 6 2010-12-01 08:26 3.39 17850.0 United Kingdom 2 536365 84406B CREAM CUPID HEARTS COAT HANGER 8 2010-12-01 08:26 2.75 17850.0 United Kingdom 1 2 # Examining the fields (culomns) data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 541909 entries, 0 to 541908 Data columns (total 8 columns): InvoiceNo 541909 non-null object StockCode 541909 non-null object Description 540455 non-null object Quantity 541909 non-null int64 InvoiceDate 541909 non-null object UnitPrice 541909 non-null float64 CustomerID 406829 non-null float64 Country 541909 non-null object dtypes: float64(2), int64(1), object(5) memory usage: 33.1+ MB 1 2 data [ 'InvoiceDate' ] = data [ 'InvoiceDate' ] . astype ( 'datetime64[ns]' ) data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 541909 entries, 0 to 541908 Data columns (total 8 columns): InvoiceNo 541909 non-null object StockCode 541909 non-null object Description 540455 non-null object Quantity 541909 non-null int64 InvoiceDate 541909 non-null datetime64[ns] UnitPrice 541909 non-null float64 CustomerID 406829 non-null float64 Country 541909 non-null object dtypes: datetime64[ns](1), float64(2), int64(1), object(4) memory usage: 33.1+ MB 1 2 # Removing null ID data = data [ pd . notnull ( data [ 'CustomerID' ])] 1 2 # Removing duplicates filtered_data = data [[ 'Country' , 'CustomerID' ]] . drop_duplicates () Data Insights \u00b6 1 2 3 # Filtering the top ten country's customer # Counting the number of occurrence by country filtered_data . Country . value_counts ()[: 10 ] . plot ( kind = 'bar' ); 1 2 3 4 # Filtering for the United Kingdom uk_data = data [ data . Country == 'United Kingdom' ] uk_data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 361878 entries, 0 to 541893 Data columns (total 8 columns): InvoiceNo 361878 non-null object StockCode 361878 non-null object Description 361878 non-null object Quantity 361878 non-null int64 InvoiceDate 361878 non-null datetime64[ns] UnitPrice 361878 non-null float64 CustomerID 361878 non-null float64 Country 361878 non-null object dtypes: datetime64[ns](1), float64(2), int64(1), object(4) memory usage: 24.8+ MB 1 2 # Getting summary statistics for the UK uk_data . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Quantity UnitPrice CustomerID count 361878.000000 361878.000000 361878.000000 mean 11.077029 3.256007 15547.871368 std 263.129266 70.654731 1594.402590 min -80995.000000 0.000000 12346.000000 25% 2.000000 1.250000 14194.000000 50% 4.000000 1.950000 15514.000000 75% 12.000000 3.750000 16931.000000 max 80995.000000 38970.000000 18287.000000 1 2 3 4 5 6 7 8 # Some of the customers have ordered in a negative quantity # Which is not possible # Filter Quantity greater than zero # Filtering quantity greater than zero uk_data = uk_data [( uk_data [ 'Quantity' ] > 0 )] uk_data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 354345 entries, 0 to 541893 Data columns (total 8 columns): InvoiceNo 354345 non-null object StockCode 354345 non-null object Description 354345 non-null object Quantity 354345 non-null int64 InvoiceDate 354345 non-null datetime64[ns] UnitPrice 354345 non-null float64 CustomerID 354345 non-null float64 Country 354345 non-null object dtypes: datetime64[ns](1), float64(2), int64(1), object(4) memory usage: 24.3+ MB 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Filtering the required columns # for RFM analysis # InvoiceNo helps you to count the number of time transaction # performed(frequency) # Quantity purchased in each transaction and # UnitPrice of each unit purchased by the customer # helps calculating the total purchased amount uk_data = uk_data [[ 'CustomerID' , 'InvoiceDate' , 'InvoiceNo' , 'Quantity' , 'UnitPrice' ]] uk_data [ 'TotalPrice' ] = uk_data [ 'Quantity' ] * \\ uk_data [ 'UnitPrice' ] # InvoiceDate help you calculate recency of purchase uk_data [ 'InvoiceDate' ] . min (), uk_data [ 'InvoiceDate' ] . max () 1 (Timestamp('2010-12-01 08:26:00'), Timestamp('2011-12-09 12:49:00')) 1 2 3 4 5 # Creating a constant PRESENT = dt . datetime ( 2011 , 12 , 10 ) # InvoiceDate help you calculate recency of purchase uk_data [ 'InvoiceDate' ] = pd . to_datetime ( uk_data [ 'InvoiceDate' ]) 1 uk_data . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } CustomerID InvoiceDate InvoiceNo Quantity UnitPrice TotalPrice 0 17850.0 2010-12-01 08:26:00 536365 6 2.55 15.30 1 17850.0 2010-12-01 08:26:00 536365 6 3.39 20.34 2 17850.0 2010-12-01 08:26:00 536365 8 2.75 22.00 3 17850.0 2010-12-01 08:26:00 536365 6 3.39 20.34 4 17850.0 2010-12-01 08:26:00 536365 6 3.39 20.34 RFM Analysis \u00b6 For Recency, calculate the number of days between present date and date of last purchase each customer. For Frequency, calculate the number of orders for each customer. For Monetary, calculate the sum of purchase price for each customer. 1 2 3 4 5 6 rfm = uk_data . groupby ( 'CustomerID' ) . \\ agg ({ 'InvoiceDate' : lambda date : ( PRESENT - date . max ()) . days , 'InvoiceNo' : lambda num : len ( num ), 'TotalPrice' : lambda price : price . sum ()}) rfm . columns 1 Index(['InvoiceDate', 'InvoiceNo', 'TotalPrice'], dtype='object') 1 2 3 4 # Change the name of columns rfm . columns = [ 'monetary' , 'recency' , 'frequency' ] rfm [ 'recency' ] = rfm [ 'recency' ] . astype ( int ) 1 rfm . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } monetary recency frequency CustomerID 12346.0 325 1 77183.60 12747.0 2 103 4196.01 12748.0 0 4596 33719.73 Computing Quantile of RFM values \u00b6 Customers with the lowest recency, highest frequency and monetary amounts considered as top customers. qcut isquantile-based discretization function. qcut bins the data based on sample quantiles. For example, 1000 values for 4 quantiles would produce a categorical object indicating quantile membership for each customer. 1 2 3 4 5 rfm [ 'r_quartile' ] = pd . qcut ( rfm [ 'recency' ], 4 , [ '1' , '2' , '3' , '4' ]) rfm [ 'f_quartile' ] = pd . qcut ( rfm [ 'frequency' ], 4 , [ '4' , '3' , '2' , '1' ]) rfm [ 'm_quartile' ] = pd . qcut ( rfm [ 'monetary' ], 4 , [ '4' , '3' , '2' , '1' ]) rfm . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } monetary recency frequency r_quartile f_quartile m_quartile CustomerID 12346.0 325 1 77183.60 1 1 1 12747.0 2 103 4196.01 4 1 4 12748.0 0 4596 33719.73 4 1 4 RFM Result Interpretation \u00b6 1 2 3 rfm [ 'RFM_Score' ] = rfm . r_quartile . astype ( str ) + rfm . f_quartile . astype ( str ) + rfm . m_quartile . astype ( str ) rfm . head ( 5 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } monetary recency frequency r_quartile f_quartile m_quartile RFM_Score CustomerID 12346.0 325 1 77183.60 1 1 1 111 12747.0 2 103 4196.01 4 1 4 414 12748.0 0 4596 33719.73 4 1 4 414 12749.0 3 199 4090.88 4 1 4 414 12820.0 3 59 942.34 3 2 4 324 1 2 3 # Filter out Top/Best customers rfm [ rfm [ 'RFM_Score' ] == '111' ] . sort_values ( 'monetary' , ascending = False ) . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } monetary recency frequency r_quartile f_quartile m_quartile RFM_Score CustomerID 16754.0 372 2 2002.4 1 1 1 111 12346.0 325 1 77183.6 1 1 1 111 15749.0 235 10 44534.3 1 1 1 111 16698.0 226 5 1998.0 1 1 1 111 13135.0 196 1 3096.0 1 1 1 111","title":"Introduction to Customer Segmentation"},{"location":"Introduction_to_Customer_Segmentation_in_Python/#need-of-customer-segmentation","text":"In the Retail sector, the various chain of hypermarkets generating an exceptionally large amount of data. This data is generated on a daily basis across the stores. This extensive database of customers transactions needs to analyze for designing profitable strategies. All customers have different-different kind of needs. With the increase in customer base and transaction, it is not easy to understand the requirement of each customer. Segmentation can play a better role in grouping those customers into various segments: It helps in identifying the most potential customers. It helps managers to easily communicate with a targetted group of the audience. It helps in selecting the best medium for communicating with the targetted segment. It improves the quality of service, loyalty, and retention. It improves customer relationship via better understanding needs of segments. It provides opportunities for upselling and cross-selling. It helps managers to design special offers for targetted customers, to encourage them to buy more products. It helps companies to stay a step ahead of competitors. It also helps in identifying new products that customers could be interested in.","title":"Need of Customer Segmentation"},{"location":"Introduction_to_Customer_Segmentation_in_Python/#types-of-segmentation","text":"","title":"Types of Segmentation"},{"location":"Introduction_to_Customer_Segmentation_in_Python/#customer-segmentation-using-rfm-analysis","text":"RFM (Recency, Frequency, Monetary) analysis is a behavior-based approach grouping customers into segments. It groups the customers on the basis of their previous purchase transactions. How recently, how often, and how much did a customer buy. RFM filters customers into various groups for the purpose of better service. Recency (R): Who have purchased recently? Number of days since last purchase (least recency). Frequency (F): Who has purchased frequently? It means the total number of purchases. ( high frequency). Monetary Value(M): Who have high purchase amount? It means the total money customer spent (high monetary value). Steps of RFM(Recency, Frequency, Monetary): Calculate the Recency, Frequency, Monetary values for each customer. Add segment bin values to RFM table using quartile. Sort the customer RFM score in ascending order.","title":"Customer Segmentation using RFM analysis"},{"location":"Introduction_to_Customer_Segmentation_in_Python/#rfm-in-python","text":"","title":"RFM in Python"},{"location":"Introduction_to_Customer_Segmentation_in_Python/#importing-data","text":"The dataset is over 500K lines! 1 2 3 4 5 # Importing the necessary modules import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import datetime as dt 1 2 # Loading the dataset data = pd . read_csv ( \"Online_Retail.csv\" , sep = ';' , decimal = ',' ) 1 2 # Examining the data data . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } InvoiceNo StockCode Description Quantity InvoiceDate UnitPrice CustomerID Country 0 536365 85123A WHITE HANGING HEART T-LIGHT HOLDER 6 2010-12-01 08:26 2.55 17850.0 United Kingdom 1 536365 71053 WHITE METAL LANTERN 6 2010-12-01 08:26 3.39 17850.0 United Kingdom 2 536365 84406B CREAM CUPID HEARTS COAT HANGER 8 2010-12-01 08:26 2.75 17850.0 United Kingdom 1 2 # Examining the fields (culomns) data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 541909 entries, 0 to 541908 Data columns (total 8 columns): InvoiceNo 541909 non-null object StockCode 541909 non-null object Description 540455 non-null object Quantity 541909 non-null int64 InvoiceDate 541909 non-null object UnitPrice 541909 non-null float64 CustomerID 406829 non-null float64 Country 541909 non-null object dtypes: float64(2), int64(1), object(5) memory usage: 33.1+ MB 1 2 data [ 'InvoiceDate' ] = data [ 'InvoiceDate' ] . astype ( 'datetime64[ns]' ) data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 541909 entries, 0 to 541908 Data columns (total 8 columns): InvoiceNo 541909 non-null object StockCode 541909 non-null object Description 540455 non-null object Quantity 541909 non-null int64 InvoiceDate 541909 non-null datetime64[ns] UnitPrice 541909 non-null float64 CustomerID 406829 non-null float64 Country 541909 non-null object dtypes: datetime64[ns](1), float64(2), int64(1), object(4) memory usage: 33.1+ MB 1 2 # Removing null ID data = data [ pd . notnull ( data [ 'CustomerID' ])] 1 2 # Removing duplicates filtered_data = data [[ 'Country' , 'CustomerID' ]] . drop_duplicates ()","title":"Importing Data"},{"location":"Introduction_to_Customer_Segmentation_in_Python/#data-insights","text":"1 2 3 # Filtering the top ten country's customer # Counting the number of occurrence by country filtered_data . Country . value_counts ()[: 10 ] . plot ( kind = 'bar' ); 1 2 3 4 # Filtering for the United Kingdom uk_data = data [ data . Country == 'United Kingdom' ] uk_data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 361878 entries, 0 to 541893 Data columns (total 8 columns): InvoiceNo 361878 non-null object StockCode 361878 non-null object Description 361878 non-null object Quantity 361878 non-null int64 InvoiceDate 361878 non-null datetime64[ns] UnitPrice 361878 non-null float64 CustomerID 361878 non-null float64 Country 361878 non-null object dtypes: datetime64[ns](1), float64(2), int64(1), object(4) memory usage: 24.8+ MB 1 2 # Getting summary statistics for the UK uk_data . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Quantity UnitPrice CustomerID count 361878.000000 361878.000000 361878.000000 mean 11.077029 3.256007 15547.871368 std 263.129266 70.654731 1594.402590 min -80995.000000 0.000000 12346.000000 25% 2.000000 1.250000 14194.000000 50% 4.000000 1.950000 15514.000000 75% 12.000000 3.750000 16931.000000 max 80995.000000 38970.000000 18287.000000 1 2 3 4 5 6 7 8 # Some of the customers have ordered in a negative quantity # Which is not possible # Filter Quantity greater than zero # Filtering quantity greater than zero uk_data = uk_data [( uk_data [ 'Quantity' ] > 0 )] uk_data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 354345 entries, 0 to 541893 Data columns (total 8 columns): InvoiceNo 354345 non-null object StockCode 354345 non-null object Description 354345 non-null object Quantity 354345 non-null int64 InvoiceDate 354345 non-null datetime64[ns] UnitPrice 354345 non-null float64 CustomerID 354345 non-null float64 Country 354345 non-null object dtypes: datetime64[ns](1), float64(2), int64(1), object(4) memory usage: 24.3+ MB 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Filtering the required columns # for RFM analysis # InvoiceNo helps you to count the number of time transaction # performed(frequency) # Quantity purchased in each transaction and # UnitPrice of each unit purchased by the customer # helps calculating the total purchased amount uk_data = uk_data [[ 'CustomerID' , 'InvoiceDate' , 'InvoiceNo' , 'Quantity' , 'UnitPrice' ]] uk_data [ 'TotalPrice' ] = uk_data [ 'Quantity' ] * \\ uk_data [ 'UnitPrice' ] # InvoiceDate help you calculate recency of purchase uk_data [ 'InvoiceDate' ] . min (), uk_data [ 'InvoiceDate' ] . max () 1 (Timestamp('2010-12-01 08:26:00'), Timestamp('2011-12-09 12:49:00')) 1 2 3 4 5 # Creating a constant PRESENT = dt . datetime ( 2011 , 12 , 10 ) # InvoiceDate help you calculate recency of purchase uk_data [ 'InvoiceDate' ] = pd . to_datetime ( uk_data [ 'InvoiceDate' ]) 1 uk_data . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } CustomerID InvoiceDate InvoiceNo Quantity UnitPrice TotalPrice 0 17850.0 2010-12-01 08:26:00 536365 6 2.55 15.30 1 17850.0 2010-12-01 08:26:00 536365 6 3.39 20.34 2 17850.0 2010-12-01 08:26:00 536365 8 2.75 22.00 3 17850.0 2010-12-01 08:26:00 536365 6 3.39 20.34 4 17850.0 2010-12-01 08:26:00 536365 6 3.39 20.34","title":"Data Insights"},{"location":"Introduction_to_Customer_Segmentation_in_Python/#rfm-analysis","text":"For Recency, calculate the number of days between present date and date of last purchase each customer. For Frequency, calculate the number of orders for each customer. For Monetary, calculate the sum of purchase price for each customer. 1 2 3 4 5 6 rfm = uk_data . groupby ( 'CustomerID' ) . \\ agg ({ 'InvoiceDate' : lambda date : ( PRESENT - date . max ()) . days , 'InvoiceNo' : lambda num : len ( num ), 'TotalPrice' : lambda price : price . sum ()}) rfm . columns 1 Index(['InvoiceDate', 'InvoiceNo', 'TotalPrice'], dtype='object') 1 2 3 4 # Change the name of columns rfm . columns = [ 'monetary' , 'recency' , 'frequency' ] rfm [ 'recency' ] = rfm [ 'recency' ] . astype ( int ) 1 rfm . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } monetary recency frequency CustomerID 12346.0 325 1 77183.60 12747.0 2 103 4196.01 12748.0 0 4596 33719.73","title":"RFM Analysis"},{"location":"Introduction_to_Customer_Segmentation_in_Python/#computing-quantile-of-rfm-values","text":"Customers with the lowest recency, highest frequency and monetary amounts considered as top customers. qcut isquantile-based discretization function. qcut bins the data based on sample quantiles. For example, 1000 values for 4 quantiles would produce a categorical object indicating quantile membership for each customer. 1 2 3 4 5 rfm [ 'r_quartile' ] = pd . qcut ( rfm [ 'recency' ], 4 , [ '1' , '2' , '3' , '4' ]) rfm [ 'f_quartile' ] = pd . qcut ( rfm [ 'frequency' ], 4 , [ '4' , '3' , '2' , '1' ]) rfm [ 'm_quartile' ] = pd . qcut ( rfm [ 'monetary' ], 4 , [ '4' , '3' , '2' , '1' ]) rfm . head ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } monetary recency frequency r_quartile f_quartile m_quartile CustomerID 12346.0 325 1 77183.60 1 1 1 12747.0 2 103 4196.01 4 1 4 12748.0 0 4596 33719.73 4 1 4","title":"Computing Quantile of RFM values"},{"location":"Introduction_to_Customer_Segmentation_in_Python/#rfm-result-interpretation","text":"1 2 3 rfm [ 'RFM_Score' ] = rfm . r_quartile . astype ( str ) + rfm . f_quartile . astype ( str ) + rfm . m_quartile . astype ( str ) rfm . head ( 5 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } monetary recency frequency r_quartile f_quartile m_quartile RFM_Score CustomerID 12346.0 325 1 77183.60 1 1 1 111 12747.0 2 103 4196.01 4 1 4 414 12748.0 0 4596 33719.73 4 1 4 414 12749.0 3 199 4090.88 4 1 4 414 12820.0 3 59 942.34 3 2 4 324 1 2 3 # Filter out Top/Best customers rfm [ rfm [ 'RFM_Score' ] == '111' ] . sort_values ( 'monetary' , ascending = False ) . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } monetary recency frequency r_quartile f_quartile m_quartile RFM_Score CustomerID 16754.0 372 2 2002.4 1 1 1 111 12346.0 325 1 77183.6 1 1 1 111 15749.0 235 10 44534.3 1 1 1 111 16698.0 226 5 1998.0 1 1 1 111 13135.0 196 1 3096.0 1 1 1 111","title":"RFM Result Interpretation"},{"location":"JN_CS/","text":"Foreword Cheat sheets and snippets. Anaconda \u00b6 Anaconda Cheat Sheet . PDF only. Conda Cheat Sheet . PDF. Jupyter Notebook \u00b6 Jupyter Notebook . PDF. Jupyter Notebook . PDF Objects \u00b6 Find, list, search, reset. 1 2 3 4 a = 10 b = 20.1 c = \"test\" d = [ 1 , 2 , 3 ] 1 who 1 a b c d 1 whos 1 2 3 4 5 6 Variable Type Data/Info ----------------------------- a int 10 b float 20.1 c str test d list n=3 1 reset 1 Once deleted, variables cannot be recovered. Proceed (y/[n])? y 1 who 1 Interactive namespace is empty. 1 2 3 4 a = 10 b = 20 c = \"test\" d = [ 1 , 2 , 3 ] 1 who 1 a b c d Logging \u00b6 Start, state, on, off. 1 logstate 1 Logging has not been activated. 1 logstart 1 2 3 4 5 6 7 Activating auto-logging. Current session state plus future input saved. Filename : ipython_log.py Mode : rotate Output logging : False Raw input log : False Timestamping : False State : active 1 logstate 1 2 3 4 5 6 Filename : ipython_log . py Mode : rotate Output logging : False Raw input log : False Timestamping : False State : active 1 logoff 1 Switching logging OFF 1 logstate 1 2 3 4 5 6 Filename : ipython_log . py Mode : rotate Output logging : False Raw input log : False Timestamping : False State : temporarily suspended 1 logon 1 Switching logging ON 1 logstate 1 2 3 4 5 6 Filename : ipython_log . py Mode : rotate Output logging : False Raw input log : False Timestamping : False State : active Magic & Help \u00b6 List, help. 1 lsmagic 1 2 3 4 5 6 7 Available line magics : %alias %alias_magic %autocall %automagic %autosave %bookmark %cat %cd %clear %colors %config %connect_info %cp %debug %dhist %dirs %doctest_mode %ed %edit %env %gui %hist %history %killbgscripts %ldir %less %lf %lk %ll %load %load_ext %loadpy %logoff %logon %logstart %logstate %logstop %ls %lsmagic %lx %macro %magic %man %matplotlib %mkdir %more %mv %notebook %page %pastebin %pdb %pdef %pdoc %pfile %pinfo %pinfo2 %popd %pprint %precision %profile %prun %psearch %psource %pushd %pwd %pycat %pylab %qtconsole %quickref %recall %rehashx %reload_ext %rep %rerun %reset %reset_selective %rm %rmdir %run %save %sc %set_env %store %sx %system %tb %time %timeit %unalias %unload_ext %who %who_ls %whos %xdel %xmode Available cell magics : %%! %% HTML %% SVG % %bash % %capture % %debug % %file % %html % %javascript % %js % %latex % %perl % %prun % %pypy % %python % %python2 % %python3 % %ruby % %script % %sh % %svg % %sx % %system % %time % %timeit % %writefile Automagic is ON , % prefix IS NOT needed for line magics . Open a window about magic commands. 1 magic Open a window about the command (minimum, maximum help). 1 % alias ? 1 % alias ?? Function \u00b6 docstrings, info, source. 1 2 3 4 5 6 def print_number ( nb ): \"\"\" The docstring. print_number prints Hi! \"\"\" print ( \"Hi!\" * nb ) 1 2 print_number ( 1 ) print_number ( 5 ) 1 2 Hi! Hi!Hi!Hi!Hi!Hi! 1 pdef print_number 1 print_number(nb) Open a window about the docstrings. 1 pdoc print_number Open a window about the function. 1 pinfo print_number Navigation \u00b6 Bookmark, history. 1 bookmark - l 1 2 3 Current bookmarks: name -&gt; path untitled -&gt; /home/user Add a bookmark. 1 bookmark aaa path 1 bookmark - l 1 2 3 4 Current bookmarks: aaa -&gt; path name -&gt; path untitled -&gt; /home/user Delete a bookmark. 1 bookmark - d aaa 1 bookmark - l 1 2 3 Current bookmarks: name -&gt; path untitled -&gt; /home/user Print the directory navigation history. 1 dhist 1 2 Directory history (kept in _dh) 0: /home/user External \u00b6 Bash, script. The following is an example of one bash command. 1 ! pwd 1 /home/user 1 abc = ! pwd 1 abc 1 ['/home/user'] 1 alias 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Total number of aliases: 12 [('cat', 'cat'), ('cp', 'cp'), ('ldir', 'ls -F -o --color %l | grep /$'), ('lf', 'ls -F -o --color %l | grep ^-'), ('lk', 'ls -F -o --color %l | grep ^l'), ('ll', 'ls -F -o --color'), ('ls', 'ls -F --color'), ('lx', 'ls -F -o --color %l | grep ^-..x'), ('mkdir', 'mkdir'), ('mv', 'mv'), ('rm', 'rm'), ('rmdir', 'rmdir')] Invoke an external script into IPython. 1 run print_text . py 1 Hi! Invoke an external script into IPython and open a window about the script\u2019s profile. 1 run - p print_text . py 1 Hi! Load the external script into IPython ( load print_text.py turns into # %load print_text.py ). 1 2 3 4 5 6 7 8 9 # %load print_text.py def print_text (): \"\"\" The docstring. print_text prints Hi! \"\"\" print ( \"Hi!\" ) print_text ()","title":"Jupyter Notebook Cheat Sheets"},{"location":"JN_CS/#jupyter-notebook","text":"Jupyter Notebook . PDF. Jupyter Notebook . PDF","title":"Jupyter Notebook"},{"location":"JN_CS/#objects","text":"Find, list, search, reset. 1 2 3 4 a = 10 b = 20.1 c = \"test\" d = [ 1 , 2 , 3 ] 1 who 1 a b c d 1 whos 1 2 3 4 5 6 Variable Type Data/Info ----------------------------- a int 10 b float 20.1 c str test d list n=3 1 reset 1 Once deleted, variables cannot be recovered. Proceed (y/[n])? y 1 who 1 Interactive namespace is empty. 1 2 3 4 a = 10 b = 20 c = \"test\" d = [ 1 , 2 , 3 ] 1 who 1 a b c d","title":"Objects"},{"location":"JN_CS/#logging","text":"Start, state, on, off. 1 logstate 1 Logging has not been activated. 1 logstart 1 2 3 4 5 6 7 Activating auto-logging. Current session state plus future input saved. Filename : ipython_log.py Mode : rotate Output logging : False Raw input log : False Timestamping : False State : active 1 logstate 1 2 3 4 5 6 Filename : ipython_log . py Mode : rotate Output logging : False Raw input log : False Timestamping : False State : active 1 logoff 1 Switching logging OFF 1 logstate 1 2 3 4 5 6 Filename : ipython_log . py Mode : rotate Output logging : False Raw input log : False Timestamping : False State : temporarily suspended 1 logon 1 Switching logging ON 1 logstate 1 2 3 4 5 6 Filename : ipython_log . py Mode : rotate Output logging : False Raw input log : False Timestamping : False State : active","title":"Logging"},{"location":"JN_CS/#magic-help","text":"List, help. 1 lsmagic 1 2 3 4 5 6 7 Available line magics : %alias %alias_magic %autocall %automagic %autosave %bookmark %cat %cd %clear %colors %config %connect_info %cp %debug %dhist %dirs %doctest_mode %ed %edit %env %gui %hist %history %killbgscripts %ldir %less %lf %lk %ll %load %load_ext %loadpy %logoff %logon %logstart %logstate %logstop %ls %lsmagic %lx %macro %magic %man %matplotlib %mkdir %more %mv %notebook %page %pastebin %pdb %pdef %pdoc %pfile %pinfo %pinfo2 %popd %pprint %precision %profile %prun %psearch %psource %pushd %pwd %pycat %pylab %qtconsole %quickref %recall %rehashx %reload_ext %rep %rerun %reset %reset_selective %rm %rmdir %run %save %sc %set_env %store %sx %system %tb %time %timeit %unalias %unload_ext %who %who_ls %whos %xdel %xmode Available cell magics : %%! %% HTML %% SVG % %bash % %capture % %debug % %file % %html % %javascript % %js % %latex % %perl % %prun % %pypy % %python % %python2 % %python3 % %ruby % %script % %sh % %svg % %sx % %system % %time % %timeit % %writefile Automagic is ON , % prefix IS NOT needed for line magics . Open a window about magic commands. 1 magic Open a window about the command (minimum, maximum help). 1 % alias ? 1 % alias ??","title":"Magic &amp; Help"},{"location":"JN_CS/#function","text":"docstrings, info, source. 1 2 3 4 5 6 def print_number ( nb ): \"\"\" The docstring. print_number prints Hi! \"\"\" print ( \"Hi!\" * nb ) 1 2 print_number ( 1 ) print_number ( 5 ) 1 2 Hi! Hi!Hi!Hi!Hi!Hi! 1 pdef print_number 1 print_number(nb) Open a window about the docstrings. 1 pdoc print_number Open a window about the function. 1 pinfo print_number","title":"Function"},{"location":"JN_CS/#navigation","text":"Bookmark, history. 1 bookmark - l 1 2 3 Current bookmarks: name -&gt; path untitled -&gt; /home/user Add a bookmark. 1 bookmark aaa path 1 bookmark - l 1 2 3 4 Current bookmarks: aaa -&gt; path name -&gt; path untitled -&gt; /home/user Delete a bookmark. 1 bookmark - d aaa 1 bookmark - l 1 2 3 Current bookmarks: name -&gt; path untitled -&gt; /home/user Print the directory navigation history. 1 dhist 1 2 Directory history (kept in _dh) 0: /home/user","title":"Navigation"},{"location":"JN_CS/#external","text":"Bash, script. The following is an example of one bash command. 1 ! pwd 1 /home/user 1 abc = ! pwd 1 abc 1 ['/home/user'] 1 alias 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Total number of aliases: 12 [('cat', 'cat'), ('cp', 'cp'), ('ldir', 'ls -F -o --color %l | grep /$'), ('lf', 'ls -F -o --color %l | grep ^-'), ('lk', 'ls -F -o --color %l | grep ^l'), ('ll', 'ls -F -o --color'), ('ls', 'ls -F --color'), ('lx', 'ls -F -o --color %l | grep ^-..x'), ('mkdir', 'mkdir'), ('mv', 'mv'), ('rm', 'rm'), ('rmdir', 'rmdir')] Invoke an external script into IPython. 1 run print_text . py 1 Hi! Invoke an external script into IPython and open a window about the script\u2019s profile. 1 run - p print_text . py 1 Hi! Load the external script into IPython ( load print_text.py turns into # %load print_text.py ). 1 2 3 4 5 6 7 8 9 # %load print_text.py def print_text (): \"\"\" The docstring. print_text prints Hi! \"\"\" print ( \"Hi!\" ) print_text ()","title":"External"},{"location":"LPTHW, Python Code Snippets/","text":"Foreword Code snippets. Python 2. A Battleship Game \u00b6 build, board, grid, row, column, list, assign, random, value, loop, conditional, if, else, elif 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 from random import randint board = [] for x in range ( 5 ): board . append ([ \"O\" ] * 5 ) def print_board ( board ): for row in board : print \" \" . join ( row ) print \" \\n Let's play Battleship! You have 4 strikes to sink by ship. \\n \" print_board ( board ) def random_row ( board ): return randint ( 0 , len ( board ) - 1 ) def random_col ( board ): return randint ( 0 , len ( board ) - 1 ) ship_row = random_row ( board ) ship_col = random_col ( board ) #ship_row = 1 to test and fix to (1,1) #ship_col = 1 for turn in range ( 5 ): turn += 1 if turn == 5 : print \" \\n Game Over\" print \"The ship was here => I \\n \" board [ ship_row - 1 ][ ship_col - 1 ] = \"I\" print_board ( board ) break else : print \" \\n Turn\" , turn guess_row = int ( raw_input ( \"Guess Row (1 to 5): \" )) guess_col = int ( raw_input ( \"Guess Col (1 to 5): \" )) if ( guess_row == ship_row ) and ( guess_col == ship_col ): print \" \\n Congratulations! You sank my battleship! \\n \" guess_row = guess_row - 1 guess_col = guess_col - 1 board [ guess_row ][ guess_col ] = \"S\" print_board ( board ) print \" \\n Game Over\" break elif ( guess_row < 1 or guess_row > 5 ) or ( guess_col < 1 or guess_col > 5 ): print \" \\n Oops, that's not even in the ocean. \\n \" elif board [ guess_row - 1 ][ guess_col - 1 ] == \"X\" : print \" \\n You guessed that one already. \\n \" print_board ( board ) else : print \" \\n You missed my battleship! \\n \" board [ guess_row - 1 ][ guess_col - 1 ] = \"X\" print_board ( board ) An Interactive Calendar \u00b6 add, delete, update, exit, dictionary, loop, conditional, if, else, elif 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 from time import sleep , strftime his_name = raw_input ( \"What is your first name? \" ) his_name = str ( his_name ) # calendar will store the dates as keys and the events as values calendar = {} def welcome (): print ( \"Welcome \" + his_name + \".\" ) print ( \"Calendar starting...\" ) sleep ( 0.5 ) print ( \"Today is: \" + strftime ( \"%A, %B %d , %Y\" )) print ( \"It is currently: \" + strftime ( \"%H:%M:%S\" )) sleep ( 0.5 ) def start_calendar (): welcome () print ( \"What would you like to do?\" ) print ( calendar ) start = True while start : user_choice = raw_input ( \"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \" ) . upper () if user_choice == 'V' : # V if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty\" ) else : print ( calendar ) elif user_choice == 'U' : # U if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty\" ) else : print ( calendar ) date = raw_input ( \"What date? \" ) update = raw_input ( \"Enter the update: \" ) # could be more control here... calendar [ date ] = update # without checking if the date is valid or if it already exists (which could override things)! print ( \"Successful!\" ) print ( calendar ) elif user_choice == 'A' : # A event = raw_input ( \"Enter event: \" ) date = raw_input ( \"Enter date (MM/DD/YYYY): \" ) if ( len ( date ) > 10 or int ( date [ 6 :]) < int ( strftime ( \"%Y\" ))): # could be more control... print ( \"Invalid date format.\" ) try_again = raw_input ( \"Try Again? 'Y' for Yes, 'N' for No: \" ) . upper () if try_again == 'Y' : continue #! break, continue, start is still True else : start == False else : calendar [ date ] = event # without checking if the date is valid or if it already exists (which could override things)! print ( \"Successful!\" ) print ( calendar ) elif user_choice == 'D' : # D if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty.\" ) else : print ( calendar ) event = raw_input ( \"What event? \" ) # could be more option like: What date? for date in calendar . keys (): if event == calendar [ date ]: del calendar [ date ] # del a[], [1], [\"a\"], [1:3], [5:], [:9], etc. print ( \"Deleted.\" ) print ( calendar ) else : print ( \"Incorrect.\" ) elif user_choice == 'X' : # X start = False else : print ( \"Invalid command.\" ) break start_calendar () A Gradebook for Students \u00b6 students, marks, grades, compute, average, weighted First, create 3 dictionaries. Second, add names, marks. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 lloyd = { \"name\" : \"Lloyd\" , \"homework\" : [ 90.0 , 97.0 , 75.0 , 92.0 ], \"quizzes\" : [ 88.0 , 40.0 , 94.0 ], \"tests\" : [ 75.0 , 90.0 ] } alice = { \"name\" : \"Alice\" , \"homework\" : [ 100.0 , 92.0 , 98.0 , 100.0 ], \"quizzes\" : [ 82.0 , 83.0 , 91.0 ], \"tests\" : [ 89.0 , 97.0 ] } tyler = { \"name\" : \"Tyler\" , \"homework\" : [ 0.0 , 87.0 , 75.0 , 22.0 ], \"quizzes\" : [ 0.0 , 75.0 , 78.0 ], \"tests\" : [ 100.0 , 100.0 ] } Third, make a list. 1 2 3 4 5 6 7 students = [ lloyd , alice , tyler ] cases = [ \"homework\" , \"quizzes\" , \"tests\" ] w_calc = [ 0.10 , 0.30 , 0.60 ] all_average = 0.0 Print out. 1 2 3 4 5 6 7 8 9 10 11 12 13 print \" \\n Students' Grades\" . upper () print \"\" for student in students : print student [ \"name\" ] . upper () print \"Homework\" print student [ \"homework\" ] print \"Quizzes\" print student [ \"quizzes\" ] print \"Tests\" print student [ \"tests\" ] print \"\" Compute averages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def average ( numbers ): total = sum ( numbers ) temp = float ( total ) / len ( numbers ) return temp print \"Students' Averages\" . upper () print \"\" for c in cases : cc = c . upper () print cc for student in students : numbers = student [ c ] calc = round ( average ( numbers ), 1 ) print student [ \"name\" ] print calc print \"\" Compute weighted averages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def w_average ( marks ): #w_calc = [0.10, 0.30, 0.60] s_calc = 0 w = 0 while w < len ( w_calc ): s_calc += w_calc [ w ] * marks [ w ] w += 1 return s_calc def get_letter_grade ( score ): if score >= 90 : return \"A\" elif score >= 80 : return \"B\" elif score >= 70 : return \"C\" elif score >= 60 : return \"D\" else : return \"F\" def get_class_average ( ind ): class_total = round ( ind / len ( students ), 1 ) return class_total print \"Students' Weighted Average\" . upper () print \" Ponderation [Homeworks, Quizzes, Tests]: [\" + str ( float ( w_calc [ 0 ]) * 100 ) + \", \" + str ( float ( w_calc [ 1 ]) * 100 ) + \", \" + str ( float ( w_calc [ 2 ]) * 100 ) + \"]\" print \"\" for student in students : print ( student [ \"name\" ] + \"'s marks are:\" ) . upper () l_calc = [] for c in cases : numbers = student [ c ] calc = round ( average ( numbers ), 1 ) l_calc . append ( calc ) print l_calc print ( \"For a weighted average of:\" ) ind_average = round ( w_average ( l_calc ), 1 ) print ind_average print ( \"Standing for a:\" ) print get_letter_grade ( ind_average ) all_average += ind_average print \"\" print ( \"Finally, The class average is:\" ) . upper () print get_class_average ( all_average ) Guess Games \u00b6 random, generate, number, conditional, if, else, ifel, loop Guess a number. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import random print \"Lucky Numbers! 3 numbers will be generated.\" print \"If one of them is a '5', you lose!\" count = 0 while count < 3 : num = random . randint ( 1 , 6 ) print num if num == 5 : print \"Sorry, you lose!\" break count += 1 else : print \"You win!\" Guess a number (more). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from random import randint # Generates a number from 1 through 10 inclusive random_number = randint ( 1 , 10 ) # print random_number guesses_left = 3 print \"Guess right!\" while guesses_left > 0 : print \"You have \" + str ( guesses_left ) + \" attempts.\" guess = raw_input ( \"Guess a number from 1 to 10: \" ) if int ( guess ) == random_number : print \"You win!\" break elif guesses_left == 1 : print \"You lose.\" break else : guesses_left -= 1 print \"Try again.\" Roll a dice. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 from random import randint from time import sleep def get_user_guess (): user_guess = int ( raw_input ( \"Guess a number: \" )) return user_guess def roll_dice ( number_of_sides ): first_roll = randint ( 1 , number_of_sides ) second_roll = randint ( 1 , number_of_sides ) max_value = number_of_sides * 2 print \"The maximum value is: \" + str ( max_value ) sleep ( 1 ) user_guess = get_user_guess () if user_guess > max_value : print \"Your guess is higher than the max allowed (\" + str ( max_value ) + \"). Please, take another guess.\" return # exit the if block is condition met else : print \"Rolling...\" sleep ( 1 ) print \"First roll is: %d \" % ( first_roll ) sleep ( 1 ) print \"Second roll is: %d \" % ( second_roll ) total_roll = first_roll + second_roll print \"Result...\" sleep ( 1 ) if user_guess > total_roll : print \"You win since your guess, \" + str ( user_guess ) + \", is greater than the total roll, \" + str ( total_roll ) return # exit else : print \"You lose!\" return # exit roll_dice ( 6 ) Rock, paper, Scissors. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 from random import randint from time import sleep options = [ \"R\" , \"P\" , \"S\" ] LOSE = \"You lost!\" # constant, uppercase WIN = \"You win!\" def decide_winner ( user_choice , computer_choice ): print ( \"You picked: \" + str ( user_choice )) print \"Computer selecting...\" sleep ( 1 ) print ( \"Computer picks: \" + str ( computer_choice )) user_choice_index = options . index ( user_choice ) computer_choice_index = options . index ( computer_choice ) # !!!!! if user_choice_index == computer_choice_index : print \"Tie!\" elif user_choice_index == 0 and computer_choice_index == 2 : print WIN elif user_choice_index == 1 and computer_choice_index == 0 : print WIN elif user_choice_index == 2 and computer_choice_index == 1 : print WIN elif user_choice_index > 2 : print \"Invalid choice!!!\" else : print LOSE def play_RPS (): print \"Let's pay Rock-Paper-Scissors\" user_choice = raw_input ( \"Select R for Rock, P for Paper, or S for Scissors: \" ) sleep ( 1 ) user_choice = user_choice . upper () # computer_choice = options[randint(0,2)] # pull out an element from a list, the 1st (0) out of 3 (2) computer_choice = options [ randint ( 0 , len ( options ) - 1 )] # This will ensure that if we ever add more options to the game, we won't have to change this line of code. decide_winner ( user_choice , computer_choice ) play_RPS () Regex Tools \u00b6 Remove vowels 1 2 3 4 5 6 7 8 9 10 def anti_vowel ( text ): vowels = \"aAeEiIoOuU\" for char in text : for vow in vowels : if vow == char : text = text . replace ( char , \"\" ) return text print anti_vowel ( \"allo\" ) Remove all but punctuation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def anti_vowel ( text ): text = text . lower () vowels = \"abcdefghijklmnopqrstuvwxyz1234567890$-\" for char in text : for vow in vowels : if vow == char : text = text . replace ( char , \"\" ) for char in text : if char == \" \" : text = text . replace ( char , \"\" ) return text print anti_vowel ( \"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\\" ID \\\" associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\" ) Scrape a text. urllib2, scrape, scrapy, parse, parser, split, extract, subset, join, project, gutenberg, split, conditional, count, occurences 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import urllib2 response = urllib2 . urlopen ( 'http://gutenberg.org/' ) # find Les Miserables by Victor Hugo # http://www.gutenberg.org/ebooks/135 # the book is available in HTML, epub with images, w/o images, kindle with images, w/o images, and more... response = urllib2 . urlopen ( 'http://www.gutenberg.org/files/135/135-h/135-h.htm' ) html = response . read () print html sad = 0 list_of_words = html . split ( ' ' ) for word in list_of_words : if word == 'sad' : sad += 1 print sad # count occurences Scrabble score. dictionary, count, conditonal, if, loop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 score = { \"a\" : 1 , \"c\" : 3 , \"b\" : 3 , \"e\" : 1 , \"d\" : 2 , \"g\" : 2 , \"f\" : 4 , \"i\" : 1 , \"h\" : 4 , \"k\" : 5 , \"j\" : 8 , \"m\" : 3 , \"l\" : 1 , \"o\" : 1 , \"n\" : 1 , \"q\" : 10 , \"p\" : 3 , \"s\" : 1 , \"r\" : 1 , \"u\" : 1 , \"t\" : 1 , \"w\" : 4 , \"v\" : 4 , \"y\" : 4 , \"x\" : 8 , \"z\" : 10 } def scrabble_score ( word ): word2 = word . lower () print word2 + \":\" , points = 0 for letter in word2 : if letter == str ( letter ): points += score [ letter ] return points print scrabble_score ( \"ab\" ) print scrabble_score ( \"allo\" ) print scrabble_score ( \"xylophone\" ) print scrabble_score ( \"coding\" ) print scrabble_score ( \"yak\" ) RGB-HEX Converter \u00b6 convert, bitwise, hexadecimal, hex, rgb, color 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def rgb_hex (): invalid_msg = \"Invalid entry\" red = int ( raw_input ( \"Enter a 'red' (R) value, from 0 to 255: \" )) if red < 0 or red > 255 : print invalid_msg return # return will exit the function, w/o return, the function jumps to the next line... green = int ( raw_input ( \"Enter a 'green' (G) value, from 0 to 255: \" )) if green < 0 or green > 255 : print invalid_msg return blue = int ( raw_input ( \"Enter a 'blue' (B) value, from 0 to 255: \" )) if blue < 0 or blue > 255 : print invalid_msg return val = red << 16 + green << 8 + blue # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character. # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift). # Become familiar with bits by reading more here. print \" %s \" % ( hex ( val )[ 2 :] . upper ()) # string formatting def hex_rgb (): invalid_msg = \"Invalid entry\" hex_val = raw_input ( \"Enter a color (six hexadecimal digits): \" ) if len ( hex_val ) != 6 : print \"Invalid Entry\" else : hex_val = int ( hex_val , 16 ) two_hex_digits = 2 ** 8 blue = hex_val % two_hex_digits hex_val = hex_val >> 8 green = hex_val % two_hex_digits hex_val = hex_val >> 8 red = hex_val % two_hex_digits print \"Red: %s Green: %s Blue: %s \" % ( red , green , blue ) def convert (): while True : option = str ( raw_input ( \"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \" )) if option == '1' : print \"RGB to Hex...\" rgb_hex () elif option == '2' : print \"Hex to RGB...\" hex_rgb () elif option == 'X' or option == 'x' : break else : print \"Error\" convert () Project DNA Analysis \u00b6 Given the three suspects\u2019 DNA and the sample DNA retrieved from the keyboard, figure out who the spy is! list, open, close, file, read, line, loop, conditional, if, match 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 sample = [ 'GTA' , 'GGG' , 'CAC' ] def read_dna ( dna_file ): dna_data = \"\" # empty string with open ( dna_file , \"r\" ) as f : # f = open(dna_file, \"r\"); with, as for line in f : dna_data += line return dna_data def dna_codons ( dna ): codons = [] for i in range ( 0 , len ( dna ), 3 ): # slice strings of 3 letters if i + 3 < len ( dna ): # make sure that you don't add a string to the codon list that isn't at least 3 letters long codons . append ( dna [ i : i + 3 ]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3 return codons def match_dna ( dna ): matches = 0 for codon in dna : if codon in sample : # if ,in matches += 1 return matches def is_criminal ( dna_sample ): dna_data = read_dna ( dna_sample ) codons = dna_codons ( dna_data ) num_matches = match_dna ( codons ) if num_matches >= 3 : print (( dna_sample )[: - 4 ]) . upper (), print ( \": number of matches = \" + str ( num_matches ) + \"; the investigation will proceed further more with this suspect.\" ) else : print (( dna_sample )[: - 4 ]) . upper (), print ( \": no evidence; the suspect can be freed.\" ) a = \"suspect1.txt\" is_criminal ( a ) a = \"suspect2.txt\" is_criminal ( a ) a = \"suspect3.txt\" is_criminal ( a ) suspect1.txt 1 ATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT suspect2.txt 1 CCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG suspect3.txt 1 TCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA","title":"LPTHW, Python Code Snippets"},{"location":"LPTHW, Python Code Snippets/#an-interactive-calendar","text":"add, delete, update, exit, dictionary, loop, conditional, if, else, elif 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 from time import sleep , strftime his_name = raw_input ( \"What is your first name? \" ) his_name = str ( his_name ) # calendar will store the dates as keys and the events as values calendar = {} def welcome (): print ( \"Welcome \" + his_name + \".\" ) print ( \"Calendar starting...\" ) sleep ( 0.5 ) print ( \"Today is: \" + strftime ( \"%A, %B %d , %Y\" )) print ( \"It is currently: \" + strftime ( \"%H:%M:%S\" )) sleep ( 0.5 ) def start_calendar (): welcome () print ( \"What would you like to do?\" ) print ( calendar ) start = True while start : user_choice = raw_input ( \"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \" ) . upper () if user_choice == 'V' : # V if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty\" ) else : print ( calendar ) elif user_choice == 'U' : # U if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty\" ) else : print ( calendar ) date = raw_input ( \"What date? \" ) update = raw_input ( \"Enter the update: \" ) # could be more control here... calendar [ date ] = update # without checking if the date is valid or if it already exists (which could override things)! print ( \"Successful!\" ) print ( calendar ) elif user_choice == 'A' : # A event = raw_input ( \"Enter event: \" ) date = raw_input ( \"Enter date (MM/DD/YYYY): \" ) if ( len ( date ) > 10 or int ( date [ 6 :]) < int ( strftime ( \"%Y\" ))): # could be more control... print ( \"Invalid date format.\" ) try_again = raw_input ( \"Try Again? 'Y' for Yes, 'N' for No: \" ) . upper () if try_again == 'Y' : continue #! break, continue, start is still True else : start == False else : calendar [ date ] = event # without checking if the date is valid or if it already exists (which could override things)! print ( \"Successful!\" ) print ( calendar ) elif user_choice == 'D' : # D if len ( calendar . keys ()) < 1 : print ( \"The calendar is empty.\" ) else : print ( calendar ) event = raw_input ( \"What event? \" ) # could be more option like: What date? for date in calendar . keys (): if event == calendar [ date ]: del calendar [ date ] # del a[], [1], [\"a\"], [1:3], [5:], [:9], etc. print ( \"Deleted.\" ) print ( calendar ) else : print ( \"Incorrect.\" ) elif user_choice == 'X' : # X start = False else : print ( \"Invalid command.\" ) break start_calendar ()","title":"An Interactive Calendar"},{"location":"LPTHW, Python Code Snippets/#a-gradebook-for-students","text":"students, marks, grades, compute, average, weighted First, create 3 dictionaries. Second, add names, marks. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 lloyd = { \"name\" : \"Lloyd\" , \"homework\" : [ 90.0 , 97.0 , 75.0 , 92.0 ], \"quizzes\" : [ 88.0 , 40.0 , 94.0 ], \"tests\" : [ 75.0 , 90.0 ] } alice = { \"name\" : \"Alice\" , \"homework\" : [ 100.0 , 92.0 , 98.0 , 100.0 ], \"quizzes\" : [ 82.0 , 83.0 , 91.0 ], \"tests\" : [ 89.0 , 97.0 ] } tyler = { \"name\" : \"Tyler\" , \"homework\" : [ 0.0 , 87.0 , 75.0 , 22.0 ], \"quizzes\" : [ 0.0 , 75.0 , 78.0 ], \"tests\" : [ 100.0 , 100.0 ] } Third, make a list. 1 2 3 4 5 6 7 students = [ lloyd , alice , tyler ] cases = [ \"homework\" , \"quizzes\" , \"tests\" ] w_calc = [ 0.10 , 0.30 , 0.60 ] all_average = 0.0 Print out. 1 2 3 4 5 6 7 8 9 10 11 12 13 print \" \\n Students' Grades\" . upper () print \"\" for student in students : print student [ \"name\" ] . upper () print \"Homework\" print student [ \"homework\" ] print \"Quizzes\" print student [ \"quizzes\" ] print \"Tests\" print student [ \"tests\" ] print \"\" Compute averages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def average ( numbers ): total = sum ( numbers ) temp = float ( total ) / len ( numbers ) return temp print \"Students' Averages\" . upper () print \"\" for c in cases : cc = c . upper () print cc for student in students : numbers = student [ c ] calc = round ( average ( numbers ), 1 ) print student [ \"name\" ] print calc print \"\" Compute weighted averages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def w_average ( marks ): #w_calc = [0.10, 0.30, 0.60] s_calc = 0 w = 0 while w < len ( w_calc ): s_calc += w_calc [ w ] * marks [ w ] w += 1 return s_calc def get_letter_grade ( score ): if score >= 90 : return \"A\" elif score >= 80 : return \"B\" elif score >= 70 : return \"C\" elif score >= 60 : return \"D\" else : return \"F\" def get_class_average ( ind ): class_total = round ( ind / len ( students ), 1 ) return class_total print \"Students' Weighted Average\" . upper () print \" Ponderation [Homeworks, Quizzes, Tests]: [\" + str ( float ( w_calc [ 0 ]) * 100 ) + \", \" + str ( float ( w_calc [ 1 ]) * 100 ) + \", \" + str ( float ( w_calc [ 2 ]) * 100 ) + \"]\" print \"\" for student in students : print ( student [ \"name\" ] + \"'s marks are:\" ) . upper () l_calc = [] for c in cases : numbers = student [ c ] calc = round ( average ( numbers ), 1 ) l_calc . append ( calc ) print l_calc print ( \"For a weighted average of:\" ) ind_average = round ( w_average ( l_calc ), 1 ) print ind_average print ( \"Standing for a:\" ) print get_letter_grade ( ind_average ) all_average += ind_average print \"\" print ( \"Finally, The class average is:\" ) . upper () print get_class_average ( all_average )","title":"A Gradebook for Students"},{"location":"LPTHW, Python Code Snippets/#guess-games","text":"random, generate, number, conditional, if, else, ifel, loop Guess a number. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import random print \"Lucky Numbers! 3 numbers will be generated.\" print \"If one of them is a '5', you lose!\" count = 0 while count < 3 : num = random . randint ( 1 , 6 ) print num if num == 5 : print \"Sorry, you lose!\" break count += 1 else : print \"You win!\" Guess a number (more). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from random import randint # Generates a number from 1 through 10 inclusive random_number = randint ( 1 , 10 ) # print random_number guesses_left = 3 print \"Guess right!\" while guesses_left > 0 : print \"You have \" + str ( guesses_left ) + \" attempts.\" guess = raw_input ( \"Guess a number from 1 to 10: \" ) if int ( guess ) == random_number : print \"You win!\" break elif guesses_left == 1 : print \"You lose.\" break else : guesses_left -= 1 print \"Try again.\" Roll a dice. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 from random import randint from time import sleep def get_user_guess (): user_guess = int ( raw_input ( \"Guess a number: \" )) return user_guess def roll_dice ( number_of_sides ): first_roll = randint ( 1 , number_of_sides ) second_roll = randint ( 1 , number_of_sides ) max_value = number_of_sides * 2 print \"The maximum value is: \" + str ( max_value ) sleep ( 1 ) user_guess = get_user_guess () if user_guess > max_value : print \"Your guess is higher than the max allowed (\" + str ( max_value ) + \"). Please, take another guess.\" return # exit the if block is condition met else : print \"Rolling...\" sleep ( 1 ) print \"First roll is: %d \" % ( first_roll ) sleep ( 1 ) print \"Second roll is: %d \" % ( second_roll ) total_roll = first_roll + second_roll print \"Result...\" sleep ( 1 ) if user_guess > total_roll : print \"You win since your guess, \" + str ( user_guess ) + \", is greater than the total roll, \" + str ( total_roll ) return # exit else : print \"You lose!\" return # exit roll_dice ( 6 ) Rock, paper, Scissors. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 from random import randint from time import sleep options = [ \"R\" , \"P\" , \"S\" ] LOSE = \"You lost!\" # constant, uppercase WIN = \"You win!\" def decide_winner ( user_choice , computer_choice ): print ( \"You picked: \" + str ( user_choice )) print \"Computer selecting...\" sleep ( 1 ) print ( \"Computer picks: \" + str ( computer_choice )) user_choice_index = options . index ( user_choice ) computer_choice_index = options . index ( computer_choice ) # !!!!! if user_choice_index == computer_choice_index : print \"Tie!\" elif user_choice_index == 0 and computer_choice_index == 2 : print WIN elif user_choice_index == 1 and computer_choice_index == 0 : print WIN elif user_choice_index == 2 and computer_choice_index == 1 : print WIN elif user_choice_index > 2 : print \"Invalid choice!!!\" else : print LOSE def play_RPS (): print \"Let's pay Rock-Paper-Scissors\" user_choice = raw_input ( \"Select R for Rock, P for Paper, or S for Scissors: \" ) sleep ( 1 ) user_choice = user_choice . upper () # computer_choice = options[randint(0,2)] # pull out an element from a list, the 1st (0) out of 3 (2) computer_choice = options [ randint ( 0 , len ( options ) - 1 )] # This will ensure that if we ever add more options to the game, we won't have to change this line of code. decide_winner ( user_choice , computer_choice ) play_RPS ()","title":"Guess Games"},{"location":"LPTHW, Python Code Snippets/#regex-tools","text":"Remove vowels 1 2 3 4 5 6 7 8 9 10 def anti_vowel ( text ): vowels = \"aAeEiIoOuU\" for char in text : for vow in vowels : if vow == char : text = text . replace ( char , \"\" ) return text print anti_vowel ( \"allo\" ) Remove all but punctuation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def anti_vowel ( text ): text = text . lower () vowels = \"abcdefghijklmnopqrstuvwxyz1234567890$-\" for char in text : for vow in vowels : if vow == char : text = text . replace ( char , \"\" ) for char in text : if char == \" \" : text = text . replace ( char , \"\" ) return text print anti_vowel ( \"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\\" ID \\\" associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\" ) Scrape a text. urllib2, scrape, scrapy, parse, parser, split, extract, subset, join, project, gutenberg, split, conditional, count, occurences 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import urllib2 response = urllib2 . urlopen ( 'http://gutenberg.org/' ) # find Les Miserables by Victor Hugo # http://www.gutenberg.org/ebooks/135 # the book is available in HTML, epub with images, w/o images, kindle with images, w/o images, and more... response = urllib2 . urlopen ( 'http://www.gutenberg.org/files/135/135-h/135-h.htm' ) html = response . read () print html sad = 0 list_of_words = html . split ( ' ' ) for word in list_of_words : if word == 'sad' : sad += 1 print sad # count occurences Scrabble score. dictionary, count, conditonal, if, loop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 score = { \"a\" : 1 , \"c\" : 3 , \"b\" : 3 , \"e\" : 1 , \"d\" : 2 , \"g\" : 2 , \"f\" : 4 , \"i\" : 1 , \"h\" : 4 , \"k\" : 5 , \"j\" : 8 , \"m\" : 3 , \"l\" : 1 , \"o\" : 1 , \"n\" : 1 , \"q\" : 10 , \"p\" : 3 , \"s\" : 1 , \"r\" : 1 , \"u\" : 1 , \"t\" : 1 , \"w\" : 4 , \"v\" : 4 , \"y\" : 4 , \"x\" : 8 , \"z\" : 10 } def scrabble_score ( word ): word2 = word . lower () print word2 + \":\" , points = 0 for letter in word2 : if letter == str ( letter ): points += score [ letter ] return points print scrabble_score ( \"ab\" ) print scrabble_score ( \"allo\" ) print scrabble_score ( \"xylophone\" ) print scrabble_score ( \"coding\" ) print scrabble_score ( \"yak\" )","title":"Regex Tools"},{"location":"LPTHW, Python Code Snippets/#rgb-hex-converter","text":"convert, bitwise, hexadecimal, hex, rgb, color 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def rgb_hex (): invalid_msg = \"Invalid entry\" red = int ( raw_input ( \"Enter a 'red' (R) value, from 0 to 255: \" )) if red < 0 or red > 255 : print invalid_msg return # return will exit the function, w/o return, the function jumps to the next line... green = int ( raw_input ( \"Enter a 'green' (G) value, from 0 to 255: \" )) if green < 0 or green > 255 : print invalid_msg return blue = int ( raw_input ( \"Enter a 'blue' (B) value, from 0 to 255: \" )) if blue < 0 or blue > 255 : print invalid_msg return val = red << 16 + green << 8 + blue # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character. # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift). # Become familiar with bits by reading more here. print \" %s \" % ( hex ( val )[ 2 :] . upper ()) # string formatting def hex_rgb (): invalid_msg = \"Invalid entry\" hex_val = raw_input ( \"Enter a color (six hexadecimal digits): \" ) if len ( hex_val ) != 6 : print \"Invalid Entry\" else : hex_val = int ( hex_val , 16 ) two_hex_digits = 2 ** 8 blue = hex_val % two_hex_digits hex_val = hex_val >> 8 green = hex_val % two_hex_digits hex_val = hex_val >> 8 red = hex_val % two_hex_digits print \"Red: %s Green: %s Blue: %s \" % ( red , green , blue ) def convert (): while True : option = str ( raw_input ( \"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \" )) if option == '1' : print \"RGB to Hex...\" rgb_hex () elif option == '2' : print \"Hex to RGB...\" hex_rgb () elif option == 'X' or option == 'x' : break else : print \"Error\" convert ()","title":"RGB-HEX Converter"},{"location":"LPTHW, Python Code Snippets/#project-dna-analysis","text":"Given the three suspects\u2019 DNA and the sample DNA retrieved from the keyboard, figure out who the spy is! list, open, close, file, read, line, loop, conditional, if, match 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 sample = [ 'GTA' , 'GGG' , 'CAC' ] def read_dna ( dna_file ): dna_data = \"\" # empty string with open ( dna_file , \"r\" ) as f : # f = open(dna_file, \"r\"); with, as for line in f : dna_data += line return dna_data def dna_codons ( dna ): codons = [] for i in range ( 0 , len ( dna ), 3 ): # slice strings of 3 letters if i + 3 < len ( dna ): # make sure that you don't add a string to the codon list that isn't at least 3 letters long codons . append ( dna [ i : i + 3 ]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3 return codons def match_dna ( dna ): matches = 0 for codon in dna : if codon in sample : # if ,in matches += 1 return matches def is_criminal ( dna_sample ): dna_data = read_dna ( dna_sample ) codons = dna_codons ( dna_data ) num_matches = match_dna ( codons ) if num_matches >= 3 : print (( dna_sample )[: - 4 ]) . upper (), print ( \": number of matches = \" + str ( num_matches ) + \"; the investigation will proceed further more with this suspect.\" ) else : print (( dna_sample )[: - 4 ]) . upper (), print ( \": no evidence; the suspect can be freed.\" ) a = \"suspect1.txt\" is_criminal ( a ) a = \"suspect2.txt\" is_criminal ( a ) a = \"suspect3.txt\" is_criminal ( a ) suspect1.txt 1 ATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT suspect2.txt 1 CCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG suspect3.txt 1 TCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA","title":"Project DNA Analysis"},{"location":"Learn Python the Hard Way/","text":"Foreword Notes, code snippets, and excerpts from the course. Python 2. From the book and website: LPTHW Exercise 1, A Good First Program \u00b6 shebang, begin, script This is a shebang (language): # -*- coding: utf-8 -*- . # is an octothorpe or pound or hash or mesh. Add a second line (Python version): /usr/bin/env python 2 . 1 2 3 4 5 6 7 8 9 10 11 # -*- coding: utf-8 -*- #! /usr/bin/env python 2 print \"Hello World!\" print \"Hello Again\" print \"I like typing this.\" print \"This is fun.\" print 'Yay! Printing.' print \"I'd much rather you 'not'\" print 'I said do not touch this.' print \"testing2\" 1 2 3 4 5 6 7 8 Hello World! Hello Again I like typing this. This is fun. Yay! Printing. I'd much rather you 'not' I said do not touch this. testing2 Shorcuts, Good to Know \u00b6 In the terminal, type pydoc <python item> to invoke the documentation on a python item (built-in functions, methods, objects, etc.). Ctrl + C and/or Ctrl + D break a loop. Exercise 3, Numbers and Math \u00b6 print, format, calculate 1 print \"I will now count my chickens:\" 1 I will now count my chickens: 1 2 3 4 5 6 7 8 print \"Hens\" , 25 + 30 / 6 print \"Roosters\" , 100 - 25 * 3 % 4 print \"Now I will count the eggs:\" print 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 # copy 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 straight into the shell and run it # you will get the result only (don't add print before the statement) 1 2 3 4 Hens 30 Roosters 97 Now I will count the eggs: 7 1 2 print \"Is it true that 3 + 2 < 5 - 7\" print 3 + 2 < 5 - 7 1 2 Is it true that 3 + 2 &lt; 5 - 7 False 1 2 print \"What is 3 + 2?\" , 3 + 2 print \"What is 5 - 7?\" , 5 - 7 1 2 What is 3 + 2? 5 What is 5 - 7? -2 1 2 print \"Oh, that's why it's False.\" print \"How about some more.\" 1 2 Oh, that's why it's False. How about some more. 1 2 3 print \"Is it greater?\" , 5 > - 2 print \"Is it greater or equal?\" , 5 >= - 2 print \"Is it less or equal?\" , 5 <= - 2 1 2 3 Is it greater? True Is it greater or equal? True Is it less or equal? False 1 print ( 1 + 1 ) # integer 1 2 1 print ( 1.0 + 1 ) # float 1 2.0 Exercise 4, Variables and Names \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cars = 100 space_in_a_car = 4.0 # float drivers = 30 passengers = 90 cars_not_driven = cars - drivers cars_driven = drivers carpool_capacity = cars_driven * space_in_a_car average_passengers_per_car = passengers / cars_driven print \"There are\" , cars , \"cars available.\" print \"There are only\" , drivers , \"drivers available.\" print \"There will be\" , cars_not_driven , \"empty cars today.\" print \"We can transport\" , carpool_capacity , \"people today.\" print \"We have\" , passengers , \"to carpool today.\" print \"We need to put about\" , average_passengers_per_car , \"in each cars.\" 1 2 3 4 5 6 There are 100 cars available. There are only 30 drivers available. There will be 70 empty cars today. We can transport 120.0 people today. We have 90 to carpool today. We need to put about 3 in each cars. A constant variable, a variable that should never be altered, should be set in capital as PI = 3.1416 . Exercise 5, More Variables and Printing \u00b6 Call a variable with: %r ; raw variable. %s ; string. %d ; digit. Make the choice depending on the variable type. However, if calling a \u2018string\u2019 (text, NLP), it must be done with %s ; \u2018numbers\u2019 is done with %r and %d (possibly with %s ). The use and effects of the different calls is explained in Exercises 6 and 21. 1 2 3 4 5 6 7 8 9 my_name = 'Zed A. Shaw' my_age = 35 # not a lie my_height = 74 # inches my_weight = 180 # lbs my_eyes = 'Blue' my_teeth = 'White' my_hair = 'Brown' print \"Let's talk about %s .\" % my_name 1 Let's talk about Zed A. Shaw. 1 2 3 4 # does the same thing print \"He's %d years old.\" % my_age print \"He's\" , my_age , \"years old.\" print \"He will be\" , my_age + 1 , \"years old next year.\" 1 2 3 He's 35 years old. He's 35 years old. He will be 36 years old next year. 1 2 3 4 5 print \"He's %d inches tall.\" % my_height print \"He's %d pounds heavy\" % my_weight print \"Actually that's not too heavy.\" print \"He's got %s eyes and %s hair.\" % ( my_eyes , my_hair ) print \"His teeth are usually %s depending on the coffee.\" % my_teeth 1 2 3 4 5 He's 74 inches tall. He's 180 pounds heavy Actually that's not too heavy. He's got Blue eyes and Brown hair. His teeth are usually White depending on the coffee. 1 2 3 # this line is tricky, try to get it exactly right print \"If I add %d , %d , and %d I get %d .\" % ( my_age , my_height , my_weight , my_age + my_height + my_weight ) 1 If I add 35, 74, and 180 I get 289. Exercise 6, Strings and Text \u00b6 concatenate %s and %r help when concatenating strings. %r does not coerce the variable into a format ( %s string or %d digit). 1 2 3 4 5 6 7 8 x = \"There are %d types of people.\" % 10 binary = \"binary\" do_not = \"don't\" y = \"Those who know %s and those who %s .\" % ( binary , do_not ) # assign strings or chains of strings to a variable print x print y 1 2 There are 10 types of people. Those who know binary and those who don't. 1 2 print \"I said: %r .\" % x print \"I also said: ' %s '.\" % y 1 2 I said: 'There are 10 types of people.'. I also said: 'Those who know binary and those who don't.'. 1 2 3 4 hilarious = False joke_evaluation = \"Isn't that joke so funny?! %r \" print joke_evaluation % hilarious 1 Isn't that joke so funny?! False 1 2 3 4 5 6 # add two strings together, concatenate them w = \"This is the left side of...\" e = \" a string with a right side.\" # with Numpy, it would have added (mathematically speaking) print w + e 1 This is the left side of... a string with a right side. Exercise 15, Reading Files \u00b6 Before running this script, create a text file. Type \"Test file thing\" > test.txt . Then type cat test.txt . \u2018test.txt\u2019 is now saved along the other scripts. Run the script: python ex15.py test.txt With IPython, type: %run ex15 . py test . txt Run the script without the extra argument test.txt to check the result. 1 % run ex15 . py test . txt 1 2 3 4 5 6 Here's your file 'test.txt': Test file thing Type the filename again: &gt; test.txt Here's your file 'test.txt' again: Test file thing 1 % run ex15 . py --------------------------------------------------------------------------- 1 2 3 4 5 6 7 8 9 10 11 ValueError Traceback ( most recent call last ) \\\\ Learn Python the Hard Way \\ ex15 . py in & lt ; module & gt ;() 1 from sys import argv 2 ----& gt ; 3 script , filename = argv 4 5 # similarities ValueError : need more than 1 value to unpack Load the script in IPython with %load to study it (don\u2019t run it!). This type of script requires \u2018external\u2019 arguments when launched: python ex15.py test.txt In the script itself, always preceed the \u2018external\u2019 arguments, like filename , with script since your write python ex15.py test.txt or python script argument when you launch the script. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # %load ex15.py from sys import argv script , filename = argv # similarities between # var = raw_input(\"string\", digit, \"prompt\") # var = open(\"string\") txt = open ( filename ) # reference to a file, not the file print \"Here's your file %r :\" % filename print txt . read () print \"Type the filename again:\" file_again = raw_input ( \"> \" ) text_again = open ( file_again ) print \"Here's your file %r again:\" % file_again print text_again . read () The script again (this time, a manual import or copy-paste). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from sys import argv # always preceed the arguments like 'filename' with 'script' script , filename = argv # similarities # var = raw_input(\"string\", digit, \"prompt\") # var = open(\"string\") txt = open ( filename ) #reference to a file, not the file print \"Here's your file %r :\" % filename print txt . read () print \"Type the filename again:\" file_again = raw_input ( \"> \" ) text_again = open ( file_again ) print \"Here's your file %r again:\" % file_again print text_again . read () Now, use this alternative code instead. It does not require an external argument; the argument ( filename ) is in the script itself (it has become a variable). \u2018Internal\u2019 arguments are for functions ( def function(arg1, arg2): ); see Exercise 18. 1 2 3 4 5 6 7 8 9 10 11 filename = \"test.txt\" # however, the code is limited to this file only txt = open ( filename ) # reference to a file, not the file print \"Here's your file %r :\" % filename print txt . read () print \"Type the filename again:\" file_again = raw_input ( \"> \" ) text_again = open ( file_again ) print text_again . read () Exercise 16, Reading and Writing Files \u00b6 open, close, readlines, truncate 'w' , write, 'r' , read, 'a' , append. 'w+' , read-write, 'r+' , read-write, 'a+' , read-append. 'r' being the default argument, it is facultative when writing open('file', 'r') . The other arguments are mandatory; without them in open('file, 'w') , you cannot write, truncate, append or replace. First, load the script in IPython by typing %load ex16_1 . py ; it then turn to a comment # %load ex16_1.py . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # %load ex16.py from sys import argv script , filename = argv print \"We're going to erase %r .\" % filename print \"If you don't want that, hit CTRL-C (^C).\" print \"If you do want that, hit RETURN.\" raw_input ( \"?\" ) print \"Opening the file...\" target = open ( filename , 'w' ) print \"Truncating the file!\" target . truncate () print \"Now, I'm going to ask you for three lines.\" line1 = raw_input ( \"line 1: \" ) line2 = raw_input ( \"line 2: \" ) line3 = raw_input ( \"line 3: \" ) print \"I'm going to write these to the file.\" target . write ( line1 ) # 'write' variable line1 target . write ( \" \\n \" ) # add a new line target . write ( line2 ) target . write ( \" \\n \" ) target . write ( line3 ) target . write ( \" \\n \" ) print \"And finally, we close it.\" target . close () Now, run the external file in IPython (it imports the code behind the scene). Careful: the script requires a second argument ( filename ). 1 % run ex16 . py text . txt 1 2 3 4 5 6 7 8 9 10 11 12 We're going to erase 'text.txt'. If you don't want that, hit CTRL-C (^C). If you do want that, hit RETURN. ? Opening the file... Truncating the file! Now, I'm going to ask you for three lines. line 1: Good morning. line 2: How are you? line 3: I wish you a good day. I'm going to write these to the file. And finally, we close it. Read the file. 1 2 3 4 5 filename = 'text.txt' target = open ( filename , 'r' ) print target . read () target . close () 1 2 3 Good morning. How are you? I wish you a good day. Now, truncate (empty, delete, erase, clear) the file, reopen it, and to read it. 1 2 3 4 5 6 7 8 9 10 11 filename = 'text.txt' target = open ( filename , 'w' ) print \"Truncating the file!\" print \"-\" * 25 target . truncate () target . close () target = open ( filename , 'r' ) print target . read () target . close () 1 2 Truncating the file! ------------------------ Exercise 17, More Files \u00b6 length, len() target.read() ; read the whole file (EOF). target.read(10) ; read the amount of bytes between the parentheses (1 byte = 1 character). target.readline() ; read one line character at a time; the first line or the file until the first \\n . target.readline(10) ; read 10 bytes of the first line, but never more than the first line. readlines() ; read in the whole file at once and splits it by line (create a list). xreadlines() ; read big files. First, load script ex17_1.py in IPython. This script needs two additional arguments. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # %load ex17_1.py from sys import argv from os.path import exists # does the file exists, T or F? script , from_file , to_file = argv print \"Copying from %s to %s \" % ( from_file , to_file ) in_file = open ( from_file , 'r' ) # 'r' is facultative indata = in_file . read () # read the content, store in memory print \"The input file is %d bytes long\" % len ( indata ) # number of bytes in the file or length of 'indata' print \"Does the output file exist? %r \" % exists ( to_file ) # if the second file hasn't been created, this row will yield a 'False' # after you run this script, if you run it again, il will yield a 'True' print \"Ready, hit RETURN to continue, CTRL-C to abort.\" raw_input ( \"? \" ) out_file = open ( to_file , 'w' ) out_file . write ( indata ) print \"Alright, all done.\" out_file . close () in_file . close () 1 % run ex17_1 . py text2 . txt new . txt 1 2 3 4 5 6 Copying from text2.txt to new.txt The input file is 49 bytes long Does the output file exist? True Ready, hit RETURN to continue, CTRL-C to abort. ? Alright, all done. 1 2 3 target = open ( \"text2.txt\" ) print target . read () target . close () 1 2 3 Good morning. How are you? I wish you a good day. 1 2 3 target = open ( \"new.txt\" ) print target . read () target . close () 1 2 3 Good morning. How are you? I wish you a good day. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 # %load ex17_2.py from sys import argv from os.path import exists # does the file exists, T or F? script , from_file , to_file = argv # FIRST in_file = open ( from_file , 'r' ) indata = in_file . read () print \"The input file is %d bytes long\" % len ( indata ) in_file . close () print \"-\" * 25 # SECOND checkfile = open ( from_file , 'r' ) print checkfile . readline () # read line 1, show print checkfile . readline () # read line 2 print checkfile . readline () # read line 3 checkfile . close () print \"-\" * 25 # THIRD checkfile2 = open ( from_file , 'r' ) out_file = open ( to_file , 'w' ) indata = checkfile2 . read () out_file . write ( indata ) print \"Alright, all done.\" checkfile2 . close () out_file . close () print \"-\" * 25 # FOURTH checkfile3 = open ( to_file , 'r' ) print checkfile3 . read () checkfile3 . close () 1 % run ex17_2 . py text2 . txt new2 . txt 1 2 3 4 5 6 7 8 9 10 11 12 13 The input file is 49 bytes long ------------------------- Good morning. How are you? I wish you a good day. ------------------------- Alright, all done. ------------------------- Good morning. How are you? I wish you a good day. Exercise 18, Names, Variables, Code, Functions \u00b6 argument, flexible, indefinite A function can have no, one or several arguments. def function(): . def function(one) . def function(one, two, three) . *args means indifinite number of arguments. All the arguments are is a list (\u2018args\u2019). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # indefinite def print_two ( * args ): arg1 , arg2 = args print \"arg1: %r , arg2: %r \" % ( arg1 , arg2 ) # two arguments def print_two_again ( arg1 , arg2 ): print \"arg1: %r , arg2: %r \" % ( arg1 , arg2 ) # one argument def print_one ( arg1 ): print \"arg1: %r \" % arg1 # no arguments def print_none (): print \"I got nothin'.\" # indefinite def print_two_2 ( * args ): print \"args: %r \" % ( args ,) # much more flexible # two arguments def print_two_again_2 ( arg1 , arg2 , arg3 ): print \"arg1: %r , arg2: %r , arg3: %r \" % ( arg1 , arg2 , arg3 ) # three arguments def print_two_again_3 ( arg1 , arg2 , arg3 ): print \"arg1: %r , arg2: %r , arg3: %r \" % ( arg1 , arg2 , arg3 ) print_two ( \"Joe\" , \"Frank\" ) # call a function inside a function Run the functions. 1 2 print_two ( \"Zed\" , \"Shaw\" ) print_two_again ( \"Zed\" , \"Shaw\" ) 1 2 arg1: 'Zed', arg2: 'Shaw' arg1: 'Zed', arg2: 'Shaw' 1 2 print_one ( \"First!\" ) print_none () 1 2 arg1: 'First!' I got nothin'. 1 print_two_2 ( \"Zed\" , \"Shaw\" , \"A\" , \"B\" ) 1 args: ('Zed', 'Shaw', 'A', 'B') 1 print_two_again_2 ( \"Zed\" , \"Shaw\" , \"C\" ) 1 arg1: 'Zed', arg2: 'Shaw', arg3: 'C' 1 print_two_again_3 ( \"Zed\" , \"Shaw\" , \"C\" ) 1 2 arg1: 'Zed', arg2: 'Shaw', arg3: 'C' arg1: 'Joe', arg2: 'Frank' Exercise 19, Functions and Variables \u00b6 Give different names to functions and arguments not to get confuse. 1 2 3 4 5 6 def cheese_and_crackers ( cheese_count , boxes_of_crackers ): print \"You have %d cheeses!\" % cheese_count print \"You have %d boxes of crackers!\" % boxes_of_crackers print \"Man that's enough for a party!\" print \"Get a blanket. \\n \" 1 2 print \"1.We can just give the function numbers directly:\" cheese_and_crackers ( 20 , 30 ) 1 2 3 4 5 1.We can just give the function numbers directly: You have 20 cheeses! You have 30 boxes of crackers! Man that's enough for a party! Get a blanket. 1 2 3 4 print \"2.Or, we can use variables from our script:\" amount_of_cheese = 10 amount_of_crackers = 50 cheese_and_crackers ( amount_of_cheese , amount_of_crackers ) 1 2 3 4 5 2.Or, we can use variables from our script: You have 10 cheeses! You have 50 boxes of crackers! Man that's enough for a party! Get a blanket. 1 2 print \"3.We can even do math inside too:\" cheese_and_crackers ( 10 + 20 , 5 + 6 ) 1 2 3 4 5 3.We can even do math inside too: You have 30 cheeses! You have 11 boxes of crackers! Man that's enough for a party! Get a blanket. 1 2 print \"4.And we can combine the two, variables and math:\" cheese_and_crackers ( amount_of_cheese + 100 , amount_of_crackers + 1000 ) 1 2 3 4 5 4.And we can combine the two, variables and math: You have 110 cheeses! You have 1050 boxes of crackers! Man that's enough for a party! Get a blanket. 1 2 3 4 5 print \"5.Make a GUI.\" print \"Enter the amount of cheese:\" , amount_of_cheese = int ( raw_input ()) amount_of_crackers = int ( raw_input ( \"Enter the amount of crackers: \" )) cheese_and_crackers ( amount_of_cheese , amount_of_crackers ) 1 2 3 4 5 6 7 5.Make a GUI. Enter the amount of cheese:2 Enter the amount of crackers: 5 You have 2 cheeses! You have 5 boxes of crackers! Man that's enough for a party! Get a blanket. Exercise 20, Functions and Files \u00b6 seek, move, file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # %load ex20.py from sys import argv script , input_file = argv # python ex20.py test.txt def print_all ( f ): # f is the file print f . read () # read the file, reach the end def rewind ( f ): f . seek ( 0 ) # move back to the initial position in the file # 'seek' actively move in the file def print_a_line ( line_count , f ): print line_count , f . readline () # print a line # and this line number in the file current_file = open ( input_file ) print \"First, let's print the whole file: \\n \" print_all ( current_file ) # launch function, f = current_file print \"-\" * 25 print \"Now let's rewind, kind of like a tape.\" rewind ( current_file ) # launch function, f = current_file print \"-\" * 25 print \"Let's print three lines:\" current_line = 1 # load variable print_a_line ( current_line , current_file ) # launch function # set 'current_line' to 1 current_line = current_line + 1 # current_line += 1 print_a_line ( current_line , current_file ) # 'current_line' grows to 2... # current_line = current_line + 1 current_line += 1 print_a_line ( current_line , current_file ) 1 % run ex20 . py new2 . txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 First, let's print the whole file: Good morning. How are you? I wish you a good day. ------------------------- Now let's rewind, kind of like a tape. ------------------------- Let's print three lines: 1 Good morning. 2 How are you? 3 I wish you a good day. Exercise 21, Functions Can Return Something or not\u2026 \u00b6 integer, float, int, coerce, digit, string, raw %r for raw. %d for digit. %s for string. int() with %d = integer. int() with %r or %s = integer. float() with %d = integer. float() with %r or %s = float. %r is a safer choice; see below. 1 2 3 4 5 6 7 8 9 a = 10 # a digit b = 10.1 print \" %r \" % a print \" %s \" % a print \" %d \" % a print \" %r \" % b print \" %s \" % b print \" %d \" % b 1 2 3 4 5 6 10 10 10 10.1 10.1 10 1 2 3 4 5 a = \"10\" # a string or str(10) print \" %r \" % a print \" %s \" % a print \" %d \" % a 1 2 3 4 5 6 7 8 9 10 11 12 13 '10' 10 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-34-71a6226dbd27&gt; in &lt;module&gt;() 2 print \"%r\" % a 3 print \"%s\" % a ----&gt; 4 print \"%d\" % a TypeError: %d format: a number is required, not str 1 2 3 4 5 b = \"10.1\" # a string or str(10) print \" %r \" % b print \" %s \" % b print \" %d \" % b 1 2 3 4 5 6 7 8 9 10 11 12 '10.1' 10.1 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-33-18d4f3068fee&gt; in &lt;module&gt;() 2 print \"%r\" % b 3 print \"%s\" % b ----&gt; 4 print \"%d\" % b TypeError: %d format: a number is required, not str 1 2 3 4 5 6 7 a = \"10\" # a string or str(10) b = \"10.1\" # a string or str(10) print \" %r \" * 1 % a print \" %s \" * 1 % a print \" %r \" * 1 % b print \" %s \" * 1 % b 1 2 3 4 '10' 10 '10.1' 10.1 1 2 3 4 5 6 7 a = \"10\" # a string or str(10) b = \"10.1\" # a string or str(10) print \" %r \" * 2 % a print \" %s \" * 2 % a print \" %r \" * 2 % b print \" %s \" * 2 % b 1 2 3 4 5 6 7 8 9 10 11 12 13 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-34-18d4f3068fee&gt; in &lt;module&gt;() 1 a = \"10\" 2 b = \"10.1\" ----&gt; 3 print \"%r\" * 2 % a 4 print \"%s\" * 2 % a 5 print \"%r\" * 2 % b TypeError: not enough arguments for format string 1 2 3 4 5 6 7 8 9 10 a = 10 b = 10.1 a = int ( a ) b = int ( b ) print \" %r \" % a print \" %s \" % a print \" %d \" % a print \" %r \" % b print \" %s \" % b print \" %d \" % b 1 2 3 4 5 6 10 10 10 10 10 10 1 2 3 4 5 6 7 8 9 10 11 a = 10 b = 10.1 a = float ( a ) b = float ( b ) print \" %r \" % a print \" %s \" % a print \" %d \" % a print \" %r \" % b print \" %s \" % b print \" %d \" % b 1 2 3 4 5 6 10.0 10.0 10 10.1 10.1 10 1 2 3 4 5 6 7 8 9 a = 1 b = 2.1 print a * b print int ( a ) * int ( b ) print float ( a ) * float ( b ) print str ( a ) * 10 print str ( b ) * 10 print str ( a ) * str ( b ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 2.1 2 2.1 1111111111 2.12.12.12.12.12.12.12.12.12.1 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-52-57a5dd7c13d0&gt; in &lt;module&gt;() 7 print str(a) * 10 8 print str(b) * 10 ----&gt; 9 print str(a) * str(b) TypeError: can't multiply sequence by non-int of type 'str' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def add ( a , b ): print \"ADDING %s + %s \" % ( a , b ) return a + b def substract ( a , b ): print \"SUBTRACTING %d - %d \" % ( a , b ) # show the arguments return a - b # compute the arguments def multiply ( a , b ): print \"MULTIPLYING %d * %d \" % ( a , b ) return a * b def divide ( a , b ): print \"DIVIDING %d / %d \" % ( a , b ) return a / b 1 2 3 4 5 print \"Let's do some math with just functions!\" aa = int ( raw_input ( \"Enter a (integer): \" )) # to enter an integer bb = float ( raw_input ( \"Enter b (float): \" )) # to enter a float age = add ( aa , bb ) # launch function add() 1 2 3 4 Let's do some math with just functions! Enter a (integer): 1 Enter b (float): 2.2 ADDING 1 + 2.2 1 print add ( aa , bb ) 1 2 ADDING 1 + 2.2 3.2 1 2 3 4 5 6 7 height = substract ( 78 , 4 ) # launch function substract() weight = multiply ( 90 , 2 ) # launch function multiply() iq = divide ( 100 , 2 ) # launch function divide() print height print weight print iq 1 2 3 4 5 6 SUBTRACTING 78 - 4 MULTIPLYING 90 * 2 DIVIDING 100 / 2 74 180 50 1 2 # Use the variable, previously loaded print \"Age: %d , Height: %d , Weight: %d , IQ: %d \" % ( age , height , weight , iq ) 1 Age : 3 , Height : 74 , Weight : 180 , IQ : 50 1 2 3 4 5 6 7 # A puzzle for the extra credit, type it in anyway. print \"Here is a puzzle.\" what = add ( age , substract ( height , multiply ( weight , divide ( iq , 2 )))) # launch functions one by one!!! # Insert variable 'what' in the text print \"That becomes: \" , what , \"Can you do it by hand?\" 1 2 3 4 5 6 Here is a puzzle. DIVIDING 50 / 2 MULTIPLYING 180 * 25 SUBTRACTING 74 - 4500 ADDING 3.2 + -4426 That becomes: -4422.8 Can you do it by hand? Exercise 23, Read Some Code \u00b6 Go to GitHub : In the \u2018lamson\u2019 directory, take a script. Go through the script. Find projects on collaborative sites or depositories: bitbucket.org . github.com . launchpad.net . sourceforge.net . Exercise 24, More Practice \u00b6 \\' for an aposthrophy. \\t for a tab. \\\\ for a backslash. \\n for a new line. 1 2 3 print \"Let's practice everything.\" print 'You \\' d need to know \\' bout escapes with \\\\ that do \\n newlines and \\t tabs.' 1 2 3 Let's practice everything. You'd need to know 'bout escapes with \\ that do newlines and tabs. 1 2 3 4 5 6 7 8 9 10 11 12 poem = \"\"\" \\t The lovely world with logic so firmly planted connot discern \\n the needs of love nor comprehend passion from intuition and requires an explanation \\n\\t\\t where there is none. \"\"\" print \"----------------\" print poem print \"----------------\" 1 2 3 4 5 6 7 8 9 10 11 12 ---------------- The lovely world with logic so firmly planted connot discern the needs of love nor comprehend passion from intuition and requires an explanation where there is none. ---------------- 1 2 3 4 5 # variable 'five' five = 10 - 2 + 3 - 6 # use of variable 'five' print \"This should be five: %s \" % five 1 This should be five: 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # function with one argument def secret_formula ( started ): jelly_beans = started * 500 # load variable with another jars = jelly_beans / 1000 crates = jars / 100 return jelly_beans , jars , crates # variable; warning, this variable is modified further down start_point = 10000 # redefine the results of a function (rename a variable) # from this point, 'jelly_beans' becomes 'beans' # and must be called so in any line of code beans , jars , crates = secret_formula ( start_point ) print \"With a starting point of: %d \" % start_point # we apply 'bean' print \"We's have %d beans, %d jars, and %d crates.\" % ( beans , jars , crates ) # modified variable is loaded into the code from this point start_point = start_point / 10 print \"We can also do that this way:\" # we apply the modified variable 'start_point' print \"We's have %d beans, %d jars, and %d crates.\" % secret_formula ( start_point ) 1 2 3 4 With a starting point of: 10000 We's have 5000000 beans, 5000 jars, and 50 crates. We can also do that this way: We's have 500000 beans, 500 jars, and 5 crates. Exercise 25, Even More Practice \u00b6 import, module, package, script, library For this exercice, consult the manual. First, run python ex25.py to find out any errors. Second, use the python engine to run pieces of codes from this file and not just trigger the whole code from this file Check out file 25_1.txt . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 # %load ex25.py def break_words ( stuff ): \"\"\"This function will break up words for us.\"\"\" words = stuff . split ( ' ' ) # the method splits the characters each time it finds a 'space' return words # you must specify in python where to load the result (into 'words') def sort_words ( words ): \"\"\"Sorts the words.\"\"\" return sorted ( words ) # the python function sorts the separated words def print_first_word ( words ): \"\"\"Prints the first word after popping in off.\"\"\" word = words . pop ( 0 ) # the method returns the first word in the index (position 0) print word def print_last_word ( words ): \"\"\"Prints the last word after popping it off.\"\"\" word = words . pop ( - 1 ) # the method returns the last word in the index (position -1) print word def sort_sentence ( sentence ): \"\"\"Takes in a full sentence and returns the sorted words.\"\"\" words = break_words ( sentence ) # launch a function return sort_words ( words ) # launch another function with the result of the first function def print_first_and_last ( sentence ): \"\"\"Prints the first and last words of the sentence.\"\"\" words = break_words ( sentence ) print_first_word ( words ) print_last_word ( words ) def print_first_and_last_sorted ( sentence ): \"\"\"Sorts the words then prints the first and last one.\"\"\" words = sort_sentence ( sentence ) print_first_word ( words ) print_last_word ( words ) 1 % run ex25 . py In the next script, you import the above script (ex25.py) as an external module (even though the script was previously run in IPython, and we want to simulate a script importing another script) and use its function as methods. 1 2 3 4 5 6 import ex25 sentence = \"All good things come to those who wait.\" words = ex25 . break_words ( sentence ) words 1 ['All', 'good', 'things', 'come', 'to', 'those', 'who', 'wait.'] 1 2 sorted_words = ex25 . sort_words ( words ) sorted_words 1 ['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who'] 1 2 3 ex25 . print_first_word ( words ) ex25 . print_last_word ( words ) words 1 2 3 All wait. ['good', 'things', 'come', 'to', 'those', 'who'] 1 2 3 ex25 . print_first_word ( sorted_words ) ex25 . print_last_word ( sorted_words ) sorted_words 1 2 3 All who ['come', 'good', 'things', 'those', 'to', 'wait.'] 1 2 sorted_words = ex25 . sort_sentence ( sentence ) sorted_words 1 ['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who'] 1 2 ex25 . print_first_and_last ( sentence ) ex25 . print_first_and_last_sorted ( sentence ) 1 2 3 4 All wait. All who Exercise 32, Loops and Lists \u00b6 for, loop, list 1 2 3 4 5 6 7 the_count = [ 1 , 2 , 3 , 4 , 5 ] fruits = [ 'apples' , 'oranges' , 'pears' , 'apricots' ] change = [ 1 , 'pennies' , 2 , 'dimes' , 3 , 'quarters' ] # this first kind of for-loop goes through a list for number in the_count : print \" \\t This is count %d \" % number 1 2 3 4 5 This is count 1 This is count 2 This is count 3 This is count 4 This is count 5 1 2 3 # same as above for fruit in fruits : print \"A fruit of type: %s \" % fruit 1 2 3 4 A fruit of type: apples A fruit of type: oranges A fruit of type: pears A fruit of type: apricots We can go though mixed lists too. Notice we have to use %r since we don\u2019t know what\u2019s in it. 1 2 for i in change : print \" \\t I got %r \" % i 1 2 3 4 5 6 I got 1 I got 'pennies' I got 2 I got 'dimes' I got 3 I got 'quarters' We can also build lists. First, start with an empty one. 1 2 3 4 5 6 7 8 elements = [] # then use the range function to do 0 to 5 counts # 0 means 1st, the 6th is excluded; 0,1,2,3,4,5 for i in range ( 0 , 6 ): print \"Adding %d to the list.\" % i # append is a function that lists understand elements . append ( i ) # elements is a variable to which we add numbers 1 2 3 4 5 6 Adding 0 to the list. Adding 1 to the list. Adding 2 to the list. Adding 3 to the list. Adding 4 to the list. Adding 5 to the list. We can print them out. 1 2 for i in elements : print \" \\t Element was: %d \" % i 1 2 3 4 5 6 Element was: 0 Element was: 1 Element was: 2 Element was: 3 Element was: 4 Element was: 5 1 2 3 4 5 6 print \"Test the range function...\" print \"range(5):\" , range ( 5 ) print \"range(6):\" , range ( 6 ) print \"range(1, 5):\" , range ( 1 , 5 ) print \"range(2, 5):\" , range ( 2 , 5 ) print \"range(0, 10, 2):\" , range ( 0 , 10 , 2 ) 1 2 3 4 5 6 Test the range function... range(5): [0, 1, 2, 3, 4] range(6): [0, 1, 2, 3, 4, 5] range(1, 5): [1, 2, 3, 4] range(2, 5): [2, 3, 4] range(0, 10, 2): [0, 2, 4, 6, 8] Two-dimentional lists (above 2 dimension, it can become memory-intensive to compute!). 2d, tabular, lists in list, list of lists 1 2 3 4 5 6 the_count_two = [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]] # this first kind of for-loop goes through a list # this list is not numerical, use %r or %s for number in the_count_two : print \" \\t This is count %r \" % number 1 2 This is count [1, 2, 3] This is count [4, 5, 6] Exercise 33, While Loops \u00b6 while, loop 1 2 3 4 5 6 7 8 9 10 11 12 13 i = 0 numbers = [] while i < 6 : print \"At the top i is %d \" % i numbers . append ( i ) i += 1 print \"Number now: \" , numbers print \"At the botton i is %d \" % i print \"The numbers: \" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 At the top i is 0 Number now: [0] At the botton i is 1 At the top i is 1 Number now: [0, 1] At the botton i is 2 At the top i is 2 Number now: [0, 1, 2] At the botton i is 3 At the top i is 3 Number now: [0, 1, 2, 3] At the botton i is 4 At the top i is 4 Number now: [0, 1, 2, 3, 4] At the botton i is 5 At the top i is 5 Number now: [0, 1, 2, 3, 4, 5] At the botton i is 6 The numbers: 1 2 for num in numbers : print num 1 2 3 4 5 6 0 1 2 3 4 5 Make it a function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def breaking_list ( max_of , increm ): i = 0 numbers = [] while i < max_of : print \"At the top i is %d \" % i numbers . append ( i ) i += increm print \"Number now: \" , numbers print \"At the botton i is %d \" % i print \"The numbers: \" for num in numbers : print num print \"Enter an integer, a maximum, higher than 1.\" max_integer = int ( raw_input ( \"> \" )) print \"Enter an integer, an increment, equal or more than 1\" increment = int ( raw_input ( \"> \" )) print \"The maximum is %d and the increment is %d \" % ( max_integer , increment ) breaking_list ( max_integer , increment ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Enter an integer, a maximum, higher than 1. &gt; 5 Enter an integer, an increment, equal or more than 1 &gt; 2 The maximum is 5 and the increment is 2 At the top i is 0 Number now: [0] At the botton i is 2 At the top i is 2 Number now: [0, 2] At the botton i is 4 At the top i is 4 Number now: [0, 2, 4] At the botton i is 6 The numbers: 0 2 4 Change the function, replace with a for-loops. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def breaking_list2 ( max_of , increm ): i = 0 numbers = [] for i in range ( 0 , max_of , increm ): print \"At the top i is %d \" % i numbers . append ( i ) i += increm print \"Number now: \" , numbers print \"At the botton i is %d \" % i print \"The numbers: \" for num in numbers : print num max_integer2 = max_integer + 2 increment2 = increment + 1 breaking_list2 ( max_integer2 , increment2 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 At the top i is 0 Number now: [0] At the botton i is 3 At the top i is 3 Number now: [0, 3] At the botton i is 6 At the top i is 6 Number now: [0, 3, 6] At the botton i is 9 The numbers: 0 3 6 Exercise 34, Accessing Elements of Lists \u00b6 list, list of lists, lists in list, exit, program Let\u2019s build a scenario; functions leading to other functions. def gold_room(): def bear_room(): def cthulhu_room(): def dead(why): def start(): start() to launch the chain reaction. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 from sys import exit def gold_room (): print \"This room is full of gold. How much do you take?\" choice = raw_input ( \"Write any number from 0 to 100> \" ) # variable if \"0\" in choice or \"1\" in choice : # could be 0, 1, 10, 11:19, 20, 21, 30, 31, 40, 41, 50, 51, etc. how_much = int ( choice ) # variable else : dead ( \"Man, learn to type a number.\" ) # launch function dead if how_much < 50 : print \"Nice, you're not greedy, you win!\" exit ( 0 ) # launch system function exit else : dead ( \"You greedy bastard!\" ) # launch function dead def bear_room (): print \"There is bear here.\" print \"The bear has a bunch of honey.\" print \"The fat bear is in front of another door.\" print \"How are you going to move the bear?\" bear_moved = False # variable while True : # infinite loop, run until it finds a right answer choice = raw_input ( \"Write 'take honey', 'taunt bear' or 'open door'> \" ) # variable if choice == \"take honey\" : # variable check dead ( \"The bear looks at you then slaps your face off.\" ) # launch function dead elif choice == \"taunt bear\" and not bear_moved : # double variables check print \"The bear has moved from the door. You can go thought it now.\" bear_moved = True # change the variable elif choice == \"taunt bear\" and bear_moved : dead ( \"The bear gets pissed off and chews your leg off.\" ) elif choice == \"open door\" and bear_moved : # variable check gold_room () # launch function gold_room else : print \"I got no idea what that means.\" def cthulhu_room (): print \"Here you see the great evil Cthulhu.\" print \"He, it, whatever stares at you and you go insane.\" print \"Do you flee your life or eat your head?\" choice = raw_input ( \"Write 'flee' or 'head'> \" ) # variable if \"flee\" in choice : # variable check start () # launch function start elif \"head\" in choice : dead ( \"Well that was tasty!\" ) else : cthulhu_room () # launch function def dead ( why ): print why , \"Good job!\" exit ( 0 ) # launch system function exit # exit(0) is neutral # exit(1) is an error, could be a useful warning # exit(2) or others like exit(100) are other warnings, or different messages def start (): print \"You are in a dark room.\" print \"There is a door to your right and left.\" print \"Which one do you take: left or right?\" choice = raw_input ( \"Write 'left' or 'right'> \" ) # variable if choice == \"left\" : # variable check, exact bear_room () # launch function bear_room elif choice == \"right\" : # variable check, exact cthulhu_room () else : dead ( \"You stumble around the room until you starve.\" ) start () # launch the chain reaction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 You are in a dark room. There is a door to your right and left. Which one do you take: left or right? Write 'left' or 'right'&gt; left There is bear here. The bear has a bunch of honey. The fat bear is in front of another door. How are you going to move the bear? Write 'take honey', 'taunt bear' or 'open door'&gt; taunt bear The bear has moved from the door. You can go thought it now. Write 'take honey', 'taunt bear' or 'open door'&gt; open door This room is full of gold. How much do you take? Write any number from 0 to 100&gt; 63 Man, learn to type a number. Good job! An exception has occurred, use %tb to see the full traceback. SystemExit: 0 There are multiple scenarios to try\u2026 Exercise 38, Doing Things to Lists \u00b6 list, index, add, remove, delete, extract 1 2 3 4 5 ten_things = \"Apples Oranges Crows Telephones Light Sugar\" print \"ten_things:\" , ten_things , \", not a list\" print \"Wait there are not 10 things is that list. Let's fix that.\" 1 2 ten_things : Apples Oranges Crows Telephones Light Sugar , not a list Wait there are not 10 things is that list . Let ' s fix that . 1 2 3 stuff = ten_things . split ( ' ' ) # variable ten_things, method split print \"stuff:\" , stuff , \", a list\" 1 stuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar'] , a list 1 2 3 more_stuff = [ \"Day\" , \"Night\" , \"Song\" , \"Frisbee\" , \"Corn\" , \"Banana\" , \"Girl\" , \"Boy\" ] # list variable print \"more_stuff:\" , more_stuff , \", a list\" 1 more_stuff: ['Day', 'Night', 'Song', 'Frisbee', 'Corn', 'Banana', 'Girl', 'Boy'] , a list Most of the time, a for-loop is better than a while-loop. A while-loop is better when there is a test, a condition. 1 2 3 4 5 6 7 8 while len ( stuff ) != 10 : next_one = more_stuff . pop () # load a variable with another variable, method pop, pop means extracting 1 item from a list variable, the last item in the list print \"Adding: \" , next_one # show the content stuff . append ( next_one ) # variable stuff add 1-item list variable; the loop will go as long as stuff has less than 10 items print \"stuff:\" , stuff print \"There are %d items now.\" % len ( stuff ) # length of stuff or the number of items in it print \"There we go: \" , stuff 1 2 3 4 5 6 7 8 9 10 11 12 13 Adding : Boy stuff : [ 'Apples' , 'Oranges' , 'Crows' , 'Telephones' , 'Light' , 'Sugar' , 'Boy' ] There are 7 items now . Adding : Girl stuff : [ 'Apples' , 'Oranges' , 'Crows' , 'Telephones' , 'Light' , 'Sugar' , 'Boy' , 'Girl' ] There are 8 items now . Adding : Banana stuff : [ 'Apples' , 'Oranges' , 'Crows' , 'Telephones' , 'Light' , 'Sugar' , 'Boy' , 'Girl' , 'Banana' ] There are 9 items now . Adding : Corn stuff : [ 'Apples' , 'Oranges' , 'Crows' , 'Telephones' , 'Light' , 'Sugar' , 'Boy' , 'Girl' , 'Banana' , 'Corn' ] There are 10 items now . There we go : [ 'Apples' , 'Oranges' , 'Crows' , 'Telephones' , 'Light' , 'Sugar' , 'Boy' , 'Girl' , 'Banana' , 'Corn' ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 print \"Let's do some things with stuff.\" # print and pop choosen items according to the index # could also be random index values!!! # could reorder the list before (ascending, descending) print stuff [ 1 ] # the 2nd item print stuff [ 2 ] # the 3rd item print stuff [ - 1 ] # the last item print stuff [ - 2 ] print stuff . pop () # pop the last item print stuff . pop ( 0 ) # pop the first item print stuff . pop ( 1 ) # pop the 2nd item print stuff . pop ( - 1 ) # pop the last item print ' ' . join ( stuff ) # var.split(' ') vs ' '.join(var), concatenate the list print '#' . join ( stuff [ 3 : 5 ]) # add a character at position 3 and 4 (4th, 5th, excluding the last) 1 2 3 4 5 6 7 8 9 10 11 Let's do some things with stuff. Oranges Crows Corn Banana Corn Apples Crows Banana Oranges Telephones Light Sugar Boy Girl Sugar#Boy Exercise 39, Dictionaries, Oh Lovely Dictionaries \u00b6 dictionary 1 2 3 4 things = [ 'a' , 'b' , 'c' , 'd' ] # list print things print things [ 1 ] 1 2 ['a', 'b', 'c', 'd'] b Change an element. 1 2 things [ 1 ] = 'z' print things 1 ['a', 'z', 'c', 'd'] A dictionary has keys associated with values. Order does not matter. If you supply the key, you will get the value. 1 2 3 4 5 6 stuff = { 'name' : 'Zed' , 'age' : '39' , 'height' : 8 * 12 + 2 } # a dictionary print stuff print stuff [ 'name' ] print stuff [ 'age' ] print stuff [ 'height' ] 1 2 3 4 {'age': '39', 'name': 'Zed', 'height': 98} Zed 39 98 Add an element. 1 2 3 stuff [ 'city' ] = \"San Francisco\" print stuff [ 'city' ] print stuff 1 2 San Francisco {'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98} Add and remove an element. 1 2 3 4 5 stuff [ 'color' ] = \"blue\" print stuff del stuff [ 'color' ] print stuff 1 2 {'color': 'blue', 'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98} {'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98} If the value does not exist when you call it, it will turn out an error. Instead, write it this way: print \"%r\" % stuff.get('color',None) . If it\u2019s not existant, it will return \u2018None\u2019 or a value by default 1 print stuff [ 'state' ] --------------------------------------------------------------------------- 1 2 3 4 5 6 7 KeyError Traceback (most recent call last) &lt;ipython-input-69-f211ffe8fe02&gt; in &lt;module&gt;() ----&gt; 1 print stuff['state'] KeyError: 'state' 1 print \" %r \" % stuff . get ( 'color' , None ) 1 None Change an element. 1 2 3 4 print stuff [ 'age' ] stuff [ 'age' ] = 400 print stuff [ 'age' ] 1 2 39 400 Extract with the index. 1 2 3 4 5 6 stuff [ 1 ] = \"Wow\" stuff [ 2 ] = \"Neato\" print stuff [ 1 ] print stuff [ 2 ] print stuff # new items won't be in order 1 2 3 Wow Neato {'city': 'San Francisco', 2: 'Neato', 'name': 'Zed', 1: 'Wow', 'age': 400, 'height': 98} Delete an element (according to the index). 1 2 3 4 del stuff [ 1 ] del stuff [ 2 ] print stuff 1 {'city': 'San Francisco', 'name': 'Zed', 'age': 400, 'height': 98} Create a mapping of state to abbreviation. 1 2 3 4 5 6 7 states = { 'Oregon' : 'OR' , 'Florida' : 'FL' , 'California' : 'CA' , 'New York' : 'NY' , 'Michigan' : 'MI' } Create a basic set of states and some cities in them. 1 2 3 4 5 cities = { 'CA' : 'San Francisco' , 'MI' : 'Detroit' , 'FL' : 'Jacksonville' } Add some key:value to dictionary cities. 1 2 cities [ 'NY' ] = 'New York' cities [ 'OR' ] = 'Portland' Print out some cities. 1 2 3 4 print \"Dictionary 'cities': \" , cities print '-' * 10 print \"NY State has: \" , cities [ 'NY' ] # call the key print \"OR State has: \" , cities [ 'OR' ] # get the value 1 2 3 4 Dictionary 'cities': {'FL': 'Jacksonville', 'CA': 'San Francisco', 'MI': 'Detroit', 'OR': 'Portland', 'NY': 'New York'} ---------- NY State has: New York OR State has: Portland Print some states. 1 2 3 4 print \"Dictionary 'states': \" , states print '-' * 10 print \"Michigan's abbreviation is: \" , states [ 'Michigan' ] print \"Florida's abbrebiation is: \" , states [ 'Florida' ] 1 2 3 4 Dictionary 'states': {'California': 'CA', 'Michigan': 'MI', 'New York': 'NY', 'Florida': 'FL', 'Oregon': 'OR'} ---------- Michigan's abbreviation is: MI Florida's abbrebiation is: FL Print a dictionary in dictionary. 1 2 3 print \"Michigan has: \" , cities [ states [ 'Michigan' ]] # is like states['Michigan'], then cities['MI'] print \"florida has: \" , cities [ states [ 'Florida' ]] 1 2 Michigan has: Detroit florida has: Jacksonville Print every state abbreviation. 1 2 3 4 print \"Enumerate Dictionary 'states', key:value...\" for state , abbrev in states . items (): print \" %s is abbreviated %s \" % ( state , abbrev ) # state = 1st item = key, abbrev = 2nd item = value 1 2 3 4 5 6 Enumerate Dictionary 'states', key:value... California is abbreviated CA Michigan is abbreviated MI New York is abbreviated NY Florida is abbreviated FL Oregon is abbreviated OR Print every city in state. 1 2 3 print \"Enumerate Dictionary 'cities', key:value...\" for abbrev , city in cities . items (): print \" %s has the city %s \" % ( abbrev , city ) 1 2 3 4 5 6 Enumerate Dictionary 'cities', key:value... FL has the city Jacksonville CA has the city San Francisco MI has the city Detroit OR has the city Portland NY has the city New York Now do both at the same time. 1 2 3 4 print \"Enumerate both dictionaries...\" for state , abbrev in states . items (): print \" %s state is abbreviated %s and has city %s \" % ( state , abbrev , cities [ abbrev ]) # state California gives abbrev CA, inside cities gives San Francisco 1 2 3 4 5 6 Enumerate both dictionaries... California state is abbreviated CA and has city San Francisco Michigan state is abbreviated MI and has city Detroit New York state is abbreviated NY and has city New York Florida state is abbreviated FL and has city Jacksonville Oregon state is abbreviated OR and has city Portland get() seek a key, whether it exists or not. 1 2 3 4 state = states . get ( 'Texas' ) # extract if not state : print \"Sorry, no Texas.\" 1 Sorry, no Texas. Get a city with a default value. 1 2 city = cities . get ( 'TX' , 'Does Not Exist' ) print \"The city for the state 'TX' is: %s \" % city 1 The city for the state 'TX' is: Does Not Exist Let\u2019s step up the above operations. Module hashmap.py works through a dictionary. Module ex39_test.py contains dictionaries (just like the above). In Python, we would run module ex39_test.py . The module would begin by importing module hashmap.py to use its methods and perform operations. Consult the manual. Exercise 40, Modules, Classes, and Objects \u00b6 1 2 3 mystuff = { 'apple' : 'I AM APPLES' } print mystuff [ 'apple' ] # get X from Y 1 I AM APPLES You can import a file with functions and variables from a another module. You can access the functions (methods) and variables from this other module. Both files must be in the same directory, otherwise, specify the path as well. 1 2 3 4 5 6 7 8 9 # %load ex40.py def apple (): print \"I AM APPLES!\" # this is just a variable tangerine = \"Living reflection of a dream\" apple () 1 % run ex40 . py 1 I AM APPLES! 1 2 3 4 5 import ex40 ex40 . apple () print ex40 . tangerine 1 2 I AM APPLES! Living reflection of a dream 1 2 3 mystuff [ 'new' ] = ex40 . tangerine print mystuff [ 'new' ] 1 Living reflection of a dream 1 2 3 4 5 6 import ex40 thing = ex40 thing . apple () print thing . tangerine 1 2 3 I AM APPLES! I AM APPLES! Living reflection of a dream Use a class instead of an imported module. Remember: class method = class function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Song ( object ): def __init__ ( self , lyrics ): # instantiation and shortcut for a creating a variable self . lyrics = lyrics # the variable could be equal to a text, a number or a variable def sing_me_a_song ( self ): # create a class function for line in self . lyrics : print line # instance happy_bday = Song ([ \"Happy birthday to you\" , \"I don't want to get sued\" , \"So I'll stop right there\" ]) # instance bulls_on_parade = Song ([ \"They rally around tha family\" , \"With pockets full of shells\" ]) # instance au_clair = Song ([ \"Au clair de la lune\" , \"Mon ami Pierrot\" , \"Prete-moi ta plume\" , \"Pour ecrire un mot\" ]) # not an instance!!! frere_jacques = [ \"Frere Jacques (bis)\" , \"Dormez-vous (bis)\" , \"Sonnez les matines (bis)\" , \"Ding-din-don (bis)\" ] # instance frere = Song ([ \"Frere Jacques (bis)\" , \"Dormez-vous (bis)\" , \"Sonnez les matines (bis)\" , \"Ding-din-don (bis)\" ]) # not a class function def chante_moi ( paroles ): # create a function for ligne in paroles : print ligne Invoke an instance. 1 happy_bday . sing_me_a_song () 1 2 3 Happy birthday to you I don't want to get sued So I'll stop right there Again. 1 bulls_on_parade . sing_me_a_song () 1 2 They rally around tha family With pockets full of shells Write instance.class function / instance.class method 1 au_clair . sing_me_a_song () 1 2 3 4 Au clair de la lune Mon ami Pierrot Prete-moi ta plume Pour ecrire un mot Write the method the other around: Class.class_function() / Class.class_method() . 1 2 #au_clair.sing_me_a_song() Song . sing_me_a_song ( au_clair ) 1 2 3 4 Au clair de la lune Mon ami Pierrot Prete-moi ta plume Pour ecrire un mot This function is independent. frere_jacques.chante_moi() can\u2019t be!!! 1 chante_moi ( frere_jacques ) 1 2 3 4 Frere Jacques (bis) Dormez-vous (bis) Sonnez les matines (bis) Ding-din-don (bis) It looks like Class.class_function() / Class.class_method() 1 Song . sing_me_a_song ( frere ) 1 2 3 4 Frere Jacques (bis) Dormez-vous (bis) Sonnez les matines (bis) Ding-din-don (bis) Exercise 41, Learning to Speak Object-Oriented \u00b6 Object-oriented programming (oop). The script below ( ex41.py ) imports a word list from a text file ( ex41_words.txt ). The script is a drill for learning oop. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 import random import sys ## WORD_URL = \"http://learncodethehardway.org/words.txt\" # read a file http://learncodethehardway.org/words.txt WORD_TXT = \"ex41_words.txt\" WORDS = [] # dictionary {\"Python\": \"English\"} PHRASES = { \"class %% %( %% %):\" : \"Make a class named %% % that is-a %% %.\" , \"class %% %(object): \\n\\t def __init__(self, ***):\" : \"class %% % has-a __init__ that takes self and *** parameters.\" , \"class %% %(object): \\n\\t def ***(self, @@@):\" : \"class %% % has-a function named *** that takes self and @@@ parameters.\" , \"*** = %% %()\" : \"Set *** to an instance of class %% %.\" , \"***.***(@@@)\" : \"From *** get the *** function, and call it with parameters self, @@@.\" , \"***.*** = '***'\" : \"From *** get the *** attribute and set it to '***'.\" } # do they want to drill phrases first if len ( sys . argv ) == 2 and sys . argv [ 1 ] == \"English\" : PHRASE_FIRST = True else : PHRASE_FIRST = False # load up the words from the website ## for word in urlopen(WORD_URL).readlines(): for word in open ( WORD_TXT , \"r\" ) . readlines (): WORDS . append ( word . strip ()) def convert ( snippet , phrase ): # 'list comprehension', reseach on the Internet class_names = [ w . capitalize () for w in random . sample ( WORDS , snippet . count ( \" %% %\" ))] other_names = random . sample ( WORDS , snippet . count ( \"***\" )) results = [] param_names = [] for i in range ( 0 , snippet . count ( \"@@@\" )): param_count = random . randint ( 1 , 3 ) param_names . append ( ', ' . join ( random . sample ( WORDS , param_count ))) for sentence in snippet , phrase : result = sentence [:] # fake class names for word in class_names : result = result . replace ( \" %% %\" , word , 1 ) # fake other names for word in other_names : result = result . replace ( \"***\" , word , 1 ) # fake parameter lists for word in param_names : result = result . replace ( \"@@@\" , word , 1 ) results . append ( result ) return results # keep going until until they hit CTRL-D try : while True : snippets = PHRASES . keys () random . shuffle ( snippets ) for snippet in snippets : phrase = PHRASES [ snippet ] question , answer = convert ( snippet , phrase ) if PHRASE_FIRST : question , answer = answer , question print question raw_input ( \"> \" ) print \"ANSWER: %s \\n\\n \" % answer except EOFError : print \" \\n Bye\" 1 2 3 4 5 6 7 8 9 alarm . deer ( disgust , brass ) & gt ; deer is a Class alarm function that takes arguments digust and brass ANSWER : From alarm get the deer function , and call it with parameters self , disgust , brass . class Building ( Blood ) : & gt ; etc ANSWER : Make a class named Building that is - a Blood . bucket = Berry () Sample of the original word list, 10 out of 503: 1 2 3 4 5 6 7 8 9 10 11 text account achiever actor addition adjustment advertisement advice aftermath agreement airplane Same script, but the list of word comes from the Internet. A note on the script: The use of constant variable such as WORD_URL (such variable should not be modified). A constant variable can be anything from a number, a string to a dictionary. The use of try/except pair to check for errors. It is similar to the pair if/else . Therea are several types of errors. EOFError is just one type. Consult other (or online) manuals to find out about all the types of errors. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 import random from urllib import urlopen import sys WORD_URL = \"http://learncodethehardway.org/words.txt\" # read a file WORDS = [] # dictionary {\"Python\": \"English\"} PHRASES = { \"class %% %( %% %):\" : \"Make a class named %% % that is-a %% %.\" , \"class %% %(object): \\n\\t def __init__(self, ***)\" : \"class %% % has-a __init__ that takes self and *** parameters.\" , \"class %% %(object): \\n\\t def ***(self, @@@)\" : \"class %% % has-a function named *** that takes self and @@@ parameters.\" , \"*** = %% %()\" : \"Set *** to an instance of class %% %.\" , \"***.***(@@@)\" : \"From *** get the *** function, and call it with parameters self, @@@.\" , \"***.*** = '***'\" : \"From *** get the *** attribute and set it to '***'.\" } # do they want to drill phrases first if len ( sys . argv ) == 2 and sys . argv [ 1 ] == \"English\" : PHRASE_FIRST = True else : PHRASE_FIRST = False # load up the words from the website for word in urlopen ( WORD_URL ) . readlines (): WORDS . append ( word . strip ()) def convert ( snippet , phrase ): # 'list comprehension', reseach on the Internet class_names = [ w . capitalize () for w in random . sample ( WORDS , snippet . count ( \" %% %\" ))] other_names = random . sample ( WORDS , snippet . count ( \"***\" )) results = [] param_names = [] for i in range ( 0 , snippet . count ( \"@@@\" )): param_count = random . randint ( 1 , 3 ) param_names . append ( ', ' . join ( random . sample ( WORDS , param_count ))) for sentence in snippet , phrase : result = sentence [:] # fake class names for word in class_names : result = result . replace ( \" %% %\" , word , 1 ) # fake other names for word in other_names : result = result . replace ( \"***\" , word , 1 ) # fake parameter lists for word in param_names : result = result . replace ( \"@@@\" , word , 1 ) results . append ( result ) return results # keep going until until they hit CTRL-D try : while True : snippets = PHRASES . keys () random . shuffle ( snippets ) for snippet in snippets : phrase = PHRASES [ snippet ] question , answer = convert ( snippet , phrase ) if PHRASE_FIRST : question , answer = answer , question print question raw_input ( \"> \" ) print \"ANSWER: %s \\n\\n \" % answer except EOFError : print \" \\n Bye\" Exercise 42, Is-A, Has-A, Objects, and Classes \u00b6 This exercise explains Exercise 41. Inheritance: is-a. object. instance of an object. object of object. has-a. attribute. not attribute. object. Animal is-a object. 1 2 3 4 class Animal ( object ): pass Dog is-a Animal, Animal is-a object. 1 2 3 4 5 6 7 class Dog ( Animal ): def __init__ ( self , name ): ## Cat has-a name self . name = name Cat is-a Animal, Animal is-a object. 1 2 3 4 5 6 class Cat ( Animal ): def __init__ ( self , name ): ## Cat has-a name self . name = name Person is-a object. 1 2 3 4 5 6 7 8 9 10 class Person ( object ): def __init__ ( self , name ): ## Person has-a name self . name = name ## Person has-a pet of some kind, but the pet is specifies elsewhere... self . pet = None Employee is-a Person, Person is-a object. 1 2 3 4 5 6 7 8 9 10 class Employee ( Person ): def __init__ ( self , name , salary ): ## Employee has-a name, because Person has-a name ## super: super ( Employee , self ) . __init__ ( name ) ## Employee has-a salary self . salary = salary Fish is-a object. 1 2 3 4 5 class Fish ( object ): ## no attributes like has-a name pass Salmon is-a Fish, Fish is-a object. 1 2 3 4 5 class Salmon ( Fish ): ## no attributes like has-a name pass Halibut is-a Fish, Fish is-a object. 1 2 3 4 5 class Halibut ( Fish ): ## no attributes like has-a name pass rover is-a instance of name, Dog has-a name. 1 rover = Dog ( \"Rover\" ) satan is-a instance of name, Cat has-a name. 1 satan = Cat ( \"Satan\" ) mary is-a instance of name, Person has-a name. 1 mary = Person ( \"Mary\" ) mary has-a Cat, Cat has-a name, satan, is-a Cat. 1 mary . pet = satan frank is-a instance of name, salary, Employee has-a name, salary. 1 frank = Employee ( \"Frank\" , 120000 ) frank has-a Dog, Dog has-a name, rover, is-a Dog. 1 frank . pet = rover flipper is-a instance of Fish, Fish is-a object, both has-a not attributes. 1 flipper = Fish () crouse is-a instance of Salmon, Salmon is-a Fish; both has-a not attribute. 1 crouse = Salmon () harry is-a instance of Halibut, Halibut is-a Fish; both has-a not attribute. 1 harry = Halibut () Wrap-up. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 object class Fish(object) class Salmon(Fish) crouse = Salmon() class Halibut(Fish) harry = Halibut() flipper = Fish() class Animal(object) class Dog(Animal) rover = Dog(\"Rover\") has-a name class Cat(Animal) satan = Cat(\"Satan\") has-a name class Person(object) mary.pet = satan has-a name, pet class Employee(Person) frank = Employee (\"Frank\", 120000) has-a name, salary frank.pet = rover has-a pet The concept of inheritance, and those of implicit inheritance, overridden inheritance, multiple inheritance, composition, alteration, super objects (or \u2018reinheritance\u2019) are explained in Exercise 44. Exercise 43, Gothons from Planet Percal #25 \u00b6 This Exercise is the first to prepare the final project (Exercise 52, the last chapter). Let\u2019s create a game, from A to Z. First, start by planning. This methodology is valuable for planning any kind of project or program. Methodology 1- Write about the problem: \u201cAliens have invaded a space ship and our hero has to go through a maze of rooms defeating them so he can escape into an escape pod to the planet below. The game will be more like a Zork or Adventure type game with text outputs and funny ways to die. The game will involve an engine that runs a map full of rooms or scenes. Each room will print its own description when the player enters it and then tell the engine what room to run next out of the map.\u201d 2- Describe each scene: Death This is when the player dies and should be something funny. Central Corridor This is the starting point and has a Gothon already standing there they have to defeat with a joke before continuing. Laser Weapon Armory This is where the hero gets a neutron bomb to blow up the ship before getting to the escape pod. It has a keypad the hero has to guess the number for. The Bridge Another battle scene with a Gothon where the hero places the bomb. Escape Pod Where the hero escapes but only after guessing the right escape pod. 3- Draw a map, write more descriptions. 4- Extract key concepts: 1 concept = 1 class. Research them, deepen things. Nouns = concepts = classes: Alien Player Ship Maze Room Scene Gothon Escape Pod Planet Map Engine Death Central Corridor Laser Weapon Armory The Bridge Verbs = functions. This is par the PEP: classes should be in an explicit noun startin with a uppercased letter such as class Central Corridor () . Functions should be verbs such as def play(): . 5- Create a class Hierarchy and object Map Make a class Hierarchy: Map Engine Scene Death Central Corridor Laser Weapon Armory The Bridge Escape Pod PEP: I know from the description I\u2019m going to need a way to \u2018run\u2019 the engine, \u2018get the next scene\u2019 from the map, get the \u2018opening scene\u2019, and \u2018enter\u2019 a scene. I\u2019ll add those like this: Map next_scene opening_scene Engine play Scene enter Death Central Corridor Laser Weapon Armory The Bridge Escape Pod All the scenes under another scene will inherit it; except \u2018enter\u2019: override it later. 6- Code the Classes and a Test to Run Them: Turn: 1 2 3 4 5 6 7 8 9 10 11 12 - Map - next_scene (verb) - opening scene (verb) - Engine - play (verb) - Scene - enter (verb) - Death - Central Corridor - Laser Weapon Armory - The Bridge - Escape Pod Into: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Map ( object ) : def __init__ ( self , start_scene ) : def next_scene ( self , start_scene ) : def opening_scene ( self ) : class Engine ( object ) : def __init__ ( self , scene_map ) : def play ( self ) : class Scene ( object ) : def enter ( self ) : class CentralCorridor ( Scene ) : def enter ( self ) : class LaserWeaponArmory ( Scene ) : def enter ( self ) : class TheBridge ( Scene ) : def enter ( self ) : class EscapePod ( Scene ) : def enter ( self ) : class Death ( Scene ) : def enter ( self ) : a_map = Map ( 'central_corridor' ) a_game = Engine ( a_map ) a_game . play () Into: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class Scene ( object ) : def enter ( self ) : pass class Engine ( object ) : def __init__ ( self , scene_map ) : pass def play ( self ) : pass class Death ( Scene ) : def enter ( self ) : pass class CentralCorridor ( Scene ) : def enter ( self ) : pass def enter ( self ) : pass class TheBridge ( Scene ) : def enter ( self ) : pass class EscapePod ( Scene ) : def enter ( self ) : pass class Map ( object ) : def __init__ ( self , start_scene ) : pass def next_scene ( self , scene_name ) : pass def opening_scene ( self ) : pass a_map = Map ( 'central_corridor' ) a_game = Engine ( a_map ) a_game . play () Start coding (first code skeleton). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class Scene ( object ): def enter ( self ): pass class Engine ( object ): def __init__ ( self , scene_map ): pass def play ( self ): pass class Death ( Scene ): def enter ( self ): pass class CentralCorridor ( Scene ): def enter ( self ): pass class LaserWeaponArmory ( Scene ): def enter ( self ): pass class TheBridge ( Scene ): def enter ( self ): pass class EscapePod ( Scene ): def enter ( self ): pass class Map ( object ): def __init__ ( self , start_scene ): pass def next_scene ( self , scene_name ): pass def opening_scene ( self ): pass a_map = Map ( 'central_corridor' ) a_game = Engine ( a_map ) a_game . play () Improve the codeimport two functions from two libraries from sys import exit from random import randint # class to generate child classes class Scene ( object ): def enter ( self ): print \"This scene is not yet configured. Subclass it and implement enter().\" exit ( 1 ) class Engine ( object ): def __init__ ( self , scene_map ): self . scene_map = scene_map def play ( self ): current_scene = self . scene_map . opening_scene () # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below last_scene = self . scene_map . next_scene ( 'finished' ) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below while current_scene != last_scene : next_scene_name = current_scene . enter () # function/method from class Scene(object) above current_scene = self . scene_map . next_scene ( next_scene_name ) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) current_scene . enter () # use newly-created current_scene with function/method from class Scene(object) above class Death ( Scene ): quips = [ \"You died. You kinda suck at this.\" , \"Your mom would be proud...if she were smarter.\" , \"Such a louser.\" , \"I have a small puppy that's better at this.\" ] # a list (variable) where a random method will extract an element def enter ( self ): print Death . quips [ randint ( 0 , len ( self . quips ) - 1 )] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list) exit ( 1 ) class CentralCorridor ( Scene ): def enter ( self ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"The Gothons of Planet Percal #25 have invaded your ship and destroyed\" print \"your entire crew. You are the last surviving member and your last\" print \"mission is to get the neutron destruct bomb from the Weapons Armory,\" print \"put it in the bridge, and blow the ship up after getting into an \" print \"escape pod.\" print \" \\n \" print \"You're running down the central corridor to the Weapons Armory when\" print \"a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume\" print \"flowing around his hate filled body. He's blocking the door to the\" print \"Armory and about to pull a weapon to blast you.\" action = raw_input ( \"shoot!/dodge!/tell a joke> \" ) if action == \"shoot!\" : print \"Quick on the draw you yank out your blaster and fire it at the Gothon.\" print \"His clown costume is flowing and moving around his body, which throws\" print \"off your aim. Your laser hits his costume but misses him entirely. This\" print \"completely ruins his brand new costume his mother bought him, which\" print \"makes him fly into an insane rage and blast you repeatedly in the face until\" print \"you are dead. Then he eats you.\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class elif action == \"dodge!\" : print \"Like a world class boxer you dodge, weave, slip and slide right\" print \"as the Gothon's blaster cranks a laser past your head.\" print \"In the middle of your artful dodge your foot slips and you\" print \"bang your head on the metal wall and pass out.\" print \"You wake up shortly after only to die as the Gothon stomps on\" print \"your head and eats you.\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class elif action == \"tell a joke\" : print \"Lucky for you they made you learn Gothon insults in the academy.\" print \"You tell the one Gothon joke you know:\" print \"Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr.\" print \"The Gothon stops, tries not to laugh, then busts out laughing and can't move.\" print \"While he's laughing you run up and shoot him square in the head\" print \"putting him down, then jump through the Weapon Armory door.\" return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"DOES NOT COMPUTE!\" return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class class LaserWeaponArmory ( Scene ): def enter ( self ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"You do a dive roll into the Weapon Armory, crouch and scan the room\" print \"for more Gothons that might be hiding. It's dead quiet, too quiet.\" print \"You stand up and run to the far side of the room and find the\" print \"neutron bomb in its container. There's a keypad lock on the box\" print \"and you need the code to get the bomb out. If you get the code\" print \"wrong 10 times then the lock closes forever and you can't\" print \"get the bomb. The code is 3 digits.\" code = \" %d%d%d \" % ( 1 , 2 , 3 ) #% (randint(1,9), randint(1,9), randint(1,9)) guess = raw_input ( \"[keypad]> \" ) guesses = 0 while guess != code and guesses < 10 : print \"BZZZZEDDD!\" guesses += 1 guess = raw_input ( \"[keypad]> \" ) if guess == code : print \"The container clicks open and the seal breaks, letting gas out.\" print \"You grab the neutron bomb and run as fast as you can to the\" print \"bridge where you must place it in the right spot.\" return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"The lock buzzes one last time and then you hear a sickening\" print \"melting sound as the mechanism is fused together.\" print \"You decide to sit there, and finally the Gothons blow up the\" print \"ship from their ship and you die.\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class class TheBridge ( Scene ): def enter ( self ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"You burst onto the Bridge with the netron destruct bomb\" print \"under your arm and surprise 5 Gothons who are trying to\" print \"take control of the ship. Each of them has an even uglier\" print \"clown costume than the last. They haven't pulled their\" print \"weapons out yet, as they see the active bomb under your\" print \"arm and don't want to set it off.\" action = raw_input ( \"throw the bomb/slowly place the bomb> \" ) if action == \"throw the bomb\" : print \"In a panic you throw the bomb at the group of Gothons\" print \"and make a leap for the door. Right as you drop it a\" print \"Gothon shoots you right in the back killing you.\" print \"As you die you see another Gothon frantically try to disarm\" print \"the bomb. You die knowing they will probably blow up when\" print \"it goes off.\" return 'death' elif action == \"slowly place the bomb\" : print \"You point your blaster at the bomb under your arm\" print \"and the Gothons put their hands up and start to sweat.\" print \"You inch backward to the door, open it, and then carefully\" print \"place the bomb on the floor, pointing your blaster at it.\" print \"You then jump back through the door, punch the close button\" print \"and blast the lock so the Gothons can't get out.\" print \"Now that the bomb is placed you run to the escape pod to\" print \"get off this tin can.\" return 'escape_pod' else : print \"DOES NOT COMPUTE!\" return \"the_bridge\" # input for class Map(object)'s dictionary of key:value; extract a function from another class class EscapePod ( Scene ): def enter ( self ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"You rush through the ship desperately trying to make it to\" print \"the escape pod before the whole ship explodes. It seems like\" print \"hardly any Gothons are on the ship, so your run is clear of\" print \"interference. You get to the chamber with the escape pods, and\" print \"now need to pick one to take. Some of them could be damaged\" print \"but you don't have time to look. There's 5 pods, which one\" print \"do you take?\" good_pod = 1 #randint(1,5) guess = raw_input ( \"[pod #]> \" ) if int ( guess ) != good_pod : print \"You jump into pod %s and hit the eject button.\" % guess print \"The pod escapes out into the void of space, then\" print \"implodes as the hull ruptures, crushing your body\" print \"into jam jelly.\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"You jump into pod %s and hit the eject button.\" % guess print \"The pod easily slides out into space heading to\" print \"the planet below. As it flies to the planet, you look\" print \"back and see your ship implode then explode like a\" print \"bright star, taking out the Gothon ship at the same\" print \"time. You won!\" return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class class Finished ( Scene ): def enter ( self ): print \"You won! Good job.\" return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class class Map ( object ): scenes = { 'central_corridor' : CentralCorridor (), 'laser_weapon_armory' : LaserWeaponArmory (), 'the_bridge' : TheBridge (), 'escape_pod' : EscapePod (), 'death' : Death (), 'finished' : Finished (), } def __init__ ( self , start_scene ): self . start_scene = start_scene def next_scene ( self , scene_name ): val = Map . scenes . get ( scene_name ) return val def opening_scene ( self ): return self . next_scene ( self . start_scene ) a_map = Map ( 'central_corridor' ) a_game = Engine ( a_map ) a_game . play () Improve\uimport two functions from two libraries from sys import exit from random import randint import time import math # class to generate child classes class Scene ( object ): def enter ( self ): print \"This scene is not yet configured. Subclass it and implement enter().\" exit ( 1 ) class Engine ( object ): def __init__ ( self , scene_map , hero ): self . scene_map = scene_map self . hero = hero def play ( self ): current_scene = self . scene_map . opening_scene () # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below last_scene = self . scene_map . next_scene ( 'finished' ) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below while current_scene != last_scene : # True: print \" \\n ----------\" next_scene_name = current_scene . enter ( self . hero ) # function/method from class Scene(object) above current_scene = self . scene_map . next_scene ( next_scene_name ) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) current_scene . enter () # use newly-created current_scene with function/method from class Scene(object) above class Death ( Scene ): quips = [ \"Death1\" , \"Death2\" , \"Death3\" , \"Death4\" ] # a list (variable) where a random method will extract an element def enter ( self , hero ): print Death . quips [ randint ( 0 , len ( self . quips ) - 1 )] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list) exit ( 1 ) class CentralCorridor ( Scene ): def enter ( self , hero ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"Enter. Select.\" action = raw_input ( \"Pick one: a/b/c> \" ) . upper () if action == \"A\" : print \"Ouch!\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class elif action == \"B\" : print \"Aye!\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class elif action == \"C\" : print \"Good.\" return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"DOES NOT COMPUTE!\" return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class class LaserWeaponArmory ( Scene ): def enter ( self , hero ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"Pick a 3-digit combinaison.\" code = \" %d%d%d \" % ( 1 , 2 , 3 ) #% (randint(1,9), randint(1,9), randint(1,9)) print code guess = raw_input ( \"[keypad]> \" ) guesses = 0 while guess != code and guesses < 10 : print \"BZZZZEDDD!\" guesses += 1 guess = raw_input ( \"[keypad]> \" ) if guess == code : print \"Click! Go!\" return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"Boom!\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class class TheBridge ( Scene ): def enter ( self , hero ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"Bridge enigma.\" action = raw_input ( \"true/false> \" ) . upper () if action == \"TRUE\" or action == \"T\" : print \"It goes off.\" return 'death' elif action == \"FALSE\" or action == \"F\" : print \"Escape.\" return 'escape_pod' else : print \"DOES NOT COMPUTE!\" return \"the_bridge\" # input for class Map(object)'s dictionary of key:value; extract a function from another class class EscapePod ( Scene ): def enter ( self , hero ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"You rush!\" good_pod = 1 #randint(1,5) guess = raw_input ( \"[Pick a pod #]> \" ) if int ( guess ) != good_pod : print \"Oups!\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"Good choice!\" return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class class Win ( Scene ): def enter ( self , hero ): print \"You won! Good job.\" return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class # exit(0) class Final ( Scene ): def enter ( self , hero ) monster = Monster ( \"Gothon\" ) print \" %s , You now came across the final boss %s ! Let's fight!!!\" % ( hero . name , monster . name ) a_combat = Combat () next_stage = a_combat . combat ( hero , monster ) return next_stage class Combat ( object ): def combat ( self , hero , monster ): #combat between two roles round = 1 while True : print '=' * 30 print 'round %d ' % round print '=' * 30 print \"Your HP: %d \" % hero . hp print \" %s 's HP: %d \" % ( monster . name , monster . hp ) print 'Which action do you want to take?' print '-' * 10 print '1) attack - Attack the enemy' print '2) defend - Defend from being attacked, also will recover a bit' try : action = int ( raw_input ( '> ' )) except ValueError : print \"Please enter a number!!\" continue # defending should be done before attacking if action == 2 : hero . defend () # action of monster, 1/5 possibility it will defends monster_action = randint ( 1 , 6 ) if monster_action == 5 : monster . defend () if action == 1 : hero . attack ( monster ) elif action == 2 : pass else : print \"No such action!\" if monster_action < 5 : monster . attack ( hero ) # whether win or die if hero . hp <= 0 : return 'death' if monster . hp <= 0 : return 'win' hero . rest () monster . rest () round += 1 class Map ( object ): scenes = { 'central_corridor' : CentralCorridor (), 'laser_weapon_armory' : LaserWeaponArmory (), 'the_bridge' : TheBridge (), 'escape_pod' : EscapePod (), 'death' : Death (), 'final_fight' : Final (), 'win' : Win (), 'finished' : Finished (), } def __init__ ( self , start_scene ): self . start_scene = start_scene def next_scene ( self , scene_name ): val = Map . scenes . get ( scene_name ) return val def opening_scene ( self ): return self . next_scene ( self . start_scene ) class human ( object ): defending = 0 def __init__ ( self , name ): self . name = name def attack ( self , target ): # attack the target percent = 0 time . sleep ( 1 ) if target . defending == 1 : percent = float ( self . power ) / 10.0 + randint ( 0 , 10 ) target . hp = math . floor ( target . hp - percent ) else : percent = float ( self . power ) / 5.0 + randint ( 0 , 10 ) target . hp = math . floor ( target . hp - percent ) print \" %s attack %s . %s 's HP decreased by %d points.\" % ( self . name , target . name , target . name , percent ) def defend ( self ): # be in the defending state self . defending = 1 print \" %s is trying to defend.\" % self . name def rest ( self ): # recover a bit after each round if self . defending == 1 : percent = self . rate * 10 + randint ( 0 , 10 ) else : percent = self . rate * 2 + randint ( 0 , 10 ) self . hp += percent print \" %s 's HP increased by %d after rest.\" % ( self . name , percent ) self . defending = 0 class Hero ( Human ): # class for hero hp = 1000 power = 200 rate = 5 class Monster ( Human ): # class for monster hp = 5000 power = 250 rate = 5 a_map = Map ( 'central_corridor' ) a_hero = Hero ( 'Joe' ) a_game = Engine ( a_map ) a_game . play () Wrap up \u00b6 Draw a mindmap. Draw a flowchart. List all variables, data, other objects and add comments. Build the modules (classes) and embed the primal code. Refine. Use a visualizing software. Exercise 44, Inheritance vs Composition \u00b6 From the manual. When to Use Inheritance or Composition \u00b6 The question of \u2018inheritance versus composition\u2019 comes down to an attempt to solve the problem of reusable code. You don\u2019t want to have duplicated code all over your software, since that\u2019s not clean and efficient. Inheritance: solves this problem by creating a mechanism for you to have implied features in base classes. Composition: solves this by giving you modules and the ability to call functions in other classes. If both solutions solve the problem of reuse, then which one is appropriate in which situations? The answer is incredibly subjective, but I\u2019ll give you my three guidelines for when to do which: Avoid multiple Inheritance at all costs, as it\u2019s too complex to be reliable. If you\u2019re stuck with it, then be prepared to know the class hierarchy and spend time finding where everything is coming from. Use Composition to package code into modules that are used in many different unrelated places and situations. Use Inheritance only when there are clearly related reusable pieces of code that fit under a single common concept or if you have to because of something you\u2019re using. The thing to remember about object-oriented programming is that it is entirely a social convention programmers have created to package and share code. In that case, find out how they use things and then just adapt to the situation. Function Style \u00b6 pep Function = Method. A class does things: name it as if it\u2019s a command you are giving to the class. Same as pop is saying \u2018pop this off the list\u2019. Keep functions small and simple (PEP). Class Style Use the camel case: SuperGoldFactory . Minimize what __init__ does. It should be simple to use. Other class functions use the underscore format: my_awesome_hair . Be consistent in how you organize your function arguments. Function 1 takes (dog, cat, user) , function 2 should take (dog, cat, user) . Unless there is a good reason. Variable should be self-contained. Limit importing from modules or globals. Always have a class Name(object) on top of all. Code Style Give your code vertical space to read. Read you code out loud to test it. Change the difficult passages to improve readibility. Imitate other coders: find you style. Respect others\u2019s style; be a team player. Good Comments Describe why you are doing doing what you are doing. Write for the others. Write sentences. Avoid clutering the code though. Short sentences, to the point. Review your comments. Composition \u00b6 In this code I\u2019m not using the name Parent, since there is not a parent-child is-a relationship. This is a has-a relationship, where Child has-a Other that it uses to get its work done. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Other ( object ): def implicit ( self ): print \"OTHER implicit()\" def override ( self ): print \"OTHER override()\" def altered ( self ): print \"OTHER altered()\" class Child ( object ): def __init__ ( self ): self . other = Other () # initialize this class with Other(), when an instance is created, it will inherit the class member variables, class functions... def implicit ( self ): self . other . implicit () # call the other class function def override ( self ): print \"CHILD override()\" def altered ( self ): print \"CHILD, BEFORE OTHER altered()\" self . other . altered () # call the other class function print \"CHILD, AFTER OTHER altered()\" son = Child () # instance son . implicit () son . override () son . altered () Implicit Inheritance \u00b6 Actions on the child imply an action on the parent. The use of pass under the class Child : is how you tell Python that you want an empty block. This creates a class named Child but says that there\u2019s nothing new to define in it. Instead it will inherit all of its behavior from Parent . If you put functions in a base class (i.e., Parent ) then all subclasses (i.e., Child ) will automatically get those features. Very handy for repetitive code you need in many classes. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Parent ( object ): def implicit ( self ): print \"PARENT implicit()\" class Child ( Parent ): pass dad = Parent () son = Child () Inherit from both Classes \u00b6 Python has to look-up the possible function in the class hierarchy for both Child and BadStuff , but it needs to do this in a consistent order. To do this Python uses \u201cmethod resolution order\u201d (MRO) and an algorithm called C3 to get it straight. Because the MRO is complex and a well-defined algorithm is used, Python can\u2019t leave it to you to get the MRO right. Instead, Python gives you the super() function, which handles all of this for you in the places that you need the altering type of actions as I did in Child.altered. With super() you don\u2019t have to worry about getting this right, and Python will find the right function for you. 1 2 3 class SuperFun ( Child , BadStuff ): pass Override Explicitly \u00b6 Actions on the child override the action on the parent. As you can see, it runs the Parent.override function because that variable (dad) is a Parent. But it also runs Child.override messages because son is an instance of Child and Child overrides that function by defining its own version. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Parent ( object ): def override ( self ): print \"PARENT override()\" class Child ( Parent ): def override ( self ): print \"CHILD override()\" dad = Parent () son = Child () dad . override () son . override () Alter Before or After \u00b6 Actions on the child alter the action on the parent. son.altered() overrides Parent.altered the Child.altered version runs, and line 9 executes like you\u2019d expect. In this case I want to do a before and after, I want to use super to get the Parent.altered version. I call super(Child, self).altered() , which is aware of inheritance and will get the Parent class for you. You should be able to read this as \u201ccall super with arguments Child and self , then call the function altered on whatever it returns.\u201d At this point, the Parent.altered version of the function runs, and that prints out the Parent message. Finally, this returns from the Parent.altered and the Child.altered function continues to print out the after message. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Parent ( object ): def altered ( self ): print \"PARENT altered()\" class Child ( Parent ): def altered ( self ): print \"CHILD, BEFORE PARENT altered()\" super ( Child , self ) . altered () print \"CHILD, AFTER PARENT altered()\" dad = Parent () son = Child () dad . altered () son . altered () Super \u00b6 With super , Child reinherit from the Parent . The most common use of super() is actually in __init__ functions in base classes. Then additional class functions. 1 2 3 4 5 6 class Child ( Parent ): def __init__ ( self , stuff ): self . stuff = stuff super ( Child , self ) . __init__ () All Three Combined \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Parent ( object ): def override ( self ): print \"PARENT override()\" def implicit ( self ): print \"PARENT implicit()\" def altered ( self ): print \"PARENT altered()\" class Child ( Parent ): def override ( self ): print \"CHILD override()\" def altered ( self ): print \"CHILD, BEFORE PARENT altered()\" super ( Child , self ) . altered () print \"CHILD, AFTER PARENT altered()\" dad = Parent () son = Child () dad . implicit () son . implicit () dad . override () son . override () dad . altered () son . altered () Exercise 45, You Make a Game \u00b6 Use an existing project, Exercise 43 for example, and adapt it. This is a first draft for a project\u2026 1 Storyboarding tool. Create a program that would question the user on its data and advise him on what would be the best graphics to use. Frame by frame, the user could build a presentation knowing slide 1 should be a histogram, slide 2 a scatter plot, etc. 2 Map next_graph opening comment (verb) Engine choose (verb) Graph proceed (verb) 1. CC pie 2. IC bar 3. TSC column, line 4. FDC column, line 5. CorC bar, dot opening comment general comment storytelling pie compare data, y, n y, stacked bar chart n, pie chart with a maximum of 6 items bar simple series of data or items: h deviation bar chart (tornado), divide A from B (winners from losers, good markets from bad markets): h deviation bar chart (tornado), mix of two components (portfolio A items vs portfolio B items):sliding h bar chart, high-low spreads:range h bar chart, correlation x1 and x2 with y (two products, two markets\u2026 with): paired bar chart, compare aspects (with or without discount, red or blue paint):group h bar chart, components of the total: subdivided h bar chart\u2026 column p.37, 42 line p.39, 44-45 surface p. 40 dot p.49 3 Create module 3graph_story (proof of concept). The module presents a story in 3 graphs, according to 3 sets of data. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Map ( object ) : def __init__ ( self , start ) : def next ( self , start ) : def opening ( self ) : class Engine ( object ) : def __init__ ( self , graph_map ) : def choose ( self ) : class Graph ( object ) : def proceed ( self ) : class 1 CC ( Graph ) : def enter ( self ) pie class 2 IC ( Graph ) : def enter ( self ) : bar class 3 TSC ( Graph ) : def enter ( self ) : column line class 4 FDC ( Graph ) : def enter ( self ) : column line class 5 CorC ( Graph ) : def enter ( self ) : bar dot And so on. Consult the manual to find out more Exercise 46, A Project Skeleton \u00b6 The \u2018skeleton\u2019 directory (see below) or the directory framework will have all the basics you need to get a new project up and running. It will have your project layout, automated tests, modules, and install scripts. 1 2 3 4 5 6 7 8 9 10 11 12 \\:. \u251c\u2500\u2500\u2500bin \u2502 \u251c\u2500\u2500\u2500__init__.py \u2502 \u2514\u2500\u2500\u2500__init__.pyc \u251c\u2500\u2500\u2500docs \u251c\u2500\u2500\u2500NAME \u2502 \u251c\u2500\u2500\u2500__init__.py \u2502 \u2514\u2500\u2500\u2500__init__.pyc \u251c\u2500\u2500\u2500tests \u2502 \u251c\u2500\u2500\u2500__init__.py \u2502 \u2514\u2500\u2500\u2500__init__.pyc \u2514\u2500\u2500\u2500setup.py \\:. is the project parent directory or simply \u2018the\u2019 directory (its name is the project\u2019s name). The directory is the place to be when launching scripts. bin is the main sub-directory. It contains the main script ( python bin/main.py ) for launching other scripts in the project; and launching tests as well. These script are often located in other sub-directories. A sub-directory must be executable to import a module from it or execute a script in it: add an empty script called __init__.py . When a script is executed, it is compiled. Another script, with the extension .pyc , appears. Same as for __init__.pyc , as the sub-directory was executed (when a script import a script from another sub-directory for example). tests contains files to perform nose tests and unittests. setup.py is for documenting and distributing the project (when the project is compiled to be launched as a whole or frozen to be distributed). You can add a readme file below (usually a text or markdown document). The docs sub-directory contains all the project\u2019s documentation. It is more elaborate than the \u2018readme\u2019 file: manuals, explanations, logs, wikis, etc. There can be other sub-directories for static such as images, web languages, etc. Repeat this directory structure for every project. To clean up the directory, in the bash: 1 2 3 4 find . -name \"*.pyc\" -print #display find . -name \"*.pyc\" -exec rn {} \\; 1 remove grep -r \"NAME\" * #search within files In Linux, before running any script, be sure to set the path to the project directory. Bash: 1 2 3 4 export PYTHONPATH = . export PYTHONPATH = $PYTHONPATH : $PWD unset PYTHONPATH # to remove In Windows, set the path in the environment variables. Otherwise, Python won\u2019t find the scripts. PowerShell: 1 $env :PYTHONPATH = \" $env :PYTHONPATH;.\" Or, on top of the Python code, below the shebang lnes, and before any other imports, add: 1 2 3 import sys sys . path # to view sys . path . append ( '.' ) # to set Consult the manual to find out more. Exercise 47, Automated Testing \u00b6 Miscellaneous notes \u00b6 The project directory is \u2018ex47\u2019. Test if you migrated the files correctly. In the bash: 1 2 grep -r NAME * # no traces of 'NAME', from 'skeleton' find . -name \"*.pyc\" -exec rm {} \\; # no trace of 'name' When you launch a script, you launch it from the parent directory with python bin/app.py . In directory \u2018ex47\u2019, run tests with python tests/BLAH_tests.py . Consult the manual about testing. This is not covered in this notebook. Testing must be done in the shell or in the bash. Make sure you\u2019re running the tests with nosetests not with just Python. The important functions here are assert_equal which makes sure that variables you have set or paths you have built in a Room are actually what you think they are. If you get the wrong result, then nosetests will print out an error message so you can go figure it out. In a script, when you import from another sub-directory, code: 1 from ex47.game import Room When the imported script is in the same sub-directory, code: 1 from bin import Room Consult the manual to find out more. Exercise 50, Your First Website \u00b6 An overview \u00b6 Web framework for web projects. Django (the real deal, but complicated), Flask (modest), Pyramid (scalable), etc. Or the simple, yet powerful enough, web.py. Exercises, from 50 to 52, are done with web.p","title":"Learn Python the Hard Way"},{"location":"Learn Python the Hard Way/#shorcuts-good-to-know","text":"In the terminal, type pydoc <python item> to invoke the documentation on a python item (built-in functions, methods, objects, etc.). Ctrl + C and/or Ctrl + D break a loop.","title":"Shorcuts, Good to Know"},{"location":"Learn Python the Hard Way/#exercise-3-numbers-and-math","text":"print, format, calculate 1 print \"I will now count my chickens:\" 1 I will now count my chickens: 1 2 3 4 5 6 7 8 print \"Hens\" , 25 + 30 / 6 print \"Roosters\" , 100 - 25 * 3 % 4 print \"Now I will count the eggs:\" print 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 # copy 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 straight into the shell and run it # you will get the result only (don't add print before the statement) 1 2 3 4 Hens 30 Roosters 97 Now I will count the eggs: 7 1 2 print \"Is it true that 3 + 2 < 5 - 7\" print 3 + 2 < 5 - 7 1 2 Is it true that 3 + 2 &lt; 5 - 7 False 1 2 print \"What is 3 + 2?\" , 3 + 2 print \"What is 5 - 7?\" , 5 - 7 1 2 What is 3 + 2? 5 What is 5 - 7? -2 1 2 print \"Oh, that's why it's False.\" print \"How about some more.\" 1 2 Oh, that's why it's False. How about some more. 1 2 3 print \"Is it greater?\" , 5 > - 2 print \"Is it greater or equal?\" , 5 >= - 2 print \"Is it less or equal?\" , 5 <= - 2 1 2 3 Is it greater? True Is it greater or equal? True Is it less or equal? False 1 print ( 1 + 1 ) # integer 1 2 1 print ( 1.0 + 1 ) # float 1 2.0","title":"Exercise 3, Numbers and Math"},{"location":"Learn Python the Hard Way/#exercise-4-variables-and-names","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cars = 100 space_in_a_car = 4.0 # float drivers = 30 passengers = 90 cars_not_driven = cars - drivers cars_driven = drivers carpool_capacity = cars_driven * space_in_a_car average_passengers_per_car = passengers / cars_driven print \"There are\" , cars , \"cars available.\" print \"There are only\" , drivers , \"drivers available.\" print \"There will be\" , cars_not_driven , \"empty cars today.\" print \"We can transport\" , carpool_capacity , \"people today.\" print \"We have\" , passengers , \"to carpool today.\" print \"We need to put about\" , average_passengers_per_car , \"in each cars.\" 1 2 3 4 5 6 There are 100 cars available. There are only 30 drivers available. There will be 70 empty cars today. We can transport 120.0 people today. We have 90 to carpool today. We need to put about 3 in each cars. A constant variable, a variable that should never be altered, should be set in capital as PI = 3.1416 .","title":"Exercise 4, Variables and Names"},{"location":"Learn Python the Hard Way/#exercise-5-more-variables-and-printing","text":"Call a variable with: %r ; raw variable. %s ; string. %d ; digit. Make the choice depending on the variable type. However, if calling a \u2018string\u2019 (text, NLP), it must be done with %s ; \u2018numbers\u2019 is done with %r and %d (possibly with %s ). The use and effects of the different calls is explained in Exercises 6 and 21. 1 2 3 4 5 6 7 8 9 my_name = 'Zed A. Shaw' my_age = 35 # not a lie my_height = 74 # inches my_weight = 180 # lbs my_eyes = 'Blue' my_teeth = 'White' my_hair = 'Brown' print \"Let's talk about %s .\" % my_name 1 Let's talk about Zed A. Shaw. 1 2 3 4 # does the same thing print \"He's %d years old.\" % my_age print \"He's\" , my_age , \"years old.\" print \"He will be\" , my_age + 1 , \"years old next year.\" 1 2 3 He's 35 years old. He's 35 years old. He will be 36 years old next year. 1 2 3 4 5 print \"He's %d inches tall.\" % my_height print \"He's %d pounds heavy\" % my_weight print \"Actually that's not too heavy.\" print \"He's got %s eyes and %s hair.\" % ( my_eyes , my_hair ) print \"His teeth are usually %s depending on the coffee.\" % my_teeth 1 2 3 4 5 He's 74 inches tall. He's 180 pounds heavy Actually that's not too heavy. He's got Blue eyes and Brown hair. His teeth are usually White depending on the coffee. 1 2 3 # this line is tricky, try to get it exactly right print \"If I add %d , %d , and %d I get %d .\" % ( my_age , my_height , my_weight , my_age + my_height + my_weight ) 1 If I add 35, 74, and 180 I get 289.","title":"Exercise 5, More Variables and Printing"},{"location":"Learn Python the Hard Way/#exercise-6-strings-and-text","text":"concatenate %s and %r help when concatenating strings. %r does not coerce the variable into a format ( %s string or %d digit). 1 2 3 4 5 6 7 8 x = \"There are %d types of people.\" % 10 binary = \"binary\" do_not = \"don't\" y = \"Those who know %s and those who %s .\" % ( binary , do_not ) # assign strings or chains of strings to a variable print x print y 1 2 There are 10 types of people. Those who know binary and those who don't. 1 2 print \"I said: %r .\" % x print \"I also said: ' %s '.\" % y 1 2 I said: 'There are 10 types of people.'. I also said: 'Those who know binary and those who don't.'. 1 2 3 4 hilarious = False joke_evaluation = \"Isn't that joke so funny?! %r \" print joke_evaluation % hilarious 1 Isn't that joke so funny?! False 1 2 3 4 5 6 # add two strings together, concatenate them w = \"This is the left side of...\" e = \" a string with a right side.\" # with Numpy, it would have added (mathematically speaking) print w + e 1 This is the left side of... a string with a right side.","title":"Exercise 6, Strings and Text"},{"location":"Learn Python the Hard Way/#exercise-15-reading-files","text":"Before running this script, create a text file. Type \"Test file thing\" > test.txt . Then type cat test.txt . \u2018test.txt\u2019 is now saved along the other scripts. Run the script: python ex15.py test.txt With IPython, type: %run ex15 . py test . txt Run the script without the extra argument test.txt to check the result. 1 % run ex15 . py test . txt 1 2 3 4 5 6 Here's your file 'test.txt': Test file thing Type the filename again: &gt; test.txt Here's your file 'test.txt' again: Test file thing 1 % run ex15 . py --------------------------------------------------------------------------- 1 2 3 4 5 6 7 8 9 10 11 ValueError Traceback ( most recent call last ) \\\\ Learn Python the Hard Way \\ ex15 . py in & lt ; module & gt ;() 1 from sys import argv 2 ----& gt ; 3 script , filename = argv 4 5 # similarities ValueError : need more than 1 value to unpack Load the script in IPython with %load to study it (don\u2019t run it!). This type of script requires \u2018external\u2019 arguments when launched: python ex15.py test.txt In the script itself, always preceed the \u2018external\u2019 arguments, like filename , with script since your write python ex15.py test.txt or python script argument when you launch the script. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # %load ex15.py from sys import argv script , filename = argv # similarities between # var = raw_input(\"string\", digit, \"prompt\") # var = open(\"string\") txt = open ( filename ) # reference to a file, not the file print \"Here's your file %r :\" % filename print txt . read () print \"Type the filename again:\" file_again = raw_input ( \"> \" ) text_again = open ( file_again ) print \"Here's your file %r again:\" % file_again print text_again . read () The script again (this time, a manual import or copy-paste). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from sys import argv # always preceed the arguments like 'filename' with 'script' script , filename = argv # similarities # var = raw_input(\"string\", digit, \"prompt\") # var = open(\"string\") txt = open ( filename ) #reference to a file, not the file print \"Here's your file %r :\" % filename print txt . read () print \"Type the filename again:\" file_again = raw_input ( \"> \" ) text_again = open ( file_again ) print \"Here's your file %r again:\" % file_again print text_again . read () Now, use this alternative code instead. It does not require an external argument; the argument ( filename ) is in the script itself (it has become a variable). \u2018Internal\u2019 arguments are for functions ( def function(arg1, arg2): ); see Exercise 18. 1 2 3 4 5 6 7 8 9 10 11 filename = \"test.txt\" # however, the code is limited to this file only txt = open ( filename ) # reference to a file, not the file print \"Here's your file %r :\" % filename print txt . read () print \"Type the filename again:\" file_again = raw_input ( \"> \" ) text_again = open ( file_again ) print text_again . read ()","title":"Exercise 15, Reading Files"},{"location":"Learn Python the Hard Way/#exercise-16-reading-and-writing-files","text":"open, close, readlines, truncate 'w' , write, 'r' , read, 'a' , append. 'w+' , read-write, 'r+' , read-write, 'a+' , read-append. 'r' being the default argument, it is facultative when writing open('file', 'r') . The other arguments are mandatory; without them in open('file, 'w') , you cannot write, truncate, append or replace. First, load the script in IPython by typing %load ex16_1 . py ; it then turn to a comment # %load ex16_1.py . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # %load ex16.py from sys import argv script , filename = argv print \"We're going to erase %r .\" % filename print \"If you don't want that, hit CTRL-C (^C).\" print \"If you do want that, hit RETURN.\" raw_input ( \"?\" ) print \"Opening the file...\" target = open ( filename , 'w' ) print \"Truncating the file!\" target . truncate () print \"Now, I'm going to ask you for three lines.\" line1 = raw_input ( \"line 1: \" ) line2 = raw_input ( \"line 2: \" ) line3 = raw_input ( \"line 3: \" ) print \"I'm going to write these to the file.\" target . write ( line1 ) # 'write' variable line1 target . write ( \" \\n \" ) # add a new line target . write ( line2 ) target . write ( \" \\n \" ) target . write ( line3 ) target . write ( \" \\n \" ) print \"And finally, we close it.\" target . close () Now, run the external file in IPython (it imports the code behind the scene). Careful: the script requires a second argument ( filename ). 1 % run ex16 . py text . txt 1 2 3 4 5 6 7 8 9 10 11 12 We're going to erase 'text.txt'. If you don't want that, hit CTRL-C (^C). If you do want that, hit RETURN. ? Opening the file... Truncating the file! Now, I'm going to ask you for three lines. line 1: Good morning. line 2: How are you? line 3: I wish you a good day. I'm going to write these to the file. And finally, we close it. Read the file. 1 2 3 4 5 filename = 'text.txt' target = open ( filename , 'r' ) print target . read () target . close () 1 2 3 Good morning. How are you? I wish you a good day. Now, truncate (empty, delete, erase, clear) the file, reopen it, and to read it. 1 2 3 4 5 6 7 8 9 10 11 filename = 'text.txt' target = open ( filename , 'w' ) print \"Truncating the file!\" print \"-\" * 25 target . truncate () target . close () target = open ( filename , 'r' ) print target . read () target . close () 1 2 Truncating the file! ------------------------","title":"Exercise 16, Reading and Writing Files"},{"location":"Learn Python the Hard Way/#exercise-17-more-files","text":"length, len() target.read() ; read the whole file (EOF). target.read(10) ; read the amount of bytes between the parentheses (1 byte = 1 character). target.readline() ; read one line character at a time; the first line or the file until the first \\n . target.readline(10) ; read 10 bytes of the first line, but never more than the first line. readlines() ; read in the whole file at once and splits it by line (create a list). xreadlines() ; read big files. First, load script ex17_1.py in IPython. This script needs two additional arguments. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # %load ex17_1.py from sys import argv from os.path import exists # does the file exists, T or F? script , from_file , to_file = argv print \"Copying from %s to %s \" % ( from_file , to_file ) in_file = open ( from_file , 'r' ) # 'r' is facultative indata = in_file . read () # read the content, store in memory print \"The input file is %d bytes long\" % len ( indata ) # number of bytes in the file or length of 'indata' print \"Does the output file exist? %r \" % exists ( to_file ) # if the second file hasn't been created, this row will yield a 'False' # after you run this script, if you run it again, il will yield a 'True' print \"Ready, hit RETURN to continue, CTRL-C to abort.\" raw_input ( \"? \" ) out_file = open ( to_file , 'w' ) out_file . write ( indata ) print \"Alright, all done.\" out_file . close () in_file . close () 1 % run ex17_1 . py text2 . txt new . txt 1 2 3 4 5 6 Copying from text2.txt to new.txt The input file is 49 bytes long Does the output file exist? True Ready, hit RETURN to continue, CTRL-C to abort. ? Alright, all done. 1 2 3 target = open ( \"text2.txt\" ) print target . read () target . close () 1 2 3 Good morning. How are you? I wish you a good day. 1 2 3 target = open ( \"new.txt\" ) print target . read () target . close () 1 2 3 Good morning. How are you? I wish you a good day. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 # %load ex17_2.py from sys import argv from os.path import exists # does the file exists, T or F? script , from_file , to_file = argv # FIRST in_file = open ( from_file , 'r' ) indata = in_file . read () print \"The input file is %d bytes long\" % len ( indata ) in_file . close () print \"-\" * 25 # SECOND checkfile = open ( from_file , 'r' ) print checkfile . readline () # read line 1, show print checkfile . readline () # read line 2 print checkfile . readline () # read line 3 checkfile . close () print \"-\" * 25 # THIRD checkfile2 = open ( from_file , 'r' ) out_file = open ( to_file , 'w' ) indata = checkfile2 . read () out_file . write ( indata ) print \"Alright, all done.\" checkfile2 . close () out_file . close () print \"-\" * 25 # FOURTH checkfile3 = open ( to_file , 'r' ) print checkfile3 . read () checkfile3 . close () 1 % run ex17_2 . py text2 . txt new2 . txt 1 2 3 4 5 6 7 8 9 10 11 12 13 The input file is 49 bytes long ------------------------- Good morning. How are you? I wish you a good day. ------------------------- Alright, all done. ------------------------- Good morning. How are you? I wish you a good day.","title":"Exercise 17, More Files"},{"location":"Learn Python the Hard Way/#exercise-18-names-variables-code-functions","text":"argument, flexible, indefinite A function can have no, one or several arguments. def function(): . def function(one) . def function(one, two, three) . *args means indifinite number of arguments. All the arguments are is a list (\u2018args\u2019). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # indefinite def print_two ( * args ): arg1 , arg2 = args print \"arg1: %r , arg2: %r \" % ( arg1 , arg2 ) # two arguments def print_two_again ( arg1 , arg2 ): print \"arg1: %r , arg2: %r \" % ( arg1 , arg2 ) # one argument def print_one ( arg1 ): print \"arg1: %r \" % arg1 # no arguments def print_none (): print \"I got nothin'.\" # indefinite def print_two_2 ( * args ): print \"args: %r \" % ( args ,) # much more flexible # two arguments def print_two_again_2 ( arg1 , arg2 , arg3 ): print \"arg1: %r , arg2: %r , arg3: %r \" % ( arg1 , arg2 , arg3 ) # three arguments def print_two_again_3 ( arg1 , arg2 , arg3 ): print \"arg1: %r , arg2: %r , arg3: %r \" % ( arg1 , arg2 , arg3 ) print_two ( \"Joe\" , \"Frank\" ) # call a function inside a function Run the functions. 1 2 print_two ( \"Zed\" , \"Shaw\" ) print_two_again ( \"Zed\" , \"Shaw\" ) 1 2 arg1: 'Zed', arg2: 'Shaw' arg1: 'Zed', arg2: 'Shaw' 1 2 print_one ( \"First!\" ) print_none () 1 2 arg1: 'First!' I got nothin'. 1 print_two_2 ( \"Zed\" , \"Shaw\" , \"A\" , \"B\" ) 1 args: ('Zed', 'Shaw', 'A', 'B') 1 print_two_again_2 ( \"Zed\" , \"Shaw\" , \"C\" ) 1 arg1: 'Zed', arg2: 'Shaw', arg3: 'C' 1 print_two_again_3 ( \"Zed\" , \"Shaw\" , \"C\" ) 1 2 arg1: 'Zed', arg2: 'Shaw', arg3: 'C' arg1: 'Joe', arg2: 'Frank'","title":"Exercise 18, Names, Variables, Code, Functions"},{"location":"Learn Python the Hard Way/#exercise-19-functions-and-variables","text":"Give different names to functions and arguments not to get confuse. 1 2 3 4 5 6 def cheese_and_crackers ( cheese_count , boxes_of_crackers ): print \"You have %d cheeses!\" % cheese_count print \"You have %d boxes of crackers!\" % boxes_of_crackers print \"Man that's enough for a party!\" print \"Get a blanket. \\n \" 1 2 print \"1.We can just give the function numbers directly:\" cheese_and_crackers ( 20 , 30 ) 1 2 3 4 5 1.We can just give the function numbers directly: You have 20 cheeses! You have 30 boxes of crackers! Man that's enough for a party! Get a blanket. 1 2 3 4 print \"2.Or, we can use variables from our script:\" amount_of_cheese = 10 amount_of_crackers = 50 cheese_and_crackers ( amount_of_cheese , amount_of_crackers ) 1 2 3 4 5 2.Or, we can use variables from our script: You have 10 cheeses! You have 50 boxes of crackers! Man that's enough for a party! Get a blanket. 1 2 print \"3.We can even do math inside too:\" cheese_and_crackers ( 10 + 20 , 5 + 6 ) 1 2 3 4 5 3.We can even do math inside too: You have 30 cheeses! You have 11 boxes of crackers! Man that's enough for a party! Get a blanket. 1 2 print \"4.And we can combine the two, variables and math:\" cheese_and_crackers ( amount_of_cheese + 100 , amount_of_crackers + 1000 ) 1 2 3 4 5 4.And we can combine the two, variables and math: You have 110 cheeses! You have 1050 boxes of crackers! Man that's enough for a party! Get a blanket. 1 2 3 4 5 print \"5.Make a GUI.\" print \"Enter the amount of cheese:\" , amount_of_cheese = int ( raw_input ()) amount_of_crackers = int ( raw_input ( \"Enter the amount of crackers: \" )) cheese_and_crackers ( amount_of_cheese , amount_of_crackers ) 1 2 3 4 5 6 7 5.Make a GUI. Enter the amount of cheese:2 Enter the amount of crackers: 5 You have 2 cheeses! You have 5 boxes of crackers! Man that's enough for a party! Get a blanket.","title":"Exercise 19, Functions and Variables"},{"location":"Learn Python the Hard Way/#exercise-20-functions-and-files","text":"seek, move, file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # %load ex20.py from sys import argv script , input_file = argv # python ex20.py test.txt def print_all ( f ): # f is the file print f . read () # read the file, reach the end def rewind ( f ): f . seek ( 0 ) # move back to the initial position in the file # 'seek' actively move in the file def print_a_line ( line_count , f ): print line_count , f . readline () # print a line # and this line number in the file current_file = open ( input_file ) print \"First, let's print the whole file: \\n \" print_all ( current_file ) # launch function, f = current_file print \"-\" * 25 print \"Now let's rewind, kind of like a tape.\" rewind ( current_file ) # launch function, f = current_file print \"-\" * 25 print \"Let's print three lines:\" current_line = 1 # load variable print_a_line ( current_line , current_file ) # launch function # set 'current_line' to 1 current_line = current_line + 1 # current_line += 1 print_a_line ( current_line , current_file ) # 'current_line' grows to 2... # current_line = current_line + 1 current_line += 1 print_a_line ( current_line , current_file ) 1 % run ex20 . py new2 . txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 First, let's print the whole file: Good morning. How are you? I wish you a good day. ------------------------- Now let's rewind, kind of like a tape. ------------------------- Let's print three lines: 1 Good morning. 2 How are you? 3 I wish you a good day.","title":"Exercise 20, Functions and Files"},{"location":"Learn Python the Hard Way/#exercise-21-functions-can-return-something-or-not","text":"integer, float, int, coerce, digit, string, raw %r for raw. %d for digit. %s for string. int() with %d = integer. int() with %r or %s = integer. float() with %d = integer. float() with %r or %s = float. %r is a safer choice; see below. 1 2 3 4 5 6 7 8 9 a = 10 # a digit b = 10.1 print \" %r \" % a print \" %s \" % a print \" %d \" % a print \" %r \" % b print \" %s \" % b print \" %d \" % b 1 2 3 4 5 6 10 10 10 10.1 10.1 10 1 2 3 4 5 a = \"10\" # a string or str(10) print \" %r \" % a print \" %s \" % a print \" %d \" % a 1 2 3 4 5 6 7 8 9 10 11 12 13 '10' 10 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-34-71a6226dbd27&gt; in &lt;module&gt;() 2 print \"%r\" % a 3 print \"%s\" % a ----&gt; 4 print \"%d\" % a TypeError: %d format: a number is required, not str 1 2 3 4 5 b = \"10.1\" # a string or str(10) print \" %r \" % b print \" %s \" % b print \" %d \" % b 1 2 3 4 5 6 7 8 9 10 11 12 '10.1' 10.1 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-33-18d4f3068fee&gt; in &lt;module&gt;() 2 print \"%r\" % b 3 print \"%s\" % b ----&gt; 4 print \"%d\" % b TypeError: %d format: a number is required, not str 1 2 3 4 5 6 7 a = \"10\" # a string or str(10) b = \"10.1\" # a string or str(10) print \" %r \" * 1 % a print \" %s \" * 1 % a print \" %r \" * 1 % b print \" %s \" * 1 % b 1 2 3 4 '10' 10 '10.1' 10.1 1 2 3 4 5 6 7 a = \"10\" # a string or str(10) b = \"10.1\" # a string or str(10) print \" %r \" * 2 % a print \" %s \" * 2 % a print \" %r \" * 2 % b print \" %s \" * 2 % b 1 2 3 4 5 6 7 8 9 10 11 12 13 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-34-18d4f3068fee&gt; in &lt;module&gt;() 1 a = \"10\" 2 b = \"10.1\" ----&gt; 3 print \"%r\" * 2 % a 4 print \"%s\" * 2 % a 5 print \"%r\" * 2 % b TypeError: not enough arguments for format string 1 2 3 4 5 6 7 8 9 10 a = 10 b = 10.1 a = int ( a ) b = int ( b ) print \" %r \" % a print \" %s \" % a print \" %d \" % a print \" %r \" % b print \" %s \" % b print \" %d \" % b 1 2 3 4 5 6 10 10 10 10 10 10 1 2 3 4 5 6 7 8 9 10 11 a = 10 b = 10.1 a = float ( a ) b = float ( b ) print \" %r \" % a print \" %s \" % a print \" %d \" % a print \" %r \" % b print \" %s \" % b print \" %d \" % b 1 2 3 4 5 6 10.0 10.0 10 10.1 10.1 10 1 2 3 4 5 6 7 8 9 a = 1 b = 2.1 print a * b print int ( a ) * int ( b ) print float ( a ) * float ( b ) print str ( a ) * 10 print str ( b ) * 10 print str ( a ) * str ( b ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 2.1 2 2.1 1111111111 2.12.12.12.12.12.12.12.12.12.1 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-52-57a5dd7c13d0&gt; in &lt;module&gt;() 7 print str(a) * 10 8 print str(b) * 10 ----&gt; 9 print str(a) * str(b) TypeError: can't multiply sequence by non-int of type 'str' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def add ( a , b ): print \"ADDING %s + %s \" % ( a , b ) return a + b def substract ( a , b ): print \"SUBTRACTING %d - %d \" % ( a , b ) # show the arguments return a - b # compute the arguments def multiply ( a , b ): print \"MULTIPLYING %d * %d \" % ( a , b ) return a * b def divide ( a , b ): print \"DIVIDING %d / %d \" % ( a , b ) return a / b 1 2 3 4 5 print \"Let's do some math with just functions!\" aa = int ( raw_input ( \"Enter a (integer): \" )) # to enter an integer bb = float ( raw_input ( \"Enter b (float): \" )) # to enter a float age = add ( aa , bb ) # launch function add() 1 2 3 4 Let's do some math with just functions! Enter a (integer): 1 Enter b (float): 2.2 ADDING 1 + 2.2 1 print add ( aa , bb ) 1 2 ADDING 1 + 2.2 3.2 1 2 3 4 5 6 7 height = substract ( 78 , 4 ) # launch function substract() weight = multiply ( 90 , 2 ) # launch function multiply() iq = divide ( 100 , 2 ) # launch function divide() print height print weight print iq 1 2 3 4 5 6 SUBTRACTING 78 - 4 MULTIPLYING 90 * 2 DIVIDING 100 / 2 74 180 50 1 2 # Use the variable, previously loaded print \"Age: %d , Height: %d , Weight: %d , IQ: %d \" % ( age , height , weight , iq ) 1 Age : 3 , Height : 74 , Weight : 180 , IQ : 50 1 2 3 4 5 6 7 # A puzzle for the extra credit, type it in anyway. print \"Here is a puzzle.\" what = add ( age , substract ( height , multiply ( weight , divide ( iq , 2 )))) # launch functions one by one!!! # Insert variable 'what' in the text print \"That becomes: \" , what , \"Can you do it by hand?\" 1 2 3 4 5 6 Here is a puzzle. DIVIDING 50 / 2 MULTIPLYING 180 * 25 SUBTRACTING 74 - 4500 ADDING 3.2 + -4426 That becomes: -4422.8 Can you do it by hand?","title":"Exercise 21, Functions Can Return Something or not..."},{"location":"Learn Python the Hard Way/#exercise-23-read-some-code","text":"Go to GitHub : In the \u2018lamson\u2019 directory, take a script. Go through the script. Find projects on collaborative sites or depositories: bitbucket.org . github.com . launchpad.net . sourceforge.net .","title":"Exercise 23, Read Some Code"},{"location":"Learn Python the Hard Way/#exercise-24-more-practice","text":"\\' for an aposthrophy. \\t for a tab. \\\\ for a backslash. \\n for a new line. 1 2 3 print \"Let's practice everything.\" print 'You \\' d need to know \\' bout escapes with \\\\ that do \\n newlines and \\t tabs.' 1 2 3 Let's practice everything. You'd need to know 'bout escapes with \\ that do newlines and tabs. 1 2 3 4 5 6 7 8 9 10 11 12 poem = \"\"\" \\t The lovely world with logic so firmly planted connot discern \\n the needs of love nor comprehend passion from intuition and requires an explanation \\n\\t\\t where there is none. \"\"\" print \"----------------\" print poem print \"----------------\" 1 2 3 4 5 6 7 8 9 10 11 12 ---------------- The lovely world with logic so firmly planted connot discern the needs of love nor comprehend passion from intuition and requires an explanation where there is none. ---------------- 1 2 3 4 5 # variable 'five' five = 10 - 2 + 3 - 6 # use of variable 'five' print \"This should be five: %s \" % five 1 This should be five: 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # function with one argument def secret_formula ( started ): jelly_beans = started * 500 # load variable with another jars = jelly_beans / 1000 crates = jars / 100 return jelly_beans , jars , crates # variable; warning, this variable is modified further down start_point = 10000 # redefine the results of a function (rename a variable) # from this point, 'jelly_beans' becomes 'beans' # and must be called so in any line of code beans , jars , crates = secret_formula ( start_point ) print \"With a starting point of: %d \" % start_point # we apply 'bean' print \"We's have %d beans, %d jars, and %d crates.\" % ( beans , jars , crates ) # modified variable is loaded into the code from this point start_point = start_point / 10 print \"We can also do that this way:\" # we apply the modified variable 'start_point' print \"We's have %d beans, %d jars, and %d crates.\" % secret_formula ( start_point ) 1 2 3 4 With a starting point of: 10000 We's have 5000000 beans, 5000 jars, and 50 crates. We can also do that this way: We's have 500000 beans, 500 jars, and 5 crates.","title":"Exercise 24, More Practice"},{"location":"Learn Python the Hard Way/#exercise-25-even-more-practice","text":"import, module, package, script, library For this exercice, consult the manual. First, run python ex25.py to find out any errors. Second, use the python engine to run pieces of codes from this file and not just trigger the whole code from this file Check out file 25_1.txt . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 # %load ex25.py def break_words ( stuff ): \"\"\"This function will break up words for us.\"\"\" words = stuff . split ( ' ' ) # the method splits the characters each time it finds a 'space' return words # you must specify in python where to load the result (into 'words') def sort_words ( words ): \"\"\"Sorts the words.\"\"\" return sorted ( words ) # the python function sorts the separated words def print_first_word ( words ): \"\"\"Prints the first word after popping in off.\"\"\" word = words . pop ( 0 ) # the method returns the first word in the index (position 0) print word def print_last_word ( words ): \"\"\"Prints the last word after popping it off.\"\"\" word = words . pop ( - 1 ) # the method returns the last word in the index (position -1) print word def sort_sentence ( sentence ): \"\"\"Takes in a full sentence and returns the sorted words.\"\"\" words = break_words ( sentence ) # launch a function return sort_words ( words ) # launch another function with the result of the first function def print_first_and_last ( sentence ): \"\"\"Prints the first and last words of the sentence.\"\"\" words = break_words ( sentence ) print_first_word ( words ) print_last_word ( words ) def print_first_and_last_sorted ( sentence ): \"\"\"Sorts the words then prints the first and last one.\"\"\" words = sort_sentence ( sentence ) print_first_word ( words ) print_last_word ( words ) 1 % run ex25 . py In the next script, you import the above script (ex25.py) as an external module (even though the script was previously run in IPython, and we want to simulate a script importing another script) and use its function as methods. 1 2 3 4 5 6 import ex25 sentence = \"All good things come to those who wait.\" words = ex25 . break_words ( sentence ) words 1 ['All', 'good', 'things', 'come', 'to', 'those', 'who', 'wait.'] 1 2 sorted_words = ex25 . sort_words ( words ) sorted_words 1 ['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who'] 1 2 3 ex25 . print_first_word ( words ) ex25 . print_last_word ( words ) words 1 2 3 All wait. ['good', 'things', 'come', 'to', 'those', 'who'] 1 2 3 ex25 . print_first_word ( sorted_words ) ex25 . print_last_word ( sorted_words ) sorted_words 1 2 3 All who ['come', 'good', 'things', 'those', 'to', 'wait.'] 1 2 sorted_words = ex25 . sort_sentence ( sentence ) sorted_words 1 ['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who'] 1 2 ex25 . print_first_and_last ( sentence ) ex25 . print_first_and_last_sorted ( sentence ) 1 2 3 4 All wait. All who","title":"Exercise 25, Even More Practice"},{"location":"Learn Python the Hard Way/#exercise-32-loops-and-lists","text":"for, loop, list 1 2 3 4 5 6 7 the_count = [ 1 , 2 , 3 , 4 , 5 ] fruits = [ 'apples' , 'oranges' , 'pears' , 'apricots' ] change = [ 1 , 'pennies' , 2 , 'dimes' , 3 , 'quarters' ] # this first kind of for-loop goes through a list for number in the_count : print \" \\t This is count %d \" % number 1 2 3 4 5 This is count 1 This is count 2 This is count 3 This is count 4 This is count 5 1 2 3 # same as above for fruit in fruits : print \"A fruit of type: %s \" % fruit 1 2 3 4 A fruit of type: apples A fruit of type: oranges A fruit of type: pears A fruit of type: apricots We can go though mixed lists too. Notice we have to use %r since we don\u2019t know what\u2019s in it. 1 2 for i in change : print \" \\t I got %r \" % i 1 2 3 4 5 6 I got 1 I got 'pennies' I got 2 I got 'dimes' I got 3 I got 'quarters' We can also build lists. First, start with an empty one. 1 2 3 4 5 6 7 8 elements = [] # then use the range function to do 0 to 5 counts # 0 means 1st, the 6th is excluded; 0,1,2,3,4,5 for i in range ( 0 , 6 ): print \"Adding %d to the list.\" % i # append is a function that lists understand elements . append ( i ) # elements is a variable to which we add numbers 1 2 3 4 5 6 Adding 0 to the list. Adding 1 to the list. Adding 2 to the list. Adding 3 to the list. Adding 4 to the list. Adding 5 to the list. We can print them out. 1 2 for i in elements : print \" \\t Element was: %d \" % i 1 2 3 4 5 6 Element was: 0 Element was: 1 Element was: 2 Element was: 3 Element was: 4 Element was: 5 1 2 3 4 5 6 print \"Test the range function...\" print \"range(5):\" , range ( 5 ) print \"range(6):\" , range ( 6 ) print \"range(1, 5):\" , range ( 1 , 5 ) print \"range(2, 5):\" , range ( 2 , 5 ) print \"range(0, 10, 2):\" , range ( 0 , 10 , 2 ) 1 2 3 4 5 6 Test the range function... range(5): [0, 1, 2, 3, 4] range(6): [0, 1, 2, 3, 4, 5] range(1, 5): [1, 2, 3, 4] range(2, 5): [2, 3, 4] range(0, 10, 2): [0, 2, 4, 6, 8] Two-dimentional lists (above 2 dimension, it can become memory-intensive to compute!). 2d, tabular, lists in list, list of lists 1 2 3 4 5 6 the_count_two = [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]] # this first kind of for-loop goes through a list # this list is not numerical, use %r or %s for number in the_count_two : print \" \\t This is count %r \" % number 1 2 This is count [1, 2, 3] This is count [4, 5, 6]","title":"Exercise 32, Loops and Lists"},{"location":"Learn Python the Hard Way/#exercise-33-while-loops","text":"while, loop 1 2 3 4 5 6 7 8 9 10 11 12 13 i = 0 numbers = [] while i < 6 : print \"At the top i is %d \" % i numbers . append ( i ) i += 1 print \"Number now: \" , numbers print \"At the botton i is %d \" % i print \"The numbers: \" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 At the top i is 0 Number now: [0] At the botton i is 1 At the top i is 1 Number now: [0, 1] At the botton i is 2 At the top i is 2 Number now: [0, 1, 2] At the botton i is 3 At the top i is 3 Number now: [0, 1, 2, 3] At the botton i is 4 At the top i is 4 Number now: [0, 1, 2, 3, 4] At the botton i is 5 At the top i is 5 Number now: [0, 1, 2, 3, 4, 5] At the botton i is 6 The numbers: 1 2 for num in numbers : print num 1 2 3 4 5 6 0 1 2 3 4 5 Make it a function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def breaking_list ( max_of , increm ): i = 0 numbers = [] while i < max_of : print \"At the top i is %d \" % i numbers . append ( i ) i += increm print \"Number now: \" , numbers print \"At the botton i is %d \" % i print \"The numbers: \" for num in numbers : print num print \"Enter an integer, a maximum, higher than 1.\" max_integer = int ( raw_input ( \"> \" )) print \"Enter an integer, an increment, equal or more than 1\" increment = int ( raw_input ( \"> \" )) print \"The maximum is %d and the increment is %d \" % ( max_integer , increment ) breaking_list ( max_integer , increment ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Enter an integer, a maximum, higher than 1. &gt; 5 Enter an integer, an increment, equal or more than 1 &gt; 2 The maximum is 5 and the increment is 2 At the top i is 0 Number now: [0] At the botton i is 2 At the top i is 2 Number now: [0, 2] At the botton i is 4 At the top i is 4 Number now: [0, 2, 4] At the botton i is 6 The numbers: 0 2 4 Change the function, replace with a for-loops. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def breaking_list2 ( max_of , increm ): i = 0 numbers = [] for i in range ( 0 , max_of , increm ): print \"At the top i is %d \" % i numbers . append ( i ) i += increm print \"Number now: \" , numbers print \"At the botton i is %d \" % i print \"The numbers: \" for num in numbers : print num max_integer2 = max_integer + 2 increment2 = increment + 1 breaking_list2 ( max_integer2 , increment2 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 At the top i is 0 Number now: [0] At the botton i is 3 At the top i is 3 Number now: [0, 3] At the botton i is 6 At the top i is 6 Number now: [0, 3, 6] At the botton i is 9 The numbers: 0 3 6","title":"Exercise 33, While Loops"},{"location":"Learn Python the Hard Way/#exercise-34-accessing-elements-of-lists","text":"list, list of lists, lists in list, exit, program Let\u2019s build a scenario; functions leading to other functions. def gold_room(): def bear_room(): def cthulhu_room(): def dead(why): def start(): start() to launch the chain reaction. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 from sys import exit def gold_room (): print \"This room is full of gold. How much do you take?\" choice = raw_input ( \"Write any number from 0 to 100> \" ) # variable if \"0\" in choice or \"1\" in choice : # could be 0, 1, 10, 11:19, 20, 21, 30, 31, 40, 41, 50, 51, etc. how_much = int ( choice ) # variable else : dead ( \"Man, learn to type a number.\" ) # launch function dead if how_much < 50 : print \"Nice, you're not greedy, you win!\" exit ( 0 ) # launch system function exit else : dead ( \"You greedy bastard!\" ) # launch function dead def bear_room (): print \"There is bear here.\" print \"The bear has a bunch of honey.\" print \"The fat bear is in front of another door.\" print \"How are you going to move the bear?\" bear_moved = False # variable while True : # infinite loop, run until it finds a right answer choice = raw_input ( \"Write 'take honey', 'taunt bear' or 'open door'> \" ) # variable if choice == \"take honey\" : # variable check dead ( \"The bear looks at you then slaps your face off.\" ) # launch function dead elif choice == \"taunt bear\" and not bear_moved : # double variables check print \"The bear has moved from the door. You can go thought it now.\" bear_moved = True # change the variable elif choice == \"taunt bear\" and bear_moved : dead ( \"The bear gets pissed off and chews your leg off.\" ) elif choice == \"open door\" and bear_moved : # variable check gold_room () # launch function gold_room else : print \"I got no idea what that means.\" def cthulhu_room (): print \"Here you see the great evil Cthulhu.\" print \"He, it, whatever stares at you and you go insane.\" print \"Do you flee your life or eat your head?\" choice = raw_input ( \"Write 'flee' or 'head'> \" ) # variable if \"flee\" in choice : # variable check start () # launch function start elif \"head\" in choice : dead ( \"Well that was tasty!\" ) else : cthulhu_room () # launch function def dead ( why ): print why , \"Good job!\" exit ( 0 ) # launch system function exit # exit(0) is neutral # exit(1) is an error, could be a useful warning # exit(2) or others like exit(100) are other warnings, or different messages def start (): print \"You are in a dark room.\" print \"There is a door to your right and left.\" print \"Which one do you take: left or right?\" choice = raw_input ( \"Write 'left' or 'right'> \" ) # variable if choice == \"left\" : # variable check, exact bear_room () # launch function bear_room elif choice == \"right\" : # variable check, exact cthulhu_room () else : dead ( \"You stumble around the room until you starve.\" ) start () # launch the chain reaction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 You are in a dark room. There is a door to your right and left. Which one do you take: left or right? Write 'left' or 'right'&gt; left There is bear here. The bear has a bunch of honey. The fat bear is in front of another door. How are you going to move the bear? Write 'take honey', 'taunt bear' or 'open door'&gt; taunt bear The bear has moved from the door. You can go thought it now. Write 'take honey', 'taunt bear' or 'open door'&gt; open door This room is full of gold. How much do you take? Write any number from 0 to 100&gt; 63 Man, learn to type a number. Good job! An exception has occurred, use %tb to see the full traceback. SystemExit: 0 There are multiple scenarios to try\u2026","title":"Exercise 34, Accessing Elements of Lists"},{"location":"Learn Python the Hard Way/#exercise-38-doing-things-to-lists","text":"list, index, add, remove, delete, extract 1 2 3 4 5 ten_things = \"Apples Oranges Crows Telephones Light Sugar\" print \"ten_things:\" , ten_things , \", not a list\" print \"Wait there are not 10 things is that list. Let's fix that.\" 1 2 ten_things : Apples Oranges Crows Telephones Light Sugar , not a list Wait there are not 10 things is that list . Let ' s fix that . 1 2 3 stuff = ten_things . split ( ' ' ) # variable ten_things, method split print \"stuff:\" , stuff , \", a list\" 1 stuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar'] , a list 1 2 3 more_stuff = [ \"Day\" , \"Night\" , \"Song\" , \"Frisbee\" , \"Corn\" , \"Banana\" , \"Girl\" , \"Boy\" ] # list variable print \"more_stuff:\" , more_stuff , \", a list\" 1 more_stuff: ['Day', 'Night', 'Song', 'Frisbee', 'Corn', 'Banana', 'Girl', 'Boy'] , a list Most of the time, a for-loop is better than a while-loop. A while-loop is better when there is a test, a condition. 1 2 3 4 5 6 7 8 while len ( stuff ) != 10 : next_one = more_stuff . pop () # load a variable with another variable, method pop, pop means extracting 1 item from a list variable, the last item in the list print \"Adding: \" , next_one # show the content stuff . append ( next_one ) # variable stuff add 1-item list variable; the loop will go as long as stuff has less than 10 items print \"stuff:\" , stuff print \"There are %d items now.\" % len ( stuff ) # length of stuff or the number of items in it print \"There we go: \" , stuff 1 2 3 4 5 6 7 8 9 10 11 12 13 Adding : Boy stuff : [ 'Apples' , 'Oranges' , 'Crows' , 'Telephones' , 'Light' , 'Sugar' , 'Boy' ] There are 7 items now . Adding : Girl stuff : [ 'Apples' , 'Oranges' , 'Crows' , 'Telephones' , 'Light' , 'Sugar' , 'Boy' , 'Girl' ] There are 8 items now . Adding : Banana stuff : [ 'Apples' , 'Oranges' , 'Crows' , 'Telephones' , 'Light' , 'Sugar' , 'Boy' , 'Girl' , 'Banana' ] There are 9 items now . Adding : Corn stuff : [ 'Apples' , 'Oranges' , 'Crows' , 'Telephones' , 'Light' , 'Sugar' , 'Boy' , 'Girl' , 'Banana' , 'Corn' ] There are 10 items now . There we go : [ 'Apples' , 'Oranges' , 'Crows' , 'Telephones' , 'Light' , 'Sugar' , 'Boy' , 'Girl' , 'Banana' , 'Corn' ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 print \"Let's do some things with stuff.\" # print and pop choosen items according to the index # could also be random index values!!! # could reorder the list before (ascending, descending) print stuff [ 1 ] # the 2nd item print stuff [ 2 ] # the 3rd item print stuff [ - 1 ] # the last item print stuff [ - 2 ] print stuff . pop () # pop the last item print stuff . pop ( 0 ) # pop the first item print stuff . pop ( 1 ) # pop the 2nd item print stuff . pop ( - 1 ) # pop the last item print ' ' . join ( stuff ) # var.split(' ') vs ' '.join(var), concatenate the list print '#' . join ( stuff [ 3 : 5 ]) # add a character at position 3 and 4 (4th, 5th, excluding the last) 1 2 3 4 5 6 7 8 9 10 11 Let's do some things with stuff. Oranges Crows Corn Banana Corn Apples Crows Banana Oranges Telephones Light Sugar Boy Girl Sugar#Boy","title":"Exercise 38, Doing Things to Lists"},{"location":"Learn Python the Hard Way/#exercise-39-dictionaries-oh-lovely-dictionaries","text":"dictionary 1 2 3 4 things = [ 'a' , 'b' , 'c' , 'd' ] # list print things print things [ 1 ] 1 2 ['a', 'b', 'c', 'd'] b Change an element. 1 2 things [ 1 ] = 'z' print things 1 ['a', 'z', 'c', 'd'] A dictionary has keys associated with values. Order does not matter. If you supply the key, you will get the value. 1 2 3 4 5 6 stuff = { 'name' : 'Zed' , 'age' : '39' , 'height' : 8 * 12 + 2 } # a dictionary print stuff print stuff [ 'name' ] print stuff [ 'age' ] print stuff [ 'height' ] 1 2 3 4 {'age': '39', 'name': 'Zed', 'height': 98} Zed 39 98 Add an element. 1 2 3 stuff [ 'city' ] = \"San Francisco\" print stuff [ 'city' ] print stuff 1 2 San Francisco {'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98} Add and remove an element. 1 2 3 4 5 stuff [ 'color' ] = \"blue\" print stuff del stuff [ 'color' ] print stuff 1 2 {'color': 'blue', 'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98} {'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98} If the value does not exist when you call it, it will turn out an error. Instead, write it this way: print \"%r\" % stuff.get('color',None) . If it\u2019s not existant, it will return \u2018None\u2019 or a value by default 1 print stuff [ 'state' ] --------------------------------------------------------------------------- 1 2 3 4 5 6 7 KeyError Traceback (most recent call last) &lt;ipython-input-69-f211ffe8fe02&gt; in &lt;module&gt;() ----&gt; 1 print stuff['state'] KeyError: 'state' 1 print \" %r \" % stuff . get ( 'color' , None ) 1 None Change an element. 1 2 3 4 print stuff [ 'age' ] stuff [ 'age' ] = 400 print stuff [ 'age' ] 1 2 39 400 Extract with the index. 1 2 3 4 5 6 stuff [ 1 ] = \"Wow\" stuff [ 2 ] = \"Neato\" print stuff [ 1 ] print stuff [ 2 ] print stuff # new items won't be in order 1 2 3 Wow Neato {'city': 'San Francisco', 2: 'Neato', 'name': 'Zed', 1: 'Wow', 'age': 400, 'height': 98} Delete an element (according to the index). 1 2 3 4 del stuff [ 1 ] del stuff [ 2 ] print stuff 1 {'city': 'San Francisco', 'name': 'Zed', 'age': 400, 'height': 98} Create a mapping of state to abbreviation. 1 2 3 4 5 6 7 states = { 'Oregon' : 'OR' , 'Florida' : 'FL' , 'California' : 'CA' , 'New York' : 'NY' , 'Michigan' : 'MI' } Create a basic set of states and some cities in them. 1 2 3 4 5 cities = { 'CA' : 'San Francisco' , 'MI' : 'Detroit' , 'FL' : 'Jacksonville' } Add some key:value to dictionary cities. 1 2 cities [ 'NY' ] = 'New York' cities [ 'OR' ] = 'Portland' Print out some cities. 1 2 3 4 print \"Dictionary 'cities': \" , cities print '-' * 10 print \"NY State has: \" , cities [ 'NY' ] # call the key print \"OR State has: \" , cities [ 'OR' ] # get the value 1 2 3 4 Dictionary 'cities': {'FL': 'Jacksonville', 'CA': 'San Francisco', 'MI': 'Detroit', 'OR': 'Portland', 'NY': 'New York'} ---------- NY State has: New York OR State has: Portland Print some states. 1 2 3 4 print \"Dictionary 'states': \" , states print '-' * 10 print \"Michigan's abbreviation is: \" , states [ 'Michigan' ] print \"Florida's abbrebiation is: \" , states [ 'Florida' ] 1 2 3 4 Dictionary 'states': {'California': 'CA', 'Michigan': 'MI', 'New York': 'NY', 'Florida': 'FL', 'Oregon': 'OR'} ---------- Michigan's abbreviation is: MI Florida's abbrebiation is: FL Print a dictionary in dictionary. 1 2 3 print \"Michigan has: \" , cities [ states [ 'Michigan' ]] # is like states['Michigan'], then cities['MI'] print \"florida has: \" , cities [ states [ 'Florida' ]] 1 2 Michigan has: Detroit florida has: Jacksonville Print every state abbreviation. 1 2 3 4 print \"Enumerate Dictionary 'states', key:value...\" for state , abbrev in states . items (): print \" %s is abbreviated %s \" % ( state , abbrev ) # state = 1st item = key, abbrev = 2nd item = value 1 2 3 4 5 6 Enumerate Dictionary 'states', key:value... California is abbreviated CA Michigan is abbreviated MI New York is abbreviated NY Florida is abbreviated FL Oregon is abbreviated OR Print every city in state. 1 2 3 print \"Enumerate Dictionary 'cities', key:value...\" for abbrev , city in cities . items (): print \" %s has the city %s \" % ( abbrev , city ) 1 2 3 4 5 6 Enumerate Dictionary 'cities', key:value... FL has the city Jacksonville CA has the city San Francisco MI has the city Detroit OR has the city Portland NY has the city New York Now do both at the same time. 1 2 3 4 print \"Enumerate both dictionaries...\" for state , abbrev in states . items (): print \" %s state is abbreviated %s and has city %s \" % ( state , abbrev , cities [ abbrev ]) # state California gives abbrev CA, inside cities gives San Francisco 1 2 3 4 5 6 Enumerate both dictionaries... California state is abbreviated CA and has city San Francisco Michigan state is abbreviated MI and has city Detroit New York state is abbreviated NY and has city New York Florida state is abbreviated FL and has city Jacksonville Oregon state is abbreviated OR and has city Portland get() seek a key, whether it exists or not. 1 2 3 4 state = states . get ( 'Texas' ) # extract if not state : print \"Sorry, no Texas.\" 1 Sorry, no Texas. Get a city with a default value. 1 2 city = cities . get ( 'TX' , 'Does Not Exist' ) print \"The city for the state 'TX' is: %s \" % city 1 The city for the state 'TX' is: Does Not Exist Let\u2019s step up the above operations. Module hashmap.py works through a dictionary. Module ex39_test.py contains dictionaries (just like the above). In Python, we would run module ex39_test.py . The module would begin by importing module hashmap.py to use its methods and perform operations. Consult the manual.","title":"Exercise 39, Dictionaries, Oh Lovely Dictionaries"},{"location":"Learn Python the Hard Way/#exercise-40-modules-classes-and-objects","text":"1 2 3 mystuff = { 'apple' : 'I AM APPLES' } print mystuff [ 'apple' ] # get X from Y 1 I AM APPLES You can import a file with functions and variables from a another module. You can access the functions (methods) and variables from this other module. Both files must be in the same directory, otherwise, specify the path as well. 1 2 3 4 5 6 7 8 9 # %load ex40.py def apple (): print \"I AM APPLES!\" # this is just a variable tangerine = \"Living reflection of a dream\" apple () 1 % run ex40 . py 1 I AM APPLES! 1 2 3 4 5 import ex40 ex40 . apple () print ex40 . tangerine 1 2 I AM APPLES! Living reflection of a dream 1 2 3 mystuff [ 'new' ] = ex40 . tangerine print mystuff [ 'new' ] 1 Living reflection of a dream 1 2 3 4 5 6 import ex40 thing = ex40 thing . apple () print thing . tangerine 1 2 3 I AM APPLES! I AM APPLES! Living reflection of a dream Use a class instead of an imported module. Remember: class method = class function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Song ( object ): def __init__ ( self , lyrics ): # instantiation and shortcut for a creating a variable self . lyrics = lyrics # the variable could be equal to a text, a number or a variable def sing_me_a_song ( self ): # create a class function for line in self . lyrics : print line # instance happy_bday = Song ([ \"Happy birthday to you\" , \"I don't want to get sued\" , \"So I'll stop right there\" ]) # instance bulls_on_parade = Song ([ \"They rally around tha family\" , \"With pockets full of shells\" ]) # instance au_clair = Song ([ \"Au clair de la lune\" , \"Mon ami Pierrot\" , \"Prete-moi ta plume\" , \"Pour ecrire un mot\" ]) # not an instance!!! frere_jacques = [ \"Frere Jacques (bis)\" , \"Dormez-vous (bis)\" , \"Sonnez les matines (bis)\" , \"Ding-din-don (bis)\" ] # instance frere = Song ([ \"Frere Jacques (bis)\" , \"Dormez-vous (bis)\" , \"Sonnez les matines (bis)\" , \"Ding-din-don (bis)\" ]) # not a class function def chante_moi ( paroles ): # create a function for ligne in paroles : print ligne Invoke an instance. 1 happy_bday . sing_me_a_song () 1 2 3 Happy birthday to you I don't want to get sued So I'll stop right there Again. 1 bulls_on_parade . sing_me_a_song () 1 2 They rally around tha family With pockets full of shells Write instance.class function / instance.class method 1 au_clair . sing_me_a_song () 1 2 3 4 Au clair de la lune Mon ami Pierrot Prete-moi ta plume Pour ecrire un mot Write the method the other around: Class.class_function() / Class.class_method() . 1 2 #au_clair.sing_me_a_song() Song . sing_me_a_song ( au_clair ) 1 2 3 4 Au clair de la lune Mon ami Pierrot Prete-moi ta plume Pour ecrire un mot This function is independent. frere_jacques.chante_moi() can\u2019t be!!! 1 chante_moi ( frere_jacques ) 1 2 3 4 Frere Jacques (bis) Dormez-vous (bis) Sonnez les matines (bis) Ding-din-don (bis) It looks like Class.class_function() / Class.class_method() 1 Song . sing_me_a_song ( frere ) 1 2 3 4 Frere Jacques (bis) Dormez-vous (bis) Sonnez les matines (bis) Ding-din-don (bis)","title":"Exercise 40, Modules, Classes, and Objects"},{"location":"Learn Python the Hard Way/#exercise-41-learning-to-speak-object-oriented","text":"Object-oriented programming (oop). The script below ( ex41.py ) imports a word list from a text file ( ex41_words.txt ). The script is a drill for learning oop. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 import random import sys ## WORD_URL = \"http://learncodethehardway.org/words.txt\" # read a file http://learncodethehardway.org/words.txt WORD_TXT = \"ex41_words.txt\" WORDS = [] # dictionary {\"Python\": \"English\"} PHRASES = { \"class %% %( %% %):\" : \"Make a class named %% % that is-a %% %.\" , \"class %% %(object): \\n\\t def __init__(self, ***):\" : \"class %% % has-a __init__ that takes self and *** parameters.\" , \"class %% %(object): \\n\\t def ***(self, @@@):\" : \"class %% % has-a function named *** that takes self and @@@ parameters.\" , \"*** = %% %()\" : \"Set *** to an instance of class %% %.\" , \"***.***(@@@)\" : \"From *** get the *** function, and call it with parameters self, @@@.\" , \"***.*** = '***'\" : \"From *** get the *** attribute and set it to '***'.\" } # do they want to drill phrases first if len ( sys . argv ) == 2 and sys . argv [ 1 ] == \"English\" : PHRASE_FIRST = True else : PHRASE_FIRST = False # load up the words from the website ## for word in urlopen(WORD_URL).readlines(): for word in open ( WORD_TXT , \"r\" ) . readlines (): WORDS . append ( word . strip ()) def convert ( snippet , phrase ): # 'list comprehension', reseach on the Internet class_names = [ w . capitalize () for w in random . sample ( WORDS , snippet . count ( \" %% %\" ))] other_names = random . sample ( WORDS , snippet . count ( \"***\" )) results = [] param_names = [] for i in range ( 0 , snippet . count ( \"@@@\" )): param_count = random . randint ( 1 , 3 ) param_names . append ( ', ' . join ( random . sample ( WORDS , param_count ))) for sentence in snippet , phrase : result = sentence [:] # fake class names for word in class_names : result = result . replace ( \" %% %\" , word , 1 ) # fake other names for word in other_names : result = result . replace ( \"***\" , word , 1 ) # fake parameter lists for word in param_names : result = result . replace ( \"@@@\" , word , 1 ) results . append ( result ) return results # keep going until until they hit CTRL-D try : while True : snippets = PHRASES . keys () random . shuffle ( snippets ) for snippet in snippets : phrase = PHRASES [ snippet ] question , answer = convert ( snippet , phrase ) if PHRASE_FIRST : question , answer = answer , question print question raw_input ( \"> \" ) print \"ANSWER: %s \\n\\n \" % answer except EOFError : print \" \\n Bye\" 1 2 3 4 5 6 7 8 9 alarm . deer ( disgust , brass ) & gt ; deer is a Class alarm function that takes arguments digust and brass ANSWER : From alarm get the deer function , and call it with parameters self , disgust , brass . class Building ( Blood ) : & gt ; etc ANSWER : Make a class named Building that is - a Blood . bucket = Berry () Sample of the original word list, 10 out of 503: 1 2 3 4 5 6 7 8 9 10 11 text account achiever actor addition adjustment advertisement advice aftermath agreement airplane Same script, but the list of word comes from the Internet. A note on the script: The use of constant variable such as WORD_URL (such variable should not be modified). A constant variable can be anything from a number, a string to a dictionary. The use of try/except pair to check for errors. It is similar to the pair if/else . Therea are several types of errors. EOFError is just one type. Consult other (or online) manuals to find out about all the types of errors. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 import random from urllib import urlopen import sys WORD_URL = \"http://learncodethehardway.org/words.txt\" # read a file WORDS = [] # dictionary {\"Python\": \"English\"} PHRASES = { \"class %% %( %% %):\" : \"Make a class named %% % that is-a %% %.\" , \"class %% %(object): \\n\\t def __init__(self, ***)\" : \"class %% % has-a __init__ that takes self and *** parameters.\" , \"class %% %(object): \\n\\t def ***(self, @@@)\" : \"class %% % has-a function named *** that takes self and @@@ parameters.\" , \"*** = %% %()\" : \"Set *** to an instance of class %% %.\" , \"***.***(@@@)\" : \"From *** get the *** function, and call it with parameters self, @@@.\" , \"***.*** = '***'\" : \"From *** get the *** attribute and set it to '***'.\" } # do they want to drill phrases first if len ( sys . argv ) == 2 and sys . argv [ 1 ] == \"English\" : PHRASE_FIRST = True else : PHRASE_FIRST = False # load up the words from the website for word in urlopen ( WORD_URL ) . readlines (): WORDS . append ( word . strip ()) def convert ( snippet , phrase ): # 'list comprehension', reseach on the Internet class_names = [ w . capitalize () for w in random . sample ( WORDS , snippet . count ( \" %% %\" ))] other_names = random . sample ( WORDS , snippet . count ( \"***\" )) results = [] param_names = [] for i in range ( 0 , snippet . count ( \"@@@\" )): param_count = random . randint ( 1 , 3 ) param_names . append ( ', ' . join ( random . sample ( WORDS , param_count ))) for sentence in snippet , phrase : result = sentence [:] # fake class names for word in class_names : result = result . replace ( \" %% %\" , word , 1 ) # fake other names for word in other_names : result = result . replace ( \"***\" , word , 1 ) # fake parameter lists for word in param_names : result = result . replace ( \"@@@\" , word , 1 ) results . append ( result ) return results # keep going until until they hit CTRL-D try : while True : snippets = PHRASES . keys () random . shuffle ( snippets ) for snippet in snippets : phrase = PHRASES [ snippet ] question , answer = convert ( snippet , phrase ) if PHRASE_FIRST : question , answer = answer , question print question raw_input ( \"> \" ) print \"ANSWER: %s \\n\\n \" % answer except EOFError : print \" \\n Bye\"","title":"Exercise 41, Learning to Speak Object-Oriented"},{"location":"Learn Python the Hard Way/#exercise-42-is-a-has-a-objects-and-classes","text":"This exercise explains Exercise 41. Inheritance: is-a. object. instance of an object. object of object. has-a. attribute. not attribute. object. Animal is-a object. 1 2 3 4 class Animal ( object ): pass Dog is-a Animal, Animal is-a object. 1 2 3 4 5 6 7 class Dog ( Animal ): def __init__ ( self , name ): ## Cat has-a name self . name = name Cat is-a Animal, Animal is-a object. 1 2 3 4 5 6 class Cat ( Animal ): def __init__ ( self , name ): ## Cat has-a name self . name = name Person is-a object. 1 2 3 4 5 6 7 8 9 10 class Person ( object ): def __init__ ( self , name ): ## Person has-a name self . name = name ## Person has-a pet of some kind, but the pet is specifies elsewhere... self . pet = None Employee is-a Person, Person is-a object. 1 2 3 4 5 6 7 8 9 10 class Employee ( Person ): def __init__ ( self , name , salary ): ## Employee has-a name, because Person has-a name ## super: super ( Employee , self ) . __init__ ( name ) ## Employee has-a salary self . salary = salary Fish is-a object. 1 2 3 4 5 class Fish ( object ): ## no attributes like has-a name pass Salmon is-a Fish, Fish is-a object. 1 2 3 4 5 class Salmon ( Fish ): ## no attributes like has-a name pass Halibut is-a Fish, Fish is-a object. 1 2 3 4 5 class Halibut ( Fish ): ## no attributes like has-a name pass rover is-a instance of name, Dog has-a name. 1 rover = Dog ( \"Rover\" ) satan is-a instance of name, Cat has-a name. 1 satan = Cat ( \"Satan\" ) mary is-a instance of name, Person has-a name. 1 mary = Person ( \"Mary\" ) mary has-a Cat, Cat has-a name, satan, is-a Cat. 1 mary . pet = satan frank is-a instance of name, salary, Employee has-a name, salary. 1 frank = Employee ( \"Frank\" , 120000 ) frank has-a Dog, Dog has-a name, rover, is-a Dog. 1 frank . pet = rover flipper is-a instance of Fish, Fish is-a object, both has-a not attributes. 1 flipper = Fish () crouse is-a instance of Salmon, Salmon is-a Fish; both has-a not attribute. 1 crouse = Salmon () harry is-a instance of Halibut, Halibut is-a Fish; both has-a not attribute. 1 harry = Halibut () Wrap-up. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 object class Fish(object) class Salmon(Fish) crouse = Salmon() class Halibut(Fish) harry = Halibut() flipper = Fish() class Animal(object) class Dog(Animal) rover = Dog(\"Rover\") has-a name class Cat(Animal) satan = Cat(\"Satan\") has-a name class Person(object) mary.pet = satan has-a name, pet class Employee(Person) frank = Employee (\"Frank\", 120000) has-a name, salary frank.pet = rover has-a pet The concept of inheritance, and those of implicit inheritance, overridden inheritance, multiple inheritance, composition, alteration, super objects (or \u2018reinheritance\u2019) are explained in Exercise 44.","title":"Exercise 42, Is-A, Has-A, Objects, and Classes"},{"location":"Learn Python the Hard Way/#exercise-43-gothons-from-planet-percal-25","text":"This Exercise is the first to prepare the final project (Exercise 52, the last chapter). Let\u2019s create a game, from A to Z. First, start by planning. This methodology is valuable for planning any kind of project or program. Methodology 1- Write about the problem: \u201cAliens have invaded a space ship and our hero has to go through a maze of rooms defeating them so he can escape into an escape pod to the planet below. The game will be more like a Zork or Adventure type game with text outputs and funny ways to die. The game will involve an engine that runs a map full of rooms or scenes. Each room will print its own description when the player enters it and then tell the engine what room to run next out of the map.\u201d 2- Describe each scene: Death This is when the player dies and should be something funny. Central Corridor This is the starting point and has a Gothon already standing there they have to defeat with a joke before continuing. Laser Weapon Armory This is where the hero gets a neutron bomb to blow up the ship before getting to the escape pod. It has a keypad the hero has to guess the number for. The Bridge Another battle scene with a Gothon where the hero places the bomb. Escape Pod Where the hero escapes but only after guessing the right escape pod. 3- Draw a map, write more descriptions. 4- Extract key concepts: 1 concept = 1 class. Research them, deepen things. Nouns = concepts = classes: Alien Player Ship Maze Room Scene Gothon Escape Pod Planet Map Engine Death Central Corridor Laser Weapon Armory The Bridge Verbs = functions. This is par the PEP: classes should be in an explicit noun startin with a uppercased letter such as class Central Corridor () . Functions should be verbs such as def play(): . 5- Create a class Hierarchy and object Map Make a class Hierarchy: Map Engine Scene Death Central Corridor Laser Weapon Armory The Bridge Escape Pod PEP: I know from the description I\u2019m going to need a way to \u2018run\u2019 the engine, \u2018get the next scene\u2019 from the map, get the \u2018opening scene\u2019, and \u2018enter\u2019 a scene. I\u2019ll add those like this: Map next_scene opening_scene Engine play Scene enter Death Central Corridor Laser Weapon Armory The Bridge Escape Pod All the scenes under another scene will inherit it; except \u2018enter\u2019: override it later. 6- Code the Classes and a Test to Run Them: Turn: 1 2 3 4 5 6 7 8 9 10 11 12 - Map - next_scene (verb) - opening scene (verb) - Engine - play (verb) - Scene - enter (verb) - Death - Central Corridor - Laser Weapon Armory - The Bridge - Escape Pod Into: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Map ( object ) : def __init__ ( self , start_scene ) : def next_scene ( self , start_scene ) : def opening_scene ( self ) : class Engine ( object ) : def __init__ ( self , scene_map ) : def play ( self ) : class Scene ( object ) : def enter ( self ) : class CentralCorridor ( Scene ) : def enter ( self ) : class LaserWeaponArmory ( Scene ) : def enter ( self ) : class TheBridge ( Scene ) : def enter ( self ) : class EscapePod ( Scene ) : def enter ( self ) : class Death ( Scene ) : def enter ( self ) : a_map = Map ( 'central_corridor' ) a_game = Engine ( a_map ) a_game . play () Into: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class Scene ( object ) : def enter ( self ) : pass class Engine ( object ) : def __init__ ( self , scene_map ) : pass def play ( self ) : pass class Death ( Scene ) : def enter ( self ) : pass class CentralCorridor ( Scene ) : def enter ( self ) : pass def enter ( self ) : pass class TheBridge ( Scene ) : def enter ( self ) : pass class EscapePod ( Scene ) : def enter ( self ) : pass class Map ( object ) : def __init__ ( self , start_scene ) : pass def next_scene ( self , scene_name ) : pass def opening_scene ( self ) : pass a_map = Map ( 'central_corridor' ) a_game = Engine ( a_map ) a_game . play () Start coding (first code skeleton). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class Scene ( object ): def enter ( self ): pass class Engine ( object ): def __init__ ( self , scene_map ): pass def play ( self ): pass class Death ( Scene ): def enter ( self ): pass class CentralCorridor ( Scene ): def enter ( self ): pass class LaserWeaponArmory ( Scene ): def enter ( self ): pass class TheBridge ( Scene ): def enter ( self ): pass class EscapePod ( Scene ): def enter ( self ): pass class Map ( object ): def __init__ ( self , start_scene ): pass def next_scene ( self , scene_name ): pass def opening_scene ( self ): pass a_map = Map ( 'central_corridor' ) a_game = Engine ( a_map ) a_game . play () Improve the code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 # import two functions from two libraries from sys import exit from random import randint # class to generate child classes class Scene ( object ): def enter ( self ): print \"This scene is not yet configured. Subclass it and implement enter().\" exit ( 1 ) class Engine ( object ): def __init__ ( self , scene_map ): self . scene_map = scene_map def play ( self ): current_scene = self . scene_map . opening_scene () # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below last_scene = self . scene_map . next_scene ( 'finished' ) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below while current_scene != last_scene : next_scene_name = current_scene . enter () # function/method from class Scene(object) above current_scene = self . scene_map . next_scene ( next_scene_name ) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) current_scene . enter () # use newly-created current_scene with function/method from class Scene(object) above class Death ( Scene ): quips = [ \"You died. You kinda suck at this.\" , \"Your mom would be proud...if she were smarter.\" , \"Such a louser.\" , \"I have a small puppy that's better at this.\" ] # a list (variable) where a random method will extract an element def enter ( self ): print Death . quips [ randint ( 0 , len ( self . quips ) - 1 )] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list) exit ( 1 ) class CentralCorridor ( Scene ): def enter ( self ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"The Gothons of Planet Percal #25 have invaded your ship and destroyed\" print \"your entire crew. You are the last surviving member and your last\" print \"mission is to get the neutron destruct bomb from the Weapons Armory,\" print \"put it in the bridge, and blow the ship up after getting into an \" print \"escape pod.\" print \" \\n \" print \"You're running down the central corridor to the Weapons Armory when\" print \"a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume\" print \"flowing around his hate filled body. He's blocking the door to the\" print \"Armory and about to pull a weapon to blast you.\" action = raw_input ( \"shoot!/dodge!/tell a joke> \" ) if action == \"shoot!\" : print \"Quick on the draw you yank out your blaster and fire it at the Gothon.\" print \"His clown costume is flowing and moving around his body, which throws\" print \"off your aim. Your laser hits his costume but misses him entirely. This\" print \"completely ruins his brand new costume his mother bought him, which\" print \"makes him fly into an insane rage and blast you repeatedly in the face until\" print \"you are dead. Then he eats you.\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class elif action == \"dodge!\" : print \"Like a world class boxer you dodge, weave, slip and slide right\" print \"as the Gothon's blaster cranks a laser past your head.\" print \"In the middle of your artful dodge your foot slips and you\" print \"bang your head on the metal wall and pass out.\" print \"You wake up shortly after only to die as the Gothon stomps on\" print \"your head and eats you.\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class elif action == \"tell a joke\" : print \"Lucky for you they made you learn Gothon insults in the academy.\" print \"You tell the one Gothon joke you know:\" print \"Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr.\" print \"The Gothon stops, tries not to laugh, then busts out laughing and can't move.\" print \"While he's laughing you run up and shoot him square in the head\" print \"putting him down, then jump through the Weapon Armory door.\" return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"DOES NOT COMPUTE!\" return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class class LaserWeaponArmory ( Scene ): def enter ( self ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"You do a dive roll into the Weapon Armory, crouch and scan the room\" print \"for more Gothons that might be hiding. It's dead quiet, too quiet.\" print \"You stand up and run to the far side of the room and find the\" print \"neutron bomb in its container. There's a keypad lock on the box\" print \"and you need the code to get the bomb out. If you get the code\" print \"wrong 10 times then the lock closes forever and you can't\" print \"get the bomb. The code is 3 digits.\" code = \" %d%d%d \" % ( 1 , 2 , 3 ) #% (randint(1,9), randint(1,9), randint(1,9)) guess = raw_input ( \"[keypad]> \" ) guesses = 0 while guess != code and guesses < 10 : print \"BZZZZEDDD!\" guesses += 1 guess = raw_input ( \"[keypad]> \" ) if guess == code : print \"The container clicks open and the seal breaks, letting gas out.\" print \"You grab the neutron bomb and run as fast as you can to the\" print \"bridge where you must place it in the right spot.\" return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"The lock buzzes one last time and then you hear a sickening\" print \"melting sound as the mechanism is fused together.\" print \"You decide to sit there, and finally the Gothons blow up the\" print \"ship from their ship and you die.\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class class TheBridge ( Scene ): def enter ( self ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"You burst onto the Bridge with the netron destruct bomb\" print \"under your arm and surprise 5 Gothons who are trying to\" print \"take control of the ship. Each of them has an even uglier\" print \"clown costume than the last. They haven't pulled their\" print \"weapons out yet, as they see the active bomb under your\" print \"arm and don't want to set it off.\" action = raw_input ( \"throw the bomb/slowly place the bomb> \" ) if action == \"throw the bomb\" : print \"In a panic you throw the bomb at the group of Gothons\" print \"and make a leap for the door. Right as you drop it a\" print \"Gothon shoots you right in the back killing you.\" print \"As you die you see another Gothon frantically try to disarm\" print \"the bomb. You die knowing they will probably blow up when\" print \"it goes off.\" return 'death' elif action == \"slowly place the bomb\" : print \"You point your blaster at the bomb under your arm\" print \"and the Gothons put their hands up and start to sweat.\" print \"You inch backward to the door, open it, and then carefully\" print \"place the bomb on the floor, pointing your blaster at it.\" print \"You then jump back through the door, punch the close button\" print \"and blast the lock so the Gothons can't get out.\" print \"Now that the bomb is placed you run to the escape pod to\" print \"get off this tin can.\" return 'escape_pod' else : print \"DOES NOT COMPUTE!\" return \"the_bridge\" # input for class Map(object)'s dictionary of key:value; extract a function from another class class EscapePod ( Scene ): def enter ( self ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"You rush through the ship desperately trying to make it to\" print \"the escape pod before the whole ship explodes. It seems like\" print \"hardly any Gothons are on the ship, so your run is clear of\" print \"interference. You get to the chamber with the escape pods, and\" print \"now need to pick one to take. Some of them could be damaged\" print \"but you don't have time to look. There's 5 pods, which one\" print \"do you take?\" good_pod = 1 #randint(1,5) guess = raw_input ( \"[pod #]> \" ) if int ( guess ) != good_pod : print \"You jump into pod %s and hit the eject button.\" % guess print \"The pod escapes out into the void of space, then\" print \"implodes as the hull ruptures, crushing your body\" print \"into jam jelly.\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"You jump into pod %s and hit the eject button.\" % guess print \"The pod easily slides out into space heading to\" print \"the planet below. As it flies to the planet, you look\" print \"back and see your ship implode then explode like a\" print \"bright star, taking out the Gothon ship at the same\" print \"time. You won!\" return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class class Finished ( Scene ): def enter ( self ): print \"You won! Good job.\" return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class class Map ( object ): scenes = { 'central_corridor' : CentralCorridor (), 'laser_weapon_armory' : LaserWeaponArmory (), 'the_bridge' : TheBridge (), 'escape_pod' : EscapePod (), 'death' : Death (), 'finished' : Finished (), } def __init__ ( self , start_scene ): self . start_scene = start_scene def next_scene ( self , scene_name ): val = Map . scenes . get ( scene_name ) return val def opening_scene ( self ): return self . next_scene ( self . start_scene ) a_map = Map ( 'central_corridor' ) a_game = Engine ( a_map ) a_game . play () Improve\uimport two functions from two libraries from sys import exit from random import randint import time import math # class to generate child classes class Scene ( object ): def enter ( self ): print \"This scene is not yet configured. Subclass it and implement enter().\" exit ( 1 ) class Engine ( object ): def __init__ ( self , scene_map , hero ): self . scene_map = scene_map self . hero = hero def play ( self ): current_scene = self . scene_map . opening_scene () # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below last_scene = self . scene_map . next_scene ( 'finished' ) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below while current_scene != last_scene : # True: print \" \\n ----------\" next_scene_name = current_scene . enter ( self . hero ) # function/method from class Scene(object) above current_scene = self . scene_map . next_scene ( next_scene_name ) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) current_scene . enter () # use newly-created current_scene with function/method from class Scene(object) above class Death ( Scene ): quips = [ \"Death1\" , \"Death2\" , \"Death3\" , \"Death4\" ] # a list (variable) where a random method will extract an element def enter ( self , hero ): print Death . quips [ randint ( 0 , len ( self . quips ) - 1 )] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list) exit ( 1 ) class CentralCorridor ( Scene ): def enter ( self , hero ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"Enter. Select.\" action = raw_input ( \"Pick one: a/b/c> \" ) . upper () if action == \"A\" : print \"Ouch!\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class elif action == \"B\" : print \"Aye!\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class elif action == \"C\" : print \"Good.\" return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"DOES NOT COMPUTE!\" return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class class LaserWeaponArmory ( Scene ): def enter ( self , hero ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"Pick a 3-digit combinaison.\" code = \" %d%d%d \" % ( 1 , 2 , 3 ) #% (randint(1,9), randint(1,9), randint(1,9)) print code guess = raw_input ( \"[keypad]> \" ) guesses = 0 while guess != code and guesses < 10 : print \"BZZZZEDDD!\" guesses += 1 guess = raw_input ( \"[keypad]> \" ) if guess == code : print \"Click! Go!\" return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"Boom!\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class class TheBridge ( Scene ): def enter ( self , hero ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"Bridge enigma.\" action = raw_input ( \"true/false> \" ) . upper () if action == \"TRUE\" or action == \"T\" : print \"It goes off.\" return 'death' elif action == \"FALSE\" or action == \"F\" : print \"Escape.\" return 'escape_pod' else : print \"DOES NOT COMPUTE!\" return \"the_bridge\" # input for class Map(object)'s dictionary of key:value; extract a function from another class class EscapePod ( Scene ): def enter ( self , hero ): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere print \"You rush!\" good_pod = 1 #randint(1,5) guess = raw_input ( \"[Pick a pod #]> \" ) if int ( guess ) != good_pod : print \"Oups!\" return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class else : print \"Good choice!\" return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class class Win ( Scene ): def enter ( self , hero ): print \"You won! Good job.\" return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class # exit(0) class Final ( Scene ): def enter ( self , hero ) monster = Monster ( \"Gothon\" ) print \" %s , You now came across the final boss %s ! Let's fight!!!\" % ( hero . name , monster . name ) a_combat = Combat () next_stage = a_combat . combat ( hero , monster ) return next_stage class Combat ( object ): def combat ( self , hero , monster ): #combat between two roles round = 1 while True : print '=' * 30 print 'round %d ' % round print '=' * 30 print \"Your HP: %d \" % hero . hp print \" %s 's HP: %d \" % ( monster . name , monster . hp ) print 'Which action do you want to take?' print '-' * 10 print '1) attack - Attack the enemy' print '2) defend - Defend from being attacked, also will recover a bit' try : action = int ( raw_input ( '> ' )) except ValueError : print \"Please enter a number!!\" continue # defending should be done before attacking if action == 2 : hero . defend () # action of monster, 1/5 possibility it will defends monster_action = randint ( 1 , 6 ) if monster_action == 5 : monster . defend () if action == 1 : hero . attack ( monster ) elif action == 2 : pass else : print \"No such action!\" if monster_action < 5 : monster . attack ( hero ) # whether win or die if hero . hp <= 0 : return 'death' if monster . hp <= 0 : return 'win' hero . rest () monster . rest () round += 1 class Map ( object ): scenes = { 'central_corridor' : CentralCorridor (), 'laser_weapon_armory' : LaserWeaponArmory (), 'the_bridge' : TheBridge (), 'escape_pod' : EscapePod (), 'death' : Death (), 'final_fight' : Final (), 'win' : Win (), 'finished' : Finished (), } def __init__ ( self , start_scene ): self . start_scene = start_scene def next_scene ( self , scene_name ): val = Map . scenes . get ( scene_name ) return val def opening_scene ( self ): return self . next_scene ( self . start_scene ) class human ( object ): defending = 0 def __init__ ( self , name ): self . name = name def attack ( self , target ): # attack the target percent = 0 time . sleep ( 1 ) if target . defending == 1 : percent = float ( self . power ) / 10.0 + randint ( 0 , 10 ) target . hp = math . floor ( target . hp - percent ) else : percent = float ( self . power ) / 5.0 + randint ( 0 , 10 ) target . hp = math . floor ( target . hp - percent ) print \" %s attack %s . %s 's HP decreased by %d points.\" % ( self . name , target . name , target . name , percent ) def defend ( self ): # be in the defending state self . defending = 1 print \" %s is trying to defend.\" % self . name def rest ( self ): # recover a bit after each round if self . defending == 1 : percent = self . rate * 10 + randint ( 0 , 10 ) else : percent = self . rate * 2 + randint ( 0 , 10 ) self . hp += percent print \" %s 's HP increased by %d after rest.\" % ( self . name , percent ) self . defending = 0 class Hero ( Human ): # class for hero hp = 1000 power = 200 rate = 5 class Monster ( Human ): # class for monster hp = 5000 power = 250 rate = 5 a_map = Map ( 'central_corridor' ) a_hero = Hero ( 'Joe' ) a_game = Engine ( a_map ) a_game . play ()","title":"Exercise 43, Gothons from Planet Percal #25"},{"location":"Learn Python the Hard Way/#wrap-up","text":"Draw a mindmap. Draw a flowchart. List all variables, data, other objects and add comments. Build the modules (classes) and embed the primal code. Refine. Use a visualizing software.","title":"Wrap up"},{"location":"Learn Python the Hard Way/#exercise-44-inheritance-vs-composition","text":"From the manual.","title":"Exercise 44, Inheritance vs Composition"},{"location":"Learn Python the Hard Way/#when-to-use-inheritance-or-composition","text":"The question of \u2018inheritance versus composition\u2019 comes down to an attempt to solve the problem of reusable code. You don\u2019t want to have duplicated code all over your software, since that\u2019s not clean and efficient. Inheritance: solves this problem by creating a mechanism for you to have implied features in base classes. Composition: solves this by giving you modules and the ability to call functions in other classes. If both solutions solve the problem of reuse, then which one is appropriate in which situations? The answer is incredibly subjective, but I\u2019ll give you my three guidelines for when to do which: Avoid multiple Inheritance at all costs, as it\u2019s too complex to be reliable. If you\u2019re stuck with it, then be prepared to know the class hierarchy and spend time finding where everything is coming from. Use Composition to package code into modules that are used in many different unrelated places and situations. Use Inheritance only when there are clearly related reusable pieces of code that fit under a single common concept or if you have to because of something you\u2019re using. The thing to remember about object-oriented programming is that it is entirely a social convention programmers have created to package and share code. In that case, find out how they use things and then just adapt to the situation.","title":"When to Use Inheritance or Composition"},{"location":"Learn Python the Hard Way/#function-style","text":"pep Function = Method. A class does things: name it as if it\u2019s a command you are giving to the class. Same as pop is saying \u2018pop this off the list\u2019. Keep functions small and simple (PEP). Class Style Use the camel case: SuperGoldFactory . Minimize what __init__ does. It should be simple to use. Other class functions use the underscore format: my_awesome_hair . Be consistent in how you organize your function arguments. Function 1 takes (dog, cat, user) , function 2 should take (dog, cat, user) . Unless there is a good reason. Variable should be self-contained. Limit importing from modules or globals. Always have a class Name(object) on top of all. Code Style Give your code vertical space to read. Read you code out loud to test it. Change the difficult passages to improve readibility. Imitate other coders: find you style. Respect others\u2019s style; be a team player. Good Comments Describe why you are doing doing what you are doing. Write for the others. Write sentences. Avoid clutering the code though. Short sentences, to the point. Review your comments.","title":"Function Style"},{"location":"Learn Python the Hard Way/#composition","text":"In this code I\u2019m not using the name Parent, since there is not a parent-child is-a relationship. This is a has-a relationship, where Child has-a Other that it uses to get its work done. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Other ( object ): def implicit ( self ): print \"OTHER implicit()\" def override ( self ): print \"OTHER override()\" def altered ( self ): print \"OTHER altered()\" class Child ( object ): def __init__ ( self ): self . other = Other () # initialize this class with Other(), when an instance is created, it will inherit the class member variables, class functions... def implicit ( self ): self . other . implicit () # call the other class function def override ( self ): print \"CHILD override()\" def altered ( self ): print \"CHILD, BEFORE OTHER altered()\" self . other . altered () # call the other class function print \"CHILD, AFTER OTHER altered()\" son = Child () # instance son . implicit () son . override () son . altered ()","title":"Composition"},{"location":"Learn Python the Hard Way/#implicit-inheritance","text":"Actions on the child imply an action on the parent. The use of pass under the class Child : is how you tell Python that you want an empty block. This creates a class named Child but says that there\u2019s nothing new to define in it. Instead it will inherit all of its behavior from Parent . If you put functions in a base class (i.e., Parent ) then all subclasses (i.e., Child ) will automatically get those features. Very handy for repetitive code you need in many classes. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Parent ( object ): def implicit ( self ): print \"PARENT implicit()\" class Child ( Parent ): pass dad = Parent () son = Child ()","title":"Implicit Inheritance"},{"location":"Learn Python the Hard Way/#inherit-from-both-classes","text":"Python has to look-up the possible function in the class hierarchy for both Child and BadStuff , but it needs to do this in a consistent order. To do this Python uses \u201cmethod resolution order\u201d (MRO) and an algorithm called C3 to get it straight. Because the MRO is complex and a well-defined algorithm is used, Python can\u2019t leave it to you to get the MRO right. Instead, Python gives you the super() function, which handles all of this for you in the places that you need the altering type of actions as I did in Child.altered. With super() you don\u2019t have to worry about getting this right, and Python will find the right function for you. 1 2 3 class SuperFun ( Child , BadStuff ): pass","title":"Inherit from both Classes"},{"location":"Learn Python the Hard Way/#override-explicitly","text":"Actions on the child override the action on the parent. As you can see, it runs the Parent.override function because that variable (dad) is a Parent. But it also runs Child.override messages because son is an instance of Child and Child overrides that function by defining its own version. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Parent ( object ): def override ( self ): print \"PARENT override()\" class Child ( Parent ): def override ( self ): print \"CHILD override()\" dad = Parent () son = Child () dad . override () son . override ()","title":"Override Explicitly"},{"location":"Learn Python the Hard Way/#alter-before-or-after","text":"Actions on the child alter the action on the parent. son.altered() overrides Parent.altered the Child.altered version runs, and line 9 executes like you\u2019d expect. In this case I want to do a before and after, I want to use super to get the Parent.altered version. I call super(Child, self).altered() , which is aware of inheritance and will get the Parent class for you. You should be able to read this as \u201ccall super with arguments Child and self , then call the function altered on whatever it returns.\u201d At this point, the Parent.altered version of the function runs, and that prints out the Parent message. Finally, this returns from the Parent.altered and the Child.altered function continues to print out the after message. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Parent ( object ): def altered ( self ): print \"PARENT altered()\" class Child ( Parent ): def altered ( self ): print \"CHILD, BEFORE PARENT altered()\" super ( Child , self ) . altered () print \"CHILD, AFTER PARENT altered()\" dad = Parent () son = Child () dad . altered () son . altered ()","title":"Alter Before or After"},{"location":"Learn Python the Hard Way/#super","text":"With super , Child reinherit from the Parent . The most common use of super() is actually in __init__ functions in base classes. Then additional class functions. 1 2 3 4 5 6 class Child ( Parent ): def __init__ ( self , stuff ): self . stuff = stuff super ( Child , self ) . __init__ ()","title":"Super"},{"location":"Learn Python the Hard Way/#all-three-combined","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Parent ( object ): def override ( self ): print \"PARENT override()\" def implicit ( self ): print \"PARENT implicit()\" def altered ( self ): print \"PARENT altered()\" class Child ( Parent ): def override ( self ): print \"CHILD override()\" def altered ( self ): print \"CHILD, BEFORE PARENT altered()\" super ( Child , self ) . altered () print \"CHILD, AFTER PARENT altered()\" dad = Parent () son = Child () dad . implicit () son . implicit () dad . override () son . override () dad . altered () son . altered ()","title":"All Three Combined"},{"location":"Learn Python the Hard Way/#exercise-45-you-make-a-game","text":"Use an existing project, Exercise 43 for example, and adapt it. This is a first draft for a project\u2026 1 Storyboarding tool. Create a program that would question the user on its data and advise him on what would be the best graphics to use. Frame by frame, the user could build a presentation knowing slide 1 should be a histogram, slide 2 a scatter plot, etc. 2 Map next_graph opening comment (verb) Engine choose (verb) Graph proceed (verb) 1. CC pie 2. IC bar 3. TSC column, line 4. FDC column, line 5. CorC bar, dot opening comment general comment storytelling pie compare data, y, n y, stacked bar chart n, pie chart with a maximum of 6 items bar simple series of data or items: h deviation bar chart (tornado), divide A from B (winners from losers, good markets from bad markets): h deviation bar chart (tornado), mix of two components (portfolio A items vs portfolio B items):sliding h bar chart, high-low spreads:range h bar chart, correlation x1 and x2 with y (two products, two markets\u2026 with): paired bar chart, compare aspects (with or without discount, red or blue paint):group h bar chart, components of the total: subdivided h bar chart\u2026 column p.37, 42 line p.39, 44-45 surface p. 40 dot p.49 3 Create module 3graph_story (proof of concept). The module presents a story in 3 graphs, according to 3 sets of data. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Map ( object ) : def __init__ ( self , start ) : def next ( self , start ) : def opening ( self ) : class Engine ( object ) : def __init__ ( self , graph_map ) : def choose ( self ) : class Graph ( object ) : def proceed ( self ) : class 1 CC ( Graph ) : def enter ( self ) pie class 2 IC ( Graph ) : def enter ( self ) : bar class 3 TSC ( Graph ) : def enter ( self ) : column line class 4 FDC ( Graph ) : def enter ( self ) : column line class 5 CorC ( Graph ) : def enter ( self ) : bar dot And so on. Consult the manual to find out more","title":"Exercise 45, You Make a Game"},{"location":"Learn Python the Hard Way/#exercise-46-a-project-skeleton","text":"The \u2018skeleton\u2019 directory (see below) or the directory framework will have all the basics you need to get a new project up and running. It will have your project layout, automated tests, modules, and install scripts. 1 2 3 4 5 6 7 8 9 10 11 12 \\:. \u251c\u2500\u2500\u2500bin \u2502 \u251c\u2500\u2500\u2500__init__.py \u2502 \u2514\u2500\u2500\u2500__init__.pyc \u251c\u2500\u2500\u2500docs \u251c\u2500\u2500\u2500NAME \u2502 \u251c\u2500\u2500\u2500__init__.py \u2502 \u2514\u2500\u2500\u2500__init__.pyc \u251c\u2500\u2500\u2500tests \u2502 \u251c\u2500\u2500\u2500__init__.py \u2502 \u2514\u2500\u2500\u2500__init__.pyc \u2514\u2500\u2500\u2500setup.py \\:. is the project parent directory or simply \u2018the\u2019 directory (its name is the project\u2019s name). The directory is the place to be when launching scripts. bin is the main sub-directory. It contains the main script ( python bin/main.py ) for launching other scripts in the project; and launching tests as well. These script are often located in other sub-directories. A sub-directory must be executable to import a module from it or execute a script in it: add an empty script called __init__.py . When a script is executed, it is compiled. Another script, with the extension .pyc , appears. Same as for __init__.pyc , as the sub-directory was executed (when a script import a script from another sub-directory for example). tests contains files to perform nose tests and unittests. setup.py is for documenting and distributing the project (when the project is compiled to be launched as a whole or frozen to be distributed). You can add a readme file below (usually a text or markdown document). The docs sub-directory contains all the project\u2019s documentation. It is more elaborate than the \u2018readme\u2019 file: manuals, explanations, logs, wikis, etc. There can be other sub-directories for static such as images, web languages, etc. Repeat this directory structure for every project. To clean up the directory, in the bash: 1 2 3 4 find . -name \"*.pyc\" -print #display find . -name \"*.pyc\" -exec rn {} \\; 1 remove grep -r \"NAME\" * #search within files In Linux, before running any script, be sure to set the path to the project directory. Bash: 1 2 3 4 export PYTHONPATH = . export PYTHONPATH = $PYTHONPATH : $PWD unset PYTHONPATH # to remove In Windows, set the path in the environment variables. Otherwise, Python won\u2019t find the scripts. PowerShell: 1 $env :PYTHONPATH = \" $env :PYTHONPATH;.\" Or, on top of the Python code, below the shebang lnes, and before any other imports, add: 1 2 3 import sys sys . path # to view sys . path . append ( '.' ) # to set Consult the manual to find out more.","title":"Exercise 46, A Project Skeleton"},{"location":"Learn Python the Hard Way/#exercise-47-automated-testing","text":"","title":"Exercise 47, Automated Testing"},{"location":"Learn Python the Hard Way/#miscellaneous-notes","text":"The project directory is \u2018ex47\u2019. Test if you migrated the files correctly. In the bash: 1 2 grep -r NAME * # no traces of 'NAME', from 'skeleton' find . -name \"*.pyc\" -exec rm {} \\; # no trace of 'name' When you launch a script, you launch it from the parent directory with python bin/app.py . In directory \u2018ex47\u2019, run tests with python tests/BLAH_tests.py . Consult the manual about testing. This is not covered in this notebook. Testing must be done in the shell or in the bash. Make sure you\u2019re running the tests with nosetests not with just Python. The important functions here are assert_equal which makes sure that variables you have set or paths you have built in a Room are actually what you think they are. If you get the wrong result, then nosetests will print out an error message so you can go figure it out. In a script, when you import from another sub-directory, code: 1 from ex47.game import Room When the imported script is in the same sub-directory, code: 1 from bin import Room Consult the manual to find out more.","title":"Miscellaneous notes"},{"location":"Learn Python the Hard Way/#exercise-50-your-first-website","text":"","title":"Exercise 50, Your First Website"},{"location":"Learn Python the Hard Way/#an-overview","text":"Web framework for web projects. Django (the real deal, but complicated), Flask (modest), Pyramid (scalable), etc. Or the simple, yet powerful enough, web.py. Exercises, from 50 to 52, are done with web.p","title":"An overview"},{"location":"Managing Your Biological Data with Python/","text":"Foreword Notes and code snippets. Python 2. The book comes with files and cases. Python 2. From CRC Press, 2014. Part 1, Getting Started \u00b6 Chapter 1, The Python Shell and Basics \u00b6 Data structure Booleans: True or False . Dictionaries: unordered collections of key-value pairs; both can be numbers or strings; indicated with {key1: value1, 'key2': 'value2'} . Floats: numbers with digits after the dicemal point, Integers: numbers without digits after the decimal point. Lists: mutable ordered collections of objects; indicated with [a, b, c] . Sets: immutable unordered collections of unique elements; indicated by ([a, b, c]) . Strings: immutable ordered collections of characters; indicated with 'single' or \"double\" quotation marks. Tuples: immutable ordered collections of objects; indicated with (a, b, c) . Conversions Convert or coerce data: - float(value) ; into a float. - int(value) ; into an integer. - str(value) ; into a string. Strings 'Single' and \"double\" quotes are for short strings. \u2019\u2018\u2019Triple single and double quotes are rather multilines.\u2019\u2018\u2019 Access character and substrings print s[-1] ; print the last character of a string. print s[-5:] ; print from the 5 th position from the end to the end. String functions len(s) ; length of the string, s.upper() ; convert to uppercase. s.lower() ; convert to lowercase. s.strip() ; remove white spaces and tabs from both ends. s.strio('m') ; remove 'm' from both ends. s.rstrip() ; remove on the right only. s.lstrip('m') ; remove on the left only. s.split(' ') ; cut into words where there is space. s.find('m') ; search for the 'm' substring and return the starting position. s.replace('m', 'n') ; replace 'm' with 'n' . s.startwith('m') ; check beginning and return True or False . s.endwith('m') ; check end and return True or False . Create lists data = [1, 2, 3, 4, 5] . data[1:3] ; [2, 3] . data[0:2] ; [1, 2] . data[:3] ; [1, 2, 3] . data[-2:] ; [4, 5] . data2 = data[:] ; create a copy. Modify lists l[i] = x ; replace the i th element with x . l[i;j] = t ; replace elements from i to j by t (iterable). del l[i;j] ; delete the elements of the list from i to j . del s[i;k;k] ; delete the elements of the list from i to j with stop k . l.append(x) ; add element x to the list. l.extend(x) ; add several element x to the list (iterable). l.count(x) ; return the number of elements x in the list. l.index(x[. i[. j]]) ; return the smaller k such that l[k] = x and i <= k <= j . l.insert(i.x) ; insert(wedge in) x . l.pop(i) ; cancel the ith element and return its value; l.pop() does it for the last element. l.remove(x) ; delete a choosen x element. l.reverse() ; reverse the list order. l.sort() ; sort the list. l.sort([cmp[. key[. reverse]]]) ; sort the list; cmp is a customized function for the comparison of element pairs that must return a negative value, zero, or a positive value depending on if the first element of the pair is lower than. equal to. or greater than the second element. sorted(l) ; create a new list made of a simple ascending sort of the list without modifying the list. Functions working of lists len(data) ; length of the list. min(data) ; smallest. max(data) ; largest. sum(data) ; sum. range(4) ; create a list of number from 0 to 3. range(1.5) ; create a list of number from 1 to 4. range(2.9.2) ; create [2, 4, 6, 8] . range(5, 0, -1) ; create [5, 4, 3, 2, 1] Tuples t = 1, 2, 3 or t = (1, 2, 3) t = 1 or tuple = (1,) Accessing data in dictionaries prices['banana'] ; return the value of the key. prices.get('banaba') ; do the same thing, but if the key does not exit, it returns None . prices.has_key('apple') ; check whether the key(s) is(are) defined. prices.keys() ; return a list of all keys. prices.values() ; return a list of all values. prices.items() ; return all keys and values as a list of tuples. Modifying dictionaries prices['kiwi'] = 0.6 ; set the value of the key. prices.setdefault('egg', 0.9) ; set the value of the key if it is not yet defined. None None indicate the object or part of it is empty. For example: - a = None . - b = [None, None, 'green'] . Chapter 2, Your First Python Program \u00b6 Difference between functions and methods Functions are generic; use them anywhere without constraints. For example, len() works on all data. 1 2 3 4 >>> len ( 'protein' ) 7 >>> len ( '111' ) 3 Other funtions, called methods, are specific; use them on a certain type of data. For example, count() works only for strings or a \u2018string\u2019 variable (below, protein is a string). 1 2 3 4 >>> 'protein' . count ( 'r' ) 1 >>> 'occurence' . count ( 'c' ) 3 Count the occurrence of each amino acid in a protein sequence count, element, in, string 1 2 3 4 5 insulin = \"GIVEQCCTSICSLYQLENYCNFVNQHLCGSHLVEALYLVCGERGFFYTPKT\" for amino_acid in \"ACDEFGHIKLMNPQRSTVWY\" : number = insulin . count ( amino_acid ) print amino_acid , number Create a random DNA sequence of length 10 1 2 3 4 5 6 7 8 9 import random alphabet = \"AGCT\" sequence = \"\" for i in range ( 10 ): index = random . randint ( 0 , 3 ) sequence = sequence + alphabet [ index ] print sequence Part 2, Data management \u00b6 Chapter 3, Analyzing a Data Column \u00b6 Read from a text file readlines() . 1 2 3 4 5 6 7 8 text_file = open ( 'neuron_data.txt' , 'r' ) # 'r' is facultative lines = text_file . readlines () text_file . close () print lines read() . 1 2 3 4 5 6 text_file = open ( 'neuron_data.txt' ) # 'r' is facultative print text_file . read () text_file . close () Difference between read() and readlines() read(x) ; read up to x bytes in a file. If you don\u2019t supply the size, it reads the entire file. The output is displayed as strings only once. One character = 1 byte. Close and reopen the file to read it again. readlines(x) ; read up to x bytes. If you don\u2019t supply a size, it reads all the data until it reaches a newline ( \\n ) or the end of a paragraph. Close and reopen the file to read it again. Write a text file 1 2 3 4 5 6 output_file = open ( 'counts.txt' , 'w' ) # 'w' is mandatory output_file . write ( 'number of neuron lengths: 7 \\n ' ) output_file . close () Clean a text file strip strip() ; removes blanks spaces. rstrip() ; right only. lstrip() ; left only. 1 2 3 4 5 6 7 8 9 output_file = open ( 'counts.txt' ) output_file . read () output_file . close () # vs output_file = open ( 'counts.txt' ) output_file . read () . strip () output_file . close () Write and then read the same file 'r' ; cannot write with, only reads. 'w' ; cannot read with, only writes (an existing file with the same name will be erased). 'a' append; data added to the end. 'r+' ; both read and write (by replacing the existing string at the beginning by the new string). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 file1 = open ( 'count.txt' , 'w' ) file1 . write ( 'this is just a dummy test \\n ' ) file1 . close () file2 = open ( 'count.txt' , 'r' ) print file2 . read () file2 . close () file3 = open ( 'count.txt' , 'a' ) file3 . write ( 'this is another test \\n ' ) file3 . close () file4 = open ( 'count.txt' , 'r' ) print file4 . read () file4 . close () file5 = open ( 'count.txt' , 'w' ) file5 . write ( 'this is a final test \\n ' ) file5 . close () file6 = open ( 'count.txt' , 'r' ) print file6 . read () file6 . close () Read a series of numbers from a text file and print a summary of the data strip, append, length, minimum, maximum, sort, format, integer, float strip() ; remove blank spaces. A text is string by default even thought the file contains numbers; transform the text into float. append() ; each line to a list. len(data) . sum(data) . min(data) . max(data) . sort() . %4i is an integer with 4 digits. %6.1f is a float with 6 digits and 2 decimals. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 data = [] for line in open ( 'neuron_data.txt' ): length = float ( line . strip ()) data . append ( length ) n_items = len ( data ) total = sum ( data ) shortest = min ( data ) longest = max ( data ) data . sort () output = open ( \"results.txt\" , \"w\" ) output . write ( \"number of dendritic lengths : %4i \\n \" % ( n_items )) output . write ( \"total dendritic length : %6.1f \\n \" % ( total )) output . write ( \"shortest dendritic length : %7.2f \\n \" % ( shortest )) output . write ( \"longest dendritic length : %7.2f \\n \" % ( longest )) output . write ( \" %37.2f \\n %37.2f \" % ( data [ - 2 ], data [ - 3 ])) output . close () Format the data formatting, variable %s ; a string. %d ; a digit. %r ; raw data. %10s ; left-justify by 10 bytes. %-10s ; right-justify. by bytes %i ; an integer. %f ; a float. %2f ; a float with 2 digits. %2.2f ; has 2 digits and 2 decimals. %2i ; has 2 digits. And so on. str() ; turn a variable into a string (digit 3 to string '3' for example). int() ; turn a variable into an integer (string '3' to digit 3 for example). float() ; turn a variable into a float (digit 3 to 3.0 for example). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 file1 = open ( 'count.txt' , 'w' ) file1 . write ( 'this is just a dummy test' ) file1 . close () file2 = open ( 'count.txt' , 'r' ) variable = file2 . read () print \"Test1: %r \" % ( variable ) print \"Test2: %s \" % ( variable ) print \"Test3: %30s \" % ( variable ) print \"Test4: %-30s \" % ( variable ) print \"Test5: %30r \" % ( variable ) print \"Test6: %-30r \" % ( variable ) print \"Test7: %d , %d , %d \" % ( 1 , 2 , 3 ) print \"Test8: %2d , %3d , %10d \" % ( 1 , 2 , 3 ) print \"Test9: %d , %i , %f \" % ( 1 , 2 , 3 ) print \"Test10: %i , %i , %i \" % ( 1 , 2.8 , 3.1416 ) print \"Test11: %2i , %5i , %10i \" % ( 1 , 2.8 , 3.1416 ) print \"Test12: %f , %f , %f \" % ( 1 , 2.8 , 3.1416 ) print \"Test13: %2f , %2.2f , %10.3f \" % ( 1 , 2.8 , 3.1416 ) print \"Test14: %2f , %2f , %2f \" % ( 0.11 , 10.111 , 1000.1111 ) print \"Test15: %2.1f , %2.1f , %2.10f \" % ( 0.11 , 10.111 , 1000.1111 ) file2 . close () Output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Test1: 'this is just a dummy test' Test2: this is just a dummy test Test3: this is just a dummy test Test4: this is just a dummy test Test5: 'this is just a dummy test' Test6: 'this is just a dummy test' Test7: 1, 2, 3 Test8: 1, 2, 3 Test9: 1, 2, 3.000000 Test10: 1, 2, 3 Test11: 1, 2, 3 Test12: 1.000000, 2.800000, 3.141600 Test13: 1.000000, 2.80, 3.142 Test14: 0.110000, 10.111000, 1000.111100 Test15: 0.1, 10.1, 1000.1111000000 Write a list of numbers to a text file 1 2 3 4 5 6 7 data = [ 16.38 , 139.90 , 441.46 , 29.03 , 40.93 , 202.07 , 142.30 , 346.00 , 300.00 ] out = [] for value in data : out . append ( str ( value ) + ' \\n ' ) open ( 'results.txt' , 'w' ) . writelines ( out ) Ouput: 1 2 3 4 5 6 7 8 9 16.38 139.9 441.46 29.03 40.93 202.07 142.3 346.0 300.0 Calculate the average from a list of numbers 1 2 3 4 5 6 7 8 9 # calculate average from float numbers data = [ 3.53 , 3.47 , 3.51 , 3.72 , 3.43 ] average = sum ( data ) / len ( data ) print average # calculate average from integer numbers data = [ 1 , 2 , 3 , 4 ] average = float ( sum ( data )) / len ( data ) print average Calculate the median from a list of numbers 1 2 3 4 5 6 7 8 9 10 11 data = [ 3.53 , 3.47 , 3.51 , 3.72 , 3.43 ] data . sort () mid = len ( data ) / 2 if len ( data ) % 2 == 0 : median = ( data [ mid - 1 ] + data [ mid ]) / 2.0 else : median = data [ mid ] print median Join or concatenate a list 1 2 3 4 5 6 7 8 9 10 11 >>> L = [ '1' , '2' , '3' ] >>> '+' . join ( L ) '1+2+3' >>> L = [ 'a' , 'b' , 'c' ] >>> '' . join ( L ) 'abc' >>> L = [ '1' , '2' , '3' ] >>> int ( '' . join ( L )) 123 Calculate (a variance and )a standard deviation from a list of numbers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import math data = [ 3.53 , 3.47 , 3.51 , 3.72 , 3.43 ] average = sum ( data ) / len ( data ) total = 0.0 for value in data : total += ( value - average ) ** 2 variance = total / len ( data ) # population variance stddev = math . sqrt ( variance ) # population stddev print variance print stddev Chapter 4, Parsing Data Records \u00b6 Find items common to two lists 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # proteins participating in cell cycle list_a = [] for line in open ( \"cell_cycle_proteins.txt\" ): list_a . append ( line . strip ()) print list_a # proteins expressed in a given cancer cell list_b = [] for line in open ( \"cancer_cell_proteins.txt\" ): list_b . append ( line . strip ()) print list_b for protein in list_a : if protein in list_b : print protein , 'detected in the cancer cell' else : print protein , 'not observed' Output: 1 2 3 4 5 6 7 8 9 10 11 12 ['P62258', 'P61981', 'P62191', 'P17980', 'P43686', 'P35998', 'P62333', 'Q99460', 'O75832'] ['P43686', 'P62333'] P62258 not observed P61981 not observed P62191 not observed P17980 not observed P43686 detected in the cancer cell P35998 not observed P62333 detected in the cancer cell Q99460 not observed O75832 not observed **Find if two or more conditions are met boolean, operators, and, or, not 1 2 3 4 5 6 7 8 9 10 11 seq = \"MGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQTPSKPASADGHRGPSAAFAPAAAE\" if 'GGG' in seq and 'RRR' in seq : print 'GGG is at position: ' , seq . find ( 'GGG' ) print 'RRR is at position: ' , seq . find ( 'RRR' ) if 'WWW' in seq or 'AAA' in seq : print 'Either WWW or AAA occur in the sequence' if 'AAA' in seq and not 'PPP' in seq : print 'AAA occurs in the sequence but not PPP' Boolean Operators Condition Meaning A < B A lower than B A <= B A lower than or equal to B A > B A greater than B A >= B A greater than or equal to B A == B A equal to B A != B A different from B A<> B idem A is B A is the same thing as B \u2018thing\u2019 being an object A is not B A is not the same thing as B A in B A is present in the sequence B A not in B A is not present in the sequence B Find all prime numbers under 30 1 2 3 4 5 6 7 8 9 10 11 for i in range ( 30 ): if i < 4 : print \"prime number:\" , i elif i % 2 == 0 : print \"multiple of two:\" , i elif i % 3 == 0 : print \"multiple of three:\" , i elif i % 5 == 0 : print \"multiple of five:\" , i else : print \"prime number:\" , i List vs Tuple vs Set mutable: change, replace, reorder, add elements. List = [1, 2, 3] ; mutable sequences of objects. Tuple = (1, 2, 3) ; immutable ordered sequences of objects;. Set = set([1, 2, 3]) ; immutable unordered collections of unique elements. The three can contain digits, strings or other objects (embedded). More on lists List[0] ; extract Llist = [[1, 2, 3],[a, b, c],[x, 4, 'text'], 'seq'] ; embedded lists. List[0][1] ; extract from embedded lists. List.append(5) ; add. Create: range(3) . seq(0, 2, 1) . [0.0] * 10 . [x**2 for x in range(5)] . Creating a list with a one-line loop loop, conditional, conditional, on one line 1 2 3 4 5 6 7 8 9 10 11 12 # remove non-base symbols from a sequence squares = [ x ** 2 for x in range ( 5 )] print squares bases = [ 'A' , 'C' , 'T' , 'G' ] print bases seq = 'GGACXCAGXXGATT' print seq seqlist = [ base for base in seq if base in bases ] print seqlist Write all headers from a file to a separate file 1 2 3 4 5 6 7 8 fasta_file = open ( 'SwissProt.fasta' , 'r' ) out_file = open ( 'SwissProt.header' , 'w' ) for line in fasta_file : if line [ 0 : 1 ] == '>' : out_file . write ( line ) out_file . close () Reads all AC numbers from the deflines of a file parse, parsing, text, file 1 2 3 4 5 6 7 8 9 10 input_file = open ( \"SwissProt.fasta\" , \"r\" ) ac_list = [] for line in input_file : if line [ 0 ] == '>' : fields = line . split ( '|' ) ac_list . append ( fields [ 1 ]) print ac_list Output: 1 ['P31946', 'P62258', 'Q04917', 'P61981', 'P31947', 'P27348', 'P63104', 'P30443'] Read a file (genbank_file) and convert it to another file (output_file) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 genbank_file = open ( \"AY810830.gb\" ) output_file = open ( \"AY810830.fasta\" , \"w\" ) flag = False for line in genbank_file : if line [ 0 : 9 ] == 'ACCESSION' : accession = line . split ()[ 1 ] . strip () output_file . write ( '>' + accession + ' \\n ' ) if line [ 0 : 6 ] == 'ORIGIN' : flag = True elif flag : fields = line . split () if fields != []: seq = '' . join ( fields [ 1 :]) output_file . write ( seq . upper () + ' \\n ' ) genbank_file . close () output_file . close () Read multiple files and extract data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 fasta_file = open ( 'SwissProt.fasta' , 'r' ) out_file = open ( 'SwissProtHuman.fasta' , 'w' ) seq = '' for line in fasta_file : if line [ 0 ] == '>' and seq == '' : # process the first line of the input file header = line elif line [ 0 ] != '>' : # join the lines with sequence seq = seq + line elif line [ 0 ] == '>' and seq != '' : # in subsequent lines starting with '>', # write the previous header and sequence # to the output file. Then re-initialize # the header and seq variables for the next record if \"Homo sapiens\" in header : out_file . write ( header + seq ) seq = '' header = line # take care of the very last record of the input file if \"Homo sapiens\" in header : out_file . write ( header + seq ) out_file . close () Chapter 5, Searching Data \u00b6 Translate a RNA sequence to a protein sequence in three reading frames dictionary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 codon_table = { 'GCU' : 'A' , 'GCC' : 'A' , 'GCA' : 'A' , 'GCG' : 'A' , 'CGU' : 'R' , 'CGC' : 'R' , 'CGA' : 'R' , 'CGG' : 'R' , 'AGA' : 'R' , 'AGG' : 'R' , 'UCU' : 'S' , 'UCC' : 'S' , 'UCA' : 'S' , 'UCG' : 'S' , 'AGU' : 'S' , 'AGC' : 'S' , 'AUU' : 'I' , 'AUC' : 'I' , 'AUA' : 'I' , 'UUA' : 'L' , 'UUG' : 'L' , 'CUU' : 'L' , 'CUC' : 'L' , 'CUA' : 'L' , 'CUG' : 'L' , 'GGU' : 'G' , 'GGC' : 'G' , 'GGA' : 'G' , 'GGG' : 'G' , 'GUU' : 'V' , 'GUC' : 'V' , 'GUA' : 'V' , 'GUG' : 'V' , 'ACU' : 'T' , 'ACC' : 'T' , 'ACA' : 'T' , 'ACG' : 'T' , 'CCU' : 'P' , 'CCC' : 'P' , 'CCA' : 'P' , 'CCG' : 'P' , 'AAU' : 'N' , 'AAC' : 'N' , 'GAU' : 'D' , 'GAC' : 'D' , 'UGU' : 'C' , 'UGC' : 'C' , 'CAA' : 'Q' , 'CAG' : 'Q' , 'GAA' : 'E' , 'GAG' : 'E' , 'CAU' : 'H' , 'CAC' : 'H' , 'AAA' : 'K' , 'AAG' : 'K' , 'UUU' : 'F' , 'UUC' : 'F' , 'UAU' : 'Y' , 'UAC' : 'Y' , 'AUG' : 'M' , 'UGG' : 'W' , 'UAG' : 'STOP' , 'UGA' : 'STOP' , 'UAA' : 'STOP' } # read the RNA sequence into a single string rna = '' for line in open ( 'A06662-RNA.fasta' ): if not line . startswith ( '>' ): rna = rna + line . strip () # translate one frame at a time for frame in range ( 3 ): prot = '' print 'Reading frame ' + str ( frame + 1 ) for i in range ( frame , len ( rna ), 3 ): codon = rna [ i : i + 3 ] if codon in codon_table : if codon_table [ codon ] == 'STOP' : prot = prot + '*' else : prot = prot + codon_table [ codon ] else : # handle too short codons prot = prot + '-' # format to blocks of 48 columns i = 0 while i < len ( prot ): print prot [ i : i + 48 ] i = i + 48 Output (contains a translated sequence for each reading frame): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Reading frame 1 WDQSAEAACVRVRVRVCACVCVRLHLCRVGKEIEMGGQ*AQVPKALNP LVWSLLRAMGAIEKSEQGCV*M*GLEGSSREASSKAFAIIW*ENPARM DRQNGIEMSWQLKWTGFGTSLVVGSKQRRIWDSGGLAWGRRGCLRGWE G*E*DDTWWCLAGGGQG*LCEGTARATEAF*DPAVPEPGRQDLHCGRP GEHLA Reading frame 2 GTSQQRQRVCACVCVCVRVCVYACICVGWVRR*RWAGSRPRSRRP*TH WFGVS*GQWGPLRSLNRAVSECEV*KDPPEKPALKLLQSSGERTQQGW TGRME*R*VGS*SGQDLVLAWLWGASRGESGTLVVWPGADGGVSGAGR DESRMIHGGVWQEAGKDDYVKALPGQLKPFETLLSQNQGGKTFIVGDQ VSIW- Reading frame 3 GPVSRGSVCARACACVCVCVCTLAFVSGG*GDRDGRAVGPGPEGLEPT GLESPKGNGGH*EV*TGLCLNVRSRRILQRSQL*SFCNHLVREPSKDG QAEWNRDELAAEVDRIWY*PGCGEQAEENLGLWWSGLGQTGVSQGLGG MRVG*YMVVSGRRRARMTM*RHCPGN*SLLRPCCPRTREARPSLWETR *ASG- While loop 1 2 3 4 5 6 seq = \"IVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\" i = 0 while i < len ( seq ): print seq [ i : i + 12 ] i = i + 12 Output: 1 2 3 4 5 6 IVGGYTCGANTV PYQVSLNSGYHF CGGSLINSQWVV SAAHCYKSGIQV RLGEDNINVVEG NEQF Find the a sequence in a file 1 2 3 4 5 6 7 8 9 10 11 12 swissprot = open ( \"SwissProt.fasta\" ) insulin_ac = 'P61981' result = None while result == None : line = swissprot . next () if line . startswith ( '>' ): ac = line . split ( '|' )[ 1 ] if ac == insulin_ac : result = line . strip () print result Output: 1 >sp|P61981|1433G_HUMAN 14-3-3 protein gamma OS=Homo sapiens GN=YWHAG PE=1 SV=2 Searching a list search 1 2 3 4 5 6 bases = [ 'A' , 'C' , 'T' , 'G' ] seq = 'CAGGCCATTRKGL' for i in seq : if i not in bases : print i , \"is not a nucleotide\" Output: 1 2 3 R is not a nucleotide K is not a nucleotide L is not a nucleotide Read a file and store entries in a dictionary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 sequences = {} ac = '' seq = '' for line in open ( \"SwissProt.fasta\" ): if line . startswith ( '>' ) and seq != '' : sequences [ ac ] = seq seq = '' if line . startswith ( '>' ): ac = line . split ( '|' )[ 1 ] else : seq = seq + line . strip () sequences [ ac ] = seq print sequences . keys () print sequences [ 'P62258' ] Output: 1 2 3 ['Q04917', 'P63104', 'P27348', 'P31947', 'P31946', 'P30443', 'P61981', 'P62258'] MDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIGARRASWRIISSIEQKEENKGGEDKLKMIREYRQMVETELKLICCDILDVLDKHLIPAANTGESKVFYYKMKGDYHRYLAEFATGNDRKEAAENSLVAYKAASDIAMTELPPTHPIRLGLALNFSVFYYEILNSPDRACRLAKAAFDDAIAELDTLSEESYKDSTLIMQLLRDNLTLWTSDMQGDGEEQNKEALQDVEDENQ Read a sequence from a structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 aa_codes = { 'ALA' : 'A' , 'CYS' : 'C' , 'ASP' : 'D' , 'GLU' : 'E' , 'PHE' : 'F' , 'GLY' : 'G' , 'HIS' : 'H' , 'LYS' : 'K' , 'ILE' : 'I' , 'LEU' : 'L' , 'MET' : 'M' , 'ASN' : 'N' , 'PRO' : 'P' , 'GLN' : 'Q' , 'ARG' : 'R' , 'SER' : 'S' , 'THR' : 'T' , 'VAL' : 'V' , 'TYR' : 'Y' , 'TRP' : 'W' } seq = '' for line in open ( \"1TLD.pdb\" ): if line [ 0 : 6 ] == \"SEQRES\" : columns = line . split () for resname in columns [ 4 :]: seq = seq + aa_codes [ resname ] i = 0 print \">1TLD\" while i < len ( seq ): print seq [ i : i + 64 ] i = i + 64 Output: 1 2 3 4 5 >1TLD IVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF ISASKSIVHPSYNSNTLNNDIMLIKLKSAASLNSRVASISLPTSCASAGTQCLISGWGNTKSSG TSYPDVLKCLKAPILSDSSCKSAYPGQITSNMFCAGYLEGGKDSCQGDSGGPVVCSGKLQGIVS WGSGCAQKNKPGVYTKVCNYVSWIKQTIASN Chapter 6, Filtering Data \u00b6 Calculate the intersection of two lists venn 1 2 3 4 5 6 7 8 9 10 data_a = [ 1 , 2 , 3 , 4 , 5 , 6 ] data_b = [ 1 , 5 , 7 , 8 , 9 ] a_and_b = [] for num in data_a : if num in data_b : a_and_b . append ( num ) print a_and_b Output: 1 [1, 5] More about sets set Set = set([1, 2, 3]) ; immutable unordered collections of unique elements. They are not sequential objects like lists. They cannot contain identical elements. to remove duplicates to calculate the intersection the union the difference between two or more group of objects as long as the order is not important. They do not support indexing and slicing operations. They take the in and not in operators (test an element for membership in a set). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 >>> s1 = set ( 'LDFGJLDFGDGD' ) >>> s1 set ([ 'J' , 'F' , 'L' , 'G' , 'D' ]) >>> 'L' in s1 True >>> 'Z' not in s1 True >>> s2 = ( 'LDF' ) >>> s1 . issubset ( s2 ) False >>> s1 . issuperset ( s2 ) True >>> s1 = set ([ 'a' , 1 , 2 , 3 , 4 , 5 , 'c' , 'b' ]) >>> 5 in s1 True >>> 6 in s1 False >>> s2 = set ([ 10 , 4 , 5 ]) >>> s1 . issubset ( s2 ) False >>> s1 . issuperset ( s2 ) False >>> s3 = set (( 1 , 2 , 3 , 4 )) >>> s3 set ([ 1 , 2 , 3 , 4 ]) >>> s3 . add ( 5 ) >>> s3 set ([ 1 , 2 , 3 , 4 , 5 ]) >>> s5 = set ([ 1 , 2 , 3 , 'b' , 'c' ]) >>> s5 set ([ 1 , 2 , 3 , 'b' , 'c' ]) >>> s5 . update ([ 'a' , 'd' , 4 ]) >>> s5 set ([ 'a' , 1 , 2 , 3 , 4 , 'd' , 'c' , 'b' ]) >>> s1 = set ([ 'a' , 'b' , 'c' ]) >>> s2 = set ([ 'c' , 'd' , 'e' ]) >>> s1 . union ( s2 ) set ([ 'a' , 'c' , 'b' , 'e' , 'd' ]) >>> s1 . intersection ( s2 ) set ([ 'c' ]) >>> s1 . symmetric_difference ( s2 ) set ([ 'a' , 'b' , 'e' , 'd' ]) >>> s1 . difference ( s2 ) set ([ 'a' , 'b' ]) >>> s2 . difference ( s1 ) set ([ 'e' , 'd' ]) Calculate the intersection of two sets 1 2 3 4 5 data_a = set ([ 1 , 2 , 3 , 4 , 5 , 6 ]) data_b = set ([ 1 , 5 , 7 , 8 , 9 ]) a_and_b = data_a . intersection ( data_b ) print a_and_b Output: 1 set([1, 5]) Find numbers common to three sets 1 2 3 4 5 6 7 8 9 reduce () is a = set (( 1 , 2 , 3 , 4 , 5 )) b = set (( 2 , 4 , 6 , 7 , 1 )) c = set (( 1 , 4 , 5 , 9 )) triple_set = [ a , b , c ] common = reduce ( set . intersection , triple_set ) print common Output: 1 set([1, 4]) Calculate the differences of two lists 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 data_a = [ 1 , 2 , 3 , 4 , 5 , 6 ] data_b = [ 1 , 5 , 7 , 8 , 9 ] a_not_b = [] b_not_a = [] for num in data_a : if num not in data_b : a_not_b . append ( num ) for num in data_b : if num not in data_a : b_not_a . append ( num ) print a_not_b print b_not_a Output: 1 2 [2, 3, 4, 6] [7, 8, 9] Calculate the differences of two sets 1 1 2 3 4 5 6 7 8 data_a = set ([ 1 , 2 , 3 , 4 , 5 , 6 ]) data_b = set ([ 1 , 5 , 7 , 8 , 9 ]) a_not_b = data_a . difference ( data_b ) b_not_a = data_b . difference ( data_a ) print a_not_b print b_not_a Output: 1 2 set([2, 3, 4, 6]) set([8, 9, 7]) Calculate the differences of two sets 2 1 2 3 4 5 6 7 8 data_a = set ([ 1 , 2 , 3 , 4 , 5 , 6 ]) data_b = set ([ 1 , 5 , 7 , 8 , 9 ]) a_or_b = data_a . union ( data_b ) a_xor_b = data_a . symmetric_difference ( data_b ) print a_or_b print a_xor_b Output: 1 2 set([1, 2, 3, 4, 5, 6, 7, 8, 9]) set([2, 3, 4, 6, 7, 8, 9]) Remove elements from a list pop() ; return and remove the first value. pop(0) ; return and remove a specific position in the index. 1 2 3 4 5 6 >>> data_a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] >>> data_a . pop () 1 >>> print data_a [ 2 , 3 , 4 , 5 , 6 , 7 ] del() ; remove a specific position in the index only. delete 1 2 3 4 >>> data_a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] >>> del ( data_a [ 1 ]) >>> print data_a [ 1 , 3 , 4 , 5 , 6 , 7 ] remove() ; remove a specific element only. remove 1 2 3 4 5 6 >>> data_a = [ 1 , 2 , 3 , 4 , 5 , 6 ] >>> data_a . remove ( 2 ) >>> print data_a [ 1 , 3 , 4 , 5 , 6 ] >>> data = [ x for x in data_a if x != 3 ] Slicing a list slice, subset 1 2 3 >>> data_a = [ 1 , 2 , 3 , 4 , 5 , 6 ] >>> data_2 = data_a [: 2 ] [ 1 , 2 ] Remove elements from a dictionary pop, delete 1 2 3 4 5 6 7 8 9 10 11 12 13 >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 } >>> d . pop ( 'a' ) 1 >>> d { 'b' : 2 , 'c' : 3 } >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 } >>> del d [ 'a' ] 1 >>> d { 'b' : 2 , 'c' : 3 } Delete particular lines from a text file or write back particular lines in a new file 1 2 lines = open ( 'text.txt' ) . readlines () open ( 'new.txt' , 'w' ) . writelines ( lines [ 2 : 4 ] + lines [ 6 :]) Remove some lines from a text file 1 2 3 4 5 6 7 8 9 10 11 12 in_file = open ( 'text.txt' ) out_file = open ( 'new.txt' , 'w' ) index = 0 indices_to_remove = [ 1 , 2 , 5 , 6 ] for line in in_file : index = index + 1 if index not in indices_to_remove : out_file . write ( line ) in_file . close () out_file . close () Remove some lines from a text file with enumerate () enumerate 1 2 3 4 5 6 7 8 out_file = open ( 'new.txt' , 'w' ) indices_to_remove = [ 1 , 2 , 5 , 6 ] for index , line in enumerate ( open ( 'text.txt' )): if ( index + 1 ) not in indices_to_remove : out_file_write ( line ) out_file . close () Remove duplicates from a file with accession numbers 1 set Using a set is faster but distorts the order. 1 2 3 4 5 6 7 8 9 input_file = open ( 'UniprotID.txt' ) output_file = open ( 'UniprotID-unique.txt' , 'w' ) unique = set ( input_file ) for line in input_file : unique . add ( line ) for line in unique : output_file . write ( line ) Remove duplicates from a list of accession numbers 2 list 1 2 3 4 5 6 7 8 9 10 11 input_file = open ( 'UniprotID.txt' ) output_file = open ( 'UniprotID-unique.txt' , 'w' ) unique = [] for line in input_file : if line not in unique : output_file . write ( line ) unique . append ( line ) input_file . close () output_file . close () Compare two lists of accession codes using sets set comparison, difference 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # read the old database release old_db = set () for line in open ( \"list_old.txt\" ): accession = line . strip () old_db . add ( accession ) # read the new database release new_db = set () for line in open ( \"list_new.txt\" ): accession = line . strip () new_db . add ( accession ) # report the differences new_entries = new_db . difference ( old_db ) print \"new entries\" , list ( new_entries ) old_entries = old_db . difference ( new_db ) print \"deprecated entries\" , list ( old_entries ) unique_entries = new_db . symmetric_difference ( old_db ) print \"unique entries\" , list ( unique_entries ) Chapter 7, Managing Tabular Data \u00b6 The original data protein ext1 ext2 ext3 0.16 0.038 0.044 0.04 0.33 0.089 0.095 0.091 0.66 0.184 0.191 0.191 1.0 0.28 0.292 0.283 1.32 0.365 0.367 0.365 1.66 0.441 0.443 0.444 Read tabular data from a tab-separated text file 1 2 3 4 5 6 table = [] for line in open ( 'lowry_data.txt' ): table . append ( line . strip () . split ( ' \\t ' )) print table Output: 1 2 3 4 5 6 7 8 9 [ ['protein', 'ext1', 'ext2', 'ext3'], ['0.16', '0.038', '0.044', '0.04'], ['0.33', '0.089', '0.095', '0.091'], ['0.66', '0.184', '0.191', '0.191'], ['1.0', '0.28', '0.292', '0.283'], ['1.32', '0.365', '0.367', '0.365'], ['1.66', '0.441', '0.443', '0.444'] ] Write a nested list to a text file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 table = [ [ 'protein' , 'ext1' , 'ext2' , 'ext3' ], [ 0.16 , 0.038 , 0.044 , 0.040 ], [ 0.33 , 0.089 , 0.095 , 0.091 ], [ 0.66 , 0.184 , 0.191 , 0.191 ], [ 1.00 , 0.280 , 0.292 , 0.283 ], [ 1.32 , 0.365 , 0.367 , 0.365 ], [ 1.66 , 0.441 , 0.443 , 0.444 ] ] out = '' for row in table : line = [ str ( cell ) for cell in row ] out = out + ' \\t ' . join ( line ) + ' \\n ' open ( 'lowry_data.txt' , 'w' ) . write ( out ) Reformat a four-column to a two-column table Create a 2D table. Print the table line by line. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 table = [ [ 'protein' , 'ext1' , 'ext2' , 'ext3' ], [ 0.16 , 0.038 , 0.044 , 0.040 ], [ 0.33 , 0.089 , 0.095 , 0.091 ], [ 0.66 , 0.184 , 0.191 , 0.191 ], [ 1.00 , 0.280 , 0.292 , 0.283 ], [ 1.32 , 0.365 , 0.367 , 0.365 ], [ 1.66 , 0.441 , 0.443 , 0.444 ] ] # remove the first row table = table [ 1 :] protein , ext1 , ext2 , ext3 = zip ( * table ) # create a single column for `ext` or concatenate each `ext` # extend (`* 3`) the `protein` column to match the `ext` column. extinction = ext1 + ext2 + ext3 protein = protein * 3 # create four tuples for each column table = zip ( protein , extinction ) for prot , ext in table : print prot , ext Output: protein ext 0.16 0.038 0.33 0.089 0.66 0.184 1.0 0.28 1.32 0.365 1.66 0.441 0.16 0.044 0.33 0.095 0.66 0.191 1.0 0.292 1.32 0.367 1.66 0.443 0.16 0.04 0.33 0.091 0.66 0.191 1.0 0.283 1.32 0.365 1.66 0.444 Create a table; lists in a list Empty 1. 1 table = [[ 0 ] * 3 for x in range ( 3 )] Empty 2. 1 2 3 table = [] for i in range ( 3 ): table . append ([ 0 ] * 3 ) Encode a 2D list; lists in a list tabular, table, two dimensions 1 2 3 4 5 table = [ [ 0 , 1 , 2 , 3 ], [ 10 , 11 , 12 , 13 ], [ 20 , 21 , 22 , 23 ] ] Encode a list of nested tuples; tuples in a list 1 2 3 4 5 table = [ ( 0 , 1 , 2 , 3 ), ( 10 , 11 , 12 , 13 ), ( 20 , 21 , 22 , 23 ) ] Extract, access rows and cells from a 2D table tabular, table, two dimensions table[1] ; extract the 2 nd row. table[1][2] ; extract a single cell (2 nd row, 3 rd column). table[1:] or table.pop(0) ; slice the 1 st row, keep the remaining. table.pop(2) ; delete the 3 rd row. table[:2] ; slice the 3 rd column, keep the remaining. table[:2] + table[3:] ; slice the 3 rd column and 4 th row, keep the remaining. table.insert(2, [0.55, 0.12, 0.12, 0.14]) ; insert a new row in 3 rd position table.append([0.55, 0.12, 0.12, 0.14]) ; insert a new row at the end. Looping to access each row 1 2 for row in table : print row Looping to access each cell 1 2 3 for row in table : for cell in row : print cell Extract, access columns from a 2D table tabular, table, two dimensions 1 2 3 4 5 protein = [] # access the 1st, 2nd... column (separate the columns) for row in table : protein . append ( row [ 0 ]) 1 2 3 # access the 4th column columns = zip ( * table ) fourth = column [ 3 ] protein, ex1. ext2, ext3 = zip(*table) ; access many columns; now each column is in a separate tuple. Flip a table 90 degrees convert column to row, row to column Column becomes rows. Easier to extract or insert rows and cells. 1 2 3 4 5 6 7 8 data = [ [ 0 , 1 , 2 , 3 ], [ 10 , 11 , 12 , 13 ], [ 20 , 21 , 22 , 23 ] ] columns = zip ( * data ) print columns Output: 1 2 3 4 5 6 [ (0, 10, 20), (1, 11, 21), (2, 12, 22), (3, 13, 23) ] But rows are now immutable tuples! You cannot manipulate individual cells. Convert the rows to lists again in order to extract a cell. 1 2 table [ 1 ] = list ( table [ 1 ]) table [ 1 ][ 2 ] Insert, access or extract columns from a 2D table tabular, table, two dimensions 1 2 3 4 5 6 7 8 9 10 table = zip ( * table ) table . append ([ 'ext4' , 0 , 0 , 0 , 0 , 0 , 0 ]) table = zip ( * table ) table = zip ( * table ) table . pop ( 1 ) table = zip ( * table ) table = zip ( * table ) table The zip() function zip() ; iterate though lists, tuples, and strings. 1 2 3 4 5 6 >>> zip ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ]) [ ( 1 , 4 ), ( 2 , 5 ), ( 3 , 6 ) ] The asterik tells the function to use all the arguments. 1 2 3 4 5 zip ( * table ) # vs zip ( table [ 0 ], table [ 1 ], table [ 2 ], table [ 3 ]) Multi-dimentional tables tabular, table, two dimensions, three dimensions, 2D, 3D, lists in list 1 cube = [[[ 0 , 1 ], [ 2 , 3 ]], [[ 4 , 5 ], [ 6 , 7 ]]] Warning: more dimensions means more nested data. It slows down the calculations!!! Prefer Numpy, Pandas, parallel computing. Avoid going over 2D! Create a table; dictionaries in a table, in a list 1 2 3 4 5 6 7 8 table = [ { 'protein' : 0.16 , 'ext1' : 0.038 , 'ext2' : 0.044 , 'ext3' : 0.040 }, { 'protein' : 0.33 , 'ext1' : 0.089 , 'ext2' : 0.095 , 'ext3' : 0.091 }, { 'protein' : 0.66 , 'ext1' : 0.184 , 'ext2' : 0.191 , 'ext3' : 0.191 }, { 'protein' : 1.00 , 'ext1' : 0.280 , 'ext2' : 0.292 , 'ext3' : 0.283 }, { 'protein' : 1.32 , 'ext1' : 0.365 , 'ext2' : 0.367 , 'ext3' : 0.365 }, { 'protein' : 1.66 , 'ext1' : 0.441 , 'ext2' : 0.443 , 'ext3' : 0.444 } ] Extract, access cells in a table 1 2 3 4 5 # second row, cell 'ext2' instead of a number cell = table [ 1 ][ 'ext2' ] print table print cell Create a table; dictionaries in a dictionary 1 2 3 4 5 6 7 8 table = { 'row1' : { 'protein' : 0.16 , 'ext1' : 0.038 , 'ext2' : 0.044 , 'ext3' : 0.040 }, 'row2' : { 'protein' : 0.33 , 'ext1' : 0.089 , 'ext2' : 0.095 , 'ext3' : 0.091 }, 'row3' : { 'protein' : 0.66 , 'ext1' : 0.184 , 'ext2' : 0.191 , 'ext3' : 0.191 }, 'row4' : { 'protein' : 1.00 , 'ext1' : 0.280 , 'ext2' : 0.292 , 'ext3' : 0.283 }, 'row5' : { 'protein' : 1.32 , 'ext1' : 0.365 , 'ext2' : 0.367 , 'ext3' : 0.365 }, 'row6' : { 'protein' : 1.66 , 'ext1' : 0.441 , 'ext2' : 0.443 , 'ext3' : 0.444 } } Extract, access cells in a table, in a dictionary More readable this way; second row, cell 'ext2' : 1 2 3 4 cell = table [ 'row1' ][ 'ext2' ] print table print cell Create a table: lists in a dictionaries Data for each row are in a simpler format. 1 2 3 4 5 6 7 8 table = { '1' : [ 'protein' : 0.16 , 'ext1' : 0.038 , 'ext2' : 0.044 , 'ext3' : 0.040 \u00b8 ], '2' : [ 'protein' : 0.33 , 'ext1' : 0.089 , 'ext2' : 0.095 , 'ext3' : 0.091 ], '3' : [ 'protein' : 0.66 , 'ext1' : 0.184 , 'ext2' : 0.191 , 'ext3' : 0.191 ], '4' : [ 'protein' : 1.00 , 'ext1' : 0.280 , 'ext2' : 0.292 , 'ext3' : 0.283 ], '5' : [ 'protein' : 1.32 , 'ext1' : 0.365 , 'ext2' : 0.367 , 'ext3' : 0.365 ], '6' : [ 'protein' : 1.66 , 'ext1' : 0.441 , 'ext2' : 0.443 , 'ext3' : 0.444 ] } Create a table; formats Lists in a list: Easy to access/add/delete rows, to sort. Difficult to deal with columns and a specific cell. Dictionaries in a dictionary: Easy to access column entries. Easy to read (find data). Unsorted and impossible to sort. Mixed lists and dictionaries: Use the advantage of both types and build the table accordingly (l, d or d, l for rows, columns) depending on the operations (see above). The code is harder to read or less straightforward. Convert a table from a nested list to a nested dictionary\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 table = [ [ 'protein' , 'ext' ], [ 0.16 , 0.038 ], [ 0.33 , 0.089 ], [ 0.66 , 0.184 ], [ 1.00 , 0.280 ], [ 1.32 , 0.365 ], [ 1.66 , 0.441 ] ] # convert nested list to nested dict nested_dict = {} n = 0 key = table [ 0 ] for row in table [ 1 :]: # for row in table[0:] includes the header n += 1 entry = { key [ 0 ]: row [ 0 ], key [ 1 ]: row [ 1 ]} nested_dict [ 'row' + str ( n )] = entry print nested_dict Output: 1 2 3 4 5 6 7 8 { 'row1' : { 'protein' : 0.16 , 'ext' : 0.038 }, 'row2' : { 'protein' : 0.33 , 'ext' : 0.089 }, 'row3' : { 'protein' : 0.66 , 'ext' : 0.184 }, 'row4' : { 'protein' : 1.0 , 'ext' : 0.28 }, 'row5' : { 'protein' : 1.32 , 'ext' : 0.365 }, 'row6' : { 'protein' : 1.66 , 'ext' : 0.441 } } \u2026and convert a nested dictionary to a table 1 2 3 4 5 6 7 # convert nested dict back to nested list nested_list = [] for entry in nested_dict : key = nested_dict [ entry ] nested_list . append ([ key [ 'protein' ], key [ 'ext' ]]) print nested_list Output: 1 2 3 4 5 6 7 8 [ [ 0.16 , 0.038 ], [ 0.33 , 0.089 ], [ 0.66 , 0.184 ], [ 1.0 , 0.28 ], [ 1.32 , 0.365 ], [ 1.66 , 0.441 ] ] Chapter 8, Sorting Data \u00b6 Sort a table by one column and write it to a file add, index, list sorted() . itemgetter() ; turn elements of each column into a sortable key. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from operator import itemgetter # read table to a nested list of floats table = [] for line in open ( \"random_distribution.tsv\" ): columns = line . split () columns = [ float ( x ) for x in columns ] table . append ( columns ) # sort the table by second column column = 1 table_sorted = sorted ( table , key = itemgetter ( column )) # format table as strings for row in table_sorted : row = [ str ( x ) for x in row ] print \" \\t \" . join ( row ) Output (first 3 lines only): 1 2 3 6153.0 58.0 0.00942629611572 40.0 0.00650089387291 260.0 0.0422558101739 6101.0 64.0 0.0104900835929 41.0 0.00672020980167 299.0 0.0490083592854 6101.0 68.0 0.0111457138174 39.0 0.0063923946894 274.0 0.0449106703819 List are good for sorting ASCII sort order chart (top to bottom, left to right): space 0 : A Q [ a q } ! 1 ; B R \\ b r tick \u201c 2 < C S ] c s { # 3 = D T ^ d t $ 4 > E U _ e u DEL % 5 ? F V ` f v & 6 @ G W g w \u2018 7 H X h x ( 8 I Y i y ) 9 J Z j z * K k + L l , M m - N n . O o / P p Difference between sort() and sorted() sort() ; apply to lists sorted() ; apply to lists, tuples, and dictionary keys. reverse() sort the other way around. sorted(data, reverse = True) ; idem. operator.itemgetter(i)(T) returns the i th element of T , a string, a list, a tuple, or a dictionary. 1 2 3 4 5 6 >>> from operator import itemgetter >>> data = [ 'A' , 'T' , 'C' ] >>> itemgetter ( 1 )( data ) 'A' >>> itemgetter ( 1 , - 1 )( data ) ( 'A' , 'T' ) 1 new_table = sorted ( table , key = itemgetter ( 1 , 3 )) Sort entries in a tabular output file in reverse order Notice the table_sorted = sorted(table, key = itemgetter(2), reverse=True) . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from operator import itemgetter input_file = open ( \"BlastOut.csv\" ) output_file = open ( \"BlastOutSorted.csv\" , \"w\" ) # read BLAST output table table = [] for line in input_file : col = line . split ( ',' ) col [ 2 ] = float ( col [ 2 ]) table . append ( col ) table_sorted = sorted ( table , key = itemgetter ( 2 ), reverse = True ) # write sorted table to an output file for row in table_sorted : row = [ str ( x ) for x in row ] output_file . write ( \" \\t \" . join ( row ) + ' \\n ' ) input_file . close () output_file . close () Sort a tuple by converting it to a list 1 2 3 4 5 6 7 8 9 10 # sort a tuple data = ( 1 , 4 , 5 , 3 , 8 , 9 , 2 , 6 , 8 , 9 , 30 ) list_data = list ( data ) list_data . sort () new_tup = tuple ( data ) print new_tup # sort a tuple using the sorted() built-in function new_tup = tuple ( sorted ( data )) print new_tup Both outputs: 1 2 ( 1 , 4 , 5 , 3 , 8 , 9 , 2 , 6 , 8 , 9 , 30 ) ( 1 , 2 , 3 , 4 , 5 , 6 , 8 , 8 , 9 , 9 , 30 ) Convert a dictionary to a sorted list 1 2 3 4 5 6 7 8 9 10 11 12 13 data = { 1 : 'a' , 2 : 'b' , 4 : 'd' , 3 : 'c' , 5 : 't' , 6 : 'm' , 36 : 'z' } # create a list of keys and go through them one by one keys = list ( data ) keys . sort () for key in keys : print key , data [ key ] # sort keys using the sorted() built-in function for key in sorted ( data ): print key , data [ key ] Output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1 a 2 b 3 c 4 d 5 t 6 m 36 z 1 a 2 b 3 c 4 d 5 t 6 m 36 z Sort strings by their length lamda, function Use a lambda function and replace itemgetter() . 1 2 3 4 data = [ 'ASDF' , 'SDFSADGSAG' , 'SDFSD' , 'GSGDGG' ] new_data = sorted ( data , key = lambda x : len ( x )) print new_data 1 2 3 4 data = [ 'ASDF' , 'SDFSADGSAG' , 'SDFSD' , 'GSGDGG' ] new_data = sorted ( data , key = lambda col : col [ 1 ]) # alternative print new_data Same output: 1 [ 'ASDF' , 'SDFSD' , 'GSGDGG' , 'SDFSADGSAG' ] Sort a table by seven columns in one operation 1 2 3 4 5 6 7 8 9 10 11 12 from operator import itemgetter # read table in_file = open ( \"random_distribution.tsv\" ) table = [] for line in in_file : columns = line . split () columns = [ float ( x ) for x in columns ] table . append ( columns ) table_sorted = sorted ( table , key = itemgetter ( 0 , 1 , 2 , 3 , 4 , 5 , 6 )) print table_sorted Output (first 3 lines only): 1 2 3 4 5 6 [ [ 6041.0 , 87.0 , 0.0144015891409 , 44.0 , 0.00728356232412 , 213.0 , 0.035259063069 ], [ 6042.0 , 121.0 , 0.0200264812976 , 35.0 , 0.00579278384641 , 262.0 , 0.0433631247931 ], [ 6044.0 , 113.0 , 0.0186962276638 , 67.0 , 0.0110853739246 , 266.0 , 0.0440105890139 ], ... ] Sort entries in a tabular BLAST output file in reverse order 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from operator import itemgetter input_file = open ( \"BlastOut.csv\" ) output_file = open ( \"BlastOutSorted.csv\" , \"w\" ) # read BLAST output table table = [] for line in input_file : col = line . split ( ',' ) col [ 2 ] = float ( col [ 2 ]) table . append ( col ) table_sorted = sorted ( table , key = itemgetter ( 2 ), reverse = True ) # write sorted table to an output file for row in table_sorted : row = [ str ( x ) for x in row ] output_file . write ( \" \\t \" . join ( row ) + ' \\n ' ) input_file . close () output_file . close () Sort entries in a comma separated file by two columns 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from operator import itemgetter input_file = open ( \"PDBhaemoglobinReport.csv\" ) output_file = open ( \"PDBhaemoglobinSorted.csv\" , \"w\" ) table = [] header = input_file . readline () for line in input_file : col = line . split ( ',' ) col [ 3 ] = float ( col [ 3 ][ 1 : - 1 ]) col [ 4 ] = int ( col [ 4 ][ 1 : - 2 ]) table . append ( col ) table_sorted = sorted ( table , key = itemgetter ( 3 , 4 )) output_file . write ( header + ' \\t ' ) for row in table_sorted : row = [ str ( x ) for x in row ] output_file . write ( \" \\t \" . join ( row ) + ' \\n ' ) input_file . close () output_file . close () Chapter 9, Pattern Matching and Text Mining \u00b6 Find a sequence pattern in a sequence regex, regular expression re package. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import re # define a string with occurrences of regex: seq = 'VSVLTMFRYAGWLDRLYMLVGTQLAAIIHGVALPLMMLI' # compile a pattern and assign it to a variable pattern = re . compile ( '[ST]Q' ) # search for the pattern in the string match = pattern . search ( seq ) if match : # print the first match along the sequence with the group() method # 4 characters before and after the pattern print ' %10s ' % ( seq [ match . start () - 4 : match . end () + 4 ]) print ' %6s ' % match . group () else : print \"no match\" Output: 1 2 MLVGTQLAAI TQ re methods group() ; return the matching subgroup. span() ; return a tuple containing the starting and ending position of the match. start() ; return the starting position. end() ; return the ending position. search() ; find the first occurence within the string. match() ; attempt to match a pattern to a string. If the pattern is within the string, it will not match it. It will find \u2018S\u2019 in \u2018ST\u2019, but not in \u2018TST\u2019. findall() ; return a list containing all the matching substrings. finditer() ; find all the match objects corresponding to the regex matches and returns them in the form of an iterator. 1 2 3 4 5 6 7 8 9 10 11 12 13 import re pattern = re . compile ( 'R.[ST][^P]' ) seq = 'RQSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP' # findall returns a list of all matches matches = pattern . findall ( seq ) print matches # finditer returns an iterator of match objects match_iter = pattern . finditer ( seq ) for match in match_iter : print match . group (), match . span (), match . start (), match . end () Ouput: 1 2 3 4 [ 'RQSA' , 'RRSL' , 'RPSK' ] RQSA ( 0 , 4 ) 0 4 RRSL ( 18 , 22 ) 18 22 RPSK ( 40 , 44 ) 40 44 More re methods Divide regex in subgroups, each matching a different component of interest. (.) ; delimite a group. R(.)[ST][^P] ; stand for \u2018R\u2019, \u2018any character\u2019, pattern \u2018ST\u2019, any character different from \u2018P\u2019. The \u2018any character\u2019 is also a subgroup. What ever is found between R and [ST][^P] is a subgroup. R(.{0,3})[ST][^P] ; add a `{0,3}. This qualifier or quantifiers means that at least 0 and at most 3 repetitions of \u2018R\u2019. group() ; always return the complete matching substring (0 for no subgroup). group(#) ; return subgroups numbered from left to right in increasing order (subgroup #). Find multiple patterns in a search string 1 2 3 4 5 6 7 8 9 10 11 12 13 import re seq = 'QSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP' pattern1 = re . compile ( 'R(.)[ST][^P]' ) match1 = pattern1 . search ( seq ) print match1 . group () print match1 . group ( 1 ) pattern2 = re . compile ( 'R(.{0,3})[ST][^P]' ) match2 = pattern2 . search ( seq ) print match2 . group () print match2 . group ( 1 ) Output: 1 2 3 4 RRSL R RRRSL RR Another example with two subgroups 1 2 3 4 5 6 7 8 9 10 import re seq = 'zzabcdzz' pattern = re . compile ( '(a(b)c)d' ) match = pattern . search ( seq ) print match . group ( 0 ) print match . group ( 1 ) print match . group ( 2 ) print match . groups () groups() ; return a tuple with the substrings corresponding to all subgroups. Output: 1 2 3 4 abcd abc b ( 'abc' , 'b' ) Assign names to subgroup: ?P<w1> and ?P<w2> 1 2 3 4 5 6 7 8 9 import re seq = 'zzabcdzz' pattern = re . compile ( '(?P<w1>a(?P<w2>b)c)d' ) match = pattern . search ( seq ) print match . group ( 0 ) print match . group ( 'w1' ) print match . group ( 'w2' ) Ouput: 1 2 3 abcd abc b More re methods splits(s) ; split the string s at the matches of a regex. sub(r, s, [c]) ; return a new string s where nonoverlapping occurrences of a given pattern in the string are all replaced with the value of r . c , an optional number, stands for the maximum numbers of occurences. subn(r, s, [c]) ; do what sub() does, but returns a tuple of two elements; the first element is the new string (as with sub(r, s, [c]) ) and the second is the number of replacements. Split text and replace separators with a pattern 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import re separator = re . compile ( '\\|' ) # split annotation = 'ATOM:CA|RES:ALA|CHAIN:B|NUMRES:166' columns = separator . split ( annotation ) print columns # replace new_annotation = separator . sub ( '@' , annotation ) print \"replace all |:\" print new_annotation new_annotation2 = separator . sub ( '@' , annotation , 2 ) print \"replace 2 |:\" print new_annotation2 new_annotation3 = separator . subn ( '@' , annotation ) print \"replace all |:\" print new_annotation3 new_annotation4 = separator . subn ( '@' , annotation , 2 ) print \"replace 2 |:\" print new_annotation4 Output: 1 2 3 4 5 6 7 8 9 [ 'ATOM:CA' , 'RES:ALA' , 'CHAIN:B' , 'NUMRES:166' ] replace all | : ATOM : CA @RES : ALA @CHAIN : B @NUMRES : 166 replace 2 | : ATOM : CA @RES : ALA @CHAIN : B | NUMRES : 166 replace all | : ( 'ATOM:CA@RES:ALA@CHAIN:B@NUMRES:166' , 3 ) replace 2 | : ( 'ATOM:CA@RES:ALA@CHAIN:B|NUMRES:166' , 2 ) Find transcription factor binding sites 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import re genome_seq = open ( 'genome.txt' ) . read () # read transcription factor binding site patterns sites = [] for line in open ( 'TFBS.txt' ): fields = line . split () tf = fields [ 0 ] site = fields [ 1 ] sites . append (( tf , site )) # match all TF's to the genome and print matches for tf , site in sites : tfbs_regexp = re . compile ( site ) all_matches = tfbs_regexp . findall ( genome_seq ) matches = tfbs_regexp . finditer ( genome_seq ) if all_matches : print tf , ':' for tfbs in matches : print ' \\t ' , tfbs . group (), tfbs . start (), tfbs . end () Parse abstracts from PubMed HTML pages The script opens the HTML webpage and parses it in order to selectively fetch some parts of it. Extract the title and the abstract text. The title of the paper is enclosed between <h1> and </h1> . Whereas the text of the abstract is enclosed between <h3> Abstract </h3><div class = \"\" ><p> and </p> . The paper. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import urllib2 import re pmid = '18235848' url = 'http://www.ncbi.nlm.nih.gov/pubmed?term= %s ' % pmid handler = urllib2 . urlopen ( url ) html = handler . read () title_regexp = re . compile ( '<h1>.{5,400}</h1>' ) title_text = title_regexp . search ( html ) abstract_regexp = re . compile ( '<AbstractText>.{20,3000}</AbstractText>' ) abstract_text = abstract_regexp . search ( html ) print 'TITLE:' , title_text . group () print 'ABSTRACT:' , abstract_text . group () Output: 1 2 TITLE: < h1 > Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade. </ h1 > ABSTRACT: < AbstractText > Schistosomiasis is a tropical disease associated with high morbidity and mortality, currently affecting over 200 million people worldwide. Praziquantel is the only drug used to treat the disease, and with its increased use the probability of developing drug resistance has grown significantly. The Schistosoma parasites can survive for up to decades in the human host due in part to a unique set of antioxidant enzymes that continuously degrade the reactive oxygen species produced by the host's innate immune response. Two principal components of this defense system have been recently identified in S. mansoni as thioredoxin/glutathione reductase (TGR) and peroxiredoxin (Prx) and as such these enzymes present attractive new targets for anti-schistosomiasis drug development. Inhibition of TGR/Prx activity was screened in a dual-enzyme format with reducing equivalents being transferred from NADPH to glutathione via a TGR-catalyzed reaction and then to hydrogen peroxide via a Prx-catalyzed step. A fully automated quantitative high-throughput (qHTS) experiment was performed against a collection of 71,028 compounds tested as 7- to 15-point concentration series at 5 microL reaction volume in 1536-well plate format. In order to generate a robust data set and to minimize the effect of compound autofluorescence, apparent reaction rates derived from a kinetic read were utilized instead of end-point measurements. Actives identified from the screen, along with previously untested analogues, were subjected to confirmatory experiments using the screening assay and subsequently against the individual targets in secondary assays. Several novel active series were identified which inhibited TGR at a range of potencies, with IC(50)s ranging from micromolar to the assay response limit ( approximately 25 nM). This is, to our knowledge, the first report of a large-scale HTS to identify lead compounds for a helminthic disease, and provides a paradigm that can be used to jump-start development of novel therapeutics for other neglected tropical diseases. </ AbstractText > Search for keywords in a series of PubMed abstracts This example can be applied to perform very simple text mining and can be compared to the \u201cfind\u201d tool in Microsoft Word. It might stop on the first occurence. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import urllib2 import re # word to be searched word_regexp = re . compile ( 'schistosoma' ) # list of PMIDs where we want to search the word pmids = [ '18235848' , '22607149' , '22405002' , '21630672' ] for pmid in pmids : url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid handler = urllib2 . urlopen ( url ) html = handler . read () title_regexp = re . compile ( '<h1>.{5,400}</h1>' ) title = title_regexp . search ( html ) title = title . group () abstract_regexp = re . compile ( '<AbstractText>.{20,3000}</AbstractText>' ) abstract = abstract_regexp . search ( html ) abstract = abstract . group () word = word_regexp . search ( abstract , re . IGNORECASE ) if word : # display title and where the keyword was found print title print word . group (), word . start (), word . end () Circumvent the problem with the finditer() method. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import urllib2 import re # word to be searched word_regexp = re . compile ( 'schistosoma' ) # list of PMIDs where we want to search the word pmids = [ '18235848' , '22607149' , '22405002' , '21630672' ] for pmid in pmids : url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid handler = urllib2 . urlopen ( url ) html = handler . read () title_regexp = re . compile ( '<h1>.{5,400}</h1>' ) title = title_regexp . search ( html ) title = title . group () abstract_regexp = re . compile ( '<AbstractText>.{20,3000}</AbstractText>' ) abstract = abstract_regexp . search ( html ) abstract = abstract . group () words = word_regexp . finditer ( abstract ) if words : # display title and where the keyword was found print title for word in words : print word . group (), word . start (), word . end () Output: 1 2 3 4 < h1 > Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade. </ h1 > < h1 > The redox biology of schistosome parasites and applications for drug development. </ h1 > < h1 > Moonlighting by different stressors: crystal structure of the chaperone species of a 2-Cys peroxiredoxin. </ h1 > < h1 > Investigations of the catalytic mechanism of thioredoxin glutathione reductase from Schistosoma mansoni. </ h1 > More re methods findall() ; look for all (non-overlapping) occurrences of pattern in string; return a list of matches. finditer() ; same as above except returns an iterator instead of a list; for each match, the iterator returns a match object; it is adapted for loops! | ; \u2018OR\u2019. $ ; indicate that a match exists in the string only if the pattern is in the last position of the string. ^ ; indicate that a match exists in the string only if the pattern is in the first position of the string. Python Regex, Characters and Metacharaters Part 3, Modular Programming \u00b6 Chapter 10, Divide a Program into Functions \u00b6 Built-in functions length, total, sum, range len() . sum() . range(n, m, step) ; from n to m-1, n = 0 by default. xrange(n, m, step) ; better suited for big numbers. Define functions docstring, docstrings The documentation is retrieved with the __doc__ attribute: type addition.__doc__ . 1 2 3 4 5 6 7 8 def addition ( arg1 , arg2 ): ''' documentation: calculates the sum of two numbers ''' result = arg1 + arg2 return result print addition ( 1 , 1 ) Lambda functions Small anonymous functions; they are not declared using def . They do not contain return statement. They can be defined in an argument in a function (useful). There are nameless. 1 2 3 4 def f ( x ): return x ** 2 print f ( 8 ) vs 1 2 3 g = lambda x : x ** 2 print g ( 8 ) or 1 ( lambda x : x ** 2 )( 8 ) Use a lambda function as an argument of a built-in function: 1 2 3 4 data = [ 'ASDF' , 'SDFSADGSAG' , 'SDFSD' , 'GSGDGG' ] new_data = sorted ( data , key = lambda x : len ( x )) print new_data Output: 1 [ 'ASDF' , 'SDFSD' , 'GSGDGG' , 'SDFSADGSAG' ] Function Arguments required arguments. keyword arguments. default arguments. variable-length arguments. 1. Required Arguments 1 2 3 4 def print_funct ( num , seq ): print num , seq print_funct ( 10 , \"ABC\" ) Output: 1 10 ABC 2. Keyword Arguments 1 2 3 4 def print_funct ( num , seq ): print num , seq print_funct ( seq = \"ABC\" , num = 10 ) Output: 1 10 ABC 3. Default Arguments sequence The argument is given by default; but can be overwritten! 1 2 3 4 5 def print_funct ( num , seq = \"A\" ): print num , seq print_funct ( 10 , \"ABC\" ) print_funct ( 10 ) Output: 1 2 10 ABC 10 A 4. Variable-Length Arguments argument, list, tuple, dictionary Flexibility of providing any tuple. 1 2 3 4 5 6 def print_args ( * args ): print args print_args ( 1 , 2 , 3 , 4 , 5 ) print_args ( 'Hi' ) print_args ( 100 , 200 , \"ABC\" ) Output: 1 2 3 ( 1 , 2 , 3 , 4 , 5 ) ( 'Hi' ) ( 100 , 200 , 'ABC' ) Provide both the keys and values for a returned dictionary. 1 2 3 4 def print_args2 ( ** args ): print args print_args2 ( num = 100 , num2 = 200 , seq = \"ABC\" ) Output: 1 { 'num' : 100 , 'seq' : 'ABC, ' num2 ': 200} Convert a string into a tuple or vice-versa struct package. In the format, s stands for string, 3s stands for a three-character string. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import struct # pack() method; creates a string format = '2s1s1s1s1s' group = struct . pack ( format , '10' , '2' , '3' , '4' , '5' ) print group # unpack() method; parses the string to a tuple format = '1s2s1s1s' line = '12345' col = struct . unpack ( format , line ) print col # calcsize() returns the number of characters # in a given format string format = '30s30s20s1s' print struct . calcsize ( format ) Output: 1 2 3 102345 ( '1' , '23' , '4' , '5' ) 81 Then, convert the tuple to a list if needed. Function to calculate distance between two coordinates power math package. pow(x, y) replaces x ** y . distance package; geometric calculations. calc-dist() . 1 2 3 4 5 6 7 8 9 10 11 12 from math import sqrt def calc_dist ( p1 , p2 ): '''returns the pythagorian distance between two 3D points''' dx = p1 [ 0 ] - p2 [ 0 ] dy = p1 [ 1 ] - p2 [ 1 ] dz = p1 [ 2 ] - p2 [ 2 ] distsq = pow ( dx , 2 ) + pow ( dy , 2 ) + pow ( dz , 2 ) distance = sqrt ( distsq ) return distance print calc_dist ([ 3.0 , 3.0 , 3.0 ], [ 9.0 , 9.0 , 9.0 ]) Output: 1 10.3923048454 Chapter 11 Managing Complexity with Classes \u00b6 Classes Define a Class: class Protein . Add docstrings. The constructor __init__() is a special function that defines what kinds of data your class should contain and enables the creation of instances. Add a docstring. One class can have many instances. lys = Protein('lysozyme') is an instance of class Protein . Create a class function; a class function works like a method. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Protein : '''Class storing protein names''' def __init__ ( self , name ): '''Sets the name of a protein''' self . name = name def write ( self ): '''Writes protein name to the screen.''' print 'I am ' + self . name lys = Protein ( 'lysozyme' ) myo = Protein ( 'myoglobin' ) print \"Docstrings:\" print Protein . __doc__ print Protein . __init__ . __doc__ print Protein . write . __doc__ print \"\" print lys . name print myo . name lys . write () # a class function works like a method myo . write () Output: 1 2 3 4 5 6 7 8 9 Docstrings : Class storing protein names Sets the name of a protein Writes protein name to the screen . lysozyme myoglobin I am lysozyme I am myoglobin Printing a object created from a class Printing an object from a class is not very informative. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Pea : def __init__ ( self , genotype ): self . genotype = genotype class PeaStrain : def __init__ ( self , peas ): self . peas = peas yellow = Pea ( 'GG' ) green = Pea ( 'gg' ) strain = PeaStrain ([ yellow , green ]) print Pea print PeaStrain print Pea . __init__ print PeaStrain . __init__ print yellow print green print strain Output: 1 2 3 4 5 6 7 8 __main__ . Pea __main__ . PeaStrain < unbound method Pea . __init__ > < unbound method PeaStrain . __init__ > < __main__ . Pea instance at 0x0000000001DC6748 > < __main__ . Pea instance at 0x0000000001DC6748 > < __main__ . Pea instance at 0x000000000216BE08 > < __main__ . PeaStrain instance at 0x000000000216BE48 > __repr__ fixes this problem. The __repr__ method takes no parameters except self. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Pea : def __init__ ( self , genotype ): self . genotype = genotype def __repr__ ( self ): return 'genotype: [ %s ]' % ( self . genotype ) class PeaStrain : def __init__ ( self , peas ): self . peas = peas def __repr__ ( self ): return 'strain with %i peas' % ( len ( self . peas )) yellow = Pea ( 'GG' ) green = Pea ( 'gg' ) strain = PeaStrain ([ yellow , green ]) print Pea print PeaStrain print Pea . __init__ print PeaStrain . __init__ print yellow print repr ( yellow ) print repr ( green ) print repr ( strain ) New output: 1 2 3 4 5 6 7 8 __main__ . Pea __main__ . PeaStrain < unbound method Pea . __init__ > < unbound method PeaStrain . __init__ > genotype : [ GG ] genotype : [ GG ] genotype : [ gg ] strain with 2 peas No difference between print yellow and print repr(yellow) . Objects\u2019 predefined class attributes: __doc__ : the docstring. __dict__ : a list of attributes. __name__ : the name of the object. __bases__ : the object inherits from what object. For example, above, the PeaStrain class inherits from the Pea class. Classes (subclasses) can inherit from other classes and extend their functionality. __module__ : the name of the module in which this class was defined. __main__ means the object is in the current module. A python script can be imported just like a package: import Protein . from Protein import write . import math . from math import sqrt . Synonyms: packages, library, module, script, etc. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Pea : '''docstring 1''' def __init__ ( self , genotype ): self . genotype = genotype def __repr__ ( self ): return 'genotype: [ %s ]' % ( self . genotype ) yellow = Pea ( 'GG' ) print yellow print Pea . __doc__ print Pea . __dict__ print Pea . __name__ print Pea . __bases__ print Pea . __module__ print \"\" class Peaclone ( Pea ): '''docstring 2''' blue = Peaclone ( 'AA' ) print blue print Peaclone . __doc__ print Peaclone . __dict__ print Peaclone . __name__ print Peaclone . __bases__ print Peaclone . __module__ Output: 1 2 3 4 5 6 7 8 9 10 11 12 13 genotype : [ GG ] docstring 1 { '__module__' : '__main__' , '__doc__' : 'docstring 1' , '__init__' : < function __init__ at 0x000000000229FC18 > , '__repr__' : < function __repr__ at 0x000000000229FC88 > } Pea () __main__ genotype : [ AA ] docstring 2 { '__module__' : '__main__' , '__doc__' : 'docstring 2' } Peaclone ( < class __main__ . Pea at 0x0000000001D3C828 > ,) __main__ More attributes: __del__ . __getattr__ . __setattr__ . __delattr__ . Chapter 12, Debugging \u00b6 bug Kinds of errors: Logical errors. Syntax errors. Runtime errors. IDE (Eric, PyCharm, etc.) automate debugging. 1. Logical (semantic) errors Results are wrong because the program does something different from what you had in mind. 2. Syntax errors Wrong symbol, mispelling, wrong position in the code, etc.. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def evaluate_data ( data , lower = 100 , upper = 300 ): \"\"\"Analyze a two-column table. Counts data points in three bins.\"\"\" smaller = 0 between = 0 bigger = 0 for length in data : if length < lower : smaller = smaller + 1 elif lower < length < upper : between = between + 1 elif length > upper : bigger = 1 return smaller , between , bigger def read_data ( filename ): \"\"\"Reads neuron lengths from a text file.\"\"\" primary , secondry = [], [] for line in open ( filename ): category , length = line . split ( \" \\t \" ) length = float ( length ) if category == \"Primary\" primary . append ( length ) elif category == \"Secondary\" : secondary . append ( length ) return primary , secondary def write_output ( filename , count_pri , count_sec ): \"\"\"Writes counted values to a file.\"\"\" output = open ( filename , \"w\" ) output . write ( \"category <100 100-300 >300 \\n \" ) output . write ( \"Primary : %5i %5i %5i \\n \" % count_pri ) output . write ( \"Secondary: %5i %5i %5i \\n \" % count_sec ) output . close () primary , secondary = read_data ( 'neuron_data.xls' ) count_pri = evaluate_data ( primary ) count_sec = evaluate_data ( secondary ) write_output_file ( 'results.txt' , count_pri , count_sec ) Bug 1 1 if category == \"Primary\" Cause: SyntaxError : invalid syntax . Fix: 1 if category == \"Primary\" : Other common SyntaxErrors : EOL or End Of Line; an open quote somewhere without a matching closing quote. TokenError ; an open parenthesis, but not a matching closing parenthesis. etc. Bug 2 1 write_output_file ( 'results.txt' , count_pri , count_sec ) Cause: NameError : name 'write_output_file' is not defined . Fix: 1 2 3 4 5 file = open ( 'results.txt' , 'w' ) file . write ( str ( count_pri )) file . write ( ' \\n ' ) file . write ( str ( count_sec )) file . close () 3. Runtime Error IOError 1 primary , secondary = read_data ( 'neuron_data.xls' ) Cause: IOError: [Errno21] No such file or directory: 'neuron_data.xls' Fix: the file extention is .txt. Other common bugs and causes: Mispelled files, directory name. Wrong website URL. User without the permission or access. The file is already opened. Problem with the Internet connection. Whitespace, uppercase, lowercase letters. File in a different directory. Expected date format. etc. NameError 1 2 3 4 primary , secondry = [], [] ... ... elif category == \"Secondary\" : Cause: NameError: 'secondary' is not defined . The \u2018name\u2019 was misspelled when called. Fix: add the line print dir() before the errors occurs. It shows the list of variables that are known. In the above case, only secondry exits while secondary is called. Choose one. Other common bugs and causes: Unknown object name: a name was not imported ( import * ). a name was not initialized (as in counter = 0 for counter += 1 ). IndexError Cause and fix: when print data[3] looks into data = [1, 2, 3] , the list index is out of range. KeyError 1 2 spam = { 'cat' : 'Zophie' , 'dog' : 'Basil' , 'mouse' : 'Whiskers' } print ( 'The name of my pet zebra is ' + spam [ 'zebra' ]) Cause and fix: the key does not exist! ImportError Causes and fixes: The imported module name is mispelled. The imported module is located in a subdirectory without an __init__.py file. Try adding import sys and print sys.path; you need to add the directory to the PYTHONPATH variable or to append it to the sys.path. The imported module has a duplicate name (two functions with the same name; try working with classes to avoir that). ValueError Cause and fix: when an object is loaded with a wrong type to perform another operation; variable range_a should be a number for the loop for a in range(range_a): , but a string is given instead. Other common bugs and causes: IndentationError : unexpected indent , IndentationError : unindent does not match any outer indentation level , and IndentationError : expected an indented block . TypeError Cause and fix: an object does not support item assignment. 1 2 spam = 'I have a pet cat.' spam [ 13 ] = 'r' Cause: cannot convert implicitly an object. 1 2 numEggs = 12 print ( 'I have ' + numEggs + ' eggs.' ) Fix: 1 2 numEggs = 12 print ( 'I have ' + str ( numEggs ) + ' eggs.' ) Cause: an object is misinterpreted (for another object). 1 2 3 spam = [ 'cat' , 'dog' , 'mouse' ] for i in range ( spam ): print ( spam [ i ]) Fix: for i in spam: . AttributeError Cause and fix: apply the right method. 1 2 spam = 'THIS IS IN LOWERCASE.' spam = spam . lowerr () UnboundLocalError Cause and fix: a variable is referenced before assignment. Countermeasures to prevent errors Break down the code in parts; print to a file using python code.py > output.txt . Compare the input and output (print the input data, print the output data, create control points). Add lots of print statements within the code as control points, Use descriptive and explicit object names ( sequence_file is better than s_file ). Start function with verbs ( read_sequence_file is better than seq_file ). Add comments. Avoid import * , but rather from math import pi . Follow PEP8 and PEP20! pylint and flake8 packages. IDE (Eric, PyCharm, Spyder, etc.) automate debugging and easily execute pylint and flake8 . A note on raw_input() and input() python2, python3, py2, py3 In Python 2, raw_input() takes exactly what the user typed and passes it back as a string. input() takes the raw_input() and performs an eval() on it as well. input() expects a syntactically correct python statement where raw_input() does not. The eval() function run the code within itself: 1 2 3 4 5 >>> x = 1 >>> eval ( 'x + 1' ) 2 >>> eval ( 'x' ) 1 In Python 3, raw_input() is renamed to input() and the old input() is removed. If you want to use the old input() , you can do eval(input()) . Countermeasures to prevent errors: the Python debugger or pdb pdb package. 1 2 3 4 # on top of the code import pdb pdb . set_trace () The code is executed line by line: \u2018n\u2019 execute the next line. \u2018s\u2019 execute the next line but does not descend into functions. \u2018l\u2019 shows where in the code the program currently is. \u2018c\u2019 continues execution normally. Countermeasurea to prevent errors: try, except 1 2 3 4 5 6 try : a = float ( raw_input ( \"Insert a number:\" )) print a except ValueError : print \"You haven't inserted a number. Please retry.\" raise SystemExit else is optional and only executed if no exception was generated. 1 2 3 4 5 6 7 8 9 10 try : filename = raw_input ( \"Insert a filename:\" ) in_file = open ( filename ) except IOError : print \"The filename %s has not been found.\" % filename raise SystemExit else : for line in in_file : print line in_file . close () Usually, exceptions are typos and wrong entries: SyntaxError . IOError . NameError . ValueError . Rarely will we see: IndexError . KeyError . ImportError . TypeError . AttributeError . UnbounLocalError . Chapter 13, Using External Modules, The Python Interface to R \u00b6 RPy2 package; bridge Python with R. The R code: 1 2 3 4 5 6 7 8 p = pi x = c ( 1 , 2 , 3 , 4 , 5 , 6 ) y = seq ( 1 , 10 ) m = matrix ( y , nrow = 5 ) n = matrix ( y , ncol = 5 ) f = read.table ( 'RandomDistribution.tsv' , sep = '\\t' ) f_matrix = matrix ( f , ncol = 7 ) mean_first_col = mean ( f_mean [ 0 ]) The Python code: 1 2 3 4 5 6 7 8 9 10 11 12 import rpy2.reobjects as robjects r = robjects . r pi = r . pi x = r . c ( 1 , 2 , 3 , 4 , 5 , 6 ) y = r . seq ( 1 , 10 ) m = r . matrix ( y , nrow = 5 ) n = r . matrix ( y , ncol = 5 ) f = r ( \"read.table('RandomDistribution.tsv', sep = ' \\t ')\" ) f_matrix = r . matrix ( f , ncol = 7 ) mean_first_col = r . mean ( f_mean [ 0 ]) - Python is better suited to implement solutions by building GUIs or freezing the code. - Rpy2 is the best of both worlds: - R statistical analyses and data visualization. - Python computation power with SciPy/NumPy/Pandas. Calculate a mean value from a table file 1 2 3 4 5 6 7 import rpy2.robjects as robjects r = robjects . r table = r ( \"read.table('RandomDistribution.tsv', sep = ' \\t ')\" ) matrix = r . matrix ( table , ncol = 7 ) mean_first_col = r . mean ( matrix [ 0 ]) print mean_first_col Draw a histogram 1 2 3 4 5 6 7 8 9 10 11 12 13 import rpy2.robjects as ro from rpy2.robjects.packages import importr r = ro . r table = r ( \"read.table('RandomDistribution.tsv',sep = ' \\t ')\" ) grdevices = importr ( 'grDevices' ) grdevices . png ( file = \"Plot.png\" , width = 512 , height = 512 ) r . plot ( table [ 1 ], table [ 2 ], xlab = \"x\" , ylab = \"y\" ) grdevices . dev_off () grdevices . png ( file = \"Histogram.png\" , width = 512 , height = 512 ) r . hist ( table [ 4 ], xlab = 'x' , main = 'Distribution of values' ) grdevices . dev_off () Calculate a z-score and a p-value 1 2 3 4 5 6 7 8 9 10 11 12 13 import rpy2.robjects as ro r = ro . r table = r ( \"read.table('RandomDistribution.tsv',sep = ' \\t ')\" ) m = r . mean ( table [ 2 ], trim = 0 , na_rm = 'FALSE' ) sdev = r . sd ( table [ 2 ], na_rm = 'FALSE' ) value = 0.01844 zscore = ( m [ 0 ] - value ) / sdev [ 0 ] print zscore x = r . abs ( zscore ) pvalue = r . pnorm ( - x [ 0 ]) print pvalue [ 0 ] Create an interactive plot and histogram from data in a file 1 2 3 4 5 6 import rpy2.robjects as robjects r = robjects . r table = r ( \"read.table('RandomDistribution.tsv', sep = ' \\t ')\" ) r . plot ( table [ 1 ], table [ 2 ], xlab = \"x\" , ylab = \"y\" ) r . hist ( table [ 4 ], xlab = 'x' , main = 'Distribution of values' ) Create an interactive plot 1 2 3 4 import rpy2.robjects as ro r = ro . r r . plot ( r . pnorm ( 100 ), xlab = \"y\" , ylab = \"y\" ) Conduct a chi-square test on data from a text file 1 2 3 4 5 6 7 8 9 import rpy2.robjects as ro r = ro . r table = r ( \"read.table('Chi-square_input.txt', header = TRUE, sep = ' \\t ')\" ) print r . names ( table ) cont_table = r . table ( table [ 1 ], table [ 2 ]) chitest = r [ 'chisq.test' ] print chitest ( table [ 1 ], table [ 2 ]) Chapter 14, Building Program Pipelines \u00b6 os package. sys package. Programs can work together with Python Create path and file variables. Create command line. Execute commands from the command line (as if you did it with a mouse and keyboard) with os.system . REF: Appendix D. 1 2 3 4 5 6 7 8 import os output_dir = '/home/RNA-seq/tophat_dir/' output_file = 'accepted_hits.txt' command_line = 'pgm -o %s%s ' % ( output_dir , output_file ) os . system ( command_line ) Command lines in Python UNIX to Python: UNIX pwd ; print os.getcwd() . UNIX ls ; print os.listdir('.') . UNIX cd ; os.chdir('../data/') . UNIX mkdir ; os.mkdir() . UNIX rmdir ; os.rmdir() . and many more. Pipelines Pipeline are scripts connecting programs to each other (run two or more external programs from command lines). A program that runs another program is a wrapper . Exchange filenames and data between programs. sys.argv ; Python program sorted parameters. import sys ; access or print them. 1 2 3 4 5 6 7 8 9 10 11 import sys import os sys . path . append ( '/home/RNA-seq/' ) from pathvariables import tophat_dir , index_dir if os . path . exists ( tophat_dir ) and os . path . exists ( index_dir ): os . system ( 'tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt' ) else : print \"You have to create tophat and/or index directories before running your wrapper\" One problem with pipelines is lagging. The system call of the second program should occur when the execution of the first program has finished, especially if the second one uses as input the output of the first one. Use subprocesses, such as os.popen() or subprocess.call() , to wait for the command to complete and return a value corresponding to the program exit status (0 for success, 256 for failure) A more robust trick is to insert an action and verify its success after a system call and before the subsequent system call. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import sys import os from pathvariables import tophat_dir , index_dir , cufflinks_dir sys . path . append ( '/home/RNA-seq/' ) from pathvariables import tophat_dir , index_dir , cufflinks_dir # the tophat program crates an output file os . system ( 'tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt' ) # here we don't know whether the tophat output file is comleted and available # we open and close a dummy file, so the operating system catches up lag_file = open ( 'dummy.txt, ' w ') lag_file . write ( 'tophat completed' ) lag_file . close () # read the output file if os . path . exists ( '/home/RNA-seq/dummy.txt' ): os . system ( 'cufflinks -o ' + cufflinks_dir + ' ' + tophat_dir + '/accepted_hits.txt' ) Attributes print dir() ; Visualize attributes. Some attributes are module-specific, such as locatime, whereas others refer to modules in general: __file__ ; return the path of the module. __doc__ ; return the module documentation, if present. __name__ ; return the name of the imported file without the .py suffix if the module is imported and the string '__main__' is executed. Execute <statements> only if the module is run from the command line and not imported by means of an import statement: 1 2 if __name__ == '__main__' : < statements > Working with files and directories os.path package. os.path.split(filename) ; split a filename from the directory names. os.path.exists(filename) ; verify if the file exists, return True or False. Export the path In Windows, add the path to the PATH environment variables. In PowerShell: $ env : PYTHONPATH = \"$env:PYTHONPATH;.\" In UNIX, enter in the bash: export PYTHONPATH=. or add PYTHONPATH=. . In a Python code, add to the beginning of the script: 1 2 3 import sys sys . path . append ( '.' ) # '/var/www/' Or with sys.path.append('pathmodules/') . Read files from directories 1 2 3 4 import os for filename is os . listdir ( 'data/' ): os . system ( '<my_program> %s ' % ( filename )) os.remove('log.txt') ; remove files. tempfile package; create temporary files. Chapter 15, Writing Good Programs \u00b6 Priorities Make it work. Make it nice. Make if fast. Tips Divide a programming project into smaller tasks. What are the inputs? What are the outputs? What is between them? Write smaller programs; split a program into functions and classes. Analyze and run tests. Adopt PEP. Scaffold before writing a functional program: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def read_files ( directory ): ''' Reads a... ''' pass def filter ( sequences ): ''' Removes all... ''' pass ... if __name == '__main__' : INPUT_DIR = 'aaa/' OUTPUT_FILE = 'filtered.txt' seq = read_files ( INPUT_DIR ) filter ( seq ) ... Adopt PEP Variables in functions in lowercase. Constants in modules in uppercase. A function name starts with a verb. After each function, two empty lines. After each logical chunks of long functions, one empty line. Comment. Keep lines shorter than 80 characters long. Each class, function, and variable has a docstring; docstrings can be read with print object.__doc__ . Enforce PEP pylint package. pylint is a Python source code analyzer which looks for programming errors, helps enforcing a coding standard and sniffs for some code smells. Download an install pylint. Or install it with pip . Doc Run pylint python_file.py . flake8 package. flake8 is a modular source code checker (a wrapper ). It works with pep8 , pyflakes , pycodestyle , and so on. Version controls Use version control programs (Mercurial, git, SVN). Use repository (GitHub, Bitbucket) to control program versions. GitHub Bitbucket SourceForce Gitlab and others. Before releasing (to a repository) Create a directory with a concise name containing all the project. Set a version number (0.1 or 1.0). Write a README.TXT file with the name of the program, the author, contacts, numbers, emails, a version number, the program purpose in 50-100 words, how to use the program, simple command-line examples, the license (\u201cAll rights reserved\u201d, MIT, etc.) Create a zip file out of the directory including the README.TXT file in addition to the unzipped directory. Release the project on a repository (for example, with git, push the project to the repository). Releasing a distribution Release a distribution to a repository for others to download and install. Freezing a program Non-programmer would rather want an execuble program they can unzip and run. Compile the code or freeze it! cx_freeze is a set of utilities that create standalone executables from python scripts for any platform or OS. i. There are alternatives to \u2018cx_freeze\u2019 such as bbfreeze . pyinstaller is a simpler alternative (it is not as flexible as cx_freeze but it can create single files). distutils is a Python package that provides support for building and installing additional modules (libraries or packages) into a Python installation. The new modules may be either 100%-pure Python, written in C, or coded in both Python and C. distutils autogenerates an install script. i. Such distribution needs a setup.py file with the group of subdirectories and program files. i. py2exe is an extension to the distutils package to create executable files on Windows. i. py2app is an extension to the distutils packages to create executable files on OS X. nuitka is a Python compiler, compatible with CPython. i. CPython is a source code interpreter with an interface with several languages, including C, in which one must explicitly write bindings in a language other than Python. pypy is an alternative to nuitka . Cython is a compiled language that generates CPython extension modules. Jython does the same, but in Java. Continuous improvement A good program is never finished: Create a baseline release. Update and release new versions. Tell the users what is new. Listen to users, improve on it. Go on programming. Software development The Agile Manifesto. Methodologies: Scrum, eXtreme Programming, etc. Part 4, Data Visualization \u00b6 Chapter 16, Creating Scientific Diagrams \u00b6 matplotlib package. Pillow or PIL package. Tip: install the entire SciPy Stack: (Python (2.x >= 2.6 or 3.x >= 3.2), NumPy (>= 1.6), SciPy library (>= 0.10), Matplotlib (>= 1.1) with dateutil and pytz, IPython (>= 0.13) with pyzmq and tornado, pandas (>= 0.8), Sympy (>= 0.7), nose (>= 1.1). Matplotlib depends on Pillow for reading and saving JPEG, BMP, and TIFF image files. Matplotlib requires MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are required for the animation module. Add nose , mock , and Inkscape. Draw a simple line plot Provide (x, y) points. figure() ; main function is plot() . savefig() ; save the plot in a file. show() ; show the plot in a window. 1 2 3 4 5 6 7 8 9 from pylab import figure , plot , savefig xdata = [ 1 , 2 , 3 , 4 ] ydata = [ 1.25 , 2.5 , 5.0 , 10.0 ] figure () plot ( xdata , ydata ) savefig ( 'figure1.png' ) Result: Plot a sine function Generate (x, y) points; first the x ; then generate the y with the x . plot() with a line type 'kd' and linewidth = 1 . 1 2 3 4 5 6 7 8 9 10 11 12 13 from pylab import figure , plot , text , axis , savefig import math figure () xdata = [ 0.1 * i for i in range ( 100 )] ydata = [ math . sin ( j ) for j in xdata ] plot ( xdata , ydata , 'kd' , linewidth = 1 ) text ( 4.8 , 0 , \"$y = sin(x)$\" , horizontalalignment = 'center' , fontsize = 20 ) axis ([ 0 , 3 * math . pi , - 1.2 , 1.2 ]) savefig ( 'sinfunc.png' ) Result: Draw a histogram Provide the (x, y) points in lists, and the number of bins. hist() needs data points and n_bins . alpha stands for the graph color transparency. Add a title, labels, axes, and gridlines. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from pylab import figure , title , xlabel , ylabel , hist , axis , grid , savefig data = [ 1 , 1 , 9 , 1 , 3 , 5 , 8 , 2 , 1 , 5 , 11 , 8 , 3 , 4 , 2 , 5 ] n_bins = 5 figure () num , bins , patches = hist ( data , n_bins , normed = 1.0 , histtype = 'bar' , facecolor = 'green' , alpha = 0.75 ) title ( 'Histogram' ) xlabel ( 'value' ) ylabel ( 'frequency' ) axis () grid ( True ) savefig ( 'histogram.png' ) Result: Draw a bar plot count : two series, x1 and x2 with each four categories, nucleotides . Add a title, labels, axes and ticks to the axes, and a legend. xticks(x1, nucleotides) , where the first element is the list of x points and the second element is the label variable. legend() takes the labels of all data sets that are plotted. axis() is set with a list [from left to right, bottom, and top]. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from pylab import figure , title , xlabel , ylabel , xticks , bar , legend , axis , savefig nucleotides = [ \"A\" , \"G\" , \"C\" , \"U\" ] counts = [ [ 606 , 1024 , 759 , 398 ], [ 762 , 912 , 639 , 591 ], ] figure () title ( 'RNA nucleotides in the ribosome' ) xlabel ( 'RNA' ) ylabel ( 'base count' ) x1 = [ 2.0 , 4.0 , 6.0 , 8.0 ] x2 = [ x - 0.5 for x in x1 ] xticks ( x1 , nucleotides ) bar ( x1 , counts [ 1 ], width = 0.5 , color = \"#cccccc\" , label = \"E.coli 23S\" ) bar ( x2 , counts [ 0 ], width = 0.5 , color = \"#808080\" , label = \"T.thermophilus 23S\" ) legend () axis ([ 1.0 , 9.0 , 0 , 1200 ]) savefig ( 'barplot.png' ) Result: Add error bars to a scatterplot or a bar chart errorbar() . bar() . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from pylab import figure , errorbar , bar , savefig figure () # scatterplot with error bars x1 = [ 0.1 , 0.3 , 0.5 , 0.6 , 0.7 ] y1 = [ 1 , 5 , 5 , 10 , 20 ] err1 = [ 3 , 3 , 3 , 10 , 12 ] errorbar ( x1 , y1 , err1 , fmt = 'ro' ) # barplot with error bars x2 = [ 1.1 , 1.2 , 1.3 , 1.4 , 1.5 ] y2 = [ 10 , 15 , 10 , 15 , 17 ] err2 = ( 2 , 3 , 4 , 1 , 2 ) width = 0.05 bar ( x2 , y2 , width , color = 'r' , yerr = err2 , ecolor = \"black\" ) savefig ( 'errorbars.png' ) Result: Draw a pie chart with protruding slices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from pylab import figure , title , pie , savefig nucleotides = 'G' , 'C' , 'A' , 'U' count = [ 1024 , 759 , 606 , 398 ] explode = [ 0.0 , 0.0 , 0.05 , 0.05 ] colors = [ \"#f0f0f0\" , \"#dddddd\" , \"#bbbbbb\" , \"#999999\" ] def get_percent ( value ): '''Formats float values in pie slices to percent.''' return \" %4.1f%% \" % ( value ) figure ( 1 ) title ( 'nucleotides in 23S RNA from T.thermophilus' ) pie ( count , explode = explode , labels = nucleotides , shadow = True , colors = colors , autopct = get_percent ) savefig ( 'piechart.png' , dpi = 150 ) Result: It is possible to use math symbols, subscripts, and superscripts in the strings: xlabel('protein concentration [mM]') . xlabel('protein concentration [$\\muM$]') . It is possible to use placeholder for variables such as: \"4.1f%%\" % (variable) . \"2i%\" % (variable) . etc. The %% stands for percentage. Change the image file resolution (dpi = 100 or 150 or 300 or 600) as in savefig('chart.png', dpi=150) . Colors are based on the PIL library. PIL has 140 colors (X11 color names) such as: 'red' , 'lightred' , 'magenta' , etc. in RGB, red is (255, 0, 0) . white is (255, 255, 255) or '#ffffff' . \u2018black\u2019 is (0, 0, 0) or '#000000' . etc. The X11 color names . Chapter 18, Manipulating Images \u00b6 Pillow or PIL package. Paste a small image into a big one 1 2 3 4 5 6 7 from PIL import Image image = Image . open ( 'color.png' , 'r' ) label = Image . open ( 'label.png' , 'r' ) # small legend image . paste ( label , ( 40 , 460 )) image . save ( 'combined.png' ) Result: Resizes a big image to a small one 1 2 3 4 5 6 from PIL import Image image = Image . open ( 'big.png' ) small = image . resize (( 100 , 100 )) small . save ( 'small.png' ) Result: Converts a color to a black/white image 1 2 3 4 5 6 7 from PIL import Image image = Image . open ( 'color.png' , 'r' ) bw_image = Image . new ( 'LA' , image . size , ( 255 , 255 )) bw_image . paste ( image , ( 0 , 0 )) bw_image . save ( 'black_white.png' ) Result: Diminishes the size of all .png files by half 1 2 3 4 5 6 7 8 9 10 from PIL import Image import os for filename in os . listdir ( '.' ): if filename . endswith ( '.png' ): im = Image . open ( filename ) x = im . size [ 0 ] / 2 y = im . size [ 1 ] / 2 small = im . resize (( x , y )) small . save ( 'small_' + filename ) For os.listdir('.') , consult Chapter 14, Building Program Pipelines, Command lines in Python . Draw an image of a plasmid Use constant variable: PLASMID_LENGTH = 4361 is the total number of base pairs in the entire plastmid, SIZE = (500, 500) is the size of the entire image, CENTER = (250, 250) is the center point of the plasmid circle, the center of the image. Create an image: pBR322 = Image.new('RGB', SIZE, 'white') . 'RGB' color scheme, SIZE = (x, y) size in pixels, 'white' set the background color. Draw object pBR322 : DRAW = ImageDraw.Draw(pBR322) . The image object is now in object DRAW . Finally, save the object: pBR322.save('plasmid_pBR322.png') . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 from PIL import Image , ImageDraw import math PLASMID_LENGTH = 4361 SIZE = ( 500 , 500 ) CENTER = ( 250 , 250 ) pBR322 = Image . new ( 'RGB' , SIZE , 'white' ) DRAW = ImageDraw . Draw ( pBR322 ) def get_angle ( bp , length = PLASMID_LENGTH ): \"\"\"Converts base position into an angle.\"\"\" return bp * 360 / length def coord ( angle , center , radius ): \"\"\"Return (x, y) coordinates of a point in a circle.\"\"\" rad = math . radians ( 90 - angle ) x = int ( center [ 0 ] + math . sin ( rad ) * radius ) y = int ( center [ 1 ] + math . cos ( rad ) * radius ) return x , y def draw_arrow_tip ( start , direction , color ): \"\"\"Draws a triangle at the given start angle.\"\"\" p1 = coord ( start + direction , CENTER , 185 ) p2 = coord ( start , CENTER , 160 ) p3 = coord ( start , CENTER , 210 ) DRAW . polygon (( p1 , p2 , p3 ), fill = color ) TET_START , TET_END = get_angle ( 88 ), get_angle ( 1276 ) AMP_START , AMP_END = get_angle ( 3293 ), get_angle ( 4153 ) ORI_START , ORI_END = get_angle ( 2519 ), get_angle ( 3133 ) # drawing the plasmid BOX = ( 50 , 50 , 450 , 450 ) DRAW . pieslice ( BOX , 0 , 360 , fill = 'gray' ) DRAW . pieslice ( BOX , TET_START , TET_END , fill = 'blue' ) DRAW . pieslice ( BOX , AMP_START , AMP_END , fill = 'orange' ) DRAW . pieslice ( BOX , ORI_START , ORI_END , fill = 'darkmagenta' ) DRAW . pieslice (( 80 , 80 , 420 , 420 ), 0 , 360 , fill = 'white' ) draw_arrow_tip ( TET_END , 10 , 'blue' ) draw_arrow_tip ( AMP_START , - 10 , 'orange' ) draw_arrow_tip ( ORI_START , - 10 , 'darkmagenta' ) pBR322 . save ( 'plasmid_pBR322.png' ) Result: Drawings Image extensions: BMP; simple table of pixels. PNG; preserves the color of every single pixel; can be partially transparent. GIF; can be animated; similar to PNG. JPG; compressed format, blurred. TIF; bigger and more precise than PNG. image = Image.open('color.png', 'r') ; read the object. Write points: point = (100, 100) ; with tuples (x, y); x pixels from the left border, y pixels from the top of the image. Write rectangles BOX = (100, 100, 150, 150) ; with tuple (x, y, x\u2019, y\u2019); BOX becomes a constant. DRAW.rectangle(BOX, fill = 'lightblue', outline = 'black') Draw circles inside \u2018guidelines\u2019 or a rectangle: DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = 'grey') . DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = (0, 0, 0)) . DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = '#ffffff') . BOX = (50, 50, 450, 450) DRAW.pieslice(BOX, 0, 360, fill = 'grey', outline = 'black') DRAW.pieslice(BOX, 7, 106, fill = 'blue') Draw an arc: DRAW.arc(BOX, 0, 360, fill = 'black') Draw a polygon: DRAW.polygon((point1, point2, point3) fill = 'lightblue', outline = 'blue') Draw a line: ECOR1 = angle(4359) p1 = coord(ECOR1, CENTER, 160) p1 = coord(ECOR1, CENTER, 210) DRAW.line((p1, p2), fill = 'black', width = 3) Rotate the image: pBR322 = pBR322.rotate(45) Add text: DRAW.text((370, 240), \"EcoR1\", fill = \"black\") Draw an image of a plasmid and label it 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 from PIL import Image , ImageDraw import math PLASMID_LENGTH = 4361 SIZE = ( 500 , 500 ) CENTER = ( 250 , 250 ) pBR322 = Image . new ( 'RGB' , SIZE , 'white' ) DRAW = ImageDraw . Draw ( pBR322 ) def get_angle ( bp , length = PLASMID_LENGTH ): \"\"\"Converts base position into an angle.\"\"\" return bp * 360 / length def coord ( angle , center , radius ): \"\"\"Return (x, y) coordinates of a point in a circle.\"\"\" rad = math . radians ( 90 - angle ) x = int ( center [ 0 ] + math . sin ( rad ) * radius ) y = int ( center [ 1 ] + math . cos ( rad ) * radius ) return x , y def draw_arrow_tip ( start , direction , color ): \"\"\"Draws a triangle at the given start angle.\"\"\" p1 = coord ( start + direction , CENTER , 185 ) p2 = coord ( start , CENTER , 160 ) p3 = coord ( start , CENTER , 210 ) DRAW . polygon (( p1 , p2 , p3 ), fill = color ) TET_START , TET_END = get_angle ( 88 ), get_angle ( 1276 ) AMP_START , AMP_END = get_angle ( 3293 ), get_angle ( 4153 ) ORI_START , ORI_END = get_angle ( 2519 ), get_angle ( 3133 ) # drawing the plasmid BOX = ( 50 , 50 , 450 , 450 ) DRAW . pieslice ( BOX , 0 , 360 , fill = 'gray' ) DRAW . pieslice ( BOX , TET_START , TET_END , fill = 'blue' ) DRAW . pieslice ( BOX , AMP_START , AMP_END , fill = 'orange' ) DRAW . pieslice ( BOX , ORI_START , ORI_END , fill = 'darkmagenta' ) DRAW . pieslice (( 80 , 80 , 420 , 420 ), 0 , 360 , fill = 'white' ) draw_arrow_tip ( TET_END , 10 , 'blue' ) draw_arrow_tip ( AMP_START , - 10 , 'orange' ) draw_arrow_tip ( ORI_START , - 10 , 'darkmagenta' ) DRAW . text (( 150 , 130 ), \"ori\" , fill = ( 0 , 0 , 0 )) DRAW . text (( 340 , 130 ), \"amp\" , fill = ( 0 , 0 , 0 )) DRAW . text (( 300 , 380 ), \"tet\" , fill = ( 0 , 0 , 0 )) pBR322 . save ( 'plasmid_pBR322.png' ) Result: Part 6, Cookbook \u00b6 Recipe 2, Reversing and Randomizing a Sequence \u00b6 sort, reverse, random, probability, list, loop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 seq = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' print ( seq ) seq_list = list ( seq ) seq_list . reverse () rev_seq = '' . join ( seq_list ) print ( rev_seq ) print ( \"=\" * 25 ) # reverse a sequence, using a loop # rev_seq = '' rev_seq = '' for s in reversed ( seq ): rev_seq = rev_seq + s print ( rev_seq ) print ( \"=\" * 25 ) # reverse a sequence, using seq[start:end:step] rev_seq = seq [: - 1 ] print ( rev_seq ) print ( \"=\" * 25 ) # mixing a sequence import random ran_seq = random . sample ( seq , len ( seq )) print ( ran_seq ) ran_seq = '' . join ( random . sample ( seq , len ( seq ))) print ( ran_seq ) ran_seq = '' . join ( random . sample ( seq , len ( seq ) - 10 )) print ( ran_seq ) print ( \"=\" * 25 ) # mixing a sequence (using random again) ran_seq = '' . join ([ random . choice ( seq ) \\ for x in range ( len ( seq ))]) print ( ran_seq ) print ( \"=\" * 25 ) # shuffle a sequence (using random again) data = list ( seq ) random . shuffle ( data ) shuffled_seq = data print ( shuffled_seq ) shuffled_seq = '' . join ( data ) print ( shuffled_seq ) Ouput: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ABCDEFGHIJKLMNOPQRSTUVWXYZ ZYXWVUTSRQPONMLKJIHGFEDCBA ========================= ZYXWVUTSRQPONMLKJIHGFEDCBA ========================= ABCDEFGHIJKLMNOPQRSTUVWXY ========================= ['F', 'J', 'I', 'L', 'O', 'R', 'U', 'C', 'A', 'V', 'Q', 'M', 'T', 'N', 'B', 'G', 'W', 'P', 'Y', 'H', 'D', 'S', 'Z', 'E', 'X', 'K'] LKAZHTVFGQROUXIMYWESDPCBJN LXRDUVFHKGJZMIAB ========================= RYYEYKWUGMYFYMUWWBOSZWSRMJ ========================= ['R', 'N', 'S', 'E', 'M', 'H', 'A', 'P', 'X', 'F', 'W', 'K', 'J', 'I', 'Y', 'T', 'Z', 'G', 'V', 'O', 'C', 'B', 'Q', 'D', 'L', 'U'] RNSEMHAPXFWKJIYTZGVOCBQDLU Recipe 3, Creating a Random Sequence with Probabilities \u00b6 random, list, generate, probability 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import random nucleotides = list ( 'ACGT' ) dna = '' while len ( dna ) < 100 : dna += random . choice ( nucleotides ) # choose amoung the list, fetch 1 item print ( dna ) print ( \"=\" * 25 ) nucleotides = list ( 'ACGT' ) probs = { 'A' : 0.3 , 'C' : 0.2 , 'G' : 0.2 , 'T' : 0.3 } # sum of 1.0 assert sum ( probs . values ()) == 1.0 # or # if sum(probs.values()) != 1.0: # raise Exception('Sum of probabilites is not 1.0!') dna = '' while len ( dna ) < 100 : nuc = random . choi","title":"Managing Your Biological Data with Python"},{"location":"Managing Your Biological Data with Python/#chapter-1-the-python-shell-and-basics","text":"Data structure Booleans: True or False . Dictionaries: unordered collections of key-value pairs; both can be numbers or strings; indicated with {key1: value1, 'key2': 'value2'} . Floats: numbers with digits after the dicemal point, Integers: numbers without digits after the decimal point. Lists: mutable ordered collections of objects; indicated with [a, b, c] . Sets: immutable unordered collections of unique elements; indicated by ([a, b, c]) . Strings: immutable ordered collections of characters; indicated with 'single' or \"double\" quotation marks. Tuples: immutable ordered collections of objects; indicated with (a, b, c) . Conversions Convert or coerce data: - float(value) ; into a float. - int(value) ; into an integer. - str(value) ; into a string. Strings 'Single' and \"double\" quotes are for short strings. \u2019\u2018\u2019Triple single and double quotes are rather multilines.\u2019\u2018\u2019 Access character and substrings print s[-1] ; print the last character of a string. print s[-5:] ; print from the 5 th position from the end to the end. String functions len(s) ; length of the string, s.upper() ; convert to uppercase. s.lower() ; convert to lowercase. s.strip() ; remove white spaces and tabs from both ends. s.strio('m') ; remove 'm' from both ends. s.rstrip() ; remove on the right only. s.lstrip('m') ; remove on the left only. s.split(' ') ; cut into words where there is space. s.find('m') ; search for the 'm' substring and return the starting position. s.replace('m', 'n') ; replace 'm' with 'n' . s.startwith('m') ; check beginning and return True or False . s.endwith('m') ; check end and return True or False . Create lists data = [1, 2, 3, 4, 5] . data[1:3] ; [2, 3] . data[0:2] ; [1, 2] . data[:3] ; [1, 2, 3] . data[-2:] ; [4, 5] . data2 = data[:] ; create a copy. Modify lists l[i] = x ; replace the i th element with x . l[i;j] = t ; replace elements from i to j by t (iterable). del l[i;j] ; delete the elements of the list from i to j . del s[i;k;k] ; delete the elements of the list from i to j with stop k . l.append(x) ; add element x to the list. l.extend(x) ; add several element x to the list (iterable). l.count(x) ; return the number of elements x in the list. l.index(x[. i[. j]]) ; return the smaller k such that l[k] = x and i <= k <= j . l.insert(i.x) ; insert(wedge in) x . l.pop(i) ; cancel the ith element and return its value; l.pop() does it for the last element. l.remove(x) ; delete a choosen x element. l.reverse() ; reverse the list order. l.sort() ; sort the list. l.sort([cmp[. key[. reverse]]]) ; sort the list; cmp is a customized function for the comparison of element pairs that must return a negative value, zero, or a positive value depending on if the first element of the pair is lower than. equal to. or greater than the second element. sorted(l) ; create a new list made of a simple ascending sort of the list without modifying the list. Functions working of lists len(data) ; length of the list. min(data) ; smallest. max(data) ; largest. sum(data) ; sum. range(4) ; create a list of number from 0 to 3. range(1.5) ; create a list of number from 1 to 4. range(2.9.2) ; create [2, 4, 6, 8] . range(5, 0, -1) ; create [5, 4, 3, 2, 1] Tuples t = 1, 2, 3 or t = (1, 2, 3) t = 1 or tuple = (1,) Accessing data in dictionaries prices['banana'] ; return the value of the key. prices.get('banaba') ; do the same thing, but if the key does not exit, it returns None . prices.has_key('apple') ; check whether the key(s) is(are) defined. prices.keys() ; return a list of all keys. prices.values() ; return a list of all values. prices.items() ; return all keys and values as a list of tuples. Modifying dictionaries prices['kiwi'] = 0.6 ; set the value of the key. prices.setdefault('egg', 0.9) ; set the value of the key if it is not yet defined. None None indicate the object or part of it is empty. For example: - a = None . - b = [None, None, 'green'] .","title":"Chapter 1, The Python Shell and Basics"},{"location":"Managing Your Biological Data with Python/#chapter-2-your-first-python-program","text":"Difference between functions and methods Functions are generic; use them anywhere without constraints. For example, len() works on all data. 1 2 3 4 >>> len ( 'protein' ) 7 >>> len ( '111' ) 3 Other funtions, called methods, are specific; use them on a certain type of data. For example, count() works only for strings or a \u2018string\u2019 variable (below, protein is a string). 1 2 3 4 >>> 'protein' . count ( 'r' ) 1 >>> 'occurence' . count ( 'c' ) 3 Count the occurrence of each amino acid in a protein sequence count, element, in, string 1 2 3 4 5 insulin = \"GIVEQCCTSICSLYQLENYCNFVNQHLCGSHLVEALYLVCGERGFFYTPKT\" for amino_acid in \"ACDEFGHIKLMNPQRSTVWY\" : number = insulin . count ( amino_acid ) print amino_acid , number Create a random DNA sequence of length 10 1 2 3 4 5 6 7 8 9 import random alphabet = \"AGCT\" sequence = \"\" for i in range ( 10 ): index = random . randint ( 0 , 3 ) sequence = sequence + alphabet [ index ] print sequence","title":"Chapter 2, Your First Python Program"},{"location":"Managing Your Biological Data with Python/#part-2-data-management","text":"","title":"Part 2, Data management"},{"location":"Managing Your Biological Data with Python/#chapter-3-analyzing-a-data-column","text":"Read from a text file readlines() . 1 2 3 4 5 6 7 8 text_file = open ( 'neuron_data.txt' , 'r' ) # 'r' is facultative lines = text_file . readlines () text_file . close () print lines read() . 1 2 3 4 5 6 text_file = open ( 'neuron_data.txt' ) # 'r' is facultative print text_file . read () text_file . close () Difference between read() and readlines() read(x) ; read up to x bytes in a file. If you don\u2019t supply the size, it reads the entire file. The output is displayed as strings only once. One character = 1 byte. Close and reopen the file to read it again. readlines(x) ; read up to x bytes. If you don\u2019t supply a size, it reads all the data until it reaches a newline ( \\n ) or the end of a paragraph. Close and reopen the file to read it again. Write a text file 1 2 3 4 5 6 output_file = open ( 'counts.txt' , 'w' ) # 'w' is mandatory output_file . write ( 'number of neuron lengths: 7 \\n ' ) output_file . close () Clean a text file strip strip() ; removes blanks spaces. rstrip() ; right only. lstrip() ; left only. 1 2 3 4 5 6 7 8 9 output_file = open ( 'counts.txt' ) output_file . read () output_file . close () # vs output_file = open ( 'counts.txt' ) output_file . read () . strip () output_file . close () Write and then read the same file 'r' ; cannot write with, only reads. 'w' ; cannot read with, only writes (an existing file with the same name will be erased). 'a' append; data added to the end. 'r+' ; both read and write (by replacing the existing string at the beginning by the new string). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 file1 = open ( 'count.txt' , 'w' ) file1 . write ( 'this is just a dummy test \\n ' ) file1 . close () file2 = open ( 'count.txt' , 'r' ) print file2 . read () file2 . close () file3 = open ( 'count.txt' , 'a' ) file3 . write ( 'this is another test \\n ' ) file3 . close () file4 = open ( 'count.txt' , 'r' ) print file4 . read () file4 . close () file5 = open ( 'count.txt' , 'w' ) file5 . write ( 'this is a final test \\n ' ) file5 . close () file6 = open ( 'count.txt' , 'r' ) print file6 . read () file6 . close () Read a series of numbers from a text file and print a summary of the data strip, append, length, minimum, maximum, sort, format, integer, float strip() ; remove blank spaces. A text is string by default even thought the file contains numbers; transform the text into float. append() ; each line to a list. len(data) . sum(data) . min(data) . max(data) . sort() . %4i is an integer with 4 digits. %6.1f is a float with 6 digits and 2 decimals. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 data = [] for line in open ( 'neuron_data.txt' ): length = float ( line . strip ()) data . append ( length ) n_items = len ( data ) total = sum ( data ) shortest = min ( data ) longest = max ( data ) data . sort () output = open ( \"results.txt\" , \"w\" ) output . write ( \"number of dendritic lengths : %4i \\n \" % ( n_items )) output . write ( \"total dendritic length : %6.1f \\n \" % ( total )) output . write ( \"shortest dendritic length : %7.2f \\n \" % ( shortest )) output . write ( \"longest dendritic length : %7.2f \\n \" % ( longest )) output . write ( \" %37.2f \\n %37.2f \" % ( data [ - 2 ], data [ - 3 ])) output . close () Format the data formatting, variable %s ; a string. %d ; a digit. %r ; raw data. %10s ; left-justify by 10 bytes. %-10s ; right-justify. by bytes %i ; an integer. %f ; a float. %2f ; a float with 2 digits. %2.2f ; has 2 digits and 2 decimals. %2i ; has 2 digits. And so on. str() ; turn a variable into a string (digit 3 to string '3' for example). int() ; turn a variable into an integer (string '3' to digit 3 for example). float() ; turn a variable into a float (digit 3 to 3.0 for example). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 file1 = open ( 'count.txt' , 'w' ) file1 . write ( 'this is just a dummy test' ) file1 . close () file2 = open ( 'count.txt' , 'r' ) variable = file2 . read () print \"Test1: %r \" % ( variable ) print \"Test2: %s \" % ( variable ) print \"Test3: %30s \" % ( variable ) print \"Test4: %-30s \" % ( variable ) print \"Test5: %30r \" % ( variable ) print \"Test6: %-30r \" % ( variable ) print \"Test7: %d , %d , %d \" % ( 1 , 2 , 3 ) print \"Test8: %2d , %3d , %10d \" % ( 1 , 2 , 3 ) print \"Test9: %d , %i , %f \" % ( 1 , 2 , 3 ) print \"Test10: %i , %i , %i \" % ( 1 , 2.8 , 3.1416 ) print \"Test11: %2i , %5i , %10i \" % ( 1 , 2.8 , 3.1416 ) print \"Test12: %f , %f , %f \" % ( 1 , 2.8 , 3.1416 ) print \"Test13: %2f , %2.2f , %10.3f \" % ( 1 , 2.8 , 3.1416 ) print \"Test14: %2f , %2f , %2f \" % ( 0.11 , 10.111 , 1000.1111 ) print \"Test15: %2.1f , %2.1f , %2.10f \" % ( 0.11 , 10.111 , 1000.1111 ) file2 . close () Output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Test1: 'this is just a dummy test' Test2: this is just a dummy test Test3: this is just a dummy test Test4: this is just a dummy test Test5: 'this is just a dummy test' Test6: 'this is just a dummy test' Test7: 1, 2, 3 Test8: 1, 2, 3 Test9: 1, 2, 3.000000 Test10: 1, 2, 3 Test11: 1, 2, 3 Test12: 1.000000, 2.800000, 3.141600 Test13: 1.000000, 2.80, 3.142 Test14: 0.110000, 10.111000, 1000.111100 Test15: 0.1, 10.1, 1000.1111000000 Write a list of numbers to a text file 1 2 3 4 5 6 7 data = [ 16.38 , 139.90 , 441.46 , 29.03 , 40.93 , 202.07 , 142.30 , 346.00 , 300.00 ] out = [] for value in data : out . append ( str ( value ) + ' \\n ' ) open ( 'results.txt' , 'w' ) . writelines ( out ) Ouput: 1 2 3 4 5 6 7 8 9 16.38 139.9 441.46 29.03 40.93 202.07 142.3 346.0 300.0 Calculate the average from a list of numbers 1 2 3 4 5 6 7 8 9 # calculate average from float numbers data = [ 3.53 , 3.47 , 3.51 , 3.72 , 3.43 ] average = sum ( data ) / len ( data ) print average # calculate average from integer numbers data = [ 1 , 2 , 3 , 4 ] average = float ( sum ( data )) / len ( data ) print average Calculate the median from a list of numbers 1 2 3 4 5 6 7 8 9 10 11 data = [ 3.53 , 3.47 , 3.51 , 3.72 , 3.43 ] data . sort () mid = len ( data ) / 2 if len ( data ) % 2 == 0 : median = ( data [ mid - 1 ] + data [ mid ]) / 2.0 else : median = data [ mid ] print median Join or concatenate a list 1 2 3 4 5 6 7 8 9 10 11 >>> L = [ '1' , '2' , '3' ] >>> '+' . join ( L ) '1+2+3' >>> L = [ 'a' , 'b' , 'c' ] >>> '' . join ( L ) 'abc' >>> L = [ '1' , '2' , '3' ] >>> int ( '' . join ( L )) 123 Calculate (a variance and )a standard deviation from a list of numbers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import math data = [ 3.53 , 3.47 , 3.51 , 3.72 , 3.43 ] average = sum ( data ) / len ( data ) total = 0.0 for value in data : total += ( value - average ) ** 2 variance = total / len ( data ) # population variance stddev = math . sqrt ( variance ) # population stddev print variance print stddev","title":"Chapter 3, Analyzing a Data Column"},{"location":"Managing Your Biological Data with Python/#chapter-4-parsing-data-records","text":"Find items common to two lists 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # proteins participating in cell cycle list_a = [] for line in open ( \"cell_cycle_proteins.txt\" ): list_a . append ( line . strip ()) print list_a # proteins expressed in a given cancer cell list_b = [] for line in open ( \"cancer_cell_proteins.txt\" ): list_b . append ( line . strip ()) print list_b for protein in list_a : if protein in list_b : print protein , 'detected in the cancer cell' else : print protein , 'not observed' Output: 1 2 3 4 5 6 7 8 9 10 11 12 ['P62258', 'P61981', 'P62191', 'P17980', 'P43686', 'P35998', 'P62333', 'Q99460', 'O75832'] ['P43686', 'P62333'] P62258 not observed P61981 not observed P62191 not observed P17980 not observed P43686 detected in the cancer cell P35998 not observed P62333 detected in the cancer cell Q99460 not observed O75832 not observed **Find if two or more conditions are met boolean, operators, and, or, not 1 2 3 4 5 6 7 8 9 10 11 seq = \"MGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQTPSKPASADGHRGPSAAFAPAAAE\" if 'GGG' in seq and 'RRR' in seq : print 'GGG is at position: ' , seq . find ( 'GGG' ) print 'RRR is at position: ' , seq . find ( 'RRR' ) if 'WWW' in seq or 'AAA' in seq : print 'Either WWW or AAA occur in the sequence' if 'AAA' in seq and not 'PPP' in seq : print 'AAA occurs in the sequence but not PPP' Boolean Operators Condition Meaning A < B A lower than B A <= B A lower than or equal to B A > B A greater than B A >= B A greater than or equal to B A == B A equal to B A != B A different from B A<> B idem A is B A is the same thing as B \u2018thing\u2019 being an object A is not B A is not the same thing as B A in B A is present in the sequence B A not in B A is not present in the sequence B Find all prime numbers under 30 1 2 3 4 5 6 7 8 9 10 11 for i in range ( 30 ): if i < 4 : print \"prime number:\" , i elif i % 2 == 0 : print \"multiple of two:\" , i elif i % 3 == 0 : print \"multiple of three:\" , i elif i % 5 == 0 : print \"multiple of five:\" , i else : print \"prime number:\" , i List vs Tuple vs Set mutable: change, replace, reorder, add elements. List = [1, 2, 3] ; mutable sequences of objects. Tuple = (1, 2, 3) ; immutable ordered sequences of objects;. Set = set([1, 2, 3]) ; immutable unordered collections of unique elements. The three can contain digits, strings or other objects (embedded). More on lists List[0] ; extract Llist = [[1, 2, 3],[a, b, c],[x, 4, 'text'], 'seq'] ; embedded lists. List[0][1] ; extract from embedded lists. List.append(5) ; add. Create: range(3) . seq(0, 2, 1) . [0.0] * 10 . [x**2 for x in range(5)] . Creating a list with a one-line loop loop, conditional, conditional, on one line 1 2 3 4 5 6 7 8 9 10 11 12 # remove non-base symbols from a sequence squares = [ x ** 2 for x in range ( 5 )] print squares bases = [ 'A' , 'C' , 'T' , 'G' ] print bases seq = 'GGACXCAGXXGATT' print seq seqlist = [ base for base in seq if base in bases ] print seqlist Write all headers from a file to a separate file 1 2 3 4 5 6 7 8 fasta_file = open ( 'SwissProt.fasta' , 'r' ) out_file = open ( 'SwissProt.header' , 'w' ) for line in fasta_file : if line [ 0 : 1 ] == '>' : out_file . write ( line ) out_file . close () Reads all AC numbers from the deflines of a file parse, parsing, text, file 1 2 3 4 5 6 7 8 9 10 input_file = open ( \"SwissProt.fasta\" , \"r\" ) ac_list = [] for line in input_file : if line [ 0 ] == '>' : fields = line . split ( '|' ) ac_list . append ( fields [ 1 ]) print ac_list Output: 1 ['P31946', 'P62258', 'Q04917', 'P61981', 'P31947', 'P27348', 'P63104', 'P30443'] Read a file (genbank_file) and convert it to another file (output_file) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 genbank_file = open ( \"AY810830.gb\" ) output_file = open ( \"AY810830.fasta\" , \"w\" ) flag = False for line in genbank_file : if line [ 0 : 9 ] == 'ACCESSION' : accession = line . split ()[ 1 ] . strip () output_file . write ( '>' + accession + ' \\n ' ) if line [ 0 : 6 ] == 'ORIGIN' : flag = True elif flag : fields = line . split () if fields != []: seq = '' . join ( fields [ 1 :]) output_file . write ( seq . upper () + ' \\n ' ) genbank_file . close () output_file . close () Read multiple files and extract data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 fasta_file = open ( 'SwissProt.fasta' , 'r' ) out_file = open ( 'SwissProtHuman.fasta' , 'w' ) seq = '' for line in fasta_file : if line [ 0 ] == '>' and seq == '' : # process the first line of the input file header = line elif line [ 0 ] != '>' : # join the lines with sequence seq = seq + line elif line [ 0 ] == '>' and seq != '' : # in subsequent lines starting with '>', # write the previous header and sequence # to the output file. Then re-initialize # the header and seq variables for the next record if \"Homo sapiens\" in header : out_file . write ( header + seq ) seq = '' header = line # take care of the very last record of the input file if \"Homo sapiens\" in header : out_file . write ( header + seq ) out_file . close ()","title":"Chapter 4, Parsing Data Records"},{"location":"Managing Your Biological Data with Python/#chapter-5-searching-data","text":"Translate a RNA sequence to a protein sequence in three reading frames dictionary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 codon_table = { 'GCU' : 'A' , 'GCC' : 'A' , 'GCA' : 'A' , 'GCG' : 'A' , 'CGU' : 'R' , 'CGC' : 'R' , 'CGA' : 'R' , 'CGG' : 'R' , 'AGA' : 'R' , 'AGG' : 'R' , 'UCU' : 'S' , 'UCC' : 'S' , 'UCA' : 'S' , 'UCG' : 'S' , 'AGU' : 'S' , 'AGC' : 'S' , 'AUU' : 'I' , 'AUC' : 'I' , 'AUA' : 'I' , 'UUA' : 'L' , 'UUG' : 'L' , 'CUU' : 'L' , 'CUC' : 'L' , 'CUA' : 'L' , 'CUG' : 'L' , 'GGU' : 'G' , 'GGC' : 'G' , 'GGA' : 'G' , 'GGG' : 'G' , 'GUU' : 'V' , 'GUC' : 'V' , 'GUA' : 'V' , 'GUG' : 'V' , 'ACU' : 'T' , 'ACC' : 'T' , 'ACA' : 'T' , 'ACG' : 'T' , 'CCU' : 'P' , 'CCC' : 'P' , 'CCA' : 'P' , 'CCG' : 'P' , 'AAU' : 'N' , 'AAC' : 'N' , 'GAU' : 'D' , 'GAC' : 'D' , 'UGU' : 'C' , 'UGC' : 'C' , 'CAA' : 'Q' , 'CAG' : 'Q' , 'GAA' : 'E' , 'GAG' : 'E' , 'CAU' : 'H' , 'CAC' : 'H' , 'AAA' : 'K' , 'AAG' : 'K' , 'UUU' : 'F' , 'UUC' : 'F' , 'UAU' : 'Y' , 'UAC' : 'Y' , 'AUG' : 'M' , 'UGG' : 'W' , 'UAG' : 'STOP' , 'UGA' : 'STOP' , 'UAA' : 'STOP' } # read the RNA sequence into a single string rna = '' for line in open ( 'A06662-RNA.fasta' ): if not line . startswith ( '>' ): rna = rna + line . strip () # translate one frame at a time for frame in range ( 3 ): prot = '' print 'Reading frame ' + str ( frame + 1 ) for i in range ( frame , len ( rna ), 3 ): codon = rna [ i : i + 3 ] if codon in codon_table : if codon_table [ codon ] == 'STOP' : prot = prot + '*' else : prot = prot + codon_table [ codon ] else : # handle too short codons prot = prot + '-' # format to blocks of 48 columns i = 0 while i < len ( prot ): print prot [ i : i + 48 ] i = i + 48 Output (contains a translated sequence for each reading frame): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Reading frame 1 WDQSAEAACVRVRVRVCACVCVRLHLCRVGKEIEMGGQ*AQVPKALNP LVWSLLRAMGAIEKSEQGCV*M*GLEGSSREASSKAFAIIW*ENPARM DRQNGIEMSWQLKWTGFGTSLVVGSKQRRIWDSGGLAWGRRGCLRGWE G*E*DDTWWCLAGGGQG*LCEGTARATEAF*DPAVPEPGRQDLHCGRP GEHLA Reading frame 2 GTSQQRQRVCACVCVCVRVCVYACICVGWVRR*RWAGSRPRSRRP*TH WFGVS*GQWGPLRSLNRAVSECEV*KDPPEKPALKLLQSSGERTQQGW TGRME*R*VGS*SGQDLVLAWLWGASRGESGTLVVWPGADGGVSGAGR DESRMIHGGVWQEAGKDDYVKALPGQLKPFETLLSQNQGGKTFIVGDQ VSIW- Reading frame 3 GPVSRGSVCARACACVCVCVCTLAFVSGG*GDRDGRAVGPGPEGLEPT GLESPKGNGGH*EV*TGLCLNVRSRRILQRSQL*SFCNHLVREPSKDG QAEWNRDELAAEVDRIWY*PGCGEQAEENLGLWWSGLGQTGVSQGLGG MRVG*YMVVSGRRRARMTM*RHCPGN*SLLRPCCPRTREARPSLWETR *ASG- While loop 1 2 3 4 5 6 seq = \"IVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\" i = 0 while i < len ( seq ): print seq [ i : i + 12 ] i = i + 12 Output: 1 2 3 4 5 6 IVGGYTCGANTV PYQVSLNSGYHF CGGSLINSQWVV SAAHCYKSGIQV RLGEDNINVVEG NEQF Find the a sequence in a file 1 2 3 4 5 6 7 8 9 10 11 12 swissprot = open ( \"SwissProt.fasta\" ) insulin_ac = 'P61981' result = None while result == None : line = swissprot . next () if line . startswith ( '>' ): ac = line . split ( '|' )[ 1 ] if ac == insulin_ac : result = line . strip () print result Output: 1 >sp|P61981|1433G_HUMAN 14-3-3 protein gamma OS=Homo sapiens GN=YWHAG PE=1 SV=2 Searching a list search 1 2 3 4 5 6 bases = [ 'A' , 'C' , 'T' , 'G' ] seq = 'CAGGCCATTRKGL' for i in seq : if i not in bases : print i , \"is not a nucleotide\" Output: 1 2 3 R is not a nucleotide K is not a nucleotide L is not a nucleotide Read a file and store entries in a dictionary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 sequences = {} ac = '' seq = '' for line in open ( \"SwissProt.fasta\" ): if line . startswith ( '>' ) and seq != '' : sequences [ ac ] = seq seq = '' if line . startswith ( '>' ): ac = line . split ( '|' )[ 1 ] else : seq = seq + line . strip () sequences [ ac ] = seq print sequences . keys () print sequences [ 'P62258' ] Output: 1 2 3 ['Q04917', 'P63104', 'P27348', 'P31947', 'P31946', 'P30443', 'P61981', 'P62258'] MDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIGARRASWRIISSIEQKEENKGGEDKLKMIREYRQMVETELKLICCDILDVLDKHLIPAANTGESKVFYYKMKGDYHRYLAEFATGNDRKEAAENSLVAYKAASDIAMTELPPTHPIRLGLALNFSVFYYEILNSPDRACRLAKAAFDDAIAELDTLSEESYKDSTLIMQLLRDNLTLWTSDMQGDGEEQNKEALQDVEDENQ Read a sequence from a structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 aa_codes = { 'ALA' : 'A' , 'CYS' : 'C' , 'ASP' : 'D' , 'GLU' : 'E' , 'PHE' : 'F' , 'GLY' : 'G' , 'HIS' : 'H' , 'LYS' : 'K' , 'ILE' : 'I' , 'LEU' : 'L' , 'MET' : 'M' , 'ASN' : 'N' , 'PRO' : 'P' , 'GLN' : 'Q' , 'ARG' : 'R' , 'SER' : 'S' , 'THR' : 'T' , 'VAL' : 'V' , 'TYR' : 'Y' , 'TRP' : 'W' } seq = '' for line in open ( \"1TLD.pdb\" ): if line [ 0 : 6 ] == \"SEQRES\" : columns = line . split () for resname in columns [ 4 :]: seq = seq + aa_codes [ resname ] i = 0 print \">1TLD\" while i < len ( seq ): print seq [ i : i + 64 ] i = i + 64 Output: 1 2 3 4 5 >1TLD IVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF ISASKSIVHPSYNSNTLNNDIMLIKLKSAASLNSRVASISLPTSCASAGTQCLISGWGNTKSSG TSYPDVLKCLKAPILSDSSCKSAYPGQITSNMFCAGYLEGGKDSCQGDSGGPVVCSGKLQGIVS WGSGCAQKNKPGVYTKVCNYVSWIKQTIASN","title":"Chapter 5, Searching Data"},{"location":"Managing Your Biological Data with Python/#chapter-6-filtering-data","text":"Calculate the intersection of two lists venn 1 2 3 4 5 6 7 8 9 10 data_a = [ 1 , 2 , 3 , 4 , 5 , 6 ] data_b = [ 1 , 5 , 7 , 8 , 9 ] a_and_b = [] for num in data_a : if num in data_b : a_and_b . append ( num ) print a_and_b Output: 1 [1, 5] More about sets set Set = set([1, 2, 3]) ; immutable unordered collections of unique elements. They are not sequential objects like lists. They cannot contain identical elements. to remove duplicates to calculate the intersection the union the difference between two or more group of objects as long as the order is not important. They do not support indexing and slicing operations. They take the in and not in operators (test an element for membership in a set). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 >>> s1 = set ( 'LDFGJLDFGDGD' ) >>> s1 set ([ 'J' , 'F' , 'L' , 'G' , 'D' ]) >>> 'L' in s1 True >>> 'Z' not in s1 True >>> s2 = ( 'LDF' ) >>> s1 . issubset ( s2 ) False >>> s1 . issuperset ( s2 ) True >>> s1 = set ([ 'a' , 1 , 2 , 3 , 4 , 5 , 'c' , 'b' ]) >>> 5 in s1 True >>> 6 in s1 False >>> s2 = set ([ 10 , 4 , 5 ]) >>> s1 . issubset ( s2 ) False >>> s1 . issuperset ( s2 ) False >>> s3 = set (( 1 , 2 , 3 , 4 )) >>> s3 set ([ 1 , 2 , 3 , 4 ]) >>> s3 . add ( 5 ) >>> s3 set ([ 1 , 2 , 3 , 4 , 5 ]) >>> s5 = set ([ 1 , 2 , 3 , 'b' , 'c' ]) >>> s5 set ([ 1 , 2 , 3 , 'b' , 'c' ]) >>> s5 . update ([ 'a' , 'd' , 4 ]) >>> s5 set ([ 'a' , 1 , 2 , 3 , 4 , 'd' , 'c' , 'b' ]) >>> s1 = set ([ 'a' , 'b' , 'c' ]) >>> s2 = set ([ 'c' , 'd' , 'e' ]) >>> s1 . union ( s2 ) set ([ 'a' , 'c' , 'b' , 'e' , 'd' ]) >>> s1 . intersection ( s2 ) set ([ 'c' ]) >>> s1 . symmetric_difference ( s2 ) set ([ 'a' , 'b' , 'e' , 'd' ]) >>> s1 . difference ( s2 ) set ([ 'a' , 'b' ]) >>> s2 . difference ( s1 ) set ([ 'e' , 'd' ]) Calculate the intersection of two sets 1 2 3 4 5 data_a = set ([ 1 , 2 , 3 , 4 , 5 , 6 ]) data_b = set ([ 1 , 5 , 7 , 8 , 9 ]) a_and_b = data_a . intersection ( data_b ) print a_and_b Output: 1 set([1, 5]) Find numbers common to three sets 1 2 3 4 5 6 7 8 9 reduce () is a = set (( 1 , 2 , 3 , 4 , 5 )) b = set (( 2 , 4 , 6 , 7 , 1 )) c = set (( 1 , 4 , 5 , 9 )) triple_set = [ a , b , c ] common = reduce ( set . intersection , triple_set ) print common Output: 1 set([1, 4]) Calculate the differences of two lists 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 data_a = [ 1 , 2 , 3 , 4 , 5 , 6 ] data_b = [ 1 , 5 , 7 , 8 , 9 ] a_not_b = [] b_not_a = [] for num in data_a : if num not in data_b : a_not_b . append ( num ) for num in data_b : if num not in data_a : b_not_a . append ( num ) print a_not_b print b_not_a Output: 1 2 [2, 3, 4, 6] [7, 8, 9] Calculate the differences of two sets 1 1 2 3 4 5 6 7 8 data_a = set ([ 1 , 2 , 3 , 4 , 5 , 6 ]) data_b = set ([ 1 , 5 , 7 , 8 , 9 ]) a_not_b = data_a . difference ( data_b ) b_not_a = data_b . difference ( data_a ) print a_not_b print b_not_a Output: 1 2 set([2, 3, 4, 6]) set([8, 9, 7]) Calculate the differences of two sets 2 1 2 3 4 5 6 7 8 data_a = set ([ 1 , 2 , 3 , 4 , 5 , 6 ]) data_b = set ([ 1 , 5 , 7 , 8 , 9 ]) a_or_b = data_a . union ( data_b ) a_xor_b = data_a . symmetric_difference ( data_b ) print a_or_b print a_xor_b Output: 1 2 set([1, 2, 3, 4, 5, 6, 7, 8, 9]) set([2, 3, 4, 6, 7, 8, 9]) Remove elements from a list pop() ; return and remove the first value. pop(0) ; return and remove a specific position in the index. 1 2 3 4 5 6 >>> data_a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] >>> data_a . pop () 1 >>> print data_a [ 2 , 3 , 4 , 5 , 6 , 7 ] del() ; remove a specific position in the index only. delete 1 2 3 4 >>> data_a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] >>> del ( data_a [ 1 ]) >>> print data_a [ 1 , 3 , 4 , 5 , 6 , 7 ] remove() ; remove a specific element only. remove 1 2 3 4 5 6 >>> data_a = [ 1 , 2 , 3 , 4 , 5 , 6 ] >>> data_a . remove ( 2 ) >>> print data_a [ 1 , 3 , 4 , 5 , 6 ] >>> data = [ x for x in data_a if x != 3 ] Slicing a list slice, subset 1 2 3 >>> data_a = [ 1 , 2 , 3 , 4 , 5 , 6 ] >>> data_2 = data_a [: 2 ] [ 1 , 2 ] Remove elements from a dictionary pop, delete 1 2 3 4 5 6 7 8 9 10 11 12 13 >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 } >>> d . pop ( 'a' ) 1 >>> d { 'b' : 2 , 'c' : 3 } >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 } >>> del d [ 'a' ] 1 >>> d { 'b' : 2 , 'c' : 3 } Delete particular lines from a text file or write back particular lines in a new file 1 2 lines = open ( 'text.txt' ) . readlines () open ( 'new.txt' , 'w' ) . writelines ( lines [ 2 : 4 ] + lines [ 6 :]) Remove some lines from a text file 1 2 3 4 5 6 7 8 9 10 11 12 in_file = open ( 'text.txt' ) out_file = open ( 'new.txt' , 'w' ) index = 0 indices_to_remove = [ 1 , 2 , 5 , 6 ] for line in in_file : index = index + 1 if index not in indices_to_remove : out_file . write ( line ) in_file . close () out_file . close () Remove some lines from a text file with enumerate () enumerate 1 2 3 4 5 6 7 8 out_file = open ( 'new.txt' , 'w' ) indices_to_remove = [ 1 , 2 , 5 , 6 ] for index , line in enumerate ( open ( 'text.txt' )): if ( index + 1 ) not in indices_to_remove : out_file_write ( line ) out_file . close () Remove duplicates from a file with accession numbers 1 set Using a set is faster but distorts the order. 1 2 3 4 5 6 7 8 9 input_file = open ( 'UniprotID.txt' ) output_file = open ( 'UniprotID-unique.txt' , 'w' ) unique = set ( input_file ) for line in input_file : unique . add ( line ) for line in unique : output_file . write ( line ) Remove duplicates from a list of accession numbers 2 list 1 2 3 4 5 6 7 8 9 10 11 input_file = open ( 'UniprotID.txt' ) output_file = open ( 'UniprotID-unique.txt' , 'w' ) unique = [] for line in input_file : if line not in unique : output_file . write ( line ) unique . append ( line ) input_file . close () output_file . close () Compare two lists of accession codes using sets set comparison, difference 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # read the old database release old_db = set () for line in open ( \"list_old.txt\" ): accession = line . strip () old_db . add ( accession ) # read the new database release new_db = set () for line in open ( \"list_new.txt\" ): accession = line . strip () new_db . add ( accession ) # report the differences new_entries = new_db . difference ( old_db ) print \"new entries\" , list ( new_entries ) old_entries = old_db . difference ( new_db ) print \"deprecated entries\" , list ( old_entries ) unique_entries = new_db . symmetric_difference ( old_db ) print \"unique entries\" , list ( unique_entries )","title":"Chapter 6, Filtering Data"},{"location":"Managing Your Biological Data with Python/#chapter-7-managing-tabular-data","text":"The original data protein ext1 ext2 ext3 0.16 0.038 0.044 0.04 0.33 0.089 0.095 0.091 0.66 0.184 0.191 0.191 1.0 0.28 0.292 0.283 1.32 0.365 0.367 0.365 1.66 0.441 0.443 0.444 Read tabular data from a tab-separated text file 1 2 3 4 5 6 table = [] for line in open ( 'lowry_data.txt' ): table . append ( line . strip () . split ( ' \\t ' )) print table Output: 1 2 3 4 5 6 7 8 9 [ ['protein', 'ext1', 'ext2', 'ext3'], ['0.16', '0.038', '0.044', '0.04'], ['0.33', '0.089', '0.095', '0.091'], ['0.66', '0.184', '0.191', '0.191'], ['1.0', '0.28', '0.292', '0.283'], ['1.32', '0.365', '0.367', '0.365'], ['1.66', '0.441', '0.443', '0.444'] ] Write a nested list to a text file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 table = [ [ 'protein' , 'ext1' , 'ext2' , 'ext3' ], [ 0.16 , 0.038 , 0.044 , 0.040 ], [ 0.33 , 0.089 , 0.095 , 0.091 ], [ 0.66 , 0.184 , 0.191 , 0.191 ], [ 1.00 , 0.280 , 0.292 , 0.283 ], [ 1.32 , 0.365 , 0.367 , 0.365 ], [ 1.66 , 0.441 , 0.443 , 0.444 ] ] out = '' for row in table : line = [ str ( cell ) for cell in row ] out = out + ' \\t ' . join ( line ) + ' \\n ' open ( 'lowry_data.txt' , 'w' ) . write ( out ) Reformat a four-column to a two-column table Create a 2D table. Print the table line by line. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 table = [ [ 'protein' , 'ext1' , 'ext2' , 'ext3' ], [ 0.16 , 0.038 , 0.044 , 0.040 ], [ 0.33 , 0.089 , 0.095 , 0.091 ], [ 0.66 , 0.184 , 0.191 , 0.191 ], [ 1.00 , 0.280 , 0.292 , 0.283 ], [ 1.32 , 0.365 , 0.367 , 0.365 ], [ 1.66 , 0.441 , 0.443 , 0.444 ] ] # remove the first row table = table [ 1 :] protein , ext1 , ext2 , ext3 = zip ( * table ) # create a single column for `ext` or concatenate each `ext` # extend (`* 3`) the `protein` column to match the `ext` column. extinction = ext1 + ext2 + ext3 protein = protein * 3 # create four tuples for each column table = zip ( protein , extinction ) for prot , ext in table : print prot , ext Output: protein ext 0.16 0.038 0.33 0.089 0.66 0.184 1.0 0.28 1.32 0.365 1.66 0.441 0.16 0.044 0.33 0.095 0.66 0.191 1.0 0.292 1.32 0.367 1.66 0.443 0.16 0.04 0.33 0.091 0.66 0.191 1.0 0.283 1.32 0.365 1.66 0.444 Create a table; lists in a list Empty 1. 1 table = [[ 0 ] * 3 for x in range ( 3 )] Empty 2. 1 2 3 table = [] for i in range ( 3 ): table . append ([ 0 ] * 3 ) Encode a 2D list; lists in a list tabular, table, two dimensions 1 2 3 4 5 table = [ [ 0 , 1 , 2 , 3 ], [ 10 , 11 , 12 , 13 ], [ 20 , 21 , 22 , 23 ] ] Encode a list of nested tuples; tuples in a list 1 2 3 4 5 table = [ ( 0 , 1 , 2 , 3 ), ( 10 , 11 , 12 , 13 ), ( 20 , 21 , 22 , 23 ) ] Extract, access rows and cells from a 2D table tabular, table, two dimensions table[1] ; extract the 2 nd row. table[1][2] ; extract a single cell (2 nd row, 3 rd column). table[1:] or table.pop(0) ; slice the 1 st row, keep the remaining. table.pop(2) ; delete the 3 rd row. table[:2] ; slice the 3 rd column, keep the remaining. table[:2] + table[3:] ; slice the 3 rd column and 4 th row, keep the remaining. table.insert(2, [0.55, 0.12, 0.12, 0.14]) ; insert a new row in 3 rd position table.append([0.55, 0.12, 0.12, 0.14]) ; insert a new row at the end. Looping to access each row 1 2 for row in table : print row Looping to access each cell 1 2 3 for row in table : for cell in row : print cell Extract, access columns from a 2D table tabular, table, two dimensions 1 2 3 4 5 protein = [] # access the 1st, 2nd... column (separate the columns) for row in table : protein . append ( row [ 0 ]) 1 2 3 # access the 4th column columns = zip ( * table ) fourth = column [ 3 ] protein, ex1. ext2, ext3 = zip(*table) ; access many columns; now each column is in a separate tuple. Flip a table 90 degrees convert column to row, row to column Column becomes rows. Easier to extract or insert rows and cells. 1 2 3 4 5 6 7 8 data = [ [ 0 , 1 , 2 , 3 ], [ 10 , 11 , 12 , 13 ], [ 20 , 21 , 22 , 23 ] ] columns = zip ( * data ) print columns Output: 1 2 3 4 5 6 [ (0, 10, 20), (1, 11, 21), (2, 12, 22), (3, 13, 23) ] But rows are now immutable tuples! You cannot manipulate individual cells. Convert the rows to lists again in order to extract a cell. 1 2 table [ 1 ] = list ( table [ 1 ]) table [ 1 ][ 2 ] Insert, access or extract columns from a 2D table tabular, table, two dimensions 1 2 3 4 5 6 7 8 9 10 table = zip ( * table ) table . append ([ 'ext4' , 0 , 0 , 0 , 0 , 0 , 0 ]) table = zip ( * table ) table = zip ( * table ) table . pop ( 1 ) table = zip ( * table ) table = zip ( * table ) table The zip() function zip() ; iterate though lists, tuples, and strings. 1 2 3 4 5 6 >>> zip ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ]) [ ( 1 , 4 ), ( 2 , 5 ), ( 3 , 6 ) ] The asterik tells the function to use all the arguments. 1 2 3 4 5 zip ( * table ) # vs zip ( table [ 0 ], table [ 1 ], table [ 2 ], table [ 3 ]) Multi-dimentional tables tabular, table, two dimensions, three dimensions, 2D, 3D, lists in list 1 cube = [[[ 0 , 1 ], [ 2 , 3 ]], [[ 4 , 5 ], [ 6 , 7 ]]] Warning: more dimensions means more nested data. It slows down the calculations!!! Prefer Numpy, Pandas, parallel computing. Avoid going over 2D! Create a table; dictionaries in a table, in a list 1 2 3 4 5 6 7 8 table = [ { 'protein' : 0.16 , 'ext1' : 0.038 , 'ext2' : 0.044 , 'ext3' : 0.040 }, { 'protein' : 0.33 , 'ext1' : 0.089 , 'ext2' : 0.095 , 'ext3' : 0.091 }, { 'protein' : 0.66 , 'ext1' : 0.184 , 'ext2' : 0.191 , 'ext3' : 0.191 }, { 'protein' : 1.00 , 'ext1' : 0.280 , 'ext2' : 0.292 , 'ext3' : 0.283 }, { 'protein' : 1.32 , 'ext1' : 0.365 , 'ext2' : 0.367 , 'ext3' : 0.365 }, { 'protein' : 1.66 , 'ext1' : 0.441 , 'ext2' : 0.443 , 'ext3' : 0.444 } ] Extract, access cells in a table 1 2 3 4 5 # second row, cell 'ext2' instead of a number cell = table [ 1 ][ 'ext2' ] print table print cell Create a table; dictionaries in a dictionary 1 2 3 4 5 6 7 8 table = { 'row1' : { 'protein' : 0.16 , 'ext1' : 0.038 , 'ext2' : 0.044 , 'ext3' : 0.040 }, 'row2' : { 'protein' : 0.33 , 'ext1' : 0.089 , 'ext2' : 0.095 , 'ext3' : 0.091 }, 'row3' : { 'protein' : 0.66 , 'ext1' : 0.184 , 'ext2' : 0.191 , 'ext3' : 0.191 }, 'row4' : { 'protein' : 1.00 , 'ext1' : 0.280 , 'ext2' : 0.292 , 'ext3' : 0.283 }, 'row5' : { 'protein' : 1.32 , 'ext1' : 0.365 , 'ext2' : 0.367 , 'ext3' : 0.365 }, 'row6' : { 'protein' : 1.66 , 'ext1' : 0.441 , 'ext2' : 0.443 , 'ext3' : 0.444 } } Extract, access cells in a table, in a dictionary More readable this way; second row, cell 'ext2' : 1 2 3 4 cell = table [ 'row1' ][ 'ext2' ] print table print cell Create a table: lists in a dictionaries Data for each row are in a simpler format. 1 2 3 4 5 6 7 8 table = { '1' : [ 'protein' : 0.16 , 'ext1' : 0.038 , 'ext2' : 0.044 , 'ext3' : 0.040 \u00b8 ], '2' : [ 'protein' : 0.33 , 'ext1' : 0.089 , 'ext2' : 0.095 , 'ext3' : 0.091 ], '3' : [ 'protein' : 0.66 , 'ext1' : 0.184 , 'ext2' : 0.191 , 'ext3' : 0.191 ], '4' : [ 'protein' : 1.00 , 'ext1' : 0.280 , 'ext2' : 0.292 , 'ext3' : 0.283 ], '5' : [ 'protein' : 1.32 , 'ext1' : 0.365 , 'ext2' : 0.367 , 'ext3' : 0.365 ], '6' : [ 'protein' : 1.66 , 'ext1' : 0.441 , 'ext2' : 0.443 , 'ext3' : 0.444 ] } Create a table; formats Lists in a list: Easy to access/add/delete rows, to sort. Difficult to deal with columns and a specific cell. Dictionaries in a dictionary: Easy to access column entries. Easy to read (find data). Unsorted and impossible to sort. Mixed lists and dictionaries: Use the advantage of both types and build the table accordingly (l, d or d, l for rows, columns) depending on the operations (see above). The code is harder to read or less straightforward. Convert a table from a nested list to a nested dictionary\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 table = [ [ 'protein' , 'ext' ], [ 0.16 , 0.038 ], [ 0.33 , 0.089 ], [ 0.66 , 0.184 ], [ 1.00 , 0.280 ], [ 1.32 , 0.365 ], [ 1.66 , 0.441 ] ] # convert nested list to nested dict nested_dict = {} n = 0 key = table [ 0 ] for row in table [ 1 :]: # for row in table[0:] includes the header n += 1 entry = { key [ 0 ]: row [ 0 ], key [ 1 ]: row [ 1 ]} nested_dict [ 'row' + str ( n )] = entry print nested_dict Output: 1 2 3 4 5 6 7 8 { 'row1' : { 'protein' : 0.16 , 'ext' : 0.038 }, 'row2' : { 'protein' : 0.33 , 'ext' : 0.089 }, 'row3' : { 'protein' : 0.66 , 'ext' : 0.184 }, 'row4' : { 'protein' : 1.0 , 'ext' : 0.28 }, 'row5' : { 'protein' : 1.32 , 'ext' : 0.365 }, 'row6' : { 'protein' : 1.66 , 'ext' : 0.441 } } \u2026and convert a nested dictionary to a table 1 2 3 4 5 6 7 # convert nested dict back to nested list nested_list = [] for entry in nested_dict : key = nested_dict [ entry ] nested_list . append ([ key [ 'protein' ], key [ 'ext' ]]) print nested_list Output: 1 2 3 4 5 6 7 8 [ [ 0.16 , 0.038 ], [ 0.33 , 0.089 ], [ 0.66 , 0.184 ], [ 1.0 , 0.28 ], [ 1.32 , 0.365 ], [ 1.66 , 0.441 ] ]","title":"Chapter 7, Managing Tabular Data"},{"location":"Managing Your Biological Data with Python/#chapter-8-sorting-data","text":"Sort a table by one column and write it to a file add, index, list sorted() . itemgetter() ; turn elements of each column into a sortable key. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from operator import itemgetter # read table to a nested list of floats table = [] for line in open ( \"random_distribution.tsv\" ): columns = line . split () columns = [ float ( x ) for x in columns ] table . append ( columns ) # sort the table by second column column = 1 table_sorted = sorted ( table , key = itemgetter ( column )) # format table as strings for row in table_sorted : row = [ str ( x ) for x in row ] print \" \\t \" . join ( row ) Output (first 3 lines only): 1 2 3 6153.0 58.0 0.00942629611572 40.0 0.00650089387291 260.0 0.0422558101739 6101.0 64.0 0.0104900835929 41.0 0.00672020980167 299.0 0.0490083592854 6101.0 68.0 0.0111457138174 39.0 0.0063923946894 274.0 0.0449106703819 List are good for sorting ASCII sort order chart (top to bottom, left to right): space 0 : A Q [ a q } ! 1 ; B R \\ b r tick \u201c 2 < C S ] c s { # 3 = D T ^ d t $ 4 > E U _ e u DEL % 5 ? F V ` f v & 6 @ G W g w \u2018 7 H X h x ( 8 I Y i y ) 9 J Z j z * K k + L l , M m - N n . O o / P p Difference between sort() and sorted() sort() ; apply to lists sorted() ; apply to lists, tuples, and dictionary keys. reverse() sort the other way around. sorted(data, reverse = True) ; idem. operator.itemgetter(i)(T) returns the i th element of T , a string, a list, a tuple, or a dictionary. 1 2 3 4 5 6 >>> from operator import itemgetter >>> data = [ 'A' , 'T' , 'C' ] >>> itemgetter ( 1 )( data ) 'A' >>> itemgetter ( 1 , - 1 )( data ) ( 'A' , 'T' ) 1 new_table = sorted ( table , key = itemgetter ( 1 , 3 )) Sort entries in a tabular output file in reverse order Notice the table_sorted = sorted(table, key = itemgetter(2), reverse=True) . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from operator import itemgetter input_file = open ( \"BlastOut.csv\" ) output_file = open ( \"BlastOutSorted.csv\" , \"w\" ) # read BLAST output table table = [] for line in input_file : col = line . split ( ',' ) col [ 2 ] = float ( col [ 2 ]) table . append ( col ) table_sorted = sorted ( table , key = itemgetter ( 2 ), reverse = True ) # write sorted table to an output file for row in table_sorted : row = [ str ( x ) for x in row ] output_file . write ( \" \\t \" . join ( row ) + ' \\n ' ) input_file . close () output_file . close () Sort a tuple by converting it to a list 1 2 3 4 5 6 7 8 9 10 # sort a tuple data = ( 1 , 4 , 5 , 3 , 8 , 9 , 2 , 6 , 8 , 9 , 30 ) list_data = list ( data ) list_data . sort () new_tup = tuple ( data ) print new_tup # sort a tuple using the sorted() built-in function new_tup = tuple ( sorted ( data )) print new_tup Both outputs: 1 2 ( 1 , 4 , 5 , 3 , 8 , 9 , 2 , 6 , 8 , 9 , 30 ) ( 1 , 2 , 3 , 4 , 5 , 6 , 8 , 8 , 9 , 9 , 30 ) Convert a dictionary to a sorted list 1 2 3 4 5 6 7 8 9 10 11 12 13 data = { 1 : 'a' , 2 : 'b' , 4 : 'd' , 3 : 'c' , 5 : 't' , 6 : 'm' , 36 : 'z' } # create a list of keys and go through them one by one keys = list ( data ) keys . sort () for key in keys : print key , data [ key ] # sort keys using the sorted() built-in function for key in sorted ( data ): print key , data [ key ] Output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1 a 2 b 3 c 4 d 5 t 6 m 36 z 1 a 2 b 3 c 4 d 5 t 6 m 36 z Sort strings by their length lamda, function Use a lambda function and replace itemgetter() . 1 2 3 4 data = [ 'ASDF' , 'SDFSADGSAG' , 'SDFSD' , 'GSGDGG' ] new_data = sorted ( data , key = lambda x : len ( x )) print new_data 1 2 3 4 data = [ 'ASDF' , 'SDFSADGSAG' , 'SDFSD' , 'GSGDGG' ] new_data = sorted ( data , key = lambda col : col [ 1 ]) # alternative print new_data Same output: 1 [ 'ASDF' , 'SDFSD' , 'GSGDGG' , 'SDFSADGSAG' ] Sort a table by seven columns in one operation 1 2 3 4 5 6 7 8 9 10 11 12 from operator import itemgetter # read table in_file = open ( \"random_distribution.tsv\" ) table = [] for line in in_file : columns = line . split () columns = [ float ( x ) for x in columns ] table . append ( columns ) table_sorted = sorted ( table , key = itemgetter ( 0 , 1 , 2 , 3 , 4 , 5 , 6 )) print table_sorted Output (first 3 lines only): 1 2 3 4 5 6 [ [ 6041.0 , 87.0 , 0.0144015891409 , 44.0 , 0.00728356232412 , 213.0 , 0.035259063069 ], [ 6042.0 , 121.0 , 0.0200264812976 , 35.0 , 0.00579278384641 , 262.0 , 0.0433631247931 ], [ 6044.0 , 113.0 , 0.0186962276638 , 67.0 , 0.0110853739246 , 266.0 , 0.0440105890139 ], ... ] Sort entries in a tabular BLAST output file in reverse order 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from operator import itemgetter input_file = open ( \"BlastOut.csv\" ) output_file = open ( \"BlastOutSorted.csv\" , \"w\" ) # read BLAST output table table = [] for line in input_file : col = line . split ( ',' ) col [ 2 ] = float ( col [ 2 ]) table . append ( col ) table_sorted = sorted ( table , key = itemgetter ( 2 ), reverse = True ) # write sorted table to an output file for row in table_sorted : row = [ str ( x ) for x in row ] output_file . write ( \" \\t \" . join ( row ) + ' \\n ' ) input_file . close () output_file . close () Sort entries in a comma separated file by two columns 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from operator import itemgetter input_file = open ( \"PDBhaemoglobinReport.csv\" ) output_file = open ( \"PDBhaemoglobinSorted.csv\" , \"w\" ) table = [] header = input_file . readline () for line in input_file : col = line . split ( ',' ) col [ 3 ] = float ( col [ 3 ][ 1 : - 1 ]) col [ 4 ] = int ( col [ 4 ][ 1 : - 2 ]) table . append ( col ) table_sorted = sorted ( table , key = itemgetter ( 3 , 4 )) output_file . write ( header + ' \\t ' ) for row in table_sorted : row = [ str ( x ) for x in row ] output_file . write ( \" \\t \" . join ( row ) + ' \\n ' ) input_file . close () output_file . close ()","title":"Chapter 8, Sorting Data"},{"location":"Managing Your Biological Data with Python/#chapter-9-pattern-matching-and-text-mining","text":"Find a sequence pattern in a sequence regex, regular expression re package. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import re # define a string with occurrences of regex: seq = 'VSVLTMFRYAGWLDRLYMLVGTQLAAIIHGVALPLMMLI' # compile a pattern and assign it to a variable pattern = re . compile ( '[ST]Q' ) # search for the pattern in the string match = pattern . search ( seq ) if match : # print the first match along the sequence with the group() method # 4 characters before and after the pattern print ' %10s ' % ( seq [ match . start () - 4 : match . end () + 4 ]) print ' %6s ' % match . group () else : print \"no match\" Output: 1 2 MLVGTQLAAI TQ re methods group() ; return the matching subgroup. span() ; return a tuple containing the starting and ending position of the match. start() ; return the starting position. end() ; return the ending position. search() ; find the first occurence within the string. match() ; attempt to match a pattern to a string. If the pattern is within the string, it will not match it. It will find \u2018S\u2019 in \u2018ST\u2019, but not in \u2018TST\u2019. findall() ; return a list containing all the matching substrings. finditer() ; find all the match objects corresponding to the regex matches and returns them in the form of an iterator. 1 2 3 4 5 6 7 8 9 10 11 12 13 import re pattern = re . compile ( 'R.[ST][^P]' ) seq = 'RQSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP' # findall returns a list of all matches matches = pattern . findall ( seq ) print matches # finditer returns an iterator of match objects match_iter = pattern . finditer ( seq ) for match in match_iter : print match . group (), match . span (), match . start (), match . end () Ouput: 1 2 3 4 [ 'RQSA' , 'RRSL' , 'RPSK' ] RQSA ( 0 , 4 ) 0 4 RRSL ( 18 , 22 ) 18 22 RPSK ( 40 , 44 ) 40 44 More re methods Divide regex in subgroups, each matching a different component of interest. (.) ; delimite a group. R(.)[ST][^P] ; stand for \u2018R\u2019, \u2018any character\u2019, pattern \u2018ST\u2019, any character different from \u2018P\u2019. The \u2018any character\u2019 is also a subgroup. What ever is found between R and [ST][^P] is a subgroup. R(.{0,3})[ST][^P] ; add a `{0,3}. This qualifier or quantifiers means that at least 0 and at most 3 repetitions of \u2018R\u2019. group() ; always return the complete matching substring (0 for no subgroup). group(#) ; return subgroups numbered from left to right in increasing order (subgroup #). Find multiple patterns in a search string 1 2 3 4 5 6 7 8 9 10 11 12 13 import re seq = 'QSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP' pattern1 = re . compile ( 'R(.)[ST][^P]' ) match1 = pattern1 . search ( seq ) print match1 . group () print match1 . group ( 1 ) pattern2 = re . compile ( 'R(.{0,3})[ST][^P]' ) match2 = pattern2 . search ( seq ) print match2 . group () print match2 . group ( 1 ) Output: 1 2 3 4 RRSL R RRRSL RR Another example with two subgroups 1 2 3 4 5 6 7 8 9 10 import re seq = 'zzabcdzz' pattern = re . compile ( '(a(b)c)d' ) match = pattern . search ( seq ) print match . group ( 0 ) print match . group ( 1 ) print match . group ( 2 ) print match . groups () groups() ; return a tuple with the substrings corresponding to all subgroups. Output: 1 2 3 4 abcd abc b ( 'abc' , 'b' ) Assign names to subgroup: ?P<w1> and ?P<w2> 1 2 3 4 5 6 7 8 9 import re seq = 'zzabcdzz' pattern = re . compile ( '(?P<w1>a(?P<w2>b)c)d' ) match = pattern . search ( seq ) print match . group ( 0 ) print match . group ( 'w1' ) print match . group ( 'w2' ) Ouput: 1 2 3 abcd abc b More re methods splits(s) ; split the string s at the matches of a regex. sub(r, s, [c]) ; return a new string s where nonoverlapping occurrences of a given pattern in the string are all replaced with the value of r . c , an optional number, stands for the maximum numbers of occurences. subn(r, s, [c]) ; do what sub() does, but returns a tuple of two elements; the first element is the new string (as with sub(r, s, [c]) ) and the second is the number of replacements. Split text and replace separators with a pattern 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import re separator = re . compile ( '\\|' ) # split annotation = 'ATOM:CA|RES:ALA|CHAIN:B|NUMRES:166' columns = separator . split ( annotation ) print columns # replace new_annotation = separator . sub ( '@' , annotation ) print \"replace all |:\" print new_annotation new_annotation2 = separator . sub ( '@' , annotation , 2 ) print \"replace 2 |:\" print new_annotation2 new_annotation3 = separator . subn ( '@' , annotation ) print \"replace all |:\" print new_annotation3 new_annotation4 = separator . subn ( '@' , annotation , 2 ) print \"replace 2 |:\" print new_annotation4 Output: 1 2 3 4 5 6 7 8 9 [ 'ATOM:CA' , 'RES:ALA' , 'CHAIN:B' , 'NUMRES:166' ] replace all | : ATOM : CA @RES : ALA @CHAIN : B @NUMRES : 166 replace 2 | : ATOM : CA @RES : ALA @CHAIN : B | NUMRES : 166 replace all | : ( 'ATOM:CA@RES:ALA@CHAIN:B@NUMRES:166' , 3 ) replace 2 | : ( 'ATOM:CA@RES:ALA@CHAIN:B|NUMRES:166' , 2 ) Find transcription factor binding sites 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import re genome_seq = open ( 'genome.txt' ) . read () # read transcription factor binding site patterns sites = [] for line in open ( 'TFBS.txt' ): fields = line . split () tf = fields [ 0 ] site = fields [ 1 ] sites . append (( tf , site )) # match all TF's to the genome and print matches for tf , site in sites : tfbs_regexp = re . compile ( site ) all_matches = tfbs_regexp . findall ( genome_seq ) matches = tfbs_regexp . finditer ( genome_seq ) if all_matches : print tf , ':' for tfbs in matches : print ' \\t ' , tfbs . group (), tfbs . start (), tfbs . end () Parse abstracts from PubMed HTML pages The script opens the HTML webpage and parses it in order to selectively fetch some parts of it. Extract the title and the abstract text. The title of the paper is enclosed between <h1> and </h1> . Whereas the text of the abstract is enclosed between <h3> Abstract </h3><div class = \"\" ><p> and </p> . The paper. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import urllib2 import re pmid = '18235848' url = 'http://www.ncbi.nlm.nih.gov/pubmed?term= %s ' % pmid handler = urllib2 . urlopen ( url ) html = handler . read () title_regexp = re . compile ( '<h1>.{5,400}</h1>' ) title_text = title_regexp . search ( html ) abstract_regexp = re . compile ( '<AbstractText>.{20,3000}</AbstractText>' ) abstract_text = abstract_regexp . search ( html ) print 'TITLE:' , title_text . group () print 'ABSTRACT:' , abstract_text . group () Output: 1 2 TITLE: < h1 > Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade. </ h1 > ABSTRACT: < AbstractText > Schistosomiasis is a tropical disease associated with high morbidity and mortality, currently affecting over 200 million people worldwide. Praziquantel is the only drug used to treat the disease, and with its increased use the probability of developing drug resistance has grown significantly. The Schistosoma parasites can survive for up to decades in the human host due in part to a unique set of antioxidant enzymes that continuously degrade the reactive oxygen species produced by the host's innate immune response. Two principal components of this defense system have been recently identified in S. mansoni as thioredoxin/glutathione reductase (TGR) and peroxiredoxin (Prx) and as such these enzymes present attractive new targets for anti-schistosomiasis drug development. Inhibition of TGR/Prx activity was screened in a dual-enzyme format with reducing equivalents being transferred from NADPH to glutathione via a TGR-catalyzed reaction and then to hydrogen peroxide via a Prx-catalyzed step. A fully automated quantitative high-throughput (qHTS) experiment was performed against a collection of 71,028 compounds tested as 7- to 15-point concentration series at 5 microL reaction volume in 1536-well plate format. In order to generate a robust data set and to minimize the effect of compound autofluorescence, apparent reaction rates derived from a kinetic read were utilized instead of end-point measurements. Actives identified from the screen, along with previously untested analogues, were subjected to confirmatory experiments using the screening assay and subsequently against the individual targets in secondary assays. Several novel active series were identified which inhibited TGR at a range of potencies, with IC(50)s ranging from micromolar to the assay response limit ( approximately 25 nM). This is, to our knowledge, the first report of a large-scale HTS to identify lead compounds for a helminthic disease, and provides a paradigm that can be used to jump-start development of novel therapeutics for other neglected tropical diseases. </ AbstractText > Search for keywords in a series of PubMed abstracts This example can be applied to perform very simple text mining and can be compared to the \u201cfind\u201d tool in Microsoft Word. It might stop on the first occurence. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import urllib2 import re # word to be searched word_regexp = re . compile ( 'schistosoma' ) # list of PMIDs where we want to search the word pmids = [ '18235848' , '22607149' , '22405002' , '21630672' ] for pmid in pmids : url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid handler = urllib2 . urlopen ( url ) html = handler . read () title_regexp = re . compile ( '<h1>.{5,400}</h1>' ) title = title_regexp . search ( html ) title = title . group () abstract_regexp = re . compile ( '<AbstractText>.{20,3000}</AbstractText>' ) abstract = abstract_regexp . search ( html ) abstract = abstract . group () word = word_regexp . search ( abstract , re . IGNORECASE ) if word : # display title and where the keyword was found print title print word . group (), word . start (), word . end () Circumvent the problem with the finditer() method. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import urllib2 import re # word to be searched word_regexp = re . compile ( 'schistosoma' ) # list of PMIDs where we want to search the word pmids = [ '18235848' , '22607149' , '22405002' , '21630672' ] for pmid in pmids : url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid handler = urllib2 . urlopen ( url ) html = handler . read () title_regexp = re . compile ( '<h1>.{5,400}</h1>' ) title = title_regexp . search ( html ) title = title . group () abstract_regexp = re . compile ( '<AbstractText>.{20,3000}</AbstractText>' ) abstract = abstract_regexp . search ( html ) abstract = abstract . group () words = word_regexp . finditer ( abstract ) if words : # display title and where the keyword was found print title for word in words : print word . group (), word . start (), word . end () Output: 1 2 3 4 < h1 > Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade. </ h1 > < h1 > The redox biology of schistosome parasites and applications for drug development. </ h1 > < h1 > Moonlighting by different stressors: crystal structure of the chaperone species of a 2-Cys peroxiredoxin. </ h1 > < h1 > Investigations of the catalytic mechanism of thioredoxin glutathione reductase from Schistosoma mansoni. </ h1 > More re methods findall() ; look for all (non-overlapping) occurrences of pattern in string; return a list of matches. finditer() ; same as above except returns an iterator instead of a list; for each match, the iterator returns a match object; it is adapted for loops! | ; \u2018OR\u2019. $ ; indicate that a match exists in the string only if the pattern is in the last position of the string. ^ ; indicate that a match exists in the string only if the pattern is in the first position of the string. Python Regex, Characters and Metacharaters","title":"Chapter 9, Pattern Matching and Text Mining"},{"location":"Managing Your Biological Data with Python/#part-3-modular-programming","text":"","title":"Part 3, Modular Programming"},{"location":"Managing Your Biological Data with Python/#chapter-10-divide-a-program-into-functions","text":"Built-in functions length, total, sum, range len() . sum() . range(n, m, step) ; from n to m-1, n = 0 by default. xrange(n, m, step) ; better suited for big numbers. Define functions docstring, docstrings The documentation is retrieved with the __doc__ attribute: type addition.__doc__ . 1 2 3 4 5 6 7 8 def addition ( arg1 , arg2 ): ''' documentation: calculates the sum of two numbers ''' result = arg1 + arg2 return result print addition ( 1 , 1 ) Lambda functions Small anonymous functions; they are not declared using def . They do not contain return statement. They can be defined in an argument in a function (useful). There are nameless. 1 2 3 4 def f ( x ): return x ** 2 print f ( 8 ) vs 1 2 3 g = lambda x : x ** 2 print g ( 8 ) or 1 ( lambda x : x ** 2 )( 8 ) Use a lambda function as an argument of a built-in function: 1 2 3 4 data = [ 'ASDF' , 'SDFSADGSAG' , 'SDFSD' , 'GSGDGG' ] new_data = sorted ( data , key = lambda x : len ( x )) print new_data Output: 1 [ 'ASDF' , 'SDFSD' , 'GSGDGG' , 'SDFSADGSAG' ] Function Arguments required arguments. keyword arguments. default arguments. variable-length arguments. 1. Required Arguments 1 2 3 4 def print_funct ( num , seq ): print num , seq print_funct ( 10 , \"ABC\" ) Output: 1 10 ABC 2. Keyword Arguments 1 2 3 4 def print_funct ( num , seq ): print num , seq print_funct ( seq = \"ABC\" , num = 10 ) Output: 1 10 ABC 3. Default Arguments sequence The argument is given by default; but can be overwritten! 1 2 3 4 5 def print_funct ( num , seq = \"A\" ): print num , seq print_funct ( 10 , \"ABC\" ) print_funct ( 10 ) Output: 1 2 10 ABC 10 A 4. Variable-Length Arguments argument, list, tuple, dictionary Flexibility of providing any tuple. 1 2 3 4 5 6 def print_args ( * args ): print args print_args ( 1 , 2 , 3 , 4 , 5 ) print_args ( 'Hi' ) print_args ( 100 , 200 , \"ABC\" ) Output: 1 2 3 ( 1 , 2 , 3 , 4 , 5 ) ( 'Hi' ) ( 100 , 200 , 'ABC' ) Provide both the keys and values for a returned dictionary. 1 2 3 4 def print_args2 ( ** args ): print args print_args2 ( num = 100 , num2 = 200 , seq = \"ABC\" ) Output: 1 { 'num' : 100 , 'seq' : 'ABC, ' num2 ': 200} Convert a string into a tuple or vice-versa struct package. In the format, s stands for string, 3s stands for a three-character string. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import struct # pack() method; creates a string format = '2s1s1s1s1s' group = struct . pack ( format , '10' , '2' , '3' , '4' , '5' ) print group # unpack() method; parses the string to a tuple format = '1s2s1s1s' line = '12345' col = struct . unpack ( format , line ) print col # calcsize() returns the number of characters # in a given format string format = '30s30s20s1s' print struct . calcsize ( format ) Output: 1 2 3 102345 ( '1' , '23' , '4' , '5' ) 81 Then, convert the tuple to a list if needed. Function to calculate distance between two coordinates power math package. pow(x, y) replaces x ** y . distance package; geometric calculations. calc-dist() . 1 2 3 4 5 6 7 8 9 10 11 12 from math import sqrt def calc_dist ( p1 , p2 ): '''returns the pythagorian distance between two 3D points''' dx = p1 [ 0 ] - p2 [ 0 ] dy = p1 [ 1 ] - p2 [ 1 ] dz = p1 [ 2 ] - p2 [ 2 ] distsq = pow ( dx , 2 ) + pow ( dy , 2 ) + pow ( dz , 2 ) distance = sqrt ( distsq ) return distance print calc_dist ([ 3.0 , 3.0 , 3.0 ], [ 9.0 , 9.0 , 9.0 ]) Output: 1 10.3923048454","title":"Chapter 10, Divide a Program into Functions"},{"location":"Managing Your Biological Data with Python/#chapter-11-managing-complexity-with-classes","text":"Classes Define a Class: class Protein . Add docstrings. The constructor __init__() is a special function that defines what kinds of data your class should contain and enables the creation of instances. Add a docstring. One class can have many instances. lys = Protein('lysozyme') is an instance of class Protein . Create a class function; a class function works like a method. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Protein : '''Class storing protein names''' def __init__ ( self , name ): '''Sets the name of a protein''' self . name = name def write ( self ): '''Writes protein name to the screen.''' print 'I am ' + self . name lys = Protein ( 'lysozyme' ) myo = Protein ( 'myoglobin' ) print \"Docstrings:\" print Protein . __doc__ print Protein . __init__ . __doc__ print Protein . write . __doc__ print \"\" print lys . name print myo . name lys . write () # a class function works like a method myo . write () Output: 1 2 3 4 5 6 7 8 9 Docstrings : Class storing protein names Sets the name of a protein Writes protein name to the screen . lysozyme myoglobin I am lysozyme I am myoglobin Printing a object created from a class Printing an object from a class is not very informative. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Pea : def __init__ ( self , genotype ): self . genotype = genotype class PeaStrain : def __init__ ( self , peas ): self . peas = peas yellow = Pea ( 'GG' ) green = Pea ( 'gg' ) strain = PeaStrain ([ yellow , green ]) print Pea print PeaStrain print Pea . __init__ print PeaStrain . __init__ print yellow print green print strain Output: 1 2 3 4 5 6 7 8 __main__ . Pea __main__ . PeaStrain < unbound method Pea . __init__ > < unbound method PeaStrain . __init__ > < __main__ . Pea instance at 0x0000000001DC6748 > < __main__ . Pea instance at 0x0000000001DC6748 > < __main__ . Pea instance at 0x000000000216BE08 > < __main__ . PeaStrain instance at 0x000000000216BE48 > __repr__ fixes this problem. The __repr__ method takes no parameters except self. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Pea : def __init__ ( self , genotype ): self . genotype = genotype def __repr__ ( self ): return 'genotype: [ %s ]' % ( self . genotype ) class PeaStrain : def __init__ ( self , peas ): self . peas = peas def __repr__ ( self ): return 'strain with %i peas' % ( len ( self . peas )) yellow = Pea ( 'GG' ) green = Pea ( 'gg' ) strain = PeaStrain ([ yellow , green ]) print Pea print PeaStrain print Pea . __init__ print PeaStrain . __init__ print yellow print repr ( yellow ) print repr ( green ) print repr ( strain ) New output: 1 2 3 4 5 6 7 8 __main__ . Pea __main__ . PeaStrain < unbound method Pea . __init__ > < unbound method PeaStrain . __init__ > genotype : [ GG ] genotype : [ GG ] genotype : [ gg ] strain with 2 peas No difference between print yellow and print repr(yellow) . Objects\u2019 predefined class attributes: __doc__ : the docstring. __dict__ : a list of attributes. __name__ : the name of the object. __bases__ : the object inherits from what object. For example, above, the PeaStrain class inherits from the Pea class. Classes (subclasses) can inherit from other classes and extend their functionality. __module__ : the name of the module in which this class was defined. __main__ means the object is in the current module. A python script can be imported just like a package: import Protein . from Protein import write . import math . from math import sqrt . Synonyms: packages, library, module, script, etc. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Pea : '''docstring 1''' def __init__ ( self , genotype ): self . genotype = genotype def __repr__ ( self ): return 'genotype: [ %s ]' % ( self . genotype ) yellow = Pea ( 'GG' ) print yellow print Pea . __doc__ print Pea . __dict__ print Pea . __name__ print Pea . __bases__ print Pea . __module__ print \"\" class Peaclone ( Pea ): '''docstring 2''' blue = Peaclone ( 'AA' ) print blue print Peaclone . __doc__ print Peaclone . __dict__ print Peaclone . __name__ print Peaclone . __bases__ print Peaclone . __module__ Output: 1 2 3 4 5 6 7 8 9 10 11 12 13 genotype : [ GG ] docstring 1 { '__module__' : '__main__' , '__doc__' : 'docstring 1' , '__init__' : < function __init__ at 0x000000000229FC18 > , '__repr__' : < function __repr__ at 0x000000000229FC88 > } Pea () __main__ genotype : [ AA ] docstring 2 { '__module__' : '__main__' , '__doc__' : 'docstring 2' } Peaclone ( < class __main__ . Pea at 0x0000000001D3C828 > ,) __main__ More attributes: __del__ . __getattr__ . __setattr__ . __delattr__ .","title":"Chapter 11 Managing Complexity with Classes"},{"location":"Managing Your Biological Data with Python/#chapter-12-debugging","text":"bug Kinds of errors: Logical errors. Syntax errors. Runtime errors. IDE (Eric, PyCharm, etc.) automate debugging. 1. Logical (semantic) errors Results are wrong because the program does something different from what you had in mind. 2. Syntax errors Wrong symbol, mispelling, wrong position in the code, etc.. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def evaluate_data ( data , lower = 100 , upper = 300 ): \"\"\"Analyze a two-column table. Counts data points in three bins.\"\"\" smaller = 0 between = 0 bigger = 0 for length in data : if length < lower : smaller = smaller + 1 elif lower < length < upper : between = between + 1 elif length > upper : bigger = 1 return smaller , between , bigger def read_data ( filename ): \"\"\"Reads neuron lengths from a text file.\"\"\" primary , secondry = [], [] for line in open ( filename ): category , length = line . split ( \" \\t \" ) length = float ( length ) if category == \"Primary\" primary . append ( length ) elif category == \"Secondary\" : secondary . append ( length ) return primary , secondary def write_output ( filename , count_pri , count_sec ): \"\"\"Writes counted values to a file.\"\"\" output = open ( filename , \"w\" ) output . write ( \"category <100 100-300 >300 \\n \" ) output . write ( \"Primary : %5i %5i %5i \\n \" % count_pri ) output . write ( \"Secondary: %5i %5i %5i \\n \" % count_sec ) output . close () primary , secondary = read_data ( 'neuron_data.xls' ) count_pri = evaluate_data ( primary ) count_sec = evaluate_data ( secondary ) write_output_file ( 'results.txt' , count_pri , count_sec ) Bug 1 1 if category == \"Primary\" Cause: SyntaxError : invalid syntax . Fix: 1 if category == \"Primary\" : Other common SyntaxErrors : EOL or End Of Line; an open quote somewhere without a matching closing quote. TokenError ; an open parenthesis, but not a matching closing parenthesis. etc. Bug 2 1 write_output_file ( 'results.txt' , count_pri , count_sec ) Cause: NameError : name 'write_output_file' is not defined . Fix: 1 2 3 4 5 file = open ( 'results.txt' , 'w' ) file . write ( str ( count_pri )) file . write ( ' \\n ' ) file . write ( str ( count_sec )) file . close () 3. Runtime Error IOError 1 primary , secondary = read_data ( 'neuron_data.xls' ) Cause: IOError: [Errno21] No such file or directory: 'neuron_data.xls' Fix: the file extention is .txt. Other common bugs and causes: Mispelled files, directory name. Wrong website URL. User without the permission or access. The file is already opened. Problem with the Internet connection. Whitespace, uppercase, lowercase letters. File in a different directory. Expected date format. etc. NameError 1 2 3 4 primary , secondry = [], [] ... ... elif category == \"Secondary\" : Cause: NameError: 'secondary' is not defined . The \u2018name\u2019 was misspelled when called. Fix: add the line print dir() before the errors occurs. It shows the list of variables that are known. In the above case, only secondry exits while secondary is called. Choose one. Other common bugs and causes: Unknown object name: a name was not imported ( import * ). a name was not initialized (as in counter = 0 for counter += 1 ). IndexError Cause and fix: when print data[3] looks into data = [1, 2, 3] , the list index is out of range. KeyError 1 2 spam = { 'cat' : 'Zophie' , 'dog' : 'Basil' , 'mouse' : 'Whiskers' } print ( 'The name of my pet zebra is ' + spam [ 'zebra' ]) Cause and fix: the key does not exist! ImportError Causes and fixes: The imported module name is mispelled. The imported module is located in a subdirectory without an __init__.py file. Try adding import sys and print sys.path; you need to add the directory to the PYTHONPATH variable or to append it to the sys.path. The imported module has a duplicate name (two functions with the same name; try working with classes to avoir that). ValueError Cause and fix: when an object is loaded with a wrong type to perform another operation; variable range_a should be a number for the loop for a in range(range_a): , but a string is given instead. Other common bugs and causes: IndentationError : unexpected indent , IndentationError : unindent does not match any outer indentation level , and IndentationError : expected an indented block . TypeError Cause and fix: an object does not support item assignment. 1 2 spam = 'I have a pet cat.' spam [ 13 ] = 'r' Cause: cannot convert implicitly an object. 1 2 numEggs = 12 print ( 'I have ' + numEggs + ' eggs.' ) Fix: 1 2 numEggs = 12 print ( 'I have ' + str ( numEggs ) + ' eggs.' ) Cause: an object is misinterpreted (for another object). 1 2 3 spam = [ 'cat' , 'dog' , 'mouse' ] for i in range ( spam ): print ( spam [ i ]) Fix: for i in spam: . AttributeError Cause and fix: apply the right method. 1 2 spam = 'THIS IS IN LOWERCASE.' spam = spam . lowerr () UnboundLocalError Cause and fix: a variable is referenced before assignment. Countermeasures to prevent errors Break down the code in parts; print to a file using python code.py > output.txt . Compare the input and output (print the input data, print the output data, create control points). Add lots of print statements within the code as control points, Use descriptive and explicit object names ( sequence_file is better than s_file ). Start function with verbs ( read_sequence_file is better than seq_file ). Add comments. Avoid import * , but rather from math import pi . Follow PEP8 and PEP20! pylint and flake8 packages. IDE (Eric, PyCharm, Spyder, etc.) automate debugging and easily execute pylint and flake8 . A note on raw_input() and input() python2, python3, py2, py3 In Python 2, raw_input() takes exactly what the user typed and passes it back as a string. input() takes the raw_input() and performs an eval() on it as well. input() expects a syntactically correct python statement where raw_input() does not. The eval() function run the code within itself: 1 2 3 4 5 >>> x = 1 >>> eval ( 'x + 1' ) 2 >>> eval ( 'x' ) 1 In Python 3, raw_input() is renamed to input() and the old input() is removed. If you want to use the old input() , you can do eval(input()) . Countermeasures to prevent errors: the Python debugger or pdb pdb package. 1 2 3 4 # on top of the code import pdb pdb . set_trace () The code is executed line by line: \u2018n\u2019 execute the next line. \u2018s\u2019 execute the next line but does not descend into functions. \u2018l\u2019 shows where in the code the program currently is. \u2018c\u2019 continues execution normally. Countermeasurea to prevent errors: try, except 1 2 3 4 5 6 try : a = float ( raw_input ( \"Insert a number:\" )) print a except ValueError : print \"You haven't inserted a number. Please retry.\" raise SystemExit else is optional and only executed if no exception was generated. 1 2 3 4 5 6 7 8 9 10 try : filename = raw_input ( \"Insert a filename:\" ) in_file = open ( filename ) except IOError : print \"The filename %s has not been found.\" % filename raise SystemExit else : for line in in_file : print line in_file . close () Usually, exceptions are typos and wrong entries: SyntaxError . IOError . NameError . ValueError . Rarely will we see: IndexError . KeyError . ImportError . TypeError . AttributeError . UnbounLocalError .","title":"Chapter 12, Debugging"},{"location":"Managing Your Biological Data with Python/#chapter-13-using-external-modules-the-python-interface-to-r","text":"RPy2 package; bridge Python with R. The R code: 1 2 3 4 5 6 7 8 p = pi x = c ( 1 , 2 , 3 , 4 , 5 , 6 ) y = seq ( 1 , 10 ) m = matrix ( y , nrow = 5 ) n = matrix ( y , ncol = 5 ) f = read.table ( 'RandomDistribution.tsv' , sep = '\\t' ) f_matrix = matrix ( f , ncol = 7 ) mean_first_col = mean ( f_mean [ 0 ]) The Python code: 1 2 3 4 5 6 7 8 9 10 11 12 import rpy2.reobjects as robjects r = robjects . r pi = r . pi x = r . c ( 1 , 2 , 3 , 4 , 5 , 6 ) y = r . seq ( 1 , 10 ) m = r . matrix ( y , nrow = 5 ) n = r . matrix ( y , ncol = 5 ) f = r ( \"read.table('RandomDistribution.tsv', sep = ' \\t ')\" ) f_matrix = r . matrix ( f , ncol = 7 ) mean_first_col = r . mean ( f_mean [ 0 ]) - Python is better suited to implement solutions by building GUIs or freezing the code. - Rpy2 is the best of both worlds: - R statistical analyses and data visualization. - Python computation power with SciPy/NumPy/Pandas. Calculate a mean value from a table file 1 2 3 4 5 6 7 import rpy2.robjects as robjects r = robjects . r table = r ( \"read.table('RandomDistribution.tsv', sep = ' \\t ')\" ) matrix = r . matrix ( table , ncol = 7 ) mean_first_col = r . mean ( matrix [ 0 ]) print mean_first_col Draw a histogram 1 2 3 4 5 6 7 8 9 10 11 12 13 import rpy2.robjects as ro from rpy2.robjects.packages import importr r = ro . r table = r ( \"read.table('RandomDistribution.tsv',sep = ' \\t ')\" ) grdevices = importr ( 'grDevices' ) grdevices . png ( file = \"Plot.png\" , width = 512 , height = 512 ) r . plot ( table [ 1 ], table [ 2 ], xlab = \"x\" , ylab = \"y\" ) grdevices . dev_off () grdevices . png ( file = \"Histogram.png\" , width = 512 , height = 512 ) r . hist ( table [ 4 ], xlab = 'x' , main = 'Distribution of values' ) grdevices . dev_off () Calculate a z-score and a p-value 1 2 3 4 5 6 7 8 9 10 11 12 13 import rpy2.robjects as ro r = ro . r table = r ( \"read.table('RandomDistribution.tsv',sep = ' \\t ')\" ) m = r . mean ( table [ 2 ], trim = 0 , na_rm = 'FALSE' ) sdev = r . sd ( table [ 2 ], na_rm = 'FALSE' ) value = 0.01844 zscore = ( m [ 0 ] - value ) / sdev [ 0 ] print zscore x = r . abs ( zscore ) pvalue = r . pnorm ( - x [ 0 ]) print pvalue [ 0 ] Create an interactive plot and histogram from data in a file 1 2 3 4 5 6 import rpy2.robjects as robjects r = robjects . r table = r ( \"read.table('RandomDistribution.tsv', sep = ' \\t ')\" ) r . plot ( table [ 1 ], table [ 2 ], xlab = \"x\" , ylab = \"y\" ) r . hist ( table [ 4 ], xlab = 'x' , main = 'Distribution of values' ) Create an interactive plot 1 2 3 4 import rpy2.robjects as ro r = ro . r r . plot ( r . pnorm ( 100 ), xlab = \"y\" , ylab = \"y\" ) Conduct a chi-square test on data from a text file 1 2 3 4 5 6 7 8 9 import rpy2.robjects as ro r = ro . r table = r ( \"read.table('Chi-square_input.txt', header = TRUE, sep = ' \\t ')\" ) print r . names ( table ) cont_table = r . table ( table [ 1 ], table [ 2 ]) chitest = r [ 'chisq.test' ] print chitest ( table [ 1 ], table [ 2 ])","title":"Chapter 13, Using External Modules, The Python Interface to R"},{"location":"Managing Your Biological Data with Python/#chapter-14-building-program-pipelines","text":"os package. sys package. Programs can work together with Python Create path and file variables. Create command line. Execute commands from the command line (as if you did it with a mouse and keyboard) with os.system . REF: Appendix D. 1 2 3 4 5 6 7 8 import os output_dir = '/home/RNA-seq/tophat_dir/' output_file = 'accepted_hits.txt' command_line = 'pgm -o %s%s ' % ( output_dir , output_file ) os . system ( command_line ) Command lines in Python UNIX to Python: UNIX pwd ; print os.getcwd() . UNIX ls ; print os.listdir('.') . UNIX cd ; os.chdir('../data/') . UNIX mkdir ; os.mkdir() . UNIX rmdir ; os.rmdir() . and many more. Pipelines Pipeline are scripts connecting programs to each other (run two or more external programs from command lines). A program that runs another program is a wrapper . Exchange filenames and data between programs. sys.argv ; Python program sorted parameters. import sys ; access or print them. 1 2 3 4 5 6 7 8 9 10 11 import sys import os sys . path . append ( '/home/RNA-seq/' ) from pathvariables import tophat_dir , index_dir if os . path . exists ( tophat_dir ) and os . path . exists ( index_dir ): os . system ( 'tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt' ) else : print \"You have to create tophat and/or index directories before running your wrapper\" One problem with pipelines is lagging. The system call of the second program should occur when the execution of the first program has finished, especially if the second one uses as input the output of the first one. Use subprocesses, such as os.popen() or subprocess.call() , to wait for the command to complete and return a value corresponding to the program exit status (0 for success, 256 for failure) A more robust trick is to insert an action and verify its success after a system call and before the subsequent system call. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import sys import os from pathvariables import tophat_dir , index_dir , cufflinks_dir sys . path . append ( '/home/RNA-seq/' ) from pathvariables import tophat_dir , index_dir , cufflinks_dir # the tophat program crates an output file os . system ( 'tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt' ) # here we don't know whether the tophat output file is comleted and available # we open and close a dummy file, so the operating system catches up lag_file = open ( 'dummy.txt, ' w ') lag_file . write ( 'tophat completed' ) lag_file . close () # read the output file if os . path . exists ( '/home/RNA-seq/dummy.txt' ): os . system ( 'cufflinks -o ' + cufflinks_dir + ' ' + tophat_dir + '/accepted_hits.txt' ) Attributes print dir() ; Visualize attributes. Some attributes are module-specific, such as locatime, whereas others refer to modules in general: __file__ ; return the path of the module. __doc__ ; return the module documentation, if present. __name__ ; return the name of the imported file without the .py suffix if the module is imported and the string '__main__' is executed. Execute <statements> only if the module is run from the command line and not imported by means of an import statement: 1 2 if __name__ == '__main__' : < statements > Working with files and directories os.path package. os.path.split(filename) ; split a filename from the directory names. os.path.exists(filename) ; verify if the file exists, return True or False. Export the path In Windows, add the path to the PATH environment variables. In PowerShell: $ env : PYTHONPATH = \"$env:PYTHONPATH;.\" In UNIX, enter in the bash: export PYTHONPATH=. or add PYTHONPATH=. . In a Python code, add to the beginning of the script: 1 2 3 import sys sys . path . append ( '.' ) # '/var/www/' Or with sys.path.append('pathmodules/') . Read files from directories 1 2 3 4 import os for filename is os . listdir ( 'data/' ): os . system ( '<my_program> %s ' % ( filename )) os.remove('log.txt') ; remove files. tempfile package; create temporary files.","title":"Chapter 14, Building Program Pipelines"},{"location":"Managing Your Biological Data with Python/#chapter-15-writing-good-programs","text":"Priorities Make it work. Make it nice. Make if fast. Tips Divide a programming project into smaller tasks. What are the inputs? What are the outputs? What is between them? Write smaller programs; split a program into functions and classes. Analyze and run tests. Adopt PEP. Scaffold before writing a functional program: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def read_files ( directory ): ''' Reads a... ''' pass def filter ( sequences ): ''' Removes all... ''' pass ... if __name == '__main__' : INPUT_DIR = 'aaa/' OUTPUT_FILE = 'filtered.txt' seq = read_files ( INPUT_DIR ) filter ( seq ) ... Adopt PEP Variables in functions in lowercase. Constants in modules in uppercase. A function name starts with a verb. After each function, two empty lines. After each logical chunks of long functions, one empty line. Comment. Keep lines shorter than 80 characters long. Each class, function, and variable has a docstring; docstrings can be read with print object.__doc__ . Enforce PEP pylint package. pylint is a Python source code analyzer which looks for programming errors, helps enforcing a coding standard and sniffs for some code smells. Download an install pylint. Or install it with pip . Doc Run pylint python_file.py . flake8 package. flake8 is a modular source code checker (a wrapper ). It works with pep8 , pyflakes , pycodestyle , and so on. Version controls Use version control programs (Mercurial, git, SVN). Use repository (GitHub, Bitbucket) to control program versions. GitHub Bitbucket SourceForce Gitlab and others. Before releasing (to a repository) Create a directory with a concise name containing all the project. Set a version number (0.1 or 1.0). Write a README.TXT file with the name of the program, the author, contacts, numbers, emails, a version number, the program purpose in 50-100 words, how to use the program, simple command-line examples, the license (\u201cAll rights reserved\u201d, MIT, etc.) Create a zip file out of the directory including the README.TXT file in addition to the unzipped directory. Release the project on a repository (for example, with git, push the project to the repository). Releasing a distribution Release a distribution to a repository for others to download and install. Freezing a program Non-programmer would rather want an execuble program they can unzip and run. Compile the code or freeze it! cx_freeze is a set of utilities that create standalone executables from python scripts for any platform or OS. i. There are alternatives to \u2018cx_freeze\u2019 such as bbfreeze . pyinstaller is a simpler alternative (it is not as flexible as cx_freeze but it can create single files). distutils is a Python package that provides support for building and installing additional modules (libraries or packages) into a Python installation. The new modules may be either 100%-pure Python, written in C, or coded in both Python and C. distutils autogenerates an install script. i. Such distribution needs a setup.py file with the group of subdirectories and program files. i. py2exe is an extension to the distutils package to create executable files on Windows. i. py2app is an extension to the distutils packages to create executable files on OS X. nuitka is a Python compiler, compatible with CPython. i. CPython is a source code interpreter with an interface with several languages, including C, in which one must explicitly write bindings in a language other than Python. pypy is an alternative to nuitka . Cython is a compiled language that generates CPython extension modules. Jython does the same, but in Java. Continuous improvement A good program is never finished: Create a baseline release. Update and release new versions. Tell the users what is new. Listen to users, improve on it. Go on programming. Software development The Agile Manifesto. Methodologies: Scrum, eXtreme Programming, etc.","title":"Chapter 15, Writing Good Programs"},{"location":"Managing Your Biological Data with Python/#part-4-data-visualization","text":"","title":"Part 4, Data Visualization"},{"location":"Managing Your Biological Data with Python/#chapter-16-creating-scientific-diagrams","text":"matplotlib package. Pillow or PIL package. Tip: install the entire SciPy Stack: (Python (2.x >= 2.6 or 3.x >= 3.2), NumPy (>= 1.6), SciPy library (>= 0.10), Matplotlib (>= 1.1) with dateutil and pytz, IPython (>= 0.13) with pyzmq and tornado, pandas (>= 0.8), Sympy (>= 0.7), nose (>= 1.1). Matplotlib depends on Pillow for reading and saving JPEG, BMP, and TIFF image files. Matplotlib requires MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are required for the animation module. Add nose , mock , and Inkscape. Draw a simple line plot Provide (x, y) points. figure() ; main function is plot() . savefig() ; save the plot in a file. show() ; show the plot in a window. 1 2 3 4 5 6 7 8 9 from pylab import figure , plot , savefig xdata = [ 1 , 2 , 3 , 4 ] ydata = [ 1.25 , 2.5 , 5.0 , 10.0 ] figure () plot ( xdata , ydata ) savefig ( 'figure1.png' ) Result: Plot a sine function Generate (x, y) points; first the x ; then generate the y with the x . plot() with a line type 'kd' and linewidth = 1 . 1 2 3 4 5 6 7 8 9 10 11 12 13 from pylab import figure , plot , text , axis , savefig import math figure () xdata = [ 0.1 * i for i in range ( 100 )] ydata = [ math . sin ( j ) for j in xdata ] plot ( xdata , ydata , 'kd' , linewidth = 1 ) text ( 4.8 , 0 , \"$y = sin(x)$\" , horizontalalignment = 'center' , fontsize = 20 ) axis ([ 0 , 3 * math . pi , - 1.2 , 1.2 ]) savefig ( 'sinfunc.png' ) Result: Draw a histogram Provide the (x, y) points in lists, and the number of bins. hist() needs data points and n_bins . alpha stands for the graph color transparency. Add a title, labels, axes, and gridlines. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from pylab import figure , title , xlabel , ylabel , hist , axis , grid , savefig data = [ 1 , 1 , 9 , 1 , 3 , 5 , 8 , 2 , 1 , 5 , 11 , 8 , 3 , 4 , 2 , 5 ] n_bins = 5 figure () num , bins , patches = hist ( data , n_bins , normed = 1.0 , histtype = 'bar' , facecolor = 'green' , alpha = 0.75 ) title ( 'Histogram' ) xlabel ( 'value' ) ylabel ( 'frequency' ) axis () grid ( True ) savefig ( 'histogram.png' ) Result: Draw a bar plot count : two series, x1 and x2 with each four categories, nucleotides . Add a title, labels, axes and ticks to the axes, and a legend. xticks(x1, nucleotides) , where the first element is the list of x points and the second element is the label variable. legend() takes the labels of all data sets that are plotted. axis() is set with a list [from left to right, bottom, and top]. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from pylab import figure , title , xlabel , ylabel , xticks , bar , legend , axis , savefig nucleotides = [ \"A\" , \"G\" , \"C\" , \"U\" ] counts = [ [ 606 , 1024 , 759 , 398 ], [ 762 , 912 , 639 , 591 ], ] figure () title ( 'RNA nucleotides in the ribosome' ) xlabel ( 'RNA' ) ylabel ( 'base count' ) x1 = [ 2.0 , 4.0 , 6.0 , 8.0 ] x2 = [ x - 0.5 for x in x1 ] xticks ( x1 , nucleotides ) bar ( x1 , counts [ 1 ], width = 0.5 , color = \"#cccccc\" , label = \"E.coli 23S\" ) bar ( x2 , counts [ 0 ], width = 0.5 , color = \"#808080\" , label = \"T.thermophilus 23S\" ) legend () axis ([ 1.0 , 9.0 , 0 , 1200 ]) savefig ( 'barplot.png' ) Result: Add error bars to a scatterplot or a bar chart errorbar() . bar() . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from pylab import figure , errorbar , bar , savefig figure () # scatterplot with error bars x1 = [ 0.1 , 0.3 , 0.5 , 0.6 , 0.7 ] y1 = [ 1 , 5 , 5 , 10 , 20 ] err1 = [ 3 , 3 , 3 , 10 , 12 ] errorbar ( x1 , y1 , err1 , fmt = 'ro' ) # barplot with error bars x2 = [ 1.1 , 1.2 , 1.3 , 1.4 , 1.5 ] y2 = [ 10 , 15 , 10 , 15 , 17 ] err2 = ( 2 , 3 , 4 , 1 , 2 ) width = 0.05 bar ( x2 , y2 , width , color = 'r' , yerr = err2 , ecolor = \"black\" ) savefig ( 'errorbars.png' ) Result: Draw a pie chart with protruding slices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from pylab import figure , title , pie , savefig nucleotides = 'G' , 'C' , 'A' , 'U' count = [ 1024 , 759 , 606 , 398 ] explode = [ 0.0 , 0.0 , 0.05 , 0.05 ] colors = [ \"#f0f0f0\" , \"#dddddd\" , \"#bbbbbb\" , \"#999999\" ] def get_percent ( value ): '''Formats float values in pie slices to percent.''' return \" %4.1f%% \" % ( value ) figure ( 1 ) title ( 'nucleotides in 23S RNA from T.thermophilus' ) pie ( count , explode = explode , labels = nucleotides , shadow = True , colors = colors , autopct = get_percent ) savefig ( 'piechart.png' , dpi = 150 ) Result: It is possible to use math symbols, subscripts, and superscripts in the strings: xlabel('protein concentration [mM]') . xlabel('protein concentration [$\\muM$]') . It is possible to use placeholder for variables such as: \"4.1f%%\" % (variable) . \"2i%\" % (variable) . etc. The %% stands for percentage. Change the image file resolution (dpi = 100 or 150 or 300 or 600) as in savefig('chart.png', dpi=150) . Colors are based on the PIL library. PIL has 140 colors (X11 color names) such as: 'red' , 'lightred' , 'magenta' , etc. in RGB, red is (255, 0, 0) . white is (255, 255, 255) or '#ffffff' . \u2018black\u2019 is (0, 0, 0) or '#000000' . etc. The X11 color names .","title":"Chapter 16, Creating Scientific Diagrams"},{"location":"Managing Your Biological Data with Python/#chapter-18-manipulating-images","text":"Pillow or PIL package. Paste a small image into a big one 1 2 3 4 5 6 7 from PIL import Image image = Image . open ( 'color.png' , 'r' ) label = Image . open ( 'label.png' , 'r' ) # small legend image . paste ( label , ( 40 , 460 )) image . save ( 'combined.png' ) Result: Resizes a big image to a small one 1 2 3 4 5 6 from PIL import Image image = Image . open ( 'big.png' ) small = image . resize (( 100 , 100 )) small . save ( 'small.png' ) Result: Converts a color to a black/white image 1 2 3 4 5 6 7 from PIL import Image image = Image . open ( 'color.png' , 'r' ) bw_image = Image . new ( 'LA' , image . size , ( 255 , 255 )) bw_image . paste ( image , ( 0 , 0 )) bw_image . save ( 'black_white.png' ) Result: Diminishes the size of all .png files by half 1 2 3 4 5 6 7 8 9 10 from PIL import Image import os for filename in os . listdir ( '.' ): if filename . endswith ( '.png' ): im = Image . open ( filename ) x = im . size [ 0 ] / 2 y = im . size [ 1 ] / 2 small = im . resize (( x , y )) small . save ( 'small_' + filename ) For os.listdir('.') , consult Chapter 14, Building Program Pipelines, Command lines in Python . Draw an image of a plasmid Use constant variable: PLASMID_LENGTH = 4361 is the total number of base pairs in the entire plastmid, SIZE = (500, 500) is the size of the entire image, CENTER = (250, 250) is the center point of the plasmid circle, the center of the image. Create an image: pBR322 = Image.new('RGB', SIZE, 'white') . 'RGB' color scheme, SIZE = (x, y) size in pixels, 'white' set the background color. Draw object pBR322 : DRAW = ImageDraw.Draw(pBR322) . The image object is now in object DRAW . Finally, save the object: pBR322.save('plasmid_pBR322.png') . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 from PIL import Image , ImageDraw import math PLASMID_LENGTH = 4361 SIZE = ( 500 , 500 ) CENTER = ( 250 , 250 ) pBR322 = Image . new ( 'RGB' , SIZE , 'white' ) DRAW = ImageDraw . Draw ( pBR322 ) def get_angle ( bp , length = PLASMID_LENGTH ): \"\"\"Converts base position into an angle.\"\"\" return bp * 360 / length def coord ( angle , center , radius ): \"\"\"Return (x, y) coordinates of a point in a circle.\"\"\" rad = math . radians ( 90 - angle ) x = int ( center [ 0 ] + math . sin ( rad ) * radius ) y = int ( center [ 1 ] + math . cos ( rad ) * radius ) return x , y def draw_arrow_tip ( start , direction , color ): \"\"\"Draws a triangle at the given start angle.\"\"\" p1 = coord ( start + direction , CENTER , 185 ) p2 = coord ( start , CENTER , 160 ) p3 = coord ( start , CENTER , 210 ) DRAW . polygon (( p1 , p2 , p3 ), fill = color ) TET_START , TET_END = get_angle ( 88 ), get_angle ( 1276 ) AMP_START , AMP_END = get_angle ( 3293 ), get_angle ( 4153 ) ORI_START , ORI_END = get_angle ( 2519 ), get_angle ( 3133 ) # drawing the plasmid BOX = ( 50 , 50 , 450 , 450 ) DRAW . pieslice ( BOX , 0 , 360 , fill = 'gray' ) DRAW . pieslice ( BOX , TET_START , TET_END , fill = 'blue' ) DRAW . pieslice ( BOX , AMP_START , AMP_END , fill = 'orange' ) DRAW . pieslice ( BOX , ORI_START , ORI_END , fill = 'darkmagenta' ) DRAW . pieslice (( 80 , 80 , 420 , 420 ), 0 , 360 , fill = 'white' ) draw_arrow_tip ( TET_END , 10 , 'blue' ) draw_arrow_tip ( AMP_START , - 10 , 'orange' ) draw_arrow_tip ( ORI_START , - 10 , 'darkmagenta' ) pBR322 . save ( 'plasmid_pBR322.png' ) Result: Drawings Image extensions: BMP; simple table of pixels. PNG; preserves the color of every single pixel; can be partially transparent. GIF; can be animated; similar to PNG. JPG; compressed format, blurred. TIF; bigger and more precise than PNG. image = Image.open('color.png', 'r') ; read the object. Write points: point = (100, 100) ; with tuples (x, y); x pixels from the left border, y pixels from the top of the image. Write rectangles BOX = (100, 100, 150, 150) ; with tuple (x, y, x\u2019, y\u2019); BOX becomes a constant. DRAW.rectangle(BOX, fill = 'lightblue', outline = 'black') Draw circles inside \u2018guidelines\u2019 or a rectangle: DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = 'grey') . DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = (0, 0, 0)) . DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = '#ffffff') . BOX = (50, 50, 450, 450) DRAW.pieslice(BOX, 0, 360, fill = 'grey', outline = 'black') DRAW.pieslice(BOX, 7, 106, fill = 'blue') Draw an arc: DRAW.arc(BOX, 0, 360, fill = 'black') Draw a polygon: DRAW.polygon((point1, point2, point3) fill = 'lightblue', outline = 'blue') Draw a line: ECOR1 = angle(4359) p1 = coord(ECOR1, CENTER, 160) p1 = coord(ECOR1, CENTER, 210) DRAW.line((p1, p2), fill = 'black', width = 3) Rotate the image: pBR322 = pBR322.rotate(45) Add text: DRAW.text((370, 240), \"EcoR1\", fill = \"black\") Draw an image of a plasmid and label it 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 from PIL import Image , ImageDraw import math PLASMID_LENGTH = 4361 SIZE = ( 500 , 500 ) CENTER = ( 250 , 250 ) pBR322 = Image . new ( 'RGB' , SIZE , 'white' ) DRAW = ImageDraw . Draw ( pBR322 ) def get_angle ( bp , length = PLASMID_LENGTH ): \"\"\"Converts base position into an angle.\"\"\" return bp * 360 / length def coord ( angle , center , radius ): \"\"\"Return (x, y) coordinates of a point in a circle.\"\"\" rad = math . radians ( 90 - angle ) x = int ( center [ 0 ] + math . sin ( rad ) * radius ) y = int ( center [ 1 ] + math . cos ( rad ) * radius ) return x , y def draw_arrow_tip ( start , direction , color ): \"\"\"Draws a triangle at the given start angle.\"\"\" p1 = coord ( start + direction , CENTER , 185 ) p2 = coord ( start , CENTER , 160 ) p3 = coord ( start , CENTER , 210 ) DRAW . polygon (( p1 , p2 , p3 ), fill = color ) TET_START , TET_END = get_angle ( 88 ), get_angle ( 1276 ) AMP_START , AMP_END = get_angle ( 3293 ), get_angle ( 4153 ) ORI_START , ORI_END = get_angle ( 2519 ), get_angle ( 3133 ) # drawing the plasmid BOX = ( 50 , 50 , 450 , 450 ) DRAW . pieslice ( BOX , 0 , 360 , fill = 'gray' ) DRAW . pieslice ( BOX , TET_START , TET_END , fill = 'blue' ) DRAW . pieslice ( BOX , AMP_START , AMP_END , fill = 'orange' ) DRAW . pieslice ( BOX , ORI_START , ORI_END , fill = 'darkmagenta' ) DRAW . pieslice (( 80 , 80 , 420 , 420 ), 0 , 360 , fill = 'white' ) draw_arrow_tip ( TET_END , 10 , 'blue' ) draw_arrow_tip ( AMP_START , - 10 , 'orange' ) draw_arrow_tip ( ORI_START , - 10 , 'darkmagenta' ) DRAW . text (( 150 , 130 ), \"ori\" , fill = ( 0 , 0 , 0 )) DRAW . text (( 340 , 130 ), \"amp\" , fill = ( 0 , 0 , 0 )) DRAW . text (( 300 , 380 ), \"tet\" , fill = ( 0 , 0 , 0 )) pBR322 . save ( 'plasmid_pBR322.png' ) Result:","title":"Chapter 18, Manipulating Images"},{"location":"Managing Your Biological Data with Python/#part-6-cookbook","text":"","title":"Part 6, Cookbook"},{"location":"Managing Your Biological Data with Python/#recipe-2-reversing-and-randomizing-a-sequence","text":"sort, reverse, random, probability, list, loop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 seq = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' print ( seq ) seq_list = list ( seq ) seq_list . reverse () rev_seq = '' . join ( seq_list ) print ( rev_seq ) print ( \"=\" * 25 ) # reverse a sequence, using a loop # rev_seq = '' rev_seq = '' for s in reversed ( seq ): rev_seq = rev_seq + s print ( rev_seq ) print ( \"=\" * 25 ) # reverse a sequence, using seq[start:end:step] rev_seq = seq [: - 1 ] print ( rev_seq ) print ( \"=\" * 25 ) # mixing a sequence import random ran_seq = random . sample ( seq , len ( seq )) print ( ran_seq ) ran_seq = '' . join ( random . sample ( seq , len ( seq ))) print ( ran_seq ) ran_seq = '' . join ( random . sample ( seq , len ( seq ) - 10 )) print ( ran_seq ) print ( \"=\" * 25 ) # mixing a sequence (using random again) ran_seq = '' . join ([ random . choice ( seq ) \\ for x in range ( len ( seq ))]) print ( ran_seq ) print ( \"=\" * 25 ) # shuffle a sequence (using random again) data = list ( seq ) random . shuffle ( data ) shuffled_seq = data print ( shuffled_seq ) shuffled_seq = '' . join ( data ) print ( shuffled_seq ) Ouput: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ABCDEFGHIJKLMNOPQRSTUVWXYZ ZYXWVUTSRQPONMLKJIHGFEDCBA ========================= ZYXWVUTSRQPONMLKJIHGFEDCBA ========================= ABCDEFGHIJKLMNOPQRSTUVWXY ========================= ['F', 'J', 'I', 'L', 'O', 'R', 'U', 'C', 'A', 'V', 'Q', 'M', 'T', 'N', 'B', 'G', 'W', 'P', 'Y', 'H', 'D', 'S', 'Z', 'E', 'X', 'K'] LKAZHTVFGQROUXIMYWESDPCBJN LXRDUVFHKGJZMIAB ========================= RYYEYKWUGMYFYMUWWBOSZWSRMJ ========================= ['R', 'N', 'S', 'E', 'M', 'H', 'A', 'P', 'X', 'F', 'W', 'K', 'J', 'I', 'Y', 'T', 'Z', 'G', 'V', 'O', 'C', 'B', 'Q', 'D', 'L', 'U'] RNSEMHAPXFWKJIYTZGVOCBQDLU","title":"Recipe 2, Reversing and Randomizing a Sequence"},{"location":"Managing Your Biological Data with Python/#recipe-3-creating-a-random-sequence-with-probabilities","text":"random, list, generate, probability 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import random nucleotides = list ( 'ACGT' ) dna = '' while len ( dna ) < 100 : dna += random . choice ( nucleotides ) # choose amoung the list, fetch 1 item print ( dna ) print ( \"=\" * 25 ) nucleotides = list ( 'ACGT' ) probs = { 'A' : 0.3 , 'C' : 0.2 , 'G' : 0.2 , 'T' : 0.3 } # sum of 1.0 assert sum ( probs . values ()) == 1.0 # or # if sum(probs.values()) != 1.0: # raise Exception('Sum of probabilites is not 1.0!') dna = '' while len ( dna ) < 100 : nuc = random . choi","title":"Recipe 3, Creating a Random Sequence with Probabilities"},{"location":"Overview_of_scikit-learn/","text":"Foreword Code snippets and excerpts from the tutorial. Python 3. From DataCamp. With Jupyter Notebook and the In [ ] Out [ ] format. 1 2 3 4 5 # Set the current directory import os os . chdir ( '/home/ugo/Documents/Notebooks/DataCamp, Overview of scikit-learn/' ) print ( os . getcwd ()) 1 /home/... The scikit-learn module \u00b6 We use different algorithms from the sciki-learn module as classifiers (on a binary dependent variable). Most models come from this link . Unused algorithms: Regressions, Ridge regression (for dealing with heteroscedasticity), ElasticNet, Lasso (for dealing with heteroscedasticity), Support Vector Regression (SVR), ensemble models, Classfication, Linear SVC, ensemble SVC, kernel approximation, Clustering, k-means, spectral clustering GMM, Other k-means, Dimensionality reduction, Principal Component Analysis (PCA), Others. Basic level \u00b6 Hard-coded dataset \u00b6 1 2 3 4 5 6 7 # [height, weight, shoe_size] X = [[ 181 , 80 , 44 ], [ 177 , 70 , 43 ], [ 160 , 60 , 38 ], [ 154 , 54 , 37 ], [ 166 , 65 , 40 ], [ 190 , 90 , 47 ], [ 175 , 64 , 39 ], [ 177 , 70 , 40 ], [ 159 , 55 , 37 ], [ 171 , 75 , 42 ], [ 181 , 85 , 43 ]] Y = [ 'male' , 'male' , 'female' , 'female' , 'male' , 'male' , 'female' , 'female' , 'female' , 'male' , 'male' ] Decision tree \u00b6 1 2 3 4 5 6 7 # import decision tree from sklearn import tree # train on the train set clf = tree . DecisionTreeClassifier () clf = clf . fit ( X , Y ) 1 2 3 # test prediction = clf . predict ([[ 190 , 70 , 43 ]]) print ( prediction ) 1 ['male'] Random Forests \u00b6 1 2 3 4 5 6 7 8 9 10 11 from sklearn.ensemble import RandomForestClassifier # set the training parameters clf = RandomForestClassifier ( n_estimators = 1000 ) # train on the same train set clf = clf . fit ( X , Y ) # validate the classifier accuracy = clf . score ( X , Y ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 1.0 1 2 3 # test prediction = clf . predict ([[ 190 , 70 , 43 ]]) print ( prediction ) 1 ['male'] k-Nearest Neighbours \u00b6 1 2 3 4 5 6 7 from sklearn.neighbors import KNeighborsClassifier # set the training parameters neigh = KNeighborsClassifier ( n_neighbors = 3 ) # train on the same train set neigh . fit ( X , Y ) 1 2 3 KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski', metric_params=None, n_jobs=1, n_neighbors=3, p=2, weights='uniform') 1 2 3 # test prediction = neigh . predict ([[ 190 , 70 , 43 ]]) print ( prediction ) 1 ['male'] Logistic regression \u00b6 1 2 3 4 5 6 7 from sklearn.linear_model import LogisticRegression # set the training parameters neigh = LogisticRegression () # train on the same train set neigh . fit ( X , Y ) 1 2 3 4 LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1, penalty='l2', random_state=None, solver='liblinear', tol=0.0001, verbose=0, warm_start=False) 1 2 3 # test prediction = neigh . predict ([[ 190 , 70 , 43 ]]) print ( prediction ) 1 ['female'] Na\u00efve Bayes \u00b6 1 2 3 4 5 6 7 from sklearn.naive_bayes import GaussianNB # set the training parameters gnb = GaussianNB () # train on the same train set gnb = gnb . fit ( X , Y ) 1 2 3 # test prediction = gnb . predict ([[ 190 , 70 , 43 ]]) print ( prediction ) 1 ['male'] Intermediate level \u00b6 Imported dataset \u00b6 Decision tree \u00b6 1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn import tree from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 len ( data ) 1 32561 1 data . shape 1 (32561, 15) 1 data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 32561 entries, 0 to 32560 Data columns (total 15 columns): age 32561 non-null int64 workclass 32561 non-null object final_weight 32561 non-null int64 education 32561 non-null object education_num 32561 non-null int64 marital_status 32561 non-null object occupation 32561 non-null object relationship 32561 non-null object race 32561 non-null object sex 32561 non-null object capital_gain 32561 non-null int64 capital_loss 32561 non-null int64 hours_per_week 32561 non-null int64 native_country 32561 non-null object salary 32561 non-null object dtypes: int64(6), object(9) memory usage: 3.7+ MB 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # set the training parameters, instantiate the classifier clf = tree . DecisionTreeClassifier () # train on the train set clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 0.727198280274 1 2 3 # test prediction = clf . predict ( X_test ) print ( prediction ) 1 ['Female' 'Female' 'Male' ..., 'Male' 'Male' 'Male'] 1 2 3 # create a confusion matrix cm = confusion_matrix ( prediction , Y_test ) print ( cm ) 1 2 [[1613 1037] [1628 5491]] Random Forests \u00b6 1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn.ensemble import RandomForestClassifier from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # set the training parameters clf = RandomForestClassifier ( n_estimators = 1000 ) # train on the train set clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 0.738765482649 1 2 3 # test prediction = clf . predict ( X_test ) print ( prediction ) 1 ['Male' 'Female' 'Male' ..., 'Female' 'Male' 'Female'] 1 2 3 # create a confusion matrix cm = confusion_matrix ( prediction , Y_test ) print ( cm ) 1 2 [[1568 970] [1582 5649]] Random Forests (with the Iris dataset) \u00b6 Iris dataset. 1 2 3 4 5 6 7 from sklearn.cross_validation import cross_val_score , train_test_split import numpy as np from sklearn import datasets from sklearn.ensemble import RandomForestClassifier from sklearn import preprocessing iris = datasets . load_iris () 1 2 3 4 5 6 # feature scaling min_max_scaler = preprocessing . MinMaxScaler () X = min_max_scaler . fit_transform ( iris . data ) # train on the train set clf = RandomForestClassifier ( n_estimators = 200 ) 1 2 3 4 # test our classifier scores = cross_val_score ( clf , X , iris . target , cv = 5 ) print ( \"Accuracy: %0.2f (+/- %0.2f )\" % ( scores . mean (), scores . std () * 2 )) 1 Accuracy : 0.97 (+/- 0.04 ) k-Nearest Neighbours \u00b6 1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn.neighbors import KNeighborsClassifier from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # Import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # set the training parameters, instantiate the classifier clf = KNeighborsClassifier ( n_neighbors = 3 ) # train on the train set clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 0.68113420002 1 2 # create a confusion matrix prediction = clf . predict ( X_test ) 1 2 3 # test cm = confusion_matrix ( prediction , Y_test ) print ( cm ) 1 2 [[1694 1591] [1524 4960]] Logistic regression \u00b6 1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # set the training parameters, instantiate the classifier clf = LogisticRegression () # train on the train set clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 0.669259903777 1 2 3 # create a confusion matrix prediction = clf . predict ( X_test ) print ( prediction ) 1 ['Male' 'Male' 'Male' ..., 'Female' 'Female' 'Male'] 1 2 3 # test cm = confusion_matrix ( prediction , Y_test ) print ( cm ) 1 2 [[ 459 419] [2812 6079]] Na\u00efve Bayes \u00b6 1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn.naive_bayes import GaussianNB from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # set the training parameters, instantiate the classifier clf = GaussianNB () # train on the train set clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 0.6612754632 1 2 3 # create a confusion matrix prediction = clf . predict ( X_test ) print ( prediction ) 1 ['Male' 'Male' 'Male' ..., 'Male' 'Male' 'Female'] 1 2 3 # test cm = confusion_matrix ( prediction , Y_test ) print ( cm ) 1 2 [[ 674 721] [2588 5786]] Intermediate level (Additional) \u00b6 Principal Component Analysis \u00b6 1 2 3 4 5 6 7 import pandas as pd from sklearn.decomposition import PCA from sklearn.preprocessing import LabelEncoder # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' , 'sex' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 1 2174 1 Married-civ-spouse 4 Husband 4 1 0 2 Divorced 6 Not-in-family 4 1 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 print ( data . shape ) 1 (32561, 15) 1 2 # print one variable print ( data . sex . head ( 3 )) 1 2 3 4 0 1 1 1 2 1 Name: sex, dtype: int64 1 2 # % Male sum ( data . sex ) / len ( data ) 1 0.66920549123184181 1 2 # take the fields of interest and plug them into variable X X = data [[ 'age' , 'final_weight' , 'education_num' , 'occupation' , 'race' , 'capital_gain' , 'hours_per_week' ]] 1 2 3 4 5 6 7 8 9 # create a regular PCA model # tell the model to only keep two components. pca = PCA ( n_components = 2 ) # Fit and transform the data to the model reduced_data_pca = pca . fit_transform ( X ) # Inspect the shape print ( reduced_data_pca . shape ) 1 (32561, 2) 1 2 # Print out the data (array) print ( reduced_data_pca [ 0 : 3 ]) 1 2 3 [[-112262.33316766 -1099.76011639] [-106467.39923916 1074.41772634] [ 25867.60075685 1078.43450794]] 1 2 3 4 5 6 7 8 9 10 11 12 13 % pylab inline import matplotlib.pyplot as plt x = reduced_data_pca [:, 0 ] y = reduced_data_pca [:, 1 ] plt . scatter ( x , y ) plt . xlabel ( 'First Principal Component' ) plt . ylabel ( 'Second Principal Component' ) plt . title ( \"PCA Scatter Plot\" ) plt . show () 1 Populating the interactive namespace from numpy and matplotlib 1 2 male = [ data . sex == 1 ][ 0 : 3 ] type ( male ) 1 list 1 2 # Is Male? male [ 0 ][ 0 : 3 ] 1 2 3 4 0 True 1 True 2 True Name: sex, dtype: bool 1 2 3 4 female = [ data . sex == 0 ][ 0 : 3 ] # Is Female? female [ 0 ][ 0 : 3 ] 1 2 3 4 0 False 1 False 2 False Name: sex, dtype: bool 1 2 for i in range ( len ( colors )): print ( i ) 1 2 0 1 1 2 data . sex = data . sex . astype ( int ) data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } age workclass final_weight education education_num marital_status occupation relationship race sex capital_gain capital_loss hours_per_week native_country salary 0 39 State-gov 77516 Bachelors 13 Never-married 1 Not-in-family 4 1 2174 0 40 United-States <=50K 1 50 Self-emp-not-inc 83311 Bachelors 13 Married-civ-spouse 4 Husband 4 1 0 0 13 United-States <=50K 2 38 Private 215646 HS-grad 9 Divorced 6 Not-in-family 4 1 0 0 40 United-States <=50K 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 colors = [ 'blue' , 'red' ] # colors = ['black','blue','purple','yellow','white','red','lime','cyan','orange','gray'] # 0 Female, blue # 1 Male, red for i in range ( len ( colors )): x = reduced_data_pca [:, 0 ] * [ data . sex == i ] y = reduced_data_pca [:, 1 ] * [ data . sex == i ] plt . scatter ( x , y , c = colors [ i ]) # 0 Female, 1 Male plt . legend ([ 'Female' , 'Male' ], bbox_to_anchor = ( 1.05 , 1 ), loc = 2 , borderaxespad = 0. ) plt . xlabel ( 'First Principal Component' ) plt . ylabel ( 'Second Principal Component' ) plt . title ( \"PCA Scatter Plot\" ) plt . show () Support Vector Machines \u00b6 1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn import svm from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # Create the SVC model clf = svm . SVC ( gamma = 0.001 , C = 100. , kernel = 'linear' ) # Fit the data to the SVC model clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 2 3 # create a confusion matrix prediction = clf . predict ( X_test ) print ( prediction ) 1 2 3 # test cm = confusion_matrix ( prediction , Y_test ) print ( cm ) A little application \u00b6 Append each result in a dictionary 1 2 3 index = np . argmax ([ acc_model1 , acc_model2 ]) classifiers = { 0 : 'model1' , 1 : 'model2} print ( 'Best classifier is {}' . format ( classifiers [ index ]))","title":"Overview of scikit-learn"},{"location":"Overview_of_scikit-learn/#basic-level","text":"","title":"Basic level"},{"location":"Overview_of_scikit-learn/#hard-coded-dataset","text":"1 2 3 4 5 6 7 # [height, weight, shoe_size] X = [[ 181 , 80 , 44 ], [ 177 , 70 , 43 ], [ 160 , 60 , 38 ], [ 154 , 54 , 37 ], [ 166 , 65 , 40 ], [ 190 , 90 , 47 ], [ 175 , 64 , 39 ], [ 177 , 70 , 40 ], [ 159 , 55 , 37 ], [ 171 , 75 , 42 ], [ 181 , 85 , 43 ]] Y = [ 'male' , 'male' , 'female' , 'female' , 'male' , 'male' , 'female' , 'female' , 'female' , 'male' , 'male' ]","title":"Hard-coded dataset"},{"location":"Overview_of_scikit-learn/#decision-tree","text":"1 2 3 4 5 6 7 # import decision tree from sklearn import tree # train on the train set clf = tree . DecisionTreeClassifier () clf = clf . fit ( X , Y ) 1 2 3 # test prediction = clf . predict ([[ 190 , 70 , 43 ]]) print ( prediction ) 1 ['male']","title":"Decision tree"},{"location":"Overview_of_scikit-learn/#random-forests","text":"1 2 3 4 5 6 7 8 9 10 11 from sklearn.ensemble import RandomForestClassifier # set the training parameters clf = RandomForestClassifier ( n_estimators = 1000 ) # train on the same train set clf = clf . fit ( X , Y ) # validate the classifier accuracy = clf . score ( X , Y ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 1.0 1 2 3 # test prediction = clf . predict ([[ 190 , 70 , 43 ]]) print ( prediction ) 1 ['male']","title":"Random Forests"},{"location":"Overview_of_scikit-learn/#k-nearest-neighbours","text":"1 2 3 4 5 6 7 from sklearn.neighbors import KNeighborsClassifier # set the training parameters neigh = KNeighborsClassifier ( n_neighbors = 3 ) # train on the same train set neigh . fit ( X , Y ) 1 2 3 KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski', metric_params=None, n_jobs=1, n_neighbors=3, p=2, weights='uniform') 1 2 3 # test prediction = neigh . predict ([[ 190 , 70 , 43 ]]) print ( prediction ) 1 ['male']","title":"k-Nearest Neighbours"},{"location":"Overview_of_scikit-learn/#logistic-regression","text":"1 2 3 4 5 6 7 from sklearn.linear_model import LogisticRegression # set the training parameters neigh = LogisticRegression () # train on the same train set neigh . fit ( X , Y ) 1 2 3 4 LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1, penalty='l2', random_state=None, solver='liblinear', tol=0.0001, verbose=0, warm_start=False) 1 2 3 # test prediction = neigh . predict ([[ 190 , 70 , 43 ]]) print ( prediction ) 1 ['female']","title":"Logistic regression"},{"location":"Overview_of_scikit-learn/#naive-bayes","text":"1 2 3 4 5 6 7 from sklearn.naive_bayes import GaussianNB # set the training parameters gnb = GaussianNB () # train on the same train set gnb = gnb . fit ( X , Y ) 1 2 3 # test prediction = gnb . predict ([[ 190 , 70 , 43 ]]) print ( prediction ) 1 ['male']","title":"Na\u00efve Bayes"},{"location":"Overview_of_scikit-learn/#intermediate-level","text":"","title":"Intermediate level"},{"location":"Overview_of_scikit-learn/#imported-dataset","text":"","title":"Imported dataset"},{"location":"Overview_of_scikit-learn/#decision-tree_1","text":"1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn import tree from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 len ( data ) 1 32561 1 data . shape 1 (32561, 15) 1 data . info () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 32561 entries, 0 to 32560 Data columns (total 15 columns): age 32561 non-null int64 workclass 32561 non-null object final_weight 32561 non-null int64 education 32561 non-null object education_num 32561 non-null int64 marital_status 32561 non-null object occupation 32561 non-null object relationship 32561 non-null object race 32561 non-null object sex 32561 non-null object capital_gain 32561 non-null int64 capital_loss 32561 non-null int64 hours_per_week 32561 non-null int64 native_country 32561 non-null object salary 32561 non-null object dtypes: int64(6), object(9) memory usage: 3.7+ MB 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # set the training parameters, instantiate the classifier clf = tree . DecisionTreeClassifier () # train on the train set clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 0.727198280274 1 2 3 # test prediction = clf . predict ( X_test ) print ( prediction ) 1 ['Female' 'Female' 'Male' ..., 'Male' 'Male' 'Male'] 1 2 3 # create a confusion matrix cm = confusion_matrix ( prediction , Y_test ) print ( cm ) 1 2 [[1613 1037] [1628 5491]]","title":"Decision tree"},{"location":"Overview_of_scikit-learn/#random-forests_1","text":"1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn.ensemble import RandomForestClassifier from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # set the training parameters clf = RandomForestClassifier ( n_estimators = 1000 ) # train on the train set clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 0.738765482649 1 2 3 # test prediction = clf . predict ( X_test ) print ( prediction ) 1 ['Male' 'Female' 'Male' ..., 'Female' 'Male' 'Female'] 1 2 3 # create a confusion matrix cm = confusion_matrix ( prediction , Y_test ) print ( cm ) 1 2 [[1568 970] [1582 5649]]","title":"Random Forests"},{"location":"Overview_of_scikit-learn/#random-forests-with-the-iris-dataset","text":"Iris dataset. 1 2 3 4 5 6 7 from sklearn.cross_validation import cross_val_score , train_test_split import numpy as np from sklearn import datasets from sklearn.ensemble import RandomForestClassifier from sklearn import preprocessing iris = datasets . load_iris () 1 2 3 4 5 6 # feature scaling min_max_scaler = preprocessing . MinMaxScaler () X = min_max_scaler . fit_transform ( iris . data ) # train on the train set clf = RandomForestClassifier ( n_estimators = 200 ) 1 2 3 4 # test our classifier scores = cross_val_score ( clf , X , iris . target , cv = 5 ) print ( \"Accuracy: %0.2f (+/- %0.2f )\" % ( scores . mean (), scores . std () * 2 )) 1 Accuracy : 0.97 (+/- 0.04 )","title":"Random Forests (with the Iris dataset)"},{"location":"Overview_of_scikit-learn/#k-nearest-neighbours_1","text":"1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn.neighbors import KNeighborsClassifier from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # Import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # set the training parameters, instantiate the classifier clf = KNeighborsClassifier ( n_neighbors = 3 ) # train on the train set clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 0.68113420002 1 2 # create a confusion matrix prediction = clf . predict ( X_test ) 1 2 3 # test cm = confusion_matrix ( prediction , Y_test ) print ( cm ) 1 2 [[1694 1591] [1524 4960]]","title":"k-Nearest Neighbours"},{"location":"Overview_of_scikit-learn/#logistic-regression_1","text":"1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # set the training parameters, instantiate the classifier clf = LogisticRegression () # train on the train set clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 0.669259903777 1 2 3 # create a confusion matrix prediction = clf . predict ( X_test ) print ( prediction ) 1 ['Male' 'Male' 'Male' ..., 'Female' 'Female' 'Male'] 1 2 3 # test cm = confusion_matrix ( prediction , Y_test ) print ( cm ) 1 2 [[ 459 419] [2812 6079]]","title":"Logistic regression"},{"location":"Overview_of_scikit-learn/#naive-bayes_1","text":"1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn.naive_bayes import GaussianNB from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # set the training parameters, instantiate the classifier clf = GaussianNB () # train on the train set clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 Accuracy : 0.6612754632 1 2 3 # create a confusion matrix prediction = clf . predict ( X_test ) print ( prediction ) 1 ['Male' 'Male' 'Male' ..., 'Male' 'Male' 'Female'] 1 2 3 # test cm = confusion_matrix ( prediction , Y_test ) print ( cm ) 1 2 [[ 674 721] [2588 5786]]","title":"Na\u00efve Bayes"},{"location":"Overview_of_scikit-learn/#intermediate-level-additional","text":"","title":"Intermediate level (Additional)"},{"location":"Overview_of_scikit-learn/#principal-component-analysis","text":"1 2 3 4 5 6 7 import pandas as pd from sklearn.decomposition import PCA from sklearn.preprocessing import LabelEncoder # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' , 'sex' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 1 2174 1 Married-civ-spouse 4 Husband 4 1 0 2 Divorced 6 Not-in-family 4 1 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 print ( data . shape ) 1 (32561, 15) 1 2 # print one variable print ( data . sex . head ( 3 )) 1 2 3 4 0 1 1 1 2 1 Name: sex, dtype: int64 1 2 # % Male sum ( data . sex ) / len ( data ) 1 0.66920549123184181 1 2 # take the fields of interest and plug them into variable X X = data [[ 'age' , 'final_weight' , 'education_num' , 'occupation' , 'race' , 'capital_gain' , 'hours_per_week' ]] 1 2 3 4 5 6 7 8 9 # create a regular PCA model # tell the model to only keep two components. pca = PCA ( n_components = 2 ) # Fit and transform the data to the model reduced_data_pca = pca . fit_transform ( X ) # Inspect the shape print ( reduced_data_pca . shape ) 1 (32561, 2) 1 2 # Print out the data (array) print ( reduced_data_pca [ 0 : 3 ]) 1 2 3 [[-112262.33316766 -1099.76011639] [-106467.39923916 1074.41772634] [ 25867.60075685 1078.43450794]] 1 2 3 4 5 6 7 8 9 10 11 12 13 % pylab inline import matplotlib.pyplot as plt x = reduced_data_pca [:, 0 ] y = reduced_data_pca [:, 1 ] plt . scatter ( x , y ) plt . xlabel ( 'First Principal Component' ) plt . ylabel ( 'Second Principal Component' ) plt . title ( \"PCA Scatter Plot\" ) plt . show () 1 Populating the interactive namespace from numpy and matplotlib 1 2 male = [ data . sex == 1 ][ 0 : 3 ] type ( male ) 1 list 1 2 # Is Male? male [ 0 ][ 0 : 3 ] 1 2 3 4 0 True 1 True 2 True Name: sex, dtype: bool 1 2 3 4 female = [ data . sex == 0 ][ 0 : 3 ] # Is Female? female [ 0 ][ 0 : 3 ] 1 2 3 4 0 False 1 False 2 False Name: sex, dtype: bool 1 2 for i in range ( len ( colors )): print ( i ) 1 2 0 1 1 2 data . sex = data . sex . astype ( int ) data . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } age workclass final_weight education education_num marital_status occupation relationship race sex capital_gain capital_loss hours_per_week native_country salary 0 39 State-gov 77516 Bachelors 13 Never-married 1 Not-in-family 4 1 2174 0 40 United-States <=50K 1 50 Self-emp-not-inc 83311 Bachelors 13 Married-civ-spouse 4 Husband 4 1 0 0 13 United-States <=50K 2 38 Private 215646 HS-grad 9 Divorced 6 Not-in-family 4 1 0 0 40 United-States <=50K 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 colors = [ 'blue' , 'red' ] # colors = ['black','blue','purple','yellow','white','red','lime','cyan','orange','gray'] # 0 Female, blue # 1 Male, red for i in range ( len ( colors )): x = reduced_data_pca [:, 0 ] * [ data . sex == i ] y = reduced_data_pca [:, 1 ] * [ data . sex == i ] plt . scatter ( x , y , c = colors [ i ]) # 0 Female, 1 Male plt . legend ([ 'Female' , 'Male' ], bbox_to_anchor = ( 1.05 , 1 ), loc = 2 , borderaxespad = 0. ) plt . xlabel ( 'First Principal Component' ) plt . ylabel ( 'Second Principal Component' ) plt . title ( \"PCA Scatter Plot\" ) plt . show ()","title":"Principal Component Analysis"},{"location":"Overview_of_scikit-learn/#support-vector-machines","text":"1 2 3 4 5 6 7 8 9 import pandas as pd from sklearn import svm from sklearn.preprocessing import LabelEncoder from sklearn.cross_validation import train_test_split from sklearn.metrics import confusion_matrix # import the adult.txt file into Python data = pd . read_csv ( 'data/adults.txt' , sep = ',' ) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex \\ 0 Never-married Adm-clerical Not-in-family White Male 1 Married-civ-spouse Exec-managerial Husband White Male 2 Divorced Handlers-cleaners Not-in-family White Male capital_gain capital_loss hours_per_week native_country salary 0 2174 0 40 United-States &lt;=50K 1 0 0 13 United-States &lt;=50K 2 0 0 40 United-States &lt;=50K 1 2 3 4 # convert the string labels to numeric labels for label in [ 'race' , 'occupation' ]: data [ label ] = LabelEncoder () . fit_transform ( data [ label ]) print ( data . head ( 3 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 age workclass final_weight education education_num \\ 0 39 State-gov 77516 Bachelors 13 1 50 Self-emp-not-inc 83311 Bachelors 13 2 38 Private 215646 HS-grad 9 marital_status occupation relationship race sex capital_gain \\ 0 Never-married 1 Not-in-family 4 Male 2174 1 Married-civ-spouse 4 Husband 4 Male 0 2 Divorced 6 Not-in-family 4 Male 0 capital_loss hours_per_week native_country salary 0 0 40 United-States &lt;=50K 1 0 13 United-States &lt;=50K 2 0 40 United-States &lt;=50K 1 2 3 4 5 # take the fields of interest and plug them into variable X X = data [[ 'race' , 'hours_per_week' , 'occupation' ]] # make sure to provide the corresponding truth value Y = data [ 'sex' ] . values . tolist () 1 2 3 4 5 6 7 8 # split the data into a test (30%) and train set (70%) X_train , X_test , Y_train , Y_test = train_test_split ( X , Y , test_size = 0.3 ) # Create the SVC model clf = svm . SVC ( gamma = 0.001 , C = 100. , kernel = 'linear' ) # Fit the data to the SVC model clf = clf . fit ( X_train , Y_train ) 1 2 3 # validate the classifier accuracy = clf . score ( X_test , Y_test ) print ( 'Accuracy: ' + str ( accuracy )) 1 2 3 # create a confusion matrix prediction = clf . predict ( X_test ) print ( prediction ) 1 2 3 # test cm = confusion_matrix ( prediction , Y_test ) print ( cm )","title":"Support Vector Machines"},{"location":"Overview_of_scikit-learn/#a-little-application","text":"Append each result in a dictionary 1 2 3 index = np . argmax ([ acc_model1 , acc_model2 ]) classifiers = { 0 : 'model1' , 1 : 'model2} print ( 'Best classifier is {}' . format ( classifiers [ index ]))","title":"A little application"},{"location":"Py_CS/","text":"Foreword Cheat sheets. Python 3 \u00b6 Python 3 Notes . PDF only. Python 3 . PDF. Python, Intermediate . PDF. Python 3 . PDF. Libraries \u00b6 Debugger \u00b6 Python Debugger . PDF. Decorators \u00b6 Python Decorators . PDF. Pip \u00b6 Pip Cheat Sheet . PDF. Python 2 \u00b6 Python 2 . PDF. Python 2 . PDF. Python 2 Quick Reference . PDF. ../img/ Python 2 . PDF.","title":"Python Cheat Sheets"},{"location":"Py_CS/#libraries","text":"","title":"Libraries"},{"location":"Py_CS/#debugger","text":"Python Debugger . PDF.","title":"Debugger"},{"location":"Py_CS/#decorators","text":"Python Decorators . PDF.","title":"Decorators"},{"location":"Py_CS/#pip","text":"Pip Cheat Sheet . PDF.","title":"Pip"},{"location":"Py_CS/#python-2","text":"Python 2 . PDF. Python 2 . PDF. Python 2 Quick Reference . PDF. ../img/ Python 2 . PDF.","title":"Python 2"},{"location":"Python for Education/","text":"Foreword Notes and code snippets. IPython 2 & 3. From Inter University Accelerator Centre, 2010. Creative Commons. 2, Programming in Python \u00b6 2.5, Python Lists \u00b6 1 2 3 4 5 6 a = 'hello world' # extract, subset print ( a [ 3 : 5 ]) print ( a [ 6 :]) print ( a [: 5 ]) 1 2 3 lo world hello 1 2 3 4 5 a = [ 1 , 2 ] print ( a ) print ( a * 2 ) # double print print ( a + [ 1 , 1 ]) # concatenate 1 2 3 [1, 2] [1, 2, 1, 2] [1, 2, 1, 1] 1 2 3 4 5 6 7 b = [ 1 , 2 , a ] print ( b ) # embed b [ 2 ] = 3 print ( b ) # change a mutable from the above list # Output: 1 2 [1, 2, [1, 2]] [1, 2, 3] 2.7, Input from the Keyboard \u00b6 input for numeric data. raw_input for string data. 1 2 3 4 x = input ( 'Enter an integer (x): ' ) y = input ( 'Enter another one (y): ' ) print ( 'The sum is = ' , x + y ) # print as numeric, input 1 2 3 Enter an integer (x): 1 Enter another one (y): 2 ('The sum is = ', 3) 1 2 3 4 t = raw_input ( 'Enter an integer: ' ) u = raw_input ( 'Enter another one: ' ) print ( 'The sum is = ' , t + u ) # print as string, raw input 1 2 3 Enter an integer: 2 Enter another one: 3 ('The sum is = ', '23') 1 2 3 4 v = input ( 'Enter an integer: ' ) w = input ( 'Enter another one: ' ) print ( 'The sum is = ' , str ( v ) + str ( w )) # print as string, input changes into a string 1 2 3 Enter an integer: 1 Enter another one: 1 ('The sum is = ', '11') 1 2 3 4 y1 = raw_input ( 'Enter an integer: ' ) y2 = raw_input ( 'Enter another one: ' ) print ( 'The sum is = ' , int ( y1 ) + int ( y2 )) # print as numeric, raw input changed into integer 1 2 3 Enter an integer: 2 Enter another one: 2 ('The sum is = ', 4) 1 2 3 4 y3 = raw_input ( 'Enter an integer: ' ) y4 = raw_input ( 'Enter another one: ' ) print ( 'The sum is = ' , float ( y3 ) + float ( y4 )) # print as numeric, raw input changed into float 1 2 3 Enter an integer: 1 Enter another one: 2 ('The sum is = ', 3.0) 2.11, Line joining \u00b6 1 2 3 4 year = input ( 'year: ' ) month = input ( 'month: ' ) if 1900 < year < 2100 and 1 <= month <= 12 : print ( 'I am so long and will not fit in a single line' ) 1 2 3 year : 2016 month : 10 I am so long and will not fit in a single line 1 2 3 4 5 6 7 # simplify the code, shorten the line year = input ( 'year: ' ) month = input ( 'month: ' ) if 1900 < year < 2100 \\ and 1 <= month <= 12 : print ( 'I am so long and will \\ not fit in a single line' ) 1 2 3 year : 2016 month : 10 I am so long and will not fit in a single line 1 2 # object, variable type print ( type ( 4.5 )) 1 &lt;type 'float'&gt; 2.14, More on Strings and Lists \u00b6 1 2 3 4 5 s = 'hello world' # string length print ( len ( s )) print ( s . upper ()) 1 2 11 HELLO WORLD 1 2 # help with help ( str ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 Help on class str in module __builtin__ : class str ( basestring ) | str ( object = '' ) -& gt ; string | | Return a nice string representation of the object . | If the argument is a string , the return value is the same object . | | Method resolution order : | str | basestring | object | | Methods defined here : | | __add__ (...) | x . __add__ ( y ) & lt ; ==& gt ; x + y | | __contains__ (...) | x . __contains__ ( y ) & lt ; ==& gt ; y in x | | __eq__ (...) | x . __eq__ ( y ) & lt ; ==& gt ; x == y | | __format__ (...) | S . __format__ ( format_spec ) -& gt ; string | | Return a formatted version of S as described by format_spec . | | __ge__ (...) | x . __ge__ ( y ) & lt ; ==& gt ; x & gt ; = y | | __getattribute__ (...) | x . __getattribute__ ( 'name' ) & lt ; ==& gt ; x . name | | __getitem__ (...) | x . __getitem__ ( y ) & lt ; ==& gt ; x [ y ] | | __getnewargs__ (...) | | __getslice__ (...) | x . __getslice__ ( i , j ) & lt ; ==& gt ; x [ i : j ] | | Use of negative indices is not supported . | | __gt__ (...) | x . __gt__ ( y ) & lt ; ==& gt ; x & gt ; y | | __hash__ (...) | x . __hash__ () & lt ; ==& gt ; hash ( x ) | | __le__ (...) | x . __le__ ( y ) & lt ; ==& gt ; x & lt ; = y | | __len__ (...) | x . __len__ () & lt ; ==& gt ; len ( x ) | | __lt__ (...) | x . __lt__ ( y ) & lt ; ==& gt ; x & lt ; y | | __mod__ (...) | x . __mod__ ( y ) & lt ; ==& gt ; x % y | | __mul__ (...) | x . __mul__ ( n ) & lt ; ==& gt ; x * n | | __ne__ (...) | x . __ne__ ( y ) & lt ; ==& gt ; x != y | | __repr__ (...) | x . __repr__ () & lt ; ==& gt ; repr ( x ) | | __rmod__ (...) | x . __rmod__ ( y ) & lt ; ==& gt ; y % x | | __rmul__ (...) | x . __rmul__ ( n ) & lt ; ==& gt ; n * x | | __sizeof__ (...) | S . __sizeof__ () -& gt ; size of S in memory , in bytes | | __str__ (...) | x . __str__ () & lt ; ==& gt ; str ( x ) | | capitalize (...) | S . capitalize () -& gt ; string | | Return a copy of the string S with only its first character | capitalized . | | center (...) | S . center ( width [, fillchar ]) -& gt ; string | | Return S centered in a string of length width . Padding is | done using the specified fill character ( default is a space ) | | count (...) | S . count ( sub [, start [, end ]]) -& gt ; int | | Return the number of non - overlapping occurrences of substring sub in | string S [ start : end ]. Optional arguments start and end are interpreted | as in slice notation . | | decode (...) | S . decode ([ encoding [, errors ]]) -& gt ; object | | Decodes S using the codec registered for encoding . encoding defaults | to the default encoding . errors may be given to set a different error | handling scheme . Default is 'strict' meaning that encoding errors raise | a UnicodeDecodeError . Other possible values are 'ignore' and 'replace' | as well as any other name registered with codecs . register_error that is | able to handle UnicodeDecodeErrors . | | encode (...) | S . encode ([ encoding [, errors ]]) -& gt ; object | | Encodes S using the codec registered for encoding . encoding defaults | to the default encoding . errors may be given to set a different error | handling scheme . Default is 'strict' meaning that encoding errors raise | a UnicodeEncodeError . Other possible values are 'ignore' , 'replace' and | 'xmlcharrefreplace' as well as any other name registered with | codecs . register_error that is able to handle UnicodeEncodeErrors . | | endswith (...) | S . endswith ( suffix [, start [, end ]]) -& gt ; bool | | Return True if S ends with the specified suffix , False otherwise . | With optional start , test S beginning at that position . | With optional end , stop comparing S at that position . | suffix can also be a tuple of strings to try . | | expandtabs (...) | S . expandtabs ([ tabsize ]) -& gt ; string | | Return a copy of S where all tab characters are expanded using spaces . | If tabsize is not given , a tab size of 8 characters is assumed . | | find (...) | S . find ( sub [, start [, end ]]) -& gt ; int | | Return the lowest index in S where substring sub is found , | such that sub is contained within S [ start : end ]. Optional | arguments start and end are interpreted as in slice notation . | | Return - 1 on failure . | | format (...) | S . format ( * args , ** kwargs ) -& gt ; string | | Return a formatted version of S , using substitutions from args and kwargs . | The substitutions are identified by braces ( '{' and '}' ). | | index (...) | S . index ( sub [, start [, end ]]) -& gt ; int | | Like S . find () but raise ValueError when the substring is not found . | | isalnum (...) | S . isalnum () -& gt ; bool | | Return True if all characters in S are alphanumeric | and there is at least one character in S , False otherwise . | | isalpha (...) | S . isalpha () -& gt ; bool | | Return True if all characters in S are alphabetic | and there is at least one character in S , False otherwise . | | isdigit (...) | S . isdigit () -& gt ; bool | | Return True if all characters in S are digits | and there is at least one character in S , False otherwise . | | islower (...) | S . islower () -& gt ; bool | | Return True if all cased characters in S are lowercase and there is | at least one cased character in S , False otherwise . | | isspace (...) | S . isspace () -& gt ; bool | | Return True if all characters in S are whitespace | and there is at least one character in S , False otherwise . | | istitle (...) | S . istitle () -& gt ; bool | | Return True if S is a titlecased string and there is at least one | character in S , i . e . uppercase characters may only follow uncased | characters and lowercase characters only cased ones . Return False | otherwise . | | isupper (...) | S . isupper () -& gt ; bool | | Return True if all cased characters in S are uppercase and there is | at least one cased character in S , False otherwise . | | join (...) | S . join ( iterable ) -& gt ; string | | Return a string which is the concatenation of the strings in the | iterable . The separator between elements is S . | | ljust (...) | S . ljust ( width [, fillchar ]) -& gt ; string | | Return S left - justified in a string of length width . Padding is | done using the specified fill character ( default is a space ). | | lower (...) | S . lower () -& gt ; string | | Return a copy of the string S converted to lowercase . | | lstrip (...) | S . lstrip ([ chars ]) -& gt ; string or unicode | | Return a copy of the string S with leading whitespace removed . | If chars is given and not None , remove characters in chars instead . | If chars is unicode , S will be converted to unicode before stripping | | partition (...) | S . partition ( sep ) -& gt ; ( head , sep , tail ) | | Search for the separator sep in S , and return the part before it , | the separator itself , and the part after it . If the separator is not | found , return S and two empty strings . | | replace (...) | S . replace ( old , new [, count ]) -& gt ; string | | Return a copy of string S with all occurrences of substring | old replaced by new . If the optional argument count is | given , only the first count occurrences are replaced . | | rfind (...) | S . rfind ( sub [, start [, end ]]) -& gt ; int | | Return the highest index in S where substring sub is found , | such that sub is contained within S [ start : end ]. Optional | arguments start and end are interpreted as in slice notation . | | Return - 1 on failure . | | rindex (...) | S . rindex ( sub [, start [, end ]]) -& gt ; int | | Like S . rfind () but raise ValueError when the substring is not found . | | rjust (...) | S . rjust ( width [, fillchar ]) -& gt ; string | | Return S right - justified in a string of length width . Padding is | done using the specified fill character ( default is a space ) | | rpartition (...) | S . rpartition ( sep ) -& gt ; ( head , sep , tail ) | | Search for the separator sep in S , starting at the end of S , and return | the part before it , the separator itself , and the part after it . If the | separator is not found , return two empty strings and S . | | rsplit (...) | S . rsplit ([ sep [, maxsplit ]]) -& gt ; list of strings | | Return a list of the words in the string S , using sep as the | delimiter string , starting at the end of the string and working | to the front . If maxsplit is given , at most maxsplit splits are | done . If sep is not specified or is None , any whitespace string | is a separator . | | rstrip (...) | S . rstrip ([ chars ]) -& gt ; string or unicode | | Return a copy of the string S with trailing whitespace removed . | If chars is given and not None , remove characters in chars instead . | If chars is unicode , S will be converted to unicode before stripping | | split (...) | S . split ([ sep [, maxsplit ]]) -& gt ; list of strings | | Return a list of the words in the string S , using sep as the | delimiter string . If maxsplit is given , at most maxsplit | splits are done . If sep is not specified or is None , any | whitespace string is a separator and empty strings are removed | from the result . | | splitlines (...) | S . splitlines ( keepends = False ) -& gt ; list of strings | | Return a list of the lines in S , breaking at line boundaries . | Line breaks are not included in the resulting list unless keepends | is given and true . | | startswith (...) | S . startswith ( prefix [, start [, end ]]) -& gt ; bool | | Return True if S starts with the specified prefix , False otherwise . | With optional start , test S beginning at that position . | With optional end , stop comparing S at that position . | prefix can also be a tuple of strings to try . | | strip (...) | S . strip ([ chars ]) -& gt ; string or unicode | | Return a copy of the string S with leading and trailing | whitespace removed . | If chars is given and not None , remove characters in chars instead . | If chars is unicode , S will be converted to unicode before stripping | | swapcase (...) | S . swapcase () -& gt ; string | | Return a copy of the string S with uppercase characters | converted to lowercase and vice versa . | | title (...) | S . title () -& gt ; string | | Return a titlecased version of S , i . e . words start with uppercase | characters , all remaining cased characters have lowercase . | | translate (...) | S . translate ( table [, deletechars ]) -& gt ; string | | Return a copy of the string S , where all characters occurring | in the optional argument deletechars are removed , and the | remaining characters have been mapped through the given | translation table , which must be a string of length 256 or None . | If the table argument is None , no translation is applied and | the operation simply removes the characters in deletechars . | | upper (...) | S . upper () -& gt ; string | | Return a copy of the string S converted to uppercase . | | zfill (...) | S . zfill ( width ) -& gt ; string | | Pad a numeric string S with zeros on the left , to fill a field | of the specified width . The string S is never truncated . | | ---------------------------------------------------------------------- | Data and other attributes defined here : | | __new__ = & lt ; built - in method __new__ of type object & gt ; | T . __new__ ( S , ...) -& gt ; a new object with type S , a subtype of T 1 2 3 4 s = 'I am a long string' # split a string on space print ( s . split ()) 1 ['I', 'am', 'a', 'long', 'string'] 1 2 3 4 5 a = 'abc.abc.abc' # split a string on dot aa = a . split ( '.' ) print ( aa ) 1 ['abc', 'abc', 'abc'] 1 2 3 # join the elements, join character mm = '+' . join ( aa ) print ( mm ) 1 abc+abc+abc 1 2 3 4 5 6 7 8 a = [] # append to a list a . append ( 3 ) print ( a ) a . append ( 4 ) print ( a ) 1 2 [3] [3, 4] 1 2 3 4 5 6 # insert 2.5 as first element (at index = 0) a . insert ( 0 , 2.5 ) # print several items print ( a , a [ 0 ]) print ( len ( a )) 1 2 ([2.5, 3, 4], 2.5) 3 1 2 3 4 5 6 7 # copy module a = [ 1 , 2 , 3 , 4 ] print ( a ) b = a print ( a == b ) # True 1 2 [1, 2, 3, 4] True 1 2 # insert at index = 0 b [ 0 ] = 5 1 2 3 # b is a live duplicate, not an independent copy print ( a is b ) print ( a , b ) 1 2 True ([5, 2, 3, 4], [5, 2, 3, 4]) 1 2 3 import copy c = copy . copy ( a ) 1 2 3 # c is an ind. copy print ( a is c ) print ( a , c ) 1 2 False ([5, 2, 3, 4], [5, 2, 3, 4]) 1 2 3 # replace at index = 1 c [ 1 ] = 100 print ( a , c ) 1 ([5, 2, 3, 4], [5, 100, 3, 4]) Recap from the Above (Snippets) \u00b6 1 2 3 4 5 6 7 dicty = { 'a' : 'apple' , 'b' : 'berry' , 'c' : 'cherry' } for keyy in dicty : print ( 'keys are: ' ), keyy print ( '-' * 5 ) print ( 'values are: ' ), dicty [ keyy ] print ( '-' * 10 ) 1 2 3 4 5 6 7 8 9 10 11 12 keys are: a ----- values are: apple ---------- keys are: c ----- values are: cherry ---------- keys are: b ----- values are: berry ---------- 1 2 3 4 5 6 7 8 9 10 11 print ( type ( 0 )) print ( type ( 255 )) print ( type ( - 1 )) print ( type ( - 255 )) print ( type ( - 30000 )) print ( type ( 30000 )) print ( type ( - 3500000 )) print ( type ( 3500000 )) print ( type ( - 1.5 )) print ( type ( 1.345456734576345 )) print ( type ( '4' )) 1 2 3 4 5 6 7 8 9 10 11 &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'float'&gt; &lt;type 'float'&gt; &lt;type 'str'&gt; 1 2 3 4 5 6 7 8 a1 = input ( 'Enter: ' ) a2 = a1 a3 = bytes ( a1 ) # 0 - 255 a4 = int ( a1 ) # -32768 - 32768 a5 = long ( a1 ) # -2147483648 - a6 = float ( a1 ) a9 = str ( a1 ) 1 Enter : 1 1 2 3 4 5 listnum = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] for i in listnum : if i % 2 == 0 : # even print ( i ), 1 0 2 4 6 8 10 1 2 3 for i in range ( 0 , 10 ): if i % 2 == 0 : # even print ( i ), 1 0 2 4 6 8 1 2 3 for i in range ( 0 , 100 , 3 ): if i % 2 == 0 : # even print ( i ), 1 0 6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96 1 2 3 4 5 6 7 8 listnum = [ 'a' , 'b' ] listtext = [] for i in listnum : if i == 'b' : # even listtext . append ( i ) print listtext 1 ['b'] 1 2 3 4 5 6 7 lst = [ 3 , 5 , 7 ] lst . append ( 9 ) print lst lst . append ( lst [ 0 ]) print ( lst ) 1 2 [3, 5, 7, 9] [3, 5, 7, 9, 3] 1 2 3 4 5 6 7 lst = [ 'a' , 'b' , 'c' ] lst . append ( 'd' ) print ( lst ) lst . append ( lst [ 0 ]) print ( lst ) 1 2 ['a', 'b', 'c', 'd'] ['a', 'b', 'c', 'd', 'a'] 1 2 3 4 elements = ( 'foo' , 'bar' , 'baz' ) for elem in elements : print ( elem ) 1 2 3 foo bar baz 1 2 for count , elem in enumerate ( elements ): print ( count , elem ) 1 2 3 (0, 'foo') (1, 'bar') (2, 'baz') 1 2 3 4 listnum = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] listnum . pop () # last print ( listnum ) 1 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 1 2 listnum . pop ( 0 ) # position 0 print ( listnum ) 1 [1, 2, 3, 4, 5, 6, 7, 8, 9] 1 2 listnum . pop ( 2 ) # position 2 print ( listnum ) 1 [1, 2, 4, 5, 6, 7, 8, 9] 1 2 listnum . remove ( 8 ) # specific element print ( listnum ) 1 [1, 2, 4, 5, 6, 7, 9] 1 2 del ( listnum [ 0 ]) print ( listnum ) 1 [2, 4, 5, 6, 7, 9] 1 2 3 4 5 6 7 8 9 10 11 word = 'original' word2 = word . upper () word3 = word . capitalize () first = word [ 0 ] allbutfirst = word [ 1 : len ( word )] print ( word ) print ( word2 ) print ( word3 ) print ( first ) print ( allbutfirst ) 1 2 3 4 5 original ORIGINAL Original o riginal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 list1 = [ 1 , 2 , 3 ] list2 = [ 4 , 5 , 6 , 7 ] list3 = [ list1 , list2 ] results = [] def joiny ( listy ): for lst in listy : for num in lst : results . append ( num ) return results print ( joiny ( list3 )) 1 [1, 2, 3, 4, 5, 6, 7] 2.15, Python Modules and Packages \u00b6 1 print ( sin ( 0.5 )) 1 0.479425538604 1 2 3 # rename, more efficient import math as m print ( m . sin ( 0.5 )) 1 0.479425538604 1 2 3 4 5 6 7 # package.module.function() import random a = random . randint ( 1 , 5 ) print ( a ) random . randint ( 1 , 10 ) 1 2 3 8 1 2 3 4 import random as rd aa = rd . randint ( 1 , 5 ) print ( aa ) 1 5 2.16, Files Input/Ouput \u00b6 1 2 3 4 # create the file f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt' , 'w' ) f . write ( 'This is a test file' ) # write in f . close () 1 2 3 4 # read it f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt' , 'r' ) print ( f . read ()) f . close () 1 This is a test file 1 2 3 4 5 # read it again f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt' , 'r' ) print ( f . read ( 7 )) # get first seven characters on the console print ( f . read ()) # get the remaining ones f . close () 1 2 This is a test file 1 2 3 4 5 6 # create it f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' , 'w' ) for k in range ( 1 , 10 ): # 1, 2, 3 stop before 4 s = ' %3d \\n ' % ( k ) # no format 3d, new line f . write ( s ) # write in f . close () 1 2 3 4 # read it f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' , 'r' ) # open print ( f . read ()) f . close () 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 # read it horizontally f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' , 'r' ) # open print ( f . read (),) f . close () 1 (' 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n',) 1 2 3 4 5 6 7 8 f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' , 'r' ) while 1 : # infinite loop s = f . readline () if s == '' : # Empty string means end of file break # terminate the loop m = int ( s ) # Convert to integer print ( m * 5 ), f . close () 1 5 10 15 20 25 30 35 40 45 1 2 3 4 # create it f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt' , 'w' ) f . write ( '' ) f . close () 1 2 3 4 5 6 7 8 9 10 # give an error if there is a blank line in the file # test it (without the if, there would be an error) f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt' , 'r' ) while 1 : # infinite loop s = f . readline () if s == '' : # empty string means end of file break # terminate the loop m = int ( s ) # convert to integer print ( m * 5 ) f . close () 1 2 3 4 5 6 7 8 9 # alternatively f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt' , 'r' ) while 1 : # infinite loop s = f . readline () if len ( s ) < 1 : # string with no value break # terminate the loop m = int ( s ) # convert to integer print ( m * 5 ) f . close () Strings can easily be written to and read from a \u001cle. Numbers take a bit more e\u001bort, since the read() method only returns Strings, which will have to be converted in to a number explicitly. However, when you want to save and restore data types like lists, dictionaries, or class instances, things get a lot more complicated. Rather than have the users constantly writing and debugging code to save complicated data types, Python provides a standard module called pickle . The pickle module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure. \u201cPickling\u201d is the process whereby a Python object hierarchy is converted into a byte stream, and \u201cunpickling\u201d is the inverse operation, whereby a byte stream is converted back into an object hierarchy. Pickling (and unpickling) is alternatively known as \u201cserialization\u201d, \u201cmarshalling,\u201d [1] or \u201cflattening\u201d, however, to avoid confusion, the terms used here are \u201cpickling\u201d and \u201cunpickling\u201d. 1 2 3 4 5 import pickle f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt' , 'w' ) pickle . dump ( 12.3 , f ) # write a float type f . close () 1 2 3 4 f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt' , 'r' ) x = pickle . load ( f ) print ( x , type ( x )) # check the type of data read f . close () 1 (12.3, &lt;type 'float'&gt;) 2.17, Formatted Printing \u00b6 1 2 3 4 a = 2.0 / 3 # 2/3 will print zero because of integer print ( a ) print ( 'a = %5.3f ' ) % ( a ) # up to 3 decimal places 1 2 0.666666666667 a = 0.667 Conversion Conversion Example Result d, i signed Integer \u2018%6d\u2019%(12) \u2018 12\u2019 f \u001d foating point decimal \u2018%6.4f\u2019%(2.0/3) 0.667 e \u001d floating point exponential \u2018%6.2e\u2019%(2.0/3) 6.67e-01 x hexadecimal \u2018%x\u2019%(16) 10 o octal \u2018%o\u2019%(8) 10 s string \u2018%s\u2019%(\u2018abcd\u2019) abcd 0d modi\u001ced \u2018d\u2019 \u2018%05d\u2019%(12) 00012 1 2 a = 'justify as you like' print ( ' %30s ' ) % ( a ) # right justified 1 justify as you like 1 print ( ' %-30s ' ) % ( a ) # minus sign for left justification 1 justify as you like 1 2 for k in range ( 1 , 11 ): # A good looking table print ( '5 x %2d = %2d ' ) % ( k , 5 * k ) # add 2 spaces before 1 2 3 4 5 6 7 8 9 10 5 x 1 = 5 5 x 2 = 10 5 x 3 = 15 5 x 4 = 20 5 x 5 = 25 5 x 6 = 30 5 x 7 = 35 5 x 8 = 40 5 x 9 = 45 5 x 10 = 50 2.18, Exception Handling \u00b6 1 2 3 4 5 6 x = input ( 'Enter a number ' ) try : print ( 10.0 / x ) except : print ( 'Division by zero not allowed' ) 1 2 Enter a number 0 Division by zero not allowed 2.20, Writing GUI Programs \u00b6 Tkinter An introduction to tkinter . Tkinter . Tkinter . The GUI programs are event-driven like a macro. Create Widgets like a Button, Label, Canvas, etc. The first step is to create a main graphics window by calling the function Tk() . 1 2 3 4 5 6 7 8 9 # Example tkmain.py # open an empty box with min, max, close buttons import Tkinter as tk root = tk . Tk () root . mainloop () # it opens a windows! 1 2 3 4 5 6 7 8 9 # Example tklabel.py root = tk . Tk () w = tk . Label ( root , text = \"Hello, world\" ) w . pack () root . mainloop () # it opens a windows with the text in it 1 2 3 4 5 6 7 8 9 10 11 12 # Example tkbutton.py def hello (): print ( 'hello world' ) w = tk . Tk () # Creates the main Graphics window b = tk . Button ( w , text = 'Click Me' , command = hello ) b . pack () w . mainloop () # it opens a windows with a button; after clicking, it print the function 1 hello world 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Example tkcanvas.py def draw ( event ): c . create_rectangle ( event . x , \\ event . y , event . x + 5 , event . y + 5 ) w = tk . Tk () c = tk . Canvas ( w , width = 300 , height = 200 ) c . pack () c . bind ( \"<Button-1>\" , draw ) w . mainloop () # it open a windows; you can left-click and add dots in it 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Example tkcanvas2.py recs = [] # list keeping track of the rectangles def remove ( event ): global recs if len ( recs ) > 0 : c . delete ( recs [ 0 ]) # delete from Canvas recs . pop ( 0 ) # delete first item from list def draw ( event ): global recs r = c . create_rectangle ( event . x , \\ event . y , event . x + 5 , event . y + 5 ) recs . append ( r ) w = tk . Tk () c = tk . Canvas ( w , width = 300 , height = 200 ) c . pack () c . bind ( \"<Button-1>\" , draw ) c . bind ( \"<Button-3>\" , remove ) w . mainloop () # it open a windows; you can left-click and add dots in it; right-click and remove them 2.21, Object-Oriented Programming in Python \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # example point.py class Point : ''' This is documentation comment. help(Point) will display this. ''' def __init__ ( self , x = 0 , y = 0 ): self . xpos = x self . ypos = y def __str__ ( self ): # overload print() return 'Point at ( %f , %f )' % ( self . xpos , self . ypos ) def __add__ ( self , other ): # overloads xpos = self . xpos + other . xpos ypos = self . ypos + other . ypos return Point ( xpos , ypos ) def __sub__ ( self , other ): # overloads import math dx = self . xpos - other . xpos dy = self . ypos - other . ypos return math . sqrt ( dx ** 2 + dy ** 2 ) def dist ( self ): import math return math . sqrt ( self . xpos ** 2 + self . ypos ** 2 ) 1 2 3 4 5 6 7 8 9 10 11 12 # example point1.py # import Point # if point.py is in the same directory and script point1.py is independent from point.py origin = Point () # instance print ( origin ) p1 = Point ( 4 , 4 ) # instance p2 = Point ( 8 , 7 ) print ( p1 ) 1 2 Point at (0.000000,0.000000) Point at (4.000000,4.000000) 1 print ( p2 ) # __str__ 1 Point at (8.000000,7.000000) 1 print ( p1 + p2 ) # __add__, __str__, (4 + 4, 7 + 4) 1 Point at (12.000000,11.000000) 1 print ( p1 - p2 ) # __sub__, __str__, ((4 - 8) ** 2, (3 - 7) ** 2) 1 5.0 1 print ( p1 . dist ()) # # __dist__, __str__, sqrt((4) ** 2 + (4) ** 2) 1 5.65685424949 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # example cpoint.py class colPoint ( Point ): # colPoint inherits Point ''' This is documentation comment. help(colPoint) will display this. ''' color = 'black' def __init__ ( self , x = 0 , y = 0 , col = 'black' ): Point . __init__ ( self , x , y ) self . color = col def __str__ ( self ): return ' %s colored Point at ( %f , %f )' % \\ ( self . color , self . xpos , self . ypos ) 1 2 3 4 5 6 7 # example point2.py # import cpoint # see above for the explanation p1 = Point ( 5 , 5 ) rp1 = colPoint ( 2 , 2 , 'red' ) 1 print ( p1 ) Point at (5.000000,5.000000) 1 print ( rp1 ) 1 red colored Point at (2.000000,2.000000) 1 print ( rp1 + p1 ) 1 Point at (7.000000,7.000000) 1 print ( rp1 . dist ()) 1 2.82842712475 3, Arrays and Matrices \u00b6 Let\u2019s switch to Python 3 for the remaining of the document. 3.1, The Numpy Module \u00b6 Install (check) the Scipy Stack before. numpy . scipy . matplotlib . pandas . sympy . nose (testing). With pip . Note The code below in Python 3 on Jupyter Notebook 3 installed on a Windows PC. However, running the Scipy Stack in Python 2.7 is problematic. Switch kernel from here: from Python 2 to 3. No need to import numpy , matplotlib since it\u2019s included in the %pylab command. 1 2 3 4 5 6 % pylab inline # the Scipy Stack is executed in the notebook, no need to import numpy x = array ([ 1 , 2 , 3 ]) # make array from list print ( x , type ( x )) 1 2 Populating the interactive namespace from numpy and matplotlib [1 2 3] &lt;class 'numpy.ndarray'&gt; 1 2 3 4 a = [[ 1 , 2 ], [ 3 , 4 ]] # make a list of lists x = array ( a ) # and convert to an array print ( a ) 1 [[1, 2], [3, 4]] 1 arange ( 2.0 , 3.0 , . 1 ) 1 array([ 2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9]) 1 array ([ 2. , 2.1 , 2.2 , 2.3 , 2.4 , 2.5 , 2.6 , 2.7 , 2.8 , 2.9 ]) 1 array([ 2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9]) 1 linspace ( 1 , 2 , 11 ) 1 array([ 1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. ]) 1 array ([ 1. , 1.1 , 1.2 , 1.3 , 1.4 , 1.5 , 1.6 , 1.7 , 1.8 , 1.9 , 2. ]) 1 array([ 1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. ]) 1 zeros ([ 3 , 2 ], 'float' ) 1 2 3 array([[ 0., 0.], [ 0., 0.], [ 0., 0.]]) 1 zeros ([ 3 , 2 ], 'int' ) 1 2 3 array([[0, 0], [0, 0], [0, 0]]) 1 ones ([ 2 , 2 ], 'i' ) 1 2 array([[1, 1], [1, 1]], dtype=int32) 1 random . random ([ 3 , 3 ]) 1 2 3 array([[ 0.51158139, 0.83490474, 0.82306296], [ 0.65830757, 0.98560397, 0.78565885], [ 0.09887894, 0.11073038, 0.31037259]]) 1 2 a = arange ( 20 ) print ( a ) 1 [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19] 1 2 b = reshape ( a , [ 4 , 5 ]) print ( b ) 1 2 3 4 [[ 0 1 2 3 4] [ 5 6 7 8 9] [10 11 12 13 14] [15 16 17 18 19]] 1 2 a = arange ( 1.0 , 2.0 , 0.1 ) print ( a ) 1 [ 1. 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9] 1 2 b = linspace ( 1 , 2 , 11 ) print ( b ) 1 [ 1. 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2. ] 1 2 c = ones ( 5 , 'float' ) print ( c ) 1 [ 1. 1. 1. 1. 1.] 1 2 d = zeros ( 5 , 'int' ) print ( d ) 1 [0 0 0 0 0] 1 2 e = random . rand ( 5 ) print ( e ) 1 [ 0.5677619 0.46086299 0.00274387 0.29916017 0.40593335] 1 2 3 4 5 6 7 8 9 10 a = zeros ( 5 ) print ( a ) b = a b [ 0 ] = 10 print ( a , b ) # b and a remain in synch c = a . copy () c [ 4 ] = 10 print ( a , c ) # c is really a new variable, independent 1 2 3 [ 0. 0. 0. 0. 0.] [ 10. 0. 0. 0. 0.] [ 10. 0. 0. 0. 0.] [ 10. 0. 0. 0. 0.] [ 10. 0. 0. 0. 10.] 1 2 3 4 5 6 # simple arithmetics a = array ([[ 2 , 3 ], [ 4 , 5 ]]) b = array ([[ 1 , 2 ], [ 3 , 0 ]]) print ( a + b ) print ( a * b ) 1 2 3 4 [[3 5] [7 5]] [[ 2 6] [12 0]] 1 2 3 4 5 6 7 8 # cross product a = array ([ 1 , 2 , 3 ]) b = array ([ 4 , 5 , 6 ]) print ( a * b ) c = cross ( a , b ) print ( c ) 1 2 [ 4 10 18] [-3 6 -3] 1 2 3 # dot product c = dot ( a , b ) print ( c ) 1 32 1 2 a = arange ( 10 ) print ( a ) 1 [0 1 2 3 4 5 6 7 8 9] 1 2 3 4 # save to file, restore or retrieve a . tofile ( 'myfile.dat' ) # a file is created in the directory b = fromfile ( 'myfile.dat' , dtype = 'int' ) print ( b ) 1 [0 1 2 3 4 5 6 7 8 9] 1 2 3 4 5 6 7 8 9 # matrix inversion a = array ([[ 4 , 1 , - 2 ], [ 2 , - 3 , 3 ], [ - 6 , - 2 , 1 ] ], dtype = 'float' ) print ( a ) ainv = linalg . inv ( a ) print ( ainv ) print ( dot ( a , ainv )) 1 2 3 4 5 6 7 8 9 [[ 4. 1. -2.] [ 2. -3. 3.] [-6. -2. 1.]] [[ 0.08333333 0.08333333 -0.08333333] [-0.55555556 -0.22222222 -0.44444444] [-0.61111111 0.05555556 -0.38888889]] [[ 1.00000000e+00 -1.38777878e-17 0.00000000e+00] [ 0.00000000e+00 1.00000000e+00 0.00000000e+00] [ 0.00000000e+00 2.08166817e-17 1.00000000e+00]] 3.2, Vectorized Functions \u00b6 1 2 3 # avoid loop, generate number with a function a = array ([ 1 , 10 , 100 , 1000 ]) print ( log10 ( a )) 1 [ 0. 1. 2. 3.] 1 2 3 4 5 6 7 8 def spf ( x ): return 3 * x vspf = vectorize ( spf ) a = array ([ 1 , 2 , 3 , 4 ]) print ( a ) print ( vspf ( a )) 1 2 [1 2 3 4] [ 3 6 9 12] 4, Data visualization \u00b6 4.1, The Matplotlib Module \u00b6 Basic or common plots. 1 2 3 4 5 6 7 8 9 % pylab inline # matplolib is part of pylab as is numpy # basic plot data = [ 1 , 2 , 5 ] plot ( data ) show () 1 Populating the interactive namespace from numpy and matplotlib 1 2 3 4 5 6 7 # basic plot x = [ 1 , 2 , 5 ] y = [ 4 , 5 , 6 ] plot ( x , y ) show () 1 2 3 4 5 6 7 8 9 10 11 # basic plot x = [ 1 , 2 , 5 ] y = [ 4 , 5 , 6 ] plot ( x , y , 'ro' ) xlabel ( 'x-axis' ) ylabel ( 'y-axis' ) axis ([ 0 , 6 , 1 , 7 ]) show () 1 2 3 4 5 6 7 8 9 10 # basic plots # data are unchanged t = arange ( 0.0 , 5.0 , 0.2 ) plot ( t , t ** 2 , 'x' ) # t2 plot ( t , t ** 3 , 'ro' ) # t3 show () 1 2 3 4 5 6 7 8 9 10 # subplot # data are unchanged subplot ( 2 , 1 , 1 ) # the first subplot plot ([ 1 , 2 , 3 , 4 ]) subplot ( 2 , 1 , 2 ) # the second subplot plot ([ 4 , 2 , 3 , 1 ]) show () 1 rand ( 10 ) 1 2 array([ 0.88744591, 0.324907 , 0.90704288, 0.81398935, 0.96866761, 0.75620965, 0.31821423, 0.64119535, 0.56738357, 0.98143592]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # subplot mark = [ 'x' , 'o' , '^' , '+' , '>' ] NR = 2 # number of rows NC = 3 # number of columns pn = 1 # plot number, starting number for row in range ( NR ): for col in range ( NC ): subplot ( NR , NC , pn ) a = rand ( 10 ) * pn plot ( a , marker = mark [( pn + 1 ) % 5 ]) # plot the random numbers vs tick = (n+1)5% xlabel ( 'plot %d X' % pn ) ylabel ( 'plot %d Y' % pn ) pn = pn + 1 # move to the 2nd plot show () 1 2 3 4 5 6 7 # polar plot th = linspace ( 0 , 2 * pi , 100 ) r = 5 * ones ( 100 ) # radius = 5 polar ( th , r ) show () 1 2 3 4 5 6 7 # pie chart labels = 'Frogs' , 'Hogs' , 'Dogs' , 'Logs' fracs = [ 25 , 25 , 30 , 20 ] pie ( fracs , labels = labels ) show () A few examples of mathematical plots. Spiral of Archimedes r = a\u03b8 r = a\u03b8 1 2 3 4 5 6 7 a = 2 th = linspace ( 0 , 10 * pi , 200 ) r = a * th polar ( th , r ) axis ([ 0 , 2 * pi , 0 , 70 ]) show () Fermat\u2019s Spiral r^2 = a^2\u03b8 r^2 = a^2\u03b8 1 2 3 4 5 6 7 a = 2 th = linspace ( 0 , 10 * pi , 200 ) r = sqrt ( a ** 2 * th ) polar ( th , r ) polar ( th , - r ) show () And more\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # example 1 x = arange ( 0 , 3 , 1 ) y = arange ( 0 , 3 , 1 ) gx , gy = meshgrid ( x , y ) print ( gx ) print ( gy ) print ( '-' * 25 ) x = arange ( - 3 * pi , 3 * pi , 0.1 ) y = arange ( - 3 * pi , 3 * pi , 0.1 ) xx , yy = meshgrid ( x , y ) z = sin ( xx ) + sin ( yy ) imshow ( z ) show () 1 2 3 4 5 6 7 [[0 1 2] [0 1 2] [0 1 2]] [[0 0 0] [1 1 1] [2 2 2]] ------------------------- 1 2 3 4 5 6 7 8 9 10 11 12 # example 2 from mpl_toolkits.mplot3d import Axes3D ax = Axes3D ( figure ()) x = arange ( - 3 * pi , 3 * pi , 0.1 ) y = arange ( - 3 * pi , 3 * pi , 0.1 ) xx , yy = meshgrid ( x , y ) z = sin ( xx ) + sin ( yy ) ax . plot_surface ( xx , yy , z , cmap = cm . jet , cstride = 1 ) show () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # example 3 from mpl_toolkits.mplot3d import Axes3D ax = Axes3D ( figure ()) phi = linspace ( 0 , 2 * pi , 400 ) x = cos ( phi ) y = sin ( phi ) z = 0 ax . plot ( x , y , z , label = 'x' ) # circle z = sin ( 4 * phi ) # modulated in z plane ax . plot ( x , y , z , label = 'x' ) ax . set_xlabel ( 'X' ) ax . set_ylabel ( 'Y' ) ax . set_zlabel ( 'Z' ) show () 1 2 3 4 5 6 7 8 9 10 11 12 13 # example 4 from mpl_toolkits.mplot3d import Axes3D ax = Axes3D ( figure ()) phi = linspace ( 0 , 2 * pi , 100 ) theta = linspace ( 0 , pi , 100 ) x = 10 * outer ( cos ( phi ), sin ( theta )) y = 10 * outer ( sin ( phi ), sin ( theta )) z = 10 * outer ( ones ( size ( phi )), cos ( theta )) ax . plot_wireframe ( x , y , z , rstride = 2 , cstride = 2 ) show () Additional mathematical plots (with functions): sine, function and friends. circles. astroids. ellipses. polar rose. power series. Fourier series. fractals. meshgrids. 2D plots. 3D plots. surface plots. line plots. wire-frame plots. advanced 3D with Mayavi (render 3D shapes). 5, Type Setting Using LaTeX \u00b6 Once a graphic or an image is generated by IPython, save it and reuse it in \\LaTeX \\LaTeX with the usepackage{graphicx} . Insert images and floating bodies. 6, Numerical Methods \u00b6 derivatives and differential calculus. integral calculus and numerical integration. optimization and linear programming. ordinary differential equations. Euler method. Runge-Kutta method. functions depending on the integrals. and more. Polynomials. Taylor\u2019s series. and other series. 6.5, Finding Roots of an Equation \u00b6 A root is where a x x intersects the y y -axis. An equation has any number of roots, or no roots at all. f(x) = x^2 f(x) = x^2 has a single root whereas f(x) = sin(x) f(x) = sin(x) has an infinite number of roots. Visual inspection will reveal the roots (by plotting the function). Other ways: the incremental search method, the method of bisection, and the Newton-Raphson method. Incremental Search Method The basic idea behind the incremental search method is simple: if f(x1) f(x1) and f(x2) f(x2) have opposite signs, then there is at least one root in the interval (x1; x2) (x1; x2) . If the interval is small enough, it is likely to contain a single root. Thus, the zeroes of f(x) f(x) can be detected by evaluating the function at intervals of \\Delta x \\Delta x and looking for change in sign. There are several potential problems with the incremental search method: it is possible to miss two closely spaced roots if the search increment \\Delta x \\Delta x is larger than the spacing of the roots. Certain singularities of f(x) f(x) can be mistaken for roots. For example, f(x) = tan(x) f(x) = tan(x) changes sign at odd multiples of \\pi/2 \\pi/2 , but these locations are not true zeroes. For example, below, function root() that searches the roots of a function f(x) f(x) from x = a x = a to x = b x = b , incrementing it by dx dx . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 % pylab inline import math def func ( x ): return x ** 3 - 10.0 * x * x + 5 def root ( f , a , b , dx ): x = a while True : f1 = f ( x ) f2 = f ( x + dx ) if f1 * f2 < 0 : return x , x + dx x = x + dx if x >= b : return ( None , None ) x , y = root ( func , 0.0 , 1.0 , . 1 ) print ( x , y ) x , y = root ( math . cos , 0.0 , 4 , . 1 ) print ( x , y ) 1 2 3 Populating the interactive namespace from numpy and matplotlib 0.7 0.7999999999999999 1.5000000000000002 1.6000000000000003 The visual inspection will confirm. Let\u2019s take the first function, f(x) = x^3 - 10x^2 + 5 f(x) = x^3 - 10x^2 + 5 , and the inspected range, [0.0, 1.0] [0.0, 1.0] , to plot a graph. 1 2 3 4 5 6 7 8 9 10 11 12 13 vector = arange ( - 10 , 20 , 0.05 ) # from numpy plot ( vector , func ( vector )) xlabel ( 'x-axis' ) ylabel ( 'y-axis' ) title ( 'Find the roots' ) axis ([ 0. , 2. , - 1. , 6. ]) # vert line # axvline(x = 4.,color = 'k',ls = 'dashed') # horiz line axhline ( y = 0 , color = 'k' , ls = 'dashed' ) show () But, there is more than one root to the polynomial function, that is, f(x) = x^3 - 10x^2 + 5 f(x) = x^3 - 10x^2 + 5 . Such function should have 3 roots. Indeed, another plot reveals two roots around x=0 x=0 and another one close to x=10 x=10 . 1 2 3 4 5 6 7 8 9 10 11 12 13 vector = arange ( - 10 , 20 , 0.05 ) # from numpy plot ( vector , func ( vector )) xlabel ( 'x-axis' ) ylabel ( 'y-axis' ) title ( 'Find the roots' ) axis ([ - 2. , 12. , - 2. , 6. ]) # vert line # axvline(x = 4.,color = 'k',ls = 'dashed') # horiz line axhline ( y = 0 , color = 'k' , ls = 'dashed' ) show () Method of Bisection The method of bisection \u001cfinds the root by successively halving the interval until it becomes sufficiently small. Bisection is not the fastest method available for computing roots, but it is the most reliable. Once a root has been bracketed, bisection will always \u001cfind it. The method of bisection works in the following manner: If there is a root between x1 x1 and x2 x2 , then f(x1)*f(x2) < 0 f(x1)*f(x2) < 0 . Next, we compute f(x3) f(x3) , where x3 = (x1 + x2) = 2 x3 = (x1 + x2) = 2 . If f(x2) * f(x3) < 0 f(x2) * f(x3) < 0 , then the root must be in (x2; x3) (x2; x3) ; we replace the original bound x1 x1 by x3 x3 . Otherwise, the root lies between x1 x1 and x3 x3 ; in this case, x3 x3 replaces x2 x2 . This process is repeated until the interval is reduced to a (previously) speci\u001cfied value, say \\epsilon \\epsilon . The number of bisections required to reach the prescribed limit, \\epsilon \\epsilon , is given by equation: n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2} n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2} Let\u2019s continue with the example from above ( f(x) = x^3 - 10x^2 + 5 f(x) = x^3 - 10x^2 + 5 ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def bisect ( f , x1 , x2 , epsilon = 1.0e-9 ): f1 = f ( x1 ) f2 = f ( x2 ) if f1 * f2 > 0.0 : print ( 'x1 and x2 are on the same side of x-axis' ) return n = math . ceil ( math . log ( abs ( x2 - x1 ) / epsilon ) / math . log ( 2.0 )) n = int ( n ) for i in range ( n ): x3 = 0.5 * ( x1 + x2 ) f3 = f ( x3 ) if f3 == 0.0 : return x3 if f2 * f3 < 0.0 : x1 = x3 f1 = f3 else : x2 = x3 f2 = f3 return ( x1 + x2 ) / 2.0 print ( bisect ( func , 0.70 , 0.8 , 1.0e-4 )) # more precise than the incremental search method print ( bisect ( func , 0.70 , 0.8 , 1.0e-9 )) # even more decimals! 1 2 0.734619140625 0.7346035074442625 Newton-Raphson Method This other method is an algorithm that requires the derivative of the function to evaluate the roots. Therefore, it is usable only in problems where the derivative can be readily computed. It does not require the value at two points to start with. We start with an initial guess which is reasonably close to the true root. Then the function is approximated by its tangent line and the x-intercept of the tangent line is calculated. This value is taken as the next guess and the process is repeated. The Newton-Raphson formula is shown below. x_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)} x_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)} Let\u2019s run an example on the quadratic equation 2x^2 \u2212 3x \u22125 = 0 2x^2 \u2212 3x \u22125 = 0 and its two tangents. It can be seen that the zeros are at x = -1 x = -1 and x = 2.5 x = 2.5 . By the way, the derivative of the equation is: 4x - 3 4x - 3 Function nr() nr() is called twice, and we get the roots nearer to the corresponding starting values. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # the function def f ( x ): return 2.0 * x ** 2 - 3 * x - 5 # the derivative def df ( x ): return 4.0 * x - 3 # the algorithm def nr ( x , tol = 1.0e-9 ): for i in range ( 30 ): dx = - f ( x ) / df ( x ) #print(x) x = x + dx if abs ( dx ) < tol : return x print ( 'The roots:' ) print ( nr ( 4 )) print ( nr ( 0 )) 1 2 3 The roots: 2.5 -1.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # the function def f ( x ): return 2.0 * x ** 2 - 3 * x - 5 # the derivative def df ( x ): return 4.0 * x - 3 # the alogorithm def nr ( x , tol = 1.0e-9 ): for i in range ( 30 ): dx = - f ( x ) / df ( x ) print ( x ) x = x + dx if abs ( dx ) < tol : return x print ( 'The iterations (nr(4):' ) print ( nr ( 4 )) print ( 'The iterations (nr(0):' ) print ( nr ( 0 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 The iterations (nr(4): 4 2.8461538461538463 2.528581510232886 2.500229650067341 2.5000000150663526 2.5 2.5 The iterations (nr(0): 0 -1.6666666666666667 -1.0919540229885056 -1.002295264224362 -1.0000015032391993 -1.0000000000006457 -1.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # the function def f ( x ): return 2.0 * x ** 2 - 3 * x - 5 # the derivative def df ( x ): return 4.0 * x - 3 # the plot vf = vectorize ( f ) x = linspace ( - 2 , 5 , 100 ) y = vf ( x ) # tangents at x = 3 and x = 4, using one point slope formula x1 = 4 tg1 = df ( x1 ) * ( x - x1 ) + f ( x1 ) x1 = 3 tg2 = df ( x1 ) * ( x - x1 ) + f ( x1 ) grid ( True ) plot ( x , y ) plot ( x , tg1 ) plot ( x , tg2 ) ylim ([ - 20 , 40 ]) show () 6.6, System of Linear Equations \u00b6 A system of m m linear equations with n n unknowns can be written in a matrix form and can be solved by using several standard techniques like the Gaussian elimination. Non-homogeneous matrix equations of the form Ax = b Ax = b can be solved by matrix inversion to obtain x = A^{\u22121}b x = A^{\u22121}b . The system of equations $$ \\begin{align} \\ 4x + y - 2z &= 0 \\ 2x - 3y + 3z &= 9 \\ -6x - 2y + z &= 0 \\end{align} $$ can be represented in the matrix form as \\begin{pmatrix} 4 & 1 & -2 \\\\ 2 & -3 & 3 \\\\ -6 & -2 & 1 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 9 \\\\ 0 \\end{pmatrix} \\begin{pmatrix} 4 & 1 & -2 \\\\ 2 & -3 & 3 \\\\ -6 & -2 & 1 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 9 \\\\ 0 \\end{pmatrix} and can be solved by \u001cnding the inverse of the coe\u001ecient matrix. \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = {\\begin{pmatrix} 4 & 1 & -2 \\\\ 2 & -3 & 3 \\\\ -6 & -2 & 1 \\end{pmatrix}}^{-1} \\begin{pmatrix} 0 \\\\ 9 \\\\ 0 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = {\\begin{pmatrix} 4 & 1 & -2 \\\\ 2 & -3 & 3 \\\\ -6 & -2 & 1 \\end{pmatrix}}^{-1} \\begin{pmatrix} 0 \\\\ 9 \\\\ 0 \\end{pmatrix} Let\u2019s solve the equation. 1 2 3 4 b = array ([ 0 , 9 , 0 ]) A = array ([[ 4 , 1 , - 2 ], [ 2 , - 3 , 3 ], [ - 6 , - 2 , 1 ]]) print ( dot ( linalg . inv ( A ), b )) 1 [ 0.75 -2. 0.5 ] x = 0.75 x = 0.75 , y = \u22122 y = \u22122 , and z = 0.5 z = 0.5 . 6.7, Least Squares Fitting \u00b6 A mathematical procedure for \u001cfinding the best-\u001cfitting curve f(x) f(x) for a given set of points (x_n, y_n) (x_n, y_n) by minimizing the sum of the squares of the vertical off\u001bsets of the points from the curve is called least squares fi\u001ctting. 1 2 3 4 5 6 # the raw data is generated by adding random numbers (between -1 and 1) to the y coordinates # generated by y = 3\u2217x + 2 NP = 50 # observations r = 2 * ranf ([ NP ]) - 0.5 print ( r ) 1 2 3 4 5 6 7 8 9 [ 0.99203986 -0.36064885 -0.48805087 0.36617374 0.29567002 1.2411945 1.03900373 -0.32058291 0.45809449 0.7741206 1.11819248 1.04958093 -0.47823795 0.14105707 -0.30262528 1.07469769 -0.44660783 -0.49313542 0.50995051 -0.11336372 1.47245243 0.34474142 0.52352519 -0.17051734 1.35723902 1.09822309 1.34626113 0.81862428 1.48731849 0.32958741 0.77572583 1.47898135 1.36664053 0.69356794 0.4978461 1.17619706 -0.24303519 0.43521904 0.88177674 0.28791814 -0.22513721 0.78901677 0.15126297 1.24899092 -0.02995487 1.2136114 0.46617806 -0.29024591 0.23178231 0.50829941] 1 2 x = linspace ( 0 , 10 , NP ) print ( x ) 1 2 3 4 5 6 7 8 9 10 [ 0. 0.20408163 0.40816327 0.6122449 0.81632653 1.02040816 1.2244898 1.42857143 1.63265306 1.83673469 2.04081633 2.24489796 2.44897959 2.65306122 2.85714286 3.06122449 3.26530612 3.46938776 3.67346939 3.87755102 4.08163265 4.28571429 4.48979592 4.69387755 4.89795918 5.10204082 5.30612245 5.51020408 5.71428571 5.91836735 6.12244898 6.32653061 6.53061224 6.73469388 6.93877551 7.14285714 7.34693878 7.55102041 7.75510204 7.95918367 8.16326531 8.36734694 8.57142857 8.7755102 8.97959184 9.18367347 9.3877551 9.59183673 9.79591837 10. ] 1 2 data = 3 * x + 2 + r print ( data ) 1 2 3 4 5 6 7 8 9 10 [ 2.99203986 2.25159605 2.73643893 4.20290843 4.74464961 6.30241899 6.71247312 5.96513138 7.35605367 8.28432469 9.24064146 9.7842748 8.86870082 10.10024074 10.26880329 12.25837115 11.34931053 11.91502784 13.53035867 13.51928934 15.71735039 15.20188427 15.99291295 15.91111532 18.05111657 18.40434554 19.26462847 19.34923652 20.63017563 20.08468945 21.14307277 22.45857319 22.95847726 22.89764957 23.31417263 24.60476849 23.79778114 25.08828026 26.14708286 26.16546916 26.26465871 27.89105759 27.86554869 29.57552153 28.90882064 30.76463181 30.62944337 30.48526429 31.61953741 32.50829941] 1 2 3 xbar = mean ( x ) ybar = mean ( data ) print ( xbar , ybar ) 1 5.0 17.5215723854 1 2 3 b = sum ( data * ( x - xbar )) / sum ( x * ( x - xbar )) a = ybar - xbar * b print ( a , b ) 1 2.41774233468 3.02076601014 1 2 3 4 5 6 y = a + b * x plot ( x , y ) plot ( x , data , 'ob' ) show () 6.8, Interpolation \u00b6 Interpolation is the process of constructing a function f(x) f(x) from a set of data points (x_i, y_i) (x_i, y_i) , in the interval a < x < b a < x < b that will satisfy y_i = f(x_i) y_i = f(x_i) for any point in the same interval. In other words, we find an equation with several observation by reverse engineering; we stand at the doorstep of machine and statistical learning here! The easiest way is to construct a polynomial of degree n n , such as a Newton\u2019s interpolating polynomial, that passes through the n + 1 n + 1 distinct data points. Consult the document for the mathematical demonstration. Let\u2019s do an example. 1 2 3 4 5 6 7 8 9 10 11 12 13 # calculate the coefficients from copy import copy def coef ( x , y ): a = copy ( y ) # copy the list y to coefficient a m = len ( x ) for k in range ( 1 , m ): # with two loops, calculate the difference tmp = copy ( a ) for i in range ( k , m ): tmp [ i ] = ( a [ i ] - a [ i - 1 ]) / ( x [ i ] - x [ i - k ]) a = copy ( tmp ) return a 1 2 3 4 x = [ 0 , 1 , 2 , 3 ] y = [ 0 , 3 , 14 , 39 ] print ( coef ( x , y )) 1 [0, 3.0, 4.0, 1.0] 1 2 3 4 5 6 7 8 # the same can be done with a Numpy array def coef ( x , y ): a = copy ( y ) m = len ( x ) for k in range ( 1 , m ): a [ k : m ] = ( a [ k : m ] - a [ k - 1 ]) / ( x [ k : m ] - x [ k - 1 ]) return a 1 2 3 4 x = array ([ 0 , 1 , 2 , 3 ]) y = array ([ 0 , 3 , 14 , 39 ]) print ( coef ( x , y )) 1 [0 3 4 1] The next step is to calculate the value of y y for any given value of x x , using the coffe\u001ecients already calculated (above). The program generates 20 new values of x x , and calculate corresponding values of y y and plots them along with the original data points. The function eval() uses the recurrence relation. You may explore the results for new points outside the range by changing the second argument of line newx = linspace(0,3,NP) newx = linspace(0,3,NP) to a higher value. 1 2 3 4 5 6 def eval ( a , xpoints , x ): n = len ( xpoints ) - 1 p = a [ n ] for k in range ( 1 , n + 1 ): p = a [ n - k ] + ( x - xpoints [ n - k ]) * p return p 1 2 3 4 5 6 def coef ( x , y ): a = copy ( y ) m = len ( x ) for k in range ( 1 , m ): a [ k : m ] = ( a [ k : m ] - a [ k - 1 ]) / ( x [ k : m ] - x [ k - 1 ]) return a 1 2 3 x = array ([ 0 , 1 , 2 , 3 ]) y = array ([ 0 , 3 , 14 , 39 ]) coef = coef ( x , y ) 1 2 3 NP = 20 newx = linspace ( 0 , 3 , NP ) # New x-values newy = zeros ( NP ) 1 2 for i in range ( NP ): # evaluate y-values newy [ i ] = eval ( coef , x , newx [ i ]) 1 2 3 4 plot ( newx , newy , '-x' ) plot ( x , y , 'ro' ) show ()","title":"Python for Education"},{"location":"Python for Education/#25-python-lists","text":"1 2 3 4 5 6 a = 'hello world' # extract, subset print ( a [ 3 : 5 ]) print ( a [ 6 :]) print ( a [: 5 ]) 1 2 3 lo world hello 1 2 3 4 5 a = [ 1 , 2 ] print ( a ) print ( a * 2 ) # double print print ( a + [ 1 , 1 ]) # concatenate 1 2 3 [1, 2] [1, 2, 1, 2] [1, 2, 1, 1] 1 2 3 4 5 6 7 b = [ 1 , 2 , a ] print ( b ) # embed b [ 2 ] = 3 print ( b ) # change a mutable from the above list # Output: 1 2 [1, 2, [1, 2]] [1, 2, 3]","title":"2.5, Python Lists"},{"location":"Python for Education/#27-input-from-the-keyboard","text":"input for numeric data. raw_input for string data. 1 2 3 4 x = input ( 'Enter an integer (x): ' ) y = input ( 'Enter another one (y): ' ) print ( 'The sum is = ' , x + y ) # print as numeric, input 1 2 3 Enter an integer (x): 1 Enter another one (y): 2 ('The sum is = ', 3) 1 2 3 4 t = raw_input ( 'Enter an integer: ' ) u = raw_input ( 'Enter another one: ' ) print ( 'The sum is = ' , t + u ) # print as string, raw input 1 2 3 Enter an integer: 2 Enter another one: 3 ('The sum is = ', '23') 1 2 3 4 v = input ( 'Enter an integer: ' ) w = input ( 'Enter another one: ' ) print ( 'The sum is = ' , str ( v ) + str ( w )) # print as string, input changes into a string 1 2 3 Enter an integer: 1 Enter another one: 1 ('The sum is = ', '11') 1 2 3 4 y1 = raw_input ( 'Enter an integer: ' ) y2 = raw_input ( 'Enter another one: ' ) print ( 'The sum is = ' , int ( y1 ) + int ( y2 )) # print as numeric, raw input changed into integer 1 2 3 Enter an integer: 2 Enter another one: 2 ('The sum is = ', 4) 1 2 3 4 y3 = raw_input ( 'Enter an integer: ' ) y4 = raw_input ( 'Enter another one: ' ) print ( 'The sum is = ' , float ( y3 ) + float ( y4 )) # print as numeric, raw input changed into float 1 2 3 Enter an integer: 1 Enter another one: 2 ('The sum is = ', 3.0)","title":"2.7, Input from the Keyboard"},{"location":"Python for Education/#211-line-joining","text":"1 2 3 4 year = input ( 'year: ' ) month = input ( 'month: ' ) if 1900 < year < 2100 and 1 <= month <= 12 : print ( 'I am so long and will not fit in a single line' ) 1 2 3 year : 2016 month : 10 I am so long and will not fit in a single line 1 2 3 4 5 6 7 # simplify the code, shorten the line year = input ( 'year: ' ) month = input ( 'month: ' ) if 1900 < year < 2100 \\ and 1 <= month <= 12 : print ( 'I am so long and will \\ not fit in a single line' ) 1 2 3 year : 2016 month : 10 I am so long and will not fit in a single line 1 2 # object, variable type print ( type ( 4.5 )) 1 &lt;type 'float'&gt;","title":"2.11, Line joining"},{"location":"Python for Education/#214-more-on-strings-and-lists","text":"1 2 3 4 5 s = 'hello world' # string length print ( len ( s )) print ( s . upper ()) 1 2 11 HELLO WORLD 1 2 # help with help ( str ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 Help on class str in module __builtin__ : class str ( basestring ) | str ( object = '' ) -& gt ; string | | Return a nice string representation of the object . | If the argument is a string , the return value is the same object . | | Method resolution order : | str | basestring | object | | Methods defined here : | | __add__ (...) | x . __add__ ( y ) & lt ; ==& gt ; x + y | | __contains__ (...) | x . __contains__ ( y ) & lt ; ==& gt ; y in x | | __eq__ (...) | x . __eq__ ( y ) & lt ; ==& gt ; x == y | | __format__ (...) | S . __format__ ( format_spec ) -& gt ; string | | Return a formatted version of S as described by format_spec . | | __ge__ (...) | x . __ge__ ( y ) & lt ; ==& gt ; x & gt ; = y | | __getattribute__ (...) | x . __getattribute__ ( 'name' ) & lt ; ==& gt ; x . name | | __getitem__ (...) | x . __getitem__ ( y ) & lt ; ==& gt ; x [ y ] | | __getnewargs__ (...) | | __getslice__ (...) | x . __getslice__ ( i , j ) & lt ; ==& gt ; x [ i : j ] | | Use of negative indices is not supported . | | __gt__ (...) | x . __gt__ ( y ) & lt ; ==& gt ; x & gt ; y | | __hash__ (...) | x . __hash__ () & lt ; ==& gt ; hash ( x ) | | __le__ (...) | x . __le__ ( y ) & lt ; ==& gt ; x & lt ; = y | | __len__ (...) | x . __len__ () & lt ; ==& gt ; len ( x ) | | __lt__ (...) | x . __lt__ ( y ) & lt ; ==& gt ; x & lt ; y | | __mod__ (...) | x . __mod__ ( y ) & lt ; ==& gt ; x % y | | __mul__ (...) | x . __mul__ ( n ) & lt ; ==& gt ; x * n | | __ne__ (...) | x . __ne__ ( y ) & lt ; ==& gt ; x != y | | __repr__ (...) | x . __repr__ () & lt ; ==& gt ; repr ( x ) | | __rmod__ (...) | x . __rmod__ ( y ) & lt ; ==& gt ; y % x | | __rmul__ (...) | x . __rmul__ ( n ) & lt ; ==& gt ; n * x | | __sizeof__ (...) | S . __sizeof__ () -& gt ; size of S in memory , in bytes | | __str__ (...) | x . __str__ () & lt ; ==& gt ; str ( x ) | | capitalize (...) | S . capitalize () -& gt ; string | | Return a copy of the string S with only its first character | capitalized . | | center (...) | S . center ( width [, fillchar ]) -& gt ; string | | Return S centered in a string of length width . Padding is | done using the specified fill character ( default is a space ) | | count (...) | S . count ( sub [, start [, end ]]) -& gt ; int | | Return the number of non - overlapping occurrences of substring sub in | string S [ start : end ]. Optional arguments start and end are interpreted | as in slice notation . | | decode (...) | S . decode ([ encoding [, errors ]]) -& gt ; object | | Decodes S using the codec registered for encoding . encoding defaults | to the default encoding . errors may be given to set a different error | handling scheme . Default is 'strict' meaning that encoding errors raise | a UnicodeDecodeError . Other possible values are 'ignore' and 'replace' | as well as any other name registered with codecs . register_error that is | able to handle UnicodeDecodeErrors . | | encode (...) | S . encode ([ encoding [, errors ]]) -& gt ; object | | Encodes S using the codec registered for encoding . encoding defaults | to the default encoding . errors may be given to set a different error | handling scheme . Default is 'strict' meaning that encoding errors raise | a UnicodeEncodeError . Other possible values are 'ignore' , 'replace' and | 'xmlcharrefreplace' as well as any other name registered with | codecs . register_error that is able to handle UnicodeEncodeErrors . | | endswith (...) | S . endswith ( suffix [, start [, end ]]) -& gt ; bool | | Return True if S ends with the specified suffix , False otherwise . | With optional start , test S beginning at that position . | With optional end , stop comparing S at that position . | suffix can also be a tuple of strings to try . | | expandtabs (...) | S . expandtabs ([ tabsize ]) -& gt ; string | | Return a copy of S where all tab characters are expanded using spaces . | If tabsize is not given , a tab size of 8 characters is assumed . | | find (...) | S . find ( sub [, start [, end ]]) -& gt ; int | | Return the lowest index in S where substring sub is found , | such that sub is contained within S [ start : end ]. Optional | arguments start and end are interpreted as in slice notation . | | Return - 1 on failure . | | format (...) | S . format ( * args , ** kwargs ) -& gt ; string | | Return a formatted version of S , using substitutions from args and kwargs . | The substitutions are identified by braces ( '{' and '}' ). | | index (...) | S . index ( sub [, start [, end ]]) -& gt ; int | | Like S . find () but raise ValueError when the substring is not found . | | isalnum (...) | S . isalnum () -& gt ; bool | | Return True if all characters in S are alphanumeric | and there is at least one character in S , False otherwise . | | isalpha (...) | S . isalpha () -& gt ; bool | | Return True if all characters in S are alphabetic | and there is at least one character in S , False otherwise . | | isdigit (...) | S . isdigit () -& gt ; bool | | Return True if all characters in S are digits | and there is at least one character in S , False otherwise . | | islower (...) | S . islower () -& gt ; bool | | Return True if all cased characters in S are lowercase and there is | at least one cased character in S , False otherwise . | | isspace (...) | S . isspace () -& gt ; bool | | Return True if all characters in S are whitespace | and there is at least one character in S , False otherwise . | | istitle (...) | S . istitle () -& gt ; bool | | Return True if S is a titlecased string and there is at least one | character in S , i . e . uppercase characters may only follow uncased | characters and lowercase characters only cased ones . Return False | otherwise . | | isupper (...) | S . isupper () -& gt ; bool | | Return True if all cased characters in S are uppercase and there is | at least one cased character in S , False otherwise . | | join (...) | S . join ( iterable ) -& gt ; string | | Return a string which is the concatenation of the strings in the | iterable . The separator between elements is S . | | ljust (...) | S . ljust ( width [, fillchar ]) -& gt ; string | | Return S left - justified in a string of length width . Padding is | done using the specified fill character ( default is a space ). | | lower (...) | S . lower () -& gt ; string | | Return a copy of the string S converted to lowercase . | | lstrip (...) | S . lstrip ([ chars ]) -& gt ; string or unicode | | Return a copy of the string S with leading whitespace removed . | If chars is given and not None , remove characters in chars instead . | If chars is unicode , S will be converted to unicode before stripping | | partition (...) | S . partition ( sep ) -& gt ; ( head , sep , tail ) | | Search for the separator sep in S , and return the part before it , | the separator itself , and the part after it . If the separator is not | found , return S and two empty strings . | | replace (...) | S . replace ( old , new [, count ]) -& gt ; string | | Return a copy of string S with all occurrences of substring | old replaced by new . If the optional argument count is | given , only the first count occurrences are replaced . | | rfind (...) | S . rfind ( sub [, start [, end ]]) -& gt ; int | | Return the highest index in S where substring sub is found , | such that sub is contained within S [ start : end ]. Optional | arguments start and end are interpreted as in slice notation . | | Return - 1 on failure . | | rindex (...) | S . rindex ( sub [, start [, end ]]) -& gt ; int | | Like S . rfind () but raise ValueError when the substring is not found . | | rjust (...) | S . rjust ( width [, fillchar ]) -& gt ; string | | Return S right - justified in a string of length width . Padding is | done using the specified fill character ( default is a space ) | | rpartition (...) | S . rpartition ( sep ) -& gt ; ( head , sep , tail ) | | Search for the separator sep in S , starting at the end of S , and return | the part before it , the separator itself , and the part after it . If the | separator is not found , return two empty strings and S . | | rsplit (...) | S . rsplit ([ sep [, maxsplit ]]) -& gt ; list of strings | | Return a list of the words in the string S , using sep as the | delimiter string , starting at the end of the string and working | to the front . If maxsplit is given , at most maxsplit splits are | done . If sep is not specified or is None , any whitespace string | is a separator . | | rstrip (...) | S . rstrip ([ chars ]) -& gt ; string or unicode | | Return a copy of the string S with trailing whitespace removed . | If chars is given and not None , remove characters in chars instead . | If chars is unicode , S will be converted to unicode before stripping | | split (...) | S . split ([ sep [, maxsplit ]]) -& gt ; list of strings | | Return a list of the words in the string S , using sep as the | delimiter string . If maxsplit is given , at most maxsplit | splits are done . If sep is not specified or is None , any | whitespace string is a separator and empty strings are removed | from the result . | | splitlines (...) | S . splitlines ( keepends = False ) -& gt ; list of strings | | Return a list of the lines in S , breaking at line boundaries . | Line breaks are not included in the resulting list unless keepends | is given and true . | | startswith (...) | S . startswith ( prefix [, start [, end ]]) -& gt ; bool | | Return True if S starts with the specified prefix , False otherwise . | With optional start , test S beginning at that position . | With optional end , stop comparing S at that position . | prefix can also be a tuple of strings to try . | | strip (...) | S . strip ([ chars ]) -& gt ; string or unicode | | Return a copy of the string S with leading and trailing | whitespace removed . | If chars is given and not None , remove characters in chars instead . | If chars is unicode , S will be converted to unicode before stripping | | swapcase (...) | S . swapcase () -& gt ; string | | Return a copy of the string S with uppercase characters | converted to lowercase and vice versa . | | title (...) | S . title () -& gt ; string | | Return a titlecased version of S , i . e . words start with uppercase | characters , all remaining cased characters have lowercase . | | translate (...) | S . translate ( table [, deletechars ]) -& gt ; string | | Return a copy of the string S , where all characters occurring | in the optional argument deletechars are removed , and the | remaining characters have been mapped through the given | translation table , which must be a string of length 256 or None . | If the table argument is None , no translation is applied and | the operation simply removes the characters in deletechars . | | upper (...) | S . upper () -& gt ; string | | Return a copy of the string S converted to uppercase . | | zfill (...) | S . zfill ( width ) -& gt ; string | | Pad a numeric string S with zeros on the left , to fill a field | of the specified width . The string S is never truncated . | | ---------------------------------------------------------------------- | Data and other attributes defined here : | | __new__ = & lt ; built - in method __new__ of type object & gt ; | T . __new__ ( S , ...) -& gt ; a new object with type S , a subtype of T 1 2 3 4 s = 'I am a long string' # split a string on space print ( s . split ()) 1 ['I', 'am', 'a', 'long', 'string'] 1 2 3 4 5 a = 'abc.abc.abc' # split a string on dot aa = a . split ( '.' ) print ( aa ) 1 ['abc', 'abc', 'abc'] 1 2 3 # join the elements, join character mm = '+' . join ( aa ) print ( mm ) 1 abc+abc+abc 1 2 3 4 5 6 7 8 a = [] # append to a list a . append ( 3 ) print ( a ) a . append ( 4 ) print ( a ) 1 2 [3] [3, 4] 1 2 3 4 5 6 # insert 2.5 as first element (at index = 0) a . insert ( 0 , 2.5 ) # print several items print ( a , a [ 0 ]) print ( len ( a )) 1 2 ([2.5, 3, 4], 2.5) 3 1 2 3 4 5 6 7 # copy module a = [ 1 , 2 , 3 , 4 ] print ( a ) b = a print ( a == b ) # True 1 2 [1, 2, 3, 4] True 1 2 # insert at index = 0 b [ 0 ] = 5 1 2 3 # b is a live duplicate, not an independent copy print ( a is b ) print ( a , b ) 1 2 True ([5, 2, 3, 4], [5, 2, 3, 4]) 1 2 3 import copy c = copy . copy ( a ) 1 2 3 # c is an ind. copy print ( a is c ) print ( a , c ) 1 2 False ([5, 2, 3, 4], [5, 2, 3, 4]) 1 2 3 # replace at index = 1 c [ 1 ] = 100 print ( a , c ) 1 ([5, 2, 3, 4], [5, 100, 3, 4])","title":"2.14, More on Strings and Lists"},{"location":"Python for Education/#recap-from-the-above-snippets","text":"1 2 3 4 5 6 7 dicty = { 'a' : 'apple' , 'b' : 'berry' , 'c' : 'cherry' } for keyy in dicty : print ( 'keys are: ' ), keyy print ( '-' * 5 ) print ( 'values are: ' ), dicty [ keyy ] print ( '-' * 10 ) 1 2 3 4 5 6 7 8 9 10 11 12 keys are: a ----- values are: apple ---------- keys are: c ----- values are: cherry ---------- keys are: b ----- values are: berry ---------- 1 2 3 4 5 6 7 8 9 10 11 print ( type ( 0 )) print ( type ( 255 )) print ( type ( - 1 )) print ( type ( - 255 )) print ( type ( - 30000 )) print ( type ( 30000 )) print ( type ( - 3500000 )) print ( type ( 3500000 )) print ( type ( - 1.5 )) print ( type ( 1.345456734576345 )) print ( type ( '4' )) 1 2 3 4 5 6 7 8 9 10 11 &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'int'&gt; &lt;type 'float'&gt; &lt;type 'float'&gt; &lt;type 'str'&gt; 1 2 3 4 5 6 7 8 a1 = input ( 'Enter: ' ) a2 = a1 a3 = bytes ( a1 ) # 0 - 255 a4 = int ( a1 ) # -32768 - 32768 a5 = long ( a1 ) # -2147483648 - a6 = float ( a1 ) a9 = str ( a1 ) 1 Enter : 1 1 2 3 4 5 listnum = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] for i in listnum : if i % 2 == 0 : # even print ( i ), 1 0 2 4 6 8 10 1 2 3 for i in range ( 0 , 10 ): if i % 2 == 0 : # even print ( i ), 1 0 2 4 6 8 1 2 3 for i in range ( 0 , 100 , 3 ): if i % 2 == 0 : # even print ( i ), 1 0 6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96 1 2 3 4 5 6 7 8 listnum = [ 'a' , 'b' ] listtext = [] for i in listnum : if i == 'b' : # even listtext . append ( i ) print listtext 1 ['b'] 1 2 3 4 5 6 7 lst = [ 3 , 5 , 7 ] lst . append ( 9 ) print lst lst . append ( lst [ 0 ]) print ( lst ) 1 2 [3, 5, 7, 9] [3, 5, 7, 9, 3] 1 2 3 4 5 6 7 lst = [ 'a' , 'b' , 'c' ] lst . append ( 'd' ) print ( lst ) lst . append ( lst [ 0 ]) print ( lst ) 1 2 ['a', 'b', 'c', 'd'] ['a', 'b', 'c', 'd', 'a'] 1 2 3 4 elements = ( 'foo' , 'bar' , 'baz' ) for elem in elements : print ( elem ) 1 2 3 foo bar baz 1 2 for count , elem in enumerate ( elements ): print ( count , elem ) 1 2 3 (0, 'foo') (1, 'bar') (2, 'baz') 1 2 3 4 listnum = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] listnum . pop () # last print ( listnum ) 1 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 1 2 listnum . pop ( 0 ) # position 0 print ( listnum ) 1 [1, 2, 3, 4, 5, 6, 7, 8, 9] 1 2 listnum . pop ( 2 ) # position 2 print ( listnum ) 1 [1, 2, 4, 5, 6, 7, 8, 9] 1 2 listnum . remove ( 8 ) # specific element print ( listnum ) 1 [1, 2, 4, 5, 6, 7, 9] 1 2 del ( listnum [ 0 ]) print ( listnum ) 1 [2, 4, 5, 6, 7, 9] 1 2 3 4 5 6 7 8 9 10 11 word = 'original' word2 = word . upper () word3 = word . capitalize () first = word [ 0 ] allbutfirst = word [ 1 : len ( word )] print ( word ) print ( word2 ) print ( word3 ) print ( first ) print ( allbutfirst ) 1 2 3 4 5 original ORIGINAL Original o riginal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 list1 = [ 1 , 2 , 3 ] list2 = [ 4 , 5 , 6 , 7 ] list3 = [ list1 , list2 ] results = [] def joiny ( listy ): for lst in listy : for num in lst : results . append ( num ) return results print ( joiny ( list3 )) 1 [1, 2, 3, 4, 5, 6, 7]","title":"Recap from the Above (Snippets)"},{"location":"Python for Education/#215-python-modules-and-packages","text":"1 print ( sin ( 0.5 )) 1 0.479425538604 1 2 3 # rename, more efficient import math as m print ( m . sin ( 0.5 )) 1 0.479425538604 1 2 3 4 5 6 7 # package.module.function() import random a = random . randint ( 1 , 5 ) print ( a ) random . randint ( 1 , 10 ) 1 2 3 8 1 2 3 4 import random as rd aa = rd . randint ( 1 , 5 ) print ( aa ) 1 5","title":"2.15, Python Modules and Packages"},{"location":"Python for Education/#216-files-inputouput","text":"1 2 3 4 # create the file f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt' , 'w' ) f . write ( 'This is a test file' ) # write in f . close () 1 2 3 4 # read it f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt' , 'r' ) print ( f . read ()) f . close () 1 This is a test file 1 2 3 4 5 # read it again f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt' , 'r' ) print ( f . read ( 7 )) # get first seven characters on the console print ( f . read ()) # get the remaining ones f . close () 1 2 This is a test file 1 2 3 4 5 6 # create it f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' , 'w' ) for k in range ( 1 , 10 ): # 1, 2, 3 stop before 4 s = ' %3d \\n ' % ( k ) # no format 3d, new line f . write ( s ) # write in f . close () 1 2 3 4 # read it f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' , 'r' ) # open print ( f . read ()) f . close () 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 # read it horizontally f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' , 'r' ) # open print ( f . read (),) f . close () 1 (' 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n',) 1 2 3 4 5 6 7 8 f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' , 'r' ) while 1 : # infinite loop s = f . readline () if s == '' : # Empty string means end of file break # terminate the loop m = int ( s ) # Convert to integer print ( m * 5 ), f . close () 1 5 10 15 20 25 30 35 40 45 1 2 3 4 # create it f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt' , 'w' ) f . write ( '' ) f . close () 1 2 3 4 5 6 7 8 9 10 # give an error if there is a blank line in the file # test it (without the if, there would be an error) f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt' , 'r' ) while 1 : # infinite loop s = f . readline () if s == '' : # empty string means end of file break # terminate the loop m = int ( s ) # convert to integer print ( m * 5 ) f . close () 1 2 3 4 5 6 7 8 9 # alternatively f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt' , 'r' ) while 1 : # infinite loop s = f . readline () if len ( s ) < 1 : # string with no value break # terminate the loop m = int ( s ) # convert to integer print ( m * 5 ) f . close () Strings can easily be written to and read from a \u001cle. Numbers take a bit more e\u001bort, since the read() method only returns Strings, which will have to be converted in to a number explicitly. However, when you want to save and restore data types like lists, dictionaries, or class instances, things get a lot more complicated. Rather than have the users constantly writing and debugging code to save complicated data types, Python provides a standard module called pickle . The pickle module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure. \u201cPickling\u201d is the process whereby a Python object hierarchy is converted into a byte stream, and \u201cunpickling\u201d is the inverse operation, whereby a byte stream is converted back into an object hierarchy. Pickling (and unpickling) is alternatively known as \u201cserialization\u201d, \u201cmarshalling,\u201d [1] or \u201cflattening\u201d, however, to avoid confusion, the terms used here are \u201cpickling\u201d and \u201cunpickling\u201d. 1 2 3 4 5 import pickle f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt' , 'w' ) pickle . dump ( 12.3 , f ) # write a float type f . close () 1 2 3 4 f = open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt' , 'r' ) x = pickle . load ( f ) print ( x , type ( x )) # check the type of data read f . close () 1 (12.3, &lt;type 'float'&gt;)","title":"2.16, Files Input/Ouput"},{"location":"Python for Education/#217-formatted-printing","text":"1 2 3 4 a = 2.0 / 3 # 2/3 will print zero because of integer print ( a ) print ( 'a = %5.3f ' ) % ( a ) # up to 3 decimal places 1 2 0.666666666667 a = 0.667 Conversion Conversion Example Result d, i signed Integer \u2018%6d\u2019%(12) \u2018 12\u2019 f \u001d foating point decimal \u2018%6.4f\u2019%(2.0/3) 0.667 e \u001d floating point exponential \u2018%6.2e\u2019%(2.0/3) 6.67e-01 x hexadecimal \u2018%x\u2019%(16) 10 o octal \u2018%o\u2019%(8) 10 s string \u2018%s\u2019%(\u2018abcd\u2019) abcd 0d modi\u001ced \u2018d\u2019 \u2018%05d\u2019%(12) 00012 1 2 a = 'justify as you like' print ( ' %30s ' ) % ( a ) # right justified 1 justify as you like 1 print ( ' %-30s ' ) % ( a ) # minus sign for left justification 1 justify as you like 1 2 for k in range ( 1 , 11 ): # A good looking table print ( '5 x %2d = %2d ' ) % ( k , 5 * k ) # add 2 spaces before 1 2 3 4 5 6 7 8 9 10 5 x 1 = 5 5 x 2 = 10 5 x 3 = 15 5 x 4 = 20 5 x 5 = 25 5 x 6 = 30 5 x 7 = 35 5 x 8 = 40 5 x 9 = 45 5 x 10 = 50","title":"2.17, Formatted Printing"},{"location":"Python for Education/#218-exception-handling","text":"1 2 3 4 5 6 x = input ( 'Enter a number ' ) try : print ( 10.0 / x ) except : print ( 'Division by zero not allowed' ) 1 2 Enter a number 0 Division by zero not allowed","title":"2.18, Exception Handling"},{"location":"Python for Education/#220-writing-gui-programs","text":"Tkinter An introduction to tkinter . Tkinter . Tkinter . The GUI programs are event-driven like a macro. Create Widgets like a Button, Label, Canvas, etc. The first step is to create a main graphics window by calling the function Tk() . 1 2 3 4 5 6 7 8 9 # Example tkmain.py # open an empty box with min, max, close buttons import Tkinter as tk root = tk . Tk () root . mainloop () # it opens a windows! 1 2 3 4 5 6 7 8 9 # Example tklabel.py root = tk . Tk () w = tk . Label ( root , text = \"Hello, world\" ) w . pack () root . mainloop () # it opens a windows with the text in it 1 2 3 4 5 6 7 8 9 10 11 12 # Example tkbutton.py def hello (): print ( 'hello world' ) w = tk . Tk () # Creates the main Graphics window b = tk . Button ( w , text = 'Click Me' , command = hello ) b . pack () w . mainloop () # it opens a windows with a button; after clicking, it print the function 1 hello world 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Example tkcanvas.py def draw ( event ): c . create_rectangle ( event . x , \\ event . y , event . x + 5 , event . y + 5 ) w = tk . Tk () c = tk . Canvas ( w , width = 300 , height = 200 ) c . pack () c . bind ( \"<Button-1>\" , draw ) w . mainloop () # it open a windows; you can left-click and add dots in it 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Example tkcanvas2.py recs = [] # list keeping track of the rectangles def remove ( event ): global recs if len ( recs ) > 0 : c . delete ( recs [ 0 ]) # delete from Canvas recs . pop ( 0 ) # delete first item from list def draw ( event ): global recs r = c . create_rectangle ( event . x , \\ event . y , event . x + 5 , event . y + 5 ) recs . append ( r ) w = tk . Tk () c = tk . Canvas ( w , width = 300 , height = 200 ) c . pack () c . bind ( \"<Button-1>\" , draw ) c . bind ( \"<Button-3>\" , remove ) w . mainloop () # it open a windows; you can left-click and add dots in it; right-click and remove them","title":"2.20, Writing GUI Programs"},{"location":"Python for Education/#221-object-oriented-programming-in-python","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # example point.py class Point : ''' This is documentation comment. help(Point) will display this. ''' def __init__ ( self , x = 0 , y = 0 ): self . xpos = x self . ypos = y def __str__ ( self ): # overload print() return 'Point at ( %f , %f )' % ( self . xpos , self . ypos ) def __add__ ( self , other ): # overloads xpos = self . xpos + other . xpos ypos = self . ypos + other . ypos return Point ( xpos , ypos ) def __sub__ ( self , other ): # overloads import math dx = self . xpos - other . xpos dy = self . ypos - other . ypos return math . sqrt ( dx ** 2 + dy ** 2 ) def dist ( self ): import math return math . sqrt ( self . xpos ** 2 + self . ypos ** 2 ) 1 2 3 4 5 6 7 8 9 10 11 12 # example point1.py # import Point # if point.py is in the same directory and script point1.py is independent from point.py origin = Point () # instance print ( origin ) p1 = Point ( 4 , 4 ) # instance p2 = Point ( 8 , 7 ) print ( p1 ) 1 2 Point at (0.000000,0.000000) Point at (4.000000,4.000000) 1 print ( p2 ) # __str__ 1 Point at (8.000000,7.000000) 1 print ( p1 + p2 ) # __add__, __str__, (4 + 4, 7 + 4) 1 Point at (12.000000,11.000000) 1 print ( p1 - p2 ) # __sub__, __str__, ((4 - 8) ** 2, (3 - 7) ** 2) 1 5.0 1 print ( p1 . dist ()) # # __dist__, __str__, sqrt((4) ** 2 + (4) ** 2) 1 5.65685424949 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # example cpoint.py class colPoint ( Point ): # colPoint inherits Point ''' This is documentation comment. help(colPoint) will display this. ''' color = 'black' def __init__ ( self , x = 0 , y = 0 , col = 'black' ): Point . __init__ ( self , x , y ) self . color = col def __str__ ( self ): return ' %s colored Point at ( %f , %f )' % \\ ( self . color , self . xpos , self . ypos ) 1 2 3 4 5 6 7 # example point2.py # import cpoint # see above for the explanation p1 = Point ( 5 , 5 ) rp1 = colPoint ( 2 , 2 , 'red' ) 1 print ( p1 ) Point at (5.000000,5.000000) 1 print ( rp1 ) 1 red colored Point at (2.000000,2.000000) 1 print ( rp1 + p1 ) 1 Point at (7.000000,7.000000) 1 print ( rp1 . dist ()) 1 2.82842712475","title":"2.21, Object-Oriented Programming in Python"},{"location":"Python for Education/#3-arrays-and-matrices","text":"Let\u2019s switch to Python 3 for the remaining of the document.","title":"3, Arrays and Matrices"},{"location":"Python for Education/#31-the-numpy-module","text":"Install (check) the Scipy Stack before. numpy . scipy . matplotlib . pandas . sympy . nose (testing). With pip . Note The code below in Python 3 on Jupyter Notebook 3 installed on a Windows PC. However, running the Scipy Stack in Python 2.7 is problematic. Switch kernel from here: from Python 2 to 3. No need to import numpy , matplotlib since it\u2019s included in the %pylab command. 1 2 3 4 5 6 % pylab inline # the Scipy Stack is executed in the notebook, no need to import numpy x = array ([ 1 , 2 , 3 ]) # make array from list print ( x , type ( x )) 1 2 Populating the interactive namespace from numpy and matplotlib [1 2 3] &lt;class 'numpy.ndarray'&gt; 1 2 3 4 a = [[ 1 , 2 ], [ 3 , 4 ]] # make a list of lists x = array ( a ) # and convert to an array print ( a ) 1 [[1, 2], [3, 4]] 1 arange ( 2.0 , 3.0 , . 1 ) 1 array([ 2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9]) 1 array ([ 2. , 2.1 , 2.2 , 2.3 , 2.4 , 2.5 , 2.6 , 2.7 , 2.8 , 2.9 ]) 1 array([ 2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9]) 1 linspace ( 1 , 2 , 11 ) 1 array([ 1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. ]) 1 array ([ 1. , 1.1 , 1.2 , 1.3 , 1.4 , 1.5 , 1.6 , 1.7 , 1.8 , 1.9 , 2. ]) 1 array([ 1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. ]) 1 zeros ([ 3 , 2 ], 'float' ) 1 2 3 array([[ 0., 0.], [ 0., 0.], [ 0., 0.]]) 1 zeros ([ 3 , 2 ], 'int' ) 1 2 3 array([[0, 0], [0, 0], [0, 0]]) 1 ones ([ 2 , 2 ], 'i' ) 1 2 array([[1, 1], [1, 1]], dtype=int32) 1 random . random ([ 3 , 3 ]) 1 2 3 array([[ 0.51158139, 0.83490474, 0.82306296], [ 0.65830757, 0.98560397, 0.78565885], [ 0.09887894, 0.11073038, 0.31037259]]) 1 2 a = arange ( 20 ) print ( a ) 1 [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19] 1 2 b = reshape ( a , [ 4 , 5 ]) print ( b ) 1 2 3 4 [[ 0 1 2 3 4] [ 5 6 7 8 9] [10 11 12 13 14] [15 16 17 18 19]] 1 2 a = arange ( 1.0 , 2.0 , 0.1 ) print ( a ) 1 [ 1. 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9] 1 2 b = linspace ( 1 , 2 , 11 ) print ( b ) 1 [ 1. 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2. ] 1 2 c = ones ( 5 , 'float' ) print ( c ) 1 [ 1. 1. 1. 1. 1.] 1 2 d = zeros ( 5 , 'int' ) print ( d ) 1 [0 0 0 0 0] 1 2 e = random . rand ( 5 ) print ( e ) 1 [ 0.5677619 0.46086299 0.00274387 0.29916017 0.40593335] 1 2 3 4 5 6 7 8 9 10 a = zeros ( 5 ) print ( a ) b = a b [ 0 ] = 10 print ( a , b ) # b and a remain in synch c = a . copy () c [ 4 ] = 10 print ( a , c ) # c is really a new variable, independent 1 2 3 [ 0. 0. 0. 0. 0.] [ 10. 0. 0. 0. 0.] [ 10. 0. 0. 0. 0.] [ 10. 0. 0. 0. 0.] [ 10. 0. 0. 0. 10.] 1 2 3 4 5 6 # simple arithmetics a = array ([[ 2 , 3 ], [ 4 , 5 ]]) b = array ([[ 1 , 2 ], [ 3 , 0 ]]) print ( a + b ) print ( a * b ) 1 2 3 4 [[3 5] [7 5]] [[ 2 6] [12 0]] 1 2 3 4 5 6 7 8 # cross product a = array ([ 1 , 2 , 3 ]) b = array ([ 4 , 5 , 6 ]) print ( a * b ) c = cross ( a , b ) print ( c ) 1 2 [ 4 10 18] [-3 6 -3] 1 2 3 # dot product c = dot ( a , b ) print ( c ) 1 32 1 2 a = arange ( 10 ) print ( a ) 1 [0 1 2 3 4 5 6 7 8 9] 1 2 3 4 # save to file, restore or retrieve a . tofile ( 'myfile.dat' ) # a file is created in the directory b = fromfile ( 'myfile.dat' , dtype = 'int' ) print ( b ) 1 [0 1 2 3 4 5 6 7 8 9] 1 2 3 4 5 6 7 8 9 # matrix inversion a = array ([[ 4 , 1 , - 2 ], [ 2 , - 3 , 3 ], [ - 6 , - 2 , 1 ] ], dtype = 'float' ) print ( a ) ainv = linalg . inv ( a ) print ( ainv ) print ( dot ( a , ainv )) 1 2 3 4 5 6 7 8 9 [[ 4. 1. -2.] [ 2. -3. 3.] [-6. -2. 1.]] [[ 0.08333333 0.08333333 -0.08333333] [-0.55555556 -0.22222222 -0.44444444] [-0.61111111 0.05555556 -0.38888889]] [[ 1.00000000e+00 -1.38777878e-17 0.00000000e+00] [ 0.00000000e+00 1.00000000e+00 0.00000000e+00] [ 0.00000000e+00 2.08166817e-17 1.00000000e+00]]","title":"3.1, The Numpy Module"},{"location":"Python for Education/#32-vectorized-functions","text":"1 2 3 # avoid loop, generate number with a function a = array ([ 1 , 10 , 100 , 1000 ]) print ( log10 ( a )) 1 [ 0. 1. 2. 3.] 1 2 3 4 5 6 7 8 def spf ( x ): return 3 * x vspf = vectorize ( spf ) a = array ([ 1 , 2 , 3 , 4 ]) print ( a ) print ( vspf ( a )) 1 2 [1 2 3 4] [ 3 6 9 12]","title":"3.2, Vectorized Functions"},{"location":"Python for Education/#4-data-visualization","text":"","title":"4, Data visualization"},{"location":"Python for Education/#41-the-matplotlib-module","text":"Basic or common plots. 1 2 3 4 5 6 7 8 9 % pylab inline # matplolib is part of pylab as is numpy # basic plot data = [ 1 , 2 , 5 ] plot ( data ) show () 1 Populating the interactive namespace from numpy and matplotlib 1 2 3 4 5 6 7 # basic plot x = [ 1 , 2 , 5 ] y = [ 4 , 5 , 6 ] plot ( x , y ) show () 1 2 3 4 5 6 7 8 9 10 11 # basic plot x = [ 1 , 2 , 5 ] y = [ 4 , 5 , 6 ] plot ( x , y , 'ro' ) xlabel ( 'x-axis' ) ylabel ( 'y-axis' ) axis ([ 0 , 6 , 1 , 7 ]) show () 1 2 3 4 5 6 7 8 9 10 # basic plots # data are unchanged t = arange ( 0.0 , 5.0 , 0.2 ) plot ( t , t ** 2 , 'x' ) # t2 plot ( t , t ** 3 , 'ro' ) # t3 show () 1 2 3 4 5 6 7 8 9 10 # subplot # data are unchanged subplot ( 2 , 1 , 1 ) # the first subplot plot ([ 1 , 2 , 3 , 4 ]) subplot ( 2 , 1 , 2 ) # the second subplot plot ([ 4 , 2 , 3 , 1 ]) show () 1 rand ( 10 ) 1 2 array([ 0.88744591, 0.324907 , 0.90704288, 0.81398935, 0.96866761, 0.75620965, 0.31821423, 0.64119535, 0.56738357, 0.98143592]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # subplot mark = [ 'x' , 'o' , '^' , '+' , '>' ] NR = 2 # number of rows NC = 3 # number of columns pn = 1 # plot number, starting number for row in range ( NR ): for col in range ( NC ): subplot ( NR , NC , pn ) a = rand ( 10 ) * pn plot ( a , marker = mark [( pn + 1 ) % 5 ]) # plot the random numbers vs tick = (n+1)5% xlabel ( 'plot %d X' % pn ) ylabel ( 'plot %d Y' % pn ) pn = pn + 1 # move to the 2nd plot show () 1 2 3 4 5 6 7 # polar plot th = linspace ( 0 , 2 * pi , 100 ) r = 5 * ones ( 100 ) # radius = 5 polar ( th , r ) show () 1 2 3 4 5 6 7 # pie chart labels = 'Frogs' , 'Hogs' , 'Dogs' , 'Logs' fracs = [ 25 , 25 , 30 , 20 ] pie ( fracs , labels = labels ) show () A few examples of mathematical plots. Spiral of Archimedes r = a\u03b8 r = a\u03b8 1 2 3 4 5 6 7 a = 2 th = linspace ( 0 , 10 * pi , 200 ) r = a * th polar ( th , r ) axis ([ 0 , 2 * pi , 0 , 70 ]) show () Fermat\u2019s Spiral r^2 = a^2\u03b8 r^2 = a^2\u03b8 1 2 3 4 5 6 7 a = 2 th = linspace ( 0 , 10 * pi , 200 ) r = sqrt ( a ** 2 * th ) polar ( th , r ) polar ( th , - r ) show () And more\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # example 1 x = arange ( 0 , 3 , 1 ) y = arange ( 0 , 3 , 1 ) gx , gy = meshgrid ( x , y ) print ( gx ) print ( gy ) print ( '-' * 25 ) x = arange ( - 3 * pi , 3 * pi , 0.1 ) y = arange ( - 3 * pi , 3 * pi , 0.1 ) xx , yy = meshgrid ( x , y ) z = sin ( xx ) + sin ( yy ) imshow ( z ) show () 1 2 3 4 5 6 7 [[0 1 2] [0 1 2] [0 1 2]] [[0 0 0] [1 1 1] [2 2 2]] ------------------------- 1 2 3 4 5 6 7 8 9 10 11 12 # example 2 from mpl_toolkits.mplot3d import Axes3D ax = Axes3D ( figure ()) x = arange ( - 3 * pi , 3 * pi , 0.1 ) y = arange ( - 3 * pi , 3 * pi , 0.1 ) xx , yy = meshgrid ( x , y ) z = sin ( xx ) + sin ( yy ) ax . plot_surface ( xx , yy , z , cmap = cm . jet , cstride = 1 ) show () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # example 3 from mpl_toolkits.mplot3d import Axes3D ax = Axes3D ( figure ()) phi = linspace ( 0 , 2 * pi , 400 ) x = cos ( phi ) y = sin ( phi ) z = 0 ax . plot ( x , y , z , label = 'x' ) # circle z = sin ( 4 * phi ) # modulated in z plane ax . plot ( x , y , z , label = 'x' ) ax . set_xlabel ( 'X' ) ax . set_ylabel ( 'Y' ) ax . set_zlabel ( 'Z' ) show () 1 2 3 4 5 6 7 8 9 10 11 12 13 # example 4 from mpl_toolkits.mplot3d import Axes3D ax = Axes3D ( figure ()) phi = linspace ( 0 , 2 * pi , 100 ) theta = linspace ( 0 , pi , 100 ) x = 10 * outer ( cos ( phi ), sin ( theta )) y = 10 * outer ( sin ( phi ), sin ( theta )) z = 10 * outer ( ones ( size ( phi )), cos ( theta )) ax . plot_wireframe ( x , y , z , rstride = 2 , cstride = 2 ) show () Additional mathematical plots (with functions): sine, function and friends. circles. astroids. ellipses. polar rose. power series. Fourier series. fractals. meshgrids. 2D plots. 3D plots. surface plots. line plots. wire-frame plots. advanced 3D with Mayavi (render 3D shapes).","title":"4.1, The Matplotlib Module"},{"location":"Python for Education/#5-type-setting-using-latex","text":"Once a graphic or an image is generated by IPython, save it and reuse it in \\LaTeX \\LaTeX with the usepackage{graphicx} . Insert images and floating bodies.","title":"5, Type Setting Using LaTeX"},{"location":"Python for Education/#6-numerical-methods","text":"derivatives and differential calculus. integral calculus and numerical integration. optimization and linear programming. ordinary differential equations. Euler method. Runge-Kutta method. functions depending on the integrals. and more. Polynomials. Taylor\u2019s series. and other series.","title":"6, Numerical Methods"},{"location":"Python for Education/#65-finding-roots-of-an-equation","text":"A root is where a x x intersects the y y -axis. An equation has any number of roots, or no roots at all. f(x) = x^2 f(x) = x^2 has a single root whereas f(x) = sin(x) f(x) = sin(x) has an infinite number of roots. Visual inspection will reveal the roots (by plotting the function). Other ways: the incremental search method, the method of bisection, and the Newton-Raphson method. Incremental Search Method The basic idea behind the incremental search method is simple: if f(x1) f(x1) and f(x2) f(x2) have opposite signs, then there is at least one root in the interval (x1; x2) (x1; x2) . If the interval is small enough, it is likely to contain a single root. Thus, the zeroes of f(x) f(x) can be detected by evaluating the function at intervals of \\Delta x \\Delta x and looking for change in sign. There are several potential problems with the incremental search method: it is possible to miss two closely spaced roots if the search increment \\Delta x \\Delta x is larger than the spacing of the roots. Certain singularities of f(x) f(x) can be mistaken for roots. For example, f(x) = tan(x) f(x) = tan(x) changes sign at odd multiples of \\pi/2 \\pi/2 , but these locations are not true zeroes. For example, below, function root() that searches the roots of a function f(x) f(x) from x = a x = a to x = b x = b , incrementing it by dx dx . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 % pylab inline import math def func ( x ): return x ** 3 - 10.0 * x * x + 5 def root ( f , a , b , dx ): x = a while True : f1 = f ( x ) f2 = f ( x + dx ) if f1 * f2 < 0 : return x , x + dx x = x + dx if x >= b : return ( None , None ) x , y = root ( func , 0.0 , 1.0 , . 1 ) print ( x , y ) x , y = root ( math . cos , 0.0 , 4 , . 1 ) print ( x , y ) 1 2 3 Populating the interactive namespace from numpy and matplotlib 0.7 0.7999999999999999 1.5000000000000002 1.6000000000000003 The visual inspection will confirm. Let\u2019s take the first function, f(x) = x^3 - 10x^2 + 5 f(x) = x^3 - 10x^2 + 5 , and the inspected range, [0.0, 1.0] [0.0, 1.0] , to plot a graph. 1 2 3 4 5 6 7 8 9 10 11 12 13 vector = arange ( - 10 , 20 , 0.05 ) # from numpy plot ( vector , func ( vector )) xlabel ( 'x-axis' ) ylabel ( 'y-axis' ) title ( 'Find the roots' ) axis ([ 0. , 2. , - 1. , 6. ]) # vert line # axvline(x = 4.,color = 'k',ls = 'dashed') # horiz line axhline ( y = 0 , color = 'k' , ls = 'dashed' ) show () But, there is more than one root to the polynomial function, that is, f(x) = x^3 - 10x^2 + 5 f(x) = x^3 - 10x^2 + 5 . Such function should have 3 roots. Indeed, another plot reveals two roots around x=0 x=0 and another one close to x=10 x=10 . 1 2 3 4 5 6 7 8 9 10 11 12 13 vector = arange ( - 10 , 20 , 0.05 ) # from numpy plot ( vector , func ( vector )) xlabel ( 'x-axis' ) ylabel ( 'y-axis' ) title ( 'Find the roots' ) axis ([ - 2. , 12. , - 2. , 6. ]) # vert line # axvline(x = 4.,color = 'k',ls = 'dashed') # horiz line axhline ( y = 0 , color = 'k' , ls = 'dashed' ) show () Method of Bisection The method of bisection \u001cfinds the root by successively halving the interval until it becomes sufficiently small. Bisection is not the fastest method available for computing roots, but it is the most reliable. Once a root has been bracketed, bisection will always \u001cfind it. The method of bisection works in the following manner: If there is a root between x1 x1 and x2 x2 , then f(x1)*f(x2) < 0 f(x1)*f(x2) < 0 . Next, we compute f(x3) f(x3) , where x3 = (x1 + x2) = 2 x3 = (x1 + x2) = 2 . If f(x2) * f(x3) < 0 f(x2) * f(x3) < 0 , then the root must be in (x2; x3) (x2; x3) ; we replace the original bound x1 x1 by x3 x3 . Otherwise, the root lies between x1 x1 and x3 x3 ; in this case, x3 x3 replaces x2 x2 . This process is repeated until the interval is reduced to a (previously) speci\u001cfied value, say \\epsilon \\epsilon . The number of bisections required to reach the prescribed limit, \\epsilon \\epsilon , is given by equation: n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2} n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2} Let\u2019s continue with the example from above ( f(x) = x^3 - 10x^2 + 5 f(x) = x^3 - 10x^2 + 5 ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def bisect ( f , x1 , x2 , epsilon = 1.0e-9 ): f1 = f ( x1 ) f2 = f ( x2 ) if f1 * f2 > 0.0 : print ( 'x1 and x2 are on the same side of x-axis' ) return n = math . ceil ( math . log ( abs ( x2 - x1 ) / epsilon ) / math . log ( 2.0 )) n = int ( n ) for i in range ( n ): x3 = 0.5 * ( x1 + x2 ) f3 = f ( x3 ) if f3 == 0.0 : return x3 if f2 * f3 < 0.0 : x1 = x3 f1 = f3 else : x2 = x3 f2 = f3 return ( x1 + x2 ) / 2.0 print ( bisect ( func , 0.70 , 0.8 , 1.0e-4 )) # more precise than the incremental search method print ( bisect ( func , 0.70 , 0.8 , 1.0e-9 )) # even more decimals! 1 2 0.734619140625 0.7346035074442625 Newton-Raphson Method This other method is an algorithm that requires the derivative of the function to evaluate the roots. Therefore, it is usable only in problems where the derivative can be readily computed. It does not require the value at two points to start with. We start with an initial guess which is reasonably close to the true root. Then the function is approximated by its tangent line and the x-intercept of the tangent line is calculated. This value is taken as the next guess and the process is repeated. The Newton-Raphson formula is shown below. x_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)} x_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)} Let\u2019s run an example on the quadratic equation 2x^2 \u2212 3x \u22125 = 0 2x^2 \u2212 3x \u22125 = 0 and its two tangents. It can be seen that the zeros are at x = -1 x = -1 and x = 2.5 x = 2.5 . By the way, the derivative of the equation is: 4x - 3 4x - 3 Function nr() nr() is called twice, and we get the roots nearer to the corresponding starting values. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # the function def f ( x ): return 2.0 * x ** 2 - 3 * x - 5 # the derivative def df ( x ): return 4.0 * x - 3 # the algorithm def nr ( x , tol = 1.0e-9 ): for i in range ( 30 ): dx = - f ( x ) / df ( x ) #print(x) x = x + dx if abs ( dx ) < tol : return x print ( 'The roots:' ) print ( nr ( 4 )) print ( nr ( 0 )) 1 2 3 The roots: 2.5 -1.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # the function def f ( x ): return 2.0 * x ** 2 - 3 * x - 5 # the derivative def df ( x ): return 4.0 * x - 3 # the alogorithm def nr ( x , tol = 1.0e-9 ): for i in range ( 30 ): dx = - f ( x ) / df ( x ) print ( x ) x = x + dx if abs ( dx ) < tol : return x print ( 'The iterations (nr(4):' ) print ( nr ( 4 )) print ( 'The iterations (nr(0):' ) print ( nr ( 0 )) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 The iterations (nr(4): 4 2.8461538461538463 2.528581510232886 2.500229650067341 2.5000000150663526 2.5 2.5 The iterations (nr(0): 0 -1.6666666666666667 -1.0919540229885056 -1.002295264224362 -1.0000015032391993 -1.0000000000006457 -1.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # the function def f ( x ): return 2.0 * x ** 2 - 3 * x - 5 # the derivative def df ( x ): return 4.0 * x - 3 # the plot vf = vectorize ( f ) x = linspace ( - 2 , 5 , 100 ) y = vf ( x ) # tangents at x = 3 and x = 4, using one point slope formula x1 = 4 tg1 = df ( x1 ) * ( x - x1 ) + f ( x1 ) x1 = 3 tg2 = df ( x1 ) * ( x - x1 ) + f ( x1 ) grid ( True ) plot ( x , y ) plot ( x , tg1 ) plot ( x , tg2 ) ylim ([ - 20 , 40 ]) show ()","title":"6.5, Finding Roots of an Equation"},{"location":"Python for Education/#66-system-of-linear-equations","text":"A system of m m linear equations with n n unknowns can be written in a matrix form and can be solved by using several standard techniques like the Gaussian elimination. Non-homogeneous matrix equations of the form Ax = b Ax = b can be solved by matrix inversion to obtain x = A^{\u22121}b x = A^{\u22121}b . The system of equations $$ \\begin{align} \\ 4x + y - 2z &= 0 \\ 2x - 3y + 3z &= 9 \\ -6x - 2y + z &= 0 \\end{align} $$ can be represented in the matrix form as \\begin{pmatrix} 4 & 1 & -2 \\\\ 2 & -3 & 3 \\\\ -6 & -2 & 1 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 9 \\\\ 0 \\end{pmatrix} \\begin{pmatrix} 4 & 1 & -2 \\\\ 2 & -3 & 3 \\\\ -6 & -2 & 1 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 9 \\\\ 0 \\end{pmatrix} and can be solved by \u001cnding the inverse of the coe\u001ecient matrix. \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = {\\begin{pmatrix} 4 & 1 & -2 \\\\ 2 & -3 & 3 \\\\ -6 & -2 & 1 \\end{pmatrix}}^{-1} \\begin{pmatrix} 0 \\\\ 9 \\\\ 0 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = {\\begin{pmatrix} 4 & 1 & -2 \\\\ 2 & -3 & 3 \\\\ -6 & -2 & 1 \\end{pmatrix}}^{-1} \\begin{pmatrix} 0 \\\\ 9 \\\\ 0 \\end{pmatrix} Let\u2019s solve the equation. 1 2 3 4 b = array ([ 0 , 9 , 0 ]) A = array ([[ 4 , 1 , - 2 ], [ 2 , - 3 , 3 ], [ - 6 , - 2 , 1 ]]) print ( dot ( linalg . inv ( A ), b )) 1 [ 0.75 -2. 0.5 ] x = 0.75 x = 0.75 , y = \u22122 y = \u22122 , and z = 0.5 z = 0.5 .","title":"6.6, System of Linear Equations"},{"location":"Python for Education/#67-least-squares-fitting","text":"A mathematical procedure for \u001cfinding the best-\u001cfitting curve f(x) f(x) for a given set of points (x_n, y_n) (x_n, y_n) by minimizing the sum of the squares of the vertical off\u001bsets of the points from the curve is called least squares fi\u001ctting. 1 2 3 4 5 6 # the raw data is generated by adding random numbers (between -1 and 1) to the y coordinates # generated by y = 3\u2217x + 2 NP = 50 # observations r = 2 * ranf ([ NP ]) - 0.5 print ( r ) 1 2 3 4 5 6 7 8 9 [ 0.99203986 -0.36064885 -0.48805087 0.36617374 0.29567002 1.2411945 1.03900373 -0.32058291 0.45809449 0.7741206 1.11819248 1.04958093 -0.47823795 0.14105707 -0.30262528 1.07469769 -0.44660783 -0.49313542 0.50995051 -0.11336372 1.47245243 0.34474142 0.52352519 -0.17051734 1.35723902 1.09822309 1.34626113 0.81862428 1.48731849 0.32958741 0.77572583 1.47898135 1.36664053 0.69356794 0.4978461 1.17619706 -0.24303519 0.43521904 0.88177674 0.28791814 -0.22513721 0.78901677 0.15126297 1.24899092 -0.02995487 1.2136114 0.46617806 -0.29024591 0.23178231 0.50829941] 1 2 x = linspace ( 0 , 10 , NP ) print ( x ) 1 2 3 4 5 6 7 8 9 10 [ 0. 0.20408163 0.40816327 0.6122449 0.81632653 1.02040816 1.2244898 1.42857143 1.63265306 1.83673469 2.04081633 2.24489796 2.44897959 2.65306122 2.85714286 3.06122449 3.26530612 3.46938776 3.67346939 3.87755102 4.08163265 4.28571429 4.48979592 4.69387755 4.89795918 5.10204082 5.30612245 5.51020408 5.71428571 5.91836735 6.12244898 6.32653061 6.53061224 6.73469388 6.93877551 7.14285714 7.34693878 7.55102041 7.75510204 7.95918367 8.16326531 8.36734694 8.57142857 8.7755102 8.97959184 9.18367347 9.3877551 9.59183673 9.79591837 10. ] 1 2 data = 3 * x + 2 + r print ( data ) 1 2 3 4 5 6 7 8 9 10 [ 2.99203986 2.25159605 2.73643893 4.20290843 4.74464961 6.30241899 6.71247312 5.96513138 7.35605367 8.28432469 9.24064146 9.7842748 8.86870082 10.10024074 10.26880329 12.25837115 11.34931053 11.91502784 13.53035867 13.51928934 15.71735039 15.20188427 15.99291295 15.91111532 18.05111657 18.40434554 19.26462847 19.34923652 20.63017563 20.08468945 21.14307277 22.45857319 22.95847726 22.89764957 23.31417263 24.60476849 23.79778114 25.08828026 26.14708286 26.16546916 26.26465871 27.89105759 27.86554869 29.57552153 28.90882064 30.76463181 30.62944337 30.48526429 31.61953741 32.50829941] 1 2 3 xbar = mean ( x ) ybar = mean ( data ) print ( xbar , ybar ) 1 5.0 17.5215723854 1 2 3 b = sum ( data * ( x - xbar )) / sum ( x * ( x - xbar )) a = ybar - xbar * b print ( a , b ) 1 2.41774233468 3.02076601014 1 2 3 4 5 6 y = a + b * x plot ( x , y ) plot ( x , data , 'ob' ) show ()","title":"6.7, Least Squares Fitting"},{"location":"Python for Education/#68-interpolation","text":"Interpolation is the process of constructing a function f(x) f(x) from a set of data points (x_i, y_i) (x_i, y_i) , in the interval a < x < b a < x < b that will satisfy y_i = f(x_i) y_i = f(x_i) for any point in the same interval. In other words, we find an equation with several observation by reverse engineering; we stand at the doorstep of machine and statistical learning here! The easiest way is to construct a polynomial of degree n n , such as a Newton\u2019s interpolating polynomial, that passes through the n + 1 n + 1 distinct data points. Consult the document for the mathematical demonstration. Let\u2019s do an example. 1 2 3 4 5 6 7 8 9 10 11 12 13 # calculate the coefficients from copy import copy def coef ( x , y ): a = copy ( y ) # copy the list y to coefficient a m = len ( x ) for k in range ( 1 , m ): # with two loops, calculate the difference tmp = copy ( a ) for i in range ( k , m ): tmp [ i ] = ( a [ i ] - a [ i - 1 ]) / ( x [ i ] - x [ i - k ]) a = copy ( tmp ) return a 1 2 3 4 x = [ 0 , 1 , 2 , 3 ] y = [ 0 , 3 , 14 , 39 ] print ( coef ( x , y )) 1 [0, 3.0, 4.0, 1.0] 1 2 3 4 5 6 7 8 # the same can be done with a Numpy array def coef ( x , y ): a = copy ( y ) m = len ( x ) for k in range ( 1 , m ): a [ k : m ] = ( a [ k : m ] - a [ k - 1 ]) / ( x [ k : m ] - x [ k - 1 ]) return a 1 2 3 4 x = array ([ 0 , 1 , 2 , 3 ]) y = array ([ 0 , 3 , 14 , 39 ]) print ( coef ( x , y )) 1 [0 3 4 1] The next step is to calculate the value of y y for any given value of x x , using the coffe\u001ecients already calculated (above). The program generates 20 new values of x x , and calculate corresponding values of y y and plots them along with the original data points. The function eval() uses the recurrence relation. You may explore the results for new points outside the range by changing the second argument of line newx = linspace(0,3,NP) newx = linspace(0,3,NP) to a higher value. 1 2 3 4 5 6 def eval ( a , xpoints , x ): n = len ( xpoints ) - 1 p = a [ n ] for k in range ( 1 , n + 1 ): p = a [ n - k ] + ( x - xpoints [ n - k ]) * p return p 1 2 3 4 5 6 def coef ( x , y ): a = copy ( y ) m = len ( x ) for k in range ( 1 , m ): a [ k : m ] = ( a [ k : m ] - a [ k - 1 ]) / ( x [ k : m ] - x [ k - 1 ]) return a 1 2 3 x = array ([ 0 , 1 , 2 , 3 ]) y = array ([ 0 , 3 , 14 , 39 ]) coef = coef ( x , y ) 1 2 3 NP = 20 newx = linspace ( 0 , 3 , NP ) # New x-values newy = zeros ( NP ) 1 2 for i in range ( NP ): # evaluate y-values newy [ i ] = eval ( coef , x , newx [ i ]) 1 2 3 4 plot ( newx , newy , '-x' ) plot ( x , y , 'ro' ) show ()","title":"6.8, Interpolation"},{"location":"Python+And+Excel/","text":"Foreword Code snippets and excerpts from the tutorial. Python 3. From DataCamp. The Data as the Starting Point \u00b6 Work with packages such as pandas, openpyxl, xlrd, xlutils, pyexcel . Datasets from Kaggle, Quandl, Google or on repositories (GitHub, Bitbucket, GitLab, etc.). Check the Quality of the Spreadsheet \u00b6 Does the spreadsheet represent static data? Does the spreadsheet mix data, calculations, and reporting? Is the data in the spreadsheet complete and consistent? Does the spreadsheet have a systematic worksheet structure? Are the live formulas in the spreadsheet valid? Best Practices for Spreadsheet Data \u00b6 The first row of the spreadsheet is usually reserved for the header, while the first column is used to identify the sampling unit; Avoid names, values or fields with blank spaces. Otherwise, each word will be interpreted as a separate variable, resulting in errors that are related to the number of elements per line in the dataset. Consider using: Underscores, Dashes, Camel case, where the first letter of each section of text is capitalized, or Concatenating words Short names are preferred over longer names; Try to avoid using names that contain symbols such as ?, %, ^, &, *, (, ), -, #, ?, <, >, /, |, \\, [ ,] , {, } and , and dollar sign; Delete any comments that were made in the file to avoid extra columns or NA\u2019s to be added to the file; and Make sure that any missing values in the dataset are indicated with NA. Save in .xls , .xlsx , .csv , .txt . Preparing the Workspace \u00b6 1 2 3 4 5 # Import `os` import os # Retrieve current working directory (`cwd`) cwd = os . getcwd () Print it with cwd or print(cwd) . 1 2 3 4 5 # Change directory os . chdir ( \"/path/to/your/folder\" ) # List all files and directories in current directory os . listdir ( '.' ) Using Virtual Environments \u00b6 In a Python virtualenv: we can multiple projects running at the same time and we don\u2019t want them to share the same Python installation or when projects have conflicting requirements. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Install virtualenv $ pip install virtualenv # Go to the folder of the project $ cd my_folder # Create a virtual environment `venv` $ virtualenv venv # Indicate the Python interpreter to use for `venv` $ virtualenv -p /usr/bin/python2.7 venv # Activate `venv` $ source venv/bin/activate # Deactivate `venv` $ deactivate Check the Loaded Dataset \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Check the first entries of the DataFrame df1 . head () # Check the last entries of the DataFrame df1 . tail () # Inspect the shape data . shape # Inspect the number of dimensions data . ndim # Inspect the data type data . dtype Install Packages to Read and Write Excel Files \u00b6 pandas, openpyxl, xlrd, xlutils, pyexcel \u2026 pip install . conda install (Anaconda includes 100 of the most popular Python , R and Scala packages for data science and several open source development environments such as Jupyter and Spyder). Packages to Parse Excel Files and Write them back with Python \u00b6 From the site : openpyxl , the recommended package for reading and writing Excel 2010 files (ie: .xlsx). Documentation . xlsxwriter , an alternative package for writing data, formatting information and, in particular, charts in the Excel 2010 format (ie: .xlsx). Documentation . xlrd , this package is for reading data and formatting information from older Excel files (ie: .xls). Documentation . xlwt , this package is for writing data and formatting information to older Excel files (ie: .xls). Documentation . xlutils , this package collects utilities that require both xlrd and xlwt, including the ability to copy and modify or filter existing excel files. Documentation . Load Excel & CSV Files as Pandas DataFrames \u00b6 Excel \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import pandas import pandas as pd # Assign spreadsheet filename to `file` file = 'example.xlsx' # Load spreadsheet xl = pd . ExcelFile ( file ) # Print the sheet names print ( xl . sheet_names ) # Load a sheet into a DataFrame by name: df1 df1 = xl . parse ( 'Sheet1' ) CSV \u00b6 1 2 3 4 5 # Import pandas import pandas as pd # Load csv df = pd . read_csv ( \"example.csv\" ) More options . Flat files, tables \u00b6 Also: read_table() and read_fwf() . More options . Write Pandas DataFrames to Excel and CSV Files \u00b6 Excel \u00b6 1 2 3 4 5 6 7 8 # Specify a writer writer = pd . ExcelWriter ( 'example.xlsx' , engine = 'xlsxwriter' ) # Write the DataFrame to a file yourData . to_excel ( writer , 'Sheet1' ) # Save the result writer . save () Pass the writer variable to the to_excel() function and specify the sheet name. Add a sheet with the data to an existing workbook: ExcelWriter save multiple, (slightly) different DataFrames to one workbook. 1 2 3 4 5 6 7 8 # Specify a writer writer = pd . ExcelWriter ( 'example.xlsx' ) # Write the DataFrame to a file yourData . to_excel ( writer , 'Sheet1' ) # Save the result writer . save () Save one DataFrame to a file, don\u2019t specify the engine argument in the pd.ExcelWriter() function. The rest of the steps stay the same. CSV, flat files, tables \u00b6 1 2 # Write the DataFrame to csv df . to_csv ( \"example.csv\" ) Tab-separated file, pass the sep = '\\t' argument. Read and Write Excel Files with openyxl \u00b6 Read and write .xlsx, xlsm, xltx, xltm files. The general advice for installing this package is to do it in a Python virtual environment without system packages. We can use virtual environment to create isolated Python environments: it creates a folder which contains all the necessary executables to use the packages that a Python project would need. Go to the directory in which the project is located and re-activate the virtual environment venv . Then proceed to install openpyxl with pip to make sure that we can read and write files with it: 1 2 3 4 5 # Activate virtualenv $ source activate venv # Install `openpyxl` in `venv` $ pip install openpyxl Install openpyxl and start loading in the data. Make sure that we\u2019re in the right directory where the spreadsheet is located (change the working directory with os.chdir() ). 1 2 3 4 5 6 7 8 9 # Import `load_workbook` module from `openpyxl` from openpyxl import load_workbook # Load in the workbook wb = load_workbook ( './test.xlsx' ) type ( wb ) # Get sheet names print ( wb . get_sheet_names ()) Which sheet is currently active. 1 2 3 4 5 6 7 8 9 10 11 # Get a sheet by name sheet = wb . get_sheet_by_name ( 'Sheet3' ) # Print the sheet title sheet . title # Get currently active sheet anotherSheet = wb . active # Check `anotherSheet` anotherSheet Retrieve information in the workbook\u2019s sheet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # Retrieve the value of a certain cell sheet [ 'A1' ] . value # Select element 'B2' of the sheet c = sheet [ 'B2' ] # Retrieve the row number of the element c . row # Retrieve the column letter of the element c . column # Retrieve the coordinates of the cell c . coordinate # Retrieve cell value sheet . cell ( row = 1 , column = 2 ) . value # Print out values in column 2 for i in range ( 1 , 4 ): print ( i , sheet . cell ( row = i , column = 2 ) . value ) # Import relevant modules from `openpyxl.utils` from openpyxl.utils import get_column_letter , column_index_from_string # Return 'A' get_column_letter ( 1 ) # Return '1' column_index_from_string ( 'A' ) Print the coordinate and the value that is contained within that cell. 1 2 3 4 5 # Print row per row for cellObj in sheet [ 'A1' : 'C3' ]: for cell in cellObj : print ( cells . coordinate , cells . value ) print ( '--- END ---' ) 1 2 3 4 5 6 7 8 9 10 11 12 ( 'A1' , u 'M' ) ( 'B1' , u 'N' ) ( 'C1' , u 'O' ) --- END --- ( 'A2' , 10L ) ( 'B2' , 11L ) ( 'C2' , 12L ) --- END --- ( 'A3' , 14L ) ( 'B3' , 15L ) ( 'C3' , 16L ) --- END --- Check up on the result of import. 1 2 3 4 5 # Retrieve the maximum amount of rows sheet . max_row # Retrieve the maximum amount of columns sheet . max_column Pandas DataFrames. 1 2 3 4 5 # Import `pandas` import pandas as pd # Convert Sheet to DataFrame df = pd . DataFrame ( sheet . values ) Specify headers and indices. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Put the sheet values in `data` data = sheet . values # Indicate the columns in the sheet values cols = next ( data )[ 1 :] # Convert the data to a list data = list ( data ) # Read in the data at index 0 for the indices idx = [ r [ 0 ] for r in data ] # Slice the data at index 1 data = ( islice ( r , 1 , None ) for r in data ) # Make the DataFrame df = pd . DataFrame ( data , index = idx , columns = cols ) Write the Pandas DataFrames back to an Excel file. 1 2 3 4 5 6 7 8 9 10 11 12 # Import `dataframe_to_rows` from openpyxl.utils.dataframe import dataframe_to_rows # Initialize a workbook wb = Workbook () # Get the worksheet in the active workbook ws = wb . active # Append the rows of the DataFrame to the worksheet for r in dataframe_to_rows ( df , index = True , header = True ): ws . append ( r ) More options: change cell styles or use the write-only mode. Read and Format Excel Files with xlrd \u00b6 .xls or .xlsx extensions. 1 2 3 4 5 6 7 8 # Import `xlrd` import xlrd # Open a workbook workbook = xlrd . open_workbook ( 'example.xls' ) # Loads only current sheets to memory workbook = xlrd . open_workbook ( 'example.xls' , on_demand = True ) Retrieve the sheets, then cells. 1 2 3 4 5 6 7 8 # Load a specific sheet by name worksheet = workbook . sheet_by_name ( 'Sheet1' ) # Load a specific sheet by index worksheet = workbook . sheet_by_index ( 0 ) # Retrieve the value from cell at indices (0,0) sheet . cell ( 0 , 0 ) . value Write to Excel Files with xlwt \u00b6 .xls extension 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import `xlwt` import xlwt # Initialize a workbook book = xlwt . Workbook ( encoding = \"utf-8\" ) # Add a sheet to the workbook sheet1 = book . add_sheet ( \"Python Sheet 1\" ) # Write to the sheet of the workbook sheet1 . write ( 0 , 0 , \"This is the First Cell of the First Sheet\" ) # Save the workbook book . save ( \"spreadsheet.xls\" ) Loop: every element in the range from 0 to 4 (5 not included). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Initialize a workbook book = xlwt . Workbook () # Add a sheet to the workbook sheet1 = book . add_sheet ( \"Sheet1\" ) # The data cols = [ \"A\" , \"B\" , \"C\" , \"D\" , \"E\" ] txt = [ 0 , 1 , 2 , 3 , 4 ] # Loop over the rows and columns and fill in the values for num in range ( 5 ): row = sheet1 . row ( num ) for index , col in enumerate ( cols ): value = txt [ index ] + num row . write ( index , value ) # Save the result book . save ( \"test.xls\" ) A Collection of Utilities: xlutils \u00b6 Collection of utilities that require both xlrd and xlwt , which includes the ability to copy and modify or filter existing files. Generally speaking, these use cases are now covered by openpyxl . Read with pyexcel \u00b6 Python Wrapper that provides one API for reading, manipulating and writing data in .csv, .ods, .xls, .xlsx and .xlsm. Documentation . In an array. 1 2 3 4 5 # Import `pyexcel` import pyexcel # Get an array from the data my_array = pyexcel . get_array ( file_name = \"test.xls\" ) In an ordered dictionary of lists; even obtain all the workbook sheets in a single dictionary. 1 2 3 4 5 6 7 8 # Import `OrderedDict` module from pyexcel._compact import OrderedDict # Get the data in an ordered dictionary of lists my_dict = pyexcel . get_dict ( file_name = \"test.xls\" , name_columns_by_row = 0 ) # Get the data in a dictionary of 2D arrays book_dict = pyexcel . get_book_dict ( file_name = \"test.xls\" ) The arrays and dictionaries of the spreadsheet, allow creating DataFrames of the data with pd.DataFrame() . Just retrieve the records. 1 2 # Retrieve the records of the file records = pyexcel . get_records ( file_name = \"test.xls\" ) Write with pyexcel \u00b6 Arrays. 1 2 3 4 5 # Get the data data = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]] # Save the array to a file pyexcel . save_as ( array = data , dest_file_name = \"array_data.xls\" ) dest_delimiter = \";\" Dictionary. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # The data 2 d_array_dictionary = { 'Sheet 1' : [ [ 'ID' , 'AGE' , 'SCORE' ] [ 1 , 22 , 5 ], [ 2 , 15 , 6 ], [ 3 , 28 , 9 ] ], 'Sheet 2' : [ [ 'X' , 'Y' , 'Z' ], [ 1 , 2 , 3 ], [ 4 , 5 , 6 ] [ 7 , 8 , 9 ] ], 'Sheet 3' : [ [ 'M' , 'N' , 'O' , 'P' ], [ 10 , 11 , 12 , 13 ], [ 14 , 15 , 16 , 17 ] [ 18 , 19 , 20 , 21 ] ]} # Save the data to a file pyexcel . save_book_as ( bookdict = 2 d_array_dictionary , dest_file_name = \"2d_array_data.xls\" ) The order of the data in the dictionary will not be kept. Read and Write .csv Files \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 # import `csv` import csv # Read in csv file for row in csv . reader ( open ( 'data.csv' ), delimiter = ',' ): print ( row ) # Write csv file data = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]] outfile = open ( 'data.csv' , 'w' ) writer = csv . writer ( outfile , delimiter = ';' , quotechar = '\"' ) writer . writerows ( data ) outfile . close () Numpy \u00b6 genfromtxt() allows to load in the data that is contained within .csv files into arrays which we can then put in DataFrames.","title":"Python and Excel"},{"location":"Python+And+Excel/#check-the-quality-of-the-spreadsheet","text":"Does the spreadsheet represent static data? Does the spreadsheet mix data, calculations, and reporting? Is the data in the spreadsheet complete and consistent? Does the spreadsheet have a systematic worksheet structure? Are the live formulas in the spreadsheet valid?","title":"Check the Quality of the Spreadsheet"},{"location":"Python+And+Excel/#best-practices-for-spreadsheet-data","text":"The first row of the spreadsheet is usually reserved for the header, while the first column is used to identify the sampling unit; Avoid names, values or fields with blank spaces. Otherwise, each word will be interpreted as a separate variable, resulting in errors that are related to the number of elements per line in the dataset. Consider using: Underscores, Dashes, Camel case, where the first letter of each section of text is capitalized, or Concatenating words Short names are preferred over longer names; Try to avoid using names that contain symbols such as ?, %, ^, &, *, (, ), -, #, ?, <, >, /, |, \\, [ ,] , {, } and , and dollar sign; Delete any comments that were made in the file to avoid extra columns or NA\u2019s to be added to the file; and Make sure that any missing values in the dataset are indicated with NA. Save in .xls , .xlsx , .csv , .txt .","title":"Best Practices for Spreadsheet Data"},{"location":"Python+And+Excel/#preparing-the-workspace","text":"1 2 3 4 5 # Import `os` import os # Retrieve current working directory (`cwd`) cwd = os . getcwd () Print it with cwd or print(cwd) . 1 2 3 4 5 # Change directory os . chdir ( \"/path/to/your/folder\" ) # List all files and directories in current directory os . listdir ( '.' )","title":"Preparing the Workspace"},{"location":"Python+And+Excel/#using-virtual-environments","text":"In a Python virtualenv: we can multiple projects running at the same time and we don\u2019t want them to share the same Python installation or when projects have conflicting requirements. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Install virtualenv $ pip install virtualenv # Go to the folder of the project $ cd my_folder # Create a virtual environment `venv` $ virtualenv venv # Indicate the Python interpreter to use for `venv` $ virtualenv -p /usr/bin/python2.7 venv # Activate `venv` $ source venv/bin/activate # Deactivate `venv` $ deactivate","title":"Using Virtual Environments"},{"location":"Python+And+Excel/#check-the-loaded-dataset","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Check the first entries of the DataFrame df1 . head () # Check the last entries of the DataFrame df1 . tail () # Inspect the shape data . shape # Inspect the number of dimensions data . ndim # Inspect the data type data . dtype","title":"Check the Loaded Dataset"},{"location":"Python+And+Excel/#install-packages-to-read-and-write-excel-files","text":"pandas, openpyxl, xlrd, xlutils, pyexcel \u2026 pip install . conda install (Anaconda includes 100 of the most popular Python , R and Scala packages for data science and several open source development environments such as Jupyter and Spyder).","title":"Install Packages to Read and Write Excel Files"},{"location":"Python+And+Excel/#packages-to-parse-excel-files-and-write-them-back-with-python","text":"From the site : openpyxl , the recommended package for reading and writing Excel 2010 files (ie: .xlsx). Documentation . xlsxwriter , an alternative package for writing data, formatting information and, in particular, charts in the Excel 2010 format (ie: .xlsx). Documentation . xlrd , this package is for reading data and formatting information from older Excel files (ie: .xls). Documentation . xlwt , this package is for writing data and formatting information to older Excel files (ie: .xls). Documentation . xlutils , this package collects utilities that require both xlrd and xlwt, including the ability to copy and modify or filter existing excel files. Documentation .","title":"Packages to Parse Excel Files and Write them back with Python"},{"location":"Python+And+Excel/#load-excel-csv-files-as-pandas-dataframes","text":"","title":"Load Excel &amp; CSV Files as Pandas DataFrames"},{"location":"Python+And+Excel/#excel","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import pandas import pandas as pd # Assign spreadsheet filename to `file` file = 'example.xlsx' # Load spreadsheet xl = pd . ExcelFile ( file ) # Print the sheet names print ( xl . sheet_names ) # Load a sheet into a DataFrame by name: df1 df1 = xl . parse ( 'Sheet1' )","title":"Excel"},{"location":"Python+And+Excel/#csv","text":"1 2 3 4 5 # Import pandas import pandas as pd # Load csv df = pd . read_csv ( \"example.csv\" ) More options .","title":"CSV"},{"location":"Python+And+Excel/#flat-files-tables","text":"Also: read_table() and read_fwf() . More options .","title":"Flat files, tables"},{"location":"Python+And+Excel/#write-pandas-dataframes-to-excel-and-csv-files","text":"","title":"Write Pandas DataFrames to Excel and CSV Files"},{"location":"Python+And+Excel/#excel_1","text":"1 2 3 4 5 6 7 8 # Specify a writer writer = pd . ExcelWriter ( 'example.xlsx' , engine = 'xlsxwriter' ) # Write the DataFrame to a file yourData . to_excel ( writer , 'Sheet1' ) # Save the result writer . save () Pass the writer variable to the to_excel() function and specify the sheet name. Add a sheet with the data to an existing workbook: ExcelWriter save multiple, (slightly) different DataFrames to one workbook. 1 2 3 4 5 6 7 8 # Specify a writer writer = pd . ExcelWriter ( 'example.xlsx' ) # Write the DataFrame to a file yourData . to_excel ( writer , 'Sheet1' ) # Save the result writer . save () Save one DataFrame to a file, don\u2019t specify the engine argument in the pd.ExcelWriter() function. The rest of the steps stay the same.","title":"Excel"},{"location":"Python+And+Excel/#csv-flat-files-tables","text":"1 2 # Write the DataFrame to csv df . to_csv ( \"example.csv\" ) Tab-separated file, pass the sep = '\\t' argument.","title":"CSV, flat files, tables"},{"location":"Python+And+Excel/#read-and-write-excel-files-with-openyxl","text":"Read and write .xlsx, xlsm, xltx, xltm files. The general advice for installing this package is to do it in a Python virtual environment without system packages. We can use virtual environment to create isolated Python environments: it creates a folder which contains all the necessary executables to use the packages that a Python project would need. Go to the directory in which the project is located and re-activate the virtual environment venv . Then proceed to install openpyxl with pip to make sure that we can read and write files with it: 1 2 3 4 5 # Activate virtualenv $ source activate venv # Install `openpyxl` in `venv` $ pip install openpyxl Install openpyxl and start loading in the data. Make sure that we\u2019re in the right directory where the spreadsheet is located (change the working directory with os.chdir() ). 1 2 3 4 5 6 7 8 9 # Import `load_workbook` module from `openpyxl` from openpyxl import load_workbook # Load in the workbook wb = load_workbook ( './test.xlsx' ) type ( wb ) # Get sheet names print ( wb . get_sheet_names ()) Which sheet is currently active. 1 2 3 4 5 6 7 8 9 10 11 # Get a sheet by name sheet = wb . get_sheet_by_name ( 'Sheet3' ) # Print the sheet title sheet . title # Get currently active sheet anotherSheet = wb . active # Check `anotherSheet` anotherSheet Retrieve information in the workbook\u2019s sheet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # Retrieve the value of a certain cell sheet [ 'A1' ] . value # Select element 'B2' of the sheet c = sheet [ 'B2' ] # Retrieve the row number of the element c . row # Retrieve the column letter of the element c . column # Retrieve the coordinates of the cell c . coordinate # Retrieve cell value sheet . cell ( row = 1 , column = 2 ) . value # Print out values in column 2 for i in range ( 1 , 4 ): print ( i , sheet . cell ( row = i , column = 2 ) . value ) # Import relevant modules from `openpyxl.utils` from openpyxl.utils import get_column_letter , column_index_from_string # Return 'A' get_column_letter ( 1 ) # Return '1' column_index_from_string ( 'A' ) Print the coordinate and the value that is contained within that cell. 1 2 3 4 5 # Print row per row for cellObj in sheet [ 'A1' : 'C3' ]: for cell in cellObj : print ( cells . coordinate , cells . value ) print ( '--- END ---' ) 1 2 3 4 5 6 7 8 9 10 11 12 ( 'A1' , u 'M' ) ( 'B1' , u 'N' ) ( 'C1' , u 'O' ) --- END --- ( 'A2' , 10L ) ( 'B2' , 11L ) ( 'C2' , 12L ) --- END --- ( 'A3' , 14L ) ( 'B3' , 15L ) ( 'C3' , 16L ) --- END --- Check up on the result of import. 1 2 3 4 5 # Retrieve the maximum amount of rows sheet . max_row # Retrieve the maximum amount of columns sheet . max_column Pandas DataFrames. 1 2 3 4 5 # Import `pandas` import pandas as pd # Convert Sheet to DataFrame df = pd . DataFrame ( sheet . values ) Specify headers and indices. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Put the sheet values in `data` data = sheet . values # Indicate the columns in the sheet values cols = next ( data )[ 1 :] # Convert the data to a list data = list ( data ) # Read in the data at index 0 for the indices idx = [ r [ 0 ] for r in data ] # Slice the data at index 1 data = ( islice ( r , 1 , None ) for r in data ) # Make the DataFrame df = pd . DataFrame ( data , index = idx , columns = cols ) Write the Pandas DataFrames back to an Excel file. 1 2 3 4 5 6 7 8 9 10 11 12 # Import `dataframe_to_rows` from openpyxl.utils.dataframe import dataframe_to_rows # Initialize a workbook wb = Workbook () # Get the worksheet in the active workbook ws = wb . active # Append the rows of the DataFrame to the worksheet for r in dataframe_to_rows ( df , index = True , header = True ): ws . append ( r ) More options: change cell styles or use the write-only mode.","title":"Read and Write Excel Files with openyxl"},{"location":"Python+And+Excel/#read-and-format-excel-files-with-xlrd","text":".xls or .xlsx extensions. 1 2 3 4 5 6 7 8 # Import `xlrd` import xlrd # Open a workbook workbook = xlrd . open_workbook ( 'example.xls' ) # Loads only current sheets to memory workbook = xlrd . open_workbook ( 'example.xls' , on_demand = True ) Retrieve the sheets, then cells. 1 2 3 4 5 6 7 8 # Load a specific sheet by name worksheet = workbook . sheet_by_name ( 'Sheet1' ) # Load a specific sheet by index worksheet = workbook . sheet_by_index ( 0 ) # Retrieve the value from cell at indices (0,0) sheet . cell ( 0 , 0 ) . value","title":"Read and Format Excel Files with xlrd"},{"location":"Python+And+Excel/#write-to-excel-files-with-xlwt","text":".xls extension 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import `xlwt` import xlwt # Initialize a workbook book = xlwt . Workbook ( encoding = \"utf-8\" ) # Add a sheet to the workbook sheet1 = book . add_sheet ( \"Python Sheet 1\" ) # Write to the sheet of the workbook sheet1 . write ( 0 , 0 , \"This is the First Cell of the First Sheet\" ) # Save the workbook book . save ( \"spreadsheet.xls\" ) Loop: every element in the range from 0 to 4 (5 not included). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Initialize a workbook book = xlwt . Workbook () # Add a sheet to the workbook sheet1 = book . add_sheet ( \"Sheet1\" ) # The data cols = [ \"A\" , \"B\" , \"C\" , \"D\" , \"E\" ] txt = [ 0 , 1 , 2 , 3 , 4 ] # Loop over the rows and columns and fill in the values for num in range ( 5 ): row = sheet1 . row ( num ) for index , col in enumerate ( cols ): value = txt [ index ] + num row . write ( index , value ) # Save the result book . save ( \"test.xls\" )","title":"Write to Excel Files with xlwt"},{"location":"Python+And+Excel/#a-collection-of-utilities-xlutils","text":"Collection of utilities that require both xlrd and xlwt , which includes the ability to copy and modify or filter existing files. Generally speaking, these use cases are now covered by openpyxl .","title":"A Collection of Utilities: xlutils"},{"location":"Python+And+Excel/#read-with-pyexcel","text":"Python Wrapper that provides one API for reading, manipulating and writing data in .csv, .ods, .xls, .xlsx and .xlsm. Documentation . In an array. 1 2 3 4 5 # Import `pyexcel` import pyexcel # Get an array from the data my_array = pyexcel . get_array ( file_name = \"test.xls\" ) In an ordered dictionary of lists; even obtain all the workbook sheets in a single dictionary. 1 2 3 4 5 6 7 8 # Import `OrderedDict` module from pyexcel._compact import OrderedDict # Get the data in an ordered dictionary of lists my_dict = pyexcel . get_dict ( file_name = \"test.xls\" , name_columns_by_row = 0 ) # Get the data in a dictionary of 2D arrays book_dict = pyexcel . get_book_dict ( file_name = \"test.xls\" ) The arrays and dictionaries of the spreadsheet, allow creating DataFrames of the data with pd.DataFrame() . Just retrieve the records. 1 2 # Retrieve the records of the file records = pyexcel . get_records ( file_name = \"test.xls\" )","title":"Read with pyexcel"},{"location":"Python+And+Excel/#write-with-pyexcel","text":"Arrays. 1 2 3 4 5 # Get the data data = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]] # Save the array to a file pyexcel . save_as ( array = data , dest_file_name = \"array_data.xls\" ) dest_delimiter = \";\" Dictionary. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # The data 2 d_array_dictionary = { 'Sheet 1' : [ [ 'ID' , 'AGE' , 'SCORE' ] [ 1 , 22 , 5 ], [ 2 , 15 , 6 ], [ 3 , 28 , 9 ] ], 'Sheet 2' : [ [ 'X' , 'Y' , 'Z' ], [ 1 , 2 , 3 ], [ 4 , 5 , 6 ] [ 7 , 8 , 9 ] ], 'Sheet 3' : [ [ 'M' , 'N' , 'O' , 'P' ], [ 10 , 11 , 12 , 13 ], [ 14 , 15 , 16 , 17 ] [ 18 , 19 , 20 , 21 ] ]} # Save the data to a file pyexcel . save_book_as ( bookdict = 2 d_array_dictionary , dest_file_name = \"2d_array_data.xls\" ) The order of the data in the dictionary will not be kept.","title":"Write with pyexcel"},{"location":"Python+And+Excel/#read-and-write-csv-files","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 # import `csv` import csv # Read in csv file for row in csv . reader ( open ( 'data.csv' ), delimiter = ',' ): print ( row ) # Write csv file data = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]] outfile = open ( 'data.csv' , 'w' ) writer = csv . writer ( outfile , delimiter = ';' , quotechar = '\"' ) writer . writerows ( data ) outfile . close ()","title":"Read and Write .csv Files"},{"location":"Python+And+Excel/#numpy","text":"genfromtxt() allows to load in the data that is contained within .csv files into arrays which we can then put in DataFrames.","title":"Numpy"},{"location":"Python_Nice_to_Have/","text":"Foreword Notes. Python 2. Consult the Hitchicker\u2019s Guide to Python . mistune Converts Documents \u00b6 convert, conversion, document, file The mistune module is a markdown parser that turns markdown file into HTML. Run this script to see the html result in the terminal. For more on converting documents, check Pandoc. Install mistune with pip. 1 2 3 4 5 6 7 import mistune text_block = 'The `mistune` module converts .md to .html.' html_block = mistune . markdown ( text_block ) # convert to html print html_block Or run this command to produce a .html document: 1 python mistune_pgm.py > mistune_html.html logging Collects Data \u00b6 Logging is a library recording what users pass in the code. It creates log files (text documents); it collects data. First, it is a good tool for gathering data. Second, it could also be a good tool for debugging; we can monitor what is inputed in the variables. We have a starting script. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def get_location ( monster , door , player ): \"\"\"Takes 3 arguments; string type. Asks to enter 3 inputs. Uses the 3 inputs in a sentence to print a sentence. \"\"\" print \"The %s behind the %s door was slayed by %s .\" % ( monster , door , player ) monsterr = raw_input ( \"Enter a monster type: \" ) doorr = raw_input ( \"Enter a door color: \" ) playerr = raw_input ( \"Enter the player's name: \" ) get_location ( monsterr , doorr , playerr ) We run the script, the console displays 3 input messages, we input strings (Blob, blue, Al), and the script prints the results. 1 The Blob behind the blue door was slayed by Al . Now, we add the logging library. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import logging logging . basicConfig ( filename = 'game.log' , level = logging . DEBUG ) # invisible to the user def get_location ( monster , door , player ): \"\"\" Takes 3 arguments; string type. Asks to enter 3 inputs. Uses the 3 inputs in a sentence to print a sentence. \"\"\" print \"The %s behind the %s door was slayed by %s \" % ( monster , door , player ) monsterr = raw_input ( \"Enter a monster type: \" ) doorr = raw_input ( \"Enter a door color: \" ) playerr = raw_input ( \"Enter the player's name: \" ) get_location ( monsterr , doorr , playerr ) logging . info ( 'monsterr: {}; doorr: {}; playerr {}' . format ( monsterr , doorr , playerr )) # invisible to the user The user does not see the difference. But anytime someone runs the script, inputs are save to a log file: game.log.txt. We open the file. 1 2 INFO:root:monsterr: Blob; doorr: blue; playerr Al INFO:root:monsterr: Puik; doorr: red; playerr Felicia In the logging.basicConfig function, we select level=logging.DEBUG . There are 6 log levels (higher to lower): CRITICAL , ERROR , WARNING , INFO , DEBUG , NOTSET . INFO , DEBUG are information about the running of an app. WARNING is for keeping track of questionable or exceptional things happening. ERROR , CRITICAL are for when things go wrong. PIL Manipulates Images \u00b6 The PIL package stands for \u2018Python Image library\u2019 or Pillow. Pillow adds image processing capabilities. The library supports many file formats and provides powerful image processing and graphics capabilities. Given these images: ballons.jpg ribbons.jpg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import PIL ballons = Image . open ( 'ballons.jpg' ) ribbons = Image . open ( 'ribbons.jpg' ) # pixels; left, top, right, bottom (clockwise) box = ( 22 , 324 , 826 , 846 ) ballons . crop ( box ) . show () ballons . rotate ( 90 ) . show () ballons . rotate ( 45 ) . show () # won't work ballons . rotate ( 45 , expand = True ) . show () # instead ballons . rotate ( 90 ) . save ( 'balloon2,jpg' ) # to the same directory ballons . rotate ( 90 ) . save ( 'path/balloon2,jpg' ) # to another directory","title":"Python Nice to Have"},{"location":"Python_Nice_to_Have/#logging-collects-data","text":"Logging is a library recording what users pass in the code. It creates log files (text documents); it collects data. First, it is a good tool for gathering data. Second, it could also be a good tool for debugging; we can monitor what is inputed in the variables. We have a starting script. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def get_location ( monster , door , player ): \"\"\"Takes 3 arguments; string type. Asks to enter 3 inputs. Uses the 3 inputs in a sentence to print a sentence. \"\"\" print \"The %s behind the %s door was slayed by %s .\" % ( monster , door , player ) monsterr = raw_input ( \"Enter a monster type: \" ) doorr = raw_input ( \"Enter a door color: \" ) playerr = raw_input ( \"Enter the player's name: \" ) get_location ( monsterr , doorr , playerr ) We run the script, the console displays 3 input messages, we input strings (Blob, blue, Al), and the script prints the results. 1 The Blob behind the blue door was slayed by Al . Now, we add the logging library. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import logging logging . basicConfig ( filename = 'game.log' , level = logging . DEBUG ) # invisible to the user def get_location ( monster , door , player ): \"\"\" Takes 3 arguments; string type. Asks to enter 3 inputs. Uses the 3 inputs in a sentence to print a sentence. \"\"\" print \"The %s behind the %s door was slayed by %s \" % ( monster , door , player ) monsterr = raw_input ( \"Enter a monster type: \" ) doorr = raw_input ( \"Enter a door color: \" ) playerr = raw_input ( \"Enter the player's name: \" ) get_location ( monsterr , doorr , playerr ) logging . info ( 'monsterr: {}; doorr: {}; playerr {}' . format ( monsterr , doorr , playerr )) # invisible to the user The user does not see the difference. But anytime someone runs the script, inputs are save to a log file: game.log.txt. We open the file. 1 2 INFO:root:monsterr: Blob; doorr: blue; playerr Al INFO:root:monsterr: Puik; doorr: red; playerr Felicia In the logging.basicConfig function, we select level=logging.DEBUG . There are 6 log levels (higher to lower): CRITICAL , ERROR , WARNING , INFO , DEBUG , NOTSET . INFO , DEBUG are information about the running of an app. WARNING is for keeping track of questionable or exceptional things happening. ERROR , CRITICAL are for when things go wrong.","title":"logging Collects Data"},{"location":"Python_Nice_to_Have/#pil-manipulates-images","text":"The PIL package stands for \u2018Python Image library\u2019 or Pillow. Pillow adds image processing capabilities. The library supports many file formats and provides powerful image processing and graphics capabilities. Given these images: ballons.jpg ribbons.jpg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import PIL ballons = Image . open ( 'ballons.jpg' ) ribbons = Image . open ( 'ribbons.jpg' ) # pixels; left, top, right, bottom (clockwise) box = ( 22 , 324 , 826 , 846 ) ballons . crop ( box ) . show () ballons . rotate ( 90 ) . show () ballons . rotate ( 45 ) . show () # won't work ballons . rotate ( 45 , expand = True ) . show () # instead ballons . rotate ( 90 ) . save ( 'balloon2,jpg' ) # to the same directory ballons . rotate ( 90 ) . save ( 'path/balloon2,jpg' ) # to another directory","title":"PIL Manipulates Images"},{"location":"Python_Preliminaries/","text":"Foreword Notes. Consult the Hitchicker\u2019s Guide to Python . Installing (Complementary Details) \u00b6 Python Installing Python, basic libraries, and virtual environments. http://docs.python-guide.org/en/latest/starting/install/win/#install-windows http://docs.python-guide.org/en/latest/starting/install/linux/ Setting the path in Windows (examples): set PATH=%PATH%;C:\\Python27 . set PATH=%PATH%;C:\\Python27\\Scripts . set PATH=%PATH%;C:\\PythonXX . set PATH=%PATH%;C:\\PythonXX\\Scripts . Setting the path in Linux (example): export PYTHONPATH=/home/...:$PYTHONPATH . Pip \u00b6 pypi PyPI directory of libraries. Important commands: pip help or pip --help . pip install <module> or sudo pip install <module> . pip install --user <module> : circumvent the sudo command. pip --version . pip install --upgrade pip pip uninstall <module> or sudo pip uninstall <module> . pip purge <module> or sudo pip purge <module> . \u2026 Git \u00b6 After installing Git, to execute Python module in the Git Bash, (re)set the path in the Git Bash (example): export PATH=\"$PATH:/c/Python27\" , export PATH=\"$PATH:/c/Python27/Scripts\" or whatever Python version. Virtual Environment \u00b6 virtual, environment, separate, project When you install a library, it is accessible to all python scripts. Project A and B have access to the library. It brings out a problem if \u201cProject A depends on version 1.x but, Project B needs 4.x\u201d. This problem is recurrent when working with web frameworks. For example, you can work on a project which requires Django 1.3 while also maintaining a project which requires Django 1.0. A virtual environment solves this problem by building a sandbox for a project. Launching \u00b6 Windows vs. UNIX (Linux or Mac OS X). At the top of scripts In Windows, Python 2: python . Windows, Python 3: python 3 . UNIX, Python 2: #!/usr/bin/env python . UNIX, Python 3: #!/usr/bin/env python 3 . Add: # -*coding: utf-8 -*- . # -*coding: latin-1 -*- . Launch a script In Windows, Python 2: python <script.py> . py <script.py> . py -2 <script.py> . py -2.7 <script.py> . In UNIX, Python 2: python <script.py> . In Windows, Python 3: py -3 <script.py> . py -3.5 <script.py> . In UNIX, Python 3: python3 <script.py> . In UNIX-based OS, with a shebang, once the script is created, we can go in the folder and enter chmod +x <script.py> to change the properties. Now, we can launch a script with ./<script.py> . Launch a module Sometimes, launching Python modules cannot be done directly with pip install <script> for example. In Windows (examples): py -2 -m pip install <script> if pip install <script> does not work. py -2 -m pip install flake8 . py -2 -m pip install pylint . Launch the shell/bash The shell, Python 2: python . py -2 . py -2.7 . The bash, Python 2: python . python2 . The shell, Python 3: py -3 . py -3.5 . The bash, Python 3: python3 .","title":"Python Preliminaries"},{"location":"Python_Preliminaries/#pip","text":"pypi PyPI directory of libraries. Important commands: pip help or pip --help . pip install <module> or sudo pip install <module> . pip install --user <module> : circumvent the sudo command. pip --version . pip install --upgrade pip pip uninstall <module> or sudo pip uninstall <module> . pip purge <module> or sudo pip purge <module> . \u2026","title":"Pip"},{"location":"Python_Preliminaries/#git","text":"After installing Git, to execute Python module in the Git Bash, (re)set the path in the Git Bash (example): export PATH=\"$PATH:/c/Python27\" , export PATH=\"$PATH:/c/Python27/Scripts\" or whatever Python version.","title":"Git"},{"location":"Python_Preliminaries/#virtual-environment","text":"virtual, environment, separate, project When you install a library, it is accessible to all python scripts. Project A and B have access to the library. It brings out a problem if \u201cProject A depends on version 1.x but, Project B needs 4.x\u201d. This problem is recurrent when working with web frameworks. For example, you can work on a project which requires Django 1.3 while also maintaining a project which requires Django 1.0. A virtual environment solves this problem by building a sandbox for a project.","title":"Virtual Environment"},{"location":"Python_Preliminaries/#launching","text":"Windows vs. UNIX (Linux or Mac OS X). At the top of scripts In Windows, Python 2: python . Windows, Python 3: python 3 . UNIX, Python 2: #!/usr/bin/env python . UNIX, Python 3: #!/usr/bin/env python 3 . Add: # -*coding: utf-8 -*- . # -*coding: latin-1 -*- . Launch a script In Windows, Python 2: python <script.py> . py <script.py> . py -2 <script.py> . py -2.7 <script.py> . In UNIX, Python 2: python <script.py> . In Windows, Python 3: py -3 <script.py> . py -3.5 <script.py> . In UNIX, Python 3: python3 <script.py> . In UNIX-based OS, with a shebang, once the script is created, we can go in the folder and enter chmod +x <script.py> to change the properties. Now, we can launch a script with ./<script.py> . Launch a module Sometimes, launching Python modules cannot be done directly with pip install <script> for example. In Windows (examples): py -2 -m pip install <script> if pip install <script> does not work. py -2 -m pip install flake8 . py -2 -m pip install pylint . Launch the shell/bash The shell, Python 2: python . py -2 . py -2.7 . The bash, Python 2: python . python2 . The shell, Python 3: py -3 . py -3.5 . The bash, Python 3: python3 .","title":"Launching"},{"location":"Regex/","text":"Foreword Notes. Python 2 in Windows. UNIX-based OS generate slighly different results. Contrary to Windows, UNIX-based OS easily process international characters. Consult the Hitchicker\u2019s Guide to Python . Check out \u2018Managing Your Biological Data with Python, Chapter 9, Pattern Matching and Text Mining\u2019. Test . Additional Commands (unused) \u00b6 span , return a tuple containing the start, end positions of the match. start , return the starting position of the match. end , return the ending position of the match. group , return the string matched by the RE groups , return a tuple containing the strings fal all the subgroups split(s) , split the string into a list, splitting it wherever the RE matches sub(r, s) , find all substrings where the RE matches and replaces them with a different string subn(r, s) , do the same thing, but return the new string and the number of replacements IGNORECASE , I , case-insensitive matches. match & search \u2013 One Expression, One Search \u00b6 First, we have a text file called names.txt. 1 2 3 4 5 6 7 8 9 10 11 Liff, Kenneth kenneth@submarine.com (555) 555-5555 Teacher, Submarine @kennethliff McFarland, Arthur arty@submarine.com (555) 555-5555 Teacher, Submarine Arthur, King king_arthur@camelot.co.uk King, Camelot \u00d6sterberg, Gustav governor@norrbotten.co.se Governor, Norrbotten @gustata , Tim tim@killerrabbit.com Enchanter, Killer Rabbit Cave Carson, Ryan ryan@submarine.com (555) 555-5543 CEO, Submarine @ryancarson Doctor The doctor+companion@tardis.co.uk Time Lord, Gallifrey Exampleson, Exampleme me@example.com 555-555-5552 Example, Example Co. @exemple Obama, Barack president.44@us.gov 555 555-5551 President, United States of America @potus44 Chalks, Andrew andrew@submarine.com (555) 555-5553 Teacher, Submarine @chalkers Vader, Darth darth-vader@empire.gov (555) 555-4444 Sith lord, Galactic Empire @darthvader Second, we want to process the file: extract strings. We could use re.match , but the function is picky. re.search is more forgiving in terms of precision. In both cases, the function should return the first match it finds, then stop. 1 2 3 4 5 6 7 8 9 10 11 12 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # print what is in memory print re . search ( r 'McFarland' , data ) . group () # r for raw string, no need for \\ print re . search ( r 'Arthur' , data ) . group () # search in the strings Results (in Windows). 1 2 <_sre.SRE_Match object at 0x00000000021DB510> <_sre.SRE_Match object at 0x00000000021DB510> Results may vary in UNIX-type OS. In Linux, we get. 1 2 <_sre.SRE_Match object; span=(0, 8), match='McFarland'> <_sre.SRE_Match object; span=(10, 15), match='Arthur'> Change the script and rerun it. 1 2 3 4 5 6 7 8 9 10 11 12 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # print what is in memory print re . search ( r 'McFarland' , data ) . group () # CHANGE print re . search ( r 'Arthur' , data ) . group () # CHANGE Results. 1 2 McFarland Arthur Alternatively. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # print what is in memory last_name = r 'McFarland' first_name = r 'Arthur' print re . search ( last_name , data ) . group () # CHANGE print re . search ( first_name , data ) . group () # CHANGE Recap \u00b6 match . search . Escape Characters \u2013 Comprenhensive Search \u00b6 \\w , match any Unicode word character. \\W , match anything that isn\u2019t a Unicode word character. \\s , any whitespace. \\S , not. \\d , any number 0-9. \\D , not. \\b , boundaries or the edges of a word. \\B , not. Try. 1 2 3 4 5 6 7 8 9 10 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () print re . match ( r '\\w, \\w' , data ) # CHANGE Results. 1 None We get None because of re.match . Instead, try. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # catch phone numbers print re . search ( r '\\d\\d\\d-\\d\\d\\d\\d' , data ) . group () # CHANGE Results. 1 555-5555 Improve the code. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # catch complete phone numbers print re . search ( r '\\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d' , data ) . group () # CHANGE Results. 1 (555) 555-5555 Recap \u00b6 match . search . Escape characters (see above). Repetitions \u2013 Power Search \u00b6 {3} , repeat 3 times. {,3} , repeat 0 to 3 times. {3,} , repeat 3 or more times. {3, 5} , repeat 3, 4 or 5 times. ? , repeat 0 or once. * , repeat at least 0 times (no upper bound). + , repeat at least once (no upper bound). Catch a name. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # catch a name print re . search ( r '\\w+, \\w+' , data ) . group () # CHANGE Results. 1 Liff, Kenneth Catch a phone number. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # catch a complete phone numbers print re . search ( r '\\(\\d{3}\\) \\d{3}-\\d{4}' , data ) . group () # CHANGE Results. 1 (555) 555-5555 Catch multiple phone numbers. 1 2 3 4 5 6 7 8 9 10 11 12 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # more universal way (parentheses, hyphen, space become optional) # on multiple lines! print re . findall ( r '\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4}' , data ) # CHANGE Results. 1 ['(555) 555-5555', '(555) 555-5555', '(555) 555-5543', '555-555-5552', '555 555-5551', '(555) 555-5553', '(555) 555-4444'] Catch multiple names. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # universal way for names print re . findall ( r '\\w*, \\w+' , data ) # CHANGE: findall Results. 1 ['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', ', Tim', 'Enchanter, Killer', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Obama, Barack', 'President, United', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic'] Recap \u00b6 match . search . Escape characters (previous section). Repetitions (see above). findall . Sets \u2013 Target Search \u00b6 Catch patterns. We only need unique characters even when a word contains repetitive characters. [aple] , search for \u2018apple\u2019. [a-z] , search for any lowercase letters. [^2] , search for anything that is not 2. . , stands for any possible character. For finding email addresses, search better \u2018cures\u2019 on email adresses. Search for email address regex or email address regular expressions on Stack Overflow, Quora, etc. We can also try. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # find emails print re . findall ( r '[-\\w\\d+.]+@[-\\w\\d.]+' , data ) # CHANGE Results. 1 ['kenneth@submarine.com', 'arty@submarine.com', 'king_arthur@camelot.co.uk', 'governor@norrbotten.co.se', 'tim@killerrabbit.com', 'ryan@submarine.com', 'doctor+companion@tardis.co.uk', 'me@example.com', 'president.44@us.gov', 'andrew@submarine.com', 'darth-vader@empire.gov'] Retrieve \u2018submarine\u2019. All characters are unique. The set should be \u2018submarine\u2019. 1 2 3 4 5 6 7 8 9 10 11 12 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # set [submarine] should catch 'submarine' # add word boundaries, at least once, ignore lower or upper cases print re . findall ( r '\\b[submarine]+\\b' , data , re . IGNORECASE ) # CHANGE Results. 1 ['submarine', 'Submarine', 'submarine', 'Submarine', 'se', 'submarine', 'Submarine', 'me', 'us', 'submarine', 'Submarine'] However, we also collect shorter strings (\u2018se\u2019, \u2018me\u2019, \u2018us\u2019, \u2018Maria\u2019) with characters from [submarine]. If we wanted to limit the search to \u2018submarine\u2019 only. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # always 9 letters print re . findall ( r '\\b[submarine]{9}\\b' , data , re . IGNORECASE ) # CHANGE Results. 1 ['submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine'] Recap \u00b6 match . search . Escape characters (previous section). Repetitions (previous section). findall . re.IGNORECASE . Boundaries \u2013 Smart Search \u00b6 ''' , add a multiline string. \\b@ , word boundary @ . \\b , word boundary . ^ , ignore. \\t , tab character. . , any character. Find emails with word boundaries, spaces, words, explicit spaces (without using VERBOSE!!!), at least once for any number of characters, ignore tabs, and ignore newlines. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # multiline strings print re . findall ( r ''' \\b@[-\\w\\d.]* # First a word boundary, an @, and then any number of characters [^gov\\t] # Ignore 1+ instances of the letters 'g', 'o' or 'v' and a tab \\b # Another word boundary ''' , data , re . VERBOSE | re . I ) Results. 1 ['@submarine.com', '@submarine.com', '@camelot.co.uk', '@norrbotten.co.se', '@killerrabbit.com', '@submarine.com', '@tardis.co.uk', '@example.com', '@us.', '@submarine.com', '@empire.'] We left off a few details in the email addresses. Retrieve the names and workplaces. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # name and place of work print re . findall ( r ''' \\b[-\\w]*, # Find a word boundary, 1+ hyphens or characters, and a comma \\s # Find 1 whitespace [-\\w ]+ # 1+ hyphens and characters and explicit spaces [^\\t\\n] # Ignore tabs and newlines ''' , data , re . X ) Results. 1 ['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', 'Enchanter, Killer Rabbit Cave', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Example, Example Co.', 'Obama, Barack', 'President, United States of America', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic Empire'] The only problem: it did not catch \u00d6 and , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems. Recap \u00b6 match . search . Escape characters (previous section). Repetitions (previous section). findall . re.IGNORECASE . re.VERBOSE|re.I , more readable, introduce whitespaces or comments. re.X . Groups \u2013 Subdivided Search \u00b6 last and first names. emails. phone numbers. job and workplaces. Twitter accounts. etc\u2026 For that, we need parentheses. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # retrieve groups... print re . findall ( r ''' ([-\\w ]+,\\s[-\\w ]+)\\t # last and first names ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})\\t # phone numbers ([\\w\\s]+,\\s[\\w\\s]+)\\t # job and work place (@[\\w\\d]+)$ # Twitter account ''' , data , re . X ) Results (a tupple). 1 [('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine', '@ryancarson'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire', '@darthvader')] The only problem: it did not catch \u00d6 and , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems. On the other hand, there are some details missing. We need to make the code more universal for the first and last names. The phone number should be optional, tabs are optional, without Twitter accounts, and tabs should become a new line instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # retrieve groups... print re . findall ( r ''' ^([-\\w ]*,\\s[-\\w ]+)\\t # last and first names CHANGE ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t # phone numbers CHANGE ([\\w\\s]+,\\s[\\w\\s.]+)\\t? # job and work place CHANGE (@[\\w\\d]+)?$ # Twitter account CHANGE ''' , data , re . X | re . MULTILINE ) Results (a tupple). More. 1 [('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('McFarland, Arthur', 'arty@submarine.com', '(555) 555-5555', 'Teacher, Submarine', ''), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine\\t', '@ryancarson'), ('Exampleson, Exampleme', 'me@example.com', '555-555-5552', 'Example, Example Co.\\t', '@exemple'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America\\t', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine\\t', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire\\t', '@darthvader')] The only problem: it did not catch \u00d6 and , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems. Turn the results into a dictionary with \u2018patterns\u2019 or P<...> . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # build a dictionary CHANGE ALL line = re . search ( r ''' ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t? (?P<twitter>@[\\w\\d]+)?$ ''' , data , re . X | re . MULTILINE ) print \"print line...\" print line print \"=\" * 25 print \"print line.group()...\" print line . group () print \"=\" * 25 print \"print line.groupdict()...\" print line . groupdict () Results (a tupple). Say we remove the first line in the data\u2026 1 2 3 4 5 6 7 8 print line... <_sre.SRE_Match object at 0x00000000021DDDD8> ========================= print line.group()... McFarland, Arthur arty@submarine.com (555) 555-5555 Teacher, Submarine ========================= print line.groupdict()... {'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'} Recap \u00b6 match . search . Escape characters (previous section). Repetitions (previous section). findall . re.IGNORECASE . re.VERBOSE|re.I . re.X . re.X|re.MULTILINE or re.X|re.M . Compile & Build Dictionaries \u2013 Operationalized Search \u00b6 Compile a pattern into an object. Replace findall or search with compile . Remove data to make a generic function to process any data. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # build a dictionary CHANGE line = re . compile ( r ''' ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t? (?P<twitter>@[\\w\\d]+)?$ ''' , re . X | re . MULTILINE ) print re . search ( line , data ) . groupdict () # CHANGE Results (a tupple). Say we remove the first line in the data\u2026 1 {'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'} Alternatively. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # build a dictionary CHANGE line = re . compile ( r ''' ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t? (?P<twitter>@[\\w\\d]+)?$ ''' , re . X | re . MULTILINE ) print line . search ( data ) . groupdict () # CHANGE Compiling not only does it make the script universal (ready for any data), but it also make the execution faster. It becomes easier to compile the script into an executable. We want all the lines, but a specific group (say \u2018names\u2019). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # build a dictionary line = re . compile ( r ''' ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t? (?P<twitter>@[\\w\\d]+)?$ ''' , re . X | re . MULTILINE ) for match in line . finditer ( data ): # CHANGE print match . group ( 'name' ) Results (a tupple). 1 2 3 4 5 6 7 Liff, Kenneth McFarland, Arthur Carson, Ryan Exampleson, Exampleme Obama, Barack Chalks, Andrew Vader, Darth The only problem: it did not catch \u00d6 and , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems. Create sub-patterns and extract specific groups. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # build a dictionary line = re . compile ( r ''' ^(?P<name>(?P<last>[-\\w ]*),\\s(?P<first>[-\\w ]+))\\t # CHANGE (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t? (?P<twitter>@[\\w\\d]+)?$ ''' , re . X | re . MULTILINE ) for match in line . finditer ( data ): print '{first} {last} <{email}>' . format ( ** match . groupdict ()) Results 1 2 3 4 5 6 7 Kenneth Liff <kenneth@submarine.com> Arthur McFarland <arty@submarine.com> Ryan Carson <ryan@submarine.com> Exampleme Exampleson <me@example.com> Barack Obama <president.44@us.gov> Andrew Chalks <andrew@submarine.com> Darth Vader <darth-vader@empire.gov> The only problem: it did not catch \u00d6 and , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems. Recap \u00b6 match . search . Escape characters (previous section). Repetitions (previous section). findall . re.IGNORECASE . re.VERBOSE|re.I . re.X . re.X|re.MULTILINE or re.X|re.M . compile . groupdict . line.finditer . match.group . match.groupdict .","title":"Regular Expressions (regex)"},{"location":"Regex/#match-search-one-expression-one-search","text":"First, we have a text file called names.txt. 1 2 3 4 5 6 7 8 9 10 11 Liff, Kenneth kenneth@submarine.com (555) 555-5555 Teacher, Submarine @kennethliff McFarland, Arthur arty@submarine.com (555) 555-5555 Teacher, Submarine Arthur, King king_arthur@camelot.co.uk King, Camelot \u00d6sterberg, Gustav governor@norrbotten.co.se Governor, Norrbotten @gustata , Tim tim@killerrabbit.com Enchanter, Killer Rabbit Cave Carson, Ryan ryan@submarine.com (555) 555-5543 CEO, Submarine @ryancarson Doctor The doctor+companion@tardis.co.uk Time Lord, Gallifrey Exampleson, Exampleme me@example.com 555-555-5552 Example, Example Co. @exemple Obama, Barack president.44@us.gov 555 555-5551 President, United States of America @potus44 Chalks, Andrew andrew@submarine.com (555) 555-5553 Teacher, Submarine @chalkers Vader, Darth darth-vader@empire.gov (555) 555-4444 Sith lord, Galactic Empire @darthvader Second, we want to process the file: extract strings. We could use re.match , but the function is picky. re.search is more forgiving in terms of precision. In both cases, the function should return the first match it finds, then stop. 1 2 3 4 5 6 7 8 9 10 11 12 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # print what is in memory print re . search ( r 'McFarland' , data ) . group () # r for raw string, no need for \\ print re . search ( r 'Arthur' , data ) . group () # search in the strings Results (in Windows). 1 2 <_sre.SRE_Match object at 0x00000000021DB510> <_sre.SRE_Match object at 0x00000000021DB510> Results may vary in UNIX-type OS. In Linux, we get. 1 2 <_sre.SRE_Match object; span=(0, 8), match='McFarland'> <_sre.SRE_Match object; span=(10, 15), match='Arthur'> Change the script and rerun it. 1 2 3 4 5 6 7 8 9 10 11 12 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # print what is in memory print re . search ( r 'McFarland' , data ) . group () # CHANGE print re . search ( r 'Arthur' , data ) . group () # CHANGE Results. 1 2 McFarland Arthur Alternatively. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # print what is in memory last_name = r 'McFarland' first_name = r 'Arthur' print re . search ( last_name , data ) . group () # CHANGE print re . search ( first_name , data ) . group () # CHANGE","title":"match &amp; search -- One Expression, One Search"},{"location":"Regex/#recap","text":"match . search .","title":"Recap"},{"location":"Regex/#escape-characters-comprenhensive-search","text":"\\w , match any Unicode word character. \\W , match anything that isn\u2019t a Unicode word character. \\s , any whitespace. \\S , not. \\d , any number 0-9. \\D , not. \\b , boundaries or the edges of a word. \\B , not. Try. 1 2 3 4 5 6 7 8 9 10 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () print re . match ( r '\\w, \\w' , data ) # CHANGE Results. 1 None We get None because of re.match . Instead, try. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # catch phone numbers print re . search ( r '\\d\\d\\d-\\d\\d\\d\\d' , data ) . group () # CHANGE Results. 1 555-5555 Improve the code. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # catch complete phone numbers print re . search ( r '\\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d' , data ) . group () # CHANGE Results. 1 (555) 555-5555","title":"Escape Characters -- Comprenhensive Search"},{"location":"Regex/#recap_1","text":"match . search . Escape characters (see above).","title":"Recap"},{"location":"Regex/#repetitions-power-search","text":"{3} , repeat 3 times. {,3} , repeat 0 to 3 times. {3,} , repeat 3 or more times. {3, 5} , repeat 3, 4 or 5 times. ? , repeat 0 or once. * , repeat at least 0 times (no upper bound). + , repeat at least once (no upper bound). Catch a name. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # catch a name print re . search ( r '\\w+, \\w+' , data ) . group () # CHANGE Results. 1 Liff, Kenneth Catch a phone number. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # catch a complete phone numbers print re . search ( r '\\(\\d{3}\\) \\d{3}-\\d{4}' , data ) . group () # CHANGE Results. 1 (555) 555-5555 Catch multiple phone numbers. 1 2 3 4 5 6 7 8 9 10 11 12 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # more universal way (parentheses, hyphen, space become optional) # on multiple lines! print re . findall ( r '\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4}' , data ) # CHANGE Results. 1 ['(555) 555-5555', '(555) 555-5555', '(555) 555-5543', '555-555-5552', '555 555-5551', '(555) 555-5553', '(555) 555-4444'] Catch multiple names. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # universal way for names print re . findall ( r '\\w*, \\w+' , data ) # CHANGE: findall Results. 1 ['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', ', Tim', 'Enchanter, Killer', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Obama, Barack', 'President, United', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic']","title":"Repetitions -- Power Search"},{"location":"Regex/#recap_2","text":"match . search . Escape characters (previous section). Repetitions (see above). findall .","title":"Recap"},{"location":"Regex/#sets-target-search","text":"Catch patterns. We only need unique characters even when a word contains repetitive characters. [aple] , search for \u2018apple\u2019. [a-z] , search for any lowercase letters. [^2] , search for anything that is not 2. . , stands for any possible character. For finding email addresses, search better \u2018cures\u2019 on email adresses. Search for email address regex or email address regular expressions on Stack Overflow, Quora, etc. We can also try. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # find emails print re . findall ( r '[-\\w\\d+.]+@[-\\w\\d.]+' , data ) # CHANGE Results. 1 ['kenneth@submarine.com', 'arty@submarine.com', 'king_arthur@camelot.co.uk', 'governor@norrbotten.co.se', 'tim@killerrabbit.com', 'ryan@submarine.com', 'doctor+companion@tardis.co.uk', 'me@example.com', 'president.44@us.gov', 'andrew@submarine.com', 'darth-vader@empire.gov'] Retrieve \u2018submarine\u2019. All characters are unique. The set should be \u2018submarine\u2019. 1 2 3 4 5 6 7 8 9 10 11 12 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # set [submarine] should catch 'submarine' # add word boundaries, at least once, ignore lower or upper cases print re . findall ( r '\\b[submarine]+\\b' , data , re . IGNORECASE ) # CHANGE Results. 1 ['submarine', 'Submarine', 'submarine', 'Submarine', 'se', 'submarine', 'Submarine', 'me', 'us', 'submarine', 'Submarine'] However, we also collect shorter strings (\u2018se\u2019, \u2018me\u2019, \u2018us\u2019, \u2018Maria\u2019) with characters from [submarine]. If we wanted to limit the search to \u2018submarine\u2019 only. 1 2 3 4 5 6 7 8 9 10 11 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # always 9 letters print re . findall ( r '\\b[submarine]{9}\\b' , data , re . IGNORECASE ) # CHANGE Results. 1 ['submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine']","title":"Sets -- Target Search"},{"location":"Regex/#recap_3","text":"match . search . Escape characters (previous section). Repetitions (previous section). findall . re.IGNORECASE .","title":"Recap"},{"location":"Regex/#boundaries-smart-search","text":"''' , add a multiline string. \\b@ , word boundary @ . \\b , word boundary . ^ , ignore. \\t , tab character. . , any character. Find emails with word boundaries, spaces, words, explicit spaces (without using VERBOSE!!!), at least once for any number of characters, ignore tabs, and ignore newlines. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # multiline strings print re . findall ( r ''' \\b@[-\\w\\d.]* # First a word boundary, an @, and then any number of characters [^gov\\t] # Ignore 1+ instances of the letters 'g', 'o' or 'v' and a tab \\b # Another word boundary ''' , data , re . VERBOSE | re . I ) Results. 1 ['@submarine.com', '@submarine.com', '@camelot.co.uk', '@norrbotten.co.se', '@killerrabbit.com', '@submarine.com', '@tardis.co.uk', '@example.com', '@us.', '@submarine.com', '@empire.'] We left off a few details in the email addresses. Retrieve the names and workplaces. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # name and place of work print re . findall ( r ''' \\b[-\\w]*, # Find a word boundary, 1+ hyphens or characters, and a comma \\s # Find 1 whitespace [-\\w ]+ # 1+ hyphens and characters and explicit spaces [^\\t\\n] # Ignore tabs and newlines ''' , data , re . X ) Results. 1 ['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', 'Enchanter, Killer Rabbit Cave', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Example, Example Co.', 'Obama, Barack', 'President, United States of America', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic Empire'] The only problem: it did not catch \u00d6 and , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.","title":"Boundaries -- Smart Search"},{"location":"Regex/#recap_4","text":"match . search . Escape characters (previous section). Repetitions (previous section). findall . re.IGNORECASE . re.VERBOSE|re.I , more readable, introduce whitespaces or comments. re.X .","title":"Recap"},{"location":"Regex/#groups-subdivided-search","text":"last and first names. emails. phone numbers. job and workplaces. Twitter accounts. etc\u2026 For that, we need parentheses. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # retrieve groups... print re . findall ( r ''' ([-\\w ]+,\\s[-\\w ]+)\\t # last and first names ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})\\t # phone numbers ([\\w\\s]+,\\s[\\w\\s]+)\\t # job and work place (@[\\w\\d]+)$ # Twitter account ''' , data , re . X ) Results (a tupple). 1 [('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine', '@ryancarson'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire', '@darthvader')] The only problem: it did not catch \u00d6 and , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems. On the other hand, there are some details missing. We need to make the code more universal for the first and last names. The phone number should be optional, tabs are optional, without Twitter accounts, and tabs should become a new line instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # retrieve groups... print re . findall ( r ''' ^([-\\w ]*,\\s[-\\w ]+)\\t # last and first names CHANGE ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t # phone numbers CHANGE ([\\w\\s]+,\\s[\\w\\s.]+)\\t? # job and work place CHANGE (@[\\w\\d]+)?$ # Twitter account CHANGE ''' , data , re . X | re . MULTILINE ) Results (a tupple). More. 1 [('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('McFarland, Arthur', 'arty@submarine.com', '(555) 555-5555', 'Teacher, Submarine', ''), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine\\t', '@ryancarson'), ('Exampleson, Exampleme', 'me@example.com', '555-555-5552', 'Example, Example Co.\\t', '@exemple'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America\\t', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine\\t', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire\\t', '@darthvader')] The only problem: it did not catch \u00d6 and , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems. Turn the results into a dictionary with \u2018patterns\u2019 or P<...> . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # build a dictionary CHANGE ALL line = re . search ( r ''' ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t? (?P<twitter>@[\\w\\d]+)?$ ''' , data , re . X | re . MULTILINE ) print \"print line...\" print line print \"=\" * 25 print \"print line.group()...\" print line . group () print \"=\" * 25 print \"print line.groupdict()...\" print line . groupdict () Results (a tupple). Say we remove the first line in the data\u2026 1 2 3 4 5 6 7 8 print line... <_sre.SRE_Match object at 0x00000000021DDDD8> ========================= print line.group()... McFarland, Arthur arty@submarine.com (555) 555-5555 Teacher, Submarine ========================= print line.groupdict()... {'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}","title":"Groups -- Subdivided Search"},{"location":"Regex/#recap_5","text":"match . search . Escape characters (previous section). Repetitions (previous section). findall . re.IGNORECASE . re.VERBOSE|re.I . re.X . re.X|re.MULTILINE or re.X|re.M .","title":"Recap"},{"location":"Regex/#compile-build-dictionaries-operationalized-search","text":"Compile a pattern into an object. Replace findall or search with compile . Remove data to make a generic function to process any data. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # build a dictionary CHANGE line = re . compile ( r ''' ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t? (?P<twitter>@[\\w\\d]+)?$ ''' , re . X | re . MULTILINE ) print re . search ( line , data ) . groupdict () # CHANGE Results (a tupple). Say we remove the first line in the data\u2026 1 {'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'} Alternatively. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # build a dictionary CHANGE line = re . compile ( r ''' ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t? (?P<twitter>@[\\w\\d]+)?$ ''' , re . X | re . MULTILINE ) print line . search ( data ) . groupdict () # CHANGE Compiling not only does it make the script universal (ready for any data), but it also make the execution faster. It becomes easier to compile the script into an executable. We want all the lines, but a specific group (say \u2018names\u2019). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # build a dictionary line = re . compile ( r ''' ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t? (?P<twitter>@[\\w\\d]+)?$ ''' , re . X | re . MULTILINE ) for match in line . finditer ( data ): # CHANGE print match . group ( 'name' ) Results (a tupple). 1 2 3 4 5 6 7 Liff, Kenneth McFarland, Arthur Carson, Ryan Exampleson, Exampleme Obama, Barack Chalks, Andrew Vader, Darth The only problem: it did not catch \u00d6 and , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems. Create sub-patterns and extract specific groups. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import re # read the file name_file = open ( \"names.txt\" ) data = name_file . read () # data is now in memory name_file . close () # build a dictionary line = re . compile ( r ''' ^(?P<name>(?P<last>[-\\w ]*),\\s(?P<first>[-\\w ]+))\\t # CHANGE (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t? (?P<twitter>@[\\w\\d]+)?$ ''' , re . X | re . MULTILINE ) for match in line . finditer ( data ): print '{first} {last} <{email}>' . format ( ** match . groupdict ()) Results 1 2 3 4 5 6 7 Kenneth Liff <kenneth@submarine.com> Arthur McFarland <arty@submarine.com> Ryan Carson <ryan@submarine.com> Exampleme Exampleson <me@example.com> Barack Obama <president.44@us.gov> Andrew Chalks <andrew@submarine.com> Darth Vader <darth-vader@empire.gov> The only problem: it did not catch \u00d6 and , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.","title":"Compile &amp; Build Dictionaries -- Operationalized Search"},{"location":"Regex/#recap_6","text":"match . search . Escape characters (previous section). Repetitions (previous section). findall . re.IGNORECASE . re.VERBOSE|re.I . re.X . re.X|re.MULTILINE or re.X|re.M . compile . groupdict . line.finditer . match.group . match.groupdict .","title":"Recap"},{"location":"Scipy_CS/","text":"Foreword Cheat sheets. Data Mining \u00b6 Data Mining . PDF only. Importing Data \u00b6 Importing Data . PDF. Keras \u00b6 Keras . PDF. Linear Algebra (with Numpy) \u00b6 Linear Algebra . PDF only. SciPy Linear Algebra . PDF. Machine Learning \u00b6 Machine Learning . PDF only. Supervised Learning; Unsupervised Learning; Deep Learning; Machine Learning Tips and Tricks; Probabilities and Statistics; Linear Algebra and Calculus. scikit-learn . PDF. . Numpy \u00b6 NumPy/SciPy/Pandas Cheat Sheet . PDF. Numpy . PDF. Pandas \u00b6 Pandas DataFrame Notes . PDF only. Pandas . PDF. Pandas . PDF. Data Wrangling with Pandas . PDF. Spark \u00b6 PySpark . PDF. PySpark SQL . PDF. Visualization \u00b6 Bokeh \u00b6 Bokeh . PDF. Folium \u00b6 Folium . PDF. Matplotlib \u00b6 Matplotlib Notes . PDF only. Matplotlib . PDF. Plotly \u00b6 Plotly . PDF only. Seaborn \u00b6 Seaborn . PDF.","title":"Scipy Stack Cheat Sheets"},{"location":"Scipy_CS/#importing-data","text":"Importing Data . PDF.","title":"Importing Data"},{"location":"Scipy_CS/#keras","text":"Keras . PDF.","title":"Keras"},{"location":"Scipy_CS/#linear-algebra-with-numpy","text":"Linear Algebra . PDF only. SciPy Linear Algebra . PDF.","title":"Linear Algebra (with Numpy)"},{"location":"Scipy_CS/#machine-learning","text":"Machine Learning . PDF only. Supervised Learning; Unsupervised Learning; Deep Learning; Machine Learning Tips and Tricks; Probabilities and Statistics; Linear Algebra and Calculus. scikit-learn . PDF. .","title":"Machine Learning"},{"location":"Scipy_CS/#numpy","text":"NumPy/SciPy/Pandas Cheat Sheet . PDF. Numpy . PDF.","title":"Numpy"},{"location":"Scipy_CS/#pandas","text":"Pandas DataFrame Notes . PDF only. Pandas . PDF. Pandas . PDF. Data Wrangling with Pandas . PDF.","title":"Pandas"},{"location":"Scipy_CS/#spark","text":"PySpark . PDF. PySpark SQL . PDF.","title":"Spark"},{"location":"Scipy_CS/#visualization","text":"","title":"Visualization"},{"location":"Scipy_CS/#bokeh","text":"Bokeh . PDF.","title":"Bokeh"},{"location":"Scipy_CS/#folium","text":"Folium . PDF.","title":"Folium"},{"location":"Scipy_CS/#matplotlib","text":"Matplotlib Notes . PDF only. Matplotlib . PDF.","title":"Matplotlib"},{"location":"Scipy_CS/#plotly","text":"Plotly . PDF only.","title":"Plotly"},{"location":"Scipy_CS/#seaborn","text":"Seaborn . PDF.","title":"Seaborn"},{"location":"Sentiment_Analysis_with_Twitter/","text":"Foreword Code snippets and excerpts from the tutorial. Python 3. From DataCamp. With Jupyter Notebook and the In [ ] Out [ ] format. Import the modules and connect to Tweeter \u00b6 From this link , analyze sentiments and perform text mining: tokenization, bag words, sentiment value from a lexicon. Psychology and Sociology. Consumer satisfaction. Comments. Find out about tweepy (Twitter API) and textblob . TextBlob stands on the shoulders of NLTK and process textual data. It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification, translation, and more. 1 2 3 4 import pandas as pd # store the keys in a file to keep them private twitter_api = pd . read_csv ( 'twitter_api.csv' , header = 0 , sep = ',' ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import tweepy from textblob import TextBlob # must have a Twitter account, see the video # authenticate with... # api_key consumer_key = twitter_api . get_value ( 0 , 'api_key' ) # api_secret consumer_secret = twitter_api . get_value ( 0 , 'api_secret' ) # access token access_token = twitter_api . get_value ( 0 , 'access_token' ) # access secret access_token_secret = twitter_api . get_value ( 0 , 'access_secret' ) auth = tweepy . OAuthHandler ( consumer_key , consumer_secret ) auth . set_access_token ( access_token , access_token_secret ) api = tweepy . API ( auth ) Retrieve tweets \u00b6 1 2 3 4 5 # retrieve tweets with the API public_tweets = api . search ( 'Climate' ) for tweet in public_tweets : print ( tweet . text ) Perform sentiment analysis \u00b6 1 2 3 4 5 6 7 8 # perform sentiment analysis on each tweet # -1 < polarity < 1 (negativity vs positivity (sentiment)) # 0 < subjectivity < 1 (factual vs opinion) for tweet in public_tweets : print ( tweet . text ) analysis = TextBlob ( tweet . text ) print ( analysis . sentiment ) print ( \"----------\" ) 1 2 3 4 5 6 7 8 9 # create a list of dictionaries # each dictionary contains a tweet text and user # the list bundle up the dictionaries saved_tweets = [] for tweet in public_tweets : parsed_tweet = {} parsed_tweet [ 'text' ] = tweet . text parsed_tweet [ 'user' ] = tweet . user . screen_name saved_tweets . append ( parsed_tweet ) 1 2 3 4 # convert the list into a data frame saved_tweets_df = pd . DataFrame ( saved_tweets ) # print the head print ( saved_tweets_df . head ( 3 )) 1 2 # save the data frame into a csv file saved_tweets_df . to_csv ( 'saved_tweets_df.csv' ) An overview of NLP (with nltk and textblob ) \u00b6 Make sure to install the nltk (with pip or conda) module and then run python -m textblob.download_corpora . 1 2 # a comment or an opinion comment = TextBlob ( \"I am angry that I never get good players in my pool\" ) 1 print ( comment ) 1 2 # tags are not token print ( comment . tags ) 1 2 # words are like tokens print ( comment . words ) 1 2 # -1 < polarity < 1 (negativity vs positivity (sentiment)) print ( comment . sentiment . polarity ) 1 2 # 0 < subjectivity < 1 (factual vs opinion) print ( comment . sentiment . subjectivity ) 1 2 # both print ( comment . sentiment ) 1 2 3 4 # a fact fact = TextBlob ( \"The sun is setting at the moment\" ) print ( fact . sentiment ) Applications \u00b6 Query Tweeter, generate categorical results, populate a list of dictionaries \u00b6 Pointers: Use of functions and a class. Error-handling authentication. Query tweets, retweets, etc. Generate categorical results with sentiment analysis. Create a list of little dictionaries for parsing and containing tweet data and metadata. Error-handling parsing. Filter retweets. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 import os import re import tweepy from tweepy import OAuthHandler from textblob import TextBlob class TwitterClient ( object ): ''' Generic Twitter Class for the App ''' def __init__ ( self , query , retweets_only = False , with_sentiment = False ): # keys and tokens from the Twitter Dev Console consumer_key = os . environ [ 'CONSUMER_KEY' ] consumer_secret = os . environ [ 'CONSUMER_SECRET' ] access_token = os . environ [ 'ACCESS_TOKEN' ] access_token_secret = os . environ [ 'ACCESS_TOKEN_SECRET' ] # Attempt authentication try : self . auth = OAuthHandler ( consumer_key , consumer_secret ) self . auth . set_access_token ( access_token , access_token_secret ) self . query = query self . retweets_only = retweets_only self . with_sentiment = with_sentiment self . api = tweepy . API ( self . auth ) self . tweet_count_max = 100 # To prevent Rate Limiting except : print ( \"Error: Authentication Failed\" ) def set_query ( self , query = '' ): self . query = query def set_retweet_checking ( self , retweets_only = 'false' ): self . retweets_only = retweets_only def set_with_sentiment ( self , with_sentiment = 'false' ): self . with_sentiment = with_sentiment def clean_tweet ( self , tweet ): return ' ' . join ( re . sub ( \"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t ])|(\\w+:\\/\\/\\S+)\" , \" \" , tweet ) . split ()) def get_tweet_sentiment ( self , tweet ): analysis = TextBlob ( self . clean_tweet ( tweet )) if analysis . sentiment . polarity > 0 : return 'positive' elif analysis . sentiment . polarity == 0 : return 'neutral' else : return 'negative' def get_tweets ( self ): tweets = [] try : recd_tweets = self . api . search ( q = self . query , count = self . tweet_count_max ) if not recd_tweets : pass for tweet in recd_tweets : parsed_tweet = {} parsed_tweet [ 'text' ] = tweet . text parsed_tweet [ 'user' ] = tweet . user . screen_name if self . with_sentiment == 1 : parsed_tweet [ 'sentiment' ] = self . get_tweet_sentiment ( tweet . text ) else : parsed_tweet [ 'sentiment' ] = 'unavailable' if tweet . retweet_count > 0 and self . retweets_only == 1 : if parsed_tweet not in tweets : tweets . append ( parsed_tweet ) elif not self . retweets_only : if parsed_tweet not in tweets : tweets . append ( parsed_tweet ) return tweets except tweepy . TweepError as e : print ( \"Error : \" + str ( e )) Query Tweeter, generate categorical results, populate a dictionary of lists, write files, compute statistics \u00b6 Pointers: Scope the queries: keywords, dates. Generate categorical results with sentiment analysis. Generate a dictionary of lists. Write a file for each candidate (not pandas involved); the list. Enrich each tweet for each candidate with sentiment analysis and the mean values; the list. Build a list of all sentiment analysis. With the dictionary of lists, sort the mean values and rank the keywords. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 import tweepy from textblob import TextBlob #French adaptor from textblob_fr import PatternTagger , PatternAnalyzer import numpy as np import operator # Step 1 - Authenticate consumer_key = 'CONSUMER_KEY_HERE' consumer_secret = 'CONSUMER_SECRET_HERE' access_token = 'ACCESS_TOKEN_HERE' access_token_secret = 'ACCESS_TOKEN_SECRET_HERE' auth = tweepy . OAuthHandler ( consumer_key , consumer_secret ) auth . set_access_token ( access_token , access_token_secret ) api = tweepy . API ( auth ) #Step 2 - Prepare query features #List of candidates to French Republicans Primary Elections candidates_names = [ 'Sarkozy' , 'Kosciusko' , 'Cope' , 'Juppe' , 'Fillon' , 'Le Maire' , 'Poisson' ] #Hashtag related to the debate name_of_debate = \"PrimaireLeDebat\" #Date of the debate : October 13th since_date = \"2016-10-13\" until_date = \"2016-10-14\" #Step 2b - Function of labelisation of analysis def get_label ( analysis , threshold = 0 ): if analysis . sentiment [ 0 ] > threshold : return 'Positive' else : return 'Negative' #Step 3 - Retrieve Tweets and Save Them all_polarities = dict () for candidate in candidates_names : this_candidate_polarities = [] #Get the tweets about the debate and the candidate between the dates this_candidate_tweets = api . search ( q = [ name_of_debate , candidate ], count = 100 , since = since_date , until = until_date ) #Save the tweets in csv with open ( ' %s _tweets.csv' % candidate , 'wb' ) as this_candidate_file : this_candidate_file . write ( 'tweet,sentiment_label \\n ' ) for tweet in this_candidate_tweets : analysis = TextBlob ( tweet . text , pos_tagger = PatternTagger (), analyzer = PatternAnalyzer ()) #Get the label corresponding to the sentiment analysis this_candidate_polarities . append ( analysis . sentiment [ 0 ]) this_candidate_file . write ( ' %s , %s \\n ' % ( tweet . text . encode ( 'utf8' ), get_label ( analysis ))) #Save the mean for final results all_polarities [ candidate ] = np . mean ( this_candidate_polarities ) #Step bonus - Print a Result sorted_analysis = sorted ( all_polarities . items (), key = operator . itemgetter ( 1 ), reverse = True ) print 'Mean Sentiment Polarity in descending order :' for candidate , polarity in sorted_analysis : print ' %s : %0.3f ' % ( candidate , polarity )","title":"Sentiment Analysis with Twitter"},{"location":"Sentiment_Analysis_with_Twitter/#retrieve-tweets","text":"1 2 3 4 5 # retrieve tweets with the API public_tweets = api . search ( 'Climate' ) for tweet in public_tweets : print ( tweet . text )","title":"Retrieve tweets"},{"location":"Sentiment_Analysis_with_Twitter/#perform-sentiment-analysis","text":"1 2 3 4 5 6 7 8 # perform sentiment analysis on each tweet # -1 < polarity < 1 (negativity vs positivity (sentiment)) # 0 < subjectivity < 1 (factual vs opinion) for tweet in public_tweets : print ( tweet . text ) analysis = TextBlob ( tweet . text ) print ( analysis . sentiment ) print ( \"----------\" ) 1 2 3 4 5 6 7 8 9 # create a list of dictionaries # each dictionary contains a tweet text and user # the list bundle up the dictionaries saved_tweets = [] for tweet in public_tweets : parsed_tweet = {} parsed_tweet [ 'text' ] = tweet . text parsed_tweet [ 'user' ] = tweet . user . screen_name saved_tweets . append ( parsed_tweet ) 1 2 3 4 # convert the list into a data frame saved_tweets_df = pd . DataFrame ( saved_tweets ) # print the head print ( saved_tweets_df . head ( 3 )) 1 2 # save the data frame into a csv file saved_tweets_df . to_csv ( 'saved_tweets_df.csv' )","title":"Perform sentiment analysis"},{"location":"Sentiment_Analysis_with_Twitter/#an-overview-of-nlp-with-nltk-and-textblob","text":"Make sure to install the nltk (with pip or conda) module and then run python -m textblob.download_corpora . 1 2 # a comment or an opinion comment = TextBlob ( \"I am angry that I never get good players in my pool\" ) 1 print ( comment ) 1 2 # tags are not token print ( comment . tags ) 1 2 # words are like tokens print ( comment . words ) 1 2 # -1 < polarity < 1 (negativity vs positivity (sentiment)) print ( comment . sentiment . polarity ) 1 2 # 0 < subjectivity < 1 (factual vs opinion) print ( comment . sentiment . subjectivity ) 1 2 # both print ( comment . sentiment ) 1 2 3 4 # a fact fact = TextBlob ( \"The sun is setting at the moment\" ) print ( fact . sentiment )","title":"An overview of NLP (with nltk and textblob)"},{"location":"Sentiment_Analysis_with_Twitter/#applications","text":"","title":"Applications"},{"location":"Sentiment_Analysis_with_Twitter/#query-tweeter-generate-categorical-results-populate-a-list-of-dictionaries","text":"Pointers: Use of functions and a class. Error-handling authentication. Query tweets, retweets, etc. Generate categorical results with sentiment analysis. Create a list of little dictionaries for parsing and containing tweet data and metadata. Error-handling parsing. Filter retweets. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 import os import re import tweepy from tweepy import OAuthHandler from textblob import TextBlob class TwitterClient ( object ): ''' Generic Twitter Class for the App ''' def __init__ ( self , query , retweets_only = False , with_sentiment = False ): # keys and tokens from the Twitter Dev Console consumer_key = os . environ [ 'CONSUMER_KEY' ] consumer_secret = os . environ [ 'CONSUMER_SECRET' ] access_token = os . environ [ 'ACCESS_TOKEN' ] access_token_secret = os . environ [ 'ACCESS_TOKEN_SECRET' ] # Attempt authentication try : self . auth = OAuthHandler ( consumer_key , consumer_secret ) self . auth . set_access_token ( access_token , access_token_secret ) self . query = query self . retweets_only = retweets_only self . with_sentiment = with_sentiment self . api = tweepy . API ( self . auth ) self . tweet_count_max = 100 # To prevent Rate Limiting except : print ( \"Error: Authentication Failed\" ) def set_query ( self , query = '' ): self . query = query def set_retweet_checking ( self , retweets_only = 'false' ): self . retweets_only = retweets_only def set_with_sentiment ( self , with_sentiment = 'false' ): self . with_sentiment = with_sentiment def clean_tweet ( self , tweet ): return ' ' . join ( re . sub ( \"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t ])|(\\w+:\\/\\/\\S+)\" , \" \" , tweet ) . split ()) def get_tweet_sentiment ( self , tweet ): analysis = TextBlob ( self . clean_tweet ( tweet )) if analysis . sentiment . polarity > 0 : return 'positive' elif analysis . sentiment . polarity == 0 : return 'neutral' else : return 'negative' def get_tweets ( self ): tweets = [] try : recd_tweets = self . api . search ( q = self . query , count = self . tweet_count_max ) if not recd_tweets : pass for tweet in recd_tweets : parsed_tweet = {} parsed_tweet [ 'text' ] = tweet . text parsed_tweet [ 'user' ] = tweet . user . screen_name if self . with_sentiment == 1 : parsed_tweet [ 'sentiment' ] = self . get_tweet_sentiment ( tweet . text ) else : parsed_tweet [ 'sentiment' ] = 'unavailable' if tweet . retweet_count > 0 and self . retweets_only == 1 : if parsed_tweet not in tweets : tweets . append ( parsed_tweet ) elif not self . retweets_only : if parsed_tweet not in tweets : tweets . append ( parsed_tweet ) return tweets except tweepy . TweepError as e : print ( \"Error : \" + str ( e ))","title":"Query Tweeter, generate categorical results, populate a list of dictionaries"},{"location":"Sentiment_Analysis_with_Twitter/#query-tweeter-generate-categorical-results-populate-a-dictionary-of-lists-write-files-compute-statistics","text":"Pointers: Scope the queries: keywords, dates. Generate categorical results with sentiment analysis. Generate a dictionary of lists. Write a file for each candidate (not pandas involved); the list. Enrich each tweet for each candidate with sentiment analysis and the mean values; the list. Build a list of all sentiment analysis. With the dictionary of lists, sort the mean values and rank the keywords. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 import tweepy from textblob import TextBlob #French adaptor from textblob_fr import PatternTagger , PatternAnalyzer import numpy as np import operator # Step 1 - Authenticate consumer_key = 'CONSUMER_KEY_HERE' consumer_secret = 'CONSUMER_SECRET_HERE' access_token = 'ACCESS_TOKEN_HERE' access_token_secret = 'ACCESS_TOKEN_SECRET_HERE' auth = tweepy . OAuthHandler ( consumer_key , consumer_secret ) auth . set_access_token ( access_token , access_token_secret ) api = tweepy . API ( auth ) #Step 2 - Prepare query features #List of candidates to French Republicans Primary Elections candidates_names = [ 'Sarkozy' , 'Kosciusko' , 'Cope' , 'Juppe' , 'Fillon' , 'Le Maire' , 'Poisson' ] #Hashtag related to the debate name_of_debate = \"PrimaireLeDebat\" #Date of the debate : October 13th since_date = \"2016-10-13\" until_date = \"2016-10-14\" #Step 2b - Function of labelisation of analysis def get_label ( analysis , threshold = 0 ): if analysis . sentiment [ 0 ] > threshold : return 'Positive' else : return 'Negative' #Step 3 - Retrieve Tweets and Save Them all_polarities = dict () for candidate in candidates_names : this_candidate_polarities = [] #Get the tweets about the debate and the candidate between the dates this_candidate_tweets = api . search ( q = [ name_of_debate , candidate ], count = 100 , since = since_date , until = until_date ) #Save the tweets in csv with open ( ' %s _tweets.csv' % candidate , 'wb' ) as this_candidate_file : this_candidate_file . write ( 'tweet,sentiment_label \\n ' ) for tweet in this_candidate_tweets : analysis = TextBlob ( tweet . text , pos_tagger = PatternTagger (), analyzer = PatternAnalyzer ()) #Get the label corresponding to the sentiment analysis this_candidate_polarities . append ( analysis . sentiment [ 0 ]) this_candidate_file . write ( ' %s , %s \\n ' % ( tweet . text . encode ( 'utf8' ), get_label ( analysis ))) #Save the mean for final results all_polarities [ candidate ] = np . mean ( this_candidate_polarities ) #Step bonus - Print a Result sorted_analysis = sorted ( all_polarities . items (), key = operator . itemgetter ( 1 ), reverse = True ) print 'Mean Sentiment Polarity in descending order :' for candidate , polarity in sorted_analysis : print ' %s : %0.3f ' % ( candidate , polarity )","title":"Query Tweeter, generate categorical results, populate a dictionary of lists, write files, compute statistics"},{"location":"Time_Series_Analysis/","text":"Foreword Code snippets and excerpts from the tutorial. Python 3. From DataCamp. With Jupyter Notebook and the In [ ] Out [ ] format. Approach \u00b6 Get Google Trends data of keywords such as \u2018diet\u2019 and \u2018gym\u2019 and see how they vary over time while learning about trends and seasonality in time series data. Source the data Wrangle the data Exploratory Data Analysis Trends and seasonality in time series data Identifying Trends Seasonal patterns First Order Differencing Periodicity and Autocorrelation Importing Packages and the Data \u00b6 The data are from Google Trends . 1 2 3 4 5 6 7 8 9 # Import the packages import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns % matplotlib inline # Switch to the Seaborn defaults sns . set () 1 2 3 4 # Import the data # Check out the first rows df = pd . read_csv ( 'multiTimeline.csv' , skiprows = 1 ) df . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Month diet: (Worldwide) gym: (Worldwide) finance: (Worldwide) 0 2004-01 100 31 48 1 2004-02 75 26 49 2 2004-03 67 24 47 1 2 # Check out the data types, number of rows and more df . info () 1 2 3 4 5 6 7 8 9 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 168 entries, 0 to 167 Data columns (total 4 columns): Month 168 non-null object diet: (Worldwide) 168 non-null int64 gym: (Worldwide) 168 non-null int64 finance: (Worldwide) 168 non-null int64 dtypes: int64(3), object(1) memory usage: 5.3+ KB Wrangle the Data \u00b6 Rename the columns of the DataFrame df so that they have no whitespaces in them. 1 2 df . columns = [ 'month' , 'diet' , 'gym' , 'finance' ] df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } month diet gym finance 0 2004-01 100 31 48 1 2004-02 75 26 49 2 2004-03 67 24 47 3 2004-04 70 22 48 4 2004-05 72 22 43 Turn the month column into a DateTime data type (vs. object ). 1 df . month = pd . to_datetime ( df . month ) Make it the index of the DataFrame. Include the inplace argument when setting the index of the DataFrame df so that we alter the original index and set it to the month column. 1 2 df . set_index ( 'month' , inplace = True ) df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } diet gym finance month 2004-01-01 100 31 48 2004-02-01 75 26 49 2004-03-01 67 24 47 2004-04-01 70 22 48 2004-05-01 72 22 43 Exploratory Data Analysis (EDA) \u00b6 Use a built-in pandas visualization method .plot () to plot the data. Specify the label on the x-axis. 1 2 df . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) plt . xlabel ( 'Year' , fontsize = 20 ); A value of 100 is the peak popularity for the term. A value of 50 means that the term is half as popular. Likewise a score of 0 means the term was less than 1% as popular as the peak. Plot one column. 1 2 df [[ 'diet' ]] . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) plt . xlabel ( 'Year' , fontsize = 20 ); Trends and Seasonality in Time Series \u00b6 Identifying Trends in Time Series \u00b6 Take a rolling average to remove the seasonality and see the trend. 12 months for example (before and after each point). 1 2 3 4 5 6 7 8 9 # Extract one column, # but do not create a Series with df['diet'] diet = df [[ 'diet' ]] # Chain: rolling, avg, plot diet . rolling ( 12 ) . mean () . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) # Plot plt . xlabel ( 'Year' , fontsize = 20 ) 1 &lt;matplotlib.text.Text at 0x7f3c0630c240&gt; 1 2 3 4 5 6 7 8 # Another column gym = df [[ 'gym' ]] # Chain gym . rolling ( 12 ) . mean () . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) # Plot plt . xlabel ( 'Year' , fontsize = 20 ) 1 &lt;matplotlib.text.Text at 0x7f3c0da837f0&gt; 1 2 3 4 5 6 7 8 # Create a new df with both df_rm = pd . concat ([ diet . rolling ( 12 ) . mean (), gym . rolling ( 12 ) . mean ()], axis = 1 ) # Chain df_rm . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) # Plot plt . xlabel ( 'Year' , fontsize = 20 ) 1 &lt;matplotlib.text.Text at 0x7f3c0621c7f0&gt; Seasonal Patterns in Time Series \u00b6 We can remove the trend from the time series by subtracting the rolling mean from the original signal, leaving the seasonality only and turning the data into a stationary time series (such as mean and variance don\u2019t change over time). Many time series forecasting methods are based on the assumption that the time series is approximately stationary. Another way to remove the trend is called \u201cdifferencing\u201d. First-order differencing \u00b6 Difference between one data point and the one before it. Second-order differencing means that we would be looking at the difference between one data point and the two that precede it. More on differencing . 1 2 3 4 5 # Differencing diet . diff () . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) # Plot plt . xlabel ( 'Year' , fontsize = 20 ); Periodicity and Autocorrelation \u00b6 A time series is periodic if it repeats itself at equally spaced intervals, say, every 12 months. Yet another way of thinking about this is that the time series is correlated with itself shifted by 12 months. That means that, if we took the time series and moved it 12 months backwards or forwards, it would map onto itself in some way: autocorrelation. A Word about Correlation \u00b6 1 2 3 4 5 6 7 from sklearn import datasets iris = datasets . load_iris () df_iris = pd . DataFrame ( data = np . c_ [ iris [ 'data' ], iris [ 'target' ]], columns = iris [ 'feature_names' ] + [ 'target' ]) df_iris . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) target 0 5.1 3.5 1.4 0.2 0.0 1 4.9 3.0 1.4 0.2 0.0 2 4.7 3.2 1.3 0.2 0.0 1 2 sns . lmplot ( x = 'sepal length (cm)' , y = 'sepal width (cm)' , fit_reg = False , data = df_iris ) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7f3c060fb5f8&gt; 1 2 sns . lmplot ( x = 'sepal length (cm)' , y = 'sepal width (cm)' , fit_reg = True , data = df_iris ); 1 2 sns . lmplot ( x = 'sepal length (cm)' , y = 'sepal width (cm)' , fit_reg = False , data = df_iris , hue = 'target' ) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7f3c060b7438&gt; 1 df_iris . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) target sepal length (cm) 1.000000 -0.109369 0.871754 0.817954 0.782561 sepal width (cm) -0.109369 1.000000 -0.420516 -0.356544 -0.419446 petal length (cm) 0.871754 -0.420516 1.000000 0.962757 0.949043 petal width (cm) 0.817954 -0.356544 0.962757 1.000000 0.956464 target 0.782561 -0.419446 0.949043 0.956464 1.000000 1 df_iris . groupby ([ 'target' ]) . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } petal length (cm) petal width (cm) sepal length (cm) sepal width (cm) target 0.0 petal length (cm) 1.000000 0.306308 0.263874 0.176695 petal width (cm) 0.306308 1.000000 0.279092 0.279973 sepal length (cm) 0.263874 0.279092 1.000000 0.746780 sepal width (cm) 0.176695 0.279973 0.746780 1.000000 1.0 petal length (cm) 1.000000 0.786668 0.754049 0.560522 petal width (cm) 0.786668 1.000000 0.546461 0.663999 sepal length (cm) 0.754049 0.546461 1.000000 0.525911 sepal width (cm) 0.560522 0.663999 0.525911 1.000000 2.0 petal length (cm) 1.000000 0.322108 0.864225 0.401045 petal width (cm) 0.322108 1.000000 0.281108 0.537728 sepal length (cm) 0.864225 0.281108 1.000000 0.457228 sepal width (cm) 0.401045 0.537728 0.457228 1.000000 Periodicity and Autocorrelation (continued) \u00b6 The time series again. 1 2 df . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) plt . xlabel ( 'Year' , fontsize = 20 ) 1 &lt;matplotlib.text.Text at 0x7f3c062fd390&gt; 1 df . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } diet gym finance diet 1.000000 -0.100764 -0.034639 gym -0.100764 1.000000 -0.284279 finance -0.034639 -0.284279 1.000000 diet and gym are negatively correlated. However, from looking at the times series, it looks as though their seasonal components would be positively correlated and their trends negatively correlated. The actual correlation coefficient is actually capturing both of those. 1 2 3 # first-order differences df . diff () . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) plt . xlabel ( 'Year' , fontsize = 20 ) 1 &lt;matplotlib.text.Text at 0x7f3c05fcfac8&gt; diet and gym are incredibly correlated once we remove the trend. 1 df . diff () . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } diet gym finance diet 1.000000 0.758707 0.373828 gym 0.758707 1.000000 0.301111 finance 0.373828 0.301111 1.000000 Autocorrelation \u00b6 Autocorrelation of the \u2018diet\u2019 series: on the x-axis, we have the lag and on the y-axis, we have how correlated the time series is with itself at that lag. So, this means that if the original time series repeats itself every two days, we would expect to see a spike in the autocorrelation function at 2 days. 1 pd . plotting . autocorrelation_plot ( diet ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3c05f587b8&gt; This is 12 months at which we have this huge peak in correlation. We have another peak at a 24 month interval, where it\u2019s also correlated with itself. We have another peak at 36, but as we move further away, there\u2019s less and less of a correlation. The dotted lines in the above plot actually tell us about the statistical significance of the correlation. Forecasts, ARIMA\u2026 \u00b6 Use ARIMA modeling to make some time series forecasts as to what these search trends will look like over the coming years.","title":"Time Series Analysis"},{"location":"Time_Series_Analysis/#importing-packages-and-the-data","text":"The data are from Google Trends . 1 2 3 4 5 6 7 8 9 # Import the packages import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns % matplotlib inline # Switch to the Seaborn defaults sns . set () 1 2 3 4 # Import the data # Check out the first rows df = pd . read_csv ( 'multiTimeline.csv' , skiprows = 1 ) df . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Month diet: (Worldwide) gym: (Worldwide) finance: (Worldwide) 0 2004-01 100 31 48 1 2004-02 75 26 49 2 2004-03 67 24 47 1 2 # Check out the data types, number of rows and more df . info () 1 2 3 4 5 6 7 8 9 &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 168 entries, 0 to 167 Data columns (total 4 columns): Month 168 non-null object diet: (Worldwide) 168 non-null int64 gym: (Worldwide) 168 non-null int64 finance: (Worldwide) 168 non-null int64 dtypes: int64(3), object(1) memory usage: 5.3+ KB","title":"Importing Packages and the Data"},{"location":"Time_Series_Analysis/#wrangle-the-data","text":"Rename the columns of the DataFrame df so that they have no whitespaces in them. 1 2 df . columns = [ 'month' , 'diet' , 'gym' , 'finance' ] df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } month diet gym finance 0 2004-01 100 31 48 1 2004-02 75 26 49 2 2004-03 67 24 47 3 2004-04 70 22 48 4 2004-05 72 22 43 Turn the month column into a DateTime data type (vs. object ). 1 df . month = pd . to_datetime ( df . month ) Make it the index of the DataFrame. Include the inplace argument when setting the index of the DataFrame df so that we alter the original index and set it to the month column. 1 2 df . set_index ( 'month' , inplace = True ) df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } diet gym finance month 2004-01-01 100 31 48 2004-02-01 75 26 49 2004-03-01 67 24 47 2004-04-01 70 22 48 2004-05-01 72 22 43","title":"Wrangle the Data"},{"location":"Time_Series_Analysis/#exploratory-data-analysis-eda","text":"Use a built-in pandas visualization method .plot () to plot the data. Specify the label on the x-axis. 1 2 df . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) plt . xlabel ( 'Year' , fontsize = 20 ); A value of 100 is the peak popularity for the term. A value of 50 means that the term is half as popular. Likewise a score of 0 means the term was less than 1% as popular as the peak. Plot one column. 1 2 df [[ 'diet' ]] . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) plt . xlabel ( 'Year' , fontsize = 20 );","title":"Exploratory Data Analysis (EDA)"},{"location":"Time_Series_Analysis/#trends-and-seasonality-in-time-series","text":"","title":"Trends and Seasonality in Time Series"},{"location":"Time_Series_Analysis/#identifying-trends-in-time-series","text":"Take a rolling average to remove the seasonality and see the trend. 12 months for example (before and after each point). 1 2 3 4 5 6 7 8 9 # Extract one column, # but do not create a Series with df['diet'] diet = df [[ 'diet' ]] # Chain: rolling, avg, plot diet . rolling ( 12 ) . mean () . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) # Plot plt . xlabel ( 'Year' , fontsize = 20 ) 1 &lt;matplotlib.text.Text at 0x7f3c0630c240&gt; 1 2 3 4 5 6 7 8 # Another column gym = df [[ 'gym' ]] # Chain gym . rolling ( 12 ) . mean () . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) # Plot plt . xlabel ( 'Year' , fontsize = 20 ) 1 &lt;matplotlib.text.Text at 0x7f3c0da837f0&gt; 1 2 3 4 5 6 7 8 # Create a new df with both df_rm = pd . concat ([ diet . rolling ( 12 ) . mean (), gym . rolling ( 12 ) . mean ()], axis = 1 ) # Chain df_rm . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) # Plot plt . xlabel ( 'Year' , fontsize = 20 ) 1 &lt;matplotlib.text.Text at 0x7f3c0621c7f0&gt;","title":"Identifying Trends in Time Series"},{"location":"Time_Series_Analysis/#seasonal-patterns-in-time-series","text":"We can remove the trend from the time series by subtracting the rolling mean from the original signal, leaving the seasonality only and turning the data into a stationary time series (such as mean and variance don\u2019t change over time). Many time series forecasting methods are based on the assumption that the time series is approximately stationary. Another way to remove the trend is called \u201cdifferencing\u201d.","title":"Seasonal Patterns in Time Series"},{"location":"Time_Series_Analysis/#first-order-differencing","text":"Difference between one data point and the one before it. Second-order differencing means that we would be looking at the difference between one data point and the two that precede it. More on differencing . 1 2 3 4 5 # Differencing diet . diff () . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) # Plot plt . xlabel ( 'Year' , fontsize = 20 );","title":"First-order differencing"},{"location":"Time_Series_Analysis/#periodicity-and-autocorrelation","text":"A time series is periodic if it repeats itself at equally spaced intervals, say, every 12 months. Yet another way of thinking about this is that the time series is correlated with itself shifted by 12 months. That means that, if we took the time series and moved it 12 months backwards or forwards, it would map onto itself in some way: autocorrelation.","title":"Periodicity and Autocorrelation"},{"location":"Time_Series_Analysis/#a-word-about-correlation","text":"1 2 3 4 5 6 7 from sklearn import datasets iris = datasets . load_iris () df_iris = pd . DataFrame ( data = np . c_ [ iris [ 'data' ], iris [ 'target' ]], columns = iris [ 'feature_names' ] + [ 'target' ]) df_iris . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) target 0 5.1 3.5 1.4 0.2 0.0 1 4.9 3.0 1.4 0.2 0.0 2 4.7 3.2 1.3 0.2 0.0 1 2 sns . lmplot ( x = 'sepal length (cm)' , y = 'sepal width (cm)' , fit_reg = False , data = df_iris ) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7f3c060fb5f8&gt; 1 2 sns . lmplot ( x = 'sepal length (cm)' , y = 'sepal width (cm)' , fit_reg = True , data = df_iris ); 1 2 sns . lmplot ( x = 'sepal length (cm)' , y = 'sepal width (cm)' , fit_reg = False , data = df_iris , hue = 'target' ) 1 &lt;seaborn.axisgrid.FacetGrid at 0x7f3c060b7438&gt; 1 df_iris . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) target sepal length (cm) 1.000000 -0.109369 0.871754 0.817954 0.782561 sepal width (cm) -0.109369 1.000000 -0.420516 -0.356544 -0.419446 petal length (cm) 0.871754 -0.420516 1.000000 0.962757 0.949043 petal width (cm) 0.817954 -0.356544 0.962757 1.000000 0.956464 target 0.782561 -0.419446 0.949043 0.956464 1.000000 1 df_iris . groupby ([ 'target' ]) . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } petal length (cm) petal width (cm) sepal length (cm) sepal width (cm) target 0.0 petal length (cm) 1.000000 0.306308 0.263874 0.176695 petal width (cm) 0.306308 1.000000 0.279092 0.279973 sepal length (cm) 0.263874 0.279092 1.000000 0.746780 sepal width (cm) 0.176695 0.279973 0.746780 1.000000 1.0 petal length (cm) 1.000000 0.786668 0.754049 0.560522 petal width (cm) 0.786668 1.000000 0.546461 0.663999 sepal length (cm) 0.754049 0.546461 1.000000 0.525911 sepal width (cm) 0.560522 0.663999 0.525911 1.000000 2.0 petal length (cm) 1.000000 0.322108 0.864225 0.401045 petal width (cm) 0.322108 1.000000 0.281108 0.537728 sepal length (cm) 0.864225 0.281108 1.000000 0.457228 sepal width (cm) 0.401045 0.537728 0.457228 1.000000","title":"A Word about Correlation"},{"location":"Time_Series_Analysis/#periodicity-and-autocorrelation-continued","text":"The time series again. 1 2 df . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) plt . xlabel ( 'Year' , fontsize = 20 ) 1 &lt;matplotlib.text.Text at 0x7f3c062fd390&gt; 1 df . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } diet gym finance diet 1.000000 -0.100764 -0.034639 gym -0.100764 1.000000 -0.284279 finance -0.034639 -0.284279 1.000000 diet and gym are negatively correlated. However, from looking at the times series, it looks as though their seasonal components would be positively correlated and their trends negatively correlated. The actual correlation coefficient is actually capturing both of those. 1 2 3 # first-order differences df . diff () . plot ( figsize = ( 20 , 10 ), linewidth = 5 , fontsize = 20 ) plt . xlabel ( 'Year' , fontsize = 20 ) 1 &lt;matplotlib.text.Text at 0x7f3c05fcfac8&gt; diet and gym are incredibly correlated once we remove the trend. 1 df . diff () . corr () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } diet gym finance diet 1.000000 0.758707 0.373828 gym 0.758707 1.000000 0.301111 finance 0.373828 0.301111 1.000000","title":"Periodicity and Autocorrelation (continued)"},{"location":"Time_Series_Analysis/#autocorrelation","text":"Autocorrelation of the \u2018diet\u2019 series: on the x-axis, we have the lag and on the y-axis, we have how correlated the time series is with itself at that lag. So, this means that if the original time series repeats itself every two days, we would expect to see a spike in the autocorrelation function at 2 days. 1 pd . plotting . autocorrelation_plot ( diet ) 1 &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3c05f587b8&gt; This is 12 months at which we have this huge peak in correlation. We have another peak at a 24 month interval, where it\u2019s also correlated with itself. We have another peak at 36, but as we move further away, there\u2019s less and less of a correlation. The dotted lines in the above plot actually tell us about the statistical significance of the correlation.","title":"Autocorrelation"},{"location":"Time_Series_Analysis/#forecasts-arima","text":"Use ARIMA modeling to make some time series forecasts as to what these search trends will look like over the coming years.","title":"Forecasts, ARIMA..."},{"location":"Vectors and Arrays (Linear Algebra)/","text":"Foreword Code snippets and excerpts from the tutorial. Python 3. From DataCamp. With Jupyter Notebook and the In [ ] Out [ ] format. The Essentials of Numpy: ndarray \u00b6 1 2 3 4 5 % pylab inline import numpy as np myArray = np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ]], dtype = np . int64 ) print ( myArray ) 1 2 3 Populating the interactive namespace from numpy and matplotlib [[1 2 3] [4 5 6]] 1 2 # Inspect the data of `myArray` print ( myArray . data ) 1 &lt;memory at 0x7f7bbcb71a68&gt; 1 2 # Inspect the data type of `myArray` print ( myArray . dtype ) 1 int64 1 2 # Inspect the shape of `myArray` print ( myArray . shape ) 1 (2, 3) 1 2 # Inspect the size of `myArray` print ( myArray . size ) 1 6 Convert with astype() . Handle complex numbers. 1 2 # Return the real part of `myArray` elements np . real ( myArray ) 1 2 array([[1, 2, 3], [4, 5, 6]]) 1 2 # Return the imaginary part of `myArray` elements np . imag ( myArray ) 1 2 array([[0, 0, 0], [0, 0, 0]]) 1 2 # Return a real array if the complex parts are close to 0 np . real_if_close ( myArray , tol = 1000 ) 1 2 array([[1, 2, 3], [4, 5, 6]]) 1 2 # Cast `myArray` to float np . cast [ 'f' ]( myArray ) 1 2 array([[ 1., 2., 3.], [ 4., 5., 6.]], dtype=float32) 1 2 # Cast `myArray` to integer np . cast [ 'q' ]( myArray ) 1 2 array([[1, 2, 3], [4, 5, 6]], dtype=int64) 'b' for int8. 'c' for |S21; character or string. 'e' for float16 'f' for float32. 'g' for float128 'h' for int16, integer. 'd' for digits. 'i' for int32, integer. 'l' for long. 'm' for timedelta64. 'q' for int64, integer. Array Creation \u00b6 1 2 # Create a 2X2 identity matrix with `np.eye()` np . eye ( 2 ) 1 2 array([[ 1., 0.], [ 0., 1.]]) 1 np . eye ( 2 , 4 ) 1 2 array([[ 1., 0., 0., 0.], [ 0., 1., 0., 0.]]) 1 np . eye ( 4 , 2 ) 1 2 3 4 array([[ 1., 0.], [ 0., 1.], [ 0., 0.], [ 0., 0.]]) 1 2 # Create a 3X3 identity matrix with `np.identity()` np . identity ( 3 ) 1 2 3 array([[ 1., 0., 0.], [ 0., 1., 0.], [ 0., 0., 1.]]) 1 2 # Uniformly spaced values: spacing; from 2 to 8 (excluded) by 2 np . arange ( 3 , 8 , 2 ) 1 array([3, 5, 7]) 1 2 # Uniformly spaced values: number of samples; from 2 to 3 in 5 intervals np . linspace ( 2 , 3 , 5 ) 1 array([ 2. , 2.25, 2.5 , 2.75, 3. ]) 1 2 # Uniformly spaced values: logarithmic spacing; from 2 to 3 in 4 intervals np . logspace ( 2 , 3 , 4 ) 1 array([ 100. , 215.443469 , 464.15888336, 1000. ]) Indexing and Slicing \u00b6 1 print ( myArray ) 1 2 [[1 2 3] [4 5 6]] 1 2 # Slice `myArray` at index 0 and 1 print ( myArray [ 0 , 0 : 2 ]) 1 [1 2] 1 2 # Slice `my_2dArray` at row 0 and 1, column 1 print ( myArray [ 0 : 2 , 1 ]) 1 [2 5] 1 2 # Slice `my_3dArray` at row 1 print ( myArray [ 1 , ... ]) 1 [4 5 6] 1 2 # Boolean indexing: only values < 3 print ( myArray [ myArray < 3 ]) 1 [1 2] 1 2 # Fancy indexing; r-c coordinates print ( myArray [[ 1 , 0 , 1 , 0 ],[ 0 , 1 , 2 , 0 ]]) 1 [4 2 6 1] Meshgrid Index tricks: np.mgrid() , np.ogrid() , np.r and np.c . Instead of np.concatenate() . np.meshgrid() . 1 2 3 4 5 6 # Create a dense mesh grid; from to (excluded) by # takes two 1D arrays and produces two 2D matrices # corresponding to all pairs of (x, y) in the two arrays # the dimensions and number of the output arrays are equal # to the number of indexing dimensions np . mgrid [ 1 : 11 : 2 , - 12 : - 3 : 3 ] 1 2 3 4 5 6 7 8 9 10 11 array([[[ 1, 1, 1], [ 3, 3, 3], [ 5, 5, 5], [ 7, 7, 7], [ 9, 9, 9]], [[-12, -9, -6], [-12, -9, -6], [-12, -9, -6], [-12, -9, -6], [-12, -9, -6]]]) 1 2 # Create an open meshgrid; from to (excluded) by np . ogrid [ 1 : 11 : 2 , - 12 : - 3 : 3 ] 1 2 3 4 5 [array([[1], [3], [5], [7], [9]]), array([[-12, -9, -6]])] 1 2 # Stack arrays vertically np . r_ [ 3 , [ 0 ] * 5 , - 1 : 1 : 10j ] 1 2 3 array([ 3. , 0. , 0. , 0. , 0. , 0. , -1. , -0.77777778, -0.55555556, -0.33333333, -0.11111111, 0.11111111, 0.33333333, 0.55555556, 0.77777778, 1. ]) 1 2 3 array = np . ones ( 2 ) my2Array = np . array ([[ 1 , 2 , 3 , 4 ],[ 5 , 6 , 7 , 8 ]]) print ( array ) 1 [ 1. 1.] 1 print ( my2Array ) 1 2 [[1 2 3 4] [5 6 7 8]] 1 2 # Stack arrays horizontally (left-right) np . c_ [ array ] 1 2 array([[ 1.], [ 1.]]) 1 np . c_ [ my2Array ] 1 2 array([[1, 2, 3, 4], [5, 6, 7, 8]]) 1 np . c_ [ array , my2Array ] 1 2 array([[ 1., 1., 2., 3., 4.], [ 1., 5., 6., 7., 8.]]) 1 2 array2 = np . array ([[ 1 , 2 , 3 , 4 ], [ 1 , 2 , 3 , 4 ]]) print ( array2 ) 1 2 [[1 2 3 4] [1 2 3 4]] 1 np . r_ [ array2 ] 1 2 array([[1, 2, 3, 4], [1, 2, 3, 4]]) 1 np . r_ [ my2Array ] 1 2 array([[1, 2, 3, 4], [5, 6, 7, 8]]) 1 np . r_ [ array2 , my2Array ] 1 2 3 4 array([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [5, 6, 7, 8]]) Other indexing/slicing 1 2 3 # Initialize a 2D array my_2dArray = np . array ([[ 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 ]], dtype = np . int64 ) print ( my_2dArray ) 1 2 [[1 2 3 4] [5 6 7 8]] 1 2 3 4 # Select values from `my_2dArray` # argument 1: select # argument 2: transform np . select ([ my_2dArray < 4 ], [ my_2dArray ]) 1 2 array([[1, 2, 3, 0], [0, 0, 0, 0]]) 1 np . select ([ my_2dArray < 4 ], [ my_2dArray * 2 ]) 1 2 array([[2, 4, 6, 0], [0, 0, 0, 0]]) Shape Selection and Manipulation \u00b6 Stack. Split. Transpose. Change shape. 1 2 myArray = np . array ([[ 1 , 2 , 3 , 4 ]]) my_2dArray = np . array ([[ 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 ]]) 1 print ( myArray ) 1 [[1 2 3 4]] 1 print ( my_2dArray ) 1 2 [[1 2 3 4] [5 6 7 8]] 1 2 # Stack arrays horizontally (column-wise) print ( np . hstack (( np . eye ( 2 ), my_2dArray ))) 1 2 [[ 1. 0. 1. 2. 3. 4.] [ 0. 1. 5. 6. 7. 8.]] 1 2 # Stack arrays vertically (row-wise) print ( np . vstack (( myArray , my_2dArray ))) 1 2 3 [[1 2 3 4] [1 2 3 4] [5 6 7 8]] 1 2 # Split the array horizontally at the 2nd index (left-right) print ( np . hsplit ( my_2dArray , 2 )) 1 2 3 [array([[1, 2], [5, 6]]), array([[3, 4], [7, 8]])] 1 2 # Split the array vertically at the 2nd index (top-bottom) print ( np . vsplit ( my_2dArray , 2 )) 1 [array([[1, 2, 3, 4]]), array([[5, 6, 7, 8]])] 1 2 # Permute `myArray` dimensions print ( np . transpose ( myArray )) 1 2 3 4 [[1] [2] [3] [4]] 1 2 my_3dArray = np . array ([[[ 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 ]], [[ 1 , 2 , 3 , 4 ], [ 9 , 10 , 11 , 12 ]]]) print ( my_3dArray ) 1 2 3 4 5 [[[ 1 2 3 4] [ 5 6 7 8]] [[ 1 2 3 4] [ 9 10 11 12]]] 1 2 # Flatten `my_3dArray` print ( my_3dArray . flatten ()) 1 [ 1 2 3 4 5 6 7 8 1 2 3 4 9 10 11 12] np.reshsape() vs np.resize() . 1 2 # Reshape but don't change the data print ( my_2dArray . reshape ( 4 , 2 )) 1 2 3 4 [[1 2] [3 4] [5 6] [7 8]] 1 2 # Resize to (6,4) print ( np . resize ( my_3dArray , ( 6 , 4 ))) 1 2 3 4 5 6 [[ 1 2 3 4] [ 5 6 7 8] [ 1 2 3 4] [ 9 10 11 12] [ 1 2 3 4] [ 5 6 7 8]] Vectorized functions (to \u2018loop\u2019 over an array, all items) 1 2 3 4 5 6 7 8 9 10 11 12 13 # Define a function `myfunc` def myfunc ( a , b ): if a > b : return a - b else : return a + b # Vectorize `myfunc` vectorizedFunc = np . vectorize ( myfunc ) # Apply print ( myArray ) vectorizedFunc ( myArray , 2 ) 1 2 3 4 5 6 7 [[1 2 3 4]] array([[3, 4, 1, 2]]) np.angle() provides the angle of the elements of complex array elements, but also basic trigonometric, exponential or logarithmic functions. Linear Algebra With Scipy \u00b6 1 2 3 4 import scipy # Check package version scipy . __version__ 1 '0.19.0' Vectors and Matrices: The Basics \u00b6 1 2 3 # Create a vector myVector = np . array ([ 1 , 2 , 3 , 4 ]) print ( myVector ) 1 [1 2 3 4] A matrix is a subclass of arrays. A matrix is always 2D. Both arrays and matrices have .T () . Only matrices have .H () and .I () . Matrix multiplication works differently from an element-wise array. T ** has different results for matrices and arrays. Sparse matrices have mostly zero elements, while the ones that have mostly non-zero elements are called dense matrices. scipy.linalg . scipy.sparse . 1 2 3 # Create a matrix myMatrix = np . matrix ( np . random . random (( 5 , 5 ))) print ( myMatrix ) 1 2 3 4 5 [[ 0.45409417 0.51518628 0.21891525 0.4827949 0.11485953] [ 0.26387125 0.27904581 0.27371679 0.81793744 0.03194194] [ 0.44758032 0.40043501 0.53270025 0.73481508 0.40994865] [ 0.26650523 0.47469863 0.77731378 0.33237448 0.0932401 ] [ 0.47477976 0.4054091 0.62060959 0.76708818 0.33732755]] 1 2 # Create a 2X2 identity matrix np . eye ( 3 , k = 1 ) 1 2 3 array([[ 0., 1., 0.], [ 0., 0., 1.], [ 0., 0., 0.]]) 1 2 # Create a 2x2 identity matrix np . mat ( np . identity ( 2 )) 1 2 matrix([[ 1., 0.], [ 0., 1.]]) 1 C = np . matrix ([[ 0.47332239 , 0.26149519 , 0. , 0.01665965 , 0.05914868 ], [ 0.24440216 , 0. , 0. , 0. , 0. ], [ 0. , 0. , 0.4320679 , 0.10501837 , 0. ], [ 0.32164578 , 0. , 0. , 0.10963973 , 0. ], [ 0.15023766 , 0.04764381 , 0. , 0. , 0.38244847 ], [ 0.08499095 , 0. , 0.0163261 , 0. , 0.27636168 ], [ 0. , 0.36569833 , 0.34968224 , 0. , 0.40275066 ], [ 0. , 0. , 0. , 0.40504002 , 0. ], [ 0.41632136 , 0.35405707 , 0.33020532 , 0.16344026 , 0. ], [ 0.04105013 , 0.26913226 , 0. , 0.00280266 , 0. ]]) 1 print ( C ) 1 2 3 4 5 6 7 8 9 10 [[ 0.47332239 0.26149519 0. 0.01665965 0.05914868] [ 0.24440216 0. 0. 0. 0. ] [ 0. 0. 0.4320679 0.10501837 0. ] [ 0.32164578 0. 0. 0.10963973 0. ] [ 0.15023766 0.04764381 0. 0. 0.38244847] [ 0.08499095 0. 0.0163261 0. 0.27636168] [ 0. 0.36569833 0.34968224 0. 0.40275066] [ 0. 0. 0. 0.40504002 0. ] [ 0.41632136 0.35405707 0.33020532 0.16344026 0. ] [ 0.04105013 0.26913226 0. 0.00280266 0. ]] 1 from scipy import linalg , sparse 1 2 3 # Compressed Sparse Row matrix # fast access to rows and columns sparse . csr_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements in Compressed Sparse Row format&gt; 1 2 3 # Compressed Sparse Column matrix # fast access to rows and columns sparse . csc_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements in Compressed Sparse Column format&gt; 1 2 3 # Dictionary Of Keys matrix # fill the matrix with numbers one by one sparse . dok_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements in Dictionary Of Keys format&gt; 1 2 3 # block Sparse Row matrices # constructing the matrix from blocks of smaller matrices sparse . bsr_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements (blocksize = 1x1) in Block Sparse Row format&gt; 1 2 3 # COOrdinate format sparse matrices # fill the matrix with numbers one by one sparse . coo_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements in COOrdinate format&gt; 1 2 3 # DIAgonal storage sparse matrices # initialize the matrix with an array as the diagonal sparse . dia_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 47 stored elements (13 diagonals) in DIAgonal format&gt; 1 2 3 # Row-based linked list sparse matrices # sliced-based matrices sparse . lil_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements in LInked List format&gt; 1 2 3 vector1 = np . array ([ 1 , 2 , 3 ]) vector2 = np . array ([ 2 , 3 , 4 ]) print ( vector1 ) 1 [1 2 3] 1 print ( vector2 ) 1 [2 3 4] 1 2 3 4 5 # Addition of `vector1` and `vector2` vector3 = vector1 + vector2 # Print `vector3` print ( vector3 ) 1 [3 5 7] 1 2 3 4 5 # Subtraction of `vector2` and `vector1` vector4 = vector2 - vector1 # print `vector4` print ( vector4 ) 1 [1 1 1] 1 2 3 4 5 # Dot product of `vector1` and `vector2` dotProduct = np . dot ( vector1 , vector2 ) # Print `dotProduct` print ( dotProduct ) 1 20 1 2 3 4 5 6 # Cross product of `vector1` and `vector2` # vector product in vector algebra; search the formula online crossProduct = np . cross ( vector1 , vector2 ) # Print `crossProduct` print ( crossProduct ) 1 [-1 2 -1] Matrices: Operations and Routines \u00b6 1 np . add ( vector1 , vector2 ) 1 array([3, 5, 7]) 1 np . subtract ( vector1 , vector2 ) 1 array([-1, -1, -1]) 1 np . divide ( vector1 , vector2 ) 1 array([ 0.5 , 0.66666667, 0.75 ]) 1 np . multiply ( vector1 , vector2 ) 1 array([ 2, 6, 12]) 1 2 3 # Vector dot product vectorDotProduct = np . vdot ( vector1 , vector2 ) print ( vectorDotProduct ) 1 20 1 2 3 # Inner product innerProduct = np . inner ( vector1 , vector2 ) print ( vectorDotProduct ) 1 20 1 2 3 # Outer product outerProduct = np . outer ( vector1 , vector2 ) print ( vectorDotProduct ) 1 20 1 2 3 4 matrix1 = np . matrix ([[ 0.47332239 , 0.26149519 ], [ 0.86380934 , 0.01665965 ]]) matrix2 = np . matrix ([[ 3 , 4 ], [ 5 , 6 ]]) print ( matrix1 ) 1 2 [[ 0.47332239 0.26149519] [ 0.86380934 0.01665965]] 1 print ( matrix2 ) 1 2 [[3 4] [5 6]] 1 2 3 # Tensor dot product tensorDotProduct = np . tensordot ( matrix1 , matrix2 ) print ( vectorDotProduct ) 1 20 1 2 3 # Kronecker product kronProduct = np . kron ( matrix1 , matrix2 ) print ( vectorDotProduct ) 1 20 1 print ( matrix1 ) 1 2 [[ 0.47332239 0.26149519] [ 0.86380934 0.01665965]] 1 2 3 4 # exponent linalg . expm ( matrix1 ) #linalg.expm2(matrix1) #linalg.expm3(matrix1) 1 2 array([[ 1.76478622, 0.34978586], [ 1.15546404, 1.15393687]]) 1 2 # logarithm linalg . logm ( matrix1 ) 1 2 array([[-0.54372715+0.89057597j, 0.24956103-0.77901846j], [ 0.82438668-2.57336825j, -0.97954865+2.25101668j]]) 1 2 # squared root linalg . sqrtm ( matrix1 ) 1 2 array([[ 0.62966832+0.15061317j, 0.21791187-0.1317467j ], [ 0.71983850-0.43520505j, 0.24911742+0.38068933j]]) 1 2 # lambda linalg . funm ( matrix1 , lambda x : x * x ) 1 2 array([[ 0.44991607, 0.12812795], [ 0.42325106, 0.22615953]]) 1 2 3 # transposition # make a new matrix whose rows are the columns of the original matrix1 . T 1 2 matrix([[ 0.47332239, 0.86380934], [ 0.26149519, 0.01665965]]) 1 np . transpose ( matrix1 ) 1 2 matrix([[ 0.47332239, 0.86380934], [ 0.26149519, 0.01665965]]) 1 2 3 # conjugate transposition # interchanges the row and column index for each matrix element matrix1 . H 1 2 matrix([[ 0.47332239, 0.86380934], [ 0.26149519, 0.01665965]]) 1 2 3 # inverse # matrix multiplied with the original matrix results in an identity matrix matrix1 . I 1 2 matrix([[-0.0764216 , 1.19953792], [ 3.96248993, -2.17123747]]) 1 linalg . inv ( matrix1 ) 1 2 array([[-0.0764216 , 1.19953792], [ 3.96248993, -2.17123747]]) 1 2 # cast an array matrix1 . A 1 2 array([[ 0.47332239, 0.26149519], [ 0.86380934, 0.01665965]]) 1 2 # retrieve the trace or sum of the elements on the main matrix diagonal np . trace ( matrix1 ) 1 0.48998204000000001 1 2 3 4 # retrieve the matrix rank or the number # of Singular Value Decomposition singular values # of an array that are greater than a certain threshold np . linalg . matrix_rank ( matrix1 ) 1 2 1 2 3 4 # norm of a matrix # number defined in terms of the entries of the matrix # how large the elements are linalg . norm ( matrix1 ) 1 1.0192438074758199 1 2 # matrix determinant linalg . det ( matrix1 ) 1 -0.21799660213251107 Solving system of Ax=b Ax=b , where A A is a square matrix and b b a general matrix. There are two methods to find x x . 1 2 3 A = np . matrix ([[ 0.35115177 , 0.79693272 ], [ 0.81264708 , 0.06853826 ]]) b = np . matrix ([[ 1. + 5.j , 0. + 2.j , 0. + 3.j ], [ 0. + 4.j , 0. + 5.j , 0. + 6.j ]]) print ( A ) 1 2 [[ 0.35115177 0.79693272] [ 0.81264708 0.06853826]] 1 print ( b ) 1 2 [[ 1.+5.j 0.+2.j 0.+3.j] [ 0.+4.j 0.+5.j 0.+6.j]] 1 2 # Dense matrix solver linalg . solve ( A , b ) 1 2 3 4 array([[-0.10991486+4.56259221j, 0.00000000+6.17037842j, 0.00000000+7.33850519j], [ 1.30324276+4.26364433j, 0.00000000-0.20922633j, 0.00000000+0.53087407j]]) 1 2 3 F = np . matrix ([[ 0. , 1. , 0. ], [ 0. , 0. , 1. ], [ 0. , 0. , 0. ]]) E = np . matrix ([[ 1 ],[ 2 ],[ 3 ]]) print ( F ) 1 2 3 [[ 0. 1. 0.] [ 0. 0. 1.] [ 0. 0. 0.]] 1 print ( E ) 1 2 3 [[1] [2] [3]] 1 2 # Linear least-square solver np . linalg . lstsq ( F , E ) 1 2 3 4 5 6 (matrix([[ 0.], [ 1.], [ 2.]]), matrix([], shape=(1, 0), dtype=float64), 2, array([ 1., 1., 0.])) For sparse matrices, linalg.spsolve() may solve the equation, otherwise, it might still be possible to obtain an approximate x x with the help of the linalg.lstsq() . Eigenvalues and Eigenvectors \u00b6 The eigenvalues and eigenvectors are important concepts in many computer vision and machine learning techniques: Principal Component Analysis (PCA) for dimensionality reduction. EigenFaces for face recognition . Consult the latter case for an illustration. Almost all vectors change direction, when they are multiplied by a matrix. However, certain resulting vectors maintain the same direction after the multiplication. These are the eigenvectors. Multiply an eigenvector by a matrix, and the resulting vector of that multiplication is equal to a multiplication of the original eigenvector with \\lambda \\lambda , the eigenvalue: Ax = \\lambda x Ax = \\lambda x Eigenvalue gives valuable information: whether one of the eigenvectors is stretched, shrunk, reversed, or left unchanged when multiplied by a matrix. 1 2 myMatrix = np . matrix ([[ 0.84790079 , 0.08996585 ], [ 0.66653841 , 0.94212726 ]]) print ( myMatrix ) 1 2 [[ 0.84790079 0.08996585] [ 0.66653841 0.94212726]] 1 2 3 4 5 6 7 8 # Solve eigenvalue problem la , v = linalg . eig ( myMatrix ) # Unpack eigenvalues l1 , l2 = la # First eigenvector v [:, 0 ] 1 array([-0.40641758, 0.91368745]) 1 2 # Second eigenvector v [:, 1 ] 1 array([-0.29036942, -0.95691463]) 1 2 # Or unpack eigenvalues with `eigvals()` linalg . eigvals ( myMatrix ) 1 array([ 0.64564412+0.j, 1.14438393+0.j]) 1 2 # laternative eigvals ( myMatrix ) 1 array([ 0.64564412, 1.14438393]) With sparse matrices, la, v = sparse.linalg.eigs(myMatrix,1) ; the number of eigenvalues and eigenvectors that has to be retrieved = 1. Singular Value Decomposition (SVD) \u00b6 SVD is useful for many tasks: data compression, noise reduction, and data analysis. SVD is closely linked to Principal Component Analysis (PCA), which is used for dimensionality reduction. Another link is one with data mining and natural language processing (NLP): Latent Semantic Indexing (LSI). It is a technique that is used in document retrieval and word similarity. Latent semantic indexing uses SVD to group documents to the concepts that could consist of different words found in those documents. Various words can be grouped into a concept. Also here, SVD reduces the noisy correlation between words and their documents, and it decreases the number of dimensions that the original data has. The singular value decomposition of a matrix A A is the decomposition or factorization of A A into the product of three matrices: A=U\u2217\u03a3\u2217V^t A=U\u2217\u03a3\u2217V^t . The size of the individual matrices is as follows given the matrix A A is of size M x N M x N : Matrix U U is of size M x M M x M Matrix V V is of size N x N N x N Matrix \\Sigma \\Sigma is of size M x N M x N The \u2217 \u2217 indicates that the matrices are multiplied and the t t in V^t V^t means that the matrix is transposed, which means that the rows and columns are interchanged. Simply stated, singular value decomposition provides a way to break a matrix into simpler, meaningful pieces. These pieces may contain some data we are interested in. 1 print ( myMatrix ) 1 2 [[ 0.84790079 0.08996585] [ 0.66653841 0.94212726]] 1 2 3 4 5 6 7 8 # Singular Value Decomposition U , s , Vh = linalg . svd ( myMatrix ) # Initialize `M` and `N` M , N = myMatrix . shape # Construct sigma matrix in SVD Sig = linalg . diagsvd ( s , M , N ) 1 2 3 print ( U ) print ( s ) print ( Vh ) 1 2 3 4 5 [[-0.53763961 -0.84317474] [-0.84317474 0.53763961]] [ 1.32147227 0.5591224 ] [[-0.7702571 -0.63773348] [-0.63773348 0.7702571 ]] 1 2 print ( M ) print ( N ) 1 2 2 2 1 print ( Sig ) 1 2 [[ 1.32147227 0. ] [ 0. 0.5591224 ]] With sparse matrices, use the sparse.linalg.svds() . Compress images with SVD \u00b6 1 2 3 4 5 6 % matplotlib inline # Import the necessary packages import numpy as np from scipy import linalg from skimage import data import matplotlib.pyplot as plt 1 2 3 4 5 # Get an image from `skimage` img = data . camera () print ( img ) print ( img . shape ) 1 2 3 4 5 6 7 8 [[156 157 160 ..., 152 152 152] [156 157 159 ..., 152 152 152] [158 157 156 ..., 152 152 152] ..., [121 123 126 ..., 121 113 111] [121 123 126 ..., 121 113 111] [121 123 126 ..., 121 113 111]] (512, 512) 1 2 3 4 fig = plt . figure ( figsize = ( 8 , 3 )) ax = fig . add_subplot ( 121 ) ax . imshow ( img , cmap = 'gray' ) plt . show () 1 2 # Check number of singular values linalg . svdvals ( imgarray([ 6.38689996e+04, 1.44910897e+04, 1.09561592e+04, 6.19958837e+03, 5.85460599e+03, 4.82514545e+03, 4.59023130e+03, 3.61148738e+03, 3.34731861e+03, 3.14349896e+03, 3.05262875e+03, 2.95922014e+03, 2.84709763e+03, 2.81972262e+03, 2.53580358e+03, 2.35379736e+03, 2.25234388e+03, 2.19445315e+03, 1.95347281e+03, 1.93643231e+03, 1.78576072e+03, 1.68444543e+03, 1.55985334e+03, 1.53124809e+03, 1.49461049e+03, 1.46783730e+03, 1.37841479e+03, 1.31705840e+03, 1.28469563e+03, 1.26983772e+03, 1.23258950e+03, 1.19028553e+03, 1.14311122e+03, 1.11896715e+03, 1.07893598e+03, 1.04322585e+03, 1.00915095e+03, 9.95390582e+02, 9.77961424e+02, 9.41174385e+02, 9.32201249e+02, 8.93615745e+02, 8.74195561e+02, 8.58051291e+02, 8.29598226e+02, 8.00811160e+02, 7.93729536e+02, 7.89373695e+02, 7.58404767e+02, 7.29609262e+02, 7.09087154e+02, 7.00077886e+02, 6.86673719e+02, 6.65400930e+02, 6.56677192e+02, 6.28475541e+02, 6.10557098e+02, 5.94000126e+02, 5.84294112e+02, 5.72429055e+02, 5.69451585e+02, 5.50921578e+02, 5.37266578e+02, 5.33291637e+02, 5.21789437e+02, 5.05141703e+02, 5.01052645e+02, 4.93184398e+02, 4.80118682e+02, 4.73384191e+02, 4.56418309e+02, 4.48913305e+02, 4.44146447e+02, 4.32995274e+02, 4.26315380e+02, 4.22328895e+02, 4.05541490e+02, 3.98653047e+02, 3.96319140e+02, 3.89453125e+02, 3.84647691e+02, 3.75627016e+02, 3.71488605e+02, 3.67691102e+02, 3.59979435e+02, 3.50653860e+02, 3.48018191e+02, 3.35741100e+02, 3.33256260e+02, 3.26076697e+02, 3.19055085e+02, 3.09630221e+02, 3.03809793e+02, 3.02834775e+02, 2.94473792e+02, 2.89237544e+02, 2.83072764e+02, 2.80221278e+02, 2.74752660e+02, 2.71946305e+02, 2.67137796e+02, 2.63076632e+02, 2.56422198e+02, 2.54502372e+02, 2.49312761e+02, 2.44629388e+02, 2.42104483e+02, 2.38784276e+02, 2.24177802e+02, 2.21962143e+02, 2.20585254e+02, 2.16305370e+02, 2.14023345e+02, 2.10191299e+02, 2.06326744e+02, 2.01216165e+02, 1.95901568e+02, 1.93425008e+02, 1.86544957e+02, 1.81946842e+02, 1.81111952e+02, 1.79250161e+02, 1.73406209e+02, 1.71851416e+02, 1.68149855e+02, 1.61459003e+02, 1.60960447e+02, 1.54019279e+02, 1.52120965e+02, 1.50570121e+02, 1.45586776e+02, 1.42319905e+02, 1.41079625e+02, 1.39402001e+02, 1.36894791e+02, 1.35479523e+02, 1.33651596e+02, 1.29473707e+02, 1.25074480e+02, 1.23799569e+02, 1.21554208e+02, 1.19267845e+02, 1.16142251e+02, 1.14798303e+02, 1.09566347e+02, 1.07809839e+02, 1.05206661e+02, 1.03096542e+02, 1.02101366e+02, 9.92918020e+01, 9.80967375e+01, 9.25471187e+01, 9.06671721e+01, 8.94885949e+01, 8.59407127e+01, 8.47271098e+01, 8.25043759e+01, 8.05678329e+01, 7.98244891e+01, 7.88264924e+01, 7.60557363e+01, 7.52551314e+01, 7.20841101e+01, 7.16497267e+01, 7.09295551e+01, 6.93447334e+01, 6.68699361e+01, 6.61087591e+01, 6.51986683e+01, 6.19754992e+01, 6.03605056e+01, 5.93183446e+01, 5.72723667e+01, 5.62244673e+01, 5.48748626e+01, 5.35303251e+01, 5.31190637e+01, 5.14073607e+01, 5.05882613e+01, 4.85873327e+01, 4.77033490e+01, 4.61730309e+01, 4.58253352e+01, 4.45738941e+01, 4.41688671e+01, 4.30565443e+01, 4.21824960e+01, 4.13096543e+01, 4.01687931e+01, 3.89251008e+01, 3.76938723e+01, 3.71696405e+01, 3.65261279e+01, 3.63225111e+01, 3.47286204e+01, 3.38767247e+01, 3.36300965e+01, 3.28077851e+01, 3.22430013e+01, 3.19168059e+01, 3.04258560e+01, 3.01029523e+01, 2.94482797e+01, 2.93136739e+01, 2.84675969e+01, 2.70583102e+01, 2.69171207e+01, 2.62988906e+01, 2.53912737e+01, 2.52678982e+01, 2.48858839e+01, 2.35476097e+01, 2.33100666e+01, 2.23100190e+01, 2.15793552e+01, 2.11961369e+01, 2.05803331e+01, 2.00864770e+01, 1.96897799e+01, 1.84825965e+01, 1.78147513e+01, 1.76346865e+01, 1.67939919e+01, 1.64216226e+01, 1.60543495e+01, 1.55344956e+01, 1.49332344e+01, 1.45289863e+01, 1.42587318e+01, 1.37963455e+01, 1.34972766e+01, 1.34093515e+01, 1.22216082e+01, 1.19781514e+01, 1.15231001e+01, 1.09781821e+01, 1.09187142e+01, 1.03661279e+01, 1.00838177e+01, 9.79683858e+00, 9.54913700e+00, 9.35377121e+00, 8.98307957e+00, 8.62827079e+00, 8.43304143e+00, 8.21026198e+00, 8.11055326e+00, 7.84205214e+00, 7.82091983e+00, 7.72211462e+00, 7.65176844e+00, 7.57527347e+00, 7.48948062e+00, 7.32714219e+00, 7.24843636e+00, 7.23134018e+00, 7.11545722e+00, 6.94245132e+00, 6.90872672e+00, 6.89105932e+00, 6.85271365e+00, 6.73119810e+00, 6.67101027e+00, 6.65355095e+00, 6.61537333e+00, 6.57919154e+00, 6.51264665e+00, 6.43529244e+00, 6.38642585e+00, 6.32124352e+00, 6.26921968e+00, 6.22470192e+00, 6.18684862e+00, 6.12487899e+00, 6.08056310e+00, 6.02142397e+00, 5.98369919e+00, 5.96324230e+00, 5.90521877e+00, 5.89164599e+00, 5.85948724e+00, 5.78142589e+00, 5.77436927e+00, 5.72763143e+00, 5.68593121e+00, 5.64079641e+00, 5.59691503e+00, 5.57872232e+00, 5.56560739e+00, 5.46793402e+00, 5.45802649e+00, 5.43835398e+00, 5.40609891e+00, 5.38649282e+00, 5.35337487e+00, 5.32541786e+00, 5.26717335e+00, 5.22386437e+00, 5.18279263e+00, 5.15811624e+00, 5.11921277e+00, 5.07521779e+00, 5.06576107e+00, 5.02393795e+00, 4.98303961e+00, 4.93214693e+00, 4.91731420e+00, 4.85042743e+00, 4.84257910e+00, 4.82282191e+00, 4.80521779e+00, 4.75593168e+00, 4.74270318e+00, 4.70514352e+00, 4.68191260e+00, 4.65822179e+00, 4.62781009e+00, 4.58206294e+00, 4.55433009e+00, 4.52197896e+00, 4.47442964e+00, 4.45449682e+00, 4.45025349e+00, 4.38840686e+00, 4.38117331e+00, 4.35291236e+00, 4.32921175e+00, 4.30202225e+00, 4.26791973e+00, 4.21523395e+00, 4.21145347e+00, 4.18818581e+00, 4.17622715e+00, 4.13550887e+00, 4.12577916e+00, 4.11039284e+00, 4.09685513e+00, 4.07109036e+00, 4.02939243e+00, 4.00331783e+00, 3.97696241e+00, 3.94503312e+00, 3.93368480e+00, 3.84158980e+00, 3.82521909e+00, 3.80125077e+00, 3.76970168e+00, 3.76023660e+00, 3.75084950e+00, 3.73636863e+00, 3.72902284e+00, 3.66340067e+00, 3.64716250e+00, 3.61147057e+00, 3.60098533e+00, 3.58812743e+00, 3.53498132e+00, 3.52033176e+00, 3.49043477e+00, 3.46514179e+00, 3.44527900e+00, 3.42356869e+00, 3.40704111e+00, 3.34890626e+00, 3.32804671e+00, 3.29605788e+00, 3.28071188e+00, 3.25011320e+00, 3.23532434e+00, 3.21811867e+00, 3.18616262e+00, 3.16750232e+00, 3.12643543e+00, 3.10574635e+00, 3.09627820e+00, 3.05806788e+00, 3.01996318e+00, 3.00220202e+00, 2.95796156e+00, 2.94847475e+00, 2.90728643e+00, 2.87763724e+00, 2.86278424e+00, 2.83268253e+00, 2.82204155e+00, 2.80120062e+00, 2.78503941e+00, 2.76435415e+00, 2.74332238e+00, 2.71836658e+00, 2.71569528e+00, 2.69770561e+00, 2.64760980e+00, 2.62849348e+00, 2.61505591e+00, 2.59158684e+00, 2.54179224e+00, 2.51940320e+00, 2.50792107e+00, 2.49862874e+00, 2.48957871e+00, 2.44314028e+00, 2.42365590e+00, 2.41973257e+00, 2.35331088e+00, 2.34517297e+00, 2.31817739e+00, 2.30469350e+00, 2.27487356e+00, 2.26056150e+00, 2.23148661e+00, 2.20462740e+00, 2.19470644e+00, 2.17251816e+00, 2.14874503e+00, 2.11092460e+00, 2.10652682e+00, 2.06180197e+00, 2.03489164e+00, 2.02493153e+00, 2.01580398e+00, 1.97923652e+00, 1.95861598e+00, 1.92322853e+00, 1.91765275e+00, 1.88301850e+00, 1.87107658e+00, 1.86174602e+00, 1.81490812e+00, 1.80252752e+00, 1.78513146e+00, 1.75186936e+00, 1.73384237e+00, 1.69815585e+00, 1.67087083e+00, 1.65504461e+00, 1.62833826e+00, 1.59350016e+00, 1.58518520e+00, 1.57406121e+00, 1.52318355e+00, 1.52041380e+00, 1.48200585e+00, 1.46617961e+00, 1.46038913e+00, 1.44102572e+00, 1.42057616e+00, 1.40485251e+00, 1.38762119e+00, 1.37527086e+00, 1.36211908e+00, 1.34039135e+00, 1.29930779e+00, 1.26872251e+00, 1.23195908e+00, 1.22788520e+00, 1.22080800e+00, 1.19465263e+00, 1.17805481e+00, 1.16555637e+00, 1.12718364e+00, 1.10793283e+00, 1.10594246e+00, 1.06675455e+00, 1.04439770e+00, 1.02978244e+00, 1.00620518e+00, 9.81504353e-01, 9.57163454e-01, 9.33625951e-01, 9.08940260e-01, 8.89946907e-01, 8.73754378e-01, 8.54367286e-01, 8.33089642e-01, 8.14710711e-01, 7.90545224e-01, 7.44180512e-01, 7.25739820e-01, 7.18590163e-01, 6.97220443e-01, 6.39175669e-01, 6.18528497e-01, 5.96683219e-01, 5.83800689e-01, 5.72232599e-01, 5.31453332e-01, 5.26804142e-01, 5.20281933e-01, 4.75313705e-01, 4.54635778e-01, 4.34567930e-01, 4.23330255e-01, 4.04104582e-01, 3.84718206e-01, 3.61246016e-01, 3.32050389e-01, 2.95766519e-01, 2.84756495e-01, 2.66739045e-01, 2.41418262e-01, 2.08111390e-01, 1.85992093e-01, 1.48587324e-01, 1.32123996e-01, 1.16957628e-01, 8.67857990e-02, 7.80847492e-02, 6.61861872e-02, 4.85935027e-02, 3.31185916e-02, 1.08448303e-02]) 1 2 3 4 5 6 # Singular Value Decomposition U , s , Vh = linalg . svd ( img ) # Use only 32 singular values A = np . dot ( U [:, 0 : 32 ], np . dot ( np . diag ( s [ 0 : 32 ]), Vh [ 0 : 32 ,:])) 1 2 fig = plt . figure ( figsize = ( 8 , 3 )) print ( fig ) 1 2 3 4 5 Figure(576x216) &lt;matplotlib.figure.Figure at 0x7f7bbb7b0710&gt; 1 2 3 # Add a subplot to the figure ax = fig . add_subplot ( 121 ) print ( ax ) 1 Axes(0.125,0.125;0.352273x0.755) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 fig = plt . figure ( figsize = ( 8 , 3 )) # Add a subplot to the figure ax = fig . add_subplot ( 121 ) # Plot `img` on grayscale ax . imshow ( img , cmap = 'gray' ) # Add a second subplot to the figure ax2 = fig . add_subplot ( 122 ) # Plot `A` in the second subplot ax2 . imshow ( A ) # Add a title fig . suptitle ( 'Image Compression with SVD' , fontsize = 14 , fontweight = 'bold' ) # Show the plot plt . show ()","title":"Vectors and Arrays (Linear Algebra)"},{"location":"Vectors and Arrays (Linear Algebra)/#array-creation","text":"1 2 # Create a 2X2 identity matrix with `np.eye()` np . eye ( 2 ) 1 2 array([[ 1., 0.], [ 0., 1.]]) 1 np . eye ( 2 , 4 ) 1 2 array([[ 1., 0., 0., 0.], [ 0., 1., 0., 0.]]) 1 np . eye ( 4 , 2 ) 1 2 3 4 array([[ 1., 0.], [ 0., 1.], [ 0., 0.], [ 0., 0.]]) 1 2 # Create a 3X3 identity matrix with `np.identity()` np . identity ( 3 ) 1 2 3 array([[ 1., 0., 0.], [ 0., 1., 0.], [ 0., 0., 1.]]) 1 2 # Uniformly spaced values: spacing; from 2 to 8 (excluded) by 2 np . arange ( 3 , 8 , 2 ) 1 array([3, 5, 7]) 1 2 # Uniformly spaced values: number of samples; from 2 to 3 in 5 intervals np . linspace ( 2 , 3 , 5 ) 1 array([ 2. , 2.25, 2.5 , 2.75, 3. ]) 1 2 # Uniformly spaced values: logarithmic spacing; from 2 to 3 in 4 intervals np . logspace ( 2 , 3 , 4 ) 1 array([ 100. , 215.443469 , 464.15888336, 1000. ])","title":"Array Creation"},{"location":"Vectors and Arrays (Linear Algebra)/#indexing-and-slicing","text":"1 print ( myArray ) 1 2 [[1 2 3] [4 5 6]] 1 2 # Slice `myArray` at index 0 and 1 print ( myArray [ 0 , 0 : 2 ]) 1 [1 2] 1 2 # Slice `my_2dArray` at row 0 and 1, column 1 print ( myArray [ 0 : 2 , 1 ]) 1 [2 5] 1 2 # Slice `my_3dArray` at row 1 print ( myArray [ 1 , ... ]) 1 [4 5 6] 1 2 # Boolean indexing: only values < 3 print ( myArray [ myArray < 3 ]) 1 [1 2] 1 2 # Fancy indexing; r-c coordinates print ( myArray [[ 1 , 0 , 1 , 0 ],[ 0 , 1 , 2 , 0 ]]) 1 [4 2 6 1] Meshgrid Index tricks: np.mgrid() , np.ogrid() , np.r and np.c . Instead of np.concatenate() . np.meshgrid() . 1 2 3 4 5 6 # Create a dense mesh grid; from to (excluded) by # takes two 1D arrays and produces two 2D matrices # corresponding to all pairs of (x, y) in the two arrays # the dimensions and number of the output arrays are equal # to the number of indexing dimensions np . mgrid [ 1 : 11 : 2 , - 12 : - 3 : 3 ] 1 2 3 4 5 6 7 8 9 10 11 array([[[ 1, 1, 1], [ 3, 3, 3], [ 5, 5, 5], [ 7, 7, 7], [ 9, 9, 9]], [[-12, -9, -6], [-12, -9, -6], [-12, -9, -6], [-12, -9, -6], [-12, -9, -6]]]) 1 2 # Create an open meshgrid; from to (excluded) by np . ogrid [ 1 : 11 : 2 , - 12 : - 3 : 3 ] 1 2 3 4 5 [array([[1], [3], [5], [7], [9]]), array([[-12, -9, -6]])] 1 2 # Stack arrays vertically np . r_ [ 3 , [ 0 ] * 5 , - 1 : 1 : 10j ] 1 2 3 array([ 3. , 0. , 0. , 0. , 0. , 0. , -1. , -0.77777778, -0.55555556, -0.33333333, -0.11111111, 0.11111111, 0.33333333, 0.55555556, 0.77777778, 1. ]) 1 2 3 array = np . ones ( 2 ) my2Array = np . array ([[ 1 , 2 , 3 , 4 ],[ 5 , 6 , 7 , 8 ]]) print ( array ) 1 [ 1. 1.] 1 print ( my2Array ) 1 2 [[1 2 3 4] [5 6 7 8]] 1 2 # Stack arrays horizontally (left-right) np . c_ [ array ] 1 2 array([[ 1.], [ 1.]]) 1 np . c_ [ my2Array ] 1 2 array([[1, 2, 3, 4], [5, 6, 7, 8]]) 1 np . c_ [ array , my2Array ] 1 2 array([[ 1., 1., 2., 3., 4.], [ 1., 5., 6., 7., 8.]]) 1 2 array2 = np . array ([[ 1 , 2 , 3 , 4 ], [ 1 , 2 , 3 , 4 ]]) print ( array2 ) 1 2 [[1 2 3 4] [1 2 3 4]] 1 np . r_ [ array2 ] 1 2 array([[1, 2, 3, 4], [1, 2, 3, 4]]) 1 np . r_ [ my2Array ] 1 2 array([[1, 2, 3, 4], [5, 6, 7, 8]]) 1 np . r_ [ array2 , my2Array ] 1 2 3 4 array([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [5, 6, 7, 8]]) Other indexing/slicing 1 2 3 # Initialize a 2D array my_2dArray = np . array ([[ 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 ]], dtype = np . int64 ) print ( my_2dArray ) 1 2 [[1 2 3 4] [5 6 7 8]] 1 2 3 4 # Select values from `my_2dArray` # argument 1: select # argument 2: transform np . select ([ my_2dArray < 4 ], [ my_2dArray ]) 1 2 array([[1, 2, 3, 0], [0, 0, 0, 0]]) 1 np . select ([ my_2dArray < 4 ], [ my_2dArray * 2 ]) 1 2 array([[2, 4, 6, 0], [0, 0, 0, 0]])","title":"Indexing and Slicing"},{"location":"Vectors and Arrays (Linear Algebra)/#shape-selection-and-manipulation","text":"Stack. Split. Transpose. Change shape. 1 2 myArray = np . array ([[ 1 , 2 , 3 , 4 ]]) my_2dArray = np . array ([[ 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 ]]) 1 print ( myArray ) 1 [[1 2 3 4]] 1 print ( my_2dArray ) 1 2 [[1 2 3 4] [5 6 7 8]] 1 2 # Stack arrays horizontally (column-wise) print ( np . hstack (( np . eye ( 2 ), my_2dArray ))) 1 2 [[ 1. 0. 1. 2. 3. 4.] [ 0. 1. 5. 6. 7. 8.]] 1 2 # Stack arrays vertically (row-wise) print ( np . vstack (( myArray , my_2dArray ))) 1 2 3 [[1 2 3 4] [1 2 3 4] [5 6 7 8]] 1 2 # Split the array horizontally at the 2nd index (left-right) print ( np . hsplit ( my_2dArray , 2 )) 1 2 3 [array([[1, 2], [5, 6]]), array([[3, 4], [7, 8]])] 1 2 # Split the array vertically at the 2nd index (top-bottom) print ( np . vsplit ( my_2dArray , 2 )) 1 [array([[1, 2, 3, 4]]), array([[5, 6, 7, 8]])] 1 2 # Permute `myArray` dimensions print ( np . transpose ( myArray )) 1 2 3 4 [[1] [2] [3] [4]] 1 2 my_3dArray = np . array ([[[ 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 ]], [[ 1 , 2 , 3 , 4 ], [ 9 , 10 , 11 , 12 ]]]) print ( my_3dArray ) 1 2 3 4 5 [[[ 1 2 3 4] [ 5 6 7 8]] [[ 1 2 3 4] [ 9 10 11 12]]] 1 2 # Flatten `my_3dArray` print ( my_3dArray . flatten ()) 1 [ 1 2 3 4 5 6 7 8 1 2 3 4 9 10 11 12] np.reshsape() vs np.resize() . 1 2 # Reshape but don't change the data print ( my_2dArray . reshape ( 4 , 2 )) 1 2 3 4 [[1 2] [3 4] [5 6] [7 8]] 1 2 # Resize to (6,4) print ( np . resize ( my_3dArray , ( 6 , 4 ))) 1 2 3 4 5 6 [[ 1 2 3 4] [ 5 6 7 8] [ 1 2 3 4] [ 9 10 11 12] [ 1 2 3 4] [ 5 6 7 8]] Vectorized functions (to \u2018loop\u2019 over an array, all items) 1 2 3 4 5 6 7 8 9 10 11 12 13 # Define a function `myfunc` def myfunc ( a , b ): if a > b : return a - b else : return a + b # Vectorize `myfunc` vectorizedFunc = np . vectorize ( myfunc ) # Apply print ( myArray ) vectorizedFunc ( myArray , 2 ) 1 2 3 4 5 6 7 [[1 2 3 4]] array([[3, 4, 1, 2]]) np.angle() provides the angle of the elements of complex array elements, but also basic trigonometric, exponential or logarithmic functions.","title":"Shape Selection and Manipulation"},{"location":"Vectors and Arrays (Linear Algebra)/#linear-algebra-with-scipy","text":"1 2 3 4 import scipy # Check package version scipy . __version__ 1 '0.19.0'","title":"Linear Algebra With Scipy"},{"location":"Vectors and Arrays (Linear Algebra)/#vectors-and-matrices-the-basics","text":"1 2 3 # Create a vector myVector = np . array ([ 1 , 2 , 3 , 4 ]) print ( myVector ) 1 [1 2 3 4] A matrix is a subclass of arrays. A matrix is always 2D. Both arrays and matrices have .T () . Only matrices have .H () and .I () . Matrix multiplication works differently from an element-wise array. T ** has different results for matrices and arrays. Sparse matrices have mostly zero elements, while the ones that have mostly non-zero elements are called dense matrices. scipy.linalg . scipy.sparse . 1 2 3 # Create a matrix myMatrix = np . matrix ( np . random . random (( 5 , 5 ))) print ( myMatrix ) 1 2 3 4 5 [[ 0.45409417 0.51518628 0.21891525 0.4827949 0.11485953] [ 0.26387125 0.27904581 0.27371679 0.81793744 0.03194194] [ 0.44758032 0.40043501 0.53270025 0.73481508 0.40994865] [ 0.26650523 0.47469863 0.77731378 0.33237448 0.0932401 ] [ 0.47477976 0.4054091 0.62060959 0.76708818 0.33732755]] 1 2 # Create a 2X2 identity matrix np . eye ( 3 , k = 1 ) 1 2 3 array([[ 0., 1., 0.], [ 0., 0., 1.], [ 0., 0., 0.]]) 1 2 # Create a 2x2 identity matrix np . mat ( np . identity ( 2 )) 1 2 matrix([[ 1., 0.], [ 0., 1.]]) 1 C = np . matrix ([[ 0.47332239 , 0.26149519 , 0. , 0.01665965 , 0.05914868 ], [ 0.24440216 , 0. , 0. , 0. , 0. ], [ 0. , 0. , 0.4320679 , 0.10501837 , 0. ], [ 0.32164578 , 0. , 0. , 0.10963973 , 0. ], [ 0.15023766 , 0.04764381 , 0. , 0. , 0.38244847 ], [ 0.08499095 , 0. , 0.0163261 , 0. , 0.27636168 ], [ 0. , 0.36569833 , 0.34968224 , 0. , 0.40275066 ], [ 0. , 0. , 0. , 0.40504002 , 0. ], [ 0.41632136 , 0.35405707 , 0.33020532 , 0.16344026 , 0. ], [ 0.04105013 , 0.26913226 , 0. , 0.00280266 , 0. ]]) 1 print ( C ) 1 2 3 4 5 6 7 8 9 10 [[ 0.47332239 0.26149519 0. 0.01665965 0.05914868] [ 0.24440216 0. 0. 0. 0. ] [ 0. 0. 0.4320679 0.10501837 0. ] [ 0.32164578 0. 0. 0.10963973 0. ] [ 0.15023766 0.04764381 0. 0. 0.38244847] [ 0.08499095 0. 0.0163261 0. 0.27636168] [ 0. 0.36569833 0.34968224 0. 0.40275066] [ 0. 0. 0. 0.40504002 0. ] [ 0.41632136 0.35405707 0.33020532 0.16344026 0. ] [ 0.04105013 0.26913226 0. 0.00280266 0. ]] 1 from scipy import linalg , sparse 1 2 3 # Compressed Sparse Row matrix # fast access to rows and columns sparse . csr_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements in Compressed Sparse Row format&gt; 1 2 3 # Compressed Sparse Column matrix # fast access to rows and columns sparse . csc_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements in Compressed Sparse Column format&gt; 1 2 3 # Dictionary Of Keys matrix # fill the matrix with numbers one by one sparse . dok_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements in Dictionary Of Keys format&gt; 1 2 3 # block Sparse Row matrices # constructing the matrix from blocks of smaller matrices sparse . bsr_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements (blocksize = 1x1) in Block Sparse Row format&gt; 1 2 3 # COOrdinate format sparse matrices # fill the matrix with numbers one by one sparse . coo_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements in COOrdinate format&gt; 1 2 3 # DIAgonal storage sparse matrices # initialize the matrix with an array as the diagonal sparse . dia_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 47 stored elements (13 diagonals) in DIAgonal format&gt; 1 2 3 # Row-based linked list sparse matrices # sliced-based matrices sparse . lil_matrix ( C ) 1 2 &lt;10x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;' with 26 stored elements in LInked List format&gt; 1 2 3 vector1 = np . array ([ 1 , 2 , 3 ]) vector2 = np . array ([ 2 , 3 , 4 ]) print ( vector1 ) 1 [1 2 3] 1 print ( vector2 ) 1 [2 3 4] 1 2 3 4 5 # Addition of `vector1` and `vector2` vector3 = vector1 + vector2 # Print `vector3` print ( vector3 ) 1 [3 5 7] 1 2 3 4 5 # Subtraction of `vector2` and `vector1` vector4 = vector2 - vector1 # print `vector4` print ( vector4 ) 1 [1 1 1] 1 2 3 4 5 # Dot product of `vector1` and `vector2` dotProduct = np . dot ( vector1 , vector2 ) # Print `dotProduct` print ( dotProduct ) 1 20 1 2 3 4 5 6 # Cross product of `vector1` and `vector2` # vector product in vector algebra; search the formula online crossProduct = np . cross ( vector1 , vector2 ) # Print `crossProduct` print ( crossProduct ) 1 [-1 2 -1]","title":"Vectors and Matrices: The Basics"},{"location":"Vectors and Arrays (Linear Algebra)/#matrices-operations-and-routines","text":"1 np . add ( vector1 , vector2 ) 1 array([3, 5, 7]) 1 np . subtract ( vector1 , vector2 ) 1 array([-1, -1, -1]) 1 np . divide ( vector1 , vector2 ) 1 array([ 0.5 , 0.66666667, 0.75 ]) 1 np . multiply ( vector1 , vector2 ) 1 array([ 2, 6, 12]) 1 2 3 # Vector dot product vectorDotProduct = np . vdot ( vector1 , vector2 ) print ( vectorDotProduct ) 1 20 1 2 3 # Inner product innerProduct = np . inner ( vector1 , vector2 ) print ( vectorDotProduct ) 1 20 1 2 3 # Outer product outerProduct = np . outer ( vector1 , vector2 ) print ( vectorDotProduct ) 1 20 1 2 3 4 matrix1 = np . matrix ([[ 0.47332239 , 0.26149519 ], [ 0.86380934 , 0.01665965 ]]) matrix2 = np . matrix ([[ 3 , 4 ], [ 5 , 6 ]]) print ( matrix1 ) 1 2 [[ 0.47332239 0.26149519] [ 0.86380934 0.01665965]] 1 print ( matrix2 ) 1 2 [[3 4] [5 6]] 1 2 3 # Tensor dot product tensorDotProduct = np . tensordot ( matrix1 , matrix2 ) print ( vectorDotProduct ) 1 20 1 2 3 # Kronecker product kronProduct = np . kron ( matrix1 , matrix2 ) print ( vectorDotProduct ) 1 20 1 print ( matrix1 ) 1 2 [[ 0.47332239 0.26149519] [ 0.86380934 0.01665965]] 1 2 3 4 # exponent linalg . expm ( matrix1 ) #linalg.expm2(matrix1) #linalg.expm3(matrix1) 1 2 array([[ 1.76478622, 0.34978586], [ 1.15546404, 1.15393687]]) 1 2 # logarithm linalg . logm ( matrix1 ) 1 2 array([[-0.54372715+0.89057597j, 0.24956103-0.77901846j], [ 0.82438668-2.57336825j, -0.97954865+2.25101668j]]) 1 2 # squared root linalg . sqrtm ( matrix1 ) 1 2 array([[ 0.62966832+0.15061317j, 0.21791187-0.1317467j ], [ 0.71983850-0.43520505j, 0.24911742+0.38068933j]]) 1 2 # lambda linalg . funm ( matrix1 , lambda x : x * x ) 1 2 array([[ 0.44991607, 0.12812795], [ 0.42325106, 0.22615953]]) 1 2 3 # transposition # make a new matrix whose rows are the columns of the original matrix1 . T 1 2 matrix([[ 0.47332239, 0.86380934], [ 0.26149519, 0.01665965]]) 1 np . transpose ( matrix1 ) 1 2 matrix([[ 0.47332239, 0.86380934], [ 0.26149519, 0.01665965]]) 1 2 3 # conjugate transposition # interchanges the row and column index for each matrix element matrix1 . H 1 2 matrix([[ 0.47332239, 0.86380934], [ 0.26149519, 0.01665965]]) 1 2 3 # inverse # matrix multiplied with the original matrix results in an identity matrix matrix1 . I 1 2 matrix([[-0.0764216 , 1.19953792], [ 3.96248993, -2.17123747]]) 1 linalg . inv ( matrix1 ) 1 2 array([[-0.0764216 , 1.19953792], [ 3.96248993, -2.17123747]]) 1 2 # cast an array matrix1 . A 1 2 array([[ 0.47332239, 0.26149519], [ 0.86380934, 0.01665965]]) 1 2 # retrieve the trace or sum of the elements on the main matrix diagonal np . trace ( matrix1 ) 1 0.48998204000000001 1 2 3 4 # retrieve the matrix rank or the number # of Singular Value Decomposition singular values # of an array that are greater than a certain threshold np . linalg . matrix_rank ( matrix1 ) 1 2 1 2 3 4 # norm of a matrix # number defined in terms of the entries of the matrix # how large the elements are linalg . norm ( matrix1 ) 1 1.0192438074758199 1 2 # matrix determinant linalg . det ( matrix1 ) 1 -0.21799660213251107 Solving system of Ax=b Ax=b , where A A is a square matrix and b b a general matrix. There are two methods to find x x . 1 2 3 A = np . matrix ([[ 0.35115177 , 0.79693272 ], [ 0.81264708 , 0.06853826 ]]) b = np . matrix ([[ 1. + 5.j , 0. + 2.j , 0. + 3.j ], [ 0. + 4.j , 0. + 5.j , 0. + 6.j ]]) print ( A ) 1 2 [[ 0.35115177 0.79693272] [ 0.81264708 0.06853826]] 1 print ( b ) 1 2 [[ 1.+5.j 0.+2.j 0.+3.j] [ 0.+4.j 0.+5.j 0.+6.j]] 1 2 # Dense matrix solver linalg . solve ( A , b ) 1 2 3 4 array([[-0.10991486+4.56259221j, 0.00000000+6.17037842j, 0.00000000+7.33850519j], [ 1.30324276+4.26364433j, 0.00000000-0.20922633j, 0.00000000+0.53087407j]]) 1 2 3 F = np . matrix ([[ 0. , 1. , 0. ], [ 0. , 0. , 1. ], [ 0. , 0. , 0. ]]) E = np . matrix ([[ 1 ],[ 2 ],[ 3 ]]) print ( F ) 1 2 3 [[ 0. 1. 0.] [ 0. 0. 1.] [ 0. 0. 0.]] 1 print ( E ) 1 2 3 [[1] [2] [3]] 1 2 # Linear least-square solver np . linalg . lstsq ( F , E ) 1 2 3 4 5 6 (matrix([[ 0.], [ 1.], [ 2.]]), matrix([], shape=(1, 0), dtype=float64), 2, array([ 1., 1., 0.])) For sparse matrices, linalg.spsolve() may solve the equation, otherwise, it might still be possible to obtain an approximate x x with the help of the linalg.lstsq() .","title":"Matrices: Operations and Routines"},{"location":"Vectors and Arrays (Linear Algebra)/#eigenvalues-and-eigenvectors","text":"The eigenvalues and eigenvectors are important concepts in many computer vision and machine learning techniques: Principal Component Analysis (PCA) for dimensionality reduction. EigenFaces for face recognition . Consult the latter case for an illustration. Almost all vectors change direction, when they are multiplied by a matrix. However, certain resulting vectors maintain the same direction after the multiplication. These are the eigenvectors. Multiply an eigenvector by a matrix, and the resulting vector of that multiplication is equal to a multiplication of the original eigenvector with \\lambda \\lambda , the eigenvalue: Ax = \\lambda x Ax = \\lambda x Eigenvalue gives valuable information: whether one of the eigenvectors is stretched, shrunk, reversed, or left unchanged when multiplied by a matrix. 1 2 myMatrix = np . matrix ([[ 0.84790079 , 0.08996585 ], [ 0.66653841 , 0.94212726 ]]) print ( myMatrix ) 1 2 [[ 0.84790079 0.08996585] [ 0.66653841 0.94212726]] 1 2 3 4 5 6 7 8 # Solve eigenvalue problem la , v = linalg . eig ( myMatrix ) # Unpack eigenvalues l1 , l2 = la # First eigenvector v [:, 0 ] 1 array([-0.40641758, 0.91368745]) 1 2 # Second eigenvector v [:, 1 ] 1 array([-0.29036942, -0.95691463]) 1 2 # Or unpack eigenvalues with `eigvals()` linalg . eigvals ( myMatrix ) 1 array([ 0.64564412+0.j, 1.14438393+0.j]) 1 2 # laternative eigvals ( myMatrix ) 1 array([ 0.64564412, 1.14438393]) With sparse matrices, la, v = sparse.linalg.eigs(myMatrix,1) ; the number of eigenvalues and eigenvectors that has to be retrieved = 1.","title":"Eigenvalues and Eigenvectors"},{"location":"Vectors and Arrays (Linear Algebra)/#singular-value-decomposition-svd","text":"SVD is useful for many tasks: data compression, noise reduction, and data analysis. SVD is closely linked to Principal Component Analysis (PCA), which is used for dimensionality reduction. Another link is one with data mining and natural language processing (NLP): Latent Semantic Indexing (LSI). It is a technique that is used in document retrieval and word similarity. Latent semantic indexing uses SVD to group documents to the concepts that could consist of different words found in those documents. Various words can be grouped into a concept. Also here, SVD reduces the noisy correlation between words and their documents, and it decreases the number of dimensions that the original data has. The singular value decomposition of a matrix A A is the decomposition or factorization of A A into the product of three matrices: A=U\u2217\u03a3\u2217V^t A=U\u2217\u03a3\u2217V^t . The size of the individual matrices is as follows given the matrix A A is of size M x N M x N : Matrix U U is of size M x M M x M Matrix V V is of size N x N N x N Matrix \\Sigma \\Sigma is of size M x N M x N The \u2217 \u2217 indicates that the matrices are multiplied and the t t in V^t V^t means that the matrix is transposed, which means that the rows and columns are interchanged. Simply stated, singular value decomposition provides a way to break a matrix into simpler, meaningful pieces. These pieces may contain some data we are interested in. 1 print ( myMatrix ) 1 2 [[ 0.84790079 0.08996585] [ 0.66653841 0.94212726]] 1 2 3 4 5 6 7 8 # Singular Value Decomposition U , s , Vh = linalg . svd ( myMatrix ) # Initialize `M` and `N` M , N = myMatrix . shape # Construct sigma matrix in SVD Sig = linalg . diagsvd ( s , M , N ) 1 2 3 print ( U ) print ( s ) print ( Vh ) 1 2 3 4 5 [[-0.53763961 -0.84317474] [-0.84317474 0.53763961]] [ 1.32147227 0.5591224 ] [[-0.7702571 -0.63773348] [-0.63773348 0.7702571 ]] 1 2 print ( M ) print ( N ) 1 2 2 2 1 print ( Sig ) 1 2 [[ 1.32147227 0. ] [ 0. 0.5591224 ]] With sparse matrices, use the sparse.linalg.svds() .","title":"Singular Value Decomposition (SVD)"},{"location":"Vectors and Arrays (Linear Algebra)/#compress-images-with-svd","text":"1 2 3 4 5 6 % matplotlib inline # Import the necessary packages import numpy as np from scipy import linalg from skimage import data import matplotlib.pyplot as plt 1 2 3 4 5 # Get an image from `skimage` img = data . camera () print ( img ) print ( img . shape ) 1 2 3 4 5 6 7 8 [[156 157 160 ..., 152 152 152] [156 157 159 ..., 152 152 152] [158 157 156 ..., 152 152 152] ..., [121 123 126 ..., 121 113 111] [121 123 126 ..., 121 113 111] [121 123 126 ..., 121 113 111]] (512, 512) 1 2 3 4 fig = plt . figure ( figsize = ( 8 , 3 )) ax = fig . add_subplot ( 121 ) ax . imshow ( img , cmap = 'gray' ) plt . show () 1 2 # Check number of singular values linalg . svdvals ( imgarray([ 6.38689996e+04, 1.44910897e+04, 1.09561592e+04, 6.19958837e+03, 5.85460599e+03, 4.82514545e+03, 4.59023130e+03, 3.61148738e+03, 3.34731861e+03, 3.14349896e+03, 3.05262875e+03, 2.95922014e+03, 2.84709763e+03, 2.81972262e+03, 2.53580358e+03, 2.35379736e+03, 2.25234388e+03, 2.19445315e+03, 1.95347281e+03, 1.93643231e+03, 1.78576072e+03, 1.68444543e+03, 1.55985334e+03, 1.53124809e+03, 1.49461049e+03, 1.46783730e+03, 1.37841479e+03, 1.31705840e+03, 1.28469563e+03, 1.26983772e+03, 1.23258950e+03, 1.19028553e+03, 1.14311122e+03, 1.11896715e+03, 1.07893598e+03, 1.04322585e+03, 1.00915095e+03, 9.95390582e+02, 9.77961424e+02, 9.41174385e+02, 9.32201249e+02, 8.93615745e+02, 8.74195561e+02, 8.58051291e+02, 8.29598226e+02, 8.00811160e+02, 7.93729536e+02, 7.89373695e+02, 7.58404767e+02, 7.29609262e+02, 7.09087154e+02, 7.00077886e+02, 6.86673719e+02, 6.65400930e+02, 6.56677192e+02, 6.28475541e+02, 6.10557098e+02, 5.94000126e+02, 5.84294112e+02, 5.72429055e+02, 5.69451585e+02, 5.50921578e+02, 5.37266578e+02, 5.33291637e+02, 5.21789437e+02, 5.05141703e+02, 5.01052645e+02, 4.93184398e+02, 4.80118682e+02, 4.73384191e+02, 4.56418309e+02, 4.48913305e+02, 4.44146447e+02, 4.32995274e+02, 4.26315380e+02, 4.22328895e+02, 4.05541490e+02, 3.98653047e+02, 3.96319140e+02, 3.89453125e+02, 3.84647691e+02, 3.75627016e+02, 3.71488605e+02, 3.67691102e+02, 3.59979435e+02, 3.50653860e+02, 3.48018191e+02, 3.35741100e+02, 3.33256260e+02, 3.26076697e+02, 3.19055085e+02, 3.09630221e+02, 3.03809793e+02, 3.02834775e+02, 2.94473792e+02, 2.89237544e+02, 2.83072764e+02, 2.80221278e+02, 2.74752660e+02, 2.71946305e+02, 2.67137796e+02, 2.63076632e+02, 2.56422198e+02, 2.54502372e+02, 2.49312761e+02, 2.44629388e+02, 2.42104483e+02, 2.38784276e+02, 2.24177802e+02, 2.21962143e+02, 2.20585254e+02, 2.16305370e+02, 2.14023345e+02, 2.10191299e+02, 2.06326744e+02, 2.01216165e+02, 1.95901568e+02, 1.93425008e+02, 1.86544957e+02, 1.81946842e+02, 1.81111952e+02, 1.79250161e+02, 1.73406209e+02, 1.71851416e+02, 1.68149855e+02, 1.61459003e+02, 1.60960447e+02, 1.54019279e+02, 1.52120965e+02, 1.50570121e+02, 1.45586776e+02, 1.42319905e+02, 1.41079625e+02, 1.39402001e+02, 1.36894791e+02, 1.35479523e+02, 1.33651596e+02, 1.29473707e+02, 1.25074480e+02, 1.23799569e+02, 1.21554208e+02, 1.19267845e+02, 1.16142251e+02, 1.14798303e+02, 1.09566347e+02, 1.07809839e+02, 1.05206661e+02, 1.03096542e+02, 1.02101366e+02, 9.92918020e+01, 9.80967375e+01, 9.25471187e+01, 9.06671721e+01, 8.94885949e+01, 8.59407127e+01, 8.47271098e+01, 8.25043759e+01, 8.05678329e+01, 7.98244891e+01, 7.88264924e+01, 7.60557363e+01, 7.52551314e+01, 7.20841101e+01, 7.16497267e+01, 7.09295551e+01, 6.93447334e+01, 6.68699361e+01, 6.61087591e+01, 6.51986683e+01, 6.19754992e+01, 6.03605056e+01, 5.93183446e+01, 5.72723667e+01, 5.62244673e+01, 5.48748626e+01, 5.35303251e+01, 5.31190637e+01, 5.14073607e+01, 5.05882613e+01, 4.85873327e+01, 4.77033490e+01, 4.61730309e+01, 4.58253352e+01, 4.45738941e+01, 4.41688671e+01, 4.30565443e+01, 4.21824960e+01, 4.13096543e+01, 4.01687931e+01, 3.89251008e+01, 3.76938723e+01, 3.71696405e+01, 3.65261279e+01, 3.63225111e+01, 3.47286204e+01, 3.38767247e+01, 3.36300965e+01, 3.28077851e+01, 3.22430013e+01, 3.19168059e+01, 3.04258560e+01, 3.01029523e+01, 2.94482797e+01, 2.93136739e+01, 2.84675969e+01, 2.70583102e+01, 2.69171207e+01, 2.62988906e+01, 2.53912737e+01, 2.52678982e+01, 2.48858839e+01, 2.35476097e+01, 2.33100666e+01, 2.23100190e+01, 2.15793552e+01, 2.11961369e+01, 2.05803331e+01, 2.00864770e+01, 1.96897799e+01, 1.84825965e+01, 1.78147513e+01, 1.76346865e+01, 1.67939919e+01, 1.64216226e+01, 1.60543495e+01, 1.55344956e+01, 1.49332344e+01, 1.45289863e+01, 1.42587318e+01, 1.37963455e+01, 1.34972766e+01, 1.34093515e+01, 1.22216082e+01, 1.19781514e+01, 1.15231001e+01, 1.09781821e+01, 1.09187142e+01, 1.03661279e+01, 1.00838177e+01, 9.79683858e+00, 9.54913700e+00, 9.35377121e+00, 8.98307957e+00, 8.62827079e+00, 8.43304143e+00, 8.21026198e+00, 8.11055326e+00, 7.84205214e+00, 7.82091983e+00, 7.72211462e+00, 7.65176844e+00, 7.57527347e+00, 7.48948062e+00, 7.32714219e+00, 7.24843636e+00, 7.23134018e+00, 7.11545722e+00, 6.94245132e+00, 6.90872672e+00, 6.89105932e+00, 6.85271365e+00, 6.73119810e+00, 6.67101027e+00, 6.65355095e+00, 6.61537333e+00, 6.57919154e+00, 6.51264665e+00, 6.43529244e+00, 6.38642585e+00, 6.32124352e+00, 6.26921968e+00, 6.22470192e+00, 6.18684862e+00, 6.12487899e+00, 6.08056310e+00, 6.02142397e+00, 5.98369919e+00, 5.96324230e+00, 5.90521877e+00, 5.89164599e+00, 5.85948724e+00, 5.78142589e+00, 5.77436927e+00, 5.72763143e+00, 5.68593121e+00, 5.64079641e+00, 5.59691503e+00, 5.57872232e+00, 5.56560739e+00, 5.46793402e+00, 5.45802649e+00, 5.43835398e+00, 5.40609891e+00, 5.38649282e+00, 5.35337487e+00, 5.32541786e+00, 5.26717335e+00, 5.22386437e+00, 5.18279263e+00, 5.15811624e+00, 5.11921277e+00, 5.07521779e+00, 5.06576107e+00, 5.02393795e+00, 4.98303961e+00, 4.93214693e+00, 4.91731420e+00, 4.85042743e+00, 4.84257910e+00, 4.82282191e+00, 4.80521779e+00, 4.75593168e+00, 4.74270318e+00, 4.70514352e+00, 4.68191260e+00, 4.65822179e+00, 4.62781009e+00, 4.58206294e+00, 4.55433009e+00, 4.52197896e+00, 4.47442964e+00, 4.45449682e+00, 4.45025349e+00, 4.38840686e+00, 4.38117331e+00, 4.35291236e+00, 4.32921175e+00, 4.30202225e+00, 4.26791973e+00, 4.21523395e+00, 4.21145347e+00, 4.18818581e+00, 4.17622715e+00, 4.13550887e+00, 4.12577916e+00, 4.11039284e+00, 4.09685513e+00, 4.07109036e+00, 4.02939243e+00, 4.00331783e+00, 3.97696241e+00, 3.94503312e+00, 3.93368480e+00, 3.84158980e+00, 3.82521909e+00, 3.80125077e+00, 3.76970168e+00, 3.76023660e+00, 3.75084950e+00, 3.73636863e+00, 3.72902284e+00, 3.66340067e+00, 3.64716250e+00, 3.61147057e+00, 3.60098533e+00, 3.58812743e+00, 3.53498132e+00, 3.52033176e+00, 3.49043477e+00, 3.46514179e+00, 3.44527900e+00, 3.42356869e+00, 3.40704111e+00, 3.34890626e+00, 3.32804671e+00, 3.29605788e+00, 3.28071188e+00, 3.25011320e+00, 3.23532434e+00, 3.21811867e+00, 3.18616262e+00, 3.16750232e+00, 3.12643543e+00, 3.10574635e+00, 3.09627820e+00, 3.05806788e+00, 3.01996318e+00, 3.00220202e+00, 2.95796156e+00, 2.94847475e+00, 2.90728643e+00, 2.87763724e+00, 2.86278424e+00, 2.83268253e+00, 2.82204155e+00, 2.80120062e+00, 2.78503941e+00, 2.76435415e+00, 2.74332238e+00, 2.71836658e+00, 2.71569528e+00, 2.69770561e+00, 2.64760980e+00, 2.62849348e+00, 2.61505591e+00, 2.59158684e+00, 2.54179224e+00, 2.51940320e+00, 2.50792107e+00, 2.49862874e+00, 2.48957871e+00, 2.44314028e+00, 2.42365590e+00, 2.41973257e+00, 2.35331088e+00, 2.34517297e+00, 2.31817739e+00, 2.30469350e+00, 2.27487356e+00, 2.26056150e+00, 2.23148661e+00, 2.20462740e+00, 2.19470644e+00, 2.17251816e+00, 2.14874503e+00, 2.11092460e+00, 2.10652682e+00, 2.06180197e+00, 2.03489164e+00, 2.02493153e+00, 2.01580398e+00, 1.97923652e+00, 1.95861598e+00, 1.92322853e+00, 1.91765275e+00, 1.88301850e+00, 1.87107658e+00, 1.86174602e+00, 1.81490812e+00, 1.80252752e+00, 1.78513146e+00, 1.75186936e+00, 1.73384237e+00, 1.69815585e+00, 1.67087083e+00, 1.65504461e+00, 1.62833826e+00, 1.59350016e+00, 1.58518520e+00, 1.57406121e+00, 1.52318355e+00, 1.52041380e+00, 1.48200585e+00, 1.46617961e+00, 1.46038913e+00, 1.44102572e+00, 1.42057616e+00, 1.40485251e+00, 1.38762119e+00, 1.37527086e+00, 1.36211908e+00, 1.34039135e+00, 1.29930779e+00, 1.26872251e+00, 1.23195908e+00, 1.22788520e+00, 1.22080800e+00, 1.19465263e+00, 1.17805481e+00, 1.16555637e+00, 1.12718364e+00, 1.10793283e+00, 1.10594246e+00, 1.06675455e+00, 1.04439770e+00, 1.02978244e+00, 1.00620518e+00, 9.81504353e-01, 9.57163454e-01, 9.33625951e-01, 9.08940260e-01, 8.89946907e-01, 8.73754378e-01, 8.54367286e-01, 8.33089642e-01, 8.14710711e-01, 7.90545224e-01, 7.44180512e-01, 7.25739820e-01, 7.18590163e-01, 6.97220443e-01, 6.39175669e-01, 6.18528497e-01, 5.96683219e-01, 5.83800689e-01, 5.72232599e-01, 5.31453332e-01, 5.26804142e-01, 5.20281933e-01, 4.75313705e-01, 4.54635778e-01, 4.34567930e-01, 4.23330255e-01, 4.04104582e-01, 3.84718206e-01, 3.61246016e-01, 3.32050389e-01, 2.95766519e-01, 2.84756495e-01, 2.66739045e-01, 2.41418262e-01, 2.08111390e-01, 1.85992093e-01, 1.48587324e-01, 1.32123996e-01, 1.16957628e-01, 8.67857990e-02, 7.80847492e-02, 6.61861872e-02, 4.85935027e-02, 3.31185916e-02, 1.08448303e-02]) 1 2 3 4 5 6 # Singular Value Decomposition U , s , Vh = linalg . svd ( img ) # Use only 32 singular values A = np . dot ( U [:, 0 : 32 ], np . dot ( np . diag ( s [ 0 : 32 ]), Vh [ 0 : 32 ,:])) 1 2 fig = plt . figure ( figsize = ( 8 , 3 )) print ( fig ) 1 2 3 4 5 Figure(576x216) &lt;matplotlib.figure.Figure at 0x7f7bbb7b0710&gt; 1 2 3 # Add a subplot to the figure ax = fig . add_subplot ( 121 ) print ( ax ) 1 Axes(0.125,0.125;0.352273x0.755) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 fig = plt . figure ( figsize = ( 8 , 3 )) # Add a subplot to the figure ax = fig . add_subplot ( 121 ) # Plot `img` on grayscale ax . imshow ( img , cmap = 'gray' ) # Add a second subplot to the figure ax2 = fig . add_subplot ( 122 ) # Plot `A` in the second subplot ax2 . imshow ( A ) # Add a title fig . suptitle ( 'Image Compression with SVD' , fontsize = 14 , fontweight = 'bold' ) # Show the plot plt . show ()","title":"Compress images with SVD"},{"location":"Viewing+3D+Volumetric+Data+With+Matplotlib/","text":"Foreword Code snippets and excerpts from the tutorial. Python 3. From DataCamp. With Jupyter Notebook and the In [ ] Out [ ] format. Some images can only be simulated with Jupyter since they are are interactive. Overview \u00b6 Image data can be taken with ordinary cameras (these are often called \u201cnatural images\u201d in the scientific literature) or with specialized instruments, such as microscopes or telescopes. The most common way to display them is using the imshow function of Matplotlib. For example, magnetic resonance imaging (MRI) and computed tomography (CT) scans measure the 3D structure inside the human body; X-ray microtomography measures the 3D structure inside materials such as glass, or metal alloys; and light-sheet microscopes measure fluorescent particles inside biological tissues. Enable the interactive matplotlib mode. Other applications: spatial analysis (visualization over time), maps (layers of a neighbourhood over time), etc. 1 % matplotlib notebook When running matplotlib in the interactive notebook mode, the open figure remains the only active figure until disabled, using the power symbol on the top-right of the figure. Do that before moving on from each plot. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import matplotlib.pyplot as plt from skimage import data astronaut = data . astronaut () ihc = data . immunohistochemistry () hubble = data . hubble_deep_field () # Initialize the subplot panels side by side fig , ax = plt . subplots ( nrows = 1 , ncols = 3 ) # Show an image in each subplot ax [ 0 ] . imshow ( astronaut ) ax [ 0 ] . set_title ( 'Natural image' ) ax [ 1 ] . imshow ( ihc ) ax [ 1 ] . set_title ( 'Microscopy image' ) ax [ 2 ] . imshow ( hubble ) ax [ 2 ] . set_title ( 'Telescope image' ); >>> Interactive images here! <<< These images are called 2-dimensional or 2D images. Some images are 3D, in that they have an additional depth dimension (z, or planes). These include magnetic resonance imaging (MRI) and serial section transmission electron microscopy (ssTEM), in which a sample is thinly sliced, like a salami, and each of the slices is imaged separately. 1 import nibabel Interlude: Getting The Data\u2026 \u00b6 Dataset source: Buchel and Friston, Cortical Interactions Evaluated with Structural Equation Modelling and fMRI (1997). 1 2 3 4 5 6 import tempfile # Create a temporary directory d = tempfile . mkdtemp () print ( d ) 1 /tmp/tmp8xdzu1ad 1 2 3 4 import os os . chdir ( '/home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial' ) print ( os . getcwd ()) 1 /home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial 1 2 d = os . getcwd () print ( d ) 1 /home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial 1 2 # Return the tail of the path os . path . basename ( 'http://google.com/attention.zip' ) 1 'attention.zip' Download the Data \u00b6 1 2 3 4 5 6 7 from urllib.request import urlretrieve # Define URL url = 'http://www.fil.ion.ucl.ac.uk/spm/download/data/attention/attention.zip' # Retrieve the data fn , info = urlretrieve ( url , os . path . join ( d , 'attention.zip' )) Extract it from the zip file to our temporary directory. 1 2 3 4 5 6 7 import zipfile # Extract the contents into the temporary directory we created earlier zipfile . ZipFile ( fn ) . extractall ( path = d ) # List first 10 files [ f . filename for f in zipfile . ZipFile ( fn ) . filelist [: 10 ]] 1 2 3 4 5 6 7 8 9 10 ['attention/', 'attention/multi_block_regressors.mat', 'attention/README_DATA.txt', 'attention/factors.mat', 'attention/functional/', 'attention/functional/snffM00587_0201.hdr', 'attention/functional/snffM00587_0040.img', 'attention/functional/snffM00587_0458.hdr', 'attention/functional/snffM00587_0185.img', 'attention/functional/snffM00587_0018.hdr'] These are in the NIfTI file format. nibabel library provides the reader. Install it with either: conda install -c conda-forge nibabel or pip install nibabel . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import nibabel # Read the image struct = nibabel . load ( os . path . join ( d , 'attention/structural/nsM00587_0002.hdr' )) # Get a plain NumPy array, without all the metadata struct_arr = struct . get_data () # Plot the MRI data from skimage import io struct_arr = io . imread ( \"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/attention-mri.tif\" ) plt . imshow ( struct_arr [ 75 ]) >>> Interactive images here! <<< \u2026 Back To Plotting \u00b6 1 2 3 4 5 6 7 8 9 10 # fix the aspect parameter plt . imshow ( struct_arr [ 75 ], aspect = 0.5 ) # transpose the data # horizontal slices struct_arr2 = struct_arr . T plt . imshow ( struct_arr2 [ 34 ]) # slice along a different axis plt . imshow ( struct_arr2 [ 5 ]) >>> Interactive images here! <<< Explore 3D data within Python, minimizing the need to switch contexts between data exploration and data analysis. The key is to use the matplotlibevent handler API. https://matplotlib.org/users/event_handling.html Bind the J and K keys on the keyboard to previous slice and next slice. 1 2 3 4 5 6 7 8 9 10 11 def previous_slice (): pass def next_slice (): pass def process_key ( event ): if event . key == 'j' : previous_slice () elif event . key == 'k' : next_slice () Use the process_key function to process keyboard presses and the figure canvas method mpl_connect . 1 2 3 fig , ax = plt . subplots () ax . imshow ( struct_arr [ ... , 43 ]) fig . canvas . mpl_connect ( 'key_press_event' , process_key ) >>> Interactive images here! <<< imshow returns an AxesImage object, which lives inside the matplotlib Axes object where all the drawing takes place, in its .images attribute. This object provides a convenient set_array method that swaps out the image. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def multi_slice_viewer ( volume ): fig , ax = plt . subplots () ax . volume = volume ax . index = volume . shape [ 0 ] // 2 ax . imshow ( volume [ ax . index ]) fig . canvas . mpl_connect ( 'key_press_event' , process_key ) def process_key ( event ): fig = event . canvas . figure ax = fig . axes [ 0 ] if event . key == 'j' : previous_slice ( ax ) elif event . key == 'k' : next_slice ( ax ) fig . canvas . draw () def previous_slice ( ax ): \"\"\"Go to the previous slice.\"\"\" volume = ax . volume ax . index = ( ax . index - 1 ) % volume . shape [ 0 ] # wrap around using % ax . images [ 0 ] . set_array ( volume [ ax . index ]) def next_slice ( ax ): \"\"\"Go to the next slice.\"\"\" volume = ax . volume ax . index = ( ax . index + 1 ) % volume . shape [ 0 ] ax . images [ 0 ] . set_array ( volume [ ax . index ]) Go! 1 multi_slice_viewer ( struct_arr2 ) >>> Interactive images here! <<< Matplotlib simply piles them on on top of each other. K is a built-in keyboard shortcut to change the x-axis to use a logarithmic scale. If we want to use K exclusively, we have to remove it from matplotlib\u2019s default key maps. These live as lists in the plt.rcParams dictionary, which is matplotlib\u2019s repository for default system-wide settings: plt.rcParams['keymap.<command>'] = ['<key1>', '<key2>'] where pressing any of the keys in the list (i.e. <key1> or <key2> ) will cause <command> to be executed. Let\u2019s rewrite the function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def multi_slice_viewer ( volume ): remove_keymap_conflicts ({ 'j' , 'k' }) fig , ax = plt . subplots () ax . volume = volume ax . index = volume . shape [ 0 ] // 2 ax . imshow ( volume [ ax . index ]) fig . canvas . mpl_connect ( 'key_press_event' , process_key ) def process_key ( event ): fig = event . canvas . figure ax = fig . axes [ 0 ] if event . key == 'j' : previous_slice ( ax ) elif event . key == 'k' : next_slice ( ax ) fig . canvas . draw () def previous_slice ( ax ): volume = ax . volume ax . index = ( ax . index - 1 ) % volume . shape [ 0 ] # wrap around using % ax . images [ 0 ] . set_array ( volume [ ax . index ]) def next_slice ( ax ): volume = ax . volume ax . index = ( ax . index + 1 ) % volume . shape [ 0 ] ax . images [ 0 ] . set_array ( volume [ ax . index ]) We should be able to view all the slices in our MRI volume without pesky interference from the default keymap! One nice feature about this method is that it works on any matplotlib backend! So, in the IPython terminal console, we will still get the same interaction as we did in the browser! And the same is true for a Qt or Tkinter app embedding a matplotlib plot. This simple tool therefore lets us build ever more complex applications around matplotlib\u2019s visualization capabilities. 1 #multi_slice_viewer(struct_arr2) Delete the temporary directory. 1 2 3 d = tempfile . mkdtemp () print ( d ) 1 /tmp/tmpyylc3632 1 2 3 4 import shutil # Remove the temporary directory shutil . rmtree ( d )","title":"Viewing 3D Volumetric Data with Matplotlib"},{"location":"Viewing+3D+Volumetric+Data+With+Matplotlib/#interlude-getting-the-data","text":"Dataset source: Buchel and Friston, Cortical Interactions Evaluated with Structural Equation Modelling and fMRI (1997). 1 2 3 4 5 6 import tempfile # Create a temporary directory d = tempfile . mkdtemp () print ( d ) 1 /tmp/tmp8xdzu1ad 1 2 3 4 import os os . chdir ( '/home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial' ) print ( os . getcwd ()) 1 /home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial 1 2 d = os . getcwd () print ( d ) 1 /home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial 1 2 # Return the tail of the path os . path . basename ( 'http://google.com/attention.zip' ) 1 'attention.zip'","title":"Interlude: Getting The Data\u2026"},{"location":"Viewing+3D+Volumetric+Data+With+Matplotlib/#download-the-data","text":"1 2 3 4 5 6 7 from urllib.request import urlretrieve # Define URL url = 'http://www.fil.ion.ucl.ac.uk/spm/download/data/attention/attention.zip' # Retrieve the data fn , info = urlretrieve ( url , os . path . join ( d , 'attention.zip' )) Extract it from the zip file to our temporary directory. 1 2 3 4 5 6 7 import zipfile # Extract the contents into the temporary directory we created earlier zipfile . ZipFile ( fn ) . extractall ( path = d ) # List first 10 files [ f . filename for f in zipfile . ZipFile ( fn ) . filelist [: 10 ]] 1 2 3 4 5 6 7 8 9 10 ['attention/', 'attention/multi_block_regressors.mat', 'attention/README_DATA.txt', 'attention/factors.mat', 'attention/functional/', 'attention/functional/snffM00587_0201.hdr', 'attention/functional/snffM00587_0040.img', 'attention/functional/snffM00587_0458.hdr', 'attention/functional/snffM00587_0185.img', 'attention/functional/snffM00587_0018.hdr'] These are in the NIfTI file format. nibabel library provides the reader. Install it with either: conda install -c conda-forge nibabel or pip install nibabel . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import nibabel # Read the image struct = nibabel . load ( os . path . join ( d , 'attention/structural/nsM00587_0002.hdr' )) # Get a plain NumPy array, without all the metadata struct_arr = struct . get_data () # Plot the MRI data from skimage import io struct_arr = io . imread ( \"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/attention-mri.tif\" ) plt . imshow ( struct_arr [ 75 ]) >>> Interactive images here! <<<","title":"Download the Data"},{"location":"Viewing+3D+Volumetric+Data+With+Matplotlib/#back-to-plotting","text":"1 2 3 4 5 6 7 8 9 10 # fix the aspect parameter plt . imshow ( struct_arr [ 75 ], aspect = 0.5 ) # transpose the data # horizontal slices struct_arr2 = struct_arr . T plt . imshow ( struct_arr2 [ 34 ]) # slice along a different axis plt . imshow ( struct_arr2 [ 5 ]) >>> Interactive images here! <<< Explore 3D data within Python, minimizing the need to switch contexts between data exploration and data analysis. The key is to use the matplotlibevent handler API. https://matplotlib.org/users/event_handling.html Bind the J and K keys on the keyboard to previous slice and next slice. 1 2 3 4 5 6 7 8 9 10 11 def previous_slice (): pass def next_slice (): pass def process_key ( event ): if event . key == 'j' : previous_slice () elif event . key == 'k' : next_slice () Use the process_key function to process keyboard presses and the figure canvas method mpl_connect . 1 2 3 fig , ax = plt . subplots () ax . imshow ( struct_arr [ ... , 43 ]) fig . canvas . mpl_connect ( 'key_press_event' , process_key ) >>> Interactive images here! <<< imshow returns an AxesImage object, which lives inside the matplotlib Axes object where all the drawing takes place, in its .images attribute. This object provides a convenient set_array method that swaps out the image. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def multi_slice_viewer ( volume ): fig , ax = plt . subplots () ax . volume = volume ax . index = volume . shape [ 0 ] // 2 ax . imshow ( volume [ ax . index ]) fig . canvas . mpl_connect ( 'key_press_event' , process_key ) def process_key ( event ): fig = event . canvas . figure ax = fig . axes [ 0 ] if event . key == 'j' : previous_slice ( ax ) elif event . key == 'k' : next_slice ( ax ) fig . canvas . draw () def previous_slice ( ax ): \"\"\"Go to the previous slice.\"\"\" volume = ax . volume ax . index = ( ax . index - 1 ) % volume . shape [ 0 ] # wrap around using % ax . images [ 0 ] . set_array ( volume [ ax . index ]) def next_slice ( ax ): \"\"\"Go to the next slice.\"\"\" volume = ax . volume ax . index = ( ax . index + 1 ) % volume . shape [ 0 ] ax . images [ 0 ] . set_array ( volume [ ax . index ]) Go! 1 multi_slice_viewer ( struct_arr2 ) >>> Interactive images here! <<< Matplotlib simply piles them on on top of each other. K is a built-in keyboard shortcut to change the x-axis to use a logarithmic scale. If we want to use K exclusively, we have to remove it from matplotlib\u2019s default key maps. These live as lists in the plt.rcParams dictionary, which is matplotlib\u2019s repository for default system-wide settings: plt.rcParams['keymap.<command>'] = ['<key1>', '<key2>'] where pressing any of the keys in the list (i.e. <key1> or <key2> ) will cause <command> to be executed. Let\u2019s rewrite the function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def multi_slice_viewer ( volume ): remove_keymap_conflicts ({ 'j' , 'k' }) fig , ax = plt . subplots () ax . volume = volume ax . index = volume . shape [ 0 ] // 2 ax . imshow ( volume [ ax . index ]) fig . canvas . mpl_connect ( 'key_press_event' , process_key ) def process_key ( event ): fig = event . canvas . figure ax = fig . axes [ 0 ] if event . key == 'j' : previous_slice ( ax ) elif event . key == 'k' : next_slice ( ax ) fig . canvas . draw () def previous_slice ( ax ): volume = ax . volume ax . index = ( ax . index - 1 ) % volume . shape [ 0 ] # wrap around using % ax . images [ 0 ] . set_array ( volume [ ax . index ]) def next_slice ( ax ): volume = ax . volume ax . index = ( ax . index + 1 ) % volume . shape [ 0 ] ax . images [ 0 ] . set_array ( volume [ ax . index ]) We should be able to view all the slices in our MRI volume without pesky interference from the default keymap! One nice feature about this method is that it works on any matplotlib backend! So, in the IPython terminal console, we will still get the same interaction as we did in the browser! And the same is true for a Qt or Tkinter app embedding a matplotlib plot. This simple tool therefore lets us build ever more complex applications around matplotlib\u2019s visualization capabilities. 1 #multi_slice_viewer(struct_arr2) Delete the temporary directory. 1 2 3 d = tempfile . mkdtemp () print ( d ) 1 /tmp/tmpyylc3632 1 2 3 4 import shutil # Remove the temporary directory shutil . rmtree ( d )","title":"\u2026 Back To Plotting"},{"location":"Write Idiomatic Pandas Code/","text":"Foreword Code snippets and excerpts from the tutorial. Python 3. From DataCamp. With Jupyter Notebook and the In [ ] Out [ ] format. Load and Explore the Data \u00b6 The Data \u00b6 The datasets are downloadable from Kaggle . 1 2 3 4 5 6 7 8 9 10 % pylab inline import pandas as pd # Import Times Higher Education World University Rankings data # https://www.timeshighereducation.com/world-university-rankings times_df = pd . read_csv ( 'timesData.csv' , thousands = \",\" ) # Import Academic Ranking of World Universities data # http://www.shanghairanking.com/ shanghai_df = pd . read_csv ( 'shanghaiData.csv' ) 1 Populating the interactive namespace from numpy and matplotlib Quickly Inspecting the Data \u00b6 1 2 # Return the first rows of `times_df` times_df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } world_rank university_name country teaching international research citations income total_score num_students student_staff_ratio international_students female_male_ratio year 0 1 Harvard University United States of America 99.7 72.4 98.7 98.8 34.5 96.1 20152.0 8.9 25% NaN 2011 1 2 California Institute of Technology United States of America 97.7 54.6 98.0 99.9 83.7 96.0 2243.0 6.9 27% 33 : 67 2011 2 3 Massachusetts Institute of Technology United States of America 97.8 82.3 91.4 99.9 87.5 95.6 11074.0 9.0 33% 37 : 63 2011 3 4 Stanford University United States of America 98.3 29.5 98.1 99.2 64.3 94.3 15596.0 7.8 22% 42 : 58 2011 4 5 Princeton University United States of America 90.9 70.3 95.4 99.9 - 94.2 7929.0 8.4 27% 45 : 55 2011 1 2 # Describe `times_df` times_df . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } teaching research citations num_students student_staff_ratio year count 2603.000000 2603.000000 2603.000000 2544.000000 2544.000000 2603.000000 mean 37.801498 35.910257 60.921629 23873.758648 18.445283 2014.075682 std 17.604218 21.254805 23.073219 17675.946877 11.458698 1.685733 min 9.900000 2.900000 1.200000 462.000000 0.600000 2011.000000 25% 24.700000 19.600000 45.500000 12637.750000 11.975000 2013.000000 50% 33.900000 30.500000 62.500000 20851.000000 16.100000 2014.000000 75% 46.400000 47.250000 79.050000 29991.000000 21.500000 2016.000000 max 99.700000 99.400000 100.000000 379231.000000 162.600000 2016.000000 1 2 # Return the first rows of `shanghai_df` shanghai_df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } world_rank university_name national_rank total_score alumni award hici ns pub pcp year 0 1 Harvard University 1 100.0 100.0 100.0 100.0 100.0 100.0 72.4 2005 1 2 University of Cambridge 1 73.6 99.8 93.4 53.3 56.6 70.9 66.9 2005 2 3 Stanford University 2 73.4 41.1 72.2 88.5 70.9 72.3 65.0 2005 3 4 University of California, Berkeley 3 72.8 71.8 76.0 69.4 73.9 72.2 52.7 2005 4 5 Massachusetts Institute of Technology (MIT) 4 70.1 74.0 80.6 66.7 65.8 64.3 53.0 2005 1 2 # Describe `shanghai_df` shanghai_df . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } total_score alumni award hici ns pub pcp year count 1101.000000 4896.000000 4895.00000 4895.000000 4875.000000 4895.000000 4895.000000 4897.000000 mean 36.383470 9.161724 7.69191 16.221491 16.078503 38.254648 21.242329 2009.658566 std 13.557186 14.140636 15.49411 14.382710 12.511529 13.050809 9.254351 3.197576 min 23.500000 0.000000 0.00000 0.000000 0.000000 7.300000 8.300000 2005.000000 25% 27.400000 0.000000 0.00000 7.300000 8.000000 28.900000 15.600000 2007.000000 50% 31.300000 0.000000 0.00000 12.600000 12.800000 36.000000 19.000000 2009.000000 75% 41.800000 15.600000 13.40000 21.700000 19.800000 45.300000 24.500000 2012.000000 max 100.000000 100.000000 100.00000 100.000000 100.000000 100.000000 100.000000 2015.000000 Index and Pull Values \u00b6 [] for row numbers or column names, loc[] , iloc[] , query . 1 2 # Retrieve the total score of the first row print ( times_df . loc [ 0 , 'total_score' ]) 1 96.1 1 2 # Retrieve rows 0 and 1 print ( times_df [ 0 : 2 ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 world_rank university_name country \\ 0 1 Harvard University United States of America 1 2 California Institute of Technology United States of America teaching international research citations income total_score \\ 0 99.7 72.4 98.7 98.8 34.5 96.1 1 97.7 54.6 98.0 99.9 83.7 96.0 num_students student_staff_ratio international_students female_male_ratio \\ 0 20152.0 8.9 25% NaN 1 2243.0 6.9 27% 33 : 67 year 0 2011 1 2011 1 2 # Retrieve the values at columns and rows 1-3 print ( times_df . iloc [ 1 : 4 , 1 : 4 ]) 1 2 3 4 university_name country teaching 1 California Institute of Technology United States of America 97.7 2 Massachusetts Institute of Technology United States of America 97.8 3 Stanford University United States of America 98.3 1 2 # Retrieve the column `total_score` print ( times_df [ 'total_score' ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 0 96.1 1 96.0 2 95.6 3 94.3 4 94.2 5 91.2 6 91.2 7 91.1 8 90.6 9 89.5 10 87.7 11 86.9 12 86.4 13 83.9 14 83.4 15 83.4 16 82.0 17 81.0 18 79.5 19 79.3 20 79.2 21 78.4 22 78.0 23 76.5 24 75.9 25 75.6 26 75.3 27 75.1 28 75.0 29 73.8 ... 2573 - 2574 - 2575 - 2576 - 2577 - 2578 - 2579 - 2580 - 2581 - 2582 - 2583 - 2584 - 2585 - 2586 - 2587 - 2588 - 2589 - 2590 - 2591 - 2592 - 2593 - 2594 - 2595 - 2596 - 2597 - 2598 - 2599 - 2600 - 2601 - 2602 - Name: total_score, Length: 2603, dtype: object 1 2 # Are the last entries after 2006? print ( shanghai_df . loc [: - 10 , 'year' ] > 2006 ) 1 Series([], Name: year, dtype: bool) 1 2 # Was the alumni count higher than 90 for the first ten universities? print ( shanghai_df . loc [ 0 : 11 , 'alumni' ] > 90 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 0 True 1 True 2 False 3 False 4 False 5 False 6 False 7 False 8 False 9 False 10 False 11 False Name: alumni, dtype: bool 1 2 3 4 5 # Query `shanghai_df` for universities with total score between 40 and 50 average_schools = shanghai_df . query ( 'total_score > 0 and total_score < 50' ) # Print the result print ( average_schools ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 world_rank university_name \\ 15 16 University of Wisconsin - Madison 16 17 University of Washington 17 18 University of California, San Francisco 18 19 The Johns Hopkins University 19 20 The University of Tokyo 20 21 University of Michigan - Ann Arbor 21 22 Kyoto University 22 23 The Imperial College of Science, Technology an... 23 24 University of Toronto 24 25 University of Illinois at Urbana-Champaign 25 26 University College London 26 27 Swiss Federal Institute of Technology Zurich 27 28 Washington University in St. Louis 28 29 New York University 29 30 Rockefeller University 30 31 Northwestern University 31 32 Duke University 32 32 University of Minnesota, Twin Cities 33 34 University of California, Santa Barbara 34 35 University of Colorado at Boulder 35 36 The University of Texas at Austin 36 37 University of British Columbia 37 38 The University of Texas Southwestern Medical C... 38 39 Pennsylvania State University - University Park 39 39 Vanderbilt University 40 41 University of California, Davis 41 41 Utrecht University 42 43 Rutgers, The State University of New Jersey - ... 43 43 University of Pittsburgh 44 45 Karolinska Institute ... ... ... 4467 71 Ghent University 4468 72 Ecole Normale Superieure - Paris 4469 73 Aarhus University 4470 73 Boston University 4471 75 Brown University 4472 75 University of Groningen 4473 77 Nagoya University 4474 77 Stockholm University 4475 77 Technion-Israel Institute of Technology 4476 77 The Australian National University 4477 77 The University of Queensland 4478 82 Leiden University 4479 83 University of Florida 4480 84 Rice University 4481 85 Osaka University 4482 86 Moscow State University 4483 87 The University of Western Australia 4484 87 University of Basel 4485 87 University of Strasbourg 4486 90 KU Leuven 4487 90 University of Arizona 4488 92 University of Warwick 4489 93 Arizona State University 4490 93 University of California, Santa Cruz 4491 93 University of Utah 4492 96 McMaster University 4493 97 University of Bonn 4494 98 VU University Amsterdam 4495 99 Michigan State University 4496 100 Texas A&amp;M University national_rank total_score alumni award hici ns pub pcp year 15 14 49.2 43.0 36.3 52.1 46.3 68.7 29.0 2005 16 15 48.4 28.8 32.4 53.9 47.1 73.8 27.2 2005 17 16 47.8 0.0 37.6 55.6 57.9 58.8 45.2 2005 18 17 46.9 51.4 28.3 41.6 52.2 67.7 24.9 2005 19 1 46.7 36.0 14.4 38.5 52.1 86.5 34.7 2005 20 18 44.9 43.0 0.0 61.9 43.0 76.5 30.9 2005 21 2 43.8 39.7 34.1 34.2 37.0 72.3 31.1 2005 22 3 43.7 20.8 38.1 40.8 38.2 64.6 40.3 2005 23 1 43.1 28.1 19.7 39.3 38.9 76.7 41.9 2005 24 19 42.8 41.6 37.4 44.4 34.1 58.0 26.0 2005 25 4 42.6 30.7 32.9 37.7 41.5 60.5 38.8 2005 26 1 41.7 40.2 37.0 35.1 41.1 43.4 52.4 2005 27 20 40.7 25.1 26.6 38.5 46.5 53.9 39.9 2005 28 21 38.8 33.8 25.0 43.0 35.3 55.4 26.3 2005 29 22 38.2 22.6 59.8 28.3 44.1 24.0 35.9 2005 30 23 37.9 21.7 19.3 44.4 33.8 57.6 36.2 2005 31 24 37.7 20.8 0.0 47.1 45.3 60.8 38.9 2005 32 24 37.7 36.0 0.0 49.7 35.2 68.4 23.8 2005 33 26 36.9 0.0 36.0 42.3 39.0 44.1 35.8 2005 34 27 36.3 16.6 29.8 40.8 36.6 46.3 29.5 2005 35 28 35.5 21.7 17.1 49.1 30.0 54.8 21.7 2005 36 2 35.4 20.8 19.3 32.4 32.5 60.4 33.9 2005 37 29 34.8 24.3 33.9 31.4 38.2 37.9 31.0 2005 38 30 33.4 14.0 0.0 45.8 37.9 59.9 24.0 2005 39 30 33.4 12.5 30.2 34.2 24.5 49.2 35.6 2005 40 32 32.9 0.0 0.0 46.5 34.5 64.0 29.8 2005 41 1 32.9 30.7 21.4 27.2 27.3 55.7 25.9 2005 42 33 32.3 15.4 20.4 36.9 32.9 47.1 24.1 2005 43 33 32.3 25.1 0.0 40.1 25.9 64.3 28.2 2005 44 1 32.1 30.7 27.8 33.3 19.7 47.3 25.1 2005 ... ... ... ... ... ... ... ... ... ... 4467 1 27.8 5.1 13.3 26.9 18.3 57.5 34.5 2015 4468 3 27.6 48.9 28.0 6.2 19.5 26.4 60.5 2015 4469 2 27.3 11.5 22.1 12.3 25.8 51.8 31.0 2015 4470 42 27.3 11.5 11.5 29.1 26.3 49.5 21.8 2015 4471 43 27.0 14.5 13.3 26.2 25.1 43.6 32.8 2015 4472 2 27.0 0.0 18.8 23.0 21.0 52.6 32.7 2015 4473 3 26.7 29.0 25.3 16.8 17.7 44.3 23.1 2015 4474 3 26.7 24.1 27.4 18.1 19.4 40.4 25.6 2015 4475 2 26.7 23.5 37.6 15.2 18.3 33.3 28.2 2015 4476 2 26.7 13.6 19.2 24.8 20.1 45.1 29.1 2015 4477 2 26.7 12.6 0.0 22.0 24.0 63.2 29.3 2015 4478 3 26.5 17.8 9.4 25.7 22.0 46.9 32.9 2015 4479 44 26.2 17.0 0.0 30.9 21.0 58.7 17.3 2015 4480 45 26.0 16.2 21.7 28.1 22.8 29.2 34.3 2015 4481 4 25.7 8.9 0.0 31.6 26.7 51.7 21.7 2015 4482 1 25.3 41.4 33.0 0.0 7.7 46.4 31.3 2015 4483 4 24.9 13.6 14.1 24.1 14.5 47.5 28.9 2015 4484 4 24.9 19.2 16.3 17.4 21.4 39.2 35.0 2015 4485 4 24.9 25.1 28.8 15.9 19.0 34.6 21.7 2015 4486 2 24.7 0.0 0.0 30.1 18.6 56.6 30.4 2015 4487 46 24.7 14.5 0.0 27.2 27.5 48.4 20.3 2015 4488 9 24.6 0.0 29.8 23.7 14.0 39.3 26.8 2015 4489 47 24.5 0.0 20.0 22.2 25.5 42.6 19.1 2015 4490 47 24.5 0.0 0.0 37.9 33.9 29.0 37.6 2015 4491 47 24.5 0.0 11.5 26.5 25.5 46.7 18.7 2015 4492 4 24.4 12.6 18.8 23.2 15.1 44.5 22.5 2015 4493 4 24.3 15.4 19.8 17.4 21.1 39.8 25.9 2015 4494 4 24.2 0.0 0.0 27.8 18.0 55.5 33.3 2015 4495 50 24.0 8.9 0.0 30.7 21.8 50.6 18.9 2015 4496 51 23.9 0.0 0.0 34.3 22.7 49.5 20.9 2015 [948 rows x 11 columns] 1 shanghai_df . query ( \"national_rank == 1 and world_rank == 1\" ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } world_rank university_name national_rank total_score alumni award hici ns pub pcp year 1 shanghai_df . query ( \"alumni < 20\" ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } world_rank university_name national_rank total_score alumni award hici ns pub pcp year 12 13 University of California, San Diego 11 51.0 17.7 34.7 59.8 56.5 64.5 46.6 2005 17 18 University of California, San Francisco 16 47.8 0.0 37.6 55.6 57.9 58.8 45.2 2005 33 34 University of California, Santa Barbara 26 36.9 0.0 36.0 42.3 39.0 44.1 35.8 2005 34 35 University of Colorado at Boulder 27 36.3 16.6 29.8 40.8 36.6 46.3 29.5 2005 38 39 Pennsylvania State University - University Park 30 33.4 14.0 0.0 45.8 37.9 59.9 24.0 2005 39 39 Vanderbilt University 30 33.4 12.5 30.2 34.2 24.5 49.2 35.6 2005 40 41 University of California, Davis 32 32.9 0.0 0.0 46.5 34.5 64.0 29.8 2005 42 43 Rutgers, The State University of New Jersey - ... 33 32.3 15.4 20.4 36.9 32.9 47.1 24.1 2005 47 47 University of California, Irvine 35 31.8 0.0 30.0 32.4 28.5 48.2 31.1 2005 49 50 University of Southern California 37 31.7 0.0 27.3 37.7 23.6 52.8 25.8 2005 54 55 University of North Carolina at Chapel Hill 39 30.3 12.5 0.0 35.1 32.8 59.5 27.3 2005 55 56 The Australian National University 1 30.2 17.7 12.9 36.9 29.0 45.1 27.8 2005 57 57 University of Florida 40 30.0 15.4 0.0 35.1 25.0 65.2 25.8 2005 58 57 University of Zurich 2 30.0 12.5 27.3 19.2 30.3 47.2 30.6 2005 61 62 Osaka University 3 29.3 12.5 0.0 23.6 31.1 66.8 29.2 2005 62 63 The Ohio State University - Columbus 41 29.2 17.7 0.0 40.8 21.5 61.2 19.5 2005 63 64 University of Bristol 7 28.8 10.9 18.2 30.4 24.5 47.5 27.4 2005 70 71 University of Heidelberg 3 28.0 10.9 27.7 20.8 20.9 48.1 26.9 2005 72 73 Tohoku University 4 27.8 18.8 0.0 19.2 26.9 65.3 29.0 2005 73 73 University of Arizona 44 27.8 0.0 0.0 29.4 36.8 55.8 25.7 2005 74 75 Purdue University - West Lafayette 45 27.7 18.8 17.1 27.2 21.4 49.8 19.4 2005 75 76 University of Helsinki 1 27.4 18.8 18.2 15.7 21.4 54.5 27.5 2005 76 77 Michigan State University 46 26.9 12.5 0.0 37.7 26.6 51.0 18.7 2005 79 80 Boston University 48 26.1 15.4 0.0 31.4 28.1 50.8 17.5 2005 80 80 King's College London 9 26.1 16.6 23.5 20.8 17.4 44.6 24.8 2005 81 82 University of Melbourne 2 26.0 15.4 14.4 22.2 18.7 53.5 19.9 2005 82 83 University of Nottingham 10 25.9 15.4 20.4 20.8 19.0 45.6 24.8 2005 85 86 Brown University 49 25.4 0.0 13.9 29.4 25.5 40.7 27.9 2005 86 87 Indiana University Bloomington 50 25.2 14.0 18.2 24.8 21.2 42.0 18.2 2005 88 89 Texas A&M University - College Station 51 25.1 0.0 0.0 32.4 24.4 55.0 20.4 2005 ... ... ... ... ... ... ... ... ... ... ... ... 4867 401-500 University of Jena 29-39 NaN 0.0 0.0 0.0 9.3 34.0 17.1 2015 4868 401-500 University of Jyvaskyla 4-6 NaN 0.0 0.0 3.6 10.3 26.7 14.1 2015 4869 401-500 University of Konstanz 29-39 NaN 0.0 0.0 12.1 11.4 22.2 13.5 2015 4870 401-500 University of KwaZulu-Natal 3-4 NaN 0.0 0.0 3.6 8.4 32.8 16.6 2015 4871 401-500 University of Ljubljana 1 NaN 0.0 0.0 0.0 7.7 35.1 14.2 2015 4872 401-500 University of Maryland, Baltimore County 126-146 NaN 0.0 0.0 17.4 6.5 17.8 17.3 2015 4873 401-500 University of Milan - Bicocca 11-20 NaN 0.0 0.0 5.0 5.6 30.9 21.4 2015 4874 401-500 University of Nice Sophia Antipolis 19-22 NaN 0.0 0.0 3.6 16.3 26.2 12.7 2015 4875 401-500 University of Oklahoma - Norman 126-146 NaN 0.0 0.0 5.1 10.0 28.0 14.0 2015 4876 401-500 University of Palermo 11-20 NaN 0.0 0.0 6.3 6.6 28.2 14.8 2015 4877 401-500 University of Parma 11-20 NaN 0.0 0.0 13.6 2.1 26.7 19.6 2015 4878 401-500 University of Pavia 11-20 NaN 0.0 0.0 5.0 5.7 30.7 19.7 2015 4879 401-500 University of Perugia 11-20 NaN 0.0 0.0 3.6 7.5 29.3 18.5 2015 4880 401-500 University of Quebec 19-20 NaN 0.0 0.0 0.0 9.8 33.3 16.8 2015 4881 401-500 University of Regensburg 29-39 NaN 0.0 0.0 3.6 13.9 27.7 15.2 2015 4882 401-500 University of Rennes 1 19-22 NaN 0.0 0.0 3.6 9.2 28.1 11.2 2015 4883 401-500 University of Rhode Island 126-146 NaN 0.0 0.0 15.2 6.1 21.1 16.0 2015 4884 401-500 University of Roma - Tor Vergata 11-20 NaN 0.0 0.0 0.0 8.8 33.7 19.2 2015 4885 401-500 University of Rostock 29-39 NaN 0.0 0.0 8.6 8.4 25.0 13.5 2015 4886 401-500 University of Santiago Compostela 9-13 NaN 0.0 0.0 7.1 6.1 31.1 13.2 2015 4887 401-500 University of Science, Malaysia 2 NaN 0.0 0.0 7.1 3.3 30.6 15.7 2015 4888 401-500 University of Seville 9-13 NaN 0.0 0.0 0.0 7.5 33.7 11.3 2015 4889 401-500 University of Surrey 34-37 NaN 0.0 0.0 8.6 4.9 27.0 18.0 2015 4890 401-500 University of Szeged 1-2 NaN 0.0 13.3 3.6 3.4 21.8 12.8 2015 4891 401-500 University of the Basque Country 9-13 NaN 0.0 0.0 3.6 7.1 36.1 13.5 2015 4892 401-500 University of Trieste 11-20 NaN 0.0 0.0 5.0 10.9 25.1 20.1 2015 4893 401-500 University of Zaragoza 9-13 NaN 0.0 0.0 7.6 5.1 33.3 13.1 2015 4894 401-500 Utah State University 126-146 NaN 13.6 0.0 3.6 10.8 25.1 15.5 2015 4895 401-500 Vienna University of Technology 4-6 NaN 0.0 0.0 0.0 12.2 28.8 22.9 2015 4896 401-500 Wake Forest University 126-146 NaN 0.0 0.0 14.9 7.5 25.0 11.9 2015 4122 rows \u00d7 11 columns Method Chaining \u00b6 pipe() to chain operations and thus eliminate the need for intermediate DataFrames. Without this operator, instead of writing df.pipe(f).pipe(g).pipe(h) write: h(g(f(df))) . This becomes harder to follow once the number of nested functions grows large. 1 2 3 4 5 # Extract info def extract_info ( input_df , name ): df = input_df . copy () info_df = pd . DataFrame ({ 'nb_rows' : df . shape [ 0 ], 'nb_cols' : df . shape [ 1 ], 'name' : name }, index = range ( 1 )) return info_df 1 2 3 4 # Gather all info all_info = pd . concat ([ times_df . pipe ( extract_info , 'times' ), shanghai_df . pipe ( extract_info , 'shanghai' )]) print ( all_info ) 1 2 3 name nb_cols nb_rows 0 times 14 2603 0 shanghai 11 4897 Select the common columns. 1 2 3 4 common_columns = set ( shanghai_df . columns ) & set ( times_df . columns ) # Return `common_columns` print ( common_columns ) 1 {'year', 'university_name', 'total_score', 'world_rank'} Clean the Data \u00b6 1 2 3 4 5 # Clean up the `world_rank` def clean_world_rank ( input_df ): df = input_df . copy () df . world_rank = df . world_rank . str . split ( '-' ) . str [ 0 ] . str . split ( '=' ) . str [ 0 ] return df 1 2 3 4 5 # Assign the common years of `shanghai_df` and `times_df` to `common_years` common_years = set ( shanghai_df . year ) & set ( times_df . year ) # Print `common_years` print ( common_years ) 1 {2011, 2012, 2013, 2014, 2015} 1 2 3 4 # Filter years def filter_year ( input_df , years ): df = input_df . copy () return df . query ( 'year in {}' . format ( list ( years ))) 1 2 3 4 5 6 7 8 9 # Clean `times_df` and `shanghai_df` cleaned_times_df = ( times_df . loc [:, common_columns ] . pipe ( filter_year , common_years ) . pipe ( clean_world_rank ) . assign ( name = 'times' )) cleaned_shanghai_df = ( shanghai_df . loc [:, common_columns ] . pipe ( filter_year , common_years ) . pipe ( clean_world_rank ) . assign ( name = 'shanghai' )) Concatenate into a single DataFrame \u00b6 38% of data missing from the total_score column : drop this column with the .drop method. 1 2 3 4 5 6 7 8 # Compose `ranking_df` with `cleaned_times_df` and `cleaned_shanghai_df` ranking_df = pd . concat ([ cleaned_times_df , cleaned_shanghai_df ]) # Calculate the percentage of missing data missing_data = 100 * pd . isnull ( ranking_df . total_score ) . sum () / len ( ranking_df ) # Drop the `total_score` column of `ranking_df` ranking_df = ranking_df . drop ( 'total_score' , axis = 1 ) Memory Optimization \u00b6 Memory can start to play a big part in how fast the pipelines can run. Without the \u201cdeep\u201d flag turned on, Pandas won\u2019t estimate memory consumption for the object dtype: category when dealing with categorical data, etc. int64 or even int16 takes less memory. 1 2 # Print the memory usage of `ranking_df` ranking_df . info () 1 2 3 4 5 6 7 8 9 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 3686 entries, 0 to 4896 Data columns (total 4 columns): year 3686 non-null int64 world_rank 3686 non-null object university_name 3685 non-null object name 3686 non-null object dtypes: int64(1), object(3) memory usage: 144.0+ KB 1 2 # Print the deep memory usage of `ranking_df` ranking_df . info ( memory_usage = \"deep\" ) 1 2 3 4 5 6 7 8 9 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 3686 entries, 0 to 4896 Data columns (total 4 columns): year 3686 non-null int64 world_rank 3686 non-null object university_name 3685 non-null object name 3686 non-null object dtypes: int64(1), object(3) memory usage: 803.1 KB Cast Object Types \u00b6 \u2026to more appropriate ones. 1 2 3 4 5 6 7 8 9 def memory_change ( input_df , column , dtype ): df = input_df . copy () old = round ( df [ column ] . memory_usage ( deep = True ) / 1024 , 2 ) # In KB new = round ( df [ column ] . astype ( dtype ) . memory_usage ( deep = True ) / 1024 , 2 ) # In KB change = round ( 100 * ( old - new ) / ( old ), 2 ) report = ( \"The inital memory footprint for {column} is: {old}KB. \\n \" \"The casted {column} now takes: {new}KB. \\n \" \"A change of {change} %.\" ) . format ( ** locals ()) return report 1 2 3 # parameters: # input_df, column, dtype print ( memory_change ( ranking_df , 'world_rank' , 'int16' )) 1 2 3 The inital memory footprint for world_rank is: 244.43KB. The casted world_rank now takes: 36.0KB. A change of 85.27 %. 1 print ( memory_change ( ranking_df , 'university_name' , 'category' )) 1 2 3 The inital memory footprint for university_name is: 329.98KB. The casted university_name now takes: 121.37KB. A change of 63.22 %. 1 print ( memory_change ( ranking_df , 'name' , 'category' )) 1 2 3 The inital memory footprint for name is: 257.49KB. The casted name now takes: 32.6KB. A change of 87.34 %. 1 2 # Cast `world_rank` as type `int16` ranking_df . world_rank = ranking_df . world_rank . astype ( 'int16' ) 1 2 # Cast `unversity_name` as type `category` ranking_df . university_name = ranking_df . university_name . astype ( 'category' ) 1 2 # Cast `name` as type `category` ranking_df . name = ranking_df . name . astype ( 'category' ) 1 2 # Double check the memory usage after type casting ranking_df . info ( memory_usage = 'deep' ) 1 2 3 4 5 6 7 8 9 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 3686 entries, 0 to 4896 Data columns (total 4 columns): year 3686 non-null int64 university_name 3685 non-null category world_rank 3686 non-null int16 name 3686 non-null category dtypes: category(2), int16(1), int64(1) memory usage: 161.2 KB From 803.1 KB! We have a well-formed data set (i.e. it is in a tidy state) with an optimized memory footprint, data analysis can start. Replace, Rank, Subset, groupby \u00b6 Replace \u00b6 \u2018Massachusetts Institute of Technology (MIT)\u2019 and \u2018Massachusetts Institute of Technology\u2019 are two different records of the same university. Thus, change the first name to the latter. 1 2 # Query for the rows with university name 'Massachusetts Institute of Technology (MIT)' print ( ranking_df . query ( \"university_name == 'Massachusetts Institute of Technology (MIT)'\" )) 1 2 3 4 5 6 year university_name world_rank name 3016 2011 Massachusetts Institute of Technology (MIT) 3 shanghai 3516 2012 Massachusetts Institute of Technology (MIT) 3 shanghai 3801 2013 Massachusetts Institute of Technology (MIT) 4 shanghai 3899 2014 Massachusetts Institute of Technology (MIT) 3 shanghai 4399 2015 Massachusetts Institute of Technology (MIT) 3 shanghai 1 ranking_df . loc [ ranking_df . university_name == 'Massachusetts Institute of Technology (MIT)' , 'university_name' ] = 'Massachusetts Institute of Technology' 1 ranking_df . university_name . head () 1 2 3 4 5 6 7 0 Harvard University 1 California Institute of Technology 2 Massachusetts Institute of Technology 3 Stanford University 4 Princeton University Name: university_name, dtype: category Categories (785, object): [Aalborg University, Aalto University, Aarhus University, Aberystwyth University, ..., \u00c9cole Normale Sup\u00e9rieure, \u00c9cole Normale Sup\u00e9rieure de Lyon, \u00c9cole Polytechnique, \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne] Rank, Subset, groupby \u00b6 To find the 5 (more generally n ) top universities over the years, for each ranking system, here is how to do it in pseudo-code: For each year (in the year column) and for each ranking system (in the name column): Select the subset of the data for this given year and the given ranking system. Select the 5 top universities and store them in a list. Store the result in a dictionary with (year, name) as key and the list of the universities (in descending order) as the value. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Load in `itertools` import itertools # Initialize `ranking` ranking = {} for year , name in itertools . product ( common_years , [ \"times\" , \"shanghai\" ]): s = ( ranking_df . loc [ lambda df : (( df . year == year ) & ( df . name == name ) & ( df . world_rank . isin ( range ( 1 , 6 )))), :] . sort_values ( 'world_rank' , ascending = False ) . university_name ) ranking [( year , name )] = list ( s ) # Print `ranking` print ( ranking ) 1 {(2011, 'times'): ['Princeton University', 'Stanford University', 'Massachusetts Institute of Technology', 'California Institute of Technology', 'Harvard University'], (2011, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2012, 'times'): ['Princeton University', 'University of Oxford', 'Harvard University', 'Stanford University', 'California Institute of Technology'], (2012, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2013, 'times'): ['Massachusetts Institute of Technology', 'Harvard University', 'Stanford University', 'University of Oxford', 'California Institute of Technology'], (2013, 'shanghai'): ['University of Cambridge', 'Massachusetts Institute of Technology', 'University of California, Berkeley', 'Stanford University', 'Harvard University'], (2014, 'times'): ['Massachusetts Institute of Technology', 'Stanford University', 'Harvard University', 'University of Oxford', 'California Institute of Technology'], (2014, 'shanghai'): ['University of Cambridge', 'University of California-Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2015, 'times'): ['University of Cambridge', 'Stanford University', 'University of Oxford', 'Harvard University', 'California Institute of Technology'], (2015, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University']} We have this ranking dictionary, let\u2019s find out how much (in percentage) both ranking methods differ over the years: the two are 100% set-similar if the selected 5-top universities are the same even though they aren\u2019t ranked the same. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Import `defaultdict` from collections import defaultdict # Initialize `compare` compare = defaultdict ( list ) # Initialize `exact_similarity` and `set_similarity` exact_similarity = {} set_similarity = {} for ( year , method ), universities in ranking . items (): compare [ year ] . append ( universities ) for year , ranks in compare . items (): set_similarity [ year ] = 100 * len ( set ( ranks [ 0 ]) & set ( ranks [ 1 ])) / 5.0 # Print `set_similarity` print ( set_similarity ) 1 {2011: 60.0, 2012: 40.0, 2013: 60.0, 2014: 60.0, 2015: 60.0} Is there a better, more idiomatic Pandas way? 1 2 3 4 5 # Construct a DataFrame with the top 5 universities top_5_df = ranking_df . loc [ lambda df : df . world_rank . isin ( range ( 1 , 6 )), :] # Print the first rows of `top_5_df` top_5_df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } year university_name world_rank name 0 2011 Harvard University 1 times 1 2011 California Institute of Technology 2 times 2 2011 Massachusetts Institute of Technology 3 times 3 2011 Stanford University 4 times 4 2011 Princeton University 5 times 1 top_5_df . tail () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } year university_name world_rank name 4397 2015 Harvard University 1 shanghai 4398 2015 Stanford University 2 shanghai 4399 2015 Massachusetts Institute of Technology 3 shanghai 4400 2015 University of California, Berkeley 4 shanghai 4401 2015 University of Cambridge 5 shanghai 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Compute the similarity def compute_set_similarity ( s ): pivoted = s . pivot ( values = 'world_rank' , columns = 'name' , index = 'university_name' ) . dropna () set_simlarity = 100 * len (( set ( pivoted [ 'shanghai' ] . index ) & set ( pivoted [ 'times' ] . index ))) / 5 return set_simlarity # Group `top_5_df` by `year` grouped_df = top_5_df . groupby ( 'year' ) # Use `compute_set_similarity` to construct a DataFrame setsimilarity_df = pd . DataFrame ({ 'set_similarity' : grouped_df . apply ( compute_set_similarity )}) . reset_index () # Print the first rows of `setsimilarity_df` setsimilarity_df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } year set_similarity 0 2011 60.0 1 2012 40.0 2 2013 60.0 3 2014 60.0 4 2015 60.0 Visualization \u00b6 Matplotlib \u00b6 1 import matplotlib.pyplot as plt 1 2 3 4 # Plot a scatterplot with `total_score` and `alumni` shanghai_df . plot . scatter ( 'total_score' , 'alumni' , c = 'year' , colormap = 'viridis' ) plt . show () Remove values \u00b6 There are some 0 values for the alumni column (0, -, NaN , etc.). Remove them. 1 2 3 4 5 6 7 8 # Replace `-` entries with NaN values times_df [ 'total_score' ] = times_df [ 'total_score' ] . replace ( \"-\" , \"NaN\" ) . astype ( 'float' ) # Drop all rows with NaN values for `num_students` times_df = times_df . dropna ( subset = [ 'num_students' ], how = 'all' ) # Cast the remaining rows with `num_students` as int times_df [ 'num_students' ] = times_df [ 'num_students' ] . astype ( 'int' ) 1 2 3 4 # Plot a scatterplot with `total_score` and `num_students` times_df . plot . scatter ( 'total_score' , 'num_students' , c = 'year' , colormap = 'viridis' ) plt . show () Seaborn \u00b6 The Seaborn plotting tool is mainly used to create statistical plots that are visually appealing. 1 2 3 4 import seaborn as sns # Set the Seaborn theme if desired sns . set_style ( 'darkgrid' ) 1 2 3 4 5 6 7 8 # Abbreviate country names of United States and United Kingdom times_df [ 'country' ] = times_df [ 'country' ] . replace ( \"United States of America\" , \"USA\" ) . replace ( \"United Kingdom\" , \"UK\" ) # Count the frequency of countries count = times_df [ 'country' ] . value_counts ()[: 10 ] # Convert the top 10 countries to a DataFrame df = count . to_frame () 1 2 3 4 5 6 # Reset the index #df.reset_index(level=0, inplace=True) # or... df [ 'index1' ] = df . index df .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } country index1 USA 625 USA UK 286 UK Germany 150 Germany Australia 117 Australia Canada 108 Canada Japan 98 Japan Italy 94 Italy China 82 China Netherlands 75 Netherlands France 73 France 1 2 # Rename the columns df . columns = [ 'count' , 'country' ,] 1 2 3 4 5 # Plot a barplot with `country` and `count` sns . barplot ( x = 'country' , y = 'count' , data = df ) sns . despine () plt . show () Filter rows \u00b6 1 times_df_filtered = times_df . loc [ times_df [ 'country' ] . isin ([ 'USA' , 'UK' , 'Canada' , 'Australia' , 'Germany' ])] 1 2 3 4 5 # Barplot with `country` and `total_score` sns . barplot ( x = 'country' , y = 'total_score' , data = times_df_filtered ) sns . despine () plt . show () Correlation \u00b6 1 2 3 import numpy as np np . seterr ( invalid = 'ignore' ) 1 {'divide': 'warn', 'invalid': 'warn', 'over': 'warn', 'under': 'ignore'} 1 2 3 sns . pairplot ( times_df , hue = 'country' ) plt . show () 1 2 3 g = sns . FacetGrid ( times_df_filtered , col = 'country' , hue = 'country' ) g . map ( sns . regplot , 'year' , 'total_score' ) . set ( xlim = ( 2010 , 2015 ), ylim = ( 0 , 100 )) g . fig . subplots_adjust ( wspace =. 2 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 sns . set ( style = \"white\" ) # Compute the correlation matrix corr = times_df . corr () # Generate a mask for the upper triangle mask = np . zeros_like ( corr , dtype = np . bool ) mask [ np . triu_indices_from ( mask )] = True # Set up the matplotlib figure f , ax = plt . subplots ( figsize = ( 11 , 9 )) # Generate a custom diverging colormap cmap = sns . diverging_palette ( 220 , 10 , as_cmap = True ) # Draw the heatmap with the mask and correct aspect ratio sns . heatmap ( corr , mask = mask , cmap = cmap , vmax =. 3 , square = True , linewidths =. 5 , ax = ax ) plt . show () To go beyond \u00b6 with groupby .","title":"Write Idiomatic Pandas Code"},{"location":"Write Idiomatic Pandas Code/#the-data","text":"The datasets are downloadable from Kaggle . 1 2 3 4 5 6 7 8 9 10 % pylab inline import pandas as pd # Import Times Higher Education World University Rankings data # https://www.timeshighereducation.com/world-university-rankings times_df = pd . read_csv ( 'timesData.csv' , thousands = \",\" ) # Import Academic Ranking of World Universities data # http://www.shanghairanking.com/ shanghai_df = pd . read_csv ( 'shanghaiData.csv' ) 1 Populating the interactive namespace from numpy and matplotlib","title":"The Data"},{"location":"Write Idiomatic Pandas Code/#quickly-inspecting-the-data","text":"1 2 # Return the first rows of `times_df` times_df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } world_rank university_name country teaching international research citations income total_score num_students student_staff_ratio international_students female_male_ratio year 0 1 Harvard University United States of America 99.7 72.4 98.7 98.8 34.5 96.1 20152.0 8.9 25% NaN 2011 1 2 California Institute of Technology United States of America 97.7 54.6 98.0 99.9 83.7 96.0 2243.0 6.9 27% 33 : 67 2011 2 3 Massachusetts Institute of Technology United States of America 97.8 82.3 91.4 99.9 87.5 95.6 11074.0 9.0 33% 37 : 63 2011 3 4 Stanford University United States of America 98.3 29.5 98.1 99.2 64.3 94.3 15596.0 7.8 22% 42 : 58 2011 4 5 Princeton University United States of America 90.9 70.3 95.4 99.9 - 94.2 7929.0 8.4 27% 45 : 55 2011 1 2 # Describe `times_df` times_df . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } teaching research citations num_students student_staff_ratio year count 2603.000000 2603.000000 2603.000000 2544.000000 2544.000000 2603.000000 mean 37.801498 35.910257 60.921629 23873.758648 18.445283 2014.075682 std 17.604218 21.254805 23.073219 17675.946877 11.458698 1.685733 min 9.900000 2.900000 1.200000 462.000000 0.600000 2011.000000 25% 24.700000 19.600000 45.500000 12637.750000 11.975000 2013.000000 50% 33.900000 30.500000 62.500000 20851.000000 16.100000 2014.000000 75% 46.400000 47.250000 79.050000 29991.000000 21.500000 2016.000000 max 99.700000 99.400000 100.000000 379231.000000 162.600000 2016.000000 1 2 # Return the first rows of `shanghai_df` shanghai_df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } world_rank university_name national_rank total_score alumni award hici ns pub pcp year 0 1 Harvard University 1 100.0 100.0 100.0 100.0 100.0 100.0 72.4 2005 1 2 University of Cambridge 1 73.6 99.8 93.4 53.3 56.6 70.9 66.9 2005 2 3 Stanford University 2 73.4 41.1 72.2 88.5 70.9 72.3 65.0 2005 3 4 University of California, Berkeley 3 72.8 71.8 76.0 69.4 73.9 72.2 52.7 2005 4 5 Massachusetts Institute of Technology (MIT) 4 70.1 74.0 80.6 66.7 65.8 64.3 53.0 2005 1 2 # Describe `shanghai_df` shanghai_df . describe () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } total_score alumni award hici ns pub pcp year count 1101.000000 4896.000000 4895.00000 4895.000000 4875.000000 4895.000000 4895.000000 4897.000000 mean 36.383470 9.161724 7.69191 16.221491 16.078503 38.254648 21.242329 2009.658566 std 13.557186 14.140636 15.49411 14.382710 12.511529 13.050809 9.254351 3.197576 min 23.500000 0.000000 0.00000 0.000000 0.000000 7.300000 8.300000 2005.000000 25% 27.400000 0.000000 0.00000 7.300000 8.000000 28.900000 15.600000 2007.000000 50% 31.300000 0.000000 0.00000 12.600000 12.800000 36.000000 19.000000 2009.000000 75% 41.800000 15.600000 13.40000 21.700000 19.800000 45.300000 24.500000 2012.000000 max 100.000000 100.000000 100.00000 100.000000 100.000000 100.000000 100.000000 2015.000000","title":"Quickly Inspecting the Data"},{"location":"Write Idiomatic Pandas Code/#index-and-pull-values","text":"[] for row numbers or column names, loc[] , iloc[] , query . 1 2 # Retrieve the total score of the first row print ( times_df . loc [ 0 , 'total_score' ]) 1 96.1 1 2 # Retrieve rows 0 and 1 print ( times_df [ 0 : 2 ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 world_rank university_name country \\ 0 1 Harvard University United States of America 1 2 California Institute of Technology United States of America teaching international research citations income total_score \\ 0 99.7 72.4 98.7 98.8 34.5 96.1 1 97.7 54.6 98.0 99.9 83.7 96.0 num_students student_staff_ratio international_students female_male_ratio \\ 0 20152.0 8.9 25% NaN 1 2243.0 6.9 27% 33 : 67 year 0 2011 1 2011 1 2 # Retrieve the values at columns and rows 1-3 print ( times_df . iloc [ 1 : 4 , 1 : 4 ]) 1 2 3 4 university_name country teaching 1 California Institute of Technology United States of America 97.7 2 Massachusetts Institute of Technology United States of America 97.8 3 Stanford University United States of America 98.3 1 2 # Retrieve the column `total_score` print ( times_df [ 'total_score' ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 0 96.1 1 96.0 2 95.6 3 94.3 4 94.2 5 91.2 6 91.2 7 91.1 8 90.6 9 89.5 10 87.7 11 86.9 12 86.4 13 83.9 14 83.4 15 83.4 16 82.0 17 81.0 18 79.5 19 79.3 20 79.2 21 78.4 22 78.0 23 76.5 24 75.9 25 75.6 26 75.3 27 75.1 28 75.0 29 73.8 ... 2573 - 2574 - 2575 - 2576 - 2577 - 2578 - 2579 - 2580 - 2581 - 2582 - 2583 - 2584 - 2585 - 2586 - 2587 - 2588 - 2589 - 2590 - 2591 - 2592 - 2593 - 2594 - 2595 - 2596 - 2597 - 2598 - 2599 - 2600 - 2601 - 2602 - Name: total_score, Length: 2603, dtype: object 1 2 # Are the last entries after 2006? print ( shanghai_df . loc [: - 10 , 'year' ] > 2006 ) 1 Series([], Name: year, dtype: bool) 1 2 # Was the alumni count higher than 90 for the first ten universities? print ( shanghai_df . loc [ 0 : 11 , 'alumni' ] > 90 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 0 True 1 True 2 False 3 False 4 False 5 False 6 False 7 False 8 False 9 False 10 False 11 False Name: alumni, dtype: bool 1 2 3 4 5 # Query `shanghai_df` for universities with total score between 40 and 50 average_schools = shanghai_df . query ( 'total_score > 0 and total_score < 50' ) # Print the result print ( average_schools ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 world_rank university_name \\ 15 16 University of Wisconsin - Madison 16 17 University of Washington 17 18 University of California, San Francisco 18 19 The Johns Hopkins University 19 20 The University of Tokyo 20 21 University of Michigan - Ann Arbor 21 22 Kyoto University 22 23 The Imperial College of Science, Technology an... 23 24 University of Toronto 24 25 University of Illinois at Urbana-Champaign 25 26 University College London 26 27 Swiss Federal Institute of Technology Zurich 27 28 Washington University in St. Louis 28 29 New York University 29 30 Rockefeller University 30 31 Northwestern University 31 32 Duke University 32 32 University of Minnesota, Twin Cities 33 34 University of California, Santa Barbara 34 35 University of Colorado at Boulder 35 36 The University of Texas at Austin 36 37 University of British Columbia 37 38 The University of Texas Southwestern Medical C... 38 39 Pennsylvania State University - University Park 39 39 Vanderbilt University 40 41 University of California, Davis 41 41 Utrecht University 42 43 Rutgers, The State University of New Jersey - ... 43 43 University of Pittsburgh 44 45 Karolinska Institute ... ... ... 4467 71 Ghent University 4468 72 Ecole Normale Superieure - Paris 4469 73 Aarhus University 4470 73 Boston University 4471 75 Brown University 4472 75 University of Groningen 4473 77 Nagoya University 4474 77 Stockholm University 4475 77 Technion-Israel Institute of Technology 4476 77 The Australian National University 4477 77 The University of Queensland 4478 82 Leiden University 4479 83 University of Florida 4480 84 Rice University 4481 85 Osaka University 4482 86 Moscow State University 4483 87 The University of Western Australia 4484 87 University of Basel 4485 87 University of Strasbourg 4486 90 KU Leuven 4487 90 University of Arizona 4488 92 University of Warwick 4489 93 Arizona State University 4490 93 University of California, Santa Cruz 4491 93 University of Utah 4492 96 McMaster University 4493 97 University of Bonn 4494 98 VU University Amsterdam 4495 99 Michigan State University 4496 100 Texas A&amp;M University national_rank total_score alumni award hici ns pub pcp year 15 14 49.2 43.0 36.3 52.1 46.3 68.7 29.0 2005 16 15 48.4 28.8 32.4 53.9 47.1 73.8 27.2 2005 17 16 47.8 0.0 37.6 55.6 57.9 58.8 45.2 2005 18 17 46.9 51.4 28.3 41.6 52.2 67.7 24.9 2005 19 1 46.7 36.0 14.4 38.5 52.1 86.5 34.7 2005 20 18 44.9 43.0 0.0 61.9 43.0 76.5 30.9 2005 21 2 43.8 39.7 34.1 34.2 37.0 72.3 31.1 2005 22 3 43.7 20.8 38.1 40.8 38.2 64.6 40.3 2005 23 1 43.1 28.1 19.7 39.3 38.9 76.7 41.9 2005 24 19 42.8 41.6 37.4 44.4 34.1 58.0 26.0 2005 25 4 42.6 30.7 32.9 37.7 41.5 60.5 38.8 2005 26 1 41.7 40.2 37.0 35.1 41.1 43.4 52.4 2005 27 20 40.7 25.1 26.6 38.5 46.5 53.9 39.9 2005 28 21 38.8 33.8 25.0 43.0 35.3 55.4 26.3 2005 29 22 38.2 22.6 59.8 28.3 44.1 24.0 35.9 2005 30 23 37.9 21.7 19.3 44.4 33.8 57.6 36.2 2005 31 24 37.7 20.8 0.0 47.1 45.3 60.8 38.9 2005 32 24 37.7 36.0 0.0 49.7 35.2 68.4 23.8 2005 33 26 36.9 0.0 36.0 42.3 39.0 44.1 35.8 2005 34 27 36.3 16.6 29.8 40.8 36.6 46.3 29.5 2005 35 28 35.5 21.7 17.1 49.1 30.0 54.8 21.7 2005 36 2 35.4 20.8 19.3 32.4 32.5 60.4 33.9 2005 37 29 34.8 24.3 33.9 31.4 38.2 37.9 31.0 2005 38 30 33.4 14.0 0.0 45.8 37.9 59.9 24.0 2005 39 30 33.4 12.5 30.2 34.2 24.5 49.2 35.6 2005 40 32 32.9 0.0 0.0 46.5 34.5 64.0 29.8 2005 41 1 32.9 30.7 21.4 27.2 27.3 55.7 25.9 2005 42 33 32.3 15.4 20.4 36.9 32.9 47.1 24.1 2005 43 33 32.3 25.1 0.0 40.1 25.9 64.3 28.2 2005 44 1 32.1 30.7 27.8 33.3 19.7 47.3 25.1 2005 ... ... ... ... ... ... ... ... ... ... 4467 1 27.8 5.1 13.3 26.9 18.3 57.5 34.5 2015 4468 3 27.6 48.9 28.0 6.2 19.5 26.4 60.5 2015 4469 2 27.3 11.5 22.1 12.3 25.8 51.8 31.0 2015 4470 42 27.3 11.5 11.5 29.1 26.3 49.5 21.8 2015 4471 43 27.0 14.5 13.3 26.2 25.1 43.6 32.8 2015 4472 2 27.0 0.0 18.8 23.0 21.0 52.6 32.7 2015 4473 3 26.7 29.0 25.3 16.8 17.7 44.3 23.1 2015 4474 3 26.7 24.1 27.4 18.1 19.4 40.4 25.6 2015 4475 2 26.7 23.5 37.6 15.2 18.3 33.3 28.2 2015 4476 2 26.7 13.6 19.2 24.8 20.1 45.1 29.1 2015 4477 2 26.7 12.6 0.0 22.0 24.0 63.2 29.3 2015 4478 3 26.5 17.8 9.4 25.7 22.0 46.9 32.9 2015 4479 44 26.2 17.0 0.0 30.9 21.0 58.7 17.3 2015 4480 45 26.0 16.2 21.7 28.1 22.8 29.2 34.3 2015 4481 4 25.7 8.9 0.0 31.6 26.7 51.7 21.7 2015 4482 1 25.3 41.4 33.0 0.0 7.7 46.4 31.3 2015 4483 4 24.9 13.6 14.1 24.1 14.5 47.5 28.9 2015 4484 4 24.9 19.2 16.3 17.4 21.4 39.2 35.0 2015 4485 4 24.9 25.1 28.8 15.9 19.0 34.6 21.7 2015 4486 2 24.7 0.0 0.0 30.1 18.6 56.6 30.4 2015 4487 46 24.7 14.5 0.0 27.2 27.5 48.4 20.3 2015 4488 9 24.6 0.0 29.8 23.7 14.0 39.3 26.8 2015 4489 47 24.5 0.0 20.0 22.2 25.5 42.6 19.1 2015 4490 47 24.5 0.0 0.0 37.9 33.9 29.0 37.6 2015 4491 47 24.5 0.0 11.5 26.5 25.5 46.7 18.7 2015 4492 4 24.4 12.6 18.8 23.2 15.1 44.5 22.5 2015 4493 4 24.3 15.4 19.8 17.4 21.1 39.8 25.9 2015 4494 4 24.2 0.0 0.0 27.8 18.0 55.5 33.3 2015 4495 50 24.0 8.9 0.0 30.7 21.8 50.6 18.9 2015 4496 51 23.9 0.0 0.0 34.3 22.7 49.5 20.9 2015 [948 rows x 11 columns] 1 shanghai_df . query ( \"national_rank == 1 and world_rank == 1\" ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } world_rank university_name national_rank total_score alumni award hici ns pub pcp year 1 shanghai_df . query ( \"alumni < 20\" ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } world_rank university_name national_rank total_score alumni award hici ns pub pcp year 12 13 University of California, San Diego 11 51.0 17.7 34.7 59.8 56.5 64.5 46.6 2005 17 18 University of California, San Francisco 16 47.8 0.0 37.6 55.6 57.9 58.8 45.2 2005 33 34 University of California, Santa Barbara 26 36.9 0.0 36.0 42.3 39.0 44.1 35.8 2005 34 35 University of Colorado at Boulder 27 36.3 16.6 29.8 40.8 36.6 46.3 29.5 2005 38 39 Pennsylvania State University - University Park 30 33.4 14.0 0.0 45.8 37.9 59.9 24.0 2005 39 39 Vanderbilt University 30 33.4 12.5 30.2 34.2 24.5 49.2 35.6 2005 40 41 University of California, Davis 32 32.9 0.0 0.0 46.5 34.5 64.0 29.8 2005 42 43 Rutgers, The State University of New Jersey - ... 33 32.3 15.4 20.4 36.9 32.9 47.1 24.1 2005 47 47 University of California, Irvine 35 31.8 0.0 30.0 32.4 28.5 48.2 31.1 2005 49 50 University of Southern California 37 31.7 0.0 27.3 37.7 23.6 52.8 25.8 2005 54 55 University of North Carolina at Chapel Hill 39 30.3 12.5 0.0 35.1 32.8 59.5 27.3 2005 55 56 The Australian National University 1 30.2 17.7 12.9 36.9 29.0 45.1 27.8 2005 57 57 University of Florida 40 30.0 15.4 0.0 35.1 25.0 65.2 25.8 2005 58 57 University of Zurich 2 30.0 12.5 27.3 19.2 30.3 47.2 30.6 2005 61 62 Osaka University 3 29.3 12.5 0.0 23.6 31.1 66.8 29.2 2005 62 63 The Ohio State University - Columbus 41 29.2 17.7 0.0 40.8 21.5 61.2 19.5 2005 63 64 University of Bristol 7 28.8 10.9 18.2 30.4 24.5 47.5 27.4 2005 70 71 University of Heidelberg 3 28.0 10.9 27.7 20.8 20.9 48.1 26.9 2005 72 73 Tohoku University 4 27.8 18.8 0.0 19.2 26.9 65.3 29.0 2005 73 73 University of Arizona 44 27.8 0.0 0.0 29.4 36.8 55.8 25.7 2005 74 75 Purdue University - West Lafayette 45 27.7 18.8 17.1 27.2 21.4 49.8 19.4 2005 75 76 University of Helsinki 1 27.4 18.8 18.2 15.7 21.4 54.5 27.5 2005 76 77 Michigan State University 46 26.9 12.5 0.0 37.7 26.6 51.0 18.7 2005 79 80 Boston University 48 26.1 15.4 0.0 31.4 28.1 50.8 17.5 2005 80 80 King's College London 9 26.1 16.6 23.5 20.8 17.4 44.6 24.8 2005 81 82 University of Melbourne 2 26.0 15.4 14.4 22.2 18.7 53.5 19.9 2005 82 83 University of Nottingham 10 25.9 15.4 20.4 20.8 19.0 45.6 24.8 2005 85 86 Brown University 49 25.4 0.0 13.9 29.4 25.5 40.7 27.9 2005 86 87 Indiana University Bloomington 50 25.2 14.0 18.2 24.8 21.2 42.0 18.2 2005 88 89 Texas A&M University - College Station 51 25.1 0.0 0.0 32.4 24.4 55.0 20.4 2005 ... ... ... ... ... ... ... ... ... ... ... ... 4867 401-500 University of Jena 29-39 NaN 0.0 0.0 0.0 9.3 34.0 17.1 2015 4868 401-500 University of Jyvaskyla 4-6 NaN 0.0 0.0 3.6 10.3 26.7 14.1 2015 4869 401-500 University of Konstanz 29-39 NaN 0.0 0.0 12.1 11.4 22.2 13.5 2015 4870 401-500 University of KwaZulu-Natal 3-4 NaN 0.0 0.0 3.6 8.4 32.8 16.6 2015 4871 401-500 University of Ljubljana 1 NaN 0.0 0.0 0.0 7.7 35.1 14.2 2015 4872 401-500 University of Maryland, Baltimore County 126-146 NaN 0.0 0.0 17.4 6.5 17.8 17.3 2015 4873 401-500 University of Milan - Bicocca 11-20 NaN 0.0 0.0 5.0 5.6 30.9 21.4 2015 4874 401-500 University of Nice Sophia Antipolis 19-22 NaN 0.0 0.0 3.6 16.3 26.2 12.7 2015 4875 401-500 University of Oklahoma - Norman 126-146 NaN 0.0 0.0 5.1 10.0 28.0 14.0 2015 4876 401-500 University of Palermo 11-20 NaN 0.0 0.0 6.3 6.6 28.2 14.8 2015 4877 401-500 University of Parma 11-20 NaN 0.0 0.0 13.6 2.1 26.7 19.6 2015 4878 401-500 University of Pavia 11-20 NaN 0.0 0.0 5.0 5.7 30.7 19.7 2015 4879 401-500 University of Perugia 11-20 NaN 0.0 0.0 3.6 7.5 29.3 18.5 2015 4880 401-500 University of Quebec 19-20 NaN 0.0 0.0 0.0 9.8 33.3 16.8 2015 4881 401-500 University of Regensburg 29-39 NaN 0.0 0.0 3.6 13.9 27.7 15.2 2015 4882 401-500 University of Rennes 1 19-22 NaN 0.0 0.0 3.6 9.2 28.1 11.2 2015 4883 401-500 University of Rhode Island 126-146 NaN 0.0 0.0 15.2 6.1 21.1 16.0 2015 4884 401-500 University of Roma - Tor Vergata 11-20 NaN 0.0 0.0 0.0 8.8 33.7 19.2 2015 4885 401-500 University of Rostock 29-39 NaN 0.0 0.0 8.6 8.4 25.0 13.5 2015 4886 401-500 University of Santiago Compostela 9-13 NaN 0.0 0.0 7.1 6.1 31.1 13.2 2015 4887 401-500 University of Science, Malaysia 2 NaN 0.0 0.0 7.1 3.3 30.6 15.7 2015 4888 401-500 University of Seville 9-13 NaN 0.0 0.0 0.0 7.5 33.7 11.3 2015 4889 401-500 University of Surrey 34-37 NaN 0.0 0.0 8.6 4.9 27.0 18.0 2015 4890 401-500 University of Szeged 1-2 NaN 0.0 13.3 3.6 3.4 21.8 12.8 2015 4891 401-500 University of the Basque Country 9-13 NaN 0.0 0.0 3.6 7.1 36.1 13.5 2015 4892 401-500 University of Trieste 11-20 NaN 0.0 0.0 5.0 10.9 25.1 20.1 2015 4893 401-500 University of Zaragoza 9-13 NaN 0.0 0.0 7.6 5.1 33.3 13.1 2015 4894 401-500 Utah State University 126-146 NaN 13.6 0.0 3.6 10.8 25.1 15.5 2015 4895 401-500 Vienna University of Technology 4-6 NaN 0.0 0.0 0.0 12.2 28.8 22.9 2015 4896 401-500 Wake Forest University 126-146 NaN 0.0 0.0 14.9 7.5 25.0 11.9 2015 4122 rows \u00d7 11 columns","title":"Index and Pull Values"},{"location":"Write Idiomatic Pandas Code/#method-chaining","text":"pipe() to chain operations and thus eliminate the need for intermediate DataFrames. Without this operator, instead of writing df.pipe(f).pipe(g).pipe(h) write: h(g(f(df))) . This becomes harder to follow once the number of nested functions grows large. 1 2 3 4 5 # Extract info def extract_info ( input_df , name ): df = input_df . copy () info_df = pd . DataFrame ({ 'nb_rows' : df . shape [ 0 ], 'nb_cols' : df . shape [ 1 ], 'name' : name }, index = range ( 1 )) return info_df 1 2 3 4 # Gather all info all_info = pd . concat ([ times_df . pipe ( extract_info , 'times' ), shanghai_df . pipe ( extract_info , 'shanghai' )]) print ( all_info ) 1 2 3 name nb_cols nb_rows 0 times 14 2603 0 shanghai 11 4897 Select the common columns. 1 2 3 4 common_columns = set ( shanghai_df . columns ) & set ( times_df . columns ) # Return `common_columns` print ( common_columns ) 1 {'year', 'university_name', 'total_score', 'world_rank'}","title":"Method Chaining"},{"location":"Write Idiomatic Pandas Code/#clean-the-data","text":"1 2 3 4 5 # Clean up the `world_rank` def clean_world_rank ( input_df ): df = input_df . copy () df . world_rank = df . world_rank . str . split ( '-' ) . str [ 0 ] . str . split ( '=' ) . str [ 0 ] return df 1 2 3 4 5 # Assign the common years of `shanghai_df` and `times_df` to `common_years` common_years = set ( shanghai_df . year ) & set ( times_df . year ) # Print `common_years` print ( common_years ) 1 {2011, 2012, 2013, 2014, 2015} 1 2 3 4 # Filter years def filter_year ( input_df , years ): df = input_df . copy () return df . query ( 'year in {}' . format ( list ( years ))) 1 2 3 4 5 6 7 8 9 # Clean `times_df` and `shanghai_df` cleaned_times_df = ( times_df . loc [:, common_columns ] . pipe ( filter_year , common_years ) . pipe ( clean_world_rank ) . assign ( name = 'times' )) cleaned_shanghai_df = ( shanghai_df . loc [:, common_columns ] . pipe ( filter_year , common_years ) . pipe ( clean_world_rank ) . assign ( name = 'shanghai' ))","title":"Clean the Data"},{"location":"Write Idiomatic Pandas Code/#concatenate-into-a-single-dataframe","text":"38% of data missing from the total_score column : drop this column with the .drop method. 1 2 3 4 5 6 7 8 # Compose `ranking_df` with `cleaned_times_df` and `cleaned_shanghai_df` ranking_df = pd . concat ([ cleaned_times_df , cleaned_shanghai_df ]) # Calculate the percentage of missing data missing_data = 100 * pd . isnull ( ranking_df . total_score ) . sum () / len ( ranking_df ) # Drop the `total_score` column of `ranking_df` ranking_df = ranking_df . drop ( 'total_score' , axis = 1 )","title":"Concatenate into a single DataFrame"},{"location":"Write Idiomatic Pandas Code/#memory-optimization","text":"Memory can start to play a big part in how fast the pipelines can run. Without the \u201cdeep\u201d flag turned on, Pandas won\u2019t estimate memory consumption for the object dtype: category when dealing with categorical data, etc. int64 or even int16 takes less memory. 1 2 # Print the memory usage of `ranking_df` ranking_df . info () 1 2 3 4 5 6 7 8 9 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 3686 entries, 0 to 4896 Data columns (total 4 columns): year 3686 non-null int64 world_rank 3686 non-null object university_name 3685 non-null object name 3686 non-null object dtypes: int64(1), object(3) memory usage: 144.0+ KB 1 2 # Print the deep memory usage of `ranking_df` ranking_df . info ( memory_usage = \"deep\" ) 1 2 3 4 5 6 7 8 9 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 3686 entries, 0 to 4896 Data columns (total 4 columns): year 3686 non-null int64 world_rank 3686 non-null object university_name 3685 non-null object name 3686 non-null object dtypes: int64(1), object(3) memory usage: 803.1 KB","title":"Memory Optimization"},{"location":"Write Idiomatic Pandas Code/#cast-object-types","text":"\u2026to more appropriate ones. 1 2 3 4 5 6 7 8 9 def memory_change ( input_df , column , dtype ): df = input_df . copy () old = round ( df [ column ] . memory_usage ( deep = True ) / 1024 , 2 ) # In KB new = round ( df [ column ] . astype ( dtype ) . memory_usage ( deep = True ) / 1024 , 2 ) # In KB change = round ( 100 * ( old - new ) / ( old ), 2 ) report = ( \"The inital memory footprint for {column} is: {old}KB. \\n \" \"The casted {column} now takes: {new}KB. \\n \" \"A change of {change} %.\" ) . format ( ** locals ()) return report 1 2 3 # parameters: # input_df, column, dtype print ( memory_change ( ranking_df , 'world_rank' , 'int16' )) 1 2 3 The inital memory footprint for world_rank is: 244.43KB. The casted world_rank now takes: 36.0KB. A change of 85.27 %. 1 print ( memory_change ( ranking_df , 'university_name' , 'category' )) 1 2 3 The inital memory footprint for university_name is: 329.98KB. The casted university_name now takes: 121.37KB. A change of 63.22 %. 1 print ( memory_change ( ranking_df , 'name' , 'category' )) 1 2 3 The inital memory footprint for name is: 257.49KB. The casted name now takes: 32.6KB. A change of 87.34 %. 1 2 # Cast `world_rank` as type `int16` ranking_df . world_rank = ranking_df . world_rank . astype ( 'int16' ) 1 2 # Cast `unversity_name` as type `category` ranking_df . university_name = ranking_df . university_name . astype ( 'category' ) 1 2 # Cast `name` as type `category` ranking_df . name = ranking_df . name . astype ( 'category' ) 1 2 # Double check the memory usage after type casting ranking_df . info ( memory_usage = 'deep' ) 1 2 3 4 5 6 7 8 9 &lt;class 'pandas.core.frame.DataFrame'&gt; Int64Index: 3686 entries, 0 to 4896 Data columns (total 4 columns): year 3686 non-null int64 university_name 3685 non-null category world_rank 3686 non-null int16 name 3686 non-null category dtypes: category(2), int16(1), int64(1) memory usage: 161.2 KB From 803.1 KB! We have a well-formed data set (i.e. it is in a tidy state) with an optimized memory footprint, data analysis can start.","title":"Cast Object Types"},{"location":"Write Idiomatic Pandas Code/#replace-rank-subset-groupby","text":"","title":"Replace, Rank, Subset, groupby"},{"location":"Write Idiomatic Pandas Code/#replace","text":"\u2018Massachusetts Institute of Technology (MIT)\u2019 and \u2018Massachusetts Institute of Technology\u2019 are two different records of the same university. Thus, change the first name to the latter. 1 2 # Query for the rows with university name 'Massachusetts Institute of Technology (MIT)' print ( ranking_df . query ( \"university_name == 'Massachusetts Institute of Technology (MIT)'\" )) 1 2 3 4 5 6 year university_name world_rank name 3016 2011 Massachusetts Institute of Technology (MIT) 3 shanghai 3516 2012 Massachusetts Institute of Technology (MIT) 3 shanghai 3801 2013 Massachusetts Institute of Technology (MIT) 4 shanghai 3899 2014 Massachusetts Institute of Technology (MIT) 3 shanghai 4399 2015 Massachusetts Institute of Technology (MIT) 3 shanghai 1 ranking_df . loc [ ranking_df . university_name == 'Massachusetts Institute of Technology (MIT)' , 'university_name' ] = 'Massachusetts Institute of Technology' 1 ranking_df . university_name . head () 1 2 3 4 5 6 7 0 Harvard University 1 California Institute of Technology 2 Massachusetts Institute of Technology 3 Stanford University 4 Princeton University Name: university_name, dtype: category Categories (785, object): [Aalborg University, Aalto University, Aarhus University, Aberystwyth University, ..., \u00c9cole Normale Sup\u00e9rieure, \u00c9cole Normale Sup\u00e9rieure de Lyon, \u00c9cole Polytechnique, \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne]","title":"Replace"},{"location":"Write Idiomatic Pandas Code/#rank-subset-groupby","text":"To find the 5 (more generally n ) top universities over the years, for each ranking system, here is how to do it in pseudo-code: For each year (in the year column) and for each ranking system (in the name column): Select the subset of the data for this given year and the given ranking system. Select the 5 top universities and store them in a list. Store the result in a dictionary with (year, name) as key and the list of the universities (in descending order) as the value. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Load in `itertools` import itertools # Initialize `ranking` ranking = {} for year , name in itertools . product ( common_years , [ \"times\" , \"shanghai\" ]): s = ( ranking_df . loc [ lambda df : (( df . year == year ) & ( df . name == name ) & ( df . world_rank . isin ( range ( 1 , 6 )))), :] . sort_values ( 'world_rank' , ascending = False ) . university_name ) ranking [( year , name )] = list ( s ) # Print `ranking` print ( ranking ) 1 {(2011, 'times'): ['Princeton University', 'Stanford University', 'Massachusetts Institute of Technology', 'California Institute of Technology', 'Harvard University'], (2011, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2012, 'times'): ['Princeton University', 'University of Oxford', 'Harvard University', 'Stanford University', 'California Institute of Technology'], (2012, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2013, 'times'): ['Massachusetts Institute of Technology', 'Harvard University', 'Stanford University', 'University of Oxford', 'California Institute of Technology'], (2013, 'shanghai'): ['University of Cambridge', 'Massachusetts Institute of Technology', 'University of California, Berkeley', 'Stanford University', 'Harvard University'], (2014, 'times'): ['Massachusetts Institute of Technology', 'Stanford University', 'Harvard University', 'University of Oxford', 'California Institute of Technology'], (2014, 'shanghai'): ['University of Cambridge', 'University of California-Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2015, 'times'): ['University of Cambridge', 'Stanford University', 'University of Oxford', 'Harvard University', 'California Institute of Technology'], (2015, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University']} We have this ranking dictionary, let\u2019s find out how much (in percentage) both ranking methods differ over the years: the two are 100% set-similar if the selected 5-top universities are the same even though they aren\u2019t ranked the same. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Import `defaultdict` from collections import defaultdict # Initialize `compare` compare = defaultdict ( list ) # Initialize `exact_similarity` and `set_similarity` exact_similarity = {} set_similarity = {} for ( year , method ), universities in ranking . items (): compare [ year ] . append ( universities ) for year , ranks in compare . items (): set_similarity [ year ] = 100 * len ( set ( ranks [ 0 ]) & set ( ranks [ 1 ])) / 5.0 # Print `set_similarity` print ( set_similarity ) 1 {2011: 60.0, 2012: 40.0, 2013: 60.0, 2014: 60.0, 2015: 60.0} Is there a better, more idiomatic Pandas way? 1 2 3 4 5 # Construct a DataFrame with the top 5 universities top_5_df = ranking_df . loc [ lambda df : df . world_rank . isin ( range ( 1 , 6 )), :] # Print the first rows of `top_5_df` top_5_df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } year university_name world_rank name 0 2011 Harvard University 1 times 1 2011 California Institute of Technology 2 times 2 2011 Massachusetts Institute of Technology 3 times 3 2011 Stanford University 4 times 4 2011 Princeton University 5 times 1 top_5_df . tail () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } year university_name world_rank name 4397 2015 Harvard University 1 shanghai 4398 2015 Stanford University 2 shanghai 4399 2015 Massachusetts Institute of Technology 3 shanghai 4400 2015 University of California, Berkeley 4 shanghai 4401 2015 University of Cambridge 5 shanghai 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Compute the similarity def compute_set_similarity ( s ): pivoted = s . pivot ( values = 'world_rank' , columns = 'name' , index = 'university_name' ) . dropna () set_simlarity = 100 * len (( set ( pivoted [ 'shanghai' ] . index ) & set ( pivoted [ 'times' ] . index ))) / 5 return set_simlarity # Group `top_5_df` by `year` grouped_df = top_5_df . groupby ( 'year' ) # Use `compute_set_similarity` to construct a DataFrame setsimilarity_df = pd . DataFrame ({ 'set_similarity' : grouped_df . apply ( compute_set_similarity )}) . reset_index () # Print the first rows of `setsimilarity_df` setsimilarity_df . head () .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } year set_similarity 0 2011 60.0 1 2012 40.0 2 2013 60.0 3 2014 60.0 4 2015 60.0","title":"Rank, Subset, groupby"},{"location":"Write Idiomatic Pandas Code/#visualization","text":"","title":"Visualization"},{"location":"Write Idiomatic Pandas Code/#matplotlib","text":"1 import matplotlib.pyplot as plt 1 2 3 4 # Plot a scatterplot with `total_score` and `alumni` shanghai_df . plot . scatter ( 'total_score' , 'alumni' , c = 'year' , colormap = 'viridis' ) plt . show ()","title":"Matplotlib"},{"location":"Write Idiomatic Pandas Code/#remove-values","text":"There are some 0 values for the alumni column (0, -, NaN , etc.). Remove them. 1 2 3 4 5 6 7 8 # Replace `-` entries with NaN values times_df [ 'total_score' ] = times_df [ 'total_score' ] . replace ( \"-\" , \"NaN\" ) . astype ( 'float' ) # Drop all rows with NaN values for `num_students` times_df = times_df . dropna ( subset = [ 'num_students' ], how = 'all' ) # Cast the remaining rows with `num_students` as int times_df [ 'num_students' ] = times_df [ 'num_students' ] . astype ( 'int' ) 1 2 3 4 # Plot a scatterplot with `total_score` and `num_students` times_df . plot . scatter ( 'total_score' , 'num_students' , c = 'year' , colormap = 'viridis' ) plt . show ()","title":"Remove values"},{"location":"Write Idiomatic Pandas Code/#seaborn","text":"The Seaborn plotting tool is mainly used to create statistical plots that are visually appealing. 1 2 3 4 import seaborn as sns # Set the Seaborn theme if desired sns . set_style ( 'darkgrid' ) 1 2 3 4 5 6 7 8 # Abbreviate country names of United States and United Kingdom times_df [ 'country' ] = times_df [ 'country' ] . replace ( \"United States of America\" , \"USA\" ) . replace ( \"United Kingdom\" , \"UK\" ) # Count the frequency of countries count = times_df [ 'country' ] . value_counts ()[: 10 ] # Convert the top 10 countries to a DataFrame df = count . to_frame () 1 2 3 4 5 6 # Reset the index #df.reset_index(level=0, inplace=True) # or... df [ 'index1' ] = df . index df .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } country index1 USA 625 USA UK 286 UK Germany 150 Germany Australia 117 Australia Canada 108 Canada Japan 98 Japan Italy 94 Italy China 82 China Netherlands 75 Netherlands France 73 France 1 2 # Rename the columns df . columns = [ 'count' , 'country' ,] 1 2 3 4 5 # Plot a barplot with `country` and `count` sns . barplot ( x = 'country' , y = 'count' , data = df ) sns . despine () plt . show ()","title":"Seaborn"},{"location":"Write Idiomatic Pandas Code/#filter-rows","text":"1 times_df_filtered = times_df . loc [ times_df [ 'country' ] . isin ([ 'USA' , 'UK' , 'Canada' , 'Australia' , 'Germany' ])] 1 2 3 4 5 # Barplot with `country` and `total_score` sns . barplot ( x = 'country' , y = 'total_score' , data = times_df_filtered ) sns . despine () plt . show ()","title":"Filter rows"},{"location":"Write Idiomatic Pandas Code/#correlation","text":"1 2 3 import numpy as np np . seterr ( invalid = 'ignore' ) 1 {'divide': 'warn', 'invalid': 'warn', 'over': 'warn', 'under': 'ignore'} 1 2 3 sns . pairplot ( times_df , hue = 'country' ) plt . show () 1 2 3 g = sns . FacetGrid ( times_df_filtered , col = 'country' , hue = 'country' ) g . map ( sns . regplot , 'year' , 'total_score' ) . set ( xlim = ( 2010 , 2015 ), ylim = ( 0 , 100 )) g . fig . subplots_adjust ( wspace =. 2 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 sns . set ( style = \"white\" ) # Compute the correlation matrix corr = times_df . corr () # Generate a mask for the upper triangle mask = np . zeros_like ( corr , dtype = np . bool ) mask [ np . triu_indices_from ( mask )] = True # Set up the matplotlib figure f , ax = plt . subplots ( figsize = ( 11 , 9 )) # Generate a custom diverging colormap cmap = sns . diverging_palette ( 220 , 10 , as_cmap = True ) # Draw the heatmap with the mask and correct aspect ratio sns . heatmap ( corr , mask = mask , cmap = cmap , vmax =. 3 , square = True , linewidths =. 5 , ax = ax ) plt . show ()","title":"Correlation"},{"location":"Write Idiomatic Pandas Code/#to-go-beyond","text":"with groupby .","title":"To go beyond"},{"location":"Write_Better_Python/","text":"Foreword Notes. Python 2. Consult the Hitchicker\u2019s Guide to Python . PEP20 \u00b6 PEP : Python Enhancement Proposals. In the Python shell, type import this . We get the following \u2018easter egg\u2019. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 The Zen of Python , by Tim Peters Beautiful is better than ugly . Explicit is better than implicit . Simple is better than complex . Complex is better than complicated . Flat is better than nested . Sparse is better than dense . Readability counts . Special cases aren 't special enough to break the rules. Although practicality beats purity . Errors should never pass silently . Unless explicitly silenced . In the face of ambiguity , refuse the temptation to guess . There should be one -- and preferably only one -- obvious way to do it . Although that way may not be obvious at first unless you 're Dutch. Now is better than never . Although never is often better than * right * now . If the implementation is hard to explain , it 's a bad idea. If the implementation is easy to explain , it may be a good idea . Namespaces are one honking great idea -- let 's do more of those! The \u2018easter egg\u2019 is a poem. A poem of best practices. Explicit is better than implicit. Don\u2019t add numbers to strings. Readability counts. Use the grammar of PEP8. Add comments. Special cases aren\u2019t special enough to break the rules. The len function for all. A function applies to all. A method applied to some. Find the built-in function before coding new functions. The code should be pleasant and easy to read. PEP8 \u00b6 PEP : Python Enhancement Proposals. Improves the look of the code. Here are a few principles: Import at the top and separate. 1 space between parameters and variables. 4-space indentation. Two-line space between independent functions. 1 space between operators. 2-line space between class and other objects. Classes are capitalized. Functions and methods are not capitalized. 1-line space between class functions. Constant variable in uppercase. Variable in lowercase and long names. Here is an example where to apply these principles. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import sys # import at the top and separate import random def foo_Bar ( arg1 , arg2 , arg3 , arg4 ): # 1 space between parameters and variables return arg1 , arg2 , arg3 , arg4 # 4-space indentation def bar ( * args ): # 2-line space between independent functions # bad spacing return 2 + 2 # 1 space between operators class Submarine : # 2-line space between class and other objects; classes are capitalized def one ( self ): # functions and methods are not capitalized return 1 def two ( self ): # 1-line space between class functions return 2 CONSTANT = 10 # constant variable in uppercase alpha , beta , charlie , delta = foo_Bar ( # variable in lowercase and long names \"a long string\" , # one practical way to stack things \"a longer string\" , \"yet another long string\" , \"and other crazy string\" ) one = 1 # 1 space three = 3 fourteen = 14 print alpha print fourteen print Submarine () . two () # class.method PEP Diagnoses with flake8 & pylint \u00b6 The modules can be integrated with IDE and text editors (VIM, Emacs, gedit, Notepad++, etc.). flake8 Install flake8 with Pip. Run a script with flake8 : python flake8 <script.py> . Instead of running the code, flake8 runs a diagnosis and returns the results. The results suggest improvement to the look of the script. It shows a list: the line number, the character positions, and the improvement. We can then go back to the script, improve it and rerun flake8 . pylint Install pylint with Pip. Run a script with flake8 : python pylint script.py . pylint runs a diagnosis and returns a report about the script. Help & Docstrings \u00b6 In the shell, for any command, type help(<cmd>) to get a definition. Type dir(<cmd>) to get the attributes from the Python glossary. A docstrings is an enhancement to the help glossary. Without docstrings. 1 2 3 4 5 6 7 def does_something ( arg ): if isinstance ( arg , ( int , float )): return arg + 10 elif isinstance ( arg , str ): return str * 3 else : raise TypeError ( \"does_something only takes ints, floats, and strings\" ) We should never read a code to figure out what it does! Add docstrings: \u201c\u201d\u201d \u201c\u201d\u201d on 1 line. Add docstrings: several lines (see below). 1 2 3 4 5 6 7 8 9 10 11 def does_better ( arg ): \"\"\"Takes one argument and does something based on type. If arg is a string, returns arg * 3; If arg is an int or float, returns arg + 10 \"\"\" if isinstance ( arg , ( int , float )): return arg + 10 elif isinstance ( arg , str ): return str * 3 else : raise TypeError ( \"does_something only takes ints, floats, and strings\" ) In the shell, type help(docstrings.does_better) to print the function\u2019s docstring. pdb Debugs Scripts \u00b6 Go inside the code. The next following script is bugged. 1 2 3 4 5 6 7 8 # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] # modify the list del my_list [ 3 ] del my_list [ 4 ] del my_list [ 6 ] print my_list We run the code and we get an error. The sloppy fix would be to add print statements. 1 2 3 4 5 6 7 8 9 10 # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] # modify the list del my_list [ 3 ] # ADD print my_list del my_list [ 4 ] # ADD print my_list del my_list [ 6 ] # ADD print my_list Instead, use the Python debugger: pdb.set_trace() in the code. 1 2 3 4 5 6 7 8 9 10 11 import pdb # ADD # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] pdb . set_trace () # ADD del my_list [ 3 ] del my_list [ 4 ] del my_list [ 6 ] print my_list When we run the script, the routine stops at each line following the set_trace() function. We get a (Pdb) prompt. We can type in the variable name as if we were in the shell to see what is going on. We punch n or next to step forward in the script. pdb pinpoint the trouble areas. In the current case, we want to delete a value at index 6 when the list had been reduced to 5 values (it is impossible to delete what is inexistant!). 1 2 3 4 5 6 7 8 9 10 11 import pdb # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] pdb . set_trace () del my_list [ 3 ] # [5, 2, 1, \"abcdefg\", 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, False, 4] del my_list [ 6 ] # [5, 2, 1, 3, 4] print my_list An alternative way. 1 2 3 4 5 6 7 8 # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] import pdb ; pdb . set_trace () # ADD del my_list [ 3 ] # [5, 2, 1, \"abcdefg\", 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, 4] print my_list Change the script and rerun it. 1 2 3 4 5 6 7 8 9 10 11 import pdb # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] pdb . set_trace () del my_list [ 3 ] # [5, 2, 1, \"abcdefg\", 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, 4] print my_list Once the script is debugged, delete the pdb stuff (it is a temporary measure). 1 2 3 4 5 6 7 # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] del my_list [ 3 ] # [5, 2, 1, \"abcdefg\", 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, 4] print my_list","title":"Write Better Python with PEP"},{"location":"Write_Better_Python/#pep8","text":"PEP : Python Enhancement Proposals. Improves the look of the code. Here are a few principles: Import at the top and separate. 1 space between parameters and variables. 4-space indentation. Two-line space between independent functions. 1 space between operators. 2-line space between class and other objects. Classes are capitalized. Functions and methods are not capitalized. 1-line space between class functions. Constant variable in uppercase. Variable in lowercase and long names. Here is an example where to apply these principles. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import sys # import at the top and separate import random def foo_Bar ( arg1 , arg2 , arg3 , arg4 ): # 1 space between parameters and variables return arg1 , arg2 , arg3 , arg4 # 4-space indentation def bar ( * args ): # 2-line space between independent functions # bad spacing return 2 + 2 # 1 space between operators class Submarine : # 2-line space between class and other objects; classes are capitalized def one ( self ): # functions and methods are not capitalized return 1 def two ( self ): # 1-line space between class functions return 2 CONSTANT = 10 # constant variable in uppercase alpha , beta , charlie , delta = foo_Bar ( # variable in lowercase and long names \"a long string\" , # one practical way to stack things \"a longer string\" , \"yet another long string\" , \"and other crazy string\" ) one = 1 # 1 space three = 3 fourteen = 14 print alpha print fourteen print Submarine () . two () # class.method","title":"PEP8"},{"location":"Write_Better_Python/#pep-diagnoses-with-flake8-pylint","text":"The modules can be integrated with IDE and text editors (VIM, Emacs, gedit, Notepad++, etc.). flake8 Install flake8 with Pip. Run a script with flake8 : python flake8 <script.py> . Instead of running the code, flake8 runs a diagnosis and returns the results. The results suggest improvement to the look of the script. It shows a list: the line number, the character positions, and the improvement. We can then go back to the script, improve it and rerun flake8 . pylint Install pylint with Pip. Run a script with flake8 : python pylint script.py . pylint runs a diagnosis and returns a report about the script.","title":"PEP Diagnoses with flake8 &amp; pylint"},{"location":"Write_Better_Python/#help-docstrings","text":"In the shell, for any command, type help(<cmd>) to get a definition. Type dir(<cmd>) to get the attributes from the Python glossary. A docstrings is an enhancement to the help glossary. Without docstrings. 1 2 3 4 5 6 7 def does_something ( arg ): if isinstance ( arg , ( int , float )): return arg + 10 elif isinstance ( arg , str ): return str * 3 else : raise TypeError ( \"does_something only takes ints, floats, and strings\" ) We should never read a code to figure out what it does! Add docstrings: \u201c\u201d\u201d \u201c\u201d\u201d on 1 line. Add docstrings: several lines (see below). 1 2 3 4 5 6 7 8 9 10 11 def does_better ( arg ): \"\"\"Takes one argument and does something based on type. If arg is a string, returns arg * 3; If arg is an int or float, returns arg + 10 \"\"\" if isinstance ( arg , ( int , float )): return arg + 10 elif isinstance ( arg , str ): return str * 3 else : raise TypeError ( \"does_something only takes ints, floats, and strings\" ) In the shell, type help(docstrings.does_better) to print the function\u2019s docstring.","title":"Help &amp; Docstrings"},{"location":"Write_Better_Python/#pdb-debugs-scripts","text":"Go inside the code. The next following script is bugged. 1 2 3 4 5 6 7 8 # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] # modify the list del my_list [ 3 ] del my_list [ 4 ] del my_list [ 6 ] print my_list We run the code and we get an error. The sloppy fix would be to add print statements. 1 2 3 4 5 6 7 8 9 10 # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] # modify the list del my_list [ 3 ] # ADD print my_list del my_list [ 4 ] # ADD print my_list del my_list [ 6 ] # ADD print my_list Instead, use the Python debugger: pdb.set_trace() in the code. 1 2 3 4 5 6 7 8 9 10 11 import pdb # ADD # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] pdb . set_trace () # ADD del my_list [ 3 ] del my_list [ 4 ] del my_list [ 6 ] print my_list When we run the script, the routine stops at each line following the set_trace() function. We get a (Pdb) prompt. We can type in the variable name as if we were in the shell to see what is going on. We punch n or next to step forward in the script. pdb pinpoint the trouble areas. In the current case, we want to delete a value at index 6 when the list had been reduced to 5 values (it is impossible to delete what is inexistant!). 1 2 3 4 5 6 7 8 9 10 11 import pdb # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] pdb . set_trace () del my_list [ 3 ] # [5, 2, 1, \"abcdefg\", 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, False, 4] del my_list [ 6 ] # [5, 2, 1, 3, 4] print my_list An alternative way. 1 2 3 4 5 6 7 8 # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] import pdb ; pdb . set_trace () # ADD del my_list [ 3 ] # [5, 2, 1, \"abcdefg\", 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, 4] print my_list Change the script and rerun it. 1 2 3 4 5 6 7 8 9 10 11 import pdb # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] pdb . set_trace () del my_list [ 3 ] # [5, 2, 1, \"abcdefg\", 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, 4] print my_list Once the script is debugged, delete the pdb stuff (it is a temporary measure). 1 2 3 4 5 6 7 # a list my_list = [ 5 , 2 , 1 , True , \"abcdefg\" , 3 , False , 4 ] del my_list [ 3 ] # [5, 2, 1, \"abcdefg\", 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, False, 4] del my_list [ 4 ] # [5, 2, 1, 3, 4] print my_list","title":"pdb Debugs Scripts"},{"location":"exceptions/","text":"Foreword Notes. Understanding Python Exception \u00b6 Python built-in exceptions 1 2 3 4 5 def simple_div ( x , y ): z = x / y return z simple_div ( 2 , 2 ) 1 1.0 1 simple_div ( 0 , 2 ) 1 0.0 1 simple_div ( 2 , 0 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 --------------------------------------------------------------------------- ZeroDivisionError Traceback (most recent call last) &lt;ipython-input-3-95e9e8e0b13c&gt; in &lt;module&gt; ----&gt; 1 simple_div(2,0) &lt;ipython-input-1-69d8d8976ddb&gt; in simple_div(x, y) 1 def simple_div(x,y): ----&gt; 2 z = x / y 3 return z 4 5 simple_div(2,2) ZeroDivisionError: division by zero 0 is divisible by any number, but returns 0. But a number cannot be divided by nothing (0). This is an exception, a python exception, called in this case ZeroDivisionError. 1 simple_div ( 2 , 'a' ) \u2026is an exception called TypeError. 1 simple_div ( 2 , a ) \u2026is a NameError. Catching Exceptions \u00b6 Let\u2019s catch exception ZeroDivisionError. 1 2 3 4 5 6 7 8 def simple_div_2 ( x , y ): try : z = x / y return z except ZeroDivisionError : print ( \"Divided by 0!\" ) simple_div_2 ( 2 , 0 ) 1 Divided by 0! 1 2 3 4 try : print ( simple_div_2 ( 2 , 0 )) except ZeroDivisionError : print ( \"Divided by 0!\" ) 1 2 Divided by 0! None Let\u2019s catch exception TypeError. 1 2 3 4 5 6 7 8 9 def simple_div_3 ( x , y ): try : z = x / y return z except TypeError : z = - 1 return z simple_div_3 ( 2 , 'a' ) 1 -1 Let\u2019s catch exception NameError. 1 2 3 4 try : print ( simple_div ( 2 , a )) except NameError : print ( - 2 ) 1 -2 Let\u2019s put it all together! 1 2 3 4 5 6 7 8 9 def simple_div_5 ( x , y ): try : z = x / y return z except ZeroDivisionError : return ( \"Divided by 0!\" ) except TypeError : z = - 1 return z 1 2 3 4 try : print ( simple_div_5 ( 2 , 2 )) except NameError : print ( - 2 ) 1 1.0 1 2 3 4 try : print ( simple_div_5 ( 0 , 2 )) except NameError : print ( - 2 ) 1 0.0 1 2 3 4 try : print ( simple_div_5 ( 2 , 0 )) except NameError : print ( - 2 ) 1 Divided by 0! 1 2 3 4 try : print ( simple_div_5 ( 2 , 'a' )) except NameError : print ( - 2 ) 1 -1 1 2 3 4 try : print ( simple_div_5 ( 2 , a )) except NameError : print ( - 2 ) 1 -2","title":"Exceptions"},{"location":"exceptions/#catching-exceptions","text":"Let\u2019s catch exception ZeroDivisionError. 1 2 3 4 5 6 7 8 def simple_div_2 ( x , y ): try : z = x / y return z except ZeroDivisionError : print ( \"Divided by 0!\" ) simple_div_2 ( 2 , 0 ) 1 Divided by 0! 1 2 3 4 try : print ( simple_div_2 ( 2 , 0 )) except ZeroDivisionError : print ( \"Divided by 0!\" ) 1 2 Divided by 0! None Let\u2019s catch exception TypeError. 1 2 3 4 5 6 7 8 9 def simple_div_3 ( x , y ): try : z = x / y return z except TypeError : z = - 1 return z simple_div_3 ( 2 , 'a' ) 1 -1 Let\u2019s catch exception NameError. 1 2 3 4 try : print ( simple_div ( 2 , a )) except NameError : print ( - 2 ) 1 -2 Let\u2019s put it all together! 1 2 3 4 5 6 7 8 9 def simple_div_5 ( x , y ): try : z = x / y return z except ZeroDivisionError : return ( \"Divided by 0!\" ) except TypeError : z = - 1 return z 1 2 3 4 try : print ( simple_div_5 ( 2 , 2 )) except NameError : print ( - 2 ) 1 1.0 1 2 3 4 try : print ( simple_div_5 ( 0 , 2 )) except NameError : print ( - 2 ) 1 0.0 1 2 3 4 try : print ( simple_div_5 ( 2 , 0 )) except NameError : print ( - 2 ) 1 Divided by 0! 1 2 3 4 try : print ( simple_div_5 ( 2 , 'a' )) except NameError : print ( - 2 ) 1 -1 1 2 3 4 try : print ( simple_div_5 ( 2 , a )) except NameError : print ( - 2 ) 1 -2","title":"Catching Exceptions"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/","text":"Foreword Code snippets and excerpts from the tutorial. Python 3. From DataCamp. With Jupyter Notebook and the In [ ] Out [ ] format. Load and explore the Wine dataset \u00b6 We use the wine quality dataset related to red and white vinho verde wine samples, from the north of Portugal. 1 2 3 4 5 6 7 # import the modules % pylab inline import pandas as pd import matplotlib.pyplot as plt # set the style plt . style . use ( 'ggplot' ) 1 Populating the interactive namespace from numpy and matplotlib 1 2 3 # import the data df = pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';' ) df . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } fixed acidity volatile acidity citric acid residual sugar chlorides free sulfur dioxide total sulfur dioxide density pH sulphates alcohol quality 0 7.4 0.70 0.00 1.9 0.076 11.0 34.0 0.9978 3.51 0.56 9.4 5 1 7.8 0.88 0.00 2.6 0.098 25.0 67.0 0.9968 3.20 0.68 9.8 5 2 7.8 0.76 0.04 2.3 0.092 15.0 54.0 0.9970 3.26 0.65 9.8 5 1 2 3 4 5 6 7 # drop target variable # only keep the values; the DataFrame becomes a simple array (matrix) # index (axis=0 / \u2018index\u2019) or columns (axis=1 / \u2018columns\u2019). X = df . drop ( 'quality' , axis = 1 ) . values # print the array print ( X ) 1 2 3 4 5 6 7 [[ 7.4 0.7 0. ..., 3.51 0.56 9.4 ] [ 7.8 0.88 0. ..., 3.2 0.68 9.8 ] [ 7.8 0.76 0.04 ..., 3.26 0.65 9.8 ] ..., [ 6.3 0.51 0.13 ..., 3.42 0.75 11. ] [ 5.9 0.645 0.12 ..., 3.57 0.71 10.2 ] [ 6. 0.31 0.47 ..., 3.39 0.66 11. ]] The last column is gone from the array. Make it a list instead (or a single-row array). 1 2 3 4 y1 = df [ 'quality' ] . values # print the single-row array print ( y1 ) 1 [5 5 5 ..., 6 5 6] 1 2 # row, col of the DataFrame df . shape 1 (1599, 12) 1 2 3 4 # plot all the columns or variables pd . DataFrame . hist ( df , figsize = [ 15 , 15 ]); plt . show () Notice the range of each variable; some are wider. Any algorithm, such as k-NN, which cares about the distance between data points. This motivates scaling our data. Let us turn it into a two-category variable consisting of \u2018good\u2019 (rating > 5) & \u2018bad\u2019 (rating <= 5) qualities. 1 print ( y1 ) 1 [5 5 5 ..., 6 5 6] 1 2 3 # is the rating <= 5 ? y = y1 <= 5 print ( y ) 1 [ True True True ..., False True False] True is worth 1 and False is worth 0. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # plot two histograms # the original target variable # and the aggregated target variable plt . figure ( figsize = ( 20 , 5 )); # left plot plt . subplot ( 1 , 2 , 1 ); plt . hist ( y1 ); plt . xlabel ( 'original target value' ) plt . ylabel ( 'count' ) # right plot plt . subplot ( 1 , 2 , 2 ); plt . hist ( y ) plt . xlabel ( 'aggregated target value' ) plt . show () Again, on the right histogram, True = 1 and False = 0. k-Nearest Neighbours \u00b6 Measure performance \u00b6 Accuracy is the default scoring method for both k-Nearest Neighbours and logistic regression. \\text{Accuracy}=\\frac{\\text{Number of Correct Predictions}}{\\text{Total Number of Predictions}} \\text{Accuracy}=\\frac{\\text{Number of Correct Predictions}}{\\text{Total Number of Predictions}} Accuracy is commonly defined for binary classification problems in terms of true positives & false negatives. It can also be defined in terms of a confusion matrix . Other measures of model performance are derived from the confusion matrix: precision (true positives divided by the number of true & false positives) and recall (number of true positives divided by the number of true positives plus the number of false negatives). The F1-score is the harmonic mean of the precision and the recall. Train-test split and performance in practice \u00b6 The rule of thumb is to use approximately 80% of the data for training (train set) and 20% for testing (test set). 1 2 3 4 5 6 from sklearn.cross_validation import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) 1 2 3 4 5 # the k-NN model from sklearn import neighbors , linear_model knn = neighbors . KNeighborsClassifier ( n_neighbors = 5 ) knn_model_1 = knn . fit ( X_train , y_train ) 1 2 print ( 'k-NN score for test set: %f ' % knn_model_1 . score ( X_test , y_test )) print ( 'k-NN score for training set: %f ' % knn_model_1 . score ( X_train , y_train )) 1 2 k-NN score for test set: 0.612500 k-NN score for training set: 0.774042 The accuracy, more specifically the test accuracy, is not great. Let us print out all the other performance measures for the test set. 1 2 3 4 from sklearn.metrics import classification_report y_true , y_pred = y_test , knn_model_1 . predict ( X_test ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.66 0.64 0.65 179 True 0.56 0.57 0.57 141 avg / total 0.61 0.61 0.61 320 Other performance measures for the train set. 1 2 y_true , y_pred = y_train , knn_model_1 . predict ( X_train ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.80 0.76 0.78 676 True 0.75 0.79 0.77 603 avg / total 0.78 0.77 0.77 1279 These underperformances might come from the spread in the variables. The range of each variable is different; some are wider. Preprocessing: scaling and centering the data \u00b6 Preprocessing happens before running any model, such as a regression (predicting a continuous variable) or a classification (predicting a discrete variable) using one or another model (k-NN, logistic, decision tree, random forests etc.). For numerical variables, it is common to either normalize or standardize the data. Normalization : scaling a dataset so that its minimum is 0 and its maximum 1. x_{normalized} = \\frac{x-x_{min}}{x_{max}-x_{min}} x_{normalized} = \\frac{x-x_{min}}{x_{max}-x_{min}} Stardardization : centering the data around 0 and to scale with respect to the standard deviation. x_{standardized} = \\frac{x-\\mu}{\\sigma} x_{standardized} = \\frac{x-\\mu}{\\sigma} where \\mu \\mu and \\sigma \\sigma are the mean and standard deviation of the dataset. There are other transformatoions, such as the log transformation or the Box-Cox transformation, to make the data look more Gaussian or a normally distributed. k-NN: scaling in practice \u00b6 Scale the data \u00b6 1 print ( X ) 1 2 3 4 5 6 7 [[ 7.4 0.7 0. ..., 3.51 0.56 9.4 ] [ 7.8 0.88 0. ..., 3.2 0.68 9.8 ] [ 7.8 0.76 0.04 ..., 3.26 0.65 9.8 ] ..., [ 6.3 0.51 0.13 ..., 3.42 0.75 11. ] [ 5.9 0.645 0.12 ..., 3.57 0.71 10.2 ] [ 6. 0.31 0.47 ..., 3.39 0.66 11. ]] 1 2 3 4 5 from sklearn.preprocessing import scale # minimum is 0 and its maximum 1 Xs = scale ( X ) print ( Xs ) 1 2 3 4 5 6 7 8 9 10 11 12 13 [[-0.52835961 0.96187667 -1.39147228 ..., 1.28864292 -0.57920652 -0.96024611] [-0.29854743 1.96744245 -1.39147228 ..., -0.7199333 0.1289504 -0.58477711] [-0.29854743 1.29706527 -1.18607043 ..., -0.33117661 -0.04808883 -0.58477711] ..., [-1.1603431 -0.09955388 -0.72391627 ..., 0.70550789 0.54204194 0.54162988] [-1.39015528 0.65462046 -0.77526673 ..., 1.6773996 0.30598963 -0.20930812] [-1.33270223 -1.21684919 1.02199944 ..., 0.51112954 0.01092425 0.54162988]] Run the k-NN \u00b6 1 2 3 4 5 6 7 8 9 from sklearn.cross_validation import train_test_split # split # 80% of the data for training (train set) # 20% for testing (test set) Xs_train , Xs_test , y_train , y_test = train_test_split ( Xs , y , test_size = 0.2 , random_state = 42 ) 1 2 # Run knn_model_2 = knn . fit ( Xs_train , y_train ) Measure the performance \u00b6 1 2 print ( 'k-NN score for test set: %f ' % knn_model_2 . score ( Xs_test , y_test )) print ( 'k-NN score for training set: %f ' % knn_model_2 . score ( Xs_train , y_train )) 1 2 k-NN score for test set: 0.712500 k-NN score for training set: 0.814699 1 2 3 4 y_true , y_pred = y_test , knn_model_2 . predict ( Xs_test ) # Test set print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.72 0.79 0.75 179 True 0.70 0.62 0.65 141 avg / total 0.71 0.71 0.71 320 1 2 3 4 y_true , y_pred = y_train , knn_model_2 . predict ( Xs_train ) # Train set print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.80 0.86 0.83 676 True 0.83 0.77 0.80 603 avg / total 0.82 0.81 0.81 1279 Normalization-scaling improves the performance compare to the previous classification_report . k-NN Recap \u00b6 Without scaling \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # Set sc = False # Do not scale the features sc = False # Set the number of k in k-NN nk = 5 # Load data df = pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';' ) # Drop target variable X = df . drop ( 'quality' , 1 ) . values # Scale, if desired if sc == True : X = scale ( X ) # Target value y1 = df [ 'quality' ] . values # original target variable # New target variable: is the rating <= 5? y = y1 <= 5 # Split (80/20) the data into a test set and a train set # X_train, X_test, y_train, y_test X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) # Train the k-NN model knn = neighbors . KNeighborsClassifier ( n_neighbors = nk ) knn_model = knn . fit ( X_train , y_train ) # Print performance on the test set print ( 'k-NN accuracy for test set: %f ' % knn_model . score ( X_test , y_test )) y_true , y_pred = y_test , knn_model . predict ( X_test ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 7 k-NN accuracy for test set: 0.612500 precision recall f1-score support False 0.66 0.64 0.65 179 True 0.56 0.57 0.57 141 avg / total 0.61 0.61 0.61 320 With scaling \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # Set sc = True # to scale the features sc = True # Set the number of k in k-NN nk = 5 # Load data df = pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';' ) # Drop target variable X = df . drop ( 'quality' , 1 ) . values # Scale, if desired if sc == True : X = scale ( X ) # Target value y1 = df [ 'quality' ] . values # original target variable # New target variable: is the rating <= 5? y = y1 <= 5 # Split (80/20) the data into a test set and a train set # X_train, X_test, y_train, y_test X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) # Train the k-NN model knn = neighbors . KNeighborsClassifier ( n_neighbors = nk ) knn_model = knn . fit ( X_train , y_train ) # Print performance on the test set print ( 'k-NN accuracy for test set: %f ' % knn_model . score ( X_test , y_test )) y_true , y_pred = y_test , knn_model . predict ( X_test ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 7 k-NN accuracy for test set: 0.712500 precision recall f1-score support False 0.72 0.79 0.75 179 True 0.70 0.62 0.65 141 avg / total 0.71 0.71 0.71 320 Linear regression \u00b6 Before addressing an alternative to k-NN, the logistic regression or Logit, let us briefly review the linear regresion with a different dataset. 1 2 3 4 5 6 7 8 9 10 11 12 # Import necessary packages % pylab inline import pandas as pd import matplotlib.pyplot as plt # set the style plt . style . use ( 'ggplot' ) # Import nmore packages from sklearn import datasets from sklearn import linear_model import numpy as np 1 Populating the interactive namespace from numpy and matplotlib 1 2 3 4 5 6 7 # Load the data # The data is part of the scikit-learn module boston = datasets . load_boston () yb = boston . target . reshape ( - 1 , 1 ) Xb = boston [ 'data' ][:, 5 ] . reshape ( - 1 , 1 ) print ( yb [: 10 ]) 1 2 3 4 5 6 7 8 9 10 [[ 24. ] [ 21.6] [ 34.7] [ 33.4] [ 36.2] [ 28.7] [ 22.9] [ 27.1] [ 16.5] [ 18.9]] 1 print ( Xb [: 10 ]) 1 2 3 4 5 6 7 8 9 10 [[ 6.575] [ 6.421] [ 7.185] [ 6.998] [ 7.147] [ 6.43 ] [ 6.012] [ 6.172] [ 5.631] [ 6.004]] 1 2 3 4 # Plot data plt . scatter ( Xb , yb ) plt . ylabel ( 'value of house /1000 ($)' ) plt . xlabel ( 'number of rooms' ) 1 &lt;matplotlib.text.Text at 0x7f3681ae90b8&gt; 1 2 3 4 5 # Create linear regression object regr = linear_model . LinearRegression () # Train the model using the training sets regr . fit ( Xb , yb ) 1 LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False) 1 2 3 4 5 # Plot outputs plt . scatter ( Xb , yb , color = 'black' ) plt . plot ( Xb , regr . predict ( Xb ), color = 'blue' , linewidth = 3 ) plt . show () Logistic regression (Logit) \u00b6 With random numbers \u00b6 1 2 3 4 5 6 # Synthesize data X1 = np . random . normal ( size = 150 ) y1 = ( X1 > 0 ) . astype ( np . float ) X1 [ X1 > 0 ] *= 4 X1 += . 3 * np . random . normal ( size = 150 ) X1 = X1 . reshape ( - 1 , 1 ) 1 2 3 # Run the classifier clf = linear_model . LogisticRegression () clf . fit ( X1 , y1 ) 1 2 3 4 LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1, penalty='l2', random_state=None, solver='liblinear', tol=0.0001, verbose=0, warm_start=False) 1 X1 [: 10 ] 1 2 3 4 5 6 7 8 9 10 array([[-0.74466839], [ 0.47335714], [-1.94951938], [ 0.12078443], [-1.62121705], [-2.23684396], [ 7.66984914], [-0.31941781], [-1.07205326], [ 0.85413978]]) 1 2 3 4 # Order X1 X1_ordered = sorted ( X1 , reverse = False ) X1_ordered [: 10 ] 1 2 3 4 5 6 7 8 9 10 [array([-3.29826361]), array([-2.76292445]), array([-2.23684396]), array([-1.96629089]), array([-1.94951938]), array([-1.87501025]), array([-1.83321548]), array([-1.73611093]), array([-1.62121705]), array([-1.61885181])] 1 2 3 4 5 6 # Plot the result plt . scatter ( X1 . ravel (), y1 , color = 'black' , zorder = 20 , alpha = 0.5 ) plt . plot ( X1_ordered , clf . predict_proba ( X1_ordered )[:, 1 ], color = 'blue' , linewidth = 3 ) plt . ylabel ( 'target variable' ) plt . xlabel ( 'predictor variable' ) plt . show () With the Wine dataset \u00b6 1 2 3 4 # Load data df = pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';' ) df . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } fixed acidity volatile acidity citric acid residual sugar chlorides free sulfur dioxide total sulfur dioxide density pH sulphates alcohol quality 0 7.4 0.70 0.00 1.9 0.076 11.0 34.0 0.9978 3.51 0.56 9.4 5 1 7.8 0.88 0.00 2.6 0.098 25.0 67.0 0.9968 3.20 0.68 9.8 5 2 7.8 0.76 0.04 2.3 0.092 15.0 54.0 0.9970 3.26 0.65 9.8 5 1 2 3 4 5 # Drop target variable X = df . drop ( 'quality' , 1 ) . values # Print the array print ( X ) 1 2 3 4 5 6 7 [[ 7.4 0.7 0. ..., 3.51 0.56 9.4 ] [ 7.8 0.88 0. ..., 3.2 0.68 9.8 ] [ 7.8 0.76 0.04 ..., 3.26 0.65 9.8 ] ..., [ 6.3 0.51 0.13 ..., 3.42 0.75 11. ] [ 5.9 0.645 0.12 ..., 3.57 0.71 10.2 ] [ 6. 0.31 0.47 ..., 3.39 0.66 11. ]] The last column is gone. 1 2 3 4 y1 = df [ 'quality' ] . values # Print the single-row array print ( y1 ) 1 [5 5 5 ..., 6 5 6] 1 df . shape 1 (1599, 12) 1 2 3 4 # plot the other columns or variables pd . DataFrame . hist ( df , figsize = [ 15 , 15 ]); plt . show () # facultative in Jypyter Let us turn it into a two-category variable consisting of \u2018good\u2019 (rating > 5) & \u2018bad\u2019 (rating <= 5) qualities. 1 2 3 # is the rating <= 5 ? y = y1 <= 5 print ( y ) 1 [ True True True ..., False True False] 1 2 3 4 5 6 7 8 9 from sklearn.cross_validation import train_test_split # split # 80% of the data for training (train set) # 20% for testing (test set) X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) 1 2 3 4 from sklearn import linear_model # Initial logistic regression model lr = linear_model . LogisticRegression () 1 2 3 4 5 6 # Fit the model lr = lr . fit ( X_train , y_train ) y_true , y_pred = y_train , lr . predict ( X_train ) # Evaluate the train set print ( 'Logistic Regression score for train set: %f ' % lr . score ( X_train , y_train )) 1 Logistic Regression score for train set: 0.752932 1 print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.77 0.75 0.76 676 True 0.73 0.75 0.74 603 avg / total 0.75 0.75 0.75 1279 1 2 3 4 5 6 7 from sklearn.metrics import classification_report # Use the test set y_true , y_pred = y_test , lr . predict ( X_test ) # Evaluate the test set print ( 'Logistic Regression score for test set: %f ' % lr . score ( X_test , y_test )) 1 Logistic Regression score for test set: 0.740625 1 print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.78 0.74 0.76 179 True 0.69 0.74 0.71 141 avg / total 0.74 0.74 0.74 320 Note : the logistic regression performs better than k-NN without scaling. Scale the data \u00b6 1 print ( X ) 1 2 3 4 5 6 7 [[ 7.4 0.7 0. ..., 3.51 0.56 9.4 ] [ 7.8 0.88 0. ..., 3.2 0.68 9.8 ] [ 7.8 0.76 0.04 ..., 3.26 0.65 9.8 ] ..., [ 6.3 0.51 0.13 ..., 3.42 0.75 11. ] [ 5.9 0.645 0.12 ..., 3.57 0.71 10.2 ] [ 6. 0.31 0.47 ..., 3.39 0.66 11. ]] 1 2 3 4 from sklearn.preprocessing import scale Xs = scale ( X ) print ( Xs ) 1 2 3 4 5 6 7 8 9 10 11 12 13 [[-0.52835961 0.96187667 -1.39147228 ..., 1.28864292 -0.57920652 -0.96024611] [-0.29854743 1.96744245 -1.39147228 ..., -0.7199333 0.1289504 -0.58477711] [-0.29854743 1.29706527 -1.18607043 ..., -0.33117661 -0.04808883 -0.58477711] ..., [-1.1603431 -0.09955388 -0.72391627 ..., 0.70550789 0.54204194 0.54162988] [-1.39015528 0.65462046 -0.77526673 ..., 1.6773996 0.30598963 -0.20930812] [-1.33270223 -1.21684919 1.02199944 ..., 0.51112954 0.01092425 0.54162988]] Run the Logit and measure the performance \u00b6 1 2 3 4 5 6 7 from sklearn.cross_validation import train_test_split # Split 80/20 Xs_train , Xs_test , y_train , y_test = train_test_split ( Xs , y , test_size = 0.2 , random_state = 42 ) 1 2 # Run the logistic regression model lr_2 = lr . fit ( Xs_train , y_train ) 1 2 3 4 5 # Fit the model y_true , y_pred = y_train , lr_2 . predict ( Xs_train ) # Evaluate the train set print ( 'Logistic Regression score for train set: %f ' % lr_2 . score ( Xs_train , y_train )) 1 Logistic Regression score for train set: 0.752150 1 print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.77 0.76 0.76 676 True 0.73 0.75 0.74 603 avg / total 0.75 0.75 0.75 1279 1 2 3 4 5 # Use the test set y_true , y_pred = y_test , lr_2 . predict ( Xs_test ) # Evaluate the test set print ( 'Logistic Regression score for test set: %f ' % lr_2 . score ( Xs_test , y_test )) 1 Logistic Regression score for test set: 0.740625 1 print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.79 0.74 0.76 179 True 0.69 0.74 0.72 141 avg / total 0.74 0.74 0.74 320 This is very interesting! The performance of logistic regression did not improve with data scaling. Predictor variables with large ranges that do not effect the target variable, a regression algorithm will make the corresponding coefficients small so that they do not effect predictions so much. Logit Recap \u00b6 Without scaling \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # Set sc = False # do not scale the features sc = False # Load the data df = pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';' ) X = df . drop ( 'quality' , 1 ) . values # drop target variable # Scale, if desired if sc == True : X = scale ( X ) # Target value y1 = df [ 'quality' ] . values # original target variable y = y1 <= 5 # new target variable: is the rating <= 5? # Split (80/20) the data into a test set and a train # X_train, X_test, y_train, y_test train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) # Train logistic regression model lr = linear_model . LogisticRegression () lr = lr . fit ( X_train , y_train ) # Print performance on the test set print ( 'Logistic Regression score for training set: %f ' % lr . score ( X_train , y_train )) y_true , y_pred = y_test , lr . predict ( X_test ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 7 Logistic Regression score for training set: 0.752932 precision recall f1-score support False 0.78 0.74 0.76 179 True 0.69 0.74 0.71 141 avg / total 0.74 0.74 0.74 320 Noise and scaling \u00b6 The noisier the symthesized data, the more important scaling will be. Measurements can be in meters and and miles, with small or large ranges. If we scale the data, they end up being the same. scikit-learn\u2019s make_blobs function to generate 2000 data points that are in 4 clusters (each data point has 2 predictor variables and 1 target variable). 1 % pylab inline 1 Populating the interactive namespace from numpy and matplotlib 1 2 3 4 5 6 7 8 # Generate some clustered data (blobs!) import numpy as np from sklearn.datasets.samples_generator import make_blobs n_samples = 2000 X , y = make_blobs ( n_samples , centers = 4 , n_features = 2 , random_state = 0 ) print ( X ) 1 2 3 4 5 6 7 [[-0.46530384 1.73299482] [-0.33963733 3.84220272] [ 2.25309569 0.99541446] ..., [ 1.03616476 4.09126428] [-0.5901088 3.68821314] [ 2.30405277 4.20250584]] 1 print ( y ) 1 [2 0 1 ..., 0 2 0] Plotting the synthesized data \u00b6 Each axis is a predictor variable and the colour is a key to the target variable All possible target variables are equally represented. In this case (or even if they are approximately equally represented), we say that the class y is balanced. 1 2 3 4 5 6 7 8 9 10 11 import matplotlib.pyplot as plt plt . style . use ( 'ggplot' ) plt . figure ( figsize = ( 20 , 5 )); plt . subplot ( 1 , 2 , 1 ); plt . scatter ( X [:, 0 ] , X [:, 1 ], c = y , alpha = 0.7 ); plt . subplot ( 1 , 2 , 2 ); plt . hist ( y ) plt . show () Plot histograms of the features. 1 2 3 4 5 6 7 import pandas as pd # Convert to a DataFrame df = pd . DataFrame ( X ) # Plot it pd . DataFrame . hist ( df , figsize = ( 20 , 5 )) 1 2 array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x7f366d3dbba8&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x7f366d30ca58&gt;]], dtype=object) Split into test & train sets, and plot both sets (train set > test set; 80/20). 1 2 3 4 5 6 from sklearn.cross_validation import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) 1 2 3 4 5 6 7 8 9 plt . figure ( figsize = ( 20 , 5 )); plt . subplot ( 1 , 2 , 1 ); plt . title ( 'training set' ) plt . scatter ( X_train [:, 0 ] , X_train [:, 1 ], c = y_train , alpha = 0.7 ); plt . subplot ( 1 , 2 , 2 ); plt . scatter ( X_test [:, 0 ] , X_test [:, 1 ], c = y_test , alpha = 0.7 ); plt . title ( 'test set' ) plt . show () k-Nearest Neighbours \u00b6 Let\u2019s instantiate a k-Nearest Neighbours classifier and train it on our train set. 1 2 3 4 from sklearn import neighbors , linear_model knn = neighbors . KNeighborsClassifier () knn_model = knn . fit ( X_train , y_train ) Fit the knn_model to the test set and compute the accuracy. 1 knn_model . score ( X_test , y_test ) 1 0.93500000000000005 1 print ( 'k-NN score for test set: %f ' % knn_model . score ( X_test , y_test )) 1 k-NN score for test set: 0.935000 Check out a variety of other metrics. 1 2 3 4 from sklearn.metrics import classification_report y_true , y_pred = y_test , knn_model . predict ( X_test ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 7 8 precision recall f1-score support 0 0.87 0.90 0.88 106 1 0.98 0.93 0.95 102 2 0.90 0.92 0.91 100 3 1.00 1.00 1.00 92 avg / total 0.94 0.94 0.94 400 Re-fit knn_model to the train set and compute the accuracy. 1 print ( 'k-NN score for train set: %f ' % knn_model . score ( X_train , y_train )) 1 k-NN score for train set: 0.941875 1 2 3 4 from sklearn.metrics import classification_report y_true , y_pred = y_train , knn_model . predict ( X_train ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 7 8 precision recall f1-score support 0 0.88 0.90 0.89 394 1 0.97 0.96 0.96 398 2 0.94 0.93 0.93 400 3 0.99 0.98 0.98 408 avg / total 0.94 0.94 0.94 1600 Scale the data, run the k-NN, and measure the performance \u00b6 1 print ( X ) 1 2 3 4 5 6 7 [[-0.46530384 1.73299482] [-0.33963733 3.84220272] [ 2.25309569 0.99541446] ..., [ 1.03616476 4.09126428] [-0.5901088 3.68821314] [ 2.30405277 4.20250584]] 1 2 3 4 from sklearn.preprocessing import scale Xs = scale ( X ) print ( Xs ) 1 2 3 4 5 6 7 [[-0.26508542 -0.82638395] [-0.19594894 -0.0519305 ] [ 1.23046484 -1.09720678] ..., [ 0.5609601 0.03951927] [-0.33374791 -0.10847199] [ 1.25849931 0.08036466]] 1 2 3 4 5 6 from sklearn.cross_validation import train_test_split Xs_train , Xs_test , y_train , y_test = train_test_split ( Xs , y , test_size = 0.2 , random_state = 42 ) 1 2 3 4 5 6 7 8 9 10 11 plt . figure ( figsize = ( 20 , 5 )); plt . subplot ( 1 , 2 , 1 ); plt . scatter ( Xs_train [:, 0 ] , Xs_train [:, 1 ], c = y_train , alpha = 0.7 ); plt . title ( 'scaled training set' ) plt . subplot ( 1 , 2 , 2 ); plt . scatter ( Xs_test [:, 0 ] , Xs_test [:, 1 ], c = y_test , alpha = 0.7 ); plt . title ( 'scaled test set' ) plt . show () 1 2 3 knn_model_s = knn . fit ( Xs_train , y_train ) print ( 'k-NN score for test set: %f ' % knn_model_s . score ( Xs_test , y_test )) 1 k-NN score for test set: 0.935000 It doesn\u2019t perform any better with scaling. This is most likely because both features were already around the same range. Add noise to the signal \u00b6 Adding a third variable of Gaussian noise with mean 0 and variable standard deviation \\sigma \\sigma . We call \\sigma \\sigma the strength of the noise and we see that the stronger the noise, the worse the performance of k-Nearest Neighbours. 1 2 3 4 5 6 7 8 # Strength of noise term ns = 10 ** ( 3 ) # Add noise column to predictor variables newcol = np . transpose ([ ns * np . random . randn ( n_samples )]) Xn = np . concatenate (( X , newcol ), axis = 1 ) print ( Xn ) 1 2 3 4 5 6 7 [[ -4.65303843e-01 1.73299482e+00 -9.41949646e+01] [ -3.39637332e-01 3.84220272e+00 -1.00446506e+03] [ 2.25309569e+00 9.95414462e-01 2.95697211e+02] ..., [ 1.03616476e+00 4.09126428e+00 -1.16020635e+02] [ -5.90108797e-01 3.68821314e+00 5.60244701e+02] [ 2.30405277e+00 4.20250584e+00 -8.97600798e+02]] Plot the 3D data. 1 2 3 4 5 from mpl_toolkits.mplot3d import Axes3D fig = plt . figure ( figsize = ( 15 , 10 )) ax = fig . add_subplot ( 111 , projection = '3d' , alpha = 0.5 ) ax . scatter ( Xn [:, 0 ], Xn [:, 1 ], Xn [:, 2 ], c = y ) 1 &lt;mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7f366d409cf8&gt; Run the k-NN and measure the performance \u00b6 1 2 3 4 5 # Split into train-test sets Xn_train , Xn_test , y_train , y_test = train_test_split ( Xn , y , test_size = 0.2 , random_state = 42 ) 1 2 3 # Run the model knn = neighbors . KNeighborsClassifier () knn_model = knn . fit ( Xn_train , y_train ) 1 2 # Evaluate print ( 'k-NN score for test set: %f ' % knn_model . score ( Xn_test , y_test )) 1 k-NN score for test set: 0.337500 Horrible! Scale the data, add noise, run the k-NN, and measure the performance \u00b6 1 2 3 4 # Scale Xns = scale ( Xn ) print ( Xns ) 1 2 3 4 5 6 7 [[-0.26508542 -0.82638395 -0.07164275] [-0.19594894 -0.0519305 -0.98584539] [ 1.23046484 -1.09720678 0.31993383] ..., [ 0.5609601 0.03951927 -0.09356271] [-0.33374791 -0.10847199 0.58562421] [ 1.25849931 0.08036466 -0.87851945]] 1 2 3 4 5 6 7 8 9 10 11 12 13 # Apply noise s = int ( . 2 * n_samples ) Xns_train = Xns [ s :] y_train = y [ s :] Xns_test = Xns [: s ] y_test = y [: s ] # Run the model knn = neighbors . KNeighborsClassifier () knn_models = knn . fit ( Xns_train , y_train ) # Evaluate print ( 'k-NN score for test set: %f ' % knn_models . score ( Xns_test , y_test )) 1 k-NN score for test set: 0.917500 After scaling the data, the model performs nearly as well as were there no noise introduced. Noise strength vs. accuracy (and the need for scaling) \u00b6 How the noise strength can effect model accuracy? Create a function to split the data and run the model. Use the function in a loop. 1 2 3 4 5 6 7 8 9 10 def accu ( X , y ): X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) knn = neighbors . KNeighborsClassifier () knn_model = knn . fit ( X_train , y_train ) return ( knn_model . score ( X_test , y_test )) 1 2 3 4 5 # Set the variables noise = [ 10 ** i for i in np . arange ( 0 , 6 )] A1 = np . zeros ( len ( noise )) A2 = np . zeros ( len ( noise )) count = 0 1 print ( noise ) 1 [1, 10, 100, 1000, 10000, 100000] 1 2 print ( A1 ) print ( A2 ) 1 2 [ 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0.] 1 2 3 4 5 6 7 8 # Run the loop for ns in noise : newcol = np . transpose ([ ns * np . random . randn ( n_samples )]) Xn = np . concatenate (( X , newcol ), axis = 1 ) Xns = scale ( Xn ) A1 [ count ] = accu ( Xn , y ) A2 [ count ] = accu ( Xns , y ) count += 1 1 2 3 4 5 6 7 8 9 # Plot the results plt . scatter ( noise , A1 ) plt . plot ( noise , A1 , label = 'unscaled' , linewidth = 2 ) plt . scatter ( noise , A2 , c = 'r' ) plt . plot ( noise , A2 , label = 'scaled' , linewidth = 2 ) plt . xscale ( 'log' ) plt . xlabel ( 'Noise strength' ) plt . ylabel ( 'Accuracy' ) plt . legend ( loc = 3 ); 1 2 print ( A1 ) print ( A2 ) 1 2 [ 0.9225 0.9175 0.8025 0.3275 0.22 0.2525] [ 0.91 0.9175 0.9325 0.9075 0.9325 0.92 ] The more noise there is in the nuisance variable, the more important it is to scale the data for the k-NN model. More noise, more scaling. Logit (Repeat the k-NN procedure) \u00b6 1 2 3 4 5 # Change the exponent of 10 to alter the amount of noise ns = 10 ** ( 3 ) # Strength of noise term # Set sc = True if we want to scale the features sc = True 1 2 3 4 5 6 # Import packages import numpy as np from sklearn.cross_validation import train_test_split from sklearn import neighbors , linear_model from sklearn.preprocessing import scale from sklearn.datasets.samples_generator import make_blobs 1 2 3 4 5 6 # Generate some data n_samples = 2000 X , y = make_blobs ( n_samples , centers = 4 , n_features = 2 , random_state = 0 ) 1 2 3 # Add noise column to predictor variables newcol = np . transpose ([ ns * np . random . randn ( n_samples )]) Xn = np . concatenate (( X , newcol ), axis = 1 ) 1 2 3 # Scale if desired if sc == True : Xn = scale ( Xn ) 1 2 3 4 5 # Train model and test after splitting Xn_train , Xn_test , y_train , y_test = train_test_split ( Xn , y , test_size = 0.2 , random_state = 42 ) lr = linear_model . LogisticRegression () lr_model = lr . fit ( Xn_train , y_train ) print ( 'logistic regression score for test set: %f ' % lr_model . score ( Xn_test , y_test )) 1 logistic regression score for test set: 0.942500","title":"k-NN, Linear regression, Logit, Scaling, Centering, Noise"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nearest-neighbours","text":"","title":"k-Nearest Neighbours"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#measure-performance","text":"Accuracy is the default scoring method for both k-Nearest Neighbours and logistic regression. \\text{Accuracy}=\\frac{\\text{Number of Correct Predictions}}{\\text{Total Number of Predictions}} \\text{Accuracy}=\\frac{\\text{Number of Correct Predictions}}{\\text{Total Number of Predictions}} Accuracy is commonly defined for binary classification problems in terms of true positives & false negatives. It can also be defined in terms of a confusion matrix . Other measures of model performance are derived from the confusion matrix: precision (true positives divided by the number of true & false positives) and recall (number of true positives divided by the number of true positives plus the number of false negatives). The F1-score is the harmonic mean of the precision and the recall.","title":"Measure performance"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#train-test-split-and-performance-in-practice","text":"The rule of thumb is to use approximately 80% of the data for training (train set) and 20% for testing (test set). 1 2 3 4 5 6 from sklearn.cross_validation import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) 1 2 3 4 5 # the k-NN model from sklearn import neighbors , linear_model knn = neighbors . KNeighborsClassifier ( n_neighbors = 5 ) knn_model_1 = knn . fit ( X_train , y_train ) 1 2 print ( 'k-NN score for test set: %f ' % knn_model_1 . score ( X_test , y_test )) print ( 'k-NN score for training set: %f ' % knn_model_1 . score ( X_train , y_train )) 1 2 k-NN score for test set: 0.612500 k-NN score for training set: 0.774042 The accuracy, more specifically the test accuracy, is not great. Let us print out all the other performance measures for the test set. 1 2 3 4 from sklearn.metrics import classification_report y_true , y_pred = y_test , knn_model_1 . predict ( X_test ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.66 0.64 0.65 179 True 0.56 0.57 0.57 141 avg / total 0.61 0.61 0.61 320 Other performance measures for the train set. 1 2 y_true , y_pred = y_train , knn_model_1 . predict ( X_train ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.80 0.76 0.78 676 True 0.75 0.79 0.77 603 avg / total 0.78 0.77 0.77 1279 These underperformances might come from the spread in the variables. The range of each variable is different; some are wider.","title":"Train-test split and performance in practice"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#preprocessing-scaling-and-centering-the-data","text":"Preprocessing happens before running any model, such as a regression (predicting a continuous variable) or a classification (predicting a discrete variable) using one or another model (k-NN, logistic, decision tree, random forests etc.). For numerical variables, it is common to either normalize or standardize the data. Normalization : scaling a dataset so that its minimum is 0 and its maximum 1. x_{normalized} = \\frac{x-x_{min}}{x_{max}-x_{min}} x_{normalized} = \\frac{x-x_{min}}{x_{max}-x_{min}} Stardardization : centering the data around 0 and to scale with respect to the standard deviation. x_{standardized} = \\frac{x-\\mu}{\\sigma} x_{standardized} = \\frac{x-\\mu}{\\sigma} where \\mu \\mu and \\sigma \\sigma are the mean and standard deviation of the dataset. There are other transformatoions, such as the log transformation or the Box-Cox transformation, to make the data look more Gaussian or a normally distributed.","title":"Preprocessing: scaling and centering the data"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nn-scaling-in-practice","text":"","title":"k-NN: scaling in practice"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data","text":"1 print ( X ) 1 2 3 4 5 6 7 [[ 7.4 0.7 0. ..., 3.51 0.56 9.4 ] [ 7.8 0.88 0. ..., 3.2 0.68 9.8 ] [ 7.8 0.76 0.04 ..., 3.26 0.65 9.8 ] ..., [ 6.3 0.51 0.13 ..., 3.42 0.75 11. ] [ 5.9 0.645 0.12 ..., 3.57 0.71 10.2 ] [ 6. 0.31 0.47 ..., 3.39 0.66 11. ]] 1 2 3 4 5 from sklearn.preprocessing import scale # minimum is 0 and its maximum 1 Xs = scale ( X ) print ( Xs ) 1 2 3 4 5 6 7 8 9 10 11 12 13 [[-0.52835961 0.96187667 -1.39147228 ..., 1.28864292 -0.57920652 -0.96024611] [-0.29854743 1.96744245 -1.39147228 ..., -0.7199333 0.1289504 -0.58477711] [-0.29854743 1.29706527 -1.18607043 ..., -0.33117661 -0.04808883 -0.58477711] ..., [-1.1603431 -0.09955388 -0.72391627 ..., 0.70550789 0.54204194 0.54162988] [-1.39015528 0.65462046 -0.77526673 ..., 1.6773996 0.30598963 -0.20930812] [-1.33270223 -1.21684919 1.02199944 ..., 0.51112954 0.01092425 0.54162988]]","title":"Scale the data"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#run-the-k-nn","text":"1 2 3 4 5 6 7 8 9 from sklearn.cross_validation import train_test_split # split # 80% of the data for training (train set) # 20% for testing (test set) Xs_train , Xs_test , y_train , y_test = train_test_split ( Xs , y , test_size = 0.2 , random_state = 42 ) 1 2 # Run knn_model_2 = knn . fit ( Xs_train , y_train )","title":"Run the k-NN"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#measure-the-performance","text":"1 2 print ( 'k-NN score for test set: %f ' % knn_model_2 . score ( Xs_test , y_test )) print ( 'k-NN score for training set: %f ' % knn_model_2 . score ( Xs_train , y_train )) 1 2 k-NN score for test set: 0.712500 k-NN score for training set: 0.814699 1 2 3 4 y_true , y_pred = y_test , knn_model_2 . predict ( Xs_test ) # Test set print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.72 0.79 0.75 179 True 0.70 0.62 0.65 141 avg / total 0.71 0.71 0.71 320 1 2 3 4 y_true , y_pred = y_train , knn_model_2 . predict ( Xs_train ) # Train set print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.80 0.86 0.83 676 True 0.83 0.77 0.80 603 avg / total 0.82 0.81 0.81 1279 Normalization-scaling improves the performance compare to the previous classification_report .","title":"Measure the performance"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nn-recap","text":"","title":"k-NN Recap"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#without-scaling","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # Set sc = False # Do not scale the features sc = False # Set the number of k in k-NN nk = 5 # Load data df = pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';' ) # Drop target variable X = df . drop ( 'quality' , 1 ) . values # Scale, if desired if sc == True : X = scale ( X ) # Target value y1 = df [ 'quality' ] . values # original target variable # New target variable: is the rating <= 5? y = y1 <= 5 # Split (80/20) the data into a test set and a train set # X_train, X_test, y_train, y_test X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) # Train the k-NN model knn = neighbors . KNeighborsClassifier ( n_neighbors = nk ) knn_model = knn . fit ( X_train , y_train ) # Print performance on the test set print ( 'k-NN accuracy for test set: %f ' % knn_model . score ( X_test , y_test )) y_true , y_pred = y_test , knn_model . predict ( X_test ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 7 k-NN accuracy for test set: 0.612500 precision recall f1-score support False 0.66 0.64 0.65 179 True 0.56 0.57 0.57 141 avg / total 0.61 0.61 0.61 320","title":"Without scaling"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#with-scaling","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # Set sc = True # to scale the features sc = True # Set the number of k in k-NN nk = 5 # Load data df = pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';' ) # Drop target variable X = df . drop ( 'quality' , 1 ) . values # Scale, if desired if sc == True : X = scale ( X ) # Target value y1 = df [ 'quality' ] . values # original target variable # New target variable: is the rating <= 5? y = y1 <= 5 # Split (80/20) the data into a test set and a train set # X_train, X_test, y_train, y_test X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) # Train the k-NN model knn = neighbors . KNeighborsClassifier ( n_neighbors = nk ) knn_model = knn . fit ( X_train , y_train ) # Print performance on the test set print ( 'k-NN accuracy for test set: %f ' % knn_model . score ( X_test , y_test )) y_true , y_pred = y_test , knn_model . predict ( X_test ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 7 k-NN accuracy for test set: 0.712500 precision recall f1-score support False 0.72 0.79 0.75 179 True 0.70 0.62 0.65 141 avg / total 0.71 0.71 0.71 320","title":"With scaling"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#linear-regression","text":"Before addressing an alternative to k-NN, the logistic regression or Logit, let us briefly review the linear regresion with a different dataset. 1 2 3 4 5 6 7 8 9 10 11 12 # Import necessary packages % pylab inline import pandas as pd import matplotlib.pyplot as plt # set the style plt . style . use ( 'ggplot' ) # Import nmore packages from sklearn import datasets from sklearn import linear_model import numpy as np 1 Populating the interactive namespace from numpy and matplotlib 1 2 3 4 5 6 7 # Load the data # The data is part of the scikit-learn module boston = datasets . load_boston () yb = boston . target . reshape ( - 1 , 1 ) Xb = boston [ 'data' ][:, 5 ] . reshape ( - 1 , 1 ) print ( yb [: 10 ]) 1 2 3 4 5 6 7 8 9 10 [[ 24. ] [ 21.6] [ 34.7] [ 33.4] [ 36.2] [ 28.7] [ 22.9] [ 27.1] [ 16.5] [ 18.9]] 1 print ( Xb [: 10 ]) 1 2 3 4 5 6 7 8 9 10 [[ 6.575] [ 6.421] [ 7.185] [ 6.998] [ 7.147] [ 6.43 ] [ 6.012] [ 6.172] [ 5.631] [ 6.004]] 1 2 3 4 # Plot data plt . scatter ( Xb , yb ) plt . ylabel ( 'value of house /1000 ($)' ) plt . xlabel ( 'number of rooms' ) 1 &lt;matplotlib.text.Text at 0x7f3681ae90b8&gt; 1 2 3 4 5 # Create linear regression object regr = linear_model . LinearRegression () # Train the model using the training sets regr . fit ( Xb , yb ) 1 LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False) 1 2 3 4 5 # Plot outputs plt . scatter ( Xb , yb , color = 'black' ) plt . plot ( Xb , regr . predict ( Xb ), color = 'blue' , linewidth = 3 ) plt . show ()","title":"Linear regression"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#logistic-regression-logit","text":"","title":"Logistic regression (Logit)"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#with-random-numbers","text":"1 2 3 4 5 6 # Synthesize data X1 = np . random . normal ( size = 150 ) y1 = ( X1 > 0 ) . astype ( np . float ) X1 [ X1 > 0 ] *= 4 X1 += . 3 * np . random . normal ( size = 150 ) X1 = X1 . reshape ( - 1 , 1 ) 1 2 3 # Run the classifier clf = linear_model . LogisticRegression () clf . fit ( X1 , y1 ) 1 2 3 4 LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1, penalty='l2', random_state=None, solver='liblinear', tol=0.0001, verbose=0, warm_start=False) 1 X1 [: 10 ] 1 2 3 4 5 6 7 8 9 10 array([[-0.74466839], [ 0.47335714], [-1.94951938], [ 0.12078443], [-1.62121705], [-2.23684396], [ 7.66984914], [-0.31941781], [-1.07205326], [ 0.85413978]]) 1 2 3 4 # Order X1 X1_ordered = sorted ( X1 , reverse = False ) X1_ordered [: 10 ] 1 2 3 4 5 6 7 8 9 10 [array([-3.29826361]), array([-2.76292445]), array([-2.23684396]), array([-1.96629089]), array([-1.94951938]), array([-1.87501025]), array([-1.83321548]), array([-1.73611093]), array([-1.62121705]), array([-1.61885181])] 1 2 3 4 5 6 # Plot the result plt . scatter ( X1 . ravel (), y1 , color = 'black' , zorder = 20 , alpha = 0.5 ) plt . plot ( X1_ordered , clf . predict_proba ( X1_ordered )[:, 1 ], color = 'blue' , linewidth = 3 ) plt . ylabel ( 'target variable' ) plt . xlabel ( 'predictor variable' ) plt . show ()","title":"With random numbers"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#with-the-wine-dataset","text":"1 2 3 4 # Load data df = pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';' ) df . head ( 3 ) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } fixed acidity volatile acidity citric acid residual sugar chlorides free sulfur dioxide total sulfur dioxide density pH sulphates alcohol quality 0 7.4 0.70 0.00 1.9 0.076 11.0 34.0 0.9978 3.51 0.56 9.4 5 1 7.8 0.88 0.00 2.6 0.098 25.0 67.0 0.9968 3.20 0.68 9.8 5 2 7.8 0.76 0.04 2.3 0.092 15.0 54.0 0.9970 3.26 0.65 9.8 5 1 2 3 4 5 # Drop target variable X = df . drop ( 'quality' , 1 ) . values # Print the array print ( X ) 1 2 3 4 5 6 7 [[ 7.4 0.7 0. ..., 3.51 0.56 9.4 ] [ 7.8 0.88 0. ..., 3.2 0.68 9.8 ] [ 7.8 0.76 0.04 ..., 3.26 0.65 9.8 ] ..., [ 6.3 0.51 0.13 ..., 3.42 0.75 11. ] [ 5.9 0.645 0.12 ..., 3.57 0.71 10.2 ] [ 6. 0.31 0.47 ..., 3.39 0.66 11. ]] The last column is gone. 1 2 3 4 y1 = df [ 'quality' ] . values # Print the single-row array print ( y1 ) 1 [5 5 5 ..., 6 5 6] 1 df . shape 1 (1599, 12) 1 2 3 4 # plot the other columns or variables pd . DataFrame . hist ( df , figsize = [ 15 , 15 ]); plt . show () # facultative in Jypyter Let us turn it into a two-category variable consisting of \u2018good\u2019 (rating > 5) & \u2018bad\u2019 (rating <= 5) qualities. 1 2 3 # is the rating <= 5 ? y = y1 <= 5 print ( y ) 1 [ True True True ..., False True False] 1 2 3 4 5 6 7 8 9 from sklearn.cross_validation import train_test_split # split # 80% of the data for training (train set) # 20% for testing (test set) X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) 1 2 3 4 from sklearn import linear_model # Initial logistic regression model lr = linear_model . LogisticRegression () 1 2 3 4 5 6 # Fit the model lr = lr . fit ( X_train , y_train ) y_true , y_pred = y_train , lr . predict ( X_train ) # Evaluate the train set print ( 'Logistic Regression score for train set: %f ' % lr . score ( X_train , y_train )) 1 Logistic Regression score for train set: 0.752932 1 print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.77 0.75 0.76 676 True 0.73 0.75 0.74 603 avg / total 0.75 0.75 0.75 1279 1 2 3 4 5 6 7 from sklearn.metrics import classification_report # Use the test set y_true , y_pred = y_test , lr . predict ( X_test ) # Evaluate the test set print ( 'Logistic Regression score for test set: %f ' % lr . score ( X_test , y_test )) 1 Logistic Regression score for test set: 0.740625 1 print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.78 0.74 0.76 179 True 0.69 0.74 0.71 141 avg / total 0.74 0.74 0.74 320 Note : the logistic regression performs better than k-NN without scaling.","title":"With the Wine dataset"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data_1","text":"1 print ( X ) 1 2 3 4 5 6 7 [[ 7.4 0.7 0. ..., 3.51 0.56 9.4 ] [ 7.8 0.88 0. ..., 3.2 0.68 9.8 ] [ 7.8 0.76 0.04 ..., 3.26 0.65 9.8 ] ..., [ 6.3 0.51 0.13 ..., 3.42 0.75 11. ] [ 5.9 0.645 0.12 ..., 3.57 0.71 10.2 ] [ 6. 0.31 0.47 ..., 3.39 0.66 11. ]] 1 2 3 4 from sklearn.preprocessing import scale Xs = scale ( X ) print ( Xs ) 1 2 3 4 5 6 7 8 9 10 11 12 13 [[-0.52835961 0.96187667 -1.39147228 ..., 1.28864292 -0.57920652 -0.96024611] [-0.29854743 1.96744245 -1.39147228 ..., -0.7199333 0.1289504 -0.58477711] [-0.29854743 1.29706527 -1.18607043 ..., -0.33117661 -0.04808883 -0.58477711] ..., [-1.1603431 -0.09955388 -0.72391627 ..., 0.70550789 0.54204194 0.54162988] [-1.39015528 0.65462046 -0.77526673 ..., 1.6773996 0.30598963 -0.20930812] [-1.33270223 -1.21684919 1.02199944 ..., 0.51112954 0.01092425 0.54162988]]","title":"Scale the data"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#run-the-logit-and-measure-the-performance","text":"1 2 3 4 5 6 7 from sklearn.cross_validation import train_test_split # Split 80/20 Xs_train , Xs_test , y_train , y_test = train_test_split ( Xs , y , test_size = 0.2 , random_state = 42 ) 1 2 # Run the logistic regression model lr_2 = lr . fit ( Xs_train , y_train ) 1 2 3 4 5 # Fit the model y_true , y_pred = y_train , lr_2 . predict ( Xs_train ) # Evaluate the train set print ( 'Logistic Regression score for train set: %f ' % lr_2 . score ( Xs_train , y_train )) 1 Logistic Regression score for train set: 0.752150 1 print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.77 0.76 0.76 676 True 0.73 0.75 0.74 603 avg / total 0.75 0.75 0.75 1279 1 2 3 4 5 # Use the test set y_true , y_pred = y_test , lr_2 . predict ( Xs_test ) # Evaluate the test set print ( 'Logistic Regression score for test set: %f ' % lr_2 . score ( Xs_test , y_test )) 1 Logistic Regression score for test set: 0.740625 1 print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 precision recall f1-score support False 0.79 0.74 0.76 179 True 0.69 0.74 0.72 141 avg / total 0.74 0.74 0.74 320 This is very interesting! The performance of logistic regression did not improve with data scaling. Predictor variables with large ranges that do not effect the target variable, a regression algorithm will make the corresponding coefficients small so that they do not effect predictions so much.","title":"Run the Logit and measure the performance"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#logit-recap","text":"","title":"Logit Recap"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#without-scaling_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # Set sc = False # do not scale the features sc = False # Load the data df = pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';' ) X = df . drop ( 'quality' , 1 ) . values # drop target variable # Scale, if desired if sc == True : X = scale ( X ) # Target value y1 = df [ 'quality' ] . values # original target variable y = y1 <= 5 # new target variable: is the rating <= 5? # Split (80/20) the data into a test set and a train # X_train, X_test, y_train, y_test train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) # Train logistic regression model lr = linear_model . LogisticRegression () lr = lr . fit ( X_train , y_train ) # Print performance on the test set print ( 'Logistic Regression score for training set: %f ' % lr . score ( X_train , y_train )) y_true , y_pred = y_test , lr . predict ( X_test ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 7 Logistic Regression score for training set: 0.752932 precision recall f1-score support False 0.78 0.74 0.76 179 True 0.69 0.74 0.71 141 avg / total 0.74 0.74 0.74 320","title":"Without scaling"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#noise-and-scaling","text":"The noisier the symthesized data, the more important scaling will be. Measurements can be in meters and and miles, with small or large ranges. If we scale the data, they end up being the same. scikit-learn\u2019s make_blobs function to generate 2000 data points that are in 4 clusters (each data point has 2 predictor variables and 1 target variable). 1 % pylab inline 1 Populating the interactive namespace from numpy and matplotlib 1 2 3 4 5 6 7 8 # Generate some clustered data (blobs!) import numpy as np from sklearn.datasets.samples_generator import make_blobs n_samples = 2000 X , y = make_blobs ( n_samples , centers = 4 , n_features = 2 , random_state = 0 ) print ( X ) 1 2 3 4 5 6 7 [[-0.46530384 1.73299482] [-0.33963733 3.84220272] [ 2.25309569 0.99541446] ..., [ 1.03616476 4.09126428] [-0.5901088 3.68821314] [ 2.30405277 4.20250584]] 1 print ( y ) 1 [2 0 1 ..., 0 2 0]","title":"Noise and scaling"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#plotting-the-synthesized-data","text":"Each axis is a predictor variable and the colour is a key to the target variable All possible target variables are equally represented. In this case (or even if they are approximately equally represented), we say that the class y is balanced. 1 2 3 4 5 6 7 8 9 10 11 import matplotlib.pyplot as plt plt . style . use ( 'ggplot' ) plt . figure ( figsize = ( 20 , 5 )); plt . subplot ( 1 , 2 , 1 ); plt . scatter ( X [:, 0 ] , X [:, 1 ], c = y , alpha = 0.7 ); plt . subplot ( 1 , 2 , 2 ); plt . hist ( y ) plt . show () Plot histograms of the features. 1 2 3 4 5 6 7 import pandas as pd # Convert to a DataFrame df = pd . DataFrame ( X ) # Plot it pd . DataFrame . hist ( df , figsize = ( 20 , 5 )) 1 2 array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x7f366d3dbba8&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x7f366d30ca58&gt;]], dtype=object) Split into test & train sets, and plot both sets (train set > test set; 80/20). 1 2 3 4 5 6 from sklearn.cross_validation import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) 1 2 3 4 5 6 7 8 9 plt . figure ( figsize = ( 20 , 5 )); plt . subplot ( 1 , 2 , 1 ); plt . title ( 'training set' ) plt . scatter ( X_train [:, 0 ] , X_train [:, 1 ], c = y_train , alpha = 0.7 ); plt . subplot ( 1 , 2 , 2 ); plt . scatter ( X_test [:, 0 ] , X_test [:, 1 ], c = y_test , alpha = 0.7 ); plt . title ( 'test set' ) plt . show ()","title":"Plotting the synthesized data"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nearest-neighbours_1","text":"Let\u2019s instantiate a k-Nearest Neighbours classifier and train it on our train set. 1 2 3 4 from sklearn import neighbors , linear_model knn = neighbors . KNeighborsClassifier () knn_model = knn . fit ( X_train , y_train ) Fit the knn_model to the test set and compute the accuracy. 1 knn_model . score ( X_test , y_test ) 1 0.93500000000000005 1 print ( 'k-NN score for test set: %f ' % knn_model . score ( X_test , y_test )) 1 k-NN score for test set: 0.935000 Check out a variety of other metrics. 1 2 3 4 from sklearn.metrics import classification_report y_true , y_pred = y_test , knn_model . predict ( X_test ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 7 8 precision recall f1-score support 0 0.87 0.90 0.88 106 1 0.98 0.93 0.95 102 2 0.90 0.92 0.91 100 3 1.00 1.00 1.00 92 avg / total 0.94 0.94 0.94 400 Re-fit knn_model to the train set and compute the accuracy. 1 print ( 'k-NN score for train set: %f ' % knn_model . score ( X_train , y_train )) 1 k-NN score for train set: 0.941875 1 2 3 4 from sklearn.metrics import classification_report y_true , y_pred = y_train , knn_model . predict ( X_train ) print ( classification_report ( y_true , y_pred )) 1 2 3 4 5 6 7 8 precision recall f1-score support 0 0.88 0.90 0.89 394 1 0.97 0.96 0.96 398 2 0.94 0.93 0.93 400 3 0.99 0.98 0.98 408 avg / total 0.94 0.94 0.94 1600","title":"k-Nearest Neighbours"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data-run-the-k-nn-and-measure-the-performance","text":"1 print ( X ) 1 2 3 4 5 6 7 [[-0.46530384 1.73299482] [-0.33963733 3.84220272] [ 2.25309569 0.99541446] ..., [ 1.03616476 4.09126428] [-0.5901088 3.68821314] [ 2.30405277 4.20250584]] 1 2 3 4 from sklearn.preprocessing import scale Xs = scale ( X ) print ( Xs ) 1 2 3 4 5 6 7 [[-0.26508542 -0.82638395] [-0.19594894 -0.0519305 ] [ 1.23046484 -1.09720678] ..., [ 0.5609601 0.03951927] [-0.33374791 -0.10847199] [ 1.25849931 0.08036466]] 1 2 3 4 5 6 from sklearn.cross_validation import train_test_split Xs_train , Xs_test , y_train , y_test = train_test_split ( Xs , y , test_size = 0.2 , random_state = 42 ) 1 2 3 4 5 6 7 8 9 10 11 plt . figure ( figsize = ( 20 , 5 )); plt . subplot ( 1 , 2 , 1 ); plt . scatter ( Xs_train [:, 0 ] , Xs_train [:, 1 ], c = y_train , alpha = 0.7 ); plt . title ( 'scaled training set' ) plt . subplot ( 1 , 2 , 2 ); plt . scatter ( Xs_test [:, 0 ] , Xs_test [:, 1 ], c = y_test , alpha = 0.7 ); plt . title ( 'scaled test set' ) plt . show () 1 2 3 knn_model_s = knn . fit ( Xs_train , y_train ) print ( 'k-NN score for test set: %f ' % knn_model_s . score ( Xs_test , y_test )) 1 k-NN score for test set: 0.935000 It doesn\u2019t perform any better with scaling. This is most likely because both features were already around the same range.","title":"Scale the data, run the k-NN, and measure the performance"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#add-noise-to-the-signal","text":"Adding a third variable of Gaussian noise with mean 0 and variable standard deviation \\sigma \\sigma . We call \\sigma \\sigma the strength of the noise and we see that the stronger the noise, the worse the performance of k-Nearest Neighbours. 1 2 3 4 5 6 7 8 # Strength of noise term ns = 10 ** ( 3 ) # Add noise column to predictor variables newcol = np . transpose ([ ns * np . random . randn ( n_samples )]) Xn = np . concatenate (( X , newcol ), axis = 1 ) print ( Xn ) 1 2 3 4 5 6 7 [[ -4.65303843e-01 1.73299482e+00 -9.41949646e+01] [ -3.39637332e-01 3.84220272e+00 -1.00446506e+03] [ 2.25309569e+00 9.95414462e-01 2.95697211e+02] ..., [ 1.03616476e+00 4.09126428e+00 -1.16020635e+02] [ -5.90108797e-01 3.68821314e+00 5.60244701e+02] [ 2.30405277e+00 4.20250584e+00 -8.97600798e+02]] Plot the 3D data. 1 2 3 4 5 from mpl_toolkits.mplot3d import Axes3D fig = plt . figure ( figsize = ( 15 , 10 )) ax = fig . add_subplot ( 111 , projection = '3d' , alpha = 0.5 ) ax . scatter ( Xn [:, 0 ], Xn [:, 1 ], Xn [:, 2 ], c = y ) 1 &lt;mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7f366d409cf8&gt;","title":"Add noise to the signal"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#run-the-k-nn-and-measure-the-performance","text":"1 2 3 4 5 # Split into train-test sets Xn_train , Xn_test , y_train , y_test = train_test_split ( Xn , y , test_size = 0.2 , random_state = 42 ) 1 2 3 # Run the model knn = neighbors . KNeighborsClassifier () knn_model = knn . fit ( Xn_train , y_train ) 1 2 # Evaluate print ( 'k-NN score for test set: %f ' % knn_model . score ( Xn_test , y_test )) 1 k-NN score for test set: 0.337500 Horrible!","title":"Run the k-NN and measure the performance"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data-add-noise-run-the-k-nn-and-measure-the-performance","text":"1 2 3 4 # Scale Xns = scale ( Xn ) print ( Xns ) 1 2 3 4 5 6 7 [[-0.26508542 -0.82638395 -0.07164275] [-0.19594894 -0.0519305 -0.98584539] [ 1.23046484 -1.09720678 0.31993383] ..., [ 0.5609601 0.03951927 -0.09356271] [-0.33374791 -0.10847199 0.58562421] [ 1.25849931 0.08036466 -0.87851945]] 1 2 3 4 5 6 7 8 9 10 11 12 13 # Apply noise s = int ( . 2 * n_samples ) Xns_train = Xns [ s :] y_train = y [ s :] Xns_test = Xns [: s ] y_test = y [: s ] # Run the model knn = neighbors . KNeighborsClassifier () knn_models = knn . fit ( Xns_train , y_train ) # Evaluate print ( 'k-NN score for test set: %f ' % knn_models . score ( Xns_test , y_test )) 1 k-NN score for test set: 0.917500 After scaling the data, the model performs nearly as well as were there no noise introduced.","title":"Scale the data, add noise, run the k-NN, and measure the performance"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#noise-strength-vs-accuracy-and-the-need-for-scaling","text":"How the noise strength can effect model accuracy? Create a function to split the data and run the model. Use the function in a loop. 1 2 3 4 5 6 7 8 9 10 def accu ( X , y ): X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) knn = neighbors . KNeighborsClassifier () knn_model = knn . fit ( X_train , y_train ) return ( knn_model . score ( X_test , y_test )) 1 2 3 4 5 # Set the variables noise = [ 10 ** i for i in np . arange ( 0 , 6 )] A1 = np . zeros ( len ( noise )) A2 = np . zeros ( len ( noise )) count = 0 1 print ( noise ) 1 [1, 10, 100, 1000, 10000, 100000] 1 2 print ( A1 ) print ( A2 ) 1 2 [ 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0.] 1 2 3 4 5 6 7 8 # Run the loop for ns in noise : newcol = np . transpose ([ ns * np . random . randn ( n_samples )]) Xn = np . concatenate (( X , newcol ), axis = 1 ) Xns = scale ( Xn ) A1 [ count ] = accu ( Xn , y ) A2 [ count ] = accu ( Xns , y ) count += 1 1 2 3 4 5 6 7 8 9 # Plot the results plt . scatter ( noise , A1 ) plt . plot ( noise , A1 , label = 'unscaled' , linewidth = 2 ) plt . scatter ( noise , A2 , c = 'r' ) plt . plot ( noise , A2 , label = 'scaled' , linewidth = 2 ) plt . xscale ( 'log' ) plt . xlabel ( 'Noise strength' ) plt . ylabel ( 'Accuracy' ) plt . legend ( loc = 3 ); 1 2 print ( A1 ) print ( A2 ) 1 2 [ 0.9225 0.9175 0.8025 0.3275 0.22 0.2525] [ 0.91 0.9175 0.9325 0.9075 0.9325 0.92 ] The more noise there is in the nuisance variable, the more important it is to scale the data for the k-NN model. More noise, more scaling.","title":"Noise strength vs. accuracy (and the need for scaling)"},{"location":"k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#logit-repeat-the-k-nn-procedure","text":"1 2 3 4 5 # Change the exponent of 10 to alter the amount of noise ns = 10 ** ( 3 ) # Strength of noise term # Set sc = True if we want to scale the features sc = True 1 2 3 4 5 6 # Import packages import numpy as np from sklearn.cross_validation import train_test_split from sklearn import neighbors , linear_model from sklearn.preprocessing import scale from sklearn.datasets.samples_generator import make_blobs 1 2 3 4 5 6 # Generate some data n_samples = 2000 X , y = make_blobs ( n_samples , centers = 4 , n_features = 2 , random_state = 0 ) 1 2 3 # Add noise column to predictor variables newcol = np . transpose ([ ns * np . random . randn ( n_samples )]) Xn = np . concatenate (( X , newcol ), axis = 1 ) 1 2 3 # Scale if desired if sc == True : Xn = scale ( Xn ) 1 2 3 4 5 # Train model and test after splitting Xn_train , Xn_test , y_train , y_test = train_test_split ( Xn , y , test_size = 0.2 , random_state = 42 ) lr = linear_model . LogisticRegression () lr_model = lr . fit ( Xn_train , y_train ) print ( 'logistic regression score for test set: %f ' % lr_model . score ( Xn_test , y_test )) 1 logistic regression score for test set: 0.942500","title":"Logit (Repeat the k-NN procedure)"}]}