{
    "docs": [
        {
            "location": "/",
            "text": "Let there be light!\n\n\n\n\nA Python documentation website.\n\n\nLayout\n\u00b6\n\n\n\n\nugo_py_doc\n is a corpus; a catalog of books, manuals, articles, presentations, videos, podcasts, summaries, notes, code snippets, excerpts, websites, etc.\n\n\nThe \u2018docs\u2019 is a searchable knowledge-based system.\n\n\nYou type a keyword, it leads to several sources, you identify the document, and you go retrieve the document; whether it is a digital or a material document. Fast and easy!\n\n\nThe corpus is unstructured. Knowledge is rather cumulated, layer after layer, resulting in a hotchpotch of information. Information may be repeted among many documents, with different explanations, some more comprehensive. Newer entries might also supplement or contradict older entries.",
            "title": "Home"
        },
        {
            "location": "/Py_CS/",
            "text": "CONTENT\n\n\nPython 2\n\n\nPython 3\n\n\nLibraries (Debugger, Decorators, Pip)\n\n\n\n\n\n\n\n\nForeword\n\n\nCheat sheets.\n\n\n\n\nPython 2\n\u00b6\n\n\n\n\nPython 2\n. PDF\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Quick Reference\n. PDF\n\n\n\n\n\n\n\n../img/\n\n\n\n\n\n\n\n\n\n\nPython 2\n. PDF\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython 2\n. PDF\n\n\n\n\n\n\n\n\n\n\nPython 3\n\u00b6\n\n\n\n\nPython 3\n. PDF\n\n\n\n\n\n\n\n\n\n\n\n\nLibraries (Debugger, Decorators, Pip)\n\u00b6\n\n\n\n\nPython Debugger\n. PDF\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Decorators\n. PDF\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPip Cheat Sheet\n. PDF.",
            "title": "Python Cheat Sheets"
        },
        {
            "location": "/Py_CS/#python-3",
            "text": "Python 3 . PDF",
            "title": "Python 3"
        },
        {
            "location": "/Py_CS/#libraries-debugger-decorators-pip",
            "text": "Python Debugger . PDF        Python Decorators . PDF        Pip Cheat Sheet . PDF.",
            "title": "Libraries (Debugger, Decorators, Pip)"
        },
        {
            "location": "/Python_Preliminaries/",
            "text": "CONTENT\n\n\n1, Installing (Complementary Details)\n\n\n2, pip\n\n\n3, Git\n\n\n4, Virtual Environment\n\n\n5, Launching\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\n1, Installing (Complementary Details)\n\u00b6\n\n\nPython\n\n\n\n\nInstalling Python, basic libraries, and virtual environments.\n\n\nhttp://docs.python-guide.org/en/latest/starting/install/win/#install-windows\n\n\nhttp://docs.python-guide.org/en/latest/starting/install/linux/\n\n\n\n\n\n\nSetting the path in Windows (examples):\n\n\nset PATH=%PATH%;C:\\Python27\n.\n\n\nset PATH=%PATH%;C:\\Python27\\Scripts\n.\n\n\nset PATH=%PATH%;C:\\PythonXX\n.\n\n\nset PATH=%PATH%;C:\\PythonXX\\Scripts\n.\n\n\n\n\n\n\nSetting the path in Linux (example):\n\n\nexport PYTHONPATH=$PYTHONPATH:\n.\n\n\n\u2026\n\n\n\n\n\n\n\n\n2, pip\n\u00b6\n\n\npypi\n\n\nPyPY directory of libraries.\n\n\nImportant commands:\n\n\n\n\npip help\n ou \npip --help\n.\n\n\npip install <module>\n.\n\n\npip --version\n.\n\n\npip install --upgrade pip\n\n\nsudo pip install <module>\n.\n\n\npip uninstall <module>\n.\n\n\npip install --user <module>\n: circumvent the \nsudo\n command.\n\n\n\n\n3, Git\n\u00b6\n\n\nAfter installing Git, to execute Python module in the Git Bash, (re)set the path in the Git Bash (example): \nexport PATH=\"$PATH:/c/Python27\"\n, \n\n\nexport PATH=\"$PATH:/c/Python27/Scripts\"\n, \u2026 The Git Bash simulates a UNIX-type environment.\n\n\n4, Virtual Environment\n\u00b6\n\n\nvirtual, environment, separate, project\n\n\nWhen you install a library, it is accessible to all python scripts. Project A and B have access to the library. \n\n\nIt brings out a problem if \u201cProject A depends on version 1.x but, Project B needs 4.x\u201d. This problem is recurrent when working with web frameworks. For example, you can work on a project which requires Django 1.3 while also maintaining a project which requires Django 1.0.\n\n\nA virtual environment solves this problem by building a sandbox for a project.\n\n\n5, Launching\n\u00b6\n\n\nWindows vs. UNIX (Linux or Mac OS X).\n\n\nAt the top of scripts\n\n\n\n\nIn Windows, Python 2:\n\n\npython\n\n\n\n\n\n\nWindows, Python 3:\n\n\npython 3\n\n\n\n\n\n\nUNIX, Python 2:\n\n\n#!/usr/bin/env python\n\n\n\n\n\n\nUNIX, Python 3:\n\n\n#!/usr/bin/env python 3\n\n\n\n\n\n\nAdd:\n\n\n# -*coding: utf-8 -*-\n\n\n# -*coding: latin-1 -*-\n\n\n\n\n\n\n\n\nLaunch a script\n\n\n\n\nIn Windows, Python 2:\n\n\npython <script.py>\n\n\npy <script.py>\n\n\npy -2 <script.py>\n\n\npy -2.7 <script.py>\n\n\n\n\n\n\nIn UNIX, Python 2:\n\n\npython <script.py>\n\n\n\n\n\n\nIn Windows, Python 3:\n\n\npy -3 <script.py>\n\n\npy -3.5 <script.py>\n\n\n\n\n\n\nIn UNIX, Python 3:\n\n\npython3 <script.py>\n\n\n\n\n\n\n\n\nIn UNIX-based OS, with a shebang, once the script is created, we can go in the folder and enter \nchmod +x <script.py>\n to change the properties. Now, we can launch a script with \n./<script.py>\n.\n\n\nLaunch a module\n\n\n\n\nSometimes, launching Python modules cannot be done directly with \npip install <script>\n for example.\n\n\nIn Windows (examples):\n\n\npy -2 -m pip install <script>\n if \npip install <script>\n does not work.\n\n\npy -2 -m pip install flake8\n.\n\n\npy -2 -m pip install pylint\n.    \n\n\n\n\n\n\n\n\nLaunch the shell/bash\n\n\n\n\nThe shell, Python 2:\n\n\npython\n\n\npy -2\n\n\npy -2.7\n\n\n\n\n\n\nThe bash, Python 2:\n\n\npython\n\n\npython2\n\n\n\n\n\n\nThe shell, Python 3:\n\n\npy -3\n\n\npy -3.5\n\n\n\n\n\n\nThe bash, Python 3:\n\n\npython3",
            "title": "Python Preliminaries"
        },
        {
            "location": "/Python_Preliminaries/#2-pip",
            "text": "pypi  PyPY directory of libraries.  Important commands:   pip help  ou  pip --help .  pip install <module> .  pip --version .  pip install --upgrade pip  sudo pip install <module> .  pip uninstall <module> .  pip install --user <module> : circumvent the  sudo  command.",
            "title": "2, pip"
        },
        {
            "location": "/Python_Preliminaries/#3-git",
            "text": "After installing Git, to execute Python module in the Git Bash, (re)set the path in the Git Bash (example):  export PATH=\"$PATH:/c/Python27\" ,   export PATH=\"$PATH:/c/Python27/Scripts\" , \u2026 The Git Bash simulates a UNIX-type environment.",
            "title": "3, Git"
        },
        {
            "location": "/Python_Preliminaries/#4-virtual-environment",
            "text": "virtual, environment, separate, project  When you install a library, it is accessible to all python scripts. Project A and B have access to the library.   It brings out a problem if \u201cProject A depends on version 1.x but, Project B needs 4.x\u201d. This problem is recurrent when working with web frameworks. For example, you can work on a project which requires Django 1.3 while also maintaining a project which requires Django 1.0.  A virtual environment solves this problem by building a sandbox for a project.",
            "title": "4, Virtual Environment"
        },
        {
            "location": "/Python_Preliminaries/#5-launching",
            "text": "Windows vs. UNIX (Linux or Mac OS X).  At the top of scripts   In Windows, Python 2:  python    Windows, Python 3:  python 3    UNIX, Python 2:  #!/usr/bin/env python    UNIX, Python 3:  #!/usr/bin/env python 3    Add:  # -*coding: utf-8 -*-  # -*coding: latin-1 -*-     Launch a script   In Windows, Python 2:  python <script.py>  py <script.py>  py -2 <script.py>  py -2.7 <script.py>    In UNIX, Python 2:  python <script.py>    In Windows, Python 3:  py -3 <script.py>  py -3.5 <script.py>    In UNIX, Python 3:  python3 <script.py>     In UNIX-based OS, with a shebang, once the script is created, we can go in the folder and enter  chmod +x <script.py>  to change the properties. Now, we can launch a script with  ./<script.py> .  Launch a module   Sometimes, launching Python modules cannot be done directly with  pip install <script>  for example.  In Windows (examples):  py -2 -m pip install <script>  if  pip install <script>  does not work.  py -2 -m pip install flake8 .  py -2 -m pip install pylint .         Launch the shell/bash   The shell, Python 2:  python  py -2  py -2.7    The bash, Python 2:  python  python2    The shell, Python 3:  py -3  py -3.5    The bash, Python 3:  python3",
            "title": "5, Launching"
        },
        {
            "location": "/Python_Nice_to_Have/",
            "text": "CONTENT\n\n\n1, mistune Converts Documents\n\n\n2, logging Collects Data\n\n\n3, PIL Manipulates Images\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\n1, \nmistune\n Converts Documents\n\u00b6\n\n\nconvert, conversion, document, file\n\n\nThe \nmistune\n module is a markdown parser that turns markdown file into HTML. Run this script to see the html result in the terminal. For more on converting documents, check Pandoc. Install \nmistune\n with pip.\n\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \nmistune\n\n\n\ntext_block\n \n=\n \n'The `mistune` module converts .md to .html.'\n\n\n\nhtml_block\n \n=\n \nmistune\n.\nmarkdown\n(\ntext_block\n)\n \n# convert to html\n\n\n\nprint\n \nhtml_block\n\n\n\n\n\n\n\nOr run this command  to produce a .html document:\n\n\n1\npython mistune_pgm.py > mistune_html.html\n\n\n\n\n\n\n2, \nlogging\n Collects Data\n\u00b6\n\n\n\n\nLogging is a library recording what users pass in the code.\n\n\nIt creates log files (text documents); it collects data.\n\n\nFirst, it is a good tool for gathering data.\n\n\nSecond, it could also be a good tool for debugging; we can monitor what is inputed in the variables.\n\n\n\n\nWe have a starting script.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\ndef\n \nget_location\n(\nmonster\n,\n \ndoor\n,\n \nplayer\n):\n\n    \n\"\"\"Takes 3 arguments; string type.\n\n\n    Asks to enter 3 inputs.\n\n\n    Uses the 3 inputs in a sentence to print a sentence.\n\n\n    \"\"\"\n\n\n    \nprint\n \n\"The \n%s\n behind the \n%s\n door was slayed by \n%s\n.\"\n \n%\n \n(\nmonster\n,\n \ndoor\n,\n \nplayer\n)\n\n\n\n\nmonsterr\n \n=\n \nraw_input\n(\n\"Enter a monster type: \"\n)\n\n\ndoorr\n \n=\n \nraw_input\n(\n\"Enter a door color: \"\n)\n\n\nplayerr\n \n=\n \nraw_input\n(\n\"Enter the player's name: \"\n)\n\n\n\nget_location\n(\nmonsterr\n,\n \ndoorr\n,\n \nplayerr\n)\n\n\n\n\n\n\n\nWe run the script, the console displays 3 input messages, we input strings (Blob, blue, Al), and the script prints the results.\n\n\n1\nThe\n \nBlob\n \nbehind\n \nthe\n \nblue\n \ndoor\n \nwas\n \nslayed\n \nby\n \nAl\n.\n\n\n\n\n\n\n\nNow, we add the \nlogging\n library.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nimport\n \nlogging\n\n\n\n\nlogging\n.\nbasicConfig\n(\nfilename\n=\n'game.log'\n,\n \nlevel\n=\nlogging\n.\nDEBUG\n)\n \n# invisible to the user\n\n\n\n\ndef\n \nget_location\n(\nmonster\n,\n \ndoor\n,\n \nplayer\n):\n\n    \n\"\"\"\n\n\n    Takes 3 arguments; string type.\n\n\n    Asks to enter 3 inputs.\n\n\n    Uses the 3 inputs in a sentence to print a sentence.\n\n\n    \"\"\"\n\n\n    \nprint\n \n\"The \n%s\n behind the \n%s\n door was slayed by \n%s\n\"\n \n%\n \n(\nmonster\n,\n \ndoor\n,\n \nplayer\n)\n\n\n\n\nmonsterr\n \n=\n \nraw_input\n(\n\"Enter a monster type: \"\n)\n\n\ndoorr\n \n=\n \nraw_input\n(\n\"Enter a door color: \"\n)\n\n\nplayerr\n \n=\n \nraw_input\n(\n\"Enter the player's name: \"\n)\n\n\n\nget_location\n(\nmonsterr\n,\n \ndoorr\n,\n \nplayerr\n)\n\n\n\nlogging\n.\ninfo\n(\n'monsterr: {}; doorr: {}; playerr {}'\n.\nformat\n(\n\n    \nmonsterr\n,\n \ndoorr\n,\n \nplayerr\n))\n \n# invisible to the user\n\n\n\n\n\n\n\nThe user does not see the difference. But anytime someone runs the script, inputs are save to a log file: game.log.txt.\n\n\nWe open the file.\n\n\n1\n2\nINFO:root:monsterr: Blob; doorr: blue; playerr Al\nINFO:root:monsterr: Puik; doorr: red; playerr Felicia\n\n\n\n\n\n\nIn the \nlogging.basicConfig\n function, we select \nlevel=logging.DEBUG\n.\n\n\nThere are 6 log levels (higher to lower): \nCRITICAL\n, \nERROR\n, \nWARNING\n, \nINFO\n, \nDEBUG\n, \nNOTSET\n.\n\n\n\n\nINFO\n, \nDEBUG\n are information about the running of an app.\n\n\nWARNING\n is for keeping track of questionable or exceptional things happening.\n\n\nERROR\n, \nCRITICAL\n are for when things go wrong.\n\n\n\n\n3, \nPIL\n Manipulates Images\n\u00b6\n\n\nThe \nPIL\n package stands for \u2018Python Image library\u2019 or Pillow. Pillow adds image processing capabilities. The library supports many file formats and provides powerful image processing and graphics capabilities. Given these images:\n\n\n\n\n\n\n\n\nballons.jpg\n\n\nribbons.jpg\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nimport\n \nPIL\n\n\n\nballons\n \n=\n \nImage\n.\nopen\n(\n'ballons.jpg'\n)\n\n\nribbons\n \n=\n \nImage\n.\nopen\n(\n'ribbons.jpg'\n)\n\n\n\n# pixels; left, top, right, bottom (clockwise)\n\n\nbox\n \n=\n \n(\n22\n,\n \n324\n,\n \n826\n,\n \n846\n)\n\n\nballons\n.\ncrop\n(\nbox\n)\n.\nshow\n()\n\n\n\nballons\n.\nrotate\n(\n90\n)\n.\nshow\n()\n\n\n\nballons\n.\nrotate\n(\n45\n)\n.\nshow\n()\n \n# won't work\n\n\n\nballons\n.\nrotate\n(\n45\n,\n \nexpand\n \n=\n \nTrue\n)\n.\nshow\n()\n \n# instead\n\n\n\nballons\n.\nrotate\n(\n90\n)\n.\nsave\n(\n'balloon2,jpg'\n)\n \n# to the same directory\n\n\nballons\n.\nrotate\n(\n90\n)\n.\nsave\n(\n'path/balloon2,jpg'\n)\n \n# to another directory",
            "title": "Python Nice to Have"
        },
        {
            "location": "/Python_Nice_to_Have/#2-logging-collects-data",
            "text": "Logging is a library recording what users pass in the code.  It creates log files (text documents); it collects data.  First, it is a good tool for gathering data.  Second, it could also be a good tool for debugging; we can monitor what is inputed in the variables.   We have a starting script.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 def   get_location ( monster ,   door ,   player ): \n     \"\"\"Takes 3 arguments; string type.      Asks to enter 3 inputs.      Uses the 3 inputs in a sentence to print a sentence.      \"\"\" \n\n     print   \"The  %s  behind the  %s  door was slayed by  %s .\"   %   ( monster ,   door ,   player )  monsterr   =   raw_input ( \"Enter a monster type: \" )  doorr   =   raw_input ( \"Enter a door color: \" )  playerr   =   raw_input ( \"Enter the player's name: \" )  get_location ( monsterr ,   doorr ,   playerr )    We run the script, the console displays 3 input messages, we input strings (Blob, blue, Al), and the script prints the results.  1 The   Blob   behind   the   blue   door   was   slayed   by   Al .    Now, we add the  logging  library.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 import   logging  logging . basicConfig ( filename = 'game.log' ,   level = logging . DEBUG )   # invisible to the user  def   get_location ( monster ,   door ,   player ): \n     \"\"\"      Takes 3 arguments; string type.      Asks to enter 3 inputs.      Uses the 3 inputs in a sentence to print a sentence.      \"\"\" \n\n     print   \"The  %s  behind the  %s  door was slayed by  %s \"   %   ( monster ,   door ,   player )  monsterr   =   raw_input ( \"Enter a monster type: \" )  doorr   =   raw_input ( \"Enter a door color: \" )  playerr   =   raw_input ( \"Enter the player's name: \" )  get_location ( monsterr ,   doorr ,   playerr )  logging . info ( 'monsterr: {}; doorr: {}; playerr {}' . format ( \n     monsterr ,   doorr ,   playerr ))   # invisible to the user    The user does not see the difference. But anytime someone runs the script, inputs are save to a log file: game.log.txt.  We open the file.  1\n2 INFO:root:monsterr: Blob; doorr: blue; playerr Al\nINFO:root:monsterr: Puik; doorr: red; playerr Felicia   In the  logging.basicConfig  function, we select  level=logging.DEBUG .  There are 6 log levels (higher to lower):  CRITICAL ,  ERROR ,  WARNING ,  INFO ,  DEBUG ,  NOTSET .   INFO ,  DEBUG  are information about the running of an app.  WARNING  is for keeping track of questionable or exceptional things happening.  ERROR ,  CRITICAL  are for when things go wrong.",
            "title": "2, logging Collects Data"
        },
        {
            "location": "/Python_Nice_to_Have/#3-pil-manipulates-images",
            "text": "The  PIL  package stands for \u2018Python Image library\u2019 or Pillow. Pillow adds image processing capabilities. The library supports many file formats and provides powerful image processing and graphics capabilities. Given these images:     ballons.jpg  ribbons.jpg            1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 import   PIL  ballons   =   Image . open ( 'ballons.jpg' )  ribbons   =   Image . open ( 'ribbons.jpg' )  # pixels; left, top, right, bottom (clockwise)  box   =   ( 22 ,   324 ,   826 ,   846 )  ballons . crop ( box ) . show ()  ballons . rotate ( 90 ) . show ()  ballons . rotate ( 45 ) . show ()   # won't work  ballons . rotate ( 45 ,   expand   =   True ) . show ()   # instead  ballons . rotate ( 90 ) . save ( 'balloon2,jpg' )   # to the same directory  ballons . rotate ( 90 ) . save ( 'path/balloon2,jpg' )   # to another directory",
            "title": "3, PIL Manipulates Images"
        },
        {
            "location": "/Freeze_the_Code/",
            "text": "CONTENT\n\n\n1, Distutils (an Overview)\n\n\n2, cx-Freeze (with Snippets)\n\n\n3, pyInstaller (with Snippets)\n\n\n4, Nuitka (an Overview)\n\n\n5, PyPy (an Overview)\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\n\n\nFreezing a Python file is similar to compiling the file. When running the executable file, the code runs faster than with interpreted code.\n\n\nhttp://docs.python-guide.org/en/latest/shipping/freezing/?highlight=freeze\n\n\n\n\n\n\nIt is done on Windows in the following examples.\n\n\nIt can be executed on all OS: Windows, Linux and Max OS X (using Wine for all UNIX OS).\n\n\n\n\n1, Distutils (an Overview)\n\u00b6\n\n\n\n\nBuilding with distutils works well on all OS.\n\n\nThe package provides support for building and installing additional modules (libraries or packages) into a Python installation.\n\n\nThe new modules may be either 100%-pure Python, written in C, or coded in both Python and C.\n\n\ndistutils\n autogenerates an install script.\n\n\n\n\nDocumentation\n\n\n\n\nhttps://wiki.python.org/moin/Distutils/Tutorial\n\n\nhttps://docs.python.org/2/distutils/\n\n\n\n\n2, cx-Freeze (with Snippets)\n\u00b6\n\n\n\n\ncx_Freeze\n freezes Python scripts into executables.\n\n\nAlike \npy2exe\n for Windows only and \npy2app\n for Mac OS X only.\n\n\nBuilding with \ncx_Freeze\n works best on Windows.\n\n\nSupports Python 2.3 or higher (including Python 3).\n\n\nSimpler than \ndistutils\n.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://cx-freeze.readthedocs.io\n\n\nhttps://anthony-tuininga.github.io/cx_Freeze/\n\n\nInstall \ncx_Freeze\n (works on Pyhon 2 & 3).\n\n\nThe easiest way is with \npip install cx_Freeze\n.\n\n\npip3 install cx_Freeze\n.\n\n\n\n\n\n\n\n\nProcedure with a single script\n\n\nHave the \nhello.py\n ready.\n\n\n1\n2\n3\n4\n5\n6\ndef\n \nmain\n():\n\n\nprint\n(\n\"Hello World\"\n)\n\n\ninput\n(\n\"nPlease press ENTER to continue...\"\n)\n\n\n\nif\n \n__name__\n \n==\n \n\"__main__\"\n:\n\n\nmain\n()\n\n\n\n\n\n\n\n\n\nCreate a \nsetup.py\n.\n\n\nFind out more in the doc.\n\n\n\n\n\n\nSimple setup.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \nsys\n\n\nfrom\n \ncx_Freeze\n \nimport\n \nsetup\n,\n \nExecutable\n\n\n\nsetup\n(\n\n\nname\n \n=\n \n\"Hello\"\n,\n\n\nversion\n \n=\n \n\"0.1\"\n,\n\n\ndescription\n \n=\n \n\"A general utility\"\n,\n\n\nexecutables\n \n=\n \n[\nExecutable\n(\n\"hello.py\"\n,\n \nbase\n \n=\n \nNone\n)]\n\n\n)\n\n\n\n\n\n\n\n\n\nBetter setup.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nimport\n \nsys\n\n\nfrom\n \ncx_Freeze\n \nimport\n \nsetup\n,\n \nExecutable\n\n\n\nincludefiles\n \n=\n \n[]\n \n# include any files here that you wish\n\n\nexcludes\n \n=\n \n[]\n\n\npackages\n \n=\n \n[]\n\n\n\nexe\n \n=\n \nExecutable\n(\n\n\n# what to build\n\n\nscript\n \n=\n \n\"hello.py\"\n,\n \n# the name of the main python script goes here \n\n\ninitScript\n \n=\n \nNone\n,\n\n\nbase\n \n=\n \nNone\n,\n \n# if creating a GUI instead of a console app, type \"Win32GUI\"\n\n\ntargetName\n \n=\n \n\"hello.exe\"\n,\n \n# the name of the executable file\n\n\nicon\n \n=\n \nNone\n \n# if you want to use an icon file, specify the file name here\n\n\n)\n\n\n\nsetup\n(\n\n\n# the actual setup & the definition of other misc. info\n\n\nname\n \n=\n \n\"Hello\"\n,\n \n# the program name\n\n\nversion\n \n=\n \n\"0.1\"\n,\n\n\ndescription\n \n=\n \n\"A general utility\"\n,\n\n\nauthor\n \n=\n \n\"Your name\"\n,\n\n\nauthor_email\n \n=\n \n\"your@email.com\"\n,\n\n\noptions\n \n=\n \n{\n\"build_exe\"\n:\n \n{\n\"excludes\"\n:\nexcludes\n,\n\"packages\"\n:\npackages\n,\n \n\"include_files\"\n:\nincludefiles\n}},\n\n\nexecutables\n \n=\n \n[\nexe\n]\n\n\n)\n\n\n\n\n\n\n\n\n\nPlace the files in C:\\PythonXX\\, where pip and Python are installed.\n\n\nMake sure the path is in the environment variables or exported (we assume this is understood and done).\n\n\nOpen the shell (cmd), go to the C:\\PythonXX directory.\n\n\nBuild the executable by calling the \nsetup.py\n script with the Python version of our choice.\n\n\n\n\n1\npython\n \nsetup\n.\npy\n \nbuild\n\n\n\n\n\n\n\n\n\nThe created files are located in C:\\PythonXX\\build\u2026\n\n\nGo in the subfolder, find the .exe file and launch it.\n\n\nOn Linux and Mac OS X, the .exe file must to be run with Wine (executing Windows apps)\n\n\nBuild an installer for Windows containing all the files.\n\n\n\n\n1\npython\n \nsetup\n.\npy\n \nbdist_msi\n\n\n\n\n\n\n\n\n\nThe installer is located in C:\\PythonXX\\dist\\\n\n\nIt can be distributed and installed/repaired/removed as a Windows program.\n\n\nThe installation creates what the build command does in a directory of our choice.\n\n\nBuild an installer on Mac OS X.\n\n\n\n\n1\npython\n \nsetup\n.\npy\n \nbdist_dmg\n\n\n\n\n\n\n\n\n\n\n\nProcedure with a set of scripts (with folders)\n\n\n\n\n\n\nThe project might look like this.\n\n\n\n\n\n\n1\n2\n3\n\u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map\n\n\n\n\n\n\n\n\nUnder the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.\n\n\nThe setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\\n\n\nCreate a \nsetup.py\n.\n\n\nFind out more in the doc.\n\n\n\n\n\n\nSimple setup (or a more elaborate setup).\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \nsys\n\n\nfrom\n \ncx_Freeze\n \nimport\n \nsetup\n,\n \nExecutable\n\n\n\nsetup\n(\n\n\nname\n \n=\n \n\"Any Names\"\n,\n\n\nversion\n \n=\n \n\"0.1\"\n,\n\n\ndescription\n \n=\n \n\"Any Description\"\n,\n\n\nexecutables\n \n=\n \n[\nExecutable\n(\n\"bin/FileName.py\"\n,\n \nbase\n \n=\n \nNone\n)]\n\n\n)\n\n\n\n\n\n\n\n\n\nBuild the executable by calling the setup.py script with the Python version of choice.\n\n\n\n\nPros & Cons\n\n\n\n\nIt can handle a set of files (such as with the last example).\n\n\nLinux and Mac OS X can read the executable (using Wine).\n\n\nEasy to deploy (download, open, execute).\n\n\nIt does not generate a single file, except with the \nbdist_\n commands. However, a distribution requires additional steps to deploy.\n\n\n\n\n3, pyInstaller (with Snippets)\n\u00b6\n\n\n\n\npyinstaller\n is a simpler alternative to cx-Freeze.\n\n\nLibraries like \nPyQt\n, \nDjango\n or \nmatplotlib\n are fully supported, without having to handle plugins or external data files manually.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://www.pyinstaller.org/\n\n\nhttps://github.com/pyinstaller/pyinstaller\n\n\nInstall pyinstaller (works on Pyhon 2 & 3).\n\n\nThe easiest way is with \npip install pyinstaller\n.\n\n\npip3 install pyinstaller\n.\n\n\n\n\n\n\n\n\nProcedure with a single script\n\n\n\n\nHave the \nhello.py\n ready.\n\n\n\n\n1\n2\n3\n4\n5\n6\ndef\n \nmain\n():\n\n\nprint\n(\n\"Hello World\"\n)\n\n\ninput\n(\n\"nPlease press ENTER to continue...\"\n)\n\n\n\nif\n \n__name__\n \n==\n \n\"__main__\"\n:\n\n\nmain\n()\n\n\n\n\n\n\n\n\n\nPlace the files in C:\\PythonXX\\, where pip and Python are installed.\n\n\nMake sure the path is in the environment variables or exported (we assume this is understood and done).\n\n\nOpen the shell (cmd), go to the C:\\PythonXX directory.\n\n\nBuild the executable.\n\n\n\n\n1\npyinstaller\n \nhello\n.\npy\n\n\n\n\n\n\n\nOr\n\n\n1\npyinstaller\n \n-\nD\n \nhello\n.\npy\n\n\n\n\n\n\n\n\n\nThe created files are located in C:\\PythonXX\\dist\u2026\n\n\nGo in the subfolder, find the .exe file and launch it.\n\n\nThe default option is \n-D\n (above) is facultative.\n\n\nBuild the single executable file with the bundle option \n-F\n (below).\n\n\n\n\n1\npyinstaller\n \n-\nF\n \nhello\n.\npy\n\n\n\n\n\n\n\n\n\n\n\nThe created file is located in C:\\PythonXX\\dist\u2026\n\n\n\n\n\n\nFind the single .exe file and launch it.\n\n\n\n\n\n\nBuild with an icon (.ico file)\n\n\n\n\nThe .ico and .py files are located in the same folder, otherwise we have to specify the path with filename.ico.\n\n\n\n\n1\npyinstaller\n \n-\nF\n \n-\ni\n \n\"favicon.ico\"\n \nhello\n.\npy\n\n\n\n\n\n\n\n\n\n\n\nProcedure with a set of scripts (with folders)\n\n\n\n\n\n\nThe project might look like this.\n\n\n\n\n\n\n1\n2\n3\n\u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map\n\n\n\n\n\n\n\n\n\n\nUnder the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.\n\n\n\n\n\n\nThe setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\\n\n\n\n\n\n\nBuild the single executable file.\n\n\n\n\n\n\n1\npyinstaller\n \n-\nF\n \n-\ni\n \n\"favicon.ico\"\n \nbin\n/\nhello\n.\npy\n\n\n\n\n\n\n\nPros & Cons\n\n\n\n\nIt can handle a set of files (such as with the last example).\n\n\nLinux and Mac OS X can read the executable (using Wine).\n\n\nEasy to deploy (download, open, execute). Easier than with cx-Freeze, but without the flexibility a \nsetup.py\n file can allow.\n\n\nHowever, it can generate a single file: dowload, then launch in a single click.\n\n\n\n\n4, Nuitka (an Overview)\n\u00b6\n\n\n\n\nPython compiler compatible with CPython.\n\n\nWorks on all OS.\n\n\nCompiled files are faster.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://nuitka.net/pages/overview.html.\n\n\nCheck out the requirements.\n\n\nNeed for a C++ compiler.\n\n\n\n\n\n\n\n\n5, PyPy (an Overview)\n\u00b6\n\n\n\n\nAlternative to CPython: RPython (restricted Python).\n\n\nWorks on all OS, best on Linux.\n\n\nCompiled files are faster.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://pypy.org/index.html",
            "title": "Freeze the Code"
        },
        {
            "location": "/Freeze_the_Code/#2-cx-freeze-with-snippets",
            "text": "cx_Freeze  freezes Python scripts into executables.  Alike  py2exe  for Windows only and  py2app  for Mac OS X only.  Building with  cx_Freeze  works best on Windows.  Supports Python 2.3 or higher (including Python 3).  Simpler than  distutils .   Documentation   http://cx-freeze.readthedocs.io  https://anthony-tuininga.github.io/cx_Freeze/  Install  cx_Freeze  (works on Pyhon 2 & 3).  The easiest way is with  pip install cx_Freeze .  pip3 install cx_Freeze .     Procedure with a single script  Have the  hello.py  ready.  1\n2\n3\n4\n5\n6 def   main ():  print ( \"Hello World\" )  input ( \"nPlease press ENTER to continue...\" )  if   __name__   ==   \"__main__\" :  main ()     Create a  setup.py .  Find out more in the doc.    Simple setup.   1\n2\n3\n4\n5\n6\n7\n8\n9 import   sys  from   cx_Freeze   import   setup ,   Executable  setup (  name   =   \"Hello\" ,  version   =   \"0.1\" ,  description   =   \"A general utility\" ,  executables   =   [ Executable ( \"hello.py\" ,   base   =   None )]  )     Better setup.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 import   sys  from   cx_Freeze   import   setup ,   Executable  includefiles   =   []   # include any files here that you wish  excludes   =   []  packages   =   []  exe   =   Executable (  # what to build  script   =   \"hello.py\" ,   # the name of the main python script goes here   initScript   =   None ,  base   =   None ,   # if creating a GUI instead of a console app, type \"Win32GUI\"  targetName   =   \"hello.exe\" ,   # the name of the executable file  icon   =   None   # if you want to use an icon file, specify the file name here  )  setup (  # the actual setup & the definition of other misc. info  name   =   \"Hello\" ,   # the program name  version   =   \"0.1\" ,  description   =   \"A general utility\" ,  author   =   \"Your name\" ,  author_email   =   \"your@email.com\" ,  options   =   { \"build_exe\" :   { \"excludes\" : excludes , \"packages\" : packages ,   \"include_files\" : includefiles }},  executables   =   [ exe ]  )     Place the files in C:\\PythonXX\\, where pip and Python are installed.  Make sure the path is in the environment variables or exported (we assume this is understood and done).  Open the shell (cmd), go to the C:\\PythonXX directory.  Build the executable by calling the  setup.py  script with the Python version of our choice.   1 python   setup . py   build     The created files are located in C:\\PythonXX\\build\u2026  Go in the subfolder, find the .exe file and launch it.  On Linux and Mac OS X, the .exe file must to be run with Wine (executing Windows apps)  Build an installer for Windows containing all the files.   1 python   setup . py   bdist_msi     The installer is located in C:\\PythonXX\\dist\\  It can be distributed and installed/repaired/removed as a Windows program.  The installation creates what the build command does in a directory of our choice.  Build an installer on Mac OS X.   1 python   setup . py   bdist_dmg      Procedure with a set of scripts (with folders)    The project might look like this.    1\n2\n3 \u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map    Under the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.  The setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\  Create a  setup.py .  Find out more in the doc.    Simple setup (or a more elaborate setup).   1\n2\n3\n4\n5\n6\n7\n8\n9 import   sys  from   cx_Freeze   import   setup ,   Executable  setup (  name   =   \"Any Names\" ,  version   =   \"0.1\" ,  description   =   \"Any Description\" ,  executables   =   [ Executable ( \"bin/FileName.py\" ,   base   =   None )]  )     Build the executable by calling the setup.py script with the Python version of choice.   Pros & Cons   It can handle a set of files (such as with the last example).  Linux and Mac OS X can read the executable (using Wine).  Easy to deploy (download, open, execute).  It does not generate a single file, except with the  bdist_  commands. However, a distribution requires additional steps to deploy.",
            "title": "2, cx-Freeze (with Snippets)"
        },
        {
            "location": "/Freeze_the_Code/#3-pyinstaller-with-snippets",
            "text": "pyinstaller  is a simpler alternative to cx-Freeze.  Libraries like  PyQt ,  Django  or  matplotlib  are fully supported, without having to handle plugins or external data files manually.   Documentation   http://www.pyinstaller.org/  https://github.com/pyinstaller/pyinstaller  Install pyinstaller (works on Pyhon 2 & 3).  The easiest way is with  pip install pyinstaller .  pip3 install pyinstaller .     Procedure with a single script   Have the  hello.py  ready.   1\n2\n3\n4\n5\n6 def   main ():  print ( \"Hello World\" )  input ( \"nPlease press ENTER to continue...\" )  if   __name__   ==   \"__main__\" :  main ()     Place the files in C:\\PythonXX\\, where pip and Python are installed.  Make sure the path is in the environment variables or exported (we assume this is understood and done).  Open the shell (cmd), go to the C:\\PythonXX directory.  Build the executable.   1 pyinstaller   hello . py    Or  1 pyinstaller   - D   hello . py     The created files are located in C:\\PythonXX\\dist\u2026  Go in the subfolder, find the .exe file and launch it.  The default option is  -D  (above) is facultative.  Build the single executable file with the bundle option  -F  (below).   1 pyinstaller   - F   hello . py      The created file is located in C:\\PythonXX\\dist\u2026    Find the single .exe file and launch it.    Build with an icon (.ico file)   The .ico and .py files are located in the same folder, otherwise we have to specify the path with filename.ico.   1 pyinstaller   - F   - i   \"favicon.ico\"   hello . py      Procedure with a set of scripts (with folders)    The project might look like this.    1\n2\n3 \u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map     Under the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.    The setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\    Build the single executable file.    1 pyinstaller   - F   - i   \"favicon.ico\"   bin / hello . py    Pros & Cons   It can handle a set of files (such as with the last example).  Linux and Mac OS X can read the executable (using Wine).  Easy to deploy (download, open, execute). Easier than with cx-Freeze, but without the flexibility a  setup.py  file can allow.  However, it can generate a single file: dowload, then launch in a single click.",
            "title": "3, pyInstaller (with Snippets)"
        },
        {
            "location": "/Freeze_the_Code/#4-nuitka-an-overview",
            "text": "Python compiler compatible with CPython.  Works on all OS.  Compiled files are faster.   Documentation   http://nuitka.net/pages/overview.html.  Check out the requirements.  Need for a C++ compiler.",
            "title": "4, Nuitka (an Overview)"
        },
        {
            "location": "/Freeze_the_Code/#5-pypy-an-overview",
            "text": "Alternative to CPython: RPython (restricted Python).  Works on all OS, best on Linux.  Compiled files are faster.   Documentation   http://pypy.org/index.html",
            "title": "5, PyPy (an Overview)"
        },
        {
            "location": "/Decorators/",
            "text": "CONTENT\n\n\nThe Goal of Decorators\n\n\nFirst Thing First\n\n\nInvoking a Decorator\n\n\nUsing Decorators\n\n\nCases\n\n\nMore Cases and Examples\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and code snippets. Python 3. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\nThe Goal of Decorators\n\u00b6\n\n\nDecorators vs the Decorator Pattern\n\n\nPython decorators are best equated to macros.\n\n\nDefinition\n\n\n\n\nThey modify functions, and in the case of class decorators, entire classes. They provide a simpler alternative to metaclasses.\n\n\nA decorator itself is a callable that returns a callable.\n\n\nA decorator is a function that takes a function object as its argument, and returns a function object, and in the process, makes necessary modifications to the input function, possibly enhancing it.\n\n\nUseful for:\n\n\nbookkeeping,\n\n\nrepeating insularity functionalities,\n\n\nadding functionality of the function,\n\n\nmodifying the behavior of the function;\n\n\nin Django, Flask or other web frameworks.\n\n\n\n\n\n\n\n\nFirst Thing First\n\u00b6\n\n\nFirst dive\n\n\nDecorators are easy to add or remove. They are nested functions; inserted in another function.\n\n\nBelow, \ninner()\n can live inside \nouter()\n. When you call \nouter()\n, you can also call \ninner()\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nfrom\n \nfunctools\n \nimport\n \nwraps\n\n\n\ndef\n \nouter\n():\n\n    \nnumber\n \n=\n \n5\n\n\n    \ndef\n \ninner\n():\n\n        \nprint\n(\nnumber\n)\n\n\n    \ninner\n()\n\n\n\nouter\n()\n \n# print 5\n\n\ninner\n()\n \n# cannot be called\n\n\n\n\n\n\n\nFunctions are first-class objects that can be passed around:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ndef\n \napply\n(\nfunc\n,\n \nx\n,\n \ny\n):\n\n    \nreturn\n \nfunc\n(\nx\n,\n \ny\n)\n\n\n\ndef\n \nadd\n(\nx\n,\n \ny\n):\n\n    \nreturn\n \nx\n \n+\n \ny\n\n\n\ndef\n \nsub\n(\nx\n,\n \ny\n):\n\n    \nreturn\n \nx\n \n-\n \ny\n\n\n\nprint\n(\napply\n(\nadd\n,\n \n5\n,\n5\n))\n \n# call apply(), that calls add()\n\n\nprint\n(\napply\n(\nsub\n,\n \n2\n,\n8\n))\n \n# call apply(), that calls sub()\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n10\n-6\n\n\n\n\n\n\n\u2018Predefine scope\u2019: define the environment for the function. \ninner()\n has only access to \nouter()\n and \nnumber = 5\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ndef\n \nclose\n():\n\n    \nx\n \n=\n \n5\n\n\n    \ndef\n \ninner\n():\n\n        \nprint\n(\nx\n)\n\n\n    \nreturn\n \ninner\n\n\n\nclosure\n \n=\n \nclose\n()\n \n# change the function name\n\n\nclosure\n()\n \n# call the 'new' function\n\n\n\n\n\n\n\nOutput:\n\n\n1\n5\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ndef\n \nadd_to_five\n(\nnum\n):\n\n\n    \ndef\n \ninner\n():\n\n        \nprint\n(\nnum\n \n+\n \n5\n)\n\n\n    \nreturn\n \ninner\n\n\n\nfifteen\n \n=\n \nadd_to_five\n(\n10\n)\n\n\nfifteen\n()\n\n\n\n\n\n\n\nOutput: \n\n\n1\n15\n\n\n\n\n\nTake two !\n\n\nA decorator is a function that accept function as an argument and returns a function.\n\n\nf()\n is an object, and it\u2019s not different from classes (\nMyClass\n) or variables (\na\n).\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n>>>\n \na\n \n=\n \n10\n\n\n>>>\n \ndef\n \nf\n():\n\n\n...\n     \npass\n\n\n...\n\n\n>>>\n \nclass\n \nMyClass\n():\n\n\n...\n     \npass\n\n\n...\n\n\n>>>\n \nprint\n \ndir\n()\n\n\n[\n'MyClass'\n,\n \n'__builtins__'\n,\n \n'__doc__'\n,\n \n'__name__'\n,\n \n'__package__'\n,\n \n'a'\n,\n \n'f'\n]\n\n\n\n\n\n\n\nAssign a function to a variable:\n\n\n1\n2\n3\n4\n5\ndef\n \nfunc\n():\n\n   \nprint\n \n\"func()\"\n\n\n\nfuncObj\n \n=\n \nfunc\n\n\nfuncObj\n()\n \n# inheritance from func()\n\n\n\n\n\n\n\nFunctions can be passed around in the same way other types of object such as strings, integers, lists, etc. \n\n\nA function can accept a function as an argument and return a new function object:\n\n\n1\n2\n3\n4\ndef\n \nmyFunction\n(\nin_function\n):\n\n   \ndef\n \nout_function\n():\n\n      \npass\n\n   \nreturn\n \nout_function\n\n\n\n\n\n\n\nThe \nmyFunction\n is indeed a decorator because, by definition, a decorator is a function that takes a function object as its argument, and returns a function object (!!!).\n\n\nElaborate:\n\n\n1\n2\n3\n4\n5\n6\ndef\n \nmyFunction\n(\nin_function\n):\n\n   \ndef\n \nout_function\n():\n\n      \nprint\n \n\"Entry: \"\n,\n \nin_function\n.\n__name__\n\n      \nin_function\n()\n\n      \nprint\n \n\"Exit: \"\n,\n \nin_function\n.\n__name__\n\n   \nreturn\n \nout_function\n\n\n\n\n\n\n\nInvoking a Decorator\n\u00b6\n\n\nPut a simple_function into the decorator (\nmyFunction\n) as an argument, and get a \nenhanced_function\n as a return value from the decorator.\n\n\n1\n2\n3\n4\ndef\n \nsimple_function\n():\n\n   \npass\n\n\n\nenhanced_function\n \n=\n \nmyFunction\n(\nsimple_function\n)\n\n\n\n\n\n\n\nApply the decorator syntax to the code above:\n\n\n1\n2\n3\n@myFunction\n\n\ndef\n \nsimple_function\n():\n\n   \npass\n\n\n\n\n\n\n\n@myFunction\n is a decorator line or an annotation line. The \n@\n indicates the application of the decorator. A decorator is the function itself which takes a function, and returns a new function: \nmyFunction\n.\n\n\nWhen the compiler passes over this code, \nsimple_function()\n is compiled. The resulting function object is passed to the \nmyFunction\n code. It produces a function-like object that is substituted for the original \nsimple_function()\n.\n\n\nThe static method:\n\n\n1\n2\n3\n4\n5\n6\n7\n>>>\n \nclass\n \nA\n:\n\n\n...\n    \ndef\n \ns\n(\nx\n):\n\n\n...\n       \nprint\n(\nx\n)\n\n\n...\n    \ns\n \n=\n \nstaticmethod\n(\ns\n)\n\n\n...\n \n\n>>>\n \nA\n.\ns\n(\n10\n)\n\n\n10\n\n\n\n\n\n\n\nThe equivalent code using a decorator looks like this:\n\n\n1\n2\n3\n4\n5\n6\n7\n>>>\n \nclass\n \nA\n:\n\n\n...\n    \n@staticmethod\n\n\n...\n    \ndef\n \ns\n(\nx\n):\n\n\n...\n       \nprint\n(\nx\n)\n\n\n...\n\n\n>>>\n \nA\n.\ns\n(\n10\n)\n\n\n10\n\n\n\n\n\n\n\nFor example, suppose you\u2019d like to do something at the entry and exit points of a function (perform some kind of security, tracing, locking, etc.):\n\n\n1\n2\n3\n4\n5\n6\n7\n@entryExit\n\n\ndef\n \nfunc1\n():\n\n    \nprint\n \n\"inside func1()\"\n\n\n\n@entryExit\n\n\ndef\n \nfunc2\n():\n\n    \nprint\n \n\"inside func2()\"\n\n\n\n\n\n\n\nAnother example:\n\n\n1\n2\n3\n4\n5\n6\n>>>\n \ndef\n \nwrapper\n(\nf\n):\n\n\n...\n    \nreturn\n \nf\n\n\n...\n\n\n>>>\n \ndef\n \nfoo\n():\n\n\n...\n    \npass\n\n\n...\n\n\n\n\n\n\n\nThen, the wrapper can be used for rebinding \nfoo()\n like this:\n\n\n1\n>>>\n \nfoo\n \n=\n \nwrapper\n(\nfoo\n)\n\n\n\n\n\n\n\nSo, it\u2019s a decorator:\n\n\n1\n2\n3\n>>>\n \n@wrapper\n\n\n...\n \ndef\n \nfoo\n():\n\n\n...\n    \npass\n\n\n\n\n\n\n\nWith a decorator defined as below:\n\n\n1\n2\n3\ndef\n \ndecorator\n(\nf\n):\n\n   \n#process function\n\n   \nreturn\n \nf\n\n\n\n\n\n\n\nMaps the following:\n\n\n1\n2\n3\n4\n5\n@decorator\n\n\ndef\n \nf\n(\narg\n):\n\n   \nreturn\n \narg\n*\narg\n\n\n\nf\n(\n123\n)\n  \n# output 15129\n\n\n\n\n\n\n\nInto:\n\n\n1\n2\n3\ndef\n \nf\n(\narg\n):\n\n   \nprint\n \narg\n*\narg\n\n\nf\n \n=\n \ndecorator\n(\nf\n)\n\n\n\n\n\n\n\nDecoration maps the following line:\n\n\n1\nf\n(\n123\n)\n\n\n\n\n\n\n\nInto:\n\n\n1\ndecorator\n(\nf\n)(\n123\n)\n\n\n\n\n\n\n\nA function decorator is applied to a function definition by placing it on the line before that function definition begins:\n\n\n1\n2\n3\n@myDecorator\n\n\ndef\n \naFunction\n():\n\n    \nprint\n \n\"inside aFunction\"\n\n\n\n\n\n\n\nThe compiler passes over the code. The \naFunction()\n is compiled. The resulting function object is passed to the \nmyDecorator\n code. It produces a function-like object that is then substituted for the original \naFunction()\n.\n\n\nUsing Decorators\n\u00b6\n\n\nWhat should the decorator do? Anything!\n\n\nDecorators allow you to modify code in functions or classes.\n\n\nThe only constraint upon the object returned by the decorator is that it can be used as a function. Any classes we use as decorators must implement \n__call__\n.\n\n\nExpect the original function code to be used at some point:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nclass\n \nmyDecorator\n(\nobject\n):\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nf\n):\n\n        \nprint\n \n\"inside myDecorator.__init__()\"\n\n        \nf\n()\n \n# Prove that function definition has completed\n\n\n    \ndef\n \n__call__\n(\nself\n):\n\n        \nprint\n \n\"inside myDecorator.__call__()\"\n\n\n\n@myDecorator\n\n\ndef\n \naFunction\n():\n\n    \nprint\n \n\"inside aFunction()\"\n\n\n\nprint\n \n\"Finished decorating aFunction()\"\n\n\n\naFunction\n()\n\n\n\n\n\n\n\nRun this code:\n\n\n1\n2\n3\n4\ninside\n \nmyDecorator\n.\n__init__\n()\n\n\ninside\n \naFunction\n()\n\n\nFinished\n \ndecorating\n \naFunction\n()\n\n\ninside\n \nmyDecorator\n.\n__call__\n()\n\n\n\n\n\n\n\nThe constructor for \nmyDecorator\n is executed at the point of decoration of the function.\n\n\nCall \nf()\n inside \n__init__()\n. The creation of \nf()\n is complete before the decorator is called.\n\n\nThe decorator constructor receives the function object being decorated. \n\n\nCapture the function object in the constructor and later use it in the \n__call__()\n method.\n\n\nWhen \naFunction()\n is called after it has been decorated, the \nmyDecorator.__call__()\n method is called instead of the original code. The act of decoration replaces the original function object.\n\n\nBefore decorators were added:\n\n\n1\n2\n3\ndef\n \nfoo\n():\n\n    \npass\n\n\nfoo\n \n=\n \nstaticmethod\n(\nfoo\n)\n\n\n\n\n\n\n\nWith the addition of the \n@\n decoration operator:\n\n\n1\n2\n3\n@staticmethod\n\n\ndef\n \nfoo\n():\n\n    \npass\n\n\n\n\n\n\n\nThis syntax brings the idea of \u201capplying code to other code\u201d (i.e.: macros).\n\n\nSlightly More Useful\n\n\nUse the code in the decorated functions:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nclass\n \nentryExit\n(\nobject\n):\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nf\n):\n\n        \nself\n.\nf\n \n=\n \nf\n\n\n    \ndef\n \n__call__\n(\nself\n):\n\n        \nprint\n \n\"Entering\"\n,\n \nself\n.\nf\n.\n__name__\n\n        \nself\n.\nf\n()\n\n        \nprint\n \n\"Exited\"\n,\n \nself\n.\nf\n.\n__name__\n\n\n\n@entryExit\n\n\ndef\n \nfunc1\n():\n\n    \nprint\n \n\"inside func1()\"\n\n\n\n@entryExit\n\n\ndef\n \nfunc2\n():\n\n    \nprint\n \n\"inside func2()\"\n\n\n\nfunc1\n()\n\n\nfunc2\n()\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\n5\n6\nEntering func1\ninside func1()\nExited func1\nEntering func2\ninside func2()\nExited func2\n\n\n\n\n\n\nThe decorated functions now have the \u2018Entering\u2019 and \u2018Exited\u2019 trace statements around the call.\n\n\nThe constructor stores the argument, which is the function object. In the call, use the \n__name__\n attribute of the function to display that function\u2019s name. \n\n\nThen call the function itself.\n\n\nUsing functions as decorators\n\n\nReplace the original function with an object of a class that has a \n__call__()\n method. But a function object is also callable. From the previous example, use a function instead of a class:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\ndef\n \nentryExit\n(\nf\n):\n\n    \ndef\n \nnew_f\n():\n\n        \nprint\n \n\"Entering\"\n,\n \nf\n.\n__name__\n\n        \nf\n()\n\n        \nprint\n \n\"Exited\"\n,\n \nf\n.\n__name__\n\n    \nreturn\n \nnew_f\n\n\n\n@entryExit\n\n\ndef\n \nfunc1\n():\n\n    \nprint\n \n\"inside func1()\"\n\n\n\n@entryExit\n\n\ndef\n \nfunc2\n():\n\n    \nprint\n \n\"inside func2()\"\n\n\n\nfunc1\n()\n\n\nfunc2\n()\n\n\nprint\n \nfunc1\n.\n__name__\n\n\n\n\n\n\n\nnew_f()\n is defined within the body of \nentryExit()\n. It is created and returned when \nentryExit()\n is called.  \n\n\nnew_f()\n is a closure; it captures the actual value of \nf\n.\n\n\nOnce \nnew_f()\n has been defined, it is returned from \nentryExit()\n. The decorator mechanism can assign the result as the decorated function.\n\n\nThe output of \nprint func1.__name__\n is \nnew_f\n, because the \nnew_f\n function has been substituted for the original function during decoration. If this is a problem, change the name of the decorator function before you return it:\n\n\n1\n2\n3\n4\n5\n6\n7\ndef\n \nentryExit\n(\nf\n):\n\n    \ndef\n \nnew_f\n():\n\n        \nprint\n \n\"Entering\"\n,\n \nf\n.\n__name__\n\n        \nf\n()\n\n        \nprint\n \n\"Exited\"\n,\n \nf\n.\n__name__\n\n    \nnew_f\n.\n__name__\n \n=\n \nf\n.\n__name__\n\n    \nreturn\n \nnew_f\n\n\n\n\n\n\n\nCases\n\u00b6\n\n\n1 - Adding \n$\n to the return value from \nprice()\n function\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ndef\n \ndollar\n(\nfn\n):\n\n    \ndef\n \nnew\n(\n*\nargs\n):\n\n        \nreturn\n \n'$'\n \n+\n \nstr\n(\nfn\n(\n*\nargs\n))\n\n    \nreturn\n \nnew\n\n\n\n@dollar\n\n\ndef\n \nprice\n(\namount\n,\n \ntax_rate\n):\n\n    \nreturn\n \namount\n \n+\n \namount\n*\ntax_rate\n\n\n\nprint\n \nprice\n(\n100\n,\n0.1\n)\n\n\n\n\n\n\n\nOutput:\n\n\n1\n$110\n\n\n\n\n\n\nThe dollar decorator function takes the \nprice()\n function, and returns enhanced the output from the original \nprice()\n after modifying the inner working. Note that the decorator enables us to do it without making any changes on the \nprice()\n function itself.\n\n\nA decorator works as a wrapper, modifying the behavior of the code before and after a target function execution, without the need to modify the function itself, enhancing the original functionality.\n\n\nWith the pound or euro as well:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ndef\n \npound\n(\nfn\n):\n\n    \ndef\n \nnew\n(\n*\nargs\n):\n\n        \nreturn\n \n(\nu\n\"\n\\u00A3\n\"\n)\n.\nencode\n(\n'utf-8'\n)\n \n+\n \nstr\n(\nfn\n(\n*\nargs\n))\n\n        \nreturn\n \n'$'\n \n+\n \nstr\n(\nfn\n(\n*\nargs\n))\n\n    \nreturn\n \nnew\n\n\n\n@pound\n\n\ndef\n \nprice\n(\namount\n,\n \ntax_rate\n):\n\n    \nreturn\n \namount\n \n+\n \namount\n*\ntax_rate\n\n\n\nprint\n \nprice\n(\n100\n,\n0.1\n)\n\n\n\n\n\n\n\n2 - How many times a function called?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\ndef\n \ncount\n(\nf\n):\n\n    \ndef\n \ninner\n(\n*\nargs\n,\n \n**\nkargs\n):\n\n        \ninner\n.\ncounter\n \n+=\n \n1\n\n        \nreturn\n \nf\n(\n*\nargs\n,\n \n**\nkargs\n)\n\n    \ninner\n.\ncounter\n \n=\n \n0\n\n    \nreturn\n \ninner\n\n\n\n@count\n\n\ndef\n \nmy_fnc\n():\n\n    \npass\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \nmy_fnc\n()\n\n    \nmy_fnc\n()\n\n    \nmy_fnc\n()\n\n\n    \nprint\n \n'my_fnc.counter='\n,\nmy_fnc\n.\ncounter\n\n\n\n\n\n\n\nOutput:\n\n\n1\nmy_fnc.counter= 3\n\n\n\n\n\n\n3 - Timer\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nimport\n \ntime\n\n\ndef\n \ntimer\n(\nf\n):\n\n    \ndef\n \ninner\n(\n*\nargs\n,\n \n**\nkargs\n):\n\n        \nt\n \n=\n \ntime\n.\ntime\n()\n\n        \nret\n \n=\n \nf\n(\n*\nargs\n,\n \n**\nkargs\n)\n\n        \nprint\n \n'timer = \n%s\n'\n \n%\n(\ntime\n.\ntime\n()\n-\nt\n)\n \n        \nreturn\n \nret\n\n    \nreturn\n \ninner\n\n\n\n@timer\n\n\ndef\n \nmy_fnc\n():\n\n    \npass\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \nmy_fnc\n()\n\n\n\n\n\n\n\nOutput:\n\n\n1\ntimer = 5.96046447754e-06\n\n\n\n\n\n\nMore Cases and Examples\n\u00b6\n\n\nlearnpython.org (tutorial, snippets)\n\n\nCollected examples\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ndef\n \nlogme\n(\nfunc\n):\n\n    \nimport\n \nlogging\n\n    \nlogging\n.\nbasicConfig\n(\nlevel\n \n=\n \nlogging\n.\nDEBUG\n)\n\n\n    \ndef\n \ninner\n():\n\n        \nlogging\n.\ndebug\n(\n\"Called {}\"\n.\nformat\n(\nfunc\n.\n__name__\n))\n\n\n        \nreturn\n \nfunc\n()\n\n\n    \nreturn\n \ninner\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ndef\n \nlogme\n(\nfunc\n):\n\n    \nimport\n \nlogging\n\n    \nlogging\n.\nbasicConfig\n(\nlevel\n \n=\n \nlogging\n.\nDEBUG\n)\n\n\n    \ndef\n \ninner\n(\n*\nargs\n,\n \n**\nkwargs\n):\n \n# * for tuple, ** for dict.\n\n        \nlogging\n.\ndebug\n(\n\"Called {} with args {} and kwargs {}\"\n.\nformat\n(\n\n            \nfunc\n.\n__name__\n,\n \nargs\n,\n \nkwargs\n))\n \n# to print the tuple and dict.\n\n\n        \nreturn\n \nfunc\n(\n*\nargs\n,\n \n**\nkwargs\n)\n \n# to use the tuple and dict.\n\n\n    \nreturn\n \ninner\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\ndef\n \nlogme\n(\nfunc\n):\n\n    \nimport\n \nlogging\n\n    \nlogging\n.\nbasicConfig\n(\nlevel\n \n=\n \nlogging\n.\nDEBUG\n)\n\n\n    \ndef\n \ninner\n(\n*\nargs\n,\n \n**\nkwargs\n):\n \n# * for tuple, ** for dict.\n\n        \nlogging\n.\ndebug\n(\n\"Called {} with args {} and kwargs {}\"\n.\nformat\n(\n\n            \nfunc\n.\n__name__\n,\n \nargs\n,\n \nkwargs\n))\n \n# to print the tuple and dict.\n\n\n        \nreturn\n \nfunc\n(\n*\nargs\n,\n \n**\nkwargs\n)\n \n# to use the tuple and dict.\n\n\n    \ninner\n.\n__doc__\n \n=\n \nfunc\n.\n__doc__\n\n    \ninner\n.\n__name__\n \n=\n \nfunc\n.\n__name__\n\n\n    \nreturn\n \ninner\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\ndef\n \nlogme\n(\nfunc\n):\n\n    \nimport\n \nlogging\n\n    \nlogging\n.\nbasicConfig\n(\nlevel\n \n=\n \nlogging\n.\nDEBUG\n)\n\n\n    \n@wraps\n(\nfunc\n)\n \n# decorator\n\n    \ndef\n \ninner\n(\n*\nargs\n,\n \n**\nkwargs\n):\n \n# * for tuple, ** for dict.\n\n        \nlogging\n.\ndebug\n(\n\"Called {} with args {} and kwargs {}\"\n.\nformat\n(\n\n            \nfunc\n.\n__name__\n,\n \nargs\n,\n \nkwargs\n))\n \n# to print the tuple and dict.\n\n\n        \nreturn\n \nfunc\n(\n*\nargs\n,\n \n**\nkwargs\n)\n \n# to use the tuple and dict.\n\n\n    \n# replace all this\n\n    \n#inner.__doc__ = func.__doc__\n\n    \n#inner.__name__ = func.__name__\n\n    \n# with  from functools import wraps  at the top\n\n    \n# functools packages\n\n    \n# wraps is a decorator; see above\n\n\n    \nreturn\n \ninner\n\n\n\n\n\n\n\n1\n2\n3\n4\n@logme\n\n\ndef\n \nsub\n(\nx\n,\n \ny\n):\n\n    \n\"\"\"Returns the difference between two numbers\"\"\"\n\n    \nreturn\n \nx\n \n-\n \ny",
            "title": "Decorators"
        },
        {
            "location": "/Decorators/#first-thing-first",
            "text": "First dive  Decorators are easy to add or remove. They are nested functions; inserted in another function.  Below,  inner()  can live inside  outer() . When you call  outer() , you can also call  inner() .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 from   functools   import   wraps  def   outer (): \n     number   =   5 \n\n     def   inner (): \n         print ( number ) \n\n     inner ()  outer ()   # print 5  inner ()   # cannot be called    Functions are first-class objects that can be passed around:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 def   apply ( func ,   x ,   y ): \n     return   func ( x ,   y )  def   add ( x ,   y ): \n     return   x   +   y  def   sub ( x ,   y ): \n     return   x   -   y  print ( apply ( add ,   5 , 5 ))   # call apply(), that calls add()  print ( apply ( sub ,   2 , 8 ))   # call apply(), that calls sub()    Output:  1\n2 10\n-6   \u2018Predefine scope\u2019: define the environment for the function.  inner()  has only access to  outer()  and  number = 5 .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 def   close (): \n     x   =   5 \n\n     def   inner (): \n         print ( x ) \n\n     return   inner  closure   =   close ()   # change the function name  closure ()   # call the 'new' function    Output:  1 5   1\n2\n3\n4\n5\n6\n7\n8\n9 def   add_to_five ( num ): \n\n     def   inner (): \n         print ( num   +   5 ) \n\n     return   inner  fifteen   =   add_to_five ( 10 )  fifteen ()    Output:   1 15   Take two !  A decorator is a function that accept function as an argument and returns a function.  f()  is an object, and it\u2019s not different from classes ( MyClass ) or variables ( a ).  1\n2\n3\n4\n5\n6\n7\n8\n9 >>>   a   =   10  >>>   def   f ():  ...       pass  ...  >>>   class   MyClass ():  ...       pass  ...  >>>   print   dir ()  [ 'MyClass' ,   '__builtins__' ,   '__doc__' ,   '__name__' ,   '__package__' ,   'a' ,   'f' ]    Assign a function to a variable:  1\n2\n3\n4\n5 def   func (): \n    print   \"func()\"  funcObj   =   func  funcObj ()   # inheritance from func()    Functions can be passed around in the same way other types of object such as strings, integers, lists, etc.   A function can accept a function as an argument and return a new function object:  1\n2\n3\n4 def   myFunction ( in_function ): \n    def   out_function (): \n       pass \n    return   out_function    The  myFunction  is indeed a decorator because, by definition, a decorator is a function that takes a function object as its argument, and returns a function object (!!!).  Elaborate:  1\n2\n3\n4\n5\n6 def   myFunction ( in_function ): \n    def   out_function (): \n       print   \"Entry: \" ,   in_function . __name__ \n       in_function () \n       print   \"Exit: \" ,   in_function . __name__ \n    return   out_function",
            "title": "First Thing First"
        },
        {
            "location": "/Decorators/#invoking-a-decorator",
            "text": "Put a simple_function into the decorator ( myFunction ) as an argument, and get a  enhanced_function  as a return value from the decorator.  1\n2\n3\n4 def   simple_function (): \n    pass  enhanced_function   =   myFunction ( simple_function )    Apply the decorator syntax to the code above:  1\n2\n3 @myFunction  def   simple_function (): \n    pass    @myFunction  is a decorator line or an annotation line. The  @  indicates the application of the decorator. A decorator is the function itself which takes a function, and returns a new function:  myFunction .  When the compiler passes over this code,  simple_function()  is compiled. The resulting function object is passed to the  myFunction  code. It produces a function-like object that is substituted for the original  simple_function() .  The static method:  1\n2\n3\n4\n5\n6\n7 >>>   class   A :  ...      def   s ( x ):  ...         print ( x )  ...      s   =   staticmethod ( s )  ...   >>>   A . s ( 10 )  10    The equivalent code using a decorator looks like this:  1\n2\n3\n4\n5\n6\n7 >>>   class   A :  ...      @staticmethod  ...      def   s ( x ):  ...         print ( x )  ...  >>>   A . s ( 10 )  10    For example, suppose you\u2019d like to do something at the entry and exit points of a function (perform some kind of security, tracing, locking, etc.):  1\n2\n3\n4\n5\n6\n7 @entryExit  def   func1 (): \n     print   \"inside func1()\"  @entryExit  def   func2 (): \n     print   \"inside func2()\"    Another example:  1\n2\n3\n4\n5\n6 >>>   def   wrapper ( f ):  ...      return   f  ...  >>>   def   foo ():  ...      pass  ...    Then, the wrapper can be used for rebinding  foo()  like this:  1 >>>   foo   =   wrapper ( foo )    So, it\u2019s a decorator:  1\n2\n3 >>>   @wrapper  ...   def   foo ():  ...      pass    With a decorator defined as below:  1\n2\n3 def   decorator ( f ): \n    #process function \n    return   f    Maps the following:  1\n2\n3\n4\n5 @decorator  def   f ( arg ): \n    return   arg * arg  f ( 123 )    # output 15129    Into:  1\n2\n3 def   f ( arg ): \n    print   arg * arg  f   =   decorator ( f )    Decoration maps the following line:  1 f ( 123 )    Into:  1 decorator ( f )( 123 )    A function decorator is applied to a function definition by placing it on the line before that function definition begins:  1\n2\n3 @myDecorator  def   aFunction (): \n     print   \"inside aFunction\"    The compiler passes over the code. The  aFunction()  is compiled. The resulting function object is passed to the  myDecorator  code. It produces a function-like object that is then substituted for the original  aFunction() .",
            "title": "Invoking a Decorator"
        },
        {
            "location": "/Decorators/#using-decorators",
            "text": "What should the decorator do? Anything!  Decorators allow you to modify code in functions or classes.  The only constraint upon the object returned by the decorator is that it can be used as a function. Any classes we use as decorators must implement  __call__ .  Expect the original function code to be used at some point:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 class   myDecorator ( object ): \n\n     def   __init__ ( self ,   f ): \n         print   \"inside myDecorator.__init__()\" \n         f ()   # Prove that function definition has completed \n\n     def   __call__ ( self ): \n         print   \"inside myDecorator.__call__()\"  @myDecorator  def   aFunction (): \n     print   \"inside aFunction()\"  print   \"Finished decorating aFunction()\"  aFunction ()    Run this code:  1\n2\n3\n4 inside   myDecorator . __init__ ()  inside   aFunction ()  Finished   decorating   aFunction ()  inside   myDecorator . __call__ ()    The constructor for  myDecorator  is executed at the point of decoration of the function.  Call  f()  inside  __init__() . The creation of  f()  is complete before the decorator is called.  The decorator constructor receives the function object being decorated.   Capture the function object in the constructor and later use it in the  __call__()  method.  When  aFunction()  is called after it has been decorated, the  myDecorator.__call__()  method is called instead of the original code. The act of decoration replaces the original function object.  Before decorators were added:  1\n2\n3 def   foo (): \n     pass  foo   =   staticmethod ( foo )    With the addition of the  @  decoration operator:  1\n2\n3 @staticmethod  def   foo (): \n     pass    This syntax brings the idea of \u201capplying code to other code\u201d (i.e.: macros).  Slightly More Useful  Use the code in the decorated functions:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 class   entryExit ( object ): \n\n     def   __init__ ( self ,   f ): \n         self . f   =   f \n\n     def   __call__ ( self ): \n         print   \"Entering\" ,   self . f . __name__ \n         self . f () \n         print   \"Exited\" ,   self . f . __name__  @entryExit  def   func1 (): \n     print   \"inside func1()\"  @entryExit  def   func2 (): \n     print   \"inside func2()\"  func1 ()  func2 ()   \nOutput:  1\n2\n3\n4\n5\n6 Entering func1\ninside func1()\nExited func1\nEntering func2\ninside func2()\nExited func2   The decorated functions now have the \u2018Entering\u2019 and \u2018Exited\u2019 trace statements around the call.  The constructor stores the argument, which is the function object. In the call, use the  __name__  attribute of the function to display that function\u2019s name.   Then call the function itself.  Using functions as decorators  Replace the original function with an object of a class that has a  __call__()  method. But a function object is also callable. From the previous example, use a function instead of a class:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 def   entryExit ( f ): \n     def   new_f (): \n         print   \"Entering\" ,   f . __name__ \n         f () \n         print   \"Exited\" ,   f . __name__ \n     return   new_f  @entryExit  def   func1 (): \n     print   \"inside func1()\"  @entryExit  def   func2 (): \n     print   \"inside func2()\"  func1 ()  func2 ()  print   func1 . __name__    new_f()  is defined within the body of  entryExit() . It is created and returned when  entryExit()  is called.    new_f()  is a closure; it captures the actual value of  f .  Once  new_f()  has been defined, it is returned from  entryExit() . The decorator mechanism can assign the result as the decorated function.  The output of  print func1.__name__  is  new_f , because the  new_f  function has been substituted for the original function during decoration. If this is a problem, change the name of the decorator function before you return it:  1\n2\n3\n4\n5\n6\n7 def   entryExit ( f ): \n     def   new_f (): \n         print   \"Entering\" ,   f . __name__ \n         f () \n         print   \"Exited\" ,   f . __name__ \n     new_f . __name__   =   f . __name__ \n     return   new_f",
            "title": "Using Decorators"
        },
        {
            "location": "/Decorators/#cases",
            "text": "1 - Adding  $  to the return value from  price()  function   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 def   dollar ( fn ): \n     def   new ( * args ): \n         return   '$'   +   str ( fn ( * args )) \n     return   new  @dollar  def   price ( amount ,   tax_rate ): \n     return   amount   +   amount * tax_rate  print   price ( 100 , 0.1 )    Output:  1 $110   The dollar decorator function takes the  price()  function, and returns enhanced the output from the original  price()  after modifying the inner working. Note that the decorator enables us to do it without making any changes on the  price()  function itself.  A decorator works as a wrapper, modifying the behavior of the code before and after a target function execution, without the need to modify the function itself, enhancing the original functionality.  With the pound or euro as well:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 def   pound ( fn ): \n     def   new ( * args ): \n         return   ( u \" \\u00A3 \" ) . encode ( 'utf-8' )   +   str ( fn ( * args )) \n         return   '$'   +   str ( fn ( * args )) \n     return   new  @pound  def   price ( amount ,   tax_rate ): \n     return   amount   +   amount * tax_rate  print   price ( 100 , 0.1 )    2 - How many times a function called?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 def   count ( f ): \n     def   inner ( * args ,   ** kargs ): \n         inner . counter   +=   1 \n         return   f ( * args ,   ** kargs ) \n     inner . counter   =   0 \n     return   inner  @count  def   my_fnc (): \n     pass  if   __name__   ==   '__main__' : \n     my_fnc () \n     my_fnc () \n     my_fnc () \n\n     print   'my_fnc.counter=' , my_fnc . counter    Output:  1 my_fnc.counter= 3   3 - Timer   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 import   time  def   timer ( f ): \n     def   inner ( * args ,   ** kargs ): \n         t   =   time . time () \n         ret   =   f ( * args ,   ** kargs ) \n         print   'timer =  %s '   % ( time . time () - t )  \n         return   ret \n     return   inner  @timer  def   my_fnc (): \n     pass  if   __name__   ==   '__main__' : \n     my_fnc ()    Output:  1 timer = 5.96046447754e-06",
            "title": "Cases"
        },
        {
            "location": "/Decorators/#more-cases-and-examples",
            "text": "learnpython.org (tutorial, snippets)  Collected examples   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 def   logme ( func ): \n     import   logging \n     logging . basicConfig ( level   =   logging . DEBUG ) \n\n     def   inner (): \n         logging . debug ( \"Called {}\" . format ( func . __name__ )) \n\n         return   func () \n\n     return   inner     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 def   logme ( func ): \n     import   logging \n     logging . basicConfig ( level   =   logging . DEBUG ) \n\n     def   inner ( * args ,   ** kwargs ):   # * for tuple, ** for dict. \n         logging . debug ( \"Called {} with args {} and kwargs {}\" . format ( \n             func . __name__ ,   args ,   kwargs ))   # to print the tuple and dict. \n\n         return   func ( * args ,   ** kwargs )   # to use the tuple and dict. \n\n     return   inner     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 def   logme ( func ): \n     import   logging \n     logging . basicConfig ( level   =   logging . DEBUG ) \n\n     def   inner ( * args ,   ** kwargs ):   # * for tuple, ** for dict. \n         logging . debug ( \"Called {} with args {} and kwargs {}\" . format ( \n             func . __name__ ,   args ,   kwargs ))   # to print the tuple and dict. \n\n         return   func ( * args ,   ** kwargs )   # to use the tuple and dict. \n\n     inner . __doc__   =   func . __doc__ \n     inner . __name__   =   func . __name__ \n\n     return   inner     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 def   logme ( func ): \n     import   logging \n     logging . basicConfig ( level   =   logging . DEBUG ) \n\n     @wraps ( func )   # decorator \n     def   inner ( * args ,   ** kwargs ):   # * for tuple, ** for dict. \n         logging . debug ( \"Called {} with args {} and kwargs {}\" . format ( \n             func . __name__ ,   args ,   kwargs ))   # to print the tuple and dict. \n\n         return   func ( * args ,   ** kwargs )   # to use the tuple and dict. \n\n     # replace all this \n     #inner.__doc__ = func.__doc__ \n     #inner.__name__ = func.__name__ \n     # with  from functools import wraps  at the top \n     # functools packages \n     # wraps is a decorator; see above \n\n     return   inner    1\n2\n3\n4 @logme  def   sub ( x ,   y ): \n     \"\"\"Returns the difference between two numbers\"\"\" \n     return   x   -   y",
            "title": "More Cases and Examples"
        },
        {
            "location": "/Write_Better_Python/",
            "text": "CONTENT\n\n\n1, PEP20\n\n\n2, PEP8\n\n\n3, PEP Diagnoses with flake8 & pylint\n\n\n4, Help & Docstrings\n\n\n5, pdb Debugs Scripts\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\n1, PEP20\n\u00b6\n\n\nPEP : Python Enhancement Proposals. In the Python shell, type \nimport\n \nthis\n. We get the following \u2018easter egg\u2019.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nThe\n \nZen\n \nof\n \nPython\n,\n \nby\n \nTim\n \nPeters\n\n\n\nBeautiful\n \nis\n \nbetter\n \nthan\n \nugly\n.\n\n\nExplicit\n \nis\n \nbetter\n \nthan\n \nimplicit\n.\n\n\nSimple\n \nis\n \nbetter\n \nthan\n \ncomplex\n.\n\n\nComplex\n \nis\n \nbetter\n \nthan\n \ncomplicated\n.\n\n\nFlat\n \nis\n \nbetter\n \nthan\n \nnested\n.\n\n\nSparse\n \nis\n \nbetter\n \nthan\n \ndense\n.\n\n\nReadability\n \ncounts\n.\n\n\nSpecial\n \ncases\n \naren\n't special enough to break the rules.\n\n\nAlthough\n \npracticality\n \nbeats\n \npurity\n.\n\n\nErrors\n \nshould\n \nnever\n \npass\n \nsilently\n.\n\n\nUnless\n \nexplicitly\n \nsilenced\n.\n\n\nIn\n \nthe\n \nface\n \nof\n \nambiguity\n,\n \nrefuse\n \nthe\n \ntemptation\n \nto\n \nguess\n.\n\n\nThere\n \nshould\n \nbe\n \none\n--\n \nand\n \npreferably\n \nonly\n \none\n \n--\nobvious\n \nway\n \nto\n \ndo\n \nit\n.\n\n\nAlthough\n \nthat\n \nway\n \nmay\n \nnot\n \nbe\n \nobvious\n \nat\n \nfirst\n \nunless\n \nyou\n're Dutch.\n\n\nNow\n \nis\n \nbetter\n \nthan\n \nnever\n.\n\n\nAlthough\n \nnever\n \nis\n \noften\n \nbetter\n \nthan\n \n*\nright\n*\n \nnow\n.\n\n\nIf\n \nthe\n \nimplementation\n \nis\n \nhard\n \nto\n \nexplain\n,\n \nit\n's a bad idea.\n\n\nIf\n \nthe\n \nimplementation\n \nis\n \neasy\n \nto\n \nexplain\n,\n \nit\n \nmay\n \nbe\n \na\n \ngood\n \nidea\n.\n\n\nNamespaces\n \nare\n \none\n \nhonking\n \ngreat\n \nidea\n \n--\n \nlet\n's do more of those!\n\n\n\n\n\n\n\nThe \u2018easter egg\u2019 is a poem. A poem of best practices.\n\n\n\n\nExplicit is better than implicit. Don\u2019t add numbers to strings.\n\n\nReadability counts. Use the grammar of PEP8. Add comments.\n\n\nSpecial cases aren\u2019t special enough to break the rules. The\nlen\n function for all. A function applies to all. A method applied to some. Find the built-in function before coding new functions.\n\n\nThe code should be pleasant and easy to read.\n\n\n\n\n2, PEP8\n\u00b6\n\n\nPEP : Python Enhancement Proposals. Improves the look of the code. Here are a few principles:\n\n\n\n\nImport at the top and separate.\n\n\n1 space between parameters and variables.\n\n\n4-space indentation.\n\n\nTwo-line space between independent functions.\n\n\n1 space between operators.\n\n\n2-line space between class and other objects.\n\n\nClasses are capitalized.\n\n\nFunctions and methods are not capitalized.\n\n\n1-line space between class functions.\n\n\nConstant variable in uppercase.\n\n\nVariable in lowercase and long names.\n\n\n\n\nHere is an example where to apply these principles.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nimport\n \nsys\n \n# import at the top and separate\n\n\nimport\n \nrandom\n\n\n\n\ndef\n \nfoo_Bar\n(\narg1\n,\n \narg2\n,\n \narg3\n,\n \narg4\n):\n \n# 1 space between parameters and variables\n\n    \nreturn\n \narg1\n,\n \narg2\n,\n \narg3\n,\n \narg4\n \n# 4-space indentation\n\n\n\n\ndef\n \nbar\n(\n*\nargs\n):\n \n# 2-line space between independent functions\n\n    \n# bad spacing\n\n    \nreturn\n \n2\n \n+\n \n2\n \n# 1 space between operators\n\n\n\n\nclass\n \nSubmarine\n:\n \n# 2-line space between class and other objects; classes are capitalized\n\n    \ndef\n \none\n(\nself\n):\n \n# functions and methods are not capitalized\n\n        \nreturn\n \n1\n\n\n    \ndef\n \ntwo\n(\nself\n):\n \n# 1-line space between class functions\n\n        \nreturn\n \n2\n\n\n\nCONSTANT\n \n=\n \n10\n \n# constant variable in uppercase\n\n\n\nalpha\n,\n \nbeta\n,\n \ncharlie\n,\n \ndelta\n \n=\n \nfoo_Bar\n(\n \n# variable in lowercase and long names\n\n \n\"a long string\"\n,\n \n# one practical way to stack things\n\n \n\"a longer string\"\n,\n\n \n\"yet another long string\"\n,\n \n \n\"and other crazy string\"\n)\n\n\n\none\n \n=\n \n1\n \n# 1 space\n\n\nthree\n \n=\n \n3\n\n\nfourteen\n \n=\n \n14\n\n\n\nprint\n \nalpha\n\n\nprint\n \nfourteen\n\n\n\nprint\n \nSubmarine\n()\n.\ntwo\n()\n \n# class.method\n\n\n\n\n\n\n\n3, PEP Diagnoses with \nflake8\n & \npylint\n\u00b6\n\n\nThe modules can be integrated with IDE and text editors (VIM, Emacs, gedit, Notepad++, etc.).\n\n\nflake8\n\n\n\n\nInstall \nflake8\n with pip.\n\n\nRun a script with \nflake8\n: \npython flake8 <script.py>\n. \n\n\nInstead of running the code, \nflake8\n runs a diagnosis and returns the results. \n\n\nThe results suggest improvement to the look of the script. \n\n\nIt shows a list: the line number, the character positions, and the improvement. We can then go back to the script, improve it and rerun \nflake8\n.\n\n\n\n\npylint\n\n\n\n\nInstall \npylint\n with pip.\n\n\nRun a script with \nflake8\n: \npython pylint script.py\n. \n\n\n\n\npylint\n runs a diagnosis and returns a report about the script.\n\n\n4, Help & Docstrings\n\u00b6\n\n\n\n\nIn the shell, for any command \u2018\n\u2018, type \nhelp(<cmd>)\n to get a definition.\n\n\nType \ndir(<cmd>)\n to get the attributes from the Python glossary.\n\n\nA docstrings is an enhancement to the \nhelp\n glossary.\n\n\n\n\nWithout docstrings.\n\n\n1\n2\n3\n4\n5\n6\n7\ndef\n \ndoes_something\n(\narg\n):\n\n    \nif\n \nisinstance\n(\narg\n,\n \n(\nint\n,\n \nfloat\n)):\n\n        \nreturn\n \narg\n \n+\n \n10\n\n    \nelif\n \nisinstance\n(\narg\n,\n \nstr\n):\n\n        \nreturn\n \nstr\n \n*\n \n3\n\n    \nelse\n:\n\n        \nraise\n \nTypeError\n(\n\"does_something only takes ints, floats, and strings\"\n)\n\n\n\n\n\n\n\n\n\nWe should never read a code to figure out what it does! \n\n\nAdd docstrings: \u201c\u201d\u201d   \u201c\u201d\u201d on 1 line\n\n\nAdd docstrings: several lines (see below).\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ndef\n \ndoes_better\n(\narg\n):\n\n    \n\"\"\"Takes one argument and does something based on type.\n\n\n    If arg is a string, returns arg * 3;\n\n\n    If arg is an int or float, returns arg + 10\n\n\n    \"\"\"\n\n    \nif\n \nisinstance\n(\narg\n,\n \n(\nint\n,\n \nfloat\n)):\n\n        \nreturn\n \narg\n \n+\n \n10\n\n    \nelif\n \nisinstance\n(\narg\n,\n \nstr\n):\n\n        \nreturn\n \nstr\n \n*\n \n3\n\n    \nelse\n:\n\n        \nraise\n \nTypeError\n(\n\"does_something only takes ints, floats, and strings\"\n)\n\n\n\n\n\n\n\n\n\nIn the shell, type \nhelp(docstrings.does_better)\n to print the function\u2019s docstring.\n\n\n\n\n5, \npdb\n Debugs Scripts\n\u00b6\n\n\nGo inside the code.\n\n\nThe next following script is bugged.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# a list\n\n\nmy_list\n \n=\n \n[\n5\n,\n \n2\n,\n \n1\n,\n \nTrue\n,\n \n\"abcdefg\"\n,\n \n3\n,\n \nFalse\n,\n \n4\n]\n\n\n\n# modify the list\n\n\ndel\n \nmy_list\n[\n3\n]\n\n\ndel\n \nmy_list\n[\n4\n]\n\n\ndel\n \nmy_list\n[\n6\n]\n\n\nprint\n \nmy_list\n\n\n\n\n\n\n\nWe run the code and we get an error. The sloppy fix would be to add print statements.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# a list\n\n\nmy_list\n \n=\n \n[\n5\n,\n \n2\n,\n \n1\n,\n \nTrue\n,\n \n\"abcdefg\"\n,\n \n3\n,\n \nFalse\n,\n \n4\n]\n\n\n\n# modify the list\n\n\ndel\n \nmy_list\n[\n3\n]\n \n# ADD\n\n\nprint\n \nmy_list\n\n\ndel\n \nmy_list\n[\n4\n]\n \n# ADD\n\n\nprint\n \nmy_list\n\n\ndel\n \nmy_list\n[\n6\n]\n \n# ADD\n\n\nprint\n \nmy_list\n\n\n\n\n\n\n\nInstead, use the Python debugger: \npdb.set_trace()\n in the code.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \npdb\n \n# ADD\n\n\n\n\n# a list\n\n\nmy_list\n \n=\n \n[\n5\n,\n \n2\n,\n \n1\n,\n \nTrue\n,\n \n\"abcdefg\"\n,\n \n3\n,\n \nFalse\n,\n \n4\n]\n\n\n\npdb\n.\nset_trace\n()\n \n# ADD\n\n\ndel\n \nmy_list\n[\n3\n]\n\n\ndel\n \nmy_list\n[\n4\n]\n\n\ndel\n \nmy_list\n[\n6\n]\n\n\nprint\n \nmy_list\n\n\n\n\n\n\n\nWhen we run the script, the routine stops at each line following the \nset_trace()\n function. We get a \n(Pdb)\n prompt. We can type in the variable name as if we were in the shell to see what is going on.\n\n\nWe punch \nn\n or \nnext\n to step forward in the script. \npdb\n pinpoint the trouble areas. In the current case, we want to delete a value at index 6 when the list had been reduced to 5 values (it is impossible to delete what is inexistant!).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \npdb\n\n\n\n\n# a list\n\n\nmy_list\n \n=\n \n[\n5\n,\n \n2\n,\n \n1\n,\n \nTrue\n,\n \n\"abcdefg\"\n,\n \n3\n,\n \nFalse\n,\n \n4\n]\n\n\n\npdb\n.\nset_trace\n()\n\n\ndel\n \nmy_list\n[\n3\n]\n \n# [5, 2, 1, \"abcdefg\", 3, False, 4]\n\n\ndel\n \nmy_list\n[\n4\n]\n \n# [5, 2, 1, 3, False, 4]\n\n\ndel\n \nmy_list\n[\n6\n]\n \n# [5, 2, 1, 3, 4]\n\n\nprint\n \nmy_list\n\n\n\n\n\n\n\nAn alternative way.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# a list\n\n\nmy_list\n \n=\n \n[\n5\n,\n \n2\n,\n \n1\n,\n \nTrue\n,\n \n\"abcdefg\"\n,\n \n3\n,\n \nFalse\n,\n \n4\n]\n\n\n\nimport\n \npdb\n;\n \npdb\n.\nset_trace\n()\n \n# ADD\n\n\ndel\n \nmy_list\n[\n3\n]\n \n# [5, 2, 1, \"abcdefg\", 3, False, 4]\n\n\ndel\n \nmy_list\n[\n4\n]\n \n# [5, 2, 1, 3, False, 4]\n\n\ndel\n \nmy_list\n[\n4\n]\n \n# [5, 2, 1, 3, 4]\n\n\nprint\n \nmy_list\n\n\n\n\n\n\n\nChange the script and rerun it.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \npdb\n\n\n\n\n# a list\n\n\nmy_list\n \n=\n \n[\n5\n,\n \n2\n,\n \n1\n,\n \nTrue\n,\n \n\"abcdefg\"\n,\n \n3\n,\n \nFalse\n,\n \n4\n]\n\n\n\npdb\n.\nset_trace\n()\n\n\ndel\n \nmy_list\n[\n3\n]\n \n# [5, 2, 1, \"abcdefg\", 3, False, 4]\n\n\ndel\n \nmy_list\n[\n4\n]\n \n# [5, 2, 1, 3, False, 4]\n\n\ndel\n \nmy_list\n[\n4\n]\n \n# [5, 2, 1, 3, 4]\n\n\nprint\n \nmy_list\n\n\n\n\n\n\n\nOnce the script is debugged, delete the \npdb\n stuff (it is a temporary measure).\n\n\n1\n2\n3\n4\n5\n6\n7\n# a list\n\n\nmy_list\n \n=\n \n[\n5\n,\n \n2\n,\n \n1\n,\n \nTrue\n,\n \n\"abcdefg\"\n,\n \n3\n,\n \nFalse\n,\n \n4\n]\n\n\n\ndel\n \nmy_list\n[\n3\n]\n \n# [5, 2, 1, \"abcdefg\", 3, False, 4]\n\n\ndel\n \nmy_list\n[\n4\n]\n \n# [5, 2, 1, 3, False, 4]\n\n\ndel\n \nmy_list\n[\n4\n]\n \n# [5, 2, 1, 3, 4]\n\n\nprint\n \nmy_list",
            "title": "Write Better Python with PEP"
        },
        {
            "location": "/Write_Better_Python/#2-pep8",
            "text": "PEP : Python Enhancement Proposals. Improves the look of the code. Here are a few principles:   Import at the top and separate.  1 space between parameters and variables.  4-space indentation.  Two-line space between independent functions.  1 space between operators.  2-line space between class and other objects.  Classes are capitalized.  Functions and methods are not capitalized.  1-line space between class functions.  Constant variable in uppercase.  Variable in lowercase and long names.   Here is an example where to apply these principles.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 import   sys   # import at the top and separate  import   random  def   foo_Bar ( arg1 ,   arg2 ,   arg3 ,   arg4 ):   # 1 space between parameters and variables \n     return   arg1 ,   arg2 ,   arg3 ,   arg4   # 4-space indentation  def   bar ( * args ):   # 2-line space between independent functions \n     # bad spacing \n     return   2   +   2   # 1 space between operators  class   Submarine :   # 2-line space between class and other objects; classes are capitalized \n     def   one ( self ):   # functions and methods are not capitalized \n         return   1 \n\n     def   two ( self ):   # 1-line space between class functions \n         return   2  CONSTANT   =   10   # constant variable in uppercase  alpha ,   beta ,   charlie ,   delta   =   foo_Bar (   # variable in lowercase and long names \n  \"a long string\" ,   # one practical way to stack things \n  \"a longer string\" , \n  \"yet another long string\" ,  \n  \"and other crazy string\" )  one   =   1   # 1 space  three   =   3  fourteen   =   14  print   alpha  print   fourteen  print   Submarine () . two ()   # class.method",
            "title": "2, PEP8"
        },
        {
            "location": "/Write_Better_Python/#3-pep-diagnoses-with-flake8-pylint",
            "text": "The modules can be integrated with IDE and text editors (VIM, Emacs, gedit, Notepad++, etc.).  flake8   Install  flake8  with pip.  Run a script with  flake8 :  python flake8 <script.py> .   Instead of running the code,  flake8  runs a diagnosis and returns the results.   The results suggest improvement to the look of the script.   It shows a list: the line number, the character positions, and the improvement. We can then go back to the script, improve it and rerun  flake8 .   pylint   Install  pylint  with pip.  Run a script with  flake8 :  python pylint script.py .    pylint  runs a diagnosis and returns a report about the script.",
            "title": "3, PEP Diagnoses with flake8 &amp; pylint"
        },
        {
            "location": "/Write_Better_Python/#4-help-docstrings",
            "text": "In the shell, for any command \u2018 \u2018, type  help(<cmd>)  to get a definition.  Type  dir(<cmd>)  to get the attributes from the Python glossary.  A docstrings is an enhancement to the  help  glossary.   Without docstrings.  1\n2\n3\n4\n5\n6\n7 def   does_something ( arg ): \n     if   isinstance ( arg ,   ( int ,   float )): \n         return   arg   +   10 \n     elif   isinstance ( arg ,   str ): \n         return   str   *   3 \n     else : \n         raise   TypeError ( \"does_something only takes ints, floats, and strings\" )     We should never read a code to figure out what it does!   Add docstrings: \u201c\u201d\u201d   \u201c\u201d\u201d on 1 line  Add docstrings: several lines (see below).    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 def   does_better ( arg ): \n     \"\"\"Takes one argument and does something based on type.      If arg is a string, returns arg * 3;      If arg is an int or float, returns arg + 10      \"\"\" \n     if   isinstance ( arg ,   ( int ,   float )): \n         return   arg   +   10 \n     elif   isinstance ( arg ,   str ): \n         return   str   *   3 \n     else : \n         raise   TypeError ( \"does_something only takes ints, floats, and strings\" )     In the shell, type  help(docstrings.does_better)  to print the function\u2019s docstring.",
            "title": "4, Help &amp; Docstrings"
        },
        {
            "location": "/Write_Better_Python/#5-pdb-debugs-scripts",
            "text": "Go inside the code.  The next following script is bugged.  1\n2\n3\n4\n5\n6\n7\n8 # a list  my_list   =   [ 5 ,   2 ,   1 ,   True ,   \"abcdefg\" ,   3 ,   False ,   4 ]  # modify the list  del   my_list [ 3 ]  del   my_list [ 4 ]  del   my_list [ 6 ]  print   my_list    We run the code and we get an error. The sloppy fix would be to add print statements.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # a list  my_list   =   [ 5 ,   2 ,   1 ,   True ,   \"abcdefg\" ,   3 ,   False ,   4 ]  # modify the list  del   my_list [ 3 ]   # ADD  print   my_list  del   my_list [ 4 ]   # ADD  print   my_list  del   my_list [ 6 ]   # ADD  print   my_list    Instead, use the Python debugger:  pdb.set_trace()  in the code.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   pdb   # ADD  # a list  my_list   =   [ 5 ,   2 ,   1 ,   True ,   \"abcdefg\" ,   3 ,   False ,   4 ]  pdb . set_trace ()   # ADD  del   my_list [ 3 ]  del   my_list [ 4 ]  del   my_list [ 6 ]  print   my_list    When we run the script, the routine stops at each line following the  set_trace()  function. We get a  (Pdb)  prompt. We can type in the variable name as if we were in the shell to see what is going on.  We punch  n  or  next  to step forward in the script.  pdb  pinpoint the trouble areas. In the current case, we want to delete a value at index 6 when the list had been reduced to 5 values (it is impossible to delete what is inexistant!).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   pdb  # a list  my_list   =   [ 5 ,   2 ,   1 ,   True ,   \"abcdefg\" ,   3 ,   False ,   4 ]  pdb . set_trace ()  del   my_list [ 3 ]   # [5, 2, 1, \"abcdefg\", 3, False, 4]  del   my_list [ 4 ]   # [5, 2, 1, 3, False, 4]  del   my_list [ 6 ]   # [5, 2, 1, 3, 4]  print   my_list    An alternative way.  1\n2\n3\n4\n5\n6\n7\n8 # a list  my_list   =   [ 5 ,   2 ,   1 ,   True ,   \"abcdefg\" ,   3 ,   False ,   4 ]  import   pdb ;   pdb . set_trace ()   # ADD  del   my_list [ 3 ]   # [5, 2, 1, \"abcdefg\", 3, False, 4]  del   my_list [ 4 ]   # [5, 2, 1, 3, False, 4]  del   my_list [ 4 ]   # [5, 2, 1, 3, 4]  print   my_list    Change the script and rerun it.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   pdb  # a list  my_list   =   [ 5 ,   2 ,   1 ,   True ,   \"abcdefg\" ,   3 ,   False ,   4 ]  pdb . set_trace ()  del   my_list [ 3 ]   # [5, 2, 1, \"abcdefg\", 3, False, 4]  del   my_list [ 4 ]   # [5, 2, 1, 3, False, 4]  del   my_list [ 4 ]   # [5, 2, 1, 3, 4]  print   my_list    Once the script is debugged, delete the  pdb  stuff (it is a temporary measure).  1\n2\n3\n4\n5\n6\n7 # a list  my_list   =   [ 5 ,   2 ,   1 ,   True ,   \"abcdefg\" ,   3 ,   False ,   4 ]  del   my_list [ 3 ]   # [5, 2, 1, \"abcdefg\", 3, False, 4]  del   my_list [ 4 ]   # [5, 2, 1, 3, False, 4]  del   my_list [ 4 ]   # [5, 2, 1, 3, 4]  print   my_list",
            "title": "5, pdb Debugs Scripts"
        },
        {
            "location": "/Regex/",
            "text": "CONTENT\n\n\n1, Additional Commands (unused)\n\n\n2, match & search \u2013 One Expression, One Search\n\n\nRecap:\n\n\n\n\n\n\n3, Escape Characters \u2013 Comprenhensive Search\n\n\nRecap:\n\n\n\n\n\n\n4, Repetitions \u2013 Power Search\n\n\nRecap:\n\n\n\n\n\n\n5, Sets \u2013 Target Search\n\n\nRecap:\n\n\n\n\n\n\n6, Boundaries \u2013 Smart Search\n\n\nRecap:\n\n\n\n\n\n\n7, Groups \u2013 Subdivided Search\n\n\nRecap:\n\n\n\n\n\n\n8, Compile & Build Dictionaries \u2013 Operationalized Search\n\n\nRecap:\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2 in Windows. UNIX-based OS generate slighly different results. Contrary to Windows, UNIX-based OS easily process international characters. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\nCheck out \u2018Managing Your Biological Data with Python, Chapter 9, Pattern Matching and Text Mining\u2019.\n\n\nTest\n.\n\n\n\n\n\n\n1, Additional Commands (unused)\n\u00b6\n\n\n\n\nspan\n, return a tuple containing the start, end positions of the match.\n\n\nstart\n, return the starting position of the match.\n\n\nend\n, return the ending position of the match.\n\n\ngroup\n, return the string matched by the RE\n\n\ngroups\n, return a tuple containing the strings fal all the subgroups\n\n\nsplit(s)\n, split the string into a list, splitting it wherever the RE matches\n\n\nsub(r, s)\n, find all substrings where the RE matches and replaces them with a different string\n\n\nsubn(r, s)\n, do the same thing, but return the new string and the number of replacements\n\n\nIGNORECASE\n, \nI\n, case-insensitive matches.\n\n\n\n\n2, \nmatch\n & \nsearch\n \u2013 One Expression, One Search\n\u00b6\n\n\nFirst, we have a text file called names.txt.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nLiff, Kenneth   kenneth@submarine.com   (555) 555-5555  Teacher, Submarine  @kennethliff\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\nArthur, King    king_arthur@camelot.co.uk   King, Camelot\n\u00d6sterberg, Gustav   governor@norrbotten.co.se   Governor, Norrbotten    @gustata\n, Tim   tim@killerrabbit.com    Enchanter, Killer Rabbit Cave\nCarson, Ryan    ryan@submarine.com  (555) 555-5543  CEO, Submarine  @ryancarson\nDoctor  The doctor+companion@tardis.co.uk   Time Lord, Gallifrey\nExampleson, Exampleme   me@example.com  555-555-5552    Example, Example Co.    @exemple\nObama, Barack   president.44@us.gov 555 555-5551    President, United States of America @potus44\nChalks, Andrew  andrew@submarine.com    (555) 555-5553  Teacher, Submarine  @chalkers\nVader, Darth    darth-vader@empire.gov  (555) 555-4444  Sith lord, Galactic Empire  @darthvader\n\n\n\n\n\n\nSecond, we want to process the file: extract strings. \n\n\nWe could use \nre.match\n, but the function is picky. \nre.search\n is more forgiving in terms of precision. In both cases, the function should return the first match it finds, then stop.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# print what is in memory\n\n\nprint\n \nre\n.\nsearch\n(\nr\n'McFarland'\n,\n \ndata\n)\n.\ngroup\n()\n \n# r for raw string, no need for \\\n\n\nprint\n \nre\n.\nsearch\n(\nr\n'Arthur'\n,\n \ndata\n)\n.\ngroup\n()\n \n# search in the strings\n\n\n\n\n\n\n\nResults (in Windows).\n\n\n1\n2\n<_sre.SRE_Match object at 0x00000000021DB510>\n<_sre.SRE_Match object at 0x00000000021DB510>\n\n\n\n\n\n\nResults may vary in UNIX-type OS. In Linux, we get.\n\n\n1\n2\n<_sre.SRE_Match object; span=(0, 8), match='McFarland'>\n<_sre.SRE_Match object; span=(10, 15), match='Arthur'>\n\n\n\n\n\n\nChange the script and rerun it.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# print what is in memory\n\n\nprint\n \nre\n.\nsearch\n(\nr\n'McFarland'\n,\n \ndata\n)\n.\ngroup\n()\n \n# CHANGE\n\n\nprint\n \nre\n.\nsearch\n(\nr\n'Arthur'\n,\n \ndata\n)\n.\ngroup\n()\n \n# CHANGE\n\n\n\n\n\n\n\nResults.\n\n\n1\n2\nMcFarland\nArthur\n\n\n\n\n\n\nAlternatively.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# print what is in memory\n\n\nlast_name\n \n=\n \nr\n'McFarland'\n\n\nfirst_name\n \n=\n \nr\n'Arthur'\n\n\nprint\n \nre\n.\nsearch\n(\nlast_name\n,\n \ndata\n)\n.\ngroup\n()\n \n# CHANGE\n\n\nprint\n \nre\n.\nsearch\n(\nfirst_name\n,\n \ndata\n)\n.\ngroup\n()\n \n# CHANGE\n\n\n\n\n\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\n\n\n3, Escape Characters \u2013 Comprenhensive Search\n\u00b6\n\n\n\n\n\\w\n, match any Unicode word character.\n\n\n\\W\n, match anything that isn\u2019t a Unicode word character.\n\n\n\\s\n, any whitespace.\n\n\n\\S\n, not.\n\n\n\\d\n, any number 0-9.\n\n\n\\D\n, not.\n\n\n\\b\n, boundaries or the edges of a word.\n\n\n\\B\n, not.\n\n\n\n\nTry.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\nprint\n \nre\n.\nmatch\n(\nr\n'\\w, \\w'\n,\n \ndata\n)\n \n# CHANGE\n\n\n\n\n\n\n\nResults.\n\n\n1\nNone\n\n\n\n\n\n\nWe get \nNone\n because of \nre.match\n. Instead, try.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# catch phone numbers\n\n\nprint\n \nre\n.\nsearch\n(\nr\n'\\d\\d\\d-\\d\\d\\d\\d'\n,\n \ndata\n)\n.\ngroup\n()\n \n# CHANGE\n\n\n\n\n\n\n\nResults.\n\n\n1\n555-5555\n\n\n\n\n\n\nImprove the code.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# catch complete phone numbers\n\n\nprint\n \nre\n.\nsearch\n(\nr\n'\\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d'\n,\n \ndata\n)\n.\ngroup\n()\n \n# CHANGE\n\n\n\n\n\n\n\nResults.\n\n\n1\n(555) 555-5555\n\n\n\n\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (see above).\n\n\n\n\n4, Repetitions \u2013 Power Search\n\u00b6\n\n\n\n\n{3}\n, repeat 3 times.\n\n\n{,3}\n, repeat 0 to 3 times.\n\n\n{3,}\n, repeat 3 or more times.\n\n\n{3, 5}\n, repeat 3, 4 or 5 times.\n\n\n?\n, repeat 0 or once.\n\n\n*\n, repeat at least 0 times (no upper bound).\n\n\n+\n, repeat at least once (no upper bound).\n\n\n\n\nCatch a name.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# catch a name\n\n\nprint\n \nre\n.\nsearch\n(\nr\n'\\w+, \\w+'\n,\n \ndata\n)\n.\ngroup\n()\n \n# CHANGE\n\n\n\n\n\n\n\nResults.\n\n\n1\nLiff, Kenneth\n\n\n\n\n\n\nCatch a phone number.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# catch a complete phone numbers\n\n\nprint\n \nre\n.\nsearch\n(\nr\n'\\(\\d{3}\\) \\d{3}-\\d{4}'\n,\n \ndata\n)\n.\ngroup\n()\n \n# CHANGE\n\n\n\n\n\n\n\nResults.\n\n\n1\n(555) 555-5555\n\n\n\n\n\n\nCatch multiple phone numbers.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# more universal way (parentheses, hyphen, space become optional)\n\n\n# on multiple lines!\n\n\nprint\n \nre\n.\nfindall\n(\nr\n'\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4}'\n,\n \ndata\n)\n \n# CHANGE\n\n\n\n\n\n\n\nResults.\n\n\n1\n['(555) 555-5555', '(555) 555-5555', '(555) 555-5543', '555-555-5552', '555 555-5551', '(555) 555-5553', '(555) 555-4444']\n\n\n\n\n\n\nCatch multiple names.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# universal way for names\n\n\nprint\n \nre\n.\nfindall\n(\nr\n'\\w*, \\w+'\n,\n \ndata\n)\n  \n# CHANGE: findall\n\n\n\n\n\n\n\nResults.\n\n\n1\n['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', ', Tim', 'Enchanter, Killer', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Obama, Barack', 'President, United', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic']\n\n\n\n\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (see above).\n\n\nfindall\n.\n\n\n\n\n5, Sets \u2013 Target Search\n\u00b6\n\n\nCatch patterns. We only need unique characters even when a word contains repetitive characters.\n\n\n\n\n[aple]\n, search for \u2018apple\u2019.\n\n\n[a-z]\n, search for any lowercase letters.\n\n\n[^2]\n, search for anything that is not 2.\n\n\n.\n, stands for any possible character.\n\n\n\n\nFor finding email addresses, search better \u2018cures\u2019 on email adresses. Search for email address regex or email address regular expressions on Stack Overflow, Quora, etc.\n\n\nWe can also try.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# find emails\n\n\nprint\n \nre\n.\nfindall\n(\nr\n'[-\\w\\d+.]+@[-\\w\\d.]+'\n,\n \ndata\n)\n \n# CHANGE\n\n\n\n\n\n\n\nResults.\n\n\n1\n['kenneth@submarine.com', 'arty@submarine.com', 'king_arthur@camelot.co.uk', 'governor@norrbotten.co.se', 'tim@killerrabbit.com', 'ryan@submarine.com', 'doctor+companion@tardis.co.uk', 'me@example.com', 'president.44@us.gov', 'andrew@submarine.com', 'darth-vader@empire.gov']\n\n\n\n\n\n\nRetrieve \u2018submarine\u2019. All characters are unique. The set should be \u2018submarine\u2019.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# set [submarine] should catch 'submarine'\n\n\n# add word boundaries, at least once, ignore lower or upper cases\n\n\nprint\n \nre\n.\nfindall\n(\nr\n'\\b[submarine]+\\b'\n,\n \ndata\n,\n \nre\n.\nIGNORECASE\n)\n \n# CHANGE\n\n\n\n\n\n\n\nResults.\n\n\n1\n['submarine', 'Submarine', 'submarine', 'Submarine', 'se', 'submarine', 'Submarine', 'me', 'us', 'submarine', 'Submarine']\n\n\n\n\n\n\nHowever, we also collect shorter strings (\u2018se\u2019, \u2018me\u2019, \u2018us\u2019, \u2018Maria\u2019) with characters from [submarine]. If we wanted to limit the search to \u2018submarine\u2019 only.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# always 9 letters\n\n\nprint\n \nre\n.\nfindall\n(\nr\n'\\b[submarine]{9}\\b'\n,\n \ndata\n,\n \nre\n.\nIGNORECASE\n)\n \n# CHANGE\n\n\n\n\n\n\n\nResults.\n\n\n1\n['submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine']\n\n\n\n\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\n\n\n\n\n\n\n6, Boundaries \u2013 Smart Search\n\u00b6\n\n\n\n\n'''\n, add a multiline string.\n\n\n\\b@\n, word boundary \n@\n.\n\n\n\\b\n, word boundary \n.\n\n\n^\n, ignore.\n\n\n\\t\n, tab character.\n\n\n.\n, any character.\n\n\n\n\nFind emails with word boundaries, spaces, words, explicit spaces (without using VERBOSE!!!), at least once for any number of characters, ignore tabs, and ignore newlines.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# multiline strings\n\n\nprint\n \nre\n.\nfindall\n(\nr\n'''\n\n\n    \\b@[-\\w\\d.]* # First a word boundary, an @, and then any number of characters\n\n\n    [^gov\\t] # Ignore 1+ instances of the letters 'g', 'o' or 'v' and a tab\n\n\n    \\b # Another word boundary\n\n\n'''\n,\n \ndata\n,\n \nre\n.\nVERBOSE\n|\nre\n.\nI\n)\n\n\n\n\n\n\n\nResults.\n\n\n1\n['@submarine.com', '@submarine.com', '@camelot.co.uk', '@norrbotten.co.se', '@killerrabbit.com', '@submarine.com', '@tardis.co.uk', '@example.com', '@us.', '@submarine.com', '@empire.']\n\n\n\n\n\n\nWe left off a few details in the email addresses. \n\n\nRetrieve the names and workplaces.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# name and place of work\n\n\nprint\n \nre\n.\nfindall\n(\nr\n'''\n\n\n    \\b[-\\w]*, # Find a word boundary, 1+ hyphens or characters, and a comma\n\n\n    \\s  # Find 1 whitespace\n\n\n    [-\\w ]+ # 1+ hyphens and characters and explicit spaces\n\n\n    [^\\t\\n] # Ignore tabs and newlines\n\n\n'''\n,\n \ndata\n,\n \nre\n.\nX\n)\n\n\n\n\n\n\n\nResults.\n\n\n1\n['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', 'Enchanter, Killer Rabbit Cave', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Example, Example Co.', 'Obama, Barack', 'President, United States of America', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic Empire']\n\n\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\nre.VERBOSE|re.I\n, more readable, introduce whitespaces or comments.\n\n\nre.X\n.\n\n\n\n\n\n\n\n\n7, Groups \u2013 Subdivided Search\n\u00b6\n\n\n\n\nlast and first names.\n\n\nemails.\n\n\nphone numbers.\n\n\njob and workplaces.\n\n\nTwitter accounts.\n\n\netc\u2026\n\n\n\n\nFor that, we need parentheses.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# retrieve groups...\n\n\nprint\n \nre\n.\nfindall\n(\nr\n'''\n\n\n    ([-\\w ]+,\\s[-\\w ]+)\\t # last and first names\n\n\n    ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails\n\n\n    (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})\\t # phone numbers\n\n\n    ([\\w\\s]+,\\s[\\w\\s]+)\\t # job and work place\n\n\n    (@[\\w\\d]+)$ # Twitter account\n\n\n'''\n,\n \ndata\n,\n \nre\n.\nX\n)\n\n\n\n\n\n\n\nResults (a tupple).\n\n\n1\n[('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine', '@ryancarson'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire', '@darthvader')]\n\n\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nOn the other hand, there are some details missing. We need to make the code more universal for the first and last names. The phone number should be optional, tabs are optional, without Twitter accounts, and tabs should become a new line instead.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# retrieve groups...\n\n\nprint\n \nre\n.\nfindall\n(\nr\n'''\n\n\n    ^([-\\w ]*,\\s[-\\w ]+)\\t # last and first names CHANGE\n\n\n    ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails\n\n\n    (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t # phone numbers CHANGE\n\n\n    ([\\w\\s]+,\\s[\\w\\s.]+)\\t? # job and work place CHANGE\n\n\n    (@[\\w\\d]+)?$ # Twitter account CHANGE\n\n\n'''\n,\n \ndata\n,\n \nre\n.\nX\n|\nre\n.\nMULTILINE\n)\n\n\n\n\n\n\n\nResults (a tupple). More.\n\n\n1\n[('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('McFarland, Arthur', 'arty@submarine.com', '(555) 555-5555', 'Teacher, Submarine', ''), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine\\t', '@ryancarson'), ('Exampleson, Exampleme', 'me@example.com', '555-555-5552', 'Example, Example Co.\\t', '@exemple'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America\\t', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine\\t', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire\\t', '@darthvader')]\n\n\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nTurn the results into a \ndictionary\n with \u2018patterns\u2019 or \nP<...>\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# build a dictionary CHANGE ALL\n\n\nline\n \n=\n \nre\n.\nsearch\n(\nr\n'''\n\n\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n\n\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n\n\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n\n\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n\n\n    (?P<twitter>@[\\w\\d]+)?$\n\n\n'''\n,\n \ndata\n,\n \nre\n.\nX\n|\nre\n.\nMULTILINE\n)\n\n\n\nprint\n \n\"print line...\"\n\n\nprint\n \nline\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"print line.group()...\"\n\n\nprint\n \nline\n.\ngroup\n()\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"print line.groupdict()...\"\n\n\nprint\n \nline\n.\ngroupdict\n()\n\n\n\n\n\n\n\nResults (a tupple). Say we remove the first line in the data\u2026\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nprint line...\n<_sre.SRE_Match object at 0x00000000021DDDD8>\n=========================\nprint line.group()...\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\n=========================\nprint line.groupdict()...\n{'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}\n\n\n\n\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\nre.VERBOSE|re.I\n.\n\n\nre.X\n.\n\n\nre.X|re.MULTILINE\n or \nre.X|re.M\n.\n\n\n\n\n\n\n\n\n8, Compile & Build Dictionaries \u2013 Operationalized Search\n\u00b6\n\n\nCompile a pattern into an object. Replace \nfindall\n or \nsearch\n with \ncompile\n. Remove \ndata\n to make a generic function to process any data.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# build a dictionary CHANGE\n\n\nline\n \n=\n \nre\n.\ncompile\n(\nr\n'''\n\n\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n\n\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n\n\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n\n\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n\n\n    (?P<twitter>@[\\w\\d]+)?$\n\n\n'''\n,\n \nre\n.\nX\n|\nre\n.\nMULTILINE\n)\n\n\n\nprint\n \nre\n.\nsearch\n(\nline\n,\n \ndata\n)\n.\ngroupdict\n()\n \n# CHANGE\n\n\n\n\n\n\n\nResults (a tupple). Say we remove the first line in the data\u2026\n\n\n1\n{'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}\n\n\n\n\n\n\nAlternatively.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# build a dictionary CHANGE\n\n\nline\n \n=\n \nre\n.\ncompile\n(\nr\n'''\n\n\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n\n\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n\n\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n\n\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n\n\n    (?P<twitter>@[\\w\\d]+)?$\n\n\n'''\n,\n \nre\n.\nX\n|\nre\n.\nMULTILINE\n)\n\n\n\nprint\n \nline\n.\nsearch\n(\ndata\n)\n.\ngroupdict\n()\n \n# CHANGE\n\n\n\n\n\n\n\nCompiling not only does it make the script universal (ready for any data), but it also make the execution faster. It becomes easier to compile the script into an executable.\n\n\nWe want all the lines, but a specific group (say \u2018names\u2019).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# build a dictionary\n\n\nline\n \n=\n \nre\n.\ncompile\n(\nr\n'''\n\n\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n\n\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n\n\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n\n\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n\n\n    (?P<twitter>@[\\w\\d]+)?$\n\n\n'''\n,\n \nre\n.\nX\n|\nre\n.\nMULTILINE\n)\n\n\n\nfor\n \nmatch\n \nin\n \nline\n.\nfinditer\n(\ndata\n):\n \n# CHANGE\n\n    \nprint\n \nmatch\n.\ngroup\n(\n'name'\n)\n\n\n\n\n\n\n\nResults (a tupple).\n\n\n1\n2\n3\n4\n5\n6\n7\nLiff, Kenneth\nMcFarland, Arthur\nCarson, Ryan\nExampleson, Exampleme\nObama, Barack\nChalks, Andrew\nVader, Darth\n\n\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nCreate sub-patterns and extract specific groups.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nimport\n \nre\n\n\n\n# read the file\n\n\nname_file\n \n=\n \nopen\n(\n\"names.txt\"\n)\n\n\ndata\n \n=\n \nname_file\n.\nread\n()\n\n\n\n# data is now in memory\n\n\nname_file\n.\nclose\n()\n\n\n\n# build a dictionary\n\n\nline\n \n=\n \nre\n.\ncompile\n(\nr\n'''\n\n\n    ^(?P<name>(?P<last>[-\\w ]*),\\s(?P<first>[-\\w ]+))\\t # CHANGE\n\n\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n\n\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n\n\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n\n\n    (?P<twitter>@[\\w\\d]+)?$\n\n\n'''\n,\n \nre\n.\nX\n|\nre\n.\nMULTILINE\n)\n\n\n\nfor\n \nmatch\n \nin\n \nline\n.\nfinditer\n(\ndata\n):\n\n    \nprint\n \n'{first} {last} <{email}>'\n.\nformat\n(\n**\nmatch\n.\ngroupdict\n())\n\n\n\n\n\n\n\nResults\n\n\n1\n2\n3\n4\n5\n6\n7\nKenneth Liff <kenneth@submarine.com>\nArthur McFarland <arty@submarine.com>\nRyan Carson <ryan@submarine.com>\nExampleme Exampleson <me@example.com>\nBarack Obama <president.44@us.gov>\nAndrew Chalks <andrew@submarine.com>\nDarth Vader <darth-vader@empire.gov>\n\n\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\nre.VERBOSE|re.I\n.\n\n\nre.X\n.\n\n\nre.X|re.MULTILINE\n or \nre.X|re.M\n.\n\n\n\n\n\n\ncompile\n.\n\n\ngroupdict\n.\n\n\nline.finditer\n.\n\n\nmatch.group\n.\n\n\nmatch.groupdict\n.",
            "title": "Regular Expressions (regex)"
        },
        {
            "location": "/Regex/#2-match-search-one-expression-one-search",
            "text": "First, we have a text file called names.txt.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 Liff, Kenneth   kenneth@submarine.com   (555) 555-5555  Teacher, Submarine  @kennethliff\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\nArthur, King    king_arthur@camelot.co.uk   King, Camelot\n\u00d6sterberg, Gustav   governor@norrbotten.co.se   Governor, Norrbotten    @gustata\n, Tim   tim@killerrabbit.com    Enchanter, Killer Rabbit Cave\nCarson, Ryan    ryan@submarine.com  (555) 555-5543  CEO, Submarine  @ryancarson\nDoctor  The doctor+companion@tardis.co.uk   Time Lord, Gallifrey\nExampleson, Exampleme   me@example.com  555-555-5552    Example, Example Co.    @exemple\nObama, Barack   president.44@us.gov 555 555-5551    President, United States of America @potus44\nChalks, Andrew  andrew@submarine.com    (555) 555-5553  Teacher, Submarine  @chalkers\nVader, Darth    darth-vader@empire.gov  (555) 555-4444  Sith lord, Galactic Empire  @darthvader   Second, we want to process the file: extract strings.   We could use  re.match , but the function is picky.  re.search  is more forgiving in terms of precision. In both cases, the function should return the first match it finds, then stop.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # print what is in memory  print   re . search ( r 'McFarland' ,   data ) . group ()   # r for raw string, no need for \\  print   re . search ( r 'Arthur' ,   data ) . group ()   # search in the strings    Results (in Windows).  1\n2 <_sre.SRE_Match object at 0x00000000021DB510>\n<_sre.SRE_Match object at 0x00000000021DB510>   Results may vary in UNIX-type OS. In Linux, we get.  1\n2 <_sre.SRE_Match object; span=(0, 8), match='McFarland'>\n<_sre.SRE_Match object; span=(10, 15), match='Arthur'>   Change the script and rerun it.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # print what is in memory  print   re . search ( r 'McFarland' ,   data ) . group ()   # CHANGE  print   re . search ( r 'Arthur' ,   data ) . group ()   # CHANGE    Results.  1\n2 McFarland\nArthur   Alternatively.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # print what is in memory  last_name   =   r 'McFarland'  first_name   =   r 'Arthur'  print   re . search ( last_name ,   data ) . group ()   # CHANGE  print   re . search ( first_name ,   data ) . group ()   # CHANGE",
            "title": "2, match &amp; search -- One Expression, One Search"
        },
        {
            "location": "/Regex/#recap",
            "text": "match .  search .",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#3-escape-characters-comprenhensive-search",
            "text": "\\w , match any Unicode word character.  \\W , match anything that isn\u2019t a Unicode word character.  \\s , any whitespace.  \\S , not.  \\d , any number 0-9.  \\D , not.  \\b , boundaries or the edges of a word.  \\B , not.   Try.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  print   re . match ( r '\\w, \\w' ,   data )   # CHANGE    Results.  1 None   We get  None  because of  re.match . Instead, try.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # catch phone numbers  print   re . search ( r '\\d\\d\\d-\\d\\d\\d\\d' ,   data ) . group ()   # CHANGE    Results.  1 555-5555   Improve the code.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # catch complete phone numbers  print   re . search ( r '\\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d' ,   data ) . group ()   # CHANGE    Results.  1 (555) 555-5555",
            "title": "3, Escape Characters -- Comprenhensive Search"
        },
        {
            "location": "/Regex/#recap_1",
            "text": "match .  search .  Escape characters (see above).",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#4-repetitions-power-search",
            "text": "{3} , repeat 3 times.  {,3} , repeat 0 to 3 times.  {3,} , repeat 3 or more times.  {3, 5} , repeat 3, 4 or 5 times.  ? , repeat 0 or once.  * , repeat at least 0 times (no upper bound).  + , repeat at least once (no upper bound).   Catch a name.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # catch a name  print   re . search ( r '\\w+, \\w+' ,   data ) . group ()   # CHANGE    Results.  1 Liff, Kenneth   Catch a phone number.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # catch a complete phone numbers  print   re . search ( r '\\(\\d{3}\\) \\d{3}-\\d{4}' ,   data ) . group ()   # CHANGE    Results.  1 (555) 555-5555   Catch multiple phone numbers.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # more universal way (parentheses, hyphen, space become optional)  # on multiple lines!  print   re . findall ( r '\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4}' ,   data )   # CHANGE    Results.  1 ['(555) 555-5555', '(555) 555-5555', '(555) 555-5543', '555-555-5552', '555 555-5551', '(555) 555-5553', '(555) 555-4444']   Catch multiple names.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # universal way for names  print   re . findall ( r '\\w*, \\w+' ,   data )    # CHANGE: findall    Results.  1 ['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', ', Tim', 'Enchanter, Killer', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Obama, Barack', 'President, United', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic']",
            "title": "4, Repetitions -- Power Search"
        },
        {
            "location": "/Regex/#recap_2",
            "text": "match .  search .  Escape characters (previous section).  Repetitions (see above).  findall .",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#5-sets-target-search",
            "text": "Catch patterns. We only need unique characters even when a word contains repetitive characters.   [aple] , search for \u2018apple\u2019.  [a-z] , search for any lowercase letters.  [^2] , search for anything that is not 2.  . , stands for any possible character.   For finding email addresses, search better \u2018cures\u2019 on email adresses. Search for email address regex or email address regular expressions on Stack Overflow, Quora, etc.  We can also try.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # find emails  print   re . findall ( r '[-\\w\\d+.]+@[-\\w\\d.]+' ,   data )   # CHANGE    Results.  1 ['kenneth@submarine.com', 'arty@submarine.com', 'king_arthur@camelot.co.uk', 'governor@norrbotten.co.se', 'tim@killerrabbit.com', 'ryan@submarine.com', 'doctor+companion@tardis.co.uk', 'me@example.com', 'president.44@us.gov', 'andrew@submarine.com', 'darth-vader@empire.gov']   Retrieve \u2018submarine\u2019. All characters are unique. The set should be \u2018submarine\u2019.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # set [submarine] should catch 'submarine'  # add word boundaries, at least once, ignore lower or upper cases  print   re . findall ( r '\\b[submarine]+\\b' ,   data ,   re . IGNORECASE )   # CHANGE    Results.  1 ['submarine', 'Submarine', 'submarine', 'Submarine', 'se', 'submarine', 'Submarine', 'me', 'us', 'submarine', 'Submarine']   However, we also collect shorter strings (\u2018se\u2019, \u2018me\u2019, \u2018us\u2019, \u2018Maria\u2019) with characters from [submarine]. If we wanted to limit the search to \u2018submarine\u2019 only.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # always 9 letters  print   re . findall ( r '\\b[submarine]{9}\\b' ,   data ,   re . IGNORECASE )   # CHANGE    Results.  1 ['submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine']",
            "title": "5, Sets -- Target Search"
        },
        {
            "location": "/Regex/#recap_3",
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#6-boundaries-smart-search",
            "text": "''' , add a multiline string.  \\b@ , word boundary  @ .  \\b , word boundary  .  ^ , ignore.  \\t , tab character.  . , any character.   Find emails with word boundaries, spaces, words, explicit spaces (without using VERBOSE!!!), at least once for any number of characters, ignore tabs, and ignore newlines.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # multiline strings  print   re . findall ( r '''      \\b@[-\\w\\d.]* # First a word boundary, an @, and then any number of characters      [^gov\\t] # Ignore 1+ instances of the letters 'g', 'o' or 'v' and a tab      \\b # Another word boundary  ''' ,   data ,   re . VERBOSE | re . I )    Results.  1 ['@submarine.com', '@submarine.com', '@camelot.co.uk', '@norrbotten.co.se', '@killerrabbit.com', '@submarine.com', '@tardis.co.uk', '@example.com', '@us.', '@submarine.com', '@empire.']   We left off a few details in the email addresses.   Retrieve the names and workplaces.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # name and place of work  print   re . findall ( r '''      \\b[-\\w]*, # Find a word boundary, 1+ hyphens or characters, and a comma      \\s  # Find 1 whitespace      [-\\w ]+ # 1+ hyphens and characters and explicit spaces      [^\\t\\n] # Ignore tabs and newlines  ''' ,   data ,   re . X )    Results.  1 ['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', 'Enchanter, Killer Rabbit Cave', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Example, Example Co.', 'Obama, Barack', 'President, United States of America', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic Empire']   The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.",
            "title": "6, Boundaries -- Smart Search"
        },
        {
            "location": "/Regex/#recap_4",
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .  re.VERBOSE|re.I , more readable, introduce whitespaces or comments.  re.X .",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#7-groups-subdivided-search",
            "text": "last and first names.  emails.  phone numbers.  job and workplaces.  Twitter accounts.  etc\u2026   For that, we need parentheses.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # retrieve groups...  print   re . findall ( r '''      ([-\\w ]+,\\s[-\\w ]+)\\t # last and first names      ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails      (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})\\t # phone numbers      ([\\w\\s]+,\\s[\\w\\s]+)\\t # job and work place      (@[\\w\\d]+)$ # Twitter account  ''' ,   data ,   re . X )    Results (a tupple).  1 [('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine', '@ryancarson'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire', '@darthvader')]   The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.  On the other hand, there are some details missing. We need to make the code more universal for the first and last names. The phone number should be optional, tabs are optional, without Twitter accounts, and tabs should become a new line instead.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # retrieve groups...  print   re . findall ( r '''      ^([-\\w ]*,\\s[-\\w ]+)\\t # last and first names CHANGE      ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails      (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t # phone numbers CHANGE      ([\\w\\s]+,\\s[\\w\\s.]+)\\t? # job and work place CHANGE      (@[\\w\\d]+)?$ # Twitter account CHANGE  ''' ,   data ,   re . X | re . MULTILINE )    Results (a tupple). More.  1 [('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('McFarland, Arthur', 'arty@submarine.com', '(555) 555-5555', 'Teacher, Submarine', ''), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine\\t', '@ryancarson'), ('Exampleson, Exampleme', 'me@example.com', '555-555-5552', 'Example, Example Co.\\t', '@exemple'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America\\t', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine\\t', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire\\t', '@darthvader')]   The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.  Turn the results into a  dictionary  with \u2018patterns\u2019 or  P<...> .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # build a dictionary CHANGE ALL  line   =   re . search ( r '''      ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t      (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t      (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t      (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?      (?P<twitter>@[\\w\\d]+)?$  ''' ,   data ,   re . X | re . MULTILINE )  print   \"print line...\"  print   line  print   \"=\"   *   25  print   \"print line.group()...\"  print   line . group ()  print   \"=\"   *   25  print   \"print line.groupdict()...\"  print   line . groupdict ()    Results (a tupple). Say we remove the first line in the data\u2026  1\n2\n3\n4\n5\n6\n7\n8 print line...\n<_sre.SRE_Match object at 0x00000000021DDDD8>\n=========================\nprint line.group()...\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\n=========================\nprint line.groupdict()...\n{'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}",
            "title": "7, Groups -- Subdivided Search"
        },
        {
            "location": "/Regex/#recap_5",
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .  re.VERBOSE|re.I .  re.X .  re.X|re.MULTILINE  or  re.X|re.M .",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#8-compile-build-dictionaries-operationalized-search",
            "text": "Compile a pattern into an object. Replace  findall  or  search  with  compile . Remove  data  to make a generic function to process any data.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # build a dictionary CHANGE  line   =   re . compile ( r '''      ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t      (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t      (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t      (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?      (?P<twitter>@[\\w\\d]+)?$  ''' ,   re . X | re . MULTILINE )  print   re . search ( line ,   data ) . groupdict ()   # CHANGE    Results (a tupple). Say we remove the first line in the data\u2026  1 {'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}   Alternatively.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # build a dictionary CHANGE  line   =   re . compile ( r '''      ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t      (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t      (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t      (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?      (?P<twitter>@[\\w\\d]+)?$  ''' ,   re . X | re . MULTILINE )  print   line . search ( data ) . groupdict ()   # CHANGE    Compiling not only does it make the script universal (ready for any data), but it also make the execution faster. It becomes easier to compile the script into an executable.  We want all the lines, but a specific group (say \u2018names\u2019).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # build a dictionary  line   =   re . compile ( r '''      ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t      (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t      (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t      (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?      (?P<twitter>@[\\w\\d]+)?$  ''' ,   re . X | re . MULTILINE )  for   match   in   line . finditer ( data ):   # CHANGE \n     print   match . group ( 'name' )    Results (a tupple).  1\n2\n3\n4\n5\n6\n7 Liff, Kenneth\nMcFarland, Arthur\nCarson, Ryan\nExampleson, Exampleme\nObama, Barack\nChalks, Andrew\nVader, Darth   The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.  Create sub-patterns and extract specific groups.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 import   re  # read the file  name_file   =   open ( \"names.txt\" )  data   =   name_file . read ()  # data is now in memory  name_file . close ()  # build a dictionary  line   =   re . compile ( r '''      ^(?P<name>(?P<last>[-\\w ]*),\\s(?P<first>[-\\w ]+))\\t # CHANGE      (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t      (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t      (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?      (?P<twitter>@[\\w\\d]+)?$  ''' ,   re . X | re . MULTILINE )  for   match   in   line . finditer ( data ): \n     print   '{first} {last} <{email}>' . format ( ** match . groupdict ())    Results  1\n2\n3\n4\n5\n6\n7 Kenneth Liff <kenneth@submarine.com>\nArthur McFarland <arty@submarine.com>\nRyan Carson <ryan@submarine.com>\nExampleme Exampleson <me@example.com>\nBarack Obama <president.44@us.gov>\nAndrew Chalks <andrew@submarine.com>\nDarth Vader <darth-vader@empire.gov>   The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.",
            "title": "8, Compile &amp; Build Dictionaries -- Operationalized Search"
        },
        {
            "location": "/Regex/#recap_6",
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .  re.VERBOSE|re.I .  re.X .  re.X|re.MULTILINE  or  re.X|re.M .    compile .  groupdict .  line.finditer .  match.group .  match.groupdict .",
            "title": "Recap:"
        },
        {
            "location": "/Databases/",
            "text": "CONTENT\n\n\n1, SQLite3\n\n\n2, SQLite3 CLI\n\n\n3, SQL Database GUI, Administration, and Management Tools\n\n\n4, Spreadsheet Data and SQLite\n\n\n5, R and Python with SQL\n\n\n6, The Chinook SQLite Sample Database\n\n\n7, Using a Python ORM: peewee\n\n\nInstall peewee\n\n\nCreate a database with a script\n\n\nCreate, read, update, and delete (CRUD)\n\n\nA diary app \u2013 The skeleton (empty classes and functions)\n\n\nA diary app \u2013 Initialize\n\n\nA diary app \u2013 Create a menu\n\n\nA diary app \u2013 Data entry\n\n\nA diary app \u2013 Search and view entries\n\n\nA diary app \u2013 Delete entries\n\n\nA diary app \u2013 Finalize and polish up\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\nAlthough we work with SQLite, most concepts are applicable to MySQL and PostgreSQL.\n\n\n\n\n1, SQLite3\n\u00b6\n\n\nFollow the tutorial on \nTutorialPoint\n. Especially the \nQuick Guide\n for installation, basic commands, syntax, comments, SQL statement, data type, affinity type, boolean, date & time, creating a database, a table, dropping a table, querying, operators, expressions, and clauses. Each topic has also a dedicated section such as unions, joins, truncated table, etc.\n\n\n\n\nInstall.\n\n\nDownload from the \nSQLite website\n.\n\n\nFollow the Quick Guide (or find instruction online).\n\n\nOn Windows, databases are located on C:\\sqlite.\n\n\nOn Linux, SQLite is in the root directory(/usr/lib/\u2026), but databases can be stored in the Personal folder (or in a directory of choice; for example, in a new subdirectory under Documents).\n\n\n\n\n\n\n\n\n2, SQLite3 CLI\n\u00b6\n\n\nBasics\n\n\n\n\nIn the shell/bash:\n\n\nsqlite3 test.db\n, create a database/open the database (show the prompt); the database is located in SQLite\u2019s directory.\n\n\n\n\n\n\nBasic commands inside a database.\n\n\n.help\n.\n\n\n.databases\n, show all databases.\n\n\ncreate table first (a int, b string);\n, create a table with two fields.\n\n\n.schema\n, show the last commands.\n\n\n.tables\n, show all tables in the database.\n\n\ninsert into first (a, b) values (1, \"hello\");\n, load the table.\n\n\nselect * from first;\n, extract all values from the table.\n\n\n.quit\n or \n.exit\n.\n\n\ndrop table first;\n, delete a table (first).\n\n\nDelete a database by deleting the database file in the directory.\n\n\n\n\n\n\nIntermediate commands.\n\n\n.mode\n \ninsert\n, change the view (insertions to build the database).\n\n\n.dump\n, dump data on screen.\n\n\n.output\n \n.\n\\\nDocuments\n\\\nsqlite3Files.sql\n, create a folder in a file (Windows).\n\n\n.output\n \n.\n/\nDocuments\n/\nsqlite3Files.sql\n, create a folder in a file (UNIX-based).\n\n\n.dump\n, dump data into the above. VERY USEFUL for recreating a database/table.\n\n\n\n\n\n\n.output\n \nstdout\n, to the screen.\n\n\n.mode\n \ncolumn\n, change the view (flat table with fixed width).\n\n        - \n.width\n \n15\n \n20\n, define the width by column.\n\n\n.output\n \n.\n/\nDocuments\n/\nsqlite3Files\n/\ntable.sql\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output\n \nstdout\n, dump the data.\n\n\n\n\n\n\n.mode\n \nline\n, change the view (long list without commas).\n\n\nIdem.\n\n\n\n\n\n\n.mode\n \nhtml\n, change the view (html formats ready to be dumbed).\n\n\n.output\n \n.\n/\nDocuments\n/\nsqlite3Files\n/\ntable.html\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output\n \nstdout\n, dump the data.\n\n\n\n\n\n\n.mode\n \ntabs\n, change the view (flat table separated by tabs).\n\n\n.output\n \n.\n/\nDocuments\n/\nsqlite3Files\n/\ntable.tsv\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output\n \nstdout\n, dump the data.\n\n\n\n\n\n\n.mode\n \ncsv\n, change the view (flat table separated by commas or semi-colons).\n\n\n.separator\n \n;\n, change the separator.\n\n\n.output\n \n.\n/\nDocuments\n/\nsqlite3Files\n/\ntable.csv\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output\n \nstdout\n, dump the data.\n\n\n\n\n\n\n.mode\n \ntcs\n, change the view (flat table with double-quotes).\n\n\n.headers\n \non\n, show the headers.\n\n\n.show\n, show the (above) parameters (and change them).\n\n\n.prompt\n \n'\nsqlite3\n>\n \n'\n, change the prompt.\n\n\n.read\n \n<\npath\n>\n, repopulate the database with the above.\n\n\n\n\n\n\n\n\nAdvanced\n\n\nThere are plenty of resources about SQLite: books, online documents, online tutorials, etc. We can learn how to:\n\n\n\n\nBuild a database, tables.\n\n\nQuery a database, create, alter, select, order by, limit, offset, update, delete, and other functions.\n\n\nJoins and Triggers.\n\n\nAnd more.\n\n\n\n\n3, SQL Database GUI, Administration, and Management Tools\n\u00b6\n\n\nWith database managers, we can create scripts to automate operations.\n\n\n\n\nSQLite is free, open source, and cross-platform.\n\n\nDB Browser for SQLite is free, for all OS.\n\n\nAdd-ons to browsers such as the SQLite Managers for Firefox.\n\n\n\n\n\n\nMySQL is free, open source, and cross-platform.\n\n\nMySQL Workbench is free, for all OS.\n\n\nDatabase Design & Modeling, SQL Development (replacing MySQL Query Browser), and Database Administration (replacing MySQL Administrator). MySQL features: SQL editor, SQL code completion, SQL code formatter, SQL Syntax highlighting, server start/stop, server status/health, server logs, server/replication configuration, user management, session management, and much more.\n\n\n\n\n\n\nThere are web-based managers.\n\n\n\n\n\n\nPostgreSQL is free, open source, also cross-platform.\n\n\npgAdminIII.\n\n\nThere are web-based managers.\n\n\n\n\n\n\nSQL in general.\n\n\nDB Browser is free, for all OS.\n\n\nphpMyAdmin is free, for all OS.\n\n\nToad is free, for Windows.\n\n\nHeidiSQL is free, for Windows.\n\n\nThere are web-based managers.\n\n\n\n\n\n\n\n\n4, Spreadsheet Data and SQLite\n\u00b6\n\n\nImport from the spreadsheet\n\n\n\n\nPull data from the spreadsheet into SQLite via an add-on or a database manager (automated procedure).\n\n\nOr export data (save as) from the spreadsheet into a .csv file.\n\n\nImport the .csv into SQLite.\n\n\nIn can be done with a manager such as DB Browser for SQLite.\n\n\nIt can be done with a web-based manager such as SQLite Managers for Firefox.\n\n\nAdjust the general and field parameters.\n\n\nCreate a primary key.\n\n\nPopulate a table with the .csv file.\n\n\n\n\n\n\n\n\nImport into a spreadsheet\n\n\n\n\nDump the data from the CLI or a database manager into a .csv file.\n\n\nOr connect the spreadsheet with SQLite with built-in functionalities or add-ons to pull data into the database.\n\n\nThere are add-ons that can execute SQL queries in a cell and dump the results in other cells: Excellic, Microsoft SQL Server Data Mining, SaveToDB, Database Connection Wizard, Publish Wizard, etc.\n\n\n\n\n5, R and Python with SQL\n\u00b6\n\n\n\n\nR can import data from / export data to relational databases using specialized packages such as \nDBI\n, \nRSQLite\n, \nRMySQL\n, \nRPostgreSQL\n, etc.\n\n\nPython libraries are: \npython-sql\n, \nsqlalchemy\n, \nrecords\n, \npeewee\n, etc.\n\n\npip install <library>\n.    \n\n\n\n\n\n\n\n\n6, The Chinook SQLite Sample Database\n\u00b6\n\n\nLearn, practice, and test commands with a fake database. \n\n\n\n\nDownload the \ndatabase\n.\n\n\nConsult the \ndiagram\n.\n\n\nWe can also download the database and diagrams.\n\n\n\n\n\n\n\n\n7, Using a Python ORM: \npeewee\n\u00b6\n\n\nInstall \npeewee\n\u00b6\n\n\nWe can run queries with SQL or use a Python wrapper: \npeewee\n. It is a lightweight Object Relational Mapper (ORM). \npeewee\n works with SQLite, MySQL, and PostgreSQL.\n\n\nInstall it with pip.\n\n\nWe can manage our databases with Python scripts.\n\n\nCreate a database with a script\n\u00b6\n\n\nIn \npeewee\n, models are Python classes. Everything in the database is an object: tables, rows, columns, entries, etc.\n\n\nWe create a new database, \nstudents.db\n, with Python. We connect to the database and create two fields with their SQL parameters. We run the script in the terminal.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\students.db'\n)\n\n\n\n\nclass\n \nStudent\n(\nModel\n):\n \n# use a singular name convention\n\n    \nusername\n \n=\n \nCharField\n(\nmax_length\n=\n255\n,\n \nunique\n=\nTrue\n)\n \n# varchar, unique value, no duplicates\n\n    \npoints\n \n=\n \nIntegerField\n(\ndefault\n=\n0\n)\n \n# if not supplies, it inputs 0 by default\n\n\n    \nclass\n \nMeta\n:\n \n# a class inside a class (meta-class)\n\n        \ndatabase\n \n=\n \ndb\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n \n# for running the script directly, not import it\n\n    \ndb\n.\nconnect\n()\n\n    \ndb\n.\ncreate_tables\n([\nStudent\n],\n \nsafe\n=\nTrue\n)\n \n# safe is a mandatory convention\n\n\n\n\n\n\n\nWe get no result in the terminal: a good sign. Check out the database to see the results.\n\n\nThe script runs on Windows in Python 2. In Python 3, we would need minor adjustments; they are documented along the way. In addition, in UNIX-based OS, we would need two extra lines at the top of the script.\n\n\n1\n2\n#!/usr/bin/env python\n\n\n# -*- coding: utf-8 -*-\n\n\n\n\n\n\n\nOr.\n\n\n1\n2\n#!/usr/bin/env python 3\n\n\n# -*- coding: utf-8 -*-\n\n\n\n\n\n\n\nCreate, read, update, and delete (CRUD)\n\u00b6\n\n\nCreate, read, update, and delete is knows as CRUD; the backbone of ORM. Five useful methods:\n\n\n\n\n.create\n()\n, add a new record to the table.\n\n\n.select\n()\n, pick rows out of the table.\n\n\n.save\n()\n, update an existing row in a table.\n\n\n.get\n()\n, fetch a single record from a table.\n\n\n.delete_instance\n()\n, delete a row from a table.\n\n\n\n\nImprove the script, but avoid the false start\u2026\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\students.db'\n)\n\n\n\n\nclass\n \nStudent\n(\nModel\n):\n\n    \nusername\n \n=\n \nCharField\n(\nmax_length\n=\n255\n,\n \nunique\n=\nTrue\n)\n\n    \npoints\n \n=\n \nIntegerField\n(\ndefault\n=\n0\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \ndatabase\n \n=\n \ndb\n\n\n\n\n# ADD a dictionary\n\n\nstudents\n \n=\n \n[\n\n    \n{\n'username'\n:\n \n'kennethliff'\n,\n\n    \n'points'\n:\n \n4888\n},\n\n    \n{\n'username'\n:\n \n'chalkers'\n,\n\n    \n'points'\n:\n \n11912\n},\n\n    \n{\n'username'\n:\n \n'joykesten2'\n,\n\n    \n'points'\n:\n \n7363\n},\n\n    \n{\n'username'\n:\n \n'craigsrob'\n,\n\n    \n'points'\n:\n \n4079\n},\n\n    \n{\n'username'\n:\n \n'adammcfarland'\n,\n\n    \n'points'\n:\n \n14717\n}\n\n\n]\n    \n\n\n\ndef\n \nadd_students\n():\n \n# ADD a function\n\n    \nfor\n \nstudent\n \nin\n \nstudents\n:\n\n        \nStudent\n.\ncreate\n(\nusername\n=\nstudent\n[\n'username'\n],\n\n                        \npoints\n=\nstudent\n[\n'points'\n])\n \n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \ndb\n.\nconnect\n()\n\n    \ndb\n.\ncreate_tables\n([\nStudent\n],\n \nsafe\n=\nTrue\n)\n\n    \nadd_students\n()\n \n# ADD\n\n\n\n\n\n\n\nWe can run the script once, but not twice because of the \nunique=True\n in the \nclass\n \nStudent\n(\nModel\n)\n:\n. We get an \nIntegrityError\n in the terminal. \n\n\nWe need to add a \ntry\n block. Take two.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\students.db'\n)\n\n\n\n\nclass\n \nStudent\n(\nModel\n):\n\n    \nusername\n \n=\n \nCharField\n(\nmax_length\n=\n255\n,\n \nunique\n=\nTrue\n)\n\n    \npoints\n \n=\n \nIntegerField\n(\ndefault\n=\n0\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \ndatabase\n \n=\n \ndb\n\n\n\n\nstudents\n \n=\n \n[\n\n    \n{\n'username'\n:\n \n'kennethliff'\n,\n\n    \n'points'\n:\n \n4888\n},\n\n    \n{\n'username'\n:\n \n'chalkers'\n,\n\n    \n'points'\n:\n \n11912\n},\n\n    \n{\n'username'\n:\n \n'joykesten2'\n,\n\n    \n'points'\n:\n \n7363\n},\n\n    \n{\n'username'\n:\n \n'craigsrob'\n,\n\n    \n'points'\n:\n \n4079\n},\n\n    \n{\n'username'\n:\n \n'adammcfarland'\n,\n\n    \n'points'\n:\n \n14717\n}\n\n\n]\n    \n\n\n\ndef\n \nadd_students\n():\n \n# CHANGE the function\n\n    \nfor\n \nstudent\n \nin\n \nstudents\n:\n\n        \ntry\n:\n\n            \nStudent\n.\ncreate\n(\nusername\n=\nstudent\n[\n'username'\n],\n\n                            \npoints\n=\nstudent\n[\n'points'\n])\n\n        \nexcept\n \nIntegrityError\n:\n\n            \nstudent_record\n \n=\n \nStudent\n.\nget\n(\nusername\n=\nstudent\n[\n'username'\n])\n\n            \nstudent_record\n.\npoints\n \n=\n \nstudent\n[\n'points'\n]\n\n            \nstudent_record\n.\nsave\n()\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \ndb\n.\nconnect\n()\n\n    \ndb\n.\ncreate_tables\n([\nStudent\n],\n \nsafe\n=\nTrue\n)\n\n    \nadd_students\n()\n\n\n\n\n\n\n\nWe get no result in the terminal: a good sign. We can run the script at will. We can check out the results in the database.\n\n\nAdd a function to select the top students, order them in descending order (from high to low), and retrieve them.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\students.db'\n)\n\n\n\n\nclass\n \nStudent\n(\nModel\n):\n\n    \nusername\n \n=\n \nCharField\n(\nmax_length\n=\n255\n,\n \nunique\n=\nTrue\n)\n\n    \npoints\n \n=\n \nIntegerField\n(\ndefault\n=\n0\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \ndatabase\n \n=\n \ndb\n\n\n\n\nstudents\n \n=\n \n[\n\n    \n{\n'username'\n:\n \n'kennethliff'\n,\n\n    \n'points'\n:\n \n4888\n},\n\n    \n{\n'username'\n:\n \n'chalkers'\n,\n\n    \n'points'\n:\n \n11912\n},\n\n    \n{\n'username'\n:\n \n'joykesten2'\n,\n\n    \n'points'\n:\n \n7363\n},\n\n    \n{\n'username'\n:\n \n'craigsrob'\n,\n\n    \n'points'\n:\n \n4079\n},\n\n    \n{\n'username'\n:\n \n'adammcfarland'\n,\n\n    \n'points'\n:\n \n14717\n}\n\n\n]\n    \n\n\n\ndef\n \nadd_students\n():\n\n    \nfor\n \nstudent\n \nin\n \nstudents\n:\n\n        \ntry\n:\n\n            \nStudent\n.\ncreate\n(\nusername\n=\nstudent\n[\n'username'\n],\n\n                            \npoints\n=\nstudent\n[\n'points'\n])\n\n        \nexcept\n \nIntegrityError\n:\n\n            \nstudent_record\n \n=\n \nStudent\n.\nget\n(\nusername\n=\nstudent\n[\n'username'\n])\n\n            \nstudent_record\n.\npoints\n \n=\n \nstudent\n[\n'points'\n]\n\n            \nstudent_record\n.\nsave\n()\n\n\n\n\ndef\n \ntop_student\n():\n\n    \nstudent\n \n=\n \nStudent\n.\nselect\n()\n.\norder_by\n(\nStudent\n.\npoints\n.\ndesc\n())\n.\nget\n()\n \n# ADD\n\n    \nreturn\n \nstudent\n            \n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \ndb\n.\nconnect\n()\n\n    \ndb\n.\ncreate_tables\n([\nStudent\n],\n \nsafe\n=\nTrue\n)\n\n    \nadd_students\n()\n\n    \nprint\n(\n\"Our top student right now is: {0.username}.\"\n.\nformat\n(\ntop_student\n()))\n \n# ADD\n\n\n\n\n\n\n\nThis time, we should get a result in the terminal.\n\n\n1\nOur top student right now is: adammcfarland.\n\n\n\n\n\n\nChange the points in the dictionary and rerun the script.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\students.db'\n)\n\n\n\n\nclass\n \nStudent\n(\nModel\n):\n\n    \nusername\n \n=\n \nCharField\n(\nmax_length\n=\n255\n,\n \nunique\n=\nTrue\n)\n\n    \npoints\n \n=\n \nIntegerField\n(\ndefault\n=\n0\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \ndatabase\n \n=\n \ndb\n\n\n\n\nstudents\n \n=\n \n[\n\n    \n{\n'username'\n:\n \n'kennethliff'\n,\n\n    \n'points'\n:\n \n14718\n},\n \n# CHANGE, make it the top student\n\n    \n{\n'username'\n:\n \n'chalkers'\n,\n\n    \n'points'\n:\n \n11912\n},\n\n    \n{\n'username'\n:\n \n'joykesten2'\n,\n\n    \n'points'\n:\n \n7363\n},\n\n    \n{\n'username'\n:\n \n'craigsrob'\n,\n\n    \n'points'\n:\n \n4079\n},\n\n    \n{\n'username'\n:\n \n'adammcfarland'\n,\n\n    \n'points'\n:\n \n14717\n}\n\n\n]\n    \n\n\n\ndef\n \nadd_students\n():\n\n    \nfor\n \nstudent\n \nin\n \nstudents\n:\n\n        \ntry\n:\n\n            \nStudent\n.\ncreate\n(\nusername\n=\nstudent\n[\n'username'\n],\n\n                            \npoints\n=\nstudent\n[\n'points'\n])\n\n        \nexcept\n \nIntegrityError\n:\n\n            \nstudent_record\n \n=\n \nStudent\n.\nget\n(\nusername\n=\nstudent\n[\n'username'\n])\n\n            \nstudent_record\n.\npoints\n \n=\n \nstudent\n[\n'points'\n]\n\n            \nstudent_record\n.\nsave\n()\n\n\n\n\ndef\n \ntop_student\n():\n\n    \nstudent\n \n=\n \nStudent\n.\nselect\n()\n.\norder_by\n(\nStudent\n.\npoints\n.\ndesc\n())\n.\nget\n()\n\n    \nreturn\n \nstudent\n            \n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \ndb\n.\nconnect\n()\n\n    \ndb\n.\ncreate_tables\n([\nStudent\n],\n \nsafe\n=\nTrue\n)\n\n    \nadd_students\n()\n\n    \nprint\n(\n\"Our top student right now is: {0.username}.\"\n.\nformat\n(\ntop_student\n()))\n\n\n\n\n\n\n\nResults in the terminal.\n\n\n1\nOur top student right now is: kennethliff.\n\n\n\n\n\n\nRecap:\n\n\n\n\n.create\n()\n, add a new record to the table.\n\n\n.select\n()\n, pick rows out of the table.\n\n\n.get\n()\n, fetch a single record from a table.\n\n\n\n\nA diary app \u2013 The skeleton (empty classes and functions)\n\u00b6\n\n\nNow, let\u2019s build a diary application using an SQLite database. Such an application can be integrated into a web framework (like Flask) or frozen as an executive file (embedding SQLite). \n\n\nWe want to be able to load data and retrieve them. \n\n\nThe more general use could be a log book: we can write stuff and retrieve it. We can classify the entries and search for a specific word.\n\n\nWe start with a skeleton, bare functions and docstrings.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\diary.db'\n)\n\n\n\n\nclass\n \nEntry\n(\nModel\n):\n\n    \n# content\n\n    \n# timestamp\n\n\n    \nclass\n \nMeta\n:\n\n        \ndatabase\n \n=\n \ndb\n\n\n\n\ndef\n \nmenu_loop\n():\n\n    \n\"\"\"Show the menu.\"\"\"\n\n\n\n\ndef\n \nadd_entry\n():\n\n    \n\"\"\"Add an entry.\"\"\"\n\n\n\n\ndef\n \nview_entries\n():\n\n    \n\"\"\"View previous entries.\"\"\"\n\n\n\n\ndef\n \ndelete_entry\n(\nentry\n):\n\n    \n\"\"\"Delete an entry.\"\"\"\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n \n# for running the script directly, not import it\n\n    \nmenu_loop\n()\n\n\n\n\n\n\n\nA diary app \u2013 Initialize\n\u00b6\n\n\nLet\u2019s add some flesh to the skeleton. Add the the \ndatetime\n library and a new function to initialize the diary.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\nimport\n \ndatetime\n \n# ADD\n\n\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\diary.db'\n)\n\n\n\n\nclass\n \nEntry\n(\nModel\n):\n \n# CHANGE\n\n    \ncontent\n \n=\n \nTextField\n()\n \n# content: TextField ia more flexible, holds any type of data; contrary to CharField, a varchar with a maximum length\n\n    \ntimestamp\n \n=\n \nDateTimeField\n(\ndefault\n=\ndatetime\n.\ndatetime\n.\nnow\n)\n \n# timestamp; now does take parentheses\n\n\n    \nclass\n \nMeta\n:\n\n        \ndatabase\n \n=\n \ndb\n\n\n\n\ndef\n \ninitialize\n():\n \n# ADD\n\n    \n\"\"\"Create the database and the table if they don't exist.\"\"\"\n\n    \ndb\n.\nconnect\n()\n\n    \ndb\n.\ncreate_tables\n([\nEntry\n],\n \nsafe\n=\nTrue\n)\n\n\n\n\ndef\n \nmenu_loop\n():\n\n    \n\"\"\"Show the menu.\"\"\"\n\n\n\n\ndef\n \nadd_entry\n():\n\n    \n\"\"\"Add an entry.\"\"\"\n\n\n\n\ndef\n \nview_entries\n():\n\n    \n\"\"\"View previous entries.\"\"\"\n\n\n\n\ndef\n \ndelete_entry\n(\nentry\n):\n\n    \n\"\"\"Delete an entry.\"\"\"\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n \n# for running the script directly, not import it\n\n    \ninitialize\n()\n \n# INSERT\n\n    \nmenu_loop\n()\n\n\n\n\n\n\n\nWe get no result in the terminal: a good sign. We can check out the results in the db.\n\n\nA diary app \u2013 Create a menu\n\u00b6\n\n\nWe add a menu using a dictionary (we need the \nOrderedDict\n library).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\nfrom\n \ncollections\n \nimport\n \nOrderedDict\n \n# ADD\n\n\nimport\n \ndatetime\n\n\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\diary.db'\n)\n\n\n\n\nclass\n \nEntry\n(\nModel\n):\n\n    \ncontent\n \n=\n \nTextField\n()\n\n    \ntimestamp\n \n=\n \nDateTimeField\n(\ndefault\n=\ndatetime\n.\ndatetime\n.\nnow\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \ndatabase\n \n=\n \ndb\n\n\n\n\ndef\n \ninitialize\n():\n\n    \n\"\"\"Create the database and the table if they don't exist.\"\"\"\n\n    \ndb\n.\nconnect\n()\n\n    \ndb\n.\ncreate_tables\n([\nEntry\n],\n \nsafe\n=\nTrue\n)\n\n\n\n\ndef\n \nmenu_loop\n():\n\n    \n\"\"\"Show the menu.\"\"\"\n\n    \nchoice\n \n=\n \nNone\n \n# new variable with a default value\n\n\n    \nwhile\n \nchoice\n \n!=\n \n'q'\n:\n \n# ADD\n\n        \nprint\n(\n\"Enter 'q' to quit.\"\n)\n \n# starting message\n\n        \nfor\n \nkey\n,\n \nvalue\n \nin\n \nmenu\n.\nitems\n():\n \n# loop through the dictionary\n\n            \nprint\n(\n'{}) {}'\n.\nformat\n(\nkey\n,\n \nvalue\n.\n__doc__\n))\n \n# value from the menu variables furthur down in the script; __doc__ is the docstrings\n\n        \nchoice\n \n=\n \nraw_input\n(\n'Action: '\n)\n.\nlower\n()\n.\nstrip\n()\n \n# lowercase, remove white spaces\n\n\n        \nif\n \nchoice\n \nin\n \nmenu\n:\n \n# check if the selection is in the menu\n\n            \nmenu\n[\nchoice\n]()\n \n# execute the choice\n\n\n\ndef\n \nadd_entry\n():\n\n    \n\"\"\"Add an entry.\"\"\"\n\n\n\n\ndef\n \nview_entries\n():\n\n    \n\"\"\"View previous entries.\"\"\"\n\n\n\n\ndef\n \ndelete_entry\n(\nentry\n):\n\n    \n\"\"\"Delete an entry.\"\"\"\n\n\n\n\nmenu\n \n=\n \nOrderedDict\n([\n \n# ADD tuple\n\n    \n(\n'a'\n,\n \nadd_entry\n),\n\n    \n(\n'v'\n,\n \nview_entries\n),\n\n\n])\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \ninitialize\n()\n\n    \nmenu_loop\n()\n\n\n\n\n\n\n\nThis is coded in Python 2. In Python 3, we would replace \nraw_input\n by \ninput\n.\n\n\nThe result is dynamic. We can input data in the terminal and the script continues to run until we quit with \nq\n. We cannot do much since the functions are still empty (\ndef add_entry():\n and \ndef view_entries():\n). The following is a snapshot.\n\n\n1\n2\n3\n4\nEnter 'q' to quit.\na) Add an entry.\nv) View previous entries.\nActions:\n\n\n\n\n\n\nA diary app \u2013 Data entry\n\u00b6\n\n\nAdd the \nsys\n library. We want to enter data and load the database.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\nfrom\n \ncollections\n \nimport\n \nOrderedDict\n\n\nimport\n \ndatetime\n\n\nimport\n \nsys\n \n# ADD\n\n\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\diary.db'\n)\n\n\n\n\nclass\n \nEntry\n(\nModel\n):\n\n    \ncontent\n \n=\n \nTextField\n()\n\n    \ntimestamp\n \n=\n \nDateTimeField\n(\ndefault\n=\ndatetime\n.\ndatetime\n.\nnow\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \ndatabase\n \n=\n \ndb\n\n\n\n\ndef\n \ninitialize\n():\n\n    \n\"\"\"Create the database and the table if they don't exist.\"\"\"\n\n    \ndb\n.\nconnect\n()\n\n    \ndb\n.\ncreate_tables\n([\nEntry\n],\n \nsafe\n=\nTrue\n)\n\n\n\n\ndef\n \nmenu_loop\n():\n\n    \n\"\"\"Show the menu.\"\"\"\n\n    \nchoice\n \n=\n \nNone\n\n\n    \nwhile\n \nchoice\n \n!=\n \n'q'\n:\n\n        \nprint\n(\n\"Enter 'q' to quit.\"\n)\n\n        \nfor\n \nkey\n,\n \nvalue\n \nin\n \nmenu\n.\nitems\n():\n\n            \nprint\n(\n'{}) {}'\n.\nformat\n(\nkey\n,\n \nvalue\n.\n__doc__\n))\n\n        \nchoice\n \n=\n \nraw_input\n(\n'Action: '\n)\n.\nlower\n()\n.\nstrip\n()\n\n\n        \nif\n \nchoice\n \nin\n \nmenu\n:\n\n            \nmenu\n[\nchoice\n]()\n\n\n\n\ndef\n \nadd_entry\n():\n \n# IMPROVE\n\n    \n\"\"\"Add an entry.\"\"\"\n\n    \nprint\n(\n\"Enter your entry. Press ctrl+z when finished.\"\n)\n\n    \ndata\n \n=\n \nsys\n.\nstdin\n.\nread\n()\n.\nstrip\n()\n\n\n    \nif\n \ndata\n:\n\n        \nif\n \nraw_input\n(\n'Save entry? [Yn] '\n)\n.\nlower\n()\n \n!=\n \n'n'\n:\n\n            \nEntry\n.\ncreate\n(\ncontent\n=\ndata\n)\n\n            \nprint\n(\n\"Saved successfully!\"\n)\n\n\n\n\ndef\n \nview_entries\n():\n\n    \n\"\"\"View previous entries.\"\"\"\n\n\n\n\ndef\n \ndelete_entry\n(\nentry\n):\n\n    \n\"\"\"Delete an entry.\"\"\"\n\n\n\n\nmenu\n \n=\n \nOrderedDict\n([\n\n    \n(\n'a'\n,\n \nadd_entry\n),\n\n    \n(\n'v'\n,\n \nview_entries\n),\n\n\n])\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \ninitialize\n()\n\n    \nmenu_loop\n()\n\n\n\n\n\n\n\nThe result is dynamic.\n\n\nTo the question \nEnter your entry. Press ctrl+d when finished.\n, write \nWorking with databases. I enjoy my day.\n. Press enter, then press ctrl+z, then enter in Windows, ctrl+d in UNIX-based OS (for End-of-File key sequence). Save it (with a \ny\n input). Repeat. This time, do not save it (\nn\n). Check out the results in the database.\n\n\nraw_input\n in Python 2 vs. \ninput\n in Python 3. In Python 2, we can print with \nprint \" \"\n or \nprint(\" \")\n. The later is only possible in Python 3.\n\n\nA diary app \u2013 Search and view entries\n\u00b6\n\n\nWe now want to read the data (query the database). We also want to search throught the entries. In SQL, we would code: \nSELECT * FROM entry WHERE content LIKE '%search_query$' ORDER BY timestamp DESC;\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\nfrom\n \ncollections\n \nimport\n \nOrderedDict\n\n\nimport\n \ndatetime\n\n\nimport\n \nsys\n\n\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\diary.db'\n)\n\n\n\n\nclass\n \nEntry\n(\nModel\n):\n\n    \ncontent\n \n=\n \nTextField\n()\n\n    \ntimestamp\n \n=\n \nDateTimeField\n(\ndefault\n=\ndatetime\n.\ndatetime\n.\nnow\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \ndatabase\n \n=\n \ndb\n\n\n\n\ndef\n \ninitialize\n():\n\n    \n\"\"\"Create the database and the table if they don't exist.\"\"\"\n\n    \ndb\n.\nconnect\n()\n\n    \ndb\n.\ncreate_tables\n([\nEntry\n],\n \nsafe\n=\nTrue\n)\n\n\n\n\ndef\n \nmenu_loop\n():\n\n    \n\"\"\"Show the menu.\"\"\"\n\n    \nchoice\n \n=\n \nNone\n\n\n    \nwhile\n \nchoice\n \n!=\n \n'q'\n:\n\n        \nprint\n(\n\"Enter 'q' to quit.\"\n)\n\n        \nfor\n \nkey\n,\n \nvalue\n \nin\n \nmenu\n.\nitems\n():\n\n            \nprint\n(\n'{}) {}'\n.\nformat\n(\nkey\n,\n \nvalue\n.\n__doc__\n))\n\n        \nchoice\n \n=\n \nraw_input\n(\n'Action: '\n)\n.\nlower\n()\n.\nstrip\n()\n\n\n        \nif\n \nchoice\n \nin\n \nmenu\n:\n\n            \nmenu\n[\nchoice\n]()\n\n\n\n\ndef\n \nadd_entry\n():\n\n    \n\"\"\"Add an entry.\"\"\"\n\n    \nprint\n(\n\"Enter your entry. Press ctrl+z when finished.\"\n)\n\n    \ndata\n \n=\n \nsys\n.\nstdin\n.\nread\n()\n.\nstrip\n()\n\n\n    \nif\n \ndata\n:\n\n        \nif\n \nraw_input\n(\n'Save entry? [Yn] '\n)\n.\nlower\n()\n \n!=\n \n'n'\n:\n\n            \nEntry\n.\ncreate\n(\ncontent\n=\ndata\n)\n\n            \nprint\n(\n\"Saved successfully!\"\n)\n\n\n\n\ndef\n \nview_entries\n(\nsearch_query\n=\nNone\n):\n \n# IMPROVE\n\n    \n\"\"\"View previous entries.\"\"\"\n\n    \nentries\n \n=\n \nEntry\n.\nselect\n()\n.\norder_by\n(\nEntry\n.\ntimestamp\n.\ndesc\n())\n \n# sort them\n\n    \nif\n \nsearch_query\n:\n\n        \nentries\n \n=\n \nentries\n.\nwhere\n(\nEntry\n.\ncontent\n.\ncontains\n(\nsearch_query\n))\n\n\n    \nfor\n \nentry\n \nin\n \nentries\n:\n\n        \ntimestamp\n \n=\n \nentry\n.\ntimestamp\n.\nstrftime\n(\n'%A %B \n%d\n, %Y %I:%M%p'\n)\n \n# day name, month, date, year, hour (12h), minute, am/pm\n\n        \nprint\n(\ntimestamp\n)\n\n        \nprint\n(\n'='\n*\nlen\n(\ntimestamp\n))\n \n# print the number of characters in the timestamp\n\n        \nprint\n(\nentry\n.\ncontent\n)\n\n        \nprint\n(\n'n) next entry'\n)\n\n        \nprint\n(\n'q) return to main menu'\n)\n\n\n        \nnext_action\n \n=\n \nraw_input\n(\n'Action: [Nq] '\n)\n.\nlower\n()\n.\nstrip\n()\n\n        \nif\n \nnext_action\n \n==\n \n'q'\n:\n\n            \nbreak\n\n\n\n\ndef\n \nsearch_entries\n():\n\n    \n\"\"\"Search entries for a string.\"\"\"\n\n    \nview_entries\n(\nraw_input\n(\n'Search query: '\n))\n\n\n\n\ndef\n \ndelete_entry\n(\nentry\n):\n\n    \n\"\"\"Delete an entry.\"\"\"\n\n\n\n\nmenu\n \n=\n \nOrderedDict\n([\n\n    \n(\n'a'\n,\n \nadd_entry\n),\n\n    \n(\n'v'\n,\n \nview_entries\n),\n\n    \n(\n's'\n,\n \nsearch_entries\n),\n \n# ADD\n\n\n])\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \ninitialize\n()\n\n    \nmenu_loop\n()\n\n\n\n\n\n\n\nThe result is dynamic. Try entering stuff, save it. Back to the menu, read the entry. We should get a date, a line of \n=\n and the entry. Quit and go back to the menu. Try search for a word. It should find a single word among all the entry and pull out the entry where the word appears.\n\n\nA diary app \u2013 Delete entries\n\u00b6\n\n\nComplete the last function: \ndef delete_entry(entry):\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\nfrom\n \ncollections\n \nimport\n \nOrderedDict\n\n\nimport\n \ndatetime\n\n\nimport\n \nsys\n\n\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\diary.db'\n)\n\n\n\n\nclass\n \nEntry\n(\nModel\n):\n\n    \ncontent\n \n=\n \nTextField\n()\n\n    \ntimestamp\n \n=\n \nDateTimeField\n(\ndefault\n=\ndatetime\n.\ndatetime\n.\nnow\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \ndatabase\n \n=\n \ndb\n\n\n\n\ndef\n \ninitialize\n():\n\n    \n\"\"\"Create the database and the table if they don't exist.\"\"\"\n\n    \ndb\n.\nconnect\n()\n\n    \ndb\n.\ncreate_tables\n([\nEntry\n],\n \nsafe\n=\nTrue\n)\n\n\n\n\ndef\n \nmenu_loop\n():\n\n    \n\"\"\"Show the menu.\"\"\"\n\n    \nchoice\n \n=\n \nNone\n\n\n    \nwhile\n \nchoice\n \n!=\n \n'q'\n:\n\n        \nprint\n(\n\"Enter 'q' to quit.\"\n)\n\n        \nfor\n \nkey\n,\n \nvalue\n \nin\n \nmenu\n.\nitems\n():\n\n            \nprint\n(\n'{}) {}'\n.\nformat\n(\nkey\n,\n \nvalue\n.\n__doc__\n))\n\n        \nchoice\n \n=\n \nraw_input\n(\n'Action: '\n)\n.\nlower\n()\n.\nstrip\n()\n\n\n        \nif\n \nchoice\n \nin\n \nmenu\n:\n\n            \nmenu\n[\nchoice\n]()\n\n\n\n\ndef\n \nadd_entry\n():\n\n    \n\"\"\"Add an entry.\"\"\"\n\n    \nprint\n(\n\"Enter your entry. Press ctrl+z when finished.\"\n)\n\n    \ndata\n \n=\n \nsys\n.\nstdin\n.\nread\n()\n.\nstrip\n()\n\n\n    \nif\n \ndata\n:\n\n        \nif\n \nraw_input\n(\n'Save entry? [Yn] '\n)\n.\nlower\n()\n \n!=\n \n'n'\n:\n\n            \nEntry\n.\ncreate\n(\ncontent\n=\ndata\n)\n\n            \nprint\n(\n\"Saved successfully!\"\n)\n\n\n\n\ndef\n \nview_entries\n(\nsearch_query\n=\nNone\n):\n\n    \n\"\"\"View previous entries.\"\"\"\n\n    \nentries\n \n=\n \nEntry\n.\nselect\n()\n.\norder_by\n(\nEntry\n.\ntimestamp\n.\ndesc\n())\n\n    \nif\n \nsearch_query\n:\n\n        \nentries\n \n=\n \nentries\n.\nwhere\n(\nEntry\n.\ncontent\n.\ncontains\n(\nsearch_query\n))\n\n\n    \nfor\n \nentry\n \nin\n \nentries\n:\n\n        \ntimestamp\n \n=\n \nentry\n.\ntimestamp\n.\nstrftime\n(\n'%A %B \n%d\n, %Y %I:%M%p'\n)\n\n        \nprint\n(\ntimestamp\n)\n\n        \nprint\n(\n'='\n*\nlen\n(\ntimestamp\n))\n\n        \nprint\n(\nentry\n.\ncontent\n)\n\n        \nprint\n(\n'n) next entry'\n)\n\n        \nprint\n(\n'd) delete entry'\n)\n \n# ADD\n\n        \nprint\n(\n'q) return to main menu'\n)\n\n\n        \nnext_action\n \n=\n \nraw_input\n(\n'Action: [Ndq] '\n)\n.\nlower\n()\n.\nstrip\n()\n\n        \nif\n \nnext_action\n \n==\n \n'q'\n:\n\n            \nbreak\n\n        \nelif\n \nnext_action\n \n==\n \n'd'\n:\n \n# ADD\n\n            \ndelete_entry\n(\nentry\n)\n\n\n\n\ndef\n \nsearch_entries\n():\n\n    \n\"\"\"Search entries for a string.\"\"\"\n\n    \nview_entries\n(\nraw_input\n(\n'Search query: '\n))\n\n\n\n\ndef\n \ndelete_entry\n(\nentry\n):\n \n# IMPROVE\n\n    \n\"\"\"Delete an entry.\"\"\"\n\n    \nif\n \nraw_input\n(\n\"Are you sure? [yN] \"\n)\n.\nlower\n()\n \n==\n \n'y'\n:\n\n        \nentry\n.\ndelete_instance\n()\n\n        \nprint\n(\n\"Entry deleted!\"\n)\n\n\n\n\nmenu\n \n=\n \nOrderedDict\n([\n\n    \n(\n'a'\n,\n \nadd_entry\n),\n\n    \n(\n'v'\n,\n \nview_entries\n),\n\n    \n(\n's'\n,\n \nsearch_entries\n),\n\n\n])\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \ninitialize\n()\n\n    \nmenu_loop\n()\n\n\n\n\n\n\n\nThe result is dynamic. Enter something. Save it. View it. Delete it (the last entry). Confirm it. Go back to the main menu. View the previous entries. The last entry was deleted and we see the previous entry.\n\n\nA diary app \u2013 Finalize and polish up\n\u00b6\n\n\nWe can polish up the final result. We need to ventilate the onscreen printouts by cleaning the screen here and there. On Windows, we clear the screen with \ncls\n; on UNIX-based OS, with \nclear\n.\n\n\nHere is the final product. It\u2019s not perfect, but it works.\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\nfrom\n \ncollections\n \nimport\n \nOrderedDict\n\n\nimport\n \ndatetime\n\n\nimport\n \nos\n \n# ADD\n\n\nimport\n \nsys\n\n\nfrom\n \npeewee\n \nimport\n \n*\n\n\n\ndb\n \n=\n \nSqliteDatabase\n(\n'C:\\sqlite\\diary.db'\n)\n\n\n\n\nclass\n \nEntry\n(\nModel\n):\n\n    \ncontent\n \n=\n \nTextField\n()\n\n    \ntimestamp\n \n=\n \nDateTimeField\n(\ndefault\n=\ndatetime\n.\ndatetime\n.\nnow\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \ndatabase\n \n=\n \ndb\n\n\n\n\ndef\n \ninitialize\n():\n\n    \n\"\"\"Create the database and the table if they don't exist.\"\"\"\n\n    \ndb\n.\nconnect\n()\n\n    \ndb\n.\ncreate_tables\n([\nEntry\n],\n \nsafe\n=\nTrue\n)\n\n\n\n\ndef\n \nclear\n():\n \n# ADD\n\n    \nos\n.\nsystem\n(\n'cls'\n \nif\n \nos\n.\nname\n \n==\n \n'nt'\n \nelse\n \n'clear'\n)\n \n# ADD; cls for Windows, clear for Linux or Mac OS X\n\n\n\n\ndef\n \nmenu_loop\n():\n\n    \n\"\"\"Show the menu.\"\"\"\n\n    \nchoice\n \n=\n \nNone\n\n\n    \nwhile\n \nchoice\n \n!=\n \n'q'\n:\n\n        \nclear\n()\n\n        \nprint\n(\n\"Enter 'q' to quit.\"\n)\n\n        \nfor\n \nkey\n,\n \nvalue\n \nin\n \nmenu\n.\nitems\n():\n\n            \nprint\n(\n'{}) {}'\n.\nformat\n(\nkey\n,\n \nvalue\n.\n__doc__\n))\n\n        \nchoice\n \n=\n \nraw_input\n(\n'Action: '\n)\n.\nlower\n()\n.\nstrip\n()\n\n\n        \nif\n \nchoice\n \nin\n \nmenu\n:\n\n            \nclear\n()\n\n            \nmenu\n[\nchoice\n]()\n\n\n\n\ndef\n \nadd_entry\n():\n\n    \n\"\"\"Add an entry.\"\"\"\n\n    \nprint\n(\n\"Enter your entry. Press ctrl+z when finished.\"\n)\n\n    \ndata\n \n=\n \nsys\n.\nstdin\n.\nread\n()\n.\nstrip\n()\n\n\n    \nif\n \ndata\n:\n\n        \nif\n \nraw_input\n(\n'Save entry? [Yn] '\n)\n.\nlower\n()\n \n!=\n \n'n'\n:\n\n            \nEntry\n.\ncreate\n(\ncontent\n=\ndata\n)\n\n            \nprint\n(\n\"Saved successfully!\"\n)\n\n\n\n\ndef\n \nview_entries\n(\nsearch_query\n=\nNone\n):\n\n    \n\"\"\"View previous entries.\"\"\"\n\n    \nentries\n \n=\n \nEntry\n.\nselect\n()\n.\norder_by\n(\nEntry\n.\ntimestamp\n.\ndesc\n())\n\n    \nif\n \nsearch_query\n:\n\n        \nentries\n \n=\n \nentries\n.\nwhere\n(\nEntry\n.\ncontent\n.\ncontains\n(\nsearch_query\n))\n\n\n    \nfor\n \nentry\n \nin\n \nentries\n:\n\n        \ntimestamp\n \n=\n \nentry\n.\ntimestamp\n.\nstrftime\n(\n'%A %B \n%d\n, %Y %I:%M%p'\n)\n\n        \nclear\n()\n\n        \nprint\n(\ntimestamp\n)\n\n        \nprint\n(\n'='\n*\nlen\n(\ntimestamp\n))\n\n        \nprint\n(\nentry\n.\ncontent\n)\n\n        \nprint\n(\n'\n\\n\\n\n'\n+\n'='\n*\nlen\n(\ntimestamp\n))\n \n# ADD\n\n        \nprint\n(\n'n) next entry'\n)\n\n        \nprint\n(\n'd) delete entry'\n)\n\n        \nprint\n(\n'q) return to main menu'\n)\n\n\n        \nnext_action\n \n=\n \nraw_input\n(\n'Action: [Ndq] '\n)\n.\nlower\n()\n.\nstrip\n()\n\n        \nif\n \nnext_action\n \n==\n \n'q'\n:\n\n            \nbreak\n\n        \nelif\n \nnext_action\n \n==\n \n'd'\n:\n\n            \ndelete_entry\n(\nentry\n)\n\n\n\n\ndef\n \nsearch_entries\n():\n\n    \n\"\"\"Search entries for a string.\"\"\"\n\n    \nview_entries\n(\nraw_input\n(\n'Search query: '\n))\n\n\n\n\ndef\n \ndelete_entry\n(\nentry\n):\n\n    \n\"\"\"Delete an entry.\"\"\"\n\n    \nif\n \nraw_input\n(\n\"Are you sure? [yN] \"\n)\n.\nlower\n()\n \n==\n \n'y'\n:\n\n        \nentry\n.\ndelete_instance\n()\n\n        \nprint\n(\n\"Entry deleted!\"\n)\n\n\n\n\nmenu\n \n=\n \nOrderedDict\n([\n\n    \n(\n'a'\n,\n \nadd_entry\n),\n\n    \n(\n'v'\n,\n \nview_entries\n),\n\n    \n(\n's'\n,\n \nsearch_entries\n),\n\n\n])\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \ninitialize\n()\n\n    \nmenu_loop\n()",
            "title": "Databases"
        },
        {
            "location": "/Databases/#2-sqlite3-cli",
            "text": "Basics   In the shell/bash:  sqlite3 test.db , create a database/open the database (show the prompt); the database is located in SQLite\u2019s directory.    Basic commands inside a database.  .help .  .databases , show all databases.  create table first (a int, b string); , create a table with two fields.  .schema , show the last commands.  .tables , show all tables in the database.  insert into first (a, b) values (1, \"hello\"); , load the table.  select * from first; , extract all values from the table.  .quit  or  .exit .  drop table first; , delete a table (first).  Delete a database by deleting the database file in the directory.    Intermediate commands.  .mode   insert , change the view (insertions to build the database).  .dump , dump data on screen.  .output   . \\ Documents \\ sqlite3Files.sql , create a folder in a file (Windows).  .output   . / Documents / sqlite3Files.sql , create a folder in a file (UNIX-based).  .dump , dump data into the above. VERY USEFUL for recreating a database/table.    .output   stdout , to the screen.  .mode   column , change the view (flat table with fixed width). \n        -  .width   15   20 , define the width by column.  .output   . / Documents / sqlite3Files / table.sql , prepare the dump.  select * from table; , extract.  .output   stdout , dump the data.    .mode   line , change the view (long list without commas).  Idem.    .mode   html , change the view (html formats ready to be dumbed).  .output   . / Documents / sqlite3Files / table.html , prepare the dump.  select * from table; , extract.  .output   stdout , dump the data.    .mode   tabs , change the view (flat table separated by tabs).  .output   . / Documents / sqlite3Files / table.tsv , prepare the dump.  select * from table; , extract.  .output   stdout , dump the data.    .mode   csv , change the view (flat table separated by commas or semi-colons).  .separator   ; , change the separator.  .output   . / Documents / sqlite3Files / table.csv , prepare the dump.  select * from table; , extract.  .output   stdout , dump the data.    .mode   tcs , change the view (flat table with double-quotes).  .headers   on , show the headers.  .show , show the (above) parameters (and change them).  .prompt   ' sqlite3 >   ' , change the prompt.  .read   < path > , repopulate the database with the above.     Advanced  There are plenty of resources about SQLite: books, online documents, online tutorials, etc. We can learn how to:   Build a database, tables.  Query a database, create, alter, select, order by, limit, offset, update, delete, and other functions.  Joins and Triggers.  And more.",
            "title": "2, SQLite3 CLI"
        },
        {
            "location": "/Databases/#3-sql-database-gui-administration-and-management-tools",
            "text": "With database managers, we can create scripts to automate operations.   SQLite is free, open source, and cross-platform.  DB Browser for SQLite is free, for all OS.  Add-ons to browsers such as the SQLite Managers for Firefox.    MySQL is free, open source, and cross-platform.  MySQL Workbench is free, for all OS.  Database Design & Modeling, SQL Development (replacing MySQL Query Browser), and Database Administration (replacing MySQL Administrator). MySQL features: SQL editor, SQL code completion, SQL code formatter, SQL Syntax highlighting, server start/stop, server status/health, server logs, server/replication configuration, user management, session management, and much more.    There are web-based managers.    PostgreSQL is free, open source, also cross-platform.  pgAdminIII.  There are web-based managers.    SQL in general.  DB Browser is free, for all OS.  phpMyAdmin is free, for all OS.  Toad is free, for Windows.  HeidiSQL is free, for Windows.  There are web-based managers.",
            "title": "3, SQL Database GUI, Administration, and Management Tools"
        },
        {
            "location": "/Databases/#4-spreadsheet-data-and-sqlite",
            "text": "Import from the spreadsheet   Pull data from the spreadsheet into SQLite via an add-on or a database manager (automated procedure).  Or export data (save as) from the spreadsheet into a .csv file.  Import the .csv into SQLite.  In can be done with a manager such as DB Browser for SQLite.  It can be done with a web-based manager such as SQLite Managers for Firefox.  Adjust the general and field parameters.  Create a primary key.  Populate a table with the .csv file.     Import into a spreadsheet   Dump the data from the CLI or a database manager into a .csv file.  Or connect the spreadsheet with SQLite with built-in functionalities or add-ons to pull data into the database.  There are add-ons that can execute SQL queries in a cell and dump the results in other cells: Excellic, Microsoft SQL Server Data Mining, SaveToDB, Database Connection Wizard, Publish Wizard, etc.",
            "title": "4, Spreadsheet Data and SQLite"
        },
        {
            "location": "/Databases/#5-r-and-python-with-sql",
            "text": "R can import data from / export data to relational databases using specialized packages such as  DBI ,  RSQLite ,  RMySQL ,  RPostgreSQL , etc.  Python libraries are:  python-sql ,  sqlalchemy ,  records ,  peewee , etc.  pip install <library> .",
            "title": "5, R and Python with SQL"
        },
        {
            "location": "/Databases/#6-the-chinook-sqlite-sample-database",
            "text": "Learn, practice, and test commands with a fake database.    Download the  database .  Consult the  diagram .  We can also download the database and diagrams.",
            "title": "6, The Chinook SQLite Sample Database"
        },
        {
            "location": "/Databases/#7-using-a-python-orm-peewee",
            "text": "",
            "title": "7, Using a Python ORM: peewee"
        },
        {
            "location": "/Databases/#install-peewee",
            "text": "We can run queries with SQL or use a Python wrapper:  peewee . It is a lightweight Object Relational Mapper (ORM).  peewee  works with SQLite, MySQL, and PostgreSQL.  Install it with pip.  We can manage our databases with Python scripts.",
            "title": "Install peewee"
        },
        {
            "location": "/Databases/#create-a-database-with-a-script",
            "text": "In  peewee , models are Python classes. Everything in the database is an object: tables, rows, columns, entries, etc.  We create a new database,  students.db , with Python. We connect to the database and create two fields with their SQL parameters. We run the script in the terminal.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\students.db' )  class   Student ( Model ):   # use a singular name convention \n     username   =   CharField ( max_length = 255 ,   unique = True )   # varchar, unique value, no duplicates \n     points   =   IntegerField ( default = 0 )   # if not supplies, it inputs 0 by default \n\n     class   Meta :   # a class inside a class (meta-class) \n         database   =   db  if   __name__   ==   '__main__' :   # for running the script directly, not import it \n     db . connect () \n     db . create_tables ([ Student ],   safe = True )   # safe is a mandatory convention    We get no result in the terminal: a good sign. Check out the database to see the results.  The script runs on Windows in Python 2. In Python 3, we would need minor adjustments; they are documented along the way. In addition, in UNIX-based OS, we would need two extra lines at the top of the script.  1\n2 #!/usr/bin/env python  # -*- coding: utf-8 -*-    Or.  1\n2 #!/usr/bin/env python 3  # -*- coding: utf-8 -*-",
            "title": "Create a database with a script"
        },
        {
            "location": "/Databases/#create-read-update-and-delete-crud",
            "text": "Create, read, update, and delete is knows as CRUD; the backbone of ORM. Five useful methods:   .create () , add a new record to the table.  .select () , pick rows out of the table.  .save () , update an existing row in a table.  .get () , fetch a single record from a table.  .delete_instance () , delete a row from a table.   Improve the script, but avoid the false start\u2026   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38 from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\students.db' )  class   Student ( Model ): \n     username   =   CharField ( max_length = 255 ,   unique = True ) \n     points   =   IntegerField ( default = 0 ) \n\n     class   Meta : \n         database   =   db  # ADD a dictionary  students   =   [ \n     { 'username' :   'kennethliff' , \n     'points' :   4888 }, \n     { 'username' :   'chalkers' , \n     'points' :   11912 }, \n     { 'username' :   'joykesten2' , \n     'points' :   7363 }, \n     { 'username' :   'craigsrob' , \n     'points' :   4079 }, \n     { 'username' :   'adammcfarland' , \n     'points' :   14717 }  ]      def   add_students ():   # ADD a function \n     for   student   in   students : \n         Student . create ( username = student [ 'username' ], \n                         points = student [ 'points' ])   if   __name__   ==   '__main__' : \n     db . connect () \n     db . create_tables ([ Student ],   safe = True ) \n     add_students ()   # ADD    We can run the script once, but not twice because of the  unique=True  in the  class   Student ( Model ) : . We get an  IntegrityError  in the terminal.   We need to add a  try  block. Take two.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42 from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\students.db' )  class   Student ( Model ): \n     username   =   CharField ( max_length = 255 ,   unique = True ) \n     points   =   IntegerField ( default = 0 ) \n\n     class   Meta : \n         database   =   db  students   =   [ \n     { 'username' :   'kennethliff' , \n     'points' :   4888 }, \n     { 'username' :   'chalkers' , \n     'points' :   11912 }, \n     { 'username' :   'joykesten2' , \n     'points' :   7363 }, \n     { 'username' :   'craigsrob' , \n     'points' :   4079 }, \n     { 'username' :   'adammcfarland' , \n     'points' :   14717 }  ]      def   add_students ():   # CHANGE the function \n     for   student   in   students : \n         try : \n             Student . create ( username = student [ 'username' ], \n                             points = student [ 'points' ]) \n         except   IntegrityError : \n             student_record   =   Student . get ( username = student [ 'username' ]) \n             student_record . points   =   student [ 'points' ] \n             student_record . save ()  if   __name__   ==   '__main__' : \n     db . connect () \n     db . create_tables ([ Student ],   safe = True ) \n     add_students ()    We get no result in the terminal: a good sign. We can run the script at will. We can check out the results in the database.  Add a function to select the top students, order them in descending order (from high to low), and retrieve them.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\students.db' )  class   Student ( Model ): \n     username   =   CharField ( max_length = 255 ,   unique = True ) \n     points   =   IntegerField ( default = 0 ) \n\n     class   Meta : \n         database   =   db  students   =   [ \n     { 'username' :   'kennethliff' , \n     'points' :   4888 }, \n     { 'username' :   'chalkers' , \n     'points' :   11912 }, \n     { 'username' :   'joykesten2' , \n     'points' :   7363 }, \n     { 'username' :   'craigsrob' , \n     'points' :   4079 }, \n     { 'username' :   'adammcfarland' , \n     'points' :   14717 }  ]      def   add_students (): \n     for   student   in   students : \n         try : \n             Student . create ( username = student [ 'username' ], \n                             points = student [ 'points' ]) \n         except   IntegrityError : \n             student_record   =   Student . get ( username = student [ 'username' ]) \n             student_record . points   =   student [ 'points' ] \n             student_record . save ()  def   top_student (): \n     student   =   Student . select () . order_by ( Student . points . desc ()) . get ()   # ADD \n     return   student              if   __name__   ==   '__main__' : \n     db . connect () \n     db . create_tables ([ Student ],   safe = True ) \n     add_students () \n     print ( \"Our top student right now is: {0.username}.\" . format ( top_student ()))   # ADD    This time, we should get a result in the terminal.  1 Our top student right now is: adammcfarland.   Change the points in the dictionary and rerun the script.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\students.db' )  class   Student ( Model ): \n     username   =   CharField ( max_length = 255 ,   unique = True ) \n     points   =   IntegerField ( default = 0 ) \n\n     class   Meta : \n         database   =   db  students   =   [ \n     { 'username' :   'kennethliff' , \n     'points' :   14718 },   # CHANGE, make it the top student \n     { 'username' :   'chalkers' , \n     'points' :   11912 }, \n     { 'username' :   'joykesten2' , \n     'points' :   7363 }, \n     { 'username' :   'craigsrob' , \n     'points' :   4079 }, \n     { 'username' :   'adammcfarland' , \n     'points' :   14717 }  ]      def   add_students (): \n     for   student   in   students : \n         try : \n             Student . create ( username = student [ 'username' ], \n                             points = student [ 'points' ]) \n         except   IntegrityError : \n             student_record   =   Student . get ( username = student [ 'username' ]) \n             student_record . points   =   student [ 'points' ] \n             student_record . save ()  def   top_student (): \n     student   =   Student . select () . order_by ( Student . points . desc ()) . get () \n     return   student              if   __name__   ==   '__main__' : \n     db . connect () \n     db . create_tables ([ Student ],   safe = True ) \n     add_students () \n     print ( \"Our top student right now is: {0.username}.\" . format ( top_student ()))    Results in the terminal.  1 Our top student right now is: kennethliff.   Recap:   .create () , add a new record to the table.  .select () , pick rows out of the table.  .get () , fetch a single record from a table.",
            "title": "Create, read, update, and delete (CRUD)"
        },
        {
            "location": "/Databases/#a-diary-app-the-skeleton-empty-classes-and-functions",
            "text": "Now, let\u2019s build a diary application using an SQLite database. Such an application can be integrated into a web framework (like Flask) or frozen as an executive file (embedding SQLite).   We want to be able to load data and retrieve them.   The more general use could be a log book: we can write stuff and retrieve it. We can classify the entries and search for a specific word.  We start with a skeleton, bare functions and docstrings.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\diary.db' )  class   Entry ( Model ): \n     # content \n     # timestamp \n\n     class   Meta : \n         database   =   db  def   menu_loop (): \n     \"\"\"Show the menu.\"\"\"  def   add_entry (): \n     \"\"\"Add an entry.\"\"\"  def   view_entries (): \n     \"\"\"View previous entries.\"\"\"  def   delete_entry ( entry ): \n     \"\"\"Delete an entry.\"\"\"  if   __name__   ==   '__main__' :   # for running the script directly, not import it \n     menu_loop ()",
            "title": "A diary app -- The skeleton (empty classes and functions)"
        },
        {
            "location": "/Databases/#a-diary-app-initialize",
            "text": "Let\u2019s add some flesh to the skeleton. Add the the  datetime  library and a new function to initialize the diary.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39 import   datetime   # ADD  from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\diary.db' )  class   Entry ( Model ):   # CHANGE \n     content   =   TextField ()   # content: TextField ia more flexible, holds any type of data; contrary to CharField, a varchar with a maximum length \n     timestamp   =   DateTimeField ( default = datetime . datetime . now )   # timestamp; now does take parentheses \n\n     class   Meta : \n         database   =   db  def   initialize ():   # ADD \n     \"\"\"Create the database and the table if they don't exist.\"\"\" \n     db . connect () \n     db . create_tables ([ Entry ],   safe = True )  def   menu_loop (): \n     \"\"\"Show the menu.\"\"\"  def   add_entry (): \n     \"\"\"Add an entry.\"\"\"  def   view_entries (): \n     \"\"\"View previous entries.\"\"\"  def   delete_entry ( entry ): \n     \"\"\"Delete an entry.\"\"\"  if   __name__   ==   '__main__' :   # for running the script directly, not import it \n     initialize ()   # INSERT \n     menu_loop ()    We get no result in the terminal: a good sign. We can check out the results in the db.",
            "title": "A diary app -- Initialize"
        },
        {
            "location": "/Databases/#a-diary-app-create-a-menu",
            "text": "We add a menu using a dictionary (we need the  OrderedDict  library).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55 from   collections   import   OrderedDict   # ADD  import   datetime  from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\diary.db' )  class   Entry ( Model ): \n     content   =   TextField () \n     timestamp   =   DateTimeField ( default = datetime . datetime . now ) \n\n     class   Meta : \n         database   =   db  def   initialize (): \n     \"\"\"Create the database and the table if they don't exist.\"\"\" \n     db . connect () \n     db . create_tables ([ Entry ],   safe = True )  def   menu_loop (): \n     \"\"\"Show the menu.\"\"\" \n     choice   =   None   # new variable with a default value \n\n     while   choice   !=   'q' :   # ADD \n         print ( \"Enter 'q' to quit.\" )   # starting message \n         for   key ,   value   in   menu . items ():   # loop through the dictionary \n             print ( '{}) {}' . format ( key ,   value . __doc__ ))   # value from the menu variables furthur down in the script; __doc__ is the docstrings \n         choice   =   raw_input ( 'Action: ' ) . lower () . strip ()   # lowercase, remove white spaces \n\n         if   choice   in   menu :   # check if the selection is in the menu \n             menu [ choice ]()   # execute the choice  def   add_entry (): \n     \"\"\"Add an entry.\"\"\"  def   view_entries (): \n     \"\"\"View previous entries.\"\"\"  def   delete_entry ( entry ): \n     \"\"\"Delete an entry.\"\"\"  menu   =   OrderedDict ([   # ADD tuple \n     ( 'a' ,   add_entry ), \n     ( 'v' ,   view_entries ),  ])  if   __name__   ==   '__main__' : \n     initialize () \n     menu_loop ()    This is coded in Python 2. In Python 3, we would replace  raw_input  by  input .  The result is dynamic. We can input data in the terminal and the script continues to run until we quit with  q . We cannot do much since the functions are still empty ( def add_entry():  and  def view_entries(): ). The following is a snapshot.  1\n2\n3\n4 Enter 'q' to quit.\na) Add an entry.\nv) View previous entries.\nActions:",
            "title": "A diary app -- Create a menu"
        },
        {
            "location": "/Databases/#a-diary-app-data-entry",
            "text": "Add the  sys  library. We want to enter data and load the database.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64 from   collections   import   OrderedDict  import   datetime  import   sys   # ADD  from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\diary.db' )  class   Entry ( Model ): \n     content   =   TextField () \n     timestamp   =   DateTimeField ( default = datetime . datetime . now ) \n\n     class   Meta : \n         database   =   db  def   initialize (): \n     \"\"\"Create the database and the table if they don't exist.\"\"\" \n     db . connect () \n     db . create_tables ([ Entry ],   safe = True )  def   menu_loop (): \n     \"\"\"Show the menu.\"\"\" \n     choice   =   None \n\n     while   choice   !=   'q' : \n         print ( \"Enter 'q' to quit.\" ) \n         for   key ,   value   in   menu . items (): \n             print ( '{}) {}' . format ( key ,   value . __doc__ )) \n         choice   =   raw_input ( 'Action: ' ) . lower () . strip () \n\n         if   choice   in   menu : \n             menu [ choice ]()  def   add_entry ():   # IMPROVE \n     \"\"\"Add an entry.\"\"\" \n     print ( \"Enter your entry. Press ctrl+z when finished.\" ) \n     data   =   sys . stdin . read () . strip () \n\n     if   data : \n         if   raw_input ( 'Save entry? [Yn] ' ) . lower ()   !=   'n' : \n             Entry . create ( content = data ) \n             print ( \"Saved successfully!\" )  def   view_entries (): \n     \"\"\"View previous entries.\"\"\"  def   delete_entry ( entry ): \n     \"\"\"Delete an entry.\"\"\"  menu   =   OrderedDict ([ \n     ( 'a' ,   add_entry ), \n     ( 'v' ,   view_entries ),  ])  if   __name__   ==   '__main__' : \n     initialize () \n     menu_loop ()    The result is dynamic.  To the question  Enter your entry. Press ctrl+d when finished. , write  Working with databases. I enjoy my day. . Press enter, then press ctrl+z, then enter in Windows, ctrl+d in UNIX-based OS (for End-of-File key sequence). Save it (with a  y  input). Repeat. This time, do not save it ( n ). Check out the results in the database.  raw_input  in Python 2 vs.  input  in Python 3. In Python 2, we can print with  print \" \"  or  print(\" \") . The later is only possible in Python 3.",
            "title": "A diary app -- Data entry"
        },
        {
            "location": "/Databases/#a-diary-app-search-and-view-entries",
            "text": "We now want to read the data (query the database). We also want to search throught the entries. In SQL, we would code:  SELECT * FROM entry WHERE content LIKE '%search_query$' ORDER BY timestamp DESC; .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85 from   collections   import   OrderedDict  import   datetime  import   sys  from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\diary.db' )  class   Entry ( Model ): \n     content   =   TextField () \n     timestamp   =   DateTimeField ( default = datetime . datetime . now ) \n\n     class   Meta : \n         database   =   db  def   initialize (): \n     \"\"\"Create the database and the table if they don't exist.\"\"\" \n     db . connect () \n     db . create_tables ([ Entry ],   safe = True )  def   menu_loop (): \n     \"\"\"Show the menu.\"\"\" \n     choice   =   None \n\n     while   choice   !=   'q' : \n         print ( \"Enter 'q' to quit.\" ) \n         for   key ,   value   in   menu . items (): \n             print ( '{}) {}' . format ( key ,   value . __doc__ )) \n         choice   =   raw_input ( 'Action: ' ) . lower () . strip () \n\n         if   choice   in   menu : \n             menu [ choice ]()  def   add_entry (): \n     \"\"\"Add an entry.\"\"\" \n     print ( \"Enter your entry. Press ctrl+z when finished.\" ) \n     data   =   sys . stdin . read () . strip () \n\n     if   data : \n         if   raw_input ( 'Save entry? [Yn] ' ) . lower ()   !=   'n' : \n             Entry . create ( content = data ) \n             print ( \"Saved successfully!\" )  def   view_entries ( search_query = None ):   # IMPROVE \n     \"\"\"View previous entries.\"\"\" \n     entries   =   Entry . select () . order_by ( Entry . timestamp . desc ())   # sort them \n     if   search_query : \n         entries   =   entries . where ( Entry . content . contains ( search_query )) \n\n     for   entry   in   entries : \n         timestamp   =   entry . timestamp . strftime ( '%A %B  %d , %Y %I:%M%p' )   # day name, month, date, year, hour (12h), minute, am/pm \n         print ( timestamp ) \n         print ( '=' * len ( timestamp ))   # print the number of characters in the timestamp \n         print ( entry . content ) \n         print ( 'n) next entry' ) \n         print ( 'q) return to main menu' ) \n\n         next_action   =   raw_input ( 'Action: [Nq] ' ) . lower () . strip () \n         if   next_action   ==   'q' : \n             break  def   search_entries (): \n     \"\"\"Search entries for a string.\"\"\" \n     view_entries ( raw_input ( 'Search query: ' ))  def   delete_entry ( entry ): \n     \"\"\"Delete an entry.\"\"\"  menu   =   OrderedDict ([ \n     ( 'a' ,   add_entry ), \n     ( 'v' ,   view_entries ), \n     ( 's' ,   search_entries ),   # ADD  ])  if   __name__   ==   '__main__' : \n     initialize () \n     menu_loop ()    The result is dynamic. Try entering stuff, save it. Back to the menu, read the entry. We should get a date, a line of  =  and the entry. Quit and go back to the menu. Try search for a word. It should find a single word among all the entry and pull out the entry where the word appears.",
            "title": "A diary app -- Search and view entries"
        },
        {
            "location": "/Databases/#a-diary-app-delete-entries",
            "text": "Complete the last function:  def delete_entry(entry): .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91 from   collections   import   OrderedDict  import   datetime  import   sys  from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\diary.db' )  class   Entry ( Model ): \n     content   =   TextField () \n     timestamp   =   DateTimeField ( default = datetime . datetime . now ) \n\n     class   Meta : \n         database   =   db  def   initialize (): \n     \"\"\"Create the database and the table if they don't exist.\"\"\" \n     db . connect () \n     db . create_tables ([ Entry ],   safe = True )  def   menu_loop (): \n     \"\"\"Show the menu.\"\"\" \n     choice   =   None \n\n     while   choice   !=   'q' : \n         print ( \"Enter 'q' to quit.\" ) \n         for   key ,   value   in   menu . items (): \n             print ( '{}) {}' . format ( key ,   value . __doc__ )) \n         choice   =   raw_input ( 'Action: ' ) . lower () . strip () \n\n         if   choice   in   menu : \n             menu [ choice ]()  def   add_entry (): \n     \"\"\"Add an entry.\"\"\" \n     print ( \"Enter your entry. Press ctrl+z when finished.\" ) \n     data   =   sys . stdin . read () . strip () \n\n     if   data : \n         if   raw_input ( 'Save entry? [Yn] ' ) . lower ()   !=   'n' : \n             Entry . create ( content = data ) \n             print ( \"Saved successfully!\" )  def   view_entries ( search_query = None ): \n     \"\"\"View previous entries.\"\"\" \n     entries   =   Entry . select () . order_by ( Entry . timestamp . desc ()) \n     if   search_query : \n         entries   =   entries . where ( Entry . content . contains ( search_query )) \n\n     for   entry   in   entries : \n         timestamp   =   entry . timestamp . strftime ( '%A %B  %d , %Y %I:%M%p' ) \n         print ( timestamp ) \n         print ( '=' * len ( timestamp )) \n         print ( entry . content ) \n         print ( 'n) next entry' ) \n         print ( 'd) delete entry' )   # ADD \n         print ( 'q) return to main menu' ) \n\n         next_action   =   raw_input ( 'Action: [Ndq] ' ) . lower () . strip () \n         if   next_action   ==   'q' : \n             break \n         elif   next_action   ==   'd' :   # ADD \n             delete_entry ( entry )  def   search_entries (): \n     \"\"\"Search entries for a string.\"\"\" \n     view_entries ( raw_input ( 'Search query: ' ))  def   delete_entry ( entry ):   # IMPROVE \n     \"\"\"Delete an entry.\"\"\" \n     if   raw_input ( \"Are you sure? [yN] \" ) . lower ()   ==   'y' : \n         entry . delete_instance () \n         print ( \"Entry deleted!\" )  menu   =   OrderedDict ([ \n     ( 'a' ,   add_entry ), \n     ( 'v' ,   view_entries ), \n     ( 's' ,   search_entries ),  ])  if   __name__   ==   '__main__' : \n     initialize () \n     menu_loop ()    The result is dynamic. Enter something. Save it. View it. Delete it (the last entry). Confirm it. Go back to the main menu. View the previous entries. The last entry was deleted and we see the previous entry.",
            "title": "A diary app -- Delete entries"
        },
        {
            "location": "/Databases/#a-diary-app-finalize-and-polish-up",
            "text": "We can polish up the final result. We need to ventilate the onscreen printouts by cleaning the screen here and there. On Windows, we clear the screen with  cls ; on UNIX-based OS, with  clear .  Here is the final product. It\u2019s not perfect, but it works.    1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100 from   collections   import   OrderedDict  import   datetime  import   os   # ADD  import   sys  from   peewee   import   *  db   =   SqliteDatabase ( 'C:\\sqlite\\diary.db' )  class   Entry ( Model ): \n     content   =   TextField () \n     timestamp   =   DateTimeField ( default = datetime . datetime . now ) \n\n     class   Meta : \n         database   =   db  def   initialize (): \n     \"\"\"Create the database and the table if they don't exist.\"\"\" \n     db . connect () \n     db . create_tables ([ Entry ],   safe = True )  def   clear ():   # ADD \n     os . system ( 'cls'   if   os . name   ==   'nt'   else   'clear' )   # ADD; cls for Windows, clear for Linux or Mac OS X  def   menu_loop (): \n     \"\"\"Show the menu.\"\"\" \n     choice   =   None \n\n     while   choice   !=   'q' : \n         clear () \n         print ( \"Enter 'q' to quit.\" ) \n         for   key ,   value   in   menu . items (): \n             print ( '{}) {}' . format ( key ,   value . __doc__ )) \n         choice   =   raw_input ( 'Action: ' ) . lower () . strip () \n\n         if   choice   in   menu : \n             clear () \n             menu [ choice ]()  def   add_entry (): \n     \"\"\"Add an entry.\"\"\" \n     print ( \"Enter your entry. Press ctrl+z when finished.\" ) \n     data   =   sys . stdin . read () . strip () \n\n     if   data : \n         if   raw_input ( 'Save entry? [Yn] ' ) . lower ()   !=   'n' : \n             Entry . create ( content = data ) \n             print ( \"Saved successfully!\" )  def   view_entries ( search_query = None ): \n     \"\"\"View previous entries.\"\"\" \n     entries   =   Entry . select () . order_by ( Entry . timestamp . desc ()) \n     if   search_query : \n         entries   =   entries . where ( Entry . content . contains ( search_query )) \n\n     for   entry   in   entries : \n         timestamp   =   entry . timestamp . strftime ( '%A %B  %d , %Y %I:%M%p' ) \n         clear () \n         print ( timestamp ) \n         print ( '=' * len ( timestamp )) \n         print ( entry . content ) \n         print ( ' \\n\\n ' + '=' * len ( timestamp ))   # ADD \n         print ( 'n) next entry' ) \n         print ( 'd) delete entry' ) \n         print ( 'q) return to main menu' ) \n\n         next_action   =   raw_input ( 'Action: [Ndq] ' ) . lower () . strip () \n         if   next_action   ==   'q' : \n             break \n         elif   next_action   ==   'd' : \n             delete_entry ( entry )  def   search_entries (): \n     \"\"\"Search entries for a string.\"\"\" \n     view_entries ( raw_input ( 'Search query: ' ))  def   delete_entry ( entry ): \n     \"\"\"Delete an entry.\"\"\" \n     if   raw_input ( \"Are you sure? [yN] \" ) . lower ()   ==   'y' : \n         entry . delete_instance () \n         print ( \"Entry deleted!\" )  menu   =   OrderedDict ([ \n     ( 'a' ,   add_entry ), \n     ( 'v' ,   view_entries ), \n     ( 's' ,   search_entries ),  ])  if   __name__   ==   '__main__' : \n     initialize () \n     menu_loop ()",
            "title": "A diary app -- Finalize and polish up"
        },
        {
            "location": "/Datetime/",
            "text": "CONTENT\n\n\nThe datatime library\n\n\nnow or any date-time\n\n\nDate-time difference\n\n\nMeasure duration with timedelta\n\n\nnow vs. today\n\n\nFormatting date-time\n\n\nA little printing app\n\n\n\n\n\n\nBuild a Quiz application\n\n\nBuild the skeleton\n\n\nGenerate questions\n\n\nFinalize the application\n\n\n\n\n\n\nTime zones\n\n\nTime zones with datatime only\n\n\nTime zones with datatime and pytz\n\n\nFind out more about pytz\n\n\nBuild a script to convert time zones\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2 & 3. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\nThe \ndatatime\n library\n\u00b6\n\n\nWhen building an application incorporating a time triggers, events, records log entries, and much more, we need to deal with dates and times; and time zones. Whether it is a simple script that starts every morning to scrape web data, build a report, and send emails or a comprehensive web framework script that records data entries.\n\n\nnow\n or any date-time\n\u00b6\n\n\nThe \ndatatime\n library has handy built-in functions: \ndate\n, \ntime\n, \ndatetime\n, \ntimedelta\n, and \ntzinfo\n. The following script demonstrates some of the functionalities.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nimport\n \ndatetime\n\n\n\nprint\n \n\"The datatime library: \"\n\n\nprint\n \ndir\n(\ndatetime\n)\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\n\nprint\n \n\"The current datetime: \"\n\n\nprint\n \ndatetime\n.\ndatetime\n.\nnow\n()\n\n\n\nprint\n \n\"...in a variable: \"\n\n\ntest_start\n \n=\n \ndatetime\n.\ndatetime\n.\nnow\n()\n\n\nprint\n \ntest_start\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\n\nprint\n \n\"Replace the attributes: new formatting.\"\n\n\ntest_start\n \n=\n \ntest_start\n.\nreplace\n(\nhour\n=\n7\n,\n \nminute\n=\n39\n,\n \nsecond\n \n=\n \n0\n,\n \nmicrosecond\n=\n0\n)\n\n\nprint\n \ntest_start\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\n\n\n\n\n\nResults.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nimport\n \ndatetime\n\n\n\nThe\n \ndatatime\n \nlibrary\n:\n \n\n[\n'MAXYEAR'\n,\n \n'MINYEAR'\n,\n \n'__doc__'\n,\n \n'__name__'\n,\n \n'__package__'\n,\n \n'date'\n,\n \n'datetime'\n,\n \n'datetime_CAPI'\n,\n \n'time'\n,\n \n'timedelta'\n,\n \n'tzinfo'\n]\n\n\n=========================\n\n\n\nThe\n \ncurrent\n \ndatetime\n:\n \n\n2016\n-\n04\n-\n08\n \n10\n:\n03\n:\n06.120000\n\n\n...\nin\n \na\n \nvariable\n:\n \n\n2016\n-\n04\n-\n08\n \n10\n:\n03\n:\n06.120000\n\n\n=========================\n\n\n\nReplace\n \nthe\n \nattributes\n:\n \nnew\n \nformatting\n.\n\n\n2016\n-\n04\n-\n08\n \n07\n:\n39\n:\n00\n\n\n=========================\n\n\n\n\n\n\n\nDate-time difference\n\u00b6\n\n\nCreate a date-time and compute the time difference.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nimport\n \ndatetime\n\n\n\nprint\n \n\"Start: \"\n\n\nprint\n \ntest_start\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\n\nduration\n \n=\n \ndatetime\n.\ndatetime\n.\nnow\n()\n \n-\n \ntest_start\n\n\nprint\n \n\"duration = datetime.datetime.now() - test_start: \"\n\n\nprint\n \n\"duration = \"\n,\n \nduration\n\n\nprint\n \n\"day = \"\n,\n \nduration\n.\ndays\n\n\nprint\n \n\"microseconds = \"\n,\n \nduration\n.\nmicroseconds\n\n\nprint\n \n\"seconds = \"\n,\n \nduration\n.\nseconds\n\n\nprint\n \n\"hours (round(seconds/3600)) = \"\n,\n \nround\n(\nduration\n.\nseconds\n/\n3600\n)\n\n\n\n\n\n\n\nResults.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nStart: \n2016-04-08 07:39:00\n=========================\n\nduration = datetime.datetime.now() - test_start: \nduration =  2:24:06.120000\nday =  0\nmicroseconds =  120000\nseconds =  8646\nhours (round(seconds/3600)) =  2.0\nminutes (round(seconds/60)) =  144.0\n=========================\n\n\n\n\n\n\nMeasure duration with \ntimedelta\n\u00b6\n\n\nCreate a delta.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nprint\n \n\"datetime.datetime.now():\"\n\n\nprint\n \ndatetime\n.\ndatetime\n.\nnow\n()\n\n\n\nprint\n \n\"datetime.datetime.now() + datetime.timedelta(days=3): \"\n\n\nprint\n \ndatetime\n.\ndatetime\n.\nnow\n()\n \n+\n \ndatetime\n.\ntimedelta\n(\ndays\n=\n3\n)\n\n\nprint\n \n\"...........................................(days=-5): \"\n\n\nprint\n \ndatetime\n.\ndatetime\n.\nnow\n()\n \n+\n \ndatetime\n.\ntimedelta\n(\ndays\n=-\n5\n)\n\n\nprint\n \n\"...........................................(days=-1): \"\n\n\nprint\n \ndatetime\n.\ndatetime\n.\nnow\n()\n \n+\n \ndatetime\n.\ntimedelta\n(\ndays\n=-\n1\n)\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\nprint\n \n\"datetime.datetime.now() + datetime.timedelta(hours=1): \"\n\n\nprint\n \ndatetime\n.\ndatetime\n.\nnow\n()\n \n+\n \ndatetime\n.\ntimedelta\n(\nhours\n=\n1\n)\n\n\nprint\n \n\"datetime.datetime.now() + datetime.timedelta(0, 3600): \"\n\n\nprint\n \ndatetime\n.\ndatetime\n.\nnow\n()\n \n+\n \ndatetime\n.\ntimedelta\n(\n0\n,\n \n3600\n)\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\nwork\n \n=\n \n9\n\n\nprint\n \n\"work = \"\n,\n \nwork\n\n\n\nprint\n \n\"datetime.datetime.now() + datetime.timedelta(hours=work):\"\n\n\nprint\n \ndatetime\n.\ndatetime\n.\nnow\n()\n \n+\n \ndatetime\n.\ntimedelta\n(\nhours\n=\nwork\n)\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\n\n\n\n\nResults.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\ndatetime.datetime.now():\n2016-04-08 10:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(days=3): \n2016-04-11 10:06:25.895000\n...........................................(days=-5): \n2016-04-03 10:06:25.895000\n...........................................(days=-1): \n2016-04-07 10:06:25.895000\n=========================\n\ndatetime.datetime.now() + datetime.timedelta(hours=1): \n2016-04-08 11:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(0, 3600): \n2016-04-08 11:06:25.895000\n=========================\n\nwork =  9\ndatetime.datetime.now() + datetime.timedelta(hours=work):\n2016-04-08 19:06:25.895000\n=========================\n\n\n\n\n\n\nUse \ntimedelta\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\nprint\n \n\"Simplify: \"\n\n\nnow\n \n=\n \ndatetime\n.\ndatetime\n.\nnow\n()\n\n\nprint\n \n\"now: \"\n\n\nprint\n \nnow\n\n\nprint\n \n\"now.date: \"\n\n\nprint\n \nnow\n.\ndate\n()\n\n\nprint\n \n\"now.time: \"\n\n\nprint\n \nnow\n.\ntime\n()\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\nprint\n \n\"1 hour: \"\n\n\nhour\n \n=\n \ndatetime\n.\ntimedelta\n(\nhours\n=\n1\n)\n\n\nprint\n \nhour\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\nprint\n \n\"Add 1 day: \"\n\n\ntomorrow\n \n=\n \ndatetime\n.\ndatetime\n.\nnow\n()\n.\nreplace\n(\nhour\n=\n9\n,\n \nminute\n=\n0\n)\n \n+\n \ndatetime\n.\ntimedelta\n(\ndays\n=\n1\n)\n\n\nprint\n \ntomorrow\n\n\n\nprint\n \n\"Add 1 day (2): \"\n\n\nworkday\n \n=\n \ndatetime\n.\ntimedelta\n(\nhours\n=\n8\n)\n\n\nprint\n \ntomorrow\n \n+\n \nworkday\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\nprint\n \n\"Appointment: \"\n\n\nappointment\n \n=\n \ndatetime\n.\ntimedelta\n(\nminutes\n=\n45\n)\n\n\n# year, month, day, hour, minute\n\n\nstart\n \n=\n  \ndatetime\n.\ndatetime\n(\n2016\n,\n \n8\n,\n \n17\n,\n \n12\n,\n \n45\n)\n\n\nend\n \n=\n \nstart\n \n+\n \nappointment\n\n\nprint\n \nend\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\n\n\n\n\nResults.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nSimplify: \nnow: \n2016-04-08 10:16:11.476000\nnow.date: \n2016-04-08\nnow.time: \n10:16:11.476000\n=========================\n\n1 hour: \n1:00:00\n=========================\n\nAdd 1 day: \n2016-04-09 09:00:11.476000\nAdd 1 day (2): \n2016-04-09 17:00:11.476000\n=========================\n\nAppointment: \n2016-08-17 13:30:00\n=========================\n\n\n\n\n\n\nnow\n vs. \ntoday\n\u00b6\n\n\nThe difference between \nnow\n and \ntoday\n is\u2026\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nimport\n \ndatetime\n\n\n\nnow\n \n=\n \ndatetime\n.\ndatetime\n.\nnow\n()\n\n\ntoday\n \n=\n \ndatetime\n.\ndatetime\n.\ntoday\n()\n\n\nprint\n \nnow\n\n\nprint\n \ntoday\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\n\n\n\n\nResults.\n\n\n1\n2\n3\n2016-04-08 10:34:28.444000\n2016-04-08 10:34:28.444000\n=========================\n\n\n\n\n\n\n\u2026\nnow\n can take a timezone. We deal with timezones further down. \nToday\n\u2026\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nimport\n \ndatetime\n\n\n\ntoday\n \n=\n \ndatetime\n.\ndatetime\n.\ncombine\n(\ndatetime\n.\ndate\n.\ntoday\n(),\n \ndatetime\n.\ntime\n())\n\n\nprint\n \ntoday\n \n# today at midnight\n\n\nprint\n \ntoday\n.\nmonth\n\n\nprint\n \ntoday\n.\nhour\n\n\nprint\n \ntoday\n.\nyear\n\n\nprint\n \ntoday\n.\nweekday\n()\n \n# 0 = Monday, 1, 2, 3, 4\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\n\n\n\n\nResults.\n\n\n1\n2\n3\n4\n5\n6\n2016-04-08 00:00:00\n4\n0\n2016\n5\n=========================\n\n\n\n\n\n\nFormatting date-time\n\u00b6\n\n\nFormat date and time.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \ndatetime\n\n\n\nnow\n \n=\n \ndatetime\n.\ndatetime\n.\nnow\n()\n\n\nprint\n \nnow\n\n\n\n# how to better present\n\n\n# strftime (strings-from-time) or turn datetime digits into strings\n\n\n\nprint\n \n\"formatting datetime:\"\n\n\nprint\n \nnow\n.\nstrftime\n(\n'%B \n%d\n'\n)\n\n\nprint\n \nnow\n.\nstrftime\n(\n'%m/%m/%y'\n)\n\n\n\n\n\n\n\nResults.\n\n\n1\n2\n3\n4\n2016-04-08 11:08:26.757000\nformatting datetime:\nApril 08\n04/04/16\n\n\n\n\n\n\nstrptime\n (strings-parse-time) turns strings into datetime digits. Look for help online for date and time types.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \ndatetime\n\n\n\nprint\n \n\"Formatting datetime: \"\n\n\nprint\n \nnow\n.\nstrftime\n(\n'%B \n%d\n'\n)\n\n\nprint\n \nnow\n.\nstrftime\n(\n'%m/%m/%y'\n)\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\nprint\n \n\"bithday: \"\n\n\nbirthday\n \n=\n \ndatetime\n.\ndatetime\n.\nstrptime\n(\n'2016-04-21'\n,\n \n'%Y-%m-\n%d\n'\n)\n\n\nprint\n \nbirthday\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\nprint\n \n\"bithday_party: \"\n\n\nbirthday_party\n \n=\n \ndatetime\n.\ndatetime\n.\nstrptime\n(\n'2016-04-22 12:00'\n,\n \n'%Y-%m-\n%d\n %H:%M'\n)\n\n\nprint\n \nbirthday_party\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \n\"\"\n\n\n\n\n\n\n\nResults.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nFormatting datetime: \nApril 08\n04/04/16\n=========================\n\nbithday: \n2016-04-21 00:00:00\n=========================\n\nbithday_party: \n2016-04-22 12:00:00\n=========================\n\n\n\n\n\n\nA little printing app\n\u00b6\n\n\nBuild an application that prints out a date in a sentence.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nimport\n \ndatetime\n\n\n\nanswer_format\n \n=\n \n'%m/\n%d\n'\n\n\nlink_format\n \n=\n \n'%b_\n%d\n'\n\n\nlink\n \n=\n \n'https://en.wikipedia.org/wiki/{}'\n\n\n\nwhile\n \nTrue\n:\n\n    \nanswer\n \n=\n \nraw_input\n(\n\"What date would you like? Please use the MM/DD format. Enter 'q' to quit.\"\n)\n\n    \nanswer2\n \n=\n \nstr\n(\nanswer\n)\n\n    \nif\n \nanswer2\n.\nupper\n()\n \n==\n \n'Q'\n:\n\n        \nbreak\n\n\n    \ntry\n:\n\n        \ndate\n \n=\n \ndatetime\n.\ndatetime\n.\nstrptime\n(\nanswer\n,\n \nanswer_format\n)\n\n        \noutput\n \n=\n \nlink\n.\nformat\n(\ndate\n.\nstrftime\n(\nlink_format\n))\n\n        \nprint\n(\noutput\n)\n\n        \nfile\n \n=\n \nopen\n(\n'output.txt'\n,\n \n'w'\n)\n\n        \nfile\n.\nwrite\n(\noutput\n)\n\n        \nfile\n.\nclose\n()\n\n    \nexcept\n:\n\n        \nprint\n(\n\"That's not a valid date. Please try again.\"\n)\n\n        \nbreak\n\n\n\n\n\n\n\nRun it; it creates an output file. Open output.txt. Copy the link and paste it into a web browser.\n\n\nBuild a Quiz application\n\u00b6\n\n\nBuild the skeleton\n\u00b6\n\n\nBuild an application (questions.py) that add and multiply numbers.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nimport\n \ndatetime\n\n\n\nclass\n \nQuestion\n:\n\n    \nanswer\n \n=\n \nNone\n\n    \ntext\n \n=\n \nNone\n\n\n\n\nclass\n \nAdd\n(\nQuestion\n):\n\n    \ndef\n \n__init__\n(\nself\n,\n \nnum1\n,\n \nnum2\n):\n\n        \nself\n.\ntext\n \n=\n \n'{} + {}'\n.\nformat\n(\nnum1\n,\n \nnum2\n)\n\n        \nself\n.\nanswer\n \n=\n \nnum1\n \n+\n \nnum2\n\n\n\n\nclass\n \nMultiply\n(\nQuestion\n):\n\n    \ndef\n \n__init__\n(\nself\n,\n \nnum1\n,\n \nnum2\n):\n\n        \nself\n.\ntext\n \n=\n \n'{} x {}'\n.\nformat\n(\nnum1\n,\n \nnum2\n)\n\n        \nself\n.\nanswer\n \n=\n \nnum1\n \n*\n \nnum2\n\n\n\n\nprint\n \n\"Add: \"\n\n\nadd1\n \n=\n \nAdd\n(\n5\n,\n \n7\n)\n\n\nprint\n \nadd1\n.\ntext\n\n\nprint\n \nadd1\n.\nanswer\n\n\nprint\n \n\"Multiply: \"\n\n\nmultiply1\n \n=\n \nMultiply\n(\n2\n,\n \n2\n)\n\n\nprint\n \nmultiply1\n.\ntext\n\n\nprint\n \nmultiply1\n.\nanswer\n\n\n\n\n\n\n\nResults.\n\n\n1\n2\n3\n4\n5\n6\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n\n\n\n\n\n\nImport the questions.py module in another script: quiz.py. Build the skeleton.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\nimport\n \ndatetime\n\n\nimport\n \nrandom\n\n\n\nfrom\n \nquestions\n \nimport\n \nAdd\n,\n \nMultiply\n \n# import the other module\n\n\n\n\nclass\n \nQuiz\n:\n\n    \nquestions\n \n=\n \n[]\n\n    \nanswers\n \n=\n \n[]\n\n\n    \ndef\n \n__init__\n(\nself\n):\n\n        \n# generate 10 random questions with numbers from 1 to 10\n\n        \n# add these questions into self.questions\n\n        \npass\n\n\n    \ndef\n \ntake_quiz\n(\nself\n):\n\n        \n# log the start time\n\n        \n# ask all of the questions\n\n        \n# log if they got the question right\n\n        \n# log the end time\n\n        \n# show a summary\n\n        \npass\n\n\n    \ndef\n \nask\n(\nself\n,\n \nquestion\n):\n\n        \n# log the start time\n\n        \n# capture the answer\n\n        \n# check the answer\n\n        \n# log the end time\n\n        \n# if the answer's right, send back True\n\n        \n# otherwise, send back False\n\n        \n# send back the elapses time, too\n\n        \npass\n\n\n\n    \ndef\n \ntotal_correct\n(\nself\n):\n\n        \n# return the total # of correct answers\n\n        \npass\n\n\n\n    \ndef\n \nsummary\n(\nself\n):\n\n        \n# print how many you got right and the total of questions: 5/10\n\n        \n# print the total time for the quiz: 30 seconds!\n\n        \npass\n\n\n\n\n\n\n\nResults (similar).\n\n\n1\n2\n3\n4\n5\n6\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n\n\n\n\n\n\nGenerate questions\n\u00b6\n\n\nComplete some functions and test the script.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\nimport\n \ndatetime\n\n\nimport\n \nrandom\n\n\n\nfrom\n \nquestions\n \nimport\n \nAdd\n,\n \nMultiply\n\n\n\n\nclass\n \nQuiz\n:\n \n# ADD\n\n    \nquestions\n \n=\n \n[]\n\n    \nanswers\n \n=\n \n[]\n\n\n    \ndef\n \n__init__\n(\nself\n):\n\n        \n\"\"\"\n\n\n        generate 10 random questions with numbers from 1 to 10\n\n\n        add these questions into self.questions\n\n\n        \"\"\"\n\n        \nquestion_types\n \n=\n \n(\nAdd\n,\n \nMultiply\n)\n\n\n        \nfor\n \n_\n \nin\n \nrange\n(\n10\n):\n \n# _ we don't care if it's 1, 5 or 12, as long as it is a number\n\n            \nnum1\n \n=\n \nrandom\n.\nrandint\n(\n1\n,\n \n10\n)\n\n            \nnum2\n \n=\n \nrandom\n.\nrandint\n(\n1\n,\n \n10\n)\n\n            \nquestion\n \n=\n \nrandom\n.\nchoice\n(\nquestion_types\n)(\nnum1\n,\n \nnum2\n)\n\n            \n# add these questions into self.questions\n\n            \nself\n.\nquestions\n.\nappend\n(\nquestion\n)\n\n\n    \ndef\n \ntake_quiz\n(\nself\n):\n\n        \n# log the start time\n\n        \n# ask all of the questions\n\n        \n# log if they got the question right\n\n        \n# log the end time\n\n        \n# show a summary\n\n        \npass\n\n\n    \ndef\n \nask\n(\nself\n,\n \nquestion\n):\n\n        \n# log the start time\n\n        \n# capture the answer\n\n        \n# check the answer\n\n        \n# log the end time\n\n        \n# if the answer's right, send back True\n\n        \n# otherwise, send back False\n\n        \n# send back the elapses time, too\n\n        \npass\n\n\n\n    \ndef\n \ntotal_correct\n(\nself\n):\n \n# ADD\n\n        \n\"\"\"return the total # of correct answers\"\"\"\n\n        \ntotal\n \n=\n \n0\n\n        \nfor\n \nanswer\n \nin\n \nself\n.\nanswers\n:\n\n            \nif\n \nanswer\n[\n0\n]:\n\n                \ntotal\n \n+=\n \n1\n\n        \nreturn\n \ntotal\n\n\n    \ndef\n \nsummary\n(\nself\n):\n \n# ADD\n\n        \n\"\"\"\n\n\n        print how many you got right and the total of questions: 5/10\n\n\n        print the total time for the quiz: 30 seconds!\n\n\n        \"\"\"\n\n        \nprint\n(\n\"You got {} out of {} right.\"\n.\nformat\n(\n\n                \nself\n.\ntotal_correct\n(),\n \nlen\n(\nself\n.\nquestions\n)\n\n        \n))\n\n        \nprint\n(\n\"It took you {} seconds total.\"\n.\nformat\n(\n\n                \n(\nself\n.\nend_time\n-\nself\n.\nstart_time\n)\n.\nseconds\n\n        \n))\n\n\n\n\nquiz1\n \n=\n \nQuiz\n()\n\n\nprint\n \nquiz1\n.\nanswers\n\n\nprint\n \nquiz1\n.\nquestions\n\n\nprint\n \n\"=\"\n \n*\n \n25\n\n\nprint\n \nquiz1\n.\nquestions\n[\n0\n]\n.\ntext\n\n\nprint\n \nquiz1\n.\nquestions\n[\n0\n]\n.\nanswer\n\n\n\n\n\n\n\nResults.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n[]\n[<questions.Add instance at 0x00000000022B7E88>, <questions.Multiply instance at 0x00000000022FBC88>, <questions.Multiply instance at 0x00000000022FB688>, <questions.Multiply instance at 0x00000000022FBDC8>, <questions.Add instance at 0x00000000022FBE08>, <questions.Multiply instance at 0x00000000022FBE48>, <questions.Multiply instance at 0x00000000022FBE88>, <questions.Add instance at 0x00000000022FBEC8>, <questions.Multiply instance at 0x00000000022FBF08>, <questions.Multiply instance at 0x00000000022FBF48>]\n=========================\n3 + 1\n4\n\n\n\n\n\n\nFinalize the application\n\u00b6\n\n\nComplete the script and test it.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\nimport\n \ndatetime\n\n\nimport\n \nrandom\n\n\n\nfrom\n \nquestions\n \nimport\n \nAdd\n,\n \nMultiply\n\n\n\n\nclass\n \nQuiz\n:\n\n    \nquestions\n \n=\n \n[]\n\n    \nanswers\n \n=\n \n[]\n\n\n    \ndef\n \n__init__\n(\nself\n):\n\n        \n\"\"\"\n\n\n        generate 10 random questions with numbers from 1 to 10\n\n\n        add these questions into self.questions\n\n\n        \"\"\"\n\n        \nquestion_types\n \n=\n \n(\nAdd\n,\n \nMultiply\n)\n\n\n        \nfor\n \n_\n \nin\n \nrange\n(\n10\n):\n \n# _ we don't care if it's 1, 5 or 12, as long as it is a number\n\n            \nnum1\n \n=\n \nrandom\n.\nrandint\n(\n1\n,\n \n10\n)\n\n            \nnum2\n \n=\n \nrandom\n.\nrandint\n(\n1\n,\n \n10\n)\n\n            \nquestion\n \n=\n \nrandom\n.\nchoice\n(\nquestion_types\n)(\nnum1\n,\n \nnum2\n)\n\n            \n# add these questions into self.questions\n\n            \nself\n.\nquestions\n.\nappend\n(\nquestion\n)\n\n\n    \ndef\n \ntake_quiz\n(\nself\n):\n \n# ADD\n\n        \n\"\"\"\n\n\n        log the start time, ask all of the questions\n\n\n        log if they got the question right, log the end time\n\n\n        show a summary\n\n\n        \"\"\"\n\n        \n# log the start time\n\n        \nself\n.\nstart_time\n \n=\n \ndatetime\n.\ndatetime\n.\nnow\n()\n\n\n        \n# ask all of the questions\n\n        \nfor\n \nquestion\n \nin\n \nself\n.\nquestions\n:\n\n            \nself\n.\nanswers\n.\nappend\n(\nself\n.\nask\n(\nquestion\n))\n\n        \nelse\n:\n \n# if the loop reached the end, so else happends\n\n            \nself\n.\nend_time\n \n=\n \ndatetime\n.\ndatetime\n.\nnow\n()\n\n\n        \n# show a summary\n\n        \nreturn\n \nself\n.\nsummary\n()\n     \n\n\n    \ndef\n \nask\n(\nself\n,\n \nquestion\n):\n \n# ADD\n\n        \n\"\"\"\n\n\n        log the start time, capture the answer, check the answer\n\n\n        log the end time, if the answer's right, send back True\n\n\n        otherwise, send back False, send back the elapses time, too\n\n\n        \"\"\"\n\n        \ncorrect\n \n=\n \nFalse\n\n        \n# log the start time\n\n        \nquestion_start\n \n=\n \ndatetime\n.\ndatetime\n.\nnow\n()\n\n\n        \n# capture the answer\n\n        \nanswer\n \n=\n \nraw_input\n(\nquestion\n.\ntext\n \n+\n \n' = '\n)\n\n\n        \n# check the answer\n\n        \nif\n \nanswer\n \n==\n \nstr\n(\nquestion\n.\nanswer\n):\n\n            \ncorrect\n \n=\n \nTrue\n\n\n        \n# log the end time\n\n        \nquestion_end\n \n=\n \ndatetime\n.\ndatetime\n.\nnow\n()\n\n\n        \n# if the answer's right, send back True\n\n        \n# otherwise, send back False\n\n        \n# send back the elapses time, too\n\n        \nreturn\n \ncorrect\n,\n \nquestion_end\n \n-\n \nquestion_start\n\n\n\n    \ndef\n \ntotal_correct\n(\nself\n):\n\n        \n\"\"\"return the total # of correct answers\"\"\"\n\n        \ntotal\n \n=\n \n0\n\n        \nfor\n \nanswer\n \nin\n \nself\n.\nanswers\n:\n\n            \nif\n \nanswer\n[\n0\n]:\n\n                \ntotal\n \n+=\n \n1\n\n        \nreturn\n \ntotal\n\n\n    \ndef\n \nsummary\n(\nself\n):\n\n        \n\"\"\"\n\n\n        print how many you got right and the total of questions: 5/10\n\n\n        print the total time for the quiz: 30 seconds!\n\n\n        \"\"\"\n\n        \nprint\n(\n\"You got {} out of {} right.\"\n.\nformat\n(\n\n                \nself\n.\ntotal_correct\n(),\n \nlen\n(\nself\n.\nquestions\n)\n\n        \n))\n\n        \nprint\n(\n\"It took you {} seconds total.\"\n.\nformat\n(\n\n                \n(\nself\n.\nend_time\n-\nself\n.\nstart_time\n)\n.\nseconds\n\n        \n))\n\n\n\n\nQuiz\n()\n.\ntake_quiz\n()\n \n# ADD\n\n\n\n\n\n\n\nThe results are dynamic. We would get something that look like the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n7 x 6 = 54\n9 x 10 = 90\n4 x 3 = 12\n3 + 6 = 9\n5 + 6 = 11\n10 x 6 = 60\n4 x 6 = 24\n9 + 9 = 18\n2 x 5 = 10\n8 + 3 = 11\nYou got 9 out of 10 rights.\nIt took you 21 seconds total.\n\n\n\n\n\n\nTime zones\n\u00b6\n\n\nTimezones are major challenges for websites and web frameworks. The following is coded in Python 3 since the most common Python frameworks (Flask, Django, Pyramid) at the time this documentation is written work under Python 3. One of the reason is the multi-language ability.\n\n\nTime zones with \ndatatime\n only\n\u00b6\n\n\nWe build two timezone-aware variables.\n\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \ndatetime\n\n\n\npacific\n \n=\n \ndatetime\n.\ntimezone\n(\ndatetime\n.\ntimedelta\n(\nhours\n=-\n8\n))\n\n\neastern\n \n=\n \ndatetime\n.\ntimezone\n(\ndatetime\n.\ntimedelta\n(\nhours\n=-\n5\n))\n\n\n\nprint\n(\npacific\n)\n\n\nprint\n(\neastern\n)\n\n\n\n\n\n\n\nResults.\n\n\n1\n2\nUTC\n-\n08\n:\n00\n\n\nUTC\n-\n05\n:\n00\n\n\n\n\n\n\n\nWe build one timezone-naive variable and one timezone-aware variable.\n\n\n1\n2\n3\n4\n5\n6\n7\n# ...\n\n\n\nnaive\n \n=\n \ndatetime\n.\ndatetime\n(\n2014\n,\n \n4\n,\n \n21\n,\n \n9\n)\n\n\nprint\n(\nnaive\n)\n\n\n\naware\n \n=\n \ndatetime\n.\ndatetime\n(\n2014\n,\n \n4\n,\n \n21\n,\n \n9\n,\n \ntzinfo\n=\npacific\n)\n\n\nprint\n(\naware\n)\n\n\n\n\n\n\n\nResults.\n\n\n1\n2\n2014\n-\n04\n-\n21\n \n09\n:\n00\n:\n00\n\n\n2014\n-\n04\n-\n21\n \n09\n:\n00\n:\n00\n-\n08\n:\n00\n\n\n\n\n\n\n\nShow these in eastern time.\n\n\n1\n2\n3\n# ...\n\n\n\nprint\n(\nnaive\n.\nastimezone\n(\neastern\n))\n\n\n\n\n\n\n\nResults: cannot be applied to a naive datetime.\n\n\n1\n2\n3\n# ...\n\n\n\nprint\n(\naware\n.\nastimezone\n(\neastern\n))\n\n\n\n\n\n\n\nResults.\n\n\n1\n2014-04-21 12:00:00-05:00\n\n\n\n\n\n\nOther interesting time zones.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# ...\n\n\n\naukland\n \n=\n \ndatetime\n.\ntimezone\n(\ndatetime\n.\ntimedelta\n(\nhours\n=\n13\n))\n\n\nprint\n(\naukland\n)\n\n\nprint\n(\naware\n.\nastimezone\n(\naukland\n))\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\nmumbai\n \n=\n \ndatetime\n.\ntimezone\n(\ndatetime\n.\ntimedelta\n(\nhours\n=\n13\n,\n \nminutes\n=\n30\n))\n\n\nprint\n(\nmumbai\n)\n\n\nprint\n(\naware\n.\nastimezone\n(\nmumbai\n))\n\n\n\n\n\n\n\nResults.\n\n\n1\n2\n3\n4\n5\nUTC+13:00\n2014-04-22 06:00:00+13:00\n=========================\nUTC+05:30\n2014-04-21 22:30:00+05:30\n\n\n\n\n\n\nTime zones with \ndatatime\n and \npytz\n\u00b6\n\n\npytz\n simplify things (a lot!).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nimport\n \ndatetime\n\n\nimport\n \npytz\n\n\n\npacific\n \n=\n \npytz\n.\ntimezone\n(\n'US/Pacific'\n)\n\n\neastern\n \n=\n \npytz\n.\ntimezone\n(\n'US/Eastern'\n)\n\n\n\nfmt\n \n=\n \n'%Y-%m-\n%d\n %H:%M:%S %Z%z'\n\n\nutc\n \n=\n \npytz\n.\nutc\n\n\n\nprint\n(\n\"set: \"\n)\n\n\nstart\n \n=\n \npacific\n.\nlocalize\n(\ndatetime\n.\ndatetime\n(\n2014\n,\n \n4\n,\n \n21\n,\n \n9\n))\n\n\nprint\n(\nstart\n.\nstrftime\n(\nfmt\n))\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\nprint\n(\n\"convert: \"\n)\n\n\nstart_eastern\n \n=\n \nstart\n.\nastimezone\n(\neastern\n)\n\n\nprint\n(\nstart_eastern\n)\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\nprint\n(\nstart\n)\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\n\n\n\n\nResults.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nset: \n2014-04-21 09:00:00 PDT-0700\n=========================\nconvert: \n2014-04-21 12:00:00-04:00\n=========================\n2014-04-21 09:00:00-07:00\n=========================\n\n\n\n\n\n\nMore conversions.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# ...\n\n\n\nprint\n(\n\"set: \"\n)\n\n\nstart_utc\n \n=\n \ndatetime\n.\ndatetime\n(\n2014\n,\n \n4\n,\n \n21\n,\n \n1\n,\n \ntzinfo\n=\nutc\n)\n\n\nprint\n(\nstart_utc\n.\nstrftime\n(\nfmt\n))\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\nprint\n(\n\"convert: \"\n)\n\n\nstart_pacific\n \n=\n \nstart_utc\n.\nastimezone\n(\npacific\n)\n\n\nprint\n(\nstart_pacific\n)\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\n\n\n\n\nResults.\n\n\n1\n2\n3\n4\n5\n6\nset: \n2014-04-21 01:00:00 UTC+0000\n=========================\nconvert: \n2014-04-20 18:00:00-07:00\n=========================\n\n\n\n\n\n\nSet a date-time and convert it.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n# ...\n\n\n\nprint\n(\n\"set aukland and mumbai\"\n)\n\n\nauckland\n \n=\n \npytz\n.\ntimezone\n(\n'Pacific/Auckland'\n)\n\n\nmumbai\n \n=\n \npytz\n.\ntimezone\n(\n'Asia/Calcutta'\n)\n\n\n\nprint\n(\n\"create a date\"\n)\n\n\napollo_13_naive\n \n=\n \ndatetime\n.\ndatetime\n(\n1970\n,\n \n4\n,\n \n11\n,\n \n14\n,\n \n13\n)\n\n\napollo_13_eastern\n \n=\n \neastern\n.\nlocalize\n(\napollo_13_naive\n)\n\n\n\nprint\n(\n\"print it: \"\n)\n\n\nprint\n(\napollo_13_naive\n)\n\n\nprint\n(\napollo_13_eastern\n)\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\nprint\n(\n\"convert it, change location: \"\n)\n\n\napollo_13_utc\n \n=\n \napollo_13_eastern\n.\nastimezone\n(\nutc\n)\n\n\nprint\n(\napollo_13_utc\n.\nastimezone\n(\npacific\n)\n.\nstrftime\n(\nfmt\n))\n\n\nprint\n(\napollo_13_utc\n.\nastimezone\n(\nauckland\n))\n\n\nprint\n(\napollo_13_utc\n.\nastimezone\n(\nmumbai\n))\n\n\n\n\n\n\n\nResults.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nset aukland and mumbai\ncreate a date\nprint it: \n1970-04-11 14:13:00\n1970-04-11 14:13:00-05:00\n=========================\nconvert it, change location: \n1970-04-11 11:13:00 PST-0800\n1970-04-12 07:13:00+12:00\n1970-04-12 00:43:00+05:30\n\n\n\n\n\n\nFind out more about \npytz\n\u00b6\n\n\nFind out about timezones: \nprint(pytz.all_timezones)\n. Or focus on a country\u2019s timezones. The US.\n\n\n1\nprint\n(\npytz\n.\ncountry_timezones\n[\n'us'\n])\n\n\n\n\n\n\n\nResults.\n\n\n1\n['America/New_York', 'America/Detroit', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Indiana/Indianapolis', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Chicago', 'America/Indiana/Tell_City', 'America/Indiana/Knox', 'America/Menominee', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/North_Dakota/Beulah', 'America/Denver', 'America/Boise', 'America/Phoenix', 'America/Los_Angeles', 'America/Anchorage', 'America/Juneau', 'America/Sitka', 'America/Metlakatla', 'America/Yakutat', 'America/Nome', 'America/Adak', 'Pacific/Honolulu']\n\n\n\n\n\n\nCanada.\n\n\n1\nprint\n(\npytz\n.\ncountry_timezones\n[\n'ca'\n])\n\n\n\n\n\n\n\nResults.\n\n\n1\n['America/St_Johns', 'America/Halifax', 'America/Glace_Bay', 'America/Moncton', 'America/Goose_Bay', 'America/Blanc-Sablon', 'America/Toronto', 'America/Nipigon', 'America/Thunder_Bay', 'America/Iqaluit', 'America/Pangnirtung', 'America/Atikokan', 'America/Winnipeg', 'America/Rainy_River', 'America/Resolute', 'America/Rankin_Inlet', 'America/Regina', 'America/Swift_Current', 'America/Edmonton', 'America/Cambridge_Bay', 'America/Yellowknife', 'America/Inuvik', 'America/Creston', 'America/Dawson_Creek', 'America/Fort_Nelson', 'America/Vancouver', 'America/Whitehorse', 'America/Dawson']\n\n\n\n\n\n\nRussia.\n\n\n1\nprint\n(\npytz\n.\ncountry_timezones\n[\n'ru'\n])\n\n\n\n\n\n\n\nResults.\n\n\n1\n['Europe/Kaliningrad', 'Europe/Moscow', 'Europe/Simferopol', 'Europe/Volgograd', 'Europe/Kirov', 'Europe/Astrakhan', 'Europe/Saratov', 'Europe/Ulyanovsk', 'Europe/Samara', 'Asia/Yekaterinburg', 'Asia/Omsk', 'Asia/Novosibirsk', 'Asia/Barnaul', 'Asia/Tomsk', 'Asia/Novokuznetsk', 'Asia/Krasnoyarsk', 'Asia/Irkutsk', 'Asia/Chita', 'Asia/Yakutsk', 'Asia/Khandyga', 'Asia/Vladivostok', 'Asia/Ust-Nera', 'Asia/Magadan', 'Asia/Sakhalin', 'Asia/Srednekolymsk', 'Asia/Kamchatka', 'Asia/Anadyr']\n\n\n\n\n\n\nBuild a script to convert time zones\n\u00b6\n\n\nBuild a script that takes a datetime and give it back in 6 other timezones. For any given datetime, an appointment for example, we can know the equivalent elsewhere in the world.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\nfrom\n \ndatetime\n \nimport\n \ndatetime\n\n\n\nimport\n \npytz\n\n\n\nOTHER_TIMEZONES\n \n=\n \n[\n\n    \npytz\n.\ntimezone\n(\n'US/Eastern'\n),\n\n    \npytz\n.\ntimezone\n(\n'Pacific/Auckland'\n),\n\n    \npytz\n.\ntimezone\n(\n'Asia/Calcutta'\n),\n\n    \npytz\n.\ntimezone\n(\n'UTC'\n),\n\n    \npytz\n.\ntimezone\n(\n'Europe/Paris'\n),\n\n    \npytz\n.\ntimezone\n(\n'Africa/Khartoum'\n),\n\n\n]\n\n\n\nfmt\n \n=\n \n'%Y-%m-\n%d\n %H:%M:%S %Z%z'\n\n\n\nwhile\n \nTrue\n:\n\n    \ndate_input\n \n=\n \ninput\n(\n\"When is your meeting? Please use MM/DD/YYYY HH:MM format. \"\n)\n\n    \ntry\n:\n\n        \nlocal_date\n \n=\n \ndatetime\n.\nstrptime\n(\ndate_input\n,\n \n'%m/\n%d\n/%Y %H:%M'\n)\n\n    \nexcept\n \nValueError\n:\n\n        \nprint\n(\n\"{} doesn't seem to be a valid date & time.\"\n.\nformat\n(\ndate_input\n))\n\n    \nelse\n:\n\n        \nlocal_date\n \n=\n \npytz\n.\ntimezone\n(\n'US/Pacific'\n)\n.\nlocalize\n(\nlocal_date\n)\n\n        \nutc_date\n \n=\n \nlocal_date\n.\nastimezone\n(\npytz\n.\nutc\n)\n\n\n        \noutput\n \n=\n \n[]\n\n        \nfor\n \ntimezone\n \nin\n \nOTHER_TIMEZONES\n:\n\n            \noutput\n.\nappend\n(\nutc_date\n.\nastimezone\n(\ntimezone\n))\n\n        \nfor\n \nappointment\n \nin\n \noutput\n:\n\n            \nprint\n(\nappointment\n.\nstrftime\n(\nfmt\n))\n\n        \nbreak\n\n\n\n\n\n\n\nResults (1 inputs, 6 outputs).\n\n\n1\n2\n3\n4\n5\n6\n7\nWhen is your meeting? Please use MM/DD/YYYY HH:MM format. 01/01/2018 13:00\n2018-01-01 16:00:00 EST-0500\n2018-01-02 10:00:00 NZDT+1300\n2018-01-02 02:30:00 IST+0530\n2018-01-01 21:00:00 UTC+0000\n2018-01-01 22:00:00 CET+0100\n2018-01-02 00:00:00 EAT+0300",
            "title": "Datetime"
        },
        {
            "location": "/Datetime/#now-or-any-date-time",
            "text": "The  datatime  library has handy built-in functions:  date ,  time ,  datetime ,  timedelta , and  tzinfo . The following script demonstrates some of the functionalities.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 import   datetime  print   \"The datatime library: \"  print   dir ( datetime )  print   \"=\"   *   25  print   \"The current datetime: \"  print   datetime . datetime . now ()  print   \"...in a variable: \"  test_start   =   datetime . datetime . now ()  print   test_start  print   \"=\"   *   25  print   \"Replace the attributes: new formatting.\"  test_start   =   test_start . replace ( hour = 7 ,   minute = 39 ,   second   =   0 ,   microsecond = 0 )  print   test_start  print   \"=\"   *   25    Results.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 import   datetime  The   datatime   library :   [ 'MAXYEAR' ,   'MINYEAR' ,   '__doc__' ,   '__name__' ,   '__package__' ,   'date' ,   'datetime' ,   'datetime_CAPI' ,   'time' ,   'timedelta' ,   'tzinfo' ]  =========================  The   current   datetime :   2016 - 04 - 08   10 : 03 : 06.120000  ... in   a   variable :   2016 - 04 - 08   10 : 03 : 06.120000  =========================  Replace   the   attributes :   new   formatting .  2016 - 04 - 08   07 : 39 : 00  =========================",
            "title": "now or any date-time"
        },
        {
            "location": "/Datetime/#date-time-difference",
            "text": "Create a date-time and compute the time difference.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 import   datetime  print   \"Start: \"  print   test_start  print   \"=\"   *   25  duration   =   datetime . datetime . now ()   -   test_start  print   \"duration = datetime.datetime.now() - test_start: \"  print   \"duration = \" ,   duration  print   \"day = \" ,   duration . days  print   \"microseconds = \" ,   duration . microseconds  print   \"seconds = \" ,   duration . seconds  print   \"hours (round(seconds/3600)) = \" ,   round ( duration . seconds / 3600 )    Results.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 Start: \n2016-04-08 07:39:00\n=========================\n\nduration = datetime.datetime.now() - test_start: \nduration =  2:24:06.120000\nday =  0\nmicroseconds =  120000\nseconds =  8646\nhours (round(seconds/3600)) =  2.0\nminutes (round(seconds/60)) =  144.0\n=========================",
            "title": "Date-time difference"
        },
        {
            "location": "/Datetime/#measure-duration-with-timedelta",
            "text": "Create a delta.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 print   \"datetime.datetime.now():\"  print   datetime . datetime . now ()  print   \"datetime.datetime.now() + datetime.timedelta(days=3): \"  print   datetime . datetime . now ()   +   datetime . timedelta ( days = 3 )  print   \"...........................................(days=-5): \"  print   datetime . datetime . now ()   +   datetime . timedelta ( days =- 5 )  print   \"...........................................(days=-1): \"  print   datetime . datetime . now ()   +   datetime . timedelta ( days =- 1 )  print   \"=\"   *   25  print   \"\"  print   \"datetime.datetime.now() + datetime.timedelta(hours=1): \"  print   datetime . datetime . now ()   +   datetime . timedelta ( hours = 1 )  print   \"datetime.datetime.now() + datetime.timedelta(0, 3600): \"  print   datetime . datetime . now ()   +   datetime . timedelta ( 0 ,   3600 )  print   \"=\"   *   25  print   \"\"  work   =   9  print   \"work = \" ,   work  print   \"datetime.datetime.now() + datetime.timedelta(hours=work):\"  print   datetime . datetime . now ()   +   datetime . timedelta ( hours = work )  print   \"=\"   *   25  print   \"\"    Results.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 datetime.datetime.now():\n2016-04-08 10:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(days=3): \n2016-04-11 10:06:25.895000\n...........................................(days=-5): \n2016-04-03 10:06:25.895000\n...........................................(days=-1): \n2016-04-07 10:06:25.895000\n=========================\n\ndatetime.datetime.now() + datetime.timedelta(hours=1): \n2016-04-08 11:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(0, 3600): \n2016-04-08 11:06:25.895000\n=========================\n\nwork =  9\ndatetime.datetime.now() + datetime.timedelta(hours=work):\n2016-04-08 19:06:25.895000\n=========================   Use  timedelta .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35 print   \"Simplify: \"  now   =   datetime . datetime . now ()  print   \"now: \"  print   now  print   \"now.date: \"  print   now . date ()  print   \"now.time: \"  print   now . time ()  print   \"=\"   *   25  print   \"\"  print   \"1 hour: \"  hour   =   datetime . timedelta ( hours = 1 )  print   hour  print   \"=\"   *   25  print   \"\"  print   \"Add 1 day: \"  tomorrow   =   datetime . datetime . now () . replace ( hour = 9 ,   minute = 0 )   +   datetime . timedelta ( days = 1 )  print   tomorrow  print   \"Add 1 day (2): \"  workday   =   datetime . timedelta ( hours = 8 )  print   tomorrow   +   workday  print   \"=\"   *   25  print   \"\"  print   \"Appointment: \"  appointment   =   datetime . timedelta ( minutes = 45 )  # year, month, day, hour, minute  start   =    datetime . datetime ( 2016 ,   8 ,   17 ,   12 ,   45 )  end   =   start   +   appointment  print   end  print   \"=\"   *   25  print   \"\"    Results.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 Simplify: \nnow: \n2016-04-08 10:16:11.476000\nnow.date: \n2016-04-08\nnow.time: \n10:16:11.476000\n=========================\n\n1 hour: \n1:00:00\n=========================\n\nAdd 1 day: \n2016-04-09 09:00:11.476000\nAdd 1 day (2): \n2016-04-09 17:00:11.476000\n=========================\n\nAppointment: \n2016-08-17 13:30:00\n=========================",
            "title": "Measure duration with timedelta"
        },
        {
            "location": "/Datetime/#now-vs-today",
            "text": "The difference between  now  and  today  is\u2026  1\n2\n3\n4\n5\n6\n7\n8 import   datetime  now   =   datetime . datetime . now ()  today   =   datetime . datetime . today ()  print   now  print   today  print   \"=\"   *   25  print   \"\"    Results.  1\n2\n3 2016-04-08 10:34:28.444000\n2016-04-08 10:34:28.444000\n=========================   \u2026 now  can take a timezone. We deal with timezones further down.  Today \u2026   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 import   datetime  today   =   datetime . datetime . combine ( datetime . date . today (),   datetime . time ())  print   today   # today at midnight  print   today . month  print   today . hour  print   today . year  print   today . weekday ()   # 0 = Monday, 1, 2, 3, 4  print   \"=\"   *   25  print   \"\"    Results.  1\n2\n3\n4\n5\n6 2016-04-08 00:00:00\n4\n0\n2016\n5\n=========================",
            "title": "now vs. today"
        },
        {
            "location": "/Datetime/#formatting-date-time",
            "text": "Format date and time.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   datetime  now   =   datetime . datetime . now ()  print   now  # how to better present  # strftime (strings-from-time) or turn datetime digits into strings  print   \"formatting datetime:\"  print   now . strftime ( '%B  %d ' )  print   now . strftime ( '%m/%m/%y' )    Results.  1\n2\n3\n4 2016-04-08 11:08:26.757000\nformatting datetime:\nApril 08\n04/04/16   strptime  (strings-parse-time) turns strings into datetime digits. Look for help online for date and time types.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 import   datetime  print   \"Formatting datetime: \"  print   now . strftime ( '%B  %d ' )  print   now . strftime ( '%m/%m/%y' )  print   \"=\"   *   25  print   \"\"  print   \"bithday: \"  birthday   =   datetime . datetime . strptime ( '2016-04-21' ,   '%Y-%m- %d ' )  print   birthday  print   \"=\"   *   25  print   \"\"  print   \"bithday_party: \"  birthday_party   =   datetime . datetime . strptime ( '2016-04-22 12:00' ,   '%Y-%m- %d  %H:%M' )  print   birthday_party  print   \"=\"   *   25  print   \"\"    Results.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 Formatting datetime: \nApril 08\n04/04/16\n=========================\n\nbithday: \n2016-04-21 00:00:00\n=========================\n\nbithday_party: \n2016-04-22 12:00:00\n=========================",
            "title": "Formatting date-time"
        },
        {
            "location": "/Datetime/#a-little-printing-app",
            "text": "Build an application that prints out a date in a sentence.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 import   datetime  answer_format   =   '%m/ %d '  link_format   =   '%b_ %d '  link   =   'https://en.wikipedia.org/wiki/{}'  while   True : \n     answer   =   raw_input ( \"What date would you like? Please use the MM/DD format. Enter 'q' to quit.\" ) \n     answer2   =   str ( answer ) \n     if   answer2 . upper ()   ==   'Q' : \n         break \n\n     try : \n         date   =   datetime . datetime . strptime ( answer ,   answer_format ) \n         output   =   link . format ( date . strftime ( link_format )) \n         print ( output ) \n         file   =   open ( 'output.txt' ,   'w' ) \n         file . write ( output ) \n         file . close () \n     except : \n         print ( \"That's not a valid date. Please try again.\" ) \n         break    Run it; it creates an output file. Open output.txt. Copy the link and paste it into a web browser.",
            "title": "A little printing app"
        },
        {
            "location": "/Datetime/#build-a-quiz-application",
            "text": "",
            "title": "Build a Quiz application"
        },
        {
            "location": "/Datetime/#build-the-skeleton",
            "text": "Build an application (questions.py) that add and multiply numbers.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 import   datetime  class   Question : \n     answer   =   None \n     text   =   None  class   Add ( Question ): \n     def   __init__ ( self ,   num1 ,   num2 ): \n         self . text   =   '{} + {}' . format ( num1 ,   num2 ) \n         self . answer   =   num1   +   num2  class   Multiply ( Question ): \n     def   __init__ ( self ,   num1 ,   num2 ): \n         self . text   =   '{} x {}' . format ( num1 ,   num2 ) \n         self . answer   =   num1   *   num2  print   \"Add: \"  add1   =   Add ( 5 ,   7 )  print   add1 . text  print   add1 . answer  print   \"Multiply: \"  multiply1   =   Multiply ( 2 ,   2 )  print   multiply1 . text  print   multiply1 . answer    Results.  1\n2\n3\n4\n5\n6 Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4   Import the questions.py module in another script: quiz.py. Build the skeleton.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43 import   datetime  import   random  from   questions   import   Add ,   Multiply   # import the other module  class   Quiz : \n     questions   =   [] \n     answers   =   [] \n\n     def   __init__ ( self ): \n         # generate 10 random questions with numbers from 1 to 10 \n         # add these questions into self.questions \n         pass \n\n     def   take_quiz ( self ): \n         # log the start time \n         # ask all of the questions \n         # log if they got the question right \n         # log the end time \n         # show a summary \n         pass \n\n     def   ask ( self ,   question ): \n         # log the start time \n         # capture the answer \n         # check the answer \n         # log the end time \n         # if the answer's right, send back True \n         # otherwise, send back False \n         # send back the elapses time, too \n         pass \n\n\n     def   total_correct ( self ): \n         # return the total # of correct answers \n         pass \n\n\n     def   summary ( self ): \n         # print how many you got right and the total of questions: 5/10 \n         # print the total time for the quiz: 30 seconds! \n         pass    Results (similar).  1\n2\n3\n4\n5\n6 Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4",
            "title": "Build the skeleton"
        },
        {
            "location": "/Datetime/#generate-questions",
            "text": "Complete some functions and test the script.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70 import   datetime  import   random  from   questions   import   Add ,   Multiply  class   Quiz :   # ADD \n     questions   =   [] \n     answers   =   [] \n\n     def   __init__ ( self ): \n         \"\"\"          generate 10 random questions with numbers from 1 to 10          add these questions into self.questions          \"\"\" \n         question_types   =   ( Add ,   Multiply ) \n\n         for   _   in   range ( 10 ):   # _ we don't care if it's 1, 5 or 12, as long as it is a number \n             num1   =   random . randint ( 1 ,   10 ) \n             num2   =   random . randint ( 1 ,   10 ) \n             question   =   random . choice ( question_types )( num1 ,   num2 ) \n             # add these questions into self.questions \n             self . questions . append ( question ) \n\n     def   take_quiz ( self ): \n         # log the start time \n         # ask all of the questions \n         # log if they got the question right \n         # log the end time \n         # show a summary \n         pass \n\n     def   ask ( self ,   question ): \n         # log the start time \n         # capture the answer \n         # check the answer \n         # log the end time \n         # if the answer's right, send back True \n         # otherwise, send back False \n         # send back the elapses time, too \n         pass \n\n\n     def   total_correct ( self ):   # ADD \n         \"\"\"return the total # of correct answers\"\"\" \n         total   =   0 \n         for   answer   in   self . answers : \n             if   answer [ 0 ]: \n                 total   +=   1 \n         return   total \n\n     def   summary ( self ):   # ADD \n         \"\"\"          print how many you got right and the total of questions: 5/10          print the total time for the quiz: 30 seconds!          \"\"\" \n         print ( \"You got {} out of {} right.\" . format ( \n                 self . total_correct (),   len ( self . questions ) \n         )) \n         print ( \"It took you {} seconds total.\" . format ( \n                 ( self . end_time - self . start_time ) . seconds \n         ))  quiz1   =   Quiz ()  print   quiz1 . answers  print   quiz1 . questions  print   \"=\"   *   25  print   quiz1 . questions [ 0 ] . text  print   quiz1 . questions [ 0 ] . answer    Results.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n[]\n[<questions.Add instance at 0x00000000022B7E88>, <questions.Multiply instance at 0x00000000022FBC88>, <questions.Multiply instance at 0x00000000022FB688>, <questions.Multiply instance at 0x00000000022FBDC8>, <questions.Add instance at 0x00000000022FBE08>, <questions.Multiply instance at 0x00000000022FBE48>, <questions.Multiply instance at 0x00000000022FBE88>, <questions.Add instance at 0x00000000022FBEC8>, <questions.Multiply instance at 0x00000000022FBF08>, <questions.Multiply instance at 0x00000000022FBF48>]\n=========================\n3 + 1\n4",
            "title": "Generate questions"
        },
        {
            "location": "/Datetime/#finalize-the-application",
            "text": "Complete the script and test it.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91 import   datetime  import   random  from   questions   import   Add ,   Multiply  class   Quiz : \n     questions   =   [] \n     answers   =   [] \n\n     def   __init__ ( self ): \n         \"\"\"          generate 10 random questions with numbers from 1 to 10          add these questions into self.questions          \"\"\" \n         question_types   =   ( Add ,   Multiply ) \n\n         for   _   in   range ( 10 ):   # _ we don't care if it's 1, 5 or 12, as long as it is a number \n             num1   =   random . randint ( 1 ,   10 ) \n             num2   =   random . randint ( 1 ,   10 ) \n             question   =   random . choice ( question_types )( num1 ,   num2 ) \n             # add these questions into self.questions \n             self . questions . append ( question ) \n\n     def   take_quiz ( self ):   # ADD \n         \"\"\"          log the start time, ask all of the questions          log if they got the question right, log the end time          show a summary          \"\"\" \n         # log the start time \n         self . start_time   =   datetime . datetime . now () \n\n         # ask all of the questions \n         for   question   in   self . questions : \n             self . answers . append ( self . ask ( question )) \n         else :   # if the loop reached the end, so else happends \n             self . end_time   =   datetime . datetime . now () \n\n         # show a summary \n         return   self . summary ()      \n\n\n     def   ask ( self ,   question ):   # ADD \n         \"\"\"          log the start time, capture the answer, check the answer          log the end time, if the answer's right, send back True          otherwise, send back False, send back the elapses time, too          \"\"\" \n         correct   =   False \n         # log the start time \n         question_start   =   datetime . datetime . now () \n\n         # capture the answer \n         answer   =   raw_input ( question . text   +   ' = ' ) \n\n         # check the answer \n         if   answer   ==   str ( question . answer ): \n             correct   =   True \n\n         # log the end time \n         question_end   =   datetime . datetime . now () \n\n         # if the answer's right, send back True \n         # otherwise, send back False \n         # send back the elapses time, too \n         return   correct ,   question_end   -   question_start \n\n\n     def   total_correct ( self ): \n         \"\"\"return the total # of correct answers\"\"\" \n         total   =   0 \n         for   answer   in   self . answers : \n             if   answer [ 0 ]: \n                 total   +=   1 \n         return   total \n\n     def   summary ( self ): \n         \"\"\"          print how many you got right and the total of questions: 5/10          print the total time for the quiz: 30 seconds!          \"\"\" \n         print ( \"You got {} out of {} right.\" . format ( \n                 self . total_correct (),   len ( self . questions ) \n         )) \n         print ( \"It took you {} seconds total.\" . format ( \n                 ( self . end_time - self . start_time ) . seconds \n         ))  Quiz () . take_quiz ()   # ADD    The results are dynamic. We would get something that look like the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n7 x 6 = 54\n9 x 10 = 90\n4 x 3 = 12\n3 + 6 = 9\n5 + 6 = 11\n10 x 6 = 60\n4 x 6 = 24\n9 + 9 = 18\n2 x 5 = 10\n8 + 3 = 11\nYou got 9 out of 10 rights.\nIt took you 21 seconds total.",
            "title": "Finalize the application"
        },
        {
            "location": "/Datetime/#time-zones",
            "text": "Timezones are major challenges for websites and web frameworks. The following is coded in Python 3 since the most common Python frameworks (Flask, Django, Pyramid) at the time this documentation is written work under Python 3. One of the reason is the multi-language ability.",
            "title": "Time zones"
        },
        {
            "location": "/Datetime/#time-zones-with-datatime-only",
            "text": "We build two timezone-aware variables.  1\n2\n3\n4\n5\n6\n7 import   datetime  pacific   =   datetime . timezone ( datetime . timedelta ( hours =- 8 ))  eastern   =   datetime . timezone ( datetime . timedelta ( hours =- 5 ))  print ( pacific )  print ( eastern )    Results.  1\n2 UTC - 08 : 00  UTC - 05 : 00    We build one timezone-naive variable and one timezone-aware variable.  1\n2\n3\n4\n5\n6\n7 # ...  naive   =   datetime . datetime ( 2014 ,   4 ,   21 ,   9 )  print ( naive )  aware   =   datetime . datetime ( 2014 ,   4 ,   21 ,   9 ,   tzinfo = pacific )  print ( aware )    Results.  1\n2 2014 - 04 - 21   09 : 00 : 00  2014 - 04 - 21   09 : 00 : 00 - 08 : 00    Show these in eastern time.  1\n2\n3 # ...  print ( naive . astimezone ( eastern ))    Results: cannot be applied to a naive datetime.  1\n2\n3 # ...  print ( aware . astimezone ( eastern ))    Results.  1 2014-04-21 12:00:00-05:00   Other interesting time zones.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # ...  aukland   =   datetime . timezone ( datetime . timedelta ( hours = 13 ))  print ( aukland )  print ( aware . astimezone ( aukland ))  print ( \"=\"   *   25 )  mumbai   =   datetime . timezone ( datetime . timedelta ( hours = 13 ,   minutes = 30 ))  print ( mumbai )  print ( aware . astimezone ( mumbai ))    Results.  1\n2\n3\n4\n5 UTC+13:00\n2014-04-22 06:00:00+13:00\n=========================\nUTC+05:30\n2014-04-21 22:30:00+05:30",
            "title": "Time zones with datatime only"
        },
        {
            "location": "/Datetime/#time-zones-with-datatime-and-pytz",
            "text": "pytz  simplify things (a lot!).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 import   datetime  import   pytz  pacific   =   pytz . timezone ( 'US/Pacific' )  eastern   =   pytz . timezone ( 'US/Eastern' )  fmt   =   '%Y-%m- %d  %H:%M:%S %Z%z'  utc   =   pytz . utc  print ( \"set: \" )  start   =   pacific . localize ( datetime . datetime ( 2014 ,   4 ,   21 ,   9 ))  print ( start . strftime ( fmt ))  print ( \"=\"   *   25 )  print ( \"convert: \" )  start_eastern   =   start . astimezone ( eastern )  print ( start_eastern )  print ( \"=\"   *   25 )  print ( start )  print ( \"=\"   *   25 )    Results.  1\n2\n3\n4\n5\n6\n7\n8 set: \n2014-04-21 09:00:00 PDT-0700\n=========================\nconvert: \n2014-04-21 12:00:00-04:00\n=========================\n2014-04-21 09:00:00-07:00\n=========================   More conversions.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # ...  print ( \"set: \" )  start_utc   =   datetime . datetime ( 2014 ,   4 ,   21 ,   1 ,   tzinfo = utc )  print ( start_utc . strftime ( fmt ))  print ( \"=\"   *   25 )  print ( \"convert: \" )  start_pacific   =   start_utc . astimezone ( pacific )  print ( start_pacific )  print ( \"=\"   *   25 )    Results.  1\n2\n3\n4\n5\n6 set: \n2014-04-21 01:00:00 UTC+0000\n=========================\nconvert: \n2014-04-20 18:00:00-07:00\n=========================   Set a date-time and convert it.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 # ...  print ( \"set aukland and mumbai\" )  auckland   =   pytz . timezone ( 'Pacific/Auckland' )  mumbai   =   pytz . timezone ( 'Asia/Calcutta' )  print ( \"create a date\" )  apollo_13_naive   =   datetime . datetime ( 1970 ,   4 ,   11 ,   14 ,   13 )  apollo_13_eastern   =   eastern . localize ( apollo_13_naive )  print ( \"print it: \" )  print ( apollo_13_naive )  print ( apollo_13_eastern )  print ( \"=\"   *   25 )  print ( \"convert it, change location: \" )  apollo_13_utc   =   apollo_13_eastern . astimezone ( utc )  print ( apollo_13_utc . astimezone ( pacific ) . strftime ( fmt ))  print ( apollo_13_utc . astimezone ( auckland ))  print ( apollo_13_utc . astimezone ( mumbai ))    Results.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 set aukland and mumbai\ncreate a date\nprint it: \n1970-04-11 14:13:00\n1970-04-11 14:13:00-05:00\n=========================\nconvert it, change location: \n1970-04-11 11:13:00 PST-0800\n1970-04-12 07:13:00+12:00\n1970-04-12 00:43:00+05:30",
            "title": "Time zones with datatime and pytz"
        },
        {
            "location": "/Datetime/#find-out-more-about-pytz",
            "text": "Find out about timezones:  print(pytz.all_timezones) . Or focus on a country\u2019s timezones. The US.  1 print ( pytz . country_timezones [ 'us' ])    Results.  1 ['America/New_York', 'America/Detroit', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Indiana/Indianapolis', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Chicago', 'America/Indiana/Tell_City', 'America/Indiana/Knox', 'America/Menominee', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/North_Dakota/Beulah', 'America/Denver', 'America/Boise', 'America/Phoenix', 'America/Los_Angeles', 'America/Anchorage', 'America/Juneau', 'America/Sitka', 'America/Metlakatla', 'America/Yakutat', 'America/Nome', 'America/Adak', 'Pacific/Honolulu']   Canada.  1 print ( pytz . country_timezones [ 'ca' ])    Results.  1 ['America/St_Johns', 'America/Halifax', 'America/Glace_Bay', 'America/Moncton', 'America/Goose_Bay', 'America/Blanc-Sablon', 'America/Toronto', 'America/Nipigon', 'America/Thunder_Bay', 'America/Iqaluit', 'America/Pangnirtung', 'America/Atikokan', 'America/Winnipeg', 'America/Rainy_River', 'America/Resolute', 'America/Rankin_Inlet', 'America/Regina', 'America/Swift_Current', 'America/Edmonton', 'America/Cambridge_Bay', 'America/Yellowknife', 'America/Inuvik', 'America/Creston', 'America/Dawson_Creek', 'America/Fort_Nelson', 'America/Vancouver', 'America/Whitehorse', 'America/Dawson']   Russia.  1 print ( pytz . country_timezones [ 'ru' ])    Results.  1 ['Europe/Kaliningrad', 'Europe/Moscow', 'Europe/Simferopol', 'Europe/Volgograd', 'Europe/Kirov', 'Europe/Astrakhan', 'Europe/Saratov', 'Europe/Ulyanovsk', 'Europe/Samara', 'Asia/Yekaterinburg', 'Asia/Omsk', 'Asia/Novosibirsk', 'Asia/Barnaul', 'Asia/Tomsk', 'Asia/Novokuznetsk', 'Asia/Krasnoyarsk', 'Asia/Irkutsk', 'Asia/Chita', 'Asia/Yakutsk', 'Asia/Khandyga', 'Asia/Vladivostok', 'Asia/Ust-Nera', 'Asia/Magadan', 'Asia/Sakhalin', 'Asia/Srednekolymsk', 'Asia/Kamchatka', 'Asia/Anadyr']",
            "title": "Find out more about pytz"
        },
        {
            "location": "/Datetime/#build-a-script-to-convert-time-zones",
            "text": "Build a script that takes a datetime and give it back in 6 other timezones. For any given datetime, an appointment for example, we can know the equivalent elsewhere in the world.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 from   datetime   import   datetime  import   pytz  OTHER_TIMEZONES   =   [ \n     pytz . timezone ( 'US/Eastern' ), \n     pytz . timezone ( 'Pacific/Auckland' ), \n     pytz . timezone ( 'Asia/Calcutta' ), \n     pytz . timezone ( 'UTC' ), \n     pytz . timezone ( 'Europe/Paris' ), \n     pytz . timezone ( 'Africa/Khartoum' ),  ]  fmt   =   '%Y-%m- %d  %H:%M:%S %Z%z'  while   True : \n     date_input   =   input ( \"When is your meeting? Please use MM/DD/YYYY HH:MM format. \" ) \n     try : \n         local_date   =   datetime . strptime ( date_input ,   '%m/ %d /%Y %H:%M' ) \n     except   ValueError : \n         print ( \"{} doesn't seem to be a valid date & time.\" . format ( date_input )) \n     else : \n         local_date   =   pytz . timezone ( 'US/Pacific' ) . localize ( local_date ) \n         utc_date   =   local_date . astimezone ( pytz . utc ) \n\n         output   =   [] \n         for   timezone   in   OTHER_TIMEZONES : \n             output . append ( utc_date . astimezone ( timezone )) \n         for   appointment   in   output : \n             print ( appointment . strftime ( fmt )) \n         break    Results (1 inputs, 6 outputs).  1\n2\n3\n4\n5\n6\n7 When is your meeting? Please use MM/DD/YYYY HH:MM format. 01/01/2018 13:00\n2018-01-01 16:00:00 EST-0500\n2018-01-02 10:00:00 NZDT+1300\n2018-01-02 02:30:00 IST+0530\n2018-01-01 21:00:00 UTC+0000\n2018-01-01 22:00:00 CET+0100\n2018-01-02 00:00:00 EAT+0300",
            "title": "Build a script to convert time zones"
        },
        {
            "location": "/Gedit_Execute_Highlighted_Python_Code/",
            "text": "CONTENT\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3 and gedit.\n\n\n\n\n\n\nIn the gedit menu: Tools/Manage External Tools\n\n\nOn the left, add: Execute Highlighted Python Code\n\n\nOn the right, add:\n\n\n\n\n1\n2\n3\n#!/usr/bin/env python3\n\n\nimport\n \nsys\n\n\nexec\n(\nsys\n.\nstdin\n.\nread\n())\n\n\n\n\n\n\n\n\n\nAt the bottom,\n\n\nChoose a shortcut key: \nAlt+x\n.\n\n\nInput: \nCurrent selection (default to document)\n.\n\n\nOutput: \nDisplay in bottom pane\n.\n\n\nDo not change the other parameters.\n\n\n\n\n\n\nCreate a python document (.py), add Python code, highlight the code, and press \nAlt+x\n: a bottom pane opens showing the results.\n\n\nThe external tool is now part of gedit and ready to use.",
            "title": "Gedit, Execute Highlighted Python Code"
        },
        {
            "location": "/Scipy_CS/",
            "text": "CONTENT\n\n\nImporting Data\n\n\nData Mining, Wrangling (Numpy, Pandas)\n\n\nMachine Learning, Spark, NN\n\n\nVisualization (Matplotlib, Seaborn, Bokeh, Plotly, Folium)\n\n\n\n\n\n\n\n\nForeword\n\n\nCheat sheets.\n\n\n\n\nImporting Data\n\u00b6\n\n\n\n\nImporting Data\n. PDF. Files: text, falt, spreadsheet, SAS, Stata, RDB, Pickled, HDF5, Matlab, with numpy, pandas, accessing, exploring, and navigating.\n\n\n\n\n\n\n\n\n\n\nData Mining, Wrangling (Numpy, Pandas)\n\u00b6\n\n\n\n\nData Mining\n. PDF only.\n\n\n\n\n\n\n\n\nNumPy/SciPy/Pandas Cheat Sheet\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNumpy\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinear Algebra\n. PDF only.\n\n\nSciPy Linear Algebra\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPandas DataFrame Notes\n. PDF only.\n\n\nPandas\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\nData Wrangling with Pandas\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\nMachine Learning, Spark, NN\n\u00b6\n\n\n\n\n.\n\n\n\n\n\n\n\n\nscikit-learn\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPySpark\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPySpark SQL\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeras\n. PDF.\n\n\n\n\n\n\n\n\n\n\nVisualization (Matplotlib, Seaborn, Bokeh, Plotly, Folium)\n\u00b6\n\n\n\n\nMatplotlib Notes\n. PDF only.\n\n\nMatplotlib\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeaborn\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBokeh\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotly\n. PDF only.\n\n\n\n\n\n\n\n\nFolium\n. PDF.",
            "title": "Scipy Stack Cheat Sheets"
        },
        {
            "location": "/Scipy_CS/#data-mining-wrangling-numpy-pandas",
            "text": "Data Mining . PDF only.     NumPy/SciPy/Pandas Cheat Sheet . PDF.           Numpy . PDF.        Linear Algebra . PDF only.  SciPy Linear Algebra . PDF.        Pandas DataFrame Notes . PDF only.  Pandas . PDF.       Data Wrangling with Pandas . PDF.",
            "title": "Data Mining, Wrangling (Numpy, Pandas)"
        },
        {
            "location": "/Scipy_CS/#machine-learning-spark-nn",
            "text": ".     scikit-learn . PDF.        PySpark . PDF.        PySpark SQL . PDF.        Keras . PDF.",
            "title": "Machine Learning, Spark, NN"
        },
        {
            "location": "/Scipy_CS/#visualization-matplotlib-seaborn-bokeh-plotly-folium",
            "text": "Matplotlib Notes . PDF only.  Matplotlib . PDF.        Seaborn . PDF.        Bokeh . PDF.        Plotly . PDF only.     Folium . PDF.",
            "title": "Visualization (Matplotlib, Seaborn, Bokeh, Plotly, Folium)"
        },
        {
            "location": "/JN_CS/",
            "text": "CONTENT\n\n\nAnaconda\n\n\nJupyter Notebook\n\n\nObjects\n\n\nLogging\n\n\nMagic & Help\n\n\nFunction\n\n\nNavigation\n\n\nExternal\n\n\n\n\n\n\n\n\nForeword\n\n\nCheat sheets and snippets.\n\n\n\n\nAnaconda\n\u00b6\n\n\n\n\nAnaconda Cheat Sheet\n. PDF only.\n\n\nConda Cheat Sheet\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\nJupyter Notebook\n\u00b6\n\n\n\n\nJupyter Notebook\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJupyter Notebook\n. PDF\n\n\n\n\n\n\n\n\n\n\nObjects\n\u00b6\n\n\nFind, list, search, reset.\n\n\n1\n2\n3\n4\na\n \n=\n \n10\n\n\nb\n \n=\n \n20.1\n\n\nc\n \n=\n \n\"test\"\n\n\nd\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\n\n\n\n\n\n1\nwho\n\n\n\n\n\n\n\n1\na    b   c   d\n\n\n\n\n\n\n1\nwhos\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nVariable   Type     Data/Info\n\n\n-----------------------------\n\na          int      10\nb          float    20.1\nc          str      test\nd          list     n=3\n\n\n\n\n\n\n1\nreset\n\n\n\n\n\n\n\n1\nOnce deleted, variables cannot be recovered. Proceed (y/[n])? y\n\n\n\n\n\n\n1\nwho\n\n\n\n\n\n\n\n1\nInteractive namespace is empty.\n\n\n\n\n\n\n1\n2\n3\n4\na\n \n=\n \n10\n\n\nb\n \n=\n \n20\n\n\nc\n \n=\n \n\"test\"\n\n\nd\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\n\n\n\n\n\n1\nwho\n\n\n\n\n\n\n\n1\na    b   c   d\n\n\n\n\n\n\n\n\nLogging\n\u00b6\n\n\nStart, state, on, off.\n\n\n1\nlogstate\n\n\n\n\n\n\n\n1\nLogging has not been activated.\n\n\n\n\n\n\n1\nlogstart\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nActivating auto-logging. Current session state plus future input saved.\nFilename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : active\n\n\n\n\n\n\n1\nlogstate\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nFilename\n       \n:\n \nipython_log\n.\npy\n\n\nMode\n           \n:\n \nrotate\n\n\nOutput\n \nlogging\n \n:\n \nFalse\n\n\nRaw\n \ninput\n \nlog\n  \n:\n \nFalse\n\n\nTimestamping\n   \n:\n \nFalse\n\n\nState\n          \n:\n \nactive\n\n\n\n\n\n\n\n1\nlogoff\n\n\n\n\n\n\n\n1\nSwitching logging OFF\n\n\n\n\n\n\n1\nlogstate\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nFilename\n       \n:\n \nipython_log\n.\npy\n\n\nMode\n           \n:\n \nrotate\n\n\nOutput\n \nlogging\n \n:\n \nFalse\n\n\nRaw\n \ninput\n \nlog\n  \n:\n \nFalse\n\n\nTimestamping\n   \n:\n \nFalse\n\n\nState\n          \n:\n \ntemporarily\n \nsuspended\n\n\n\n\n\n\n\n1\nlogon\n\n\n\n\n\n\n\n1\nSwitching logging ON\n\n\n\n\n\n\n1\nlogstate\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nFilename\n       \n:\n \nipython_log\n.\npy\n\n\nMode\n           \n:\n \nrotate\n\n\nOutput\n \nlogging\n \n:\n \nFalse\n\n\nRaw\n \ninput\n \nlog\n  \n:\n \nFalse\n\n\nTimestamping\n   \n:\n \nFalse\n\n\nState\n          \n:\n \nactive\n\n\n\n\n\n\n\n\n\nMagic & Help\n\u00b6\n\n\nList, help.\n\n\n1\nlsmagic\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nAvailable\n \nline\n \nmagics\n:\n\n\n%alias\n  \n%alias_magic\n  \n%autocall\n  \n%automagic\n  \n%autosave\n  \n%bookmark\n  \n%cat\n  \n%cd\n  \n%clear\n  \n%colors\n  \n%config\n  \n%connect_info\n  \n%cp\n  \n%debug\n  \n%dhist\n  \n%dirs\n  \n%doctest_mode\n  \n%ed\n  \n%edit\n  \n%env\n  \n%gui\n  \n%hist\n  \n%history\n  \n%killbgscripts\n  \n%ldir\n  \n%less\n  \n%lf\n  \n%lk\n  \n%ll\n  \n%load\n  \n%load_ext\n  \n%loadpy\n  \n%logoff\n  \n%logon\n  \n%logstart\n  \n%logstate\n  \n%logstop\n  \n%ls\n  \n%lsmagic\n  \n%lx\n  \n%macro\n  \n%magic\n  \n%man\n  \n%matplotlib\n  \n%mkdir\n  \n%more\n  \n%mv\n  \n%notebook\n  \n%page\n  \n%pastebin\n  \n%pdb\n  \n%pdef\n  \n%pdoc\n  \n%pfile\n  \n%pinfo\n  \n%pinfo2\n  \n%popd\n  \n%pprint\n  \n%precision\n  \n%profile\n  \n%prun\n  \n%psearch\n  \n%psource\n  \n%pushd\n  \n%pwd\n  \n%pycat\n  \n%pylab\n  \n%qtconsole\n  \n%quickref\n  \n%recall\n  \n%rehashx\n  \n%reload_ext\n  \n%rep\n  \n%rerun\n  \n%reset\n  \n%reset_selective\n  \n%rm\n  \n%rmdir\n  \n%run\n  \n%save\n  \n%sc\n  \n%set_env\n  \n%store\n  \n%sx\n  \n%system\n  \n%tb\n  \n%time\n  \n%timeit\n  \n%unalias\n  \n%unload_ext\n  \n%who\n  \n%who_ls\n  \n%whos\n  \n%xdel\n  \n%xmode\n\n\n\nAvailable\n \ncell\n \nmagics\n:\n\n\n%%!\n  \n%%\nHTML\n  \n%%\nSVG\n  \n%\n%bash\n  \n%\n%capture\n  \n%\n%debug\n  \n%\n%file\n  \n%\n%html\n  \n%\n%javascript\n  \n%\n%js\n  \n%\n%latex\n  \n%\n%perl\n  \n%\n%prun\n  \n%\n%pypy\n  \n%\n%python\n  \n%\n%python2\n  \n%\n%python3\n  \n%\n%ruby\n  \n%\n%script\n  \n%\n%sh\n  \n%\n%svg\n  \n%\n%sx\n  \n%\n%system\n  \n%\n%time\n  \n%\n%timeit\n  \n%\n%writefile\n\n\n\nAutomagic\n \nis\n \nON\n,\n \n%\n \nprefix\n \nIS\n \nNOT\n \nneeded\n \nfor\n \nline\n \nmagics\n.\n\n\n\n\n\n\n\nOpen a window about magic commands.\n\n\n1\nmagic\n\n\n\n\n\n\n\nOpen a window about the command (minimum, maximum help).\n\n\n1\n%\nalias\n?\n\n\n\n\n\n\n\n1\n%\nalias\n??\n\n\n\n\n\n\n\n\n\nFunction\n\u00b6\n\n\ndocstrings, info, source.\n\n\n1\n2\n3\n4\n5\n6\ndef\n \nprint_number\n(\nnb\n):\n\n\n    \n\"\"\"\n\n\n    The docstring. print_number prints Hi!\n\n\n    \"\"\"\n\n    \nprint\n(\n\"Hi!\"\n \n*\n \nnb\n)\n\n\n\n\n\n\n\n1\n2\nprint_number\n(\n1\n)\n\n\nprint_number\n(\n5\n)\n\n\n\n\n\n\n\n1\n2\nHi!\nHi!Hi!Hi!Hi!Hi!\n\n\n\n\n\n\n1\npdef\n \nprint_number\n\n\n\n\n\n\n\n1\n print_number(nb)\n\n\n\n\n\n\nOpen a window about the docstrings.\n\n\n1\npdoc\n \nprint_number\n\n\n\n\n\n\n\nOpen a window about the function.\n\n\n1\npinfo\n \nprint_number\n\n\n\n\n\n\n\n\n\nNavigation\n\u00b6\n\n\nBookmark, history.\n\n\n1\nbookmark\n \n-\nl\n\n\n\n\n\n\n\n1\n2\n3\nCurrent bookmarks:\nname     -> path\nuntitled -> /home/user\n\n\n\n\n\n\nAdd a bookmark.\n\n\n1\nbookmark\n \naaa\n \npath\n\n\n\n\n\n\n\n1\nbookmark\n \n-\nl\n\n\n\n\n\n\n\n1\n2\n3\n4\nCurrent bookmarks:\naaa      -> path\nname     -> path\nuntitled -> /home/user\n\n\n\n\n\n\nDelete a bookmark.\n\n\n1\nbookmark\n \n-\nd\n \naaa\n\n\n\n\n\n\n\n1\nbookmark\n \n-\nl\n\n\n\n\n\n\n\n1\n2\n3\nCurrent bookmarks:\nname     -> path\nuntitled -> /home/user\n\n\n\n\n\n\nPrint the directory navigation history.\n\n\n1\ndhist\n\n\n\n\n\n\n\n1\n2\nDirectory history (kept in _dh)\n0: /home/user\n\n\n\n\n\n\n\n\nExternal\n\u00b6\n\n\nBash, script.\n\n\nThe following is an example of one bash command.\n\n\n1\n!\npwd\n\n\n\n\n\n\n\n1\n/home/user\n\n\n\n\n\n\n1\nabc\n \n=\n \n!\npwd\n\n\n\n\n\n\n\n1\nabc\n\n\n\n\n\n\n\n1\n['/home/user']\n\n\n\n\n\n\n1\nalias\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nTotal number of aliases: 12\n\n[('cat', 'cat'),\n ('cp', 'cp'),\n ('ldir', 'ls -F -o --color %l | grep /$'),\n ('lf', 'ls -F -o --color %l | grep ^-'),\n ('lk', 'ls -F -o --color %l | grep ^l'),\n ('ll', 'ls -F -o --color'),\n ('ls', 'ls -F --color'),\n ('lx', 'ls -F -o --color %l | grep ^-..x'),\n ('mkdir', 'mkdir'),\n ('mv', 'mv'),\n ('rm', 'rm'),\n ('rmdir', 'rmdir')]\n\n\n\n\n\n\nInvoke an external script into IPython.\n\n\n1\nrun\n \nprint_text\n.\npy\n\n\n\n\n\n\n\n1\nHi!\n\n\n\n\n\n\nInvoke an external script into IPython and open a window about the script\u2019s profile.\n\n\n1\nrun\n \n-\np\n \nprint_text\n.\npy\n\n\n\n\n\n\n\n1\nHi!\n\n\n\n\n\n\nLoad the external script into IPython (\nload print_text.py\n turns into \n# %load print_text.py\n).\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# %load print_text.py\n\n\ndef\n \nprint_text\n():\n\n\n    \n\"\"\"\n\n\n    The docstring. print_text prints Hi!\n\n\n    \"\"\"\n\n    \nprint\n(\n\"Hi!\"\n)\n\n\n\nprint_text\n()",
            "title": "Jupyter Notebook Cheat Sheets"
        },
        {
            "location": "/JN_CS/#jupyter-notebook",
            "text": "Jupyter Notebook . PDF.        Jupyter Notebook . PDF",
            "title": "Jupyter Notebook"
        },
        {
            "location": "/JN_CS/#objects",
            "text": "Find, list, search, reset.  1\n2\n3\n4 a   =   10  b   =   20.1  c   =   \"test\"  d   =   [ 1 ,   2 ,   3 ]    1 who    1 a    b   c   d   1 whos    1\n2\n3\n4\n5\n6 Variable   Type     Data/Info  ----------------------------- \na          int      10\nb          float    20.1\nc          str      test\nd          list     n=3   1 reset    1 Once deleted, variables cannot be recovered. Proceed (y/[n])? y   1 who    1 Interactive namespace is empty.   1\n2\n3\n4 a   =   10  b   =   20  c   =   \"test\"  d   =   [ 1 ,   2 ,   3 ]    1 who    1 a    b   c   d",
            "title": "Objects"
        },
        {
            "location": "/JN_CS/#logging",
            "text": "Start, state, on, off.  1 logstate    1 Logging has not been activated.   1 logstart    1\n2\n3\n4\n5\n6\n7 Activating auto-logging. Current session state plus future input saved.\nFilename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : active   1 logstate    1\n2\n3\n4\n5\n6 Filename         :   ipython_log . py  Mode             :   rotate  Output   logging   :   False  Raw   input   log    :   False  Timestamping     :   False  State            :   active    1 logoff    1 Switching logging OFF   1 logstate    1\n2\n3\n4\n5\n6 Filename         :   ipython_log . py  Mode             :   rotate  Output   logging   :   False  Raw   input   log    :   False  Timestamping     :   False  State            :   temporarily   suspended    1 logon    1 Switching logging ON   1 logstate    1\n2\n3\n4\n5\n6 Filename         :   ipython_log . py  Mode             :   rotate  Output   logging   :   False  Raw   input   log    :   False  Timestamping     :   False  State            :   active",
            "title": "Logging"
        },
        {
            "location": "/JN_CS/#magic-help",
            "text": "List, help.  1 lsmagic    1\n2\n3\n4\n5\n6\n7 Available   line   magics :  %alias    %alias_magic    %autocall    %automagic    %autosave    %bookmark    %cat    %cd    %clear    %colors    %config    %connect_info    %cp    %debug    %dhist    %dirs    %doctest_mode    %ed    %edit    %env    %gui    %hist    %history    %killbgscripts    %ldir    %less    %lf    %lk    %ll    %load    %load_ext    %loadpy    %logoff    %logon    %logstart    %logstate    %logstop    %ls    %lsmagic    %lx    %macro    %magic    %man    %matplotlib    %mkdir    %more    %mv    %notebook    %page    %pastebin    %pdb    %pdef    %pdoc    %pfile    %pinfo    %pinfo2    %popd    %pprint    %precision    %profile    %prun    %psearch    %psource    %pushd    %pwd    %pycat    %pylab    %qtconsole    %quickref    %recall    %rehashx    %reload_ext    %rep    %rerun    %reset    %reset_selective    %rm    %rmdir    %run    %save    %sc    %set_env    %store    %sx    %system    %tb    %time    %timeit    %unalias    %unload_ext    %who    %who_ls    %whos    %xdel    %xmode  Available   cell   magics :  %%!    %% HTML    %% SVG    % %bash    % %capture    % %debug    % %file    % %html    % %javascript    % %js    % %latex    % %perl    % %prun    % %pypy    % %python    % %python2    % %python3    % %ruby    % %script    % %sh    % %svg    % %sx    % %system    % %time    % %timeit    % %writefile  Automagic   is   ON ,   %   prefix   IS   NOT   needed   for   line   magics .    Open a window about magic commands.  1 magic    Open a window about the command (minimum, maximum help).  1 % alias ?    1 % alias ??",
            "title": "Magic &amp; Help"
        },
        {
            "location": "/JN_CS/#function",
            "text": "docstrings, info, source.  1\n2\n3\n4\n5\n6 def   print_number ( nb ): \n\n     \"\"\"      The docstring. print_number prints Hi!      \"\"\" \n     print ( \"Hi!\"   *   nb )    1\n2 print_number ( 1 )  print_number ( 5 )    1\n2 Hi!\nHi!Hi!Hi!Hi!Hi!   1 pdef   print_number    1  print_number(nb)   Open a window about the docstrings.  1 pdoc   print_number    Open a window about the function.  1 pinfo   print_number",
            "title": "Function"
        },
        {
            "location": "/JN_CS/#navigation",
            "text": "Bookmark, history.  1 bookmark   - l    1\n2\n3 Current bookmarks:\nname     -> path\nuntitled -> /home/user   Add a bookmark.  1 bookmark   aaa   path    1 bookmark   - l    1\n2\n3\n4 Current bookmarks:\naaa      -> path\nname     -> path\nuntitled -> /home/user   Delete a bookmark.  1 bookmark   - d   aaa    1 bookmark   - l    1\n2\n3 Current bookmarks:\nname     -> path\nuntitled -> /home/user   Print the directory navigation history.  1 dhist    1\n2 Directory history (kept in _dh)\n0: /home/user",
            "title": "Navigation"
        },
        {
            "location": "/JN_CS/#external",
            "text": "Bash, script.  The following is an example of one bash command.  1 ! pwd    1 /home/user   1 abc   =   ! pwd    1 abc    1 ['/home/user']   1 alias     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 Total number of aliases: 12\n\n[('cat', 'cat'),\n ('cp', 'cp'),\n ('ldir', 'ls -F -o --color %l | grep /$'),\n ('lf', 'ls -F -o --color %l | grep ^-'),\n ('lk', 'ls -F -o --color %l | grep ^l'),\n ('ll', 'ls -F -o --color'),\n ('ls', 'ls -F --color'),\n ('lx', 'ls -F -o --color %l | grep ^-..x'),\n ('mkdir', 'mkdir'),\n ('mv', 'mv'),\n ('rm', 'rm'),\n ('rmdir', 'rmdir')]   Invoke an external script into IPython.  1 run   print_text . py    1 Hi!   Invoke an external script into IPython and open a window about the script\u2019s profile.  1 run   - p   print_text . py    1 Hi!   Load the external script into IPython ( load print_text.py  turns into  # %load print_text.py ).  1\n2\n3\n4\n5\n6\n7\n8\n9 # %load print_text.py  def   print_text (): \n\n     \"\"\"      The docstring. print_text prints Hi!      \"\"\" \n     print ( \"Hi!\" )  print_text ()",
            "title": "External"
        },
        {
            "location": "/Scientific Python/",
            "text": "CONTENT\n\n\n\n\n\n\nForeword\n\n\nNotes.\n\n\n\n\n\n\nSciPy.org\n\n\nInstall\n\n\nGetting Started\n\n\nDocumentation\n\n\nSciPy Central (collection of code snippets, modules and links for solving scientific problems with SciPy and related Python tools)\n\n\nBlogs\n\n\nNumpy (Base N-dimensional array)\n\n\nMatplotlib (Comprehensive 2D Plotting) (official documentation, examples, gallery, commands)\n\n\nSympy (Symbolic mathematics) (official documentation, features, projects)\n\n\n\u2026\n\n\nIPython (Enhanced Interactive Console) (official documentation, Jupyter)\n\n\nPandas (Data structures & analysis) (official documentation)\n\n\n\n\n\n\nNumpy examples (crash course and snippets in a IPython notebook)\n\n\nL\u2019informatique scientifique avec Python\n\n\n\u2026\n\n\nComment cr\u00e9er et manipuler les donn\u00e9es scientifiques : autour de Numpy (crash course, snippets\n\n\nSavoir chercher (trouver) de l\u2019aide\n\n\n\u2026\n\n\n\n\n\n\nMPIA Python Workshop (hands-on workshops on using Python to solve real-world problems)\n\n\nIntroduction and Motivation (quick tour, who is using, examples)\n\n\nPython Installation and Understanding Packages\n\n\nAn introduction to Pure Python (crash course)\n\n\nCore packages for analysis: NumPy and SciPy (snippets)\n\n\nPlotting and Images\n\n\nMatplotlib (procedural method, snippets)\n\n\nAdvanced plotting (object-based method)\n\n\nPublication-quality plots (tips)\n\n\n\n\n\n\nObject-Oriented Programming in Python (snippets)\n\n\nFitting data with Python (models, algorithms, how-to)",
            "title": "Scientific Python"
        },
        {
            "location": "/Importing Data into Python/",
            "text": "CONTENT\n\n\n1, Importing from Flat Files\n\n\nNumpy\n\n\nPandas\n\n\n\n\n\n\n2, Importing from Other Files\n\n\n3, Working with Relational Databases\n\n\n4, Importing Flat Files from the Web (Web Scraping)\n\n\n5, Introduction to APIs and JSONs\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the courses. Python 3. From DataCamp.\n\n\n\n\n1, Importing from Flat Files\n\u00b6\n\n\n\n\nLoad the script and run it.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n# %load \"Importing Data in Python.py\"\n\n\nfile\n \n=\n \nopen\n(\n'moby_dick.txt'\n,\n \n'r'\n)\n\n\n\n# Print it\n\n\nprint\n(\nfile\n.\nread\n())\n\n\n\n# Check whether file is closed\n\n\nprint\n(\nfile\n.\nclosed\n)\n\n\n\n# Close file\n\n\nfile\n.\nclose\n()\n\n\n\n# Check whether file is closed\n\n\nprint\n(\nfile\n.\nclosed\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nCHAPTER 1. Loomings.\n\nCall me Ishmael. Some years ago--never mind how long precisely--having\nlittle or no money in my purse, and nothing particular to interest me on\nshore, I thought I would sail about a little and see the watery part of\nthe world. It is a way I have of driving off the spleen and regulating\nthe circulation. Whenever I find myself growing grim about the mouth;\nwhenever it is a damp, drizzly November in my soul; whenever I find\nmyself involuntarily pausing before coffin warehouses, and bringing up\nthe rear of every funeral I meet; and especially whenever my hypos get\nsuch an upper hand of me, that it requires a strong moral principle to\nprevent me from deliberately stepping into the street, and methodically\nknocking people's hats off--then, I account it high time to get to sea\nas soon as I can. This is my substitute for pistol and ball. With a\nphilosophical flourish Cato throws himself upon his sword; I quietly\ntake to the ship. There is nothing surprising in this. If they but knew\nit, almost all men in their degree, some time or other, cherish very\nnearly the same feelings towards the ocean with me.\nFalse\nTrue\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Read & print the first 3 lines\n\n\nwith\n \nopen\n(\n'moby_dick.txt'\n)\n \nas\n \nfile\n:\n\n    \nprint\n(\nfile\n.\nreadline\n())\n\n    \nprint\n(\nfile\n.\nreadline\n())\n\n    \nprint\n(\nfile\n.\nreadline\n())\n\n    \nprint\n(\nfile\n.\nreadline\n(\n10\n))\n\n    \nprint\n(\nfile\n.\nreadline\n(\n50\n))\n\n    \nprint\n(\nfile\n.\nreadline\n(\n50\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nCHAPTER 1. Loomings.\n\nCall me Ishmael. Some years ago--never mind how long precisely--having\n\nlittle or \nno money in my purse, and nothing particular to in\nterest me on\n\n\n\n\n\n\n\n\nthis\n is a special package about PEP 20.\n\n\n\n\n1\nimport\n \nthis\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nThe\n \nZen\n \nof\n \nPython\n,\n \nby\n \nTim\n \nPeters\n\n\n\nBeautiful\n \nis\n \nbetter\n \nthan\n \nugly\n.\n\n\nExplicit\n \nis\n \nbetter\n \nthan\n \nimplicit\n.\n\n\nSimple\n \nis\n \nbetter\n \nthan\n \ncomplex\n.\n\n\nComplex\n \nis\n \nbetter\n \nthan\n \ncomplicated\n.\n\n\nFlat\n \nis\n \nbetter\n \nthan\n \nnested\n.\n\n\nSparse\n \nis\n \nbetter\n \nthan\n \ndense\n.\n\n\nReadability\n \ncounts\n.\n\n\nSpecial\n \ncases\n \naren\n't special enough to break the rules.\n\n\nAlthough\n \npracticality\n \nbeats\n \npurity\n.\n\n\nErrors\n \nshould\n \nnever\n \npass\n \nsilently\n.\n\n\nUnless\n \nexplicitly\n \nsilenced\n.\n\n\nIn\n \nthe\n \nface\n \nof\n \nambiguity\n,\n \nrefuse\n \nthe\n \ntemptation\n \nto\n \nguess\n.\n\n\nThere\n \nshould\n \nbe\n \none\n--\n \nand\n \npreferably\n \nonly\n \none\n \n--\nobvious\n \nway\n \nto\n \ndo\n \nit\n.\n\n\nAlthough\n \nthat\n \nway\n \nmay\n \nnot\n \nbe\n \nobvious\n \nat\n \nfirst\n \nunless\n \nyou\n're Dutch.\n\n\nNow\n \nis\n \nbetter\n \nthan\n \nnever\n.\n\n\nAlthough\n \nnever\n \nis\n \noften\n \nbetter\n \nthan\n \n*\nright\n*\n \nnow\n.\n\n\nIf\n \nthe\n \nimplementation\n \nis\n \nhard\n \nto\n \nexplain\n,\n \nit\n's a bad idea.\n\n\nIf\n \nthe\n \nimplementation\n \nis\n \neasy\n \nto\n \nexplain\n,\n \nit\n \nmay\n \nbe\n \na\n \ngood\n \nidea\n.\n\n\nNamespaces\n \nare\n \none\n \nhonking\n \ngreat\n \nidea\n \n--\n \nlet\n's do more of those!\n\n\n\n\n\n\n\n\n\nBDFL: Benevolent Dictator For Life, a.k.a. Guido van Rossum, Python\u2019s creator.\n\n\n\n\nNumpy\n\u00b6\n\n\n\n\nNumPy arrays are a standard for storing numerical data.\n\n\nArrays are essential to other packages such as the \nscikit-learn\n, for machine learning.\n\n\nImport \nnumpy\n and \nmatplotlib\n (or invoke them with the \n%pylab\n magic command).\n\n\n\n\n1\n2\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n\n\n\n\n1\n2\n3\n4\n# or...\n\n\n%\npylab\n \ninline\n\n\n\n# no need for preceeding functions (methods) with np. or plt.\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\n\n\nImport a csv file and assign the content to an array.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nfile\n \n=\n \n'digits.csv'\n\n\n\n# Load the file as an array called digits\n\n\ndigits\n \n=\n \nloadtxt\n(\nfile\n,\n \ndelimiter\n \n=\n \n','\n)\n\n\n\n# Print the datatype of digits\n\n\nprint\n(\ntype\n(\ndigits\n))\n\n\n\nprint\n(\ndigits\n)\n\n\n\n# Select a row\n\n\nim\n \n=\n \ndigits\n[\n2\n,\n \n2\n:]\n\n\nprint\n(\nim\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n<class 'numpy.ndarray'>\n[[ 1.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 1.  0.  0.  0.  0.  0.]\n [ 2.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 5.  0.  0.  0.  0.  0.]]\n[ 0.  0.  0.  0.]\n\n\n\n\n\n\n\n\nImport a txt file. The \ndelimiter\n can be \n'\\t'\n, \n','\n, \n';'\n, etc. \n\n\nSkip the first 90 rows.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nfile\n \n=\n \n'digits_header.txt'\n\n\n\n# Load the data into array data\n\n\ndata\n \n=\n \nloadtxt\n(\nfile\n,\n \ndelimiter\n=\n'  '\n,\n \nskiprows\n \n=\n \n90\n)\n\n\n\n# Print data\n\n\nprint\n(\ndata\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n[[ 3.  0.]\n\n \n[ 6.  0.]\n\n \n[ 4.  0.]\n\n \n[ 6.  0.]\n\n \n[ 2.  0.]\n\n \n[ 9.  0.]\n\n \n[ 1.  0.]\n\n \n[ 2.  0.]\n\n \n[ 0.  0.]\n\n \n[ 5.  0.]]\n\n\n\n\n\n\n\n\n\nImport a txt file, but only the last rows and first column.\n\n\n\n\n1\n2\n3\n4\ndata2\n \n=\n \nloadtxt\n(\nfile\n,\n \ndelimiter\n=\n'  '\n,\n \nskiprows\n \n=\n \n90\n,\n \nusecols\n \n=\n \n[\n0\n])\n\n\n\n# Print data\n\n\nprint\n(\ndata2\n)\n\n\n\n\n\n\n\n1\n[ 3.  6.  4.  6.  2.  9.  1.  2.  0.  5.]\n\n\n\n\n\n\n\n\nImport a txt file as string.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nfile\n \n=\n \n'seaslug.txt'\n\n\n\n# Import file: data\n\n\ndata\n \n=\n \nloadtxt\n(\nfile\n,\n \ndelimiter\n \n=\n \n' '\n,\n \ndtype\n \n=\n \nstr\n)\n\n\n\n# Print the first element of data\n\n\nprint\n(\ndata\n[\n0\n])\n\n\n\n\n\n\n\n1\n['b\"b\\'Time\\'\"' 'b\"b\\'Percent\\'\"']\n\n\n\n\n\n\n\n\nImport a txt file as float numbers.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nfile\n \n=\n \n'seaslug2.txt'\n\n\n\n# Import data as floats and skip the first row: data_float\n\n\ndata_float\n \n=\n \nloadtxt\n(\nfile\n,\n \ndelimiter\n=\n'   '\n,\n \ndtype\n \n=\n \nfloat\n,\n \nskiprows\n \n=\n \n1\n)\n\n\n\n# Print the 10th element of data_float\n\n\nprint\n(\ndata_float\n[\n9\n])\n\n\n\n# Plot a scatterplot of the data\n\n\nscatter\n(\ndata_float\n[:,\n \n0\n],\n \ndata_float\n[:,\n \n1\n])\n\n\nxlabel\n(\n'time (min.)'\n)\n\n\nylabel\n(\n'percentage of larvae'\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n1\n[ 0.     0.357]\n\n\n\n\n\n\n\n\n\n\nImport a csv file. Format the data.\n\n\n\n\n1\ndata\n \n=\n \ngenfromtxt\n(\n'titanic.csv'\n,\n \ndelimiter\n \n=\n \n','\n,\n \nnames\n \n=\n \nTrue\n,\n \ndtype\n \n=\n \nNone\n)\n\n\n\n\n\n\n\n1\n2\n \n# A structred array\n\n\nshape\n(\ndata\n)\n\n\n\n\n\n\n\n1\n(891,)\n\n\n\n\n\n\n\n\nExtract a row, a column.\n\n\n\n\n1\n2\n# to get the ith row, merely execute data[i]\n\n\nprint\n(\ndata\n[\n0\n:\n10\n])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n[ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")\n (4, 1, 1, b\" b'female'\", 35.0, 1, 0, b\" b'113803'\", 53.1, b\" b'C123'\", b\" b'S'\")\n (5, 0, 3, b\" b'male'\", 35.0, 0, 0, b\" b'373450'\", 8.05, b\" b''\", b\" b'S'\")\n (6, 0, 3, b\" b'male'\", nan, 0, 0, b\" b'330877'\", 8.4583, b\" b''\", b\" b'Q'\")\n (7, 0, 1, b\" b'male'\", 54.0, 0, 0, b\" b'17463'\", 51.8625, b\" b'E46'\", b\" b'S'\")\n (8, 0, 3, b\" b'male'\", 2.0, 3, 1, b\" b'349909'\", 21.075, b\" b''\", b\" b'S'\")\n (9, 1, 3, b\" b'female'\", 27.0, 0, 2, b\" b'347742'\", 11.1333, b\" b''\", b\" b'S'\")\n (10, 1, 2, b\" b'female'\", 14.0, 1, 0, b\" b'237736'\", 30.0708, b\" b''\", b\" b'C'\")]\n\n\n\n\n\n\n1\n2\n# to get the column with name 'Fare', execute data['Fare']\n\n\nprint\n(\ndata\n[\n'Fare'\n][\n0\n:\n10\n])\n\n\n\n\n\n\n\n1\n2\n[  7.25    71.2833   7.925   53.1      8.05     8.4583  51.8625  21.075\n  11.1333  30.0708]\n\n\n\n\n\n\n\n\nImport a csv file. \n\n\nFormat the data.\n\n\n\n\n1\n2\n# default dtype is None\n\n\ndata2\n \n=\n \nrecfromcsv\n(\n'titanic.csv'\n,\n \ndelimiter\n \n=\n \n','\n,\n \nnames\n \n=\n \nTrue\n,\n \ndtype\n \n=\n \nNone\n)\n\n\n\n\n\n\n\n1\n2\n# Print out first three entries\n\n\nprint\n(\ndata2\n[:\n3\n])\n\n\n\n\n\n\n\n1\n2\n3\n[ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")]\n\n\n\n\n\n\nPandas\n\u00b6\n\n\n\n\nTwo-dimensional labeled data structure(s) or  data frame (DataFrame).\n\n\nPythonic analog of R\u2019s dataframes.\n\n\nColumns can be of potentially different types.\n\n\nExcellent object for: \n\n\nManipulate, slice, reshape, groupby, join, merge.\n\n\nPerform statistics.\n\n\nWork with time series data.\n\n\nExploratory data analysis.\n\n\nData wrangling.\n\n\nData preprocessing.\n\n\nBuilding models.\n\n\nVisualization.\n\n\n\n\n\n\nThere exists standards and best practices to use pandas.\n\n\n\n\n1\n2\n# Import pandas\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n\n\n\n\n\n\nPandas is not part of \n%pylab\n.\n\n\nImport a file.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nfile\n \n=\n \n'titanic.csv'\n\n\n\n# Read the file into a DataFrame: df\n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\nfile\n)\n\n\n\n# View the head of the DataFrame\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n   Passengerid   Survived   Pclass         Sex    Age   SibSp   Parch  \\\n0            1          0        3     b'male'   22.0       1       0   \n1            2          1        1   b'female'   38.0       1       0   \n2            3          1        3   b'female'   26.0       0       0   \n3            4          1        1   b'female'   35.0       1       0   \n4            5          0        3     b'male'   35.0       0       0\n\n                 Ticket     Fare     Cabin  Embarked  \n0          b'A/5 21171'   7.2500       b''      b'S'  \n1           b'PC 17599'  71.2833    b'C85'      b'C'  \n2   b'STON/O2. 3101282'   7.9250       b''      b'S'  \n3             b'113803'  53.1000   b'C123'      b'S'  \n4             b'373450'   8.0500       b''      b'S'\n\n\n\n\n\n\n\n\nImport another file; no header and some rows.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nfile\n \n=\n \n'digits2.csv'\n\n\n\n# Read the first 5 rows of the file into a DataFrame: data\n\n\ndata\n \n=\n \npd\n.\nread_csv\n(\nfile\n,\n \nnrows\n \n=\n \n5\n,\n \nheader\n \n=\n \nNone\n)\n\n\n\n# Print the datatype of data\n\n\nprint\n(\ntype\n(\ndata\n))\n\n\n\n# Build a numpy array from the DataFrame: data_array\n\n\ndata_array\n \n=\n \ndata\n.\nvalues\n\n\n\n# Print the datatype of data_array to the shell\n\n\nprint\n(\ntype\n(\ndata_array\n))\n\n\n\n\n\n\n\n1\n2\n<class 'pandas.core.frame.DataFrame'>\n<class 'numpy.ndarray'>\n\n\n\n\n\n\n\n\nImport another file; replace the missing data (NA).\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nfile\n \n=\n \n'titanic_corrupt.csv'\n\n\n\n# Assign filename: file\n\n\nfile\n \n=\n \n'titanic_corrupt.csv'\n\n\n\n# Import file: data\n\n\ndata\n \n=\n \npd\n.\nread_csv\n(\nfile\n,\n \nsep\n \n=\n \n';'\n,\n \ncomment\n \n=\n \n'#'\n,\n \nna_values\n \n=\n \n[\n'Nothing'\n])\n\n\n\n# Print the head of the DataFrame\n\n\nprint\n(\ndata\n.\nhead\n())\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch   \\\n0            1         0       3    male  22.0      1       0   \n1            2         1       1  female  38.0      1       0   \n2            3         1       3  female  26.0      0       0   \n3            4         1       1  female  35.0      1       0   \n4            5         0       3    male  35.0      0       0\n\n             Ticket   Fare Cabin Embarked  \n0         A/5 21171   7,25   NaN        S  \n1          PC 17599    NaN   NaN      NaN  \n2  STON/O2. 3101282  7,925   NaN        S  \n3            113803   53,1  C123        S  \n4            373450   8,05   NaN        S\n\n\n\n\n\n\n\n\nPlot the \nAge\n variable in a histogram.\n\n\n\n\n1\n2\n3\n4\n5\npd\n.\nDataFrame\n.\nhist\n(\ndata\n[[\n'Age'\n]])\n\n\nplt\n.\nxlabel\n(\n'Age (years)'\n)\n\n\nplt\n.\nylabel\n(\n'count'\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n2, Importing from Other Files\n\u00b6\n\n\n\n\nWith Pandas\u2026 and a bit of Numpy.\n\n\nExcel spreadsheets.\n\n\nMATLAB files.\n\n\nSAS files.\n\n\nStata files.\n\n\nHDF5 files (large datasets, scientific, legal, etc.).\n\n\nFeather.\n\n\nJulia.\n\n\nPickled files (binary).\n\n\n\n\n1\n2\n3\n4\nimport\n \nos\n\n\n\nwd\n \n=\n \nos\n.\ngetcwd\n()\n\n\nos\n.\nlistdir\n(\nwd\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n['.ipynb_checkpoints',\n 'a_movie.json',\n 'cars.csv',\n 'count.svg',\n 'CYratioCyt.png',\n 'CYratioCyt.svg',\n 'digits.csv',\n 'digits2.csv',\n 'digits_header.txt',\n 'disa10.png',\n 'disa10.svg',\n 'economic.csv',\n 'economic2.xls',\n 'Importing Data into Python 3.ipynb',\n 'importing_python_ch1_pdf_slides.pdf',\n 'importing_python_ch2_pdf_slides.pdf',\n 'importing_python_ch3_pdf_slides.pdf',\n 'importing_python_ch4_pdf_slides.pdf',\n 'importing_python_ch5_pdf_slides.pdf',\n 'intermediate_python_ch1_slides.pdf',\n 'intermediate_python_ch2_slides.pdf',\n 'intermediate_python_ch3_slides.pdf',\n 'intermediate_python_ch4_slides.pdf',\n 'intermediate_python_ch5_slides.pdf',\n 'intro_python_ch1_slides.pdf',\n 'intro_python_ch2_slides.pdf',\n 'intro_python_ch3_slides.pdf',\n 'intro_python_ch4_slides.pdf',\n 'moby_dick.txt',\n 'new1.py',\n 'p.png',\n 'PRIO_bd3.0.xls',\n 'Python 3.ipynb',\n 'Python3.py',\n 'sales.sas7bdat',\n 'save.p',\n 'seaslug.txt',\n 'seaslug2.txt',\n 'strain.png',\n 'strain.svg',\n 'Thumbs.db',\n 'titanic.csv',\n 'titanic_corrupt.csv',\n 'tweets_figure.png',\n 'tweets_figure.svg',\n 'winequality-red.csv']\n\n\n\n\n\n\nPickled files\n\n\n\n\nThere are a number of datatypes that cannot be saved easily to flat files, such as lists and dictionaries. \n\n\nIf you want your files to be human readable, you may want to save them as text files in a clever manner (JSONs, which you will see in a later chapter, are appropriate for Python dictionaries).\n\n\nIf, however, you merely want to be able to import them into Python, you can serialize them. \n\n\nAll this means is converting the object into a sequence of bytes, or bytestream.\n\n\nImport it.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nimport\n \npickle\n\n\n\n# Save a dictionary into a pickle file.\n\n\nfav\n \n=\n \n{\n'Airline'\n \n:\n \n'8'\n,\n \n'Aug'\n \n:\n \n'85'\n,\n \n'June'\n \n:\n \n'69.4'\n,\n \n'Mar'\n \n:\n \n'84.4'\n}\n\n\npickle\n.\ndump\n(\nfav\n,\n \nopen\n(\n\"save.p\"\n,\n \n\"wb\"\n))\n\n\n\n# save.p\n\n\n\n# Open pickle file and load data: d\n\n\n\nwith\n \nopen\n(\n'save.p'\n,\n \n'rb'\n)\n \nas\n \nfile\n:\n\n    \nd\n \n=\n \npickle\n.\nload\n(\nfile\n)\n\n\n\n# Print d\n\n\nprint\n(\nd\n)\n\n\n\n# Print datatype of d\n\n\nprint\n(\ntype\n(\nd\n))\n\n\n\n\n\n\n\n1\n2\n{'Aug': '85', 'Airline': '8', 'Mar': '84.4', 'June': '69.4'}\n<class 'dict'>\n\n\n\n\n\n\nExcel files\n\n\n1\n2\n3\n4\n5\n6\n7\nfile\n \n=\n \n'PRIO_bd3.0.xls'\n\n\n\n# Load spreadsheet: xl\n\n\nxl\n \n=\n \npd\n.\nExcelFile\n(\nfile\n)\n\n\n\n# Print sheet names\n\n\nprint\n(\nxl\n.\nsheet_names\n)\n\n\n\n\n\n\n\n1\n['bdonly']\n\n\n\n\n\n\n\n\nParse the sheets. \n\n\nBy name or by number (first, second, \u2026).\n\n\n\n\n1\ndf1\n \n=\n \nxl\n.\nparse\n(\n'bdonly'\n)\n\n\n\n\n\n\n\n1\ndf2\n \n=\n \nxl\n.\nparse\n(\n0\n)\n\n\n\n\n\n\n\n\n\nOptions: parse the first sheet by index, skip the first row of data, then name the columns \u2018Country\u2019 and \u2018AAM due to War (2002)\u2019\n\n\n\n\n1\ndf2\n \n=\n \nxl\n.\nparse\n(\n0\n,\n \nparse_cols\n \n=\n \n[\n0\n],\n \nskiprows\n \n=\n \n[\n0\n],\n \nnames\n \n=\n \n[\n'Country'\n,\n \n'AAM due to War (2002)'\n])\n\n\n\n\n\n\n\n\n\nOptions: parse the second sheet, parse only the first column, skip the first row and rename the column \u2018Country\u2019.\n\n\n\n\n1\ndf2\n \n=\n \nxl\n.\nparse\n(\n1\n,\n \nparse_cols\n \n=\n \n[\n0\n],\n \nskiprows\n \n=\n \n[\n0\n],\n \nnames\n \n=\n \n[\n'Country'\n])\n\n\n\n\n\n\n\n\n\nPrint the head of the DataFrame.\n\n\n\n\n1\nprint\n(\ndf1\n.\nhead\n())\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n   id  year  bdeadlow  bdeadhig  bdeadbes  annualdata  source  bdversion  \\\n0   1  1946      1000      9999      1000           2       1          3   \n1   1  1952       450      3000      -999           2       1          3   \n2   1  1967        25       999        82           2       1          3   \n3   2  1946        25       999      -999           0       0          3   \n4   2  1947        25       999      -999           0       0          3\n\n   location    sidea   ...    epend  ependdate ependprec  gwnoa gwnoa2nd  \\\n0   Bolivia  Bolivia   ...        1 1946-07-21     -99.0    145      NaN   \n1   Bolivia  Bolivia   ...        1 1952-04-12     -99.0    145      NaN   \n2   Bolivia  Bolivia   ...        1 1967-10-16     -99.0    145      NaN   \n3  Cambodia   France   ...        0        NaT       NaN    220      NaN   \n4  Cambodia   France   ...        0        NaT       NaN    220      NaN\n\n   gwnob  gwnob2nd  gwnoloc region  version  \n0    NaN       NaN      145      5   2009-4  \n1    NaN       NaN      145      5   2009-4  \n2    NaN       NaN      145      5   2009-4  \n3    NaN       NaN      811      3   2009-4  \n4    NaN       NaN      811      3   2009-4\n\n[5 rows x 32 columns]\n\n\n\n\n\n\n\n\nWe process images since we cheat a little. \n\n\nMany packages are not installed. \n\n\nWe are not be able to import some data. \n\n\nImages will then present the final results.\n\n\n\n\n1\n2\nfrom\n \nIPython.display\n \nimport\n \nImage\n\n\n# for the following pictures...\n\n\n\n\n\n\n\nSAS files\n\n\n\n\nAdvanced analytics\n\n\nMultivariate analysis\n\n\nBusiness intelligence\n\n\nData management\n\n\nPredictive analytics\n\n\nStandard for computational analysis\n\n\nCode (instead of importing the package):\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n# Import sas7bdat package\n\n\nfrom\n \nsas7bdat\n \nimport\n \nSAS7BDAT\n\n\n\n# Save file to a DataFrame: df_sas\n\n\nwith\n \nSAS7BDAT\n(\n'sales.sas7bdat'\n)\n \nas\n \nfile\n:\n\n    \ndf_sas\n \n=\n \nfile\n.\nto_data_frame\n()\n\n\n\n# Print head of DataFrame\n\n\nprint\n(\ndf_sas\n.\nhead\n())\n\n\n\n# Plot histogram of DataFrame features\n\n\npd\n.\nDataFrame\n.\nhist\n(\ndf_sas\n[[\n'P'\n]])\n\n\nplt\n.\nylabel\n(\n'count'\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nThe data are adapted from the website of the undergraduate text book Principles of Economics by Hill, Griffiths and Lim (http://www.principlesofeconometrics.com/sas/).\n\n\nThe chart would be:\n\n\n\n\n1\nImage\n(\n'p.png'\n)\n\n\n\n\n\n\n\n\n\nStata files\n\n\n\n\nThe data consist of disease extent for several diseases in various countries (more information can be found at http://www.cid.harvard.edu/ciddata/geog/readme_disarea.html).\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Import pandas\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Load Stata file into a pandas DataFrame: df\n\n\ndf\n \n=\n \npd\n.\nread_stata\n(\n'disarea.dta'\n)\n\n\n\n# Print the head of the DataFrame df\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n  wbcode               country  disa1  disa2  disa3  disa4  disa5  disa6  \\\n0    AFG           Afghanistan   0.00   0.00   0.76   0.73    0.0   0.00   \n1    AGO                Angola   0.32   0.02   0.56   0.00    0.0   0.00   \n2    ALB               Albania   0.00   0.00   0.02   0.00    0.0   0.00   \n3    ARE  United Arab Emirates   0.00   0.00   0.00   0.00    0.0   0.00   \n4    ARG             Argentina   0.00   0.24   0.24   0.00    0.0   0.23\n\n   disa7  disa8   ...    disa16  disa17  disa18  disa19  disa20  disa21  \\\n0   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n1   0.56    0.0   ...       0.0     0.4     0.0    0.61    0.00     0.0   \n2   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n3   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n4   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.05     0.0\n\n   disa22  disa23  disa24  disa25  \n0    0.00    0.02    0.00    0.00  \n1    0.99    0.98    0.61    0.00  \n2    0.00    0.00    0.00    0.16  \n3    0.00    0.00    0.00    0.00  \n4    0.00    0.01    0.00    0.11\n\n[5 rows x 27 columns]\n\n\n\n\n\n\n\n\nPlot histogram of one column of the DataFrame.\n\n\n\n\n1\n2\n3\n4\n5\npd\n.\nDataFrame\n.\nhist\n(\ndf\n[[\n'disa10'\n]])\n\n\nplt\n.\nxlabel\n(\n'Extent of disease'\n)\n\n\nplt\n.\nylabel\n(\n'Number of coutries'\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nHDF5 files\n\n\n\n\nStandard for storing large quantities of numerical data.\n\n\nDatasets can be hundreds of gigabytes or terabytes.\n\n\nHDF5 can scale to exabytes.\n\n\nCode (instead of importing the package):\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n# Import packages\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nh5py\n\n\n\n# Assign filename: file\n\n\nfile\n \n=\n \n'LIGO_data.hdf5'\n \n\n\n# Load file: data\n\n\ndata\n \n=\n \nh5py\n.\nFile\n(\nfile\n,\n \n'r'\n)\n\n\n\n# Print the datatype of the loaded file\n\n\nprint\n(\ntype\n(\ndata\n))\n\n\n\n# Print the keys of the file\n\n\nfor\n \nkey\n \nin\n \ndata\n.\nkeys\n():\n\n    \nprint\n(\nkey\n)\n\n\n\n# Get the HDF5 group: group\n\n\ngroup\n \n=\n \ndata\n[\n'strain'\n]\n\n\n\n# Check out keys of group\n\n\nfor\n \nkey\n \nin\n \ngroup\n.\nkeys\n():\n\n    \nprint\n(\nkey\n)\n\n\n\n# Set variable equal to time series data: strain\n\n\nstrain\n \n=\n \ndata\n[\n'strain'\n][\n'Strain'\n]\n.\nvalue\n\n\n\n# Set number of time points to sample: num_samples\n\n\nnum_samples\n \n=\n \n10000\n\n\n\n# Set time vector\n\n\ntime\n \n=\n \nnp\n.\narange\n(\n0\n,\n \n1\n,\n \n1\n/\nnum_samples\n)\n\n\n\n# Plot data\n\n\nplt\n.\nplot\n(\ntime\n,\n \nstrain\n[:\nnum_samples\n])\n\n\nplt\n.\nxlabel\n(\n'GPS Time (s)'\n)\n\n\nplt\n.\nylabel\n(\n'strain'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nYou can find the LIGO data plus loads of documentation and tutorials (https://losc.ligo.org/events/GW150914/) and (https://losc.ligo.org/s/events/GW150914/GW150914_tutorial.html) is a great tutorial on Signal Processing with the data.\n\n\n\n\n1\nImage\n(\n'strain.png'\n)\n\n\n\n\n\n\n\n\n\nMATLAB\n\n\n\n\n\u201cMatrix Laboratory\u201d.\n\n\nIndustry standard in engineering and science.\n\n\nCode (instead of importing the package):\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n# Import package\n\n\nimport\n \nscipy.io\n\n\n\n# Load MATLAB file: mat\n\n\nmat\n \n=\n \nscipy\n.\nio\n.\nloadmat\n(\n'albeck_gene_expression.mat'\n)\n\n\n\n# Print the datatype type of mat\n\n\nprint\n(\ntype\n(\nmat\n))\n\n\n\n# Print the keys of the MATLAB dictionary\n\n\nprint\n(\nmat\n.\nkeys\n())\n\n\n\n# Print the type of the value corresponding to the key 'CYratioCyt'\n\n\nprint\n(\ntype\n(\nmat\n[\n'CYratioCyt'\n]))\n\n\n\n# Print the shape of the value corresponding to the key 'CYratioCyt'\n\n\nprint\n(\nnp\n.\nshape\n(\nmat\n[\n'CYratioCyt'\n]))\n\n\n\n# Subset the array and plot it\n\n\ndata\n \n=\n \nmat\n[\n'CYratioCyt'\n][\n25\n,\n \n5\n:]\n\n\nfig\n \n=\n \nplt\n.\nfigure\n()\n\n\nplt\n.\nplot\n(\ndata\n)\n\n\nplt\n.\nxlabel\n(\n'time (min.)'\n)\n\n\nplt\n.\nylabel\n(\n'normalized fluorescence (measure of expression)'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nThis file contains gene expression data from the Albeck Lab at UC Davis (https://www.mcb.ucdavis.edu/faculty-labs/albeck/workshop.htm). You can find the data and some great documentation.\n\n\n\n\n1\nImage\n(\n'CYratioCyt.png'\n)\n\n\n\n\n\n\n\n\n\n3, Working with Relational Databases\n\u00b6\n\n\nRelational Database Management System\n\n\n\n\nPostgreSQL.\n\n\nMySQL.\n\n\nSQLite.\n\n\nCode (instead of importing the package):\n\n\n\n\n1\n2\n3\n4\n5\n# Import necessary module\n\n\nfrom\n \nsqlalchemy\n \nimport\n \ncreate_engine\n\n\n\n# Create engine: engine\n\n\nengine\n \n=\n \ncreate_engine\n(\n'sqlite:///Chinook.sqlite'\n)\n\n\n\n\n\n\n\n'sqlite:///Northwind.sqlite'\n is called the connection string to the SQLite database.\n\n\n\n\nThe Chinook database (http://chinookdatabase.codeplex.com/) contains information about a semi-fictional digital media store in which media data is real and customer, employee and sales data has been manually created.\n\n\nCode (instead of importing the package):\n\n\n\n\n1\n2\n3\n4\n5\n# Save the table names to a list: table_names\n\n\ntable_names\n \n=\n \nengine\n.\ntable_names\n()\n\n\n\n# Print the table names to the shell\n\n\nprint\n(\ntable_names\n)\n\n\n\n\n\n\n\nQuery the DB\n\n\n\n\nThe final \n;\n is facultative.\n\n\nCode (instead of importing the package):\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# Create engine: engine\n\n\nengine\n \n=\n \ncreate_engine\n(\n'sqlite:///Chinook.sqlite'\n)\n\n\n\n# Open engine connection: con\n\n\ncon\n \n=\n \nengine\n.\nconnect\n()\n\n\n\n# Perform query: rs\n\n\nrs\n \n=\n \ncon\n.\nexecute\n(\n'SELECT * FROM Album'\n)\n\n\n\n# Save results of the query to DataFrame: df\n\n\ndf\n \n=\n \npd\n.\nDataFrame\n(\nrs\n.\nfetchall\n())\n\n\n\n# Close connection\n\n\ncon\n.\nclose\n()\n\n\n\n# Print head of DataFrame df\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\nCustomize queries\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n# Create engine: engine\n\n\nengine\n \n=\n \ncreate_engine\n(\n'sqlite:///Chinook.sqlite'\n)\n \n# becomes facultative with many queries\n\n\n\n# Open engine in context manager\n\n\n# Perform query and save results to DataFrame: df\n\n\nwith\n \nengine\n.\nconnect\n()\n \nas\n \ncon\n:\n\n    \nrs\n \n=\n \ncon\n.\nexecute\n(\n'SELECT LastName, Title FROM Employee'\n)\n\n    \ndf\n \n=\n \npd\n.\nDataFrame\n(\nrs\n.\nfetchmany\n(\nsize\n \n=\n \n3\n))\n\n    \ndf\n.\ncolumns\n \n=\n \nrs\n.\nkeys\n()\n \n# set the DataFrame's column names to the corresponding names of the table columns\n\n\n\n# Print the length of the DataFrame df\n\n\nprint\n(\nlen\n(\ndf\n))\n\n\n\n# Print the head of the DataFrame df\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Create engine: engine\n\n\nengine\n \n=\n \ncreate_engine\n(\n'sqlite:///Chinook.sqlite'\n)\n \n# becomes facultative with many queries\n\n\n\n# Open engine in context manager\n\n\n# Perform query and save results to DataFrame: df\n\n\nwith\n \nengine\n.\nconnect\n()\n \nas\n \ncon\n:\n\n    \nrs\n \n=\n \ncon\n.\nexecute\n(\n\"SELECT * FROM Employee WHERE EmployeeId >= 6\"\n)\n\n    \ndf\n \n=\n \npd\n.\nDataFrame\n(\nrs\n.\nfetchall\n())\n\n    \ndf\n.\ncolumns\n \n=\n \nrs\n.\nkeys\n()\n\n\n\n# Print the head of the DataFrame df\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n# Create engine: engine\n\n\nengine\n \n=\n \ncreate_engine\n(\n'sqlite:///Chinook.sqlite'\n)\n\n\n\n# Open engine in context manager\n\n\nwith\n \nengine\n.\nconnect\n()\n \nas\n \ncon\n:\n\n    \nrs\n \n=\n \ncon\n.\nexecute\n(\n'SELECT * FROM Employee ORDER BY BirthDate'\n)\n\n    \ndf\n \n=\n \npd\n.\nDataFrame\n(\nrs\n.\nfetchall\n())\n\n\n    \n# Set the DataFrame's column names\n\n    \ndf\n.\ncolumns\n \n=\n \nrs\n.\nkeys\n()\n\n\n\n# Print head of DataFrame\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\nQuery the DB the Pandas way\n\n\n\n\nSimpler code (instead of importing the package)!!!\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n# Import packages\n\n\nfrom\n \nsqlalchemy\n \nimport\n \ncreate_engine\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Create engine: engine\n\n\nengine\n \n=\n \ncreate_engine\n(\n'sqlite:///Chinook.sqlite'\n)\n\n\n\n# Execute query and store records in DataFrame: df\n\n\ndf\n \n=\n \npd\n.\nread_sql_query\n(\n\"SELECT * FROM Album\"\n,\n \nengine\n)\n\n\n\n# Print head of DataFrame\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n# Open engine in context manager\n\n\n# Perform query and save results to DataFrame: df1\n\n\nwith\n \nengine\n.\nconnect\n()\n \nas\n \ncon\n:\n\n    \nrs\n \n=\n \ncon\n.\nexecute\n(\n\"SELECT * FROM Album\"\n)\n\n    \ndf1\n \n=\n \npd\n.\nDataFrame\n(\nrs\n.\nfetchall\n())\n\n    \ndf1\n.\ncolumns\n \n=\n \nrs\n.\nkeys\n()\n\n\n\n# Confirm that both methods yield the same result: does df = df1 ?   \n\n\nprint\n(\ndf\n.\nequals\n(\ndf1\n))\n\n\n\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Import packages\n\n\nfrom\n \nsqlalchemy\n \nimport\n \ncreate_engine\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Create engine: engine\n\n\nengine\n \n=\n \ncreate_engine\n(\n'sqlite:///Chinook.sqlite'\n)\n\n\n\n# Execute query and store records in DataFrame: df\n\n\ndf\n \n=\n \npd\n.\nread_sql_query\n(\n\"SELECT * FROM Employee WHERE EmployeeId >= 6 ORDER BY BirthDate\"\n,\n \nengine\n)\n\n\n\n# Print head of DataFrame\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\nINNER JOIN\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nimport\n \npandas\n \nas\n \npd\n\n\nfrom\n \nsqlalchemy\n \nimport\n \ncreate_engine\n\n\n\nengine\n \n=\n \ncreate_engine\n(\n'sqlite:///Chinook.sqlite'\n)\n\n\n\n# Open engine in context manager\n\n\n# Perform query and save results to DataFrame: df\n\n\nwith\n \nengine\n.\nconnect\n()\n \nas\n \ncon\n:\n\n    \nrs\n \n=\n \ncon\n.\nexecute\n(\n\"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\"\n)\n\n    \ndf\n \n=\n \npd\n.\nDataFrame\n(\nrs\n.\nfetchall\n())\n\n    \ndf\n.\ncolumns\n \n=\n \nrs\n.\nkeys\n()\n\n\n\n# Print head of DataFrame df\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\n\n\nAlternative code:\n\n\n\n\n1\n2\n3\n4\ndf\n \n=\n \npd\n.\nread_sql_query\n(\n\"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\"\n,\n \nengine\n)\n\n\n\n# Print head of DataFrame df\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n1\n2\n3\n4\n5\n# Execute query and store records in DataFrame: df\n\n\ndf\n \n=\n \npd\n.\nread_sql_query\n(\n\"SELECT * FROM PlaylistTrack INNER JOIN Track on PlaylistTrack.TrackId = Track.TrackId WHERE Milliseconds < 250000\"\n,\n \nengine\n)\n\n\n\n# Print head of DataFrame\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\n4, Importing Flat Files from the Web (Web Scraping)\n\u00b6\n\n\n~ scrape, wrangle, munge, wrangling, munging~ \n\n\n\n\nImport and locally save datasets from the web.\n\n\nLoad datasets into pandas DataFrames.\n\n\nMake HTTP requests (GET requests).\n\n\nScrape web data such as HTML.\n\n\nParse HTML into useful data (BeautifulSoup).\n\n\nUse the urllib and requests packages.\n\n\n\n\nUsing the \nurllib\n package on csv files\n\n\n\n\nImport the package.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nfrom\n \nurllib.request\n \nimport\n \nurlretrieve\n\n\n\n# import pandas as pd\n\n\n\n# Assign url of file: url\n\n\nurl\n \n=\n \n'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\n\n\n# Save file locally\n\n\nurlretrieve\n(\nurl\n,\n \n'winequality-red.csv'\n)\n\n\n\n# Read file into a DataFrame and print its head\n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\n'winequality-red.csv'\n,\n \nsep\n=\n';'\n)\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# import matplotlib.pyplot as plt\n\n\n# import pandas as pd\n\n\n\n# Assign url of file: url\n\n\nurl\n \n=\n \n'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\n\n\n# Read file into a DataFrame: df\n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\nurl\n,\n \nsep\n \n=\n \n';'\n)\n\n\n\n# Print the head of the DataFrame\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n# Plot first column of df\n\n\npd\n.\nDataFrame\n.\nhist\n(\ndf\n.\nix\n[:,\n \n0\n:\n1\n])\n\n\nplt\n.\nxlabel\n(\n'fixed acidity (g(tartaric acid)/dm$^3$)'\n)\n\n\nplt\n.\nylabel\n(\n'count'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5\n\n\n\n\n\n\n\n\nUsing the \nurllib\n package on Excel files\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n# import pandas as pd\n\n\n\n# Assign url of file: url\n\n\nurl\n \n=\n \n'http://s3.amazonaws.com/assets.datacamp.com/course/importing_data_into_r/latitude.xls'\n\n\n\n# Read in all sheets of Excel file: xl\n\n\nxl\n \n=\n \npd\n.\nread_excel\n(\nurl\n,\n \nsheetname\n \n=\n \nNone\n)\n\n\n\n# Print the sheetnames (keys) to the shell !!!\n\n\nprint\n(\nxl\n.\nkeys\n())\n\n\n\n# Print the head of the first sheet (using its name, NOT its index)\n\n\nprint\n(\nxl\n[\n'1700'\n]\n.\nhead\n())\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\ndict_keys(['1700', '1900'])\n                 country       1700\n0            Afghanistan  34.565000\n1  Akrotiri and Dhekelia  34.616667\n2                Albania  41.312000\n3                Algeria  36.720000\n4         American Samoa -14.307000\n\n\n\n\n\n\nHTTP requests to import files from the web\n\n\n\n\nrequests\n is one of the most downloaded Python packages.\n\n\nrequests\n works with \nurllib\n.\n\n\nImport the package.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nfrom\n \nurllib.request\n \nimport\n \nurlopen\n,\n \nRequest\n\n\n\n# Specify the url\n\n\nurl\n \n=\n \n\"http://www.datacamp.com/teach/documentation\"\n\n\n\n# This packages the request: request\n\n\nrequest\n \n=\n \nRequest\n(\nurl\n)\n\n\n\n# Send the request and catches the response: response\n\n\nresponse\n \n=\n \nurlopen\n(\nrequest\n)\n\n\n\n# Print the datatype of response\n\n\nprint\n(\ntype\n(\nresponse\n))\n\n\n\n# Be polite and close the response!\n\n\nresponse\n.\nclose\n()\n\n\n\n\n\n\n\n1\n<class 'http.client.HTTPResponse'>\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nfrom\n \nurllib.request\n \nimport\n \nurlopen\n,\n \nRequest\n\n\n\nurl\n \n=\n \n\"http://docs.datacamp.com/teach/\"\n\n\n\nrequest\n \n=\n \nRequest\n(\nurl\n)\n\n\n\nresponse\n \n=\n \nurlopen\n(\nrequest\n)\n\n\n\n\n# Extract the response: html\n\n\nhtml\n \n=\n \nresponse\n.\nread\n()\n\n\n\n# Print the html\n\n\nprint\n(\nhtml\n)\n\n\n\n# Be polite and close the response!\n\n\nresponse\n.\nclose\n()\n\n\n\n\n\n\n\n1\nb\n'\n<!\nDOCTYPE\n \nhtml\n>\n\\\nn\n<\nlink\n \nrel\n=\n\"shortcut icon\"\n \nhref\n=\n\"images/favicon.ico\"\n \n/>\n\\\nn\n<\nhtml\n>\n\\\nn\n\\\nn\n  \n<\nhead\n>\n\\\nn\n  \n<\nmeta\n \ncharset\n=\n\"utf-8\"\n>\n\\\nn\n  \n<\nmeta\n \nhttp\n-\nequiv\n=\n\"X-UA-Compatible\"\n \ncontent\n=\n\"IE=edge\"\n>\n\\\nn\n  \n<\nmeta\n \nname\n=\n\"viewport\"\n \ncontent\n=\n\"width=device-width, initial-scale=1\"\n>\n\\\nn\n\\\nn\n  \n<\ntitle\n>\nHome\n</\ntitle\n>\n\\\nn\n  \n<\nmeta\n \nname\n=\n\"description\"\n \ncontent\n=\n\"All Documentation on Course Creation\"\n>\n\\\nn\n\\\nn\n  \n<\nlink\n \nrel\n=\n\"stylesheet\"\n \nhref\n=\n\"/teach/css/main.css\"\n>\n\\\nn\n  \n<\nlink\n \nrel\n=\n\"canonical\"\n \nhref\n=\n\"/teach/\"\n>\n\\\nn\n  \n<\nlink\n \nrel\n=\n\"alternate\"\n \ntype\n=\n\"application/rss+xml\"\n \ntitle\n=\n\"DataCamp Teach Documentation\"\n \nhref\n=\n\"/teach/feed.xml\"\n \n/>\n\\\nn\n</\nhead\n>\n\\\nn\n\\\nn\n\\\nn\n  \n<\nbody\n>\n\\\nn\n\\\nn\n    \n<\nheader\n \nclass\n=\n\"site-header\"\n>\n\\\nn\n\\\nn\n  \n<\ndiv\n \nclass\n=\n\"wrapper\"\n>\n\\\nn\n\\\nn\n    \n<\na\n \nclass\n=\n\"site-title\"\n \nhref\n=\n\"/teach/\"\n>\nDataCamp\n \nTeach\n \nDocumentation\n</\na\n>\n\\\nn\n\\\nn\n  \n</\ndiv\n>\n\\\nn\n\\\nn\n</\nheader\n>\n\\\nn\n\\\nn\n\\\nn\n    \n<\ndiv\n \nclass\n=\n\"page-content\"\n>\n\\\nn\n      \n<\ndiv\n \nclass\n=\n\"wrapper\"\n>\n\\\nn\n        \n<\np\n>\nThe\n \nTeach\n \nDocumentation\n \nhas\n \nbeen\n \nmoved\n \nto\n \n<\na\n \nhref\n=\n\"https://www.datacamp.com/teach/documentation\"\n>\nhttps\n:\n//www.datacamp.com/teach/documentation</a>!</p>\\n\\n<!-- Everybody can teach on DataCamp. The resources on this website explain all the steps to build your own course on DataCamp\\'s interactive data science platform.\\n\\nInterested in partnering with DataCamp? Head over to the [Course Material](/teach/course-material.html) page to get an idea of the requirements to build your own interactive course together with DataCamp!\\n\\n## Table of Contents\\n\\n- [Course Material](/teach/course-material.html) - Content required to build a DataCamp course.\\n- [Video Lectures](/teach/video-lectures.html) - Details on video recording and editing.\\n- [DataCamp Teach](https://www.datacamp.com/teach) - Use the DataCamp Teach website to create DataCamp courses (preferred).\\n- [datacamp R Package](https://github.com/datacamp/datacamp/wiki) - Use R Package to create DataCamp courses (legacy).\\n- [Code DataCamp Exercises](/teach/code-datacamp-exercises.html)\\n- [SCT Design (R)](https://github.com/datacamp/testwhat/wiki)\\n- [SCT Design (Python)](https://github.com/datacamp/pythonwhat/wiki)\\n- [Style Guide](/teach/style-guide.html) -->\\n\\n\\n      </div>\\n    </div>\\n\\n    \\n\\n  </body>\\n\\n</html>\\n'\n\n\n\n\n\n\n\nUsing \nrequests\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nimport\n \nrequests\n\n\n\nurl\n \n=\n \n\"http://docs.datacamp.com/teach/\"\n\n\n\nr\n \n=\n \nrequests\n.\nget\n(\nurl\n)\n\n\n\ntext\n \n=\n \nr\n.\ntext\n\n\n\n# Print part of the html (split the paragraphs) instead of all with  print(text)\n\n\nhead\n \n=\n \ntext\n.\nsplit\n(\n'\n\\n\\n\n'\n)\n\n\n\nprint\n(\nhead\n[\n0\n])\n\n\nprint\n(\n''\n)\n\n\nprint\n(\nhead\n[\n1\n])\n\n\nprint\n(\n''\n)\n\n\nprint\n(\nhead\n[\n2\n])\n\n\nprint\n(\n''\n)\n\n\nprint\n(\nhead\n[\n3\n])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n<!DOCTYPE html>\n\n\n<\nlink\n \nrel\n=\n\"shortcut icon\"\n \nhref\n=\n\"images/favicon.ico\"\n \n/>\n\n\n<\nhtml\n>\n\n\n  \n<\nhead\n>\n\n  \n<\nmeta\n \ncharset\n=\n\"utf-8\"\n>\n\n  \n<\nmeta\n \nhttp-equiv\n=\n\"X-UA-Compatible\"\n \ncontent\n=\n\"IE=edge\"\n>\n\n  \n<\nmeta\n \nname\n=\n\"viewport\"\n \ncontent\n=\n\"width=device-width, initial-scale=1\"\n>\n\n\n  \n<\ntitle\n>\nHome\n</\ntitle\n>\n\n  \n<\nmeta\n \nname\n=\n\"description\"\n \ncontent\n=\n\"All Documentation on Course Creation\"\n>\n\n\n  \n<\nlink\n \nrel\n=\n\"stylesheet\"\n \nhref\n=\n\"/teach/css/main.css\"\n>\n\n  \n<\nlink\n \nrel\n=\n\"canonical\"\n \nhref\n=\n\"/teach/\"\n>\n\n  \n<\nlink\n \nrel\n=\n\"alternate\"\n \ntype\n=\n\"application/rss+xml\"\n \ntitle\n=\n\"DataCamp Teach Documentation\"\n \nhref\n=\n\"/teach/feed.xml\"\n \n/>\n\n\n</\nhead\n>\n\n\n\n\n\n\n\nScraping the web\n\n\n~ scrape, wrangle, munge~\n\n\n\n\nScrape unstructured data.\n\n\nScrape structured data, parse it and extract the data from HTML using the \nBeautifulSoup\n package.\n\n\nImport the packages.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nimport\n \nrequests\n\n\nfrom\n \nbs4\n \nimport\n \nBeautifulSoup\n\n\n\nurl\n \n=\n \n'https://www.python.org/~guido/'\n\n\n\nr\n \n=\n \nrequests\n.\nget\n(\nurl\n)\n\n\n\nhtml_doc\n \n=\n \nr\n.\ntext\n\n\n\n# Create a BeautifulSoup object from the HTML: soup\n\n\nsoup\n \n=\n \nBeautifulSoup\n(\nhtml_doc\n,\n \n'lxml'\n)\n\n\n\n# Prettify the BeautifulSoup object: pretty_soup\n\n\npretty_soup\n \n=\n \nsoup\n.\nprettify\n()\n\n\n\n# Print the response\n\n\nprint\n(\ntype\n(\npretty_soup\n))\n\n\n\n# Print part of the html (split the text), not all with  print(pretty_soup)\n\n\nhead\n \n=\n \npretty_soup\n.\nsplit\n(\n'</h3>'\n)\n\n\n\nprint\n(\nhead\n[\n0\n])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n<class\n \n'str'\n>\n\n\n<html>\n\n \n<head>\n\n  \n<title>\n\n   Guido's Personal Home Page\n  \n</title>\n\n \n</head>\n\n \n<body\n \nbgcolor=\n\"#FFFFFF\"\n \ntext=\n\"#000000\"\n>\n\n  \n<h1>\n\n   \n<a\n \nhref=\n\"pics.html\"\n>\n\n    \n<img\n \nborder=\n\"0\"\n \nsrc=\n\"images/IMG_2192.jpg\"\n/>\n\n   \n</a>\n\n   Guido van Rossum - Personal Home Page\n  \n</h1>\n\n  \n<p>\n\n   \n<a\n \nhref=\n\"http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\"\n>\n\n    \n<i>\n\n     \"Gawky and proud of it.\"\n    \n</i>\n\n   \n</a>\n\n  \n</p>\n\n  \n<h3>\n\n   \n<a\n \nhref=\n\"http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\"\n>\n\n    Who\nI Am\n   \n</a>\n\n\n\n\n\n\n\n\n\nOther operations with \nBeautifulSoup\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nimport\n \nrequests\n\n\nfrom\n \nbs4\n \nimport\n \nBeautifulSoup\n\n\n\nurl\n \n=\n \n'https://www.python.org/~guido/'\n\n\n\nr\n \n=\n \nrequests\n.\nget\n(\nurl\n)\n\n\n\nhtml_doc\n \n=\n \nr\n.\ntext\n\n\n\n\n# Create a BeautifulSoup object from the HTML: soup\n\n\nsoup\n \n=\n \nBeautifulSoup\n(\nhtml_doc\n,\n \n'lxml'\n)\n\n\n\n# Get the title of Guido's webpage: guido_title\n\n\nguido_title\n \n=\n \nsoup\n.\ntitle\n \n# attribute\n\n\n\n# Print the title of Guido's webpage to the shell\n\n\nprint\n(\nguido_title\n)\n\n\n\n# Get Guido's text: guido_text\n\n\nguido_text\n \n=\n \nsoup\n.\nget_text\n()\n \n# method\n\n\n\n# Print Guido's text to the shell\n\n\nprint\n(\nguido_text\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n<\ntitle\n>\nGuido\n's Personal Home Page</title>\n\n\n\nGuido's\n \nPersonal\n \nHome\n \nPage\n\n\n\nGuido\n \nvan\n \nRossum\n \n-\n \nPersonal\n \nHome\n \nPage\n\n\n\"Gawky and proud of it.\"\n\n\nWho\n\n\nI\n \nAm\n\n\nI\n \nam\n \nthe\n \nauthor\n \nof\n \nthe\n \nPython\n\n\nprogramming\n \nlanguage\n.\n  \nSee\n \nalso\n \nmy\n \nresume\n\n\nand\n \nmy\n \npublications\n \nlist\n,\n \na\n \nbrief\n \nbio\n,\n \nassorted\n \nwritings\n,\n \npresentations\n \nand\n \ninterviews\n \n(\nall\n \nabout\n \nPython\n),\n \nsome\n\n\npictures\n \nof\n \nme\n,\n\n\nmy\n \nnew\n \nblog\n,\n \nand\n\n\nmy\n \nold\n\n\nblog\n \non\n \nArtima\n.\ncom\n.\n  \nI\n \nam\n\n\n@gvanrossum\n \non\n \nTwitter\n.\n  \nI\n\n\nalso\n \nhave\n\n\na\n \nG\n+\n\n\nprofile\n.\n\n\n\nIn\n \nJanuary\n \n2013\n \nI\n \njoined\n\n\nDropbox\n.\n  \nI\n \nwork\n \non\n \nvarious\n \nDropbox\n\n\nproducts\n \nand\n \nhave\n \n50\n% for my Python work, no strings attached.\n\n\nPreviously\n,\n \nI\n \nhave\n \nworked\n \nfor\n \nGoogle\n,\n \nElemental\n \nSecurity\n,\n \nZope\n\n\nCorporation\n,\n \nBeOpen\n.\ncom\n,\n \nCNRI\n,\n \nCWI\n,\n \nand\n \nSARA\n.\n  \n(\nSee\n\n\nmy\n \nresume\n.)\n  \nI\n \ncreated\n \nPython\n \nwhile\n \nat\n \nCWI\n.\n\n\n\nHow\n \nto\n \nReach\n \nMe\n\n\nYou\n \ncan\n \nsend\n \nemail\n \nfor\n \nme\n \nto\n \nguido\n \n(\nat\n)\n \npython\n.\norg\n.\n\n\nI\n \nread\n \neverything\n \nsent\n \nthere\n,\n \nbut\n \nif\n \nyou\n \nask\n\n\nme\n \na\n \nquestion\n \nabout\n \nusing\n \nPython\n,\n \nit's likely that I won't\n \nhave\n \ntime\n\n\nto\n \nanswer\n \nit\n,\n \nand\n \nwill\n \ninstead\n \nrefer\n \nyou\n \nto\n\n\nhelp\n \n(\nat\n)\n \npython\n.\norg\n,\n\n\ncomp\n.\nlang\n.\npython\n \nor\n\n\nStackOverflow\n.\n  \nIf\n \nyou\n \nneed\n \nto\n\n\ntalk\n \nto\n \nme\n \non\n \nthe\n \nphone\n \nor\n \nsend\n \nme\n \nsomething\n \nby\n \nsnail\n \nmail\n,\n \nsend\n \nme\n \nan\n\n\nemail\n \nand\n \nI\n'll gladly email you instructions on how to reach me.\n\n\n\nMy Name\n\n\nMy name often poses difficulties for Americans.\n\n\n\nPronunciation: in Dutch, the \"G\" in Guido is a hard G,\n\n\npronounced roughly like the \"ch\" in Scottish \"loch\".  (Listen to the\n\n\nsound clip.)  However, if you're\n\n\nAmerican\n,\n \nyou\n \nmay\n \nalso\n \npronounce\n \nit\n \nas\n \nthe\n \nItalian\n \n\"Guido\"\n.\n  \nI\n'm not\n\n\ntoo worried about the associations with mob assassins that some people\n\n\nhave. :-)\n\n\n\nSpelling: my last name is two words, and I'd\n \nlike\n \nkeep\n \nit\n\n\nthat\n \nway\n,\n \nthe\n \nspelling\n \non\n \nsome\n \nof\n \nmy\n \ncredit\n \ncards\n \nnotwithstanding\n.\n\n\nDutch\n \nspelling\n \nrules\n \ndictate\n \nthat\n \nwhen\n \nused\n \nin\n \ncombination\n \nwith\n \nmy\n\n\nfirst\n \nname\n,\n \n\"van\"\n \nis\n \nnot\n \ncapitalized\n:\n \n\"Guido van Rossum\"\n.\n  \nBut\n \nwhen\n \nmy\n\n\nlast\n \nname\n \nis\n \nused\n \nalone\n \nto\n \nrefer\n \nto\n \nme\n,\n \nit\n \nis\n \ncapitalized\n,\n \nfor\n\n\nexample\n:\n \n\"As usual, Van Rossum was right.\"\n\n\n\nAlphabetization\n:\n \nin\n \nAmerica\n,\n \nI\n \nshow\n \nup\n \nin\n \nthe\n \nalphabet\n \nunder\n\n\n\"V\"\n.\n  \nBut\n \nin\n \nEurope\n,\n \nI\n \nshow\n \nup\n \nunder\n \n\"R\"\n.\n  \nAnd\n \nsome\n \nof\n \nmy\n \nfriends\n \nput\n\n\nme\n \nunder\n \n\"G\"\n \nin\n \ntheir\n \naddress\n \nbook\n...\n\n\n\nMore\n \nHyperlinks\n\n\n\nHere\n's a collection of essays relating to Python\n\n\nthat I've\n \nwritten\n,\n \nincluding\n \nthe\n \nforeword\n \nI\n \nwrote\n \nfor\n \nMark\n \nLutz\n' book\n\n\n\"Programming Python\".\n\n\nI own the official \n\n\nPython license.\n\n\n\nThe Audio File Formats FAQ\n\n\nI was the original creator and maintainer of the Audio File Formats\n\n\nFAQ.  It is now maintained by Chris Bagwell\n\n\nat http://www.cnpbagwell.com/audio-faq.  And here is a link to\n\n\nSOX, to which I contributed\n\n\nsome early code.\n\n\n\n\"On the Internet, nobody knows you're\n\n\na\n \ndog\n.\n\"\n\n\n\n\n\n\n\n\n\nMore.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nimport\n \nrequests\n\n\nfrom\n \nbs4\n \nimport\n \nBeautifulSoup\n\n\n\nurl\n \n=\n \n'https://www.python.org/~guido/'\n\n\n\nr\n \n=\n \nrequests\n.\nget\n(\nurl\n)\n\n\n\nhtml_doc\n \n=\n \nr\n.\ntext\n\n\n\n# create a BeautifulSoup object from the HTML: soup\n\n\nsoup\n \n=\n \nBeautifulSoup\n(\nhtml_doc\n,\n \n'lxml'\n)\n\n\n\n# Print the title of Guido's webpage\n\n\nprint\n(\nsoup\n.\ntitle\n)\n\n\n\n# Find all 'a' tags (which define hyperlinks): a_tags\n\n\na_tags\n \n=\n \nsoup\n.\nfind_all\n(\n'a'\n)\n \n# for <a>, hyperlinks\n\n\n\n# Print the URLs to the shell\n\n\nfor\n \nlink\n \nin\n \na_tags\n:\n\n    \nprint\n(\n \nlink\n.\nget\n(\n'href'\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n<title>\nGuido's Personal Home Page\n</title>\n\npics.html\nhttp://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\nhttp://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\nhttp://www.python.org\nResume.html\nPublications.html\nbio.html\nhttp://legacy.python.org/doc/essays/\nhttp://legacy.python.org/doc/essays/ppt/\ninterviews.html\npics.html\nhttp://neopythonic.blogspot.com\nhttp://www.artima.com/weblogs/index.jsp?blogger=12088\nhttps://twitter.com/gvanrossum\nhttps://plus.google.com/u/0/115212051037621986145/posts\nhttp://www.dropbox.com\nResume.html\nhttp://groups.google.com/groups?q=comp.lang.python\nhttp://stackoverflow.com\nguido.au\nhttp://legacy.python.org/doc/essays/\nimages/license.jpg\nhttp://www.cnpbagwell.com/audio-faq\nhttp://sox.sourceforge.net/\nimages/internetdog.gif\n\n\n\n\n\n\n5, Introduction to APIs and JSONs\n\u00b6\n\n\n\n\nAPI or Application Programming Interface are protocols and routines providing access to websites and web apps like OMDb, Wikipedia, Uber, Uber Developers, BGG, ImDB, Facebook, Instagram, and Twitter.\n\n\nMost of data coming from APIS are JSON files.\n\n\n\n\nImport the \njson\n package\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nimport\n \njson\n\n\n\n# Load JSON: json_data\n\n\nwith\n \nopen\n(\n'a_movie.json'\n,\n \n'r'\n)\n \nas\n \njson_file\n:\n\n    \njson_data\n \n=\n \njson\n.\nload\n(\njson_file\n)\n\n\n\nprint\n(\ntype\n(\njson_data\n))\n\n\nprint\n(\njson_data\n[\n'Title'\n])\n\n\nprint\n(\njson_data\n[\n'Year'\n])\n\n\nprint\n(\n''\n)\n\n\n\n# Print each key-value pair in json_data\n\n\nfor\n \nk\n \nin\n \njson_data\n.\nkeys\n():\n\n    \nprint\n(\nk\n \n+\n \n': '\n,\n \njson_data\n[\nk\n])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n<class 'dict'>\nThe Social Network\n2010\n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nAwards:  Won 3 Oscars. Another 161 wins & 162 nominations.\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nTitle:  The Social Network\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nDirector:  David Fincher\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)\n\n\n\n\n\n\nThe \nrequests\n package again\n\n\n\n\nPull some movie data down from the Open Movie Database (OMDB) using their API.\n\n\nPull it as text.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nrequests\n\n\n\nurl\n \n=\n \n'http://www.omdbapi.com/?t=social+network'\n\n\n\nr\n \n=\n \nrequests\n.\nget\n(\nurl\n)\n\n\n\nprint\n(\ntype\n(\nr\n))\n\n\nprint\n(\n''\n)\n\n\n\n# Print the text of the response\n\n\nprint\n(\nr\n.\ntext\n)\n\n\n\n\n\n\n\n1\n2\n3\n<class 'requests.models.Response'>\n\n{\"Title\":\"The Social Network\",\"Year\":\"2010\",\"Rated\":\"PG-13\",\"Released\":\"01 Oct 2010\",\"Runtime\":\"120 min\",\"Genre\":\"Biography, Drama\",\"Director\":\"David Fincher\",\"Writer\":\"Aaron Sorkin (screenplay), Ben Mezrich (book)\",\"Actors\":\"Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\",\"Plot\":\"Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\",\"Language\":\"English, French\",\"Country\":\"USA\",\"Awards\":\"Won 3 Oscars. Another 161 wins & 162 nominations.\",\"Poster\":\"http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\",\"Metascore\":\"95\",\"imdbRating\":\"7.7\",\"imdbVotes\":\"478,258\",\"imdbID\":\"tt1285016\",\"Type\":\"movie\",\"Response\":\"True\"}\n\n\n\n\n\n\n\n\nPull it as JSON or a dictionary.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nimport\n \nrequests\n\n\n\nurl\n \n=\n \n'http://www.omdbapi.com/?t=social+network'\n\n\n\nr\n \n=\n \nrequests\n.\nget\n(\nurl\n)\n\n\n\n# Decode the JSON data into a dictionary: json_data\n\n\njson_data\n \n=\n \nr\n.\njson\n()\n\n\n\nprint\n(\ntype\n(\njson_data\n))\n\n\nprint\n(\n''\n)\n\n\n\n# Print each key-value pair in json_data\n\n\nfor\n \nk\n \nin\n \njson_data\n.\nkeys\n():\n\n    \nprint\n(\nk\n \n+\n \n': '\n,\n \njson_data\n[\nk\n])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n<class 'dict'>\n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nAwards:  Won 3 Oscars. Another 161 wins & 162 nominations.\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nDirector:  David Fincher\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nTitle:  The Social Network\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)\n\n\n\n\n\n\n\n\nSearch the Library of Congress.\n\n\nPull a dictionary of dictionaries.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nimport\n \nrequests\n\n\n\nurl\n \n=\n \n'http://chroniclingamerica.loc.gov/search/titles/results/?terms=new%20york&format=json'\n\n\n\nr\n \n=\n \nrequests\n.\nget\n(\nurl\n)\n\n\n\n# Decode the JSON data into a dictionary: json_data\n\n\njson_data\n \n=\n \nr\n.\njson\n()\n\n\n\n# Select the first element in the list json_data['items']: nyc_loc\n\n\n# dict of dict\n\n\nnyc_loc\n \n=\n \njson_data\n[\n'items'\n][\n0\n]\n\n\n\n# Print each key-value pair in nyc_loc\n\n\nfor\n \nk\n \nin\n \nnyc_loc\n.\nkeys\n():\n\n    \nprint\n(\nk\n \n+\n \n': '\n,\n \nnyc_loc\n[\nk\n])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\ncounty:  ['New York']\nplace_of_publication:  New York\noclc:  12928956\nsubject:  ['New York (N.Y.)--Newspapers.', 'New York (State)--New York.--fast--(OCoLC)fst01204333']\nalt_title:  []\ntitle:  The New York thrice-a-week world.\ntype:  title\nedition:  New York and Pennsylvania ed.\nid:  /lccn/sn85047837/\nnote:  ['Democrat.', 'Description based on: Vol. 36, no. 3,670 (Oct. 4, 1895).', 'The words \"New York thrice-a-week\" appear in title ornament.']\nplace:  ['New York--New York--New York']\nessay:  []\nstart_year:  1890\nend_year:  1999\npublisher:  Press Pub. Co.\nlccn:  sn85047837\nholding_type:  ['Unspecified']\nstate:  ['New York']\ncity:  ['New York']\nlanguage:  ['English']\ncountry:  New York\ntitle_normal:  new york thrice-a-week world.\nurl:  http://chroniclingamerica.loc.gov/lccn/sn85047837.json\nfrequency:  Three times a week\n\n\n\n\n\n\n\n\nThe Wikipedia API.\n\n\nDocumentation: https://www.mediawiki.org/wiki/API:Main_page\n\n\nDictionary of dictionary of dictionary.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \nrequests\n\n\n\nurl\n \n=\n \n'https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles=pizza'\n\n\n\nr\n \n=\n \nrequests\n.\nget\n(\nurl\n)\n\n\n\n# Decode the JSON data into a dictionary: json_data\n\n\njson_data\n \n=\n \nr\n.\njson\n()\n\n\n\n# Print the Wikipedia page extract\n\n\npizza_extract\n \n=\n \njson_data\n[\n'query'\n][\n'pages'\n][\n'24768'\n][\n'extract'\n]\n\n\nprint\n(\npizza_extract\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n<p><b>\nPizza\n</b>\n is a flatbread generally topped with tomato sauce and cheese and baked in an oven. It is commonly topped with a selection of meats, vegetables and condiments. The term was first recorded in the 10th century, in a Latin manuscript from Gaeta in Central Italy. The modern pizza was invented in Naples, Italy, and the dish and its variants have since become popular in many areas of the world.\n</p>\n\n\n<p>\nIn 2009, upon Italy's request, Neapolitan pizza was safeguarded in the European Union as a Traditional Speciality Guaranteed dish. The Associazione Verace Pizza Napoletana (the True Neapolitan Pizza Association) is a non-profit organization founded in 1984 with headquarters in Naples. It promotes and protects the \"true Neapolitan pizza\".\n</p>\n\n\n<p>\nPizza is sold fresh or frozen, either whole or in portions, and is a common fast food item in Europe and North America. Various types of ovens are used to cook them and many varieties exist. Several similar dishes are prepared from ingredients commonly used in pizza preparation, such as calzone and stromboli.\n</p>\n\n\n<p></p>\n\n\n\n\n\n\n\nThe Twitter API and Authentification\n\n\n\n\nTwitter has many APIs: the main API, the REST API, Streaming APIs (private, public), Firehouse (expensive), etc.\n\n\nField Guide: https://dev.twitter.com/overview/api/tweets\n\n\nConsult the documentation to set an authentification key (available online).\n\n\n\n\ntweepy\n package\n\n\n\n\nThe authentication looks like the following:\n\n\nCode:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Import package\n\n\nimport\n \ntweepy\n,\n \njson\n\n\n\n# Store OAuth authentication credentials in relevant variables\n\n\naccess_token\n \n=\n \n\"1092294848-aHN7DcRP9B4VMTQIhwqOYiB14YkW92fFO8k8EPy\"\n\n\naccess_token_secret\n \n=\n \n\"X4dHmhPfaksHcQ7SCbmZa2oYBBVSD2g8uIHXsp5CTaksx\"\n\n\nconsumer_key\n \n=\n \n\"nZ6EA0FxZ293SxGNg8g8aP0HM\"\n\n\nconsumer_secret\n \n=\n \n\"fJGEodwe3KiKUnsYJC3VRndj7jevVvXbK2D5EiJ2nehafRgA6i\"\n\n\n\n# Pass OAuth details to tweepy's OAuth handler\n\n\nauth\n \n=\n \ntweepy\n.\nOAuthHandler\n(\nconsumer_key\n,\n \nconsumer_secret\n)\n\n\nauth\n.\nset_access_token\n(\naccess_token\n,\n \naccess_token_secret\n)\n\n\n\n\n\n\n\nStart streaming tweets\n\n\n\n\nCode:\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Initialize Stream listener\n\n\nl\n \n=\n \nMyStreamListener\n()\n\n\n\n# Create you Stream object with authentication\n\n\nstream\n \n=\n \ntweepy\n.\nStream\n(\nauth\n,\n \nl\n)\n\n\n\n\n# Filter Twitter Streams to capture data by the keywords:\n\n\nstream\n.\nfilter\n(\ntrack\n \n=\n \n[\n'clinton'\n,\n \n'trump'\n,\n \n'sanders'\n,\n \n'cruz'\n])\n\n\n\n\n\n\n\n\n\nCode of \nMyStreamListener()\n:\n\n\nCreates a file called tweets.txt, collects streaming tweets as .jsons and writes them to the file tweets.txt; once 100 tweets have been streamed, the listener closes the file and stops listening. \n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nclass\n \nMyStreamListener\n(\ntweepy\n.\nStreamListener\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \napi\n=\nNone\n):\n\n\n        \nsuper\n(\nMyStreamListener\n,\n \nself\n)\n.\n__init__\n()\n\n        \nself\n.\nnum_tweets\n \n=\n \n0\n\n        \nself\n.\nfile\n \n=\n \nopen\n(\n\"tweets.txt\"\n,\n \n\"w\"\n)\n\n\n    \ndef\n \non_status\n(\nself\n,\n \nstatus\n):\n\n\n        \ntweet\n \n=\n \nstatus\n.\n_json\n\n        \nself\n.\nfile\n.\nwrite\n(\n \njson\n.\ndumps\n(\ntweet\n)\n \n+\n \n'\n\\n\n'\n \n)\n\n        \ntweet_list\n.\nappend\n(\nstatus\n)\n\n        \nself\n.\nnum_tweets\n \n+=\n \n1\n\n        \nif\n \nself\n.\nnum_tweets\n \n<\n \n100\n:\n\n            \nreturn\n \nTrue\n\n        \nelse\n:\n\n            \nreturn\n \nFalse\n\n        \nself\n.\nfile\n.\nclose\n()\n\n\n    \ndef\n \non_error\n(\nself\n,\n \nstatus\n):\n\n        \nprint\n(\nstatus\n)\n\n\n\n\n\n\n\nLoad and explore your Twitter data\n\n\n\n\nCode:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n# Import package\n\n\nimport\n \njson\n\n\n\n# String of path to file: tweets_data_path\n\n\ntweets_data_path\n \n=\n \n'tweets.txt'\n\n\n\n# Initialize empty list to store tweets: tweets_data\n\n\ntweets_data\n \n=\n \n[]\n\n\n\n# Open connection to file\n\n\ntweets_file\n \n=\n \nopen\n(\ntweets_data_path\n,\n \n\"r\"\n)\n\n\n\n# Read in tweets and store in list: tweets_data\n\n\nfor\n \nline\n \nin\n \ntweets_file\n:\n\n    \ntweet\n \n=\n \njson\n.\nloads\n(\nline\n)\n\n    \ntweets_data\n.\nappend\n(\ntweet\n)\n\n\n\n# Close connection to file\n\n\ntweets_file\n.\nclose\n()\n\n\n\n# Print the keys of the first tweet dict\n\n\nprint\n(\ntweets_data\n[\n0\n]\n.\nkeys\n())\n\n\n\n\n\n\n\nSend the Twitter data to DataFrame\n\n\n\n\nTwitter data in a list of dictionaries \ntweets_data\n, where each dictionary corresponds to a single tweet. \n\n\nThe text in a tweet \nt1\n is stored as the value \nt1['text']\n; similarly, the language is stored in \nt1['lang']\n. \n\n\nCode:\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Import package\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Build DataFrame of tweet texts and languages\n\n\ndf\n \n=\n \npd\n.\nDataFrame\n(\ntweets_data\n,\n \ncolumns\n=\n[\n'text'\n,\n \n'lang'\n])\n\n\n\n# Print head of DataFrame\n\n\nprint\n(\ndf\n.\nhead\n())\n\n\n\n\n\n\n\nAnalyze the tweets (NLP, regex)\n\n\n\n\nA little bit of Twitter text analysis and plotting. \n\n\nUse the statistical data visualization library seaborn: https://stanford.edu/%7Emwaskom/software/seaborn/\n\n\nCode:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n# Import the regular expressions library\n\n\nimport\n \nre\n\n\n\n# The function tells you whether the first argument (a word) occurs within the 2nd argument (a tweet)\n\n\ndef\n \nword_in_text\n(\nword\n,\n \ntweet\n):\n\n    \nword\n \n=\n \nword\n.\nlower\n()\n\n    \ntext\n \n=\n \ntweet\n.\nlower\n()\n\n    \nmatch\n \n=\n \nre\n.\nsearch\n(\nword\n,\n \ntweet\n)\n\n\n    \nif\n \nmatch\n:\n\n        \nreturn\n \nTrue\n\n    \nreturn\n \nFalse\n\n\n\n# Initialize list to store tweet counts\n\n\n[\nclinton\n,\n \ntrump\n,\n \nsanders\n,\n \ncruz\n]\n \n=\n \n[\n0\n,\n \n0\n,\n \n0\n,\n \n0\n]\n\n\n\n# Iterate through df, counting the number of tweets in which\n\n\n# each candidate is mentioned\n\n\nfor\n \nindex\n,\n \nrow\n \nin\n \ndf\n.\niterrows\n():\n\n    \nclinton\n \n+=\n \nword_in_text\n(\n'clinton'\n,\n \nrow\n[\n'text'\n])\n\n    \ntrump\n \n+=\n \nword_in_text\n(\n'trump'\n,\n \nrow\n[\n'text'\n])\n\n    \nsanders\n \n+=\n \nword_in_text\n(\n'sanders'\n,\n \nrow\n[\n'text'\n])\n\n    \ncruz\n \n+=\n \nword_in_text\n(\n'cruz'\n,\n \nrow\n[\n'text'\n])\n\n\n\n# Import packages\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\n\n# Set seaborn style\n\n\nsns\n.\nset\n(\ncolor_codes\n=\nTrue\n)\n\n\n\n# Create a list of labels:cd\n\n\ncd\n \n=\n \n[\n'clinton'\n,\n \n'trump'\n,\n \n'sanders'\n,\n \n'cruz'\n]\n\n\n\n# Plot histogram\n\n\nax\n \n=\n \nsns\n.\nbarplot\n(\ncd\n,\n \n[\nclinton\n,\n \ntrump\n,\n \nsanders\n,\n \ncruz\n])\n\n\nax\n.\nset\n(\nylabel\n=\n\"count\"\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n1\n2\nfrom\n \nIPython.display\n \nimport\n \nImage\n\n\n# for the following pictures...\n\n\n\n\n\n\n\n1\nImage\n(\n'tweets_figure.png'\n)",
            "title": "Importing Data into Python"
        },
        {
            "location": "/Importing Data into Python/#numpy",
            "text": "NumPy arrays are a standard for storing numerical data.  Arrays are essential to other packages such as the  scikit-learn , for machine learning.  Import  numpy  and  matplotlib  (or invoke them with the  %pylab  magic command).   1\n2 import   numpy   as   np  import   matplotlib.pyplot   as   plt    1\n2\n3\n4 # or...  % pylab   inline  # no need for preceeding functions (methods) with np. or plt.    1 Populating the interactive namespace from numpy and matplotlib    Import a csv file and assign the content to an array.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 file   =   'digits.csv'  # Load the file as an array called digits  digits   =   loadtxt ( file ,   delimiter   =   ',' )  # Print the datatype of digits  print ( type ( digits ))  print ( digits )  # Select a row  im   =   digits [ 2 ,   2 :]  print ( im )    1\n2\n3\n4\n5\n6\n7\n8 <class 'numpy.ndarray'>\n[[ 1.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 1.  0.  0.  0.  0.  0.]\n [ 2.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 5.  0.  0.  0.  0.  0.]]\n[ 0.  0.  0.  0.]    Import a txt file. The  delimiter  can be  '\\t' ,  ',' ,  ';' , etc.   Skip the first 90 rows.   1\n2\n3\n4\n5\n6\n7 file   =   'digits_header.txt'  # Load the data into array data  data   =   loadtxt ( file ,   delimiter = '  ' ,   skiprows   =   90 )  # Print data  print ( data )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 [[ 3.  0.] \n  [ 6.  0.] \n  [ 4.  0.] \n  [ 6.  0.] \n  [ 2.  0.] \n  [ 9.  0.] \n  [ 1.  0.] \n  [ 2.  0.] \n  [ 0.  0.] \n  [ 5.  0.]]     Import a txt file, but only the last rows and first column.   1\n2\n3\n4 data2   =   loadtxt ( file ,   delimiter = '  ' ,   skiprows   =   90 ,   usecols   =   [ 0 ])  # Print data  print ( data2 )    1 [ 3.  6.  4.  6.  2.  9.  1.  2.  0.  5.]    Import a txt file as string.   1\n2\n3\n4\n5\n6\n7 file   =   'seaslug.txt'  # Import file: data  data   =   loadtxt ( file ,   delimiter   =   ' ' ,   dtype   =   str )  # Print the first element of data  print ( data [ 0 ])    1 ['b\"b\\'Time\\'\"' 'b\"b\\'Percent\\'\"']    Import a txt file as float numbers.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 file   =   'seaslug2.txt'  # Import data as floats and skip the first row: data_float  data_float   =   loadtxt ( file ,   delimiter = '   ' ,   dtype   =   float ,   skiprows   =   1 )  # Print the 10th element of data_float  print ( data_float [ 9 ])  # Plot a scatterplot of the data  scatter ( data_float [:,   0 ],   data_float [:,   1 ])  xlabel ( 'time (min.)' )  ylabel ( 'percentage of larvae' )  show ()    1 [ 0.     0.357]     Import a csv file. Format the data.   1 data   =   genfromtxt ( 'titanic.csv' ,   delimiter   =   ',' ,   names   =   True ,   dtype   =   None )    1\n2   # A structred array  shape ( data )    1 (891,)    Extract a row, a column.   1\n2 # to get the ith row, merely execute data[i]  print ( data [ 0 : 10 ])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 [ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")\n (4, 1, 1, b\" b'female'\", 35.0, 1, 0, b\" b'113803'\", 53.1, b\" b'C123'\", b\" b'S'\")\n (5, 0, 3, b\" b'male'\", 35.0, 0, 0, b\" b'373450'\", 8.05, b\" b''\", b\" b'S'\")\n (6, 0, 3, b\" b'male'\", nan, 0, 0, b\" b'330877'\", 8.4583, b\" b''\", b\" b'Q'\")\n (7, 0, 1, b\" b'male'\", 54.0, 0, 0, b\" b'17463'\", 51.8625, b\" b'E46'\", b\" b'S'\")\n (8, 0, 3, b\" b'male'\", 2.0, 3, 1, b\" b'349909'\", 21.075, b\" b''\", b\" b'S'\")\n (9, 1, 3, b\" b'female'\", 27.0, 0, 2, b\" b'347742'\", 11.1333, b\" b''\", b\" b'S'\")\n (10, 1, 2, b\" b'female'\", 14.0, 1, 0, b\" b'237736'\", 30.0708, b\" b''\", b\" b'C'\")]   1\n2 # to get the column with name 'Fare', execute data['Fare']  print ( data [ 'Fare' ][ 0 : 10 ])    1\n2 [  7.25    71.2833   7.925   53.1      8.05     8.4583  51.8625  21.075\n  11.1333  30.0708]    Import a csv file.   Format the data.   1\n2 # default dtype is None  data2   =   recfromcsv ( 'titanic.csv' ,   delimiter   =   ',' ,   names   =   True ,   dtype   =   None )    1\n2 # Print out first three entries  print ( data2 [: 3 ])    1\n2\n3 [ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")]",
            "title": "Numpy"
        },
        {
            "location": "/Importing Data into Python/#pandas",
            "text": "Two-dimensional labeled data structure(s) or  data frame (DataFrame).  Pythonic analog of R\u2019s dataframes.  Columns can be of potentially different types.  Excellent object for:   Manipulate, slice, reshape, groupby, join, merge.  Perform statistics.  Work with time series data.  Exploratory data analysis.  Data wrangling.  Data preprocessing.  Building models.  Visualization.    There exists standards and best practices to use pandas.   1\n2 # Import pandas  import   pandas   as   pd     Pandas is not part of  %pylab .  Import a file.   1\n2\n3\n4\n5\n6\n7 file   =   'titanic.csv'  # Read the file into a DataFrame: df  df   =   pd . read_csv ( file )  # View the head of the DataFrame  print ( df . head ())     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13    Passengerid   Survived   Pclass         Sex    Age   SibSp   Parch  \\\n0            1          0        3     b'male'   22.0       1       0   \n1            2          1        1   b'female'   38.0       1       0   \n2            3          1        3   b'female'   26.0       0       0   \n3            4          1        1   b'female'   35.0       1       0   \n4            5          0        3     b'male'   35.0       0       0\n\n                 Ticket     Fare     Cabin  Embarked  \n0          b'A/5 21171'   7.2500       b''      b'S'  \n1           b'PC 17599'  71.2833    b'C85'      b'C'  \n2   b'STON/O2. 3101282'   7.9250       b''      b'S'  \n3             b'113803'  53.1000   b'C123'      b'S'  \n4             b'373450'   8.0500       b''      b'S'    Import another file; no header and some rows.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 file   =   'digits2.csv'  # Read the first 5 rows of the file into a DataFrame: data  data   =   pd . read_csv ( file ,   nrows   =   5 ,   header   =   None )  # Print the datatype of data  print ( type ( data ))  # Build a numpy array from the DataFrame: data_array  data_array   =   data . values  # Print the datatype of data_array to the shell  print ( type ( data_array ))    1\n2 <class 'pandas.core.frame.DataFrame'>\n<class 'numpy.ndarray'>    Import another file; replace the missing data (NA).    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 file   =   'titanic_corrupt.csv'  # Assign filename: file  file   =   'titanic_corrupt.csv'  # Import file: data  data   =   pd . read_csv ( file ,   sep   =   ';' ,   comment   =   '#' ,   na_values   =   [ 'Nothing' ])  # Print the head of the DataFrame  print ( data . head ())     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13    PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch   \\\n0            1         0       3    male  22.0      1       0   \n1            2         1       1  female  38.0      1       0   \n2            3         1       3  female  26.0      0       0   \n3            4         1       1  female  35.0      1       0   \n4            5         0       3    male  35.0      0       0\n\n             Ticket   Fare Cabin Embarked  \n0         A/5 21171   7,25   NaN        S  \n1          PC 17599    NaN   NaN      NaN  \n2  STON/O2. 3101282  7,925   NaN        S  \n3            113803   53,1  C123        S  \n4            373450   8,05   NaN        S    Plot the  Age  variable in a histogram.   1\n2\n3\n4\n5 pd . DataFrame . hist ( data [[ 'Age' ]])  plt . xlabel ( 'Age (years)' )  plt . ylabel ( 'count' )  plt . show ()",
            "title": "Pandas"
        },
        {
            "location": "/Importing Data into Python/#2-importing-from-other-files",
            "text": "With Pandas\u2026 and a bit of Numpy.  Excel spreadsheets.  MATLAB files.  SAS files.  Stata files.  HDF5 files (large datasets, scientific, legal, etc.).  Feather.  Julia.  Pickled files (binary).   1\n2\n3\n4 import   os  wd   =   os . getcwd ()  os . listdir ( wd )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46 ['.ipynb_checkpoints',\n 'a_movie.json',\n 'cars.csv',\n 'count.svg',\n 'CYratioCyt.png',\n 'CYratioCyt.svg',\n 'digits.csv',\n 'digits2.csv',\n 'digits_header.txt',\n 'disa10.png',\n 'disa10.svg',\n 'economic.csv',\n 'economic2.xls',\n 'Importing Data into Python 3.ipynb',\n 'importing_python_ch1_pdf_slides.pdf',\n 'importing_python_ch2_pdf_slides.pdf',\n 'importing_python_ch3_pdf_slides.pdf',\n 'importing_python_ch4_pdf_slides.pdf',\n 'importing_python_ch5_pdf_slides.pdf',\n 'intermediate_python_ch1_slides.pdf',\n 'intermediate_python_ch2_slides.pdf',\n 'intermediate_python_ch3_slides.pdf',\n 'intermediate_python_ch4_slides.pdf',\n 'intermediate_python_ch5_slides.pdf',\n 'intro_python_ch1_slides.pdf',\n 'intro_python_ch2_slides.pdf',\n 'intro_python_ch3_slides.pdf',\n 'intro_python_ch4_slides.pdf',\n 'moby_dick.txt',\n 'new1.py',\n 'p.png',\n 'PRIO_bd3.0.xls',\n 'Python 3.ipynb',\n 'Python3.py',\n 'sales.sas7bdat',\n 'save.p',\n 'seaslug.txt',\n 'seaslug2.txt',\n 'strain.png',\n 'strain.svg',\n 'Thumbs.db',\n 'titanic.csv',\n 'titanic_corrupt.csv',\n 'tweets_figure.png',\n 'tweets_figure.svg',\n 'winequality-red.csv']   Pickled files   There are a number of datatypes that cannot be saved easily to flat files, such as lists and dictionaries.   If you want your files to be human readable, you may want to save them as text files in a clever manner (JSONs, which you will see in a later chapter, are appropriate for Python dictionaries).  If, however, you merely want to be able to import them into Python, you can serialize them.   All this means is converting the object into a sequence of bytes, or bytestream.  Import it.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 import   pickle  # Save a dictionary into a pickle file.  fav   =   { 'Airline'   :   '8' ,   'Aug'   :   '85' ,   'June'   :   '69.4' ,   'Mar'   :   '84.4' }  pickle . dump ( fav ,   open ( \"save.p\" ,   \"wb\" ))  # save.p  # Open pickle file and load data: d  with   open ( 'save.p' ,   'rb' )   as   file : \n     d   =   pickle . load ( file )  # Print d  print ( d )  # Print datatype of d  print ( type ( d ))    1\n2 {'Aug': '85', 'Airline': '8', 'Mar': '84.4', 'June': '69.4'}\n<class 'dict'>   Excel files  1\n2\n3\n4\n5\n6\n7 file   =   'PRIO_bd3.0.xls'  # Load spreadsheet: xl  xl   =   pd . ExcelFile ( file )  # Print sheet names  print ( xl . sheet_names )    1 ['bdonly']    Parse the sheets.   By name or by number (first, second, \u2026).   1 df1   =   xl . parse ( 'bdonly' )    1 df2   =   xl . parse ( 0 )     Options: parse the first sheet by index, skip the first row of data, then name the columns \u2018Country\u2019 and \u2018AAM due to War (2002)\u2019   1 df2   =   xl . parse ( 0 ,   parse_cols   =   [ 0 ],   skiprows   =   [ 0 ],   names   =   [ 'Country' ,   'AAM due to War (2002)' ])     Options: parse the second sheet, parse only the first column, skip the first row and rename the column \u2018Country\u2019.   1 df2   =   xl . parse ( 1 ,   parse_cols   =   [ 0 ],   skiprows   =   [ 0 ],   names   =   [ 'Country' ])     Print the head of the DataFrame.   1 print ( df1 . head ())     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22    id  year  bdeadlow  bdeadhig  bdeadbes  annualdata  source  bdversion  \\\n0   1  1946      1000      9999      1000           2       1          3   \n1   1  1952       450      3000      -999           2       1          3   \n2   1  1967        25       999        82           2       1          3   \n3   2  1946        25       999      -999           0       0          3   \n4   2  1947        25       999      -999           0       0          3\n\n   location    sidea   ...    epend  ependdate ependprec  gwnoa gwnoa2nd  \\\n0   Bolivia  Bolivia   ...        1 1946-07-21     -99.0    145      NaN   \n1   Bolivia  Bolivia   ...        1 1952-04-12     -99.0    145      NaN   \n2   Bolivia  Bolivia   ...        1 1967-10-16     -99.0    145      NaN   \n3  Cambodia   France   ...        0        NaT       NaN    220      NaN   \n4  Cambodia   France   ...        0        NaT       NaN    220      NaN\n\n   gwnob  gwnob2nd  gwnoloc region  version  \n0    NaN       NaN      145      5   2009-4  \n1    NaN       NaN      145      5   2009-4  \n2    NaN       NaN      145      5   2009-4  \n3    NaN       NaN      811      3   2009-4  \n4    NaN       NaN      811      3   2009-4\n\n[5 rows x 32 columns]    We process images since we cheat a little.   Many packages are not installed.   We are not be able to import some data.   Images will then present the final results.   1\n2 from   IPython.display   import   Image  # for the following pictures...    SAS files   Advanced analytics  Multivariate analysis  Business intelligence  Data management  Predictive analytics  Standard for computational analysis  Code (instead of importing the package):    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 # Import sas7bdat package  from   sas7bdat   import   SAS7BDAT  # Save file to a DataFrame: df_sas  with   SAS7BDAT ( 'sales.sas7bdat' )   as   file : \n     df_sas   =   file . to_data_frame ()  # Print head of DataFrame  print ( df_sas . head ())  # Plot histogram of DataFrame features  pd . DataFrame . hist ( df_sas [[ 'P' ]])  plt . ylabel ( 'count' )  plt . show ()     The data are adapted from the website of the undergraduate text book Principles of Economics by Hill, Griffiths and Lim (http://www.principlesofeconometrics.com/sas/).  The chart would be:   1 Image ( 'p.png' )     Stata files   The data consist of disease extent for several diseases in various countries (more information can be found at http://www.cid.harvard.edu/ciddata/geog/readme_disarea.html).   1\n2\n3\n4\n5\n6\n7\n8 # Import pandas  import   pandas   as   pd  # Load Stata file into a pandas DataFrame: df  df   =   pd . read_stata ( 'disarea.dta' )  # Print the head of the DataFrame df  print ( df . head ())     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22   wbcode               country  disa1  disa2  disa3  disa4  disa5  disa6  \\\n0    AFG           Afghanistan   0.00   0.00   0.76   0.73    0.0   0.00   \n1    AGO                Angola   0.32   0.02   0.56   0.00    0.0   0.00   \n2    ALB               Albania   0.00   0.00   0.02   0.00    0.0   0.00   \n3    ARE  United Arab Emirates   0.00   0.00   0.00   0.00    0.0   0.00   \n4    ARG             Argentina   0.00   0.24   0.24   0.00    0.0   0.23\n\n   disa7  disa8   ...    disa16  disa17  disa18  disa19  disa20  disa21  \\\n0   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n1   0.56    0.0   ...       0.0     0.4     0.0    0.61    0.00     0.0   \n2   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n3   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n4   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.05     0.0\n\n   disa22  disa23  disa24  disa25  \n0    0.00    0.02    0.00    0.00  \n1    0.99    0.98    0.61    0.00  \n2    0.00    0.00    0.00    0.16  \n3    0.00    0.00    0.00    0.00  \n4    0.00    0.01    0.00    0.11\n\n[5 rows x 27 columns]    Plot histogram of one column of the DataFrame.   1\n2\n3\n4\n5 pd . DataFrame . hist ( df [[ 'disa10' ]])  plt . xlabel ( 'Extent of disease' )  plt . ylabel ( 'Number of coutries' )  plt . show ()     HDF5 files   Standard for storing large quantities of numerical data.  Datasets can be hundreds of gigabytes or terabytes.  HDF5 can scale to exabytes.  Code (instead of importing the package):    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38 # Import packages  import   numpy   as   np  import   h5py  # Assign filename: file  file   =   'LIGO_data.hdf5'   # Load file: data  data   =   h5py . File ( file ,   'r' )  # Print the datatype of the loaded file  print ( type ( data ))  # Print the keys of the file  for   key   in   data . keys (): \n     print ( key )  # Get the HDF5 group: group  group   =   data [ 'strain' ]  # Check out keys of group  for   key   in   group . keys (): \n     print ( key )  # Set variable equal to time series data: strain  strain   =   data [ 'strain' ][ 'Strain' ] . value  # Set number of time points to sample: num_samples  num_samples   =   10000  # Set time vector  time   =   np . arange ( 0 ,   1 ,   1 / num_samples )  # Plot data  plt . plot ( time ,   strain [: num_samples ])  plt . xlabel ( 'GPS Time (s)' )  plt . ylabel ( 'strain' )  plt . show ()     You can find the LIGO data plus loads of documentation and tutorials (https://losc.ligo.org/events/GW150914/) and (https://losc.ligo.org/s/events/GW150914/GW150914_tutorial.html) is a great tutorial on Signal Processing with the data.   1 Image ( 'strain.png' )     MATLAB   \u201cMatrix Laboratory\u201d.  Industry standard in engineering and science.  Code (instead of importing the package):    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 # Import package  import   scipy.io  # Load MATLAB file: mat  mat   =   scipy . io . loadmat ( 'albeck_gene_expression.mat' )  # Print the datatype type of mat  print ( type ( mat ))  # Print the keys of the MATLAB dictionary  print ( mat . keys ())  # Print the type of the value corresponding to the key 'CYratioCyt'  print ( type ( mat [ 'CYratioCyt' ]))  # Print the shape of the value corresponding to the key 'CYratioCyt'  print ( np . shape ( mat [ 'CYratioCyt' ]))  # Subset the array and plot it  data   =   mat [ 'CYratioCyt' ][ 25 ,   5 :]  fig   =   plt . figure ()  plt . plot ( data )  plt . xlabel ( 'time (min.)' )  plt . ylabel ( 'normalized fluorescence (measure of expression)' )  plt . show ()     This file contains gene expression data from the Albeck Lab at UC Davis (https://www.mcb.ucdavis.edu/faculty-labs/albeck/workshop.htm). You can find the data and some great documentation.   1 Image ( 'CYratioCyt.png' )",
            "title": "2, Importing from Other Files"
        },
        {
            "location": "/Importing Data into Python/#3-working-with-relational-databases",
            "text": "Relational Database Management System   PostgreSQL.  MySQL.  SQLite.  Code (instead of importing the package):   1\n2\n3\n4\n5 # Import necessary module  from   sqlalchemy   import   create_engine  # Create engine: engine  engine   =   create_engine ( 'sqlite:///Chinook.sqlite' )    'sqlite:///Northwind.sqlite'  is called the connection string to the SQLite database.   The Chinook database (http://chinookdatabase.codeplex.com/) contains information about a semi-fictional digital media store in which media data is real and customer, employee and sales data has been manually created.  Code (instead of importing the package):   1\n2\n3\n4\n5 # Save the table names to a list: table_names  table_names   =   engine . table_names ()  # Print the table names to the shell  print ( table_names )    Query the DB   The final  ;  is facultative.  Code (instead of importing the package):    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # Create engine: engine  engine   =   create_engine ( 'sqlite:///Chinook.sqlite' )  # Open engine connection: con  con   =   engine . connect ()  # Perform query: rs  rs   =   con . execute ( 'SELECT * FROM Album' )  # Save results of the query to DataFrame: df  df   =   pd . DataFrame ( rs . fetchall ())  # Close connection  con . close ()  # Print head of DataFrame df  print ( df . head ())    Customize queries   Code (instead of importing the package):    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 # Create engine: engine  engine   =   create_engine ( 'sqlite:///Chinook.sqlite' )   # becomes facultative with many queries  # Open engine in context manager  # Perform query and save results to DataFrame: df  with   engine . connect ()   as   con : \n     rs   =   con . execute ( 'SELECT LastName, Title FROM Employee' ) \n     df   =   pd . DataFrame ( rs . fetchmany ( size   =   3 )) \n     df . columns   =   rs . keys ()   # set the DataFrame's column names to the corresponding names of the table columns  # Print the length of the DataFrame df  print ( len ( df ))  # Print the head of the DataFrame df  print ( df . head ())     Code (instead of importing the package):    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Create engine: engine  engine   =   create_engine ( 'sqlite:///Chinook.sqlite' )   # becomes facultative with many queries  # Open engine in context manager  # Perform query and save results to DataFrame: df  with   engine . connect ()   as   con : \n     rs   =   con . execute ( \"SELECT * FROM Employee WHERE EmployeeId >= 6\" ) \n     df   =   pd . DataFrame ( rs . fetchall ()) \n     df . columns   =   rs . keys ()  # Print the head of the DataFrame df  print ( df . head ())     Code (instead of importing the package):    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 # Create engine: engine  engine   =   create_engine ( 'sqlite:///Chinook.sqlite' )  # Open engine in context manager  with   engine . connect ()   as   con : \n     rs   =   con . execute ( 'SELECT * FROM Employee ORDER BY BirthDate' ) \n     df   =   pd . DataFrame ( rs . fetchall ()) \n\n     # Set the DataFrame's column names \n     df . columns   =   rs . keys ()  # Print head of DataFrame  print ( df . head ())    Query the DB the Pandas way   Simpler code (instead of importing the package)!!!    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 # Import packages  from   sqlalchemy   import   create_engine  import   pandas   as   pd  # Create engine: engine  engine   =   create_engine ( 'sqlite:///Chinook.sqlite' )  # Execute query and store records in DataFrame: df  df   =   pd . read_sql_query ( \"SELECT * FROM Album\" ,   engine )  # Print head of DataFrame  print ( df . head ())  # Open engine in context manager  # Perform query and save results to DataFrame: df1  with   engine . connect ()   as   con : \n     rs   =   con . execute ( \"SELECT * FROM Album\" ) \n     df1   =   pd . DataFrame ( rs . fetchall ()) \n     df1 . columns   =   rs . keys ()  # Confirm that both methods yield the same result: does df = df1 ?     print ( df . equals ( df1 ))     Code (instead of importing the package):    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Import packages  from   sqlalchemy   import   create_engine  import   pandas   as   pd  # Create engine: engine  engine   =   create_engine ( 'sqlite:///Chinook.sqlite' )  # Execute query and store records in DataFrame: df  df   =   pd . read_sql_query ( \"SELECT * FROM Employee WHERE EmployeeId >= 6 ORDER BY BirthDate\" ,   engine )  # Print head of DataFrame  print ( df . head ())    INNER JOIN   Code (instead of importing the package):    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 import   pandas   as   pd  from   sqlalchemy   import   create_engine  engine   =   create_engine ( 'sqlite:///Chinook.sqlite' )  # Open engine in context manager  # Perform query and save results to DataFrame: df  with   engine . connect ()   as   con : \n     rs   =   con . execute ( \"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\" ) \n     df   =   pd . DataFrame ( rs . fetchall ()) \n     df . columns   =   rs . keys ()  # Print head of DataFrame df  print ( df . head ())     Alternative code:   1\n2\n3\n4 df   =   pd . read_sql_query ( \"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\" ,   engine )  # Print head of DataFrame df  print ( df . head ())     Code (instead of importing the package):   1\n2\n3\n4\n5 # Execute query and store records in DataFrame: df  df   =   pd . read_sql_query ( \"SELECT * FROM PlaylistTrack INNER JOIN Track on PlaylistTrack.TrackId = Track.TrackId WHERE Milliseconds < 250000\" ,   engine )  # Print head of DataFrame  print ( df . head ())",
            "title": "3, Working with Relational Databases"
        },
        {
            "location": "/Importing Data into Python/#4-importing-flat-files-from-the-web-web-scraping",
            "text": "~ scrape, wrangle, munge, wrangling, munging~    Import and locally save datasets from the web.  Load datasets into pandas DataFrames.  Make HTTP requests (GET requests).  Scrape web data such as HTML.  Parse HTML into useful data (BeautifulSoup).  Use the urllib and requests packages.   Using the  urllib  package on csv files   Import the package.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 from   urllib.request   import   urlretrieve  # import pandas as pd  # Assign url of file: url  url   =   'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'  # Save file locally  urlretrieve ( url ,   'winequality-red.csv' )  # Read file into a DataFrame and print its head  df   =   pd . read_csv ( 'winequality-red.csv' ,   sep = ';' )  print ( df . head ())     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20    fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # import matplotlib.pyplot as plt  # import pandas as pd  # Assign url of file: url  url   =   'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'  # Read file into a DataFrame: df  df   =   pd . read_csv ( url ,   sep   =   ';' )  # Print the head of the DataFrame  print ( df . head ())  # Plot first column of df  pd . DataFrame . hist ( df . ix [:,   0 : 1 ])  plt . xlabel ( 'fixed acidity (g(tartaric acid)/dm$^3$)' )  plt . ylabel ( 'count' )  plt . show ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20    fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5    Using the  urllib  package on Excel files   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 # import pandas as pd  # Assign url of file: url  url   =   'http://s3.amazonaws.com/assets.datacamp.com/course/importing_data_into_r/latitude.xls'  # Read in all sheets of Excel file: xl  xl   =   pd . read_excel ( url ,   sheetname   =   None )  # Print the sheetnames (keys) to the shell !!!  print ( xl . keys ())  # Print the head of the first sheet (using its name, NOT its index)  print ( xl [ '1700' ] . head ())    1\n2\n3\n4\n5\n6\n7 dict_keys(['1700', '1900'])\n                 country       1700\n0            Afghanistan  34.565000\n1  Akrotiri and Dhekelia  34.616667\n2                Albania  41.312000\n3                Algeria  36.720000\n4         American Samoa -14.307000   HTTP requests to import files from the web   requests  is one of the most downloaded Python packages.  requests  works with  urllib .  Import the package.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 from   urllib.request   import   urlopen ,   Request  # Specify the url  url   =   \"http://www.datacamp.com/teach/documentation\"  # This packages the request: request  request   =   Request ( url )  # Send the request and catches the response: response  response   =   urlopen ( request )  # Print the datatype of response  print ( type ( response ))  # Be polite and close the response!  response . close ()    1 <class 'http.client.HTTPResponse'>    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 from   urllib.request   import   urlopen ,   Request  url   =   \"http://docs.datacamp.com/teach/\"  request   =   Request ( url )  response   =   urlopen ( request )  # Extract the response: html  html   =   response . read ()  # Print the html  print ( html )  # Be polite and close the response!  response . close ()    1 b ' <! DOCTYPE   html > \\ n < link   rel = \"shortcut icon\"   href = \"images/favicon.ico\"   /> \\ n < html > \\ n \\ n    < head > \\ n    < meta   charset = \"utf-8\" > \\ n    < meta   http - equiv = \"X-UA-Compatible\"   content = \"IE=edge\" > \\ n    < meta   name = \"viewport\"   content = \"width=device-width, initial-scale=1\" > \\ n \\ n    < title > Home </ title > \\ n    < meta   name = \"description\"   content = \"All Documentation on Course Creation\" > \\ n \\ n    < link   rel = \"stylesheet\"   href = \"/teach/css/main.css\" > \\ n    < link   rel = \"canonical\"   href = \"/teach/\" > \\ n    < link   rel = \"alternate\"   type = \"application/rss+xml\"   title = \"DataCamp Teach Documentation\"   href = \"/teach/feed.xml\"   /> \\ n </ head > \\ n \\ n \\ n    < body > \\ n \\ n      < header   class = \"site-header\" > \\ n \\ n    < div   class = \"wrapper\" > \\ n \\ n      < a   class = \"site-title\"   href = \"/teach/\" > DataCamp   Teach   Documentation </ a > \\ n \\ n    </ div > \\ n \\ n </ header > \\ n \\ n \\ n      < div   class = \"page-content\" > \\ n        < div   class = \"wrapper\" > \\ n          < p > The   Teach   Documentation   has   been   moved   to   < a   href = \"https://www.datacamp.com/teach/documentation\" > https : //www.datacamp.com/teach/documentation</a>!</p>\\n\\n<!-- Everybody can teach on DataCamp. The resources on this website explain all the steps to build your own course on DataCamp\\'s interactive data science platform.\\n\\nInterested in partnering with DataCamp? Head over to the [Course Material](/teach/course-material.html) page to get an idea of the requirements to build your own interactive course together with DataCamp!\\n\\n## Table of Contents\\n\\n- [Course Material](/teach/course-material.html) - Content required to build a DataCamp course.\\n- [Video Lectures](/teach/video-lectures.html) - Details on video recording and editing.\\n- [DataCamp Teach](https://www.datacamp.com/teach) - Use the DataCamp Teach website to create DataCamp courses (preferred).\\n- [datacamp R Package](https://github.com/datacamp/datacamp/wiki) - Use R Package to create DataCamp courses (legacy).\\n- [Code DataCamp Exercises](/teach/code-datacamp-exercises.html)\\n- [SCT Design (R)](https://github.com/datacamp/testwhat/wiki)\\n- [SCT Design (Python)](https://github.com/datacamp/pythonwhat/wiki)\\n- [Style Guide](/teach/style-guide.html) -->\\n\\n\\n      </div>\\n    </div>\\n\\n    \\n\\n  </body>\\n\\n</html>\\n'    Using  requests   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 import   requests  url   =   \"http://docs.datacamp.com/teach/\"  r   =   requests . get ( url )  text   =   r . text  # Print part of the html (split the paragraphs) instead of all with  print(text)  head   =   text . split ( ' \\n\\n ' )  print ( head [ 0 ])  print ( '' )  print ( head [ 1 ])  print ( '' )  print ( head [ 2 ])  print ( '' )  print ( head [ 3 ])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 <!DOCTYPE html>  < link   rel = \"shortcut icon\"   href = \"images/favicon.ico\"   />  < html > \n\n   < head > \n   < meta   charset = \"utf-8\" > \n   < meta   http-equiv = \"X-UA-Compatible\"   content = \"IE=edge\" > \n   < meta   name = \"viewport\"   content = \"width=device-width, initial-scale=1\" > \n\n   < title > Home </ title > \n   < meta   name = \"description\"   content = \"All Documentation on Course Creation\" > \n\n   < link   rel = \"stylesheet\"   href = \"/teach/css/main.css\" > \n   < link   rel = \"canonical\"   href = \"/teach/\" > \n   < link   rel = \"alternate\"   type = \"application/rss+xml\"   title = \"DataCamp Teach Documentation\"   href = \"/teach/feed.xml\"   />  </ head >    Scraping the web  ~ scrape, wrangle, munge~   Scrape unstructured data.  Scrape structured data, parse it and extract the data from HTML using the  BeautifulSoup  package.  Import the packages.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 import   requests  from   bs4   import   BeautifulSoup  url   =   'https://www.python.org/~guido/'  r   =   requests . get ( url )  html_doc   =   r . text  # Create a BeautifulSoup object from the HTML: soup  soup   =   BeautifulSoup ( html_doc ,   'lxml' )  # Prettify the BeautifulSoup object: pretty_soup  pretty_soup   =   soup . prettify ()  # Print the response  print ( type ( pretty_soup ))  # Print part of the html (split the text), not all with  print(pretty_soup)  head   =   pretty_soup . split ( '</h3>' )  print ( head [ 0 ])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 <class   'str' >  <html> \n  <head> \n   <title> \n   Guido's Personal Home Page\n   </title> \n  </head> \n  <body   bgcolor= \"#FFFFFF\"   text= \"#000000\" > \n   <h1> \n    <a   href= \"pics.html\" > \n     <img   border= \"0\"   src= \"images/IMG_2192.jpg\" /> \n    </a> \n   Guido van Rossum - Personal Home Page\n   </h1> \n   <p> \n    <a   href= \"http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\" > \n     <i> \n     \"Gawky and proud of it.\"\n     </i> \n    </a> \n   </p> \n   <h3> \n    <a   href= \"http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\" > \n    Who\nI Am\n    </a>     Other operations with  BeautifulSoup .    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 import   requests  from   bs4   import   BeautifulSoup  url   =   'https://www.python.org/~guido/'  r   =   requests . get ( url )  html_doc   =   r . text  # Create a BeautifulSoup object from the HTML: soup  soup   =   BeautifulSoup ( html_doc ,   'lxml' )  # Get the title of Guido's webpage: guido_title  guido_title   =   soup . title   # attribute  # Print the title of Guido's webpage to the shell  print ( guido_title )  # Get Guido's text: guido_text  guido_text   =   soup . get_text ()   # method  # Print Guido's text to the shell  print ( guido_text )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76 < title > Guido 's Personal Home Page</title>  Guido's   Personal   Home   Page  Guido   van   Rossum   -   Personal   Home   Page  \"Gawky and proud of it.\"  Who  I   Am  I   am   the   author   of   the   Python  programming   language .    See   also   my   resume  and   my   publications   list ,   a   brief   bio ,   assorted   writings ,   presentations   and   interviews   ( all   about   Python ),   some  pictures   of   me ,  my   new   blog ,   and  my   old  blog   on   Artima . com .    I   am  @gvanrossum   on   Twitter .    I  also   have  a   G +  profile .  In   January   2013   I   joined  Dropbox .    I   work   on   various   Dropbox  products   and   have   50 % for my Python work, no strings attached.  Previously ,   I   have   worked   for   Google ,   Elemental   Security ,   Zope  Corporation ,   BeOpen . com ,   CNRI ,   CWI ,   and   SARA .    ( See  my   resume .)    I   created   Python   while   at   CWI .  How   to   Reach   Me  You   can   send   email   for   me   to   guido   ( at )   python . org .  I   read   everything   sent   there ,   but   if   you   ask  me   a   question   about   using   Python ,   it's likely that I won't   have   time  to   answer   it ,   and   will   instead   refer   you   to  help   ( at )   python . org ,  comp . lang . python   or  StackOverflow .    If   you   need   to  talk   to   me   on   the   phone   or   send   me   something   by   snail   mail ,   send   me   an  email   and   I 'll gladly email you instructions on how to reach me.  My Name  My name often poses difficulties for Americans.  Pronunciation: in Dutch, the \"G\" in Guido is a hard G,  pronounced roughly like the \"ch\" in Scottish \"loch\".  (Listen to the  sound clip.)  However, if you're  American ,   you   may   also   pronounce   it   as   the   Italian   \"Guido\" .    I 'm not  too worried about the associations with mob assassins that some people  have. :-)  Spelling: my last name is two words, and I'd   like   keep   it  that   way ,   the   spelling   on   some   of   my   credit   cards   notwithstanding .  Dutch   spelling   rules   dictate   that   when   used   in   combination   with   my  first   name ,   \"van\"   is   not   capitalized :   \"Guido van Rossum\" .    But   when   my  last   name   is   used   alone   to   refer   to   me ,   it   is   capitalized ,   for  example :   \"As usual, Van Rossum was right.\"  Alphabetization :   in   America ,   I   show   up   in   the   alphabet   under  \"V\" .    But   in   Europe ,   I   show   up   under   \"R\" .    And   some   of   my   friends   put  me   under   \"G\"   in   their   address   book ...  More   Hyperlinks  Here 's a collection of essays relating to Python  that I've   written ,   including   the   foreword   I   wrote   for   Mark   Lutz ' book  \"Programming Python\".  I own the official   Python license.  The Audio File Formats FAQ  I was the original creator and maintainer of the Audio File Formats  FAQ.  It is now maintained by Chris Bagwell  at http://www.cnpbagwell.com/audio-faq.  And here is a link to  SOX, to which I contributed  some early code.  \"On the Internet, nobody knows you're  a   dog . \"     More.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 import   requests  from   bs4   import   BeautifulSoup  url   =   'https://www.python.org/~guido/'  r   =   requests . get ( url )  html_doc   =   r . text  # create a BeautifulSoup object from the HTML: soup  soup   =   BeautifulSoup ( html_doc ,   'lxml' )  # Print the title of Guido's webpage  print ( soup . title )  # Find all 'a' tags (which define hyperlinks): a_tags  a_tags   =   soup . find_all ( 'a' )   # for <a>, hyperlinks  # Print the URLs to the shell  for   link   in   a_tags : \n     print (   link . get ( 'href' ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 <title> Guido's Personal Home Page </title> \npics.html\nhttp://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\nhttp://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\nhttp://www.python.org\nResume.html\nPublications.html\nbio.html\nhttp://legacy.python.org/doc/essays/\nhttp://legacy.python.org/doc/essays/ppt/\ninterviews.html\npics.html\nhttp://neopythonic.blogspot.com\nhttp://www.artima.com/weblogs/index.jsp?blogger=12088\nhttps://twitter.com/gvanrossum\nhttps://plus.google.com/u/0/115212051037621986145/posts\nhttp://www.dropbox.com\nResume.html\nhttp://groups.google.com/groups?q=comp.lang.python\nhttp://stackoverflow.com\nguido.au\nhttp://legacy.python.org/doc/essays/\nimages/license.jpg\nhttp://www.cnpbagwell.com/audio-faq\nhttp://sox.sourceforge.net/\nimages/internetdog.gif",
            "title": "4, Importing Flat Files from the Web (Web Scraping)"
        },
        {
            "location": "/Importing Data into Python/#5-introduction-to-apis-and-jsons",
            "text": "API or Application Programming Interface are protocols and routines providing access to websites and web apps like OMDb, Wikipedia, Uber, Uber Developers, BGG, ImDB, Facebook, Instagram, and Twitter.  Most of data coming from APIS are JSON files.   Import the  json  package   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 import   json  # Load JSON: json_data  with   open ( 'a_movie.json' ,   'r' )   as   json_file : \n     json_data   =   json . load ( json_file )  print ( type ( json_data ))  print ( json_data [ 'Title' ])  print ( json_data [ 'Year' ])  print ( '' )  # Print each key-value pair in json_data  for   k   in   json_data . keys (): \n     print ( k   +   ': ' ,   json_data [ k ])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 <class 'dict'>\nThe Social Network\n2010\n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nAwards:  Won 3 Oscars. Another 161 wins & 162 nominations.\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nTitle:  The Social Network\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nDirector:  David Fincher\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)   The  requests  package again   Pull some movie data down from the Open Movie Database (OMDB) using their API.  Pull it as text.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   requests  url   =   'http://www.omdbapi.com/?t=social+network'  r   =   requests . get ( url )  print ( type ( r ))  print ( '' )  # Print the text of the response  print ( r . text )    1\n2\n3 <class 'requests.models.Response'>\n\n{\"Title\":\"The Social Network\",\"Year\":\"2010\",\"Rated\":\"PG-13\",\"Released\":\"01 Oct 2010\",\"Runtime\":\"120 min\",\"Genre\":\"Biography, Drama\",\"Director\":\"David Fincher\",\"Writer\":\"Aaron Sorkin (screenplay), Ben Mezrich (book)\",\"Actors\":\"Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\",\"Plot\":\"Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\",\"Language\":\"English, French\",\"Country\":\"USA\",\"Awards\":\"Won 3 Oscars. Another 161 wins & 162 nominations.\",\"Poster\":\"http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\",\"Metascore\":\"95\",\"imdbRating\":\"7.7\",\"imdbVotes\":\"478,258\",\"imdbID\":\"tt1285016\",\"Type\":\"movie\",\"Response\":\"True\"}    Pull it as JSON or a dictionary.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 import   requests  url   =   'http://www.omdbapi.com/?t=social+network'  r   =   requests . get ( url )  # Decode the JSON data into a dictionary: json_data  json_data   =   r . json ()  print ( type ( json_data ))  print ( '' )  # Print each key-value pair in json_data  for   k   in   json_data . keys (): \n     print ( k   +   ': ' ,   json_data [ k ])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 <class 'dict'>\n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nAwards:  Won 3 Oscars. Another 161 wins & 162 nominations.\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nDirector:  David Fincher\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nTitle:  The Social Network\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)    Search the Library of Congress.  Pull a dictionary of dictionaries.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 import   requests  url   =   'http://chroniclingamerica.loc.gov/search/titles/results/?terms=new%20york&format=json'  r   =   requests . get ( url )  # Decode the JSON data into a dictionary: json_data  json_data   =   r . json ()  # Select the first element in the list json_data['items']: nyc_loc  # dict of dict  nyc_loc   =   json_data [ 'items' ][ 0 ]  # Print each key-value pair in nyc_loc  for   k   in   nyc_loc . keys (): \n     print ( k   +   ': ' ,   nyc_loc [ k ])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 county:  ['New York']\nplace_of_publication:  New York\noclc:  12928956\nsubject:  ['New York (N.Y.)--Newspapers.', 'New York (State)--New York.--fast--(OCoLC)fst01204333']\nalt_title:  []\ntitle:  The New York thrice-a-week world.\ntype:  title\nedition:  New York and Pennsylvania ed.\nid:  /lccn/sn85047837/\nnote:  ['Democrat.', 'Description based on: Vol. 36, no. 3,670 (Oct. 4, 1895).', 'The words \"New York thrice-a-week\" appear in title ornament.']\nplace:  ['New York--New York--New York']\nessay:  []\nstart_year:  1890\nend_year:  1999\npublisher:  Press Pub. Co.\nlccn:  sn85047837\nholding_type:  ['Unspecified']\nstate:  ['New York']\ncity:  ['New York']\nlanguage:  ['English']\ncountry:  New York\ntitle_normal:  new york thrice-a-week world.\nurl:  http://chroniclingamerica.loc.gov/lccn/sn85047837.json\nfrequency:  Three times a week    The Wikipedia API.  Documentation: https://www.mediawiki.org/wiki/API:Main_page  Dictionary of dictionary of dictionary.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   requests  url   =   'https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles=pizza'  r   =   requests . get ( url )  # Decode the JSON data into a dictionary: json_data  json_data   =   r . json ()  # Print the Wikipedia page extract  pizza_extract   =   json_data [ 'query' ][ 'pages' ][ '24768' ][ 'extract' ]  print ( pizza_extract )    1\n2\n3\n4 <p><b> Pizza </b>  is a flatbread generally topped with tomato sauce and cheese and baked in an oven. It is commonly topped with a selection of meats, vegetables and condiments. The term was first recorded in the 10th century, in a Latin manuscript from Gaeta in Central Italy. The modern pizza was invented in Naples, Italy, and the dish and its variants have since become popular in many areas of the world. </p>  <p> In 2009, upon Italy's request, Neapolitan pizza was safeguarded in the European Union as a Traditional Speciality Guaranteed dish. The Associazione Verace Pizza Napoletana (the True Neapolitan Pizza Association) is a non-profit organization founded in 1984 with headquarters in Naples. It promotes and protects the \"true Neapolitan pizza\". </p>  <p> Pizza is sold fresh or frozen, either whole or in portions, and is a common fast food item in Europe and North America. Various types of ovens are used to cook them and many varieties exist. Several similar dishes are prepared from ingredients commonly used in pizza preparation, such as calzone and stromboli. </p>  <p></p>    The Twitter API and Authentification   Twitter has many APIs: the main API, the REST API, Streaming APIs (private, public), Firehouse (expensive), etc.  Field Guide: https://dev.twitter.com/overview/api/tweets  Consult the documentation to set an authentification key (available online).   tweepy  package   The authentication looks like the following:  Code:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Import package  import   tweepy ,   json  # Store OAuth authentication credentials in relevant variables  access_token   =   \"1092294848-aHN7DcRP9B4VMTQIhwqOYiB14YkW92fFO8k8EPy\"  access_token_secret   =   \"X4dHmhPfaksHcQ7SCbmZa2oYBBVSD2g8uIHXsp5CTaksx\"  consumer_key   =   \"nZ6EA0FxZ293SxGNg8g8aP0HM\"  consumer_secret   =   \"fJGEodwe3KiKUnsYJC3VRndj7jevVvXbK2D5EiJ2nehafRgA6i\"  # Pass OAuth details to tweepy's OAuth handler  auth   =   tweepy . OAuthHandler ( consumer_key ,   consumer_secret )  auth . set_access_token ( access_token ,   access_token_secret )    Start streaming tweets   Code:   1\n2\n3\n4\n5\n6\n7\n8\n9 # Initialize Stream listener  l   =   MyStreamListener ()  # Create you Stream object with authentication  stream   =   tweepy . Stream ( auth ,   l )  # Filter Twitter Streams to capture data by the keywords:  stream . filter ( track   =   [ 'clinton' ,   'trump' ,   'sanders' ,   'cruz' ])     Code of  MyStreamListener() :  Creates a file called tweets.txt, collects streaming tweets as .jsons and writes them to the file tweets.txt; once 100 tweets have been streamed, the listener closes the file and stops listening.     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 class   MyStreamListener ( tweepy . StreamListener ): \n\n\n     def   __init__ ( self ,   api = None ): \n\n         super ( MyStreamListener ,   self ) . __init__ () \n         self . num_tweets   =   0 \n         self . file   =   open ( \"tweets.txt\" ,   \"w\" ) \n\n     def   on_status ( self ,   status ): \n\n         tweet   =   status . _json \n         self . file . write (   json . dumps ( tweet )   +   ' \\n '   ) \n         tweet_list . append ( status ) \n         self . num_tweets   +=   1 \n         if   self . num_tweets   <   100 : \n             return   True \n         else : \n             return   False \n         self . file . close () \n\n     def   on_error ( self ,   status ): \n         print ( status )    Load and explore your Twitter data   Code:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 # Import package  import   json  # String of path to file: tweets_data_path  tweets_data_path   =   'tweets.txt'  # Initialize empty list to store tweets: tweets_data  tweets_data   =   []  # Open connection to file  tweets_file   =   open ( tweets_data_path ,   \"r\" )  # Read in tweets and store in list: tweets_data  for   line   in   tweets_file : \n     tweet   =   json . loads ( line ) \n     tweets_data . append ( tweet )  # Close connection to file  tweets_file . close ()  # Print the keys of the first tweet dict  print ( tweets_data [ 0 ] . keys ())    Send the Twitter data to DataFrame   Twitter data in a list of dictionaries  tweets_data , where each dictionary corresponds to a single tweet.   The text in a tweet  t1  is stored as the value  t1['text'] ; similarly, the language is stored in  t1['lang'] .   Code:   1\n2\n3\n4\n5\n6\n7\n8 # Import package  import   pandas   as   pd  # Build DataFrame of tweet texts and languages  df   =   pd . DataFrame ( tweets_data ,   columns = [ 'text' ,   'lang' ])  # Print head of DataFrame  print ( df . head ())    Analyze the tweets (NLP, regex)   A little bit of Twitter text analysis and plotting.   Use the statistical data visualization library seaborn: https://stanford.edu/%7Emwaskom/software/seaborn/  Code:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38 # Import the regular expressions library  import   re  # The function tells you whether the first argument (a word) occurs within the 2nd argument (a tweet)  def   word_in_text ( word ,   tweet ): \n     word   =   word . lower () \n     text   =   tweet . lower () \n     match   =   re . search ( word ,   tweet ) \n\n     if   match : \n         return   True \n     return   False  # Initialize list to store tweet counts  [ clinton ,   trump ,   sanders ,   cruz ]   =   [ 0 ,   0 ,   0 ,   0 ]  # Iterate through df, counting the number of tweets in which  # each candidate is mentioned  for   index ,   row   in   df . iterrows (): \n     clinton   +=   word_in_text ( 'clinton' ,   row [ 'text' ]) \n     trump   +=   word_in_text ( 'trump' ,   row [ 'text' ]) \n     sanders   +=   word_in_text ( 'sanders' ,   row [ 'text' ]) \n     cruz   +=   word_in_text ( 'cruz' ,   row [ 'text' ])  # Import packages  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns  # Set seaborn style  sns . set ( color_codes = True )  # Create a list of labels:cd  cd   =   [ 'clinton' ,   'trump' ,   'sanders' ,   'cruz' ]  # Plot histogram  ax   =   sns . barplot ( cd ,   [ clinton ,   trump ,   sanders ,   cruz ])  ax . set ( ylabel = \"count\" )  plt . show ()    1\n2 from   IPython.display   import   Image  # for the following pictures...    1 Image ( 'tweets_figure.png' )",
            "title": "5, Introduction to APIs and JSONs"
        },
        {
            "location": "/Python for Data Science/",
            "text": "CONTENT\n\n\n1, Introduction\n\n\nBasic operations\n\n\nConcatenating, help, printing, listing\n\n\nNumPy: arrays\n\n\n\n\n\n\n2, Intermediate\n\n\nPlotting basics\n\n\nA plotting project: Gapminder\n\n\nPandas: data frame\n\n\nLooping\n\n\nA NumPy project: random walk & Monte Carlo simulation\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the courses (Introduction and Intermediate). Python 3. From DataCamp.\n\n\n\n\n1, Introduction\n\u00b6\n\n\nBasic operations\n\u00b6\n\n\nPrint is a function\n\n\n\n\nIn Python 3:\n\n\n\n\n1\nprint\n()\n\n\n\n\n\n\n\n\n\nWhile in Python 2:\n\n\n\n\n1\n2\n3\n4\n5\n6\nprint\n \n\"test\"\n\n\nprint\n \n\"-\"\n \n*\n \n25\n\n\nprint\n \n10\n\n\nprint\n \n5\n \n+\n \n5\n\n\nprint\n \nvariable\n\n\nprint\n \nfunction\n()\n\n\n\n\n\n\n\n1\nprint\n(\n\"Python 3.x\"\n)\n\n\n\n\n\n\n\n1\nPython 3.x\n\n\n\n\n\n\n\n\nAddition and subtraction.\n\n\n\n\n1\n2\nprint\n(\n5\n \n+\n \n5\n)\n\n\nprint\n(\n5\n \n-\n \n5\n)\n\n\n\n\n\n\n\n1\n2\n10\n0\n\n\n\n\n\n\n\n\nMultiplication and division.\n\n\n\n\n1\n2\nprint\n(\n3\n \n*\n \n5\n)\n\n\nprint\n(\n10\n \n/\n \n2\n)\n\n\n\n\n\n\n\n1\n2\n15\n5.0\n\n\n\n\n\n\n\n\nExponentiation.\n\n\n\n\n1\nprint\n(\n4\n \n**\n \n2\n)\n\n\n\n\n\n\n\n1\n16\n\n\n\n\n\n\n\n\nModulo.\n\n\n\n\n1\nprint\n(\n18\n \n%\n \n7\n)\n\n\n\n\n\n\n\n1\n4\n\n\n\n\n\n\n\n\nHow much is your $100 worth after 7 years?\n\n\n\n\n1\nprint\n(\n100\n \n*\n \n((\n1\n \n+\n \n0.10\n)\n**\n7\n))\n\n\n\n\n\n\n\n1\n194.87171000000012\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# Create a variable savings\n\n\nsavings\n \n=\n \n100\n\n\n\n# Create a variable factor\n\n\nfactor\n \n=\n \n1.10\n\n\n\n# Calculate result\n\n\nresult\n \n=\n \nsavings\n \n*\n \nfactor\n \n**\n \n7\n\n\n\n# Print out result\n\n\nprint\n(\nresult\n)\n\n\n\n\n\n\n\n1\n194.87171000000012\n\n\n\n\n\n\n\n\nSeveral variables to experiment with.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nsavings\n \n=\n \n100\n\n\nfactor\n \n=\n \n1.10\n\n\ndesc\n \n=\n \n\"compound interest\"\n\n\n\n# Assign product of factor and savings to year1\n\n\nyear1\n \n=\n \nsavings\n \n*\n \nfactor\n\n\n\n# Print the type of year1\n\n\nprint\n(\ntype\n(\nyear1\n))\n\n\n\n\n\n\n\n1\n<class 'float'>\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Assign sum of  desc and  desc to doubledesc.\n\n\ndoubledesc\n \n=\n \ndesc\n \n+\n \ndesc\n\n\n\n# Print out doubledesc\n\n\nprint\n(\ndoubledesc\n)\n\n\n\n\n\n\n\n1\ncompound interestcompound interest\n\n\n\n\n\n\n1\n2\n3\n4\n# Definition of savings and result\n\n\nsavings\n \n=\n \n100\n\n\nresult\n \n=\n \n100\n \n*\n \n1.10\n \n**\n \n7\n\n\nprint\n(\nresult\n)\n\n\n\n\n\n\n\n1\n194.87171000000012\n\n\n\n\n\n\nConcatenating, help, printing, listing\n\u00b6\n\n\nConcatenation\n\n\n1\nprint\n(\n\"I started with $\"\n \n+\n \nstr\n(\nsavings\n)\n \n+\n \n\" and now have $\"\n \n+\n \nstr\n(\nresult\n)\n \n+\n \n\". Awesome!\"\n)\n\n\n\n\n\n\n\n1\nI started with $100 and now have $194.87171000000012. Awesome!\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Definition of pi_string\n\n\npi_string\n \n=\n \n\"3.1415926\"\n\n\n\n# Convert pi_string into float: pi_float\n\n\npi_float\n \n=\n \nfloat\n(\npi_string\n)\n\n\nprint\n(\npi_float\n)\n\n\n\n\n\n\n\n1\n3.1415926\n\n\n\n\n\n\nHelp\n\n\n1\n2\n# Inline\n\n\nhelp\n(\nmax\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nHelp on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -> value\n    max(arg1, arg2, *args, *[, key=func]) -> value\n\n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.\n\n\n\n\n\n\n1\n2\n# Offline\n\n\n?\nmax\n\n\n\n\n\n\n\nContiguous printing\n\n\n~ horizontal, print~\n\n\n1\n2\n# Print out room and room_up\n\n\nprint\n(\n'room'\n);\n \nprint\n(\n'room_up'\n)\n\n\n\n\n\n\n\n1\n2\nroom\nroom_up\n\n\n\n\n\n\nIndex\n\n\n1\n2\n3\n4\n5\n# Create list areas\n\n\nareas\n \n=\n \n[\n11.25\n,\n \n18.0\n,\n \n20.0\n,\n \n10.75\n,\n \n9.50\n]\n\n\n\n# Print out the index of the element 20.0\n\n\nprint\n(\nareas\n.\nindex\n(\n20.0\n))\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Create list baseball \n\n\nbaseball\n \n=\n \n[\n180\n,\n \n215\n,\n \n210\n,\n \n210\n,\n \n188\n,\n \n176\n,\n \n209\n,\n \n200\n]\n\n\n\n# Print out the first and last elements\n\n\nprint\n(\nbaseball\n[\n1\n]);\n \nprint\n(\nbaseball\n[\n-\n1\n])\n\n\n\n\n\n\n\n1\n2\n215\n200\n\n\n\n\n\n\nNumPy: arrays\n\u00b6\n\n\n\n\nAn overview with an simple array.\n\n\nImport the \nnumpy\n package as \nnp\n.\n\n\n\n\n1\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n\n\n\n\n\n\nCreate a Numpy array from \nbaseball\n: \nnp_baseball\n.\n\n\nTransform a list into an array.\n\n\n\n\n1\n2\n3\n4\nnp_baseball\n \n=\n \nnp\n.\narray\n(\nbaseball\n)\n\n\n\n# Print out type of np_baseball\n\n\nprint\n(\ntype\n(\nnp_baseball\n))\n\n\n\n\n\n\n\n1\n<class 'numpy.ndarray'>\n\n\n\n\n\n\n\n\nAgain.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n# Height list\n\n\nheight\n \n=\n \n[\n68\n,\n \n78\n,\n \n76\n,\n \n80\n,\n \n75\n,\n \n79\n,\n \n78\n,\n \n80\n]\n\n\nweight\n \n=\n \nbaseball\n\n\n\n# Create array from height with correct units: np_height_m\n\n\nnp_height_m\n \n=\n \nnp\n.\narray\n(\nheight\n)\n \n*\n \n0.0254\n\n\n\n# Create array from weight with correct units: np_weight_kg \n\n\nnp_weight_kg\n \n=\n \nnp\n.\narray\n(\nweight\n)\n \n*\n \n0.453592\n\n\n\n# Calculate the BMI: bmi\n\n\nbmi\n \n=\n \nnp_weight_kg\n \n/\n \n(\nnp_height_m\n \n**\n \n2\n)\n\n\n\n# Print out bmi\n\n\nprint\n(\nbmi\n)\n\n\n\n\n\n\n\n1\n2\n[ 27.36860318  24.84546948  25.56171941  23.06945176  23.49812856\n  19.82697406  24.15210754  21.97090644]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Store weight and height lists as numpy arrays\n\n\nnp_weight\n \n=\n \nnp\n.\narray\n(\nweight\n)\n\n\nnp_height\n \n=\n \nnp\n.\narray\n(\nheight\n)\n\n\n\n# Print out the weight at index 5\n\n\nprint\n(\nnp_weight\n[\n5\n])\n\n\n\n# Print out sub-array of np_height: index 100 up to and including index 110\n\n\nprint\n(\nnp_height\n[\n1\n:\n2\n])\n\n\n\n\n\n\n\n1\n2\n176\n[78]\n\n\n\n\n\n\nList to array\n\n\n\n\nA list in an array is a 2D array or a tabular array.\n\n\n\n\n~ 2 dimension, 2d, 2-d~\n\n\n1\n2\n3\n4\n5\n# Create baseball, a list of lists\n\n\nbaseball\n \n=\n \n[[\n180\n,\n \n78.4\n],\n\n            \n[\n215\n,\n \n102.7\n],\n\n            \n[\n210\n,\n \n98.5\n],\n\n            \n[\n188\n,\n \n75.2\n]]\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# Create a Numpy array from baseball: np_baseball\n\n\nnp_baseball\n \n=\n \nnp\n.\narray\n(\nbaseball\n)\n\n\n\n# Print out the type of np_baseball\n\n\nprint\n(\ntype\n(\nnp_baseball\n))\n\n\n\n# Print out the shape of np_baseball\n\n\nprint\n(\nnp_baseball\n.\nshape\n)\n\n\n\n# Print out the 4th row of np_baseball\n\n\nprint\n(\nnp_baseball\n[\n3\n,:])\n\n\n\n# Select the entire second column of np_baseball: np_weight\n\n\nnp_weight\n \n=\n \nnp_baseball\n[:,\n1\n]\n\n\n\n# Print out height of 4th player\n\n\nprint\n(\nnp_baseball\n[\n3\n,\n0\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\n<class 'numpy.ndarray'>\n(4, 2)\n[ 188.    75.2]\n188.0\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Create np_height from np_baseball\n\n\nnp_height\n \n=\n \nnp_baseball\n[:,\n1\n]\n\n\n\n# Print out the mean of np_height\n\n\nprint\n(\nnp\n.\nmean\n(\nnp_height\n))\n\n\n\n# Print out the median of np_height\n\n\nprint\n(\nnp\n.\nmedian\n(\nnp_height\n))\n\n\n\n\n\n\n\n1\n2\n88.7\n88.45\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# Print mean weight\n\n\navg\n \n=\n \nnp\n.\nmean\n(\nnp_baseball\n[:,\n0\n])\n\n\nprint\n(\n\"Average: \"\n \n+\n \nstr\n(\navg\n))\n\n\n\n# Print median weight. Replace 'None'\n\n\nmed\n \n=\n \nnp\n.\nmedian\n(\nnp_baseball\n[:,\n0\n])\n\n\nprint\n(\n\"Median: \"\n \n+\n \nstr\n(\nmed\n))\n\n\n\n# Print out the standard deviation on weight. Replace 'None'\n\n\nstddev\n \n=\n \nnp\n.\nstd\n(\nnp_baseball\n[:,\n0\n])\n\n\nprint\n(\n\"Standard Deviation: \"\n \n+\n \nstr\n(\nstddev\n))\n\n\n\n\n\n\n\n1\n2\n3\nAverage\n:\n \n198.25\n\n\nMedian\n:\n \n199.0\n\n\nStandard\n \nDeviation\n:\n \n14.6351460533\n\n\n\n\n\n\n\n1\n2\n3\n# Print out correlation between first and second column. Replace 'None'\n\n\ncorr\n \n=\n \nnp\n.\ncorrcoef\n(\nnp_baseball\n[:,\n0\n],\n \nnp_baseball\n[:,\n1\n])\n\n\nprint\n(\n\"Correlation: \"\n \n+\n \nstr\n(\ncorr\n))\n\n\n\n\n\n\n\n1\n2\nCorrelation: [[ 1.          0.95865738]\n [ 0.95865738  1.        ]]\n\n\n\n\n\n\nArrays and logicals\n\n\n1\n2\n3\n# Create the arrays\n\n\nmy_house\n \n=\n \nnp\n.\narray\n([\n18.0\n,\n \n20.0\n,\n \n10.75\n,\n \n9.50\n])\n\n\nyour_house\n \n=\n \nnp\n.\narray\n([\n14.0\n,\n \n24.0\n,\n \n14.25\n,\n \n9.0\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Which areas in my_house are greater than or equal to 18\n\n\nprint\n(\nmy_house\n \n>=\n \n18\n)\n\n\n\n# compare two Numpy arrays element-wise\n\n\n# which areas in my_house are smaller than the ones in your_house\n\n\nprint\n(\nmy_house\n[\nmy_house\n \n<\n \nyour_house\n])\n\n\n\n\n\n\n\n1\n2\n[ True  True False False]\n\n\n[ 20.    10.75]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# np.logical_and(), np.logical_or() and np.logical_not()\n\n\n\n# my_house greater than 18.5 or smaller than 10\n\n\nprint\n(\nnp\n.\nlogical_or\n(\nmy_house\n \n>\n \n18.5\n,\n \nmy_house\n \n<\n \n10\n))\n\n\n\n# Both my_house and your_house smaller than 11\n\n\nprint\n(\nnp\n.\nlogical_and\n(\nmy_house\n \n<\n \n11\n,\n \nyour_house\n \n<\n \n11\n))\n\n\n\n\n\n\n\n1\n2\n[False  True False  True]\n\n\n[False False False  True]\n\n\n\n\n\n\n\n2, Intermediate\n\u00b6\n\n\nPlotting basics\n\u00b6\n\n\n\n\nIn this section, we use the \nmatplolib\n package for plotting and charting.\n\n\nIn IPython, the package is \u2018stacked\u2019 with the \nnumpy\n packages and other scientific packages under the magic command \n%pylab\n. \n\n\nCalling \n%pylab\n is calling the entire scientific stack or Scipy Stack.\n\n\n\n\nLine plot\n\n\n1\n2\n3\n4\n5\n6\nyear\n \n=\n \n[\n1950\n,\n \n1970\n,\n \n1990\n,\n \n2010\n]\n\n\npop\n \n=\n \n[\n2.519\n,\n \n3.692\n,\n \n5.263\n,\n \n6.972\n]\n\n\n\n# Print the last item from year and pop\n\n\nprint\n(\nyear\n[\n-\n1\n])\n\n\nprint\n(\npop\n[\n-\n1\n])\n\n\n\n\n\n\n\n1\n2\n2010\n6.972\n\n\n\n\n\n\n1\n%\n \npylab\n \ninline\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\n\n\nWith \ninline\n, graphics will be printed within the notebook as opposed to being printed in another window (a new window which pops open).\n\n\n\n\n1\n2\n3\n# Make a line plot: year on the x-axis, pop on the y-axis\n\n\nplt\n.\nplot\n(\nyear\n,\n \npop\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nScatter plot\n\n\n1\n2\n3\n4\n5\n6\neco\n \n=\n \nnp\n.\nrecfromcsv\n(\n'economic.csv'\n,\n \ndelimiter\n=\n';'\n,\n \nnames\n=\nTrue\n,\n \ndtype\n=\nNone\n)\n\n\n\n# gdp_cap, life_exp, pop\n\n\ngdp_cap\n \n=\n \neco\n[\n'gdp_cap'\n]\n\n\nlife_exp\n \n=\n \neco\n[\n'life_exp'\n]\n\n\npop\n \n=\n \neco\n[\n'pop'\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Change the line plot to a scatter plot\n\n\nplt\n.\nscatter\n(\ngdp_cap\n,\n \nlife_exp\n)\n\n\n\n# Put the x-axis on a logarithmic scale\n\n\nplt\n.\nxscale\n(\n'log'\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# Build Scatter plot\n\n\nplt\n.\nscatter\n(\npop\n,\n \nlife_exp\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n# There's no clear relationship between population and life expectancy, which makes perfect sense.\n\n\n\n\n\n\n\n\nHistograms\n\n\n1\n2\n3\n4\n5\n# Create histogram of life_exp data (bins = 10 by default)\n\n\nplt\n.\nhist\n(\nlife_exp\n)\n\n\n\n# Display histogram\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n# Build histogram with 5 bins\n\n\nplt\n.\nhist\n(\nlife_exp\n,\n \nbins\n \n=\n \n5\n)\n\n\n\n# Show and clean up plot\n\n\nplt\n.\nshow\n()\n\n\nplt\n.\nclf\n()\n \n# clean up\n\n\n\n# Build histogram with 20 bins\n\n\nplt\n.\nhist\n(\nlife_exp\n,\n \nbins\n \n=\n \n20\n)\n\n\n\n# Show and clean up again\n\n\nplt\n.\nshow\n()\n\n\nplt\n.\nclf\n()\n\n\n\n\n\n\n\n\n\n\n\n1\n<matplotlib.figure.Figure at 0x7578cf8>\n\n\n\n\n\n\nLabel\n\n\n~ x, y, label~\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n# Basic scatter plot, log scale\n\n\nplt\n.\nscatter\n(\ngdp_cap\n,\n \nlife_exp\n)\n\n\nplt\n.\nxscale\n(\n'log'\n)\n \n\n\n# Strings\n\n\nxlab\n \n=\n \n'GDP per Capita [in USD]'\n\n\nylab\n \n=\n \n'Life Expectancy [in years]'\n\n\ntitle\n \n=\n \n'World Development in 2007'\n\n\n\n# Add axis labels\n\n\nplt\n.\nxlabel\n(\nxlab\n)\n\n\nplt\n.\nylabel\n(\nylab\n)\n\n\n\n# Add title\n\n\nplt\n.\ntitle\n(\ntitle\n)\n\n\n\n# After customizing, display the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n# Scatter plot\n\n\nplt\n.\nscatter\n(\ngdp_cap\n,\n \nlife_exp\n)\n\n\n\n# Previous customizations\n\n\nplt\n.\nxscale\n(\n'log'\n)\n \n\nplt\n.\nxlabel\n(\n'GDP per Capita [in USD]'\n)\n\n\nplt\n.\nylabel\n(\n'Life Expectancy [in years]'\n)\n\n\nplt\n.\ntitle\n(\n'World Development in 2007'\n)\n\n\n\n# Definition of tick_val and tick_lab\n\n\ntick_val\n \n=\n \n[\n1000\n,\n10000\n,\n100000\n]\n\n\ntick_lab\n \n=\n \n[\n'1k'\n,\n'10k'\n,\n'100k'\n]\n\n\n\n# Adapt the ticks on the x-axis\n\n\nplt\n.\nxticks\n(\ntick_val\n,\n \ntick_lab\n)\n\n\n\n# After customizing, display the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nA plotting project: Gapminder\n\u00b6\n\n\nSize, the 3\nrd\n dimension\n\n\n\n\nA little project that emulates \nGapminder\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n# Store pop as a numpy array: np_pop\n\n\nnp_pop\n \n=\n \nnp\n.\narray\n(\npop\n)\n\n\n# array([])\n\n\n\n# Double np_pop\n\n\nnp_pop\n \n=\n \nnp_pop\n \n*\n \n2\n\n\n\n# Update: set s argument to np_pop\n\n\nplt\n.\nscatter\n(\ngdp_cap\n,\n \nlife_exp\n,\n \ns\n \n=\n \nnp_pop\n)\n \n# s = size of the bubble\n\n\n\n# Previous customizations\n\n\nplt\n.\nxscale\n(\n'log'\n)\n \n\nplt\n.\nxlabel\n(\n'GDP per Capita [in USD]'\n)\n\n\nplt\n.\nylabel\n(\n'Life Expectancy [in years]'\n)\n\n\nplt\n.\ntitle\n(\n'World Development in 2007'\n)\n\n\nplt\n.\nxticks\n([\n1000\n,\n \n10000\n,\n \n100000\n],[\n'1k'\n,\n \n'10k'\n,\n \n'100k'\n])\n\n\n\n# Display the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nColors\n\n\n1\n2\n3\n# adding con\n\n\ncon\n \n=\n \n[\n'red'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'yellow'\n,\n \n'black'\n,\n \n'green'\n,\n \n'red'\n,\n \n'red'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'yellow'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'yellow'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'red'\n,\n \n'blue'\n,\n \n'yellow'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'yellow'\n,\n \n'red'\n,\n \n'yellow'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'yellow'\n,\n \n'blue'\n,\n \n'green'\n,\n \n'yellow'\n,\n \n'green'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'yellow'\n,\n \n'yellow'\n,\n \n'blue'\n,\n \n'yellow'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'green'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'green'\n,\n \n'yellow'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'yellow'\n,\n \n'yellow'\n,\n \n'red'\n,\n \n'green'\n,\n \n'green'\n,\n \n'red'\n,\n \n'red'\n,\n \n'red'\n,\n \n'red'\n,\n \n'green'\n,\n \n'red'\n,\n \n'green'\n,\n \n'yellow'\n,\n \n'red'\n,\n \n'red'\n,\n \n'blue'\n,\n \n'red'\n,\n \n'red'\n,\n \n'red'\n,\n \n'red'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'red'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'yellow'\n,\n \n'red'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'red'\n,\n \n'blue'\n,\n \n'red'\n,\n \n'green'\n,\n \n'black'\n,\n \n'yellow'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'green'\n,\n \n'red'\n,\n \n'red'\n,\n \n'yellow'\n,\n \n'yellow'\n,\n \n'yellow'\n,\n \n'red'\n,\n \n'green'\n,\n \n'green'\n,\n \n'yellow'\n,\n \n'blue'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'red'\n,\n \n'blue'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'red'\n,\n \n'green'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'green'\n,\n \n'red'\n,\n \n'blue'\n,\n \n'blue'\n,\n \n'green'\n,\n \n'green'\n,\n \n'red'\n,\n \n'red'\n,\n \n'blue'\n,\n \n'red'\n,\n \n'blue'\n,\n \n'yellow'\n,\n \n'blue'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'green'\n,\n \n'yellow'\n,\n \n'yellow'\n,\n \n'yellow'\n,\n \n'red'\n,\n \n'red'\n,\n \n'red'\n,\n \n'blue'\n,\n \n'blue'\n]\n\n\nprint\n(\ncon\n)\n\n\n\n\n\n\n\n1\n['red', 'green', 'blue', 'blue', 'yellow', 'black', 'green', 'red', 'red', 'green', 'blue', 'yellow', 'green', 'blue', 'yellow', 'green', 'blue', 'blue', 'red', 'blue', 'yellow', 'blue', 'blue', 'yellow', 'red', 'yellow', 'blue', 'blue', 'blue', 'yellow', 'blue', 'green', 'yellow', 'green', 'green', 'blue', 'yellow', 'yellow', 'blue', 'yellow', 'blue', 'blue', 'blue', 'green', 'green', 'blue', 'blue', 'green', 'blue', 'green', 'yellow', 'blue', 'blue', 'yellow', 'yellow', 'red', 'green', 'green', 'red', 'red', 'red', 'red', 'green', 'red', 'green', 'yellow', 'red', 'red', 'blue', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'red', 'blue', 'blue', 'blue', 'yellow', 'red', 'green', 'blue', 'blue', 'red', 'blue', 'red', 'green', 'black', 'yellow', 'blue', 'blue', 'green', 'red', 'red', 'yellow', 'yellow', 'yellow', 'red', 'green', 'green', 'yellow', 'blue', 'green', 'blue', 'blue', 'red', 'blue', 'green', 'blue', 'red', 'green', 'green', 'blue', 'blue', 'green', 'red', 'blue', 'blue', 'green', 'green', 'red', 'red', 'blue', 'red', 'blue', 'yellow', 'blue', 'green', 'blue', 'green', 'yellow', 'yellow', 'yellow', 'red', 'red', 'red', 'blue', 'blue']\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n# The Gapminder data contains a list continent with the continent each country belongs to.\n\n\n# A dictionary is constructed that maps continents onto colors:\n\n\ndict\n \n=\n \n{\n\n    \n'Asia'\n:\n'red'\n,\n\n    \n'Europe'\n:\n'green'\n,\n\n    \n'Africa'\n:\n'blue'\n,\n\n    \n'Americas'\n:\n'yellow'\n,\n\n    \n'Oceania'\n:\n'black'\n\n\n}\n\n\n\n# Specify c and alpha inside plt.scatter()\n\n\nplt\n.\nscatter\n(\nx\n \n=\n \ngdp_cap\n,\n \ny\n \n=\n \nlife_exp\n,\n \ns\n \n=\n \nnp_pop\n \n*\n \n2\n,\n \nc\n \n=\n \ncon\n,\n \nalpha\n \n=\n \n0.8\n)\n\n\n\n# Previous customizations\n\n\nplt\n.\nxscale\n(\n'log'\n)\n \n\nplt\n.\nxlabel\n(\n'GDP per Capita [in USD]'\n)\n\n\nplt\n.\nylabel\n(\n'Life Expectancy [in years]'\n)\n\n\nplt\n.\ntitle\n(\n'World Development in 2007'\n)\n\n\nplt\n.\nxticks\n([\n1000\n,\n10000\n,\n100000\n],\n \n[\n'1k'\n,\n'10k'\n,\n'100k'\n])\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nAdditional Customizations\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n# Scatter plot\n\n\nplt\n.\nscatter\n(\nx\n \n=\n \ngdp_cap\n,\n \ny\n \n=\n \nlife_exp\n,\n \ns\n \n=\n \nnp_pop\n \n*\n \n2\n,\n \nc\n \n=\n \ncon\n,\n \nalpha\n \n=\n \n0.8\n)\n\n\n\n# Previous customizations\n\n\nplt\n.\nxscale\n(\n'log'\n)\n \n\nplt\n.\nxlabel\n(\n'GDP per Capita [in USD]'\n)\n\n\nplt\n.\nylabel\n(\n'Life Expectancy [in years]'\n)\n\n\nplt\n.\ntitle\n(\n'World Development in 2007'\n)\n\n\nplt\n.\nxticks\n([\n1000\n,\n10000\n,\n100000\n],\n \n[\n'1k'\n,\n'10k'\n,\n'100k'\n])\n\n\n\n# Additional customizations\n\n\nplt\n.\ntext\n(\n1550\n,\n \n71\n,\n \n'India'\n)\n\n\nplt\n.\ntext\n(\n5700\n,\n \n80\n,\n \n'China'\n)\n\n\n\n# Add grid() call\n\n\nplt\n.\ngrid\n(\nTrue\n)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nList\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# Definition of countries and capital\n\n\ncountries\n \n=\n \n[\n'spain'\n,\n \n'france'\n,\n \n'germany'\n,\n \n'norway'\n]\n\n\ncapitals\n \n=\n \n[\n'madrid'\n,\n \n'paris'\n,\n \n'berlin'\n,\n \n'oslo'\n]\n\n\n\n# Get index of 'germany': ind_ger\n\n\nind_ger\n \n=\n \ncountries\n.\nindex\n(\n'germany'\n)\n\n\nprint\n(\nind_ger\n)\n\n\n\n# Use ind_ger to print out capital of Germany\n\n\nprint\n(\ncapitals\n[\nind_ger\n])\n\n\n\n\n\n\n\n1\n2\n2\nberlin\n\n\n\n\n\n\nDictionary\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Definition of dictionary\n\n\neurope\n \n=\n \n{\n'spain'\n:\n'madrid'\n,\n \n'france'\n:\n'paris'\n,\n \n'germany'\n:\n'berlin'\n,\n \n'norway'\n:\n'oslo'\n \n}\n\n\n\n# Print out the keys in europe\n\n\nprint\n(\neurope\n.\nkeys\n())\n\n\n\n# Print out value that belongs to key 'norway'\n\n\nprint\n(\neurope\n[\n'norway'\n])\n\n\n\n\n\n\n\n1\n2\ndict_keys(['france', 'norway', 'spain', 'germany'])\noslo\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Add italy to europe\n\n\neurope\n[\n'italy'\n]\n \n=\n \n'rome'\n\n\n\n# Print out italy in europe\n\n\nprint\n(\n'italy'\n \nin\n \neurope\n)\n\n\n\n\n\n\n\n1\nTrue\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Add italy to europe\n\n\neurope\n[\n'italy'\n]\n \n=\n \n'rome'\n\n\n\n# Print out italy in europe\n\n\nprint\n(\n'italy'\n \nin\n \neurope\n)\n\n\n\n\n\n\n\n1\nTrue\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n# Definition of dictionary\n\n\neurope\n \n=\n \n{\n'spain'\n:\n'madrid'\n,\n \n'france'\n:\n'paris'\n,\n \n'germany'\n:\n'bonn'\n,\n \n          \n'norway'\n:\n'oslo'\n,\n \n'italy'\n:\n'rome'\n,\n \n'poland'\n:\n'warsaw'\n,\n \n          \n'australia'\n:\n'vienna'\n \n}\n\n\n\n# Update capital of germany\n\n\neurope\n[\n'germany'\n]\n \n=\n \n'berlin'\n\n\n\n# Remove australia\n\n\ndel\n(\neurope\n[\n'australia'\n])\n\n\n\n# Print europe\n\n\nprint\n(\neurope\n)\n\n\n\n\n\n\n\n1\n{'france': 'paris', 'norway': 'oslo', 'poland': 'warsaw', 'italy': 'rome', 'spain': 'madrid', 'germany': 'berlin'}\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n# Dictionary of dictionaries\n\n\neurope\n \n=\n \n{\n \n'spain'\n:\n \n{\n \n'capital'\n:\n'madrid'\n,\n \n'population'\n:\n46.77\n \n},\n\n           \n'france'\n:\n \n{\n \n'capital'\n:\n'paris'\n,\n \n'population'\n:\n66.03\n \n},\n\n           \n'germany'\n:\n \n{\n \n'capital'\n:\n'berlin'\n,\n \n'population'\n:\n80.62\n \n},\n\n           \n'norway'\n:\n \n{\n \n'capital'\n:\n'oslo'\n,\n \n'population'\n:\n5.084\n \n}\n \n}\n\n\n\n\n# Print out the capital of France\n\n\nprint\n(\neurope\n[\n'france'\n][\n'capital'\n])\n\n\n\n# Create sub-dictionary data\n\n\ndata\n \n=\n \n{\n\n    \n'capital'\n:\n \n'rome'\n,\n\n    \n'population'\n:\n \n59.83\n\n\n}\n\n\n\n# Add data to europe under key 'italy'\n\n\neurope\n[\n'italy'\n]\n \n=\n \ndata\n\n\n\n# Print europe\n\n\nprint\n(\neurope\n)\n\n\n\n\n\n\n\n1\n2\nparis\n{'france': {'capital': 'paris', 'population': 66.03}, 'italy': {'capital': 'rome', 'population': 59.83}, 'norway': {'capital': 'oslo', 'population': 5.084}, 'spain': {'capital': 'madrid', 'population': 46.77}, 'germany': {'capital': 'berlin', 'population': 80.62}}\n\n\n\n\n\n\nPandas: data frame\n\u00b6\n\n\n\n\nAn Overview.\n\n\nTabular data are rectangular or 2D. Numpy can handle that.\n\n\nBut, Numpy is good with similar data: all str, all float or all integer.\n\n\nPandas is a data frame that can mix diverse data: str, float, and integer.\n\n\nImport the \npandas\n package as \nnp\n.\n\n\n\n\n1\nimport\n \npandas\n \nas\n \npd\n\n\n\n\n\n\n\n\n\nStart with pre-defined lists.\n\n\n\n\n1\n2\n3\nnames\n \n=\n \n[\n'United States'\n,\n \n'Australia'\n,\n \n'Japan'\n,\n \n'India'\n,\n \n'Russia'\n,\n \n'Morocco'\n,\n \n'Egypt'\n]\n\n\ndr\n \n=\n  \n[\nTrue\n,\n \nFalse\n,\n \nFalse\n,\n \nFalse\n,\n \nTrue\n,\n \nTrue\n,\n \nTrue\n]\n\n\ncpc\n \n=\n \n[\n809\n,\n \n731\n,\n \n588\n,\n \n18\n,\n \n200\n,\n \n70\n,\n \n45\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Create dictionary my_dict with three key:value pairs: my_dict\n\n\nmy_dict\n \n=\n \n{\n\n    \n'country'\n:\n \nnames\n,\n\n    \n'drives_right'\n:\n \ndr\n,\n\n    \n'cars_per_cap'\n:\n \ncpc\n\n\n}\n\n\n\n\n\n\n\n\n\nBuild DataFrame \ncars\n from \nmy_dict\n: \ncars\n.\n\n\n\n\n~ convert, dictionary, data frame~\n\n\n1\n2\n3\n4\ncars\n \n=\n \npd\n.\nDataFrame\n(\nmy_dict\n)\n\n\n\n# Print cars\n\n\nprint\n(\ncars\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n   cars_per_cap        country drives_right\n0           809  United States         True\n1           731      Australia        False\n2           588          Japan        False\n3            18          India        False\n4           200         Russia         True\n5            70        Morocco         True\n6            45          Egypt         True\n\n\n\n\n\n\n\n\nAdd row labels.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nrow_labels\n \n=\n \n[\n'US'\n,\n \n'AUS'\n,\n \n'JAP'\n,\n \n'IN'\n,\n \n'RU'\n,\n \n'MOR'\n,\n \n'EG'\n]\n\n\n\n# Specify row labels of cars\n\n\ncars\n.\nindex\n \n=\n \nrow_labels\n\n\n\n# Print cars again\n\n\nprint\n(\ncars\n)\n\n\n\n\n\n         cars_per_cap        country drives_right\n\n    US            809  United States         True\n\n    AUS           731      Australia        False\n\n    JAP           588          Japan        False\n\n    IN             18          India        False\n\n    RU            200         Russia         True\n\n    MOR            70        Morocco         True\n\n    EG             45          Egypt         True\n\n\n\n\nImport data: \u2018cars.csv\u2019 to create DataFrame \ncars\n.\n\n\n\n\n1\ncars2\n \n=\n \npd\n.\nread_csv\n(\n'cars.csv'\n,\n \nsep\n \n=\n \n';'\n)\n\n\n\n\n\n\n\nOther parameters: \nindex_col\n, \nheader\n, \ndelimiter\n, \nnames\n, \nindex_col\n.\n\n\n\n\nAbove all, here are a few commands to extract, subset, parse:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nmy_array\n[\nr\n,\n \nc\n]\n\n\n\nmy_pandas\n[\n'col'\n]\n \nas\n \na\n \nseries\n\n\nmy_pandas\n[[\n'col'\n]]\n \nas\n \na\n \nd\n.\nf\n.\n\n\nmy_pandas\n[[\n'col1'\n,\n \n'col2'\n]]\n\n\n\nmy_pandas\n[\n1\n]\n\n\nmy_pandas\n[\n1\n:\n3\n]\n\n\n\nmy_pandas\n.\nloc\n[\n'row'\n]\n \nas\n \na\n \nseries\n\n\nmy_pandas\n.\nloc\n[[\n'row'\n]]\n \nas\n \na\n \nd\n.\nf\n\n\nmy_pandas\n.\nloc\n[[\n'row1'\n,\n \n'row2'\n]]\n \n\n\nmy_pandas\n.\nloc\n[[\n'col1'\n,\n \n'col2'\n],\n \n[\n'row1'\n,\n \n'row2'\n]]\n \n\nmy_pandas\n.\nloc\n[:,\n \n[\n'row1'\n,\n \n'row2'\n]]\n \n\nmy_pandas\n.\nloc\n[[\n'col1'\n,\n \n'col2'\n],\n \n:]\n \n\n\nmy_pandas\n.\niloc\n[\n1\n]\n \nas\n \na\n \nseries\n\n\nmy_pandas\n.\niloc\n[[\n1\n]]\n \nas\n \na\n \nd\n.\nf\n\n\nmy_pandas\n.\niloc\n[[\n1\n,\n2\n]]\n \n\n\nmy_pandas\n.\niloc\n[[\n1\n,\n \n2\n],\n \n[\n1\n,\n \n2\n]]\n \n\nmy_pandas\n.\niloc\n[:,\n \n[\n1\n,\n \n2\n]]\n \n\nmy_pandas\n.\niloc\n[[\n1\n,\n \n2\n],\n \n:]\n\n\n\n\n\n\n\n\n\nApply these commands.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Print out country column as Pandas Series\n\n\nprint\n(\ncars2\n[\n'country'\n])\n\n\n\n# Print out country column as Pandas DataFrame\n\n\nprint\n(\ncars2\n[[\n'country'\n]])\n\n\n\n# Print out DataFrame with country and drives_right columns\n\n\nprint\n(\ncars2\n[[\n'country'\n,\n \n'drives_right'\n]])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n0    United States\n1        Australia\n2            Japan\n3            India\n4           Russia\n5          Morocco\n6            Egypt\nName: country, dtype: object\n         country\n0  United States\n1      Australia\n2          Japan\n3          India\n4         Russia\n5        Morocco\n6          Egypt\n         country drives_right\n0  United States         True\n1      Australia        False\n2          Japan        False\n3          India        False\n4         Russia         True\n5        Morocco         True\n6          Egypt         True\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Print out first 3 observations\n\n\nprint\n(\ncars\n[\n0\n:\n3\n])\n\n\n\n# Print out fourth, fifth and sixth observation\n\n\nprint\n(\ncars\n[\n3\n:\n6\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n     cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\n     cars_per_cap  country drives_right\nIN             18    India        False\nRU            200   Russia         True\nMOR            70  Morocco         True\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Print out observation for Japan\n\n\nprint\n(\ncars\n.\nloc\n[[\n'JAP'\n]])\n\n\n\n# Print out observations for Australia and Egypt\n\n\nprint\n(\ncars\n.\nloc\n[[\n'AUS'\n,\n \n'EG'\n]])\n\n\n\n\n\n         cars_per_cap country drives_right\n\n    JAP           588   Japan        False\n\n         cars_per_cap    country drives_right\n\n    AUS           731  Australia        False\n\n    EG             45      Egypt         True\n\n\n1\n2\n3\n4\n5\n# Print out drives_right value of Morocco\n\n\nprint\n(\ncars\n.\nloc\n[[\n'MOR'\n],\n \n[\n'drives_right'\n]])\n\n\n\n# Print sub-DataFrame\n\n\nprint\n(\ncars\n.\nloc\n[[\n'RU'\n,\n \n'MOR'\n],\n \n[\n'country'\n,\n \n'drives_right'\n]])\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n    drives_right\nMOR         True\n     country drives_right\nRU    Russia         True\nMOR  Morocco         True\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Print out drives_right column as Series\n\n\nprint\n(\ncars\n.\nloc\n[:,\n'drives_right'\n])\n\n\n\n# Print out drives_right column as DataFrame\n\n\nprint\n(\ncars\n.\nloc\n[:,[\n'drives_right'\n]])\n\n\n\n# Print out car;, s_per_cap and drives_right as DataFrame\n\n\nprint\n(\ncars\n.\nloc\n[:,\n \n[\n'cars_per_cap'\n,\n \n'drives_right'\n]])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nUS      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool\n    drives_right\nUS          True\nAUS        False\nJAP        False\nIN         False\nRU          True\nMOR         True\nEG          True\n     cars_per_cap drives_right\nUS            809         True\nAUS           731        False\nJAP           588        False\nIN             18        False\nRU            200         True\nMOR            70         True\nEG             45         True\n\n\n\n\n\n\n\n\nA series is \n[]\n.\n\n\nA data frame is \n[[]]\n.\n\n\n\n\n1\n2\n3\n4\n5\n# Extract drives_right column as Series: dr\n\n\ndr\n \n=\n \ncars\n.\nloc\n[:,\n'drives_right'\n]\n \n# or cars['drives_right']\n\n\n\n# cars.iloc[:,2]\n\n\nprint\n(\ndr\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nUS      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool\n\n\n\n\n\n\n\n\nUse \ndr\n, a boolean series, to subset (row job) \ncars\n.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# dr will extract the True (1) rows\n\n\nsel\n \n=\n \ncars\n[\ndr\n]\n\n\n\n# Or, convert code to a one-liner\n\n\nsel\n \n=\n \ncars\n[\ncars\n[\n'drives_right'\n]\n \n==\n \nTrue\n]\n\n\n\n# Print sel\n\n\nprint\n(\nsel\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n     cars_per_cap        country drives_right\nUS            809  United States         True\nRU            200         Russia         True\nMOR            70        Morocco         True\nEG             45          Egypt         True\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# Create series car_maniac: observations that have a cars_per_cap over 500\n\n\ncpc\n \n=\n \ncars\n.\nloc\n[:,\n \n'cars_per_cap'\n]\n\n\nmany_cars\n \n=\n \ncpc\n \n>\n \n500\n\n\ncar_maniac\n \n=\n \ncars\n[\nmany_cars\n]\n\n\n\n# Print car_maniac\n\n\nprint\n(\ncar_maniac\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n     cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# Create medium: observations with cars_per_cap between 100 and 500\n\n\ncpc\n \n=\n \ncars\n.\nloc\n[:,\n'cars_per_cap'\n]\n\n\nbetween\n \n=\n \nnp\n.\nlogical_and\n(\ncpc\n \n>\n \n100\n,\n \ncpc\n \n<\n \n500\n)\n \n# Numpy\n\n\nmedium\n \n=\n \ncars\n[\nbetween\n]\n\n\n\n# Print medium\n\n\nprint\n(\nmedium\n)\n\n\n\n\n\n\n\n1\n2\n    cars_per_cap country drives_right\nRU           200  Russia         True\n\n\n\n\n\n\nLooping\n\u00b6\n\n\nLoops\n\n\n1\n2\n# areas list\n\n\nareas\n \n=\n \n[\n11.25\n,\n \n18.0\n,\n \n20.0\n,\n \n10.75\n,\n \n9.50\n]\n\n\n\n\n\n\n\n\n\nChange for-loop to use \nenumerate\n()\n.\n\n\n\n\n~ enumerate~\n\n\n1\n2\nfor\n \nindex\n,\n \na\n \nin\n \nenumerate\n(\nareas\n)\n \n:\n\n    \nprint\n(\n\"room \"\n \n+\n \nstr\n(\nindex\n)\n \n+\n \n\": \"\n \n+\n \nstr\n(\na\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nroom 0: 11.25\nroom 1: 18.0\nroom 2: 20.0\nroom 3: 10.75\nroom 4: 9.5\n\n\n\n\n\n\n\n\nAnother loop.\n\n\n\n\n1\n2\n3\n4\n5\n6\n# house list of lists\n\n\nhouse\n \n=\n \n[[\n\"hallway\"\n,\n \n11.25\n],\n \n         \n[\n\"kitchen\"\n,\n \n18.0\n],\n \n         \n[\n\"living room\"\n,\n \n20.0\n],\n \n         \n[\n\"bedroom\"\n,\n \n10.75\n],\n \n         \n[\n\"bathroom\"\n,\n \n9.50\n]]\n\n\n\n\n\n\n\n1\n2\n3\n# Build a for-loop from scratch\n\n\nfor\n \nroom\n \nin\n \nhouse\n:\n\n    \nprint\n(\n\"the \"\n \n+\n \nroom\n[\n0\n]\n.\ncapitalize\n()\n \n+\n \n\" is \"\n \n+\n \nstr\n(\nroom\n[\n1\n])\n \n+\n \n\" sqm\"\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nthe Hallway is 11.25 sqm\nthe Kitchen is 18.0 sqm\nthe Living room is 20.0 sqm\nthe Bedroom is 10.75 sqm\nthe Bathroom is 9.5 sqm\n\n\n\n\n\n\n\n\nAnother loop.\n\n\n\n\n1\n2\n3\n# Definition of dictionary\n\n\neurope\n \n=\n \n{\n'spain'\n:\n'madrid'\n,\n \n'france'\n:\n'paris'\n,\n \n'germany'\n:\n'bonn'\n,\n \n          \n'norway'\n:\n'oslo'\n,\n \n'italy'\n:\n'rome'\n,\n \n'poland'\n:\n'warsaw'\n,\n \n'australia'\n:\n'vienna'\n \n}\n\n\n\n\n\n\n\n1\n2\n3\n# Iterate over europe\n\n\nfor\n \ncountry\n,\n \ncapital\n \nin\n \neurope\n.\nitems\n():\n\n    \nprint\n(\n\"the capital of \"\n \n+\n \nstr\n(\ncountry\n)\n \n+\n \n\" is \"\n \n+\n \nstr\n(\ncapital\n))\n \n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nthe capital of australia is vienna\nthe capital of france is paris\nthe capital of norway is oslo\nthe capital of poland is warsaw\nthe capital of italy is rome\nthe capital of spain is madrid\nthe capital of germany is bonn\n\n\n\n\n\n\nLoop over a NumPy array\n\n\n\n\n\n\nIf you\u2019re dealing with a 1D Numpy array, looping over all elements can be as simple as: \nfor x in my_array : ...\n\n\n\n\n\n\nIf you\u2019re dealing with a 2D Numpy array, it\u2019s more complicated. \n\n\n\n\nA 2D array is built up of multiple 1D arrays. \n\n\n\n\nTo explicitly iterate over all separate elements of a multi-dimensional array, you\u2019ll need this syntax: \nfor x in np.nditer(my_array) : ...\n\n\n\n\n\n\nTwo Numpy arrays that you might recognize from the intro course are available in your Python session: np_height, a Numpy array containing the heights of Major League Baseball players, and np_baseball, a 2D Numpy array that contains both the heights (first column) and weights (second column) of those players.\n\n\n\n\n\n\nLoop over a Pandas data frame\n\n\n\n\nIterating over a Pandas DataFrame is typically done with the iterrows() method. \n\n\nUsed in a for loop, every observation is iterated over and on every iteration the row label and actual row contents are available: \nfor lab, row in brics.iterrows() : ...\n\n\nIn this and the following exercises you will be working on the cars DataFrame. \n\n\nIt contains information on the cars per capita and whether people drive right or left for seven countries in the world.\n\n\n\n\n1\n2\n3\n4\n# Iterate over rows of cars\n\n\nfor\n \nlab\n,\n \nrow\n \nin\n \ncars\n.\niterrows\n():\n\n    \nprint\n(\nlab\n)\n \n# row label\n\n    \nprint\n(\nrow\n)\n \n# row content\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\nUS\ncars_per_cap              809\ncountry         United States\ndrives_right             True\nName: US, dtype: object\nAUS\ncars_per_cap          731\ncountry         Australia\ndrives_right        False\nName: AUS, dtype: object\nJAP\ncars_per_cap      588\ncountry         Japan\ndrives_right    False\nName: JAP, dtype: object\nIN\ncars_per_cap       18\ncountry         India\ndrives_right    False\nName: IN, dtype: object\nRU\ncars_per_cap       200\ncountry         Russia\ndrives_right      True\nName: RU, dtype: object\nMOR\ncars_per_cap         70\ncountry         Morocco\ndrives_right       True\nName: MOR, dtype: object\nEG\ncars_per_cap       45\ncountry         Egypt\ndrives_right     True\nName: EG, dtype: object\n\n\n\n\n\n\n1\n2\n3\n# Adapt the for-loop\n\n\nfor\n \nlab\n,\n \nrow\n \nin\n \ncars\n.\niterrows\n()\n \n:\n\n    \nprint\n(\nstr\n(\nlab\n)\n \n+\n \n\": \"\n \n+\n \nstr\n(\nrow\n[\n'cars_per_cap'\n]))\n\n\n\n\n\n\n\n\n\nCode a for-loop that adds the \nCOUNTRY\n column with uppercase version of the \ncountry\n names in the \ncountry\n column.\n\n\n\n\n1\n2\n3\n4\n5\nfor\n \nlab\n,\n \nrow\n \nin\n \ncars\n.\niterrows\n():\n\n    \ncars\n.\nloc\n[\nlab\n,\n \n\"COUNTRY\"\n]\n \n=\n \n(\nrow\n[\n\"country\"\n]\n.\nupper\n())\n\n\n\n# Print cars\n\n\nprint\n(\ncars\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n     cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT\n\n\n\n\n\n\n\n\nReplace the for-loop with a one-liner that uses \n.apply\n(\nstr.upper\n)\n. \n\n\nThe call should give the same result: a column \nCOUNTRY\nshould be added to cars, containing an uppercase version of the country names.\n\n\n\n\n1\n2\ncars\n[\n\"COUNTRY\"\n]\n \n=\n \ncars\n[\n\"country\"\n]\n.\napply\n(\nstr\n.\nupper\n)\n\n\nprint\n(\ncars\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n     cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT\n\n\n\n\n\n\nA NumPy project: random walk & Monte Carlo simulation\n\u00b6\n\n\n1\n2\n3\n4\n5\n# Set the seed\n\n\nnp\n.\nrandom\n.\nseed\n(\n123\n)\n\n\n\n# Generate and print random float between 0 and 1\n\n\nprint\n(\nnp\n.\nrandom\n.\nrand\n())\n\n\n\n\n\n\n\n1\n0.6964691855978616\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Use randint() to simulate a dice (1,2,3,4,5,6)\n\n\nprint\n(\nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n \n7\n))\n\n\nprint\n(\nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n \n7\n))\n\n\nprint\n(\nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n \n7\n))\n\n\nprint\n(\nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n \n7\n))\n\n\nprint\n(\nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n \n7\n))\n\n\nprint\n(\nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n \n7\n))\n\n\nprint\n(\nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n \n7\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n5\n3\n2\n4\n3\n4\n2\n\n\n\n\n\n\n\n\nBuild a random walk.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n# Starting step\n\n\nstep\n \n=\n \n50\n\n\n\n# Roll the dice\n\n\ndice\n \n=\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n\n\n# Finish the control construct\n\n\n'''\n\n\nIf dice is 1 or 2, you go one step down.\n\n\nif dice is 3, 4 or 5, you go one step up.\n\n\nElse, you throw the dice again. The number of eyes is the number of steps you go up.\n\n\n'''\n\n\nif\n \ndice\n \n<=\n \n2\n \n:\n\n    \nstep\n \n=\n \nstep\n \n-\n \n1\n\n\nelif\n \ndice\n \n<=\n \n5\n \n:\n\n    \nstep\n \n=\n \nstep\n \n+\n \n1\n\n\nelse\n \n:\n\n    \nstep\n \n=\n \nstep\n \n+\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n\n\n# Print out dice and step\n\n\nprint\n(\ndice\n),\n \nprint\n(\nstep\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n2\n49\n\n(None, None)\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\noutcomes\n \n=\n \n[]\n\n\n\nfor\n \nx\n \nin\n \nrange\n(\n10\n)\n \n:\n\n    \ncoin\n \n=\n \nnp\n.\nrandom\n.\nrandint\n(\n0\n,\n \n2\n)\n\n\nif\n \ncoin\n \n==\n \n0\n \n:\n\n    \noutcomes\n.\nappend\n(\n\"heads\"\n)\n\n\nelse\n \n:\n\n    \noutcomes\n.\nappend\n(\n\"tails\"\n)\n\n\n\nprint\n(\noutcomes\n)\n\n\n\n\n\n\n\n1\n['tails']\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ntails\n \n=\n \n[\n0\n]\n\n\n\nfor\n \nx\n \nin\n \nrange\n(\n10\n)\n \n:\n\n    \ncoin\n \n=\n \nnp\n.\nrandom\n.\nrandint\n(\n0\n,\n \n2\n)\n\n\n    \ntails\n.\nappend\n(\ncoin\n)\n\n\n\nprint\n(\ntails\n)\n\n\n\n\n\n\n\n1\n[0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1]\n\n\n\n\n\n\n\n\nInitialize \nrandom_walk\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nrandom_walk\n \n=\n \n[\n0\n]\n\n\n\n# Complete the ___\n\n\nfor\n \nx\n \nin\n \nrange\n(\n100\n)\n \n:\n\n    \n# Set step: last element in random_walk\n\n    \nstep\n \n=\n \nrandom_walk\n[\n-\n1\n]\n\n\n    \n# Roll the dice\n\n    \ndice\n \n=\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n\n    \n# Determine next step\n\n    \nif\n \ndice\n \n<=\n \n2\n:\n\n        \nstep\n \n=\n \nmax\n(\n0\n,\n \nstep\n \n-\n \n1\n)\n \n# make sure that 'step' never goes below 0 when you decrease it\n\n    \nelif\n \ndice\n \n<=\n \n5\n:\n\n        \nstep\n \n=\n \nstep\n \n+\n \n1\n\n    \nelse\n:\n\n        \nstep\n \n=\n \nstep\n \n+\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n\n    \n# append next_step to random_walk\n\n    \nrandom_walk\n.\nappend\n(\nstep\n)\n\n\n\n# Print random_walk\n\n\nprint\n(\nrandom_walk\n)\n\n\n\n\n\n\n\n1\n[0, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 10, 12, 11, 12, 13, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 19, 21, 20, 19, 20, 21, 20, 22, 23, 24, 25, 26, 27, 28, 27, 28, 29, 34, 35, 34, 33, 32, 31, 32, 33, 34, 39, 40, 39, 40, 41, 42, 43, 44, 45, 44, 43, 44, 43, 49, 48, 49, 48, 49, 48, 49, 53, 57, 59, 61, 60, 61, 63, 62, 68, 69, 71, 72, 71, 72, 73, 74, 73, 74, 75, 76, 78, 77, 76, 77, 83, 88, 87, 86]\n\n\n\n\n\n\n\n\nPlot \nrandom_walk\n.\n\n\n\n\n1\n2\n3\n4\nplt\n.\nplot\n(\nrange\n(\n101\n),\n \nrandom_walk\n)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\nBuild a Monte Carlo as an alternative.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n# Initialize all_walks\n\n\nall_walks\n \n=\n \n[]\n\n\n\n# Simulate random walk 10 times\n\n\nfor\n \ni\n \nin\n \nrange\n(\n10\n)\n \n:\n\n\n    \n# Code from before\n\n    \nrandom_walk\n \n=\n \n[\n0\n]\n\n    \nfor\n \nx\n \nin\n \nrange\n(\n100\n)\n \n:\n\n        \nstep\n \n=\n \nrandom_walk\n[\n-\n1\n]\n\n        \ndice\n \n=\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n\n        \nif\n \ndice\n \n<=\n \n2\n:\n\n            \nstep\n \n=\n \nmax\n(\n0\n,\n \nstep\n \n-\n \n1\n)\n\n        \nelif\n \ndice\n \n<=\n \n5\n:\n\n            \nstep\n \n=\n \nstep\n \n+\n \n1\n\n        \nelse\n:\n\n            \nstep\n \n=\n \nstep\n \n+\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n        \nrandom_walk\n.\nappend\n(\nstep\n)\n\n\n    \n# Append random_walk to all_walks\n\n    \nall_walks\n.\nappend\n(\nrandom_walk\n)\n \n\n\n# Print all_walks\n\n\nprint\n(\nall_walks\n)\n\n\n\n\n\n\n\n1\n[[0, 4, 5, 6, 7, 9, 8, 9, 8, 9, 8, 7, 13, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 20, 19, 18, 19, 18, 19, 18, 19, 20, 24, 25, 24, 30, 29, 28, 29, 28, 27, 28, 27, 31, 30, 31, 30, 31, 30, 31, 33, 32, 31, 30, 31, 30, 35, 36, 37, 36, 35, 36, 35, 36, 35, 40, 41, 40, 39, 38, 37, 38, 39, 43, 49, 50, 51, 52, 53, 52, 53, 55, 56, 57, 58, 57, 56, 57, 56, 57, 58, 59, 58, 59, 60, 61, 60, 59, 60, 61, 66], [0, 1, 2, 7, 6, 7, 6, 7, 8, 9, 10, 9, 15, 14, 15, 14, 13, 14, 18, 19, 20, 21, 22, 21, 20, 19, 18, 17, 18, 19, 20, 21, 22, 23, 22, 23, 24, 23, 24, 25, 28, 27, 28, 27, 28, 31, 32, 33, 34, 33, 32, 35, 36, 37, 38, 37, 36, 37, 40, 41, 46, 47, 46, 47, 46, 47, 46, 52, 51, 50, 51, 53, 52, 51, 50, 51, 52, 53, 54, 58, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 74, 73, 74, 75, 74, 80, 79, 80, 81, 80], [0, 0, 1, 0, 0, 6, 5, 4, 5, 6, 5, 4, 3, 2, 3, 9, 10, 13, 14, 20, 21, 22, 28, 27, 33, 32, 33, 34, 35, 34, 40, 41, 40, 41, 40, 41, 40, 41, 40, 41, 45, 46, 48, 47, 48, 47, 46, 47, 46, 47, 46, 50, 54, 53, 52, 51, 52, 53, 57, 58, 59, 63, 62, 61, 60, 61, 62, 64, 63, 62, 63, 64, 66, 69, 74, 75, 74, 75, 76, 77, 78, 79, 78, 79, 80, 86, 85, 90, 89, 93, 92, 96, 95, 98, 99, 98, 99, 105, 104, 103, 102], [0, 4, 3, 2, 3, 4, 3, 4, 5, 6, 7, 6, 5, 4, 5, 4, 3, 7, 8, 10, 14, 20, 19, 18, 19, 20, 21, 20, 21, 20, 21, 22, 21, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 35, 38, 39, 38, 37, 38, 39, 40, 39, 38, 37, 36, 37, 38, 39, 40, 41, 42, 43, 42, 43, 44, 46, 45, 46, 47, 50, 52, 53, 52, 51, 50, 49, 48, 49, 48, 49, 51, 52, 53, 52, 53, 52, 51, 52, 51, 50, 49, 50, 49, 48, 49, 50, 51, 53, 54], [0, 1, 0, 0, 1, 7, 6, 7, 8, 13, 12, 13, 12, 13, 14, 13, 14, 15, 21, 22, 23, 24, 23, 25, 26, 27, 28, 27, 28, 29, 30, 31, 30, 31, 30, 31, 32, 31, 32, 36, 37, 40, 41, 45, 46, 45, 46, 47, 46, 45, 50, 51, 52, 51, 50, 51, 52, 53, 52, 56, 55, 56, 57, 58, 59, 60, 61, 62, 61, 60, 59, 60, 61, 65, 66, 65, 66, 67, 66, 72, 73, 74, 75, 74, 75, 76, 79, 78, 79, 78, 77, 76, 77, 78, 80, 81, 82, 86, 87, 86, 85], [0, 1, 2, 1, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 4, 5, 4, 3, 2, 3, 4, 5, 6, 7, 12, 16, 15, 16, 15, 14, 13, 14, 13, 14, 15, 14, 18, 19, 18, 19, 18, 17, 18, 17, 21, 22, 23, 24, 25, 26, 25, 26, 27, 28, 29, 30, 29, 34, 35, 36, 35, 36, 35, 36, 37, 36, 37, 42, 43, 44, 43, 44, 45, 46, 45, 46, 45, 46, 47, 46, 45, 44, 45, 46, 45, 44, 43, 44, 48, 49, 50, 51, 52, 53, 52, 53, 54, 53, 54, 59, 60], [0, 0, 0, 1, 0, 0, 0, 4, 5, 6, 7, 6, 7, 8, 9, 10, 11, 10, 9, 12, 11, 10, 9, 8, 9, 15, 16, 15, 16, 17, 16, 15, 16, 17, 18, 17, 21, 22, 21, 23, 24, 23, 24, 25, 26, 27, 28, 29, 28, 27, 28, 29, 28, 29, 30, 29, 28, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 39, 40, 41, 42, 43, 44, 43, 42, 48, 49, 50, 49, 48, 47, 51, 52, 56, 55, 61, 62, 63, 67, 68, 67, 66, 67, 68, 69, 70, 69, 75, 76, 75], [0, 4, 5, 4, 5, 4, 10, 16, 17, 16, 17, 18, 19, 20, 21, 20, 23, 22, 24, 25, 31, 30, 31, 32, 31, 30, 31, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 43, 44, 45, 46, 45, 44, 43, 44, 43, 47, 46, 45, 46, 48, 49, 54, 53, 54, 55, 59, 58, 59, 60, 59, 58, 59, 60, 61, 60, 59, 58, 59, 58, 57, 58, 57, 56, 55, 56, 57, 56, 55, 54, 55, 56, 57, 56, 55, 56, 57, 58, 59, 58, 59, 58, 59, 60, 61, 62], [0, 1, 6, 11, 10, 11, 12, 11, 12, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 18, 19, 20, 21, 20, 19, 18, 20, 21, 22, 21, 20, 19, 20, 21, 22, 21, 20, 21, 24, 29, 32, 33, 34, 40, 41, 42, 43, 42, 44, 49, 50, 51, 52, 53, 54, 55, 54, 55, 56, 57, 58, 59, 61, 65, 66, 67, 68, 69, 73, 78, 77, 76, 75, 74, 77, 78, 79, 80, 79, 78, 81, 82, 81, 80, 79, 80, 81, 82, 83, 82, 83, 82, 83, 84, 83, 84, 85, 86, 87, 88, 89], [0, 1, 0, 0, 1, 2, 5, 6, 5, 4, 5, 6, 7, 12, 11, 10, 9, 8, 7, 6, 7, 6, 5, 6, 9, 8, 7, 8, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 26, 27, 28, 29, 30, 31, 30, 29, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 43, 42, 41, 40, 39, 40, 41, 42, 41, 40, 39, 38, 37, 36, 37, 41, 45, 46, 47, 46, 45, 46, 47, 48, 54, 55, 54, 53, 54, 53, 54, 53, 54, 55, 54, 55, 54, 53, 54, 55, 54, 55, 54]]\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nall_walks\n \n=\n \n[]\n\n\nfor\n \ni\n \nin\n \nrange\n(\n10\n)\n \n:\n\n    \nrandom_walk\n \n=\n \n[\n0\n]\n\n    \nfor\n \nx\n \nin\n \nrange\n(\n100\n)\n \n:\n\n        \nstep\n \n=\n \nrandom_walk\n[\n-\n1\n]\n\n        \ndice\n \n=\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n        \nif\n \ndice\n \n<=\n \n2\n:\n\n            \nstep\n \n=\n \nmax\n(\n0\n,\n \nstep\n \n-\n \n1\n)\n\n        \nelif\n \ndice\n \n<=\n \n5\n:\n\n            \nstep\n \n=\n \nstep\n \n+\n \n1\n\n        \nelse\n:\n\n            \nstep\n \n=\n \nstep\n \n+\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n        \nrandom_walk\n.\nappend\n(\nstep\n)\n\n    \nall_walks\n.\nappend\n(\nrandom_walk\n)\n\n\n\n# Convert all_walks to Numpy array: np_aw\n\n\n# all_walks is a list of 10 lists\n\n\nnp_aw\n \n=\n \nnp\n.\narray\n(\nall_walks\n)\n\n\n# np_aw is an array of 10 horizontal vectors (a matrix...)\n\n\n\n# Plot np_aw and show\n\n\nplt\n.\nplot\n(\nnp_aw\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\nNow every row in \nnp_all_walks\n represents the position after 1 throw (of dice) for the 10 random walks.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Clear the figure\n\n\nplt\n.\nclf\n()\n\n\n\n# Transpose np_aw: np_aw_t\n\n\nnp_aw_t\n \n=\n \nnp\n.\ntranspose\n(\nnp_aw\n)\n\n\n\n# Plot np_aw_t and show\n\n\nplt\n.\nplot\n(\nnp_aw_t\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n10 randoms walks from 0 to 100 (the dice only had 6 possibilities).\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nnp\n.\nrandom\n.\nseed\n(\n123\n)\n\n\nall_walks\n \n=\n \n[]\n\n\n\n# Simulate random walk 250 times\n\n\nfor\n \ni\n \nin\n \nrange\n(\n250\n)\n \n:\n\n    \nrandom_walk\n \n=\n \n[\n0\n]\n\n    \nfor\n \nx\n \nin\n \nrange\n(\n100\n)\n \n:\n\n        \nstep\n \n=\n \nrandom_walk\n[\n-\n1\n]\n\n        \ndice\n \n=\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n        \nif\n \ndice\n \n<=\n \n2\n:\n\n            \nstep\n \n=\n \nmax\n(\n0\n,\n \nstep\n \n-\n \n1\n)\n\n        \nelif\n \ndice\n \n<=\n \n5\n:\n\n            \nstep\n \n=\n \nstep\n \n+\n \n1\n\n        \nelse\n:\n\n            \nstep\n \n=\n \nstep\n \n+\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n\n        \n# Implement clumsiness\n\n        \n# if a random float is less or equal to 0.001\n\n        \n# randint = integer\n\n        \n# rand = float\n\n        \nif\n \nnp\n.\nrandom\n.\nrand\n()\n \n<=\n \n0.001\n \n:\n\n            \nstep\n \n=\n \n0\n\n\n        \nrandom_walk\n.\nappend\n(\nstep\n)\n\n    \nall_walks\n.\nappend\n(\nrandom_walk\n)\n\n\n\n# Create and plot np_aw_t\n\n\nnp_aw_t\n \n=\n \nnp\n.\ntranspose\n(\nnp\n.\narray\n(\nall_walks\n))\n\n\nplt\n.\nplot\n(\nnp_aw_t\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\nWhat are the odds that you\u2019ll reach 60 steps high on the Empire State Building? \n\n\nBasically, you want to know about the end points of all the random walks you\u2019ve simulated. \n\n\nThese end points have a certain distribution that you can visualize with a histogram.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nnp\n.\nrandom\n.\nseed\n(\n123\n)\n\n\nall_walks\n \n=\n \n[]\n\n\n\n# Simulate random walk 1000 times\n\n\nfor\n \ni\n \nin\n \nrange\n(\n1000\n)\n \n:\n\n    \nrandom_walk\n \n=\n \n[\n0\n]\n\n    \nfor\n \nx\n \nin\n \nrange\n(\n100\n)\n \n:\n\n        \nstep\n \n=\n \nrandom_walk\n[\n-\n1\n]\n\n        \ndice\n \n=\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n        \nif\n \ndice\n \n<=\n \n2\n:\n\n            \nstep\n \n=\n \nmax\n(\n0\n,\n \nstep\n \n-\n \n1\n)\n\n        \nelif\n \ndice\n \n<=\n \n5\n:\n\n            \nstep\n \n=\n \nstep\n \n+\n \n1\n\n        \nelse\n:\n\n            \nstep\n \n=\n \nstep\n \n+\n \nnp\n.\nrandom\n.\nrandint\n(\n1\n,\n7\n)\n\n        \nif\n \nnp\n.\nrandom\n.\nrand\n()\n \n<=\n \n0.001\n \n:\n\n            \nstep\n \n=\n \n0\n\n        \nrandom_walk\n.\nappend\n(\nstep\n)\n\n    \nall_walks\n.\nappend\n(\nrandom_walk\n)\n\n\n\n# Create and plot np_aw_t\n\n\nnp_aw_t\n \n=\n \nnp\n.\ntranspose\n(\nnp\n.\narray\n(\nall_walks\n))\n\n\n\n# Select last row from np_aw_t: ends\n\n\nends\n \n=\n \nnp_aw_t\n[\n-\n1\n]\n\n\n\n# Plot histogram of ends, display plot\n\n\nplt\n.\nhist\n(\nends\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\nThe histogram of the previous exercise was created from a Numpy array \nends\n, that contains 1,000 integers. \n\n\nEach integer represents the end point of a random walk. \n\n\nTo calculate the change that this end point is higher than or equal to 60, you can count the number of integers in ends that are greater than or equal to 60 and divide that number by 1000, the total number of simulations.\n\n\nWell then, what\u2019s the estimated chance that you\u2019ll reach 60 steps high if you play this Empire State Building game? \n\n\nThe \nends\n array is everything you need.\n\n\n\n\n1\n2\n3\nsum\n(\nends\n \n>=\n \n60\n)\n \n/\n \n1000\n\n\n\n# 78.8%\n\n\n\n\n\n\n\n1\n0.78800000000000003",
            "title": "Python for Data Science"
        },
        {
            "location": "/Python for Data Science/#basic-operations",
            "text": "Print is a function   In Python 3:   1 print ()     While in Python 2:   1\n2\n3\n4\n5\n6 print   \"test\"  print   \"-\"   *   25  print   10  print   5   +   5  print   variable  print   function ()    1 print ( \"Python 3.x\" )    1 Python 3.x    Addition and subtraction.   1\n2 print ( 5   +   5 )  print ( 5   -   5 )    1\n2 10\n0    Multiplication and division.   1\n2 print ( 3   *   5 )  print ( 10   /   2 )    1\n2 15\n5.0    Exponentiation.   1 print ( 4   **   2 )    1 16    Modulo.   1 print ( 18   %   7 )    1 4    How much is your $100 worth after 7 years?   1 print ( 100   *   (( 1   +   0.10 ) ** 7 ))    1 194.87171000000012    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # Create a variable savings  savings   =   100  # Create a variable factor  factor   =   1.10  # Calculate result  result   =   savings   *   factor   **   7  # Print out result  print ( result )    1 194.87171000000012    Several variables to experiment with.   1\n2\n3\n4\n5\n6\n7\n8\n9 savings   =   100  factor   =   1.10  desc   =   \"compound interest\"  # Assign product of factor and savings to year1  year1   =   savings   *   factor  # Print the type of year1  print ( type ( year1 ))    1 <class 'float'>   1\n2\n3\n4\n5 # Assign sum of  desc and  desc to doubledesc.  doubledesc   =   desc   +   desc  # Print out doubledesc  print ( doubledesc )    1 compound interestcompound interest   1\n2\n3\n4 # Definition of savings and result  savings   =   100  result   =   100   *   1.10   **   7  print ( result )    1 194.87171000000012",
            "title": "Basic operations"
        },
        {
            "location": "/Python for Data Science/#concatenating-help-printing-listing",
            "text": "Concatenation  1 print ( \"I started with $\"   +   str ( savings )   +   \" and now have $\"   +   str ( result )   +   \". Awesome!\" )    1 I started with $100 and now have $194.87171000000012. Awesome!   1\n2\n3\n4\n5\n6 # Definition of pi_string  pi_string   =   \"3.1415926\"  # Convert pi_string into float: pi_float  pi_float   =   float ( pi_string )  print ( pi_float )    1 3.1415926   Help  1\n2 # Inline  help ( max )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 Help on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -> value\n    max(arg1, arg2, *args, *[, key=func]) -> value\n\n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.   1\n2 # Offline  ? max    Contiguous printing  ~ horizontal, print~  1\n2 # Print out room and room_up  print ( 'room' );   print ( 'room_up' )    1\n2 room\nroom_up   Index  1\n2\n3\n4\n5 # Create list areas  areas   =   [ 11.25 ,   18.0 ,   20.0 ,   10.75 ,   9.50 ]  # Print out the index of the element 20.0  print ( areas . index ( 20.0 ))    1 2   1\n2\n3\n4\n5 # Create list baseball   baseball   =   [ 180 ,   215 ,   210 ,   210 ,   188 ,   176 ,   209 ,   200 ]  # Print out the first and last elements  print ( baseball [ 1 ]);   print ( baseball [ - 1 ])    1\n2 215\n200",
            "title": "Concatenating, help, printing, listing"
        },
        {
            "location": "/Python for Data Science/#numpy-arrays",
            "text": "An overview with an simple array.  Import the  numpy  package as  np .   1 import   numpy   as   np     Create a Numpy array from  baseball :  np_baseball .  Transform a list into an array.   1\n2\n3\n4 np_baseball   =   np . array ( baseball )  # Print out type of np_baseball  print ( type ( np_baseball ))    1 <class 'numpy.ndarray'>    Again.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 # Height list  height   =   [ 68 ,   78 ,   76 ,   80 ,   75 ,   79 ,   78 ,   80 ]  weight   =   baseball  # Create array from height with correct units: np_height_m  np_height_m   =   np . array ( height )   *   0.0254  # Create array from weight with correct units: np_weight_kg   np_weight_kg   =   np . array ( weight )   *   0.453592  # Calculate the BMI: bmi  bmi   =   np_weight_kg   /   ( np_height_m   **   2 )  # Print out bmi  print ( bmi )    1\n2 [ 27.36860318  24.84546948  25.56171941  23.06945176  23.49812856\n  19.82697406  24.15210754  21.97090644]   1\n2\n3\n4\n5\n6\n7\n8\n9 # Store weight and height lists as numpy arrays  np_weight   =   np . array ( weight )  np_height   =   np . array ( height )  # Print out the weight at index 5  print ( np_weight [ 5 ])  # Print out sub-array of np_height: index 100 up to and including index 110  print ( np_height [ 1 : 2 ])    1\n2 176\n[78]   List to array   A list in an array is a 2D array or a tabular array.   ~ 2 dimension, 2d, 2-d~  1\n2\n3\n4\n5 # Create baseball, a list of lists  baseball   =   [[ 180 ,   78.4 ], \n             [ 215 ,   102.7 ], \n             [ 210 ,   98.5 ], \n             [ 188 ,   75.2 ]]     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # Create a Numpy array from baseball: np_baseball  np_baseball   =   np . array ( baseball )  # Print out the type of np_baseball  print ( type ( np_baseball ))  # Print out the shape of np_baseball  print ( np_baseball . shape )  # Print out the 4th row of np_baseball  print ( np_baseball [ 3 ,:])  # Select the entire second column of np_baseball: np_weight  np_weight   =   np_baseball [:, 1 ]  # Print out height of 4th player  print ( np_baseball [ 3 , 0 ])    1\n2\n3\n4 <class 'numpy.ndarray'>\n(4, 2)\n[ 188.    75.2]\n188.0   1\n2\n3\n4\n5\n6\n7\n8 # Create np_height from np_baseball  np_height   =   np_baseball [:, 1 ]  # Print out the mean of np_height  print ( np . mean ( np_height ))  # Print out the median of np_height  print ( np . median ( np_height ))    1\n2 88.7\n88.45    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # Print mean weight  avg   =   np . mean ( np_baseball [:, 0 ])  print ( \"Average: \"   +   str ( avg ))  # Print median weight. Replace 'None'  med   =   np . median ( np_baseball [:, 0 ])  print ( \"Median: \"   +   str ( med ))  # Print out the standard deviation on weight. Replace 'None'  stddev   =   np . std ( np_baseball [:, 0 ])  print ( \"Standard Deviation: \"   +   str ( stddev ))    1\n2\n3 Average :   198.25  Median :   199.0  Standard   Deviation :   14.6351460533    1\n2\n3 # Print out correlation between first and second column. Replace 'None'  corr   =   np . corrcoef ( np_baseball [:, 0 ],   np_baseball [:, 1 ])  print ( \"Correlation: \"   +   str ( corr ))    1\n2 Correlation: [[ 1.          0.95865738]\n [ 0.95865738  1.        ]]   Arrays and logicals  1\n2\n3 # Create the arrays  my_house   =   np . array ([ 18.0 ,   20.0 ,   10.75 ,   9.50 ])  your_house   =   np . array ([ 14.0 ,   24.0 ,   14.25 ,   9.0 ])    1\n2\n3\n4\n5\n6 # Which areas in my_house are greater than or equal to 18  print ( my_house   >=   18 )  # compare two Numpy arrays element-wise  # which areas in my_house are smaller than the ones in your_house  print ( my_house [ my_house   <   your_house ])    1\n2 [ True  True False False]  [ 20.    10.75]    1\n2\n3\n4\n5\n6\n7 # np.logical_and(), np.logical_or() and np.logical_not()  # my_house greater than 18.5 or smaller than 10  print ( np . logical_or ( my_house   >   18.5 ,   my_house   <   10 ))  # Both my_house and your_house smaller than 11  print ( np . logical_and ( my_house   <   11 ,   your_house   <   11 ))    1\n2 [False  True False  True]  [False False False  True]",
            "title": "NumPy: arrays"
        },
        {
            "location": "/Python for Data Science/#2-intermediate",
            "text": "",
            "title": "2, Intermediate"
        },
        {
            "location": "/Python for Data Science/#plotting-basics",
            "text": "In this section, we use the  matplolib  package for plotting and charting.  In IPython, the package is \u2018stacked\u2019 with the  numpy  packages and other scientific packages under the magic command  %pylab .   Calling  %pylab  is calling the entire scientific stack or Scipy Stack.   Line plot  1\n2\n3\n4\n5\n6 year   =   [ 1950 ,   1970 ,   1990 ,   2010 ]  pop   =   [ 2.519 ,   3.692 ,   5.263 ,   6.972 ]  # Print the last item from year and pop  print ( year [ - 1 ])  print ( pop [ - 1 ])    1\n2 2010\n6.972   1 %   pylab   inline    1 Populating the interactive namespace from numpy and matplotlib    With  inline , graphics will be printed within the notebook as opposed to being printed in another window (a new window which pops open).   1\n2\n3 # Make a line plot: year on the x-axis, pop on the y-axis  plt . plot ( year ,   pop )  plt . show ()     Scatter plot  1\n2\n3\n4\n5\n6 eco   =   np . recfromcsv ( 'economic.csv' ,   delimiter = ';' ,   names = True ,   dtype = None )  # gdp_cap, life_exp, pop  gdp_cap   =   eco [ 'gdp_cap' ]  life_exp   =   eco [ 'life_exp' ]  pop   =   eco [ 'pop' ]    1\n2\n3\n4\n5\n6\n7\n8 # Change the line plot to a scatter plot  plt . scatter ( gdp_cap ,   life_exp )  # Put the x-axis on a logarithmic scale  plt . xscale ( 'log' )  # Show plot  plt . show ()     1\n2\n3\n4\n5\n6\n7 # Build Scatter plot  plt . scatter ( pop ,   life_exp )  # Show plot  plt . show ()  # There's no clear relationship between population and life expectancy, which makes perfect sense.     Histograms  1\n2\n3\n4\n5 # Create histogram of life_exp data (bins = 10 by default)  plt . hist ( life_exp )  # Display histogram  plt . show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 # Build histogram with 5 bins  plt . hist ( life_exp ,   bins   =   5 )  # Show and clean up plot  plt . show ()  plt . clf ()   # clean up  # Build histogram with 20 bins  plt . hist ( life_exp ,   bins   =   20 )  # Show and clean up again  plt . show ()  plt . clf ()      1 <matplotlib.figure.Figure at 0x7578cf8>   Label  ~ x, y, label~   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 # Basic scatter plot, log scale  plt . scatter ( gdp_cap ,   life_exp )  plt . xscale ( 'log' )   # Strings  xlab   =   'GDP per Capita [in USD]'  ylab   =   'Life Expectancy [in years]'  title   =   'World Development in 2007'  # Add axis labels  plt . xlabel ( xlab )  plt . ylabel ( ylab )  # Add title  plt . title ( title )  # After customizing, display the plot  plt . show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 # Scatter plot  plt . scatter ( gdp_cap ,   life_exp )  # Previous customizations  plt . xscale ( 'log' )   plt . xlabel ( 'GDP per Capita [in USD]' )  plt . ylabel ( 'Life Expectancy [in years]' )  plt . title ( 'World Development in 2007' )  # Definition of tick_val and tick_lab  tick_val   =   [ 1000 , 10000 , 100000 ]  tick_lab   =   [ '1k' , '10k' , '100k' ]  # Adapt the ticks on the x-axis  plt . xticks ( tick_val ,   tick_lab )  # After customizing, display the plot  plt . show ()",
            "title": "Plotting basics"
        },
        {
            "location": "/Python for Data Science/#a-plotting-project-gapminder",
            "text": "Size, the 3 rd  dimension   A little project that emulates  Gapminder .    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 # Store pop as a numpy array: np_pop  np_pop   =   np . array ( pop )  # array([])  # Double np_pop  np_pop   =   np_pop   *   2  # Update: set s argument to np_pop  plt . scatter ( gdp_cap ,   life_exp ,   s   =   np_pop )   # s = size of the bubble  # Previous customizations  plt . xscale ( 'log' )   plt . xlabel ( 'GDP per Capita [in USD]' )  plt . ylabel ( 'Life Expectancy [in years]' )  plt . title ( 'World Development in 2007' )  plt . xticks ([ 1000 ,   10000 ,   100000 ],[ '1k' ,   '10k' ,   '100k' ])  # Display the plot  plt . show ()     Colors  1\n2\n3 # adding con  con   =   [ 'red' ,   'green' ,   'blue' ,   'blue' ,   'yellow' ,   'black' ,   'green' ,   'red' ,   'red' ,   'green' ,   'blue' ,   'yellow' ,   'green' ,   'blue' ,   'yellow' ,   'green' ,   'blue' ,   'blue' ,   'red' ,   'blue' ,   'yellow' ,   'blue' ,   'blue' ,   'yellow' ,   'red' ,   'yellow' ,   'blue' ,   'blue' ,   'blue' ,   'yellow' ,   'blue' ,   'green' ,   'yellow' ,   'green' ,   'green' ,   'blue' ,   'yellow' ,   'yellow' ,   'blue' ,   'yellow' ,   'blue' ,   'blue' ,   'blue' ,   'green' ,   'green' ,   'blue' ,   'blue' ,   'green' ,   'blue' ,   'green' ,   'yellow' ,   'blue' ,   'blue' ,   'yellow' ,   'yellow' ,   'red' ,   'green' ,   'green' ,   'red' ,   'red' ,   'red' ,   'red' ,   'green' ,   'red' ,   'green' ,   'yellow' ,   'red' ,   'red' ,   'blue' ,   'red' ,   'red' ,   'red' ,   'red' ,   'blue' ,   'blue' ,   'blue' ,   'blue' ,   'blue' ,   'red' ,   'blue' ,   'blue' ,   'blue' ,   'yellow' ,   'red' ,   'green' ,   'blue' ,   'blue' ,   'red' ,   'blue' ,   'red' ,   'green' ,   'black' ,   'yellow' ,   'blue' ,   'blue' ,   'green' ,   'red' ,   'red' ,   'yellow' ,   'yellow' ,   'yellow' ,   'red' ,   'green' ,   'green' ,   'yellow' ,   'blue' ,   'green' ,   'blue' ,   'blue' ,   'red' ,   'blue' ,   'green' ,   'blue' ,   'red' ,   'green' ,   'green' ,   'blue' ,   'blue' ,   'green' ,   'red' ,   'blue' ,   'blue' ,   'green' ,   'green' ,   'red' ,   'red' ,   'blue' ,   'red' ,   'blue' ,   'yellow' ,   'blue' ,   'green' ,   'blue' ,   'green' ,   'yellow' ,   'yellow' ,   'yellow' ,   'red' ,   'red' ,   'red' ,   'blue' ,   'blue' ]  print ( con )    1 ['red', 'green', 'blue', 'blue', 'yellow', 'black', 'green', 'red', 'red', 'green', 'blue', 'yellow', 'green', 'blue', 'yellow', 'green', 'blue', 'blue', 'red', 'blue', 'yellow', 'blue', 'blue', 'yellow', 'red', 'yellow', 'blue', 'blue', 'blue', 'yellow', 'blue', 'green', 'yellow', 'green', 'green', 'blue', 'yellow', 'yellow', 'blue', 'yellow', 'blue', 'blue', 'blue', 'green', 'green', 'blue', 'blue', 'green', 'blue', 'green', 'yellow', 'blue', 'blue', 'yellow', 'yellow', 'red', 'green', 'green', 'red', 'red', 'red', 'red', 'green', 'red', 'green', 'yellow', 'red', 'red', 'blue', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'red', 'blue', 'blue', 'blue', 'yellow', 'red', 'green', 'blue', 'blue', 'red', 'blue', 'red', 'green', 'black', 'yellow', 'blue', 'blue', 'green', 'red', 'red', 'yellow', 'yellow', 'yellow', 'red', 'green', 'green', 'yellow', 'blue', 'green', 'blue', 'blue', 'red', 'blue', 'green', 'blue', 'red', 'green', 'green', 'blue', 'blue', 'green', 'red', 'blue', 'blue', 'green', 'green', 'red', 'red', 'blue', 'red', 'blue', 'yellow', 'blue', 'green', 'blue', 'green', 'yellow', 'yellow', 'yellow', 'red', 'red', 'red', 'blue', 'blue']    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 # The Gapminder data contains a list continent with the continent each country belongs to.  # A dictionary is constructed that maps continents onto colors:  dict   =   { \n     'Asia' : 'red' , \n     'Europe' : 'green' , \n     'Africa' : 'blue' , \n     'Americas' : 'yellow' , \n     'Oceania' : 'black'  }  # Specify c and alpha inside plt.scatter()  plt . scatter ( x   =   gdp_cap ,   y   =   life_exp ,   s   =   np_pop   *   2 ,   c   =   con ,   alpha   =   0.8 )  # Previous customizations  plt . xscale ( 'log' )   plt . xlabel ( 'GDP per Capita [in USD]' )  plt . ylabel ( 'Life Expectancy [in years]' )  plt . title ( 'World Development in 2007' )  plt . xticks ([ 1000 , 10000 , 100000 ],   [ '1k' , '10k' , '100k' ])  # Show the plot  plt . show ()     Additional Customizations   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 # Scatter plot  plt . scatter ( x   =   gdp_cap ,   y   =   life_exp ,   s   =   np_pop   *   2 ,   c   =   con ,   alpha   =   0.8 )  # Previous customizations  plt . xscale ( 'log' )   plt . xlabel ( 'GDP per Capita [in USD]' )  plt . ylabel ( 'Life Expectancy [in years]' )  plt . title ( 'World Development in 2007' )  plt . xticks ([ 1000 , 10000 , 100000 ],   [ '1k' , '10k' , '100k' ])  # Additional customizations  plt . text ( 1550 ,   71 ,   'India' )  plt . text ( 5700 ,   80 ,   'China' )  # Add grid() call  plt . grid ( True )  # Show the plot  plt . show ()     List   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # Definition of countries and capital  countries   =   [ 'spain' ,   'france' ,   'germany' ,   'norway' ]  capitals   =   [ 'madrid' ,   'paris' ,   'berlin' ,   'oslo' ]  # Get index of 'germany': ind_ger  ind_ger   =   countries . index ( 'germany' )  print ( ind_ger )  # Use ind_ger to print out capital of Germany  print ( capitals [ ind_ger ])    1\n2 2\nberlin   Dictionary  1\n2\n3\n4\n5\n6\n7\n8 # Definition of dictionary  europe   =   { 'spain' : 'madrid' ,   'france' : 'paris' ,   'germany' : 'berlin' ,   'norway' : 'oslo'   }  # Print out the keys in europe  print ( europe . keys ())  # Print out value that belongs to key 'norway'  print ( europe [ 'norway' ])    1\n2 dict_keys(['france', 'norway', 'spain', 'germany'])\noslo   1\n2\n3\n4\n5 # Add italy to europe  europe [ 'italy' ]   =   'rome'  # Print out italy in europe  print ( 'italy'   in   europe )    1 True   1\n2\n3\n4\n5 # Add italy to europe  europe [ 'italy' ]   =   'rome'  # Print out italy in europe  print ( 'italy'   in   europe )    1 True    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 # Definition of dictionary  europe   =   { 'spain' : 'madrid' ,   'france' : 'paris' ,   'germany' : 'bonn' ,  \n           'norway' : 'oslo' ,   'italy' : 'rome' ,   'poland' : 'warsaw' ,  \n           'australia' : 'vienna'   }  # Update capital of germany  europe [ 'germany' ]   =   'berlin'  # Remove australia  del ( europe [ 'australia' ])  # Print europe  print ( europe )    1 {'france': 'paris', 'norway': 'oslo', 'poland': 'warsaw', 'italy': 'rome', 'spain': 'madrid', 'germany': 'berlin'}    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 # Dictionary of dictionaries  europe   =   {   'spain' :   {   'capital' : 'madrid' ,   'population' : 46.77   }, \n            'france' :   {   'capital' : 'paris' ,   'population' : 66.03   }, \n            'germany' :   {   'capital' : 'berlin' ,   'population' : 80.62   }, \n            'norway' :   {   'capital' : 'oslo' ,   'population' : 5.084   }   }  # Print out the capital of France  print ( europe [ 'france' ][ 'capital' ])  # Create sub-dictionary data  data   =   { \n     'capital' :   'rome' , \n     'population' :   59.83  }  # Add data to europe under key 'italy'  europe [ 'italy' ]   =   data  # Print europe  print ( europe )    1\n2 paris\n{'france': {'capital': 'paris', 'population': 66.03}, 'italy': {'capital': 'rome', 'population': 59.83}, 'norway': {'capital': 'oslo', 'population': 5.084}, 'spain': {'capital': 'madrid', 'population': 46.77}, 'germany': {'capital': 'berlin', 'population': 80.62}}",
            "title": "A plotting project: Gapminder"
        },
        {
            "location": "/Python for Data Science/#pandas-data-frame",
            "text": "An Overview.  Tabular data are rectangular or 2D. Numpy can handle that.  But, Numpy is good with similar data: all str, all float or all integer.  Pandas is a data frame that can mix diverse data: str, float, and integer.  Import the  pandas  package as  np .   1 import   pandas   as   pd     Start with pre-defined lists.   1\n2\n3 names   =   [ 'United States' ,   'Australia' ,   'Japan' ,   'India' ,   'Russia' ,   'Morocco' ,   'Egypt' ]  dr   =    [ True ,   False ,   False ,   False ,   True ,   True ,   True ]  cpc   =   [ 809 ,   731 ,   588 ,   18 ,   200 ,   70 ,   45 ]    1\n2\n3\n4\n5\n6 # Create dictionary my_dict with three key:value pairs: my_dict  my_dict   =   { \n     'country' :   names , \n     'drives_right' :   dr , \n     'cars_per_cap' :   cpc  }     Build DataFrame  cars  from  my_dict :  cars .   ~ convert, dictionary, data frame~  1\n2\n3\n4 cars   =   pd . DataFrame ( my_dict )  # Print cars  print ( cars )    1\n2\n3\n4\n5\n6\n7\n8    cars_per_cap        country drives_right\n0           809  United States         True\n1           731      Australia        False\n2           588          Japan        False\n3            18          India        False\n4           200         Russia         True\n5            70        Morocco         True\n6            45          Egypt         True    Add row labels.   1\n2\n3\n4\n5\n6\n7 row_labels   =   [ 'US' ,   'AUS' ,   'JAP' ,   'IN' ,   'RU' ,   'MOR' ,   'EG' ]  # Specify row labels of cars  cars . index   =   row_labels  # Print cars again  print ( cars )   \n         cars_per_cap        country drives_right \n    US            809  United States         True \n    AUS           731      Australia        False \n    JAP           588          Japan        False \n    IN             18          India        False \n    RU            200         Russia         True \n    MOR            70        Morocco         True \n    EG             45          Egypt         True   Import data: \u2018cars.csv\u2019 to create DataFrame  cars .   1 cars2   =   pd . read_csv ( 'cars.csv' ,   sep   =   ';' )    Other parameters:  index_col ,  header ,  delimiter ,  names ,  index_col .   Above all, here are a few commands to extract, subset, parse:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 my_array [ r ,   c ]  my_pandas [ 'col' ]   as   a   series  my_pandas [[ 'col' ]]   as   a   d . f .  my_pandas [[ 'col1' ,   'col2' ]]  my_pandas [ 1 ]  my_pandas [ 1 : 3 ]  my_pandas . loc [ 'row' ]   as   a   series  my_pandas . loc [[ 'row' ]]   as   a   d . f  my_pandas . loc [[ 'row1' ,   'row2' ]]   my_pandas . loc [[ 'col1' ,   'col2' ],   [ 'row1' ,   'row2' ]]   my_pandas . loc [:,   [ 'row1' ,   'row2' ]]   my_pandas . loc [[ 'col1' ,   'col2' ],   :]   my_pandas . iloc [ 1 ]   as   a   series  my_pandas . iloc [[ 1 ]]   as   a   d . f  my_pandas . iloc [[ 1 , 2 ]]   my_pandas . iloc [[ 1 ,   2 ],   [ 1 ,   2 ]]   my_pandas . iloc [:,   [ 1 ,   2 ]]   my_pandas . iloc [[ 1 ,   2 ],   :]     Apply these commands.   1\n2\n3\n4\n5\n6\n7\n8 # Print out country column as Pandas Series  print ( cars2 [ 'country' ])  # Print out country column as Pandas DataFrame  print ( cars2 [[ 'country' ]])  # Print out DataFrame with country and drives_right columns  print ( cars2 [[ 'country' ,   'drives_right' ]])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 0    United States\n1        Australia\n2            Japan\n3            India\n4           Russia\n5          Morocco\n6            Egypt\nName: country, dtype: object\n         country\n0  United States\n1      Australia\n2          Japan\n3          India\n4         Russia\n5        Morocco\n6          Egypt\n         country drives_right\n0  United States         True\n1      Australia        False\n2          Japan        False\n3          India        False\n4         Russia         True\n5        Morocco         True\n6          Egypt         True   1\n2\n3\n4\n5 # Print out first 3 observations  print ( cars [ 0 : 3 ])  # Print out fourth, fifth and sixth observation  print ( cars [ 3 : 6 ])    1\n2\n3\n4\n5\n6\n7\n8      cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\n     cars_per_cap  country drives_right\nIN             18    India        False\nRU            200   Russia         True\nMOR            70  Morocco         True   1\n2\n3\n4\n5 # Print out observation for Japan  print ( cars . loc [[ 'JAP' ]])  # Print out observations for Australia and Egypt  print ( cars . loc [[ 'AUS' ,   'EG' ]])   \n         cars_per_cap country drives_right \n    JAP           588   Japan        False \n         cars_per_cap    country drives_right \n    AUS           731  Australia        False \n    EG             45      Egypt         True  1\n2\n3\n4\n5 # Print out drives_right value of Morocco  print ( cars . loc [[ 'MOR' ],   [ 'drives_right' ]])  # Print sub-DataFrame  print ( cars . loc [[ 'RU' ,   'MOR' ],   [ 'country' ,   'drives_right' ]])    1\n2\n3\n4\n5     drives_right\nMOR         True\n     country drives_right\nRU    Russia         True\nMOR  Morocco         True   1\n2\n3\n4\n5\n6\n7\n8 # Print out drives_right column as Series  print ( cars . loc [:, 'drives_right' ])  # Print out drives_right column as DataFrame  print ( cars . loc [:,[ 'drives_right' ]])  # Print out car;, s_per_cap and drives_right as DataFrame  print ( cars . loc [:,   [ 'cars_per_cap' ,   'drives_right' ]])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 US      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool\n    drives_right\nUS          True\nAUS        False\nJAP        False\nIN         False\nRU          True\nMOR         True\nEG          True\n     cars_per_cap drives_right\nUS            809         True\nAUS           731        False\nJAP           588        False\nIN             18        False\nRU            200         True\nMOR            70         True\nEG             45         True    A series is  [] .  A data frame is  [[]] .   1\n2\n3\n4\n5 # Extract drives_right column as Series: dr  dr   =   cars . loc [:, 'drives_right' ]   # or cars['drives_right']  # cars.iloc[:,2]  print ( dr )    1\n2\n3\n4\n5\n6\n7\n8 US      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool    Use  dr , a boolean series, to subset (row job)  cars .   1\n2\n3\n4\n5\n6\n7\n8 # dr will extract the True (1) rows  sel   =   cars [ dr ]  # Or, convert code to a one-liner  sel   =   cars [ cars [ 'drives_right' ]   ==   True ]  # Print sel  print ( sel )    1\n2\n3\n4\n5      cars_per_cap        country drives_right\nUS            809  United States         True\nRU            200         Russia         True\nMOR            70        Morocco         True\nEG             45          Egypt         True   1\n2\n3\n4\n5\n6\n7 # Create series car_maniac: observations that have a cars_per_cap over 500  cpc   =   cars . loc [:,   'cars_per_cap' ]  many_cars   =   cpc   >   500  car_maniac   =   cars [ many_cars ]  # Print car_maniac  print ( car_maniac )    1\n2\n3\n4      cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False   1\n2\n3\n4\n5\n6\n7 # Create medium: observations with cars_per_cap between 100 and 500  cpc   =   cars . loc [:, 'cars_per_cap' ]  between   =   np . logical_and ( cpc   >   100 ,   cpc   <   500 )   # Numpy  medium   =   cars [ between ]  # Print medium  print ( medium )    1\n2     cars_per_cap country drives_right\nRU           200  Russia         True",
            "title": "Pandas: data frame"
        },
        {
            "location": "/Python for Data Science/#looping",
            "text": "Loops  1\n2 # areas list  areas   =   [ 11.25 ,   18.0 ,   20.0 ,   10.75 ,   9.50 ]     Change for-loop to use  enumerate () .   ~ enumerate~  1\n2 for   index ,   a   in   enumerate ( areas )   : \n     print ( \"room \"   +   str ( index )   +   \": \"   +   str ( a ))    1\n2\n3\n4\n5 room 0: 11.25\nroom 1: 18.0\nroom 2: 20.0\nroom 3: 10.75\nroom 4: 9.5    Another loop.   1\n2\n3\n4\n5\n6 # house list of lists  house   =   [[ \"hallway\" ,   11.25 ],  \n          [ \"kitchen\" ,   18.0 ],  \n          [ \"living room\" ,   20.0 ],  \n          [ \"bedroom\" ,   10.75 ],  \n          [ \"bathroom\" ,   9.50 ]]    1\n2\n3 # Build a for-loop from scratch  for   room   in   house : \n     print ( \"the \"   +   room [ 0 ] . capitalize ()   +   \" is \"   +   str ( room [ 1 ])   +   \" sqm\" )    1\n2\n3\n4\n5 the Hallway is 11.25 sqm\nthe Kitchen is 18.0 sqm\nthe Living room is 20.0 sqm\nthe Bedroom is 10.75 sqm\nthe Bathroom is 9.5 sqm    Another loop.   1\n2\n3 # Definition of dictionary  europe   =   { 'spain' : 'madrid' ,   'france' : 'paris' ,   'germany' : 'bonn' ,  \n           'norway' : 'oslo' ,   'italy' : 'rome' ,   'poland' : 'warsaw' ,   'australia' : 'vienna'   }    1\n2\n3 # Iterate over europe  for   country ,   capital   in   europe . items (): \n     print ( \"the capital of \"   +   str ( country )   +   \" is \"   +   str ( capital ))     1\n2\n3\n4\n5\n6\n7 the capital of australia is vienna\nthe capital of france is paris\nthe capital of norway is oslo\nthe capital of poland is warsaw\nthe capital of italy is rome\nthe capital of spain is madrid\nthe capital of germany is bonn   Loop over a NumPy array    If you\u2019re dealing with a 1D Numpy array, looping over all elements can be as simple as:  for x in my_array : ...    If you\u2019re dealing with a 2D Numpy array, it\u2019s more complicated.    A 2D array is built up of multiple 1D arrays.    To explicitly iterate over all separate elements of a multi-dimensional array, you\u2019ll need this syntax:  for x in np.nditer(my_array) : ...    Two Numpy arrays that you might recognize from the intro course are available in your Python session: np_height, a Numpy array containing the heights of Major League Baseball players, and np_baseball, a 2D Numpy array that contains both the heights (first column) and weights (second column) of those players.    Loop over a Pandas data frame   Iterating over a Pandas DataFrame is typically done with the iterrows() method.   Used in a for loop, every observation is iterated over and on every iteration the row label and actual row contents are available:  for lab, row in brics.iterrows() : ...  In this and the following exercises you will be working on the cars DataFrame.   It contains information on the cars per capita and whether people drive right or left for seven countries in the world.   1\n2\n3\n4 # Iterate over rows of cars  for   lab ,   row   in   cars . iterrows (): \n     print ( lab )   # row label \n     print ( row )   # row content     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35 US\ncars_per_cap              809\ncountry         United States\ndrives_right             True\nName: US, dtype: object\nAUS\ncars_per_cap          731\ncountry         Australia\ndrives_right        False\nName: AUS, dtype: object\nJAP\ncars_per_cap      588\ncountry         Japan\ndrives_right    False\nName: JAP, dtype: object\nIN\ncars_per_cap       18\ncountry         India\ndrives_right    False\nName: IN, dtype: object\nRU\ncars_per_cap       200\ncountry         Russia\ndrives_right      True\nName: RU, dtype: object\nMOR\ncars_per_cap         70\ncountry         Morocco\ndrives_right       True\nName: MOR, dtype: object\nEG\ncars_per_cap       45\ncountry         Egypt\ndrives_right     True\nName: EG, dtype: object   1\n2\n3 # Adapt the for-loop  for   lab ,   row   in   cars . iterrows ()   : \n     print ( str ( lab )   +   \": \"   +   str ( row [ 'cars_per_cap' ]))     Code a for-loop that adds the  COUNTRY  column with uppercase version of the  country  names in the  country  column.   1\n2\n3\n4\n5 for   lab ,   row   in   cars . iterrows (): \n     cars . loc [ lab ,   \"COUNTRY\" ]   =   ( row [ \"country\" ] . upper ())  # Print cars  print ( cars )    1\n2\n3\n4\n5\n6\n7\n8      cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT    Replace the for-loop with a one-liner that uses  .apply ( str.upper ) .   The call should give the same result: a column  COUNTRY should be added to cars, containing an uppercase version of the country names.   1\n2 cars [ \"COUNTRY\" ]   =   cars [ \"country\" ] . apply ( str . upper )  print ( cars )    1\n2\n3\n4\n5\n6\n7\n8      cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT",
            "title": "Looping"
        },
        {
            "location": "/Python for Data Science/#a-numpy-project-random-walk-monte-carlo-simulation",
            "text": "1\n2\n3\n4\n5 # Set the seed  np . random . seed ( 123 )  # Generate and print random float between 0 and 1  print ( np . random . rand ())    1 0.6964691855978616   1\n2\n3\n4\n5\n6\n7\n8 # Use randint() to simulate a dice (1,2,3,4,5,6)  print ( np . random . randint ( 1 ,   7 ))  print ( np . random . randint ( 1 ,   7 ))  print ( np . random . randint ( 1 ,   7 ))  print ( np . random . randint ( 1 ,   7 ))  print ( np . random . randint ( 1 ,   7 ))  print ( np . random . randint ( 1 ,   7 ))  print ( np . random . randint ( 1 ,   7 ))    1\n2\n3\n4\n5\n6\n7 5\n3\n2\n4\n3\n4\n2    Build a random walk.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 # Starting step  step   =   50  # Roll the dice  dice   =   np . random . randint ( 1 , 7 )  # Finish the control construct  '''  If dice is 1 or 2, you go one step down.  if dice is 3, 4 or 5, you go one step up.  Else, you throw the dice again. The number of eyes is the number of steps you go up.  '''  if   dice   <=   2   : \n     step   =   step   -   1  elif   dice   <=   5   : \n     step   =   step   +   1  else   : \n     step   =   step   +   np . random . randint ( 1 , 7 )  # Print out dice and step  print ( dice ),   print ( step )    1\n2\n3\n4 2\n49\n\n(None, None)    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 outcomes   =   []  for   x   in   range ( 10 )   : \n     coin   =   np . random . randint ( 0 ,   2 )  if   coin   ==   0   : \n     outcomes . append ( \"heads\" )  else   : \n     outcomes . append ( \"tails\" )  print ( outcomes )    1 ['tails']   1\n2\n3\n4\n5\n6\n7\n8 tails   =   [ 0 ]  for   x   in   range ( 10 )   : \n     coin   =   np . random . randint ( 0 ,   2 ) \n\n     tails . append ( coin )  print ( tails )    1 [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1]    Initialize  random_walk .    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 random_walk   =   [ 0 ]  # Complete the ___  for   x   in   range ( 100 )   : \n     # Set step: last element in random_walk \n     step   =   random_walk [ - 1 ] \n\n     # Roll the dice \n     dice   =   np . random . randint ( 1 , 7 ) \n\n     # Determine next step \n     if   dice   <=   2 : \n         step   =   max ( 0 ,   step   -   1 )   # make sure that 'step' never goes below 0 when you decrease it \n     elif   dice   <=   5 : \n         step   =   step   +   1 \n     else : \n         step   =   step   +   np . random . randint ( 1 , 7 ) \n\n     # append next_step to random_walk \n     random_walk . append ( step )  # Print random_walk  print ( random_walk )    1 [0, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 10, 12, 11, 12, 13, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 19, 21, 20, 19, 20, 21, 20, 22, 23, 24, 25, 26, 27, 28, 27, 28, 29, 34, 35, 34, 33, 32, 31, 32, 33, 34, 39, 40, 39, 40, 41, 42, 43, 44, 45, 44, 43, 44, 43, 49, 48, 49, 48, 49, 48, 49, 53, 57, 59, 61, 60, 61, 63, 62, 68, 69, 71, 72, 71, 72, 73, 74, 73, 74, 75, 76, 78, 77, 76, 77, 83, 88, 87, 86]    Plot  random_walk .   1\n2\n3\n4 plt . plot ( range ( 101 ),   random_walk )  # Show the plot  plt . show ()      Build a Monte Carlo as an alternative.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 # Initialize all_walks  all_walks   =   []  # Simulate random walk 10 times  for   i   in   range ( 10 )   : \n\n     # Code from before \n     random_walk   =   [ 0 ] \n     for   x   in   range ( 100 )   : \n         step   =   random_walk [ - 1 ] \n         dice   =   np . random . randint ( 1 , 7 ) \n\n         if   dice   <=   2 : \n             step   =   max ( 0 ,   step   -   1 ) \n         elif   dice   <=   5 : \n             step   =   step   +   1 \n         else : \n             step   =   step   +   np . random . randint ( 1 , 7 ) \n         random_walk . append ( step ) \n\n     # Append random_walk to all_walks \n     all_walks . append ( random_walk )   # Print all_walks  print ( all_walks )    1 [[0, 4, 5, 6, 7, 9, 8, 9, 8, 9, 8, 7, 13, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 20, 19, 18, 19, 18, 19, 18, 19, 20, 24, 25, 24, 30, 29, 28, 29, 28, 27, 28, 27, 31, 30, 31, 30, 31, 30, 31, 33, 32, 31, 30, 31, 30, 35, 36, 37, 36, 35, 36, 35, 36, 35, 40, 41, 40, 39, 38, 37, 38, 39, 43, 49, 50, 51, 52, 53, 52, 53, 55, 56, 57, 58, 57, 56, 57, 56, 57, 58, 59, 58, 59, 60, 61, 60, 59, 60, 61, 66], [0, 1, 2, 7, 6, 7, 6, 7, 8, 9, 10, 9, 15, 14, 15, 14, 13, 14, 18, 19, 20, 21, 22, 21, 20, 19, 18, 17, 18, 19, 20, 21, 22, 23, 22, 23, 24, 23, 24, 25, 28, 27, 28, 27, 28, 31, 32, 33, 34, 33, 32, 35, 36, 37, 38, 37, 36, 37, 40, 41, 46, 47, 46, 47, 46, 47, 46, 52, 51, 50, 51, 53, 52, 51, 50, 51, 52, 53, 54, 58, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 74, 73, 74, 75, 74, 80, 79, 80, 81, 80], [0, 0, 1, 0, 0, 6, 5, 4, 5, 6, 5, 4, 3, 2, 3, 9, 10, 13, 14, 20, 21, 22, 28, 27, 33, 32, 33, 34, 35, 34, 40, 41, 40, 41, 40, 41, 40, 41, 40, 41, 45, 46, 48, 47, 48, 47, 46, 47, 46, 47, 46, 50, 54, 53, 52, 51, 52, 53, 57, 58, 59, 63, 62, 61, 60, 61, 62, 64, 63, 62, 63, 64, 66, 69, 74, 75, 74, 75, 76, 77, 78, 79, 78, 79, 80, 86, 85, 90, 89, 93, 92, 96, 95, 98, 99, 98, 99, 105, 104, 103, 102], [0, 4, 3, 2, 3, 4, 3, 4, 5, 6, 7, 6, 5, 4, 5, 4, 3, 7, 8, 10, 14, 20, 19, 18, 19, 20, 21, 20, 21, 20, 21, 22, 21, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 35, 38, 39, 38, 37, 38, 39, 40, 39, 38, 37, 36, 37, 38, 39, 40, 41, 42, 43, 42, 43, 44, 46, 45, 46, 47, 50, 52, 53, 52, 51, 50, 49, 48, 49, 48, 49, 51, 52, 53, 52, 53, 52, 51, 52, 51, 50, 49, 50, 49, 48, 49, 50, 51, 53, 54], [0, 1, 0, 0, 1, 7, 6, 7, 8, 13, 12, 13, 12, 13, 14, 13, 14, 15, 21, 22, 23, 24, 23, 25, 26, 27, 28, 27, 28, 29, 30, 31, 30, 31, 30, 31, 32, 31, 32, 36, 37, 40, 41, 45, 46, 45, 46, 47, 46, 45, 50, 51, 52, 51, 50, 51, 52, 53, 52, 56, 55, 56, 57, 58, 59, 60, 61, 62, 61, 60, 59, 60, 61, 65, 66, 65, 66, 67, 66, 72, 73, 74, 75, 74, 75, 76, 79, 78, 79, 78, 77, 76, 77, 78, 80, 81, 82, 86, 87, 86, 85], [0, 1, 2, 1, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 4, 5, 4, 3, 2, 3, 4, 5, 6, 7, 12, 16, 15, 16, 15, 14, 13, 14, 13, 14, 15, 14, 18, 19, 18, 19, 18, 17, 18, 17, 21, 22, 23, 24, 25, 26, 25, 26, 27, 28, 29, 30, 29, 34, 35, 36, 35, 36, 35, 36, 37, 36, 37, 42, 43, 44, 43, 44, 45, 46, 45, 46, 45, 46, 47, 46, 45, 44, 45, 46, 45, 44, 43, 44, 48, 49, 50, 51, 52, 53, 52, 53, 54, 53, 54, 59, 60], [0, 0, 0, 1, 0, 0, 0, 4, 5, 6, 7, 6, 7, 8, 9, 10, 11, 10, 9, 12, 11, 10, 9, 8, 9, 15, 16, 15, 16, 17, 16, 15, 16, 17, 18, 17, 21, 22, 21, 23, 24, 23, 24, 25, 26, 27, 28, 29, 28, 27, 28, 29, 28, 29, 30, 29, 28, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 39, 40, 41, 42, 43, 44, 43, 42, 48, 49, 50, 49, 48, 47, 51, 52, 56, 55, 61, 62, 63, 67, 68, 67, 66, 67, 68, 69, 70, 69, 75, 76, 75], [0, 4, 5, 4, 5, 4, 10, 16, 17, 16, 17, 18, 19, 20, 21, 20, 23, 22, 24, 25, 31, 30, 31, 32, 31, 30, 31, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 43, 44, 45, 46, 45, 44, 43, 44, 43, 47, 46, 45, 46, 48, 49, 54, 53, 54, 55, 59, 58, 59, 60, 59, 58, 59, 60, 61, 60, 59, 58, 59, 58, 57, 58, 57, 56, 55, 56, 57, 56, 55, 54, 55, 56, 57, 56, 55, 56, 57, 58, 59, 58, 59, 58, 59, 60, 61, 62], [0, 1, 6, 11, 10, 11, 12, 11, 12, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 18, 19, 20, 21, 20, 19, 18, 20, 21, 22, 21, 20, 19, 20, 21, 22, 21, 20, 21, 24, 29, 32, 33, 34, 40, 41, 42, 43, 42, 44, 49, 50, 51, 52, 53, 54, 55, 54, 55, 56, 57, 58, 59, 61, 65, 66, 67, 68, 69, 73, 78, 77, 76, 75, 74, 77, 78, 79, 80, 79, 78, 81, 82, 81, 80, 79, 80, 81, 82, 83, 82, 83, 82, 83, 84, 83, 84, 85, 86, 87, 88, 89], [0, 1, 0, 0, 1, 2, 5, 6, 5, 4, 5, 6, 7, 12, 11, 10, 9, 8, 7, 6, 7, 6, 5, 6, 9, 8, 7, 8, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 26, 27, 28, 29, 30, 31, 30, 29, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 43, 42, 41, 40, 39, 40, 41, 42, 41, 40, 39, 38, 37, 36, 37, 41, 45, 46, 47, 46, 45, 46, 47, 48, 54, 55, 54, 53, 54, 53, 54, 53, 54, 55, 54, 55, 54, 53, 54, 55, 54, 55, 54]]    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 all_walks   =   []  for   i   in   range ( 10 )   : \n     random_walk   =   [ 0 ] \n     for   x   in   range ( 100 )   : \n         step   =   random_walk [ - 1 ] \n         dice   =   np . random . randint ( 1 , 7 ) \n         if   dice   <=   2 : \n             step   =   max ( 0 ,   step   -   1 ) \n         elif   dice   <=   5 : \n             step   =   step   +   1 \n         else : \n             step   =   step   +   np . random . randint ( 1 , 7 ) \n         random_walk . append ( step ) \n     all_walks . append ( random_walk )  # Convert all_walks to Numpy array: np_aw  # all_walks is a list of 10 lists  np_aw   =   np . array ( all_walks )  # np_aw is an array of 10 horizontal vectors (a matrix...)  # Plot np_aw and show  plt . plot ( np_aw )  plt . show ()      Now every row in  np_all_walks  represents the position after 1 throw (of dice) for the 10 random walks.   1\n2\n3\n4\n5\n6\n7\n8\n9 # Clear the figure  plt . clf ()  # Transpose np_aw: np_aw_t  np_aw_t   =   np . transpose ( np_aw )  # Plot np_aw_t and show  plt . plot ( np_aw_t )  plt . show ()      10 randoms walks from 0 to 100 (the dice only had 6 possibilities).    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32 import   matplotlib.pyplot   as   plt  import   numpy   as   np  np . random . seed ( 123 )  all_walks   =   []  # Simulate random walk 250 times  for   i   in   range ( 250 )   : \n     random_walk   =   [ 0 ] \n     for   x   in   range ( 100 )   : \n         step   =   random_walk [ - 1 ] \n         dice   =   np . random . randint ( 1 , 7 ) \n         if   dice   <=   2 : \n             step   =   max ( 0 ,   step   -   1 ) \n         elif   dice   <=   5 : \n             step   =   step   +   1 \n         else : \n             step   =   step   +   np . random . randint ( 1 , 7 ) \n\n         # Implement clumsiness \n         # if a random float is less or equal to 0.001 \n         # randint = integer \n         # rand = float \n         if   np . random . rand ()   <=   0.001   : \n             step   =   0 \n\n         random_walk . append ( step ) \n     all_walks . append ( random_walk )  # Create and plot np_aw_t  np_aw_t   =   np . transpose ( np . array ( all_walks ))  plt . plot ( np_aw_t )  plt . show ()      What are the odds that you\u2019ll reach 60 steps high on the Empire State Building?   Basically, you want to know about the end points of all the random walks you\u2019ve simulated.   These end points have a certain distribution that you can visualize with a histogram.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 import   matplotlib.pyplot   as   plt  import   numpy   as   np  np . random . seed ( 123 )  all_walks   =   []  # Simulate random walk 1000 times  for   i   in   range ( 1000 )   : \n     random_walk   =   [ 0 ] \n     for   x   in   range ( 100 )   : \n         step   =   random_walk [ - 1 ] \n         dice   =   np . random . randint ( 1 , 7 ) \n         if   dice   <=   2 : \n             step   =   max ( 0 ,   step   -   1 ) \n         elif   dice   <=   5 : \n             step   =   step   +   1 \n         else : \n             step   =   step   +   np . random . randint ( 1 , 7 ) \n         if   np . random . rand ()   <=   0.001   : \n             step   =   0 \n         random_walk . append ( step ) \n     all_walks . append ( random_walk )  # Create and plot np_aw_t  np_aw_t   =   np . transpose ( np . array ( all_walks ))  # Select last row from np_aw_t: ends  ends   =   np_aw_t [ - 1 ]  # Plot histogram of ends, display plot  plt . hist ( ends )  plt . show ()      The histogram of the previous exercise was created from a Numpy array  ends , that contains 1,000 integers.   Each integer represents the end point of a random walk.   To calculate the change that this end point is higher than or equal to 60, you can count the number of integers in ends that are greater than or equal to 60 and divide that number by 1000, the total number of simulations.  Well then, what\u2019s the estimated chance that you\u2019ll reach 60 steps high if you play this Empire State Building game?   The  ends  array is everything you need.   1\n2\n3 sum ( ends   >=   60 )   /   1000  # 78.8%    1 0.78800000000000003",
            "title": "A NumPy project: random walk &amp; Monte Carlo simulation"
        },
        {
            "location": "/Tidy_Data_in_Python/",
            "text": "CONTENT\n\n\n1, Loading\n\n\n2, Tidy vs. Messy Data\n\n\n3, Messy data\n\n\n4, Using melt to Tidy Data\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3.\n\n\n\n\nIt is often said that data scientists spend only 20% of their time analyzing their data, and 80% of time cleaning it. Indeed, maintaining a tidy, easy-to-use dataset is crucial in our age of big data. In the paper Tidy Data, veteran statistician Hadley Wickham gives definitions of tidy and messy data so that all data scientists can keep their work organized. \n\n\n1, Loading\n\u00b6\n\n\nFirst, load all the datasets.\n\n\n1\n2\n3\n4\n5\n6\nimport\n \npandas\n \nas\n \npd\n\n\n\nmessy\n \n=\n \npd\n.\nread_csv\n(\n'messy.csv'\n)\n\n\ndf1\n \n=\n \npd\n.\nread_csv\n(\n'df1.csv'\n)\n\n\ndf2\n \n=\n \npd\n.\nread_csv\n(\n'df2.csv'\n)\n\n\neyes\n \n=\n \npd\n.\nread_csv\n(\n'eyes.csv'\n)\n\n\n\n\n\n\n\n2, Tidy vs. Messy Data\n\u00b6\n\n\nWhat exactly marks the difference between tidy data and messy data? It is not only how organized and intuitive the datasets look to our human eyes, but also how easily and efficiently they can be processed by computers. In his seminal paper \nTidy Data\n, Hadley Wickham proposed three standards for tidy data:\n\n\n\n\nEach variable forms a column\n\n\nEach observation forms a row\n\n\nEach type of observation forms a unit.\n\n\n\n\n3, Messy data\n\u00b6\n\n\nTo get started, execute \nmessy\n. This dataset, which appears in Wickham\u2019s paper, shows the number of people who choose either of two treatments in a hospital. Observe its structure in comparison with Wickham\u2019s rules. This dataset is \nmessy\n because it violates rule 2: it combines Treatment A and Treatment B, two distinct observations, in a single row.\n\n\n1\nprint\n(\nmessy\n.\nhead\n())\n\n\n\n\n\n\n\n1\n2\n3\n4\n  First     Last  Treatment A  Treatment B\n0  John    Smith          NaN            2\n1  Jane      Doe         16.0           11\n2  Mary  Johnson          3.0            1\n\n\n\n\n\n\nNow let\u2019s look at two more datasets. Execute \ndf1\n and \ndf2\n in the shell to check out two other preloaded datasets. The former shows the type and number of pets owned by three co-workers, and the latter shows the average BMI in three countries over several years. \n\n\n1\nprint\n(\ndf1\n.\nhead\n())\n\n\n\n\n\n\n\n1\n2\n3\n4\n      owner  dogs  cats  birds\n0     Jason     2     4      3\n1      Lisa     7    10      9\n2  Terrence     8     5      1\n\n\n\n\n\n\n1\nprint\n(\ndf2\n.\nhead\n())\n\n\n\n\n\n\n\n1\n2\n3\n4\n       Country     Y1980     Y1981     Y1982     Y1983\n0  Afghanistan  21.48678  21.46552  21.45145  21.43822\n1      Albania  25.22533  25.23981  25.25636  25.27176\n2      Algeria  22.25703  22.34745  22.43647  22.52105\n\n\n\n\n\n\ndf2\n is messy because it violates rule 2.\n\n\n4, Using \nmelt\n to Tidy Data\n\u00b6\n\n\nIts basic syntax is \npd.melt(df, id_vars = lst)\n, where \ndf\n is the name of the data frame we\u2019re dealing with and \nlst\n is a list of all the columns that we want to keep as columns. \n\n\n1\n2\n3\n4\n5\n# Melt df2 into a new data frame: df2_melted\n\n\ndf2_melted\n \n=\n \npd\n.\nmelt\n(\ndf2\n,\n \nid_vars\n \n=\n \n'Country'\n)\n\n\n\n# print df2_melted\n\n\nprint\n(\ndf2_melted\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n        Country variable     value\n0   Afghanistan    Y1980  21.48678\n1       Albania    Y1980  25.22533\n2       Algeria    Y1980  22.25703\n3   Afghanistan    Y1981  21.46552\n4       Albania    Y1981  25.23981\n5       Algeria    Y1981  22.34745\n6   Afghanistan    Y1982  21.45145\n7       Albania    Y1982  25.25636\n8       Algeria    Y1982  22.43647\n9   Afghanistan    Y1983  21.43822\n10      Albania    Y1983  25.27176\n11      Algeria    Y1983  22.52105\n\n\n\n\n\n\nRenaming Columns\n\n\nChange the column names with pandas\u2019 rename function. Its syntax is \ndf.rename(columns = d, inplace = False)\n, where \nd\n is a dictionary where the keys are the columns you want to change, and the values are the new names for these columns.\n\n\n1\n2\n3\n4\n5\n# Rename the columns of df2_melted: df2_tidy\n\n\ndf2_tidy\n \n=\n \ndf2_melted\n.\nrename\n(\ncolumns\n \n=\n \n{\n'variable'\n:\n \n'Year'\n,\n \n'value'\n:\n \n'Income'\n})\n\n\n\n# Print out df2_tidy\n\n\nprint\n(\ndf2_tidy\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n        Country   Year    Income\n0   Afghanistan  Y1980  21.48678\n1       Albania  Y1980  25.22533\n2       Algeria  Y1980  22.25703\n3   Afghanistan  Y1981  21.46552\n4       Albania  Y1981  25.23981\n5       Algeria  Y1981  22.34745\n6   Afghanistan  Y1982  21.45145\n7       Albania  Y1982  25.25636\n8       Algeria  Y1982  22.43647\n9   Afghanistan  Y1983  21.43822\n10      Albania  Y1983  25.27176\n11      Algeria  Y1983  22.52105\n\n\n\n\n\n\nMore messiness\n\n\nExecute \neyes\n in the shell. This dataset is about the eye colors of three women and whether or not they wear glasses. What problem does this dataset have?\n\n\n1\nprint\n(\neyes\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n        Name  Brown  Blue  Black Wear_Glasses\n0     Esther      0     1      0        False\n1  Elizabeth      1     0      0        False\n2   Michelle      0     0      1         True\n\n\n\n\n\n\nIt violates rule 1 of tidy data: there are several columns that represent the same variable.\n\n\nDeal with it\n\n\nUse \nmelt\n.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Melt the Black, Blue, and Brown columns of eyes: eyes_melted\n\n\neyes_melted\n \n=\n \npd\n.\nmelt\n(\neyes\n,\n \nid_vars\n \n=\n \n[\n'Name'\n,\n \n'Wear_Glasses'\n])\n\n\n\n# Rename the variable column and save to eyes_renamed\n\n\neyes_renamed\n \n=\n \neyes_melted\n.\nrename\n(\ncolumns\n \n=\n \n{\n'variable'\n:\n \n'Eye_Color'\n})\n\n\n\n# print out eyes_renamed\n\n\nprint\n(\neyes_renamed\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n        Name Wear_Glasses Eye_Color  value\n0     Esther        False     Brown      0\n1  Elizabeth        False     Brown      1\n2   Michelle         True     Brown      0\n3     Esther        False      Blue      1\n4  Elizabeth        False      Blue      0\n5   Michelle         True      Blue      0\n6     Esther        False     Black      0\n7  Elizabeth        False     Black      0\n8   Michelle         True     Black      1\n\n\n\n\n\n\nFurther Cleaning\n\n\nGet rid of all rows whose value in the value column is 0.\n\n\ndf1 = df2[df2.column == value]\n\n\nwhere \ncolumn\n is the name of the column we are examining and \nvalue\n is the value we want to keep. This step will give us one row for each girl that tells us only her correct eye color. Now the \nvalue\n column is no longer necessary, so let\u2019s delete it:\n\n\ndf.drop(lst, axis = 1)\n\n\nHere \nlst\n is a list of the columns we want to get rid of, and \naxis = 1\n specifies that we want to drop columns instead of rows.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Filter eyes_ranamed and save to eyes_filtered \n\n\neyes_filtered\n \n=\n \neyes_renamed\n[\neyes_renamed\n.\nvalue\n \n==\n \n1\n]\n\n\n\n# Delete the `value` column and save to eyes_tidy\n\n\neyes_tidy\n \n=\n \neyes_filtered\n.\ndrop\n([\n'value'\n],\n \naxis\n \n=\n \n1\n)\n\n\n\n# print eyes_tidy\n\n\nprint\n(\neyes_tidy\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n        Name Wear_Glasses Eye_Color\n1  Elizabeth        False     Brown\n3     Esther        False      Blue\n8   Michelle         True     Black",
            "title": "Tidy Data in Python"
        },
        {
            "location": "/Tidy_Data_in_Python/#2-tidy-vs-messy-data",
            "text": "What exactly marks the difference between tidy data and messy data? It is not only how organized and intuitive the datasets look to our human eyes, but also how easily and efficiently they can be processed by computers. In his seminal paper  Tidy Data , Hadley Wickham proposed three standards for tidy data:   Each variable forms a column  Each observation forms a row  Each type of observation forms a unit.",
            "title": "2, Tidy vs. Messy Data"
        },
        {
            "location": "/Tidy_Data_in_Python/#3-messy-data",
            "text": "To get started, execute  messy . This dataset, which appears in Wickham\u2019s paper, shows the number of people who choose either of two treatments in a hospital. Observe its structure in comparison with Wickham\u2019s rules. This dataset is  messy  because it violates rule 2: it combines Treatment A and Treatment B, two distinct observations, in a single row.  1 print ( messy . head ())    1\n2\n3\n4   First     Last  Treatment A  Treatment B\n0  John    Smith          NaN            2\n1  Jane      Doe         16.0           11\n2  Mary  Johnson          3.0            1   Now let\u2019s look at two more datasets. Execute  df1  and  df2  in the shell to check out two other preloaded datasets. The former shows the type and number of pets owned by three co-workers, and the latter shows the average BMI in three countries over several years.   1 print ( df1 . head ())    1\n2\n3\n4       owner  dogs  cats  birds\n0     Jason     2     4      3\n1      Lisa     7    10      9\n2  Terrence     8     5      1   1 print ( df2 . head ())    1\n2\n3\n4        Country     Y1980     Y1981     Y1982     Y1983\n0  Afghanistan  21.48678  21.46552  21.45145  21.43822\n1      Albania  25.22533  25.23981  25.25636  25.27176\n2      Algeria  22.25703  22.34745  22.43647  22.52105   df2  is messy because it violates rule 2.",
            "title": "3, Messy data"
        },
        {
            "location": "/Tidy_Data_in_Python/#4-using-melt-to-tidy-data",
            "text": "Its basic syntax is  pd.melt(df, id_vars = lst) , where  df  is the name of the data frame we\u2019re dealing with and  lst  is a list of all the columns that we want to keep as columns.   1\n2\n3\n4\n5 # Melt df2 into a new data frame: df2_melted  df2_melted   =   pd . melt ( df2 ,   id_vars   =   'Country' )  # print df2_melted  print ( df2_melted )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13         Country variable     value\n0   Afghanistan    Y1980  21.48678\n1       Albania    Y1980  25.22533\n2       Algeria    Y1980  22.25703\n3   Afghanistan    Y1981  21.46552\n4       Albania    Y1981  25.23981\n5       Algeria    Y1981  22.34745\n6   Afghanistan    Y1982  21.45145\n7       Albania    Y1982  25.25636\n8       Algeria    Y1982  22.43647\n9   Afghanistan    Y1983  21.43822\n10      Albania    Y1983  25.27176\n11      Algeria    Y1983  22.52105   Renaming Columns  Change the column names with pandas\u2019 rename function. Its syntax is  df.rename(columns = d, inplace = False) , where  d  is a dictionary where the keys are the columns you want to change, and the values are the new names for these columns.  1\n2\n3\n4\n5 # Rename the columns of df2_melted: df2_tidy  df2_tidy   =   df2_melted . rename ( columns   =   { 'variable' :   'Year' ,   'value' :   'Income' })  # Print out df2_tidy  print ( df2_tidy )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13         Country   Year    Income\n0   Afghanistan  Y1980  21.48678\n1       Albania  Y1980  25.22533\n2       Algeria  Y1980  22.25703\n3   Afghanistan  Y1981  21.46552\n4       Albania  Y1981  25.23981\n5       Algeria  Y1981  22.34745\n6   Afghanistan  Y1982  21.45145\n7       Albania  Y1982  25.25636\n8       Algeria  Y1982  22.43647\n9   Afghanistan  Y1983  21.43822\n10      Albania  Y1983  25.27176\n11      Algeria  Y1983  22.52105   More messiness  Execute  eyes  in the shell. This dataset is about the eye colors of three women and whether or not they wear glasses. What problem does this dataset have?  1 print ( eyes )    1\n2\n3\n4         Name  Brown  Blue  Black Wear_Glasses\n0     Esther      0     1      0        False\n1  Elizabeth      1     0      0        False\n2   Michelle      0     0      1         True   It violates rule 1 of tidy data: there are several columns that represent the same variable.  Deal with it  Use  melt .  1\n2\n3\n4\n5\n6\n7\n8 # Melt the Black, Blue, and Brown columns of eyes: eyes_melted  eyes_melted   =   pd . melt ( eyes ,   id_vars   =   [ 'Name' ,   'Wear_Glasses' ])  # Rename the variable column and save to eyes_renamed  eyes_renamed   =   eyes_melted . rename ( columns   =   { 'variable' :   'Eye_Color' })  # print out eyes_renamed  print ( eyes_renamed )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10         Name Wear_Glasses Eye_Color  value\n0     Esther        False     Brown      0\n1  Elizabeth        False     Brown      1\n2   Michelle         True     Brown      0\n3     Esther        False      Blue      1\n4  Elizabeth        False      Blue      0\n5   Michelle         True      Blue      0\n6     Esther        False     Black      0\n7  Elizabeth        False     Black      0\n8   Michelle         True     Black      1   Further Cleaning  Get rid of all rows whose value in the value column is 0.  df1 = df2[df2.column == value]  where  column  is the name of the column we are examining and  value  is the value we want to keep. This step will give us one row for each girl that tells us only her correct eye color. Now the  value  column is no longer necessary, so let\u2019s delete it:  df.drop(lst, axis = 1)  Here  lst  is a list of the columns we want to get rid of, and  axis = 1  specifies that we want to drop columns instead of rows.  1\n2\n3\n4\n5\n6\n7\n8 # Filter eyes_ranamed and save to eyes_filtered   eyes_filtered   =   eyes_renamed [ eyes_renamed . value   ==   1 ]  # Delete the `value` column and save to eyes_tidy  eyes_tidy   =   eyes_filtered . drop ([ 'value' ],   axis   =   1 )  # print eyes_tidy  print ( eyes_tidy )    1\n2\n3\n4         Name Wear_Glasses Eye_Color\n1  Elizabeth        False     Brown\n3     Esther        False      Blue\n8   Michelle         True     Black",
            "title": "4, Using melt to Tidy Data"
        },
        {
            "location": "/Lists/",
            "text": "CONTENT\n\n\n1, Notes\n\n\nIterable\n\n\nLists Versus tuples\n\n\nLists Versus sets\n\n\nFrozensets\n\n\n\n\n\n\nLists Versus dictionaries\n\n\nHashable or Not\n\n\n\n\n\n\n2, Snippets\n\n\nSelect an element from a list\n\n\nSelect the last element\n\n\nOut of range error\n\n\nSlice\n\n\nRandom\n\n\nConvert a list to a string with join()\n\n\nConvert a list to a tuple with tuple()\n\n\nConvert a list to a set with set()\n\n\nConvert a list to a dictionary with zip()\n\n\nSize of your list with len()\n\n\nappend() and extend()\n\n\nConcatenate lists\n\n\nSort a list\n\n\nCopy a List (3 ways):\n\n\nList comprehension\n\n\nDictionary comprehension also\u2026\n\n\nCounting the occurrences of one item in a list\n\n\nCounting all items in a list with count()\n\n\nCounting all items in a list with Counter() from the collections library\n\n\nSplit A Python List Into Evenly Sized Chunks\n\n\nLoop over a list\n\n\nCreate flat lists out of lists\n\n\nGet an intersection of two Python lists\n\n\nRemove duplicates from a list\n\n\nCreate Empty NumPy Arrays\n\n\n\n\n\n\nDo math with lists (wt avg)\n\n\nDo math with lists (quantiles)\n\n\nDo math with lists (sum)\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and snippets. Python 3.\n\n\n\n\n1, Notes\n\u00b6\n\n\nlist_zoo = ['bear', 'lion', 'panda', 'zebra']\n\n\n\n\nLists in Python store ordered collections of items or objects, we can say that they are sequence types.\n\n\n\n\nIterable\n\u00b6\n\n\n\n\nThe program can iterate over them.\n\n\nLists, strings, tuples, and sets are called \u201citerables\u201d.\n\n\n\n\nLists Versus tuples\n\u00b6\n\n\ntup_course = ('physics', 'chemistry', 1997, 2000)\n\n\n\n\nYou can\u2019t add elements to a tuple. There\u2019s no \nappend()\n or \nextend()\n method for tuples,\n\n\nYou can\u2019t remove elements from a tuple. Tuples have no \nremove()\n or \npop()\n method,\n\n\nYou can find elements in a tuple since this doesn\u2019t change the tuple.\n\n\nYou can also use the in operator to check if an element exists in the tuple.\n\n\nIf you\u2019re defining a constant set of values, use a tuple instead of a list. It will be faster and safer.\n\n\n\n\nLists Versus sets\n\u00b6\n\n\nset_code = set{\"Perl\", \"Python\", \"Java\"}\n\n\n\n\nJust like dictionaries, sets have no order in their collection of items. Not like lists.\n\n\nSet requires the items contained in it to be hashable, lists store non-hashable items.\n\n\nSets require your items to be unique and immutable. Duplicates are not allowed in sets, while lists allow for duplicates and are mutable.\n\n\nUse sets when you have an unordered set of UNIQUE, immutable values that are hashable.\n\n\n\n\nFrozensets\n\u00b6\n\n\nset_cities = frozenset{\"Frankfurt\", \"Basel\",\"Freiburg\"}\n\n\n\n\nFrozensets are like sets except that they cannot be changed, i.e. they are immutable.\n\n\n\n\nLists Versus dictionaries\n\u00b6\n\n\ndict_kid = {'Name': 'Zara', 'Age': 7, 'Class': 'First'\n\n\n\n\nA list stores an ordered collection of items, so it keeps some order. Dictionaries don\u2019t have any order.\n\n\nDictionaries are known to associate each key with a value, while lists just contain values.\n\n\nUse a dictionary when you have an unordered set of unique keys that map to values.\n\n\n\n\nHashable or Not\n\u00b6\n\n\n\n\nHashable: float, integer, tuple, string.\n\n\nNot: dictionary, set, list.\n\n\n\n\n2, Snippets\n\u00b6\n\n\nSelect an element from a list\n\u00b6\n\n\n1\n2\n3\n# These list elements are all of the same type\n\n\nzoo\n \n=\n \n[\n'bear'\n,\n \n'lion'\n,\n \n'panda'\n,\n \n'zebra'\n]\n\n\nprint\n(\nzoo\n)\n\n\n\n\n\n\n\n1\n['bear', 'lion', 'panda', 'zebra']\n\n\n\n\n\n\n1\n2\n3\n# But these list elements are not\n\n\nbiggerZoo\n \n=\n \n[\n'bear'\n,\n \n'lion'\n,\n \n'panda'\n,\n \n'zebra'\n,\n \n[\n'chimpanzees'\n,\n \n'gorillas'\n,\n \n'orangutans'\n,\n \n'gibbons'\n]]\n\n\nprint\n(\nbiggerZoo\n)\n\n\n\n\n\n\n\n1\n['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Select the first list element\n\n\noneZooAnimal\n \n=\n \nbiggerZoo\n[\n0\n]\n\n\n\n# Print oneZooAnimal\n\n\nprint\n(\noneZooAnimal\n)\n\n\nprint\n(\nbiggerZoo\n[\n0\n])\n\n\n\n\n\n\n\n1\n2\nbear\nbear\n\n\n\n\n\n\nSelect the last element\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n# Pass -1 to the index operator on `biggerZoo`\n\n\nmonkeys\n \n=\n \nbiggerZoo\n[\n-\n1\n]\n\n\nprint\n(\nmonkeys\n)\n\n\n\n# Pass -2 to the index operator on `biggerZoo`\n\n\nzebra\n \n=\n \nbiggerZoo\n[\n-\n2\n]\n\n\nprint\n(\nzebra\n)\n\n\n\n\n\n\n\n1\n2\n['chimpanzees', 'gorillas', 'orangutans', 'gibbons']\n\n\nzebra\n\n\n\n\n\n\n\nOut of range error\n\u00b6\n\n\n1\n2\n# Run this code to trigger an \"Index Out Of Range\" Error\n\n\nprint\n(\n\"print(biggerZoo[6])\"\n)\n\n\n\n\n\n\n\n1\nprint(biggerZoo[6])\n\n\n\n\n\n\nSlice\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n# Print all\n\n\nprint\n(\nbiggerZoo\n)\n\n\n\n# Print a[start: ]\n\n\nsomeZooAnimals\n \n=\n \nbiggerZoo\n[\n2\n:\n \n]\n\n\n\n# Print to see what you exactly select from `biggerZoo`\n\n\nprint\n(\nsomeZooAnimals\n)\n\n\n\n# Print a[ :end]\n\n\notherZooAnimals\n \n=\n \nbiggerZoo\n[\n \n:\n2\n]\n\n\n\n# Print to see what you're getting back\n\n\nprint\n(\notherZooAnimals\n)\n\n\n\n# Print a[start:end]\n\n\nprint\n(\nbiggerZoo\n[\n2\n:\n4\n])\n\n\n\n# Print a[start:end:step]\n\n\nprint\n(\nbiggerZoo\n[\n2\n::\n4\n])\n\n\nprint\n(\nbiggerZoo\n[\n2\n::\n2\n])\n\n\nprint\n(\nbiggerZoo\n[\n2\n::\n1\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n\n\n['panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n\n\n['bear', 'lion']\n\n\n['panda', 'zebra']\n\n\n['panda']\n\n\n['panda', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n\n\n['panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n\n\n\n\n\n\n\nRandom\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n# Import `choice` from the `random` library\n\n\nfrom\n \nrandom\n \nimport\n \nchoice\n\n\n\n# Construct your `list` variable with a list of the first 4 letters of the alphabet\n\n\nlist1\n \n=\n \n[\n'a'\n,\n'b'\n,\n'c'\n,\n'd'\n]\n\n\n\n# Print your random 'list' element\n\n\nprint\n(\nchoice\n(\nlist1\n))\n\n\nprint\n(\nchoice\n(\nlist1\n))\n\n\n\n# Import `randrange` from the `random` library\n\n\nfrom\n \nrandom\n \nimport\n \nrandrange\n\n\n\n# Construct your `randomLetters` variable with a list of the first 4 letters of the alphabet\n\n\nrandomLetters\n \n=\n \n[\n'e'\n,\n'f'\n,\n \n'g'\n,\n \n'h'\n]\n\n\n\n# Select a random index from 'randomLetters`\n\n\nrandomIndex\n \n=\n \nrandrange\n(\n0\n,\nlen\n(\nrandomLetters\n))\n\n\n\n# Print your random element from `random`\n\n\nprint\n(\nrandomLetters\n[\nrandomIndex\n])\n\n\n\n\n\n\n\n1\n2\n3\nc\nc\ng\n\n\n\n\n\n\nConvert a list to a string with \njoin()\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# List of Strings to a String\n\n\nlistOfStrings\n \n=\n \n[\n'One'\n,\n \n'Two'\n,\n \n'Three'\n]\n\n\nstrOfStrings\n \n=\n \n''\n.\njoin\n(\nlistOfStrings\n)\n\n\nprint\n(\nstrOfStrings\n)\n\n\n\n# List Of Integers to a String\n\n\nlistOfNumbers\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\nstrOfNumbers\n \n=\n \n''\n.\njoin\n(\nstr\n(\nn\n)\n \nfor\n \nn\n \nin\n \nlistOfNumbers\n)\n\n\nprint\n(\nstrOfNumbers\n)\n\n\n\n\n\n\n\n1\n2\nOneTwoThree\n123\n\n\n\n\n\n\nConvert a list to a tuple with \ntuple()\n\u00b6\n\n\n1\n2\n3\nlistOfStrings\n \n=\n \n[\n'One'\n,\n \n'Two'\n,\n \n'Three'\n]\n\n\ntupOfStrings\n \n=\n \ntuple\n(\nlistOfStrings\n)\n\n\nprint\n(\ntupOfStrings\n)\n\n\n\n\n\n\n\n1\n('One', 'Two', 'Three')\n\n\n\n\n\n\nConvert a list to a set with \nset()\n\u00b6\n\n\n1\n2\n3\nlistOfStrings\n \n=\n \n[\n'One'\n,\n \n'Two'\n,\n \n'Three'\n]\n\n\nsetOfStrings\n \n=\n \nset\n(\nlistOfStrings\n)\n\n\nprint\n(\nsetOfStrings\n)\n\n\n\n\n\n\n\n1\n{'One', 'Three', 'Two'}\n\n\n\n\n\n\nConvert a list to a dictionary with \nzip()\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nhelloWorld\n \n=\n \n[\n'hello'\n,\n'world'\n,\n'1'\n,\n'2'\n]\n\n\n\n# Convert to a dictionary\n\n\n# 1 will be interpreted as a key and 2 as a value\n\n\nhelloWorldDictionary\n \n=\n \ndict\n(\nzip\n(\nhelloWorld\n[\n0\n::\n2\n],\n \nhelloWorld\n[\n1\n::\n2\n]))\n\n\n\n# Print out the result\n\n\nprint\n(\nhelloWorldDictionary\n)\n\n\n\na\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n]\n\n\n\n# Create a list iterator object\n\n\ni\n \n=\n \niter\n(\na\n)\n\n\n\n# Zip and create a dictionary\n\n\nprint\n(\ndict\n(\nzip\n(\ni\n,\n \ni\n)))\n\n\n\n\n\n\n\n1\n2\n{'hello': 'world', '1': '2'}\n{1: 2, 3: 4}\n\n\n\n\n\n\nSize of your list with \nlen()\n\u00b6\n\n\n1\n2\n3\n4\nprint\n(\nbiggerZoo\n)\n\n\n\n# Pass `justAList` to `len()`\n\n\nprint\n(\nlen\n(\nbiggerZoo\n))\n\n\n\n\n\n\n\n1\n2\n['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n\n\n5\n\n\n\n\n\n\n\nappend()\n and \nextend()\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n# This is your list\n\n\nlist1\n \n=\n \n[\n5\n,\n \n6\n,\n \n7\n,\n \n8\n,\n \n9\n]\n\n\nprint\n(\nlist1\n)\n\n\n\n# Check whether it's iterable\n\n\nprint\n(\nlist1\n.\n__iter__\n)\n\n\n\nshortList\n \n=\n \n[\n5\n,\n \n6\n,\n \n7\n,\n \n8\n,\n \n9\n]\n\n\nprint\n(\nshortList\n)\n\n\n\n# Append [4,5] to `shortList`\n\n\nshortList\n.\nappend\n([\n4\n,\n \n5\n])\n\n\n\n# Use the print() method to show shortList\n\n\nprint\n(\nshortList\n)\n\n\n\nlongerList\n \n=\n \n[\n5\n,\n \n6\n,\n \n7\n,\n \n8\n,\n \n9\n]\n\n\nprint\n(\nlongerList\n)\n\n\n\n# Extend `longerList` with [4,5]\n\n\nlongerList\n.\nextend\n([\n4\n,\n \n5\n])\n\n\n\n# Use the print() method to see longerList\n\n\nprint\n(\nlongerList\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n[5, 6, 7, 8, 9]\n\n\n<method-wrapper '__iter__' of list object at 0x7ff7a7d2dd88>\n\n\n[5, 6, 7, 8, 9]\n\n\n[5, 6, 7, 8, 9, [4, 5]]\n\n\n[5, 6, 7, 8, 9]\n\n\n[5, 6, 7, 8, 9, 4, 5]\n\n\n\n\n\n\n\nConcatenate lists\n\u00b6\n\n\n1\n2\n3\n4\n5\nshortList\n \n=\n \n[\n5\n,\n \n6\n,\n \n7\n,\n \n8\n,\n \n9\n]\n\n\nprint\n(\nshortList\n)\n\n\n\n# Concatenate `shortList` with `[4,5]`\n\n\nplusList\n \n=\n \nshortList\n \n+\n \n[\n4\n,\n5\n]\n\n\n\n\n\n\n\n1\n[5, 6, 7, 8, 9]\n\n\n\n\n\n\nSort a list\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nzoo\n \n=\n \n[\n'zebra'\n,\n \n'bear'\n,\n \n'lion'\n,\n \n'panda'\n]\n\n\nprint\n(\nzoo\n)\n\n\n\n# Use sort() on the rooms list\n\n\nzoo\n.\nsort\n()\n \n# lists only\n\n\nprint\n(\nzoo\n)\n\n\n\nzoo\n \n=\n \n[\n'zebra'\n,\n \n'bear'\n,\n \n'lion'\n,\n \n'panda'\n]\n\n\nprint\n(\nzoo\n)\n\n\n\n# Now use the sorted() function on orders\n\n\nprint\n(\nsorted\n(\nzoo\n))\n \n# lists, strings, sets, dictionaries\n\n\n\n\n\n\n\n1\n2\n3\n4\n['zebra', 'bear', 'lion', 'panda']\n\n\n['bear', 'lion', 'panda', 'zebra']\n\n\n['zebra', 'bear', 'lion', 'panda']\n\n\n['bear', 'lion', 'panda', 'zebra']\n\n\n\n\n\n\n\nCopy a List (3 ways):\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nzoo\n \n=\n \n[\n'zebra'\n,\n \n'bear'\n,\n \n'lion'\n,\n \n'panda'\n]\n\n\nprint\n(\nzoo\n)\n\n\n\n# Copy the grocery list by slicing and store it in the `newGroceries` variable\n\n\nnewZoo\n \n=\n \nzoo\n[:]\n\n\nprint\n(\nnewZoo\n)\n\n\n\n# Import the copy library as c\n\n\nimport\n \ncopy\n \nas\n \nc\n\n\n\n# Create a `groceriesForFamily` variable and assign the copied grocery list to it\n\n\nzooForFamily\n \n=\n  \nc\n.\ncopy\n(\nzoo\n)\n\n\nprint\n(\nzooForFamily\n)\n\n\n\n# Use `deepcopy()` and assign the copied list to a `groceriesForKids` variable\n\n\nzooForKids\n=\n \nc\n.\ndeepcopy\n(\nzoo\n)\n\n\nprint\n(\nzooForKids\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n['zebra', 'bear', 'lion', 'panda']\n\n\n['zebra', 'bear', 'lion', 'panda']\n\n\n['zebra', 'bear', 'lion', 'panda']\n\n\n['zebra', 'bear', 'lion', 'panda']\n\n\n\n\n\n\n\nWhen you use the \u2018simple\u2019 copy methods, your original lists will be modified. However, if you use the \ndeepcopy()\n method, it will be prevented.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n# This is your list\n\n\nobjectList\n \n=\n \n[\n'a'\n,\n'b'\n,[\n'ab'\n,\n'ba'\n]]\n\n\nprint\n(\nobjectList\n)\n\n\n\n# Copy the `objectList`\n\n\ncopiedList\n \n=\n \nobjectList\n[:]\n\n\n\n# Change the first list element of `copiedList`\n\n\ncopiedList\n[\n0\n]\n \n=\n \n'c'\n\n\n\n# Go to the third element (the nested list) and change the second element\n\n\ncopiedList\n[\n2\n][\n1\n]\n \n=\n \n'd'\n\n\n\n# Print out the original list to see what happened to it\n\n\nprint\n(\nobjectList\n);\n \nprint\n(\ncopiedList\n)\n\n\nprint\n(\n\"Both lists are equal.\"\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n['a', 'b', ['ab', 'ba']]\n\n\n['a', 'b', ['ab', 'd']]\n\n\n['c', 'b', ['ab', 'd']]\n\n\nBoth lists are equal.\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# 2, this is your list\n\n\nobjectList\n \n=\n \n[\n'a'\n,\n'b'\n,[\n'ab'\n,\n'ba'\n]]\n\n\nprint\n(\nobjectList\n)\n\n\n\n# Copy the `objectList`\n\n\nimport\n \ncopy\n \nas\n \nc\n\n\ncopiedList2\n \n=\n \nc\n.\ndeepcopy\n(\nobjectList\n)\n\n\n\n# Change the first list element of `copiedList`\n\n\ncopiedList2\n[\n0\n]\n \n=\n \n'c'\n\n\n\n# Go to the third element (the nested list) and change the second element\n\n\ncopiedList2\n[\n2\n][\n1\n]\n \n=\n \n'd'\n\n\n\n# Print out the original list to see what happened to it\n\n\nprint\n(\nobjectList\n);\n \nprint\n(\ncopiedList2\n)\n\n\nprint\n(\n\"Both lists are different.\"\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n['a', 'b', ['ab', 'ba']]\n\n\n['a', 'b', ['ab', 'ba']]\n\n\n['c', 'b', ['ab', 'd']]\n\n\nBoth lists are different.\n\n\n\n\n\n\n\nList comprehension\n\u00b6\n\n\n1\n2\n3\n4\nprint\n([\nx\n \nfor\n \nx\n \nin\n \nrange\n(\n10\n)])\n \n# 10 not included\n\n\nprint\n([\nx\n**\n2\n \nfor\n \nx\n \nin\n \nrange\n(\n10\n)])\n\n\nprint\n([\nx\n \nfor\n \nx\n \nin\n \nrange\n(\n10\n)\n \nif\n \nx\n%\n2\n==\n0\n])\n\n\nprint\n([\nx\n**\n2\n \nfor\n \nx\n \nin\n \nrange\n(\n10\n)\n \nif\n \nx\n%\n2\n==\n0\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n\n[0, 2, 4, 6, 8]\n\n\n[0, 4, 16, 36, 64]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nmyList\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n,\n \n7\n,\n \n8\n,\n \n9\n,\n \n10\n]\n\n\nprint\n(\nmyList\n)\n\n\n[(\nlambda\n \nx\n:\n \nx\n*\nx\n)(\nx\n)\n \nfor\n \nx\n \nin\n \nmyList\n]\n\n\nprint\n([(\nlambda\n \nx\n:\n \nx\n*\nx\n)(\nx\n)\n \nfor\n \nx\n \nin\n \nmyList\n])\n\n\n# or\n\n\nprint\n(\nrange\n(\n10\n))\n\n\nf\n \n=\n \nlambda\n \nx\n:\n \nx\n*\nx\n\n\n[\nf\n(\nx\n)\n \nfor\n \nx\n \nin\n \nrange\n(\n10\n)]\n\n\nprint\n([\nf\n(\nx\n)\n \nfor\n \nx\n \nin\n \nrange\n(\n10\n)])\n\n\n\n\n\n\n\n1\n2\n3\n4\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\nrange(0, 10)\n\n\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n\n\n\n\n\n\nDictionary comprehension also\u2026\n\u00b6\n\n\nCounting the occurrences of one item in a list\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# tallying\n\n\nprint\n(\n\"Count the occurrences of the number 4 in the list.\"\n)\n\n\nprint\n([\n1\n,\n \n2\n,\n \n9\n,\n \n4\n,\n \n5\n,\n \n4\n,\n \n1\n])\n\n\nprint\n([\n1\n,\n \n2\n,\n \n9\n,\n \n4\n,\n \n5\n,\n \n4\n,\n \n1\n]\n.\ncount\n(\n4\n))\n\n\n\nprint\n(\n\"Count the occurrences of the letter 'a' in the list\"\n)\n\n\nlist1\n \n=\n \n[\n\"d\"\n,\n \n\"a\"\n,\n \n\"t\"\n,\n \n\"a\"\n,\n \n\"c\"\n,\n \n\"a\"\n,\n \n\"m\"\n,\n \n\"p\"\n]\n\n\nprint\n(\nlist\n)\n\n\nlist1\n.\ncount\n(\n\"a\"\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nCount the occurrences of the number 4 in the list.\n[1, 2, 9, 4, 5, 4, 1]\n2\nCount the occurrences of the letter 'a' in the list\n<class 'list'>\n\n\n\n\n\n3\n\n\n\n\n\n\nCounting all items in a list with \ncount()\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\nlist2\n \n=\n \n[\n\"a\"\n,\n\"b\"\n,\n\"b\"\n]\n\n\nprint\n(\nlist2\n)\n\n\n[[\nx\n,\nlist2\n.\ncount\n(\nx\n)]\n \nfor\n \nx\n \nin\n \nlist\n(\nlist2\n)]\n\n\nprint\n([[\nx\n,\nlist2\n.\ncount\n(\nx\n)]\n \nfor\n \nx\n \nin\n \nlist\n(\nlist2\n)])\n\n\n# now a set; sets only contain unique items\n\n\n# only the unique list items are kept\n\n\n\n\n\n\n\n1\n2\n['a', 'b', 'b']\n\n\n[['a', 1], ['b', 2], ['b', 2]]\n\n\n\n\n\n\n\nCounting all items in a list with \nCounter()\n from the \ncollections\n library\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# Import `Counter` from the `collections` library\n\n\nfrom\n \ncollections\n \nimport\n \nCounter\n\n\n\n# This is your list\n\n\nlist2\n \n=\n \n[\n\"a\"\n,\n\"b\"\n,\n\"b\"\n]\n\n\nprint\n(\nlist2\n)\n\n\n\n# Pass `list` to `Counter()`\n\n\nCounter\n(\nlist2\n)\n\n\nprint\n(\nCounter\n(\nlist2\n))\n\n\n\n\n\n\n\n1\n2\n['a', 'b', 'b']\n\n\nCounter({'b': 2, 'a': 1})\n\n\n\n\n\n\n\nSplit A Python List Into Evenly Sized Chunks\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n# Your list `x`\n\n\nx\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n6\n,\n7\n,\n8\n,\n9\n]\n\n\nprint\n(\nx\n)\n\n\n\n# Split `x` up in chunks of 3\n\n\ny\n \n=\n \nzip\n(\n*\n[\niter\n(\nx\n)]\n*\n3\n)\n\n\n\n\n\n\n\n1\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\n\n[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]\n\n\n\n\nThe first time, zip() will take one element of the list sequentially, which leaves you with:\n\n\n\n\n[1][2][3]\n\n\n\n\nThe second time, elements will be added to the three lists you just created:\n\n\n\n\n[1, 4], [2, 5], [3, 6]\n\n\n\n\nThe third and last time:\n\n\n\n\n[1, 2, 3], [4, 5, 6], [7, 8, 9]\n\n\n1\n2\n3\n# Use `list()` to print the result of `zip()`\n\n\nprint\n(\ny\n.\n__doc__\n)\n\n\ntype\n(\ny\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nzip(iter1 [,iter2 [...]]) --> zip object\n\nReturn a zip object whose .__next__() method returns a tuple where\nthe i-th element comes from the i-th iterable argument.  The .__next__()\nmethod continues until the shortest iterable in the argument sequence\nis exhausted and then it raises StopIteration.\n\n\n\n\n\nzip\n\n\n\n\n\n\n1\nprint\n(\nlist\n(\ny\n))\n\n\n\n\n\n\n\n1\n[]\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# Method to split up your lists into chunks\n\n\ndef\n \nchunks\n(\nmyList\n,\n \nchunkSize\n):\n\n    \n\"\"\"Yield successive chunkSize-sized chunks from list.\"\"\"\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nlen\n(\nmyList\n),\n \nchunkSize\n):\n\n        \nyield\n \nmyList\n[\ni\n:\ni\n \n+\n \nchunkSize\n]\n\n\n\n# Use your `chunks` function to print out chunks of the same size\n\n\nimport\n \npprint\n \n# pretty print\n\n\n\npprint\n.\npprint\n(\nrange\n(\n10\n,\n \n75\n))\n\n\npprint\n.\npprint\n(\nlist\n(\nchunks\n(\nrange\n(\n10\n,\n \n75\n),\n \n10\n)))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nrange(10, 75)\n[range(10, 20),\n range(20, 30),\n range(30, 40),\n range(40, 50),\n range(50, 60),\n range(60, 70),\n range(70, 75)]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Set up your list and chunk size\n\n\nlist1\n \n=\n \nrange\n(\n0\n,\n \n50\n)\n\n\nchunk\n \n=\n \n5\n\n\n\n# Split up your list into chunks\n\n\nprint\n([\nlist1\n[\ni\n:\ni\n \n+\n \nchunk\n]\n \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nlen\n(\nlist1\n),\n \nchunk\n)])\n\n\n\n\n\n\n\n1\n[range(0, 5), range(5, 10), range(10, 15), range(15, 20), range(20, 25), range(25, 30), range(30, 35), range(35, 40), range(40, 45), range(45, 50)]\n\n\n\n\n\n\nLoop over a list\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# This is your list\n\n\nmyList\n \n=\n \n[[\n1\n,\n2\n,\n3\n],[\n4\n,\n5\n,\n6\n,\n7\n],[\n8\n,\n9\n,\n10\n]]\n\n\nprint\n(\nmyList\n)\n\n\n\n# Loop over your list and print all elements that are of size 3\n\n\nfor\n \nx\n \nin\n \nmyList\n:\n\n      \nif\n \nlen\n(\nx\n)\n==\n3\n:\n\n        \nprint\n(\nx\n)\n \n# element\n\n\n\n\n\n\n\n1\n2\n3\n[[1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]\n\n\n[1, 2, 3]\n\n\n[8, 9, 10]\n\n\n\n\n\n\n\n1\n2\n# Alternatively\n\n\nprint\n([\nx\n \nfor\n \nx\n \nin\n \nmyList\n \nif\n \nlen\n(\nx\n)\n==\n3\n])\n\n\n\n\n\n\n\n1\n[[1, 2, 3], [8, 9, 10]]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# This is your list\n\n\nmyList\n \n=\n \n[\n3\n,\n4\n,\n5\n,\n6\n]\n\n\nprint\n(\nmyList\n)\n\n\n\n# Loop over `myList` and print tuples of all indices and values \n\n\nfor\n \ni\n,\n \nval\n \nin\n \nenumerate\n(\nmyList\n):\n \n# return an index and a value\n\n     \nprint\n(\ni\n,\n \nval\n)\n \n# indexElement, element\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n[3, 4, 5, 6]\n\n\n0 3\n\n\n1 4\n\n\n2 5\n\n\n3 6\n\n\n\n\n\n\n\nCreate flat lists out of lists\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# Your initial list of lists\n\n\nlistOfLists\n \n=\n \n[[\n1\n,\n2\n],[\n3\n,\n4\n],[\n5\n,\n6\n]]\n\n\nprint\n(\nlistOfLists\n)\n\n\n\n# Flatten out your original list of lists with `sum()`\n\n\nprint\n(\nsum\n(\nlistOfLists\n,\n \n[]))\n\n\nprint\n(\nsum\n.\n__doc__\n)\n\n\n\nmyList\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n6\n]\n\n\n\nprint\n(\nsum\n(\nmyList\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n[[1, 2], [3, 4], [5, 6]]\n\n\n[1, 2, 3, 4, 5, 6]\n\n\nReturn the sum of a 'start' value (default: 0) plus an iterable of numbers\n\n\n\nWhen the iterable is empty, return the start value.\n\n\nThis function is intended specifically for use with numeric values and may\n\n\nreject non-numeric types.\n\n\n21\n\n\n\n\n\n\n\n1\n2\n3\n4\n# Alternatively\n\n\nfrom\n \nfunctools\n \nimport\n \nreduce\n\n\n\nprint\n(\nreduce\n(\nlambda\n \nx\n,\ny\n:\n \nx\n+\ny\n,\nlistOfLists\n))\n \n#  iterable is reduced to a single value\n\n\n\n\n\n\n\n1\n[1, 2, 3, 4, 5, 6]\n\n\n\n\n\n\nWhat happens, is that \n[1,2]\n is added to \n[3,4]\n and this result is added to \n[5,6]\n.\n\n\n([1,2]+[3,4])+[5,6])\n\n\nConsider item for item in sublist, printing out each item from the sublist.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nlist1\n \n=\n \n[]\n\n\nprint\n(\nlist1\n)\n\n\n\nfor\n \nsublist\n \nin\n \nlistOfLists\n:\n\n  \nfor\n \nitem\n \nin\n \nsublist\n:\n\n    \nlist1\n.\nappend\n(\nitem\n)\n\n\n\nprint\n(\nlist1\n)\n\n\n\n\n\n\n\n1\n2\n[]\n[1, 2, 3, 4, 5, 6]\n\n\n\n\n\n\n1\n2\n# Or you can use list comprehension\n\n\nprint\n([\nitem\n \nfor\n \nsublist\n \nin\n \nlistOfLists\n \nfor\n \nitem\n \nin\n \nsublist\n])\n\n\n\n\n\n\n\n1\n[1, 2, 3, 4, 5, 6]\n\n\n\n\n\n\nGet an intersection of two Python lists\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nlist1\n \n=\n \n[\n1\n,\n \n6\n,\n \n7\n,\n \n10\n,\n \n13\n,\n \n28\n,\n \n32\n,\n \n41\n,\n \n58\n,\n \n63\n]\n\n\nprint\n(\nlist1\n)\n\n\n\nlist2\n \n=\n \n[[\n13\n,\n \n17\n,\n \n18\n,\n \n21\n,\n \n32\n],\n \n[\n7\n,\n \n11\n,\n \n13\n,\n \n14\n,\n \n28\n],\n \n[\n1\n,\n \n5\n,\n \n6\n,\n \n8\n,\n \n15\n,\n \n16\n]]\n\n\nprint\n(\nlist2\n)\n\n\n\n# Intersect both lists with list comprehension\n\n\nintersection\n \n=\n \n[\nlist\n(\nfilter\n(\nlambda\n \nx\n:\n \nx\n \nin\n \nlist1\n,\n \nsublist\n))\n \nfor\n \nsublist\n \nin\n \nlist2\n]\n\n\n\n# Print the result of the intersection\n\n\nprint\n(\nintersection\n)\n\n\n\n\n\n\n\n1\n2\n3\n[1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\n\n\n[[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\n\n\n[[13, 32], [7, 13, 28], [1, 6]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# An intersection of both lists, stored in `intersection`\n\n\nintersection\n \n=\n \n[[\nx\n \nfor\n \nx\n \nin\n \nsublist\n \nif\n \nx\n \nin\n \nlist1\n]\n \nfor\n \nsublist\n \nin\n \nlist2\n]\n\n\n\n# Print the result of the intersection\n\n\nprint\n(\nintersection\n)\n\n\n\n\n\n\n\n1\n[[13, 32], [7, 13, 28], [1, 6]]\n\n\n\n\n\n\nRemove duplicates from a list\n\u00b6\n\n\nCheck whether a variable is an iterable by applying the method \n.__iter__\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Your list with duplicate values\n\n\nduplicates\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n1\n,\n \n2\n,\n \n5\n,\n \n6\n,\n \n7\n,\n \n8\n]\n\n\n\n# Print the unique `duplicates` list\n\n\n#print(list(set(duplicates)))\n\n\n\n# A list with small numbers \n\n\nsmallNumbers\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\n\n# Print the unique `duplicates` list without the small numbers\n\n\n# detract the set elements of smallNumbers\n\n\nlist\n(\nset\n(\nduplicates\n)\n \n-\n \nset\n(\nsmallNumbers\n))\n\n\n\n\n\n\n\n1\n[8, 5, 6, 7]\n\n\n\n\n\n\nCreate Empty NumPy Arrays\n\u00b6\n\n\nPrefer NumPy arrays over lists in Python:\n\n\n\n\nBecause NumPy arrays are more compact than lists.\n\n\nBecause access in reading and writing items is faster with NumPy.\n\n\nBecause NumPy can be more convenient to work with, thanks to the fact that you get a lot of vector and matrix operations for free\n\n\nBecause NumPy can be more efficient to work with because they are implemented more efficiently.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nnumpy\n\n\nprint\n(\nnumpy\n.\narray\n([]))\n\n\n\n# Make a NumPy array of four rows and two columns and filled with 0\n\n\nprint\n(\nnumpy\n.\nzeros\n(\nshape\n=\n(\n4\n,\n2\n)))\n\n\n\n# Make a NumPy array of 1 values of three columns\n\n\nprint\n(\nnumpy\n.\nones\n(\n3\n))\n\n\n\n# Make an empty NumPy array\n\n\nprint\n(\nnumpy\n.\nempty\n(\nshape\n=\n(\n0\n,\n0\n)))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[]\n[[ 0.  0.]\n [ 0.  0.]\n [ 0.  0.]\n [ 0.  0.]]\n[ 1.  1.  1.]\n[]\n\n\n\n\n\n\nDo math with lists (wt avg)\n\u00b6\n\n\n1\n2\ncost\n \n=\n \n[\n0.424\n,\n \n0.4221\n,\n \n0.4185\n,\n \n0.4132\n,\n \n0.413\n]\n\n\ncases\n \n=\n \n[\n10\n,\n \n20\n,\n \n30\n,\n \n40\n,\n \n50\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\nfor\n \nc\n \nin\n \nrange\n(\nlen\n(\ncost\n)):\n\n   \ncost\n[\nc\n]\n \n=\n \n(\ncost\n[\nc\n]\n \n*\n \ncases\n[\nc\n]\n \n/\n \nsum\n(\ncases\n))\n\n\ncost\n \n=\n \nsum\n(\ncost\n)\n\n\nprint\n(\ncost\n)\n\n\n\n\n\n\n\n1\n0.41609999999999997\n\n\n\n\n\n\n1\n2\n3\n4\ncost\n \n=\n \n[\n0.424\n,\n \n0.4221\n,\n \n0.4185\n,\n \n0.4132\n,\n \n0.413\n]\n\n\ncases\n \n=\n \n[\n10\n,\n \n20\n,\n \n30\n,\n \n40\n,\n \n50\n]\n\n\n\nsum\n(\ncost\n[\nc\n]\n \n*\n \ncases\n[\nc\n]\n \n/\n \nsum\n(\ncases\n)\n \nfor\n \nc\n \nin\n \nrange\n(\nlen\n(\ncost\n)))\n\n\n\n\n\n\n\n1\n0.41609999999999997\n\n\n\n\n\n\n1\n2\n3\n4\ncost\n \n=\n \n[\n0.424\n,\n \n0.4221\n,\n \n0.4185\n,\n \n0.4132\n,\n \n0.413\n]\n\n\ncases\n \n=\n \n[\n10\n,\n \n20\n,\n \n30\n,\n \n40\n,\n \n50\n]\n\n\n\nsum\n(\ncost\n[\nc\n]\n \n*\n \ncases\n[\nc\n]\n \nfor\n \nc\n \nin\n \nrange\n(\nlen\n(\ncost\n)))\n \n/\n \nsum\n(\ncases\n)\n\n\n\n\n\n\n\n1\n0.41609999999999997\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ncost\n \n=\n \n[\n0.424\n,\n \n0.4221\n,\n \n0.4185\n,\n \n0.4132\n,\n \n0.413\n]\n\n\ncases\n \n=\n \n[\n10\n,\n \n20\n,\n \n30\n,\n \n40\n,\n \n50\n]\n\n\n\n# See what `zip()` does to your `cost` and `cases`\n\n\nprint\n(\nlist\n(\nzip\n(\ncost\n,\n \ncases\n)))\n\n\n# zips your lists together\n\n\n\n# Calculate the weighted average\n\n\nprint\n(\nsum\n([\nx\n \n*\n \ny\n \nfor\n \nx\n,\n \ny\n \nin\n \nzip\n(\ncost\n,\n \ncases\n)])\n \n/\n \nsum\n(\ncases\n))\n\n\n\n\n\n\n\n1\n2\n[(0.424, 10), (0.4221, 20), (0.4185, 30), (0.4132, 40), (0.413, 50)]\n\n\n0.41609999999999997\n\n\n\n\n\n\n\nDo math with lists (quantiles)\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n# Import numpy as np\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# Make a NumPy array\n\n\na\n \n=\n \nnp\n.\narray\n([\n1\n,\n2\n,\n3\n,\n4\n,\n5\n])\n\n\n\n# Return the 50th percentile of our NumPy array\n\n\np50\n \n=\n \nnp\n.\npercentile\n(\na\n,\n \n50\n)\n\n\n\n#Print the result\n\n\nprint\n(\np50\n)\n\n\n\nprint\n(\nnp\n.\npercentile\n(\na\n,\n \n(\n25\n,\n \n75\n)))\n\n\n\n\n\n\n\n1\n2\n3.0\n[ 2.  4.]\n\n\n\n\n\n\nDo math with lists (\nsum\n)\n\u00b6\n\n\n1\n2\n3\n4\n5\nlist1\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\nlist2\n \n=\n \n[\n4\n,\n \n5\n,\n \n6\n]\n\n\n\nfrom\n \noperator\n \nimport\n \nadd\n\n\nlist\n(\nmap\n(\nadd\n,\n \nlist1\n,\n \nlist2\n))\n\n\n\n\n\n\n\n1\n[5, 7, 9]\n\n\n\n\n\n\n1\n[\nsum\n(\nx\n)\n \nfor\n \nx\n \nin\n \nzip\n(\nlist1\n,\n \nlist2\n)]\n\n\n\n\n\n\n\n1\n[5, 7, 9]\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Import numpy as np\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# Make your lists into NumPy arrays\n\n\nvector1\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n,\n \n3\n])\n\n\nvector2\n \n=\n \nnp\n.\narray\n([\n4\n,\n \n5\n,\n \n6\n])\n\n\n\n# Element-wise addition\n\n\nsum_vector\n \n=\n \nvector1\n \n+\n \nvector2\n \n\n\n# Print the result\n\n\nprint\n(\nsum_vector\n)\n\n\n\n\n\n\n\n1\n[5 7 9]",
            "title": "Lists"
        },
        {
            "location": "/Lists/#iterable",
            "text": "The program can iterate over them.  Lists, strings, tuples, and sets are called \u201citerables\u201d.",
            "title": "Iterable"
        },
        {
            "location": "/Lists/#lists-versus-tuples",
            "text": "tup_course = ('physics', 'chemistry', 1997, 2000)   You can\u2019t add elements to a tuple. There\u2019s no  append()  or  extend()  method for tuples,  You can\u2019t remove elements from a tuple. Tuples have no  remove()  or  pop()  method,  You can find elements in a tuple since this doesn\u2019t change the tuple.  You can also use the in operator to check if an element exists in the tuple.  If you\u2019re defining a constant set of values, use a tuple instead of a list. It will be faster and safer.",
            "title": "Lists Versus tuples"
        },
        {
            "location": "/Lists/#lists-versus-sets",
            "text": "set_code = set{\"Perl\", \"Python\", \"Java\"}   Just like dictionaries, sets have no order in their collection of items. Not like lists.  Set requires the items contained in it to be hashable, lists store non-hashable items.  Sets require your items to be unique and immutable. Duplicates are not allowed in sets, while lists allow for duplicates and are mutable.  Use sets when you have an unordered set of UNIQUE, immutable values that are hashable.",
            "title": "Lists Versus sets"
        },
        {
            "location": "/Lists/#frozensets",
            "text": "set_cities = frozenset{\"Frankfurt\", \"Basel\",\"Freiburg\"}   Frozensets are like sets except that they cannot be changed, i.e. they are immutable.",
            "title": "Frozensets"
        },
        {
            "location": "/Lists/#lists-versus-dictionaries",
            "text": "dict_kid = {'Name': 'Zara', 'Age': 7, 'Class': 'First'   A list stores an ordered collection of items, so it keeps some order. Dictionaries don\u2019t have any order.  Dictionaries are known to associate each key with a value, while lists just contain values.  Use a dictionary when you have an unordered set of unique keys that map to values.",
            "title": "Lists Versus dictionaries"
        },
        {
            "location": "/Lists/#hashable-or-not",
            "text": "Hashable: float, integer, tuple, string.  Not: dictionary, set, list.",
            "title": "Hashable or Not"
        },
        {
            "location": "/Lists/#2-snippets",
            "text": "",
            "title": "2, Snippets"
        },
        {
            "location": "/Lists/#select-an-element-from-a-list",
            "text": "1\n2\n3 # These list elements are all of the same type  zoo   =   [ 'bear' ,   'lion' ,   'panda' ,   'zebra' ]  print ( zoo )    1 ['bear', 'lion', 'panda', 'zebra']   1\n2\n3 # But these list elements are not  biggerZoo   =   [ 'bear' ,   'lion' ,   'panda' ,   'zebra' ,   [ 'chimpanzees' ,   'gorillas' ,   'orangutans' ,   'gibbons' ]]  print ( biggerZoo )    1 ['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]   1\n2\n3\n4\n5\n6 # Select the first list element  oneZooAnimal   =   biggerZoo [ 0 ]  # Print oneZooAnimal  print ( oneZooAnimal )  print ( biggerZoo [ 0 ])    1\n2 bear\nbear",
            "title": "Select an element from a list"
        },
        {
            "location": "/Lists/#select-the-last-element",
            "text": "1\n2\n3\n4\n5\n6\n7 # Pass -1 to the index operator on `biggerZoo`  monkeys   =   biggerZoo [ - 1 ]  print ( monkeys )  # Pass -2 to the index operator on `biggerZoo`  zebra   =   biggerZoo [ - 2 ]  print ( zebra )    1\n2 ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']  zebra",
            "title": "Select the last element"
        },
        {
            "location": "/Lists/#out-of-range-error",
            "text": "1\n2 # Run this code to trigger an \"Index Out Of Range\" Error  print ( \"print(biggerZoo[6])\" )    1 print(biggerZoo[6])",
            "title": "Out of range error"
        },
        {
            "location": "/Lists/#slice",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 # Print all  print ( biggerZoo )  # Print a[start: ]  someZooAnimals   =   biggerZoo [ 2 :   ]  # Print to see what you exactly select from `biggerZoo`  print ( someZooAnimals )  # Print a[ :end]  otherZooAnimals   =   biggerZoo [   : 2 ]  # Print to see what you're getting back  print ( otherZooAnimals )  # Print a[start:end]  print ( biggerZoo [ 2 : 4 ])  # Print a[start:end:step]  print ( biggerZoo [ 2 :: 4 ])  print ( biggerZoo [ 2 :: 2 ])  print ( biggerZoo [ 2 :: 1 ])    1\n2\n3\n4\n5\n6\n7 ['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]  ['panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]  ['bear', 'lion']  ['panda', 'zebra']  ['panda']  ['panda', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]  ['panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]",
            "title": "Slice"
        },
        {
            "location": "/Lists/#random",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 # Import `choice` from the `random` library  from   random   import   choice  # Construct your `list` variable with a list of the first 4 letters of the alphabet  list1   =   [ 'a' , 'b' , 'c' , 'd' ]  # Print your random 'list' element  print ( choice ( list1 ))  print ( choice ( list1 ))  # Import `randrange` from the `random` library  from   random   import   randrange  # Construct your `randomLetters` variable with a list of the first 4 letters of the alphabet  randomLetters   =   [ 'e' , 'f' ,   'g' ,   'h' ]  # Select a random index from 'randomLetters`  randomIndex   =   randrange ( 0 , len ( randomLetters ))  # Print your random element from `random`  print ( randomLetters [ randomIndex ])    1\n2\n3 c\nc\ng",
            "title": "Random"
        },
        {
            "location": "/Lists/#convert-a-list-to-a-string-with-join",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 # List of Strings to a String  listOfStrings   =   [ 'One' ,   'Two' ,   'Three' ]  strOfStrings   =   '' . join ( listOfStrings )  print ( strOfStrings )  # List Of Integers to a String  listOfNumbers   =   [ 1 ,   2 ,   3 ]  strOfNumbers   =   '' . join ( str ( n )   for   n   in   listOfNumbers )  print ( strOfNumbers )    1\n2 OneTwoThree\n123",
            "title": "Convert a list to a string with join()"
        },
        {
            "location": "/Lists/#convert-a-list-to-a-tuple-with-tuple",
            "text": "1\n2\n3 listOfStrings   =   [ 'One' ,   'Two' ,   'Three' ]  tupOfStrings   =   tuple ( listOfStrings )  print ( tupOfStrings )    1 ('One', 'Two', 'Three')",
            "title": "Convert a list to a tuple with tuple()"
        },
        {
            "location": "/Lists/#convert-a-list-to-a-set-with-set",
            "text": "1\n2\n3 listOfStrings   =   [ 'One' ,   'Two' ,   'Three' ]  setOfStrings   =   set ( listOfStrings )  print ( setOfStrings )    1 {'One', 'Three', 'Two'}",
            "title": "Convert a list to a set with set()"
        },
        {
            "location": "/Lists/#convert-a-list-to-a-dictionary-with-zip",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 helloWorld   =   [ 'hello' , 'world' , '1' , '2' ]  # Convert to a dictionary  # 1 will be interpreted as a key and 2 as a value  helloWorldDictionary   =   dict ( zip ( helloWorld [ 0 :: 2 ],   helloWorld [ 1 :: 2 ]))  # Print out the result  print ( helloWorldDictionary )  a   =   [ 1 ,   2 ,   3 ,   4 ,   5 ]  # Create a list iterator object  i   =   iter ( a )  # Zip and create a dictionary  print ( dict ( zip ( i ,   i )))    1\n2 {'hello': 'world', '1': '2'}\n{1: 2, 3: 4}",
            "title": "Convert a list to a dictionary with zip()"
        },
        {
            "location": "/Lists/#size-of-your-list-with-len",
            "text": "1\n2\n3\n4 print ( biggerZoo )  # Pass `justAList` to `len()`  print ( len ( biggerZoo ))    1\n2 ['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]  5",
            "title": "Size of your list with len()"
        },
        {
            "location": "/Lists/#append-and-extend",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 # This is your list  list1   =   [ 5 ,   6 ,   7 ,   8 ,   9 ]  print ( list1 )  # Check whether it's iterable  print ( list1 . __iter__ )  shortList   =   [ 5 ,   6 ,   7 ,   8 ,   9 ]  print ( shortList )  # Append [4,5] to `shortList`  shortList . append ([ 4 ,   5 ])  # Use the print() method to show shortList  print ( shortList )  longerList   =   [ 5 ,   6 ,   7 ,   8 ,   9 ]  print ( longerList )  # Extend `longerList` with [4,5]  longerList . extend ([ 4 ,   5 ])  # Use the print() method to see longerList  print ( longerList )    1\n2\n3\n4\n5\n6 [5, 6, 7, 8, 9]  <method-wrapper '__iter__' of list object at 0x7ff7a7d2dd88>  [5, 6, 7, 8, 9]  [5, 6, 7, 8, 9, [4, 5]]  [5, 6, 7, 8, 9]  [5, 6, 7, 8, 9, 4, 5]",
            "title": "append() and extend()"
        },
        {
            "location": "/Lists/#concatenate-lists",
            "text": "1\n2\n3\n4\n5 shortList   =   [ 5 ,   6 ,   7 ,   8 ,   9 ]  print ( shortList )  # Concatenate `shortList` with `[4,5]`  plusList   =   shortList   +   [ 4 , 5 ]    1 [5, 6, 7, 8, 9]",
            "title": "Concatenate lists"
        },
        {
            "location": "/Lists/#sort-a-list",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 zoo   =   [ 'zebra' ,   'bear' ,   'lion' ,   'panda' ]  print ( zoo )  # Use sort() on the rooms list  zoo . sort ()   # lists only  print ( zoo )  zoo   =   [ 'zebra' ,   'bear' ,   'lion' ,   'panda' ]  print ( zoo )  # Now use the sorted() function on orders  print ( sorted ( zoo ))   # lists, strings, sets, dictionaries    1\n2\n3\n4 ['zebra', 'bear', 'lion', 'panda']  ['bear', 'lion', 'panda', 'zebra']  ['zebra', 'bear', 'lion', 'panda']  ['bear', 'lion', 'panda', 'zebra']",
            "title": "Sort a list"
        },
        {
            "location": "/Lists/#copy-a-list-3-ways",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 zoo   =   [ 'zebra' ,   'bear' ,   'lion' ,   'panda' ]  print ( zoo )  # Copy the grocery list by slicing and store it in the `newGroceries` variable  newZoo   =   zoo [:]  print ( newZoo )  # Import the copy library as c  import   copy   as   c  # Create a `groceriesForFamily` variable and assign the copied grocery list to it  zooForFamily   =    c . copy ( zoo )  print ( zooForFamily )  # Use `deepcopy()` and assign the copied list to a `groceriesForKids` variable  zooForKids =   c . deepcopy ( zoo )  print ( zooForKids )    1\n2\n3\n4 ['zebra', 'bear', 'lion', 'panda']  ['zebra', 'bear', 'lion', 'panda']  ['zebra', 'bear', 'lion', 'panda']  ['zebra', 'bear', 'lion', 'panda']    When you use the \u2018simple\u2019 copy methods, your original lists will be modified. However, if you use the  deepcopy()  method, it will be prevented.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 # This is your list  objectList   =   [ 'a' , 'b' ,[ 'ab' , 'ba' ]]  print ( objectList )  # Copy the `objectList`  copiedList   =   objectList [:]  # Change the first list element of `copiedList`  copiedList [ 0 ]   =   'c'  # Go to the third element (the nested list) and change the second element  copiedList [ 2 ][ 1 ]   =   'd'  # Print out the original list to see what happened to it  print ( objectList );   print ( copiedList )  print ( \"Both lists are equal.\" )    1\n2\n3\n4 ['a', 'b', ['ab', 'ba']]  ['a', 'b', ['ab', 'd']]  ['c', 'b', ['ab', 'd']]  Both lists are equal.     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # 2, this is your list  objectList   =   [ 'a' , 'b' ,[ 'ab' , 'ba' ]]  print ( objectList )  # Copy the `objectList`  import   copy   as   c  copiedList2   =   c . deepcopy ( objectList )  # Change the first list element of `copiedList`  copiedList2 [ 0 ]   =   'c'  # Go to the third element (the nested list) and change the second element  copiedList2 [ 2 ][ 1 ]   =   'd'  # Print out the original list to see what happened to it  print ( objectList );   print ( copiedList2 )  print ( \"Both lists are different.\" )    1\n2\n3\n4 ['a', 'b', ['ab', 'ba']]  ['a', 'b', ['ab', 'ba']]  ['c', 'b', ['ab', 'd']]  Both lists are different.",
            "title": "Copy a List (3 ways):"
        },
        {
            "location": "/Lists/#list-comprehension",
            "text": "1\n2\n3\n4 print ([ x   for   x   in   range ( 10 )])   # 10 not included  print ([ x ** 2   for   x   in   range ( 10 )])  print ([ x   for   x   in   range ( 10 )   if   x % 2 == 0 ])  print ([ x ** 2   for   x   in   range ( 10 )   if   x % 2 == 0 ])    1\n2\n3\n4 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  [0, 2, 4, 6, 8]  [0, 4, 16, 36, 64]    1\n2\n3\n4\n5\n6\n7\n8\n9 myList   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ]  print ( myList )  [( lambda   x :   x * x )( x )   for   x   in   myList ]  print ([( lambda   x :   x * x )( x )   for   x   in   myList ])  # or  print ( range ( 10 ))  f   =   lambda   x :   x * x  [ f ( x )   for   x   in   range ( 10 )]  print ([ f ( x )   for   x   in   range ( 10 )])    1\n2\n3\n4 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]  range(0, 10)  [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]",
            "title": "List comprehension"
        },
        {
            "location": "/Lists/#dictionary-comprehension-also",
            "text": "",
            "title": "Dictionary comprehension also..."
        },
        {
            "location": "/Lists/#counting-the-occurrences-of-one-item-in-a-list",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 # tallying  print ( \"Count the occurrences of the number 4 in the list.\" )  print ([ 1 ,   2 ,   9 ,   4 ,   5 ,   4 ,   1 ])  print ([ 1 ,   2 ,   9 ,   4 ,   5 ,   4 ,   1 ] . count ( 4 ))  print ( \"Count the occurrences of the letter 'a' in the list\" )  list1   =   [ \"d\" ,   \"a\" ,   \"t\" ,   \"a\" ,   \"c\" ,   \"a\" ,   \"m\" ,   \"p\" ]  print ( list )  list1 . count ( \"a\" )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 Count the occurrences of the number 4 in the list.\n[1, 2, 9, 4, 5, 4, 1]\n2\nCount the occurrences of the letter 'a' in the list\n<class 'list'>\n\n\n\n\n\n3",
            "title": "Counting the occurrences of one item in a list"
        },
        {
            "location": "/Lists/#counting-all-items-in-a-list-with-count",
            "text": "1\n2\n3\n4\n5\n6 list2   =   [ \"a\" , \"b\" , \"b\" ]  print ( list2 )  [[ x , list2 . count ( x )]   for   x   in   list ( list2 )]  print ([[ x , list2 . count ( x )]   for   x   in   list ( list2 )])  # now a set; sets only contain unique items  # only the unique list items are kept    1\n2 ['a', 'b', 'b']  [['a', 1], ['b', 2], ['b', 2]]",
            "title": "Counting all items in a list with count()"
        },
        {
            "location": "/Lists/#counting-all-items-in-a-list-with-counter-from-the-collections-library",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # Import `Counter` from the `collections` library  from   collections   import   Counter  # This is your list  list2   =   [ \"a\" , \"b\" , \"b\" ]  print ( list2 )  # Pass `list` to `Counter()`  Counter ( list2 )  print ( Counter ( list2 ))    1\n2 ['a', 'b', 'b']  Counter({'b': 2, 'a': 1})",
            "title": "Counting all items in a list with Counter() from the collections library"
        },
        {
            "location": "/Lists/#split-a-python-list-into-evenly-sized-chunks",
            "text": "1\n2\n3\n4\n5\n6 # Your list `x`  x   =   [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ]  print ( x )  # Split `x` up in chunks of 3  y   =   zip ( * [ iter ( x )] * 3 )    1 [1, 2, 3, 4, 5, 6, 7, 8, 9]   [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]   The first time, zip() will take one element of the list sequentially, which leaves you with:   [1][2][3]   The second time, elements will be added to the three lists you just created:   [1, 4], [2, 5], [3, 6]   The third and last time:   [1, 2, 3], [4, 5, 6], [7, 8, 9]  1\n2\n3 # Use `list()` to print the result of `zip()`  print ( y . __doc__ )  type ( y )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 zip(iter1 [,iter2 [...]]) --> zip object\n\nReturn a zip object whose .__next__() method returns a tuple where\nthe i-th element comes from the i-th iterable argument.  The .__next__()\nmethod continues until the shortest iterable in the argument sequence\nis exhausted and then it raises StopIteration.\n\n\n\n\n\nzip   1 print ( list ( y ))    1 []    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # Method to split up your lists into chunks  def   chunks ( myList ,   chunkSize ): \n     \"\"\"Yield successive chunkSize-sized chunks from list.\"\"\" \n     for   i   in   range ( 0 ,   len ( myList ),   chunkSize ): \n         yield   myList [ i : i   +   chunkSize ]  # Use your `chunks` function to print out chunks of the same size  import   pprint   # pretty print  pprint . pprint ( range ( 10 ,   75 ))  pprint . pprint ( list ( chunks ( range ( 10 ,   75 ),   10 )))    1\n2\n3\n4\n5\n6\n7\n8 range(10, 75)\n[range(10, 20),\n range(20, 30),\n range(30, 40),\n range(40, 50),\n range(50, 60),\n range(60, 70),\n range(70, 75)]   1\n2\n3\n4\n5\n6 # Set up your list and chunk size  list1   =   range ( 0 ,   50 )  chunk   =   5  # Split up your list into chunks  print ([ list1 [ i : i   +   chunk ]   for   i   in   range ( 0 ,   len ( list1 ),   chunk )])    1 [range(0, 5), range(5, 10), range(10, 15), range(15, 20), range(20, 25), range(25, 30), range(30, 35), range(35, 40), range(40, 45), range(45, 50)]",
            "title": "Split A Python List Into Evenly Sized Chunks"
        },
        {
            "location": "/Lists/#loop-over-a-list",
            "text": "1\n2\n3\n4\n5\n6\n7\n8 # This is your list  myList   =   [[ 1 , 2 , 3 ],[ 4 , 5 , 6 , 7 ],[ 8 , 9 , 10 ]]  print ( myList )  # Loop over your list and print all elements that are of size 3  for   x   in   myList : \n       if   len ( x ) == 3 : \n         print ( x )   # element    1\n2\n3 [[1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]  [1, 2, 3]  [8, 9, 10]    1\n2 # Alternatively  print ([ x   for   x   in   myList   if   len ( x ) == 3 ])    1 [[1, 2, 3], [8, 9, 10]]   1\n2\n3\n4\n5\n6\n7 # This is your list  myList   =   [ 3 , 4 , 5 , 6 ]  print ( myList )  # Loop over `myList` and print tuples of all indices and values   for   i ,   val   in   enumerate ( myList ):   # return an index and a value \n      print ( i ,   val )   # indexElement, element    1\n2\n3\n4\n5 [3, 4, 5, 6]  0 3  1 4  2 5  3 6",
            "title": "Loop over a list"
        },
        {
            "location": "/Lists/#create-flat-lists-out-of-lists",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # Your initial list of lists  listOfLists   =   [[ 1 , 2 ],[ 3 , 4 ],[ 5 , 6 ]]  print ( listOfLists )  # Flatten out your original list of lists with `sum()`  print ( sum ( listOfLists ,   []))  print ( sum . __doc__ )  myList   =   [ 1 , 2 , 3 , 4 , 5 , 6 ]  print ( sum ( myList ))    1\n2\n3\n4\n5\n6\n7\n8 [[1, 2], [3, 4], [5, 6]]  [1, 2, 3, 4, 5, 6]  Return the sum of a 'start' value (default: 0) plus an iterable of numbers  When the iterable is empty, return the start value.  This function is intended specifically for use with numeric values and may  reject non-numeric types.  21    1\n2\n3\n4 # Alternatively  from   functools   import   reduce  print ( reduce ( lambda   x , y :   x + y , listOfLists ))   #  iterable is reduced to a single value    1 [1, 2, 3, 4, 5, 6]   What happens, is that  [1,2]  is added to  [3,4]  and this result is added to  [5,6] .  ([1,2]+[3,4])+[5,6])  Consider item for item in sublist, printing out each item from the sublist.  1\n2\n3\n4\n5\n6\n7\n8 list1   =   []  print ( list1 )  for   sublist   in   listOfLists : \n   for   item   in   sublist : \n     list1 . append ( item )  print ( list1 )    1\n2 []\n[1, 2, 3, 4, 5, 6]   1\n2 # Or you can use list comprehension  print ([ item   for   sublist   in   listOfLists   for   item   in   sublist ])    1 [1, 2, 3, 4, 5, 6]",
            "title": "Create flat lists out of lists"
        },
        {
            "location": "/Lists/#get-an-intersection-of-two-python-lists",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 list1   =   [ 1 ,   6 ,   7 ,   10 ,   13 ,   28 ,   32 ,   41 ,   58 ,   63 ]  print ( list1 )  list2   =   [[ 13 ,   17 ,   18 ,   21 ,   32 ],   [ 7 ,   11 ,   13 ,   14 ,   28 ],   [ 1 ,   5 ,   6 ,   8 ,   15 ,   16 ]]  print ( list2 )  # Intersect both lists with list comprehension  intersection   =   [ list ( filter ( lambda   x :   x   in   list1 ,   sublist ))   for   sublist   in   list2 ]  # Print the result of the intersection  print ( intersection )    1\n2\n3 [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]  [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]  [[13, 32], [7, 13, 28], [1, 6]]    1\n2\n3\n4\n5 # An intersection of both lists, stored in `intersection`  intersection   =   [[ x   for   x   in   sublist   if   x   in   list1 ]   for   sublist   in   list2 ]  # Print the result of the intersection  print ( intersection )    1 [[13, 32], [7, 13, 28], [1, 6]]",
            "title": "Get an intersection of two Python lists"
        },
        {
            "location": "/Lists/#remove-duplicates-from-a-list",
            "text": "Check whether a variable is an iterable by applying the method  .__iter__ .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Your list with duplicate values  duplicates   =   [ 1 ,   2 ,   3 ,   1 ,   2 ,   5 ,   6 ,   7 ,   8 ]  # Print the unique `duplicates` list  #print(list(set(duplicates)))  # A list with small numbers   smallNumbers   =   [ 1 ,   2 ,   3 ]  # Print the unique `duplicates` list without the small numbers  # detract the set elements of smallNumbers  list ( set ( duplicates )   -   set ( smallNumbers ))    1 [8, 5, 6, 7]",
            "title": "Remove duplicates from a list"
        },
        {
            "location": "/Lists/#create-empty-numpy-arrays",
            "text": "Prefer NumPy arrays over lists in Python:   Because NumPy arrays are more compact than lists.  Because access in reading and writing items is faster with NumPy.  Because NumPy can be more convenient to work with, thanks to the fact that you get a lot of vector and matrix operations for free  Because NumPy can be more efficient to work with because they are implemented more efficiently.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   numpy  print ( numpy . array ([]))  # Make a NumPy array of four rows and two columns and filled with 0  print ( numpy . zeros ( shape = ( 4 , 2 )))  # Make a NumPy array of 1 values of three columns  print ( numpy . ones ( 3 ))  # Make an empty NumPy array  print ( numpy . empty ( shape = ( 0 , 0 )))    1\n2\n3\n4\n5\n6\n7 []\n[[ 0.  0.]\n [ 0.  0.]\n [ 0.  0.]\n [ 0.  0.]]\n[ 1.  1.  1.]\n[]",
            "title": "Create Empty NumPy Arrays"
        },
        {
            "location": "/Lists/#do-math-with-lists-wt-avg",
            "text": "1\n2 cost   =   [ 0.424 ,   0.4221 ,   0.4185 ,   0.4132 ,   0.413 ]  cases   =   [ 10 ,   20 ,   30 ,   40 ,   50 ]    1\n2\n3\n4 for   c   in   range ( len ( cost )): \n    cost [ c ]   =   ( cost [ c ]   *   cases [ c ]   /   sum ( cases ))  cost   =   sum ( cost )  print ( cost )    1 0.41609999999999997   1\n2\n3\n4 cost   =   [ 0.424 ,   0.4221 ,   0.4185 ,   0.4132 ,   0.413 ]  cases   =   [ 10 ,   20 ,   30 ,   40 ,   50 ]  sum ( cost [ c ]   *   cases [ c ]   /   sum ( cases )   for   c   in   range ( len ( cost )))    1 0.41609999999999997   1\n2\n3\n4 cost   =   [ 0.424 ,   0.4221 ,   0.4185 ,   0.4132 ,   0.413 ]  cases   =   [ 10 ,   20 ,   30 ,   40 ,   50 ]  sum ( cost [ c ]   *   cases [ c ]   for   c   in   range ( len ( cost )))   /   sum ( cases )    1 0.41609999999999997   1\n2\n3\n4\n5\n6\n7\n8\n9 cost   =   [ 0.424 ,   0.4221 ,   0.4185 ,   0.4132 ,   0.413 ]  cases   =   [ 10 ,   20 ,   30 ,   40 ,   50 ]  # See what `zip()` does to your `cost` and `cases`  print ( list ( zip ( cost ,   cases )))  # zips your lists together  # Calculate the weighted average  print ( sum ([ x   *   y   for   x ,   y   in   zip ( cost ,   cases )])   /   sum ( cases ))    1\n2 [(0.424, 10), (0.4221, 20), (0.4185, 30), (0.4132, 40), (0.413, 50)]  0.41609999999999997",
            "title": "Do math with lists (wt avg)"
        },
        {
            "location": "/Lists/#do-math-with-lists-quantiles",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 # Import numpy as np  import   numpy   as   np  # Make a NumPy array  a   =   np . array ([ 1 , 2 , 3 , 4 , 5 ])  # Return the 50th percentile of our NumPy array  p50   =   np . percentile ( a ,   50 )  #Print the result  print ( p50 )  print ( np . percentile ( a ,   ( 25 ,   75 )))    1\n2 3.0\n[ 2.  4.]",
            "title": "Do math with lists (quantiles)"
        },
        {
            "location": "/Lists/#do-math-with-lists-sum",
            "text": "1\n2\n3\n4\n5 list1   =   [ 1 ,   2 ,   3 ]  list2   =   [ 4 ,   5 ,   6 ]  from   operator   import   add  list ( map ( add ,   list1 ,   list2 ))    1 [5, 7, 9]   1 [ sum ( x )   for   x   in   zip ( list1 ,   list2 )]    1 [5, 7, 9]    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Import numpy as np  import   numpy   as   np  # Make your lists into NumPy arrays  vector1   =   np . array ([ 1 ,   2 ,   3 ])  vector2   =   np . array ([ 4 ,   5 ,   6 ])  # Element-wise addition  sum_vector   =   vector1   +   vector2   # Print the result  print ( sum_vector )    1 [5 7 9]",
            "title": "Do math with lists (sum)"
        },
        {
            "location": "/IPython Notebook/",
            "text": "CONTENT\n\n\nWebsites\n\n\nIpython Notebook Essentials\n\n\nLearning IPython for Interactive Computing and Data Visualization\n\n\nIPython Interactive Computing and Visualization Cookbook\n\n\nIntroduction to Python for Econometrics, Statistics and Data Analysis\n\n\nBuilding Machine Learning Systems with Python\n\n\nScipy Lecture Notes\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and tables of contents.\n\n\n\n\nWebsites\n\u00b6\n\n\n\n\nA gallery of interesting IPython Notebooks\n\n\nExcel plug-ins for Anaconda\n\n\n\n\nIpython Notebook Essentials\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\nChapter 1: A Tour of the IPython Notebook 7\nGetting started with Anaconda or Wakari 8\nInstalling Anaconda 8\nRunning the notebook 8\nCreating a Wakari account 10\nCreating your frst notebook 11\nExample \u2013 the coffee cooling problem 12\nExercises 22\nSummary 22\nChapter 2: The Notebook Interface 23\nEditing and navigating a notebook 23\nGetting help and interrupting computations 25\nThe Edit mode 25\nThe Command mode 28\nCell types 29\nIPython magics 33\nInteracting with the operating system 37\nSaving the notebook 37\nConverting the notebook to other formats 38\nRunning shell commands 39\nRunning scripts, loading data, and saving data 41\nRunning Python scripts 41\nRunning scripts in other languages 43\nLoading and saving data 45\nThe rich display system 47\nImages and YouTube videos 47\nHTML 49\nSummary 52\nChapter 3: Graphics with matplotlib 53\nThe plot function 54\nAdding a title, labels, and a legend 59\nText and annotations 62\nThree-dimensional plots 66\nAnimations 71\nSummary 77\nChapter 4: Handling Data with pandas 79\nThe Series class 79\nThe DataFrame class 88\nComputational and graphics tools 95\nAn example with a realistic dataset 101\nSummary 108\nChapter 5: Advanced Computing with SciPy, Numba, and NumbaPro 109\nOverview of SciPy 109\nAdvanced mathematical algorithms with SciPy 111\nSolving equations and fnding optimal values 111\nCalculus and differential equations 117\nAccelerating computations with Numba and NumbaPro 128\nSummary 138\nAppendix A: IPython Notebook Reference Card 139\nStarting the notebook 139\nKeyboard shortcuts 139\nShortcuts in the Edit mode 139\nShortcuts in the Command mode 140\nImporting modules 141\nGetting help 141\nAppendix B: A Brief Review of Python 143\nIntroduction 143\nBasic types, expressions, and variables and their assignment 143\nSequence types 147\nLists 147\nTuples 150\nStrings 151\nDictionaries 152\nControl structures 152\nFunctions, objects, and methods 156\nFunctions 156\nObjects and methods 158\nSummary 159\nAppendix C: NumPy Arrays 161\nIntroduction 161\nArray creation and member access 161\nIndexing and Slicing 164\nIndex 167\n\n\n\n\n\n\nLearning IPython for Interactive Computing and Data Visualization\n\u00b6\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\nChapter 1: Getting Started with IPython 5\nInstalling IPython and the recommended packages 6\nPrerequisites for IPython 6\nInstalling an all-in-one distribution 7\nInstalling the packages one by one 7\nPackages websites 8\nGetting binary installers 9\nUsing the Python packaging system 11\nInstalling the development versions 12\nTen IPython essentials 13\nRunning the IPython console 13\nUsing IPython as a system shell 14\nUsing the history 15\nTab completion 15\nExecuting a script with the %run command 16\nQuick benchmarking with the %timeit command 17\nQuick debugging with the %debug command 17\nInteractive computing with Pylab 18\nUsing the IPython Notebook 19\nCustomizing IPython 19\nSummary 20\nChapter 2: Interactive Work with IPython 21\nThe extended shell 21\nNavigating through the flesystem 22\nAccessing the system shell from IPython 24\nThe extended Python console 25\nExploring the history 26\nImport/export of Python code 27\nImporting code in IPython 27\nExporting code to a fle 29\nDynamic introspection 29\nTab completion 29\nSource code introspection 31\nUsing the interactive debugger 32\nInteractive benchmarking and profling 33\nControlling the execution time of a command 33\nProfling a script 34\nUsing the IPython notebook 35\nInstallation 36\nThe notebook dashboard 36\nWorking with cells 37\nCell magics 38\nManaging notebooks 39\nMultimedia and rich text editing 39\nGraph plotting 40\nSummary 41\nChapter 3: Numerical Computing with IPython 43\nA primer to vector computing 44\nAn example of computation with Python loops 44\nWhat an array is 45\nReimplementing the example with arrays 48\nCreating and loading arrays 50\nCreating arrays 50\nFrom scratch, element by element 50\nFrom scratch, using predefned templates 51\nFrom random values 52\nLoading arrays 53\nFrom a native Python object 53\nFrom a buffer or an external fle 53\nUsing Pandas 54\nWorking with arrays 56\nSelection 56\nUsing Pandas 57\nUsing NumPy 58\nMore indexing possibilities 59\nManipulation 60\nReshaping 60\nRepeating and concatenating 61\nBroadcasting 62\nPermuting 63\nComputation 63\nAdvanced mathematical processing 65\nSummary 66\nChapter 4: Interactive Plotting and Graphical Interfaces 67\nFigures with Matplotlib 68\nSetting up IPython for interactive visualization 68\nUsing Matplotlib 68\nInteractive navigation 69\nMatplotlib in the IPython notebook 69\nStandard plots 69\nCurves 69\nScatter plots 71\nBar graphs 72\nPlot customization 72\nStyles and colors 73\nGrid, axes, and legends 74\nInteraction from IPython 75\nDrawing multiple plots 76\nAdvanced fgures and graphics 76\nImage processing 77\nLoading images 77\nShowing images 78\nUsing PIL 79\nAdvanced image processing \u2013 color quantization 79\nMaps 81\n3D plots 83\nAnimations 84\nOther visualization packages 84\nGraphical User Interfaces (GUI) 84\nSetting up IPython for interactive GUIs 85\nA \"Hello World\" example 85\nSummary 87\nChapter 5: High-Performance and Parallel Computing 89\nInteractive task parallelization 90\nParallel computing in Python 90\nDistributing tasks on multiple cores 91\nStarting the engines 91\nCreating a Client instance 92\nUsing the parallel magic 92\nParallel map 93\nA practical example \u2013 Monte Carlo simulations 95\nUsing MPI with IPython 96\nAdvanced parallel computing features of IPython 98\nUsing C in IPython with Cython 99\nInstalling and confguring Cython 99\nUsing Cython from IPython 100\nAccelerating a pure Python algorithm with Cython 101\nPure Python version 101\nNa\u00efve Cython conversion 102\nAdding C types 102\nUsing NumPy and Cython 103\nPython version 103\nCython version 104\nMore advanced options for accelerating Python code 106\nSummary 107\nChapter 6: Customizing IPython 109\nIPython profles 109\nProfle locations 110\nThe IPython confguration fles 110\nLoading scripts when IPython starts 111\nIPython extensions 111\nExample \u2013 line-by-line profling 111\nCreating new extensions 113\nExample \u2013 executing C++ code in IPython 113\nRich representations in the frontend 115\nEmbedding IPython 117\nFinal words 117\nSummary 118\nIndex 119\n\n\n\n\n\n\nIPython Interactive Computing and Visualization Cookbook\n\u00b6\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\nChapter 1: A Tour of Interactive Computing with IPython 9\nIntroduction 9\nIntroducing the IPython notebook 13\nGetting started with exploratory data analysis in IPython 22\nIntroducing the multidimensional array in NumPy for fast array computations 28\nCreating an IPython extension with custom magic commands 32\nMastering IPython configuration system 36\nCreating a simple kernel for IPython 39\nChapter 2: Best Practices in Interactive Computing 45\nIntroduction 45\nChoosing (or not) between Python 2 and Python 3 46\nEffcient interactive computing work\ufb02ows with IPython 50\nLearning the basics of the distributed version control system Git 53\nA typical work\ufb02ow with Git branching 56\nTen tips for conducting reproducible interactive computing experiments 59\nWriting high-quality Python code 63\nWriting unit tests with nose 67\nDebugging your code with IPython 74\nChapter 3: Mastering the Notebook 79\nIntroduction 79\nTeaching programming in the notebook with IPython blocks 84\nConverting an IPython notebook to other formats with nbconvert 89\nAdding custom controls in the notebook toolbar 94\nCustomizing the CSS style in the notebook 96\nUsing interactive widgets \u2013 a piano in the notebook 99\nCreating a custom JavaScript widget in the notebook \u2013 a spreadsheet editor for pandas 103\nProcessing webcam images in real time from the notebook 108\nChapter 4: Profling and Optimization 115\nIntroduction 115\nEvaluating the time taken by a statement in IPython 116\nProfling your code easily with cProfle and IPython 117\nProfling your code line-by-line with line_profler 121\nProfling the memory usage of your code with memory_profler 124\nUnderstanding the internals of NumPy to avoid unnecessary array copying 127\nUsing stride tricks with NumPy 133\nImplementing an effcient rolling average algorithm with stride tricks 135\nMaking effcient array selections in NumPy 138\nProcessing huge NumPy arrays with memory mapping 140\nManipulating large arrays with HDF5 and PyTables 142\nManipulating large heterogeneous tables with HDF5 and PyTables 146\nChapter 5: High-performance Computing 149\nIntroduction 149\nAccelerating pure Python code with Numba and Just-In-Time compilation 154\nAccelerating array computations with Numexpr 158\nWrapping a C library in Python with ctypes 159\nAccelerating Python code with Cython 163\nOptimizing Cython code by writing less Python and more C 167\nReleasing the GIL to take advantage of multi-core processors with Cython and OpenMP 174\nWriting massively parallel code for NVIDIA graphics cards (GPUs) with CUDA 175\nWriting massively parallel code for heterogeneous platforms with OpenCL 181\nDistributing Python code across multiple cores with IPython 185\nInteracting with asynchronous parallel tasks in IPython 189\nParallelizing code with MPI in IPython 192\nTrying the Julia language in the notebook 195\nChapter 6: Advanced Visualization 201\nIntroduction 201\nMaking nicer matplotlib fgures with prettyplotlib 202\nCreating beautiful statistical plots with seaborn 205\nCreating interactive web visualizations with Bokeh 208\nVisualizing a NetworkX graph in the IPython notebook with D3.js 211\nConverting matplotlib fgures to D3.js visualizations with mpld3 215\nGetting started with Vispy for high-performance interactive data visualizations 218\nChapter 7: Statistical Data Analysis 225\nIntroduction 225\nExploring a dataset with pandas and matplotlib 229\nGetting started with statistical hypothesis testing \u2013 a simple z-test 233\nGetting started with Bayesian methods 236\nEstimating the correlation between two variables with a contingency table and a chi-squared test 241\nFitting a probability distribution to data with the maximum likelihood method 245\nEstimating a probability distribution nonparametrically with a kernel density estimation 251\nFitting a Bayesian model by sampling from a posterior distribution with a Markov chain Monte Carlo method 255\nAnalyzing data with the R programming language in the IPython notebook 261\nChapter 8: Machine Learning 267\nIntroduction 267\nGetting started with scikit-learn 273\nPredicting who will survive on the Titanic with logistic regression 281\nLearning to recognize handwritten digits with a K-nearest neighbors classifer 285\nLearning from text \u2013 Naive Bayes for Natural Language Processing 289\nUsing support vector machines for classifcation tasks 293\nUsing a random forest to select important features for regression 298\nReducing the dimensionality of a dataset with a principal component analysis 302\nDetecting hidden structures in a dataset with clustering 306\nChapter 9: Numerical Optimization 311\nIntroduction 311\nFinding the root of a mathematical function 314\nMinimizing a mathematical function 317\nFitting a function to data with nonlinear least squares 323\nFinding the equilibrium state of a physical system by minimizing its potential energy 326\nChapter 10: Signal Processing 333\nIntroduction 333\nAnalyzing the frequency components of a signal with a Fast Fourier Transform 337\nApplying a linear flter to a digital signal 343\nComputing the autocorrelation of a time series 349\nChapter 11: Image and Audio Processing 353\nIntroduction 353\nManipulating the exposure of an image 355\nApplying flters on an image 358\nSegmenting an image 362\nFinding points of interest in an image 367\nDetecting faces in an image with OpenCV 370\nApplying digital flters to speech sounds 373\nCreating a sound synthesizer in the notebook 377\nChapter 12: Deterministic Dynamical Systems 381\nIntroduction 381\nPlotting the bifurcation diagram of a chaotic dynamical system 383\nSimulating an elementary cellular automaton 387\nSimulating an ordinary differential equation with SciPy 390\nSimulating a partial differential equation \u2013 reaction-diffusion systems and Turing patterns 394\nChapter 13: Stochastic Dynamical Systems 401\nIntroduction 401\nSimulating a discrete-time Markov chain 402\nSimulating a Poisson process 406\nSimulating a Brownian motion 410\nSimulating a stochastic differential equation 412\nChapter 14: Graphs, Geometry, and Geographic Information Systems 417\nIntroduction 417\nManipulating and visualizing graphs with NetworkX 421\nAnalyzing a social network with NetworkX 425\nResolving dependencies in a directed acyclic graph with a topological sort 430\nComputing connected components in an image 434\nComputing the Voronoi diagram of a set of points 438\nManipulating geospatial data with Shapely and basemap 442\nCreating a route planner for a road network 446\nChapter 15: Symbolic and Numerical Mathematics 453\nIntroduction 453\nDiving into symbolic computing with SymPy 454\nSolving equations and inequalities 457\nAnalyzing real-valued functions 458\nComputing exact probabilities and manipulating random variables 460\nA bit of number theory with SymPy 462\nFinding a Boolean propositional formula from a truth table 465\nAnalyzing a nonlinear differential system \u2013 Lotka-Volterra (predator-prey) equations 467\nGetting started with Sage 470\nIndex 473\n\n\n\n\n\n\nIntroduction to Python for Econometrics, Statistics and Data Analysis\n\u00b6\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n1\n \nIntroduction\n \n1\n\n\n1.1\n \nBackground\n \n1\n\n\n1.2\n \nConventions\n \n2\n\n\n1.3\n \nImportant\n \nComponents\n \nof\n \nthe\n \nPython\n \nScientific\n \nStack\n \n3\n\n\n1.4\n \nSetup\n \n4\n\n\n1.5\n \nUsing\n \nPython\n \n6\n\n\n1.6\n \nExercises\n \n17\n\n\n1.\nA\n \nFrequently\n \nEncountered\n \nProblems\n \n17\n\n\n1.\nB\n \nregister_python\n.\npy\n \n18\n\n\n1.\nC\n \nAdvanced\n \nSetup\n \n19\n\n\n2\n \nPython\n \n2.7\n \nvs\n.\n \n3\n \n(\nand\n \nthe\n \nrest\n)\n \n27\n\n\n2.1\n \nPython\n \n2.7\n \nvs\n.\n \n3\n \n27\n\n\n2.2\n \nIntel\n \nMath\n \nKernel\n \nLibrary\n \nand\n \nAMD\n \nCore\n \nMath\n \nLibrary\n \n27\n\n\n2.3\n \nOther\n \nVariants\n \n28\n\n\n2.\nA\n \nRelevant\n \nDifferences\n \nbetween\n \nPython\n \n2.7\n \nand\n \n3\n \n29\n\n\n3\n \nBuilt\n-\nin\n \nData\n \nTypes\n \n31\n\n\n3.1\n \nVariable\n \nNames\n \n31\n\n\n3.2\n \nCore\n \nNative\n \nData\n \nTypes\n \n32\n\n\n3.3\n \nPython\n \nand\n \nMemory\n \nManagement\n \n42\n\n\n3.4\n \nExercises\n \n44\n\n\n4\n \nArrays\n \nand\n \nMatrices\n \n47\n\n\n4.1\n \nArray\n \n47\n\n\n4.2\n \nMatrix\n \n49\n\n\n4.3\n \n1\n-\ndimensional\n \nArrays\n \n50\n\n\n4.4\n \n2\n-\ndimensional\n \nArrays\n \n51\n\n\n4.5\n \nMultidimensional\n \nArrays\n \n51\n\n\n4.6\n \nConcatenation\n \n51\n\n\n4.7\n \nAccessing\n \nElements\n \nof\n \nan\n \nArray\n \n52\n\n\n4.8\n \nSlicing\n \nand\n \nMemory\n \nManagement\n \n57\n\n\n4.9\n \nimport\n \nand\n \nModules\n \n59\n\n\n4.10\n \nCalling\n \nFunctions\n \n59\n\n\n4.11\n \nExercises\n \n61\n\n\n5\n \nBasic\n \nMath\n \n63\n\n\n5.1\n \nOperators\n \n63\n\n\n5.2\n \nBroadcasting\n \n64\n\n\n5.3\n \nArray\n \nand\n \nMatrix\n \nAddition\n \n(\n+\n)\n \nand\n \nSubtraction\n \n(\n-\n)\n \n65\n\n\n5.4\n \nArray\n \nMultiplication\n \n(\nx\n)\n \n66\n\n\n5.5\n \nMatrix\n \nMultiplication\n \n(\nx\n)\n \n66\n\n\n5.6\n \nArray\n \nand\n \nMatrix\n \nDivision\n \n(\n=\n)\n \n66\n\n\n5.7\n \nArray\n \nExponentiation\n \n(\nxx\n)\n \n66\n\n\n5.8\n \nMatrix\n \nExponentiation\n \n(\nxx\n)\n \n67\n\n\n5.9\n \nParentheses\n \n67\n\n\n5.10\n \nTranspose\n \n67\n\n\n5.11\n \nOperator\n \nPrecedence\n \n67\n\n\n5.12\n \nExercises\n \n68\n\n\n6\n \nBasic\n \nFunctions\n \nand\n \nNumerical\n \nIndexing\n \n71\n\n\n6.1\n \nGenerating\n \nArrays\n \nand\n \nMatrices\n \n71\n\n\n6.2\n \nRounding\n \n74\n\n\n6.3\n \nMathematics\n \n75\n\n\n6.4\n \nComplex\n \nValues\n \n77\n\n\n6.5\n \nSet\n \nFunctions\n \n77\n\n\n6.6\n \nSorting\n \nand\n \nExtreme\n \nValues\n \n78\n\n\n6.7\n \nNan\n \nFunctions\n \n80\n\n\n6.8\n \nFunctions\n \nand\n \nMethods\n/\nProperties\n \n81\n\n\n6.9\n \nExercises\n \n82\n\n\n7\n \nSpecial\n \nArrays\n \n83\n\n\n7.1\n \nExercises\n \n84\n\n\n8\n \nArray\n \nand\n \nMatrix\n \nFunctions\n \n85\n\n\n8.1\n \nViews\n \n85\n\n\n8.2\n \nShape\n \nInformation\n \nand\n \nTransformation\n \n86\n\n\n8.3\n \nLinear\n \nAlgebra\n \nFunctions\n \n93\n\n\n8.4\n \nExercises\n \n96\n\n\n9\n \nImporting\n \nand\n \nExporting\n \nData\n \n99\n\n\n9.1\n \nImporting\n \nData\n \nusing\n \npandas\n \n99\n\n\n9.2\n \nImporting\n \nData\n \nwithout\n \npandas\n \n100\n\n\n9.3\n \nSaving\n \nor\n \nExporting\n \nData\n \nusing\n \npandas\n \n106\n\n\n9.4\n \nSaving\n \nor\n \nExporting\n \nData\n \nwithout\n \npandas\n \n106\n\n\n9.5\n \nExercises\n \n107\n\n\n10\n \nInf\n,\n \nNaN\n \nand\n \nNumeric\n \nLimits\n \n109\n\n\n10.1\n \ninf\n \nand\n \nNaN\n \n109\n\n\n10.2\n \nFloating\n \npoint\n \nprecision\n \n109\n\n\n10.3\n \nExercises\n \n110\n\n\n11\n \nLogical\n \nOperators\n \nand\n \nFind\n \n113\n\n\n11.1\n \n>\n,\n \n>=\n,\n \n<\n,\n \n<=\n,\n \n==\n,\n \n!=\n \n113\n\n\n11.2\n \nand\n,\n \nor\n,\n \nnot\n \nand\n \nxor\n \n114\n\n\n11.3\n \nMultiple\n \ntests\n \n115\n\n\n11.4\n \nis\n*\n \n116\n\n\n11.5\n \nExercises\n \n117\n\n\n12\n \nAdvanced\n \nSelection\n \nand\n \nAssignment\n \n119\n\n\n12.1\n \nNumerical\n \nIndexing\n \n119\n\n\n12.2\n \nLogical\n \nIndexing\n \n124\n\n\n12.3\n \nPerformance\n \nConsiderations\n \nand\n \nMemory\n \nManagement\n \n128\n\n\n12.4\n \nAssignment\n \nwith\n \nBroadcasting\n \n128\n\n\n12.5\n \nExercises\n \n130\n\n\n13\n \nFlow\n \nControl\n,\n \nLoops\n \nand\n \nException\n \nHandling\n \n133\n\n\n13.1\n \nWhitespace\n \nand\n \nFlow\n \nControl\n \n133\n\n\n13.2\n \nif\n \n.\n \n.\n \n.\n \nelif\n \n.\n \n.\n \n.\n \nelse\n  \n133\n\n\n13.3\n \nfor\n \n134\n\n\n13.4\n \nwhile\n \n137\n\n\n13.5\n \ntry\n \n.\n \n.\n \n.\n \nexcept\n \n139\n\n\n13.6\n \nList\n \nComprehensions\n \n139\n\n\n13.7\n \nTuple\n,\n \nDictionary\n \nand\n \nSet\n \nComprehensions\n \n141\n\n\n13.8\n \nExercises\n \n141\n\n\n14\n \nDates\n \nand\n \nTimes\n \n143\n\n\n14.1\n \nCreating\n \nDates\n \nand\n \nTimes\n \n143\n\n\n14.2\n \nDates\n \nMathematics\n \n143\n\n\n14.3\n \nNumpy\n \ndatetime64\n \n144\n\n\n15\n \nGraphics\n \n147\n\n\n15.1\n \nseaborn\n \n147\n\n\n15.2\n \n2\nD\n \nPlotting\n \n147\n\n\n15.3\n \nAdvanced\n \n2\nD\n \nPlotting\n \n153\n\n\n15.4\n \n3\nD\n \nPlotting\n \n162\n\n\n15.5\n \nGeneral\n \nPlotting\n \nFunctions\n \n165\n\n\n15.6\n \nExporting\n \nPlots\n \n165\n\n\n15.7\n \nExercises\n \n166\n\n\n16\n \nStructured\n \nArrays\n \n167\n\n\n16.1\n \nMixed\n \nArrays\n \nwith\n \nColumn\n \nNames\n \n167\n\n\n16.2\n \nRecord\n \nArrays\n \n170\n\n\n17\n \npandas\n \n171\n\n\n17.1\n \nData\n \nStructures\n \n171\n\n\n17.2\n \nStatistical\n \nFunction\n \n191\n\n\n17.3\n \nTime\n-\nseries\n \nData\n \n192\n\n\n17.4\n \nImporting\n \nand\n \nExporting\n \nData\n \n196\n\n\n17.5\n \nGraphics\n \n200\n\n\n17.6\n \nExamples\n \n201\n\n\n18\n \nCustom\n \nFunction\n \nand\n \nModules\n \n207\n\n\n18.1\n \nFunctions\n \n207\n\n\n18.2\n \nVariable\n \nScope\n \n214\n\n\n18.3\n \nExample\n:\n \nLeast\n \nSquares\n \nwith\n \nNewey\n-\nWest\n \nCovariance\n \n215\n\n\n18.4\n \nAnonymous\n \nFunctions\n \n216\n\n\n18.5\n \nModules\n \n216\n\n\n18.6\n \nPackages\n \n217\n\n\n18.7\n \nPYTHONPATH\n \n219\n\n\n18.8\n \nPython\n \nCoding\n \nConventions\n \n219\n\n\n18.9\n \nExercises\n \n220\n\n\n18.\nA\n \nListing\n \nof\n \neconometrics\n.\npy\n \n221\n\n\n19\n \nProbability\n \nand\n \nStatistics\n \nFunctions\n \n225\n\n\n19.1\n \nSimulating\n \nRandom\n \nVariables\n \n225\n\n\n19.2\n \nSimulation\n \nand\n \nRandom\n \nNumber\n \nGeneration\n \n229\n\n\n19.3\n \nStatistics\n \nFunctions\n \n231\n\n\n19.4\n \nContinuous\n \nRandom\n \nVariables\n \n234\n\n\n19.5\n \nSelect\n \nStatistics\n \nFunctions\n \n237\n\n\n19.6\n \nSelect\n \nStatistical\n \nTests\n \n240\n\n\n19.7\n \nExercises\n \n241\n\n\n20\n \nNon\n-\nlinear\n \nFunction\n \nOptimization\n \n243\n\n\n20.1\n \nUnconstrained\n \nOptimization\n \n244\n\n\n20.2\n \nDerivative\n-\nfree\n \nOptimization\n \n247\n\n\n20.3\n \nConstrained\n \nOptimization\n \n248\n\n\n20.4\n \nScalar\n \nFunction\n \nMinimization\n \n252\n\n\n20.5\n \nNonlinear\n \nLeast\n \nSquares\n \n253\n\n\n20.6\n \nExercises\n \n254\n\n\n21\n \nString\n \nManipulation\n \n255\n\n\n21.1\n \nString\n \nBuilding\n \n255\n\n\n21.2\n \nString\n \nFunctions\n \n256\n\n\n21.3\n \nFormatting\n \nNumbers\n \n260\n\n\n21.4\n \nRegular\n \nExpressions\n \n264\n\n\n21.5\n \nSafe\n \nConversion\n \nof\n \nStrings\n \n265\n\n\n22\n \nFile\n \nSystem\n \nOperations\n \n267\n\n\n22.1\n \nChanging\n \nthe\n \nWorking\n \nDirectory\n \n267\n\n\n22.2\n \nCreating\n \nand\n \nDeleting\n \nDirectories\n \n267\n\n\n22.3\n \nListing\n \nthe\n \nContents\n \nof\n \na\n \nDirectory\n \n268\n\n\n22.4\n \nCopying\n,\n \nMoving\n \nand\n \nDeleting\n \nFiles\n \n268\n\n\n22.5\n \nExecuting\n \nOther\n \nPrograms\n \n269\n\n\n22.6\n \nCreating\n \nand\n \nOpening\n \nArchives\n \n269\n\n\n22.7\n \nReading\n \nand\n \nWriting\n \nFiles\n \n270\n\n\n22.8\n \nExercises\n \n272\n\n\n23\n \nPerformance\n \nand\n \nCode\n \nOptimization\n \n273\n\n\n23.1\n \nGetting\n \nStarted\n \n273\n\n\n23.2\n \nTiming\n \nCode\n \n273\n\n\n23.3\n \nVectorize\n \nto\n \nAvoid\n \nUnnecessary\n \nLoops\n \n274\n\n\n23.4\n \nAlter\n \nthe\n \nloop\n \ndimensions\n \n275\n\n\n23.5\n \nUtilize\n \nBroadcasting\n \n276\n\n\n23.6\n \nUse\n \nIn\n-\nplace\n \nAssignment\n \n276\n\n\n23.7\n \nAvoid\n \nAllocating\n \nMemory\n \n276\n\n\n23.8\n \nInline\n \nFrequent\n \nFunction\n \nCalls\n \n276\n\n\n23.9\n \nConsider\n \nData\n \nLocality\n \nin\n \nArrays\n \n276\n\n\n23.10\n \nProfile\n \nLong\n \nRunning\n \nFunctions\n \n277\n\n\n23.11\n \nNumba\n \n282\n\n\n23.12\n \nCython\n \n288\n\n\n23.13\n \nExternal\n \nCode\n \n297\n\n\n23.14\n \nExercises\n \n302\n\n\n24\n \nExecuting\n \nCode\n \nin\n \nParallel\n \n303\n\n\n24.1\n \nmap\n \nand\n \nrelated\n \nfunctions\n \n303\n\n\n24.2\n \nmultiprocessing\n \n304\n\n\n24.3\n \njoblib\n \n306\n\n\n24.4\n \nIPython\n\u2019\ns\n \nParallel\n \nCluster\n \n308\n\n\n24.5\n \nConverting\n \na\n \nSerial\n \nProgram\n \nto\n \nParallel\n \n314\n\n\n24.6\n \nOther\n \nConcerns\n \nwhen\n \nexecuting\n \nin\n \nParallel\n \n316\n\n\n25\n \nObject\n \nOriented\n \nProgramming\n \n(\nOOP\n)\n \n319\n\n\n25.1\n \nIntroduction\n \n319\n\n\n25.2\n \nClass\n \nbasics\n \n320\n\n\n25.3\n \nBuilding\n \na\n \nclass\n \nfor\n \nAutoregressions\n \n322\n\n\n25.4\n \nExercises\n \n329\n\n\n26\n \nOther\n \nInteresting\n \nPython\n \nPackages\n \n331\n\n\n26.1\n \nstatsmodels\n \n331\n\n\n26.2\n \npytz\n \nand\n \nbabel\n \n331\n\n\n26.3\n \nrpy2\n \n331\n\n\n26.4\n \nPyTables\n \nand\n \nh5py\n \n331\n\n\n27\n \nExamples\n \n333\n\n\n27.1\n \nEstimating\n \nthe\n \nParameters\n \nof\n \na\n \nGARCH\n \nModel\n \n333\n\n\n27.2\n \nEstimating\n \nthe\n \nRisk\n \nPremia\n \nusing\n \nFama\n-\nMacBeth\n \nRegressions\n \n338\n\n\n27.3\n \nEstimating\n \nthe\n \nRisk\n \nPremia\n \nusing\n \nGMM\n \n341\n\n\n27.4\n \nOutputting\n \nL\n \nATEX\n \n344\n\n\n28\n \nQuick\n \nReference\n \n347\n\n\n28.1\n \nBuilt\n-\nins\n \n347\n\n\n28.2\n \nNumPy\n \n(\nnumpy\n)\n \n354\n\n\n28.3\n \nSciPy\n \n369\n\n\n28.4\n \nMatplotlib\n \n372\n\n\n28.5\n \nPandas\n \n374\n\n\n28.6\n \nIPython\n \n378\n\n\n\n\n\n\n\nBuilding Machine Learning Systems with Python\n\u00b6\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\nChapter 1: Getting Started with Python Machine Learning 7\nMachine learning and Python \u2013 the dream team 8\nWhat the book will teach you (and what it will not) 9\nWhat to do when you are stuck 10\nGetting started 11\nIntroduction to NumPy, SciPy, and Matplotlib 12\nInstalling Python 12\nChewing data effciently with NumPy and intelligently with SciPy 12\nLearning NumPy 13\nIndexing 15\nHandling non-existing values 15\nComparing runtime behaviors 16\nLearning SciPy 17\nOur frst (tiny) machine learning application 19\nReading in the data 19\nPreprocessing and cleaning the data 20\nChoosing the right model and learning algorithm 22\nBefore building our frst model 22\nStarting with a simple straight line 22\nTowards some advanced stuff 24\nStepping back to go forward \u2013 another look at our data 26\nTraining and testing 28\nAnswering our initial question 30\nSummary 31\nChapter 2: Learning How to Classify with Real-world Examples 33\nThe Iris dataset 33\nThe frst step is visualization 34\nBuilding our frst classifcation model 35\nEvaluation \u2013 holding out data and cross-validation 38\nBuilding more complex classifers 40\nA more complex dataset and a more complex classifer 41\nLearning about the Seeds dataset 42\nFeatures and feature engineering 43\nNearest neighbor classifcation 44\nBinary and multiclass classifcation 47\nSummary 48\nChapter 3: Clustering \u2013 Finding Related Posts 49\nMeasuring the relatedness of posts 50\nHow not to do it 50\nHow to do it 51\nPreprocessing \u2013 similarity measured as similar number of common words 51\nConverting raw text into a bag-of-words 52\nCounting words 53\nNormalizing the word count vectors 56\nRemoving less important words 56\nStemming 57\nInstalling and using NLTK 58\nExtending the vectorizer with NLTK's stemmer 59\nStop words on steroids 60\nOur achievements and goals 61\nClustering 62\nKMeans 63\nGetting test data to evaluate our ideas on 65\nClustering posts 67\nSolving our initial challenge 68\nAnother look at noise 71\nTweaking the parameters 72\nSummary 73\nChapter 4: Topic Modeling 75\nLatent Dirichlet allocation (LDA) 75\nBuilding a topic model 76\nComparing similarity in topic space 80\nModeling the whole of Wikipedia 83\nChoosing the number of topics 86\nSummary 87\nChapter 5: Classifcation \u2013 Detecting Poor Answers 89\nSketching our roadmap 90\nLearning to classify classy answers 90\nTuning the instance 90\nTuning the classifer 90\nFetching the data 91\nSlimming the data down to chewable chunks 92\nPreselection and processing of attributes 93\nDefning what is a good answer 94\nCreating our frst classifer 95\nStarting with the k-nearest neighbor (kNN) algorithm 95\nEngineering the features 96\nTraining the classifer 97\nMeasuring the classifer's performance 97\nDesigning more features 98\nDeciding how to improve 101\nBias-variance and its trade-off 102\nFixing high bias 102\nFixing high variance 103\nHigh bias or low bias 103\nUsing logistic regression 105\nA bit of math with a small example 106\nApplying logistic regression to our postclassifcation problem 108\nLooking behind accuracy \u2013 precision and recall 110\nSlimming the classifer 114\nShip it! 115\nSummary 115\nChapter 6: Classifcation II \u2013 Sentiment Analysis 117\nSketching our roadmap 117\nFetching the Twitter data 118\nIntroducing the Naive Bayes classifer 118\nGetting to know the Bayes theorem 119\nBeing naive 120\nUsing Naive Bayes to classify 121\nAccounting for unseen words and other oddities 124\nAccounting for arithmetic under\ufb02ows 125\nCreating our frst classifer and tuning it 127\nSolving an easy problem frst 128\nUsing all the classes 130\nTuning the classifer's parameters 132\nCleaning tweets 136\nTaking the word types into account 138\nDetermining the word types 139\nSuccessfully cheating using SentiWordNet 141\nOur frst estimator 143\nPutting everything together 145\nSummary 146\nChapter 7: Regression \u2013 Recommendations 147\nPredicting house prices with regression 147\nMultidimensional regression 151\nCross-validation for regression 151\nPenalized regression 153\nL1 and L2 penalties 153\nUsing Lasso or Elastic nets in scikit-learn 154\nP greater than N scenarios 155\nAn example based on text 156\nSetting hyperparameters in a smart way 158\nRating prediction and recommendations 159\nSummary 163\nChapter 8: Regression \u2013 Recommendations Improved 165\nImproved recommendations 165\nUsing the binary matrix of recommendations 166\nLooking at the movie neighbors 168\nCombining multiple methods 169\nBasket analysis 172\nObtaining useful predictions 173\nAnalyzing supermarket shopping baskets 173\nAssociation rule mining 176\nMore advanced basket analysis 178\nSummary 179\nChapter 9: Classifcation III \u2013 Music Genre Classifcation 181\nSketching our roadmap 181\nFetching the music data 182\nConverting into a wave format 182\nLooking at music 182\nDecomposing music into sine wave components 184\nUsing FFT to build our frst classifer 186\nIncreasing experimentation agility 186\nTraining the classifer 187\nUsing the confusion matrix to measure accuracy in multiclass problems 188\nAn alternate way to measure classifer performance using receiver operator characteristic (ROC) 190\nImproving classifcation performance with Mel Frequency Cepstral Coeffcients 193\nSummary 197\nChapter 10: Computer Vision \u2013 Pattern Recognition 199\nIntroducing image processing 199\nLoading and displaying images 200\nBasic image processing 201\nThresholding 202\nGaussian blurring 205\nFiltering for different effects 207\nAdding salt and pepper noise 207\nPutting the center in focus 208\nPattern recognition 210\nComputing features from images 211\nWriting your own features 212\nClassifying a harder dataset 215\nLocal feature representations 216\nSummary 219\nChapter 11: Dimensionality Reduction 221\nSketching our roadmap 222\nSelecting features 222\nDetecting redundant features using flters 223\nCorrelation 223\nMutual information 225\nAsking the model about the features using wrappers 230\nOther feature selection methods 232\nFeature extraction 233\nAbout principal component analysis (PCA) 233\nSketching PCA 234\nApplying PCA 234\nLimitations of PCA and how LDA can help 236\nMultidimensional scaling (MDS) 237\nSummary 240\nChapter 12: Big(ger) Data 241\nLearning about big data 241\nUsing jug to break up your pipeline into tasks 242\nAbout tasks 242\nReusing partial results 245\nLooking under the hood 246\nUsing jug for data analysis 246\nUsing Amazon Web Services (AWS) 248\nCreating your frst machines 250\nInstalling Python packages on Amazon Linux 253\nRunning jug on our cloud machine 254\nAutomating the generation of clusters with starcluster 255\nSummary 259\nAppendix: Where to Learn More about Machine Learning 261\nOnline courses 261\nBooks 261\nQ&A sites 262\nBlogs 262\nData sources 263\nGetting competitive 263\nWhat was left out 264\nSummary 264\nIndex 265\n\n\n\n\n\n\nScipy Lecture Notes\n\u00b6\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\nI Getting started with Python for science 2\n1 Scientific computing with tools and workflow 4\n1.1 Why Python? 4\n1.2 Scientific Python building blocks 5\n1.3 The interactive workflow: IPython and a text editor 6\n2 The Python language 10\n2.1 First steps 10\n2.2 Basic types 11\n2.3 Control Flow 18\n2.4 Defining functions 22\n2.5 Reusing code: scripts and modules 27\n2.6 Input and Output 34\n2.7 Standard Library 35\n2.8 Exception handling in Python 39\n2.9 Object-oriented programming (OOP) 42\n3 NumPy: creating and manipulating numerical data 43\n3.1 The Numpy array object 43\n3.2 Numerical operations on arrays 55\n3.3 More elaborate arrays 68\n3.4 Advanced operations 72\n3.5 Some exercises 77\n4 Matplotlib: plotting 82\n4.1 Introduction 82\n4.2 Simple plot 83\n4.3 Figures, Subplots, Axes and Ticks 89\n4.4 Other Types of Plots: examples and exercises 90\n4.5 Beyond this tutorial 96\n4.6 Quick references 98\n5 Scipy : high-level scientific computing 101\n5.1 File input/output: scipy.io 102\n5.2 Special functions: scipy.special 103\n5.3 Linear algebra operations: scipy.linalg 103\n5.4 Fast Fourier transforms: scipy.fftpack 104\n5.5 Optimization and fit: scipy.optimize 109\n5.6 Statistics and random numbers: scipy.stats 113\n5.7 Interpolation: scipy.interpolate 115\n5.8 Numerical integration: scipy.integrate 116\n5.9 Signal processing: scipy.signal 118\n5.10 Image processing: scipy.ndimage 120\n5.11 Summary exercises on scientific computing 124\n6 Getting help and finding documentation 137\nII Advanced topics 140\n7 Advanced Python Constructs 142\n7.1 Iterators, generator expressions and generators 142\n7.2 Decorators 147\n7.3 Context managers 155\n8 Advanced Numpy 159\n8.1 Life of ndarray 160\n8.2 Universal functions 173\n8.3 Interoperability features 182\n8.4 Array siblings: chararray, maskedarray, matrix 185\n8.5 Summary 188\n8.6 Contributing to Numpy/Scipy 188\n9 Debugging code 192\n9.1 Avoiding bugs 192\n9.2 Debugging workflow 195\n9.3 Using the Python debugger 195\n9.4 Debugging segmentation faults using gdb 200\n10 Optimizing code 203\n10.1 Optimization workflow 203\n10.2 Profiling Python code 203\n10.3 Making code go faster 206\n10.4 Writing faster numerical code 207\n11 Sparse Matrices in SciPy 210\n11.1 Introduction 210\n11.2 Storage Schemes 212\n11.3 Linear System Solvers 224\n11.4 Other Interesting Packages 229\n12 Image manipulation and processing using Numpy and Scipy 230\n12.1 Opening and writing to image files 231\n12.2 Displaying images 232\n12.3 Basic manipulations 233\n12.4 Image filtering 235\n12.5 Feature extraction 240\n12.6 Measuring objects properties: ndimage.measurements 243\n13 Mathematical optimization: finding minima of functions 248\n13.1 Knowing your problem 249\n13.2 A review of the different optimizers 251\n13.3 Practical guide to optimization with scipy 258\n13.4 Special case: non-linear least-squares 260\n13.5 Optimization with constraints 261\n14 Interfacing with C 263\n14.1 Introduction 263\n14.2 Python-C-Api 264\n14.3 Ctypes 268\n14.4 SWIG 272\n14.5 Cython 276\n14.6 Summary 279\n14.7 Further Reading and References 280\n14.8 Exercises 280\nIII Packages and applications 282\n15 Statistics in Python 284\n15.1 Data representation and interaction 285\n15.2 Hypothesis testing: comparing two groups 289\n15.3 Linear models, multiple factors, and analysis of variance 292\n15.4 More visualization: seaborn for statistical exploration 297\n15.5 Testing for interactions 299\n16 Sympy : Symbolic Mathematics in Python 301\n16.1 First Steps with SymPy 302\n16.2 Algebraic manipulations 303\n16.3 Calculus 304\n16.4 Equation solving 305\n16.5 Linear Algebra 306\n17 Scikit-image: image processing 308\n17.1 Introduction and concepts 308\n17.2 Input/output, data types and colorspaces 310\n17.3 Image preprocessing / enhancement 312\n17.4 Image segmentation 315\n17.5 Measuring regions\u2019 properties 318\n17.6 Data visualization and interaction 318\n17.7 Feature extraction for computer vision 320\n18 Traits: building interactive dialogs 322\n18.1 Introduction 323\n18.2 Example 323\n18.3 What are Traits 324\n19 3D plotting with Mayavi 340\n19.1 Mlab: the scripting interface 340\n19.2 Interactive work 346\n19.3 Slicing and dicing data: sources, modules and filters 347\n19.4 Animating the data 349\n19.5 Making interactive dialogs 350\n19.6 Putting it together 351\n20 scikit-learn: machine learning in Python 353\n20.1 Loading an example dataset 354\n20.2 Classification 355\n20.3 Clustering: grouping observations together 357\n20.4 Dimension Reduction with Principal Component Analysis 359\n20.5 Putting it all together: face recognition 360\n20.6 Linear model: from regression to sparsity 361\n20.7 Model selection: choosing estimators and their parameters 362\nIndex 363",
            "title": "IPython Notebook, Collection"
        },
        {
            "location": "/IPython Notebook/#ipython-notebook-essentials",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73 Chapter 1: A Tour of the IPython Notebook 7\nGetting started with Anaconda or Wakari 8\nInstalling Anaconda 8\nRunning the notebook 8\nCreating a Wakari account 10\nCreating your frst notebook 11\nExample \u2013 the coffee cooling problem 12\nExercises 22\nSummary 22\nChapter 2: The Notebook Interface 23\nEditing and navigating a notebook 23\nGetting help and interrupting computations 25\nThe Edit mode 25\nThe Command mode 28\nCell types 29\nIPython magics 33\nInteracting with the operating system 37\nSaving the notebook 37\nConverting the notebook to other formats 38\nRunning shell commands 39\nRunning scripts, loading data, and saving data 41\nRunning Python scripts 41\nRunning scripts in other languages 43\nLoading and saving data 45\nThe rich display system 47\nImages and YouTube videos 47\nHTML 49\nSummary 52\nChapter 3: Graphics with matplotlib 53\nThe plot function 54\nAdding a title, labels, and a legend 59\nText and annotations 62\nThree-dimensional plots 66\nAnimations 71\nSummary 77\nChapter 4: Handling Data with pandas 79\nThe Series class 79\nThe DataFrame class 88\nComputational and graphics tools 95\nAn example with a realistic dataset 101\nSummary 108\nChapter 5: Advanced Computing with SciPy, Numba, and NumbaPro 109\nOverview of SciPy 109\nAdvanced mathematical algorithms with SciPy 111\nSolving equations and fnding optimal values 111\nCalculus and differential equations 117\nAccelerating computations with Numba and NumbaPro 128\nSummary 138\nAppendix A: IPython Notebook Reference Card 139\nStarting the notebook 139\nKeyboard shortcuts 139\nShortcuts in the Edit mode 139\nShortcuts in the Command mode 140\nImporting modules 141\nGetting help 141\nAppendix B: A Brief Review of Python 143\nIntroduction 143\nBasic types, expressions, and variables and their assignment 143\nSequence types 147\nLists 147\nTuples 150\nStrings 151\nDictionaries 152\nControl structures 152\nFunctions, objects, and methods 156\nFunctions 156\nObjects and methods 158\nSummary 159\nAppendix C: NumPy Arrays 161\nIntroduction 161\nArray creation and member access 161\nIndexing and Slicing 164\nIndex 167",
            "title": "Ipython Notebook Essentials"
        },
        {
            "location": "/IPython Notebook/#learning-ipython-for-interactive-computing-and-data-visualization",
            "text": "1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139 Chapter 1: Getting Started with IPython 5\nInstalling IPython and the recommended packages 6\nPrerequisites for IPython 6\nInstalling an all-in-one distribution 7\nInstalling the packages one by one 7\nPackages websites 8\nGetting binary installers 9\nUsing the Python packaging system 11\nInstalling the development versions 12\nTen IPython essentials 13\nRunning the IPython console 13\nUsing IPython as a system shell 14\nUsing the history 15\nTab completion 15\nExecuting a script with the %run command 16\nQuick benchmarking with the %timeit command 17\nQuick debugging with the %debug command 17\nInteractive computing with Pylab 18\nUsing the IPython Notebook 19\nCustomizing IPython 19\nSummary 20\nChapter 2: Interactive Work with IPython 21\nThe extended shell 21\nNavigating through the flesystem 22\nAccessing the system shell from IPython 24\nThe extended Python console 25\nExploring the history 26\nImport/export of Python code 27\nImporting code in IPython 27\nExporting code to a fle 29\nDynamic introspection 29\nTab completion 29\nSource code introspection 31\nUsing the interactive debugger 32\nInteractive benchmarking and profling 33\nControlling the execution time of a command 33\nProfling a script 34\nUsing the IPython notebook 35\nInstallation 36\nThe notebook dashboard 36\nWorking with cells 37\nCell magics 38\nManaging notebooks 39\nMultimedia and rich text editing 39\nGraph plotting 40\nSummary 41\nChapter 3: Numerical Computing with IPython 43\nA primer to vector computing 44\nAn example of computation with Python loops 44\nWhat an array is 45\nReimplementing the example with arrays 48\nCreating and loading arrays 50\nCreating arrays 50\nFrom scratch, element by element 50\nFrom scratch, using predefned templates 51\nFrom random values 52\nLoading arrays 53\nFrom a native Python object 53\nFrom a buffer or an external fle 53\nUsing Pandas 54\nWorking with arrays 56\nSelection 56\nUsing Pandas 57\nUsing NumPy 58\nMore indexing possibilities 59\nManipulation 60\nReshaping 60\nRepeating and concatenating 61\nBroadcasting 62\nPermuting 63\nComputation 63\nAdvanced mathematical processing 65\nSummary 66\nChapter 4: Interactive Plotting and Graphical Interfaces 67\nFigures with Matplotlib 68\nSetting up IPython for interactive visualization 68\nUsing Matplotlib 68\nInteractive navigation 69\nMatplotlib in the IPython notebook 69\nStandard plots 69\nCurves 69\nScatter plots 71\nBar graphs 72\nPlot customization 72\nStyles and colors 73\nGrid, axes, and legends 74\nInteraction from IPython 75\nDrawing multiple plots 76\nAdvanced fgures and graphics 76\nImage processing 77\nLoading images 77\nShowing images 78\nUsing PIL 79\nAdvanced image processing \u2013 color quantization 79\nMaps 81\n3D plots 83\nAnimations 84\nOther visualization packages 84\nGraphical User Interfaces (GUI) 84\nSetting up IPython for interactive GUIs 85\nA \"Hello World\" example 85\nSummary 87\nChapter 5: High-Performance and Parallel Computing 89\nInteractive task parallelization 90\nParallel computing in Python 90\nDistributing tasks on multiple cores 91\nStarting the engines 91\nCreating a Client instance 92\nUsing the parallel magic 92\nParallel map 93\nA practical example \u2013 Monte Carlo simulations 95\nUsing MPI with IPython 96\nAdvanced parallel computing features of IPython 98\nUsing C in IPython with Cython 99\nInstalling and confguring Cython 99\nUsing Cython from IPython 100\nAccelerating a pure Python algorithm with Cython 101\nPure Python version 101\nNa\u00efve Cython conversion 102\nAdding C types 102\nUsing NumPy and Cython 103\nPython version 103\nCython version 104\nMore advanced options for accelerating Python code 106\nSummary 107\nChapter 6: Customizing IPython 109\nIPython profles 109\nProfle locations 110\nThe IPython confguration fles 110\nLoading scripts when IPython starts 111\nIPython extensions 111\nExample \u2013 line-by-line profling 111\nCreating new extensions 113\nExample \u2013 executing C++ code in IPython 113\nRich representations in the frontend 115\nEmbedding IPython 117\nFinal words 117\nSummary 118\nIndex 119",
            "title": "Learning IPython for Interactive Computing and Data Visualization"
        },
        {
            "location": "/IPython Notebook/#ipython-interactive-computing-and-visualization-cookbook",
            "text": "1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134 Chapter 1: A Tour of Interactive Computing with IPython 9\nIntroduction 9\nIntroducing the IPython notebook 13\nGetting started with exploratory data analysis in IPython 22\nIntroducing the multidimensional array in NumPy for fast array computations 28\nCreating an IPython extension with custom magic commands 32\nMastering IPython configuration system 36\nCreating a simple kernel for IPython 39\nChapter 2: Best Practices in Interactive Computing 45\nIntroduction 45\nChoosing (or not) between Python 2 and Python 3 46\nEffcient interactive computing work\ufb02ows with IPython 50\nLearning the basics of the distributed version control system Git 53\nA typical work\ufb02ow with Git branching 56\nTen tips for conducting reproducible interactive computing experiments 59\nWriting high-quality Python code 63\nWriting unit tests with nose 67\nDebugging your code with IPython 74\nChapter 3: Mastering the Notebook 79\nIntroduction 79\nTeaching programming in the notebook with IPython blocks 84\nConverting an IPython notebook to other formats with nbconvert 89\nAdding custom controls in the notebook toolbar 94\nCustomizing the CSS style in the notebook 96\nUsing interactive widgets \u2013 a piano in the notebook 99\nCreating a custom JavaScript widget in the notebook \u2013 a spreadsheet editor for pandas 103\nProcessing webcam images in real time from the notebook 108\nChapter 4: Profling and Optimization 115\nIntroduction 115\nEvaluating the time taken by a statement in IPython 116\nProfling your code easily with cProfle and IPython 117\nProfling your code line-by-line with line_profler 121\nProfling the memory usage of your code with memory_profler 124\nUnderstanding the internals of NumPy to avoid unnecessary array copying 127\nUsing stride tricks with NumPy 133\nImplementing an effcient rolling average algorithm with stride tricks 135\nMaking effcient array selections in NumPy 138\nProcessing huge NumPy arrays with memory mapping 140\nManipulating large arrays with HDF5 and PyTables 142\nManipulating large heterogeneous tables with HDF5 and PyTables 146\nChapter 5: High-performance Computing 149\nIntroduction 149\nAccelerating pure Python code with Numba and Just-In-Time compilation 154\nAccelerating array computations with Numexpr 158\nWrapping a C library in Python with ctypes 159\nAccelerating Python code with Cython 163\nOptimizing Cython code by writing less Python and more C 167\nReleasing the GIL to take advantage of multi-core processors with Cython and OpenMP 174\nWriting massively parallel code for NVIDIA graphics cards (GPUs) with CUDA 175\nWriting massively parallel code for heterogeneous platforms with OpenCL 181\nDistributing Python code across multiple cores with IPython 185\nInteracting with asynchronous parallel tasks in IPython 189\nParallelizing code with MPI in IPython 192\nTrying the Julia language in the notebook 195\nChapter 6: Advanced Visualization 201\nIntroduction 201\nMaking nicer matplotlib fgures with prettyplotlib 202\nCreating beautiful statistical plots with seaborn 205\nCreating interactive web visualizations with Bokeh 208\nVisualizing a NetworkX graph in the IPython notebook with D3.js 211\nConverting matplotlib fgures to D3.js visualizations with mpld3 215\nGetting started with Vispy for high-performance interactive data visualizations 218\nChapter 7: Statistical Data Analysis 225\nIntroduction 225\nExploring a dataset with pandas and matplotlib 229\nGetting started with statistical hypothesis testing \u2013 a simple z-test 233\nGetting started with Bayesian methods 236\nEstimating the correlation between two variables with a contingency table and a chi-squared test 241\nFitting a probability distribution to data with the maximum likelihood method 245\nEstimating a probability distribution nonparametrically with a kernel density estimation 251\nFitting a Bayesian model by sampling from a posterior distribution with a Markov chain Monte Carlo method 255\nAnalyzing data with the R programming language in the IPython notebook 261\nChapter 8: Machine Learning 267\nIntroduction 267\nGetting started with scikit-learn 273\nPredicting who will survive on the Titanic with logistic regression 281\nLearning to recognize handwritten digits with a K-nearest neighbors classifer 285\nLearning from text \u2013 Naive Bayes for Natural Language Processing 289\nUsing support vector machines for classifcation tasks 293\nUsing a random forest to select important features for regression 298\nReducing the dimensionality of a dataset with a principal component analysis 302\nDetecting hidden structures in a dataset with clustering 306\nChapter 9: Numerical Optimization 311\nIntroduction 311\nFinding the root of a mathematical function 314\nMinimizing a mathematical function 317\nFitting a function to data with nonlinear least squares 323\nFinding the equilibrium state of a physical system by minimizing its potential energy 326\nChapter 10: Signal Processing 333\nIntroduction 333\nAnalyzing the frequency components of a signal with a Fast Fourier Transform 337\nApplying a linear flter to a digital signal 343\nComputing the autocorrelation of a time series 349\nChapter 11: Image and Audio Processing 353\nIntroduction 353\nManipulating the exposure of an image 355\nApplying flters on an image 358\nSegmenting an image 362\nFinding points of interest in an image 367\nDetecting faces in an image with OpenCV 370\nApplying digital flters to speech sounds 373\nCreating a sound synthesizer in the notebook 377\nChapter 12: Deterministic Dynamical Systems 381\nIntroduction 381\nPlotting the bifurcation diagram of a chaotic dynamical system 383\nSimulating an elementary cellular automaton 387\nSimulating an ordinary differential equation with SciPy 390\nSimulating a partial differential equation \u2013 reaction-diffusion systems and Turing patterns 394\nChapter 13: Stochastic Dynamical Systems 401\nIntroduction 401\nSimulating a discrete-time Markov chain 402\nSimulating a Poisson process 406\nSimulating a Brownian motion 410\nSimulating a stochastic differential equation 412\nChapter 14: Graphs, Geometry, and Geographic Information Systems 417\nIntroduction 417\nManipulating and visualizing graphs with NetworkX 421\nAnalyzing a social network with NetworkX 425\nResolving dependencies in a directed acyclic graph with a topological sort 430\nComputing connected components in an image 434\nComputing the Voronoi diagram of a set of points 438\nManipulating geospatial data with Shapely and basemap 442\nCreating a route planner for a road network 446\nChapter 15: Symbolic and Numerical Mathematics 453\nIntroduction 453\nDiving into symbolic computing with SymPy 454\nSolving equations and inequalities 457\nAnalyzing real-valued functions 458\nComputing exact probabilities and manipulating random variables 460\nA bit of number theory with SymPy 462\nFinding a Boolean propositional formula from a truth table 465\nAnalyzing a nonlinear differential system \u2013 Lotka-Volterra (predator-prey) equations 467\nGetting started with Sage 470\nIndex 473",
            "title": "IPython Interactive Computing and Visualization Cookbook"
        },
        {
            "location": "/IPython Notebook/#introduction-to-python-for-econometrics-statistics-and-data-analysis",
            "text": "1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200 1   Introduction   1  1.1   Background   1  1.2   Conventions   2  1.3   Important   Components   of   the   Python   Scientific   Stack   3  1.4   Setup   4  1.5   Using   Python   6  1.6   Exercises   17  1. A   Frequently   Encountered   Problems   17  1. B   register_python . py   18  1. C   Advanced   Setup   19  2   Python   2.7   vs .   3   ( and   the   rest )   27  2.1   Python   2.7   vs .   3   27  2.2   Intel   Math   Kernel   Library   and   AMD   Core   Math   Library   27  2.3   Other   Variants   28  2. A   Relevant   Differences   between   Python   2.7   and   3   29  3   Built - in   Data   Types   31  3.1   Variable   Names   31  3.2   Core   Native   Data   Types   32  3.3   Python   and   Memory   Management   42  3.4   Exercises   44  4   Arrays   and   Matrices   47  4.1   Array   47  4.2   Matrix   49  4.3   1 - dimensional   Arrays   50  4.4   2 - dimensional   Arrays   51  4.5   Multidimensional   Arrays   51  4.6   Concatenation   51  4.7   Accessing   Elements   of   an   Array   52  4.8   Slicing   and   Memory   Management   57  4.9   import   and   Modules   59  4.10   Calling   Functions   59  4.11   Exercises   61  5   Basic   Math   63  5.1   Operators   63  5.2   Broadcasting   64  5.3   Array   and   Matrix   Addition   ( + )   and   Subtraction   ( - )   65  5.4   Array   Multiplication   ( x )   66  5.5   Matrix   Multiplication   ( x )   66  5.6   Array   and   Matrix   Division   ( = )   66  5.7   Array   Exponentiation   ( xx )   66  5.8   Matrix   Exponentiation   ( xx )   67  5.9   Parentheses   67  5.10   Transpose   67  5.11   Operator   Precedence   67  5.12   Exercises   68  6   Basic   Functions   and   Numerical   Indexing   71  6.1   Generating   Arrays   and   Matrices   71  6.2   Rounding   74  6.3   Mathematics   75  6.4   Complex   Values   77  6.5   Set   Functions   77  6.6   Sorting   and   Extreme   Values   78  6.7   Nan   Functions   80  6.8   Functions   and   Methods / Properties   81  6.9   Exercises   82  7   Special   Arrays   83  7.1   Exercises   84  8   Array   and   Matrix   Functions   85  8.1   Views   85  8.2   Shape   Information   and   Transformation   86  8.3   Linear   Algebra   Functions   93  8.4   Exercises   96  9   Importing   and   Exporting   Data   99  9.1   Importing   Data   using   pandas   99  9.2   Importing   Data   without   pandas   100  9.3   Saving   or   Exporting   Data   using   pandas   106  9.4   Saving   or   Exporting   Data   without   pandas   106  9.5   Exercises   107  10   Inf ,   NaN   and   Numeric   Limits   109  10.1   inf   and   NaN   109  10.2   Floating   point   precision   109  10.3   Exercises   110  11   Logical   Operators   and   Find   113  11.1   > ,   >= ,   < ,   <= ,   == ,   !=   113  11.2   and ,   or ,   not   and   xor   114  11.3   Multiple   tests   115  11.4   is *   116  11.5   Exercises   117  12   Advanced   Selection   and   Assignment   119  12.1   Numerical   Indexing   119  12.2   Logical   Indexing   124  12.3   Performance   Considerations   and   Memory   Management   128  12.4   Assignment   with   Broadcasting   128  12.5   Exercises   130  13   Flow   Control ,   Loops   and   Exception   Handling   133  13.1   Whitespace   and   Flow   Control   133  13.2   if   .   .   .   elif   .   .   .   else    133  13.3   for   134  13.4   while   137  13.5   try   .   .   .   except   139  13.6   List   Comprehensions   139  13.7   Tuple ,   Dictionary   and   Set   Comprehensions   141  13.8   Exercises   141  14   Dates   and   Times   143  14.1   Creating   Dates   and   Times   143  14.2   Dates   Mathematics   143  14.3   Numpy   datetime64   144  15   Graphics   147  15.1   seaborn   147  15.2   2 D   Plotting   147  15.3   Advanced   2 D   Plotting   153  15.4   3 D   Plotting   162  15.5   General   Plotting   Functions   165  15.6   Exporting   Plots   165  15.7   Exercises   166  16   Structured   Arrays   167  16.1   Mixed   Arrays   with   Column   Names   167  16.2   Record   Arrays   170  17   pandas   171  17.1   Data   Structures   171  17.2   Statistical   Function   191  17.3   Time - series   Data   192  17.4   Importing   and   Exporting   Data   196  17.5   Graphics   200  17.6   Examples   201  18   Custom   Function   and   Modules   207  18.1   Functions   207  18.2   Variable   Scope   214  18.3   Example :   Least   Squares   with   Newey - West   Covariance   215  18.4   Anonymous   Functions   216  18.5   Modules   216  18.6   Packages   217  18.7   PYTHONPATH   219  18.8   Python   Coding   Conventions   219  18.9   Exercises   220  18. A   Listing   of   econometrics . py   221  19   Probability   and   Statistics   Functions   225  19.1   Simulating   Random   Variables   225  19.2   Simulation   and   Random   Number   Generation   229  19.3   Statistics   Functions   231  19.4   Continuous   Random   Variables   234  19.5   Select   Statistics   Functions   237  19.6   Select   Statistical   Tests   240  19.7   Exercises   241  20   Non - linear   Function   Optimization   243  20.1   Unconstrained   Optimization   244  20.2   Derivative - free   Optimization   247  20.3   Constrained   Optimization   248  20.4   Scalar   Function   Minimization   252  20.5   Nonlinear   Least   Squares   253  20.6   Exercises   254  21   String   Manipulation   255  21.1   String   Building   255  21.2   String   Functions   256  21.3   Formatting   Numbers   260  21.4   Regular   Expressions   264  21.5   Safe   Conversion   of   Strings   265  22   File   System   Operations   267  22.1   Changing   the   Working   Directory   267  22.2   Creating   and   Deleting   Directories   267  22.3   Listing   the   Contents   of   a   Directory   268  22.4   Copying ,   Moving   and   Deleting   Files   268  22.5   Executing   Other   Programs   269  22.6   Creating   and   Opening   Archives   269  22.7   Reading   and   Writing   Files   270  22.8   Exercises   272  23   Performance   and   Code   Optimization   273  23.1   Getting   Started   273  23.2   Timing   Code   273  23.3   Vectorize   to   Avoid   Unnecessary   Loops   274  23.4   Alter   the   loop   dimensions   275  23.5   Utilize   Broadcasting   276  23.6   Use   In - place   Assignment   276  23.7   Avoid   Allocating   Memory   276  23.8   Inline   Frequent   Function   Calls   276  23.9   Consider   Data   Locality   in   Arrays   276  23.10   Profile   Long   Running   Functions   277  23.11   Numba   282  23.12   Cython   288  23.13   External   Code   297  23.14   Exercises   302  24   Executing   Code   in   Parallel   303  24.1   map   and   related   functions   303  24.2   multiprocessing   304  24.3   joblib   306  24.4   IPython \u2019 s   Parallel   Cluster   308  24.5   Converting   a   Serial   Program   to   Parallel   314  24.6   Other   Concerns   when   executing   in   Parallel   316  25   Object   Oriented   Programming   ( OOP )   319  25.1   Introduction   319  25.2   Class   basics   320  25.3   Building   a   class   for   Autoregressions   322  25.4   Exercises   329  26   Other   Interesting   Python   Packages   331  26.1   statsmodels   331  26.2   pytz   and   babel   331  26.3   rpy2   331  26.4   PyTables   and   h5py   331  27   Examples   333  27.1   Estimating   the   Parameters   of   a   GARCH   Model   333  27.2   Estimating   the   Risk   Premia   using   Fama - MacBeth   Regressions   338  27.3   Estimating   the   Risk   Premia   using   GMM   341  27.4   Outputting   L   ATEX   344  28   Quick   Reference   347  28.1   Built - ins   347  28.2   NumPy   ( numpy )   354  28.3   SciPy   369  28.4   Matplotlib   372  28.5   Pandas   374  28.6   IPython   378",
            "title": "Introduction to Python for Econometrics, Statistics and Data Analysis"
        },
        {
            "location": "/IPython Notebook/#building-machine-learning-systems-with-python",
            "text": "1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201 Chapter 1: Getting Started with Python Machine Learning 7\nMachine learning and Python \u2013 the dream team 8\nWhat the book will teach you (and what it will not) 9\nWhat to do when you are stuck 10\nGetting started 11\nIntroduction to NumPy, SciPy, and Matplotlib 12\nInstalling Python 12\nChewing data effciently with NumPy and intelligently with SciPy 12\nLearning NumPy 13\nIndexing 15\nHandling non-existing values 15\nComparing runtime behaviors 16\nLearning SciPy 17\nOur frst (tiny) machine learning application 19\nReading in the data 19\nPreprocessing and cleaning the data 20\nChoosing the right model and learning algorithm 22\nBefore building our frst model 22\nStarting with a simple straight line 22\nTowards some advanced stuff 24\nStepping back to go forward \u2013 another look at our data 26\nTraining and testing 28\nAnswering our initial question 30\nSummary 31\nChapter 2: Learning How to Classify with Real-world Examples 33\nThe Iris dataset 33\nThe frst step is visualization 34\nBuilding our frst classifcation model 35\nEvaluation \u2013 holding out data and cross-validation 38\nBuilding more complex classifers 40\nA more complex dataset and a more complex classifer 41\nLearning about the Seeds dataset 42\nFeatures and feature engineering 43\nNearest neighbor classifcation 44\nBinary and multiclass classifcation 47\nSummary 48\nChapter 3: Clustering \u2013 Finding Related Posts 49\nMeasuring the relatedness of posts 50\nHow not to do it 50\nHow to do it 51\nPreprocessing \u2013 similarity measured as similar number of common words 51\nConverting raw text into a bag-of-words 52\nCounting words 53\nNormalizing the word count vectors 56\nRemoving less important words 56\nStemming 57\nInstalling and using NLTK 58\nExtending the vectorizer with NLTK's stemmer 59\nStop words on steroids 60\nOur achievements and goals 61\nClustering 62\nKMeans 63\nGetting test data to evaluate our ideas on 65\nClustering posts 67\nSolving our initial challenge 68\nAnother look at noise 71\nTweaking the parameters 72\nSummary 73\nChapter 4: Topic Modeling 75\nLatent Dirichlet allocation (LDA) 75\nBuilding a topic model 76\nComparing similarity in topic space 80\nModeling the whole of Wikipedia 83\nChoosing the number of topics 86\nSummary 87\nChapter 5: Classifcation \u2013 Detecting Poor Answers 89\nSketching our roadmap 90\nLearning to classify classy answers 90\nTuning the instance 90\nTuning the classifer 90\nFetching the data 91\nSlimming the data down to chewable chunks 92\nPreselection and processing of attributes 93\nDefning what is a good answer 94\nCreating our frst classifer 95\nStarting with the k-nearest neighbor (kNN) algorithm 95\nEngineering the features 96\nTraining the classifer 97\nMeasuring the classifer's performance 97\nDesigning more features 98\nDeciding how to improve 101\nBias-variance and its trade-off 102\nFixing high bias 102\nFixing high variance 103\nHigh bias or low bias 103\nUsing logistic regression 105\nA bit of math with a small example 106\nApplying logistic regression to our postclassifcation problem 108\nLooking behind accuracy \u2013 precision and recall 110\nSlimming the classifer 114\nShip it! 115\nSummary 115\nChapter 6: Classifcation II \u2013 Sentiment Analysis 117\nSketching our roadmap 117\nFetching the Twitter data 118\nIntroducing the Naive Bayes classifer 118\nGetting to know the Bayes theorem 119\nBeing naive 120\nUsing Naive Bayes to classify 121\nAccounting for unseen words and other oddities 124\nAccounting for arithmetic under\ufb02ows 125\nCreating our frst classifer and tuning it 127\nSolving an easy problem frst 128\nUsing all the classes 130\nTuning the classifer's parameters 132\nCleaning tweets 136\nTaking the word types into account 138\nDetermining the word types 139\nSuccessfully cheating using SentiWordNet 141\nOur frst estimator 143\nPutting everything together 145\nSummary 146\nChapter 7: Regression \u2013 Recommendations 147\nPredicting house prices with regression 147\nMultidimensional regression 151\nCross-validation for regression 151\nPenalized regression 153\nL1 and L2 penalties 153\nUsing Lasso or Elastic nets in scikit-learn 154\nP greater than N scenarios 155\nAn example based on text 156\nSetting hyperparameters in a smart way 158\nRating prediction and recommendations 159\nSummary 163\nChapter 8: Regression \u2013 Recommendations Improved 165\nImproved recommendations 165\nUsing the binary matrix of recommendations 166\nLooking at the movie neighbors 168\nCombining multiple methods 169\nBasket analysis 172\nObtaining useful predictions 173\nAnalyzing supermarket shopping baskets 173\nAssociation rule mining 176\nMore advanced basket analysis 178\nSummary 179\nChapter 9: Classifcation III \u2013 Music Genre Classifcation 181\nSketching our roadmap 181\nFetching the music data 182\nConverting into a wave format 182\nLooking at music 182\nDecomposing music into sine wave components 184\nUsing FFT to build our frst classifer 186\nIncreasing experimentation agility 186\nTraining the classifer 187\nUsing the confusion matrix to measure accuracy in multiclass problems 188\nAn alternate way to measure classifer performance using receiver operator characteristic (ROC) 190\nImproving classifcation performance with Mel Frequency Cepstral Coeffcients 193\nSummary 197\nChapter 10: Computer Vision \u2013 Pattern Recognition 199\nIntroducing image processing 199\nLoading and displaying images 200\nBasic image processing 201\nThresholding 202\nGaussian blurring 205\nFiltering for different effects 207\nAdding salt and pepper noise 207\nPutting the center in focus 208\nPattern recognition 210\nComputing features from images 211\nWriting your own features 212\nClassifying a harder dataset 215\nLocal feature representations 216\nSummary 219\nChapter 11: Dimensionality Reduction 221\nSketching our roadmap 222\nSelecting features 222\nDetecting redundant features using flters 223\nCorrelation 223\nMutual information 225\nAsking the model about the features using wrappers 230\nOther feature selection methods 232\nFeature extraction 233\nAbout principal component analysis (PCA) 233\nSketching PCA 234\nApplying PCA 234\nLimitations of PCA and how LDA can help 236\nMultidimensional scaling (MDS) 237\nSummary 240\nChapter 12: Big(ger) Data 241\nLearning about big data 241\nUsing jug to break up your pipeline into tasks 242\nAbout tasks 242\nReusing partial results 245\nLooking under the hood 246\nUsing jug for data analysis 246\nUsing Amazon Web Services (AWS) 248\nCreating your frst machines 250\nInstalling Python packages on Amazon Linux 253\nRunning jug on our cloud machine 254\nAutomating the generation of clusters with starcluster 255\nSummary 259\nAppendix: Where to Learn More about Machine Learning 261\nOnline courses 261\nBooks 261\nQ&A sites 262\nBlogs 262\nData sources 263\nGetting competitive 263\nWhat was left out 264\nSummary 264\nIndex 265",
            "title": "Building Machine Learning Systems with Python"
        },
        {
            "location": "/IPython Notebook/#scipy-lecture-notes",
            "text": "1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131 I Getting started with Python for science 2\n1 Scientific computing with tools and workflow 4\n1.1 Why Python? 4\n1.2 Scientific Python building blocks 5\n1.3 The interactive workflow: IPython and a text editor 6\n2 The Python language 10\n2.1 First steps 10\n2.2 Basic types 11\n2.3 Control Flow 18\n2.4 Defining functions 22\n2.5 Reusing code: scripts and modules 27\n2.6 Input and Output 34\n2.7 Standard Library 35\n2.8 Exception handling in Python 39\n2.9 Object-oriented programming (OOP) 42\n3 NumPy: creating and manipulating numerical data 43\n3.1 The Numpy array object 43\n3.2 Numerical operations on arrays 55\n3.3 More elaborate arrays 68\n3.4 Advanced operations 72\n3.5 Some exercises 77\n4 Matplotlib: plotting 82\n4.1 Introduction 82\n4.2 Simple plot 83\n4.3 Figures, Subplots, Axes and Ticks 89\n4.4 Other Types of Plots: examples and exercises 90\n4.5 Beyond this tutorial 96\n4.6 Quick references 98\n5 Scipy : high-level scientific computing 101\n5.1 File input/output: scipy.io 102\n5.2 Special functions: scipy.special 103\n5.3 Linear algebra operations: scipy.linalg 103\n5.4 Fast Fourier transforms: scipy.fftpack 104\n5.5 Optimization and fit: scipy.optimize 109\n5.6 Statistics and random numbers: scipy.stats 113\n5.7 Interpolation: scipy.interpolate 115\n5.8 Numerical integration: scipy.integrate 116\n5.9 Signal processing: scipy.signal 118\n5.10 Image processing: scipy.ndimage 120\n5.11 Summary exercises on scientific computing 124\n6 Getting help and finding documentation 137\nII Advanced topics 140\n7 Advanced Python Constructs 142\n7.1 Iterators, generator expressions and generators 142\n7.2 Decorators 147\n7.3 Context managers 155\n8 Advanced Numpy 159\n8.1 Life of ndarray 160\n8.2 Universal functions 173\n8.3 Interoperability features 182\n8.4 Array siblings: chararray, maskedarray, matrix 185\n8.5 Summary 188\n8.6 Contributing to Numpy/Scipy 188\n9 Debugging code 192\n9.1 Avoiding bugs 192\n9.2 Debugging workflow 195\n9.3 Using the Python debugger 195\n9.4 Debugging segmentation faults using gdb 200\n10 Optimizing code 203\n10.1 Optimization workflow 203\n10.2 Profiling Python code 203\n10.3 Making code go faster 206\n10.4 Writing faster numerical code 207\n11 Sparse Matrices in SciPy 210\n11.1 Introduction 210\n11.2 Storage Schemes 212\n11.3 Linear System Solvers 224\n11.4 Other Interesting Packages 229\n12 Image manipulation and processing using Numpy and Scipy 230\n12.1 Opening and writing to image files 231\n12.2 Displaying images 232\n12.3 Basic manipulations 233\n12.4 Image filtering 235\n12.5 Feature extraction 240\n12.6 Measuring objects properties: ndimage.measurements 243\n13 Mathematical optimization: finding minima of functions 248\n13.1 Knowing your problem 249\n13.2 A review of the different optimizers 251\n13.3 Practical guide to optimization with scipy 258\n13.4 Special case: non-linear least-squares 260\n13.5 Optimization with constraints 261\n14 Interfacing with C 263\n14.1 Introduction 263\n14.2 Python-C-Api 264\n14.3 Ctypes 268\n14.4 SWIG 272\n14.5 Cython 276\n14.6 Summary 279\n14.7 Further Reading and References 280\n14.8 Exercises 280\nIII Packages and applications 282\n15 Statistics in Python 284\n15.1 Data representation and interaction 285\n15.2 Hypothesis testing: comparing two groups 289\n15.3 Linear models, multiple factors, and analysis of variance 292\n15.4 More visualization: seaborn for statistical exploration 297\n15.5 Testing for interactions 299\n16 Sympy : Symbolic Mathematics in Python 301\n16.1 First Steps with SymPy 302\n16.2 Algebraic manipulations 303\n16.3 Calculus 304\n16.4 Equation solving 305\n16.5 Linear Algebra 306\n17 Scikit-image: image processing 308\n17.1 Introduction and concepts 308\n17.2 Input/output, data types and colorspaces 310\n17.3 Image preprocessing / enhancement 312\n17.4 Image segmentation 315\n17.5 Measuring regions\u2019 properties 318\n17.6 Data visualization and interaction 318\n17.7 Feature extraction for computer vision 320\n18 Traits: building interactive dialogs 322\n18.1 Introduction 323\n18.2 Example 323\n18.3 What are Traits 324\n19 3D plotting with Mayavi 340\n19.1 Mlab: the scripting interface 340\n19.2 Interactive work 346\n19.3 Slicing and dicing data: sources, modules and filters 347\n19.4 Animating the data 349\n19.5 Making interactive dialogs 350\n19.6 Putting it together 351\n20 scikit-learn: machine learning in Python 353\n20.1 Loading an example dataset 354\n20.2 Classification 355\n20.3 Clustering: grouping observations together 357\n20.4 Dimension Reduction with Principal Component Analysis 359\n20.5 Putting it all together: face recognition 360\n20.6 Linear model: from regression to sparsity 361\n20.7 Model selection: choosing estimators and their parameters 362\nIndex 363",
            "title": "Scipy Lecture Notes"
        },
        {
            "location": "/Python Numpy Arrays/",
            "text": "CONTENT\n\n\nInvoke Numpy\n\n\nMake Numpy Arrays\n\n\nA Python Numpy Array\n\n\nMake an \u201cEmpty\u201d Numpy Array\n\n\nLoad Numpy Arrays from Text\n\n\nSave Numpy Arrays\n\n\nInspect Numpy Arrays\n\n\nNumpy Broadcasting Works\n\n\nArray Mathematics\n\n\nSubset, Slice, and Index Arrays\n\n\nAsk for Help\n\n\nManipulate Arrays\n\n\nTranspose Arrays\n\n\nReshaping versus Resizing Arrays\n\n\nHow to Append Arrays\n\n\nHow to Insert and Delete Array Elements\n\n\nHow to Join and Split Arrays\n\n\nSplit Arrays\n\n\n\n\n\n\nHow to Visualize Numpy Arrays\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nInvoke Numpy\n\u00b6\n\n\n\n\nCode \nimport\n \nnumpy\n \nas\n \nnp\n alone.\n\n\nCode \n%pylab\n to invoke Numpy and matplotlib or \n%pylab\n \ninline\n for plotting inside the notebook.\n\n\nFollowing \n%pylab\n, \nimport\n \nnumpy\n \nas\n \nnp\n forces to use the prefix \nnp.\n before any Numpy function.\n\n\n\n\n1\n%\npylab\n \ninline\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\n1\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n\n\n\n\n1\nnp\n.\n__version__\n\n\n\n\n\n\n\n1\n'1.12.1'\n\n\n\n\n\n\n\n\nReference: https://docs.scipy.org/doc/numpy/reference/\n\n\n\n\nMake Numpy Arrays\n\u00b6\n\n\nIf \n%pylab\n was invoked.\n\n\n1\narray\n([\n1\n,\n2\n,\n3\n,\n4\n])\n\n\n\n\n\n\n\n1\narray([1, 2, 3, 4])\n\n\n\n\n\n\nIf \nimport\n \nnumpy\n \nas\n \nnp\n was invoked alone.\n\n\n1\nnp\n.\narray\n([\n1\n,\n2\n,\n3\n,\n4\n])\n\n\n\n\n\n\n\n1\narray([1, 2, 3, 4])\n\n\n\n\n\n\nLet\u2019s begin.\n\n\n1\n2\n3\nmy_array\n \n=\n \nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n],\n \n[\n5\n,\n \n6\n,\n \n7\n,\n \n8\n]],\n \ndtype\n \n=\n \nnp\n.\nint64\n)\n\n\nmy_2d_array\n \n=\n \nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n],\n \n[\n5\n,\n \n6\n,\n \n7\n,\n \n8\n]],\n \ndtype\n \n=\n \nnp\n.\nint32\n)\n\n\nmy_3d_array\n \n=\n \nnp\n.\narray\n([[[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n],\n \n[\n5\n,\n \n6\n,\n \n7\n,\n \n8\n]],\n \n[[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n],\n \n[\n9\n,\n \n10\n,\n \n11\n,\n \n12\n]]])\n\n\n\n\n\n\n\n1\n2\n# Print the array\n\n\nprint\n(\nmy_array\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n# Print the 2d array\n\n\nprint\n(\nmy_2d_array\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n# Print the 3d array\n\n\nprint\n(\nmy_3d_array\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n[[[ 1  2  3  4]\n\n  \n[ 5  6  7  8]]\n\n\n \n[[ 1  2  3  4]\n\n  \n[ 9 10 11 12]]]\n\n\n\n\n\n\n\nA Python Numpy Array\n\u00b6\n\n\n1\n2\n3\n# Print out memory address\n\n\nprint\n(\nmy_array\n.\ndata\n)\n\n\nprint\n(\nmy_2d_array\n.\ndata\n)\n\n\n\n\n\n\n\n1\n2\n<memory at 0x7f85dcedd8b8>\n<memory at 0x7f85dcedd8b8>\n\n\n\n\n\n\n1\n2\n3\n# Print out the shape of `my_array`\n\n\nprint\n(\nmy_array\n.\nshape\n)\n\n\nprint\n(\nmy_2d_array\n.\nshape\n)\n\n\n\n\n\n\n\n1\n2\n(2, 4)\n(2, 4)\n\n\n\n\n\n\n1\n2\n3\n4\n# Print out the data type of `my_array`\n\n\n# kind of elements that are contained within the array\n\n\nprint\n(\nmy_array\n.\ndtype\n)\n\n\nprint\n(\nmy_2d_array\n.\ndtype\n)\n\n\n\n\n\n\n\n1\n2\nint64\nint32\n\n\n\n\n\n\n1\n2\n3\n4\n# Print out the stride of `my_array`\n\n\n# the number of bytes that should be skipped in memory to go to the next element.\n\n\nprint\n(\nmy_array\n.\nstrides\n)\n\n\nprint\n(\nmy_2d_array\n.\nstrides\n)\n\n\n\n\n\n\n\n1\n2\n(32, 8)\n(16, 4)\n\n\n\n\n\n\nMake an \u201cEmpty\u201d Numpy Array\n\u00b6\n\n\nMake use of initial placeholders, which can be filled up afterwards.\n\n\n1\n2\n# Create an array of ones\n\n\nnp\n.\nones\n((\n3\n,\n4\n))\n\n\n\n\n\n\n\n1\n2\n3\narray([[ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.]])\n\n\n\n\n\n\n1\nnp\n.\nones\n(\n4\n)\n\n\n\n\n\n\n\n1\narray([ 1.,  1.,  1.,  1.])\n\n\n\n\n\n\n1\nnp\n.\nones\n((\n1\n,\n4\n))\n\n\n\n\n\n\n\n1\narray([[ 1.,  1.,  1.,  1.]])\n\n\n\n\n\n\n1\n2\n# Create an array of zeros\n\n\nnp\n.\nzeros\n((\n2\n,\n3\n,\n4\n),\n \ndtype\n=\nnp\n.\nint16\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\narray([[[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]],\n\n       [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]]], dtype=int16)\n\n\n\n\n\n\n1\nnp\n.\nzeros\n(\n4\n)\n\n\n\n\n\n\n\n1\narray([ 0.,  0.,  0.,  0.])\n\n\n\n\n\n\n1\nnp\n.\nzeros\n((\n1\n,\n4\n))\n\n\n\n\n\n\n\n1\narray([[ 0.,  0.,  0.,  0.]])\n\n\n\n\n\n\n1\n2\n# Create an array with random values\n\n\nnp\n.\nrandom\n.\nrandom\n((\n2\n,\n2\n))\n\n\n\n\n\n\n\n1\n2\narray([[ 0.28103745,  0.58180454],\n       [ 0.31233242,  0.28414052]])\n\n\n\n\n\n\n1\n2\n# Create an empty array\n\n\nnp\n.\nempty\n((\n3\n,\n2\n))\n\n\n\n\n\n\n\n1\n2\n3\narray([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])\n\n\n\n\n\n\n1\n2\n# Create a full array\n\n\nnp\n.\nfull\n((\n2\n,\n2\n),\n \n7\n)\n\n\n\n\n\n\n\n1\n2\narray([[7, 7],\n       [7, 7]])\n\n\n\n\n\n\n1\n2\n3\n# Create an array of evenly-spaced values\n\n\n# from 10 to 25 (excluded) by 5\n\n\nnp\n.\narange\n(\n10\n,\n \n25\n,\n \n5\n)\n\n\n\n\n\n\n\n1\narray([10, 15, 20])\n\n\n\n\n\n\n1\n2\n3\n# Create an array of evenly-spaced values\n\n\n# from 0 to 2 in 9 intervals\n\n\nnp\n.\nlinspace\n(\n0\n,\n \n2\n,\n \n9\n)\n\n\n\n\n\n\n\n1\narray([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ])\n\n\n\n\n\n\n1\n2\n# Create an identity array or matrix\n\n\nnp\n.\neye\n(\n2\n,\n2\n)\n\n\n\n\n\n\n\n1\n2\narray([[ 1.,  0.],\n       [ 0.,  1.]])\n\n\n\n\n\n\n1\nnp\n.\neye\n(\n3\n,\n3\n)\n\n\n\n\n\n\n\n1\n2\n3\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n\n\n\n\n\n\n1\nnp\n.\neye\n(\n3\n)\n\n\n\n\n\n\n\n1\n2\n3\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n\n\n\n\n\n\n1\n2\n# Idem\n\n\nnp\n.\nidentity\n(\n3\n)\n\n\n\n\n\n\n\n1\n2\n3\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n\n\n\n\n\n\nLoad Numpy Arrays from Text\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Data in the text file\n\n\n\n# Value1  Value2  Value3\n\n\n# 0.2536  0.1008  0.3857\n\n\n# 0.4839  0.4536  0.3561\n\n\n# 0.1292  0.6875  0.5929\n\n\n# 0.1781  0.3049  0.8928\n\n\n# 0.6253  0.3486  0.8791\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Set the current directory\n\n\nimport\n \nos\n\n\n\nos\n.\nchdir\n(\n'/home/ugo/Documents/Notebooks/DataCamp, Numpy tutorial'\n)\n\n\nprint\n(\nos\n.\ngetcwd\n())\n\n\n\n\n\n\n\n1\n/home/ugo/Documents/Notebooks/DataCamp, Numpy tutorial\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Import data\n\n\nx\n,\n \ny\n,\n \nz\n \n=\n \nnp\n.\nloadtxt\n(\n'textfile.txt'\n,\n\n                    \nskiprows\n \n=\n \n1\n,\n\n                    \nunpack\n \n=\n \nTrue\n)\n\n\n# unpack=True\n\n\n# the values in column Value1 will be put in x, and so on\n\n\n# delimiter\n\n\n# comma-delimited data \n\n\n# specify the data type\n\n\n# dtype\n\n\n\nprint\n(\nx\n)\n\n\n\n\n\n\n\n1\n[ 0.2536  0.4839  0.1292  0.1781  0.6253]\n\n\n\n\n\n\n1\nprint\n(\ny\n)\n\n\n\n\n\n\n\n1\n[ 0.1008  0.4536  0.6875  0.3049  0.3486]\n\n\n\n\n\n\n1\nprint\n(\nz\n)\n\n\n\n\n\n\n\n1\n[ 0.3857  0.3561  0.5929  0.8928  0.8791]\n\n\n\n\n\n\n1\n2\n3\nprint\n(\nx\n)\n\n\nprint\n(\ny\n)\n\n\nprint\n(\nz\n)\n\n\n\n\n\n\n\n1\n2\n3\n[ 0.2536  0.4839  0.1292  0.1781  0.6253]\n\n\n[ 0.1008  0.4536  0.6875  0.3049  0.3486]\n\n\n[ 0.3857  0.3561  0.5929  0.8928  0.8791]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Data in the text file\n\n\n\n# Value1  Value2  Value3\n\n\n# 0.4839  0.4536  0.3561\n\n\n# 0.1292  0.6875  MISSING\n\n\n# 0.1781  0.3049  0.8928\n\n\n# MISSING 0.5801  0.2038\n\n\n# 0.5993  0.4357  0.7410\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# Import data\n\n\nmy_array2\n \n=\n \nnp\n.\ngenfromtxt\n(\n'textfile2.txt'\n,\n\n                      \nskip_header\n \n=\n \n1\n,\n\n                      \nfilling_values\n \n=\n \n-\n999\n)\n\n\n# filling_values\n\n\n# converts character strings in numeric columns to nan, \n\n\n# convert these values to other ones\n\n\n# missing_values\n\n\n# argument that allows to specify what the missing values\n\n\n\nprint\n(\nmy_array2\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n[[  4.83900000e-01   4.53600000e-01   3.56100000e-01]\n\n \n[  1.29200000e-01   6.87500000e-01  -9.99000000e+02]\n\n \n[  1.78100000e-01   3.04900000e-01   8.92800000e-01]\n\n \n[ -9.99000000e+02   5.80100000e-01   2.03800000e-01]\n\n \n[  5.99300000e-01   4.35700000e-01   7.41000000e-01]]\n\n\n\n\n\n\n\nSave Numpy Arrays\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\nx\n \n=\n \nnp\n.\narange\n(\n0.0\n,\n5.0\n,\n1.0\n)\n \n# array of evenly-spaced values from 0 to 5 by 1\n\n\n\nnp\n.\nsavetxt\n(\n'test1.txt'\n,\n \nx\n,\n \ndelimiter\n=\n','\n)\n \n# to a text file\n\n\nnp\n.\nsave\n(\n'test2.npy'\n,\n \nx\n)\n \n# to a binary file\n\n\nnp\n.\nsavez\n(\n'test3.npz'\n,\n \nx\n)\n \n# to a uncompressed archive\n\n\nnp\n.\nsavez_compressed\n(\n'test4.npz'\n,\n \nx\n)\n \n# compressed archive\n\n\n\n\n\n\n\nInspect Numpy Arrays\n\u00b6\n\n\nAlmost all the attributes that an array can have.\n\n\n1\n2\n# Print the number of `my_array`'s dimensions\n\n\nprint\n(\nmy_array\n.\nndim\n)\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n\n\n1\n2\n# Print the number of `my_array`'s elements\n\n\nprint\n(\nmy_array\n.\nsize\n)\n\n\n\n\n\n\n\n1\n8\n\n\n\n\n\n\n1\n2\n# Print information about `my_array`'s memory layout\n\n\nprint\n(\nmy_array\n.\nflags\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n  C_CONTIGUOUS : True\n  F_CONTIGUOUS : False\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  UPDATEIFCOPY : False\n\n\n\n\n\n\n1\n2\n# Print the length of one array element in bytes\n\n\nprint\n(\nmy_array\n.\nitemsize\n)\n\n\n\n\n\n\n\n1\n8\n\n\n\n\n\n\n1\n2\n# Print the total consumed bytes by `my_array`'s elements\n\n\nprint\n(\nmy_array\n.\nnbytes\n)\n\n\n\n\n\n\n\n1\n64\n\n\n\n\n\n\n1\n2\n# Print the length of `my_array`\n\n\nprint\n(\nlen\n(\nmy_array\n))\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n\n\n1\n2\n# Change the data type of `my_array`\n\n\nmy_array\n.\nastype\n(\nfloat\n)\n\n\n\n\n\n\n\n1\n2\narray([[ 1.,  2.,  3.,  4.],\n       [ 5.,  6.,  7.,  8.]])\n\n\n\n\n\n\nNumpy Broadcasting Works\n\u00b6\n\n\nWork with arrays of different shapes when performing arithmetic operations.\n\n\n1\n2\n3\n4\n5\n# Initialize `x`\n\n\nx\n \n=\n \nnp\n.\nones\n((\n3\n,\n4\n))\n\n\n\n# Check shape of `x`\n\n\nprint\n(\nx\n.\nshape\n)\n\n\n\n\n\n\n\n1\n(3, 4)\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Initialize `y`\n\n\ny\n \n=\n \nnp\n.\nrandom\n.\nrandom\n((\n3\n,\n4\n))\n\n\n\n# Check shape of `y`\n\n\nprint\n(\ny\n.\nshape\n)\n\n\n\n\n\n\n\n1\n(3, 4)\n\n\n\n\n\n\n1\n2\nprint\n(\nx\n)\n\n\nprint\n(\ny\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n[[ 1.  1.  1.  1.]\n\n \n[ 1.  1.  1.  1.]\n\n \n[ 1.  1.  1.  1.]]\n\n\n[[ 0.44011854  0.55827517  0.8107237   0.96725064]\n\n \n[ 0.55923674  0.7754099   0.69282818  0.27928312]\n\n \n[ 0.03662555  0.70499711  0.59944023  0.67982408]]\n\n\n\n\n\n\n\n1\n2\n# Add `x` and `y`\n\n\nx\n \n+\n \ny\n\n\n\n\n\n\n\n1\n2\n3\narray([[ 1.44011854,  1.55827517,  1.8107237 ,  1.96725064],\n       [ 1.55923674,  1.7754099 ,  1.69282818,  1.27928312],\n       [ 1.03662555,  1.70499711,  1.59944023,  1.67982408]])\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Initialize `y`\n\n\ny2\n \n=\n \nnp\n.\narange\n(\n4\n)\n\n\n\n# Check shape of `y`\n\n\nprint\n(\ny2\n.\nshape\n)\n\n\n\n\n\n\n\n1\n(4,)\n\n\n\n\n\n\n1\n2\nprint\n(\nx\n)\n\n\nprint\n(\ny2\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n[[ 1.  1.  1.  1.]\n\n \n[ 1.  1.  1.  1.]\n\n \n[ 1.  1.  1.  1.]]\n\n\n[0 1 2 3]\n\n\n\n\n\n\n\n1\n2\n# Subtract `x` and `y`\n\n\nx\n \n-\n \ny2\n\n\n\n\n\n\n\n1\n2\n3\narray([[ 1.,  0., -1., -2.],\n       [ 1.,  0., -1., -2.],\n       [ 1.,  0., -1., -2.]])\n\n\n\n\n\n\n1\n2\n3\n# Initialize `x` and `y`\n\n\nx2\n \n=\n \nnp\n.\nones\n((\n3\n,\n4\n))\n\n\ny3\n \n=\n \nnp\n.\nrandom\n.\nrandom\n((\n5\n,\n1\n,\n4\n))\n\n\n\n\n\n\n\n1\n2\nprint\n(\nx2\n.\nshape\n)\n\n\nprint\n(\ny3\n.\nshape\n)\n\n\n\n\n\n\n\n1\n2\n(3, 4)\n(5, 1, 4)\n\n\n\n\n\n\n1\n2\nprint\n(\nx2\n)\n\n\nprint\n(\ny3\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n[[ 1.  1.  1.  1.]\n\n \n[ 1.  1.  1.  1.]\n\n \n[ 1.  1.  1.  1.]]\n\n\n[[[ 0.51096464  0.17753054  0.64596468  0.77465719]]\n\n\n \n[[ 0.51629966  0.52917705  0.76817841  0.20105093]]\n\n\n \n[[ 0.04512461  0.64426203  0.3210533   0.88679126]]\n\n\n \n[[ 0.93015065  0.34094049  0.01714773  0.37384124]]\n\n\n \n[[ 0.02498021  0.73107663  0.10914001  0.89487447]]]\n\n\n\n\n\n\n\n1\n2\n# Add `x` and `y`\n\n\nx2\n \n+\n \ny3\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\narray([[[ 1.51096464,  1.17753054,  1.64596468,  1.77465719],\n        [ 1.51096464,  1.17753054,  1.64596468,  1.77465719],\n        [ 1.51096464,  1.17753054,  1.64596468,  1.77465719]],\n\n       [[ 1.51629966,  1.52917705,  1.76817841,  1.20105093],\n        [ 1.51629966,  1.52917705,  1.76817841,  1.20105093],\n        [ 1.51629966,  1.52917705,  1.76817841,  1.20105093]],\n\n       [[ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126],\n        [ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126],\n        [ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126]],\n\n       [[ 1.93015065,  1.34094049,  1.01714773,  1.37384124],\n        [ 1.93015065,  1.34094049,  1.01714773,  1.37384124],\n        [ 1.93015065,  1.34094049,  1.01714773,  1.37384124]],\n\n       [[ 1.02498021,  1.73107663,  1.10914001,  1.89487447],\n        [ 1.02498021,  1.73107663,  1.10914001,  1.89487447],\n        [ 1.02498021,  1.73107663,  1.10914001,  1.89487447]]])\n\n\n\n\n\n\nBut what if the dimensions are not compatible? What if they are not equal or if one of them is not equal to 1? Fix this by manipulating the array.\n\n\nArray Mathematics\n\u00b6\n\n\n\n\nnp.add(), np.subtract(), np.multiply(), np.divide() and np.remainder()\n.\n\n\n\n\n1\n2\n3\n4\n5\nx\n \n=\n \nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n3\n,\n \n4\n,\n \n5\n]])\n\n\ny\n \n=\n \nnp\n.\narray\n([\n6\n,\n \n7\n,\n \n8\n])\n\n\n\nprint\n(\nx\n)\n\n\nprint\n(\ny\n)\n\n\n\n\n\n\n\n1\n2\n3\n[[1 2 3]\n\n \n[3 4 5]]\n\n\n[6 7 8]\n\n\n\n\n\n\n\n1\n2\n# Add `x` and `y`\n\n\nnp\n.\nadd\n(\nx\n,\ny\n)\n\n\n\n\n\n\n\n1\n2\narray([[ 7,  9, 11],\n       [ 9, 11, 13]])\n\n\n\n\n\n\n1\n2\n# Subtract `x` and `y`\n\n\nnp\n.\nsubtract\n(\nx\n,\ny\n)\n\n\n\n\n\n\n\n1\n2\narray([[-5, -5, -5],\n       [-3, -3, -3]])\n\n\n\n\n\n\n1\n2\n# Multiply `x` and `y`\n\n\nnp\n.\nmultiply\n(\nx\n,\ny\n)\n\n\n\n\n\n\n\n1\n2\narray([[ 6, 14, 24],\n       [18, 28, 40]])\n\n\n\n\n\n\n1\n2\n# Divide `x` and `y`; x/y\n\n\nnp\n.\ndivide\n(\nx\n,\ny\n)\n\n\n\n\n\n\n\n1\n2\narray([[ 0.16666667,  0.28571429,  0.375     ],\n       [ 0.5       ,  0.57142857,  0.625     ]])\n\n\n\n\n\n\n1\n2\n# Calculate the remainder of `x` and `y`\n\n\nnp\n.\nremainder\n(\nx\n,\ny\n)\n\n\n\n\n\n\n\n1\n2\narray([[1, 2, 3],\n       [3, 4, 5]])\n\n\n\n\n\n\n\n\nnp.exp(), np.sqrt(), np.log()\n.\n\n\nnp.dot()\n.\n\n\na.sum(), a.min(), a.max(axis=0), a.cumsum(axis=1), a.mean(), a.median(), a.corrcoef(), a.std(b)\n.\n\n\n\n\n1\n2\nx\n \n=\n \nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n3\n,\n \n4\n,\n \n5\n]])\n\n\nprint\n(\nx\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3]\n\n \n[3 4 5]]\n\n\n\n\n\n\n\n1\nx\n.\nsum\n()\n\n\n\n\n\n\n\n1\n18\n\n\n\n\n\n\n1\nx\n.\nmin\n()\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\n1\n2\ny\n \n=\n \nnp\n.\narray\n([\n6\n,\n \n7\n,\n \n8\n])\n\n\nprint\n(\ny\n)\n\n\n\n\n\n\n\n1\n[6 7 8]\n\n\n\n\n\n\n1\ny\n.\nmax\n(\naxis\n=\n0\n)\n\n\n\n\n\n\n\n1\n8\n\n\n\n\n\n\n1\nx\n.\nmax\n(\naxis\n=\n1\n)\n\n\n\n\n\n\n\n1\narray([3, 5])\n\n\n\n\n\n\n1\ny\n.\ncumsum\n(\naxis\n=\n0\n)\n\n\n\n\n\n\n\n1\narray([ 6, 13, 21])\n\n\n\n\n\n\n1\nx\n.\nmean\n()\n\n\n\n\n\n\n\n1\n3.0\n\n\n\n\n\n\n1\nnp\n.\nstd\n(\nx\n)\n\n\n\n\n\n\n\n1\n1.2909944487358056\n\n\n\n\n\n\n\n\n==, <, >\n.\n\n\nnp.array_equal()\n\n\nnp.logical_or(), np.logical_not(), np.logical_and()\n.\n\n\n\n\n1\n2\na\n \n=\n \nnp\n.\narray\n([\nTrue\n,\n \nTrue\n,\n \nFalse\n,\n \nFalse\n])\n\n\nb\n \n=\n \nnp\n.\narray\n([\nFalse\n,\n \nFalse\n,\n \nTrue\n,\n \nTrue\n])\n\n\n\n\n\n\n\n1\n2\n# `a` AND `b` \n\n\nnp\n.\nlogical_and\n(\na\n,\n \nb\n)\n\n\n\n\n\n\n\n1\narray([False, False, False, False], dtype=bool)\n\n\n\n\n\n\n1\n2\n# `a` OR `b` \n\n\nnp\n.\nlogical_or\n(\na\n,\n \nb\n)\n\n\n\n\n\n\n\n1\narray([ True,  True,  True,  True], dtype=bool)\n\n\n\n\n\n\n1\n2\n# `a` NOT `b` \n\n\nnp\n.\nlogical_not\n(\na\n,\nb\n)\n\n\n\n\n\n\n\n1\narray([False, False,  True,  True], dtype=bool)\n\n\n\n\n\n\nSubset, Slice, and Index Arrays\n\u00b6\n\n\n\n\na[start:end]\n, items start through the end (but the end is not included!).\n\n\na[start:]\n, items start through the rest of the array.\n\n\na[:end]\n, items from the beginning through the end (but the end is not included!).\n\n\n\n\n1\n2\nmy_array\n \n=\n \nnp\n.\narray\n([\n1\n,\n2\n,\n3\n,\n4\n])\n\n\nprint\n(\nmy_array\n)\n\n\n\n\n\n\n\n1\n[1 2 3 4]\n\n\n\n\n\n\n1\n2\n# Select the element at the 1st index\n\n\nprint\n(\nmy_array\n[\n1\n])\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n\n\n1\nprint\n(\nmy_2d_array\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n# Select the element at row 1 column 2\n\n\nprint\n(\nmy_2d_array\n[\n1\n][\n2\n])\n\n\n\n\n\n\n\n1\n7\n\n\n\n\n\n\n1\n2\n# Select the element at row 1 column 2\n\n\nprint\n(\nmy_2d_array\n[\n1\n,\n2\n])\n\n\n\n\n\n\n\n1\n7\n\n\n\n\n\n\n1\nprint\n(\nmy_3d_array\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n[[[ 1  2  3  4]\n\n  \n[ 5  6  7  8]]\n\n\n \n[[ 1  2  3  4]\n\n  \n[ 9 10 11 12]]]\n\n\n\n\n\n\n\n1\n2\n# Select the element at row 1, column 2 and \n\n\nprint\n(\nmy_3d_array\n[\n1\n,\n1\n,\n2\n])\n\n\n\n\n\n\n\n1\n11\n\n\n\n\n\n\n1\n2\n# Select items at index 0 and 1\n\n\nprint\n(\nmy_array\n[\n0\n:\n2\n])\n\n\n\n\n\n\n\n1\n[1 2]\n\n\n\n\n\n\n1\n2\n# Select items at row 0 and 1, column 1\n\n\nprint\n(\nmy_2d_array\n[\n0\n:\n2\n,\n1\n])\n\n\n\n\n\n\n\n1\n[2 6]\n\n\n\n\n\n\n1\n2\n3\n# Select items at row 1\n\n\n# This is the same as saying `my_3d_array[1,:,:]\n\n\nprint\n(\nmy_3d_array\n[\n1\n,\n...\n])\n\n\n\n\n\n\n\n1\n2\n[[ 1  2  3  4]\n\n \n[ 9 10 11 12]]\n\n\n\n\n\n\n\n1\n2\n# Try out a simple example\n\n\nprint\n(\nmy_array\n[\nmy_array\n \n<\n \n3\n])\n\n\n\n\n\n\n\n1\n[1 2]\n\n\n\n\n\n\n1\n2\n# Specify a condition\n\n\nbigger_than_3\n \n=\n \n(\nmy_3d_array\n \n>=\n \n3\n)\n\n\n\n\n\n\n\n1\n2\n# Use the condition to index our 3d array\n\n\nprint\n(\nmy_3d_array\n[\nbigger_than_3\n])\n\n\n\n\n\n\n\n1\n[ 3  4  5  6  7  8  3  4  9 10 11 12]\n\n\n\n\n\n\n1\nbigger_than_3\n \n=\n \n(\nmy_3d_array\n \n>\n \n3\n)\n \n|\n \n(\nmy_3d_array\n \n==\n \n3\n)\n\n\n\n\n\n\n\n1\n2\nbigger_than_3\n\n\nprint\n(\nbigger_than_3\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n[[[False False  True  True]\n\n  \n[ True  True  True  True]]\n\n\n \n[[False False  True  True]\n\n  \n[ True  True  True  True]]]\n\n\n\n\n\n\n\n1\n2\n3\n# Select elements at (1,0), (0,1), (1,2) and (0,0)\n\n\n# [[r], [c]]\n\n\nprint\n(\nmy_2d_array\n[[\n1\n,\n \n0\n,\n \n1\n,\n \n0\n],[\n0\n,\n \n1\n,\n \n2\n,\n \n0\n]])\n\n\n\n\n\n\n\n1\n[5 2 7 1]\n\n\n\n\n\n\n1\n2\n3\n# Select a subset of the rows and columns\n\n\n# [[r], [c]]\n\n\nprint\n(\nmy_2d_array\n[[\n1\n,\n \n0\n,\n \n1\n,\n \n0\n]][:,[\n0\n,\n1\n,\n2\n,\n0\n]])\n\n\n\n\n\n\n\n1\n2\n3\n4\n[[5 6 7 5]\n\n \n[1 2 3 1]\n\n \n[5 6 7 5]\n\n \n[1 2 3 1]]\n\n\n\n\n\n\n\nAsk for Help\n\u00b6\n\n\n1\n2\n# Look up info on `mean` with `np.lookfor()` \n\n\nprint\n(\nnp\n.\nlookfor\n(\n\"median\"\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nSearch results for 'median'\n\n\n---------------------------\n\nnumpy.median\n    Compute the median along the specified axis.\nnumpy.nanmedian\n    Compute the median along the specified axis, while ignoring NaNs.\nnumpy.ma.median\n    Compute the median along the specified axis.\nnumpy.pad\n    Pads an array.\nnumpy.percentile\n    Compute the qth percentile of the data along the specified axis.\nnumpy.nanpercentile\n    Compute the qth percentile of the data along the specified axis,\nNone\n\n\n\n\n\n\n1\n2\n# Get info on data types with `np.info()`\n\n\nnp\n.\ninfo\n(\nnp\n.\nndarray\n.\ndtype\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nData-type of the array's elements.\n\nParameters\n----------\nNone\n\nReturns\n-------\nd : numpy dtype object\n\nSee Also\n--------\nnumpy.dtype\n\nExamples\n--------\n>>> x\narray([[0, 1],\n       [2, 3]])\n>>> x.dtype\ndtype('int32')\n>>> type(x.dtype)\n<type 'numpy.dtype'>\n\n\n\n\n\n\nManipulate Arrays\n\u00b6\n\n\nTranspose Arrays\n\u00b6\n\n\nThere is no effect when transposing a 1-D array!\n\n\n1\n2\n# Print `my_2d_array`\n\n\nprint\n(\nmy_2d_array\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n# Transpose `my_2d_array`\n\n\nprint\n(\nnp\n.\ntranspose\n(\nmy_2d_array\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n[[1 5]\n\n \n[2 6]\n\n \n[3 7]\n\n \n[4 8]]\n\n\n\n\n\n\n\n1\n2\n# Or use `T` to transpose `my_2d_array` (more flexible, more arguments)\n\n\nprint\n(\nmy_2d_array\n.\nT\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n[[1 5]\n\n \n[2 6]\n\n \n[3 7]\n\n \n[4 8]]\n\n\n\n\n\n\n\nReshaping versus Resizing Arrays\n\u00b6\n\n\n1\n2\nx\n \n=\n \nnp\n.\nones\n((\n3\n,\n4\n))\n\n\nprint\n(\nx\n)\n\n\n\n\n\n\n\n1\n2\n3\n[[ 1.  1.  1.  1.]\n\n \n[ 1.  1.  1.  1.]\n\n \n[ 1.  1.  1.  1.]]\n\n\n\n\n\n\n\n1\n2\n# Print the shape of `x`\n\n\nprint\n(\nx\n.\nshape\n)\n\n\n\n\n\n\n\n1\n(3, 4)\n\n\n\n\n\n\n1\n2\n# Resize `x` to ((6,4))\n\n\nnp\n.\nresize\n(\nx\n,\n \n(\n6\n,\n4\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\narray([[ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.]])\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Try out this as well\n\n\nx\n.\nresize\n((\n6\n,\n4\n))\n\n\n\n# Print out `x`\n\n\nprint\n(\nx\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n[[ 1.  1.  1.  1.]\n\n \n[ 1.  1.  1.  1.]\n\n \n[ 1.  1.  1.  1.]\n\n \n[ 0.  0.  0.  0.]\n\n \n[ 0.  0.  0.  0.]\n\n \n[ 0.  0.  0.  0.]]\n\n\n\n\n\n\n\n1\n2\nx\n \n=\n \nnp\n.\nones\n((\n1\n,\n12\n))\n\n\nprint\n(\nx\n)\n\n\n\n\n\n\n\n1\n[[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]\n\n\n\n\n\n\n1\n2\n# Print the size of `x` to see what's possible\n\n\nprint\n(\nx\n.\nsize\n)\n\n\n\n\n\n\n\n1\n12\n\n\n\n\n\n\n1\n2\n# Reshape `x` to (2,6)\n\n\nprint\n(\nx\n.\nreshape\n((\n2\n,\n6\n)))\n\n\n\n\n\n\n\n1\n2\n[[ 1.  1.  1.  1.  1.  1.]\n\n \n[ 1.  1.  1.  1.  1.  1.]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Flatten `x`\n\n\n# n-D arrays to a 1-D array\n\n\nz\n \n=\n \nx\n.\nravel\n()\n\n\n\n# Print `z`\n\n\nprint\n(\nz\n)\n\n\n\n\n\n\n\n1\n[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n\n\n\n\n\n\nHow to Append Arrays\n\u00b6\n\n\n1\n2\nmy_array\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n])\n\n\nprint\n(\nmy_array\n)\n\n\n\n\n\n\n\n1\n[1 2 3 4]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Append a 1D array to `my_array`\n\n\nnew_array\n \n=\n \nnp\n.\nappend\n(\nmy_array\n,\n \n[\n7\n,\n \n8\n,\n \n9\n,\n \n10\n])\n\n\n\n# Print `new_array`\n\n\nprint\n(\nnew_array\n)\n\n\n\n\n\n\n\n1\n[ 1  2  3  4  7  8  9 10]\n\n\n\n\n\n\n1\nprint\n(\nmy_2d_array\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# Append an extra column to `my_2d_array`\n\n\n# axis 1 indicates the columns, \n\n\n# while axis 0 indicates the rows in 2-D arrays\n\n\nnew_2d_array\n \n=\n \nnp\n.\nappend\n(\nmy_2d_array\n,\n \n[[\n7\n],\n \n[\n8\n]],\n \naxis\n=\n1\n)\n\n\n\n# Print `new_2d_array`\n\n\nprint\n(\nnew_2d_array\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4 7]\n\n \n[5 6 7 8 8]]\n\n\n\n\n\n\n\nHow to Insert and Delete Array Elements\n\u00b6\n\n\n1\nprint\n(\nmy_array\n)\n\n\n\n\n\n\n\n1\n[1 2 3 4]\n\n\n\n\n\n\n1\n2\n# Insert `5` at index 1\n\n\nnp\n.\ninsert\n(\nmy_array\n,\n \n1\n,\n \n5\n)\n\n\n\n\n\n\n\n1\narray([1, 5, 2, 3, 4])\n\n\n\n\n\n\n1\nprint\n(\nmy_array\n)\n\n\n\n\n\n\n\n1\n[1 2 3 4]\n\n\n\n\n\n\n1\n2\n# Delete the value at index 1\n\n\nnp\n.\ndelete\n(\nmy_array\n,[\n1\n])\n\n\n\n\n\n\n\n1\narray([1, 3, 4])\n\n\n\n\n\n\nHow to Join and Split Arrays\n\u00b6\n\n\n\n\nThe number of dimensions needs to be the same if want to concatenate two arrays with \nnp.concatenate()\n.\n\n\nWith \nnp.vstack()\n, make sure that the number of columns in both arrays is the same.\n\n\nThe same holds also for when using \nnp.r[]\n.\n\n\nFor \nnp.hstack()\n, make sure that the number of dimensions is the same and that the number of rows in both arrays is the same.\n\n\nPrefer \nnp.concatenate()\n or \nnp.stack()\n.\n\n\nWith \nnp.column_stack()\n, make sure that the arrays have the same first dimension.\n\n\nnp.c_[]\n is another way to concatenate. Here also, the first dimension of both arrays needs to match.\n\n\n\n\n1\n2\n3\n4\n5\nx\n \n=\n \nnp\n.\narray\n([\n1\n,\n1\n,\n1\n,\n1\n])\n\n\nx\n \n=\n \nnp\n.\nones\n((\n4\n))\n\n\nprint\n(\nx\n)\n\n\n\nprint\n(\nmy_array\n)\n\n\n\n\n\n\n\n1\n2\n[ 1.  1.  1.  1.]\n\n\n[1 2 3 4]\n\n\n\n\n\n\n\n1\n2\n# Concatentate `my_array` and `x`\n\n\nprint\n(\nnp\n.\nconcatenate\n((\nmy_array\n,\nx\n)))\n\n\n\n\n\n\n\n1\n[ 1.  2.  3.  4.  1.  1.  1.  1.]\n\n\n\n\n\n\n1\nprint\n(\nmy_2d_array\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n# Stack arrays row-wise\n\n\nprint\n(\nnp\n.\nvstack\n((\nmy_array\n,\n \nmy_2d_array\n)))\n\n\n\n\n\n\n\n1\n2\n3\n[[1 2 3 4]\n\n \n[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\nmy_resized_array\n \n=\n \nnp\n.\nvstack\n((\nmy_array\n,\n \nmy_array\n))\n\n\nprint\n(\nmy_resized_array\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[1 2 3 4]]\n\n\n\n\n\n\n\n1\n2\n# Stack arrays row-wise\n\n\nprint\n(\nnp\n.\nr_\n[\nmy_resized_array\n,\n \nmy_2d_array\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\n[[1 2 3 4]\n\n \n[1 2 3 4]\n\n \n[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n# Stack arrays horizontally\n\n\nprint\n(\nnp\n.\nhstack\n((\nmy_resized_array\n,\n \nmy_2d_array\n)))\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4 1 2 3 4]\n\n \n[1 2 3 4 5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n# Stack arrays column-wise\n\n\nprint\n(\nnp\n.\ncolumn_stack\n((\nmy_resized_array\n,\n \nmy_2d_array\n)))\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4 1 2 3 4]\n\n \n[1 2 3 4 5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n# Stack arrays column-wise\n\n\nprint\n(\nnp\n.\nc_\n[\nmy_resized_array\n,\n \nmy_2d_array\n])\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4 1 2 3 4]\n\n \n[1 2 3 4 5 6 7 8]]\n\n\n\n\n\n\n\nSplit Arrays\n\u00b6\n\n\n1\nprint\n(\nmy_resized_array\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[1 2 3 4]]\n\n\n\n\n\n\n\n1\n2\n# Split `my_stacked_array` horizontally at the 2nd index (left-right)\n\n\nprint\n(\nnp\n.\nhsplit\n(\nmy_resized_array\n,\n \n2\n))\n\n\n\n\n\n\n\n1\n2\n3\n[array([[1, 2],\n       [1, 2]]), array([[3, 4],\n       [3, 4]])]\n\n\n\n\n\n\n1\n2\n# Split `my_stacked_array` vertically at the 2nd index (top-bottom)\n\n\nprint\n(\nnp\n.\nvsplit\n(\nmy_resized_array\n,\n \n2\n))\n\n\n\n\n\n\n\n1\n[array([[1, 2, 3, 4]]), array([[1, 2, 3, 4]])]\n\n\n\n\n\n\nHow to Visualize Numpy Arrays\n\u00b6\n\n\n\n\nFollowing %pylab, \nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n forces to use the prefix \nplt.\n before any matplotlib function.\n\n\n\n\n1\n2\n3\n4\n# Initialize an array\n\n\nmy_3d_array\n \n=\n \nnp\n.\narray\n([[[\n1\n,\n2\n,\n3\n,\n4\n],\n \n[\n5\n,\n6\n,\n7\n,\n8\n]],\n \n[[\n1\n,\n2\n,\n3\n,\n4\n],\n \n[\n9\n,\n10\n,\n11\n,\n12\n]]],\n \ndtype\n \n=\n \nnp\n.\nint64\n)\n\n\n\nprint\n(\nmy_3d_array\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n[[[ 1  2  3  4]\n\n  \n[ 5  6  7  8]]\n\n\n \n[[ 1  2  3  4]\n\n  \n[ 9 10 11 12]]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Pass the array to `np.histogram()`\n\n\n# compute the occurrences of the array that fall within each bin\n\n\n# the first array lists the frequencies for all the elements of the array,\n\n\n# while the second array lists the bins that would be used without specifying any bins.\n\n\nprint\n(\nnp\n.\nhistogram\n(\nmy_3d_array\n))\n\n\n\n\n\n\n\n1\n2\n(array([4, 2, 2, 1, 1, 1, 1, 1, 1, 2]), array([  1. ,   2.1,   3.2,   4.3,   5.4,   6.5,   7.6,   8.7,   9.8,\n        10.9,  12. ]))\n\n\n\n\n\n\n1\n2\n# Specify the number of bins\n\n\nprint\n(\nnp\n.\nhistogram\n(\nmy_3d_array\n,\n \nbins\n \n=\n \nrange\n(\n0\n,\n13\n)))\n\n\n\n\n\n\n\n1\n(array([0, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2]), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]))\n\n\n\n\n\n\n1\n2\n%\nmatplotlib\n \ninline\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# Construct the histogram with a flattened 3d array and a range of bins\n\n\n# plt.hist() flattens data and the bins\n\n\nplt\n.\nhist\n(\nmy_3d_array\n.\nravel\n(),\n \nbins\n \n=\n \nrange\n(\n0\n,\n13\n))\n\n\n\n# Add a title to the plot\n\n\nplt\n.\ntitle\n(\n'Frequency of My 3D Array Elements'\n)\n\n\nplt\n.\ngrid\n(\nTrue\n)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n# Create an array\n\n\npoints\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n \n5\n,\n \n0.01\n)\n\n\n\n# Make a meshgrid\n\n\n# need 2-D arrays of x and y coordinate values \n\n\n# create a rectangular grid out of an array of x values and an array of y values\n\n\nxs\n,\n \nys\n \n=\n \nnp\n.\nmeshgrid\n(\npoints\n,\n \npoints\n)\n\n\nz\n \n=\n \nnp\n.\nsqrt\n(\nxs\n \n**\n \n2\n \n+\n \nys\n \n**\n \n2\n)\n\n\n\n# Display the image on the axes\n\n\nplt\n.\nimshow\n(\nz\n,\n \ncmap\n=\nplt\n.\ncm\n.\ngray\n)\n\n\nplt\n.\ngrid\n(\nTrue\n)\n\n\n\n# Draw a color bar\n\n\nplt\n.\ncolorbar\n()\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()",
            "title": "Python Numpy Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#make-numpy-arrays",
            "text": "If  %pylab  was invoked.  1 array ([ 1 , 2 , 3 , 4 ])    1 array([1, 2, 3, 4])   If  import   numpy   as   np  was invoked alone.  1 np . array ([ 1 , 2 , 3 , 4 ])    1 array([1, 2, 3, 4])   Let\u2019s begin.  1\n2\n3 my_array   =   np . array ([[ 1 ,   2 ,   3 ,   4 ],   [ 5 ,   6 ,   7 ,   8 ]],   dtype   =   np . int64 )  my_2d_array   =   np . array ([[ 1 ,   2 ,   3 ,   4 ],   [ 5 ,   6 ,   7 ,   8 ]],   dtype   =   np . int32 )  my_3d_array   =   np . array ([[[ 1 ,   2 ,   3 ,   4 ],   [ 5 ,   6 ,   7 ,   8 ]],   [[ 1 ,   2 ,   3 ,   4 ],   [ 9 ,   10 ,   11 ,   12 ]]])    1\n2 # Print the array  print ( my_array )    1\n2 [[1 2 3 4] \n  [5 6 7 8]]    1\n2 # Print the 2d array  print ( my_2d_array )    1\n2 [[1 2 3 4] \n  [5 6 7 8]]    1\n2 # Print the 3d array  print ( my_3d_array )    1\n2\n3\n4\n5 [[[ 1  2  3  4] \n   [ 5  6  7  8]] \n\n  [[ 1  2  3  4] \n   [ 9 10 11 12]]]",
            "title": "Make Numpy Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#a-python-numpy-array",
            "text": "1\n2\n3 # Print out memory address  print ( my_array . data )  print ( my_2d_array . data )    1\n2 <memory at 0x7f85dcedd8b8>\n<memory at 0x7f85dcedd8b8>   1\n2\n3 # Print out the shape of `my_array`  print ( my_array . shape )  print ( my_2d_array . shape )    1\n2 (2, 4)\n(2, 4)   1\n2\n3\n4 # Print out the data type of `my_array`  # kind of elements that are contained within the array  print ( my_array . dtype )  print ( my_2d_array . dtype )    1\n2 int64\nint32   1\n2\n3\n4 # Print out the stride of `my_array`  # the number of bytes that should be skipped in memory to go to the next element.  print ( my_array . strides )  print ( my_2d_array . strides )    1\n2 (32, 8)\n(16, 4)",
            "title": "A Python Numpy Array"
        },
        {
            "location": "/Python Numpy Arrays/#make-an-empty-numpy-array",
            "text": "Make use of initial placeholders, which can be filled up afterwards.  1\n2 # Create an array of ones  np . ones (( 3 , 4 ))    1\n2\n3 array([[ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.]])   1 np . ones ( 4 )    1 array([ 1.,  1.,  1.,  1.])   1 np . ones (( 1 , 4 ))    1 array([[ 1.,  1.,  1.,  1.]])   1\n2 # Create an array of zeros  np . zeros (( 2 , 3 , 4 ),   dtype = np . int16 )    1\n2\n3\n4\n5\n6\n7 array([[[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]],\n\n       [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]]], dtype=int16)   1 np . zeros ( 4 )    1 array([ 0.,  0.,  0.,  0.])   1 np . zeros (( 1 , 4 ))    1 array([[ 0.,  0.,  0.,  0.]])   1\n2 # Create an array with random values  np . random . random (( 2 , 2 ))    1\n2 array([[ 0.28103745,  0.58180454],\n       [ 0.31233242,  0.28414052]])   1\n2 # Create an empty array  np . empty (( 3 , 2 ))    1\n2\n3 array([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])   1\n2 # Create a full array  np . full (( 2 , 2 ),   7 )    1\n2 array([[7, 7],\n       [7, 7]])   1\n2\n3 # Create an array of evenly-spaced values  # from 10 to 25 (excluded) by 5  np . arange ( 10 ,   25 ,   5 )    1 array([10, 15, 20])   1\n2\n3 # Create an array of evenly-spaced values  # from 0 to 2 in 9 intervals  np . linspace ( 0 ,   2 ,   9 )    1 array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ])   1\n2 # Create an identity array or matrix  np . eye ( 2 , 2 )    1\n2 array([[ 1.,  0.],\n       [ 0.,  1.]])   1 np . eye ( 3 , 3 )    1\n2\n3 array([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])   1 np . eye ( 3 )    1\n2\n3 array([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])   1\n2 # Idem  np . identity ( 3 )    1\n2\n3 array([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])",
            "title": "Make an \"Empty\" Numpy Array"
        },
        {
            "location": "/Python Numpy Arrays/#load-numpy-arrays-from-text",
            "text": "1\n2\n3\n4\n5\n6\n7\n8 # Data in the text file  # Value1  Value2  Value3  # 0.2536  0.1008  0.3857  # 0.4839  0.4536  0.3561  # 0.1292  0.6875  0.5929  # 0.1781  0.3049  0.8928  # 0.6253  0.3486  0.8791    1\n2\n3\n4\n5 # Set the current directory  import   os  os . chdir ( '/home/ugo/Documents/Notebooks/DataCamp, Numpy tutorial' )  print ( os . getcwd ())    1 /home/ugo/Documents/Notebooks/DataCamp, Numpy tutorial    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Import data  x ,   y ,   z   =   np . loadtxt ( 'textfile.txt' , \n                     skiprows   =   1 , \n                     unpack   =   True )  # unpack=True  # the values in column Value1 will be put in x, and so on  # delimiter  # comma-delimited data   # specify the data type  # dtype  print ( x )    1 [ 0.2536  0.4839  0.1292  0.1781  0.6253]   1 print ( y )    1 [ 0.1008  0.4536  0.6875  0.3049  0.3486]   1 print ( z )    1 [ 0.3857  0.3561  0.5929  0.8928  0.8791]   1\n2\n3 print ( x )  print ( y )  print ( z )    1\n2\n3 [ 0.2536  0.4839  0.1292  0.1781  0.6253]  [ 0.1008  0.4536  0.6875  0.3049  0.3486]  [ 0.3857  0.3561  0.5929  0.8928  0.8791]    1\n2\n3\n4\n5\n6\n7\n8 # Data in the text file  # Value1  Value2  Value3  # 0.4839  0.4536  0.3561  # 0.1292  0.6875  MISSING  # 0.1781  0.3049  0.8928  # MISSING 0.5801  0.2038  # 0.5993  0.4357  0.7410     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # Import data  my_array2   =   np . genfromtxt ( 'textfile2.txt' , \n                       skip_header   =   1 , \n                       filling_values   =   - 999 )  # filling_values  # converts character strings in numeric columns to nan,   # convert these values to other ones  # missing_values  # argument that allows to specify what the missing values  print ( my_array2 )    1\n2\n3\n4\n5 [[  4.83900000e-01   4.53600000e-01   3.56100000e-01] \n  [  1.29200000e-01   6.87500000e-01  -9.99000000e+02] \n  [  1.78100000e-01   3.04900000e-01   8.92800000e-01] \n  [ -9.99000000e+02   5.80100000e-01   2.03800000e-01] \n  [  5.99300000e-01   4.35700000e-01   7.41000000e-01]]",
            "title": "Load Numpy Arrays from Text"
        },
        {
            "location": "/Python Numpy Arrays/#save-numpy-arrays",
            "text": "1\n2\n3\n4\n5\n6 x   =   np . arange ( 0.0 , 5.0 , 1.0 )   # array of evenly-spaced values from 0 to 5 by 1  np . savetxt ( 'test1.txt' ,   x ,   delimiter = ',' )   # to a text file  np . save ( 'test2.npy' ,   x )   # to a binary file  np . savez ( 'test3.npz' ,   x )   # to a uncompressed archive  np . savez_compressed ( 'test4.npz' ,   x )   # compressed archive",
            "title": "Save Numpy Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#inspect-numpy-arrays",
            "text": "Almost all the attributes that an array can have.  1\n2 # Print the number of `my_array`'s dimensions  print ( my_array . ndim )    1 2   1\n2 # Print the number of `my_array`'s elements  print ( my_array . size )    1 8   1\n2 # Print information about `my_array`'s memory layout  print ( my_array . flags )    1\n2\n3\n4\n5\n6   C_CONTIGUOUS : True\n  F_CONTIGUOUS : False\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  UPDATEIFCOPY : False   1\n2 # Print the length of one array element in bytes  print ( my_array . itemsize )    1 8   1\n2 # Print the total consumed bytes by `my_array`'s elements  print ( my_array . nbytes )    1 64   1\n2 # Print the length of `my_array`  print ( len ( my_array ))    1 2   1\n2 # Change the data type of `my_array`  my_array . astype ( float )    1\n2 array([[ 1.,  2.,  3.,  4.],\n       [ 5.,  6.,  7.,  8.]])",
            "title": "Inspect Numpy Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#numpy-broadcasting-works",
            "text": "Work with arrays of different shapes when performing arithmetic operations.  1\n2\n3\n4\n5 # Initialize `x`  x   =   np . ones (( 3 , 4 ))  # Check shape of `x`  print ( x . shape )    1 (3, 4)   1\n2\n3\n4\n5 # Initialize `y`  y   =   np . random . random (( 3 , 4 ))  # Check shape of `y`  print ( y . shape )    1 (3, 4)   1\n2 print ( x )  print ( y )    1\n2\n3\n4\n5\n6 [[ 1.  1.  1.  1.] \n  [ 1.  1.  1.  1.] \n  [ 1.  1.  1.  1.]]  [[ 0.44011854  0.55827517  0.8107237   0.96725064] \n  [ 0.55923674  0.7754099   0.69282818  0.27928312] \n  [ 0.03662555  0.70499711  0.59944023  0.67982408]]    1\n2 # Add `x` and `y`  x   +   y    1\n2\n3 array([[ 1.44011854,  1.55827517,  1.8107237 ,  1.96725064],\n       [ 1.55923674,  1.7754099 ,  1.69282818,  1.27928312],\n       [ 1.03662555,  1.70499711,  1.59944023,  1.67982408]])   1\n2\n3\n4\n5 # Initialize `y`  y2   =   np . arange ( 4 )  # Check shape of `y`  print ( y2 . shape )    1 (4,)   1\n2 print ( x )  print ( y2 )    1\n2\n3\n4 [[ 1.  1.  1.  1.] \n  [ 1.  1.  1.  1.] \n  [ 1.  1.  1.  1.]]  [0 1 2 3]    1\n2 # Subtract `x` and `y`  x   -   y2    1\n2\n3 array([[ 1.,  0., -1., -2.],\n       [ 1.,  0., -1., -2.],\n       [ 1.,  0., -1., -2.]])   1\n2\n3 # Initialize `x` and `y`  x2   =   np . ones (( 3 , 4 ))  y3   =   np . random . random (( 5 , 1 , 4 ))    1\n2 print ( x2 . shape )  print ( y3 . shape )    1\n2 (3, 4)\n(5, 1, 4)   1\n2 print ( x2 )  print ( y3 )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 [[ 1.  1.  1.  1.] \n  [ 1.  1.  1.  1.] \n  [ 1.  1.  1.  1.]]  [[[ 0.51096464  0.17753054  0.64596468  0.77465719]] \n\n  [[ 0.51629966  0.52917705  0.76817841  0.20105093]] \n\n  [[ 0.04512461  0.64426203  0.3210533   0.88679126]] \n\n  [[ 0.93015065  0.34094049  0.01714773  0.37384124]] \n\n  [[ 0.02498021  0.73107663  0.10914001  0.89487447]]]    1\n2 # Add `x` and `y`  x2   +   y3     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 array([[[ 1.51096464,  1.17753054,  1.64596468,  1.77465719],\n        [ 1.51096464,  1.17753054,  1.64596468,  1.77465719],\n        [ 1.51096464,  1.17753054,  1.64596468,  1.77465719]],\n\n       [[ 1.51629966,  1.52917705,  1.76817841,  1.20105093],\n        [ 1.51629966,  1.52917705,  1.76817841,  1.20105093],\n        [ 1.51629966,  1.52917705,  1.76817841,  1.20105093]],\n\n       [[ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126],\n        [ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126],\n        [ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126]],\n\n       [[ 1.93015065,  1.34094049,  1.01714773,  1.37384124],\n        [ 1.93015065,  1.34094049,  1.01714773,  1.37384124],\n        [ 1.93015065,  1.34094049,  1.01714773,  1.37384124]],\n\n       [[ 1.02498021,  1.73107663,  1.10914001,  1.89487447],\n        [ 1.02498021,  1.73107663,  1.10914001,  1.89487447],\n        [ 1.02498021,  1.73107663,  1.10914001,  1.89487447]]])   But what if the dimensions are not compatible? What if they are not equal or if one of them is not equal to 1? Fix this by manipulating the array.",
            "title": "Numpy Broadcasting Works"
        },
        {
            "location": "/Python Numpy Arrays/#array-mathematics",
            "text": "np.add(), np.subtract(), np.multiply(), np.divide() and np.remainder() .   1\n2\n3\n4\n5 x   =   np . array ([[ 1 ,   2 ,   3 ],   [ 3 ,   4 ,   5 ]])  y   =   np . array ([ 6 ,   7 ,   8 ])  print ( x )  print ( y )    1\n2\n3 [[1 2 3] \n  [3 4 5]]  [6 7 8]    1\n2 # Add `x` and `y`  np . add ( x , y )    1\n2 array([[ 7,  9, 11],\n       [ 9, 11, 13]])   1\n2 # Subtract `x` and `y`  np . subtract ( x , y )    1\n2 array([[-5, -5, -5],\n       [-3, -3, -3]])   1\n2 # Multiply `x` and `y`  np . multiply ( x , y )    1\n2 array([[ 6, 14, 24],\n       [18, 28, 40]])   1\n2 # Divide `x` and `y`; x/y  np . divide ( x , y )    1\n2 array([[ 0.16666667,  0.28571429,  0.375     ],\n       [ 0.5       ,  0.57142857,  0.625     ]])   1\n2 # Calculate the remainder of `x` and `y`  np . remainder ( x , y )    1\n2 array([[1, 2, 3],\n       [3, 4, 5]])    np.exp(), np.sqrt(), np.log() .  np.dot() .  a.sum(), a.min(), a.max(axis=0), a.cumsum(axis=1), a.mean(), a.median(), a.corrcoef(), a.std(b) .   1\n2 x   =   np . array ([[ 1 ,   2 ,   3 ],   [ 3 ,   4 ,   5 ]])  print ( x )    1\n2 [[1 2 3] \n  [3 4 5]]    1 x . sum ()    1 18   1 x . min ()    1 1   1\n2 y   =   np . array ([ 6 ,   7 ,   8 ])  print ( y )    1 [6 7 8]   1 y . max ( axis = 0 )    1 8   1 x . max ( axis = 1 )    1 array([3, 5])   1 y . cumsum ( axis = 0 )    1 array([ 6, 13, 21])   1 x . mean ()    1 3.0   1 np . std ( x )    1 1.2909944487358056    ==, <, > .  np.array_equal()  np.logical_or(), np.logical_not(), np.logical_and() .   1\n2 a   =   np . array ([ True ,   True ,   False ,   False ])  b   =   np . array ([ False ,   False ,   True ,   True ])    1\n2 # `a` AND `b`   np . logical_and ( a ,   b )    1 array([False, False, False, False], dtype=bool)   1\n2 # `a` OR `b`   np . logical_or ( a ,   b )    1 array([ True,  True,  True,  True], dtype=bool)   1\n2 # `a` NOT `b`   np . logical_not ( a , b )    1 array([False, False,  True,  True], dtype=bool)",
            "title": "Array Mathematics"
        },
        {
            "location": "/Python Numpy Arrays/#subset-slice-and-index-arrays",
            "text": "a[start:end] , items start through the end (but the end is not included!).  a[start:] , items start through the rest of the array.  a[:end] , items from the beginning through the end (but the end is not included!).   1\n2 my_array   =   np . array ([ 1 , 2 , 3 , 4 ])  print ( my_array )    1 [1 2 3 4]   1\n2 # Select the element at the 1st index  print ( my_array [ 1 ])    1 2   1 print ( my_2d_array )    1\n2 [[1 2 3 4] \n  [5 6 7 8]]    1\n2 # Select the element at row 1 column 2  print ( my_2d_array [ 1 ][ 2 ])    1 7   1\n2 # Select the element at row 1 column 2  print ( my_2d_array [ 1 , 2 ])    1 7   1 print ( my_3d_array )    1\n2\n3\n4\n5 [[[ 1  2  3  4] \n   [ 5  6  7  8]] \n\n  [[ 1  2  3  4] \n   [ 9 10 11 12]]]    1\n2 # Select the element at row 1, column 2 and   print ( my_3d_array [ 1 , 1 , 2 ])    1 11   1\n2 # Select items at index 0 and 1  print ( my_array [ 0 : 2 ])    1 [1 2]   1\n2 # Select items at row 0 and 1, column 1  print ( my_2d_array [ 0 : 2 , 1 ])    1 [2 6]   1\n2\n3 # Select items at row 1  # This is the same as saying `my_3d_array[1,:,:]  print ( my_3d_array [ 1 , ... ])    1\n2 [[ 1  2  3  4] \n  [ 9 10 11 12]]    1\n2 # Try out a simple example  print ( my_array [ my_array   <   3 ])    1 [1 2]   1\n2 # Specify a condition  bigger_than_3   =   ( my_3d_array   >=   3 )    1\n2 # Use the condition to index our 3d array  print ( my_3d_array [ bigger_than_3 ])    1 [ 3  4  5  6  7  8  3  4  9 10 11 12]   1 bigger_than_3   =   ( my_3d_array   >   3 )   |   ( my_3d_array   ==   3 )    1\n2 bigger_than_3  print ( bigger_than_3 )    1\n2\n3\n4\n5 [[[False False  True  True] \n   [ True  True  True  True]] \n\n  [[False False  True  True] \n   [ True  True  True  True]]]    1\n2\n3 # Select elements at (1,0), (0,1), (1,2) and (0,0)  # [[r], [c]]  print ( my_2d_array [[ 1 ,   0 ,   1 ,   0 ],[ 0 ,   1 ,   2 ,   0 ]])    1 [5 2 7 1]   1\n2\n3 # Select a subset of the rows and columns  # [[r], [c]]  print ( my_2d_array [[ 1 ,   0 ,   1 ,   0 ]][:,[ 0 , 1 , 2 , 0 ]])    1\n2\n3\n4 [[5 6 7 5] \n  [1 2 3 1] \n  [5 6 7 5] \n  [1 2 3 1]]",
            "title": "Subset, Slice, and Index Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#ask-for-help",
            "text": "1\n2 # Look up info on `mean` with `np.lookfor()`   print ( np . lookfor ( \"median\" ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 Search results for 'median'  --------------------------- \nnumpy.median\n    Compute the median along the specified axis.\nnumpy.nanmedian\n    Compute the median along the specified axis, while ignoring NaNs.\nnumpy.ma.median\n    Compute the median along the specified axis.\nnumpy.pad\n    Pads an array.\nnumpy.percentile\n    Compute the qth percentile of the data along the specified axis.\nnumpy.nanpercentile\n    Compute the qth percentile of the data along the specified axis,\nNone   1\n2 # Get info on data types with `np.info()`  np . info ( np . ndarray . dtype )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 Data-type of the array's elements.\n\nParameters\n----------\nNone\n\nReturns\n-------\nd : numpy dtype object\n\nSee Also\n--------\nnumpy.dtype\n\nExamples\n--------\n>>> x\narray([[0, 1],\n       [2, 3]])\n>>> x.dtype\ndtype('int32')\n>>> type(x.dtype)\n<type 'numpy.dtype'>",
            "title": "Ask for Help"
        },
        {
            "location": "/Python Numpy Arrays/#manipulate-arrays",
            "text": "",
            "title": "Manipulate Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#transpose-arrays",
            "text": "There is no effect when transposing a 1-D array!  1\n2 # Print `my_2d_array`  print ( my_2d_array )    1\n2 [[1 2 3 4] \n  [5 6 7 8]]    1\n2 # Transpose `my_2d_array`  print ( np . transpose ( my_2d_array ))    1\n2\n3\n4 [[1 5] \n  [2 6] \n  [3 7] \n  [4 8]]    1\n2 # Or use `T` to transpose `my_2d_array` (more flexible, more arguments)  print ( my_2d_array . T )    1\n2\n3\n4 [[1 5] \n  [2 6] \n  [3 7] \n  [4 8]]",
            "title": "Transpose Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#reshaping-versus-resizing-arrays",
            "text": "1\n2 x   =   np . ones (( 3 , 4 ))  print ( x )    1\n2\n3 [[ 1.  1.  1.  1.] \n  [ 1.  1.  1.  1.] \n  [ 1.  1.  1.  1.]]    1\n2 # Print the shape of `x`  print ( x . shape )    1 (3, 4)   1\n2 # Resize `x` to ((6,4))  np . resize ( x ,   ( 6 , 4 ))    1\n2\n3\n4\n5\n6 array([[ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.]])   1\n2\n3\n4\n5 # Try out this as well  x . resize (( 6 , 4 ))  # Print out `x`  print ( x )    1\n2\n3\n4\n5\n6 [[ 1.  1.  1.  1.] \n  [ 1.  1.  1.  1.] \n  [ 1.  1.  1.  1.] \n  [ 0.  0.  0.  0.] \n  [ 0.  0.  0.  0.] \n  [ 0.  0.  0.  0.]]    1\n2 x   =   np . ones (( 1 , 12 ))  print ( x )    1 [[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]   1\n2 # Print the size of `x` to see what's possible  print ( x . size )    1 12   1\n2 # Reshape `x` to (2,6)  print ( x . reshape (( 2 , 6 )))    1\n2 [[ 1.  1.  1.  1.  1.  1.] \n  [ 1.  1.  1.  1.  1.  1.]]    1\n2\n3\n4\n5\n6 # Flatten `x`  # n-D arrays to a 1-D array  z   =   x . ravel ()  # Print `z`  print ( z )    1 [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]",
            "title": "Reshaping versus Resizing Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#how-to-append-arrays",
            "text": "1\n2 my_array   =   np . array ([ 1 ,   2 ,   3 ,   4 ])  print ( my_array )    1 [1 2 3 4]   1\n2\n3\n4\n5 # Append a 1D array to `my_array`  new_array   =   np . append ( my_array ,   [ 7 ,   8 ,   9 ,   10 ])  # Print `new_array`  print ( new_array )    1 [ 1  2  3  4  7  8  9 10]   1 print ( my_2d_array )    1\n2 [[1 2 3 4] \n  [5 6 7 8]]    1\n2\n3\n4\n5\n6\n7 # Append an extra column to `my_2d_array`  # axis 1 indicates the columns,   # while axis 0 indicates the rows in 2-D arrays  new_2d_array   =   np . append ( my_2d_array ,   [[ 7 ],   [ 8 ]],   axis = 1 )  # Print `new_2d_array`  print ( new_2d_array )    1\n2 [[1 2 3 4 7] \n  [5 6 7 8 8]]",
            "title": "How to Append Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#how-to-insert-and-delete-array-elements",
            "text": "1 print ( my_array )    1 [1 2 3 4]   1\n2 # Insert `5` at index 1  np . insert ( my_array ,   1 ,   5 )    1 array([1, 5, 2, 3, 4])   1 print ( my_array )    1 [1 2 3 4]   1\n2 # Delete the value at index 1  np . delete ( my_array ,[ 1 ])    1 array([1, 3, 4])",
            "title": "How to Insert and Delete Array Elements"
        },
        {
            "location": "/Python Numpy Arrays/#how-to-join-and-split-arrays",
            "text": "The number of dimensions needs to be the same if want to concatenate two arrays with  np.concatenate() .  With  np.vstack() , make sure that the number of columns in both arrays is the same.  The same holds also for when using  np.r[] .  For  np.hstack() , make sure that the number of dimensions is the same and that the number of rows in both arrays is the same.  Prefer  np.concatenate()  or  np.stack() .  With  np.column_stack() , make sure that the arrays have the same first dimension.  np.c_[]  is another way to concatenate. Here also, the first dimension of both arrays needs to match.   1\n2\n3\n4\n5 x   =   np . array ([ 1 , 1 , 1 , 1 ])  x   =   np . ones (( 4 ))  print ( x )  print ( my_array )    1\n2 [ 1.  1.  1.  1.]  [1 2 3 4]    1\n2 # Concatentate `my_array` and `x`  print ( np . concatenate (( my_array , x )))    1 [ 1.  2.  3.  4.  1.  1.  1.  1.]   1 print ( my_2d_array )    1\n2 [[1 2 3 4] \n  [5 6 7 8]]    1\n2 # Stack arrays row-wise  print ( np . vstack (( my_array ,   my_2d_array )))    1\n2\n3 [[1 2 3 4] \n  [1 2 3 4] \n  [5 6 7 8]]    1\n2 my_resized_array   =   np . vstack (( my_array ,   my_array ))  print ( my_resized_array )    1\n2 [[1 2 3 4] \n  [1 2 3 4]]    1\n2 # Stack arrays row-wise  print ( np . r_ [ my_resized_array ,   my_2d_array ])    1\n2\n3\n4 [[1 2 3 4] \n  [1 2 3 4] \n  [1 2 3 4] \n  [5 6 7 8]]    1\n2 # Stack arrays horizontally  print ( np . hstack (( my_resized_array ,   my_2d_array )))    1\n2 [[1 2 3 4 1 2 3 4] \n  [1 2 3 4 5 6 7 8]]    1\n2 # Stack arrays column-wise  print ( np . column_stack (( my_resized_array ,   my_2d_array )))    1\n2 [[1 2 3 4 1 2 3 4] \n  [1 2 3 4 5 6 7 8]]    1\n2 # Stack arrays column-wise  print ( np . c_ [ my_resized_array ,   my_2d_array ])    1\n2 [[1 2 3 4 1 2 3 4] \n  [1 2 3 4 5 6 7 8]]",
            "title": "How to Join and Split Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#split-arrays",
            "text": "1 print ( my_resized_array )    1\n2 [[1 2 3 4] \n  [1 2 3 4]]    1\n2 # Split `my_stacked_array` horizontally at the 2nd index (left-right)  print ( np . hsplit ( my_resized_array ,   2 ))    1\n2\n3 [array([[1, 2],\n       [1, 2]]), array([[3, 4],\n       [3, 4]])]   1\n2 # Split `my_stacked_array` vertically at the 2nd index (top-bottom)  print ( np . vsplit ( my_resized_array ,   2 ))    1 [array([[1, 2, 3, 4]]), array([[1, 2, 3, 4]])]",
            "title": "Split Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#how-to-visualize-numpy-arrays",
            "text": "Following %pylab,  import   matplotlib.pyplot   as   plt  forces to use the prefix  plt.  before any matplotlib function.   1\n2\n3\n4 # Initialize an array  my_3d_array   =   np . array ([[[ 1 , 2 , 3 , 4 ],   [ 5 , 6 , 7 , 8 ]],   [[ 1 , 2 , 3 , 4 ],   [ 9 , 10 , 11 , 12 ]]],   dtype   =   np . int64 )  print ( my_3d_array )    1\n2\n3\n4\n5 [[[ 1  2  3  4] \n   [ 5  6  7  8]] \n\n  [[ 1  2  3  4] \n   [ 9 10 11 12]]]    1\n2\n3\n4\n5 # Pass the array to `np.histogram()`  # compute the occurrences of the array that fall within each bin  # the first array lists the frequencies for all the elements of the array,  # while the second array lists the bins that would be used without specifying any bins.  print ( np . histogram ( my_3d_array ))    1\n2 (array([4, 2, 2, 1, 1, 1, 1, 1, 1, 2]), array([  1. ,   2.1,   3.2,   4.3,   5.4,   6.5,   7.6,   8.7,   9.8,\n        10.9,  12. ]))   1\n2 # Specify the number of bins  print ( np . histogram ( my_3d_array ,   bins   =   range ( 0 , 13 )))    1 (array([0, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2]), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]))   1\n2 % matplotlib   inline  import   matplotlib.pyplot   as   plt     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # Construct the histogram with a flattened 3d array and a range of bins  # plt.hist() flattens data and the bins  plt . hist ( my_3d_array . ravel (),   bins   =   range ( 0 , 13 ))  # Add a title to the plot  plt . title ( 'Frequency of My 3D Array Elements' )  plt . grid ( True )  # Show the plot  plt . show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 # Create an array  points   =   np . arange ( - 5 ,   5 ,   0.01 )  # Make a meshgrid  # need 2-D arrays of x and y coordinate values   # create a rectangular grid out of an array of x values and an array of y values  xs ,   ys   =   np . meshgrid ( points ,   points )  z   =   np . sqrt ( xs   **   2   +   ys   **   2 )  # Display the image on the axes  plt . imshow ( z ,   cmap = plt . cm . gray )  plt . grid ( True )  # Draw a color bar  plt . colorbar ()  # Show the plot  plt . show ()",
            "title": "How to Visualize Numpy Arrays"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/",
            "text": "CONTENT\n\n\nSciPy versus Numpy\n\n\nThe Essentials of Numpy ndarray Objects\n\n\nArray Creation\n\n\nIndexing and Slicing\n\n\nShape Selection and Manipulation\n\n\n\n\n\n\nLinear Algebra With SciPy\n\n\nVectors and Matrices: The Basics\n\n\nMatrices: Operations and Routines\n\n\n\n\n\n\nEigenvalues and Eigenvectors\n\n\nSingular Value Decomposition (SVD)\n\n\nCompress images with SVD\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nSciPy versus Numpy\n\u00b6\n\n\nEfficiently compute arrays and matrices: SciPy is Numpy.\n\n\nThe Essentials of Numpy \nndarray\n Objects\n\u00b6\n\n\n1\n2\n3\n4\n5\n%\npylab\n \ninline\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nmyArray\n \n=\n \nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n]],\n \ndtype\n \n=\n \nnp\n.\nint64\n)\n\n\nprint\n(\nmyArray\n)\n\n\n\n\n\n\n\n1\n2\n3\nPopulating the interactive namespace from numpy and matplotlib\n[[1 2 3]\n [4 5 6]]\n\n\n\n\n\n\n1\n2\n# Inspect the data of `myArray`\n\n\nprint\n(\nmyArray\n.\ndata\n)\n\n\n\n\n\n\n\n1\n<memory at 0x7f7bbcb71a68>\n\n\n\n\n\n\n1\n2\n# Inspect the data type of `myArray`\n\n\nprint\n(\nmyArray\n.\ndtype\n)\n\n\n\n\n\n\n\n1\nint64\n\n\n\n\n\n\n1\n2\n# Inspect the shape of `myArray`\n\n\nprint\n(\nmyArray\n.\nshape\n)\n\n\n\n\n\n\n\n1\n(2, 3)\n\n\n\n\n\n\n1\n2\n# Inspect the size of `myArray`\n\n\nprint\n(\nmyArray\n.\nsize\n)\n\n\n\n\n\n\n\n1\n6\n\n\n\n\n\n\n\n\nConvert with \nastype()\n.\n\n\nHandle complex numbers.\n\n\n\n\n1\n2\n# Return the real part of `myArray` elements\n\n\nnp\n.\nreal\n(\nmyArray\n)\n\n\n\n\n\n\n\n1\n2\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n\n\n\n\n1\n2\n# Return the imaginary part of `myArray` elements\n\n\nnp\n.\nimag\n(\nmyArray\n)\n\n\n\n\n\n\n\n1\n2\narray([[0, 0, 0],\n       [0, 0, 0]])\n\n\n\n\n\n\n1\n2\n# Return a real array if the complex parts are close to 0\n\n\nnp\n.\nreal_if_close\n(\nmyArray\n,\ntol\n=\n1000\n)\n\n\n\n\n\n\n\n1\n2\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n\n\n\n\n1\n2\n# Cast `myArray` to float\n\n\nnp\n.\ncast\n[\n'f'\n](\nmyArray\n)\n\n\n\n\n\n\n\n1\n2\narray([[ 1.,  2.,  3.],\n       [ 4.,  5.,  6.]], dtype=float32)\n\n\n\n\n\n\n1\n2\n# Cast `myArray` to integer\n\n\nnp\n.\ncast\n[\n'q'\n](\nmyArray\n)\n\n\n\n\n\n\n\n1\n2\narray([[1, 2, 3],\n       [4, 5, 6]], dtype=int64)\n\n\n\n\n\n\n\n\n\u2018b\u2019 for int8.\n\n\n\u2018c\u2019 for |S21; character or string.\n\n\n\u2018e\u2019 for float16\n\n\n\u2018f\u2019 for float32.\n\n\n\u2018g\u2019 for float128\n\n\n\u2018h\u2019 for int16, integer.\n\n\n\u2018d\u2019 for digits.\n\n\n\u2018i\u2019 for int32, integer.\n\n\n\u2018l\u2019 for long.\n\n\n\u2018m\u2019 for timedelta64.\n\n\n\u2018q\u2019 for int64, integer.\n\n\n\n\nArray Creation\n\u00b6\n\n\n1\n2\n# Create a 2X2 identity matrix with `np.eye()`\n\n\nnp\n.\neye\n(\n2\n)\n\n\n\n\n\n\n\n1\n2\narray([[ 1.,  0.],\n       [ 0.,  1.]])\n\n\n\n\n\n\n1\nnp\n.\neye\n(\n2\n,\n \n4\n)\n\n\n\n\n\n\n\n1\n2\narray([[ 1.,  0.,  0.,  0.],\n       [ 0.,  1.,  0.,  0.]])\n\n\n\n\n\n\n1\nnp\n.\neye\n(\n4\n,\n \n2\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\narray([[ 1.,  0.],\n       [ 0.,  1.],\n       [ 0.,  0.],\n       [ 0.,  0.]])\n\n\n\n\n\n\n1\n2\n# Create a 3X3 identity matrix with `np.identity()`\n\n\nnp\n.\nidentity\n(\n3\n)\n\n\n\n\n\n\n\n1\n2\n3\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n\n\n\n\n\n\n1\n2\n# Uniformly spaced values: spacing; from 2 to 8 (excluded) by 2\n\n\nnp\n.\narange\n(\n3\n,\n \n8\n,\n \n2\n)\n\n\n\n\n\n\n\n1\narray([3, 5, 7])\n\n\n\n\n\n\n1\n2\n# Uniformly spaced values: number of samples; from 2 to 3 in 5 intervals\n\n\nnp\n.\nlinspace\n(\n2\n,\n \n3\n,\n \n5\n)\n\n\n\n\n\n\n\n1\narray([ 2.  ,  2.25,  2.5 ,  2.75,  3.  ])\n\n\n\n\n\n\n1\n2\n# Uniformly spaced values: logarithmic spacing; from 2 to 3 in 4 intervals \n\n\nnp\n.\nlogspace\n(\n2\n,\n \n3\n,\n \n4\n)\n\n\n\n\n\n\n\n1\narray([  100.        ,   215.443469  ,   464.15888336,  1000.        ])\n\n\n\n\n\n\nIndexing and Slicing\n\u00b6\n\n\n1\nprint\n(\nmyArray\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3]\n\n \n[4 5 6]]\n\n\n\n\n\n\n\n1\n2\n# Slice `myArray` at index 0 and 1\n\n\nprint\n(\nmyArray\n[\n0\n,\n0\n:\n2\n])\n\n\n\n\n\n\n\n1\n[1 2]\n\n\n\n\n\n\n1\n2\n# Slice `my_2dArray` at row 0 and 1, column 1\n\n\nprint\n(\nmyArray\n[\n0\n:\n2\n,\n1\n])\n\n\n\n\n\n\n\n1\n[2 5]\n\n\n\n\n\n\n1\n2\n# Slice `my_3dArray` at row 1\n\n\nprint\n(\nmyArray\n[\n1\n,\n...\n])\n\n\n\n\n\n\n\n1\n[4 5 6]\n\n\n\n\n\n\n1\n2\n# Boolean indexing: only values < 3\n\n\nprint\n(\nmyArray\n[\nmyArray\n<\n3\n])\n\n\n\n\n\n\n\n1\n[1 2]\n\n\n\n\n\n\n1\n2\n# Fancy indexing; r-c coordinates\n\n\nprint\n(\nmyArray\n[[\n1\n,\n \n0\n,\n \n1\n,\n \n0\n],[\n0\n,\n \n1\n,\n \n2\n,\n \n0\n]])\n\n\n\n\n\n\n\n1\n[4 2 6 1]\n\n\n\n\n\n\nMeshgrid\n\n\n\n\nIndex tricks: \nnp.mgrid()\n, \nnp.ogrid()\n, \nnp.r\n and \nnp.c\n.\n\n\nInstead of \nnp.concatenate()\n.\n\n\nnp.meshgrid()\n.\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Create a dense mesh grid; from to (excluded) by\n\n\n# takes two 1D arrays and produces two 2D matrices \n\n\n# corresponding to all pairs of (x, y) in the two arrays\n\n\n# the dimensions and number of the output arrays are equal\n\n\n# to the number of indexing dimensions\n\n\nnp\n.\nmgrid\n[\n1\n:\n11\n:\n2\n,\n \n-\n12\n:\n-\n3\n:\n3\n]\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\narray([[[  1,   1,   1],\n        [  3,   3,   3],\n        [  5,   5,   5],\n        [  7,   7,   7],\n        [  9,   9,   9]],\n\n       [[-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6]]])\n\n\n\n\n\n\n1\n2\n# Create an open meshgrid; from to (excluded) by\n\n\nnp\n.\nogrid\n[\n1\n:\n11\n:\n2\n,\n \n-\n12\n:\n-\n3\n:\n3\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n[array([[1],\n        [3],\n        [5],\n        [7],\n        [9]]), array([[-12,  -9,  -6]])]\n\n\n\n\n\n\n1\n2\n# Stack arrays vertically\n\n\nnp\n.\nr_\n[\n3\n,\n \n[\n0\n]\n*\n5\n,\n \n-\n1\n:\n1\n:\n10j\n]\n\n\n\n\n\n\n\n1\n2\n3\narray([ 3.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        , -1.        , -0.77777778, -0.55555556, -0.33333333,\n       -0.11111111,  0.11111111,  0.33333333,  0.55555556,  0.77777778,  1.        ])\n\n\n\n\n\n\n1\n2\n3\narray\n \n=\n \nnp\n.\nones\n(\n2\n)\n\n\nmy2Array\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n,\n3\n,\n4\n],[\n5\n,\n6\n,\n7\n,\n8\n]])\n\n\nprint\n(\narray\n)\n\n\n\n\n\n\n\n1\n[ 1.  1.]\n\n\n\n\n\n\n1\nprint\n(\nmy2Array\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n# Stack arrays horizontally (left-right)\n\n\nnp\n.\nc_\n[\narray\n]\n\n\n\n\n\n\n\n1\n2\narray([[ 1.],\n       [ 1.]])\n\n\n\n\n\n\n1\nnp\n.\nc_\n[\nmy2Array\n]\n\n\n\n\n\n\n\n1\n2\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\n\n\n\n1\nnp\n.\nc_\n[\narray\n,\n \nmy2Array\n]\n\n\n\n\n\n\n\n1\n2\narray([[ 1.,  1.,  2.,  3.,  4.],\n       [ 1.,  5.,  6.,  7.,  8.]])\n\n\n\n\n\n\n1\n2\narray2\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n,\n3\n,\n4\n],\n \n[\n1\n,\n2\n,\n3\n,\n4\n]])\n\n\nprint\n(\narray2\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[1 2 3 4]]\n\n\n\n\n\n\n\n1\nnp\n.\nr_\n[\narray2\n]\n\n\n\n\n\n\n\n1\n2\narray([[1, 2, 3, 4],\n       [1, 2, 3, 4]])\n\n\n\n\n\n\n1\nnp\n.\nr_\n[\nmy2Array\n]\n\n\n\n\n\n\n\n1\n2\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\n\n\n\n1\nnp\n.\nr_\n[\narray2\n,\n \nmy2Array\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\narray([[1, 2, 3, 4],\n       [1, 2, 3, 4],\n       [1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\n\n\n\nOther indexing/slicing\n\n\n1\n2\n3\n# Initialize a 2D array \n\n\nmy_2dArray\n \n=\n \nnp\n.\narray\n([[\n1\n,\n2\n,\n3\n,\n4\n],\n \n[\n5\n,\n6\n,\n7\n,\n8\n]],\n \ndtype\n=\nnp\n.\nint64\n)\n\n\nprint\n(\nmy_2dArray\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n# Select values from `my_2dArray`\n\n\n# argument 1: select\n\n\n# argument 2: transform\n\n\nnp\n.\nselect\n([\nmy_2dArray\n \n<\n \n4\n],\n \n[\nmy_2dArray\n])\n\n\n\n\n\n\n\n1\n2\narray([[1, 2, 3, 0],\n       [0, 0, 0, 0]])\n\n\n\n\n\n\n1\nnp\n.\nselect\n([\nmy_2dArray\n \n<\n \n4\n],\n \n[\nmy_2dArray\n \n*\n \n2\n])\n\n\n\n\n\n\n\n1\n2\narray([[2, 4, 6, 0],\n       [0, 0, 0, 0]])\n\n\n\n\n\n\nShape Selection and Manipulation\n\u00b6\n\n\n\n\nStack.\n\n\nSplit.\n\n\nTranspose.\n\n\nChange shape.\n\n\n\n\n1\n2\nmyArray\n \n=\n \nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n]])\n\n\nmy_2dArray\n \n=\n \nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n],\n \n[\n5\n,\n \n6\n,\n \n7\n,\n \n8\n]])\n\n\n\n\n\n\n\n1\nprint\n(\nmyArray\n)\n\n\n\n\n\n\n\n1\n[[1 2 3 4]]\n\n\n\n\n\n\n1\nprint\n(\nmy_2dArray\n)\n\n\n\n\n\n\n\n1\n2\n[[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n# Stack arrays horizontally (column-wise)\n\n\nprint\n(\nnp\n.\nhstack\n((\nnp\n.\neye\n(\n2\n),\n \nmy_2dArray\n)))\n\n\n\n\n\n\n\n1\n2\n[[ 1.  0.  1.  2.  3.  4.]\n\n \n[ 0.  1.  5.  6.  7.  8.]]\n\n\n\n\n\n\n\n1\n2\n# Stack arrays vertically (row-wise)\n\n\nprint\n(\nnp\n.\nvstack\n((\nmyArray\n,\n \nmy_2dArray\n)))\n\n\n\n\n\n\n\n1\n2\n3\n[[1 2 3 4]\n\n \n[1 2 3 4]\n\n \n[5 6 7 8]]\n\n\n\n\n\n\n\n1\n2\n# Split the array horizontally at the 2nd index (left-right)\n\n\nprint\n(\nnp\n.\nhsplit\n(\nmy_2dArray\n,\n \n2\n))\n\n\n\n\n\n\n\n1\n2\n3\n[array([[1, 2],\n       [5, 6]]), array([[3, 4],\n       [7, 8]])]\n\n\n\n\n\n\n1\n2\n# Split the array vertically at the 2nd index (top-bottom)\n\n\nprint\n(\nnp\n.\nvsplit\n(\nmy_2dArray\n,\n \n2\n))\n\n\n\n\n\n\n\n1\n[array([[1, 2, 3, 4]]), array([[5, 6, 7, 8]])]\n\n\n\n\n\n\n1\n2\n# Permute `myArray` dimensions\n\n\nprint\n(\nnp\n.\ntranspose\n(\nmyArray\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n[[1]\n\n \n[2]\n\n \n[3]\n\n \n[4]]\n\n\n\n\n\n\n\n1\n2\nmy_3dArray\n \n=\n \nnp\n.\narray\n([[[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n],\n \n[\n5\n,\n \n6\n,\n \n7\n,\n  \n8\n]],\n \n[[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n],\n \n[\n9\n,\n \n10\n,\n \n11\n,\n \n12\n]]])\n\n\nprint\n(\nmy_3dArray\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n[[[ 1  2  3  4]\n\n  \n[ 5  6  7  8]]\n\n\n \n[[ 1  2  3  4]\n\n  \n[ 9 10 11 12]]]\n\n\n\n\n\n\n\n1\n2\n# Flatten `my_3dArray`\n\n\nprint\n(\nmy_3dArray\n.\nflatten\n())\n\n\n\n\n\n\n\n1\n[ 1  2  3  4  5  6  7  8  1  2  3  4  9 10 11 12]\n\n\n\n\n\n\nnp.reshsape()\n vs \nnp.resize()\n.\n\n\n1\n2\n# Reshape but don't change the data\n\n\nprint\n(\nmy_2dArray\n.\nreshape\n(\n4\n,\n2\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n[[1 2]\n\n \n[3 4]\n\n \n[5 6]\n\n \n[7 8]]\n\n\n\n\n\n\n\n1\n2\n# Resize to (6,4)\n\n\nprint\n(\nnp\n.\nresize\n(\nmy_3dArray\n,\n \n(\n6\n,\n4\n)))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n[[ 1  2  3  4]\n\n \n[ 5  6  7  8]\n\n \n[ 1  2  3  4]\n\n \n[ 9 10 11 12]\n\n \n[ 1  2  3  4]\n\n \n[ 5  6  7  8]]\n\n\n\n\n\n\n\nVectorized functions (to \u2018loop\u2019 over an array, all items)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n# Define a function `myfunc`\n\n\ndef\n \nmyfunc\n(\na\n,\nb\n):\n\n  \nif\n \na\n \n>\n \nb\n:\n\n     \nreturn\n \na\n \n-\n \nb\n\n  \nelse\n:\n\n     \nreturn\n \na\n \n+\n \nb\n\n\n\n# Vectorize `myfunc`\n\n\nvectorizedFunc\n \n=\n \nnp\n.\nvectorize\n(\nmyfunc\n)\n \n\n\n# Apply\n\n\nprint\n(\nmyArray\n)\n\n\nvectorizedFunc\n(\nmyArray\n,\n \n2\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[1 2 3 4]]\n\n\n\n\n\n\n\narray([[3, 4, 1, 2]])\n\n\n\n\n\n\n\nnp.angle()\n provides the angle of the elements of complex array elements, but also basic trigonometric, exponential or logarithmic functions.\n\n\nLinear Algebra With SciPy\n\u00b6\n\n\n1\n2\n3\n4\nimport\n \nscipy\n\n\n\n# Check package version\n\n\nscipy\n.\n__version__\n\n\n\n\n\n\n\n1\n'0.19.0'\n\n\n\n\n\n\nVectors and Matrices: The Basics\n\u00b6\n\n\n1\n2\n3\n# Create a vector\n\n\nmyVector\n \n=\n \nnp\n.\narray\n([\n1\n,\n2\n,\n3\n,\n4\n])\n\n\nprint\n(\nmyVector\n)\n\n\n\n\n\n\n\n1\n[1 2 3 4]\n\n\n\n\n\n\n\n\nA matrix is a subclass of arrays.\n\n\nA matrix is always 2D.\n\n\nBoth arrays and matrices have \n.T\n()\n.\n\n\nOnly matrices have \n.H\n()\n and \n.I\n()\n.\n\n\nMatrix multiplication works differently from an element-wise array.\n\n\nT\n**\n has different results for matrices and arrays.\n\n\nSparse matrices have mostly zero elements, while the ones that have mostly non-zero elements are called dense matrices.\n\n\nscipy.linalg\n.\n\n\nscipy.sparse\n.\n\n\n\n\n\n\n\n\n1\n2\n3\n# Create a matrix\n\n\nmyMatrix\n \n=\n \nnp\n.\nmatrix\n(\nnp\n.\nrandom\n.\nrandom\n((\n5\n,\n5\n)))\n\n\nprint\n(\nmyMatrix\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n[[ 0.45409417  0.51518628  0.21891525  0.4827949   0.11485953]\n\n \n[ 0.26387125  0.27904581  0.27371679  0.81793744  0.03194194]\n\n \n[ 0.44758032  0.40043501  0.53270025  0.73481508  0.40994865]\n\n \n[ 0.26650523  0.47469863  0.77731378  0.33237448  0.0932401 ]\n\n \n[ 0.47477976  0.4054091   0.62060959  0.76708818  0.33732755]]\n\n\n\n\n\n\n\n1\n2\n# Create a 2X2 identity matrix\n\n\nnp\n.\neye\n(\n3\n,\n \nk\n=\n1\n)\n        \n\n\n\n\n\n\n1\n2\n3\narray([[ 0.,  1.,  0.],\n       [ 0.,  0.,  1.],\n       [ 0.,  0.,  0.]])\n\n\n\n\n\n\n1\n2\n# Create a 2x2 identity matrix\n\n\nnp\n.\nmat\n(\nnp\n.\nidentity\n(\n2\n))\n         \n\n\n\n\n\n\n1\n2\nmatrix([[ 1.,  0.],\n        [ 0.,  1.]])\n\n\n\n\n\n\n1\nC\n \n=\n \nnp\n.\nmatrix\n([[\n0.47332239\n,\n0.26149519\n,\n0.\n,\n0.01665965\n,\n0.05914868\n],\n \n[\n0.24440216\n,\n0.\n,\n0.\n,\n0.\n,\n0.\n],\n  \n[\n0.\n,\n0.\n,\n0.4320679\n,\n0.10501837\n,\n0.\n],\n \n[\n0.32164578\n,\n0.\n,\n0.\n,\n0.10963973\n,\n0.\n],\n  \n[\n0.15023766\n,\n0.04764381\n,\n0.\n,\n0.\n,\n0.38244847\n],\n  \n[\n0.08499095\n,\n0.\n,\n0.0163261\n,\n0.\n,\n0.27636168\n],\n \n[\n0.\n,\n0.36569833\n,\n0.34968224\n,\n0.\n,\n0.40275066\n],\n  \n[\n0.\n,\n0.\n,\n0.\n,\n0.40504002\n,\n0.\n],\n  \n[\n0.41632136\n,\n0.35405707\n,\n0.33020532\n,\n0.16344026\n,\n0.\n],\n \n[\n0.04105013\n,\n0.26913226\n,\n0.\n,\n0.00280266\n,\n0.\n]])\n\n\n\n\n\n\n\n1\nprint\n(\nC\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n[[ 0.47332239  0.26149519  0.          0.01665965  0.05914868]\n\n \n[ 0.24440216  0.          0.          0.          0.        ]\n\n \n[ 0.          0.          0.4320679   0.10501837  0.        ]\n\n \n[ 0.32164578  0.          0.          0.10963973  0.        ]\n\n \n[ 0.15023766  0.04764381  0.          0.          0.38244847]\n\n \n[ 0.08499095  0.          0.0163261   0.          0.27636168]\n\n \n[ 0.          0.36569833  0.34968224  0.          0.40275066]\n\n \n[ 0.          0.          0.          0.40504002  0.        ]\n\n \n[ 0.41632136  0.35405707  0.33020532  0.16344026  0.        ]\n\n \n[ 0.04105013  0.26913226  0.          0.00280266  0.        ]]\n\n\n\n\n\n\n\n1\nfrom\n \nscipy\n \nimport\n \nlinalg\n,\n \nsparse\n\n\n\n\n\n\n\n1\n2\n3\n# Compressed Sparse Row matrix\n\n\n# fast access to rows and columns\n\n\nsparse\n.\ncsr_matrix\n(\nC\n)\n\n\n\n\n\n\n\n1\n2\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Compressed Sparse Row format>\n\n\n\n\n\n\n1\n2\n3\n# Compressed Sparse Column matrix\n\n\n# fast access to  rows and columns\n\n\nsparse\n.\ncsc_matrix\n(\nC\n)\n  \n\n\n\n\n\n\n1\n2\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Compressed Sparse Column format>\n\n\n\n\n\n\n1\n2\n3\n# Dictionary Of Keys matrix\n\n\n# fill the matrix with numbers one by one\n\n\nsparse\n.\ndok_matrix\n(\nC\n)\n  \n\n\n\n\n\n\n1\n2\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Dictionary Of Keys format>\n\n\n\n\n\n\n1\n2\n3\n# block Sparse Row matrices\n\n\n# constructing the matrix from blocks of smaller matrices\n\n\nsparse\n.\nbsr_matrix\n(\nC\n)\n\n\n\n\n\n\n\n1\n2\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements (blocksize = 1x1) in Block Sparse Row format>\n\n\n\n\n\n\n1\n2\n3\n# COOrdinate format sparse matrices\n\n\n# fill the matrix with numbers one by one\n\n\nsparse\n.\ncoo_matrix\n(\nC\n)\n\n\n\n\n\n\n\n1\n2\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in COOrdinate format>\n\n\n\n\n\n\n1\n2\n3\n# DIAgonal storage sparse matrices\n\n\n# initialize the matrix with an array as the diagonal\n\n\nsparse\n.\ndia_matrix\n(\nC\n)\n\n\n\n\n\n\n\n1\n2\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 47 stored elements (13 diagonals) in DIAgonal format>\n\n\n\n\n\n\n1\n2\n3\n# Row-based linked list sparse matrices\n\n\n# sliced-based matrices\n\n\nsparse\n.\nlil_matrix\n(\nC\n)\n\n\n\n\n\n\n\n1\n2\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in LInked List format>\n\n\n\n\n\n\n1\n2\n3\nvector1\n \n=\n \nnp\n.\narray\n([\n1\n,\n \n2\n,\n \n3\n])\n\n\nvector2\n \n=\n \nnp\n.\narray\n([\n2\n,\n \n3\n,\n \n4\n])\n\n\nprint\n(\nvector1\n)\n\n\n\n\n\n\n\n1\n[1 2 3]\n\n\n\n\n\n\n1\nprint\n(\nvector2\n)\n\n\n\n\n\n\n\n1\n[2 3 4]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Addition of `vector1` and `vector2`\n\n\nvector3\n \n=\n \nvector1\n \n+\n \nvector2\n\n\n\n# Print `vector3`\n\n\nprint\n(\nvector3\n)\n\n\n\n\n\n\n\n1\n[3 5 7]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Subtraction of `vector2` and `vector1`\n\n\nvector4\n \n=\n \nvector2\n \n-\n \nvector1\n\n\n\n# print `vector4`\n\n\nprint\n(\nvector4\n)\n\n\n\n\n\n\n\n1\n[1 1 1]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Dot product of `vector1` and `vector2`\n\n\ndotProduct\n \n=\n \nnp\n.\ndot\n(\nvector1\n,\n \nvector2\n)\n\n\n\n# Print `dotProduct`\n\n\nprint\n(\ndotProduct\n)\n\n\n\n\n\n\n\n1\n20\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Cross product of `vector1` and `vector2`\n\n\n# vector product in vector algebra; search the formula online\n\n\ncrossProduct\n \n=\n \nnp\n.\ncross\n(\nvector1\n,\n \nvector2\n)\n\n\n\n# Print `crossProduct`\n\n\nprint\n(\ncrossProduct\n)\n\n\n\n\n\n\n\n1\n[-1  2 -1]\n\n\n\n\n\n\nMatrices: Operations and Routines\n\u00b6\n\n\n1\nnp\n.\nadd\n(\nvector1\n,\n \nvector2\n)\n\n\n\n\n\n\n\n1\narray([3, 5, 7])\n\n\n\n\n\n\n1\nnp\n.\nsubtract\n(\nvector1\n,\n \nvector2\n)\n\n\n\n\n\n\n\n1\narray([-1, -1, -1])\n\n\n\n\n\n\n1\nnp\n.\ndivide\n(\nvector1\n,\n \nvector2\n)\n\n\n\n\n\n\n\n1\narray([ 0.5       ,  0.66666667,  0.75      ])\n\n\n\n\n\n\n1\nnp\n.\nmultiply\n(\nvector1\n,\n \nvector2\n)\n\n\n\n\n\n\n\n1\narray([ 2,  6, 12])\n\n\n\n\n\n\n1\n2\n3\n# Vector dot product\n\n\nvectorDotProduct\n \n=\n \nnp\n.\nvdot\n(\nvector1\n,\n \nvector2\n)\n\n\nprint\n(\nvectorDotProduct\n)\n\n\n\n\n\n\n\n1\n20\n\n\n\n\n\n\n1\n2\n3\n# Inner product\n\n\ninnerProduct\n \n=\n \nnp\n.\ninner\n(\nvector1\n,\n \nvector2\n)\n\n\nprint\n(\nvectorDotProduct\n)\n\n\n\n\n\n\n\n1\n20\n\n\n\n\n\n\n1\n2\n3\n# Outer product\n\n\nouterProduct\n \n=\n \nnp\n.\nouter\n(\nvector1\n,\n \nvector2\n)\n\n\nprint\n(\nvectorDotProduct\n)\n\n\n\n\n\n\n\n1\n20\n\n\n\n\n\n\n1\n2\n3\n4\nmatrix1\n \n=\n \nnp\n.\nmatrix\n([[\n0.47332239\n,\n \n0.26149519\n],\n \n[\n0.86380934\n,\n \n0.01665965\n]])\n\n\nmatrix2\n \n=\n \nnp\n.\nmatrix\n([[\n3\n,\n \n4\n],\n \n[\n5\n,\n \n6\n]])\n\n\n\nprint\n(\nmatrix1\n)\n\n\n\n\n\n\n\n1\n2\n[[ 0.47332239  0.26149519]\n\n \n[ 0.86380934  0.01665965]]\n\n\n\n\n\n\n\n1\nprint\n(\nmatrix2\n)\n\n\n\n\n\n\n\n1\n2\n[[3 4]\n\n \n[5 6]]\n\n\n\n\n\n\n\n1\n2\n3\n# Tensor dot product\n\n\ntensorDotProduct\n \n=\n \nnp\n.\ntensordot\n(\nmatrix1\n,\n \nmatrix2\n)\n\n\nprint\n(\nvectorDotProduct\n)\n\n\n\n\n\n\n\n1\n20\n\n\n\n\n\n\n1\n2\n3\n# Kronecker product\n\n\nkronProduct\n \n=\n \nnp\n.\nkron\n(\nmatrix1\n,\n \nmatrix2\n)\n\n\nprint\n(\nvectorDotProduct\n)\n\n\n\n\n\n\n\n1\n20\n\n\n\n\n\n\n1\nprint\n(\nmatrix1\n)\n\n\n\n\n\n\n\n1\n2\n[[ 0.47332239  0.26149519]\n\n \n[ 0.86380934  0.01665965]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n# exponent\n\n\nlinalg\n.\nexpm\n(\nmatrix1\n)\n\n\n#linalg.expm2(matrix1)\n\n\n#linalg.expm3(matrix1)\n\n\n\n\n\n\n\n1\n2\narray([[ 1.76478622,  0.34978586],\n       [ 1.15546404,  1.15393687]])\n\n\n\n\n\n\n1\n2\n# logarithm\n\n\nlinalg\n.\nlogm\n(\nmatrix1\n)\n\n\n\n\n\n\n\n1\n2\narray([[-0.54372715+0.89057597j,  0.24956103-0.77901846j],\n       [ 0.82438668-2.57336825j, -0.97954865+2.25101668j]])\n\n\n\n\n\n\n1\n2\n# squared root\n\n\nlinalg\n.\nsqrtm\n(\nmatrix1\n)\n\n\n\n\n\n\n\n1\n2\narray([[ 0.62966832+0.15061317j,  0.21791187-0.1317467j ],\n       [ 0.71983850-0.43520505j,  0.24911742+0.38068933j]])\n\n\n\n\n\n\n1\n2\n# lambda\n\n\nlinalg\n.\nfunm\n(\nmatrix1\n,\n \nlambda\n \nx\n:\n \nx\n*\nx\n)\n\n\n\n\n\n\n\n1\n2\narray([[ 0.44991607,  0.12812795],\n       [ 0.42325106,  0.22615953]])\n\n\n\n\n\n\n1\n2\n3\n# transposition\n\n\n# make a new matrix whose rows are the columns of the original\n\n\nmatrix1\n.\nT\n\n\n\n\n\n\n\n1\n2\nmatrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])\n\n\n\n\n\n\n1\nnp\n.\ntranspose\n(\nmatrix1\n)\n\n\n\n\n\n\n\n1\n2\nmatrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])\n\n\n\n\n\n\n1\n2\n3\n# conjugate transposition\n\n\n# interchanges the row and column index for each matrix element\n\n\nmatrix1\n.\nH\n\n\n\n\n\n\n\n1\n2\nmatrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])\n\n\n\n\n\n\n1\n2\n3\n# inverse\n\n\n# matrix multiplied with the original matrix results in an identity matrix\n\n\nmatrix1\n.\nI\n\n\n\n\n\n\n\n1\n2\nmatrix([[-0.0764216 ,  1.19953792],\n        [ 3.96248993, -2.17123747]])\n\n\n\n\n\n\n1\nlinalg\n.\ninv\n(\nmatrix1\n)\n\n\n\n\n\n\n\n1\n2\narray([[-0.0764216 ,  1.19953792],\n       [ 3.96248993, -2.17123747]])\n\n\n\n\n\n\n1\n2\n# cast an array\n\n\nmatrix1\n.\nA\n\n\n\n\n\n\n\n1\n2\narray([[ 0.47332239,  0.26149519],\n       [ 0.86380934,  0.01665965]])\n\n\n\n\n\n\n1\n2\n# retrieve the trace or sum of the elements on the main matrix diagonal\n\n\nnp\n.\ntrace\n(\nmatrix1\n)\n\n\n\n\n\n\n\n1\n0.48998204000000001\n\n\n\n\n\n\n1\n2\n3\n4\n# retrieve the matrix rank or the number\n\n\n# of Singular Value Decomposition singular values\n\n\n# of an array that are greater than a certain threshold\n\n\nnp\n.\nlinalg\n.\nmatrix_rank\n(\nmatrix1\n)\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n\n\n1\n2\n3\n4\n# norm of a matrix\n\n\n# number defined in terms of the entries of the matrix\n\n\n# how large the elements are\n\n\nlinalg\n.\nnorm\n(\nmatrix1\n)\n\n\n\n\n\n\n\n1\n1.0192438074758199\n\n\n\n\n\n\n1\n2\n# matrix determinant\n\n\nlinalg\n.\ndet\n(\nmatrix1\n)\n\n\n\n\n\n\n\n1\n-0.21799660213251107\n\n\n\n\n\n\nSolving system of \nAx=b\nAx=b\n, where \nA\nA\n is a square matrix and \nb\nb\n a general matrix. There are two methods to find \nx\nx\n.\n\n\n1\n2\n3\nA\n \n=\n \nnp\n.\nmatrix\n([[\n0.35115177\n,\n \n0.79693272\n],\n \n[\n0.81264708\n,\n \n0.06853826\n]])\n\n\nb\n \n=\n \nnp\n.\nmatrix\n([[\n1.\n+\n5.j\n,\n \n0.\n+\n2.j\n,\n \n0.\n+\n3.j\n],\n \n[\n \n0.\n+\n4.j\n,\n \n0.\n+\n5.j\n,\n \n0.\n+\n6.j\n]])\n\n\nprint\n(\nA\n)\n\n\n\n\n\n\n\n1\n2\n[[ 0.35115177  0.79693272]\n\n \n[ 0.81264708  0.06853826]]\n\n\n\n\n\n\n\n1\nprint\n(\nb\n)\n\n\n\n\n\n\n\n1\n2\n[[ 1.+5.j  0.+2.j  0.+3.j]\n\n \n[ 0.+4.j  0.+5.j  0.+6.j]]\n\n\n\n\n\n\n\n1\n2\n# Dense matrix solver\n\n\nlinalg\n.\nsolve\n(\nA\n,\n \nb\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\narray([[-0.10991486+4.56259221j,  0.00000000+6.17037842j,\n         0.00000000+7.33850519j],\n       [ 1.30324276+4.26364433j,  0.00000000-0.20922633j,\n         0.00000000+0.53087407j]])\n\n\n\n\n\n\n1\n2\n3\nF\n \n=\n \nnp\n.\nmatrix\n([[\n0.\n,\n \n1.\n,\n \n0.\n],\n \n[\n0.\n,\n \n0.\n,\n \n1.\n],\n \n[\n0.\n,\n \n0.\n,\n \n0.\n]])\n\n\nE\n \n=\n \nnp\n.\nmatrix\n([[\n1\n],[\n2\n],[\n3\n]])\n\n\nprint\n(\nF\n)\n\n\n\n\n\n\n\n1\n2\n3\n[[ 0.  1.  0.]\n\n \n[ 0.  0.  1.]\n\n \n[ 0.  0.  0.]]\n\n\n\n\n\n\n\n1\nprint\n(\nE\n)\n\n\n\n\n\n\n\n1\n2\n3\n[[1]\n\n \n[2]\n\n \n[3]]\n\n\n\n\n\n\n\n1\n2\n# Linear least-square solver\n\n\nnp\n.\nlinalg\n.\nlstsq\n(\nF\n,\nE\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n(matrix([[ 0.],\n         [ 1.],\n         [ 2.]]),\n matrix([], shape=(1, 0), dtype=float64),\n 2,\n array([ 1.,  1.,  0.]))\n\n\n\n\n\n\nFor sparse matrices, \nlinalg.spsolve()\nmay solve the equation, otherwise, it might still be possible to obtain an approximate \nx\nx\n with the help of the \nlinalg.lstsq()\n.\n\n\nEigenvalues and Eigenvectors\n\u00b6\n\n\nThe eigenvalues and eigenvectors are important concepts in many computer vision and machine learning techniques:\n\n\n\n\nPrincipal Component Analysis (PCA) for dimensionality reduction.\n\n\nEigenFaces for \nface recognition\n. Consult the latter case for an illustration.\n\n\n\n\nAlmost all vectors change direction, when they are multiplied by a matrix. However, certain resulting vectors maintain the same direction after the multiplication. These are the eigenvectors.\n\n\nMultiply an eigenvector by a matrix, and the resulting vector of that multiplication is equal to a multiplication of the original eigenvector with \n\\lambda\n\\lambda\n, the eigenvalue:\n\n\n\n\nAx = \\lambda x\n\n\nAx = \\lambda x\n\n\n\n\nEigenvalue gives valuable information: whether one of the eigenvectors is stretched, shrunk, reversed, or left unchanged when multiplied by a matrix.\n\n\n1\n2\nmyMatrix\n \n=\n \nnp\n.\nmatrix\n([[\n0.84790079\n,\n \n0.08996585\n],\n \n[\n0.66653841\n,\n \n0.94212726\n]])\n\n\nprint\n(\nmyMatrix\n)\n\n\n\n\n\n\n\n1\n2\n[[ 0.84790079  0.08996585]\n\n \n[ 0.66653841  0.94212726]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Solve eigenvalue problem\n\n\nla\n,\n \nv\n \n=\n \nlinalg\n.\neig\n(\nmyMatrix\n)\n \n\n\n# Unpack eigenvalues\n\n\nl1\n,\n \nl2\n \n=\n \nla\n\n\n\n# First eigenvector\n\n\nv\n[:,\n0\n]\n\n\n\n\n\n\n\n1\narray([-0.40641758,  0.91368745])\n\n\n\n\n\n\n1\n2\n# Second eigenvector\n\n\nv\n[:,\n1\n]\n\n\n\n\n\n\n\n1\narray([-0.29036942, -0.95691463])\n\n\n\n\n\n\n1\n2\n# Or unpack eigenvalues with `eigvals()`\n\n\nlinalg\n.\neigvals\n(\nmyMatrix\n)\n\n\n\n\n\n\n\n1\narray([ 0.64564412+0.j,  1.14438393+0.j])\n\n\n\n\n\n\n1\n2\n# laternative\n\n\neigvals\n(\nmyMatrix\n)\n\n\n\n\n\n\n\n1\narray([ 0.64564412,  1.14438393])\n\n\n\n\n\n\nWith sparse matricesL \nla, v = sparse.linalg.eigs(myMatrix,1)\n; the number of eigenvalues and eigenvectors that has to be retrieved = 1.\n\n\nSingular Value Decomposition (SVD)\n\u00b6\n\n\nSVD is useful for many tasks:\n\n\n\n\ndata compression,\n\n\nnoise reduction, and\n\n\ndata analysis.\n\n\n\n\nSVD is closely linked to Principal Component Analysis (PCA), which is used for dimensionality reduction.\n\n\nAnother link is one with data mining and natural language processing (NLP): Latent Semantic Indexing (LSI). It is a technique that is used in document retrieval and word similarity. Latent semantic indexing uses SVD to group documents to the concepts that could consist of different words found in those documents. Various words can be grouped into a concept. Also here, SVD reduces the noisy correlation between words and their documents, and it decreases the number of dimensions that the original data has.\n\n\nThe singular value decomposition of a matrix \nA\nA\n is the decomposition or factorization of \nA\nA\n into the product of three matrices: \nA=U\u2217\u03a3\u2217V^t\nA=U\u2217\u03a3\u2217V^t\n.\n\n\nThe size of the individual matrices is as follows given the matrix \nA\nA\n is of size \nM x N\nM x N\n:\n\n\n\n\nMatrix \nU\nU\n is of size \nM x M\nM x M\n\n\nMatrix \nV\nV\n is of size \nN x N\nN x N\n\n\nMatrix \n\\Sigma\n\\Sigma\n is of size \nM x N\nM x N\n\n\n\n\nThe \n\u2217\n\u2217\n indicates that the matrices are multiplied and the \nt\nt\n in \nV^t\nV^t\n \n\nmeans that the matrix is transposed, which means that the rows and columns are interchanged.\n\n\nSimply stated, singular value decomposition provides a way to break a matrix into simpler, meaningful pieces. These pieces may contain some data we are interested in.\n\n\n1\nprint\n(\nmyMatrix\n)\n\n\n\n\n\n\n\n1\n2\n[[ 0.84790079  0.08996585]\n\n \n[ 0.66653841  0.94212726]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Singular Value Decomposition\n\n\nU\n,\ns\n,\nVh\n \n=\n \nlinalg\n.\nsvd\n(\nmyMatrix\n)\n \n\n\n# Initialize `M` and `N`\n\n\nM\n,\nN\n \n=\n \nmyMatrix\n.\nshape\n\n\n\n# Construct sigma matrix in SVD\n\n\nSig\n \n=\n \nlinalg\n.\ndiagsvd\n(\ns\n,\nM\n,\nN\n)\n\n\n\n\n\n\n\n1\n2\n3\nprint\n(\nU\n)\n\n\nprint\n(\ns\n)\n\n\nprint\n(\nVh\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n[[-0.53763961 -0.84317474]\n\n \n[-0.84317474  0.53763961]]\n\n\n[ 1.32147227  0.5591224 ]\n\n\n[[-0.7702571  -0.63773348]\n\n \n[-0.63773348  0.7702571 ]]\n\n\n\n\n\n\n\n1\n2\nprint\n(\nM\n)\n\n\nprint\n(\nN\n)\n\n\n\n\n\n\n\n1\n2\n2\n2\n\n\n\n\n\n\n1\nprint\n(\nSig\n)\n\n\n\n\n\n\n\n1\n2\n[[ 1.32147227  0.        ]\n\n \n[ 0.          0.5591224 ]]\n\n\n\n\n\n\n\nWith sparse matrices, use the \nsparse.linalg.svds()\n.\n\n\nCompress images with SVD\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n%\nmatplotlib\n \ninline\n\n\n# Import the necessary packages\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nscipy\n \nimport\n \nlinalg\n\n\nfrom\n \nskimage\n \nimport\n \ndata\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Get an image from `skimage`\n\n\nimg\n \n=\n \ndata\n.\ncamera\n()\n\n\n\nprint\n(\nimg\n)\n\n\nprint\n(\nimg\n.\nshape\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n[[156 157 160 ..., 152 152 152]\n\n \n[156 157 159 ..., 152 152 152]\n\n \n[158 157 156 ..., 152 152 152]\n\n \n..., \n\n \n[121 123 126 ..., 121 113 111]\n\n \n[121 123 126 ..., 121 113 111]\n\n \n[121 123 126 ..., 121 113 111]]\n\n\n(512, 512)\n\n\n\n\n\n\n\n1\n2\n3\n4\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n8\n,\n \n3\n))\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n121\n)\n\n\nax\n.\nimshow\n(\nimg\n,\n \ncmap\n=\n'gray'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n1\n2\n# Check number of singular values\n\n\nlinalg\n.\nsvdvals\n(\nimg\n)\n\n\n\n\n\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\narray([  6.38689996e+04,   1.44910897e+04,   1.09561592e+04,\n         6.19958837e+03,   5.85460599e+03,   4.82514545e+03,\n         4.59023130e+03,   3.61148738e+03,   3.34731861e+03,\n         3.14349896e+03,   3.05262875e+03,   2.95922014e+03,\n         2.84709763e+03,   2.81972262e+03,   2.53580358e+03,\n         2.35379736e+03,   2.25234388e+03,   2.19445315e+03,\n         1.95347281e+03,   1.93643231e+03,   1.78576072e+03,\n         1.68444543e+03,   1.55985334e+03,   1.53124809e+03,\n         1.49461049e+03,   1.46783730e+03,   1.37841479e+03,\n         1.31705840e+03,   1.28469563e+03,   1.26983772e+03,\n         1.23258950e+03,   1.19028553e+03,   1.14311122e+03,\n         1.11896715e+03,   1.07893598e+03,   1.04322585e+03,\n         1.00915095e+03,   9.95390582e+02,   9.77961424e+02,\n         9.41174385e+02,   9.32201249e+02,   8.93615745e+02,\n         8.74195561e+02,   8.58051291e+02,   8.29598226e+02,\n         8.00811160e+02,   7.93729536e+02,   7.89373695e+02,\n         7.58404767e+02,   7.29609262e+02,   7.09087154e+02,\n         7.00077886e+02,   6.86673719e+02,   6.65400930e+02,\n         6.56677192e+02,   6.28475541e+02,   6.10557098e+02,\n         5.94000126e+02,   5.84294112e+02,   5.72429055e+02,\n         5.69451585e+02,   5.50921578e+02,   5.37266578e+02,\n         5.33291637e+02,   5.21789437e+02,   5.05141703e+02,\n         5.01052645e+02,   4.93184398e+02,   4.80118682e+02,\n         4.73384191e+02,   4.56418309e+02,   4.48913305e+02,\n         4.44146447e+02,   4.32995274e+02,   4.26315380e+02,\n         4.22328895e+02,   4.05541490e+02,   3.98653047e+02,\n         3.96319140e+02,   3.89453125e+02,   3.84647691e+02,\n         3.75627016e+02,   3.71488605e+02,   3.67691102e+02,\n         3.59979435e+02,   3.50653860e+02,   3.48018191e+02,\n         3.35741100e+02,   3.33256260e+02,   3.26076697e+02,\n         3.19055085e+02,   3.09630221e+02,   3.03809793e+02,\n         3.02834775e+02,   2.94473792e+02,   2.89237544e+02,\n         2.83072764e+02,   2.80221278e+02,   2.74752660e+02,\n         2.71946305e+02,   2.67137796e+02,   2.63076632e+02,\n         2.56422198e+02,   2.54502372e+02,   2.49312761e+02,\n         2.44629388e+02,   2.42104483e+02,   2.38784276e+02,\n         2.24177802e+02,   2.21962143e+02,   2.20585254e+02,\n         2.16305370e+02,   2.14023345e+02,   2.10191299e+02,\n         2.06326744e+02,   2.01216165e+02,   1.95901568e+02,\n         1.93425008e+02,   1.86544957e+02,   1.81946842e+02,\n         1.81111952e+02,   1.79250161e+02,   1.73406209e+02,\n         1.71851416e+02,   1.68149855e+02,   1.61459003e+02,\n         1.60960447e+02,   1.54019279e+02,   1.52120965e+02,\n         1.50570121e+02,   1.45586776e+02,   1.42319905e+02,\n         1.41079625e+02,   1.39402001e+02,   1.36894791e+02,\n         1.35479523e+02,   1.33651596e+02,   1.29473707e+02,\n         1.25074480e+02,   1.23799569e+02,   1.21554208e+02,\n         1.19267845e+02,   1.16142251e+02,   1.14798303e+02,\n         1.09566347e+02,   1.07809839e+02,   1.05206661e+02,\n         1.03096542e+02,   1.02101366e+02,   9.92918020e+01,\n         9.80967375e+01,   9.25471187e+01,   9.06671721e+01,\n         8.94885949e+01,   8.59407127e+01,   8.47271098e+01,\n         8.25043759e+01,   8.05678329e+01,   7.98244891e+01,\n         7.88264924e+01,   7.60557363e+01,   7.52551314e+01,\n         7.20841101e+01,   7.16497267e+01,   7.09295551e+01,\n         6.93447334e+01,   6.68699361e+01,   6.61087591e+01,\n         6.51986683e+01,   6.19754992e+01,   6.03605056e+01,\n         5.93183446e+01,   5.72723667e+01,   5.62244673e+01,\n         5.48748626e+01,   5.35303251e+01,   5.31190637e+01,\n         5.14073607e+01,   5.05882613e+01,   4.85873327e+01,\n         4.77033490e+01,   4.61730309e+01,   4.58253352e+01,\n         4.45738941e+01,   4.41688671e+01,   4.30565443e+01,\n         4.21824960e+01,   4.13096543e+01,   4.01687931e+01,\n         3.89251008e+01,   3.76938723e+01,   3.71696405e+01,\n         3.65261279e+01,   3.63225111e+01,   3.47286204e+01,\n         3.38767247e+01,   3.36300965e+01,   3.28077851e+01,\n         3.22430013e+01,   3.19168059e+01,   3.04258560e+01,\n         3.01029523e+01,   2.94482797e+01,   2.93136739e+01,\n         2.84675969e+01,   2.70583102e+01,   2.69171207e+01,\n         2.62988906e+01,   2.53912737e+01,   2.52678982e+01,\n         2.48858839e+01,   2.35476097e+01,   2.33100666e+01,\n         2.23100190e+01,   2.15793552e+01,   2.11961369e+01,\n         2.05803331e+01,   2.00864770e+01,   1.96897799e+01,\n         1.84825965e+01,   1.78147513e+01,   1.76346865e+01,\n         1.67939919e+01,   1.64216226e+01,   1.60543495e+01,\n         1.55344956e+01,   1.49332344e+01,   1.45289863e+01,\n         1.42587318e+01,   1.37963455e+01,   1.34972766e+01,\n         1.34093515e+01,   1.22216082e+01,   1.19781514e+01,\n         1.15231001e+01,   1.09781821e+01,   1.09187142e+01,\n         1.03661279e+01,   1.00838177e+01,   9.79683858e+00,\n         9.54913700e+00,   9.35377121e+00,   8.98307957e+00,\n         8.62827079e+00,   8.43304143e+00,   8.21026198e+00,\n         8.11055326e+00,   7.84205214e+00,   7.82091983e+00,\n         7.72211462e+00,   7.65176844e+00,   7.57527347e+00,\n         7.48948062e+00,   7.32714219e+00,   7.24843636e+00,\n         7.23134018e+00,   7.11545722e+00,   6.94245132e+00,\n         6.90872672e+00,   6.89105932e+00,   6.85271365e+00,\n         6.73119810e+00,   6.67101027e+00,   6.65355095e+00,\n         6.61537333e+00,   6.57919154e+00,   6.51264665e+00,\n         6.43529244e+00,   6.38642585e+00,   6.32124352e+00,\n         6.26921968e+00,   6.22470192e+00,   6.18684862e+00,\n         6.12487899e+00,   6.08056310e+00,   6.02142397e+00,\n         5.98369919e+00,   5.96324230e+00,   5.90521877e+00,\n         5.89164599e+00,   5.85948724e+00,   5.78142589e+00,\n         5.77436927e+00,   5.72763143e+00,   5.68593121e+00,\n         5.64079641e+00,   5.59691503e+00,   5.57872232e+00,\n         5.56560739e+00,   5.46793402e+00,   5.45802649e+00,\n         5.43835398e+00,   5.40609891e+00,   5.38649282e+00,\n         5.35337487e+00,   5.32541786e+00,   5.26717335e+00,\n         5.22386437e+00,   5.18279263e+00,   5.15811624e+00,\n         5.11921277e+00,   5.07521779e+00,   5.06576107e+00,\n         5.02393795e+00,   4.98303961e+00,   4.93214693e+00,\n         4.91731420e+00,   4.85042743e+00,   4.84257910e+00,\n         4.82282191e+00,   4.80521779e+00,   4.75593168e+00,\n         4.74270318e+00,   4.70514352e+00,   4.68191260e+00,\n         4.65822179e+00,   4.62781009e+00,   4.58206294e+00,\n         4.55433009e+00,   4.52197896e+00,   4.47442964e+00,\n         4.45449682e+00,   4.45025349e+00,   4.38840686e+00,\n         4.38117331e+00,   4.35291236e+00,   4.32921175e+00,\n         4.30202225e+00,   4.26791973e+00,   4.21523395e+00,\n         4.21145347e+00,   4.18818581e+00,   4.17622715e+00,\n         4.13550887e+00,   4.12577916e+00,   4.11039284e+00,\n         4.09685513e+00,   4.07109036e+00,   4.02939243e+00,\n         4.00331783e+00,   3.97696241e+00,   3.94503312e+00,\n         3.93368480e+00,   3.84158980e+00,   3.82521909e+00,\n         3.80125077e+00,   3.76970168e+00,   3.76023660e+00,\n         3.75084950e+00,   3.73636863e+00,   3.72902284e+00,\n         3.66340067e+00,   3.64716250e+00,   3.61147057e+00,\n         3.60098533e+00,   3.58812743e+00,   3.53498132e+00,\n         3.52033176e+00,   3.49043477e+00,   3.46514179e+00,\n         3.44527900e+00,   3.42356869e+00,   3.40704111e+00,\n         3.34890626e+00,   3.32804671e+00,   3.29605788e+00,\n         3.28071188e+00,   3.25011320e+00,   3.23532434e+00,\n         3.21811867e+00,   3.18616262e+00,   3.16750232e+00,\n         3.12643543e+00,   3.10574635e+00,   3.09627820e+00,\n         3.05806788e+00,   3.01996318e+00,   3.00220202e+00,\n         2.95796156e+00,   2.94847475e+00,   2.90728643e+00,\n         2.87763724e+00,   2.86278424e+00,   2.83268253e+00,\n         2.82204155e+00,   2.80120062e+00,   2.78503941e+00,\n         2.76435415e+00,   2.74332238e+00,   2.71836658e+00,\n         2.71569528e+00,   2.69770561e+00,   2.64760980e+00,\n         2.62849348e+00,   2.61505591e+00,   2.59158684e+00,\n         2.54179224e+00,   2.51940320e+00,   2.50792107e+00,\n         2.49862874e+00,   2.48957871e+00,   2.44314028e+00,\n         2.42365590e+00,   2.41973257e+00,   2.35331088e+00,\n         2.34517297e+00,   2.31817739e+00,   2.30469350e+00,\n         2.27487356e+00,   2.26056150e+00,   2.23148661e+00,\n         2.20462740e+00,   2.19470644e+00,   2.17251816e+00,\n         2.14874503e+00,   2.11092460e+00,   2.10652682e+00,\n         2.06180197e+00,   2.03489164e+00,   2.02493153e+00,\n         2.01580398e+00,   1.97923652e+00,   1.95861598e+00,\n         1.92322853e+00,   1.91765275e+00,   1.88301850e+00,\n         1.87107658e+00,   1.86174602e+00,   1.81490812e+00,\n         1.80252752e+00,   1.78513146e+00,   1.75186936e+00,\n         1.73384237e+00,   1.69815585e+00,   1.67087083e+00,\n         1.65504461e+00,   1.62833826e+00,   1.59350016e+00,\n         1.58518520e+00,   1.57406121e+00,   1.52318355e+00,\n         1.52041380e+00,   1.48200585e+00,   1.46617961e+00,\n         1.46038913e+00,   1.44102572e+00,   1.42057616e+00,\n         1.40485251e+00,   1.38762119e+00,   1.37527086e+00,\n         1.36211908e+00,   1.34039135e+00,   1.29930779e+00,\n         1.26872251e+00,   1.23195908e+00,   1.22788520e+00,\n         1.22080800e+00,   1.19465263e+00,   1.17805481e+00,\n         1.16555637e+00,   1.12718364e+00,   1.10793283e+00,\n         1.10594246e+00,   1.06675455e+00,   1.04439770e+00,\n         1.02978244e+00,   1.00620518e+00,   9.81504353e-01,\n         9.57163454e-01,   9.33625951e-01,   9.08940260e-01,\n         8.89946907e-01,   8.73754378e-01,   8.54367286e-01,\n         8.33089642e-01,   8.14710711e-01,   7.90545224e-01,\n         7.44180512e-01,   7.25739820e-01,   7.18590163e-01,\n         6.97220443e-01,   6.39175669e-01,   6.18528497e-01,\n         5.96683219e-01,   5.83800689e-01,   5.72232599e-01,\n         5.31453332e-01,   5.26804142e-01,   5.20281933e-01,\n         4.75313705e-01,   4.54635778e-01,   4.34567930e-01,\n         4.23330255e-01,   4.04104582e-01,   3.84718206e-01,\n         3.61246016e-01,   3.32050389e-01,   2.95766519e-01,\n         2.84756495e-01,   2.66739045e-01,   2.41418262e-01,\n         2.08111390e-01,   1.85992093e-01,   1.48587324e-01,\n         1.32123996e-01,   1.16957628e-01,   8.67857990e-02,\n         7.80847492e-02,   6.61861872e-02,   4.85935027e-02,\n         3.31185916e-02,   1.08448303e-02])\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Singular Value Decomposition\n\n\nU\n,\n \ns\n,\n \nVh\n \n=\n \nlinalg\n.\nsvd\n(\nimg\n)\n\n\n\n# Use only 32 singular values\n\n\nA\n \n=\n \nnp\n.\ndot\n(\nU\n[:,\n0\n:\n32\n],\n \n          \nnp\n.\ndot\n(\nnp\n.\ndiag\n(\ns\n[\n0\n:\n32\n]),\n \nVh\n[\n0\n:\n32\n,:]))\n\n\n\n\n\n\n\n1\n2\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n8\n,\n \n3\n))\n\n\nprint\n(\nfig\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nFigure(576x216)\n\n\n\n<matplotlib.figure.Figure at 0x7f7bbb7b0710>\n\n\n\n\n\n\n1\n2\n3\n# Add a subplot to the figure\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n121\n)\n\n\nprint\n(\nax\n)\n\n\n\n\n\n\n\n1\nAxes(0.125,0.125;0.352273x0.755)\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n8\n,\n \n3\n))\n\n\n\n# Add a subplot to the figure\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n121\n)\n\n\n\n# Plot `img` on grayscale\n\n\nax\n.\nimshow\n(\nimg\n,\n \ncmap\n=\n'gray'\n)\n\n\n\n# Add a second subplot to the figure\n\n\nax2\n \n=\n \nfig\n.\nadd_subplot\n(\n122\n)\n\n\n\n# Plot `A` in the second subplot\n\n\nax2\n.\nimshow\n(\nA\n)\n\n\n\n# Add a title\n\n\nfig\n.\nsuptitle\n(\n'Image Compression with SVD'\n,\n \nfontsize\n=\n14\n,\n \nfontweight\n=\n'bold'\n)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()",
            "title": "Vectors and Arrays (Linear Algebra)"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#the-essentials-of-numpy-ndarray-objects",
            "text": "1\n2\n3\n4\n5 % pylab   inline  import   numpy   as   np  myArray   =   np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ]],   dtype   =   np . int64 )  print ( myArray )    1\n2\n3 Populating the interactive namespace from numpy and matplotlib\n[[1 2 3]\n [4 5 6]]   1\n2 # Inspect the data of `myArray`  print ( myArray . data )    1 <memory at 0x7f7bbcb71a68>   1\n2 # Inspect the data type of `myArray`  print ( myArray . dtype )    1 int64   1\n2 # Inspect the shape of `myArray`  print ( myArray . shape )    1 (2, 3)   1\n2 # Inspect the size of `myArray`  print ( myArray . size )    1 6    Convert with  astype() .  Handle complex numbers.   1\n2 # Return the real part of `myArray` elements  np . real ( myArray )    1\n2 array([[1, 2, 3],\n       [4, 5, 6]])   1\n2 # Return the imaginary part of `myArray` elements  np . imag ( myArray )    1\n2 array([[0, 0, 0],\n       [0, 0, 0]])   1\n2 # Return a real array if the complex parts are close to 0  np . real_if_close ( myArray , tol = 1000 )    1\n2 array([[1, 2, 3],\n       [4, 5, 6]])   1\n2 # Cast `myArray` to float  np . cast [ 'f' ]( myArray )    1\n2 array([[ 1.,  2.,  3.],\n       [ 4.,  5.,  6.]], dtype=float32)   1\n2 # Cast `myArray` to integer  np . cast [ 'q' ]( myArray )    1\n2 array([[1, 2, 3],\n       [4, 5, 6]], dtype=int64)    \u2018b\u2019 for int8.  \u2018c\u2019 for |S21; character or string.  \u2018e\u2019 for float16  \u2018f\u2019 for float32.  \u2018g\u2019 for float128  \u2018h\u2019 for int16, integer.  \u2018d\u2019 for digits.  \u2018i\u2019 for int32, integer.  \u2018l\u2019 for long.  \u2018m\u2019 for timedelta64.  \u2018q\u2019 for int64, integer.",
            "title": "The Essentials of Numpy ndarray Objects"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#array-creation",
            "text": "1\n2 # Create a 2X2 identity matrix with `np.eye()`  np . eye ( 2 )    1\n2 array([[ 1.,  0.],\n       [ 0.,  1.]])   1 np . eye ( 2 ,   4 )    1\n2 array([[ 1.,  0.,  0.,  0.],\n       [ 0.,  1.,  0.,  0.]])   1 np . eye ( 4 ,   2 )    1\n2\n3\n4 array([[ 1.,  0.],\n       [ 0.,  1.],\n       [ 0.,  0.],\n       [ 0.,  0.]])   1\n2 # Create a 3X3 identity matrix with `np.identity()`  np . identity ( 3 )    1\n2\n3 array([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])   1\n2 # Uniformly spaced values: spacing; from 2 to 8 (excluded) by 2  np . arange ( 3 ,   8 ,   2 )    1 array([3, 5, 7])   1\n2 # Uniformly spaced values: number of samples; from 2 to 3 in 5 intervals  np . linspace ( 2 ,   3 ,   5 )    1 array([ 2.  ,  2.25,  2.5 ,  2.75,  3.  ])   1\n2 # Uniformly spaced values: logarithmic spacing; from 2 to 3 in 4 intervals   np . logspace ( 2 ,   3 ,   4 )    1 array([  100.        ,   215.443469  ,   464.15888336,  1000.        ])",
            "title": "Array Creation"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#indexing-and-slicing",
            "text": "1 print ( myArray )    1\n2 [[1 2 3] \n  [4 5 6]]    1\n2 # Slice `myArray` at index 0 and 1  print ( myArray [ 0 , 0 : 2 ])    1 [1 2]   1\n2 # Slice `my_2dArray` at row 0 and 1, column 1  print ( myArray [ 0 : 2 , 1 ])    1 [2 5]   1\n2 # Slice `my_3dArray` at row 1  print ( myArray [ 1 , ... ])    1 [4 5 6]   1\n2 # Boolean indexing: only values < 3  print ( myArray [ myArray < 3 ])    1 [1 2]   1\n2 # Fancy indexing; r-c coordinates  print ( myArray [[ 1 ,   0 ,   1 ,   0 ],[ 0 ,   1 ,   2 ,   0 ]])    1 [4 2 6 1]   Meshgrid   Index tricks:  np.mgrid() ,  np.ogrid() ,  np.r  and  np.c .  Instead of  np.concatenate() .  np.meshgrid() .   1\n2\n3\n4\n5\n6 # Create a dense mesh grid; from to (excluded) by  # takes two 1D arrays and produces two 2D matrices   # corresponding to all pairs of (x, y) in the two arrays  # the dimensions and number of the output arrays are equal  # to the number of indexing dimensions  np . mgrid [ 1 : 11 : 2 ,   - 12 : - 3 : 3 ]     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 array([[[  1,   1,   1],\n        [  3,   3,   3],\n        [  5,   5,   5],\n        [  7,   7,   7],\n        [  9,   9,   9]],\n\n       [[-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6]]])   1\n2 # Create an open meshgrid; from to (excluded) by  np . ogrid [ 1 : 11 : 2 ,   - 12 : - 3 : 3 ]    1\n2\n3\n4\n5 [array([[1],\n        [3],\n        [5],\n        [7],\n        [9]]), array([[-12,  -9,  -6]])]   1\n2 # Stack arrays vertically  np . r_ [ 3 ,   [ 0 ] * 5 ,   - 1 : 1 : 10j ]    1\n2\n3 array([ 3.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        , -1.        , -0.77777778, -0.55555556, -0.33333333,\n       -0.11111111,  0.11111111,  0.33333333,  0.55555556,  0.77777778,  1.        ])   1\n2\n3 array   =   np . ones ( 2 )  my2Array   =   np . array ([[ 1 , 2 , 3 , 4 ],[ 5 , 6 , 7 , 8 ]])  print ( array )    1 [ 1.  1.]   1 print ( my2Array )    1\n2 [[1 2 3 4] \n  [5 6 7 8]]    1\n2 # Stack arrays horizontally (left-right)  np . c_ [ array ]    1\n2 array([[ 1.],\n       [ 1.]])   1 np . c_ [ my2Array ]    1\n2 array([[1, 2, 3, 4],\n       [5, 6, 7, 8]])   1 np . c_ [ array ,   my2Array ]    1\n2 array([[ 1.,  1.,  2.,  3.,  4.],\n       [ 1.,  5.,  6.,  7.,  8.]])   1\n2 array2   =   np . array ([[ 1 , 2 , 3 , 4 ],   [ 1 , 2 , 3 , 4 ]])  print ( array2 )    1\n2 [[1 2 3 4] \n  [1 2 3 4]]    1 np . r_ [ array2 ]    1\n2 array([[1, 2, 3, 4],\n       [1, 2, 3, 4]])   1 np . r_ [ my2Array ]    1\n2 array([[1, 2, 3, 4],\n       [5, 6, 7, 8]])   1 np . r_ [ array2 ,   my2Array ]    1\n2\n3\n4 array([[1, 2, 3, 4],\n       [1, 2, 3, 4],\n       [1, 2, 3, 4],\n       [5, 6, 7, 8]])   Other indexing/slicing  1\n2\n3 # Initialize a 2D array   my_2dArray   =   np . array ([[ 1 , 2 , 3 , 4 ],   [ 5 , 6 , 7 , 8 ]],   dtype = np . int64 )  print ( my_2dArray )    1\n2 [[1 2 3 4] \n  [5 6 7 8]]    1\n2\n3\n4 # Select values from `my_2dArray`  # argument 1: select  # argument 2: transform  np . select ([ my_2dArray   <   4 ],   [ my_2dArray ])    1\n2 array([[1, 2, 3, 0],\n       [0, 0, 0, 0]])   1 np . select ([ my_2dArray   <   4 ],   [ my_2dArray   *   2 ])    1\n2 array([[2, 4, 6, 0],\n       [0, 0, 0, 0]])",
            "title": "Indexing and Slicing"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#shape-selection-and-manipulation",
            "text": "Stack.  Split.  Transpose.  Change shape.   1\n2 myArray   =   np . array ([[ 1 ,   2 ,   3 ,   4 ]])  my_2dArray   =   np . array ([[ 1 ,   2 ,   3 ,   4 ],   [ 5 ,   6 ,   7 ,   8 ]])    1 print ( myArray )    1 [[1 2 3 4]]   1 print ( my_2dArray )    1\n2 [[1 2 3 4] \n  [5 6 7 8]]    1\n2 # Stack arrays horizontally (column-wise)  print ( np . hstack (( np . eye ( 2 ),   my_2dArray )))    1\n2 [[ 1.  0.  1.  2.  3.  4.] \n  [ 0.  1.  5.  6.  7.  8.]]    1\n2 # Stack arrays vertically (row-wise)  print ( np . vstack (( myArray ,   my_2dArray )))    1\n2\n3 [[1 2 3 4] \n  [1 2 3 4] \n  [5 6 7 8]]    1\n2 # Split the array horizontally at the 2nd index (left-right)  print ( np . hsplit ( my_2dArray ,   2 ))    1\n2\n3 [array([[1, 2],\n       [5, 6]]), array([[3, 4],\n       [7, 8]])]   1\n2 # Split the array vertically at the 2nd index (top-bottom)  print ( np . vsplit ( my_2dArray ,   2 ))    1 [array([[1, 2, 3, 4]]), array([[5, 6, 7, 8]])]   1\n2 # Permute `myArray` dimensions  print ( np . transpose ( myArray ))    1\n2\n3\n4 [[1] \n  [2] \n  [3] \n  [4]]    1\n2 my_3dArray   =   np . array ([[[ 1 ,   2 ,   3 ,   4 ],   [ 5 ,   6 ,   7 ,    8 ]],   [[ 1 ,   2 ,   3 ,   4 ],   [ 9 ,   10 ,   11 ,   12 ]]])  print ( my_3dArray )    1\n2\n3\n4\n5 [[[ 1  2  3  4] \n   [ 5  6  7  8]] \n\n  [[ 1  2  3  4] \n   [ 9 10 11 12]]]    1\n2 # Flatten `my_3dArray`  print ( my_3dArray . flatten ())    1 [ 1  2  3  4  5  6  7  8  1  2  3  4  9 10 11 12]   np.reshsape()  vs  np.resize() .  1\n2 # Reshape but don't change the data  print ( my_2dArray . reshape ( 4 , 2 ))    1\n2\n3\n4 [[1 2] \n  [3 4] \n  [5 6] \n  [7 8]]    1\n2 # Resize to (6,4)  print ( np . resize ( my_3dArray ,   ( 6 , 4 )))    1\n2\n3\n4\n5\n6 [[ 1  2  3  4] \n  [ 5  6  7  8] \n  [ 1  2  3  4] \n  [ 9 10 11 12] \n  [ 1  2  3  4] \n  [ 5  6  7  8]]    Vectorized functions (to \u2018loop\u2019 over an array, all items)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 # Define a function `myfunc`  def   myfunc ( a , b ): \n   if   a   >   b : \n      return   a   -   b \n   else : \n      return   a   +   b  # Vectorize `myfunc`  vectorizedFunc   =   np . vectorize ( myfunc )   # Apply  print ( myArray )  vectorizedFunc ( myArray ,   2 )    1\n2\n3\n4\n5\n6\n7 [[1 2 3 4]]  array([[3, 4, 1, 2]])    np.angle()  provides the angle of the elements of complex array elements, but also basic trigonometric, exponential or logarithmic functions.",
            "title": "Shape Selection and Manipulation"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#linear-algebra-with-scipy",
            "text": "1\n2\n3\n4 import   scipy  # Check package version  scipy . __version__    1 '0.19.0'",
            "title": "Linear Algebra With SciPy"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#vectors-and-matrices-the-basics",
            "text": "1\n2\n3 # Create a vector  myVector   =   np . array ([ 1 , 2 , 3 , 4 ])  print ( myVector )    1 [1 2 3 4]    A matrix is a subclass of arrays.  A matrix is always 2D.  Both arrays and matrices have  .T () .  Only matrices have  .H ()  and  .I () .  Matrix multiplication works differently from an element-wise array.  T **  has different results for matrices and arrays.  Sparse matrices have mostly zero elements, while the ones that have mostly non-zero elements are called dense matrices.  scipy.linalg .  scipy.sparse .     1\n2\n3 # Create a matrix  myMatrix   =   np . matrix ( np . random . random (( 5 , 5 )))  print ( myMatrix )    1\n2\n3\n4\n5 [[ 0.45409417  0.51518628  0.21891525  0.4827949   0.11485953] \n  [ 0.26387125  0.27904581  0.27371679  0.81793744  0.03194194] \n  [ 0.44758032  0.40043501  0.53270025  0.73481508  0.40994865] \n  [ 0.26650523  0.47469863  0.77731378  0.33237448  0.0932401 ] \n  [ 0.47477976  0.4054091   0.62060959  0.76708818  0.33732755]]    1\n2 # Create a 2X2 identity matrix  np . eye ( 3 ,   k = 1 )            1\n2\n3 array([[ 0.,  1.,  0.],\n       [ 0.,  0.,  1.],\n       [ 0.,  0.,  0.]])   1\n2 # Create a 2x2 identity matrix  np . mat ( np . identity ( 2 ))             1\n2 matrix([[ 1.,  0.],\n        [ 0.,  1.]])   1 C   =   np . matrix ([[ 0.47332239 , 0.26149519 , 0. , 0.01665965 , 0.05914868 ],   [ 0.24440216 , 0. , 0. , 0. , 0. ],    [ 0. , 0. , 0.4320679 , 0.10501837 , 0. ],   [ 0.32164578 , 0. , 0. , 0.10963973 , 0. ],    [ 0.15023766 , 0.04764381 , 0. , 0. , 0.38244847 ],    [ 0.08499095 , 0. , 0.0163261 , 0. , 0.27636168 ],   [ 0. , 0.36569833 , 0.34968224 , 0. , 0.40275066 ],    [ 0. , 0. , 0. , 0.40504002 , 0. ],    [ 0.41632136 , 0.35405707 , 0.33020532 , 0.16344026 , 0. ],   [ 0.04105013 , 0.26913226 , 0. , 0.00280266 , 0. ]])    1 print ( C )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 [[ 0.47332239  0.26149519  0.          0.01665965  0.05914868] \n  [ 0.24440216  0.          0.          0.          0.        ] \n  [ 0.          0.          0.4320679   0.10501837  0.        ] \n  [ 0.32164578  0.          0.          0.10963973  0.        ] \n  [ 0.15023766  0.04764381  0.          0.          0.38244847] \n  [ 0.08499095  0.          0.0163261   0.          0.27636168] \n  [ 0.          0.36569833  0.34968224  0.          0.40275066] \n  [ 0.          0.          0.          0.40504002  0.        ] \n  [ 0.41632136  0.35405707  0.33020532  0.16344026  0.        ] \n  [ 0.04105013  0.26913226  0.          0.00280266  0.        ]]    1 from   scipy   import   linalg ,   sparse    1\n2\n3 # Compressed Sparse Row matrix  # fast access to rows and columns  sparse . csr_matrix ( C )    1\n2 <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Compressed Sparse Row format>   1\n2\n3 # Compressed Sparse Column matrix  # fast access to  rows and columns  sparse . csc_matrix ( C )      1\n2 <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Compressed Sparse Column format>   1\n2\n3 # Dictionary Of Keys matrix  # fill the matrix with numbers one by one  sparse . dok_matrix ( C )      1\n2 <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Dictionary Of Keys format>   1\n2\n3 # block Sparse Row matrices  # constructing the matrix from blocks of smaller matrices  sparse . bsr_matrix ( C )    1\n2 <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements (blocksize = 1x1) in Block Sparse Row format>   1\n2\n3 # COOrdinate format sparse matrices  # fill the matrix with numbers one by one  sparse . coo_matrix ( C )    1\n2 <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in COOrdinate format>   1\n2\n3 # DIAgonal storage sparse matrices  # initialize the matrix with an array as the diagonal  sparse . dia_matrix ( C )    1\n2 <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 47 stored elements (13 diagonals) in DIAgonal format>   1\n2\n3 # Row-based linked list sparse matrices  # sliced-based matrices  sparse . lil_matrix ( C )    1\n2 <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in LInked List format>   1\n2\n3 vector1   =   np . array ([ 1 ,   2 ,   3 ])  vector2   =   np . array ([ 2 ,   3 ,   4 ])  print ( vector1 )    1 [1 2 3]   1 print ( vector2 )    1 [2 3 4]   1\n2\n3\n4\n5 # Addition of `vector1` and `vector2`  vector3   =   vector1   +   vector2  # Print `vector3`  print ( vector3 )    1 [3 5 7]   1\n2\n3\n4\n5 # Subtraction of `vector2` and `vector1`  vector4   =   vector2   -   vector1  # print `vector4`  print ( vector4 )    1 [1 1 1]   1\n2\n3\n4\n5 # Dot product of `vector1` and `vector2`  dotProduct   =   np . dot ( vector1 ,   vector2 )  # Print `dotProduct`  print ( dotProduct )    1 20   1\n2\n3\n4\n5\n6 # Cross product of `vector1` and `vector2`  # vector product in vector algebra; search the formula online  crossProduct   =   np . cross ( vector1 ,   vector2 )  # Print `crossProduct`  print ( crossProduct )    1 [-1  2 -1]",
            "title": "Vectors and Matrices: The Basics"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#matrices-operations-and-routines",
            "text": "1 np . add ( vector1 ,   vector2 )    1 array([3, 5, 7])   1 np . subtract ( vector1 ,   vector2 )    1 array([-1, -1, -1])   1 np . divide ( vector1 ,   vector2 )    1 array([ 0.5       ,  0.66666667,  0.75      ])   1 np . multiply ( vector1 ,   vector2 )    1 array([ 2,  6, 12])   1\n2\n3 # Vector dot product  vectorDotProduct   =   np . vdot ( vector1 ,   vector2 )  print ( vectorDotProduct )    1 20   1\n2\n3 # Inner product  innerProduct   =   np . inner ( vector1 ,   vector2 )  print ( vectorDotProduct )    1 20   1\n2\n3 # Outer product  outerProduct   =   np . outer ( vector1 ,   vector2 )  print ( vectorDotProduct )    1 20   1\n2\n3\n4 matrix1   =   np . matrix ([[ 0.47332239 ,   0.26149519 ],   [ 0.86380934 ,   0.01665965 ]])  matrix2   =   np . matrix ([[ 3 ,   4 ],   [ 5 ,   6 ]])  print ( matrix1 )    1\n2 [[ 0.47332239  0.26149519] \n  [ 0.86380934  0.01665965]]    1 print ( matrix2 )    1\n2 [[3 4] \n  [5 6]]    1\n2\n3 # Tensor dot product  tensorDotProduct   =   np . tensordot ( matrix1 ,   matrix2 )  print ( vectorDotProduct )    1 20   1\n2\n3 # Kronecker product  kronProduct   =   np . kron ( matrix1 ,   matrix2 )  print ( vectorDotProduct )    1 20   1 print ( matrix1 )    1\n2 [[ 0.47332239  0.26149519] \n  [ 0.86380934  0.01665965]]    1\n2\n3\n4 # exponent  linalg . expm ( matrix1 )  #linalg.expm2(matrix1)  #linalg.expm3(matrix1)    1\n2 array([[ 1.76478622,  0.34978586],\n       [ 1.15546404,  1.15393687]])   1\n2 # logarithm  linalg . logm ( matrix1 )    1\n2 array([[-0.54372715+0.89057597j,  0.24956103-0.77901846j],\n       [ 0.82438668-2.57336825j, -0.97954865+2.25101668j]])   1\n2 # squared root  linalg . sqrtm ( matrix1 )    1\n2 array([[ 0.62966832+0.15061317j,  0.21791187-0.1317467j ],\n       [ 0.71983850-0.43520505j,  0.24911742+0.38068933j]])   1\n2 # lambda  linalg . funm ( matrix1 ,   lambda   x :   x * x )    1\n2 array([[ 0.44991607,  0.12812795],\n       [ 0.42325106,  0.22615953]])   1\n2\n3 # transposition  # make a new matrix whose rows are the columns of the original  matrix1 . T    1\n2 matrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])   1 np . transpose ( matrix1 )    1\n2 matrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])   1\n2\n3 # conjugate transposition  # interchanges the row and column index for each matrix element  matrix1 . H    1\n2 matrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])   1\n2\n3 # inverse  # matrix multiplied with the original matrix results in an identity matrix  matrix1 . I    1\n2 matrix([[-0.0764216 ,  1.19953792],\n        [ 3.96248993, -2.17123747]])   1 linalg . inv ( matrix1 )    1\n2 array([[-0.0764216 ,  1.19953792],\n       [ 3.96248993, -2.17123747]])   1\n2 # cast an array  matrix1 . A    1\n2 array([[ 0.47332239,  0.26149519],\n       [ 0.86380934,  0.01665965]])   1\n2 # retrieve the trace or sum of the elements on the main matrix diagonal  np . trace ( matrix1 )    1 0.48998204000000001   1\n2\n3\n4 # retrieve the matrix rank or the number  # of Singular Value Decomposition singular values  # of an array that are greater than a certain threshold  np . linalg . matrix_rank ( matrix1 )    1 2   1\n2\n3\n4 # norm of a matrix  # number defined in terms of the entries of the matrix  # how large the elements are  linalg . norm ( matrix1 )    1 1.0192438074758199   1\n2 # matrix determinant  linalg . det ( matrix1 )    1 -0.21799660213251107   Solving system of  Ax=b Ax=b , where  A A  is a square matrix and  b b  a general matrix. There are two methods to find  x x .  1\n2\n3 A   =   np . matrix ([[ 0.35115177 ,   0.79693272 ],   [ 0.81264708 ,   0.06853826 ]])  b   =   np . matrix ([[ 1. + 5.j ,   0. + 2.j ,   0. + 3.j ],   [   0. + 4.j ,   0. + 5.j ,   0. + 6.j ]])  print ( A )    1\n2 [[ 0.35115177  0.79693272] \n  [ 0.81264708  0.06853826]]    1 print ( b )    1\n2 [[ 1.+5.j  0.+2.j  0.+3.j] \n  [ 0.+4.j  0.+5.j  0.+6.j]]    1\n2 # Dense matrix solver  linalg . solve ( A ,   b )    1\n2\n3\n4 array([[-0.10991486+4.56259221j,  0.00000000+6.17037842j,\n         0.00000000+7.33850519j],\n       [ 1.30324276+4.26364433j,  0.00000000-0.20922633j,\n         0.00000000+0.53087407j]])   1\n2\n3 F   =   np . matrix ([[ 0. ,   1. ,   0. ],   [ 0. ,   0. ,   1. ],   [ 0. ,   0. ,   0. ]])  E   =   np . matrix ([[ 1 ],[ 2 ],[ 3 ]])  print ( F )    1\n2\n3 [[ 0.  1.  0.] \n  [ 0.  0.  1.] \n  [ 0.  0.  0.]]    1 print ( E )    1\n2\n3 [[1] \n  [2] \n  [3]]    1\n2 # Linear least-square solver  np . linalg . lstsq ( F , E )    1\n2\n3\n4\n5\n6 (matrix([[ 0.],\n         [ 1.],\n         [ 2.]]),\n matrix([], shape=(1, 0), dtype=float64),\n 2,\n array([ 1.,  1.,  0.]))   For sparse matrices,  linalg.spsolve() may solve the equation, otherwise, it might still be possible to obtain an approximate  x x  with the help of the  linalg.lstsq() .",
            "title": "Matrices: Operations and Routines"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#eigenvalues-and-eigenvectors",
            "text": "The eigenvalues and eigenvectors are important concepts in many computer vision and machine learning techniques:   Principal Component Analysis (PCA) for dimensionality reduction.  EigenFaces for  face recognition . Consult the latter case for an illustration.   Almost all vectors change direction, when they are multiplied by a matrix. However, certain resulting vectors maintain the same direction after the multiplication. These are the eigenvectors.  Multiply an eigenvector by a matrix, and the resulting vector of that multiplication is equal to a multiplication of the original eigenvector with  \\lambda \\lambda , the eigenvalue:   Ax = \\lambda x  Ax = \\lambda x   Eigenvalue gives valuable information: whether one of the eigenvectors is stretched, shrunk, reversed, or left unchanged when multiplied by a matrix.  1\n2 myMatrix   =   np . matrix ([[ 0.84790079 ,   0.08996585 ],   [ 0.66653841 ,   0.94212726 ]])  print ( myMatrix )    1\n2 [[ 0.84790079  0.08996585] \n  [ 0.66653841  0.94212726]]    1\n2\n3\n4\n5\n6\n7\n8 # Solve eigenvalue problem  la ,   v   =   linalg . eig ( myMatrix )   # Unpack eigenvalues  l1 ,   l2   =   la  # First eigenvector  v [:, 0 ]    1 array([-0.40641758,  0.91368745])   1\n2 # Second eigenvector  v [:, 1 ]    1 array([-0.29036942, -0.95691463])   1\n2 # Or unpack eigenvalues with `eigvals()`  linalg . eigvals ( myMatrix )    1 array([ 0.64564412+0.j,  1.14438393+0.j])   1\n2 # laternative  eigvals ( myMatrix )    1 array([ 0.64564412,  1.14438393])   With sparse matricesL  la, v = sparse.linalg.eigs(myMatrix,1) ; the number of eigenvalues and eigenvectors that has to be retrieved = 1.",
            "title": "Eigenvalues and Eigenvectors"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#singular-value-decomposition-svd",
            "text": "SVD is useful for many tasks:   data compression,  noise reduction, and  data analysis.   SVD is closely linked to Principal Component Analysis (PCA), which is used for dimensionality reduction.  Another link is one with data mining and natural language processing (NLP): Latent Semantic Indexing (LSI). It is a technique that is used in document retrieval and word similarity. Latent semantic indexing uses SVD to group documents to the concepts that could consist of different words found in those documents. Various words can be grouped into a concept. Also here, SVD reduces the noisy correlation between words and their documents, and it decreases the number of dimensions that the original data has.  The singular value decomposition of a matrix  A A  is the decomposition or factorization of  A A  into the product of three matrices:  A=U\u2217\u03a3\u2217V^t A=U\u2217\u03a3\u2217V^t .  The size of the individual matrices is as follows given the matrix  A A  is of size  M x N M x N :   Matrix  U U  is of size  M x M M x M  Matrix  V V  is of size  N x N N x N  Matrix  \\Sigma \\Sigma  is of size  M x N M x N   The  \u2217 \u2217  indicates that the matrices are multiplied and the  t t  in  V^t V^t   \nmeans that the matrix is transposed, which means that the rows and columns are interchanged.  Simply stated, singular value decomposition provides a way to break a matrix into simpler, meaningful pieces. These pieces may contain some data we are interested in.  1 print ( myMatrix )    1\n2 [[ 0.84790079  0.08996585] \n  [ 0.66653841  0.94212726]]    1\n2\n3\n4\n5\n6\n7\n8 # Singular Value Decomposition  U , s , Vh   =   linalg . svd ( myMatrix )   # Initialize `M` and `N`  M , N   =   myMatrix . shape  # Construct sigma matrix in SVD  Sig   =   linalg . diagsvd ( s , M , N )    1\n2\n3 print ( U )  print ( s )  print ( Vh )    1\n2\n3\n4\n5 [[-0.53763961 -0.84317474] \n  [-0.84317474  0.53763961]]  [ 1.32147227  0.5591224 ]  [[-0.7702571  -0.63773348] \n  [-0.63773348  0.7702571 ]]    1\n2 print ( M )  print ( N )    1\n2 2\n2   1 print ( Sig )    1\n2 [[ 1.32147227  0.        ] \n  [ 0.          0.5591224 ]]    With sparse matrices, use the  sparse.linalg.svds() .",
            "title": "Singular Value Decomposition (SVD)"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#compress-images-with-svd",
            "text": "1\n2\n3\n4\n5\n6 % matplotlib   inline  # Import the necessary packages  import   numpy   as   np  from   scipy   import   linalg  from   skimage   import   data  import   matplotlib.pyplot   as   plt    1\n2\n3\n4\n5 # Get an image from `skimage`  img   =   data . camera ()  print ( img )  print ( img . shape )    1\n2\n3\n4\n5\n6\n7\n8 [[156 157 160 ..., 152 152 152] \n  [156 157 159 ..., 152 152 152] \n  [158 157 156 ..., 152 152 152] \n  ...,  \n  [121 123 126 ..., 121 113 111] \n  [121 123 126 ..., 121 113 111] \n  [121 123 126 ..., 121 113 111]]  (512, 512)    1\n2\n3\n4 fig   =   plt . figure ( figsize = ( 8 ,   3 ))  ax   =   fig . add_subplot ( 121 )  ax . imshow ( img ,   cmap = 'gray' )  plt . show ()     1\n2 # Check number of singular values  linalg . svdvals ( img )      1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171 array([  6.38689996e+04,   1.44910897e+04,   1.09561592e+04,\n         6.19958837e+03,   5.85460599e+03,   4.82514545e+03,\n         4.59023130e+03,   3.61148738e+03,   3.34731861e+03,\n         3.14349896e+03,   3.05262875e+03,   2.95922014e+03,\n         2.84709763e+03,   2.81972262e+03,   2.53580358e+03,\n         2.35379736e+03,   2.25234388e+03,   2.19445315e+03,\n         1.95347281e+03,   1.93643231e+03,   1.78576072e+03,\n         1.68444543e+03,   1.55985334e+03,   1.53124809e+03,\n         1.49461049e+03,   1.46783730e+03,   1.37841479e+03,\n         1.31705840e+03,   1.28469563e+03,   1.26983772e+03,\n         1.23258950e+03,   1.19028553e+03,   1.14311122e+03,\n         1.11896715e+03,   1.07893598e+03,   1.04322585e+03,\n         1.00915095e+03,   9.95390582e+02,   9.77961424e+02,\n         9.41174385e+02,   9.32201249e+02,   8.93615745e+02,\n         8.74195561e+02,   8.58051291e+02,   8.29598226e+02,\n         8.00811160e+02,   7.93729536e+02,   7.89373695e+02,\n         7.58404767e+02,   7.29609262e+02,   7.09087154e+02,\n         7.00077886e+02,   6.86673719e+02,   6.65400930e+02,\n         6.56677192e+02,   6.28475541e+02,   6.10557098e+02,\n         5.94000126e+02,   5.84294112e+02,   5.72429055e+02,\n         5.69451585e+02,   5.50921578e+02,   5.37266578e+02,\n         5.33291637e+02,   5.21789437e+02,   5.05141703e+02,\n         5.01052645e+02,   4.93184398e+02,   4.80118682e+02,\n         4.73384191e+02,   4.56418309e+02,   4.48913305e+02,\n         4.44146447e+02,   4.32995274e+02,   4.26315380e+02,\n         4.22328895e+02,   4.05541490e+02,   3.98653047e+02,\n         3.96319140e+02,   3.89453125e+02,   3.84647691e+02,\n         3.75627016e+02,   3.71488605e+02,   3.67691102e+02,\n         3.59979435e+02,   3.50653860e+02,   3.48018191e+02,\n         3.35741100e+02,   3.33256260e+02,   3.26076697e+02,\n         3.19055085e+02,   3.09630221e+02,   3.03809793e+02,\n         3.02834775e+02,   2.94473792e+02,   2.89237544e+02,\n         2.83072764e+02,   2.80221278e+02,   2.74752660e+02,\n         2.71946305e+02,   2.67137796e+02,   2.63076632e+02,\n         2.56422198e+02,   2.54502372e+02,   2.49312761e+02,\n         2.44629388e+02,   2.42104483e+02,   2.38784276e+02,\n         2.24177802e+02,   2.21962143e+02,   2.20585254e+02,\n         2.16305370e+02,   2.14023345e+02,   2.10191299e+02,\n         2.06326744e+02,   2.01216165e+02,   1.95901568e+02,\n         1.93425008e+02,   1.86544957e+02,   1.81946842e+02,\n         1.81111952e+02,   1.79250161e+02,   1.73406209e+02,\n         1.71851416e+02,   1.68149855e+02,   1.61459003e+02,\n         1.60960447e+02,   1.54019279e+02,   1.52120965e+02,\n         1.50570121e+02,   1.45586776e+02,   1.42319905e+02,\n         1.41079625e+02,   1.39402001e+02,   1.36894791e+02,\n         1.35479523e+02,   1.33651596e+02,   1.29473707e+02,\n         1.25074480e+02,   1.23799569e+02,   1.21554208e+02,\n         1.19267845e+02,   1.16142251e+02,   1.14798303e+02,\n         1.09566347e+02,   1.07809839e+02,   1.05206661e+02,\n         1.03096542e+02,   1.02101366e+02,   9.92918020e+01,\n         9.80967375e+01,   9.25471187e+01,   9.06671721e+01,\n         8.94885949e+01,   8.59407127e+01,   8.47271098e+01,\n         8.25043759e+01,   8.05678329e+01,   7.98244891e+01,\n         7.88264924e+01,   7.60557363e+01,   7.52551314e+01,\n         7.20841101e+01,   7.16497267e+01,   7.09295551e+01,\n         6.93447334e+01,   6.68699361e+01,   6.61087591e+01,\n         6.51986683e+01,   6.19754992e+01,   6.03605056e+01,\n         5.93183446e+01,   5.72723667e+01,   5.62244673e+01,\n         5.48748626e+01,   5.35303251e+01,   5.31190637e+01,\n         5.14073607e+01,   5.05882613e+01,   4.85873327e+01,\n         4.77033490e+01,   4.61730309e+01,   4.58253352e+01,\n         4.45738941e+01,   4.41688671e+01,   4.30565443e+01,\n         4.21824960e+01,   4.13096543e+01,   4.01687931e+01,\n         3.89251008e+01,   3.76938723e+01,   3.71696405e+01,\n         3.65261279e+01,   3.63225111e+01,   3.47286204e+01,\n         3.38767247e+01,   3.36300965e+01,   3.28077851e+01,\n         3.22430013e+01,   3.19168059e+01,   3.04258560e+01,\n         3.01029523e+01,   2.94482797e+01,   2.93136739e+01,\n         2.84675969e+01,   2.70583102e+01,   2.69171207e+01,\n         2.62988906e+01,   2.53912737e+01,   2.52678982e+01,\n         2.48858839e+01,   2.35476097e+01,   2.33100666e+01,\n         2.23100190e+01,   2.15793552e+01,   2.11961369e+01,\n         2.05803331e+01,   2.00864770e+01,   1.96897799e+01,\n         1.84825965e+01,   1.78147513e+01,   1.76346865e+01,\n         1.67939919e+01,   1.64216226e+01,   1.60543495e+01,\n         1.55344956e+01,   1.49332344e+01,   1.45289863e+01,\n         1.42587318e+01,   1.37963455e+01,   1.34972766e+01,\n         1.34093515e+01,   1.22216082e+01,   1.19781514e+01,\n         1.15231001e+01,   1.09781821e+01,   1.09187142e+01,\n         1.03661279e+01,   1.00838177e+01,   9.79683858e+00,\n         9.54913700e+00,   9.35377121e+00,   8.98307957e+00,\n         8.62827079e+00,   8.43304143e+00,   8.21026198e+00,\n         8.11055326e+00,   7.84205214e+00,   7.82091983e+00,\n         7.72211462e+00,   7.65176844e+00,   7.57527347e+00,\n         7.48948062e+00,   7.32714219e+00,   7.24843636e+00,\n         7.23134018e+00,   7.11545722e+00,   6.94245132e+00,\n         6.90872672e+00,   6.89105932e+00,   6.85271365e+00,\n         6.73119810e+00,   6.67101027e+00,   6.65355095e+00,\n         6.61537333e+00,   6.57919154e+00,   6.51264665e+00,\n         6.43529244e+00,   6.38642585e+00,   6.32124352e+00,\n         6.26921968e+00,   6.22470192e+00,   6.18684862e+00,\n         6.12487899e+00,   6.08056310e+00,   6.02142397e+00,\n         5.98369919e+00,   5.96324230e+00,   5.90521877e+00,\n         5.89164599e+00,   5.85948724e+00,   5.78142589e+00,\n         5.77436927e+00,   5.72763143e+00,   5.68593121e+00,\n         5.64079641e+00,   5.59691503e+00,   5.57872232e+00,\n         5.56560739e+00,   5.46793402e+00,   5.45802649e+00,\n         5.43835398e+00,   5.40609891e+00,   5.38649282e+00,\n         5.35337487e+00,   5.32541786e+00,   5.26717335e+00,\n         5.22386437e+00,   5.18279263e+00,   5.15811624e+00,\n         5.11921277e+00,   5.07521779e+00,   5.06576107e+00,\n         5.02393795e+00,   4.98303961e+00,   4.93214693e+00,\n         4.91731420e+00,   4.85042743e+00,   4.84257910e+00,\n         4.82282191e+00,   4.80521779e+00,   4.75593168e+00,\n         4.74270318e+00,   4.70514352e+00,   4.68191260e+00,\n         4.65822179e+00,   4.62781009e+00,   4.58206294e+00,\n         4.55433009e+00,   4.52197896e+00,   4.47442964e+00,\n         4.45449682e+00,   4.45025349e+00,   4.38840686e+00,\n         4.38117331e+00,   4.35291236e+00,   4.32921175e+00,\n         4.30202225e+00,   4.26791973e+00,   4.21523395e+00,\n         4.21145347e+00,   4.18818581e+00,   4.17622715e+00,\n         4.13550887e+00,   4.12577916e+00,   4.11039284e+00,\n         4.09685513e+00,   4.07109036e+00,   4.02939243e+00,\n         4.00331783e+00,   3.97696241e+00,   3.94503312e+00,\n         3.93368480e+00,   3.84158980e+00,   3.82521909e+00,\n         3.80125077e+00,   3.76970168e+00,   3.76023660e+00,\n         3.75084950e+00,   3.73636863e+00,   3.72902284e+00,\n         3.66340067e+00,   3.64716250e+00,   3.61147057e+00,\n         3.60098533e+00,   3.58812743e+00,   3.53498132e+00,\n         3.52033176e+00,   3.49043477e+00,   3.46514179e+00,\n         3.44527900e+00,   3.42356869e+00,   3.40704111e+00,\n         3.34890626e+00,   3.32804671e+00,   3.29605788e+00,\n         3.28071188e+00,   3.25011320e+00,   3.23532434e+00,\n         3.21811867e+00,   3.18616262e+00,   3.16750232e+00,\n         3.12643543e+00,   3.10574635e+00,   3.09627820e+00,\n         3.05806788e+00,   3.01996318e+00,   3.00220202e+00,\n         2.95796156e+00,   2.94847475e+00,   2.90728643e+00,\n         2.87763724e+00,   2.86278424e+00,   2.83268253e+00,\n         2.82204155e+00,   2.80120062e+00,   2.78503941e+00,\n         2.76435415e+00,   2.74332238e+00,   2.71836658e+00,\n         2.71569528e+00,   2.69770561e+00,   2.64760980e+00,\n         2.62849348e+00,   2.61505591e+00,   2.59158684e+00,\n         2.54179224e+00,   2.51940320e+00,   2.50792107e+00,\n         2.49862874e+00,   2.48957871e+00,   2.44314028e+00,\n         2.42365590e+00,   2.41973257e+00,   2.35331088e+00,\n         2.34517297e+00,   2.31817739e+00,   2.30469350e+00,\n         2.27487356e+00,   2.26056150e+00,   2.23148661e+00,\n         2.20462740e+00,   2.19470644e+00,   2.17251816e+00,\n         2.14874503e+00,   2.11092460e+00,   2.10652682e+00,\n         2.06180197e+00,   2.03489164e+00,   2.02493153e+00,\n         2.01580398e+00,   1.97923652e+00,   1.95861598e+00,\n         1.92322853e+00,   1.91765275e+00,   1.88301850e+00,\n         1.87107658e+00,   1.86174602e+00,   1.81490812e+00,\n         1.80252752e+00,   1.78513146e+00,   1.75186936e+00,\n         1.73384237e+00,   1.69815585e+00,   1.67087083e+00,\n         1.65504461e+00,   1.62833826e+00,   1.59350016e+00,\n         1.58518520e+00,   1.57406121e+00,   1.52318355e+00,\n         1.52041380e+00,   1.48200585e+00,   1.46617961e+00,\n         1.46038913e+00,   1.44102572e+00,   1.42057616e+00,\n         1.40485251e+00,   1.38762119e+00,   1.37527086e+00,\n         1.36211908e+00,   1.34039135e+00,   1.29930779e+00,\n         1.26872251e+00,   1.23195908e+00,   1.22788520e+00,\n         1.22080800e+00,   1.19465263e+00,   1.17805481e+00,\n         1.16555637e+00,   1.12718364e+00,   1.10793283e+00,\n         1.10594246e+00,   1.06675455e+00,   1.04439770e+00,\n         1.02978244e+00,   1.00620518e+00,   9.81504353e-01,\n         9.57163454e-01,   9.33625951e-01,   9.08940260e-01,\n         8.89946907e-01,   8.73754378e-01,   8.54367286e-01,\n         8.33089642e-01,   8.14710711e-01,   7.90545224e-01,\n         7.44180512e-01,   7.25739820e-01,   7.18590163e-01,\n         6.97220443e-01,   6.39175669e-01,   6.18528497e-01,\n         5.96683219e-01,   5.83800689e-01,   5.72232599e-01,\n         5.31453332e-01,   5.26804142e-01,   5.20281933e-01,\n         4.75313705e-01,   4.54635778e-01,   4.34567930e-01,\n         4.23330255e-01,   4.04104582e-01,   3.84718206e-01,\n         3.61246016e-01,   3.32050389e-01,   2.95766519e-01,\n         2.84756495e-01,   2.66739045e-01,   2.41418262e-01,\n         2.08111390e-01,   1.85992093e-01,   1.48587324e-01,\n         1.32123996e-01,   1.16957628e-01,   8.67857990e-02,\n         7.80847492e-02,   6.61861872e-02,   4.85935027e-02,\n         3.31185916e-02,   1.08448303e-02])   1\n2\n3\n4\n5\n6 # Singular Value Decomposition  U ,   s ,   Vh   =   linalg . svd ( img )  # Use only 32 singular values  A   =   np . dot ( U [:, 0 : 32 ],  \n           np . dot ( np . diag ( s [ 0 : 32 ]),   Vh [ 0 : 32 ,:]))    1\n2 fig   =   plt . figure ( figsize = ( 8 ,   3 ))  print ( fig )    1\n2\n3\n4\n5 Figure(576x216)\n\n\n\n<matplotlib.figure.Figure at 0x7f7bbb7b0710>   1\n2\n3 # Add a subplot to the figure  ax   =   fig . add_subplot ( 121 )  print ( ax )    1 Axes(0.125,0.125;0.352273x0.755)    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 fig   =   plt . figure ( figsize = ( 8 ,   3 ))  # Add a subplot to the figure  ax   =   fig . add_subplot ( 121 )  # Plot `img` on grayscale  ax . imshow ( img ,   cmap = 'gray' )  # Add a second subplot to the figure  ax2   =   fig . add_subplot ( 122 )  # Plot `A` in the second subplot  ax2 . imshow ( A )  # Add a title  fig . suptitle ( 'Image Compression with SVD' ,   fontsize = 14 ,   fontweight = 'bold' )  # Show the plot  plt . show ()",
            "title": "Compress images with SVD"
        },
        {
            "location": "/Matplotlib, Python Plotting/",
            "text": "CONTENT\n\n\nA Matplotlib Python Plot\n\n\nmatplotlib, pyplot and pylab: how are they related?\n\n\nCreate a Plot\n\n\nA Subplot\n\n\nThe Difference Between add_axes() and add_subplot()\n\n\n\n\n\n\nChange the Size of Figures\n\n\nWorking With Pyplot: Plotting Routines\n\n\nCustomize pyplot\n\n\nDelete an Axis\n\n\nPut the Legend out of the Plot\n\n\nSet Plot Title and Axes Labels\n\n\nSet the Plot Layout\n\n\n\n\n\n\nShow, Save, and Close the Plot\n\n\nSave a Plot to an Image File\n\n\nSave a Plot to a Pdf File\n\n\nUse cla(), clf() or close()\n\n\n\n\n\n\nCustomizing Matplotlib\n\n\nUse a ggplot2 Style\n\n\nrc Settings\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nA Matplotlib Python Plot\n\u00b6\n\n\nImports, prepare some data, and start plotting.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n%\nmatplotlib\n \ninline\n\n\n\n# Import the necessary packages and modules\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# Prepare the plot\n\n\nimport\n \nmatplotlib\n \nas\n \nmpl\n\n\nmpl\n.\nrcParams\n[\n'lines.linewidth'\n]\n \n=\n \n1\n\n\nplt\n.\nstyle\n.\nuse\n(\n\"default\"\n)\n\n\n\n\n\n\n\n1\n2\n3\n# Prepare the data\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n,\n \n100\n)\n\n\nprint\n(\nx\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n[  0.           0.1010101    0.2020202    0.3030303    0.4040404\n   0.50505051   0.60606061   0.70707071   0.80808081   0.90909091\n   1.01010101   1.11111111   1.21212121   1.31313131   1.41414141\n   1.51515152   1.61616162   1.71717172   1.81818182   1.91919192\n   2.02020202   2.12121212   2.22222222   2.32323232   2.42424242\n   2.52525253   2.62626263   2.72727273   2.82828283   2.92929293\n   3.03030303   3.13131313   3.23232323   3.33333333   3.43434343\n   3.53535354   3.63636364   3.73737374   3.83838384   3.93939394\n   4.04040404   4.14141414   4.24242424   4.34343434   4.44444444\n   4.54545455   4.64646465   4.74747475   4.84848485   4.94949495\n   5.05050505   5.15151515   5.25252525   5.35353535   5.45454545\n   5.55555556   5.65656566   5.75757576   5.85858586   5.95959596\n   6.06060606   6.16161616   6.26262626   6.36363636   6.46464646\n   6.56565657   6.66666667   6.76767677   6.86868687   6.96969697\n   7.07070707   7.17171717   7.27272727   7.37373737   7.47474747\n   7.57575758   7.67676768   7.77777778   7.87878788   7.97979798\n   8.08080808   8.18181818   8.28282828   8.38383838   8.48484848\n   8.58585859   8.68686869   8.78787879   8.88888889   8.98989899\n   9.09090909   9.19191919   9.29292929   9.39393939   9.49494949\n   9.5959596    9.6969697    9.7979798    9.8989899   10.        ]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Plot the data\n\n\nplt\n.\nplot\n(\nx\n,\n \nx\n,\n \nlabel\n=\n'linear'\n)\n\n\n\n# Add a legend\n\n\nplt\n.\nlegend\n()\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\nFigure.\n\n\nTitle, sub, text, legend.\n\n\nAxes with \nplot()\n and \nscatter()\n with ticks, labels, etc.\n\n\n\n\n\n\n\n\nax.plot()\n calls \nplt.plot()\n.\n\n\nax.scatter\n calls \nplt.scatter\n.\n\n\nax.set_xlim\n call \nplt.xlim\n.\n\n\n\n\nWith multiple axes, be explicit and prefer the first snippet to the second. See below.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nfig\n \n=\n \nplt\n.\nfigure\n()\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n)\n\n\n\nax\n.\nplot\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n],\n \n[\n10\n,\n \n20\n,\n \n25\n,\n \n30\n],\n \ncolor\n=\n'lightblue'\n,\n \nlinewidth\n=\n3\n)\n\n\nax\n.\nscatter\n([\n0.3\n,\n \n3.8\n,\n \n1.2\n,\n \n2.5\n],\n \n[\n11\n,\n \n25\n,\n \n9\n,\n \n26\n],\n \ncolor\n=\n'darkgreen'\n,\n \nmarker\n=\n'^'\n)\n\n\nax\n.\nset_xlim\n(\n0.5\n,\n \n4.5\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nplt\n.\nplot\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n],\n \n[\n10\n,\n \n20\n,\n \n25\n,\n \n30\n],\n \ncolor\n=\n'lightblue'\n,\n \nlinewidth\n=\n3\n)\n\n\nplt\n.\nscatter\n([\n0.3\n,\n \n3.8\n,\n \n1.2\n,\n \n2.5\n],\n \n[\n11\n,\n \n25\n,\n \n9\n,\n \n26\n],\n \ncolor\n=\n'darkgreen'\n,\n \nmarker\n=\n'^'\n)\n\n\nplt\n.\nxlim\n(\n0.5\n,\n \n4.5\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\nEach Axes has an x-axis and a y-axis, which contain ticks, which have major and minor ticklines and ticklabels.\n\n\nThe axis labels, title, and legend.\n\n\nSpines are lines that connect the axis tick marks and that designate the boundaries of the data area. The right and top spines are set to invisible.\n\n\n\n\n\n\n\n\nEverything drawn using \nmatplotlib\n is part of the Artist module. The containers to plot the data, such as Axis, Axes, and Figure, and other graphical objects such as text, patches, etc.\n\n\nGALLERY\n.\n\n\n\n\nmatplotlib\n, \npyplot\n and \npylab\n: how are they related?\n\u00b6\n\n\npyplot\n is a module in \nmatplotlib\n to implicitly and automatically create figures and axes. Everything can be customized though.\n\n\n%pylab\n and \n%pylab\n \ninline\n import \npyplot\n and \nnumpy\n. \n%matplotlib\n and \n%matplotlib\n \ninline\n import \npyplot\n.\n\n\nmatplotlib\n can save images to the local file system.\n\n\nCreate a Plot\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Import `pyplot`\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Initialize a Figure \n\n\nfig\n \n=\n \nplt\n.\nfigure\n()\n\n\n\n# Add Axes to the Figure\n\n\nfig\n.\nadd_axes\n([\n0\n,\n0\n,\n1\n,\n1\n])\n\n\n\n\n\n\n\n1\n<matplotlib.axes._axes.Axes at 0x7f796d5c7ac8>\n\n\n\n\n\n\n\n\nA Subplot\n\u00b6\n\n\nAxes and subplot are synonymous. There is, however, a difference between the \nadd_axes()\n and the \nadd_subplots()\n function.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n# Import the necessary packages and modules\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# Create a Figure\n\n\nfig\n \n=\n \nplt\n.\nfigure\n()\n\n\n\n# Set up Axes\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n)\n\n\n\n# Scatter the data\n\n\nax\n.\nscatter\n(\nnp\n.\nlinspace\n(\n0\n,\n \n1\n,\n \n5\n),\n \nnp\n.\nlinspace\n(\n0\n,\n \n5\n,\n \n5\n))\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n111\n designates the number of rows (1), the number of columns (1) and the plot number (1); it means one subplot.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# Create a Figure\n\n\nfig\n \n=\n \nplt\n.\nfigure\n()\n\n\n\n# Set up Axes of no 1\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n121\n)\n\n\n\n# Scatter the data\n\n\nax\n.\nscatter\n(\nnp\n.\nlinspace\n(\n0\n,\n \n1\n,\n \n5\n),\n \nnp\n.\nlinspace\n(\n0\n,\n \n5\n,\n \n5\n))\n\n\n\n# Set up Axes of no 2\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n122\n)\n\n\n\n# Scatter the data\n\n\nax\n.\nscatter\n(\nnp\n.\nlinspace\n(\n0\n,\n \n1\n,\n \n5\n),\n \nnp\n.\nlinspace\n(\n0\n,\n \n5\n,\n \n5\n))\n\n\n\n# Show the plots\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nThe Difference Between \nadd_axes()\n and \nadd_subplot()\n\u00b6\n\n\n\n\nadd_axes()\n is the lower left point, the width, and the height. In cases where the positioning matters.\n\n\nadd_subplot()\n is a grid: the number of rows, columns, and the plot number.\n\n\n\n\nChange the Size of Figures\n\u00b6\n\n\nplt.figure(figsize=(3,4))\n for the width and height in inches.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Initialize the plot\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n20\n,\n10\n))\n\n\nax1\n \n=\n \nfig\n.\nadd_subplot\n(\n121\n)\n\n\nax2\n \n=\n \nfig\n.\nadd_subplot\n(\n122\n)\n\n\n\nax1\n.\nbar\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n5\n])\n\n\nax2\n.\nbarh\n([\n0.5\n,\n1\n,\n2.5\n],[\n0\n,\n1\n,\n2\n])\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Initialize the plot\n\n\nfig\n,\n \n(\nax1\n,\n \nax2\n)\n \n=\n \nplt\n.\nsubplots\n(\n1\n,\n2\n,\n \nfigsize\n=\n(\n20\n,\n10\n))\n\n\n\nax1\n.\nbar\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n5\n])\n\n\nax2\n.\nbarh\n([\n0.5\n,\n1\n,\n2.5\n],[\n0\n,\n1\n,\n2\n])\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nWorking With Pyplot: Plotting Routines\n\u00b6\n\n\nCommon plots.\n\n\n\n\nax.bar()\n: Vertical rectangles.\n\n\nax.barh()\n: Horizontal rectangles.\n\n\nax.axhline()\n: Horizontal line across axes.\n\n\nax.axvline()\n: Vertical line across axes.\n\n\nax.fill()\n: Filled polygons.\n\n\nax.fill_between()\n: Fill between y-values and 0 (area plot).\n\n\nax.stackplot()\n: Stack plot.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n20\n,\n10\n))\n\n\nax1\n \n=\n \nfig\n.\nadd_subplot\n(\n231\n)\n\n\nax2\n \n=\n \nfig\n.\nadd_subplot\n(\n232\n)\n\n\nax3\n \n=\n \nfig\n.\nadd_subplot\n(\n233\n)\n\n\nax4\n \n=\n \nfig\n.\nadd_subplot\n(\n234\n)\n\n\nax5\n \n=\n \nfig\n.\nadd_subplot\n(\n235\n)\n\n\nax6\n \n=\n \nfig\n.\nadd_subplot\n(\n236\n)\n\n\n\nax1\n.\nbar\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n5\n])\n\n\nax1\n.\naxvline\n(\n1.65\n,\n \ncolor\n=\n'red'\n,\n \nlinewidth\n=\n2\n)\n\n\n\nax2\n.\nbarh\n([\n0.5\n,\n1\n,\n2.5\n],[\n0\n,\n1\n,\n2\n])\n\n\nax2\n.\naxhline\n(\n1.45\n,\n \ncolor\n=\n'red'\n,\n \nlinewidth\n=\n2\n)\n\n\n\nax3\n.\nscatter\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n8\n],\n \nmarker\n=\n'^'\n)\n\n\n\nax4\n.\nplot\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n],\n \n[\n10\n,\n \n20\n,\n \n25\n,\n \n30\n],\n \ncolor\n=\n'lightblue'\n,\n \nlinewidth\n=\n3\n)\n\n\n\nax5\n.\nfill_between\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n8\n])\n\n\n\nax6\n.\nstackplot\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n8\n])\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nSpecialized plots.\n\n\n\n\nax.arrow()\n: Arrow.\n\n\nax.quiver()\n: 2D field of arrows.\n\n\nax.streamplot()\n: 2D vector fields.\n\n\nax.hist()\n: Histogram.\n\n\nax.boxplot()\n: Boxplot.\n\n\nax.violinplot()\n: Violinplot.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n20\n,\n10\n))\n\n\nax1\n \n=\n \nfig\n.\nadd_subplot\n(\n231\n)\n\n\nax2\n \n=\n \nfig\n.\nadd_subplot\n(\n232\n)\n\n\nax3\n \n=\n \nfig\n.\nadd_subplot\n(\n233\n)\n\n\nax4\n \n=\n \nfig\n.\nadd_subplot\n(\n234\n)\n\n\nax5\n \n=\n \nfig\n.\nadd_subplot\n(\n235\n)\n\n\nax6\n \n=\n \nfig\n.\nadd_subplot\n(\n236\n)\n\n\n\nax1\n.\narrow\n(\n0\n,\n \n0\n,\n \n0.5\n,\n \n0.5\n,\n \nhead_width\n=\n0.05\n,\n \nhead_length\n=\n0.1\n,\n \nfc\n=\n'k'\n,\n \nec\n=\n'k'\n)\n\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nnp\n.\narange\n(\n0\n,\n \n2\n \n*\n \nnp\n.\npi\n,\n \n.\n2\n),\n \nnp\n.\narange\n(\n0\n,\n \n2\n \n*\n \nnp\n.\npi\n,\n \n.\n2\n))\n\n\nU\n \n=\n \nnp\n.\ncos\n(\nX\n)\n\n\nV\n \n=\n \nnp\n.\nsin\n(\nY\n)\n\n\nax2\n.\nquiver\n(\nX\n,\n \nY\n,\n \nU\n,\n \nV\n,\n \nunits\n=\n'width'\n)\n\n\n\nY\n,\n \nX\n \n=\n \nnp\n.\nmgrid\n[\n-\n3\n:\n3\n:\n100j\n,\n \n-\n3\n:\n3\n:\n100j\n]\n\n\nU\n \n=\n \n-\n1\n \n-\n \nX\n**\n2\n \n+\n \nY\n\n\nV\n \n=\n \n1\n \n+\n \nX\n \n-\n \nY\n**\n2\n\n\nspeed\n \n=\n \nnp\n.\nsqrt\n(\nU\n*\nU\n \n+\n \nV\n*\nV\n)\n\n\nax3\n.\nstreamplot\n(\nX\n,\n \nY\n,\n \nU\n,\n \nV\n,\n \ncolor\n=\nU\n)\n\n\n\nax4\n.\nhist\n(\nnp\n.\nrandom\n.\nrand\n(\n50\n)\n \n*\n \n100\n)\n\n\n\nax5\n.\nboxplot\n(\nnp\n.\nrandom\n.\nrand\n(\n50\n)\n \n*\n \n100\n)\n\n\n\nax6\n.\nviolinplot\n(\nnp\n.\nrandom\n.\nrand\n(\n50\n)\n \n*\n \n100\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nAnd more specialized plots.\n\n\n\n\nax.pcolor()\n: Pseudocolor plot.\n\n\nax.pcolormesh()\n: Pseudocolor plot.\n\n\nax.contour()\n: Contour plot.\n\n\nax.contourf()\n: Filled contour plot.\n\n\nax.clabel()\n: Labeled contour plot.\n\n\n\n\nContour plots are used to explore the potential relationship between three variables. Pseudocolor plots can be used for this purpose since they are surface plot seen from above. \n\n\nCustomize \npyplot\n\u00b6\n\n\nSee the online plot \nGallery\n\n\nDelete an Axis\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n20\n,\n10\n))\n\n\nax1\n \n=\n \nfig\n.\nadd_subplot\n(\n131\n)\n\n\nax2\n \n=\n \nfig\n.\nadd_subplot\n(\n132\n)\n\n\nax3\n \n=\n \nfig\n.\nadd_subplot\n(\n133\n)\n\n\n\nax1\n.\nbar\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n5\n])\n\n\nax1\n.\naxvline\n(\n0.65\n,\n \ncolor\n=\n'red'\n)\n\n\n\nax2\n.\nbarh\n([\n0.5\n,\n1\n,\n2.5\n],[\n0\n,\n1\n,\n2\n])\n\n\nax2\n.\naxhline\n(\n0.45\n,\n \ncolor\n=\n'red'\n)\n\n\n\nax3\n.\nscatter\n(\nnp\n.\nlinspace\n(\n0\n,\n \n1\n,\n \n5\n),\n \nnp\n.\nlinspace\n(\n0\n,\n \n5\n,\n \n5\n))\n\n\n\n# Delete `ax3` !!! (add them back further down)\n\n\nfig\n.\ndelaxes\n(\nax3\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n20\n,\n10\n))\n\n\nax1\n \n=\n \nfig\n.\nadd_subplot\n(\n131\n)\n\n\nax2\n \n=\n \nfig\n.\nadd_subplot\n(\n132\n)\n\n\nax3\n \n=\n \nfig\n.\nadd_subplot\n(\n133\n)\n\n\n\nax1\n.\nbar\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n5\n])\n\n\nax1\n.\naxvline\n(\n0.65\n,\n \ncolor\n=\n'red'\n)\n\n\n\nax2\n.\nbarh\n([\n0.5\n,\n1\n,\n2.5\n],[\n0\n,\n1\n,\n2\n])\n\n\nax2\n.\naxhline\n(\n0.45\n,\n \ncolor\n=\n'red'\n)\n\n\n\nax3\n.\nscatter\n(\nnp\n.\nlinspace\n(\n0\n,\n \n1\n,\n \n5\n),\n \nnp\n.\nlinspace\n(\n0\n,\n \n5\n,\n \n5\n))\n\n\n\n# Delete `ax3` !!!\n\n\nfig\n.\ndelaxes\n(\nax3\n)\n\n\n# Add them back !!!\n\n\nfig\n.\nadd_axes\n(\nax3\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nPut the Legend out of the Plot\n\u00b6\n\n\nlegend()\n with many options.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n10\n,\n5\n))\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n)\n\n\nax\n.\nbar\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n5\n],\n \nwidth\n=\n0.2\n,\n \nalign\n=\n'center'\n,\n \nlabel\n=\n\"test1\"\n)\n\n\nax\n.\nbar\n([\n1.2\n,\n2.2\n,\n3.2\n],[\n4\n,\n5\n,\n3\n],\n \ncolor\n=\n'darkgreen'\n,\n \nwidth\n=\n0.2\n,\n \nalign\n=\n'center'\n,\n \nlabel\n=\n\"test2\"\n)\n\n\n\nax\n.\nlegend\n(\nbbox_to_anchor\n=\n(\n1.05\n,\n \n1\n),\n \nloc\n=\n2\n,\n \nborderaxespad\n=\n0.2\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nSet Plot Title and Axes Labels\n\u00b6\n\n\n\n\nax.set(title=\"A title\", xlabel=\"x\", ylabel=\"y\")\n or \nax.set_xlim()\n, \nax.set_ylim()\n or \nax.set_title()\n. \n\n\nplt.title()\n, \nplt.xlabel()\n, \nplt.ylabel()\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n10\n,\n5\n))\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n)\n\n\nax\n.\nbar\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n5\n],\n \nwidth\n=\n0.2\n,\n \nalign\n=\n'center'\n,\n \nlabel\n=\n\"test1\"\n)\n\n\nax\n.\nbar\n([\n1.2\n,\n2.2\n,\n3.2\n],[\n4\n,\n5\n,\n3\n],\n \ncolor\n=\n'darkgreen'\n,\n \nwidth\n=\n0.2\n,\n \nalign\n=\n'center'\n,\n \nlabel\n=\n\"test2\"\n)\n\n\n\nax\n.\nset\n(\ntitle\n=\n\"A title\"\n,\n \nxlabel\n=\n\"x-axis\"\n,\n \nylabel\n=\n\"y-axis\"\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nSet the Plot Layout\n\u00b6\n\n\n\n\nplt.tight_layout()\n before \nplt.show()\n.\n\n\nsubplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)\n, which allows to manually set the width and height reserved for blank space between subplots, and also fix the left and right sides, and the top and bottom of the subplots.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n10\n,\n5\n))\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n)\n\n\nax\n.\nbar\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n5\n],\n \nwidth\n=\n0.2\n,\n \nalign\n=\n'center'\n,\n \nlabel\n=\n\"test1\"\n)\n\n\nax\n.\nbar\n([\n1.2\n,\n2.2\n,\n3.2\n],[\n4\n,\n5\n,\n3\n],\n \ncolor\n=\n'darkgreen'\n,\n \nwidth\n=\n0.2\n,\n \nalign\n=\n'center'\n,\n \nlabel\n=\n\"test2\"\n)\n\n\n\nplt\n.\ntight_layout\n()\n         \n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n15\n,\n7\n))\n\n\nax1\n \n=\n \nfig\n.\nadd_subplot\n(\n121\n)\n\n\nax2\n \n=\n \nfig\n.\nadd_subplot\n(\n122\n)\n\n\n\nax1\n.\nbar\n([\n1\n,\n2\n,\n3\n],[\n3\n,\n4\n,\n5\n])\n\n\nax1\n.\naxvline\n(\n0.65\n,\n \ncolor\n=\n'red'\n)\n\n\n\nax2\n.\nbarh\n([\n0.5\n,\n1\n,\n2.5\n],[\n0\n,\n1\n,\n2\n])\n\n\nax2\n.\naxhline\n(\n0.45\n,\n \ncolor\n=\n'red'\n)\n\n\n\nplt\n.\nsubplots_adjust\n(\ntop\n=\n0.9\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nShow, Save, and Close the Plot\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n# Import the necessary packages and modules\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# Prepare the data\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n,\n \n100\n)\n\n\n\n# Plot the data\n\n\nplt\n.\nplot\n(\nx\n,\n \nx\n,\n \nlabel\n=\n'linear'\n)\n\n\n\n# Add a legend\n\n\nplt\n.\nlegend\n()\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nSave a Plot to an Image File\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n,\n \n100\n)\n\n\n\nplt\n.\nplot\n(\nx\n,\n \nx\n,\n \nlabel\n=\n'linear'\n)\n\n\n\nplt\n.\nlegend\n()\n\n\n\n# Save Figure\n\n\nplt\n.\nsavefig\n(\n\"foo1.png\"\n)\n\n\n\n# Save Transparent (alpha layer) Figure\n\n\nplt\n.\nsavefig\n(\n\"foo2.png\"\n,\n \ntransparent\n=\nTrue\n)\n\n\n\n\n\n\n\n\n\nBring back the image:\n\n\nfoo1.png: \n\n\nSave a Plot to a Pdf File\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nfrom\n \nmatplotlib.backends.backend_pdf\n \nimport\n \nPdfPages\n\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n,\n \n100\n)\n\n\n\nplt\n.\nplot\n(\nx\n,\n \nx\n,\n \nlabel\n=\n'linear'\n)\n\n\n\nplt\n.\nlegend\n()\n\n\n\n# Initialize the pdf file\n\n\npp\n \n=\n \nPdfPages\n(\n'multipage.pdf'\n)\n\n\n\n# Save the figure to the file\n\n\npp\n.\nsavefig\n()\n\n\n\n# Close the file\n\n\npp\n.\nclose\n()\n\n\n\n\n\n\n\n\n\nUse \ncla()\n, \nclf()\n or \nclose()\n\u00b6\n\n\nTell \nmatplotlib\n to close down the plot and move on. When plotting in a pop-up window.\n\n\n\n\nplt.cla()\n to clear an axis.\n\n\nplt.clf()\n to clear the entire figure.\n\n\nplt.close()\n to close a window that has popped up to show the plot.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# 1\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n,\n \n100\n)\n\n\n\nplt\n.\nplot\n(\nx\n,\n \nx\n,\n \nlabel\n=\n'linear'\n)\n\n\n\nplt\n.\nlegend\n()\n\n\n\nplt\n.\nshow\n()\n\n\n\n# 2\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n20\n,\n \n100\n)\n\n\n\nplt\n.\nplot\n(\nx\n,\n \nx\n,\n \nlabel\n=\n'linear'\n,\n \ncolor\n=\n'red'\n)\n\n\n\nplt\n.\nlegend\n()\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\nCustomizing Matplotlib\n\u00b6\n\n\nCustomizing\n \nmatplotlib\n.\n\n\nUse a ggplot2 Style\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n# Import `pyplot` \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Set the style to `ggplot`\n\n\nplt\n.\nstyle\n.\nuse\n(\n\"ggplot\"\n)\n\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n,\n \n100\n)\n\n\n\nplt\n.\nplot\n(\nx\n,\n \nx\n,\n \nlabel\n=\n'linear'\n)\n\n\n\nplt\n.\nlegend\n()\n\n\n\nplt\n.\nshow\n()\n\n\n\nplt\n.\nstyle\n.\nuse\n(\n\"default\"\n)\n\n\n\n\n\n\n\n\n\nrc Settings\n\u00b6\n\n\nAutomatically \nr\nun and \nc\nonfigure settings.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nimport\n \nmatplotlib\n \nas\n \nmpl\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# Uncomment following line to see the effect \n\n\nmpl\n.\nrcParams\n[\n'lines.linewidth'\n]\n \n=\n \n5\n\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n,\n \n100\n)\n\n\n\nplt\n.\nplot\n(\nx\n,\n \nx\n,\n \nlabel\n=\n'linear'\n)\n\n\n\nplt\n.\nlegend\n()\n\n\n\nplt\n.\nshow\n()\n\n\n\nmpl\n.\nrcParams\n[\n'lines.linewidth'\n]\n \n=\n \n1\n\n\n\n\n\n\n\n\n\nTo work more statically, there is a \nmatplotlibrc\n configuration file which  can be used to customize all kinds of properties.\n\n\n1\n2\n3\nimport\n \nmatplotlib\n\n\n\nmatplotlib\n.\nmatplotlib_fname\n()\n\n\n\n\n\n\n\nRun the commands, go to the subdir indicated by the result, pull up the file, change the parameters, save the file and see the results on the next plots.",
            "title": "Matplotlib, Python Plotting"
        },
        {
            "location": "/Matplotlib, Python Plotting/#matplotlib-pyplot-and-pylab-how-are-they-related",
            "text": "pyplot  is a module in  matplotlib  to implicitly and automatically create figures and axes. Everything can be customized though.  %pylab  and  %pylab   inline  import  pyplot  and  numpy .  %matplotlib  and  %matplotlib   inline  import  pyplot .  matplotlib  can save images to the local file system.",
            "title": "matplotlib, pyplot and pylab: how are they related?"
        },
        {
            "location": "/Matplotlib, Python Plotting/#create-a-plot",
            "text": "1\n2\n3\n4\n5\n6\n7\n8 # Import `pyplot`  import   matplotlib.pyplot   as   plt  # Initialize a Figure   fig   =   plt . figure ()  # Add Axes to the Figure  fig . add_axes ([ 0 , 0 , 1 , 1 ])    1 <matplotlib.axes._axes.Axes at 0x7f796d5c7ac8>",
            "title": "Create a Plot"
        },
        {
            "location": "/Matplotlib, Python Plotting/#a-subplot",
            "text": "Axes and subplot are synonymous. There is, however, a difference between the  add_axes()  and the  add_subplots()  function.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 # Import the necessary packages and modules  import   matplotlib.pyplot   as   plt  import   numpy   as   np  # Create a Figure  fig   =   plt . figure ()  # Set up Axes  ax   =   fig . add_subplot ( 111 )  # Scatter the data  ax . scatter ( np . linspace ( 0 ,   1 ,   5 ),   np . linspace ( 0 ,   5 ,   5 ))  # Show the plot  plt . show ()     111  designates the number of rows (1), the number of columns (1) and the plot number (1); it means one subplot.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # Create a Figure  fig   =   plt . figure ()  # Set up Axes of no 1  ax   =   fig . add_subplot ( 121 )  # Scatter the data  ax . scatter ( np . linspace ( 0 ,   1 ,   5 ),   np . linspace ( 0 ,   5 ,   5 ))  # Set up Axes of no 2  ax   =   fig . add_subplot ( 122 )  # Scatter the data  ax . scatter ( np . linspace ( 0 ,   1 ,   5 ),   np . linspace ( 0 ,   5 ,   5 ))  # Show the plots  plt . show ()",
            "title": "A Subplot"
        },
        {
            "location": "/Matplotlib, Python Plotting/#the-difference-between-add_axes-and-add_subplot",
            "text": "add_axes()  is the lower left point, the width, and the height. In cases where the positioning matters.  add_subplot()  is a grid: the number of rows, columns, and the plot number.",
            "title": "The Difference Between add_axes() and add_subplot()"
        },
        {
            "location": "/Matplotlib, Python Plotting/#change-the-size-of-figures",
            "text": "plt.figure(figsize=(3,4))  for the width and height in inches.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   matplotlib.pyplot   as   plt  # Initialize the plot  fig   =   plt . figure ( figsize = ( 20 , 10 ))  ax1   =   fig . add_subplot ( 121 )  ax2   =   fig . add_subplot ( 122 )  ax1 . bar ([ 1 , 2 , 3 ],[ 3 , 4 , 5 ])  ax2 . barh ([ 0.5 , 1 , 2.5 ],[ 0 , 1 , 2 ])  plt . show ()     1\n2\n3\n4\n5\n6\n7\n8\n9 import   matplotlib.pyplot   as   plt  # Initialize the plot  fig ,   ( ax1 ,   ax2 )   =   plt . subplots ( 1 , 2 ,   figsize = ( 20 , 10 ))  ax1 . bar ([ 1 , 2 , 3 ],[ 3 , 4 , 5 ])  ax2 . barh ([ 0.5 , 1 , 2.5 ],[ 0 , 1 , 2 ])  plt . show ()",
            "title": "Change the Size of Figures"
        },
        {
            "location": "/Matplotlib, Python Plotting/#working-with-pyplot-plotting-routines",
            "text": "Common plots.   ax.bar() : Vertical rectangles.  ax.barh() : Horizontal rectangles.  ax.axhline() : Horizontal line across axes.  ax.axvline() : Vertical line across axes.  ax.fill() : Filled polygons.  ax.fill_between() : Fill between y-values and 0 (area plot).  ax.stackplot() : Stack plot.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 import   matplotlib.pyplot   as   plt  fig   =   plt . figure ( figsize = ( 20 , 10 ))  ax1   =   fig . add_subplot ( 231 )  ax2   =   fig . add_subplot ( 232 )  ax3   =   fig . add_subplot ( 233 )  ax4   =   fig . add_subplot ( 234 )  ax5   =   fig . add_subplot ( 235 )  ax6   =   fig . add_subplot ( 236 )  ax1 . bar ([ 1 , 2 , 3 ],[ 3 , 4 , 5 ])  ax1 . axvline ( 1.65 ,   color = 'red' ,   linewidth = 2 )  ax2 . barh ([ 0.5 , 1 , 2.5 ],[ 0 , 1 , 2 ])  ax2 . axhline ( 1.45 ,   color = 'red' ,   linewidth = 2 )  ax3 . scatter ([ 1 , 2 , 3 ],[ 3 , 4 , 8 ],   marker = '^' )  ax4 . plot ([ 1 ,   2 ,   3 ,   4 ],   [ 10 ,   20 ,   25 ,   30 ],   color = 'lightblue' ,   linewidth = 3 )  ax5 . fill_between ([ 1 , 2 , 3 ],[ 3 , 4 , 8 ])  ax6 . stackplot ([ 1 , 2 , 3 ],[ 3 , 4 , 8 ])  plt . show ()     Specialized plots.   ax.arrow() : Arrow.  ax.quiver() : 2D field of arrows.  ax.streamplot() : 2D vector fields.  ax.hist() : Histogram.  ax.boxplot() : Boxplot.  ax.violinplot() : Violinplot.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 import   matplotlib.pyplot   as   plt  fig   =   plt . figure ( figsize = ( 20 , 10 ))  ax1   =   fig . add_subplot ( 231 )  ax2   =   fig . add_subplot ( 232 )  ax3   =   fig . add_subplot ( 233 )  ax4   =   fig . add_subplot ( 234 )  ax5   =   fig . add_subplot ( 235 )  ax6   =   fig . add_subplot ( 236 )  ax1 . arrow ( 0 ,   0 ,   0.5 ,   0.5 ,   head_width = 0.05 ,   head_length = 0.1 ,   fc = 'k' ,   ec = 'k' )  X ,   Y   =   np . meshgrid ( np . arange ( 0 ,   2   *   np . pi ,   . 2 ),   np . arange ( 0 ,   2   *   np . pi ,   . 2 ))  U   =   np . cos ( X )  V   =   np . sin ( Y )  ax2 . quiver ( X ,   Y ,   U ,   V ,   units = 'width' )  Y ,   X   =   np . mgrid [ - 3 : 3 : 100j ,   - 3 : 3 : 100j ]  U   =   - 1   -   X ** 2   +   Y  V   =   1   +   X   -   Y ** 2  speed   =   np . sqrt ( U * U   +   V * V )  ax3 . streamplot ( X ,   Y ,   U ,   V ,   color = U )  ax4 . hist ( np . random . rand ( 50 )   *   100 )  ax5 . boxplot ( np . random . rand ( 50 )   *   100 )  ax6 . violinplot ( np . random . rand ( 50 )   *   100 )  plt . show ()     And more specialized plots.   ax.pcolor() : Pseudocolor plot.  ax.pcolormesh() : Pseudocolor plot.  ax.contour() : Contour plot.  ax.contourf() : Filled contour plot.  ax.clabel() : Labeled contour plot.   Contour plots are used to explore the potential relationship between three variables. Pseudocolor plots can be used for this purpose since they are surface plot seen from above.",
            "title": "Working With Pyplot: Plotting Routines"
        },
        {
            "location": "/Matplotlib, Python Plotting/#customize-pyplot",
            "text": "See the online plot  Gallery",
            "title": "Customize pyplot"
        },
        {
            "location": "/Matplotlib, Python Plotting/#delete-an-axis",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 import   matplotlib.pyplot   as   plt  import   numpy   as   np  fig   =   plt . figure ( figsize = ( 20 , 10 ))  ax1   =   fig . add_subplot ( 131 )  ax2   =   fig . add_subplot ( 132 )  ax3   =   fig . add_subplot ( 133 )  ax1 . bar ([ 1 , 2 , 3 ],[ 3 , 4 , 5 ])  ax1 . axvline ( 0.65 ,   color = 'red' )  ax2 . barh ([ 0.5 , 1 , 2.5 ],[ 0 , 1 , 2 ])  ax2 . axhline ( 0.45 ,   color = 'red' )  ax3 . scatter ( np . linspace ( 0 ,   1 ,   5 ),   np . linspace ( 0 ,   5 ,   5 ))  # Delete `ax3` !!! (add them back further down)  fig . delaxes ( ax3 )  plt . show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 import   matplotlib.pyplot   as   plt  import   numpy   as   np  fig   =   plt . figure ( figsize = ( 20 , 10 ))  ax1   =   fig . add_subplot ( 131 )  ax2   =   fig . add_subplot ( 132 )  ax3   =   fig . add_subplot ( 133 )  ax1 . bar ([ 1 , 2 , 3 ],[ 3 , 4 , 5 ])  ax1 . axvline ( 0.65 ,   color = 'red' )  ax2 . barh ([ 0.5 , 1 , 2.5 ],[ 0 , 1 , 2 ])  ax2 . axhline ( 0.45 ,   color = 'red' )  ax3 . scatter ( np . linspace ( 0 ,   1 ,   5 ),   np . linspace ( 0 ,   5 ,   5 ))  # Delete `ax3` !!!  fig . delaxes ( ax3 )  # Add them back !!!  fig . add_axes ( ax3 )  plt . show ()",
            "title": "Delete an Axis"
        },
        {
            "location": "/Matplotlib, Python Plotting/#put-the-legend-out-of-the-plot",
            "text": "legend()  with many options.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 import   matplotlib.pyplot   as   plt  fig   =   plt . figure ( figsize = ( 10 , 5 ))  ax   =   fig . add_subplot ( 111 )  ax . bar ([ 1 , 2 , 3 ],[ 3 , 4 , 5 ],   width = 0.2 ,   align = 'center' ,   label = \"test1\" )  ax . bar ([ 1.2 , 2.2 , 3.2 ],[ 4 , 5 , 3 ],   color = 'darkgreen' ,   width = 0.2 ,   align = 'center' ,   label = \"test2\" )  ax . legend ( bbox_to_anchor = ( 1.05 ,   1 ),   loc = 2 ,   borderaxespad = 0.2 )  plt . show ()",
            "title": "Put the Legend out of the Plot"
        },
        {
            "location": "/Matplotlib, Python Plotting/#set-plot-title-and-axes-labels",
            "text": "ax.set(title=\"A title\", xlabel=\"x\", ylabel=\"y\")  or  ax.set_xlim() ,  ax.set_ylim()  or  ax.set_title() .   plt.title() ,  plt.xlabel() ,  plt.ylabel() .    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 import   matplotlib.pyplot   as   plt  fig   =   plt . figure ( figsize = ( 10 , 5 ))  ax   =   fig . add_subplot ( 111 )  ax . bar ([ 1 , 2 , 3 ],[ 3 , 4 , 5 ],   width = 0.2 ,   align = 'center' ,   label = \"test1\" )  ax . bar ([ 1.2 , 2.2 , 3.2 ],[ 4 , 5 , 3 ],   color = 'darkgreen' ,   width = 0.2 ,   align = 'center' ,   label = \"test2\" )  ax . set ( title = \"A title\" ,   xlabel = \"x-axis\" ,   ylabel = \"y-axis\" )  plt . show ()",
            "title": "Set Plot Title and Axes Labels"
        },
        {
            "location": "/Matplotlib, Python Plotting/#set-the-plot-layout",
            "text": "plt.tight_layout()  before  plt.show() .  subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None) , which allows to manually set the width and height reserved for blank space between subplots, and also fix the left and right sides, and the top and bottom of the subplots.   1\n2\n3\n4\n5\n6\n7\n8\n9 import   matplotlib.pyplot   as   plt  fig   =   plt . figure ( figsize = ( 10 , 5 ))  ax   =   fig . add_subplot ( 111 )  ax . bar ([ 1 , 2 , 3 ],[ 3 , 4 , 5 ],   width = 0.2 ,   align = 'center' ,   label = \"test1\" )  ax . bar ([ 1.2 , 2.2 , 3.2 ],[ 4 , 5 , 3 ],   color = 'darkgreen' ,   width = 0.2 ,   align = 'center' ,   label = \"test2\" )  plt . tight_layout ()           plt . show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 import   matplotlib.pyplot   as   plt  import   numpy   as   np  fig   =   plt . figure ( figsize = ( 15 , 7 ))  ax1   =   fig . add_subplot ( 121 )  ax2   =   fig . add_subplot ( 122 )  ax1 . bar ([ 1 , 2 , 3 ],[ 3 , 4 , 5 ])  ax1 . axvline ( 0.65 ,   color = 'red' )  ax2 . barh ([ 0.5 , 1 , 2.5 ],[ 0 , 1 , 2 ])  ax2 . axhline ( 0.45 ,   color = 'red' )  plt . subplots_adjust ( top = 0.9 )  plt . show ()",
            "title": "Set the Plot Layout"
        },
        {
            "location": "/Matplotlib, Python Plotting/#show-save-and-close-the-plot",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 # Import the necessary packages and modules  import   matplotlib.pyplot   as   plt  import   numpy   as   np  # Prepare the data  x   =   np . linspace ( 0 ,   10 ,   100 )  # Plot the data  plt . plot ( x ,   x ,   label = 'linear' )  # Add a legend  plt . legend ()  # Show the plot  plt . show ()",
            "title": "Show, Save, and Close the Plot"
        },
        {
            "location": "/Matplotlib, Python Plotting/#save-a-plot-to-an-image-file",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 import   matplotlib.pyplot   as   plt  import   numpy   as   np  x   =   np . linspace ( 0 ,   10 ,   100 )  plt . plot ( x ,   x ,   label = 'linear' )  plt . legend ()  # Save Figure  plt . savefig ( \"foo1.png\" )  # Save Transparent (alpha layer) Figure  plt . savefig ( \"foo2.png\" ,   transparent = True )     Bring back the image:  foo1.png:",
            "title": "Save a Plot to an Image File"
        },
        {
            "location": "/Matplotlib, Python Plotting/#save-a-plot-to-a-pdf-file",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 import   matplotlib.pyplot   as   plt  import   numpy   as   np  from   matplotlib.backends.backend_pdf   import   PdfPages  x   =   np . linspace ( 0 ,   10 ,   100 )  plt . plot ( x ,   x ,   label = 'linear' )  plt . legend ()  # Initialize the pdf file  pp   =   PdfPages ( 'multipage.pdf' )  # Save the figure to the file  pp . savefig ()  # Close the file  pp . close ()",
            "title": "Save a Plot to a Pdf File"
        },
        {
            "location": "/Matplotlib, Python Plotting/#use-cla-clf-or-close",
            "text": "Tell  matplotlib  to close down the plot and move on. When plotting in a pop-up window.   plt.cla()  to clear an axis.  plt.clf()  to clear the entire figure.  plt.close()  to close a window that has popped up to show the plot.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 import   matplotlib.pyplot   as   plt  import   numpy   as   np  # 1  x   =   np . linspace ( 0 ,   10 ,   100 )  plt . plot ( x ,   x ,   label = 'linear' )  plt . legend ()  plt . show ()  # 2  x   =   np . linspace ( 0 ,   20 ,   100 )  plt . plot ( x ,   x ,   label = 'linear' ,   color = 'red' )  plt . legend ()  plt . show ()",
            "title": "Use cla(), clf() or close()"
        },
        {
            "location": "/Matplotlib, Python Plotting/#customizing-matplotlib",
            "text": "Customizing   matplotlib .",
            "title": "Customizing Matplotlib"
        },
        {
            "location": "/Matplotlib, Python Plotting/#use-a-ggplot2-style",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 # Import `pyplot`   import   matplotlib.pyplot   as   plt  # Set the style to `ggplot`  plt . style . use ( \"ggplot\" )  x   =   np . linspace ( 0 ,   10 ,   100 )  plt . plot ( x ,   x ,   label = 'linear' )  plt . legend ()  plt . show ()  plt . style . use ( \"default\" )",
            "title": "Use a ggplot2 Style"
        },
        {
            "location": "/Matplotlib, Python Plotting/#rc-settings",
            "text": "Automatically  r un and  c onfigure settings.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 import   matplotlib   as   mpl  import   matplotlib.pyplot   as   plt  import   numpy   as   np  # Uncomment following line to see the effect   mpl . rcParams [ 'lines.linewidth' ]   =   5  x   =   np . linspace ( 0 ,   10 ,   100 )  plt . plot ( x ,   x ,   label = 'linear' )  plt . legend ()  plt . show ()  mpl . rcParams [ 'lines.linewidth' ]   =   1     To work more statically, there is a  matplotlibrc  configuration file which  can be used to customize all kinds of properties.  1\n2\n3 import   matplotlib  matplotlib . matplotlib_fname ()    Run the commands, go to the subdir indicated by the result, pull up the file, change the parameters, save the file and see the results on the next plots.",
            "title": "rc Settings"
        },
        {
            "location": "/Viewing+3D+Volumetric+Data+With+Matplotlib/",
            "text": "CONTENT\n\n\nOverview\n\n\nInterlude: Getting The Data\u2026\n\n\nDownload the Data\n\n\n\n\n\n\n\u2026 Back To Plotting\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\nSome images can only be simulated with Jupyter since the images are interactive.\n\n\n\n\nOverview\n\u00b6\n\n\nImage data can be taken with ordinary cameras (these are often called \u201cnatural images\u201d in the scientific literature) or with specialized instruments, such as microscopes or telescopes.\n\n\nThe most common way to display them is using the \nimshow\n function of Matplotlib.\n\n\nFor example, magnetic resonance imaging (MRI) and computed tomography (CT) scans measure the 3D structure inside the human body; X-ray microtomography measures the 3D structure inside materials such as glass, or metal alloys; and light-sheet microscopes measure fluorescent particles inside biological tissues.\n\n\nEnable the interactive matplotlib mode.\n\n\nOther applications: spatial analysis (visualization over time), maps (layers of a neighbourhood over time), etc. \n\n\n1\n%\nmatplotlib\n \nnotebook\n\n\n\n\n\n\n\nWhen running matplotlib in the interactive notebook mode, the open figure remains the only active figure until disabled, using the power symbol on the top-right of the figure. Do that before moving on from each plot.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nfrom\n \nskimage\n \nimport\n \ndata\n\n\n\nastronaut\n \n=\n \ndata\n.\nastronaut\n()\n\n\nihc\n \n=\n \ndata\n.\nimmunohistochemistry\n()\n\n\nhubble\n \n=\n \ndata\n.\nhubble_deep_field\n()\n\n\n\n# Initialize the subplot panels side by side\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n(\nnrows\n=\n1\n,\n \nncols\n=\n3\n)\n\n\n\n# Show an image in each subplot\n\n\nax\n[\n0\n]\n.\nimshow\n(\nastronaut\n)\n\n\nax\n[\n0\n]\n.\nset_title\n(\n'Natural image'\n)\n\n\nax\n[\n1\n]\n.\nimshow\n(\nihc\n)\n\n\nax\n[\n1\n]\n.\nset_title\n(\n'Microscopy image'\n)\n\n\nax\n[\n2\n]\n.\nimshow\n(\nhubble\n)\n\n\nax\n[\n2\n]\n.\nset_title\n(\n'Telescope image'\n);\n\n\n\n\n\n\n\n>>> Interactive images here! <<<\n\n\nThese images are called 2-dimensional or 2D images. Some images are 3D, in that they have an additional depth dimension (z, or planes). These include magnetic resonance imaging (MRI) and serial section transmission electron microscopy (ssTEM), in which a sample is thinly sliced, like a salami, and each of the slices is imaged separately.\n\n\n1\nimport\n \nnibabel\n\n\n\n\n\n\n\nInterlude: Getting The Data\u2026\n\u00b6\n\n\nDataset source: Buchel and Friston, Cortical Interactions Evaluated with Structural Equation Modelling and fMRI (1997).\n\n\n1\n2\n3\n4\n5\n6\nimport\n \ntempfile\n\n\n\n# Create a temporary directory\n\n\nd\n \n=\n \ntempfile\n.\nmkdtemp\n()\n\n\n\nprint\n(\nd\n)\n\n\n\n\n\n\n\n1\n/tmp/tmp8xdzu1ad\n\n\n\n\n\n\n1\n2\n3\n4\nimport\n \nos\n\n\n\nos\n.\nchdir\n(\n'/home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial'\n)\n\n\nprint\n(\nos\n.\ngetcwd\n())\n\n\n\n\n\n\n\n1\n/home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial\n\n\n\n\n\n\n1\n2\nd\n \n=\n \nos\n.\ngetcwd\n()\n\n\nprint\n(\nd\n)\n\n\n\n\n\n\n\n1\n/home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial\n\n\n\n\n\n\n1\n2\n# Return the tail of the path\n\n\nos\n.\npath\n.\nbasename\n(\n'http://google.com/attention.zip'\n)\n\n\n\n\n\n\n\n1\n'attention.zip'\n\n\n\n\n\n\nDownload the Data\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom\n \nurllib.request\n \nimport\n \nurlretrieve\n\n\n\n# Define URL\n\n\nurl\n \n=\n \n'http://www.fil.ion.ucl.ac.uk/spm/download/data/attention/attention.zip'\n\n\n\n# Retrieve the data\n\n\nfn\n,\n \ninfo\n \n=\n \nurlretrieve\n(\nurl\n,\n \nos\n.\npath\n.\njoin\n(\nd\n,\n \n'attention.zip'\n))\n\n\n\n\n\n\n\nExtract it from the zip file to our temporary directory.\n\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \nzipfile\n\n\n\n# Extract the contents into the temporary directory we created earlier\n\n\nzipfile\n.\nZipFile\n(\nfn\n)\n.\nextractall\n(\npath\n=\nd\n)\n\n\n\n# List first 10 files\n\n\n[\nf\n.\nfilename\n \nfor\n \nf\n \nin\n \nzipfile\n.\nZipFile\n(\nfn\n)\n.\nfilelist\n[:\n10\n]]\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n['attention/',\n 'attention/multi_block_regressors.mat',\n 'attention/README_DATA.txt',\n 'attention/factors.mat',\n 'attention/functional/',\n 'attention/functional/snffM00587_0201.hdr',\n 'attention/functional/snffM00587_0040.img',\n 'attention/functional/snffM00587_0458.hdr',\n 'attention/functional/snffM00587_0185.img',\n 'attention/functional/snffM00587_0018.hdr']\n\n\n\n\n\n\nThese are in the NIfTI file format. \n\n\nnibabel\n library provides the reader. \n\n\nInstall it with either: \nconda install -c conda-forge nibabel\n or \npip install nibabel\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nimport\n \nnibabel\n\n\n\n# Read the image \n\n\nstruct\n \n=\n \nnibabel\n.\nload\n(\nos\n.\npath\n.\njoin\n(\nd\n,\n \n'attention/structural/nsM00587_0002.hdr'\n))\n\n\n\n# Get a plain NumPy array, without all the metadata\n\n\nstruct_arr\n \n=\n \nstruct\n.\nget_data\n()\n\n\n\n# Plot the MRI data\n\n\nfrom\n \nskimage\n \nimport\n \nio\n\n\n\nstruct_arr\n \n=\n \nio\n.\nimread\n(\n\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/attention-mri.tif\"\n)\n\n\n\nplt\n.\nimshow\n(\nstruct_arr\n[\n75\n])\n\n\n\n\n\n\n\n>>> Interactive images here! <<<\n\n\n\u2026 Back To Plotting\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# fix the aspect parameter\n\n\nplt\n.\nimshow\n(\nstruct_arr\n[\n75\n],\n \naspect\n=\n0.5\n)\n\n\n\n# transpose the data\n\n\n# horizontal slices\n\n\nstruct_arr2\n \n=\n \nstruct_arr\n.\nT\n\n\nplt\n.\nimshow\n(\nstruct_arr2\n[\n34\n])\n\n\n\n# slice along a different axis\n\n\nplt\n.\nimshow\n(\nstruct_arr2\n[\n5\n])\n\n\n\n\n\n\n\n>>> Interactive images here! <<<\n\n\nExplore 3D data within Python, minimizing the need to switch contexts between data exploration and data analysis.\n\n\nThe key is to use the matplotlibevent handler API.\n\n\nhttps://matplotlib.org/users/event_handling.html\n\n\nBind the J and K keys on the keyboard to previous slice and next slice.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ndef\n \nprevious_slice\n():\n\n    \npass\n\n\n\ndef\n \nnext_slice\n():\n\n    \npass\n\n\n\ndef\n \nprocess_key\n(\nevent\n):\n\n    \nif\n \nevent\n.\nkey\n \n==\n \n'j'\n:\n\n        \nprevious_slice\n()\n\n    \nelif\n \nevent\n.\nkey\n \n==\n \n'k'\n:\n\n        \nnext_slice\n()\n\n\n\n\n\n\n\nUse the \nprocess_key\n function to process keyboard presses and the figure canvas method \nmpl_connect\n.\n\n\n1\n2\n3\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nimshow\n(\nstruct_arr\n[\n...\n,\n \n43\n])\n\n\nfig\n.\ncanvas\n.\nmpl_connect\n(\n'key_press_event'\n,\n \nprocess_key\n)\n\n\n\n\n\n\n\n>>> Interactive images here! <<<\n\n\nimshow\n returns an \nAxesImage\n object, which lives inside the matplotlib \nAxes\n object where all the drawing takes place, in its \n.images\n attribute. This object provides a convenient \nset_array\n method that swaps out the image.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\ndef\n \nmulti_slice_viewer\n(\nvolume\n):\n\n    \nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n    \nax\n.\nvolume\n \n=\n \nvolume\n\n    \nax\n.\nindex\n \n=\n \nvolume\n.\nshape\n[\n0\n]\n \n//\n \n2\n\n    \nax\n.\nimshow\n(\nvolume\n[\nax\n.\nindex\n])\n\n    \nfig\n.\ncanvas\n.\nmpl_connect\n(\n'key_press_event'\n,\n \nprocess_key\n)\n\n\n\ndef\n \nprocess_key\n(\nevent\n):\n\n    \nfig\n \n=\n \nevent\n.\ncanvas\n.\nfigure\n\n    \nax\n \n=\n \nfig\n.\naxes\n[\n0\n]\n\n    \nif\n \nevent\n.\nkey\n \n==\n \n'j'\n:\n\n        \nprevious_slice\n(\nax\n)\n\n    \nelif\n \nevent\n.\nkey\n \n==\n \n'k'\n:\n\n        \nnext_slice\n(\nax\n)\n\n    \nfig\n.\ncanvas\n.\ndraw\n()\n\n\n\ndef\n \nprevious_slice\n(\nax\n):\n\n    \n\"\"\"Go to the previous slice.\"\"\"\n\n    \nvolume\n \n=\n \nax\n.\nvolume\n\n    \nax\n.\nindex\n \n=\n \n(\nax\n.\nindex\n \n-\n \n1\n)\n \n%\n \nvolume\n.\nshape\n[\n0\n]\n  \n# wrap around using %\n\n    \nax\n.\nimages\n[\n0\n]\n.\nset_array\n(\nvolume\n[\nax\n.\nindex\n])\n\n\n\ndef\n \nnext_slice\n(\nax\n):\n\n    \n\"\"\"Go to the next slice.\"\"\"\n\n    \nvolume\n \n=\n \nax\n.\nvolume\n\n    \nax\n.\nindex\n \n=\n \n(\nax\n.\nindex\n \n+\n \n1\n)\n \n%\n \nvolume\n.\nshape\n[\n0\n]\n\n    \nax\n.\nimages\n[\n0\n]\n.\nset_array\n(\nvolume\n[\nax\n.\nindex\n])\n\n\n\n\n\n\n\nGo!\n\n\n1\nmulti_slice_viewer\n(\nstruct_arr2\n)\n\n\n\n\n\n\n\n>>> Interactive images here! <<<\n\n\nMatplotlib simply piles them on on top of each other.\n\n\nK is a built-in keyboard shortcut to change the x-axis to use a logarithmic scale.\n\nIf we want to use K exclusively, we have to remove it from matplotlib\u2019s default\n\nkey maps.\n\n\nThese live as lists in the \nplt.rcParams\n dictionary, which is matplotlib\u2019s \n\nrepository for default system-wide settings:\n\n\nplt.rcParams['keymap.<command>'] = ['<key1>', '<key2>']\n \n\nwhere pressing any of the keys in the list (i.e. \n<key1>\n or \n<key2>\n) \n\nwill cause \n<command>\n to be executed.\n\n\nLet\u2019s rewrite the function.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\ndef\n \nmulti_slice_viewer\n(\nvolume\n):\n\n    \nremove_keymap_conflicts\n({\n'j'\n,\n \n'k'\n})\n\n    \nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n    \nax\n.\nvolume\n \n=\n \nvolume\n\n    \nax\n.\nindex\n \n=\n \nvolume\n.\nshape\n[\n0\n]\n \n//\n \n2\n\n    \nax\n.\nimshow\n(\nvolume\n[\nax\n.\nindex\n])\n\n    \nfig\n.\ncanvas\n.\nmpl_connect\n(\n'key_press_event'\n,\n \nprocess_key\n)\n\n\n\ndef\n \nprocess_key\n(\nevent\n):\n\n    \nfig\n \n=\n \nevent\n.\ncanvas\n.\nfigure\n\n    \nax\n \n=\n \nfig\n.\naxes\n[\n0\n]\n\n    \nif\n \nevent\n.\nkey\n \n==\n \n'j'\n:\n\n        \nprevious_slice\n(\nax\n)\n\n    \nelif\n \nevent\n.\nkey\n \n==\n \n'k'\n:\n\n        \nnext_slice\n(\nax\n)\n\n    \nfig\n.\ncanvas\n.\ndraw\n()\n\n\n\ndef\n \nprevious_slice\n(\nax\n):\n\n    \nvolume\n \n=\n \nax\n.\nvolume\n\n    \nax\n.\nindex\n \n=\n \n(\nax\n.\nindex\n \n-\n \n1\n)\n \n%\n \nvolume\n.\nshape\n[\n0\n]\n  \n# wrap around using %\n\n    \nax\n.\nimages\n[\n0\n]\n.\nset_array\n(\nvolume\n[\nax\n.\nindex\n])\n\n\n\ndef\n \nnext_slice\n(\nax\n):\n\n    \nvolume\n \n=\n \nax\n.\nvolume\n\n    \nax\n.\nindex\n \n=\n \n(\nax\n.\nindex\n \n+\n \n1\n)\n \n%\n \nvolume\n.\nshape\n[\n0\n]\n\n    \nax\n.\nimages\n[\n0\n]\n.\nset_array\n(\nvolume\n[\nax\n.\nindex\n])\n\n\n\n\n\n\n\nWe should be able to view all the slices in our MRI volume without pesky interference from the default keymap! \n\nOne nice feature about this method is that it works on any matplotlib backend!\n\n\nSo, in the IPython terminal console, we will still get the same interaction as we did in the browser! \n\nAnd the same is true for a Qt or Tkinter app embedding a matplotlib plot.\n\n\nThis simple tool therefore lets us build ever more complex applications \n\naround matplotlib\u2019s visualization capabilities.\n\n\n1\n#multi_slice_viewer(struct_arr2)\n\n\n\n\n\n\n\nDelete the temporary directory.\n\n\n1\n2\n3\nd\n \n=\n \ntempfile\n.\nmkdtemp\n()\n\n\n\nprint\n(\nd\n)\n\n\n\n\n\n\n\n1\n/tmp/tmpyylc3632\n\n\n\n\n\n\n1\n2\n3\n4\nimport\n \nshutil\n\n\n\n# Remove the temporary directory\n\n\nshutil\n.\nrmtree\n(\nd\n)",
            "title": "Viewing 3D Volumetric Data with Matplotlib"
        },
        {
            "location": "/Viewing+3D+Volumetric+Data+With+Matplotlib/#interlude-getting-the-data",
            "text": "Dataset source: Buchel and Friston, Cortical Interactions Evaluated with Structural Equation Modelling and fMRI (1997).  1\n2\n3\n4\n5\n6 import   tempfile  # Create a temporary directory  d   =   tempfile . mkdtemp ()  print ( d )    1 /tmp/tmp8xdzu1ad   1\n2\n3\n4 import   os  os . chdir ( '/home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial' )  print ( os . getcwd ())    1 /home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial   1\n2 d   =   os . getcwd ()  print ( d )    1 /home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial   1\n2 # Return the tail of the path  os . path . basename ( 'http://google.com/attention.zip' )    1 'attention.zip'",
            "title": "Interlude: Getting The Data\u2026"
        },
        {
            "location": "/Viewing+3D+Volumetric+Data+With+Matplotlib/#download-the-data",
            "text": "1\n2\n3\n4\n5\n6\n7 from   urllib.request   import   urlretrieve  # Define URL  url   =   'http://www.fil.ion.ucl.ac.uk/spm/download/data/attention/attention.zip'  # Retrieve the data  fn ,   info   =   urlretrieve ( url ,   os . path . join ( d ,   'attention.zip' ))    Extract it from the zip file to our temporary directory.  1\n2\n3\n4\n5\n6\n7 import   zipfile  # Extract the contents into the temporary directory we created earlier  zipfile . ZipFile ( fn ) . extractall ( path = d )  # List first 10 files  [ f . filename   for   f   in   zipfile . ZipFile ( fn ) . filelist [: 10 ]]     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 ['attention/',\n 'attention/multi_block_regressors.mat',\n 'attention/README_DATA.txt',\n 'attention/factors.mat',\n 'attention/functional/',\n 'attention/functional/snffM00587_0201.hdr',\n 'attention/functional/snffM00587_0040.img',\n 'attention/functional/snffM00587_0458.hdr',\n 'attention/functional/snffM00587_0185.img',\n 'attention/functional/snffM00587_0018.hdr']   These are in the NIfTI file format.   nibabel  library provides the reader.   Install it with either:  conda install -c conda-forge nibabel  or  pip install nibabel .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 import   nibabel  # Read the image   struct   =   nibabel . load ( os . path . join ( d ,   'attention/structural/nsM00587_0002.hdr' ))  # Get a plain NumPy array, without all the metadata  struct_arr   =   struct . get_data ()  # Plot the MRI data  from   skimage   import   io  struct_arr   =   io . imread ( \"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/attention-mri.tif\" )  plt . imshow ( struct_arr [ 75 ])    >>> Interactive images here! <<<",
            "title": "Download the Data"
        },
        {
            "location": "/Viewing+3D+Volumetric+Data+With+Matplotlib/#back-to-plotting",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # fix the aspect parameter  plt . imshow ( struct_arr [ 75 ],   aspect = 0.5 )  # transpose the data  # horizontal slices  struct_arr2   =   struct_arr . T  plt . imshow ( struct_arr2 [ 34 ])  # slice along a different axis  plt . imshow ( struct_arr2 [ 5 ])    >>> Interactive images here! <<<  Explore 3D data within Python, minimizing the need to switch contexts between data exploration and data analysis.  The key is to use the matplotlibevent handler API.  https://matplotlib.org/users/event_handling.html  Bind the J and K keys on the keyboard to previous slice and next slice.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 def   previous_slice (): \n     pass  def   next_slice (): \n     pass  def   process_key ( event ): \n     if   event . key   ==   'j' : \n         previous_slice () \n     elif   event . key   ==   'k' : \n         next_slice ()    Use the  process_key  function to process keyboard presses and the figure canvas method  mpl_connect .  1\n2\n3 fig ,   ax   =   plt . subplots ()  ax . imshow ( struct_arr [ ... ,   43 ])  fig . canvas . mpl_connect ( 'key_press_event' ,   process_key )    >>> Interactive images here! <<<  imshow  returns an  AxesImage  object, which lives inside the matplotlib  Axes  object where all the drawing takes place, in its  .images  attribute. This object provides a convenient  set_array  method that swaps out the image.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 def   multi_slice_viewer ( volume ): \n     fig ,   ax   =   plt . subplots () \n     ax . volume   =   volume \n     ax . index   =   volume . shape [ 0 ]   //   2 \n     ax . imshow ( volume [ ax . index ]) \n     fig . canvas . mpl_connect ( 'key_press_event' ,   process_key )  def   process_key ( event ): \n     fig   =   event . canvas . figure \n     ax   =   fig . axes [ 0 ] \n     if   event . key   ==   'j' : \n         previous_slice ( ax ) \n     elif   event . key   ==   'k' : \n         next_slice ( ax ) \n     fig . canvas . draw ()  def   previous_slice ( ax ): \n     \"\"\"Go to the previous slice.\"\"\" \n     volume   =   ax . volume \n     ax . index   =   ( ax . index   -   1 )   %   volume . shape [ 0 ]    # wrap around using % \n     ax . images [ 0 ] . set_array ( volume [ ax . index ])  def   next_slice ( ax ): \n     \"\"\"Go to the next slice.\"\"\" \n     volume   =   ax . volume \n     ax . index   =   ( ax . index   +   1 )   %   volume . shape [ 0 ] \n     ax . images [ 0 ] . set_array ( volume [ ax . index ])    Go!  1 multi_slice_viewer ( struct_arr2 )    >>> Interactive images here! <<<  Matplotlib simply piles them on on top of each other.  K is a built-in keyboard shortcut to change the x-axis to use a logarithmic scale. \nIf we want to use K exclusively, we have to remove it from matplotlib\u2019s default \nkey maps.  These live as lists in the  plt.rcParams  dictionary, which is matplotlib\u2019s  \nrepository for default system-wide settings:  plt.rcParams['keymap.<command>'] = ['<key1>', '<key2>']   \nwhere pressing any of the keys in the list (i.e.  <key1>  or  <key2> )  \nwill cause  <command>  to be executed.  Let\u2019s rewrite the function.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 def   multi_slice_viewer ( volume ): \n     remove_keymap_conflicts ({ 'j' ,   'k' }) \n     fig ,   ax   =   plt . subplots () \n     ax . volume   =   volume \n     ax . index   =   volume . shape [ 0 ]   //   2 \n     ax . imshow ( volume [ ax . index ]) \n     fig . canvas . mpl_connect ( 'key_press_event' ,   process_key )  def   process_key ( event ): \n     fig   =   event . canvas . figure \n     ax   =   fig . axes [ 0 ] \n     if   event . key   ==   'j' : \n         previous_slice ( ax ) \n     elif   event . key   ==   'k' : \n         next_slice ( ax ) \n     fig . canvas . draw ()  def   previous_slice ( ax ): \n     volume   =   ax . volume \n     ax . index   =   ( ax . index   -   1 )   %   volume . shape [ 0 ]    # wrap around using % \n     ax . images [ 0 ] . set_array ( volume [ ax . index ])  def   next_slice ( ax ): \n     volume   =   ax . volume \n     ax . index   =   ( ax . index   +   1 )   %   volume . shape [ 0 ] \n     ax . images [ 0 ] . set_array ( volume [ ax . index ])    We should be able to view all the slices in our MRI volume without pesky interference from the default keymap!  \nOne nice feature about this method is that it works on any matplotlib backend!  So, in the IPython terminal console, we will still get the same interaction as we did in the browser!  \nAnd the same is true for a Qt or Tkinter app embedding a matplotlib plot.  This simple tool therefore lets us build ever more complex applications  \naround matplotlib\u2019s visualization capabilities.  1 #multi_slice_viewer(struct_arr2)    Delete the temporary directory.  1\n2\n3 d   =   tempfile . mkdtemp ()  print ( d )    1 /tmp/tmpyylc3632   1\n2\n3\n4 import   shutil  # Remove the temporary directory  shutil . rmtree ( d )",
            "title": "\u2026 Back To Plotting"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/",
            "text": "CONTENT\n\n\nSeaborn vs Matplotlib\n\n\nLoad Data to Construct Seaborn Plots\n\n\nLoading a Built-in Seaborn Data Set\n\n\n\n\n\n\nShow Seaborn Plots\n\n\nUse Seaborn with Matplotlib Defaults\n\n\nUse Seaborn\u2019s Colors as a colormap in Matplotlib?\n\n\nScale Seaborn Plots for other Contexts\n\n\nTemporarily Set the Plot Style\n\n\nSet the Figure Size in Seaborn\n\n\nRotate Label Text in Seaborn\n\n\nSet xlim or ylim in Seaborn\n\n\nSet Log Scale\n\n\nAdd A Title\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nSeaborn vs Matplotlib\n\u00b6\n\n\nSeaborn a complement to Matplotlib and it specifically targets statistical data visualization.\n\n\nWith Seaborn, the plotting functions operate on DataFrames and arrays that contain a whole dataset: colors, the tick marks on the upper and right axes, the style, etc.\n\n\n1\n%\npylab\n \ninline\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n# Import the necessary libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Initialize Figure and Axes object\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\n\n# Load in data\n\n\ntips\n \n=\n \npd\n.\nread_csv\n(\n\"https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv\"\n)\n\n\n\n# Create violinplot\n\n\nax\n.\nviolinplot\n(\ntips\n[\n\"total_bill\"\n],\n \nvert\n=\nFalse\n)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Import the necessary libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\n\n# Load the data\n\n\ntips\n \n=\n \nsns\n.\nload_dataset\n(\n\"tips\"\n)\n\n\n\n# Create violinplot\n\n\nsns\n.\nviolinplot\n(\nx\n \n=\n \n\"total_bill\"\n,\n \ndata\n=\ntips\n)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nLoad Data to Construct Seaborn Plots\n\u00b6\n\n\nLoading a Built-in Seaborn Data Set\n\u00b6\n\n\nThe Seaborn data are a GitHun \nrepo\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Import necessary libraries\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Load iris data\n\n\niris\n \n=\n \nsns\n.\nload_dataset\n(\n\"iris\"\n)\n\n\n\n# Construct iris plot\n\n\nsns\n.\nswarmplot\n(\nx\n=\n\"species\"\n,\n \ny\n=\n\"petal_length\"\n,\n \ndata\n=\niris\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nSeaborn works best with Pandas DataFrames and arrays that contain a whole data set.\n\n\nShow Seaborn Plots\n\u00b6\n\n\nplt.show()\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# Import necessarily libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\n\n# Load data\n\n\n# built-in Seaborn dataset\n\n\ntitanic\n \n=\n \nsns\n.\nload_dataset\n(\n\"titanic\"\n)\n\n\n\n# Set up a factorplot\n\n\ng\n \n=\n \nsns\n.\nfactorplot\n(\n\"class\"\n,\n \n\"survived\"\n,\n \n\"sex\"\n,\n\n                   \ndata\n=\ntitanic\n,\n\n                   \nkind\n=\n\"bar\"\n,\n\n                   \npalette\n=\n\"muted\"\n,\n\n                   \nlegend\n=\nFalse\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nUse Seaborn with Matplotlib Defaults\n\u00b6\n\n\n1\n2\n3\n4\n5\n# Import Matplotlib\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Check the available styles\n\n\nplt\n.\nstyle\n.\navailable\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n['seaborn-dark-palette',\n 'seaborn-ticks',\n 'seaborn-darkgrid',\n 'seaborn-muted',\n 'seaborn-white',\n 'seaborn-pastel',\n 'grayscale',\n 'seaborn-bright',\n '_classic_test',\n 'seaborn-poster',\n 'seaborn-whitegrid',\n 'classic',\n 'seaborn-dark',\n 'seaborn-talk',\n 'bmh',\n 'seaborn-notebook',\n 'ggplot',\n 'seaborn-colorblind',\n 'seaborn-deep',\n 'seaborn',\n 'fivethirtyeight',\n 'dark_background',\n 'seaborn-paper']\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# Use Matplotlib defaults\n\n\nplt\n.\nstyle\n.\nuse\n(\n\"classic\"\n)\n\n\n\n# Set up a factorplot\n\n\ng\n \n=\n \nsns\n.\nfactorplot\n(\n\"class\"\n,\n \n\"survived\"\n,\n \n\"sex\"\n,\n\n                   \ndata\n=\ntitanic\n,\n\n                   \nkind\n=\n\"bar\"\n,\n\n                   \nlegend\n=\nFalse\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nplt\n.\nstyle\n.\nuse\n(\n\"ggplot\"\n)\n\n\n\n# Set up a factorplot\n\n\ng\n \n=\n \nsns\n.\nfactorplot\n(\n\"class\"\n,\n \n\"survived\"\n,\n \n\"sex\"\n,\n\n                   \ndata\n=\ntitanic\n,\n\n                   \nkind\n=\n\"bar\"\n,\n\n                   \nlegend\n=\nFalse\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nUse Seaborn\u2019s Colors as a colormap in Matplotlib?\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n# Import the necessary libraries\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nmatplotlib.colors\n \nimport\n \nListedColormap\n\n\n\n# Define a variable N\n\n\nN\n \n=\n \n500\n\n\n\n# Construct the colormap\n\n\ncurrent_palette\n \n=\n \nsns\n.\ncolor_palette\n(\n\"muted\"\n,\n \nn_colors\n=\n5\n)\n\n\ncmap\n \n=\n \nListedColormap\n(\nsns\n.\ncolor_palette\n(\ncurrent_palette\n)\n.\nas_hex\n())\n\n\n\n\n# Initialize the data\n\n\ndata1\n \n=\n \nnp\n.\nrandom\n.\nrandn\n(\nN\n)\n\n\ndata2\n \n=\n \nnp\n.\nrandom\n.\nrandn\n(\nN\n)\n\n\n# Assume that there are 5 possible labels\n\n\ncolors\n \n=\n \nnp\n.\nrandom\n.\nrandint\n(\n0\n,\n5\n,\nN\n)\n\n\n\n\n# Create a scatter plot\n\n\nplt\n.\nscatter\n(\ndata1\n,\n \ndata2\n,\n \nc\n=\ncolors\n,\n \ncmap\n=\ncmap\n)\n\n\n\n# Add a color bar\n\n\nplt\n.\ncolorbar\n()\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nScale Seaborn Plots for other Contexts\n\u00b6\n\n\nLarger or smaller plots.\n\n\n\n\n\u201cpaper\u201d,\n\n\n\u201cnotebook\u201d,\n\n\n\u201ctalk\u201d and\n\n\n\u201cposter\u201d\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n# Import necessary libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\n\n# Reset default params\n\n\nsns\n.\nset\n()\n\n\n\n# Set context to `\"paper\"`\n\n\nsns\n.\nset_context\n(\n\"paper\"\n)\n\n\n\n# Load iris data\n\n\niris\n \n=\n \nsns\n.\nload_dataset\n(\n\"iris\"\n)\n\n\n\n# Construct iris plot\n\n\nsns\n.\nswarmplot\n(\nx\n=\n\"species\"\n,\n \ny\n=\n\"petal_length\"\n,\n \ndata\n=\niris\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nMore parameters.\n\n\nUse the higher-level \nset()\n function instead of \nset_context()\n to adjust other plot elements.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n# Import necessary libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\n\n# Set context to `\"paper\"`\n\n\nsns\n.\nset_context\n(\n\"paper\"\n,\n \n                \nfont_scale\n=\n3\n,\n \n                \nrc\n=\n{\n\"font.size\"\n:\n8\n,\n\n                    \n\"axes.labelsize\"\n:\n5\n})\n\n\n\n# Load iris data\n\n\niris\n \n=\n \nsns\n.\nload_dataset\n(\n\"iris\"\n)\n\n\n\n# Construct iris plot\n\n\nsns\n.\nswarmplot\n(\nx\n=\n\"species\"\n,\n \ny\n=\n\"petal_length\"\n,\n \ndata\n=\niris\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n# Import necessary libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\n\n# Reset default params\n\n\nsns\n.\nset\n(\nrc\n=\n{\n\"font.size\"\n:\n8\n,\n\n            \n\"axes.labelsize\"\n:\n5\n})\n\n\n\n# Load iris data\n\n\niris\n \n=\n \nsns\n.\nload_dataset\n(\n\"iris\"\n)\n\n\n\n# Construct iris plot\n\n\nsns\n.\nswarmplot\n(\nx\n=\n\"species\"\n,\n \ny\n=\n\"petal_length\"\n,\n \ndata\n=\niris\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nAxes-level functions and figure-level functions. \n\n\n\n\nThe ones that operate on the Axes level are, for example, \nregplot()\n, \nboxplot()\n, \nkdeplot()\n, \u2026, \n\n\nwhile the functions that operate on the Figure level are \nlmplot()\n, \nfactorplot()\n, \njointplot()\n, \u2026\n\n\n\n\nThe first group is identified by taking an explicit \nax\n argument and returning an Axes object, while the second group of functions creates plots that potentially include Axes. \n\n\n1\ntips\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ntotal_bill\n\n      \ntip\n\n      \nsex\n\n      \nsmoker\n\n      \nday\n\n      \ntime\n\n      \nsize\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n16.99\n\n      \n1.01\n\n      \nFemale\n\n      \nNo\n\n      \nSun\n\n      \nDinner\n\n      \n2\n\n    \n\n    \n\n      \n1\n\n      \n10.34\n\n      \n1.66\n\n      \nMale\n\n      \nNo\n\n      \nSun\n\n      \nDinner\n\n      \n3\n\n    \n\n    \n\n      \n2\n\n      \n21.01\n\n      \n3.50\n\n      \nMale\n\n      \nNo\n\n      \nSun\n\n      \nDinner\n\n      \n3\n\n    \n\n    \n\n      \n3\n\n      \n23.68\n\n      \n3.31\n\n      \nMale\n\n      \nNo\n\n      \nSun\n\n      \nDinner\n\n      \n2\n\n    \n\n    \n\n      \n4\n\n      \n24.59\n\n      \n3.61\n\n      \nFemale\n\n      \nNo\n\n      \nSun\n\n      \nDinner\n\n      \n4\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Set context to `\"paper\"`\n\n\nsns\n.\nset_context\n(\n\"notebook\"\n,\n \n                \nfont_scale\n=\n1\n,\n\n                \nrc\n=\n{\n\"font.size\"\n:\n16\n,\n\n                    \n\"axes.labelsize\"\n:\n16\n})\n\n\n\n\n\n\n\n1\nsns\n.\nboxplot\n(\nx\n=\n\"total_bill\"\n,\n \ndata\n=\ntips\n)\n\n\n\n\n\n\n\n1\n<matplotlib.axes._subplots.AxesSubplot at 0x7f6dc1c721d0>\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nsns\n.\nlmplot\n(\nx\n=\n\"size\"\n,\n \ny\n=\n\"total_bill\"\n,\n\n           \ndata\n=\ntips\n,\n\n           \nsize\n=\n7\n,\n\n           \ntruncate\n=\nTrue\n,\n\n           \nscatter_kws\n=\n{\n\"s\"\n:\n \n100\n})\n\n\n\n\n\n\n\n1\n<seaborn.axisgrid.FacetGrid at 0x7f6dc1b9a9b0>\n\n\n\n\n\n\n\n\nlmplot()\n returns an object of the type \nFacetGrid\n with underlying figure and array of axes at the \nFacetGrid.fig\n and \nFacetGrid.axes\n arguments.\n\n\nMake customizations to a regression plot constructed with \nregplot()\n on the \nAxes\n level (see below) and make customizations with \nlmplot()\n at the Figure level (see further down).\n\n\nTemporarily Set the Plot Style\n\u00b6\n\n\naxes_style()\n in a \nwith\n statement to temporarily set the plot style.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n# Import necessary libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\n\n# Load data\n\n\niris\n \n=\n \nsns\n.\nload_dataset\n(\n\"iris\"\n)\n\n\ntips\n \n=\n \nsns\n.\nload_dataset\n(\n\"tips\"\n)\n\n\n\n# Set axes style to white for first subplot\n\n\nwith\n \nsns\n.\naxes_style\n(\n\"white\"\n):\n\n    \nplt\n.\nsubplot\n(\n211\n)\n\n    \nsns\n.\nswarmplot\n(\nx\n=\n\"species\"\n,\n \ny\n=\n\"petal_length\"\n,\n \ndata\n=\niris\n)\n\n\n\n# Initialize the second subplot\n\n\nplt\n.\nsubplot\n(\n212\n)\n\n\n\n# Plot violinplot\n\n\nsns\n.\nviolinplot\n(\nx\n \n=\n \n\"total_bill\"\n,\n \ndata\n=\ntips\n)\n\n\n\n# Show the plot                   \n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nSet the Figure Size in Seaborn\n\u00b6\n\n\nAxes-level functions: \nplt.subplots()\n function to which we pass the \nfigsize\n argument.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n# Import necessary libraries\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Initialize Figure and Axes object\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n(\nfigsize\n=\n(\n10\n,\n4\n))\n\n\n\n# Load in the data\n\n\niris\n \n=\n \nsns\n.\nload_dataset\n(\n\"iris\"\n)\n\n\n\n# Create swarmplot\n\n\nsns\n.\nswarmplot\n(\nx\n=\n\"species\"\n,\n \ny\n=\n\"petal_length\"\n,\n \ndata\n=\niris\n,\n \nax\n=\nax\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nFigure-level functions: rely on two parameters to set the Figure size, namely, \nsize\n and \naspect\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n# Import the libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n \n\n\n# Load data\n\n\ntitanic\n \n=\n \nsns\n.\nload_dataset\n(\n\"titanic\"\n)\n\n\n\n# Set up a factorplot\n\n\ng\n \n=\n \nsns\n.\nfactorplot\n(\n\"class\"\n,\n \n\"survived\"\n,\n \n\"sex\"\n,\n \n                   \ndata\n=\ntitanic\n,\n \n                   \nkind\n=\n\"bar\"\n,\n \n                   \nsize\n=\n6\n,\n \n                   \naspect\n=\n2\n,\n \n                   \npalette\n=\n\"muted\"\n,\n \n                   \nlegend\n=\nFalse\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nRotate Label Text in Seaborn\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n# Import the necessary libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n \n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Initialize the data\n\n\nx\n \n=\n \n10\n \n**\n \nnp\n.\narange\n(\n1\n,\n \n10\n)\n\n\ny\n \n=\n \nx\n \n*\n \n2\n\n\ndata\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\n{\n'x'\n:\n \nx\n,\n \n'y'\n:\n \ny\n})\n\n\n\n# Create an lmplot\n\n\ngrid\n \n=\n \nsns\n.\nlmplot\n(\n'x'\n,\n \n'y'\n,\n\n                  \ndata\n,\n\n                  \nsize\n=\n7\n,\n\n                  \ntruncate\n=\nTrue\n,\n\n                  \nscatter_kws\n=\n{\n\"s\"\n:\n \n100\n})\n\n\n\n# Rotate the labels on x-axis\n\n\ngrid\n.\nset_xticklabels\n(\nrotation\n=\n30\n)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nSet \nxlim\n or \nylim\n in Seaborn\n\u00b6\n\n\nAssign boxplot to a variable \nax\n, which will be a \nmatplotlib.axes._subplots.AxesSubplot\n object.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n# Import necessary libraries\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Load the data\n\n\ntips\n \n=\n \nsns\n.\nload_dataset\n(\n\"tips\"\n)\n\n\n\n# Create the boxplot\n\n\nax\n \n=\n \nsns\n.\nboxplot\n(\nx\n=\n\"total_bill\"\n,\n \ndata\n=\ntips\n)\n\n\n\n# Set the `xlim`\n\n\nax\n.\nset\n(\nxlim\n=\n(\n0\n,\n \n100\n))\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n# Import necessary libraries\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Load the data\n\n\ntips\n \n=\n \nsns\n.\nload_dataset\n(\n\"tips\"\n)\n\n\n\n# Create the boxplot\n\n\nax\n \n=\n \nsns\n.\nboxplot\n(\nx\n=\n\"total_bill\"\n,\n \ndata\n=\ntips\n)\n\n\n\n# Set the `xlim`\n\n\nax\n.\nset\n(\nxlim\n=\n(\n0\n,\n \n60\n))\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nFigure-level: access the \nAxes\n object with the help of the \naxes\n argument.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n# Import the necessary libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n \n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Initialize the data\n\n\nx\n \n=\n \n10\n \n**\n \nnp\n.\narange\n(\n1\n,\n \n10\n)\n\n\ny\n \n=\n \nx\n \n*\n \n2\n\n\ndata\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\n{\n'x'\n:\n \nx\n,\n \n'y'\n:\n \ny\n})\n\n\n\n# Create lmplot\n\n\nlm\n \n=\n \nsns\n.\nlmplot\n(\n'x'\n,\n \n'y'\n,\n\n                \ndata\n,\n\n                \nsize\n=\n7\n,\n\n                \ntruncate\n=\nTrue\n,\n\n                \nscatter_kws\n=\n{\n\"s\"\n:\n \n100\n})\n\n\n\n# Get hold of the `Axes` objects\n\n\naxes\n \n=\n \nlm\n.\nax\n\n\n\n# Tweak the `Axes` properties\n\n\naxes\n.\nset_ylim\n(\n-\n1000000000\n,)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nFigure-level: \nFacetGrid\n exposes the underlying figure with the help of the \nfig\n argument.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n# Import the necessary libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n \n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Initialize the data\n\n\nx\n \n=\n \n10\n \n**\n \nnp\n.\narange\n(\n1\n,\n \n10\n)\n\n\ny\n \n=\n \nx\n \n*\n \n2\n\n\ndata\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\n{\n'x'\n:\n \nx\n,\n \n'y'\n:\n \ny\n})\n\n\n\n# Create lmplot\n\n\nlm\n \n=\n \nsns\n.\nlmplot\n(\n'x'\n,\n \n'y'\n,\n\n                \ndata\n,\n\n                \nsize\n=\n7\n,\n\n                \ntruncate\n=\nTrue\n,\n\n                \nscatter_kws\n=\n{\n\"s\"\n:\n \n100\n})\n\n\n\n# Access the Figure\n\n\nfig\n \n=\n \nlm\n.\nfig\n \n\n\n# Add a title to the Figure\n\n\nfig\n.\nsuptitle\n(\n'this is the figure title'\n,\n \nfontsize\n=\n12\n)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nSet Log Scale\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n# Import the necessary libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n \n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Create the data\n\n\nx\n \n=\n \n10\n \n**\n \nnp\n.\narange\n(\n1\n,\n \n10\n)\n\n\ny\n \n=\n \nx\n \n*\n \n2\n\n\ndata\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\n{\n'x'\n:\n \nx\n,\n \n'y'\n:\n \ny\n})\n\n\n\n# Initialize figure and ax\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\n\n# Set the scale of the x-and y-axes\n\n\nax\n.\nset\n(\nxscale\n=\n\"log\"\n,\n \nyscale\n=\n\"log\"\n)\n\n\n\n# Create a regplot\n\n\nsns\n.\nregplot\n(\n\"x\"\n,\n \n\"y\"\n,\n\n            \ndata\n,\n\n            \nax\n=\nax\n,\n\n            \nscatter_kws\n=\n{\n\"s\"\n:\n \n100\n})\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nFigure-level: set the \nxscale\n and \nyscale\n properties with the help of the \nset()\n method of the \nFacetGrid\n object.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n# Import the libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n \n\n\n# Load data\n\n\ntitanic\n \n=\n \nsns\n.\nload_dataset\n(\n\"titanic\"\n)\n\n\n\n# Set up a factorplot\n\n\ng\n \n=\n \nsns\n.\nfactorplot\n(\n\"class\"\n,\n \n\"survived\"\n,\n \n\"sex\"\n,\n\n                   \ndata\n=\ntitanic\n,\n\n                   \nkind\n=\n\"bar\"\n,\n\n                   \nsize\n=\n6\n,\n\n                   \npalette\n=\n\"muted\"\n,\n\n                   \nlegend\n=\nFalse\n)\n\n\n\n# Set the `yscale`\n\n\ng\n.\nset\n(\nyscale\n=\n\"log\"\n)\n\n\n\n# Show plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nAdd A Title\n\u00b6\n\n\nAxes-level: \nset_title()\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n# Import the libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n \n\n\ntips\n \n=\n \nsns\n.\nload_dataset\n(\n\"tips\"\n)\n\n\n\n# Create the boxplot\n\n\nax\n \n=\n \nsns\n.\nboxplot\n(\nx\n=\n\"total_bill\"\n,\n \ndata\n=\ntips\n)\n\n\n\n# Set title\n\n\nax\n.\nset_title\n(\n\"boxplot\"\n)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nFigure-level: \nfig\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n# Import the necessary libraries\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n \n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Load the data\n\n\ntips\n \n=\n \nsns\n.\nload_dataset\n(\n\"tips\"\n)\n\n\n\n# Create scatter plots\n\n\ng\n \n=\n \nsns\n.\nFacetGrid\n(\ntips\n,\n \ncol\n=\n\"sex\"\n,\n \nrow\n=\n\"smoker\"\n,\n \nmargin_titles\n=\nTrue\n)\n\n\ng\n.\nmap\n(\nsns\n.\nplt\n.\nscatter\n,\n \n\"total_bill\"\n,\n \n\"tip\"\n)\n\n\n\n# Add a title to the figure\n\n\ng\n.\nfig\n.\nsuptitle\n(\n\"this is a title\"\n)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()",
            "title": "Seaborn, Python's Statistical Data Visualization Library"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#load-data-to-construct-seaborn-plots",
            "text": "",
            "title": "Load Data to Construct Seaborn Plots"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#loading-a-built-in-seaborn-data-set",
            "text": "The Seaborn data are a GitHun  repo .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Import necessary libraries  import   seaborn   as   sns  import   matplotlib.pyplot   as   plt  # Load iris data  iris   =   sns . load_dataset ( \"iris\" )  # Construct iris plot  sns . swarmplot ( x = \"species\" ,   y = \"petal_length\" ,   data = iris )  # Show plot  plt . show ()     Seaborn works best with Pandas DataFrames and arrays that contain a whole data set.",
            "title": "Loading a Built-in Seaborn Data Set"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#show-seaborn-plots",
            "text": "plt.show()   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # Import necessarily libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns  # Load data  # built-in Seaborn dataset  titanic   =   sns . load_dataset ( \"titanic\" )  # Set up a factorplot  g   =   sns . factorplot ( \"class\" ,   \"survived\" ,   \"sex\" , \n                    data = titanic , \n                    kind = \"bar\" , \n                    palette = \"muted\" , \n                    legend = False )  # Show plot  plt . show ()",
            "title": "Show Seaborn Plots"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#use-seaborn-with-matplotlib-defaults",
            "text": "1\n2\n3\n4\n5 # Import Matplotlib  import   matplotlib.pyplot   as   plt  # Check the available styles  plt . style . available     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 ['seaborn-dark-palette',\n 'seaborn-ticks',\n 'seaborn-darkgrid',\n 'seaborn-muted',\n 'seaborn-white',\n 'seaborn-pastel',\n 'grayscale',\n 'seaborn-bright',\n '_classic_test',\n 'seaborn-poster',\n 'seaborn-whitegrid',\n 'classic',\n 'seaborn-dark',\n 'seaborn-talk',\n 'bmh',\n 'seaborn-notebook',\n 'ggplot',\n 'seaborn-colorblind',\n 'seaborn-deep',\n 'seaborn',\n 'fivethirtyeight',\n 'dark_background',\n 'seaborn-paper']    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # Use Matplotlib defaults  plt . style . use ( \"classic\" )  # Set up a factorplot  g   =   sns . factorplot ( \"class\" ,   \"survived\" ,   \"sex\" , \n                    data = titanic , \n                    kind = \"bar\" , \n                    legend = False )  # Show plot  plt . show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 plt . style . use ( \"ggplot\" )  # Set up a factorplot  g   =   sns . factorplot ( \"class\" ,   \"survived\" ,   \"sex\" , \n                    data = titanic , \n                    kind = \"bar\" , \n                    legend = False )  # Show plot  plt . show ()",
            "title": "Use Seaborn with Matplotlib Defaults"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#use-seaborns-colors-as-a-colormap-in-matplotlib",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 # Import the necessary libraries  import   seaborn   as   sns  import   matplotlib.pyplot   as   plt  import   numpy   as   np  from   matplotlib.colors   import   ListedColormap  # Define a variable N  N   =   500  # Construct the colormap  current_palette   =   sns . color_palette ( \"muted\" ,   n_colors = 5 )  cmap   =   ListedColormap ( sns . color_palette ( current_palette ) . as_hex ())  # Initialize the data  data1   =   np . random . randn ( N )  data2   =   np . random . randn ( N )  # Assume that there are 5 possible labels  colors   =   np . random . randint ( 0 , 5 , N )  # Create a scatter plot  plt . scatter ( data1 ,   data2 ,   c = colors ,   cmap = cmap )  # Add a color bar  plt . colorbar ()  # Show the plot  plt . show ()",
            "title": "Use Seaborn\u2019s Colors as a colormap in Matplotlib?"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#scale-seaborn-plots-for-other-contexts",
            "text": "Larger or smaller plots.   \u201cpaper\u201d,  \u201cnotebook\u201d,  \u201ctalk\u201d and  \u201cposter\u201d    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 # Import necessary libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns  # Reset default params  sns . set ()  # Set context to `\"paper\"`  sns . set_context ( \"paper\" )  # Load iris data  iris   =   sns . load_dataset ( \"iris\" )  # Construct iris plot  sns . swarmplot ( x = \"species\" ,   y = \"petal_length\" ,   data = iris )  # Show plot  plt . show ()     More parameters.  Use the higher-level  set()  function instead of  set_context()  to adjust other plot elements.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 # Import necessary libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns  # Set context to `\"paper\"`  sns . set_context ( \"paper\" ,  \n                 font_scale = 3 ,  \n                 rc = { \"font.size\" : 8 , \n                     \"axes.labelsize\" : 5 })  # Load iris data  iris   =   sns . load_dataset ( \"iris\" )  # Construct iris plot  sns . swarmplot ( x = \"species\" ,   y = \"petal_length\" ,   data = iris )  # Show plot  plt . show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 # Import necessary libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns  # Reset default params  sns . set ( rc = { \"font.size\" : 8 , \n             \"axes.labelsize\" : 5 })  # Load iris data  iris   =   sns . load_dataset ( \"iris\" )  # Construct iris plot  sns . swarmplot ( x = \"species\" ,   y = \"petal_length\" ,   data = iris )  # Show plot  plt . show ()     Axes-level functions and figure-level functions.    The ones that operate on the Axes level are, for example,  regplot() ,  boxplot() ,  kdeplot() , \u2026,   while the functions that operate on the Figure level are  lmplot() ,  factorplot() ,  jointplot() , \u2026   The first group is identified by taking an explicit  ax  argument and returning an Axes object, while the second group of functions creates plots that potentially include Axes.   1 tips . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       total_bill \n       tip \n       sex \n       smoker \n       day \n       time \n       size \n     \n   \n   \n     \n       0 \n       16.99 \n       1.01 \n       Female \n       No \n       Sun \n       Dinner \n       2 \n     \n     \n       1 \n       10.34 \n       1.66 \n       Male \n       No \n       Sun \n       Dinner \n       3 \n     \n     \n       2 \n       21.01 \n       3.50 \n       Male \n       No \n       Sun \n       Dinner \n       3 \n     \n     \n       3 \n       23.68 \n       3.31 \n       Male \n       No \n       Sun \n       Dinner \n       2 \n     \n     \n       4 \n       24.59 \n       3.61 \n       Female \n       No \n       Sun \n       Dinner \n       4 \n     \n      1\n2\n3\n4\n5 # Set context to `\"paper\"`  sns . set_context ( \"notebook\" ,  \n                 font_scale = 1 , \n                 rc = { \"font.size\" : 16 , \n                     \"axes.labelsize\" : 16 })    1 sns . boxplot ( x = \"total_bill\" ,   data = tips )    1 <matplotlib.axes._subplots.AxesSubplot at 0x7f6dc1c721d0>    1\n2\n3\n4\n5 sns . lmplot ( x = \"size\" ,   y = \"total_bill\" , \n            data = tips , \n            size = 7 , \n            truncate = True , \n            scatter_kws = { \"s\" :   100 })    1 <seaborn.axisgrid.FacetGrid at 0x7f6dc1b9a9b0>    lmplot()  returns an object of the type  FacetGrid  with underlying figure and array of axes at the  FacetGrid.fig  and  FacetGrid.axes  arguments.  Make customizations to a regression plot constructed with  regplot()  on the  Axes  level (see below) and make customizations with  lmplot()  at the Figure level (see further down).",
            "title": "Scale Seaborn Plots for other Contexts"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#temporarily-set-the-plot-style",
            "text": "axes_style()  in a  with  statement to temporarily set the plot style.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 # Import necessary libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns  # Load data  iris   =   sns . load_dataset ( \"iris\" )  tips   =   sns . load_dataset ( \"tips\" )  # Set axes style to white for first subplot  with   sns . axes_style ( \"white\" ): \n     plt . subplot ( 211 ) \n     sns . swarmplot ( x = \"species\" ,   y = \"petal_length\" ,   data = iris )  # Initialize the second subplot  plt . subplot ( 212 )  # Plot violinplot  sns . violinplot ( x   =   \"total_bill\" ,   data = tips )  # Show the plot                     plt . show ()",
            "title": "Temporarily Set the Plot Style"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#set-the-figure-size-in-seaborn",
            "text": "Axes-level functions:  plt.subplots()  function to which we pass the  figsize  argument.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 # Import necessary libraries  import   seaborn   as   sns  import   matplotlib.pyplot   as   plt  # Initialize Figure and Axes object  fig ,   ax   =   plt . subplots ( figsize = ( 10 , 4 ))  # Load in the data  iris   =   sns . load_dataset ( \"iris\" )  # Create swarmplot  sns . swarmplot ( x = \"species\" ,   y = \"petal_length\" ,   data = iris ,   ax = ax )  # Show plot  plt . show ()     Figure-level functions: rely on two parameters to set the Figure size, namely,  size  and  aspect .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 # Import the libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns   # Load data  titanic   =   sns . load_dataset ( \"titanic\" )  # Set up a factorplot  g   =   sns . factorplot ( \"class\" ,   \"survived\" ,   \"sex\" ,  \n                    data = titanic ,  \n                    kind = \"bar\" ,  \n                    size = 6 ,  \n                    aspect = 2 ,  \n                    palette = \"muted\" ,  \n                    legend = False )  # Show plot  plt . show ()",
            "title": "Set the Figure Size in Seaborn"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#rotate-label-text-in-seaborn",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 # Import the necessary libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns   import   numpy   as   np  import   pandas   as   pd  # Initialize the data  x   =   10   **   np . arange ( 1 ,   10 )  y   =   x   *   2  data   =   pd . DataFrame ( data = { 'x' :   x ,   'y' :   y })  # Create an lmplot  grid   =   sns . lmplot ( 'x' ,   'y' , \n                   data , \n                   size = 7 , \n                   truncate = True , \n                   scatter_kws = { \"s\" :   100 })  # Rotate the labels on x-axis  grid . set_xticklabels ( rotation = 30 )  # Show the plot  plt . show ()",
            "title": "Rotate Label Text in Seaborn"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#set-xlim-or-ylim-in-seaborn",
            "text": "Assign boxplot to a variable  ax , which will be a  matplotlib.axes._subplots.AxesSubplot  object.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 # Import necessary libraries  import   seaborn   as   sns  import   matplotlib.pyplot   as   plt  # Load the data  tips   =   sns . load_dataset ( \"tips\" )  # Create the boxplot  ax   =   sns . boxplot ( x = \"total_bill\" ,   data = tips )  # Set the `xlim`  ax . set ( xlim = ( 0 ,   100 ))  # Show the plot  plt . show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 # Import necessary libraries  import   seaborn   as   sns  import   matplotlib.pyplot   as   plt  # Load the data  tips   =   sns . load_dataset ( \"tips\" )  # Create the boxplot  ax   =   sns . boxplot ( x = \"total_bill\" ,   data = tips )  # Set the `xlim`  ax . set ( xlim = ( 0 ,   60 ))  # Show the plot  plt . show ()     Figure-level: access the  Axes  object with the help of the  axes  argument.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 # Import the necessary libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns   import   numpy   as   np  import   pandas   as   pd  # Initialize the data  x   =   10   **   np . arange ( 1 ,   10 )  y   =   x   *   2  data   =   pd . DataFrame ( data = { 'x' :   x ,   'y' :   y })  # Create lmplot  lm   =   sns . lmplot ( 'x' ,   'y' , \n                 data , \n                 size = 7 , \n                 truncate = True , \n                 scatter_kws = { \"s\" :   100 })  # Get hold of the `Axes` objects  axes   =   lm . ax  # Tweak the `Axes` properties  axes . set_ylim ( - 1000000000 ,)  # Show the plot  plt . show ()     Figure-level:  FacetGrid  exposes the underlying figure with the help of the  fig  argument.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 # Import the necessary libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns   import   numpy   as   np  import   pandas   as   pd  # Initialize the data  x   =   10   **   np . arange ( 1 ,   10 )  y   =   x   *   2  data   =   pd . DataFrame ( data = { 'x' :   x ,   'y' :   y })  # Create lmplot  lm   =   sns . lmplot ( 'x' ,   'y' , \n                 data , \n                 size = 7 , \n                 truncate = True , \n                 scatter_kws = { \"s\" :   100 })  # Access the Figure  fig   =   lm . fig   # Add a title to the Figure  fig . suptitle ( 'this is the figure title' ,   fontsize = 12 )  # Show the plot  plt . show ()",
            "title": "Set xlim or ylim in Seaborn"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#set-log-scale",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 # Import the necessary libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns   import   numpy   as   np  import   pandas   as   pd  # Create the data  x   =   10   **   np . arange ( 1 ,   10 )  y   =   x   *   2  data   =   pd . DataFrame ( data = { 'x' :   x ,   'y' :   y })  # Initialize figure and ax  fig ,   ax   =   plt . subplots ()  # Set the scale of the x-and y-axes  ax . set ( xscale = \"log\" ,   yscale = \"log\" )  # Create a regplot  sns . regplot ( \"x\" ,   \"y\" , \n             data , \n             ax = ax , \n             scatter_kws = { \"s\" :   100 })  # Show plot  plt . show ()     Figure-level: set the  xscale  and  yscale  properties with the help of the  set()  method of the  FacetGrid  object.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 # Import the libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns   # Load data  titanic   =   sns . load_dataset ( \"titanic\" )  # Set up a factorplot  g   =   sns . factorplot ( \"class\" ,   \"survived\" ,   \"sex\" , \n                    data = titanic , \n                    kind = \"bar\" , \n                    size = 6 , \n                    palette = \"muted\" , \n                    legend = False )  # Set the `yscale`  g . set ( yscale = \"log\" )  # Show plot  plt . show ()",
            "title": "Set Log Scale"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#add-a-title",
            "text": "Axes-level:  set_title() .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 # Import the libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns   tips   =   sns . load_dataset ( \"tips\" )  # Create the boxplot  ax   =   sns . boxplot ( x = \"total_bill\" ,   data = tips )  # Set title  ax . set_title ( \"boxplot\" )  # Show the plot  plt . show ()     Figure-level:  fig .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 # Import the necessary libraries  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns   import   numpy   as   np  import   pandas   as   pd  # Load the data  tips   =   sns . load_dataset ( \"tips\" )  # Create scatter plots  g   =   sns . FacetGrid ( tips ,   col = \"sex\" ,   row = \"smoker\" ,   margin_titles = True )  g . map ( sns . plt . scatter ,   \"total_bill\" ,   \"tip\" )  # Add a title to the figure  g . fig . suptitle ( \"this is a title\" )  # Show the plot  plt . show ()",
            "title": "Add A Title"
        },
        {
            "location": "/Pandas+DataFrames/",
            "text": "CONTENT\n\n\nWhat are Pandas Data Frames?\n\n\nCreate a Pandas DataFrame\n\n\nFundamental DataFrame Operations\n\n\nSelect an Index or Column from a Pandas DataFrame\n\n\nElement\n\n\nRow, Column\n\n\n\n\n\n\n\n\n\n\nAdd an Index, Row or Column to a Pandas DataFrame\n\n\nAdd an Index to a DataFrame\n\n\nAdd Rows to a DataFrame\n\n\nAdd a Column to a DataFrame\n\n\nReset the Index of a DataFrame\n\n\n\n\n\n\nDelete Indices, Rows or Columns From a Pandas Data Frame\n\n\nDelete an Index from a DataFrame\n\n\nDelete a Column from a DataFrame\n\n\nRemove a Row from a DataFrame\n\n\n\n\n\n\nRename the Index or Columns of a Pandas DataFrame\n\n\nFormat The Data in a Pandas DataFrame\n\n\nReplace All Occurrences of a String in a DataFrame\n\n\nRemove Parts from Strings in the Cells of a DataFrame\n\n\nSplit Text in a Column into Multiple Rows in a DataFrame\n\n\nApply a Function to a Pandas DataFrame\u2019s Columns or Rows\n\n\n\n\n\n\nCreate an Empty DataFrame\n\n\nDoes Pandas Recognize Dates when Importing Data?\n\n\nWhen, Why and How we should Reshape a DataFrame\n\n\nPivot a DataFrame\n\n\nUse stack() and unstack() to Reshape a Pandas DataFrame\n\n\nReshape a DataFrame with melt()\n\n\n\n\n\n\nIterate over a Pandas DataFrame\n\n\nWrite a Pandas DataFrame to a File\n\n\nOutput a DataFrame to CSV\n\n\nWrite a DataFrame to Excel\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nWhat are Pandas Data Frames?\n\u00b6\n\n\n\n\na Pandas \nDataFrame\n.\n\n\na Pandas \nSeries\n: a one-dimensional labeled array capable of holding any data type with axis labels or index. An example of a Series object is one column from a DataFrame.\n\n\na Numpy \nndarray\n, which can be a record or structured\n\n\na two-dimensional \nndarray\n\n\ndictionaries of one-dimensional \nndarrays\n, lists, dictionaries or Series.\n\n\n\n\nnp.ndarray\n is the actual data type, while \nnp.array()\n is a function.\n\n\nBesides the data that a DataFrame needs to contain, we can also specify the index and column names. The index, on the one hand, indicates the difference in rows, while the column names indicate the difference in columns.\n\n\n1\n2\n3\n%\npylab\n \ninline\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\n1\n2\n3\n4\n5\nimport\n \nos\n\n\n\nos\n.\nchdir\n(\n'/home/ugo/Documents/Notebooks/DataCamp, Pandas tutorial/'\n)\n\n\n\nprint\n(\nos\n.\ngetcwd\n())\n\n\n\n\n\n\n\n1\n/home/ugo/Documents/Notebooks/DataCamp, Pandas tutorial\n\n\n\n\n\n\n1\n2\n3\n4\n# A structured array\n\n\nmy_array\n \n=\n \nnp\n.\nones\n(\n3\n,\n \ndtype\n=\n([(\n'foo'\n,\n \nint\n),\n \n(\n'bar'\n,\n \nfloat\n)]))\n\n\n# Print the structured array\n\n\nprint\n(\nmy_array\n[\n'foo'\n])\n\n\n\n\n\n\n\n1\n[1 1 1]\n\n\n\n\n\n\n1\n2\n3\n4\n# A record array\n\n\nmy_array2\n \n=\n \nmy_array\n.\nview\n(\nnp\n.\nrecarray\n)\n\n\n# Print the record array\n\n\nprint\n(\nmy_array2\n.\nfoo\n)\n\n\n\n\n\n\n\n1\n[1 1 1]\n\n\n\n\n\n\nCreate a Pandas DataFrame\n\u00b6\n\n\nFirst, select the values that are contained in the lists that start with \nRow1\n and \nRow2\n, then select the index or row numbers \nRow1\n and \nRow2\n, and then the column names \nCol1\n and \nCol2\n.\n\n\n1\n2\n3\n4\ndata\n \n=\n \nnp\n.\narray\n([[\n''\n,\n'Col1'\n,\n'Col2'\n],\n\n                \n[\n'Row1'\n,\n1\n,\n2\n],\n\n                \n[\n'Row2'\n,\n3\n,\n4\n]])\n\n\nprint\n(\ndata\n)\n\n\n\n\n\n\n\n1\n2\n3\n[['' 'Col1' 'Col2']\n\n \n['Row1' '1' '2']\n\n \n['Row2' '3' '4']]\n\n\n\n\n\n\n\n1\n2\n3\nprint\n(\npd\n.\nDataFrame\n(\ndata\n=\ndata\n[\n1\n:,\n1\n:],\n\n                  \nindex\n=\ndata\n[\n1\n:,\n0\n],\n\n                  \ncolumns\n=\ndata\n[\n0\n,\n1\n:]))\n\n\n\n\n\n\n\n1\n2\n3\n     Col1 Col2\nRow1    1    2\nRow2    3    4\n\n\n\n\n\n\n1\n2\n3\n# Take a 2D array as input to a DataFrame \n\n\nmy_2darray\n \n=\n \nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n]])\n\n\nprint\n(\npd\n.\nDataFrame\n(\nmy_2darray\n))\n\n\n\n\n\n\n\n1\n2\n3\n   0  1  2\n0  1  2  3\n1  4  5  6\n\n\n\n\n\n\n1\n2\n3\n# Take a dictionary as input to a DataFrame \n\n\nmy_dict\n \n=\n \n{\n1\n:\n \n[\n'1'\n,\n \n'3'\n],\n \n2\n:\n \n[\n'1'\n,\n \n'2'\n],\n \n3\n:\n \n[\n'2'\n,\n \n'4'\n]}\n\n\nprint\n(\npd\n.\nDataFrame\n(\nmy_dict\n))\n\n\n\n\n\n\n\n1\n2\n3\n   1  2  3\n0  1  1  2\n1  3  2  4\n\n\n\n\n\n\n1\n2\n3\n# Take a DataFrame as input to a DataFrame \n\n\nmy_df\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\n[\n4\n,\n5\n,\n6\n,\n7\n],\n \nindex\n=\nrange\n(\n0\n,\n4\n),\n \ncolumns\n=\n[\n'A'\n])\n\n\nprint\n(\npd\n.\nDataFrame\n(\nmy_df\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n   A\n0  4\n1  5\n2  6\n3  7\n\n\n\n\n\n\n1\n2\n3\n# Take a Series as input to a DataFrame\n\n\nmy_series\n \n=\n \npd\n.\nSeries\n({\n\"United Kingdom\"\n:\n\"London\"\n,\n \n\"India\"\n:\n\"New Delhi\"\n,\n \n\"United States\"\n:\n\"Washington\"\n,\n \n\"Belgium\"\n:\n\"Brussels\"\n})\n\n\nprint\n(\npd\n.\nDataFrame\n(\nmy_series\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n                         0\nBelgium           Brussels\nIndia            New Delhi\nUnited Kingdom      London\nUnited States   Washington\n\n\n\n\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n]]))\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n   0  1  2\n0  1  2  3\n1  4  5  6\n\n\n\n\n\n\n1\n2\n# header\n\n\nlist\n(\ndf\n.\ncolumns\n.\nvalues\n)\n\n\n\n\n\n\n\n1\n[0, 1, 2]\n\n\n\n\n\n\n1\n2\n# Use the `shape` property\n\n\nprint\n(\ndf\n.\nshape\n)\n\n\n\n\n\n\n\n1\n(2, 3)\n\n\n\n\n\n\n1\n2\n3\n# Or use the `len()` function with the `index` property\n\n\nprint\n(\nlen\n(\ndf\n.\nindex\n))\n\n\n# length = rows\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n\n\n1\n2\n# exclude the NaN\n\n\ndf\n[\n0\n]\n.\ncount\n()\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n\n\nFundamental DataFrame Operations\n\u00b6\n\n\nSelect an Index or Column from a Pandas DataFrame\n\u00b6\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n'B'\n,\n'C'\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n\n\n\nElement\n\u00b6\n\n\n1\n2\n# Using `iloc[]`\n\n\nprint\n(\ndf\n.\niloc\n[\n0\n][\n0\n])\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\n1\n2\n# Using `loc[]`\n\n\nprint\n(\ndf\n.\nloc\n[\n0\n][\n'A'\n])\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\n1\n2\n# Using `at[]`\n\n\nprint\n(\ndf\n.\nat\n[\n0\n,\n'A'\n])\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\n1\n2\n# Using `iat[]`\n\n\nprint\n(\ndf\n.\niat\n[\n0\n,\n0\n])\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\n1\n2\n# Using `get_value(index, column)`\n\n\nprint\n(\ndf\n.\nget_value\n(\n0\n,\n \n'A'\n))\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\nRow, Column\n\u00b6\n\n\n1\n2\n# Use `iloc[]` to select a row\n\n\nprint\n(\ndf\n.\niloc\n[\n0\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\nA    1\nB    2\nC    3\nName: 0, dtype: int64\n\n\n\n\n\n\n1\n2\n# Use `loc[]` to select a column\n\n\nprint\n(\ndf\n.\nloc\n[:,\n'A'\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\n0    1\n1    4\n2    7\nName: A, dtype: int64\n\n\n\n\n\n\nAdd an Index, Row or Column to a Pandas DataFrame\n\u00b6\n\n\nAdd an Index to a DataFrame\n\u00b6\n\n\n1\n2\n# Print out the DataFrame `df` to check it out\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n\n\n\n1\n2\n# Set 'C' as the index of the DataFrame\n\n\ndf\n.\nset_index\n(\n'C'\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nA\n\n      \nB\n\n    \n\n    \n\n      \nC\n\n      \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n3\n\n      \n1\n\n      \n2\n\n    \n\n    \n\n      \n6\n\n      \n4\n\n      \n5\n\n    \n\n    \n\n      \n9\n\n      \n7\n\n      \n8\n\n    \n\n  \n\n\n\n\n\n\n\nAdd Rows to a DataFrame\n\u00b6\n\n\nBut before\u2026\n\n\n\n\nloc\n works on labels of an index. This means with \nloc[2]\n, we look for the values of the DataFrame that have an index labeled 2.\n\n\niloc\n works on the positions in the index. This means with \niloc[2]\n, we look for the values of the DataFrame that are at index \u20182\u2019.\n\n\nix\n is a more complex case: when the index is integer-based, we pass a label to \nix\n. \nix[2]\n then means that we are looking in the DataFrame for values that have an index labeled \n2\n. This is just like \nloc\n! However, if the index is not solely integer-based, \nix\n will work with positions, just like \niloc\n.\n\n\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \nindex\n=\n \n[\n2\n,\n \n'A'\n,\n \n4\n],\n \ncolumns\n=\n[\n48\n,\n \n49\n,\n \n50\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   48  49  50\n2   1   2   3\nA   4   5   6\n4   7   8   9\n\n\n\n\n\n\n1\n2\n# Pass `2` to `loc`\n\n\nprint\n(\ndf\n.\nloc\n[\n2\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\n48    1\n49    2\n50    3\nName: 2, dtype: int64\n\n\n\n\n\n\n1\n2\n# Pass `2` to `iloc`\n\n\nprint\n(\ndf\n.\niloc\n[\n2\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\n48    7\n49    8\n50    9\nName: 4, dtype: int64\n\n\n\n\n\n\n1\n2\n# Pass `2` to `ix`\n\n\nprint\n(\ndf\n.\nix\n[\n2\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nFormat Type              text\nData Description         HTML\nReader              read_html\nWriter                to_html\nName: 2, dtype: object\n\n\n\n\n\n\nAdd a row.\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \nindex\n=\n \n[\n2.5\n,\n \n12.6\n,\n \n4.8\n],\n \ncolumns\n=\n[\n48\n,\n \n49\n,\n \n50\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n      48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9\n\n\n\n\n\n\n1\n2\n3\n# There's no index labeled `2`, so change the index at position `2`\n\n\ndf\n.\nix\n[\n2\n]\n \n=\n \n[\n60\n,\n \n50\n,\n \n40\n]\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n      48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8   60  50  40\n\n\n\n\n\n\n1\n2\n3\n# This will make an index labeled `2` and ADD the new values\n\n\ndf\n.\nloc\n[\n2\n]\n \n=\n \n[\n11\n,\n \n12\n,\n \n13\n]\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n      48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8   60  50  40\n2.0   11  12  13\n\n\n\n\n\n\nAdd a Column to a DataFrame\n\u00b6\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Use `.index`\n\n\ndf\n[\n'D'\n]\n \n=\n \ndf\n.\nindex\n\n\n\n# Print `df`\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   A  B  C  D\n0  1  2  3  0\n1  4  5  6  1\n2  7  8  9  2\n\n\n\n\n\n\nTell the DataFrame that it should take column A as its index.\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n]]),\n \ncolumns\n=\n[\n1\n,\n2\n,\n3\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n   1  2  3\n0  1  2  3\n1  4  5  6\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Append a column to `df`\n\n\ndf\n.\nloc\n[:,\n \n4\n]\n \n=\n \npd\n.\nSeries\n([\n'5'\n,\n \n'6'\n],\n \nindex\n=\ndf\n.\nindex\n)\n\n\n\n# Print out `df` again to see the changes\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n   1  2  3  4\n0  1  2  3  5\n1  4  5  6  6\n\n\n\n\n\n\nReset the Index of a DataFrame\n\u00b6\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \nindex\n=\n \n[\n2.5\n,\n \n12.6\n,\n \n4.8\n],\n \ncolumns\n=\n[\n48\n,\n \n49\n,\n \n50\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n      48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9\n\n\n\n\n\n\n1\n2\n# Use `reset_index()` to reset the values\n\n\ndf\n.\nreset_index\n(\nlevel\n=\n0\n,\n \ndrop\n=\nTrue\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n48\n\n      \n49\n\n      \n50\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n    \n\n    \n\n      \n1\n\n      \n4\n\n      \n5\n\n      \n6\n\n    \n\n    \n\n      \n2\n\n      \n7\n\n      \n8\n\n      \n9\n\n    \n\n  \n\n\n\n\n\n\n\nDelete Indices, Rows or Columns From a Pandas Data Frame\n\u00b6\n\n\nDelete an Index from a DataFrame\n\u00b6\n\n\nBecause DataFrames and Series always have an index.\n\n\n\n\nReset the index of a DataFrame (go back to the previous section to see how it is done) or\n\n\nremove the index name, if there is any, by executing del df.index.name,\n\n\nremove duplicate index values by resetting the index, dropping the duplicates of the index column that has been added to a DataFrame and reinstating that duplicateless column again as the index,\n\n\nand lastly, remove an index, and with it a row. This is elaborated in one of the next sections.\n\n\n\n\n1\n2\n3\n4\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n],\n \n[\n40\n,\n \n50\n,\n \n60\n],\n \n[\n23\n,\n \n35\n,\n \n37\n]]),\n \n                  \nindex\n=\n \n[\n2.5\n,\n \n12.6\n,\n \n4.8\n,\n \n4.8\n,\n \n2.5\n],\n \n                  \ncolumns\n=\n[\n48\n,\n \n49\n,\n \n50\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n      48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9\n4.8   40  50  60\n2.5   23  35  37\n\n\n\n\n\n\n1\ndf\n.\nreset_index\n()\n.\ndrop_duplicates\n(\nsubset\n=\n'index'\n,\n \nkeep\n=\n'last'\n)\n.\nset_index\n(\n'index'\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n48\n\n      \n49\n\n      \n50\n\n    \n\n    \n\n      \nindex\n\n      \n\n      \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n12.6\n\n      \n4\n\n      \n5\n\n      \n6\n\n    \n\n    \n\n      \n4.8\n\n      \n40\n\n      \n50\n\n      \n60\n\n    \n\n    \n\n      \n2.5\n\n      \n23\n\n      \n35\n\n      \n37\n\n    \n\n  \n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\nDelete a Column from a DataFrame\n\u00b6\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n\n\n\n1\n2\n3\n# Drop the column with label 'A'                  \n\n\ndf\n.\ndrop\n(\n'A'\n,\n \naxis\n=\n1\n,\n \ninplace\n=\nTrue\n)\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   B  C\n0  2  3\n1  5  6\n2  8  9\n\n\n\n\n\n\n1\n2\n3\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\ndf\n.\ndrop\n(\n'A'\n,\n \naxis\n=\n1\n,\n \ninplace\n=\nFalse\n)\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n\n\n\n1\n2\n3\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\n# Drop the column at position 1\n\n\ndf\n.\ndrop\n(\ndf\n.\ncolumns\n[[\n1\n]],\n \naxis\n=\n1\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nA\n\n      \nC\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n3\n\n    \n\n    \n\n      \n1\n\n      \n4\n\n      \n6\n\n    \n\n    \n\n      \n2\n\n      \n7\n\n      \n9\n\n    \n\n  \n\n\n\n\n\n\n\nRemove a Row from a DataFrame\n\u00b6\n\n\n1\n2\n3\n4\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n],\n \n[\n4\n,\n \n5\n,\n \n6\n,\n \n5\n],\n \n[\n7\n,\n \n8\n,\n \n9\n,\n \n6\n],\n \n[\n23\n,\n \n50\n,\n \n60\n,\n \n7\n],\n \n[\n23\n,\n \n35\n,\n \n37\n,\n \n23\n]]),\n \n                  \nindex\n=\n \n[\n2.5\n,\n \n12.6\n,\n \n4.8\n,\n \n4.8\n,\n \n2.5\n],\n \n                  \ncolumns\n=\n[\n48\n,\n \n49\n,\n \n50\n,\n \n50\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n      48  49  50  50\n2.5    1   2   3   4\n12.6   4   5   6   5\n4.8    7   8   9   6\n4.8   23  50  60   7\n2.5   23  35  37  23\n\n\n\n\n\n\n1\n2\n# Drop the duplicates in `df`\n\n\ndf\n.\ndrop_duplicates\n([\n48\n],\n \nkeep\n=\n'last'\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n48\n\n      \n49\n\n      \n50\n\n      \n50\n\n    \n\n  \n\n  \n\n    \n\n      \n2.5\n\n      \n1\n\n      \n2\n\n      \n3\n\n      \n4\n\n    \n\n    \n\n      \n12.6\n\n      \n4\n\n      \n5\n\n      \n6\n\n      \n5\n\n    \n\n    \n\n      \n4.8\n\n      \n7\n\n      \n8\n\n      \n9\n\n      \n6\n\n    \n\n    \n\n      \n2.5\n\n      \n23\n\n      \n35\n\n      \n37\n\n      \n23\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n\n\n\n1\n2\n# Drop the index at position 1\n\n\nprint\n(\ndf\n.\ndrop\n(\ndf\n.\nindex\n[\n1\n]))\n\n\n\n\n\n\n\n1\n2\n3\n   A  B  C\n0  1  2  3\n2  7  8  9\n\n\n\n\n\n\n1\ndf\n.\nreset_index\n(\nlevel\n=\n0\n,\n \ndrop\n=\nTrue\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nA\n\n      \nB\n\n      \nC\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n    \n\n    \n\n      \n1\n\n      \n4\n\n      \n5\n\n      \n6\n\n    \n\n    \n\n      \n2\n\n      \n7\n\n      \n8\n\n      \n9\n\n    \n\n  \n\n\n\n\n\n\n\nRename the Index or Columns of a Pandas DataFrame\n\u00b6\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# Define the new names of columns\n\n\nnewcols\n \n=\n \n{\n\n    \n'A'\n:\n \n'new_column_1'\n,\n \n    \n'B'\n:\n \n'new_column_2'\n,\n \n    \n'C'\n:\n \n'new_column_3'\n\n\n}\n\n\n\n# Use `rename()` to rename columns\n\n\ndf\n.\nrename\n(\ncolumns\n=\nnewcols\n,\n \ninplace\n=\nTrue\n)\n\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   new_column_1  new_column_2  new_column_3\n0             1             2             3\n1             4             5             6\n2             7             8             9\n\n\n\n\n\n\n1\n2\n# Rename the index\n\n\ndf\n.\nrename\n(\nindex\n=\n{\n1\n:\n \n'a'\n})\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nnew_column_1\n\n      \nnew_column_2\n\n      \nnew_column_3\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n    \n\n    \n\n      \na\n\n      \n4\n\n      \n5\n\n      \n6\n\n    \n\n    \n\n      \n2\n\n      \n7\n\n      \n8\n\n      \n9\n\n    \n\n  \n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\n# Define the new names of columns\n\n\nnewcols\n \n=\n \n{\n\n    \n'A'\n:\n \n'new_column_1'\n,\n \n    \n'B'\n:\n \n'new_column_2'\n,\n \n    \n'C'\n:\n \n'new_column_3'\n\n\n}\n\n\n\n# Use `rename()` to rename columns\n\n\ndf2\n \n=\n \ndf\n.\nrename\n(\ncolumns\n=\nnewcols\n,\n \ninplace\n=\nFalse\n)\n\n\n\nprint\n(\ndf\n)\n\n\nprint\n(\ndf2\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n   new_column_1  new_column_2  new_column_3\n0             1             2             3\n1             4             5             6\n2             7             8             9\n\n\n\n\n\n\nFormat The Data in a Pandas DataFrame\n\u00b6\n\n\nReplace All Occurrences of a String in a DataFrame\n\u00b6\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n'OK'\n,\n'Perfect'\n,\n'Acceptable'\n],\n \n[\n'Awful'\n,\n'Awful'\n,\n'Perfect'\n],\n \n[\n'Acceptable'\n,\n'OK'\n,\n'Poor'\n]]),\n \ncolumns\n=\n[\n'Student1'\n,\n'Student2'\n,\n'Student3'\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n     Student1 Student2    Student3\n0          OK  Perfect  Acceptable\n1       Awful    Awful     Perfect\n2  Acceptable       OK        Poor\n\n\n\n\n\n\n1\n2\n# Replace the strings by numerical values (0-4)\n\n\ndf\n.\nreplace\n([\n'Awful'\n,\n \n'Poor'\n,\n \n'OK'\n,\n \n'Acceptable'\n,\n \n'Perfect'\n],\n \n[\n0\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n])\n \n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nStudent1\n\n      \nStudent2\n\n      \nStudent3\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2\n\n      \n4\n\n      \n3\n\n    \n\n    \n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n4\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n2\n\n      \n1\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n'1\n\\n\n'\n,\n2\n,\n'3\n\\n\n'\n],\n \n[\n'4'\n,\n5\n \n,\n'6\n\\n\n'\n],\n \n[\n'7'\n,\n'8\n\\n\n'\n,\n'9'\n]]),\n \ncolumns\n=\n[\n0\n,\n1\n,\n2\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n     0    1    2\n0  1\\n    2  3\\n\n1    4    5  6\\n\n2    7  8\\n    9\n\n\n\n\n\n\n1\n2\n# Replace strings by others with `regex`\n\n\ndf\n.\nreplace\n({\n'\n\\n\n'\n:\n \n'<br>'\n},\n \nregex\n=\nTrue\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n0\n\n      \n1\n\n      \n2\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1<br>\n\n      \n2\n\n      \n3<br>\n\n    \n\n    \n\n      \n1\n\n      \n4\n\n      \n5\n\n      \n6<br>\n\n    \n\n    \n\n      \n2\n\n      \n7\n\n      \n8<br>\n\n      \n9\n\n    \n\n  \n\n\n\n\n\n\n\nRemove Parts from Strings in the Cells of a DataFrame\n\u00b6\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n2\n,\n'+3b'\n],\n \n[\n4\n,\n5\n,\n'-6B'\n],\n \n[\n7\n,\n8\n,\n'+9A'\n]]),\n \ncolumns\n=\n[\n'class'\n,\n'test'\n,\n'result'\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n  \nclass\n \ntest\n \nresult\n\n\n0\n     \n1\n    \n2\n    +\n3\nb\n\n\n1\n     \n4\n    \n5\n    -\n6\nB\n\n\n2\n     \n7\n    \n8\n    +\n9\nA\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Delete unwanted parts from the strings in the `result` column\n\n\ndf\n[\n'result'\n]\n \n=\n \ndf\n[\n'result'\n]\n.\nmap\n(\nlambda\n \nx\n:\n \nx\n.\nlstrip\n(\n'+-'\n)\n.\nrstrip\n(\n'aAbBcC'\n))\n\n\n\n# Check out the result again\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n  \nclass\n \ntest\n \nresult\n\n\n0\n     \n1\n    \n2\n      \n3\n\n\n1\n     \n4\n    \n5\n      \n6\n\n\n2\n     \n7\n    \n8\n      \n9\n\n\n\n\n\n\n\nUse \nmap()\n on the column \nresult\n to apply the lambda function over each element or element-wise of the column. The function in itself takes the string value and strips the \n+\n or \n-\n that\u2019s located on the left, and also strips away any of the six \naAbBcC\n on the right.\n\n\nSplit Text in a Column into Multiple Rows in a DataFrame\n\u00b6\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n34\n,\n0\n,\n'23:44:55'\n],\n \n[\n22\n,\n0\n,\n'66:77:88'\n],\n \n[\n19\n,\n1\n,\n'43:68:05 56:34:12'\n]]),\n \ncolumns\n=\n[\n'Age'\n,\n'PlusOne'\n,\n'Ticket'\n])\n\n\nprint\n(\ndf\n)\n                    \n\n\n\n\n\n\n1\n2\n3\n4\n  Age PlusOne             Ticket\n0  34       0           23:44:55\n1  22       0           66:77:88\n2  19       1  43:68:05 56:34:12\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Split out the two values in the third row\n\n\n# Make it a Series\n\n\n# Stack the values\n\n\nticket_series\n \n=\n \ndf\n[\n'Ticket'\n]\n.\nstr\n.\nsplit\n(\n' '\n)\n.\napply\n(\npd\n.\nSeries\n,\n \n1\n)\n.\nstack\n()\n\n\nprint\n(\nticket_series\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n0  0    23:44:55\n1  0    66:77:88\n2  0    43:68:05\n   1    56:34:12\ndtype: object\n\n\n\n\n\n\n1\n2\n3\n# Get rid of the stack:\n\n\n# Drop the level to line up with the DataFrame\n\n\nticket_series\n.\nindex\n \n=\n \nticket_series\n.\nindex\n.\ndroplevel\n(\n-\n1\n)\n\n\n\n\n\n\n\n1\n2\n# Make a series a dataframe \n\n\nticketdf\n \n=\n \npd\n.\nDataFrame\n(\nticket_series\n)\n\n\n\n\n\n\n\n1\n2\n# Delete the `Ticket` column from a DataFrame\n\n\ndel\n \ndf\n[\n'Ticket'\n]\n\n\n\n\n\n\n\n1\n2\n# Check out the new `df`\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n  Age PlusOne\n0  34       0\n1  22       0\n2  19       1\n\n\n\n\n\n\n1\nprint\n(\nticketdf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n          0\n0  23:44:55\n1  66:77:88\n2  43:68:05\n2  56:34:12\n\n\n\n\n\n\n1\n2\n# Join the ticket DataFrame to `df`\n\n\ndf\n.\njoin\n(\nticketdf\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nAge\n\n      \nPlusOne\n\n      \n0\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n34\n\n      \n0\n\n      \n23:44:55\n\n    \n\n    \n\n      \n1\n\n      \n22\n\n      \n0\n\n      \n66:77:88\n\n    \n\n    \n\n      \n2\n\n      \n19\n\n      \n1\n\n      \n43:68:05\n\n    \n\n    \n\n      \n2\n\n      \n19\n\n      \n1\n\n      \n56:34:12\n\n    \n\n  \n\n\n\n\n\n\n\nFirst, inspect the DataFrame at hand. The values in the last row and in the last column are a bit too long. It appears there are two tickets because a guest has taken a plus-one to the concert.\n\n\nTake the \nTicket\n column from the DataFrame \ndf\n and strings on a space. This will make sure that the two tickets will end up in two separate rows in the end. Next, take these four values (the four ticket numbers) and put them into a Series object. That still doesn\u2019t seem quite right. There are \nNaN\n values in there! Stack the Series to make sure they don\u2019t have any \nNaN\n values in the resulting Series.\n\n\nNext, stack the Series.\n\n\nThat is not ideal either. Drop the level to line up with the DataFrame.\n\n\nTransform a Series to a DataFrame to make sure we can join it back to the initial DataFrame. However, to avoid having any duplicates in the DataFrame, delete the original \nTicket\n column.\n\n\nApply a Function to a Pandas DataFrame\u2019s Columns or Rows\n\u00b6\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# A lambda function\n\n\ndoubler\n \n=\n \nlambda\n \nx\n:\n \nx\n*\n2\n\n\n\n# Apply the `doubler` function to the `A` DataFrame column\n\n\ndf\n[\n'A'\n]\n.\napply\n(\ndoubler\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n0     2\n1     8\n2    14\nName: A, dtype: int64\n\n\n\n\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\ndf\n.\nloc\n[\n0\n]\n.\napply\n(\ndoubler\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\nA    2\nB    4\nC    6\nName: 0, dtype: int64\n\n\n\n\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\ndf\n.\niloc\n[\n0\n]\n.\napply\n(\ndoubler\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\nA    2\nB    4\nC    6\nName: 0, dtype: int64\n\n\n\n\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\ndf\n[\n'A'\n]\n.\napply\n(\ndoubler\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n0     2\n1     8\n2    14\nName: A, dtype: int64\n\n\n\n\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\ndf\n.\napplymap\n(\ndoubler\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nA\n\n      \nB\n\n      \nC\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2\n\n      \n4\n\n      \n6\n\n    \n\n    \n\n      \n1\n\n      \n8\n\n      \n10\n\n      \n12\n\n    \n\n    \n\n      \n2\n\n      \n14\n\n      \n16\n\n      \n18\n\n    \n\n  \n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\n\ndef\n \ndoubler\n(\nx\n):\n\n    \nif\n \nx\n \n%\n \n2\n \n==\n \n0\n:\n\n        \nreturn\n \nx\n\n    \nelse\n:\n\n        \nreturn\n \nx\n \n*\n \n2\n\n\n\n# Use `applymap()` to apply `doubler()` to a DataFrame\n\n\ndf\n.\napplymap\n(\ndoubler\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nA\n\n      \nB\n\n      \nC\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2\n\n      \n2\n\n      \n6\n\n    \n\n    \n\n      \n1\n\n      \n4\n\n      \n10\n\n      \n6\n\n    \n\n    \n\n      \n2\n\n      \n14\n\n      \n8\n\n      \n18\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n# Check the DataFrame\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n\n\n\nCreate an Empty DataFrame\n\u00b6\n\n\nnumpy.nan\n has type float.\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\nnp\n.\nnan\n,\n \nindex\n=\n[\n0\n,\n1\n,\n2\n,\n3\n],\n \ncolumns\n=\n[\n'A'\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n    A\n0 NaN\n1 NaN\n2 NaN\n3 NaN\n\n\n\n\n\n\nAdd an attribute.\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\nindex\n=\nrange\n(\n0\n,\n4\n),\ncolumns\n=\n[\n'A'\n],\n \ndtype\n=\n'float'\n)\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n    A\n0 NaN\n1 NaN\n2 NaN\n3 NaN\n\n\n\n\n\n\nDoes Pandas Recognize Dates when Importing Data?\n\u00b6\n\n\n1\n2\ndf\n \n=\n \npd\n.\nread_csv\n(\n'date.csv'\n,\n \nheader\n=\n0\n,\n \nparse_dates\n=\nTrue\n)\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n     unit      date\n0  6.1101  02/08/16\n1  5.5277  08/07/16\n2  8.5186  09/05/16\n3  7.0032  20/03/16\n\n\n\n\n\n\n1\n2\n3\n# or this option:\n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\n'date.csv'\n,\n \nheader\n=\n0\n,\n \nparse_dates\n=\n[\n'date'\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n     unit       date\n0  6.1101 2016-02-08\n1  5.5277 2016-08-07\n2  8.5186 2016-09-05\n3  7.0032 2016-03-20\n\n\n\n\n\n\nThe second code succeeded.\n\n\nWhen, Why and How we should Reshape a DataFrame\n\u00b6\n\n\nPivot a DataFrame\n\u00b6\n\n\n\n\nValues: this argument allows to specify which values of the original DataFrame we want to see in the pivot table.\n\n\nColumns: whatever is passed to this argument will become a column in the resulting table.\n\n\nIndex: whatever is passed to this argument will become an index in the resulting table.\n\n\n\n\n1\n2\n3\n4\n5\nproducts\n \n=\n \npd\n.\nDataFrame\n({\n'category'\n:\n \n[\n'Cleaning'\n,\n \n'Cleaning'\n,\n \n'Entertainment'\n,\n \n'Entertainment'\n,\n \n'Tech'\n,\n \n'Tech'\n],\n\n                        \n'store'\n:\n \n[\n'Walmart'\n,\n \n'Dia'\n,\n \n'Walmart'\n,\n \n'Fnac'\n,\n \n'Dia'\n,\n'Walmart'\n],\n\n                        \n'price'\n:[\n11.42\n,\n \n23.50\n,\n \n19.99\n,\n \n15.95\n,\n \n55.75\n,\n \n111.55\n],\n\n                        \n'testscore'\n:\n \n[\n4\n,\n \n3\n,\n \n5\n,\n \n7\n,\n \n5\n,\n \n8\n]})\n\n\nprint\n(\nproducts\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n        category   price    store  testscore\n0       Cleaning   11.42  Walmart          4\n1       Cleaning   23.50      Dia          3\n2  Entertainment   19.99  Walmart          5\n3  Entertainment   15.95     Fnac          7\n4           Tech   55.75      Dia          5\n5           Tech  111.55  Walmart          8\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Use `pivot()` to pivot the DataFrame\n\n\npivot_products\n \n=\n \nproducts\n.\npivot\n(\nindex\n=\n'category'\n,\n \ncolumns\n=\n'store'\n,\n \nvalues\n=\n'price'\n)\n\n\n\n# Check out the result\n\n\nprint\n(\npivot_products\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nstore            Dia   Fnac  Walmart\ncategory                            \nCleaning       23.50    NaN    11.42\nEntertainment    NaN  15.95    19.99\nTech           55.75    NaN   111.55\n\n\n\n\n\n\nWithout specific values.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nproducts\n \n=\n \npd\n.\nDataFrame\n({\n'category'\n:\n \n[\n'Cleaning'\n,\n \n'Cleaning'\n,\n \n'Entertainment'\n,\n \n'Entertainment'\n,\n \n'Tech'\n,\n \n'Tech'\n],\n\n                        \n'store'\n:\n \n[\n'Walmart'\n,\n \n'Dia'\n,\n \n'Walmart'\n,\n \n'Fnac'\n,\n \n'Dia'\n,\n'Walmart'\n],\n\n                        \n'price'\n:[\n11.42\n,\n \n23.50\n,\n \n19.99\n,\n \n15.95\n,\n \n55.75\n,\n \n111.55\n],\n\n                        \n'testscore'\n:\n \n[\n4\n,\n \n3\n,\n \n5\n,\n \n7\n,\n \n5\n,\n \n8\n]})\n\n\n\n# Use `pivot()` to pivot the DataFrame\n\n\npivot_products\n \n=\n \nproducts\n.\npivot\n(\nindex\n=\n'category'\n,\n \ncolumns\n=\n'store'\n)\n\n\n\n# Check out the results\n\n\nprint\n(\npivot_products\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n               price                testscore             \nstore            Dia   Fnac Walmart       Dia Fnac Walmart\ncategory                                                  \nCleaning       23.50    NaN   11.42       3.0  NaN     4.0\nEntertainment    NaN  15.95   19.99       NaN  7.0     5.0\nTech           55.75    NaN  111.55       5.0  NaN     8.0\n\n\n\n\n\n\npivot_table()\n can add a function: \nmean\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# The DataFrame\n\n\nproducts\n \n=\n \npd\n.\nDataFrame\n({\n'category'\n:\n \n[\n'Cleaning'\n,\n \n'Cleaning'\n,\n \n'Entertainment'\n,\n \n'Entertainment'\n,\n \n'Tech'\n,\n \n'Tech'\n],\n\n                        \n'store'\n:\n \n[\n'Walmart'\n,\n \n'Dia'\n,\n \n'Walmart'\n,\n \n'Fnac'\n,\n \n'Dia'\n,\n'Walmart'\n],\n\n                        \n'price'\n:[\n11.42\n,\n \n23.50\n,\n \n19.99\n,\n \n15.95\n,\n \n19.99\n,\n \n111.55\n],\n\n                        \n'testscore'\n:\n \n[\n4\n,\n \n3\n,\n \n5\n,\n \n7\n,\n \n5\n,\n \n8\n]})\n\n\n\n# Pivot the `products` DataFrame with `pivot_table()`\n\n\npivot_products\n \n=\n \nproducts\n.\npivot_table\n(\nindex\n=\n'category'\n,\n \ncolumns\n=\n'store'\n,\n \nvalues\n=\n'price'\n,\n \naggfunc\n=\n'mean'\n)\n\n\n\n# Check out the results\n\n\nprint\n(\npivot_products\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nstore            Dia   Fnac  Walmart\ncategory                            \nCleaning       23.50    NaN    11.42\nEntertainment    NaN  15.95    19.99\nTech           19.99    NaN   111.55\n\n\n\n\n\n\nUse \nstack()\n and \nunstack()\n to Reshape a Pandas DataFrame\n\u00b6\n\n\nWhen we stack a DataFrame, we make it taller. Move the innermost column index to become the innermost row index.\n\n\nMuch like \nstack()\n, use \nunstack()\n to move the innermost row index to become the innermost column index.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nfrom\n \ncollections\n \nimport\n \nOrderedDict\n\n\nfrom\n \npandas\n \nimport\n \nDataFrame\n\n\nimport\n \npandas\n \nas\n \npd\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\ntable\n \n=\n \nOrderedDict\n((\n\n    \n(\n\"Item\"\n,\n \n[\n'Item0'\n,\n \n'Item0'\n,\n \n'Item1'\n,\n \n'Item1'\n]),\n\n    \n(\n'CType'\n,[\n'Gold'\n,\n \n'Bronze'\n,\n \n'Gold'\n,\n \n'Silver'\n]),\n\n    \n(\n'USD'\n,\n  \n[\n'1$'\n,\n \n'2$'\n,\n \n'3$'\n,\n \n'4$'\n]),\n\n    \n(\n'EU'\n,\n   \n[\n'1\u20ac'\n,\n \n'2\u20ac'\n,\n \n'3\u20ac'\n,\n \n'4\u20ac'\n])\n\n\n))\n\n\ndf\n \n=\n \nDataFrame\n(\ntable\n)\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n    Item   CType USD  EU\n0  Item0    Gold  1$  1\u20ac\n1  Item0  Bronze  2$  2\u20ac\n2  Item1    Gold  3$  3\u20ac\n3  Item1  Silver  4$  4\u20ac\n\n\n\n\n\n\n1\n2\n# Original DataFrame: Access the USD cost of Item0 for Gold customers\n\n\nprint\n(\ndf\n[(\ndf\n.\nItem\n==\n'Item0'\n)\n \n&\n \n(\ndf\n.\nCType\n==\n'Gold'\n)]\n.\nUSD\n.\nvalues\n)\n\n\n\n\n\n\n\n1\n['1$']\n\n\n\n\n\n\n1\n2\n3\n# Column pivot\n\n\np\n \n=\n \ndf\n.\npivot\n(\nindex\n=\n'Item'\n,\n \ncolumns\n=\n'CType'\n)\n\n\nprint\n(\np\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n         USD                 EU            \nCType Bronze Gold Silver Bronze Gold Silver\nItem                                       \nItem0     2$   1$   None     2\u20ac   1\u20ac   None\nItem1   None   3$     4$   None   3\u20ac     4\u20ac\n\n\n\n\n\n\n1\n2\n# Pivoted DataFrame: p.USD gives a \"sub-DataFrame\" with the USD values only\n\n\nprint\n(\np\n.\nUSD\n[\np\n.\nUSD\n.\nindex\n==\n'Item0'\n])\n\n\n\n\n\n\n\n1\n2\n3\nCType Bronze Gold Silver\nItem                    \nItem0     2$   1$   None\n\n\n\n\n\n\n1\n2\n# more precise\n\n\nprint\n(\np\n.\nUSD\n[\np\n.\nUSD\n.\nindex\n==\n'Item0'\n]\n.\nGold\n.\nvalues\n)\n\n\n\n\n\n\n\n1\n['1$']\n\n\n\n\n\n\n1\n2\n3\n# Pivoting By Multiple Columns\n\n\np\n \n=\n \ndf\n.\npivot\n(\nindex\n=\n'Item'\n,\n \ncolumns\n=\n'CType'\n)\n\n\nprint\n(\np\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n         USD                 EU            \nCType Bronze Gold Silver Bronze Gold Silver\nItem                                       \nItem0     2$   1$   None     2\u20ac   1\u20ac   None\nItem1   None   3$     4$   None   3\u20ac     4\u20ac\n\n\n\n\n\n\n1\n2\n# Pivoted DataFrame: p.USD gives a \"sub-DataFrame\" with the USD values only\n\n\nprint\n(\np\n.\nUSD\n[\np\n.\nUSD\n.\nindex\n==\n'Item0'\n])\n\n\n\n\n\n\n\n1\n2\n3\nCType Bronze Gold Silver\nItem                    \nItem0     2$   1$   None\n\n\n\n\n\n\n1\n2\n# more precise\n\n\nprint\n(\np\n.\nUSD\n[\np\n.\nUSD\n.\nindex\n==\n'Item0'\n]\n.\nGold\n.\nvalues\n)\n\n\n\n\n\n\n\n1\n['1$']\n\n\n\n\n\n\n1\n2\n3\n# Stack/Unstack\n\n\ns\n \n=\n \ndf\n.\nstack\n()\n\n\nprint\n(\ns\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n0  Item      Item0\n   CType      Gold\n   USD          1$\n   EU           1\u20ac\n1  Item      Item0\n   CType    Bronze\n   USD          2$\n   EU           2\u20ac\n2  Item      Item1\n   CType      Gold\n   USD          3$\n   EU           3\u20ac\n3  Item      Item1\n   CType    Silver\n   USD          4$\n   EU           4\u20ac\ndtype: object\n\n\n\n\n\n\n1\n2\nu\n \n=\n \ns\n.\nunstack\n()\n\n\nprint\n(\nu\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n    Item   CType USD  EU\n0  Item0    Gold  1$  1\u20ac\n1  Item0  Bronze  2$  2\u20ac\n2  Item1    Gold  3$  3\u20ac\n3  Item1  Silver  4$  4\u20ac\n\n\n\n\n\n\nReshape a DataFrame with \nmelt()\n\u00b6\n\n\nWhen we have a data that has one or more columns that are identifier variables, while all other columns are considered measured variables.\n\n\n1\n2\n3\n4\n5\n6\n# The `people` DataFrame\n\n\npeople\n \n=\n \npd\n.\nDataFrame\n({\n'FirstName'\n \n:\n \n[\n'John'\n,\n \n'Jane'\n],\n\n                       \n'LastName'\n \n:\n \n[\n'Doe'\n,\n \n'Austen'\n],\n\n                       \n'BloodType'\n \n:\n \n[\n'A-'\n,\n \n'B+'\n],\n\n                       \n'Weight'\n \n:\n \n[\n90\n,\n \n64\n]})\n\n\nprint\n(\npeople\n)\n\n\n\n\n\n\n\n1\n2\n3\n  BloodType FirstName LastName  Weight\n0        A-      John      Doe      90\n1        B+      Jane   Austen      64\n\n\n\n\n\n\n1\n2\n# Use `melt()` on the `people` DataFrame\n\n\nprint\n(\npd\n.\nmelt\n(\npeople\n,\n \nid_vars\n=\n[\n'FirstName'\n,\n \n'LastName'\n],\n \nvar_name\n=\n'measurements'\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n  FirstName LastName measurements value\n0      John      Doe    BloodType    A-\n1      Jane   Austen    BloodType    B+\n2      John      Doe       Weight    90\n3      Jane   Austen       Weight    64\n\n\n\n\n\n\nIterate over a Pandas DataFrame\n\u00b6\n\n\n1\n2\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n=\nnp\n.\narray\n([[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]),\n \ncolumns\n=\n[\n'A'\n,\n \n'B'\n,\n \n'C'\n])\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n\n\n\n1\n2\nfor\n \nindex\n,\n \nrow\n \nin\n \ndf\n.\niterrows\n()\n \n:\n\n    \nprint\n(\nrow\n[\n'A'\n],\n \nrow\n[\n'B'\n])\n\n\n\n\n\n\n\n1\n2\n3\n1 2\n4 5\n7 8\n\n\n\n\n\n\nWrite a Pandas DataFrame to a File\n\u00b6\n\n\nOutput a DataFrame to CSV\n\u00b6\n\n\n1\ndf\n.\nto_csv\n(\n'myDataFrame.csv'\n)\n\n\n\n\n\n\n\n1\ndf\n.\nto_csv\n(\n'myDataFrame2.csv'\n,\n \nsep\n=\n'\n\\t\n'\n)\n\n\n\n\n\n\n\n1\ndf\n.\nto_csv\n(\n'myDataFrame3.csv'\n,\n \nsep\n=\n'\n\\t\n'\n,\n \nencoding\n=\n'utf-8'\n)\n\n\n\n\n\n\n\nWrite a DataFrame to \nExcel\n\u00b6\n\n\n1\n2\n3\n4\n5\nwriter\n \n=\n \npd\n.\nExcelWriter\n(\n'myDataFrame.xlsx'\n)\n\n\ndf\n.\nto_excel\n(\nwriter\n,\n \n'DataFrame'\n)\n\n\nwriter\n.\nsave\n()\n\n\n# startcol=\n\n\n# startrow=\n\n\n\n\n\n\n\n1\n2\n3\n4\nimport\n \nxlrd\n\n\n\nxlsx\n \n=\n \npd\n.\nExcelFile\n(\n'filetype.xlsx'\n)\n\n\nxlsx\n.\nsheet_names\n\n\n\n\n\n\n\n1\n['a']\n\n\n\n\n\n\n1\n2\ndf\n \n=\n \npd\n.\nread_excel\n(\nxlsx\n,\n \n'a'\n)\n\n\nprint\n(\ndf\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   Format Type      Data Description          Reader        Writer\n0         text                   CSV        read_csv        to_csv\n1         text                  JSON       read_json       to_json\n2         text                  HTML       read_html       to_html\n3         text       Local clipboard  read_clipboard  to_clipboard\n4       binary              MS Excel      read_excel      to_excel\n5       binary           HDF5 Format        read_hdf        to_hdf\n6       binary        Feather Format    read_feather    to_feather\n7       binary               Msgpack    read_msgpack    to_msgpack\n8       binary                 Stata      read_stata      to_stata\n9       binary                   SAS        read_sas             \u00a0\n10      binary  Python Pickle Format     read_pickle     to_pickle\n11         SQL                   SQL        read_sql        to_sql\n12         SQL      Google Big Query        read_gbq        to_gbq",
            "title": "Pandas DataFrames"
        },
        {
            "location": "/Pandas+DataFrames/#create-a-pandas-dataframe",
            "text": "First, select the values that are contained in the lists that start with  Row1  and  Row2 , then select the index or row numbers  Row1  and  Row2 , and then the column names  Col1  and  Col2 .  1\n2\n3\n4 data   =   np . array ([[ '' , 'Col1' , 'Col2' ], \n                 [ 'Row1' , 1 , 2 ], \n                 [ 'Row2' , 3 , 4 ]])  print ( data )    1\n2\n3 [['' 'Col1' 'Col2'] \n  ['Row1' '1' '2'] \n  ['Row2' '3' '4']]    1\n2\n3 print ( pd . DataFrame ( data = data [ 1 :, 1 :], \n                   index = data [ 1 :, 0 ], \n                   columns = data [ 0 , 1 :]))    1\n2\n3      Col1 Col2\nRow1    1    2\nRow2    3    4   1\n2\n3 # Take a 2D array as input to a DataFrame   my_2darray   =   np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ]])  print ( pd . DataFrame ( my_2darray ))    1\n2\n3    0  1  2\n0  1  2  3\n1  4  5  6   1\n2\n3 # Take a dictionary as input to a DataFrame   my_dict   =   { 1 :   [ '1' ,   '3' ],   2 :   [ '1' ,   '2' ],   3 :   [ '2' ,   '4' ]}  print ( pd . DataFrame ( my_dict ))    1\n2\n3    1  2  3\n0  1  1  2\n1  3  2  4   1\n2\n3 # Take a DataFrame as input to a DataFrame   my_df   =   pd . DataFrame ( data = [ 4 , 5 , 6 , 7 ],   index = range ( 0 , 4 ),   columns = [ 'A' ])  print ( pd . DataFrame ( my_df ))    1\n2\n3\n4\n5    A\n0  4\n1  5\n2  6\n3  7   1\n2\n3 # Take a Series as input to a DataFrame  my_series   =   pd . Series ({ \"United Kingdom\" : \"London\" ,   \"India\" : \"New Delhi\" ,   \"United States\" : \"Washington\" ,   \"Belgium\" : \"Brussels\" })  print ( pd . DataFrame ( my_series ))    1\n2\n3\n4\n5                          0\nBelgium           Brussels\nIndia            New Delhi\nUnited Kingdom      London\nUnited States   Washington   1\n2 df   =   pd . DataFrame ( np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ]]))  print ( df )    1\n2\n3    0  1  2\n0  1  2  3\n1  4  5  6   1\n2 # header  list ( df . columns . values )    1 [0, 1, 2]   1\n2 # Use the `shape` property  print ( df . shape )    1 (2, 3)   1\n2\n3 # Or use the `len()` function with the `index` property  print ( len ( df . index ))  # length = rows    1 2   1\n2 # exclude the NaN  df [ 0 ] . count ()    1 2",
            "title": "Create a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#fundamental-dataframe-operations",
            "text": "",
            "title": "Fundamental DataFrame Operations"
        },
        {
            "location": "/Pandas+DataFrames/#select-an-index-or-column-from-a-pandas-dataframe",
            "text": "1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' , 'B' , 'C' ])  print ( df )    1\n2\n3\n4    A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9",
            "title": "Select an Index or Column from a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#element",
            "text": "1\n2 # Using `iloc[]`  print ( df . iloc [ 0 ][ 0 ])    1 1   1\n2 # Using `loc[]`  print ( df . loc [ 0 ][ 'A' ])    1 1   1\n2 # Using `at[]`  print ( df . at [ 0 , 'A' ])    1 1   1\n2 # Using `iat[]`  print ( df . iat [ 0 , 0 ])    1 1   1\n2 # Using `get_value(index, column)`  print ( df . get_value ( 0 ,   'A' ))    1 1",
            "title": "Element"
        },
        {
            "location": "/Pandas+DataFrames/#row-column",
            "text": "1\n2 # Use `iloc[]` to select a row  print ( df . iloc [ 0 ])    1\n2\n3\n4 A    1\nB    2\nC    3\nName: 0, dtype: int64   1\n2 # Use `loc[]` to select a column  print ( df . loc [:, 'A' ])    1\n2\n3\n4 0    1\n1    4\n2    7\nName: A, dtype: int64",
            "title": "Row, Column"
        },
        {
            "location": "/Pandas+DataFrames/#add-an-index-row-or-column-to-a-pandas-dataframe",
            "text": "",
            "title": "Add an Index, Row or Column to a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#add-an-index-to-a-dataframe",
            "text": "1\n2 # Print out the DataFrame `df` to check it out  print ( df )    1\n2\n3\n4    A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9   1\n2 # Set 'C' as the index of the DataFrame  df . set_index ( 'C' )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       A \n       B \n     \n     \n       C \n       \n       \n     \n   \n   \n     \n       3 \n       1 \n       2 \n     \n     \n       6 \n       4 \n       5 \n     \n     \n       9 \n       7 \n       8",
            "title": "Add an Index to a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#add-rows-to-a-dataframe",
            "text": "But before\u2026   loc  works on labels of an index. This means with  loc[2] , we look for the values of the DataFrame that have an index labeled 2.  iloc  works on the positions in the index. This means with  iloc[2] , we look for the values of the DataFrame that are at index \u20182\u2019.  ix  is a more complex case: when the index is integer-based, we pass a label to  ix .  ix[2]  then means that we are looking in the DataFrame for values that have an index labeled  2 . This is just like  loc ! However, if the index is not solely integer-based,  ix  will work with positions, just like  iloc .   1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   index =   [ 2 ,   'A' ,   4 ],   columns = [ 48 ,   49 ,   50 ])  print ( df )    1\n2\n3\n4    48  49  50\n2   1   2   3\nA   4   5   6\n4   7   8   9   1\n2 # Pass `2` to `loc`  print ( df . loc [ 2 ])    1\n2\n3\n4 48    1\n49    2\n50    3\nName: 2, dtype: int64   1\n2 # Pass `2` to `iloc`  print ( df . iloc [ 2 ])    1\n2\n3\n4 48    7\n49    8\n50    9\nName: 4, dtype: int64   1\n2 # Pass `2` to `ix`  print ( df . ix [ 2 ])    1\n2\n3\n4\n5 Format Type              text\nData Description         HTML\nReader              read_html\nWriter                to_html\nName: 2, dtype: object   Add a row.  1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   index =   [ 2.5 ,   12.6 ,   4.8 ],   columns = [ 48 ,   49 ,   50 ])  print ( df )    1\n2\n3\n4       48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9   1\n2\n3 # There's no index labeled `2`, so change the index at position `2`  df . ix [ 2 ]   =   [ 60 ,   50 ,   40 ]  print ( df )    1\n2\n3\n4       48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8   60  50  40   1\n2\n3 # This will make an index labeled `2` and ADD the new values  df . loc [ 2 ]   =   [ 11 ,   12 ,   13 ]  print ( df )    1\n2\n3\n4\n5       48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8   60  50  40\n2.0   11  12  13",
            "title": "Add Rows to a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#add-a-column-to-a-dataframe",
            "text": "1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  print ( df )    1\n2\n3\n4    A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9   1\n2\n3\n4\n5 # Use `.index`  df [ 'D' ]   =   df . index  # Print `df`  print ( df )    1\n2\n3\n4    A  B  C  D\n0  1  2  3  0\n1  4  5  6  1\n2  7  8  9  2   Tell the DataFrame that it should take column A as its index.  1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ]]),   columns = [ 1 , 2 , 3 ])  print ( df )    1\n2\n3    1  2  3\n0  1  2  3\n1  4  5  6   1\n2\n3\n4\n5 # Append a column to `df`  df . loc [:,   4 ]   =   pd . Series ([ '5' ,   '6' ],   index = df . index )  # Print out `df` again to see the changes  print ( df )    1\n2\n3    1  2  3  4\n0  1  2  3  5\n1  4  5  6  6",
            "title": "Add a Column to a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#reset-the-index-of-a-dataframe",
            "text": "1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   index =   [ 2.5 ,   12.6 ,   4.8 ],   columns = [ 48 ,   49 ,   50 ])  print ( df )    1\n2\n3\n4       48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9   1\n2 # Use `reset_index()` to reset the values  df . reset_index ( level = 0 ,   drop = True )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       48 \n       49 \n       50 \n     \n   \n   \n     \n       0 \n       1 \n       2 \n       3 \n     \n     \n       1 \n       4 \n       5 \n       6 \n     \n     \n       2 \n       7 \n       8 \n       9",
            "title": "Reset the Index of a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#delete-indices-rows-or-columns-from-a-pandas-data-frame",
            "text": "",
            "title": "Delete Indices, Rows or Columns From a Pandas Data Frame"
        },
        {
            "location": "/Pandas+DataFrames/#delete-an-index-from-a-dataframe",
            "text": "Because DataFrames and Series always have an index.   Reset the index of a DataFrame (go back to the previous section to see how it is done) or  remove the index name, if there is any, by executing del df.index.name,  remove duplicate index values by resetting the index, dropping the duplicates of the index column that has been added to a DataFrame and reinstating that duplicateless column again as the index,  and lastly, remove an index, and with it a row. This is elaborated in one of the next sections.   1\n2\n3\n4 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ],   [ 40 ,   50 ,   60 ],   [ 23 ,   35 ,   37 ]]),  \n                   index =   [ 2.5 ,   12.6 ,   4.8 ,   4.8 ,   2.5 ],  \n                   columns = [ 48 ,   49 ,   50 ])  print ( df )    1\n2\n3\n4\n5\n6       48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9\n4.8   40  50  60\n2.5   23  35  37   1 df . reset_index () . drop_duplicates ( subset = 'index' ,   keep = 'last' ) . set_index ( 'index' )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       48 \n       49 \n       50 \n     \n     \n       index \n       \n       \n       \n     \n   \n   \n     \n       12.6 \n       4 \n       5 \n       6 \n     \n     \n       4.8 \n       40 \n       50 \n       60 \n     \n     \n       2.5 \n       23 \n       35 \n       37 \n     \n      1",
            "title": "Delete an Index from a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#delete-a-column-from-a-dataframe",
            "text": "1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  print ( df )    1\n2\n3\n4    A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9   1\n2\n3 # Drop the column with label 'A'                    df . drop ( 'A' ,   axis = 1 ,   inplace = True )  print ( df )    1\n2\n3\n4    B  C\n0  2  3\n1  5  6\n2  8  9   1\n2\n3 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  df . drop ( 'A' ,   axis = 1 ,   inplace = False )  print ( df )    1\n2\n3\n4    A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9   1\n2\n3 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  # Drop the column at position 1  df . drop ( df . columns [[ 1 ]],   axis = 1 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       A \n       C \n     \n   \n   \n     \n       0 \n       1 \n       3 \n     \n     \n       1 \n       4 \n       6 \n     \n     \n       2 \n       7 \n       9",
            "title": "Delete a Column from a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#remove-a-row-from-a-dataframe",
            "text": "1\n2\n3\n4 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ,   4 ],   [ 4 ,   5 ,   6 ,   5 ],   [ 7 ,   8 ,   9 ,   6 ],   [ 23 ,   50 ,   60 ,   7 ],   [ 23 ,   35 ,   37 ,   23 ]]),  \n                   index =   [ 2.5 ,   12.6 ,   4.8 ,   4.8 ,   2.5 ],  \n                   columns = [ 48 ,   49 ,   50 ,   50 ])  print ( df )    1\n2\n3\n4\n5\n6       48  49  50  50\n2.5    1   2   3   4\n12.6   4   5   6   5\n4.8    7   8   9   6\n4.8   23  50  60   7\n2.5   23  35  37  23   1\n2 # Drop the duplicates in `df`  df . drop_duplicates ([ 48 ],   keep = 'last' )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       48 \n       49 \n       50 \n       50 \n     \n   \n   \n     \n       2.5 \n       1 \n       2 \n       3 \n       4 \n     \n     \n       12.6 \n       4 \n       5 \n       6 \n       5 \n     \n     \n       4.8 \n       7 \n       8 \n       9 \n       6 \n     \n     \n       2.5 \n       23 \n       35 \n       37 \n       23 \n     \n      1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  print ( df )    1\n2\n3\n4    A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9   1\n2 # Drop the index at position 1  print ( df . drop ( df . index [ 1 ]))    1\n2\n3    A  B  C\n0  1  2  3\n2  7  8  9   1 df . reset_index ( level = 0 ,   drop = True )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       A \n       B \n       C \n     \n   \n   \n     \n       0 \n       1 \n       2 \n       3 \n     \n     \n       1 \n       4 \n       5 \n       6 \n     \n     \n       2 \n       7 \n       8 \n       9",
            "title": "Remove a Row from a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#rename-the-index-or-columns-of-a-pandas-dataframe",
            "text": "1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  print ( df )    1\n2\n3\n4    A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # Define the new names of columns  newcols   =   { \n     'A' :   'new_column_1' ,  \n     'B' :   'new_column_2' ,  \n     'C' :   'new_column_3'  }  # Use `rename()` to rename columns  df . rename ( columns = newcols ,   inplace = True )  print ( df )    1\n2\n3\n4    new_column_1  new_column_2  new_column_3\n0             1             2             3\n1             4             5             6\n2             7             8             9   1\n2 # Rename the index  df . rename ( index = { 1 :   'a' })     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       new_column_1 \n       new_column_2 \n       new_column_3 \n     \n   \n   \n     \n       0 \n       1 \n       2 \n       3 \n     \n     \n       a \n       4 \n       5 \n       6 \n     \n     \n       2 \n       7 \n       8 \n       9 \n     \n       1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  # Define the new names of columns  newcols   =   { \n     'A' :   'new_column_1' ,  \n     'B' :   'new_column_2' ,  \n     'C' :   'new_column_3'  }  # Use `rename()` to rename columns  df2   =   df . rename ( columns = newcols ,   inplace = False )  print ( df )  print ( df2 )    1\n2\n3\n4\n5\n6\n7\n8    A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n   new_column_1  new_column_2  new_column_3\n0             1             2             3\n1             4             5             6\n2             7             8             9",
            "title": "Rename the Index or Columns of a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#format-the-data-in-a-pandas-dataframe",
            "text": "",
            "title": "Format The Data in a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#replace-all-occurrences-of-a-string-in-a-dataframe",
            "text": "1\n2 df   =   pd . DataFrame ( data = np . array ([[ 'OK' , 'Perfect' , 'Acceptable' ],   [ 'Awful' , 'Awful' , 'Perfect' ],   [ 'Acceptable' , 'OK' , 'Poor' ]]),   columns = [ 'Student1' , 'Student2' , 'Student3' ])  print ( df )    1\n2\n3\n4      Student1 Student2    Student3\n0          OK  Perfect  Acceptable\n1       Awful    Awful     Perfect\n2  Acceptable       OK        Poor   1\n2 # Replace the strings by numerical values (0-4)  df . replace ([ 'Awful' ,   'Poor' ,   'OK' ,   'Acceptable' ,   'Perfect' ],   [ 0 ,   1 ,   2 ,   3 ,   4 ])      \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Student1 \n       Student2 \n       Student3 \n     \n   \n   \n     \n       0 \n       2 \n       4 \n       3 \n     \n     \n       1 \n       0 \n       0 \n       4 \n     \n     \n       2 \n       3 \n       2 \n       1 \n     \n      1\n2 df   =   pd . DataFrame ( data = np . array ([[ '1 \\n ' , 2 , '3 \\n ' ],   [ '4' , 5   , '6 \\n ' ],   [ '7' , '8 \\n ' , '9' ]]),   columns = [ 0 , 1 , 2 ])  print ( df )    1\n2\n3\n4      0    1    2\n0  1\\n    2  3\\n\n1    4    5  6\\n\n2    7  8\\n    9   1\n2 # Replace strings by others with `regex`  df . replace ({ ' \\n ' :   '<br>' },   regex = True )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       0 \n       1 \n       2 \n     \n   \n   \n     \n       0 \n       1<br> \n       2 \n       3<br> \n     \n     \n       1 \n       4 \n       5 \n       6<br> \n     \n     \n       2 \n       7 \n       8<br> \n       9",
            "title": "Replace All Occurrences of a String in a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#remove-parts-from-strings-in-the-cells-of-a-dataframe",
            "text": "1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 , 2 , '+3b' ],   [ 4 , 5 , '-6B' ],   [ 7 , 8 , '+9A' ]]),   columns = [ 'class' , 'test' , 'result' ])  print ( df )    1\n2\n3\n4    class   test   result  0       1      2     + 3 b  1       4      5     - 6 B  2       7      8     + 9 A    1\n2\n3\n4\n5 # Delete unwanted parts from the strings in the `result` column  df [ 'result' ]   =   df [ 'result' ] . map ( lambda   x :   x . lstrip ( '+-' ) . rstrip ( 'aAbBcC' ))  # Check out the result again  print ( df )    1\n2\n3\n4    class   test   result  0       1      2        3  1       4      5        6  2       7      8        9    Use  map()  on the column  result  to apply the lambda function over each element or element-wise of the column. The function in itself takes the string value and strips the  +  or  -  that\u2019s located on the left, and also strips away any of the six  aAbBcC  on the right.",
            "title": "Remove Parts from Strings in the Cells of a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#split-text-in-a-column-into-multiple-rows-in-a-dataframe",
            "text": "1\n2 df   =   pd . DataFrame ( data = np . array ([[ 34 , 0 , '23:44:55' ],   [ 22 , 0 , '66:77:88' ],   [ 19 , 1 , '43:68:05 56:34:12' ]]),   columns = [ 'Age' , 'PlusOne' , 'Ticket' ])  print ( df )                        1\n2\n3\n4   Age PlusOne             Ticket\n0  34       0           23:44:55\n1  22       0           66:77:88\n2  19       1  43:68:05 56:34:12   1\n2\n3\n4\n5 # Split out the two values in the third row  # Make it a Series  # Stack the values  ticket_series   =   df [ 'Ticket' ] . str . split ( ' ' ) . apply ( pd . Series ,   1 ) . stack ()  print ( ticket_series )    1\n2\n3\n4\n5 0  0    23:44:55\n1  0    66:77:88\n2  0    43:68:05\n   1    56:34:12\ndtype: object   1\n2\n3 # Get rid of the stack:  # Drop the level to line up with the DataFrame  ticket_series . index   =   ticket_series . index . droplevel ( - 1 )    1\n2 # Make a series a dataframe   ticketdf   =   pd . DataFrame ( ticket_series )    1\n2 # Delete the `Ticket` column from a DataFrame  del   df [ 'Ticket' ]    1\n2 # Check out the new `df`  print ( df )    1\n2\n3\n4   Age PlusOne\n0  34       0\n1  22       0\n2  19       1   1 print ( ticketdf )    1\n2\n3\n4\n5           0\n0  23:44:55\n1  66:77:88\n2  43:68:05\n2  56:34:12   1\n2 # Join the ticket DataFrame to `df`  df . join ( ticketdf )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Age \n       PlusOne \n       0 \n     \n   \n   \n     \n       0 \n       34 \n       0 \n       23:44:55 \n     \n     \n       1 \n       22 \n       0 \n       66:77:88 \n     \n     \n       2 \n       19 \n       1 \n       43:68:05 \n     \n     \n       2 \n       19 \n       1 \n       56:34:12 \n     \n      First, inspect the DataFrame at hand. The values in the last row and in the last column are a bit too long. It appears there are two tickets because a guest has taken a plus-one to the concert.  Take the  Ticket  column from the DataFrame  df  and strings on a space. This will make sure that the two tickets will end up in two separate rows in the end. Next, take these four values (the four ticket numbers) and put them into a Series object. That still doesn\u2019t seem quite right. There are  NaN  values in there! Stack the Series to make sure they don\u2019t have any  NaN  values in the resulting Series.  Next, stack the Series.  That is not ideal either. Drop the level to line up with the DataFrame.  Transform a Series to a DataFrame to make sure we can join it back to the initial DataFrame. However, to avoid having any duplicates in the DataFrame, delete the original  Ticket  column.",
            "title": "Split Text in a Column into Multiple Rows in a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#apply-a-function-to-a-pandas-dataframes-columns-or-rows",
            "text": "1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  print ( df )    1\n2\n3\n4    A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9   1\n2\n3\n4\n5 # A lambda function  doubler   =   lambda   x :   x * 2  # Apply the `doubler` function to the `A` DataFrame column  df [ 'A' ] . apply ( doubler )    1\n2\n3\n4 0     2\n1     8\n2    14\nName: A, dtype: int64   1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  df . loc [ 0 ] . apply ( doubler )    1\n2\n3\n4 A    2\nB    4\nC    6\nName: 0, dtype: int64   1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  df . iloc [ 0 ] . apply ( doubler )    1\n2\n3\n4 A    2\nB    4\nC    6\nName: 0, dtype: int64   1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  df [ 'A' ] . apply ( doubler )    1\n2\n3\n4 0     2\n1     8\n2    14\nName: A, dtype: int64   1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  df . applymap ( doubler )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       A \n       B \n       C \n     \n   \n   \n     \n       0 \n       2 \n       4 \n       6 \n     \n     \n       1 \n       8 \n       10 \n       12 \n     \n     \n       2 \n       14 \n       16 \n       18 \n     \n       1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  def   doubler ( x ): \n     if   x   %   2   ==   0 : \n         return   x \n     else : \n         return   x   *   2  # Use `applymap()` to apply `doubler()` to a DataFrame  df . applymap ( doubler )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       A \n       B \n       C \n     \n   \n   \n     \n       0 \n       2 \n       2 \n       6 \n     \n     \n       1 \n       4 \n       10 \n       6 \n     \n     \n       2 \n       14 \n       8 \n       18 \n     \n      1\n2 # Check the DataFrame  print ( df )    1\n2\n3\n4    A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9",
            "title": "Apply a Function to a Pandas DataFrame\u2019s Columns or Rows"
        },
        {
            "location": "/Pandas+DataFrames/#create-an-empty-dataframe",
            "text": "numpy.nan  has type float.  1\n2 df   =   pd . DataFrame ( np . nan ,   index = [ 0 , 1 , 2 , 3 ],   columns = [ 'A' ])  print ( df )    1\n2\n3\n4\n5     A\n0 NaN\n1 NaN\n2 NaN\n3 NaN   Add an attribute.  1\n2 df   =   pd . DataFrame ( index = range ( 0 , 4 ), columns = [ 'A' ],   dtype = 'float' )  print ( df )    1\n2\n3\n4\n5     A\n0 NaN\n1 NaN\n2 NaN\n3 NaN",
            "title": "Create an Empty DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#does-pandas-recognize-dates-when-importing-data",
            "text": "1\n2 df   =   pd . read_csv ( 'date.csv' ,   header = 0 ,   parse_dates = True )  print ( df )    1\n2\n3\n4\n5      unit      date\n0  6.1101  02/08/16\n1  5.5277  08/07/16\n2  8.5186  09/05/16\n3  7.0032  20/03/16   1\n2\n3 # or this option:  df   =   pd . read_csv ( 'date.csv' ,   header = 0 ,   parse_dates = [ 'date' ])  print ( df )    1\n2\n3\n4\n5      unit       date\n0  6.1101 2016-02-08\n1  5.5277 2016-08-07\n2  8.5186 2016-09-05\n3  7.0032 2016-03-20   The second code succeeded.",
            "title": "Does Pandas Recognize Dates when Importing Data?"
        },
        {
            "location": "/Pandas+DataFrames/#when-why-and-how-we-should-reshape-a-dataframe",
            "text": "",
            "title": "When, Why and How we should Reshape a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#pivot-a-dataframe",
            "text": "Values: this argument allows to specify which values of the original DataFrame we want to see in the pivot table.  Columns: whatever is passed to this argument will become a column in the resulting table.  Index: whatever is passed to this argument will become an index in the resulting table.   1\n2\n3\n4\n5 products   =   pd . DataFrame ({ 'category' :   [ 'Cleaning' ,   'Cleaning' ,   'Entertainment' ,   'Entertainment' ,   'Tech' ,   'Tech' ], \n                         'store' :   [ 'Walmart' ,   'Dia' ,   'Walmart' ,   'Fnac' ,   'Dia' , 'Walmart' ], \n                         'price' :[ 11.42 ,   23.50 ,   19.99 ,   15.95 ,   55.75 ,   111.55 ], \n                         'testscore' :   [ 4 ,   3 ,   5 ,   7 ,   5 ,   8 ]})  print ( products )    1\n2\n3\n4\n5\n6\n7         category   price    store  testscore\n0       Cleaning   11.42  Walmart          4\n1       Cleaning   23.50      Dia          3\n2  Entertainment   19.99  Walmart          5\n3  Entertainment   15.95     Fnac          7\n4           Tech   55.75      Dia          5\n5           Tech  111.55  Walmart          8   1\n2\n3\n4\n5 # Use `pivot()` to pivot the DataFrame  pivot_products   =   products . pivot ( index = 'category' ,   columns = 'store' ,   values = 'price' )  # Check out the result  print ( pivot_products )    1\n2\n3\n4\n5 store            Dia   Fnac  Walmart\ncategory                            \nCleaning       23.50    NaN    11.42\nEntertainment    NaN  15.95    19.99\nTech           55.75    NaN   111.55   Without specific values.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 products   =   pd . DataFrame ({ 'category' :   [ 'Cleaning' ,   'Cleaning' ,   'Entertainment' ,   'Entertainment' ,   'Tech' ,   'Tech' ], \n                         'store' :   [ 'Walmart' ,   'Dia' ,   'Walmart' ,   'Fnac' ,   'Dia' , 'Walmart' ], \n                         'price' :[ 11.42 ,   23.50 ,   19.99 ,   15.95 ,   55.75 ,   111.55 ], \n                         'testscore' :   [ 4 ,   3 ,   5 ,   7 ,   5 ,   8 ]})  # Use `pivot()` to pivot the DataFrame  pivot_products   =   products . pivot ( index = 'category' ,   columns = 'store' )  # Check out the results  print ( pivot_products )    1\n2\n3\n4\n5\n6                price                testscore             \nstore            Dia   Fnac Walmart       Dia Fnac Walmart\ncategory                                                  \nCleaning       23.50    NaN   11.42       3.0  NaN     4.0\nEntertainment    NaN  15.95   19.99       NaN  7.0     5.0\nTech           55.75    NaN  111.55       5.0  NaN     8.0   pivot_table()  can add a function:  mean .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # The DataFrame  products   =   pd . DataFrame ({ 'category' :   [ 'Cleaning' ,   'Cleaning' ,   'Entertainment' ,   'Entertainment' ,   'Tech' ,   'Tech' ], \n                         'store' :   [ 'Walmart' ,   'Dia' ,   'Walmart' ,   'Fnac' ,   'Dia' , 'Walmart' ], \n                         'price' :[ 11.42 ,   23.50 ,   19.99 ,   15.95 ,   19.99 ,   111.55 ], \n                         'testscore' :   [ 4 ,   3 ,   5 ,   7 ,   5 ,   8 ]})  # Pivot the `products` DataFrame with `pivot_table()`  pivot_products   =   products . pivot_table ( index = 'category' ,   columns = 'store' ,   values = 'price' ,   aggfunc = 'mean' )  # Check out the results  print ( pivot_products )    1\n2\n3\n4\n5 store            Dia   Fnac  Walmart\ncategory                            \nCleaning       23.50    NaN    11.42\nEntertainment    NaN  15.95    19.99\nTech           19.99    NaN   111.55",
            "title": "Pivot a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#use-stack-and-unstack-to-reshape-a-pandas-dataframe",
            "text": "When we stack a DataFrame, we make it taller. Move the innermost column index to become the innermost row index.  Much like  stack() , use  unstack()  to move the innermost row index to become the innermost column index.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 from   collections   import   OrderedDict  from   pandas   import   DataFrame  import   pandas   as   pd  import   numpy   as   np  table   =   OrderedDict (( \n     ( \"Item\" ,   [ 'Item0' ,   'Item0' ,   'Item1' ,   'Item1' ]), \n     ( 'CType' ,[ 'Gold' ,   'Bronze' ,   'Gold' ,   'Silver' ]), \n     ( 'USD' ,    [ '1$' ,   '2$' ,   '3$' ,   '4$' ]), \n     ( 'EU' ,     [ '1\u20ac' ,   '2\u20ac' ,   '3\u20ac' ,   '4\u20ac' ])  ))  df   =   DataFrame ( table )  print ( df )    1\n2\n3\n4\n5     Item   CType USD  EU\n0  Item0    Gold  1$  1\u20ac\n1  Item0  Bronze  2$  2\u20ac\n2  Item1    Gold  3$  3\u20ac\n3  Item1  Silver  4$  4\u20ac   1\n2 # Original DataFrame: Access the USD cost of Item0 for Gold customers  print ( df [( df . Item == 'Item0' )   &   ( df . CType == 'Gold' )] . USD . values )    1 ['1$']   1\n2\n3 # Column pivot  p   =   df . pivot ( index = 'Item' ,   columns = 'CType' )  print ( p )    1\n2\n3\n4\n5          USD                 EU            \nCType Bronze Gold Silver Bronze Gold Silver\nItem                                       \nItem0     2$   1$   None     2\u20ac   1\u20ac   None\nItem1   None   3$     4$   None   3\u20ac     4\u20ac   1\n2 # Pivoted DataFrame: p.USD gives a \"sub-DataFrame\" with the USD values only  print ( p . USD [ p . USD . index == 'Item0' ])    1\n2\n3 CType Bronze Gold Silver\nItem                    \nItem0     2$   1$   None   1\n2 # more precise  print ( p . USD [ p . USD . index == 'Item0' ] . Gold . values )    1 ['1$']   1\n2\n3 # Pivoting By Multiple Columns  p   =   df . pivot ( index = 'Item' ,   columns = 'CType' )  print ( p )    1\n2\n3\n4\n5          USD                 EU            \nCType Bronze Gold Silver Bronze Gold Silver\nItem                                       \nItem0     2$   1$   None     2\u20ac   1\u20ac   None\nItem1   None   3$     4$   None   3\u20ac     4\u20ac   1\n2 # Pivoted DataFrame: p.USD gives a \"sub-DataFrame\" with the USD values only  print ( p . USD [ p . USD . index == 'Item0' ])    1\n2\n3 CType Bronze Gold Silver\nItem                    \nItem0     2$   1$   None   1\n2 # more precise  print ( p . USD [ p . USD . index == 'Item0' ] . Gold . values )    1 ['1$']   1\n2\n3 # Stack/Unstack  s   =   df . stack ()  print ( s )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 0  Item      Item0\n   CType      Gold\n   USD          1$\n   EU           1\u20ac\n1  Item      Item0\n   CType    Bronze\n   USD          2$\n   EU           2\u20ac\n2  Item      Item1\n   CType      Gold\n   USD          3$\n   EU           3\u20ac\n3  Item      Item1\n   CType    Silver\n   USD          4$\n   EU           4\u20ac\ndtype: object   1\n2 u   =   s . unstack ()  print ( u )    1\n2\n3\n4\n5     Item   CType USD  EU\n0  Item0    Gold  1$  1\u20ac\n1  Item0  Bronze  2$  2\u20ac\n2  Item1    Gold  3$  3\u20ac\n3  Item1  Silver  4$  4\u20ac",
            "title": "Use stack() and unstack() to Reshape a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#reshape-a-dataframe-with-melt",
            "text": "When we have a data that has one or more columns that are identifier variables, while all other columns are considered measured variables.  1\n2\n3\n4\n5\n6 # The `people` DataFrame  people   =   pd . DataFrame ({ 'FirstName'   :   [ 'John' ,   'Jane' ], \n                        'LastName'   :   [ 'Doe' ,   'Austen' ], \n                        'BloodType'   :   [ 'A-' ,   'B+' ], \n                        'Weight'   :   [ 90 ,   64 ]})  print ( people )    1\n2\n3   BloodType FirstName LastName  Weight\n0        A-      John      Doe      90\n1        B+      Jane   Austen      64   1\n2 # Use `melt()` on the `people` DataFrame  print ( pd . melt ( people ,   id_vars = [ 'FirstName' ,   'LastName' ],   var_name = 'measurements' ))    1\n2\n3\n4\n5   FirstName LastName measurements value\n0      John      Doe    BloodType    A-\n1      Jane   Austen    BloodType    B+\n2      John      Doe       Weight    90\n3      Jane   Austen       Weight    64",
            "title": "Reshape a DataFrame with melt()"
        },
        {
            "location": "/Pandas+DataFrames/#iterate-over-a-pandas-dataframe",
            "text": "1\n2 df   =   pd . DataFrame ( data = np . array ([[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]),   columns = [ 'A' ,   'B' ,   'C' ])  print ( df )    1\n2\n3\n4    A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9   1\n2 for   index ,   row   in   df . iterrows ()   : \n     print ( row [ 'A' ],   row [ 'B' ])    1\n2\n3 1 2\n4 5\n7 8",
            "title": "Iterate over a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#write-a-pandas-dataframe-to-a-file",
            "text": "",
            "title": "Write a Pandas DataFrame to a File"
        },
        {
            "location": "/Pandas+DataFrames/#output-a-dataframe-to-csv",
            "text": "1 df . to_csv ( 'myDataFrame.csv' )    1 df . to_csv ( 'myDataFrame2.csv' ,   sep = ' \\t ' )    1 df . to_csv ( 'myDataFrame3.csv' ,   sep = ' \\t ' ,   encoding = 'utf-8' )",
            "title": "Output a DataFrame to CSV"
        },
        {
            "location": "/Pandas+DataFrames/#write-a-dataframe-to-excel",
            "text": "1\n2\n3\n4\n5 writer   =   pd . ExcelWriter ( 'myDataFrame.xlsx' )  df . to_excel ( writer ,   'DataFrame' )  writer . save ()  # startcol=  # startrow=    1\n2\n3\n4 import   xlrd  xlsx   =   pd . ExcelFile ( 'filetype.xlsx' )  xlsx . sheet_names    1 ['a']   1\n2 df   =   pd . read_excel ( xlsx ,   'a' )  print ( df )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    Format Type      Data Description          Reader        Writer\n0         text                   CSV        read_csv        to_csv\n1         text                  JSON       read_json       to_json\n2         text                  HTML       read_html       to_html\n3         text       Local clipboard  read_clipboard  to_clipboard\n4       binary              MS Excel      read_excel      to_excel\n5       binary           HDF5 Format        read_hdf        to_hdf\n6       binary        Feather Format    read_feather    to_feather\n7       binary               Msgpack    read_msgpack    to_msgpack\n8       binary                 Stata      read_stata      to_stata\n9       binary                   SAS        read_sas             \u00a0\n10      binary  Python Pickle Format     read_pickle     to_pickle\n11         SQL                   SQL        read_sql        to_sql\n12         SQL      Google Big Query        read_gbq        to_gbq",
            "title": "Write a DataFrame to Excel"
        },
        {
            "location": "/Write Idiomatic Pandas Code/",
            "text": "CONTENT\n\n\nLoad and Explore the Data\n\n\nThe Data\n\n\nQuickly Inspecting the Data\n\n\n\n\n\n\nIndex and Pull Values\n\n\nMethod Chaining\n\n\nClean the Data\n\n\nConcatenate into a single DataFrame\n\n\n\n\n\n\nMemory Optimization\n\n\nCast Object Types\n\n\n\n\n\n\nReplace, Rank, Subset, Groupby\n\n\nReplace\n\n\nRank, Subset, Groupby\n\n\n\n\n\n\nVisualization\n\n\nMatplotlib\n\n\nRemove values\n\n\nSeaborn\n\n\nFilter rows\n\n\nCorrelation\n\n\n\n\n\n\nTo go beyond\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nLoad and Explore the Data\n\u00b6\n\n\nThe Data\n\u00b6\n\n\nThe datasets are downloadable from \nKaggle\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n%\npylab\n \ninline\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Import Times Higher Education World University Rankings data\n\n\n# https://www.timeshighereducation.com/world-university-rankings\n\n\ntimes_df\n \n=\n \npd\n.\nread_csv\n(\n'timesData.csv'\n,\n \nthousands\n=\n\",\"\n)\n\n\n\n# Import Academic Ranking of World Universities data\n\n\n# http://www.shanghairanking.com/\n\n\nshanghai_df\n \n=\n \npd\n.\nread_csv\n(\n'shanghaiData.csv'\n)\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\nQuickly Inspecting the Data\n\u00b6\n\n\n1\n2\n# Return the first rows of `times_df`\n\n\ntimes_df\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nworld_rank\n\n      \nuniversity_name\n\n      \ncountry\n\n      \nteaching\n\n      \ninternational\n\n      \nresearch\n\n      \ncitations\n\n      \nincome\n\n      \ntotal_score\n\n      \nnum_students\n\n      \nstudent_staff_ratio\n\n      \ninternational_students\n\n      \nfemale_male_ratio\n\n      \nyear\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \nHarvard University\n\n      \nUnited States of America\n\n      \n99.7\n\n      \n72.4\n\n      \n98.7\n\n      \n98.8\n\n      \n34.5\n\n      \n96.1\n\n      \n20152.0\n\n      \n8.9\n\n      \n25%\n\n      \nNaN\n\n      \n2011\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \nCalifornia Institute of Technology\n\n      \nUnited States of America\n\n      \n97.7\n\n      \n54.6\n\n      \n98.0\n\n      \n99.9\n\n      \n83.7\n\n      \n96.0\n\n      \n2243.0\n\n      \n6.9\n\n      \n27%\n\n      \n33 : 67\n\n      \n2011\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nMassachusetts Institute of Technology\n\n      \nUnited States of America\n\n      \n97.8\n\n      \n82.3\n\n      \n91.4\n\n      \n99.9\n\n      \n87.5\n\n      \n95.6\n\n      \n11074.0\n\n      \n9.0\n\n      \n33%\n\n      \n37 : 63\n\n      \n2011\n\n    \n\n    \n\n      \n3\n\n      \n4\n\n      \nStanford University\n\n      \nUnited States of America\n\n      \n98.3\n\n      \n29.5\n\n      \n98.1\n\n      \n99.2\n\n      \n64.3\n\n      \n94.3\n\n      \n15596.0\n\n      \n7.8\n\n      \n22%\n\n      \n42 : 58\n\n      \n2011\n\n    \n\n    \n\n      \n4\n\n      \n5\n\n      \nPrinceton University\n\n      \nUnited States of America\n\n      \n90.9\n\n      \n70.3\n\n      \n95.4\n\n      \n99.9\n\n      \n-\n\n      \n94.2\n\n      \n7929.0\n\n      \n8.4\n\n      \n27%\n\n      \n45 : 55\n\n      \n2011\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n# Describe `times_df`\n\n\ntimes_df\n.\ndescribe\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nteaching\n\n      \nresearch\n\n      \ncitations\n\n      \nnum_students\n\n      \nstudent_staff_ratio\n\n      \nyear\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n2603.000000\n\n      \n2603.000000\n\n      \n2603.000000\n\n      \n2544.000000\n\n      \n2544.000000\n\n      \n2603.000000\n\n    \n\n    \n\n      \nmean\n\n      \n37.801498\n\n      \n35.910257\n\n      \n60.921629\n\n      \n23873.758648\n\n      \n18.445283\n\n      \n2014.075682\n\n    \n\n    \n\n      \nstd\n\n      \n17.604218\n\n      \n21.254805\n\n      \n23.073219\n\n      \n17675.946877\n\n      \n11.458698\n\n      \n1.685733\n\n    \n\n    \n\n      \nmin\n\n      \n9.900000\n\n      \n2.900000\n\n      \n1.200000\n\n      \n462.000000\n\n      \n0.600000\n\n      \n2011.000000\n\n    \n\n    \n\n      \n25%\n\n      \n24.700000\n\n      \n19.600000\n\n      \n45.500000\n\n      \n12637.750000\n\n      \n11.975000\n\n      \n2013.000000\n\n    \n\n    \n\n      \n50%\n\n      \n33.900000\n\n      \n30.500000\n\n      \n62.500000\n\n      \n20851.000000\n\n      \n16.100000\n\n      \n2014.000000\n\n    \n\n    \n\n      \n75%\n\n      \n46.400000\n\n      \n47.250000\n\n      \n79.050000\n\n      \n29991.000000\n\n      \n21.500000\n\n      \n2016.000000\n\n    \n\n    \n\n      \nmax\n\n      \n99.700000\n\n      \n99.400000\n\n      \n100.000000\n\n      \n379231.000000\n\n      \n162.600000\n\n      \n2016.000000\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n# Return the first rows of `shanghai_df`\n\n\nshanghai_df\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nworld_rank\n\n      \nuniversity_name\n\n      \nnational_rank\n\n      \ntotal_score\n\n      \nalumni\n\n      \naward\n\n      \nhici\n\n      \nns\n\n      \npub\n\n      \npcp\n\n      \nyear\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \nHarvard University\n\n      \n1\n\n      \n100.0\n\n      \n100.0\n\n      \n100.0\n\n      \n100.0\n\n      \n100.0\n\n      \n100.0\n\n      \n72.4\n\n      \n2005\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \nUniversity of Cambridge\n\n      \n1\n\n      \n73.6\n\n      \n99.8\n\n      \n93.4\n\n      \n53.3\n\n      \n56.6\n\n      \n70.9\n\n      \n66.9\n\n      \n2005\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nStanford University\n\n      \n2\n\n      \n73.4\n\n      \n41.1\n\n      \n72.2\n\n      \n88.5\n\n      \n70.9\n\n      \n72.3\n\n      \n65.0\n\n      \n2005\n\n    \n\n    \n\n      \n3\n\n      \n4\n\n      \nUniversity of California, Berkeley\n\n      \n3\n\n      \n72.8\n\n      \n71.8\n\n      \n76.0\n\n      \n69.4\n\n      \n73.9\n\n      \n72.2\n\n      \n52.7\n\n      \n2005\n\n    \n\n    \n\n      \n4\n\n      \n5\n\n      \nMassachusetts Institute of Technology (MIT)\n\n      \n4\n\n      \n70.1\n\n      \n74.0\n\n      \n80.6\n\n      \n66.7\n\n      \n65.8\n\n      \n64.3\n\n      \n53.0\n\n      \n2005\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n# Describe `shanghai_df`\n\n\nshanghai_df\n.\ndescribe\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ntotal_score\n\n      \nalumni\n\n      \naward\n\n      \nhici\n\n      \nns\n\n      \npub\n\n      \npcp\n\n      \nyear\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n1101.000000\n\n      \n4896.000000\n\n      \n4895.00000\n\n      \n4895.000000\n\n      \n4875.000000\n\n      \n4895.000000\n\n      \n4895.000000\n\n      \n4897.000000\n\n    \n\n    \n\n      \nmean\n\n      \n36.383470\n\n      \n9.161724\n\n      \n7.69191\n\n      \n16.221491\n\n      \n16.078503\n\n      \n38.254648\n\n      \n21.242329\n\n      \n2009.658566\n\n    \n\n    \n\n      \nstd\n\n      \n13.557186\n\n      \n14.140636\n\n      \n15.49411\n\n      \n14.382710\n\n      \n12.511529\n\n      \n13.050809\n\n      \n9.254351\n\n      \n3.197576\n\n    \n\n    \n\n      \nmin\n\n      \n23.500000\n\n      \n0.000000\n\n      \n0.00000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n7.300000\n\n      \n8.300000\n\n      \n2005.000000\n\n    \n\n    \n\n      \n25%\n\n      \n27.400000\n\n      \n0.000000\n\n      \n0.00000\n\n      \n7.300000\n\n      \n8.000000\n\n      \n28.900000\n\n      \n15.600000\n\n      \n2007.000000\n\n    \n\n    \n\n      \n50%\n\n      \n31.300000\n\n      \n0.000000\n\n      \n0.00000\n\n      \n12.600000\n\n      \n12.800000\n\n      \n36.000000\n\n      \n19.000000\n\n      \n2009.000000\n\n    \n\n    \n\n      \n75%\n\n      \n41.800000\n\n      \n15.600000\n\n      \n13.40000\n\n      \n21.700000\n\n      \n19.800000\n\n      \n45.300000\n\n      \n24.500000\n\n      \n2012.000000\n\n    \n\n    \n\n      \nmax\n\n      \n100.000000\n\n      \n100.000000\n\n      \n100.00000\n\n      \n100.000000\n\n      \n100.000000\n\n      \n100.000000\n\n      \n100.000000\n\n      \n2015.000000\n\n    \n\n  \n\n\n\n\n\n\n\nIndex and Pull Values\n\u00b6\n\n\n[]\n for row numbers or column names, \nloc[]\n, \niloc[]\n, \nquery\n.\n\n\n1\n2\n# Retrieve the total score of the first row\n\n\nprint\n(\ntimes_df\n.\nloc\n[\n0\n,\n \n'total_score'\n])\n\n\n\n\n\n\n\n1\n96.1\n\n\n\n\n\n\n1\n2\n# Retrieve rows 0 and 1\n\n\nprint\n(\ntimes_df\n[\n0\n:\n2\n])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n  world_rank                     university_name                   country  \\\n0          1                  Harvard University  United States of America   \n1          2  California Institute of Technology  United States of America\n\n   teaching international  research  citations income total_score  \\\n0      99.7          72.4      98.7       98.8   34.5        96.1   \n1      97.7          54.6      98.0       99.9   83.7        96.0\n\n   num_students  student_staff_ratio international_students female_male_ratio  \\\n0       20152.0                  8.9                    25%               NaN   \n1        2243.0                  6.9                    27%           33 : 67\n\n   year  \n0  2011  \n1  2011\n\n\n\n\n\n\n1\n2\n# Retrieve the values at columns and rows 1-3\n\n\nprint\n(\ntimes_df\n.\niloc\n[\n1\n:\n4\n,\n1\n:\n4\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\n                         university_name                   country  teaching\n1     California Institute of Technology  United States of America      97.7\n2  Massachusetts Institute of Technology  United States of America      97.8\n3                    Stanford University  United States of America      98.3\n\n\n\n\n\n\n1\n2\n# Retrieve the column `total_score` \n\n\nprint\n(\ntimes_df\n[\n'total_score'\n])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n0       96.1\n1       96.0\n2       95.6\n3       94.3\n4       94.2\n5       91.2\n6       91.2\n7       91.1\n8       90.6\n9       89.5\n10      87.7\n11      86.9\n12      86.4\n13      83.9\n14      83.4\n15      83.4\n16      82.0\n17      81.0\n18      79.5\n19      79.3\n20      79.2\n21      78.4\n22      78.0\n23      76.5\n24      75.9\n25      75.6\n26      75.3\n27      75.1\n28      75.0\n29      73.8\n        ... \n2573       -\n2574       -\n2575       -\n2576       -\n2577       -\n2578       -\n2579       -\n2580       -\n2581       -\n2582       -\n2583       -\n2584       -\n2585       -\n2586       -\n2587       -\n2588       -\n2589       -\n2590       -\n2591       -\n2592       -\n2593       -\n2594       -\n2595       -\n2596       -\n2597       -\n2598       -\n2599       -\n2600       -\n2601       -\n2602       -\nName: total_score, Length: 2603, dtype: object\n\n\n\n\n\n\n1\n2\n# Are the last entries after 2006?\n\n\nprint\n(\nshanghai_df\n.\nloc\n[:\n-\n10\n,\n \n'year'\n]\n \n>\n \n2006\n)\n\n\n\n\n\n\n\n1\nSeries([], Name: year, dtype: bool)\n\n\n\n\n\n\n1\n2\n# Was the alumni count higher than 90 for the first ten universities?\n\n\nprint\n(\nshanghai_df\n.\nloc\n[\n0\n:\n11\n,\n \n'alumni'\n]\n \n>\n \n90\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n0      True\n1      True\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\nName: alumni, dtype: bool\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Query `shanghai_df` for universities with total score between 40 and 50\n\n\naverage_schools\n \n=\n \nshanghai_df\n.\nquery\n(\n'total_score > 0 and total_score < 50'\n)\n\n\n\n# Print the result\n\n\nprint\n(\naverage_schools\n)\n\n\n\n\n\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n     world_rank                                    university_name  \\\n15           16                  University of Wisconsin - Madison   \n16           17                           University of Washington   \n17           18            University of California, San Francisco   \n18           19                       The Johns Hopkins University   \n19           20                            The University of Tokyo   \n20           21                 University of Michigan - Ann Arbor   \n21           22                                   Kyoto University   \n22           23  The Imperial College of Science, Technology an...   \n23           24                              University of Toronto   \n24           25         University of Illinois at Urbana-Champaign   \n25           26                          University College London   \n26           27       Swiss Federal Institute of Technology Zurich   \n27           28                 Washington University in St. Louis   \n28           29                                New York University   \n29           30                             Rockefeller University   \n30           31                            Northwestern University   \n31           32                                    Duke University   \n32           32               University of Minnesota, Twin Cities   \n33           34            University of California, Santa Barbara   \n34           35                  University of Colorado at Boulder   \n35           36                  The University of Texas at Austin   \n36           37                     University of British Columbia   \n37           38  The University of Texas Southwestern Medical C...   \n38           39    Pennsylvania State University - University Park   \n39           39                              Vanderbilt University   \n40           41                    University of California, Davis   \n41           41                                 Utrecht University   \n42           43  Rutgers, The State University of New Jersey - ...   \n43           43                           University of Pittsburgh   \n44           45                               Karolinska Institute   \n...         ...                                                ...   \n4467         71                                   Ghent University   \n4468         72                   Ecole Normale Superieure - Paris   \n4469         73                                  Aarhus University   \n4470         73                                  Boston University   \n4471         75                                   Brown University   \n4472         75                            University of Groningen   \n4473         77                                  Nagoya University   \n4474         77                               Stockholm University   \n4475         77            Technion-Israel Institute of Technology   \n4476         77                 The Australian National University   \n4477         77                       The University of Queensland   \n4478         82                                  Leiden University   \n4479         83                              University of Florida   \n4480         84                                    Rice University   \n4481         85                                   Osaka University   \n4482         86                            Moscow State University   \n4483         87                The University of Western Australia   \n4484         87                                University of Basel   \n4485         87                           University of Strasbourg   \n4486         90                                          KU Leuven   \n4487         90                              University of Arizona   \n4488         92                              University of Warwick   \n4489         93                           Arizona State University   \n4490         93               University of California, Santa Cruz   \n4491         93                                 University of Utah   \n4492         96                                McMaster University   \n4493         97                                 University of Bonn   \n4494         98                            VU University Amsterdam   \n4495         99                          Michigan State University   \n4496        100                               Texas A&M University\n\n     national_rank  total_score  alumni  award  hici    ns   pub   pcp  year  \n15              14         49.2    43.0   36.3  52.1  46.3  68.7  29.0  2005  \n16              15         48.4    28.8   32.4  53.9  47.1  73.8  27.2  2005  \n17              16         47.8     0.0   37.6  55.6  57.9  58.8  45.2  2005  \n18              17         46.9    51.4   28.3  41.6  52.2  67.7  24.9  2005  \n19               1         46.7    36.0   14.4  38.5  52.1  86.5  34.7  2005  \n20              18         44.9    43.0    0.0  61.9  43.0  76.5  30.9  2005  \n21               2         43.8    39.7   34.1  34.2  37.0  72.3  31.1  2005  \n22               3         43.7    20.8   38.1  40.8  38.2  64.6  40.3  2005  \n23               1         43.1    28.1   19.7  39.3  38.9  76.7  41.9  2005  \n24              19         42.8    41.6   37.4  44.4  34.1  58.0  26.0  2005  \n25               4         42.6    30.7   32.9  37.7  41.5  60.5  38.8  2005  \n26               1         41.7    40.2   37.0  35.1  41.1  43.4  52.4  2005  \n27              20         40.7    25.1   26.6  38.5  46.5  53.9  39.9  2005  \n28              21         38.8    33.8   25.0  43.0  35.3  55.4  26.3  2005  \n29              22         38.2    22.6   59.8  28.3  44.1  24.0  35.9  2005  \n30              23         37.9    21.7   19.3  44.4  33.8  57.6  36.2  2005  \n31              24         37.7    20.8    0.0  47.1  45.3  60.8  38.9  2005  \n32              24         37.7    36.0    0.0  49.7  35.2  68.4  23.8  2005  \n33              26         36.9     0.0   36.0  42.3  39.0  44.1  35.8  2005  \n34              27         36.3    16.6   29.8  40.8  36.6  46.3  29.5  2005  \n35              28         35.5    21.7   17.1  49.1  30.0  54.8  21.7  2005  \n36               2         35.4    20.8   19.3  32.4  32.5  60.4  33.9  2005  \n37              29         34.8    24.3   33.9  31.4  38.2  37.9  31.0  2005  \n38              30         33.4    14.0    0.0  45.8  37.9  59.9  24.0  2005  \n39              30         33.4    12.5   30.2  34.2  24.5  49.2  35.6  2005  \n40              32         32.9     0.0    0.0  46.5  34.5  64.0  29.8  2005  \n41               1         32.9    30.7   21.4  27.2  27.3  55.7  25.9  2005  \n42              33         32.3    15.4   20.4  36.9  32.9  47.1  24.1  2005  \n43              33         32.3    25.1    0.0  40.1  25.9  64.3  28.2  2005  \n44               1         32.1    30.7   27.8  33.3  19.7  47.3  25.1  2005  \n...            ...          ...     ...    ...   ...   ...   ...   ...   ...  \n4467             1         27.8     5.1   13.3  26.9  18.3  57.5  34.5  2015  \n4468             3         27.6    48.9   28.0   6.2  19.5  26.4  60.5  2015  \n4469             2         27.3    11.5   22.1  12.3  25.8  51.8  31.0  2015  \n4470            42         27.3    11.5   11.5  29.1  26.3  49.5  21.8  2015  \n4471            43         27.0    14.5   13.3  26.2  25.1  43.6  32.8  2015  \n4472             2         27.0     0.0   18.8  23.0  21.0  52.6  32.7  2015  \n4473             3         26.7    29.0   25.3  16.8  17.7  44.3  23.1  2015  \n4474             3         26.7    24.1   27.4  18.1  19.4  40.4  25.6  2015  \n4475             2         26.7    23.5   37.6  15.2  18.3  33.3  28.2  2015  \n4476             2         26.7    13.6   19.2  24.8  20.1  45.1  29.1  2015  \n4477             2         26.7    12.6    0.0  22.0  24.0  63.2  29.3  2015  \n4478             3         26.5    17.8    9.4  25.7  22.0  46.9  32.9  2015  \n4479            44         26.2    17.0    0.0  30.9  21.0  58.7  17.3  2015  \n4480            45         26.0    16.2   21.7  28.1  22.8  29.2  34.3  2015  \n4481             4         25.7     8.9    0.0  31.6  26.7  51.7  21.7  2015  \n4482             1         25.3    41.4   33.0   0.0   7.7  46.4  31.3  2015  \n4483             4         24.9    13.6   14.1  24.1  14.5  47.5  28.9  2015  \n4484             4         24.9    19.2   16.3  17.4  21.4  39.2  35.0  2015  \n4485             4         24.9    25.1   28.8  15.9  19.0  34.6  21.7  2015  \n4486             2         24.7     0.0    0.0  30.1  18.6  56.6  30.4  2015  \n4487            46         24.7    14.5    0.0  27.2  27.5  48.4  20.3  2015  \n4488             9         24.6     0.0   29.8  23.7  14.0  39.3  26.8  2015  \n4489            47         24.5     0.0   20.0  22.2  25.5  42.6  19.1  2015  \n4490            47         24.5     0.0    0.0  37.9  33.9  29.0  37.6  2015  \n4491            47         24.5     0.0   11.5  26.5  25.5  46.7  18.7  2015  \n4492             4         24.4    12.6   18.8  23.2  15.1  44.5  22.5  2015  \n4493             4         24.3    15.4   19.8  17.4  21.1  39.8  25.9  2015  \n4494             4         24.2     0.0    0.0  27.8  18.0  55.5  33.3  2015  \n4495            50         24.0     8.9    0.0  30.7  21.8  50.6  18.9  2015  \n4496            51         23.9     0.0    0.0  34.3  22.7  49.5  20.9  2015\n\n[948 rows x 11 columns]\n\n\n\n\n\n\n1\nshanghai_df\n.\nquery\n(\n\"national_rank == 1 and world_rank == 1\"\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nworld_rank\n\n      \nuniversity_name\n\n      \nnational_rank\n\n      \ntotal_score\n\n      \nalumni\n\n      \naward\n\n      \nhici\n\n      \nns\n\n      \npub\n\n      \npcp\n\n      \nyear\n\n    \n\n  \n\n  \n\n  \n\n\n\n\n\n\n\n1\nshanghai_df\n.\nquery\n(\n\"alumni < 20\"\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nworld_rank\n\n      \nuniversity_name\n\n      \nnational_rank\n\n      \ntotal_score\n\n      \nalumni\n\n      \naward\n\n      \nhici\n\n      \nns\n\n      \npub\n\n      \npcp\n\n      \nyear\n\n    \n\n  \n\n  \n\n    \n\n      \n12\n\n      \n13\n\n      \nUniversity of California, San Diego\n\n      \n11\n\n      \n51.0\n\n      \n17.7\n\n      \n34.7\n\n      \n59.8\n\n      \n56.5\n\n      \n64.5\n\n      \n46.6\n\n      \n2005\n\n    \n\n    \n\n      \n17\n\n      \n18\n\n      \nUniversity of California, San Francisco\n\n      \n16\n\n      \n47.8\n\n      \n0.0\n\n      \n37.6\n\n      \n55.6\n\n      \n57.9\n\n      \n58.8\n\n      \n45.2\n\n      \n2005\n\n    \n\n    \n\n      \n33\n\n      \n34\n\n      \nUniversity of California, Santa Barbara\n\n      \n26\n\n      \n36.9\n\n      \n0.0\n\n      \n36.0\n\n      \n42.3\n\n      \n39.0\n\n      \n44.1\n\n      \n35.8\n\n      \n2005\n\n    \n\n    \n\n      \n34\n\n      \n35\n\n      \nUniversity of Colorado at Boulder\n\n      \n27\n\n      \n36.3\n\n      \n16.6\n\n      \n29.8\n\n      \n40.8\n\n      \n36.6\n\n      \n46.3\n\n      \n29.5\n\n      \n2005\n\n    \n\n    \n\n      \n38\n\n      \n39\n\n      \nPennsylvania State University - University Park\n\n      \n30\n\n      \n33.4\n\n      \n14.0\n\n      \n0.0\n\n      \n45.8\n\n      \n37.9\n\n      \n59.9\n\n      \n24.0\n\n      \n2005\n\n    \n\n    \n\n      \n39\n\n      \n39\n\n      \nVanderbilt University\n\n      \n30\n\n      \n33.4\n\n      \n12.5\n\n      \n30.2\n\n      \n34.2\n\n      \n24.5\n\n      \n49.2\n\n      \n35.6\n\n      \n2005\n\n    \n\n    \n\n      \n40\n\n      \n41\n\n      \nUniversity of California, Davis\n\n      \n32\n\n      \n32.9\n\n      \n0.0\n\n      \n0.0\n\n      \n46.5\n\n      \n34.5\n\n      \n64.0\n\n      \n29.8\n\n      \n2005\n\n    \n\n    \n\n      \n42\n\n      \n43\n\n      \nRutgers, The State University of New Jersey - ...\n\n      \n33\n\n      \n32.3\n\n      \n15.4\n\n      \n20.4\n\n      \n36.9\n\n      \n32.9\n\n      \n47.1\n\n      \n24.1\n\n      \n2005\n\n    \n\n    \n\n      \n47\n\n      \n47\n\n      \nUniversity of California, Irvine\n\n      \n35\n\n      \n31.8\n\n      \n0.0\n\n      \n30.0\n\n      \n32.4\n\n      \n28.5\n\n      \n48.2\n\n      \n31.1\n\n      \n2005\n\n    \n\n    \n\n      \n49\n\n      \n50\n\n      \nUniversity of Southern California\n\n      \n37\n\n      \n31.7\n\n      \n0.0\n\n      \n27.3\n\n      \n37.7\n\n      \n23.6\n\n      \n52.8\n\n      \n25.8\n\n      \n2005\n\n    \n\n    \n\n      \n54\n\n      \n55\n\n      \nUniversity of North Carolina at Chapel Hill\n\n      \n39\n\n      \n30.3\n\n      \n12.5\n\n      \n0.0\n\n      \n35.1\n\n      \n32.8\n\n      \n59.5\n\n      \n27.3\n\n      \n2005\n\n    \n\n    \n\n      \n55\n\n      \n56\n\n      \nThe Australian National University\n\n      \n1\n\n      \n30.2\n\n      \n17.7\n\n      \n12.9\n\n      \n36.9\n\n      \n29.0\n\n      \n45.1\n\n      \n27.8\n\n      \n2005\n\n    \n\n    \n\n      \n57\n\n      \n57\n\n      \nUniversity of Florida\n\n      \n40\n\n      \n30.0\n\n      \n15.4\n\n      \n0.0\n\n      \n35.1\n\n      \n25.0\n\n      \n65.2\n\n      \n25.8\n\n      \n2005\n\n    \n\n    \n\n      \n58\n\n      \n57\n\n      \nUniversity of Zurich\n\n      \n2\n\n      \n30.0\n\n      \n12.5\n\n      \n27.3\n\n      \n19.2\n\n      \n30.3\n\n      \n47.2\n\n      \n30.6\n\n      \n2005\n\n    \n\n    \n\n      \n61\n\n      \n62\n\n      \nOsaka University\n\n      \n3\n\n      \n29.3\n\n      \n12.5\n\n      \n0.0\n\n      \n23.6\n\n      \n31.1\n\n      \n66.8\n\n      \n29.2\n\n      \n2005\n\n    \n\n    \n\n      \n62\n\n      \n63\n\n      \nThe Ohio State University - Columbus\n\n      \n41\n\n      \n29.2\n\n      \n17.7\n\n      \n0.0\n\n      \n40.8\n\n      \n21.5\n\n      \n61.2\n\n      \n19.5\n\n      \n2005\n\n    \n\n    \n\n      \n63\n\n      \n64\n\n      \nUniversity of Bristol\n\n      \n7\n\n      \n28.8\n\n      \n10.9\n\n      \n18.2\n\n      \n30.4\n\n      \n24.5\n\n      \n47.5\n\n      \n27.4\n\n      \n2005\n\n    \n\n    \n\n      \n70\n\n      \n71\n\n      \nUniversity of Heidelberg\n\n      \n3\n\n      \n28.0\n\n      \n10.9\n\n      \n27.7\n\n      \n20.8\n\n      \n20.9\n\n      \n48.1\n\n      \n26.9\n\n      \n2005\n\n    \n\n    \n\n      \n72\n\n      \n73\n\n      \nTohoku University\n\n      \n4\n\n      \n27.8\n\n      \n18.8\n\n      \n0.0\n\n      \n19.2\n\n      \n26.9\n\n      \n65.3\n\n      \n29.0\n\n      \n2005\n\n    \n\n    \n\n      \n73\n\n      \n73\n\n      \nUniversity of Arizona\n\n      \n44\n\n      \n27.8\n\n      \n0.0\n\n      \n0.0\n\n      \n29.4\n\n      \n36.8\n\n      \n55.8\n\n      \n25.7\n\n      \n2005\n\n    \n\n    \n\n      \n74\n\n      \n75\n\n      \nPurdue University - West Lafayette\n\n      \n45\n\n      \n27.7\n\n      \n18.8\n\n      \n17.1\n\n      \n27.2\n\n      \n21.4\n\n      \n49.8\n\n      \n19.4\n\n      \n2005\n\n    \n\n    \n\n      \n75\n\n      \n76\n\n      \nUniversity of Helsinki\n\n      \n1\n\n      \n27.4\n\n      \n18.8\n\n      \n18.2\n\n      \n15.7\n\n      \n21.4\n\n      \n54.5\n\n      \n27.5\n\n      \n2005\n\n    \n\n    \n\n      \n76\n\n      \n77\n\n      \nMichigan State University\n\n      \n46\n\n      \n26.9\n\n      \n12.5\n\n      \n0.0\n\n      \n37.7\n\n      \n26.6\n\n      \n51.0\n\n      \n18.7\n\n      \n2005\n\n    \n\n    \n\n      \n79\n\n      \n80\n\n      \nBoston University\n\n      \n48\n\n      \n26.1\n\n      \n15.4\n\n      \n0.0\n\n      \n31.4\n\n      \n28.1\n\n      \n50.8\n\n      \n17.5\n\n      \n2005\n\n    \n\n    \n\n      \n80\n\n      \n80\n\n      \nKing's College London\n\n      \n9\n\n      \n26.1\n\n      \n16.6\n\n      \n23.5\n\n      \n20.8\n\n      \n17.4\n\n      \n44.6\n\n      \n24.8\n\n      \n2005\n\n    \n\n    \n\n      \n81\n\n      \n82\n\n      \nUniversity of Melbourne\n\n      \n2\n\n      \n26.0\n\n      \n15.4\n\n      \n14.4\n\n      \n22.2\n\n      \n18.7\n\n      \n53.5\n\n      \n19.9\n\n      \n2005\n\n    \n\n    \n\n      \n82\n\n      \n83\n\n      \nUniversity of Nottingham\n\n      \n10\n\n      \n25.9\n\n      \n15.4\n\n      \n20.4\n\n      \n20.8\n\n      \n19.0\n\n      \n45.6\n\n      \n24.8\n\n      \n2005\n\n    \n\n    \n\n      \n85\n\n      \n86\n\n      \nBrown University\n\n      \n49\n\n      \n25.4\n\n      \n0.0\n\n      \n13.9\n\n      \n29.4\n\n      \n25.5\n\n      \n40.7\n\n      \n27.9\n\n      \n2005\n\n    \n\n    \n\n      \n86\n\n      \n87\n\n      \nIndiana University Bloomington\n\n      \n50\n\n      \n25.2\n\n      \n14.0\n\n      \n18.2\n\n      \n24.8\n\n      \n21.2\n\n      \n42.0\n\n      \n18.2\n\n      \n2005\n\n    \n\n    \n\n      \n88\n\n      \n89\n\n      \nTexas A&M University - College Station\n\n      \n51\n\n      \n25.1\n\n      \n0.0\n\n      \n0.0\n\n      \n32.4\n\n      \n24.4\n\n      \n55.0\n\n      \n20.4\n\n      \n2005\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n4867\n\n      \n401-500\n\n      \nUniversity of Jena\n\n      \n29-39\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n9.3\n\n      \n34.0\n\n      \n17.1\n\n      \n2015\n\n    \n\n    \n\n      \n4868\n\n      \n401-500\n\n      \nUniversity of Jyvaskyla\n\n      \n4-6\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n10.3\n\n      \n26.7\n\n      \n14.1\n\n      \n2015\n\n    \n\n    \n\n      \n4869\n\n      \n401-500\n\n      \nUniversity of Konstanz\n\n      \n29-39\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n12.1\n\n      \n11.4\n\n      \n22.2\n\n      \n13.5\n\n      \n2015\n\n    \n\n    \n\n      \n4870\n\n      \n401-500\n\n      \nUniversity of KwaZulu-Natal\n\n      \n3-4\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n8.4\n\n      \n32.8\n\n      \n16.6\n\n      \n2015\n\n    \n\n    \n\n      \n4871\n\n      \n401-500\n\n      \nUniversity of Ljubljana\n\n      \n1\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n7.7\n\n      \n35.1\n\n      \n14.2\n\n      \n2015\n\n    \n\n    \n\n      \n4872\n\n      \n401-500\n\n      \nUniversity of Maryland, Baltimore County\n\n      \n126-146\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n17.4\n\n      \n6.5\n\n      \n17.8\n\n      \n17.3\n\n      \n2015\n\n    \n\n    \n\n      \n4873\n\n      \n401-500\n\n      \nUniversity of Milan - Bicocca\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n5.0\n\n      \n5.6\n\n      \n30.9\n\n      \n21.4\n\n      \n2015\n\n    \n\n    \n\n      \n4874\n\n      \n401-500\n\n      \nUniversity of Nice Sophia Antipolis\n\n      \n19-22\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n16.3\n\n      \n26.2\n\n      \n12.7\n\n      \n2015\n\n    \n\n    \n\n      \n4875\n\n      \n401-500\n\n      \nUniversity of Oklahoma - Norman\n\n      \n126-146\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n5.1\n\n      \n10.0\n\n      \n28.0\n\n      \n14.0\n\n      \n2015\n\n    \n\n    \n\n      \n4876\n\n      \n401-500\n\n      \nUniversity of Palermo\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n6.3\n\n      \n6.6\n\n      \n28.2\n\n      \n14.8\n\n      \n2015\n\n    \n\n    \n\n      \n4877\n\n      \n401-500\n\n      \nUniversity of Parma\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n13.6\n\n      \n2.1\n\n      \n26.7\n\n      \n19.6\n\n      \n2015\n\n    \n\n    \n\n      \n4878\n\n      \n401-500\n\n      \nUniversity of Pavia\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n5.0\n\n      \n5.7\n\n      \n30.7\n\n      \n19.7\n\n      \n2015\n\n    \n\n    \n\n      \n4879\n\n      \n401-500\n\n      \nUniversity of Perugia\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n7.5\n\n      \n29.3\n\n      \n18.5\n\n      \n2015\n\n    \n\n    \n\n      \n4880\n\n      \n401-500\n\n      \nUniversity of Quebec\n\n      \n19-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n9.8\n\n      \n33.3\n\n      \n16.8\n\n      \n2015\n\n    \n\n    \n\n      \n4881\n\n      \n401-500\n\n      \nUniversity of Regensburg\n\n      \n29-39\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n13.9\n\n      \n27.7\n\n      \n15.2\n\n      \n2015\n\n    \n\n    \n\n      \n4882\n\n      \n401-500\n\n      \nUniversity of Rennes 1\n\n      \n19-22\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n9.2\n\n      \n28.1\n\n      \n11.2\n\n      \n2015\n\n    \n\n    \n\n      \n4883\n\n      \n401-500\n\n      \nUniversity of Rhode Island\n\n      \n126-146\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n15.2\n\n      \n6.1\n\n      \n21.1\n\n      \n16.0\n\n      \n2015\n\n    \n\n    \n\n      \n4884\n\n      \n401-500\n\n      \nUniversity of Roma - Tor Vergata\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n8.8\n\n      \n33.7\n\n      \n19.2\n\n      \n2015\n\n    \n\n    \n\n      \n4885\n\n      \n401-500\n\n      \nUniversity of Rostock\n\n      \n29-39\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n8.6\n\n      \n8.4\n\n      \n25.0\n\n      \n13.5\n\n      \n2015\n\n    \n\n    \n\n      \n4886\n\n      \n401-500\n\n      \nUniversity of Santiago Compostela\n\n      \n9-13\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n7.1\n\n      \n6.1\n\n      \n31.1\n\n      \n13.2\n\n      \n2015\n\n    \n\n    \n\n      \n4887\n\n      \n401-500\n\n      \nUniversity of Science, Malaysia\n\n      \n2\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n7.1\n\n      \n3.3\n\n      \n30.6\n\n      \n15.7\n\n      \n2015\n\n    \n\n    \n\n      \n4888\n\n      \n401-500\n\n      \nUniversity of Seville\n\n      \n9-13\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n7.5\n\n      \n33.7\n\n      \n11.3\n\n      \n2015\n\n    \n\n    \n\n      \n4889\n\n      \n401-500\n\n      \nUniversity of Surrey\n\n      \n34-37\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n8.6\n\n      \n4.9\n\n      \n27.0\n\n      \n18.0\n\n      \n2015\n\n    \n\n    \n\n      \n4890\n\n      \n401-500\n\n      \nUniversity of Szeged\n\n      \n1-2\n\n      \nNaN\n\n      \n0.0\n\n      \n13.3\n\n      \n3.6\n\n      \n3.4\n\n      \n21.8\n\n      \n12.8\n\n      \n2015\n\n    \n\n    \n\n      \n4891\n\n      \n401-500\n\n      \nUniversity of the Basque Country\n\n      \n9-13\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n7.1\n\n      \n36.1\n\n      \n13.5\n\n      \n2015\n\n    \n\n    \n\n      \n4892\n\n      \n401-500\n\n      \nUniversity of Trieste\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n5.0\n\n      \n10.9\n\n      \n25.1\n\n      \n20.1\n\n      \n2015\n\n    \n\n    \n\n      \n4893\n\n      \n401-500\n\n      \nUniversity of Zaragoza\n\n      \n9-13\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n7.6\n\n      \n5.1\n\n      \n33.3\n\n      \n13.1\n\n      \n2015\n\n    \n\n    \n\n      \n4894\n\n      \n401-500\n\n      \nUtah State University\n\n      \n126-146\n\n      \nNaN\n\n      \n13.6\n\n      \n0.0\n\n      \n3.6\n\n      \n10.8\n\n      \n25.1\n\n      \n15.5\n\n      \n2015\n\n    \n\n    \n\n      \n4895\n\n      \n401-500\n\n      \nVienna University of Technology\n\n      \n4-6\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n12.2\n\n      \n28.8\n\n      \n22.9\n\n      \n2015\n\n    \n\n    \n\n      \n4896\n\n      \n401-500\n\n      \nWake Forest University\n\n      \n126-146\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n14.9\n\n      \n7.5\n\n      \n25.0\n\n      \n11.9\n\n      \n2015\n\n    \n\n  \n\n\n\n\n4122 rows \u00d7 11 columns\n\n\n\n\n\nMethod Chaining\n\u00b6\n\n\npipe()\n to chain operations and thus eliminate the need for intermediate DataFrames.\n\n\nWithout this operator, instead of writing \ndf.pipe(f).pipe(g).pipe(h)\n write: \nh(g(f(df)))\n. This becomes harder to follow once the number of nested functions grows large.\n\n\n1\n2\n3\n4\n5\n# Extract info\n\n\ndef\n \nextract_info\n(\ninput_df\n,\n \nname\n):\n\n    \ndf\n \n=\n \ninput_df\n.\ncopy\n()\n\n    \ninfo_df\n \n=\n \npd\n.\nDataFrame\n({\n'nb_rows'\n:\n \ndf\n.\nshape\n[\n0\n],\n \n'nb_cols'\n:\n \ndf\n.\nshape\n[\n1\n],\n \n'name'\n:\n \nname\n},\n \nindex\n=\nrange\n(\n1\n))\n\n    \nreturn\n \ninfo_df\n\n\n\n\n\n\n\n1\n2\n3\n4\n# Gather all info   \n\n\nall_info\n \n=\n \npd\n.\nconcat\n([\ntimes_df\n.\npipe\n(\nextract_info\n,\n \n'times'\n),\n \nshanghai_df\n.\npipe\n(\nextract_info\n,\n \n'shanghai'\n)])\n\n\n\nprint\n(\nall_info\n)\n\n\n\n\n\n\n\n1\n2\n3\n       name  nb_cols  nb_rows\n0     times       14     2603\n0  shanghai       11     4897\n\n\n\n\n\n\nSelect the common columns.\n\n\n1\n2\n3\n4\ncommon_columns\n \n=\n \nset\n(\nshanghai_df\n.\ncolumns\n)\n \n&\n \nset\n(\ntimes_df\n.\ncolumns\n)\n\n\n\n# Return `common_columns`\n\n\nprint\n(\ncommon_columns\n)\n\n\n\n\n\n\n\n1\n{'year', 'university_name', 'total_score', 'world_rank'}\n\n\n\n\n\n\nClean the Data\n\u00b6\n\n\n1\n2\n3\n4\n5\n# Clean up the `world_rank` \n\n\ndef\n \nclean_world_rank\n(\ninput_df\n):\n\n    \ndf\n \n=\n \ninput_df\n.\ncopy\n()\n\n    \ndf\n.\nworld_rank\n \n=\n \ndf\n.\nworld_rank\n.\nstr\n.\nsplit\n(\n'-'\n)\n.\nstr\n[\n0\n]\n.\nstr\n.\nsplit\n(\n'='\n)\n.\nstr\n[\n0\n]\n\n    \nreturn\n \ndf\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Assign the common years of `shanghai_df` and `times_df` to `common_years`    \n\n\ncommon_years\n \n=\n \nset\n(\nshanghai_df\n.\nyear\n)\n \n&\n \nset\n(\ntimes_df\n.\nyear\n)\n \n\n\n# Print `common_years`\n\n\nprint\n(\ncommon_years\n)\n\n\n\n\n\n\n\n1\n{2011, 2012, 2013, 2014, 2015}\n\n\n\n\n\n\n1\n2\n3\n4\n# Filter years\n\n\ndef\n \nfilter_year\n(\ninput_df\n,\n \nyears\n):\n\n    \ndf\n \n=\n \ninput_df\n.\ncopy\n()\n\n    \nreturn\n \ndf\n.\nquery\n(\n'year in {}'\n.\nformat\n(\nlist\n(\nyears\n)))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Clean `times_df` and `shanghai_df`\n\n\ncleaned_times_df\n \n=\n \n(\ntimes_df\n.\nloc\n[:,\n \ncommon_columns\n]\n\n                            \n.\npipe\n(\nfilter_year\n,\n \ncommon_years\n)\n\n                            \n.\npipe\n(\nclean_world_rank\n)\n\n                            \n.\nassign\n(\nname\n=\n'times'\n))\n\n\ncleaned_shanghai_df\n \n=\n \n(\nshanghai_df\n.\nloc\n[:,\n \ncommon_columns\n]\n\n                                  \n.\npipe\n(\nfilter_year\n,\n \ncommon_years\n)\n\n                                  \n.\npipe\n(\nclean_world_rank\n)\n\n                                  \n.\nassign\n(\nname\n=\n'shanghai'\n))\n\n\n\n\n\n\n\nConcatenate into a single DataFrame\n\u00b6\n\n\n38% of data missing from the \ntotal_score column\n: drop this column with the \n.drop\n method.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Compose `ranking_df` with `cleaned_times_df` and `cleaned_shanghai_df`\n\n\nranking_df\n \n=\n \npd\n.\nconcat\n([\ncleaned_times_df\n,\n \ncleaned_shanghai_df\n])\n\n\n\n# Calculate the percentage of missing data\n\n\nmissing_data\n \n=\n \n100\n \n*\n \npd\n.\nisnull\n(\nranking_df\n.\ntotal_score\n)\n.\nsum\n()\n \n/\n \nlen\n(\nranking_df\n)\n\n\n\n# Drop the `total_score` column of `ranking_df`\n\n\nranking_df\n \n=\n \nranking_df\n.\ndrop\n(\n'total_score'\n,\n \naxis\n=\n1\n)\n\n\n\n\n\n\n\nMemory Optimization\n\u00b6\n\n\nMemory can start to play a big part in how fast the pipelines can run. Without the \u201cdeep\u201d flag turned on, Pandas won\u2019t estimate memory consumption for the \nobject\n dtype: \ncategory\n when dealing with categorical data, etc. \nint64\n or even \nint16\n takes less memory.\n\n\n1\n2\n# Print the memory usage of `ranking_df` \n\n\nranking_df\n.\ninfo\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nworld_rank         3686 non-null object\nuniversity_name    3685 non-null object\nname               3686 non-null object\ndtypes: int64(1), object(3)\nmemory usage: 144.0+ KB\n\n\n\n\n\n\n1\n2\n# Print the deep memory usage of `ranking_df` \n\n\nranking_df\n.\ninfo\n(\nmemory_usage\n=\n\"deep\"\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nworld_rank         3686 non-null object\nuniversity_name    3685 non-null object\nname               3686 non-null object\ndtypes: int64(1), object(3)\nmemory usage: 803.1 KB\n\n\n\n\n\n\nCast Object Types\n\u00b6\n\n\n\u2026to more appropriate ones.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ndef\n \nmemory_change\n(\ninput_df\n,\n \ncolumn\n,\n \ndtype\n):\n\n    \ndf\n \n=\n \ninput_df\n.\ncopy\n()\n\n    \nold\n \n=\n \nround\n(\ndf\n[\ncolumn\n]\n.\nmemory_usage\n(\ndeep\n=\nTrue\n)\n \n/\n \n1024\n,\n \n2\n)\n \n# In KB\n\n    \nnew\n \n=\n \nround\n(\ndf\n[\ncolumn\n]\n.\nastype\n(\ndtype\n)\n.\nmemory_usage\n(\ndeep\n=\nTrue\n)\n \n/\n \n1024\n,\n \n2\n)\n# In KB\n\n    \nchange\n \n=\n \nround\n(\n100\n \n*\n \n(\nold\n \n-\n \nnew\n)\n \n/\n \n(\nold\n),\n \n2\n)\n\n    \nreport\n \n=\n \n(\n\"The inital memory footprint for {column} is: {old}KB.\n\\n\n\"\n \n              \n\"The casted {column} now takes: {new}KB.\n\\n\n\"\n\n              \n\"A change of {change} %.\"\n)\n.\nformat\n(\n**\nlocals\n())\n\n    \nreturn\n \nreport\n\n\n\n\n\n\n\n1\n2\n3\n# parameters:\n\n\n# input_df, column, dtype\n\n\nprint\n(\nmemory_change\n(\nranking_df\n,\n'world_rank'\n,\n \n'int16'\n))\n\n\n\n\n\n\n\n1\n2\n3\nThe inital memory footprint for world_rank is: 244.43KB.\nThe casted world_rank now takes: 36.0KB.\nA change of 85.27 %.\n\n\n\n\n\n\n1\nprint\n(\nmemory_change\n(\nranking_df\n,\n'university_name'\n,\n \n'category'\n))\n\n\n\n\n\n\n\n1\n2\n3\nThe inital memory footprint for university_name is: 329.98KB.\nThe casted university_name now takes: 121.37KB.\nA change of 63.22 %.\n\n\n\n\n\n\n1\nprint\n(\nmemory_change\n(\nranking_df\n,\n'name'\n,\n \n'category'\n))\n\n\n\n\n\n\n\n1\n2\n3\nThe inital memory footprint for name is: 257.49KB.\nThe casted name now takes: 32.6KB.\nA change of 87.34 %.\n\n\n\n\n\n\n1\n2\n# Cast `world_rank` as type `int16`\n\n\nranking_df\n.\nworld_rank\n \n=\n \nranking_df\n.\nworld_rank\n.\nastype\n(\n'int16'\n)\n\n\n\n\n\n\n\n1\n2\n# Cast `unversity_name` as type `category`\n\n\nranking_df\n.\nuniversity_name\n \n=\n \nranking_df\n.\nuniversity_name\n.\nastype\n(\n'category'\n)\n\n\n\n\n\n\n\n1\n2\n# Cast `name` as type `category`\n\n\nranking_df\n.\nname\n \n=\n \nranking_df\n.\nname\n.\nastype\n(\n'category'\n)\n\n\n\n\n\n\n\n1\n2\n# Double check the memory usage after type casting\n\n\nranking_df\n.\ninfo\n(\nmemory_usage\n=\n'deep'\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nuniversity_name    3685 non-null category\nworld_rank         3686 non-null int16\nname               3686 non-null category\ndtypes: category(2), int16(1), int64(1)\nmemory usage: 161.2 KB\n\n\n\n\n\n\nFrom 803.1 KB!\n\n\nWe have a well-formed data set (i.e. it is in a tidy state) with an optimized memory footprint, data analysis can start.\n\n\nReplace, Rank, Subset, \nGroupby\n\u00b6\n\n\nReplace\n\u00b6\n\n\n\u2018Massachusetts Institute of Technology (MIT)\u2019 and \u2018Massachusetts Institute of Technology\u2019 are two different records of the same university. Thus, change the first name to the latter.\n\n\n1\n2\n# Query for the rows with university name 'Massachusetts Institute of Technology (MIT)'\n\n\nprint\n(\nranking_df\n.\nquery\n(\n\"university_name == 'Massachusetts Institute of Technology (MIT)'\"\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n      year                              university_name  world_rank      name\n3016  2011  Massachusetts Institute of Technology (MIT)           3  shanghai\n3516  2012  Massachusetts Institute of Technology (MIT)           3  shanghai\n3801  2013  Massachusetts Institute of Technology (MIT)           4  shanghai\n3899  2014  Massachusetts Institute of Technology (MIT)           3  shanghai\n4399  2015  Massachusetts Institute of Technology (MIT)           3  shanghai\n\n\n\n\n\n\n1\nranking_df\n.\nloc\n[\nranking_df\n.\nuniversity_name\n \n==\n \n'Massachusetts Institute of Technology (MIT)'\n,\n \n'university_name'\n]\n \n=\n \n'Massachusetts Institute of Technology'\n\n\n\n\n\n\n\n1\nranking_df\n.\nuniversity_name\n.\nhead\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n0                       Harvard University\n1       California Institute of Technology\n2    Massachusetts Institute of Technology\n3                      Stanford University\n4                     Princeton University\nName: university_name, dtype: category\nCategories (785, object): [Aalborg University, Aalto University, Aarhus University, Aberystwyth University, ..., \u00c9cole Normale Sup\u00e9rieure, \u00c9cole Normale Sup\u00e9rieure de Lyon, \u00c9cole Polytechnique, \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne]\n\n\n\n\n\n\nRank, Subset, \nGroupby\n\u00b6\n\n\nTo find the 5 (more generally \nn\n) top universities over the years, for each ranking system, here is how to do it in pseudo-code:\n\n\n\n\nFor each year (in the \nyear\n column) and for each ranking system (in the \nname\n column):\n\n\nSelect the subset of the data for this given year and the given ranking system.\n\n\nSelect the 5 top universities and store them in a list.\n\n\nStore the result in a dictionary with (year, name) as key and the list of the universities (in descending order) as the value.\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n# Load in `itertools`\n\n\nimport\n \nitertools\n\n\n\n# Initialize `ranking`\n\n\nranking\n \n=\n \n{}\n\n\n\nfor\n \nyear\n,\n \nname\n \nin\n \nitertools\n.\nproduct\n(\ncommon_years\n,\n \n[\n\"times\"\n,\n \n\"shanghai\"\n]):\n\n    \ns\n \n=\n \n(\nranking_df\n.\nloc\n[\nlambda\n \ndf\n:\n \n((\ndf\n.\nyear\n \n==\n \nyear\n)\n \n&\n \n(\ndf\n.\nname\n \n==\n \nname\n)\n\n                                    \n&\n \n(\ndf\n.\nworld_rank\n.\nisin\n(\nrange\n(\n1\n,\n6\n)))),\n \n:]\n\n                   \n.\nsort_values\n(\n'world_rank'\n,\n \nascending\n=\nFalse\n)\n\n                   \n.\nuniversity_name\n)\n\n    \nranking\n[(\nyear\n,\n \nname\n)]\n \n=\n \nlist\n(\ns\n)\n\n\n\n\n# Print `ranking`\n\n\nprint\n(\nranking\n)\n\n\n\n\n\n\n\n1\n{(2011, 'times'): ['Princeton University', 'Stanford University', 'Massachusetts Institute of Technology', 'California Institute of Technology', 'Harvard University'], (2011, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2012, 'times'): ['Princeton University', 'University of Oxford', 'Harvard University', 'Stanford University', 'California Institute of Technology'], (2012, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2013, 'times'): ['Massachusetts Institute of Technology', 'Harvard University', 'Stanford University', 'University of Oxford', 'California Institute of Technology'], (2013, 'shanghai'): ['University of Cambridge', 'Massachusetts Institute of Technology', 'University of California, Berkeley', 'Stanford University', 'Harvard University'], (2014, 'times'): ['Massachusetts Institute of Technology', 'Stanford University', 'Harvard University', 'University of Oxford', 'California Institute of Technology'], (2014, 'shanghai'): ['University of Cambridge', 'University of California-Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2015, 'times'): ['University of Cambridge', 'Stanford University', 'University of Oxford', 'Harvard University', 'California Institute of Technology'], (2015, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University']}\n\n\n\n\n\n\nWe have this ranking dictionary, let\u2019s find out how much (in percentage) both ranking methods differ over the years: the two are 100% set-similar if the selected 5-top universities are the same even though they aren\u2019t ranked the same.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n# Import `defaultdict`\n\n\nfrom\n \ncollections\n \nimport\n \ndefaultdict\n\n\n\n# Initialize `compare`\n\n\ncompare\n \n=\n \ndefaultdict\n(\nlist\n)\n\n\n\n# Initialize `exact_similarity` and `set_similarity`\n\n\nexact_similarity\n \n=\n \n{}\n\n\nset_similarity\n \n=\n \n{}\n\n\n\nfor\n \n(\nyear\n,\n \nmethod\n),\n \nuniversities\n \nin\n \nranking\n.\nitems\n():\n\n    \ncompare\n[\nyear\n]\n.\nappend\n(\nuniversities\n)\n\n\n\nfor\n \nyear\n,\n \nranks\n \nin\n \ncompare\n.\nitems\n():\n\n    \nset_similarity\n[\nyear\n]\n \n=\n \n100\n \n*\n \nlen\n(\nset\n(\nranks\n[\n0\n])\n \n&\n \nset\n(\nranks\n[\n1\n]))\n \n/\n \n5.0\n\n\n\n# Print `set_similarity`  \n\n\nprint\n(\nset_similarity\n)\n\n\n\n\n\n\n\n1\n{2011: 60.0, 2012: 40.0, 2013: 60.0, 2014: 60.0, 2015: 60.0}\n\n\n\n\n\n\nIs there a better, more idiomatic Pandas way?\n\n\n1\n2\n3\n4\n5\n# Construct a DataFrame with the top 5 universities \n\n\ntop_5_df\n \n=\n \nranking_df\n.\nloc\n[\nlambda\n \ndf\n:\n \ndf\n.\nworld_rank\n.\nisin\n(\nrange\n(\n1\n,\n \n6\n)),\n \n:]\n\n\n\n# Print the first rows of `top_5_df`\n\n\ntop_5_df\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nyear\n\n      \nuniversity_name\n\n      \nworld_rank\n\n      \nname\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2011\n\n      \nHarvard University\n\n      \n1\n\n      \ntimes\n\n    \n\n    \n\n      \n1\n\n      \n2011\n\n      \nCalifornia Institute of Technology\n\n      \n2\n\n      \ntimes\n\n    \n\n    \n\n      \n2\n\n      \n2011\n\n      \nMassachusetts Institute of Technology\n\n      \n3\n\n      \ntimes\n\n    \n\n    \n\n      \n3\n\n      \n2011\n\n      \nStanford University\n\n      \n4\n\n      \ntimes\n\n    \n\n    \n\n      \n4\n\n      \n2011\n\n      \nPrinceton University\n\n      \n5\n\n      \ntimes\n\n    \n\n  \n\n\n\n\n\n\n\n1\ntop_5_df\n.\ntail\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nyear\n\n      \nuniversity_name\n\n      \nworld_rank\n\n      \nname\n\n    \n\n  \n\n  \n\n    \n\n      \n4397\n\n      \n2015\n\n      \nHarvard University\n\n      \n1\n\n      \nshanghai\n\n    \n\n    \n\n      \n4398\n\n      \n2015\n\n      \nStanford University\n\n      \n2\n\n      \nshanghai\n\n    \n\n    \n\n      \n4399\n\n      \n2015\n\n      \nMassachusetts Institute of Technology\n\n      \n3\n\n      \nshanghai\n\n    \n\n    \n\n      \n4400\n\n      \n2015\n\n      \nUniversity of California, Berkeley\n\n      \n4\n\n      \nshanghai\n\n    \n\n    \n\n      \n4401\n\n      \n2015\n\n      \nUniversity of Cambridge\n\n      \n5\n\n      \nshanghai\n\n    \n\n  \n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n# Compute the similarity\n\n\ndef\n \ncompute_set_similarity\n(\ns\n):\n\n    \npivoted\n \n=\n \ns\n.\npivot\n(\nvalues\n=\n'world_rank'\n,\n \ncolumns\n=\n'name'\n,\n \nindex\n=\n'university_name'\n)\n.\ndropna\n()\n\n    \nset_simlarity\n \n=\n \n100\n \n*\n \nlen\n((\nset\n(\npivoted\n[\n'shanghai'\n]\n.\nindex\n)\n \n&\n \nset\n(\npivoted\n[\n'times'\n]\n.\nindex\n)))\n \n/\n \n5\n\n    \nreturn\n \nset_simlarity\n\n\n\n# Group `top_5_df` by `year`    \n\n\ngrouped_df\n \n=\n \ntop_5_df\n.\ngroupby\n(\n'year'\n)\n\n\n\n# Use `compute_set_similarity` to construct a DataFrame\n\n\nsetsimilarity_df\n \n=\n \npd\n.\nDataFrame\n({\n'set_similarity'\n:\n \ngrouped_df\n.\napply\n(\ncompute_set_similarity\n)})\n.\nreset_index\n()\n\n\n\n# Print the first rows of `setsimilarity_df`\n\n\nsetsimilarity_df\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nyear\n\n      \nset_similarity\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2011\n\n      \n60.0\n\n    \n\n    \n\n      \n1\n\n      \n2012\n\n      \n40.0\n\n    \n\n    \n\n      \n2\n\n      \n2013\n\n      \n60.0\n\n    \n\n    \n\n      \n3\n\n      \n2014\n\n      \n60.0\n\n    \n\n    \n\n      \n4\n\n      \n2015\n\n      \n60.0\n\n    \n\n  \n\n\n\n\n\n\n\nVisualization\n\u00b6\n\n\nMatplotlib\n\u00b6\n\n\n1\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n\n\n\n\n1\n2\n3\n4\n# Plot a scatterplot with `total_score` and `alumni`\n\n\nshanghai_df\n.\nplot\n.\nscatter\n(\n'total_score'\n,\n \n'alumni'\n,\n \nc\n=\n'year'\n,\n \ncolormap\n=\n'viridis'\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nRemove values\n\u00b6\n\n\nThere are some 0 values for the alumni column (0, -, \nNaN\n, etc.). Remove them.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Replace `-` entries with NaN values\n\n\ntimes_df\n[\n'total_score'\n]\n \n=\n \ntimes_df\n[\n'total_score'\n]\n.\nreplace\n(\n\"-\"\n,\n \n\"NaN\"\n)\n.\nastype\n(\n'float'\n)\n\n\n\n# Drop all rows with NaN values for `num_students` \n\n\ntimes_df\n \n=\n \ntimes_df\n.\ndropna\n(\nsubset\n=\n[\n'num_students'\n],\n \nhow\n=\n'all'\n)\n\n\n\n# Cast the remaining rows with `num_students` as int\n\n\ntimes_df\n[\n'num_students'\n]\n \n=\n \ntimes_df\n[\n'num_students'\n]\n.\nastype\n(\n'int'\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n# Plot a scatterplot with `total_score` and `num_students`\n\n\ntimes_df\n.\nplot\n.\nscatter\n(\n'total_score'\n,\n \n'num_students'\n,\n \nc\n=\n'year'\n,\n \ncolormap\n=\n'viridis'\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nSeaborn\n\u00b6\n\n\nThe Seaborn plotting tool is mainly used to create statistical plots that are visually appealing.\n\n\n1\n2\n3\n4\nimport\n \nseaborn\n \nas\n \nsns\n\n\n\n# Set the Seaborn theme if desired\n\n\nsns\n.\nset_style\n(\n'darkgrid'\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Abbreviate country names of United States and United Kingdom\n\n\ntimes_df\n[\n'country'\n]\n \n=\n \ntimes_df\n[\n'country'\n]\n.\nreplace\n(\n\"United States of America\"\n,\n \n\"USA\"\n)\n.\nreplace\n(\n\"United Kingdom\"\n,\n \n\"UK\"\n)\n\n\n\n# Count the frequency of countries \n\n\ncount\n \n=\n \ntimes_df\n[\n'country'\n]\n.\nvalue_counts\n()[:\n10\n]\n\n\n\n# Convert the top 10 countries to a DataFrame \n\n\ndf\n \n=\n \ncount\n.\nto_frame\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Reset the index \n\n\n#df.reset_index(level=0, inplace=True)\n\n\n# or...\n\n\ndf\n[\n'index1'\n]\n \n=\n \ndf\n.\nindex\n\n\n\ndf\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ncountry\n\n      \nindex1\n\n    \n\n  \n\n  \n\n    \n\n      \nUSA\n\n      \n625\n\n      \nUSA\n\n    \n\n    \n\n      \nUK\n\n      \n286\n\n      \nUK\n\n    \n\n    \n\n      \nGermany\n\n      \n150\n\n      \nGermany\n\n    \n\n    \n\n      \nAustralia\n\n      \n117\n\n      \nAustralia\n\n    \n\n    \n\n      \nCanada\n\n      \n108\n\n      \nCanada\n\n    \n\n    \n\n      \nJapan\n\n      \n98\n\n      \nJapan\n\n    \n\n    \n\n      \nItaly\n\n      \n94\n\n      \nItaly\n\n    \n\n    \n\n      \nChina\n\n      \n82\n\n      \nChina\n\n    \n\n    \n\n      \nNetherlands\n\n      \n75\n\n      \nNetherlands\n\n    \n\n    \n\n      \nFrance\n\n      \n73\n\n      \nFrance\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n# Rename the columns\n\n\ndf\n.\ncolumns\n \n=\n \n[\n'count'\n,\n \n'country'\n,]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Plot a barplot with `country` and `count`\n\n\nsns\n.\nbarplot\n(\nx\n=\n'country'\n,\n \ny\n=\n'count'\n,\n \ndata\n=\ndf\n)\n\n\nsns\n.\ndespine\n()\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nFilter rows\n\u00b6\n\n\n1\ntimes_df_filtered\n \n=\n \ntimes_df\n.\nloc\n[\ntimes_df\n[\n'country'\n]\n.\nisin\n([\n'USA'\n,\n \n'UK'\n,\n \n'Canada'\n,\n \n'Australia'\n,\n \n'Germany'\n])]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Barplot with `country` and `total_score`\n\n\nsns\n.\nbarplot\n(\nx\n=\n'country'\n,\n \ny\n=\n'total_score'\n,\n \ndata\n=\ntimes_df_filtered\n)\n\n\nsns\n.\ndespine\n()\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nCorrelation\n\u00b6\n\n\n1\n2\n3\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\nnp\n.\nseterr\n(\ninvalid\n=\n'ignore'\n)\n\n\n\n\n\n\n\n1\n{'divide': 'warn', 'invalid': 'warn', 'over': 'warn', 'under': 'ignore'}\n\n\n\n\n\n\n1\n2\n3\nsns\n.\npairplot\n(\ntimes_df\n,\n \nhue\n=\n'country'\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n1\n2\n3\ng\n \n=\n \nsns\n.\nFacetGrid\n(\ntimes_df_filtered\n,\n \ncol\n=\n'country'\n,\n \nhue\n=\n'country'\n)\n\n\ng\n.\nmap\n(\nsns\n.\nregplot\n,\n \n'year'\n,\n \n'total_score'\n)\n.\nset\n(\nxlim\n=\n(\n2010\n,\n \n2015\n),\n \nylim\n=\n(\n0\n,\n100\n))\n\n\ng\n.\nfig\n.\nsubplots_adjust\n(\nwspace\n=.\n2\n)\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nsns\n.\nset\n(\nstyle\n=\n\"white\"\n)\n\n\n\n# Compute the correlation matrix\n\n\ncorr\n \n=\n \ntimes_df\n.\ncorr\n()\n\n\n\n# Generate a mask for the upper triangle\n\n\nmask\n \n=\n \nnp\n.\nzeros_like\n(\ncorr\n,\n \ndtype\n=\nnp\n.\nbool\n)\n\n\nmask\n[\nnp\n.\ntriu_indices_from\n(\nmask\n)]\n \n=\n \nTrue\n\n\n\n# Set up the matplotlib figure\n\n\nf\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n(\nfigsize\n=\n(\n11\n,\n \n9\n))\n\n\n\n# Generate a custom diverging colormap\n\n\ncmap\n \n=\n \nsns\n.\ndiverging_palette\n(\n220\n,\n \n10\n,\n \nas_cmap\n=\nTrue\n)\n\n\n\n# Draw the heatmap with the mask and correct aspect ratio\n\n\nsns\n.\nheatmap\n(\ncorr\n,\n \nmask\n=\nmask\n,\n \ncmap\n=\ncmap\n,\n \nvmax\n=.\n3\n,\n\n            \nsquare\n=\nTrue\n,\n \nlinewidths\n=.\n5\n,\n \nax\n=\nax\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nTo go beyond\n\u00b6\n\n\nwith \nGroup-by\n.",
            "title": "Write Idiomatic Pandas Code"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#the-data",
            "text": "The datasets are downloadable from  Kaggle .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 % pylab   inline  import   pandas   as   pd  # Import Times Higher Education World University Rankings data  # https://www.timeshighereducation.com/world-university-rankings  times_df   =   pd . read_csv ( 'timesData.csv' ,   thousands = \",\" )  # Import Academic Ranking of World Universities data  # http://www.shanghairanking.com/  shanghai_df   =   pd . read_csv ( 'shanghaiData.csv' )    1 Populating the interactive namespace from numpy and matplotlib",
            "title": "The Data"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#quickly-inspecting-the-data",
            "text": "1\n2 # Return the first rows of `times_df`  times_df . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       world_rank \n       university_name \n       country \n       teaching \n       international \n       research \n       citations \n       income \n       total_score \n       num_students \n       student_staff_ratio \n       international_students \n       female_male_ratio \n       year \n     \n   \n   \n     \n       0 \n       1 \n       Harvard University \n       United States of America \n       99.7 \n       72.4 \n       98.7 \n       98.8 \n       34.5 \n       96.1 \n       20152.0 \n       8.9 \n       25% \n       NaN \n       2011 \n     \n     \n       1 \n       2 \n       California Institute of Technology \n       United States of America \n       97.7 \n       54.6 \n       98.0 \n       99.9 \n       83.7 \n       96.0 \n       2243.0 \n       6.9 \n       27% \n       33 : 67 \n       2011 \n     \n     \n       2 \n       3 \n       Massachusetts Institute of Technology \n       United States of America \n       97.8 \n       82.3 \n       91.4 \n       99.9 \n       87.5 \n       95.6 \n       11074.0 \n       9.0 \n       33% \n       37 : 63 \n       2011 \n     \n     \n       3 \n       4 \n       Stanford University \n       United States of America \n       98.3 \n       29.5 \n       98.1 \n       99.2 \n       64.3 \n       94.3 \n       15596.0 \n       7.8 \n       22% \n       42 : 58 \n       2011 \n     \n     \n       4 \n       5 \n       Princeton University \n       United States of America \n       90.9 \n       70.3 \n       95.4 \n       99.9 \n       - \n       94.2 \n       7929.0 \n       8.4 \n       27% \n       45 : 55 \n       2011 \n     \n      1\n2 # Describe `times_df`  times_df . describe ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       teaching \n       research \n       citations \n       num_students \n       student_staff_ratio \n       year \n     \n   \n   \n     \n       count \n       2603.000000 \n       2603.000000 \n       2603.000000 \n       2544.000000 \n       2544.000000 \n       2603.000000 \n     \n     \n       mean \n       37.801498 \n       35.910257 \n       60.921629 \n       23873.758648 \n       18.445283 \n       2014.075682 \n     \n     \n       std \n       17.604218 \n       21.254805 \n       23.073219 \n       17675.946877 \n       11.458698 \n       1.685733 \n     \n     \n       min \n       9.900000 \n       2.900000 \n       1.200000 \n       462.000000 \n       0.600000 \n       2011.000000 \n     \n     \n       25% \n       24.700000 \n       19.600000 \n       45.500000 \n       12637.750000 \n       11.975000 \n       2013.000000 \n     \n     \n       50% \n       33.900000 \n       30.500000 \n       62.500000 \n       20851.000000 \n       16.100000 \n       2014.000000 \n     \n     \n       75% \n       46.400000 \n       47.250000 \n       79.050000 \n       29991.000000 \n       21.500000 \n       2016.000000 \n     \n     \n       max \n       99.700000 \n       99.400000 \n       100.000000 \n       379231.000000 \n       162.600000 \n       2016.000000 \n     \n      1\n2 # Return the first rows of `shanghai_df`  shanghai_df . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       world_rank \n       university_name \n       national_rank \n       total_score \n       alumni \n       award \n       hici \n       ns \n       pub \n       pcp \n       year \n     \n   \n   \n     \n       0 \n       1 \n       Harvard University \n       1 \n       100.0 \n       100.0 \n       100.0 \n       100.0 \n       100.0 \n       100.0 \n       72.4 \n       2005 \n     \n     \n       1 \n       2 \n       University of Cambridge \n       1 \n       73.6 \n       99.8 \n       93.4 \n       53.3 \n       56.6 \n       70.9 \n       66.9 \n       2005 \n     \n     \n       2 \n       3 \n       Stanford University \n       2 \n       73.4 \n       41.1 \n       72.2 \n       88.5 \n       70.9 \n       72.3 \n       65.0 \n       2005 \n     \n     \n       3 \n       4 \n       University of California, Berkeley \n       3 \n       72.8 \n       71.8 \n       76.0 \n       69.4 \n       73.9 \n       72.2 \n       52.7 \n       2005 \n     \n     \n       4 \n       5 \n       Massachusetts Institute of Technology (MIT) \n       4 \n       70.1 \n       74.0 \n       80.6 \n       66.7 \n       65.8 \n       64.3 \n       53.0 \n       2005 \n     \n      1\n2 # Describe `shanghai_df`  shanghai_df . describe ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       total_score \n       alumni \n       award \n       hici \n       ns \n       pub \n       pcp \n       year \n     \n   \n   \n     \n       count \n       1101.000000 \n       4896.000000 \n       4895.00000 \n       4895.000000 \n       4875.000000 \n       4895.000000 \n       4895.000000 \n       4897.000000 \n     \n     \n       mean \n       36.383470 \n       9.161724 \n       7.69191 \n       16.221491 \n       16.078503 \n       38.254648 \n       21.242329 \n       2009.658566 \n     \n     \n       std \n       13.557186 \n       14.140636 \n       15.49411 \n       14.382710 \n       12.511529 \n       13.050809 \n       9.254351 \n       3.197576 \n     \n     \n       min \n       23.500000 \n       0.000000 \n       0.00000 \n       0.000000 \n       0.000000 \n       7.300000 \n       8.300000 \n       2005.000000 \n     \n     \n       25% \n       27.400000 \n       0.000000 \n       0.00000 \n       7.300000 \n       8.000000 \n       28.900000 \n       15.600000 \n       2007.000000 \n     \n     \n       50% \n       31.300000 \n       0.000000 \n       0.00000 \n       12.600000 \n       12.800000 \n       36.000000 \n       19.000000 \n       2009.000000 \n     \n     \n       75% \n       41.800000 \n       15.600000 \n       13.40000 \n       21.700000 \n       19.800000 \n       45.300000 \n       24.500000 \n       2012.000000 \n     \n     \n       max \n       100.000000 \n       100.000000 \n       100.00000 \n       100.000000 \n       100.000000 \n       100.000000 \n       100.000000 \n       2015.000000",
            "title": "Quickly Inspecting the Data"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#index-and-pull-values",
            "text": "[]  for row numbers or column names,  loc[] ,  iloc[] ,  query .  1\n2 # Retrieve the total score of the first row  print ( times_df . loc [ 0 ,   'total_score' ])    1 96.1   1\n2 # Retrieve rows 0 and 1  print ( times_df [ 0 : 2 ])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15   world_rank                     university_name                   country  \\\n0          1                  Harvard University  United States of America   \n1          2  California Institute of Technology  United States of America\n\n   teaching international  research  citations income total_score  \\\n0      99.7          72.4      98.7       98.8   34.5        96.1   \n1      97.7          54.6      98.0       99.9   83.7        96.0\n\n   num_students  student_staff_ratio international_students female_male_ratio  \\\n0       20152.0                  8.9                    25%               NaN   \n1        2243.0                  6.9                    27%           33 : 67\n\n   year  \n0  2011  \n1  2011   1\n2 # Retrieve the values at columns and rows 1-3  print ( times_df . iloc [ 1 : 4 , 1 : 4 ])    1\n2\n3\n4                          university_name                   country  teaching\n1     California Institute of Technology  United States of America      97.7\n2  Massachusetts Institute of Technology  United States of America      97.8\n3                    Stanford University  United States of America      98.3   1\n2 # Retrieve the column `total_score`   print ( times_df [ 'total_score' ])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62 0       96.1\n1       96.0\n2       95.6\n3       94.3\n4       94.2\n5       91.2\n6       91.2\n7       91.1\n8       90.6\n9       89.5\n10      87.7\n11      86.9\n12      86.4\n13      83.9\n14      83.4\n15      83.4\n16      82.0\n17      81.0\n18      79.5\n19      79.3\n20      79.2\n21      78.4\n22      78.0\n23      76.5\n24      75.9\n25      75.6\n26      75.3\n27      75.1\n28      75.0\n29      73.8\n        ... \n2573       -\n2574       -\n2575       -\n2576       -\n2577       -\n2578       -\n2579       -\n2580       -\n2581       -\n2582       -\n2583       -\n2584       -\n2585       -\n2586       -\n2587       -\n2588       -\n2589       -\n2590       -\n2591       -\n2592       -\n2593       -\n2594       -\n2595       -\n2596       -\n2597       -\n2598       -\n2599       -\n2600       -\n2601       -\n2602       -\nName: total_score, Length: 2603, dtype: object   1\n2 # Are the last entries after 2006?  print ( shanghai_df . loc [: - 10 ,   'year' ]   >   2006 )    1 Series([], Name: year, dtype: bool)   1\n2 # Was the alumni count higher than 90 for the first ten universities?  print ( shanghai_df . loc [ 0 : 11 ,   'alumni' ]   >   90 )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 0      True\n1      True\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\nName: alumni, dtype: bool   1\n2\n3\n4\n5 # Query `shanghai_df` for universities with total score between 40 and 50  average_schools   =   shanghai_df . query ( 'total_score > 0 and total_score < 50' )  # Print the result  print ( average_schools )      1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127      world_rank                                    university_name  \\\n15           16                  University of Wisconsin - Madison   \n16           17                           University of Washington   \n17           18            University of California, San Francisco   \n18           19                       The Johns Hopkins University   \n19           20                            The University of Tokyo   \n20           21                 University of Michigan - Ann Arbor   \n21           22                                   Kyoto University   \n22           23  The Imperial College of Science, Technology an...   \n23           24                              University of Toronto   \n24           25         University of Illinois at Urbana-Champaign   \n25           26                          University College London   \n26           27       Swiss Federal Institute of Technology Zurich   \n27           28                 Washington University in St. Louis   \n28           29                                New York University   \n29           30                             Rockefeller University   \n30           31                            Northwestern University   \n31           32                                    Duke University   \n32           32               University of Minnesota, Twin Cities   \n33           34            University of California, Santa Barbara   \n34           35                  University of Colorado at Boulder   \n35           36                  The University of Texas at Austin   \n36           37                     University of British Columbia   \n37           38  The University of Texas Southwestern Medical C...   \n38           39    Pennsylvania State University - University Park   \n39           39                              Vanderbilt University   \n40           41                    University of California, Davis   \n41           41                                 Utrecht University   \n42           43  Rutgers, The State University of New Jersey - ...   \n43           43                           University of Pittsburgh   \n44           45                               Karolinska Institute   \n...         ...                                                ...   \n4467         71                                   Ghent University   \n4468         72                   Ecole Normale Superieure - Paris   \n4469         73                                  Aarhus University   \n4470         73                                  Boston University   \n4471         75                                   Brown University   \n4472         75                            University of Groningen   \n4473         77                                  Nagoya University   \n4474         77                               Stockholm University   \n4475         77            Technion-Israel Institute of Technology   \n4476         77                 The Australian National University   \n4477         77                       The University of Queensland   \n4478         82                                  Leiden University   \n4479         83                              University of Florida   \n4480         84                                    Rice University   \n4481         85                                   Osaka University   \n4482         86                            Moscow State University   \n4483         87                The University of Western Australia   \n4484         87                                University of Basel   \n4485         87                           University of Strasbourg   \n4486         90                                          KU Leuven   \n4487         90                              University of Arizona   \n4488         92                              University of Warwick   \n4489         93                           Arizona State University   \n4490         93               University of California, Santa Cruz   \n4491         93                                 University of Utah   \n4492         96                                McMaster University   \n4493         97                                 University of Bonn   \n4494         98                            VU University Amsterdam   \n4495         99                          Michigan State University   \n4496        100                               Texas A&M University\n\n     national_rank  total_score  alumni  award  hici    ns   pub   pcp  year  \n15              14         49.2    43.0   36.3  52.1  46.3  68.7  29.0  2005  \n16              15         48.4    28.8   32.4  53.9  47.1  73.8  27.2  2005  \n17              16         47.8     0.0   37.6  55.6  57.9  58.8  45.2  2005  \n18              17         46.9    51.4   28.3  41.6  52.2  67.7  24.9  2005  \n19               1         46.7    36.0   14.4  38.5  52.1  86.5  34.7  2005  \n20              18         44.9    43.0    0.0  61.9  43.0  76.5  30.9  2005  \n21               2         43.8    39.7   34.1  34.2  37.0  72.3  31.1  2005  \n22               3         43.7    20.8   38.1  40.8  38.2  64.6  40.3  2005  \n23               1         43.1    28.1   19.7  39.3  38.9  76.7  41.9  2005  \n24              19         42.8    41.6   37.4  44.4  34.1  58.0  26.0  2005  \n25               4         42.6    30.7   32.9  37.7  41.5  60.5  38.8  2005  \n26               1         41.7    40.2   37.0  35.1  41.1  43.4  52.4  2005  \n27              20         40.7    25.1   26.6  38.5  46.5  53.9  39.9  2005  \n28              21         38.8    33.8   25.0  43.0  35.3  55.4  26.3  2005  \n29              22         38.2    22.6   59.8  28.3  44.1  24.0  35.9  2005  \n30              23         37.9    21.7   19.3  44.4  33.8  57.6  36.2  2005  \n31              24         37.7    20.8    0.0  47.1  45.3  60.8  38.9  2005  \n32              24         37.7    36.0    0.0  49.7  35.2  68.4  23.8  2005  \n33              26         36.9     0.0   36.0  42.3  39.0  44.1  35.8  2005  \n34              27         36.3    16.6   29.8  40.8  36.6  46.3  29.5  2005  \n35              28         35.5    21.7   17.1  49.1  30.0  54.8  21.7  2005  \n36               2         35.4    20.8   19.3  32.4  32.5  60.4  33.9  2005  \n37              29         34.8    24.3   33.9  31.4  38.2  37.9  31.0  2005  \n38              30         33.4    14.0    0.0  45.8  37.9  59.9  24.0  2005  \n39              30         33.4    12.5   30.2  34.2  24.5  49.2  35.6  2005  \n40              32         32.9     0.0    0.0  46.5  34.5  64.0  29.8  2005  \n41               1         32.9    30.7   21.4  27.2  27.3  55.7  25.9  2005  \n42              33         32.3    15.4   20.4  36.9  32.9  47.1  24.1  2005  \n43              33         32.3    25.1    0.0  40.1  25.9  64.3  28.2  2005  \n44               1         32.1    30.7   27.8  33.3  19.7  47.3  25.1  2005  \n...            ...          ...     ...    ...   ...   ...   ...   ...   ...  \n4467             1         27.8     5.1   13.3  26.9  18.3  57.5  34.5  2015  \n4468             3         27.6    48.9   28.0   6.2  19.5  26.4  60.5  2015  \n4469             2         27.3    11.5   22.1  12.3  25.8  51.8  31.0  2015  \n4470            42         27.3    11.5   11.5  29.1  26.3  49.5  21.8  2015  \n4471            43         27.0    14.5   13.3  26.2  25.1  43.6  32.8  2015  \n4472             2         27.0     0.0   18.8  23.0  21.0  52.6  32.7  2015  \n4473             3         26.7    29.0   25.3  16.8  17.7  44.3  23.1  2015  \n4474             3         26.7    24.1   27.4  18.1  19.4  40.4  25.6  2015  \n4475             2         26.7    23.5   37.6  15.2  18.3  33.3  28.2  2015  \n4476             2         26.7    13.6   19.2  24.8  20.1  45.1  29.1  2015  \n4477             2         26.7    12.6    0.0  22.0  24.0  63.2  29.3  2015  \n4478             3         26.5    17.8    9.4  25.7  22.0  46.9  32.9  2015  \n4479            44         26.2    17.0    0.0  30.9  21.0  58.7  17.3  2015  \n4480            45         26.0    16.2   21.7  28.1  22.8  29.2  34.3  2015  \n4481             4         25.7     8.9    0.0  31.6  26.7  51.7  21.7  2015  \n4482             1         25.3    41.4   33.0   0.0   7.7  46.4  31.3  2015  \n4483             4         24.9    13.6   14.1  24.1  14.5  47.5  28.9  2015  \n4484             4         24.9    19.2   16.3  17.4  21.4  39.2  35.0  2015  \n4485             4         24.9    25.1   28.8  15.9  19.0  34.6  21.7  2015  \n4486             2         24.7     0.0    0.0  30.1  18.6  56.6  30.4  2015  \n4487            46         24.7    14.5    0.0  27.2  27.5  48.4  20.3  2015  \n4488             9         24.6     0.0   29.8  23.7  14.0  39.3  26.8  2015  \n4489            47         24.5     0.0   20.0  22.2  25.5  42.6  19.1  2015  \n4490            47         24.5     0.0    0.0  37.9  33.9  29.0  37.6  2015  \n4491            47         24.5     0.0   11.5  26.5  25.5  46.7  18.7  2015  \n4492             4         24.4    12.6   18.8  23.2  15.1  44.5  22.5  2015  \n4493             4         24.3    15.4   19.8  17.4  21.1  39.8  25.9  2015  \n4494             4         24.2     0.0    0.0  27.8  18.0  55.5  33.3  2015  \n4495            50         24.0     8.9    0.0  30.7  21.8  50.6  18.9  2015  \n4496            51         23.9     0.0    0.0  34.3  22.7  49.5  20.9  2015\n\n[948 rows x 11 columns]   1 shanghai_df . query ( \"national_rank == 1 and world_rank == 1\" )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       world_rank \n       university_name \n       national_rank \n       total_score \n       alumni \n       award \n       hici \n       ns \n       pub \n       pcp \n       year \n     \n   \n   \n      1 shanghai_df . query ( \"alumni < 20\" )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       world_rank \n       university_name \n       national_rank \n       total_score \n       alumni \n       award \n       hici \n       ns \n       pub \n       pcp \n       year \n     \n   \n   \n     \n       12 \n       13 \n       University of California, San Diego \n       11 \n       51.0 \n       17.7 \n       34.7 \n       59.8 \n       56.5 \n       64.5 \n       46.6 \n       2005 \n     \n     \n       17 \n       18 \n       University of California, San Francisco \n       16 \n       47.8 \n       0.0 \n       37.6 \n       55.6 \n       57.9 \n       58.8 \n       45.2 \n       2005 \n     \n     \n       33 \n       34 \n       University of California, Santa Barbara \n       26 \n       36.9 \n       0.0 \n       36.0 \n       42.3 \n       39.0 \n       44.1 \n       35.8 \n       2005 \n     \n     \n       34 \n       35 \n       University of Colorado at Boulder \n       27 \n       36.3 \n       16.6 \n       29.8 \n       40.8 \n       36.6 \n       46.3 \n       29.5 \n       2005 \n     \n     \n       38 \n       39 \n       Pennsylvania State University - University Park \n       30 \n       33.4 \n       14.0 \n       0.0 \n       45.8 \n       37.9 \n       59.9 \n       24.0 \n       2005 \n     \n     \n       39 \n       39 \n       Vanderbilt University \n       30 \n       33.4 \n       12.5 \n       30.2 \n       34.2 \n       24.5 \n       49.2 \n       35.6 \n       2005 \n     \n     \n       40 \n       41 \n       University of California, Davis \n       32 \n       32.9 \n       0.0 \n       0.0 \n       46.5 \n       34.5 \n       64.0 \n       29.8 \n       2005 \n     \n     \n       42 \n       43 \n       Rutgers, The State University of New Jersey - ... \n       33 \n       32.3 \n       15.4 \n       20.4 \n       36.9 \n       32.9 \n       47.1 \n       24.1 \n       2005 \n     \n     \n       47 \n       47 \n       University of California, Irvine \n       35 \n       31.8 \n       0.0 \n       30.0 \n       32.4 \n       28.5 \n       48.2 \n       31.1 \n       2005 \n     \n     \n       49 \n       50 \n       University of Southern California \n       37 \n       31.7 \n       0.0 \n       27.3 \n       37.7 \n       23.6 \n       52.8 \n       25.8 \n       2005 \n     \n     \n       54 \n       55 \n       University of North Carolina at Chapel Hill \n       39 \n       30.3 \n       12.5 \n       0.0 \n       35.1 \n       32.8 \n       59.5 \n       27.3 \n       2005 \n     \n     \n       55 \n       56 \n       The Australian National University \n       1 \n       30.2 \n       17.7 \n       12.9 \n       36.9 \n       29.0 \n       45.1 \n       27.8 \n       2005 \n     \n     \n       57 \n       57 \n       University of Florida \n       40 \n       30.0 \n       15.4 \n       0.0 \n       35.1 \n       25.0 \n       65.2 \n       25.8 \n       2005 \n     \n     \n       58 \n       57 \n       University of Zurich \n       2 \n       30.0 \n       12.5 \n       27.3 \n       19.2 \n       30.3 \n       47.2 \n       30.6 \n       2005 \n     \n     \n       61 \n       62 \n       Osaka University \n       3 \n       29.3 \n       12.5 \n       0.0 \n       23.6 \n       31.1 \n       66.8 \n       29.2 \n       2005 \n     \n     \n       62 \n       63 \n       The Ohio State University - Columbus \n       41 \n       29.2 \n       17.7 \n       0.0 \n       40.8 \n       21.5 \n       61.2 \n       19.5 \n       2005 \n     \n     \n       63 \n       64 \n       University of Bristol \n       7 \n       28.8 \n       10.9 \n       18.2 \n       30.4 \n       24.5 \n       47.5 \n       27.4 \n       2005 \n     \n     \n       70 \n       71 \n       University of Heidelberg \n       3 \n       28.0 \n       10.9 \n       27.7 \n       20.8 \n       20.9 \n       48.1 \n       26.9 \n       2005 \n     \n     \n       72 \n       73 \n       Tohoku University \n       4 \n       27.8 \n       18.8 \n       0.0 \n       19.2 \n       26.9 \n       65.3 \n       29.0 \n       2005 \n     \n     \n       73 \n       73 \n       University of Arizona \n       44 \n       27.8 \n       0.0 \n       0.0 \n       29.4 \n       36.8 \n       55.8 \n       25.7 \n       2005 \n     \n     \n       74 \n       75 \n       Purdue University - West Lafayette \n       45 \n       27.7 \n       18.8 \n       17.1 \n       27.2 \n       21.4 \n       49.8 \n       19.4 \n       2005 \n     \n     \n       75 \n       76 \n       University of Helsinki \n       1 \n       27.4 \n       18.8 \n       18.2 \n       15.7 \n       21.4 \n       54.5 \n       27.5 \n       2005 \n     \n     \n       76 \n       77 \n       Michigan State University \n       46 \n       26.9 \n       12.5 \n       0.0 \n       37.7 \n       26.6 \n       51.0 \n       18.7 \n       2005 \n     \n     \n       79 \n       80 \n       Boston University \n       48 \n       26.1 \n       15.4 \n       0.0 \n       31.4 \n       28.1 \n       50.8 \n       17.5 \n       2005 \n     \n     \n       80 \n       80 \n       King's College London \n       9 \n       26.1 \n       16.6 \n       23.5 \n       20.8 \n       17.4 \n       44.6 \n       24.8 \n       2005 \n     \n     \n       81 \n       82 \n       University of Melbourne \n       2 \n       26.0 \n       15.4 \n       14.4 \n       22.2 \n       18.7 \n       53.5 \n       19.9 \n       2005 \n     \n     \n       82 \n       83 \n       University of Nottingham \n       10 \n       25.9 \n       15.4 \n       20.4 \n       20.8 \n       19.0 \n       45.6 \n       24.8 \n       2005 \n     \n     \n       85 \n       86 \n       Brown University \n       49 \n       25.4 \n       0.0 \n       13.9 \n       29.4 \n       25.5 \n       40.7 \n       27.9 \n       2005 \n     \n     \n       86 \n       87 \n       Indiana University Bloomington \n       50 \n       25.2 \n       14.0 \n       18.2 \n       24.8 \n       21.2 \n       42.0 \n       18.2 \n       2005 \n     \n     \n       88 \n       89 \n       Texas A&M University - College Station \n       51 \n       25.1 \n       0.0 \n       0.0 \n       32.4 \n       24.4 \n       55.0 \n       20.4 \n       2005 \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       4867 \n       401-500 \n       University of Jena \n       29-39 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       9.3 \n       34.0 \n       17.1 \n       2015 \n     \n     \n       4868 \n       401-500 \n       University of Jyvaskyla \n       4-6 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       10.3 \n       26.7 \n       14.1 \n       2015 \n     \n     \n       4869 \n       401-500 \n       University of Konstanz \n       29-39 \n       NaN \n       0.0 \n       0.0 \n       12.1 \n       11.4 \n       22.2 \n       13.5 \n       2015 \n     \n     \n       4870 \n       401-500 \n       University of KwaZulu-Natal \n       3-4 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       8.4 \n       32.8 \n       16.6 \n       2015 \n     \n     \n       4871 \n       401-500 \n       University of Ljubljana \n       1 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       7.7 \n       35.1 \n       14.2 \n       2015 \n     \n     \n       4872 \n       401-500 \n       University of Maryland, Baltimore County \n       126-146 \n       NaN \n       0.0 \n       0.0 \n       17.4 \n       6.5 \n       17.8 \n       17.3 \n       2015 \n     \n     \n       4873 \n       401-500 \n       University of Milan - Bicocca \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       5.0 \n       5.6 \n       30.9 \n       21.4 \n       2015 \n     \n     \n       4874 \n       401-500 \n       University of Nice Sophia Antipolis \n       19-22 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       16.3 \n       26.2 \n       12.7 \n       2015 \n     \n     \n       4875 \n       401-500 \n       University of Oklahoma - Norman \n       126-146 \n       NaN \n       0.0 \n       0.0 \n       5.1 \n       10.0 \n       28.0 \n       14.0 \n       2015 \n     \n     \n       4876 \n       401-500 \n       University of Palermo \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       6.3 \n       6.6 \n       28.2 \n       14.8 \n       2015 \n     \n     \n       4877 \n       401-500 \n       University of Parma \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       13.6 \n       2.1 \n       26.7 \n       19.6 \n       2015 \n     \n     \n       4878 \n       401-500 \n       University of Pavia \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       5.0 \n       5.7 \n       30.7 \n       19.7 \n       2015 \n     \n     \n       4879 \n       401-500 \n       University of Perugia \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       7.5 \n       29.3 \n       18.5 \n       2015 \n     \n     \n       4880 \n       401-500 \n       University of Quebec \n       19-20 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       9.8 \n       33.3 \n       16.8 \n       2015 \n     \n     \n       4881 \n       401-500 \n       University of Regensburg \n       29-39 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       13.9 \n       27.7 \n       15.2 \n       2015 \n     \n     \n       4882 \n       401-500 \n       University of Rennes 1 \n       19-22 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       9.2 \n       28.1 \n       11.2 \n       2015 \n     \n     \n       4883 \n       401-500 \n       University of Rhode Island \n       126-146 \n       NaN \n       0.0 \n       0.0 \n       15.2 \n       6.1 \n       21.1 \n       16.0 \n       2015 \n     \n     \n       4884 \n       401-500 \n       University of Roma - Tor Vergata \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       8.8 \n       33.7 \n       19.2 \n       2015 \n     \n     \n       4885 \n       401-500 \n       University of Rostock \n       29-39 \n       NaN \n       0.0 \n       0.0 \n       8.6 \n       8.4 \n       25.0 \n       13.5 \n       2015 \n     \n     \n       4886 \n       401-500 \n       University of Santiago Compostela \n       9-13 \n       NaN \n       0.0 \n       0.0 \n       7.1 \n       6.1 \n       31.1 \n       13.2 \n       2015 \n     \n     \n       4887 \n       401-500 \n       University of Science, Malaysia \n       2 \n       NaN \n       0.0 \n       0.0 \n       7.1 \n       3.3 \n       30.6 \n       15.7 \n       2015 \n     \n     \n       4888 \n       401-500 \n       University of Seville \n       9-13 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       7.5 \n       33.7 \n       11.3 \n       2015 \n     \n     \n       4889 \n       401-500 \n       University of Surrey \n       34-37 \n       NaN \n       0.0 \n       0.0 \n       8.6 \n       4.9 \n       27.0 \n       18.0 \n       2015 \n     \n     \n       4890 \n       401-500 \n       University of Szeged \n       1-2 \n       NaN \n       0.0 \n       13.3 \n       3.6 \n       3.4 \n       21.8 \n       12.8 \n       2015 \n     \n     \n       4891 \n       401-500 \n       University of the Basque Country \n       9-13 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       7.1 \n       36.1 \n       13.5 \n       2015 \n     \n     \n       4892 \n       401-500 \n       University of Trieste \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       5.0 \n       10.9 \n       25.1 \n       20.1 \n       2015 \n     \n     \n       4893 \n       401-500 \n       University of Zaragoza \n       9-13 \n       NaN \n       0.0 \n       0.0 \n       7.6 \n       5.1 \n       33.3 \n       13.1 \n       2015 \n     \n     \n       4894 \n       401-500 \n       Utah State University \n       126-146 \n       NaN \n       13.6 \n       0.0 \n       3.6 \n       10.8 \n       25.1 \n       15.5 \n       2015 \n     \n     \n       4895 \n       401-500 \n       Vienna University of Technology \n       4-6 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       12.2 \n       28.8 \n       22.9 \n       2015 \n     \n     \n       4896 \n       401-500 \n       Wake Forest University \n       126-146 \n       NaN \n       0.0 \n       0.0 \n       14.9 \n       7.5 \n       25.0 \n       11.9 \n       2015 \n     \n     4122 rows \u00d7 11 columns",
            "title": "Index and Pull Values"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#method-chaining",
            "text": "pipe()  to chain operations and thus eliminate the need for intermediate DataFrames.  Without this operator, instead of writing  df.pipe(f).pipe(g).pipe(h)  write:  h(g(f(df))) . This becomes harder to follow once the number of nested functions grows large.  1\n2\n3\n4\n5 # Extract info  def   extract_info ( input_df ,   name ): \n     df   =   input_df . copy () \n     info_df   =   pd . DataFrame ({ 'nb_rows' :   df . shape [ 0 ],   'nb_cols' :   df . shape [ 1 ],   'name' :   name },   index = range ( 1 )) \n     return   info_df    1\n2\n3\n4 # Gather all info     all_info   =   pd . concat ([ times_df . pipe ( extract_info ,   'times' ),   shanghai_df . pipe ( extract_info ,   'shanghai' )])  print ( all_info )    1\n2\n3        name  nb_cols  nb_rows\n0     times       14     2603\n0  shanghai       11     4897   Select the common columns.  1\n2\n3\n4 common_columns   =   set ( shanghai_df . columns )   &   set ( times_df . columns )  # Return `common_columns`  print ( common_columns )    1 {'year', 'university_name', 'total_score', 'world_rank'}",
            "title": "Method Chaining"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#clean-the-data",
            "text": "1\n2\n3\n4\n5 # Clean up the `world_rank`   def   clean_world_rank ( input_df ): \n     df   =   input_df . copy () \n     df . world_rank   =   df . world_rank . str . split ( '-' ) . str [ 0 ] . str . split ( '=' ) . str [ 0 ] \n     return   df    1\n2\n3\n4\n5 # Assign the common years of `shanghai_df` and `times_df` to `common_years`      common_years   =   set ( shanghai_df . year )   &   set ( times_df . year )   # Print `common_years`  print ( common_years )    1 {2011, 2012, 2013, 2014, 2015}   1\n2\n3\n4 # Filter years  def   filter_year ( input_df ,   years ): \n     df   =   input_df . copy () \n     return   df . query ( 'year in {}' . format ( list ( years )))    1\n2\n3\n4\n5\n6\n7\n8\n9 # Clean `times_df` and `shanghai_df`  cleaned_times_df   =   ( times_df . loc [:,   common_columns ] \n                             . pipe ( filter_year ,   common_years ) \n                             . pipe ( clean_world_rank ) \n                             . assign ( name = 'times' ))  cleaned_shanghai_df   =   ( shanghai_df . loc [:,   common_columns ] \n                                   . pipe ( filter_year ,   common_years ) \n                                   . pipe ( clean_world_rank ) \n                                   . assign ( name = 'shanghai' ))",
            "title": "Clean the Data"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#concatenate-into-a-single-dataframe",
            "text": "38% of data missing from the  total_score column : drop this column with the  .drop  method.  1\n2\n3\n4\n5\n6\n7\n8 # Compose `ranking_df` with `cleaned_times_df` and `cleaned_shanghai_df`  ranking_df   =   pd . concat ([ cleaned_times_df ,   cleaned_shanghai_df ])  # Calculate the percentage of missing data  missing_data   =   100   *   pd . isnull ( ranking_df . total_score ) . sum ()   /   len ( ranking_df )  # Drop the `total_score` column of `ranking_df`  ranking_df   =   ranking_df . drop ( 'total_score' ,   axis = 1 )",
            "title": "Concatenate into a single DataFrame"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#memory-optimization",
            "text": "Memory can start to play a big part in how fast the pipelines can run. Without the \u201cdeep\u201d flag turned on, Pandas won\u2019t estimate memory consumption for the  object  dtype:  category  when dealing with categorical data, etc.  int64  or even  int16  takes less memory.  1\n2 # Print the memory usage of `ranking_df`   ranking_df . info ()    1\n2\n3\n4\n5\n6\n7\n8\n9 <class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nworld_rank         3686 non-null object\nuniversity_name    3685 non-null object\nname               3686 non-null object\ndtypes: int64(1), object(3)\nmemory usage: 144.0+ KB   1\n2 # Print the deep memory usage of `ranking_df`   ranking_df . info ( memory_usage = \"deep\" )    1\n2\n3\n4\n5\n6\n7\n8\n9 <class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nworld_rank         3686 non-null object\nuniversity_name    3685 non-null object\nname               3686 non-null object\ndtypes: int64(1), object(3)\nmemory usage: 803.1 KB",
            "title": "Memory Optimization"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#cast-object-types",
            "text": "\u2026to more appropriate ones.  1\n2\n3\n4\n5\n6\n7\n8\n9 def   memory_change ( input_df ,   column ,   dtype ): \n     df   =   input_df . copy () \n     old   =   round ( df [ column ] . memory_usage ( deep = True )   /   1024 ,   2 )   # In KB \n     new   =   round ( df [ column ] . astype ( dtype ) . memory_usage ( deep = True )   /   1024 ,   2 ) # In KB \n     change   =   round ( 100   *   ( old   -   new )   /   ( old ),   2 ) \n     report   =   ( \"The inital memory footprint for {column} is: {old}KB. \\n \"  \n               \"The casted {column} now takes: {new}KB. \\n \" \n               \"A change of {change} %.\" ) . format ( ** locals ()) \n     return   report    1\n2\n3 # parameters:  # input_df, column, dtype  print ( memory_change ( ranking_df , 'world_rank' ,   'int16' ))    1\n2\n3 The inital memory footprint for world_rank is: 244.43KB.\nThe casted world_rank now takes: 36.0KB.\nA change of 85.27 %.   1 print ( memory_change ( ranking_df , 'university_name' ,   'category' ))    1\n2\n3 The inital memory footprint for university_name is: 329.98KB.\nThe casted university_name now takes: 121.37KB.\nA change of 63.22 %.   1 print ( memory_change ( ranking_df , 'name' ,   'category' ))    1\n2\n3 The inital memory footprint for name is: 257.49KB.\nThe casted name now takes: 32.6KB.\nA change of 87.34 %.   1\n2 # Cast `world_rank` as type `int16`  ranking_df . world_rank   =   ranking_df . world_rank . astype ( 'int16' )    1\n2 # Cast `unversity_name` as type `category`  ranking_df . university_name   =   ranking_df . university_name . astype ( 'category' )    1\n2 # Cast `name` as type `category`  ranking_df . name   =   ranking_df . name . astype ( 'category' )    1\n2 # Double check the memory usage after type casting  ranking_df . info ( memory_usage = 'deep' )    1\n2\n3\n4\n5\n6\n7\n8\n9 <class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nuniversity_name    3685 non-null category\nworld_rank         3686 non-null int16\nname               3686 non-null category\ndtypes: category(2), int16(1), int64(1)\nmemory usage: 161.2 KB   From 803.1 KB!  We have a well-formed data set (i.e. it is in a tidy state) with an optimized memory footprint, data analysis can start.",
            "title": "Cast Object Types"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#replace-rank-subset-groupby",
            "text": "",
            "title": "Replace, Rank, Subset, Groupby"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#replace",
            "text": "\u2018Massachusetts Institute of Technology (MIT)\u2019 and \u2018Massachusetts Institute of Technology\u2019 are two different records of the same university. Thus, change the first name to the latter.  1\n2 # Query for the rows with university name 'Massachusetts Institute of Technology (MIT)'  print ( ranking_df . query ( \"university_name == 'Massachusetts Institute of Technology (MIT)'\" ))    1\n2\n3\n4\n5\n6       year                              university_name  world_rank      name\n3016  2011  Massachusetts Institute of Technology (MIT)           3  shanghai\n3516  2012  Massachusetts Institute of Technology (MIT)           3  shanghai\n3801  2013  Massachusetts Institute of Technology (MIT)           4  shanghai\n3899  2014  Massachusetts Institute of Technology (MIT)           3  shanghai\n4399  2015  Massachusetts Institute of Technology (MIT)           3  shanghai   1 ranking_df . loc [ ranking_df . university_name   ==   'Massachusetts Institute of Technology (MIT)' ,   'university_name' ]   =   'Massachusetts Institute of Technology'    1 ranking_df . university_name . head ()    1\n2\n3\n4\n5\n6\n7 0                       Harvard University\n1       California Institute of Technology\n2    Massachusetts Institute of Technology\n3                      Stanford University\n4                     Princeton University\nName: university_name, dtype: category\nCategories (785, object): [Aalborg University, Aalto University, Aarhus University, Aberystwyth University, ..., \u00c9cole Normale Sup\u00e9rieure, \u00c9cole Normale Sup\u00e9rieure de Lyon, \u00c9cole Polytechnique, \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne]",
            "title": "Replace"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#rank-subset-groupby",
            "text": "To find the 5 (more generally  n ) top universities over the years, for each ranking system, here is how to do it in pseudo-code:   For each year (in the  year  column) and for each ranking system (in the  name  column):  Select the subset of the data for this given year and the given ranking system.  Select the 5 top universities and store them in a list.  Store the result in a dictionary with (year, name) as key and the list of the universities (in descending order) as the value.      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 # Load in `itertools`  import   itertools  # Initialize `ranking`  ranking   =   {}  for   year ,   name   in   itertools . product ( common_years ,   [ \"times\" ,   \"shanghai\" ]): \n     s   =   ( ranking_df . loc [ lambda   df :   (( df . year   ==   year )   &   ( df . name   ==   name ) \n                                     &   ( df . world_rank . isin ( range ( 1 , 6 )))),   :] \n                    . sort_values ( 'world_rank' ,   ascending = False ) \n                    . university_name ) \n     ranking [( year ,   name )]   =   list ( s )  # Print `ranking`  print ( ranking )    1 {(2011, 'times'): ['Princeton University', 'Stanford University', 'Massachusetts Institute of Technology', 'California Institute of Technology', 'Harvard University'], (2011, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2012, 'times'): ['Princeton University', 'University of Oxford', 'Harvard University', 'Stanford University', 'California Institute of Technology'], (2012, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2013, 'times'): ['Massachusetts Institute of Technology', 'Harvard University', 'Stanford University', 'University of Oxford', 'California Institute of Technology'], (2013, 'shanghai'): ['University of Cambridge', 'Massachusetts Institute of Technology', 'University of California, Berkeley', 'Stanford University', 'Harvard University'], (2014, 'times'): ['Massachusetts Institute of Technology', 'Stanford University', 'Harvard University', 'University of Oxford', 'California Institute of Technology'], (2014, 'shanghai'): ['University of Cambridge', 'University of California-Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2015, 'times'): ['University of Cambridge', 'Stanford University', 'University of Oxford', 'Harvard University', 'California Institute of Technology'], (2015, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University']}   We have this ranking dictionary, let\u2019s find out how much (in percentage) both ranking methods differ over the years: the two are 100% set-similar if the selected 5-top universities are the same even though they aren\u2019t ranked the same.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 # Import `defaultdict`  from   collections   import   defaultdict  # Initialize `compare`  compare   =   defaultdict ( list )  # Initialize `exact_similarity` and `set_similarity`  exact_similarity   =   {}  set_similarity   =   {}  for   ( year ,   method ),   universities   in   ranking . items (): \n     compare [ year ] . append ( universities )  for   year ,   ranks   in   compare . items (): \n     set_similarity [ year ]   =   100   *   len ( set ( ranks [ 0 ])   &   set ( ranks [ 1 ]))   /   5.0  # Print `set_similarity`    print ( set_similarity )    1 {2011: 60.0, 2012: 40.0, 2013: 60.0, 2014: 60.0, 2015: 60.0}   Is there a better, more idiomatic Pandas way?  1\n2\n3\n4\n5 # Construct a DataFrame with the top 5 universities   top_5_df   =   ranking_df . loc [ lambda   df :   df . world_rank . isin ( range ( 1 ,   6 )),   :]  # Print the first rows of `top_5_df`  top_5_df . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       year \n       university_name \n       world_rank \n       name \n     \n   \n   \n     \n       0 \n       2011 \n       Harvard University \n       1 \n       times \n     \n     \n       1 \n       2011 \n       California Institute of Technology \n       2 \n       times \n     \n     \n       2 \n       2011 \n       Massachusetts Institute of Technology \n       3 \n       times \n     \n     \n       3 \n       2011 \n       Stanford University \n       4 \n       times \n     \n     \n       4 \n       2011 \n       Princeton University \n       5 \n       times \n     \n      1 top_5_df . tail ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       year \n       university_name \n       world_rank \n       name \n     \n   \n   \n     \n       4397 \n       2015 \n       Harvard University \n       1 \n       shanghai \n     \n     \n       4398 \n       2015 \n       Stanford University \n       2 \n       shanghai \n     \n     \n       4399 \n       2015 \n       Massachusetts Institute of Technology \n       3 \n       shanghai \n     \n     \n       4400 \n       2015 \n       University of California, Berkeley \n       4 \n       shanghai \n     \n     \n       4401 \n       2015 \n       University of Cambridge \n       5 \n       shanghai \n     \n       1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 # Compute the similarity  def   compute_set_similarity ( s ): \n     pivoted   =   s . pivot ( values = 'world_rank' ,   columns = 'name' ,   index = 'university_name' ) . dropna () \n     set_simlarity   =   100   *   len (( set ( pivoted [ 'shanghai' ] . index )   &   set ( pivoted [ 'times' ] . index )))   /   5 \n     return   set_simlarity  # Group `top_5_df` by `year`      grouped_df   =   top_5_df . groupby ( 'year' )  # Use `compute_set_similarity` to construct a DataFrame  setsimilarity_df   =   pd . DataFrame ({ 'set_similarity' :   grouped_df . apply ( compute_set_similarity )}) . reset_index ()  # Print the first rows of `setsimilarity_df`  setsimilarity_df . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       year \n       set_similarity \n     \n   \n   \n     \n       0 \n       2011 \n       60.0 \n     \n     \n       1 \n       2012 \n       40.0 \n     \n     \n       2 \n       2013 \n       60.0 \n     \n     \n       3 \n       2014 \n       60.0 \n     \n     \n       4 \n       2015 \n       60.0",
            "title": "Rank, Subset, Groupby"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#visualization",
            "text": "",
            "title": "Visualization"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#matplotlib",
            "text": "1 import   matplotlib.pyplot   as   plt    1\n2\n3\n4 # Plot a scatterplot with `total_score` and `alumni`  shanghai_df . plot . scatter ( 'total_score' ,   'alumni' ,   c = 'year' ,   colormap = 'viridis' )  plt . show ()",
            "title": "Matplotlib"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#remove-values",
            "text": "There are some 0 values for the alumni column (0, -,  NaN , etc.). Remove them.  1\n2\n3\n4\n5\n6\n7\n8 # Replace `-` entries with NaN values  times_df [ 'total_score' ]   =   times_df [ 'total_score' ] . replace ( \"-\" ,   \"NaN\" ) . astype ( 'float' )  # Drop all rows with NaN values for `num_students`   times_df   =   times_df . dropna ( subset = [ 'num_students' ],   how = 'all' )  # Cast the remaining rows with `num_students` as int  times_df [ 'num_students' ]   =   times_df [ 'num_students' ] . astype ( 'int' )    1\n2\n3\n4 # Plot a scatterplot with `total_score` and `num_students`  times_df . plot . scatter ( 'total_score' ,   'num_students' ,   c = 'year' ,   colormap = 'viridis' )  plt . show ()",
            "title": "Remove values"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#seaborn",
            "text": "The Seaborn plotting tool is mainly used to create statistical plots that are visually appealing.  1\n2\n3\n4 import   seaborn   as   sns  # Set the Seaborn theme if desired  sns . set_style ( 'darkgrid' )    1\n2\n3\n4\n5\n6\n7\n8 # Abbreviate country names of United States and United Kingdom  times_df [ 'country' ]   =   times_df [ 'country' ] . replace ( \"United States of America\" ,   \"USA\" ) . replace ( \"United Kingdom\" ,   \"UK\" )  # Count the frequency of countries   count   =   times_df [ 'country' ] . value_counts ()[: 10 ]  # Convert the top 10 countries to a DataFrame   df   =   count . to_frame ()    1\n2\n3\n4\n5\n6 # Reset the index   #df.reset_index(level=0, inplace=True)  # or...  df [ 'index1' ]   =   df . index  df     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       country \n       index1 \n     \n   \n   \n     \n       USA \n       625 \n       USA \n     \n     \n       UK \n       286 \n       UK \n     \n     \n       Germany \n       150 \n       Germany \n     \n     \n       Australia \n       117 \n       Australia \n     \n     \n       Canada \n       108 \n       Canada \n     \n     \n       Japan \n       98 \n       Japan \n     \n     \n       Italy \n       94 \n       Italy \n     \n     \n       China \n       82 \n       China \n     \n     \n       Netherlands \n       75 \n       Netherlands \n     \n     \n       France \n       73 \n       France \n     \n      1\n2 # Rename the columns  df . columns   =   [ 'count' ,   'country' ,]    1\n2\n3\n4\n5 # Plot a barplot with `country` and `count`  sns . barplot ( x = 'country' ,   y = 'count' ,   data = df )  sns . despine ()  plt . show ()",
            "title": "Seaborn"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#filter-rows",
            "text": "1 times_df_filtered   =   times_df . loc [ times_df [ 'country' ] . isin ([ 'USA' ,   'UK' ,   'Canada' ,   'Australia' ,   'Germany' ])]    1\n2\n3\n4\n5 # Barplot with `country` and `total_score`  sns . barplot ( x = 'country' ,   y = 'total_score' ,   data = times_df_filtered )  sns . despine ()  plt . show ()",
            "title": "Filter rows"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#correlation",
            "text": "1\n2\n3 import   numpy   as   np  np . seterr ( invalid = 'ignore' )    1 {'divide': 'warn', 'invalid': 'warn', 'over': 'warn', 'under': 'ignore'}   1\n2\n3 sns . pairplot ( times_df ,   hue = 'country' )  plt . show ()     1\n2\n3 g   =   sns . FacetGrid ( times_df_filtered ,   col = 'country' ,   hue = 'country' )  g . map ( sns . regplot ,   'year' ,   'total_score' ) . set ( xlim = ( 2010 ,   2015 ),   ylim = ( 0 , 100 ))  g . fig . subplots_adjust ( wspace =. 2 )      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 sns . set ( style = \"white\" )  # Compute the correlation matrix  corr   =   times_df . corr ()  # Generate a mask for the upper triangle  mask   =   np . zeros_like ( corr ,   dtype = np . bool )  mask [ np . triu_indices_from ( mask )]   =   True  # Set up the matplotlib figure  f ,   ax   =   plt . subplots ( figsize = ( 11 ,   9 ))  # Generate a custom diverging colormap  cmap   =   sns . diverging_palette ( 220 ,   10 ,   as_cmap = True )  # Draw the heatmap with the mask and correct aspect ratio  sns . heatmap ( corr ,   mask = mask ,   cmap = cmap ,   vmax =. 3 , \n             square = True ,   linewidths =. 5 ,   ax = ax )  plt . show ()",
            "title": "Correlation"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#to-go-beyond",
            "text": "with  Group-by .",
            "title": "To go beyond"
        },
        {
            "location": "/Exploratory Data Analysis/",
            "text": "CONTENT\n\n\nImport the Data\n\n\ndigits\n\n\niris\n\n\n\n\n\n\nBasic Description of the Data\n\n\nDescribing The Data\n\n\nFirst and Last DataFrame Rows\n\n\nSample the Data\n\n\n\n\n\n\nQueries\n\n\nThe Challenges of Data\n\n\nMissing Values\n\n\nDelete\n\n\nImpute\n\n\nOutliers\n\n\n\n\n\n\nThe Data\u2019s Features\n\n\nFeature Engineering\n\n\nEncode categorical variables into numerical ones\n\n\nBin continuous variables in groups\n\n\nScale features\n\n\n\n\n\n\nFeature Selection\n\n\n\n\n\n\nPatterns In the Data\n\n\nCorrelation Identification with PCA from scikit-learn\n\n\nMatplotlib\n\n\nBokeh\n\n\n\n\n\n\nCorrelation Identification with Pandas\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nImport the Data\n\u00b6\n\n\n\n\nsep\n, delimiter.\n\n\ndelimiter\n, delimiter.\n\n\nnames\n, column names to use.\n\n\n\n\nindex_col\n, column to use as the row labels.\n\n\n\n\n\n\nread_table()\n, general delimited files.\n\n\n\n\nread_excel()\n, Excel files.\n\n\nread_fwf()\n, Fixed-Width Formatted data.\n\n\nread_clipboard\n, data copied to the clipboard.\n\n\nread_sql()\n, SQL query.\n\n\n\n\nhttp://pandas.pydata.org/pandas-docs/version/0.18.1/api.html#input-output\n\n\n1\n2\n3\n%\npylab\n \ninline\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\ndigits\n\u00b6\n\n\n1\n2\n3\n4\n5\n# Load in the data with `read_csv()`\n\n\ndigits\n \n=\n \npd\n.\nread_csv\n(\n\"http://archive.ics.uci.edu/ml/machine-learning-databases/optdigits/optdigits.tra\"\n,\n\n                     \nheader\n=\nNone\n)\n\n\n\ndigits\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n      \n4\n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n8\n\n      \n9\n\n      \n...\n\n      \n55\n\n      \n56\n\n      \n57\n\n      \n58\n\n      \n59\n\n      \n60\n\n      \n61\n\n      \n62\n\n      \n63\n\n      \n64\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n6\n\n      \n15\n\n      \n12\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n7\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n6\n\n      \n14\n\n      \n7\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n10\n\n      \n16\n\n      \n6\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n7\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n10\n\n      \n16\n\n      \n15\n\n      \n3\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n8\n\n      \n15\n\n      \n16\n\n      \n13\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n9\n\n      \n14\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n7\n\n    \n\n    \n\n      \n3\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n3\n\n      \n11\n\n      \n16\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n15\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n4\n\n    \n\n    \n\n      \n4\n\n      \n0\n\n      \n0\n\n      \n5\n\n      \n14\n\n      \n4\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n4\n\n      \n12\n\n      \n14\n\n      \n7\n\n      \n0\n\n      \n0\n\n      \n6\n\n    \n\n  \n\n\n\n\n5 rows \u00d7 65 columns\n\n\n\n\n\nFind out about the \ndataset\n.\n\n\niris\n\u00b6\n\n\nAnother classical dataset.\n\n\n1\n2\n3\n4\n5\niris\n \n=\n \npd\n.\nread_csv\n(\n\"http://mlr.cs.umass.edu/ml/machine-learning-databases/iris/iris.data\"\n)\n\n\n\niris\n.\ncolumns\n \n=\n \n[\n'Sepal_Length'\n,\n \n'Sepal_Width'\n,\n \n'Petal_Length'\n,\n \n'Petal_Width'\n,\n \n'Class'\n]\n\n\n\niris\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n2\n\n      \n4.6\n\n      \n3.1\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n3\n\n      \n5.0\n\n      \n3.6\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n4\n\n      \n5.4\n\n      \n3.9\n\n      \n1.7\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n  \n\n\n\n\n\n\n\nBasic Description of the Data\n\u00b6\n\n\nDescribing The Data\n\u00b6\n\n\n1\niris\n.\ndtypes\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nSepal_Length    float64\nSepal_Width     float64\nPetal_Length    float64\nPetal_Width     float64\nClass            object\ndtype: object\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\ndef\n \nget_var_category\n(\nseries\n):\n\n    \nunique_count\n \n=\n \nseries\n.\nnunique\n(\ndropna\n=\nFalse\n)\n\n    \ntotal_count\n \n=\n \nlen\n(\nseries\n)\n\n    \nif\n \npd\n.\napi\n.\ntypes\n.\nis_numeric_dtype\n(\nseries\n):\n\n        \nreturn\n \n'Numerical'\n\n    \nelif\n \npd\n.\napi\n.\ntypes\n.\nis_datetime64_dtype\n(\nseries\n):\n\n        \nreturn\n \n'Date'\n\n    \nelif\n \nunique_count\n==\ntotal_count\n:\n\n        \nreturn\n \n'Text (Unique)'\n\n    \nelse\n:\n\n        \nreturn\n \n'Categorical'\n\n\n\ndef\n \nprint_categories\n(\ndf\n):\n\n    \nfor\n \ncolumn_name\n \nin\n \ndf\n.\ncolumns\n:\n\n        \nprint\n(\ncolumn_name\n,\n \n\": \"\n,\n \nget_var_category\n(\ndf\n[\ncolumn_name\n]))\n\n\n\n\n\n\n\n1\nprint_categories\n(\niris\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nSepal_Length\n \n:\n  \nNumerical\n\n\nSepal_Width\n \n:\n  \nNumerical\n\n\nPetal_Length\n \n:\n  \nNumerical\n\n\nPetal_Width\n \n:\n  \nNumerical\n\n\nClass\n \n:\n  \nCategorical\n\n\n\n\n\n\n\n1\ndigits\n.\ndescribe\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n      \n4\n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n8\n\n      \n9\n\n      \n...\n\n      \n55\n\n      \n56\n\n      \n57\n\n      \n58\n\n      \n59\n\n      \n60\n\n      \n61\n\n      \n62\n\n      \n63\n\n      \n64\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n3823.0\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n...\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n    \n\n    \n\n      \nmean\n\n      \n0.0\n\n      \n0.301334\n\n      \n5.481821\n\n      \n11.805912\n\n      \n11.451478\n\n      \n5.505362\n\n      \n1.387392\n\n      \n0.142297\n\n      \n0.002093\n\n      \n1.960502\n\n      \n...\n\n      \n0.148313\n\n      \n0.000262\n\n      \n0.283024\n\n      \n5.855872\n\n      \n11.942977\n\n      \n11.461156\n\n      \n6.700497\n\n      \n2.105676\n\n      \n0.202197\n\n      \n4.497253\n\n    \n\n    \n\n      \nstd\n\n      \n0.0\n\n      \n0.866986\n\n      \n4.631601\n\n      \n4.259811\n\n      \n4.537556\n\n      \n5.613060\n\n      \n3.371444\n\n      \n1.051598\n\n      \n0.088572\n\n      \n3.052353\n\n      \n...\n\n      \n0.767761\n\n      \n0.016173\n\n      \n0.928046\n\n      \n4.980012\n\n      \n4.334508\n\n      \n4.991934\n\n      \n5.775815\n\n      \n4.028266\n\n      \n1.150694\n\n      \n2.869831\n\n    \n\n    \n\n      \nmin\n\n      \n0.0\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n...\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n    \n\n    \n\n      \n25%\n\n      \n0.0\n\n      \n0.000000\n\n      \n1.000000\n\n      \n10.000000\n\n      \n9.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n...\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n1.000000\n\n      \n10.000000\n\n      \n9.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n2.000000\n\n    \n\n    \n\n      \n50%\n\n      \n0.0\n\n      \n0.000000\n\n      \n5.000000\n\n      \n13.000000\n\n      \n13.000000\n\n      \n4.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n...\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n5.000000\n\n      \n13.000000\n\n      \n13.000000\n\n      \n6.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n4.000000\n\n    \n\n    \n\n      \n75%\n\n      \n0.0\n\n      \n0.000000\n\n      \n9.000000\n\n      \n15.000000\n\n      \n15.000000\n\n      \n10.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n3.000000\n\n      \n...\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n10.000000\n\n      \n15.000000\n\n      \n16.000000\n\n      \n12.000000\n\n      \n2.000000\n\n      \n0.000000\n\n      \n7.000000\n\n    \n\n    \n\n      \nmax\n\n      \n0.0\n\n      \n8.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n5.000000\n\n      \n15.000000\n\n      \n...\n\n      \n12.000000\n\n      \n1.000000\n\n      \n10.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n9.000000\n\n    \n\n  \n\n\n\n\n8 rows \u00d7 65 columns\n\n\n\n\n\n1\niris\n.\ndescribe\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n149.000000\n\n      \n149.000000\n\n      \n149.000000\n\n      \n149.000000\n\n    \n\n    \n\n      \nmean\n\n      \n5.848322\n\n      \n3.051007\n\n      \n3.774497\n\n      \n1.205369\n\n    \n\n    \n\n      \nstd\n\n      \n0.828594\n\n      \n0.433499\n\n      \n1.759651\n\n      \n0.761292\n\n    \n\n    \n\n      \nmin\n\n      \n4.300000\n\n      \n2.000000\n\n      \n1.000000\n\n      \n0.100000\n\n    \n\n    \n\n      \n25%\n\n      \n5.100000\n\n      \n2.800000\n\n      \n1.600000\n\n      \n0.300000\n\n    \n\n    \n\n      \n50%\n\n      \n5.800000\n\n      \n3.000000\n\n      \n4.400000\n\n      \n1.300000\n\n    \n\n    \n\n      \n75%\n\n      \n6.400000\n\n      \n3.300000\n\n      \n5.100000\n\n      \n1.800000\n\n    \n\n    \n\n      \nmax\n\n      \n7.900000\n\n      \n4.400000\n\n      \n6.900000\n\n      \n2.500000\n\n    \n\n  \n\n\n\n\n\n\n\n1\niris\n[[\n\"Sepal_Length\"\n,\n \n\"Sepal_Width\"\n]]\n.\ndescribe\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n149.000000\n\n      \n149.000000\n\n    \n\n    \n\n      \nmean\n\n      \n5.848322\n\n      \n3.051007\n\n    \n\n    \n\n      \nstd\n\n      \n0.828594\n\n      \n0.433499\n\n    \n\n    \n\n      \nmin\n\n      \n4.300000\n\n      \n2.000000\n\n    \n\n    \n\n      \n25%\n\n      \n5.100000\n\n      \n2.800000\n\n    \n\n    \n\n      \n50%\n\n      \n5.800000\n\n      \n3.000000\n\n    \n\n    \n\n      \n75%\n\n      \n6.400000\n\n      \n3.300000\n\n    \n\n    \n\n      \nmax\n\n      \n7.900000\n\n      \n4.400000\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\nlength\n \n=\n \nlen\n(\ndigits\n)\n\n\nprint\n(\nlength\n)\n\n\n\n\n\n\n\n1\n3823\n\n\n\n\n\n\n1\n2\ncount\n \n=\n \ndigits\n[\n2\n]\n.\ncount\n()\n\n\nprint\n(\ncount\n)\n\n\n\n\n\n\n\n1\n3823\n\n\n\n\n\n\n1\n2\n3\n4\nnumber_of_missing_values\n \n=\n \nlength\n \n-\n \ncount\n\n\npct_of_missing_values\n \n=\n \nfloat\n(\nnumber_of_missing_values\n \n/\n \nlength\n)\n\n\npct_of_missing_values\n \n=\n \n\"{0:.1f}%\"\n.\nformat\n(\npct_of_missing_values\n*\n100\n)\n\n\nprint\n(\npct_of_missing_values\n)\n\n\n\n\n\n\n\n1\n0.0%\n\n\n\n\n\n\n1\n2\nprint\n(\n\"Minimum value: \"\n,\n \niris\n[\n\"Sepal_Length\"\n]\n.\nmin\n())\n\n\nprint\n(\n\"Maximum value: \"\n,\n \niris\n[\n\"Sepal_Length\"\n]\n.\nmax\n())\n\n\n\n\n\n\n\n1\n2\nMinimum value:  4.3\nMaximum value:  7.9\n\n\n\n\n\n\n1\nprint\n(\niris\n[\n\"Sepal_Length\"\n]\n.\nmode\n())\n\n\n\n\n\n\n\n1\n2\n0    5.0\ndtype: float64\n\n\n\n\n\n\n1\nprint\n(\niris\n[\n\"Sepal_Length\"\n]\n.\nmean\n())\n\n\n\n\n\n\n\n1\n5.848322147651008\n\n\n\n\n\n\n1\nprint\n(\niris\n[\n\"Sepal_Length\"\n]\n.\nmedian\n())\n\n\n\n\n\n\n\n1\n5.8\n\n\n\n\n\n\n1\nprint\n(\niris\n[\n\"Sepal_Length\"\n]\n.\nstd\n())\n\n\n\n\n\n\n\n1\n0.8285940572656172\n\n\n\n\n\n\n1\nprint\n(\niris\n[\n\"Sepal_Length\"\n]\n.\nquantile\n([\n.\n25\n,\n \n.\n5\n,\n \n.\n75\n]))\n\n\n\n\n\n\n\n1\n2\n3\n4\n0.25    5.1\n0.50    5.8\n0.75    6.4\nName: Sepal_Length, dtype: float64\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nimport\n \nseaborn\n \nas\n \nsns\n\n\nsns\n.\nset\n(\ncolor_codes\n=\nTrue\n)\n\n\n\nsns\n.\nset_palette\n(\nsns\n.\ncolor_palette\n(\n\"muted\"\n))\n\n\n\nsns\n.\ndistplot\n(\niris\n[\n\"Sepal_Length\"\n]\n.\ndropna\n())\n\n\n\n\n\n\n\n1\n<matplotlib.axes._subplots.AxesSubplot at 0x7f87b39b0320>\n\n\n\n\n\n\n\n\n1\niris\n[[\n\"Sepal_Length\"\n,\n \n\"Sepal_Width\"\n]]\n.\ncorr\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n    \n\n  \n\n  \n\n    \n\n      \nSepal_Length\n\n      \n1.000000\n\n      \n-0.103784\n\n    \n\n    \n\n      \nSepal_Width\n\n      \n-0.103784\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n3\n4\nimport\n \npandas_profiling\n \n\n\n# Print a full report\n\n\npandas_profiling\n.\nProfileReport\n(\niris\n)\n\n\n\n\n\n\n\n\n\n\n\n        .variablerow {\n            border: 1px solid #e1e1e8;\n            border-top: hidden;\n            padding-top: 2em;\n            padding-bottom: 2em;\n            padding-left: 1em;\n            padding-right: 1em;\n        }\n\n        .headerrow {\n            border: 1px solid #e1e1e8;\n            background-color: #f5f5f5;\n            padding: 2em;\n        }\n        .namecol {\n            margin-top: -1em;\n            overflow-x: auto;\n        }\n\n        .dl-horizontal dt {\n            text-align: left;\n            padding-right: 1em;\n            white-space: normal;\n        }\n\n        .dl-horizontal dd {\n            margin-left: 0;\n        }\n\n        .ignore {\n            opacity: 0.4;\n        }\n\n        .container.pandas-profiling {\n            max-width:975px;\n        }\n\n        .col-md-12 {\n            padding-left: 2em;\n        }\n\n        .indent {\n            margin-left: 1em;\n        }\n\n        /* Table example_values */\n            table.example_values {\n                border: 0;\n            }\n\n            .example_values th {\n                border: 0;\n                padding: 0 ;\n                color: #555;\n                font-weight: 600;\n            }\n\n            .example_values tr, .example_values td{\n                border: 0;\n                padding: 0;\n                color: #555;\n            }\n\n        /* STATS */\n            table.stats {\n                border: 0;\n            }\n\n            .stats th {\n                border: 0;\n                padding: 0 2em 0 0;\n                color: #555;\n                font-weight: 600;\n            }\n\n            .stats tr {\n                border: 0;\n            }\n\n            .stats tr:hover{\n                text-decoration: underline;\n            }\n\n            .stats td{\n                color: #555;\n                padding: 1px;\n                border: 0;\n            }\n\n\n        /* Sample table */\n            table.sample {\n                border: 0;\n                margin-bottom: 2em;\n                margin-left:1em;\n            }\n            .sample tr {\n                border:0;\n            }\n            .sample td, .sample th{\n                padding: 0.5em;\n                white-space: nowrap;\n                border: none;\n\n            }\n\n            .sample thead {\n                border-top: 0;\n                border-bottom: 2px solid #ddd;\n            }\n\n            .sample td {\n                width:100%;\n            }\n\n\n        /* There is no good solution available to make the divs equal height and then center ... */\n            .histogram {\n                margin-top: 3em;\n            }\n        /* Freq table */\n\n            table.freq {\n                margin-bottom: 2em;\n                border: 0;\n            }\n            table.freq th, table.freq tr, table.freq td {\n                border: 0;\n                padding: 0;\n            }\n\n            .freq thead {\n                font-weight: 600;\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n\n            }\n\n            td.fillremaining{\n                width:auto;\n                max-width: none;\n            }\n\n            td.number, th.number {\n                text-align:right ;\n            }\n\n        /* Freq mini */\n            .freq.mini td{\n                width: 50%;\n                padding: 1px;\n                font-size: 12px;\n\n            }\n            table.freq.mini {\n                 width:100%;\n            }\n            .freq.mini th {\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                max-width: 5em;\n                font-weight: 400;\n                text-align:right;\n                padding-right: 0.5em;\n            }\n\n            .missing {\n                color: #a94442;\n            }\n            .alert, .alert > th, .alert > td {\n                color: #a94442;\n            }\n\n\n        /* Bars in tables */\n            .freq .bar{\n                float: left;\n                width: 0;\n                height: 100%;\n                line-height: 20px;\n                color: #fff;\n                text-align: center;\n                background-color: #337ab7;\n                border-radius: 3px;\n                margin-right: 4px;\n            }\n            .other .bar {\n                background-color: #999;\n            }\n            .missing .bar{\n                background-color: #a94442;\n            }\n            .tooltip-inner {\n                width: 100%;\n                white-space: nowrap;\n                text-align:left;\n            }\n\n            .extrapadding{\n                padding: 2em;\n            }\n\n\n\n\n\n\n    \n\n        \nOverview\n\n    \n\n    \n\n    \n\n        \nDataset info\n\n        \n\n            \n\n            \n\n                \nNumber of variables\n\n                \n5 \n\n            \n\n            \n\n                \nNumber of observations\n\n                \n149 \n\n            \n\n            \n\n                \nTotal Missing (%)\n\n                \n0.0% \n\n            \n\n            \n\n                \nTotal size in memory\n\n                \n5.9 KiB \n\n            \n\n            \n\n                \nAverage record size in memory\n\n                \n40.5 B \n\n            \n\n            \n\n        \n\n    \n\n    \n\n        \nVariables types\n\n        \n\n            \n\n            \n\n                \nNumeric\n\n                \n3 \n\n            \n\n            \n\n                \nCategorical\n\n                \n1 \n\n            \n\n            \n\n                \nDate\n\n                \n0 \n\n            \n\n            \n\n                \nText (Unique)\n\n                \n0 \n\n            \n\n            \n\n                \nRejected\n\n                \n1 \n\n            \n\n            \n\n        \n\n    \n\n    \n\n        \nWarnings\n\n        \nPetal_Width\n is highly correlated with \nPetal_Length\n (\u03c1 = 0.96231) \nRejected\nDataset has 3 duplicate rows \nWarning\n \n\n    \n\n\n\n    \n\n        \nVariables\n\n    \n\n    \n\n    \n\n        \nClass\n\n            \nCategorical\n\n        \n\n    \n\n    \n\n        \n\n            \nDistinct count\n\n            \n3\n\n        \n\n        \n\n            \nUnique (%)\n\n            \n2.0%\n\n        \n\n        \n\n            \nMissing (%)\n\n            \n0.0%\n\n        \n\n        \n\n            \nMissing (n)\n\n            \n0\n\n        \n\n    \n\n\n\n\n\n    \n\n        \n\n    \nIris-virginica\n\n    \n\n        \n\n            50\n        \n\n\n    \n\n\n\n    \nIris-versicolor\n\n    \n\n        \n\n            50\n        \n\n\n    \n\n\n\n    \nIris-setosa\n\n    \n\n        \n\n            49\n        \n\n\n    \n\n\n\n    \n\n\n\n\n\n    \n\n        Toggle details\n    \n\n\n\n\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \nIris-virginica\n\n        \n50\n\n        \n33.6%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \nIris-versicolor\n\n        \n50\n\n        \n33.6%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \nIris-setosa\n\n        \n49\n\n        \n32.9%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n\n\n\n\n    \n\n        \nPetal_Length\n\n            \nNumeric\n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \nDistinct count\n\n                    \n43\n\n                \n\n                \n\n                    \nUnique (%)\n\n                    \n28.9%\n\n                \n\n                \n\n                    \nMissing (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nMissing (n)\n\n                    \n0\n\n                \n\n                \n\n                    \nInfinite (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nInfinite (n)\n\n                    \n0\n\n                \n\n            \n\n\n        \n\n        \n\n            \n\n\n                \n\n                    \nMean\n\n                    \n3.7745\n\n                \n\n                \n\n                    \nMinimum\n\n                    \n1\n\n                \n\n                \n\n                    \nMaximum\n\n                    \n6.9\n\n                \n\n                \n\n                    \nZeros (%)\n\n                    \n0.0%\n\n                \n\n            \n\n        \n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n    \n\n        Toggle details\n    \n\n\n\n\n\n    \n\n        \nStatistics\n\n        \nHistogram\n\n        \nCommon Values\n\n        \nExtreme Values\n\n\n    \n\n\n    \n\n        \n\n            \n\n                \nQuantile statistics\n\n                \n\n                    \n\n                        \nMinimum\n\n                        \n1\n\n                    \n\n                    \n\n                        \n5-th percentile\n\n                        \n1.3\n\n                    \n\n                    \n\n                        \nQ1\n\n                        \n1.6\n\n                    \n\n                    \n\n                        \nMedian\n\n                        \n4.4\n\n                    \n\n                    \n\n                        \nQ3\n\n                        \n5.1\n\n                    \n\n                    \n\n                        \n95-th percentile\n\n                        \n6.1\n\n                    \n\n                    \n\n                        \nMaximum\n\n                        \n6.9\n\n                    \n\n                    \n\n                        \nRange\n\n                        \n5.9\n\n                    \n\n                    \n\n                        \nInterquartile range\n\n                        \n3.5\n\n                    \n\n                \n\n            \n\n            \n\n                \nDescriptive statistics\n\n                \n\n                    \n\n                        \nStandard deviation\n\n                        \n1.7597\n\n                    \n\n                    \n\n                        \nCoef of variation\n\n                        \n0.46619\n\n                    \n\n                    \n\n                        \nKurtosis\n\n                        \n-1.385\n\n                    \n\n                    \n\n                        \nMean\n\n                        \n3.7745\n\n                    \n\n                    \n\n                        \nMAD\n\n                        \n1.5526\n\n                    \n\n                    \n\n                        \nSkewness\n\n                        \n-0.28946\n\n                    \n\n                    \n\n                        \nSum\n\n                        \n562.4\n\n                    \n\n                    \n\n                        \nVariance\n\n                        \n3.0964\n\n                    \n\n                    \n\n                        \nMemory size\n\n                        \n1.2 KiB\n\n                    \n\n                \n\n            \n\n        \n\n        \n\n            \n\n        \n\n        \n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n1.5\n\n        \n14\n\n        \n9.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.4\n\n        \n11\n\n        \n7.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.1\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.5\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.3\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.6\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.6\n\n        \n6\n\n        \n4.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.0\n\n        \n5\n\n        \n3.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.9\n\n        \n5\n\n        \n3.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.7\n\n        \n5\n\n        \n3.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \nOther values (33)\n\n        \n73\n\n        \n49.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n        \n\n            \nMinimum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n1.0\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.1\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.2\n\n        \n2\n\n        \n1.3%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.3\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.4\n\n        \n11\n\n        \n7.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n            \nMaximum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n6.3\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.4\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.6\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.7\n\n        \n2\n\n        \n1.3%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.9\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n    \n\n\n\n\n\n    \n\n        \nPetal_Width\n\n            \nHighly correlated\n\n        \n\n    \n\n    \nThis variable is highly correlated with \nPetal_Length\n and should be ignored for analysis\n\n\n\n\n\n    \n\n        \n\n            \nCorrelation\n\n            \n0.96231\n\n        \n\n    \n\n\n\n\n\n    \n\n        \nSepal_Length\n\n            \nNumeric\n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \nDistinct count\n\n                    \n35\n\n                \n\n                \n\n                    \nUnique (%)\n\n                    \n23.5%\n\n                \n\n                \n\n                    \nMissing (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nMissing (n)\n\n                    \n0\n\n                \n\n                \n\n                    \nInfinite (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nInfinite (n)\n\n                    \n0\n\n                \n\n            \n\n\n        \n\n        \n\n            \n\n\n                \n\n                    \nMean\n\n                    \n5.8483\n\n                \n\n                \n\n                    \nMinimum\n\n                    \n4.3\n\n                \n\n                \n\n                    \nMaximum\n\n                    \n7.9\n\n                \n\n                \n\n                    \nZeros (%)\n\n                    \n0.0%\n\n                \n\n            \n\n        \n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n    \n\n        Toggle details\n    \n\n\n\n\n\n    \n\n        \nStatistics\n\n        \nHistogram\n\n        \nCommon Values\n\n        \nExtreme Values\n\n\n    \n\n\n    \n\n        \n\n            \n\n                \nQuantile statistics\n\n                \n\n                    \n\n                        \nMinimum\n\n                        \n4.3\n\n                    \n\n                    \n\n                        \n5-th percentile\n\n                        \n4.6\n\n                    \n\n                    \n\n                        \nQ1\n\n                        \n5.1\n\n                    \n\n                    \n\n                        \nMedian\n\n                        \n5.8\n\n                    \n\n                    \n\n                        \nQ3\n\n                        \n6.4\n\n                    \n\n                    \n\n                        \n95-th percentile\n\n                        \n7.26\n\n                    \n\n                    \n\n                        \nMaximum\n\n                        \n7.9\n\n                    \n\n                    \n\n                        \nRange\n\n                        \n3.6\n\n                    \n\n                    \n\n                        \nInterquartile range\n\n                        \n1.3\n\n                    \n\n                \n\n            \n\n            \n\n                \nDescriptive statistics\n\n                \n\n                    \n\n                        \nStandard deviation\n\n                        \n0.82859\n\n                    \n\n                    \n\n                        \nCoef of variation\n\n                        \n0.14168\n\n                    \n\n                    \n\n                        \nKurtosis\n\n                        \n-0.55356\n\n                    \n\n                    \n\n                        \nMean\n\n                        \n5.8483\n\n                    \n\n                    \n\n                        \nMAD\n\n                        \n0.68748\n\n                    \n\n                    \n\n                        \nSkewness\n\n                        \n0.3031\n\n                    \n\n                    \n\n                        \nSum\n\n                        \n871.4\n\n                    \n\n                    \n\n                        \nVariance\n\n                        \n0.68657\n\n                    \n\n                    \n\n                        \nMemory size\n\n                        \n1.2 KiB\n\n                    \n\n                \n\n            \n\n        \n\n        \n\n            \n\n        \n\n        \n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n5.0\n\n        \n10\n\n        \n6.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.3\n\n        \n9\n\n        \n6.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.1\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.7\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.7\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.5\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.8\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.4\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.0\n\n        \n6\n\n        \n4.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.9\n\n        \n6\n\n        \n4.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \nOther values (25)\n\n        \n73\n\n        \n49.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n        \n\n            \nMinimum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n4.3\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.4\n\n        \n3\n\n        \n2.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.5\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.6\n\n        \n4\n\n        \n2.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.7\n\n        \n2\n\n        \n1.3%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n            \nMaximum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n7.3\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n7.4\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n7.6\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n7.7\n\n        \n4\n\n        \n2.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n7.9\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n    \n\n\n\n\n\n    \n\n        \nSepal_Width\n\n            \nNumeric\n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \nDistinct count\n\n                    \n23\n\n                \n\n                \n\n                    \nUnique (%)\n\n                    \n15.4%\n\n                \n\n                \n\n                    \nMissing (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nMissing (n)\n\n                    \n0\n\n                \n\n                \n\n                    \nInfinite (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nInfinite (n)\n\n                    \n0\n\n                \n\n            \n\n\n        \n\n        \n\n            \n\n\n                \n\n                    \nMean\n\n                    \n3.051\n\n                \n\n                \n\n                    \nMinimum\n\n                    \n2\n\n                \n\n                \n\n                    \nMaximum\n\n                    \n4.4\n\n                \n\n                \n\n                    \nZeros (%)\n\n                    \n0.0%\n\n                \n\n            \n\n        \n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n    \n\n        Toggle details\n    \n\n\n\n\n\n    \n\n        \nStatistics\n\n        \nHistogram\n\n        \nCommon Values\n\n        \nExtreme Values\n\n\n    \n\n\n    \n\n        \n\n            \n\n                \nQuantile statistics\n\n                \n\n                    \n\n                        \nMinimum\n\n                        \n2\n\n                    \n\n                    \n\n                        \n5-th percentile\n\n                        \n2.34\n\n                    \n\n                    \n\n                        \nQ1\n\n                        \n2.8\n\n                    \n\n                    \n\n                        \nMedian\n\n                        \n3\n\n                    \n\n                    \n\n                        \nQ3\n\n                        \n3.3\n\n                    \n\n                    \n\n                        \n95-th percentile\n\n                        \n3.8\n\n                    \n\n                    \n\n                        \nMaximum\n\n                        \n4.4\n\n                    \n\n                    \n\n                        \nRange\n\n                        \n2.4\n\n                    \n\n                    \n\n                        \nInterquartile range\n\n                        \n0.5\n\n                    \n\n                \n\n            \n\n            \n\n                \nDescriptive statistics\n\n                \n\n                    \n\n                        \nStandard deviation\n\n                        \n0.4335\n\n                    \n\n                    \n\n                        \nCoef of variation\n\n                        \n0.14208\n\n                    \n\n                    \n\n                        \nKurtosis\n\n                        \n0.31865\n\n                    \n\n                    \n\n                        \nMean\n\n                        \n3.051\n\n                    \n\n                    \n\n                        \nMAD\n\n                        \n0.33199\n\n                    \n\n                    \n\n                        \nSkewness\n\n                        \n0.3501\n\n                    \n\n                    \n\n                        \nSum\n\n                        \n454.6\n\n                    \n\n                    \n\n                        \nVariance\n\n                        \n0.18792\n\n                    \n\n                    \n\n                        \nMemory size\n\n                        \n1.2 KiB\n\n                    \n\n                \n\n            \n\n        \n\n        \n\n            \n\n        \n\n        \n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n3.0\n\n        \n26\n\n        \n17.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.8\n\n        \n14\n\n        \n9.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n3.2\n\n        \n13\n\n        \n8.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n3.4\n\n        \n12\n\n        \n8.1%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n3.1\n\n        \n12\n\n        \n8.1%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.9\n\n        \n10\n\n        \n6.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.7\n\n        \n9\n\n        \n6.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.5\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n3.8\n\n        \n6\n\n        \n4.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n3.3\n\n        \n6\n\n        \n4.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \nOther values (13)\n\n        \n33\n\n        \n22.1%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n        \n\n            \nMinimum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n2.0\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.2\n\n        \n3\n\n        \n2.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.3\n\n        \n4\n\n        \n2.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.4\n\n        \n3\n\n        \n2.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.5\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n            \nMaximum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n3.9\n\n        \n2\n\n        \n1.3%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.0\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.1\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.2\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.4\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n    \n\n\n\n\n\n    \n\n        \nSample\n\n    \n\n    \n\n    \n\n        \n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n2\n\n      \n4.6\n\n      \n3.1\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n3\n\n      \n5.0\n\n      \n3.6\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n4\n\n      \n5.4\n\n      \n3.9\n\n      \n1.7\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n  \n\n\n\n    \n\n\n\n\n\n\n\n1\n2\n# Print a full report\n\n\npandas_profiling\n.\nProfileReport\n(\ndigits\n)\n\n\n\n\n\n\n\n>>> Full (lengthy) report here!!! <<<\n\n\nFirst and Last DataFrame Rows\n\u00b6\n\n\n1\n2\n3\n4\n5\n# Inspect the first 5 rows of `digits`\n\n\nfirst\n \n=\n \ndigits\n.\nhead\n(\n5\n)\n\n\n\n# Inspect the last 3 rows\n\n\nlast\n \n=\n \ndigits\n.\ntail\n(\n3\n)\n\n\n\n\n\n\n\n1\nprint\n(\nfirst\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n   0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  62  \\\n0   0   1   6  15  12   1   0   0   0   7 ...   0   0   0   6  14   7   1   0   \n1   0   0  10  16   6   0   0   0   0   7 ...   0   0   0  10  16  15   3   0   \n2   0   0   8  15  16  13   0   0   0   1 ...   0   0   0   9  14   0   0   0   \n3   0   0   0   3  11  16   0   0   0   0 ...   0   0   0   0   1  15   2   0   \n4   0   0   5  14   4   0   0   0   0   0 ...   0   0   0   4  12  14   7   0\n\n   63  64  \n0   0   0  \n1   0   0  \n2   0   7  \n3   0   4  \n4   0   6\n\n[5 rows x 65 columns]\n\n\n\n\n\n\n1\nprint\n(\nlast\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n      0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  \\\n3820   0   0   3  15   0   0   0   0   0   0 ...   0   0   0   4  14  16   9   \n3821   0   0   6  16   2   0   0   0   0   0 ...   0   0   0   5  16  16  16   \n3822   0   0   2  15  16  13   1   0   0   0 ...   0   0   0   4  14   1   0\n\n      62  63  64  \n3820   0   0   6  \n3821   5   0   6  \n3822   0   0   7\n\n[3 rows x 65 columns]\n\n\n\n\n\n\nSample the Data\n\u00b6\n\n\n1\n2\n# Take a sample of 5\n\n\ndigits\n.\nsample\n(\n5\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n      \n4\n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n8\n\n      \n9\n\n      \n...\n\n      \n55\n\n      \n56\n\n      \n57\n\n      \n58\n\n      \n59\n\n      \n60\n\n      \n61\n\n      \n62\n\n      \n63\n\n      \n64\n\n    \n\n  \n\n  \n\n    \n\n      \n1249\n\n      \n0\n\n      \n0\n\n      \n14\n\n      \n14\n\n      \n13\n\n      \n15\n\n      \n5\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n12\n\n      \n16\n\n      \n10\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n5\n\n    \n\n    \n\n      \n3702\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n9\n\n      \n16\n\n      \n12\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n9\n\n      \n14\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1605\n\n      \n0\n\n      \n0\n\n      \n7\n\n      \n16\n\n      \n13\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n2\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n5\n\n      \n14\n\n      \n11\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1890\n\n      \n0\n\n      \n0\n\n      \n3\n\n      \n15\n\n      \n15\n\n      \n5\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n3\n\n      \n15\n\n      \n16\n\n      \n16\n\n      \n13\n\n      \n1\n\n      \n9\n\n    \n\n    \n\n      \n1295\n\n      \n0\n\n      \n0\n\n      \n7\n\n      \n15\n\n      \n13\n\n      \n3\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n9\n\n      \n13\n\n      \n12\n\n      \n3\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n  \n\n\n\n\n5 rows \u00d7 65 columns\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# import `sample` from `random`\n\n\nfrom\n \nrandom\n \nimport\n \nsample\n\n\n\n# Create a random index\n\n\nrandomIndex\n \n=\n \nnp\n.\narray\n(\nsample\n(\nrange\n(\nlen\n(\ndigits\n)),\n \n5\n))\n\n\n\nprint\n(\nrandomIndex\n)\n\n\n\n\n\n\n\n1\n[ 846  569  315 2932 2328]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Get 5 random rows\n\n\ndigitsSample\n \n=\n \ndigits\n.\nix\n[\nrandomIndex\n]\n\n\n\n# Print the sample\n\n\nprint\n(\ndigitsSample\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n      0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  \\\n846    0   5  14  15   9   1   0   0   0   7 ...   0   0   4  12  16  12  10   \n569    0   1   7  12  12   0   0   0   0   3 ...   0   0   0  10  16  13   7   \n315    0   1   6  13  13   4   0   0   0   9 ...   0   0   0   4  14  16   9   \n2932   0   0   4  12  10   1   0   0   0   0 ...   0   0   0   4  12  11   3   \n2328   0   0   4  15  16  16  16  15   0   0 ...   0   0   0   5  15   3   0\n\n      62  63  64  \n846    4   0   2  \n569    0   0   3  \n315    2   0   2  \n2932   0   0   0  \n2328   0   0   7\n\n[5 rows x 65 columns]\n\n\n\n\n\n\nQueries\n\u00b6\n\n\n1\niris\n.\nhead\n(\n2\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n# Petal length greater than sepal length?\n\n\niris\n.\nquery\n(\n'Petal_Length > Sepal_Length'\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n  \n\n\n\n\n\n\n\n1\n2\n# reverse\n\n\niris\n.\nquery\n(\n'Sepal_Length > Petal_Length'\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n2\n\n      \n4.6\n\n      \n3.1\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n3\n\n      \n5.0\n\n      \n3.6\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n4\n\n      \n5.4\n\n      \n3.9\n\n      \n1.7\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n5\n\n      \n4.6\n\n      \n3.4\n\n      \n1.4\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n6\n\n      \n5.0\n\n      \n3.4\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n7\n\n      \n4.4\n\n      \n2.9\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n8\n\n      \n4.9\n\n      \n3.1\n\n      \n1.5\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n9\n\n      \n5.4\n\n      \n3.7\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n10\n\n      \n4.8\n\n      \n3.4\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n11\n\n      \n4.8\n\n      \n3.0\n\n      \n1.4\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n12\n\n      \n4.3\n\n      \n3.0\n\n      \n1.1\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n13\n\n      \n5.8\n\n      \n4.0\n\n      \n1.2\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n14\n\n      \n5.7\n\n      \n4.4\n\n      \n1.5\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n15\n\n      \n5.4\n\n      \n3.9\n\n      \n1.3\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n16\n\n      \n5.1\n\n      \n3.5\n\n      \n1.4\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n17\n\n      \n5.7\n\n      \n3.8\n\n      \n1.7\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n18\n\n      \n5.1\n\n      \n3.8\n\n      \n1.5\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n19\n\n      \n5.4\n\n      \n3.4\n\n      \n1.7\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n20\n\n      \n5.1\n\n      \n3.7\n\n      \n1.5\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n21\n\n      \n4.6\n\n      \n3.6\n\n      \n1.0\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n22\n\n      \n5.1\n\n      \n3.3\n\n      \n1.7\n\n      \n0.5\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n23\n\n      \n4.8\n\n      \n3.4\n\n      \n1.9\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n24\n\n      \n5.0\n\n      \n3.0\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n25\n\n      \n5.0\n\n      \n3.4\n\n      \n1.6\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n26\n\n      \n5.2\n\n      \n3.5\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n27\n\n      \n5.2\n\n      \n3.4\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n28\n\n      \n4.7\n\n      \n3.2\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n29\n\n      \n4.8\n\n      \n3.1\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n119\n\n      \n6.9\n\n      \n3.2\n\n      \n5.7\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n120\n\n      \n5.6\n\n      \n2.8\n\n      \n4.9\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n121\n\n      \n7.7\n\n      \n2.8\n\n      \n6.7\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n122\n\n      \n6.3\n\n      \n2.7\n\n      \n4.9\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n123\n\n      \n6.7\n\n      \n3.3\n\n      \n5.7\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n124\n\n      \n7.2\n\n      \n3.2\n\n      \n6.0\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n125\n\n      \n6.2\n\n      \n2.8\n\n      \n4.8\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n126\n\n      \n6.1\n\n      \n3.0\n\n      \n4.9\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n127\n\n      \n6.4\n\n      \n2.8\n\n      \n5.6\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n128\n\n      \n7.2\n\n      \n3.0\n\n      \n5.8\n\n      \n1.6\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n129\n\n      \n7.4\n\n      \n2.8\n\n      \n6.1\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n130\n\n      \n7.9\n\n      \n3.8\n\n      \n6.4\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n131\n\n      \n6.4\n\n      \n2.8\n\n      \n5.6\n\n      \n2.2\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n132\n\n      \n6.3\n\n      \n2.8\n\n      \n5.1\n\n      \n1.5\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n133\n\n      \n6.1\n\n      \n2.6\n\n      \n5.6\n\n      \n1.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n134\n\n      \n7.7\n\n      \n3.0\n\n      \n6.1\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n135\n\n      \n6.3\n\n      \n3.4\n\n      \n5.6\n\n      \n2.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n136\n\n      \n6.4\n\n      \n3.1\n\n      \n5.5\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n137\n\n      \n6.0\n\n      \n3.0\n\n      \n4.8\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n138\n\n      \n6.9\n\n      \n3.1\n\n      \n5.4\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n139\n\n      \n6.7\n\n      \n3.1\n\n      \n5.6\n\n      \n2.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n140\n\n      \n6.9\n\n      \n3.1\n\n      \n5.1\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n141\n\n      \n5.8\n\n      \n2.7\n\n      \n5.1\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n142\n\n      \n6.8\n\n      \n3.2\n\n      \n5.9\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n143\n\n      \n6.7\n\n      \n3.3\n\n      \n5.7\n\n      \n2.5\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n144\n\n      \n6.7\n\n      \n3.0\n\n      \n5.2\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n145\n\n      \n6.3\n\n      \n2.5\n\n      \n5.0\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n146\n\n      \n6.5\n\n      \n3.0\n\n      \n5.2\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n147\n\n      \n6.2\n\n      \n3.4\n\n      \n5.4\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n148\n\n      \n5.9\n\n      \n3.0\n\n      \n5.1\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n  \n\n\n\n\n149 rows \u00d7 5 columns\n\n\n\n\n\n1\n2\n# alternatively\n\n\niris\n[\niris\n.\nSepal_Length\n \n>\n \niris\n.\nPetal_Length\n]\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n2\n\n      \n4.6\n\n      \n3.1\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n3\n\n      \n5.0\n\n      \n3.6\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n4\n\n      \n5.4\n\n      \n3.9\n\n      \n1.7\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n5\n\n      \n4.6\n\n      \n3.4\n\n      \n1.4\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n6\n\n      \n5.0\n\n      \n3.4\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n7\n\n      \n4.4\n\n      \n2.9\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n8\n\n      \n4.9\n\n      \n3.1\n\n      \n1.5\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n9\n\n      \n5.4\n\n      \n3.7\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n10\n\n      \n4.8\n\n      \n3.4\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n11\n\n      \n4.8\n\n      \n3.0\n\n      \n1.4\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n12\n\n      \n4.3\n\n      \n3.0\n\n      \n1.1\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n13\n\n      \n5.8\n\n      \n4.0\n\n      \n1.2\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n14\n\n      \n5.7\n\n      \n4.4\n\n      \n1.5\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n15\n\n      \n5.4\n\n      \n3.9\n\n      \n1.3\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n16\n\n      \n5.1\n\n      \n3.5\n\n      \n1.4\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n17\n\n      \n5.7\n\n      \n3.8\n\n      \n1.7\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n18\n\n      \n5.1\n\n      \n3.8\n\n      \n1.5\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n19\n\n      \n5.4\n\n      \n3.4\n\n      \n1.7\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n20\n\n      \n5.1\n\n      \n3.7\n\n      \n1.5\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n21\n\n      \n4.6\n\n      \n3.6\n\n      \n1.0\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n22\n\n      \n5.1\n\n      \n3.3\n\n      \n1.7\n\n      \n0.5\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n23\n\n      \n4.8\n\n      \n3.4\n\n      \n1.9\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n24\n\n      \n5.0\n\n      \n3.0\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n25\n\n      \n5.0\n\n      \n3.4\n\n      \n1.6\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n26\n\n      \n5.2\n\n      \n3.5\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n27\n\n      \n5.2\n\n      \n3.4\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n28\n\n      \n4.7\n\n      \n3.2\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n29\n\n      \n4.8\n\n      \n3.1\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n119\n\n      \n6.9\n\n      \n3.2\n\n      \n5.7\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n120\n\n      \n5.6\n\n      \n2.8\n\n      \n4.9\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n121\n\n      \n7.7\n\n      \n2.8\n\n      \n6.7\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n122\n\n      \n6.3\n\n      \n2.7\n\n      \n4.9\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n123\n\n      \n6.7\n\n      \n3.3\n\n      \n5.7\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n124\n\n      \n7.2\n\n      \n3.2\n\n      \n6.0\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n125\n\n      \n6.2\n\n      \n2.8\n\n      \n4.8\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n126\n\n      \n6.1\n\n      \n3.0\n\n      \n4.9\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n127\n\n      \n6.4\n\n      \n2.8\n\n      \n5.6\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n128\n\n      \n7.2\n\n      \n3.0\n\n      \n5.8\n\n      \n1.6\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n129\n\n      \n7.4\n\n      \n2.8\n\n      \n6.1\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n130\n\n      \n7.9\n\n      \n3.8\n\n      \n6.4\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n131\n\n      \n6.4\n\n      \n2.8\n\n      \n5.6\n\n      \n2.2\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n132\n\n      \n6.3\n\n      \n2.8\n\n      \n5.1\n\n      \n1.5\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n133\n\n      \n6.1\n\n      \n2.6\n\n      \n5.6\n\n      \n1.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n134\n\n      \n7.7\n\n      \n3.0\n\n      \n6.1\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n135\n\n      \n6.3\n\n      \n3.4\n\n      \n5.6\n\n      \n2.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n136\n\n      \n6.4\n\n      \n3.1\n\n      \n5.5\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n137\n\n      \n6.0\n\n      \n3.0\n\n      \n4.8\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n138\n\n      \n6.9\n\n      \n3.1\n\n      \n5.4\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n139\n\n      \n6.7\n\n      \n3.1\n\n      \n5.6\n\n      \n2.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n140\n\n      \n6.9\n\n      \n3.1\n\n      \n5.1\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n141\n\n      \n5.8\n\n      \n2.7\n\n      \n5.1\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n142\n\n      \n6.8\n\n      \n3.2\n\n      \n5.9\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n143\n\n      \n6.7\n\n      \n3.3\n\n      \n5.7\n\n      \n2.5\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n144\n\n      \n6.7\n\n      \n3.0\n\n      \n5.2\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n145\n\n      \n6.3\n\n      \n2.5\n\n      \n5.0\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n146\n\n      \n6.5\n\n      \n3.0\n\n      \n5.2\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n147\n\n      \n6.2\n\n      \n3.4\n\n      \n5.4\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n148\n\n      \n5.9\n\n      \n3.0\n\n      \n5.1\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n  \n\n\n\n\n149 rows \u00d7 5 columns\n\n\n\n\n\nThe Challenges of Data\n\u00b6\n\n\nMissing Values\n\u00b6\n\n\n1\n2\n# Identifiy missing values\n\n\npd\n.\nisnull\n(\ndigits\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n      \n4\n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n8\n\n      \n9\n\n      \n...\n\n      \n55\n\n      \n56\n\n      \n57\n\n      \n58\n\n      \n59\n\n      \n60\n\n      \n61\n\n      \n62\n\n      \n63\n\n      \n64\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n1\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n2\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n4\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n5\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n6\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n7\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n8\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n9\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n10\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n11\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n12\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n13\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n14\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n15\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n16\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n17\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n18\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n19\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n20\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n21\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n22\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n23\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n24\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n25\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n26\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n27\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n28\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n29\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n3793\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3794\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3795\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3796\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3797\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3798\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3799\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3800\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3801\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3802\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3803\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3804\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3805\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3806\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3807\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3808\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3809\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3810\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3811\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3812\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3813\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3814\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3815\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3816\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3817\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3818\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3819\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3820\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3821\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3822\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n  \n\n\n\n\n3823 rows \u00d7 65 columns\n\n\n\n\n\nDelete\n\u00b6\n\n\n1\n2\n3\n4\n5\n# Drop rows with missing values\n\n\ndf\n.\ndropna\n(\naxis\n=\n0\n)\n\n\n\n# Drop columns with missing values \n\n\ndf\n.\ndropna\n(\naxis\n=\n1\n)\n\n\n\n\n\n\n\nImpute\n\u00b6\n\n\nImputation: mean, median, another variable, estimate with regression ANOVA, logit, k-NN.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# Import NumPy\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n# Calculate the mean of the DataFrame variable Salary\n\n\nmean\n \n=\n \nnp\n.\nmean\n(\ndf\n.\nSalary\n)\n\n\n\n# Replace missing values with the mean\n\n\ndf\n \n=\n \ndf\n.\nSalary\n.\nfillna\n(\nmean\n)\n\n\n\ndf\n \n=\n \ndf\n.\nSalary\n.\nfillna\n(\nmean\n,\n \nmethod\n=\nffill\n)\n\n\n\n\n\n\n\n\n\nffill\n and \nbfill\n for forward and backward fill.\n\n\n\n\n1\n2\n3\n4\n5\n6\nfrom\n \nscipy\n \nimport\n \ninterpolate\n\n\n\n# Fill the DataFrame\n\n\ndf\n.\ninterpolate\n()\n\n\n\ndf\n.\ninterpolate\n(\nmethod\n=\ncubic\n)\n\n\n\n\n\n\n\n\n\ncubic\n, \npolynomial\n.\n\n\nlimit\n and \nlimit_direction\n.\n\n\n\n\nOutliers\n\u00b6\n\n\nDelete (data entry, processing errors), transform (assign weights, natural log to reduce variation) or impute them (replace extreme values with median, mean or mode values).\n\n\nThe Data\u2019s Features\n\u00b6\n\n\nFeature Engineering\n\u00b6\n\n\nIncrease the predictive power of learning algorithms by creating features from raw data that will help the learning process.\n\n\nEncode categorical variables into numerical ones\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Factorize the values \n\n\nlabels\n,\nlevels\n \n=\n \npd\n.\nfactorize\n(\niris\n.\nClass\n)\n\n\n\n# Save the encoded variables in `iris.Class`\n\n\niris\n.\nClass\n \n=\n \nlabels\n\n\n\n# Print out the first rows\n\n\niris\n.\nClass\n.\nhead\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n0    0\n1    0\n2    0\n3    0\n4    0\nName: Class, dtype: int64\n\n\n\n\n\n\nBin continuous variables in groups\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Define the bins\n\n\nmybins\n \n=\n \nrange\n(\n0\n,\n \ndf\n.\nage\n.\nmax\n(),\n \n10\n)\n\n\n\n# Cut the data from the DataFrame with the help of the bins\n\n\ndf\n[\n'age_bucket'\n]\n \n=\n \npd\n.\ncut\n(\ndf\n.\nage\n,\n \nbins\n=\nmybins\n)\n\n\n\n# Count the number of values per bucket\n\n\ndf\n[\n'age_bucket'\n]\n.\nvalue_counts\n()\n\n\n\n\n\n\n\nScale features\n\u00b6\n\n\nCenter the data around 0.\n\n\n1\n2\n3\n4\n5\nfrom\n \nsklearn.preprocessing\n \nimport\n \nStandardScaler\n\n\n\nscaler\n \n=\n \nStandardScaler\n()\n.\nfit\n(\nX\n)\n\n\n\nrescaledX\n \n=\n \nscaler\n.\ntransform\n(\nX\n)\n\n\n\n\n\n\n\nFeature Selection\n\u00b6\n\n\nSelect the key subset of original data features in an attempt to reduce the dimensionality of the training problem.\n\n\nPCA combines similar (correlated) attributes and creates new ones that are considered superior to the original attributes of the dataset. \n\n\nFeature selection doesn\u2019t combine attributes: it evaluates the quality and predictive power and selects the best set.\n\n\nTo find important features, calculate how much better or worse a model does when we leave one variable out of the equation.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# Import `RandomForestClassifier`\n\n\nfrom\n \nsklearn.ensemble\n \nimport\n \nRandomForestClassifier\n\n\n\n# Isolate Data, class labels and column values\n\n\nX\n \n=\n \niris\n.\niloc\n[:,\n0\n:\n4\n]\n\n\nY\n \n=\n \niris\n.\niloc\n[:,\n-\n1\n]\n\n\nnames\n \n=\n \niris\n.\ncolumns\n.\nvalues\n\n\n\n# Build the model\n\n\nrfc\n \n=\n \nRandomForestClassifier\n()\n\n\n\n# Fit the model\n\n\nrfc\n.\nfit\n(\nX\n,\n \nY\n)\n\n\n\n# Print the results\n\n\nprint\n(\n\"Features sorted by their score:\"\n)\n\n\nprint\n(\nsorted\n(\nzip\n(\nmap\n(\nlambda\n \nx\n:\n \nround\n(\nx\n,\n \n4\n),\n \nrfc\n.\nfeature_importances_\n),\n \nnames\n),\n \nreverse\n=\nTrue\n))\n\n\n\n\n\n\n\n1\n2\nFeatures sorted by their score:\n[(0.4899, 'Petal_Length'), (0.2752, 'Petal_Width'), (0.2185, 'Sepal_Length'), (0.016400000000000001, 'Sepal_Width')]\n\n\n\n\n\n\nThe best feature set is one that includes the petal length and petal width data.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n# Isolate feature importances \n\n\nimportance\n \n=\n \nrfc\n.\nfeature_importances_\n\n\n\n# Sort the feature importances \n\n\nsorted_importances\n \n=\n \nnp\n.\nargsort\n(\nimportance\n)\n\n\n\n# Insert padding\n\n\npadding\n \n=\n \nnp\n.\narange\n(\nlen\n(\nnames\n)\n-\n1\n)\n \n+\n \n0.5\n\n\n\n# Plot the data\n\n\nplt\n.\nbarh\n(\npadding\n,\n \nimportance\n[\nsorted_importances\n],\n \nalign\n=\n'center'\n)\n\n\n\n# Customize the plot\n\n\nplt\n.\nyticks\n(\npadding\n,\n \nnames\n[\nsorted_importances\n])\n\n\nplt\n.\nxlabel\n(\n\"Relative Importance\"\n)\n\n\nplt\n.\ntitle\n(\n\"Variable Importance\"\n)\n\n\n\n# Show the plot\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nPatterns In the Data\n\u00b6\n\n\nVisualization of the data; static with Matplotlib or Seaborn, interactive with Bokeh or Plotly.\n\n\nCorrelation Identification with PCA from scikit-learn\n\u00b6\n\n\nMatplotlib\n\u00b6\n\n\nDimensionality Reduction techniques, such as Principal Component Analysis (PCA). From \u2018many\u2019 to two \u2018principal components\u2019.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n# Import `PCA` from `sklearn.decomposition`\n\n\nfrom\n \nsklearn.decomposition\n \nimport\n \nPCA\n\n\n\n# Build the model\n\n\npca\n \n=\n \nPCA\n(\nn_components\n=\n2\n)\n\n\n\n# Reduce the data, output is ndarray\n\n\nreduced_data\n \n=\n \npca\n.\nfit_transform\n(\ndigits\n)\n\n\n\n# Inspect shape of the `reduced_data`\n\n\nreduced_data\n.\nshape\n\n\n\n# print out the reduced data\n\n\nprint\n(\nreduced_data\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[ 12.65674168  -4.63610357]\n\n \n[ 16.82906354 -12.96575346]\n\n \n[-19.08072301  10.58293767]\n\n \n..., \n\n \n[ 23.90693984   6.06265415]\n\n \n[ 29.1798759   -3.06847144]\n\n \n[-25.23132536  11.60863909]]\n\n\n\n\n\n\n\n1\nreduced_data\n \n=\n \npd\n.\nDataFrame\n(\nreduced_data\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nplt\n.\nscatter\n(\nreduced_data\n[\n0\n],\n \nreduced_data\n[\n1\n])\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nBokeh\n\u00b6\n\n\nTo be implemented in a webpage for example.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nfrom\n \nbokeh.charts\n \nimport\n \nScatter\n,\n \noutput_file\n,\n \nshow\n\n\n\n# Construct the scatter plot\n\n\np\n \n=\n \nScatter\n(\niris\n,\n \nx\n=\n'Petal_Length'\n,\n \ny\n=\n'Petal_Width'\n,\n \ncolor\n=\n\"Class\"\n,\n \ntitle\n=\n\"Petal Length vs Petal Width\"\n,\n\n            \nxlabel\n=\n\"Sepal Length\"\n,\n \nylabel\n=\n\"Sepal Width\"\n)\n\n\n\n# Output the file \n\n\noutput_file\n(\n'scatter.html'\n)\n\n\n\n# Show the scatter plot\n\n\nshow\n(\np\n)\n\n\n\n\n\n\n\nThe GIF output:\n\n\n\n\n\n\nCorrelation Identification with Pandas\n\u00b6\n\n\nThe Pearson correlation assumes that the variables are normally distributed, that there is a straight line relationship between each of the variables and that the data is normally distributed about the regression line. \n\n\nThe Spearman correlation, on the other hand, assumes that we have two ordinal variables or two variables that are related in some way, but not linearly. The Spearman coefficient is the sum of deviation squared by \nn\n times \nn\n minus 1.\n\n\nThe Kendall Tau correlation is a coefficient that represents the degree of concordance between two columns of ranked data. We can use the Spearman correlation to measure the degree of association between two variables. The Kendal Tau coefficient is calculated by the number of concordant pairs minus the number of discordant pairs divided by the total number of pairs.\n\n\nSpearman\u2019s coefficient will usually be larger than the Kendall\u2019s Tau coefficient, but this is not always the case: we\u2019ll get a smaller Spearman\u2019s coefficient when the deviations are huge among the observations of the data. The Spearman correlation is very sensitive to this and this might come in handy in some cases!\n\n\nThe two last correlation measures require ranking the data.\n\n\n1\n2\n# Pearson correlation\n\n\niris\n.\ncorr\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \nSepal_Length\n\n      \n1.000000\n\n      \n-0.103784\n\n      \n0.871283\n\n      \n0.816971\n\n      \n0.781219\n\n    \n\n    \n\n      \nSepal_Width\n\n      \n-0.103784\n\n      \n1.000000\n\n      \n-0.415218\n\n      \n-0.350733\n\n      \n-0.414532\n\n    \n\n    \n\n      \nPetal_Length\n\n      \n0.871283\n\n      \n-0.415218\n\n      \n1.000000\n\n      \n0.962314\n\n      \n0.948519\n\n    \n\n    \n\n      \nPetal_Width\n\n      \n0.816971\n\n      \n-0.350733\n\n      \n0.962314\n\n      \n1.000000\n\n      \n0.956014\n\n    \n\n    \n\n      \nClass\n\n      \n0.781219\n\n      \n-0.414532\n\n      \n0.948519\n\n      \n0.956014\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n3\niris2\n \n=\n \niris\n.\nrank\n()\n\n\n# Kendall Tau correlation\n\n\niris2\n.\ncorr\n(\n'kendall'\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \nSepal_Length\n\n      \n1.000000\n\n      \n-0.067636\n\n      \n0.718290\n\n      \n0.654197\n\n      \n0.669163\n\n    \n\n    \n\n      \nSepal_Width\n\n      \n-0.067636\n\n      \n1.000000\n\n      \n-0.175665\n\n      \n-0.140207\n\n      \n-0.327228\n\n    \n\n    \n\n      \nPetal_Length\n\n      \n0.718290\n\n      \n-0.175665\n\n      \n1.000000\n\n      \n0.803041\n\n      \n0.822578\n\n    \n\n    \n\n      \nPetal_Width\n\n      \n0.654197\n\n      \n-0.140207\n\n      \n0.803041\n\n      \n1.000000\n\n      \n0.837934\n\n    \n\n    \n\n      \nClass\n\n      \n0.669163\n\n      \n-0.327228\n\n      \n0.822578\n\n      \n0.837934\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n# Spearman Rank correlation\n\n\niris2\n.\ncorr\n(\n'spearman'\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \nSepal_Length\n\n      \n1.000000\n\n      \n-0.152136\n\n      \n0.881759\n\n      \n0.833586\n\n      \n0.796546\n\n    \n\n    \n\n      \nSepal_Width\n\n      \n-0.152136\n\n      \n1.000000\n\n      \n-0.294020\n\n      \n-0.267686\n\n      \n-0.426319\n\n    \n\n    \n\n      \nPetal_Length\n\n      \n0.881759\n\n      \n-0.294020\n\n      \n1.000000\n\n      \n0.936188\n\n      \n0.935220\n\n    \n\n    \n\n      \nPetal_Width\n\n      \n0.833586\n\n      \n-0.267686\n\n      \n0.936188\n\n      \n1.000000\n\n      \n0.937409\n\n    \n\n    \n\n      \nClass\n\n      \n0.796546\n\n      \n-0.426319\n\n      \n0.935220\n\n      \n0.937409\n\n      \n1.000000",
            "title": "Exploratory Data Analysis (EDA)"
        },
        {
            "location": "/Exploratory Data Analysis/#digits",
            "text": "1\n2\n3\n4\n5 # Load in the data with `read_csv()`  digits   =   pd . read_csv ( \"http://archive.ics.uci.edu/ml/machine-learning-databases/optdigits/optdigits.tra\" , \n                      header = None )  digits . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       0 \n       1 \n       2 \n       3 \n       4 \n       5 \n       6 \n       7 \n       8 \n       9 \n       ... \n       55 \n       56 \n       57 \n       58 \n       59 \n       60 \n       61 \n       62 \n       63 \n       64 \n     \n   \n   \n     \n       0 \n       0 \n       1 \n       6 \n       15 \n       12 \n       1 \n       0 \n       0 \n       0 \n       7 \n       ... \n       0 \n       0 \n       0 \n       6 \n       14 \n       7 \n       1 \n       0 \n       0 \n       0 \n     \n     \n       1 \n       0 \n       0 \n       10 \n       16 \n       6 \n       0 \n       0 \n       0 \n       0 \n       7 \n       ... \n       0 \n       0 \n       0 \n       10 \n       16 \n       15 \n       3 \n       0 \n       0 \n       0 \n     \n     \n       2 \n       0 \n       0 \n       8 \n       15 \n       16 \n       13 \n       0 \n       0 \n       0 \n       1 \n       ... \n       0 \n       0 \n       0 \n       9 \n       14 \n       0 \n       0 \n       0 \n       0 \n       7 \n     \n     \n       3 \n       0 \n       0 \n       0 \n       3 \n       11 \n       16 \n       0 \n       0 \n       0 \n       0 \n       ... \n       0 \n       0 \n       0 \n       0 \n       1 \n       15 \n       2 \n       0 \n       0 \n       4 \n     \n     \n       4 \n       0 \n       0 \n       5 \n       14 \n       4 \n       0 \n       0 \n       0 \n       0 \n       0 \n       ... \n       0 \n       0 \n       0 \n       4 \n       12 \n       14 \n       7 \n       0 \n       0 \n       6 \n     \n     5 rows \u00d7 65 columns   Find out about the  dataset .",
            "title": "digits"
        },
        {
            "location": "/Exploratory Data Analysis/#iris",
            "text": "Another classical dataset.  1\n2\n3\n4\n5 iris   =   pd . read_csv ( \"http://mlr.cs.umass.edu/ml/machine-learning-databases/iris/iris.data\" )  iris . columns   =   [ 'Sepal_Length' ,   'Sepal_Width' ,   'Petal_Length' ,   'Petal_Width' ,   'Class' ]  iris . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       0 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       1 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       Iris-setosa \n     \n     \n       2 \n       4.6 \n       3.1 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       3 \n       5.0 \n       3.6 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       4 \n       5.4 \n       3.9 \n       1.7 \n       0.4 \n       Iris-setosa",
            "title": "iris"
        },
        {
            "location": "/Exploratory Data Analysis/#basic-description-of-the-data",
            "text": "",
            "title": "Basic Description of the Data"
        },
        {
            "location": "/Exploratory Data Analysis/#describing-the-data",
            "text": "1 iris . dtypes    1\n2\n3\n4\n5\n6 Sepal_Length    float64\nSepal_Width     float64\nPetal_Length    float64\nPetal_Width     float64\nClass            object\ndtype: object    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 def   get_var_category ( series ): \n     unique_count   =   series . nunique ( dropna = False ) \n     total_count   =   len ( series ) \n     if   pd . api . types . is_numeric_dtype ( series ): \n         return   'Numerical' \n     elif   pd . api . types . is_datetime64_dtype ( series ): \n         return   'Date' \n     elif   unique_count == total_count : \n         return   'Text (Unique)' \n     else : \n         return   'Categorical'  def   print_categories ( df ): \n     for   column_name   in   df . columns : \n         print ( column_name ,   \": \" ,   get_var_category ( df [ column_name ]))    1 print_categories ( iris )    1\n2\n3\n4\n5 Sepal_Length   :    Numerical  Sepal_Width   :    Numerical  Petal_Length   :    Numerical  Petal_Width   :    Numerical  Class   :    Categorical    1 digits . describe ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       0 \n       1 \n       2 \n       3 \n       4 \n       5 \n       6 \n       7 \n       8 \n       9 \n       ... \n       55 \n       56 \n       57 \n       58 \n       59 \n       60 \n       61 \n       62 \n       63 \n       64 \n     \n   \n   \n     \n       count \n       3823.0 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       ... \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n     \n     \n       mean \n       0.0 \n       0.301334 \n       5.481821 \n       11.805912 \n       11.451478 \n       5.505362 \n       1.387392 \n       0.142297 \n       0.002093 \n       1.960502 \n       ... \n       0.148313 \n       0.000262 \n       0.283024 \n       5.855872 \n       11.942977 \n       11.461156 \n       6.700497 \n       2.105676 \n       0.202197 \n       4.497253 \n     \n     \n       std \n       0.0 \n       0.866986 \n       4.631601 \n       4.259811 \n       4.537556 \n       5.613060 \n       3.371444 \n       1.051598 \n       0.088572 \n       3.052353 \n       ... \n       0.767761 \n       0.016173 \n       0.928046 \n       4.980012 \n       4.334508 \n       4.991934 \n       5.775815 \n       4.028266 \n       1.150694 \n       2.869831 \n     \n     \n       min \n       0.0 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       ... \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n     \n     \n       25% \n       0.0 \n       0.000000 \n       1.000000 \n       10.000000 \n       9.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       ... \n       0.000000 \n       0.000000 \n       0.000000 \n       1.000000 \n       10.000000 \n       9.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       2.000000 \n     \n     \n       50% \n       0.0 \n       0.000000 \n       5.000000 \n       13.000000 \n       13.000000 \n       4.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       ... \n       0.000000 \n       0.000000 \n       0.000000 \n       5.000000 \n       13.000000 \n       13.000000 \n       6.000000 \n       0.000000 \n       0.000000 \n       4.000000 \n     \n     \n       75% \n       0.0 \n       0.000000 \n       9.000000 \n       15.000000 \n       15.000000 \n       10.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       3.000000 \n       ... \n       0.000000 \n       0.000000 \n       0.000000 \n       10.000000 \n       15.000000 \n       16.000000 \n       12.000000 \n       2.000000 \n       0.000000 \n       7.000000 \n     \n     \n       max \n       0.0 \n       8.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       5.000000 \n       15.000000 \n       ... \n       12.000000 \n       1.000000 \n       10.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       9.000000 \n     \n     8 rows \u00d7 65 columns   1 iris . describe ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n     \n   \n   \n     \n       count \n       149.000000 \n       149.000000 \n       149.000000 \n       149.000000 \n     \n     \n       mean \n       5.848322 \n       3.051007 \n       3.774497 \n       1.205369 \n     \n     \n       std \n       0.828594 \n       0.433499 \n       1.759651 \n       0.761292 \n     \n     \n       min \n       4.300000 \n       2.000000 \n       1.000000 \n       0.100000 \n     \n     \n       25% \n       5.100000 \n       2.800000 \n       1.600000 \n       0.300000 \n     \n     \n       50% \n       5.800000 \n       3.000000 \n       4.400000 \n       1.300000 \n     \n     \n       75% \n       6.400000 \n       3.300000 \n       5.100000 \n       1.800000 \n     \n     \n       max \n       7.900000 \n       4.400000 \n       6.900000 \n       2.500000 \n     \n      1 iris [[ \"Sepal_Length\" ,   \"Sepal_Width\" ]] . describe ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n     \n   \n   \n     \n       count \n       149.000000 \n       149.000000 \n     \n     \n       mean \n       5.848322 \n       3.051007 \n     \n     \n       std \n       0.828594 \n       0.433499 \n     \n     \n       min \n       4.300000 \n       2.000000 \n     \n     \n       25% \n       5.100000 \n       2.800000 \n     \n     \n       50% \n       5.800000 \n       3.000000 \n     \n     \n       75% \n       6.400000 \n       3.300000 \n     \n     \n       max \n       7.900000 \n       4.400000 \n     \n      1\n2 length   =   len ( digits )  print ( length )    1 3823   1\n2 count   =   digits [ 2 ] . count ()  print ( count )    1 3823   1\n2\n3\n4 number_of_missing_values   =   length   -   count  pct_of_missing_values   =   float ( number_of_missing_values   /   length )  pct_of_missing_values   =   \"{0:.1f}%\" . format ( pct_of_missing_values * 100 )  print ( pct_of_missing_values )    1 0.0%   1\n2 print ( \"Minimum value: \" ,   iris [ \"Sepal_Length\" ] . min ())  print ( \"Maximum value: \" ,   iris [ \"Sepal_Length\" ] . max ())    1\n2 Minimum value:  4.3\nMaximum value:  7.9   1 print ( iris [ \"Sepal_Length\" ] . mode ())    1\n2 0    5.0\ndtype: float64   1 print ( iris [ \"Sepal_Length\" ] . mean ())    1 5.848322147651008   1 print ( iris [ \"Sepal_Length\" ] . median ())    1 5.8   1 print ( iris [ \"Sepal_Length\" ] . std ())    1 0.8285940572656172   1 print ( iris [ \"Sepal_Length\" ] . quantile ([ . 25 ,   . 5 ,   . 75 ]))    1\n2\n3\n4 0.25    5.1\n0.50    5.8\n0.75    6.4\nName: Sepal_Length, dtype: float64   1\n2\n3\n4\n5\n6 import   seaborn   as   sns  sns . set ( color_codes = True )  sns . set_palette ( sns . color_palette ( \"muted\" ))  sns . distplot ( iris [ \"Sepal_Length\" ] . dropna ())    1 <matplotlib.axes._subplots.AxesSubplot at 0x7f87b39b0320>    1 iris [[ \"Sepal_Length\" ,   \"Sepal_Width\" ]] . corr ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n     \n   \n   \n     \n       Sepal_Length \n       1.000000 \n       -0.103784 \n     \n     \n       Sepal_Width \n       -0.103784 \n       1.000000 \n     \n      1\n2\n3\n4 import   pandas_profiling   # Print a full report  pandas_profiling . ProfileReport ( iris )     \n\n        .variablerow {\n            border: 1px solid #e1e1e8;\n            border-top: hidden;\n            padding-top: 2em;\n            padding-bottom: 2em;\n            padding-left: 1em;\n            padding-right: 1em;\n        }\n\n        .headerrow {\n            border: 1px solid #e1e1e8;\n            background-color: #f5f5f5;\n            padding: 2em;\n        }\n        .namecol {\n            margin-top: -1em;\n            overflow-x: auto;\n        }\n\n        .dl-horizontal dt {\n            text-align: left;\n            padding-right: 1em;\n            white-space: normal;\n        }\n\n        .dl-horizontal dd {\n            margin-left: 0;\n        }\n\n        .ignore {\n            opacity: 0.4;\n        }\n\n        .container.pandas-profiling {\n            max-width:975px;\n        }\n\n        .col-md-12 {\n            padding-left: 2em;\n        }\n\n        .indent {\n            margin-left: 1em;\n        }\n\n        /* Table example_values */\n            table.example_values {\n                border: 0;\n            }\n\n            .example_values th {\n                border: 0;\n                padding: 0 ;\n                color: #555;\n                font-weight: 600;\n            }\n\n            .example_values tr, .example_values td{\n                border: 0;\n                padding: 0;\n                color: #555;\n            }\n\n        /* STATS */\n            table.stats {\n                border: 0;\n            }\n\n            .stats th {\n                border: 0;\n                padding: 0 2em 0 0;\n                color: #555;\n                font-weight: 600;\n            }\n\n            .stats tr {\n                border: 0;\n            }\n\n            .stats tr:hover{\n                text-decoration: underline;\n            }\n\n            .stats td{\n                color: #555;\n                padding: 1px;\n                border: 0;\n            }\n\n\n        /* Sample table */\n            table.sample {\n                border: 0;\n                margin-bottom: 2em;\n                margin-left:1em;\n            }\n            .sample tr {\n                border:0;\n            }\n            .sample td, .sample th{\n                padding: 0.5em;\n                white-space: nowrap;\n                border: none;\n\n            }\n\n            .sample thead {\n                border-top: 0;\n                border-bottom: 2px solid #ddd;\n            }\n\n            .sample td {\n                width:100%;\n            }\n\n\n        /* There is no good solution available to make the divs equal height and then center ... */\n            .histogram {\n                margin-top: 3em;\n            }\n        /* Freq table */\n\n            table.freq {\n                margin-bottom: 2em;\n                border: 0;\n            }\n            table.freq th, table.freq tr, table.freq td {\n                border: 0;\n                padding: 0;\n            }\n\n            .freq thead {\n                font-weight: 600;\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n\n            }\n\n            td.fillremaining{\n                width:auto;\n                max-width: none;\n            }\n\n            td.number, th.number {\n                text-align:right ;\n            }\n\n        /* Freq mini */\n            .freq.mini td{\n                width: 50%;\n                padding: 1px;\n                font-size: 12px;\n\n            }\n            table.freq.mini {\n                 width:100%;\n            }\n            .freq.mini th {\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                max-width: 5em;\n                font-weight: 400;\n                text-align:right;\n                padding-right: 0.5em;\n            }\n\n            .missing {\n                color: #a94442;\n            }\n            .alert, .alert > th, .alert > td {\n                color: #a94442;\n            }\n\n\n        /* Bars in tables */\n            .freq .bar{\n                float: left;\n                width: 0;\n                height: 100%;\n                line-height: 20px;\n                color: #fff;\n                text-align: center;\n                background-color: #337ab7;\n                border-radius: 3px;\n                margin-right: 4px;\n            }\n            .other .bar {\n                background-color: #999;\n            }\n            .missing .bar{\n                background-color: #a94442;\n            }\n            .tooltip-inner {\n                width: 100%;\n                white-space: nowrap;\n                text-align:left;\n            }\n\n            .extrapadding{\n                padding: 2em;\n            }",
            "title": "Describing The Data"
        },
        {
            "location": "/Exploratory Data Analysis/#first-and-last-dataframe-rows",
            "text": "1\n2\n3\n4\n5 # Inspect the first 5 rows of `digits`  first   =   digits . head ( 5 )  # Inspect the last 3 rows  last   =   digits . tail ( 3 )    1 print ( first )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15    0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  62  \\\n0   0   1   6  15  12   1   0   0   0   7 ...   0   0   0   6  14   7   1   0   \n1   0   0  10  16   6   0   0   0   0   7 ...   0   0   0  10  16  15   3   0   \n2   0   0   8  15  16  13   0   0   0   1 ...   0   0   0   9  14   0   0   0   \n3   0   0   0   3  11  16   0   0   0   0 ...   0   0   0   0   1  15   2   0   \n4   0   0   5  14   4   0   0   0   0   0 ...   0   0   0   4  12  14   7   0\n\n   63  64  \n0   0   0  \n1   0   0  \n2   0   7  \n3   0   4  \n4   0   6\n\n[5 rows x 65 columns]   1 print ( last )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11       0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  \\\n3820   0   0   3  15   0   0   0   0   0   0 ...   0   0   0   4  14  16   9   \n3821   0   0   6  16   2   0   0   0   0   0 ...   0   0   0   5  16  16  16   \n3822   0   0   2  15  16  13   1   0   0   0 ...   0   0   0   4  14   1   0\n\n      62  63  64  \n3820   0   0   6  \n3821   5   0   6  \n3822   0   0   7\n\n[3 rows x 65 columns]",
            "title": "First and Last DataFrame Rows"
        },
        {
            "location": "/Exploratory Data Analysis/#sample-the-data",
            "text": "1\n2 # Take a sample of 5  digits . sample ( 5 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       0 \n       1 \n       2 \n       3 \n       4 \n       5 \n       6 \n       7 \n       8 \n       9 \n       ... \n       55 \n       56 \n       57 \n       58 \n       59 \n       60 \n       61 \n       62 \n       63 \n       64 \n     \n   \n   \n     \n       1249 \n       0 \n       0 \n       14 \n       14 \n       13 \n       15 \n       5 \n       0 \n       0 \n       0 \n       ... \n       0 \n       0 \n       0 \n       12 \n       16 \n       10 \n       2 \n       0 \n       0 \n       5 \n     \n     \n       3702 \n       0 \n       0 \n       0 \n       9 \n       16 \n       12 \n       2 \n       0 \n       0 \n       0 \n       ... \n       0 \n       0 \n       0 \n       0 \n       9 \n       14 \n       2 \n       0 \n       0 \n       0 \n     \n     \n       1605 \n       0 \n       0 \n       7 \n       16 \n       13 \n       2 \n       0 \n       0 \n       0 \n       2 \n       ... \n       0 \n       0 \n       0 \n       5 \n       14 \n       11 \n       1 \n       0 \n       0 \n       0 \n     \n     \n       1890 \n       0 \n       0 \n       3 \n       15 \n       15 \n       5 \n       0 \n       0 \n       0 \n       0 \n       ... \n       2 \n       0 \n       0 \n       3 \n       15 \n       16 \n       16 \n       13 \n       1 \n       9 \n     \n     \n       1295 \n       0 \n       0 \n       7 \n       15 \n       13 \n       3 \n       0 \n       0 \n       0 \n       0 \n       ... \n       0 \n       0 \n       0 \n       9 \n       13 \n       12 \n       3 \n       0 \n       0 \n       0 \n     \n     5 rows \u00d7 65 columns   1\n2\n3\n4\n5\n6\n7 # import `sample` from `random`  from   random   import   sample  # Create a random index  randomIndex   =   np . array ( sample ( range ( len ( digits )),   5 ))  print ( randomIndex )    1 [ 846  569  315 2932 2328]   1\n2\n3\n4\n5 # Get 5 random rows  digitsSample   =   digits . ix [ randomIndex ]  # Print the sample  print ( digitsSample )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15       0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  \\\n846    0   5  14  15   9   1   0   0   0   7 ...   0   0   4  12  16  12  10   \n569    0   1   7  12  12   0   0   0   0   3 ...   0   0   0  10  16  13   7   \n315    0   1   6  13  13   4   0   0   0   9 ...   0   0   0   4  14  16   9   \n2932   0   0   4  12  10   1   0   0   0   0 ...   0   0   0   4  12  11   3   \n2328   0   0   4  15  16  16  16  15   0   0 ...   0   0   0   5  15   3   0\n\n      62  63  64  \n846    4   0   2  \n569    0   0   3  \n315    2   0   2  \n2932   0   0   0  \n2328   0   0   7\n\n[5 rows x 65 columns]",
            "title": "Sample the Data"
        },
        {
            "location": "/Exploratory Data Analysis/#queries",
            "text": "1 iris . head ( 2 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       0 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       1 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       Iris-setosa \n     \n      1\n2 # Petal length greater than sepal length?  iris . query ( 'Petal_Length > Sepal_Length' )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n      1\n2 # reverse  iris . query ( 'Sepal_Length > Petal_Length' )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       0 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       1 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       Iris-setosa \n     \n     \n       2 \n       4.6 \n       3.1 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       3 \n       5.0 \n       3.6 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       4 \n       5.4 \n       3.9 \n       1.7 \n       0.4 \n       Iris-setosa \n     \n     \n       5 \n       4.6 \n       3.4 \n       1.4 \n       0.3 \n       Iris-setosa \n     \n     \n       6 \n       5.0 \n       3.4 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       7 \n       4.4 \n       2.9 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       8 \n       4.9 \n       3.1 \n       1.5 \n       0.1 \n       Iris-setosa \n     \n     \n       9 \n       5.4 \n       3.7 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       10 \n       4.8 \n       3.4 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       11 \n       4.8 \n       3.0 \n       1.4 \n       0.1 \n       Iris-setosa \n     \n     \n       12 \n       4.3 \n       3.0 \n       1.1 \n       0.1 \n       Iris-setosa \n     \n     \n       13 \n       5.8 \n       4.0 \n       1.2 \n       0.2 \n       Iris-setosa \n     \n     \n       14 \n       5.7 \n       4.4 \n       1.5 \n       0.4 \n       Iris-setosa \n     \n     \n       15 \n       5.4 \n       3.9 \n       1.3 \n       0.4 \n       Iris-setosa \n     \n     \n       16 \n       5.1 \n       3.5 \n       1.4 \n       0.3 \n       Iris-setosa \n     \n     \n       17 \n       5.7 \n       3.8 \n       1.7 \n       0.3 \n       Iris-setosa \n     \n     \n       18 \n       5.1 \n       3.8 \n       1.5 \n       0.3 \n       Iris-setosa \n     \n     \n       19 \n       5.4 \n       3.4 \n       1.7 \n       0.2 \n       Iris-setosa \n     \n     \n       20 \n       5.1 \n       3.7 \n       1.5 \n       0.4 \n       Iris-setosa \n     \n     \n       21 \n       4.6 \n       3.6 \n       1.0 \n       0.2 \n       Iris-setosa \n     \n     \n       22 \n       5.1 \n       3.3 \n       1.7 \n       0.5 \n       Iris-setosa \n     \n     \n       23 \n       4.8 \n       3.4 \n       1.9 \n       0.2 \n       Iris-setosa \n     \n     \n       24 \n       5.0 \n       3.0 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       25 \n       5.0 \n       3.4 \n       1.6 \n       0.4 \n       Iris-setosa \n     \n     \n       26 \n       5.2 \n       3.5 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       27 \n       5.2 \n       3.4 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       28 \n       4.7 \n       3.2 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       29 \n       4.8 \n       3.1 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       119 \n       6.9 \n       3.2 \n       5.7 \n       2.3 \n       Iris-virginica \n     \n     \n       120 \n       5.6 \n       2.8 \n       4.9 \n       2.0 \n       Iris-virginica \n     \n     \n       121 \n       7.7 \n       2.8 \n       6.7 \n       2.0 \n       Iris-virginica \n     \n     \n       122 \n       6.3 \n       2.7 \n       4.9 \n       1.8 \n       Iris-virginica \n     \n     \n       123 \n       6.7 \n       3.3 \n       5.7 \n       2.1 \n       Iris-virginica \n     \n     \n       124 \n       7.2 \n       3.2 \n       6.0 \n       1.8 \n       Iris-virginica \n     \n     \n       125 \n       6.2 \n       2.8 \n       4.8 \n       1.8 \n       Iris-virginica \n     \n     \n       126 \n       6.1 \n       3.0 \n       4.9 \n       1.8 \n       Iris-virginica \n     \n     \n       127 \n       6.4 \n       2.8 \n       5.6 \n       2.1 \n       Iris-virginica \n     \n     \n       128 \n       7.2 \n       3.0 \n       5.8 \n       1.6 \n       Iris-virginica \n     \n     \n       129 \n       7.4 \n       2.8 \n       6.1 \n       1.9 \n       Iris-virginica \n     \n     \n       130 \n       7.9 \n       3.8 \n       6.4 \n       2.0 \n       Iris-virginica \n     \n     \n       131 \n       6.4 \n       2.8 \n       5.6 \n       2.2 \n       Iris-virginica \n     \n     \n       132 \n       6.3 \n       2.8 \n       5.1 \n       1.5 \n       Iris-virginica \n     \n     \n       133 \n       6.1 \n       2.6 \n       5.6 \n       1.4 \n       Iris-virginica \n     \n     \n       134 \n       7.7 \n       3.0 \n       6.1 \n       2.3 \n       Iris-virginica \n     \n     \n       135 \n       6.3 \n       3.4 \n       5.6 \n       2.4 \n       Iris-virginica \n     \n     \n       136 \n       6.4 \n       3.1 \n       5.5 \n       1.8 \n       Iris-virginica \n     \n     \n       137 \n       6.0 \n       3.0 \n       4.8 \n       1.8 \n       Iris-virginica \n     \n     \n       138 \n       6.9 \n       3.1 \n       5.4 \n       2.1 \n       Iris-virginica \n     \n     \n       139 \n       6.7 \n       3.1 \n       5.6 \n       2.4 \n       Iris-virginica \n     \n     \n       140 \n       6.9 \n       3.1 \n       5.1 \n       2.3 \n       Iris-virginica \n     \n     \n       141 \n       5.8 \n       2.7 \n       5.1 \n       1.9 \n       Iris-virginica \n     \n     \n       142 \n       6.8 \n       3.2 \n       5.9 \n       2.3 \n       Iris-virginica \n     \n     \n       143 \n       6.7 \n       3.3 \n       5.7 \n       2.5 \n       Iris-virginica \n     \n     \n       144 \n       6.7 \n       3.0 \n       5.2 \n       2.3 \n       Iris-virginica \n     \n     \n       145 \n       6.3 \n       2.5 \n       5.0 \n       1.9 \n       Iris-virginica \n     \n     \n       146 \n       6.5 \n       3.0 \n       5.2 \n       2.0 \n       Iris-virginica \n     \n     \n       147 \n       6.2 \n       3.4 \n       5.4 \n       2.3 \n       Iris-virginica \n     \n     \n       148 \n       5.9 \n       3.0 \n       5.1 \n       1.8 \n       Iris-virginica \n     \n     149 rows \u00d7 5 columns   1\n2 # alternatively  iris [ iris . Sepal_Length   >   iris . Petal_Length ]     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       0 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       1 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       Iris-setosa \n     \n     \n       2 \n       4.6 \n       3.1 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       3 \n       5.0 \n       3.6 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       4 \n       5.4 \n       3.9 \n       1.7 \n       0.4 \n       Iris-setosa \n     \n     \n       5 \n       4.6 \n       3.4 \n       1.4 \n       0.3 \n       Iris-setosa \n     \n     \n       6 \n       5.0 \n       3.4 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       7 \n       4.4 \n       2.9 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       8 \n       4.9 \n       3.1 \n       1.5 \n       0.1 \n       Iris-setosa \n     \n     \n       9 \n       5.4 \n       3.7 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       10 \n       4.8 \n       3.4 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       11 \n       4.8 \n       3.0 \n       1.4 \n       0.1 \n       Iris-setosa \n     \n     \n       12 \n       4.3 \n       3.0 \n       1.1 \n       0.1 \n       Iris-setosa \n     \n     \n       13 \n       5.8 \n       4.0 \n       1.2 \n       0.2 \n       Iris-setosa \n     \n     \n       14 \n       5.7 \n       4.4 \n       1.5 \n       0.4 \n       Iris-setosa \n     \n     \n       15 \n       5.4 \n       3.9 \n       1.3 \n       0.4 \n       Iris-setosa \n     \n     \n       16 \n       5.1 \n       3.5 \n       1.4 \n       0.3 \n       Iris-setosa \n     \n     \n       17 \n       5.7 \n       3.8 \n       1.7 \n       0.3 \n       Iris-setosa \n     \n     \n       18 \n       5.1 \n       3.8 \n       1.5 \n       0.3 \n       Iris-setosa \n     \n     \n       19 \n       5.4 \n       3.4 \n       1.7 \n       0.2 \n       Iris-setosa \n     \n     \n       20 \n       5.1 \n       3.7 \n       1.5 \n       0.4 \n       Iris-setosa \n     \n     \n       21 \n       4.6 \n       3.6 \n       1.0 \n       0.2 \n       Iris-setosa \n     \n     \n       22 \n       5.1 \n       3.3 \n       1.7 \n       0.5 \n       Iris-setosa \n     \n     \n       23 \n       4.8 \n       3.4 \n       1.9 \n       0.2 \n       Iris-setosa \n     \n     \n       24 \n       5.0 \n       3.0 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       25 \n       5.0 \n       3.4 \n       1.6 \n       0.4 \n       Iris-setosa \n     \n     \n       26 \n       5.2 \n       3.5 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       27 \n       5.2 \n       3.4 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       28 \n       4.7 \n       3.2 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       29 \n       4.8 \n       3.1 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       119 \n       6.9 \n       3.2 \n       5.7 \n       2.3 \n       Iris-virginica \n     \n     \n       120 \n       5.6 \n       2.8 \n       4.9 \n       2.0 \n       Iris-virginica \n     \n     \n       121 \n       7.7 \n       2.8 \n       6.7 \n       2.0 \n       Iris-virginica \n     \n     \n       122 \n       6.3 \n       2.7 \n       4.9 \n       1.8 \n       Iris-virginica \n     \n     \n       123 \n       6.7 \n       3.3 \n       5.7 \n       2.1 \n       Iris-virginica \n     \n     \n       124 \n       7.2 \n       3.2 \n       6.0 \n       1.8 \n       Iris-virginica \n     \n     \n       125 \n       6.2 \n       2.8 \n       4.8 \n       1.8 \n       Iris-virginica \n     \n     \n       126 \n       6.1 \n       3.0 \n       4.9 \n       1.8 \n       Iris-virginica \n     \n     \n       127 \n       6.4 \n       2.8 \n       5.6 \n       2.1 \n       Iris-virginica \n     \n     \n       128 \n       7.2 \n       3.0 \n       5.8 \n       1.6 \n       Iris-virginica \n     \n     \n       129 \n       7.4 \n       2.8 \n       6.1 \n       1.9 \n       Iris-virginica \n     \n     \n       130 \n       7.9 \n       3.8 \n       6.4 \n       2.0 \n       Iris-virginica \n     \n     \n       131 \n       6.4 \n       2.8 \n       5.6 \n       2.2 \n       Iris-virginica \n     \n     \n       132 \n       6.3 \n       2.8 \n       5.1 \n       1.5 \n       Iris-virginica \n     \n     \n       133 \n       6.1 \n       2.6 \n       5.6 \n       1.4 \n       Iris-virginica \n     \n     \n       134 \n       7.7 \n       3.0 \n       6.1 \n       2.3 \n       Iris-virginica \n     \n     \n       135 \n       6.3 \n       3.4 \n       5.6 \n       2.4 \n       Iris-virginica \n     \n     \n       136 \n       6.4 \n       3.1 \n       5.5 \n       1.8 \n       Iris-virginica \n     \n     \n       137 \n       6.0 \n       3.0 \n       4.8 \n       1.8 \n       Iris-virginica \n     \n     \n       138 \n       6.9 \n       3.1 \n       5.4 \n       2.1 \n       Iris-virginica \n     \n     \n       139 \n       6.7 \n       3.1 \n       5.6 \n       2.4 \n       Iris-virginica \n     \n     \n       140 \n       6.9 \n       3.1 \n       5.1 \n       2.3 \n       Iris-virginica \n     \n     \n       141 \n       5.8 \n       2.7 \n       5.1 \n       1.9 \n       Iris-virginica \n     \n     \n       142 \n       6.8 \n       3.2 \n       5.9 \n       2.3 \n       Iris-virginica \n     \n     \n       143 \n       6.7 \n       3.3 \n       5.7 \n       2.5 \n       Iris-virginica \n     \n     \n       144 \n       6.7 \n       3.0 \n       5.2 \n       2.3 \n       Iris-virginica \n     \n     \n       145 \n       6.3 \n       2.5 \n       5.0 \n       1.9 \n       Iris-virginica \n     \n     \n       146 \n       6.5 \n       3.0 \n       5.2 \n       2.0 \n       Iris-virginica \n     \n     \n       147 \n       6.2 \n       3.4 \n       5.4 \n       2.3 \n       Iris-virginica \n     \n     \n       148 \n       5.9 \n       3.0 \n       5.1 \n       1.8 \n       Iris-virginica \n     \n     149 rows \u00d7 5 columns",
            "title": "Queries"
        },
        {
            "location": "/Exploratory Data Analysis/#the-challenges-of-data",
            "text": "",
            "title": "The Challenges of Data"
        },
        {
            "location": "/Exploratory Data Analysis/#missing-values",
            "text": "1\n2 # Identifiy missing values  pd . isnull ( digits )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       0 \n       1 \n       2 \n       3 \n       4 \n       5 \n       6 \n       7 \n       8 \n       9 \n       ... \n       55 \n       56 \n       57 \n       58 \n       59 \n       60 \n       61 \n       62 \n       63 \n       64 \n     \n   \n   \n     \n       0 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       1 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       2 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       4 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       5 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       6 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       7 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       8 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       9 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       10 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       11 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       12 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       13 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       14 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       15 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       16 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       17 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       18 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       19 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       20 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       21 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       22 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       23 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       24 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       25 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       26 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       27 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       28 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       29 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       3793 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3794 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3795 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3796 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3797 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3798 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3799 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3800 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3801 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3802 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3803 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3804 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3805 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3806 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3807 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3808 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3809 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3810 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3811 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3812 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3813 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3814 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3815 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3816 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3817 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3818 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3819 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3820 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3821 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3822 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     3823 rows \u00d7 65 columns",
            "title": "Missing Values"
        },
        {
            "location": "/Exploratory Data Analysis/#delete",
            "text": "1\n2\n3\n4\n5 # Drop rows with missing values  df . dropna ( axis = 0 )  # Drop columns with missing values   df . dropna ( axis = 1 )",
            "title": "Delete"
        },
        {
            "location": "/Exploratory Data Analysis/#impute",
            "text": "Imputation: mean, median, another variable, estimate with regression ANOVA, logit, k-NN.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # Import NumPy  import   numpy   as   np  # Calculate the mean of the DataFrame variable Salary  mean   =   np . mean ( df . Salary )  # Replace missing values with the mean  df   =   df . Salary . fillna ( mean )  df   =   df . Salary . fillna ( mean ,   method = ffill )     ffill  and  bfill  for forward and backward fill.   1\n2\n3\n4\n5\n6 from   scipy   import   interpolate  # Fill the DataFrame  df . interpolate ()  df . interpolate ( method = cubic )     cubic ,  polynomial .  limit  and  limit_direction .",
            "title": "Impute"
        },
        {
            "location": "/Exploratory Data Analysis/#outliers",
            "text": "Delete (data entry, processing errors), transform (assign weights, natural log to reduce variation) or impute them (replace extreme values with median, mean or mode values).",
            "title": "Outliers"
        },
        {
            "location": "/Exploratory Data Analysis/#the-datas-features",
            "text": "",
            "title": "The Data\u2019s Features"
        },
        {
            "location": "/Exploratory Data Analysis/#feature-engineering",
            "text": "Increase the predictive power of learning algorithms by creating features from raw data that will help the learning process.",
            "title": "Feature Engineering"
        },
        {
            "location": "/Exploratory Data Analysis/#encode-categorical-variables-into-numerical-ones",
            "text": "1\n2\n3\n4\n5\n6\n7\n8 # Factorize the values   labels , levels   =   pd . factorize ( iris . Class )  # Save the encoded variables in `iris.Class`  iris . Class   =   labels  # Print out the first rows  iris . Class . head ()    1\n2\n3\n4\n5\n6 0    0\n1    0\n2    0\n3    0\n4    0\nName: Class, dtype: int64",
            "title": "Encode categorical variables into numerical ones"
        },
        {
            "location": "/Exploratory Data Analysis/#bin-continuous-variables-in-groups",
            "text": "1\n2\n3\n4\n5\n6\n7\n8 # Define the bins  mybins   =   range ( 0 ,   df . age . max (),   10 )  # Cut the data from the DataFrame with the help of the bins  df [ 'age_bucket' ]   =   pd . cut ( df . age ,   bins = mybins )  # Count the number of values per bucket  df [ 'age_bucket' ] . value_counts ()",
            "title": "Bin continuous variables in groups"
        },
        {
            "location": "/Exploratory Data Analysis/#scale-features",
            "text": "Center the data around 0.  1\n2\n3\n4\n5 from   sklearn.preprocessing   import   StandardScaler  scaler   =   StandardScaler () . fit ( X )  rescaledX   =   scaler . transform ( X )",
            "title": "Scale features"
        },
        {
            "location": "/Exploratory Data Analysis/#feature-selection",
            "text": "Select the key subset of original data features in an attempt to reduce the dimensionality of the training problem.  PCA combines similar (correlated) attributes and creates new ones that are considered superior to the original attributes of the dataset.   Feature selection doesn\u2019t combine attributes: it evaluates the quality and predictive power and selects the best set.  To find important features, calculate how much better or worse a model does when we leave one variable out of the equation.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # Import `RandomForestClassifier`  from   sklearn.ensemble   import   RandomForestClassifier  # Isolate Data, class labels and column values  X   =   iris . iloc [:, 0 : 4 ]  Y   =   iris . iloc [:, - 1 ]  names   =   iris . columns . values  # Build the model  rfc   =   RandomForestClassifier ()  # Fit the model  rfc . fit ( X ,   Y )  # Print the results  print ( \"Features sorted by their score:\" )  print ( sorted ( zip ( map ( lambda   x :   round ( x ,   4 ),   rfc . feature_importances_ ),   names ),   reverse = True ))    1\n2 Features sorted by their score:\n[(0.4899, 'Petal_Length'), (0.2752, 'Petal_Width'), (0.2185, 'Sepal_Length'), (0.016400000000000001, 'Sepal_Width')]   The best feature set is one that includes the petal length and petal width data.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 # Isolate feature importances   importance   =   rfc . feature_importances_  # Sort the feature importances   sorted_importances   =   np . argsort ( importance )  # Insert padding  padding   =   np . arange ( len ( names ) - 1 )   +   0.5  # Plot the data  plt . barh ( padding ,   importance [ sorted_importances ],   align = 'center' )  # Customize the plot  plt . yticks ( padding ,   names [ sorted_importances ])  plt . xlabel ( \"Relative Importance\" )  plt . title ( \"Variable Importance\" )  # Show the plot  plt . show ()",
            "title": "Feature Selection"
        },
        {
            "location": "/Exploratory Data Analysis/#patterns-in-the-data",
            "text": "Visualization of the data; static with Matplotlib or Seaborn, interactive with Bokeh or Plotly.",
            "title": "Patterns In the Data"
        },
        {
            "location": "/Exploratory Data Analysis/#correlation-identification-with-pca-from-scikit-learn",
            "text": "",
            "title": "Correlation Identification with PCA from scikit-learn"
        },
        {
            "location": "/Exploratory Data Analysis/#matplotlib",
            "text": "Dimensionality Reduction techniques, such as Principal Component Analysis (PCA). From \u2018many\u2019 to two \u2018principal components\u2019.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 # Import `PCA` from `sklearn.decomposition`  from   sklearn.decomposition   import   PCA  # Build the model  pca   =   PCA ( n_components = 2 )  # Reduce the data, output is ndarray  reduced_data   =   pca . fit_transform ( digits )  # Inspect shape of the `reduced_data`  reduced_data . shape  # print out the reduced data  print ( reduced_data )    1\n2\n3\n4\n5\n6\n7 [[ 12.65674168  -4.63610357] \n  [ 16.82906354 -12.96575346] \n  [-19.08072301  10.58293767] \n  ...,  \n  [ 23.90693984   6.06265415] \n  [ 29.1798759   -3.06847144] \n  [-25.23132536  11.60863909]]    1 reduced_data   =   pd . DataFrame ( reduced_data )    1\n2\n3\n4\n5 import   matplotlib.pyplot   as   plt  plt . scatter ( reduced_data [ 0 ],   reduced_data [ 1 ])  plt . show ()",
            "title": "Matplotlib"
        },
        {
            "location": "/Exploratory Data Analysis/#bokeh",
            "text": "To be implemented in a webpage for example.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 from   bokeh.charts   import   Scatter ,   output_file ,   show  # Construct the scatter plot  p   =   Scatter ( iris ,   x = 'Petal_Length' ,   y = 'Petal_Width' ,   color = \"Class\" ,   title = \"Petal Length vs Petal Width\" , \n             xlabel = \"Sepal Length\" ,   ylabel = \"Sepal Width\" )  # Output the file   output_file ( 'scatter.html' )  # Show the scatter plot  show ( p )    The GIF output:",
            "title": "Bokeh"
        },
        {
            "location": "/Exploratory Data Analysis/#correlation-identification-with-pandas",
            "text": "The Pearson correlation assumes that the variables are normally distributed, that there is a straight line relationship between each of the variables and that the data is normally distributed about the regression line.   The Spearman correlation, on the other hand, assumes that we have two ordinal variables or two variables that are related in some way, but not linearly. The Spearman coefficient is the sum of deviation squared by  n  times  n  minus 1.  The Kendall Tau correlation is a coefficient that represents the degree of concordance between two columns of ranked data. We can use the Spearman correlation to measure the degree of association between two variables. The Kendal Tau coefficient is calculated by the number of concordant pairs minus the number of discordant pairs divided by the total number of pairs.  Spearman\u2019s coefficient will usually be larger than the Kendall\u2019s Tau coefficient, but this is not always the case: we\u2019ll get a smaller Spearman\u2019s coefficient when the deviations are huge among the observations of the data. The Spearman correlation is very sensitive to this and this might come in handy in some cases!  The two last correlation measures require ranking the data.  1\n2 # Pearson correlation  iris . corr ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       Sepal_Length \n       1.000000 \n       -0.103784 \n       0.871283 \n       0.816971 \n       0.781219 \n     \n     \n       Sepal_Width \n       -0.103784 \n       1.000000 \n       -0.415218 \n       -0.350733 \n       -0.414532 \n     \n     \n       Petal_Length \n       0.871283 \n       -0.415218 \n       1.000000 \n       0.962314 \n       0.948519 \n     \n     \n       Petal_Width \n       0.816971 \n       -0.350733 \n       0.962314 \n       1.000000 \n       0.956014 \n     \n     \n       Class \n       0.781219 \n       -0.414532 \n       0.948519 \n       0.956014 \n       1.000000 \n     \n      1\n2\n3 iris2   =   iris . rank ()  # Kendall Tau correlation  iris2 . corr ( 'kendall' )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       Sepal_Length \n       1.000000 \n       -0.067636 \n       0.718290 \n       0.654197 \n       0.669163 \n     \n     \n       Sepal_Width \n       -0.067636 \n       1.000000 \n       -0.175665 \n       -0.140207 \n       -0.327228 \n     \n     \n       Petal_Length \n       0.718290 \n       -0.175665 \n       1.000000 \n       0.803041 \n       0.822578 \n     \n     \n       Petal_Width \n       0.654197 \n       -0.140207 \n       0.803041 \n       1.000000 \n       0.837934 \n     \n     \n       Class \n       0.669163 \n       -0.327228 \n       0.822578 \n       0.837934 \n       1.000000 \n     \n      1\n2 # Spearman Rank correlation  iris2 . corr ( 'spearman' )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       Sepal_Length \n       1.000000 \n       -0.152136 \n       0.881759 \n       0.833586 \n       0.796546 \n     \n     \n       Sepal_Width \n       -0.152136 \n       1.000000 \n       -0.294020 \n       -0.267686 \n       -0.426319 \n     \n     \n       Petal_Length \n       0.881759 \n       -0.294020 \n       1.000000 \n       0.936188 \n       0.935220 \n     \n     \n       Petal_Width \n       0.833586 \n       -0.267686 \n       0.936188 \n       1.000000 \n       0.937409 \n     \n     \n       Class \n       0.796546 \n       -0.426319 \n       0.935220 \n       0.937409 \n       1.000000",
            "title": "Correlation Identification with Pandas"
        },
        {
            "location": "/Intro to data.world in Python/",
            "text": "CONTENT\n\n\nIntroduction\n\n\nWorking with Datasets\n\n\nImport a Dataset\n\n\nWorking with Datasets\n\n\nReading the metadata\n\n\nAccessing the data\n\n\n\n\n\n\nWorking with multiple datasets\n\n\nQuerying with data.world\n\n\nSQL: Querying a table\n\n\nSQL: Query multiple tables (join)\n\n\nSPARQL: Querying linked data\n\n\n\n\n\n\nWrap up\n\n\nAdvanced SDK Functionality\n\n\nOpen the API\n\n\nCreate a dataset using create_dataset method\n\n\nWrite a dataframe to a local file and upload to dataset\n\n\nUpdate dataset\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the course. Python 3. From DataCamp.\n\n\n\n\nIntroduction\n\u00b6\n\n\nOpen data is at the heart of \ndata.world\n. \n\n\nOpen an account, log in, find a dataset, download it or copy URL or integrate data.world with Python/R/Tableau by installing dw in the terminal. In Python for example.\n\n\npip install datadotworld[pandas]\n or \nconda install datadotworld-py\n\n\nthen,\n\n\ndw configure\n\n\nPull the API token from the account and enter it.\n\n\nThere are similar procedures for R and Tableau. Everything is documented on the website (when trying to download any dataset, more options appear for Python/R/Tableau).\n\n\nOption 1: use the data.world Jupyter Notebook template as a way to jump-start a project with Python.\n\n\nOption 2:\n\n\n1\n2\n3\n4\n5\n6\n%\npylab\n \ninline\n\n\nimport\n \npandas\n \nas\n \npd\n\n\nimport\n \nos\n\n\n\n# Import the datadotworld module as dw\n\n\nimport\n \ndatadotworld\n \nas\n \ndw\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\nWorking with Datasets\n\u00b6\n\n\nImport a Dataset\n\u00b6\n\n\nOnce the module is loaded, there are two ways to import a dataset.\n\n\n1\n2\n3\n# First\n\n\n# Import the city council votes dataset\n\n\ndataset\n \n=\n \ndw\n.\nload_dataset\n(\n'stephen-hoover/chicago-city-council-votes'\n)\n\n\n\n\n\n\n\nThe dataset is now in the cache.\n\n\n1\n2\n3\n# Second\n\n\n# Import the city council votes dataset\n\n\ndataset\n \n=\n \ndw\n.\nload_dataset\n(\n'https://data.world/stephen-hoover/chicago-city-council-votes'\n)\n\n\n\n\n\n\n\nWorking with Datasets\n\u00b6\n\n\nFrom the beginning.\n\n\n1\n2\n3\n4\n# Import the datadotworld module as dw\n\n\nimport\n \ndatadotworld\n \nas\n \ndw\n\n\n# Import the Pretty Print module\n\n\nimport\n \npprint\n \nas\n \npp\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# Import the city council votes dataset\n\n\ndataset\n \n=\n \ndw\n.\nload_dataset\n(\n'https://data.world/stephen-hoover/chicago-city-council-votes'\n)\n\n\n\n# Use describe() \n\n\n# Review all the metadata that is downloaded with the dataset\n\n\n# Print it to the screen using pp.pprint()\n\n\npp\n.\npprint\n(\ndataset\n.\ndescribe\n())\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n{\n'\ndescription\n'\n:\n \n'\nChicago\n \ncity\n \ncouncil\n \nvoting\n \nrecords\n \nfrom\n \nMay\n \n2006\n \nto\n \nMarch\n \n'\n\n                \n'\n2017\n\\\nn\n'\n\n                \n'\\n'\n\n                \n'#\n \nAbout\n \nthis\n \nproject\n\\\nn\n'\n\n                \n'\nThis\n \ndataset\n \naims\n \nto\n \nincrease\n \ntransparency\n \ninto\n \nthe\n \nChicago\n \n'\n\n                \n\"city government by publishing each Alderman's voting record \"\n\n                \n'\nin\n \nan\n \neasily\n \nmachine\n-\nreadable\n \nformat\n.\n \nThese\n \ndata\n \ncome\n \nfrom\n \n'\n\n                \n'\npdfs\n \n[\npublished\n \nby\n \nthe\n \nOffice\n \nof\n \nthe\n \nCity\n \n'\n\n                \n'\nClerk\n](\nhttp\n:\n//www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports).\\n'\n\n                \n'\\n'\n\n                \n'\nThis\n \nwork\n \nwas\n \ndone\n \nas\n \npart\n \nof\n \nthe\n \nData\n \nfor\n \nDemocracy\n \n'\n\n                \n'\n[\n\"Chicago '\n\n                \n'\nLobbyists\n\"](https://data.world/lilianhj/chicago-lobbyists) '\n\n                \n'\nproject\n.\n\\\nn\n'\n\n                \n'\\n'\n\n                \n'\nThe\n \ncode\n \nwhich\n \nproduced\n \nthese\n \ndata\n \nis\n \nat\n \n'\n\n                \n'\nhttps\n:\n//github.com/stephen-hoover/data-processing/blob/master/scraping/Scrape%20Chicago%20City%20Clerk%20Website.ipynb '\n\n                \n'\n.\n\\\nn\n'\n\n                \n'\\n'\n\n                \n'#\n \nStill\n \nto\n-\ndo\n\\\nn\n'\n\n                \n'\nIt\n \nwould\n \nbe\n \nuseful\n \nto\n \ninclude\n \nmore\n \ninformation\n \nabout\n \neach\n \n'\n\n                \n'\nmeasure\n \n--\n \nsponsors\n,\n \nfull\n \ntext\n,\n \nand\n \nsubject\n \ntags\n \nwould\n \nbe\n \n'\n\n                \n'\nparticularly\n \ngood\n \nto\n \nhave\n.\n\\\nn\n'\n\n                \n'\\n'\n\n                \n'\nAldermen\n \nnames\n \nin\n \nthe\n \nvoting\n \nrecords\n \nare\n \nnot\n \nfully\n \n'\n\n                \n'\nstandardized\n \nyet\n.\n \nIdeally\n \nthe\n \nsame\n \nperson\n \nwould\n \nalways\n \nhave\n \n'\n\n                \n'\nexactly\n \nthe\n \nsame\n \nstring\n.\n\\\nn\n'\n\n                \n'\\n'\n\n                \n'#\n \nExternal\n \nresources\n\\\nn\n'\n\n                \n'\n[\nCity\n \ncouncil\n \nmeeting\n \n'\n\n                \n'\nreports\n](\nhttp\n:\n//www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports)\\n'\n\n                \n'\\n'\n\n                \n'\n[\nChicago\n \nCouncilmatic\n](\nhttps\n:\n//chicago.councilmatic.org)\\n'\n\n                \n'\\n'\n\n                \n'\n[\nCity\n \nof\n \nChicago\n \nLegislative\n \nInformation\n \n'\n\n                \n'\nCenter\n](\nhttps\n:\n//chicago.legistar.com)',\n\n \n'\nhomepage\n'\n:\n \n'\nhttps\n:\n//data.world/stephen-hoover/chicago-city-council-votes',\n\n \n'\nkeywords\n'\n:\n \n[\n'\nchicago\n'\n,\n \n'\ngovernment\n'\n],\n\n \n'\nlicense\n'\n:\n \n'\nPublic\n \nDomain\n'\n,\n\n \n'\nname\n'\n:\n \n'\nstephen\n-\nhoover_chicago\n-\ncity\n-\ncouncil\n-\nvotes\n'\n,\n\n \n'\nresources\n'\n:\n \n[{\n'\nformat\n'\n:\n \n'\ncsv\n'\n,\n\n                \n'\nname\n'\n:\n \n'\nalderman_votes\n'\n,\n\n                \n'\npath\n'\n:\n \n'\ndata\n/\nalderman_votes\n.\ncsv\n'\n},\n\n               \n{\n'\nformat\n'\n:\n \n'\ncsv\n'\n,\n\n                \n'\nname\n'\n:\n \n'\nlegislation_titles\n'\n,\n\n                \n'\npath\n'\n:\n \n'\ndata\n/\nlegislation_titles\n.\ncsv\n'\n},\n\n               \n{\n'\nbytes\n'\n:\n \n428918\n,\n\n                \n'\nformat\n'\n:\n \n'\ncsv\n'\n,\n\n                \n'\nkeywords\n'\n:\n \n[\n'\nclean\n \ndata\n'\n],\n\n                \n'\nmediatype\n'\n:\n \n'\ntext\n/\ncsv\n'\n,\n\n                \n'\nname\n'\n:\n \n'\noriginal\n/\nalderman_votes\n.\ncsv\n'\n,\n\n                \n'\npath\n'\n:\n \n'\noriginal\n/\nalderman_votes\n.\ncsv\n'\n},\n\n               \n{\n'\nbytes\n'\n:\n \n29658\n,\n\n                \n'\ndescription\n'\n:\n \n'\nThese\n \nare\n \ntitles\n \nfor\n \neach\n \nof\n \nthe\n \nissues\n \nin\n \nthe\n \n'\n\n                               \n'\nalderman_votes\n.\ncsv\n \ndocument\n.\n \nJoin\n \non\n \n\"Record\"\n.\n'\n,\n\n                \n'\nformat\n'\n:\n \n'\ncsv\n'\n,\n\n                \n'\nkeywords\n'\n:\n \n[\n'\nclean\n \ndata\n'\n],\n\n                \n'\nmediatype\n'\n:\n \n'\ntext\n/\ncsv\n'\n,\n\n                \n'\nname\n'\n:\n \n'\noriginal\n/\nlegislation_titles\n.\ncsv\n'\n,\n\n                \n'\npath\n'\n:\n \n'\noriginal\n/\nlegislation_titles\n.\ncsv\n'\n}],\n\n \n'\ntitle\n'\n:\n \n'\nChicago\n \nCity\n \nCouncil\n \nVotes\n'\n}\n\n\n\n\n\n\n\n1\n2\n3\n4\n# Use describe() again\n\n\n# Get a description of a specific resource: alderman_votes\n\n\n# Print it to the screen\n\n\npp\n.\npprint\n(\ndataset\n.\ndescribe\n(\n'alderman_votes'\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n{\n'format':\n \n'csv',\n\n \n'name':\n \n'alderman_votes',\n\n \n'path':\n \n'data/alderman_votes.csv',\n\n \n'schema':\n \n{'fields':\n \n[\n{\n'description'\n:\n \n'Note that some entries contain a full '\n\n                                       \n'name and others only have a last name.'\n,\n\n                        \n'name'\n:\n \n'alderman'\n,\n\n                        \n'rdfType'\n:\n \n'http://www.w3.org/2001/XMLSchema#string'\n,\n\n                        \n'title'\n:\n \n'Alderman'\n,\n\n                        \n'type'\n:\n \n'string'\n},\n\n                       \n{\n'description'\n:\n \n'VOTE KEY: Y=Yes; N=No; A=Absent; '\n\n                                       \n'NV=Not Voting;  E=Excused; V=Vacant '\n\n                                       \n'R=Recusals from voting'\n,\n\n                        \n'name'\n:\n \n'vote'\n,\n\n                        \n'rdfType'\n:\n \n'http://www.w3.org/2001/XMLSchema#string'\n,\n\n                        \n'title'\n:\n \n'Vote'\n,\n\n                        \n'type'\n:\n \n'string'\n},\n\n                       \n{\n'name'\n:\n \n'ward'\n,\n\n                        \n'rdfType'\n:\n \n'http://www.w3.org/2001/XMLSchema#integer'\n,\n\n                        \n'title'\n:\n \n'Ward'\n,\n\n                        \n'type'\n:\n \n'integer'\n},\n\n                       \n{\n'description'\n:\n \n'YYYY-MM-DD'\n,\n\n                        \n'name'\n:\n \n'date'\n,\n\n                        \n'rdfType'\n:\n \n'http://www.w3.org/2001/XMLSchema#date'\n,\n\n                        \n'title'\n:\n \n'Date'\n,\n\n                        \n'type'\n:\n \n'date'\n},\n\n                       \n{\n'name'\n:\n \n'record'\n,\n\n                        \n'rdfType'\n:\n \n'http://www.w3.org/2001/XMLSchema#string'\n,\n\n                        \n'title'\n:\n \n'Record'\n,\n\n                        \n'type'\n:\n \n'string'\n}\n]\n}\n}\n\n\n\n\n\n\n\nReading the metadata\n\u00b6\n\n\nAll fields begin with \n{\n. The \nalderman_votes\n variable has 5 fields.\n\n\nAccessing the data\n\u00b6\n\n\nWe have access to three properties: \nraw_data\n, \ntables\n, and \ndataframes\n. Each of these returns a dictionary of values, just in different formats: \nbytes\n, \nlist\n and \npandas.DataFrame\n objects.\n\n\n1\n2\n3\n4\n5\n6\n7\n# Use the dataframes property\n\n\n# Assign the alderman_votes table to the variable votes_dataframe\n\n\nvotes_dataframe\n \n=\n \ndataset\n.\ndataframes\n[\n'alderman_votes'\n]\n\n\n\n# Use the pandas shape property\n\n\n# Get rows/columns size for the `votes_dataframe` dataframe\n\n\npp\n.\npprint\n(\nvotes_dataframe\n.\nshape\n)\n\n\n\n\n\n\n\n1\n(10850, 5)\n\n\n\n\n\n\n1\n2\n3\n# Use the pandas head function\n\n\n# Print the first 3 rows of the `votes_dataframe` dataframe\n\n\npp\n.\npprint\n(\nvotes_dataframe\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n                alderman vote  ward       date       record\n0          Manuel Flores    N     1 2006-07-26  SO2006-3086\n1  Madeline L. Haithcock    N     2 2006-07-26  SO2006-3086\n2     Dorothy J. Tillman    N     3 2006-07-26  SO2006-3086\n\n\n\n\n\n\nWorking with multiple datasets\n\u00b6\n\n\n1\n2\n3\n4\n5\nimport\n \ndatadotworld\n \nas\n \ndw\n\n\n\n# Loaded two datasets\n\n\nint_dataset\n \n=\n \ndw\n.\nload_dataset\n(\n'https://data.world/jonloyens/intermediate-data-world'\n)\n\n\nfipsCodes_dataset\n \n=\n \ndw\n.\nload_dataset\n(\n'https://data.world/uscensusbureau/fips-state-codes'\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n# Create two dataframes:\n\n\n# police_shootings from the 'fatal_police_shootings_data' table of int_dataset and\n\n\n# state_abbrvs, from the 'statesfipscodes' table of fipsCodes_dataset\n\n\npolice_shootings\n \n=\n \nint_dataset\n.\ndataframes\n[\n'fatal_police_shootings_data'\n]\n\n\nstate_abbrvs\n \n=\n \nfipsCodes_dataset\n.\ndataframes\n[\n'statesfipscodes'\n]\n\n\n\n# Merge the two datasets together\n\n\n# on the state and stusab fields\n\n\n# Assign to a merged_dataframe variable\n\n\nmerged_dataframe\n \n=\n \npolice_shootings\n.\nmerge\n(\nstate_abbrvs\n,\n\n                                          \nhow\n \n=\n \n'left'\n,\n\n                                          \nleft_on\n \n=\n \n'state'\n,\n\n                                          \nright_on\n=\n'stusab'\n)\n\n\n\n# Add a 'citystate' column to the merged_dataframe dataframe,\n\n\n# populating it with the concatinated values from the 'city' and 'state_name' columns,\n\n\n# separated by ', '\n\n\nmerged_dataframe\n[\n\"citystate\"\n]\n \n=\n \nmerged_dataframe\n[\n\"city\"\n]\n \n+\n \\\n                                \n\", \"\n \n+\n \nmerged_dataframe\n[\n\"state_name\"\n]\n\n\n\n## Print head of merged_dataframe\n\n\npp\n.\npprint\n(\nmerged_dataframe\n.\nhead\n(\n5\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n   id                name        date   manner_of_death       armed   age  \\\n0   3          Tim Elliot  2015-01-02              shot         gun  53.0   \n1   4    Lewis Lee Lembke  2015-01-02              shot         gun  47.0   \n2   5  John Paul Quintero  2015-01-03  shot and Tasered     unarmed  23.0   \n3   8     Matthew Hoffman  2015-01-04              shot  toy weapon  32.0   \n4   9   Michael Rodriguez  2015-01-04              shot    nail gun  39.0\n\n  gender race           city state  signs_of_mental_illness threat_level  \\\n0      M    A        Shelton    WA                     True       attack   \n1      M    W          Aloha    OR                    False       attack   \n2      M    H        Wichita    KS                    False        other   \n3      M    W  San Francisco    CA                     True       attack   \n4      M    H          Evans    CO                    False       attack\n\n          flee  body_camera  state_fips stusab  state_name  statens  \\\n0  Not fleeing        False          53     WA  Washington  1779804   \n1  Not fleeing        False          41     OR      Oregon  1155107   \n2  Not fleeing        False          20     KS      Kansas   481813   \n3  Not fleeing        False           6     CA  California  1779778   \n4  Not fleeing        False           8     CO    Colorado  1779779\n\n                   citystate  \n0        Shelton, Washington  \n1              Aloha, Oregon  \n2            Wichita, Kansas  \n3  San Francisco, California  \n4            Evans, Colorado\n\n\n\n\n\n\nQuerying with data.world\n\u00b6\n\n\nAnother way to pull data in from data.world is to use the \nquery()\n method to use SQL or SPARQL to query one or more datasets. Check out the full dwSQL \ndocumentation\n.\n\n\nSQL: Querying a table\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nimport\n \ndatadotworld\n \nas\n \ndw\n\n\n\n# Run a SQL query\n\n\n# Select all rows from the `unhcr_all` table where `Year` equals 2010\n\n\n# Assign the query string to a `sql_query` variable\n\n\nsql_query\n \n=\n \n\"SELECT * FROM `unhcr_all` WHERE Year = 2010\"\n\n\n\n# Use the `query` method of the datadotworld module\n\n\n# Run the `sql_query`\n\n\n# Assign the results to a `query2010` variable\n\n\nquery2010\n \n=\n \ndw\n.\nquery\n(\n'https://data.world/agriculture/national-farmers-markets'\n,\n \nsql_query\n)\n\n\n\n# Use the dataframe property of the resulting query\n\n\n# Create a dataframe variable named `unhcr2010`\n\n\nunhcr2010\n \n=\n \nquery2010\n.\ndataframe\n\n\n\n# Print the first 5 rows using the head method\n\n\npp\n.\npprint\n(\nunhcr2010\n.\nhead\n(\n5\n))\n\n\n\n\n\n\n\nSQL: Query multiple tables (join)\n\u00b6\n\n\nWrite queries against multiple tables within a single dataset or across many datasets! \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \ndatadotworld\n \nas\n \ndw\n\n\n\n# Run a SQL query\n\n\n# Select state, the count of farmers markets (fmid),\n\n\n# and average obesity rate \n\n\n# from agriculture.`national-farmers-markets`.export,\n\n\n# LEFT JOINED against health.`obesity-by-state-2014`\n\n\n# adult_obese on state and location\n\n\nsql_query\n \n=\n \n\"SELECT state, count(fmid) as count, Avg(obesity.Value) as obesityAvg FROM Export LEFT JOIN health.`obesity-by-state-2014`.`adult_obese` as obesity ON state = obesity.location GROUP BY state ORDER BY count desc\"\n\n\n\n# Use the `query` method of the datadotworld module\n\n\n# Run the `sql_query` against the `https://data.world/agriculture/national-farmers-markets` dataset\n\n\n# Assign the results to a `queryResults` variable\n\n\nqueryResults\n \n=\n \ndw\n.\nquery\n(\n'https://data.world/agriculture/national-farmers-markets'\n,\n \\\n                        \nsql_query\n)\n\n\n\n# Use the dataframes property of the resulting query\n\n\n# Create a dataframe variable named `stateStats`\n\n\nstateStats\n \n=\n \nqueryResults\n.\ndataframe\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# Plot the stateStats results using state as the x-axis\n\n\nstateStats\n.\nplot\n(\nx\n=\n'state'\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nSPARQL: Querying linked data\n\u00b6\n\n\nBehind the scenes, data.world is converting all tabular data files into linked data using Semantic Web technologies. This allows to upload any tabular format, like xlsx, csv, tsv or json, and instantly be able to query and join them without issue. SQL is great for this, but SPARQL - which is the query language for linked data - can be more robust and flexible than SQL, allowing for more complex queries.\n\n\nCheck out the full SPARQL \ndocumentation\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nimport\n \ndatadotworld\n \nas\n \ndw\n\n\n\n# A SPARQL query assigned to the `sparql_query` variable: \n\n\nsparql_query\n \n=\n \n\"PREFIX GOT: <https://tutorial.linked.data.world/d/sparqltutorial/> SELECT ?FName ?LName WHERE {?person GOT:col-got-house \n\\\"\nStark\n\\\"\n . ?person GOT:col-got-fname ?FName . ?person GOT:col-got-lname ?LName .}\"\n\n\n\n# Use the pre-defined SPARQL query\n\n\n# Query dataset http://data.world/tutorial/sparqltutorial and\n\n\n# return the results to a queryResults variable\n\n\nqueryResults\n \n=\n \ndw\n.\nquery\n(\n'http://data.world/tutorial/sparqltutorial'\n,\n \\\n                        \nsparql_query\n,\n \nquery_type\n=\n'sparql'\n)\n\n\n\n# Use the dataframe property of the resulting query\n\n\n# Create a dataframe variable named `houseStark`\n\n\nhouseStark\n \n=\n \nqueryResults\n.\ndataframe\n\n\n\n# Use pp.pprint() to print the dataframe to the screen\n\n\npp\n.\npprint\n(\nhouseStark\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n    FName  LName\n0    Robb  Stark\n1     Jon   Snow\n2   Sansa  Stark\n3    Arya  Stark\n4    Bran  Stark\n5  Rickon  Stark\n\n\n\n\n\n\nWrap up\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \ndatadotworld\n \nas\n \ndw\n\n\n# Import the sys module\n\n\nimport\n \nsys\n\n\n\n# Import a dataset\n\n\nrefugee_dataset\n \n=\n \ndw\n.\nload_dataset\n(\n'nrippner/refugee-host-nations'\n)\n\n\n\n# Get the size of the dataset:\n\n\nsys\n.\ngetsizeof\n(\nrefugee_dataset\n)\n\n\n\n\n\n\n\n1\n56\n\n\n\n\n\n\n1\n2\n3\n4\n# List all of the data files:\n\n\ndataframes\n \n=\n \nrefugee_dataset\n.\ndataframes\n\n\nfor\n \ndf\n \nin\n \ndataframes\n:\n\n    \npp\n.\npprint\n(\ndf\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n'refugees2011_15'\n'refugees_all_years'\n'refugees_per_capita'\n'unhcr_2015'\n'unhcr_all'\n'worldbank_data_dict'\n'worldbank_indicators'\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Print all of the files in a dataset:\n\n\nresources\n \n=\n \nrefugee_dataset\n.\ndescribe\n()[\n'resources'\n]\n\n\npp\n.\npprint\n(\n'name:'\n)\n\n\nfor\n \nr\n \nin\n \nresources\n:\n\n    \npp\n.\npprint\n(\nr\n[\n'name'\n])\n\n\npp\n.\npprint\n(\n'\n\\n\ntype of file:'\n)\n\n\nfor\n \nr\n \nin\n \nresources\n:\n\n    \npp\n.\npprint\n(\nr\n[\n'format'\n])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n'name:'\n'refugees2011_15'\n'refugees_all_years'\n'refugees_per_capita'\n'unhcr_2015'\n'unhcr_all'\n'worldbank_data_dict'\n'worldbank_indicators'\n'original/Refugees.ipynb'\n'original/refs.py'\n'original/refugees2011-15.csv'\n'original/refugees_all_years.csv'\n'original/refugees_per_capita.csv'\n'original/unhcr_2015.csv'\n'original/unhcr_all.csv'\n'original/worldbank_data_dict.csv'\n'original/worldbank_indicators.csv'\n'\\ntype of file:'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'ipynb'\n'py'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n\n\n\n\n\n\nAdvanced SDK Functionality\n\u00b6\n\n\nThe data.world Python SDK includes a variety of API wrappers, available via the \nApiClient\n class, to create, replace, update, and delete a dataset. In this section, we walk through a few common tasks:\n\n\n\n\nUse \napi_client()\n to get an instance of the \nApiClient\n\n\nCreate a dataset\n\n\nAdd a file from a dataframe: we write to a local csv and the upload the file\n\n\nAdd a file from a source URL: this is an easy way to add external data to the dataset and keep it up to date. We use a file from GitHub as an example, but we can use any URL source that points to a file.\n\n\nSync the dataset: this simple call reloads any files with a source URL, to ensure the latest version.\n\n\nUpdate the dataset: after creating a dataset, use \nupdate_dataset\n to change attiributes like description, summary or tags.\n\n\n\n\nUse \nhelp(api_client)\n to learn more about each available function or see the full \ndata.world API documentation\n.\n\n\nOpen the API\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \ndatadotworld\n \nas\n \ndw\n\n\n\n# Create an instance of the ApiClient using `api_client()`\n\n\napi_client\n \n=\n \ndw\n.\napi_client\n()\n\n\n\n# See api_client documentation\n\n\nhelp\n(\napi_client\n)\n\n\n\n\n\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\nHelp\n \non\n \nRestApiClient\n \nin\n \nmodule\n \ndatadotworld\n.\nclient\n.\napi\n \nobject\n:\n\n\n\nclass\n \nRestApiClient\n(\nbuiltins\n.\nobject\n)\n\n \n|\n  \nREST\n \nAPI\n \nclient\n\n \n|\n  \n \n|\n  \nParameters\n\n \n|\n  \n----------\n\n \n|\n  \nprofile\n \n:\n \nstr\n,\n \noptional\n\n \n|\n      \nName\n \nof\n \nthe\n \nconfiguration\n \nprofile\n \nto\n \nuse\n\n \n|\n  \n \n|\n  \nMethods\n \ndefined\n \nhere\n:\n\n \n|\n  \n \n|\n  \n__init__\n(\nself\n,\n \nconfig\n)\n\n \n|\n      \nInitialize\n \nself\n.\n  \nSee\n \nhelp\n(\ntype\n(\nself\n))\n \nfor\n \naccurate\n \nsignature\n.\n\n \n|\n  \n \n|\n  \nadd_files_via_url\n(\nself\n,\n \ndataset_key\n,\n \nfiles\n=\n{})\n\n \n|\n      \nAdd\n \nor\n \nupdate\n \ndataset\n \nfiles\n \nlinked\n \nto\n \nsource\n \nURLs\n\n \n|\n      \n \n|\n      \nParameters\n\n \n|\n      \n----------\n\n \n|\n      \ndataset_key\n \n:\n \nstr\n\n \n|\n          \nDataset\n \nidentifier\n,\n \nin\n \nthe\n \nform\n \nof\n \nowner\n/\nid\n\n \n|\n      \nfiles\n \n:\n \ndict\n\n \n|\n          \nFile\n \nnames\n \nand\n \nsource\n \nURLs\n \nto\n \nadd\n \nor\n \nupdate\n\n \n|\n      \n \n|\n      \nRaises\n\n \n|\n      \n------\n\n \n|\n      \nRestApiException\n\n \n|\n          \nIf\n \na\n \nserver\n \nerror\n \noccurs\n\n \n|\n      \n \n|\n      \nExamples\n\n \n|\n      \n--------\n\n \n|\n      \n>>>\n \nimport\n \ndatadotworld\n \nas\n \ndw\n\n \n|\n      \n>>>\n \nurl\n \n=\n \n'http://www.acme.inc/example.csv'\n\n \n|\n      \n>>>\n \napi_client\n \n=\n \ndw\n.\napi_client\n()\n\n \n|\n      \n>>>\n \napi_client\n.\nadd_files_via_url\n(\n\n \n|\n      \n...\n    \n'username/test-dataset'\n,\n\n \n|\n      \n...\n    \n{\n'example.csv'\n:\n \nurl\n})\n  \n# doctest: +SKIP\n\n \n|\n  \n \n|\n  \ncreate_dataset\n(\nself\n,\n \nowner_id\n,\n \n**\nkwargs\n)\n\n \n|\n      \nCreate\n \na\n \nnew\n \ndataset\n\n \n|\n      \n \n|\n      \nParameters\n\n \n|\n      \n----------\n\n \n|\n      \nowner_id\n \n:\n \nstr\n\n \n|\n          \nUsername\n \nof\n \nthe\n \nowner\n \nof\n \nthe\n \nnew\n \ndataset\n\n \n|\n      \ntitle\n \n:\n \nstr\n\n \n|\n          \nDataset\n \ntitle\n \n(\nwill\n \nbe\n \nused\n \nto\n \ngenerate\n \ndataset\n \nid\n \non\n \ncreation\n)\n\n \n|\n      \ndescription\n \n:\n \nstr\n,\n \noptional\n\n \n|\n          \nDataset\n \ndescription\n\n \n|\n      \nsummary\n \n:\n \nstr\n,\n \noptional\n\n \n|\n          \nDataset\n \nsummary\n \nmarkdown\n\n \n|\n      \ntags\n \n:\n \nlist\n,\n \noptional\n\n \n|\n          \nDataset\n \ntags\n\n \n|\n      \nlicense\n \n:\n \n{\n'Public Domain'\n,\n \n'PDDL'\n,\n \n'CC-0'\n,\n \n'CC-BY'\n,\n \n'ODC-BY'\n,\n\n \n|\n                 \n'CC-BY-SA'\n,\n \n'ODC-ODbL'\n,\n \n'CC BY-NC'\n,\n \n'CC BY-NC-SA'\n,\n \n'Other'\n}\n\n \n|\n          \nDataset\n \nlicense\n\n \n|\n      \nvisibility\n \n:\n \n{\n'OPEN'\n,\n \n'PRIVATE'\n}\n\n \n|\n          \nDataset\n \nvisibility\n\n \n|\n      \nfiles\n \n:\n \ndict\n,\n \noptional\n\n \n|\n          \nFile\n \nnames\n \nand\n \nsource\n \nURLs\n\n \n|\n      \n \n|\n      \nReturns\n\n \n|\n      \n-------\n\n \n|\n      \nstr\n\n \n|\n          \nNewly\n \ncreated\n \ndataset\n \nkey\n\n \n|\n      \n \n|\n      \nRaises\n\n \n|\n      \n------\n\n \n|\n      \nRestApiException\n\n \n|\n          \nIf\n \na\n \nserver\n \nerror\n \noccurs\n\n \n|\n      \n \n|\n      \nExamples\n\n \n|\n      \n--------\n\n \n|\n      \n>>>\n \nimport\n \ndatadotworld\n \nas\n \ndw\n\n \n|\n      \n>>>\n \napi_client\n \n=\n \ndw\n.\napi_client\n()\n\n \n|\n      \n>>>\n \napi_client\n.\ncreate_dataset\n(\n\n \n|\n      \n...\n     \n'username'\n,\n \ntitle\n=\n'Test dataset'\n,\n \nvisibility\n=\n'PRIVATE'\n,\n\n \n|\n      \n...\n     \nlicense\n=\n'Public Domain'\n)\n  \n# doctest: +SKIP\n\n \n|\n  \n \n|\n  \ndelete_files\n(\nself\n,\n \ndataset_key\n,\n \nnames\n)\n\n \n|\n      \nDelete\n \ndataset\n \nfile\n(\ns\n)\n\n \n|\n      \n \n|\n      \nParameters\n\n \n|\n      \n----------\n\n \n|\n      \ndataset_key\n \n:\n \nstr\n\n \n|\n          \nDataset\n \nidentifier\n,\n \nin\n \nthe\n \nform\n \nof\n \nowner\n/\nid\n\n \n|\n      \nnames\n \n:\n \nlist\n \nof\n \nstr\n\n \n|\n          \nThe\n \nlist\n \nof\n \nnames\n \nfor\n \nfiles\n \nto\n \nbe\n \ndeleted\n\n \n|\n      \n \n|\n      \nRaises\n\n \n|\n      \n------\n\n \n|\n      \nRestApiException\n\n \n|\n          \nIf\n \na\n \nserver\n \nerror\n \noccurs\n\n \n|\n      \n \n|\n      \nExamples\n\n \n|\n      \n--------\n\n \n|\n      \n>>>\n \nimport\n \ndatadotworld\n \nas\n \ndw\n\n \n|\n      \n>>>\n \napi_client\n \n=\n \ndw\n.\napi_client\n()\n\n \n|\n      \n>>>\n \napi_client\n.\ndelete_files\n(\n\n \n|\n      \n...\n     \n'username/test-dataset'\n,\n \n[\n'example.csv'\n])\n  \n# doctest: +SKIP\n\n \n|\n  \n \n|\n  \ndownload_datapackage\n(\nself\n,\n \ndataset_key\n,\n \ndest_dir\n)\n\n \n|\n      \nDownload\n \nand\n \nunzip\n \na\n \ndataset\n's datapackage\n\n \n|\n      \n \n|\n      \nParameters\n\n \n|\n      \n----------\n\n \n|\n      \ndataset_key\n \n:\n \nstr\n\n \n|\n          \nDataset\n \nidentifier\n,\n \nin\n \nthe\n \nform\n \nof\n \nowner\n/\nid\n\n \n|\n      \ndest_dir\n \n:\n \nstr\n \nor\n \npath\n\n \n|\n          \nDirectory\n \nunder\n \nwhich\n \ndatapackage\n \nshould\n \nbe\n \nsaved\n\n \n|\n      \n \n|\n      \nReturns\n\n \n|\n      \n-------\n\n \n|\n      \npath\n\n \n|\n          \nLocation\n \nof\n \nthe\n \ndatapackage\n \ndescriptor\n \n(\ndatapackage\n.\njson\n)\n \nin\n \nthe\n\n \n|\n          \nlocal\n \nfilesystem\n\n \n|\n      \n \n|\n      \nRaises\n\n \n|\n      \n------\n\n \n|\n      \nRestApiException\n\n \n|\n          \nIf\n \na\n \nserver\n \nerror\n \noccurs\n\n \n|\n      \n \n|\n      \nExamples\n\n \n|\n      \n>>>\n \nimport\n \ndatadotworld\n \nas\n \ndw\n\n \n|\n      \n>>>\n \napi_client\n \n=\n \ndw\n.\napi_client\n()\n\n \n|\n      \n>>>\n \ndatapackage_descriptor\n \n=\n \napi_client\n.\ndownload_datapackage\n(\n\n \n|\n      \n...\n     \n'jonloyens/an-intro-to-dataworld-dataset'\n,\n \n'/tmp/test'\n)\n\n \n|\n      \n>>>\n \ndatapackage_descriptor\n\n \n|\n      \n'/tmp/test/datapackage.json'\n\n \n|\n  \n \n|\n  \nget_dataset\n(\nself\n,\n \ndataset_key\n)\n\n \n|\n      \nRetrieve\n \nan\n \nexisting\n \ndataset\n \ndefinition\n\n \n|\n      \n \n|\n      \nThis\n \nmethod\n \nretrieves\n \nmetadata\n \nabout\n \nan\n \nexisting\n\n \n|\n      \n \n|\n      \nParameters\n\n \n|\n      \n----------\n\n \n|\n      \ndataset_key\n \n:\n \nstr\n\n \n|\n          \nDataset\n \nidentifier\n,\n \nin\n \nthe\n \nform\n \nof\n \nowner\n/\nid\n\n \n|\n      \n \n|\n      \nReturns\n\n \n|\n      \n-------\n\n \n|\n      \ndict\n\n \n|\n          \nDataset\n \ndefinition\n,\n \nwith\n \nall\n \nattributes\n\n \n|\n      \n \n|\n      \nRaises\n\n \n|\n      \n------\n\n \n|\n      \nRestApiException\n\n \n|\n          \nIf\n \na\n \nserver\n \nerror\n \noccurs\n\n \n|\n      \n \n|\n      \nExamples\n\n \n|\n      \n--------\n\n \n|\n      \n>>>\n \nimport\n \ndatadotworld\n \nas\n \ndw\n\n \n|\n      \n>>>\n \napi_client\n \n=\n \ndw\n.\napi_client\n()\n\n \n|\n      \n>>>\n \nintro_dataset\n \n=\n \napi_client\n.\nget_dataset\n(\n\n \n|\n      \n...\n     \n'jonloyens/an-intro-to-dataworld-dataset'\n)\n\n \n|\n      \n>>>\n \nintro_dataset\n[\n'title'\n]\n\n \n|\n      \n'An Intro to data.world Dataset'\n\n \n|\n  \n \n|\n  \nreplace_dataset\n(\nself\n,\n \ndataset_key\n,\n \n**\nkwargs\n)\n\n \n|\n      \nReplace\n \nan\n \nexisting\n \ndataset\n\n \n|\n      \n \n|\n      \n*\nThis\n \nmethod\n \nwill\n \ncompletely\n \noverwrite\n \nan\n \nexisting\n \ndataset\n.*\n\n \n|\n      \n \n|\n      \nParameters\n\n \n|\n      \n----------\n\n \n|\n      \ndescription\n \n:\n \nstr\n,\n \noptional\n\n \n|\n          \nDataset\n \ndescription\n\n \n|\n      \nsummary\n \n:\n \nstr\n,\n \noptional\n\n \n|\n          \nDataset\n \nsummary\n \nmarkdown\n\n \n|\n      \ntags\n \n:\n \nlist\n,\n \noptional\n\n \n|\n          \nDataset\n \ntags\n\n \n|\n      \nlicense\n \n:\n \n{\n'Public Domain'\n,\n \n'PDDL'\n,\n \n'CC-0'\n,\n \n'CC-BY'\n,\n \n'ODC-BY'\n,\n\n \n|\n                 \n'CC-BY-SA'\n,\n \n'ODC-ODbL'\n,\n \n'CC BY-NC'\n,\n \n'CC BY-NC-SA'\n,\n \n'Other'\n}\n\n \n|\n          \nDataset\n \nlicense\n\n \n|\n      \nvisibility\n \n:\n \n{\n'OPEN'\n,\n \n'PRIVATE'\n}\n\n \n|\n          \nDataset\n \nvisibility\n\n \n|\n      \nfiles\n \n:\n \ndict\n,\n \noptional\n\n \n|\n          \nFile\n \nnames\n \nand\n \nsource\n \nURLs\n \nto\n \nadd\n \nor\n \nupdate\n\n \n|\n      \n \n|\n      \nRaises\n\n \n|\n      \n------\n\n \n|\n      \nRestApiException\n\n \n|\n          \nIf\n \na\n \nserver\n \nerror\n \noccurs\n\n \n|\n      \n \n|\n      \nExamples\n\n \n|\n      \n--------\n\n \n|\n      \n>>>\n \nimport\n \ndatadotworld\n \nas\n \ndw\n\n \n|\n      \n>>>\n \napi_client\n \n=\n \ndw\n.\napi_client\n()\n\n \n|\n      \n>>>\n \napi_client\n.\nreplace_dataset\n(\n\n \n|\n      \n...\n    \n'username/test-dataset'\n,\n\n \n|\n      \n...\n    \nvisibility\n=\n'PRIVATE'\n,\n \nlicense\n=\n'Public Domain'\n,\n\n \n|\n      \n...\n    \ndescription\n=\n'A better description'\n)\n  \n# doctest: +SKIP\n\n \n|\n  \n \n|\n  \nsync_files\n(\nself\n,\n \ndataset_key\n)\n\n \n|\n      \nTrigger\n \nsynchronization\n \nprocess\n \nto\n \nupdate\n \nall\n \ndataset\n \nfiles\n \nlinked\n \nto\n\n \n|\n      \nsource\n \nURLs\n.\n\n \n|\n      \n \n|\n      \nParameters\n\n \n|\n      \n----------\n\n \n|\n      \ndataset_key\n \n:\n \nstr\n\n \n|\n          \nDataset\n \nidentifier\n,\n \nin\n \nthe\n \nform\n \nof\n \nowner\n/\nid\n\n \n|\n      \n \n|\n      \nRaises\n\n \n|\n      \n------\n\n \n|\n      \nRestApiException\n\n \n|\n          \nIf\n \na\n \nserver\n \nerror\n \noccurs\n\n \n|\n      \n \n|\n      \nExamples\n\n \n|\n      \n--------\n\n \n|\n      \n>>>\n \nimport\n \ndatadotworld\n \nas\n \ndw\n\n \n|\n      \n>>>\n \napi_client\n \n=\n \ndw\n.\napi_client\n()\n\n \n|\n      \n>>>\n \napi_client\n.\nsync_files\n(\n'username/test-dataset'\n)\n  \n# doctest: +SKIP\n\n \n|\n  \n \n|\n  \nupdate_dataset\n(\nself\n,\n \ndataset_key\n,\n \n**\nkwargs\n)\n\n \n|\n      \nUpdate\n \nan\n \nexisting\n \ndataset\n\n \n|\n      \n \n|\n      \nParameters\n\n \n|\n      \n----------\n\n \n|\n      \ndescription\n \n:\n \nstr\n,\n \noptional\n\n \n|\n          \nDataset\n \ndescription\n\n \n|\n      \nsummary\n \n:\n \nstr\n,\n \noptional\n\n \n|\n          \nDataset\n \nsummary\n \nmarkdown\n\n \n|\n      \ntags\n \n:\n \nlist\n,\n \noptional\n\n \n|\n          \nDataset\n \ntags\n\n \n|\n      \nlicense\n \n:\n \n{\n'Public Domain'\n,\n \n'PDDL'\n,\n \n'CC-0'\n,\n \n'CC-BY'\n,\n \n'ODC-BY'\n,\n\n \n|\n                 \n'CC-BY-SA'\n,\n \n'ODC-ODbL'\n,\n \n'CC BY-NC'\n,\n \n'CC BY-NC-SA'\n,\n \n'Other'\n}\n\n \n|\n          \nDataset\n \nlicense\n\n \n|\n      \nvisibility\n \n:\n \n{\n'OPEN'\n,\n \n'PRIVATE'\n},\n \noptional\n\n \n|\n          \nDataset\n \nvisibility\n\n \n|\n      \nfiles\n \n:\n \ndict\n,\n \noptional\n\n \n|\n          \nFile\n \nnames\n \nand\n \nsource\n \nURLs\n \nto\n \nadd\n \nor\n \nupdate\n\n \n|\n      \n \n|\n      \nRaises\n\n \n|\n      \n------\n\n \n|\n      \nRestApiException\n\n \n|\n          \nIf\n \na\n \nserver\n \nerror\n \noccurs\n\n \n|\n      \n \n|\n      \nExamples\n\n \n|\n      \n--------\n\n \n|\n      \n>>>\n \nimport\n \ndatadotworld\n \nas\n \ndw\n\n \n|\n      \n>>>\n \napi_client\n \n=\n \ndw\n.\napi_client\n()\n\n \n|\n      \n>>>\n \napi_client\n.\nupdate_dataset\n(\n\n \n|\n      \n...\n    \n'username/test-dataset'\n,\n\n \n|\n      \n...\n    \ntags\n=\n[\n'demo'\n,\n \n'datadotworld'\n])\n  \n# doctest: +SKIP\n\n \n|\n  \n \n|\n  \nupload_files\n(\nself\n,\n \ndataset_key\n,\n \nfiles\n)\n\n \n|\n      \nUpload\n \ndataset\n \nfiles\n\n \n|\n      \n \n|\n      \nParameters\n\n \n|\n      \n----------\n\n \n|\n      \ndataset_key\n \n:\n \nstr\n\n \n|\n          \nDataset\n \nidentifier\n,\n \nin\n \nthe\n \nform\n \nof\n \nowner\n/\nid\n\n \n|\n      \nfiles\n \n:\n \nlist\n \nof\n \nstr\n\n \n|\n          \nThe\n \nlist\n \nof\n \nnames\n/\npaths\n \nfor\n \nfiles\n \nstored\n \nin\n \nthe\n \nlocal\n \nfilesystem\n\n \n|\n      \n \n|\n      \nRaises\n\n \n|\n      \n------\n\n \n|\n      \nRestApiException\n\n \n|\n          \nIf\n \na\n \nserver\n \nerror\n \noccurs\n\n \n|\n      \n \n|\n      \nExamples\n\n \n|\n      \n--------\n\n \n|\n      \n>>>\n \nimport\n \ndatadotworld\n \nas\n \ndw\n\n \n|\n      \n>>>\n \napi_client\n \n=\n \ndw\n.\napi_client\n()\n\n \n|\n      \n>>>\n \napi_client\n.\nupload_files\n(\n\n \n|\n      \n...\n     \n'username/test-dataset'\n,\n\n \n|\n      \n...\n     \n[\n'/my/local/example.csv'\n])\n  \n# doctest: +SKIP\n\n \n|\n  \n \n|\n  \n----------------------------------------------------------------------\n\n \n|\n  \nData\n \ndescriptors\n \ndefined\n \nhere\n:\n\n \n|\n  \n \n|\n  \n__dict__\n\n \n|\n      \ndictionary\n \nfor\n \ninstance\n \nvariables\n \n(\nif\n \ndefined\n)\n\n \n|\n  \n \n|\n  \n__weakref__\n\n \n|\n      \nlist\n \nof\n \nweak\n \nreferences\n \nto\n \nthe\n \nobject\n \n(\nif\n \ndefined\n)\n\n\n\n\n\n\n\nCreate a dataset using create_dataset method\n\u00b6\n\n\napi_client.create_dataset(owner_id=\"<YOUR_USERNAME>\", title=\"<DATASET_TITLE>\", visibility='PRIVATE')\n\n\n1\n2\n3\n4\n5\nimport\n \ndatadotworld\n \nas\n \ndw\n\n\n\n# Replace the < > items with your username and desired dataset title\n\n\n# Visibility can be changed to 'OPEN' if you choose\n\n\napi_client\n.\ncreate_dataset\n(\nowner_id\n=\n\"ugo\"\n,\n \ntitle\n=\n\"intermediate-data-world\"\n,\n \nvisibility\n=\n'OPEN'\n)\n\n\n\n\n\n\n\n1\n'https://data.world/ugo/intermediate-data-world'\n\n\n\n\n\n\nWrite a dataframe to a local file and upload to dataset\n\u00b6\n\n\nAdd file to the dataset using upload_files(). Replace the < > items with the dataset values.\n\n\napi_client.upload_files('<YOUR_USERNAME>/<DATASET_TITLE>',['police_shootings.csv'])\n\n\n1\n2\n3\n4\nimport\n \nos\n\n\n\ncwd\n \n=\n \nos\n.\ngetcwd\n()\n\n\n#print(cwd)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nimport\n \ndatadotworld\n \nas\n \ndw\n\n\n\n# Create a dataframe\n\n\npolice_shootings\n \n=\n \ndw\n.\nload_dataset\n(\n'https://data.world/jonloyens/intermediate-data-world'\n)\n.\ndataframes\n[\n'fatal_police_shootings_data'\n]\n\n\n\n# Write dataframe to local csv using pandas to_csv() method\n\n\n# in the current working directory (cwd)\n\n\npolice_shootings\n.\nto_csv\n(\n'police_shootings.csv'\n,\n \nencoding\n=\n'utf-8'\n)\n\n\n\n\n\n\n\nCheck the current working directory.\n\n\nUpdate dataset\n\u00b6\n\n\nAdd a file from an external source URL. In this example we use GitHub. \n\nReplace the < > items with the dataset values\n\n\napi_client.add_files_via_url('<YOUR_USERNAME>/<DATASET_TITLE>',{'shootings_of_police.csv': 'https://github.com/fivethirtyeight/data/blob/master/police-deaths/all_data.csv\u2019})\n\n\nFor files added with \nadd_files_via_url\n, fetch the latest version using the \nsync()\n method:\n\n\napi_client.sync_files('<YOUR_USERNAME>/<DATASET_TITLE>')\n\n\nUse the \nupdate_dataset()\n method to update the metadata after dataset creation:\n\n\napi_client.update_dataset('<YOUR_USERNAME>/<DATASET_TITLE>', description='Dataset created to test out the python SDK functionality.', tags=['test', 'datacamp'])",
            "title": "Intro to data.world in Python"
        },
        {
            "location": "/Intro to data.world in Python/#working-with-datasets",
            "text": "",
            "title": "Working with Datasets"
        },
        {
            "location": "/Intro to data.world in Python/#import-a-dataset",
            "text": "Once the module is loaded, there are two ways to import a dataset.  1\n2\n3 # First  # Import the city council votes dataset  dataset   =   dw . load_dataset ( 'stephen-hoover/chicago-city-council-votes' )    The dataset is now in the cache.  1\n2\n3 # Second  # Import the city council votes dataset  dataset   =   dw . load_dataset ( 'https://data.world/stephen-hoover/chicago-city-council-votes' )",
            "title": "Import a Dataset"
        },
        {
            "location": "/Intro to data.world in Python/#working-with-datasets_1",
            "text": "From the beginning.  1\n2\n3\n4 # Import the datadotworld module as dw  import   datadotworld   as   dw  # Import the Pretty Print module  import   pprint   as   pp    1\n2\n3\n4\n5\n6\n7 # Import the city council votes dataset  dataset   =   dw . load_dataset ( 'https://data.world/stephen-hoover/chicago-city-council-votes' )  # Use describe()   # Review all the metadata that is downloaded with the dataset  # Print it to the screen using pp.pprint()  pp . pprint ( dataset . describe ())     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61 { ' description ' :   ' Chicago   city   council   voting   records   from   May   2006   to   March   ' \n                 ' 2017 \\ n ' \n                 '\\n' \n                 '#   About   this   project \\ n ' \n                 ' This   dataset   aims   to   increase   transparency   into   the   Chicago   ' \n                 \"city government by publishing each Alderman's voting record \" \n                 ' in   an   easily   machine - readable   format .   These   data   come   from   ' \n                 ' pdfs   [ published   by   the   Office   of   the   City   ' \n                 ' Clerk ]( http : //www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports).\\n' \n                 '\\n' \n                 ' This   work   was   done   as   part   of   the   Data   for   Democracy   ' \n                 ' [ \"Chicago ' \n                 ' Lobbyists \"](https://data.world/lilianhj/chicago-lobbyists) ' \n                 ' project . \\ n ' \n                 '\\n' \n                 ' The   code   which   produced   these   data   is   at   ' \n                 ' https : //github.com/stephen-hoover/data-processing/blob/master/scraping/Scrape%20Chicago%20City%20Clerk%20Website.ipynb ' \n                 ' . \\ n ' \n                 '\\n' \n                 '#   Still   to - do \\ n ' \n                 ' It   would   be   useful   to   include   more   information   about   each   ' \n                 ' measure   --   sponsors ,   full   text ,   and   subject   tags   would   be   ' \n                 ' particularly   good   to   have . \\ n ' \n                 '\\n' \n                 ' Aldermen   names   in   the   voting   records   are   not   fully   ' \n                 ' standardized   yet .   Ideally   the   same   person   would   always   have   ' \n                 ' exactly   the   same   string . \\ n ' \n                 '\\n' \n                 '#   External   resources \\ n ' \n                 ' [ City   council   meeting   ' \n                 ' reports ]( http : //www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports)\\n' \n                 '\\n' \n                 ' [ Chicago   Councilmatic ]( https : //chicago.councilmatic.org)\\n' \n                 '\\n' \n                 ' [ City   of   Chicago   Legislative   Information   ' \n                 ' Center ]( https : //chicago.legistar.com)', \n  ' homepage ' :   ' https : //data.world/stephen-hoover/chicago-city-council-votes', \n  ' keywords ' :   [ ' chicago ' ,   ' government ' ], \n  ' license ' :   ' Public   Domain ' , \n  ' name ' :   ' stephen - hoover_chicago - city - council - votes ' , \n  ' resources ' :   [{ ' format ' :   ' csv ' , \n                 ' name ' :   ' alderman_votes ' , \n                 ' path ' :   ' data / alderman_votes . csv ' }, \n                { ' format ' :   ' csv ' , \n                 ' name ' :   ' legislation_titles ' , \n                 ' path ' :   ' data / legislation_titles . csv ' }, \n                { ' bytes ' :   428918 , \n                 ' format ' :   ' csv ' , \n                 ' keywords ' :   [ ' clean   data ' ], \n                 ' mediatype ' :   ' text / csv ' , \n                 ' name ' :   ' original / alderman_votes . csv ' , \n                 ' path ' :   ' original / alderman_votes . csv ' }, \n                { ' bytes ' :   29658 , \n                 ' description ' :   ' These   are   titles   for   each   of   the   issues   in   the   ' \n                                ' alderman_votes . csv   document .   Join   on   \"Record\" . ' , \n                 ' format ' :   ' csv ' , \n                 ' keywords ' :   [ ' clean   data ' ], \n                 ' mediatype ' :   ' text / csv ' , \n                 ' name ' :   ' original / legislation_titles . csv ' , \n                 ' path ' :   ' original / legislation_titles . csv ' }], \n  ' title ' :   ' Chicago   City   Council   Votes ' }    1\n2\n3\n4 # Use describe() again  # Get a description of a specific resource: alderman_votes  # Print it to the screen  pp . pprint ( dataset . describe ( 'alderman_votes' ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 { 'format':   'csv', \n  'name':   'alderman_votes', \n  'path':   'data/alderman_votes.csv', \n  'schema':   {'fields':   [ { 'description' :   'Note that some entries contain a full ' \n                                        'name and others only have a last name.' , \n                         'name' :   'alderman' , \n                         'rdfType' :   'http://www.w3.org/2001/XMLSchema#string' , \n                         'title' :   'Alderman' , \n                         'type' :   'string' }, \n                        { 'description' :   'VOTE KEY: Y=Yes; N=No; A=Absent; ' \n                                        'NV=Not Voting;  E=Excused; V=Vacant ' \n                                        'R=Recusals from voting' , \n                         'name' :   'vote' , \n                         'rdfType' :   'http://www.w3.org/2001/XMLSchema#string' , \n                         'title' :   'Vote' , \n                         'type' :   'string' }, \n                        { 'name' :   'ward' , \n                         'rdfType' :   'http://www.w3.org/2001/XMLSchema#integer' , \n                         'title' :   'Ward' , \n                         'type' :   'integer' }, \n                        { 'description' :   'YYYY-MM-DD' , \n                         'name' :   'date' , \n                         'rdfType' :   'http://www.w3.org/2001/XMLSchema#date' , \n                         'title' :   'Date' , \n                         'type' :   'date' }, \n                        { 'name' :   'record' , \n                         'rdfType' :   'http://www.w3.org/2001/XMLSchema#string' , \n                         'title' :   'Record' , \n                         'type' :   'string' } ] } }",
            "title": "Working with Datasets"
        },
        {
            "location": "/Intro to data.world in Python/#reading-the-metadata",
            "text": "All fields begin with  { . The  alderman_votes  variable has 5 fields.",
            "title": "Reading the metadata"
        },
        {
            "location": "/Intro to data.world in Python/#accessing-the-data",
            "text": "We have access to three properties:  raw_data ,  tables , and  dataframes . Each of these returns a dictionary of values, just in different formats:  bytes ,  list  and  pandas.DataFrame  objects.  1\n2\n3\n4\n5\n6\n7 # Use the dataframes property  # Assign the alderman_votes table to the variable votes_dataframe  votes_dataframe   =   dataset . dataframes [ 'alderman_votes' ]  # Use the pandas shape property  # Get rows/columns size for the `votes_dataframe` dataframe  pp . pprint ( votes_dataframe . shape )    1 (10850, 5)   1\n2\n3 # Use the pandas head function  # Print the first 3 rows of the `votes_dataframe` dataframe  pp . pprint ( votes_dataframe . head ( 3 ))    1\n2\n3\n4                 alderman vote  ward       date       record\n0          Manuel Flores    N     1 2006-07-26  SO2006-3086\n1  Madeline L. Haithcock    N     2 2006-07-26  SO2006-3086\n2     Dorothy J. Tillman    N     3 2006-07-26  SO2006-3086",
            "title": "Accessing the data"
        },
        {
            "location": "/Intro to data.world in Python/#working-with-multiple-datasets",
            "text": "1\n2\n3\n4\n5 import   datadotworld   as   dw  # Loaded two datasets  int_dataset   =   dw . load_dataset ( 'https://data.world/jonloyens/intermediate-data-world' )  fipsCodes_dataset   =   dw . load_dataset ( 'https://data.world/uscensusbureau/fips-state-codes' )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 # Create two dataframes:  # police_shootings from the 'fatal_police_shootings_data' table of int_dataset and  # state_abbrvs, from the 'statesfipscodes' table of fipsCodes_dataset  police_shootings   =   int_dataset . dataframes [ 'fatal_police_shootings_data' ]  state_abbrvs   =   fipsCodes_dataset . dataframes [ 'statesfipscodes' ]  # Merge the two datasets together  # on the state and stusab fields  # Assign to a merged_dataframe variable  merged_dataframe   =   police_shootings . merge ( state_abbrvs , \n                                           how   =   'left' , \n                                           left_on   =   'state' , \n                                           right_on = 'stusab' )  # Add a 'citystate' column to the merged_dataframe dataframe,  # populating it with the concatinated values from the 'city' and 'state_name' columns,  # separated by ', '  merged_dataframe [ \"citystate\" ]   =   merged_dataframe [ \"city\" ]   +  \\\n                                 \", \"   +   merged_dataframe [ \"state_name\" ]  ## Print head of merged_dataframe  pp . pprint ( merged_dataframe . head ( 5 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27    id                name        date   manner_of_death       armed   age  \\\n0   3          Tim Elliot  2015-01-02              shot         gun  53.0   \n1   4    Lewis Lee Lembke  2015-01-02              shot         gun  47.0   \n2   5  John Paul Quintero  2015-01-03  shot and Tasered     unarmed  23.0   \n3   8     Matthew Hoffman  2015-01-04              shot  toy weapon  32.0   \n4   9   Michael Rodriguez  2015-01-04              shot    nail gun  39.0\n\n  gender race           city state  signs_of_mental_illness threat_level  \\\n0      M    A        Shelton    WA                     True       attack   \n1      M    W          Aloha    OR                    False       attack   \n2      M    H        Wichita    KS                    False        other   \n3      M    W  San Francisco    CA                     True       attack   \n4      M    H          Evans    CO                    False       attack\n\n          flee  body_camera  state_fips stusab  state_name  statens  \\\n0  Not fleeing        False          53     WA  Washington  1779804   \n1  Not fleeing        False          41     OR      Oregon  1155107   \n2  Not fleeing        False          20     KS      Kansas   481813   \n3  Not fleeing        False           6     CA  California  1779778   \n4  Not fleeing        False           8     CO    Colorado  1779779\n\n                   citystate  \n0        Shelton, Washington  \n1              Aloha, Oregon  \n2            Wichita, Kansas  \n3  San Francisco, California  \n4            Evans, Colorado",
            "title": "Working with multiple datasets"
        },
        {
            "location": "/Intro to data.world in Python/#querying-with-dataworld",
            "text": "Another way to pull data in from data.world is to use the  query()  method to use SQL or SPARQL to query one or more datasets. Check out the full dwSQL  documentation .",
            "title": "Querying with data.world"
        },
        {
            "location": "/Intro to data.world in Python/#sql-querying-a-table",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 import   datadotworld   as   dw  # Run a SQL query  # Select all rows from the `unhcr_all` table where `Year` equals 2010  # Assign the query string to a `sql_query` variable  sql_query   =   \"SELECT * FROM `unhcr_all` WHERE Year = 2010\"  # Use the `query` method of the datadotworld module  # Run the `sql_query`  # Assign the results to a `query2010` variable  query2010   =   dw . query ( 'https://data.world/agriculture/national-farmers-markets' ,   sql_query )  # Use the dataframe property of the resulting query  # Create a dataframe variable named `unhcr2010`  unhcr2010   =   query2010 . dataframe  # Print the first 5 rows using the head method  pp . pprint ( unhcr2010 . head ( 5 ))",
            "title": "SQL: Querying a table"
        },
        {
            "location": "/Intro to data.world in Python/#sql-query-multiple-tables-join",
            "text": "Write queries against multiple tables within a single dataset or across many datasets!    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 import   datadotworld   as   dw  # Run a SQL query  # Select state, the count of farmers markets (fmid),  # and average obesity rate   # from agriculture.`national-farmers-markets`.export,  # LEFT JOINED against health.`obesity-by-state-2014`  # adult_obese on state and location  sql_query   =   \"SELECT state, count(fmid) as count, Avg(obesity.Value) as obesityAvg FROM Export LEFT JOIN health.`obesity-by-state-2014`.`adult_obese` as obesity ON state = obesity.location GROUP BY state ORDER BY count desc\"  # Use the `query` method of the datadotworld module  # Run the `sql_query` against the `https://data.world/agriculture/national-farmers-markets` dataset  # Assign the results to a `queryResults` variable  queryResults   =   dw . query ( 'https://data.world/agriculture/national-farmers-markets' ,  \\\n                         sql_query )  # Use the dataframes property of the resulting query  # Create a dataframe variable named `stateStats`  stateStats   =   queryResults . dataframe    1\n2\n3\n4\n5\n6 import   matplotlib.pyplot   as   plt  # Plot the stateStats results using state as the x-axis  stateStats . plot ( x = 'state' )  plt . show ()",
            "title": "SQL: Query multiple tables (join)"
        },
        {
            "location": "/Intro to data.world in Python/#sparql-querying-linked-data",
            "text": "Behind the scenes, data.world is converting all tabular data files into linked data using Semantic Web technologies. This allows to upload any tabular format, like xlsx, csv, tsv or json, and instantly be able to query and join them without issue. SQL is great for this, but SPARQL - which is the query language for linked data - can be more robust and flexible than SQL, allowing for more complex queries.  Check out the full SPARQL  documentation .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 import   datadotworld   as   dw  # A SPARQL query assigned to the `sparql_query` variable:   sparql_query   =   \"PREFIX GOT: <https://tutorial.linked.data.world/d/sparqltutorial/> SELECT ?FName ?LName WHERE {?person GOT:col-got-house  \\\" Stark \\\"  . ?person GOT:col-got-fname ?FName . ?person GOT:col-got-lname ?LName .}\"  # Use the pre-defined SPARQL query  # Query dataset http://data.world/tutorial/sparqltutorial and  # return the results to a queryResults variable  queryResults   =   dw . query ( 'http://data.world/tutorial/sparqltutorial' ,  \\\n                         sparql_query ,   query_type = 'sparql' )  # Use the dataframe property of the resulting query  # Create a dataframe variable named `houseStark`  houseStark   =   queryResults . dataframe  # Use pp.pprint() to print the dataframe to the screen  pp . pprint ( houseStark )    1\n2\n3\n4\n5\n6\n7     FName  LName\n0    Robb  Stark\n1     Jon   Snow\n2   Sansa  Stark\n3    Arya  Stark\n4    Bran  Stark\n5  Rickon  Stark",
            "title": "SPARQL: Querying linked data"
        },
        {
            "location": "/Intro to data.world in Python/#wrap-up",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 import   datadotworld   as   dw  # Import the sys module  import   sys  # Import a dataset  refugee_dataset   =   dw . load_dataset ( 'nrippner/refugee-host-nations' )  # Get the size of the dataset:  sys . getsizeof ( refugee_dataset )    1 56   1\n2\n3\n4 # List all of the data files:  dataframes   =   refugee_dataset . dataframes  for   df   in   dataframes : \n     pp . pprint ( df )    1\n2\n3\n4\n5\n6\n7 'refugees2011_15'\n'refugees_all_years'\n'refugees_per_capita'\n'unhcr_2015'\n'unhcr_all'\n'worldbank_data_dict'\n'worldbank_indicators'   1\n2\n3\n4\n5\n6\n7\n8 # Print all of the files in a dataset:  resources   =   refugee_dataset . describe ()[ 'resources' ]  pp . pprint ( 'name:' )  for   r   in   resources : \n     pp . pprint ( r [ 'name' ])  pp . pprint ( ' \\n type of file:' )  for   r   in   resources : \n     pp . pprint ( r [ 'format' ])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34 'name:'\n'refugees2011_15'\n'refugees_all_years'\n'refugees_per_capita'\n'unhcr_2015'\n'unhcr_all'\n'worldbank_data_dict'\n'worldbank_indicators'\n'original/Refugees.ipynb'\n'original/refs.py'\n'original/refugees2011-15.csv'\n'original/refugees_all_years.csv'\n'original/refugees_per_capita.csv'\n'original/unhcr_2015.csv'\n'original/unhcr_all.csv'\n'original/worldbank_data_dict.csv'\n'original/worldbank_indicators.csv'\n'\\ntype of file:'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'ipynb'\n'py'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'",
            "title": "Wrap up"
        },
        {
            "location": "/Intro to data.world in Python/#advanced-sdk-functionality",
            "text": "The data.world Python SDK includes a variety of API wrappers, available via the  ApiClient  class, to create, replace, update, and delete a dataset. In this section, we walk through a few common tasks:   Use  api_client()  to get an instance of the  ApiClient  Create a dataset  Add a file from a dataframe: we write to a local csv and the upload the file  Add a file from a source URL: this is an easy way to add external data to the dataset and keep it up to date. We use a file from GitHub as an example, but we can use any URL source that points to a file.  Sync the dataset: this simple call reloads any files with a source URL, to ensure the latest version.  Update the dataset: after creating a dataset, use  update_dataset  to change attiributes like description, summary or tags.   Use  help(api_client)  to learn more about each available function or see the full  data.world API documentation .",
            "title": "Advanced SDK Functionality"
        },
        {
            "location": "/Intro to data.world in Python/#open-the-api",
            "text": "1\n2\n3\n4\n5\n6\n7 import   datadotworld   as   dw  # Create an instance of the ApiClient using `api_client()`  api_client   =   dw . api_client ()  # See api_client documentation  help ( api_client )      1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278 Help   on   RestApiClient   in   module   datadotworld . client . api   object :  class   RestApiClient ( builtins . object ) \n  |    REST   API   client \n  |   \n  |    Parameters \n  |    ---------- \n  |    profile   :   str ,   optional \n  |        Name   of   the   configuration   profile   to   use \n  |   \n  |    Methods   defined   here : \n  |   \n  |    __init__ ( self ,   config ) \n  |        Initialize   self .    See   help ( type ( self ))   for   accurate   signature . \n  |   \n  |    add_files_via_url ( self ,   dataset_key ,   files = {}) \n  |        Add   or   update   dataset   files   linked   to   source   URLs \n  |       \n  |        Parameters \n  |        ---------- \n  |        dataset_key   :   str \n  |            Dataset   identifier ,   in   the   form   of   owner / id \n  |        files   :   dict \n  |            File   names   and   source   URLs   to   add   or   update \n  |       \n  |        Raises \n  |        ------ \n  |        RestApiException \n  |            If   a   server   error   occurs \n  |       \n  |        Examples \n  |        -------- \n  |        >>>   import   datadotworld   as   dw \n  |        >>>   url   =   'http://www.acme.inc/example.csv' \n  |        >>>   api_client   =   dw . api_client () \n  |        >>>   api_client . add_files_via_url ( \n  |        ...      'username/test-dataset' , \n  |        ...      { 'example.csv' :   url })    # doctest: +SKIP \n  |   \n  |    create_dataset ( self ,   owner_id ,   ** kwargs ) \n  |        Create   a   new   dataset \n  |       \n  |        Parameters \n  |        ---------- \n  |        owner_id   :   str \n  |            Username   of   the   owner   of   the   new   dataset \n  |        title   :   str \n  |            Dataset   title   ( will   be   used   to   generate   dataset   id   on   creation ) \n  |        description   :   str ,   optional \n  |            Dataset   description \n  |        summary   :   str ,   optional \n  |            Dataset   summary   markdown \n  |        tags   :   list ,   optional \n  |            Dataset   tags \n  |        license   :   { 'Public Domain' ,   'PDDL' ,   'CC-0' ,   'CC-BY' ,   'ODC-BY' , \n  |                   'CC-BY-SA' ,   'ODC-ODbL' ,   'CC BY-NC' ,   'CC BY-NC-SA' ,   'Other' } \n  |            Dataset   license \n  |        visibility   :   { 'OPEN' ,   'PRIVATE' } \n  |            Dataset   visibility \n  |        files   :   dict ,   optional \n  |            File   names   and   source   URLs \n  |       \n  |        Returns \n  |        ------- \n  |        str \n  |            Newly   created   dataset   key \n  |       \n  |        Raises \n  |        ------ \n  |        RestApiException \n  |            If   a   server   error   occurs \n  |       \n  |        Examples \n  |        -------- \n  |        >>>   import   datadotworld   as   dw \n  |        >>>   api_client   =   dw . api_client () \n  |        >>>   api_client . create_dataset ( \n  |        ...       'username' ,   title = 'Test dataset' ,   visibility = 'PRIVATE' , \n  |        ...       license = 'Public Domain' )    # doctest: +SKIP \n  |   \n  |    delete_files ( self ,   dataset_key ,   names ) \n  |        Delete   dataset   file ( s ) \n  |       \n  |        Parameters \n  |        ---------- \n  |        dataset_key   :   str \n  |            Dataset   identifier ,   in   the   form   of   owner / id \n  |        names   :   list   of   str \n  |            The   list   of   names   for   files   to   be   deleted \n  |       \n  |        Raises \n  |        ------ \n  |        RestApiException \n  |            If   a   server   error   occurs \n  |       \n  |        Examples \n  |        -------- \n  |        >>>   import   datadotworld   as   dw \n  |        >>>   api_client   =   dw . api_client () \n  |        >>>   api_client . delete_files ( \n  |        ...       'username/test-dataset' ,   [ 'example.csv' ])    # doctest: +SKIP \n  |   \n  |    download_datapackage ( self ,   dataset_key ,   dest_dir ) \n  |        Download   and   unzip   a   dataset 's datapackage \n  |       \n  |        Parameters \n  |        ---------- \n  |        dataset_key   :   str \n  |            Dataset   identifier ,   in   the   form   of   owner / id \n  |        dest_dir   :   str   or   path \n  |            Directory   under   which   datapackage   should   be   saved \n  |       \n  |        Returns \n  |        ------- \n  |        path \n  |            Location   of   the   datapackage   descriptor   ( datapackage . json )   in   the \n  |            local   filesystem \n  |       \n  |        Raises \n  |        ------ \n  |        RestApiException \n  |            If   a   server   error   occurs \n  |       \n  |        Examples \n  |        >>>   import   datadotworld   as   dw \n  |        >>>   api_client   =   dw . api_client () \n  |        >>>   datapackage_descriptor   =   api_client . download_datapackage ( \n  |        ...       'jonloyens/an-intro-to-dataworld-dataset' ,   '/tmp/test' ) \n  |        >>>   datapackage_descriptor \n  |        '/tmp/test/datapackage.json' \n  |   \n  |    get_dataset ( self ,   dataset_key ) \n  |        Retrieve   an   existing   dataset   definition \n  |       \n  |        This   method   retrieves   metadata   about   an   existing \n  |       \n  |        Parameters \n  |        ---------- \n  |        dataset_key   :   str \n  |            Dataset   identifier ,   in   the   form   of   owner / id \n  |       \n  |        Returns \n  |        ------- \n  |        dict \n  |            Dataset   definition ,   with   all   attributes \n  |       \n  |        Raises \n  |        ------ \n  |        RestApiException \n  |            If   a   server   error   occurs \n  |       \n  |        Examples \n  |        -------- \n  |        >>>   import   datadotworld   as   dw \n  |        >>>   api_client   =   dw . api_client () \n  |        >>>   intro_dataset   =   api_client . get_dataset ( \n  |        ...       'jonloyens/an-intro-to-dataworld-dataset' ) \n  |        >>>   intro_dataset [ 'title' ] \n  |        'An Intro to data.world Dataset' \n  |   \n  |    replace_dataset ( self ,   dataset_key ,   ** kwargs ) \n  |        Replace   an   existing   dataset \n  |       \n  |        * This   method   will   completely   overwrite   an   existing   dataset .* \n  |       \n  |        Parameters \n  |        ---------- \n  |        description   :   str ,   optional \n  |            Dataset   description \n  |        summary   :   str ,   optional \n  |            Dataset   summary   markdown \n  |        tags   :   list ,   optional \n  |            Dataset   tags \n  |        license   :   { 'Public Domain' ,   'PDDL' ,   'CC-0' ,   'CC-BY' ,   'ODC-BY' , \n  |                   'CC-BY-SA' ,   'ODC-ODbL' ,   'CC BY-NC' ,   'CC BY-NC-SA' ,   'Other' } \n  |            Dataset   license \n  |        visibility   :   { 'OPEN' ,   'PRIVATE' } \n  |            Dataset   visibility \n  |        files   :   dict ,   optional \n  |            File   names   and   source   URLs   to   add   or   update \n  |       \n  |        Raises \n  |        ------ \n  |        RestApiException \n  |            If   a   server   error   occurs \n  |       \n  |        Examples \n  |        -------- \n  |        >>>   import   datadotworld   as   dw \n  |        >>>   api_client   =   dw . api_client () \n  |        >>>   api_client . replace_dataset ( \n  |        ...      'username/test-dataset' , \n  |        ...      visibility = 'PRIVATE' ,   license = 'Public Domain' , \n  |        ...      description = 'A better description' )    # doctest: +SKIP \n  |   \n  |    sync_files ( self ,   dataset_key ) \n  |        Trigger   synchronization   process   to   update   all   dataset   files   linked   to \n  |        source   URLs . \n  |       \n  |        Parameters \n  |        ---------- \n  |        dataset_key   :   str \n  |            Dataset   identifier ,   in   the   form   of   owner / id \n  |       \n  |        Raises \n  |        ------ \n  |        RestApiException \n  |            If   a   server   error   occurs \n  |       \n  |        Examples \n  |        -------- \n  |        >>>   import   datadotworld   as   dw \n  |        >>>   api_client   =   dw . api_client () \n  |        >>>   api_client . sync_files ( 'username/test-dataset' )    # doctest: +SKIP \n  |   \n  |    update_dataset ( self ,   dataset_key ,   ** kwargs ) \n  |        Update   an   existing   dataset \n  |       \n  |        Parameters \n  |        ---------- \n  |        description   :   str ,   optional \n  |            Dataset   description \n  |        summary   :   str ,   optional \n  |            Dataset   summary   markdown \n  |        tags   :   list ,   optional \n  |            Dataset   tags \n  |        license   :   { 'Public Domain' ,   'PDDL' ,   'CC-0' ,   'CC-BY' ,   'ODC-BY' , \n  |                   'CC-BY-SA' ,   'ODC-ODbL' ,   'CC BY-NC' ,   'CC BY-NC-SA' ,   'Other' } \n  |            Dataset   license \n  |        visibility   :   { 'OPEN' ,   'PRIVATE' },   optional \n  |            Dataset   visibility \n  |        files   :   dict ,   optional \n  |            File   names   and   source   URLs   to   add   or   update \n  |       \n  |        Raises \n  |        ------ \n  |        RestApiException \n  |            If   a   server   error   occurs \n  |       \n  |        Examples \n  |        -------- \n  |        >>>   import   datadotworld   as   dw \n  |        >>>   api_client   =   dw . api_client () \n  |        >>>   api_client . update_dataset ( \n  |        ...      'username/test-dataset' , \n  |        ...      tags = [ 'demo' ,   'datadotworld' ])    # doctest: +SKIP \n  |   \n  |    upload_files ( self ,   dataset_key ,   files ) \n  |        Upload   dataset   files \n  |       \n  |        Parameters \n  |        ---------- \n  |        dataset_key   :   str \n  |            Dataset   identifier ,   in   the   form   of   owner / id \n  |        files   :   list   of   str \n  |            The   list   of   names / paths   for   files   stored   in   the   local   filesystem \n  |       \n  |        Raises \n  |        ------ \n  |        RestApiException \n  |            If   a   server   error   occurs \n  |       \n  |        Examples \n  |        -------- \n  |        >>>   import   datadotworld   as   dw \n  |        >>>   api_client   =   dw . api_client () \n  |        >>>   api_client . upload_files ( \n  |        ...       'username/test-dataset' , \n  |        ...       [ '/my/local/example.csv' ])    # doctest: +SKIP \n  |   \n  |    ---------------------------------------------------------------------- \n  |    Data   descriptors   defined   here : \n  |   \n  |    __dict__ \n  |        dictionary   for   instance   variables   ( if   defined ) \n  |   \n  |    __weakref__ \n  |        list   of   weak   references   to   the   object   ( if   defined )",
            "title": "Open the API"
        },
        {
            "location": "/Intro to data.world in Python/#create-a-dataset-using-create_dataset-method",
            "text": "api_client.create_dataset(owner_id=\"<YOUR_USERNAME>\", title=\"<DATASET_TITLE>\", visibility='PRIVATE')  1\n2\n3\n4\n5 import   datadotworld   as   dw  # Replace the < > items with your username and desired dataset title  # Visibility can be changed to 'OPEN' if you choose  api_client . create_dataset ( owner_id = \"ugo\" ,   title = \"intermediate-data-world\" ,   visibility = 'OPEN' )    1 'https://data.world/ugo/intermediate-data-world'",
            "title": "Create a dataset using create_dataset method"
        },
        {
            "location": "/Intro to data.world in Python/#write-a-dataframe-to-a-local-file-and-upload-to-dataset",
            "text": "Add file to the dataset using upload_files(). Replace the < > items with the dataset values.  api_client.upload_files('<YOUR_USERNAME>/<DATASET_TITLE>',['police_shootings.csv'])  1\n2\n3\n4 import   os  cwd   =   os . getcwd ()  #print(cwd)    1\n2\n3\n4\n5\n6\n7\n8 import   datadotworld   as   dw  # Create a dataframe  police_shootings   =   dw . load_dataset ( 'https://data.world/jonloyens/intermediate-data-world' ) . dataframes [ 'fatal_police_shootings_data' ]  # Write dataframe to local csv using pandas to_csv() method  # in the current working directory (cwd)  police_shootings . to_csv ( 'police_shootings.csv' ,   encoding = 'utf-8' )    Check the current working directory.",
            "title": "Write a dataframe to a local file and upload to dataset"
        },
        {
            "location": "/Intro to data.world in Python/#update-dataset",
            "text": "Add a file from an external source URL. In this example we use GitHub.  \nReplace the < > items with the dataset values  api_client.add_files_via_url('<YOUR_USERNAME>/<DATASET_TITLE>',{'shootings_of_police.csv': 'https://github.com/fivethirtyeight/data/blob/master/police-deaths/all_data.csv\u2019})  For files added with  add_files_via_url , fetch the latest version using the  sync()  method:  api_client.sync_files('<YOUR_USERNAME>/<DATASET_TITLE>')  Use the  update_dataset()  method to update the metadata after dataset creation:  api_client.update_dataset('<YOUR_USERNAME>/<DATASET_TITLE>', description='Dataset created to test out the python SDK functionality.', tags=['test', 'datacamp'])",
            "title": "Update dataset"
        },
        {
            "location": "/Python+And+Excel/",
            "text": "CONTENT\n\n\nThe Data as the Starting Point\n\n\nCheck the Quality of the Spreadsheet\n\n\nBest Practices for Spreadsheet Data\n\n\n\n\n\n\nPreparing the Workspace\n\n\nUsing Virtual Environments\n\n\nCheck the Loaded Dataset\n\n\nInstall Packages to Read and Write Excel Files\n\n\nPackages to Parse Excel Files and Write them back with Python\n\n\n\n\n\n\nLoad Excel & CSV Files as Pandas DataFrames\n\n\nExcel\n\n\nCSV\n\n\nFlat files, tables\n\n\n\n\n\n\nWrite Pandas DataFrames to Excel and CSV Files\n\n\nExcel\n\n\nCSV, flat files, tables\n\n\n\n\n\n\nRead and Write Excel Files with openyxl\n\n\nRead and Format Excel Files with xlrd\n\n\nWrite to Excel Files with xlwt\n\n\nA Collection of Utilities: xlutils\n\n\nRead with pyexcel\n\n\nWrite with pyexcel\n\n\nRead and Write .csv Files\n\n\nNumpy\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nThe Data as the Starting Point\n\u00b6\n\n\nWork with packages such as \npandas, openpyxl, xlrd, xlutils, pyexcel\n.\n\n\nDatasets from Kaggle, Quandl, Google or on repositories (GitHub, Bitbucket, GitLab, etc.).\n\n\nCheck the Quality of the Spreadsheet\n\u00b6\n\n\n\n\nDoes the spreadsheet represent static data?\n\n\nDoes the spreadsheet mix data, calculations, and reporting?\n\n\nIs the data in the spreadsheet complete and consistent?\n\n\nDoes the spreadsheet have a systematic worksheet structure?\n\n\nAre the live formulas in the spreadsheet valid?\n\n\n\n\n\n\n\n\nBest Practices for Spreadsheet Data\n\u00b6\n\n\n\n\nThe first row of the spreadsheet is usually reserved for the header, while the first column is used to identify the sampling unit;\n\n\nAvoid names, values or fields with blank spaces. Otherwise, each word will be interpreted as a separate variable, resulting in errors that are related to the number of elements per line in the dataset. Consider using:\n\n\nUnderscores,\n\n\nDashes,\n\n\nCamel case, where the first letter of each section of text is capitalized, or\n\n\nConcatenating words\n\n\n\n\n\n\nShort names are preferred over longer names;\n\n\nTry to avoid using names that contain symbols such as \n?, %, ^, &, *, (, ), -, #, ?, <, >, /, |, \\, [ ,] , {, }\n and \n,\n and dollar sign;\n\n\nDelete any comments that were made in the file to avoid extra columns or NA\u2019s to be added to the file; and\n\n\nMake sure that any missing values in the dataset are indicated with NA.\n\n\n\n\nSave in \n.xls\n,\n \n.xlsx\n,\n \n.csv\n,\n \n.txt\n.\n\n\nPreparing the Workspace\n\u00b6\n\n\n1\n2\n3\n4\n5\n# Import `os` \n\n\nimport\n \nos\n\n\n\n# Retrieve current working directory (`cwd`)\n\n\ncwd\n \n=\n \nos\n.\ngetcwd\n()\n\n\n\n\n\n\n\nPrint it with \ncwd\n or \nprint(cwd)\n.\n\n\n1\n2\n3\n4\n5\n# Change directory \n\n\nos\n.\nchdir\n(\n\"/path/to/your/folder\"\n)\n\n\n\n# List all files and directories in current directory\n\n\nos\n.\nlistdir\n(\n'.'\n)\n\n\n\n\n\n\n\nUsing Virtual Environments\n\u00b6\n\n\nIn a Python virtualenv: we can multiple projects running at the same time and we don\u2019t want them to share the same Python installation or when projects have conflicting requirements.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# Install virtualenv\n\n$ pip install virtualenv\n\n\n# Go to the folder of the project\n\n$ \ncd\n my_folder\n\n\n# Create a virtual environment `venv`\n\n$ virtualenv venv\n\n\n# Indicate the Python interpreter to use for `venv`\n\n$ virtualenv -p /usr/bin/python2.7 venv\n\n\n# Activate `venv`\n\n$ \nsource\n venv/bin/activate\n\n\n# Deactivate `venv`\n\n$ deactivate\n\n\n\n\n\n\nCheck the Loaded Dataset\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n# Check the first entries of the DataFrame\n\n\ndf1\n.\nhead\n()\n\n\n\n# Check the last entries of the DataFrame\n\n\ndf1\n.\ntail\n()\n\n\n\n# Inspect the shape \n\n\ndata\n.\nshape\n\n\n\n# Inspect the number of dimensions\n\n\ndata\n.\nndim\n\n\n\n# Inspect the data type\n\n\ndata\n.\ndtype\n\n\n\n\n\n\n\nInstall Packages to Read and Write Excel Files\n\u00b6\n\n\npandas, openpyxl, xlrd, xlutils, pyexcel\n\u2026\n\n\n\n\npip install\n.\n\n\nconda install\n (Anaconda includes \n100 of the most popular Python\n, \nR\n and Scala packages for data science and several open source development environments such as Jupyter and Spyder).\n\n\n\n\nPackages to Parse Excel Files and Write them back with Python\n\u00b6\n\n\nFrom the \nsite\n:\n\n\n\n\nopenpyxl\n, the recommended package for reading and writing Excel 2010 files (ie: .xlsx). \nDocumentation\n.\n\n\nxlsxwriter\n, an alternative package for writing data, formatting information and, in particular, charts in the Excel 2010 format (ie: .xlsx). \nDocumentation\n.\n\n\nxlrd\n, this package is for reading data and formatting information from older Excel files (ie: .xls). \nDocumentation\n.\n\n\nxlwt\n, this package is for writing data and formatting information to older Excel files (ie: .xls). \nDocumentation\n.\n\n\nxlutils\n, this package collects utilities that require both xlrd and xlwt, including the ability to copy and modify or filter existing excel files. \nDocumentation\n.\n\n\n\n\nLoad Excel & CSV Files as Pandas DataFrames\n\u00b6\n\n\nExcel\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n# Import pandas\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Assign spreadsheet filename to `file`\n\n\nfile\n \n=\n \n'example.xlsx'\n\n\n\n# Load spreadsheet\n\n\nxl\n \n=\n \npd\n.\nExcelFile\n(\nfile\n)\n\n\n\n# Print the sheet names\n\n\nprint\n(\nxl\n.\nsheet_names\n)\n\n\n\n# Load a sheet into a DataFrame by name: df1\n\n\ndf1\n \n=\n \nxl\n.\nparse\n(\n'Sheet1'\n)\n\n\n\n\n\n\n\nCSV\n\u00b6\n\n\n1\n2\n3\n4\n5\n# Import pandas\n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Load csv\n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\n\"example.csv\"\n)\n \n\n\n\n\n\n\nMore options\n.\n\n\nFlat files, tables\n\u00b6\n\n\nAlso: \nread_table()\n and \nread_fwf()\n. \nMore options\n.\n\n\nWrite Pandas DataFrames to Excel and CSV Files\n\u00b6\n\n\nExcel\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Specify a writer\n\n\nwriter\n \n=\n \npd\n.\nExcelWriter\n(\n'example.xlsx'\n,\n \nengine\n=\n'xlsxwriter'\n)\n\n\n\n# Write the DataFrame to a file     \n\n\nyourData\n.\nto_excel\n(\nwriter\n,\n \n'Sheet1'\n)\n\n\n\n# Save the result \n\n\nwriter\n.\nsave\n()\n\n\n\n\n\n\n\nPass the writer variable to the \nto_excel()\n function and specify the sheet name. Add a sheet with the data to an existing workbook: \nExcelWriter\n save multiple, (slightly) different DataFrames to one workbook.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Specify a writer\n\n\nwriter\n \n=\n \npd\n.\nExcelWriter\n(\n'example.xlsx'\n)\n\n\n\n# Write the DataFrame to a file     \n\n\nyourData\n.\nto_excel\n(\nwriter\n,\n \n'Sheet1'\n)\n\n\n\n# Save the result \n\n\nwriter\n.\nsave\n()\n\n\n\n\n\n\n\nSave one DataFrame to a file, don\u2019t specify the engine argument in the \npd.ExcelWriter()\n function. The rest of the steps stay the same.\n\n\nCSV, flat files, tables\n\u00b6\n\n\n1\n2\n# Write the DataFrame to csv\n\n\ndf\n.\nto_csv\n(\n\"example.csv\"\n)\n\n\n\n\n\n\n\nTab-separated file, pass the \nsep = '\\t'\n argument.\n\n\nRead and Write Excel Files with \nopenyxl\n\u00b6\n\n\nRead and write .xlsx, xlsm, xltx, xltm files.\n\n\nThe general advice for installing this package is to do it in a Python virtual environment without system packages. We can use virtual environment to create isolated Python environments: it creates a folder which contains all the necessary executables to use the packages that a Python project would need.\n\n\n\n\nGo to the directory in which the project is located and re-activate the virtual environment \nvenv\n. \n\n\nThen proceed to install \nopenpyxl\n with \npip\n to make sure that we can read and write files with it:\n\n\n\n\n1\n2\n3\n4\n5\n# Activate virtualenv\n\n\n$\n \nsource\n \nactivate\n \nvenv\n\n\n\n# Install `openpyxl` in `venv`\n\n\n$\n \npip\n \ninstall\n \nopenpyxl\n\n\n\n\n\n\n\n\n\nInstall \nopenpyxl\n and start loading in the data.\n\n\nMake sure that we\u2019re in the right directory where the spreadsheet is located (change the working directory with \nos.chdir()\n).\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Import `load_workbook` module from `openpyxl`\n\n\nfrom\n \nopenpyxl\n \nimport\n \nload_workbook\n\n\n\n# Load in the workbook\n\n\nwb\n \n=\n \nload_workbook\n(\n'./test.xlsx'\n)\n\n\ntype\n(\nwb\n)\n\n\n\n# Get sheet names\n\n\nprint\n(\nwb\n.\nget_sheet_names\n())\n\n\n\n\n\n\n\n\n\nWhich sheet is currently active.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# Get a sheet by name \n\n\nsheet\n \n=\n \nwb\n.\nget_sheet_by_name\n(\n'Sheet3'\n)\n\n\n\n# Print the sheet title \n\n\nsheet\n.\ntitle\n\n\n\n# Get currently active sheet\n\n\nanotherSheet\n \n=\n \nwb\n.\nactive\n\n\n\n# Check `anotherSheet` \n\n\nanotherSheet\n\n\n\n\n\n\n\n\n\nRetrieve information in the workbook\u2019s sheet.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n# Retrieve the value of a certain cell\n\n\nsheet\n[\n'A1'\n]\n.\nvalue\n\n\n\n# Select element 'B2' of the sheet \n\n\nc\n \n=\n \nsheet\n[\n'B2'\n]\n\n\n\n# Retrieve the row number of the element\n\n\nc\n.\nrow\n\n\n\n# Retrieve the column letter of the element\n\n\nc\n.\ncolumn\n\n\n\n# Retrieve the coordinates of the cell \n\n\nc\n.\ncoordinate\n\n\n\n# Retrieve cell value \n\n\nsheet\n.\ncell\n(\nrow\n=\n1\n,\n \ncolumn\n=\n2\n)\n.\nvalue\n\n\n\n# Print out values in column 2 \n\n\nfor\n \ni\n \nin\n \nrange\n(\n1\n,\n \n4\n):\n\n     \nprint\n(\ni\n,\n \nsheet\n.\ncell\n(\nrow\n=\ni\n,\n \ncolumn\n=\n2\n)\n.\nvalue\n)\n\n\n\n# Import relevant modules from `openpyxl.utils`\n\n\nfrom\n \nopenpyxl.utils\n \nimport\n \nget_column_letter\n,\n \ncolumn_index_from_string\n\n\n\n# Return 'A'\n\n\nget_column_letter\n(\n1\n)\n\n\n\n# Return '1'\n\n\ncolumn_index_from_string\n(\n'A'\n)\n\n\n\n\n\n\n\nPrint the coordinate and the value that is contained within that cell.\n\n\n1\n2\n3\n4\n5\n# Print row per row\n\n\nfor\n \ncellObj\n \nin\n \nsheet\n[\n'A1'\n:\n'C3'\n]:\n\n      \nfor\n \ncell\n \nin\n \ncellObj\n:\n\n              \nprint\n(\ncells\n.\ncoordinate\n,\n \ncells\n.\nvalue\n)\n\n      \nprint\n(\n'--- END ---'\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n(\n'A1'\n,\n \nu\n'M'\n)\n\n\n(\n'B1'\n,\n \nu\n'N'\n)\n\n\n(\n'C1'\n,\n \nu\n'O'\n)\n\n\n---\n \nEND\n \n---\n\n\n(\n'A2'\n,\n \n10L\n)\n\n\n(\n'B2'\n,\n \n11L\n)\n\n\n(\n'C2'\n,\n \n12L\n)\n\n\n---\n \nEND\n \n---\n\n\n(\n'A3'\n,\n \n14L\n)\n\n\n(\n'B3'\n,\n \n15L\n)\n\n\n(\n'C3'\n,\n \n16L\n)\n\n\n---\n \nEND\n \n---\n\n\n\n\n\n\n\nCheck up on the result of import.\n\n\n1\n2\n3\n4\n5\n# Retrieve the maximum amount of rows \n\n\nsheet\n.\nmax_row\n\n\n\n# Retrieve the maximum amount of columns\n\n\nsheet\n.\nmax_column\n\n\n\n\n\n\n\nPandas DataFrames.\n\n\n1\n2\n3\n4\n5\n# Import `pandas` \n\n\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Convert Sheet to DataFrame\n\n\ndf\n \n=\n \npd\n.\nDataFrame\n(\nsheet\n.\nvalues\n)\n\n\n\n\n\n\n\nSpecify headers and indices.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# Put the sheet values in `data`\n\n\ndata\n \n=\n \nsheet\n.\nvalues\n\n\n\n# Indicate the columns in the sheet values\n\n\ncols\n \n=\n \nnext\n(\ndata\n)[\n1\n:]\n\n\n\n# Convert the data to a list\n\n\ndata\n \n=\n \nlist\n(\ndata\n)\n\n\n\n# Read in the data at index 0 for the indices\n\n\nidx\n \n=\n \n[\nr\n[\n0\n]\n \nfor\n \nr\n \nin\n \ndata\n]\n\n\n\n# Slice the data at index 1 \n\n\ndata\n \n=\n \n(\nislice\n(\nr\n,\n \n1\n,\n \nNone\n)\n \nfor\n \nr\n \nin\n \ndata\n)\n\n\n\n# Make the DataFrame\n\n\ndf\n \n=\n \npd\n.\nDataFrame\n(\ndata\n,\n \nindex\n=\nidx\n,\n \ncolumns\n=\ncols\n)\n\n\n\n\n\n\n\nWrite the Pandas DataFrames back to an Excel file.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Import `dataframe_to_rows`\n\n\nfrom\n \nopenpyxl.utils.dataframe\n \nimport\n \ndataframe_to_rows\n\n\n\n# Initialize a workbook \n\n\nwb\n \n=\n \nWorkbook\n()\n\n\n\n# Get the worksheet in the active workbook\n\n\nws\n \n=\n \nwb\n.\nactive\n\n\n\n# Append the rows of the DataFrame to the worksheet\n\n\nfor\n \nr\n \nin\n \ndataframe_to_rows\n(\ndf\n,\n \nindex\n=\nTrue\n,\n \nheader\n=\nTrue\n):\n\n    \nws\n.\nappend\n(\nr\n)\n\n\n\n\n\n\n\nMore options: change cell styles or use the write-only mode.\n\n\nRead and Format Excel Files with \nxlrd\n\u00b6\n\n\n.xls or .xlsx extensions.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Import `xlrd`\n\n\nimport\n \nxlrd\n\n\n\n# Open a workbook \n\n\nworkbook\n \n=\n \nxlrd\n.\nopen_workbook\n(\n'example.xls'\n)\n\n\n\n# Loads only current sheets to memory\n\n\nworkbook\n \n=\n \nxlrd\n.\nopen_workbook\n(\n'example.xls'\n,\n \non_demand\n \n=\n \nTrue\n)\n\n\n\n\n\n\n\nRetrieve the sheets, then cells.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Load a specific sheet by name\n\n\nworksheet\n \n=\n \nworkbook\n.\nsheet_by_name\n(\n'Sheet1'\n)\n\n\n\n# Load a specific sheet by index \n\n\nworksheet\n \n=\n \nworkbook\n.\nsheet_by_index\n(\n0\n)\n\n\n\n# Retrieve the value from cell at indices (0,0) \n\n\nsheet\n.\ncell\n(\n0\n,\n \n0\n)\n.\nvalue\n\n\n\n\n\n\n\nWrite to Excel Files with \nxlwt\n\u00b6\n\n\n.xls extension\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n# Import `xlwt` \n\n\nimport\n \nxlwt\n\n\n\n# Initialize a workbook \n\n\nbook\n \n=\n \nxlwt\n.\nWorkbook\n(\nencoding\n=\n\"utf-8\"\n)\n\n\n\n# Add a sheet to the workbook \n\n\nsheet1\n \n=\n \nbook\n.\nadd_sheet\n(\n\"Python Sheet 1\"\n)\n \n\n\n# Write to the sheet of the workbook \n\n\nsheet1\n.\nwrite\n(\n0\n,\n \n0\n,\n \n\"This is the First Cell of the First Sheet\"\n)\n \n\n\n# Save the workbook \n\n\nbook\n.\nsave\n(\n\"spreadsheet.xls\"\n)\n\n\n\n\n\n\n\nLoop: every element in the range from 0 to 4 (5 not included).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n# Initialize a workbook\n\n\nbook\n \n=\n \nxlwt\n.\nWorkbook\n()\n\n\n\n# Add a sheet to the workbook\n\n\nsheet1\n \n=\n \nbook\n.\nadd_sheet\n(\n\"Sheet1\"\n)\n\n\n\n# The data\n\n\ncols\n \n=\n \n[\n\"A\"\n,\n \n\"B\"\n,\n \n\"C\"\n,\n \n\"D\"\n,\n \n\"E\"\n]\n\n\ntxt\n \n=\n \n[\n0\n,\n1\n,\n2\n,\n3\n,\n4\n]\n\n\n\n# Loop over the rows and columns and fill in the values\n\n\nfor\n \nnum\n \nin\n \nrange\n(\n5\n):\n\n      \nrow\n \n=\n \nsheet1\n.\nrow\n(\nnum\n)\n\n      \nfor\n \nindex\n,\n \ncol\n \nin\n \nenumerate\n(\ncols\n):\n\n          \nvalue\n \n=\n \ntxt\n[\nindex\n]\n \n+\n \nnum\n\n          \nrow\n.\nwrite\n(\nindex\n,\n \nvalue\n)\n\n\n\n# Save the result\n\n\nbook\n.\nsave\n(\n\"test.xls\"\n)\n\n\n\n\n\n\n\n\n\nA Collection of Utilities: \nxlutils\n\u00b6\n\n\nCollection of utilities that require both \nxlrd\n and \nxlwt\n, which includes the ability to copy and modify or filter existing files. Generally speaking, these use cases are now covered by \nopenpyxl\n.\n\n\nRead with \npyexcel\n\u00b6\n\n\nPython Wrapper that provides one API for reading, manipulating and writing data in .csv, .ods, .xls, .xlsx and .xlsm.\n\n\nDocumentation\n.\n\n\nIn an array.\n\n\n1\n2\n3\n4\n5\n# Import `pyexcel`\n\n\nimport\n \npyexcel\n\n\n\n# Get an array from the data\n\n\nmy_array\n \n=\n \npyexcel\n.\nget_array\n(\nfile_name\n=\n\"test.xls\"\n)\n\n\n\n\n\n\n\nIn an ordered dictionary of lists; even obtain all the workbook sheets in a single dictionary.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Import `OrderedDict` module \n\n\nfrom\n \npyexcel._compact\n \nimport\n \nOrderedDict\n\n\n\n# Get the data in an ordered dictionary of lists\n\n\nmy_dict\n \n=\n \npyexcel\n.\nget_dict\n(\nfile_name\n=\n\"test.xls\"\n,\n \nname_columns_by_row\n=\n0\n)\n\n\n\n# Get the data in a dictionary of 2D arrays\n\n\nbook_dict\n \n=\n \npyexcel\n.\nget_book_dict\n(\nfile_name\n=\n\"test.xls\"\n)\n\n\n\n\n\n\n\nThe arrays and dictionaries of the spreadsheet, allow creating DataFrames of the data with \npd.DataFrame()\n.\n\n\nJust retrieve the records.\n\n\n1\n2\n# Retrieve the records of the file\n\n\nrecords\n \n=\n \npyexcel\n.\nget_records\n(\nfile_name\n=\n\"test.xls\"\n)\n\n\n\n\n\n\n\nWrite with \npyexcel\n\u00b6\n\n\nArrays.\n\n\n1\n2\n3\n4\n5\n# Get the data\n\n\ndata\n \n=\n \n[[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]\n\n\n\n# Save the array to a file\n\n\npyexcel\n.\nsave_as\n(\narray\n=\ndata\n,\n \ndest_file_name\n=\n\"array_data.xls\"\n)\n\n\n\n\n\n\n\ndest_delimiter = \";\"\n\n\nDictionary.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n# The data\n\n\n2\nd_array_dictionary\n \n=\n \n{\n'Sheet 1'\n:\n \n[\n\n                                   \n[\n'ID'\n,\n \n'AGE'\n,\n \n'SCORE'\n]\n\n                                   \n[\n1\n,\n \n22\n,\n \n5\n],\n\n                                   \n[\n2\n,\n \n15\n,\n \n6\n],\n\n                                   \n[\n3\n,\n \n28\n,\n \n9\n]\n\n                                  \n],\n\n                       \n'Sheet 2'\n:\n \n[\n\n                                    \n[\n'X'\n,\n \n'Y'\n,\n \n'Z'\n],\n\n                                    \n[\n1\n,\n \n2\n,\n \n3\n],\n\n                                    \n[\n4\n,\n \n5\n,\n \n6\n]\n\n                                    \n[\n7\n,\n \n8\n,\n \n9\n]\n\n                                  \n],\n\n                       \n'Sheet 3'\n:\n \n[\n\n                                    \n[\n'M'\n,\n \n'N'\n,\n \n'O'\n,\n \n'P'\n],\n\n                                    \n[\n10\n,\n \n11\n,\n \n12\n,\n \n13\n],\n\n                                    \n[\n14\n,\n \n15\n,\n \n16\n,\n \n17\n]\n\n                                    \n[\n18\n,\n \n19\n,\n \n20\n,\n \n21\n]\n\n                                   \n]}\n\n\n\n# Save the data to a file                        \n\n\npyexcel\n.\nsave_book_as\n(\nbookdict\n=\n2\nd_array_dictionary\n,\n \ndest_file_name\n=\n\"2d_array_data.xls\"\n)\n\n\n\n\n\n\n\nThe order of the data in the dictionary will not be kept.\n\n\nRead and Write .csv Files\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n# import `csv`\n\n\nimport\n \ncsv\n\n\n\n# Read in csv file \n\n\nfor\n \nrow\n \nin\n \ncsv\n.\nreader\n(\nopen\n(\n'data.csv'\n),\n \ndelimiter\n=\n','\n):\n\n      \nprint\n(\nrow\n)\n\n\n\n# Write csv file\n\n\ndata\n \n=\n \n[[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n7\n,\n \n8\n,\n \n9\n]]\n\n\noutfile\n \n=\n \nopen\n(\n'data.csv'\n,\n \n'w'\n)\n\n\nwriter\n \n=\n \ncsv\n.\nwriter\n(\noutfile\n,\n \ndelimiter\n=\n';'\n,\n \nquotechar\n=\n'\"'\n)\n\n\nwriter\n.\nwriterows\n(\ndata\n)\n\n\noutfile\n.\nclose\n()\n\n\n\n\n\n\n\nNumpy\n\u00b6\n\n\ngenfromtxt()\n allows to load in the data that is contained within .csv files into arrays which we can then put in DataFrames.",
            "title": "Python and Excel"
        },
        {
            "location": "/Python+And+Excel/#check-the-quality-of-the-spreadsheet",
            "text": "Does the spreadsheet represent static data?  Does the spreadsheet mix data, calculations, and reporting?  Is the data in the spreadsheet complete and consistent?  Does the spreadsheet have a systematic worksheet structure?  Are the live formulas in the spreadsheet valid?",
            "title": "Check the Quality of the Spreadsheet"
        },
        {
            "location": "/Python+And+Excel/#best-practices-for-spreadsheet-data",
            "text": "The first row of the spreadsheet is usually reserved for the header, while the first column is used to identify the sampling unit;  Avoid names, values or fields with blank spaces. Otherwise, each word will be interpreted as a separate variable, resulting in errors that are related to the number of elements per line in the dataset. Consider using:  Underscores,  Dashes,  Camel case, where the first letter of each section of text is capitalized, or  Concatenating words    Short names are preferred over longer names;  Try to avoid using names that contain symbols such as  ?, %, ^, &, *, (, ), -, #, ?, <, >, /, |, \\, [ ,] , {, }  and  ,  and dollar sign;  Delete any comments that were made in the file to avoid extra columns or NA\u2019s to be added to the file; and  Make sure that any missing values in the dataset are indicated with NA.   Save in  .xls ,   .xlsx ,   .csv ,   .txt .",
            "title": "Best Practices for Spreadsheet Data"
        },
        {
            "location": "/Python+And+Excel/#preparing-the-workspace",
            "text": "1\n2\n3\n4\n5 # Import `os`   import   os  # Retrieve current working directory (`cwd`)  cwd   =   os . getcwd ()    Print it with  cwd  or  print(cwd) .  1\n2\n3\n4\n5 # Change directory   os . chdir ( \"/path/to/your/folder\" )  # List all files and directories in current directory  os . listdir ( '.' )",
            "title": "Preparing the Workspace"
        },
        {
            "location": "/Python+And+Excel/#using-virtual-environments",
            "text": "In a Python virtualenv: we can multiple projects running at the same time and we don\u2019t want them to share the same Python installation or when projects have conflicting requirements.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # Install virtualenv \n$ pip install virtualenv # Go to the folder of the project \n$  cd  my_folder # Create a virtual environment `venv` \n$ virtualenv venv # Indicate the Python interpreter to use for `venv` \n$ virtualenv -p /usr/bin/python2.7 venv # Activate `venv` \n$  source  venv/bin/activate # Deactivate `venv` \n$ deactivate",
            "title": "Using Virtual Environments"
        },
        {
            "location": "/Python+And+Excel/#check-the-loaded-dataset",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 # Check the first entries of the DataFrame  df1 . head ()  # Check the last entries of the DataFrame  df1 . tail ()  # Inspect the shape   data . shape  # Inspect the number of dimensions  data . ndim  # Inspect the data type  data . dtype",
            "title": "Check the Loaded Dataset"
        },
        {
            "location": "/Python+And+Excel/#install-packages-to-read-and-write-excel-files",
            "text": "pandas, openpyxl, xlrd, xlutils, pyexcel \u2026   pip install .  conda install  (Anaconda includes  100 of the most popular Python ,  R  and Scala packages for data science and several open source development environments such as Jupyter and Spyder).",
            "title": "Install Packages to Read and Write Excel Files"
        },
        {
            "location": "/Python+And+Excel/#packages-to-parse-excel-files-and-write-them-back-with-python",
            "text": "From the  site :   openpyxl , the recommended package for reading and writing Excel 2010 files (ie: .xlsx).  Documentation .  xlsxwriter , an alternative package for writing data, formatting information and, in particular, charts in the Excel 2010 format (ie: .xlsx).  Documentation .  xlrd , this package is for reading data and formatting information from older Excel files (ie: .xls).  Documentation .  xlwt , this package is for writing data and formatting information to older Excel files (ie: .xls).  Documentation .  xlutils , this package collects utilities that require both xlrd and xlwt, including the ability to copy and modify or filter existing excel files.  Documentation .",
            "title": "Packages to Parse Excel Files and Write them back with Python"
        },
        {
            "location": "/Python+And+Excel/#load-excel-csv-files-as-pandas-dataframes",
            "text": "",
            "title": "Load Excel &amp; CSV Files as Pandas DataFrames"
        },
        {
            "location": "/Python+And+Excel/#excel",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 # Import pandas  import   pandas   as   pd  # Assign spreadsheet filename to `file`  file   =   'example.xlsx'  # Load spreadsheet  xl   =   pd . ExcelFile ( file )  # Print the sheet names  print ( xl . sheet_names )  # Load a sheet into a DataFrame by name: df1  df1   =   xl . parse ( 'Sheet1' )",
            "title": "Excel"
        },
        {
            "location": "/Python+And+Excel/#csv",
            "text": "1\n2\n3\n4\n5 # Import pandas  import   pandas   as   pd  # Load csv  df   =   pd . read_csv ( \"example.csv\" )     More options .",
            "title": "CSV"
        },
        {
            "location": "/Python+And+Excel/#flat-files-tables",
            "text": "Also:  read_table()  and  read_fwf() .  More options .",
            "title": "Flat files, tables"
        },
        {
            "location": "/Python+And+Excel/#write-pandas-dataframes-to-excel-and-csv-files",
            "text": "",
            "title": "Write Pandas DataFrames to Excel and CSV Files"
        },
        {
            "location": "/Python+And+Excel/#excel_1",
            "text": "1\n2\n3\n4\n5\n6\n7\n8 # Specify a writer  writer   =   pd . ExcelWriter ( 'example.xlsx' ,   engine = 'xlsxwriter' )  # Write the DataFrame to a file       yourData . to_excel ( writer ,   'Sheet1' )  # Save the result   writer . save ()    Pass the writer variable to the  to_excel()  function and specify the sheet name. Add a sheet with the data to an existing workbook:  ExcelWriter  save multiple, (slightly) different DataFrames to one workbook.  1\n2\n3\n4\n5\n6\n7\n8 # Specify a writer  writer   =   pd . ExcelWriter ( 'example.xlsx' )  # Write the DataFrame to a file       yourData . to_excel ( writer ,   'Sheet1' )  # Save the result   writer . save ()    Save one DataFrame to a file, don\u2019t specify the engine argument in the  pd.ExcelWriter()  function. The rest of the steps stay the same.",
            "title": "Excel"
        },
        {
            "location": "/Python+And+Excel/#csv-flat-files-tables",
            "text": "1\n2 # Write the DataFrame to csv  df . to_csv ( \"example.csv\" )    Tab-separated file, pass the  sep = '\\t'  argument.",
            "title": "CSV, flat files, tables"
        },
        {
            "location": "/Python+And+Excel/#read-and-write-excel-files-with-openyxl",
            "text": "Read and write .xlsx, xlsm, xltx, xltm files.  The general advice for installing this package is to do it in a Python virtual environment without system packages. We can use virtual environment to create isolated Python environments: it creates a folder which contains all the necessary executables to use the packages that a Python project would need.   Go to the directory in which the project is located and re-activate the virtual environment  venv .   Then proceed to install  openpyxl  with  pip  to make sure that we can read and write files with it:   1\n2\n3\n4\n5 # Activate virtualenv  $   source   activate   venv  # Install `openpyxl` in `venv`  $   pip   install   openpyxl     Install  openpyxl  and start loading in the data.  Make sure that we\u2019re in the right directory where the spreadsheet is located (change the working directory with  os.chdir() ).   1\n2\n3\n4\n5\n6\n7\n8\n9 # Import `load_workbook` module from `openpyxl`  from   openpyxl   import   load_workbook  # Load in the workbook  wb   =   load_workbook ( './test.xlsx' )  type ( wb )  # Get sheet names  print ( wb . get_sheet_names ())     Which sheet is currently active.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # Get a sheet by name   sheet   =   wb . get_sheet_by_name ( 'Sheet3' )  # Print the sheet title   sheet . title  # Get currently active sheet  anotherSheet   =   wb . active  # Check `anotherSheet`   anotherSheet     Retrieve information in the workbook\u2019s sheet.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 # Retrieve the value of a certain cell  sheet [ 'A1' ] . value  # Select element 'B2' of the sheet   c   =   sheet [ 'B2' ]  # Retrieve the row number of the element  c . row  # Retrieve the column letter of the element  c . column  # Retrieve the coordinates of the cell   c . coordinate  # Retrieve cell value   sheet . cell ( row = 1 ,   column = 2 ) . value  # Print out values in column 2   for   i   in   range ( 1 ,   4 ): \n      print ( i ,   sheet . cell ( row = i ,   column = 2 ) . value )  # Import relevant modules from `openpyxl.utils`  from   openpyxl.utils   import   get_column_letter ,   column_index_from_string  # Return 'A'  get_column_letter ( 1 )  # Return '1'  column_index_from_string ( 'A' )    Print the coordinate and the value that is contained within that cell.  1\n2\n3\n4\n5 # Print row per row  for   cellObj   in   sheet [ 'A1' : 'C3' ]: \n       for   cell   in   cellObj : \n               print ( cells . coordinate ,   cells . value ) \n       print ( '--- END ---' )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ( 'A1' ,   u 'M' )  ( 'B1' ,   u 'N' )  ( 'C1' ,   u 'O' )  ---   END   ---  ( 'A2' ,   10L )  ( 'B2' ,   11L )  ( 'C2' ,   12L )  ---   END   ---  ( 'A3' ,   14L )  ( 'B3' ,   15L )  ( 'C3' ,   16L )  ---   END   ---    Check up on the result of import.  1\n2\n3\n4\n5 # Retrieve the maximum amount of rows   sheet . max_row  # Retrieve the maximum amount of columns  sheet . max_column    Pandas DataFrames.  1\n2\n3\n4\n5 # Import `pandas`   import   pandas   as   pd  # Convert Sheet to DataFrame  df   =   pd . DataFrame ( sheet . values )    Specify headers and indices.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # Put the sheet values in `data`  data   =   sheet . values  # Indicate the columns in the sheet values  cols   =   next ( data )[ 1 :]  # Convert the data to a list  data   =   list ( data )  # Read in the data at index 0 for the indices  idx   =   [ r [ 0 ]   for   r   in   data ]  # Slice the data at index 1   data   =   ( islice ( r ,   1 ,   None )   for   r   in   data )  # Make the DataFrame  df   =   pd . DataFrame ( data ,   index = idx ,   columns = cols )    Write the Pandas DataFrames back to an Excel file.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Import `dataframe_to_rows`  from   openpyxl.utils.dataframe   import   dataframe_to_rows  # Initialize a workbook   wb   =   Workbook ()  # Get the worksheet in the active workbook  ws   =   wb . active  # Append the rows of the DataFrame to the worksheet  for   r   in   dataframe_to_rows ( df ,   index = True ,   header = True ): \n     ws . append ( r )    More options: change cell styles or use the write-only mode.",
            "title": "Read and Write Excel Files with openyxl"
        },
        {
            "location": "/Python+And+Excel/#read-and-format-excel-files-with-xlrd",
            "text": ".xls or .xlsx extensions.  1\n2\n3\n4\n5\n6\n7\n8 # Import `xlrd`  import   xlrd  # Open a workbook   workbook   =   xlrd . open_workbook ( 'example.xls' )  # Loads only current sheets to memory  workbook   =   xlrd . open_workbook ( 'example.xls' ,   on_demand   =   True )    Retrieve the sheets, then cells.  1\n2\n3\n4\n5\n6\n7\n8 # Load a specific sheet by name  worksheet   =   workbook . sheet_by_name ( 'Sheet1' )  # Load a specific sheet by index   worksheet   =   workbook . sheet_by_index ( 0 )  # Retrieve the value from cell at indices (0,0)   sheet . cell ( 0 ,   0 ) . value",
            "title": "Read and Format Excel Files with xlrd"
        },
        {
            "location": "/Python+And+Excel/#write-to-excel-files-with-xlwt",
            "text": ".xls extension   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 # Import `xlwt`   import   xlwt  # Initialize a workbook   book   =   xlwt . Workbook ( encoding = \"utf-8\" )  # Add a sheet to the workbook   sheet1   =   book . add_sheet ( \"Python Sheet 1\" )   # Write to the sheet of the workbook   sheet1 . write ( 0 ,   0 ,   \"This is the First Cell of the First Sheet\" )   # Save the workbook   book . save ( \"spreadsheet.xls\" )    Loop: every element in the range from 0 to 4 (5 not included).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 # Initialize a workbook  book   =   xlwt . Workbook ()  # Add a sheet to the workbook  sheet1   =   book . add_sheet ( \"Sheet1\" )  # The data  cols   =   [ \"A\" ,   \"B\" ,   \"C\" ,   \"D\" ,   \"E\" ]  txt   =   [ 0 , 1 , 2 , 3 , 4 ]  # Loop over the rows and columns and fill in the values  for   num   in   range ( 5 ): \n       row   =   sheet1 . row ( num ) \n       for   index ,   col   in   enumerate ( cols ): \n           value   =   txt [ index ]   +   num \n           row . write ( index ,   value )  # Save the result  book . save ( \"test.xls\" )",
            "title": "Write to Excel Files with xlwt"
        },
        {
            "location": "/Python+And+Excel/#a-collection-of-utilities-xlutils",
            "text": "Collection of utilities that require both  xlrd  and  xlwt , which includes the ability to copy and modify or filter existing files. Generally speaking, these use cases are now covered by  openpyxl .",
            "title": "A Collection of Utilities: xlutils"
        },
        {
            "location": "/Python+And+Excel/#read-with-pyexcel",
            "text": "Python Wrapper that provides one API for reading, manipulating and writing data in .csv, .ods, .xls, .xlsx and .xlsm.  Documentation .  In an array.  1\n2\n3\n4\n5 # Import `pyexcel`  import   pyexcel  # Get an array from the data  my_array   =   pyexcel . get_array ( file_name = \"test.xls\" )    In an ordered dictionary of lists; even obtain all the workbook sheets in a single dictionary.  1\n2\n3\n4\n5\n6\n7\n8 # Import `OrderedDict` module   from   pyexcel._compact   import   OrderedDict  # Get the data in an ordered dictionary of lists  my_dict   =   pyexcel . get_dict ( file_name = \"test.xls\" ,   name_columns_by_row = 0 )  # Get the data in a dictionary of 2D arrays  book_dict   =   pyexcel . get_book_dict ( file_name = \"test.xls\" )    The arrays and dictionaries of the spreadsheet, allow creating DataFrames of the data with  pd.DataFrame() .  Just retrieve the records.  1\n2 # Retrieve the records of the file  records   =   pyexcel . get_records ( file_name = \"test.xls\" )",
            "title": "Read with pyexcel"
        },
        {
            "location": "/Python+And+Excel/#write-with-pyexcel",
            "text": "Arrays.  1\n2\n3\n4\n5 # Get the data  data   =   [[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]  # Save the array to a file  pyexcel . save_as ( array = data ,   dest_file_name = \"array_data.xls\" )    dest_delimiter = \";\"  Dictionary.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 # The data  2 d_array_dictionary   =   { 'Sheet 1' :   [ \n                                    [ 'ID' ,   'AGE' ,   'SCORE' ] \n                                    [ 1 ,   22 ,   5 ], \n                                    [ 2 ,   15 ,   6 ], \n                                    [ 3 ,   28 ,   9 ] \n                                   ], \n                        'Sheet 2' :   [ \n                                     [ 'X' ,   'Y' ,   'Z' ], \n                                     [ 1 ,   2 ,   3 ], \n                                     [ 4 ,   5 ,   6 ] \n                                     [ 7 ,   8 ,   9 ] \n                                   ], \n                        'Sheet 3' :   [ \n                                     [ 'M' ,   'N' ,   'O' ,   'P' ], \n                                     [ 10 ,   11 ,   12 ,   13 ], \n                                     [ 14 ,   15 ,   16 ,   17 ] \n                                     [ 18 ,   19 ,   20 ,   21 ] \n                                    ]}  # Save the data to a file                          pyexcel . save_book_as ( bookdict = 2 d_array_dictionary ,   dest_file_name = \"2d_array_data.xls\" )    The order of the data in the dictionary will not be kept.",
            "title": "Write with pyexcel"
        },
        {
            "location": "/Python+And+Excel/#read-and-write-csv-files",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 # import `csv`  import   csv  # Read in csv file   for   row   in   csv . reader ( open ( 'data.csv' ),   delimiter = ',' ): \n       print ( row )  # Write csv file  data   =   [[ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ],   [ 7 ,   8 ,   9 ]]  outfile   =   open ( 'data.csv' ,   'w' )  writer   =   csv . writer ( outfile ,   delimiter = ';' ,   quotechar = '\"' )  writer . writerows ( data )  outfile . close ()",
            "title": "Read and Write .csv Files"
        },
        {
            "location": "/Python+And+Excel/#numpy",
            "text": "genfromtxt()  allows to load in the data that is contained within .csv files into arrays which we can then put in DataFrames.",
            "title": "Numpy"
        },
        {
            "location": "/Overview_of_scikit-learn/",
            "text": "CONTENT\n\n\nThe scikit-learn module\n\n\nBasic level\n\n\nHard-coded dataset\n\n\nDecision tree\n\n\nRandom Forests\n\n\nk-Nearest Neighbours\n\n\nLogistic regression\n\n\nNa\u00efve Bayes\n\n\n\n\n\n\nIntermediate level\n\n\nImported dataset\n\n\nDecision tree\n\n\nRandom Forests\n\n\nRandom Forests (with the Iris dataset)\n\n\nk-Nearest Neighbours\n\n\nLogistic regression\n\n\nNa\u00efve Bayes\n\n\n\n\n\n\nIntermediate level (Additional)\n\n\nPrincipal Component Analysis\n\n\nSupport Vector Machines\n\n\n\n\n\n\nA little application\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\n1\n2\n3\n4\n5\n# Set the current directory\n\n\nimport\n \nos\n\n\n\nos\n.\nchdir\n(\n'/home/ugo/Documents/Notebooks/DataCamp, Overview of scikit-learn/'\n)\n\n\nprint\n(\nos\n.\ngetcwd\n())\n\n\n\n\n\n\n\n1\n/home/ugo/Documents/Notebooks/DataCamp, Overview of scikit-learn\n\n\n\n\n\n\nThe scikit-learn module\n\u00b6\n\n\n\n\nWe use different algorithms from the \nsciki-learn\n module as classifiers (on a binary dependent variable). Most models come from this \nlink\n.\n\n\nUnused algorithms:\n\n\n\n\nRegressions,\n\n\nRidge regression (for dealing with heteroscedasticity),\n\n\nElasticNet, Lasso (for dealing with heteroscedasticity),\n\n\nSupport Vector Regression (SVR), ensemble models,\n\n\n\n\n\n\nClassfication,\n\n\nLinear SVC, ensemble SVC, kernel approximation,\n\n\n\n\n\n\nClustering,\n\n\nk-means, spectral clustering GMM,\n\n\nOther k-means,\n\n\n\n\n\n\nDimensionality reduction,\n\n\nPrincipal Component Analysis (PCA),\n\n\nOthers.\n\n\n\n\n\n\n\n\nBasic level\n\u00b6\n\n\nHard-coded dataset\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n# [height, weight, shoe_size]\n\n\nX\n \n=\n \n[[\n181\n,\n \n80\n,\n \n44\n],\n \n[\n177\n,\n \n70\n,\n \n43\n],\n \n[\n160\n,\n \n60\n,\n \n38\n],\n \n[\n154\n,\n \n54\n,\n \n37\n],\n \n[\n166\n,\n \n65\n,\n \n40\n],\n\n     \n[\n190\n,\n \n90\n,\n \n47\n],\n \n[\n175\n,\n \n64\n,\n \n39\n],\n\n     \n[\n177\n,\n \n70\n,\n \n40\n],\n \n[\n159\n,\n \n55\n,\n \n37\n],\n \n[\n171\n,\n \n75\n,\n \n42\n],\n \n[\n181\n,\n \n85\n,\n \n43\n]]\n\n\n\nY\n \n=\n \n[\n'male'\n,\n \n'male'\n,\n \n'female'\n,\n \n'female'\n,\n \n'male'\n,\n \n'male'\n,\n \n'female'\n,\n \n'female'\n,\n\n     \n'female'\n,\n \n'male'\n,\n \n'male'\n]\n\n\n\n\n\n\n\nDecision tree\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n# import decision tree\n\n\nfrom\n \nsklearn\n \nimport\n \ntree\n\n\n\n# train on the train set\n\n\nclf\n \n=\n \ntree\n.\nDecisionTreeClassifier\n()\n\n\n\nclf\n \n=\n \nclf\n.\nfit\n(\nX\n,\nY\n)\n\n\n\n\n\n\n\n1\n2\n3\n# test\n\n\nprediction\n \n=\n \nclf\n.\npredict\n([[\n190\n,\n \n70\n,\n \n43\n]])\n\n\nprint\n(\nprediction\n)\n\n\n\n\n\n\n\n1\n['male']\n\n\n\n\n\n\nRandom Forests\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nfrom\n \nsklearn.ensemble\n \nimport\n \nRandomForestClassifier\n\n\nfrom\n \nsklearn.preprocessing\n \nimport\n \nLabelEncoder\n\n\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\nfrom\n \nsklearn.metrics\n \nimport\n \nconfusion_matrix\n\n\n\n# set the training parameters\n\n\nclf\n \n=\n \nRandomForestClassifier\n(\nn_estimators\n=\n1000\n)\n\n\n\n# train on the same train set\n\n\nclf\n \n=\n \nclf\n.\nfit\n(\nX\n,\nY\n)\n\n\n\n# validate the classifier\n\n\naccuracy\n \n=\n \nclf\n.\nscore\n(\nX\n,\n \nY\n)\n\n\nprint\n(\n'Accuracy: '\n \n+\n \nstr\n(\naccuracy\n))\n\n\n\n\n\n\n\n1\nAccuracy\n:\n \n1.0\n\n\n\n\n\n\n\n1\n2\n3\n# test\n\n\nprediction\n \n=\n \nclf\n.\npredict\n([[\n190\n,\n \n70\n,\n \n43\n]])\n\n\nprint\n(\nprediction\n)\n\n\n\n\n\n\n\n1\n['male']\n\n\n\n\n\n\nk-Nearest Neighbours\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom\n \nsklearn.neighbors\n \nimport\n \nKNeighborsClassifier\n\n\n\n# set the training parameters\n\n\nneigh\n \n=\n \nKNeighborsClassifier\n(\nn_neighbors\n=\n3\n)\n\n\n\n# train on the same train set\n\n\nneigh\n.\nfit\n(\nX\n,\nY\n)\n\n\n\n\n\n\n\n1\n2\n3\nKNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n           metric_params=None, n_jobs=1, n_neighbors=3, p=2,\n           weights='uniform')\n\n\n\n\n\n\n1\n2\n3\n# test\n\n\nprediction\n \n=\n \nneigh\n.\npredict\n([[\n190\n,\n \n70\n,\n \n43\n]])\n\n\nprint\n(\nprediction\n)\n\n\n\n\n\n\n\n1\n['male']\n\n\n\n\n\n\nLogistic regression\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom\n \nsklearn.linear_model\n \nimport\n \nLogisticRegression\n\n\n\n# set the training parameters\n\n\nneigh\n \n=\n \nLogisticRegression\n()\n\n\n\n# train on the same train set\n\n\nneigh\n.\nfit\n(\nX\n,\n \nY\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\nLogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)\n\n\n\n\n\n\n1\n2\n3\n# test\n\n\nprediction\n \n=\n \nneigh\n.\npredict\n([[\n190\n,\n \n70\n,\n \n43\n]])\n\n\nprint\n(\nprediction\n)\n\n\n\n\n\n\n\n1\n['female']\n\n\n\n\n\n\nNa\u00efve Bayes\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom\n \nsklearn.naive_bayes\n \nimport\n \nGaussianNB\n\n\n\n# set the training parameters\n\n\ngnb\n \n=\n \nGaussianNB\n()\n\n\n\n# train on the same train set\n\n\ngnb\n \n=\n \ngnb\n.\nfit\n(\nX\n,\n \nY\n)\n\n\n\n\n\n\n\n1\n2\n3\n# test\n\n\nprediction\n \n=\n \ngnb\n.\npredict\n([[\n190\n,\n \n70\n,\n \n43\n]])\n\n\nprint\n(\nprediction\n)\n\n\n\n\n\n\n\n1\n['male']\n\n\n\n\n\n\nIntermediate level\n\u00b6\n\n\nImported dataset\n\u00b6\n\n\nDecision tree\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \npandas\n \nas\n \npd\n\n\nfrom\n \nsklearn\n \nimport\n \ntree\n\n\nfrom\n \nsklearn.preprocessing\n \nimport\n \nLabelEncoder\n\n\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\nfrom\n \nsklearn.metrics\n \nimport\n \nconfusion_matrix\n\n\n\n# import the adult.txt file into Python\n\n\ndata\n \n=\n \npd\n.\nread_csv\n(\n'data/adults.txt'\n,\n \nsep\n=\n','\n)\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n\n\n\n1\nlen\n(\ndata\n)\n\n\n\n\n\n\n\n1\n32561\n\n\n\n\n\n\n1\ndata\n.\nshape\n\n\n\n\n\n\n\n1\n(32561, 15)\n\n\n\n\n\n\n1\ndata\n.\ninfo\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 32561 entries, 0 to 32560\nData columns (total 15 columns):\nage               32561 non-null int64\nworkclass         32561 non-null object\nfinal_weight      32561 non-null int64\neducation         32561 non-null object\neducation_num     32561 non-null int64\nmarital_status    32561 non-null object\noccupation        32561 non-null object\nrelationship      32561 non-null object\nrace              32561 non-null object\nsex               32561 non-null object\ncapital_gain      32561 non-null int64\ncapital_loss      32561 non-null int64\nhours_per_week    32561 non-null int64\nnative_country    32561 non-null object\nsalary            32561 non-null object\ndtypes: int64(6), object(9)\nmemory usage: 3.7+ MB\n\n\n\n\n\n\n1\n2\n3\n4\n# convert the string labels to numeric labels\n\n\nfor\n \nlabel\n \nin\n \n[\n'race'\n,\n \n'occupation'\n]:\n\n    \ndata\n[\nlabel\n]\n \n=\n \nLabelEncoder\n()\n.\nfit_transform\n(\ndata\n[\nlabel\n])\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# take the fields of interest and plug them into variable X\n\n\nX\n \n=\n \ndata\n[[\n'race'\n,\n \n'hours_per_week'\n,\n \n'occupation'\n]]\n\n\n\n# make sure to provide the corresponding truth value\n\n\nY\n \n=\n \ndata\n[\n'sex'\n]\n.\nvalues\n.\ntolist\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# split the data into a test (30%) and train set (70%)\n\n\nX_train\n,\n \nX_test\n,\n \nY_train\n,\n \nY_test\n \n=\n \ntrain_test_split\n(\nX\n,\n \nY\n,\n \ntest_size\n=\n0.3\n)\n\n\n\n# set the training parameters, instantiate the classifier\n\n\nclf\n \n=\n \ntree\n.\nDecisionTreeClassifier\n()\n\n\n\n# train on the train set\n\n\nclf\n \n=\n \nclf\n.\nfit\n(\nX_train\n,\n \nY_train\n)\n\n\n\n\n\n\n\n1\n2\n3\n# validate the classifier\n\n\naccuracy\n \n=\n \nclf\n.\nscore\n(\nX_test\n,\n \nY_test\n)\n\n\nprint\n(\n'Accuracy: '\n \n+\n \nstr\n(\naccuracy\n))\n\n\n\n\n\n\n\n1\nAccuracy\n:\n \n0.727198280274\n\n\n\n\n\n\n\n1\n2\n3\n# test\n\n\nprediction\n \n=\n \nclf\n.\npredict\n(\nX_test\n)\n\n\nprint\n(\nprediction\n)\n\n\n\n\n\n\n\n1\n['Female' 'Female' 'Male' ..., 'Male' 'Male' 'Male']\n\n\n\n\n\n\n1\n2\n3\n# create a confusion matrix\n\n\ncm\n \n=\n \nconfusion_matrix\n(\nprediction\n,\n \nY_test\n)\n\n\nprint\n(\ncm\n)\n\n\n\n\n\n\n\n1\n2\n[[1613 1037]\n\n \n[1628 5491]]\n\n\n\n\n\n\n\nRandom Forests\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \npandas\n \nas\n \npd\n\n\nfrom\n \nsklearn.ensemble\n \nimport\n \nRandomForestClassifier\n\n\nfrom\n \nsklearn.preprocessing\n \nimport\n \nLabelEncoder\n\n\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\nfrom\n \nsklearn.metrics\n \nimport\n \nconfusion_matrix\n\n\n\n# import the adult.txt file into Python\n\n\ndata\n \n=\n \npd\n.\nread_csv\n(\n'data/adults.txt'\n,\n \nsep\n=\n','\n)\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n# convert the string labels to numeric labels\n\n\nfor\n \nlabel\n \nin\n \n[\n'race'\n,\n \n'occupation'\n]:\n\n    \ndata\n[\nlabel\n]\n \n=\n \nLabelEncoder\n()\n.\nfit_transform\n(\ndata\n[\nlabel\n])\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# take the fields of interest and plug them into variable X\n\n\nX\n \n=\n \ndata\n[[\n'race'\n,\n \n'hours_per_week'\n,\n \n'occupation'\n]]\n\n\n\n# make sure to provide the corresponding truth value\n\n\nY\n \n=\n \ndata\n[\n'sex'\n]\n.\nvalues\n.\ntolist\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# split the data into a test (30%) and train set (70%)\n\n\nX_train\n,\n \nX_test\n,\n \nY_train\n,\n \nY_test\n \n=\n \ntrain_test_split\n(\nX\n,\n \nY\n,\n \ntest_size\n=\n0.3\n)\n\n\n\n# set the training parameters\n\n\nclf\n \n=\n \nRandomForestClassifier\n(\nn_estimators\n=\n1000\n)\n\n\n\n# train on the train set\n\n\nclf\n \n=\n \nclf\n.\nfit\n(\nX_train\n,\n \nY_train\n)\n\n\n\n\n\n\n\n1\n2\n3\n# validate the classifier\n\n\naccuracy\n \n=\n \nclf\n.\nscore\n(\nX_test\n,\n \nY_test\n)\n\n\nprint\n(\n'Accuracy: '\n \n+\n \nstr\n(\naccuracy\n))\n\n\n\n\n\n\n\n1\nAccuracy\n:\n \n0.738765482649\n\n\n\n\n\n\n\n1\n2\n3\n# test\n\n\nprediction\n \n=\n \nclf\n.\npredict\n(\nX_test\n)\n\n\nprint\n(\nprediction\n)\n\n\n\n\n\n\n\n1\n['Male' 'Female' 'Male' ..., 'Female' 'Male' 'Female']\n\n\n\n\n\n\n1\n2\n3\n# create a confusion matrix\n\n\ncm\n \n=\n \nconfusion_matrix\n(\nprediction\n,\n \nY_test\n)\n\n\nprint\n(\ncm\n)\n\n\n\n\n\n\n\n1\n2\n[[1568  970]\n\n \n[1582 5649]]\n\n\n\n\n\n\n\nRandom Forests (with the Iris dataset)\n\u00b6\n\n\nIris dataset.\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom\n \nsklearn.cross_validation\n \nimport\n \ncross_val_score\n,\n \ntrain_test_split\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nsklearn\n \nimport\n \ndatasets\n\n\nfrom\n \nsklearn.ensemble\n \nimport\n \nRandomForestClassifier\n\n\nfrom\n \nsklearn\n \nimport\n \npreprocessing\n\n\n\niris\n \n=\n \ndatasets\n.\nload_iris\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# feature scaling\n\n\nmin_max_scaler\n \n=\n \npreprocessing\n.\nMinMaxScaler\n()\n\n\nX\n \n=\n \nmin_max_scaler\n.\nfit_transform\n(\niris\n.\ndata\n)\n\n\n\n# train on the train set\n\n\nclf\n \n=\n \nRandomForestClassifier\n(\nn_estimators\n=\n200\n)\n   \n\n\n\n\n\n\n1\n2\n3\n4\n# test our classifier\n\n\nscores\n \n=\n \ncross_val_score\n(\nclf\n,\n \nX\n,\n \niris\n.\ntarget\n,\n \ncv\n=\n5\n)\n\n\n\nprint\n(\n\"Accuracy: \n%0.2f\n (+/- \n%0.2f\n)\"\n \n%\n \n(\nscores\n.\nmean\n(),\n \nscores\n.\nstd\n()\n \n*\n \n2\n))\n\n\n\n\n\n\n\n1\nAccuracy\n:\n \n0.97\n \n(+/-\n \n0.04\n)\n\n\n\n\n\n\n\nk-Nearest Neighbours\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \npandas\n \nas\n \npd\n\n\nfrom\n \nsklearn.neighbors\n \nimport\n \nKNeighborsClassifier\n\n\nfrom\n \nsklearn.preprocessing\n \nimport\n \nLabelEncoder\n\n\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\nfrom\n \nsklearn.metrics\n \nimport\n \nconfusion_matrix\n\n\n\n# Import the adult.txt file into Python\n\n\ndata\n \n=\n \npd\n.\nread_csv\n(\n'data/adults.txt'\n,\n \nsep\n=\n','\n)\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n# convert the string labels to numeric labels\n\n\nfor\n \nlabel\n \nin\n \n[\n'race'\n,\n \n'occupation'\n]:\n\n    \ndata\n[\nlabel\n]\n \n=\n \nLabelEncoder\n()\n.\nfit_transform\n(\ndata\n[\nlabel\n])\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# take the fields of interest and plug them into variable X\n\n\nX\n \n=\n \ndata\n[[\n'race'\n,\n \n'hours_per_week'\n,\n \n'occupation'\n]]\n\n\n\n# make sure to provide the corresponding truth value\n\n\nY\n \n=\n \ndata\n[\n'sex'\n]\n.\nvalues\n.\ntolist\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# split the data into a test (30%) and train set (70%)\n\n\nX_train\n,\n \nX_test\n,\n \nY_train\n,\n \nY_test\n \n=\n \ntrain_test_split\n(\nX\n,\n \nY\n,\n \ntest_size\n=\n0.3\n)\n\n\n\n# set the training parameters, instantiate the classifier\n\n\nclf\n \n=\n \nKNeighborsClassifier\n(\nn_neighbors\n=\n3\n)\n\n\n\n# train on the train set\n\n\nclf\n \n=\n \nclf\n.\nfit\n(\nX_train\n,\n \nY_train\n)\n\n\n\n\n\n\n\n1\n2\n3\n# validate the classifier\n\n\naccuracy\n \n=\n \nclf\n.\nscore\n(\nX_test\n,\n \nY_test\n)\n\n\nprint\n(\n'Accuracy: '\n \n+\n \nstr\n(\naccuracy\n))\n\n\n\n\n\n\n\n1\nAccuracy\n:\n \n0.68113420002\n\n\n\n\n\n\n\n1\n2\n# create a confusion matrix\n\n\nprediction\n \n=\n \nclf\n.\npredict\n(\nX_test\n)\n\n\n\n\n\n\n\n1\n2\n3\n# test\n\n\ncm\n \n=\n \nconfusion_matrix\n(\nprediction\n,\n \nY_test\n)\n\n\nprint\n(\ncm\n)\n\n\n\n\n\n\n\n1\n2\n[[1694 1591]\n\n \n[1524 4960]]\n\n\n\n\n\n\n\nLogistic regression\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \npandas\n \nas\n \npd\n\n\nfrom\n \nsklearn.linear_model\n \nimport\n \nLogisticRegression\n\n\nfrom\n \nsklearn.preprocessing\n \nimport\n \nLabelEncoder\n\n\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\nfrom\n \nsklearn.metrics\n \nimport\n \nconfusion_matrix\n\n\n\n# import the adult.txt file into Python\n\n\ndata\n \n=\n \npd\n.\nread_csv\n(\n'data/adults.txt'\n,\n \nsep\n=\n','\n)\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n# convert the string labels to numeric labels\n\n\nfor\n \nlabel\n \nin\n \n[\n'race'\n,\n \n'occupation'\n]:\n\n    \ndata\n[\nlabel\n]\n \n=\n \nLabelEncoder\n()\n.\nfit_transform\n(\ndata\n[\nlabel\n])\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# take the fields of interest and plug them into variable X\n\n\nX\n \n=\n \ndata\n[[\n'race'\n,\n \n'hours_per_week'\n,\n \n'occupation'\n]]\n\n\n\n# make sure to provide the corresponding truth value\n\n\nY\n \n=\n \ndata\n[\n'sex'\n]\n.\nvalues\n.\ntolist\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# split the data into a test (30%) and train set (70%)\n\n\nX_train\n,\n \nX_test\n,\n \nY_train\n,\n \nY_test\n \n=\n \ntrain_test_split\n(\nX\n,\n \nY\n,\n \ntest_size\n=\n0.3\n)\n\n\n\n# set the training parameters, instantiate the classifier\n\n\nclf\n \n=\n \nLogisticRegression\n()\n\n\n\n# train on the train set\n\n\nclf\n \n=\n \nclf\n.\nfit\n(\nX_train\n,\n \nY_train\n)\n\n\n\n\n\n\n\n1\n2\n3\n# validate the classifier\n\n\naccuracy\n \n=\n \nclf\n.\nscore\n(\nX_test\n,\n \nY_test\n)\n\n\nprint\n(\n'Accuracy: '\n \n+\n \nstr\n(\naccuracy\n))\n\n\n\n\n\n\n\n1\nAccuracy\n:\n \n0.669259903777\n\n\n\n\n\n\n\n1\n2\n3\n# create a confusion matrix\n\n\nprediction\n \n=\n \nclf\n.\npredict\n(\nX_test\n)\n\n\nprint\n(\nprediction\n)\n\n\n\n\n\n\n\n1\n['Male' 'Male' 'Male' ..., 'Female' 'Female' 'Male']\n\n\n\n\n\n\n1\n2\n3\n# test\n\n\ncm\n \n=\n \nconfusion_matrix\n(\nprediction\n,\n \nY_test\n)\n\n\nprint\n(\ncm\n)\n\n\n\n\n\n\n\n1\n2\n[[ 459  419]\n\n \n[2812 6079]]\n\n\n\n\n\n\n\nNa\u00efve Bayes\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \npandas\n \nas\n \npd\n\n\nfrom\n \nsklearn.naive_bayes\n \nimport\n \nGaussianNB\n\n\nfrom\n \nsklearn.preprocessing\n \nimport\n \nLabelEncoder\n\n\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\nfrom\n \nsklearn.metrics\n \nimport\n \nconfusion_matrix\n\n\n\n# import the adult.txt file into Python\n\n\ndata\n \n=\n \npd\n.\nread_csv\n(\n'data/adults.txt'\n,\n \nsep\n=\n','\n)\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n# convert the string labels to numeric labels\n\n\nfor\n \nlabel\n \nin\n \n[\n'race'\n,\n \n'occupation'\n]:\n\n    \ndata\n[\nlabel\n]\n \n=\n \nLabelEncoder\n()\n.\nfit_transform\n(\ndata\n[\nlabel\n])\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# take the fields of interest and plug them into variable X\n\n\nX\n \n=\n \ndata\n[[\n'race'\n,\n \n'hours_per_week'\n,\n \n'occupation'\n]]\n\n\n\n# make sure to provide the corresponding truth value\n\n\nY\n \n=\n \ndata\n[\n'sex'\n]\n.\nvalues\n.\ntolist\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# split the data into a test (30%) and train set (70%)\n\n\nX_train\n,\n \nX_test\n,\n \nY_train\n,\n \nY_test\n \n=\n \ntrain_test_split\n(\nX\n,\n \nY\n,\n \ntest_size\n=\n0.3\n)\n\n\n\n# set the training parameters, instantiate the classifier\n\n\nclf\n \n=\n \nGaussianNB\n()\n\n\n\n# train on the train set\n\n\nclf\n \n=\n \nclf\n.\nfit\n(\nX_train\n,\n \nY_train\n)\n\n\n\n\n\n\n\n1\n2\n3\n# validate the classifier\n\n\naccuracy\n \n=\n \nclf\n.\nscore\n(\nX_test\n,\n \nY_test\n)\n\n\nprint\n(\n'Accuracy: '\n \n+\n \nstr\n(\naccuracy\n))\n\n\n\n\n\n\n\n1\nAccuracy\n:\n \n0.6612754632\n\n\n\n\n\n\n\n1\n2\n3\n# create a confusion matrix\n\n\nprediction\n \n=\n \nclf\n.\npredict\n(\nX_test\n)\n\n\nprint\n(\nprediction\n)\n\n\n\n\n\n\n\n1\n['Male' 'Male' 'Male' ..., 'Male' 'Male' 'Female']\n\n\n\n\n\n\n1\n2\n3\n# test\n\n\ncm\n \n=\n \nconfusion_matrix\n(\nprediction\n,\n \nY_test\n)\n\n\nprint\n(\ncm\n)\n\n\n\n\n\n\n\n1\n2\n[[ 674  721]\n\n \n[2588 5786]]\n\n\n\n\n\n\n\nIntermediate level (Additional)\n\u00b6\n\n\nPrincipal Component Analysis\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \npandas\n \nas\n \npd\n\n\nfrom\n \nsklearn.decomposition\n \nimport\n \nPCA\n\n\nfrom\n \nsklearn.preprocessing\n \nimport\n \nLabelEncoder\n\n\n\n# import the adult.txt file into Python\n\n\ndata\n \n=\n \npd\n.\nread_csv\n(\n'data/adults.txt'\n,\n \nsep\n=\n','\n)\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n# convert the string labels to numeric labels\n\n\nfor\n \nlabel\n \nin\n \n[\n'race'\n,\n \n'occupation'\n,\n \n'sex'\n]:\n\n    \ndata\n[\nlabel\n]\n \n=\n \nLabelEncoder\n()\n.\nfit_transform\n(\ndata\n[\nlabel\n])\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race  sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4    1          2174   \n1  Married-civ-spouse           4        Husband     4    1             0   \n2            Divorced           6  Not-in-family     4    1             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n\n\n\n1\nprint\n(\ndata\n.\nshape\n)\n\n\n\n\n\n\n\n1\n(32561, 15)\n\n\n\n\n\n\n1\n2\n# print one variable\n\n\nprint\n(\ndata\n.\nsex\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n0    1\n1    1\n2    1\nName: sex, dtype: int64\n\n\n\n\n\n\n1\n2\n# % Male\n\n\nsum\n(\ndata\n.\nsex\n)\n/\nlen\n(\ndata\n)\n\n\n\n\n\n\n\n1\n0.66920549123184181\n\n\n\n\n\n\n1\n2\n# take the fields of interest and plug them into variable X\n\n\nX\n \n=\n \ndata\n[[\n'age'\n,\n \n'final_weight'\n,\n \n'education_num'\n,\n \n'occupation'\n,\n \n'race'\n,\n \n'capital_gain'\n,\n \n'hours_per_week'\n]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# create a regular PCA model \n\n\n# tell the model to only keep two components.\n\n\npca\n \n=\n \nPCA\n(\nn_components\n=\n2\n)\n\n\n\n# Fit and transform the data to the model\n\n\nreduced_data_pca\n \n=\n \npca\n.\nfit_transform\n(\nX\n)\n\n\n\n# Inspect the shape\n\n\nprint\n(\nreduced_data_pca\n.\nshape\n)\n\n\n\n\n\n\n\n1\n(32561, 2)\n\n\n\n\n\n\n1\n2\n# Print out the data (array)\n\n\nprint\n(\nreduced_data_pca\n[\n0\n:\n3\n])\n\n\n\n\n\n\n\n1\n2\n3\n[[-112262.33316766   -1099.76011639]\n\n \n[-106467.39923916    1074.41772634]\n\n \n[  25867.60075685    1078.43450794]]\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n%\npylab\n \ninline\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nx\n \n=\n \nreduced_data_pca\n[:,\n \n0\n]\n\n\ny\n \n=\n \nreduced_data_pca\n[:,\n \n1\n]\n\n\n\nplt\n.\nscatter\n(\nx\n,\n \ny\n)\n\n\n\nplt\n.\nxlabel\n(\n'First Principal Component'\n)\n\n\nplt\n.\nylabel\n(\n'Second Principal Component'\n)\n\n\nplt\n.\ntitle\n(\n\"PCA Scatter Plot\"\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\n\n\n1\n2\nmale\n \n=\n \n[\ndata\n.\nsex\n \n==\n \n1\n][\n0\n:\n3\n]\n\n\ntype\n(\nmale\n)\n\n\n\n\n\n\n\n1\nlist\n\n\n\n\n\n\n1\n2\n# Is Male?\n\n\nmale\n[\n0\n][\n0\n:\n3\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\n0    True\n1    True\n2    True\nName: sex, dtype: bool\n\n\n\n\n\n\n1\n2\n3\n4\nfemale\n \n=\n \n[\ndata\n.\nsex\n \n==\n \n0\n][\n0\n:\n3\n]\n\n\n\n# Is Female?\n\n\nfemale\n[\n0\n][\n0\n:\n3\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\n0    False\n1    False\n2    False\nName: sex, dtype: bool\n\n\n\n\n\n\n1\n2\nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\ncolors\n)):\n\n    \nprint\n(\ni\n)\n\n\n\n\n\n\n\n1\n2\n0\n1\n\n\n\n\n\n\n1\n2\ndata\n.\nsex\n \n=\n \ndata\n.\nsex\n.\nastype\n(\nint\n)\n\n\ndata\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nage\n\n      \nworkclass\n\n      \nfinal_weight\n\n      \neducation\n\n      \neducation_num\n\n      \nmarital_status\n\n      \noccupation\n\n      \nrelationship\n\n      \nrace\n\n      \nsex\n\n      \ncapital_gain\n\n      \ncapital_loss\n\n      \nhours_per_week\n\n      \nnative_country\n\n      \nsalary\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n39\n\n      \nState-gov\n\n      \n77516\n\n      \nBachelors\n\n      \n13\n\n      \nNever-married\n\n      \n1\n\n      \nNot-in-family\n\n      \n4\n\n      \n1\n\n      \n2174\n\n      \n0\n\n      \n40\n\n      \nUnited-States\n\n      \n<=50K\n\n    \n\n    \n\n      \n1\n\n      \n50\n\n      \nSelf-emp-not-inc\n\n      \n83311\n\n      \nBachelors\n\n      \n13\n\n      \nMarried-civ-spouse\n\n      \n4\n\n      \nHusband\n\n      \n4\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n13\n\n      \nUnited-States\n\n      \n<=50K\n\n    \n\n    \n\n      \n2\n\n      \n38\n\n      \nPrivate\n\n      \n215646\n\n      \nHS-grad\n\n      \n9\n\n      \nDivorced\n\n      \n6\n\n      \nNot-in-family\n\n      \n4\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n40\n\n      \nUnited-States\n\n      \n<=50K\n\n    \n\n  \n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\ncolors\n \n=\n \n[\n'blue'\n,\n \n          \n'red'\n]\n\n\n\n# colors = ['black','blue','purple','yellow','white','red','lime','cyan','orange','gray']\n\n\n\n# 0 Female, blue\n\n\n# 1 Male, red\n\n\nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\ncolors\n)):\n\n    \nx\n \n=\n \nreduced_data_pca\n[:,\n \n0\n]\n*\n[\ndata\n.\nsex\n \n==\n \ni\n]\n\n    \ny\n \n=\n \nreduced_data_pca\n[:,\n \n1\n]\n*\n[\ndata\n.\nsex\n \n==\n \ni\n]\n\n    \nplt\n.\nscatter\n(\nx\n,\n \ny\n,\n \nc\n=\ncolors\n[\ni\n])\n \n\n\n# 0 Female, 1 Male\n\n\nplt\n.\nlegend\n([\n'Female'\n,\n'Male'\n],\n \n           \nbbox_to_anchor\n=\n(\n1.05\n,\n \n1\n),\n \n           \nloc\n=\n2\n,\n \n           \nborderaxespad\n=\n0.\n)\n\n\n\nplt\n.\nxlabel\n(\n'First Principal Component'\n)\n\n\nplt\n.\nylabel\n(\n'Second Principal Component'\n)\n\n\nplt\n.\ntitle\n(\n\"PCA Scatter Plot\"\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nSupport Vector Machines\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \npandas\n \nas\n \npd\n\n\nfrom\n \nsklearn\n \nimport\n \nsvm\n\n\nfrom\n \nsklearn.preprocessing\n \nimport\n \nLabelEncoder\n\n\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\nfrom\n \nsklearn.metrics\n \nimport\n \nconfusion_matrix\n\n\n\n# import the adult.txt file into Python\n\n\ndata\n \n=\n \npd\n.\nread_csv\n(\n'data/adults.txt'\n,\n \nsep\n=\n','\n)\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n# convert the string labels to numeric labels\n\n\nfor\n \nlabel\n \nin\n \n[\n'race'\n,\n \n'occupation'\n]:\n\n    \ndata\n[\nlabel\n]\n \n=\n \nLabelEncoder\n()\n.\nfit_transform\n(\ndata\n[\nlabel\n])\n\n\nprint\n(\ndata\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# take the fields of interest and plug them into variable X\n\n\nX\n \n=\n \ndata\n[[\n'race'\n,\n \n'hours_per_week'\n,\n \n'occupation'\n]]\n\n\n\n# make sure to provide the corresponding truth value\n\n\nY\n \n=\n \ndata\n[\n'sex'\n]\n.\nvalues\n.\ntolist\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# split the data into a test (30%) and train set (70%)\n\n\nX_train\n,\n \nX_test\n,\n \nY_train\n,\n \nY_test\n \n=\n \ntrain_test_split\n(\nX\n,\n \nY\n,\n \ntest_size\n=\n0.3\n)\n\n\n\n# Create the SVC model\n\n\nclf\n \n=\n \nsvm\n.\nSVC\n(\ngamma\n=\n0.001\n,\n \nC\n=\n100.\n,\n \nkernel\n=\n'linear'\n)\n\n\n\n# Fit the data to the SVC model\n\n\nclf\n \n=\n \nclf\n.\nfit\n(\nX_train\n,\n \nY_train\n)\n\n\n\n\n\n\n\n1\n2\n3\n# validate the classifier\n\n\naccuracy\n \n=\n \nclf\n.\nscore\n(\nX_test\n,\n \nY_test\n)\n\n\nprint\n(\n'Accuracy: '\n \n+\n \nstr\n(\naccuracy\n))\n\n\n\n\n\n\n\n1\n2\n3\n# create a confusion matrix\n\n\nprediction\n \n=\n \nclf\n.\npredict\n(\nX_test\n)\n\n\nprint\n(\nprediction\n)\n\n\n\n\n\n\n\n1\n2\n3\n# test\n\n\ncm\n \n=\n \nconfusion_matrix\n(\nprediction\n,\n \nY_test\n)\n\n\nprint\n(\ncm\n)\n\n\n\n\n\n\n\nA little application\n\u00b6\n\n\nAppend each result in a dictionary\n\n\n1\n2\n3\nindex\n \n=\n \nnp\n.\nargmax\n([\nacc_model1\n,\n \nacc_model2\n])\n\n\nclassifiers\n \n=\n \n{\n0\n:\n \n'model1'\n,\n \n1\n:\n \n'model2}\n\n\nprint\n(\n'Best classifier is {}'\n.\nformat\n(\nclassifiers\n[\nindex\n]))",
            "title": "Overview of scikit-learn"
        },
        {
            "location": "/Overview_of_scikit-learn/#basic-level",
            "text": "",
            "title": "Basic level"
        },
        {
            "location": "/Overview_of_scikit-learn/#hard-coded-dataset",
            "text": "1\n2\n3\n4\n5\n6\n7 # [height, weight, shoe_size]  X   =   [[ 181 ,   80 ,   44 ],   [ 177 ,   70 ,   43 ],   [ 160 ,   60 ,   38 ],   [ 154 ,   54 ,   37 ],   [ 166 ,   65 ,   40 ], \n      [ 190 ,   90 ,   47 ],   [ 175 ,   64 ,   39 ], \n      [ 177 ,   70 ,   40 ],   [ 159 ,   55 ,   37 ],   [ 171 ,   75 ,   42 ],   [ 181 ,   85 ,   43 ]]  Y   =   [ 'male' ,   'male' ,   'female' ,   'female' ,   'male' ,   'male' ,   'female' ,   'female' , \n      'female' ,   'male' ,   'male' ]",
            "title": "Hard-coded dataset"
        },
        {
            "location": "/Overview_of_scikit-learn/#decision-tree",
            "text": "1\n2\n3\n4\n5\n6\n7 # import decision tree  from   sklearn   import   tree  # train on the train set  clf   =   tree . DecisionTreeClassifier ()  clf   =   clf . fit ( X , Y )    1\n2\n3 # test  prediction   =   clf . predict ([[ 190 ,   70 ,   43 ]])  print ( prediction )    1 ['male']",
            "title": "Decision tree"
        },
        {
            "location": "/Overview_of_scikit-learn/#random-forests",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 from   sklearn.ensemble   import   RandomForestClassifier  from   sklearn.preprocessing   import   LabelEncoder  from   sklearn.cross_validation   import   train_test_split  from   sklearn.metrics   import   confusion_matrix  # set the training parameters  clf   =   RandomForestClassifier ( n_estimators = 1000 )  # train on the same train set  clf   =   clf . fit ( X , Y )  # validate the classifier  accuracy   =   clf . score ( X ,   Y )  print ( 'Accuracy: '   +   str ( accuracy ))    1 Accuracy :   1.0    1\n2\n3 # test  prediction   =   clf . predict ([[ 190 ,   70 ,   43 ]])  print ( prediction )    1 ['male']",
            "title": "Random Forests"
        },
        {
            "location": "/Overview_of_scikit-learn/#k-nearest-neighbours",
            "text": "1\n2\n3\n4\n5\n6\n7 from   sklearn.neighbors   import   KNeighborsClassifier  # set the training parameters  neigh   =   KNeighborsClassifier ( n_neighbors = 3 )  # train on the same train set  neigh . fit ( X , Y )    1\n2\n3 KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n           metric_params=None, n_jobs=1, n_neighbors=3, p=2,\n           weights='uniform')   1\n2\n3 # test  prediction   =   neigh . predict ([[ 190 ,   70 ,   43 ]])  print ( prediction )    1 ['male']",
            "title": "k-Nearest Neighbours"
        },
        {
            "location": "/Overview_of_scikit-learn/#logistic-regression",
            "text": "1\n2\n3\n4\n5\n6\n7 from   sklearn.linear_model   import   LogisticRegression  # set the training parameters  neigh   =   LogisticRegression ()  # train on the same train set  neigh . fit ( X ,   Y )    1\n2\n3\n4 LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)   1\n2\n3 # test  prediction   =   neigh . predict ([[ 190 ,   70 ,   43 ]])  print ( prediction )    1 ['female']",
            "title": "Logistic regression"
        },
        {
            "location": "/Overview_of_scikit-learn/#naive-bayes",
            "text": "1\n2\n3\n4\n5\n6\n7 from   sklearn.naive_bayes   import   GaussianNB  # set the training parameters  gnb   =   GaussianNB ()  # train on the same train set  gnb   =   gnb . fit ( X ,   Y )    1\n2\n3 # test  prediction   =   gnb . predict ([[ 190 ,   70 ,   43 ]])  print ( prediction )    1 ['male']",
            "title": "Na\u00efve Bayes"
        },
        {
            "location": "/Overview_of_scikit-learn/#intermediate-level",
            "text": "",
            "title": "Intermediate level"
        },
        {
            "location": "/Overview_of_scikit-learn/#imported-dataset",
            "text": "",
            "title": "Imported dataset"
        },
        {
            "location": "/Overview_of_scikit-learn/#decision-tree_1",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 import   pandas   as   pd  from   sklearn   import   tree  from   sklearn.preprocessing   import   LabelEncoder  from   sklearn.cross_validation   import   train_test_split  from   sklearn.metrics   import   confusion_matrix  # import the adult.txt file into Python  data   =   pd . read_csv ( 'data/adults.txt' ,   sep = ',' )  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K   1 len ( data )    1 32561   1 data . shape    1 (32561, 15)   1 data . info ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 <class 'pandas.core.frame.DataFrame'>\nRangeIndex: 32561 entries, 0 to 32560\nData columns (total 15 columns):\nage               32561 non-null int64\nworkclass         32561 non-null object\nfinal_weight      32561 non-null int64\neducation         32561 non-null object\neducation_num     32561 non-null int64\nmarital_status    32561 non-null object\noccupation        32561 non-null object\nrelationship      32561 non-null object\nrace              32561 non-null object\nsex               32561 non-null object\ncapital_gain      32561 non-null int64\ncapital_loss      32561 non-null int64\nhours_per_week    32561 non-null int64\nnative_country    32561 non-null object\nsalary            32561 non-null object\ndtypes: int64(6), object(9)\nmemory usage: 3.7+ MB   1\n2\n3\n4 # convert the string labels to numeric labels  for   label   in   [ 'race' ,   'occupation' ]: \n     data [ label ]   =   LabelEncoder () . fit_transform ( data [ label ])  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K   1\n2\n3\n4\n5 # take the fields of interest and plug them into variable X  X   =   data [[ 'race' ,   'hours_per_week' ,   'occupation' ]]  # make sure to provide the corresponding truth value  Y   =   data [ 'sex' ] . values . tolist ()    1\n2\n3\n4\n5\n6\n7\n8 # split the data into a test (30%) and train set (70%)  X_train ,   X_test ,   Y_train ,   Y_test   =   train_test_split ( X ,   Y ,   test_size = 0.3 )  # set the training parameters, instantiate the classifier  clf   =   tree . DecisionTreeClassifier ()  # train on the train set  clf   =   clf . fit ( X_train ,   Y_train )    1\n2\n3 # validate the classifier  accuracy   =   clf . score ( X_test ,   Y_test )  print ( 'Accuracy: '   +   str ( accuracy ))    1 Accuracy :   0.727198280274    1\n2\n3 # test  prediction   =   clf . predict ( X_test )  print ( prediction )    1 ['Female' 'Female' 'Male' ..., 'Male' 'Male' 'Male']   1\n2\n3 # create a confusion matrix  cm   =   confusion_matrix ( prediction ,   Y_test )  print ( cm )    1\n2 [[1613 1037] \n  [1628 5491]]",
            "title": "Decision tree"
        },
        {
            "location": "/Overview_of_scikit-learn/#random-forests_1",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 import   pandas   as   pd  from   sklearn.ensemble   import   RandomForestClassifier  from   sklearn.preprocessing   import   LabelEncoder  from   sklearn.cross_validation   import   train_test_split  from   sklearn.metrics   import   confusion_matrix  # import the adult.txt file into Python  data   =   pd . read_csv ( 'data/adults.txt' ,   sep = ',' )  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K   1\n2\n3\n4 # convert the string labels to numeric labels  for   label   in   [ 'race' ,   'occupation' ]: \n     data [ label ]   =   LabelEncoder () . fit_transform ( data [ label ])  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K   1\n2\n3\n4\n5 # take the fields of interest and plug them into variable X  X   =   data [[ 'race' ,   'hours_per_week' ,   'occupation' ]]  # make sure to provide the corresponding truth value  Y   =   data [ 'sex' ] . values . tolist ()    1\n2\n3\n4\n5\n6\n7\n8 # split the data into a test (30%) and train set (70%)  X_train ,   X_test ,   Y_train ,   Y_test   =   train_test_split ( X ,   Y ,   test_size = 0.3 )  # set the training parameters  clf   =   RandomForestClassifier ( n_estimators = 1000 )  # train on the train set  clf   =   clf . fit ( X_train ,   Y_train )    1\n2\n3 # validate the classifier  accuracy   =   clf . score ( X_test ,   Y_test )  print ( 'Accuracy: '   +   str ( accuracy ))    1 Accuracy :   0.738765482649    1\n2\n3 # test  prediction   =   clf . predict ( X_test )  print ( prediction )    1 ['Male' 'Female' 'Male' ..., 'Female' 'Male' 'Female']   1\n2\n3 # create a confusion matrix  cm   =   confusion_matrix ( prediction ,   Y_test )  print ( cm )    1\n2 [[1568  970] \n  [1582 5649]]",
            "title": "Random Forests"
        },
        {
            "location": "/Overview_of_scikit-learn/#random-forests-with-the-iris-dataset",
            "text": "Iris dataset.  1\n2\n3\n4\n5\n6\n7 from   sklearn.cross_validation   import   cross_val_score ,   train_test_split  import   numpy   as   np  from   sklearn   import   datasets  from   sklearn.ensemble   import   RandomForestClassifier  from   sklearn   import   preprocessing  iris   =   datasets . load_iris ()    1\n2\n3\n4\n5\n6 # feature scaling  min_max_scaler   =   preprocessing . MinMaxScaler ()  X   =   min_max_scaler . fit_transform ( iris . data )  # train on the train set  clf   =   RandomForestClassifier ( n_estimators = 200 )       1\n2\n3\n4 # test our classifier  scores   =   cross_val_score ( clf ,   X ,   iris . target ,   cv = 5 )  print ( \"Accuracy:  %0.2f  (+/-  %0.2f )\"   %   ( scores . mean (),   scores . std ()   *   2 ))    1 Accuracy :   0.97   (+/-   0.04 )",
            "title": "Random Forests (with the Iris dataset)"
        },
        {
            "location": "/Overview_of_scikit-learn/#k-nearest-neighbours_1",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 import   pandas   as   pd  from   sklearn.neighbors   import   KNeighborsClassifier  from   sklearn.preprocessing   import   LabelEncoder  from   sklearn.cross_validation   import   train_test_split  from   sklearn.metrics   import   confusion_matrix  # Import the adult.txt file into Python  data   =   pd . read_csv ( 'data/adults.txt' ,   sep = ',' )  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K   1\n2\n3\n4 # convert the string labels to numeric labels  for   label   in   [ 'race' ,   'occupation' ]: \n     data [ label ]   =   LabelEncoder () . fit_transform ( data [ label ])  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K   1\n2\n3\n4\n5 # take the fields of interest and plug them into variable X  X   =   data [[ 'race' ,   'hours_per_week' ,   'occupation' ]]  # make sure to provide the corresponding truth value  Y   =   data [ 'sex' ] . values . tolist ()    1\n2\n3\n4\n5\n6\n7\n8 # split the data into a test (30%) and train set (70%)  X_train ,   X_test ,   Y_train ,   Y_test   =   train_test_split ( X ,   Y ,   test_size = 0.3 )  # set the training parameters, instantiate the classifier  clf   =   KNeighborsClassifier ( n_neighbors = 3 )  # train on the train set  clf   =   clf . fit ( X_train ,   Y_train )    1\n2\n3 # validate the classifier  accuracy   =   clf . score ( X_test ,   Y_test )  print ( 'Accuracy: '   +   str ( accuracy ))    1 Accuracy :   0.68113420002    1\n2 # create a confusion matrix  prediction   =   clf . predict ( X_test )    1\n2\n3 # test  cm   =   confusion_matrix ( prediction ,   Y_test )  print ( cm )    1\n2 [[1694 1591] \n  [1524 4960]]",
            "title": "k-Nearest Neighbours"
        },
        {
            "location": "/Overview_of_scikit-learn/#logistic-regression_1",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 import   pandas   as   pd  from   sklearn.linear_model   import   LogisticRegression  from   sklearn.preprocessing   import   LabelEncoder  from   sklearn.cross_validation   import   train_test_split  from   sklearn.metrics   import   confusion_matrix  # import the adult.txt file into Python  data   =   pd . read_csv ( 'data/adults.txt' ,   sep = ',' )  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K   1\n2\n3\n4 # convert the string labels to numeric labels  for   label   in   [ 'race' ,   'occupation' ]: \n     data [ label ]   =   LabelEncoder () . fit_transform ( data [ label ])  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K   1\n2\n3\n4\n5 # take the fields of interest and plug them into variable X  X   =   data [[ 'race' ,   'hours_per_week' ,   'occupation' ]]  # make sure to provide the corresponding truth value  Y   =   data [ 'sex' ] . values . tolist ()    1\n2\n3\n4\n5\n6\n7\n8 # split the data into a test (30%) and train set (70%)  X_train ,   X_test ,   Y_train ,   Y_test   =   train_test_split ( X ,   Y ,   test_size = 0.3 )  # set the training parameters, instantiate the classifier  clf   =   LogisticRegression ()  # train on the train set  clf   =   clf . fit ( X_train ,   Y_train )    1\n2\n3 # validate the classifier  accuracy   =   clf . score ( X_test ,   Y_test )  print ( 'Accuracy: '   +   str ( accuracy ))    1 Accuracy :   0.669259903777    1\n2\n3 # create a confusion matrix  prediction   =   clf . predict ( X_test )  print ( prediction )    1 ['Male' 'Male' 'Male' ..., 'Female' 'Female' 'Male']   1\n2\n3 # test  cm   =   confusion_matrix ( prediction ,   Y_test )  print ( cm )    1\n2 [[ 459  419] \n  [2812 6079]]",
            "title": "Logistic regression"
        },
        {
            "location": "/Overview_of_scikit-learn/#naive-bayes_1",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 import   pandas   as   pd  from   sklearn.naive_bayes   import   GaussianNB  from   sklearn.preprocessing   import   LabelEncoder  from   sklearn.cross_validation   import   train_test_split  from   sklearn.metrics   import   confusion_matrix  # import the adult.txt file into Python  data   =   pd . read_csv ( 'data/adults.txt' ,   sep = ',' )  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K   1\n2\n3\n4 # convert the string labels to numeric labels  for   label   in   [ 'race' ,   'occupation' ]: \n     data [ label ]   =   LabelEncoder () . fit_transform ( data [ label ])  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K   1\n2\n3\n4\n5 # take the fields of interest and plug them into variable X  X   =   data [[ 'race' ,   'hours_per_week' ,   'occupation' ]]  # make sure to provide the corresponding truth value  Y   =   data [ 'sex' ] . values . tolist ()    1\n2\n3\n4\n5\n6\n7\n8 # split the data into a test (30%) and train set (70%)  X_train ,   X_test ,   Y_train ,   Y_test   =   train_test_split ( X ,   Y ,   test_size = 0.3 )  # set the training parameters, instantiate the classifier  clf   =   GaussianNB ()  # train on the train set  clf   =   clf . fit ( X_train ,   Y_train )    1\n2\n3 # validate the classifier  accuracy   =   clf . score ( X_test ,   Y_test )  print ( 'Accuracy: '   +   str ( accuracy ))    1 Accuracy :   0.6612754632    1\n2\n3 # create a confusion matrix  prediction   =   clf . predict ( X_test )  print ( prediction )    1 ['Male' 'Male' 'Male' ..., 'Male' 'Male' 'Female']   1\n2\n3 # test  cm   =   confusion_matrix ( prediction ,   Y_test )  print ( cm )    1\n2 [[ 674  721] \n  [2588 5786]]",
            "title": "Na\u00efve Bayes"
        },
        {
            "location": "/Overview_of_scikit-learn/#intermediate-level-additional",
            "text": "",
            "title": "Intermediate level (Additional)"
        },
        {
            "location": "/Overview_of_scikit-learn/#principal-component-analysis",
            "text": "1\n2\n3\n4\n5\n6\n7 import   pandas   as   pd  from   sklearn.decomposition   import   PCA  from   sklearn.preprocessing   import   LabelEncoder  # import the adult.txt file into Python  data   =   pd . read_csv ( 'data/adults.txt' ,   sep = ',' )  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K   1\n2\n3\n4 # convert the string labels to numeric labels  for   label   in   [ 'race' ,   'occupation' ,   'sex' ]: \n     data [ label ]   =   LabelEncoder () . fit_transform ( data [ label ])  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race  sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4    1          2174   \n1  Married-civ-spouse           4        Husband     4    1             0   \n2            Divorced           6  Not-in-family     4    1             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K   1 print ( data . shape )    1 (32561, 15)   1\n2 # print one variable  print ( data . sex . head ( 3 ))    1\n2\n3\n4 0    1\n1    1\n2    1\nName: sex, dtype: int64   1\n2 # % Male  sum ( data . sex ) / len ( data )    1 0.66920549123184181   1\n2 # take the fields of interest and plug them into variable X  X   =   data [[ 'age' ,   'final_weight' ,   'education_num' ,   'occupation' ,   'race' ,   'capital_gain' ,   'hours_per_week' ]]    1\n2\n3\n4\n5\n6\n7\n8\n9 # create a regular PCA model   # tell the model to only keep two components.  pca   =   PCA ( n_components = 2 )  # Fit and transform the data to the model  reduced_data_pca   =   pca . fit_transform ( X )  # Inspect the shape  print ( reduced_data_pca . shape )    1 (32561, 2)   1\n2 # Print out the data (array)  print ( reduced_data_pca [ 0 : 3 ])    1\n2\n3 [[-112262.33316766   -1099.76011639] \n  [-106467.39923916    1074.41772634] \n  [  25867.60075685    1078.43450794]]     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 % pylab   inline  import   matplotlib.pyplot   as   plt  x   =   reduced_data_pca [:,   0 ]  y   =   reduced_data_pca [:,   1 ]  plt . scatter ( x ,   y )  plt . xlabel ( 'First Principal Component' )  plt . ylabel ( 'Second Principal Component' )  plt . title ( \"PCA Scatter Plot\" )  plt . show ()    1 Populating the interactive namespace from numpy and matplotlib    1\n2 male   =   [ data . sex   ==   1 ][ 0 : 3 ]  type ( male )    1 list   1\n2 # Is Male?  male [ 0 ][ 0 : 3 ]    1\n2\n3\n4 0    True\n1    True\n2    True\nName: sex, dtype: bool   1\n2\n3\n4 female   =   [ data . sex   ==   0 ][ 0 : 3 ]  # Is Female?  female [ 0 ][ 0 : 3 ]    1\n2\n3\n4 0    False\n1    False\n2    False\nName: sex, dtype: bool   1\n2 for   i   in   range ( len ( colors )): \n     print ( i )    1\n2 0\n1   1\n2 data . sex   =   data . sex . astype ( int )  data . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       age \n       workclass \n       final_weight \n       education \n       education_num \n       marital_status \n       occupation \n       relationship \n       race \n       sex \n       capital_gain \n       capital_loss \n       hours_per_week \n       native_country \n       salary \n     \n   \n   \n     \n       0 \n       39 \n       State-gov \n       77516 \n       Bachelors \n       13 \n       Never-married \n       1 \n       Not-in-family \n       4 \n       1 \n       2174 \n       0 \n       40 \n       United-States \n       <=50K \n     \n     \n       1 \n       50 \n       Self-emp-not-inc \n       83311 \n       Bachelors \n       13 \n       Married-civ-spouse \n       4 \n       Husband \n       4 \n       1 \n       0 \n       0 \n       13 \n       United-States \n       <=50K \n     \n     \n       2 \n       38 \n       Private \n       215646 \n       HS-grad \n       9 \n       Divorced \n       6 \n       Not-in-family \n       4 \n       1 \n       0 \n       0 \n       40 \n       United-States \n       <=50K \n     \n       1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 colors   =   [ 'blue' ,  \n           'red' ]  # colors = ['black','blue','purple','yellow','white','red','lime','cyan','orange','gray']  # 0 Female, blue  # 1 Male, red  for   i   in   range ( len ( colors )): \n     x   =   reduced_data_pca [:,   0 ] * [ data . sex   ==   i ] \n     y   =   reduced_data_pca [:,   1 ] * [ data . sex   ==   i ] \n     plt . scatter ( x ,   y ,   c = colors [ i ])   # 0 Female, 1 Male  plt . legend ([ 'Female' , 'Male' ],  \n            bbox_to_anchor = ( 1.05 ,   1 ),  \n            loc = 2 ,  \n            borderaxespad = 0. )  plt . xlabel ( 'First Principal Component' )  plt . ylabel ( 'Second Principal Component' )  plt . title ( \"PCA Scatter Plot\" )  plt . show ()",
            "title": "Principal Component Analysis"
        },
        {
            "location": "/Overview_of_scikit-learn/#support-vector-machines",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 import   pandas   as   pd  from   sklearn   import   svm  from   sklearn.preprocessing   import   LabelEncoder  from   sklearn.cross_validation   import   train_test_split  from   sklearn.metrics   import   confusion_matrix  # import the adult.txt file into Python  data   =   pd . read_csv ( 'data/adults.txt' ,   sep = ',' )  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K   1\n2\n3\n4 # convert the string labels to numeric labels  for   label   in   [ 'race' ,   'occupation' ]: \n     data [ label ]   =   LabelEncoder () . fit_transform ( data [ label ])  print ( data . head ( 3 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14    age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K   1\n2\n3\n4\n5 # take the fields of interest and plug them into variable X  X   =   data [[ 'race' ,   'hours_per_week' ,   'occupation' ]]  # make sure to provide the corresponding truth value  Y   =   data [ 'sex' ] . values . tolist ()    1\n2\n3\n4\n5\n6\n7\n8 # split the data into a test (30%) and train set (70%)  X_train ,   X_test ,   Y_train ,   Y_test   =   train_test_split ( X ,   Y ,   test_size = 0.3 )  # Create the SVC model  clf   =   svm . SVC ( gamma = 0.001 ,   C = 100. ,   kernel = 'linear' )  # Fit the data to the SVC model  clf   =   clf . fit ( X_train ,   Y_train )    1\n2\n3 # validate the classifier  accuracy   =   clf . score ( X_test ,   Y_test )  print ( 'Accuracy: '   +   str ( accuracy ))    1\n2\n3 # create a confusion matrix  prediction   =   clf . predict ( X_test )  print ( prediction )    1\n2\n3 # test  cm   =   confusion_matrix ( prediction ,   Y_test )  print ( cm )",
            "title": "Support Vector Machines"
        },
        {
            "location": "/Overview_of_scikit-learn/#a-little-application",
            "text": "Append each result in a dictionary  1\n2\n3 index   =   np . argmax ([ acc_model1 ,   acc_model2 ])  classifiers   =   { 0 :   'model1' ,   1 :   'model2}  print ( 'Best classifier is {}' . format ( classifiers [ index ]))",
            "title": "A little application"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/",
            "text": "CONTENT\n\n\nLoad and explore the Wine dataset\n\n\nk-Nearest Neighbours\n\n\nMeasure performance\n\n\nTrain-test split and performance in practice\n\n\n\n\n\n\nPreprocessing: scaling and centering the data\n\n\nk-NN: scaling in practice\n\n\nScale the data\n\n\nRun the k-NN\n\n\nMeasure the performance\n\n\n\n\n\n\nk-NN Recap\n\n\nWithout scaling\n\n\nWith scaling\n\n\n\n\n\n\nLinear regression\n\n\nLogistic regression (Logit)\n\n\nWith random numbers\n\n\nWith the Wine dataset\n\n\nScale the data\n\n\nRun the Logit and measure the performance\n\n\n\n\n\n\nLogit Recap\n\n\nWithout scaling\n\n\n\n\n\n\nNoise and scaling\n\n\nPlotting the synthesized data\n\n\nk-Nearest Neighbours\n\n\nScale the data, run the k-NN, and measure the performance\n\n\nAdd noise to the signal\n\n\nRun the k-NN and measure the performance\n\n\nScale the data, add noise, run the k-NN, and measure the performance\n\n\n\n\n\n\nNoise strength vs. accuracy (and the need for scaling)\n\n\nLogit (Repeat the k-NN procedure)\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nLoad and explore the Wine dataset\n\u00b6\n\n\nWe use the \nwine quality dataset\n related to red and white vinho verde wine samples, from the north of Portugal.\n\n\n1\n2\n3\n4\n5\n6\n7\n# import the modules\n\n\n%\npylab\n \ninline\n\n\nimport\n \npandas\n \nas\n \npd\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# set the style\n\n\nplt\n.\nstyle\n.\nuse\n(\n'ggplot'\n)\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\n1\n2\n3\n# import the data\n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\n'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv '\n \n,\n \nsep\n \n=\n \n';'\n)\n\n\ndf\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nfixed acidity\n\n      \nvolatile acidity\n\n      \ncitric acid\n\n      \nresidual sugar\n\n      \nchlorides\n\n      \nfree sulfur dioxide\n\n      \ntotal sulfur dioxide\n\n      \ndensity\n\n      \npH\n\n      \nsulphates\n\n      \nalcohol\n\n      \nquality\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n7.4\n\n      \n0.70\n\n      \n0.00\n\n      \n1.9\n\n      \n0.076\n\n      \n11.0\n\n      \n34.0\n\n      \n0.9978\n\n      \n3.51\n\n      \n0.56\n\n      \n9.4\n\n      \n5\n\n    \n\n    \n\n      \n1\n\n      \n7.8\n\n      \n0.88\n\n      \n0.00\n\n      \n2.6\n\n      \n0.098\n\n      \n25.0\n\n      \n67.0\n\n      \n0.9968\n\n      \n3.20\n\n      \n0.68\n\n      \n9.8\n\n      \n5\n\n    \n\n    \n\n      \n2\n\n      \n7.8\n\n      \n0.76\n\n      \n0.04\n\n      \n2.3\n\n      \n0.092\n\n      \n15.0\n\n      \n54.0\n\n      \n0.9970\n\n      \n3.26\n\n      \n0.65\n\n      \n9.8\n\n      \n5\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# drop target variable\n\n\n# only keep the values; the DataFrame becomes a simple array (matrix)\n\n\n# index (axis=0 / \u2018index\u2019) or columns (axis=1 / \u2018columns\u2019).\n\n\nX\n \n=\n \ndf\n.\ndrop\n(\n'quality'\n \n,\n \naxis\n=\n1\n)\n.\nvalues\n\n\n\n# print the array\n\n\nprint\n(\nX\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ]\n\n \n[  7.8     0.88    0.    ...,   3.2     0.68    9.8  ]\n\n \n[  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ]\n\n \n..., \n\n \n[  6.3     0.51    0.13  ...,   3.42    0.75   11.   ]\n\n \n[  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ]\n\n \n[  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]\n\n\n\n\n\n\n\nThe last column is gone from the array. Make it a list instead (or a single-row array).\n\n\n1\n2\n3\n4\ny1\n \n=\n \ndf\n[\n'quality'\n]\n.\nvalues\n\n\n\n# print the single-row array\n\n\nprint\n(\ny1\n)\n\n\n\n\n\n\n\n1\n[5 5 5 ..., 6 5 6]\n\n\n\n\n\n\n1\n2\n# row, col of the DataFrame\n\n\ndf\n.\nshape\n\n\n\n\n\n\n\n1\n(1599, 12)\n\n\n\n\n\n\n1\n2\n3\n4\n# plot all the columns or variables\n\n\npd\n.\nDataFrame\n.\nhist\n(\ndf\n,\n \nfigsize\n \n=\n \n[\n15\n,\n15\n]);\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nNotice the range of each variable; some are wider.\n\n\nAny algorithm, such as k-NN, which cares about the distance between data points. This motivates scaling our data.\n\n\nLet us turn it into a two-category variable consisting of \u2018good\u2019 (rating > 5) & \u2018bad\u2019 (rating <= 5) qualities.\n\n\n1\nprint\n(\ny1\n)\n\n\n\n\n\n\n\n1\n[5 5 5 ..., 6 5 6]\n\n\n\n\n\n\n1\n2\n3\n# is the rating <= 5 ?\n\n\ny\n \n=\n \ny1\n \n<=\n \n5\n\n\nprint\n(\ny\n)\n\n\n\n\n\n\n\n1\n[ True  True  True ..., False  True False]\n\n\n\n\n\n\nTrue\n is worth 1 and \nFalse\n is worth 0.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n# plot two histograms\n\n\n# the original target variable\n\n\n# and the aggregated target variable\n\n\nplt\n.\nfigure\n(\nfigsize\n=\n(\n20\n,\n5\n));\n\n\n\n# left plot\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n1\n \n);\n\n\nplt\n.\nhist\n(\ny1\n);\n\n\nplt\n.\nxlabel\n(\n'original target value'\n)\n\n\nplt\n.\nylabel\n(\n'count'\n)\n\n\n\n# right plot\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n2\n);\n\n\nplt\n.\nhist\n(\ny\n)\n\n\nplt\n.\nxlabel\n(\n'aggregated target value'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nAgain, on the right histogram, \nTrue\n = 1 and \nFalse\n = 0.\n\n\nk-Nearest Neighbours\n\u00b6\n\n\nMeasure performance\n\u00b6\n\n\nAccuracy\n is the default scoring method for both\n\n\n\n\nk-Nearest Neighbours and\n\n\nlogistic regression.\n\n\n\n\n\n\n\\text{Accuracy}=\\frac{\\text{Number of Correct Predictions}}{\\text{Total Number of Predictions}}\n\n\n\\text{Accuracy}=\\frac{\\text{Number of Correct Predictions}}{\\text{Total Number of Predictions}}\n\n\n\n\nAccuracy is commonly defined for binary classification problems in terms of true positives & false negatives. It can also be defined in terms of a \nconfusion matrix\n. \n\n\nOther measures\n of model performance are derived from the confusion matrix: \nprecision\n (true positives divided by the number of true & false positives) and \nrecall\n (number of true positives divided by the number of true positives plus the number of false negatives). \n\n\nThe \nF1-score\n is the harmonic mean of the precision and the recall.\n\n\nTrain-test split and performance in practice\n\u00b6\n\n\nThe rule of thumb is to use approximately \n\n\n\n\n80% of the data for training (train set) and\n\n\n20% for testing (test set).\n\n\n\n\n1\n2\n3\n4\n5\n6\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\n\nX_train\n,\n \nX_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nX\n,\n \n                                                    \ny\n,\n \n                                                    \ntest_size\n=\n0.2\n,\n \n                                                    \nrandom_state\n=\n42\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# the k-NN model\n\n\nfrom\n \nsklearn\n \nimport\n \nneighbors\n,\n \nlinear_model\n\n\n\nknn\n \n=\n \nneighbors\n.\nKNeighborsClassifier\n(\nn_neighbors\n \n=\n \n5\n)\n\n\nknn_model_1\n \n=\n \nknn\n.\nfit\n(\nX_train\n,\n \ny_train\n)\n\n\n\n\n\n\n\n1\n2\nprint\n(\n'k-NN score for test set: \n%f\n'\n \n%\n \nknn_model_1\n.\nscore\n(\nX_test\n,\n \ny_test\n))\n\n\nprint\n(\n'k-NN score for training set: \n%f\n'\n \n%\n \nknn_model_1\n.\nscore\n(\nX_train\n,\n \ny_train\n))\n\n\n\n\n\n\n\n1\n2\nk-NN score for test set: 0.612500\nk-NN score for training set: 0.774042\n\n\n\n\n\n\nThe accuracy, more specifically the test accuracy, is not great.\n\n\nLet us print out all the \nother\n performance measures for the test set.\n\n\n1\n2\n3\n4\nfrom\n \nsklearn.metrics\n \nimport\n \nclassification_report\n\n\n\ny_true\n,\n \ny_pred\n \n=\n \ny_test\n,\n \nknn_model_1\n.\npredict\n(\nX_test\n)\n\n\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n             precision    recall  f1-score   support\n\n      False       0.66      0.64      0.65       179\n       True       0.56      0.57      0.57       141\n\navg / total       0.61      0.61      0.61       320\n\n\n\n\n\n\nOther\n performance measures for the train set.\n\n\n1\n2\ny_true\n,\n \ny_pred\n \n=\n \ny_train\n,\n \nknn_model_1\n.\npredict\n(\nX_train\n)\n\n\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n             precision    recall  f1-score   support\n\n      False       0.80      0.76      0.78       676\n       True       0.75      0.79      0.77       603\n\navg / total       0.78      0.77      0.77      1279\n\n\n\n\n\n\nThese underperformances might come from the spread in the variables. The range of each variable is different; some are wider.\n\n\nPreprocessing: scaling and centering the data\n\u00b6\n\n\nPreprocessing happens before running any model, such as a regression (predicting a continuous variable) or a classification (predicting a discrete variable) using one or another model (k-NN, logistic, decision tree, random forests etc.).\n\n\nFor numerical variables, it is common to either normalize or standardize the data.\n\n\nNormalization\n: \nscaling\n a dataset so that its minimum is 0 and its maximum 1.\n\n\n\n\nx_{normalized} = \\frac{x-x_{min}}{x_{max}-x_{min}}\n\n\nx_{normalized} = \\frac{x-x_{min}}{x_{max}-x_{min}}\n\n\n\n\nStardardization\n: \ncentering\n the data around 0 and to scale with respect to the standard deviation.\n\n\n\n\nx_{standardized} = \\frac{x-\\mu}{\\sigma}\n\n\nx_{standardized} = \\frac{x-\\mu}{\\sigma}\n\n\n\n\nwhere \n\\mu\n\\mu\n and \n\\sigma\n\\sigma\n are the mean and standard deviation of the dataset.\n\n\nThere are other transformatoions, such as the log transformation or the Box-Cox transformation, to make the data look more Gaussian or a normally distributed.\n\n\nk-NN: scaling in practice\n\u00b6\n\n\nScale the data\n\u00b6\n\n\n1\nprint\n(\nX\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ]\n\n \n[  7.8     0.88    0.    ...,   3.2     0.68    9.8  ]\n\n \n[  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ]\n\n \n..., \n\n \n[  6.3     0.51    0.13  ...,   3.42    0.75   11.   ]\n\n \n[  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ]\n\n \n[  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nfrom\n \nsklearn.preprocessing\n \nimport\n \nscale\n\n\n\n# minimum is 0 and its maximum 1\n\n\nXs\n \n=\n \nscale\n(\nX\n)\n\n\nprint\n(\nXs\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n[[-0.52835961  0.96187667 -1.39147228 ...,  1.28864292 -0.57920652\n  -0.96024611]\n [-0.29854743  1.96744245 -1.39147228 ..., -0.7199333   0.1289504\n  -0.58477711]\n [-0.29854743  1.29706527 -1.18607043 ..., -0.33117661 -0.04808883\n  -0.58477711]\n ..., \n [-1.1603431  -0.09955388 -0.72391627 ...,  0.70550789  0.54204194\n   0.54162988]\n [-1.39015528  0.65462046 -0.77526673 ...,  1.6773996   0.30598963\n  -0.20930812]\n [-1.33270223 -1.21684919  1.02199944 ...,  0.51112954  0.01092425\n   0.54162988]]\n\n\n\n\n\n\nRun the k-NN\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\n\n# split\n\n\n# 80% of the data for training (train set)\n\n\n# 20% for testing (test set)\n\n\nXs_train\n,\n \nXs_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nXs\n,\n\n                                                      \ny\n,\n\n                                                      \ntest_size\n=\n0.2\n,\n\n                                                      \nrandom_state\n=\n42\n)\n\n\n\n\n\n\n\n1\n2\n# Run\n\n\nknn_model_2\n \n=\n \nknn\n.\nfit\n(\nXs_train\n,\n \ny_train\n)\n\n\n\n\n\n\n\nMeasure the performance\n\u00b6\n\n\n1\n2\nprint\n(\n'k-NN score for test set: \n%f\n'\n \n%\n \nknn_model_2\n.\nscore\n(\nXs_test\n,\n \ny_test\n))\n\n\nprint\n(\n'k-NN score for training set: \n%f\n'\n \n%\n \nknn_model_2\n.\nscore\n(\nXs_train\n,\n \ny_train\n))\n\n\n\n\n\n\n\n1\n2\nk-NN score for test set: 0.712500\nk-NN score for training set: 0.814699\n\n\n\n\n\n\n1\n2\n3\n4\ny_true\n,\n \ny_pred\n \n=\n \ny_test\n,\n \nknn_model_2\n.\npredict\n(\nXs_test\n)\n\n\n\n# Test set\n\n\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n             precision    recall  f1-score   support\n\n      False       0.72      0.79      0.75       179\n       True       0.70      0.62      0.65       141\n\navg / total       0.71      0.71      0.71       320\n\n\n\n\n\n\n1\n2\n3\n4\ny_true\n,\n \ny_pred\n \n=\n \ny_train\n,\n \nknn_model_2\n.\npredict\n(\nXs_train\n)\n\n\n\n# Train set\n\n\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n             precision    recall  f1-score   support\n\n      False       0.80      0.86      0.83       676\n       True       0.83      0.77      0.80       603\n\navg / total       0.82      0.81      0.81      1279\n\n\n\n\n\n\nNormalization-scaling improves the performance compare to the previous \nclassification_report\n.\n\n\nk-NN Recap\n\u00b6\n\n\nWithout scaling\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n# Set sc = False \n\n\n# Do not scale the features \n\n\nsc\n \n=\n \nFalse\n\n\n# Set the number of k in k-NN\n\n\nnk\n \n=\n \n5\n\n\n\n# Load data \n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\n'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv '\n \n,\n \nsep\n \n=\n \n';'\n)\n \n\n# Drop target variable \n\n\nX\n \n=\n \ndf\n.\ndrop\n(\n'quality'\n \n,\n \n1\n)\n.\nvalues\n\n\n\n# Scale, if desired \n\n\nif\n \nsc\n \n==\n \nTrue\n:\n \n  \nX\n \n=\n \nscale\n(\nX\n)\n \n\n\n# Target value \n\n\ny1\n \n=\n \ndf\n[\n'quality'\n]\n.\nvalues\n \n# original target variable \n\n\n# New target variable: is the rating <= 5?\n\n\ny\n \n=\n \ny1\n \n<=\n \n5\n \n\n\n# Split (80/20) the data into a test set and a train set\n\n\n# X_train, X_test, y_train, y_test \n\n\nX_train\n,\n \nX_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nX\n,\n\n                                                    \ny\n,\n\n                                                    \ntest_size\n=\n0.2\n,\n\n                                                    \nrandom_state\n=\n42\n)\n \n\n\n# Train the k-NN model\n\n\nknn\n \n=\n \nneighbors\n.\nKNeighborsClassifier\n(\nn_neighbors\n \n=\n \nnk\n)\n\n\nknn_model\n \n=\n \nknn\n.\nfit\n(\nX_train\n,\n \ny_train\n)\n\n\n\n# Print performance on the test set \n\n\nprint\n(\n'k-NN accuracy for test set: \n%f\n'\n \n%\n \nknn_model\n.\nscore\n(\nX_test\n,\n \ny_test\n))\n\n\ny_true\n,\n \ny_pred\n \n=\n \ny_test\n,\n \nknn_model\n.\npredict\n(\nX_test\n)\n \n\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nk-NN accuracy for test set: 0.612500\n             precision    recall  f1-score   support\n\n      False       0.66      0.64      0.65       179\n       True       0.56      0.57      0.57       141\n\navg / total       0.61      0.61      0.61       320\n\n\n\n\n\n\nWith scaling\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n# Set sc = True \n\n\n# to scale the features \n\n\nsc\n \n=\n \nTrue\n\n\n# Set the number of k in k-NN\n\n\nnk\n \n=\n \n5\n\n\n\n# Load data \n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\n'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv '\n \n,\n \nsep\n \n=\n \n';'\n)\n \n\n# Drop target variable \n\n\nX\n \n=\n \ndf\n.\ndrop\n(\n'quality'\n \n,\n \n1\n)\n.\nvalues\n\n\n\n# Scale, if desired \n\n\nif\n \nsc\n \n==\n \nTrue\n:\n \n  \nX\n \n=\n \nscale\n(\nX\n)\n \n\n\n# Target value \n\n\ny1\n \n=\n \ndf\n[\n'quality'\n]\n.\nvalues\n \n# original target variable \n\n\n# New target variable: is the rating <= 5?\n\n\ny\n \n=\n \ny1\n \n<=\n \n5\n \n\n\n# Split (80/20) the data into a test set and a train set\n\n\n# X_train, X_test, y_train, y_test \n\n\nX_train\n,\n \nX_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nX\n,\n\n                                                    \ny\n,\n\n                                                    \ntest_size\n=\n0.2\n,\n\n                                                    \nrandom_state\n=\n42\n)\n \n\n\n# Train the k-NN model\n\n\nknn\n \n=\n \nneighbors\n.\nKNeighborsClassifier\n(\nn_neighbors\n \n=\n \nnk\n)\n\n\nknn_model\n \n=\n \nknn\n.\nfit\n(\nX_train\n,\n \ny_train\n)\n\n\n\n# Print performance on the test set \n\n\nprint\n(\n'k-NN accuracy for test set: \n%f\n'\n \n%\n \nknn_model\n.\nscore\n(\nX_test\n,\n \ny_test\n))\n\n\ny_true\n,\n \ny_pred\n \n=\n \ny_test\n,\n \nknn_model\n.\npredict\n(\nX_test\n)\n \n\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nk-NN accuracy for test set: 0.712500\n             precision    recall  f1-score   support\n\n      False       0.72      0.79      0.75       179\n       True       0.70      0.62      0.65       141\n\navg / total       0.71      0.71      0.71       320\n\n\n\n\n\n\nLinear regression\n\u00b6\n\n\nBefore addressing an alternative to k-NN, the logistic regression or Logit, let us briefly review the linear regresion with a different dataset.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Import necessary packages\n\n\n%\npylab\n \ninline\n\n\nimport\n \npandas\n \nas\n \npd\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n# set the style\n\n\nplt\n.\nstyle\n.\nuse\n(\n'ggplot'\n)\n\n\n\n# Import nmore packages\n\n\nfrom\n \nsklearn\n \nimport\n \ndatasets\n\n\nfrom\n \nsklearn\n \nimport\n \nlinear_model\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# Load the data\n\n\n# The data is part of the scikit-learn module\n\n\nboston\n \n=\n \ndatasets\n.\nload_boston\n()\n\n\nyb\n \n=\n \nboston\n.\ntarget\n.\nreshape\n(\n-\n1\n,\n \n1\n)\n\n\nXb\n \n=\n \nboston\n[\n'data'\n][:,\n5\n]\n.\nreshape\n(\n-\n1\n,\n \n1\n)\n\n\n\nprint\n(\nyb\n[:\n10\n])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n[[ 24. ]\n\n \n[ 21.6]\n\n \n[ 34.7]\n\n \n[ 33.4]\n\n \n[ 36.2]\n\n \n[ 28.7]\n\n \n[ 22.9]\n\n \n[ 27.1]\n\n \n[ 16.5]\n\n \n[ 18.9]]\n\n\n\n\n\n\n\n1\nprint\n(\nXb\n[:\n10\n])\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n[[ 6.575]\n\n \n[ 6.421]\n\n \n[ 7.185]\n\n \n[ 6.998]\n\n \n[ 7.147]\n\n \n[ 6.43 ]\n\n \n[ 6.012]\n\n \n[ 6.172]\n\n \n[ 5.631]\n\n \n[ 6.004]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n# Plot data\n\n\nplt\n.\nscatter\n(\nXb\n,\nyb\n)\n\n\nplt\n.\nylabel\n(\n'value of house /1000 ($)'\n)\n\n\nplt\n.\nxlabel\n(\n'number of rooms'\n)\n\n\n\n\n\n\n\n1\n<matplotlib.text.Text at 0x7f3681ae90b8>\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Create linear regression object\n\n\nregr\n \n=\n \nlinear_model\n.\nLinearRegression\n()\n\n\n\n# Train the model using the training sets\n\n\nregr\n.\nfit\n(\n \nXb\n,\n \nyb\n)\n\n\n\n\n\n\n\n1\nLinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Plot outputs\n\n\nplt\n.\nscatter\n(\nXb\n,\n \nyb\n,\n  \ncolor\n=\n'black'\n)\n\n\nplt\n.\nplot\n(\nXb\n,\n \nregr\n.\npredict\n(\nXb\n),\n \ncolor\n=\n'blue'\n,\n\n         \nlinewidth\n=\n3\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nLogistic regression (Logit)\n\u00b6\n\n\nWith random numbers\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n# Synthesize data\n\n\nX1\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\nsize\n=\n150\n)\n\n\ny1\n \n=\n \n(\nX1\n \n>\n \n0\n)\n.\nastype\n(\nnp\n.\nfloat\n)\n\n\nX1\n[\nX1\n \n>\n \n0\n]\n \n*=\n \n4\n\n\nX1\n \n+=\n \n.\n3\n \n*\n \nnp\n.\nrandom\n.\nnormal\n(\nsize\n=\n150\n)\n\n\nX1\n \n=\n \nX1\n.\nreshape\n(\n-\n1\n,\n \n1\n)\n\n\n\n\n\n\n\n1\n2\n3\n# Run the classifier\n\n\nclf\n \n=\n \nlinear_model\n.\nLogisticRegression\n()\n\n\nclf\n.\nfit\n(\nX1\n,\n \ny1\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\nLogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)\n\n\n\n\n\n\n1\nX1\n[:\n10\n]\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\narray([[-0.74466839],\n       [ 0.47335714],\n       [-1.94951938],\n       [ 0.12078443],\n       [-1.62121705],\n       [-2.23684396],\n       [ 7.66984914],\n       [-0.31941781],\n       [-1.07205326],\n       [ 0.85413978]])\n\n\n\n\n\n\n1\n2\n3\n4\n# Order X1\n\n\nX1_ordered\n \n=\n \nsorted\n(\nX1\n,\n \nreverse\n=\nFalse\n)\n\n\n\nX1_ordered\n[:\n10\n]\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n[array([-3.29826361]),\n array([-2.76292445]),\n array([-2.23684396]),\n array([-1.96629089]),\n array([-1.94951938]),\n array([-1.87501025]),\n array([-1.83321548]),\n array([-1.73611093]),\n array([-1.62121705]),\n array([-1.61885181])]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Plot the result\n\n\nplt\n.\nscatter\n(\nX1\n.\nravel\n(),\n \ny1\n,\n \ncolor\n=\n'black'\n,\n \nzorder\n=\n20\n \n,\n \nalpha\n \n=\n \n0.5\n)\n\n\nplt\n.\nplot\n(\nX1_ordered\n,\n \nclf\n.\npredict_proba\n(\nX1_ordered\n)[:,\n1\n],\n \ncolor\n=\n'blue'\n \n,\n \nlinewidth\n \n=\n \n3\n)\n\n\nplt\n.\nylabel\n(\n'target variable'\n)\n\n\nplt\n.\nxlabel\n(\n'predictor variable'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nWith the Wine dataset\n\u00b6\n\n\n1\n2\n3\n4\n# Load data\n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\n'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv '\n \n,\n \nsep\n \n=\n \n';'\n)\n\n\n\ndf\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nfixed acidity\n\n      \nvolatile acidity\n\n      \ncitric acid\n\n      \nresidual sugar\n\n      \nchlorides\n\n      \nfree sulfur dioxide\n\n      \ntotal sulfur dioxide\n\n      \ndensity\n\n      \npH\n\n      \nsulphates\n\n      \nalcohol\n\n      \nquality\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n7.4\n\n      \n0.70\n\n      \n0.00\n\n      \n1.9\n\n      \n0.076\n\n      \n11.0\n\n      \n34.0\n\n      \n0.9978\n\n      \n3.51\n\n      \n0.56\n\n      \n9.4\n\n      \n5\n\n    \n\n    \n\n      \n1\n\n      \n7.8\n\n      \n0.88\n\n      \n0.00\n\n      \n2.6\n\n      \n0.098\n\n      \n25.0\n\n      \n67.0\n\n      \n0.9968\n\n      \n3.20\n\n      \n0.68\n\n      \n9.8\n\n      \n5\n\n    \n\n    \n\n      \n2\n\n      \n7.8\n\n      \n0.76\n\n      \n0.04\n\n      \n2.3\n\n      \n0.092\n\n      \n15.0\n\n      \n54.0\n\n      \n0.9970\n\n      \n3.26\n\n      \n0.65\n\n      \n9.8\n\n      \n5\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Drop target variable\n\n\nX\n \n=\n \ndf\n.\ndrop\n(\n'quality'\n \n,\n \n1\n)\n.\nvalues\n\n\n\n# Print the array\n\n\nprint\n(\nX\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ]\n\n \n[  7.8     0.88    0.    ...,   3.2     0.68    9.8  ]\n\n \n[  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ]\n\n \n..., \n\n \n[  6.3     0.51    0.13  ...,   3.42    0.75   11.   ]\n\n \n[  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ]\n\n \n[  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]\n\n\n\n\n\n\n\nThe last column is gone.\n\n\n1\n2\n3\n4\ny1\n \n=\n \ndf\n[\n'quality'\n]\n.\nvalues\n\n\n\n# Print the single-row array\n\n\nprint\n(\ny1\n)\n\n\n\n\n\n\n\n1\n[5 5 5 ..., 6 5 6]\n\n\n\n\n\n\n1\ndf\n.\nshape\n\n\n\n\n\n\n\n1\n(1599, 12)\n\n\n\n\n\n\n1\n2\n3\n4\n# plot the other columns or variables\n\n\npd\n.\nDataFrame\n.\nhist\n(\ndf\n,\n \nfigsize\n \n=\n \n[\n15\n,\n15\n]);\n\n\n\nplt\n.\nshow\n()\n \n# facultative in Jypyter\n\n\n\n\n\n\n\n\n\nLet us turn it into a two-category variable consisting of \u2018good\u2019 (rating > 5) & \u2018bad\u2019 (rating <= 5) qualities.\n\n\n1\n2\n3\n# is the rating <= 5 ?\n\n\ny\n \n=\n \ny1\n \n<=\n \n5\n\n\nprint\n(\ny\n)\n\n\n\n\n\n\n\n1\n[ True  True  True ..., False  True False]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\n\n# split\n\n\n# 80% of the data for training (train set)\n\n\n# 20% for testing (test set)\n\n\nX_train\n,\n \nX_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nX\n,\n\n                                                    \ny\n,\n\n                                                    \ntest_size\n=\n0.2\n,\n\n                                                    \nrandom_state\n=\n42\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\nfrom\n \nsklearn\n \nimport\n \nlinear_model\n\n\n\n# Initial logistic regression model\n\n\nlr\n \n=\n \nlinear_model\n.\nLogisticRegression\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Fit the model\n\n\nlr\n \n=\n \nlr\n.\nfit\n(\nX_train\n,\n \ny_train\n)\n\n\ny_true\n,\n \ny_pred\n \n=\n \ny_train\n,\n \nlr\n.\npredict\n(\nX_train\n)\n\n\n\n# Evaluate the train set\n\n\nprint\n(\n'Logistic Regression score for train set: \n%f\n'\n \n%\n \nlr\n.\nscore\n(\nX_train\n,\n \ny_train\n))\n\n\n\n\n\n\n\n1\nLogistic Regression score for train set: 0.752932\n\n\n\n\n\n\n1\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n             precision    recall  f1-score   support\n\n      False       0.77      0.75      0.76       676\n       True       0.73      0.75      0.74       603\n\navg / total       0.75      0.75      0.75      1279\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom\n \nsklearn.metrics\n \nimport\n \nclassification_report\n\n\n\n# Use the test set\n\n\ny_true\n,\n \ny_pred\n \n=\n \ny_test\n,\n \nlr\n.\npredict\n(\nX_test\n)\n\n\n\n# Evaluate the test set\n\n\nprint\n(\n'Logistic Regression score for test set: \n%f\n'\n \n%\n \nlr\n.\nscore\n(\nX_test\n,\n \ny_test\n))\n\n\n\n\n\n\n\n1\nLogistic Regression score for test set: 0.740625\n\n\n\n\n\n\n1\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n             precision    recall  f1-score   support\n\n      False       0.78      0.74      0.76       179\n       True       0.69      0.74      0.71       141\n\navg / total       0.74      0.74      0.74       320\n\n\n\n\n\n\nNote\n: the logistic regression performs better than k-NN without scaling.\n\n\nScale the data\n\u00b6\n\n\n1\nprint\n(\nX\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ]\n\n \n[  7.8     0.88    0.    ...,   3.2     0.68    9.8  ]\n\n \n[  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ]\n\n \n..., \n\n \n[  6.3     0.51    0.13  ...,   3.42    0.75   11.   ]\n\n \n[  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ]\n\n \n[  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]\n\n\n\n\n\n\n\n1\n2\n3\n4\nfrom\n \nsklearn.preprocessing\n \nimport\n \nscale\n\n\n\nXs\n \n=\n \nscale\n(\nX\n)\n\n\nprint\n(\nXs\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n[[-0.52835961  0.96187667 -1.39147228 ...,  1.28864292 -0.57920652\n  -0.96024611]\n [-0.29854743  1.96744245 -1.39147228 ..., -0.7199333   0.1289504\n  -0.58477711]\n [-0.29854743  1.29706527 -1.18607043 ..., -0.33117661 -0.04808883\n  -0.58477711]\n ..., \n [-1.1603431  -0.09955388 -0.72391627 ...,  0.70550789  0.54204194\n   0.54162988]\n [-1.39015528  0.65462046 -0.77526673 ...,  1.6773996   0.30598963\n  -0.20930812]\n [-1.33270223 -1.21684919  1.02199944 ...,  0.51112954  0.01092425\n   0.54162988]]\n\n\n\n\n\n\nRun the Logit and measure the performance\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\n\n# Split 80/20\n\n\nXs_train\n,\n \nXs_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nXs\n,\n\n                                                      \ny\n,\n\n                                                      \ntest_size\n=\n0.2\n,\n\n                                                      \nrandom_state\n=\n42\n)\n\n\n\n\n\n\n\n1\n2\n# Run the logistic regression model\n\n\nlr_2\n \n=\n \nlr\n.\nfit\n(\nXs_train\n,\n \ny_train\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Fit the model\n\n\ny_true\n,\n \ny_pred\n \n=\n \ny_train\n,\n \nlr_2\n.\npredict\n(\nXs_train\n)\n\n\n\n# Evaluate the train set\n\n\nprint\n(\n'Logistic Regression score for train set: \n%f\n'\n \n%\n \nlr_2\n.\nscore\n(\nXs_train\n,\n \ny_train\n))\n\n\n\n\n\n\n\n1\nLogistic Regression score for train set: 0.752150\n\n\n\n\n\n\n1\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n             precision    recall  f1-score   support\n\n      False       0.77      0.76      0.76       676\n       True       0.73      0.75      0.74       603\n\navg / total       0.75      0.75      0.75      1279\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Use the test set\n\n\ny_true\n,\n \ny_pred\n \n=\n \ny_test\n,\n \nlr_2\n.\npredict\n(\nXs_test\n)\n\n\n\n# Evaluate the test set\n\n\nprint\n(\n'Logistic Regression score for test set: \n%f\n'\n \n%\n \nlr_2\n.\nscore\n(\nXs_test\n,\n \ny_test\n))\n\n\n\n\n\n\n\n1\nLogistic Regression score for test set: 0.740625\n\n\n\n\n\n\n1\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n             precision    recall  f1-score   support\n\n      False       0.79      0.74      0.76       179\n       True       0.69      0.74      0.72       141\n\navg / total       0.74      0.74      0.74       320\n\n\n\n\n\n\nThis is very interesting! The performance of logistic regression did not improve with data scaling.\n\n\nPredictor variables with large ranges that do not effect the target variable, a regression algorithm will make the corresponding coefficients small so that they do not effect predictions so much.\n\n\nLogit Recap\n\u00b6\n\n\nWithout scaling\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n# Set sc = False\n\n\n# do not scale the features \n\n\nsc\n \n=\n \nFalse\n \n\n\n# Load the data \n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\n'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv '\n \n,\n \nsep\n \n=\n \n';'\n)\n \n\nX\n \n=\n \ndf\n.\ndrop\n(\n'quality'\n \n,\n \n1\n)\n.\nvalues\n \n# drop target variable \n\n\n\n# Scale, if desired \n\n\nif\n \nsc\n \n==\n \nTrue\n:\n \n  \nX\n \n=\n \nscale\n(\nX\n)\n \n\n\n# Target value \n\n\ny1\n \n=\n \ndf\n[\n'quality'\n]\n.\nvalues\n \n# original target variable \n\n\ny\n \n=\n \ny1\n \n<=\n \n5\n  \n# new target variable: is the rating <= 5? \n\n\n\n# Split (80/20) the data into a test set and a train\n\n\n# X_train, X_test, y_train, y_test\n\n\ntrain_test_split\n(\nX\n,\n \ny\n,\n \ntest_size\n=\n0.2\n,\n \nrandom_state\n=\n42\n)\n \n\n\n# Train logistic regression model \n\n\nlr\n \n=\n \nlinear_model\n.\nLogisticRegression\n()\n \n\nlr\n \n=\n \nlr\n.\nfit\n(\nX_train\n,\n \ny_train\n)\n \n\n\n# Print performance on the test set\n\n\nprint\n(\n'Logistic Regression score for training set: \n%f\n'\n \n%\n \nlr\n.\nscore\n(\nX_train\n,\n \ny_train\n))\n \n\ny_true\n,\n \ny_pred\n \n=\n \ny_test\n,\n \nlr\n.\npredict\n(\nX_test\n)\n \n\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nLogistic Regression score for training set: 0.752932\n             precision    recall  f1-score   support\n\n      False       0.78      0.74      0.76       179\n       True       0.69      0.74      0.71       141\n\navg / total       0.74      0.74      0.74       320\n\n\n\n\n\n\nNoise and scaling\n\u00b6\n\n\nThe noisier the symthesized data, the more important scaling will be.\n\n\nMeasurements can be in meters and and miles, with small or large ranges. If we scale the data, they end up being the same.\n\n\nscikit-learn\u2019s \nmake_blobs\n function to generate 2000 data points that are in 4 clusters (each data point has 2 predictor variables and 1 target variable).\n\n\n1\n%\npylab\n \ninline\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Generate some clustered data (blobs!)\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nsklearn.datasets.samples_generator\n \nimport\n \nmake_blobs\n\n\n\nn_samples\n=\n2000\n\n\nX\n,\n \ny\n \n=\n \nmake_blobs\n(\nn_samples\n,\n \ncenters\n=\n4\n,\n \nn_features\n=\n2\n,\n \nrandom_state\n=\n0\n)\n\n\n\nprint\n(\nX\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[-0.46530384  1.73299482]\n\n \n[-0.33963733  3.84220272]\n\n \n[ 2.25309569  0.99541446]\n\n \n..., \n\n \n[ 1.03616476  4.09126428]\n\n \n[-0.5901088   3.68821314]\n\n \n[ 2.30405277  4.20250584]]\n\n\n\n\n\n\n\n1\nprint\n(\ny\n)\n\n\n\n\n\n\n\n1\n[2 0 1 ..., 0 2 0]\n\n\n\n\n\n\nPlotting the synthesized data\n\u00b6\n\n\nEach axis is a predictor variable and the colour is a key to the target variable\n\n\nAll possible target variables are equally represented. In this case (or even if they are approximately equally represented), we say that the class y is balanced.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\nplt\n.\nstyle\n.\nuse\n(\n'ggplot'\n)\n\n\n\nplt\n.\nfigure\n(\nfigsize\n=\n(\n20\n,\n5\n));\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n1\n \n);\n\n\nplt\n.\nscatter\n(\nX\n[:,\n0\n]\n \n,\n \nX\n[:,\n1\n],\n  \nc\n \n=\n \ny\n,\n \nalpha\n \n=\n \n0.7\n);\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n2\n);\n\n\nplt\n.\nhist\n(\ny\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nPlot histograms of the features.\n\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \npandas\n \nas\n \npd\n\n\n\n# Convert to a DataFrame\n\n\ndf\n \n=\n \npd\n.\nDataFrame\n(\nX\n)\n\n\n\n# Plot it\n\n\npd\n.\nDataFrame\n.\nhist\n(\ndf\n,\n \nfigsize\n=\n(\n20\n,\n5\n))\n\n\n\n\n\n\n\n1\n2\narray([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f366d3dbba8>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x7f366d30ca58>]], dtype=object)\n\n\n\n\n\n\n\n\nSplit into test & train sets, and plot both sets (train set > test set; 80/20).\n\n\n1\n2\n3\n4\n5\n6\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\n\nX_train\n,\n \nX_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nX\n,\n\n                                                    \ny\n,\n\n                                                    \ntest_size\n=\n0.2\n,\n\n                                                    \nrandom_state\n=\n42\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nplt\n.\nfigure\n(\nfigsize\n=\n(\n20\n,\n5\n));\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n1\n \n);\n\n\nplt\n.\ntitle\n(\n'training set'\n)\n\n\nplt\n.\nscatter\n(\nX_train\n[:,\n0\n]\n \n,\n \nX_train\n[:,\n1\n],\n  \nc\n \n=\n \ny_train\n,\n \nalpha\n \n=\n \n0.7\n);\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n2\n);\n\n\nplt\n.\nscatter\n(\nX_test\n[:,\n0\n]\n \n,\n \nX_test\n[:,\n1\n],\n  \nc\n \n=\n \ny_test\n,\n \nalpha\n \n=\n \n0.7\n);\n\n\nplt\n.\ntitle\n(\n'test set'\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nk-Nearest Neighbours\n\u00b6\n\n\nLet\u2019s instantiate a k-Nearest Neighbours classifier and train it on our train set.\n\n\n1\n2\n3\n4\nfrom\n \nsklearn\n \nimport\n \nneighbors\n,\n \nlinear_model\n\n\n\nknn\n \n=\n \nneighbors\n.\nKNeighborsClassifier\n()\n\n\nknn_model\n \n=\n \nknn\n.\nfit\n(\nX_train\n,\n \ny_train\n)\n\n\n\n\n\n\n\nFit the \nknn_model\n to the test set and compute the accuracy.\n\n\n1\nknn_model\n.\nscore\n(\nX_test\n,\n \ny_test\n)\n\n\n\n\n\n\n\n1\n0.93500000000000005\n\n\n\n\n\n\n1\nprint\n(\n'k-NN score for test set: \n%f\n'\n \n%\n \nknn_model\n.\nscore\n(\nX_test\n,\n \ny_test\n))\n\n\n\n\n\n\n\n1\nk-NN score for test set: 0.935000\n\n\n\n\n\n\nCheck out a variety of other metrics.\n\n\n1\n2\n3\n4\nfrom\n \nsklearn.metrics\n \nimport\n \nclassification_report\n\n\n\ny_true\n,\n \ny_pred\n \n=\n \ny_test\n,\n \nknn_model\n.\npredict\n(\nX_test\n)\n\n\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n             precision    recall  f1-score   support\n\n          0       0.87      0.90      0.88       106\n          1       0.98      0.93      0.95       102\n          2       0.90      0.92      0.91       100\n          3       1.00      1.00      1.00        92\n\navg / total       0.94      0.94      0.94       400\n\n\n\n\n\n\nRe-fit \nknn_model\n to the train set and compute the accuracy.\n\n\n1\nprint\n(\n'k-NN score for train set: \n%f\n'\n \n%\n \nknn_model\n.\nscore\n(\nX_train\n,\n \ny_train\n))\n\n\n\n\n\n\n\n1\nk-NN score for train set: 0.941875\n\n\n\n\n\n\n1\n2\n3\n4\nfrom\n \nsklearn.metrics\n \nimport\n \nclassification_report\n\n\n\ny_true\n,\n \ny_pred\n \n=\n \ny_train\n,\n \nknn_model\n.\npredict\n(\nX_train\n)\n\n\nprint\n(\nclassification_report\n(\ny_true\n,\n \ny_pred\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n             precision    recall  f1-score   support\n\n          0       0.88      0.90      0.89       394\n          1       0.97      0.96      0.96       398\n          2       0.94      0.93      0.93       400\n          3       0.99      0.98      0.98       408\n\navg / total       0.94      0.94      0.94      1600\n\n\n\n\n\n\nScale the data, run the k-NN, and measure the performance\n\u00b6\n\n\n1\nprint\n(\nX\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[-0.46530384  1.73299482]\n\n \n[-0.33963733  3.84220272]\n\n \n[ 2.25309569  0.99541446]\n\n \n..., \n\n \n[ 1.03616476  4.09126428]\n\n \n[-0.5901088   3.68821314]\n\n \n[ 2.30405277  4.20250584]]\n\n\n\n\n\n\n\n1\n2\n3\n4\nfrom\n \nsklearn.preprocessing\n \nimport\n \nscale\n\n\n\nXs\n \n=\n \nscale\n(\nX\n)\n\n\nprint\n(\nXs\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[-0.26508542 -0.82638395]\n\n \n[-0.19594894 -0.0519305 ]\n\n \n[ 1.23046484 -1.09720678]\n\n \n..., \n\n \n[ 0.5609601   0.03951927]\n\n \n[-0.33374791 -0.10847199]\n\n \n[ 1.25849931  0.08036466]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\n\nXs_train\n,\n \nXs_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nXs\n,\n\n                                                      \ny\n,\n\n                                                      \ntest_size\n=\n0.2\n,\n\n                                                      \nrandom_state\n=\n42\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nplt\n.\nfigure\n(\nfigsize\n=\n(\n20\n,\n5\n));\n\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n1\n \n);\n\n\nplt\n.\nscatter\n(\nXs_train\n[:,\n0\n]\n \n,\n \nXs_train\n[:,\n1\n],\n  \nc\n \n=\n \ny_train\n,\n \nalpha\n \n=\n \n0.7\n);\n\n\nplt\n.\ntitle\n(\n'scaled training set'\n)\n\n\n\nplt\n.\nsubplot\n(\n1\n,\n \n2\n,\n \n2\n);\n\n\nplt\n.\nscatter\n(\nXs_test\n[:,\n0\n]\n \n,\n \nXs_test\n[:,\n1\n],\n  \nc\n \n=\n \ny_test\n,\n \nalpha\n \n=\n \n0.7\n);\n\n\nplt\n.\ntitle\n(\n'scaled test set'\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n1\n2\n3\nknn_model_s\n \n=\n \nknn\n.\nfit\n(\nXs_train\n,\n \ny_train\n)\n\n\n\nprint\n(\n'k-NN score for test set: \n%f\n'\n \n%\n \nknn_model_s\n.\nscore\n(\nXs_test\n,\n \ny_test\n))\n\n\n\n\n\n\n\n1\nk-NN score for test set: 0.935000\n\n\n\n\n\n\nIt doesn\u2019t perform any better with scaling.\n\n\nThis is most likely because both features were already around the same range.\n\n\nAdd noise to the signal\n\u00b6\n\n\nAdding a third variable of Gaussian noise with mean 0 and variable standard deviation \n\\sigma\n\\sigma\n. We call \n\\sigma\n\\sigma\n the strength of the noise and we see that the stronger the noise, the worse the performance of k-Nearest Neighbours.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Strength of noise term\n\n\nns\n \n=\n \n10\n**\n(\n3\n)\n\n\n\n# Add noise column to predictor variables\n\n\nnewcol\n \n=\n \nnp\n.\ntranspose\n([\nns\n*\nnp\n.\nrandom\n.\nrandn\n(\nn_samples\n)])\n\n\nXn\n \n=\n \nnp\n.\nconcatenate\n((\nX\n,\n \nnewcol\n),\n \naxis\n \n=\n \n1\n)\n\n\n\nprint\n(\nXn\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[ -4.65303843e-01   1.73299482e+00  -9.41949646e+01]\n\n \n[ -3.39637332e-01   3.84220272e+00  -1.00446506e+03]\n\n \n[  2.25309569e+00   9.95414462e-01   2.95697211e+02]\n\n \n..., \n\n \n[  1.03616476e+00   4.09126428e+00  -1.16020635e+02]\n\n \n[ -5.90108797e-01   3.68821314e+00   5.60244701e+02]\n\n \n[  2.30405277e+00   4.20250584e+00  -8.97600798e+02]]\n\n\n\n\n\n\n\nPlot the 3D data.\n\n\n1\n2\n3\n4\n5\nfrom\n \nmpl_toolkits.mplot3d\n \nimport\n \nAxes3D\n\n\n\nfig\n \n=\n \nplt\n.\nfigure\n(\nfigsize\n=\n(\n15\n,\n10\n))\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n,\n \nprojection\n=\n'3d'\n \n,\n \nalpha\n \n=\n \n0.5\n)\n\n\nax\n.\nscatter\n(\nXn\n[:,\n0\n],\n \nXn\n[:,\n1\n],\n \nXn\n[:,\n2\n],\n \nc\n \n=\n \ny\n)\n\n\n\n\n\n\n\n1\n<mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7f366d409cf8>\n\n\n\n\n\n\n\n\nRun the k-NN and measure the performance\n\u00b6\n\n\n1\n2\n3\n4\n5\n# Split into train-test sets\n\n\nXn_train\n,\n \nXn_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nXn\n,\n\n                                                      \ny\n,\n \n                                                      \ntest_size\n=\n0.2\n,\n \n                                                      \nrandom_state\n=\n42\n)\n\n\n\n\n\n\n\n1\n2\n3\n# Run the model\n\n\nknn\n \n=\n \nneighbors\n.\nKNeighborsClassifier\n()\n\n\nknn_model\n \n=\n \nknn\n.\nfit\n(\nXn_train\n,\n \ny_train\n)\n\n\n\n\n\n\n\n1\n2\n# Evaluate\n\n\nprint\n(\n'k-NN score for test set: \n%f\n'\n \n%\n \nknn_model\n.\nscore\n(\nXn_test\n,\n \ny_test\n))\n\n\n\n\n\n\n\n1\nk-NN score for test set: 0.337500\n\n\n\n\n\n\nHorrible!\n\n\nScale the data, add noise, run the k-NN, and measure the performance\n\u00b6\n\n\n1\n2\n3\n4\n# Scale\n\n\nXns\n \n=\n \nscale\n(\nXn\n)\n\n\n\nprint\n(\nXns\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[-0.26508542 -0.82638395 -0.07164275]\n\n \n[-0.19594894 -0.0519305  -0.98584539]\n\n \n[ 1.23046484 -1.09720678  0.31993383]\n\n \n..., \n\n \n[ 0.5609601   0.03951927 -0.09356271]\n\n \n[-0.33374791 -0.10847199  0.58562421]\n\n \n[ 1.25849931  0.08036466 -0.87851945]]\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n# Apply noise\n\n\ns\n \n=\n \nint\n(\n.\n2\n*\nn_samples\n)\n\n\nXns_train\n \n=\n \nXns\n[\ns\n:]\n\n\ny_train\n \n=\n \ny\n[\ns\n:]\n\n\nXns_test\n \n=\n \nXns\n[:\ns\n]\n\n\ny_test\n \n=\n \ny\n[:\ns\n]\n\n\n\n# Run the model\n\n\nknn\n \n=\n \nneighbors\n.\nKNeighborsClassifier\n()\n\n\nknn_models\n \n=\n \nknn\n.\nfit\n(\nXns_train\n,\n \ny_train\n)\n\n\n\n# Evaluate\n\n\nprint\n(\n'k-NN score for test set: \n%f\n'\n \n%\n \nknn_models\n.\nscore\n(\nXns_test\n,\n \ny_test\n))\n\n\n\n\n\n\n\n1\nk-NN score for test set: 0.917500\n\n\n\n\n\n\nAfter scaling the data, the model performs nearly as well as were there no noise introduced.\n\n\nNoise strength vs. accuracy (and the need for scaling)\n\u00b6\n\n\nHow the noise strength can effect model accuracy?\n\n\nCreate a function to split the data and run the model. \n\n\nUse the function in a loop.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ndef\n \naccu\n(\n \nX\n,\n \ny\n):\n\n    \nX_train\n,\n \nX_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nX\n,\n\n                                                        \ny\n,\n\n                                                        \ntest_size\n=\n0.2\n,\n\n                                                        \nrandom_state\n=\n42\n)\n\n\n    \nknn\n \n=\n \nneighbors\n.\nKNeighborsClassifier\n()\n\n    \nknn_model\n \n=\n \nknn\n.\nfit\n(\nX_train\n,\n \ny_train\n)\n\n\n    \nreturn\n(\nknn_model\n.\nscore\n(\nX_test\n,\n \ny_test\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Set the variables\n\n\nnoise\n \n=\n \n[\n10\n**\ni\n \nfor\n \ni\n \nin\n \nnp\n.\narange\n(\n0\n,\n6\n)]\n\n\nA1\n \n=\n \nnp\n.\nzeros\n(\nlen\n(\nnoise\n))\n\n\nA2\n \n=\n \nnp\n.\nzeros\n(\nlen\n(\nnoise\n))\n\n\ncount\n \n=\n \n0\n\n\n\n\n\n\n\n1\nprint\n(\nnoise\n)\n\n\n\n\n\n\n\n1\n[1, 10, 100, 1000, 10000, 100000]\n\n\n\n\n\n\n1\n2\nprint\n(\nA1\n)\n\n\nprint\n(\nA2\n)\n\n\n\n\n\n\n\n1\n2\n[ 0.  0.  0.  0.  0.  0.]\n\n\n[ 0.  0.  0.  0.  0.  0.]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Run the loop\n\n\nfor\n \nns\n \nin\n \nnoise\n:\n\n    \nnewcol\n \n=\n \nnp\n.\ntranspose\n([\nns\n*\nnp\n.\nrandom\n.\nrandn\n(\nn_samples\n)])\n\n    \nXn\n \n=\n \nnp\n.\nconcatenate\n((\nX\n,\n \nnewcol\n),\n \naxis\n \n=\n \n1\n)\n\n    \nXns\n \n=\n \nscale\n(\nXn\n)\n\n    \nA1\n[\ncount\n]\n \n=\n \naccu\n(\n \nXn\n,\n \ny\n)\n\n    \nA2\n[\ncount\n]\n \n=\n \naccu\n(\n \nXns\n,\n \ny\n)\n\n    \ncount\n \n+=\n \n1\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Plot the results\n\n\nplt\n.\nscatter\n(\n \nnoise\n,\n \nA1\n \n)\n\n\nplt\n.\nplot\n(\n \nnoise\n,\n \nA1\n,\n \nlabel\n \n=\n \n'unscaled'\n,\n \nlinewidth\n \n=\n \n2\n)\n\n\nplt\n.\nscatter\n(\n \nnoise\n,\n \nA2\n \n,\n \nc\n \n=\n \n'r'\n)\n\n\nplt\n.\nplot\n(\n \nnoise\n,\n \nA2\n \n,\n \nlabel\n \n=\n \n'scaled'\n,\n \nlinewidth\n \n=\n \n2\n)\n\n\nplt\n.\nxscale\n(\n'log'\n)\n\n\nplt\n.\nxlabel\n(\n'Noise strength'\n)\n\n\nplt\n.\nylabel\n(\n'Accuracy'\n)\n\n\nplt\n.\nlegend\n(\nloc\n=\n3\n);\n\n\n\n\n\n\n\n\n\n1\n2\nprint\n(\nA1\n)\n\n\nprint\n(\nA2\n)\n\n\n\n\n\n\n\n1\n2\n[ 0.9225  0.9175  0.8025  0.3275  0.22    0.2525]\n\n\n[ 0.91    0.9175  0.9325  0.9075  0.9325  0.92  ]\n\n\n\n\n\n\n\nThe more noise there is in the nuisance variable, the more important it is to scale the data for the k-NN model.\n\n\n\n\nMore noise, more scaling.\n\n\n\n\nLogit (Repeat the k-NN procedure)\n\u00b6\n\n\n1\n2\n3\n4\n5\n# Change the exponent of 10 to alter the amount of noise\n\n\nns\n \n=\n \n10\n**\n(\n3\n)\n \n# Strength of noise term\n\n\n\n# Set sc = True if we want to scale the features\n\n\nsc\n \n=\n \nTrue\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Import packages\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nsklearn.cross_validation\n \nimport\n \ntrain_test_split\n\n\nfrom\n \nsklearn\n \nimport\n \nneighbors\n,\n \nlinear_model\n\n\nfrom\n \nsklearn.preprocessing\n \nimport\n \nscale\n\n\nfrom\n \nsklearn.datasets.samples_generator\n \nimport\n \nmake_blobs\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Generate some data\n\n\nn_samples\n=\n2000\n\n\nX\n,\n \ny\n \n=\n \nmake_blobs\n(\nn_samples\n,\n \n                  \ncenters\n=\n4\n,\n \n                  \nn_features\n=\n2\n,\n\n                  \nrandom_state\n=\n0\n)\n\n\n\n\n\n\n\n1\n2\n3\n# Add noise column to predictor variables\n\n\nnewcol\n \n=\n \nnp\n.\ntranspose\n([\nns\n*\nnp\n.\nrandom\n.\nrandn\n(\nn_samples\n)])\n\n\nXn\n \n=\n \nnp\n.\nconcatenate\n((\nX\n,\n \nnewcol\n),\n \naxis\n \n=\n \n1\n)\n\n\n\n\n\n\n\n1\n2\n3\n# Scale if desired\n\n\nif\n \nsc\n \n==\n \nTrue\n:\n\n    \nXn\n \n=\n \nscale\n(\nXn\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Train model and test after splitting\n\n\nXn_train\n,\n \nXn_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nXn\n,\n \ny\n,\n \ntest_size\n=\n0.2\n,\n \nrandom_state\n=\n42\n)\n\n\nlr\n \n=\n \nlinear_model\n.\nLogisticRegression\n()\n\n\nlr_model\n \n=\n \nlr\n.\nfit\n(\nXn_train\n,\n \ny_train\n)\n\n\nprint\n(\n'logistic regression score for test set: \n%f\n'\n \n%\n \nlr_model\n.\nscore\n(\nXn_test\n,\n \ny_test\n))\n\n\n\n\n\n\n\n1\nlogistic regression score for test set: 0.942500",
            "title": "k-NN, Linear regression, Logit, Scaling, Centering, Noise"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nearest-neighbours",
            "text": "",
            "title": "k-Nearest Neighbours"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#measure-performance",
            "text": "Accuracy  is the default scoring method for both   k-Nearest Neighbours and  logistic regression.    \\text{Accuracy}=\\frac{\\text{Number of Correct Predictions}}{\\text{Total Number of Predictions}}  \\text{Accuracy}=\\frac{\\text{Number of Correct Predictions}}{\\text{Total Number of Predictions}}   Accuracy is commonly defined for binary classification problems in terms of true positives & false negatives. It can also be defined in terms of a  confusion matrix .   Other measures  of model performance are derived from the confusion matrix:  precision  (true positives divided by the number of true & false positives) and  recall  (number of true positives divided by the number of true positives plus the number of false negatives).   The  F1-score  is the harmonic mean of the precision and the recall.",
            "title": "Measure performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#train-test-split-and-performance-in-practice",
            "text": "The rule of thumb is to use approximately    80% of the data for training (train set) and  20% for testing (test set).   1\n2\n3\n4\n5\n6 from   sklearn.cross_validation   import   train_test_split  X_train ,   X_test ,   y_train ,   y_test   =   train_test_split ( X ,  \n                                                     y ,  \n                                                     test_size = 0.2 ,  \n                                                     random_state = 42 )    1\n2\n3\n4\n5 # the k-NN model  from   sklearn   import   neighbors ,   linear_model  knn   =   neighbors . KNeighborsClassifier ( n_neighbors   =   5 )  knn_model_1   =   knn . fit ( X_train ,   y_train )    1\n2 print ( 'k-NN score for test set:  %f '   %   knn_model_1 . score ( X_test ,   y_test ))  print ( 'k-NN score for training set:  %f '   %   knn_model_1 . score ( X_train ,   y_train ))    1\n2 k-NN score for test set: 0.612500\nk-NN score for training set: 0.774042   The accuracy, more specifically the test accuracy, is not great.  Let us print out all the  other  performance measures for the test set.  1\n2\n3\n4 from   sklearn.metrics   import   classification_report  y_true ,   y_pred   =   y_test ,   knn_model_1 . predict ( X_test )  print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6              precision    recall  f1-score   support\n\n      False       0.66      0.64      0.65       179\n       True       0.56      0.57      0.57       141\n\navg / total       0.61      0.61      0.61       320   Other  performance measures for the train set.  1\n2 y_true ,   y_pred   =   y_train ,   knn_model_1 . predict ( X_train )  print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6              precision    recall  f1-score   support\n\n      False       0.80      0.76      0.78       676\n       True       0.75      0.79      0.77       603\n\navg / total       0.78      0.77      0.77      1279   These underperformances might come from the spread in the variables. The range of each variable is different; some are wider.",
            "title": "Train-test split and performance in practice"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#preprocessing-scaling-and-centering-the-data",
            "text": "Preprocessing happens before running any model, such as a regression (predicting a continuous variable) or a classification (predicting a discrete variable) using one or another model (k-NN, logistic, decision tree, random forests etc.).  For numerical variables, it is common to either normalize or standardize the data.  Normalization :  scaling  a dataset so that its minimum is 0 and its maximum 1.   x_{normalized} = \\frac{x-x_{min}}{x_{max}-x_{min}}  x_{normalized} = \\frac{x-x_{min}}{x_{max}-x_{min}}   Stardardization :  centering  the data around 0 and to scale with respect to the standard deviation.   x_{standardized} = \\frac{x-\\mu}{\\sigma}  x_{standardized} = \\frac{x-\\mu}{\\sigma}   where  \\mu \\mu  and  \\sigma \\sigma  are the mean and standard deviation of the dataset.  There are other transformatoions, such as the log transformation or the Box-Cox transformation, to make the data look more Gaussian or a normally distributed.",
            "title": "Preprocessing: scaling and centering the data"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nn-scaling-in-practice",
            "text": "",
            "title": "k-NN: scaling in practice"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data",
            "text": "1 print ( X )    1\n2\n3\n4\n5\n6\n7 [[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ] \n  [  7.8     0.88    0.    ...,   3.2     0.68    9.8  ] \n  [  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ] \n  ...,  \n  [  6.3     0.51    0.13  ...,   3.42    0.75   11.   ] \n  [  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ] \n  [  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]    1\n2\n3\n4\n5 from   sklearn.preprocessing   import   scale  # minimum is 0 and its maximum 1  Xs   =   scale ( X )  print ( Xs )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 [[-0.52835961  0.96187667 -1.39147228 ...,  1.28864292 -0.57920652\n  -0.96024611]\n [-0.29854743  1.96744245 -1.39147228 ..., -0.7199333   0.1289504\n  -0.58477711]\n [-0.29854743  1.29706527 -1.18607043 ..., -0.33117661 -0.04808883\n  -0.58477711]\n ..., \n [-1.1603431  -0.09955388 -0.72391627 ...,  0.70550789  0.54204194\n   0.54162988]\n [-1.39015528  0.65462046 -0.77526673 ...,  1.6773996   0.30598963\n  -0.20930812]\n [-1.33270223 -1.21684919  1.02199944 ...,  0.51112954  0.01092425\n   0.54162988]]",
            "title": "Scale the data"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#run-the-k-nn",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 from   sklearn.cross_validation   import   train_test_split  # split  # 80% of the data for training (train set)  # 20% for testing (test set)  Xs_train ,   Xs_test ,   y_train ,   y_test   =   train_test_split ( Xs , \n                                                       y , \n                                                       test_size = 0.2 , \n                                                       random_state = 42 )    1\n2 # Run  knn_model_2   =   knn . fit ( Xs_train ,   y_train )",
            "title": "Run the k-NN"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#measure-the-performance",
            "text": "1\n2 print ( 'k-NN score for test set:  %f '   %   knn_model_2 . score ( Xs_test ,   y_test ))  print ( 'k-NN score for training set:  %f '   %   knn_model_2 . score ( Xs_train ,   y_train ))    1\n2 k-NN score for test set: 0.712500\nk-NN score for training set: 0.814699   1\n2\n3\n4 y_true ,   y_pred   =   y_test ,   knn_model_2 . predict ( Xs_test )  # Test set  print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6              precision    recall  f1-score   support\n\n      False       0.72      0.79      0.75       179\n       True       0.70      0.62      0.65       141\n\navg / total       0.71      0.71      0.71       320   1\n2\n3\n4 y_true ,   y_pred   =   y_train ,   knn_model_2 . predict ( Xs_train )  # Train set  print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6              precision    recall  f1-score   support\n\n      False       0.80      0.86      0.83       676\n       True       0.83      0.77      0.80       603\n\navg / total       0.82      0.81      0.81      1279   Normalization-scaling improves the performance compare to the previous  classification_report .",
            "title": "Measure the performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nn-recap",
            "text": "",
            "title": "k-NN Recap"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#without-scaling",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35 # Set sc = False   # Do not scale the features   sc   =   False  # Set the number of k in k-NN  nk   =   5  # Load data   df   =   pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv '   ,   sep   =   ';' )   # Drop target variable   X   =   df . drop ( 'quality'   ,   1 ) . values  # Scale, if desired   if   sc   ==   True :  \n   X   =   scale ( X )   # Target value   y1   =   df [ 'quality' ] . values   # original target variable   # New target variable: is the rating <= 5?  y   =   y1   <=   5   # Split (80/20) the data into a test set and a train set  # X_train, X_test, y_train, y_test   X_train ,   X_test ,   y_train ,   y_test   =   train_test_split ( X , \n                                                     y , \n                                                     test_size = 0.2 , \n                                                     random_state = 42 )   # Train the k-NN model  knn   =   neighbors . KNeighborsClassifier ( n_neighbors   =   nk )  knn_model   =   knn . fit ( X_train ,   y_train )  # Print performance on the test set   print ( 'k-NN accuracy for test set:  %f '   %   knn_model . score ( X_test ,   y_test ))  y_true ,   y_pred   =   y_test ,   knn_model . predict ( X_test )   print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6\n7 k-NN accuracy for test set: 0.612500\n             precision    recall  f1-score   support\n\n      False       0.66      0.64      0.65       179\n       True       0.56      0.57      0.57       141\n\navg / total       0.61      0.61      0.61       320",
            "title": "Without scaling"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#with-scaling",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35 # Set sc = True   # to scale the features   sc   =   True  # Set the number of k in k-NN  nk   =   5  # Load data   df   =   pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv '   ,   sep   =   ';' )   # Drop target variable   X   =   df . drop ( 'quality'   ,   1 ) . values  # Scale, if desired   if   sc   ==   True :  \n   X   =   scale ( X )   # Target value   y1   =   df [ 'quality' ] . values   # original target variable   # New target variable: is the rating <= 5?  y   =   y1   <=   5   # Split (80/20) the data into a test set and a train set  # X_train, X_test, y_train, y_test   X_train ,   X_test ,   y_train ,   y_test   =   train_test_split ( X , \n                                                     y , \n                                                     test_size = 0.2 , \n                                                     random_state = 42 )   # Train the k-NN model  knn   =   neighbors . KNeighborsClassifier ( n_neighbors   =   nk )  knn_model   =   knn . fit ( X_train ,   y_train )  # Print performance on the test set   print ( 'k-NN accuracy for test set:  %f '   %   knn_model . score ( X_test ,   y_test ))  y_true ,   y_pred   =   y_test ,   knn_model . predict ( X_test )   print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6\n7 k-NN accuracy for test set: 0.712500\n             precision    recall  f1-score   support\n\n      False       0.72      0.79      0.75       179\n       True       0.70      0.62      0.65       141\n\navg / total       0.71      0.71      0.71       320",
            "title": "With scaling"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#linear-regression",
            "text": "Before addressing an alternative to k-NN, the logistic regression or Logit, let us briefly review the linear regresion with a different dataset.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Import necessary packages  % pylab   inline  import   pandas   as   pd  import   matplotlib.pyplot   as   plt  # set the style  plt . style . use ( 'ggplot' )  # Import nmore packages  from   sklearn   import   datasets  from   sklearn   import   linear_model  import   numpy   as   np    1 Populating the interactive namespace from numpy and matplotlib   1\n2\n3\n4\n5\n6\n7 # Load the data  # The data is part of the scikit-learn module  boston   =   datasets . load_boston ()  yb   =   boston . target . reshape ( - 1 ,   1 )  Xb   =   boston [ 'data' ][:, 5 ] . reshape ( - 1 ,   1 )  print ( yb [: 10 ])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 [[ 24. ] \n  [ 21.6] \n  [ 34.7] \n  [ 33.4] \n  [ 36.2] \n  [ 28.7] \n  [ 22.9] \n  [ 27.1] \n  [ 16.5] \n  [ 18.9]]    1 print ( Xb [: 10 ])     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 [[ 6.575] \n  [ 6.421] \n  [ 7.185] \n  [ 6.998] \n  [ 7.147] \n  [ 6.43 ] \n  [ 6.012] \n  [ 6.172] \n  [ 5.631] \n  [ 6.004]]    1\n2\n3\n4 # Plot data  plt . scatter ( Xb , yb )  plt . ylabel ( 'value of house /1000 ($)' )  plt . xlabel ( 'number of rooms' )    1 <matplotlib.text.Text at 0x7f3681ae90b8>    1\n2\n3\n4\n5 # Create linear regression object  regr   =   linear_model . LinearRegression ()  # Train the model using the training sets  regr . fit (   Xb ,   yb )    1 LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)   1\n2\n3\n4\n5 # Plot outputs  plt . scatter ( Xb ,   yb ,    color = 'black' )  plt . plot ( Xb ,   regr . predict ( Xb ),   color = 'blue' , \n          linewidth = 3 )  plt . show ()",
            "title": "Linear regression"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#logistic-regression-logit",
            "text": "",
            "title": "Logistic regression (Logit)"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#with-random-numbers",
            "text": "1\n2\n3\n4\n5\n6 # Synthesize data  X1   =   np . random . normal ( size = 150 )  y1   =   ( X1   >   0 ) . astype ( np . float )  X1 [ X1   >   0 ]   *=   4  X1   +=   . 3   *   np . random . normal ( size = 150 )  X1   =   X1 . reshape ( - 1 ,   1 )    1\n2\n3 # Run the classifier  clf   =   linear_model . LogisticRegression ()  clf . fit ( X1 ,   y1 )    1\n2\n3\n4 LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)   1 X1 [: 10 ]     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 array([[-0.74466839],\n       [ 0.47335714],\n       [-1.94951938],\n       [ 0.12078443],\n       [-1.62121705],\n       [-2.23684396],\n       [ 7.66984914],\n       [-0.31941781],\n       [-1.07205326],\n       [ 0.85413978]])   1\n2\n3\n4 # Order X1  X1_ordered   =   sorted ( X1 ,   reverse = False )  X1_ordered [: 10 ]     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 [array([-3.29826361]),\n array([-2.76292445]),\n array([-2.23684396]),\n array([-1.96629089]),\n array([-1.94951938]),\n array([-1.87501025]),\n array([-1.83321548]),\n array([-1.73611093]),\n array([-1.62121705]),\n array([-1.61885181])]   1\n2\n3\n4\n5\n6 # Plot the result  plt . scatter ( X1 . ravel (),   y1 ,   color = 'black' ,   zorder = 20   ,   alpha   =   0.5 )  plt . plot ( X1_ordered ,   clf . predict_proba ( X1_ordered )[:, 1 ],   color = 'blue'   ,   linewidth   =   3 )  plt . ylabel ( 'target variable' )  plt . xlabel ( 'predictor variable' )  plt . show ()",
            "title": "With random numbers"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#with-the-wine-dataset",
            "text": "1\n2\n3\n4 # Load data  df   =   pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv '   ,   sep   =   ';' )  df . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       fixed acidity \n       volatile acidity \n       citric acid \n       residual sugar \n       chlorides \n       free sulfur dioxide \n       total sulfur dioxide \n       density \n       pH \n       sulphates \n       alcohol \n       quality \n     \n   \n   \n     \n       0 \n       7.4 \n       0.70 \n       0.00 \n       1.9 \n       0.076 \n       11.0 \n       34.0 \n       0.9978 \n       3.51 \n       0.56 \n       9.4 \n       5 \n     \n     \n       1 \n       7.8 \n       0.88 \n       0.00 \n       2.6 \n       0.098 \n       25.0 \n       67.0 \n       0.9968 \n       3.20 \n       0.68 \n       9.8 \n       5 \n     \n     \n       2 \n       7.8 \n       0.76 \n       0.04 \n       2.3 \n       0.092 \n       15.0 \n       54.0 \n       0.9970 \n       3.26 \n       0.65 \n       9.8 \n       5 \n     \n      1\n2\n3\n4\n5 # Drop target variable  X   =   df . drop ( 'quality'   ,   1 ) . values  # Print the array  print ( X )    1\n2\n3\n4\n5\n6\n7 [[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ] \n  [  7.8     0.88    0.    ...,   3.2     0.68    9.8  ] \n  [  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ] \n  ...,  \n  [  6.3     0.51    0.13  ...,   3.42    0.75   11.   ] \n  [  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ] \n  [  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]    The last column is gone.  1\n2\n3\n4 y1   =   df [ 'quality' ] . values  # Print the single-row array  print ( y1 )    1 [5 5 5 ..., 6 5 6]   1 df . shape    1 (1599, 12)   1\n2\n3\n4 # plot the other columns or variables  pd . DataFrame . hist ( df ,   figsize   =   [ 15 , 15 ]);  plt . show ()   # facultative in Jypyter     Let us turn it into a two-category variable consisting of \u2018good\u2019 (rating > 5) & \u2018bad\u2019 (rating <= 5) qualities.  1\n2\n3 # is the rating <= 5 ?  y   =   y1   <=   5  print ( y )    1 [ True  True  True ..., False  True False]   1\n2\n3\n4\n5\n6\n7\n8\n9 from   sklearn.cross_validation   import   train_test_split  # split  # 80% of the data for training (train set)  # 20% for testing (test set)  X_train ,   X_test ,   y_train ,   y_test   =   train_test_split ( X , \n                                                     y , \n                                                     test_size = 0.2 , \n                                                     random_state = 42 )    1\n2\n3\n4 from   sklearn   import   linear_model  # Initial logistic regression model  lr   =   linear_model . LogisticRegression ()    1\n2\n3\n4\n5\n6 # Fit the model  lr   =   lr . fit ( X_train ,   y_train )  y_true ,   y_pred   =   y_train ,   lr . predict ( X_train )  # Evaluate the train set  print ( 'Logistic Regression score for train set:  %f '   %   lr . score ( X_train ,   y_train ))    1 Logistic Regression score for train set: 0.752932   1 print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6              precision    recall  f1-score   support\n\n      False       0.77      0.75      0.76       676\n       True       0.73      0.75      0.74       603\n\navg / total       0.75      0.75      0.75      1279   1\n2\n3\n4\n5\n6\n7 from   sklearn.metrics   import   classification_report  # Use the test set  y_true ,   y_pred   =   y_test ,   lr . predict ( X_test )  # Evaluate the test set  print ( 'Logistic Regression score for test set:  %f '   %   lr . score ( X_test ,   y_test ))    1 Logistic Regression score for test set: 0.740625   1 print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6              precision    recall  f1-score   support\n\n      False       0.78      0.74      0.76       179\n       True       0.69      0.74      0.71       141\n\navg / total       0.74      0.74      0.74       320   Note : the logistic regression performs better than k-NN without scaling.",
            "title": "With the Wine dataset"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data_1",
            "text": "1 print ( X )    1\n2\n3\n4\n5\n6\n7 [[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ] \n  [  7.8     0.88    0.    ...,   3.2     0.68    9.8  ] \n  [  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ] \n  ...,  \n  [  6.3     0.51    0.13  ...,   3.42    0.75   11.   ] \n  [  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ] \n  [  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]    1\n2\n3\n4 from   sklearn.preprocessing   import   scale  Xs   =   scale ( X )  print ( Xs )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 [[-0.52835961  0.96187667 -1.39147228 ...,  1.28864292 -0.57920652\n  -0.96024611]\n [-0.29854743  1.96744245 -1.39147228 ..., -0.7199333   0.1289504\n  -0.58477711]\n [-0.29854743  1.29706527 -1.18607043 ..., -0.33117661 -0.04808883\n  -0.58477711]\n ..., \n [-1.1603431  -0.09955388 -0.72391627 ...,  0.70550789  0.54204194\n   0.54162988]\n [-1.39015528  0.65462046 -0.77526673 ...,  1.6773996   0.30598963\n  -0.20930812]\n [-1.33270223 -1.21684919  1.02199944 ...,  0.51112954  0.01092425\n   0.54162988]]",
            "title": "Scale the data"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#run-the-logit-and-measure-the-performance",
            "text": "1\n2\n3\n4\n5\n6\n7 from   sklearn.cross_validation   import   train_test_split  # Split 80/20  Xs_train ,   Xs_test ,   y_train ,   y_test   =   train_test_split ( Xs , \n                                                       y , \n                                                       test_size = 0.2 , \n                                                       random_state = 42 )    1\n2 # Run the logistic regression model  lr_2   =   lr . fit ( Xs_train ,   y_train )    1\n2\n3\n4\n5 # Fit the model  y_true ,   y_pred   =   y_train ,   lr_2 . predict ( Xs_train )  # Evaluate the train set  print ( 'Logistic Regression score for train set:  %f '   %   lr_2 . score ( Xs_train ,   y_train ))    1 Logistic Regression score for train set: 0.752150   1 print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6              precision    recall  f1-score   support\n\n      False       0.77      0.76      0.76       676\n       True       0.73      0.75      0.74       603\n\navg / total       0.75      0.75      0.75      1279   1\n2\n3\n4\n5 # Use the test set  y_true ,   y_pred   =   y_test ,   lr_2 . predict ( Xs_test )  # Evaluate the test set  print ( 'Logistic Regression score for test set:  %f '   %   lr_2 . score ( Xs_test ,   y_test ))    1 Logistic Regression score for test set: 0.740625   1 print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6              precision    recall  f1-score   support\n\n      False       0.79      0.74      0.76       179\n       True       0.69      0.74      0.72       141\n\navg / total       0.74      0.74      0.74       320   This is very interesting! The performance of logistic regression did not improve with data scaling.  Predictor variables with large ranges that do not effect the target variable, a regression algorithm will make the corresponding coefficients small so that they do not effect predictions so much.",
            "title": "Run the Logit and measure the performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#logit-recap",
            "text": "",
            "title": "Logit Recap"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#without-scaling_1",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 # Set sc = False  # do not scale the features   sc   =   False   # Load the data   df   =   pd . read_csv ( 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv '   ,   sep   =   ';' )   X   =   df . drop ( 'quality'   ,   1 ) . values   # drop target variable   # Scale, if desired   if   sc   ==   True :  \n   X   =   scale ( X )   # Target value   y1   =   df [ 'quality' ] . values   # original target variable   y   =   y1   <=   5    # new target variable: is the rating <= 5?   # Split (80/20) the data into a test set and a train  # X_train, X_test, y_train, y_test  train_test_split ( X ,   y ,   test_size = 0.2 ,   random_state = 42 )   # Train logistic regression model   lr   =   linear_model . LogisticRegression ()   lr   =   lr . fit ( X_train ,   y_train )   # Print performance on the test set  print ( 'Logistic Regression score for training set:  %f '   %   lr . score ( X_train ,   y_train ))   y_true ,   y_pred   =   y_test ,   lr . predict ( X_test )   print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6\n7 Logistic Regression score for training set: 0.752932\n             precision    recall  f1-score   support\n\n      False       0.78      0.74      0.76       179\n       True       0.69      0.74      0.71       141\n\navg / total       0.74      0.74      0.74       320",
            "title": "Without scaling"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#noise-and-scaling",
            "text": "The noisier the symthesized data, the more important scaling will be.  Measurements can be in meters and and miles, with small or large ranges. If we scale the data, they end up being the same.  scikit-learn\u2019s  make_blobs  function to generate 2000 data points that are in 4 clusters (each data point has 2 predictor variables and 1 target variable).  1 % pylab   inline    1 Populating the interactive namespace from numpy and matplotlib   1\n2\n3\n4\n5\n6\n7\n8 # Generate some clustered data (blobs!)  import   numpy   as   np  from   sklearn.datasets.samples_generator   import   make_blobs  n_samples = 2000  X ,   y   =   make_blobs ( n_samples ,   centers = 4 ,   n_features = 2 ,   random_state = 0 )  print ( X )    1\n2\n3\n4\n5\n6\n7 [[-0.46530384  1.73299482] \n  [-0.33963733  3.84220272] \n  [ 2.25309569  0.99541446] \n  ...,  \n  [ 1.03616476  4.09126428] \n  [-0.5901088   3.68821314] \n  [ 2.30405277  4.20250584]]    1 print ( y )    1 [2 0 1 ..., 0 2 0]",
            "title": "Noise and scaling"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#plotting-the-synthesized-data",
            "text": "Each axis is a predictor variable and the colour is a key to the target variable  All possible target variables are equally represented. In this case (or even if they are approximately equally represented), we say that the class y is balanced.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   matplotlib.pyplot   as   plt  plt . style . use ( 'ggplot' )  plt . figure ( figsize = ( 20 , 5 ));  plt . subplot ( 1 ,   2 ,   1   );  plt . scatter ( X [:, 0 ]   ,   X [:, 1 ],    c   =   y ,   alpha   =   0.7 );  plt . subplot ( 1 ,   2 ,   2 );  plt . hist ( y )  plt . show ()     Plot histograms of the features.  1\n2\n3\n4\n5\n6\n7 import   pandas   as   pd  # Convert to a DataFrame  df   =   pd . DataFrame ( X )  # Plot it  pd . DataFrame . hist ( df ,   figsize = ( 20 , 5 ))    1\n2 array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f366d3dbba8>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x7f366d30ca58>]], dtype=object)    Split into test & train sets, and plot both sets (train set > test set; 80/20).  1\n2\n3\n4\n5\n6 from   sklearn.cross_validation   import   train_test_split  X_train ,   X_test ,   y_train ,   y_test   =   train_test_split ( X , \n                                                     y , \n                                                     test_size = 0.2 , \n                                                     random_state = 42 )    1\n2\n3\n4\n5\n6\n7\n8\n9 plt . figure ( figsize = ( 20 , 5 ));  plt . subplot ( 1 ,   2 ,   1   );  plt . title ( 'training set' )  plt . scatter ( X_train [:, 0 ]   ,   X_train [:, 1 ],    c   =   y_train ,   alpha   =   0.7 );  plt . subplot ( 1 ,   2 ,   2 );  plt . scatter ( X_test [:, 0 ]   ,   X_test [:, 1 ],    c   =   y_test ,   alpha   =   0.7 );  plt . title ( 'test set' )  plt . show ()",
            "title": "Plotting the synthesized data"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nearest-neighbours_1",
            "text": "Let\u2019s instantiate a k-Nearest Neighbours classifier and train it on our train set.  1\n2\n3\n4 from   sklearn   import   neighbors ,   linear_model  knn   =   neighbors . KNeighborsClassifier ()  knn_model   =   knn . fit ( X_train ,   y_train )    Fit the  knn_model  to the test set and compute the accuracy.  1 knn_model . score ( X_test ,   y_test )    1 0.93500000000000005   1 print ( 'k-NN score for test set:  %f '   %   knn_model . score ( X_test ,   y_test ))    1 k-NN score for test set: 0.935000   Check out a variety of other metrics.  1\n2\n3\n4 from   sklearn.metrics   import   classification_report  y_true ,   y_pred   =   y_test ,   knn_model . predict ( X_test )  print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6\n7\n8              precision    recall  f1-score   support\n\n          0       0.87      0.90      0.88       106\n          1       0.98      0.93      0.95       102\n          2       0.90      0.92      0.91       100\n          3       1.00      1.00      1.00        92\n\navg / total       0.94      0.94      0.94       400   Re-fit  knn_model  to the train set and compute the accuracy.  1 print ( 'k-NN score for train set:  %f '   %   knn_model . score ( X_train ,   y_train ))    1 k-NN score for train set: 0.941875   1\n2\n3\n4 from   sklearn.metrics   import   classification_report  y_true ,   y_pred   =   y_train ,   knn_model . predict ( X_train )  print ( classification_report ( y_true ,   y_pred ))    1\n2\n3\n4\n5\n6\n7\n8              precision    recall  f1-score   support\n\n          0       0.88      0.90      0.89       394\n          1       0.97      0.96      0.96       398\n          2       0.94      0.93      0.93       400\n          3       0.99      0.98      0.98       408\n\navg / total       0.94      0.94      0.94      1600",
            "title": "k-Nearest Neighbours"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data-run-the-k-nn-and-measure-the-performance",
            "text": "1 print ( X )    1\n2\n3\n4\n5\n6\n7 [[-0.46530384  1.73299482] \n  [-0.33963733  3.84220272] \n  [ 2.25309569  0.99541446] \n  ...,  \n  [ 1.03616476  4.09126428] \n  [-0.5901088   3.68821314] \n  [ 2.30405277  4.20250584]]    1\n2\n3\n4 from   sklearn.preprocessing   import   scale  Xs   =   scale ( X )  print ( Xs )    1\n2\n3\n4\n5\n6\n7 [[-0.26508542 -0.82638395] \n  [-0.19594894 -0.0519305 ] \n  [ 1.23046484 -1.09720678] \n  ...,  \n  [ 0.5609601   0.03951927] \n  [-0.33374791 -0.10847199] \n  [ 1.25849931  0.08036466]]    1\n2\n3\n4\n5\n6 from   sklearn.cross_validation   import   train_test_split  Xs_train ,   Xs_test ,   y_train ,   y_test   =   train_test_split ( Xs , \n                                                       y , \n                                                       test_size = 0.2 , \n                                                       random_state = 42 )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 plt . figure ( figsize = ( 20 , 5 ));  plt . subplot ( 1 ,   2 ,   1   );  plt . scatter ( Xs_train [:, 0 ]   ,   Xs_train [:, 1 ],    c   =   y_train ,   alpha   =   0.7 );  plt . title ( 'scaled training set' )  plt . subplot ( 1 ,   2 ,   2 );  plt . scatter ( Xs_test [:, 0 ]   ,   Xs_test [:, 1 ],    c   =   y_test ,   alpha   =   0.7 );  plt . title ( 'scaled test set' )  plt . show ()     1\n2\n3 knn_model_s   =   knn . fit ( Xs_train ,   y_train )  print ( 'k-NN score for test set:  %f '   %   knn_model_s . score ( Xs_test ,   y_test ))    1 k-NN score for test set: 0.935000   It doesn\u2019t perform any better with scaling.  This is most likely because both features were already around the same range.",
            "title": "Scale the data, run the k-NN, and measure the performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#add-noise-to-the-signal",
            "text": "Adding a third variable of Gaussian noise with mean 0 and variable standard deviation  \\sigma \\sigma . We call  \\sigma \\sigma  the strength of the noise and we see that the stronger the noise, the worse the performance of k-Nearest Neighbours.  1\n2\n3\n4\n5\n6\n7\n8 # Strength of noise term  ns   =   10 ** ( 3 )  # Add noise column to predictor variables  newcol   =   np . transpose ([ ns * np . random . randn ( n_samples )])  Xn   =   np . concatenate (( X ,   newcol ),   axis   =   1 )  print ( Xn )    1\n2\n3\n4\n5\n6\n7 [[ -4.65303843e-01   1.73299482e+00  -9.41949646e+01] \n  [ -3.39637332e-01   3.84220272e+00  -1.00446506e+03] \n  [  2.25309569e+00   9.95414462e-01   2.95697211e+02] \n  ...,  \n  [  1.03616476e+00   4.09126428e+00  -1.16020635e+02] \n  [ -5.90108797e-01   3.68821314e+00   5.60244701e+02] \n  [  2.30405277e+00   4.20250584e+00  -8.97600798e+02]]    Plot the 3D data.  1\n2\n3\n4\n5 from   mpl_toolkits.mplot3d   import   Axes3D  fig   =   plt . figure ( figsize = ( 15 , 10 ))  ax   =   fig . add_subplot ( 111 ,   projection = '3d'   ,   alpha   =   0.5 )  ax . scatter ( Xn [:, 0 ],   Xn [:, 1 ],   Xn [:, 2 ],   c   =   y )    1 <mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7f366d409cf8>",
            "title": "Add noise to the signal"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#run-the-k-nn-and-measure-the-performance",
            "text": "1\n2\n3\n4\n5 # Split into train-test sets  Xn_train ,   Xn_test ,   y_train ,   y_test   =   train_test_split ( Xn , \n                                                       y ,  \n                                                       test_size = 0.2 ,  \n                                                       random_state = 42 )    1\n2\n3 # Run the model  knn   =   neighbors . KNeighborsClassifier ()  knn_model   =   knn . fit ( Xn_train ,   y_train )    1\n2 # Evaluate  print ( 'k-NN score for test set:  %f '   %   knn_model . score ( Xn_test ,   y_test ))    1 k-NN score for test set: 0.337500   Horrible!",
            "title": "Run the k-NN and measure the performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data-add-noise-run-the-k-nn-and-measure-the-performance",
            "text": "1\n2\n3\n4 # Scale  Xns   =   scale ( Xn )  print ( Xns )    1\n2\n3\n4\n5\n6\n7 [[-0.26508542 -0.82638395 -0.07164275] \n  [-0.19594894 -0.0519305  -0.98584539] \n  [ 1.23046484 -1.09720678  0.31993383] \n  ...,  \n  [ 0.5609601   0.03951927 -0.09356271] \n  [-0.33374791 -0.10847199  0.58562421] \n  [ 1.25849931  0.08036466 -0.87851945]]     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 # Apply noise  s   =   int ( . 2 * n_samples )  Xns_train   =   Xns [ s :]  y_train   =   y [ s :]  Xns_test   =   Xns [: s ]  y_test   =   y [: s ]  # Run the model  knn   =   neighbors . KNeighborsClassifier ()  knn_models   =   knn . fit ( Xns_train ,   y_train )  # Evaluate  print ( 'k-NN score for test set:  %f '   %   knn_models . score ( Xns_test ,   y_test ))    1 k-NN score for test set: 0.917500   After scaling the data, the model performs nearly as well as were there no noise introduced.",
            "title": "Scale the data, add noise, run the k-NN, and measure the performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#noise-strength-vs-accuracy-and-the-need-for-scaling",
            "text": "How the noise strength can effect model accuracy?  Create a function to split the data and run the model.   Use the function in a loop.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 def   accu (   X ,   y ): \n     X_train ,   X_test ,   y_train ,   y_test   =   train_test_split ( X , \n                                                         y , \n                                                         test_size = 0.2 , \n                                                         random_state = 42 ) \n\n     knn   =   neighbors . KNeighborsClassifier () \n     knn_model   =   knn . fit ( X_train ,   y_train ) \n\n     return ( knn_model . score ( X_test ,   y_test ))    1\n2\n3\n4\n5 # Set the variables  noise   =   [ 10 ** i   for   i   in   np . arange ( 0 , 6 )]  A1   =   np . zeros ( len ( noise ))  A2   =   np . zeros ( len ( noise ))  count   =   0    1 print ( noise )    1 [1, 10, 100, 1000, 10000, 100000]   1\n2 print ( A1 )  print ( A2 )    1\n2 [ 0.  0.  0.  0.  0.  0.]  [ 0.  0.  0.  0.  0.  0.]    1\n2\n3\n4\n5\n6\n7\n8 # Run the loop  for   ns   in   noise : \n     newcol   =   np . transpose ([ ns * np . random . randn ( n_samples )]) \n     Xn   =   np . concatenate (( X ,   newcol ),   axis   =   1 ) \n     Xns   =   scale ( Xn ) \n     A1 [ count ]   =   accu (   Xn ,   y ) \n     A2 [ count ]   =   accu (   Xns ,   y ) \n     count   +=   1    1\n2\n3\n4\n5\n6\n7\n8\n9 # Plot the results  plt . scatter (   noise ,   A1   )  plt . plot (   noise ,   A1 ,   label   =   'unscaled' ,   linewidth   =   2 )  plt . scatter (   noise ,   A2   ,   c   =   'r' )  plt . plot (   noise ,   A2   ,   label   =   'scaled' ,   linewidth   =   2 )  plt . xscale ( 'log' )  plt . xlabel ( 'Noise strength' )  plt . ylabel ( 'Accuracy' )  plt . legend ( loc = 3 );     1\n2 print ( A1 )  print ( A2 )    1\n2 [ 0.9225  0.9175  0.8025  0.3275  0.22    0.2525]  [ 0.91    0.9175  0.9325  0.9075  0.9325  0.92  ]    The more noise there is in the nuisance variable, the more important it is to scale the data for the k-NN model.   More noise, more scaling.",
            "title": "Noise strength vs. accuracy (and the need for scaling)"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#logit-repeat-the-k-nn-procedure",
            "text": "1\n2\n3\n4\n5 # Change the exponent of 10 to alter the amount of noise  ns   =   10 ** ( 3 )   # Strength of noise term  # Set sc = True if we want to scale the features  sc   =   True    1\n2\n3\n4\n5\n6 # Import packages  import   numpy   as   np  from   sklearn.cross_validation   import   train_test_split  from   sklearn   import   neighbors ,   linear_model  from   sklearn.preprocessing   import   scale  from   sklearn.datasets.samples_generator   import   make_blobs    1\n2\n3\n4\n5\n6 # Generate some data  n_samples = 2000  X ,   y   =   make_blobs ( n_samples ,  \n                   centers = 4 ,  \n                   n_features = 2 , \n                   random_state = 0 )    1\n2\n3 # Add noise column to predictor variables  newcol   =   np . transpose ([ ns * np . random . randn ( n_samples )])  Xn   =   np . concatenate (( X ,   newcol ),   axis   =   1 )    1\n2\n3 # Scale if desired  if   sc   ==   True : \n     Xn   =   scale ( Xn )    1\n2\n3\n4\n5 # Train model and test after splitting  Xn_train ,   Xn_test ,   y_train ,   y_test   =   train_test_split ( Xn ,   y ,   test_size = 0.2 ,   random_state = 42 )  lr   =   linear_model . LogisticRegression ()  lr_model   =   lr . fit ( Xn_train ,   y_train )  print ( 'logistic regression score for test set:  %f '   %   lr_model . score ( Xn_test ,   y_test ))    1 logistic regression score for test set: 0.942500",
            "title": "Logit (Repeat the k-NN procedure)"
        },
        {
            "location": "/Time_Series_Analysis/",
            "text": "CONTENT\n\n\nImporting Packages and the Data\n\n\nWrangle the Data\n\n\nExploratory Data Analysis (EDA)\n\n\nTrends and Seasonality in Time Series\n\n\nIdentifying Trends in Time Series\n\n\nSeasonal Patterns in Time Series\n\n\nFirst-order differencing\n\n\n\n\n\n\nPeriodicity and Autocorrelation\n\n\nA Word about Correlation\n\n\nPeriodicity and Autocorrelation (continued)\n\n\nAutocorrelation\n\n\n\n\n\n\n\n\n\n\nForecasts, ARIMA\u2026\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nGet Google Trends data of keywords such as \u2018diet\u2019 and \u2018gym\u2019 and see how they vary over time while learning about trends and seasonality in time series data.\n\n\n\n\nSource the data\n\n\nWrangle the data\n\n\nExploratory Data Analysis\n\n\nTrends and seasonality in time series data\n\n\nIdentifying Trends\n\n\nSeasonal patterns\n\n\nFirst Order Differencing\n\n\nPeriodicity and Autocorrelation\n\n\n\n\n\n\n\n\n\n\n\n\nImporting Packages and the Data\n\u00b6\n\n\nThe data are from \nGoogle Trends\n.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Import the packages\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \npandas\n \nas\n \npd\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\n%\nmatplotlib\n \ninline\n\n\n\n# Switch to the Seaborn defaults\n\n\nsns\n.\nset\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n# Import the data\n\n\n# Check out the first rows\n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\n'multiTimeline.csv'\n,\n \nskiprows\n=\n1\n)\n\n\ndf\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nMonth\n\n      \ndiet: (Worldwide)\n\n      \ngym: (Worldwide)\n\n      \nfinance: (Worldwide)\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2004-01\n\n      \n100\n\n      \n31\n\n      \n48\n\n    \n\n    \n\n      \n1\n\n      \n2004-02\n\n      \n75\n\n      \n26\n\n      \n49\n\n    \n\n    \n\n      \n2\n\n      \n2004-03\n\n      \n67\n\n      \n24\n\n      \n47\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n# Check out the data types, number of rows and more\n\n\ndf\n.\ninfo\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 168 entries, 0 to 167\nData columns (total 4 columns):\nMonth                   168 non-null object\ndiet: (Worldwide)       168 non-null int64\ngym: (Worldwide)        168 non-null int64\nfinance: (Worldwide)    168 non-null int64\ndtypes: int64(3), object(1)\nmemory usage: 5.3+ KB\n\n\n\n\n\n\nWrangle the Data\n\u00b6\n\n\nRename the columns of the DataFrame \ndf\n so that they have no whitespaces in them.\n\n\n1\n2\ndf\n.\ncolumns\n \n=\n \n[\n'month'\n,\n \n'diet'\n,\n \n'gym'\n,\n \n'finance'\n]\n\n\ndf\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nmonth\n\n      \ndiet\n\n      \ngym\n\n      \nfinance\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2004-01\n\n      \n100\n\n      \n31\n\n      \n48\n\n    \n\n    \n\n      \n1\n\n      \n2004-02\n\n      \n75\n\n      \n26\n\n      \n49\n\n    \n\n    \n\n      \n2\n\n      \n2004-03\n\n      \n67\n\n      \n24\n\n      \n47\n\n    \n\n    \n\n      \n3\n\n      \n2004-04\n\n      \n70\n\n      \n22\n\n      \n48\n\n    \n\n    \n\n      \n4\n\n      \n2004-05\n\n      \n72\n\n      \n22\n\n      \n43\n\n    \n\n  \n\n\n\n\n\n\n\nTurn the \nmonth\n column into a \nDateTime\n data type (vs. \nobject\n).\n\n\n1\ndf\n.\nmonth\n \n=\n \npd\n.\nto_datetime\n(\ndf\n.\nmonth\n)\n\n\n\n\n\n\n\nMake it the index of the DataFrame. Include the \ninplace\n argument when setting the index of the DataFrame \ndf\n so that we alter the original index and set it to the \nmonth\n column.\n\n\n1\n2\ndf\n.\nset_index\n(\n'month'\n,\n \ninplace\n=\nTrue\n)\n\n\ndf\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ndiet\n\n      \ngym\n\n      \nfinance\n\n    \n\n    \n\n      \nmonth\n\n      \n\n      \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n2004-01-01\n\n      \n100\n\n      \n31\n\n      \n48\n\n    \n\n    \n\n      \n2004-02-01\n\n      \n75\n\n      \n26\n\n      \n49\n\n    \n\n    \n\n      \n2004-03-01\n\n      \n67\n\n      \n24\n\n      \n47\n\n    \n\n    \n\n      \n2004-04-01\n\n      \n70\n\n      \n22\n\n      \n48\n\n    \n\n    \n\n      \n2004-05-01\n\n      \n72\n\n      \n22\n\n      \n43\n\n    \n\n  \n\n\n\n\n\n\n\nExploratory Data Analysis (EDA)\n\u00b6\n\n\nUse a built-in \npandas\n visualization method \n.plot\n()\n to plot the data. Specify the label on the x-axis.\n\n\n1\n2\ndf\n.\nplot\n(\nfigsize\n=\n(\n20\n,\n10\n),\n \nlinewidth\n=\n5\n,\n \nfontsize\n=\n20\n)\n\n\nplt\n.\nxlabel\n(\n'Year'\n,\n \nfontsize\n=\n20\n);\n\n\n\n\n\n\n\n\n\nA value of 100 is the peak popularity for the term. A value of 50 means that the term is half as popular. Likewise a score of 0 means the term was less than 1% as popular as the peak.\n\n\nPlot one column.\n\n\n1\n2\ndf\n[[\n'diet'\n]]\n.\nplot\n(\nfigsize\n=\n(\n20\n,\n10\n),\n \nlinewidth\n=\n5\n,\n \nfontsize\n=\n20\n)\n\n\nplt\n.\nxlabel\n(\n'Year'\n,\n \nfontsize\n=\n20\n);\n\n\n\n\n\n\n\n\n\nTrends and Seasonality in Time Series\n\u00b6\n\n\nIdentifying Trends in Time Series\n\u00b6\n\n\nTake a rolling average to remove the seasonality and see the trend. 12 months for example (before and after each point).\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Extract one column, \n\n\n# but do not create a Series with df['diet']\n\n\ndiet\n \n=\n \ndf\n[[\n'diet'\n]]\n\n\n\n# Chain: rolling, avg, plot\n\n\ndiet\n.\nrolling\n(\n12\n)\n.\nmean\n()\n.\nplot\n(\nfigsize\n=\n(\n20\n,\n10\n),\n \nlinewidth\n=\n5\n,\n \nfontsize\n=\n20\n)\n\n\n\n# Plot\n\n\nplt\n.\nxlabel\n(\n'Year'\n,\n \nfontsize\n=\n20\n)\n\n\n\n\n\n\n\n1\n<matplotlib.text.Text at 0x7f3c0630c240>\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Another column\n\n\ngym\n \n=\n \ndf\n[[\n'gym'\n]]\n\n\n\n# Chain\n\n\ngym\n.\nrolling\n(\n12\n)\n.\nmean\n()\n.\nplot\n(\nfigsize\n=\n(\n20\n,\n10\n),\n \nlinewidth\n=\n5\n,\n \nfontsize\n=\n20\n)\n\n\n\n# Plot\n\n\nplt\n.\nxlabel\n(\n'Year'\n,\n \nfontsize\n=\n20\n)\n\n\n\n\n\n\n\n1\n<matplotlib.text.Text at 0x7f3c0da837f0>\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Create a new df with both\n\n\ndf_rm\n \n=\n \npd\n.\nconcat\n([\ndiet\n.\nrolling\n(\n12\n)\n.\nmean\n(),\n \ngym\n.\nrolling\n(\n12\n)\n.\nmean\n()],\n \naxis\n=\n1\n)\n\n\n\n# Chain\n\n\ndf_rm\n.\nplot\n(\nfigsize\n=\n(\n20\n,\n10\n),\n \nlinewidth\n=\n5\n,\n \nfontsize\n=\n20\n)\n\n\n\n# Plot\n\n\nplt\n.\nxlabel\n(\n'Year'\n,\n \nfontsize\n=\n20\n)\n\n\n\n\n\n\n\n1\n<matplotlib.text.Text at 0x7f3c0621c7f0>\n\n\n\n\n\n\n\n\nSeasonal Patterns in Time Series\n\u00b6\n\n\nWe can remove the trend from the time series by subtracting the rolling mean from the original signal, leaving the seasonality only and turning the data into a stationary time series (such as mean and variance don\u2019t change over time). Many time series forecasting methods are based on the assumption that the time series is approximately stationary.\n\n\nAnother way to remove the trend is called \u201cdifferencing\u201d.\n\n\nFirst-order differencing\n\u00b6\n\n\nDifference between one data point and the one before it.\n\n\nSecond-order differencing\n means that we would be looking at the difference between one data point and the two that precede it.\n\n\nMore on differencing\n.\n\n\n1\n2\n3\n4\n5\n# Differencing\n\n\ndiet\n.\ndiff\n()\n.\nplot\n(\nfigsize\n=\n(\n20\n,\n10\n),\n \nlinewidth\n=\n5\n,\n \nfontsize\n=\n20\n)\n\n\n\n# Plot\n\n\nplt\n.\nxlabel\n(\n'Year'\n,\n \nfontsize\n=\n20\n);\n\n\n\n\n\n\n\n\n\nPeriodicity and Autocorrelation\n\u00b6\n\n\nA time series is periodic if it repeats itself at equally spaced intervals, say, every 12 months.\n\n\nYet another way of thinking about this is that the time series is correlated with itself shifted by 12 months. That means that, if we took the time series and moved it 12 months backwards or forwards, it would map onto itself in some way: autocorrelation.\n\n\nA Word about Correlation\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom\n \nsklearn\n \nimport\n \ndatasets\n\n\n\niris\n \n=\n \ndatasets\n.\nload_iris\n()\n\n\n\ndf_iris\n \n=\n \npd\n.\nDataFrame\n(\ndata\n \n=\n \nnp\n.\nc_\n[\niris\n[\n'data'\n],\n \niris\n[\n'target'\n]],\n\n                       \ncolumns\n \n=\n \niris\n[\n'feature_names'\n]\n \n+\n \n[\n'target'\n])\n\n\ndf_iris\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nsepal length (cm)\n\n      \nsepal width (cm)\n\n      \npetal length (cm)\n\n      \npetal width (cm)\n\n      \ntarget\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n5.1\n\n      \n3.5\n\n      \n1.4\n\n      \n0.2\n\n      \n0.0\n\n    \n\n    \n\n      \n1\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \n0.0\n\n    \n\n    \n\n      \n2\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \n0.0\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\nsns\n.\nlmplot\n(\nx\n=\n'sepal length (cm)'\n,\n \ny\n=\n'sepal width (cm)'\n,\n\n           \nfit_reg\n=\nFalse\n,\n \ndata\n=\ndf_iris\n)\n\n\n\n\n\n\n\n1\n<seaborn.axisgrid.FacetGrid at 0x7f3c060fb5f8>\n\n\n\n\n\n\n\n\n1\n2\nsns\n.\nlmplot\n(\nx\n=\n'sepal length (cm)'\n,\n \ny\n=\n'sepal width (cm)'\n,\n\n           \nfit_reg\n=\nTrue\n,\n \ndata\n=\ndf_iris\n);\n\n\n\n\n\n\n\n\n\n1\n2\nsns\n.\nlmplot\n(\nx\n=\n'sepal length (cm)'\n,\n \ny\n=\n'sepal width (cm)'\n,\n\n           \nfit_reg\n=\nFalse\n,\n \ndata\n=\ndf_iris\n,\n \nhue\n=\n'target'\n)\n\n\n\n\n\n\n\n1\n<seaborn.axisgrid.FacetGrid at 0x7f3c060b7438>\n\n\n\n\n\n\n\n\n1\ndf_iris\n.\ncorr\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nsepal length (cm)\n\n      \nsepal width (cm)\n\n      \npetal length (cm)\n\n      \npetal width (cm)\n\n      \ntarget\n\n    \n\n  \n\n  \n\n    \n\n      \nsepal length (cm)\n\n      \n1.000000\n\n      \n-0.109369\n\n      \n0.871754\n\n      \n0.817954\n\n      \n0.782561\n\n    \n\n    \n\n      \nsepal width (cm)\n\n      \n-0.109369\n\n      \n1.000000\n\n      \n-0.420516\n\n      \n-0.356544\n\n      \n-0.419446\n\n    \n\n    \n\n      \npetal length (cm)\n\n      \n0.871754\n\n      \n-0.420516\n\n      \n1.000000\n\n      \n0.962757\n\n      \n0.949043\n\n    \n\n    \n\n      \npetal width (cm)\n\n      \n0.817954\n\n      \n-0.356544\n\n      \n0.962757\n\n      \n1.000000\n\n      \n0.956464\n\n    \n\n    \n\n      \ntarget\n\n      \n0.782561\n\n      \n-0.419446\n\n      \n0.949043\n\n      \n0.956464\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\n1\ndf_iris\n.\ngroupby\n([\n'target'\n])\n.\ncorr\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n\n      \npetal length (cm)\n\n      \npetal width (cm)\n\n      \nsepal length (cm)\n\n      \nsepal width (cm)\n\n    \n\n    \n\n      \ntarget\n\n      \n\n      \n\n      \n\n      \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n0.0\n\n      \npetal length (cm)\n\n      \n1.000000\n\n      \n0.306308\n\n      \n0.263874\n\n      \n0.176695\n\n    \n\n    \n\n      \npetal width (cm)\n\n      \n0.306308\n\n      \n1.000000\n\n      \n0.279092\n\n      \n0.279973\n\n    \n\n    \n\n      \nsepal length (cm)\n\n      \n0.263874\n\n      \n0.279092\n\n      \n1.000000\n\n      \n0.746780\n\n    \n\n    \n\n      \nsepal width (cm)\n\n      \n0.176695\n\n      \n0.279973\n\n      \n0.746780\n\n      \n1.000000\n\n    \n\n    \n\n      \n1.0\n\n      \npetal length (cm)\n\n      \n1.000000\n\n      \n0.786668\n\n      \n0.754049\n\n      \n0.560522\n\n    \n\n    \n\n      \npetal width (cm)\n\n      \n0.786668\n\n      \n1.000000\n\n      \n0.546461\n\n      \n0.663999\n\n    \n\n    \n\n      \nsepal length (cm)\n\n      \n0.754049\n\n      \n0.546461\n\n      \n1.000000\n\n      \n0.525911\n\n    \n\n    \n\n      \nsepal width (cm)\n\n      \n0.560522\n\n      \n0.663999\n\n      \n0.525911\n\n      \n1.000000\n\n    \n\n    \n\n      \n2.0\n\n      \npetal length (cm)\n\n      \n1.000000\n\n      \n0.322108\n\n      \n0.864225\n\n      \n0.401045\n\n    \n\n    \n\n      \npetal width (cm)\n\n      \n0.322108\n\n      \n1.000000\n\n      \n0.281108\n\n      \n0.537728\n\n    \n\n    \n\n      \nsepal length (cm)\n\n      \n0.864225\n\n      \n0.281108\n\n      \n1.000000\n\n      \n0.457228\n\n    \n\n    \n\n      \nsepal width (cm)\n\n      \n0.401045\n\n      \n0.537728\n\n      \n0.457228\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\nPeriodicity and Autocorrelation (continued)\n\u00b6\n\n\nThe time series again.\n\n\n1\n2\ndf\n.\nplot\n(\nfigsize\n=\n(\n20\n,\n10\n),\n \nlinewidth\n=\n5\n,\n \nfontsize\n=\n20\n)\n\n\nplt\n.\nxlabel\n(\n'Year'\n,\n \nfontsize\n=\n20\n)\n\n\n\n\n\n\n\n1\n<matplotlib.text.Text at 0x7f3c062fd390>\n\n\n\n\n\n\n\n\n1\ndf\n.\ncorr\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ndiet\n\n      \ngym\n\n      \nfinance\n\n    \n\n  \n\n  \n\n    \n\n      \ndiet\n\n      \n1.000000\n\n      \n-0.100764\n\n      \n-0.034639\n\n    \n\n    \n\n      \ngym\n\n      \n-0.100764\n\n      \n1.000000\n\n      \n-0.284279\n\n    \n\n    \n\n      \nfinance\n\n      \n-0.034639\n\n      \n-0.284279\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\ndiet\n and \ngym\n are negatively correlated. However, from looking at the times series, it looks as though their seasonal components would be positively correlated and their trends negatively correlated. The actual correlation coefficient is actually capturing both of those.\n\n\n1\n2\n3\n# first-order differences\n\n\ndf\n.\ndiff\n()\n.\nplot\n(\nfigsize\n=\n(\n20\n,\n10\n),\n \nlinewidth\n=\n5\n,\n \nfontsize\n=\n20\n)\n\n\nplt\n.\nxlabel\n(\n'Year'\n,\n \nfontsize\n=\n20\n)\n\n\n\n\n\n\n\n1\n<matplotlib.text.Text at 0x7f3c05fcfac8>\n\n\n\n\n\n\n\n\ndiet\n and \ngym\n are incredibly correlated once we remove the trend.\n\n\n1\ndf\n.\ndiff\n()\n.\ncorr\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ndiet\n\n      \ngym\n\n      \nfinance\n\n    \n\n  \n\n  \n\n    \n\n      \ndiet\n\n      \n1.000000\n\n      \n0.758707\n\n      \n0.373828\n\n    \n\n    \n\n      \ngym\n\n      \n0.758707\n\n      \n1.000000\n\n      \n0.301111\n\n    \n\n    \n\n      \nfinance\n\n      \n0.373828\n\n      \n0.301111\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\nAutocorrelation\n\u00b6\n\n\nAutocorrelation of the \u2018diet\u2019 series: on the x-axis, we have the lag and on the y-axis, we have how correlated the time series is with itself at that lag.\n\n\nSo, this means that if the original time series repeats itself every two days, we would expect to see a spike in the autocorrelation function at 2 days.\n\n\n1\npd\n.\nplotting\n.\nautocorrelation_plot\n(\ndiet\n)\n\n\n\n\n\n\n\n1\n<matplotlib.axes._subplots.AxesSubplot at 0x7f3c05f587b8>\n\n\n\n\n\n\n\n\nThis is 12 months at which we have this huge peak in correlation. We have another peak at a 24 month interval, where it\u2019s also correlated with itself. We have another peak at 36, but as we move further away, there\u2019s less and less of a correlation.\n\n\nThe dotted lines in the above plot actually tell us about the statistical significance of the correlation.\n\n\nForecasts, ARIMA\u2026\n\u00b6\n\n\nUse ARIMA modeling to make some time series forecasts as to what these search trends will look like over the coming years.",
            "title": "Time Series Analysis"
        },
        {
            "location": "/Time_Series_Analysis/#wrangle-the-data",
            "text": "Rename the columns of the DataFrame  df  so that they have no whitespaces in them.  1\n2 df . columns   =   [ 'month' ,   'diet' ,   'gym' ,   'finance' ]  df . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       month \n       diet \n       gym \n       finance \n     \n   \n   \n     \n       0 \n       2004-01 \n       100 \n       31 \n       48 \n     \n     \n       1 \n       2004-02 \n       75 \n       26 \n       49 \n     \n     \n       2 \n       2004-03 \n       67 \n       24 \n       47 \n     \n     \n       3 \n       2004-04 \n       70 \n       22 \n       48 \n     \n     \n       4 \n       2004-05 \n       72 \n       22 \n       43 \n     \n      Turn the  month  column into a  DateTime  data type (vs.  object ).  1 df . month   =   pd . to_datetime ( df . month )    Make it the index of the DataFrame. Include the  inplace  argument when setting the index of the DataFrame  df  so that we alter the original index and set it to the  month  column.  1\n2 df . set_index ( 'month' ,   inplace = True )  df . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       diet \n       gym \n       finance \n     \n     \n       month \n       \n       \n       \n     \n   \n   \n     \n       2004-01-01 \n       100 \n       31 \n       48 \n     \n     \n       2004-02-01 \n       75 \n       26 \n       49 \n     \n     \n       2004-03-01 \n       67 \n       24 \n       47 \n     \n     \n       2004-04-01 \n       70 \n       22 \n       48 \n     \n     \n       2004-05-01 \n       72 \n       22 \n       43",
            "title": "Wrangle the Data"
        },
        {
            "location": "/Time_Series_Analysis/#exploratory-data-analysis-eda",
            "text": "Use a built-in  pandas  visualization method  .plot ()  to plot the data. Specify the label on the x-axis.  1\n2 df . plot ( figsize = ( 20 , 10 ),   linewidth = 5 ,   fontsize = 20 )  plt . xlabel ( 'Year' ,   fontsize = 20 );     A value of 100 is the peak popularity for the term. A value of 50 means that the term is half as popular. Likewise a score of 0 means the term was less than 1% as popular as the peak.  Plot one column.  1\n2 df [[ 'diet' ]] . plot ( figsize = ( 20 , 10 ),   linewidth = 5 ,   fontsize = 20 )  plt . xlabel ( 'Year' ,   fontsize = 20 );",
            "title": "Exploratory Data Analysis (EDA)"
        },
        {
            "location": "/Time_Series_Analysis/#trends-and-seasonality-in-time-series",
            "text": "",
            "title": "Trends and Seasonality in Time Series"
        },
        {
            "location": "/Time_Series_Analysis/#identifying-trends-in-time-series",
            "text": "Take a rolling average to remove the seasonality and see the trend. 12 months for example (before and after each point).  1\n2\n3\n4\n5\n6\n7\n8\n9 # Extract one column,   # but do not create a Series with df['diet']  diet   =   df [[ 'diet' ]]  # Chain: rolling, avg, plot  diet . rolling ( 12 ) . mean () . plot ( figsize = ( 20 , 10 ),   linewidth = 5 ,   fontsize = 20 )  # Plot  plt . xlabel ( 'Year' ,   fontsize = 20 )    1 <matplotlib.text.Text at 0x7f3c0630c240>    1\n2\n3\n4\n5\n6\n7\n8 # Another column  gym   =   df [[ 'gym' ]]  # Chain  gym . rolling ( 12 ) . mean () . plot ( figsize = ( 20 , 10 ),   linewidth = 5 ,   fontsize = 20 )  # Plot  plt . xlabel ( 'Year' ,   fontsize = 20 )    1 <matplotlib.text.Text at 0x7f3c0da837f0>    1\n2\n3\n4\n5\n6\n7\n8 # Create a new df with both  df_rm   =   pd . concat ([ diet . rolling ( 12 ) . mean (),   gym . rolling ( 12 ) . mean ()],   axis = 1 )  # Chain  df_rm . plot ( figsize = ( 20 , 10 ),   linewidth = 5 ,   fontsize = 20 )  # Plot  plt . xlabel ( 'Year' ,   fontsize = 20 )    1 <matplotlib.text.Text at 0x7f3c0621c7f0>",
            "title": "Identifying Trends in Time Series"
        },
        {
            "location": "/Time_Series_Analysis/#seasonal-patterns-in-time-series",
            "text": "We can remove the trend from the time series by subtracting the rolling mean from the original signal, leaving the seasonality only and turning the data into a stationary time series (such as mean and variance don\u2019t change over time). Many time series forecasting methods are based on the assumption that the time series is approximately stationary.  Another way to remove the trend is called \u201cdifferencing\u201d.",
            "title": "Seasonal Patterns in Time Series"
        },
        {
            "location": "/Time_Series_Analysis/#first-order-differencing",
            "text": "Difference between one data point and the one before it.  Second-order differencing  means that we would be looking at the difference between one data point and the two that precede it.  More on differencing .  1\n2\n3\n4\n5 # Differencing  diet . diff () . plot ( figsize = ( 20 , 10 ),   linewidth = 5 ,   fontsize = 20 )  # Plot  plt . xlabel ( 'Year' ,   fontsize = 20 );",
            "title": "First-order differencing"
        },
        {
            "location": "/Time_Series_Analysis/#periodicity-and-autocorrelation",
            "text": "A time series is periodic if it repeats itself at equally spaced intervals, say, every 12 months.  Yet another way of thinking about this is that the time series is correlated with itself shifted by 12 months. That means that, if we took the time series and moved it 12 months backwards or forwards, it would map onto itself in some way: autocorrelation.",
            "title": "Periodicity and Autocorrelation"
        },
        {
            "location": "/Time_Series_Analysis/#a-word-about-correlation",
            "text": "1\n2\n3\n4\n5\n6\n7 from   sklearn   import   datasets  iris   =   datasets . load_iris ()  df_iris   =   pd . DataFrame ( data   =   np . c_ [ iris [ 'data' ],   iris [ 'target' ]], \n                        columns   =   iris [ 'feature_names' ]   +   [ 'target' ])  df_iris . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       sepal length (cm) \n       sepal width (cm) \n       petal length (cm) \n       petal width (cm) \n       target \n     \n   \n   \n     \n       0 \n       5.1 \n       3.5 \n       1.4 \n       0.2 \n       0.0 \n     \n     \n       1 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       0.0 \n     \n     \n       2 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       0.0 \n     \n      1\n2 sns . lmplot ( x = 'sepal length (cm)' ,   y = 'sepal width (cm)' , \n            fit_reg = False ,   data = df_iris )    1 <seaborn.axisgrid.FacetGrid at 0x7f3c060fb5f8>    1\n2 sns . lmplot ( x = 'sepal length (cm)' ,   y = 'sepal width (cm)' , \n            fit_reg = True ,   data = df_iris );     1\n2 sns . lmplot ( x = 'sepal length (cm)' ,   y = 'sepal width (cm)' , \n            fit_reg = False ,   data = df_iris ,   hue = 'target' )    1 <seaborn.axisgrid.FacetGrid at 0x7f3c060b7438>    1 df_iris . corr ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       sepal length (cm) \n       sepal width (cm) \n       petal length (cm) \n       petal width (cm) \n       target \n     \n   \n   \n     \n       sepal length (cm) \n       1.000000 \n       -0.109369 \n       0.871754 \n       0.817954 \n       0.782561 \n     \n     \n       sepal width (cm) \n       -0.109369 \n       1.000000 \n       -0.420516 \n       -0.356544 \n       -0.419446 \n     \n     \n       petal length (cm) \n       0.871754 \n       -0.420516 \n       1.000000 \n       0.962757 \n       0.949043 \n     \n     \n       petal width (cm) \n       0.817954 \n       -0.356544 \n       0.962757 \n       1.000000 \n       0.956464 \n     \n     \n       target \n       0.782561 \n       -0.419446 \n       0.949043 \n       0.956464 \n       1.000000 \n     \n      1 df_iris . groupby ([ 'target' ]) . corr ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       \n       petal length (cm) \n       petal width (cm) \n       sepal length (cm) \n       sepal width (cm) \n     \n     \n       target \n       \n       \n       \n       \n       \n     \n   \n   \n     \n       0.0 \n       petal length (cm) \n       1.000000 \n       0.306308 \n       0.263874 \n       0.176695 \n     \n     \n       petal width (cm) \n       0.306308 \n       1.000000 \n       0.279092 \n       0.279973 \n     \n     \n       sepal length (cm) \n       0.263874 \n       0.279092 \n       1.000000 \n       0.746780 \n     \n     \n       sepal width (cm) \n       0.176695 \n       0.279973 \n       0.746780 \n       1.000000 \n     \n     \n       1.0 \n       petal length (cm) \n       1.000000 \n       0.786668 \n       0.754049 \n       0.560522 \n     \n     \n       petal width (cm) \n       0.786668 \n       1.000000 \n       0.546461 \n       0.663999 \n     \n     \n       sepal length (cm) \n       0.754049 \n       0.546461 \n       1.000000 \n       0.525911 \n     \n     \n       sepal width (cm) \n       0.560522 \n       0.663999 \n       0.525911 \n       1.000000 \n     \n     \n       2.0 \n       petal length (cm) \n       1.000000 \n       0.322108 \n       0.864225 \n       0.401045 \n     \n     \n       petal width (cm) \n       0.322108 \n       1.000000 \n       0.281108 \n       0.537728 \n     \n     \n       sepal length (cm) \n       0.864225 \n       0.281108 \n       1.000000 \n       0.457228 \n     \n     \n       sepal width (cm) \n       0.401045 \n       0.537728 \n       0.457228 \n       1.000000",
            "title": "A Word about Correlation"
        },
        {
            "location": "/Time_Series_Analysis/#periodicity-and-autocorrelation-continued",
            "text": "The time series again.  1\n2 df . plot ( figsize = ( 20 , 10 ),   linewidth = 5 ,   fontsize = 20 )  plt . xlabel ( 'Year' ,   fontsize = 20 )    1 <matplotlib.text.Text at 0x7f3c062fd390>    1 df . corr ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       diet \n       gym \n       finance \n     \n   \n   \n     \n       diet \n       1.000000 \n       -0.100764 \n       -0.034639 \n     \n     \n       gym \n       -0.100764 \n       1.000000 \n       -0.284279 \n     \n     \n       finance \n       -0.034639 \n       -0.284279 \n       1.000000 \n     \n      diet  and  gym  are negatively correlated. However, from looking at the times series, it looks as though their seasonal components would be positively correlated and their trends negatively correlated. The actual correlation coefficient is actually capturing both of those.  1\n2\n3 # first-order differences  df . diff () . plot ( figsize = ( 20 , 10 ),   linewidth = 5 ,   fontsize = 20 )  plt . xlabel ( 'Year' ,   fontsize = 20 )    1 <matplotlib.text.Text at 0x7f3c05fcfac8>    diet  and  gym  are incredibly correlated once we remove the trend.  1 df . diff () . corr ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       diet \n       gym \n       finance \n     \n   \n   \n     \n       diet \n       1.000000 \n       0.758707 \n       0.373828 \n     \n     \n       gym \n       0.758707 \n       1.000000 \n       0.301111 \n     \n     \n       finance \n       0.373828 \n       0.301111 \n       1.000000",
            "title": "Periodicity and Autocorrelation (continued)"
        },
        {
            "location": "/Time_Series_Analysis/#autocorrelation",
            "text": "Autocorrelation of the \u2018diet\u2019 series: on the x-axis, we have the lag and on the y-axis, we have how correlated the time series is with itself at that lag.  So, this means that if the original time series repeats itself every two days, we would expect to see a spike in the autocorrelation function at 2 days.  1 pd . plotting . autocorrelation_plot ( diet )    1 <matplotlib.axes._subplots.AxesSubplot at 0x7f3c05f587b8>    This is 12 months at which we have this huge peak in correlation. We have another peak at a 24 month interval, where it\u2019s also correlated with itself. We have another peak at 36, but as we move further away, there\u2019s less and less of a correlation.  The dotted lines in the above plot actually tell us about the statistical significance of the correlation.",
            "title": "Autocorrelation"
        },
        {
            "location": "/Time_Series_Analysis/#forecasts-arima",
            "text": "Use ARIMA modeling to make some time series forecasts as to what these search trends will look like over the coming years.",
            "title": "Forecasts, ARIMA..."
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/",
            "text": "CONTENT\n\n\nImport the modules and connect to Tweeter\n\n\nRetrieve tweets\n\n\nPerform sentiment analysis\n\n\nAn overview of NLP (with nltk and textblob)\n\n\nApplications\n\n\nQuery Tweeter, generate categorical results, populate a list of dictionaries\n\n\nQuery Tweeter, generate categorical results, populate a dictionary of lists, write files, compute statistics\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nImport the modules and connect to Tweeter\n\u00b6\n\n\nFrom this \nlink\n, analyze sentiments and perform text mining: tokenization, bag words, sentiment value from a lexicon. Psychology and Sociology. Consumer satisfaction. Comments.\n\n\nFind out about \ntweepy\n (Twitter API) and \ntextblob\n. TextBlob stands on the shoulders of NLTK and process textual data. It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification, translation, and more.\n\n\n1\n2\n3\n4\nimport\n \npandas\n \nas\n \npd\n\n\n\n# store the keys in a file to keep them private\n\n\ntwitter_api\n \n=\n \npd\n.\nread_csv\n(\n'twitter_api.csv'\n,\n \nheader\n=\n0\n,\n \nsep\n=\n','\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \ntweepy\n\n\nfrom\n \ntextblob\n \nimport\n \nTextBlob\n\n\n\n# must have a Twitter account, see the video\n\n\n\n# authenticate with...\n\n\n# api_key\n\n\nconsumer_key\n \n=\n \ntwitter_api\n.\nget_value\n(\n0\n,\n \n'api_key'\n)\n\n\n# api_secret\n\n\nconsumer_secret\n \n=\n \ntwitter_api\n.\nget_value\n(\n0\n,\n \n'api_secret'\n)\n\n\n# access token\n\n\naccess_token\n \n=\n \ntwitter_api\n.\nget_value\n(\n0\n,\n \n'access_token'\n)\n\n\n# access secret\n\n\naccess_token_secret\n \n=\n \ntwitter_api\n.\nget_value\n(\n0\n,\n \n'access_secret'\n)\n\n\n\nauth\n \n=\n \ntweepy\n.\nOAuthHandler\n(\nconsumer_key\n,\n \nconsumer_secret\n)\n\n\nauth\n.\nset_access_token\n(\naccess_token\n,\n \naccess_token_secret\n)\n\n\n\napi\n \n=\n \ntweepy\n.\nAPI\n(\nauth\n)\n\n\n\n\n\n\n\nRetrieve tweets\n\u00b6\n\n\n1\n2\n3\n4\n5\n# retrieve tweets with the API\n\n\npublic_tweets\n \n=\n \napi\n.\nsearch\n(\n'Climate'\n)\n\n\n\nfor\n \ntweet\n \nin\n \npublic_tweets\n:\n\n    \nprint\n(\ntweet\n.\ntext\n)\n\n\n\n\n\n\n\nPerform sentiment analysis\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# perform sentiment analysis on each tweet\n\n\n# -1 < polarity < 1 (negativity vs positivity (sentiment))\n\n\n# 0 < subjectivity < 1 (factual vs opinion)\n\n\nfor\n \ntweet\n \nin\n \npublic_tweets\n:\n\n    \nprint\n(\ntweet\n.\ntext\n)\n\n    \nanalysis\n \n=\n \nTextBlob\n(\ntweet\n.\ntext\n)\n\n    \nprint\n(\nanalysis\n.\nsentiment\n)\n\n    \nprint\n(\n\"----------\"\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# create a list of dictionaries\n\n\n# each dictionary contains a tweet text and user\n\n\n# the list bundle up the dictionaries\n\n\nsaved_tweets\n \n=\n \n[]\n\n\nfor\n \ntweet\n \nin\n \npublic_tweets\n:\n\n    \nparsed_tweet\n \n=\n \n{}\n\n    \nparsed_tweet\n[\n'text'\n]\n \n=\n \ntweet\n.\ntext\n\n    \nparsed_tweet\n[\n'user'\n]\n \n=\n \ntweet\n.\nuser\n.\nscreen_name\n\n    \nsaved_tweets\n.\nappend\n(\nparsed_tweet\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n# convert the list into a data frame\n\n\nsaved_tweets_df\n \n=\n \npd\n.\nDataFrame\n(\nsaved_tweets\n)\n\n\n# print the head\n\n\nprint\n(\nsaved_tweets_df\n.\nhead\n(\n3\n))\n\n\n\n\n\n\n\n1\n2\n# save the data frame into a csv file\n\n\nsaved_tweets_df\n.\nto_csv\n(\n'saved_tweets_df.csv'\n)\n\n\n\n\n\n\n\nAn overview of NLP (with \nnltk\n and \ntextblob\n)\n\u00b6\n\n\nMake sure to install the \nnltk\n (with pip or conda) module and then run \npython -m textblob.download_corpora\n.\n\n\n1\n2\n# a comment or an opinion\n\n\ncomment\n \n=\n \nTextBlob\n(\n\"I am angry that I never get good players in my pool\"\n)\n\n\n\n\n\n\n\n1\nprint\n(\ncomment\n)\n\n\n\n\n\n\n\n1\n2\n# tags are not token\n\n\nprint\n(\ncomment\n.\ntags\n)\n\n\n\n\n\n\n\n1\n2\n# words are like tokens\n\n\nprint\n(\ncomment\n.\nwords\n)\n\n\n\n\n\n\n\n1\n2\n# -1 < polarity < 1 (negativity vs positivity (sentiment))\n\n\nprint\n(\ncomment\n.\nsentiment\n.\npolarity\n)\n\n\n\n\n\n\n\n1\n2\n# 0 < subjectivity < 1 (factual vs opinion)\n\n\nprint\n(\ncomment\n.\nsentiment\n.\nsubjectivity\n)\n\n\n\n\n\n\n\n1\n2\n# both\n\n\nprint\n(\ncomment\n.\nsentiment\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n# a fact\n\n\nfact\n \n=\n \nTextBlob\n(\n\"The sun is setting at the moment\"\n)\n\n\n\nprint\n(\nfact\n.\nsentiment\n)\n\n\n\n\n\n\n\nApplications\n\u00b6\n\n\nQuery Tweeter, generate categorical results, populate a list of dictionaries\n\u00b6\n\n\nPointers:\n\n\n\n\nUse of functions and a class.\n\n\nError-handling authentication.\n\n\nQuery tweets, retweets, etc.\n\n\nGenerate categorical results with sentiment analysis.\n\n\nCreate a list of little dictionaries for parsing and containing tweet data and metadata.\n\n\nError-handling parsing.\n\n\nFilter retweets.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\nimport\n \nos\n\n\nimport\n \nre\n\n\nimport\n \ntweepy\n\n\nfrom\n \ntweepy\n \nimport\n \nOAuthHandler\n\n\nfrom\n \ntextblob\n \nimport\n \nTextBlob\n\n\n\n\nclass\n \nTwitterClient\n(\nobject\n):\n\n    \n'''\n\n\n    Generic Twitter Class for the App\n\n\n    '''\n\n    \ndef\n \n__init__\n(\nself\n,\n \nquery\n,\n \nretweets_only\n=\nFalse\n,\n \nwith_sentiment\n=\nFalse\n):\n\n        \n# keys and tokens from the Twitter Dev Console\n\n        \nconsumer_key\n \n=\n \nos\n.\nenviron\n[\n'CONSUMER_KEY'\n]\n\n        \nconsumer_secret\n \n=\n \nos\n.\nenviron\n[\n'CONSUMER_SECRET'\n]\n\n        \naccess_token\n \n=\n \nos\n.\nenviron\n[\n'ACCESS_TOKEN'\n]\n\n        \naccess_token_secret\n \n=\n \nos\n.\nenviron\n[\n'ACCESS_TOKEN_SECRET'\n]\n\n        \n# Attempt authentication\n\n        \ntry\n:\n\n            \nself\n.\nauth\n \n=\n \nOAuthHandler\n(\nconsumer_key\n,\n \nconsumer_secret\n)\n\n            \nself\n.\nauth\n.\nset_access_token\n(\naccess_token\n,\n \naccess_token_secret\n)\n\n            \nself\n.\nquery\n \n=\n \nquery\n\n            \nself\n.\nretweets_only\n \n=\n \nretweets_only\n\n            \nself\n.\nwith_sentiment\n \n=\n \nwith_sentiment\n\n            \nself\n.\napi\n \n=\n \ntweepy\n.\nAPI\n(\nself\n.\nauth\n)\n\n            \nself\n.\ntweet_count_max\n \n=\n \n100\n  \n# To prevent Rate Limiting\n\n        \nexcept\n:\n\n            \nprint\n(\n\"Error: Authentication Failed\"\n)\n\n\n    \ndef\n \nset_query\n(\nself\n,\n \nquery\n=\n''\n):\n\n        \nself\n.\nquery\n \n=\n \nquery\n\n\n    \ndef\n \nset_retweet_checking\n(\nself\n,\n \nretweets_only\n=\n'false'\n):\n\n        \nself\n.\nretweets_only\n \n=\n \nretweets_only\n\n\n    \ndef\n \nset_with_sentiment\n(\nself\n,\n \nwith_sentiment\n=\n'false'\n):\n\n        \nself\n.\nwith_sentiment\n \n=\n \nwith_sentiment\n\n\n    \ndef\n \nclean_tweet\n(\nself\n,\n \ntweet\n):\n\n        \nreturn\n \n' '\n.\njoin\n(\nre\n.\nsub\n(\n\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \n\\t\n])|(\\w+:\\/\\/\\S+)\"\n,\n \n\" \"\n,\n \ntweet\n)\n.\nsplit\n())\n\n\n    \ndef\n \nget_tweet_sentiment\n(\nself\n,\n \ntweet\n):\n\n        \nanalysis\n \n=\n \nTextBlob\n(\nself\n.\nclean_tweet\n(\ntweet\n))\n\n        \nif\n \nanalysis\n.\nsentiment\n.\npolarity\n \n>\n \n0\n:\n\n            \nreturn\n \n'positive'\n\n        \nelif\n \nanalysis\n.\nsentiment\n.\npolarity\n \n==\n \n0\n:\n\n            \nreturn\n \n'neutral'\n\n        \nelse\n:\n\n            \nreturn\n \n'negative'\n\n\n    \ndef\n \nget_tweets\n(\nself\n):\n\n        \ntweets\n \n=\n \n[]\n\n\n        \ntry\n:\n\n            \nrecd_tweets\n \n=\n \nself\n.\napi\n.\nsearch\n(\nq\n=\nself\n.\nquery\n,\n\n                                          \ncount\n=\nself\n.\ntweet_count_max\n)\n\n            \nif\n \nnot\n \nrecd_tweets\n:\n\n                \npass\n\n            \nfor\n \ntweet\n \nin\n \nrecd_tweets\n:\n\n                \nparsed_tweet\n \n=\n \n{}\n\n\n                \nparsed_tweet\n[\n'text'\n]\n \n=\n \ntweet\n.\ntext\n\n                \nparsed_tweet\n[\n'user'\n]\n \n=\n \ntweet\n.\nuser\n.\nscreen_name\n\n\n                \nif\n \nself\n.\nwith_sentiment\n \n==\n \n1\n:\n\n                    \nparsed_tweet\n[\n'sentiment'\n]\n \n=\n \nself\n.\nget_tweet_sentiment\n(\ntweet\n.\ntext\n)\n\n                \nelse\n:\n\n                    \nparsed_tweet\n[\n'sentiment'\n]\n \n=\n \n'unavailable'\n\n\n                \nif\n \ntweet\n.\nretweet_count\n \n>\n \n0\n \nand\n \nself\n.\nretweets_only\n \n==\n \n1\n:\n\n                    \nif\n \nparsed_tweet\n \nnot\n \nin\n \ntweets\n:\n\n                        \ntweets\n.\nappend\n(\nparsed_tweet\n)\n\n                \nelif\n \nnot\n \nself\n.\nretweets_only\n:\n\n                    \nif\n \nparsed_tweet\n \nnot\n \nin\n \ntweets\n:\n\n                        \ntweets\n.\nappend\n(\nparsed_tweet\n)\n\n\n            \nreturn\n \ntweets\n\n\n        \nexcept\n \ntweepy\n.\nTweepError\n \nas\n \ne\n:\n\n\nprint\n(\n\"Error : \"\n \n+\n \nstr\n(\ne\n))\n\n\n\n\n\n\n\nQuery Tweeter, generate categorical results, populate a dictionary of lists, write files, compute statistics\n\u00b6\n\n\nPointers:\n\n\n\n\nScope the queries: keywords, dates.\n\n\nGenerate categorical results with sentiment analysis.\n\n\nGenerate a dictionary of lists.\n\n\nWrite a file for each candidate (not pandas involved); the list.\n\n\nEnrich each tweet for each candidate with sentiment analysis and the mean values; the list.\n\n\nBuild a list of all sentiment analysis.\n\n\nWith the dictionary of lists, sort the mean values and rank the keywords.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\nimport\n \ntweepy\n\n\nfrom\n \ntextblob\n \nimport\n \nTextBlob\n\n\n#French adaptor\n\n\nfrom\n \ntextblob_fr\n \nimport\n \nPatternTagger\n,\n \nPatternAnalyzer\n\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \noperator\n\n\n\n\n# Step 1 - Authenticate\n\n\nconsumer_key\n=\n \n'CONSUMER_KEY_HERE'\n\n\nconsumer_secret\n=\n \n'CONSUMER_SECRET_HERE'\n\n\n\naccess_token\n=\n'ACCESS_TOKEN_HERE'\n\n\naccess_token_secret\n=\n'ACCESS_TOKEN_SECRET_HERE'\n\n\n\nauth\n \n=\n \ntweepy\n.\nOAuthHandler\n(\nconsumer_key\n,\n \nconsumer_secret\n)\n\n\nauth\n.\nset_access_token\n(\naccess_token\n,\n \naccess_token_secret\n)\n\n\n\napi\n \n=\n \ntweepy\n.\nAPI\n(\nauth\n)\n\n\n\n#Step 2 - Prepare query features\n\n\n\n#List of candidates to French Republicans Primary Elections\n\n\ncandidates_names\n \n=\n \n[\n'Sarkozy'\n,\n \n'Kosciusko'\n,\n \n'Cope'\n,\n \n'Juppe'\n,\n \n'Fillon'\n,\n \n'Le Maire'\n,\n \n'Poisson'\n]\n\n\n#Hashtag related to the debate\n\n\nname_of_debate\n \n=\n \n\"PrimaireLeDebat\"\n \n\n#Date of the debate : October 13th\n\n\nsince_date\n \n=\n \n\"2016-10-13\"\n\n\nuntil_date\n \n=\n \n\"2016-10-14\"\n\n\n\n#Step 2b - Function of labelisation of analysis\n\n\ndef\n \nget_label\n(\nanalysis\n,\n \nthreshold\n \n=\n \n0\n):\n\n    \nif\n \nanalysis\n.\nsentiment\n[\n0\n]\n>\nthreshold\n:\n\n        \nreturn\n \n'Positive'\n\n    \nelse\n:\n\n        \nreturn\n \n'Negative'\n\n\n\n\n#Step 3 - Retrieve Tweets and Save Them\n\n\nall_polarities\n \n=\n \ndict\n()\n\n\nfor\n \ncandidate\n \nin\n \ncandidates_names\n:\n\n    \nthis_candidate_polarities\n \n=\n \n[]\n\n    \n#Get the tweets about the debate and the candidate between the dates\n\n    \nthis_candidate_tweets\n \n=\n \napi\n.\nsearch\n(\nq\n=\n[\nname_of_debate\n,\n \ncandidate\n],\n \ncount\n=\n100\n,\n \nsince\n \n=\n \nsince_date\n,\n \nuntil\n=\nuntil_date\n)\n\n    \n#Save the tweets in csv\n\n    \nwith\n \nopen\n(\n'\n%s\n_tweets.csv'\n \n%\n \ncandidate\n,\n \n'wb'\n)\n \nas\n \nthis_candidate_file\n:\n\n        \nthis_candidate_file\n.\nwrite\n(\n'tweet,sentiment_label\n\\n\n'\n)\n\n        \nfor\n \ntweet\n \nin\n \nthis_candidate_tweets\n:\n\n            \nanalysis\n \n=\n \nTextBlob\n(\ntweet\n.\ntext\n,\n \npos_tagger\n=\nPatternTagger\n(),\n \nanalyzer\n=\nPatternAnalyzer\n())\n\n            \n#Get the label corresponding to the sentiment analysis\n\n            \nthis_candidate_polarities\n.\nappend\n(\nanalysis\n.\nsentiment\n[\n0\n])\n\n            \nthis_candidate_file\n.\nwrite\n(\n'\n%s\n,\n%s\n\\n\n'\n \n%\n \n(\ntweet\n.\ntext\n.\nencode\n(\n'utf8'\n),\n \nget_label\n(\nanalysis\n)))\n\n    \n#Save the mean for final results\n\n    \nall_polarities\n[\ncandidate\n]\n \n=\n \nnp\n.\nmean\n(\nthis_candidate_polarities\n)\n\n\n\n#Step bonus - Print a Result\n\n\nsorted_analysis\n \n=\n \nsorted\n(\nall_polarities\n.\nitems\n(),\n \nkey\n=\noperator\n.\nitemgetter\n(\n1\n),\n \nreverse\n=\nTrue\n)\n\n\nprint\n \n'Mean Sentiment Polarity in descending order :'\n\n\nfor\n \ncandidate\n,\n \npolarity\n \nin\n \nsorted_analysis\n:\n\n\nprint\n \n'\n%s\n : \n%0.3f\n'\n \n%\n \n(\ncandidate\n,\n \npolarity\n)",
            "title": "Sentiment Analysis with Twitter"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#retrieve-tweets",
            "text": "1\n2\n3\n4\n5 # retrieve tweets with the API  public_tweets   =   api . search ( 'Climate' )  for   tweet   in   public_tweets : \n     print ( tweet . text )",
            "title": "Retrieve tweets"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#perform-sentiment-analysis",
            "text": "1\n2\n3\n4\n5\n6\n7\n8 # perform sentiment analysis on each tweet  # -1 < polarity < 1 (negativity vs positivity (sentiment))  # 0 < subjectivity < 1 (factual vs opinion)  for   tweet   in   public_tweets : \n     print ( tweet . text ) \n     analysis   =   TextBlob ( tweet . text ) \n     print ( analysis . sentiment ) \n     print ( \"----------\" )    1\n2\n3\n4\n5\n6\n7\n8\n9 # create a list of dictionaries  # each dictionary contains a tweet text and user  # the list bundle up the dictionaries  saved_tweets   =   []  for   tweet   in   public_tweets : \n     parsed_tweet   =   {} \n     parsed_tweet [ 'text' ]   =   tweet . text \n     parsed_tweet [ 'user' ]   =   tweet . user . screen_name \n     saved_tweets . append ( parsed_tweet )    1\n2\n3\n4 # convert the list into a data frame  saved_tweets_df   =   pd . DataFrame ( saved_tweets )  # print the head  print ( saved_tweets_df . head ( 3 ))    1\n2 # save the data frame into a csv file  saved_tweets_df . to_csv ( 'saved_tweets_df.csv' )",
            "title": "Perform sentiment analysis"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#an-overview-of-nlp-with-nltk-and-textblob",
            "text": "Make sure to install the  nltk  (with pip or conda) module and then run  python -m textblob.download_corpora .  1\n2 # a comment or an opinion  comment   =   TextBlob ( \"I am angry that I never get good players in my pool\" )    1 print ( comment )    1\n2 # tags are not token  print ( comment . tags )    1\n2 # words are like tokens  print ( comment . words )    1\n2 # -1 < polarity < 1 (negativity vs positivity (sentiment))  print ( comment . sentiment . polarity )    1\n2 # 0 < subjectivity < 1 (factual vs opinion)  print ( comment . sentiment . subjectivity )    1\n2 # both  print ( comment . sentiment )    1\n2\n3\n4 # a fact  fact   =   TextBlob ( \"The sun is setting at the moment\" )  print ( fact . sentiment )",
            "title": "An overview of NLP (with nltk and textblob)"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#applications",
            "text": "",
            "title": "Applications"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#query-tweeter-generate-categorical-results-populate-a-list-of-dictionaries",
            "text": "Pointers:   Use of functions and a class.  Error-handling authentication.  Query tweets, retweets, etc.  Generate categorical results with sentiment analysis.  Create a list of little dictionaries for parsing and containing tweet data and metadata.  Error-handling parsing.  Filter retweets.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80 import   os  import   re  import   tweepy  from   tweepy   import   OAuthHandler  from   textblob   import   TextBlob  class   TwitterClient ( object ): \n     '''      Generic Twitter Class for the App      ''' \n     def   __init__ ( self ,   query ,   retweets_only = False ,   with_sentiment = False ): \n         # keys and tokens from the Twitter Dev Console \n         consumer_key   =   os . environ [ 'CONSUMER_KEY' ] \n         consumer_secret   =   os . environ [ 'CONSUMER_SECRET' ] \n         access_token   =   os . environ [ 'ACCESS_TOKEN' ] \n         access_token_secret   =   os . environ [ 'ACCESS_TOKEN_SECRET' ] \n         # Attempt authentication \n         try : \n             self . auth   =   OAuthHandler ( consumer_key ,   consumer_secret ) \n             self . auth . set_access_token ( access_token ,   access_token_secret ) \n             self . query   =   query \n             self . retweets_only   =   retweets_only \n             self . with_sentiment   =   with_sentiment \n             self . api   =   tweepy . API ( self . auth ) \n             self . tweet_count_max   =   100    # To prevent Rate Limiting \n         except : \n             print ( \"Error: Authentication Failed\" ) \n\n     def   set_query ( self ,   query = '' ): \n         self . query   =   query \n\n     def   set_retweet_checking ( self ,   retweets_only = 'false' ): \n         self . retweets_only   =   retweets_only \n\n     def   set_with_sentiment ( self ,   with_sentiment = 'false' ): \n         self . with_sentiment   =   with_sentiment \n\n     def   clean_tweet ( self ,   tweet ): \n         return   ' ' . join ( re . sub ( \"(@[A-Za-z0-9]+)|([^0-9A-Za-z  \\t ])|(\\w+:\\/\\/\\S+)\" ,   \" \" ,   tweet ) . split ()) \n\n     def   get_tweet_sentiment ( self ,   tweet ): \n         analysis   =   TextBlob ( self . clean_tweet ( tweet )) \n         if   analysis . sentiment . polarity   >   0 : \n             return   'positive' \n         elif   analysis . sentiment . polarity   ==   0 : \n             return   'neutral' \n         else : \n             return   'negative' \n\n     def   get_tweets ( self ): \n         tweets   =   [] \n\n         try : \n             recd_tweets   =   self . api . search ( q = self . query , \n                                           count = self . tweet_count_max ) \n             if   not   recd_tweets : \n                 pass \n             for   tweet   in   recd_tweets : \n                 parsed_tweet   =   {} \n\n                 parsed_tweet [ 'text' ]   =   tweet . text \n                 parsed_tweet [ 'user' ]   =   tweet . user . screen_name \n\n                 if   self . with_sentiment   ==   1 : \n                     parsed_tweet [ 'sentiment' ]   =   self . get_tweet_sentiment ( tweet . text ) \n                 else : \n                     parsed_tweet [ 'sentiment' ]   =   'unavailable' \n\n                 if   tweet . retweet_count   >   0   and   self . retweets_only   ==   1 : \n                     if   parsed_tweet   not   in   tweets : \n                         tweets . append ( parsed_tweet ) \n                 elif   not   self . retweets_only : \n                     if   parsed_tweet   not   in   tweets : \n                         tweets . append ( parsed_tweet ) \n\n             return   tweets \n\n         except   tweepy . TweepError   as   e :  print ( \"Error : \"   +   str ( e ))",
            "title": "Query Tweeter, generate categorical results, populate a list of dictionaries"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#query-tweeter-generate-categorical-results-populate-a-dictionary-of-lists-write-files-compute-statistics",
            "text": "Pointers:   Scope the queries: keywords, dates.  Generate categorical results with sentiment analysis.  Generate a dictionary of lists.  Write a file for each candidate (not pandas involved); the list.  Enrich each tweet for each candidate with sentiment analysis and the mean values; the list.  Build a list of all sentiment analysis.  With the dictionary of lists, sort the mean values and rank the keywords.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61 import   tweepy  from   textblob   import   TextBlob  #French adaptor  from   textblob_fr   import   PatternTagger ,   PatternAnalyzer  import   numpy   as   np  import   operator  # Step 1 - Authenticate  consumer_key =   'CONSUMER_KEY_HERE'  consumer_secret =   'CONSUMER_SECRET_HERE'  access_token = 'ACCESS_TOKEN_HERE'  access_token_secret = 'ACCESS_TOKEN_SECRET_HERE'  auth   =   tweepy . OAuthHandler ( consumer_key ,   consumer_secret )  auth . set_access_token ( access_token ,   access_token_secret )  api   =   tweepy . API ( auth )  #Step 2 - Prepare query features  #List of candidates to French Republicans Primary Elections  candidates_names   =   [ 'Sarkozy' ,   'Kosciusko' ,   'Cope' ,   'Juppe' ,   'Fillon' ,   'Le Maire' ,   'Poisson' ]  #Hashtag related to the debate  name_of_debate   =   \"PrimaireLeDebat\"   #Date of the debate : October 13th  since_date   =   \"2016-10-13\"  until_date   =   \"2016-10-14\"  #Step 2b - Function of labelisation of analysis  def   get_label ( analysis ,   threshold   =   0 ): \n     if   analysis . sentiment [ 0 ] > threshold : \n         return   'Positive' \n     else : \n         return   'Negative'  #Step 3 - Retrieve Tweets and Save Them  all_polarities   =   dict ()  for   candidate   in   candidates_names : \n     this_candidate_polarities   =   [] \n     #Get the tweets about the debate and the candidate between the dates \n     this_candidate_tweets   =   api . search ( q = [ name_of_debate ,   candidate ],   count = 100 ,   since   =   since_date ,   until = until_date ) \n     #Save the tweets in csv \n     with   open ( ' %s _tweets.csv'   %   candidate ,   'wb' )   as   this_candidate_file : \n         this_candidate_file . write ( 'tweet,sentiment_label \\n ' ) \n         for   tweet   in   this_candidate_tweets : \n             analysis   =   TextBlob ( tweet . text ,   pos_tagger = PatternTagger (),   analyzer = PatternAnalyzer ()) \n             #Get the label corresponding to the sentiment analysis \n             this_candidate_polarities . append ( analysis . sentiment [ 0 ]) \n             this_candidate_file . write ( ' %s , %s \\n '   %   ( tweet . text . encode ( 'utf8' ),   get_label ( analysis ))) \n     #Save the mean for final results \n     all_polarities [ candidate ]   =   np . mean ( this_candidate_polarities )  #Step bonus - Print a Result  sorted_analysis   =   sorted ( all_polarities . items (),   key = operator . itemgetter ( 1 ),   reverse = True )  print   'Mean Sentiment Polarity in descending order :'  for   candidate ,   polarity   in   sorted_analysis :  print   ' %s  :  %0.3f '   %   ( candidate ,   polarity )",
            "title": "Query Tweeter, generate categorical results, populate a dictionary of lists, write files, compute statistics"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/",
            "text": "CONTENT\n\n\nExploratory Data Analysis (EDA) prior to Machine Learning\n\n\nHow to Start with Supervised Learning (Take 1)\n\n\nImport the Data and Explore it\n\n\nVisual Exploratory Data Analysis (EDA) and a First Model\n\n\nSubmit to Kaggle (1\nst\n)\n\n\n\n\n\n\nEDA on Feature Variables\n\n\nSubmit to Kaggle (2\nnd\n)\n\n\n\n\n\n\nExplore the Data More!\n\n\nEDA with Numeric Variables\n\n\n\n\n\n\nA First Machine Learning Model\n\n\nHow to Start with Supervised Learning (Take 2)\n\n\nBuild a Decision Tree Classifier\n\n\nSubmit to Kaggle (3\nrd\n)\n\n\n\n\n\n\nA Decision Tree Classifier in More Details\n\n\nWhy Choose max_depth=3?\n\n\n\n\n\n\nFeature Engineering\n\n\nHow to Start with Feature Engineering\n\n\nWhy Feature Engineer At All?\n\n\nTitanic\u2019s Passenger Titles\n\n\nPassenger\u2019s Cabins\n\n\nHandling Missing Values\n\n\nBinning Numerical Data\n\n\nNumber of Members in Family Onboard\n\n\nTransforming all Variables into Numerical Variables\n\n\n\n\n\n\nBuilding models with a New Dataset!\n\n\nSubmit to Kaggle (4\nth\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nExploratory Data Analysis (EDA) prior to Machine Learning\n\u00b6\n\n\nSupervised learning models with the help of exploratory data analysis (EDA) on the Titanic data.\n\n\nHow to Start with Supervised Learning (Take 1)\n\u00b6\n\n\nApproach supervised learning is the following:\n\n\n\n\nPerform an Exploratory Data Analysis (EDA) on a dataset;\n\n\nBuild a quick and dirty model, or a baseline model, which can serve as a comparison against later models that we will build;\n\n\nIterate this process. We will do more EDA and build another model;\n\n\nEngineer features: take the features that we already have and combine them or extract more information from them to eventually come to the last point, which is\n\n\nGet a model that performs better.\n\n\n\n\nImport the Data and Explore it\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# Import modules\n\n\nimport\n \npandas\n \nas\n \npd\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\nfrom\n \nsklearn\n \nimport\n \ntree\n\n\nfrom\n \nsklearn.metrics\n \nimport\n \naccuracy_score\n\n\n\n# Figures inline and set visualization style\n\n\n%\nmatplotlib\n \ninline\n\n\nsns\n.\nset\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Import test and train datasets\n\n\ndf_train\n \n=\n \npd\n.\nread_csv\n(\n'data/train.csv'\n)\n\n\ndf_test\n \n=\n \npd\n.\nread_csv\n(\n'data/test.csv'\n)\n\n\n\n# View first lines of training data\n\n\ndf_train\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nSurvived\n\n      \nPclass\n\n      \nName\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n0\n\n      \n3\n\n      \nBraund, Mr. Owen Harris\n\n      \nmale\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \nA/5 21171\n\n      \n7.2500\n\n      \nNaN\n\n      \nS\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \n1\n\n      \n1\n\n      \nCumings, Mrs. John Bradley (Florence Briggs Th...\n\n      \nfemale\n\n      \n38.0\n\n      \n1\n\n      \n0\n\n      \nPC 17599\n\n      \n71.2833\n\n      \nC85\n\n      \nC\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n1\n\n      \n3\n\n      \nHeikkinen, Miss. Laina\n\n      \nfemale\n\n      \n26.0\n\n      \n0\n\n      \n0\n\n      \nSTON/O2. 3101282\n\n      \n7.9250\n\n      \nNaN\n\n      \nS\n\n    \n\n  \n\n\n\n\n\n\n\n\n\nThe target variable is the variable we are trying to predict;\n\n\nOther variables are known as \u201cfeatures\u201d (or \u201cpredictor variables\u201d, the features that we are using to predict the target variable).\n\n\n\n\nNote that the \ndf_test\n DataFrame doesn\u2019t have the \nSurvived\n column because this is what we will try to predict!\n\n\n1\n2\n# View first lines of test data\n\n\ndf_test\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nPclass\n\n      \nName\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n892\n\n      \n3\n\n      \nKelly, Mr. James\n\n      \nmale\n\n      \n34.5\n\n      \n0\n\n      \n0\n\n      \n330911\n\n      \n7.8292\n\n      \nNaN\n\n      \nQ\n\n    \n\n    \n\n      \n1\n\n      \n893\n\n      \n3\n\n      \nWilkes, Mrs. James (Ellen Needs)\n\n      \nfemale\n\n      \n47.0\n\n      \n1\n\n      \n0\n\n      \n363272\n\n      \n7.0000\n\n      \nNaN\n\n      \nS\n\n    \n\n    \n\n      \n2\n\n      \n894\n\n      \n2\n\n      \nMyles, Mr. Thomas Francis\n\n      \nmale\n\n      \n62.0\n\n      \n0\n\n      \n0\n\n      \n240276\n\n      \n9.6875\n\n      \nNaN\n\n      \nQ\n\n    \n\n  \n\n\n\n\n\n\n\n1\ndf_train\n.\ninfo\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.6+ KB\n\n\n\n\n\n\n1\ndf_train\n.\ndescribe\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nSurvived\n\n      \nPclass\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nFare\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n891.000000\n\n      \n891.000000\n\n      \n891.000000\n\n      \n714.000000\n\n      \n891.000000\n\n      \n891.000000\n\n      \n891.000000\n\n    \n\n    \n\n      \nmean\n\n      \n446.000000\n\n      \n0.383838\n\n      \n2.308642\n\n      \n29.699118\n\n      \n0.523008\n\n      \n0.381594\n\n      \n32.204208\n\n    \n\n    \n\n      \nstd\n\n      \n257.353842\n\n      \n0.486592\n\n      \n0.836071\n\n      \n14.526497\n\n      \n1.102743\n\n      \n0.806057\n\n      \n49.693429\n\n    \n\n    \n\n      \nmin\n\n      \n1.000000\n\n      \n0.000000\n\n      \n1.000000\n\n      \n0.420000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n    \n\n    \n\n      \n25%\n\n      \n223.500000\n\n      \n0.000000\n\n      \n2.000000\n\n      \n20.125000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n7.910400\n\n    \n\n    \n\n      \n50%\n\n      \n446.000000\n\n      \n0.000000\n\n      \n3.000000\n\n      \n28.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n14.454200\n\n    \n\n    \n\n      \n75%\n\n      \n668.500000\n\n      \n1.000000\n\n      \n3.000000\n\n      \n38.000000\n\n      \n1.000000\n\n      \n0.000000\n\n      \n31.000000\n\n    \n\n    \n\n      \nmax\n\n      \n891.000000\n\n      \n1.000000\n\n      \n3.000000\n\n      \n80.000000\n\n      \n8.000000\n\n      \n6.000000\n\n      \n512.329200\n\n    \n\n  \n\n\n\n\n\n\n\nVisual Exploratory Data Analysis (EDA) and a First Model\n\u00b6\n\n\nWith seaborn.\n\n\n1\nsns\n.\ncountplot\n(\nx\n=\n'Survived'\n,\n \ndata\n=\ndf_train\n)\n\n\n\n\n\n\n\n1\n<matplotlib.axes._subplots.AxesSubplot at 0x7fc65fa0e668>\n\n\n\n\n\n\n\n\nTake-away\n: in the training set, less people survived than didn\u2019t. Let\u2019s then build a first model that predicts that nobody survived.\n\n\nThis is a bad model as we know that people survived. But it gives us a \nbaseline\n: any model that we build later needs to do better than this one.\n\n\n\n\nCreate a column \nSurvived\n for \ndf_test\n that encodes \u2018did not survive\u2019 for all rows;\n\n\nSave \nPassengerId\n and \nSurvived\n columns of \ndf_test\n to a .csv and submit to Kaggle.\n\n\n\n\n1\n2\ndf_test\n[\n'Survived'\n]\n \n=\n \n0\n\n\ndf_test\n[[\n'PassengerId'\n,\n \n'Survived'\n]]\n.\nto_csv\n(\n'results/no_survivors.csv'\n,\n \nindex\n=\nFalse\n)\n\n\n\n\n\n\n\nSubmit to Kaggle (1\nst\n)\n\u00b6\n\n\n\n\nGo to \nKaggle\n, log in, and search for \nTitanic: Machine Learning from Disaster\n. \n\n\nJoin the competition and submit the .csv file.\n\n\nAdd a description and submit.\n\n\nKaggle returns a ranking.\n\n\nAt the time of the first submission: score 0.63679, rank 9387.\n\n\n\n\n\n\nEDA on Feature Variables\n\u00b6\n\n\nDo some more Exploratory Data Analysis and build another model!\n\n\n1\nsns\n.\ncountplot\n(\nx\n=\n'Sex'\n,\n \ndata\n=\ndf_train\n);\n\n\n\n\n\n\n\n\n\n1\n2\n# kind is the facets\n\n\nsns\n.\nfactorplot\n(\nx\n=\n'Survived'\n,\n \ncol\n=\n'Sex'\n,\n \nkind\n=\n'count'\n,\n \ndata\n=\ndf_train\n)\n\n\n\n\n\n\n\n1\n<seaborn.axisgrid.FacetGrid at 0x7fc65fa35a20>\n\n\n\n\n\n\n\n\nTake-away\n: Women were more likely to survive than men.\n\n\nWith this take-away, we can use pandas to figure out how many women and how many men survived:\n\n\n1\ndf_train\n.\nhead\n(\n1\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nSurvived\n\n      \nPclass\n\n      \nName\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n0\n\n      \n3\n\n      \nBraund, Mr. Owen Harris\n\n      \nmale\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \nA/5 21171\n\n      \n7.25\n\n      \nNaN\n\n      \nS\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n# Chain a group by Sex, sum Survived\n\n\ndf_train\n.\ngroupby\n([\n'Sex'\n])\n.\nSurvived\n.\nsum\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\nSex\nfemale    233\nmale      109\nName: Survived, dtype: int64\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Chain calculations\n\n\nprint\n(\ndf_train\n[\ndf_train\n.\nSex\n \n==\n \n'female'\n]\n.\nSurvived\n.\nsum\n()\n \n/\n\n      \ndf_train\n[\ndf_train\n.\nSex\n \n==\n \n'female'\n]\n.\nSurvived\n.\ncount\n())\n\n\n\nprint\n(\ndf_train\n[\ndf_train\n.\nSex\n \n==\n \n'male'\n]\n.\nSurvived\n.\nsum\n()\n \n/\n\n      \ndf_train\n[\ndf_train\n.\nSex\n \n==\n \n'male'\n]\n.\nSurvived\n.\ncount\n())\n\n\n\n\n\n\n\n1\n2\n0.742038216561\n0.188908145581\n\n\n\n\n\n\n74% of women survived, while 19% of men survived.\n\n\nBuild a second model and predict that all women survived and all men didn\u2019t.\n\n\n\n\nCreate a column \nSurvived\n for \ndf_test\n that encodes the above prediction.\n\n\nSave \nPassengerId\n and \nSurvived\n columns of \ndf_test\n to a .csv and submit to Kaggle.\n\n\n\n\n1\n2\n3\ndf_test\n[\n'Survived'\n]\n \n=\n \ndf_test\n.\nSex\n \n==\n \n'female'\n\n\ndf_test\n[\n'Survived'\n]\n \n=\n \ndf_test\n.\nSurvived\n.\napply\n(\nlambda\n \nx\n:\n \nint\n(\nx\n))\n\n\ndf_test\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nPclass\n\n      \nName\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n      \nSurvived\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n892\n\n      \n3\n\n      \nKelly, Mr. James\n\n      \nmale\n\n      \n34.5\n\n      \n0\n\n      \n0\n\n      \n330911\n\n      \n7.8292\n\n      \nNaN\n\n      \nQ\n\n      \n0\n\n    \n\n    \n\n      \n1\n\n      \n893\n\n      \n3\n\n      \nWilkes, Mrs. James (Ellen Needs)\n\n      \nfemale\n\n      \n47.0\n\n      \n1\n\n      \n0\n\n      \n363272\n\n      \n7.0000\n\n      \nNaN\n\n      \nS\n\n      \n1\n\n    \n\n    \n\n      \n2\n\n      \n894\n\n      \n2\n\n      \nMyles, Mr. Thomas Francis\n\n      \nmale\n\n      \n62.0\n\n      \n0\n\n      \n0\n\n      \n240276\n\n      \n9.6875\n\n      \nNaN\n\n      \nQ\n\n      \n0\n\n    \n\n  \n\n\n\n\n\n\n\n1\ndf_test\n[[\n'PassengerId'\n,\n \n'Survived'\n]]\n.\nto_csv\n(\n'results/women_survived.csv'\n,\n \nindex\n=\nFalse\n)\n\n\n\n\n\n\n\nSubmit to Kaggle (2\nnd\n)\n\u00b6\n\n\n\n\nGo to \nKaggle\n, log in, and search for \nTitanic: Machine Learning from Disaster\n. \n\n\nJoin the competition and submit the .csv file.\n\n\nAdd a description and submit.\n\n\nKaggle returns a ranking.\n\n\nAt the time of the first submission: score 0.76555 (from 0.62679), rank 7274 (a jump of 2122 places).\n\n\n\n\n\n\nExplore the Data More!\n\u00b6\n\n\n1\n2\n# kind is the facets\n\n\nsns\n.\nfactorplot\n(\nx\n=\n'Survived'\n,\n \ncol\n=\n'Pclass'\n,\n \nkind\n=\n'count'\n,\n \ndata\n=\ndf_train\n)\n\n\n\n\n\n\n\n1\n<seaborn.axisgrid.FacetGrid at 0x7fc65f8dcf98>\n\n\n\n\n\n\n\n\nTake-away\n: Passengers that travelled in first class were more likely to survive. On the other hand, passengers travelling in third class were more unlikely to survive. \n\n\n1\n2\n# kind is the facets\n\n\nsns\n.\nfactorplot\n(\nx\n=\n'Survived'\n,\n \ncol\n=\n'Embarked'\n,\n \nkind\n=\n'count'\n,\n \ndata\n=\ndf_train\n)\n\n\n\n\n\n\n\n1\n<seaborn.axisgrid.FacetGrid at 0x7fc65f937c50>\n\n\n\n\n\n\n\n\nTake-away\n: Passengers that embarked in Southampton were less likely to survive. \n\n\nEDA with Numeric Variables\n\u00b6\n\n\n1\nsns\n.\ndistplot\n(\ndf_train\n.\nFare\n,\n \nkde\n=\nFalse\n)\n\n\n\n\n\n\n\n1\n<matplotlib.axes._subplots.AxesSubplot at 0x7fc6633fb9e8>\n\n\n\n\n\n\n\n\nTake-away\n: Most passengers paid less than 100 for travelling with the Titanic.\n\n\n1\n2\n# Group by Survived, trace histograms of Fare with alpha color 0.6\n\n\ndf_train\n.\ngroupby\n(\n'Survived'\n)\n.\nFare\n.\nhist\n(\nalpha\n=\n0.6\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\nSurvived\n0    Axes(0.125,0.125;0.775x0.775)\n1    Axes(0.125,0.125;0.775x0.775)\nName: Fare, dtype: object\n\n\n\n\n\n\n\n\nTake-away\n: It looks as though those that paid more had a higher chance of surviving.\n\n\n1\n2\n3\n4\n# Remove NaN\n\n\ndf_train_drop\n \n=\n \ndf_train\n.\ndropna\n()\n\n\n\nsns\n.\ndistplot\n(\ndf_train_drop\n.\nAge\n,\n \nkde\n=\nFalse\n)\n\n\n\n\n\n\n\n1\n<matplotlib.axes._subplots.AxesSubplot at 0x7fc65f64be80>\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# Alternative to bars or scatter\n\n\nsns\n.\nstripplot\n(\nx\n=\n'Survived'\n,\n \n              \ny\n=\n'Fare'\n,\n \n              \ndata\n=\ndf_train\n,\n \n              \nalpha\n=\n0.3\n,\n \njitter\n=\nTrue\n)\n\n\n\n\n\n\n\n1\n<matplotlib.axes._subplots.AxesSubplot at 0x7fc65f5cca58>\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n# Alternative to bars or scatter\n\n\nsns\n.\nswarmplot\n(\nx\n=\n'Survived'\n,\n \n              \ny\n=\n'Fare'\n,\n \n              \ndata\n=\ndf_train\n)\n\n\n\n\n\n\n\n1\n<matplotlib.axes._subplots.AxesSubplot at 0x7fc65f2e4ef0>\n\n\n\n\n\n\n\n\nTake-away\n: Fare definitely seems to be correlated with survival aboard the Titanic.\n\n\n1\n2\n# Group by Survived, describe Fare (descriptive statistics)\n\n\ndf_train\n.\ngroupby\n(\n'Survived'\n)\n.\nFare\n.\ndescribe\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ncount\n\n      \nmean\n\n      \nstd\n\n      \nmin\n\n      \n25%\n\n      \n50%\n\n      \n75%\n\n      \nmax\n\n    \n\n    \n\n      \nSurvived\n\n      \n\n      \n\n      \n\n      \n\n      \n\n      \n\n      \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n549.0\n\n      \n22.117887\n\n      \n31.388207\n\n      \n0.0\n\n      \n7.8542\n\n      \n10.5\n\n      \n26.0\n\n      \n263.0000\n\n    \n\n    \n\n      \n1\n\n      \n342.0\n\n      \n48.395408\n\n      \n66.596998\n\n      \n0.0\n\n      \n12.4750\n\n      \n26.0\n\n      \n57.0\n\n      \n512.3292\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nsns\n.\nlmplot\n(\nx\n=\n'Age'\n,\n \n           \ny\n=\n'Fare'\n,\n \n           \nhue\n=\n'Survived'\n,\n \n           \ndata\n=\ndf_train\n,\n \n           \nfit_reg\n=\nFalse\n,\n \nscatter_kws\n=\n{\n'alpha'\n:\n0.5\n})\n\n\n\n\n\n\n\n1\n<seaborn.axisgrid.FacetGrid at 0x7fc65f5ccba8>\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nsns\n.\nlmplot\n(\nx\n=\n'Age'\n,\n \n           \ny\n=\n'Fare'\n,\n \n           \nhue\n=\n'Survived'\n,\n \n           \ndata\n=\ndf_train\n,\n \n           \nfit_reg\n=\nTrue\n,\n \nscatter_kws\n=\n{\n'alpha'\n:\n0.5\n})\n\n\n\n\n\n\n\n1\n<seaborn.axisgrid.FacetGrid at 0x7fc65f22d710>\n\n\n\n\n\n\n\n\nTake-away\n: It looks like those who survived either paid quite a bit for their ticket or they were young.\n\n\n1\nsns\n.\npairplot\n(\ndf_train_drop\n,\n \nhue\n=\n'Survived'\n)\n\n\n\n\n\n\n\n1\n<seaborn.axisgrid.PairGrid at 0x7fc65f8826d8>\n\n\n\n\n\n\n\n\nA First Machine Learning Model\n\u00b6\n\n\nA decision tree classifier, with the Python scikit-learn.\n\n\nHow to Start with Supervised Learning (Take 2)\n\u00b6\n\n\nNow that we have done our homeworks with EDA\u2026\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n# Import modules\n\n\nimport\n \npandas\n \nas\n \npd\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\nimport\n \nre\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nsklearn\n \nimport\n \ntree\n\n\nfrom\n \nsklearn.model_selection\n \nimport\n \ntrain_test_split\n\n\nfrom\n \nsklearn.linear_model\n \nimport\n \nLogisticRegression\n\n\nfrom\n \nsklearn.model_selection\n \nimport\n \nGridSearchCV\n\n\n\n# Figures inline and set visualization style\n\n\n%\nmatplotlib\n \ninline\n\n\nsns\n.\nset\n()\n\n\n\n\n\n\n\n1\n2\n3\n# Import data\n\n\ndf_train\n \n=\n \npd\n.\nread_csv\n(\n'data/train.csv'\n)\n\n\ndf_test\n \n=\n \npd\n.\nread_csv\n(\n'data/test.csv'\n)\n\n\n\n\n\n\n\n1\ndf_train\n.\ninfo\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.6+ KB\n\n\n\n\n\n\n1\ndf_test\n.\ninfo\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    418 non-null int64\nPclass         418 non-null int64\nName           418 non-null object\nSex            418 non-null object\nAge            332 non-null float64\nSibSp          418 non-null int64\nParch          418 non-null int64\nTicket         418 non-null object\nFare           417 non-null float64\nCabin          91 non-null object\nEmbarked       418 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Store target variable of training data in a safe place\n\n\nsurvived_train\n \n=\n \ndf_train\n.\nSurvived\n\n\n\n# Concatenate (along the index or axis=1) training and test sets\n\n\n# to preprocess the data a little bit\n\n\n# and make sure that any operations that\n\n\n# we perform on the training set are also\n\n\n# being done on the test data set\n\n\ndata\n \n=\n \npd\n.\nconcat\n([\ndf_train\n.\ndrop\n([\n'Survived'\n],\n \naxis\n=\n1\n),\n \ndf_test\n])\n\n\n\n\n\n\n\n1\n2\n# The combined datasets (891+418 entries)\n\n\ndata\n.\ninfo\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1046 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1308 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB\n\n\n\n\n\n\nMissing values for the \nAge\n and \nFare\n columns! Also notice that \nCabin\n and \nEmbarked\n are also missing values and we will need to deal with that also at some point. However, now we will focus on fixing the numerical variables \nAge\n and \nFare\n, using the median of the of these variables where we know them. It\u2019s perfect for dealing with outliers. In other words, the median is useful to use when the distribution of data is skewed. Other ways to impute the missing values would be to use the mean or the mode.\n\n\n1\n2\n3\n4\n5\n6\n# Impute missing numerical variables where NaN\n\n\ndata\n[\n'Age'\n]\n \n=\n \ndata\n.\nAge\n.\nfillna\n(\ndata\n.\nAge\n.\nmedian\n())\n\n\ndata\n[\n'Fare'\n]\n \n=\n \ndata\n.\nFare\n.\nfillna\n(\ndata\n.\nFare\n.\nmedian\n())\n\n\n\n# Check out info of data\n\n\ndata\n.\ninfo\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1309 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1309 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB\n\n\n\n\n\n\nEncode the data with numbers with \n.get_dummies\n()\n. \n\n\nIt creates a new column for female, called \nSex_female\n, and then a new column for \nSex_male\n, which encodes whether that row was male or female (1 if that row is a male - and a 0 if that row is female). Because of \ndrop_first\n argument, we dropped \nSex_female\n because, essentially, these new columns, \nSex_female\n and \nSex_male\n, encode the same information.\n\n\n1\n2\ndata\n \n=\n \npd\n.\nget_dummies\n(\ndata\n,\n \ncolumns\n=\n[\n'Sex'\n],\n \ndrop_first\n=\nTrue\n)\n\n\ndata\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nPclass\n\n      \nName\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n      \nSex_male\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n3\n\n      \nBraund, Mr. Owen Harris\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \nA/5 21171\n\n      \n7.2500\n\n      \nNaN\n\n      \nS\n\n      \n1\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \n1\n\n      \nCumings, Mrs. John Bradley (Florence Briggs Th...\n\n      \n38.0\n\n      \n1\n\n      \n0\n\n      \nPC 17599\n\n      \n71.2833\n\n      \nC85\n\n      \nC\n\n      \n0\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n3\n\n      \nHeikkinen, Miss. Laina\n\n      \n26.0\n\n      \n0\n\n      \n0\n\n      \nSTON/O2. 3101282\n\n      \n7.9250\n\n      \nNaN\n\n      \nS\n\n      \n0\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n3\n# Select columns and view head\n\n\ndata\n \n=\n \ndata\n[[\n'Sex_male'\n,\n \n'Fare'\n,\n \n'Age'\n,\n'Pclass'\n,\n \n'SibSp'\n]]\n\n\ndata\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSex_male\n\n      \nFare\n\n      \nAge\n\n      \nPclass\n\n      \nSibSp\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n7.2500\n\n      \n22.0\n\n      \n3\n\n      \n1\n\n    \n\n    \n\n      \n1\n\n      \n0\n\n      \n71.2833\n\n      \n38.0\n\n      \n1\n\n      \n1\n\n    \n\n    \n\n      \n2\n\n      \n0\n\n      \n7.9250\n\n      \n26.0\n\n      \n3\n\n      \n0\n\n    \n\n  \n\n\n\n\n\n\n\n1\ndata\n.\ninfo\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 5 columns):\nSex_male    1309 non-null uint8\nFare        1309 non-null float64\nAge         1309 non-null float64\nPclass      1309 non-null int64\nSibSp       1309 non-null int64\ndtypes: float64(2), int64(2), uint8(1)\nmemory usage: 52.4 KB\n\n\n\n\n\n\nAll the entries are non-null now.\n\n\nBuild a Decision Tree Classifier\n\u00b6\n\n\n\u201cWas \nSex_male\n\u201d less than 0.5? In other words, was the data point a female. If the answer to this question is \nTrue\n, we can go down to the left and we get \nSurvived\n. If \nFalse\n, we go down the right and we get \nDead\n.\n\n\n\n\nThat the first branch is on \nMale\n or not and that \nMale\n results in a prediction of \nDead\n. The gini coefficient is used to make these decisions.\n\n\nBefore fitting a model to the data, split it back into training and test sets:\n\n\n1\n2\ndata_train\n \n=\n \ndata\n.\niloc\n[:\n891\n]\n\n\ndata_test\n \n=\n \ndata\n.\niloc\n[\n891\n:]\n\n\n\n\n\n\n\nscikit-learn requires the data as arrays, not DataFrames. Transform them.\n\n\n1\n2\n3\n4\n5\nX\n \n=\n \ndata_train\n.\nvalues\n\n\ntest\n \n=\n \ndata_test\n.\nvalues\n\n\n\n# and from above: survived_train = df_train.Survived\n\n\ny\n \n=\n \nsurvived_train\n.\nvalues\n\n\n\n\n\n\n\n1\nX\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\narray([[  1.    ,   7.25  ,  22.    ,   3.    ,   1.    ],\n       [  0.    ,  71.2833,  38.    ,   1.    ,   1.    ],\n       [  0.    ,   7.925 ,  26.    ,   3.    ,   0.    ],\n       ..., \n       [  0.    ,  23.45  ,  28.    ,   3.    ,   1.    ],\n       [  1.    ,  30.    ,  26.    ,   1.    ,   0.    ],\n       [  1.    ,   7.75  ,  32.    ,   3.    ,   0.    ]])\n\n\n\n\n\n\nBuild a decision tree classifier! First create such a model with \nmax_depth=3\n and then fit it the data. Name the model \nclf\n, which is short for \u201cClassifier\u201d.\n\n\n1\n2\n3\n4\n5\n6\n# Instantiate model and fit to data\n\n\n# The max depth is set at 3\n\n\nclf\n \n=\n \ntree\n.\nDecisionTreeClassifier\n(\nmax_depth\n=\n3\n)\n\n\n\n# X is the indenpendent variables, y is the dependent variable\n\n\nclf\n.\nfit\n(\nX\n,\n \ny\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nDecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=3,\n            max_features=None, max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n            splitter='best')\n\n\n\n\n\n\nMake predictions on the test set.\n\n\n1\n2\n3\n4\n5\n6\n7\n# Make predictions and store in 'Survived' column of df_test\n\n\nY_pred\n \n=\n \nclf\n.\npredict\n(\ntest\n)\n\n\ndf_test\n[\n'Survived'\n]\n \n=\n \nY_pred\n\n\n\n# Save it\n\n\ndf_test\n[[\n'PassengerId'\n,\n \n'Survived'\n]]\n.\nto_csv\n(\n'results/1st_dec_tree.csv'\n,\n\n                                            \nindex\n=\nFalse\n)\n\n\n\n\n\n\n\nSubmit to Kaggle (3\nrd\n)\n\u00b6\n\n\n\n\nGo to \nKaggle\n, log in, and search for \nTitanic: Machine Learning from Disaster\n. \n\n\nJoin the competition and submit the .csv file.\n\n\nAdd a description and submit.\n\n\nKaggle returns a ranking.\n\n\nAt the time of the first submission: score 0.77990 (from 0.76555), rank 4828 (a jump of 2434 places).\n\n\n\n\n\n\n1\n2\n3\n# Compute accuracy on the training set\n\n\ntrain_accuracy\n \n=\n \nclf\n.\nscore\n(\nX\n,\n \ny\n)\n\n\ntrain_accuracy\n\n\n\n\n\n\n\n1\n0.8271604938271605\n\n\n\n\n\n\nA Decision Tree Classifier in More Details\n\u00b6\n\n\nThe Decision Tree Classifier we just built had a max_depth=3 and it looks like this:\n\n\n\n\nThe maximal distance between the first decision and the last is 3, so that\u2019s \nmax_depth=3\n.\n\n\nGenerate images with \ngraphviz\n.\n\n\n1\n2\n3\n4\n5\n6\nimport\n \ngraphviz\n\n\n\ntree_data\n \n=\n \ntree\n.\nexport_graphviz\n(\nclf\n,\n \nout_file\n=\nNone\n)\n \n\ngraph\n \n=\n \ngraphviz\n.\nSource\n(\ntree_data\n)\n\n\n# Save the pdf\n\n\ngraph\n.\nrender\n(\n\"img/tree_data\"\n)\n\n\n\n\n\n\n\n1\n'img/tree_data.pdf'\n\n\n\n\n\n\nWe get a tree_data test file (the code for generating the image) and a pdf file. We can generate an image.\n\n\n1\n2\nfeature_names\n \n=\n \nlist\n(\ndata_train\n)\n\n\nfeature_names\n\n\n\n\n\n\n\n1\n['Sex_male', 'Fare', 'Age', 'Pclass', 'SibSp']\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n#data_train\n\n\n#data_test\n\n\ntree_data\n \n=\n \ntree\n.\nexport_graphviz\n(\nclf\n,\n \nout_file\n=\nNone\n,\n \n                                \nfeature_names\n=\nfeature_names\n,\n\n                                \nclass_names\n=\nNone\n,\n\n                                \nfilled\n=\nTrue\n,\n \nrounded\n=\nTrue\n,\n\n                                \nspecial_characters\n=\nTrue\n)\n  \n\ngraph\n \n=\n \ngraphviz\n.\nSource\n(\ntree_data\n)\n  \n\ngraph\n \n\n\n\n\n\n\n\n\nIn building this model, what we are essentially doing is creating a \ndecision boundary\n in the space of feature variables.\n\n\n\n\nWhy Choose \nmax_depth=3\n?\n\u00b6\n\n\nThe depth of the tree is known as a hyperparameter, which means a parameter we need to decide before we fit the model to the data. If we choose a larger \nmax_depth\n, we will get a more complex decision boundary;  the bias-variance trade-off.\n\n\n\n\nIf the decision boundary is too complex, we can overfit to the data, which means that the model will be describing noise as well as signal.\n\n\nIf the \nmax_depth\n is too small, we might be underfitting the data, meaning that the model doesn\u2019t contain enough of the signal.\n\n\n\n\nOne way is to hold out a test set from the training data. We can then fit the model to the training data, make predictions on the test set and see how well the prediction does on the test set.\n\n\nSplit the original training data into training and test sets:\n\n\n1\nX_train\n,\n \nX_test\n,\n \ny_train\n,\n \ny_test\n \n=\n \ntrain_test_split\n(\nX\n,\n \ny\n,\n \ntest_size\n=\n0.33\n,\n \nrandom_state\n=\n42\n,\n \nstratify\n=\ny\n)\n\n\n\n\n\n\n\nIterate over values of \nmax_depth\n ranging from 1 to 9 and plot the accuracy of the models on training and test sets:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n# Setup arrays to store train and test accuracies\n\n\ndep\n \n=\n \nnp\n.\narange\n(\n1\n,\n \n9\n)\n\n\ntrain_accuracy\n \n=\n \nnp\n.\nempty\n(\nlen\n(\ndep\n))\n\n\ntest_accuracy\n \n=\n \nnp\n.\nempty\n(\nlen\n(\ndep\n))\n\n\n\n# Loop over different values of k\n\n\nfor\n \ni\n,\n \nk\n \nin\n \nenumerate\n(\ndep\n):\n\n    \n# Setup a k-NN Classifier with k neighbors: knn\n\n    \nclf\n \n=\n \ntree\n.\nDecisionTreeClassifier\n(\nmax_depth\n=\nk\n)\n\n\n    \n# Fit the classifier to the training data\n\n    \nclf\n.\nfit\n(\nX_train\n,\n \ny_train\n)\n\n\n    \n# Compute accuracy on the training set\n\n    \ntrain_accuracy\n[\ni\n]\n \n=\n \nclf\n.\nscore\n(\nX_train\n,\n \ny_train\n)\n\n\n    \n# Compute accuracy on the testing set\n\n    \ntest_accuracy\n[\ni\n]\n \n=\n \nclf\n.\nscore\n(\nX_test\n,\n \ny_test\n)\n\n\n\n# Generate plot\n\n\nplt\n.\ntitle\n(\n'clf: Varying depth of tree'\n)\n\n\nplt\n.\nplot\n(\ndep\n,\n \ntest_accuracy\n,\n \nlabel\n \n=\n \n'Testing Accuracy'\n)\n\n\nplt\n.\nplot\n(\ndep\n,\n \ntrain_accuracy\n,\n \nlabel\n \n=\n \n'Training Accuracy'\n)\n\n\nplt\n.\nlegend\n()\n\n\nplt\n.\nxlabel\n(\n'Depth of tree'\n)\n\n\nplt\n.\nylabel\n(\n'Accuracy'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\nAt \nmax_depth-3\n, we get the same results as with the model before (around 82%).\n\n\nAs we increase the max_depth, we are going to fit better and better to the training data because we will make decisions that describe the training data. The accuracy for the training data will go up and up, but we see that this doesn\u2019t happen for the test data: we are overfitting.\n\n\nSo that\u2019s why we chose \nmax_depth=3\n. \n\n\nFeature Engineering\n\u00b6\n\n\nhttps://www.datacamp.com/community/tutorials/feature-engineering-kaggle\n\n\nA process where we use domain knowledge of the data to create additional relevant features (create new columns, transform variables and more) that increase the predictive power of the learning algorithm and make the machine learning models perform even better.\n\n\nHow to Start with Feature Engineering\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Imports\n\n\nimport\n \npandas\n \nas\n \npd\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nseaborn\n \nas\n \nsns\n\n\nimport\n \nre\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nsklearn\n \nimport\n \ntree\n\n\nfrom\n \nsklearn.model_selection\n \nimport\n \nGridSearchCV\n\n\n\n# Figures inline and set visualization style\n\n\n%\nmatplotlib\n \ninline\n\n\nsns\n.\nset\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Import data\n\n\ndf_train\n \n=\n \npd\n.\nread_csv\n(\n'data/train.csv'\n)\n\n\ndf_test\n \n=\n \npd\n.\nread_csv\n(\n'data/test.csv'\n)\n\n\n\n# Store target variable of training data in a safe place\n\n\nsurvived_train\n \n=\n \ndf_train\n.\nSurvived\n\n\n\n# Concatenate training and test sets\n\n\ndata\n \n=\n \npd\n.\nconcat\n([\ndf_train\n.\ndrop\n([\n'Survived'\n],\n \naxis\n=\n1\n),\n \ndf_test\n])\n\n\n\n# View head\n\n\ndata\n.\ninfo\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1046 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1308 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB\n\n\n\n\n\n\nWhy Feature Engineer At All?\n\u00b6\n\n\nTitanic\u2019s Passenger Titles\n\u00b6\n\n\n1\n2\n# View head of 'Name' column\n\n\ndata\n.\nName\n.\ntail\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n413              Spector, Mr. Woolf\n414    Oliva y Ocana, Dona. Fermina\n415    Saether, Mr. Simon Sivertsen\n416             Ware, Mr. Frederick\n417        Peter, Master. Michael J\nName: Name, dtype: object\n\n\n\n\n\n\nThese titles of course give us information on social status, profession, etc., which in the end could tell us something more about survival. use regular expressions to extract the title and store it in a new column \u2018Title\u2019:\n\n\n1\n2\n3\n# Extract Title from Name, store in column and plot barplot\n\n\n# One upper character, one lower character, one dot\n\n\ndata\n[\n'Title'\n]\n \n=\n \ndata\n.\nName\n.\napply\n(\nlambda\n \nx\n:\n \nre\n.\nsearch\n(\n' ([A-Z][a-z]+)\\.'\n,\n \nx\n)\n.\ngroup\n(\n1\n))\n\n\n\n\n\n\n\n1\n2\n# New column Title is a new feature of the dataset \n\n\ndata\n.\nTitle\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n0      Mr\n1     Mrs\n2    Miss\nName: Title, dtype: object\n\n\n\n\n\n\n1\n2\nsns\n.\ncountplot\n(\nx\n=\n'Title'\n,\n \ndata\n=\ndata\n);\n\n\nplt\n.\nxticks\n(\nrotation\n=\n45\n);\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n# Substitute some title with their English form\n\n\ndata\n[\n'Title'\n]\n \n=\n \ndata\n[\n'Title'\n]\n.\nreplace\n({\n'Mlle'\n:\n'Miss'\n,\n \n'Mme'\n:\n'Mrs'\n,\n \n'Ms'\n:\n'Miss'\n})\n\n\n# Gather exceptions\n\n\ndata\n[\n'Title'\n]\n \n=\n \ndata\n[\n'Title'\n]\n.\nreplace\n([\n'Don'\n,\n \n'Dona'\n,\n \n'Rev'\n,\n \n'Dr'\n,\n \n'Major'\n,\n \n'Lady'\n,\n \n'Sir'\n,\n \n'Col'\n,\n \n'Capt'\n,\n \n'Countess'\n,\n \n'Jonkheer'\n],\n'Special'\n)\n\n\n\n\n\n\n\n1\ndata\n.\nTitle\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n0      Mr\n1     Mrs\n2    Miss\nName: Title, dtype: object\n\n\n\n\n\n\n1\n2\nsns\n.\ncountplot\n(\nx\n=\n'Title'\n,\n \ndata\n=\ndata\n);\n\n\nplt\n.\nxticks\n(\nrotation\n=\n45\n);\n\n\n\n\n\n\n\n\n\n1\n2\n# View tail of data (for change)\n\n\ndata\n.\ntail\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nPclass\n\n      \nName\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n      \nTitle\n\n    \n\n  \n\n  \n\n    \n\n      \n415\n\n      \n1307\n\n      \n3\n\n      \nSaether, Mr. Simon Sivertsen\n\n      \nmale\n\n      \n38.5\n\n      \n0\n\n      \n0\n\n      \nSOTON/O.Q. 3101262\n\n      \n7.2500\n\n      \nNaN\n\n      \nS\n\n      \nMr\n\n    \n\n    \n\n      \n416\n\n      \n1308\n\n      \n3\n\n      \nWare, Mr. Frederick\n\n      \nmale\n\n      \nNaN\n\n      \n0\n\n      \n0\n\n      \n359309\n\n      \n8.0500\n\n      \nNaN\n\n      \nS\n\n      \nMr\n\n    \n\n    \n\n      \n417\n\n      \n1309\n\n      \n3\n\n      \nPeter, Master. Michael J\n\n      \nmale\n\n      \nNaN\n\n      \n1\n\n      \n1\n\n      \n2668\n\n      \n22.3583\n\n      \nNaN\n\n      \nC\n\n      \nMaster\n\n    \n\n  \n\n\n\n\n\n\n\nPassenger\u2019s Cabins\n\u00b6\n\n\nThere are several NaNs or missing values in the \nCabin\n column. Those NaNs didn\u2019t have a cabin, which could tell us something about survival.\n\n\n1\n2\n# View head of data\n\n\ndata\n[[\n'Name'\n,\n \n'PassengerId'\n,\n \n'Ticket'\n,\n \n'Cabin'\n]]\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nName\n\n      \nPassengerId\n\n      \nTicket\n\n      \nCabin\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \nBraund, Mr. Owen Harris\n\n      \n1\n\n      \nA/5 21171\n\n      \nNaN\n\n    \n\n    \n\n      \n1\n\n      \nCumings, Mrs. John Bradley (Florence Briggs Th...\n\n      \n2\n\n      \nPC 17599\n\n      \nC85\n\n    \n\n    \n\n      \n2\n\n      \nHeikkinen, Miss. Laina\n\n      \n3\n\n      \nSTON/O2. 3101282\n\n      \nNaN\n\n    \n\n    \n\n      \n3\n\n      \nFutrelle, Mrs. Jacques Heath (Lily May Peel)\n\n      \n4\n\n      \n113803\n\n      \nC123\n\n    \n\n    \n\n      \n4\n\n      \nAllen, Mr. William Henry\n\n      \n5\n\n      \n373450\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# Did they have a Cabin?\n\n\n# Return True is the passenger has a cabin\n\n\ndata\n[\n'Has_Cabin'\n]\n \n=\n \n~\ndata\n.\nCabin\n.\nisnull\n()\n\n\n\n# # View head of data\n\n\ndata\n[[\n'Name'\n,\n \n'PassengerId'\n,\n \n'Ticket'\n,\n \n'Cabin'\n,\n \n'Has_Cabin'\n]]\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nName\n\n      \nPassengerId\n\n      \nTicket\n\n      \nCabin\n\n      \nHas_Cabin\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \nBraund, Mr. Owen Harris\n\n      \n1\n\n      \nA/5 21171\n\n      \nNaN\n\n      \nFalse\n\n    \n\n    \n\n      \n1\n\n      \nCumings, Mrs. John Bradley (Florence Briggs Th...\n\n      \n2\n\n      \nPC 17599\n\n      \nC85\n\n      \nTrue\n\n    \n\n    \n\n      \n2\n\n      \nHeikkinen, Miss. Laina\n\n      \n3\n\n      \nSTON/O2. 3101282\n\n      \nNaN\n\n      \nFalse\n\n    \n\n    \n\n      \n3\n\n      \nFutrelle, Mrs. Jacques Heath (Lily May Peel)\n\n      \n4\n\n      \n113803\n\n      \nC123\n\n      \nTrue\n\n    \n\n    \n\n      \n4\n\n      \nAllen, Mr. William Henry\n\n      \n5\n\n      \n373450\n\n      \nNaN\n\n      \nFalse\n\n    \n\n  \n\n\n\n\n\n\n\nDrop these columns, except \nHas_Cabin\n, in the actual \ndata\n DataFrame; make sure to use the \ninplace\n argument in the \n.drop\n()\n method and set it to \nTrue\n:\n\n\n1\n2\n3\n# Drop columns and view head\n\n\ndata\n.\ndrop\n([\n'Cabin'\n,\n \n'Name'\n,\n \n'PassengerId'\n,\n \n'Ticket'\n],\n \naxis\n=\n1\n,\n \ninplace\n=\nTrue\n)\n\n\ndata\n.\nhead\n()\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nFare\n\n      \nEmbarked\n\n      \nTitle\n\n      \nHas_Cabin\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nmale\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \n7.2500\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nfemale\n\n      \n38.0\n\n      \n1\n\n      \n0\n\n      \n71.2833\n\n      \nC\n\n      \nMrs\n\n      \nTrue\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nfemale\n\n      \n26.0\n\n      \n0\n\n      \n0\n\n      \n7.9250\n\n      \nS\n\n      \nMiss\n\n      \nFalse\n\n    \n\n    \n\n      \n3\n\n      \n1\n\n      \nfemale\n\n      \n35.0\n\n      \n1\n\n      \n0\n\n      \n53.1000\n\n      \nS\n\n      \nMrs\n\n      \nTrue\n\n    \n\n    \n\n      \n4\n\n      \n3\n\n      \nmale\n\n      \n35.0\n\n      \n0\n\n      \n0\n\n      \n8.0500\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n    \n\n  \n\n\n\n\n\n\n\nNew features such as \nTitle\n and \nHas_Cabin\n. \n\n\nFeatures that don\u2019t add any more useful information for the machine learning model are now dropped from the DataFrame.\n\n\nHandling Missing Values\n\u00b6\n\n\n1\ndata\n.\ninfo\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 9 columns):\nPclass       1309 non-null int64\nSex          1309 non-null object\nAge          1046 non-null float64\nSibSp        1309 non-null int64\nParch        1309 non-null int64\nFare         1308 non-null float64\nEmbarked     1307 non-null object\nTitle        1309 non-null object\nHas_Cabin    1309 non-null bool\ndtypes: bool(1), float64(2), int64(3), object(3)\nmemory usage: 133.3+ KB\n\n\n\n\n\n\nMissing values in \nAge\n, \nFare\n, and \nEmbarked\n. Impute these missing values with the help of \n.fillna\n()\n and use the median to fill in the columns (or the mean, the mode, etc.).\n\n\n1\n2\n3\n4\n5\n# Impute missing values for Age, Fare, Embarked\n\n\ndata\n[\n'Age'\n]\n \n=\n \ndata\n.\nAge\n.\nfillna\n(\ndata\n.\nAge\n.\nmedian\n())\n\n\ndata\n[\n'Fare'\n]\n \n=\n \ndata\n.\nFare\n.\nfillna\n(\ndata\n.\nFare\n.\nmedian\n())\n\n\ndata\n[\n'Embarked'\n]\n \n=\n \ndata\n[\n'Embarked'\n]\n.\nfillna\n(\n'S'\n)\n\n\ndata\n.\ninfo\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 9 columns):\nPclass       1309 non-null int64\nSex          1309 non-null object\nAge          1309 non-null float64\nSibSp        1309 non-null int64\nParch        1309 non-null int64\nFare         1309 non-null float64\nEmbarked     1309 non-null object\nTitle        1309 non-null object\nHas_Cabin    1309 non-null bool\ndtypes: bool(1), float64(2), int64(3), object(3)\nmemory usage: 133.3+ KB\n\n\n\n\n\n\n1\ndata\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nFare\n\n      \nEmbarked\n\n      \nTitle\n\n      \nHas_Cabin\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nmale\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \n7.2500\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nfemale\n\n      \n38.0\n\n      \n1\n\n      \n0\n\n      \n71.2833\n\n      \nC\n\n      \nMrs\n\n      \nTrue\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nfemale\n\n      \n26.0\n\n      \n0\n\n      \n0\n\n      \n7.9250\n\n      \nS\n\n      \nMiss\n\n      \nFalse\n\n    \n\n  \n\n\n\n\n\n\n\nBinning Numerical Data\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n# Binning numerical columns\n\n\n# q=4 means 4 quantiles 0, 1, 2, 3\n\n\n# labels=False are numbers, not characters\n\n\ndata\n[\n'CatAge'\n]\n \n=\n \npd\n.\nqcut\n(\ndata\n.\nAge\n,\n \nq\n=\n4\n,\n \nlabels\n=\nFalse\n \n)\n\n\ndata\n[\n'CatFare'\n]\n=\n \npd\n.\nqcut\n(\ndata\n.\nFare\n,\n \nq\n=\n4\n,\n \nlabels\n=\nFalse\n)\n\n\ndata\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nFare\n\n      \nEmbarked\n\n      \nTitle\n\n      \nHas_Cabin\n\n      \nCatAge\n\n      \nCatFare\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nmale\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \n7.2500\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nfemale\n\n      \n38.0\n\n      \n1\n\n      \n0\n\n      \n71.2833\n\n      \nC\n\n      \nMrs\n\n      \nTrue\n\n      \n3\n\n      \n3\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nfemale\n\n      \n26.0\n\n      \n0\n\n      \n0\n\n      \n7.9250\n\n      \nS\n\n      \nMiss\n\n      \nFalse\n\n      \n1\n\n      \n1\n\n    \n\n  \n\n\n\n\n\n\n\n1\n2\n3\n# Drop the 'Age' and 'Fare' columns\n\n\ndata\n \n=\n \ndata\n.\ndrop\n([\n'Age'\n,\n \n'Fare'\n],\n \naxis\n=\n1\n)\n\n\ndata\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nSex\n\n      \nSibSp\n\n      \nParch\n\n      \nEmbarked\n\n      \nTitle\n\n      \nHas_Cabin\n\n      \nCatAge\n\n      \nCatFare\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nmale\n\n      \n1\n\n      \n0\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nfemale\n\n      \n1\n\n      \n0\n\n      \nC\n\n      \nMrs\n\n      \nTrue\n\n      \n3\n\n      \n3\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nfemale\n\n      \n0\n\n      \n0\n\n      \nS\n\n      \nMiss\n\n      \nFalse\n\n      \n1\n\n      \n1\n\n    \n\n  \n\n\n\n\n\n\n\nNumber of Members in Family Onboard\n\u00b6\n\n\nCreate a new column, which is the number of members in families that were onboard of the Titanic.\n\n\n1\n2\n3\n4\n5\n6\n# Create column of number of Family members onboard\n\n\ndata\n[\n'Fam_Size'\n]\n \n=\n \ndata\n.\nParch\n \n+\n \ndata\n.\nSibSp\n\n\n\n# Drop columns\n\n\ndata\n \n=\n \ndata\n.\ndrop\n([\n'SibSp'\n,\n'Parch'\n],\n \naxis\n=\n1\n)\n\n\ndata\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nSex\n\n      \nEmbarked\n\n      \nTitle\n\n      \nHas_Cabin\n\n      \nCatAge\n\n      \nCatFare\n\n      \nFam_Size\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nmale\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n      \n0\n\n      \n0\n\n      \n1\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nfemale\n\n      \nC\n\n      \nMrs\n\n      \nTrue\n\n      \n3\n\n      \n3\n\n      \n1\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nfemale\n\n      \nS\n\n      \nMiss\n\n      \nFalse\n\n      \n1\n\n      \n1\n\n      \n0\n\n    \n\n  \n\n\n\n\n\n\n\nTransforming all Variables into Numerical Variables\n\u00b6\n\n\nTransform all variables into numeric ones. We do this because machine learning models generally take numeric input.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Transform into binary variables\n\n\n# Has_Cabin is a boolean\n\n\n# Sex becomes Sex_male=1 or 0\n\n\n# Embarked becomes Embarked_Q=1 or 0, Embarked_...\n\n\n# Title becomes Title_Miss=1 or 0, ...\n\n\n# The former variables are dropped, only the later variables remain\n\n\ndata_dum\n \n=\n \npd\n.\nget_dummies\n(\ndata\n,\n \ndrop_first\n=\nTrue\n)\n\n\ndata_dum\n.\nhead\n(\n3\n)\n\n\n\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nHas_Cabin\n\n      \nCatAge\n\n      \nCatFare\n\n      \nFam_Size\n\n      \nSex_male\n\n      \nEmbarked_Q\n\n      \nEmbarked_S\n\n      \nTitle_Miss\n\n      \nTitle_Mr\n\n      \nTitle_Mrs\n\n      \nTitle_Special\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nFalse\n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n1\n\n      \n0\n\n      \n1\n\n      \n0\n\n      \n1\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nTrue\n\n      \n3\n\n      \n3\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n0\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nFalse\n\n      \n1\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n  \n\n\n\n\n\n\n\nFirst, split the data back into training and test sets. Then, transform them into arrays:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Split into test.train\n\n\ndata_train\n \n=\n \ndata_dum\n.\niloc\n[:\n891\n]\n\n\ndata_test\n \n=\n \ndata_dum\n.\niloc\n[\n891\n:]\n\n\n\n# Transform into arrays for scikit-learn\n\n\nX\n \n=\n \ndata_train\n.\nvalues\n\n\ntest\n \n=\n \ndata_test\n.\nvalues\n\n\ny\n \n=\n \nsurvived_train\n.\nvalues\n\n\n\n\n\n\n\nBuilding models with a New Dataset!\n\u00b6\n\n\nBuild a decision tree on a brand new feature-engineered dataset. To choose the hyperparameter \nmax_depth\n, we will use a variation on test train split called \u201ccross validation\u201d.\n\n\n\n\nSplit the dataset into 5 groups or folds. Then we hold out the first fold as a test set, fit the model on the remaining four folds, predict on the test set and compute the metric of interest. Next, we hold out the second fold as the test set, fit on the remaining data, predict on the test set and compute the metric of interest. Then similarly with the third, fourth and fifth.\n\n\nAs a result, we get five values of accuracy, from which we can compute statistics of interest, such as the median and/or mean and 95% confidence intervals.\n\n\nWe do this for each value of each hyperparameter that we are tuning and choose the set of hyperparameters that performs the best. This is called grid search.\n\n\nIn the following, we will use cross validation and grid search to choose the best \nmax_depth\n for the new feature-engineered dataset:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n# Setup the hyperparameter grid\n\n\ndep\n \n=\n \nnp\n.\narange\n(\n1\n,\n9\n)\n\n\nparam_grid\n \n=\n \n{\n'max_depth'\n \n:\n \ndep\n}\n\n\n\n# Instantiate a decision tree classifier: clf\n\n\nclf\n \n=\n \ntree\n.\nDecisionTreeClassifier\n()\n\n\n\n# Instantiate the GridSearchCV object: clf_cv\n\n\nclf_cv\n \n=\n \nGridSearchCV\n(\nclf\n,\n \nparam_grid\n=\nparam_grid\n,\n \ncv\n=\n5\n)\n\n\n\n# Fit it to the data\n\n\nclf_cv\n.\nfit\n(\nX\n,\n \ny\n)\n\n\n\n# Print the tuned parameter and score\n\n\nprint\n(\n\"Tuned Decision Tree Parameters: {}\"\n.\nformat\n(\nclf_cv\n.\nbest_params_\n))\n\n\nprint\n(\n\"Best score is {}\"\n.\nformat\n(\nclf_cv\n.\nbest_score_\n))\n\n\n\n\n\n\n\n1\n2\nTuned Decision Tree Parameters: {'max_depth': 3}\nBest score is 0.8294051627384961\n\n\n\n\n\n\nMake predictions on the test set, create a new column \nSurvived\n and store the predictions in it.\n\n\nSave the \nPassengerId\n and \nSurvived\n columns of \ndf_test\n to a .csv and submit it to Kaggle.\n\n\n1\n2\n3\nY_pred\n \n=\n \nclf_cv\n.\npredict\n(\ntest\n)\n\n\ndf_test\n[\n'Survived'\n]\n \n=\n \nY_pred\n\n\ndf_test\n[[\n'PassengerId'\n,\n \n'Survived'\n]]\n.\nto_csv\n(\n'results/dec_tree_feat_eng.csv'\n,\n \nindex\n=\nFalse\n)\n\n\n\n\n\n\n\nSubmit to Kaggle (4\nth\n)\n\u00b6\n\n\n\n\nGo to \nKaggle\n, log in, and search for \nTitanic: Machine Learning from Disaster\n. \n\n\nJoin the competition and submit the .csv file.\n\n\nAdd a description and submit.\n\n\nKaggle returns a ranking.\n\n\nAt the time of the first submission: score 0.78468 (from 0.77980), rank 4009 (a jump of 819 places).",
            "title": "EDA, Machine Learning, Feature Engineering, and Kaggle"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#how-to-start-with-supervised-learning-take-1",
            "text": "Approach supervised learning is the following:   Perform an Exploratory Data Analysis (EDA) on a dataset;  Build a quick and dirty model, or a baseline model, which can serve as a comparison against later models that we will build;  Iterate this process. We will do more EDA and build another model;  Engineer features: take the features that we already have and combine them or extract more information from them to eventually come to the last point, which is  Get a model that performs better.",
            "title": "How to Start with Supervised Learning (Take 1)"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#import-the-data-and-explore-it",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # Import modules  import   pandas   as   pd  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns  from   sklearn   import   tree  from   sklearn.metrics   import   accuracy_score  # Figures inline and set visualization style  % matplotlib   inline  sns . set ()    1\n2\n3\n4\n5\n6 # Import test and train datasets  df_train   =   pd . read_csv ( 'data/train.csv' )  df_test   =   pd . read_csv ( 'data/test.csv' )  # View first lines of training data  df_train . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Survived \n       Pclass \n       Name \n       Sex \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n     \n   \n   \n     \n       0 \n       1 \n       0 \n       3 \n       Braund, Mr. Owen Harris \n       male \n       22.0 \n       1 \n       0 \n       A/5 21171 \n       7.2500 \n       NaN \n       S \n     \n     \n       1 \n       2 \n       1 \n       1 \n       Cumings, Mrs. John Bradley (Florence Briggs Th... \n       female \n       38.0 \n       1 \n       0 \n       PC 17599 \n       71.2833 \n       C85 \n       C \n     \n     \n       2 \n       3 \n       1 \n       3 \n       Heikkinen, Miss. Laina \n       female \n       26.0 \n       0 \n       0 \n       STON/O2. 3101282 \n       7.9250 \n       NaN \n       S \n     \n       The target variable is the variable we are trying to predict;  Other variables are known as \u201cfeatures\u201d (or \u201cpredictor variables\u201d, the features that we are using to predict the target variable).   Note that the  df_test  DataFrame doesn\u2019t have the  Survived  column because this is what we will try to predict!  1\n2 # View first lines of test data  df_test . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Pclass \n       Name \n       Sex \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n     \n   \n   \n     \n       0 \n       892 \n       3 \n       Kelly, Mr. James \n       male \n       34.5 \n       0 \n       0 \n       330911 \n       7.8292 \n       NaN \n       Q \n     \n     \n       1 \n       893 \n       3 \n       Wilkes, Mrs. James (Ellen Needs) \n       female \n       47.0 \n       1 \n       0 \n       363272 \n       7.0000 \n       NaN \n       S \n     \n     \n       2 \n       894 \n       2 \n       Myles, Mr. Thomas Francis \n       male \n       62.0 \n       0 \n       0 \n       240276 \n       9.6875 \n       NaN \n       Q \n     \n      1 df_train . info ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 <class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.6+ KB   1 df_train . describe ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Survived \n       Pclass \n       Age \n       SibSp \n       Parch \n       Fare \n     \n   \n   \n     \n       count \n       891.000000 \n       891.000000 \n       891.000000 \n       714.000000 \n       891.000000 \n       891.000000 \n       891.000000 \n     \n     \n       mean \n       446.000000 \n       0.383838 \n       2.308642 \n       29.699118 \n       0.523008 \n       0.381594 \n       32.204208 \n     \n     \n       std \n       257.353842 \n       0.486592 \n       0.836071 \n       14.526497 \n       1.102743 \n       0.806057 \n       49.693429 \n     \n     \n       min \n       1.000000 \n       0.000000 \n       1.000000 \n       0.420000 \n       0.000000 \n       0.000000 \n       0.000000 \n     \n     \n       25% \n       223.500000 \n       0.000000 \n       2.000000 \n       20.125000 \n       0.000000 \n       0.000000 \n       7.910400 \n     \n     \n       50% \n       446.000000 \n       0.000000 \n       3.000000 \n       28.000000 \n       0.000000 \n       0.000000 \n       14.454200 \n     \n     \n       75% \n       668.500000 \n       1.000000 \n       3.000000 \n       38.000000 \n       1.000000 \n       0.000000 \n       31.000000 \n     \n     \n       max \n       891.000000 \n       1.000000 \n       3.000000 \n       80.000000 \n       8.000000 \n       6.000000 \n       512.329200",
            "title": "Import the Data and Explore it"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#visual-exploratory-data-analysis-eda-and-a-first-model",
            "text": "With seaborn.  1 sns . countplot ( x = 'Survived' ,   data = df_train )    1 <matplotlib.axes._subplots.AxesSubplot at 0x7fc65fa0e668>    Take-away : in the training set, less people survived than didn\u2019t. Let\u2019s then build a first model that predicts that nobody survived.  This is a bad model as we know that people survived. But it gives us a  baseline : any model that we build later needs to do better than this one.   Create a column  Survived  for  df_test  that encodes \u2018did not survive\u2019 for all rows;  Save  PassengerId  and  Survived  columns of  df_test  to a .csv and submit to Kaggle.   1\n2 df_test [ 'Survived' ]   =   0  df_test [[ 'PassengerId' ,   'Survived' ]] . to_csv ( 'results/no_survivors.csv' ,   index = False )",
            "title": "Visual Exploratory Data Analysis (EDA) and a First Model"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-1st",
            "text": "Go to  Kaggle , log in, and search for  Titanic: Machine Learning from Disaster .   Join the competition and submit the .csv file.  Add a description and submit.  Kaggle returns a ranking.  At the time of the first submission: score 0.63679, rank 9387.",
            "title": "Submit to Kaggle (1st)"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#eda-on-feature-variables",
            "text": "Do some more Exploratory Data Analysis and build another model!  1 sns . countplot ( x = 'Sex' ,   data = df_train );     1\n2 # kind is the facets  sns . factorplot ( x = 'Survived' ,   col = 'Sex' ,   kind = 'count' ,   data = df_train )    1 <seaborn.axisgrid.FacetGrid at 0x7fc65fa35a20>    Take-away : Women were more likely to survive than men.  With this take-away, we can use pandas to figure out how many women and how many men survived:  1 df_train . head ( 1 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Survived \n       Pclass \n       Name \n       Sex \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n     \n   \n   \n     \n       0 \n       1 \n       0 \n       3 \n       Braund, Mr. Owen Harris \n       male \n       22.0 \n       1 \n       0 \n       A/5 21171 \n       7.25 \n       NaN \n       S \n     \n      1\n2 # Chain a group by Sex, sum Survived  df_train . groupby ([ 'Sex' ]) . Survived . sum ()    1\n2\n3\n4 Sex\nfemale    233\nmale      109\nName: Survived, dtype: int64   1\n2\n3\n4\n5\n6 # Chain calculations  print ( df_train [ df_train . Sex   ==   'female' ] . Survived . sum ()   / \n       df_train [ df_train . Sex   ==   'female' ] . Survived . count ())  print ( df_train [ df_train . Sex   ==   'male' ] . Survived . sum ()   / \n       df_train [ df_train . Sex   ==   'male' ] . Survived . count ())    1\n2 0.742038216561\n0.188908145581   74% of women survived, while 19% of men survived.  Build a second model and predict that all women survived and all men didn\u2019t.   Create a column  Survived  for  df_test  that encodes the above prediction.  Save  PassengerId  and  Survived  columns of  df_test  to a .csv and submit to Kaggle.   1\n2\n3 df_test [ 'Survived' ]   =   df_test . Sex   ==   'female'  df_test [ 'Survived' ]   =   df_test . Survived . apply ( lambda   x :   int ( x ))  df_test . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Pclass \n       Name \n       Sex \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n       Survived \n     \n   \n   \n     \n       0 \n       892 \n       3 \n       Kelly, Mr. James \n       male \n       34.5 \n       0 \n       0 \n       330911 \n       7.8292 \n       NaN \n       Q \n       0 \n     \n     \n       1 \n       893 \n       3 \n       Wilkes, Mrs. James (Ellen Needs) \n       female \n       47.0 \n       1 \n       0 \n       363272 \n       7.0000 \n       NaN \n       S \n       1 \n     \n     \n       2 \n       894 \n       2 \n       Myles, Mr. Thomas Francis \n       male \n       62.0 \n       0 \n       0 \n       240276 \n       9.6875 \n       NaN \n       Q \n       0 \n     \n      1 df_test [[ 'PassengerId' ,   'Survived' ]] . to_csv ( 'results/women_survived.csv' ,   index = False )",
            "title": "EDA on Feature Variables"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-2nd",
            "text": "Go to  Kaggle , log in, and search for  Titanic: Machine Learning from Disaster .   Join the competition and submit the .csv file.  Add a description and submit.  Kaggle returns a ranking.  At the time of the first submission: score 0.76555 (from 0.62679), rank 7274 (a jump of 2122 places).",
            "title": "Submit to Kaggle (2nd)"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#explore-the-data-more",
            "text": "1\n2 # kind is the facets  sns . factorplot ( x = 'Survived' ,   col = 'Pclass' ,   kind = 'count' ,   data = df_train )    1 <seaborn.axisgrid.FacetGrid at 0x7fc65f8dcf98>    Take-away : Passengers that travelled in first class were more likely to survive. On the other hand, passengers travelling in third class were more unlikely to survive.   1\n2 # kind is the facets  sns . factorplot ( x = 'Survived' ,   col = 'Embarked' ,   kind = 'count' ,   data = df_train )    1 <seaborn.axisgrid.FacetGrid at 0x7fc65f937c50>    Take-away : Passengers that embarked in Southampton were less likely to survive.",
            "title": "Explore the Data More!"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#eda-with-numeric-variables",
            "text": "1 sns . distplot ( df_train . Fare ,   kde = False )    1 <matplotlib.axes._subplots.AxesSubplot at 0x7fc6633fb9e8>    Take-away : Most passengers paid less than 100 for travelling with the Titanic.  1\n2 # Group by Survived, trace histograms of Fare with alpha color 0.6  df_train . groupby ( 'Survived' ) . Fare . hist ( alpha = 0.6 )    1\n2\n3\n4 Survived\n0    Axes(0.125,0.125;0.775x0.775)\n1    Axes(0.125,0.125;0.775x0.775)\nName: Fare, dtype: object    Take-away : It looks as though those that paid more had a higher chance of surviving.  1\n2\n3\n4 # Remove NaN  df_train_drop   =   df_train . dropna ()  sns . distplot ( df_train_drop . Age ,   kde = False )    1 <matplotlib.axes._subplots.AxesSubplot at 0x7fc65f64be80>    1\n2\n3\n4\n5 # Alternative to bars or scatter  sns . stripplot ( x = 'Survived' ,  \n               y = 'Fare' ,  \n               data = df_train ,  \n               alpha = 0.3 ,   jitter = True )    1 <matplotlib.axes._subplots.AxesSubplot at 0x7fc65f5cca58>    1\n2\n3\n4 # Alternative to bars or scatter  sns . swarmplot ( x = 'Survived' ,  \n               y = 'Fare' ,  \n               data = df_train )    1 <matplotlib.axes._subplots.AxesSubplot at 0x7fc65f2e4ef0>    Take-away : Fare definitely seems to be correlated with survival aboard the Titanic.  1\n2 # Group by Survived, describe Fare (descriptive statistics)  df_train . groupby ( 'Survived' ) . Fare . describe ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       count \n       mean \n       std \n       min \n       25% \n       50% \n       75% \n       max \n     \n     \n       Survived \n       \n       \n       \n       \n       \n       \n       \n       \n     \n   \n   \n     \n       0 \n       549.0 \n       22.117887 \n       31.388207 \n       0.0 \n       7.8542 \n       10.5 \n       26.0 \n       263.0000 \n     \n     \n       1 \n       342.0 \n       48.395408 \n       66.596998 \n       0.0 \n       12.4750 \n       26.0 \n       57.0 \n       512.3292 \n     \n      1\n2\n3\n4\n5 sns . lmplot ( x = 'Age' ,  \n            y = 'Fare' ,  \n            hue = 'Survived' ,  \n            data = df_train ,  \n            fit_reg = False ,   scatter_kws = { 'alpha' : 0.5 })    1 <seaborn.axisgrid.FacetGrid at 0x7fc65f5ccba8>    1\n2\n3\n4\n5 sns . lmplot ( x = 'Age' ,  \n            y = 'Fare' ,  \n            hue = 'Survived' ,  \n            data = df_train ,  \n            fit_reg = True ,   scatter_kws = { 'alpha' : 0.5 })    1 <seaborn.axisgrid.FacetGrid at 0x7fc65f22d710>    Take-away : It looks like those who survived either paid quite a bit for their ticket or they were young.  1 sns . pairplot ( df_train_drop ,   hue = 'Survived' )    1 <seaborn.axisgrid.PairGrid at 0x7fc65f8826d8>",
            "title": "EDA with Numeric Variables"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#a-first-machine-learning-model",
            "text": "A decision tree classifier, with the Python scikit-learn.",
            "title": "A First Machine Learning Model"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#how-to-start-with-supervised-learning-take-2",
            "text": "Now that we have done our homeworks with EDA\u2026   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 # Import modules  import   pandas   as   pd  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns  import   re  import   numpy   as   np  from   sklearn   import   tree  from   sklearn.model_selection   import   train_test_split  from   sklearn.linear_model   import   LogisticRegression  from   sklearn.model_selection   import   GridSearchCV  # Figures inline and set visualization style  % matplotlib   inline  sns . set ()    1\n2\n3 # Import data  df_train   =   pd . read_csv ( 'data/train.csv' )  df_test   =   pd . read_csv ( 'data/test.csv' )    1 df_train . info ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 <class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.6+ KB   1 df_test . info ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 <class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    418 non-null int64\nPclass         418 non-null int64\nName           418 non-null object\nSex            418 non-null object\nAge            332 non-null float64\nSibSp          418 non-null int64\nParch          418 non-null int64\nTicket         418 non-null object\nFare           417 non-null float64\nCabin          91 non-null object\nEmbarked       418 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB   1\n2\n3\n4\n5\n6\n7\n8\n9 # Store target variable of training data in a safe place  survived_train   =   df_train . Survived  # Concatenate (along the index or axis=1) training and test sets  # to preprocess the data a little bit  # and make sure that any operations that  # we perform on the training set are also  # being done on the test data set  data   =   pd . concat ([ df_train . drop ([ 'Survived' ],   axis = 1 ),   df_test ])    1\n2 # The combined datasets (891+418 entries)  data . info ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1046 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1308 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB   Missing values for the  Age  and  Fare  columns! Also notice that  Cabin  and  Embarked  are also missing values and we will need to deal with that also at some point. However, now we will focus on fixing the numerical variables  Age  and  Fare , using the median of the of these variables where we know them. It\u2019s perfect for dealing with outliers. In other words, the median is useful to use when the distribution of data is skewed. Other ways to impute the missing values would be to use the mean or the mode.  1\n2\n3\n4\n5\n6 # Impute missing numerical variables where NaN  data [ 'Age' ]   =   data . Age . fillna ( data . Age . median ())  data [ 'Fare' ]   =   data . Fare . fillna ( data . Fare . median ())  # Check out info of data  data . info ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1309 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1309 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB   Encode the data with numbers with  .get_dummies () .   It creates a new column for female, called  Sex_female , and then a new column for  Sex_male , which encodes whether that row was male or female (1 if that row is a male - and a 0 if that row is female). Because of  drop_first  argument, we dropped  Sex_female  because, essentially, these new columns,  Sex_female  and  Sex_male , encode the same information.  1\n2 data   =   pd . get_dummies ( data ,   columns = [ 'Sex' ],   drop_first = True )  data . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Pclass \n       Name \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n       Sex_male \n     \n   \n   \n     \n       0 \n       1 \n       3 \n       Braund, Mr. Owen Harris \n       22.0 \n       1 \n       0 \n       A/5 21171 \n       7.2500 \n       NaN \n       S \n       1 \n     \n     \n       1 \n       2 \n       1 \n       Cumings, Mrs. John Bradley (Florence Briggs Th... \n       38.0 \n       1 \n       0 \n       PC 17599 \n       71.2833 \n       C85 \n       C \n       0 \n     \n     \n       2 \n       3 \n       3 \n       Heikkinen, Miss. Laina \n       26.0 \n       0 \n       0 \n       STON/O2. 3101282 \n       7.9250 \n       NaN \n       S \n       0 \n     \n      1\n2\n3 # Select columns and view head  data   =   data [[ 'Sex_male' ,   'Fare' ,   'Age' , 'Pclass' ,   'SibSp' ]]  data . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sex_male \n       Fare \n       Age \n       Pclass \n       SibSp \n     \n   \n   \n     \n       0 \n       1 \n       7.2500 \n       22.0 \n       3 \n       1 \n     \n     \n       1 \n       0 \n       71.2833 \n       38.0 \n       1 \n       1 \n     \n     \n       2 \n       0 \n       7.9250 \n       26.0 \n       3 \n       0 \n     \n      1 data . info ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 5 columns):\nSex_male    1309 non-null uint8\nFare        1309 non-null float64\nAge         1309 non-null float64\nPclass      1309 non-null int64\nSibSp       1309 non-null int64\ndtypes: float64(2), int64(2), uint8(1)\nmemory usage: 52.4 KB   All the entries are non-null now.",
            "title": "How to Start with Supervised Learning (Take 2)"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#build-a-decision-tree-classifier",
            "text": "\u201cWas  Sex_male \u201d less than 0.5? In other words, was the data point a female. If the answer to this question is  True , we can go down to the left and we get  Survived . If  False , we go down the right and we get  Dead .   That the first branch is on  Male  or not and that  Male  results in a prediction of  Dead . The gini coefficient is used to make these decisions.  Before fitting a model to the data, split it back into training and test sets:  1\n2 data_train   =   data . iloc [: 891 ]  data_test   =   data . iloc [ 891 :]    scikit-learn requires the data as arrays, not DataFrames. Transform them.  1\n2\n3\n4\n5 X   =   data_train . values  test   =   data_test . values  # and from above: survived_train = df_train.Survived  y   =   survived_train . values    1 X    1\n2\n3\n4\n5\n6\n7 array([[  1.    ,   7.25  ,  22.    ,   3.    ,   1.    ],\n       [  0.    ,  71.2833,  38.    ,   1.    ,   1.    ],\n       [  0.    ,   7.925 ,  26.    ,   3.    ,   0.    ],\n       ..., \n       [  0.    ,  23.45  ,  28.    ,   3.    ,   1.    ],\n       [  1.    ,  30.    ,  26.    ,   1.    ,   0.    ],\n       [  1.    ,   7.75  ,  32.    ,   3.    ,   0.    ]])   Build a decision tree classifier! First create such a model with  max_depth=3  and then fit it the data. Name the model  clf , which is short for \u201cClassifier\u201d.  1\n2\n3\n4\n5\n6 # Instantiate model and fit to data  # The max depth is set at 3  clf   =   tree . DecisionTreeClassifier ( max_depth = 3 )  # X is the indenpendent variables, y is the dependent variable  clf . fit ( X ,   y )    1\n2\n3\n4\n5\n6 DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=3,\n            max_features=None, max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n            splitter='best')   Make predictions on the test set.  1\n2\n3\n4\n5\n6\n7 # Make predictions and store in 'Survived' column of df_test  Y_pred   =   clf . predict ( test )  df_test [ 'Survived' ]   =   Y_pred  # Save it  df_test [[ 'PassengerId' ,   'Survived' ]] . to_csv ( 'results/1st_dec_tree.csv' , \n                                             index = False )",
            "title": "Build a Decision Tree Classifier"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-3rd",
            "text": "Go to  Kaggle , log in, and search for  Titanic: Machine Learning from Disaster .   Join the competition and submit the .csv file.  Add a description and submit.  Kaggle returns a ranking.  At the time of the first submission: score 0.77990 (from 0.76555), rank 4828 (a jump of 2434 places).    1\n2\n3 # Compute accuracy on the training set  train_accuracy   =   clf . score ( X ,   y )  train_accuracy    1 0.8271604938271605",
            "title": "Submit to Kaggle (3rd)"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#a-decision-tree-classifier-in-more-details",
            "text": "The Decision Tree Classifier we just built had a max_depth=3 and it looks like this:   The maximal distance between the first decision and the last is 3, so that\u2019s  max_depth=3 .  Generate images with  graphviz .  1\n2\n3\n4\n5\n6 import   graphviz  tree_data   =   tree . export_graphviz ( clf ,   out_file = None )   graph   =   graphviz . Source ( tree_data )  # Save the pdf  graph . render ( \"img/tree_data\" )    1 'img/tree_data.pdf'   We get a tree_data test file (the code for generating the image) and a pdf file. We can generate an image.  1\n2 feature_names   =   list ( data_train )  feature_names    1 ['Sex_male', 'Fare', 'Age', 'Pclass', 'SibSp']   1\n2\n3\n4\n5\n6\n7\n8\n9 #data_train  #data_test  tree_data   =   tree . export_graphviz ( clf ,   out_file = None ,  \n                                 feature_names = feature_names , \n                                 class_names = None , \n                                 filled = True ,   rounded = True , \n                                 special_characters = True )    graph   =   graphviz . Source ( tree_data )    graph      In building this model, what we are essentially doing is creating a  decision boundary  in the space of feature variables.",
            "title": "A Decision Tree Classifier in More Details"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#why-choose-max_depth3",
            "text": "The depth of the tree is known as a hyperparameter, which means a parameter we need to decide before we fit the model to the data. If we choose a larger  max_depth , we will get a more complex decision boundary;  the bias-variance trade-off.   If the decision boundary is too complex, we can overfit to the data, which means that the model will be describing noise as well as signal.  If the  max_depth  is too small, we might be underfitting the data, meaning that the model doesn\u2019t contain enough of the signal.   One way is to hold out a test set from the training data. We can then fit the model to the training data, make predictions on the test set and see how well the prediction does on the test set.  Split the original training data into training and test sets:  1 X_train ,   X_test ,   y_train ,   y_test   =   train_test_split ( X ,   y ,   test_size = 0.33 ,   random_state = 42 ,   stratify = y )    Iterate over values of  max_depth  ranging from 1 to 9 and plot the accuracy of the models on training and test sets:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 # Setup arrays to store train and test accuracies  dep   =   np . arange ( 1 ,   9 )  train_accuracy   =   np . empty ( len ( dep ))  test_accuracy   =   np . empty ( len ( dep ))  # Loop over different values of k  for   i ,   k   in   enumerate ( dep ): \n     # Setup a k-NN Classifier with k neighbors: knn \n     clf   =   tree . DecisionTreeClassifier ( max_depth = k ) \n\n     # Fit the classifier to the training data \n     clf . fit ( X_train ,   y_train ) \n\n     # Compute accuracy on the training set \n     train_accuracy [ i ]   =   clf . score ( X_train ,   y_train ) \n\n     # Compute accuracy on the testing set \n     test_accuracy [ i ]   =   clf . score ( X_test ,   y_test )  # Generate plot  plt . title ( 'clf: Varying depth of tree' )  plt . plot ( dep ,   test_accuracy ,   label   =   'Testing Accuracy' )  plt . plot ( dep ,   train_accuracy ,   label   =   'Training Accuracy' )  plt . legend ()  plt . xlabel ( 'Depth of tree' )  plt . ylabel ( 'Accuracy' )  plt . show ()     At  max_depth-3 , we get the same results as with the model before (around 82%).  As we increase the max_depth, we are going to fit better and better to the training data because we will make decisions that describe the training data. The accuracy for the training data will go up and up, but we see that this doesn\u2019t happen for the test data: we are overfitting.  So that\u2019s why we chose  max_depth=3 .",
            "title": "Why Choose max_depth=3?"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#feature-engineering",
            "text": "https://www.datacamp.com/community/tutorials/feature-engineering-kaggle  A process where we use domain knowledge of the data to create additional relevant features (create new columns, transform variables and more) that increase the predictive power of the learning algorithm and make the machine learning models perform even better.",
            "title": "Feature Engineering"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#how-to-start-with-feature-engineering",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Imports  import   pandas   as   pd  import   matplotlib.pyplot   as   plt  import   seaborn   as   sns  import   re  import   numpy   as   np  from   sklearn   import   tree  from   sklearn.model_selection   import   GridSearchCV  # Figures inline and set visualization style  % matplotlib   inline  sns . set ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Import data  df_train   =   pd . read_csv ( 'data/train.csv' )  df_test   =   pd . read_csv ( 'data/test.csv' )  # Store target variable of training data in a safe place  survived_train   =   df_train . Survived  # Concatenate training and test sets  data   =   pd . concat ([ df_train . drop ([ 'Survived' ],   axis = 1 ),   df_test ])  # View head  data . info ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1046 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1308 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB",
            "title": "How to Start with Feature Engineering"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#why-feature-engineer-at-all",
            "text": "",
            "title": "Why Feature Engineer At All?"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#titanics-passenger-titles",
            "text": "1\n2 # View head of 'Name' column  data . Name . tail ()    1\n2\n3\n4\n5\n6 413              Spector, Mr. Woolf\n414    Oliva y Ocana, Dona. Fermina\n415    Saether, Mr. Simon Sivertsen\n416             Ware, Mr. Frederick\n417        Peter, Master. Michael J\nName: Name, dtype: object   These titles of course give us information on social status, profession, etc., which in the end could tell us something more about survival. use regular expressions to extract the title and store it in a new column \u2018Title\u2019:  1\n2\n3 # Extract Title from Name, store in column and plot barplot  # One upper character, one lower character, one dot  data [ 'Title' ]   =   data . Name . apply ( lambda   x :   re . search ( ' ([A-Z][a-z]+)\\.' ,   x ) . group ( 1 ))    1\n2 # New column Title is a new feature of the dataset   data . Title . head ( 3 )    1\n2\n3\n4 0      Mr\n1     Mrs\n2    Miss\nName: Title, dtype: object   1\n2 sns . countplot ( x = 'Title' ,   data = data );  plt . xticks ( rotation = 45 );     1\n2\n3\n4 # Substitute some title with their English form  data [ 'Title' ]   =   data [ 'Title' ] . replace ({ 'Mlle' : 'Miss' ,   'Mme' : 'Mrs' ,   'Ms' : 'Miss' })  # Gather exceptions  data [ 'Title' ]   =   data [ 'Title' ] . replace ([ 'Don' ,   'Dona' ,   'Rev' ,   'Dr' ,   'Major' ,   'Lady' ,   'Sir' ,   'Col' ,   'Capt' ,   'Countess' ,   'Jonkheer' ], 'Special' )    1 data . Title . head ( 3 )    1\n2\n3\n4 0      Mr\n1     Mrs\n2    Miss\nName: Title, dtype: object   1\n2 sns . countplot ( x = 'Title' ,   data = data );  plt . xticks ( rotation = 45 );     1\n2 # View tail of data (for change)  data . tail ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Pclass \n       Name \n       Sex \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n       Title \n     \n   \n   \n     \n       415 \n       1307 \n       3 \n       Saether, Mr. Simon Sivertsen \n       male \n       38.5 \n       0 \n       0 \n       SOTON/O.Q. 3101262 \n       7.2500 \n       NaN \n       S \n       Mr \n     \n     \n       416 \n       1308 \n       3 \n       Ware, Mr. Frederick \n       male \n       NaN \n       0 \n       0 \n       359309 \n       8.0500 \n       NaN \n       S \n       Mr \n     \n     \n       417 \n       1309 \n       3 \n       Peter, Master. Michael J \n       male \n       NaN \n       1 \n       1 \n       2668 \n       22.3583 \n       NaN \n       C \n       Master",
            "title": "Titanic's Passenger Titles"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#passengers-cabins",
            "text": "There are several NaNs or missing values in the  Cabin  column. Those NaNs didn\u2019t have a cabin, which could tell us something about survival.  1\n2 # View head of data  data [[ 'Name' ,   'PassengerId' ,   'Ticket' ,   'Cabin' ]] . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Name \n       PassengerId \n       Ticket \n       Cabin \n     \n   \n   \n     \n       0 \n       Braund, Mr. Owen Harris \n       1 \n       A/5 21171 \n       NaN \n     \n     \n       1 \n       Cumings, Mrs. John Bradley (Florence Briggs Th... \n       2 \n       PC 17599 \n       C85 \n     \n     \n       2 \n       Heikkinen, Miss. Laina \n       3 \n       STON/O2. 3101282 \n       NaN \n     \n     \n       3 \n       Futrelle, Mrs. Jacques Heath (Lily May Peel) \n       4 \n       113803 \n       C123 \n     \n     \n       4 \n       Allen, Mr. William Henry \n       5 \n       373450 \n       NaN \n     \n      1\n2\n3\n4\n5\n6 # Did they have a Cabin?  # Return True is the passenger has a cabin  data [ 'Has_Cabin' ]   =   ~ data . Cabin . isnull ()  # # View head of data  data [[ 'Name' ,   'PassengerId' ,   'Ticket' ,   'Cabin' ,   'Has_Cabin' ]] . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Name \n       PassengerId \n       Ticket \n       Cabin \n       Has_Cabin \n     \n   \n   \n     \n       0 \n       Braund, Mr. Owen Harris \n       1 \n       A/5 21171 \n       NaN \n       False \n     \n     \n       1 \n       Cumings, Mrs. John Bradley (Florence Briggs Th... \n       2 \n       PC 17599 \n       C85 \n       True \n     \n     \n       2 \n       Heikkinen, Miss. Laina \n       3 \n       STON/O2. 3101282 \n       NaN \n       False \n     \n     \n       3 \n       Futrelle, Mrs. Jacques Heath (Lily May Peel) \n       4 \n       113803 \n       C123 \n       True \n     \n     \n       4 \n       Allen, Mr. William Henry \n       5 \n       373450 \n       NaN \n       False \n     \n      Drop these columns, except  Has_Cabin , in the actual  data  DataFrame; make sure to use the  inplace  argument in the  .drop ()  method and set it to  True :  1\n2\n3 # Drop columns and view head  data . drop ([ 'Cabin' ,   'Name' ,   'PassengerId' ,   'Ticket' ],   axis = 1 ,   inplace = True )  data . head ()     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Sex \n       Age \n       SibSp \n       Parch \n       Fare \n       Embarked \n       Title \n       Has_Cabin \n     \n   \n   \n     \n       0 \n       3 \n       male \n       22.0 \n       1 \n       0 \n       7.2500 \n       S \n       Mr \n       False \n     \n     \n       1 \n       1 \n       female \n       38.0 \n       1 \n       0 \n       71.2833 \n       C \n       Mrs \n       True \n     \n     \n       2 \n       3 \n       female \n       26.0 \n       0 \n       0 \n       7.9250 \n       S \n       Miss \n       False \n     \n     \n       3 \n       1 \n       female \n       35.0 \n       1 \n       0 \n       53.1000 \n       S \n       Mrs \n       True \n     \n     \n       4 \n       3 \n       male \n       35.0 \n       0 \n       0 \n       8.0500 \n       S \n       Mr \n       False \n     \n      New features such as  Title  and  Has_Cabin .   Features that don\u2019t add any more useful information for the machine learning model are now dropped from the DataFrame.",
            "title": "Passenger's Cabins"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#handling-missing-values",
            "text": "1 data . info ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 9 columns):\nPclass       1309 non-null int64\nSex          1309 non-null object\nAge          1046 non-null float64\nSibSp        1309 non-null int64\nParch        1309 non-null int64\nFare         1308 non-null float64\nEmbarked     1307 non-null object\nTitle        1309 non-null object\nHas_Cabin    1309 non-null bool\ndtypes: bool(1), float64(2), int64(3), object(3)\nmemory usage: 133.3+ KB   Missing values in  Age ,  Fare , and  Embarked . Impute these missing values with the help of  .fillna ()  and use the median to fill in the columns (or the mean, the mode, etc.).  1\n2\n3\n4\n5 # Impute missing values for Age, Fare, Embarked  data [ 'Age' ]   =   data . Age . fillna ( data . Age . median ())  data [ 'Fare' ]   =   data . Fare . fillna ( data . Fare . median ())  data [ 'Embarked' ]   =   data [ 'Embarked' ] . fillna ( 'S' )  data . info ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 9 columns):\nPclass       1309 non-null int64\nSex          1309 non-null object\nAge          1309 non-null float64\nSibSp        1309 non-null int64\nParch        1309 non-null int64\nFare         1309 non-null float64\nEmbarked     1309 non-null object\nTitle        1309 non-null object\nHas_Cabin    1309 non-null bool\ndtypes: bool(1), float64(2), int64(3), object(3)\nmemory usage: 133.3+ KB   1 data . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Sex \n       Age \n       SibSp \n       Parch \n       Fare \n       Embarked \n       Title \n       Has_Cabin \n     \n   \n   \n     \n       0 \n       3 \n       male \n       22.0 \n       1 \n       0 \n       7.2500 \n       S \n       Mr \n       False \n     \n     \n       1 \n       1 \n       female \n       38.0 \n       1 \n       0 \n       71.2833 \n       C \n       Mrs \n       True \n     \n     \n       2 \n       3 \n       female \n       26.0 \n       0 \n       0 \n       7.9250 \n       S \n       Miss \n       False",
            "title": "Handling Missing Values"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#binning-numerical-data",
            "text": "1\n2\n3\n4\n5\n6 # Binning numerical columns  # q=4 means 4 quantiles 0, 1, 2, 3  # labels=False are numbers, not characters  data [ 'CatAge' ]   =   pd . qcut ( data . Age ,   q = 4 ,   labels = False   )  data [ 'CatFare' ] =   pd . qcut ( data . Fare ,   q = 4 ,   labels = False )  data . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Sex \n       Age \n       SibSp \n       Parch \n       Fare \n       Embarked \n       Title \n       Has_Cabin \n       CatAge \n       CatFare \n     \n   \n   \n     \n       0 \n       3 \n       male \n       22.0 \n       1 \n       0 \n       7.2500 \n       S \n       Mr \n       False \n       0 \n       0 \n     \n     \n       1 \n       1 \n       female \n       38.0 \n       1 \n       0 \n       71.2833 \n       C \n       Mrs \n       True \n       3 \n       3 \n     \n     \n       2 \n       3 \n       female \n       26.0 \n       0 \n       0 \n       7.9250 \n       S \n       Miss \n       False \n       1 \n       1 \n     \n      1\n2\n3 # Drop the 'Age' and 'Fare' columns  data   =   data . drop ([ 'Age' ,   'Fare' ],   axis = 1 )  data . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Sex \n       SibSp \n       Parch \n       Embarked \n       Title \n       Has_Cabin \n       CatAge \n       CatFare \n     \n   \n   \n     \n       0 \n       3 \n       male \n       1 \n       0 \n       S \n       Mr \n       False \n       0 \n       0 \n     \n     \n       1 \n       1 \n       female \n       1 \n       0 \n       C \n       Mrs \n       True \n       3 \n       3 \n     \n     \n       2 \n       3 \n       female \n       0 \n       0 \n       S \n       Miss \n       False \n       1 \n       1",
            "title": "Binning Numerical Data"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#number-of-members-in-family-onboard",
            "text": "Create a new column, which is the number of members in families that were onboard of the Titanic.  1\n2\n3\n4\n5\n6 # Create column of number of Family members onboard  data [ 'Fam_Size' ]   =   data . Parch   +   data . SibSp  # Drop columns  data   =   data . drop ([ 'SibSp' , 'Parch' ],   axis = 1 )  data . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Sex \n       Embarked \n       Title \n       Has_Cabin \n       CatAge \n       CatFare \n       Fam_Size \n     \n   \n   \n     \n       0 \n       3 \n       male \n       S \n       Mr \n       False \n       0 \n       0 \n       1 \n     \n     \n       1 \n       1 \n       female \n       C \n       Mrs \n       True \n       3 \n       3 \n       1 \n     \n     \n       2 \n       3 \n       female \n       S \n       Miss \n       False \n       1 \n       1 \n       0",
            "title": "Number of Members in Family Onboard"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#transforming-all-variables-into-numerical-variables",
            "text": "Transform all variables into numeric ones. We do this because machine learning models generally take numeric input.  1\n2\n3\n4\n5\n6\n7\n8 # Transform into binary variables  # Has_Cabin is a boolean  # Sex becomes Sex_male=1 or 0  # Embarked becomes Embarked_Q=1 or 0, Embarked_...  # Title becomes Title_Miss=1 or 0, ...  # The former variables are dropped, only the later variables remain  data_dum   =   pd . get_dummies ( data ,   drop_first = True )  data_dum . head ( 3 )     \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Has_Cabin \n       CatAge \n       CatFare \n       Fam_Size \n       Sex_male \n       Embarked_Q \n       Embarked_S \n       Title_Miss \n       Title_Mr \n       Title_Mrs \n       Title_Special \n     \n   \n   \n     \n       0 \n       3 \n       False \n       0 \n       0 \n       1 \n       1 \n       0 \n       1 \n       0 \n       1 \n       0 \n       0 \n     \n     \n       1 \n       1 \n       True \n       3 \n       3 \n       1 \n       0 \n       0 \n       0 \n       0 \n       0 \n       1 \n       0 \n     \n     \n       2 \n       3 \n       False \n       1 \n       1 \n       0 \n       0 \n       0 \n       1 \n       1 \n       0 \n       0 \n       0 \n     \n      First, split the data back into training and test sets. Then, transform them into arrays:  1\n2\n3\n4\n5\n6\n7\n8 # Split into test.train  data_train   =   data_dum . iloc [: 891 ]  data_test   =   data_dum . iloc [ 891 :]  # Transform into arrays for scikit-learn  X   =   data_train . values  test   =   data_test . values  y   =   survived_train . values",
            "title": "Transforming all Variables into Numerical Variables"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#building-models-with-a-new-dataset",
            "text": "Build a decision tree on a brand new feature-engineered dataset. To choose the hyperparameter  max_depth , we will use a variation on test train split called \u201ccross validation\u201d.   Split the dataset into 5 groups or folds. Then we hold out the first fold as a test set, fit the model on the remaining four folds, predict on the test set and compute the metric of interest. Next, we hold out the second fold as the test set, fit on the remaining data, predict on the test set and compute the metric of interest. Then similarly with the third, fourth and fifth.  As a result, we get five values of accuracy, from which we can compute statistics of interest, such as the median and/or mean and 95% confidence intervals.  We do this for each value of each hyperparameter that we are tuning and choose the set of hyperparameters that performs the best. This is called grid search.  In the following, we will use cross validation and grid search to choose the best  max_depth  for the new feature-engineered dataset:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 # Setup the hyperparameter grid  dep   =   np . arange ( 1 , 9 )  param_grid   =   { 'max_depth'   :   dep }  # Instantiate a decision tree classifier: clf  clf   =   tree . DecisionTreeClassifier ()  # Instantiate the GridSearchCV object: clf_cv  clf_cv   =   GridSearchCV ( clf ,   param_grid = param_grid ,   cv = 5 )  # Fit it to the data  clf_cv . fit ( X ,   y )  # Print the tuned parameter and score  print ( \"Tuned Decision Tree Parameters: {}\" . format ( clf_cv . best_params_ ))  print ( \"Best score is {}\" . format ( clf_cv . best_score_ ))    1\n2 Tuned Decision Tree Parameters: {'max_depth': 3}\nBest score is 0.8294051627384961   Make predictions on the test set, create a new column  Survived  and store the predictions in it.  Save the  PassengerId  and  Survived  columns of  df_test  to a .csv and submit it to Kaggle.  1\n2\n3 Y_pred   =   clf_cv . predict ( test )  df_test [ 'Survived' ]   =   Y_pred  df_test [[ 'PassengerId' ,   'Survived' ]] . to_csv ( 'results/dec_tree_feat_eng.csv' ,   index = False )",
            "title": "Building models with a New Dataset!"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-4th",
            "text": "Go to  Kaggle , log in, and search for  Titanic: Machine Learning from Disaster .   Join the competition and submit the .csv file.  Add a description and submit.  Kaggle returns a ranking.  At the time of the first submission: score 0.78468 (from 0.77980), rank 4009 (a jump of 819 places).",
            "title": "Submit to Kaggle (4th)"
        },
        {
            "location": "/Apprenez a programmer en Python/",
            "text": "CONTENT\n\n\nShebang Line\n\n\nChapter 8, Exceptions\n\n\nChapter 10, Strings\n\n\nChapter 11, Lists and Tuples 1\n\n\nChapter 12, Lists and Tuples 2\n\n\nChapter 13, Dictionaries\n\n\nChapter 14, Files\n\n\nChapter 17, Classes and docstrings\n\n\nChapter 18, (Class) Properties\n\n\nChapter 19, Special Methods\n\n\nChapter 20, Heritage\n\n\nChapter 21, The for Loop Again\n\n\nChapter 23, Decorators\n\n\nChapter 24, Metaclasses\n\n\nChapter 25, Regular Expressions\n\n\nChapter 26, Time\n\n\nChapter 27, System Programming\n\n\nChapter 28, Maths\n\n\nChapter 29, Password Management\n\n\nChapter 30, Network\n\n\nChapter 31, Tkinter\n\n\nChapter 33, Distribute Scripts and Programs\n\n\nChapter 34, PEP\n\n\nChapter 35, More\u2026\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3. From Le Livre du Z\u00e9ro, Simple IT, 2011.\n\n\n\n\nShebang Line\n\u00b6\n\n\nshebang, top, file, environment, language, kernel, python2, python 2, python3, python 3, utf, utf8, utf-8\n\n\nOther names: sha-bang, hashbang, pound-bang, hash-pling.\n\n\nAt the top of scripts\n\n\n\n\nIn Windows, Python 2:\n\n\npython\n\n\n\n\n\n\nWindows, Python 3:\n\n\npython 3\n\n\n\n\n\n\nUNIX, Python 2:\n\n\n#!/usr/bin/env python\n\n\n\n\n\n\nUNIX, Python 3:\n\n\n#!/usr/bin/env python 3\n\n\n\n\n\n\nAdd:\n\n\n# -*coding: utf-8 -*-\n\n\n# -*coding: latin-1 -*-\n\n\n\n\n\n\n\n\nLaunch a script\n\n\n\n\nIn Windows, Python 2:\n\n\npython script.py\n\n\npy script.py\n\n\npy -2 script.py\n\n\npy -2.7 script.py\n\n\n\n\n\n\nIn UNIX, Python 2:\n\n\npython script.py\n\n\n\n\n\n\nIn Windows, Python 3:\n\n\npy -3 script.py\n\n\npy -3.5 script.py\n\n\n\n\n\n\nIn UNIX, Python 3:\n\n\npython3 script.py\n\n\n\n\n\n\n\n\nLaunch the shell/bash\n\n\n\n\nThe shell, Python 2:\n\n\npython\n\n\npy -2\n\n\npy -2.7\n\n\n\n\n\n\nThe bash, Python 2:\n\n\npython\n\n\npython2\n\n\n\n\n\n\nThe shell, Python 3:\n\n\npy -3\n\n\npy -3.5\n\n\n\n\n\n\nThe bash, Python 3:\n\n\npython3\n\n\n\n\n\n\n\n\nChapter 8, Exceptions\n\u00b6\n\n\nBasic.\n\n\n\n\ntry:\n block.\n\n\nexcept\n errors.\n\n\nelse:\n.\n\n\nfinally:\n.\n\n\nassert\n tests and conditions.\n\n\nraise\n an exception.\n\n\n\n\nChapter 10, Strings\n\u00b6\n\n\nBasic.\n\n\nA \n\"string\"\n.\n\n\n\n\nstr()\n function.\n\n\nupper()\n and \nlower()\n methods; upper/lower characters.\n\n\ncapitalize()\n method; first-letter upper character.\n\n\nleft()\n, \nright()\n, \ncenter()\n methods.\n\n\nstrip()\n, \nlstrip()\n, \nrstrip()\n methods; remove white space\n\n\nformat()\n method.\n\n\ncount()\n method.\n\n\nfind()\n method.\n\n\nreplace()\n method.\n\n\n[:]\n to subset a string.\n\n\nwhile\n loop on a string.\n\n\n\n\nChapter 11, Lists and Tuples 1\n\u00b6\n\n\nBasic.\n\n\ndelete, length, size\n\n\nLists are mutable; can add or remove elements from a list; can change the order of elements.\n\n\nA \n[list]\n.\n\n\n\n\ninsert()\n method.\n\n\nappend()\n method.\n\n\nextends()\n method.\n\n\ndel()\n function; delete an indexed element.\n\n\nremove()\n method; remove an occurrence.\n\n\nlen()\n function; length.\n\n\nfor\n loop, \nin\n a list.\n\n\nenumerate\n()\n function; return the index and elements.\n\n\n\n\nTuples are immutable; cannot be modified.\n\n\n(tuple)\n.\n\n\nChapter 12, Lists and Tuples 2\n\u00b6\n\n\nBasic.\n\n\nflexible, function, flexibility, parameter\n\n\nWith lists, functions can have an undetermined number of parameters (very flexible!):\n\n\n\n\ndef my_function(*parameter):\n.\n\n\ndef my_function(a, b, *parameter):\n.\n\n\n\n\nStrings and lists. Create, split, loop through a sequence. Even in a list of list.\n\n\n\n\nsplit()\n method.\n\n\njoin()\n method.\n\n\nfor\n loop, \nin\n a list.\n\n\n\n\nFind the \ntype()\n of a variable (integer, float, boolean, etc.)\n\n\nChapter 13, Dictionaries\n\u00b6\n\n\nBasic.\n\n\ndictionary, flexible, function, flexibility, parameter\n\n\nDictionaries are mutable; you can add or remove elements from a dictionary; order of elements is unimportant.\n\n\nOne-entry dictionary: \n{'key': 'value'}\n.\n\n\nWith dictionaries, functions can have an undetermined number of parameters (very flexible!):\n\n\n\n\ndef my_function(**parameter):\n.\n\n\ndef my_function(a, b, **parameter):\n.\n\n\n\n\nCombine lists and dictionaries in a function with an undetermined number of parameters:\n\n\n\n\ndef my_function(*, parameter, **parameter):\n.\n\n\n\n\ndef my_function(a, b, *parameter, **parameter):\n.\n\n\n\n\n\n\ndel dict['key']\n function; delete.\n\n\n\n\npop()\n method; pop out an element.\n\n\nfor\n loop, \nin\n a dictionary.\n\n\nin dict.keys()\n method; extract the dictionary \ndict\n in order.\n\n\nin dict.values()\n method; extract the values from dictionary \ndict\n.\n\n\nin dict.items()\n method to extract the keys and values from dictionary \ndict\n.\n\n\n\n\nChapter 14, Files\n\u00b6\n\n\nBasic.\n\n\nos\n module. Perform bash, shell operations such as opening, closing, reading, and writing files. Manage relative and absolute path. In UNIX and Windows.\n\n\n\n\nopen()\n method.\n\n\nclose()\n method.\n\n\nread()\n method.\n\n\n\n\nwrite()\n method.\n\n\n\n\n\n\nwith/as\n method; create aliases.\n\n\n\n\n\n\npickle\n module. Record objects in a file and retrieve them.\n\n\n\n\nPickler()\n method.\n\n\n\n\nChapter 17, Classes and docstrings\n\u00b6\n\n\nBasic.\n\n\nclass, instance, self\n\n\ndocstring\n module. Under a \nClass\n, a docstring documents the class. Under \ndef __init__():\n, a docstring documents the attributes. Under \ndef function():\n, a docstring documents the use of the function or class method, under \nvariable\n, a docstring documents the use of the variable.\n\n\nobject.__doc__\n method; accesses the docstring.\n\n\n__all__\n function; displays the list of public names (of objects).\n\n\npydoc\n module. Displays information about an object with the \nhelp(object)\n function.\n\n\ndir(object)\n function; returns an object\u2019s parameters (all the attributes, methods, functions).\n\n\nobject.__dict__\n method; returns an object\u2019s attributes.\n\n\nobject.__dict__[\"att_a\"] = \"att_b\"\n changes an object\u2019s attribute.\n\n\nChapter 18, (Class) Properties\n\u00b6\n\n\nBasic.\n\n\ninstance, constructor\n\n\nMore about the \ndef __init__():\n constructor.\n\n\nChapter 19, Special Methods\n\u00b6\n\n\nBasic.\n\n\nmathematics, display results\n\n\n\n\ndef __repr__(self):\n modifies the way an object is displayed when called.\n\n\n\n\ndef __str__(self):\n method modifies the way an object is displayed when printed.\n\n\n\n\n\n\ndef __getattr__():\n defines a message when an inexistent object\u2019s attributes is called (like a \ntry\n block) vs the built-in \nobject.__dict__\n\n\n\n\ndef __setattr__():\n does the same when an object\u2019s attribute is modified vs the built-in \nobject.__dict__[\"att_a\"] = \"att_b\"\n\n\ndef __delattr__():\n does the same when an object\u2019s attribute is deleted.\n\n\n\n\ndef __hasattr__():\n returns true or false if the attribute exists.\n\n\n\n\n\n\ndef __getitem__():\n, \ndef __setitem__():\n, and \ndef __delitem__():\n all define what to do when we write, respectively: \nobject[index]\n, \nobject[index] = value\n, and \ndel object[index]\n.\n\n\n\n\n\n\nobject.__contains__\n checks out if a list contains a specific element; like \nin\n\n\n\n\n\n\nobject.__len__()\n shows the size of an object.\n\n\n\n\n\n\nobject.__add__(4)\n is equivalent to \nobject + 4\n; \n\n\n\n\ndef __add():\n as well.\n\n\nobject.__sub__()\n or \n-\n.\n\n\n__mul__\n or \n*\n.\n\n\n__truediv__\n or \n/\n.\n\n\n__floordiv__\n or \n//\n.\n\n\n__mod__\n or \n%\n.\n\n\n__pow__\n or \n**\n.\n\n\n__radd__\n, \n__iadd__\n, etc.\n\n\ndef __eq__():\n or \n==\n.\n\n\n__ne__\n or \n!=\n.\n\n\n__gt__\n or \n>\n.\n\n\n__ge__\n or \n>=\n.\n\n\n__lt__\n or \n<\n.\n\n\n\n\n__le__\n or \n<=\n.\n\n\n\n\n\n\npickle\n module. Record objects in a file and retrieve them.\n\n\n\n\n\n\n__getstate__\n method.\n\n\n\n\n__setstate__\n method.\n\n\n\n\nChapter 20, Heritage\n\u00b6\n\n\nBasic.\n\n\nexcept\n\n\nClass heritage transfers all attributes, parameters and methods from a class to a subclass.\n\n\n\n\nissubclass\n verifies (true or false) if a class is a subclass of another class.\n\n\nisinstance\n verifies if an object comes from a class.\n\n\n\n\nA subclass can inherit from two or more classes (multiple heritage).\n\n\nMore exceptions in a \ntry\n block, \nexcept\n, heritage, \nAttributeError\n, \nException\n, \nBaseException\n, and resolution. \n\n\nExceptions are classes with hierarchy.\n\n\nChapter 21, The for Loop Again\n\u00b6\n\n\nBasic.\n\n\nRelated to the \nfor\n loop and how to dig deeper into the iterator with \n__iter__\n and \n__next__\n.\n\n\nIterator can also skip items in a list: iterate from 1 to 5, them jump to 10 and go on. A sort of conditional \nbreak\n. For that, we must generate intervals with \nyield\n.\n\n\nChapter 23, Decorators\n\u00b6\n\n\nAdvanced!\n\n\nsimplify code\n\n\nA decorator simplifies:\n\n\n1\n2\n3\n4\ndef\n \nfunction\n(\n...\n):\n\n    \n...\n\n\n...\n\n\nfunction\n \n=\n \ndecorator\n \n(\nfunction\n)\n\n\n\n\n\nWith:\n\n\n1\n2\n3\n@decorator\n\n\ndef\n \nfunction\n(\n...\n):\n\n    \n...\n\n\n\n\n\n\n\nThere are decorators without parameters, with parameters, applied to classes; chained together.\n\n\nUse:\n\n\n\n\nLimit a class instance to only one instance  or one object (a \nsingleton\n).\n\n\nAdd more control on the type of data going into functions. \n\n\n\n\nChapter 24, Metaclasses\n\u00b6\n\n\nAdvanced!\n\n\n__init__\n initiates an object with attributes, but does not create the object itself. \n\n\nIt is done by coding a new instance or with \n__new__\n. The method is useful to create immutable objects that cannot be modified.\n\n\nCreate dynamic classes with \ntype\n.\n\n\nChapter 25, Regular Expressions\n\u00b6\n\n\nBasic.\n\n\nregex, string, search, beginning, end, replace,  occurrence, character, class, group, number, numbered group, name, named\n\n\nre\n module.\n\n\nChapter 26, Time\n\u00b6\n\n\nBasic.\n\n\ndate, time, year, month, day, hour, minute, second, time zone, timezone, time delta, timedelta, time stamp, timestamp, format\n\n\ntime\n module and \ndatetime\n module.\n\n\nChapter 27, System Programming\n\u00b6\n\n\nBasic.\n\n\ninput, output, stdin, stdout, open, close, read, write, directory, file\n\n\nsys\n module and \nos\n module. Access system variables and control the operating system.\n\n\nsignal\n module. Read process signals sent to programs (such as stopping and exiting). \n\n\nAccess and control the OS console, enter CLI arguments, program actions usually done with the mouse and the keyboard. \n\n\nsystem\n module, related to \nos\n.\n\n\n\n\nos.system('ls')\n on Linux.\n\n\nos.system('dir')\n on Windows.\n\n\n\n\nFor example:\n\n\n1\n2\n3\n4\n5\n6\nimport\n \nos\n\n\n\ncmd\n \n=\n \nos\n.\npopen\n(\n'ls'\n)\n\n\n\ncmd\n\n\ncmd\n.\nread\n()\n\n\n\n\n\n\n\nChapter 28, Maths\n\u00b6\n\n\nBasic.\n\n\nmath\n module.\n\n\nEnables new methods in arithmetics, trigonometry, rounding: \npow()\n, \nsqrt()\n, \nexp()\n, \nfabs()\n, \nradians()\n, \ndegrees()\n, \nceil()\n, \nfloor()\n, \ntrunc()\n, etc\n\n\nfractions\n module.\n\n\nFraction()\n, \nfrom_float()\n, etc.\n\n\nrandom\n module.\n\n\nrandom()\n, \nrandrange()\n, \nrandint()\n, \nchoice()\n, etc.\n\n\nChapter 29, Password Management\n\u00b6\n\n\nWeb framework.\n\n\ngetpass\n module.\n\n\nReceive a password, cypher a password, etc.\n\n\nChapter 30, Network\n\u00b6\n\n\nWeb framework.\n\n\ntcp, protocol, client, server, connection, http, port, socket, connect,  \n\n\nsocket\n module and \nselect\n module.\n\n\nChapter 31, Tkinter\n\u00b6\n\n\nSoftware, application.\n\n\ngui, graphic, interface, window, button, interactive, box, toggle, widget, labels, square, checkbox, list, command\n\n\nTkinter\n module.\n\n\nChapter 33, Distribute Scripts and Programs\n\u00b6\n\n\nBasic.\n\n\nMethod 1: Executable File\n\n\ncx_freeze\n creates a standalone executable file. \ncx_Freeze\n is portable (Windows, Linux, Mac OS X), compatible with Py -2 and Py -3, simple, fast, flexible.\n\n\nDownload, install, use the \ncxfreeze\n script\n\n\nAlternative: \npy2exe\n (Windows only).\n\n\nMethod 2: Setup File\n\n\nThe traditional way of distributing a code and a more powerful approach.\n\n\nChapter 34, PEP\n\u00b6\n\n\nBasic.\n\n\n\n\nPEP 20: The Zen of Python.\n\n\nPEP 8: coding conventions.\n\n\nidentation, tabulation, line length, line spacing, encoding, importing, spacing, commenting, naming, coding comparisons.\n\n\n\n\n\n\nPEP 257: documentation and docstrings.\n\n\n\n\nChapter 35, More\u2026\n\u00b6\n\n\nBasic.\n\n\n\n\nReferences.\n\n\nWiki.\n\n\nPEP.\n\n\nDocumentation.\n\n\nBasic library\n\n\nAdditional libraries.\n\n\ngraphical interfaces: Tk, PyQT, PyGTK, wx Python.\n\n\nweb framworks: Django, CherryPy.\n\n\nnetworks: Twisted.\n\n\n\n\n\n\nIndex.",
            "title": "Apprenez \u00e0 programmer en Python"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-8-exceptions",
            "text": "Basic.   try:  block.  except  errors.  else: .  finally: .  assert  tests and conditions.  raise  an exception.",
            "title": "Chapter 8, Exceptions"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-10-strings",
            "text": "Basic.  A  \"string\" .   str()  function.  upper()  and  lower()  methods; upper/lower characters.  capitalize()  method; first-letter upper character.  left() ,  right() ,  center()  methods.  strip() ,  lstrip() ,  rstrip()  methods; remove white space  format()  method.  count()  method.  find()  method.  replace()  method.  [:]  to subset a string.  while  loop on a string.",
            "title": "Chapter 10, Strings"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-11-lists-and-tuples-1",
            "text": "Basic.  delete, length, size  Lists are mutable; can add or remove elements from a list; can change the order of elements.  A  [list] .   insert()  method.  append()  method.  extends()  method.  del()  function; delete an indexed element.  remove()  method; remove an occurrence.  len()  function; length.  for  loop,  in  a list.  enumerate ()  function; return the index and elements.   Tuples are immutable; cannot be modified.  (tuple) .",
            "title": "Chapter 11, Lists and Tuples 1"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-12-lists-and-tuples-2",
            "text": "Basic.  flexible, function, flexibility, parameter  With lists, functions can have an undetermined number of parameters (very flexible!):   def my_function(*parameter): .  def my_function(a, b, *parameter): .   Strings and lists. Create, split, loop through a sequence. Even in a list of list.   split()  method.  join()  method.  for  loop,  in  a list.   Find the  type()  of a variable (integer, float, boolean, etc.)",
            "title": "Chapter 12, Lists and Tuples 2"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-13-dictionaries",
            "text": "Basic.  dictionary, flexible, function, flexibility, parameter  Dictionaries are mutable; you can add or remove elements from a dictionary; order of elements is unimportant.  One-entry dictionary:  {'key': 'value'} .  With dictionaries, functions can have an undetermined number of parameters (very flexible!):   def my_function(**parameter): .  def my_function(a, b, **parameter): .   Combine lists and dictionaries in a function with an undetermined number of parameters:   def my_function(*, parameter, **parameter): .   def my_function(a, b, *parameter, **parameter): .    del dict['key']  function; delete.   pop()  method; pop out an element.  for  loop,  in  a dictionary.  in dict.keys()  method; extract the dictionary  dict  in order.  in dict.values()  method; extract the values from dictionary  dict .  in dict.items()  method to extract the keys and values from dictionary  dict .",
            "title": "Chapter 13, Dictionaries"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-14-files",
            "text": "Basic.  os  module. Perform bash, shell operations such as opening, closing, reading, and writing files. Manage relative and absolute path. In UNIX and Windows.   open()  method.  close()  method.  read()  method.   write()  method.    with/as  method; create aliases.    pickle  module. Record objects in a file and retrieve them.   Pickler()  method.",
            "title": "Chapter 14, Files"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-17-classes-and-docstrings",
            "text": "Basic.  class, instance, self  docstring  module. Under a  Class , a docstring documents the class. Under  def __init__(): , a docstring documents the attributes. Under  def function(): , a docstring documents the use of the function or class method, under  variable , a docstring documents the use of the variable.  object.__doc__  method; accesses the docstring.  __all__  function; displays the list of public names (of objects).  pydoc  module. Displays information about an object with the  help(object)  function.  dir(object)  function; returns an object\u2019s parameters (all the attributes, methods, functions).  object.__dict__  method; returns an object\u2019s attributes.  object.__dict__[\"att_a\"] = \"att_b\"  changes an object\u2019s attribute.",
            "title": "Chapter 17, Classes and docstrings"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-18-class-properties",
            "text": "Basic.  instance, constructor  More about the  def __init__():  constructor.",
            "title": "Chapter 18, (Class) Properties"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-19-special-methods",
            "text": "Basic.  mathematics, display results   def __repr__(self):  modifies the way an object is displayed when called.   def __str__(self):  method modifies the way an object is displayed when printed.    def __getattr__():  defines a message when an inexistent object\u2019s attributes is called (like a  try  block) vs the built-in  object.__dict__   def __setattr__():  does the same when an object\u2019s attribute is modified vs the built-in  object.__dict__[\"att_a\"] = \"att_b\"  def __delattr__():  does the same when an object\u2019s attribute is deleted.   def __hasattr__():  returns true or false if the attribute exists.    def __getitem__(): ,  def __setitem__(): , and  def __delitem__():  all define what to do when we write, respectively:  object[index] ,  object[index] = value , and  del object[index] .    object.__contains__  checks out if a list contains a specific element; like  in    object.__len__()  shows the size of an object.    object.__add__(4)  is equivalent to  object + 4 ;    def __add():  as well.  object.__sub__()  or  - .  __mul__  or  * .  __truediv__  or  / .  __floordiv__  or  // .  __mod__  or  % .  __pow__  or  ** .  __radd__ ,  __iadd__ , etc.  def __eq__():  or  == .  __ne__  or  != .  __gt__  or  > .  __ge__  or  >= .  __lt__  or  < .   __le__  or  <= .    pickle  module. Record objects in a file and retrieve them.    __getstate__  method.   __setstate__  method.",
            "title": "Chapter 19, Special Methods"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-20-heritage",
            "text": "Basic.  except  Class heritage transfers all attributes, parameters and methods from a class to a subclass.   issubclass  verifies (true or false) if a class is a subclass of another class.  isinstance  verifies if an object comes from a class.   A subclass can inherit from two or more classes (multiple heritage).  More exceptions in a  try  block,  except , heritage,  AttributeError ,  Exception ,  BaseException , and resolution.   Exceptions are classes with hierarchy.",
            "title": "Chapter 20, Heritage"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-21-the-for-loop-again",
            "text": "Basic.  Related to the  for  loop and how to dig deeper into the iterator with  __iter__  and  __next__ .  Iterator can also skip items in a list: iterate from 1 to 5, them jump to 10 and go on. A sort of conditional  break . For that, we must generate intervals with  yield .",
            "title": "Chapter 21, The for Loop Again"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-23-decorators",
            "text": "Advanced!  simplify code  A decorator simplifies:  1\n2\n3\n4 def   function ( ... ): \n     ...  ...  function   =   decorator   ( function )   \nWith:  1\n2\n3 @decorator  def   function ( ... ): \n     ...    There are decorators without parameters, with parameters, applied to classes; chained together.  Use:   Limit a class instance to only one instance  or one object (a  singleton ).  Add more control on the type of data going into functions.",
            "title": "Chapter 23, Decorators"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-24-metaclasses",
            "text": "Advanced!  __init__  initiates an object with attributes, but does not create the object itself.   It is done by coding a new instance or with  __new__ . The method is useful to create immutable objects that cannot be modified.  Create dynamic classes with  type .",
            "title": "Chapter 24, Metaclasses"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-25-regular-expressions",
            "text": "Basic.  regex, string, search, beginning, end, replace,  occurrence, character, class, group, number, numbered group, name, named  re  module.",
            "title": "Chapter 25, Regular Expressions"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-26-time",
            "text": "Basic.  date, time, year, month, day, hour, minute, second, time zone, timezone, time delta, timedelta, time stamp, timestamp, format  time  module and  datetime  module.",
            "title": "Chapter 26, Time"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-27-system-programming",
            "text": "Basic.  input, output, stdin, stdout, open, close, read, write, directory, file  sys  module and  os  module. Access system variables and control the operating system.  signal  module. Read process signals sent to programs (such as stopping and exiting).   Access and control the OS console, enter CLI arguments, program actions usually done with the mouse and the keyboard.   system  module, related to  os .   os.system('ls')  on Linux.  os.system('dir')  on Windows.   For example:  1\n2\n3\n4\n5\n6 import   os  cmd   =   os . popen ( 'ls' )  cmd  cmd . read ()",
            "title": "Chapter 27, System Programming"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-28-maths",
            "text": "Basic.  math  module.  Enables new methods in arithmetics, trigonometry, rounding:  pow() ,  sqrt() ,  exp() ,  fabs() ,  radians() ,  degrees() ,  ceil() ,  floor() ,  trunc() , etc  fractions  module.  Fraction() ,  from_float() , etc.  random  module.  random() ,  randrange() ,  randint() ,  choice() , etc.",
            "title": "Chapter 28, Maths"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-29-password-management",
            "text": "Web framework.  getpass  module.  Receive a password, cypher a password, etc.",
            "title": "Chapter 29, Password Management"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-30-network",
            "text": "Web framework.  tcp, protocol, client, server, connection, http, port, socket, connect,    socket  module and  select  module.",
            "title": "Chapter 30, Network"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-31-tkinter",
            "text": "Software, application.  gui, graphic, interface, window, button, interactive, box, toggle, widget, labels, square, checkbox, list, command  Tkinter  module.",
            "title": "Chapter 31, Tkinter"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-33-distribute-scripts-and-programs",
            "text": "Basic.  Method 1: Executable File  cx_freeze  creates a standalone executable file.  cx_Freeze  is portable (Windows, Linux, Mac OS X), compatible with Py -2 and Py -3, simple, fast, flexible.  Download, install, use the  cxfreeze  script  Alternative:  py2exe  (Windows only).  Method 2: Setup File  The traditional way of distributing a code and a more powerful approach.",
            "title": "Chapter 33, Distribute Scripts and Programs"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-34-pep",
            "text": "Basic.   PEP 20: The Zen of Python.  PEP 8: coding conventions.  identation, tabulation, line length, line spacing, encoding, importing, spacing, commenting, naming, coding comparisons.    PEP 257: documentation and docstrings.",
            "title": "Chapter 34, PEP"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-35-more",
            "text": "Basic.   References.  Wiki.  PEP.  Documentation.  Basic library  Additional libraries.  graphical interfaces: Tk, PyQT, PyGTK, wx Python.  web framworks: Django, CherryPy.  networks: Twisted.    Index.",
            "title": "Chapter 35, More..."
        },
        {
            "location": "/Codecademy Python/",
            "text": "CONTENT\n\n\nUNIT 1, Python Syntax\n\n\nPython Syntax\n\n\nTip Calculator\n\n\nQuiz 1\n\n\n\n\n\n\nUNIT 2, Strings and Console Output\n\n\nStrings & Console Output\n\n\nDate and Time\n\n\nQuiz 2\n\n\nProject Python Mad Libs\n\n\n\n\n\n\nUNIT 3, Conditionals and Control Flow\n\n\nConditionals & Control Flow\n\n\nPygLatin\n\n\nQuiz 3\n\n\nProject Area Calculator\n\n\n\n\n\n\nUNIT 4, Functions\n\n\nFunctions\n\n\nTaking a Vacation\n\n\nQuiz 4\n\n\nProject Number Guess\n\n\n\n\n\n\nUNIT 5, Lists & Dictionaries\n\n\nLists and Dictionaries\n\n\nA Day at the Supermarket\n\n\nQuiz 5\n\n\nProject Rock, Paper, Scissors\n\n\n\n\n\n\nUNIT 6, Student Becomes the Teacher\n\n\nStudent Becomes the Teacher\n\n\n\n\n\n\nUNIT 7, Lists and Functions\n\n\nLists and Functions\n\n\nBattleship!\n\n\nBattleship FINAL!\n\n\nQuiz 7\n\n\n\n\n\n\nUNIT 8, Loops\n\n\nLoops\n\n\nPractice Makes Perfect\n\n\nQuiz 8\n\n\nProject Command Line Calendar\n\n\n\n\n\n\nUNIT 9, Exam Statistics\n\n\nExam Statistics\n\n\n\n\n\n\nUNIT 10, Advanced Topics in Python\n\n\nAdvanced Topics in Python\n\n\nIntroduction to Bitwise Operators\n\n\nProject RGB-HEX Converter\n\n\n\n\n\n\nUNIT 11, Introduction to Classes\n\n\nIntroduction to Classes\n\n\nMore on Classes\n\n\nQuiz 11\n\n\nProject Bank Account\n\n\n\n\n\n\nUNIT 12, File Input and Output\n\n\nFile Input/Output\n\n\n\n\n\n\nMore I/O\n\n\nQuiz 12\n\n\nProject DNA Analysis\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the course. Python 2. From Codecademy. \n\n\n\n\nUNIT 1, Python Syntax\n\u00b6\n\n\nPython Syntax\n\u00b6\n\n\nPython is an easy to learn programming language. You can use it to create web apps, games, even a search engine!\n\n\n1\n2\n3\n4\n5\n6\nprint\n \n\"Welcome to Python!\"\n\n\nprint\n(\n\"Welcome\"\n)\n\n\nprint\n \n5\n \n+\n \n3\n\n\nprint\n(\n5\n \n+\n \n5\n)\n\n\nprint\n \n\"What \"\n \n+\n \nstr\n(\n3\n)\n\n\nprint\n \n\"What\"\n,\n5\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nWelcome to Python!\nWelcome\n8\n10\nWhat 3\nWhat 5\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\na\n \n=\n \n30\n\n\nprint\n \n\"What \"\n \n+\n \nstr\n(\na\n)\n\n\n\nb\n \n=\n \n\"A list \n\\t\n*A  \n\\\\\n \n\\\"\n \n\\'\n \"\n\n\nprint\n \nb\n\n\n\nc\n \n=\n \n10\n \n+\n \n20\n\n\nprint\n \nc\n\n\n\n\n\n\n\n1\n2\n3\nWhat 30\nA list  *A  \\ \" ' \n30\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nprint\n \n\"1 : \n%r\n\"\n \n%\n \n(\na\n)\n \n# read#\n\n\nprint\n \n\"2 : \n%s\n\"\n \n%\n \n(\na\n)\n \n# string#\n\n\nprint\n \n\"? : \n%d\n\"\n \n%\n \n(\na\n)\n \n# digit\n\n\nprint\n \n\"3 : \n%r\n\"\n \n%\n \n(\nb\n)\n\n\nprint\n \n\"4 : \n%s\n\"\n \n%\n \n(\nb\n)\n\n\n# print \"? : %d\" % (b) !!!\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n1\n \n:\n \n30\n\n\n2\n \n:\n \n30\n\n\n?\n \n:\n \n30\n\n\n3\n \n:\n \n'A list \\t*A  \\\\ \" \\' '\n\n\n4\n \n:\n \nA\n \nlist\n  \n*\nA\n  \n\\\n \n\"\n \n'\n\n\n\n\n\n\n\nCreating web apps, games, and search engines all involve storing and working with different types of data. They do so using variables. A variable stores a piece of data, and gives it a specific name.\n\n\n1\nmy_variable\n \n=\n \n10\n\n\n\n\n\n\n\nYou just stored a number in a variable. Numbers are one data type we use in programming. A second data type is called a boolean. A boolean is like a light switch. It can only have two values. Just like a light switch can only be on or off, a boolean can only be \nTrue\n or \nFalse\n.\n\n\n1\n2\n3\nmy_int\n \n=\n \n7\n\n\nmy_float\n \n=\n \n1.23\n\n\nmy_bool\n \n=\n \nTrue\n\n\n\n\n\n\n\nSay \nmy_int = 7\n. You can change the value of a variable by \u201creassigning\u201d it.\n\n\n1\n2\n3\n4\n5\nmy_int\n \n=\n \n7\n\n\n\nmy_int\n \n=\n \n3\n\n\n\nprint\n \nmy_int\n\n\n\n\n\n\n\n1\n3\n\n\n\n\n\n\nIn Python, whitespace is used to structure code. Whitespace is important, so you have to be careful with how you use it.\n\n\n1\n2\n3\n4\n5\ndef\n \nspam\n():\n\n    \neggs\n \n=\n \n12\n\n    \nreturn\n \neggs\n\n\n\nprint\n \nspam\n()\n\n\n\n\n\n\n\n1\n12\n\n\n\n\n\n\nYou\u2019ll get this error whenever your whitespace is off.\n\n\nThe interpreter runs your code line by line, and checks for any errors.\n\n\nYou probably saw us use the # sign a few times in earlier exercises. The # sign is for comments. A comment is a line of text that Python won\u2019t try to run as code. It\u2019s just for humans to read.\n\n\nComments make your program easier to understand. When you look back at your code or others want to collaborate with you, they can read your comments and easily figure out what your code does.\n\n\nThe \n#\n sign will only comment out a single line. While you could write a multi-line comment, starting each line with \n#\n, that can be a pain.\n\n\nInstead, for multi-line comments, you can include the whole block in a set of triple quotation marks:\n\n\n1\n2\n3\n4\n\"\"\"\n\n\nSipping from your cup 'til it runneth over,\n\n\nHoly Grail.\n\n\n\"\"\"\n\n\n\n\n\n\n\n1\n\"\\nSipping from your cup 'til it runneth over,\\nHoly Grail.\\n\"\n\n\n\n\n\n\nGreat! Now let\u2019s do some math. You can add, subtract, multiply, divide numbers.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\naddition\n \n=\n \n72\n \n+\n \n23\n\n\nsubtraction\n \n=\n \n108\n \n-\n \n204\n\n\nmultiplication\n \n=\n \n108\n \n*\n \n0.5\n\n\ndivision\n \n=\n \n108\n \n/\n \n9\n\n\n\ncount_to\n \n=\n \n72\n \n+\n \n56\n\n\n\nprint\n \ncount_to\n\n\n\n\n\n\n\n1\n128\n\n\n\n\n\n\nAll that math can be done on a calculator, so why use Python? Because you can combine math with other data types (e.g. booleans) and commands to create useful programs. Calculators just stick to numbers.\n\n\nCreate a new variable called eight and set it to 8, or the result of 2 to the power to 3 (\n2 ^ 3\n oe \n2 ** 3\n).\n\n\n1\n2\n3\neggs\n \n=\n \n10\n \n**\n \n2\n\n\n\nprint\n \neggs\n\n\n\n\n\n\n\n1\n100\n\n\n\n\n\n\nOur final operator is modulo. Modulo returns the remainder from a division. So, if you type \n3 % 2\n, it will return 1, because 2 goes into 3 evenly once, with 1 left over.\n\n\n1\n2\n3\nspam\n \n=\n \n5\n \n%\n \n4\n\n\n\nprint\n \nspam\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\nTip Calculator\n\u00b6\n\n\nNow let\u2019s apply the concepts from the previous section to a real world example. You\u2019ve finished eating at a restaurant, and received this bill:\n\n\n\n\nCost of meal: $44.50\n\n\nRestaurant tax: 6.75%\n\n\nTip: 15%\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nmeal\n \n=\n \n44.50\n\n\ntax\n \n=\n \n6.75\n/\n100\n \n\ntip\n \n=\n \n0.15\n\n\n\nmeal\n \n=\n \nmeal\n \n+\n \nmeal\n \n*\n \ntax\n\n\ntotal\n \n=\n \nmeal\n \n+\n \nmeal\n \n*\n \ntip\n\n\n\nprint\n(\n\"\n%.2f\n\"\n)\n \n%\n \ntotal\n\n\n\n\n\n\n\n1\n54.63\n\n\n\n\n\n\nQuiz 1\n\u00b6\n\n\nOK\n\n\nUNIT 2, Strings and Console Output\n\u00b6\n\n\nStrings & Console Output\n\u00b6\n\n\nAnother useful data type is the string. A string can contain letters, numbers, and symbols.\n\n\n1\n2\n3\nname\n \n=\n \n\"Ryan\"\n\n\nage\n \n=\n \n\"19\"\n\n\nfood\n \n=\n \n\"cheese\"\n\n\n\n\n\n\n\nLet\u2019s get a little practice in with strings.\n\n\n1\n2\n3\n4\n5\n6\n7\ncaesar\n \n=\n \n\"Graham\"\n\n\npraline\n \n=\n \n\"John\"\n\n\nviking\n \n=\n \n\"Teresa\"\n\n\n\nprint\n \ncaesar\n\n\nprint\n \npraline\n\n\nprint\n \nviking\n\n\n\n\n\n\n\n1\n2\n3\nGraham\nJohn\nTeresa\n\n\n\n\n\n\n1\n'There'\ns\n \na\n \nsnake\n \nin\n \nmy\n \nboot\n!\n'\n\n\n\n\n\n\n\n1\n2\n3\n4\n  File \"<ipython-input-16-13621f01b99c>\", line 1\n    'There's a snake in my boot!'\n           ^\nSyntaxError: invalid syntax\n\n\n\n\n\n\nThis code breaks because Python thinks the apostrophe in \u2018There\u2019s\u2018 ends the string. We can use the backslash to fix the problem, like this:\n\n\n1\n2\n'There\n\\'\ns a snake in my boot!'\n\n\n'This isn\n\\'\nt flying, this is falling with style!'\n\n\n\n\n\n\n\n1\n\"This isn't flying, this is falling with style!\"\n\n\n\n\n\n\nEach character in a string is assigned a number. This number is called the index. Check out the diagram in the editor.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nc\n \n=\n \n\"cats\"\n[\n0\n]\n\n\nn\n \n=\n \n\"Ryan\"\n[\n3\n]\n\n\n\n\"\"\"\n\n\nThe string \"PYTHON\" has six characters,\n\n\nnumbered 0 to 5, as shown below:\n\n\n\n+---+---+---+---+---+---+\n\n\n| P | Y | T | H | O | N |\n\n\n+---+---+---+---+---+---+\n\n\n  0   1   2   3   4   5\n\n\n\nSo if you wanted \"Y\", you could just type\n\n\n\"PYTHON\"[1] (always start counting from 0!)\n\n\n\"\"\"\n\n\nfifth_letter\n \n=\n \n\"MONTY\"\n[\n4\n]\n\n\n\nprint\n \nfifth_letter\n\n\n\n\n\n\n\n1\nY\n\n\n\n\n\n\nNow that we know how to store strings, let\u2019s see how we can change them using string methods. String methods let you perform specific tasks for strings. We\u2019ll focus on four string methods:\n\n\n\n\nlen()\n\n\nlower()\n\n\nupper()\n\n\nstr()\n\n\n\n\nlength, string\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nparrot\n \n=\n \n\"Norwegian Blue\"\n\n\n\nprint\n \nlen\n(\nparrot\n)\n \n# length, number of characters, including blanks\n\n\nprint\n \nparrot\n.\nlower\n()\n \n# to lowercases\n\n\nprint\n \nparrot\n.\nupper\n()\n \n# to uppercases\n\n\n\npi\n \n=\n \n3.14\n\n\n\nprint\n \nstr\n(\npi\n)\n \n# number of character in the string\n\n\n\n\n\n\n\n1\n2\n3\n4\n14\nnorwegian blue\nNORWEGIAN BLUE\n3.14\n\n\n\n\n\n\nlen(string)\n and \nstr(object)\n, but dot notation (such as \u201cString\u201d.upper()) for the rest.\n\n\nMethods that use dot notation only work with strings.\n\n\nOn the other hand, \nlen()\n and \nstr()\n can work on other data types.\n\n\nThe area where we\u2019ve been writing our code is called the editor. The console is where the results of your code is shown. \nprint\n simply displays your code in the console.\n\n\n1\n2\n3\n4\nprint\n \n\"Monty Python\"\n\n\n\nthe_machine_goes\n \n=\n \n\"Ping!\"\n\n\nprint\n \nthe_machine_goes\n\n\n\n\n\n\n\n1\n2\nMonty Python\nPing!\n\n\n\n\n\n\nNow let\u2019s combine the two! The \n+\n operator between strings will \u2018add\u2019 them together, one after the other. Notice that there are spaces inside the quotation marks after Life and of so that we can make the combined string look like 3 words. Combining strings together like this is called concatenation. Let\u2019s try concatenating a few strings together now!\n\n\n1\n2\nprint\n \n\"Life \"\n \n+\n \n\"of \"\n \n+\n \n\"Brian\"\n\n\nprint\n \n\"Spam and eggs\"\n\n\n\n\n\n\n\n1\n2\nLife of Brian\nSpam and eggs\n\n\n\n\n\n\nSometimes you need to combine a string with something that isn\u2019t a string. In order to do that, you have to convert the non-string into a string. he \nstr()\n method converts non-strings into strings. In the above example, you convert the number 2 into a string and then you concatenate the strings together.\n\n\n1\nprint\n \n\"The value of pi is around \"\n \n+\n \nstr\n(\n3.14\n)\n\n\n\n\n\n\n\n1\nThe value of pi is around 3.14\n\n\n\n\n\n\nWhen you want to print a variable with a string, the \n%\n operator after a string is used to combine a string with variables. The \n%\n operator will replace a \n%s\n in the string with the string variable that comes after it.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nstring_1\n \n=\n \n\"Camelot\"\n\n\nstring_2\n \n=\n \n\"place\"\n\n\n\nprint\n \n\"Let's not go to \n%s\n. 'Tis a silly \n%s\n.\"\n \n%\n \n(\nstring_1\n,\n \nstring_2\n)\n\n\n\nname\n \n=\n \nraw_input\n(\n\"What is your name?\"\n)\n\n\nquest\n \n=\n \nraw_input\n(\n\"What is your quest?\"\n)\n\n\ncolor\n \n=\n \nraw_input\n(\n\"What is your favorite color?\"\n)\n\n\n\nprint\n \n\"Ah, so your name is \n%s\n, your quest is \n%s\n, \"\n \\\n    \n\"and your favorite color is \n%s\n.\"\n \n%\n \n(\nname\n,\n \nquest\n,\n \ncolor\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nLet's not go to Camelot. 'Tis a silly place.\nWhat is your name?Al\nWhat is your quest?Graal\nWhat is your favorite color?red\nAh, so your name is Al, your quest is Graal, and your favorite color is red.\n\n\n\n\n\n\nDate and Time\n\u00b6\n\n\nA lot of times you want to keep track of when something happened. We can do so in Python using \ndatetime\n. Here we\u2019ll use datetime to print the date and time in a nice format.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nfrom\n \ndatetime\n \nimport\n \ndatetime\n \n# all functions from datetime are imported\n\n\n\nnow\n \n=\n \ndatetime\n.\nnow\n()\n\n\n\nprint\n \nnow\n\n\nprint\n \nnow\n.\nyear\n\n\nprint\n \nnow\n.\nmonth\n\n\nprint\n \nnow\n.\nday\n\n\n\nprint\n \n'\n%s\n/\n%s\n/\n%s\n'\n \n%\n \n(\nnow\n.\nmonth\n,\n \nnow\n.\nday\n,\n \nnow\n.\nyear\n)\n\n\nprint\n \n'\n%s\n:\n%s\n:\n%s\n'\n \n%\n \n(\nnow\n.\nhour\n,\n \nnow\n.\nminute\n,\n \nnow\n.\nsecond\n)\n\n\n\nprint\n \n'\n%s\n/\n%s\n/\n%s\n \n%s\n:\n%s\n:\n%s\n'\n \n%\n \n(\nnow\n.\nmonth\n,\n \nnow\n.\nday\n,\n \nnow\n.\nyear\n,\n \nnow\n.\nhour\n,\n \nnow\n.\nminute\n,\n \nnow\n.\nsecond\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n2016-10-18 14:02:03.661000\n2016\n10\n18\n10/18/2016\n14:2:3\n10/18/2016 14:2:3\n\n\n\n\n\n\nQuiz 2\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ntime\n \n=\n \ndatetime\n.\nnow\n()\n\n\nprint\n \ntime\n.\nday\n\n\n\ntime\n \n=\n \ndatetime\n.\nnow\n()\n \n#13:08:09\n\n\nprint\n \nstr\n(\ntime\n.\nhour\n)\n \n+\n \n\":\"\n \n+\n \nstr\n(\ntime\n.\nminute\n)\n \n+\n \n\":\"\n \n+\n \nstr\n(\ntime\n.\nsecond\n)\n\n\n\nnow\n \n=\n \ndatetime\n.\nnow\n()\n \n#2013-01-04 19:22:43\n\n\n\nprint\n \n'\n%s\n/\n%s\n/\n%s\n \n%s\n:\n%s\n:\n%s\n'\n \n%\n \n(\nnow\n.\nday\n,\n \nnow\n.\nmonth\n,\n \nnow\n.\nyear\n,\n \nnow\n.\nhour\n,\n \nnow\n.\nminute\n,\n \nnow\n.\nsecond\n)\n\n\n\nday\n \n=\n \n04\n\n\n\n\n\n\n\n1\n2\n3\n18\n14:2:11\n18/10/2016 14:2:11\n\n\n\n\n\n\nProject Python Mad Libs\n\u00b6\n\n\nconcatenate, variable\n\n\nPython can be used for a variety of different tasks. In this project, we\u2019ll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story.\n\n\nMad Libs require:\n\n\n\n\nWords from the reader (for the blank spaces)\n\n\nA story to plug the words into\n\n\n\n\nFor this project, we\u2019ll provide you with the story (feel free to modify it), but it will be up to you to build a program that does the following:\n\n\n\n\nPrompt the user for input\n\n\nPrint the entire Mad Libs story with the user\u2019s input in the right places   \n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\"\"\"\n\n\nPython can be used for a variety of different tasks. In this project, we'll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story.\n\n\n\"\"\"\n\n\n\nprint\n \n\"The program is running.\"\n\n\n\nname\n \n=\n \nraw_input\n(\n\"Input a name? \"\n)\n\n\n\nadj_one\n \n=\n \nraw_input\n(\n\"Input an adjective? \"\n)\n\n\nadj_two\n \n=\n \nraw_input\n(\n\"Input another adjective? \"\n)\n\n\nadj_three\n \n=\n \nraw_input\n(\n\"Input a last adjective? \"\n)\n\n\n\nverb_one\n \n=\n \nraw_input\n(\n\"Input a verb? \"\n)\n\n\nverb_two\n \n=\n \nraw_input\n(\n\"Input another verb? \"\n)\n\n\nverb_three\n \n=\n \nraw_input\n(\n\"Input a last verb? \"\n)\n\n\n\nnoun_one\n \n=\n \nraw_input\n(\n\"Input a noun? \"\n)\n\n\nnoun_two\n \n=\n \nraw_input\n(\n\"Input another noun? \"\n)\n\n\nnoun_three\n \n=\n \nraw_input\n(\n\"Input another noun? \"\n)\n\n\nnoun_four\n \n=\n \nraw_input\n(\n\"Input a last noun? \"\n)\n\n\n\nanimal\n \n=\n \nraw_input\n(\n\"Input an animal? \"\n)\n\n\nfood\n \n=\n \nraw_input\n(\n\"Input a food? \"\n)\n\n\nfruit\n \n=\n \nraw_input\n(\n\"Input a fruit? \"\n)\n\n\nnumber\n \n=\n \nraw_input\n(\n\"Input a number? \"\n)\n\n\nsuperhero\n \n=\n \nraw_input\n(\n\"Input a superhero? \"\n)\n\n\ncountry\n \n=\n \nraw_input\n(\n\"Input a country? \"\n)\n\n\ndessert\n \n=\n \nraw_input\n(\n\"Input a dessert? \"\n)\n\n\nyear\n \n=\n \nraw_input\n(\n\"Input a year? \"\n)\n\n\nprint\n \n\"\"\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nThe program is running.\nInput a name? Al\nInput an adjective? small\nInput another adjective? great\nInput a last adjective? yellow\nInput a verb? dig\nInput another verb? walk\nInput a last verb? eat\nInput a noun? spoon\nInput another noun? lamp\nInput another noun? table\nInput a last noun? pen\nInput an animal? dog\nInput a food? pasta\nInput a fruit? apple\nInput a number? 10\nInput a superhero? spiderman\nInput a country? mexico\nInput a dessert? apple pie\nInput a year? 2016\n\n\n\n\n\n\nThe template for the story.\n\n\n1\n2\n3\nSTORY\n \n=\n \n\"This morning I woke up and felt \n%s\n because \n%s\n was going to finally \n%s\n over the big \n%s\n \n%s\n. On the other side of the \n%s\n were many \n%s\ns protesting to keep \n%s\n in stores. The crowd began to \n%s\n to the rythym of the \n%s\n, which made all of the \n%s\ns very \n%s\n. \n%s\n tried to \n%s\n into the sewers and found \n%s\n rats. Needing help, \n%s\n quickly called \n%s\n. \n%s\n appeared and saved \n%s\n by flying to \n%s\n and dropping \n%s\n into a puddle of \n%s\n. \n%s\n then fell asleep and woke up in the year \n%s\n, in a world where \n%s\ns ruled the world.\"\n\n\n\nprint\n \nSTORY\n \n%\n \n(\nadj_one\n,\n \nname\n,\n \nverb_one\n,\n \nadj_two\n,\n \nnoun_one\n,\n \nnoun_two\n,\n \nanimal\n,\n \nfood\n,\n \nverb_two\n,\n \nnoun_three\n,\n \nfruit\n,\n \nadj_three\n,\n \nname\n,\n \nverb_three\n,\n \nnumber\n,\n \nname\n,\n \nsuperhero\n,\n \nsuperhero\n,\n \nname\n,\n \ncountry\n,\n \nname\n,\n \ndessert\n,\n \nname\n,\n \nyear\n,\n \nnoun_four\n)\n\n\n\n\n\n\n\n1\nThis morning I woke up and felt small because Al was going to finally dig over the big great spoon. On the other side of the lamp were many dogs protesting to keep pasta in stores. The crowd began to walk to the rythym of the table, which made all of the apples very yellow. Al tried to eat into the sewers and found 10 rats. Needing help, Al quickly called spiderman. spiderman appeared and saved Al by flying to mexico and dropping Al into a puddle of apple pie. Al then fell asleep and woke up in the year 2016, in a world where pens ruled the world.\n\n\n\n\n\n\nUNIT 3, Conditionals and Control Flow\n\u00b6\n\n\nConditionals & Control Flow\n\u00b6\n\n\nControl flow gives us this ability to choose among outcomes based off what else is happening in the program.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\ndef\n \nclinic\n():\n\n\n    \nprint\n \n\"You've just entered the clinic!\"\n\n    \nprint\n \n\"Do you take the door on the left or the right?\"\n\n    \nanswer\n \n=\n \nraw_input\n(\n\"Type left or right and hit 'Enter'.\"\n)\n.\nlower\n()\n\n    \nif\n \nanswer\n \n==\n \n\"left\"\n \nor\n \nanswer\n \n==\n \n\"l\"\n:\n\n        \nprint\n \n\"This is the Verbal Abuse Room, you heap of parrot droppings!\"\n\n    \nelif\n \nanswer\n \n==\n \n\"right\"\n \nor\n \nanswer\n \n==\n \n\"r\"\n:\n\n        \nprint\n \n\"Of course this is the Argument Room, I've told you that already!\"\n\n    \nelse\n:\n\n        \nprint\n \n\"You didn't pick left or right! Try again.\"\n\n        \nclinic\n()\n \n# launch the function back\n\n\n\nclinic\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\nYou've just entered the clinic!\nDo you take the door on the left or the right?\nType left or right and hit 'Enter'.left\nThis is the Verbal Abuse Room, you heap of parrot droppings!\n\n\n\n\n\n\nComparators. There are six:\n\n\n\n\nEqual to: \n==\n\n\nNot equal to: \n!=\n\n\nLess than: \n<\n\n\nLess than or equal to: \n<=\n\n\nGreater than: \n>\n\n\nGreater than or equal to: \n>=\n\n\n\n\nNote that \n==\n compares whether two things are equal, and \n=\n assigns a value to a variable.\n\n\n1\n2\n3\nbool_one\n \n=\n \n1\n \n+\n \n2\n\n\nbool_two\n \n=\n \n3\n\n\nbool_one\n \n==\n \nbool_two\n \n# true\n\n\n\n\n\n\n\n1\nTrue\n\n\n\n\n\n\nBoolean operators compare statements and result in boolean values. There are three boolean operators:\n\n\n\n\nand\n, which checks if both the statements are True;\n\n\nor\n, which checks if at least one of the statements is True;\n\n\nnot\n, which gives the opposite of the statement.\n\n\n\n\n1\n2\n3\n4\n5\nbool_one\n \n=\n \n1\n \n>\n \n2\n \nand\n \n2\n \n>\n \n3\n \n# false\n\n\nbool_two\n \n=\n \nFalse\n \nand\n \nTrue\n \n# false\n\n\nbool_one\n \n=\n \nTrue\n \nor\n \nFalse\n \n# true\n\n\nbool_two\n \n=\n \n2\n \n==\n \n2\n \nor\n \n2\n \n==\n \n3\n \n# true\n\n\nbool_one\n \n=\n \nnot\n \n40\n \n!=\n \n41\n \n# true\n\n\n\n\n\n\n\nif\n is a conditional statement.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nanswer\n \n=\n \n\"Left\"\n\n\n\nif\n \nanswer\n \n==\n \n\"Left\"\n:\n\n    \nprint\n \n\"This is the Verbal Abuse Room, you heap of parrot droppings!\"\n\n\n\ndef\n \nusing_control_once\n():\n\n\n    \nif\n \n\"A\"\n==\n\"A\"\n:\n\n        \nreturn\n \n\"Success #1\"\n\n\n\ndef\n \nusing_control_again\n():\n\n\n    \nif\n \n1\n!=\n2\n:\n\n        \nreturn\n \n\"Success #2\"\n\n\n\nprint\n \nusing_control_once\n()\n\n\nprint\n \nusing_control_again\n()\n\n\n\n\n\n\n\n1\n2\n3\nThis is the Verbal Abuse Room, you heap of parrot droppings!\nSuccess #1\nSuccess #2\n\n\n\n\n\n\nThe \nelse\n statement complements the \nif\n statement.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nanswer\n \n=\n \n\"'This but a scratch!\"\n\n\n\ndef\n \nblack_knight\n():\n\n\n    \nif\n \nanswer\n \n==\n \n\"'Tis but a scratch!\"\n:\n\n        \nreturn\n \nTrue\n\n    \nelse\n:\n             \n        \nreturn\n \nFalse\n  \n# Make sure this returns False\n\n\n\ndef\n \nfrench_soldier\n():\n\n\n    \nif\n \nanswer\n \n==\n \n\"Go away, or I shall taunt you a second time!\"\n:\n\n        \nreturn\n \nTrue\n\n    \nelse\n:\n             \n        \nreturn\n \nFalse\n  \n# Make sure this returns False\n\n\n\nprint\n \nblack_knight\n()\n\n\nprint\n \nfrench_soldier\n()\n\n\n\n\n\n\n\n1\n2\nFalse\nFalse\n\n\n\n\n\n\nelif\n is short for \u2018else if\u2019. It means exactly what it sounds like: \u201cotherwise, if the following expression is true, do this!\u201d\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\ndef\n \ngreater_less_equal_5\n(\nanswer\n):\n\n\n    \nif\n \nanswer\n \n>\n \n5\n:\n\n        \nreturn\n \n1\n\n    \nelif\n \nanswer\n \n<\n \n5\n:\n          \n        \nreturn\n \n-\n1\n\n    \nelse\n:\n\n        \nreturn\n \n0\n\n\n\nprint\n \ngreater_less_equal_5\n(\n4\n)\n\n\nprint\n \ngreater_less_equal_5\n(\n5\n)\n\n\nprint\n \ngreater_less_equal_5\n(\n6\n)\n\n\n\n\ndef\n \nthe_flying_circus\n():\n\n\n    \nif\n \n1\n \n!=\n \n0\n \nand\n \n3\n \n>\n \n2\n:\n\n        \nreturn\n \nTrue\n\n    \nelif\n \n0\n \n==\n \n0\n \nor\n \n2\n \n==\n \n2\n:\n\n        \nreturn\n \nFalse\n\n    \nelse\n:\n\n        \nreturn\n \nTrue\n\n\n\nprint\n \nthe_flying_circus\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n-1\n0\n1\nTrue\n\n\n\n\n\n\nPygLatin\n\u00b6\n\n\nNow let\u2019s take what we\u2019ve learned so far and write a Pig Latin translator. Pig Latin is a language game, where you move the first letter of the word to the end and add \u201cay.\u201d So \u201cPython\u201d becomes \u201cythonpay.\u201d \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nprint\n \n'Welcome to the Pig Latin Translator!'\n\n\n\noriginal\n \n=\n \nraw_input\n(\n\"Enter a word:\"\n)\n\n\nif\n \nlen\n(\noriginal\n)\n \n>\n \n0\n \nand\n \noriginal\n.\nisalpha\n():\n\n    \nprint\n \noriginal\n\n\nelse\n:\n\n    \nprint\n \n\"empty\"\n\n\n\n\npyg\n \n=\n \n'ay'\n\n\n\noriginal\n \n=\n \nraw_input\n(\n'Enter a word: '\n)\n\n\n\nif\n \nlen\n(\noriginal\n)\n \n>\n \n0\n \nand\n \noriginal\n.\nisalpha\n():\n\n    \nword\n \n=\n \noriginal\n.\nlower\n()\n\n    \nfirst\n \n=\n \nword\n[\n0\n]\n\n    \nnew_word\n \n=\n \nword\n \n+\n \nfirst\n \n+\n \npyg\n\n    \nnew_word\n \n=\n \nnew_word\n[\n1\n:\nlen\n(\nnew_word\n)]\n\n    \nprint\n \nnew_word\n\n\nelse\n:\n\n    \nprint\n \n'empty'\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nWelcome to the Pig Latin Translator!\nEnter a word:translator\ntranslator\nEnter a word: radiator\nadiatorray\n\n\n\n\n\n\nQuiz 3\n\u00b6\n\n\nTakeaway: there no limits to the number of \nelif\n.\n\n\nProject Area Calculator\n\u00b6\n\n\nPython is especially useful for doing math and can be used to automate many calculations. In this project, you\u2019ll create a calculator than can compute the area of a given shape, as selected by the user. The calculator will be able to determine the area of the following shapes:\n\n\n\n\nCircle\n\n\nTriangle\n\n\n\n\nThe program should do the following:\n\n\n\n\nPrompt the user to select a shape\n\n\nDepending on the shape the user selects, calculate the area of that shape\n\n\nPrint the area of that shape to the user\n\n\n\n\nPython is especially useful for doing math and can be used to automate many calculations.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\nfrom\n \nmath\n \nimport\n \npi\n\n\nfrom\n \ntime\n \nimport\n \nsleep\n\n\nfrom\n \ndatetime\n \nimport\n \ndatetime\n\n\n\nnow\n \n=\n \ndatetime\n.\nnow\n()\n \n# from datetime\n\n\nprint\n \n\"The calculator is starting up at: \n\\n\n\"\n+\nstr\n(\nnow\n)\n\n\n\nprint\n \n\"\n\\n\nCurently: \n%s\n/\n%s\n/\n%s\n \n%s\n:\n%s\n\"\n \n%\n(\nnow\n.\nmonth\n,\n \nnow\n.\nday\n,\n \nnow\n.\nyear\n,\n \nnow\n.\nhour\n,\n \nnow\n.\nminute\n)\n\n\n\nsleep\n(\n1\n)\n \n# pause 1 sec\n\n\n\nhint\n \n=\n \n\"Don't forget to include the correct units!\"\n\n\n\n\nfrom\n \nmath\n \nimport\n \npi\n\n\nfrom\n \ntime\n \nimport\n \nsleep\n\n\n\ndef\n \nquestion\n():\n\n\n        \noption\n \n=\n \nraw_input\n(\n\"Enter C for Circle or T for Triangle: \"\n)\n\n        \nif\n \noption\n.\nupper\n()\n \n==\n \n'C'\n \nor\n \noption\n.\nupper\n()\n \n==\n \n'CIRCLE'\n:\n\n            \nprint\n \ncircle\n()\n\n        \nelif\n \noption\n.\nupper\n()\n \n==\n \n'T'\n \nor\n \noption\n.\nupper\n()\n \n==\n \n'TRIANGLE'\n:\n\n            \nprint\n \ntriangle\n()\n\n        \nelse\n:\n\n            \nprint\n \n\"Please answer with a C or T\"\n,\n \nquestion\n()\n \n#!!!!!!\n\n\n\ndef\n \ncircle\n():\n\n\n    \nradius\n \n=\n \nfloat\n(\nraw_input\n(\n\"Enter radius: \"\n))\n\n\n    \nareac\n \n=\n \npi\n \n*\n \n(\nradius\n \n**\n \n2\n)\n\n    \nprint\n \n\"The pie is baking...\"\n\n    \nsleep\n(\n1\n)\n\n    \nreturn\n(\nstr\n(\n\"\n%.2f\n\"\n \n%\n \nareac\n))\n \n# !!!!!\n\n\n\ndef\n \ntriangle\n():\n\n\n    \nbase\n \n=\n \nfloat\n(\nraw_input\n(\n\"Enter base: \"\n))\n\n    \nheight\n \n=\n \nfloat\n(\nraw_input\n(\n\"Enter height: \"\n))\n\n    \nareat\n \n=\n \nbase\n \n*\n \nheight\n \n/\n \n2\n\n    \nprint\n \n\"Uni Bi Tri...\"\n\n    \nsleep\n(\n1\n)\n\n    \nreturn\n(\nstr\n(\n\"\n%.2f\n\"\n \n%\n \nareat\n))\n \n# !!!!!\n\n\n\nquestion\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nThe calculator is starting up at: \n2016-10-18 14:05:19.204000\n\nCurently: 10/18/2016 14:5\nEnter C for Circle or T for Triangle: T\nEnter base: 10\nEnter height: 5\nUni Bi Tri...\n25.00\n\n\n\n\n\n\nUNIT 4, Functions\n\u00b6\n\n\nFunctions\n\u00b6\n\n\nYou might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it\u2019s much cleaner to define a function, which can then be used repeatedly.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\ndef\n \ntax\n(\nbilla\n):\n\n\n    \nbillb\n \n=\n \nfloat\n(\nbilla\n)\n \n*\n \n1.08\n\n    \nreturn\n \nbillb\n\n\n\ndef\n \ntip\n(\nbillc\n):\n\n\n    \nbilld\n \n=\n \nfloat\n(\nbillc\n)\n \n*\n \n1.15\n\n    \nreturn\n \nbilld\n\n\n\nmeal_cost\n \n=\n \n100.00\n\n\nmeal_with_tax\n \n=\n \ntax\n(\nmeal_cost\n)\n\n\nprint\n(\n\"With tax: \n%.2f\n\"\n \n%\n \nmeal_with_tax\n)\n \n# !!!!!\n\n\nmeal_with_tip\n \n=\n \ntip\n(\nmeal_with_tax\n)\n\n\nprint\n(\n\"With tip: \n%.2f\n\"\n \n%\n \nmeal_with_tip\n)\n\n\n\n# The header, the comment, the body:\n\n\ndef\n \nspam\n():\n\n\n    \n\"\"\"print the string \"Eggs!\" to the console.\"\"\"\n\n    \nprint\n \n\"Eggs!\"\n\n\n\n\n\n\n\n1\n2\nWith tax: 108.00\nWith tip: 124.20\n\n\n\n\n\n\nAfter defining a function, it must be called to be implemented.\n\n\n1\n2\n3\n4\n5\n6\n7\ndef\n \nsquare\n(\nn\n):\n\n\n    \n\"\"\"Returns the square of a number.\"\"\"\n\n    \nsquared\n \n=\n \nn\n \n**\n \n2\n\n    \nreturn\n(\n\"\n%d\n squared is \n%d\n.\"\n \n%\n \n(\nn\n,\n \nsquared\n))\n\n\n\nprint\n \nsquare\n(\n10\n)\n\n\n\n\n\n\n\n1\n10 squared is 100.\n\n\n\n\n\n\nFunctions can be much more powerful than that. For example, a function can call another function.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nn\n \n=\n \n1\n\n\n\ndef\n \none_good_turn\n(\nn\n):\n\n\n    \nreturn\n \nn\n \n+\n \n1\n\n\n\ndef\n \ndeserves_another\n(\nm\n):\n\n\n    \nreturn\n \none_good_turn\n(\nm\n)\n \n+\n \n2\n \n# calling a function already defined\n\n\n\n\n\n\n\nAgain.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\ndef\n \ncube\n(\nnumber\n):\n\n\n    \nreturn\n \nnumber\n \n**\n \n3\n\n\n\ndef\n \nby_three\n(\nnumber\n):\n\n\n    \nif\n \nnumber\n \n%\n \n3\n \n==\n \n0\n:\n    \n        \nreturn\n \ncube\n(\nnumber\n)\n\n    \nelse\n:\n\n        \nreturn\n \nFalse\n\n\n\nby_three\n(\n3\n)\n\n\n\n\n\n\n\n1\n27\n\n\n\n\n\n\nImport modules to use custom functions.\n\n\n1\n2\n3\nimport\n \nmath\n\n\n\nprint\n \nmath\n.\nsqrt\n(\n25\n)\n\n\n\n\n\n\n\n1\n5.0\n\n\n\n\n\n\nHowever, we only really needed the sqrt function, and it can be frustrating to have to keep typing \nmath.sqrt()\n. It\u2019s possible to import only certain variables or functions from a given module (like \npi\n above). Pulling in just a single function from a module is called a function import, and it\u2019s done with the from keyword.\n\n\n1\n2\nfrom\n \nmath\n \nimport\n \nsqrt\n \n# module 'math', function 'sqrt'\n\n\nfrom\n \nmath\n \nimport\n \npi\n \n# module 'math', variable 'pi'\n\n\n\n\n\n\n\nUniversal \nimport\n can handle all of the variables and functions in a module to avoid to constantly type \nmath\n.\n\n\n1\nfrom\n \nmath\n \nimport\n \n*\n\n\n\n\n\n\n\nUniversal \nimport\n may look great on the surface, but they\u2019re not a good idea for one very important reason: they fill your program with a ton of variable and function names without the safety of those names still being associated with the module(s) they came from.\n\n\ndir(), dir\n\n\n1\n2\n3\n4\nimport\n \nmath\n\n\n\neverything\n \n=\n \ndir\n(\nmath\n)\n\n\nprint\n \neverything\n\n\n\n\n\n\n\n1\n['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']\n\n\n\n\n\n\nFor these reasons, it\u2019s best to stick with either \nimport\n \nmodule\n and type \nmodule\n.\nname\n or just import specific variables and functions from various modules as needed.\n\n\nLet\u2019s look at some of the functions that are built in to Python (no modules required!).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\ndef\n \ndistance_from_zero\n(\narg\n):\n\n\n    \nreturn\n \nabs\n(\narg\n)\n\n\n\ndef\n \nbiggest_number\n(\narg1\n,\n \narg2\n):\n\n\n    \nreturn\n \nmin\n(\narg1\n,\n \narg2\n)\n\n\n\ndef\n \nsmallest_number\n(\n*\nargs\n):\n\n\n    \nreturn\n \nmin\n(\nargs\n)\n\n\n\nprint\n \ndistance_from_zero\n(\n-\n10\n)\n\n\n\n\n\n\n\n1\nprint\n \nbiggest_number\n(\n-\n10\n,\n \n-\n5\n)\n\n\n\n\n\n\n\n1\n-10\n\n\n\n\n\n\n1\nprint\n \nbiggest_number\n(\n-\n10\n,\n \n-\n5\n,\n \n5\n,\n \n10\n)\n \n# test\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-24-40abbc687778> in <module>()\n----> 1 print biggest_number(-10, -5, 5, 10) # test\n\n\nTypeError: biggest_number() takes exactly 2 arguments (4 given)\n\n\n\n\n\n\n1\n2\n3\nprint\n \nsmallest_number\n(\n1\n,\n \n2\n)\n\n\nprint\n \nsmallest_number\n(\n3\n,\n \n4\n,\n \n5\n,\n \n6\n,\n \n7\n)\n\n\nprint\n \nsmallest_number\n(\n-\n10\n,\n \n-\n5\n,\n \n5\n,\n \n10\n)\n\n\n\n\n\n\n\n1\n2\n3\n1\n3\n-10\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nmaximum\n \n=\n \nmax\n(\n-\n5\n,\n \n3\n,\n \n5\n,\n \n10\n)\n\n\nprint\n \nmaximum\n\n\n\nminimum\n \n=\n \nmin\n(\n-\n3\n,\n \n-\n5\n)\n\n\nprint\n \nminimum\n\n\n\nabsolute\n \n=\n \nabs\n(\n-\n42\n)\n\n\nprint\n \nabsolute\n\n\n\nprint\n \ntype\n(\n42\n)\n \n# <type 'int'>\n\n\nprint\n \ntype\n(\n4.2\n)\n \n# <type 'float'>\n\n\nprint\n \ntype\n(\n'spam'\n)\n \n# <type 'str'>\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n10\n-5\n42\n<type 'int'>\n<type 'float'>\n<type 'str'>\n\n\n\n\n\n\nTaking a Vacation\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\ndef\n \nhotel_cost\n(\nnights\n):\n\n\n    \nreturn\n \n140\n \n*\n \nnights\n\n\n\ndef\n \nplane_ride_cost\n(\ncity\n):\n\n\n    \nif\n \ncity\n \n==\n \n\"Charlotte\"\n:\n\n        \nreturn\n \n183\n\n    \nelif\n \ncity\n \n==\n \n\"Tampa\"\n:\n\n        \nreturn\n \n220\n\n    \nelif\n \ncity\n \n==\n \n\"Pittsburgh\"\n:\n\n        \nreturn\n \n222\n\n    \nelif\n \ncity\n \n==\n \n\"Los Angeles\"\n:\n\n        \nreturn\n \n475\n\n\n\ndef\n \nrental_car_cost\n(\ndays\n):\n\n\n    \ncost\n \n=\n \ndays\n \n*\n \n40\n\n    \nif\n \ndays\n \n>=\n \n7\n:\n\n        \ncost\n \n-=\n \n50\n\n    \nelif\n \ndays\n \n>=\n \n3\n \nand\n \ndays\n<\n7\n:\n\n        \ncost\n \n-=\n \n20\n\n    \nelse\n:\n\n        \ncost\n\n    \nreturn\n \ncost\n\n\n\ndef\n \ntrip_cost\n(\ncity\n,\n \ndays\n,\n \nspending_money\n):\n\n\n    \nreturn\n \nrental_car_cost\n(\ndays\n)\n \n+\n \nhotel_cost\n(\ndays\n)\n+\nplane_ride_cost\n(\ncity\n)\n \n+\n \nspending_money\n\n\n\nprint\n \ntrip_cost\n(\n\"Los Angeles\"\n,\n \n5\n,\n \n600\n)\n\n\n\n\n\n\n\n1\n1955\n\n\n\n\n\n\nQuiz 4\n\u00b6\n\n\nOK\n\n\nProject Number Guess\n\u00b6\n\n\nWanna play a game? In this project, we\u2019ll build a program that rolls a pair of dice and asks the user to guess a number. Based on the user\u2019s guess, the program should determine a winner. If the user\u2019s guess is greater than the total value of the dice roll, they win! Otherwise, the computer wins.\n\n\nThe program should do the following:\n\n\n\n\nRandomly roll a pair of dice\n\n\nAdd the values of the roll\n\n\nAsk the user to guess a number\n\n\nCompare the user\u2019s guess to the total value\n\n\nDecide a winner (the user or the program)\n\n\nInform the user who the winner is\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\nfrom\n \ntime\n \nimport\n \nsleep\n\n\n\ndef\n \nget_user_guess\n():\n\n\n    \nuser_guess\n \n=\n \nint\n(\nraw_input\n(\n\"Guess a number: \"\n))\n\n    \nreturn\n \nuser_guess\n\n\n\ndef\n \nroll_dice\n(\nnumber_of_sides\n):\n\n\n    \nfirst_roll\n \n=\n \nrandint\n(\n1\n,\n \nnumber_of_sides\n)\n\n    \nsecond_roll\n \n=\n \nrandint\n(\n1\n,\n \nnumber_of_sides\n)\n\n    \nmax_value\n \n=\n \nnumber_of_sides\n \n*\n \n2\n\n    \nprint\n \n\"The maximum value is: \"\n+\nstr\n(\nmax_value\n)\n\n    \nsleep\n(\n1\n)\n\n    \nuser_guess\n \n=\n \nget_user_guess\n()\n\n    \nif\n \nuser_guess\n \n>\n \nmax_value\n:\n\n        \nprint\n \n\"Your guess is higher than the max allowed (\"\n+\nstr\n(\nmax_value\n)\n+\n\"). Please, take another guess.\"\n\n        \nreturn\n \n# exit the if block is condition met\n\n    \nelse\n:\n\n        \nprint\n \n\"Rolling...\"\n\n        \nsleep\n(\n1\n)\n\n        \nprint\n \n\"First roll is: \n%d\n\"\n \n%\n \n(\nfirst_roll\n)\n\n        \nsleep\n(\n1\n)\n\n        \nprint\n \n\"Second roll is: \n%d\n\"\n \n%\n \n(\nsecond_roll\n)\n\n        \ntotal_roll\n \n=\n \nfirst_roll\n \n+\n \nsecond_roll\n\n        \nprint\n \n\"Result...\"\n\n        \nsleep\n(\n1\n)\n\n        \nif\n \nuser_guess\n \n>\n \ntotal_roll\n:\n\n            \nprint\n \n\"You win since your guess, \"\n+\nstr\n(\nuser_guess\n)\n+\n\", is greater than the total roll, \"\n+\nstr\n(\ntotal_roll\n)\n\n            \nreturn\n \n# exit\n\n        \nelse\n:\n\n            \nprint\n \n\"You lose!\"\n\n            \nreturn\n \n# exit\n\n\n\nroll_dice\n(\n6\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nThe maximum value is: 12\nGuess a number: 5\nRolling...\nFirst roll is: 1\nSecond roll is: 2\nResult...\nYou win since your guess, 5, is greater than the total roll, 3\n\n\n\n\n\n\nUNIT 5, Lists & Dictionaries\n\u00b6\n\n\nLists and Dictionaries\n\u00b6\n\n\nLists are a datatype you can use to store a collection of different pieces of information as a sequence under a single variable name. (Datatypes you\u2019ve already learned about include strings, numbers, and booleans.)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nzoo_animals\n \n=\n \n[\n\"pangolin\"\n,\n \n\"cassowary\"\n,\n \n\"sloth\"\n,\n \n\"kangourou\"\n];\n\n\n\n# You can access an individual item on the list by its index. An index is like an address that identifies the item's place in the list. The index appears directly after the list name, in between brackets, like this: list_name[index].\n\n\n\nif\n \nlen\n(\nzoo_animals\n)\n \n>\n \n3\n:\n\n    \nprint\n \n\"The first animal at the zoo is the \"\n \n+\n \nzoo_animals\n[\n0\n]\n\n    \nprint\n \n\"The second animal at the zoo is the \"\n \n+\n \nzoo_animals\n[\n1\n]\n\n    \nprint\n \n\"The third animal at the zoo is the \"\n \n+\n \nzoo_animals\n[\n2\n]\n\n    \nprint\n \n\"The fourth animal at the zoo is the \"\n \n+\n \nzoo_animals\n[\n3\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\nThe first animal at the zoo is the pangolin\nThe second animal at the zoo is the cassowary\nThe third animal at the zoo is the sloth\nThe fourth animal at the zoo is the kangourou\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nnumbers\n \n=\n \n[\n5\n,\n \n6\n,\n \n7\n,\n \n8\n]\n\n\n\nprint\n \n\"Adding the numbers at indices 0 and 2...\"\n\n\nprint\n \nnumbers\n[\n0\n]\n \n+\n \nnumbers\n[\n2\n]\n\n\nprint\n \n\"Adding the numbers at indices 1 and 3...\"\n\n\nprint\n \nnumbers\n[\n1\n]\n \n+\n \nnumbers\n[\n3\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\nAdding the numbers at indices 0 and 2...\n12\nAdding the numbers at indices 1 and 3...\n14\n\n\n\n\n\n\nA list doesn\u2019t have to have a fixed length. You can add items to the end of a list any time you like!\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nsuitcase\n \n=\n \n[]\n\n\n\nsuitcase\n.\nappend\n(\n\"sunglasses\"\n)\n\n\nsuitcase\n.\nappend\n(\n\"calculator\"\n)\n\n\nsuitcase\n.\nappend\n(\n\"screen\"\n)\n\n\nsuitcase\n.\nappend\n(\n\"mouse\"\n)\n\n\n\nlist_length\n \n=\n \nlen\n(\nsuitcase\n)\n \n# Set this to the length of suitcase\n\n\n\nprint\n \nlist_length\n\n\n\nprint\n \n\"There are \n%d\n items in the suitcase.\"\n \n%\n \n(\nlist_length\n)\n\n\nprint\n \nsuitcase\n\n\n\n\n\n\n\n1\n2\n3\n4\nThere are 4 items in the suitcase.\n['sunglasses', 'calculator', 'screen', 'mouse']\n\n\n\n\n\n\n1\n2\n3\n4\n5\nsuitcase\n \n=\n \n[\n\"sunglasses\"\n,\n \n\"hat\"\n,\n \n\"passport\"\n,\n \n\"laptop\"\n,\n \n\"suit\"\n,\n \n\"shoes\"\n]\n\n\n\nfirst\n  \n=\n \nsuitcase\n[\n0\n:\n2\n]\n \n# The first and second items (index zero and one)\n\n\nmiddle\n \n=\n \nsuitcase\n[\n2\n:\n4\n]\n \n# Third and fourth items (index two and three)\n\n\nlast\n \n=\n \nsuitcase\n[\n4\n:\n6\n]\n \n# The last two items (index four and five)\n\n\n\n\n\n\n\nYou can slice a string exactly like a list! In fact, you can think of strings as lists of characters: each character is a sequential item in the list, starting from index 0.\n\n\n1\n2\n3\n4\n5\nanimals\n \n=\n \n\"catdogfrog\"\n\n\n\ncat\n  \n=\n \nanimals\n[:\n3\n]\n \n# The first three characters of animals\n\n\ndog\n  \n=\n \nanimals\n[\n3\n:\n6\n]\n \n# The fourth through sixth characters\n\n\nfrog\n \n=\n \nanimals\n[\n6\n:]\n \n# From the seventh character to the end\n\n\n\n\n\n\n\nSometimes you need to search for an item in a list.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nanimals\n \n=\n \n[\n\"aardvark\"\n,\n \n\"badger\"\n,\n \n\"duck\"\n,\n \n\"emu\"\n,\n \n\"fennec fox\"\n]\n\n\n\nduck_index\n \n=\n \nanimals\n.\nindex\n(\n\"duck\"\n)\n \n# Use index() to find \"duck\"\n\n\n\nprint\n \nduck_index\n\n\n\nanimals\n.\ninsert\n(\nduck_index\n,\n\"cobra\"\n)\n\n\n\nprint\n \nanimals\n \n# Observe what prints after the insert  operation\n\n\n\n\n\n\n\n1\n2\n2\n['aardvark', 'badger', 'cobra', 'duck', 'emu', 'fennec fox']\n\n\n\n\n\n\nIf you want to do something with every item in the list, you can use a for loop.\n\n\n1\n2\n3\n4\nmy_list\n \n=\n \n[\n1\n,\n9\n,\n3\n,\n8\n,\n5\n,\n7\n]\n\n\n\nfor\n \nnumber\n \nin\n \nmy_list\n:\n\n    \nprint\n \n2\n \n*\n \nnumber\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n2\n18\n6\n16\n10\n14\n\n\n\n\n\n\nIf your list is a jumbled mess, you may need to \nsort()\n it.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nstart_list\n \n=\n \n[\n5\n,\n \n3\n,\n \n1\n,\n \n2\n,\n \n4\n]\n\n\nsquare_list\n \n=\n \n[]\n\n\n\nfor\n \nvar\n \nin\n \nstart_list\n:\n\n    \nsquare_list\n.\nappend\n(\nvar\n \n**\n \n2\n)\n\n\n\nsquare_list\n.\nsort\n()\n\n\n\nprint\n \nsquare_list\n\n\n\n\n\n\n\n1\n[1, 4, 9, 16, 25]\n\n\n\n\n\n\nA dictionary is similar to a list, but you access values by looking up a key instead of an index. A key can be any string or number. Dictionaries are great for things like phone books (pairing a name with a phone number), login pages (pairing an e-mail address with a username), and more!\n\n\n1\n2\n3\n4\n5\nresidents\n \n=\n \n{\n'Puffin'\n \n:\n \n104\n,\n \n'Sloth'\n \n:\n \n105\n,\n \n'Burmese Python'\n \n:\n \n106\n}\n\n\n\nprint\n \nresidents\n[\n'Puffin'\n]\n \n# Prints Puffin's room number\n\n\nprint\n \nresidents\n[\n'Sloth'\n]\n\n\nprint\n \nresidents\n[\n'Burmese Python'\n]\n\n\n\n\n\n\n\n1\n2\n3\n104\n105\n106\n\n\n\n\n\n\nAn empty pair of curly braces \n{}\n is an empty dictionary, just like an empty pair of \n[]\n is an empty list.\n\n\nLike Lists, Dictionaries are \u2018mutable\u2019. This means they can be changed after they are created. One advantage of this is that we can add new key-value pairs to the dictionary after it is created.\n\n\nThe length \nlen()\n of a dictionary is the number of key-value pairs it has. Each pair counts only once, even if the value is a list.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nmenu\n \n=\n \n{}\n \n# Empty dictionary\n\n\n\nmenu\n[\n'Chicken Alfredo'\n]\n \n=\n \n14.50\n \n# Adding new key-value pair\n\n\n\nprint\n \nmenu\n[\n'Chicken Alfredo'\n]\n\n\n\nmenu\n[\n'General Tao'\n]\n \n=\n \n12.00\n\n\nmenu\n[\n'Pad Thai'\n]\n \n=\n \n10.50\n\n\nmenu\n[\n'Poutine'\n]\n \n=\n \n9.00\n\n\n\nprint\n \n\"There are \"\n \n+\n \nstr\n(\nlen\n(\nmenu\n))\n \n+\n \n\" items on the menu.\"\n\n\nprint\n \nmenu\n\n\n\nfor\n \nkey\n,\n \nvalue\n \nin\n \nmenu\n.\niteritems\n():\n \n# !!!!!\n\n    \nprint\n \nkey\n,\n \nvalue\n\n\n\nfor\n \nkey\n,\n \nvalue\n \nin\n \nmenu\n.\niteritems\n():\n \n# !!!!!\n\n    \nprint\n \nkey\n\n\n\nfor\n \nkey\n,\n \nvalue\n \nin\n \nmenu\n.\niteritems\n():\n \n# !!!!!\n\n    \nprint\n \nvalue\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n14.5\nThere are 4 items on the menu.\n{'Chicken Alfredo': 14.5, 'General Tao': 12.0, 'Poutine': 9.0, 'Pad Thai': 10.5}\nChicken Alfredo 14.5\nGeneral Tao 12.0\nPoutine 9.0\nPad Thai 10.5\nChicken Alfredo\nGeneral Tao\nPoutine\nPad Thai\n14.5\n12.0\n9.0\n10.5\n\n\n\n\n\n\nBecause dictionaries are mutable, they can be changed in many ways. Items can be removed from a dictionary with the \ndel()\n command.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# key - animal_name : value - location \n\n\n\nzoo_animals\n \n=\n \n{\n\n\n'Unicorn'\n \n:\n \n'Cotton Candy House'\n,\n\n\n'Sloth'\n \n:\n \n'Rainforest Exhibit'\n,\n\n\n'Bengal Tiger'\n \n:\n \n'Jungle House'\n,\n\n\n'Atlantic Puffin'\n \n:\n \n'Arctic Exhibit'\n,\n\n\n'Rockhopper Penguin'\n \n:\n \n'Arctic Exhibit'\n\n\n}\n\n\n\n\n\n\n\nA dictionary (or list) declaration may break across multiple lines\n\n\nRemoving the \u2018Unicorn\u2019 entry. (Unicorns are incredibly expensive.)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nzoo_animals\n \n=\n \n{\n\n\n'Unicorn'\n \n:\n \n'Cotton Candy House'\n,\n\n\n'Sloth'\n \n:\n \n'Rainforest Exhibit'\n,\n\n\n'Bengal Tiger'\n \n:\n \n'Jungle House'\n,\n\n\n'Atlantic Puffin'\n \n:\n \n'Arctic Exhibit'\n,\n\n\n'Rockhopper Penguin'\n \n:\n \n'Arctic Exhibit'\n\n\n}\n\n\n\ndel\n \nzoo_animals\n[\n'Unicorn'\n]\n\n\ndel\n \nzoo_animals\n[\n'Sloth'\n]\n\n\ndel\n \nzoo_animals\n[\n'Bengal Tiger'\n]\n\n\nzoo_animals\n[\n'Rockhopper Penguin'\n]\n \n=\n \n'Cotton Candy House'\n\n\n\nprint\n \nzoo_animals\n\n\n\n\n\n\n\n1\n{'Atlantic Puffin': 'Arctic Exhibit', 'Rockhopper Penguin': 'Cotton Candy House'}\n\n\n\n\n\n\nSometimes you need to remove something from a list.\n\n\n1\n2\n3\nbackpack\n \n=\n \n[\n'xylophone'\n,\n \n'dagger'\n,\n \n'tent'\n,\n \n'bread loaf'\n]\n\n\n\nbackpack\n.\nremove\n(\n'dagger'\n)\n\n\n\n\n\n\n\nWe can create a dictionary that holds many types of values.\n\n\nextract, sort, remove\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\ninventory\n \n=\n \n{\n\n    \n'gold'\n \n:\n \n500\n,\n\n    \n'pouch'\n \n:\n \n[\n'flint'\n,\n \n'twine'\n,\n \n'gemstone'\n],\n \n# Assigned a new list to 'pouch' key\n\n    \n'backpack'\n \n:\n \n[\n'xylophone'\n,\n'dagger'\n,\n \n'bedroll'\n,\n'bread loaf'\n]\n\n\n}\n\n\n\nprint\n \ninventory\n\n\n\n# Adding a key 'burlap bag' and assigning a list to it\n\n\ninventory\n[\n'burlap bag'\n]\n \n=\n \n[\n'apple'\n,\n \n'small ruby'\n,\n \n'three-toed sloth'\n]\n\n\n\nprint\n \ninventory\n\n\n\n\n\n\n\n1\n2\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'gold': 500}\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\n\n\n\n1\n2\n3\n4\n# Sorting the list found under the key 'pouch'\n\n\ninventory\n[\n'pouch'\n]\n.\nsort\n()\n \n\n\nprint\n \ninventory\n\n\n\n\n\n\n\n1\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\n\n\n\n1\n2\n3\ninventory\n[\n'pocket'\n]\n \n=\n \n[\n'seashell'\n,\n \n'strange berry'\n,\n \n'lint'\n]\n\n\n\nprint\n \ninventory\n\n\n\n\n\n\n\n1\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\n\n\n\n1\n2\n3\ninventory\n[\n'backpack'\n]\n.\nsort\n()\n\n\n\nprint\n \ninventory\n\n\n\n\n\n\n\n1\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'dagger', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\n\n\n\n1\n2\n3\ninventory\n[\n'backpack'\n]\n.\nremove\n(\n'dagger'\n)\n\n\n\nprint\n \ninventory\n\n\n\n\n\n\n\n1\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\n\n\n\n1\n2\n3\ninventory\n[\n'gold'\n]\n \n+=\n \n50\n\n\n\nprint\n \ninventory\n\n\n\n\n\n\n\n1\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 550}\n\n\n\n\n\n\nA Day at the Supermarket\n\u00b6\n\n\nfor\n loops allow us to iterate through all of the elements in a list from the left-most (or zeroth element) to the right-most element.\n\n\n1\n2\n3\n4\nnames\n \n=\n \n[\n\"Adam\"\n,\n \n\"Alex\"\n,\n \n\"Mariah\"\n,\n \n\"Martine\"\n,\n \n\"Columbus\"\n]\n\n\n\nfor\n \nitems\n \nin\n \nnames\n:\n\n    \nprint\n \nitems\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nAdam\nAlex\nMariah\nMartine\nColumbus\n\n\n\n\n\n\nYou can also use a for loop on a dictionary to loop through its keys.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nwebster\n \n=\n \n{\n\n    \n\"Aardvark\"\n \n:\n \n\"A star of a popular children's cartoon show.\"\n,\n\n    \n\"Baa\"\n \n:\n \n\"The sound a goat makes.\"\n,\n\n    \n\"Carpet\"\n:\n \n\"Goes on the floor.\"\n,\n\n    \n\"Dab\"\n:\n \n\"A small amount.\"\n\n\n}\n\n\n\nfor\n \nitem\n \nin\n \nwebster\n:\n\n    \nprint\n \nwebster\n[\nitem\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\nA star of a popular children's cartoon show.\nGoes on the floor.\nA small amount.\nThe sound a goat makes.\n\n\n\n\n\n\nWhile looping, you may want to perform different actions depending on the particular item in the list.\n\n\n1\n2\n3\n4\n5\na\n \n=\n \n[\n0\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n,\n \n7\n,\n \n8\n,\n \n9\n,\n \n10\n,\n \n11\n,\n \n12\n,\n \n13\n]\n\n\n\nfor\n \nitem\n \nin\n \na\n:\n\n    \nif\n \nitem\n \n%\n \n2\n \n==\n \n0\n:\n\n        \nprint\n \nitem\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n0\n2\n4\n6\n8\n10\n12\n\n\n\n\n\n\nFunctions can also take lists as inputs and perform various operations on those lists.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\ndef\n \ncount_small\n(\nnumbers\n):\n\n\n    \ntotal\n \n=\n \n0\n\n    \nfor\n \nn\n \nin\n \nnumbers\n:\n\n        \nif\n \nn\n \n<\n \n10\n:\n\n            \ntotal\n \n=\n \ntotal\n \n+\n \n1\n\n    \nreturn\n \ntotal\n\n\n\nlost\n \n=\n \n[\n4\n,\n \n8\n,\n \n15\n,\n \n16\n,\n \n23\n,\n \n42\n]\n\n\nsmall\n \n=\n \ncount_small\n(\nlost\n)\n\n\n\nprint\n \nsmall\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n\n\nYou can loop through strings the same way you loop through lists!\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nfor\n \nletter\n \nin\n \n\"Codecademy\"\n:\n\n    \nprint\n \nletter\n\n\n\nword\n \n=\n \n\"Programming is fun!\"\n\n\n\nfor\n \nletter\n \nin\n \nword\n:\n\n    \n# Only print out the letter i\n\n    \nif\n \nletter\n \n==\n \n\"i\"\n:\n\n        \nprint\n \nletter\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nC\no\nd\ne\nc\na\nd\ne\nm\ny\ni\ni\n\n\n\n\n\n\nYou are now the proud owner of your very own Codecademy brand supermarket. For paperwork and accounting purposes, let\u2019s record the total value of your inventory.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nprices\n \n=\n \n{\n\n    \n\"banana\"\n \n:\n \n4\n,\n\n    \n\"apple\"\n \n:\n \n2\n,\n\n    \n\"orange\"\n \n:\n \n1.5\n,\n\n    \n\"pear\"\n \n:\n \n3\n\n    \n}\n\n\n\nstock\n \n=\n \n{\n\n    \n\"banana\"\n \n:\n \n6\n,\n\n    \n\"apple\"\n \n:\n \n0\n,\n\n    \n\"orange\"\n \n:\n \n32\n,\n\n    \n\"pear\"\n \n:\n \n15\n\n    \n}\n\n\n\ntotal\n \n=\n \n0\n\n\n\nfor\n \nitem\n \nin\n \nprices\n:\n\n    \nprint\n \nitem\n \n# print key\n\n    \nprint\n \n\"price: \n%s\n\"\n \n%\n \nprices\n[\nitem\n]\n \n# print value\n\n    \nprint\n \n\"stock: \n%s\n\"\n \n%\n \nstock\n[\nitem\n]\n\n    \nprint\n \nprices\n[\nitem\n]\n*\nstock\n[\nitem\n]\n\n    \ntotal\n \n+=\n \nprices\n[\nitem\n]\n*\nstock\n[\nitem\n]\n\n\n\nprint\n \ntotal\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\norange\nprice: 1.5\nstock: 32\n48.0\npear\nprice: 3\nstock: 15\n45\nbanana\nprice: 4\nstock: 6\n24\napple\nprice: 2\nstock: 0\n0\n117.0\n\n\n\n\n\n\nIn order for customers to order online, we are going to have to make a consumer interface.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nshopping_list\n \n=\n \n[\n\"banana\"\n,\n \n\"orange\"\n,\n \n\"apple\"\n]\n\n\n\nstock\n \n=\n \n{\n\n    \n\"banana\"\n \n:\n \n6\n,\n\n    \n\"apple\"\n \n:\n \n0\n,\n\n    \n\"orange\"\n \n:\n \n32\n,\n\n    \n\"pear\"\n \n:\n \n15\n\n\n}\n\n\n\nprices\n \n=\n \n{\n\n    \n\"banana\"\n \n:\n \n4\n,\n\n    \n\"apple\"\n \n:\n \n2\n,\n\n    \n\"orange\"\n \n:\n \n1.5\n,\n\n    \n\"pear\"\n \n:\n \n3\n\n\n}\n\n\n\ndef\n \ncompute_bill\n(\nfood\n):\n\n\n    \ntotal\n \n=\n \n0\n\n    \nfor\n \nitem\n \nin\n \nfood\n:\n\n        \nif\n \nstock\n[\nitem\n]\n \n>\n \n0\n:\n\n            \ntotal\n \n+=\n \nprices\n[\nitem\n]\n \n# you only pick one from the stock!\n\n            \nstock\n[\nitem\n]\n \n=\n \nstock\n[\nitem\n]\n \n-\n \n1\n \n# the stock goes down by 1\n\n    \nprint\n \ntotal\n\n    \nreturn\n \nfood\n\n\n\nprint\n \ncompute_bill\n(\nshopping_list\n)\n\n\n\n\n\n\n\n1\n2\n5.5\n['banana', 'orange', 'apple']\n\n\n\n\n\n\nQuiz 5\n\u00b6\n\n\nOK\n\n\nProject Rock, Paper, Scissors\n\u00b6\n\n\nIn this project, we\u2019ll build Rock-Paper-Scissors!\n\n\nThe program should do the following:\n\n\n\n\nPrompt the user to select either Rock, Paper, or Scissors\n\n\nInstruct the computer to randomly select either Rock, Paper, or Scissors\n\n\nCompare the user\u2019s choice and the computer\u2019s choice\n\n\nDetermine a winner (the user or the computer)\n\n\nInform the user who the winner is\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\nfrom\n \ntime\n \nimport\n \nsleep\n\n\n\noptions\n \n=\n \n[\n\"R\"\n,\n \n\"P\"\n,\n \n\"S\"\n]\n\n\nLOSE\n \n=\n \n\"You lost!\"\n \n# constant, uppercase\n\n\nWIN\n \n=\n \n\"You win!\"\n\n\n\ndef\n \ndecide_winner\n(\nuser_choice\n,\n \ncomputer_choice\n):\n\n\n    \nprint\n(\n\"You picked: \"\n+\nstr\n(\nuser_choice\n))\n\n    \nprint\n \n\"Computer selecting...\"\n\n\n    \nsleep\n(\n1\n)\n\n\n    \nprint\n(\n\"Computer picks: \"\n+\nstr\n(\ncomputer_choice\n))\n\n\n    \nuser_choice_index\n \n=\n \noptions\n.\nindex\n(\nuser_choice\n)\n\n    \ncomputer_choice_index\n \n=\n \noptions\n.\nindex\n(\ncomputer_choice\n)\n \n# !!!!!\n\n\n    \nif\n \nuser_choice_index\n \n==\n \ncomputer_choice_index\n:\n\n        \nprint\n \n\"Tie!\"\n\n    \nelif\n \nuser_choice_index\n \n==\n \n0\n \nand\n \ncomputer_choice_index\n \n==\n \n2\n:\n\n        \nprint\n \nWIN\n\n    \nelif\n \nuser_choice_index\n \n==\n \n1\n \nand\n \ncomputer_choice_index\n \n==\n \n0\n:\n\n        \nprint\n \nWIN\n\n    \nelif\n \nuser_choice_index\n \n==\n \n2\n \nand\n \ncomputer_choice_index\n \n==\n \n1\n:\n\n        \nprint\n \nWIN\n\n    \nelif\n \nuser_choice_index\n \n>\n \n2\n:\n\n        \nprint\n \n\"Invalid choice!!!\"\n\n    \nelse\n:\n\n        \nprint\n \nLOSE\n\n\n\ndef\n \nplay_RPS\n():\n\n\n    \nprint\n \n\"Let's pay Rock-Paper-Scissors\"\n\n\n    \nuser_choice\n \n=\n \nraw_input\n(\n\"Select R for Rock, P for Paper, or S for Scissors: \"\n)\n\n\n    \nsleep\n(\n1\n)\n\n\n    \nuser_choice\n \n=\n \nuser_choice\n.\nupper\n()\n\n    \n# computer_choice = options[randint(0,2)] \n\n    \n# pull out an element from a list, the 1st (0) out of 3 (2)\n\n\n    \ncomputer_choice\n \n=\n \noptions\n[\nrandint\n(\n0\n,\nlen\n(\noptions\n)\n-\n1\n)]\n \n    \n# This will ensure that if we ever add more options to the game, we won't have to change this line of code.\n\n\n    \ndecide_winner\n(\nuser_choice\n,\n \ncomputer_choice\n)\n\n\n\nplay_RPS\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nLet's pay Rock-Paper-Scissors\nSelect R for Rock, P for Paper, or S for Scissors: r\nYou picked: R\nComputer selecting...\nComputer picks: S\nYou win!\n\n\n\n\n\n\nUNIT 6, Student Becomes the Teacher\n\u00b6\n\n\nStudent Becomes the Teacher\n\u00b6\n\n\nMake a gradebook for all of your students.\n\n\nFirst, create 3 dictionaries.\n\n\nSecond, add names, marks\u2026\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nlloyd\n \n=\n \n{\n\n    \n\"name\"\n \n:\n \n\"Lloyd\"\n,\n\n    \n\"homework\"\n \n:\n \n[\n90.0\n,\n \n97.0\n,\n \n75.0\n,\n \n92.0\n],\n\n    \n\"quizzes\"\n \n:\n \n[\n88.0\n,\n \n40.0\n,\n \n94.0\n],\n\n    \n\"tests\"\n \n:\n \n[\n75.0\n,\n \n90.0\n]\n\n\n}\n\n\n\nalice\n \n=\n \n{\n\n    \n\"name\"\n:\n \n\"Alice\"\n,\n\n    \n\"homework\"\n \n:\n \n[\n100.0\n,\n \n92.0\n,\n \n98.0\n,\n \n100.0\n],\n\n    \n\"quizzes\"\n \n:\n \n[\n82.0\n,\n \n83.0\n,\n \n91.0\n],\n\n    \n\"tests\"\n \n:\n \n[\n89.0\n,\n \n97.0\n]\n\n\n}\n\n\n\ntyler\n \n=\n \n{\n\n    \n\"name\"\n \n:\n \n\"Tyler\"\n,\n\n    \n\"homework\"\n \n:\n \n[\n0.0\n,\n \n87.0\n,\n \n75.0\n,\n \n22.0\n],\n\n    \n\"quizzes\"\n \n:\n \n[\n0.0\n,\n \n75.0\n,\n \n78.0\n],\n\n    \n\"tests\"\n \n:\n \n[\n100.0\n,\n \n100.0\n]\n\n\n}\n\n\n\n\n\n\n\nThird, make a list.\n\n\n1\n2\n3\n4\n5\n6\n7\nstudents\n=\n \n[\nlloyd\n,\n \nalice\n,\n \ntyler\n]\n\n\n\ncases\n \n=\n \n[\n\"homework\"\n,\n \n\"quizzes\"\n,\n \n\"tests\"\n]\n\n\n\nw_calc\n \n=\n \n[\n0.10\n,\n \n0.30\n,\n \n0.60\n]\n\n\n\nall_average\n \n=\n \n0.0\n\n\n\n\n\n\n\nFour, print out.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nprint\n \n\"\n\\n\nStudents' Grades\"\n.\nupper\n()\n\n\n\nprint\n \n\"\"\n\n\n\nfor\n \nstudent\n \nin\n \nstudents\n:\n\n    \nprint\n \nstudent\n[\n\"name\"\n]\n.\nupper\n()\n\n    \nprint\n \n\"Homework\"\n\n    \nprint\n \nstudent\n[\n\"homework\"\n]\n\n    \nprint\n \n\"Quizzes\"\n\n    \nprint\n \nstudent\n[\n\"quizzes\"\n]\n\n    \nprint\n \n\"Tests\"\n\n    \nprint\n \nstudent\n[\n\"tests\"\n]\n\n    \nprint\n \n\"\"\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nSTUDENTS' GRADES\n\nLLOYD\nHomework\n[90.0, 97.0, 75.0, 92.0]\nQuizzes\n[88.0, 40.0, 94.0]\nTests\n[75.0, 90.0]\n\nALICE\nHomework\n[100.0, 92.0, 98.0, 100.0]\nQuizzes\n[82.0, 83.0, 91.0]\nTests\n[89.0, 97.0]\n\nTYLER\nHomework\n[0.0, 87.0, 75.0, 22.0]\nQuizzes\n[0.0, 75.0, 78.0]\nTests\n[100.0, 100.0]\n\n\n\n\n\n\nCompute averages.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\ndef\n \naverage\n(\nnumbers\n):\n\n\n    \ntotal\n \n=\n \nsum\n(\nnumbers\n)\n\n    \ntemp\n \n=\n \nfloat\n(\ntotal\n)\n \n/\n \nlen\n(\nnumbers\n)\n\n    \nreturn\n \ntemp\n\n\n\nprint\n \n\"Students' Averages\"\n.\nupper\n()\n\n\n\nprint\n \n\"\"\n\n\n\nfor\n \nc\n \nin\n \ncases\n:\n\n    \ncc\n \n=\n \nc\n.\nupper\n()\n\n    \nprint\n \ncc\n\n    \nfor\n \nstudent\n \nin\n \nstudents\n:\n\n        \nnumbers\n \n=\n \nstudent\n[\nc\n]\n\n        \ncalc\n \n=\n \nround\n(\naverage\n(\nnumbers\n),\n1\n)\n\n        \nprint\n \nstudent\n[\n\"name\"\n]\n\n        \nprint\n \ncalc\n\n    \nprint\n \n\"\"\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nSTUDENTS' AVERAGES\n\nHOMEWORK\nLloyd\n88.5\nAlice\n97.5\nTyler\n46.0\n\nQUIZZES\nLloyd\n74.0\nAlice\n85.3\nTyler\n51.0\n\nTESTS\nLloyd\n82.5\nAlice\n93.0\nTyler\n100.0\n\n\n\n\n\n\nCompute weighted averages.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\ndef\n \nw_average\n(\nmarks\n):\n\n\n    \n#w_calc = [0.10, 0.30, 0.60]\n\n    \ns_calc\n \n=\n \n0\n\n    \nw\n \n=\n \n0\n\n    \nwhile\n \nw\n \n<\n \nlen\n(\nw_calc\n):\n\n        \ns_calc\n \n+=\n \nw_calc\n[\nw\n]\n \n*\n \nmarks\n[\nw\n]\n\n        \nw\n \n+=\n \n1\n\n    \nreturn\n \ns_calc\n\n\n\ndef\n \nget_letter_grade\n(\nscore\n):\n\n\n    \nif\n \nscore\n \n>=\n \n90\n:\n\n        \nreturn\n \n\"A\"\n\n    \nelif\n \nscore\n \n>=\n \n80\n:\n\n        \nreturn\n \n\"B\"\n\n    \nelif\n \nscore\n \n>=\n \n70\n:\n\n        \nreturn\n \n\"C\"\n\n    \nelif\n \nscore\n \n>=\n \n60\n:\n\n        \nreturn\n \n\"D\"\n\n    \nelse\n:\n\n        \nreturn\n \n\"F\"\n\n\n\ndef\n \nget_class_average\n(\nind\n):\n\n    \nclass_total\n \n=\n \nround\n(\nind\n \n/\n \nlen\n(\nstudents\n),\n \n1\n)\n\n    \nreturn\n \nclass_total\n\n\n\nprint\n \n\"Students' Weighted Average\"\n.\nupper\n()\n\n\n\nprint\n \n\" Ponderation [Homeworks, Quizzes, Tests]: [\"\n+\nstr\n(\nfloat\n(\nw_calc\n[\n0\n])\n*\n100\n)\n+\n\", \"\n+\nstr\n(\nfloat\n(\nw_calc\n[\n1\n])\n*\n100\n)\n+\n\", \"\n+\nstr\n(\nfloat\n(\nw_calc\n[\n2\n])\n*\n100\n)\n+\n\"]\"\n\n\n\nprint\n \n\"\"\n\n\n\nfor\n \nstudent\n \nin\n \nstudents\n:\n\n    \nprint\n(\nstudent\n[\n\"name\"\n]\n \n+\n \n\"'s marks are:\"\n)\n.\nupper\n()\n\n    \nl_calc\n \n=\n \n[]\n\n    \nfor\n \nc\n \nin\n \ncases\n:\n    \n        \nnumbers\n \n=\n \nstudent\n[\nc\n]\n\n        \ncalc\n \n=\n \nround\n(\naverage\n(\nnumbers\n),\n1\n)\n\n        \nl_calc\n.\nappend\n(\ncalc\n)\n\n    \nprint\n \nl_calc\n\n    \nprint\n(\n\"For a weighted average of:\"\n)\n\n    \nind_average\n \n=\n \nround\n(\nw_average\n(\nl_calc\n),\n1\n)\n\n    \nprint\n \nind_average\n\n    \nprint\n(\n\"Standing for a:\"\n)\n\n    \nprint\n \nget_letter_grade\n(\nind_average\n)\n\n    \nall_average\n \n+=\n \nind_average\n\n    \nprint\n \n\"\"\n\n\n\nprint\n(\n\"Finally, The class average is:\"\n)\n.\nupper\n()\n\n\nprint\n \nget_class_average\n(\nall_average\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nSTUDENTS' WEIGHTED AVERAGE\n Ponderation [Homeworks, Quizzes, Tests]: [10.0, 30.0, 60.0]\n\nLLOYD'S MARKS ARE:\n[88.5, 74.0, 82.5]\nFor a weighted average of:\n80.5\nStanding for a:\nB\n\nALICE'S MARKS ARE:\n[97.5, 85.3, 93.0]\nFor a weighted average of:\n91.1\nStanding for a:\nA\n\nTYLER'S MARKS ARE:\n[46.0, 51.0, 100.0]\nFor a weighted average of:\n79.9\nStanding for a:\nC\n\nFINALLY, THE CLASS AVERAGE IS:\n83.8\n\n\n\n\n\n\nUNIT 7, Lists and Functions\n\u00b6\n\n\nLists and Functions\n\u00b6\n\n\nWhat you can do with a list: extract, add, append, remove, pop out, delete.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nn\n \n=\n \n[\n1\n,\n \n3\n,\n \n5\n]\n\n\nprint\n \nn\n[\n1\n]\n\n\n\nn\n[\n1\n]\n \n=\n \nn\n \n[\n1\n]\n \n*\n \n5\n\n\nprint\n \nn\n\n\n\n# Add elements\n\n\nn\n.\nappend\n(\n4\n)\n\n\nprint\n \nn\n\n\n\n# Remove elements\n\n\nn\n.\npop\n(\n0\n)\n\n\nprint\n \nn\n\n\n\n\n\n\n\n1\n2\n3\n4\n3\n[1, 15, 5]\n[1, 15, 5, 4]\n[15, 5, 4]\n\n\n\n\n\n\nWhat you can do with functions.\n\n\nMultiply, divide.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nnumber\n \n=\n \n5\n\n\n\ndef\n \nmy_function\n(\nx\n):\n\n\n    \nreturn\n \nx\n \n*\n \n3\n\n\n\n# Print my_function(5)\n\n\nprint\n \nmy_function\n(\nnumber\n)\n\n\n\n\n\n\n\n1\n15\n\n\n\n\n\n\nAdd, substract.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nm\n \n=\n \n5\n\n\nn\n \n=\n \n13\n\n\n\ndef\n \nadd_function\n(\nx\n,\ny\n):\n\n\n    \nreturn\n \nx\n \n+\n \ny\n\n\n\nprint\n \nadd_function\n(\nm\n,\n \nn\n)\n\n\n\n\n\n\n\n1\n18\n\n\n\n\n\n\nConcatenate.\n\n\n1\n2\n3\n4\n5\n6\n7\nn\n \n=\n \n\"Hello\"\n\n\n\ndef\n \nstring_function\n(\ns\n):\n\n\n    \nreturn\n \ns\n \n+\n \n\" world\"\n\n\n\nprint\n \nstring_function\n(\nn\n)\n\n\n\n\n\n\n\n1\nHello world\n\n\n\n\n\n\nShow all.\n\n\n1\n2\n3\n4\n5\n6\n7\nn\n \n=\n \n[\n3\n,\n \n5\n,\n \n7\n]\n\n\n\ndef\n \nlist_function\n(\nx\n):\n\n\n    \nreturn\n \nx\n\n\n\nprint\n \nlist_function\n(\nn\n)\n\n\n\n\n\n\n\n1\n[3, 5, 7]\n\n\n\n\n\n\nShow some.\n\n\n1\n2\n3\n4\n5\n6\n7\ndef\n \nlist_function\n(\nx\n):\n\n\n    \nreturn\n \nx\n[\n1\n]\n\n\n\nn\n \n=\n \n[\n3\n,\n \n5\n,\n \n7\n]\n\n\n\nprint\n \nlist_function\n(\nn\n)\n\n\n\n\n\n\n\n1\n5\n\n\n\n\n\n\nExtract and modify.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ndef\n \nlist_function\n(\nx\n):\n\n\n    \nx\n[\n1\n]\n \n=\n \nx\n[\n1\n]\n \n+\n \n3\n\n    \nreturn\n \nx\n\n\n\nn\n \n=\n \n[\n3\n,\n \n5\n,\n \n7\n]\n\n\n\nprint\n \nlist_function\n(\nn\n)\n\n\n\n\n\n\n\n1\n[3, 8, 7]\n\n\n\n\n\n\nAdd elements.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nn\n \n=\n \n[\n3\n,\n \n5\n,\n \n7\n]\n\n\n\ndef\n \nlist_extender\n(\nlst\n):\n\n\n    \nlst\n.\nappend\n(\n9\n)\n\n    \nreturn\n \nlst\n\n\n\nprint\n \nlist_extender\n(\nn\n)\n\n\n\n\n\n\n\n1\n[3, 5, 7, 9]\n\n\n\n\n\n\nRemove elements.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nn\n \n=\n \n[\n3\n,\n \n5\n,\n \n7\n]\n\n\n\ndef\n \nlist_shorter\n(\nlst\n):\n\n\n    \nlst\n.\nremove\n(\n5\n)\n\n    \nreturn\n \nlst\n\n\n\nprint\n \nlist_shorter\n(\nn\n)\n\n\n\n\n\n\n\n1\n[3, 7]\n\n\n\n\n\n\nPop out the 2\nnd\n element.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nn\n \n=\n \n[\n3\n,\n \n5\n,\n \n7\n]\n\n\n\ndef\n \nlist_extract\n(\nlst\n):\n\n\n    \nlst\n.\npop\n(\n1\n)\n\n    \nreturn\n \nlst\n\n\n\nprint\n \nlist_extract\n(\nn\n)\n\n\n\n\n\n\n\n1\n[3, 7]\n\n\n\n\n\n\nLoop through each element.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nn\n \n=\n \n[\n3\n,\n \n5\n,\n \n7\n]\n\n\n\ndef\n \nprint_list\n(\nx\n):\n\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nlen\n(\nx\n)):\n\n        \nprint\n \nx\n[\ni\n]\n\n\n\nprint\n \nprint_list\n(\nn\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n3\n5\n7\nNone\n\n\n\n\n\n\nLoop, transform each element.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nn\n \n=\n \n[\n3\n,\n \n5\n,\n \n7\n]\n\n\n\ndef\n \ndouble_list\n(\nx\n):\n\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nlen\n(\nx\n)):\n\n        \nx\n[\ni\n]\n \n=\n \nx\n[\ni\n]\n \n*\n \n2\n\n    \nreturn\n \nx\n\n\n\nprint\n \ndouble_list\n(\nn\n)\n\n\n\n\n\n\n\n1\n[6, 10, 14]\n\n\n\n\n\n\nLoop, transform each element.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ndef\n \nmy_function\n(\nx\n):\n\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nlen\n(\nx\n)):\n\n        \nx\n[\ni\n]\n \n=\n \nx\n[\ni\n]\n \n*\n \n2\n\n    \nreturn\n \nx\n\n\n\nprint\n \nmy_function\n(\nrange\n(\n3\n))\n\n\n\nprint\n \nrange\n(\n6\n)\n \n# => [0,1,2,3,4,5]\n\n\nprint\n \nrange\n(\n1\n,\n6\n)\n \n# => [1,2,3,4,5]\n\n\nprint\n \nrange\n(\n1\n,\n6\n,\n3\n)\n \n# => [1,4]\n\n\n\n\n\n\n\n1\n2\n3\n4\n[0, 2, 4]\n\n\n[0, 1, 2, 3, 4, 5]\n\n\n[1, 2, 3, 4, 5]\n\n\n[1, 4]\n\n\n\n\n\n\n\nLoop, fill the variable with \n+=\n (or \n-=\n, \n*=\n, \n/=\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nn\n \n=\n \n[\n3\n,\n \n5\n,\n \n7\n]\n\n\n\ndef\n \ntotal\n(\nnumbers\n):\n\n\n    \nresult\n \n=\n \n0\n \n# empty variable\n\n    \nfor\n \nitem\n \nin\n \nnumbers\n:\n\n        \nresult\n \n+=\n \nitem\n\n    \nreturn\n \nresult\n\n\n\n\n\n\n\nEmpty variable, loop, fill the variable.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nn\n \n=\n \n[\n\"Michael\"\n,\n \n\"Lieberman\"\n]\n\n\n\ndef\n \njoin_strings\n(\nwords\n):\n\n\n    \nresult\n \n=\n \n\"\"\n\n    \nfor\n \nitem\n \nin\n \nwords\n:\n\n        \nresult\n \n=\n \nresult\n \n+\n \nitem\n\n    \nreturn\n \nresult\n\n\n\nprint\n \njoin_strings\n(\nn\n)\n\n\n\n\n\n\n\n1\nMichaelLieberman\n\n\n\n\n\n\nJoin (not add up) the list. You want this to \nprint [1, 2, 3, 4, 5, 6]\n.\n\n\n1\n2\n3\n4\n5\n6\n7\nm\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\nn\n \n=\n \n[\n4\n,\n \n5\n,\n \n6\n]\n\n\n\ndef\n \njoin_lists\n(\nx\n,\ny\n):\n\n    \nreturn\n \nx\n \n+\n \ny\n\n\n\nprint\n \njoin_lists\n(\nm\n,\n \nn\n)\n\n\n\n\n\n\n\n1\n[1, 2, 3, 4, 5, 6]\n\n\n\n\n\n\nList of lists. Several loops.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nn\n \n=\n \n[\n\n    \n[\n1\n,\n \n2\n,\n \n3\n],\n\n    \n[\n4\n,\n \n5\n,\n \n6\n,\n \n7\n,\n \n8\n,\n \n9\n]\n\n\n]\n\n\n\ndef\n \nflatten\n(\nlists\n):\n\n\n    \nresults\n \n=\n \n[]\n\n    \nfor\n \nlst\n \nin\n \nlists\n:\n\n        \nfor\n \nnum\n \nin\n \nrange\n(\nlen\n(\nlst\n)):\n\n            \nresults\n.\nappend\n(\nlst\n[\nnum\n])\n\n    \nreturn\n \nresults\n\n\n\nprint\n \nflatten\n(\nn\n)\n\n\n\n\n\n\n\n1\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\n\nUse \nrange(len(lst))\n.\n\n\nrange, length\n\n\n1\nprint\n \nrange\n(\n6\n)\n \n# => [0,1,2,3,4,5]\n\n\n\n\n\n\n\n1\n[0, 1, 2, 3, 4, 5]\n\n\n\n\n\n\nBattleship!\n\u00b6\n\n\nThis first script is incomplete (work in progress).\n\nThe next script is functional.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\n\nboard\n \n=\n \n[]\n\n\n\nfor\n \nx\n \nin\n \nrange\n(\n5\n):\n  \n# 0, 1, 2, 3, 4 (stop before 5)\n\n    \nboard\n.\nappend\n([\n\"O\"\n]\n \n*\n \n5\n)\n \n# print 5 rows of 5 'O'\n\n\n\ndef\n \nprint_board\n(\nboard\n):\n\n\n    \nfor\n \nrow\n \nin\n \nboard\n:\n\n        \n# print row # print ['O', 'O', 'O', 'O', 'O'] on 5 rows\n\n        \nprint\n \n\" \"\n.\njoin\n(\nrow\n)\n \n# print O O O O O \n\n\n\nprint\n \n\"Let's play Battleship!\"\n\n\n\ndef\n \nrandom_row\n(\nboard\n):\n \n# hide the ship at r-c\n\n\n    \nreturn\n \nrandint\n(\n0\n,\nlen\n(\nboard\n)\n \n-\n \n1\n)\n\n\n\ndef\n \nrandom_col\n(\nboard\n):\n\n\n    \nreturn\n \nrandint\n(\n0\n,\nlen\n(\nboard\n)\n \n-\n \n1\n)\n\n\n\nprint\n \nrandom_row\n(\nboard\n)\n\n\nprint\n \nrandom_col\n(\nboard\n)\n\n\n\nguess_row\n \n=\n \nint\n(\nraw_input\n(\n\"Guess Row (1 to 5):\"\n))\n \n# involve the player\n\n\nguess_col\n \n=\n \nint\n(\nraw_input\n(\n\"Guess Col (1 to 5):\"\n))\n\n\n\nprint\n \nship_col\n \n# print ship position\n\n\nprint\n \nship_row\n\n\n\nif\n \n(\nguess_row\n \n==\n \nship_row\n)\n \nand\n \n(\nguess_col\n \n==\n \nship_col\n):\n\n    \nprint\n \n\"Congratulations! You sank my battleship!\"\n\n    \nguess_row\n=\nguess_row\n-\n1\n\n    \nguess_col\n=\nguess_col\n-\n1\n\n    \nboard\n[\nguess_row\n][\nguess_col\n]\n=\n\"S\"\n\n    \nprint\n \nprint_board\n(\nboard\n)\n\n\nelse\n:\n\n    \n#print \"You missed my battleship!\"\n\n    \nif\n \nguess_row\n \nnot\n \nin\n \nrange\n(\n5\n)\n \nor\n \nguess_row\n \n==\n \n0\n \nor\n \nguess_col\n \nnot\n \nin\n \nrange\n(\n5\n)\n \nor\n \nguess_col\n \n==\n \n0\n:\n \n# condition for wrong entries\n\n        \nprint\n \n\"Oops, that's not even in the ocean.\"\n\n    \nelif\n \nboard\n[\nguess_row\n][\nguess_col\n]\n \n==\n \n\"X\"\n:\n\n        \nprint\n \n\"You guessed that one already.\"\n\n    \nelse\n:\n\n        \nprint\n \n\"You missed my battleship!\"\n\n\n\nguess_row\n \n=\n \nguess_row\n \n-\n \n1\n \n# transform the numbers, 1 becomes 0...\n\n\nguess_col\n \n=\n \nguess_col\n \n-\n \n1\n\n\n\nboard\n[\nguess_row\n][\nguess_col\n]\n \n=\n \n\"X\"\n \n# replace the 'O'\n\n\nprint\n \nprint_board\n(\nboard\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nLet's play Battleship!\n4\n0\nGuess Row (1 to 5):1\nGuess Col (1 to 5):2\n\n\n\n---------------------------------------------------------------------------\n\nNameError                                 Traceback (most recent call last)\n\n<ipython-input-87-efd1e0de637a> in <module>()\n     24 guess_col = int(raw_input(\"Guess Col (1 to 5):\"))\n     25 \n---> 26 print ship_col # print ship position\n     27 print ship_row\n     28\n\n\nNameError: name 'ship_col' is not defined\n\n\n\n\n\n\nBattleship FINAL!\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\n\nboard\n \n=\n \n[]\n\n\n\nfor\n \nx\n \nin\n \nrange\n(\n5\n):\n\n    \nboard\n.\nappend\n([\n\"O\"\n]\n \n*\n \n5\n)\n\n\n\ndef\n \nprint_board\n(\nboard\n):\n\n\n    \nfor\n \nrow\n \nin\n \nboard\n:\n\n        \nprint\n \n\" \"\n.\njoin\n(\nrow\n)\n\n\n\nprint\n \n\"\n\\n\nLet's play Battleship! You have 4 strikes to sink by ship.\n\\n\n\"\n\n\nprint_board\n(\nboard\n)\n\n\n\ndef\n \nrandom_row\n(\nboard\n):\n\n\n    \nreturn\n \nrandint\n(\n0\n,\n \nlen\n(\nboard\n)\n \n-\n \n1\n)\n\n\n\ndef\n \nrandom_col\n(\nboard\n):\n\n\n    \nreturn\n \nrandint\n(\n0\n,\n \nlen\n(\nboard\n)\n \n-\n \n1\n)\n\n\n\nship_row\n \n=\n \nrandom_row\n(\nboard\n)\n\n\nship_col\n \n=\n \nrandom_col\n(\nboard\n)\n\n\n#ship_row = 1 to test and fix to (1,1)\n\n\n#ship_col = 1\n\n\n\nfor\n \nturn\n \nin\n \nrange\n(\n5\n):\n\n    \nturn\n \n+=\n \n1\n\n    \nif\n \nturn\n \n==\n \n5\n:\n\n        \nprint\n \n\"\n\\n\nGame Over\"\n\n        \nprint\n \n\"The ship was here => I\n\\n\n\"\n\n        \nboard\n[\nship_row\n \n-\n \n1\n][\nship_col\n \n-\n \n1\n]\n \n=\n \n\"I\"\n\n        \nprint_board\n(\nboard\n)\n\n        \nbreak\n\n    \nelse\n:\n\n        \nprint\n \n\"\n\\n\nTurn\"\n,\n \nturn\n\n\n        \nguess_row\n \n=\n \nint\n(\nraw_input\n(\n\"Guess Row (1 to 5): \"\n))\n\n        \nguess_col\n \n=\n \nint\n(\nraw_input\n(\n\"Guess Col (1 to 5): \"\n))\n\n\n        \nif\n \n(\nguess_row\n \n==\n \nship_row\n)\n \nand\n \n(\nguess_col\n \n==\n \nship_col\n):\n\n            \nprint\n \n\"\n\\n\nCongratulations! You sank my battleship!\n\\n\n\"\n\n\n            \nguess_row\n \n=\n \nguess_row\n \n-\n \n1\n\n            \nguess_col\n \n=\n \nguess_col\n \n-\n \n1\n\n            \nboard\n[\nguess_row\n][\nguess_col\n]\n \n=\n \n\"S\"\n\n\n            \nprint_board\n(\nboard\n)\n\n            \nprint\n \n\"\n\\n\nGame Over\"\n\n            \nbreak\n\n\n        \nelif\n \n(\nguess_row\n \n<\n \n1\n \nor\n \nguess_row\n \n>\n \n5\n)\n \nor\n \n(\nguess_col\n \n<\n \n1\n \nor\n \nguess_col\n \n>\n \n5\n):\n\n            \nprint\n \n\"\n\\n\nOops, that's not even in the ocean.\n\\n\n\"\n\n\n        \nelif\n \nboard\n[\nguess_row\n \n-\n \n1\n][\nguess_col\n \n-\n \n1\n]\n \n==\n \n\"X\"\n:\n\n            \nprint\n \n\"\n\\n\nYou guessed that one already.\n\\n\n\"\n\n            \nprint_board\n(\nboard\n)\n\n\n        \nelse\n:\n\n            \nprint\n \n\"\n\\n\nYou missed my battleship!\n\\n\n\"\n\n            \nboard\n[\nguess_row\n \n-\n \n1\n][\nguess_col\n \n-\n \n1\n]\n \n=\n \n\"X\"\n\n            \nprint_board\n(\nboard\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\nLet's play Battleship! You have 4 strikes to sink by ship.\n\nO O O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 1\nGuess Row (1 to 5): 1\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 2\nGuess Row (1 to 5): 2\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 3\nGuess Row (1 to 5): 3\nGuess Col (1 to 5): 5\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O O O O\nO O O O O\n\nTurn 4\nGuess Row (1 to 5): 4\nGuess Col (1 to 5): 3\n\nCongratulations! You sank my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O S O O\nO O O O O\n\nGame Over\n\n\n\n\n\n\nJoining.\n\n\njoin, split\n\n\n1\n2\n3\n4\nletters\n \n=\n \n[\n'a'\n,\n \n'b'\n,\n \n'c'\n,\n \n'd'\n]\n\n\n\nprint\n \n\" \"\n.\njoin\n(\nletters\n)\n \n# a b c d\n\n\nprint\n \n\"---\"\n.\njoin\n(\nletters\n)\n \n# #---b---c---d\n\n\n\n\n\n\n\n1\n2\na b c d\na---b---c---d\n\n\n\n\n\n\nRandomizing.\n\n\nrandom, rand\n\n\n1\n2\n3\n4\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\n\ncoin\n \n=\n \nrandint\n(\n0\n,\n \n1\n)\n \n# randint(low, high)\n\n\ndice\n \n=\n \nrandint\n(\n1\n,\n \n6\n)\n\n\n\n\n\n\n\nQuiz 7\n\u00b6\n\n\nTakeaway.\n\n\n1\n2\n3\n4\n5\n6\n7\nmy_list\n \n=\n \n[\n1\n,\n \n3\n,\n \n5\n,\n \n7\n]\n\n\n\nmy_list\n.\npop\n(\n3\n)\n \n# remove the 4th\n\n\nmy_list\n.\nremove\n(\n3\n)\n \n# remove the '3'\n\n\n\nrange\n(\n0\n,\n \nlen\n(\nmy_list\n))\n \n# every list item\n\n\nrange\n(\n0\n,\n \nlen\n(\nmy_list\n),\n \n2\n)\n \n# every other list item\n\n\n\n\n\n\n\n1\n[0]\n\n\n\n\n\n\nUNIT 8, Loops\n\u00b6\n\n\nLoops\n\u00b6\n\n\nA \nwhile\n loop is a sort of \nif\n.\n\n\n1\n2\n3\n4\ncount\n \n=\n \n0\n\n\n\nif\n \ncount\n \n<=\n \n9\n:\n \n# \n\n    \nprint\n \n\"Hello, I am an if statement and count is\"\n,\n \ncount\n\n\n\n\n\n\n\n1\nHello, I am an if statement and count is 0\n\n\n\n\n\n\n1\n2\n3\nwhile\n \ncount\n \n<=\n \n9\n:\n \n# similar to if: executes as long as the condition is true\n\n    \nprint\n \n\"Hello, I am a while and count is\"\n,\n \ncount\n\n    \ncount\n \n+=\n \n1\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nHello, I am a while and count is 0\nHello, I am a while and count is 1\nHello, I am a while and count is 2\nHello, I am a while and count is 3\nHello, I am a while and count is 4\nHello, I am a while and count is 5\nHello, I am a while and count is 6\nHello, I am a while and count is 7\nHello, I am a while and count is 8\nHello, I am a while and count is 9\n\n\n\n\n\n\nA \nwhile\n loop allows control (checkpoint, a switch, on and off).\n\n\n1\n2\n3\n4\n5\nloop_condition\n \n=\n \nTrue\n\n\n\nwhile\n \nloop_condition\n:\n \n# On\n\n    \nprint\n \n\"I am a loop\"\n\n    \nloop_condition\n \n=\n \nFalse\n \n# Off\n\n\n\n\n\n\n\n1\nI am a loop\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nnum\n \n=\n \n1\n\n\n\nwhile\n \nnum\n \n<=\n \n10\n:\n \n# the condition\n\n    \nprint\n \nnum\n \n**\n \n2\n\n    \nnum\n \n+=\n \nnum\n \n**\n \n(\n1\n/\n2\n)\n\n    \nprint\n \nnum\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n1\n2\n4\n3\n9\n4\n16\n5\n25\n6\n36\n7\n49\n8\n64\n9\n81\n10\n100\n11\n\n\n\n\n\n\nA common application of a \nwhile\n loop is to check user input to see if it is valid.\n\n\n1\n2\n3\n4\nchoice\n \n=\n \nraw_input\n(\n'Enjoying the course? (y/n)'\n)\n\n\n\nwhile\n \nchoice\n \n!=\n \n\"y\"\n \nand\n \nchoice\n \n!=\n \n\"n\"\n:\n\n    \nchoice\n \n=\n \nraw_input\n(\n\"Sorry, I didn't catch that. Enter again (case sensitive): \"\n)\n\n\n\n\n\n\n\n1\nEnjoying the course? (y/n)y\n\n\n\n\n\n\nbreak\n means \u201cexit the current loop\u201d. Opposite to \nbreak\n is \ncontinue\n.\n\n\n1\n2\n3\n4\n5\n6\n7\ncount\n \n=\n \n0\n\n\n\nwhile\n \nTrue\n:\n\n    \nprint\n \ncount\n\n    \ncount\n \n+=\n \n1\n\n    \nif\n \ncount\n \n>=\n \n10\n:\n\n        \nbreak\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\n\n\nwhile\n/\nelse\n are like \nif\n/\nelse\n; \nelse\n is executed when \nwhile\n is false.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nimport\n \nrandom\n\n\n\nprint\n \n\"Lucky Numbers! 3 numbers will be generated.\"\n\n\nprint\n \n\"If one of them is a '5', you lose!\"\n\n\n\ncount\n \n=\n \n0\n\n\n\nwhile\n \ncount\n \n<\n \n3\n:\n\n    \nnum\n \n=\n \nrandom\n.\nrandint\n(\n1\n,\n \n6\n)\n\n    \nprint\n \nnum\n\n    \nif\n \nnum\n \n==\n \n5\n:\n\n        \nprint\n \n\"Sorry, you lose!\"\n\n        \nbreak\n\n    \ncount\n \n+=\n \n1\n\n\nelse\n:\n\n    \nprint\n \n\"You win!\"\n\n\n\n\n\n\n\n1\n2\n3\n4\nLucky Numbers! 3 numbers will be generated.\nIf one of them is a '5', you lose!\n5\nSorry, you lose!\n\n\n\n\n\n\nGuess game.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\n\n# Generates a number from 1 through 10 inclusive\n\n\nrandom_number\n \n=\n \nrandint\n(\n1\n,\n \n10\n)\n\n\n\n# print random_number\n\n\nguesses_left\n \n=\n \n3\n\n\nprint\n \n\"Guess right!\"\n\n\n\nwhile\n \nguesses_left\n \n>\n \n0\n:\n\n    \nprint\n \n\"You have \"\n+\nstr\n(\nguesses_left\n)\n+\n\" attempts.\"\n\n    \nguess\n \n=\n \nraw_input\n(\n\"Guess a number from 1 to 10: \"\n)\n\n    \nif\n \nint\n(\nguess\n)\n \n==\n \nrandom_number\n:\n\n        \nprint\n \n\"You win!\"\n\n        \nbreak\n\n    \nelif\n \nguesses_left\n \n==\n \n1\n:\n\n        \nprint\n \n\"You lose.\"\n\n        \nbreak\n\n    \nelse\n:\n\n        \nguesses_left\n \n-=\n \n1\n\n        \nprint\n \n\"Try again.\"\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nGuess right!\nYou have 3 attempts.\nGuess a number from 1 to 10: 2\nTry again.\nYou have 2 attempts.\nGuess a number from 1 to 10: 6\nTry again.\nYou have 1 attempts.\nGuess a number from 1 to 10: 9\nYou lose.\n\n\n\n\n\n\nif\n loop.\n\n\n1\n2\n3\n4\nprint\n \n\"Counting...\"\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n20\n):\n\n    \nprint\n \ni\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nCounting...\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n\n\n\nCreate a list.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nhobbies\n \n=\n \n[]\n\n\n\nprint\n \nhobbies\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n3\n):\n\n    \nhobby\n \n=\n \nraw_input\n(\n\"Enter a hobby: \"\n)\n\n    \nhobbies\n.\nappend\n(\nhobby\n)\n\n\n\nprint\n \nhobbies\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n[]\nEnter a hobby: fishing\nEnter a hobby: skiing\nEnter a hobby: knitting!!!\n['fishing', 'skiing', 'knitting!!!']\n\n\n\n\n\n\nRun though a string, but each character will be spaced out.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nthing\n \n=\n \n\"spam!\"\n\n\n\nfor\n \nc\n \nin\n \nthing\n:\n\n    \nprint\n \nc\n\n\n\nword\n \n=\n \n\"eggs!\"\n\n\n\nfor\n \nchar\n \nin\n \nword\n:\n\n    \nprint\n \nchar\n,\n \n# , print on the same line\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\ns\np\na\nm\n!\ne g g s !\n\n\n\n\n\n\nReplace a character in a string. \n,\n print on the same line.\n\n\n1\n2\n3\n4\n5\n6\n7\nphrase\n \n=\n \n\"A bird in the hand...\"\n\n\n\nfor\n \nchar\n \nin\n \nphrase\n:\n\n    \nif\n \nchar\n \n==\n \n\"A\"\n \nor\n \nchar\n \n==\n \n\"a\"\n:\n\n        \nprint\n \n\"X\"\n,\n\n    \nelse\n:\n\n        \nprint\n \nchar\n,\n\n\n\n\n\n\n\n1\nX   b i r d   i n   t h e   h X n d . . .\n\n\n\n\n\n\nRun though a list.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nnumbers\n  \n=\n \n[\n7\n,\n \n9\n,\n \n12\n,\n \n54\n,\n \n99\n]\n\n\n\nprint\n \n\"This list contains: \"\n\n\n\nfor\n \nnum\n \nin\n \nnumbers\n:\n\n    \nprint\n \nnum\n\n\n\nfor\n \nnumm\n \nin\n \nnumbers\n:\n\n    \nprint\n \nnumm\n \n**\n \n2\n,\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nThis list contains: \n7\n9\n12\n54\n99\n49 81 144 2916 9801\n\n\n\n\n\n\nRun though a dictionary.\n\n\n1\n2\n3\n4\n5\n6\n7\nd\n \n=\n \n{\n'a'\n \n:\n \n'apple'\n,\n \n'b'\n \n:\n \n'berry'\n,\n \n'c'\n \n:\n \n'cherry'\n}\n\n\n\nfor\n \nkey\n \nin\n \nd\n:\n\n    \n# key:value\n\n    \nprint\n \nkey\n+\n\" \"\n+\nd\n[\nkey\n]\n\n    \nprint\n \nkey\n \n# key\n\n    \nprint\n \nd\n[\nkey\n]\n \n# value\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\na apple\na\napple\nc cherry\nc\ncherry\nb berry\nb\nberry\n\n\n\n\n\n\nEnumerate a list (numbers and members).\n\n\n1\n2\n3\n4\n5\nchoices\n \n=\n \n[\n'pizza'\n,\n \n'pasta'\n,\n \n'salad'\n,\n \n'nachos'\n]\n\n\n\nprint\n \n'Your choices are:'\n\n\nfor\n \nindex\n,\n \nitem\n \nin\n \nenumerate\n(\nchoices\n):\n\n    \nprint\n \nindex\n \n+\n \n1\n,\n \nitem\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nYour choices are:\n1 pizza\n2 pasta\n3 salad\n4 nachos\n\n\n\n\n\n\nMultiple lists.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nlist_a\n \n=\n \n[\n3\n,\n \n9\n,\n \n17\n,\n \n15\n,\n \n19\n]\n\n\nlist_b\n \n=\n \n[\n2\n,\n \n4\n,\n \n8\n,\n \n10\n,\n \n30\n,\n \n40\n,\n \n50\n,\n \n60\n,\n \n70\n,\n \n80\n,\n \n90\n]\n\n\n\nfor\n \na\n,\n \nb\n \nin\n \nzip\n(\nlist_a\n,\n \nlist_b\n):\n\n    \nif\n \na\n \n>\n \nb\n:\n \n        \nprint\n \na\n\n    \nelif\n \na\n \n==\n \nb\n:\n\n        \nprint\n \n\"-\"\n\n    \nelse\n:\n\n        \nprint\n \nb\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n3\n9\n17\n15\n30\n\n\n\n\n\n\nList with concatenation.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nfruits\n \n=\n \n[\n'banana'\n,\n \n'apple'\n,\n \n'orange'\n,\n \n'tomata'\n,\n \n'pear'\n,\n \n'grape'\n]\n\n\n\nprint\n \n'You have...'\n\n\n\nfor\n \nf\n \nin\n \nfruits\n:\n\n    \nif\n \nf\n \n==\n \n'tomato'\n:\n\n        \nprint\n \n'A tomato is not a fruit!'\n \n# (It actually is.)\n\n        \nbreak\n\n    \nprint\n \n', a'\n,\n \nf\n,\n\n\nelse\n:\n\n    \nprint\n \n'; A fine selection of fruits!'\n\n\n\n\n\n\n\n1\n2\nYou have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!\n\n\n\n\n\n\nRemove the \nbreak\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nfruits\n \n=\n \n[\n'banana'\n,\n \n'apple'\n,\n \n'orange'\n,\n \n'tomata'\n,\n \n'pear'\n,\n \n'grape'\n]\n\n\n\nprint\n \n'You have...'\n\n\n\nfor\n \nf\n \nin\n \nfruits\n:\n\n    \nif\n \nf\n \n==\n \n'tomato'\n:\n\n        \nprint\n \n'A tomato is not a fruit!'\n \n# (It actually is.)\n\n    \nelse\n:\n    \n        \nprint\n \n', a'\n,\n \nf\n,\n\n\nelse\n:\n\n    \nprint\n \n'; A fine selection of fruits!'\n\n\n\n\n\n\n\n1\n2\nYou have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!\n\n\n\n\n\n\nPractice Makes Perfect\n\u00b6\n\n\nIs it even?\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ndef\n \nis_even\n(\nx\n):\n\n\n    \nif\n \nx\n \n%\n \n2\n \n==\n \n0\n:\n\n        \nreturn\n \nTrue\n \n# if x is even\n\n    \nelse\n:\n\n        \nreturn\n \nFalse\n\n\n\nprint\n \nis_even\n(\n2\n)\n\n\nprint\n \nis_even\n(\n3\n)\n\n\n\n\n\n\n\n1\n2\nTrue\nFalse\n\n\n\n\n\n\nOr not?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nn\n \n=\n \n-\n1.0\n\n\n\nprint\n(\nn\n \n-\n \nround\n(\nn\n,\n0\n))\n\n\n\ndef\n \nis_int\n(\nx\n):\n\n\n    \nif\n \n(\nx\n \n-\n \nround\n(\nx\n,\n0\n))\n \n==\n \n0\n:\n\n        \nreturn\n \nTrue\n\n    \nelse\n:\n\n        \nreturn\n \nFalse\n\n\n\nprint\n \nis_int\n(\n7.0\n)\n\n\nprint\n \nis_int\n(\n7.5\n)\n\n\nprint\n \nis_int\n(\n-\n1\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n0.0\nTrue\nFalse\nTrue\n\n\n\n\n\n\nSumming the digits of a number.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\ndef\n \ndigit_sum\n(\nn\n):\n\n\n    \nliss\n \n=\n \n[]\n\n    \nn\n \n=\n \nstr\n(\nn\n)\n \n# from integers to characters\n\n    \nfor\n \nchar\n \nin\n \nn\n:\n\n        \nliss\n.\nappend\n(\nchar\n)\n \n# populate liss\n\n        \ntotal\n \n=\n \n0\n\n        \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nliss\n)):\n\n            \nliss\n[\ni\n]\n \n=\n \nint\n(\nliss\n[\ni\n])\n \n# back to integers\n\n            \ntotal\n \n+=\n \nliss\n[\ni\n]\n \n# sum them up\n\n    \nreturn\n \ntotal\n\n\n\nprint\n \ndigit_sum\n(\n1234\n)\n\n\nprint\n \ndigit_sum\n(\n8888\n)\n\n\n\n\n\n\n\n1\n2\n10\n32\n\n\n\n\n\n\nWhat is the factorial?\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\ndef\n \nfactorial\n(\nx\n):\n\n\n    \nif\n \nx\n \n==\n \n1\n \nor\n \nx\n \n==\n \n0\n:\n\n        \nreturn\n \n1\n\n    \nelse\n:\n\n        \nresult\n \n=\n \n1\n\n        \nwhile\n \nx\n \n>\n \n0\n:\n\n            \n# say x = 4\n\n            \n# 1 * 4 = 4\n\n            \n# 4 * 3 = 12\n\n            \n# 12 * 2 = 24\n\n            \n# 24 * 1 = 24\n\n            \nresult\n \n*=\n \nx\n\n            \nx\n \n-=\n \n1\n\n\n    \nreturn\n \nresult\n \n\n\nprint\n \nfactorial\n(\n1\n)\n\n\nprint\n \nfactorial\n(\n2\n)\n\n\nprint\n \nfactorial\n(\n3\n)\n\n\nprint\n \nfactorial\n(\n4\n)\n\n\nprint\n \nfactorial\n(\n5\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n1\n2\n6\n24\n120\n\n\n\n\n\n\nIs it a prime number? (Check the web for the list of prime numbers.)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\ndef\n \nis_prime\n(\nx\n):\n\n\n    \nif\n \n(\nx\n \n>\n \n1\n):\n \n# to catch greater than 1\n\n        \nfor\n \nn\n \nin\n \nrange\n(\n2\n,(\nx\n \n-\n \n1\n)):\n \n# range 2 - 1 less than x\n\n            \nif\n \nx\n \n%\n \nn\n \n==\n \n0\n:\n\n                \nprint\n \nx\n\n                \nreturn\n \nFalse\n\n    \nelse\n:\n \n# ro catch 0 and 1\n\n        \nprint\n \nx\n\n        \nreturn\n \nFalse\n\n    \nprint\n \nx\n \n# the input\n\n    \nreturn\n \nTrue\n \n# the output, will be printed when the function will be called\n\n\n\nfor\n \nii\n \nin\n \nrange\n(\n24\n):\n\n    \nprint\n \nis_prime\n(\nii\n),\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n0\nFalse 1\nFalse 2\nTrue 3\nTrue 4\nFalse 5\nTrue 6\nFalse 7\nTrue 8\nFalse 9\nFalse 10\nFalse 11\nTrue 12\nFalse 13\nTrue 14\nFalse 15\nFalse 16\nFalse 17\nTrue 18\nFalse 19\nTrue 20\nFalse 21\nFalse 22\nFalse 23\nTrue\n\n\n\n\n\n\nReverse a string.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\ndef\n \nreverse\n(\ntext\n):\n\n\n    \ncount\n \n=\n \nlen\n(\ntext\n)\n \n-\n \n1\n \n# start at the end\n\n\n    \nprint\n \ntext\n\n    \nprint\n \ncount\n \n# 3 letters will be 0,1,2,3 or 3\n\n\n    \nreversed_text\n \n=\n \n\"\"\n \n# empty string\n\n\n    \nprint\n \nreversed_text\n\n\n    \nwhile\n \ncount\n \n>=\n \n0\n:\n\n        \nreversed_text\n \n+=\n \ntext\n[\ncount\n]\n \n# adding the right-most letter\n\n        \ncount\n \n-=\n \n1\n \n# decrement count\n\n    \nreturn\n \nreversed_text\n\n\n\nprint\n \nreverse\n(\n\"make\"\n)\n\n\nprint\n \nreverse\n(\n\"codeacademy\"\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nmake\n3\n\nekam\ncodeacademy\n10\n\nymedacaedoc\n\n\n\n\n\n\nRemove vowels in apunctuation word (could work for punctuation too).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ndef\n \nanti_vowel\n(\ntext\n):\n\n\n    \nvowels\n \n=\n \n\"aAeEiIoOuU\"\n\n    \nfor\n \nchar\n \nin\n \ntext\n:\n\n        \nfor\n \nvow\n \nin\n \nvowels\n:\n\n            \nif\n \nvow\n \n==\n \nchar\n:\n\n                \ntext\n \n=\n \ntext\n.\nreplace\n(\nchar\n,\n\"\"\n)\n\n    \nreturn\n \ntext\n\n\n\nprint\n \nanti_vowel\n(\n\"allo\"\n)\n\n\n\n\n\n\n\n1\nll\n\n\n\n\n\n\nRemove all but punctuation.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\ndef\n \nanti_vowel\n(\ntext\n):\n\n\n    \ntext\n \n=\n \ntext\n.\nlower\n()\n\n    \nvowels\n \n=\n \n\"abcdefghijklmnopqrstuvwxyz1234567890$-\"\n\n\n    \nfor\n \nchar\n \nin\n \ntext\n:\n\n        \nfor\n \nvow\n \nin\n \nvowels\n:\n\n            \nif\n \nvow\n \n==\n \nchar\n:\n\n                \ntext\n \n=\n \ntext\n.\nreplace\n(\nchar\n,\n\"\"\n)\n\n    \nfor\n \nchar\n \nin\n \ntext\n:\n\n        \nif\n \nchar\n \n==\n \n\" \"\n:\n\n            \ntext\n \n=\n \ntext\n.\nreplace\n(\nchar\n,\n\"\"\n)\n\n    \nreturn\n \ntext\n\n\n\nprint\n \nanti_vowel\n(\n\"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \n\\\"\nID\n\\\"\n associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\"\n)\n\n\n\n\n\n\n\n1\n.?,,.,.......\"\"...\n\n\n\n\n\n\nScrabble scoring.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nscore\n \n=\n \n{\n\"a\"\n:\n \n1\n,\n \n\"c\"\n:\n \n3\n,\n \n\"b\"\n:\n \n3\n,\n \n\"e\"\n:\n \n1\n,\n \n\"d\"\n:\n \n2\n,\n \n\"g\"\n:\n \n2\n,\n \n         \n\"f\"\n:\n \n4\n,\n \n\"i\"\n:\n \n1\n,\n \n\"h\"\n:\n \n4\n,\n \n\"k\"\n:\n \n5\n,\n \n\"j\"\n:\n \n8\n,\n \n\"m\"\n:\n \n3\n,\n \n         \n\"l\"\n:\n \n1\n,\n \n\"o\"\n:\n \n1\n,\n \n\"n\"\n:\n \n1\n,\n \n\"q\"\n:\n \n10\n,\n \n\"p\"\n:\n \n3\n,\n \n\"s\"\n:\n \n1\n,\n \n         \n\"r\"\n:\n \n1\n,\n \n\"u\"\n:\n \n1\n,\n \n\"t\"\n:\n \n1\n,\n \n\"w\"\n:\n \n4\n,\n \n\"v\"\n:\n \n4\n,\n \n\"y\"\n:\n \n4\n,\n \n         \n\"x\"\n:\n \n8\n,\n \n\"z\"\n:\n \n10\n}\n\n\n\ndef\n \nscrabble_score\n(\nword\n):\n\n\n    \nword2\n \n=\n \nword\n.\nlower\n()\n\n\n    \nprint\n \nword2\n+\n\":\"\n,\n\n    \npoints\n \n=\n \n0\n\n    \nfor\n \nletter\n \nin\n \nword2\n:\n\n        \nif\n \nletter\n \n==\n \nstr\n(\nletter\n):\n\n            \npoints\n \n+=\n \nscore\n[\nletter\n]\n\n    \nreturn\n \npoints\n\n\n\nprint\n \nscrabble_score\n(\n\"ab\"\n)\n\n\nprint\n \nscrabble_score\n(\n\"allo\"\n)\n\n\nprint\n \nscrabble_score\n(\n\"xylophone\"\n)\n\n\nprint\n \nscrabble_score\n(\n\"coding\"\n)\n\n\nprint\n \nscrabble_score\n(\n\"yak\"\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nab\n:\n \n4\n\n\nallo\n:\n \n4\n\n\nxylophone\n:\n \n24\n\n\ncoding\n:\n \n10\n\n\nyak\n:\n \n10\n\n\n\n\n\n\n\nCensor a word in a string.\n\n\nlength\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ndef\n \ncensor\n(\ntext\n,\nword_to_censor\n):\n\n\n    \ntext\n \n=\n \ntext\n.\nsplit\n(\n' '\n)\n\n    \nfor\n \nword\n \nin\n \nrange\n(\n0\n,\nlen\n(\ntext\n)):\n\n        \nif\n \ntext\n[\nword\n]\n \n==\n \nword_to_censor\n:\n\n            \ntext\n[\nword\n]\n \n=\n \n\"*\"\n \n*\n \nlen\n(\ntext\n[\nword\n])\n \n*\n \n2\n\n    \nreturn\n \n\" \"\n.\njoin\n(\ntext\n)\n \n# join the w separated by spaces\n\n\n\nprint\n \ncensor\n(\n\"it is two days\"\n,\n \n\"two\"\n)\n\n\n\n\n\n\n\n1\nit is ****** days\n\n\n\n\n\n\nCount items is a list.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\ndef\n \ncount\n(\nsequence\n,\n \nitem\n):\n\n\n    \nsequence\n \n=\n \nlist\n(\nsequence\n)\n\n    \ncount\n \n=\n \n0\n\n\n    \nfor\n \ni\n \nin\n \nsequence\n:\n\n        \nif\n \ni\n \n==\n \nitem\n:\n\n            \ncount\n \n+=\n \n1\n\n    \nreturn\n \ncount\n\n\n\nlist2\n \n=\n \n[\n1\n,\n3\n,\n1\n,\n5\n]\n\n\nlist3\n \n=\n \n[\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"a\"\n]\n\n\nlist4\n \n=\n \n(\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"a\"\n)\n\n\nlist5\n \n=\n \n(\n1\n,\n2\n,\n3\n,\n1\n,\n1\n)\n\n\n\nprint\n \ncount\n(\nlist2\n,\n1\n)\n\n\nprint\n \ncount\n(\nlist3\n,\n1\n)\n\n\nprint\n \ncount\n(\nlist4\n,\n1\n)\n\n\nprint\n \ncount\n(\nlist5\n,\n1\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n2\n0\n0\n3\n\n\n\n\n\n\nExtract even numbers from a list.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\ndef\n \npurify\n(\nlisting\n):\n\n\n    \nlisting\n \n=\n \nlist\n(\nlisting\n)\n\n    \nlisting2\n \n=\n \n[]\n\n\n    \nfor\n \nl\n \nin\n \nlisting\n:\n\n        \nif\n \nl\n \n%\n \n2\n \n==\n \n0\n:\n\n            \nlisting2\n.\nappend\n(\nl\n)\n\n    \nreturn\n \nlisting2\n\n\n\ncase1\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n]\n\n\n\nprint\n \npurify\n(\ncase1\n)\n\n\n\n\n\n\n\n1\n[2, 4]\n\n\n\n\n\n\nCompute a product.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\ndef\n \nproduct\n(\nlisting\n):\n\n\n    \nprint\n \nlisting\n\n    \nresult\n \n=\n \n1\n\n    \nfor\n \nl\n \nin\n \nlisting\n:\n\n        \nresult\n \n=\n \nresult\n \n*\n \nl\n\n    \nreturn\n \nresult\n\n\n\ncase1\n \n=\n \n[\n1\n,\n2\n,\n3\n]\n\n\ncase2\n \n=\n \n(\n5\n,\n10\n,\n15\n)\n\n\n\nprint\n \nproduct\n(\ncase1\n)\n\n\nprint\n \nproduct\n(\ncase2\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n[1, 2, 3]\n\n\n6\n\n\n(5, 10, 15)\n\n\n750\n\n\n\n\n\n\n\nRemove duplicates from a list.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\ndef\n \nremove_duplicates\n(\nlisting\n):\n\n\n    \nprint\n \nlisting\n\n\n    \nlisting\n \n=\n \nlist\n(\nlisting\n)\n\n    \nlisting2\n \n=\n \n[]\n\n\n    \nfor\n \nl\n \nin\n \nlisting\n:\n\n        \nif\n \nl\n \nnot\n \nin\n \nlisting2\n:\n\n            \nlisting2\n.\nappend\n(\nl\n)\n\n    \nreturn\n \nlisting2\n\n\n\ncase1\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n3\n,\n4\n]\n\n\ncase2\n \n=\n \n(\n1\n,\n6\n,\n1\n,\n4\n,\n2\n,\n8\n,\n2\n,\n1\n,\n6\n,\n7\n,\n4\n,\n6\n)\n\n\n\nprint\n \nremove_duplicates\n(\ncase1\n)\n\n\nprint\n \nremove_duplicates\n(\ncase2\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n[1, 2, 3, 3, 4]\n\n\n[1, 2, 3, 4]\n\n\n(1, 6, 1, 4, 2, 8, 2, 1, 6, 7, 4, 6)\n\n\n[1, 6, 4, 2, 8, 7]\n\n\n\n\n\n\n\nExtract the median from an unordered list of numbers.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\ndef\n \nmedian\n(\nlisting\n):\n\n\n    \nmedian_no\n \n=\n \n0\n\n    \nmedian_low\n \n=\n \n0\n\n    \nmedian_high\n \n=\n \n0\n\n    \nlow\n \n=\n \n0\n\n    \nhigh\n \n=\n \n0\n\n\n    \nprint\n \nlisting\n\n\n    \nlisting\n \n=\n \nsorted\n(\nlisting\n)\n\n\n    \nif\n \nlen\n(\nlisting\n)\n \n%\n \n2\n \n==\n \n0\n:\n\n        \nlow\n \n=\n \nlen\n(\nlisting\n)\n/\n2\n \n-\n \n1\n \n# 6/2 = 3 -1 = 2 or the 3rd\n\n        \nhigh\n \n=\n \nlen\n(\nlisting\n)\n/\n2\n \n# 6/2 = 3 or the 4th\n\n        \nmedian_low\n \n=\n \nfloat\n(\nlisting\n[\nlow\n])\n \n# extract the 3rd of 6\n\n        \nmedian_high\n \n=\n \nfloat\n(\nlisting\n[\nhigh\n])\n \n# the 4th of 6\n\n        \nmedian_no\n \n=\n \n(\nmedian_low\n \n+\n \nmedian_high\n)\n/\n2\n\n    \nelse\n:\n\n        \nmedian_no\n \n=\n \nlisting\n[(\nlen\n(\nlisting\n))\n/\n2\n]\n \n# on 5, the / will yield 2.5, but coerced to the integer 2 or the 3rd\n\n    \nreturn\n \nmedian_no\n\n\n\ncase1\n \n=\n \n(\n7\n,\n12\n,\n3\n,\n1\n,\n6\n)\n\n\ncase2\n \n=\n \n(\n7\n,\n12\n,\n3\n,\n1\n,\n6\n,\n17\n)\n\n\n\nprint\n \nmedian\n(\ncase1\n)\n\n\nprint\n \nmedian\n(\ncase2\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n(7, 12, 3, 1, 6)\n6\n(7, 12, 3, 1, 6, 17)\n6.5\n\n\n\n\n\n\nQuiz 8\n\u00b6\n\n\nTakeaway: built-in functions.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nx\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\ny\n \n=\n \n[\n4\n,\n \n5\n,\n \n6\n]\n\n\n\nzipped\n \n=\n \nzip\n(\nx\n,\n \ny\n)\n\n\n# zipped = [(1, 4), (2, 5), (3, 6)]\n\n\n\nx2\n,\n \ny2\n \n=\n \nzip\n(\n*\nzipped\n)\n\n\n\nx\n \n==\n \nlist\n(\nx2\n)\n \nand\n \ny\n \n==\n \nlist\n(\ny2\n)\n\n\n# True\n\n\n\n\n\n\n\n1\nTrue\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nseasons\n \n=\n \n[\n'Spring'\n,\n \n'Summer'\n,\n \n'Fall'\n,\n \n'Winter'\n]\n\n\n\nlist\n(\nenumerate\n(\nseasons\n))\n\n\n# [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n\n\n\nlist\n(\nenumerate\n(\nseasons\n,\n \nstart\n=\n1\n))\n\n\n# [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n\n\n\n\n\n\n\n1\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n\n\n\n\n\n\nProject Command Line Calendar\n\u00b6\n\n\nIn this project, we\u2019ll build a basic calendar that the user will be able to interact with from the command line. The user should be able to choose to:\n\n\n\n\nView the calendar\n\n\nAdd an event to the calendar\n\n\nUpdate an existing event\n\n\nDelete an existing event\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\nfrom\n \ntime\n \nimport\n \nsleep\n,\n \nstrftime\n\n\n\nhis_name\n \n=\n \nraw_input\n(\n\"What is your first name? \"\n)\n\n\nhis_name\n \n=\n \nstr\n(\nhis_name\n)\n\n\n# calendar will store the dates as keys and the events as values\n\n\n\ncalendar\n \n=\n \n{}\n\n\n\ndef\n \nwelcome\n():\n\n\n    \nprint\n(\n\"Welcome \"\n \n+\n \nhis_name\n \n+\n\".\"\n)\n\n\n    \nprint\n(\n\"Calendar starting...\"\n)\n\n    \nsleep\n(\n0.5\n)\n\n    \nprint\n(\n\"Today is: \"\n \n+\n \nstrftime\n(\n\"%A, %B \n%d\n, %Y\"\n))\n\n    \nprint\n(\n\"It is currently: \"\n \n+\n \nstrftime\n(\n\"%H:%M:%S\"\n))\n\n    \nsleep\n(\n0.5\n)\n\n\n\ndef\n \nstart_calendar\n():\n\n\n    \nwelcome\n()\n\n    \nprint\n(\n\"What would you like to do?\"\n)\n\n    \nprint\n(\ncalendar\n)\n\n    \nstart\n \n=\n \nTrue\n\n\n    \nwhile\n \nstart\n:\n\n        \nuser_choice\n \n=\n \nraw_input\n(\n\"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \"\n)\n.\nupper\n()\n\n\n        \nif\n \nuser_choice\n \n==\n \n'V'\n:\n \n# V\n\n            \nif\n \nlen\n(\ncalendar\n.\nkeys\n())\n \n<\n \n1\n:\n\n                \nprint\n(\n\"The calendar is empty\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ncalendar\n)\n\n\n        \nelif\n \nuser_choice\n \n==\n \n'U'\n:\n \n# U\n\n            \nif\n \nlen\n(\ncalendar\n.\nkeys\n())\n \n<\n \n1\n:\n\n                \nprint\n(\n\"The calendar is empty\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ncalendar\n)\n\n                \ndate\n \n=\n \nraw_input\n(\n\"What date? \"\n)\n\n                \nupdate\n \n=\n \nraw_input\n(\n\"Enter the update: \"\n)\n\n                \n# could be more control here...\n\n                \ncalendar\n[\ndate\n]\n \n=\n \nupdate\n \n# without checking if the date is valid or if it already exists (which could override things)!\n\n                \nprint\n(\n\"Successful!\"\n)\n\n                \nprint\n(\ncalendar\n)\n\n\n        \nelif\n \nuser_choice\n \n==\n \n'A'\n:\n \n# A\n\n            \nevent\n \n=\n \nraw_input\n(\n\"Enter event: \"\n)\n\n            \ndate\n \n=\n \nraw_input\n(\n\"Enter date (MM/DD/YYYY): \"\n)\n\n            \nif\n \n(\nlen\n(\ndate\n)\n \n>\n \n10\n \nor\n \nint\n(\ndate\n[\n6\n:])\n \n<\n \nint\n(\nstrftime\n(\n\"%Y\"\n))):\n \n# could be more control...\n\n                \nprint\n(\n\"Invalid date format.\"\n)\n\n                \ntry_again\n \n=\n \nraw_input\n(\n\"Try Again? 'Y' for Yes, 'N' for No: \"\n)\n.\nupper\n()\n\n                \nif\n \ntry_again\n \n==\n \n'Y'\n:\n\n                    \ncontinue\n \n#! break, continue, start is still True\n\n                \nelse\n:\n\n                    \nstart\n \n==\n \nFalse\n\n            \nelse\n:\n\n                \ncalendar\n[\ndate\n]\n \n=\n \nevent\n \n# without checking if the date is valid or if it already exists (which could override things)!\n\n                \nprint\n(\n\"Successful!\"\n)\n\n                \nprint\n(\ncalendar\n)\n\n\n        \nelif\n \nuser_choice\n \n==\n \n'D'\n:\n \n# D\n\n            \nif\n \nlen\n(\ncalendar\n.\nkeys\n())\n \n<\n \n1\n:\n\n                \nprint\n(\n\"The calendar is empty.\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ncalendar\n)\n\n                \nevent\n \n=\n \nraw_input\n(\n\"What event? \"\n)\n \n# could be more option like: What date?\n\n                \nfor\n \ndate\n \nin\n \ncalendar\n.\nkeys\n():\n\n                    \nif\n \nevent\n \n==\n \ncalendar\n[\ndate\n]:\n\n                        \ndel\n \ncalendar\n[\ndate\n]\n \n# del a[], [1], [\"a\"], [1:3], [5:], [:9], etc.\n\n                        \nprint\n(\n\"Deleted.\"\n)\n\n                        \nprint\n(\ncalendar\n)\n\n                    \nelse\n:\n\n                        \nprint\n(\n\"Incorrect.\"\n)\n\n\n        \nelif\n \nuser_choice\n \n==\n \n'X'\n:\n \n# X\n\n            \nstart\n \n=\n \nFalse\n\n\n        \nelse\n:\n\n            \nprint\n(\n\"Invalid command.\"\n)\n\n            \nbreak\n\n\n\nstart_calendar\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\nWhat is your first name? Al\nWelcome Al.\nCalendar starting...\nToday is: Thursday, October 20, 2016\nIt is currently: 13:42:02\nWhat would you like to do?\n{}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? a\nEnter event: Buy stuff\nEnter date (MM/DD/YYYY): 10/21/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Sell stuff\nEnter date (MM/DD/YYYY): 11/01/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Rent stuff\nEnter date (MM/DD/YYYY): 01/01/2018\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? u\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nWhat date? 01/01/2018\nEnter the update: Lease stuff\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? Buy stuff\nDeleted.\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? 10/21/2016\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? x\n\n\n\n\n\n\nUNIT 9, Exam Statistics\n\u00b6\n\n\nExam Statistics\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\ngrades\n \n=\n \n[\n100\n,\n \n100\n,\n \n90\n,\n \n40\n,\n \n80\n,\n \n100\n,\n \n85\n,\n \n70\n,\n \n90\n,\n \n65\n,\n \n90\n,\n \n85\n,\n \n50.5\n]\n\n\n\nprint\n \n\"Grades:\"\n,\n \ngrades\n\n\n\ndef\n \nprint_grades\n(\ngrades\n):\n \n# list the grades\n\n\n    \nfor\n \ni\n \nin\n \ngrades\n:\n\n        \nprint\n \ni\n,\n \n# , keep the list on the same line\n\n\n\nprint_grades\n(\ngrades\n)\n\n\n\nprint\n \n\"Let's compute some stats!\"\n\n\n\ndef\n \ngrades_sum\n(\nscores\n):\n \n# sum up the grades\n\n\n    \ntotal\n \n=\n \n0\n\n    \nfor\n \ns\n \nin\n \nscores\n:\n\n        \ntotal\n \n+=\n \ns\n\n    \nreturn\n \ntotal\n\n\n\nprint\n \ngrades_sum\n(\ngrades\n)\n\n\n\ndef\n \ngrades_average\n(\ngrades\n):\n \n# average the grades\n\n\n    \nsum_of_grades\n \n=\n \ngrades_sum\n(\ngrades\n)\n\n    \naverage\n \n=\n \nsum_of_grades\n \n/\n \nfloat\n(\nlen\n(\ngrades\n))\n\n    \nreturn\n \naverage\n\n\n\nprint\n \ngrades_average\n(\ngrades\n)\n\n\n\nprint\n \n\"Time to conquer the variance!\"\n\n\n\ndef\n \ngrades_variance\n(\nscores\n):\n \n# compute the variance\n\n\n    \naverage\n \n=\n \ngrades_average\n(\nscores\n)\n\n    \ntotalvariance\n \n=\n \n0\n\n    \nfor\n \nscore\n \nin\n \nscores\n:\n\n        \ntotalvariance\n \n+=\n \n(\nscore\n \n-\n \naverage\n)\n \n**\n \n2\n\n    \ntvariance\n \n=\n \ntotalvariance\n/\nfloat\n(\nlen\n(\nscores\n))\n\n    \nreturn\n \ntvariance\n\n\n\nvariance\n \n=\n \ngrades_variance\n(\ngrades\n)\n\n\nprint\n \nvariance\n\n\n\ndef\n \ngrades_std_deviation\n(\nvariance\n):\n \n# compute standard deviation\n\n\n    \nstddevisation\n \n=\n \nvariance\n \n**\n \n0.5\n\n    \nreturn\n \nstddevisation\n\n\n\nprint\n \ngrades_std_deviation\n(\nvariance\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nGrades: [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]\n100 100 90 40 80 100 85 70 90 65 90 85 50.5 Let's compute some stats!\n1045.5\n80.4230769231\nTime to conquer the variance!\n334.071005917\n18.2776094147\n\n\n\n\n\n\nUNIT 10, Advanced Topics in Python\n\u00b6\n\n\nAdvanced Topics in Python\n\u00b6\n\n\nIterate through a dictionary.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nmy_dict\n \n=\n \n{\n\n    \n\"CodeCademy\"\n \n:\n \n\"Python\"\n,\n\n    \n\"DataCamp\"\n \n:\n \n\"R\"\n,\n\n    \n\"Code School\"\n \n:\n \n\"SQL\"\n\n\n}\n\n\n\nprint\n \nmy_dict\n.\nitems\n()\n\n\nprint\n \nmy_dict\n.\nkeys\n()\n\n\nprint\n \nmy_dict\n.\nvalues\n()\n\n\n\nfor\n \nkey\n \nin\n \nmy_dict\n:\n\n    \nprint\n \nkey\n,\n \nmy_dict\n[\nkey\n]\n \n# key and value\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n[('CodeCademy', 'Python'), ('Code School', 'SQL'), ('DataCamp', 'R')]\n\n\n['CodeCademy', 'Code School', 'DataCamp']\n\n\n['Python', 'SQL', 'R']\n\n\nCodeCademy Python\n\n\nCode School SQL\n\n\nDataCamp R\n\n\n\n\n\n\n\nBuild a list.\n\n\n1\n2\n3\nevens_to_50\n \n=\n \n[\ni\n \nfor\n \ni\n \nin\n \nrange\n(\n51\n)\n \nif\n \ni\n \n%\n \n2\n \n==\n \n0\n]\n\n\n\nprint\n \nevens_to_50\n\n\n\n\n\n\n\n1\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]\n\n\n\n\n\n\nBuild lists with conditions.\n\n\n1\n2\n3\ndoubles_by_3\n \n=\n \n[\nx\n \n*\n \n2\n \nfor\n \nx\n \nin\n \nrange\n(\n1\n,\n6\n)\n \nif\n \n(\nx\n \n*\n \n2\n)\n \n%\n \n3\n \n==\n \n0\n]\n\n\n\nprint\n \ndoubles_by_3\n\n\n\n\n\n\n\n1\n[6]\n\n\n\n\n\n\n1\n2\n3\neven_squares\n \n=\n \n[\nx\n \n**\n \n2\n \nfor\n \nx\n \nin\n \nrange\n(\n2\n,\n11\n)\n \nif\n \n(\nx\n \n**\n \n2\n)\n \n%\n \n2\n \n==\n \n0\n]\n\n\n\nprint\n \neven_squares\n\n\n\n\n\n\n\n1\n[4, 16, 36, 64, 100]\n\n\n\n\n\n\n1\n2\n3\ncubes_by_four\n \n=\n \n[\nx\n \n**\n \n3\n \nfor\n \nx\n \nin\n \nrange\n(\n1\n,\n11\n)\n \nif\n \nx\n \n**\n \n3\n \n%\n \n4\n \n==\n \n0\n]\n\n\n\nprint\n \ncubes_by_four\n\n\n\n\n\n\n\n1\n[8, 64, 216, 512, 1000]\n\n\n\n\n\n\nLists slicing.\n\n\nextract, list\n\n\n1\n2\n3\nl\n \n=\n \n[\ni\n \n**\n \n2\n \nfor\n \ni\n \nin\n \nrange\n(\n1\n,\n \n11\n)]\n \n# Should be [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\n\nprint\n \nl\n[\n2\n:\n9\n:\n2\n]\n \n# [start:end:stride]\n\n\n\n\n\n\n\n1\n[9, 25, 49, 81]\n\n\n\n\n\n\n1\n2\n3\nmy_list\n \n=\n \nrange\n(\n1\n,\n \n11\n)\n \n# list of numbers 1 - 10\n\n\n\nprint\n \nmy_list\n[::\n2\n]\n\n\n\n\n\n\n\n1\n[1, 3, 5, 7, 9]\n\n\n\n\n\n\n1\n2\n3\n4\n5\nmy_list\n \n=\n \nrange\n(\n1\n,\n \n11\n)\n\n\n\nbackwards\n \n=\n \nmy_list\n[::\n-\n1\n]\n\n\n\nprint\n \nbackwards\n\n\n\n\n\n\n\n1\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n\n\n\n\n\n1\n2\n3\n4\n5\nto_one_hundred\n \n=\n \nrange\n(\n101\n)\n\n\n\nbackwards_by_tens\n \n=\n \nto_one_hundred\n[::\n-\n10\n]\n\n\n\nprint\n \nbackwards_by_tens\n\n\n\n\n\n\n\n1\n[100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0]\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nto_21\n \n=\n \nrange\n(\n1\n,\n \n22\n)\n\n\n\nprint\n \nto_21\n\n\n\nodds\n \n=\n \nrange\n(\n1\n,\n \n22\n,\n \n2\n)\n\n\n\nprint\n \nodds\n\n\n\nmiddle_third\n \n=\n \nto_21\n[\n7\n:\n14\n:\n1\n]\n\n\n\nprint\n \nmiddle_third\n\n\n\n\n\n\n\n1\n2\n3\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n\n\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n\n\n[8, 9, 10, 11, 12, 13, 14]\n\n\n\n\n\n\n\nLambda function.\n\n\n1\n2\n3\nmy_list\n \n=\n \nrange\n(\n16\n)\n\n\n\nprint\n \nfilter\n(\nlambda\n \nx\n:\n \nx\n \n%\n \n3\n \n==\n \n0\n,\n \nmy_list\n)\n\n\n\n\n\n\n\n1\n[0, 3, 6, 9, 12, 15]\n\n\n\n\n\n\n1\n2\n3\nlanguages\n \n=\n \n[\n\"HTML\"\n,\n \n\"JavaScript\"\n,\n \n\"Python\"\n,\n \n\"Ruby\"\n]\n\n\n\nprint\n \nfilter\n(\nlambda\n \nx\n:\n \nx\n \n==\n \n\"Python\"\n,\nlanguages\n)\n\n\n\n\n\n\n\n1\n['Python']\n\n\n\n\n\n\n1\n2\n3\nsquares\n \n=\n \n[\nx\n**\n2\n \nfor\n \nx\n \nin\n \nrange\n(\n1\n,\n11\n)]\n\n\n\nprint\n \nfilter\n(\nlambda\n \nx\n:\n \n(\nx\n \n>=\n \n30\n \nand\n \nx\n \n<=\n \n70\n),\n \nsquares\n)\n\n\n\n\n\n\n\n1\n[36, 49, 64]\n\n\n\n\n\n\nIterating over dictionaries.\n\n\n1\n2\n3\n4\n5\n6\n7\nmovies\n \n=\n \n{\n\n    \n\"Monty Python and the Holy Grail\"\n:\n \n\"Great\"\n,\n\n    \n\"Monty Python's Life of Brian\"\n:\n \n\"Good\"\n,\n\n    \n\"Monty Python's Meaning of Life\"\n:\n \n\"Okay\"\n\n\n}\n\n\n\nprint\n \nmovies\n.\nitems\n()\n\n\n\n\n\n\n\n1\n[(\"Monty Python's Life of Brian\", 'Good'), (\"Monty Python's Meaning of Life\", 'Okay'), ('Monty Python and the Holy Grail', 'Great')]\n\n\n\n\n\n\nComprehensions.\n\n\n1\n2\n3\nthrees_and_fives\n \n=\n \n[\nx\n \nfor\n \nx\n \nin\n \nrange\n(\n1\n,\n16\n)\n \nif\n \n(\nx\n \n%\n \n3\n \n==\n \n0\n \nor\n \nx\n \n%\n \n5\n \n==\n \n0\n)]\n\n\n\nprint\n \nthrees_and_fives\n\n\n\n\n\n\n\n1\n[3, 5, 6, 9, 10, 12, 15]\n\n\n\n\n\n\nSlicing again.\n\n\nextract\n\n\n1\n2\n3\n4\n5\ngarbled\n \n=\n \n\"!XeXgXaXsXsXeXmX XtXeXrXcXeXsX XeXhXtX XmXaX XI\"\n\n\n\nmessage\n \n=\n \ngarbled\n[::\n-\n2\n]\n\n\n\nprint\n \nmessage\n\n\n\n\n\n\n\n1\nI am the secret message!\n\n\n\n\n\n\n1\n2\n3\n4\n5\ngarbled\n \n=\n \n\"IXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX\"\n\n\n\nmessage\n \n=\n \nfilter\n(\nlambda\n \nx\n:\n \nx\n \n!=\n \n\"X\"\n,\n \ngarbled\n)\n\n\n\nprint\n \nmessage\n\n\n\n\n\n\n\n1\nI am another secret message!\n\n\n\n\n\n\nIntroduction to Bitwise Operators\n\u00b6\n\n\nOperators.\n\n\n1\n2\n3\n4\n5\n6\nprint\n \n5\n \n>>\n \n4\n  \n# Right Shift\n\n\nprint\n \n5\n \n<<\n \n1\n  \n# Left Shift\n\n\nprint\n \n8\n \n&\n \n5\n   \n# Bitwise AND\n\n\nprint\n \n9\n \n|\n \n4\n   \n# Bitwise OR\n\n\nprint\n \n12\n \n^\n \n42\n \n# Bitwise XOR\n\n\nprint\n \n</\nsub\n>\n88\n     \n# Bitwise NOT\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n0\n10\n0\n13\n38\n-89\n\n\n\n\n\n\nBase 2 or binary.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nprint\n \n0b1\n,\n    \n# 1\n\n\nprint\n \n0b10\n,\n   \n# 2\n\n\nprint\n \n0b11\n,\n   \n# 3\n\n\nprint\n \n0b100\n,\n  \n# 4\n\n\nprint\n \n0b101\n,\n  \n# 5\n\n\nprint\n \n0b110\n,\n  \n# 6\n\n\nprint\n \n0b111\n   \n# 7\n\n\nprint\n \n\"******\"\n\n\nprint\n \n0b1\n \n+\n \n0b11\n \n# 1 + 3 = 4\n\n\nprint\n \n0b11\n \n*\n \n0b11\n \n# 3 * 3 = 90\n\n\n\n\n\n\n\n1\n2\n3\n4\n1 2 3 4 5 6 7\n******\n4\n9\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\none\n \n=\n \n0b1\n\n\ntwo\n \n=\n \n0b10\n\n\nthree\n \n=\n \n0b11\n\n\nfour\n \n=\n \n0b100\n\n\nfive\n \n=\n \n0b101\n\n\nsix\n \n=\n \n0b110\n\n\nseven\n \n=\n \n0b111\n\n\neight\n \n=\n \n0b1000\n\n\nnine\n \n=\n \n0b1001\n\n\nten\n \n=\n \n0b1010\n\n\neleven\n \n=\n \n0b1011\n\n\ntwelve\n \n=\n \n0b1100\n\n\n\n\n\n\n\nDecimal to binary.\n\n\n1\n2\n3\n4\n5\nprint\n \nbin\n(\n1\n)\n\n\nprint\n \nbin\n(\n2\n)\n\n\nprint\n \nbin\n(\n3\n)\n\n\nprint\n \nbin\n(\n4\n)\n\n\nprint\n \nbin\n(\n5\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n0b1\n0b10\n0b11\n0b100\n0b101\n\n\n\n\n\n\nBinary to decimal.\n\n\n1\n2\n3\n4\n5\nprint\n \nint\n(\n\"1\"\n,\n2\n)\n\n\nprint\n \nint\n(\n\"10\"\n,\n2\n)\n\n\nprint\n \nint\n(\n\"111\"\n,\n2\n)\n\n\nprint\n \nint\n(\n\"0b100\"\n,\n2\n)\n\n\nprint\n \nint\n(\nbin\n(\n5\n),\n2\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n1\n2\n7\n4\n5\n\n\n\n\n\n\nPrint out the decimal equivalent of the binary 11001001.\n\n\n1\nprint\n \nint\n(\n\"11001001\"\n,\n2\n)\n\n\n\n\n\n\n\n1\n201\n\n\n\n\n\n\nLeft Bit Shift (\n<<\n)\n\n\n1\n2\n0b000001 << 2 == 0b000100 (1 << 2 = 4)\n0b000101 << 3 == 0b101000 (5 << 3 = 40)       \n\n\n\n\n\n\nRight Bit Shift (\n>>\n)\n\n\n1\n2\n0b0010100 >> 3 == 0b000010 (20 >> 3 = 2)\n0b0000010 >> 2 == 0b000000 (2 >> 2 = 0)\n\n\n\n\n\n\nThis operation is mathematically equivalent to floor dividing and multiplying by 2 (respectively) for every time you shift, but it\u2019s often easier just to think of it as shifting all the 1s and 0s left or right by the specified number of slots.\n\n\n1\n2\n3\n4\n5\n6\n7\nshift_right\n \n=\n \n0b1100\n\n\nshift_left\n \n=\n \n0b1\n\n\n\nshift_right\n \n=\n \n0b1100\n \n>>\n \n2\n\n\nshift_left\n \n=\n \n0b1\n \n<<\n \n2\n\n\nprint\n \nbin\n(\nshift_right\n)\n\n\nprint\n \nbin\n(\nshift_left\n)\n\n\n\n\n\n\n\n1\n2\n0b11\n0b100\n\n\n\n\n\n\nThe bitwise AND (\n&\n) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if the corresponding bits of both numbers are 1. For example:\n\n\n1\n2\n3\n4\n    a:   00101010   42\n    b:   00001111   15       \n===================\na & b:   00001010   10\n\n\n\n\n\n\nAs you can see, the 2\u2019s bit and the 8\u2019s bit are the only bits that are on in both \na\n and \nb\n, so \na & b\n only contains those bits. Note that using the & operator can only result in a number that is less than or equal to the smaller of the two values.\n\n\n\n\n0 & 0 = 0\n\n\n0 & 1 = 0\n\n\n1 & 0 = 0\n\n\n1 & 1 = 1\n\n\n\n\nFor example: \n0b111 (7) & 0b1010 (10) = 0b10\n.\n\n\n1\n2\n3\nprint\n \nbin\n(\n0b1110\n&\n0b101\n)\n\n\n\nprint\n \nbin\n(\n0b100\n)\n\n\n\n\n\n\n\n1\n2\n0b100\n0b100\n\n\n\n\n\n\nThe bitwise OR (\n|\n) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of either number are 1. For example:\n\n\n1\n2\n3\n4\n    a:  00101010  42\n    b:  00001111  15       \n================\na | b:  00101111  47\n\n\n\n\n\n\nNote that the bitwise \n|\n operator can only create results that are greater than or equal to the larger of the two integer inputs.\n\n\n\n\n0 | 0 = 0\n\n\n0 | 1 = 1 \n\n\n1 | 0 = 1\n\n\n1 | 1 = 1\n\n\n\n\nFor example: \n110 (6) | 1010 (10) = 1110 (14)\n.\n\n\n1\nprint\n \nbin\n(\n0b1110\n|\n0b101\n)\n\n\n\n\n\n\n\n1\n0b1111\n\n\n\n\n\n\nThe XOR (\n^\n) or exclusive or operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of the two numbers are 1, but not both.\n\n\n1\n2\n3\n4\n    a:  00101010   42\n    b:  00001111   15       \n================\na ^ b:  00100101   37\n\n\n\n\n\n\nKeep in mind that if a bit is off in both numbers, it stays off in the result. Note that \nXOR\n-ing a number with itself will always result in 0.\n\n\n\n\n0 ^ 0 = 0\n\n\n0 ^ 1 = 1\n\n\n1 ^ 0 = 1\n\n\n1 ^ 1 = 0\n\n\n\n\nFor example: \n111 (7) ^ 1010 (10) = 1101 (13)\n.\n\n\n1\nprint\n \nbin\n(\n0b1110\n^\n0b101\n)\n\n\n\n\n\n\n\n1\n0b1011\n\n\n\n\n\n\nThe bitwise NOT operator (\n</sub>\n) just flips all of the bits in a single number. What this actually means to the computer is actually very complicated, so we\u2019re not going to get into it. Just know that mathematically, this is equivalent to adding one to the number and then making it negative. \n\n\n1\n2\n3\n4\n5\nprint\n \n</\nsub\n>\n1\n\n\nprint\n \n</\nsub\n>\n2\n\n\nprint\n \n</\nsub\n>\n3\n\n\nprint\n \n</\nsub\n>\n42\n\n\nprint\n \n</\nsub\n>\n123\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n-2\n-3\n-4\n-43\n-124\n\n\n\n\n\n\nA bit mask is just a variable that aids you with bitwise operations. A bit mask can help you turn specific bits on, turn others off, or just collect data from an integer about which bits are on or off.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ndef\n \ncheck_bit4\n(\ninput\n):\n\n\n    \nmask\n \n=\n \n0b1000\n\n    \ndesired\n \n=\n \ninput\n \n&\n \nmask\n\n    \nif\n \ndesired\n \n>\n \n0\n:\n\n        \nreturn\n \n\"on\"\n\n    \nelse\n:\n\n        \nreturn\n \n\"off\"\n\n\n\nprint\n \ncheck_bit4\n(\n0b1100\n)\n\n\n\n\n\n\n\n1\non\n\n\n\n\n\n\n1\n2\n3\n4\n0b1000\n0b1100\n======\n0b1000\n\n\n\n\n\n\nYou can also use masks to turn a bit in a number on using \n|\n. Use a bitmask and the value a in order to achieve a result where the third bit from the right of a is turned on. Be sure to print your answer as a \nbin()\n string!\n\n\n1\n2\n3\n4\na\n \n=\n \n0b10111011\n\n\nmask\n \n=\n \n0b100\n\n\ndesired\n \n=\n \na\n \n|\n \nmask\n\n\nprint\n \nbin\n(\ndesired\n)\n\n\n\n\n\n\n\n1\n0b10111111\n\n\n\n\n\n\n1\n2\n3\n4\n0b10111011\n0b00000100\n==========\n0b10111111\n\n\n\n\n\n\nUsing the XOR (\n^\n) operator is very useful for flipping bits. Using \n^\n on a bit with the number one will return a result where that bit is flipped. In the editor is the 8 bit variable a. Use a bitmask and the value a in order to achieve a result where all of the bits in a are flipped. Be sure to print your answer as a \nbin()\n string!\n\n\n1\n2\n3\n4\na\n \n=\n \n0b11101110\n\n\nmask\n \n=\n \n0b11111111\n\n\ndesired\n \n=\n \na\n \n^\n \nmask\n\n\nprint\n \nbin\n(\ndesired\n)\n\n\n\n\n\n\n\n1\n0b10001\n\n\n\n\n\n\n1\n2\n3\n4\n0b11101110\n0b11111111\n==========\n0b00010001\n\n\n\n\n\n\nFinally, you can also use the left shift (\n<<\n) and right shift (\n>>\n) operators to slide masks into place.\n\n\n1\n2\n3\n4\n5\n6\n7\ndef\n \nflip_bit\n(\nnumber\n,\n \nn\n):\n\n\n    \nmask\n \n=\n \n(\n0b1\n \n<<\n \n(\nn\n-\n1\n))\n\n    \nresult\n \n=\n \nnumber\n \n^\n \nmask\n\n    \nreturn\n \nbin\n(\nresult\n)\n\n\n\nprint\n \nflip_bit\n(\n0b111\n,\n \n2\n)\n\n\n\n\n\n\n\n1\n0b101\n\n\n\n\n\n\nProject RGB-HEX Converter\n\u00b6\n\n\nIn this project, we\u2019ll use Bitwise operators to build a calculator that can convert RGB values to Hexadecimal (\nhex\n) values, and vice-versa.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\ndef\n \nrgb_hex\n():\n\n\n    \ninvalid_msg\n \n=\n \n\"Invalid entry\"\n\n    \nred\n \n=\n \nint\n(\nraw_input\n(\n\"Enter a 'red' (R) value, from 0 to 255: \"\n))\n\n    \nif\n \nred\n \n<\n \n0\n \nor\n \nred\n \n>\n \n255\n:\n\n        \nprint\n \ninvalid_msg\n\n        \nreturn\n \n# return will exit the function, w/o return, the function jumps to the next line...\n\n\n    \ngreen\n \n=\n \nint\n(\nraw_input\n(\n\"Enter a 'green' (G) value, from 0 to 255: \"\n))\n\n    \nif\n \ngreen\n \n<\n \n0\n \nor\n \ngreen\n \n>\n \n255\n:\n\n        \nprint\n \ninvalid_msg\n\n        \nreturn\n\n\n    \nblue\n \n=\n \nint\n(\nraw_input\n(\n\"Enter a 'blue' (B) value, from 0 to 255: \"\n))\n\n    \nif\n \nblue\n \n<\n \n0\n \nor\n \nblue\n \n>\n \n255\n:\n\n        \nprint\n \ninvalid_msg\n\n        \nreturn\n\n\n    \nval\n \n=\n \nred\n \n<<\n \n16\n \n+\n \ngreen\n \n<<\n \n8\n \n+\n \nblue\n\n    \n# A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character.\n\n    \n# Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\n\n    \n# Become familiar with bits by reading more here.\n\n    \nprint\n \n\"\n%s\n\"\n \n%\n(\nhex\n(\nval\n)[\n2\n:]\n.\nupper\n())\n \n# string formatting\n\n\n\ndef\n \nhex_rgb\n():\n\n\n    \ninvalid_msg\n \n=\n \n\"Invalid entry\"\n\n    \nhex_val\n \n=\n \nraw_input\n(\n\"Enter a color (six hexadecimal digits): \"\n)\n\n    \nif\n \nlen\n(\nhex_val\n)\n \n!=\n \n6\n:\n\n        \nprint\n \n\"Invalid Entry\"\n\n    \nelse\n:\n\n        \nhex_val\n \n=\n \nint\n(\nhex_val\n,\n \n16\n)\n\n    \ntwo_hex_digits\n \n=\n \n2\n \n**\n \n8\n\n    \nblue\n \n=\n \nhex_val\n \n%\n \ntwo_hex_digits\n\n    \nhex_val\n \n=\n \nhex_val\n \n>>\n \n8\n\n    \ngreen\n \n=\n \nhex_val\n \n%\n \ntwo_hex_digits\n\n    \nhex_val\n \n=\n \nhex_val\n \n>>\n \n8\n\n    \nred\n \n=\n \nhex_val\n \n%\n \ntwo_hex_digits\n\n    \nprint\n \n\"Red: \n%s\n Green: \n%s\n Blue: \n%s\n\"\n \n%\n(\nred\n,\n \ngreen\n,\nblue\n)\n\n\n\ndef\n \nconvert\n():\n\n\n    \nwhile\n \nTrue\n:\n\n        \noption\n \n=\n \nstr\n(\nraw_input\n(\n\"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \"\n))\n\n        \nif\n \noption\n \n==\n \n'1'\n:\n\n            \nprint\n \n\"RGB to Hex...\"\n\n            \nrgb_hex\n()\n\n        \nelif\n \noption\n \n==\n \n'2'\n:\n\n            \nprint\n \n\"Hex to RGB...\"\n\n            \nhex_rgb\n()\n\n        \nelif\n \noption\n \n==\n \n'X'\n \nor\n \noption\n \n==\n \n'x'\n:\n\n            \nbreak\n\n        \nelse\n:\n\n            \nprint\n \n\"Error\"\n\n\n\nconvert\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nEnter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. 1\nRGB to Hex...\nEnter a 'red' (R) value, from 0 to 255: 10\nEnter a 'green' (G) value, from 0 to 255: 10\nEnter a 'blue' (B) value, from 0 to 255: 20\n280000000000000L\nEnter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. x\n\n\n\n\n\n\nUNIT 11, Introduction to Classes\n\u00b6\n\n\nIntroduction to Classes\n\u00b6\n\n\nYou can think of an object as a single data structure that contains data as well as functions; functions of objects are called methods. \nClass Fruit\n, \nlemon instance\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nclass\n \nFruit\n(\nobject\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n,\n \ncolor\n,\n \nflavor\n,\n \npoisonous\n):\n\n\n        \nself\n.\nname\n \n=\n \nname\n\n        \nself\n.\ncolor\n \n=\n \ncolor\n\n        \nself\n.\nflavor\n \n=\n \nflavor\n\n        \nself\n.\npoisonous\n \n=\n \npoisonous\n\n\n    \ndef\n \ndescription\n(\nself\n):\n\n\n        \nprint\n \n\"I'm a \n%s\n \n%s\n and I taste \n%s\n.\"\n \n%\n \n(\nself\n.\ncolor\n,\n \nself\n.\nname\n,\n \nself\n.\nflavor\n)\n\n\n    \ndef\n \nis_edible\n(\nself\n):\n\n\n        \nif\n \nnot\n \nself\n.\npoisonous\n:\n\n            \nprint\n \n\"Yep! I'm edible.\"\n\n        \nelse\n:\n\n            \nprint\n \n\"Don't eat me! I am super poisonous.\"\n\n\n\n\nlemon\n \n=\n \nFruit\n(\n\"lemon\"\n,\n \n\"yellow\"\n,\n \n\"sour\"\n,\n \nFalse\n)\n\n\n\nlemon\n.\ndescription\n()\n\n\n\nlemon\n.\nis_edible\n()\n\n\n\n\n\n\n\n1\n2\nI'm a yellow lemon and I taste sour.\nYep! I'm edible.\n\n\n\n\n\n\nThe class keyword, the name of the class, and the class from which the new class inherits in parentheses. By convention, user-defined Python class names start with a capital letter.\n\n\n1\n2\n3\n4\nclass\n \nAnimal\n(\nobject\n):\n\n\n\n    \npass\n\n\n\n\n\n\n\n__init__():\n this function is required for classes, and it\u2019s used to initialize the objects it creates. \n__init__()\n always takes at least one argument, self, that refers to the object being created. You can think of \n__init__()\n as the function that \u201cboots up\u201d each object the class creates. Python will use the first parameter that \n__init__()\n receives to refer to the object being created; this is why it\u2019s often called self, since this parameter gives the object being created its identity.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nAnimal\n(\nobject\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n):\n\n\n        \nself\n.\nname\n \n=\n \nname\n\n\n\n\n\n\n\nStart creating objects. We can access attributes of our objects using dot notation.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nclass\n \nAnimal\n(\nobject\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n):\n\n\n        \nself\n.\nname\n \n=\n \nname\n\n\n\n\nzebra\n \n=\n \nAnimal\n(\n\"Jeffrey\"\n)\n \n# instance of Animal\n\n\n\nprint\n \nzebra\n.\nname\n \n# instance with attributes\n\n\n\n\n\n\n\n1\nJeffrey\n\n\n\n\n\n\nMore\u2026\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nClass\n \nAnimal\n(\nobject\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n,\n \nage\n,\n \nis_hungry\n):\n\n\n        \nself\n.\nname\n \n=\n \nname\n\n        \nself\n.\nage\n \n=\n \nage\n\n        \nself\n.\nis_hungry\n \n=\n \nis_hungry\n\n\n\n\nzebra\n \n=\n \nAnimal\n(\n\"Jeffrey\"\n,\n \n2\n,\n \nTrue\n)\n\n\ngiraffe\n \n=\n \nAnimal\n(\n\"Bruce\"\n,\n \n1\n,\n \nFalse\n)\n\n\npanda\n \n=\n \nAnimal\n(\n\"Chad\"\n,\n \n7\n,\n \nTrue\n)\n\n\n\nprint\n \nzebra\n.\nname\n,\n \nzebra\n.\nage\n,\n \nzebra\n.\nis_hungry\n\n\nprint\n \ngiraffe\n.\nname\n,\n \ngiraffe\n.\nage\n,\n \ngiraffe\n.\nis_hungry\n\n\nprint\n \npanda\n.\nname\n,\n \npanda\n.\nage\n,\n \npanda\n.\nis_hungry\n\n\n\n\n\n\n\n1\n2\n3\n4\n  File \"<ipython-input-55-08cd00c1ed56>\", line 1\n    Class Animal(object):\n               ^\nSyntaxError: invalid syntax\n\n\n\n\n\n\nAnother important aspect of Python classes is scope. The scope of a variable is the context in which it\u2019s visible to the program.\n\n\nIt may surprise you to learn that not all variables are accessible to all parts of a Python program at all times. When dealing with classes, you can have variables that are available everywhere (global variables), variables that are only available to members of a certain class (member variables), and variables that are only available to particular instances of a class (instance variables).\n\n\nGlobal variable, (class) member variable, class variable, instance variable\n\n\nThe same goes for functions: some are available everywhere, some are only available to members of a certain class, and still others are only available to particular instance objects.\n\n\nGlobal function, class function, instance function\n\n\nThey all have access to the member variable is_alive, since they\u2019re all members of the Animal class.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nclass\n \nAnimal\n(\nobject\n):\n\n\n\n    \n\"\"\"Makes cute animals.\"\"\"\n\n\n    \nis_alive\n \n=\n \nTrue\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n,\n \nage\n):\n\n\n        \nself\n.\nname\n \n=\n \nname\n\n        \nself\n.\nage\n \n=\n \nage\n\n\n\n\nzebra\n \n=\n \nAnimal\n(\n\"Jeffrey\"\n,\n \n2\n)\n\n\ngiraffe\n \n=\n \nAnimal\n(\n\"Bruce\"\n,\n \n1\n)\n\n\npanda\n \n=\n \nAnimal\n(\n\"Chad\"\n,\n \n7\n)\n\n\n\nprint\n \nzebra\n.\nname\n,\n \nzebra\n.\nage\n,\n \nzebra\n.\nis_alive\n\n\nprint\n \ngiraffe\n.\nname\n,\n \ngiraffe\n.\nage\n,\n \ngiraffe\n.\nis_alive\n\n\nprint\n \npanda\n.\nname\n,\n \npanda\n.\nage\n,\n \npanda\n.\nis_alive\n\n\n\n\n\n\n\n1\n2\n3\nJeffrey 2 True\nBruce 1 True\nChad 7 True\n\n\n\n\n\n\nWhen a class has its own functions, those functions are called methods.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nclass\n \nAnimal\n(\nobject\n):\n\n\n\n    \n\"\"\"Makes cute animals.\"\"\"\n\n\n    \nis_alive\n \n=\n \nTrue\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n,\n \nage\n):\n\n\n        \nself\n.\nname\n \n=\n \nname\n\n        \nself\n.\nage\n \n=\n \nage\n\n\n    \ndef\n \ndescription\n(\nself\n):\n\n\n        \nprint\n \nself\n.\nname\n\n        \nprint\n \nself\n.\nage\n\n\n\n\nhippo\n \n=\n \nAnimal\n(\n\"Yan\"\n,\n \n10\n)\n\n\n\nhippo\n.\ndescription\n()\n \n# will call the class function and print\n\n\n\n\n\n\n\n1\n2\nYan\n10\n\n\n\n\n\n\nA class can have any number of member variables.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nclass\n \nAnimal\n(\nobject\n):\n\n\n\n    \n\"\"\"Makes cute animals.\"\"\"\n\n\n    \nis_alive\n \n=\n \nTrue\n\n    \nhealth\n \n=\n \n\"good\"\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n,\n \nage\n):\n\n\n        \nself\n.\nname\n \n=\n \nname\n\n        \nself\n.\nage\n \n=\n \nage\n\n\n    \ndef\n \ndescription\n(\nself\n):\n\n\n        \nprint\n \nself\n.\nname\n\n        \nprint\n \nself\n.\nage\n\n\n\n\nhippo\n \n=\n \nAnimal\n(\n\"Yan\"\n,\n \n10\n)\n\n\nsloth\n \n=\n \nAnimal\n(\n\"George\"\n,\n \n1\n)\n\n\nocelot\n \n=\n \nAnimal\n(\n\"Holly\"\n,\n \n2\n)\n\n\n\nprint\n \nhippo\n.\nhealth\n \n# will call the class variable\n\n\nprint\n \nsloth\n.\nhealth\n\n\nprint\n \nocelot\n.\nhealth\n\n\n\n\n\n\n\n1\n2\n3\ngood\ngood\ngood\n\n\n\n\n\n\nKind of classes and objects you might find in commercial software: here we have a basic \nShoppingCart\n class for creating shopping cart objects for website customers; though basic, it\u2019s similar to what you\u2019d see in a real program.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\nclass\n \nShoppingCart\n(\nobject\n):\n\n\n\n    \nitems_in_cart\n \n=\n \n{}\n \n# try it with an empty or not dictionary\n\n    \nitems_in_cart\n \n=\n \n{\n\"cereal\"\n:\n1\n}\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \ncustomer_name\n):\n\n\n        \nself\n.\ncustomer_name\n \n=\n \ncustomer_name\n\n\n    \ndef\n \nadd_item\n(\nself\n,\n \nproduct\n,\n \nprice\n):\n\n\n        \n\"\"\"Add product to the cart.\"\"\"\n\n\n        \nif\n \nnot\n \nproduct\n \nin\n \nself\n.\nitems_in_cart\n:\n \n# check the dictionary\n\n            \nself\n.\nitems_in_cart\n[\nproduct\n]\n \n=\n \nprice\n\n            \nprint\n \nproduct\n \n+\n \n\" added.\"\n\n        \nelse\n:\n\n            \nprint\n \nproduct\n \n+\n \n\" is already in the cart.\"\n\n\n    \ndef\n \nremove_item\n(\nself\n,\n \nproduct\n):\n\n\n        \n\"\"\"Remove product from the cart.\"\"\"\n\n\n        \nif\n \nproduct\n \nin\n \nself\n.\nitems_in_cart\n:\n \n# check the dictionary\n\n            \ndel\n \nself\n.\nitems_in_cart\n[\nproduct\n]\n\n            \nprint\n \nproduct\n \n+\n \n\" removed.\"\n\n        \nelse\n:\n\n            \nprint\n \nproduct\n \n+\n \n\" is not in the cart.\"\n\n\n\n\nmy_cart\n \n=\n \nShoppingCart\n(\n\"Jean\"\n)\n \n# instance\n\n\nmy_cart\n.\nadd_item\n(\n\"cereal\"\n,\n1\n)\n \n# class function\n\n\n\n\n\n\n\n1\ncereal is already in the cart.\n\n\n\n\n\n\nInheritance is a tricky concept, so let\u2019s go through it step by step. Inheritance is the process by which one class takes on the attributes and methods of another, and it\u2019s used to express an is-a relationship. For example, a Panda is a bear, so a Panda class could inherit from a Bear class.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nclass\n \nCustomer\n(\nobject\n):\n\n\n\n    \n\"\"\"Produces objects that represent customers.\"\"\"\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \ncustomer_id\n):\n\n\n        \nself\n.\ncustomer_id\n \n=\n \ncustomer_id\n\n\n    \ndef\n \ndisplay_cart\n(\nself\n):\n\n\n        \nprint\n \n\"I'm a string that stands in for the contents of your shopping cart!\"\n\n\n\n\nclass\n \nReturningCustomer\n(\nCustomer\n):\n\n\n\n    \n\"\"\"For customers of the repeat variety.\"\"\"\n\n\n    \ndef\n \ndisplay_order_history\n(\nself\n):\n\n\n        \nprint\n \n\"I'm a string that stands in for your order history!\"\n\n\n\n\nmonty_python\n \n=\n \nReturningCustomer\n(\n\"ID: 12345\"\n)\n \n# class instance\n\n\nmonty_python\n.\ndisplay_cart\n()\n \n# inherited from the 1st class\n\n\nmonty_python\n.\ndisplay_order_history\n()\n \n# from the current class\n\n\n\n\n\n\n\n1\n2\nI'm a string that stands in for the contents of your shopping cart!\nI'm a string that stands in for your order history!\n\n\n\n\n\n\nCOMPLETE EXAMPLE.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\nclass\n \nShape\n(\nobject\n):\n\n\n\n    \n\"\"\"make shapes\"\"\"\n\n\n    \nnumber_of_sides\n \n=\n \n5\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nnumber_of_sides\n):\n\n\n        \nself\n.\nnumber_of_sides\n \n=\n \nnumber_of_sides\n\n\n\n\nmy_shape\n \n=\n \nShape\n(\n4\n)\n \n# instance\n\n\n\n\nclass\n \nTriangle\n(\nShape\n):\n\n\n\n    \nnumber_of_3sides\n \n=\n \n3\n\n    \n# number_of_sides = 3 # would override the above\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nangle1\n,\n \nangle2\n,\n \nangle3\n):\n\n\n        \nself\n.\nangle1\n \n=\n \nangle1\n\n        \nself\n.\nangle2\n \n=\n \nangle2\n\n        \nself\n.\nangle3\n \n=\n \nangle3\n\n\n    \ndef\n \ncheck_angles\n(\nself\n):\n\n\n        \nif\n \nself\n.\nangle1\n \n+\n \nself\n.\nangle2\n \n+\n \nself\n.\nangle3\n \n==\n \n180\n:\n\n            \nreturn\n \nTrue\n\n        \nelse\n:\n\n            \nreturn\n \nFalse\n\n\n\n\nmy_triangle\n \n=\n \nTriangle\n(\n90\n,\n \n30\n,\n \n60\n)\n \n# instance\n\n\n\nprint\n \nmy_triangle\n.\nnumber_of_sides\n \n# inherit\n\n\nprint\n \nmy_shape\n.\nnumber_of_sides\n\n\n\nprint\n \nmy_triangle\n.\nnumber_of_3sides\n\n\nprint\n \nmy_triangle\n.\ncheck_angles\n()\n\n\n\n\nclass\n \nEquilateral\n(\nTriangle\n):\n\n\n\n    \nangle\n \n=\n \n60\n\n\n    \ndef\n \n__init__\n(\nself\n):\n\n\n        \nself\n.\nangle1\n \n=\n \nself\n.\nangle\n \n# override the above\n\n        \nself\n.\nangle2\n \n=\n \nself\n.\nangle\n\n        \nself\n.\nangle3\n \n=\n \nself\n.\nangle\n\n\n\n\nmy_equilateral\n \n=\n \nEquilateral\n()\n \n# instance\n\n\n\nprint\n \nmy_equilateral\n.\nangle\n\n\nprint\n \nmy_equilateral\n.\nangle1\n \n# based on variable angle\n\n\n\nprint\n \nmy_equilateral\n.\nnumber_of_sides\n \n# inherit\n\n\nprint\n \nmy_equilateral\n.\nnumber_of_3sides\n \n# inherit\n\n\n\nprint\n \nmy_equilateral\n.\ncheck_angles\n()\n \n# inherit; method way\n\n\nprint\n \nEquilateral\n.\ncheck_angles\n(\nmy_equilateral\n)\n \n# function way; IDEM !!!\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n5\n4\n3\nTrue\n60\n60\n5\n3\nTrue\nTrue\n\n\n\n\n\n\nSometimes you\u2019ll want one class that inherits from another to not only take on the methods and attributes of its parent, but to override one or more of them.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nclass\n \nEmployee\n(\nobject\n):\n\n\n\n    \n\"\"\"Models real-life employees!\"\"\"\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nemployee_name\n):\n\n\n        \nself\n.\nemployee_name\n \n=\n \nemployee_name\n\n\n    \ndef\n \ncalculate_wage\n(\nself\n,\n \nhours\n):\n\n\n        \nself\n.\nhours\n \n=\n \nhours\n\n        \nreturn\n \nhours\n \n*\n \n20.00\n\n\n\n\nclass\n \nPartTimeEmployee\n(\nEmployee\n):\n\n\n\n    \ndef\n \ncalculate_wage\n(\nself\n,\n \nhours\n):\n\n\n        \nself\n.\nhours\n \n=\n \nhours\n\n        \nreturn\n \nhours\n \n*\n \n12.00\n \n# override what is naturally inherited\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nclass\n \nEmployee\n(\nobject\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n):\n\n\n        \nself\n.\nname\n \n=\n \nname\n\n\n    \ndef\n \ngreet\n(\nself\n,\n \nother\n):\n\n\n        \nprint\n \n\"Hello, \n%s\n\"\n \n%\n \nother\n.\nname\n\n\n\n\nclass\n \nCEO\n(\nEmployee\n):\n\n\n    \ndef\n \ngreet\n(\nself\n,\n \nother\n):\n\n\n        \nprint\n \n\"Get back to work, \n%s\n!\"\n \n%\n \nother\n.\nname\n \n# override\n\n\n\n\nceo\n \n=\n \nCEO\n(\n\"Emily\"\n)\n\n\nemp\n \n=\n \nEmployee\n(\n\"Steve\"\n)\n\n\n\nemp\n.\ngreet\n(\nceo\n)\n\n\nceo\n.\ngreet\n(\nemp\n)\n\n\n\n\n\n\n\n1\n2\nHello, Emily\nGet back to work, Steve!\n\n\n\n\n\n\nOn the flip side, sometimes you\u2019ll be working with a derived class (or subclass) and realize that you\u2019ve overwritten a method or attribute defined in that class\u2019 base class (also called a parent or superclass) that you actually need. Have no fear! You can directly access the attributes or methods of a superclass with Python\u2019s built-in super call.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\nclass\n \nEmployee\n(\nobject\n):\n\n\n\n    \n\"\"\"Models real-life employees!\"\"\"\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nemployee_name\n):\n\n\n        \nself\n.\nemployee_name\n \n=\n \nemployee_name\n\n\n    \ndef\n \ncalculate_wage\n(\nself\n,\n \nhours\n):\n\n\n        \nself\n.\nhours\n \n=\n \nhours\n\n        \nreturn\n \nhours\n \n*\n \n20.00\n\n\n\n\nclass\n \nPartTimeEmployee\n(\nEmployee\n):\n\n\n\n    \ndef\n \ncalculate_wage\n(\nself\n,\n \nhours\n):\n \n# override\n\n\n        \nself\n.\nhours\n \n=\n \nhours\n\n        \nreturn\n \nhours\n \n*\n \n12.00\n\n\n    \ndef\n \nfull_time_wage\n(\nself\n,\n \nhours\n):\n \n# super call: associate the parent's class function with child's new function withtout retyping the function\n\n\n        \nreturn\n \nsuper\n(\nPartTimeEmployee\n,\n \nself\n)\n.\ncalculate_wage\n(\nhours\n)\n\n\n\n\nmilton\n \n=\n \nPartTimeEmployee\n(\n\"Jack\"\n)\n\n\n\nprint\n \nmilton\n.\nfull_time_wage\n(\n10\n)\n\n\n\n\n\n\n\n1\n200.0\n\n\n\n\n\n\nMore on Classes\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nCar\n(\nobject\n):\n \n# create a class\n\n\n\n    \npass\n\n\n\n\nmy_car\n \n=\n \nCar\n()\n \n# create a class instance\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nclass\n \nCar\n(\nobject\n):\n\n\n\n    \ncondition\n \n=\n \n\"new\"\n \n# create a member variables\n\n\n\n\nmy_car\n \n=\n \nCar\n()\n\n\n\nprint\n \nmy_car\n.\ncondition\n \n# call the member variable\n\n\n\n\n\n\n\n1\nnew\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nCar\n(\nobject\n):\n\n\n\n    \ncondition\n \n=\n \n\"new\"\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nmodel\n,\n \ncolor\n,\n \nmpg\n):\n \n# initialize or boot up!\n\n\n        \nself\n.\nmodel\n \n=\n \nmodel\n \n# assign class variables\n\n        \nself\n.\ncolor\n \n=\n \ncolor\n\n        \nself\n.\nmpg\n \n=\n \nmpg\n\n\n\n\nmy_car\n \n=\n \nCar\n(\n\"DeLorean\"\n,\n \n\"silver\"\n,\n \n88\n)\n \n# create an instance with its class variables\n\n\n\nprint\n \nmy_car\n.\ncondition\n\n\n\nprint\n \nmy_car\n.\nmodel\n \n# call the class variables...\n\n\nprint\n \nmy_car\n.\ncolor\n\n\nprint\n \nmy_car\n.\nmpg\n\n\n\n\n\n\n\n1\n2\n3\n4\nnew\nDeLorean\nsilver\n88\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nclass\n \nCar\n(\nobject\n):\n\n\n\n    \ncondition\n \n=\n \n\"new\"\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nmodel\n,\n \ncolor\n,\n \nmpg\n):\n\n\n        \nself\n.\nmodel\n \n=\n \nmodel\n\n        \nself\n.\ncolor\n \n=\n \ncolor\n\n        \nself\n.\nmpg\n \n=\n \nmpg\n\n\n    \ndef\n \ndisplay_car\n(\nself\n):\n\n\n        \nreturn\n \n\"This is a \n%s\n \n%s\n with \n%s\n MPG.\"\n \n%\n \n(\nself\n.\ncolor\n,\n \nself\n.\nmodel\n,\n \nstr\n(\nself\n.\nmpg\n))\n \n# create a class method (function)\n\n\n\n\nmy_car\n \n=\n \nCar\n(\n\"DeLorean\"\n,\n \n\"silver\"\n,\n \n88\n)\n\n\n\nprint\n \nmy_car\n.\ncondition\n\n\n\nprint\n \nmy_car\n.\nmodel\n\n\nprint\n \nmy_car\n.\ncolor\n\n\nprint\n \nmy_car\n.\nmpg\n\n\n\nprint\n \nmy_car\n.\ndisplay_car\n()\n \n# call the class method\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nnew\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\nclass\n \nCar\n(\nobject\n):\n\n\n\n    \ncondition\n \n=\n \n\"new\"\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nmodel\n,\n \ncolor\n,\n \nmpg\n):\n\n\n        \nself\n.\nmodel\n \n=\n \nmodel\n\n        \nself\n.\ncolor\n \n=\n \ncolor\n\n        \nself\n.\nmpg\n \n=\n \nmpg\n\n\n    \ndef\n \ndisplay_car\n(\nself\n):\n\n\n        \nreturn\n \n\"This is a \n%s\n \n%s\n with \n%s\n MPG.\"\n \n%\n \n(\nself\n.\ncolor\n,\n \nself\n.\nmodel\n,\n \nstr\n(\nself\n.\nmpg\n))\n\n\n    \ndef\n \ndrive_car\n(\nself\n):\n\n\n        \nself\n.\ncondition\n \n=\n \n\"used\"\n\n\n\n\nmy_car\n \n=\n \nCar\n(\n\"DeLorean\"\n,\n \n\"silver\"\n,\n \n88\n)\n\n\n\nprint\n \nmy_car\n.\ncondition\n \n# 'new'\n\n\n\nprint\n \nmy_car\n.\nmodel\n\n\nprint\n \nmy_car\n.\ncolor\n\n\nprint\n \nmy_car\n.\nmpg\n\n\n\nprint\n \nmy_car\n.\ndisplay_car\n()\n\n\n\nmy_car\n.\ndrive_car\n()\n\n\nprint\n \nmy_car\n.\ncondition\n \n# the condition changes to 'used'\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nnew\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\nclass\n \nCar\n(\nobject\n):\n\n\n\n    \ncondition\n \n=\n \n\"new\"\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nmodel\n,\n \ncolor\n,\n \nmpg\n):\n\n\n        \nself\n.\nmodel\n \n=\n \nmodel\n\n        \nself\n.\ncolor\n \n=\n \ncolor\n\n        \nself\n.\nmpg\n \n=\n \nmpg\n\n\n    \ndef\n \ndisplay_car\n(\nself\n):\n\n\n        \nreturn\n \n\"This is a \n%s\n \n%s\n with \n%s\n MPG.\"\n \n%\n \n(\nself\n.\ncolor\n,\n \nself\n.\nmodel\n,\n \nstr\n(\nself\n.\nmpg\n))\n\n\n    \ndef\n \ndrive_car\n(\nself\n):\n\n\n        \nself\n.\ncondition\n \n=\n \n\"used\"\n\n\n\n\nmy_car\n \n=\n \nCar\n(\n\"DeLorean\"\n,\n \n\"silver\"\n,\n \n88\n)\n\n\n\nprint\n \nmy_car\n.\ncondition\n\n\n\nprint\n \nmy_car\n.\nmodel\n\n\nprint\n \nmy_car\n.\ncolor\n\n\nprint\n \nmy_car\n.\nmpg\n\n\n\nprint\n \nmy_car\n.\ndisplay_car\n()\n\n\n\nmy_car\n.\ndrive_car\n()\n\n\nprint\n \nmy_car\n.\ncondition\n\n\n\n\nclass\n \nElectricCar\n(\nCar\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nmodel\n,\n \ncolor\n,\n \nmpg\n,\n \nbattery_type\n):\n \n# initialize with some partial inheritance from class Car\n\n\n        \nCar\n.\n__init__\n(\nself\n,\n \nmodel\n,\n \ncolor\n,\n \nmpg\n)\n \n# assign class variable by inheritance from class Car\n\n        \nself\n.\nbattery_type\n \n=\n \nbattery_type\n \n# assign a new class variable\n\n\n\n\nmy_car\n \n=\n \nElectricCar\n(\n\"Telsa\"\n,\n \n\"red\"\n,\n \n0\n,\n \n\"molten salt\"\n)\n \n# create an instance with its class variables; OVERRIDE the above\n\n\n\nprint\n \nmy_car\n.\ncondition\n \n# call the class variables; OVERRIDE the above\n\n\n\nprint\n \nmy_car\n.\nmodel\n \n# call the member variable; OVERRIDE the above\n\n\nprint\n \nmy_car\n.\ncolor\n\n\nprint\n \nmy_car\n.\nmpg\n\n\n\nmy_ride\n \n=\n \nElectricCar\n(\n\"Google\"\n,\n \n\"blue\"\n,\n \n10\n,\n \n\"electrical\"\n)\n \n# create an instance with its class variables\n\n\n\nprint\n \nmy_ride\n.\ncondition\n \n# call the class variables\n\n\n\nprint\n \nmy_ride\n.\nmodel\n \n# call the member variable\n\n\nprint\n \nmy_ride\n.\ncolor\n\n\nprint\n \nmy_ride\n.\nmpg\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nnew\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused\nnew\nTelsa\nred\n0\nnew\nGoogle\nblue\n10\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\nclass\n \nCar\n(\nobject\n):\n\n\n\n    \ncondition\n \n=\n \n\"new\"\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nmodel\n,\n \ncolor\n,\n \nmpg\n):\n\n\n        \nself\n.\nmodel\n \n=\n \nmodel\n\n        \nself\n.\ncolor\n \n=\n \ncolor\n\n        \nself\n.\nmpg\n \n=\n \nmpg\n\n\n    \ndef\n \ndisplay_car\n(\nself\n):\n\n\n        \nreturn\n \n\"This is a \n%s\n \n%s\n with \n%s\n MPG.\"\n \n%\n \n(\nself\n.\ncolor\n,\n \nself\n.\nmodel\n,\n \nstr\n(\nself\n.\nmpg\n))\n\n\n    \ndef\n \ndrive_car\n(\nself\n):\n\n\n        \nself\n.\ncondition\n \n=\n \n\"used\"\n\n\n\n\nmy_car\n \n=\n \nCar\n(\n\"DeLorean\"\n,\n \n\"silver\"\n,\n \n88\n)\n\n\n\nprint\n \nmy_car\n.\ncondition\n \n+\n \n\"!\"\n \n# call the member variable; 'new'\n\n\n\nprint\n \nmy_car\n.\nmodel\n\n\nprint\n \nmy_car\n.\ncolor\n\n\nprint\n \nmy_car\n.\nmpg\n\n\n\nprint\n \nmy_car\n.\ndisplay_car\n()\n\n\n\nmy_car\n.\ndrive_car\n()\n \n# call the class method\n\n\nprint\n \nmy_car\n.\ncondition\n \n+\n \n\"!!\"\n \n# member variable; now 'used'\n\n\n\nclass\n \nElectricCar\n(\nCar\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nmodel\n,\n \ncolor\n,\n \nmpg\n,\n \nbattery_type\n):\n\n\n        \nCar\n.\n__init__\n(\nself\n,\n \nmodel\n,\n \ncolor\n,\n \nmpg\n)\n\n        \nself\n.\nbattery_type\n \n=\n \nbattery_type\n\n\n    \ndef\n \ndrive_car\n(\nself\n):\n \n# create a class method; OVERRIDE the above\n\n\n        \nself\n.\ncondition\n \n=\n \n\"like new\"\n\n\n\n\nmy_car\n \n=\n \nElectricCar\n(\n\"Telsa\"\n,\n \n\"red\"\n,\n \n0\n,\n \n\"molten salt\"\n)\n\n\n\nprint\n \nmy_car\n.\ncondition\n \n+\n \n\"!\"\n \n# 'new' again\n\n\nmy_car\n.\ndrive_car\n()\n \n# call the class method\n\n\nprint\n \nmy_car\n.\ncondition\n \n+\n \n\"!!\"\n \n# 'like new' now\n\n\n\nprint\n \nmy_car\n.\nmodel\n\n\nprint\n \nmy_car\n.\ncolor\n\n\nprint\n \nmy_car\n.\nmpg\n\n\n\nmy_ride\n \n=\n \nElectricCar\n(\n\"Google\"\n,\n \n\"blue\"\n,\n \n10\n,\n \n\"electrical\"\n)\n\n\n\nprint\n \nmy_ride\n.\ncondition\n \n+\n \n\"!\"\n \n# 'used' again\n\n\nmy_ride\n.\ndrive_car\n()\n# call the class method\n\n\nprint\n \nmy_ride\n.\ncondition\n \n+\n \n\"!!\"\n \n# 'like new' now\n\n\n\nprint\n \nmy_ride\n.\nmodel\n\n\nprint\n \nmy_ride\n.\ncolor\n\n\nprint\n \nmy_ride\n.\nmpg\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nnew!\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused!!\nnew!\nlike new!!\nTelsa\nred\n0\nnew!\nlike new!!\nGoogle\nblue\n10\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nclass\n \nPoint3D\n(\nobject\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nx\n,\n \ny\n,\n \nz\n):\n \n# initialize\n\n\n        \nself\n.\nx\n \n=\n \nx\n\n        \nself\n.\ny\n \n=\n \ny\n\n        \nself\n.\nz\n \n=\n \nz\n\n\n\n# __repr__() method, which is short for representation; by providing a return value in this method, we can tell Python how to represent an object of our class (for instance, when using a print statement).\n\n\n    \ndef\n \n__repr__\n(\nself\n):\n\n\n        \nreturn\n \n\"(\n%d\n, \n%d\n, \n%d\n)\"\n \n%\n \n(\nself\n.\nx\n,\n \nself\n.\ny\n,\n \nself\n.\nz\n)\n\n\n\n\nmy_point\n \n=\n \nPoint3D\n(\n1\n,\n2\n,\n3\n)\n \n# instance\n\n\n\n# Print my_point.__repr__() w/o adding variables\n\n\n\nprint\n \nmy_point\n\n\n\n\n\n\n\n1\n(1, 2, 3)\n\n\n\n\n\n\nQuiz 11\n\u00b6\n\n\nPython writes data to a file when you close the file!\n\n\nProject Bank Account\n\u00b6\n\n\nIn this project, we\u2019ll create a Python class that can be used to create and manipulate a personal bank account.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\nclass\n \nBankAccount\n(\nobject\n):\n\n\n\n    \nbalance\n \n=\n \n0\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n):\n\n        \nself\n.\nname\n \n=\n \nname\n\n\n    \ndef\n \n__repr__\n(\nself\n):\n\n\n    \n# The __repr__() method defines what represents the object when a user tries to print the BnkAccount object using print. Let's add to this method and make it descriptive.\n\n\n        \nreturn\n \n\"\n%s\n's account; Balance: $\n%.2f\n\"\n \n%\n \n(\nself\n.\nname\n,\n \nself\n.\nbalance\n)\n \n# $%.2f for 2 decimals, self.class attribute, self.member variable\n\n\n    \ndef\n \nshow_balance\n(\nself\n):\n\n\n        \nprint\n \n\"Balance: $\n%.2f\n\\n\n\"\n \n%\n \n(\nself\n.\nbalance\n)\n\n\n    \ndef\n \ndeposit\n(\nself\n,\n \namount\n):\n\n\n        \nif\n \namount\n \n<=\n \n0\n:\n\n            \nprint\n \n\"No Account. Invalid\n\\n\n\"\n\n            \nreturn\n \n# # return will exit the function, w/o return, the function jumps to the next line...\n\n        \nelse\n:\n\n            \nprint\n \n\"Depositing: $\n%.2f\n\"\n \n%\n \n(\namount\n)\n \n# ?\n\n            \nself\n.\nbalance\n \n+=\n \namount\n\n            \nself\n.\nshow_balance\n()\n \n# calling a class function\n\n\n    \ndef\n \nwithdraw\n(\nself\n,\n \namount\n):\n\n\n        \nif\n \namount\n \n>\n \nself\n.\nbalance\n:\n\n            \nprint\n \n\"More than the balance. Invalid\n\\n\n\"\n\n            \nreturn\n\n        \nelse\n:\n\n            \nprint\n \n\"Withdrawing: $\n%.2f\n\"\n \n%\n \n(\namount\n)\n \n# ?\n\n            \nself\n.\nbalance\n \n-=\n \namount\n\n            \nself\n.\nshow_balance\n()\n\n\n\n\nmy_account\n \n=\n \nBankAccount\n(\n\"Ugo\"\n)\n \n# Ugo is the argument 'name'\n\n\n\nprint\n \nmy_account\n \n# launch the __repr__\n\n\nmy_account\n.\nshow_balance\n()\n \n# launch the class function (method) show_balance\n\n\n\nmy_account\n.\ndeposit\n(\n2000\n)\n\n\nmy_account\n.\nwithdraw\n(\n3000\n)\n\n\nmy_account\n.\nwithdraw\n(\n1000\n)\n\n\n\nprint\n \nmy_account\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nUgo's account; Balance: $0.00\nBalance: $0.00\n\nDepositing: $2000.00\nBalance: $2000.00\n\nMore than the balance. Invalid\n\nWithdrawing: $1000.00\nBalance: $1000.00\n\nUgo's account; Balance: $1000.00\n\n\n\n\n\n\nUNIT 12, File Input and Output\n\u00b6\n\n\nFile Input/Output\n\u00b6\n\n\nRead information from a file on your computer, and/or write that information to another file? This process is called file I/O.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nmy_list\n \n=\n \n[\ni\n \n**\n \n2\n \nfor\n \ni\n \nin\n \nrange\n(\n1\n,\n11\n)]\n\n\n\nf\n \n=\n \nopen\n(\n\"output.txt\"\n,\n \n\"w\"\n)\n \n# create a file\n\n\n\nfor\n \nitem\n \nin\n \nmy_list\n:\n\n    \nf\n.\nwrite\n(\nstr\n(\nitem\n)\n \n+\n \n\"\n\\n\n\"\n)\n \n# write\n\n\n\nf\n.\nclose\n()\n \n# save, close\n\n\n\n\n\n\n\nFirst.\n\n\n1\nf\n \n=\n \nopen\n(\n\"output.txt\"\n,\n \n\"w\"\n)\n \n# This told Python to open output.txt in \"w\" mode (\"w\" stands for \"write\").\n\n\n\n\n\n\n\nRead and write.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nmy_list\n \n=\n \n[\ni\n \n**\n \n2\n \nfor\n \ni\n \nin\n \nrange\n(\n1\n,\n11\n)]\n\n\n\nmy_file\n \n=\n \nopen\n(\n\"output.txt\"\n,\n \n\"r+\"\n)\n \n# the file must exist\n\n\n\nfor\n \nitem\n \nin\n \nmy_list\n:\n\n    \nmy_file\n.\nwrite\n(\nstr\n(\nitem\n)\n \n+\n \n\"\n\\n\n\"\n)\n \n# overwrite\n\n\n\nmy_file\n.\nclose\n()\n \n# save, close\n\n\n\n\n\n\n\nRead on the console.\n\n\n1\n2\n3\n4\nmy_file\n \n=\n \nopen\n(\n\"output.txt\"\n,\n \n\"r\"\n)\n \n# the file must exist\n\n\nprint\n \nmy_file\n.\nread\n()\n\n\n\nmy_file\n.\nclose\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n1\n4\n9\n16\n25\n36\n49\n64\n81\n100\n\n\n\n\n\n\nRead lines on the console.\n\n\n1\n2\n3\n4\n5\n6\n7\nmy_file\n \n=\n \nopen\n(\n\"output.txt\"\n,\n \n\"r\"\n)\n \n# the file must exist\n\n\n\nprint\n \nmy_file\n.\nreadline\n()\n \n# read line 1\n\n\nprint\n \nmy_file\n.\nreadline\n()\n \n# read line 2 automatically\n\n\nprint\n \nmy_file\n.\nreadline\n()\n \n# read line 3\n\n\n\nmy_file\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n1\n\n4\n\n9\n\n\n\n\n\n\nOpen the file for reading.\n\n\n1\n2\n3\nread_file\n \n=\n \nopen\n(\n\"output.txt\"\n,\n \n\"r\"\n)\n\n\nprint\n \nread_file\n.\nread\n()\n\n\nread_file\n.\nclose\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n1\n4\n9\n16\n25\n36\n49\n64\n81\n100\n\n\n\n\n\n\nUse a second file handler to open the file for writing.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nwrite_file\n \n=\n \nopen\n(\n\"text.txt\"\n,\n \n\"w\"\n)\n\n\n\n# Write to the file\n\n\nwrite_file\n.\nwrite\n(\n\"Not closing files is VERY BAD.\"\n)\n\n\n\n# Try to read from the file\n\n\nprint\n \nwrite_file\n.\nread\n()\n \n# Not working...``\n\n\n\nwrite_file\n.\nclose\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n---------------------------------------------------------------------------\n\nIOError                                   Traceback (most recent call last)\n\n<ipython-input-87-db256164394e> in <module>()\n      5 \n      6 # Try to read from the file\n----> 7 print write_file.read() # Not working...``\n      8 \n      9 write_file.close()\n\n\nIOError: File not open for reading\n\n\n\n\n\n\nTry.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nread_file\n \n=\n \nopen\n(\n\"text.txt\"\n,\n \n\"r\"\n)\n\n\nprint\n \nread_file\n.\nread\n()\n\n\n\nwrite_file\n \n=\n \nopen\n(\n\"text.txt\"\n,\n \n\"w\"\n)\n\n\nwrite_file\n.\nwrite\n(\n\"Not closing files is VERY BAD.\"\n)\n\n\n\nwrite_file\n.\nclose\n()\n \n# close it!\n\n\n\nwrite_file\n \n=\n \nopen\n(\n\"text.txt\"\n,\n \n\"r\"\n)\n \n# reopen it in read mode\n\n\nprint\n \nwrite_file\n.\nread\n()\n \n# working\n\n\nwrite_file\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\nNot closing files is VERY BAD.\nNot closing files is VERY BAD.\n\n\n\n\n\n\nAnd.\n\n\n1\n2\n3\nwrite_file\n \n=\n \nopen\n(\n\"text.txt\"\n,\n \n\"w\"\n)\n\n\nwrite_file\n.\nwrite\n(\n\"Not closing files is VERY BAD.\"\n)\n \n# could be a variable\n\n\nwrite_file\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\nread_file\n \n=\n \nopen\n(\n\"text.txt\"\n,\n \n\"r\"\n)\n\n\nprint\n \nread_file\n.\nread\n()\n\n\nread_file\n.\nclose\n()\n\n\n\n\n\n\n\n1\nNot closing files is VERY BAD.\n\n\n\n\n\n\n1\n2\n3\nwrite_file\n \n=\n \nopen\n(\n\"text.txt\"\n,\n \n\"w\"\n)\n\n\nwrite_file\n.\ntruncate\n()\n \n# delete\n\n\nwrite_file\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\nread_file\n \n=\n \nopen\n(\n\"text.txt\"\n,\n \n\"r\"\n)\n\n\nprint\n \nread_file\n.\nread\n()\n\n\nread_file\n.\nclose\n()\n\n\n\n\n\n\n\nYou may not know this, but file objects contain a special pair of built-in methods: \n__enter__()\n and \n__exit__()\n. The details aren\u2019t important, but what is important is that when a file object\u2019s \n__exit__()\n method is invoked, it automatically closes the file. How do we invoke this method? With with and as.\n\n\n1\n2\n3\nwith\n \nopen\n(\n\"text.txt\"\n,\n \n\"w\"\n)\n \nas\n \ntextfile\n:\n \n# a variable\n\n    \ntextfile\n.\nwrite\n(\n\"Success!\"\n)\n\n    \ntextfile\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\nwith\n \nopen\n(\n\"text.txt\"\n,\n \n\"r\"\n)\n \nas\n \ntextfile\n:\n\n    \nprint\n \ntextfile\n.\nread\n()\n\n    \ntextfile\n.\nclose\n()\n\n\n\n\n\n\n\n1\nSuccess!\n\n\n\n\n\n\nMore I/O\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nwith\n \nopen\n(\n\"text.txt\"\n,\n \n\"w\"\n)\n \nas\n \nmy_file\n:\n\n    \nmy_file\n.\nwrite\n(\n\"Youpee!!!\"\n)\n\n\n\nprint\n \nmy_file\n.\nclosed\n \n# true\n\n\n\nif\n \nnot\n \nmy_file\n.\nclosed\n \n==\n \nTrue\n:\n\n    \nmy_file\n.\nclose\n()\n\n\n\nprint\n \nmy_file\n.\nclosed\n \n# true\n\n\n\nwith\n \nopen\n(\n\"text.txt\"\n,\n \n\"r\"\n)\n \nas\n \nmy_file\n:\n\n    \nprint\n \nmy_file\n.\nread\n()\n\n\n\nprint\n \nmy_file\n.\nclosed\n \n# true\n\n\n\nwith\n \nopen\n(\n\"text.txt\"\n,\n \n\"r\"\n)\n \nas\n \nmy_file\n:\n\n    \nprint\n \nmy_file\n.\nclosed\n \n# false\n\n\n\nmy_file\n.\nclose\n()\n\n\n\nprint\n \nmy_file\n.\nclosed\n \n# true\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nTrue\nTrue\nYoupee!!!\nTrue\nFalse\nTrue\n\n\n\n\n\n\nQuiz 12\n\u00b6\n\n\nOK\n\n\nProject DNA Analysis\n\u00b6\n\n\nIn this project, we\u2019ll use many of the concepts you\u2019ve learned throughout the Python course in order to do some DNA analysis for a crime investigation.\n\n\nThe scenario:\n\n\nA spy deleted important files from a computer. There were a few witnesses at the scene of the crime, but no one is sure who exactly the spy was. Three possible suspects were apprehended based on surveillance video. Each suspect had a sample of DNA taken from them. The computer\u2019s keyboard was also swabbed for DNA evidence and, luckily, one small DNA sample was successfully retrieved from the computer\u2019s keyboard.\n\n\nGiven the three suspects\u2019 DNA and the sample DNA retreived from the keyboard, it\u2019s up to you to figure out who the spy is!\n\n\nThe project should have methods for each of the following:\n\n\n\n\nGiven a file, read in the DNA for each suspect and save it as a string\n\n\nTake a DNA string and split it into a list of codons\n\n\nIterate through a suspect\u2019s codon list to see how many of their codons match the sample codons\n\n\nPick the right suspect to continue the investigation on\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\nsample\n \n=\n \n[\n'GTA'\n,\n'GGG'\n,\n'CAC'\n]\n\n\n\ndef\n \nread_dna\n(\ndna_file\n):\n\n\n    \ndna_data\n \n=\n \n\"\"\n \n# empty string\n\n\n    \nwith\n \nopen\n(\ndna_file\n,\n \n\"r\"\n)\n \nas\n \nf\n:\n \n# f = open(dna_file, \"r\"); with, as\n\n        \nfor\n \nline\n \nin\n \nf\n:\n\n            \ndna_data\n \n+=\n \nline\n\n        \nreturn\n \ndna_data\n\n\n\ndef\n \ndna_codons\n(\ndna\n):\n\n\n    \ncodons\n \n=\n \n[]\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\nlen\n(\ndna\n),\n3\n):\n \n# slice strings of 3 letters\n\n        \nif\n \ni\n+\n3\n \n<\n \nlen\n(\ndna\n):\n \n# make sure that you don't add a string to the codon list that isn't at least 3 letters long\n\n            \ncodons\n.\nappend\n(\ndna\n[\ni\n:\ni\n+\n3\n])\n \n# append to list in appendig positions 0 (new entry), 1, 2, stopping before 3\n\n    \nreturn\n \ncodons\n\n\n\ndef\n \nmatch_dna\n(\ndna\n):\n\n\n    \nmatches\n \n=\n \n0\n\n    \nfor\n \ncodon\n \nin\n \ndna\n:\n\n        \nif\n \ncodon\n \nin\n \nsample\n:\n \n# if ,in\n\n            \nmatches\n \n+=\n \n1\n\n    \nreturn\n \nmatches\n\n\n\ndef\n \nis_criminal\n(\ndna_sample\n):\n\n\n    \ndna_data\n \n=\n \nread_dna\n(\ndna_sample\n)\n\n    \ncodons\n \n=\n \ndna_codons\n(\ndna_data\n)\n\n    \nnum_matches\n \n=\n \nmatch_dna\n(\ncodons\n)\n\n    \nif\n \nnum_matches\n \n>=\n \n3\n:\n\n        \nprint\n((\ndna_sample\n)[:\n-\n4\n])\n.\nupper\n(),\n\n        \nprint\n(\n\": number of matches = \"\n \n+\n \nstr\n(\nnum_matches\n)\n \n+\n \n\"; the investigation will proceed further more with this suspect.\"\n)\n\n    \nelse\n:\n\n        \nprint\n((\ndna_sample\n)[:\n-\n4\n])\n.\nupper\n(),\n\n        \nprint\n(\n\": no evidence; the suspect can be freed.\"\n)\n\n\n\na\n \n=\n \n\"suspect1.txt\"\n\n\nis_criminal\n(\na\n)\n\n\n\na\n \n=\n \n\"suspect2.txt\"\n\n\nis_criminal\n(\na\n)\n\n\n\na\n \n=\n \n\"suspect3.txt\"\n\n\nis_criminal\n(\na\n)\n\n\n\n\n\n\n\n1\n2\n3\nSUSPECT1\n \n:\n \nno\n \nevidence\n;\n \nthe\n \nsuspect\n \ncan\n \nbe\n \nfreed\n.\n\n\nSUSPECT2\n \n:\n \nnumber\n \nof\n \nmatches\n \n=\n \n6\n;\n \nthe\n \ninvestigation\n \nwill\n \nproceed\n \nfurther\n \nmore\n \nwith\n \nthis\n \nsuspect\n.\n\n\nSUSPECT3\n \n:\n \nno\n \nevidence\n;\n \nthe\n \nsuspect\n \ncan\n \nbe\n \nfreed\n.\n\n\n\n\n\n\n\nsuspect1.txt\n\n\n1\nATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT\n\n\n\n\n\n\nsuspect2.txt\n\n\n1\nCCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG\n\n\n\n\n\n\nsuspect3.txt\n\n\n1\nTCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA",
            "title": "Codecademy Python"
        },
        {
            "location": "/Codecademy Python/#python-syntax",
            "text": "Python is an easy to learn programming language. You can use it to create web apps, games, even a search engine!  1\n2\n3\n4\n5\n6 print   \"Welcome to Python!\"  print ( \"Welcome\" )  print   5   +   3  print ( 5   +   5 )  print   \"What \"   +   str ( 3 )  print   \"What\" , 5    1\n2\n3\n4\n5\n6 Welcome to Python!\nWelcome\n8\n10\nWhat 3\nWhat 5   1\n2\n3\n4\n5\n6\n7\n8 a   =   30  print   \"What \"   +   str ( a )  b   =   \"A list  \\t *A   \\\\   \\\"   \\'  \"  print   b  c   =   10   +   20  print   c    1\n2\n3 What 30\nA list  *A  \\ \" ' \n30   1\n2\n3\n4\n5\n6 print   \"1 :  %r \"   %   ( a )   # read#  print   \"2 :  %s \"   %   ( a )   # string#  print   \"? :  %d \"   %   ( a )   # digit  print   \"3 :  %r \"   %   ( b )  print   \"4 :  %s \"   %   ( b )  # print \"? : %d\" % (b) !!!    1\n2\n3\n4\n5 1   :   30  2   :   30  ?   :   30  3   :   'A list \\t*A  \\\\ \" \\' '  4   :   A   list    * A    \\   \"   '    Creating web apps, games, and search engines all involve storing and working with different types of data. They do so using variables. A variable stores a piece of data, and gives it a specific name.  1 my_variable   =   10    You just stored a number in a variable. Numbers are one data type we use in programming. A second data type is called a boolean. A boolean is like a light switch. It can only have two values. Just like a light switch can only be on or off, a boolean can only be  True  or  False .  1\n2\n3 my_int   =   7  my_float   =   1.23  my_bool   =   True    Say  my_int = 7 . You can change the value of a variable by \u201creassigning\u201d it.  1\n2\n3\n4\n5 my_int   =   7  my_int   =   3  print   my_int    1 3   In Python, whitespace is used to structure code. Whitespace is important, so you have to be careful with how you use it.  1\n2\n3\n4\n5 def   spam (): \n     eggs   =   12 \n     return   eggs  print   spam ()    1 12   You\u2019ll get this error whenever your whitespace is off.  The interpreter runs your code line by line, and checks for any errors.  You probably saw us use the # sign a few times in earlier exercises. The # sign is for comments. A comment is a line of text that Python won\u2019t try to run as code. It\u2019s just for humans to read.  Comments make your program easier to understand. When you look back at your code or others want to collaborate with you, they can read your comments and easily figure out what your code does.  The  #  sign will only comment out a single line. While you could write a multi-line comment, starting each line with  # , that can be a pain.  Instead, for multi-line comments, you can include the whole block in a set of triple quotation marks:  1\n2\n3\n4 \"\"\"  Sipping from your cup 'til it runneth over,  Holy Grail.  \"\"\"    1 \"\\nSipping from your cup 'til it runneth over,\\nHoly Grail.\\n\"   Great! Now let\u2019s do some math. You can add, subtract, multiply, divide numbers.  1\n2\n3\n4\n5\n6\n7\n8 addition   =   72   +   23  subtraction   =   108   -   204  multiplication   =   108   *   0.5  division   =   108   /   9  count_to   =   72   +   56  print   count_to    1 128   All that math can be done on a calculator, so why use Python? Because you can combine math with other data types (e.g. booleans) and commands to create useful programs. Calculators just stick to numbers.  Create a new variable called eight and set it to 8, or the result of 2 to the power to 3 ( 2 ^ 3  oe  2 ** 3 ).  1\n2\n3 eggs   =   10   **   2  print   eggs    1 100   Our final operator is modulo. Modulo returns the remainder from a division. So, if you type  3 % 2 , it will return 1, because 2 goes into 3 evenly once, with 1 left over.  1\n2\n3 spam   =   5   %   4  print   spam    1 1",
            "title": "Python Syntax"
        },
        {
            "location": "/Codecademy Python/#tip-calculator",
            "text": "Now let\u2019s apply the concepts from the previous section to a real world example. You\u2019ve finished eating at a restaurant, and received this bill:   Cost of meal: $44.50  Restaurant tax: 6.75%  Tip: 15%   1\n2\n3\n4\n5\n6\n7\n8 meal   =   44.50  tax   =   6.75 / 100   tip   =   0.15  meal   =   meal   +   meal   *   tax  total   =   meal   +   meal   *   tip  print ( \" %.2f \" )   %   total    1 54.63",
            "title": "Tip Calculator"
        },
        {
            "location": "/Codecademy Python/#quiz-1",
            "text": "OK",
            "title": "Quiz 1"
        },
        {
            "location": "/Codecademy Python/#unit-2-strings-and-console-output",
            "text": "",
            "title": "UNIT 2, Strings and Console Output"
        },
        {
            "location": "/Codecademy Python/#strings-console-output",
            "text": "Another useful data type is the string. A string can contain letters, numbers, and symbols.  1\n2\n3 name   =   \"Ryan\"  age   =   \"19\"  food   =   \"cheese\"    Let\u2019s get a little practice in with strings.  1\n2\n3\n4\n5\n6\n7 caesar   =   \"Graham\"  praline   =   \"John\"  viking   =   \"Teresa\"  print   caesar  print   praline  print   viking    1\n2\n3 Graham\nJohn\nTeresa   1 'There' s   a   snake   in   my   boot ! '    1\n2\n3\n4   File \"<ipython-input-16-13621f01b99c>\", line 1\n    'There's a snake in my boot!'\n           ^\nSyntaxError: invalid syntax   This code breaks because Python thinks the apostrophe in \u2018There\u2019s\u2018 ends the string. We can use the backslash to fix the problem, like this:  1\n2 'There \\' s a snake in my boot!'  'This isn \\' t flying, this is falling with style!'    1 \"This isn't flying, this is falling with style!\"   Each character in a string is assigned a number. This number is called the index. Check out the diagram in the editor.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 c   =   \"cats\" [ 0 ]  n   =   \"Ryan\" [ 3 ]  \"\"\"  The string \"PYTHON\" has six characters,  numbered 0 to 5, as shown below:  +---+---+---+---+---+---+  | P | Y | T | H | O | N |  +---+---+---+---+---+---+    0   1   2   3   4   5  So if you wanted \"Y\", you could just type  \"PYTHON\"[1] (always start counting from 0!)  \"\"\"  fifth_letter   =   \"MONTY\" [ 4 ]  print   fifth_letter    1 Y   Now that we know how to store strings, let\u2019s see how we can change them using string methods. String methods let you perform specific tasks for strings. We\u2019ll focus on four string methods:   len()  lower()  upper()  str()   length, string  1\n2\n3\n4\n5\n6\n7\n8\n9 parrot   =   \"Norwegian Blue\"  print   len ( parrot )   # length, number of characters, including blanks  print   parrot . lower ()   # to lowercases  print   parrot . upper ()   # to uppercases  pi   =   3.14  print   str ( pi )   # number of character in the string    1\n2\n3\n4 14\nnorwegian blue\nNORWEGIAN BLUE\n3.14   len(string)  and  str(object) , but dot notation (such as \u201cString\u201d.upper()) for the rest.  Methods that use dot notation only work with strings.  On the other hand,  len()  and  str()  can work on other data types.  The area where we\u2019ve been writing our code is called the editor. The console is where the results of your code is shown.  print  simply displays your code in the console.  1\n2\n3\n4 print   \"Monty Python\"  the_machine_goes   =   \"Ping!\"  print   the_machine_goes    1\n2 Monty Python\nPing!   Now let\u2019s combine the two! The  +  operator between strings will \u2018add\u2019 them together, one after the other. Notice that there are spaces inside the quotation marks after Life and of so that we can make the combined string look like 3 words. Combining strings together like this is called concatenation. Let\u2019s try concatenating a few strings together now!  1\n2 print   \"Life \"   +   \"of \"   +   \"Brian\"  print   \"Spam and eggs\"    1\n2 Life of Brian\nSpam and eggs   Sometimes you need to combine a string with something that isn\u2019t a string. In order to do that, you have to convert the non-string into a string. he  str()  method converts non-strings into strings. In the above example, you convert the number 2 into a string and then you concatenate the strings together.  1 print   \"The value of pi is around \"   +   str ( 3.14 )    1 The value of pi is around 3.14   When you want to print a variable with a string, the  %  operator after a string is used to combine a string with variables. The  %  operator will replace a  %s  in the string with the string variable that comes after it.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 string_1   =   \"Camelot\"  string_2   =   \"place\"  print   \"Let's not go to  %s . 'Tis a silly  %s .\"   %   ( string_1 ,   string_2 )  name   =   raw_input ( \"What is your name?\" )  quest   =   raw_input ( \"What is your quest?\" )  color   =   raw_input ( \"What is your favorite color?\" )  print   \"Ah, so your name is  %s , your quest is  %s , \"  \\\n     \"and your favorite color is  %s .\"   %   ( name ,   quest ,   color )    1\n2\n3\n4\n5 Let's not go to Camelot. 'Tis a silly place.\nWhat is your name?Al\nWhat is your quest?Graal\nWhat is your favorite color?red\nAh, so your name is Al, your quest is Graal, and your favorite color is red.",
            "title": "Strings &amp; Console Output"
        },
        {
            "location": "/Codecademy Python/#date-and-time",
            "text": "A lot of times you want to keep track of when something happened. We can do so in Python using  datetime . Here we\u2019ll use datetime to print the date and time in a nice format.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 from   datetime   import   datetime   # all functions from datetime are imported  now   =   datetime . now ()  print   now  print   now . year  print   now . month  print   now . day  print   ' %s / %s / %s '   %   ( now . month ,   now . day ,   now . year )  print   ' %s : %s : %s '   %   ( now . hour ,   now . minute ,   now . second )  print   ' %s / %s / %s   %s : %s : %s '   %   ( now . month ,   now . day ,   now . year ,   now . hour ,   now . minute ,   now . second )    1\n2\n3\n4\n5\n6\n7 2016-10-18 14:02:03.661000\n2016\n10\n18\n10/18/2016\n14:2:3\n10/18/2016 14:2:3",
            "title": "Date and Time"
        },
        {
            "location": "/Codecademy Python/#quiz-2",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 time   =   datetime . now ()  print   time . day  time   =   datetime . now ()   #13:08:09  print   str ( time . hour )   +   \":\"   +   str ( time . minute )   +   \":\"   +   str ( time . second )  now   =   datetime . now ()   #2013-01-04 19:22:43  print   ' %s / %s / %s   %s : %s : %s '   %   ( now . day ,   now . month ,   now . year ,   now . hour ,   now . minute ,   now . second )  day   =   04    1\n2\n3 18\n14:2:11\n18/10/2016 14:2:11",
            "title": "Quiz 2"
        },
        {
            "location": "/Codecademy Python/#project-python-mad-libs",
            "text": "concatenate, variable  Python can be used for a variety of different tasks. In this project, we\u2019ll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story.  Mad Libs require:   Words from the reader (for the blank spaces)  A story to plug the words into   For this project, we\u2019ll provide you with the story (feel free to modify it), but it will be up to you to build a program that does the following:   Prompt the user for input  Print the entire Mad Libs story with the user\u2019s input in the right places       1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 \"\"\"  Python can be used for a variety of different tasks. In this project, we'll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story.  \"\"\"  print   \"The program is running.\"  name   =   raw_input ( \"Input a name? \" )  adj_one   =   raw_input ( \"Input an adjective? \" )  adj_two   =   raw_input ( \"Input another adjective? \" )  adj_three   =   raw_input ( \"Input a last adjective? \" )  verb_one   =   raw_input ( \"Input a verb? \" )  verb_two   =   raw_input ( \"Input another verb? \" )  verb_three   =   raw_input ( \"Input a last verb? \" )  noun_one   =   raw_input ( \"Input a noun? \" )  noun_two   =   raw_input ( \"Input another noun? \" )  noun_three   =   raw_input ( \"Input another noun? \" )  noun_four   =   raw_input ( \"Input a last noun? \" )  animal   =   raw_input ( \"Input an animal? \" )  food   =   raw_input ( \"Input a food? \" )  fruit   =   raw_input ( \"Input a fruit? \" )  number   =   raw_input ( \"Input a number? \" )  superhero   =   raw_input ( \"Input a superhero? \" )  country   =   raw_input ( \"Input a country? \" )  dessert   =   raw_input ( \"Input a dessert? \" )  year   =   raw_input ( \"Input a year? \" )  print   \"\"     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 The program is running.\nInput a name? Al\nInput an adjective? small\nInput another adjective? great\nInput a last adjective? yellow\nInput a verb? dig\nInput another verb? walk\nInput a last verb? eat\nInput a noun? spoon\nInput another noun? lamp\nInput another noun? table\nInput a last noun? pen\nInput an animal? dog\nInput a food? pasta\nInput a fruit? apple\nInput a number? 10\nInput a superhero? spiderman\nInput a country? mexico\nInput a dessert? apple pie\nInput a year? 2016   The template for the story.  1\n2\n3 STORY   =   \"This morning I woke up and felt  %s  because  %s  was going to finally  %s  over the big  %s   %s . On the other side of the  %s  were many  %s s protesting to keep  %s  in stores. The crowd began to  %s  to the rythym of the  %s , which made all of the  %s s very  %s .  %s  tried to  %s  into the sewers and found  %s  rats. Needing help,  %s  quickly called  %s .  %s  appeared and saved  %s  by flying to  %s  and dropping  %s  into a puddle of  %s .  %s  then fell asleep and woke up in the year  %s , in a world where  %s s ruled the world.\"  print   STORY   %   ( adj_one ,   name ,   verb_one ,   adj_two ,   noun_one ,   noun_two ,   animal ,   food ,   verb_two ,   noun_three ,   fruit ,   adj_three ,   name ,   verb_three ,   number ,   name ,   superhero ,   superhero ,   name ,   country ,   name ,   dessert ,   name ,   year ,   noun_four )    1 This morning I woke up and felt small because Al was going to finally dig over the big great spoon. On the other side of the lamp were many dogs protesting to keep pasta in stores. The crowd began to walk to the rythym of the table, which made all of the apples very yellow. Al tried to eat into the sewers and found 10 rats. Needing help, Al quickly called spiderman. spiderman appeared and saved Al by flying to mexico and dropping Al into a puddle of apple pie. Al then fell asleep and woke up in the year 2016, in a world where pens ruled the world.",
            "title": "Project Python Mad Libs"
        },
        {
            "location": "/Codecademy Python/#unit-3-conditionals-and-control-flow",
            "text": "",
            "title": "UNIT 3, Conditionals and Control Flow"
        },
        {
            "location": "/Codecademy Python/#conditionals-control-flow",
            "text": "Control flow gives us this ability to choose among outcomes based off what else is happening in the program.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 def   clinic (): \n\n     print   \"You've just entered the clinic!\" \n     print   \"Do you take the door on the left or the right?\" \n     answer   =   raw_input ( \"Type left or right and hit 'Enter'.\" ) . lower () \n     if   answer   ==   \"left\"   or   answer   ==   \"l\" : \n         print   \"This is the Verbal Abuse Room, you heap of parrot droppings!\" \n     elif   answer   ==   \"right\"   or   answer   ==   \"r\" : \n         print   \"Of course this is the Argument Room, I've told you that already!\" \n     else : \n         print   \"You didn't pick left or right! Try again.\" \n         clinic ()   # launch the function back  clinic ()    1\n2\n3\n4 You've just entered the clinic!\nDo you take the door on the left or the right?\nType left or right and hit 'Enter'.left\nThis is the Verbal Abuse Room, you heap of parrot droppings!   Comparators. There are six:   Equal to:  ==  Not equal to:  !=  Less than:  <  Less than or equal to:  <=  Greater than:  >  Greater than or equal to:  >=   Note that  ==  compares whether two things are equal, and  =  assigns a value to a variable.  1\n2\n3 bool_one   =   1   +   2  bool_two   =   3  bool_one   ==   bool_two   # true    1 True   Boolean operators compare statements and result in boolean values. There are three boolean operators:   and , which checks if both the statements are True;  or , which checks if at least one of the statements is True;  not , which gives the opposite of the statement.   1\n2\n3\n4\n5 bool_one   =   1   >   2   and   2   >   3   # false  bool_two   =   False   and   True   # false  bool_one   =   True   or   False   # true  bool_two   =   2   ==   2   or   2   ==   3   # true  bool_one   =   not   40   !=   41   # true    if  is a conditional statement.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 answer   =   \"Left\"  if   answer   ==   \"Left\" : \n     print   \"This is the Verbal Abuse Room, you heap of parrot droppings!\"  def   using_control_once (): \n\n     if   \"A\" == \"A\" : \n         return   \"Success #1\"  def   using_control_again (): \n\n     if   1 != 2 : \n         return   \"Success #2\"  print   using_control_once ()  print   using_control_again ()    1\n2\n3 This is the Verbal Abuse Room, you heap of parrot droppings!\nSuccess #1\nSuccess #2   The  else  statement complements the  if  statement.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 answer   =   \"'This but a scratch!\"  def   black_knight (): \n\n     if   answer   ==   \"'Tis but a scratch!\" : \n         return   True \n     else :              \n         return   False    # Make sure this returns False  def   french_soldier (): \n\n     if   answer   ==   \"Go away, or I shall taunt you a second time!\" : \n         return   True \n     else :              \n         return   False    # Make sure this returns False  print   black_knight ()  print   french_soldier ()    1\n2 False\nFalse   elif  is short for \u2018else if\u2019. It means exactly what it sounds like: \u201cotherwise, if the following expression is true, do this!\u201d   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 def   greater_less_equal_5 ( answer ): \n\n     if   answer   >   5 : \n         return   1 \n     elif   answer   <   5 :           \n         return   - 1 \n     else : \n         return   0  print   greater_less_equal_5 ( 4 )  print   greater_less_equal_5 ( 5 )  print   greater_less_equal_5 ( 6 )  def   the_flying_circus (): \n\n     if   1   !=   0   and   3   >   2 : \n         return   True \n     elif   0   ==   0   or   2   ==   2 : \n         return   False \n     else : \n         return   True  print   the_flying_circus ()    1\n2\n3\n4 -1\n0\n1\nTrue",
            "title": "Conditionals &amp; Control Flow"
        },
        {
            "location": "/Codecademy Python/#pyglatin",
            "text": "Now let\u2019s take what we\u2019ve learned so far and write a Pig Latin translator. Pig Latin is a language game, where you move the first letter of the word to the end and add \u201cay.\u201d So \u201cPython\u201d becomes \u201cythonpay.\u201d    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 print   'Welcome to the Pig Latin Translator!'  original   =   raw_input ( \"Enter a word:\" )  if   len ( original )   >   0   and   original . isalpha (): \n     print   original  else : \n     print   \"empty\"  pyg   =   'ay'  original   =   raw_input ( 'Enter a word: ' )  if   len ( original )   >   0   and   original . isalpha (): \n     word   =   original . lower () \n     first   =   word [ 0 ] \n     new_word   =   word   +   first   +   pyg \n     new_word   =   new_word [ 1 : len ( new_word )] \n     print   new_word  else : \n     print   'empty'    1\n2\n3\n4\n5 Welcome to the Pig Latin Translator!\nEnter a word:translator\ntranslator\nEnter a word: radiator\nadiatorray",
            "title": "PygLatin"
        },
        {
            "location": "/Codecademy Python/#quiz-3",
            "text": "Takeaway: there no limits to the number of  elif .",
            "title": "Quiz 3"
        },
        {
            "location": "/Codecademy Python/#project-area-calculator",
            "text": "Python is especially useful for doing math and can be used to automate many calculations. In this project, you\u2019ll create a calculator than can compute the area of a given shape, as selected by the user. The calculator will be able to determine the area of the following shapes:   Circle  Triangle   The program should do the following:   Prompt the user to select a shape  Depending on the shape the user selects, calculate the area of that shape  Print the area of that shape to the user   Python is especially useful for doing math and can be used to automate many calculations.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46 from   math   import   pi  from   time   import   sleep  from   datetime   import   datetime  now   =   datetime . now ()   # from datetime  print   \"The calculator is starting up at:  \\n \" + str ( now )  print   \" \\n Curently:  %s / %s / %s   %s : %s \"   % ( now . month ,   now . day ,   now . year ,   now . hour ,   now . minute )  sleep ( 1 )   # pause 1 sec  hint   =   \"Don't forget to include the correct units!\"  from   math   import   pi  from   time   import   sleep  def   question (): \n\n         option   =   raw_input ( \"Enter C for Circle or T for Triangle: \" ) \n         if   option . upper ()   ==   'C'   or   option . upper ()   ==   'CIRCLE' : \n             print   circle () \n         elif   option . upper ()   ==   'T'   or   option . upper ()   ==   'TRIANGLE' : \n             print   triangle () \n         else : \n             print   \"Please answer with a C or T\" ,   question ()   #!!!!!!  def   circle (): \n\n     radius   =   float ( raw_input ( \"Enter radius: \" )) \n\n     areac   =   pi   *   ( radius   **   2 ) \n     print   \"The pie is baking...\" \n     sleep ( 1 ) \n     return ( str ( \" %.2f \"   %   areac ))   # !!!!!  def   triangle (): \n\n     base   =   float ( raw_input ( \"Enter base: \" )) \n     height   =   float ( raw_input ( \"Enter height: \" )) \n     areat   =   base   *   height   /   2 \n     print   \"Uni Bi Tri...\" \n     sleep ( 1 ) \n     return ( str ( \" %.2f \"   %   areat ))   # !!!!!  question ()    1\n2\n3\n4\n5\n6\n7\n8\n9 The calculator is starting up at: \n2016-10-18 14:05:19.204000\n\nCurently: 10/18/2016 14:5\nEnter C for Circle or T for Triangle: T\nEnter base: 10\nEnter height: 5\nUni Bi Tri...\n25.00",
            "title": "Project Area Calculator"
        },
        {
            "location": "/Codecademy Python/#unit-4-functions",
            "text": "",
            "title": "UNIT 4, Functions"
        },
        {
            "location": "/Codecademy Python/#functions",
            "text": "You might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it\u2019s much cleaner to define a function, which can then be used repeatedly.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 def   tax ( billa ): \n\n     billb   =   float ( billa )   *   1.08 \n     return   billb  def   tip ( billc ): \n\n     billd   =   float ( billc )   *   1.15 \n     return   billd  meal_cost   =   100.00  meal_with_tax   =   tax ( meal_cost )  print ( \"With tax:  %.2f \"   %   meal_with_tax )   # !!!!!  meal_with_tip   =   tip ( meal_with_tax )  print ( \"With tip:  %.2f \"   %   meal_with_tip )  # The header, the comment, the body:  def   spam (): \n\n     \"\"\"print the string \"Eggs!\" to the console.\"\"\" \n     print   \"Eggs!\"    1\n2 With tax: 108.00\nWith tip: 124.20   After defining a function, it must be called to be implemented.  1\n2\n3\n4\n5\n6\n7 def   square ( n ): \n\n     \"\"\"Returns the square of a number.\"\"\" \n     squared   =   n   **   2 \n     return ( \" %d  squared is  %d .\"   %   ( n ,   squared ))  print   square ( 10 )    1 10 squared is 100.   Functions can be much more powerful than that. For example, a function can call another function.  1\n2\n3\n4\n5\n6\n7\n8\n9 n   =   1  def   one_good_turn ( n ): \n\n     return   n   +   1  def   deserves_another ( m ): \n\n     return   one_good_turn ( m )   +   2   # calling a function already defined    Again.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 def   cube ( number ): \n\n     return   number   **   3  def   by_three ( number ): \n\n     if   number   %   3   ==   0 :     \n         return   cube ( number ) \n     else : \n         return   False  by_three ( 3 )    1 27   Import modules to use custom functions.  1\n2\n3 import   math  print   math . sqrt ( 25 )    1 5.0   However, we only really needed the sqrt function, and it can be frustrating to have to keep typing  math.sqrt() . It\u2019s possible to import only certain variables or functions from a given module (like  pi  above). Pulling in just a single function from a module is called a function import, and it\u2019s done with the from keyword.  1\n2 from   math   import   sqrt   # module 'math', function 'sqrt'  from   math   import   pi   # module 'math', variable 'pi'    Universal  import  can handle all of the variables and functions in a module to avoid to constantly type  math .  1 from   math   import   *    Universal  import  may look great on the surface, but they\u2019re not a good idea for one very important reason: they fill your program with a ton of variable and function names without the safety of those names still being associated with the module(s) they came from.  dir(), dir  1\n2\n3\n4 import   math  everything   =   dir ( math )  print   everything    1 ['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']   For these reasons, it\u2019s best to stick with either  import   module  and type  module . name  or just import specific variables and functions from various modules as needed.  Let\u2019s look at some of the functions that are built in to Python (no modules required!).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 def   distance_from_zero ( arg ): \n\n     return   abs ( arg )  def   biggest_number ( arg1 ,   arg2 ): \n\n     return   min ( arg1 ,   arg2 )  def   smallest_number ( * args ): \n\n     return   min ( args )  print   distance_from_zero ( - 10 )    1 print   biggest_number ( - 10 ,   - 5 )    1 -10   1 print   biggest_number ( - 10 ,   - 5 ,   5 ,   10 )   # test    1\n2\n3\n4\n5\n6\n7\n8\n9 ---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-24-40abbc687778> in <module>()\n----> 1 print biggest_number(-10, -5, 5, 10) # test\n\n\nTypeError: biggest_number() takes exactly 2 arguments (4 given)   1\n2\n3 print   smallest_number ( 1 ,   2 )  print   smallest_number ( 3 ,   4 ,   5 ,   6 ,   7 )  print   smallest_number ( - 10 ,   - 5 ,   5 ,   10 )    1\n2\n3 1\n3\n-10    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 maximum   =   max ( - 5 ,   3 ,   5 ,   10 )  print   maximum  minimum   =   min ( - 3 ,   - 5 )  print   minimum  absolute   =   abs ( - 42 )  print   absolute  print   type ( 42 )   # <type 'int'>  print   type ( 4.2 )   # <type 'float'>  print   type ( 'spam' )   # <type 'str'>    1\n2\n3\n4\n5\n6 10\n-5\n42\n<type 'int'>\n<type 'float'>\n<type 'str'>",
            "title": "Functions"
        },
        {
            "location": "/Codecademy Python/#taking-a-vacation",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 def   hotel_cost ( nights ): \n\n     return   140   *   nights  def   plane_ride_cost ( city ): \n\n     if   city   ==   \"Charlotte\" : \n         return   183 \n     elif   city   ==   \"Tampa\" : \n         return   220 \n     elif   city   ==   \"Pittsburgh\" : \n         return   222 \n     elif   city   ==   \"Los Angeles\" : \n         return   475  def   rental_car_cost ( days ): \n\n     cost   =   days   *   40 \n     if   days   >=   7 : \n         cost   -=   50 \n     elif   days   >=   3   and   days < 7 : \n         cost   -=   20 \n     else : \n         cost \n     return   cost  def   trip_cost ( city ,   days ,   spending_money ): \n\n     return   rental_car_cost ( days )   +   hotel_cost ( days ) + plane_ride_cost ( city )   +   spending_money  print   trip_cost ( \"Los Angeles\" ,   5 ,   600 )    1 1955",
            "title": "Taking a Vacation"
        },
        {
            "location": "/Codecademy Python/#quiz-4",
            "text": "OK",
            "title": "Quiz 4"
        },
        {
            "location": "/Codecademy Python/#project-number-guess",
            "text": "Wanna play a game? In this project, we\u2019ll build a program that rolls a pair of dice and asks the user to guess a number. Based on the user\u2019s guess, the program should determine a winner. If the user\u2019s guess is greater than the total value of the dice roll, they win! Otherwise, the computer wins.  The program should do the following:   Randomly roll a pair of dice  Add the values of the roll  Ask the user to guess a number  Compare the user\u2019s guess to the total value  Decide a winner (the user or the program)  Inform the user who the winner is    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 from   random   import   randint  from   time   import   sleep  def   get_user_guess (): \n\n     user_guess   =   int ( raw_input ( \"Guess a number: \" )) \n     return   user_guess  def   roll_dice ( number_of_sides ): \n\n     first_roll   =   randint ( 1 ,   number_of_sides ) \n     second_roll   =   randint ( 1 ,   number_of_sides ) \n     max_value   =   number_of_sides   *   2 \n     print   \"The maximum value is: \" + str ( max_value ) \n     sleep ( 1 ) \n     user_guess   =   get_user_guess () \n     if   user_guess   >   max_value : \n         print   \"Your guess is higher than the max allowed (\" + str ( max_value ) + \"). Please, take another guess.\" \n         return   # exit the if block is condition met \n     else : \n         print   \"Rolling...\" \n         sleep ( 1 ) \n         print   \"First roll is:  %d \"   %   ( first_roll ) \n         sleep ( 1 ) \n         print   \"Second roll is:  %d \"   %   ( second_roll ) \n         total_roll   =   first_roll   +   second_roll \n         print   \"Result...\" \n         sleep ( 1 ) \n         if   user_guess   >   total_roll : \n             print   \"You win since your guess, \" + str ( user_guess ) + \", is greater than the total roll, \" + str ( total_roll ) \n             return   # exit \n         else : \n             print   \"You lose!\" \n             return   # exit  roll_dice ( 6 )    1\n2\n3\n4\n5\n6\n7 The maximum value is: 12\nGuess a number: 5\nRolling...\nFirst roll is: 1\nSecond roll is: 2\nResult...\nYou win since your guess, 5, is greater than the total roll, 3",
            "title": "Project Number Guess"
        },
        {
            "location": "/Codecademy Python/#unit-5-lists-dictionaries",
            "text": "",
            "title": "UNIT 5, Lists &amp; Dictionaries"
        },
        {
            "location": "/Codecademy Python/#lists-and-dictionaries",
            "text": "Lists are a datatype you can use to store a collection of different pieces of information as a sequence under a single variable name. (Datatypes you\u2019ve already learned about include strings, numbers, and booleans.)  1\n2\n3\n4\n5\n6\n7\n8\n9 zoo_animals   =   [ \"pangolin\" ,   \"cassowary\" ,   \"sloth\" ,   \"kangourou\" ];  # You can access an individual item on the list by its index. An index is like an address that identifies the item's place in the list. The index appears directly after the list name, in between brackets, like this: list_name[index].  if   len ( zoo_animals )   >   3 : \n     print   \"The first animal at the zoo is the \"   +   zoo_animals [ 0 ] \n     print   \"The second animal at the zoo is the \"   +   zoo_animals [ 1 ] \n     print   \"The third animal at the zoo is the \"   +   zoo_animals [ 2 ] \n     print   \"The fourth animal at the zoo is the \"   +   zoo_animals [ 3 ]    1\n2\n3\n4 The first animal at the zoo is the pangolin\nThe second animal at the zoo is the cassowary\nThe third animal at the zoo is the sloth\nThe fourth animal at the zoo is the kangourou   1\n2\n3\n4\n5\n6 numbers   =   [ 5 ,   6 ,   7 ,   8 ]  print   \"Adding the numbers at indices 0 and 2...\"  print   numbers [ 0 ]   +   numbers [ 2 ]  print   \"Adding the numbers at indices 1 and 3...\"  print   numbers [ 1 ]   +   numbers [ 3 ]    1\n2\n3\n4 Adding the numbers at indices 0 and 2...\n12\nAdding the numbers at indices 1 and 3...\n14   A list doesn\u2019t have to have a fixed length. You can add items to the end of a list any time you like!   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 suitcase   =   []  suitcase . append ( \"sunglasses\" )  suitcase . append ( \"calculator\" )  suitcase . append ( \"screen\" )  suitcase . append ( \"mouse\" )  list_length   =   len ( suitcase )   # Set this to the length of suitcase  print   list_length  print   \"There are  %d  items in the suitcase.\"   %   ( list_length )  print   suitcase    1\n2\n3 4\nThere are 4 items in the suitcase.\n['sunglasses', 'calculator', 'screen', 'mouse']   1\n2\n3\n4\n5 suitcase   =   [ \"sunglasses\" ,   \"hat\" ,   \"passport\" ,   \"laptop\" ,   \"suit\" ,   \"shoes\" ]  first    =   suitcase [ 0 : 2 ]   # The first and second items (index zero and one)  middle   =   suitcase [ 2 : 4 ]   # Third and fourth items (index two and three)  last   =   suitcase [ 4 : 6 ]   # The last two items (index four and five)    You can slice a string exactly like a list! In fact, you can think of strings as lists of characters: each character is a sequential item in the list, starting from index 0.  1\n2\n3\n4\n5 animals   =   \"catdogfrog\"  cat    =   animals [: 3 ]   # The first three characters of animals  dog    =   animals [ 3 : 6 ]   # The fourth through sixth characters  frog   =   animals [ 6 :]   # From the seventh character to the end    Sometimes you need to search for an item in a list.  1\n2\n3\n4\n5\n6\n7\n8\n9 animals   =   [ \"aardvark\" ,   \"badger\" ,   \"duck\" ,   \"emu\" ,   \"fennec fox\" ]  duck_index   =   animals . index ( \"duck\" )   # Use index() to find \"duck\"  print   duck_index  animals . insert ( duck_index , \"cobra\" )  print   animals   # Observe what prints after the insert  operation    1\n2 2\n['aardvark', 'badger', 'cobra', 'duck', 'emu', 'fennec fox']   If you want to do something with every item in the list, you can use a for loop.  1\n2\n3\n4 my_list   =   [ 1 , 9 , 3 , 8 , 5 , 7 ]  for   number   in   my_list : \n     print   2   *   number    1\n2\n3\n4\n5\n6 2\n18\n6\n16\n10\n14   If your list is a jumbled mess, you may need to  sort()  it.  1\n2\n3\n4\n5\n6\n7\n8\n9 start_list   =   [ 5 ,   3 ,   1 ,   2 ,   4 ]  square_list   =   []  for   var   in   start_list : \n     square_list . append ( var   **   2 )  square_list . sort ()  print   square_list    1 [1, 4, 9, 16, 25]   A dictionary is similar to a list, but you access values by looking up a key instead of an index. A key can be any string or number. Dictionaries are great for things like phone books (pairing a name with a phone number), login pages (pairing an e-mail address with a username), and more!  1\n2\n3\n4\n5 residents   =   { 'Puffin'   :   104 ,   'Sloth'   :   105 ,   'Burmese Python'   :   106 }  print   residents [ 'Puffin' ]   # Prints Puffin's room number  print   residents [ 'Sloth' ]  print   residents [ 'Burmese Python' ]    1\n2\n3 104\n105\n106   An empty pair of curly braces  {}  is an empty dictionary, just like an empty pair of  []  is an empty list.  Like Lists, Dictionaries are \u2018mutable\u2019. This means they can be changed after they are created. One advantage of this is that we can add new key-value pairs to the dictionary after it is created.  The length  len()  of a dictionary is the number of key-value pairs it has. Each pair counts only once, even if the value is a list.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 menu   =   {}   # Empty dictionary  menu [ 'Chicken Alfredo' ]   =   14.50   # Adding new key-value pair  print   menu [ 'Chicken Alfredo' ]  menu [ 'General Tao' ]   =   12.00  menu [ 'Pad Thai' ]   =   10.50  menu [ 'Poutine' ]   =   9.00  print   \"There are \"   +   str ( len ( menu ))   +   \" items on the menu.\"  print   menu  for   key ,   value   in   menu . iteritems ():   # !!!!! \n     print   key ,   value  for   key ,   value   in   menu . iteritems ():   # !!!!! \n     print   key  for   key ,   value   in   menu . iteritems ():   # !!!!! \n     print   value     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 14.5\nThere are 4 items on the menu.\n{'Chicken Alfredo': 14.5, 'General Tao': 12.0, 'Poutine': 9.0, 'Pad Thai': 10.5}\nChicken Alfredo 14.5\nGeneral Tao 12.0\nPoutine 9.0\nPad Thai 10.5\nChicken Alfredo\nGeneral Tao\nPoutine\nPad Thai\n14.5\n12.0\n9.0\n10.5   Because dictionaries are mutable, they can be changed in many ways. Items can be removed from a dictionary with the  del()  command.  1\n2\n3\n4\n5\n6\n7\n8\n9 # key - animal_name : value - location   zoo_animals   =   {  'Unicorn'   :   'Cotton Candy House' ,  'Sloth'   :   'Rainforest Exhibit' ,  'Bengal Tiger'   :   'Jungle House' ,  'Atlantic Puffin'   :   'Arctic Exhibit' ,  'Rockhopper Penguin'   :   'Arctic Exhibit'  }    A dictionary (or list) declaration may break across multiple lines  Removing the \u2018Unicorn\u2019 entry. (Unicorns are incredibly expensive.)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 zoo_animals   =   {  'Unicorn'   :   'Cotton Candy House' ,  'Sloth'   :   'Rainforest Exhibit' ,  'Bengal Tiger'   :   'Jungle House' ,  'Atlantic Puffin'   :   'Arctic Exhibit' ,  'Rockhopper Penguin'   :   'Arctic Exhibit'  }  del   zoo_animals [ 'Unicorn' ]  del   zoo_animals [ 'Sloth' ]  del   zoo_animals [ 'Bengal Tiger' ]  zoo_animals [ 'Rockhopper Penguin' ]   =   'Cotton Candy House'  print   zoo_animals    1 {'Atlantic Puffin': 'Arctic Exhibit', 'Rockhopper Penguin': 'Cotton Candy House'}   Sometimes you need to remove something from a list.  1\n2\n3 backpack   =   [ 'xylophone' ,   'dagger' ,   'tent' ,   'bread loaf' ]  backpack . remove ( 'dagger' )    We can create a dictionary that holds many types of values.  extract, sort, remove   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 inventory   =   { \n     'gold'   :   500 , \n     'pouch'   :   [ 'flint' ,   'twine' ,   'gemstone' ],   # Assigned a new list to 'pouch' key \n     'backpack'   :   [ 'xylophone' , 'dagger' ,   'bedroll' , 'bread loaf' ]  }  print   inventory  # Adding a key 'burlap bag' and assigning a list to it  inventory [ 'burlap bag' ]   =   [ 'apple' ,   'small ruby' ,   'three-toed sloth' ]  print   inventory    1\n2 {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'gold': 500}\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}   1\n2\n3\n4 # Sorting the list found under the key 'pouch'  inventory [ 'pouch' ] . sort ()   print   inventory    1 {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}   1\n2\n3 inventory [ 'pocket' ]   =   [ 'seashell' ,   'strange berry' ,   'lint' ]  print   inventory    1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}   1\n2\n3 inventory [ 'backpack' ] . sort ()  print   inventory    1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'dagger', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}   1\n2\n3 inventory [ 'backpack' ] . remove ( 'dagger' )  print   inventory    1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}   1\n2\n3 inventory [ 'gold' ]   +=   50  print   inventory    1 {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 550}",
            "title": "Lists and Dictionaries"
        },
        {
            "location": "/Codecademy Python/#a-day-at-the-supermarket",
            "text": "for  loops allow us to iterate through all of the elements in a list from the left-most (or zeroth element) to the right-most element.  1\n2\n3\n4 names   =   [ \"Adam\" ,   \"Alex\" ,   \"Mariah\" ,   \"Martine\" ,   \"Columbus\" ]  for   items   in   names : \n     print   items    1\n2\n3\n4\n5 Adam\nAlex\nMariah\nMartine\nColumbus   You can also use a for loop on a dictionary to loop through its keys.  1\n2\n3\n4\n5\n6\n7\n8\n9 webster   =   { \n     \"Aardvark\"   :   \"A star of a popular children's cartoon show.\" , \n     \"Baa\"   :   \"The sound a goat makes.\" , \n     \"Carpet\" :   \"Goes on the floor.\" , \n     \"Dab\" :   \"A small amount.\"  }  for   item   in   webster : \n     print   webster [ item ]    1\n2\n3\n4 A star of a popular children's cartoon show.\nGoes on the floor.\nA small amount.\nThe sound a goat makes.   While looping, you may want to perform different actions depending on the particular item in the list.  1\n2\n3\n4\n5 a   =   [ 0 ,   1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ]  for   item   in   a : \n     if   item   %   2   ==   0 : \n         print   item    1\n2\n3\n4\n5\n6\n7 0\n2\n4\n6\n8\n10\n12   Functions can also take lists as inputs and perform various operations on those lists.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 def   count_small ( numbers ): \n\n     total   =   0 \n     for   n   in   numbers : \n         if   n   <   10 : \n             total   =   total   +   1 \n     return   total  lost   =   [ 4 ,   8 ,   15 ,   16 ,   23 ,   42 ]  small   =   count_small ( lost )  print   small    1 2   You can loop through strings the same way you loop through lists!  1\n2\n3\n4\n5\n6\n7\n8\n9 for   letter   in   \"Codecademy\" : \n     print   letter  word   =   \"Programming is fun!\"  for   letter   in   word : \n     # Only print out the letter i \n     if   letter   ==   \"i\" : \n         print   letter     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 C\no\nd\ne\nc\na\nd\ne\nm\ny\ni\ni   You are now the proud owner of your very own Codecademy brand supermarket. For paperwork and accounting purposes, let\u2019s record the total value of your inventory.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 prices   =   { \n     \"banana\"   :   4 , \n     \"apple\"   :   2 , \n     \"orange\"   :   1.5 , \n     \"pear\"   :   3 \n     }  stock   =   { \n     \"banana\"   :   6 , \n     \"apple\"   :   0 , \n     \"orange\"   :   32 , \n     \"pear\"   :   15 \n     }  total   =   0  for   item   in   prices : \n     print   item   # print key \n     print   \"price:  %s \"   %   prices [ item ]   # print value \n     print   \"stock:  %s \"   %   stock [ item ] \n     print   prices [ item ] * stock [ item ] \n     total   +=   prices [ item ] * stock [ item ]  print   total     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 orange\nprice: 1.5\nstock: 32\n48.0\npear\nprice: 3\nstock: 15\n45\nbanana\nprice: 4\nstock: 6\n24\napple\nprice: 2\nstock: 0\n0\n117.0   In order for customers to order online, we are going to have to make a consumer interface.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 shopping_list   =   [ \"banana\" ,   \"orange\" ,   \"apple\" ]  stock   =   { \n     \"banana\"   :   6 , \n     \"apple\"   :   0 , \n     \"orange\"   :   32 , \n     \"pear\"   :   15  }  prices   =   { \n     \"banana\"   :   4 , \n     \"apple\"   :   2 , \n     \"orange\"   :   1.5 , \n     \"pear\"   :   3  }  def   compute_bill ( food ): \n\n     total   =   0 \n     for   item   in   food : \n         if   stock [ item ]   >   0 : \n             total   +=   prices [ item ]   # you only pick one from the stock! \n             stock [ item ]   =   stock [ item ]   -   1   # the stock goes down by 1 \n     print   total \n     return   food  print   compute_bill ( shopping_list )    1\n2 5.5\n['banana', 'orange', 'apple']",
            "title": "A Day at the Supermarket"
        },
        {
            "location": "/Codecademy Python/#quiz-5",
            "text": "OK",
            "title": "Quiz 5"
        },
        {
            "location": "/Codecademy Python/#project-rock-paper-scissors",
            "text": "In this project, we\u2019ll build Rock-Paper-Scissors!  The program should do the following:   Prompt the user to select either Rock, Paper, or Scissors  Instruct the computer to randomly select either Rock, Paper, or Scissors  Compare the user\u2019s choice and the computer\u2019s choice  Determine a winner (the user or the computer)  Inform the user who the winner is    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50 from   random   import   randint  from   time   import   sleep  options   =   [ \"R\" ,   \"P\" ,   \"S\" ]  LOSE   =   \"You lost!\"   # constant, uppercase  WIN   =   \"You win!\"  def   decide_winner ( user_choice ,   computer_choice ): \n\n     print ( \"You picked: \" + str ( user_choice )) \n     print   \"Computer selecting...\" \n\n     sleep ( 1 ) \n\n     print ( \"Computer picks: \" + str ( computer_choice )) \n\n     user_choice_index   =   options . index ( user_choice ) \n     computer_choice_index   =   options . index ( computer_choice )   # !!!!! \n\n     if   user_choice_index   ==   computer_choice_index : \n         print   \"Tie!\" \n     elif   user_choice_index   ==   0   and   computer_choice_index   ==   2 : \n         print   WIN \n     elif   user_choice_index   ==   1   and   computer_choice_index   ==   0 : \n         print   WIN \n     elif   user_choice_index   ==   2   and   computer_choice_index   ==   1 : \n         print   WIN \n     elif   user_choice_index   >   2 : \n         print   \"Invalid choice!!!\" \n     else : \n         print   LOSE  def   play_RPS (): \n\n     print   \"Let's pay Rock-Paper-Scissors\" \n\n     user_choice   =   raw_input ( \"Select R for Rock, P for Paper, or S for Scissors: \" ) \n\n     sleep ( 1 ) \n\n     user_choice   =   user_choice . upper () \n     # computer_choice = options[randint(0,2)]  \n     # pull out an element from a list, the 1st (0) out of 3 (2) \n\n     computer_choice   =   options [ randint ( 0 , len ( options ) - 1 )]  \n     # This will ensure that if we ever add more options to the game, we won't have to change this line of code. \n\n     decide_winner ( user_choice ,   computer_choice )  play_RPS ()    1\n2\n3\n4\n5\n6 Let's pay Rock-Paper-Scissors\nSelect R for Rock, P for Paper, or S for Scissors: r\nYou picked: R\nComputer selecting...\nComputer picks: S\nYou win!",
            "title": "Project Rock, Paper, Scissors"
        },
        {
            "location": "/Codecademy Python/#unit-6-student-becomes-the-teacher",
            "text": "",
            "title": "UNIT 6, Student Becomes the Teacher"
        },
        {
            "location": "/Codecademy Python/#student-becomes-the-teacher",
            "text": "Make a gradebook for all of your students.  First, create 3 dictionaries.  Second, add names, marks\u2026   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 lloyd   =   { \n     \"name\"   :   \"Lloyd\" , \n     \"homework\"   :   [ 90.0 ,   97.0 ,   75.0 ,   92.0 ], \n     \"quizzes\"   :   [ 88.0 ,   40.0 ,   94.0 ], \n     \"tests\"   :   [ 75.0 ,   90.0 ]  }  alice   =   { \n     \"name\" :   \"Alice\" , \n     \"homework\"   :   [ 100.0 ,   92.0 ,   98.0 ,   100.0 ], \n     \"quizzes\"   :   [ 82.0 ,   83.0 ,   91.0 ], \n     \"tests\"   :   [ 89.0 ,   97.0 ]  }  tyler   =   { \n     \"name\"   :   \"Tyler\" , \n     \"homework\"   :   [ 0.0 ,   87.0 ,   75.0 ,   22.0 ], \n     \"quizzes\"   :   [ 0.0 ,   75.0 ,   78.0 ], \n     \"tests\"   :   [ 100.0 ,   100.0 ]  }    Third, make a list.  1\n2\n3\n4\n5\n6\n7 students =   [ lloyd ,   alice ,   tyler ]  cases   =   [ \"homework\" ,   \"quizzes\" ,   \"tests\" ]  w_calc   =   [ 0.10 ,   0.30 ,   0.60 ]  all_average   =   0.0    Four, print out.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 print   \" \\n Students' Grades\" . upper ()  print   \"\"  for   student   in   students : \n     print   student [ \"name\" ] . upper () \n     print   \"Homework\" \n     print   student [ \"homework\" ] \n     print   \"Quizzes\" \n     print   student [ \"quizzes\" ] \n     print   \"Tests\" \n     print   student [ \"tests\" ] \n     print   \"\"     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 STUDENTS' GRADES\n\nLLOYD\nHomework\n[90.0, 97.0, 75.0, 92.0]\nQuizzes\n[88.0, 40.0, 94.0]\nTests\n[75.0, 90.0]\n\nALICE\nHomework\n[100.0, 92.0, 98.0, 100.0]\nQuizzes\n[82.0, 83.0, 91.0]\nTests\n[89.0, 97.0]\n\nTYLER\nHomework\n[0.0, 87.0, 75.0, 22.0]\nQuizzes\n[0.0, 75.0, 78.0]\nTests\n[100.0, 100.0]   Compute averages.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 def   average ( numbers ): \n\n     total   =   sum ( numbers ) \n     temp   =   float ( total )   /   len ( numbers ) \n     return   temp  print   \"Students' Averages\" . upper ()  print   \"\"  for   c   in   cases : \n     cc   =   c . upper () \n     print   cc \n     for   student   in   students : \n         numbers   =   student [ c ] \n         calc   =   round ( average ( numbers ), 1 ) \n         print   student [ \"name\" ] \n         print   calc \n     print   \"\"     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 STUDENTS' AVERAGES\n\nHOMEWORK\nLloyd\n88.5\nAlice\n97.5\nTyler\n46.0\n\nQUIZZES\nLloyd\n74.0\nAlice\n85.3\nTyler\n51.0\n\nTESTS\nLloyd\n82.5\nAlice\n93.0\nTyler\n100.0   Compute weighted averages.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51 def   w_average ( marks ): \n\n     #w_calc = [0.10, 0.30, 0.60] \n     s_calc   =   0 \n     w   =   0 \n     while   w   <   len ( w_calc ): \n         s_calc   +=   w_calc [ w ]   *   marks [ w ] \n         w   +=   1 \n     return   s_calc  def   get_letter_grade ( score ): \n\n     if   score   >=   90 : \n         return   \"A\" \n     elif   score   >=   80 : \n         return   \"B\" \n     elif   score   >=   70 : \n         return   \"C\" \n     elif   score   >=   60 : \n         return   \"D\" \n     else : \n         return   \"F\"  def   get_class_average ( ind ): \n     class_total   =   round ( ind   /   len ( students ),   1 ) \n     return   class_total  print   \"Students' Weighted Average\" . upper ()  print   \" Ponderation [Homeworks, Quizzes, Tests]: [\" + str ( float ( w_calc [ 0 ]) * 100 ) + \", \" + str ( float ( w_calc [ 1 ]) * 100 ) + \", \" + str ( float ( w_calc [ 2 ]) * 100 ) + \"]\"  print   \"\"  for   student   in   students : \n     print ( student [ \"name\" ]   +   \"'s marks are:\" ) . upper () \n     l_calc   =   [] \n     for   c   in   cases :     \n         numbers   =   student [ c ] \n         calc   =   round ( average ( numbers ), 1 ) \n         l_calc . append ( calc ) \n     print   l_calc \n     print ( \"For a weighted average of:\" ) \n     ind_average   =   round ( w_average ( l_calc ), 1 ) \n     print   ind_average \n     print ( \"Standing for a:\" ) \n     print   get_letter_grade ( ind_average ) \n     all_average   +=   ind_average \n     print   \"\"  print ( \"Finally, The class average is:\" ) . upper ()  print   get_class_average ( all_average )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 STUDENTS' WEIGHTED AVERAGE\n Ponderation [Homeworks, Quizzes, Tests]: [10.0, 30.0, 60.0]\n\nLLOYD'S MARKS ARE:\n[88.5, 74.0, 82.5]\nFor a weighted average of:\n80.5\nStanding for a:\nB\n\nALICE'S MARKS ARE:\n[97.5, 85.3, 93.0]\nFor a weighted average of:\n91.1\nStanding for a:\nA\n\nTYLER'S MARKS ARE:\n[46.0, 51.0, 100.0]\nFor a weighted average of:\n79.9\nStanding for a:\nC\n\nFINALLY, THE CLASS AVERAGE IS:\n83.8",
            "title": "Student Becomes the Teacher"
        },
        {
            "location": "/Codecademy Python/#unit-7-lists-and-functions",
            "text": "",
            "title": "UNIT 7, Lists and Functions"
        },
        {
            "location": "/Codecademy Python/#lists-and-functions",
            "text": "What you can do with a list: extract, add, append, remove, pop out, delete.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 n   =   [ 1 ,   3 ,   5 ]  print   n [ 1 ]  n [ 1 ]   =   n   [ 1 ]   *   5  print   n  # Add elements  n . append ( 4 )  print   n  # Remove elements  n . pop ( 0 )  print   n    1\n2\n3\n4 3\n[1, 15, 5]\n[1, 15, 5, 4]\n[15, 5, 4]   What you can do with functions.  Multiply, divide.  1\n2\n3\n4\n5\n6\n7\n8 number   =   5  def   my_function ( x ): \n\n     return   x   *   3  # Print my_function(5)  print   my_function ( number )    1 15   Add, substract.  1\n2\n3\n4\n5\n6\n7\n8 m   =   5  n   =   13  def   add_function ( x , y ): \n\n     return   x   +   y  print   add_function ( m ,   n )    1 18   Concatenate.  1\n2\n3\n4\n5\n6\n7 n   =   \"Hello\"  def   string_function ( s ): \n\n     return   s   +   \" world\"  print   string_function ( n )    1 Hello world   Show all.  1\n2\n3\n4\n5\n6\n7 n   =   [ 3 ,   5 ,   7 ]  def   list_function ( x ): \n\n     return   x  print   list_function ( n )    1 [3, 5, 7]   Show some.  1\n2\n3\n4\n5\n6\n7 def   list_function ( x ): \n\n     return   x [ 1 ]  n   =   [ 3 ,   5 ,   7 ]  print   list_function ( n )    1 5   Extract and modify.  1\n2\n3\n4\n5\n6\n7\n8 def   list_function ( x ): \n\n     x [ 1 ]   =   x [ 1 ]   +   3 \n     return   x  n   =   [ 3 ,   5 ,   7 ]  print   list_function ( n )    1 [3, 8, 7]   Add elements.  1\n2\n3\n4\n5\n6\n7\n8 n   =   [ 3 ,   5 ,   7 ]  def   list_extender ( lst ): \n\n     lst . append ( 9 ) \n     return   lst  print   list_extender ( n )    1 [3, 5, 7, 9]   Remove elements.  1\n2\n3\n4\n5\n6\n7\n8 n   =   [ 3 ,   5 ,   7 ]  def   list_shorter ( lst ): \n\n     lst . remove ( 5 ) \n     return   lst  print   list_shorter ( n )    1 [3, 7]   Pop out the 2 nd  element.  1\n2\n3\n4\n5\n6\n7\n8 n   =   [ 3 ,   5 ,   7 ]  def   list_extract ( lst ): \n\n     lst . pop ( 1 ) \n     return   lst  print   list_extract ( n )    1 [3, 7]   Loop through each element.  1\n2\n3\n4\n5\n6\n7\n8 n   =   [ 3 ,   5 ,   7 ]  def   print_list ( x ): \n\n     for   i   in   range ( 0 ,   len ( x )): \n         print   x [ i ]  print   print_list ( n )    1\n2\n3\n4 3\n5\n7\nNone   Loop, transform each element.  1\n2\n3\n4\n5\n6\n7\n8\n9 n   =   [ 3 ,   5 ,   7 ]  def   double_list ( x ): \n\n     for   i   in   range ( 0 ,   len ( x )): \n         x [ i ]   =   x [ i ]   *   2 \n     return   x  print   double_list ( n )    1 [6, 10, 14]   Loop, transform each element.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 def   my_function ( x ): \n\n     for   i   in   range ( 0 ,   len ( x )): \n         x [ i ]   =   x [ i ]   *   2 \n     return   x  print   my_function ( range ( 3 ))  print   range ( 6 )   # => [0,1,2,3,4,5]  print   range ( 1 , 6 )   # => [1,2,3,4,5]  print   range ( 1 , 6 , 3 )   # => [1,4]    1\n2\n3\n4 [0, 2, 4]  [0, 1, 2, 3, 4, 5]  [1, 2, 3, 4, 5]  [1, 4]    Loop, fill the variable with  +=  (or  -= ,  *= ,  /= )  1\n2\n3\n4\n5\n6\n7\n8 n   =   [ 3 ,   5 ,   7 ]  def   total ( numbers ): \n\n     result   =   0   # empty variable \n     for   item   in   numbers : \n         result   +=   item \n     return   result    Empty variable, loop, fill the variable.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 n   =   [ \"Michael\" ,   \"Lieberman\" ]  def   join_strings ( words ): \n\n     result   =   \"\" \n     for   item   in   words : \n         result   =   result   +   item \n     return   result  print   join_strings ( n )    1 MichaelLieberman   Join (not add up) the list. You want this to  print [1, 2, 3, 4, 5, 6] .  1\n2\n3\n4\n5\n6\n7 m   =   [ 1 ,   2 ,   3 ]  n   =   [ 4 ,   5 ,   6 ]  def   join_lists ( x , y ): \n     return   x   +   y  print   join_lists ( m ,   n )    1 [1, 2, 3, 4, 5, 6]   List of lists. Several loops.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 n   =   [ \n     [ 1 ,   2 ,   3 ], \n     [ 4 ,   5 ,   6 ,   7 ,   8 ,   9 ]  ]  def   flatten ( lists ): \n\n     results   =   [] \n     for   lst   in   lists : \n         for   num   in   range ( len ( lst )): \n             results . append ( lst [ num ]) \n     return   results  print   flatten ( n )    1 [1, 2, 3, 4, 5, 6, 7, 8, 9]   Use  range(len(lst)) .  range, length  1 print   range ( 6 )   # => [0,1,2,3,4,5]    1 [0, 1, 2, 3, 4, 5]",
            "title": "Lists and Functions"
        },
        {
            "location": "/Codecademy Python/#battleship",
            "text": "This first script is incomplete (work in progress). \nThe next script is functional.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52 from   random   import   randint  board   =   []  for   x   in   range ( 5 ):    # 0, 1, 2, 3, 4 (stop before 5) \n     board . append ([ \"O\" ]   *   5 )   # print 5 rows of 5 'O'  def   print_board ( board ): \n\n     for   row   in   board : \n         # print row # print ['O', 'O', 'O', 'O', 'O'] on 5 rows \n         print   \" \" . join ( row )   # print O O O O O   print   \"Let's play Battleship!\"  def   random_row ( board ):   # hide the ship at r-c \n\n     return   randint ( 0 , len ( board )   -   1 )  def   random_col ( board ): \n\n     return   randint ( 0 , len ( board )   -   1 )  print   random_row ( board )  print   random_col ( board )  guess_row   =   int ( raw_input ( \"Guess Row (1 to 5):\" ))   # involve the player  guess_col   =   int ( raw_input ( \"Guess Col (1 to 5):\" ))  print   ship_col   # print ship position  print   ship_row  if   ( guess_row   ==   ship_row )   and   ( guess_col   ==   ship_col ): \n     print   \"Congratulations! You sank my battleship!\" \n     guess_row = guess_row - 1 \n     guess_col = guess_col - 1 \n     board [ guess_row ][ guess_col ] = \"S\" \n     print   print_board ( board )  else : \n     #print \"You missed my battleship!\" \n     if   guess_row   not   in   range ( 5 )   or   guess_row   ==   0   or   guess_col   not   in   range ( 5 )   or   guess_col   ==   0 :   # condition for wrong entries \n         print   \"Oops, that's not even in the ocean.\" \n     elif   board [ guess_row ][ guess_col ]   ==   \"X\" : \n         print   \"You guessed that one already.\" \n     else : \n         print   \"You missed my battleship!\"  guess_row   =   guess_row   -   1   # transform the numbers, 1 becomes 0...  guess_col   =   guess_col   -   1  board [ guess_row ][ guess_col ]   =   \"X\"   # replace the 'O'  print   print_board ( board )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 Let's play Battleship!\n4\n0\nGuess Row (1 to 5):1\nGuess Col (1 to 5):2\n\n\n\n---------------------------------------------------------------------------\n\nNameError                                 Traceback (most recent call last)\n\n<ipython-input-87-efd1e0de637a> in <module>()\n     24 guess_col = int(raw_input(\"Guess Col (1 to 5):\"))\n     25 \n---> 26 print ship_col # print ship position\n     27 print ship_row\n     28\n\n\nNameError: name 'ship_col' is not defined",
            "title": "Battleship!"
        },
        {
            "location": "/Codecademy Python/#battleship-final",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64 from   random   import   randint  board   =   []  for   x   in   range ( 5 ): \n     board . append ([ \"O\" ]   *   5 )  def   print_board ( board ): \n\n     for   row   in   board : \n         print   \" \" . join ( row )  print   \" \\n Let's play Battleship! You have 4 strikes to sink by ship. \\n \"  print_board ( board )  def   random_row ( board ): \n\n     return   randint ( 0 ,   len ( board )   -   1 )  def   random_col ( board ): \n\n     return   randint ( 0 ,   len ( board )   -   1 )  ship_row   =   random_row ( board )  ship_col   =   random_col ( board )  #ship_row = 1 to test and fix to (1,1)  #ship_col = 1  for   turn   in   range ( 5 ): \n     turn   +=   1 \n     if   turn   ==   5 : \n         print   \" \\n Game Over\" \n         print   \"The ship was here => I \\n \" \n         board [ ship_row   -   1 ][ ship_col   -   1 ]   =   \"I\" \n         print_board ( board ) \n         break \n     else : \n         print   \" \\n Turn\" ,   turn \n\n         guess_row   =   int ( raw_input ( \"Guess Row (1 to 5): \" )) \n         guess_col   =   int ( raw_input ( \"Guess Col (1 to 5): \" )) \n\n         if   ( guess_row   ==   ship_row )   and   ( guess_col   ==   ship_col ): \n             print   \" \\n Congratulations! You sank my battleship! \\n \" \n\n             guess_row   =   guess_row   -   1 \n             guess_col   =   guess_col   -   1 \n             board [ guess_row ][ guess_col ]   =   \"S\" \n\n             print_board ( board ) \n             print   \" \\n Game Over\" \n             break \n\n         elif   ( guess_row   <   1   or   guess_row   >   5 )   or   ( guess_col   <   1   or   guess_col   >   5 ): \n             print   \" \\n Oops, that's not even in the ocean. \\n \" \n\n         elif   board [ guess_row   -   1 ][ guess_col   -   1 ]   ==   \"X\" : \n             print   \" \\n You guessed that one already. \\n \" \n             print_board ( board ) \n\n         else : \n             print   \" \\n You missed my battleship! \\n \" \n             board [ guess_row   -   1 ][ guess_col   -   1 ]   =   \"X\" \n             print_board ( board )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57 Let's play Battleship! You have 4 strikes to sink by ship.\n\nO O O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 1\nGuess Row (1 to 5): 1\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 2\nGuess Row (1 to 5): 2\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 3\nGuess Row (1 to 5): 3\nGuess Col (1 to 5): 5\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O O O O\nO O O O O\n\nTurn 4\nGuess Row (1 to 5): 4\nGuess Col (1 to 5): 3\n\nCongratulations! You sank my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O S O O\nO O O O O\n\nGame Over   Joining.  join, split  1\n2\n3\n4 letters   =   [ 'a' ,   'b' ,   'c' ,   'd' ]  print   \" \" . join ( letters )   # a b c d  print   \"---\" . join ( letters )   # #---b---c---d    1\n2 a b c d\na---b---c---d   Randomizing.  random, rand  1\n2\n3\n4 from   random   import   randint  coin   =   randint ( 0 ,   1 )   # randint(low, high)  dice   =   randint ( 1 ,   6 )",
            "title": "Battleship FINAL!"
        },
        {
            "location": "/Codecademy Python/#quiz-7",
            "text": "Takeaway.  1\n2\n3\n4\n5\n6\n7 my_list   =   [ 1 ,   3 ,   5 ,   7 ]  my_list . pop ( 3 )   # remove the 4th  my_list . remove ( 3 )   # remove the '3'  range ( 0 ,   len ( my_list ))   # every list item  range ( 0 ,   len ( my_list ),   2 )   # every other list item    1 [0]",
            "title": "Quiz 7"
        },
        {
            "location": "/Codecademy Python/#unit-8-loops",
            "text": "",
            "title": "UNIT 8, Loops"
        },
        {
            "location": "/Codecademy Python/#loops",
            "text": "A  while  loop is a sort of  if .  1\n2\n3\n4 count   =   0  if   count   <=   9 :   #  \n     print   \"Hello, I am an if statement and count is\" ,   count    1 Hello, I am an if statement and count is 0   1\n2\n3 while   count   <=   9 :   # similar to if: executes as long as the condition is true \n     print   \"Hello, I am a while and count is\" ,   count \n     count   +=   1     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 Hello, I am a while and count is 0\nHello, I am a while and count is 1\nHello, I am a while and count is 2\nHello, I am a while and count is 3\nHello, I am a while and count is 4\nHello, I am a while and count is 5\nHello, I am a while and count is 6\nHello, I am a while and count is 7\nHello, I am a while and count is 8\nHello, I am a while and count is 9   A  while  loop allows control (checkpoint, a switch, on and off).  1\n2\n3\n4\n5 loop_condition   =   True  while   loop_condition :   # On \n     print   \"I am a loop\" \n     loop_condition   =   False   # Off    1 I am a loop   1\n2\n3\n4\n5\n6 num   =   1  while   num   <=   10 :   # the condition \n     print   num   **   2 \n     num   +=   num   **   ( 1 / 2 ) \n     print   num     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 1\n2\n4\n3\n9\n4\n16\n5\n25\n6\n36\n7\n49\n8\n64\n9\n81\n10\n100\n11   A common application of a  while  loop is to check user input to see if it is valid.  1\n2\n3\n4 choice   =   raw_input ( 'Enjoying the course? (y/n)' )  while   choice   !=   \"y\"   and   choice   !=   \"n\" : \n     choice   =   raw_input ( \"Sorry, I didn't catch that. Enter again (case sensitive): \" )    1 Enjoying the course? (y/n)y   break  means \u201cexit the current loop\u201d. Opposite to  break  is  continue .  1\n2\n3\n4\n5\n6\n7 count   =   0  while   True : \n     print   count \n     count   +=   1 \n     if   count   >=   10 : \n         break     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 0\n1\n2\n3\n4\n5\n6\n7\n8\n9   while / else  are like  if / else ;  else  is executed when  while  is false.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 import   random  print   \"Lucky Numbers! 3 numbers will be generated.\"  print   \"If one of them is a '5', you lose!\"  count   =   0  while   count   <   3 : \n     num   =   random . randint ( 1 ,   6 ) \n     print   num \n     if   num   ==   5 : \n         print   \"Sorry, you lose!\" \n         break \n     count   +=   1  else : \n     print   \"You win!\"    1\n2\n3\n4 Lucky Numbers! 3 numbers will be generated.\nIf one of them is a '5', you lose!\n5\nSorry, you lose!   Guess game.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 from   random   import   randint  # Generates a number from 1 through 10 inclusive  random_number   =   randint ( 1 ,   10 )  # print random_number  guesses_left   =   3  print   \"Guess right!\"  while   guesses_left   >   0 : \n     print   \"You have \" + str ( guesses_left ) + \" attempts.\" \n     guess   =   raw_input ( \"Guess a number from 1 to 10: \" ) \n     if   int ( guess )   ==   random_number : \n         print   \"You win!\" \n         break \n     elif   guesses_left   ==   1 : \n         print   \"You lose.\" \n         break \n     else : \n         guesses_left   -=   1 \n         print   \"Try again.\"     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 Guess right!\nYou have 3 attempts.\nGuess a number from 1 to 10: 2\nTry again.\nYou have 2 attempts.\nGuess a number from 1 to 10: 6\nTry again.\nYou have 1 attempts.\nGuess a number from 1 to 10: 9\nYou lose.   if  loop.  1\n2\n3\n4 print   \"Counting...\"  for   i   in   range ( 20 ): \n     print   i     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 Counting...\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19   Create a list.  1\n2\n3\n4\n5\n6\n7\n8\n9 hobbies   =   []  print   hobbies  for   i   in   range ( 3 ): \n     hobby   =   raw_input ( \"Enter a hobby: \" ) \n     hobbies . append ( hobby )  print   hobbies    1\n2\n3\n4\n5 []\nEnter a hobby: fishing\nEnter a hobby: skiing\nEnter a hobby: knitting!!!\n['fishing', 'skiing', 'knitting!!!']   Run though a string, but each character will be spaced out.  1\n2\n3\n4\n5\n6\n7\n8\n9 thing   =   \"spam!\"  for   c   in   thing : \n     print   c  word   =   \"eggs!\"  for   char   in   word : \n     print   char ,   # , print on the same line    1\n2\n3\n4\n5\n6 s\np\na\nm\n!\ne g g s !   Replace a character in a string.  ,  print on the same line.  1\n2\n3\n4\n5\n6\n7 phrase   =   \"A bird in the hand...\"  for   char   in   phrase : \n     if   char   ==   \"A\"   or   char   ==   \"a\" : \n         print   \"X\" , \n     else : \n         print   char ,    1 X   b i r d   i n   t h e   h X n d . . .   Run though a list.  1\n2\n3\n4\n5\n6\n7\n8\n9 numbers    =   [ 7 ,   9 ,   12 ,   54 ,   99 ]  print   \"This list contains: \"  for   num   in   numbers : \n     print   num  for   numm   in   numbers : \n     print   numm   **   2 ,    1\n2\n3\n4\n5\n6\n7 This list contains: \n7\n9\n12\n54\n99\n49 81 144 2916 9801   Run though a dictionary.  1\n2\n3\n4\n5\n6\n7 d   =   { 'a'   :   'apple' ,   'b'   :   'berry' ,   'c'   :   'cherry' }  for   key   in   d : \n     # key:value \n     print   key + \" \" + d [ key ] \n     print   key   # key \n     print   d [ key ]   # value    1\n2\n3\n4\n5\n6\n7\n8\n9 a apple\na\napple\nc cherry\nc\ncherry\nb berry\nb\nberry   Enumerate a list (numbers and members).  1\n2\n3\n4\n5 choices   =   [ 'pizza' ,   'pasta' ,   'salad' ,   'nachos' ]  print   'Your choices are:'  for   index ,   item   in   enumerate ( choices ): \n     print   index   +   1 ,   item    1\n2\n3\n4\n5 Your choices are:\n1 pizza\n2 pasta\n3 salad\n4 nachos   Multiple lists.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 list_a   =   [ 3 ,   9 ,   17 ,   15 ,   19 ]  list_b   =   [ 2 ,   4 ,   8 ,   10 ,   30 ,   40 ,   50 ,   60 ,   70 ,   80 ,   90 ]  for   a ,   b   in   zip ( list_a ,   list_b ): \n     if   a   >   b :  \n         print   a \n     elif   a   ==   b : \n         print   \"-\" \n     else : \n         print   b    1\n2\n3\n4\n5 3\n9\n17\n15\n30   List with concatenation.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 fruits   =   [ 'banana' ,   'apple' ,   'orange' ,   'tomata' ,   'pear' ,   'grape' ]  print   'You have...'  for   f   in   fruits : \n     if   f   ==   'tomato' : \n         print   'A tomato is not a fruit!'   # (It actually is.) \n         break \n     print   ', a' ,   f ,  else : \n     print   '; A fine selection of fruits!'    1\n2 You have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!   Remove the  break .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 fruits   =   [ 'banana' ,   'apple' ,   'orange' ,   'tomata' ,   'pear' ,   'grape' ]  print   'You have...'  for   f   in   fruits : \n     if   f   ==   'tomato' : \n         print   'A tomato is not a fruit!'   # (It actually is.) \n     else :     \n         print   ', a' ,   f ,  else : \n     print   '; A fine selection of fruits!'    1\n2 You have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!",
            "title": "Loops"
        },
        {
            "location": "/Codecademy Python/#practice-makes-perfect",
            "text": "Is it even?  1\n2\n3\n4\n5\n6\n7\n8\n9 def   is_even ( x ): \n\n     if   x   %   2   ==   0 : \n         return   True   # if x is even \n     else : \n         return   False  print   is_even ( 2 )  print   is_even ( 3 )    1\n2 True\nFalse   Or not?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 n   =   - 1.0  print ( n   -   round ( n , 0 ))  def   is_int ( x ): \n\n     if   ( x   -   round ( x , 0 ))   ==   0 : \n         return   True \n     else : \n         return   False  print   is_int ( 7.0 )  print   is_int ( 7.5 )  print   is_int ( - 1 )    1\n2\n3\n4 0.0\nTrue\nFalse\nTrue   Summing the digits of a number.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 def   digit_sum ( n ): \n\n     liss   =   [] \n     n   =   str ( n )   # from integers to characters \n     for   char   in   n : \n         liss . append ( char )   # populate liss \n         total   =   0 \n         for   i   in   range ( len ( liss )): \n             liss [ i ]   =   int ( liss [ i ])   # back to integers \n             total   +=   liss [ i ]   # sum them up \n     return   total  print   digit_sum ( 1234 )  print   digit_sum ( 8888 )    1\n2 10\n32   What is the factorial?   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 def   factorial ( x ): \n\n     if   x   ==   1   or   x   ==   0 : \n         return   1 \n     else : \n         result   =   1 \n         while   x   >   0 : \n             # say x = 4 \n             # 1 * 4 = 4 \n             # 4 * 3 = 12 \n             # 12 * 2 = 24 \n             # 24 * 1 = 24 \n             result   *=   x \n             x   -=   1 \n\n     return   result   print   factorial ( 1 )  print   factorial ( 2 )  print   factorial ( 3 )  print   factorial ( 4 )  print   factorial ( 5 )    1\n2\n3\n4\n5 1\n2\n6\n24\n120   Is it a prime number? (Check the web for the list of prime numbers.)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 def   is_prime ( x ): \n\n     if   ( x   >   1 ):   # to catch greater than 1 \n         for   n   in   range ( 2 ,( x   -   1 )):   # range 2 - 1 less than x \n             if   x   %   n   ==   0 : \n                 print   x \n                 return   False \n     else :   # ro catch 0 and 1 \n         print   x \n         return   False \n     print   x   # the input \n     return   True   # the output, will be printed when the function will be called  for   ii   in   range ( 24 ): \n     print   is_prime ( ii ),     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 0\nFalse 1\nFalse 2\nTrue 3\nTrue 4\nFalse 5\nTrue 6\nFalse 7\nTrue 8\nFalse 9\nFalse 10\nFalse 11\nTrue 12\nFalse 13\nTrue 14\nFalse 15\nFalse 16\nFalse 17\nTrue 18\nFalse 19\nTrue 20\nFalse 21\nFalse 22\nFalse 23\nTrue   Reverse a string.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 def   reverse ( text ): \n\n     count   =   len ( text )   -   1   # start at the end \n\n     print   text \n     print   count   # 3 letters will be 0,1,2,3 or 3 \n\n     reversed_text   =   \"\"   # empty string \n\n     print   reversed_text \n\n     while   count   >=   0 : \n         reversed_text   +=   text [ count ]   # adding the right-most letter \n         count   -=   1   # decrement count \n     return   reversed_text  print   reverse ( \"make\" )  print   reverse ( \"codeacademy\" )    1\n2\n3\n4\n5\n6\n7\n8 make\n3\n\nekam\ncodeacademy\n10\n\nymedacaedoc   Remove vowels in apunctuation word (could work for punctuation too).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 def   anti_vowel ( text ): \n\n     vowels   =   \"aAeEiIoOuU\" \n     for   char   in   text : \n         for   vow   in   vowels : \n             if   vow   ==   char : \n                 text   =   text . replace ( char , \"\" ) \n     return   text  print   anti_vowel ( \"allo\" )    1 ll   Remove all but punctuation.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 def   anti_vowel ( text ): \n\n     text   =   text . lower () \n     vowels   =   \"abcdefghijklmnopqrstuvwxyz1234567890$-\" \n\n     for   char   in   text : \n         for   vow   in   vowels : \n             if   vow   ==   char : \n                 text   =   text . replace ( char , \"\" ) \n     for   char   in   text : \n         if   char   ==   \" \" : \n             text   =   text . replace ( char , \"\" ) \n     return   text  print   anti_vowel ( \"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the  \\\" ID \\\"  associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\" )    1 .?,,.,.......\"\"...   Scrabble scoring.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 score   =   { \"a\" :   1 ,   \"c\" :   3 ,   \"b\" :   3 ,   \"e\" :   1 ,   \"d\" :   2 ,   \"g\" :   2 ,  \n          \"f\" :   4 ,   \"i\" :   1 ,   \"h\" :   4 ,   \"k\" :   5 ,   \"j\" :   8 ,   \"m\" :   3 ,  \n          \"l\" :   1 ,   \"o\" :   1 ,   \"n\" :   1 ,   \"q\" :   10 ,   \"p\" :   3 ,   \"s\" :   1 ,  \n          \"r\" :   1 ,   \"u\" :   1 ,   \"t\" :   1 ,   \"w\" :   4 ,   \"v\" :   4 ,   \"y\" :   4 ,  \n          \"x\" :   8 ,   \"z\" :   10 }  def   scrabble_score ( word ): \n\n     word2   =   word . lower () \n\n     print   word2 + \":\" , \n     points   =   0 \n     for   letter   in   word2 : \n         if   letter   ==   str ( letter ): \n             points   +=   score [ letter ] \n     return   points  print   scrabble_score ( \"ab\" )  print   scrabble_score ( \"allo\" )  print   scrabble_score ( \"xylophone\" )  print   scrabble_score ( \"coding\" )  print   scrabble_score ( \"yak\" )    1\n2\n3\n4\n5 ab :   4  allo :   4  xylophone :   24  coding :   10  yak :   10    Censor a word in a string.  length  1\n2\n3\n4\n5\n6\n7\n8\n9 def   censor ( text , word_to_censor ): \n\n     text   =   text . split ( ' ' ) \n     for   word   in   range ( 0 , len ( text )): \n         if   text [ word ]   ==   word_to_censor : \n             text [ word ]   =   \"*\"   *   len ( text [ word ])   *   2 \n     return   \" \" . join ( text )   # join the w separated by spaces  print   censor ( \"it is two days\" ,   \"two\" )    1 it is ****** days   Count items is a list.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 def   count ( sequence ,   item ): \n\n     sequence   =   list ( sequence ) \n     count   =   0 \n\n     for   i   in   sequence : \n         if   i   ==   item : \n             count   +=   1 \n     return   count  list2   =   [ 1 , 3 , 1 , 5 ]  list3   =   [ \"a\" , \"b\" , \"c\" , \"a\" ]  list4   =   ( \"a\" , \"b\" , \"c\" , \"a\" )  list5   =   ( 1 , 2 , 3 , 1 , 1 )  print   count ( list2 , 1 )  print   count ( list3 , 1 )  print   count ( list4 , 1 )  print   count ( list5 , 1 )    1\n2\n3\n4 2\n0\n0\n3   Extract even numbers from a list.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 def   purify ( listing ): \n\n     listing   =   list ( listing ) \n     listing2   =   [] \n\n     for   l   in   listing : \n         if   l   %   2   ==   0 : \n             listing2 . append ( l ) \n     return   listing2  case1   =   [ 1 , 2 , 3 , 4 ]  print   purify ( case1 )    1 [2, 4]   Compute a product.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 def   product ( listing ): \n\n     print   listing \n     result   =   1 \n     for   l   in   listing : \n         result   =   result   *   l \n     return   result  case1   =   [ 1 , 2 , 3 ]  case2   =   ( 5 , 10 , 15 )  print   product ( case1 )  print   product ( case2 )    1\n2\n3\n4 [1, 2, 3]  6  (5, 10, 15)  750    Remove duplicates from a list.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 def   remove_duplicates ( listing ): \n\n     print   listing \n\n     listing   =   list ( listing ) \n     listing2   =   [] \n\n     for   l   in   listing : \n         if   l   not   in   listing2 : \n             listing2 . append ( l ) \n     return   listing2  case1   =   [ 1 , 2 , 3 , 3 , 4 ]  case2   =   ( 1 , 6 , 1 , 4 , 2 , 8 , 2 , 1 , 6 , 7 , 4 , 6 )  print   remove_duplicates ( case1 )  print   remove_duplicates ( case2 )    1\n2\n3\n4 [1, 2, 3, 3, 4]  [1, 2, 3, 4]  (1, 6, 1, 4, 2, 8, 2, 1, 6, 7, 4, 6)  [1, 6, 4, 2, 8, 7]    Extract the median from an unordered list of numbers.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 def   median ( listing ): \n\n     median_no   =   0 \n     median_low   =   0 \n     median_high   =   0 \n     low   =   0 \n     high   =   0 \n\n     print   listing \n\n     listing   =   sorted ( listing ) \n\n     if   len ( listing )   %   2   ==   0 : \n         low   =   len ( listing ) / 2   -   1   # 6/2 = 3 -1 = 2 or the 3rd \n         high   =   len ( listing ) / 2   # 6/2 = 3 or the 4th \n         median_low   =   float ( listing [ low ])   # extract the 3rd of 6 \n         median_high   =   float ( listing [ high ])   # the 4th of 6 \n         median_no   =   ( median_low   +   median_high ) / 2 \n     else : \n         median_no   =   listing [( len ( listing )) / 2 ]   # on 5, the / will yield 2.5, but coerced to the integer 2 or the 3rd \n     return   median_no  case1   =   ( 7 , 12 , 3 , 1 , 6 )  case2   =   ( 7 , 12 , 3 , 1 , 6 , 17 )  print   median ( case1 )  print   median ( case2 )    1\n2\n3\n4 (7, 12, 3, 1, 6)\n6\n(7, 12, 3, 1, 6, 17)\n6.5",
            "title": "Practice Makes Perfect"
        },
        {
            "location": "/Codecademy Python/#quiz-8",
            "text": "Takeaway: built-in functions.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 x   =   [ 1 ,   2 ,   3 ]  y   =   [ 4 ,   5 ,   6 ]  zipped   =   zip ( x ,   y )  # zipped = [(1, 4), (2, 5), (3, 6)]  x2 ,   y2   =   zip ( * zipped )  x   ==   list ( x2 )   and   y   ==   list ( y2 )  # True    1 True   1\n2\n3\n4\n5\n6\n7 seasons   =   [ 'Spring' ,   'Summer' ,   'Fall' ,   'Winter' ]  list ( enumerate ( seasons ))  # [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]  list ( enumerate ( seasons ,   start = 1 ))  # [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]    1 [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]",
            "title": "Quiz 8"
        },
        {
            "location": "/Codecademy Python/#project-command-line-calendar",
            "text": "In this project, we\u2019ll build a basic calendar that the user will be able to interact with from the command line. The user should be able to choose to:   View the calendar  Add an event to the calendar  Update an existing event  Delete an existing event    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83 from   time   import   sleep ,   strftime  his_name   =   raw_input ( \"What is your first name? \" )  his_name   =   str ( his_name )  # calendar will store the dates as keys and the events as values  calendar   =   {}  def   welcome (): \n\n     print ( \"Welcome \"   +   his_name   + \".\" ) \n\n     print ( \"Calendar starting...\" ) \n     sleep ( 0.5 ) \n     print ( \"Today is: \"   +   strftime ( \"%A, %B  %d , %Y\" )) \n     print ( \"It is currently: \"   +   strftime ( \"%H:%M:%S\" )) \n     sleep ( 0.5 )  def   start_calendar (): \n\n     welcome () \n     print ( \"What would you like to do?\" ) \n     print ( calendar ) \n     start   =   True \n\n     while   start : \n         user_choice   =   raw_input ( \"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \" ) . upper () \n\n         if   user_choice   ==   'V' :   # V \n             if   len ( calendar . keys ())   <   1 : \n                 print ( \"The calendar is empty\" ) \n             else : \n                 print ( calendar ) \n\n         elif   user_choice   ==   'U' :   # U \n             if   len ( calendar . keys ())   <   1 : \n                 print ( \"The calendar is empty\" ) \n             else : \n                 print ( calendar ) \n                 date   =   raw_input ( \"What date? \" ) \n                 update   =   raw_input ( \"Enter the update: \" ) \n                 # could be more control here... \n                 calendar [ date ]   =   update   # without checking if the date is valid or if it already exists (which could override things)! \n                 print ( \"Successful!\" ) \n                 print ( calendar ) \n\n         elif   user_choice   ==   'A' :   # A \n             event   =   raw_input ( \"Enter event: \" ) \n             date   =   raw_input ( \"Enter date (MM/DD/YYYY): \" ) \n             if   ( len ( date )   >   10   or   int ( date [ 6 :])   <   int ( strftime ( \"%Y\" ))):   # could be more control... \n                 print ( \"Invalid date format.\" ) \n                 try_again   =   raw_input ( \"Try Again? 'Y' for Yes, 'N' for No: \" ) . upper () \n                 if   try_again   ==   'Y' : \n                     continue   #! break, continue, start is still True \n                 else : \n                     start   ==   False \n             else : \n                 calendar [ date ]   =   event   # without checking if the date is valid or if it already exists (which could override things)! \n                 print ( \"Successful!\" ) \n                 print ( calendar ) \n\n         elif   user_choice   ==   'D' :   # D \n             if   len ( calendar . keys ())   <   1 : \n                 print ( \"The calendar is empty.\" ) \n             else : \n                 print ( calendar ) \n                 event   =   raw_input ( \"What event? \" )   # could be more option like: What date? \n                 for   date   in   calendar . keys (): \n                     if   event   ==   calendar [ date ]: \n                         del   calendar [ date ]   # del a[], [1], [\"a\"], [1:3], [5:], [:9], etc. \n                         print ( \"Deleted.\" ) \n                         print ( calendar ) \n                     else : \n                         print ( \"Incorrect.\" ) \n\n         elif   user_choice   ==   'X' :   # X \n             start   =   False \n\n         else : \n             print ( \"Invalid command.\" ) \n             break  start_calendar ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45 What is your first name? Al\nWelcome Al.\nCalendar starting...\nToday is: Thursday, October 20, 2016\nIt is currently: 13:42:02\nWhat would you like to do?\n{}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? a\nEnter event: Buy stuff\nEnter date (MM/DD/YYYY): 10/21/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Sell stuff\nEnter date (MM/DD/YYYY): 11/01/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Rent stuff\nEnter date (MM/DD/YYYY): 01/01/2018\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? u\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nWhat date? 01/01/2018\nEnter the update: Lease stuff\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? Buy stuff\nDeleted.\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? 10/21/2016\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? x",
            "title": "Project Command Line Calendar"
        },
        {
            "location": "/Codecademy Python/#unit-9-exam-statistics",
            "text": "",
            "title": "UNIT 9, Exam Statistics"
        },
        {
            "location": "/Codecademy Python/#exam-statistics",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50 grades   =   [ 100 ,   100 ,   90 ,   40 ,   80 ,   100 ,   85 ,   70 ,   90 ,   65 ,   90 ,   85 ,   50.5 ]  print   \"Grades:\" ,   grades  def   print_grades ( grades ):   # list the grades \n\n     for   i   in   grades : \n         print   i ,   # , keep the list on the same line  print_grades ( grades )  print   \"Let's compute some stats!\"  def   grades_sum ( scores ):   # sum up the grades \n\n     total   =   0 \n     for   s   in   scores : \n         total   +=   s \n     return   total  print   grades_sum ( grades )  def   grades_average ( grades ):   # average the grades \n\n     sum_of_grades   =   grades_sum ( grades ) \n     average   =   sum_of_grades   /   float ( len ( grades )) \n     return   average  print   grades_average ( grades )  print   \"Time to conquer the variance!\"  def   grades_variance ( scores ):   # compute the variance \n\n     average   =   grades_average ( scores ) \n     totalvariance   =   0 \n     for   score   in   scores : \n         totalvariance   +=   ( score   -   average )   **   2 \n     tvariance   =   totalvariance / float ( len ( scores )) \n     return   tvariance  variance   =   grades_variance ( grades )  print   variance  def   grades_std_deviation ( variance ):   # compute standard deviation \n\n     stddevisation   =   variance   **   0.5 \n     return   stddevisation  print   grades_std_deviation ( variance )    1\n2\n3\n4\n5\n6\n7 Grades: [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]\n100 100 90 40 80 100 85 70 90 65 90 85 50.5 Let's compute some stats!\n1045.5\n80.4230769231\nTime to conquer the variance!\n334.071005917\n18.2776094147",
            "title": "Exam Statistics"
        },
        {
            "location": "/Codecademy Python/#unit-10-advanced-topics-in-python",
            "text": "",
            "title": "UNIT 10, Advanced Topics in Python"
        },
        {
            "location": "/Codecademy Python/#advanced-topics-in-python",
            "text": "Iterate through a dictionary.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 my_dict   =   { \n     \"CodeCademy\"   :   \"Python\" , \n     \"DataCamp\"   :   \"R\" , \n     \"Code School\"   :   \"SQL\"  }  print   my_dict . items ()  print   my_dict . keys ()  print   my_dict . values ()  for   key   in   my_dict : \n     print   key ,   my_dict [ key ]   # key and value    1\n2\n3\n4\n5\n6 [('CodeCademy', 'Python'), ('Code School', 'SQL'), ('DataCamp', 'R')]  ['CodeCademy', 'Code School', 'DataCamp']  ['Python', 'SQL', 'R']  CodeCademy Python  Code School SQL  DataCamp R    Build a list.  1\n2\n3 evens_to_50   =   [ i   for   i   in   range ( 51 )   if   i   %   2   ==   0 ]  print   evens_to_50    1 [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]   Build lists with conditions.  1\n2\n3 doubles_by_3   =   [ x   *   2   for   x   in   range ( 1 , 6 )   if   ( x   *   2 )   %   3   ==   0 ]  print   doubles_by_3    1 [6]   1\n2\n3 even_squares   =   [ x   **   2   for   x   in   range ( 2 , 11 )   if   ( x   **   2 )   %   2   ==   0 ]  print   even_squares    1 [4, 16, 36, 64, 100]   1\n2\n3 cubes_by_four   =   [ x   **   3   for   x   in   range ( 1 , 11 )   if   x   **   3   %   4   ==   0 ]  print   cubes_by_four    1 [8, 64, 216, 512, 1000]   Lists slicing.  extract, list  1\n2\n3 l   =   [ i   **   2   for   i   in   range ( 1 ,   11 )]   # Should be [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]  print   l [ 2 : 9 : 2 ]   # [start:end:stride]    1 [9, 25, 49, 81]   1\n2\n3 my_list   =   range ( 1 ,   11 )   # list of numbers 1 - 10  print   my_list [:: 2 ]    1 [1, 3, 5, 7, 9]   1\n2\n3\n4\n5 my_list   =   range ( 1 ,   11 )  backwards   =   my_list [:: - 1 ]  print   backwards    1 [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]   1\n2\n3\n4\n5 to_one_hundred   =   range ( 101 )  backwards_by_tens   =   to_one_hundred [:: - 10 ]  print   backwards_by_tens    1 [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0]    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 to_21   =   range ( 1 ,   22 )  print   to_21  odds   =   range ( 1 ,   22 ,   2 )  print   odds  middle_third   =   to_21 [ 7 : 14 : 1 ]  print   middle_third    1\n2\n3 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]  [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]  [8, 9, 10, 11, 12, 13, 14]    Lambda function.  1\n2\n3 my_list   =   range ( 16 )  print   filter ( lambda   x :   x   %   3   ==   0 ,   my_list )    1 [0, 3, 6, 9, 12, 15]   1\n2\n3 languages   =   [ \"HTML\" ,   \"JavaScript\" ,   \"Python\" ,   \"Ruby\" ]  print   filter ( lambda   x :   x   ==   \"Python\" , languages )    1 ['Python']   1\n2\n3 squares   =   [ x ** 2   for   x   in   range ( 1 , 11 )]  print   filter ( lambda   x :   ( x   >=   30   and   x   <=   70 ),   squares )    1 [36, 49, 64]   Iterating over dictionaries.  1\n2\n3\n4\n5\n6\n7 movies   =   { \n     \"Monty Python and the Holy Grail\" :   \"Great\" , \n     \"Monty Python's Life of Brian\" :   \"Good\" , \n     \"Monty Python's Meaning of Life\" :   \"Okay\"  }  print   movies . items ()    1 [(\"Monty Python's Life of Brian\", 'Good'), (\"Monty Python's Meaning of Life\", 'Okay'), ('Monty Python and the Holy Grail', 'Great')]   Comprehensions.  1\n2\n3 threes_and_fives   =   [ x   for   x   in   range ( 1 , 16 )   if   ( x   %   3   ==   0   or   x   %   5   ==   0 )]  print   threes_and_fives    1 [3, 5, 6, 9, 10, 12, 15]   Slicing again.  extract  1\n2\n3\n4\n5 garbled   =   \"!XeXgXaXsXsXeXmX XtXeXrXcXeXsX XeXhXtX XmXaX XI\"  message   =   garbled [:: - 2 ]  print   message    1 I am the secret message!   1\n2\n3\n4\n5 garbled   =   \"IXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX\"  message   =   filter ( lambda   x :   x   !=   \"X\" ,   garbled )  print   message    1 I am another secret message!",
            "title": "Advanced Topics in Python"
        },
        {
            "location": "/Codecademy Python/#introduction-to-bitwise-operators",
            "text": "Operators.  1\n2\n3\n4\n5\n6 print   5   >>   4    # Right Shift  print   5   <<   1    # Left Shift  print   8   &   5     # Bitwise AND  print   9   |   4     # Bitwise OR  print   12   ^   42   # Bitwise XOR  print   </ sub > 88       # Bitwise NOT    1\n2\n3\n4\n5\n6 0\n10\n0\n13\n38\n-89   Base 2 or binary.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 print   0b1 ,      # 1  print   0b10 ,     # 2  print   0b11 ,     # 3  print   0b100 ,    # 4  print   0b101 ,    # 5  print   0b110 ,    # 6  print   0b111     # 7  print   \"******\"  print   0b1   +   0b11   # 1 + 3 = 4  print   0b11   *   0b11   # 3 * 3 = 90    1\n2\n3\n4 1 2 3 4 5 6 7\n******\n4\n9    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 one   =   0b1  two   =   0b10  three   =   0b11  four   =   0b100  five   =   0b101  six   =   0b110  seven   =   0b111  eight   =   0b1000  nine   =   0b1001  ten   =   0b1010  eleven   =   0b1011  twelve   =   0b1100    Decimal to binary.  1\n2\n3\n4\n5 print   bin ( 1 )  print   bin ( 2 )  print   bin ( 3 )  print   bin ( 4 )  print   bin ( 5 )    1\n2\n3\n4\n5 0b1\n0b10\n0b11\n0b100\n0b101   Binary to decimal.  1\n2\n3\n4\n5 print   int ( \"1\" , 2 )  print   int ( \"10\" , 2 )  print   int ( \"111\" , 2 )  print   int ( \"0b100\" , 2 )  print   int ( bin ( 5 ), 2 )    1\n2\n3\n4\n5 1\n2\n7\n4\n5   Print out the decimal equivalent of the binary 11001001.  1 print   int ( \"11001001\" , 2 )    1 201   Left Bit Shift ( << )  1\n2 0b000001 << 2 == 0b000100 (1 << 2 = 4)\n0b000101 << 3 == 0b101000 (5 << 3 = 40)          Right Bit Shift ( >> )  1\n2 0b0010100 >> 3 == 0b000010 (20 >> 3 = 2)\n0b0000010 >> 2 == 0b000000 (2 >> 2 = 0)   This operation is mathematically equivalent to floor dividing and multiplying by 2 (respectively) for every time you shift, but it\u2019s often easier just to think of it as shifting all the 1s and 0s left or right by the specified number of slots.  1\n2\n3\n4\n5\n6\n7 shift_right   =   0b1100  shift_left   =   0b1  shift_right   =   0b1100   >>   2  shift_left   =   0b1   <<   2  print   bin ( shift_right )  print   bin ( shift_left )    1\n2 0b11\n0b100   The bitwise AND ( & ) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if the corresponding bits of both numbers are 1. For example:  1\n2\n3\n4     a:   00101010   42\n    b:   00001111   15       \n===================\na & b:   00001010   10   As you can see, the 2\u2019s bit and the 8\u2019s bit are the only bits that are on in both  a  and  b , so  a & b  only contains those bits. Note that using the & operator can only result in a number that is less than or equal to the smaller of the two values.   0 & 0 = 0  0 & 1 = 0  1 & 0 = 0  1 & 1 = 1   For example:  0b111 (7) & 0b1010 (10) = 0b10 .  1\n2\n3 print   bin ( 0b1110 & 0b101 )  print   bin ( 0b100 )    1\n2 0b100\n0b100   The bitwise OR ( | ) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of either number are 1. For example:  1\n2\n3\n4     a:  00101010  42\n    b:  00001111  15       \n================\na | b:  00101111  47   Note that the bitwise  |  operator can only create results that are greater than or equal to the larger of the two integer inputs.   0 | 0 = 0  0 | 1 = 1   1 | 0 = 1  1 | 1 = 1   For example:  110 (6) | 1010 (10) = 1110 (14) .  1 print   bin ( 0b1110 | 0b101 )    1 0b1111   The XOR ( ^ ) or exclusive or operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of the two numbers are 1, but not both.  1\n2\n3\n4     a:  00101010   42\n    b:  00001111   15       \n================\na ^ b:  00100101   37   Keep in mind that if a bit is off in both numbers, it stays off in the result. Note that  XOR -ing a number with itself will always result in 0.   0 ^ 0 = 0  0 ^ 1 = 1  1 ^ 0 = 1  1 ^ 1 = 0   For example:  111 (7) ^ 1010 (10) = 1101 (13) .  1 print   bin ( 0b1110 ^ 0b101 )    1 0b1011   The bitwise NOT operator ( </sub> ) just flips all of the bits in a single number. What this actually means to the computer is actually very complicated, so we\u2019re not going to get into it. Just know that mathematically, this is equivalent to adding one to the number and then making it negative.   1\n2\n3\n4\n5 print   </ sub > 1  print   </ sub > 2  print   </ sub > 3  print   </ sub > 42  print   </ sub > 123    1\n2\n3\n4\n5 -2\n-3\n-4\n-43\n-124   A bit mask is just a variable that aids you with bitwise operations. A bit mask can help you turn specific bits on, turn others off, or just collect data from an integer about which bits are on or off.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 def   check_bit4 ( input ): \n\n     mask   =   0b1000 \n     desired   =   input   &   mask \n     if   desired   >   0 : \n         return   \"on\" \n     else : \n         return   \"off\"  print   check_bit4 ( 0b1100 )    1 on   1\n2\n3\n4 0b1000\n0b1100\n======\n0b1000   You can also use masks to turn a bit in a number on using  | . Use a bitmask and the value a in order to achieve a result where the third bit from the right of a is turned on. Be sure to print your answer as a  bin()  string!  1\n2\n3\n4 a   =   0b10111011  mask   =   0b100  desired   =   a   |   mask  print   bin ( desired )    1 0b10111111   1\n2\n3\n4 0b10111011\n0b00000100\n==========\n0b10111111   Using the XOR ( ^ ) operator is very useful for flipping bits. Using  ^  on a bit with the number one will return a result where that bit is flipped. In the editor is the 8 bit variable a. Use a bitmask and the value a in order to achieve a result where all of the bits in a are flipped. Be sure to print your answer as a  bin()  string!  1\n2\n3\n4 a   =   0b11101110  mask   =   0b11111111  desired   =   a   ^   mask  print   bin ( desired )    1 0b10001   1\n2\n3\n4 0b11101110\n0b11111111\n==========\n0b00010001   Finally, you can also use the left shift ( << ) and right shift ( >> ) operators to slide masks into place.  1\n2\n3\n4\n5\n6\n7 def   flip_bit ( number ,   n ): \n\n     mask   =   ( 0b1   <<   ( n - 1 )) \n     result   =   number   ^   mask \n     return   bin ( result )  print   flip_bit ( 0b111 ,   2 )    1 0b101",
            "title": "Introduction to Bitwise Operators"
        },
        {
            "location": "/Codecademy Python/#project-rgb-hex-converter",
            "text": "In this project, we\u2019ll use Bitwise operators to build a calculator that can convert RGB values to Hexadecimal ( hex ) values, and vice-versa.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56 def   rgb_hex (): \n\n     invalid_msg   =   \"Invalid entry\" \n     red   =   int ( raw_input ( \"Enter a 'red' (R) value, from 0 to 255: \" )) \n     if   red   <   0   or   red   >   255 : \n         print   invalid_msg \n         return   # return will exit the function, w/o return, the function jumps to the next line... \n\n     green   =   int ( raw_input ( \"Enter a 'green' (G) value, from 0 to 255: \" )) \n     if   green   <   0   or   green   >   255 : \n         print   invalid_msg \n         return \n\n     blue   =   int ( raw_input ( \"Enter a 'blue' (B) value, from 0 to 255: \" )) \n     if   blue   <   0   or   blue   >   255 : \n         print   invalid_msg \n         return \n\n     val   =   red   <<   16   +   green   <<   8   +   blue \n     # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character. \n     # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift). \n     # Become familiar with bits by reading more here. \n     print   \" %s \"   % ( hex ( val )[ 2 :] . upper ())   # string formatting  def   hex_rgb (): \n\n     invalid_msg   =   \"Invalid entry\" \n     hex_val   =   raw_input ( \"Enter a color (six hexadecimal digits): \" ) \n     if   len ( hex_val )   !=   6 : \n         print   \"Invalid Entry\" \n     else : \n         hex_val   =   int ( hex_val ,   16 ) \n     two_hex_digits   =   2   **   8 \n     blue   =   hex_val   %   two_hex_digits \n     hex_val   =   hex_val   >>   8 \n     green   =   hex_val   %   two_hex_digits \n     hex_val   =   hex_val   >>   8 \n     red   =   hex_val   %   two_hex_digits \n     print   \"Red:  %s  Green:  %s  Blue:  %s \"   % ( red ,   green , blue )  def   convert (): \n\n     while   True : \n         option   =   str ( raw_input ( \"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \" )) \n         if   option   ==   '1' : \n             print   \"RGB to Hex...\" \n             rgb_hex () \n         elif   option   ==   '2' : \n             print   \"Hex to RGB...\" \n             hex_rgb () \n         elif   option   ==   'X'   or   option   ==   'x' : \n             break \n         else : \n             print   \"Error\"  convert ()    1\n2\n3\n4\n5\n6\n7 Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. 1\nRGB to Hex...\nEnter a 'red' (R) value, from 0 to 255: 10\nEnter a 'green' (G) value, from 0 to 255: 10\nEnter a 'blue' (B) value, from 0 to 255: 20\n280000000000000L\nEnter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. x",
            "title": "Project RGB-HEX Converter"
        },
        {
            "location": "/Codecademy Python/#unit-11-introduction-to-classes",
            "text": "",
            "title": "UNIT 11, Introduction to Classes"
        },
        {
            "location": "/Codecademy Python/#introduction-to-classes",
            "text": "You can think of an object as a single data structure that contains data as well as functions; functions of objects are called methods.  Class Fruit ,  lemon instance .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 class   Fruit ( object ): \n\n\n     def   __init__ ( self ,   name ,   color ,   flavor ,   poisonous ): \n\n         self . name   =   name \n         self . color   =   color \n         self . flavor   =   flavor \n         self . poisonous   =   poisonous \n\n     def   description ( self ): \n\n         print   \"I'm a  %s   %s  and I taste  %s .\"   %   ( self . color ,   self . name ,   self . flavor ) \n\n     def   is_edible ( self ): \n\n         if   not   self . poisonous : \n             print   \"Yep! I'm edible.\" \n         else : \n             print   \"Don't eat me! I am super poisonous.\"  lemon   =   Fruit ( \"lemon\" ,   \"yellow\" ,   \"sour\" ,   False )  lemon . description ()  lemon . is_edible ()    1\n2 I'm a yellow lemon and I taste sour.\nYep! I'm edible.   The class keyword, the name of the class, and the class from which the new class inherits in parentheses. By convention, user-defined Python class names start with a capital letter.  1\n2\n3\n4 class   Animal ( object ): \n\n\n     pass    __init__():  this function is required for classes, and it\u2019s used to initialize the objects it creates.  __init__()  always takes at least one argument, self, that refers to the object being created. You can think of  __init__()  as the function that \u201cboots up\u201d each object the class creates. Python will use the first parameter that  __init__()  receives to refer to the object being created; this is why it\u2019s often called self, since this parameter gives the object being created its identity.  1\n2\n3\n4\n5\n6 class   Animal ( object ): \n\n\n     def   __init__ ( self ,   name ): \n\n         self . name   =   name    Start creating objects. We can access attributes of our objects using dot notation.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 class   Animal ( object ): \n\n\n     def   __init__ ( self ,   name ): \n\n         self . name   =   name  zebra   =   Animal ( \"Jeffrey\" )   # instance of Animal  print   zebra . name   # instance with attributes    1 Jeffrey   More\u2026   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 Class   Animal ( object ): \n\n\n     def   __init__ ( self ,   name ,   age ,   is_hungry ): \n\n         self . name   =   name \n         self . age   =   age \n         self . is_hungry   =   is_hungry  zebra   =   Animal ( \"Jeffrey\" ,   2 ,   True )  giraffe   =   Animal ( \"Bruce\" ,   1 ,   False )  panda   =   Animal ( \"Chad\" ,   7 ,   True )  print   zebra . name ,   zebra . age ,   zebra . is_hungry  print   giraffe . name ,   giraffe . age ,   giraffe . is_hungry  print   panda . name ,   panda . age ,   panda . is_hungry    1\n2\n3\n4   File \"<ipython-input-55-08cd00c1ed56>\", line 1\n    Class Animal(object):\n               ^\nSyntaxError: invalid syntax   Another important aspect of Python classes is scope. The scope of a variable is the context in which it\u2019s visible to the program.  It may surprise you to learn that not all variables are accessible to all parts of a Python program at all times. When dealing with classes, you can have variables that are available everywhere (global variables), variables that are only available to members of a certain class (member variables), and variables that are only available to particular instances of a class (instance variables).  Global variable, (class) member variable, class variable, instance variable  The same goes for functions: some are available everywhere, some are only available to members of a certain class, and still others are only available to particular instance objects.  Global function, class function, instance function  They all have access to the member variable is_alive, since they\u2019re all members of the Animal class.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 class   Animal ( object ): \n\n\n     \"\"\"Makes cute animals.\"\"\" \n\n     is_alive   =   True \n\n     def   __init__ ( self ,   name ,   age ): \n\n         self . name   =   name \n         self . age   =   age  zebra   =   Animal ( \"Jeffrey\" ,   2 )  giraffe   =   Animal ( \"Bruce\" ,   1 )  panda   =   Animal ( \"Chad\" ,   7 )  print   zebra . name ,   zebra . age ,   zebra . is_alive  print   giraffe . name ,   giraffe . age ,   giraffe . is_alive  print   panda . name ,   panda . age ,   panda . is_alive    1\n2\n3 Jeffrey 2 True\nBruce 1 True\nChad 7 True   When a class has its own functions, those functions are called methods.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 class   Animal ( object ): \n\n\n     \"\"\"Makes cute animals.\"\"\" \n\n     is_alive   =   True \n\n     def   __init__ ( self ,   name ,   age ): \n\n         self . name   =   name \n         self . age   =   age \n\n     def   description ( self ): \n\n         print   self . name \n         print   self . age  hippo   =   Animal ( \"Yan\" ,   10 )  hippo . description ()   # will call the class function and print    1\n2 Yan\n10   A class can have any number of member variables.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 class   Animal ( object ): \n\n\n     \"\"\"Makes cute animals.\"\"\" \n\n     is_alive   =   True \n     health   =   \"good\" \n\n     def   __init__ ( self ,   name ,   age ): \n\n         self . name   =   name \n         self . age   =   age \n\n     def   description ( self ): \n\n         print   self . name \n         print   self . age  hippo   =   Animal ( \"Yan\" ,   10 )  sloth   =   Animal ( \"George\" ,   1 )  ocelot   =   Animal ( \"Holly\" ,   2 )  print   hippo . health   # will call the class variable  print   sloth . health  print   ocelot . health    1\n2\n3 good\ngood\ngood   Kind of classes and objects you might find in commercial software: here we have a basic  ShoppingCart  class for creating shopping cart objects for website customers; though basic, it\u2019s similar to what you\u2019d see in a real program.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33 class   ShoppingCart ( object ): \n\n\n     items_in_cart   =   {}   # try it with an empty or not dictionary \n     items_in_cart   =   { \"cereal\" : 1 } \n\n     def   __init__ ( self ,   customer_name ): \n\n         self . customer_name   =   customer_name \n\n     def   add_item ( self ,   product ,   price ): \n\n         \"\"\"Add product to the cart.\"\"\" \n\n         if   not   product   in   self . items_in_cart :   # check the dictionary \n             self . items_in_cart [ product ]   =   price \n             print   product   +   \" added.\" \n         else : \n             print   product   +   \" is already in the cart.\" \n\n     def   remove_item ( self ,   product ): \n\n         \"\"\"Remove product from the cart.\"\"\" \n\n         if   product   in   self . items_in_cart :   # check the dictionary \n             del   self . items_in_cart [ product ] \n             print   product   +   \" removed.\" \n         else : \n             print   product   +   \" is not in the cart.\"  my_cart   =   ShoppingCart ( \"Jean\" )   # instance  my_cart . add_item ( \"cereal\" , 1 )   # class function    1 cereal is already in the cart.   Inheritance is a tricky concept, so let\u2019s go through it step by step. Inheritance is the process by which one class takes on the attributes and methods of another, and it\u2019s used to express an is-a relationship. For example, a Panda is a bear, so a Panda class could inherit from a Bear class.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 class   Customer ( object ): \n\n\n     \"\"\"Produces objects that represent customers.\"\"\" \n\n     def   __init__ ( self ,   customer_id ): \n\n         self . customer_id   =   customer_id \n\n     def   display_cart ( self ): \n\n         print   \"I'm a string that stands in for the contents of your shopping cart!\"  class   ReturningCustomer ( Customer ): \n\n\n     \"\"\"For customers of the repeat variety.\"\"\" \n\n     def   display_order_history ( self ): \n\n         print   \"I'm a string that stands in for your order history!\"  monty_python   =   ReturningCustomer ( \"ID: 12345\" )   # class instance  monty_python . display_cart ()   # inherited from the 1st class  monty_python . display_order_history ()   # from the current class    1\n2 I'm a string that stands in for the contents of your shopping cart!\nI'm a string that stands in for your order history!   COMPLETE EXAMPLE.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67 class   Shape ( object ): \n\n\n     \"\"\"make shapes\"\"\" \n\n     number_of_sides   =   5 \n\n     def   __init__ ( self ,   number_of_sides ): \n\n         self . number_of_sides   =   number_of_sides  my_shape   =   Shape ( 4 )   # instance  class   Triangle ( Shape ): \n\n\n     number_of_3sides   =   3 \n     # number_of_sides = 3 # would override the above \n\n\n     def   __init__ ( self ,   angle1 ,   angle2 ,   angle3 ): \n\n         self . angle1   =   angle1 \n         self . angle2   =   angle2 \n         self . angle3   =   angle3 \n\n     def   check_angles ( self ): \n\n         if   self . angle1   +   self . angle2   +   self . angle3   ==   180 : \n             return   True \n         else : \n             return   False  my_triangle   =   Triangle ( 90 ,   30 ,   60 )   # instance  print   my_triangle . number_of_sides   # inherit  print   my_shape . number_of_sides  print   my_triangle . number_of_3sides  print   my_triangle . check_angles ()  class   Equilateral ( Triangle ): \n\n\n     angle   =   60 \n\n     def   __init__ ( self ): \n\n         self . angle1   =   self . angle   # override the above \n         self . angle2   =   self . angle \n         self . angle3   =   self . angle  my_equilateral   =   Equilateral ()   # instance  print   my_equilateral . angle  print   my_equilateral . angle1   # based on variable angle  print   my_equilateral . number_of_sides   # inherit  print   my_equilateral . number_of_3sides   # inherit  print   my_equilateral . check_angles ()   # inherit; method way  print   Equilateral . check_angles ( my_equilateral )   # function way; IDEM !!!     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 5\n4\n3\nTrue\n60\n60\n5\n3\nTrue\nTrue   Sometimes you\u2019ll want one class that inherits from another to not only take on the methods and attributes of its parent, but to override one or more of them.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 class   Employee ( object ): \n\n\n     \"\"\"Models real-life employees!\"\"\" \n\n     def   __init__ ( self ,   employee_name ): \n\n         self . employee_name   =   employee_name \n\n     def   calculate_wage ( self ,   hours ): \n\n         self . hours   =   hours \n         return   hours   *   20.00  class   PartTimeEmployee ( Employee ): \n\n\n     def   calculate_wage ( self ,   hours ): \n\n         self . hours   =   hours \n         return   hours   *   12.00   # override what is naturally inherited     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 class   Employee ( object ): \n\n\n     def   __init__ ( self ,   name ): \n\n         self . name   =   name \n\n     def   greet ( self ,   other ): \n\n         print   \"Hello,  %s \"   %   other . name  class   CEO ( Employee ): \n\n     def   greet ( self ,   other ): \n\n         print   \"Get back to work,  %s !\"   %   other . name   # override  ceo   =   CEO ( \"Emily\" )  emp   =   Employee ( \"Steve\" )  emp . greet ( ceo )  ceo . greet ( emp )    1\n2 Hello, Emily\nGet back to work, Steve!   On the flip side, sometimes you\u2019ll be working with a derived class (or subclass) and realize that you\u2019ve overwritten a method or attribute defined in that class\u2019 base class (also called a parent or superclass) that you actually need. Have no fear! You can directly access the attributes or methods of a superclass with Python\u2019s built-in super call.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 class   Employee ( object ): \n\n\n     \"\"\"Models real-life employees!\"\"\" \n\n     def   __init__ ( self ,   employee_name ): \n\n         self . employee_name   =   employee_name \n\n     def   calculate_wage ( self ,   hours ): \n\n         self . hours   =   hours \n         return   hours   *   20.00  class   PartTimeEmployee ( Employee ): \n\n\n     def   calculate_wage ( self ,   hours ):   # override \n\n         self . hours   =   hours \n         return   hours   *   12.00 \n\n     def   full_time_wage ( self ,   hours ):   # super call: associate the parent's class function with child's new function withtout retyping the function \n\n         return   super ( PartTimeEmployee ,   self ) . calculate_wage ( hours )  milton   =   PartTimeEmployee ( \"Jack\" )  print   milton . full_time_wage ( 10 )    1 200.0",
            "title": "Introduction to Classes"
        },
        {
            "location": "/Codecademy Python/#more-on-classes",
            "text": "1\n2\n3\n4\n5\n6\n7 class   Car ( object ):   # create a class \n\n\n     pass  my_car   =   Car ()   # create a class instance    1\n2\n3\n4\n5\n6\n7\n8\n9 class   Car ( object ): \n\n\n     condition   =   \"new\"   # create a member variables  my_car   =   Car ()  print   my_car . condition   # call the member variable    1 new    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   Car ( object ): \n\n\n     condition   =   \"new\" \n\n     def   __init__ ( self ,   model ,   color ,   mpg ):   # initialize or boot up! \n\n         self . model   =   model   # assign class variables \n         self . color   =   color \n         self . mpg   =   mpg  my_car   =   Car ( \"DeLorean\" ,   \"silver\" ,   88 )   # create an instance with its class variables  print   my_car . condition  print   my_car . model   # call the class variables...  print   my_car . color  print   my_car . mpg    1\n2\n3\n4 new\nDeLorean\nsilver\n88    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 class   Car ( object ): \n\n\n     condition   =   \"new\" \n\n     def   __init__ ( self ,   model ,   color ,   mpg ): \n\n         self . model   =   model \n         self . color   =   color \n         self . mpg   =   mpg \n\n     def   display_car ( self ): \n\n         return   \"This is a  %s   %s  with  %s  MPG.\"   %   ( self . color ,   self . model ,   str ( self . mpg ))   # create a class method (function)  my_car   =   Car ( \"DeLorean\" ,   \"silver\" ,   88 )  print   my_car . condition  print   my_car . model  print   my_car . color  print   my_car . mpg  print   my_car . display_car ()   # call the class method    1\n2\n3\n4\n5 new\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32 class   Car ( object ): \n\n\n     condition   =   \"new\" \n\n     def   __init__ ( self ,   model ,   color ,   mpg ): \n\n         self . model   =   model \n         self . color   =   color \n         self . mpg   =   mpg \n\n     def   display_car ( self ): \n\n         return   \"This is a  %s   %s  with  %s  MPG.\"   %   ( self . color ,   self . model ,   str ( self . mpg )) \n\n     def   drive_car ( self ): \n\n         self . condition   =   \"used\"  my_car   =   Car ( \"DeLorean\" ,   \"silver\" ,   88 )  print   my_car . condition   # 'new'  print   my_car . model  print   my_car . color  print   my_car . mpg  print   my_car . display_car ()  my_car . drive_car ()  print   my_car . condition   # the condition changes to 'used'    1\n2\n3\n4\n5\n6 new\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58 class   Car ( object ): \n\n\n     condition   =   \"new\" \n\n     def   __init__ ( self ,   model ,   color ,   mpg ): \n\n         self . model   =   model \n         self . color   =   color \n         self . mpg   =   mpg \n\n     def   display_car ( self ): \n\n         return   \"This is a  %s   %s  with  %s  MPG.\"   %   ( self . color ,   self . model ,   str ( self . mpg )) \n\n     def   drive_car ( self ): \n\n         self . condition   =   \"used\"  my_car   =   Car ( \"DeLorean\" ,   \"silver\" ,   88 )  print   my_car . condition  print   my_car . model  print   my_car . color  print   my_car . mpg  print   my_car . display_car ()  my_car . drive_car ()  print   my_car . condition  class   ElectricCar ( Car ): \n\n\n     def   __init__ ( self ,   model ,   color ,   mpg ,   battery_type ):   # initialize with some partial inheritance from class Car \n\n         Car . __init__ ( self ,   model ,   color ,   mpg )   # assign class variable by inheritance from class Car \n         self . battery_type   =   battery_type   # assign a new class variable  my_car   =   ElectricCar ( \"Telsa\" ,   \"red\" ,   0 ,   \"molten salt\" )   # create an instance with its class variables; OVERRIDE the above  print   my_car . condition   # call the class variables; OVERRIDE the above  print   my_car . model   # call the member variable; OVERRIDE the above  print   my_car . color  print   my_car . mpg  my_ride   =   ElectricCar ( \"Google\" ,   \"blue\" ,   10 ,   \"electrical\" )   # create an instance with its class variables  print   my_ride . condition   # call the class variables  print   my_ride . model   # call the member variable  print   my_ride . color  print   my_ride . mpg     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 new\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused\nnew\nTelsa\nred\n0\nnew\nGoogle\nblue\n10    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65 class   Car ( object ): \n\n\n     condition   =   \"new\" \n\n     def   __init__ ( self ,   model ,   color ,   mpg ): \n\n         self . model   =   model \n         self . color   =   color \n         self . mpg   =   mpg \n\n     def   display_car ( self ): \n\n         return   \"This is a  %s   %s  with  %s  MPG.\"   %   ( self . color ,   self . model ,   str ( self . mpg )) \n\n     def   drive_car ( self ): \n\n         self . condition   =   \"used\"  my_car   =   Car ( \"DeLorean\" ,   \"silver\" ,   88 )  print   my_car . condition   +   \"!\"   # call the member variable; 'new'  print   my_car . model  print   my_car . color  print   my_car . mpg  print   my_car . display_car ()  my_car . drive_car ()   # call the class method  print   my_car . condition   +   \"!!\"   # member variable; now 'used'  class   ElectricCar ( Car ): \n\n\n     def   __init__ ( self ,   model ,   color ,   mpg ,   battery_type ): \n\n         Car . __init__ ( self ,   model ,   color ,   mpg ) \n         self . battery_type   =   battery_type \n\n     def   drive_car ( self ):   # create a class method; OVERRIDE the above \n\n         self . condition   =   \"like new\"  my_car   =   ElectricCar ( \"Telsa\" ,   \"red\" ,   0 ,   \"molten salt\" )  print   my_car . condition   +   \"!\"   # 'new' again  my_car . drive_car ()   # call the class method  print   my_car . condition   +   \"!!\"   # 'like new' now  print   my_car . model  print   my_car . color  print   my_car . mpg  my_ride   =   ElectricCar ( \"Google\" ,   \"blue\" ,   10 ,   \"electrical\" )  print   my_ride . condition   +   \"!\"   # 'used' again  my_ride . drive_car () # call the class method  print   my_ride . condition   +   \"!!\"   # 'like new' now  print   my_ride . model  print   my_ride . color  print   my_ride . mpg     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 new!\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused!!\nnew!\nlike new!!\nTelsa\nred\n0\nnew!\nlike new!!\nGoogle\nblue\n10    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 class   Point3D ( object ): \n\n\n     def   __init__ ( self ,   x ,   y ,   z ):   # initialize \n\n         self . x   =   x \n         self . y   =   y \n         self . z   =   z  # __repr__() method, which is short for representation; by providing a return value in this method, we can tell Python how to represent an object of our class (for instance, when using a print statement). \n\n     def   __repr__ ( self ): \n\n         return   \"( %d ,  %d ,  %d )\"   %   ( self . x ,   self . y ,   self . z )  my_point   =   Point3D ( 1 , 2 , 3 )   # instance  # Print my_point.__repr__() w/o adding variables  print   my_point    1 (1, 2, 3)",
            "title": "More on Classes"
        },
        {
            "location": "/Codecademy Python/#quiz-11",
            "text": "Python writes data to a file when you close the file!",
            "title": "Quiz 11"
        },
        {
            "location": "/Codecademy Python/#project-bank-account",
            "text": "In this project, we\u2019ll create a Python class that can be used to create and manipulate a personal bank account.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49 class   BankAccount ( object ): \n\n\n     balance   =   0 \n\n     def   __init__ ( self ,   name ): \n         self . name   =   name \n\n     def   __repr__ ( self ): \n\n     # The __repr__() method defines what represents the object when a user tries to print the BnkAccount object using print. Let's add to this method and make it descriptive. \n\n         return   \" %s 's account; Balance: $ %.2f \"   %   ( self . name ,   self . balance )   # $%.2f for 2 decimals, self.class attribute, self.member variable \n\n     def   show_balance ( self ): \n\n         print   \"Balance: $ %.2f \\n \"   %   ( self . balance ) \n\n     def   deposit ( self ,   amount ): \n\n         if   amount   <=   0 : \n             print   \"No Account. Invalid \\n \" \n             return   # # return will exit the function, w/o return, the function jumps to the next line... \n         else : \n             print   \"Depositing: $ %.2f \"   %   ( amount )   # ? \n             self . balance   +=   amount \n             self . show_balance ()   # calling a class function \n\n     def   withdraw ( self ,   amount ): \n\n         if   amount   >   self . balance : \n             print   \"More than the balance. Invalid \\n \" \n             return \n         else : \n             print   \"Withdrawing: $ %.2f \"   %   ( amount )   # ? \n             self . balance   -=   amount \n             self . show_balance ()  my_account   =   BankAccount ( \"Ugo\" )   # Ugo is the argument 'name'  print   my_account   # launch the __repr__  my_account . show_balance ()   # launch the class function (method) show_balance  my_account . deposit ( 2000 )  my_account . withdraw ( 3000 )  my_account . withdraw ( 1000 )  print   my_account     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 Ugo's account; Balance: $0.00\nBalance: $0.00\n\nDepositing: $2000.00\nBalance: $2000.00\n\nMore than the balance. Invalid\n\nWithdrawing: $1000.00\nBalance: $1000.00\n\nUgo's account; Balance: $1000.00",
            "title": "Project Bank Account"
        },
        {
            "location": "/Codecademy Python/#unit-12-file-input-and-output",
            "text": "",
            "title": "UNIT 12, File Input and Output"
        },
        {
            "location": "/Codecademy Python/#file-inputoutput",
            "text": "Read information from a file on your computer, and/or write that information to another file? This process is called file I/O.  1\n2\n3\n4\n5\n6\n7\n8 my_list   =   [ i   **   2   for   i   in   range ( 1 , 11 )]  f   =   open ( \"output.txt\" ,   \"w\" )   # create a file  for   item   in   my_list : \n     f . write ( str ( item )   +   \" \\n \" )   # write  f . close ()   # save, close    First.  1 f   =   open ( \"output.txt\" ,   \"w\" )   # This told Python to open output.txt in \"w\" mode (\"w\" stands for \"write\").    Read and write.  1\n2\n3\n4\n5\n6\n7\n8 my_list   =   [ i   **   2   for   i   in   range ( 1 , 11 )]  my_file   =   open ( \"output.txt\" ,   \"r+\" )   # the file must exist  for   item   in   my_list : \n     my_file . write ( str ( item )   +   \" \\n \" )   # overwrite  my_file . close ()   # save, close    Read on the console.  1\n2\n3\n4 my_file   =   open ( \"output.txt\" ,   \"r\" )   # the file must exist  print   my_file . read ()  my_file . close ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 1\n4\n9\n16\n25\n36\n49\n64\n81\n100   Read lines on the console.  1\n2\n3\n4\n5\n6\n7 my_file   =   open ( \"output.txt\" ,   \"r\" )   # the file must exist  print   my_file . readline ()   # read line 1  print   my_file . readline ()   # read line 2 automatically  print   my_file . readline ()   # read line 3  my_file . close ()    1\n2\n3\n4\n5 1\n\n4\n\n9   Open the file for reading.  1\n2\n3 read_file   =   open ( \"output.txt\" ,   \"r\" )  print   read_file . read ()  read_file . close ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 1\n4\n9\n16\n25\n36\n49\n64\n81\n100   Use a second file handler to open the file for writing.  1\n2\n3\n4\n5\n6\n7\n8\n9 write_file   =   open ( \"text.txt\" ,   \"w\" )  # Write to the file  write_file . write ( \"Not closing files is VERY BAD.\" )  # Try to read from the file  print   write_file . read ()   # Not working...``  write_file . close ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 ---------------------------------------------------------------------------\n\nIOError                                   Traceback (most recent call last)\n\n<ipython-input-87-db256164394e> in <module>()\n      5 \n      6 # Try to read from the file\n----> 7 print write_file.read() # Not working...``\n      8 \n      9 write_file.close()\n\n\nIOError: File not open for reading   Try.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 read_file   =   open ( \"text.txt\" ,   \"r\" )  print   read_file . read ()  write_file   =   open ( \"text.txt\" ,   \"w\" )  write_file . write ( \"Not closing files is VERY BAD.\" )  write_file . close ()   # close it!  write_file   =   open ( \"text.txt\" ,   \"r\" )   # reopen it in read mode  print   write_file . read ()   # working  write_file . close ()    1\n2 Not closing files is VERY BAD.\nNot closing files is VERY BAD.   And.  1\n2\n3 write_file   =   open ( \"text.txt\" ,   \"w\" )  write_file . write ( \"Not closing files is VERY BAD.\" )   # could be a variable  write_file . close ()    1\n2\n3 read_file   =   open ( \"text.txt\" ,   \"r\" )  print   read_file . read ()  read_file . close ()    1 Not closing files is VERY BAD.   1\n2\n3 write_file   =   open ( \"text.txt\" ,   \"w\" )  write_file . truncate ()   # delete  write_file . close ()    1\n2\n3 read_file   =   open ( \"text.txt\" ,   \"r\" )  print   read_file . read ()  read_file . close ()    You may not know this, but file objects contain a special pair of built-in methods:  __enter__()  and  __exit__() . The details aren\u2019t important, but what is important is that when a file object\u2019s  __exit__()  method is invoked, it automatically closes the file. How do we invoke this method? With with and as.  1\n2\n3 with   open ( \"text.txt\" ,   \"w\" )   as   textfile :   # a variable \n     textfile . write ( \"Success!\" ) \n     textfile . close ()    1\n2\n3 with   open ( \"text.txt\" ,   \"r\" )   as   textfile : \n     print   textfile . read () \n     textfile . close ()    1 Success!",
            "title": "File Input/Output"
        },
        {
            "location": "/Codecademy Python/#more-io",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 with   open ( \"text.txt\" ,   \"w\" )   as   my_file : \n     my_file . write ( \"Youpee!!!\" )  print   my_file . closed   # true  if   not   my_file . closed   ==   True : \n     my_file . close ()  print   my_file . closed   # true  with   open ( \"text.txt\" ,   \"r\" )   as   my_file : \n     print   my_file . read ()  print   my_file . closed   # true  with   open ( \"text.txt\" ,   \"r\" )   as   my_file : \n     print   my_file . closed   # false  my_file . close ()  print   my_file . closed   # true    1\n2\n3\n4\n5\n6 True\nTrue\nYoupee!!!\nTrue\nFalse\nTrue",
            "title": "More I/O"
        },
        {
            "location": "/Codecademy Python/#quiz-12",
            "text": "OK",
            "title": "Quiz 12"
        },
        {
            "location": "/Codecademy Python/#project-dna-analysis",
            "text": "In this project, we\u2019ll use many of the concepts you\u2019ve learned throughout the Python course in order to do some DNA analysis for a crime investigation.  The scenario:  A spy deleted important files from a computer. There were a few witnesses at the scene of the crime, but no one is sure who exactly the spy was. Three possible suspects were apprehended based on surveillance video. Each suspect had a sample of DNA taken from them. The computer\u2019s keyboard was also swabbed for DNA evidence and, luckily, one small DNA sample was successfully retrieved from the computer\u2019s keyboard.  Given the three suspects\u2019 DNA and the sample DNA retreived from the keyboard, it\u2019s up to you to figure out who the spy is!  The project should have methods for each of the following:   Given a file, read in the DNA for each suspect and save it as a string  Take a DNA string and split it into a list of codons  Iterate through a suspect\u2019s codon list to see how many of their codons match the sample codons  Pick the right suspect to continue the investigation on    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 sample   =   [ 'GTA' , 'GGG' , 'CAC' ]  def   read_dna ( dna_file ): \n\n     dna_data   =   \"\"   # empty string \n\n     with   open ( dna_file ,   \"r\" )   as   f :   # f = open(dna_file, \"r\"); with, as \n         for   line   in   f : \n             dna_data   +=   line \n         return   dna_data  def   dna_codons ( dna ): \n\n     codons   =   [] \n     for   i   in   range ( 0 , len ( dna ), 3 ):   # slice strings of 3 letters \n         if   i + 3   <   len ( dna ):   # make sure that you don't add a string to the codon list that isn't at least 3 letters long \n             codons . append ( dna [ i : i + 3 ])   # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3 \n     return   codons  def   match_dna ( dna ): \n\n     matches   =   0 \n     for   codon   in   dna : \n         if   codon   in   sample :   # if ,in \n             matches   +=   1 \n     return   matches  def   is_criminal ( dna_sample ): \n\n     dna_data   =   read_dna ( dna_sample ) \n     codons   =   dna_codons ( dna_data ) \n     num_matches   =   match_dna ( codons ) \n     if   num_matches   >=   3 : \n         print (( dna_sample )[: - 4 ]) . upper (), \n         print ( \": number of matches = \"   +   str ( num_matches )   +   \"; the investigation will proceed further more with this suspect.\" ) \n     else : \n         print (( dna_sample )[: - 4 ]) . upper (), \n         print ( \": no evidence; the suspect can be freed.\" )  a   =   \"suspect1.txt\"  is_criminal ( a )  a   =   \"suspect2.txt\"  is_criminal ( a )  a   =   \"suspect3.txt\"  is_criminal ( a )    1\n2\n3 SUSPECT1   :   no   evidence ;   the   suspect   can   be   freed .  SUSPECT2   :   number   of   matches   =   6 ;   the   investigation   will   proceed   further   more   with   this   suspect .  SUSPECT3   :   no   evidence ;   the   suspect   can   be   freed .    suspect1.txt  1 ATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT   suspect2.txt  1 CCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG   suspect3.txt  1 TCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA",
            "title": "Project DNA Analysis"
        },
        {
            "location": "/Learn Python the Hard Way/",
            "text": "CONTENT\n\n\nExercise 1, A Good First Program\n\n\nShorcuts, Good to Know\n\n\n\n\n\n\nExercise 3, Numbers and Math\n\n\nExercise 4, Variables and Names\n\n\nExercise 5, More Variables and Printing\n\n\nExercise 6, Strings and Text\n\n\nExercise 15, Reading Files\n\n\nExercise 16, Reading and Writing Files\n\n\nExercise 17, More Files\n\n\nExercise 18, Names, Variables, Code, Functions\n\n\nExercise 19, Functions and Variables\n\n\nExercise 20, Functions and Files\n\n\nExercise 21, Functions Can Return Something or not\u2026\n\n\nExercise 23, Read Some Code\n\n\nExercise 24, More Practice\n\n\nExercise 25, Even More Practice\n\n\nExercise 32, Loops and Lists\n\n\nExercise 33, While Loops\n\n\nExercise 34, Accessing Elements of Lists\n\n\nExercise 38, Doing Things to Lists\n\n\nExercise 39, Dictionaries, Oh Lovely Dictionaries\n\n\nExercise 40, Modules, Classes, and Objects\n\n\nExercise 41, Learning to Speak Object-Oriented\n\n\nExercise 42, Is-A, Has-A, Objects, and Classes\n\n\nExercise 43, Gothons from Planet Percal #25\n\n\nWrap up\n\n\n\n\n\n\nExercise 44, Inheritance vs Composition\n\n\nWhen to Use Inheritance or Composition\n\n\nFunction Style\n\n\nComposition\n\n\nImplicit Inheritance\n\n\nInherit from both Classes\n\n\nOverride Explicitly\n\n\nAlter Before or After\n\n\nSuper\n\n\nAll Three Combined\n\n\n\n\n\n\nExercise 45, You Make a Game\n\n\nExercise 46, A Project Skeleton\n\n\nExercise 47, Automated Testing\n\n\nMiscellaneous notes\n\n\n\n\n\n\nExercise 50, Your First Website\n\n\nAn overview\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes, code snippets, and excerpts from the course. Python 2. From the book and website:\n\n\n\n\nLPTHW\n\n\n\n\n\n\nExercise 1, A Good First Program\n\u00b6\n\n\n~ shebang, begin, script~\n\n\n\n\nThis is a shebang (language): \n# -*- coding: utf-8 -*-\n.\n\n\n#\n is an octothorpe or pound or hash or mesh.\n\n\nAdd a second line (Python version): \n/usr/bin/env python 2\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# -*- coding: utf-8 -*-\n\n\n#! /usr/bin/env python 2\n\n\n\nprint\n \n\"Hello World!\"\n\n\nprint\n \n\"Hello Again\"\n\n\nprint\n \n\"I like typing this.\"\n\n\nprint\n \n\"This is fun.\"\n\n\nprint\n \n'Yay! Printing.'\n\n\nprint\n \n\"I'd much rather you 'not'\"\n\n\nprint\n \n'I said do not touch this.'\n\n\nprint\n \n\"testing2\"\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nHello World!\nHello Again\nI like typing this.\nThis is fun.\nYay! Printing.\nI'd much rather you 'not'\nI said do not touch this.\ntesting2\n\n\n\n\n\n\nShorcuts, Good to Know\n\u00b6\n\n\n\n\nIn the terminal, type \npydoc <python item>\n to invoke the documentation on a python item (built-in functions, methods, objects, etc.).\n\n\nctrl+c\n and/or \nctrl+d\n break a loop.\n\n\n\n\nExercise 3, Numbers and Math\n\u00b6\n\n\n~ print, format, calculate~\n\n\n1\nprint\n \n\"I will now count my chickens:\"\n\n\n\n\n\n\n\n1\nI will now count my chickens:\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nprint\n \n\"Hens\"\n,\n \n25\n \n+\n \n30\n \n/\n \n6\n\n\nprint\n \n\"Roosters\"\n,\n \n100\n \n-\n \n25\n \n*\n \n3\n \n%\n \n4\n\n\n\nprint\n \n\"Now I will count the eggs:\"\n\n\n\nprint\n \n3\n \n+\n \n2\n \n+\n \n1\n \n-\n \n5\n \n+\n \n4\n \n%\n \n2\n \n-\n \n1\n \n/\n \n4\n \n+\n \n6\n\n\n# copy 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 straight into the shell and run it\n\n\n# you will get the result only (don't add print before the statement)\n\n\n\n\n\n\n\n1\n2\n3\n4\nHens 30\nRoosters 97\nNow I will count the eggs:\n7\n\n\n\n\n\n\n1\n2\nprint\n \n\"Is it true that 3 + 2 < 5 - 7\"\n\n\nprint\n \n3\n \n+\n \n2\n \n<\n \n5\n \n-\n \n7\n\n\n\n\n\n\n\n1\n2\nIs it true that 3 + 2 < 5 - 7\nFalse\n\n\n\n\n\n\n1\n2\nprint\n \n\"What is 3 + 2?\"\n,\n \n3\n \n+\n \n2\n\n\nprint\n \n\"What is 5 - 7?\"\n,\n \n5\n \n-\n \n7\n\n\n\n\n\n\n\n1\n2\nWhat is 3 + 2? 5\nWhat is 5 - 7? -2\n\n\n\n\n\n\n1\n2\nprint\n \n\"Oh, that's why it's False.\"\n\n\nprint\n \n\"How about some more.\"\n\n\n\n\n\n\n\n1\n2\nOh, that's why it's False.\nHow about some more.\n\n\n\n\n\n\n1\n2\n3\nprint\n \n\"Is it greater?\"\n,\n \n5\n \n>\n \n-\n2\n\n\nprint\n \n\"Is it greater or equal?\"\n,\n \n5\n \n>=\n \n-\n2\n\n\nprint\n \n\"Is it less or equal?\"\n,\n \n5\n \n<=\n \n-\n2\n\n\n\n\n\n\n\n1\n2\n3\nIs it greater? True\nIs it greater or equal? True\nIs it less or equal? False\n\n\n\n\n\n\n1\nprint\n \n(\n1\n \n+\n \n1\n)\n \n# integer\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n\n\n1\nprint\n \n(\n1.0\n \n+\n \n1\n)\n \n# float\n\n\n\n\n\n\n\n1\n2.0\n\n\n\n\n\n\nExercise 4, Variables and Names\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\ncars\n \n=\n \n100\n\n\nspace_in_a_car\n \n=\n \n4.0\n \n# float\n\n\ndrivers\n \n=\n \n30\n\n\npassengers\n \n=\n \n90\n\n\ncars_not_driven\n \n=\n \ncars\n \n-\n \ndrivers\n\n\ncars_driven\n \n=\n \ndrivers\n\n\ncarpool_capacity\n \n=\n \ncars_driven\n \n*\n \nspace_in_a_car\n\n\naverage_passengers_per_car\n \n=\n \npassengers\n \n/\n \ncars_driven\n\n\n\nprint\n \n\"There are\"\n,\n \ncars\n,\n \n\"cars available.\"\n\n\nprint\n \n\"There are only\"\n,\n \ndrivers\n,\n \n\"drivers available.\"\n\n\nprint\n \n\"There will be\"\n,\n \ncars_not_driven\n,\n \n\"empty cars today.\"\n\n\nprint\n \n\"We can transport\"\n,\n \ncarpool_capacity\n,\n \n\"people today.\"\n\n\nprint\n \n\"We have\"\n,\n \npassengers\n,\n \n\"to carpool today.\"\n\n\nprint\n \n\"We need to put about\"\n,\n \naverage_passengers_per_car\n,\n \n\"in each cars.\"\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nThere are 100 cars available.\nThere are only 30 drivers available.\nThere will be 70 empty cars today.\nWe can transport 120.0 people today.\nWe have 90 to carpool today.\nWe need to put about 3 in each cars.\n\n\n\n\n\n\n\n\nA constant variable, a variable that should never be altered, should be set in capital as \nPI = 3.1416\n.\n\n\n\n\nExercise 5, More Variables and Printing\n\u00b6\n\n\n\n\nCall a variable with:\n\n\n%r\n; raw variable.\n\n\n%s\n; string.\n\n\n%d\n; digit.\n\n\n\n\n\n\nMake the choice depending on the variable type.\n\n\nHowever, if calling a \u2018string\u2019 (text, NLP), it must be done with \n%s\n; \u2018numbers\u2019 is done with \n%r\n and \n%d\n (possibly with \n%s\n). \n\n\nThe use and effects of the different calls is explained in Exercises 6 and 21.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nmy_name\n \n=\n \n'Zed A. Shaw'\n\n\nmy_age\n \n=\n \n35\n \n# not a lie\n\n\nmy_height\n \n=\n \n74\n \n# inches\n\n\nmy_weight\n \n=\n \n180\n \n# lbs\n\n\nmy_eyes\n \n=\n \n'Blue'\n\n\nmy_teeth\n \n=\n \n'White'\n\n\nmy_hair\n \n=\n \n'Brown'\n\n\n\nprint\n \n\"Let's talk about \n%s\n.\"\n \n%\n \nmy_name\n\n\n\n\n\n\n\n1\nLet's talk about Zed A. Shaw.\n\n\n\n\n\n\n1\n2\n3\n4\n# does the same thing\n\n\nprint\n \n\"He's \n%d\n years old.\"\n \n%\nmy_age\n\n\nprint\n \n\"He's\"\n,\n \nmy_age\n,\n\"years old.\"\n\n\nprint\n \n\"He will be\"\n,\n \nmy_age\n \n+\n \n1\n,\n\"years old next year.\"\n\n\n\n\n\n\n\n1\n2\n3\nHe's 35 years old.\nHe's 35 years old.\nHe will be 36 years old next year.\n\n\n\n\n\n\n1\n2\n3\n4\n5\nprint\n \n\"He's \n%d\n inches tall.\"\n \n%\n \nmy_height\n\n\nprint\n \n\"He's \n%d\n pounds heavy\"\n \n%\n \nmy_weight\n\n\nprint\n \n\"Actually that's not too heavy.\"\n\n\nprint\n \n\"He's got \n%s\n eyes and \n%s\n hair.\"\n \n%\n \n(\nmy_eyes\n,\n \nmy_hair\n)\n\n\nprint\n \n\"His teeth are usually \n%s\n depending on the coffee.\"\n \n%\n \nmy_teeth\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nHe's 74 inches tall.\nHe's 180 pounds heavy\nActually that's not too heavy.\nHe's got Blue eyes and Brown hair.\nHis teeth are usually White depending on the coffee.\n\n\n\n\n\n\n1\n2\n3\n# this line is tricky, try to get it exactly right\n\n\nprint\n \n\"If I add \n%d\n, \n%d\n, and \n%d\n I get \n%d\n.\"\n \n%\n \n(\n\n    \nmy_age\n,\n \nmy_height\n,\n \nmy_weight\n,\n \nmy_age\n \n+\n \nmy_height\n \n+\n \nmy_weight\n)\n\n\n\n\n\n\n\n1\nIf I add 35, 74, and 180 I get 289.\n\n\n\n\n\n\nExercise 6, Strings and Text\n\u00b6\n\n\n~ concatenate~\n\n\n\n\n%s\n and \n%r\n help when concatenating strings.\n\n\n%r\n does not coerce the variable into a format (\n%s\n string or \n%d\n digit).\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nx\n \n=\n \n\"There are \n%d\n types of people.\"\n \n%\n \n10\n\n\nbinary\n \n=\n \n\"binary\"\n\n\ndo_not\n \n=\n \n\"don't\"\n\n\n\ny\n \n=\n \n\"Those who know \n%s\n and those who \n%s\n.\"\n \n%\n \n(\nbinary\n,\n \ndo_not\n)\n \n# assign strings or chains of strings to a variable\n\n\n\nprint\n \nx\n \n\nprint\n \ny\n\n\n\n\n\n\n\n1\n2\nThere are 10 types of people.\nThose who know binary and those who don't.\n\n\n\n\n\n\n1\n2\nprint\n \n\"I said: \n%r\n.\"\n \n%\n \nx\n\n\nprint\n \n\"I also said: '\n%s\n'.\"\n \n%\n \ny\n\n\n\n\n\n\n\n1\n2\nI said: 'There are 10 types of people.'.\nI also said: 'Those who know binary and those who don't.'.\n\n\n\n\n\n\n1\n2\n3\n4\nhilarious\n \n=\n \nFalse\n\n\njoke_evaluation\n \n=\n \n\"Isn't that joke so funny?! \n%r\n\"\n\n\n\nprint\n \njoke_evaluation\n \n%\n \nhilarious\n\n\n\n\n\n\n\n1\nIsn't that joke so funny?! False\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# add two strings together, concatenate them\n\n\nw\n \n=\n \n\"This is the left side of...\"\n\n\ne\n \n=\n \n\" a string with a right side.\"\n\n\n\n# with Numpy, it would have added (mathematically speaking)\n\n\nprint\n \nw\n \n+\n \ne\n\n\n\n\n\n\n\n1\nThis is the left side of... a string with a right side.\n\n\n\n\n\n\nExercise 15, Reading Files\n\u00b6\n\n\n\n\nBefore running this script, create a text file.\n\n\nType \n\"Test file thing\" > test.txt\n.\n\n\nThen type \ncat test.txt\n.\n\n\n\u2018test.txt\u2019 is now saved along the other scripts.\n\n\nRun the script: \npython ex15.py test.txt\n\n\nWith IPython, type: \n%run\n \nex15\n.\npy\n \ntest\n.\ntxt\n\n\nRun the script without the extra argument \ntest.txt\n to check the result.\n\n\n\n\n1\n%\nrun\n \nex15\n.\npy\n \ntest\n.\ntxt\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nHere's your file 'test.txt':\nTest file thing\nType the filename again:\n> test.txt\nHere's your file 'test.txt' again:\nTest file thing\n\n\n\n\n\n\n1\n%\nrun\n \nex15\n.\npy\n\n\n\n\n\n    ---------------------------------------------------------------------------\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nValueError\n                                \nTraceback\n \n(\nmost\n \nrecent\n \ncall\n \nlast\n)\n\n\n\\\\\nLearn\n \nPython\n \nthe\n \nHard\n \nWay\n\\\nex15\n.\npy\n \nin\n \n<\nmodule\n>\n()\n\n      \n1\n \nfrom\n \nsys\n \nimport\n \nargv\n\n      \n2\n \n\n---->\n \n3\n \nscript\n,\n \nfilename\n \n=\n \nargv\n\n      \n4\n \n      \n5\n \n# similarities\n\n\n\n\nValueError\n:\n \nneed\n \nmore\n \nthan\n \n1\n \nvalue\n \nto\n \nunpack\n\n\n\n\n\n\n\n\n\nLoad the script in IPython with \n%load\n to study it (don\u2019t run it!).\n\n\nThis type of script requires \u2018external\u2019 arguments when launched: \npython ex15.py test.txt\n\n\nIn the script itself, always preceed the \u2018external\u2019 arguments, like \nfilename\n, with \nscript\n since your write \npython ex15.py test.txt\n or \npython script argument\n when you launch the script.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n# %load ex15.py\n\n\nfrom\n \nsys\n \nimport\n \nargv\n\n\n\nscript\n,\n \nfilename\n \n=\n \nargv\n\n\n\n# similarities between\n\n\n# var = raw_input(\"string\", digit, \"prompt\")\n\n\n# var = open(\"string\")\n\n\n\ntxt\n \n=\n \nopen\n(\nfilename\n)\n \n# reference to a file, not the file\n\n\nprint\n \n\"Here's your file \n%r\n:\"\n \n%\n \nfilename\n\n\nprint\n \ntxt\n.\nread\n()\n\n\n\nprint\n \n\"Type the filename again:\"\n\n\nfile_again\n \n=\n \nraw_input\n(\n\"> \"\n)\n\n\n\ntext_again\n \n=\n \nopen\n(\nfile_again\n)\n\n\nprint\n \n\"Here's your file \n%r\n again:\"\n \n%\n \nfile_again\n\n\nprint\n \ntext_again\n.\nread\n()\n\n\n\n\n\n\n\n\n\nThe script again (this time, a manual import or copy-paste).\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nfrom\n \nsys\n \nimport\n \nargv\n\n\n\n# always preceed the arguments like 'filename' with 'script'\n\n\nscript\n,\n \nfilename\n \n=\n \nargv\n\n\n\n# similarities\n\n\n# var = raw_input(\"string\", digit, \"prompt\")\n\n\n# var = open(\"string\")\n\n\n\ntxt\n \n=\n \nopen\n(\nfilename\n)\n \n#reference to a file, not the file\n\n\nprint\n \n\"Here's your file \n%r\n:\"\n \n%\n \nfilename\n\n\nprint\n \ntxt\n.\nread\n()\n\n\n\nprint\n \n\"Type the filename again:\"\n\n\nfile_again\n \n=\n \nraw_input\n(\n\"> \"\n)\n\n\n\ntext_again\n \n=\n \nopen\n(\nfile_again\n)\n\n\nprint\n \n\"Here's your file \n%r\n again:\"\n \n%\n \nfile_again\n\n\nprint\n \ntext_again\n.\nread\n()\n\n\n\n\n\n\n\n\n\nNow, use this alternative code instead.\n\n\nIt does not require an external argument; the argument (\nfilename\n) is in the script itself (it has become a variable).\n\n\n\u2018Internal\u2019 arguments are for functions (\ndef function(arg1, arg2):\n); see Exercise 18.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nfilename\n \n=\n \n\"test.txt\"\n \n# however, the code is limited to this file only\n\n\n\ntxt\n \n=\n \nopen\n(\nfilename\n)\n \n# reference to a file, not the file\n\n\nprint\n \n\"Here's your file \n%r\n:\"\n \n%\n \nfilename\n\n\nprint\n \ntxt\n.\nread\n()\n\n\n\nprint\n \n\"Type the filename again:\"\n\n\nfile_again\n \n=\n \nraw_input\n(\n\"> \"\n)\n\n\n\ntext_again\n \n=\n \nopen\n(\nfile_again\n)\n\n\nprint\n \ntext_again\n.\nread\n()\n\n\n\n\n\n\n\nExercise 16, Reading and Writing Files\n\u00b6\n\n\n~ open, close, readlines, truncate~\n\n\n\n\n'w'\n, write, \n'r'\n, read, \n'a'\n, append.\n\n\n'w+'\n, read-write, \n'r+'\n, read-write, \n'a+'\n, read-append.\n\n\n'r'\n being the default argument, it is facultative when writing \nopen('file', 'r')\n.\n\n\nThe other arguments are mandatory; without them in \nopen('file, 'w')\n, you cannot write, truncate, append or replace.\n\n\nFirst, load the script in IPython by typing \n%load\n \nex16_1\n.\npy\n; it then turn to  a comment \n# %load ex16_1.py\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n# %load ex16.py\n\n\nfrom\n \nsys\n \nimport\n \nargv\n\n\n\nscript\n,\n \nfilename\n \n=\n \nargv\n\n\n\nprint\n \n\"We're going to erase \n%r\n.\"\n \n%\n \nfilename\n\n\nprint\n \n\"If you don't want that, hit CTRL-C (^C).\"\n\n\nprint\n \n\"If you do want that, hit RETURN.\"\n\n\n\nraw_input\n(\n\"?\"\n)\n\n\n\nprint\n \n\"Opening the file...\"\n\n\ntarget\n \n=\n \nopen\n(\nfilename\n,\n \n'w'\n)\n\n\n\nprint\n \n\"Truncating the file!\"\n\n\n\ntarget\n.\ntruncate\n()\n\n\n\nprint\n \n\"Now, I'm going to ask you  for three lines.\"\n\n\n\nline1\n \n=\n \nraw_input\n(\n\"line 1: \"\n)\n\n\nline2\n \n=\n \nraw_input\n(\n\"line 2: \"\n)\n\n\nline3\n \n=\n \nraw_input\n(\n\"line 3: \"\n)\n\n\n\nprint\n \n\"I'm going to write these to the file.\"\n\n\n\ntarget\n.\nwrite\n(\nline1\n)\n \n# 'write' variable line1\n\n\ntarget\n.\nwrite\n(\n\"\n\\n\n\"\n)\n \n# add a new line\n\n\ntarget\n.\nwrite\n(\nline2\n)\n\n\ntarget\n.\nwrite\n(\n\"\n\\n\n\"\n)\n\n\ntarget\n.\nwrite\n(\nline3\n)\n\n\ntarget\n.\nwrite\n(\n\"\n\\n\n\"\n)\n\n\n\nprint\n \n\"And finally, we close it.\"\n\n\ntarget\n.\nclose\n()\n\n\n\n\n\n\n\n\n\nNow, run the external file in IPython (it imports the code behind the scene).\n\n\nCareful: the script requires a second argument (\nfilename\n).\n\n\n\n\n1\n%\nrun\n \nex16\n.\npy\n \ntext\n.\ntxt\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nWe're going to erase 'text.txt'.\nIf you don't want that, hit CTRL-C (^C).\nIf you do want that, hit RETURN.\n?\nOpening the file...\nTruncating the file!\nNow, I'm going to ask you  for three lines.\nline 1: Good morning.\nline 2: How are you?\nline 3: I wish you a good day.\nI'm going to write these to the file.\nAnd finally, we close it.\n\n\n\n\n\n\n\n\nRead the file.\n\n\n\n\n1\n2\n3\n4\n5\nfilename\n \n=\n \n'text.txt'\n\n\n\ntarget\n \n=\n \nopen\n(\nfilename\n,\n \n'r'\n)\n\n\nprint\n \ntarget\n.\nread\n()\n\n\ntarget\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\n\n\n\n\n\nNow, truncate (empty, delete, erase, clear) the file, reopen it, and to read it.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nfilename\n \n=\n \n'text.txt'\n\n\n\ntarget\n \n=\n \nopen\n(\nfilename\n,\n \n'w'\n)\n\n\nprint\n \n\"Truncating the file!\"\n\n\nprint\n \n\"-\"\n \n*\n \n25\n\n\ntarget\n.\ntruncate\n()\n\n\ntarget\n.\nclose\n()\n\n\n\ntarget\n \n=\n \nopen\n(\nfilename\n,\n \n'r'\n)\n\n\nprint\n \ntarget\n.\nread\n()\n\n\ntarget\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\nTruncating the file!\n------------------------\n\n\n\n\n\n\nExercise 17, More Files\n\u00b6\n\n\n~ length, len()~\n\n\n\n\ntarget.read()\n; read the whole file (EOF).\n\n\ntarget.read(10)\n; read the amount of bytes between the parentheses (1 byte = 1 character).\n\n\ntarget.readline()\n; read one line character at a time; the first line or the file until the first \n\\n\n.\n\n\ntarget.readline(10)\n; read 10 bytes of the first line, but never more than the first line.\n\n\nreadlines()\n; read in the whole file at once and splits it by line (create a list).\n\n\nxreadlines()\n; read big files.\n\n\nFirst, load \nscript ex17_1.py\n in IPython. This script needs two additional arguments.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n# %load ex17_1.py\n\n\nfrom\n \nsys\n \nimport\n \nargv\n\n\nfrom\n \nos.path\n \nimport\n \nexists\n \n# does the file exists, T or F?\n\n\n\nscript\n,\n \nfrom_file\n,\n \nto_file\n \n=\n \nargv\n\n\n\nprint\n \n\"Copying from \n%s\n to \n%s\n\"\n \n%\n \n(\nfrom_file\n,\n \nto_file\n)\n\n\n\nin_file\n \n=\n \nopen\n(\nfrom_file\n,\n \n'r'\n)\n \n# 'r' is facultative\n\n\nindata\n \n=\n \nin_file\n.\nread\n()\n \n# read the content, store in memory\n\n\n\nprint\n \n\"The input file is \n%d\n bytes long\"\n \n%\n \nlen\n(\nindata\n)\n \n# number of bytes in the file or length of 'indata'\n\n\n\nprint\n \n\"Does the output file exist? \n%r\n\"\n \n%\n \nexists\n(\nto_file\n)\n \n# if the second file hasn't been created, this row will yield a 'False'\n\n\n\n# after you run this script, if you run it again, il will yield a 'True'\n\n\nprint\n \n\"Ready, hit RETURN to continue, CTRL-C to abort.\"\n\n\nraw_input\n(\n\"? \"\n)\n\n\n\nout_file\n \n=\n \nopen\n(\nto_file\n,\n \n'w'\n)\n\n\nout_file\n.\nwrite\n(\nindata\n)\n\n\n\nprint\n \n\"Alright, all done.\"\n\n\n\nout_file\n.\nclose\n()\n\n\nin_file\n.\nclose\n()\n\n\n\n\n\n\n\n1\n%\nrun\n \nex17_1\n.\npy\n \ntext2\n.\ntxt\n \nnew\n.\ntxt\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nCopying from text2.txt to new.txt\nThe input file is 49 bytes long\nDoes the output file exist? True\nReady, hit RETURN to continue, CTRL-C to abort.\n? \nAlright, all done.\n\n\n\n\n\n\n1\n2\n3\ntarget\n \n=\n \nopen\n(\n\"text2.txt\"\n)\n\n\nprint\n \ntarget\n.\nread\n()\n\n\ntarget\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\n\n\n\n1\n2\n3\ntarget\n \n=\n \nopen\n(\n\"new.txt\"\n)\n\n\nprint\n \ntarget\n.\nread\n()\n\n\ntarget\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n# %load ex17_2.py\n\n\nfrom\n \nsys\n \nimport\n \nargv\n\n\nfrom\n \nos.path\n \nimport\n \nexists\n \n# does the file exists, T or F?\n\n\n\nscript\n,\n \nfrom_file\n,\n \nto_file\n \n=\n \nargv\n\n\n\n# FIRST\n\n\nin_file\n \n=\n \nopen\n(\nfrom_file\n,\n \n'r'\n)\n\n\nindata\n \n=\n \nin_file\n.\nread\n()\n\n\n\nprint\n \n\"The input file is \n%d\n bytes long\"\n \n%\n \nlen\n(\nindata\n)\n\n\n\nin_file\n.\nclose\n()\n\n\n\nprint\n \n\"-\"\n \n*\n \n25\n\n\n\n# SECOND\n\n\ncheckfile\n \n=\n \nopen\n(\nfrom_file\n,\n \n'r'\n)\n\n\nprint\n \ncheckfile\n.\nreadline\n()\n \n# read line 1, show\n\n\nprint\n \ncheckfile\n.\nreadline\n()\n \n# read line 2\n\n\nprint\n \ncheckfile\n.\nreadline\n()\n \n# read line 3\n\n\n\ncheckfile\n.\nclose\n()\n\n\n\nprint\n \n\"-\"\n \n*\n \n25\n\n\n\n# THIRD\n\n\ncheckfile2\n \n=\n \nopen\n(\nfrom_file\n,\n \n'r'\n)\n\n\nout_file\n \n=\n \nopen\n(\nto_file\n,\n \n'w'\n)\n\n\n\nindata\n \n=\n \ncheckfile2\n.\nread\n()\n\n\nout_file\n.\nwrite\n(\nindata\n)\n\n\n\nprint\n \n\"Alright, all done.\"\n\n\n\ncheckfile2\n.\nclose\n()\n\n\nout_file\n.\nclose\n()\n\n\n\nprint\n \n\"-\"\n \n*\n \n25\n\n\n\n# FOURTH\n\n\n\ncheckfile3\n \n=\n \nopen\n(\nto_file\n,\n \n'r'\n)\n\n\n\nprint\n \ncheckfile3\n.\nread\n()\n\n\n\ncheckfile3\n.\nclose\n()\n\n\n\n\n\n\n\n1\n%\nrun\n \nex17_2\n.\npy\n \ntext2\n.\ntxt\n \nnew2\n.\ntxt\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nThe input file is 49 bytes long\n-------------------------\nGood morning.\n\nHow are you?\n\nI wish you a good day.\n-------------------------\nAlright, all done.\n-------------------------\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\n\n\n\nExercise 18, Names, Variables, Code, Functions\n\u00b6\n\n\n~ argument, flexible, indefinite~\n\n\n\n\nA function can have no, one or several arguments.\n\n\ndef function():\n.\n\n\ndef function(one)\n.\n\n\ndef function(one, two, three)\n.\n\n\n\n\n\n\n*args\n means indifinite number of arguments. \n\n\nAll the arguments are is a list (\u2018args\u2019).\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n# indefinite\n\n\ndef\n \nprint_two\n(\n*\nargs\n):\n\n\n    \narg1\n,\n \narg2\n \n=\n \nargs\n\n    \nprint\n \n\"arg1: \n%r\n, arg2: \n%r\n\"\n \n%\n \n(\narg1\n,\n \narg2\n)\n\n\n\n# two arguments\n\n\ndef\n \nprint_two_again\n(\narg1\n,\n \narg2\n):\n\n\n    \nprint\n \n\"arg1: \n%r\n, arg2: \n%r\n\"\n \n%\n \n(\narg1\n,\n \narg2\n)\n\n\n\n# one argument\n\n\ndef\n \nprint_one\n(\narg1\n):\n\n\n    \nprint\n \n\"arg1: \n%r\n\"\n \n%\n \narg1\n\n\n\n# no arguments\n\n\ndef\n \nprint_none\n():\n\n\n    \nprint\n \n\"I got nothin'.\"\n\n\n\n# indefinite\n\n\ndef\n \nprint_two_2\n(\n*\nargs\n):\n\n\n    \nprint\n \n\"args: \n%r\n\"\n \n%\n \n(\nargs\n,)\n \n# much more flexible    \n\n\n\n# two arguments\n\n\ndef\n \nprint_two_again_2\n(\narg1\n,\n \narg2\n,\n \narg3\n):\n\n\n    \nprint\n \n\"arg1: \n%r\n, arg2: \n%r\n, arg3: \n%r\n\"\n \n%\n \n(\narg1\n,\n \narg2\n,\n \narg3\n)\n    \n\n\n# three arguments\n\n\ndef\n \nprint_two_again_3\n(\narg1\n,\n \narg2\n,\n \narg3\n):\n\n\n    \nprint\n \n\"arg1: \n%r\n, arg2: \n%r\n, arg3: \n%r\n\"\n \n%\n \n(\narg1\n,\n \narg2\n,\n \narg3\n)\n\n    \nprint_two\n(\n\"Joe\"\n,\n \n\"Frank\"\n)\n \n# call a function inside a function\n\n\n\n\n\n\n\n\n\nRun the functions.\n\n\n\n\n1\n2\nprint_two\n(\n\"Zed\"\n,\n \n\"Shaw\"\n)\n\n\nprint_two_again\n(\n\"Zed\"\n,\n \n\"Shaw\"\n)\n\n\n\n\n\n\n\n1\n2\narg1: 'Zed', arg2: 'Shaw'\narg1: 'Zed', arg2: 'Shaw'\n\n\n\n\n\n\n1\n2\nprint_one\n(\n\"First!\"\n)\n\n\nprint_none\n()\n\n\n\n\n\n\n\n1\n2\narg1: 'First!'\nI got nothin'.\n\n\n\n\n\n\n1\nprint_two_2\n(\n\"Zed\"\n,\n \n\"Shaw\"\n,\n \n\"A\"\n,\n \n\"B\"\n)\n\n\n\n\n\n\n\n1\nargs: ('Zed', 'Shaw', 'A', 'B')\n\n\n\n\n\n\n1\nprint_two_again_2\n(\n\"Zed\"\n,\n \n\"Shaw\"\n,\n \n\"C\"\n)\n\n\n\n\n\n\n\n1\narg1: 'Zed', arg2: 'Shaw', arg3: 'C'\n\n\n\n\n\n\n1\nprint_two_again_3\n(\n\"Zed\"\n,\n \n\"Shaw\"\n,\n \n\"C\"\n)\n\n\n\n\n\n\n\n1\n2\narg1: 'Zed', arg2: 'Shaw', arg3: 'C'\narg1: 'Joe', arg2: 'Frank'\n\n\n\n\n\n\nExercise 19, Functions and Variables\n\u00b6\n\n\n\n\nGive different names to functions and arguments not to get confuse.\n\n\n\n\n1\n2\n3\n4\n5\n6\ndef\n \ncheese_and_crackers\n(\ncheese_count\n,\n \nboxes_of_crackers\n):\n\n\n    \nprint\n \n\"You have \n%d\n cheeses!\"\n \n%\n \ncheese_count\n\n    \nprint\n \n\"You have \n%d\n boxes of crackers!\"\n \n%\n \nboxes_of_crackers\n\n    \nprint\n \n\"Man that's enough for a party!\"\n\n    \nprint\n \n\"Get a blanket. \n\\n\n\"\n\n\n\n\n\n\n\n1\n2\nprint\n \n\"1.We can just give the function numbers directly:\"\n\n\ncheese_and_crackers\n(\n20\n,\n \n30\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n1.We can just give the function numbers directly:\nYou have 20 cheeses!\nYou have 30 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\n\n\n\n1\n2\n3\n4\nprint\n \n\"2.Or, we can use variables from our script:\"\n\n\namount_of_cheese\n \n=\n \n10\n\n\namount_of_crackers\n \n=\n \n50\n\n\ncheese_and_crackers\n(\namount_of_cheese\n,\n \namount_of_crackers\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n2.Or, we can use variables from our script:\nYou have 10 cheeses!\nYou have 50 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\n\n\n\n1\n2\nprint\n \n\"3.We can even do math inside too:\"\n\n\ncheese_and_crackers\n(\n10\n \n+\n \n20\n,\n \n5\n \n+\n \n6\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n3.We can even do math inside too:\nYou have 30 cheeses!\nYou have 11 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\n\n\n\n1\n2\nprint\n \n\"4.And we can combine the two, variables and math:\"\n\n\ncheese_and_crackers\n(\namount_of_cheese\n \n+\n \n100\n,\n \namount_of_crackers\n \n+\n \n1000\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n4.And we can combine the two, variables and math:\nYou have 110 cheeses!\nYou have 1050 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\n\n\n\n1\n2\n3\n4\n5\nprint\n \n\"5.Make a GUI.\"\n\n\nprint\n \n\"Enter the amount of cheese:\"\n,\n\n\namount_of_cheese\n \n=\n \nint\n(\nraw_input\n())\n\n\namount_of_crackers\n \n=\n \nint\n(\nraw_input\n(\n\"Enter the amount of crackers: \"\n))\n\n\ncheese_and_crackers\n(\namount_of_cheese\n,\n \namount_of_crackers\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n5.Make a GUI.\nEnter the amount of cheese:2\nEnter the amount of crackers: 5\n You have 2 cheeses!\nYou have 5 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\n\n\n\nExercise 20, Functions and Files\n\u00b6\n\n\n~ seek, move, file~\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n# %load ex20.py\n\n\nfrom\n \nsys\n \nimport\n \nargv\n\n\n\nscript\n,\n \ninput_file\n \n=\n \nargv\n\n\n# python ex20.py test.txt\n\n\n\ndef\n \nprint_all\n(\nf\n):\n \n# f is the file\n\n\n    \nprint\n \nf\n.\nread\n()\n \n# read the file, reach the end\n\n\n\ndef\n \nrewind\n(\nf\n):\n\n\n    \nf\n.\nseek\n(\n0\n)\n \n# move back to the initial position in the file\n\n\n# 'seek' actively move in the file\n\n\n\ndef\n \nprint_a_line\n(\nline_count\n,\n \nf\n):\n\n\n    \nprint\n \nline_count\n,\n \nf\n.\nreadline\n()\n \n# print a line # and this line number in the file\n\n\n\n\ncurrent_file\n \n=\n \nopen\n(\ninput_file\n)\n\n\n\nprint\n \n\"First, let's print the whole file:\n\\n\n\"\n\n\n\nprint_all\n(\ncurrent_file\n)\n \n# launch function, f = current_file\n\n\n\nprint\n \n\"-\"\n \n*\n \n25\n\n\n\nprint\n \n\"Now let's rewind, kind of like a tape.\"\n\n\n\nrewind\n(\ncurrent_file\n)\n \n# launch function, f = current_file\n\n\n\nprint\n \n\"-\"\n \n*\n \n25\n\n\n\nprint\n \n\"Let's print three lines:\"\n\n\n\ncurrent_line\n \n=\n \n1\n \n# load variable\n\n\nprint_a_line\n(\ncurrent_line\n,\n \ncurrent_file\n)\n \n# launch function\n\n\n# set 'current_line' to 1\n\n\n\ncurrent_line\n \n=\n \ncurrent_line\n \n+\n \n1\n\n\n# current_line += 1\n\n\nprint_a_line\n(\ncurrent_line\n,\n \ncurrent_file\n)\n\n\n# 'current_line' grows to 2...\n\n\n\n# current_line = current_line + 1\n\n\ncurrent_line\n \n+=\n \n1\n\n\nprint_a_line\n(\ncurrent_line\n,\n \ncurrent_file\n)\n\n\n\n\n\n\n\n1\n%\nrun\n \nex20\n.\npy\n \nnew2\n.\ntxt\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nFirst, let's print the whole file:\n\nGood morning.\nHow are you?\nI wish you a good day.\n-------------------------\nNow let's rewind, kind of like a tape.\n-------------------------\nLet's print three lines:\n1 Good morning.\n\n2 How are you?\n\n3 I wish you a good day.\n\n\n\n\n\n\nExercise 21, Functions Can Return Something or not\u2026\n\u00b6\n\n\n~ integer, float, int, coerce, digit, string, raw~\n\n\n\n\n%r\n for raw.\n\n\n%d\n for digit.\n\n\n%s\n for string.\n\n\nint()\n with \n%d\n = integer.\n\n\nint()\n with \n%r\n or \n%s\n = integer.\n\n\nfloat()\n with \n%d\n = integer.\n\n\nfloat()\n  with \n%r\n or \n%s\n = float.\n\n\n%r\n is a safer choice; see below.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\na\n \n=\n \n10\n \n# a digit\n\n\nb\n \n=\n \n10.1\n\n\n\nprint\n \n\"\n%r\n\"\n \n%\n \na\n\n\nprint\n \n\"\n%s\n\"\n \n%\n \na\n\n\nprint\n \n\"\n%d\n\"\n \n%\n \na\n\n\nprint\n \n\"\n%r\n\"\n \n%\n \nb\n\n\nprint\n \n\"\n%s\n\"\n \n%\n \nb\n\n\nprint\n \n\"\n%d\n\"\n \n%\n \nb\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n10\n10\n10\n10.1\n10.1\n10\n\n\n\n\n\n\n1\n2\n3\n4\n5\na\n \n=\n \n\"10\"\n \n# a string or str(10)\n\n\n\nprint\n \n\"\n%r\n\"\n \n%\n \na\n\n\nprint\n \n\"\n%s\n\"\n \n%\n \na\n\n\nprint\n \n\"\n%d\n\"\n \n%\n \na\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n'10'\n10\n\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-34-71a6226dbd27> in <module>()\n      2 print \"%r\" % a\n      3 print \"%s\" % a\n----> 4 print \"%d\" % a\n\nTypeError: %d format: a number is required, not str\n\n\n\n\n\n\n1\n2\n3\n4\n5\nb\n \n=\n \n\"10.1\"\n \n# a string or str(10)\n\n\n\nprint\n \n\"\n%r\n\"\n \n%\n \nb\n\n\nprint\n \n\"\n%s\n\"\n \n%\n \nb\n\n\nprint\n \n\"\n%d\n\"\n \n%\n \nb\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n'10.1'\n10.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-33-18d4f3068fee> in <module>()\n      2 print \"%r\" % b\n      3 print \"%s\" % b\n----> 4 print \"%d\" % b\n\nTypeError: %d format: a number is required, not str\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\na\n \n=\n \n\"10\"\n \n# a string or str(10)\n\n\nb\n \n=\n \n\"10.1\"\n \n# a string or str(10)\n\n\n\nprint\n \n\"\n%r\n\"\n \n*\n \n1\n \n%\n \na\n\n\nprint\n \n\"\n%s\n\"\n \n*\n \n1\n \n%\n \na\n\n\nprint\n \n\"\n%r\n\"\n \n*\n \n1\n \n%\n \nb\n\n\nprint\n \n\"\n%s\n\"\n \n*\n \n1\n \n%\n \nb\n\n\n\n\n\n\n\n1\n2\n3\n4\n'10'\n10\n'10.1'\n10.1\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\na\n \n=\n \n\"10\"\n \n# a string or str(10)\n\n\nb\n \n=\n \n\"10.1\"\n \n# a string or str(10)\n\n\n\nprint\n \n\"\n%r\n\"\n \n*\n \n2\n \n%\n \na\n\n\nprint\n \n\"\n%s\n\"\n \n*\n \n2\n \n%\n \na\n\n\nprint\n \n\"\n%r\n\"\n \n*\n \n2\n \n%\n \nb\n\n\nprint\n \n\"\n%s\n\"\n \n*\n \n2\n \n%\n \nb\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n---------------------------------------------------------------------------\n\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-34-18d4f3068fee> in <module>()\n      1 a = \"10\"\n      2 b = \"10.1\"\n----> 3 print \"%r\" * 2 % a\n      4 print \"%s\" * 2 % a\n      5 print \"%r\" * 2 % b\n\nTypeError: not enough arguments for format string\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\na\n \n=\n \n10\n\n\nb\n \n=\n \n10.1\n\n\na\n \n=\n \nint\n(\na\n)\n\n\nb\n \n=\n \nint\n(\nb\n)\n\n\nprint\n \n\"\n%r\n\"\n \n%\n \na\n\n\nprint\n \n\"\n%s\n\"\n \n%\n \na\n\n\nprint\n \n\"\n%d\n\"\n \n%\n \na\n\n\nprint\n \n\"\n%r\n\"\n \n%\n \nb\n\n\nprint\n \n\"\n%s\n\"\n \n%\n \nb\n\n\nprint\n \n\"\n%d\n\"\n \n%\n \nb\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n10\n10\n10\n10\n10\n10\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\na\n \n=\n \n10\n\n\nb\n \n=\n \n10.1\n\n\na\n \n=\n \nfloat\n(\na\n)\n\n\nb\n \n=\n \nfloat\n(\nb\n)\n\n\n\nprint\n \n\"\n%r\n\"\n \n%\n \na\n\n\nprint\n \n\"\n%s\n\"\n \n%\n \na\n\n\nprint\n \n\"\n%d\n\"\n \n%\n \na\n\n\nprint\n \n\"\n%r\n\"\n \n%\n \nb\n\n\nprint\n \n\"\n%s\n\"\n \n%\n \nb\n\n\nprint\n \n\"\n%d\n\"\n \n%\n \nb\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n10.0\n10.0\n10\n10.1\n10.1\n10\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\na\n \n=\n \n1\n\n\nb\n \n=\n \n2.1\n\n\n\nprint\n \na\n \n*\n \nb\n\n\nprint\n \nint\n(\na\n)\n \n*\n \nint\n(\nb\n)\n\n\nprint\n \nfloat\n(\na\n)\n \n*\n \nfloat\n(\nb\n)\n\n\nprint\n \nstr\n(\na\n)\n \n*\n \n10\n\n\nprint\n \nstr\n(\nb\n)\n \n*\n \n10\n\n\nprint\n \nstr\n(\na\n)\n \n*\n \nstr\n(\nb\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n2.1\n2\n2.1\n1111111111\n2.12.12.12.12.12.12.12.12.12.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-52-57a5dd7c13d0> in <module>()\n      7 print str(a) * 10\n      8 print str(b) * 10\n----> 9 print str(a) * str(b)\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\ndef\n \nadd\n(\na\n,\n \nb\n):\n\n\n    \nprint\n \n\"ADDING \n%s\n + \n%s\n\"\n \n%\n \n(\na\n,\n \nb\n)\n\n    \nreturn\n \na\n \n+\n \nb\n  \n\n\ndef\n \nsubstract\n(\na\n,\n \nb\n):\n\n\n    \nprint\n \n\"SUBTRACTING \n%d\n - \n%d\n\"\n \n%\n \n(\na\n,\n \nb\n)\n \n# show the arguments\n\n    \nreturn\n \na\n \n-\n \nb\n \n# compute the arguments\n\n\n\ndef\n \nmultiply\n(\na\n,\n \nb\n):\n\n\n    \nprint\n \n\"MULTIPLYING \n%d\n * \n%d\n\"\n \n%\n \n(\na\n,\n \nb\n)\n\n    \nreturn\n \na\n \n*\n \nb\n    \n\n\ndef\n \ndivide\n(\na\n,\n \nb\n):\n\n\n    \nprint\n \n\"DIVIDING \n%d\n / \n%d\n\"\n \n%\n \n(\na\n,\n \nb\n)\n\n    \nreturn\n \na\n \n/\n \nb\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nprint\n \n\"Let's do some math with just functions!\"\n\n\n\naa\n \n=\n \nint\n(\nraw_input\n(\n\"Enter a (integer): \"\n))\n \n# to enter an integer\n\n\nbb\n \n=\n \nfloat\n(\nraw_input\n(\n\"Enter b (float): \"\n))\n \n# to enter a float\n\n\nage\n \n=\n \nadd\n(\naa\n,\n \nbb\n)\n \n# launch function add()\n\n\n\n\n\n\n\n1\n2\n3\n4\nLet's do some math with just functions!\nEnter a (integer): 1\nEnter b (float): 2.2\nADDING 1 + 2.2\n\n\n\n\n\n\n1\nprint\n \nadd\n(\naa\n,\n \nbb\n)\n\n\n\n\n\n\n\n1\n2\nADDING 1 + 2.2\n3.2\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nheight\n \n=\n \nsubstract\n(\n78\n,\n \n4\n)\n \n# launch function substract()\n\n\nweight\n \n=\n \nmultiply\n(\n90\n,\n \n2\n)\n \n# launch function multiply()\n\n\niq\n \n=\n \ndivide\n(\n100\n,\n \n2\n)\n \n# launch function divide()\n\n\n\nprint\n \nheight\n\n\nprint\n \nweight\n\n\nprint\n \niq\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nSUBTRACTING 78 - 4\nMULTIPLYING 90 * 2\nDIVIDING 100 / 2\n74\n180\n50\n\n\n\n\n\n\n1\n2\n# Use the variable, previously loaded\n\n\nprint\n \n\"Age: \n%d\n, Height: \n%d\n, Weight: \n%d\n, IQ: \n%d\n\"\n \n%\n \n(\nage\n,\n \nheight\n,\n \nweight\n,\n \niq\n)\n\n\n\n\n\n\n\n1\nAge\n:\n \n3\n,\n \nHeight\n:\n \n74\n,\n \nWeight\n:\n \n180\n,\n \nIQ\n:\n \n50\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# A puzzle for the extra credit, type it in anyway.\n\n\nprint\n \n\"Here is a puzzle.\"\n\n\n\nwhat\n \n=\n \nadd\n(\nage\n,\n \nsubstract\n(\nheight\n,\n \nmultiply\n(\nweight\n,\n \ndivide\n(\niq\n,\n \n2\n))))\n \n# launch functions one by one!!!\n\n\n\n# Insert variable 'what' in the text\n\n\nprint\n \n\"That becomes: \"\n,\n \nwhat\n,\n \n\"Can you do it by hand?\"\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nHere is a puzzle.\nDIVIDING 50 / 2\nMULTIPLYING 180 * 25\nSUBTRACTING 74 - 4500\nADDING 3.2 + -4426\nThat becomes:  -4422.8 Can you do it by hand?\n\n\n\n\n\n\nExercise 23, Read Some Code\n\u00b6\n\n\n\n\nGo to \nGitHub\n:\n\n\nIn the \u2018lamson\u2019 directory, take a script.\n\n\nGo through the script.\n\n\nFind projects on collaborative sites or depositories:\n\n\nbitbucket.org\n.\n\n\ngithub.com\n.\n\n\ngitorious.org\n.\n\n\nlaunchpad.net\n.\n\n\nsourceforge.net\n.\n\n\n\n\n\n\n\n\nExercise 24, More Practice\n\u00b6\n\n\n\n\n\\'\n for an aposthrophy.\n\n\n\\t\n for a tab.\n\n\n\\\\\n for a backslash.\n\n\n\\n\n for a new line.\n\n\n\n\n1\n2\n3\nprint\n \n\"Let's practice everything.\"\n\n\n\nprint\n \n'You\n\\'\nd need to know \n\\'\nbout escapes with \n\\\\\n that do \n\\n\nnewlines and \n\\t\ntabs.'\n\n\n\n\n\n\n\n1\n2\n3\nLet's practice everything.\nYou'd need to know 'bout escapes with \\ that do \nnewlines and    tabs.\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\npoem\n \n=\n \n\"\"\"\n\n\n\\t\nThe lovely world\n\n\nwith logic so firmly planted\n\n\nconnot discern \n\\n\n the needs of love\n\n\nnor comprehend passion from intuition\n\n\nand requires an explanation\n\n\n\\n\\t\\t\nwhere there is none.\n\n\n\"\"\"\n\n\n\nprint\n \n\"----------------\"\n\n\nprint\n \npoem\n\n\nprint\n \n\"----------------\"\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n----------------\n\n    The lovely world\nwith logic so firmly planted\nconnot discern \n the needs of love\nnor comprehend passion from intuition\nand requires an explanation\n\n        where there is none.\n\n----------------\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# variable 'five'\n\n\nfive\n \n=\n \n10\n \n-\n2\n \n+\n \n3\n \n-\n \n6\n\n\n\n# use of variable 'five'\n\n\nprint\n \n\"This should be five: \n%s\n\"\n \n%\n \nfive\n\n\n\n\n\n\n\n1\nThis should be five: 5\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n# function with one argument\n\n\ndef\n \nsecret_formula\n(\nstarted\n):\n\n\n    \njelly_beans\n \n=\n \nstarted\n \n*\n \n500\n \n# load variable with another\n\n    \njars\n \n=\n \njelly_beans\n \n/\n \n1000\n\n    \ncrates\n \n=\n \njars\n \n/\n \n100\n\n    \nreturn\n \njelly_beans\n,\n \njars\n,\n \ncrates\n\n\n\n\n# variable; warning, this variable is modified further down\n\n\nstart_point\n \n=\n \n10000\n\n\n\n# redefine the results of a function (rename a variable)\n\n\n# from this point, 'jelly_beans' becomes 'beans'\n\n\n# and must be called so in any line of code\n\n\nbeans\n,\n \njars\n,\n \ncrates\n \n=\n \nsecret_formula\n(\nstart_point\n)\n\n\n\nprint\n \n\"With a starting point of: \n%d\n\"\n \n%\n \nstart_point\n\n\n# we apply 'bean'\n\n\nprint\n \n\"We's have \n%d\n beans, \n%d\n jars, and \n%d\n crates.\"\n \n%\n \n(\nbeans\n,\n \njars\n,\n \ncrates\n)\n\n\n\n# modified variable is loaded into the code from this point\n\n\nstart_point\n \n=\n \nstart_point\n \n/\n \n10\n\n\n\nprint\n \n\"We can also do that this way:\"\n\n\n# we apply the modified variable 'start_point'\n\n\nprint\n \n\"We's have \n%d\n beans, \n%d\n jars, and \n%d\n crates.\"\n \n%\n \nsecret_formula\n(\nstart_point\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\nWith a starting point of: 10000\nWe's have 5000000 beans, 5000 jars, and 50 crates.\nWe can also do that this way:\nWe's have 500000 beans, 500 jars, and 5 crates.\n\n\n\n\n\n\nExercise 25, Even More Practice\n\u00b6\n\n\n~ import, module, package, script, library~\n\n\n\n\nFor this exercice, consult the manual.\n\n\nFirst, run python ex25.py to find out any errors.\n\n\nSecond, use the python engine to run pieces of codes from this file and not just trigger the whole code from this file\n\n\nCheck out file \n25_1.txt\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n# %load ex25.py\n\n\ndef\n \nbreak_words\n(\nstuff\n):\n\n\n    \n\"\"\"This function will break up words for us.\"\"\"\n\n    \nwords\n \n=\n \nstuff\n.\nsplit\n(\n' '\n)\n \n# the method splits the characters each time it finds a 'space'\n\n    \nreturn\n \nwords\n \n# you must specify in python where to load the result (into 'words')\n\n\n\ndef\n \nsort_words\n(\nwords\n):\n\n\n    \n\"\"\"Sorts the words.\"\"\"\n\n    \nreturn\n \nsorted\n(\nwords\n)\n \n# the python function sorts the separated words\n\n\n\ndef\n \nprint_first_word\n(\nwords\n):\n\n\n    \n\"\"\"Prints the first word after popping in off.\"\"\"\n\n    \nword\n \n=\n \nwords\n.\npop\n(\n0\n)\n \n# the method returns the first word in the index (position 0)\n\n    \nprint\n \nword\n\n\n\ndef\n \nprint_last_word\n(\nwords\n):\n\n\n    \n\"\"\"Prints the last word after popping it off.\"\"\"\n\n    \nword\n \n=\n \nwords\n.\npop\n(\n-\n1\n)\n \n# the method returns the last word in the index (position -1)\n\n    \nprint\n \nword\n\n\n\ndef\n \nsort_sentence\n(\nsentence\n):\n\n\n    \n\"\"\"Takes in a full sentence and returns the sorted words.\"\"\"\n\n    \nwords\n \n=\n \nbreak_words\n(\nsentence\n)\n \n# launch a function\n\n    \nreturn\n \nsort_words\n(\nwords\n)\n \n# launch another function with the result of the first function\n\n\n\ndef\n \nprint_first_and_last\n(\nsentence\n):\n\n\n    \n\"\"\"Prints the first and last words of the sentence.\"\"\"\n\n    \nwords\n \n=\n \nbreak_words\n(\nsentence\n)\n\n    \nprint_first_word\n(\nwords\n)\n\n    \nprint_last_word\n(\nwords\n)\n\n\n\ndef\n \nprint_first_and_last_sorted\n(\nsentence\n):\n\n\n    \n\"\"\"Sorts the words then prints the first and last one.\"\"\"\n\n    \nwords\n \n=\n \nsort_sentence\n(\nsentence\n)\n\n    \nprint_first_word\n(\nwords\n)\n\n    \nprint_last_word\n(\nwords\n)\n\n\n\n\n\n\n\n1\n%\nrun\n \nex25\n.\npy\n\n\n\n\n\n\n\n\n\nIn the next script, you \nimport\n the above script (ex25.py) as an external module (even though the script was previously run in IPython, and we want to simulate a script importing another script) and use its function as methods.\n\n\n\n\n1\n2\n3\n4\n5\n6\nimport\n \nex25\n\n\n\nsentence\n \n=\n \n\"All good things come to those who wait.\"\n\n\n\nwords\n \n=\n \nex25\n.\nbreak_words\n(\nsentence\n)\n\n\nwords\n\n\n\n\n\n\n\n1\n['All', 'good', 'things', 'come', 'to', 'those', 'who', 'wait.']\n\n\n\n\n\n\n1\n2\nsorted_words\n \n=\n \nex25\n.\nsort_words\n(\nwords\n)\n\n\nsorted_words\n\n\n\n\n\n\n\n1\n['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']\n\n\n\n\n\n\n1\n2\n3\nex25\n.\nprint_first_word\n(\nwords\n)\n\n\nex25\n.\nprint_last_word\n(\nwords\n)\n\n\nwords\n\n\n\n\n\n\n\n1\n2\n3\nAll\nwait.\n['good', 'things', 'come', 'to', 'those', 'who']\n\n\n\n\n\n\n1\n2\n3\nex25\n.\nprint_first_word\n(\nsorted_words\n)\n\n\nex25\n.\nprint_last_word\n(\nsorted_words\n)\n\n\nsorted_words\n\n\n\n\n\n\n\n1\n2\n3\nAll\nwho\n['come', 'good', 'things', 'those', 'to', 'wait.']\n\n\n\n\n\n\n1\n2\nsorted_words\n \n=\n \nex25\n.\nsort_sentence\n(\nsentence\n)\n\n\nsorted_words\n\n\n\n\n\n\n\n1\n['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']\n\n\n\n\n\n\n1\n2\nex25\n.\nprint_first_and_last\n(\nsentence\n)\n\n\nex25\n.\nprint_first_and_last_sorted\n(\nsentence\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\nAll\nwait.\nAll\nwho\n\n\n\n\n\n\nExercise 32, Loops and Lists\n\u00b6\n\n\n~ for, loop, list~\n\n\n1\n2\n3\n4\n5\n6\n7\nthe_count\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n]\n\n\nfruits\n \n=\n \n[\n'apples'\n,\n \n'oranges'\n,\n \n'pears'\n,\n \n'apricots'\n]\n\n\nchange\n \n=\n \n[\n1\n,\n \n'pennies'\n,\n \n2\n,\n \n'dimes'\n,\n \n3\n,\n \n'quarters'\n]\n\n\n\n# this first kind of for-loop goes through a list\n\n\nfor\n \nnumber\n \nin\n \nthe_count\n:\n\n    \nprint\n \n\"\n\\t\nThis is count \n%d\n\"\n \n%\n \nnumber\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n    This is count 1\n    This is count 2\n    This is count 3\n    This is count 4\n    This is count 5\n\n\n\n\n\n\n1\n2\n3\n# same as above\n\n\nfor\n \nfruit\n \nin\n \nfruits\n:\n\n    \nprint\n \n\"A fruit of type: \n%s\n\"\n \n%\n \nfruit\n\n\n\n\n\n\n\n1\n2\n3\n4\nA fruit of type: apples\nA fruit of type: oranges\nA fruit of type: pears\nA fruit of type: apricots\n\n\n\n\n\n\n\n\nWe can go though mixed lists too. Notice we have to use \n%r\n since we don\u2019t know what\u2019s in it.\n\n\n\n\n1\n2\nfor\n \ni\n \nin\n \nchange\n:\n\n    \nprint\n \n\"\n\\t\nI got \n%r\n\"\n \n%\n \ni\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n    I got 1\n    I got 'pennies'\n    I got 2\n    I got 'dimes'\n    I got 3\n    I got 'quarters'\n\n\n\n\n\n\n\n\nWe can also build lists. First, start with an empty one.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nelements\n \n=\n \n[]\n\n\n\n# then use the range function to do 0 to 5 counts\n\n\n# 0 means 1st, the 6th is excluded; 0,1,2,3,4,5\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \n6\n):\n\n    \nprint\n \n\"Adding \n%d\n to the list.\"\n \n%\n \ni\n\n    \n# append is a function that lists understand\n\n    \nelements\n.\nappend\n(\ni\n)\n \n# elements is a variable to which we add numbers\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nAdding 0 to the list.\nAdding 1 to the list.\nAdding 2 to the list.\nAdding 3 to the list.\nAdding 4 to the list.\nAdding 5 to the list.\n\n\n\n\n\n\n\n\nWe can print them out.\n\n\n\n\n1\n2\nfor\n \ni\n \nin\n \nelements\n:\n\n    \nprint\n \n\"\n\\t\nElement was: \n%d\n\"\n \n%\n \ni\n  \n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n    Element was: 0\n    Element was: 1\n    Element was: 2\n    Element was: 3\n    Element was: 4\n    Element was: 5\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nprint\n \n\"Test the range function...\"\n\n\nprint\n \n\"range(5):\"\n,\n \nrange\n(\n5\n)\n\n\nprint\n \n\"range(6):\"\n,\n \nrange\n(\n6\n)\n\n\nprint\n \n\"range(1, 5):\"\n,\n \nrange\n(\n1\n,\n \n5\n)\n\n\nprint\n \n\"range(2, 5):\"\n,\n \nrange\n(\n2\n,\n \n5\n)\n\n\nprint\n \n\"range(0, 10, 2):\"\n,\n \nrange\n(\n0\n,\n \n10\n,\n \n2\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nTest the range function...\nrange(5): [0, 1, 2, 3, 4]\nrange(6): [0, 1, 2, 3, 4, 5]\nrange(1, 5): [1, 2, 3, 4]\nrange(2, 5): [2, 3, 4]\nrange(0, 10, 2): [0, 2, 4, 6, 8]\n\n\n\n\n\n\n\n\nTwo-dimentional lists (above 2 dimension, it can become memory-intensive to compute!).\n\n\n\n\n~ 2d, tabular, lists in list, list of lists~\n\n\n1\n2\n3\n4\n5\n6\nthe_count_two\n \n=\n \n[[\n1\n,\n2\n,\n3\n],[\n4\n,\n5\n,\n6\n]]\n\n\n\n# this first kind of for-loop goes through a list\n\n\n# this list is not numerical, use %r or %s\n\n\nfor\n \nnumber\n \nin\n \nthe_count_two\n:\n\n    \nprint\n \n\"\n\\t\nThis is count \n%r\n\"\n \n%\n \nnumber\n\n\n\n\n\n\n\n1\n2\nThis is count [1, 2, 3]\nThis is count [4, 5, 6]\n\n\n\n\n\n\nExercise 33, While Loops\n\u00b6\n\n\n~ while, loop~\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\ni\n \n=\n \n0\n\n\nnumbers\n \n=\n \n[]\n\n\n\nwhile\n \ni\n \n<\n \n6\n:\n\n    \nprint\n \n\"At the top i is \n%d\n\"\n \n%\n \ni\n\n    \nnumbers\n.\nappend\n(\ni\n)\n\n\n    \ni\n \n+=\n \n1\n\n    \nprint\n \n\"Number now: \"\n,\n \nnumbers\n\n    \nprint\n \n\"At the botton i is \n%d\n\"\n \n%\n \ni\n\n\n\n\nprint\n \n\"The numbers: \"\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 1\nAt the top i is 1\nNumber now:  [0, 1]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 1, 2]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 1, 2, 3]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 1, 2, 3, 4]\nAt the botton i is 5\nAt the top i is 5\nNumber now:  [0, 1, 2, 3, 4, 5]\nAt the botton i is 6\nThe numbers:\n\n\n\n\n\n\n1\n2\nfor\n \nnum\n \nin\n \nnumbers\n:\n\n    \nprint\n \nnum\n    \n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n0\n1\n2\n3\n4\n5\n\n\n\n\n\n\n\n\nMake it a function.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\ndef\n \nbreaking_list\n(\nmax_of\n,\n \nincrem\n):\n\n\n    \ni\n \n=\n \n0\n\n    \nnumbers\n \n=\n \n[]\n\n\n    \nwhile\n \ni\n \n<\n \nmax_of\n:\n\n        \nprint\n \n\"At the top i is \n%d\n\"\n \n%\n \ni\n\n        \nnumbers\n.\nappend\n(\ni\n)\n\n\n        \ni\n \n+=\n \nincrem\n\n        \nprint\n \n\"Number now: \"\n,\n \nnumbers\n\n        \nprint\n \n\"At the botton i is \n%d\n\"\n \n%\n \ni\n\n\n    \nprint\n \n\"The numbers: \"\n\n\n    \nfor\n \nnum\n \nin\n \nnumbers\n:\n\n        \nprint\n \nnum\n\n\n\nprint\n \n\"Enter an integer, a maximum, higher than 1.\"\n\n\nmax_integer\n \n=\n \nint\n(\nraw_input\n(\n\"> \"\n))\n\n\nprint\n \n\"Enter an integer, an increment, equal or more than 1\"\n\n\nincrement\n \n=\n \nint\n(\nraw_input\n(\n\"> \"\n))\n\n\nprint\n \n\"The maximum is \n%d\n and the increment is \n%d\n\"\n \n%\n \n(\nmax_integer\n,\n \nincrement\n)\n\n\n\nbreaking_list\n(\nmax_integer\n,\n \nincrement\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nEnter an integer, a maximum, higher than 1.\n> 5\nEnter an integer, an increment, equal or more than 1\n> 2\nThe maximum is 5 and the increment is 2\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 2]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 2, 4]\nAt the botton i is 6\nThe numbers: \n0\n2\n4\n\n\n\n\n\n\n\n\nChange the function, replace with a for-loops. \n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\ndef\n \nbreaking_list2\n(\nmax_of\n,\n \nincrem\n):\n\n\n    \ni\n \n=\n \n0\n\n    \nnumbers\n \n=\n \n[]\n\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nmax_of\n,\n \nincrem\n):\n\n        \nprint\n \n\"At the top i is \n%d\n\"\n \n%\n \ni\n\n        \nnumbers\n.\nappend\n(\ni\n)\n\n\n        \ni\n \n+=\n \nincrem\n\n        \nprint\n \n\"Number now: \"\n,\n \nnumbers\n\n        \nprint\n \n\"At the botton i is \n%d\n\"\n \n%\n \ni\n\n\n    \nprint\n \n\"The numbers: \"\n\n\n    \nfor\n \nnum\n \nin\n \nnumbers\n:\n\n        \nprint\n \nnum\n\n\n\nmax_integer2\n \n=\n \nmax_integer\n \n+\n \n2\n\n\nincrement2\n \n=\n \nincrement\n \n+\n \n1\n\n\nbreaking_list2\n(\nmax_integer2\n,\n \nincrement2\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 3]\nAt the botton i is 6\nAt the top i is 6\nNumber now:  [0, 3, 6]\nAt the botton i is 9\nThe numbers: \n0\n3\n6\n\n\n\n\n\n\nExercise 34, Accessing Elements of Lists\n\u00b6\n\n\n~ list, list of lists, lists in list, exit, program~\n\n\n\n\nLet\u2019s build a scenario; functions leading to other functions.\n\n\ndef gold_room():\n\n\ndef bear_room():\n\n\ndef cthulhu_room():\n\n\ndef dead(why):\n\n\ndef start():\n\n\nstart()\n to launch the chain reaction.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\nfrom\n \nsys\n \nimport\n \nexit\n\n\n\ndef\n \ngold_room\n():\n\n\n    \nprint\n \n\"This room is full of gold. How much do you take?\"\n\n\n    \nchoice\n \n=\n \nraw_input\n(\n\"Write any number from 0 to 100> \"\n)\n \n# variable\n\n    \nif\n \n\"0\"\n \nin\n \nchoice\n \nor\n \n\"1\"\n \nin\n \nchoice\n:\n \n# could be 0, 1, 10, 11:19, 20, 21, 30, 31, 40, 41, 50, 51, etc.\n\n        \nhow_much\n \n=\n \nint\n(\nchoice\n)\n \n# variable\n\n    \nelse\n:\n\n        \ndead\n(\n\"Man, learn to type a number.\"\n)\n \n# launch function dead\n\n\n    \nif\n \nhow_much\n \n<\n \n50\n:\n\n        \nprint\n \n\"Nice, you're not greedy, you win!\"\n\n        \nexit\n(\n0\n)\n \n# launch system function exit\n\n    \nelse\n:\n\n        \ndead\n(\n\"You greedy bastard!\"\n)\n \n# launch function dead\n\n\n\ndef\n \nbear_room\n():\n\n\n    \nprint\n \n\"There is bear here.\"\n\n    \nprint\n \n\"The bear has a bunch of honey.\"\n\n    \nprint\n \n\"The fat bear is in front of another door.\"\n\n    \nprint\n \n\"How are you going to move the bear?\"\n\n    \nbear_moved\n \n=\n \nFalse\n \n# variable\n\n\n    \nwhile\n \nTrue\n:\n \n# infinite loop, run until it finds a right answer\n\n        \nchoice\n \n=\n \nraw_input\n(\n\"Write 'take honey', 'taunt bear' or 'open door'> \"\n)\n \n# variable\n\n\n        \nif\n \nchoice\n \n==\n \n\"take honey\"\n:\n \n# variable check\n\n            \ndead\n(\n\"The bear looks at you then slaps your face off.\"\n)\n \n# launch function dead\n\n        \nelif\n \nchoice\n \n==\n \n\"taunt bear\"\n \nand\n \nnot\n \nbear_moved\n:\n \n# double variables check\n\n            \nprint\n \n\"The bear has moved from the door. You can go thought it now.\"\n\n            \nbear_moved\n \n=\n \nTrue\n \n# change the variable\n\n        \nelif\n \nchoice\n \n==\n \n\"taunt bear\"\n \nand\n \nbear_moved\n:\n\n            \ndead\n(\n\"The bear gets pissed off and chews your leg off.\"\n)\n\n        \nelif\n \nchoice\n \n==\n \n\"open door\"\n \nand\n \nbear_moved\n:\n \n# variable check\n\n            \ngold_room\n()\n \n# launch function gold_room\n\n        \nelse\n:\n\n            \nprint\n \n\"I got no idea what that means.\"\n\n\n\ndef\n \ncthulhu_room\n():\n\n\n    \nprint\n \n\"Here you see the great evil Cthulhu.\"\n\n    \nprint\n \n\"He, it, whatever stares at you and you go insane.\"\n\n    \nprint\n \n\"Do you flee your life or eat your head?\"\n\n\n    \nchoice\n \n=\n \nraw_input\n(\n\"Write 'flee' or 'head'> \"\n)\n \n# variable\n\n\n    \nif\n \n\"flee\"\n \nin\n \nchoice\n:\n \n# variable check\n\n        \nstart\n()\n \n# launch function start\n\n    \nelif\n \n\"head\"\n \nin\n \nchoice\n:\n\n        \ndead\n(\n\"Well that was tasty!\"\n)\n\n    \nelse\n:\n\n        \ncthulhu_room\n()\n \n# launch function\n\n\n\ndef\n \ndead\n(\nwhy\n):\n\n\n    \nprint\n \nwhy\n,\n \n\"Good job!\"\n\n    \nexit\n(\n0\n)\n \n# launch system function exit\n\n    \n# exit(0) is neutral\n\n    \n# exit(1) is an error, could be a useful warning\n\n    \n# exit(2) or others like exit(100) are other warnings, or different messages\n\n\n\ndef\n \nstart\n():\n\n\n    \nprint\n \n\"You are in a dark room.\"\n\n    \nprint\n \n\"There is a door to your right and left.\"\n\n    \nprint\n \n\"Which one do you take: left or right?\"\n\n\n    \nchoice\n \n=\n \nraw_input\n(\n\"Write 'left' or 'right'> \"\n)\n \n# variable\n\n\n    \nif\n \nchoice\n \n==\n \n\"left\"\n:\n \n# variable check, exact\n\n        \nbear_room\n()\n \n# launch function bear_room\n\n    \nelif\n \nchoice\n \n==\n \n\"right\"\n:\n \n# variable check, exact\n\n        \ncthulhu_room\n()\n\n    \nelse\n:\n\n        \ndead\n(\n\"You stumble around the room until you starve.\"\n)\n\n\n\nstart\n()\n \n# launch the chain reaction\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nYou are in a dark room.\nThere is a door to your right and left.\nWhich one do you take: left or right?\nWrite 'left' or 'right'> left\nThere is bear here.\nThe bear has a bunch of honey.\nThe fat bear is in front of another door.\nHow are you going to move the bear?\nWrite 'take honey', 'taunt bear' or 'open door'> taunt bear\nThe bear has moved from the door. You can go thought it now.\nWrite 'take honey', 'taunt bear' or 'open door'> open door\nThis room is full of gold. How much do you take?\nWrite any number from 0 to 100> 63\nMan, learn to type a number. Good job!\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 0\n\n\n\n\n\n\n\n\nThere are multiple scenarios to try\u2026\n\n\n\n\nExercise 38, Doing Things to Lists\n\u00b6\n\n\n~ list, index, add, remove, delete, extract~\n\n\n1\n2\n3\n4\n5\nten_things\n \n=\n \n\"Apples Oranges Crows Telephones Light Sugar\"\n\n\n\nprint\n \n\"ten_things:\"\n,\n \nten_things\n,\n\", not a list\"\n\n\n\nprint\n \n\"Wait there are not 10 things is that list. Let's fix that.\"\n\n\n\n\n\n\n\n1\n2\nten_things\n:\n \nApples\n \nOranges\n \nCrows\n \nTelephones\n \nLight\n \nSugar\n \n,\n \nnot\n \na\n \nlist\n\n\nWait\n \nthere\n \nare\n \nnot\n \n10\n \nthings\n \nis\n \nthat\n \nlist\n.\n \nLet\n'\ns\n \nfix\n \nthat\n.\n\n\n\n\n\n\n\n1\n2\n3\nstuff\n \n=\n \nten_things\n.\nsplit\n(\n' '\n)\n \n# variable ten_things, method split\n\n\n\nprint\n \n\"stuff:\"\n,\n \nstuff\n,\n\", a list\"\n\n\n\n\n\n\n\n1\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar'] , a list\n\n\n\n\n\n\n1\n2\n3\nmore_stuff\n \n=\n \n[\n\"Day\"\n,\n \n\"Night\"\n,\n \n\"Song\"\n,\n \n\"Frisbee\"\n,\n \n\"Corn\"\n,\n \n\"Banana\"\n,\n \n\"Girl\"\n,\n \n\"Boy\"\n]\n \n# list variable\n\n\n\nprint\n \n\"more_stuff:\"\n,\n \nmore_stuff\n,\n\", a list\"\n\n\n\n\n\n\n\n1\nmore_stuff: ['Day', 'Night', 'Song', 'Frisbee', 'Corn', 'Banana', 'Girl', 'Boy'] , a list\n\n\n\n\n\n\n\n\nMost of the time, a for-loop is better than a while-loop.\n\n\nA while-loop is better when there is a test, a condition.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nwhile\n \nlen\n(\nstuff\n)\n \n!=\n \n10\n:\n\n    \nnext_one\n \n=\n \nmore_stuff\n.\npop\n()\n \n# load a variable with another variable, method pop, pop means extracting 1 item from a list variable, the last item in the list\n\n    \nprint\n \n\"Adding: \"\n,\n \nnext_one\n \n# show the content\n\n    \nstuff\n.\nappend\n(\nnext_one\n)\n \n# variable stuff add 1-item list variable; the loop will go as long as stuff has less than 10 items  \n\n    \nprint\n \n\"stuff:\"\n,\n \nstuff\n\n    \nprint\n \n\"There are \n%d\n items now.\"\n \n%\n \nlen\n(\nstuff\n)\n \n# length of stuff or the number of items in it\n\n\n\nprint\n \n\"There we go: \"\n,\n \nstuff\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nAdding\n:\n  \nBoy\n\n\nstuff\n:\n \n[\n'Apples'\n,\n \n'Oranges'\n,\n \n'Crows'\n,\n \n'Telephones'\n,\n \n'Light'\n,\n \n'Sugar'\n,\n \n'Boy'\n]\n\n\nThere\n \nare\n \n7\n \nitems\n \nnow\n.\n\n\nAdding\n:\n  \nGirl\n\n\nstuff\n:\n \n[\n'Apples'\n,\n \n'Oranges'\n,\n \n'Crows'\n,\n \n'Telephones'\n,\n \n'Light'\n,\n \n'Sugar'\n,\n \n'Boy'\n,\n \n'Girl'\n]\n\n\nThere\n \nare\n \n8\n \nitems\n \nnow\n.\n\n\nAdding\n:\n  \nBanana\n\n\nstuff\n:\n \n[\n'Apples'\n,\n \n'Oranges'\n,\n \n'Crows'\n,\n \n'Telephones'\n,\n \n'Light'\n,\n \n'Sugar'\n,\n \n'Boy'\n,\n \n'Girl'\n,\n \n'Banana'\n]\n\n\nThere\n \nare\n \n9\n \nitems\n \nnow\n.\n\n\nAdding\n:\n  \nCorn\n\n\nstuff\n:\n \n[\n'Apples'\n,\n \n'Oranges'\n,\n \n'Crows'\n,\n \n'Telephones'\n,\n \n'Light'\n,\n \n'Sugar'\n,\n \n'Boy'\n,\n \n'Girl'\n,\n \n'Banana'\n,\n \n'Corn'\n]\n\n\nThere\n \nare\n \n10\n \nitems\n \nnow\n.\n\n\nThere\n \nwe\n \ngo\n:\n  \n[\n'Apples'\n,\n \n'Oranges'\n,\n \n'Crows'\n,\n \n'Telephones'\n,\n \n'Light'\n,\n \n'Sugar'\n,\n \n'Boy'\n,\n \n'Girl'\n,\n \n'Banana'\n,\n \n'Corn'\n]\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nprint\n \n\"Let's do some things with stuff.\"\n\n\n\n# print and pop choosen items according to the index\n\n\n# could also be random index values!!!\n\n\n# could reorder the list before (ascending, descending) \n\n\nprint\n \nstuff\n[\n1\n]\n \n# the 2nd item\n\n\nprint\n \nstuff\n[\n2\n]\n \n# the 3rd item\n\n\nprint\n \nstuff\n[\n-\n1\n]\n \n# the last item\n\n\nprint\n \nstuff\n[\n-\n2\n]\n\n\nprint\n \nstuff\n.\npop\n()\n \n# pop the last item\n\n\nprint\n \nstuff\n.\npop\n(\n0\n)\n \n# pop the first item\n\n\nprint\n \nstuff\n.\npop\n(\n1\n)\n \n# pop the 2nd item\n\n\nprint\n \nstuff\n.\npop\n(\n-\n1\n)\n \n# pop the last item\n\n\nprint\n \n' '\n.\njoin\n(\nstuff\n)\n \n# var.split(' ') vs ' '.join(var), concatenate the list\n\n\nprint\n \n'#'\n.\njoin\n(\nstuff\n[\n3\n:\n5\n])\n \n# add a character at position 3 and 4 (4th, 5th, excluding the last) \n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nLet's do some things with stuff.\nOranges\nCrows\nCorn\nBanana\nCorn\nApples\nCrows\nBanana\nOranges Telephones Light Sugar Boy Girl\nSugar#Boy\n\n\n\n\n\n\nExercise 39, Dictionaries, Oh Lovely Dictionaries\n\u00b6\n\n\n~ dictionary~\n\n\n1\n2\n3\n4\nthings\n \n=\n \n[\n'a'\n,\n'b'\n,\n'c'\n,\n'd'\n]\n \n# list\n\n\n\nprint\n \nthings\n\n\nprint\n \nthings\n[\n1\n]\n\n\n\n\n\n\n\n1\n2\n['a', 'b', 'c', 'd']\n\n\nb\n\n\n\n\n\n\n\n\n\nChange an element.\n\n\n\n\n1\n2\nthings\n[\n1\n]\n \n=\n \n'z'\n\n\nprint\n \nthings\n\n\n\n\n\n\n\n1\n['a', 'z', 'c', 'd']\n\n\n\n\n\n\n\n\nA dictionary has keys associated with values. \n\n\nOrder does not matter. \n\n\nIf you supply the key, you will get the value.\n\n\n\n\n1\n2\n3\n4\n5\n6\nstuff\n \n=\n \n{\n'name'\n \n:\n \n'Zed'\n,\n'age'\n \n:\n \n'39'\n,\n'height'\n \n:\n \n8\n \n*\n \n12\n \n+\n \n2\n}\n \n# a dictionary\n\n\n\nprint\n \nstuff\n\n\nprint\n \nstuff\n[\n'name'\n]\n\n\nprint\n \nstuff\n[\n'age'\n]\n\n\nprint\n \nstuff\n[\n'height'\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\n{'age': '39', 'name': 'Zed', 'height': 98}\nZed\n39\n98\n\n\n\n\n\n\n\n\nAdd an element.\n\n\n\n\n1\n2\n3\nstuff\n[\n'city'\n]\n \n=\n \n\"San Francisco\"\n\n\nprint\n \nstuff\n[\n'city'\n]\n\n\nprint\n \nstuff\n\n\n\n\n\n\n\n1\n2\nSan Francisco\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n\n\n\n\n\n\n\n\nAdd and remove an element.\n\n\n\n\n1\n2\n3\n4\n5\nstuff\n[\n'color'\n]\n \n=\n \n\"blue\"\n\n\nprint\n \nstuff\n\n\n\ndel\n \nstuff\n[\n'color'\n]\n\n\nprint\n \nstuff\n\n\n\n\n\n\n\n1\n2\n{'color': 'blue', 'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n\n\n\n\n\n\n\n\nIf the value does not exist when you call it, it will turn out an error. Instead, write it this way: \nprint \"%r\" % stuff.get('color',None)\n. \n\n\nIf it\u2019s not existant, it will return \u2018None\u2019 or a value by default\n\n\n\n\n1\nprint\n \nstuff\n[\n'state'\n]\n\n\n\n\n\n    ---------------------------------------------------------------------------\n\n\n1\n2\n3\n4\n5\n6\n7\nKeyError                                  Traceback (most recent call last)\n\n<ipython-input-69-f211ffe8fe02> in <module>()\n----> 1 print stuff['state']\n\n\nKeyError: 'state'\n\n\n\n\n\n\n1\nprint\n \n\"\n%r\n\"\n \n%\n \nstuff\n.\nget\n(\n'color'\n,\n \nNone\n)\n\n\n\n\n\n\n\n1\nNone\n\n\n\n\n\n\n\n\nChange an element.\n\n\n\n\n1\n2\n3\n4\nprint\n \nstuff\n[\n'age'\n]\n\n\n\nstuff\n[\n'age'\n]\n \n=\n \n400\n\n\nprint\n \nstuff\n[\n'age'\n]\n\n\n\n\n\n\n\n1\n2\n39\n400\n\n\n\n\n\n\n\n\nExtract with the index.\n\n\n\n\n1\n2\n3\n4\n5\n6\nstuff\n[\n1\n]\n \n=\n \n\"Wow\"\n\n\nstuff\n[\n2\n]\n \n=\n \n\"Neato\"\n\n\nprint\n \nstuff\n[\n1\n]\n\n\nprint\n \nstuff\n[\n2\n]\n\n\n\nprint\n \nstuff\n \n# new items won't be in order\n\n\n\n\n\n\n\n1\n2\n3\nWow\nNeato\n{'city': 'San Francisco', 2: 'Neato', 'name': 'Zed', 1: 'Wow', 'age': 400, 'height': 98}\n\n\n\n\n\n\n\n\nDelete an element (according to the index).\n\n\n\n\n1\n2\n3\n4\ndel\n \nstuff\n[\n1\n]\n\n\ndel\n \nstuff\n[\n2\n]\n\n\n\nprint\n \nstuff\n\n\n\n\n\n\n\n1\n{'city': 'San Francisco', 'name': 'Zed', 'age': 400, 'height': 98}\n\n\n\n\n\n\n\n\nCreate a mapping of state to abbreviation.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nstates\n \n=\n \n{\n\n    \n'Oregon'\n:\n \n'OR'\n,\n\n    \n'Florida'\n:\n \n'FL'\n,\n\n    \n'California'\n:\n \n'CA'\n,\n\n    \n'New York'\n:\n \n'NY'\n,\n\n    \n'Michigan'\n:\n \n'MI'\n\n\n}\n\n\n\n\n\n\n\n\n\nCreate a basic set of states and some cities in them.\n\n\n\n\n1\n2\n3\n4\n5\ncities\n \n=\n \n{\n\n    \n'CA'\n:\n \n'San Francisco'\n,\n\n    \n'MI'\n:\n \n'Detroit'\n,\n\n    \n'FL'\n:\n \n'Jacksonville'\n\n\n}\n\n\n\n\n\n\n\n\n\nAdd some key:value to dictionary cities.\n\n\n\n\n1\n2\ncities\n[\n'NY'\n]\n \n=\n \n'New York'\n\n\ncities\n[\n'OR'\n]\n \n=\n \n'Portland'\n\n\n\n\n\n\n\n\n\nPrint out some cities.\n\n\n\n\n1\n2\n3\n4\nprint\n \n\"Dictionary 'cities': \"\n,\n \ncities\n\n\nprint\n \n'-'\n \n*\n \n10\n\n\nprint\n \n\"NY State has: \"\n,\n \ncities\n[\n'NY'\n]\n \n# call the key\n\n\nprint\n \n\"OR State has: \"\n,\n \ncities\n[\n'OR'\n]\n \n# get the value\n\n\n\n\n\n\n\n1\n2\n3\n4\nDictionary 'cities':  {'FL': 'Jacksonville', 'CA': 'San Francisco', 'MI': 'Detroit', 'OR': 'Portland', 'NY': 'New York'}\n----------\nNY State has:  New York\nOR State has:  Portland\n\n\n\n\n\n\n\n\nPrint some states.\n\n\n\n\n1\n2\n3\n4\nprint\n \n\"Dictionary 'states': \"\n,\n \nstates\n\n\nprint\n \n'-'\n \n*\n \n10\n\n\nprint\n \n\"Michigan's abbreviation is: \"\n,\n \nstates\n[\n'Michigan'\n]\n\n\nprint\n \n\"Florida's abbrebiation is: \"\n,\n \nstates\n[\n'Florida'\n]\n\n\n\n\n\n\n\n1\n2\n3\n4\nDictionary 'states':  {'California': 'CA', 'Michigan': 'MI', 'New York': 'NY', 'Florida': 'FL', 'Oregon': 'OR'}\n----------\nMichigan's abbreviation is:  MI\nFlorida's abbrebiation is:  FL\n\n\n\n\n\n\n\n\nPrint a dictionary in dictionary.\n\n\n\n\n1\n2\n3\nprint\n \n\"Michigan has: \"\n,\n \ncities\n[\nstates\n[\n'Michigan'\n]]\n\n\n# is like states['Michigan'], then cities['MI']\n\n\nprint\n \n\"florida has: \"\n,\n \ncities\n[\nstates\n[\n'Florida'\n]]\n\n\n\n\n\n\n\n1\n2\nMichigan has:  Detroit\nflorida has:  Jacksonville\n\n\n\n\n\n\n\n\nPrint every state abbreviation.\n\n\n\n\n1\n2\n3\n4\nprint\n \n\"Enumerate Dictionary 'states', key:value...\"\n\n\nfor\n \nstate\n,\n \nabbrev\n \nin\n \nstates\n.\nitems\n():\n\n    \nprint\n \n\"\n%s\n is abbreviated \n%s\n\"\n \n%\n \n(\nstate\n,\n \nabbrev\n)\n\n\n# state = 1st item = key, abbrev = 2nd item = value\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nEnumerate Dictionary 'states', key:value...\nCalifornia is abbreviated CA\nMichigan is abbreviated MI\nNew York is abbreviated NY\nFlorida is abbreviated FL\nOregon is abbreviated OR\n\n\n\n\n\n\n\n\nPrint every city in state.\n\n\n\n\n1\n2\n3\nprint\n \n\"Enumerate Dictionary 'cities', key:value...\"\n\n\nfor\n \nabbrev\n,\n \ncity\n \nin\n \ncities\n.\nitems\n():\n\n    \nprint\n \n\"\n%s\n has the city \n%s\n\"\n \n%\n \n(\nabbrev\n,\n \ncity\n)\n   \n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nEnumerate Dictionary 'cities', key:value...\nFL has the city Jacksonville\nCA has the city San Francisco\nMI has the city Detroit\nOR has the city Portland\nNY has the city New York\n\n\n\n\n\n\n\n\nNow do both at the same time.\n\n\n\n\n1\n2\n3\n4\nprint\n \n\"Enumerate both dictionaries...\"\n\n\nfor\n \nstate\n,\n \nabbrev\n \nin\n \nstates\n.\nitems\n():\n\n    \nprint\n \n\"\n%s\n state is abbreviated \n%s\n and has city \n%s\n\"\n \n%\n \n(\nstate\n,\n \nabbrev\n,\n \ncities\n[\nabbrev\n])\n\n\n# state California gives abbrev CA, inside cities gives San Francisco   \n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nEnumerate both dictionaries...\nCalifornia state is abbreviated CA and has city San Francisco\nMichigan state is abbreviated MI and has city Detroit\nNew York state is abbreviated NY and has city New York\nFlorida state is abbreviated FL and has city Jacksonville\nOregon state is abbreviated OR and has city Portland\n\n\n\n\n\n\n\n\nget()\n seek a key, whether it exists or not.\n\n\n\n\n1\n2\n3\n4\nstate\n \n=\n \nstates\n.\nget\n(\n'Texas'\n)\n \n# extract\n\n\n\nif\n \nnot\n \nstate\n:\n\n    \nprint\n \n\"Sorry, no Texas.\"\n\n\n\n\n\n\n\n1\nSorry, no Texas.\n\n\n\n\n\n\n\n\nGet a city with a default value.\n\n\n\n\n1\n2\ncity\n \n=\n \ncities\n.\nget\n(\n'TX'\n,\n \n'Does Not Exist'\n)\n\n\nprint\n \n\"The city for the state 'TX' is: \n%s\n\"\n \n%\n \ncity\n\n\n\n\n\n\n\n1\nThe city for the state 'TX' is: Does Not Exist\n\n\n\n\n\n\n\n\nLet\u2019s step up the above operations.\n\n\nModule \nhashmap.py\n works through a dictionary. \n\n\nModule \nex39_test.py\n contains dictionaries (just like the above).\n\n\nIn Python, we would run module \nex39_test.py\n. \n\n\nThe module would begin by importing module \nhashmap.py\n to use its methods and perform operations.\n\n\nConsult the manual.\n\n\n\n\nExercise 40, Modules, Classes, and Objects\n\u00b6\n\n\n1\n2\n3\nmystuff\n \n=\n \n{\n'apple'\n:\n \n'I AM APPLES'\n}\n\n\n\nprint\n \nmystuff\n[\n'apple'\n]\n \n# get X from Y\n\n\n\n\n\n\n\n1\nI AM APPLES\n\n\n\n\n\n\n\n\nYou can import a file with functions and variables from a another module.\n\n\nYou can access the functions (methods) and variables from this other module.\n\n\nBoth files must be in the same directory, otherwise, specify the path as well.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# %load ex40.py\n\n\ndef\n \napple\n():\n\n\n    \nprint\n \n\"I AM APPLES!\"\n\n\n\n# this is just a variable\n\n\ntangerine\n \n=\n \n\"Living reflection of a dream\"\n\n\n\napple\n()\n\n\n\n\n\n\n\n1\n%\nrun\n \nex40\n.\npy\n\n\n\n\n\n\n\n1\nI AM APPLES!\n\n\n\n\n\n\n1\n2\n3\n4\n5\nimport\n \nex40\n\n\n\nex40\n.\napple\n()\n\n\n\nprint\n \nex40\n.\ntangerine\n\n\n\n\n\n\n\n1\n2\nI AM APPLES!\nLiving reflection of a dream\n\n\n\n\n\n\n1\n2\n3\nmystuff\n[\n'new'\n]\n \n=\n \nex40\n.\ntangerine\n\n\n\nprint\n \nmystuff\n[\n'new'\n]\n\n\n\n\n\n\n\n1\nLiving reflection of a dream\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\nimport\n \nex40\n\n\n\nthing\n \n=\n \nex40\n\n\n\nthing\n.\napple\n()\n\n\nprint\n \nthing\n.\ntangerine\n\n\n\n\n\n\n\n1\n2\n3\nI AM APPLES!\nI AM APPLES!\nLiving reflection of a dream\n\n\n\n\n\n\n\n\nUse a class instead of an imported module.\n\n\nRemember: class method = class function.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\nclass\n \nSong\n(\nobject\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nlyrics\n):\n \n# instantiation and shortcut for a creating a variable\n\n        \nself\n.\nlyrics\n \n=\n \nlyrics\n \n# the variable could be equal to a text, a number or a variable\n\n\n    \ndef\n \nsing_me_a_song\n(\nself\n):\n \n# create a class function\n\n        \nfor\n \nline\n \nin\n \nself\n.\nlyrics\n:\n\n            \nprint\n \nline\n\n\n\n\n# instance            \n\n\nhappy_bday\n \n=\n \nSong\n([\n\"Happy birthday to you\"\n,\n\n                   \n\"I don't want to get sued\"\n,\n\n                   \n\"So I'll stop right there\"\n])\n\n\n\n# instance\n\n\nbulls_on_parade\n \n=\n \nSong\n([\n\"They rally around tha family\"\n,\n\n                        \n\"With pockets full of shells\"\n])\n\n\n\n# instance\n\n\nau_clair\n \n=\n \nSong\n([\n\"Au clair de la lune\"\n,\n\n                 \n\"Mon ami Pierrot\"\n,\n\n                 \n\"Prete-moi ta plume\"\n,\n\n                 \n\"Pour ecrire un mot\"\n])\n\n\n\n# not an instance!!!\n\n\nfrere_jacques\n \n=\n \n[\n\"Frere Jacques (bis)\"\n,\n\n                 \n\"Dormez-vous (bis)\"\n,\n\n                 \n\"Sonnez les matines (bis)\"\n,\n\n                 \n\"Ding-din-don (bis)\"\n]\n\n\n\n# instance\n\n\nfrere\n \n=\n \nSong\n([\n\"Frere Jacques (bis)\"\n,\n\n              \n\"Dormez-vous (bis)\"\n,\n\n              \n\"Sonnez les matines (bis)\"\n,\n\n              \n\"Ding-din-don (bis)\"\n])\n\n\n\n\n# not a class function\n\n\ndef\n \nchante_moi\n(\nparoles\n):\n \n# create a function\n\n\n    \nfor\n \nligne\n \nin\n \nparoles\n:\n\n        \nprint\n \nligne\n\n\n\n\n\n\n\n\n\nInvoke an instance.\n\n\n\n\n1\nhappy_bday\n.\nsing_me_a_song\n()\n\n\n\n\n\n\n\n1\n2\n3\nHappy birthday to you\nI don't want to get sued\nSo I'll stop right there\n\n\n\n\n\n\n\n\nAgain.\n\n\n\n\n1\nbulls_on_parade\n.\nsing_me_a_song\n()\n\n\n\n\n\n\n\n1\n2\nThey rally around tha family\nWith pockets full of shells\n\n\n\n\n\n\nWrite \ninstance.class function\n/\ninstance.class method\n\n\n1\nau_clair\n.\nsing_me_a_song\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\nAu clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot\n\n\n\n\n\n\n\n\nWrite the method the other around: \nClass.class_function()\n/\nClass.class_method()\n.\n\n\n\n\n1\n2\n#au_clair.sing_me_a_song()\n\n\nSong\n.\nsing_me_a_song\n(\nau_clair\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\nAu clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot\n\n\n\n\n\n\n\n\nThis function is independent.\n\n\nfrere_jacques.chante_moi()\n can\u2019t be!!!\n\n\n\n\n1\nchante_moi\n(\nfrere_jacques\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\nFrere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)\n\n\n\n\n\n\n\n\nIt looks like \nClass.class_function()\n/\nClass.class_method()\n\n\n\n\n1\nSong\n.\nsing_me_a_song\n(\nfrere\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\nFrere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)\n\n\n\n\n\n\nExercise 41, Learning to Speak Object-Oriented\n\u00b6\n\n\n\n\nObject-oriented programming (oop).\n\n\nThe script below (\nex41.py\n) imports a word list from a text file (\nex41_words.txt\n).\n\n\nThe script is a drill for learning oop.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\nimport\n \nrandom\n\n\nimport\n \nsys\n\n\n\n## WORD_URL = \"http://learncodethehardway.org/words.txt\" # read a file http://learncodethehardway.org/words.txt\n\n\nWORD_TXT\n \n=\n \n\"ex41_words.txt\"\n\n\nWORDS\n \n=\n \n[]\n\n\n\n# dictionary {\"Python\": \"English\"}\n\n\nPHRASES\n \n=\n \n{\n\n    \n\"class \n%%\n%(\n%%\n%):\"\n:\n\n        \n\"Make a class named \n%%\n% that is-a \n%%\n%.\"\n,\n\n    \n\"class \n%%\n%(object):\n\\n\\t\ndef __init__(self, ***):\"\n:\n\n        \n\"class \n%%\n% has-a __init__ that takes self and *** parameters.\"\n,\n\n    \n\"class \n%%\n%(object):\n\\n\\t\ndef ***(self, @@@):\"\n:\n\n        \n\"class \n%%\n% has-a function named *** that takes self and @@@ parameters.\"\n,\n\n    \n\"*** = \n%%\n%()\"\n:\n\n        \n\"Set *** to an instance of class \n%%\n%.\"\n,\n\n    \n\"***.***(@@@)\"\n:\n\n        \n\"From *** get the *** function, and call it with parameters self, @@@.\"\n,\n\n    \n\"***.*** = '***'\"\n:\n\n        \n\"From *** get the *** attribute and set it to '***'.\"\n\n\n}\n\n\n\n# do they want to drill phrases first\n\n\nif\n \nlen\n(\nsys\n.\nargv\n)\n \n==\n \n2\n \nand\n \nsys\n.\nargv\n[\n1\n]\n \n==\n \n\"English\"\n:\n\n    \nPHRASE_FIRST\n \n=\n \nTrue\n\n\nelse\n:\n\n    \nPHRASE_FIRST\n \n=\n \nFalse\n\n\n\n# load up the words from the website\n\n\n## for word in urlopen(WORD_URL).readlines():\n\n\nfor\n \nword\n \nin\n \nopen\n(\nWORD_TXT\n,\n \n\"r\"\n)\n.\nreadlines\n():\n\n    \nWORDS\n.\nappend\n(\nword\n.\nstrip\n())\n\n\n\ndef\n \nconvert\n(\nsnippet\n,\n \nphrase\n):\n \n# 'list comprehension', reseach on the Internet\n\n\n    \nclass_names\n \n=\n \n[\nw\n.\ncapitalize\n()\n \nfor\n \nw\n \nin\n\n                    \nrandom\n.\nsample\n(\nWORDS\n,\n \nsnippet\n.\ncount\n(\n\"\n%%\n%\"\n))]\n\n    \nother_names\n \n=\n \nrandom\n.\nsample\n(\nWORDS\n,\n \nsnippet\n.\ncount\n(\n\"***\"\n))\n\n    \nresults\n \n=\n \n[]\n\n    \nparam_names\n \n=\n \n[]\n\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nsnippet\n.\ncount\n(\n\"@@@\"\n)):\n\n        \nparam_count\n \n=\n \nrandom\n.\nrandint\n(\n1\n,\n3\n)\n\n        \nparam_names\n.\nappend\n(\n', '\n.\njoin\n(\nrandom\n.\nsample\n(\nWORDS\n,\n \nparam_count\n)))\n\n\n    \nfor\n \nsentence\n \nin\n \nsnippet\n,\n \nphrase\n:\n\n        \nresult\n \n=\n \nsentence\n[:]\n\n\n        \n# fake class names\n\n        \nfor\n \nword\n \nin\n \nclass_names\n:\n\n            \nresult\n \n=\n \nresult\n.\nreplace\n(\n\"\n%%\n%\"\n,\n \nword\n,\n \n1\n)\n\n\n        \n# fake other names\n\n        \nfor\n \nword\n \nin\n \nother_names\n:\n\n            \nresult\n \n=\n \nresult\n.\nreplace\n(\n\"***\"\n,\n \nword\n,\n \n1\n)\n\n\n        \n# fake parameter lists\n\n        \nfor\n \nword\n \nin\n \nparam_names\n:\n\n            \nresult\n \n=\n \nresult\n.\nreplace\n(\n\"@@@\"\n,\n \nword\n,\n \n1\n)\n\n\n        \nresults\n.\nappend\n(\nresult\n)\n\n\n    \nreturn\n \nresults\n\n\n\n# keep going until until they hit CTRL-D\n\n\ntry\n:\n\n    \nwhile\n \nTrue\n:\n\n        \nsnippets\n \n=\n \nPHRASES\n.\nkeys\n()\n\n        \nrandom\n.\nshuffle\n(\nsnippets\n)\n\n\n        \nfor\n \nsnippet\n \nin\n \nsnippets\n:\n\n            \nphrase\n \n=\n \nPHRASES\n[\nsnippet\n]\n\n            \nquestion\n,\n \nanswer\n \n=\n \nconvert\n(\nsnippet\n,\n \nphrase\n)\n\n            \nif\n \nPHRASE_FIRST\n:\n\n                \nquestion\n,\n \nanswer\n \n=\n \nanswer\n,\n \nquestion\n\n\n            \nprint\n \nquestion\n\n\n            \nraw_input\n(\n\"> \"\n)\n\n            \nprint\n \n\"ANSWER: \n%s\n\\n\\n\n\"\n \n%\n \nanswer\n\n\nexcept\n \nEOFError\n:\n\n    \nprint\n \n\"\n\\n\nBye\"\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nalarm\n.\ndeer\n(\ndisgust\n,\n \nbrass\n)\n\n\n>\n \ndeer\n \nis\n \na\n \nClass\n \nalarm\n \nfunction\n \nthat\n \ntakes\n \narguments\n \ndigust\n \nand\n \nbrass\n\n\nANSWER\n: \nFrom\n \nalarm\n \nget\n \nthe\n \ndeer\n \nfunction\n,\n \nand\n \ncall\n \nit\n \nwith\n \nparameters\n \nself\n,\n \ndisgust\n,\n \nbrass\n.\n\n\n\nclass\n \nBuilding\n(\nBlood\n)\n:\n\n\n>\n \netc\n\n\nANSWER\n: \nMake\n \na\n \nclass\n \nnamed\n \nBuilding\n \nthat\n \nis\n-\na\n \nBlood\n.\n\n\n\nbucket\n \n=\n \nBerry\n()\n\n\n\n\n\n\n\n\n\n\n\nSample of the original word list, 10 out of 503:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ntext\naccount\nachiever\nactor\naddition\nadjustment\nadvertisement\nadvice\naftermath\nagreement\nairplane\n\n\n\n\n\n\n\n\n\n\nSame script, but the list of word comes  from the Internet.\n\n\n\n\nA note on the script:\n\n\nThe use of constant variable such as WORD_URL (such variable should not be modified).\n\n\nA constant variable can be anything from a number, a string to a dictionary.\n\n\nThe use of \ntry/except\n pair to check for errors. It is similar to the pair \nif/else\n.\n\n\nTherea are several types of errors. \nEOFError\n is just one type. Consult other (or online) manuals to find out about all the types of errors.\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\nimport\n \nrandom\n\n\nfrom\n \nurllib\n \nimport\n \nurlopen\n\n\nimport\n \nsys\n\n\n\nWORD_URL\n \n=\n \n\"http://learncodethehardway.org/words.txt\"\n \n# read a file\n\n\nWORDS\n \n=\n \n[]\n\n\n\n# dictionary {\"Python\": \"English\"}\n\n\nPHRASES\n \n=\n \n{\n\n    \n\"class \n%%\n%(\n%%\n%):\"\n:\n\n        \n\"Make a class named \n%%\n% that is-a \n%%\n%.\"\n,\n\n    \n\"class \n%%\n%(object):\n\\n\\t\ndef __init__(self, ***)\"\n:\n\n        \n\"class \n%%\n% has-a __init__ that takes self and *** parameters.\"\n,\n\n    \n\"class \n%%\n%(object):\n\\n\\t\ndef ***(self, @@@)\"\n:\n\n        \n\"class \n%%\n% has-a function named *** that takes self and @@@ parameters.\"\n,\n\n    \n\"*** = \n%%\n%()\"\n:\n\n        \n\"Set *** to an instance of class \n%%\n%.\"\n,\n\n    \n\"***.***(@@@)\"\n:\n\n        \n\"From *** get the *** function, and call it with parameters self, @@@.\"\n,\n\n    \n\"***.*** = '***'\"\n:\n\n        \n\"From *** get the *** attribute and set it to '***'.\"\n\n\n}\n\n\n\n# do they want to drill phrases first\n\n\nif\n \nlen\n(\nsys\n.\nargv\n)\n \n==\n \n2\n \nand\n \nsys\n.\nargv\n[\n1\n]\n \n==\n \n\"English\"\n:\n\n    \nPHRASE_FIRST\n \n=\n \nTrue\n\n\nelse\n:\n\n    \nPHRASE_FIRST\n \n=\n \nFalse\n\n\n\n# load up the words from the website\n\n\nfor\n \nword\n \nin\n \nurlopen\n(\nWORD_URL\n)\n.\nreadlines\n():\n\n    \nWORDS\n.\nappend\n(\nword\n.\nstrip\n())\n\n\n\ndef\n \nconvert\n(\nsnippet\n,\n \nphrase\n):\n \n# 'list comprehension', reseach on the Internet\n\n\n    \nclass_names\n \n=\n \n[\nw\n.\ncapitalize\n()\n \nfor\n \nw\n \nin\n\n                    \nrandom\n.\nsample\n(\nWORDS\n,\n \nsnippet\n.\ncount\n(\n\"\n%%\n%\"\n))]\n\n    \nother_names\n \n=\n \nrandom\n.\nsample\n(\nWORDS\n,\n \nsnippet\n.\ncount\n(\n\"***\"\n))\n\n    \nresults\n \n=\n \n[]\n\n    \nparam_names\n \n=\n \n[]\n\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nsnippet\n.\ncount\n(\n\"@@@\"\n)):\n\n        \nparam_count\n \n=\n \nrandom\n.\nrandint\n(\n1\n,\n3\n)\n\n        \nparam_names\n.\nappend\n(\n', '\n.\njoin\n(\nrandom\n.\nsample\n(\nWORDS\n,\n \nparam_count\n)))\n\n\n    \nfor\n \nsentence\n \nin\n \nsnippet\n,\n \nphrase\n:\n\n        \nresult\n \n=\n \nsentence\n[:]\n\n\n        \n# fake class names\n\n        \nfor\n \nword\n \nin\n \nclass_names\n:\n\n            \nresult\n \n=\n \nresult\n.\nreplace\n(\n\"\n%%\n%\"\n,\n \nword\n,\n \n1\n)\n\n\n        \n# fake other names\n\n        \nfor\n \nword\n \nin\n \nother_names\n:\n\n            \nresult\n \n=\n \nresult\n.\nreplace\n(\n\"***\"\n,\n \nword\n,\n \n1\n)\n\n\n        \n# fake parameter lists\n\n        \nfor\n \nword\n \nin\n \nparam_names\n:\n\n            \nresult\n \n=\n \nresult\n.\nreplace\n(\n\"@@@\"\n,\n \nword\n,\n \n1\n)\n\n\n        \nresults\n.\nappend\n(\nresult\n)\n\n\n    \nreturn\n \nresults\n\n\n\n# keep going until until they hit CTRL-D\n\n\ntry\n:\n\n    \nwhile\n \nTrue\n:\n\n        \nsnippets\n \n=\n \nPHRASES\n.\nkeys\n()\n\n        \nrandom\n.\nshuffle\n(\nsnippets\n)\n\n\n        \nfor\n \nsnippet\n \nin\n \nsnippets\n:\n\n            \nphrase\n \n=\n \nPHRASES\n[\nsnippet\n]\n\n            \nquestion\n,\n \nanswer\n \n=\n \nconvert\n(\nsnippet\n,\n \nphrase\n)\n\n            \nif\n \nPHRASE_FIRST\n:\n\n                \nquestion\n,\n \nanswer\n \n=\n \nanswer\n,\n \nquestion\n\n\n            \nprint\n \nquestion\n\n\n            \nraw_input\n(\n\"> \"\n)\n\n            \nprint\n \n\"ANSWER: \n%s\n\\n\\n\n\"\n \n%\n \nanswer\n\n\nexcept\n \nEOFError\n:\n\n    \nprint\n \n\"\n\\n\nBye\"\n\n\n\n\n\n\n\nExercise 42, Is-A, Has-A, Objects, and Classes\n\u00b6\n\n\n\n\nThis exercise explains Exercise 41.\n\n\n\n\nInheritance:\n\n\n\n\nis-a.\n\n\nobject.\n\n\ninstance of an object.\n\n\nobject of object.\n\n\n\n\n\n\nhas-a.\n\n\nattribute.\n\n\nnot attribute.\n\n\nobject.\n\n\n\n\n\n\n\n\n\n\n\n\nAnimal is-a object.\n\n\n\n\n\n\n1\n2\n3\n4\nclass\n \nAnimal\n(\nobject\n):\n\n\n\n    \npass\n\n\n\n\n\n\n\n\n\nDog is-a Animal, Animal is-a object.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nDog\n(\nAnimal\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n):\n\n\n    \n## Cat has-a name\n\n        \nself\n.\nname\n \n=\n \nname\n\n\n\n\n\n\n\n\n\nCat is-a Animal, Animal is-a object.\n\n\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nCat\n(\nAnimal\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n):\n\n    \n## Cat has-a name\n\n        \nself\n.\nname\n \n=\n \nname\n\n\n\n\n\n\n\n\n\nPerson is-a object.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nclass\n \nPerson\n(\nobject\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n):\n\n\n    \n## Person has-a name\n\n        \nself\n.\nname\n \n=\n \nname\n\n\n    \n## Person has-a pet of some kind, but the pet is specifies elsewhere...\n\n        \nself\n.\npet\n \n=\n \nNone\n\n\n\n\n\n\n\n\n\nEmployee is-a Person, Person is-a object.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nclass\n \nEmployee\n(\nPerson\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n,\n \nsalary\n):\n\n\n    \n## Employee has-a name, because Person has-a name\n\n    \n## super:\n\n        \nsuper\n(\nEmployee\n,\n \nself\n)\n.\n__init__\n(\nname\n)\n\n    \n## Employee has-a salary\n\n        \nself\n.\nsalary\n \n=\n \nsalary\n\n\n\n\n\n\n\n\n\nFish is-a object.\n\n\n\n\n1\n2\n3\n4\n5\nclass\n \nFish\n(\nobject\n):\n\n\n\n    \n## no attributes like has-a name\n\n    \npass\n\n\n\n\n\n\n\n\n\nSalmon is-a Fish, Fish is-a object.\n\n\n\n\n1\n2\n3\n4\n5\nclass\n \nSalmon\n(\nFish\n):\n\n\n\n    \n## no attributes like has-a name\n\n    \npass\n\n\n\n\n\n\n\n\n\nHalibut is-a Fish, Fish is-a object.\n\n\n\n\n1\n2\n3\n4\n5\nclass\n \nHalibut\n(\nFish\n):\n\n\n\n    \n## no attributes like has-a name\n\n    \npass\n\n\n\n\n\n\n\n\n\nrover is-a instance of name, Dog has-a name.\n\n\n\n\n1\nrover\n \n=\n \nDog\n(\n\"Rover\"\n)\n\n\n\n\n\n\n\n\n\nsatan is-a instance of name, Cat has-a name.\n\n\n\n\n1\nsatan\n \n=\n \nCat\n(\n\"Satan\"\n)\n\n\n\n\n\n\n\n\n\nmary is-a instance of name, Person has-a name.\n\n\n\n\n1\nmary\n \n=\n \nPerson\n(\n\"Mary\"\n)\n\n\n\n\n\n\n\n\n\nmary has-a Cat, Cat has-a name, satan, is-a Cat.\n\n\n\n\n1\nmary\n.\npet\n \n=\n \nsatan\n\n\n\n\n\n\n\n\n\nfrank is-a instance of name, salary, Employee has-a name, salary.\n\n\n\n\n1\nfrank\n \n=\n \nEmployee\n(\n\"Frank\"\n,\n \n120000\n)\n\n\n\n\n\n\n\n\n\nfrank has-a Dog, Dog has-a name, rover, is-a Dog.\n\n\n\n\n1\nfrank\n.\npet\n \n=\n \nrover\n\n\n\n\n\n\n\n\n\nflipper is-a instance of Fish, Fish is-a object, both has-a not attributes.\n\n\n\n\n1\nflipper\n \n=\n \nFish\n()\n\n\n\n\n\n\n\n\n\ncrouse is-a instance of Salmon, Salmon is-a Fish; both has-a not attribute.\n\n\n\n\n1\ncrouse\n \n=\n \nSalmon\n()\n\n\n\n\n\n\n\n\n\nharry is-a instance of Halibut, Halibut is-a Fish; both has-a not attribute.\n\n\n\n\n1\nharry\n \n=\n \nHalibut\n()\n\n\n\n\n\n\n\n\n\nWrap-up.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nobject\n    class Fish(object)\n        class Salmon(Fish)\n            crouse = Salmon()\n        class Halibut(Fish)\n            harry = Halibut()\n        flipper = Fish()\n    class Animal(object)\n        class Dog(Animal)\n            rover = Dog(\"Rover\") has-a name\n        class Cat(Animal)\n            satan = Cat(\"Satan\") has-a name\n    class Person(object)\n        mary.pet = satan has-a name, pet\n        class Employee(Person)\n            frank = Employee (\"Frank\", 120000) has-a name, salary\n            frank.pet = rover has-a pet\n\n\n\n\n\n\n\n\nThe concept of inheritance, and those of implicit inheritance, overridden inheritance, multiple inheritance, composition, alteration, super objects (or \u2018reinheritance\u2019) are explained in Exercise 44.\n\n\n\n\nExercise 43, Gothons from Planet Percal #25\n\u00b6\n\n\nThis Exercise is the first to prepare the final project (Exercise 52, the last chapter). Let\u2019s create a game, from A to Z. First, start by planning. This methodology is valuable for planning any kind of project or program.\n\n\nMethodology\n\n\n1- Write about the problem:\n\n\n\u201cAliens have invaded a space ship and our hero has to go through a maze of rooms defeating them so he can escape into an escape pod to the planet below. The game will be more like a Zork or Adventure type game with text outputs and funny ways to die. The game will involve an engine that runs a map full of rooms or scenes. Each room will print its own description when the player enters it and then tell the engine what room to run next out of the map.\u201d\n\n\n2- Describe each scene:\n\n\n\n\nDeath\n\n\nThis is when the player dies and should be something funny.\n\n\n\n\n\n\nCentral Corridor\n\n\nThis is the starting point and has a Gothon already standing there they have to defeat with a joke before continuing.\n\n\n\n\n\n\nLaser Weapon Armory\n\n\nThis is where the hero gets a neutron bomb to blow up the ship before getting to the escape pod. It has a keypad the hero has to guess the number for.\n\n\n\n\n\n\nThe Bridge\n\n\nAnother battle scene with a Gothon where the hero places the bomb.\n\n\n\n\n\n\nEscape Pod\n\n\nWhere the hero escapes but only after guessing the right escape pod. \n\n\n\n\n\n\n\n\n3- Draw a map, write more descriptions.\n\n\n4- Extract key concepts:\n\n\n\n\n1 concept = 1 class.\n\n\nResearch them, deepen things.\n\n\nNouns = concepts = classes:\n\n\nAlien\n\n\nPlayer\n\n\nShip\n\n\nMaze\n\n\nRoom\n\n\nScene\n\n\nGothon\n\n\nEscape Pod\n\n\nPlanet\n\n\nMap\n\n\nEngine\n\n\nDeath\n\n\nCentral Corridor\n\n\nLaser Weapon Armory\n\n\nThe Bridge\n\n\n\n\n\n\nVerbs = functions.\n\n\n\n\nThis is par the PEP: classes should be in an explicit noun startin with a uppercased letter such as \nclass\n \nCentral\n \nCorridor\n()\n. Functions should be verbs such as \ndef play():\n.\n\n\n5- Create a class Hierarchy and object Map\n\n\n\n\nMake a class Hierarchy:\n\n\nMap\n\n\nEngine\n\n\nScene\n\n\nDeath\n\n\nCentral Corridor\n\n\nLaser Weapon Armory\n\n\nThe Bridge\n\n\nEscape Pod\n\n\n\n\n\n\n\n\nPEP: I know from the description I\u2019m going to need a way to \u2018run\u2019 the engine, \u2018get the next scene\u2019 from the map, get the \u2018opening scene\u2019, and \u2018enter\u2019 a scene. I\u2019ll add those like this:\n\n\n\n\nMap\n\n\nnext_scene\n\n\nopening_scene\n\n\nEngine\n\n\nplay\n\n\nScene\n\n\nenter\n\n\nDeath\n\n\nCentral Corridor\n\n\nLaser Weapon Armory\n\n\nThe Bridge\n\n\nEscape Pod\n\n\n\n\nAll the scenes under another scene will inherit it; except \u2018enter\u2019: override it later.\n\n\n6- Code the Classes and a Test to Run Them:\n\n\n\n\nTurn:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n- Map\n    - next_scene (verb)\n    - opening scene (verb)\n- Engine\n    - play (verb)\n- Scene\n    - enter (verb)\n    - Death\n    - Central Corridor\n    - Laser Weapon Armory\n    - The Bridge\n    - Escape Pod\n\n\n\n\n\n\n\n\nInto:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nclass\n \nMap\n(\nobject\n)\n:\n \n    \ndef\n \n__init__\n(\nself\n,\n \nstart_scene\n)\n:\n\n    \ndef\n \nnext_scene\n(\nself\n,\n \nstart_scene\n)\n:\n    \n    \ndef\n \nopening_scene\n(\nself\n)\n:\n\n\n\nclass\n \nEngine\n(\nobject\n)\n:\n \n    \ndef\n \n__init__\n(\nself\n,\n \nscene_map\n)\n:\n\n    \ndef\n \nplay\n(\nself\n)\n:\n\n\n\nclass\n \nScene\n(\nobject\n)\n:\n\n    \ndef\n \nenter\n(\nself\n)\n:\n\n\n    \nclass\n \nCentralCorridor\n(\nScene\n)\n:\n\n        \ndef\n \nenter\n(\nself\n)\n:\n\n    \nclass\n \nLaserWeaponArmory\n(\nScene\n)\n:\n\n        \ndef\n \nenter\n(\nself\n)\n:\n\n    \nclass\n \nTheBridge\n(\nScene\n)\n:\n\n        \ndef\n \nenter\n(\nself\n)\n:\n\n    \nclass\n \nEscapePod\n(\nScene\n)\n:\n\n        \ndef\n \nenter\n(\nself\n)\n:\n\n    \nclass\n \nDeath\n(\nScene\n)\n:\n\n        \ndef\n \nenter\n(\nself\n)\n:\n\n\n\na_map\n \n=\n \nMap\n(\n'central_corridor'\n)\n\n\na_game\n \n=\n \nEngine\n(\na_map\n)\n\n\na_game\n.\nplay\n()\n\n\n\n\n\n\n\n\n\nInto:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\nclass\n \nScene\n(\nobject\n)\n:\n\n\n    \ndef\n \nenter\n(\nself\n)\n:\n\n        \npass\n\n\n\n\nclass\n \nEngine\n(\nobject\n)\n:\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nscene_map\n)\n:\n\n        \npass\n\n    \ndef\n \nplay\n(\nself\n)\n:\n\n        \npass\n\n\n\n\nclass\n \nDeath\n(\nScene\n)\n:\n\n\n    \ndef\n \nenter\n(\nself\n)\n:\n\n        \npass\n\n\n\n\nclass\n \nCentralCorridor\n(\nScene\n)\n:\n\n\n    \ndef\n \nenter\n(\nself\n)\n:\n\n        \npass\n\n\n\n    \ndef\n \nenter\n(\nself\n)\n:\n\n        \npass\n\n\n\n\nclass\n \nTheBridge\n(\nScene\n)\n:\n\n    \ndef\n \nenter\n(\nself\n)\n:\n\n        \npass\n\n\n\n\nclass\n \nEscapePod\n(\nScene\n)\n:\n\n\n    \ndef\n \nenter\n(\nself\n)\n:\n\n        \npass\n\n\n\n\nclass\n \nMap\n(\nobject\n)\n:\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nstart_scene\n)\n:\n\n        \npass\n\n    \ndef\n \nnext_scene\n(\nself\n,\n \nscene_name\n)\n:\n\n        \npass\n\n    \ndef\n \nopening_scene\n(\nself\n)\n:\n\n        \npass\n\n\n\n\na_map\n \n=\n \nMap\n(\n'central_corridor'\n)\n\n\na_game\n \n=\n \nEngine\n(\na_map\n)\n\n\na_game\n.\nplay\n()\n\n\n\n\n\n\n\n\n\nStart coding (first code skeleton).\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\nclass\n \nScene\n(\nobject\n):\n\n\n\n    \ndef\n \nenter\n(\nself\n):\n\n\n        \npass\n\n\n\nclass\n \nEngine\n(\nobject\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nscene_map\n):\n\n\n        \npass\n\n\n    \ndef\n \nplay\n(\nself\n):\n\n\n        \npass\n\n\n\n\nclass\n \nDeath\n(\nScene\n):\n\n\n\n    \ndef\n \nenter\n(\nself\n):\n\n\n        \npass\n\n\n\n\nclass\n \nCentralCorridor\n(\nScene\n):\n\n\n\n    \ndef\n \nenter\n(\nself\n):\n\n\n        \npass\n\n\n\n\nclass\n \nLaserWeaponArmory\n(\nScene\n):\n\n\n\n    \ndef\n \nenter\n(\nself\n):\n\n\n        \npass\n\n\n\n\nclass\n \nTheBridge\n(\nScene\n):\n\n\n\n    \ndef\n \nenter\n(\nself\n):\n\n\n        \npass\n\n\n\n\nclass\n \nEscapePod\n(\nScene\n):\n\n\n\n    \ndef\n \nenter\n(\nself\n):\n\n\n        \npass\n\n\n\n\nclass\n \nMap\n(\nobject\n):\n\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nstart_scene\n):\n\n\n        \npass\n\n\n    \ndef\n \nnext_scene\n(\nself\n,\n \nscene_name\n):\n\n\n        \npass\n\n\n    \ndef\n \nopening_scene\n(\nself\n):\n\n\n        \npass\n\n\n\n\na_map\n \n=\n \nMap\n(\n'central_corridor'\n)\n\n\na_game\n \n=\n \nEngine\n(\na_map\n)\n\n\na_game\n.\nplay\n()\n\n\n\n\n\n\n\n\n\nImprove the code.\n\n\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n# import two functions from two libraries\n\n\nfrom\n \nsys\n \nimport\n \nexit\n\n\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\n\n# class to generate child classes\n\n\nclass\n \nScene\n(\nobject\n):\n\n\n    \ndef\n \nenter\n(\nself\n):\n\n\n        \nprint\n \n\"This scene is not yet configured. Subclass it and implement enter().\"\n\n        \nexit\n(\n1\n)\n\n\n\n\nclass\n \nEngine\n(\nobject\n):\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nscene_map\n):\n\n\n        \nself\n.\nscene_map\n \n=\n \nscene_map\n\n\n    \ndef\n \nplay\n(\nself\n):\n\n\n        \ncurrent_scene\n \n=\n \nself\n.\nscene_map\n.\nopening_scene\n()\n \n# instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below\n\n\n        \nlast_scene\n \n=\n \nself\n.\nscene_map\n.\nnext_scene\n(\n'finished'\n)\n \n# instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below\n\n\n        \nwhile\n \ncurrent_scene\n \n!=\n \nlast_scene\n:\n\n\n            \nnext_scene_name\n \n=\n \ncurrent_scene\n.\nenter\n()\n \n# function/method from class Scene(object) above\n\n\n            \ncurrent_scene\n \n=\n \nself\n.\nscene_map\n.\nnext_scene\n(\nnext_scene_name\n)\n \n# instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object)\n\n\n        \ncurrent_scene\n.\nenter\n()\n \n# use newly-created current_scene with function/method from class Scene(object) above\n\n\n\n\nclass\n \nDeath\n(\nScene\n):\n\n\n    \nquips\n \n=\n \n[\n\"You died.  You kinda suck at this.\"\n,\n \n\"Your mom would be proud...if she were smarter.\"\n,\n \n\"Such a louser.\"\n,\n \n\"I have a small puppy that's better at this.\"\n]\n \n# a list (variable) where a random method will extract an element\n\n\n    \ndef\n \nenter\n(\nself\n):\n\n\n        \nprint\n \nDeath\n.\nquips\n[\nrandint\n(\n0\n,\n \nlen\n(\nself\n.\nquips\n)\n-\n1\n)]\n \n# use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list)\n\n        \nexit\n(\n1\n)\n\n\n\n\nclass\n \nCentralCorridor\n(\nScene\n):\n\n\n    \ndef\n \nenter\n(\nself\n):\n \n# the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n\n        \nprint\n \n\"The Gothons of Planet Percal #25 have invaded your ship and destroyed\"\n\n        \nprint\n \n\"your entire crew.  You are the last surviving member and your last\"\n\n        \nprint\n \n\"mission is to get the neutron destruct bomb from the Weapons Armory,\"\n\n        \nprint\n \n\"put it in the bridge, and blow the ship up after getting into an \"\n\n        \nprint\n \n\"escape pod.\"\n\n        \nprint\n \n\"\n\\n\n\"\n\n        \nprint\n \n\"You're running down the central corridor to the Weapons Armory when\"\n\n        \nprint\n \n\"a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume\"\n\n        \nprint\n \n\"flowing around his hate filled body.  He's blocking the door to the\"\n\n        \nprint\n \n\"Armory and about to pull a weapon to blast you.\"\n\n\n        \naction\n \n=\n \nraw_input\n(\n\"shoot!/dodge!/tell a joke> \"\n)\n \n\n        \nif\n \naction\n \n==\n \n\"shoot!\"\n:\n\n            \nprint\n \n\"Quick on the draw you yank out your blaster and fire it at the Gothon.\"\n\n            \nprint\n \n\"His clown costume is flowing and moving around his body, which throws\"\n\n            \nprint\n \n\"off your aim.  Your laser hits his costume but misses him entirely.  This\"\n\n            \nprint\n \n\"completely ruins his brand new costume his mother bought him, which\"\n\n            \nprint\n \n\"makes him fly into an insane rage and blast you repeatedly in the face until\"\n\n            \nprint\n \n\"you are dead.  Then he eats you.\"\n\n            \nreturn\n \n'death'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n        \nelif\n \naction\n \n==\n \n\"dodge!\"\n:\n\n            \nprint\n \n\"Like a world class boxer you dodge, weave, slip and slide right\"\n\n            \nprint\n \n\"as the Gothon's blaster cranks a laser past your head.\"\n\n            \nprint\n \n\"In the middle of your artful dodge your foot slips and you\"\n\n            \nprint\n \n\"bang your head on the metal wall and pass out.\"\n\n            \nprint\n \n\"You wake up shortly after only to die as the Gothon stomps on\"\n\n            \nprint\n \n\"your head and eats you.\"\n\n            \nreturn\n \n'death'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n        \nelif\n \naction\n \n==\n \n\"tell a joke\"\n:\n\n            \nprint\n \n\"Lucky for you they made you learn Gothon insults in the academy.\"\n\n            \nprint\n \n\"You tell the one Gothon joke you know:\"\n\n            \nprint\n \n\"Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr.\"\n\n            \nprint\n \n\"The Gothon stops, tries not to laugh, then busts out laughing and can't move.\"\n\n            \nprint\n \n\"While he's laughing you run up and shoot him square in the head\"\n\n            \nprint\n \n\"putting him down, then jump through the Weapon Armory door.\"\n\n            \nreturn\n \n'laser_weapon_armory'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n        \nelse\n:\n\n            \nprint\n \n\"DOES NOT COMPUTE!\"\n\n            \nreturn\n \n'central_corridor'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n\n\nclass\n \nLaserWeaponArmory\n(\nScene\n):\n\n\n    \ndef\n \nenter\n(\nself\n):\n \n# the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n\n        \nprint\n \n\"You do a dive roll into the Weapon Armory, crouch and scan the room\"\n\n        \nprint\n \n\"for more Gothons that might be hiding.  It's dead quiet, too quiet.\"\n\n        \nprint\n \n\"You stand up and run to the far side of the room and find the\"\n\n        \nprint\n \n\"neutron bomb in its container.  There's a keypad lock on the box\"\n\n        \nprint\n \n\"and you need the code to get the bomb out.  If you get the code\"\n\n        \nprint\n \n\"wrong 10 times then the lock closes forever and you can't\"\n\n        \nprint\n \n\"get the bomb.  The code is 3 digits.\"\n\n        \ncode\n \n=\n \n\"\n%d%d%d\n\"\n \n%\n(\n1\n,\n2\n,\n3\n)\n \n#% (randint(1,9), randint(1,9), randint(1,9))\n\n        \nguess\n \n=\n \nraw_input\n(\n\"[keypad]> \"\n)\n\n        \nguesses\n \n=\n \n0\n\n\n        \nwhile\n \nguess\n \n!=\n \ncode\n \nand\n \nguesses\n \n<\n \n10\n:\n\n            \nprint\n \n\"BZZZZEDDD!\"\n\n            \nguesses\n \n+=\n \n1\n\n            \nguess\n \n=\n \nraw_input\n(\n\"[keypad]> \"\n)\n\n\n        \nif\n \nguess\n \n==\n \ncode\n:\n\n            \nprint\n \n\"The container clicks open and the seal breaks, letting gas out.\"\n\n            \nprint\n \n\"You grab the neutron bomb and run as fast as you can to the\"\n\n            \nprint\n \n\"bridge where you must place it in the right spot.\"\n\n            \nreturn\n \n'the_bridge'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        \nelse\n:\n\n            \nprint\n \n\"The lock buzzes one last time and then you hear a sickening\"\n\n            \nprint\n \n\"melting sound as the mechanism is fused together.\"\n\n            \nprint\n \n\"You decide to sit there, and finally the Gothons blow up the\"\n\n            \nprint\n \n\"ship from their ship and you die.\"\n\n            \nreturn\n \n'death'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n\n\nclass\n \nTheBridge\n(\nScene\n):\n\n\n    \ndef\n \nenter\n(\nself\n):\n \n# the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n\n        \nprint\n \n\"You burst onto the Bridge with the netron destruct bomb\"\n\n        \nprint\n \n\"under your arm and surprise 5 Gothons who are trying to\"\n\n        \nprint\n \n\"take control of the ship.  Each of them has an even uglier\"\n\n        \nprint\n \n\"clown costume than the last.  They haven't pulled their\"\n\n        \nprint\n \n\"weapons out yet, as they see the active bomb under your\"\n\n        \nprint\n \n\"arm and don't want to set it off.\"\n\n\n        \naction\n \n=\n \nraw_input\n(\n\"throw the bomb/slowly place the bomb> \"\n)\n\n\n        \nif\n \naction\n \n==\n \n\"throw the bomb\"\n:\n\n            \nprint\n \n\"In a panic you throw the bomb at the group of Gothons\"\n\n            \nprint\n \n\"and make a leap for the door.  Right as you drop it a\"\n\n            \nprint\n \n\"Gothon shoots you right in the back killing you.\"\n\n            \nprint\n \n\"As you die you see another Gothon frantically try to disarm\"\n\n            \nprint\n \n\"the bomb. You die knowing they will probably blow up when\"\n\n            \nprint\n \n\"it goes off.\"\n\n            \nreturn\n \n'death'\n\n\n        \nelif\n \naction\n \n==\n \n\"slowly place the bomb\"\n:\n\n            \nprint\n \n\"You point your blaster at the bomb under your arm\"\n\n            \nprint\n \n\"and the Gothons put their hands up and start to sweat.\"\n\n            \nprint\n \n\"You inch backward to the door, open it, and then carefully\"\n\n            \nprint\n \n\"place the bomb on the floor, pointing your blaster at it.\"\n\n            \nprint\n \n\"You then jump back through the door, punch the close button\"\n\n            \nprint\n \n\"and blast the lock so the Gothons can't get out.\"\n\n            \nprint\n \n\"Now that the bomb is placed you run to the escape pod to\"\n\n            \nprint\n \n\"get off this tin can.\"\n\n            \nreturn\n \n'escape_pod'\n\n        \nelse\n:\n\n            \nprint\n \n\"DOES NOT COMPUTE!\"\n\n            \nreturn\n \n\"the_bridge\"\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class    \n\n\n\n\nclass\n \nEscapePod\n(\nScene\n):\n\n\n    \ndef\n \nenter\n(\nself\n):\n \n# the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n\n        \nprint\n \n\"You rush through the ship desperately trying to make it to\"\n\n        \nprint\n \n\"the escape pod before the whole ship explodes.  It seems like\"\n\n        \nprint\n \n\"hardly any Gothons are on the ship, so your run is clear of\"\n\n        \nprint\n \n\"interference.  You get to the chamber with the escape pods, and\"\n\n        \nprint\n \n\"now need to pick one to take.  Some of them could be damaged\"\n\n        \nprint\n \n\"but you don't have time to look.  There's 5 pods, which one\"\n\n        \nprint\n \n\"do you take?\"\n\n\n        \ngood_pod\n \n=\n \n1\n#randint(1,5)\n\n        \nguess\n \n=\n \nraw_input\n(\n\"[pod #]> \"\n)\n\n\n        \nif\n \nint\n(\nguess\n)\n \n!=\n \ngood_pod\n:\n\n            \nprint\n \n\"You jump into pod \n%s\n and hit the eject button.\"\n \n%\n \nguess\n\n            \nprint\n \n\"The pod escapes out into the void of space, then\"\n\n            \nprint\n \n\"implodes as the hull ruptures, crushing your body\"\n\n            \nprint\n \n\"into jam jelly.\"\n\n            \nreturn\n \n'death'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        \nelse\n:\n\n            \nprint\n \n\"You jump into pod \n%s\n and hit the eject button.\"\n \n%\n \nguess\n\n            \nprint\n \n\"The pod easily slides out into space heading to\"\n\n            \nprint\n \n\"the planet below.  As it flies to the planet, you look\"\n\n            \nprint\n \n\"back and see your ship implode then explode like a\"\n\n            \nprint\n \n\"bright star, taking out the Gothon ship at the same\"\n\n            \nprint\n \n\"time.  You won!\"\n\n            \nreturn\n \n'finished'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n\n\nclass\n \nFinished\n(\nScene\n):\n\n\n    \ndef\n \nenter\n(\nself\n):\n\n\n        \nprint\n \n\"You won! Good job.\"\n\n        \nreturn\n \n'finished'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n\n\nclass\n \nMap\n(\nobject\n):\n\n\n    \nscenes\n \n=\n \n{\n\n        \n'central_corridor'\n:\n \nCentralCorridor\n(),\n\n        \n'laser_weapon_armory'\n:\n \nLaserWeaponArmory\n(),\n\n        \n'the_bridge'\n:\n \nTheBridge\n(),\n\n        \n'escape_pod'\n:\n \nEscapePod\n(),\n\n        \n'death'\n:\n \nDeath\n(),\n\n        \n'finished'\n:\n \nFinished\n(),\n\n    \n}\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nstart_scene\n):\n\n\n        \nself\n.\nstart_scene\n \n=\n \nstart_scene\n\n\n    \ndef\n \nnext_scene\n(\nself\n,\n \nscene_name\n):\n\n\n        \nval\n \n=\n \nMap\n.\nscenes\n.\nget\n(\nscene_name\n)\n\n        \nreturn\n \nval\n\n\n    \ndef\n \nopening_scene\n(\nself\n):\n\n\n        \nreturn\n \nself\n.\nnext_scene\n(\nself\n.\nstart_scene\n)\n\n\n\n\na_map\n \n=\n \nMap\n(\n'central_corridor'\n)\n\n\na_game\n \n=\n \nEngine\n(\na_map\n)\n\n\na_game\n.\nplay\n()\n\n\n\n\n\n\n\n\n\nImprove\u2026\n\n\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n# import two functions from two libraries\n\n\nfrom\n \nsys\n \nimport\n \nexit\n\n\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\nimport\n \ntime\n\n\nimport\n \nmath\n\n\n\n# class to generate child classes\n\n\nclass\n \nScene\n(\nobject\n):\n\n\n    \ndef\n \nenter\n(\nself\n):\n\n\n        \nprint\n \n\"This scene is not yet configured. Subclass it and implement enter().\"\n\n        \nexit\n(\n1\n)\n\n\n\n\nclass\n \nEngine\n(\nobject\n):\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nscene_map\n,\n \nhero\n):\n\n\n        \nself\n.\nscene_map\n \n=\n \nscene_map\n\n        \nself\n.\nhero\n \n=\n \nhero\n\n\n    \ndef\n \nplay\n(\nself\n):\n\n\n        \ncurrent_scene\n \n=\n \nself\n.\nscene_map\n.\nopening_scene\n()\n \n# instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below\n\n\n        \nlast_scene\n \n=\n \nself\n.\nscene_map\n.\nnext_scene\n(\n'finished'\n)\n \n# instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below\n\n\n        \nwhile\n \ncurrent_scene\n \n!=\n \nlast_scene\n:\n \n# True:\n\n            \nprint\n \n\"\n\\n\n----------\"\n\n            \nnext_scene_name\n \n=\n \ncurrent_scene\n.\nenter\n(\nself\n.\nhero\n)\n \n# function/method from class Scene(object) above\n\n\n            \ncurrent_scene\n \n=\n \nself\n.\nscene_map\n.\nnext_scene\n(\nnext_scene_name\n)\n \n# instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object)\n\n\n        \ncurrent_scene\n.\nenter\n()\n \n# use newly-created current_scene with function/method from class Scene(object) above\n\n\n\n\nclass\n \nDeath\n(\nScene\n):\n\n\n    \nquips\n \n=\n \n[\n\"Death1\"\n,\n \n\"Death2\"\n,\n \n\"Death3\"\n,\n \n\"Death4\"\n]\n \n# a list (variable) where a random method will extract an element\n\n\n    \ndef\n \nenter\n(\nself\n,\n \nhero\n):\n\n\n        \nprint\n \nDeath\n.\nquips\n[\nrandint\n(\n0\n,\n \nlen\n(\nself\n.\nquips\n)\n-\n1\n)]\n \n# use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list)\n\n        \nexit\n(\n1\n)\n\n\n\n\nclass\n \nCentralCorridor\n(\nScene\n):\n\n\n    \ndef\n \nenter\n(\nself\n,\n \nhero\n):\n \n# the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n\n        \nprint\n \n\"Enter. Select.\"\n\n        \naction\n \n=\n \nraw_input\n(\n\"Pick one: a/b/c> \"\n)\n.\nupper\n()\n \n\n        \nif\n \naction\n \n==\n \n\"A\"\n:\n\n            \nprint\n \n\"Ouch!\"\n\n            \nreturn\n \n'death'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n        \nelif\n \naction\n \n==\n \n\"B\"\n:\n\n            \nprint\n \n\"Aye!\"\n\n            \nreturn\n \n'death'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n        \nelif\n \naction\n \n==\n \n\"C\"\n:\n\n            \nprint\n \n\"Good.\"\n\n            \nreturn\n \n'laser_weapon_armory'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n        \nelse\n:\n\n            \nprint\n \n\"DOES NOT COMPUTE!\"\n\n            \nreturn\n \n'central_corridor'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n\n\nclass\n \nLaserWeaponArmory\n(\nScene\n):\n\n\n    \ndef\n \nenter\n(\nself\n,\n \nhero\n):\n \n# the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n\n        \nprint\n \n\"Pick a 3-digit combinaison.\"\n\n        \ncode\n \n=\n \n\"\n%d%d%d\n\"\n \n%\n(\n1\n,\n2\n,\n3\n)\n \n#% (randint(1,9), randint(1,9), randint(1,9))\n\n        \nprint\n \ncode\n\n        \nguess\n \n=\n \nraw_input\n(\n\"[keypad]> \"\n)\n\n        \nguesses\n \n=\n \n0\n\n\n        \nwhile\n \nguess\n \n!=\n \ncode\n \nand\n \nguesses\n \n<\n \n10\n:\n\n            \nprint\n \n\"BZZZZEDDD!\"\n\n            \nguesses\n \n+=\n \n1\n\n            \nguess\n \n=\n \nraw_input\n(\n\"[keypad]> \"\n)\n\n\n        \nif\n \nguess\n \n==\n \ncode\n:\n\n            \nprint\n \n\"Click! Go!\"\n\n            \nreturn\n \n'the_bridge'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        \nelse\n:\n\n            \nprint\n \n\"Boom!\"\n\n            \nreturn\n \n'death'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n\n\nclass\n \nTheBridge\n(\nScene\n):\n\n\n    \ndef\n \nenter\n(\nself\n,\n \nhero\n):\n \n# the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n\n        \nprint\n \n\"Bridge enigma.\"\n\n\n        \naction\n \n=\n \nraw_input\n(\n\"true/false> \"\n)\n.\nupper\n()\n\n\n        \nif\n \naction\n \n==\n \n\"TRUE\"\n \nor\n \naction\n \n==\n \n\"T\"\n:\n\n            \nprint\n \n\"It goes off.\"\n\n            \nreturn\n \n'death'\n\n\n        \nelif\n \naction\n \n==\n \n\"FALSE\"\n \nor\n \naction\n \n==\n \n\"F\"\n:\n\n            \nprint\n \n\"Escape.\"\n\n            \nreturn\n \n'escape_pod'\n\n        \nelse\n:\n\n            \nprint\n \n\"DOES NOT COMPUTE!\"\n\n            \nreturn\n \n\"the_bridge\"\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class    \n\n\n\n\nclass\n \nEscapePod\n(\nScene\n):\n\n\n    \ndef\n \nenter\n(\nself\n,\n \nhero\n):\n \n# the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n\n        \nprint\n \n\"You rush!\"\n\n\n        \ngood_pod\n \n=\n \n1\n \n#randint(1,5)\n\n        \nguess\n \n=\n \nraw_input\n(\n\"[Pick a pod #]> \"\n)\n\n\n        \nif\n \nint\n(\nguess\n)\n \n!=\n \ngood_pod\n:\n\n            \nprint\n \n\"Oups!\"\n\n            \nreturn\n \n'death'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        \nelse\n:\n\n            \nprint\n \n\"Good choice!\"\n\n            \nreturn\n \n'finished'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\n\n\nclass\n \nWin\n(\nScene\n):\n\n\n    \ndef\n \nenter\n(\nself\n,\n \nhero\n):\n\n        \nprint\n \n\"You won! Good job.\"\n\n        \nreturn\n \n'finished'\n \n# input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        \n# exit(0)\n\n\n\n\nclass\n \nFinal\n(\nScene\n):\n\n\n    \ndef\n \nenter\n(\nself\n,\n \nhero\n)\n\n\n        \nmonster\n \n=\n \nMonster\n(\n\"Gothon\"\n)\n\n        \nprint\n \n\"\n%s\n, You now came across the final boss \n%s\n! Let's fight!!!\"\n \n%\n \n(\nhero\n.\nname\n,\n \nmonster\n.\nname\n)\n\n        \na_combat\n \n=\n \nCombat\n()\n\n        \nnext_stage\n \n=\n \na_combat\n.\ncombat\n(\nhero\n,\n \nmonster\n)\n\n        \nreturn\n \nnext_stage\n\n\n\n\nclass\n \nCombat\n(\nobject\n):\n\n\n    \ndef\n \ncombat\n(\nself\n,\n \nhero\n,\n \nmonster\n):\n \n#combat between two roles\n\n\n        \nround\n \n=\n \n1\n\n        \nwhile\n \nTrue\n:\n\n            \nprint\n \n'='\n*\n30\n\n            \nprint\n \n'round \n%d\n'\n \n%\n \nround\n\n            \nprint\n \n'='\n*\n30\n\n            \nprint\n \n\"Your HP: \n%d\n\"\n \n%\n \nhero\n.\nhp\n\n            \nprint\n \n\"\n%s\n's HP: \n%d\n\"\n \n%\n \n(\nmonster\n.\nname\n,\n \nmonster\n.\nhp\n)\n\n            \nprint\n \n'Which action do you want to take?'\n\n            \nprint\n \n'-'\n*\n10\n\n            \nprint\n \n'1) attack - Attack the enemy'\n\n            \nprint\n \n'2) defend - Defend from being attacked, also will recover a bit'\n\n\n            \ntry\n:\n\n                \naction\n \n=\n \nint\n(\nraw_input\n(\n'> '\n))\n\n            \nexcept\n \nValueError\n:\n\n                \nprint\n \n\"Please enter a number!!\"\n\n                \ncontinue\n\n\n            \n# defending should be done before attacking\n\n            \nif\n \naction\n \n==\n \n2\n:\n\n                \nhero\n.\ndefend\n()\n\n\n            \n# action of monster, 1/5 possibility it will defends\n\n            \nmonster_action\n \n=\n \nrandint\n(\n1\n,\n \n6\n)\n\n            \nif\n \nmonster_action\n \n==\n \n5\n:\n\n                \nmonster\n.\ndefend\n()\n\n\n            \nif\n \naction\n \n==\n \n1\n:\n\n                \nhero\n.\nattack\n(\nmonster\n)\n\n            \nelif\n \naction\n \n==\n \n2\n:\n\n                \npass\n\n            \nelse\n:\n\n                \nprint\n \n\"No such action!\"\n\n\n            \nif\n \nmonster_action\n \n<\n \n5\n:\n\n                \nmonster\n.\nattack\n(\nhero\n)\n\n\n            \n# whether win or die\n\n            \nif\n \nhero\n.\nhp\n \n<=\n \n0\n:\n\n                \nreturn\n \n'death'\n\n\n            \nif\n \nmonster\n.\nhp\n \n<=\n \n0\n:\n\n                \nreturn\n \n'win'\n\n\n            \nhero\n.\nrest\n()\n\n            \nmonster\n.\nrest\n()\n\n\n            \nround\n \n+=\n \n1\n\n\n\n\nclass\n \nMap\n(\nobject\n):\n\n\n    \nscenes\n \n=\n \n{\n\n        \n'central_corridor'\n:\n \nCentralCorridor\n(),\n\n        \n'laser_weapon_armory'\n:\n \nLaserWeaponArmory\n(),\n\n        \n'the_bridge'\n:\n \nTheBridge\n(),\n\n        \n'escape_pod'\n:\n \nEscapePod\n(),\n\n        \n'death'\n:\n \nDeath\n(),\n\n        \n'final_fight'\n:\n \nFinal\n(),\n\n        \n'win'\n:\n \nWin\n(),\n\n        \n'finished'\n:\n \nFinished\n(),\n\n    \n}\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nstart_scene\n):\n\n\n        \nself\n.\nstart_scene\n \n=\n \nstart_scene\n\n\n    \ndef\n \nnext_scene\n(\nself\n,\n \nscene_name\n):\n\n\n        \nval\n \n=\n \nMap\n.\nscenes\n.\nget\n(\nscene_name\n)\n\n        \nreturn\n \nval\n\n\n    \ndef\n \nopening_scene\n(\nself\n):\n\n\n        \nreturn\n \nself\n.\nnext_scene\n(\nself\n.\nstart_scene\n)\n\n\n\n\nclass\n \nhuman\n(\nobject\n):\n\n\n    \ndefending\n \n=\n \n0\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n):\n\n\n        \nself\n.\nname\n \n=\n \nname\n\n\n    \ndef\n \nattack\n(\nself\n,\n \ntarget\n):\n \n# attack the target\n\n\n        \npercent\n \n=\n \n0\n\n        \ntime\n.\nsleep\n(\n1\n)\n\n        \nif\n \ntarget\n.\ndefending\n \n==\n \n1\n:\n\n            \npercent\n \n=\n \nfloat\n(\nself\n.\npower\n)\n \n/\n \n10.0\n \n+\n \nrandint\n(\n0\n,\n \n10\n)\n\n            \ntarget\n.\nhp\n \n=\n \nmath\n.\nfloor\n(\ntarget\n.\nhp\n \n-\n \npercent\n)\n\n        \nelse\n:\n\n            \npercent\n \n=\n \nfloat\n(\nself\n.\npower\n)\n \n/\n \n5.0\n \n+\n \nrandint\n(\n0\n,\n \n10\n)\n\n            \ntarget\n.\nhp\n \n=\n \nmath\n.\nfloor\n(\ntarget\n.\nhp\n \n-\n \npercent\n)\n\n        \nprint\n \n\"\n%s\n attack \n%s\n. \n%s\n's HP decreased by \n%d\n points.\"\n \n%\n \n(\nself\n.\nname\n,\n \ntarget\n.\nname\n,\n \ntarget\n.\nname\n,\n \npercent\n)\n\n\n    \ndef\n \ndefend\n(\nself\n):\n \n# be in the defending state\n\n\n        \nself\n.\ndefending\n \n=\n \n1\n\n        \nprint\n \n\"\n%s\n is trying to defend.\"\n \n%\n \nself\n.\nname\n\n\n    \ndef\n \nrest\n(\nself\n):\n \n# recover a bit after each round\n\n\n        \nif\n \nself\n.\ndefending\n \n==\n \n1\n:\n\n            \npercent\n \n=\n \nself\n.\nrate\n \n*\n \n10\n \n+\n \nrandint\n(\n0\n,\n \n10\n)\n\n        \nelse\n:\n\n            \npercent\n \n=\n \nself\n.\nrate\n \n*\n \n2\n \n+\n \nrandint\n(\n0\n,\n \n10\n)\n\n        \nself\n.\nhp\n \n+=\n \npercent\n\n        \nprint\n \n\"\n%s\n's HP increased by \n%d\n after rest.\"\n \n%\n \n(\nself\n.\nname\n,\n \npercent\n)\n\n        \nself\n.\ndefending\n \n=\n \n0\n\n\n\n\nclass\n \nHero\n(\nHuman\n):\n \n# class for hero\n\n\n    \nhp\n \n=\n \n1000\n\n    \npower\n \n=\n \n200\n\n    \nrate\n \n=\n \n5\n\n\n\n\nclass\n \nMonster\n(\nHuman\n):\n \n# class for monster\n\n\n    \nhp\n \n=\n \n5000\n\n    \npower\n \n=\n \n250\n\n    \nrate\n \n=\n \n5\n\n\n\n\na_map\n \n=\n \nMap\n(\n'central_corridor'\n)\n\n\na_hero\n \n=\n \nHero\n(\n'Joe'\n)\n\n\na_game\n \n=\n \nEngine\n(\na_map\n)\n\n\na_game\n.\nplay\n()\n\n\n\n\n\n\n\nWrap up\n\u00b6\n\n\n\n\nDraw a mindmap.\n\n\nDraw a flowchart.\n\n\nList all variables, data, other objects and add comments.\n\n\nBuild the modules (classes) and embed the primal code.\n\n\nRefine.\n\n\nUse a visualizing software.\n\n\n\n\nExercise 44, Inheritance vs Composition\n\u00b6\n\n\nFrom the manual.\n\n\nWhen to Use Inheritance or Composition\n\u00b6\n\n\nThe question of \u2018inheritance versus composition\u2019 comes down to an attempt to solve the problem of reusable code. \n\n\nYou don\u2019t want to have duplicated code all over your software, since that\u2019s not clean and efficient. \n\n\n\n\nInheritance: solves this problem by creating a mechanism for you to have implied features in base classes.\n\n\nComposition: solves this by giving you modules and the ability to call functions in other classes.\n\n\n\n\nIf both solutions solve the problem of reuse, then which one is appropriate in which situations? The answer is incredibly subjective, but I\u2019ll give you my three guidelines for when to do which:\n\n\n\n\nAvoid multiple Inheritance at all costs, as it\u2019s too complex to be reliable. If you\u2019re stuck with it, then be prepared to know the class hierarchy and spend time finding where everything is coming from.\n\n\nUse Composition to package code into modules that are used in many different unrelated places and situations.\n\n\nUse Inheritance only when there are clearly related reusable pieces of code that fit under a single common concept or if you have to because of something you\u2019re using.\n\n\n\n\nThe thing to remember about object-oriented programming is that it is entirely a social convention programmers have created to package and share code. In that case, find out how they use things and then just adapt to the situation.\n\n\nFunction Style\n\u00b6\n\n\n~ pep~\n\n\nFunction = Method.\n\n\nA class does things: name it as if it\u2019s a command you are giving to the class. Same as \npop\n is saying \u2018pop this off the list\u2019.\n\n\nKeep functions small and simple (PEP).\n\n\nClass Style\n\n\n\n\nUse the camel case: \nSuperGoldFactory\n.\n\n\nMinimize what \n__init__\n does. It should be simple to use.\n\n\nOther class functions use the underscore format: \nmy_awesome_hair\n.\n\n\nBe consistent in how you organize your function arguments. Function 1 takes \n(dog, cat, user)\n, function 2 should take \n(dog, cat, user)\n. Unless there is a good reason.\n\n\nVariable should be self-contained. Limit importing from modules or globals.\n\n\nAlways have a class \nName(object)\n on top of all.\n\n\n\n\nCode Style\n\n\n\n\nGive your code vertical space to read.\n\n\nRead you code out loud to test it. Change the difficult passages to improve readibility.\n\n\nImitate other coders: find you style.\n\n\nRespect others\u2019s style; be a team player.\n\n\n\n\nGood Comments\n\n\n\n\nDescribe why you are doing doing what you are doing.\n\n\nWrite for the others.\n\n\nWrite sentences.\n\n\nAvoid clutering the code though. Short sentences, to the point.\n\n\nReview your comments.\n\n\n\n\nComposition\n\u00b6\n\n\nIn this code I\u2019m not using the name Parent, since there is not a parent-child is-a relationship. This is a has-a relationship, where Child has-a Other that it uses to get its work done. \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\nclass\n \nOther\n(\nobject\n):\n\n\n    \ndef\n \nimplicit\n(\nself\n):\n\n\n        \nprint\n \n\"OTHER implicit()\"\n\n\n    \ndef\n \noverride\n(\nself\n):\n\n\n        \nprint\n \n\"OTHER override()\"\n\n\n    \ndef\n \naltered\n(\nself\n):\n\n\n        \nprint\n \n\"OTHER altered()\"\n\n\n\n\nclass\n \nChild\n(\nobject\n):\n\n\n    \ndef\n \n__init__\n(\nself\n):\n\n\n        \nself\n.\nother\n \n=\n \nOther\n()\n \n# initialize this class with Other(), when an instance is created, it will inherit the class member variables, class functions...\n\n\n    \ndef\n \nimplicit\n(\nself\n):\n\n\n        \nself\n.\nother\n.\nimplicit\n()\n \n# call the other class function \n\n\n    \ndef\n \noverride\n(\nself\n):\n\n\n        \nprint\n \n\"CHILD override()\"\n\n\n    \ndef\n \naltered\n(\nself\n):\n\n\n        \nprint\n \n\"CHILD, BEFORE OTHER altered()\"\n\n        \nself\n.\nother\n.\naltered\n()\n \n# call the other class function\n\n        \nprint\n \n\"CHILD, AFTER OTHER altered()\"\n\n\n\n\nson\n \n=\n \nChild\n()\n \n# instance\n\n\n\nson\n.\nimplicit\n()\n\n\nson\n.\noverride\n()\n\n\nson\n.\naltered\n()\n\n\n\n\n\n\n\nImplicit Inheritance\n\u00b6\n\n\nActions on the child imply an action on the parent.\n\n\nThe use of pass under the \nclass\n \nChild\n:\n is how you tell Python that you want an empty block. This creates a class named \nChild\n but says that there\u2019s nothing new to define in it. Instead it will inherit all of its behavior from \nParent\n.\n\n\nIf you put functions in a base class (i.e., \nParent\n) then all subclasses (i.e., \nChild\n) will automatically get those features. Very handy for repetitive code you need in many classes.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nclass\n \nParent\n(\nobject\n):\n\n\n    \ndef\n \nimplicit\n(\nself\n):\n\n\n        \nprint\n \n\"PARENT implicit()\"\n\n\n\n\nclass\n \nChild\n(\nParent\n):\n\n\n    \npass\n\n\n\n\ndad\n \n=\n \nParent\n()\n\n\nson\n \n=\n \nChild\n()\n\n\n\n\n\n\n\nInherit from both Classes\n\u00b6\n\n\nPython has to look-up the possible function in the class hierarchy for both \nChild\n and \nBadStuff\n, but it needs to do this in a consistent order. To do this Python uses \u201cmethod resolution order\u201d (MRO) and an algorithm called C3 to get it straight.\n\n\nBecause the MRO is complex and a well-defined algorithm is used, Python can\u2019t leave it to you to get the MRO right. Instead, Python gives you the \nsuper()\n function, which handles all of this for you in the places that you need the altering type of actions as I did in Child.altered. With \nsuper()\n you don\u2019t have to worry about getting this right, and Python will find the right function for you.\n\n\n1\n2\n3\nclass\n \nSuperFun\n(\nChild\n,\n \nBadStuff\n):\n\n\n    \npass\n\n\n\n\n\n\n\nOverride Explicitly\n\u00b6\n\n\nActions on the child override the action on the parent.\n\n\nAs you can see, it runs the \nParent.override\n function because that variable (dad) is a Parent. But it also runs  \nChild.override\n messages because son is an instance of \nChild\n and \nChild\n overrides that function by defining its own version.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nclass\n \nParent\n(\nobject\n):\n\n\n    \ndef\n \noverride\n(\nself\n):\n\n        \nprint\n \n\"PARENT override()\"\n\n\n\n\nclass\n \nChild\n(\nParent\n):\n\n\n    \ndef\n \noverride\n(\nself\n):\n\n\n        \nprint\n \n\"CHILD override()\"\n\n\n\n\ndad\n \n=\n \nParent\n()\n\n\nson\n \n=\n \nChild\n()\n\n\n\ndad\n.\noverride\n()\n\n\nson\n.\noverride\n()\n\n\n\n\n\n\n\nAlter Before or After\n\u00b6\n\n\nActions on the child alter the action on the parent.\n\n\nson.altered()\n overrides Parent.altered the \nChild.altered\n version runs, and line 9 executes like you\u2019d expect. In this case I want to do a before and after, I want to use super to get the \nParent.altered\n version. I call \nsuper(Child, self).altered()\n, which is aware of inheritance and will get the \nParent\n class for you. You should be able to read this as \u201ccall super with arguments \nChild\n and \nself\n, then call the function altered on whatever it returns.\u201d At this point, the \nParent.altered\n version of the function runs, and that prints out the Parent message. Finally, this returns from the \nParent.altered\n and the \nChild.altered\n function continues to print out the after message.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nclass\n \nParent\n(\nobject\n):\n\n\n    \ndef\n \naltered\n(\nself\n):\n\n\n        \nprint\n \n\"PARENT altered()\"\n\n\n\nclass\n \nChild\n(\nParent\n):\n\n\n    \ndef\n \naltered\n(\nself\n):\n\n\n        \nprint\n \n\"CHILD, BEFORE PARENT altered()\"\n\n        \nsuper\n(\nChild\n,\n \nself\n)\n.\naltered\n()\n\n        \nprint\n \n\"CHILD, AFTER PARENT altered()\"\n\n\n\n\ndad\n \n=\n \nParent\n()\n\n\nson\n \n=\n \nChild\n()\n\n\n\ndad\n.\naltered\n()\n\n\nson\n.\naltered\n()\n\n\n\n\n\n\n\nSuper\n\u00b6\n\n\nWith \nsuper\n, \nChild\n reinherit from the \nParent\n.\n\n\nThe most common use of \nsuper()\n is actually in \n__init__\n functions in base classes. Then additional class functions.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nChild\n(\nParent\n):\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nstuff\n):\n\n\n        \nself\n.\nstuff\n \n=\n \nstuff\n\n        \nsuper\n(\nChild\n,\n \nself\n)\n.\n__init__\n()\n\n\n\n\n\n\n\nAll Three Combined\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\nclass\n \nParent\n(\nobject\n):\n\n\n    \ndef\n \noverride\n(\nself\n):\n\n\n        \nprint\n \n\"PARENT override()\"\n\n\n    \ndef\n \nimplicit\n(\nself\n):\n\n\n        \nprint\n \n\"PARENT implicit()\"\n\n\n    \ndef\n \naltered\n(\nself\n):\n\n\n        \nprint\n \n\"PARENT altered()\"\n\n\n\n\nclass\n \nChild\n(\nParent\n):\n\n\n    \ndef\n \noverride\n(\nself\n):\n\n\n        \nprint\n \n\"CHILD override()\"\n\n\n    \ndef\n \naltered\n(\nself\n):\n\n\n        \nprint\n \n\"CHILD, BEFORE PARENT altered()\"\n\n        \nsuper\n(\nChild\n,\n \nself\n)\n.\naltered\n()\n\n        \nprint\n \n\"CHILD, AFTER PARENT altered()\"\n\n\n\n\ndad\n \n=\n \nParent\n()\n\n\nson\n \n=\n \nChild\n()\n\n\n\ndad\n.\nimplicit\n()\n\n\nson\n.\nimplicit\n()\n\n\n\ndad\n.\noverride\n()\n\n\nson\n.\noverride\n()\n\n\n\ndad\n.\naltered\n()\n\n\nson\n.\naltered\n()\n\n\n\n\n\n\n\nExercise 45, You Make a Game\n\u00b6\n\n\nUse an existing project, Exercise 43 for example, and adapt it. This is a first draft for a project\u2026\n\n\n1\n\n\nStoryboarding tool.\n\n\nCreate a program that would question the user on its data and advise him on what would be the best graphics to use. Frame by frame, the user could build a presentation knowing slide 1 should be a histogram, slide 2 a scatter plot, etc. \n\n\n2\n\n\n\n\nMap\n\n\nnext_graph\n\n\nopening comment (verb)\n\n\n\n\n\n\nEngine\n\n\nchoose (verb)\n\n\n\n\n\n\n\n\nGraph\n\n\n\n\nproceed (verb)\n\n1. CC pie\n\n2. IC bar\n\n3. TSC column, line\n\n4. FDC column, line\n\n5. CorC bar, dot\n\n\n\n\n\n\n\n\nopening comment\n\n\n\n\ngeneral comment\n\n\nstorytelling\n\n\npie\n\n\ncompare data, y, n\n\n\ny, stacked bar chart\n\n\nn, pie chart with a maximum of 6 items\n\n\n\n\n\n\nbar\n\n\nsimple series of data or items: h deviation bar chart (tornado), divide A from B (winners from losers, good markets from bad markets): h deviation bar chart (tornado), mix of two components (portfolio A items vs portfolio B items):sliding h bar chart, high-low spreads:range h bar chart, correlation x1 and x2 with y (two products, two markets\u2026 with): paired bar chart, compare aspects (with or without discount, red or blue paint):group h bar chart, components of the total: subdivided h bar chart\u2026\n\n\n\n\n\n\ncolumn\n\n\np.37, 42\n\n\n\n\n\n\nline\n\n\np.39, 44-45\n\n\n\n\n\n\nsurface\n\n\np. 40\n\n\n\n\n\n\ndot\n\n\np.49\n\n\n\n\n\n\n\n\n3\n\n\n\n\nCreate module \n3graph_story\n (proof of concept).\n\n\nThe module presents a story in 3 graphs, according to 3 sets of data.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nclass\n \nMap\n(\nobject\n)\n:\n\n    \ndef\n \n__init__\n(\nself\n,\nstart\n)\n:\n\n    \ndef\n \nnext\n(\nself\n,\n \nstart\n)\n:\n\n    \ndef\n \nopening\n(\nself\n)\n:\n\n\n\nclass\n \nEngine\n(\nobject\n)\n:\n\n    \ndef\n \n__init__\n(\nself\n,\ngraph_map\n)\n:\n\n    \ndef\n \nchoose\n(\nself\n)\n:\n\n\n\nclass\n \nGraph\n(\nobject\n)\n:\n\n    \ndef\n \nproceed\n(\nself\n)\n:\n\n\n    \nclass\n \n1\nCC\n(\nGraph\n)\n:\n\n        \ndef\n \nenter\n(\nself\n)\n\n            \npie\n\n    \nclass\n \n2\nIC\n(\nGraph\n)\n:\n\n        \ndef\n \nenter\n(\nself\n)\n:\n\n            \nbar\n\n    \nclass\n \n3\nTSC\n(\nGraph\n)\n:\n\n        \ndef\n \nenter\n(\nself\n)\n:\n\n            \ncolumn\n\n            \nline\n\n    \nclass\n \n4\nFDC\n(\nGraph\n)\n:\n\n        \ndef\n \nenter\n(\nself\n)\n:\n\n            \ncolumn\n\n            \nline\n\n    \nclass\n \n5\nCorC\n(\nGraph\n)\n:\n\n        \ndef\n \nenter\n(\nself\n)\n:\n\n            \nbar\n\n            \ndot\n\n\n\n\n\n\n\nAnd so on. Consult the manual to find out more\n\n\nExercise 46, A Project Skeleton\n\u00b6\n\n\n\n\nThe \u2018skeleton\u2019 directory (see below) or the directory framework will have all the basics you need to get a new project up and running. \n\n\nIt will have your project layout, automated tests, modules, and install scripts.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n\\:.\n\u251c\u2500\u2500\u2500bin\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500docs\n\u251c\u2500\u2500\u2500NAME\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500tests\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u2514\u2500\u2500\u2500setup.py   \n\n\n\n\n\n\n\n\n\\:.\n is the project parent directory or simply \u2018the\u2019 directory (its name is the project\u2019s name).\n\n\nThe directory is the place to be when launching scripts.\n\n\nbin\n is the main sub-directory. It contains the main script (\npython bin/main.py\n) for launching other scripts in the project; and launching tests as well. These script are often located in other sub-directories.\n\n\nA sub-directory must be executable to import a module from it or execute a script in it: add an empty script called \n__init__.py\n.\n\n\nWhen a script is executed, it is compiled. Another script, with the extension \n.pyc\n, appears. Same as for \n__init__.pyc\n, as the sub-directory was executed (when a script import a script from another sub-directory for example).\n\n\ntests\n contains files to perform nose tests and unittests.\n\n\nsetup.py\n is for documenting and distributing the project (when the project is compiled to be launched as a whole or frozen to be distributed).\n\n\nYou can add a \nreadme\n file below (usually a text or markdown document).\n\n\nThe \ndocs\n sub-directory contains all the project\u2019s documentation. It is more elaborate than the \u2018readme\u2019 file: manuals, explanations, logs, wikis, etc.\n\n\nThere can be other sub-directories for static such as images, web languages, etc.\n\n\nRepeat this directory structure for every project.\n\n\nTo clean up the directory, in the bash:\n\n\n\n\n1\n2\n3\n4\nfind . -name \n\"*.pyc\"\n -print \n#display\n\nfind . -name \n\"*.pyc\"\n -exec rn\n{}\n\\;\n \n1\n remove\n\ngrep -r \n\"NAME\"\n * \n#search within files\n\n\n\n\n\n\n\n\n\nIn Linux, before running any script, be sure to set the path to the project directory. \n\n\nBash:\n\n\n\n\n1\n2\n3\n4\nexport\n \nPYTHONPATH\n=\n.\n\nexport\n \nPYTHONPATH\n=\n$PYTHONPATH\n:\n$PWD\n\n\n\nunset\n PYTHONPATH \n# to remove\n\n\n\n\n\n\n\n\n\nIn Windows, set the path in the environment variables. Otherwise, Python won\u2019t find the scripts.\n\n\nPowerShell:\n\n\n\n\n1\n$env\n:PYTHONPATH \n=\n \n\"\n$env\n:PYTHONPATH;.\"\n\n\n\n\n\n\n\n\n\nOr, on top of the Python code, below the shebang lnes, and before any other imports, add:\n\n\n\n\n1\n2\n3\nimport\n \nsys\n\n\nsys\n.\npath\n \n# to view\n\n\nsys\n.\npath\n.\nappend\n(\n'.'\n)\n \n# to set\n\n\n\n\n\n\n\n\n\nConsult the manual to find out more.\n\n\n\n\nExercise 47, Automated Testing\n\u00b6\n\n\nMiscellaneous notes\n\u00b6\n\n\n\n\nThe project directory is \u2018ex47\u2019.\n\n\nTest if you migrated the files correctly. In the bash:\n\n\n\n\n1\n2\ngrep -r NAME *  \n# no traces of 'NAME', from 'skeleton'\n\nfind . -name \n\"*.pyc\"\n -exec rm \n{}\n \n\\;\n \n# no trace of 'name'\n\n\n\n\n\n\n\n\n\nWhen you launch a script, you launch it from the parent directory with \npython bin/app.py\n.\n\n\nIn directory \u2018ex47\u2019, run tests with \npython tests/BLAH_tests.py\n. \n\n\nConsult the manual about testing. This is not covered in this notebook. \n\n\nTesting must be done in the shell or in the bash. Make sure you\u2019re running the tests with nosetests not with just Python. \n\n\nThe important functions here are \nassert_equal\n which makes sure that variables you have set or paths you have built in a Room are actually what you think they are. If you get the wrong result, then nosetests will print out an error message so you can go figure it out.\n\n\nIn a script, when you import from another sub-directory, code:\n\n\n\n\n1\nfrom\n \nex47.game\n \nimport\n \nRoom\n\n\n\n\n\n\n\n\n\nWhen the imported script is in the same sub-directory, code:\n\n\n\n\n1\nfrom\n \nbin\n \nimport\n \nRoom\n\n\n\n\n\n\n\n\n\nConsult the manual to find out more.\n\n\n\n\nExercise 50, Your First Website\n\u00b6\n\n\nAn overview\n\u00b6\n\n\n\n\nWeb framework for web projects.\n\n\nDjango (the real deal, but complicated), Flask (modest), Pyramid (scalable), etc.\n\n\nOr the simple, yet powerful enough, web.py.\n\n\nExercises, from 50 to 52, are done with web.p",
            "title": "Learn Python the Hard Way"
        },
        {
            "location": "/Learn Python the Hard Way/#shorcuts-good-to-know",
            "text": "In the terminal, type  pydoc <python item>  to invoke the documentation on a python item (built-in functions, methods, objects, etc.).  ctrl+c  and/or  ctrl+d  break a loop.",
            "title": "Shorcuts, Good to Know"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-3-numbers-and-math",
            "text": "~ print, format, calculate~  1 print   \"I will now count my chickens:\"    1 I will now count my chickens:   1\n2\n3\n4\n5\n6\n7\n8 print   \"Hens\" ,   25   +   30   /   6  print   \"Roosters\" ,   100   -   25   *   3   %   4  print   \"Now I will count the eggs:\"  print   3   +   2   +   1   -   5   +   4   %   2   -   1   /   4   +   6  # copy 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 straight into the shell and run it  # you will get the result only (don't add print before the statement)    1\n2\n3\n4 Hens 30\nRoosters 97\nNow I will count the eggs:\n7   1\n2 print   \"Is it true that 3 + 2 < 5 - 7\"  print   3   +   2   <   5   -   7    1\n2 Is it true that 3 + 2 < 5 - 7\nFalse   1\n2 print   \"What is 3 + 2?\" ,   3   +   2  print   \"What is 5 - 7?\" ,   5   -   7    1\n2 What is 3 + 2? 5\nWhat is 5 - 7? -2   1\n2 print   \"Oh, that's why it's False.\"  print   \"How about some more.\"    1\n2 Oh, that's why it's False.\nHow about some more.   1\n2\n3 print   \"Is it greater?\" ,   5   >   - 2  print   \"Is it greater or equal?\" ,   5   >=   - 2  print   \"Is it less or equal?\" ,   5   <=   - 2    1\n2\n3 Is it greater? True\nIs it greater or equal? True\nIs it less or equal? False   1 print   ( 1   +   1 )   # integer    1 2   1 print   ( 1.0   +   1 )   # float    1 2.0",
            "title": "Exercise 3, Numbers and Math"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-4-variables-and-names",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 cars   =   100  space_in_a_car   =   4.0   # float  drivers   =   30  passengers   =   90  cars_not_driven   =   cars   -   drivers  cars_driven   =   drivers  carpool_capacity   =   cars_driven   *   space_in_a_car  average_passengers_per_car   =   passengers   /   cars_driven  print   \"There are\" ,   cars ,   \"cars available.\"  print   \"There are only\" ,   drivers ,   \"drivers available.\"  print   \"There will be\" ,   cars_not_driven ,   \"empty cars today.\"  print   \"We can transport\" ,   carpool_capacity ,   \"people today.\"  print   \"We have\" ,   passengers ,   \"to carpool today.\"  print   \"We need to put about\" ,   average_passengers_per_car ,   \"in each cars.\"    1\n2\n3\n4\n5\n6 There are 100 cars available.\nThere are only 30 drivers available.\nThere will be 70 empty cars today.\nWe can transport 120.0 people today.\nWe have 90 to carpool today.\nWe need to put about 3 in each cars.    A constant variable, a variable that should never be altered, should be set in capital as  PI = 3.1416 .",
            "title": "Exercise 4, Variables and Names"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-5-more-variables-and-printing",
            "text": "Call a variable with:  %r ; raw variable.  %s ; string.  %d ; digit.    Make the choice depending on the variable type.  However, if calling a \u2018string\u2019 (text, NLP), it must be done with  %s ; \u2018numbers\u2019 is done with  %r  and  %d  (possibly with  %s ).   The use and effects of the different calls is explained in Exercises 6 and 21.   1\n2\n3\n4\n5\n6\n7\n8\n9 my_name   =   'Zed A. Shaw'  my_age   =   35   # not a lie  my_height   =   74   # inches  my_weight   =   180   # lbs  my_eyes   =   'Blue'  my_teeth   =   'White'  my_hair   =   'Brown'  print   \"Let's talk about  %s .\"   %   my_name    1 Let's talk about Zed A. Shaw.   1\n2\n3\n4 # does the same thing  print   \"He's  %d  years old.\"   % my_age  print   \"He's\" ,   my_age , \"years old.\"  print   \"He will be\" ,   my_age   +   1 , \"years old next year.\"    1\n2\n3 He's 35 years old.\nHe's 35 years old.\nHe will be 36 years old next year.   1\n2\n3\n4\n5 print   \"He's  %d  inches tall.\"   %   my_height  print   \"He's  %d  pounds heavy\"   %   my_weight  print   \"Actually that's not too heavy.\"  print   \"He's got  %s  eyes and  %s  hair.\"   %   ( my_eyes ,   my_hair )  print   \"His teeth are usually  %s  depending on the coffee.\"   %   my_teeth    1\n2\n3\n4\n5 He's 74 inches tall.\nHe's 180 pounds heavy\nActually that's not too heavy.\nHe's got Blue eyes and Brown hair.\nHis teeth are usually White depending on the coffee.   1\n2\n3 # this line is tricky, try to get it exactly right  print   \"If I add  %d ,  %d , and  %d  I get  %d .\"   %   ( \n     my_age ,   my_height ,   my_weight ,   my_age   +   my_height   +   my_weight )    1 If I add 35, 74, and 180 I get 289.",
            "title": "Exercise 5, More Variables and Printing"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-6-strings-and-text",
            "text": "~ concatenate~   %s  and  %r  help when concatenating strings.  %r  does not coerce the variable into a format ( %s  string or  %d  digit).   1\n2\n3\n4\n5\n6\n7\n8 x   =   \"There are  %d  types of people.\"   %   10  binary   =   \"binary\"  do_not   =   \"don't\"  y   =   \"Those who know  %s  and those who  %s .\"   %   ( binary ,   do_not )   # assign strings or chains of strings to a variable  print   x   print   y    1\n2 There are 10 types of people.\nThose who know binary and those who don't.   1\n2 print   \"I said:  %r .\"   %   x  print   \"I also said: ' %s '.\"   %   y    1\n2 I said: 'There are 10 types of people.'.\nI also said: 'Those who know binary and those who don't.'.   1\n2\n3\n4 hilarious   =   False  joke_evaluation   =   \"Isn't that joke so funny?!  %r \"  print   joke_evaluation   %   hilarious    1 Isn't that joke so funny?! False   1\n2\n3\n4\n5\n6 # add two strings together, concatenate them  w   =   \"This is the left side of...\"  e   =   \" a string with a right side.\"  # with Numpy, it would have added (mathematically speaking)  print   w   +   e    1 This is the left side of... a string with a right side.",
            "title": "Exercise 6, Strings and Text"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-15-reading-files",
            "text": "Before running this script, create a text file.  Type  \"Test file thing\" > test.txt .  Then type  cat test.txt .  \u2018test.txt\u2019 is now saved along the other scripts.  Run the script:  python ex15.py test.txt  With IPython, type:  %run   ex15 . py   test . txt  Run the script without the extra argument  test.txt  to check the result.   1 % run   ex15 . py   test . txt    1\n2\n3\n4\n5\n6 Here's your file 'test.txt':\nTest file thing\nType the filename again:\n> test.txt\nHere's your file 'test.txt' again:\nTest file thing   1 % run   ex15 . py   \n    ---------------------------------------------------------------------------   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ValueError                                  Traceback   ( most   recent   call   last ) \n\n\\\\ Learn   Python   the   Hard   Way \\ ex15 . py   in   < module > () \n       1   from   sys   import   argv \n       2   ---->   3   script ,   filename   =   argv \n       4  \n       5   # similarities  ValueError :   need   more   than   1   value   to   unpack     Load the script in IPython with  %load  to study it (don\u2019t run it!).  This type of script requires \u2018external\u2019 arguments when launched:  python ex15.py test.txt  In the script itself, always preceed the \u2018external\u2019 arguments, like  filename , with  script  since your write  python ex15.py test.txt  or  python script argument  when you launch the script.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 # %load ex15.py  from   sys   import   argv  script ,   filename   =   argv  # similarities between  # var = raw_input(\"string\", digit, \"prompt\")  # var = open(\"string\")  txt   =   open ( filename )   # reference to a file, not the file  print   \"Here's your file  %r :\"   %   filename  print   txt . read ()  print   \"Type the filename again:\"  file_again   =   raw_input ( \"> \" )  text_again   =   open ( file_again )  print   \"Here's your file  %r  again:\"   %   file_again  print   text_again . read ()     The script again (this time, a manual import or copy-paste).    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 from   sys   import   argv  # always preceed the arguments like 'filename' with 'script'  script ,   filename   =   argv  # similarities  # var = raw_input(\"string\", digit, \"prompt\")  # var = open(\"string\")  txt   =   open ( filename )   #reference to a file, not the file  print   \"Here's your file  %r :\"   %   filename  print   txt . read ()  print   \"Type the filename again:\"  file_again   =   raw_input ( \"> \" )  text_again   =   open ( file_again )  print   \"Here's your file  %r  again:\"   %   file_again  print   text_again . read ()     Now, use this alternative code instead.  It does not require an external argument; the argument ( filename ) is in the script itself (it has become a variable).  \u2018Internal\u2019 arguments are for functions ( def function(arg1, arg2): ); see Exercise 18.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 filename   =   \"test.txt\"   # however, the code is limited to this file only  txt   =   open ( filename )   # reference to a file, not the file  print   \"Here's your file  %r :\"   %   filename  print   txt . read ()  print   \"Type the filename again:\"  file_again   =   raw_input ( \"> \" )  text_again   =   open ( file_again )  print   text_again . read ()",
            "title": "Exercise 15, Reading Files"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-16-reading-and-writing-files",
            "text": "~ open, close, readlines, truncate~   'w' , write,  'r' , read,  'a' , append.  'w+' , read-write,  'r+' , read-write,  'a+' , read-append.  'r'  being the default argument, it is facultative when writing  open('file', 'r') .  The other arguments are mandatory; without them in  open('file, 'w') , you cannot write, truncate, append or replace.  First, load the script in IPython by typing  %load   ex16_1 . py ; it then turn to  a comment  # %load ex16_1.py .    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35 # %load ex16.py  from   sys   import   argv  script ,   filename   =   argv  print   \"We're going to erase  %r .\"   %   filename  print   \"If you don't want that, hit CTRL-C (^C).\"  print   \"If you do want that, hit RETURN.\"  raw_input ( \"?\" )  print   \"Opening the file...\"  target   =   open ( filename ,   'w' )  print   \"Truncating the file!\"  target . truncate ()  print   \"Now, I'm going to ask you  for three lines.\"  line1   =   raw_input ( \"line 1: \" )  line2   =   raw_input ( \"line 2: \" )  line3   =   raw_input ( \"line 3: \" )  print   \"I'm going to write these to the file.\"  target . write ( line1 )   # 'write' variable line1  target . write ( \" \\n \" )   # add a new line  target . write ( line2 )  target . write ( \" \\n \" )  target . write ( line3 )  target . write ( \" \\n \" )  print   \"And finally, we close it.\"  target . close ()     Now, run the external file in IPython (it imports the code behind the scene).  Careful: the script requires a second argument ( filename ).   1 % run   ex16 . py   text . txt     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 We're going to erase 'text.txt'.\nIf you don't want that, hit CTRL-C (^C).\nIf you do want that, hit RETURN.\n?\nOpening the file...\nTruncating the file!\nNow, I'm going to ask you  for three lines.\nline 1: Good morning.\nline 2: How are you?\nline 3: I wish you a good day.\nI'm going to write these to the file.\nAnd finally, we close it.    Read the file.   1\n2\n3\n4\n5 filename   =   'text.txt'  target   =   open ( filename ,   'r' )  print   target . read ()  target . close ()    1\n2\n3 Good morning.\nHow are you?\nI wish you a good day.    Now, truncate (empty, delete, erase, clear) the file, reopen it, and to read it.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 filename   =   'text.txt'  target   =   open ( filename ,   'w' )  print   \"Truncating the file!\"  print   \"-\"   *   25  target . truncate ()  target . close ()  target   =   open ( filename ,   'r' )  print   target . read ()  target . close ()    1\n2 Truncating the file!\n------------------------",
            "title": "Exercise 16, Reading and Writing Files"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-17-more-files",
            "text": "~ length, len()~   target.read() ; read the whole file (EOF).  target.read(10) ; read the amount of bytes between the parentheses (1 byte = 1 character).  target.readline() ; read one line character at a time; the first line or the file until the first  \\n .  target.readline(10) ; read 10 bytes of the first line, but never more than the first line.  readlines() ; read in the whole file at once and splits it by line (create a list).  xreadlines() ; read big files.  First, load  script ex17_1.py  in IPython. This script needs two additional arguments.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 # %load ex17_1.py  from   sys   import   argv  from   os.path   import   exists   # does the file exists, T or F?  script ,   from_file ,   to_file   =   argv  print   \"Copying from  %s  to  %s \"   %   ( from_file ,   to_file )  in_file   =   open ( from_file ,   'r' )   # 'r' is facultative  indata   =   in_file . read ()   # read the content, store in memory  print   \"The input file is  %d  bytes long\"   %   len ( indata )   # number of bytes in the file or length of 'indata'  print   \"Does the output file exist?  %r \"   %   exists ( to_file )   # if the second file hasn't been created, this row will yield a 'False'  # after you run this script, if you run it again, il will yield a 'True'  print   \"Ready, hit RETURN to continue, CTRL-C to abort.\"  raw_input ( \"? \" )  out_file   =   open ( to_file ,   'w' )  out_file . write ( indata )  print   \"Alright, all done.\"  out_file . close ()  in_file . close ()    1 % run   ex17_1 . py   text2 . txt   new . txt    1\n2\n3\n4\n5\n6 Copying from text2.txt to new.txt\nThe input file is 49 bytes long\nDoes the output file exist? True\nReady, hit RETURN to continue, CTRL-C to abort.\n? \nAlright, all done.   1\n2\n3 target   =   open ( \"text2.txt\" )  print   target . read ()  target . close ()    1\n2\n3 Good morning.\nHow are you?\nI wish you a good day.   1\n2\n3 target   =   open ( \"new.txt\" )  print   target . read ()  target . close ()    1\n2\n3 Good morning.\nHow are you?\nI wish you a good day.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 # %load ex17_2.py  from   sys   import   argv  from   os.path   import   exists   # does the file exists, T or F?  script ,   from_file ,   to_file   =   argv  # FIRST  in_file   =   open ( from_file ,   'r' )  indata   =   in_file . read ()  print   \"The input file is  %d  bytes long\"   %   len ( indata )  in_file . close ()  print   \"-\"   *   25  # SECOND  checkfile   =   open ( from_file ,   'r' )  print   checkfile . readline ()   # read line 1, show  print   checkfile . readline ()   # read line 2  print   checkfile . readline ()   # read line 3  checkfile . close ()  print   \"-\"   *   25  # THIRD  checkfile2   =   open ( from_file ,   'r' )  out_file   =   open ( to_file ,   'w' )  indata   =   checkfile2 . read ()  out_file . write ( indata )  print   \"Alright, all done.\"  checkfile2 . close ()  out_file . close ()  print   \"-\"   *   25  # FOURTH  checkfile3   =   open ( to_file ,   'r' )  print   checkfile3 . read ()  checkfile3 . close ()    1 % run   ex17_2 . py   text2 . txt   new2 . txt     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 The input file is 49 bytes long\n-------------------------\nGood morning.\n\nHow are you?\n\nI wish you a good day.\n-------------------------\nAlright, all done.\n-------------------------\nGood morning.\nHow are you?\nI wish you a good day.",
            "title": "Exercise 17, More Files"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-18-names-variables-code-functions",
            "text": "~ argument, flexible, indefinite~   A function can have no, one or several arguments.  def function(): .  def function(one) .  def function(one, two, three) .    *args  means indifinite number of arguments.   All the arguments are is a list (\u2018args\u2019).    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 # indefinite  def   print_two ( * args ): \n\n     arg1 ,   arg2   =   args \n     print   \"arg1:  %r , arg2:  %r \"   %   ( arg1 ,   arg2 )  # two arguments  def   print_two_again ( arg1 ,   arg2 ): \n\n     print   \"arg1:  %r , arg2:  %r \"   %   ( arg1 ,   arg2 )  # one argument  def   print_one ( arg1 ): \n\n     print   \"arg1:  %r \"   %   arg1  # no arguments  def   print_none (): \n\n     print   \"I got nothin'.\"  # indefinite  def   print_two_2 ( * args ): \n\n     print   \"args:  %r \"   %   ( args ,)   # much more flexible      # two arguments  def   print_two_again_2 ( arg1 ,   arg2 ,   arg3 ): \n\n     print   \"arg1:  %r , arg2:  %r , arg3:  %r \"   %   ( arg1 ,   arg2 ,   arg3 )      # three arguments  def   print_two_again_3 ( arg1 ,   arg2 ,   arg3 ): \n\n     print   \"arg1:  %r , arg2:  %r , arg3:  %r \"   %   ( arg1 ,   arg2 ,   arg3 ) \n     print_two ( \"Joe\" ,   \"Frank\" )   # call a function inside a function     Run the functions.   1\n2 print_two ( \"Zed\" ,   \"Shaw\" )  print_two_again ( \"Zed\" ,   \"Shaw\" )    1\n2 arg1: 'Zed', arg2: 'Shaw'\narg1: 'Zed', arg2: 'Shaw'   1\n2 print_one ( \"First!\" )  print_none ()    1\n2 arg1: 'First!'\nI got nothin'.   1 print_two_2 ( \"Zed\" ,   \"Shaw\" ,   \"A\" ,   \"B\" )    1 args: ('Zed', 'Shaw', 'A', 'B')   1 print_two_again_2 ( \"Zed\" ,   \"Shaw\" ,   \"C\" )    1 arg1: 'Zed', arg2: 'Shaw', arg3: 'C'   1 print_two_again_3 ( \"Zed\" ,   \"Shaw\" ,   \"C\" )    1\n2 arg1: 'Zed', arg2: 'Shaw', arg3: 'C'\narg1: 'Joe', arg2: 'Frank'",
            "title": "Exercise 18, Names, Variables, Code, Functions"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-19-functions-and-variables",
            "text": "Give different names to functions and arguments not to get confuse.   1\n2\n3\n4\n5\n6 def   cheese_and_crackers ( cheese_count ,   boxes_of_crackers ): \n\n     print   \"You have  %d  cheeses!\"   %   cheese_count \n     print   \"You have  %d  boxes of crackers!\"   %   boxes_of_crackers \n     print   \"Man that's enough for a party!\" \n     print   \"Get a blanket.  \\n \"    1\n2 print   \"1.We can just give the function numbers directly:\"  cheese_and_crackers ( 20 ,   30 )    1\n2\n3\n4\n5 1.We can just give the function numbers directly:\nYou have 20 cheeses!\nYou have 30 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.   1\n2\n3\n4 print   \"2.Or, we can use variables from our script:\"  amount_of_cheese   =   10  amount_of_crackers   =   50  cheese_and_crackers ( amount_of_cheese ,   amount_of_crackers )    1\n2\n3\n4\n5 2.Or, we can use variables from our script:\nYou have 10 cheeses!\nYou have 50 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.   1\n2 print   \"3.We can even do math inside too:\"  cheese_and_crackers ( 10   +   20 ,   5   +   6 )    1\n2\n3\n4\n5 3.We can even do math inside too:\nYou have 30 cheeses!\nYou have 11 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.   1\n2 print   \"4.And we can combine the two, variables and math:\"  cheese_and_crackers ( amount_of_cheese   +   100 ,   amount_of_crackers   +   1000 )    1\n2\n3\n4\n5 4.And we can combine the two, variables and math:\nYou have 110 cheeses!\nYou have 1050 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.   1\n2\n3\n4\n5 print   \"5.Make a GUI.\"  print   \"Enter the amount of cheese:\" ,  amount_of_cheese   =   int ( raw_input ())  amount_of_crackers   =   int ( raw_input ( \"Enter the amount of crackers: \" ))  cheese_and_crackers ( amount_of_cheese ,   amount_of_crackers )    1\n2\n3\n4\n5\n6\n7 5.Make a GUI.\nEnter the amount of cheese:2\nEnter the amount of crackers: 5\n You have 2 cheeses!\nYou have 5 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.",
            "title": "Exercise 19, Functions and Variables"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-20-functions-and-files",
            "text": "~ seek, move, file~   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48 # %load ex20.py  from   sys   import   argv  script ,   input_file   =   argv  # python ex20.py test.txt  def   print_all ( f ):   # f is the file \n\n     print   f . read ()   # read the file, reach the end  def   rewind ( f ): \n\n     f . seek ( 0 )   # move back to the initial position in the file  # 'seek' actively move in the file  def   print_a_line ( line_count ,   f ): \n\n     print   line_count ,   f . readline ()   # print a line # and this line number in the file  current_file   =   open ( input_file )  print   \"First, let's print the whole file: \\n \"  print_all ( current_file )   # launch function, f = current_file  print   \"-\"   *   25  print   \"Now let's rewind, kind of like a tape.\"  rewind ( current_file )   # launch function, f = current_file  print   \"-\"   *   25  print   \"Let's print three lines:\"  current_line   =   1   # load variable  print_a_line ( current_line ,   current_file )   # launch function  # set 'current_line' to 1  current_line   =   current_line   +   1  # current_line += 1  print_a_line ( current_line ,   current_file )  # 'current_line' grows to 2...  # current_line = current_line + 1  current_line   +=   1  print_a_line ( current_line ,   current_file )    1 % run   ex20 . py   new2 . txt     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 First, let's print the whole file:\n\nGood morning.\nHow are you?\nI wish you a good day.\n-------------------------\nNow let's rewind, kind of like a tape.\n-------------------------\nLet's print three lines:\n1 Good morning.\n\n2 How are you?\n\n3 I wish you a good day.",
            "title": "Exercise 20, Functions and Files"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-21-functions-can-return-something-or-not",
            "text": "~ integer, float, int, coerce, digit, string, raw~   %r  for raw.  %d  for digit.  %s  for string.  int()  with  %d  = integer.  int()  with  %r  or  %s  = integer.  float()  with  %d  = integer.  float()   with  %r  or  %s  = float.  %r  is a safer choice; see below.   1\n2\n3\n4\n5\n6\n7\n8\n9 a   =   10   # a digit  b   =   10.1  print   \" %r \"   %   a  print   \" %s \"   %   a  print   \" %d \"   %   a  print   \" %r \"   %   b  print   \" %s \"   %   b  print   \" %d \"   %   b    1\n2\n3\n4\n5\n6 10\n10\n10\n10.1\n10.1\n10   1\n2\n3\n4\n5 a   =   \"10\"   # a string or str(10)  print   \" %r \"   %   a  print   \" %s \"   %   a  print   \" %d \"   %   a     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 '10'\n10\n\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-34-71a6226dbd27> in <module>()\n      2 print \"%r\" % a\n      3 print \"%s\" % a\n----> 4 print \"%d\" % a\n\nTypeError: %d format: a number is required, not str   1\n2\n3\n4\n5 b   =   \"10.1\"   # a string or str(10)  print   \" %r \"   %   b  print   \" %s \"   %   b  print   \" %d \"   %   b     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 '10.1'\n10.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-33-18d4f3068fee> in <module>()\n      2 print \"%r\" % b\n      3 print \"%s\" % b\n----> 4 print \"%d\" % b\n\nTypeError: %d format: a number is required, not str   1\n2\n3\n4\n5\n6\n7 a   =   \"10\"   # a string or str(10)  b   =   \"10.1\"   # a string or str(10)  print   \" %r \"   *   1   %   a  print   \" %s \"   *   1   %   a  print   \" %r \"   *   1   %   b  print   \" %s \"   *   1   %   b    1\n2\n3\n4 '10'\n10\n'10.1'\n10.1   1\n2\n3\n4\n5\n6\n7 a   =   \"10\"   # a string or str(10)  b   =   \"10.1\"   # a string or str(10)  print   \" %r \"   *   2   %   a  print   \" %s \"   *   2   %   a  print   \" %r \"   *   2   %   b  print   \" %s \"   *   2   %   b     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 ---------------------------------------------------------------------------\n\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-34-18d4f3068fee> in <module>()\n      1 a = \"10\"\n      2 b = \"10.1\"\n----> 3 print \"%r\" * 2 % a\n      4 print \"%s\" * 2 % a\n      5 print \"%r\" * 2 % b\n\nTypeError: not enough arguments for format string    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 a   =   10  b   =   10.1  a   =   int ( a )  b   =   int ( b )  print   \" %r \"   %   a  print   \" %s \"   %   a  print   \" %d \"   %   a  print   \" %r \"   %   b  print   \" %s \"   %   b  print   \" %d \"   %   b    1\n2\n3\n4\n5\n6 10\n10\n10\n10\n10\n10    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 a   =   10  b   =   10.1  a   =   float ( a )  b   =   float ( b )  print   \" %r \"   %   a  print   \" %s \"   %   a  print   \" %d \"   %   a  print   \" %r \"   %   b  print   \" %s \"   %   b  print   \" %d \"   %   b    1\n2\n3\n4\n5\n6 10.0\n10.0\n10\n10.1\n10.1\n10   1\n2\n3\n4\n5\n6\n7\n8\n9 a   =   1  b   =   2.1  print   a   *   b  print   int ( a )   *   int ( b )  print   float ( a )   *   float ( b )  print   str ( a )   *   10  print   str ( b )   *   10  print   str ( a )   *   str ( b )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 2.1\n2\n2.1\n1111111111\n2.12.12.12.12.12.12.12.12.12.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-52-57a5dd7c13d0> in <module>()\n      7 print str(a) * 10\n      8 print str(b) * 10\n----> 9 print str(a) * str(b)\n\nTypeError: can't multiply sequence by non-int of type 'str'    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 def   add ( a ,   b ): \n\n     print   \"ADDING  %s  +  %s \"   %   ( a ,   b ) \n     return   a   +   b    def   substract ( a ,   b ): \n\n     print   \"SUBTRACTING  %d  -  %d \"   %   ( a ,   b )   # show the arguments \n     return   a   -   b   # compute the arguments  def   multiply ( a ,   b ): \n\n     print   \"MULTIPLYING  %d  *  %d \"   %   ( a ,   b ) \n     return   a   *   b      def   divide ( a ,   b ): \n\n     print   \"DIVIDING  %d  /  %d \"   %   ( a ,   b ) \n     return   a   /   b    1\n2\n3\n4\n5 print   \"Let's do some math with just functions!\"  aa   =   int ( raw_input ( \"Enter a (integer): \" ))   # to enter an integer  bb   =   float ( raw_input ( \"Enter b (float): \" ))   # to enter a float  age   =   add ( aa ,   bb )   # launch function add()    1\n2\n3\n4 Let's do some math with just functions!\nEnter a (integer): 1\nEnter b (float): 2.2\nADDING 1 + 2.2   1 print   add ( aa ,   bb )    1\n2 ADDING 1 + 2.2\n3.2   1\n2\n3\n4\n5\n6\n7 height   =   substract ( 78 ,   4 )   # launch function substract()  weight   =   multiply ( 90 ,   2 )   # launch function multiply()  iq   =   divide ( 100 ,   2 )   # launch function divide()  print   height  print   weight  print   iq    1\n2\n3\n4\n5\n6 SUBTRACTING 78 - 4\nMULTIPLYING 90 * 2\nDIVIDING 100 / 2\n74\n180\n50   1\n2 # Use the variable, previously loaded  print   \"Age:  %d , Height:  %d , Weight:  %d , IQ:  %d \"   %   ( age ,   height ,   weight ,   iq )    1 Age :   3 ,   Height :   74 ,   Weight :   180 ,   IQ :   50    1\n2\n3\n4\n5\n6\n7 # A puzzle for the extra credit, type it in anyway.  print   \"Here is a puzzle.\"  what   =   add ( age ,   substract ( height ,   multiply ( weight ,   divide ( iq ,   2 ))))   # launch functions one by one!!!  # Insert variable 'what' in the text  print   \"That becomes: \" ,   what ,   \"Can you do it by hand?\"    1\n2\n3\n4\n5\n6 Here is a puzzle.\nDIVIDING 50 / 2\nMULTIPLYING 180 * 25\nSUBTRACTING 74 - 4500\nADDING 3.2 + -4426\nThat becomes:  -4422.8 Can you do it by hand?",
            "title": "Exercise 21, Functions Can Return Something or not..."
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-23-read-some-code",
            "text": "Go to  GitHub :  In the \u2018lamson\u2019 directory, take a script.  Go through the script.  Find projects on collaborative sites or depositories:  bitbucket.org .  github.com .  gitorious.org .  launchpad.net .  sourceforge.net .",
            "title": "Exercise 23, Read Some Code"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-24-more-practice",
            "text": "\\'  for an aposthrophy.  \\t  for a tab.  \\\\  for a backslash.  \\n  for a new line.   1\n2\n3 print   \"Let's practice everything.\"  print   'You \\' d need to know  \\' bout escapes with  \\\\  that do  \\n newlines and  \\t tabs.'    1\n2\n3 Let's practice everything.\nYou'd need to know 'bout escapes with \\ that do \nnewlines and    tabs.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 poem   =   \"\"\"  \\t The lovely world  with logic so firmly planted  connot discern  \\n  the needs of love  nor comprehend passion from intuition  and requires an explanation  \\n\\t\\t where there is none.  \"\"\"  print   \"----------------\"  print   poem  print   \"----------------\"     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ----------------\n\n    The lovely world\nwith logic so firmly planted\nconnot discern \n the needs of love\nnor comprehend passion from intuition\nand requires an explanation\n\n        where there is none.\n\n----------------   1\n2\n3\n4\n5 # variable 'five'  five   =   10   - 2   +   3   -   6  # use of variable 'five'  print   \"This should be five:  %s \"   %   five    1 This should be five: 5    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 # function with one argument  def   secret_formula ( started ): \n\n     jelly_beans   =   started   *   500   # load variable with another \n     jars   =   jelly_beans   /   1000 \n     crates   =   jars   /   100 \n     return   jelly_beans ,   jars ,   crates  # variable; warning, this variable is modified further down  start_point   =   10000  # redefine the results of a function (rename a variable)  # from this point, 'jelly_beans' becomes 'beans'  # and must be called so in any line of code  beans ,   jars ,   crates   =   secret_formula ( start_point )  print   \"With a starting point of:  %d \"   %   start_point  # we apply 'bean'  print   \"We's have  %d  beans,  %d  jars, and  %d  crates.\"   %   ( beans ,   jars ,   crates )  # modified variable is loaded into the code from this point  start_point   =   start_point   /   10  print   \"We can also do that this way:\"  # we apply the modified variable 'start_point'  print   \"We's have  %d  beans,  %d  jars, and  %d  crates.\"   %   secret_formula ( start_point )    1\n2\n3\n4 With a starting point of: 10000\nWe's have 5000000 beans, 5000 jars, and 50 crates.\nWe can also do that this way:\nWe's have 500000 beans, 500 jars, and 5 crates.",
            "title": "Exercise 24, More Practice"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-25-even-more-practice",
            "text": "~ import, module, package, script, library~   For this exercice, consult the manual.  First, run python ex25.py to find out any errors.  Second, use the python engine to run pieces of codes from this file and not just trigger the whole code from this file  Check out file  25_1.txt .    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43 # %load ex25.py  def   break_words ( stuff ): \n\n     \"\"\"This function will break up words for us.\"\"\" \n     words   =   stuff . split ( ' ' )   # the method splits the characters each time it finds a 'space' \n     return   words   # you must specify in python where to load the result (into 'words')  def   sort_words ( words ): \n\n     \"\"\"Sorts the words.\"\"\" \n     return   sorted ( words )   # the python function sorts the separated words  def   print_first_word ( words ): \n\n     \"\"\"Prints the first word after popping in off.\"\"\" \n     word   =   words . pop ( 0 )   # the method returns the first word in the index (position 0) \n     print   word  def   print_last_word ( words ): \n\n     \"\"\"Prints the last word after popping it off.\"\"\" \n     word   =   words . pop ( - 1 )   # the method returns the last word in the index (position -1) \n     print   word  def   sort_sentence ( sentence ): \n\n     \"\"\"Takes in a full sentence and returns the sorted words.\"\"\" \n     words   =   break_words ( sentence )   # launch a function \n     return   sort_words ( words )   # launch another function with the result of the first function  def   print_first_and_last ( sentence ): \n\n     \"\"\"Prints the first and last words of the sentence.\"\"\" \n     words   =   break_words ( sentence ) \n     print_first_word ( words ) \n     print_last_word ( words )  def   print_first_and_last_sorted ( sentence ): \n\n     \"\"\"Sorts the words then prints the first and last one.\"\"\" \n     words   =   sort_sentence ( sentence ) \n     print_first_word ( words ) \n     print_last_word ( words )    1 % run   ex25 . py     In the next script, you  import  the above script (ex25.py) as an external module (even though the script was previously run in IPython, and we want to simulate a script importing another script) and use its function as methods.   1\n2\n3\n4\n5\n6 import   ex25  sentence   =   \"All good things come to those who wait.\"  words   =   ex25 . break_words ( sentence )  words    1 ['All', 'good', 'things', 'come', 'to', 'those', 'who', 'wait.']   1\n2 sorted_words   =   ex25 . sort_words ( words )  sorted_words    1 ['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']   1\n2\n3 ex25 . print_first_word ( words )  ex25 . print_last_word ( words )  words    1\n2\n3 All\nwait.\n['good', 'things', 'come', 'to', 'those', 'who']   1\n2\n3 ex25 . print_first_word ( sorted_words )  ex25 . print_last_word ( sorted_words )  sorted_words    1\n2\n3 All\nwho\n['come', 'good', 'things', 'those', 'to', 'wait.']   1\n2 sorted_words   =   ex25 . sort_sentence ( sentence )  sorted_words    1 ['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']   1\n2 ex25 . print_first_and_last ( sentence )  ex25 . print_first_and_last_sorted ( sentence )    1\n2\n3\n4 All\nwait.\nAll\nwho",
            "title": "Exercise 25, Even More Practice"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-32-loops-and-lists",
            "text": "~ for, loop, list~  1\n2\n3\n4\n5\n6\n7 the_count   =   [ 1 , 2 , 3 , 4 , 5 ]  fruits   =   [ 'apples' ,   'oranges' ,   'pears' ,   'apricots' ]  change   =   [ 1 ,   'pennies' ,   2 ,   'dimes' ,   3 ,   'quarters' ]  # this first kind of for-loop goes through a list  for   number   in   the_count : \n     print   \" \\t This is count  %d \"   %   number    1\n2\n3\n4\n5     This is count 1\n    This is count 2\n    This is count 3\n    This is count 4\n    This is count 5   1\n2\n3 # same as above  for   fruit   in   fruits : \n     print   \"A fruit of type:  %s \"   %   fruit    1\n2\n3\n4 A fruit of type: apples\nA fruit of type: oranges\nA fruit of type: pears\nA fruit of type: apricots    We can go though mixed lists too. Notice we have to use  %r  since we don\u2019t know what\u2019s in it.   1\n2 for   i   in   change : \n     print   \" \\t I got  %r \"   %   i    1\n2\n3\n4\n5\n6     I got 1\n    I got 'pennies'\n    I got 2\n    I got 'dimes'\n    I got 3\n    I got 'quarters'    We can also build lists. First, start with an empty one.   1\n2\n3\n4\n5\n6\n7\n8 elements   =   []  # then use the range function to do 0 to 5 counts  # 0 means 1st, the 6th is excluded; 0,1,2,3,4,5  for   i   in   range ( 0 ,   6 ): \n     print   \"Adding  %d  to the list.\"   %   i \n     # append is a function that lists understand \n     elements . append ( i )   # elements is a variable to which we add numbers    1\n2\n3\n4\n5\n6 Adding 0 to the list.\nAdding 1 to the list.\nAdding 2 to the list.\nAdding 3 to the list.\nAdding 4 to the list.\nAdding 5 to the list.    We can print them out.   1\n2 for   i   in   elements : \n     print   \" \\t Element was:  %d \"   %   i      1\n2\n3\n4\n5\n6     Element was: 0\n    Element was: 1\n    Element was: 2\n    Element was: 3\n    Element was: 4\n    Element was: 5   1\n2\n3\n4\n5\n6 print   \"Test the range function...\"  print   \"range(5):\" ,   range ( 5 )  print   \"range(6):\" ,   range ( 6 )  print   \"range(1, 5):\" ,   range ( 1 ,   5 )  print   \"range(2, 5):\" ,   range ( 2 ,   5 )  print   \"range(0, 10, 2):\" ,   range ( 0 ,   10 ,   2 )    1\n2\n3\n4\n5\n6 Test the range function...\nrange(5): [0, 1, 2, 3, 4]\nrange(6): [0, 1, 2, 3, 4, 5]\nrange(1, 5): [1, 2, 3, 4]\nrange(2, 5): [2, 3, 4]\nrange(0, 10, 2): [0, 2, 4, 6, 8]    Two-dimentional lists (above 2 dimension, it can become memory-intensive to compute!).   ~ 2d, tabular, lists in list, list of lists~  1\n2\n3\n4\n5\n6 the_count_two   =   [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]]  # this first kind of for-loop goes through a list  # this list is not numerical, use %r or %s  for   number   in   the_count_two : \n     print   \" \\t This is count  %r \"   %   number    1\n2 This is count [1, 2, 3]\nThis is count [4, 5, 6]",
            "title": "Exercise 32, Loops and Lists"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-33-while-loops",
            "text": "~ while, loop~   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 i   =   0  numbers   =   []  while   i   <   6 : \n     print   \"At the top i is  %d \"   %   i \n     numbers . append ( i ) \n\n     i   +=   1 \n     print   \"Number now: \" ,   numbers \n     print   \"At the botton i is  %d \"   %   i  print   \"The numbers: \"     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 At the top i is 0\nNumber now:  [0]\nAt the botton i is 1\nAt the top i is 1\nNumber now:  [0, 1]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 1, 2]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 1, 2, 3]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 1, 2, 3, 4]\nAt the botton i is 5\nAt the top i is 5\nNumber now:  [0, 1, 2, 3, 4, 5]\nAt the botton i is 6\nThe numbers:   1\n2 for   num   in   numbers : \n     print   num        1\n2\n3\n4\n5\n6 0\n1\n2\n3\n4\n5    Make it a function.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 def   breaking_list ( max_of ,   increm ): \n\n     i   =   0 \n     numbers   =   [] \n\n     while   i   <   max_of : \n         print   \"At the top i is  %d \"   %   i \n         numbers . append ( i ) \n\n         i   +=   increm \n         print   \"Number now: \" ,   numbers \n         print   \"At the botton i is  %d \"   %   i \n\n     print   \"The numbers: \" \n\n     for   num   in   numbers : \n         print   num  print   \"Enter an integer, a maximum, higher than 1.\"  max_integer   =   int ( raw_input ( \"> \" ))  print   \"Enter an integer, an increment, equal or more than 1\"  increment   =   int ( raw_input ( \"> \" ))  print   \"The maximum is  %d  and the increment is  %d \"   %   ( max_integer ,   increment )  breaking_list ( max_integer ,   increment )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 Enter an integer, a maximum, higher than 1.\n> 5\nEnter an integer, an increment, equal or more than 1\n> 2\nThe maximum is 5 and the increment is 2\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 2]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 2, 4]\nAt the botton i is 6\nThe numbers: \n0\n2\n4    Change the function, replace with a for-loops.     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 def   breaking_list2 ( max_of ,   increm ): \n\n     i   =   0 \n     numbers   =   [] \n\n     for   i   in   range ( 0 ,   max_of ,   increm ): \n         print   \"At the top i is  %d \"   %   i \n         numbers . append ( i ) \n\n         i   +=   increm \n         print   \"Number now: \" ,   numbers \n         print   \"At the botton i is  %d \"   %   i \n\n     print   \"The numbers: \" \n\n     for   num   in   numbers : \n         print   num  max_integer2   =   max_integer   +   2  increment2   =   increment   +   1  breaking_list2 ( max_integer2 ,   increment2 )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 At the top i is 0\nNumber now:  [0]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 3]\nAt the botton i is 6\nAt the top i is 6\nNumber now:  [0, 3, 6]\nAt the botton i is 9\nThe numbers: \n0\n3\n6",
            "title": "Exercise 33, While Loops"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-34-accessing-elements-of-lists",
            "text": "~ list, list of lists, lists in list, exit, program~   Let\u2019s build a scenario; functions leading to other functions.  def gold_room():  def bear_room():  def cthulhu_room():  def dead(why):  def start():  start()  to launch the chain reaction.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80 from   sys   import   exit  def   gold_room (): \n\n     print   \"This room is full of gold. How much do you take?\" \n\n     choice   =   raw_input ( \"Write any number from 0 to 100> \" )   # variable \n     if   \"0\"   in   choice   or   \"1\"   in   choice :   # could be 0, 1, 10, 11:19, 20, 21, 30, 31, 40, 41, 50, 51, etc. \n         how_much   =   int ( choice )   # variable \n     else : \n         dead ( \"Man, learn to type a number.\" )   # launch function dead \n\n     if   how_much   <   50 : \n         print   \"Nice, you're not greedy, you win!\" \n         exit ( 0 )   # launch system function exit \n     else : \n         dead ( \"You greedy bastard!\" )   # launch function dead  def   bear_room (): \n\n     print   \"There is bear here.\" \n     print   \"The bear has a bunch of honey.\" \n     print   \"The fat bear is in front of another door.\" \n     print   \"How are you going to move the bear?\" \n     bear_moved   =   False   # variable \n\n     while   True :   # infinite loop, run until it finds a right answer \n         choice   =   raw_input ( \"Write 'take honey', 'taunt bear' or 'open door'> \" )   # variable \n\n         if   choice   ==   \"take honey\" :   # variable check \n             dead ( \"The bear looks at you then slaps your face off.\" )   # launch function dead \n         elif   choice   ==   \"taunt bear\"   and   not   bear_moved :   # double variables check \n             print   \"The bear has moved from the door. You can go thought it now.\" \n             bear_moved   =   True   # change the variable \n         elif   choice   ==   \"taunt bear\"   and   bear_moved : \n             dead ( \"The bear gets pissed off and chews your leg off.\" ) \n         elif   choice   ==   \"open door\"   and   bear_moved :   # variable check \n             gold_room ()   # launch function gold_room \n         else : \n             print   \"I got no idea what that means.\"  def   cthulhu_room (): \n\n     print   \"Here you see the great evil Cthulhu.\" \n     print   \"He, it, whatever stares at you and you go insane.\" \n     print   \"Do you flee your life or eat your head?\" \n\n     choice   =   raw_input ( \"Write 'flee' or 'head'> \" )   # variable \n\n     if   \"flee\"   in   choice :   # variable check \n         start ()   # launch function start \n     elif   \"head\"   in   choice : \n         dead ( \"Well that was tasty!\" ) \n     else : \n         cthulhu_room ()   # launch function  def   dead ( why ): \n\n     print   why ,   \"Good job!\" \n     exit ( 0 )   # launch system function exit \n     # exit(0) is neutral \n     # exit(1) is an error, could be a useful warning \n     # exit(2) or others like exit(100) are other warnings, or different messages  def   start (): \n\n     print   \"You are in a dark room.\" \n     print   \"There is a door to your right and left.\" \n     print   \"Which one do you take: left or right?\" \n\n     choice   =   raw_input ( \"Write 'left' or 'right'> \" )   # variable \n\n     if   choice   ==   \"left\" :   # variable check, exact \n         bear_room ()   # launch function bear_room \n     elif   choice   ==   \"right\" :   # variable check, exact \n         cthulhu_room () \n     else : \n         dead ( \"You stumble around the room until you starve.\" )  start ()   # launch the chain reaction     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 You are in a dark room.\nThere is a door to your right and left.\nWhich one do you take: left or right?\nWrite 'left' or 'right'> left\nThere is bear here.\nThe bear has a bunch of honey.\nThe fat bear is in front of another door.\nHow are you going to move the bear?\nWrite 'take honey', 'taunt bear' or 'open door'> taunt bear\nThe bear has moved from the door. You can go thought it now.\nWrite 'take honey', 'taunt bear' or 'open door'> open door\nThis room is full of gold. How much do you take?\nWrite any number from 0 to 100> 63\nMan, learn to type a number. Good job!\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 0    There are multiple scenarios to try\u2026",
            "title": "Exercise 34, Accessing Elements of Lists"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-38-doing-things-to-lists",
            "text": "~ list, index, add, remove, delete, extract~  1\n2\n3\n4\n5 ten_things   =   \"Apples Oranges Crows Telephones Light Sugar\"  print   \"ten_things:\" ,   ten_things , \", not a list\"  print   \"Wait there are not 10 things is that list. Let's fix that.\"    1\n2 ten_things :   Apples   Oranges   Crows   Telephones   Light   Sugar   ,   not   a   list  Wait   there   are   not   10   things   is   that   list .   Let ' s   fix   that .    1\n2\n3 stuff   =   ten_things . split ( ' ' )   # variable ten_things, method split  print   \"stuff:\" ,   stuff , \", a list\"    1 stuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar'] , a list   1\n2\n3 more_stuff   =   [ \"Day\" ,   \"Night\" ,   \"Song\" ,   \"Frisbee\" ,   \"Corn\" ,   \"Banana\" ,   \"Girl\" ,   \"Boy\" ]   # list variable  print   \"more_stuff:\" ,   more_stuff , \", a list\"    1 more_stuff: ['Day', 'Night', 'Song', 'Frisbee', 'Corn', 'Banana', 'Girl', 'Boy'] , a list    Most of the time, a for-loop is better than a while-loop.  A while-loop is better when there is a test, a condition.   1\n2\n3\n4\n5\n6\n7\n8 while   len ( stuff )   !=   10 : \n     next_one   =   more_stuff . pop ()   # load a variable with another variable, method pop, pop means extracting 1 item from a list variable, the last item in the list \n     print   \"Adding: \" ,   next_one   # show the content \n     stuff . append ( next_one )   # variable stuff add 1-item list variable; the loop will go as long as stuff has less than 10 items   \n     print   \"stuff:\" ,   stuff \n     print   \"There are  %d  items now.\"   %   len ( stuff )   # length of stuff or the number of items in it  print   \"There we go: \" ,   stuff     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 Adding :    Boy  stuff :   [ 'Apples' ,   'Oranges' ,   'Crows' ,   'Telephones' ,   'Light' ,   'Sugar' ,   'Boy' ]  There   are   7   items   now .  Adding :    Girl  stuff :   [ 'Apples' ,   'Oranges' ,   'Crows' ,   'Telephones' ,   'Light' ,   'Sugar' ,   'Boy' ,   'Girl' ]  There   are   8   items   now .  Adding :    Banana  stuff :   [ 'Apples' ,   'Oranges' ,   'Crows' ,   'Telephones' ,   'Light' ,   'Sugar' ,   'Boy' ,   'Girl' ,   'Banana' ]  There   are   9   items   now .  Adding :    Corn  stuff :   [ 'Apples' ,   'Oranges' ,   'Crows' ,   'Telephones' ,   'Light' ,   'Sugar' ,   'Boy' ,   'Girl' ,   'Banana' ,   'Corn' ]  There   are   10   items   now .  There   we   go :    [ 'Apples' ,   'Oranges' ,   'Crows' ,   'Telephones' ,   'Light' ,   'Sugar' ,   'Boy' ,   'Girl' ,   'Banana' ,   'Corn' ]     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 print   \"Let's do some things with stuff.\"  # print and pop choosen items according to the index  # could also be random index values!!!  # could reorder the list before (ascending, descending)   print   stuff [ 1 ]   # the 2nd item  print   stuff [ 2 ]   # the 3rd item  print   stuff [ - 1 ]   # the last item  print   stuff [ - 2 ]  print   stuff . pop ()   # pop the last item  print   stuff . pop ( 0 )   # pop the first item  print   stuff . pop ( 1 )   # pop the 2nd item  print   stuff . pop ( - 1 )   # pop the last item  print   ' ' . join ( stuff )   # var.split(' ') vs ' '.join(var), concatenate the list  print   '#' . join ( stuff [ 3 : 5 ])   # add a character at position 3 and 4 (4th, 5th, excluding the last)      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 Let's do some things with stuff.\nOranges\nCrows\nCorn\nBanana\nCorn\nApples\nCrows\nBanana\nOranges Telephones Light Sugar Boy Girl\nSugar#Boy",
            "title": "Exercise 38, Doing Things to Lists"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-39-dictionaries-oh-lovely-dictionaries",
            "text": "~ dictionary~  1\n2\n3\n4 things   =   [ 'a' , 'b' , 'c' , 'd' ]   # list  print   things  print   things [ 1 ]    1\n2 ['a', 'b', 'c', 'd']  b     Change an element.   1\n2 things [ 1 ]   =   'z'  print   things    1 ['a', 'z', 'c', 'd']    A dictionary has keys associated with values.   Order does not matter.   If you supply the key, you will get the value.   1\n2\n3\n4\n5\n6 stuff   =   { 'name'   :   'Zed' , 'age'   :   '39' , 'height'   :   8   *   12   +   2 }   # a dictionary  print   stuff  print   stuff [ 'name' ]  print   stuff [ 'age' ]  print   stuff [ 'height' ]    1\n2\n3\n4 {'age': '39', 'name': 'Zed', 'height': 98}\nZed\n39\n98    Add an element.   1\n2\n3 stuff [ 'city' ]   =   \"San Francisco\"  print   stuff [ 'city' ]  print   stuff    1\n2 San Francisco\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}    Add and remove an element.   1\n2\n3\n4\n5 stuff [ 'color' ]   =   \"blue\"  print   stuff  del   stuff [ 'color' ]  print   stuff    1\n2 {'color': 'blue', 'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}    If the value does not exist when you call it, it will turn out an error. Instead, write it this way:  print \"%r\" % stuff.get('color',None) .   If it\u2019s not existant, it will return \u2018None\u2019 or a value by default   1 print   stuff [ 'state' ]   \n    ---------------------------------------------------------------------------  1\n2\n3\n4\n5\n6\n7 KeyError                                  Traceback (most recent call last)\n\n<ipython-input-69-f211ffe8fe02> in <module>()\n----> 1 print stuff['state']\n\n\nKeyError: 'state'   1 print   \" %r \"   %   stuff . get ( 'color' ,   None )    1 None    Change an element.   1\n2\n3\n4 print   stuff [ 'age' ]  stuff [ 'age' ]   =   400  print   stuff [ 'age' ]    1\n2 39\n400    Extract with the index.   1\n2\n3\n4\n5\n6 stuff [ 1 ]   =   \"Wow\"  stuff [ 2 ]   =   \"Neato\"  print   stuff [ 1 ]  print   stuff [ 2 ]  print   stuff   # new items won't be in order    1\n2\n3 Wow\nNeato\n{'city': 'San Francisco', 2: 'Neato', 'name': 'Zed', 1: 'Wow', 'age': 400, 'height': 98}    Delete an element (according to the index).   1\n2\n3\n4 del   stuff [ 1 ]  del   stuff [ 2 ]  print   stuff    1 {'city': 'San Francisco', 'name': 'Zed', 'age': 400, 'height': 98}    Create a mapping of state to abbreviation.   1\n2\n3\n4\n5\n6\n7 states   =   { \n     'Oregon' :   'OR' , \n     'Florida' :   'FL' , \n     'California' :   'CA' , \n     'New York' :   'NY' , \n     'Michigan' :   'MI'  }     Create a basic set of states and some cities in them.   1\n2\n3\n4\n5 cities   =   { \n     'CA' :   'San Francisco' , \n     'MI' :   'Detroit' , \n     'FL' :   'Jacksonville'  }     Add some key:value to dictionary cities.   1\n2 cities [ 'NY' ]   =   'New York'  cities [ 'OR' ]   =   'Portland'     Print out some cities.   1\n2\n3\n4 print   \"Dictionary 'cities': \" ,   cities  print   '-'   *   10  print   \"NY State has: \" ,   cities [ 'NY' ]   # call the key  print   \"OR State has: \" ,   cities [ 'OR' ]   # get the value    1\n2\n3\n4 Dictionary 'cities':  {'FL': 'Jacksonville', 'CA': 'San Francisco', 'MI': 'Detroit', 'OR': 'Portland', 'NY': 'New York'}\n----------\nNY State has:  New York\nOR State has:  Portland    Print some states.   1\n2\n3\n4 print   \"Dictionary 'states': \" ,   states  print   '-'   *   10  print   \"Michigan's abbreviation is: \" ,   states [ 'Michigan' ]  print   \"Florida's abbrebiation is: \" ,   states [ 'Florida' ]    1\n2\n3\n4 Dictionary 'states':  {'California': 'CA', 'Michigan': 'MI', 'New York': 'NY', 'Florida': 'FL', 'Oregon': 'OR'}\n----------\nMichigan's abbreviation is:  MI\nFlorida's abbrebiation is:  FL    Print a dictionary in dictionary.   1\n2\n3 print   \"Michigan has: \" ,   cities [ states [ 'Michigan' ]]  # is like states['Michigan'], then cities['MI']  print   \"florida has: \" ,   cities [ states [ 'Florida' ]]    1\n2 Michigan has:  Detroit\nflorida has:  Jacksonville    Print every state abbreviation.   1\n2\n3\n4 print   \"Enumerate Dictionary 'states', key:value...\"  for   state ,   abbrev   in   states . items (): \n     print   \" %s  is abbreviated  %s \"   %   ( state ,   abbrev )  # state = 1st item = key, abbrev = 2nd item = value    1\n2\n3\n4\n5\n6 Enumerate Dictionary 'states', key:value...\nCalifornia is abbreviated CA\nMichigan is abbreviated MI\nNew York is abbreviated NY\nFlorida is abbreviated FL\nOregon is abbreviated OR    Print every city in state.   1\n2\n3 print   \"Enumerate Dictionary 'cities', key:value...\"  for   abbrev ,   city   in   cities . items (): \n     print   \" %s  has the city  %s \"   %   ( abbrev ,   city )       1\n2\n3\n4\n5\n6 Enumerate Dictionary 'cities', key:value...\nFL has the city Jacksonville\nCA has the city San Francisco\nMI has the city Detroit\nOR has the city Portland\nNY has the city New York    Now do both at the same time.   1\n2\n3\n4 print   \"Enumerate both dictionaries...\"  for   state ,   abbrev   in   states . items (): \n     print   \" %s  state is abbreviated  %s  and has city  %s \"   %   ( state ,   abbrev ,   cities [ abbrev ])  # state California gives abbrev CA, inside cities gives San Francisco       1\n2\n3\n4\n5\n6 Enumerate both dictionaries...\nCalifornia state is abbreviated CA and has city San Francisco\nMichigan state is abbreviated MI and has city Detroit\nNew York state is abbreviated NY and has city New York\nFlorida state is abbreviated FL and has city Jacksonville\nOregon state is abbreviated OR and has city Portland    get()  seek a key, whether it exists or not.   1\n2\n3\n4 state   =   states . get ( 'Texas' )   # extract  if   not   state : \n     print   \"Sorry, no Texas.\"    1 Sorry, no Texas.    Get a city with a default value.   1\n2 city   =   cities . get ( 'TX' ,   'Does Not Exist' )  print   \"The city for the state 'TX' is:  %s \"   %   city    1 The city for the state 'TX' is: Does Not Exist    Let\u2019s step up the above operations.  Module  hashmap.py  works through a dictionary.   Module  ex39_test.py  contains dictionaries (just like the above).  In Python, we would run module  ex39_test.py .   The module would begin by importing module  hashmap.py  to use its methods and perform operations.  Consult the manual.",
            "title": "Exercise 39, Dictionaries, Oh Lovely Dictionaries"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-40-modules-classes-and-objects",
            "text": "1\n2\n3 mystuff   =   { 'apple' :   'I AM APPLES' }  print   mystuff [ 'apple' ]   # get X from Y    1 I AM APPLES    You can import a file with functions and variables from a another module.  You can access the functions (methods) and variables from this other module.  Both files must be in the same directory, otherwise, specify the path as well.   1\n2\n3\n4\n5\n6\n7\n8\n9 # %load ex40.py  def   apple (): \n\n     print   \"I AM APPLES!\"  # this is just a variable  tangerine   =   \"Living reflection of a dream\"  apple ()    1 % run   ex40 . py    1 I AM APPLES!   1\n2\n3\n4\n5 import   ex40  ex40 . apple ()  print   ex40 . tangerine    1\n2 I AM APPLES!\nLiving reflection of a dream   1\n2\n3 mystuff [ 'new' ]   =   ex40 . tangerine  print   mystuff [ 'new' ]    1 Living reflection of a dream   1\n2\n3\n4\n5\n6 import   ex40  thing   =   ex40  thing . apple ()  print   thing . tangerine    1\n2\n3 I AM APPLES!\nI AM APPLES!\nLiving reflection of a dream    Use a class instead of an imported module.  Remember: class method = class function.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44 class   Song ( object ): \n\n\n     def   __init__ ( self ,   lyrics ):   # instantiation and shortcut for a creating a variable \n         self . lyrics   =   lyrics   # the variable could be equal to a text, a number or a variable \n\n     def   sing_me_a_song ( self ):   # create a class function \n         for   line   in   self . lyrics : \n             print   line  # instance              happy_bday   =   Song ([ \"Happy birthday to you\" , \n                    \"I don't want to get sued\" , \n                    \"So I'll stop right there\" ])  # instance  bulls_on_parade   =   Song ([ \"They rally around tha family\" , \n                         \"With pockets full of shells\" ])  # instance  au_clair   =   Song ([ \"Au clair de la lune\" , \n                  \"Mon ami Pierrot\" , \n                  \"Prete-moi ta plume\" , \n                  \"Pour ecrire un mot\" ])  # not an instance!!!  frere_jacques   =   [ \"Frere Jacques (bis)\" , \n                  \"Dormez-vous (bis)\" , \n                  \"Sonnez les matines (bis)\" , \n                  \"Ding-din-don (bis)\" ]  # instance  frere   =   Song ([ \"Frere Jacques (bis)\" , \n               \"Dormez-vous (bis)\" , \n               \"Sonnez les matines (bis)\" , \n               \"Ding-din-don (bis)\" ])  # not a class function  def   chante_moi ( paroles ):   # create a function \n\n     for   ligne   in   paroles : \n         print   ligne     Invoke an instance.   1 happy_bday . sing_me_a_song ()    1\n2\n3 Happy birthday to you\nI don't want to get sued\nSo I'll stop right there    Again.   1 bulls_on_parade . sing_me_a_song ()    1\n2 They rally around tha family\nWith pockets full of shells   Write  instance.class function / instance.class method  1 au_clair . sing_me_a_song ()    1\n2\n3\n4 Au clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot    Write the method the other around:  Class.class_function() / Class.class_method() .   1\n2 #au_clair.sing_me_a_song()  Song . sing_me_a_song ( au_clair )    1\n2\n3\n4 Au clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot    This function is independent.  frere_jacques.chante_moi()  can\u2019t be!!!   1 chante_moi ( frere_jacques )    1\n2\n3\n4 Frere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)    It looks like  Class.class_function() / Class.class_method()   1 Song . sing_me_a_song ( frere )    1\n2\n3\n4 Frere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)",
            "title": "Exercise 40, Modules, Classes, and Objects"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-41-learning-to-speak-object-oriented",
            "text": "Object-oriented programming (oop).  The script below ( ex41.py ) imports a word list from a text file ( ex41_words.txt ).  The script is a drill for learning oop.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83 import   random  import   sys  ## WORD_URL = \"http://learncodethehardway.org/words.txt\" # read a file http://learncodethehardway.org/words.txt  WORD_TXT   =   \"ex41_words.txt\"  WORDS   =   []  # dictionary {\"Python\": \"English\"}  PHRASES   =   { \n     \"class  %% %( %% %):\" : \n         \"Make a class named  %% % that is-a  %% %.\" , \n     \"class  %% %(object): \\n\\t def __init__(self, ***):\" : \n         \"class  %% % has-a __init__ that takes self and *** parameters.\" , \n     \"class  %% %(object): \\n\\t def ***(self, @@@):\" : \n         \"class  %% % has-a function named *** that takes self and @@@ parameters.\" , \n     \"*** =  %% %()\" : \n         \"Set *** to an instance of class  %% %.\" , \n     \"***.***(@@@)\" : \n         \"From *** get the *** function, and call it with parameters self, @@@.\" , \n     \"***.*** = '***'\" : \n         \"From *** get the *** attribute and set it to '***'.\"  }  # do they want to drill phrases first  if   len ( sys . argv )   ==   2   and   sys . argv [ 1 ]   ==   \"English\" : \n     PHRASE_FIRST   =   True  else : \n     PHRASE_FIRST   =   False  # load up the words from the website  ## for word in urlopen(WORD_URL).readlines():  for   word   in   open ( WORD_TXT ,   \"r\" ) . readlines (): \n     WORDS . append ( word . strip ())  def   convert ( snippet ,   phrase ):   # 'list comprehension', reseach on the Internet \n\n     class_names   =   [ w . capitalize ()   for   w   in \n                     random . sample ( WORDS ,   snippet . count ( \" %% %\" ))] \n     other_names   =   random . sample ( WORDS ,   snippet . count ( \"***\" )) \n     results   =   [] \n     param_names   =   [] \n\n     for   i   in   range ( 0 ,   snippet . count ( \"@@@\" )): \n         param_count   =   random . randint ( 1 , 3 ) \n         param_names . append ( ', ' . join ( random . sample ( WORDS ,   param_count ))) \n\n     for   sentence   in   snippet ,   phrase : \n         result   =   sentence [:] \n\n         # fake class names \n         for   word   in   class_names : \n             result   =   result . replace ( \" %% %\" ,   word ,   1 ) \n\n         # fake other names \n         for   word   in   other_names : \n             result   =   result . replace ( \"***\" ,   word ,   1 ) \n\n         # fake parameter lists \n         for   word   in   param_names : \n             result   =   result . replace ( \"@@@\" ,   word ,   1 ) \n\n         results . append ( result ) \n\n     return   results  # keep going until until they hit CTRL-D  try : \n     while   True : \n         snippets   =   PHRASES . keys () \n         random . shuffle ( snippets ) \n\n         for   snippet   in   snippets : \n             phrase   =   PHRASES [ snippet ] \n             question ,   answer   =   convert ( snippet ,   phrase ) \n             if   PHRASE_FIRST : \n                 question ,   answer   =   answer ,   question \n\n             print   question \n\n             raw_input ( \"> \" ) \n             print   \"ANSWER:  %s \\n\\n \"   %   answer  except   EOFError : \n     print   \" \\n Bye\"    1\n2\n3\n4\n5\n6\n7\n8\n9 alarm . deer ( disgust ,   brass )  >   deer   is   a   Class   alarm   function   that   takes   arguments   digust   and   brass  ANSWER :  From   alarm   get   the   deer   function ,   and   call   it   with   parameters   self ,   disgust ,   brass .  class   Building ( Blood ) :  >   etc  ANSWER :  Make   a   class   named   Building   that   is - a   Blood .  bucket   =   Berry ()      Sample of the original word list, 10 out of 503:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 text\naccount\nachiever\nactor\naddition\nadjustment\nadvertisement\nadvice\naftermath\nagreement\nairplane     Same script, but the list of word comes  from the Internet.   A note on the script:  The use of constant variable such as WORD_URL (such variable should not be modified).  A constant variable can be anything from a number, a string to a dictionary.  The use of  try/except  pair to check for errors. It is similar to the pair  if/else .  Therea are several types of errors.  EOFError  is just one type. Consult other (or online) manuals to find out about all the types of errors.      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82 import   random  from   urllib   import   urlopen  import   sys  WORD_URL   =   \"http://learncodethehardway.org/words.txt\"   # read a file  WORDS   =   []  # dictionary {\"Python\": \"English\"}  PHRASES   =   { \n     \"class  %% %( %% %):\" : \n         \"Make a class named  %% % that is-a  %% %.\" , \n     \"class  %% %(object): \\n\\t def __init__(self, ***)\" : \n         \"class  %% % has-a __init__ that takes self and *** parameters.\" , \n     \"class  %% %(object): \\n\\t def ***(self, @@@)\" : \n         \"class  %% % has-a function named *** that takes self and @@@ parameters.\" , \n     \"*** =  %% %()\" : \n         \"Set *** to an instance of class  %% %.\" , \n     \"***.***(@@@)\" : \n         \"From *** get the *** function, and call it with parameters self, @@@.\" , \n     \"***.*** = '***'\" : \n         \"From *** get the *** attribute and set it to '***'.\"  }  # do they want to drill phrases first  if   len ( sys . argv )   ==   2   and   sys . argv [ 1 ]   ==   \"English\" : \n     PHRASE_FIRST   =   True  else : \n     PHRASE_FIRST   =   False  # load up the words from the website  for   word   in   urlopen ( WORD_URL ) . readlines (): \n     WORDS . append ( word . strip ())  def   convert ( snippet ,   phrase ):   # 'list comprehension', reseach on the Internet \n\n     class_names   =   [ w . capitalize ()   for   w   in \n                     random . sample ( WORDS ,   snippet . count ( \" %% %\" ))] \n     other_names   =   random . sample ( WORDS ,   snippet . count ( \"***\" )) \n     results   =   [] \n     param_names   =   [] \n\n     for   i   in   range ( 0 ,   snippet . count ( \"@@@\" )): \n         param_count   =   random . randint ( 1 , 3 ) \n         param_names . append ( ', ' . join ( random . sample ( WORDS ,   param_count ))) \n\n     for   sentence   in   snippet ,   phrase : \n         result   =   sentence [:] \n\n         # fake class names \n         for   word   in   class_names : \n             result   =   result . replace ( \" %% %\" ,   word ,   1 ) \n\n         # fake other names \n         for   word   in   other_names : \n             result   =   result . replace ( \"***\" ,   word ,   1 ) \n\n         # fake parameter lists \n         for   word   in   param_names : \n             result   =   result . replace ( \"@@@\" ,   word ,   1 ) \n\n         results . append ( result ) \n\n     return   results  # keep going until until they hit CTRL-D  try : \n     while   True : \n         snippets   =   PHRASES . keys () \n         random . shuffle ( snippets ) \n\n         for   snippet   in   snippets : \n             phrase   =   PHRASES [ snippet ] \n             question ,   answer   =   convert ( snippet ,   phrase ) \n             if   PHRASE_FIRST : \n                 question ,   answer   =   answer ,   question \n\n             print   question \n\n             raw_input ( \"> \" ) \n             print   \"ANSWER:  %s \\n\\n \"   %   answer  except   EOFError : \n     print   \" \\n Bye\"",
            "title": "Exercise 41, Learning to Speak Object-Oriented"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-42-is-a-has-a-objects-and-classes",
            "text": "This exercise explains Exercise 41.   Inheritance:   is-a.  object.  instance of an object.  object of object.    has-a.  attribute.  not attribute.  object.       Animal is-a object.    1\n2\n3\n4 class   Animal ( object ): \n\n\n     pass     Dog is-a Animal, Animal is-a object.   1\n2\n3\n4\n5\n6\n7 class   Dog ( Animal ): \n\n\n     def   __init__ ( self ,   name ): \n\n     ## Cat has-a name \n         self . name   =   name     Cat is-a Animal, Animal is-a object.   1\n2\n3\n4\n5\n6 class   Cat ( Animal ): \n\n\n     def   __init__ ( self ,   name ): \n     ## Cat has-a name \n         self . name   =   name     Person is-a object.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 class   Person ( object ): \n\n\n     def   __init__ ( self ,   name ): \n\n     ## Person has-a name \n         self . name   =   name \n\n     ## Person has-a pet of some kind, but the pet is specifies elsewhere... \n         self . pet   =   None     Employee is-a Person, Person is-a object.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 class   Employee ( Person ): \n\n\n     def   __init__ ( self ,   name ,   salary ): \n\n     ## Employee has-a name, because Person has-a name \n     ## super: \n         super ( Employee ,   self ) . __init__ ( name ) \n     ## Employee has-a salary \n         self . salary   =   salary     Fish is-a object.   1\n2\n3\n4\n5 class   Fish ( object ): \n\n\n     ## no attributes like has-a name \n     pass     Salmon is-a Fish, Fish is-a object.   1\n2\n3\n4\n5 class   Salmon ( Fish ): \n\n\n     ## no attributes like has-a name \n     pass     Halibut is-a Fish, Fish is-a object.   1\n2\n3\n4\n5 class   Halibut ( Fish ): \n\n\n     ## no attributes like has-a name \n     pass     rover is-a instance of name, Dog has-a name.   1 rover   =   Dog ( \"Rover\" )     satan is-a instance of name, Cat has-a name.   1 satan   =   Cat ( \"Satan\" )     mary is-a instance of name, Person has-a name.   1 mary   =   Person ( \"Mary\" )     mary has-a Cat, Cat has-a name, satan, is-a Cat.   1 mary . pet   =   satan     frank is-a instance of name, salary, Employee has-a name, salary.   1 frank   =   Employee ( \"Frank\" ,   120000 )     frank has-a Dog, Dog has-a name, rover, is-a Dog.   1 frank . pet   =   rover     flipper is-a instance of Fish, Fish is-a object, both has-a not attributes.   1 flipper   =   Fish ()     crouse is-a instance of Salmon, Salmon is-a Fish; both has-a not attribute.   1 crouse   =   Salmon ()     harry is-a instance of Halibut, Halibut is-a Fish; both has-a not attribute.   1 harry   =   Halibut ()     Wrap-up.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 object\n    class Fish(object)\n        class Salmon(Fish)\n            crouse = Salmon()\n        class Halibut(Fish)\n            harry = Halibut()\n        flipper = Fish()\n    class Animal(object)\n        class Dog(Animal)\n            rover = Dog(\"Rover\") has-a name\n        class Cat(Animal)\n            satan = Cat(\"Satan\") has-a name\n    class Person(object)\n        mary.pet = satan has-a name, pet\n        class Employee(Person)\n            frank = Employee (\"Frank\", 120000) has-a name, salary\n            frank.pet = rover has-a pet    The concept of inheritance, and those of implicit inheritance, overridden inheritance, multiple inheritance, composition, alteration, super objects (or \u2018reinheritance\u2019) are explained in Exercise 44.",
            "title": "Exercise 42, Is-A, Has-A, Objects, and Classes"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-43-gothons-from-planet-percal-25",
            "text": "This Exercise is the first to prepare the final project (Exercise 52, the last chapter). Let\u2019s create a game, from A to Z. First, start by planning. This methodology is valuable for planning any kind of project or program.  Methodology  1- Write about the problem:  \u201cAliens have invaded a space ship and our hero has to go through a maze of rooms defeating them so he can escape into an escape pod to the planet below. The game will be more like a Zork or Adventure type game with text outputs and funny ways to die. The game will involve an engine that runs a map full of rooms or scenes. Each room will print its own description when the player enters it and then tell the engine what room to run next out of the map.\u201d  2- Describe each scene:   Death  This is when the player dies and should be something funny.    Central Corridor  This is the starting point and has a Gothon already standing there they have to defeat with a joke before continuing.    Laser Weapon Armory  This is where the hero gets a neutron bomb to blow up the ship before getting to the escape pod. It has a keypad the hero has to guess the number for.    The Bridge  Another battle scene with a Gothon where the hero places the bomb.    Escape Pod  Where the hero escapes but only after guessing the right escape pod.      3- Draw a map, write more descriptions.  4- Extract key concepts:   1 concept = 1 class.  Research them, deepen things.  Nouns = concepts = classes:  Alien  Player  Ship  Maze  Room  Scene  Gothon  Escape Pod  Planet  Map  Engine  Death  Central Corridor  Laser Weapon Armory  The Bridge    Verbs = functions.   This is par the PEP: classes should be in an explicit noun startin with a uppercased letter such as  class   Central   Corridor () . Functions should be verbs such as  def play(): .  5- Create a class Hierarchy and object Map   Make a class Hierarchy:  Map  Engine  Scene  Death  Central Corridor  Laser Weapon Armory  The Bridge  Escape Pod     PEP: I know from the description I\u2019m going to need a way to \u2018run\u2019 the engine, \u2018get the next scene\u2019 from the map, get the \u2018opening scene\u2019, and \u2018enter\u2019 a scene. I\u2019ll add those like this:   Map  next_scene  opening_scene  Engine  play  Scene  enter  Death  Central Corridor  Laser Weapon Armory  The Bridge  Escape Pod   All the scenes under another scene will inherit it; except \u2018enter\u2019: override it later.  6- Code the Classes and a Test to Run Them:   Turn:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 - Map\n    - next_scene (verb)\n    - opening scene (verb)\n- Engine\n    - play (verb)\n- Scene\n    - enter (verb)\n    - Death\n    - Central Corridor\n    - Laser Weapon Armory\n    - The Bridge\n    - Escape Pod    Into:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 class   Map ( object ) :  \n     def   __init__ ( self ,   start_scene ) : \n     def   next_scene ( self ,   start_scene ) :     \n     def   opening_scene ( self ) :  class   Engine ( object ) :  \n     def   __init__ ( self ,   scene_map ) : \n     def   play ( self ) :  class   Scene ( object ) : \n     def   enter ( self ) : \n\n     class   CentralCorridor ( Scene ) : \n         def   enter ( self ) : \n     class   LaserWeaponArmory ( Scene ) : \n         def   enter ( self ) : \n     class   TheBridge ( Scene ) : \n         def   enter ( self ) : \n     class   EscapePod ( Scene ) : \n         def   enter ( self ) : \n     class   Death ( Scene ) : \n         def   enter ( self ) :  a_map   =   Map ( 'central_corridor' )  a_game   =   Engine ( a_map )  a_game . play ()     Into:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54 class   Scene ( object ) : \n\n     def   enter ( self ) : \n         pass  class   Engine ( object ) : \n\n     def   __init__ ( self ,   scene_map ) : \n         pass \n     def   play ( self ) : \n         pass  class   Death ( Scene ) : \n\n     def   enter ( self ) : \n         pass  class   CentralCorridor ( Scene ) : \n\n     def   enter ( self ) : \n         pass \n\n\n     def   enter ( self ) : \n         pass  class   TheBridge ( Scene ) : \n     def   enter ( self ) : \n         pass  class   EscapePod ( Scene ) : \n\n     def   enter ( self ) : \n         pass  class   Map ( object ) : \n\n     def   __init__ ( self ,   start_scene ) : \n         pass \n     def   next_scene ( self ,   scene_name ) : \n         pass \n     def   opening_scene ( self ) : \n         pass  a_map   =   Map ( 'central_corridor' )  a_game   =   Engine ( a_map )  a_game . play ()     Start coding (first code skeleton).    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78 class   Scene ( object ): \n\n\n     def   enter ( self ): \n\n         pass  class   Engine ( object ): \n\n\n     def   __init__ ( self ,   scene_map ): \n\n         pass \n\n     def   play ( self ): \n\n         pass  class   Death ( Scene ): \n\n\n     def   enter ( self ): \n\n         pass  class   CentralCorridor ( Scene ): \n\n\n     def   enter ( self ): \n\n         pass  class   LaserWeaponArmory ( Scene ): \n\n\n     def   enter ( self ): \n\n         pass  class   TheBridge ( Scene ): \n\n\n     def   enter ( self ): \n\n         pass  class   EscapePod ( Scene ): \n\n\n     def   enter ( self ): \n\n         pass  class   Map ( object ): \n\n\n     def   __init__ ( self ,   start_scene ): \n\n         pass \n\n     def   next_scene ( self ,   scene_name ): \n\n         pass \n\n     def   opening_scene ( self ): \n\n         pass  a_map   =   Map ( 'central_corridor' )  a_game   =   Engine ( a_map )  a_game . play ()     Improve the code.     1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230 # import two functions from two libraries  from   sys   import   exit  from   random   import   randint  # class to generate child classes  class   Scene ( object ): \n\n     def   enter ( self ): \n\n         print   \"This scene is not yet configured. Subclass it and implement enter().\" \n         exit ( 1 )  class   Engine ( object ): \n\n     def   __init__ ( self ,   scene_map ): \n\n         self . scene_map   =   scene_map \n\n     def   play ( self ): \n\n         current_scene   =   self . scene_map . opening_scene ()   # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below \n\n         last_scene   =   self . scene_map . next_scene ( 'finished' )   # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below \n\n         while   current_scene   !=   last_scene : \n\n             next_scene_name   =   current_scene . enter ()   # function/method from class Scene(object) above \n\n             current_scene   =   self . scene_map . next_scene ( next_scene_name )   # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) \n\n         current_scene . enter ()   # use newly-created current_scene with function/method from class Scene(object) above  class   Death ( Scene ): \n\n     quips   =   [ \"You died.  You kinda suck at this.\" ,   \"Your mom would be proud...if she were smarter.\" ,   \"Such a louser.\" ,   \"I have a small puppy that's better at this.\" ]   # a list (variable) where a random method will extract an element \n\n     def   enter ( self ): \n\n         print   Death . quips [ randint ( 0 ,   len ( self . quips ) - 1 )]   # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list) \n         exit ( 1 )  class   CentralCorridor ( Scene ): \n\n     def   enter ( self ):   # the following will print whenever you call CentralCorridor.enter() function/method elsewhere \n\n         print   \"The Gothons of Planet Percal #25 have invaded your ship and destroyed\" \n         print   \"your entire crew.  You are the last surviving member and your last\" \n         print   \"mission is to get the neutron destruct bomb from the Weapons Armory,\" \n         print   \"put it in the bridge, and blow the ship up after getting into an \" \n         print   \"escape pod.\" \n         print   \" \\n \" \n         print   \"You're running down the central corridor to the Weapons Armory when\" \n         print   \"a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume\" \n         print   \"flowing around his hate filled body.  He's blocking the door to the\" \n         print   \"Armory and about to pull a weapon to blast you.\" \n\n         action   =   raw_input ( \"shoot!/dodge!/tell a joke> \" )  \n\n         if   action   ==   \"shoot!\" : \n             print   \"Quick on the draw you yank out your blaster and fire it at the Gothon.\" \n             print   \"His clown costume is flowing and moving around his body, which throws\" \n             print   \"off your aim.  Your laser hits his costume but misses him entirely.  This\" \n             print   \"completely ruins his brand new costume his mother bought him, which\" \n             print   \"makes him fly into an insane rage and blast you repeatedly in the face until\" \n             print   \"you are dead.  Then he eats you.\" \n             return   'death'   # input for class Map(object)'s dictionary of key:value; extract a function from another class \n\n         elif   action   ==   \"dodge!\" : \n             print   \"Like a world class boxer you dodge, weave, slip and slide right\" \n             print   \"as the Gothon's blaster cranks a laser past your head.\" \n             print   \"In the middle of your artful dodge your foot slips and you\" \n             print   \"bang your head on the metal wall and pass out.\" \n             print   \"You wake up shortly after only to die as the Gothon stomps on\" \n             print   \"your head and eats you.\" \n             return   'death'   # input for class Map(object)'s dictionary of key:value; extract a function from another class \n\n         elif   action   ==   \"tell a joke\" : \n             print   \"Lucky for you they made you learn Gothon insults in the academy.\" \n             print   \"You tell the one Gothon joke you know:\" \n             print   \"Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr.\" \n             print   \"The Gothon stops, tries not to laugh, then busts out laughing and can't move.\" \n             print   \"While he's laughing you run up and shoot him square in the head\" \n             print   \"putting him down, then jump through the Weapon Armory door.\" \n             return   'laser_weapon_armory'   # input for class Map(object)'s dictionary of key:value; extract a function from another class \n\n         else : \n             print   \"DOES NOT COMPUTE!\" \n             return   'central_corridor'   # input for class Map(object)'s dictionary of key:value; extract a function from another class  class   LaserWeaponArmory ( Scene ): \n\n     def   enter ( self ):   # the following will print whenever you call CentralCorridor.enter() function/method elsewhere \n\n         print   \"You do a dive roll into the Weapon Armory, crouch and scan the room\" \n         print   \"for more Gothons that might be hiding.  It's dead quiet, too quiet.\" \n         print   \"You stand up and run to the far side of the room and find the\" \n         print   \"neutron bomb in its container.  There's a keypad lock on the box\" \n         print   \"and you need the code to get the bomb out.  If you get the code\" \n         print   \"wrong 10 times then the lock closes forever and you can't\" \n         print   \"get the bomb.  The code is 3 digits.\" \n         code   =   \" %d%d%d \"   % ( 1 , 2 , 3 )   #% (randint(1,9), randint(1,9), randint(1,9)) \n         guess   =   raw_input ( \"[keypad]> \" ) \n         guesses   =   0 \n\n         while   guess   !=   code   and   guesses   <   10 : \n             print   \"BZZZZEDDD!\" \n             guesses   +=   1 \n             guess   =   raw_input ( \"[keypad]> \" ) \n\n         if   guess   ==   code : \n             print   \"The container clicks open and the seal breaks, letting gas out.\" \n             print   \"You grab the neutron bomb and run as fast as you can to the\" \n             print   \"bridge where you must place it in the right spot.\" \n             return   'the_bridge'   # input for class Map(object)'s dictionary of key:value; extract a function from another class \n         else : \n             print   \"The lock buzzes one last time and then you hear a sickening\" \n             print   \"melting sound as the mechanism is fused together.\" \n             print   \"You decide to sit there, and finally the Gothons blow up the\" \n             print   \"ship from their ship and you die.\" \n             return   'death'   # input for class Map(object)'s dictionary of key:value; extract a function from another class  class   TheBridge ( Scene ): \n\n     def   enter ( self ):   # the following will print whenever you call CentralCorridor.enter() function/method elsewhere \n\n         print   \"You burst onto the Bridge with the netron destruct bomb\" \n         print   \"under your arm and surprise 5 Gothons who are trying to\" \n         print   \"take control of the ship.  Each of them has an even uglier\" \n         print   \"clown costume than the last.  They haven't pulled their\" \n         print   \"weapons out yet, as they see the active bomb under your\" \n         print   \"arm and don't want to set it off.\" \n\n         action   =   raw_input ( \"throw the bomb/slowly place the bomb> \" ) \n\n         if   action   ==   \"throw the bomb\" : \n             print   \"In a panic you throw the bomb at the group of Gothons\" \n             print   \"and make a leap for the door.  Right as you drop it a\" \n             print   \"Gothon shoots you right in the back killing you.\" \n             print   \"As you die you see another Gothon frantically try to disarm\" \n             print   \"the bomb. You die knowing they will probably blow up when\" \n             print   \"it goes off.\" \n             return   'death' \n\n         elif   action   ==   \"slowly place the bomb\" : \n             print   \"You point your blaster at the bomb under your arm\" \n             print   \"and the Gothons put their hands up and start to sweat.\" \n             print   \"You inch backward to the door, open it, and then carefully\" \n             print   \"place the bomb on the floor, pointing your blaster at it.\" \n             print   \"You then jump back through the door, punch the close button\" \n             print   \"and blast the lock so the Gothons can't get out.\" \n             print   \"Now that the bomb is placed you run to the escape pod to\" \n             print   \"get off this tin can.\" \n             return   'escape_pod' \n         else : \n             print   \"DOES NOT COMPUTE!\" \n             return   \"the_bridge\"   # input for class Map(object)'s dictionary of key:value; extract a function from another class      class   EscapePod ( Scene ): \n\n     def   enter ( self ):   # the following will print whenever you call CentralCorridor.enter() function/method elsewhere \n\n         print   \"You rush through the ship desperately trying to make it to\" \n         print   \"the escape pod before the whole ship explodes.  It seems like\" \n         print   \"hardly any Gothons are on the ship, so your run is clear of\" \n         print   \"interference.  You get to the chamber with the escape pods, and\" \n         print   \"now need to pick one to take.  Some of them could be damaged\" \n         print   \"but you don't have time to look.  There's 5 pods, which one\" \n         print   \"do you take?\" \n\n         good_pod   =   1 #randint(1,5) \n         guess   =   raw_input ( \"[pod #]> \" ) \n\n         if   int ( guess )   !=   good_pod : \n             print   \"You jump into pod  %s  and hit the eject button.\"   %   guess \n             print   \"The pod escapes out into the void of space, then\" \n             print   \"implodes as the hull ruptures, crushing your body\" \n             print   \"into jam jelly.\" \n             return   'death'   # input for class Map(object)'s dictionary of key:value; extract a function from another class \n         else : \n             print   \"You jump into pod  %s  and hit the eject button.\"   %   guess \n             print   \"The pod easily slides out into space heading to\" \n             print   \"the planet below.  As it flies to the planet, you look\" \n             print   \"back and see your ship implode then explode like a\" \n             print   \"bright star, taking out the Gothon ship at the same\" \n             print   \"time.  You won!\" \n             return   'finished'   # input for class Map(object)'s dictionary of key:value; extract a function from another class  class   Finished ( Scene ): \n\n     def   enter ( self ): \n\n         print   \"You won! Good job.\" \n         return   'finished'   # input for class Map(object)'s dictionary of key:value; extract a function from another class  class   Map ( object ): \n\n     scenes   =   { \n         'central_corridor' :   CentralCorridor (), \n         'laser_weapon_armory' :   LaserWeaponArmory (), \n         'the_bridge' :   TheBridge (), \n         'escape_pod' :   EscapePod (), \n         'death' :   Death (), \n         'finished' :   Finished (), \n     } \n\n     def   __init__ ( self ,   start_scene ): \n\n         self . start_scene   =   start_scene \n\n     def   next_scene ( self ,   scene_name ): \n\n         val   =   Map . scenes . get ( scene_name ) \n         return   val \n\n     def   opening_scene ( self ): \n\n         return   self . next_scene ( self . start_scene )  a_map   =   Map ( 'central_corridor' )  a_game   =   Engine ( a_map )  a_game . play ()     Improve\u2026     1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285 # import two functions from two libraries  from   sys   import   exit  from   random   import   randint  import   time  import   math  # class to generate child classes  class   Scene ( object ): \n\n     def   enter ( self ): \n\n         print   \"This scene is not yet configured. Subclass it and implement enter().\" \n         exit ( 1 )  class   Engine ( object ): \n\n     def   __init__ ( self ,   scene_map ,   hero ): \n\n         self . scene_map   =   scene_map \n         self . hero   =   hero \n\n     def   play ( self ): \n\n         current_scene   =   self . scene_map . opening_scene ()   # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below \n\n         last_scene   =   self . scene_map . next_scene ( 'finished' )   # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below \n\n         while   current_scene   !=   last_scene :   # True: \n             print   \" \\n ----------\" \n             next_scene_name   =   current_scene . enter ( self . hero )   # function/method from class Scene(object) above \n\n             current_scene   =   self . scene_map . next_scene ( next_scene_name )   # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) \n\n         current_scene . enter ()   # use newly-created current_scene with function/method from class Scene(object) above  class   Death ( Scene ): \n\n     quips   =   [ \"Death1\" ,   \"Death2\" ,   \"Death3\" ,   \"Death4\" ]   # a list (variable) where a random method will extract an element \n\n     def   enter ( self ,   hero ): \n\n         print   Death . quips [ randint ( 0 ,   len ( self . quips ) - 1 )]   # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list) \n         exit ( 1 )  class   CentralCorridor ( Scene ): \n\n     def   enter ( self ,   hero ):   # the following will print whenever you call CentralCorridor.enter() function/method elsewhere \n\n         print   \"Enter. Select.\" \n         action   =   raw_input ( \"Pick one: a/b/c> \" ) . upper ()  \n\n         if   action   ==   \"A\" : \n             print   \"Ouch!\" \n             return   'death'   # input for class Map(object)'s dictionary of key:value; extract a function from another class \n\n         elif   action   ==   \"B\" : \n             print   \"Aye!\" \n             return   'death'   # input for class Map(object)'s dictionary of key:value; extract a function from another class \n\n         elif   action   ==   \"C\" : \n             print   \"Good.\" \n             return   'laser_weapon_armory'   # input for class Map(object)'s dictionary of key:value; extract a function from another class \n\n         else : \n             print   \"DOES NOT COMPUTE!\" \n             return   'central_corridor'   # input for class Map(object)'s dictionary of key:value; extract a function from another class  class   LaserWeaponArmory ( Scene ): \n\n     def   enter ( self ,   hero ):   # the following will print whenever you call CentralCorridor.enter() function/method elsewhere \n\n         print   \"Pick a 3-digit combinaison.\" \n         code   =   \" %d%d%d \"   % ( 1 , 2 , 3 )   #% (randint(1,9), randint(1,9), randint(1,9)) \n         print   code \n         guess   =   raw_input ( \"[keypad]> \" ) \n         guesses   =   0 \n\n         while   guess   !=   code   and   guesses   <   10 : \n             print   \"BZZZZEDDD!\" \n             guesses   +=   1 \n             guess   =   raw_input ( \"[keypad]> \" ) \n\n         if   guess   ==   code : \n             print   \"Click! Go!\" \n             return   'the_bridge'   # input for class Map(object)'s dictionary of key:value; extract a function from another class \n         else : \n             print   \"Boom!\" \n             return   'death'   # input for class Map(object)'s dictionary of key:value; extract a function from another class  class   TheBridge ( Scene ): \n\n     def   enter ( self ,   hero ):   # the following will print whenever you call CentralCorridor.enter() function/method elsewhere \n\n         print   \"Bridge enigma.\" \n\n         action   =   raw_input ( \"true/false> \" ) . upper () \n\n         if   action   ==   \"TRUE\"   or   action   ==   \"T\" : \n             print   \"It goes off.\" \n             return   'death' \n\n         elif   action   ==   \"FALSE\"   or   action   ==   \"F\" : \n             print   \"Escape.\" \n             return   'escape_pod' \n         else : \n             print   \"DOES NOT COMPUTE!\" \n             return   \"the_bridge\"   # input for class Map(object)'s dictionary of key:value; extract a function from another class      class   EscapePod ( Scene ): \n\n     def   enter ( self ,   hero ):   # the following will print whenever you call CentralCorridor.enter() function/method elsewhere \n\n         print   \"You rush!\" \n\n         good_pod   =   1   #randint(1,5) \n         guess   =   raw_input ( \"[Pick a pod #]> \" ) \n\n         if   int ( guess )   !=   good_pod : \n             print   \"Oups!\" \n             return   'death'   # input for class Map(object)'s dictionary of key:value; extract a function from another class \n         else : \n             print   \"Good choice!\" \n             return   'finished'   # input for class Map(object)'s dictionary of key:value; extract a function from another class  class   Win ( Scene ): \n\n     def   enter ( self ,   hero ): \n         print   \"You won! Good job.\" \n         return   'finished'   # input for class Map(object)'s dictionary of key:value; extract a function from another class \n         # exit(0)  class   Final ( Scene ): \n\n     def   enter ( self ,   hero ) \n\n         monster   =   Monster ( \"Gothon\" ) \n         print   \" %s , You now came across the final boss  %s ! Let's fight!!!\"   %   ( hero . name ,   monster . name ) \n         a_combat   =   Combat () \n         next_stage   =   a_combat . combat ( hero ,   monster ) \n         return   next_stage  class   Combat ( object ): \n\n     def   combat ( self ,   hero ,   monster ):   #combat between two roles \n\n         round   =   1 \n         while   True : \n             print   '=' * 30 \n             print   'round  %d '   %   round \n             print   '=' * 30 \n             print   \"Your HP:  %d \"   %   hero . hp \n             print   \" %s 's HP:  %d \"   %   ( monster . name ,   monster . hp ) \n             print   'Which action do you want to take?' \n             print   '-' * 10 \n             print   '1) attack - Attack the enemy' \n             print   '2) defend - Defend from being attacked, also will recover a bit' \n\n             try : \n                 action   =   int ( raw_input ( '> ' )) \n             except   ValueError : \n                 print   \"Please enter a number!!\" \n                 continue \n\n             # defending should be done before attacking \n             if   action   ==   2 : \n                 hero . defend () \n\n             # action of monster, 1/5 possibility it will defends \n             monster_action   =   randint ( 1 ,   6 ) \n             if   monster_action   ==   5 : \n                 monster . defend () \n\n             if   action   ==   1 : \n                 hero . attack ( monster ) \n             elif   action   ==   2 : \n                 pass \n             else : \n                 print   \"No such action!\" \n\n             if   monster_action   <   5 : \n                 monster . attack ( hero ) \n\n             # whether win or die \n             if   hero . hp   <=   0 : \n                 return   'death' \n\n             if   monster . hp   <=   0 : \n                 return   'win' \n\n             hero . rest () \n             monster . rest () \n\n             round   +=   1  class   Map ( object ): \n\n     scenes   =   { \n         'central_corridor' :   CentralCorridor (), \n         'laser_weapon_armory' :   LaserWeaponArmory (), \n         'the_bridge' :   TheBridge (), \n         'escape_pod' :   EscapePod (), \n         'death' :   Death (), \n         'final_fight' :   Final (), \n         'win' :   Win (), \n         'finished' :   Finished (), \n     } \n\n     def   __init__ ( self ,   start_scene ): \n\n         self . start_scene   =   start_scene \n\n     def   next_scene ( self ,   scene_name ): \n\n         val   =   Map . scenes . get ( scene_name ) \n         return   val \n\n     def   opening_scene ( self ): \n\n         return   self . next_scene ( self . start_scene )  class   human ( object ): \n\n     defending   =   0 \n\n     def   __init__ ( self ,   name ): \n\n         self . name   =   name \n\n     def   attack ( self ,   target ):   # attack the target \n\n         percent   =   0 \n         time . sleep ( 1 ) \n         if   target . defending   ==   1 : \n             percent   =   float ( self . power )   /   10.0   +   randint ( 0 ,   10 ) \n             target . hp   =   math . floor ( target . hp   -   percent ) \n         else : \n             percent   =   float ( self . power )   /   5.0   +   randint ( 0 ,   10 ) \n             target . hp   =   math . floor ( target . hp   -   percent ) \n         print   \" %s  attack  %s .  %s 's HP decreased by  %d  points.\"   %   ( self . name ,   target . name ,   target . name ,   percent ) \n\n     def   defend ( self ):   # be in the defending state \n\n         self . defending   =   1 \n         print   \" %s  is trying to defend.\"   %   self . name \n\n     def   rest ( self ):   # recover a bit after each round \n\n         if   self . defending   ==   1 : \n             percent   =   self . rate   *   10   +   randint ( 0 ,   10 ) \n         else : \n             percent   =   self . rate   *   2   +   randint ( 0 ,   10 ) \n         self . hp   +=   percent \n         print   \" %s 's HP increased by  %d  after rest.\"   %   ( self . name ,   percent ) \n         self . defending   =   0  class   Hero ( Human ):   # class for hero \n\n     hp   =   1000 \n     power   =   200 \n     rate   =   5  class   Monster ( Human ):   # class for monster \n\n     hp   =   5000 \n     power   =   250 \n     rate   =   5  a_map   =   Map ( 'central_corridor' )  a_hero   =   Hero ( 'Joe' )  a_game   =   Engine ( a_map )  a_game . play ()",
            "title": "Exercise 43, Gothons from Planet Percal #25"
        },
        {
            "location": "/Learn Python the Hard Way/#wrap-up",
            "text": "Draw a mindmap.  Draw a flowchart.  List all variables, data, other objects and add comments.  Build the modules (classes) and embed the primal code.  Refine.  Use a visualizing software.",
            "title": "Wrap up"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-44-inheritance-vs-composition",
            "text": "From the manual.",
            "title": "Exercise 44, Inheritance vs Composition"
        },
        {
            "location": "/Learn Python the Hard Way/#when-to-use-inheritance-or-composition",
            "text": "The question of \u2018inheritance versus composition\u2019 comes down to an attempt to solve the problem of reusable code.   You don\u2019t want to have duplicated code all over your software, since that\u2019s not clean and efficient.    Inheritance: solves this problem by creating a mechanism for you to have implied features in base classes.  Composition: solves this by giving you modules and the ability to call functions in other classes.   If both solutions solve the problem of reuse, then which one is appropriate in which situations? The answer is incredibly subjective, but I\u2019ll give you my three guidelines for when to do which:   Avoid multiple Inheritance at all costs, as it\u2019s too complex to be reliable. If you\u2019re stuck with it, then be prepared to know the class hierarchy and spend time finding where everything is coming from.  Use Composition to package code into modules that are used in many different unrelated places and situations.  Use Inheritance only when there are clearly related reusable pieces of code that fit under a single common concept or if you have to because of something you\u2019re using.   The thing to remember about object-oriented programming is that it is entirely a social convention programmers have created to package and share code. In that case, find out how they use things and then just adapt to the situation.",
            "title": "When to Use Inheritance or Composition"
        },
        {
            "location": "/Learn Python the Hard Way/#function-style",
            "text": "~ pep~  Function = Method.  A class does things: name it as if it\u2019s a command you are giving to the class. Same as  pop  is saying \u2018pop this off the list\u2019.  Keep functions small and simple (PEP).  Class Style   Use the camel case:  SuperGoldFactory .  Minimize what  __init__  does. It should be simple to use.  Other class functions use the underscore format:  my_awesome_hair .  Be consistent in how you organize your function arguments. Function 1 takes  (dog, cat, user) , function 2 should take  (dog, cat, user) . Unless there is a good reason.  Variable should be self-contained. Limit importing from modules or globals.  Always have a class  Name(object)  on top of all.   Code Style   Give your code vertical space to read.  Read you code out loud to test it. Change the difficult passages to improve readibility.  Imitate other coders: find you style.  Respect others\u2019s style; be a team player.   Good Comments   Describe why you are doing doing what you are doing.  Write for the others.  Write sentences.  Avoid clutering the code though. Short sentences, to the point.  Review your comments.",
            "title": "Function Style"
        },
        {
            "location": "/Learn Python the Hard Way/#composition",
            "text": "In this code I\u2019m not using the name Parent, since there is not a parent-child is-a relationship. This is a has-a relationship, where Child has-a Other that it uses to get its work done.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41 class   Other ( object ): \n\n     def   implicit ( self ): \n\n         print   \"OTHER implicit()\" \n\n     def   override ( self ): \n\n         print   \"OTHER override()\" \n\n     def   altered ( self ): \n\n         print   \"OTHER altered()\"  class   Child ( object ): \n\n     def   __init__ ( self ): \n\n         self . other   =   Other ()   # initialize this class with Other(), when an instance is created, it will inherit the class member variables, class functions... \n\n     def   implicit ( self ): \n\n         self . other . implicit ()   # call the other class function  \n\n     def   override ( self ): \n\n         print   \"CHILD override()\" \n\n     def   altered ( self ): \n\n         print   \"CHILD, BEFORE OTHER altered()\" \n         self . other . altered ()   # call the other class function \n         print   \"CHILD, AFTER OTHER altered()\"  son   =   Child ()   # instance  son . implicit ()  son . override ()  son . altered ()",
            "title": "Composition"
        },
        {
            "location": "/Learn Python the Hard Way/#implicit-inheritance",
            "text": "Actions on the child imply an action on the parent.  The use of pass under the  class   Child :  is how you tell Python that you want an empty block. This creates a class named  Child  but says that there\u2019s nothing new to define in it. Instead it will inherit all of its behavior from  Parent .  If you put functions in a base class (i.e.,  Parent ) then all subclasses (i.e.,  Child ) will automatically get those features. Very handy for repetitive code you need in many classes.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 class   Parent ( object ): \n\n     def   implicit ( self ): \n\n         print   \"PARENT implicit()\"  class   Child ( Parent ): \n\n     pass  dad   =   Parent ()  son   =   Child ()",
            "title": "Implicit Inheritance"
        },
        {
            "location": "/Learn Python the Hard Way/#inherit-from-both-classes",
            "text": "Python has to look-up the possible function in the class hierarchy for both  Child  and  BadStuff , but it needs to do this in a consistent order. To do this Python uses \u201cmethod resolution order\u201d (MRO) and an algorithm called C3 to get it straight.  Because the MRO is complex and a well-defined algorithm is used, Python can\u2019t leave it to you to get the MRO right. Instead, Python gives you the  super()  function, which handles all of this for you in the places that you need the altering type of actions as I did in Child.altered. With  super()  you don\u2019t have to worry about getting this right, and Python will find the right function for you.  1\n2\n3 class   SuperFun ( Child ,   BadStuff ): \n\n     pass",
            "title": "Inherit from both Classes"
        },
        {
            "location": "/Learn Python the Hard Way/#override-explicitly",
            "text": "Actions on the child override the action on the parent.  As you can see, it runs the  Parent.override  function because that variable (dad) is a Parent. But it also runs   Child.override  messages because son is an instance of  Child  and  Child  overrides that function by defining its own version.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 class   Parent ( object ): \n\n     def   override ( self ): \n         print   \"PARENT override()\"  class   Child ( Parent ): \n\n     def   override ( self ): \n\n         print   \"CHILD override()\"  dad   =   Parent ()  son   =   Child ()  dad . override ()  son . override ()",
            "title": "Override Explicitly"
        },
        {
            "location": "/Learn Python the Hard Way/#alter-before-or-after",
            "text": "Actions on the child alter the action on the parent.  son.altered()  overrides Parent.altered the  Child.altered  version runs, and line 9 executes like you\u2019d expect. In this case I want to do a before and after, I want to use super to get the  Parent.altered  version. I call  super(Child, self).altered() , which is aware of inheritance and will get the  Parent  class for you. You should be able to read this as \u201ccall super with arguments  Child  and  self , then call the function altered on whatever it returns.\u201d At this point, the  Parent.altered  version of the function runs, and that prints out the Parent message. Finally, this returns from the  Parent.altered  and the  Child.altered  function continues to print out the after message.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 class   Parent ( object ): \n\n     def   altered ( self ): \n\n         print   \"PARENT altered()\"  class   Child ( Parent ): \n\n     def   altered ( self ): \n\n         print   \"CHILD, BEFORE PARENT altered()\" \n         super ( Child ,   self ) . altered () \n         print   \"CHILD, AFTER PARENT altered()\"  dad   =   Parent ()  son   =   Child ()  dad . altered ()  son . altered ()",
            "title": "Alter Before or After"
        },
        {
            "location": "/Learn Python the Hard Way/#super",
            "text": "With  super ,  Child  reinherit from the  Parent .  The most common use of  super()  is actually in  __init__  functions in base classes. Then additional class functions.  1\n2\n3\n4\n5\n6 class   Child ( Parent ): \n\n     def   __init__ ( self ,   stuff ): \n\n         self . stuff   =   stuff \n         super ( Child ,   self ) . __init__ ()",
            "title": "Super"
        },
        {
            "location": "/Learn Python the Hard Way/#all-three-combined",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39 class   Parent ( object ): \n\n     def   override ( self ): \n\n         print   \"PARENT override()\" \n\n     def   implicit ( self ): \n\n         print   \"PARENT implicit()\" \n\n     def   altered ( self ): \n\n         print   \"PARENT altered()\"  class   Child ( Parent ): \n\n     def   override ( self ): \n\n         print   \"CHILD override()\" \n\n     def   altered ( self ): \n\n         print   \"CHILD, BEFORE PARENT altered()\" \n         super ( Child ,   self ) . altered () \n         print   \"CHILD, AFTER PARENT altered()\"  dad   =   Parent ()  son   =   Child ()  dad . implicit ()  son . implicit ()  dad . override ()  son . override ()  dad . altered ()  son . altered ()",
            "title": "All Three Combined"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-45-you-make-a-game",
            "text": "Use an existing project, Exercise 43 for example, and adapt it. This is a first draft for a project\u2026  1  Storyboarding tool.  Create a program that would question the user on its data and advise him on what would be the best graphics to use. Frame by frame, the user could build a presentation knowing slide 1 should be a histogram, slide 2 a scatter plot, etc.   2   Map  next_graph  opening comment (verb)    Engine  choose (verb)     Graph   proceed (verb) \n1. CC pie \n2. IC bar \n3. TSC column, line \n4. FDC column, line \n5. CorC bar, dot     opening comment   general comment  storytelling  pie  compare data, y, n  y, stacked bar chart  n, pie chart with a maximum of 6 items    bar  simple series of data or items: h deviation bar chart (tornado), divide A from B (winners from losers, good markets from bad markets): h deviation bar chart (tornado), mix of two components (portfolio A items vs portfolio B items):sliding h bar chart, high-low spreads:range h bar chart, correlation x1 and x2 with y (two products, two markets\u2026 with): paired bar chart, compare aspects (with or without discount, red or blue paint):group h bar chart, components of the total: subdivided h bar chart\u2026    column  p.37, 42    line  p.39, 44-45    surface  p. 40    dot  p.49     3   Create module  3graph_story  (proof of concept).  The module presents a story in 3 graphs, according to 3 sets of data.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 class   Map ( object ) : \n     def   __init__ ( self , start ) : \n     def   next ( self ,   start ) : \n     def   opening ( self ) :  class   Engine ( object ) : \n     def   __init__ ( self , graph_map ) : \n     def   choose ( self ) :  class   Graph ( object ) : \n     def   proceed ( self ) : \n\n     class   1 CC ( Graph ) : \n         def   enter ( self ) \n             pie \n     class   2 IC ( Graph ) : \n         def   enter ( self ) : \n             bar \n     class   3 TSC ( Graph ) : \n         def   enter ( self ) : \n             column \n             line \n     class   4 FDC ( Graph ) : \n         def   enter ( self ) : \n             column \n             line \n     class   5 CorC ( Graph ) : \n         def   enter ( self ) : \n             bar \n             dot    And so on. Consult the manual to find out more",
            "title": "Exercise 45, You Make a Game"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-46-a-project-skeleton",
            "text": "The \u2018skeleton\u2019 directory (see below) or the directory framework will have all the basics you need to get a new project up and running.   It will have your project layout, automated tests, modules, and install scripts.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 \\:.\n\u251c\u2500\u2500\u2500bin\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500docs\n\u251c\u2500\u2500\u2500NAME\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500tests\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u2514\u2500\u2500\u2500setup.py       \\:.  is the project parent directory or simply \u2018the\u2019 directory (its name is the project\u2019s name).  The directory is the place to be when launching scripts.  bin  is the main sub-directory. It contains the main script ( python bin/main.py ) for launching other scripts in the project; and launching tests as well. These script are often located in other sub-directories.  A sub-directory must be executable to import a module from it or execute a script in it: add an empty script called  __init__.py .  When a script is executed, it is compiled. Another script, with the extension  .pyc , appears. Same as for  __init__.pyc , as the sub-directory was executed (when a script import a script from another sub-directory for example).  tests  contains files to perform nose tests and unittests.  setup.py  is for documenting and distributing the project (when the project is compiled to be launched as a whole or frozen to be distributed).  You can add a  readme  file below (usually a text or markdown document).  The  docs  sub-directory contains all the project\u2019s documentation. It is more elaborate than the \u2018readme\u2019 file: manuals, explanations, logs, wikis, etc.  There can be other sub-directories for static such as images, web languages, etc.  Repeat this directory structure for every project.  To clean up the directory, in the bash:   1\n2\n3\n4 find . -name  \"*.pyc\"  -print  #display \nfind . -name  \"*.pyc\"  -exec rn {} \\;   1  remove\n\ngrep -r  \"NAME\"  *  #search within files     In Linux, before running any script, be sure to set the path to the project directory.   Bash:   1\n2\n3\n4 export   PYTHONPATH = . export   PYTHONPATH = $PYTHONPATH : $PWD  unset  PYTHONPATH  # to remove     In Windows, set the path in the environment variables. Otherwise, Python won\u2019t find the scripts.  PowerShell:   1 $env :PYTHONPATH  =   \" $env :PYTHONPATH;.\"     Or, on top of the Python code, below the shebang lnes, and before any other imports, add:   1\n2\n3 import   sys  sys . path   # to view  sys . path . append ( '.' )   # to set     Consult the manual to find out more.",
            "title": "Exercise 46, A Project Skeleton"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-47-automated-testing",
            "text": "",
            "title": "Exercise 47, Automated Testing"
        },
        {
            "location": "/Learn Python the Hard Way/#miscellaneous-notes",
            "text": "The project directory is \u2018ex47\u2019.  Test if you migrated the files correctly. In the bash:   1\n2 grep -r NAME *   # no traces of 'NAME', from 'skeleton' \nfind . -name  \"*.pyc\"  -exec rm  {}   \\;   # no trace of 'name'     When you launch a script, you launch it from the parent directory with  python bin/app.py .  In directory \u2018ex47\u2019, run tests with  python tests/BLAH_tests.py .   Consult the manual about testing. This is not covered in this notebook.   Testing must be done in the shell or in the bash. Make sure you\u2019re running the tests with nosetests not with just Python.   The important functions here are  assert_equal  which makes sure that variables you have set or paths you have built in a Room are actually what you think they are. If you get the wrong result, then nosetests will print out an error message so you can go figure it out.  In a script, when you import from another sub-directory, code:   1 from   ex47.game   import   Room     When the imported script is in the same sub-directory, code:   1 from   bin   import   Room     Consult the manual to find out more.",
            "title": "Miscellaneous notes"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-50-your-first-website",
            "text": "",
            "title": "Exercise 50, Your First Website"
        },
        {
            "location": "/Learn Python the Hard Way/#an-overview",
            "text": "Web framework for web projects.  Django (the real deal, but complicated), Flask (modest), Pyramid (scalable), etc.  Or the simple, yet powerful enough, web.py.  Exercises, from 50 to 52, are done with web.p",
            "title": "An overview"
        },
        {
            "location": "/LPTHW, Python Code Snippets/",
            "text": "CONTENT\n\n\nA Battleship Game\n\n\nAn Interactive Calendar\n\n\nA Gradebook for Students\n\n\nGuess Games\n\n\nRegex Tools\n\n\nRGB-HEX Converter\n\n\nProject DNA Analysis\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets. Python 2.\n\n\n\n\nA Battleship Game\n\u00b6\n\n\nbuild, board, grid, row, column, list, assign, random, value, loop, conditional, if, else, elif\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\n\nboard\n \n=\n \n[]\n\n\n\nfor\n \nx\n \nin\n \nrange\n(\n5\n):\n\n    \nboard\n.\nappend\n([\n\"O\"\n]\n \n*\n \n5\n)\n\n\n\ndef\n \nprint_board\n(\nboard\n):\n\n\n    \nfor\n \nrow\n \nin\n \nboard\n:\n\n        \nprint\n \n\" \"\n.\njoin\n(\nrow\n)\n\n\n\nprint\n \n\"\n\\n\nLet's play Battleship! You have 4 strikes to sink by ship.\n\\n\n\"\n\n\nprint_board\n(\nboard\n)\n\n\n\ndef\n \nrandom_row\n(\nboard\n):\n\n\n    \nreturn\n \nrandint\n(\n0\n,\n \nlen\n(\nboard\n)\n \n-\n \n1\n)\n\n\n\ndef\n \nrandom_col\n(\nboard\n):\n\n\n    \nreturn\n \nrandint\n(\n0\n,\n \nlen\n(\nboard\n)\n \n-\n \n1\n)\n\n\n\nship_row\n \n=\n \nrandom_row\n(\nboard\n)\n\n\nship_col\n \n=\n \nrandom_col\n(\nboard\n)\n\n\n#ship_row = 1 to test and fix to (1,1)\n\n\n#ship_col = 1\n\n\n\nfor\n \nturn\n \nin\n \nrange\n(\n5\n):\n\n    \nturn\n \n+=\n \n1\n\n    \nif\n \nturn\n \n==\n \n5\n:\n\n        \nprint\n \n\"\n\\n\nGame Over\"\n\n        \nprint\n \n\"The ship was here => I\n\\n\n\"\n\n        \nboard\n[\nship_row\n \n-\n \n1\n][\nship_col\n \n-\n \n1\n]\n \n=\n \n\"I\"\n\n        \nprint_board\n(\nboard\n)\n\n        \nbreak\n\n    \nelse\n:\n\n        \nprint\n \n\"\n\\n\nTurn\"\n,\n \nturn\n\n\n        \nguess_row\n \n=\n \nint\n(\nraw_input\n(\n\"Guess Row (1 to 5): \"\n))\n\n        \nguess_col\n \n=\n \nint\n(\nraw_input\n(\n\"Guess Col (1 to 5): \"\n))\n\n\n        \nif\n \n(\nguess_row\n \n==\n \nship_row\n)\n \nand\n \n(\nguess_col\n \n==\n \nship_col\n):\n\n            \nprint\n \n\"\n\\n\nCongratulations! You sank my battleship!\n\\n\n\"\n\n\n            \nguess_row\n \n=\n \nguess_row\n \n-\n \n1\n\n            \nguess_col\n \n=\n \nguess_col\n \n-\n \n1\n\n            \nboard\n[\nguess_row\n][\nguess_col\n]\n \n=\n \n\"S\"\n\n\n            \nprint_board\n(\nboard\n)\n\n            \nprint\n \n\"\n\\n\nGame Over\"\n\n            \nbreak\n\n\n        \nelif\n \n(\nguess_row\n \n<\n \n1\n \nor\n \nguess_row\n \n>\n \n5\n)\n \nor\n \n(\nguess_col\n \n<\n \n1\n \nor\n \nguess_col\n \n>\n \n5\n):\n\n            \nprint\n \n\"\n\\n\nOops, that's not even in the ocean.\n\\n\n\"\n\n\n        \nelif\n \nboard\n[\nguess_row\n \n-\n \n1\n][\nguess_col\n \n-\n \n1\n]\n \n==\n \n\"X\"\n:\n\n            \nprint\n \n\"\n\\n\nYou guessed that one already.\n\\n\n\"\n\n            \nprint_board\n(\nboard\n)\n\n\n        \nelse\n:\n\n            \nprint\n \n\"\n\\n\nYou missed my battleship!\n\\n\n\"\n\n            \nboard\n[\nguess_row\n \n-\n \n1\n][\nguess_col\n \n-\n \n1\n]\n \n=\n \n\"X\"\n\n            \nprint_board\n(\nboard\n)\n\n\n\n\n\n\n\nAn Interactive Calendar\n\u00b6\n\n\nadd, delete, update, exit, dictionary, loop, conditional, if, else, elif\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\nfrom\n \ntime\n \nimport\n \nsleep\n,\n \nstrftime\n\n\n\nhis_name\n \n=\n \nraw_input\n(\n\"What is your first name? \"\n)\n\n\nhis_name\n \n=\n \nstr\n(\nhis_name\n)\n\n\n# calendar will store the dates as keys and the events as values\n\n\n\ncalendar\n \n=\n \n{}\n\n\n\ndef\n \nwelcome\n():\n\n\n    \nprint\n(\n\"Welcome \"\n \n+\n \nhis_name\n \n+\n\".\"\n)\n\n\n    \nprint\n(\n\"Calendar starting...\"\n)\n\n    \nsleep\n(\n0.5\n)\n\n    \nprint\n(\n\"Today is: \"\n \n+\n \nstrftime\n(\n\"%A, %B \n%d\n, %Y\"\n))\n\n    \nprint\n(\n\"It is currently: \"\n \n+\n \nstrftime\n(\n\"%H:%M:%S\"\n))\n\n    \nsleep\n(\n0.5\n)\n\n\n\ndef\n \nstart_calendar\n():\n\n\n    \nwelcome\n()\n\n    \nprint\n(\n\"What would you like to do?\"\n)\n\n    \nprint\n(\ncalendar\n)\n\n    \nstart\n \n=\n \nTrue\n\n\n    \nwhile\n \nstart\n:\n\n        \nuser_choice\n \n=\n \nraw_input\n(\n\"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \"\n)\n.\nupper\n()\n\n\n        \nif\n \nuser_choice\n \n==\n \n'V'\n:\n \n# V\n\n            \nif\n \nlen\n(\ncalendar\n.\nkeys\n())\n \n<\n \n1\n:\n\n                \nprint\n(\n\"The calendar is empty\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ncalendar\n)\n\n\n        \nelif\n \nuser_choice\n \n==\n \n'U'\n:\n \n# U\n\n            \nif\n \nlen\n(\ncalendar\n.\nkeys\n())\n \n<\n \n1\n:\n\n                \nprint\n(\n\"The calendar is empty\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ncalendar\n)\n\n                \ndate\n \n=\n \nraw_input\n(\n\"What date? \"\n)\n\n                \nupdate\n \n=\n \nraw_input\n(\n\"Enter the update: \"\n)\n\n                \n# could be more control here...\n\n                \ncalendar\n[\ndate\n]\n \n=\n \nupdate\n \n# without checking if the date is valid or if it already exists (which could override things)!\n\n                \nprint\n(\n\"Successful!\"\n)\n\n                \nprint\n(\ncalendar\n)\n\n\n        \nelif\n \nuser_choice\n \n==\n \n'A'\n:\n \n# A\n\n            \nevent\n \n=\n \nraw_input\n(\n\"Enter event: \"\n)\n\n            \ndate\n \n=\n \nraw_input\n(\n\"Enter date (MM/DD/YYYY): \"\n)\n\n            \nif\n \n(\nlen\n(\ndate\n)\n \n>\n \n10\n \nor\n \nint\n(\ndate\n[\n6\n:])\n \n<\n \nint\n(\nstrftime\n(\n\"%Y\"\n))):\n \n# could be more control...\n\n                \nprint\n(\n\"Invalid date format.\"\n)\n\n                \ntry_again\n \n=\n \nraw_input\n(\n\"Try Again? 'Y' for Yes, 'N' for No: \"\n)\n.\nupper\n()\n\n                \nif\n \ntry_again\n \n==\n \n'Y'\n:\n\n                    \ncontinue\n \n#! break, continue, start is still True\n\n                \nelse\n:\n\n                    \nstart\n \n==\n \nFalse\n\n            \nelse\n:\n\n                \ncalendar\n[\ndate\n]\n \n=\n \nevent\n \n# without checking if the date is valid or if it already exists (which could override things)!\n\n                \nprint\n(\n\"Successful!\"\n)\n\n                \nprint\n(\ncalendar\n)\n\n\n        \nelif\n \nuser_choice\n \n==\n \n'D'\n:\n \n# D\n\n            \nif\n \nlen\n(\ncalendar\n.\nkeys\n())\n \n<\n \n1\n:\n\n                \nprint\n(\n\"The calendar is empty.\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ncalendar\n)\n\n                \nevent\n \n=\n \nraw_input\n(\n\"What event? \"\n)\n \n# could be more option like: What date?\n\n                \nfor\n \ndate\n \nin\n \ncalendar\n.\nkeys\n():\n\n                    \nif\n \nevent\n \n==\n \ncalendar\n[\ndate\n]:\n\n                        \ndel\n \ncalendar\n[\ndate\n]\n \n# del a[], [1], [\"a\"], [1:3], [5:], [:9], etc.\n\n                        \nprint\n(\n\"Deleted.\"\n)\n\n                        \nprint\n(\ncalendar\n)\n\n                    \nelse\n:\n\n                        \nprint\n(\n\"Incorrect.\"\n)\n\n\n        \nelif\n \nuser_choice\n \n==\n \n'X'\n:\n \n# X\n\n            \nstart\n \n=\n \nFalse\n\n\n        \nelse\n:\n\n            \nprint\n(\n\"Invalid command.\"\n)\n\n            \nbreak\n\n\n\nstart_calendar\n()\n\n\n\n\n\n\n\nA Gradebook for Students\n\u00b6\n\n\nstudents, marks, grades, compute, average, weighted\n\n\nFirst, create 3 dictionaries.\n\n\nSecond, add names, marks.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nlloyd\n \n=\n \n{\n\n    \n\"name\"\n \n:\n \n\"Lloyd\"\n,\n\n    \n\"homework\"\n \n:\n \n[\n90.0\n,\n \n97.0\n,\n \n75.0\n,\n \n92.0\n],\n\n    \n\"quizzes\"\n \n:\n \n[\n88.0\n,\n \n40.0\n,\n \n94.0\n],\n\n    \n\"tests\"\n \n:\n \n[\n75.0\n,\n \n90.0\n]\n\n\n}\n\n\n\nalice\n \n=\n \n{\n\n    \n\"name\"\n:\n \n\"Alice\"\n,\n\n    \n\"homework\"\n \n:\n \n[\n100.0\n,\n \n92.0\n,\n \n98.0\n,\n \n100.0\n],\n\n    \n\"quizzes\"\n \n:\n \n[\n82.0\n,\n \n83.0\n,\n \n91.0\n],\n\n    \n\"tests\"\n \n:\n \n[\n89.0\n,\n \n97.0\n]\n\n\n}\n\n\n\ntyler\n \n=\n \n{\n\n    \n\"name\"\n \n:\n \n\"Tyler\"\n,\n\n    \n\"homework\"\n \n:\n \n[\n0.0\n,\n \n87.0\n,\n \n75.0\n,\n \n22.0\n],\n\n    \n\"quizzes\"\n \n:\n \n[\n0.0\n,\n \n75.0\n,\n \n78.0\n],\n\n    \n\"tests\"\n \n:\n \n[\n100.0\n,\n \n100.0\n]\n\n\n}\n\n\n\n\n\n\n\nThird, make a list.\n\n\n1\n2\n3\n4\n5\n6\n7\nstudents\n=\n \n[\nlloyd\n,\n \nalice\n,\n \ntyler\n]\n\n\n\ncases\n \n=\n \n[\n\"homework\"\n,\n \n\"quizzes\"\n,\n \n\"tests\"\n]\n\n\n\nw_calc\n \n=\n \n[\n0.10\n,\n \n0.30\n,\n \n0.60\n]\n\n\n\nall_average\n \n=\n \n0.0\n\n\n\n\n\n\n\nPrint out.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nprint\n \n\"\n\\n\nStudents' Grades\"\n.\nupper\n()\n\n\n\nprint\n \n\"\"\n\n\n\nfor\n \nstudent\n \nin\n \nstudents\n:\n\n    \nprint\n \nstudent\n[\n\"name\"\n]\n.\nupper\n()\n\n    \nprint\n \n\"Homework\"\n\n    \nprint\n \nstudent\n[\n\"homework\"\n]\n\n    \nprint\n \n\"Quizzes\"\n\n    \nprint\n \nstudent\n[\n\"quizzes\"\n]\n\n    \nprint\n \n\"Tests\"\n\n    \nprint\n \nstudent\n[\n\"tests\"\n]\n\n    \nprint\n \n\"\"\n\n\n\n\n\n\n\nCompute averages.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\ndef\n \naverage\n(\nnumbers\n):\n\n\n    \ntotal\n \n=\n \nsum\n(\nnumbers\n)\n\n    \ntemp\n \n=\n \nfloat\n(\ntotal\n)\n \n/\n \nlen\n(\nnumbers\n)\n\n    \nreturn\n \ntemp\n\n\n\nprint\n \n\"Students' Averages\"\n.\nupper\n()\n\n\n\nprint\n \n\"\"\n\n\n\nfor\n \nc\n \nin\n \ncases\n:\n\n    \ncc\n \n=\n \nc\n.\nupper\n()\n\n    \nprint\n \ncc\n\n    \nfor\n \nstudent\n \nin\n \nstudents\n:\n\n        \nnumbers\n \n=\n \nstudent\n[\nc\n]\n\n        \ncalc\n \n=\n \nround\n(\naverage\n(\nnumbers\n),\n1\n)\n\n        \nprint\n \nstudent\n[\n\"name\"\n]\n\n        \nprint\n \ncalc\n\n    \nprint\n \n\"\"\n\n\n\n\n\n\n\nCompute weighted averages.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\ndef\n \nw_average\n(\nmarks\n):\n\n\n    \n#w_calc = [0.10, 0.30, 0.60]\n\n    \ns_calc\n \n=\n \n0\n\n    \nw\n \n=\n \n0\n\n    \nwhile\n \nw\n \n<\n \nlen\n(\nw_calc\n):\n\n        \ns_calc\n \n+=\n \nw_calc\n[\nw\n]\n \n*\n \nmarks\n[\nw\n]\n\n        \nw\n \n+=\n \n1\n\n    \nreturn\n \ns_calc\n\n\n\ndef\n \nget_letter_grade\n(\nscore\n):\n\n\n    \nif\n \nscore\n \n>=\n \n90\n:\n\n        \nreturn\n \n\"A\"\n\n    \nelif\n \nscore\n \n>=\n \n80\n:\n\n        \nreturn\n \n\"B\"\n\n    \nelif\n \nscore\n \n>=\n \n70\n:\n\n        \nreturn\n \n\"C\"\n\n    \nelif\n \nscore\n \n>=\n \n60\n:\n\n        \nreturn\n \n\"D\"\n\n    \nelse\n:\n\n        \nreturn\n \n\"F\"\n\n\n\ndef\n \nget_class_average\n(\nind\n):\n\n    \nclass_total\n \n=\n \nround\n(\nind\n \n/\n \nlen\n(\nstudents\n),\n \n1\n)\n\n    \nreturn\n \nclass_total\n\n\n\nprint\n \n\"Students' Weighted Average\"\n.\nupper\n()\n\n\n\nprint\n \n\" Ponderation [Homeworks, Quizzes, Tests]: [\"\n+\nstr\n(\nfloat\n(\nw_calc\n[\n0\n])\n*\n100\n)\n+\n\", \"\n+\nstr\n(\nfloat\n(\nw_calc\n[\n1\n])\n*\n100\n)\n+\n\", \"\n+\nstr\n(\nfloat\n(\nw_calc\n[\n2\n])\n*\n100\n)\n+\n\"]\"\n\n\n\nprint\n \n\"\"\n\n\n\nfor\n \nstudent\n \nin\n \nstudents\n:\n\n    \nprint\n(\nstudent\n[\n\"name\"\n]\n \n+\n \n\"'s marks are:\"\n)\n.\nupper\n()\n\n    \nl_calc\n \n=\n \n[]\n\n    \nfor\n \nc\n \nin\n \ncases\n:\n    \n        \nnumbers\n \n=\n \nstudent\n[\nc\n]\n\n        \ncalc\n \n=\n \nround\n(\naverage\n(\nnumbers\n),\n1\n)\n\n        \nl_calc\n.\nappend\n(\ncalc\n)\n\n    \nprint\n \nl_calc\n\n    \nprint\n(\n\"For a weighted average of:\"\n)\n\n    \nind_average\n \n=\n \nround\n(\nw_average\n(\nl_calc\n),\n1\n)\n\n    \nprint\n \nind_average\n\n    \nprint\n(\n\"Standing for a:\"\n)\n\n    \nprint\n \nget_letter_grade\n(\nind_average\n)\n\n    \nall_average\n \n+=\n \nind_average\n\n    \nprint\n \n\"\"\n\n\n\nprint\n(\n\"Finally, The class average is:\"\n)\n.\nupper\n()\n\n\nprint\n \nget_class_average\n(\nall_average\n)\n\n\n\n\n\n\n\nGuess Games\n\u00b6\n\n\nrandom, generate, number, conditional, if, else, ifel, loop\n\n\nGuess a number.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nimport\n \nrandom\n\n\n\nprint\n \n\"Lucky Numbers! 3 numbers will be generated.\"\n\n\nprint\n \n\"If one of them is a '5', you lose!\"\n\n\n\ncount\n \n=\n \n0\n\n\n\nwhile\n \ncount\n \n<\n \n3\n:\n\n    \nnum\n \n=\n \nrandom\n.\nrandint\n(\n1\n,\n \n6\n)\n\n    \nprint\n \nnum\n\n    \nif\n \nnum\n \n==\n \n5\n:\n\n        \nprint\n \n\"Sorry, you lose!\"\n\n        \nbreak\n\n    \ncount\n \n+=\n \n1\n\n\nelse\n:\n\n    \nprint\n \n\"You win!\"\n\n\n\n\n\n\n\nGuess a number (more).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\n\n# Generates a number from 1 through 10 inclusive\n\n\nrandom_number\n \n=\n \nrandint\n(\n1\n,\n \n10\n)\n\n\n\n# print random_number\n\n\nguesses_left\n \n=\n \n3\n\n\nprint\n \n\"Guess right!\"\n\n\n\nwhile\n \nguesses_left\n \n>\n \n0\n:\n\n    \nprint\n \n\"You have \"\n+\nstr\n(\nguesses_left\n)\n+\n\" attempts.\"\n\n    \nguess\n \n=\n \nraw_input\n(\n\"Guess a number from 1 to 10: \"\n)\n\n    \nif\n \nint\n(\nguess\n)\n \n==\n \nrandom_number\n:\n\n        \nprint\n \n\"You win!\"\n\n        \nbreak\n\n    \nelif\n \nguesses_left\n \n==\n \n1\n:\n\n        \nprint\n \n\"You lose.\"\n\n        \nbreak\n\n    \nelse\n:\n\n        \nguesses_left\n \n-=\n \n1\n\n        \nprint\n \n\"Try again.\"\n\n\n\n\n\n\n\nRoll a dice.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\nfrom\n \ntime\n \nimport\n \nsleep\n\n\n\ndef\n \nget_user_guess\n():\n\n\n    \nuser_guess\n \n=\n \nint\n(\nraw_input\n(\n\"Guess a number: \"\n))\n\n    \nreturn\n \nuser_guess\n\n\n\ndef\n \nroll_dice\n(\nnumber_of_sides\n):\n\n\n    \nfirst_roll\n \n=\n \nrandint\n(\n1\n,\n \nnumber_of_sides\n)\n\n    \nsecond_roll\n \n=\n \nrandint\n(\n1\n,\n \nnumber_of_sides\n)\n\n    \nmax_value\n \n=\n \nnumber_of_sides\n \n*\n \n2\n\n    \nprint\n \n\"The maximum value is: \"\n+\nstr\n(\nmax_value\n)\n\n    \nsleep\n(\n1\n)\n\n    \nuser_guess\n \n=\n \nget_user_guess\n()\n\n    \nif\n \nuser_guess\n \n>\n \nmax_value\n:\n\n        \nprint\n \n\"Your guess is higher than the max allowed (\"\n+\nstr\n(\nmax_value\n)\n+\n\"). Please, take another guess.\"\n\n        \nreturn\n \n# exit the if block is condition met\n\n    \nelse\n:\n\n        \nprint\n \n\"Rolling...\"\n\n        \nsleep\n(\n1\n)\n\n        \nprint\n \n\"First roll is: \n%d\n\"\n \n%\n \n(\nfirst_roll\n)\n\n        \nsleep\n(\n1\n)\n\n        \nprint\n \n\"Second roll is: \n%d\n\"\n \n%\n \n(\nsecond_roll\n)\n\n        \ntotal_roll\n \n=\n \nfirst_roll\n \n+\n \nsecond_roll\n\n        \nprint\n \n\"Result...\"\n\n        \nsleep\n(\n1\n)\n\n        \nif\n \nuser_guess\n \n>\n \ntotal_roll\n:\n\n            \nprint\n \n\"You win since your guess, \"\n+\nstr\n(\nuser_guess\n)\n+\n\", is greater than the total roll, \"\n+\nstr\n(\ntotal_roll\n)\n\n            \nreturn\n \n# exit\n\n        \nelse\n:\n\n            \nprint\n \n\"You lose!\"\n\n            \nreturn\n \n# exit\n\n\n\nroll_dice\n(\n6\n)\n\n\n\n\n\n\n\nRock, paper, Scissors.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\nfrom\n \nrandom\n \nimport\n \nrandint\n\n\nfrom\n \ntime\n \nimport\n \nsleep\n\n\n\noptions\n \n=\n \n[\n\"R\"\n,\n \n\"P\"\n,\n \n\"S\"\n]\n\n\nLOSE\n \n=\n \n\"You lost!\"\n \n# constant, uppercase\n\n\nWIN\n \n=\n \n\"You win!\"\n\n\n\ndef\n \ndecide_winner\n(\nuser_choice\n,\n \ncomputer_choice\n):\n\n\n    \nprint\n(\n\"You picked: \"\n+\nstr\n(\nuser_choice\n))\n\n    \nprint\n \n\"Computer selecting...\"\n\n\n    \nsleep\n(\n1\n)\n\n\n    \nprint\n(\n\"Computer picks: \"\n+\nstr\n(\ncomputer_choice\n))\n\n\n    \nuser_choice_index\n \n=\n \noptions\n.\nindex\n(\nuser_choice\n)\n\n    \ncomputer_choice_index\n \n=\n \noptions\n.\nindex\n(\ncomputer_choice\n)\n \n# !!!!!\n\n\n    \nif\n \nuser_choice_index\n \n==\n \ncomputer_choice_index\n:\n\n        \nprint\n \n\"Tie!\"\n\n    \nelif\n \nuser_choice_index\n \n==\n \n0\n \nand\n \ncomputer_choice_index\n \n==\n \n2\n:\n\n        \nprint\n \nWIN\n\n    \nelif\n \nuser_choice_index\n \n==\n \n1\n \nand\n \ncomputer_choice_index\n \n==\n \n0\n:\n\n        \nprint\n \nWIN\n\n    \nelif\n \nuser_choice_index\n \n==\n \n2\n \nand\n \ncomputer_choice_index\n \n==\n \n1\n:\n\n        \nprint\n \nWIN\n\n    \nelif\n \nuser_choice_index\n \n>\n \n2\n:\n\n        \nprint\n \n\"Invalid choice!!!\"\n\n    \nelse\n:\n\n        \nprint\n \nLOSE\n\n\n\ndef\n \nplay_RPS\n():\n\n\n    \nprint\n \n\"Let's pay Rock-Paper-Scissors\"\n\n\n    \nuser_choice\n \n=\n \nraw_input\n(\n\"Select R for Rock, P for Paper, or S for Scissors: \"\n)\n\n\n    \nsleep\n(\n1\n)\n\n\n    \nuser_choice\n \n=\n \nuser_choice\n.\nupper\n()\n\n    \n# computer_choice = options[randint(0,2)] \n\n    \n# pull out an element from a list, the 1st (0) out of 3 (2)\n\n\n    \ncomputer_choice\n \n=\n \noptions\n[\nrandint\n(\n0\n,\nlen\n(\noptions\n)\n-\n1\n)]\n \n    \n# This will ensure that if we ever add more options to the game, we won't have to change this line of code.\n\n\n    \ndecide_winner\n(\nuser_choice\n,\n \ncomputer_choice\n)\n\n\n\nplay_RPS\n()\n\n\n\n\n\n\n\nRegex Tools\n\u00b6\n\n\nRemove vowels\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ndef\n \nanti_vowel\n(\ntext\n):\n\n\n    \nvowels\n \n=\n \n\"aAeEiIoOuU\"\n\n    \nfor\n \nchar\n \nin\n \ntext\n:\n\n        \nfor\n \nvow\n \nin\n \nvowels\n:\n\n            \nif\n \nvow\n \n==\n \nchar\n:\n\n                \ntext\n \n=\n \ntext\n.\nreplace\n(\nchar\n,\n\"\"\n)\n\n    \nreturn\n \ntext\n\n\n\nprint\n \nanti_vowel\n(\n\"allo\"\n)\n\n\n\n\n\n\n\nRemove all but punctuation.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\ndef\n \nanti_vowel\n(\ntext\n):\n\n\n    \ntext\n \n=\n \ntext\n.\nlower\n()\n\n    \nvowels\n \n=\n \n\"abcdefghijklmnopqrstuvwxyz1234567890$-\"\n\n\n    \nfor\n \nchar\n \nin\n \ntext\n:\n\n        \nfor\n \nvow\n \nin\n \nvowels\n:\n\n            \nif\n \nvow\n \n==\n \nchar\n:\n\n                \ntext\n \n=\n \ntext\n.\nreplace\n(\nchar\n,\n\"\"\n)\n\n    \nfor\n \nchar\n \nin\n \ntext\n:\n\n        \nif\n \nchar\n \n==\n \n\" \"\n:\n\n            \ntext\n \n=\n \ntext\n.\nreplace\n(\nchar\n,\n\"\"\n)\n\n    \nreturn\n \ntext\n\n\n\nprint\n \nanti_vowel\n(\n\"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \n\\\"\nID\n\\\"\n associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\"\n)\n\n\n\n\n\n\n\nScrape a text.\n\n\nurllib2, scrape, scrapy, parse, parser, split, extract, subset, join, project, gutenberg, split, conditional, count, occurences\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nimport\n \nurllib2\n\n\n\nresponse\n \n=\n \nurllib2\n.\nurlopen\n(\n'http://gutenberg.org/'\n)\n\n\n\n# find Les Miserables by Victor Hugo\n\n\n# http://www.gutenberg.org/ebooks/135\n\n\n# the book is available in HTML, epub with images, w/o images, kindle with images, w/o images, and more...\n\n\n\nresponse\n \n=\n \nurllib2\n.\nurlopen\n(\n'http://www.gutenberg.org/files/135/135-h/135-h.htm'\n)\n\n\nhtml\n \n=\n \nresponse\n.\nread\n()\n\n\n\nprint\n \nhtml\n\n\n\nsad\n \n=\n \n0\n\n\n\nlist_of_words\n \n=\n \nhtml\n.\nsplit\n(\n' '\n)\n\n\n\nfor\n \nword\n \nin\n \nlist_of_words\n:\n\n    \nif\n \nword\n \n==\n \n'sad'\n:\n\n        \nsad\n \n+=\n \n1\n\n\n\nprint\n \nsad\n \n# count occurences\n\n\n\n\n\n\n\nScrabble score.\n\n\ndictionary, count, conditonal, if, loop\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nscore\n \n=\n \n{\n\"a\"\n:\n \n1\n,\n \n\"c\"\n:\n \n3\n,\n \n\"b\"\n:\n \n3\n,\n \n\"e\"\n:\n \n1\n,\n \n\"d\"\n:\n \n2\n,\n \n\"g\"\n:\n \n2\n,\n \n         \n\"f\"\n:\n \n4\n,\n \n\"i\"\n:\n \n1\n,\n \n\"h\"\n:\n \n4\n,\n \n\"k\"\n:\n \n5\n,\n \n\"j\"\n:\n \n8\n,\n \n\"m\"\n:\n \n3\n,\n \n         \n\"l\"\n:\n \n1\n,\n \n\"o\"\n:\n \n1\n,\n \n\"n\"\n:\n \n1\n,\n \n\"q\"\n:\n \n10\n,\n \n\"p\"\n:\n \n3\n,\n \n\"s\"\n:\n \n1\n,\n \n         \n\"r\"\n:\n \n1\n,\n \n\"u\"\n:\n \n1\n,\n \n\"t\"\n:\n \n1\n,\n \n\"w\"\n:\n \n4\n,\n \n\"v\"\n:\n \n4\n,\n \n\"y\"\n:\n \n4\n,\n \n         \n\"x\"\n:\n \n8\n,\n \n\"z\"\n:\n \n10\n}\n\n\n\ndef\n \nscrabble_score\n(\nword\n):\n\n\n    \nword2\n \n=\n \nword\n.\nlower\n()\n\n\n    \nprint\n \nword2\n+\n\":\"\n,\n\n    \npoints\n \n=\n \n0\n\n    \nfor\n \nletter\n \nin\n \nword2\n:\n\n        \nif\n \nletter\n \n==\n \nstr\n(\nletter\n):\n\n            \npoints\n \n+=\n \nscore\n[\nletter\n]\n\n    \nreturn\n \npoints\n\n\n\nprint\n \nscrabble_score\n(\n\"ab\"\n)\n\n\nprint\n \nscrabble_score\n(\n\"allo\"\n)\n\n\nprint\n \nscrabble_score\n(\n\"xylophone\"\n)\n\n\nprint\n \nscrabble_score\n(\n\"coding\"\n)\n\n\nprint\n \nscrabble_score\n(\n\"yak\"\n)\n\n\n\n\n\n\n\nRGB-HEX Converter\n\u00b6\n\n\nconvert, bitwise, hexadecimal, hex, rgb, color\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\ndef\n \nrgb_hex\n():\n\n\n    \ninvalid_msg\n \n=\n \n\"Invalid entry\"\n\n    \nred\n \n=\n \nint\n(\nraw_input\n(\n\"Enter a 'red' (R) value, from 0 to 255: \"\n))\n\n    \nif\n \nred\n \n<\n \n0\n \nor\n \nred\n \n>\n \n255\n:\n\n        \nprint\n \ninvalid_msg\n\n        \nreturn\n \n# return will exit the function, w/o return, the function jumps to the next line...\n\n\n    \ngreen\n \n=\n \nint\n(\nraw_input\n(\n\"Enter a 'green' (G) value, from 0 to 255: \"\n))\n\n    \nif\n \ngreen\n \n<\n \n0\n \nor\n \ngreen\n \n>\n \n255\n:\n\n        \nprint\n \ninvalid_msg\n\n        \nreturn\n\n\n    \nblue\n \n=\n \nint\n(\nraw_input\n(\n\"Enter a 'blue' (B) value, from 0 to 255: \"\n))\n\n    \nif\n \nblue\n \n<\n \n0\n \nor\n \nblue\n \n>\n \n255\n:\n\n        \nprint\n \ninvalid_msg\n\n        \nreturn\n\n\n    \nval\n \n=\n \nred\n \n<<\n \n16\n \n+\n \ngreen\n \n<<\n \n8\n \n+\n \nblue\n\n    \n# A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character.\n\n    \n# Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\n\n    \n# Become familiar with bits by reading more here.\n\n    \nprint\n \n\"\n%s\n\"\n \n%\n(\nhex\n(\nval\n)[\n2\n:]\n.\nupper\n())\n \n# string formatting\n\n\n\ndef\n \nhex_rgb\n():\n\n\n    \ninvalid_msg\n \n=\n \n\"Invalid entry\"\n\n    \nhex_val\n \n=\n \nraw_input\n(\n\"Enter a color (six hexadecimal digits): \"\n)\n\n    \nif\n \nlen\n(\nhex_val\n)\n \n!=\n \n6\n:\n\n        \nprint\n \n\"Invalid Entry\"\n\n    \nelse\n:\n\n        \nhex_val\n \n=\n \nint\n(\nhex_val\n,\n \n16\n)\n\n    \ntwo_hex_digits\n \n=\n \n2\n \n**\n \n8\n\n    \nblue\n \n=\n \nhex_val\n \n%\n \ntwo_hex_digits\n\n    \nhex_val\n \n=\n \nhex_val\n \n>>\n \n8\n\n    \ngreen\n \n=\n \nhex_val\n \n%\n \ntwo_hex_digits\n\n    \nhex_val\n \n=\n \nhex_val\n \n>>\n \n8\n\n    \nred\n \n=\n \nhex_val\n \n%\n \ntwo_hex_digits\n\n    \nprint\n \n\"Red: \n%s\n Green: \n%s\n Blue: \n%s\n\"\n \n%\n(\nred\n,\n \ngreen\n,\nblue\n)\n\n\n\ndef\n \nconvert\n():\n\n\n    \nwhile\n \nTrue\n:\n\n        \noption\n \n=\n \nstr\n(\nraw_input\n(\n\"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \"\n))\n\n        \nif\n \noption\n \n==\n \n'1'\n:\n\n            \nprint\n \n\"RGB to Hex...\"\n\n            \nrgb_hex\n()\n\n        \nelif\n \noption\n \n==\n \n'2'\n:\n\n            \nprint\n \n\"Hex to RGB...\"\n\n            \nhex_rgb\n()\n\n        \nelif\n \noption\n \n==\n \n'X'\n \nor\n \noption\n \n==\n \n'x'\n:\n\n            \nbreak\n\n        \nelse\n:\n\n            \nprint\n \n\"Error\"\n\n\n\nconvert\n()\n\n\n\n\n\n\n\nProject DNA Analysis\n\u00b6\n\n\nGiven the three suspects\u2019 DNA and the sample DNA retrieved from the keyboard, figure out who the spy is!\n\n\nlist, open, close, file, read, line, loop, conditional, if, match\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\nsample\n \n=\n \n[\n'GTA'\n,\n'GGG'\n,\n'CAC'\n]\n\n\n\ndef\n \nread_dna\n(\ndna_file\n):\n\n\n    \ndna_data\n \n=\n \n\"\"\n \n# empty string\n\n\n    \nwith\n \nopen\n(\ndna_file\n,\n \n\"r\"\n)\n \nas\n \nf\n:\n \n# f = open(dna_file, \"r\"); with, as\n\n        \nfor\n \nline\n \nin\n \nf\n:\n\n            \ndna_data\n \n+=\n \nline\n\n        \nreturn\n \ndna_data\n\n\n\ndef\n \ndna_codons\n(\ndna\n):\n\n\n    \ncodons\n \n=\n \n[]\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\nlen\n(\ndna\n),\n3\n):\n \n# slice strings of 3 letters\n\n        \nif\n \ni\n+\n3\n \n<\n \nlen\n(\ndna\n):\n \n# make sure that you don't add a string to the codon list that isn't at least 3 letters long\n\n            \ncodons\n.\nappend\n(\ndna\n[\ni\n:\ni\n+\n3\n])\n \n# append to list in appendig positions 0 (new entry), 1, 2, stopping before 3\n\n    \nreturn\n \ncodons\n\n\n\ndef\n \nmatch_dna\n(\ndna\n):\n\n\n    \nmatches\n \n=\n \n0\n\n    \nfor\n \ncodon\n \nin\n \ndna\n:\n\n        \nif\n \ncodon\n \nin\n \nsample\n:\n \n# if ,in\n\n            \nmatches\n \n+=\n \n1\n\n    \nreturn\n \nmatches\n\n\n\ndef\n \nis_criminal\n(\ndna_sample\n):\n\n\n    \ndna_data\n \n=\n \nread_dna\n(\ndna_sample\n)\n\n    \ncodons\n \n=\n \ndna_codons\n(\ndna_data\n)\n\n    \nnum_matches\n \n=\n \nmatch_dna\n(\ncodons\n)\n\n    \nif\n \nnum_matches\n \n>=\n \n3\n:\n\n        \nprint\n((\ndna_sample\n)[:\n-\n4\n])\n.\nupper\n(),\n\n        \nprint\n(\n\": number of matches = \"\n \n+\n \nstr\n(\nnum_matches\n)\n \n+\n \n\"; the investigation will proceed further more with this suspect.\"\n)\n\n    \nelse\n:\n\n        \nprint\n((\ndna_sample\n)[:\n-\n4\n])\n.\nupper\n(),\n\n        \nprint\n(\n\": no evidence; the suspect can be freed.\"\n)\n\n\n\na\n \n=\n \n\"suspect1.txt\"\n\n\nis_criminal\n(\na\n)\n\n\n\na\n \n=\n \n\"suspect2.txt\"\n\n\nis_criminal\n(\na\n)\n\n\n\na\n \n=\n \n\"suspect3.txt\"\n\n\nis_criminal\n(\na\n)\n\n\n\n\n\n\n\nsuspect1.txt\n\n\n1\nATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT\n\n\n\n\n\n\nsuspect2.txt\n\n\n1\nCCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG\n\n\n\n\n\n\nsuspect3.txt\n\n\n1\nTCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA",
            "title": "LPTHW, Python Code Snippets"
        },
        {
            "location": "/LPTHW, Python Code Snippets/#an-interactive-calendar",
            "text": "add, delete, update, exit, dictionary, loop, conditional, if, else, elif   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83 from   time   import   sleep ,   strftime  his_name   =   raw_input ( \"What is your first name? \" )  his_name   =   str ( his_name )  # calendar will store the dates as keys and the events as values  calendar   =   {}  def   welcome (): \n\n     print ( \"Welcome \"   +   his_name   + \".\" ) \n\n     print ( \"Calendar starting...\" ) \n     sleep ( 0.5 ) \n     print ( \"Today is: \"   +   strftime ( \"%A, %B  %d , %Y\" )) \n     print ( \"It is currently: \"   +   strftime ( \"%H:%M:%S\" )) \n     sleep ( 0.5 )  def   start_calendar (): \n\n     welcome () \n     print ( \"What would you like to do?\" ) \n     print ( calendar ) \n     start   =   True \n\n     while   start : \n         user_choice   =   raw_input ( \"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \" ) . upper () \n\n         if   user_choice   ==   'V' :   # V \n             if   len ( calendar . keys ())   <   1 : \n                 print ( \"The calendar is empty\" ) \n             else : \n                 print ( calendar ) \n\n         elif   user_choice   ==   'U' :   # U \n             if   len ( calendar . keys ())   <   1 : \n                 print ( \"The calendar is empty\" ) \n             else : \n                 print ( calendar ) \n                 date   =   raw_input ( \"What date? \" ) \n                 update   =   raw_input ( \"Enter the update: \" ) \n                 # could be more control here... \n                 calendar [ date ]   =   update   # without checking if the date is valid or if it already exists (which could override things)! \n                 print ( \"Successful!\" ) \n                 print ( calendar ) \n\n         elif   user_choice   ==   'A' :   # A \n             event   =   raw_input ( \"Enter event: \" ) \n             date   =   raw_input ( \"Enter date (MM/DD/YYYY): \" ) \n             if   ( len ( date )   >   10   or   int ( date [ 6 :])   <   int ( strftime ( \"%Y\" ))):   # could be more control... \n                 print ( \"Invalid date format.\" ) \n                 try_again   =   raw_input ( \"Try Again? 'Y' for Yes, 'N' for No: \" ) . upper () \n                 if   try_again   ==   'Y' : \n                     continue   #! break, continue, start is still True \n                 else : \n                     start   ==   False \n             else : \n                 calendar [ date ]   =   event   # without checking if the date is valid or if it already exists (which could override things)! \n                 print ( \"Successful!\" ) \n                 print ( calendar ) \n\n         elif   user_choice   ==   'D' :   # D \n             if   len ( calendar . keys ())   <   1 : \n                 print ( \"The calendar is empty.\" ) \n             else : \n                 print ( calendar ) \n                 event   =   raw_input ( \"What event? \" )   # could be more option like: What date? \n                 for   date   in   calendar . keys (): \n                     if   event   ==   calendar [ date ]: \n                         del   calendar [ date ]   # del a[], [1], [\"a\"], [1:3], [5:], [:9], etc. \n                         print ( \"Deleted.\" ) \n                         print ( calendar ) \n                     else : \n                         print ( \"Incorrect.\" ) \n\n         elif   user_choice   ==   'X' :   # X \n             start   =   False \n\n         else : \n             print ( \"Invalid command.\" ) \n             break  start_calendar ()",
            "title": "An Interactive Calendar"
        },
        {
            "location": "/LPTHW, Python Code Snippets/#a-gradebook-for-students",
            "text": "students, marks, grades, compute, average, weighted  First, create 3 dictionaries.  Second, add names, marks.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 lloyd   =   { \n     \"name\"   :   \"Lloyd\" , \n     \"homework\"   :   [ 90.0 ,   97.0 ,   75.0 ,   92.0 ], \n     \"quizzes\"   :   [ 88.0 ,   40.0 ,   94.0 ], \n     \"tests\"   :   [ 75.0 ,   90.0 ]  }  alice   =   { \n     \"name\" :   \"Alice\" , \n     \"homework\"   :   [ 100.0 ,   92.0 ,   98.0 ,   100.0 ], \n     \"quizzes\"   :   [ 82.0 ,   83.0 ,   91.0 ], \n     \"tests\"   :   [ 89.0 ,   97.0 ]  }  tyler   =   { \n     \"name\"   :   \"Tyler\" , \n     \"homework\"   :   [ 0.0 ,   87.0 ,   75.0 ,   22.0 ], \n     \"quizzes\"   :   [ 0.0 ,   75.0 ,   78.0 ], \n     \"tests\"   :   [ 100.0 ,   100.0 ]  }    Third, make a list.  1\n2\n3\n4\n5\n6\n7 students =   [ lloyd ,   alice ,   tyler ]  cases   =   [ \"homework\" ,   \"quizzes\" ,   \"tests\" ]  w_calc   =   [ 0.10 ,   0.30 ,   0.60 ]  all_average   =   0.0    Print out.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 print   \" \\n Students' Grades\" . upper ()  print   \"\"  for   student   in   students : \n     print   student [ \"name\" ] . upper () \n     print   \"Homework\" \n     print   student [ \"homework\" ] \n     print   \"Quizzes\" \n     print   student [ \"quizzes\" ] \n     print   \"Tests\" \n     print   student [ \"tests\" ] \n     print   \"\"    Compute averages.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 def   average ( numbers ): \n\n     total   =   sum ( numbers ) \n     temp   =   float ( total )   /   len ( numbers ) \n     return   temp  print   \"Students' Averages\" . upper ()  print   \"\"  for   c   in   cases : \n     cc   =   c . upper () \n     print   cc \n     for   student   in   students : \n         numbers   =   student [ c ] \n         calc   =   round ( average ( numbers ), 1 ) \n         print   student [ \"name\" ] \n         print   calc \n     print   \"\"    Compute weighted averages.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51 def   w_average ( marks ): \n\n     #w_calc = [0.10, 0.30, 0.60] \n     s_calc   =   0 \n     w   =   0 \n     while   w   <   len ( w_calc ): \n         s_calc   +=   w_calc [ w ]   *   marks [ w ] \n         w   +=   1 \n     return   s_calc  def   get_letter_grade ( score ): \n\n     if   score   >=   90 : \n         return   \"A\" \n     elif   score   >=   80 : \n         return   \"B\" \n     elif   score   >=   70 : \n         return   \"C\" \n     elif   score   >=   60 : \n         return   \"D\" \n     else : \n         return   \"F\"  def   get_class_average ( ind ): \n     class_total   =   round ( ind   /   len ( students ),   1 ) \n     return   class_total  print   \"Students' Weighted Average\" . upper ()  print   \" Ponderation [Homeworks, Quizzes, Tests]: [\" + str ( float ( w_calc [ 0 ]) * 100 ) + \", \" + str ( float ( w_calc [ 1 ]) * 100 ) + \", \" + str ( float ( w_calc [ 2 ]) * 100 ) + \"]\"  print   \"\"  for   student   in   students : \n     print ( student [ \"name\" ]   +   \"'s marks are:\" ) . upper () \n     l_calc   =   [] \n     for   c   in   cases :     \n         numbers   =   student [ c ] \n         calc   =   round ( average ( numbers ), 1 ) \n         l_calc . append ( calc ) \n     print   l_calc \n     print ( \"For a weighted average of:\" ) \n     ind_average   =   round ( w_average ( l_calc ), 1 ) \n     print   ind_average \n     print ( \"Standing for a:\" ) \n     print   get_letter_grade ( ind_average ) \n     all_average   +=   ind_average \n     print   \"\"  print ( \"Finally, The class average is:\" ) . upper ()  print   get_class_average ( all_average )",
            "title": "A Gradebook for Students"
        },
        {
            "location": "/LPTHW, Python Code Snippets/#guess-games",
            "text": "random, generate, number, conditional, if, else, ifel, loop  Guess a number.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 import   random  print   \"Lucky Numbers! 3 numbers will be generated.\"  print   \"If one of them is a '5', you lose!\"  count   =   0  while   count   <   3 : \n     num   =   random . randint ( 1 ,   6 ) \n     print   num \n     if   num   ==   5 : \n         print   \"Sorry, you lose!\" \n         break \n     count   +=   1  else : \n     print   \"You win!\"    Guess a number (more).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 from   random   import   randint  # Generates a number from 1 through 10 inclusive  random_number   =   randint ( 1 ,   10 )  # print random_number  guesses_left   =   3  print   \"Guess right!\"  while   guesses_left   >   0 : \n     print   \"You have \" + str ( guesses_left ) + \" attempts.\" \n     guess   =   raw_input ( \"Guess a number from 1 to 10: \" ) \n     if   int ( guess )   ==   random_number : \n         print   \"You win!\" \n         break \n     elif   guesses_left   ==   1 : \n         print   \"You lose.\" \n         break \n     else : \n         guesses_left   -=   1 \n         print   \"Try again.\"    Roll a dice.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 from   random   import   randint  from   time   import   sleep  def   get_user_guess (): \n\n     user_guess   =   int ( raw_input ( \"Guess a number: \" )) \n     return   user_guess  def   roll_dice ( number_of_sides ): \n\n     first_roll   =   randint ( 1 ,   number_of_sides ) \n     second_roll   =   randint ( 1 ,   number_of_sides ) \n     max_value   =   number_of_sides   *   2 \n     print   \"The maximum value is: \" + str ( max_value ) \n     sleep ( 1 ) \n     user_guess   =   get_user_guess () \n     if   user_guess   >   max_value : \n         print   \"Your guess is higher than the max allowed (\" + str ( max_value ) + \"). Please, take another guess.\" \n         return   # exit the if block is condition met \n     else : \n         print   \"Rolling...\" \n         sleep ( 1 ) \n         print   \"First roll is:  %d \"   %   ( first_roll ) \n         sleep ( 1 ) \n         print   \"Second roll is:  %d \"   %   ( second_roll ) \n         total_roll   =   first_roll   +   second_roll \n         print   \"Result...\" \n         sleep ( 1 ) \n         if   user_guess   >   total_roll : \n             print   \"You win since your guess, \" + str ( user_guess ) + \", is greater than the total roll, \" + str ( total_roll ) \n             return   # exit \n         else : \n             print   \"You lose!\" \n             return   # exit  roll_dice ( 6 )    Rock, paper, Scissors.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50 from   random   import   randint  from   time   import   sleep  options   =   [ \"R\" ,   \"P\" ,   \"S\" ]  LOSE   =   \"You lost!\"   # constant, uppercase  WIN   =   \"You win!\"  def   decide_winner ( user_choice ,   computer_choice ): \n\n     print ( \"You picked: \" + str ( user_choice )) \n     print   \"Computer selecting...\" \n\n     sleep ( 1 ) \n\n     print ( \"Computer picks: \" + str ( computer_choice )) \n\n     user_choice_index   =   options . index ( user_choice ) \n     computer_choice_index   =   options . index ( computer_choice )   # !!!!! \n\n     if   user_choice_index   ==   computer_choice_index : \n         print   \"Tie!\" \n     elif   user_choice_index   ==   0   and   computer_choice_index   ==   2 : \n         print   WIN \n     elif   user_choice_index   ==   1   and   computer_choice_index   ==   0 : \n         print   WIN \n     elif   user_choice_index   ==   2   and   computer_choice_index   ==   1 : \n         print   WIN \n     elif   user_choice_index   >   2 : \n         print   \"Invalid choice!!!\" \n     else : \n         print   LOSE  def   play_RPS (): \n\n     print   \"Let's pay Rock-Paper-Scissors\" \n\n     user_choice   =   raw_input ( \"Select R for Rock, P for Paper, or S for Scissors: \" ) \n\n     sleep ( 1 ) \n\n     user_choice   =   user_choice . upper () \n     # computer_choice = options[randint(0,2)]  \n     # pull out an element from a list, the 1st (0) out of 3 (2) \n\n     computer_choice   =   options [ randint ( 0 , len ( options ) - 1 )]  \n     # This will ensure that if we ever add more options to the game, we won't have to change this line of code. \n\n     decide_winner ( user_choice ,   computer_choice )  play_RPS ()",
            "title": "Guess Games"
        },
        {
            "location": "/LPTHW, Python Code Snippets/#regex-tools",
            "text": "Remove vowels   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 def   anti_vowel ( text ): \n\n     vowels   =   \"aAeEiIoOuU\" \n     for   char   in   text : \n         for   vow   in   vowels : \n             if   vow   ==   char : \n                 text   =   text . replace ( char , \"\" ) \n     return   text  print   anti_vowel ( \"allo\" )    Remove all but punctuation.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 def   anti_vowel ( text ): \n\n     text   =   text . lower () \n     vowels   =   \"abcdefghijklmnopqrstuvwxyz1234567890$-\" \n\n     for   char   in   text : \n         for   vow   in   vowels : \n             if   vow   ==   char : \n                 text   =   text . replace ( char , \"\" ) \n     for   char   in   text : \n         if   char   ==   \" \" : \n             text   =   text . replace ( char , \"\" ) \n     return   text  print   anti_vowel ( \"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the  \\\" ID \\\"  associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\" )    Scrape a text.  urllib2, scrape, scrapy, parse, parser, split, extract, subset, join, project, gutenberg, split, conditional, count, occurences   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 import   urllib2  response   =   urllib2 . urlopen ( 'http://gutenberg.org/' )  # find Les Miserables by Victor Hugo  # http://www.gutenberg.org/ebooks/135  # the book is available in HTML, epub with images, w/o images, kindle with images, w/o images, and more...  response   =   urllib2 . urlopen ( 'http://www.gutenberg.org/files/135/135-h/135-h.htm' )  html   =   response . read ()  print   html  sad   =   0  list_of_words   =   html . split ( ' ' )  for   word   in   list_of_words : \n     if   word   ==   'sad' : \n         sad   +=   1  print   sad   # count occurences    Scrabble score.  dictionary, count, conditonal, if, loop   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 score   =   { \"a\" :   1 ,   \"c\" :   3 ,   \"b\" :   3 ,   \"e\" :   1 ,   \"d\" :   2 ,   \"g\" :   2 ,  \n          \"f\" :   4 ,   \"i\" :   1 ,   \"h\" :   4 ,   \"k\" :   5 ,   \"j\" :   8 ,   \"m\" :   3 ,  \n          \"l\" :   1 ,   \"o\" :   1 ,   \"n\" :   1 ,   \"q\" :   10 ,   \"p\" :   3 ,   \"s\" :   1 ,  \n          \"r\" :   1 ,   \"u\" :   1 ,   \"t\" :   1 ,   \"w\" :   4 ,   \"v\" :   4 ,   \"y\" :   4 ,  \n          \"x\" :   8 ,   \"z\" :   10 }  def   scrabble_score ( word ): \n\n     word2   =   word . lower () \n\n     print   word2 + \":\" , \n     points   =   0 \n     for   letter   in   word2 : \n         if   letter   ==   str ( letter ): \n             points   +=   score [ letter ] \n     return   points  print   scrabble_score ( \"ab\" )  print   scrabble_score ( \"allo\" )  print   scrabble_score ( \"xylophone\" )  print   scrabble_score ( \"coding\" )  print   scrabble_score ( \"yak\" )",
            "title": "Regex Tools"
        },
        {
            "location": "/LPTHW, Python Code Snippets/#rgb-hex-converter",
            "text": "convert, bitwise, hexadecimal, hex, rgb, color   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56 def   rgb_hex (): \n\n     invalid_msg   =   \"Invalid entry\" \n     red   =   int ( raw_input ( \"Enter a 'red' (R) value, from 0 to 255: \" )) \n     if   red   <   0   or   red   >   255 : \n         print   invalid_msg \n         return   # return will exit the function, w/o return, the function jumps to the next line... \n\n     green   =   int ( raw_input ( \"Enter a 'green' (G) value, from 0 to 255: \" )) \n     if   green   <   0   or   green   >   255 : \n         print   invalid_msg \n         return \n\n     blue   =   int ( raw_input ( \"Enter a 'blue' (B) value, from 0 to 255: \" )) \n     if   blue   <   0   or   blue   >   255 : \n         print   invalid_msg \n         return \n\n     val   =   red   <<   16   +   green   <<   8   +   blue \n     # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character. \n     # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift). \n     # Become familiar with bits by reading more here. \n     print   \" %s \"   % ( hex ( val )[ 2 :] . upper ())   # string formatting  def   hex_rgb (): \n\n     invalid_msg   =   \"Invalid entry\" \n     hex_val   =   raw_input ( \"Enter a color (six hexadecimal digits): \" ) \n     if   len ( hex_val )   !=   6 : \n         print   \"Invalid Entry\" \n     else : \n         hex_val   =   int ( hex_val ,   16 ) \n     two_hex_digits   =   2   **   8 \n     blue   =   hex_val   %   two_hex_digits \n     hex_val   =   hex_val   >>   8 \n     green   =   hex_val   %   two_hex_digits \n     hex_val   =   hex_val   >>   8 \n     red   =   hex_val   %   two_hex_digits \n     print   \"Red:  %s  Green:  %s  Blue:  %s \"   % ( red ,   green , blue )  def   convert (): \n\n     while   True : \n         option   =   str ( raw_input ( \"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \" )) \n         if   option   ==   '1' : \n             print   \"RGB to Hex...\" \n             rgb_hex () \n         elif   option   ==   '2' : \n             print   \"Hex to RGB...\" \n             hex_rgb () \n         elif   option   ==   'X'   or   option   ==   'x' : \n             break \n         else : \n             print   \"Error\"  convert ()",
            "title": "RGB-HEX Converter"
        },
        {
            "location": "/LPTHW, Python Code Snippets/#project-dna-analysis",
            "text": "Given the three suspects\u2019 DNA and the sample DNA retrieved from the keyboard, figure out who the spy is!  list, open, close, file, read, line, loop, conditional, if, match   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 sample   =   [ 'GTA' , 'GGG' , 'CAC' ]  def   read_dna ( dna_file ): \n\n     dna_data   =   \"\"   # empty string \n\n     with   open ( dna_file ,   \"r\" )   as   f :   # f = open(dna_file, \"r\"); with, as \n         for   line   in   f : \n             dna_data   +=   line \n         return   dna_data  def   dna_codons ( dna ): \n\n     codons   =   [] \n     for   i   in   range ( 0 , len ( dna ), 3 ):   # slice strings of 3 letters \n         if   i + 3   <   len ( dna ):   # make sure that you don't add a string to the codon list that isn't at least 3 letters long \n             codons . append ( dna [ i : i + 3 ])   # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3 \n     return   codons  def   match_dna ( dna ): \n\n     matches   =   0 \n     for   codon   in   dna : \n         if   codon   in   sample :   # if ,in \n             matches   +=   1 \n     return   matches  def   is_criminal ( dna_sample ): \n\n     dna_data   =   read_dna ( dna_sample ) \n     codons   =   dna_codons ( dna_data ) \n     num_matches   =   match_dna ( codons ) \n     if   num_matches   >=   3 : \n         print (( dna_sample )[: - 4 ]) . upper (), \n         print ( \": number of matches = \"   +   str ( num_matches )   +   \"; the investigation will proceed further more with this suspect.\" ) \n     else : \n         print (( dna_sample )[: - 4 ]) . upper (), \n         print ( \": no evidence; the suspect can be freed.\" )  a   =   \"suspect1.txt\"  is_criminal ( a )  a   =   \"suspect2.txt\"  is_criminal ( a )  a   =   \"suspect3.txt\"  is_criminal ( a )    suspect1.txt  1 ATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT   suspect2.txt  1 CCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG   suspect3.txt  1 TCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA",
            "title": "Project DNA Analysis"
        },
        {
            "location": "/Introduction to Python/",
            "text": "CONTENT\n\n\n1, A Good Way to Start (Crash Courses).\n\n\n2, More Comprehensive Courses\n\n\n3, A Comprehensive List of Courses\n\n\n4, Dive Right into a First Project\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2 & 3.\n\n\n\n\n1, A Good Way to Start (Crash Courses).\n\u00b6\n\n\n\n\nA Python Course\n\n\nInstant Python\n\n\n\n\n2, More Comprehensive Courses\n\u00b6\n\n\n\n\n\n\nThink Python\n\n\n\n\nThink Python starts with basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.\n\n\nSome examples and exercises are based on Swampy, a Python package written by the author to demonstrate aspects of software design, and to give readers a chance to experiment with simple graphics and animation.\n\n\nThink Python is a Free Book, available under the Creative Commons Attribution-NonCommercial 3.0 Unported License, which means that you are free to copy, distribute, and modify, as long as you attribute the work and don\u2019t use it for commercial purposes.\n\n\nSyllabus\n\n\nVariables, expressions and statements\n\n\nFunctions\n\n\nCase study: interface design\n\n\nConditionals and recursion\n\n\nFruitful functions\n\n\nIteration\n\n\nStrings\n\n\nCase study: word play\n\n\nLists\n\n\nDictionaries\n\n\nTuples\n\n\nCase study: data structure selection\n\n\nFiles\n\n\nClasses and objects\n\n\nClasses and functions\n\n\nClasses and methods\n\n\nInheritance\n\n\nCase study: Tkinter\n\n\nDebugging\n\n\nAnalysis of Algorithms\n\n\nLumpy (diagrams)\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\n\n\nCode School (focused on web frameworks)\n\n\n\n\nCodecademy (offers comprehensive intro course with a syllabus similar to the above)\n\n\nDataCamp (focused of data analysis)\n\n\nIntroduction au langage Python\n\n\nTreehouse (focused on web frameworks and specific packages)\n\n\n\n\n3, A Comprehensive List of Courses\n\u00b6\n\n\nFrom \nThe Hitchhiker\u2019s Guide to Python\n\n\n4, Dive Right into a First Project\n\u00b6\n\n\nProgramming Fundamentals in Python\n\n\n\n\nCreate a pypet.",
            "title": "Introduction to Python"
        },
        {
            "location": "/Introduction to Python/#2-more-comprehensive-courses",
            "text": "Think Python   Think Python starts with basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.  Some examples and exercises are based on Swampy, a Python package written by the author to demonstrate aspects of software design, and to give readers a chance to experiment with simple graphics and animation.  Think Python is a Free Book, available under the Creative Commons Attribution-NonCommercial 3.0 Unported License, which means that you are free to copy, distribute, and modify, as long as you attribute the work and don\u2019t use it for commercial purposes.  Syllabus  Variables, expressions and statements  Functions  Case study: interface design  Conditionals and recursion  Fruitful functions  Iteration  Strings  Case study: word play  Lists  Dictionaries  Tuples  Case study: data structure selection  Files  Classes and objects  Classes and functions  Classes and methods  Inheritance  Case study: Tkinter  Debugging  Analysis of Algorithms  Lumpy (diagrams)  Index       Code School (focused on web frameworks)   Codecademy (offers comprehensive intro course with a syllabus similar to the above)  DataCamp (focused of data analysis)  Introduction au langage Python  Treehouse (focused on web frameworks and specific packages)",
            "title": "2, More Comprehensive Courses"
        },
        {
            "location": "/Introduction to Python/#3-a-comprehensive-list-of-courses",
            "text": "From  The Hitchhiker\u2019s Guide to Python",
            "title": "3, A Comprehensive List of Courses"
        },
        {
            "location": "/Introduction to Python/#4-dive-right-into-a-first-project",
            "text": "Programming Fundamentals in Python   Create a pypet.",
            "title": "4, Dive Right into a First Project"
        },
        {
            "location": "/Automate the Boring Stuff with Python/",
            "text": "CONTENT\n\n\nChapter 2, Flow Control\n\n\nChapter 3, Functions\n\n\nChapter 4, Lists (and Tuples)\n\n\nChapter 5, Dictionaries and Structuring Data\n\n\nChapter 6, Manipulating Strings\n\n\nChapter 7, Pattern Matching and Regular Expressions\n\n\nChapter 8, Reading and Writing Files\n\n\nChapter 9, Organizing Files\n\n\nChapter 10, Debugging\n\n\nChapter 11, Web Scraping\n\n\nChapter 12, Excel Spreadsheets\n\n\nChapter 13, PDF and Word Documents\n\n\nChapter 14, CSV Files and JSON Data\n\n\nChapter 15, Time, Scheduling Tasks, and Launching Programs\n\n\nChapter 16, Sending Email and Text Messages\n\n\nChapter 17, Manipulating Images\n\n\nChapter 18, Controlling the Keyboard and Mouse with GUI Automation\n\n\nAppendix A\n\n\nAppendix B\n\n\nAppendix C\n\n\nAdditional Content\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3. From No Starch Press, 2015. Creative Commons. More at:\n\n\n\n\nOnline at \nautomatetheboringstuff.com\n\n\nMore at \nInvent with Python.com\n\n\nBooks\n:\n\n\nDevelop video games!\n\n\nMake games with graphics!\n\n\nEncrypt messages and hack ciphers!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChapter 2, Flow Control\n\u00b6\n\n\nboolean, comparison, operator, flow control, condition, conditional, loop\n\n\n\n\nTrue\n, \nFalse\n.\n\n\nand\n, \nor\n, \nnot\n.\n\n\n==\n, \n!=\n, \n<\n, \n>\n, etc.\n\n\nif\n, \nelse\n, \nelif\n\n\nLoops: \nwhile\n, \nfor\n with \nin\n, \nrange\n.\n\n\nbreak\n, \ncontinue\n.\n\n\nimport\n \nrandom\n,\n \nsys\n,\n \nos\n,\n \nmath\n.\n\n\nrandom.randint\n.\n\n\nfrom\n \nrandom\n \nimport\n \n*\n.\n\n\nsys.exit()\n.\n\n\n\n\nChapter 3, Functions\n\u00b6\n\n\nglobal, local, variable, scope\n\n\nException handling with \ntry:\n and \nexcept\n.\n\n\nChapter 4, Lists (and Tuples)\n\u00b6\n\n\ndata type, index, sublist, subset, slice,  change, concatenate, concatenation, tuple, convert, tuple to list\n\n\n\n\nlen()\n function; length.\n\n\nin\n and \nnot in\n operators.\n\n\n+=\n, \n-=\n, \n*=\n, \n/=\n, \n%=\n augmented assignments.\n\n\nindex()\n method; extract the position of an element.\n\n\nappend()\n method.\n\n\ninsert()\n method.\n\n\nremove()\n method.\n\n\nsort()\n method.\n\n\ncopy\n module and \ncopy()\n method.\n\n\ndeepcopy()\n method; for inner list or a list of lists (ensure the key exists).\n\n\n\n\nChapter 5, Dictionaries and Structuring Data\n\u00b6\n\n\nloop\n\n\nDictionaries are not indexed and ordered like lists.\n\n\n\n\nkeys()\n method; extract keys.\n\n\nvalues()\n method; extract values.\n\n\nitems()\n method; extract both.\n\n\nget()\n method; check out both.\n\n\nin\n and \nnot in\n operators. \n\n\nsetdefault()\n method, check out a key and set value to a key.\n\n\n\n\nPretty print with the \npprint()\n and \npformat()\n functions.\n\n\nNested dictionaries and lists.\n\n\nChapter 6, Manipulating Strings\n\u00b6\n\n\nEscape character: \n\\\n: \n\\'\n, \n\\\"\n, \n\\t\n, \n\\n\n, \n\\\\\n.\n\n\nRaw strings: \nprint(r'That is Carol')\n.\n\n\nTriple quotes:\n\n\n1\n2\n3\n4\n5\n6\n7\nprint\n(\n'''Dear Alice,\n\n\nbla-bla-bla\n\n\ncheers'''\n)\n\n\n\nprint\n(\n\"\"\"Dear Alice,\n\n\nbla-bla-bla\n\n\ncheers\"\"\"\n)\n\n\n\n\n\n\n\nComment: \n#\n.\n\nMultiline comments: \n\"\"\" \"\"\"\n.\n\n\n\n\nSlice, subset with \n[:]\n.\n\n\nin\n and \nnot in\n operators.\n\n\nlower()\n method.\n\n\nupper()\n method.\n\n\ncapitalize()\n method.\n\n\nis\n method; check if x is part of y.\n\n\nislower()\n method.\n\n\nisupper()\n method.\n\n\nisalpha()\n method; check letters, not blank.\n\n\nisalnum()\n method; check letters and numbers, and not blank.\n\n\nisdecimal()\n method; check numeric characters and not blank.\n\n\nisspace()\n method; check spaces, tabs and new lines and not blank.\n\n\nistitle()\n method; check if it begins with an uppercase letter followed with lowercase letters.\n\n\nstartwith()\n method; check if a string begins with a string of characters.\n\n\nendwith()\n method; idem.\n\n\njoin()\n method; concatenate.\n\n\nsplit()\n method.\n\n\nrjust()\n method; justify.\n\n\nljust()\n method justify.\n\n\ncenter()\n method.\n\n\nstrip()\n method; remove white space.\n\n\nrstrip()\n method; ; remove white space to the right.\n\n\nlstrip()\n method; remove white space to the left.\n\n\n\n\npyperclip\n module.\n\n\nThe \npyperclip.pyclip\n function send text to and receive text from the clipboard:\n\n\nIn addition:\n\n\n1\n2\n3\n4\nimport\n \npyperclip\n\n\n\npyperclip\n.\ncopy\n(\n'Hello world!'\n)\n\n\npyperclip\n.\npaste\n()\n\n\n\n\n\n\n\nChapter 7, Pattern Matching and Regular Expressions\n\u00b6\n\n\npatterns of text, with, without regular expression, regex, object, match, matching, group, grouping, pipe, question mark, star, ?, *, plus, +, curly bracket, {, }, character class, digit, numeric, letter, underscore, space, tab, newline, caret, ^, dollar sign, $, wildcard, dot, ., dotstar, newline, symbols, case-sensitive, case-insensitive\n\n\nre\n module.\n\n\n\n\nre.compile()\n method; find a single occurrence.\n\n\nre.findall()\n method; find all occurrences.\n\n\nsub()\n method; substitute.\n\n\nre.IGNORECASE\n; ignore capitalization with the \ncompile()\n method.\n\n\nre.DOTALL\n; ignore dots with the \nre.compile()\n method.\n\n\nre.VERBOSE\n; write comment with the \nre.compile()\n method.\n\n\n\n\nChapter 8, Reading and Writing Files\n\u00b6\n\n\nfile, file path, filename\n\n\nos\n module.\n\n\n\n\nA relative path: \n..\\eggs\\spam.txt\n, \n.\\fizz\\spam.txt\n.\n\n\nAn absolute path: \nC:\\bacon\\fizz\\spam.txt\n.\n\n\nos.getcwd()\n or \nos.chdir()\n functions; extract the current working directory.\n\n\nos.makedir()\nfunction; create a new folder.\n\n\n\n\nos.path\n module. \n\n\nHandle absolute and relative paths. Find file sizes and folder contents. Check path validity.\n\n\nWindows: backslash or \n\\\n:\n\n\n1\n2\nimport\n \nos\n\n\nos\n.\npath\n.\njoin\n(\n'usr'\n,\n \n'bin'\n,\n \n'spam'\n)\n\n\n\n\n\n\n\nYields:\n\n\n1\n'usr\n\\\\\nbin\n\\\\\nspam'\n\n\n\n\n\n\n\nUNIX: forwardslash or \n/\n:\n\n\n1\n2\nimport\n \nos\n\n\nos\n.\npath\n.\njoin\n(\n'usr'\n,\n \n'bin'\n,\n \n'spam'\n)\n\n\n\n\n\n\n\nYields:\n\n\n1\n'usr/bin/spam'\n\n\n\n\n\n\n\nRead and write files:\n\n\n\n\nos.path.open()\n function.\n\n\nos.path.read()\n method.\n\n\nos.path.readline()\n method.\n\n\nos.path.write()\n method.\n\n\nos.path.close()\n method.\n\n\n\n\nshelve\n module.\n\n\nHandle binary files.\n\n\npprint\n module. \n\n\nPretty printing:\n\n\n\n\npprint.pprint()\n.\n\n\npprint.pformat()\n.\n\n\n\n\nChapter 9, Organizing Files\n\u00b6\n\n\npdf, every sub-folder, folder, foldername, subfolder, filename, file, remove, zero, change titles, compress, decompress, zip, unzip\n\n\nshutil\n module. \n\n\nCopy, move, rename, and delete files and folders. \nshutil.rmtree()\n function; delete file and folder.\n\n\nos\n module. \n\n\nDelete, empty, remove files and folders, and change the path. \nos.walk()\n method; walk the tree directory.\n\n\nsend2trash\n module. \n\n\nDelete files and folders, but much safer.\n\n\nzipfile\n module. \n\n\nCompress and uncompress. Read the content of compressed and zipped files.\n\n\n\n\nzipfile.extracall()\n; method  extracts all the files and folders from a zip file.\n\n\nwrite()\n method; create a zip file.\n\n\n\n\nChapter 10, Debugging\n\u00b6\n\n\nHandle errors with \ntry\n and \nexcept\n.\n\n\nRaise exceptions with a \nraise\n statement and the \nException()\n function.\n\n\ntraceback\n module. \n\n\nDiscover what and how an error happens and obtain it as a string with the \ntraceback.format_exc()\n method. \n\n\nAn assertion is a sanity check performed with an \nassert\n statement. \n\n\nlogging\n module. \n\n\nDisplay log messages as the program runs. Log to a file. Debug a code. Enable and disable logging. Enable an IDLE debugger.\n\n\nSet a \nbreakpoint\n to check out potential bugs.\n\n\nChapter 11, Web Scraping\n\u00b6\n\n\nhtml\n\n\nwebbrowser\n module.\n\n\nOpen a browser to a specific webpage (in conjunction with the \nsys\n module). \n\n\nUse:\n\n\n\n\nGet a street address from the command line to the clipboard.\n\n\nGo to a Google Maps page.\n\n\nRead command line arguments from \nsys.argv\n.\n\n\nRead the clipboard content.\n\n\nOpen all links on a page in separate tabs.\n\n\nOpen the browser to the url for local weather.\n\n\nOpen several social network sites.\n\n\n\n\nrequests\n module.\n\n\nDownload files and webpages; similar to opening, reading, writing, closing files and folders. \n\n\n\n\nSimpler than the \nurllib2\n module.\n\n\nCan check out errors.\n\n\nSave the downloaded files.\n\n\n\n\nHTML crash course!\n\n\nbs4\n module (BeautifulSoup).\n\n\n\n\nBeautifulSoup()\n function; parses HTML. \n\n\nselect()\n method;  find an element. \n\n\nGet data from an element\u2019s attributes.\n\n\n\n\nUse:\n\n\n\n\nSearch Google.\n\n\nRetrieve search results.\n\n\nOpen tabs for each results.\n\n\nRead the command line arguments from \nsys.argv\n.\n\n\nFetch results with the \nrequests\n module.\n\n\nFind the links.\n\n\nDownload all images, videos, files, etc.\n\n\nBack up an entire site by following all of its links.\n\n\nCopy all the messages off a web forum.\n\n\nDuplicate the catalogue of items for sale on an online store.\n\n\n\n\nselenium\n module.\n\n\nLaunches and controls a web browser. Fill and submit forms. Simulate mouse clicks. Find elements on a page. Click on a page. Send special keys.\n\n\nCombining modules :\n\n\n\n\nCommand line emailer.\n\n\nImage site downloader.\n\n\nLink verification.\n\n\n\n\nChapter 12, Excel Spreadsheets\n\u00b6\n\n\nopenpyxl\n module.\n\n\nRead Excel documents. Open Excel documents. Get sheets from a workbook. Get cells from the sheets. Convert letters and numbers. Get rows and columns from sheets. Write results to a file.\n\n\nUse:\n\n\n\n\nCompare data across multiple rows in a spreadsheet.\n\n\nOpen multiple files and compare data.\n\n\nCheck blank rows or invalid data in any cells.\n\n\nRead data and use it as the input for Python programs.\n\n\nWrite Excel Documents.\n\n\nCreate and save Excel documents.\n\n\nCreate and remove sheets.\n\n\nWrite values to cells.\n\n\nUpdate a spreadsheet.\n\n\nRead data from one spreadsheet and write it to parts of other spreadsheets.\n\n\nRead data from websites, text files, or the clipboard and write it to a spreadsheet.\n\n\nClean up data, regular expressions.\n\n\nSet the font style, objects, formulas.\n\n\nAdjust rows and columns.\n\n\nSet row height and column width.\n\n\nMerge and unmerge cells.\n\n\nFreeze panes.\n\n\nCreate charts.\n\n\nInsert blank rows.\n\n\nConvert text files to spreadsheets, vice-versa.\n\n\n\n\nChapter 13, PDF and Word Documents\n\u00b6\n\n\nPyPDF2\n module.\n\n\nExtract text from a PDF. Decrypt a PDF. Create PDF. Copy pages, rotate pages, overlay pages from a PDF. Add a logo, a timestamp, a watermark to a PDF.\n\n\nUse:\n\n\n\n\nCombine pages from many PDF.\n\n\nCut out specific pages.\n\n\nReorder pages.\n\n\nCreate a PDF from only those pages that have some specific text.\n\n\n\n\npython-docx\n module.\n\n\nRead word documents. Get the full text from a .docs file. Style paragraphs. Create word documents with nondefault styles. Write word documents. Add headings, lines, page breaks, and pictures. \n\n\nUse:\n\n\n\n\nPDF Paranoia or encrypting a bunch of files.\n\n\nCustom invitations in Word.\n\n\nBrute-force PDF password breaker.\n\n\n\n\nChapter 14, CSV Files and JSON Data\n\u00b6\n\n\ncsv\n module.\n\n\nRead, open CSV. Split the file. Print CSV. Loop within a file or through many files. Write CSV. Change delimiters and lineterminators. Remove the header.\n\n\nUse:\n\n\n\n\nCompare data between different rows in a CSV file or between multiple CSV files.\n\n\nCopy specific data from a CSV file to an Excel file; vice-versa.\n\n\nCheck for invalid data or formatting mistakes in CSV files and alert the user.\n\n\nRead data from CSV file as input for Python programs.\n\n\nExcel to CSV to Excel converter (in conjunction with the \nopenpyxl\n module).\n\n\n\n\njson\n module.\n\n\nAlike web scraping. API. Read,  load, write, dump data.\n\n\nUse:\n\n\n\n\nFetch weather from a website.\n\n\nCollect weather forecasts for several campsites or hiking trails.\n\n\nSchedule a program to regularly check weather and send your a frost alert.\n\n\nPull weather data from multiple sites to show all at once, or calculate and show the average of multiple weather predictions.\n\n\n\n\nChapter 15, Time, Scheduling Tasks, and Launching Programs\n\u00b6\n\n\ntime\n module.\n\n\nRead the system clock for the current time. Pause a program (sleep). Round numbers.\n\n\nUse:\n\n\n\n\nTrack how much time spent on tasks with a stopwatch.\n\n\nRecord track times or lap times.\n\n\nBuild a program that launches other programs on a schedule by using the \nsubprocess\n and \nthreading\n modules.\n\n\nCreate a timesheet app that records when you enter data, and use the current time to clock them in or out.\n\n\nAdd a feature to a program to display the elapsed time since a process started (in conjunction with the \nrequests\n module).\n\n\nCheck how long a program has been running and offer the user a chance to cancel tasks.\n\n\n\n\ndatetime\n module.\n\n\nCompute time and date delta. Retrieve a specific moment. Add a timestamp. Add pauses to a routine. Convert datetime object to strings. Convert strings to datetime objects.   \n\n\nUse:\n\n\n\n\nMultithreading; modify a program to use a function. Create and start threads (see above).\n\n\nPass command line arguments.\n\n\nTask scheduler.\n\n\nOpen websites (time event).\n\n\nRun Python scripts (time event).\n\n\nOpen files (time event).\n\n\nCreate a countdown program.\n\n\nSchedule downloader (time event).\n\n\n\n\nChapter 16, Sending Email and Text Messages\n\u00b6\n\n\nhttp, smtp, mail, imap\n\n\nsmtplib\n module.\n\n\nConnect to an SMTP server. Log in. Search for emails. Send a message. Encrypt emails. Retrieve and delete emails. Disconnect from the SMTP server.\n\n\nimapclient\n module.\n\n\nConnect to an IMAP server. Log in. Search for emails. Fetch an email and mark it as read. Get email addresses from a raw message. Get the body from a raw message. Delete emails. Disconnect from the IMAP server.\n\n\nUse:\n\n\n\n\nSend members dues reminders.\n\n\nSend text messages.\n\n\nRandom emailer.\n\n\n\u2018Umbrella\u2019 reminder (in conjunction with weather forecasts and the \nrequests\n module).\n\n\nAuto-unsubscriber.\n\n\n\n\ntwilio\n module.\n\n\nSend text messages, SMS.\n\n\nChapter 17, Manipulating Images\n\u00b6\n\n\nColor and RGBA crash course!\n\n\nPIL\n module.\n\n\nManipulate images with Pillow. Work with the image data type. Crop, copy, paste an image. Multiply images tiles. Resize, rotate, flip an image. Change pixels. Draw on images (points, lines, rectangles, ellipses, polygons, text). \n\n\nUse:\n\n\n\n\nLoop through a folder of images.\n\n\nImage batch processing: resizing, cropping, copying and pasting, rotating, etc.\n\n\nAdding a logo to several images.\n\n\nIdentify the photo folders.\n\n\nCreate custom cards with custom invitations in Word (see chapter 13).\n\n\n\n\nChapter 18, Controlling the Keyboard and Mouse with GUI Automation\n\u00b6\n\n\nvirtual keystrokes, mouse clicks\n\n\npyautogui\n module and dependencies based of the OS in use.\n\n\nShutdown the computer. Log out from a session. Pauses, fail-safes. Control mouse movements and move the mouse. Get the mouse position and control the mouse. Control the keyboard. Send a string from the keyboard. Type in key name. Press and release buttons. Activate hotkey.\n\n\nUse:\n\n\n\n\nImage recognition.\n\n\nAutomatic form filler.\n\n\nLook busy!\n\n\nInstant messenger bot.\n\n\nGame-playing bot tutorial.\n\n\n\n\nAppendix A\n\u00b6\n\n\n\n\nPIP.\n\n\nInstalling modules.\n\n\n\n\nAppendix B\n\u00b6\n\n\n\n\nRunning programs.\n\n\nShebang line.\n\n\nOn Windows.\n\n\nOn UNIX.\n\n\n\n\nAppendix C\n\u00b6\n\n\nAnswers from questions: chapter 2 to 18.\n\n\nAdditional Content\n\u00b6\n\n\n\n\nDownload files used in the book.\n\n\nList of JSON API:\n\n\nTwitter API.\n\n\nFacebook Social Graph API.\n\n\nFlickr.\n\n\nYouTube.\n\n\nOpenStreetMap.\n\n\nGoogle Maps.\n\n\nImgur API.\n\n\n26 Weather APIs.\n\n\nRotten Tomatoes.\n\n\nReddit.\n\n\n\n\n\n\nList of programming practice sites. (programming problems you can try to practice your coding skills).\n\n\nList of web comics.\n\n\nSchedulers (operating system scheduling process).\n\n\nHow to do PyCon or any tech conference.",
            "title": "Automate the Boring Stuff with Python"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-3-functions",
            "text": "global, local, variable, scope  Exception handling with  try:  and  except .",
            "title": "Chapter 3, Functions"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-4-lists-and-tuples",
            "text": "data type, index, sublist, subset, slice,  change, concatenate, concatenation, tuple, convert, tuple to list   len()  function; length.  in  and  not in  operators.  += ,  -= ,  *= ,  /= ,  %=  augmented assignments.  index()  method; extract the position of an element.  append()  method.  insert()  method.  remove()  method.  sort()  method.  copy  module and  copy()  method.  deepcopy()  method; for inner list or a list of lists (ensure the key exists).",
            "title": "Chapter 4, Lists (and Tuples)"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-5-dictionaries-and-structuring-data",
            "text": "loop  Dictionaries are not indexed and ordered like lists.   keys()  method; extract keys.  values()  method; extract values.  items()  method; extract both.  get()  method; check out both.  in  and  not in  operators.   setdefault()  method, check out a key and set value to a key.   Pretty print with the  pprint()  and  pformat()  functions.  Nested dictionaries and lists.",
            "title": "Chapter 5, Dictionaries and Structuring Data"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-6-manipulating-strings",
            "text": "Escape character:  \\ :  \\' ,  \\\" ,  \\t ,  \\n ,  \\\\ .  Raw strings:  print(r'That is Carol') .  Triple quotes:  1\n2\n3\n4\n5\n6\n7 print ( '''Dear Alice,  bla-bla-bla  cheers''' )  print ( \"\"\"Dear Alice,  bla-bla-bla  cheers\"\"\" )    Comment:  # . \nMultiline comments:  \"\"\" \"\"\" .   Slice, subset with  [:] .  in  and  not in  operators.  lower()  method.  upper()  method.  capitalize()  method.  is  method; check if x is part of y.  islower()  method.  isupper()  method.  isalpha()  method; check letters, not blank.  isalnum()  method; check letters and numbers, and not blank.  isdecimal()  method; check numeric characters and not blank.  isspace()  method; check spaces, tabs and new lines and not blank.  istitle()  method; check if it begins with an uppercase letter followed with lowercase letters.  startwith()  method; check if a string begins with a string of characters.  endwith()  method; idem.  join()  method; concatenate.  split()  method.  rjust()  method; justify.  ljust()  method justify.  center()  method.  strip()  method; remove white space.  rstrip()  method; ; remove white space to the right.  lstrip()  method; remove white space to the left.   pyperclip  module.  The  pyperclip.pyclip  function send text to and receive text from the clipboard:  In addition:  1\n2\n3\n4 import   pyperclip  pyperclip . copy ( 'Hello world!' )  pyperclip . paste ()",
            "title": "Chapter 6, Manipulating Strings"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-7-pattern-matching-and-regular-expressions",
            "text": "patterns of text, with, without regular expression, regex, object, match, matching, group, grouping, pipe, question mark, star, ?, *, plus, +, curly bracket, {, }, character class, digit, numeric, letter, underscore, space, tab, newline, caret, ^, dollar sign, $, wildcard, dot, ., dotstar, newline, symbols, case-sensitive, case-insensitive  re  module.   re.compile()  method; find a single occurrence.  re.findall()  method; find all occurrences.  sub()  method; substitute.  re.IGNORECASE ; ignore capitalization with the  compile()  method.  re.DOTALL ; ignore dots with the  re.compile()  method.  re.VERBOSE ; write comment with the  re.compile()  method.",
            "title": "Chapter 7, Pattern Matching and Regular Expressions"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-8-reading-and-writing-files",
            "text": "file, file path, filename  os  module.   A relative path:  ..\\eggs\\spam.txt ,  .\\fizz\\spam.txt .  An absolute path:  C:\\bacon\\fizz\\spam.txt .  os.getcwd()  or  os.chdir()  functions; extract the current working directory.  os.makedir() function; create a new folder.   os.path  module.   Handle absolute and relative paths. Find file sizes and folder contents. Check path validity.  Windows: backslash or  \\ :  1\n2 import   os  os . path . join ( 'usr' ,   'bin' ,   'spam' )    Yields:  1 'usr \\\\ bin \\\\ spam'    UNIX: forwardslash or  / :  1\n2 import   os  os . path . join ( 'usr' ,   'bin' ,   'spam' )    Yields:  1 'usr/bin/spam'    Read and write files:   os.path.open()  function.  os.path.read()  method.  os.path.readline()  method.  os.path.write()  method.  os.path.close()  method.   shelve  module.  Handle binary files.  pprint  module.   Pretty printing:   pprint.pprint() .  pprint.pformat() .",
            "title": "Chapter 8, Reading and Writing Files"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-9-organizing-files",
            "text": "pdf, every sub-folder, folder, foldername, subfolder, filename, file, remove, zero, change titles, compress, decompress, zip, unzip  shutil  module.   Copy, move, rename, and delete files and folders.  shutil.rmtree()  function; delete file and folder.  os  module.   Delete, empty, remove files and folders, and change the path.  os.walk()  method; walk the tree directory.  send2trash  module.   Delete files and folders, but much safer.  zipfile  module.   Compress and uncompress. Read the content of compressed and zipped files.   zipfile.extracall() ; method  extracts all the files and folders from a zip file.  write()  method; create a zip file.",
            "title": "Chapter 9, Organizing Files"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-10-debugging",
            "text": "Handle errors with  try  and  except .  Raise exceptions with a  raise  statement and the  Exception()  function.  traceback  module.   Discover what and how an error happens and obtain it as a string with the  traceback.format_exc()  method.   An assertion is a sanity check performed with an  assert  statement.   logging  module.   Display log messages as the program runs. Log to a file. Debug a code. Enable and disable logging. Enable an IDLE debugger.  Set a  breakpoint  to check out potential bugs.",
            "title": "Chapter 10, Debugging"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-11-web-scraping",
            "text": "html  webbrowser  module.  Open a browser to a specific webpage (in conjunction with the  sys  module).   Use:   Get a street address from the command line to the clipboard.  Go to a Google Maps page.  Read command line arguments from  sys.argv .  Read the clipboard content.  Open all links on a page in separate tabs.  Open the browser to the url for local weather.  Open several social network sites.   requests  module.  Download files and webpages; similar to opening, reading, writing, closing files and folders.    Simpler than the  urllib2  module.  Can check out errors.  Save the downloaded files.   HTML crash course!  bs4  module (BeautifulSoup).   BeautifulSoup()  function; parses HTML.   select()  method;  find an element.   Get data from an element\u2019s attributes.   Use:   Search Google.  Retrieve search results.  Open tabs for each results.  Read the command line arguments from  sys.argv .  Fetch results with the  requests  module.  Find the links.  Download all images, videos, files, etc.  Back up an entire site by following all of its links.  Copy all the messages off a web forum.  Duplicate the catalogue of items for sale on an online store.   selenium  module.  Launches and controls a web browser. Fill and submit forms. Simulate mouse clicks. Find elements on a page. Click on a page. Send special keys.  Combining modules :   Command line emailer.  Image site downloader.  Link verification.",
            "title": "Chapter 11, Web Scraping"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-12-excel-spreadsheets",
            "text": "openpyxl  module.  Read Excel documents. Open Excel documents. Get sheets from a workbook. Get cells from the sheets. Convert letters and numbers. Get rows and columns from sheets. Write results to a file.  Use:   Compare data across multiple rows in a spreadsheet.  Open multiple files and compare data.  Check blank rows or invalid data in any cells.  Read data and use it as the input for Python programs.  Write Excel Documents.  Create and save Excel documents.  Create and remove sheets.  Write values to cells.  Update a spreadsheet.  Read data from one spreadsheet and write it to parts of other spreadsheets.  Read data from websites, text files, or the clipboard and write it to a spreadsheet.  Clean up data, regular expressions.  Set the font style, objects, formulas.  Adjust rows and columns.  Set row height and column width.  Merge and unmerge cells.  Freeze panes.  Create charts.  Insert blank rows.  Convert text files to spreadsheets, vice-versa.",
            "title": "Chapter 12, Excel Spreadsheets"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-13-pdf-and-word-documents",
            "text": "PyPDF2  module.  Extract text from a PDF. Decrypt a PDF. Create PDF. Copy pages, rotate pages, overlay pages from a PDF. Add a logo, a timestamp, a watermark to a PDF.  Use:   Combine pages from many PDF.  Cut out specific pages.  Reorder pages.  Create a PDF from only those pages that have some specific text.   python-docx  module.  Read word documents. Get the full text from a .docs file. Style paragraphs. Create word documents with nondefault styles. Write word documents. Add headings, lines, page breaks, and pictures.   Use:   PDF Paranoia or encrypting a bunch of files.  Custom invitations in Word.  Brute-force PDF password breaker.",
            "title": "Chapter 13, PDF and Word Documents"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-14-csv-files-and-json-data",
            "text": "csv  module.  Read, open CSV. Split the file. Print CSV. Loop within a file or through many files. Write CSV. Change delimiters and lineterminators. Remove the header.  Use:   Compare data between different rows in a CSV file or between multiple CSV files.  Copy specific data from a CSV file to an Excel file; vice-versa.  Check for invalid data or formatting mistakes in CSV files and alert the user.  Read data from CSV file as input for Python programs.  Excel to CSV to Excel converter (in conjunction with the  openpyxl  module).   json  module.  Alike web scraping. API. Read,  load, write, dump data.  Use:   Fetch weather from a website.  Collect weather forecasts for several campsites or hiking trails.  Schedule a program to regularly check weather and send your a frost alert.  Pull weather data from multiple sites to show all at once, or calculate and show the average of multiple weather predictions.",
            "title": "Chapter 14, CSV Files and JSON Data"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-15-time-scheduling-tasks-and-launching-programs",
            "text": "time  module.  Read the system clock for the current time. Pause a program (sleep). Round numbers.  Use:   Track how much time spent on tasks with a stopwatch.  Record track times or lap times.  Build a program that launches other programs on a schedule by using the  subprocess  and  threading  modules.  Create a timesheet app that records when you enter data, and use the current time to clock them in or out.  Add a feature to a program to display the elapsed time since a process started (in conjunction with the  requests  module).  Check how long a program has been running and offer the user a chance to cancel tasks.   datetime  module.  Compute time and date delta. Retrieve a specific moment. Add a timestamp. Add pauses to a routine. Convert datetime object to strings. Convert strings to datetime objects.     Use:   Multithreading; modify a program to use a function. Create and start threads (see above).  Pass command line arguments.  Task scheduler.  Open websites (time event).  Run Python scripts (time event).  Open files (time event).  Create a countdown program.  Schedule downloader (time event).",
            "title": "Chapter 15, Time, Scheduling Tasks, and Launching Programs"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-16-sending-email-and-text-messages",
            "text": "http, smtp, mail, imap  smtplib  module.  Connect to an SMTP server. Log in. Search for emails. Send a message. Encrypt emails. Retrieve and delete emails. Disconnect from the SMTP server.  imapclient  module.  Connect to an IMAP server. Log in. Search for emails. Fetch an email and mark it as read. Get email addresses from a raw message. Get the body from a raw message. Delete emails. Disconnect from the IMAP server.  Use:   Send members dues reminders.  Send text messages.  Random emailer.  \u2018Umbrella\u2019 reminder (in conjunction with weather forecasts and the  requests  module).  Auto-unsubscriber.   twilio  module.  Send text messages, SMS.",
            "title": "Chapter 16, Sending Email and Text Messages"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-17-manipulating-images",
            "text": "Color and RGBA crash course!  PIL  module.  Manipulate images with Pillow. Work with the image data type. Crop, copy, paste an image. Multiply images tiles. Resize, rotate, flip an image. Change pixels. Draw on images (points, lines, rectangles, ellipses, polygons, text).   Use:   Loop through a folder of images.  Image batch processing: resizing, cropping, copying and pasting, rotating, etc.  Adding a logo to several images.  Identify the photo folders.  Create custom cards with custom invitations in Word (see chapter 13).",
            "title": "Chapter 17, Manipulating Images"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-18-controlling-the-keyboard-and-mouse-with-gui-automation",
            "text": "virtual keystrokes, mouse clicks  pyautogui  module and dependencies based of the OS in use.  Shutdown the computer. Log out from a session. Pauses, fail-safes. Control mouse movements and move the mouse. Get the mouse position and control the mouse. Control the keyboard. Send a string from the keyboard. Type in key name. Press and release buttons. Activate hotkey.  Use:   Image recognition.  Automatic form filler.  Look busy!  Instant messenger bot.  Game-playing bot tutorial.",
            "title": "Chapter 18, Controlling the Keyboard and Mouse with GUI Automation"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#appendix-a",
            "text": "PIP.  Installing modules.",
            "title": "Appendix A"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#appendix-b",
            "text": "Running programs.  Shebang line.  On Windows.  On UNIX.",
            "title": "Appendix B"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#appendix-c",
            "text": "Answers from questions: chapter 2 to 18.",
            "title": "Appendix C"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#additional-content",
            "text": "Download files used in the book.  List of JSON API:  Twitter API.  Facebook Social Graph API.  Flickr.  YouTube.  OpenStreetMap.  Google Maps.  Imgur API.  26 Weather APIs.  Rotten Tomatoes.  Reddit.    List of programming practice sites. (programming problems you can try to practice your coding skills).  List of web comics.  Schedulers (operating system scheduling process).  How to do PyCon or any tech conference.",
            "title": "Additional Content"
        },
        {
            "location": "/Real_Python/",
            "text": "CONTENT\n\n\nPart 1: Introduction to Python\n\n\n0) Introduction\n\n\n0.1) Why Python?\n\n\n0.2) Why this book?\n\n\n0.3) How to use this book\n\n\n0.4) License\n\n\n\n\n\n\n1) Getting Started\n\n\n1.1) Download Python\n\n\n1.2) Open IDLE\n\n\n1.3) Write a Python Script\n\n\n1.4) Screw Things Up\n\n\n1.5) Store a Variable\n\n\n\n\n\n\n2) Interlude: Leave yourself helpful notes\n\n\n2.1) Learn to speak in Python\n\n\n2.2) Mess around with your words\n\n\n2.3) Use objects and methods\n\n\n\n\n\n\n3) Fundamentals: Working with Strings\n\n\n3.1) Mic and match different objects\n\n\n3.2) Streamline your print statements\n\n\n3.3) Find a string in a string\n\n\nAssignment: Turn your user into a 133t h4x0r\n\n\n\n\n\n\n4) Fundamentals: Functions and Loops\n\n\n4.1) Do futuristic arithmetic\n\n\n4.2) Create Your Own Functions\n\n\n4.3) Run in circles\n\n\n\n\n\n\nInterlude: Debug your code\n\n\n5) Fundamentals: Conditional Logic\n\n\n5.1) Compare Values\n\n\n5.2) Add Some Logic\n\n\n5.3) Control the Flow of Your Program\n\n\n5.4) Break Out of the Pattern\n\n\n5.5) Recover from errors\n\n\n5.6) Simulate Events and Calculate Probabilities\n\n\n5.7) Assignment: Simulate an election\n\n\n5.8) Assignment: Simulate a coin toss experiment\n\n\n\n\n\n\n6) Fundamentals: Lists and Dictionaries\n\n\n6.1) Make and update lists\n\n\n6.2) Make Permanent Lists\n\n\n6.3) Store Relationships in Dictionaries\n\n\n\n\n\n\n7) File Input and Output\n\n\n7.1) Read and write simple files\n\n\n7.2) Use more complicated folder structure\n\n\n7.4) Read and write CSV data\n\n\n\n\n\n\nInterlude: Install Packages\n\n\n8) Interact with PDF files\n\n\n8.1) Read and write PDFs\n\n\n8.2) Manipulate PDF Files\n\n\n\n\n\n\n9) SQL Database Connections\n\n\n9.1) Communicate with databases using SQLite\n\n\n9.2) Use Other SQL Variants\n\n\n\n\n\n\n10) Interacting with the Web\n\n\n10.1) Scrape and Parse Text From Websites\n\n\n10.2) Use an HTML Parser to Scrape Websites\n\n\n10.3) Interact with HTML Forms\n\n\n10.4) Interact with Websites in Real-time\n\n\n\n\n\n\n11) Scientific Computing and Graphing\n\n\n11.1) Use Numpy for Matrix Manipulation\n\n\n11.2) Use matplotlib for Plotting Graphs\n\n\n\n\n\n\n12) Graphical User Interface\n\n\n12.1) Add GUI elements with EasyGUI\n\n\n12.2) Create GUI Application with Tkinter\n\n\n\n\n\n\n13) Web applications\n\n\n13.1) Create a simple web application\n\n\n13.2) Create an interactive web application\n\n\n13.3) Put your web application online\n\n\n\n\n\n\n14) Final Thoughts\n\n\nAcknowledgements\n\n\n\n\n\n\nPart 2: Web Development with Python\n\n\nPart 3: Advanced Web Development with Django\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2. Real Python \u2013 An introduction to Python through pactical examples, c2.4, 2013. Creative Commons. Excerpt at \nrealpython.com/\n.\n\n\n\n\nPart 1: Introduction to Python\n\u00b6\n\n\n0) Introduction\n\u00b6\n\n\n0.1) Why Python?\n\u00b6\n\n\n0.2) Why this book?\n\u00b6\n\n\n0.3) How to use this book\n\u00b6\n\n\n0.4) License\n\u00b6\n\n\n1) Getting Started\n\u00b6\n\n\n1.1) Download Python\n\u00b6\n\n\n1.2) Open IDLE\n\u00b6\n\n\n1.3) Write a Python Script\n\u00b6\n\n\n1.4) Screw Things Up\n\u00b6\n\n\n1.5) Store a Variable\n\u00b6\n\n\n2) Interlude: Leave yourself helpful notes\n\u00b6\n\n\n2.1) Learn to speak in Python\n\u00b6\n\n\n2.2) Mess around with your words\n\u00b6\n\n\n2.3) Use objects and methods\n\u00b6\n\n\nAssignment: Pick apart your user\u2019s input\n\n\n3) Fundamentals: Working with Strings\n\u00b6\n\n\n3.1) Mic and match different objects\n\u00b6\n\n\n3.2) Streamline your print statements\n\u00b6\n\n\n3.3) Find a string in a string\n\u00b6\n\n\nAssignment: Turn your user into a 133t h4x0r\n\u00b6\n\n\n4) Fundamentals: Functions and Loops\n\u00b6\n\n\n4.1) Do futuristic arithmetic\n\u00b6\n\n\n4.2) Create Your Own Functions\n\u00b6\n\n\n4.3) Run in circles\n\u00b6\n\n\nAssignments: Perform calculations on user input, Convert temperatures, Track your investments\n\n\nInterlude: Debug your code\n\u00b6\n\n\n5) Fundamentals: Conditional Logic\n\u00b6\n\n\n5.1) Compare Values\n\u00b6\n\n\n5.2) Add Some Logic\n\u00b6\n\n\n5.3) Control the Flow of Your Program\n\u00b6\n\n\n5.4) Break Out of the Pattern\n\u00b6\n\n\n5.5) Recover from errors\n\u00b6\n\n\n5.6) Simulate Events and Calculate Probabilities\n\u00b6\n\n\n5.7) Assignment: Simulate an election\n\u00b6\n\n\n5.8) Assignment: Simulate a coin toss experiment\n\u00b6\n\n\nAssignments: Find the factors of a number, Simulate an election, Simulate a coin toss experiment\n\n\n6) Fundamentals: Lists and Dictionaries\n\u00b6\n\n\n6.1) Make and update lists\n\u00b6\n\n\n6.2) Make Permanent Lists\n\u00b6\n\n\n6.3) Store Relationships in Dictionaries\n\u00b6\n\n\nAssignment: Wax poetic\n\n\n7) File Input and Output\n\u00b6\n\n\n7.1) Read and write simple files\n\u00b6\n\n\n7.2) Use more complicated folder structure\n\u00b6\n\n\n7.4) Read and write CSV data\n\u00b6\n\n\nAssignments: Use pattern matching to delete files, Create a high scores list from CSV data\n\n\nInterlude: Install Packages\n\u00b6\n\n\n8) Interact with PDF files\n\u00b6\n\n\n8.1) Read and write PDFs\n\u00b6\n\n\n8.2) Manipulate PDF Files\n\u00b6\n\n\nAssignment: Add a cover sheet to a PDF file\n\n\n9) SQL Database Connections\n\u00b6\n\n\n9.1) Communicate with databases using SQLite\n\u00b6\n\n\n9.2) Use Other SQL Variants\n\u00b6\n\n\n10) Interacting with the Web\n\u00b6\n\n\n10.1) Scrape and Parse Text From Websites\n\u00b6\n\n\n10.2) Use an HTML Parser to Scrape Websites\n\u00b6\n\n\n10.3) Interact with HTML Forms\n\u00b6\n\n\n10.4) Interact with Websites in Real-time\n\u00b6\n\n\n11) Scientific Computing and Graphing\n\u00b6\n\n\n11.1) Use Numpy for Matrix Manipulation\n\u00b6\n\n\n11.2) Use matplotlib for Plotting Graphs\n\u00b6\n\n\nAssignment: Plot a graph from CSV data\n\n\n12) Graphical User Interface\n\u00b6\n\n\n12.1) Add GUI elements with EasyGUI\n\u00b6\n\n\n12.2) Create GUI Application with Tkinter\n\u00b6\n\n\nAssignments: Use GUI elements to help a user modify files, Return of the poet\n\n\n13) Web applications\n\u00b6\n\n\n13.1) Create a simple web application\n\u00b6\n\n\n13.2) Create an interactive web application\n\u00b6\n\n\n13.3) Put your web application online\n\u00b6\n\n\nAssignment: The poet gains a web presence\n\n\n14) Final Thoughts\n\u00b6\n\n\nAcknowledgements\n\u00b6\n\n\nPart 2: Web Development with Python\n\u00b6\n\n\nPart 3: Advanced Web Development with Django\n\u00b6",
            "title": "Real Python"
        },
        {
            "location": "/Real_Python/#0-introduction",
            "text": "",
            "title": "0) Introduction"
        },
        {
            "location": "/Real_Python/#01-why-python",
            "text": "",
            "title": "0.1) Why Python?"
        },
        {
            "location": "/Real_Python/#02-why-this-book",
            "text": "",
            "title": "0.2) Why this book?"
        },
        {
            "location": "/Real_Python/#03-how-to-use-this-book",
            "text": "",
            "title": "0.3) How to use this book"
        },
        {
            "location": "/Real_Python/#04-license",
            "text": "",
            "title": "0.4) License"
        },
        {
            "location": "/Real_Python/#1-getting-started",
            "text": "",
            "title": "1) Getting Started"
        },
        {
            "location": "/Real_Python/#11-download-python",
            "text": "",
            "title": "1.1) Download Python"
        },
        {
            "location": "/Real_Python/#12-open-idle",
            "text": "",
            "title": "1.2) Open IDLE"
        },
        {
            "location": "/Real_Python/#13-write-a-python-script",
            "text": "",
            "title": "1.3) Write a Python Script"
        },
        {
            "location": "/Real_Python/#14-screw-things-up",
            "text": "",
            "title": "1.4) Screw Things Up"
        },
        {
            "location": "/Real_Python/#15-store-a-variable",
            "text": "",
            "title": "1.5) Store a Variable"
        },
        {
            "location": "/Real_Python/#2-interlude-leave-yourself-helpful-notes",
            "text": "",
            "title": "2) Interlude: Leave yourself helpful notes"
        },
        {
            "location": "/Real_Python/#21-learn-to-speak-in-python",
            "text": "",
            "title": "2.1) Learn to speak in Python"
        },
        {
            "location": "/Real_Python/#22-mess-around-with-your-words",
            "text": "",
            "title": "2.2) Mess around with your words"
        },
        {
            "location": "/Real_Python/#23-use-objects-and-methods",
            "text": "Assignment: Pick apart your user\u2019s input",
            "title": "2.3) Use objects and methods"
        },
        {
            "location": "/Real_Python/#3-fundamentals-working-with-strings",
            "text": "",
            "title": "3) Fundamentals: Working with Strings"
        },
        {
            "location": "/Real_Python/#31-mic-and-match-different-objects",
            "text": "",
            "title": "3.1) Mic and match different objects"
        },
        {
            "location": "/Real_Python/#32-streamline-your-print-statements",
            "text": "",
            "title": "3.2) Streamline your print statements"
        },
        {
            "location": "/Real_Python/#33-find-a-string-in-a-string",
            "text": "",
            "title": "3.3) Find a string in a string"
        },
        {
            "location": "/Real_Python/#assignment-turn-your-user-into-a-133t-h4x0r",
            "text": "",
            "title": "Assignment: Turn your user into a 133t h4x0r"
        },
        {
            "location": "/Real_Python/#4-fundamentals-functions-and-loops",
            "text": "",
            "title": "4) Fundamentals: Functions and Loops"
        },
        {
            "location": "/Real_Python/#41-do-futuristic-arithmetic",
            "text": "",
            "title": "4.1) Do futuristic arithmetic"
        },
        {
            "location": "/Real_Python/#42-create-your-own-functions",
            "text": "",
            "title": "4.2) Create Your Own Functions"
        },
        {
            "location": "/Real_Python/#43-run-in-circles",
            "text": "Assignments: Perform calculations on user input, Convert temperatures, Track your investments",
            "title": "4.3) Run in circles"
        },
        {
            "location": "/Real_Python/#interlude-debug-your-code",
            "text": "",
            "title": "Interlude: Debug your code"
        },
        {
            "location": "/Real_Python/#5-fundamentals-conditional-logic",
            "text": "",
            "title": "5) Fundamentals: Conditional Logic"
        },
        {
            "location": "/Real_Python/#51-compare-values",
            "text": "",
            "title": "5.1) Compare Values"
        },
        {
            "location": "/Real_Python/#52-add-some-logic",
            "text": "",
            "title": "5.2) Add Some Logic"
        },
        {
            "location": "/Real_Python/#53-control-the-flow-of-your-program",
            "text": "",
            "title": "5.3) Control the Flow of Your Program"
        },
        {
            "location": "/Real_Python/#54-break-out-of-the-pattern",
            "text": "",
            "title": "5.4) Break Out of the Pattern"
        },
        {
            "location": "/Real_Python/#55-recover-from-errors",
            "text": "",
            "title": "5.5) Recover from errors"
        },
        {
            "location": "/Real_Python/#56-simulate-events-and-calculate-probabilities",
            "text": "",
            "title": "5.6) Simulate Events and Calculate Probabilities"
        },
        {
            "location": "/Real_Python/#57-assignment-simulate-an-election",
            "text": "",
            "title": "5.7) Assignment: Simulate an election"
        },
        {
            "location": "/Real_Python/#58-assignment-simulate-a-coin-toss-experiment",
            "text": "Assignments: Find the factors of a number, Simulate an election, Simulate a coin toss experiment",
            "title": "5.8) Assignment: Simulate a coin toss experiment"
        },
        {
            "location": "/Real_Python/#6-fundamentals-lists-and-dictionaries",
            "text": "",
            "title": "6) Fundamentals: Lists and Dictionaries"
        },
        {
            "location": "/Real_Python/#61-make-and-update-lists",
            "text": "",
            "title": "6.1) Make and update lists"
        },
        {
            "location": "/Real_Python/#62-make-permanent-lists",
            "text": "",
            "title": "6.2) Make Permanent Lists"
        },
        {
            "location": "/Real_Python/#63-store-relationships-in-dictionaries",
            "text": "Assignment: Wax poetic",
            "title": "6.3) Store Relationships in Dictionaries"
        },
        {
            "location": "/Real_Python/#7-file-input-and-output",
            "text": "",
            "title": "7) File Input and Output"
        },
        {
            "location": "/Real_Python/#71-read-and-write-simple-files",
            "text": "",
            "title": "7.1) Read and write simple files"
        },
        {
            "location": "/Real_Python/#72-use-more-complicated-folder-structure",
            "text": "",
            "title": "7.2) Use more complicated folder structure"
        },
        {
            "location": "/Real_Python/#74-read-and-write-csv-data",
            "text": "Assignments: Use pattern matching to delete files, Create a high scores list from CSV data",
            "title": "7.4) Read and write CSV data"
        },
        {
            "location": "/Real_Python/#interlude-install-packages",
            "text": "",
            "title": "Interlude: Install Packages"
        },
        {
            "location": "/Real_Python/#8-interact-with-pdf-files",
            "text": "",
            "title": "8) Interact with PDF files"
        },
        {
            "location": "/Real_Python/#81-read-and-write-pdfs",
            "text": "",
            "title": "8.1) Read and write PDFs"
        },
        {
            "location": "/Real_Python/#82-manipulate-pdf-files",
            "text": "Assignment: Add a cover sheet to a PDF file",
            "title": "8.2) Manipulate PDF Files"
        },
        {
            "location": "/Real_Python/#9-sql-database-connections",
            "text": "",
            "title": "9) SQL Database Connections"
        },
        {
            "location": "/Real_Python/#91-communicate-with-databases-using-sqlite",
            "text": "",
            "title": "9.1) Communicate with databases using SQLite"
        },
        {
            "location": "/Real_Python/#92-use-other-sql-variants",
            "text": "",
            "title": "9.2) Use Other SQL Variants"
        },
        {
            "location": "/Real_Python/#10-interacting-with-the-web",
            "text": "",
            "title": "10) Interacting with the Web"
        },
        {
            "location": "/Real_Python/#101-scrape-and-parse-text-from-websites",
            "text": "",
            "title": "10.1) Scrape and Parse Text From Websites"
        },
        {
            "location": "/Real_Python/#102-use-an-html-parser-to-scrape-websites",
            "text": "",
            "title": "10.2) Use an HTML Parser to Scrape Websites"
        },
        {
            "location": "/Real_Python/#103-interact-with-html-forms",
            "text": "",
            "title": "10.3) Interact with HTML Forms"
        },
        {
            "location": "/Real_Python/#104-interact-with-websites-in-real-time",
            "text": "",
            "title": "10.4) Interact with Websites in Real-time"
        },
        {
            "location": "/Real_Python/#11-scientific-computing-and-graphing",
            "text": "",
            "title": "11) Scientific Computing and Graphing"
        },
        {
            "location": "/Real_Python/#111-use-numpy-for-matrix-manipulation",
            "text": "",
            "title": "11.1) Use Numpy for Matrix Manipulation"
        },
        {
            "location": "/Real_Python/#112-use-matplotlib-for-plotting-graphs",
            "text": "Assignment: Plot a graph from CSV data",
            "title": "11.2) Use matplotlib for Plotting Graphs"
        },
        {
            "location": "/Real_Python/#12-graphical-user-interface",
            "text": "",
            "title": "12) Graphical User Interface"
        },
        {
            "location": "/Real_Python/#121-add-gui-elements-with-easygui",
            "text": "",
            "title": "12.1) Add GUI elements with EasyGUI"
        },
        {
            "location": "/Real_Python/#122-create-gui-application-with-tkinter",
            "text": "Assignments: Use GUI elements to help a user modify files, Return of the poet",
            "title": "12.2) Create GUI Application with Tkinter"
        },
        {
            "location": "/Real_Python/#13-web-applications",
            "text": "",
            "title": "13) Web applications"
        },
        {
            "location": "/Real_Python/#131-create-a-simple-web-application",
            "text": "",
            "title": "13.1) Create a simple web application"
        },
        {
            "location": "/Real_Python/#132-create-an-interactive-web-application",
            "text": "",
            "title": "13.2) Create an interactive web application"
        },
        {
            "location": "/Real_Python/#133-put-your-web-application-online",
            "text": "Assignment: The poet gains a web presence",
            "title": "13.3) Put your web application online"
        },
        {
            "location": "/Real_Python/#14-final-thoughts",
            "text": "",
            "title": "14) Final Thoughts"
        },
        {
            "location": "/Real_Python/#acknowledgements",
            "text": "",
            "title": "Acknowledgements"
        },
        {
            "location": "/Real_Python/#part-2-web-development-with-python",
            "text": "",
            "title": "Part 2: Web Development with Python"
        },
        {
            "location": "/Real_Python/#part-3-advanced-web-development-with-django",
            "text": "",
            "title": "Part 3: Advanced Web Development with Django"
        },
        {
            "location": "/Managing Your Biological Data with Python/",
            "text": "CONTENT\n\n\nPart 1, Getting Started\n\n\nChapter 1, The Python Shell and Basics\n\n\nChapter 2, Your First Python Program\n\n\nPart 2, Data management\n\n\nChapter 3, Analyzing a Data Column\n\n\nChapter 4, Parsing Data Records\n\n\nChapter 5, Searching Data\n\n\nChapter 6, Filtering Data\n\n\nChapter 7, Managing Tabular Data\n\n\nChapter 8, Sorting Data\n\n\nChapter 9, Pattern Matching and Text Mining\n\n\nPart 3, Modular Programming\n\n\nChapter 10, Divide a Program into Functions\n\n\nChapter 11 Managing Complexity with Classes\n\n\nChapter 12 Debugging\n\n\nChapter 13, Using External Modules, The Python Interface to R\n\n\nChapter 14, Building Program Pipelines\n\n\nChapter 15, Writing Good Programs\n\n\nPart 4, Data Visualization\n\n\nChapter 16, Creating Scientific Diagrams\n\n\nChapter 18, Manipulating Images\n\n\nPart 6, Cookbook\n\n\nRecipe 2, Reversing and Randomizing a Sequence\n\n\nRecipe 3, Creating a Random Sequence with Probabilities\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and code snippets. Python 2. The book comes with files and cases. Python 2. From CRC Press, 2014.\n\n\n\n\nPart 1, Getting Started\n\u00b6\n\n\nChapter 1, The Python Shell and Basics\n\u00b6\n\n\nData structure\n\n\n\n\nBooleans: \nTrue\n or \nFalse\n.\n\n\nDictionaries: unordered collections of key-value pairs; both can be numbers or strings; indicated with \n{key1: value1, 'key2': 'value2'}\n.\n\n\nFloats: numbers with digits after the dicemal point,\n\n\nIntegers: numbers without digits after the decimal point.\n\n\nLists: mutable ordered collections of objects; indicated with \n[a, b, c]\n.\n\n\nSets: immutable unordered collections of unique elements; indicated by \n([a, b, c])\n.\n\n\nStrings: immutable ordered collections of characters; indicated with \n'single'\n or \n\"double\"\n quotation marks.\n\n\nTuples: immutable ordered collections of objects; indicated with \n(a, b, c)\n.\n\n\n\n\nConversions\n\n\nConvert or coerce data:\n\n- \nfloat(value)\n; into a float.\n\n- \nint(value)\n; into an integer.\n\n- \nstr(value)\n; into a string.\n\n\nStrings\n\n\n'Single'\n and \n\"double\"\n quotes are for short strings.\n\n\n\u2019\u2018\u2019Triple single and double quotes\n\nare rather multilines.\u2019\u2018\u2019\n\n\nAccess character and substrings\n\n\n\n\nprint s[-1]\n; print the last character of a string.\n\n\nprint s[-5:]\n; print from the 5\nth\n position from the end to the end.\n\n\n\n\nString functions\n\n\n\n\nlen(s)\n; length of the string,\n\n\ns.upper()\n; convert to uppercase.\n\n\ns.lower()\n; convert to lowercase.\n\n\ns.strip()\n; remove white spaces and tabs from both ends.\n\n\ns.strio('m')\n; remove \n'm'\n from both ends.\n\n\ns.rstrip()\n; remove on the right only.\n\n\ns.lstrip('m')\n; remove on the left only.\n\n\ns.split(' ')\n; cut into words where there is space.\n\n\ns.find('m')\n; search for the \n'm'\n substring and return the starting position.\n\n\ns.replace('m', 'n')\n; replace \n'm'\n with \n'n'\n.\n\n\ns.startwith('m')\n; check beginning and return \nTrue\n or \nFalse\n.\n\n\ns.endwith('m')\n; check end and return \nTrue\n or \nFalse\n.\n\n\n\n\nCreate lists\n\n\n\n\ndata = [1, 2, 3, 4, 5]\n.\n\n\ndata[1:3]\n; \n[2, 3]\n.\n\n\ndata[0:2]\n; \n[1, 2]\n.\n\n\ndata[:3]\n; \n[1, 2, 3]\n.\n\n\ndata[-2:]\n; \n[4, 5]\n.\n\n\ndata2 = data[:]\n; create a copy.\n\n\n\n\nModify lists\n\n\n\n\nl[i] = x\n; replace the i\nth\n element with \nx\n.\n\n\nl[i;j] = t\n; replace elements from \ni\n to \nj\n by \nt\n (iterable).\n\n\ndel l[i;j]\n; delete the elements of the list from \ni\n to \nj\n.\n\n\ndel s[i;k;k]\n; delete the elements of the list from \ni\n to \nj\n with stop \nk\n.\n\n\nl.append(x)\n; add element \nx\n to the list.\n\n\nl.extend(x)\n; add several element \nx\n to the list (iterable).\n\n\nl.count(x)\n; return the number of elements \nx\n in the list.\n\n\nl.index(x[. i[. j]])\n; return the smaller \nk\n such that \nl[k] = x\n and \ni <= k <= j\n.\n\n\nl.insert(i.x)\n; insert(wedge in) \nx\n.\n\n\nl.pop(i)\n; cancel the ith element and return its value; \nl.pop()\n does it for the last element.\n\n\nl.remove(x)\n; delete a choosen \nx\n element.\n\n\nl.reverse()\n; reverse the list order.\n\n\nl.sort()\n; sort the list.\n\n\nl.sort([cmp[. key[. reverse]]])\n; sort the list; \ncmp\n is a customized function for the comparison of element pairs that must return a negative value, zero, or a positive value depending on if the first element of the pair is lower than. equal to. or greater than the second element.\n\n\nsorted(l)\n; create a new list made of a simple ascending sort of the list without modifying the list.\n\n\n\n\nFunctions working of lists\n\n\n\n\nlen(data)\n; length of the list.\n\n\nmin(data)\n; smallest.\n\n\nmax(data)\n; largest.\n\n\nsum(data)\n; sum.\n\n\nrange(4)\n; create a list of number from 0 to 3.\n\n\nrange(1.5)\n; create a list of number from 1 to 4.\n\n\nrange(2.9.2)\n; create \n[2, 4, 6, 8]\n.\n\n\nrange(5, 0, -1)\n; create \n[5, 4, 3, 2, 1]\n\n\n\n\nTuples\n\n\n\n\nt = 1, 2, 3\n or \nt = (1, 2, 3)\n\n\nt = 1\n or \ntuple = (1,)\n\n\n\n\nAccessing data in dictionaries\n\n\n\n\nprices['banana']\n; return the value of the key.\n\n\nprices.get('banaba')\n; do the same thing, but if the key does not exit, it returns \nNone\n.\n\n\nprices.has_key('apple')\n; check whether the key(s) is(are) defined.\n\n\nprices.keys()\n; return a list of all keys.\n\n\nprices.values()\n; return a list of all values.\n\n\nprices.items()\n; return all keys and values as a list of tuples.\n\n\n\n\nModifying dictionaries\n\n\n\n\nprices['kiwi'] = 0.6\n; set the value of the key.\n\n\nprices.setdefault('egg', 0.9)\n; set the value of the key if it is not yet defined.\n\n\n\n\nNone\n\n\nNone indicate the object or part of it is empty. For example:\n\n- \na = None\n.\n\n- \nb = [None, None, 'green']\n.\n\n\nChapter 2, Your First Python Program\n\u00b6\n\n\nDifference between functions and methods\n\n\nFunctions are generic; use them anywhere without constraints. For example, \nlen()\n works on all data.\n\n\n1\n2\n3\n4\n>>>\n \nlen\n(\n'protein'\n)\n\n\n7\n\n\n>>>\n \nlen\n(\n'111'\n)\n\n\n3\n\n\n\n\n\n\n\nOther funtions, called methods, are specific; use them on a certain type of data. For example, \ncount()\n works only for strings or a \u2018string\u2019 variable (below, \nprotein\n is a string).\n\n\n1\n2\n3\n4\n>>>\n \n'protein'\n.\ncount\n(\n'r'\n)\n\n\n1\n\n\n>>>\n \n'occurence'\n.\ncount\n(\n'c'\n)\n\n\n3\n\n\n\n\n\n\n\nCount the occurrence of each amino acid in a protein sequence\n\n\ncount, element, in, string\n\n\n1\n2\n3\n4\n5\ninsulin\n \n=\n \n\"GIVEQCCTSICSLYQLENYCNFVNQHLCGSHLVEALYLVCGERGFFYTPKT\"\n\n\n\nfor\n \namino_acid\n \nin\n \n\"ACDEFGHIKLMNPQRSTVWY\"\n:\n\n    \nnumber\n \n=\n \ninsulin\n.\ncount\n(\namino_acid\n)\n\n    \nprint\n \namino_acid\n,\n \nnumber\n\n\n\n\n\n\n\nCreate a random DNA sequence of length 10\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \nrandom\n\n\n\nalphabet\n \n=\n \n\"AGCT\"\n\n\nsequence\n \n=\n \n\"\"\n\n\nfor\n \ni\n \nin\n \nrange\n(\n10\n):\n\n    \nindex\n \n=\n \nrandom\n.\nrandint\n(\n0\n,\n \n3\n)\n\n    \nsequence\n \n=\n \nsequence\n \n+\n \nalphabet\n[\nindex\n]\n\n\n\nprint\n \nsequence\n\n\n\n\n\n\n\nPart 2, Data management\n\u00b6\n\n\nChapter 3, Analyzing a Data Column\n\u00b6\n\n\nRead from a text file\n\n\n\n\nreadlines()\n.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ntext_file\n \n=\n \nopen\n(\n'neuron_data.txt'\n,\n \n'r'\n)\n\n\n# 'r' is facultative\n\n\n\nlines\n \n=\n \ntext_file\n.\nreadlines\n()\n\n\n\ntext_file\n.\nclose\n()\n\n\n\nprint\n \nlines\n\n\n\n\n\n\n\n\n\nread()\n. \n\n\n\n\n1\n2\n3\n4\n5\n6\ntext_file\n \n=\n \nopen\n(\n'neuron_data.txt'\n)\n\n\n# 'r' is facultative\n\n\n\nprint\n \ntext_file\n.\nread\n()\n\n\n\ntext_file\n.\nclose\n()\n\n\n\n\n\n\n\nDifference between \nread()\n and \nreadlines()\n\n\n\n\nread(x)\n; read up to x bytes in a file. If you don\u2019t supply the size, it reads the entire file. The output is displayed as strings only once.\n\n\nOne character = 1 byte.\n\n\nClose and reopen the file to read it again.\n\n\nreadlines(x)\n; read up to x bytes. If you don\u2019t supply a size, it reads all the data until it reaches a newline (\n\\n\n) or the end of a paragraph.\n\n\nClose and reopen the file to read it again.\n\n\n\n\nWrite a text file\n\n\n1\n2\n3\n4\n5\n6\noutput_file\n \n=\n \nopen\n(\n'counts.txt'\n,\n \n'w'\n)\n\n\n# 'w' is mandatory\n\n\n\noutput_file\n.\nwrite\n(\n'number of neuron lengths: 7\n\\n\n'\n)\n\n\n\noutput_file\n.\nclose\n()\n\n\n\n\n\n\n\nClean a text file\n\n\nstrip\n\n\n\n\nstrip()\n; removes blanks spaces.\n\n\nrstrip()\n; right only.\n\n\nlstrip()\n; left only.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\noutput_file\n \n=\n \nopen\n(\n'counts.txt'\n)\n\n\noutput_file\n.\nread\n()\n\n\noutput_file\n.\nclose\n()\n\n\n\n# vs\n\n\n\noutput_file\n \n=\n \nopen\n(\n'counts.txt'\n)\n\n\noutput_file\n.\nread\n()\n.\nstrip\n()\n\n\noutput_file\n.\nclose\n()\n\n\n\n\n\n\n\nWrite and then read the same file\n\n\n\n\n'r'\n; cannot write with, only reads.\n\n\n'w'\n; cannot read with, only writes (an existing file with the same name will be erased).\n\n\n'a'\n append; data added to the end. \n\n\n'r+'\n; both read and write (by replacing the existing string at the beginning by the new string).\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nfile1\n \n=\n \nopen\n(\n'count.txt'\n,\n'w'\n)\n\n\nfile1\n.\nwrite\n(\n'this is just a dummy test\n\\n\n'\n)\n\n\nfile1\n.\nclose\n()\n\n\n\nfile2\n \n=\n \nopen\n(\n'count.txt'\n,\n \n'r'\n)\n\n\nprint\n \nfile2\n.\nread\n()\n\n\nfile2\n.\nclose\n()\n\n\n\nfile3\n \n=\n \nopen\n(\n'count.txt'\n,\n'a'\n)\n\n\nfile3\n.\nwrite\n(\n'this is another test\n\\n\n'\n)\n\n\nfile3\n.\nclose\n()\n\n\n\nfile4\n \n=\n \nopen\n(\n'count.txt'\n,\n \n'r'\n)\n\n\nprint\n \nfile4\n.\nread\n()\n\n\nfile4\n.\nclose\n()\n\n\n\nfile5\n \n=\n \nopen\n(\n'count.txt'\n,\n \n'w'\n)\n\n\nfile5\n.\nwrite\n(\n'this is a final test\n\\n\n'\n)\n\n\nfile5\n.\nclose\n()\n\n\n\nfile6\n \n=\n \nopen\n(\n'count.txt'\n,\n \n'r'\n)\n\n\nprint\n \nfile6\n.\nread\n()\n\n\nfile6\n.\nclose\n()\n\n\n\n\n\n\n\nRead a series of numbers from a text file and print a summary of the data\n\n\nstrip, append, length, minimum, maximum, sort, format, integer, float\n\n\n\n\nstrip()\n; remove blank spaces.\n\n\nA text is string by default even thought the file contains numbers; transform the text into float.\n\n\nappend()\n; each line to a list.\n\n\nlen(data)\n.\n\n\nsum(data)\n.\n\n\nmin(data)\n.\n\n\nmax(data)\n.\n\n\nsort()\n.\n\n\n%4i\n is an integer with 4 digits.\n\n\n%6.1f\n is a float with 6 digits and 2 decimals.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\ndata\n \n=\n \n[]\n\n\n\nfor\n \nline\n \nin\n \nopen\n(\n'neuron_data.txt'\n):\n\n    \nlength\n \n=\n \nfloat\n(\nline\n.\nstrip\n())\n\n    \ndata\n.\nappend\n(\nlength\n)\n\n\n\nn_items\n \n=\n \nlen\n(\ndata\n)\n\n\ntotal\n \n=\n \nsum\n(\ndata\n)\n\n\nshortest\n \n=\n \nmin\n(\ndata\n)\n\n\nlongest\n \n=\n \nmax\n(\ndata\n)\n\n\n\ndata\n.\nsort\n()\n\n\n\n\noutput\n \n=\n \nopen\n(\n\"results.txt\"\n,\n\"w\"\n)\n\n\n\noutput\n.\nwrite\n(\n\"number of dendritic lengths : \n%4i\n \n\\n\n\"\n%\n(\nn_items\n))\n\n\noutput\n.\nwrite\n(\n\"total dendritic length      : \n%6.1f\n \n\\n\n\"\n%\n(\ntotal\n))\n\n\noutput\n.\nwrite\n(\n\"shortest dendritic length   : \n%7.2f\n \n\\n\n\"\n%\n(\nshortest\n))\n\n\noutput\n.\nwrite\n(\n\"longest dendritic length    : \n%7.2f\n \n\\n\n\"\n%\n(\nlongest\n))\n\n\noutput\n.\nwrite\n(\n\"\n%37.2f\n\\n\n%37.2f\n\"\n%\n(\ndata\n[\n-\n2\n],\n \ndata\n[\n-\n3\n]))\n\n\n\noutput\n.\nclose\n()\n\n\n\n\n\n\n\nFormat the data\n\n\nformatting, variable\n\n\n\n\n%s\n; a string.\n\n\n%d\n; a digit.\n\n\n%r\n; raw data.\n\n\n%10s\n; left-justify by 10 bytes.\n\n\n%-10s\n; right-justify. by bytes\n\n\n%i\n; an integer.\n\n\n%f\n; a float.\n\n\n%2f\n; a float with 2 digits.\n\n\n%2.2f\n; has 2 digits and 2 decimals.\n\n\n%2i\n; has 2 digits.\n\n\nAnd so on.\n\n\nstr()\n; turn a variable into a string (digit \n3\n to string \n'3'\n for example).\n\n\nint()\n; turn a variable into an integer (string \n'3'\n to digit \n3\n for example).\n\n\nfloat()\n; turn a variable into a float (digit \n3\n to \n3.0\n for example).\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nfile1\n \n=\n \nopen\n(\n'count.txt'\n,\n'w'\n)\n\n\nfile1\n.\nwrite\n(\n'this is just a dummy test'\n)\n\n\nfile1\n.\nclose\n()\n\n\n\nfile2\n \n=\n \nopen\n(\n'count.txt'\n,\n \n'r'\n)\n\n\nvariable\n \n=\n \nfile2\n.\nread\n()\n\n\n\nprint\n \n\"Test1: \n%r\n\"\n \n%\n \n(\nvariable\n)\n\n\nprint\n \n\"Test2: \n%s\n\"\n \n%\n \n(\nvariable\n)\n\n\nprint\n \n\"Test3: \n%30s\n\"\n \n%\n \n(\nvariable\n)\n\n\nprint\n \n\"Test4: \n%-30s\n\"\n \n%\n \n(\nvariable\n)\n\n\nprint\n \n\"Test5: \n%30r\n\"\n \n%\n \n(\nvariable\n)\n\n\nprint\n \n\"Test6: \n%-30r\n\"\n \n%\n \n(\nvariable\n)\n\n\nprint\n \n\"Test7: \n%d\n, \n%d\n, \n%d\n\"\n \n%\n \n(\n1\n,\n \n2\n,\n \n3\n)\n\n\nprint\n \n\"Test8: \n%2d\n, \n%3d\n, \n%10d\n\"\n \n%\n \n(\n1\n,\n \n2\n,\n \n3\n)\n\n\nprint\n \n\"Test9: \n%d\n, \n%i\n, \n%f\n\"\n \n%\n \n(\n1\n,\n \n2\n,\n \n3\n)\n\n\nprint\n \n\"Test10: \n%i\n, \n%i\n, \n%i\n\"\n \n%\n \n(\n1\n,\n \n2.8\n,\n \n3.1416\n)\n\n\nprint\n \n\"Test11: \n%2i\n, \n%5i\n, \n%10i\n\"\n \n%\n \n(\n1\n,\n \n2.8\n,\n \n3.1416\n)\n\n\nprint\n \n\"Test12: \n%f\n, \n%f\n, \n%f\n\"\n \n%\n \n(\n1\n,\n \n2.8\n,\n \n3.1416\n)\n\n\nprint\n \n\"Test13: \n%2f\n, \n%2.2f\n, \n%10.3f\n\"\n \n%\n \n(\n1\n,\n \n2.8\n,\n \n3.1416\n)\n\n\nprint\n \n\"Test14: \n%2f\n, \n%2f\n, \n%2f\n\"\n \n%\n \n(\n0.11\n,\n \n10.111\n,\n \n1000.1111\n)\n\n\nprint\n \n\"Test15: \n%2.1f\n, \n%2.1f\n, \n%2.10f\n\"\n \n%\n \n(\n0.11\n,\n \n10.111\n,\n \n1000.1111\n)\n\n\n\nfile2\n.\nclose\n()\n\n\n\n\n\n\n\nOutput:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nTest1: 'this is just a dummy test'\nTest2: this is just a dummy test\nTest3:      this is just a dummy test\nTest4: this is just a dummy test     \nTest5:    'this is just a dummy test'\nTest6: 'this is just a dummy test'   \nTest7: 1, 2, 3\nTest8:  1,   2,          3\nTest9: 1, 2, 3.000000\nTest10: 1, 2, 3\nTest11:  1,     2,          3\nTest12: 1.000000, 2.800000, 3.141600\nTest13: 1.000000, 2.80,      3.142\nTest14: 0.110000, 10.111000, 1000.111100\nTest15: 0.1, 10.1, 1000.1111000000\n\n\n\n\n\n\nWrite a list of numbers to a text file\n\n\n1\n2\n3\n4\n5\n6\n7\ndata\n \n=\n \n[\n16.38\n,\n \n139.90\n,\n \n441.46\n,\n \n29.03\n,\n \n40.93\n,\n \n202.07\n,\n \n142.30\n,\n \n346.00\n,\n \n300.00\n]\n\n\n\nout\n \n=\n \n[]\n\n\n\nfor\n \nvalue\n \nin\n \ndata\n:\n\n    \nout\n.\nappend\n(\nstr\n(\nvalue\n)\n \n+\n \n'\n\\n\n'\n)\n\n\nopen\n(\n'results.txt'\n,\n \n'w'\n)\n.\nwritelines\n(\nout\n)\n\n\n\n\n\n\n\nOuput:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n16.38\n139.9\n441.46\n29.03\n40.93\n202.07\n142.3\n346.0\n300.0\n\n\n\n\n\n\nCalculate the average from a list of numbers\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# calculate average from float numbers\n\n\ndata\n \n=\n \n[\n3.53\n,\n \n3.47\n,\n \n3.51\n,\n \n3.72\n,\n \n3.43\n]\n\n\naverage\n \n=\n \nsum\n(\ndata\n)\n \n/\n \nlen\n(\ndata\n)\n\n\nprint\n \naverage\n\n\n\n# calculate average from integer numbers\n\n\ndata\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n]\n\n\naverage\n \n=\n \nfloat\n(\nsum\n(\ndata\n))\n \n/\n \nlen\n(\ndata\n)\n\n\nprint\n \naverage\n\n\n\n\n\n\n\nCalculate the median from a list of numbers\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ndata\n \n=\n \n[\n3.53\n,\n \n3.47\n,\n \n3.51\n,\n \n3.72\n,\n \n3.43\n]\n\n\n\ndata\n.\nsort\n()\n\n\n\nmid\n \n=\n \nlen\n(\ndata\n)\n \n/\n \n2\n \n\nif\n \nlen\n(\ndata\n)\n \n%\n \n2\n \n==\n \n0\n:\n\n    \nmedian\n \n=\n \n(\ndata\n[\nmid\n \n-\n \n1\n]\n \n+\n \ndata\n[\nmid\n])\n \n/\n \n2.0\n\n\nelse\n:\n\n    \nmedian\n \n=\n \ndata\n[\nmid\n]\n\n\n\nprint\n \nmedian\n\n\n\n\n\n\n\nJoin or concatenate a list\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n>>>\n \nL\n \n=\n \n[\n'1'\n,\n \n'2'\n,\n \n'3'\n]\n\n\n>>>\n \n'+'\n.\njoin\n(\nL\n)\n\n\n'1+2+3'\n\n\n\n>>>\n \nL\n \n=\n \n[\n'a'\n,\n \n'b'\n,\n \n'c'\n]\n\n\n>>>\n \n''\n.\njoin\n(\nL\n)\n\n\n'abc'\n\n\n\n>>>\n \nL\n \n=\n \n[\n'1'\n,\n \n'2'\n,\n \n'3'\n]\n\n\n>>>\n \nint\n(\n''\n.\njoin\n(\nL\n))\n\n\n123\n\n\n\n\n\n\n\nCalculate (a variance and )a standard deviation from a list of numbers\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nimport\n \nmath\n\n\n\ndata\n \n=\n \n[\n3.53\n,\n \n3.47\n,\n \n3.51\n,\n \n3.72\n,\n \n3.43\n]\n\n\naverage\n \n=\n \nsum\n(\ndata\n)\n \n/\n \nlen\n(\ndata\n)\n\n\n\ntotal\n \n=\n \n0.0\n\n\n\nfor\n \nvalue\n \nin\n \ndata\n:\n\n    \ntotal\n \n+=\n \n(\nvalue\n \n-\n \naverage\n)\n \n**\n \n2\n\n\n\nvariance\n \n=\n \ntotal\n \n/\n \nlen\n(\ndata\n)\n \n# population variance\n\n\nstddev\n \n=\n \nmath\n.\nsqrt\n(\nvariance\n)\n \n# population stddev\n\n\n\nprint\n \nvariance\n\n\nprint\n \nstddev\n\n\n\n\n\n\n\nChapter 4, Parsing Data Records\n\u00b6\n\n\nFind items common to two lists\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n# proteins participating in cell cycle\n\n\n\nlist_a\n \n=\n \n[]\n\n\n\nfor\n \nline\n \nin\n \nopen\n(\n\"cell_cycle_proteins.txt\"\n):\n\n    \nlist_a\n.\nappend\n(\nline\n.\nstrip\n())\n\n\n\nprint\n \nlist_a\n\n\n\n# proteins expressed in a given cancer cell\n\n\n\nlist_b\n \n=\n \n[]\n\n\n\nfor\n \nline\n \nin\n \nopen\n(\n\"cancer_cell_proteins.txt\"\n):\n\n    \nlist_b\n.\nappend\n(\nline\n.\nstrip\n())\n \n\n\nprint\n \nlist_b\n\n\n\nfor\n \nprotein\n \nin\n \nlist_a\n:\n\n    \nif\n \nprotein\n \nin\n \nlist_b\n:\n\n        \nprint\n \nprotein\n,\n \n'detected in the cancer cell'\n\n    \nelse\n:\n\n        \nprint\n \nprotein\n,\n \n'not observed'\n\n\n\n\n\n\n\nOutput:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n['P62258', 'P61981', 'P62191', 'P17980', 'P43686', 'P35998', 'P62333', 'Q99460', 'O75832']\n['P43686', 'P62333']\n\nP62258 not observed\nP61981 not observed\nP62191 not observed\nP17980 not observed\nP43686 detected in the cancer cell\nP35998 not observed\nP62333 detected in the cancer cell\nQ99460 not observed\nO75832 not observed\n\n\n\n\n\n\n**Find if two or more conditions are met\n\n\nboolean, operators, and, or, not\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nseq\n \n=\n \n\"MGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQTPSKPASADGHRGPSAAFAPAAAE\"\n\n\n\nif\n \n'GGG'\n \nin\n \nseq\n \nand\n \n'RRR'\nin\n \nseq\n:\n\n    \nprint\n \n'GGG is at position: '\n,\n \nseq\n.\nfind\n(\n'GGG'\n)\n\n    \nprint\n \n'RRR is at position: '\n,\n \nseq\n.\nfind\n(\n'RRR'\n)\n\n\n\nif\n \n'WWW'\n \nin\n \nseq\n \nor\n \n'AAA'\n \nin\n \nseq\n:\n\n    \nprint\n \n'Either WWW or AAA occur in the sequence'\n\n\n\nif\n \n'AAA'\n \nin\n \nseq\n \nand\n \nnot\n \n'PPP'\n \nin\n \nseq\n:\n\n    \nprint\n \n'AAA occurs in the sequence but not PPP'\n\n\n\n\n\n\n\nBoolean Operators\n\n\n\n\n\n\n\n\nCondition\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nA < B\n\n\nA lower than B\n\n\n\n\n\n\nA <= B\n\n\nA lower than or equal to B\n\n\n\n\n\n\nA > B\n\n\nA greater than B\n\n\n\n\n\n\nA >= B\n\n\nA greater than or equal to B\n\n\n\n\n\n\nA == B\n\n\nA equal to B\n\n\n\n\n\n\nA != B\n\n\nA different from B\n\n\n\n\n\n\nA<> B\n\n\nidem\n\n\n\n\n\n\nA is B\n\n\nA is the same thing as B \u2018thing\u2019 being an object\n\n\n\n\n\n\nA is not B\n\n\nA is not the same thing as B\n\n\n\n\n\n\nA in B\n\n\nA is present in the sequence B\n\n\n\n\n\n\nA not in B\n\n\nA is not present in the sequence B\n\n\n\n\n\n\n\n\nFind all prime numbers under 30\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nfor\n \ni\n \nin\n \nrange\n(\n30\n):\n\n    \nif\n \ni\n \n<\n \n4\n:\n\n        \nprint\n \n\"prime number:\"\n,\n \ni\n\n    \nelif\n \ni\n \n%\n \n2\n \n==\n \n0\n:\n\n        \nprint\n \n\"multiple of two:\"\n,\n \ni\n\n    \nelif\n \ni\n \n%\n \n3\n \n==\n \n0\n:\n\n        \nprint\n \n\"multiple of three:\"\n,\n \ni\n\n    \nelif\n \ni\n \n%\n \n5\n \n==\n \n0\n:\n\n        \nprint\n \n\"multiple of five:\"\n,\n \ni\n\n    \nelse\n:\n\n        \nprint\n \n\"prime number:\"\n,\n \ni\n\n\n\n\n\n\n\nList vs Tuple vs Set\n\n\n\n\nmutable: change, replace, reorder, add elements.\n\n\nList = [1, 2, 3]\n; mutable sequences of objects. \n\n\nTuple = (1, 2, 3)\n; immutable ordered sequences of objects;.\n\n\nSet = set([1, 2, 3])\n; immutable unordered  collections of unique elements.\n\n\nThe three can contain digits, strings or other objects (embedded).\n\n\n\n\nMore on lists\n\n\n\n\nList[0]\n; extract\n\n\nLlist = [[1, 2, 3],[a, b, c],[x, 4, 'text'], 'seq']\n; embedded lists.\n\n\nList[0][1]\n; extract from embedded lists.\n\n\nList.append(5)\n; add.\n\n\nCreate:\n\n\nrange(3)\n.\n\n\nseq(0, 2, 1)\n.\n\n\n[0.0] * 10\n.\n\n\n[x**2 for x in range(5)]\n.\n\n\n\n\n\n\n\n\nCreating a list with a one-line loop\n\n\nloop, conditional, conditional, on one line\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# remove non-base symbols from a sequence\n\n\nsquares\n \n=\n \n[\nx\n**\n2\n \nfor\n \nx\n \nin\n \nrange\n(\n5\n)]\n\n\nprint\n \nsquares\n\n\n\nbases\n \n=\n \n[\n'A'\n,\n \n'C'\n,\n \n'T'\n,\n \n'G'\n]\n\n\nprint\n \nbases\n\n\n\nseq\n \n=\n \n'GGACXCAGXXGATT'\n\n\nprint\n \nseq\n\n\n\nseqlist\n \n=\n \n[\nbase\n \nfor\n \nbase\n \nin\n \nseq\n \nif\n \nbase\n \nin\n \nbases\n]\n\n\nprint\n \nseqlist\n\n\n\n\n\n\n\nWrite all headers from a file to a separate file\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nfasta_file\n \n=\n \nopen\n(\n'SwissProt.fasta'\n,\n'r'\n)\n\n\nout_file\n \n=\n \nopen\n(\n'SwissProt.header'\n,\n'w'\n)\n\n\n\nfor\n \nline\n \nin\n \nfasta_file\n:\n\n    \nif\n \nline\n[\n0\n:\n1\n]\n \n==\n \n'>'\n:\n\n        \nout_file\n.\nwrite\n(\nline\n)\n\n\n\nout_file\n.\nclose\n()\n\n\n\n\n\n\n\nReads all AC numbers from the deflines of a file\n\n\nparse, parsing, text, file\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ninput_file\n \n=\n \nopen\n(\n\"SwissProt.fasta\"\n,\n\"r\"\n)\n\n\n\nac_list\n \n=\n \n[]\n\n\n\nfor\n \nline\n \nin\n \ninput_file\n:\n\n    \nif\n \nline\n[\n0\n]\n \n==\n \n'>'\n:\n\n        \nfields\n \n=\n \nline\n.\nsplit\n(\n'|'\n)\n\n        \nac_list\n.\nappend\n(\nfields\n[\n1\n])\n\n\n\nprint\n \nac_list\n\n\n\n\n\n\n\nOutput:\n\n\n1\n['P31946', 'P62258', 'Q04917', 'P61981', 'P31947', 'P27348', 'P63104', 'P30443']\n\n\n\n\n\n\nRead a file (genbank_file) and convert it to another file (output_file)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\ngenbank_file\n \n=\n \nopen\n(\n\"AY810830.gb\"\n)\n\n\noutput_file\n \n=\n \nopen\n(\n\"AY810830.fasta\"\n,\n\"w\"\n)\n\n\n\nflag\n \n=\n \nFalse\n\n\nfor\n \nline\n \nin\n \ngenbank_file\n:\n\n    \nif\n \nline\n[\n0\n:\n9\n]\n \n==\n \n'ACCESSION'\n:\n\n        \naccession\n \n=\n \nline\n.\nsplit\n()[\n1\n]\n.\nstrip\n()\n\n        \noutput_file\n.\nwrite\n(\n'>'\n \n+\n \naccession\n \n+\n \n'\n\\n\n'\n)\n\n    \nif\n \nline\n[\n0\n:\n6\n]\n \n==\n \n'ORIGIN'\n:\n \n        \nflag\n \n=\n \nTrue\n\n    \nelif\n \nflag\n:\n\n        \nfields\n \n=\n \nline\n.\nsplit\n()\n\n        \nif\n \nfields\n \n!=\n \n[]:\n\n            \nseq\n \n=\n \n''\n.\njoin\n(\nfields\n[\n1\n:])\n\n            \noutput_file\n.\nwrite\n(\nseq\n.\nupper\n()\n \n+\n \n'\n\\n\n'\n)\n\n\n\ngenbank_file\n.\nclose\n()\n\n\noutput_file\n.\nclose\n()\n\n\n\n\n\n\n\nRead multiple files and extract data\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nfasta_file\n \n=\n \nopen\n(\n'SwissProt.fasta'\n,\n'r'\n)\n\n\nout_file\n \n=\n \nopen\n(\n'SwissProtHuman.fasta'\n,\n'w'\n)\n\n\n\nseq\n \n=\n \n''\n\n\nfor\n \nline\n \nin\n \nfasta_file\n:\n\n    \nif\n \nline\n[\n0\n]\n \n==\n \n'>'\n \nand\n \nseq\n \n==\n \n''\n:\n\n        \n# process the first line of the input file\n\n        \nheader\n \n=\n \nline\n\n    \nelif\n \nline\n \n[\n0\n]\n \n!=\n \n'>'\n:\n\n        \n# join the lines with sequence\n\n        \nseq\n \n=\n \nseq\n \n+\n \nline\n\n    \nelif\n \nline\n[\n0\n]\n \n==\n \n'>'\n \nand\n \nseq\n \n!=\n \n''\n:\n\n        \n# in subsequent lines starting with '>',\n\n        \n# write the previous header and sequence\n\n        \n# to the output file. Then re-initialize\n\n        \n# the header and seq variables for the next record\n\n        \nif\n \n\"Homo sapiens\"\n \nin\n \nheader\n:\n\n            \nout_file\n.\nwrite\n(\nheader\n \n+\n \nseq\n)\n\n        \nseq\n \n=\n \n''\n\n        \nheader\n \n=\n \nline\n\n\n\n# take care of the very last record of the input file\n\n\nif\n \n\"Homo sapiens\"\n \nin\n \nheader\n:\n\n    \nout_file\n.\nwrite\n(\nheader\n \n+\n \nseq\n)\n\n\nout_file\n.\nclose\n()\n\n\n\n\n\n\n\nChapter 5, Searching Data\n\u00b6\n\n\nTranslate a RNA sequence to a protein sequence in three reading frames\n\n\ndictionary\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\ncodon_table\n \n=\n \n{\n\n    \n'GCU'\n:\n'A'\n,\n \n'GCC'\n:\n'A'\n,\n \n'GCA'\n:\n'A'\n,\n \n'GCG'\n:\n'A'\n,\n \n'CGU'\n:\n'R'\n,\n \n'CGC'\n:\n'R'\n,\n   \n    \n'CGA'\n:\n'R'\n,\n \n'CGG'\n:\n'R'\n,\n \n'AGA'\n:\n'R'\n,\n \n'AGG'\n:\n'R'\n,\n \n'UCU'\n:\n'S'\n,\n \n'UCC'\n:\n'S'\n,\n\n    \n'UCA'\n:\n'S'\n,\n \n'UCG'\n:\n'S'\n,\n \n'AGU'\n:\n'S'\n,\n \n'AGC'\n:\n'S'\n,\n \n'AUU'\n:\n'I'\n,\n \n'AUC'\n:\n'I'\n,\n\n    \n'AUA'\n:\n'I'\n,\n \n'UUA'\n:\n'L'\n,\n \n'UUG'\n:\n'L'\n,\n \n'CUU'\n:\n'L'\n,\n \n'CUC'\n:\n'L'\n,\n \n'CUA'\n:\n'L'\n,\n\n    \n'CUG'\n:\n'L'\n,\n \n'GGU'\n:\n'G'\n,\n \n'GGC'\n:\n'G'\n,\n \n'GGA'\n:\n'G'\n,\n \n'GGG'\n:\n'G'\n,\n \n'GUU'\n:\n'V'\n,\n\n    \n'GUC'\n:\n'V'\n,\n \n'GUA'\n:\n'V'\n,\n \n'GUG'\n:\n'V'\n,\n \n'ACU'\n:\n'T'\n,\n \n'ACC'\n:\n'T'\n,\n \n'ACA'\n:\n'T'\n,\n\n    \n'ACG'\n:\n'T'\n,\n \n'CCU'\n:\n'P'\n,\n \n'CCC'\n:\n'P'\n,\n \n'CCA'\n:\n'P'\n,\n \n'CCG'\n:\n'P'\n,\n \n'AAU'\n:\n'N'\n,\n\n    \n'AAC'\n:\n'N'\n,\n \n'GAU'\n:\n'D'\n,\n \n'GAC'\n:\n'D'\n,\n \n'UGU'\n:\n'C'\n,\n \n'UGC'\n:\n'C'\n,\n \n'CAA'\n:\n'Q'\n,\n\n    \n'CAG'\n:\n'Q'\n,\n \n'GAA'\n:\n'E'\n,\n \n'GAG'\n:\n'E'\n,\n \n'CAU'\n:\n'H'\n,\n \n'CAC'\n:\n'H'\n,\n \n'AAA'\n:\n'K'\n,\n\n    \n'AAG'\n:\n'K'\n,\n \n'UUU'\n:\n'F'\n,\n \n'UUC'\n:\n'F'\n,\n \n'UAU'\n:\n'Y'\n,\n \n'UAC'\n:\n'Y'\n,\n \n'AUG'\n:\n'M'\n,\n\n    \n'UGG'\n:\n'W'\n,\n\n    \n'UAG'\n:\n'STOP'\n,\n \n'UGA'\n:\n'STOP'\n,\n \n'UAA'\n:\n'STOP'\n\n    \n}\n\n\n\n# read the RNA sequence into a single string\n\n\nrna\n \n=\n \n''\n\n\nfor\n \nline\n \nin\n \nopen\n(\n'A06662-RNA.fasta'\n):\n\n    \nif\n \nnot\n \nline\n.\nstartswith\n(\n'>'\n):\n \n        \nrna\n \n=\n \nrna\n \n+\n \nline\n.\nstrip\n()\n\n\n\n# translate one frame at a time\n\n\nfor\n \nframe\n \nin\n \nrange\n(\n3\n):\n\n    \nprot\n \n=\n \n''\n \n    \nprint\n \n'Reading frame '\n \n+\n \nstr\n(\nframe\n \n+\n \n1\n)\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nframe\n,\n \nlen\n(\nrna\n),\n \n3\n):\n\n        \ncodon\n \n=\n \nrna\n[\ni\n:\ni\n \n+\n \n3\n]\n\n        \nif\n \ncodon\n \nin\n \ncodon_table\n:\n\n            \nif\n \ncodon_table\n[\ncodon\n]\n \n==\n \n'STOP'\n:\n\n                \nprot\n \n=\n \nprot\n \n+\n \n'*'\n\n            \nelse\n:\n \n                \nprot\n \n=\n \nprot\n \n+\n \ncodon_table\n[\ncodon\n]\n\n        \nelse\n:\n\n            \n# handle too short codons\n\n            \nprot\n \n=\n \nprot\n \n+\n \n'-'\n   \n\n    \n# format to blocks of 48 columns\n\n    \ni\n \n=\n \n0\n\n    \nwhile\n \ni\n \n<\n \nlen\n(\nprot\n):\n\n        \nprint\n \nprot\n[\ni\n:\ni\n \n+\n \n48\n]\n\n        \ni\n \n=\n \ni\n \n+\n \n48\n\n\n\n\n\n\n\nOutput (contains a translated sequence for each reading frame):\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nReading frame 1\nWDQSAEAACVRVRVRVCACVCVRLHLCRVGKEIEMGGQ*AQVPKALNP\nLVWSLLRAMGAIEKSEQGCV*M*GLEGSSREASSKAFAIIW*ENPARM\nDRQNGIEMSWQLKWTGFGTSLVVGSKQRRIWDSGGLAWGRRGCLRGWE\nG*E*DDTWWCLAGGGQG*LCEGTARATEAF*DPAVPEPGRQDLHCGRP\nGEHLA\n\nReading frame 2\nGTSQQRQRVCACVCVCVRVCVYACICVGWVRR*RWAGSRPRSRRP*TH\nWFGVS*GQWGPLRSLNRAVSECEV*KDPPEKPALKLLQSSGERTQQGW\nTGRME*R*VGS*SGQDLVLAWLWGASRGESGTLVVWPGADGGVSGAGR\nDESRMIHGGVWQEAGKDDYVKALPGQLKPFETLLSQNQGGKTFIVGDQ\nVSIW-\n\nReading frame 3\nGPVSRGSVCARACACVCVCVCTLAFVSGG*GDRDGRAVGPGPEGLEPT\nGLESPKGNGGH*EV*TGLCLNVRSRRILQRSQL*SFCNHLVREPSKDG\nQAEWNRDELAAEVDRIWY*PGCGEQAEENLGLWWSGLGQTGVSQGLGG\nMRVG*YMVVSGRRRARMTM*RHCPGN*SLLRPCCPRTREARPSLWETR\n*ASG-\n\n\n\n\n\n\nWhile loop\n\n\n1\n2\n3\n4\n5\n6\nseq\n \n=\n \n\"IVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\"\n\n\n\ni\n \n=\n \n0\n\n\nwhile\n \ni\n \n<\n \nlen\n(\nseq\n):\n\n    \nprint\n \nseq\n[\ni\n:\ni\n \n+\n \n12\n]\n\n    \ni\n \n=\n \ni\n \n+\n \n12\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\n5\n6\nIVGGYTCGANTV\nPYQVSLNSGYHF\nCGGSLINSQWVV\nSAAHCYKSGIQV\nRLGEDNINVVEG\nNEQF\n\n\n\n\n\n\nFind the a sequence in a file\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nswissprot\n \n=\n \nopen\n(\n\"SwissProt.fasta\"\n)\n\n\ninsulin_ac\n \n=\n \n'P61981'\n\n\nresult\n \n=\n \nNone\n\n\n\nwhile\n \nresult\n \n==\n \nNone\n:\n\n    \nline\n \n=\n \nswissprot\n.\nnext\n()\n\n    \nif\n \nline\n.\nstartswith\n(\n'>'\n):\n\n        \nac\n \n=\n \nline\n.\nsplit\n(\n'|'\n)[\n1\n]\n\n        \nif\n \nac\n \n==\n \ninsulin_ac\n:\n\n            \nresult\n \n=\n \nline\n.\nstrip\n()\n\n\n\nprint\n \nresult\n\n\n\n\n\n\n\nOutput:\n\n\n1\n>sp|P61981|1433G_HUMAN 14-3-3 protein gamma OS=Homo sapiens GN=YWHAG PE=1 SV=2\n\n\n\n\n\n\nSearching a list\n\n\nsearch\n\n\n1\n2\n3\n4\n5\n6\nbases\n \n=\n \n[\n'A'\n,\n \n'C'\n,\n \n'T'\n,\n \n'G'\n]\n\n\nseq\n \n=\n \n'CAGGCCATTRKGL'\n\n\n\nfor\n \ni\n \nin\n \nseq\n:\n\n    \nif\n \ni\n \nnot\n \nin\n \nbases\n:\n\n        \nprint\n \ni\n,\n \n\"is not a nucleotide\"\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\nR is not a nucleotide\nK is not a nucleotide\nL is not a nucleotide\n\n\n\n\n\n\nRead a file and store entries in a dictionary\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nsequences\n \n=\n \n{}\n\n\nac\n \n=\n \n''\n\n\nseq\n \n=\n \n''\n\n\n\nfor\n \nline\n \nin\n \nopen\n(\n\"SwissProt.fasta\"\n):\n\n    \nif\n \nline\n.\nstartswith\n(\n'>'\n)\n \nand\n \nseq\n \n!=\n \n''\n:\n\n        \nsequences\n[\nac\n]\n \n=\n \nseq\n\n        \nseq\n \n=\n \n''\n\n    \nif\n \nline\n.\nstartswith\n(\n'>'\n):\n\n        \nac\n \n=\n \nline\n.\nsplit\n(\n'|'\n)[\n1\n]\n\n    \nelse\n:\n\n        \nseq\n \n=\n \nseq\n \n+\n \nline\n.\nstrip\n()\n\n\n\nsequences\n[\nac\n]\n \n=\n \nseq\n\n\nprint\n \nsequences\n.\nkeys\n()\n\n\nprint\n \nsequences\n[\n'P62258'\n]\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n['Q04917', 'P63104', 'P27348', 'P31947', 'P31946', 'P30443', 'P61981', 'P62258']\n\nMDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIGARRASWRIISSIEQKEENKGGEDKLKMIREYRQMVETELKLICCDILDVLDKHLIPAANTGESKVFYYKMKGDYHRYLAEFATGNDRKEAAENSLVAYKAASDIAMTELPPTHPIRLGLALNFSVFYYEILNSPDRACRLAKAAFDDAIAELDTLSEESYKDSTLIMQLLRDNLTLWTSDMQGDGEEQNKEALQDVEDENQ\n\n\n\n\n\n\nRead a sequence from a structure\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\naa_codes\n \n=\n \n{\n\n     \n'ALA'\n:\n'A'\n,\n \n'CYS'\n:\n'C'\n,\n \n'ASP'\n:\n'D'\n,\n \n'GLU'\n:\n'E'\n,\n\n     \n'PHE'\n:\n'F'\n,\n \n'GLY'\n:\n'G'\n,\n \n'HIS'\n:\n'H'\n,\n \n'LYS'\n:\n'K'\n,\n\n     \n'ILE'\n:\n'I'\n,\n \n'LEU'\n:\n'L'\n,\n \n'MET'\n:\n'M'\n,\n \n'ASN'\n:\n'N'\n,\n\n     \n'PRO'\n:\n'P'\n,\n \n'GLN'\n:\n'Q'\n,\n \n'ARG'\n:\n'R'\n,\n \n'SER'\n:\n'S'\n,\n\n     \n'THR'\n:\n'T'\n,\n \n'VAL'\n:\n'V'\n,\n \n'TYR'\n:\n'Y'\n,\n \n'TRP'\n:\n'W'\n}\n\n\n\nseq\n \n=\n \n''\n\n\n\nfor\n \nline\n \nin\n \nopen\n(\n\"1TLD.pdb\"\n):\n\n    \nif\n \nline\n[\n0\n:\n6\n]\n \n==\n \n\"SEQRES\"\n:\n\n        \ncolumns\n \n=\n \nline\n.\nsplit\n()\n\n        \nfor\n \nresname\n \nin\n \ncolumns\n[\n4\n:]:\n\n            \nseq\n \n=\n \nseq\n \n+\n \naa_codes\n[\nresname\n]\n\n\n\ni\n \n=\n \n0\n\n\nprint\n \n\">1TLD\"\n\n\nwhile\n \ni\n \n<\n \nlen\n(\nseq\n):\n\n    \nprint\n \nseq\n[\ni\n:\ni\n \n+\n \n64\n]\n\n    \ni\n \n=\n \ni\n \n+\n \n64\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\n5\n>1TLD\nIVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\nISASKSIVHPSYNSNTLNNDIMLIKLKSAASLNSRVASISLPTSCASAGTQCLISGWGNTKSSG\nTSYPDVLKCLKAPILSDSSCKSAYPGQITSNMFCAGYLEGGKDSCQGDSGGPVVCSGKLQGIVS\nWGSGCAQKNKPGVYTKVCNYVSWIKQTIASN\n\n\n\n\n\n\nChapter 6, Filtering Data\n\u00b6\n\n\nCalculate the intersection of two lists\n\n\nvenn\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ndata_a\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n]\n\n\ndata_b\n \n=\n \n[\n1\n,\n \n5\n,\n \n7\n,\n \n8\n,\n \n9\n]\n\n\n\na_and_b\n \n=\n \n[]\n\n\n\nfor\n \nnum\n \nin\n \ndata_a\n:\n\n    \nif\n \nnum\n \nin\n \ndata_b\n:\n\n        \na_and_b\n.\nappend\n(\nnum\n)\n\n\n\nprint\n \na_and_b\n\n\n\n\n\n\n\nOutput:\n\n\n1\n[1, 5]\n\n\n\n\n\n\nMore about sets\n\n\nset\n\n\n\n\nSet = set([1, 2, 3])\n; immutable unordered collections of unique elements.\n\n\nThey are not sequential objects like lists.\n\n\nThey cannot contain identical elements.\n\n\nto remove duplicates\n\n\nto calculate the intersection\n\n\nthe union\n\n\nthe difference between two or more group of objects\n\n\nas long as the order is not important.\n\n\n\n\n\n\nThey do not support indexing and slicing operations.\n\n\nThey take the \nin\n and \nnot in\n operators (test an element for membership in a set).\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n>>>\n \ns1\n \n=\n \nset\n(\n'LDFGJLDFGDGD'\n)\n\n\n>>>\n \ns1\n\n\nset\n([\n'J'\n,\n \n'F'\n,\n \n'L'\n,\n \n'G'\n,\n \n'D'\n])\n\n\n\n>>>\n \n'L'\n \nin\n \ns1\n\n\nTrue\n\n\n\n>>>\n \n'Z'\n \nnot\n \nin\n \ns1\n\n\nTrue\n\n\n\n>>>\n \ns2\n \n=\n \n(\n'LDF'\n)\n\n\n>>>\n \ns1\n.\nissubset\n(\ns2\n)\n\n\nFalse\n\n\n\n>>>\n \ns1\n.\nissuperset\n(\ns2\n)\n\n\nTrue\n\n\n\n>>>\n \ns1\n \n=\n \nset\n([\n'a'\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n'c'\n,\n \n'b'\n])\n\n\n>>>\n \n5\n \nin\n \ns1\n\n\nTrue\n\n\n\n>>>\n \n6\n \nin\n \ns1\n\n\nFalse\n\n\n\n>>>\n \ns2\n \n=\n \nset\n([\n10\n,\n \n4\n,\n \n5\n])\n\n\n>>>\n \ns1\n.\nissubset\n(\ns2\n)\n\n\nFalse\n\n\n\n>>>\n \ns1\n.\nissuperset\n(\ns2\n)\n\n\nFalse\n\n\n\n>>>\n \ns3\n \n=\n \nset\n((\n1\n,\n \n2\n,\n \n3\n,\n \n4\n))\n\n\n>>>\n \ns3\n\n\nset\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n])\n\n\n\n>>>\n \ns3\n.\nadd\n(\n5\n)\n\n\n>>>\n \ns3\n\n\nset\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n])\n\n\n\n>>>\n \ns5\n \n=\n \nset\n([\n1\n,\n \n2\n,\n \n3\n,\n \n'b'\n,\n \n'c'\n])\n\n\n>>>\n \ns5\n\n\nset\n([\n1\n,\n \n2\n,\n \n3\n,\n \n'b'\n,\n \n'c'\n])\n\n\n\n>>>\n \ns5\n.\nupdate\n([\n'a'\n,\n \n'd'\n,\n \n4\n])\n\n\n>>>\n \ns5\n\n\nset\n([\n'a'\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n'd'\n,\n \n'c'\n,\n \n'b'\n])\n\n\n\n>>>\n \ns1\n \n=\n \nset\n([\n'a'\n,\n \n'b'\n,\n \n'c'\n])\n\n\n>>>\n \ns2\n \n=\n \nset\n([\n'c'\n,\n \n'd'\n,\n \n'e'\n])\n\n\n>>>\n \ns1\n.\nunion\n(\ns2\n)\n\n\nset\n([\n'a'\n,\n \n'c'\n,\n \n'b'\n,\n \n'e'\n,\n \n'd'\n])\n\n\n\n>>>\n \ns1\n.\nintersection\n(\ns2\n)\n\n\nset\n([\n'c'\n])\n\n\n\n>>>\n \ns1\n.\nsymmetric_difference\n(\ns2\n)\n\n\nset\n([\n'a'\n,\n \n'b'\n,\n \n'e'\n,\n \n'd'\n])\n\n\n\n>>>\n \ns1\n.\ndifference\n(\ns2\n)\n\n\nset\n([\n'a'\n,\n \n'b'\n])\n\n\n\n>>>\n \ns2\n.\ndifference\n(\ns1\n)\n\n\nset\n([\n'e'\n,\n \n'd'\n])\n\n\n\n\n\n\n\nCalculate the intersection of two sets\n\n\n1\n2\n3\n4\n5\ndata_a\n \n=\n \nset\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n])\n\n\ndata_b\n \n=\n \nset\n([\n1\n,\n \n5\n,\n \n7\n,\n \n8\n,\n \n9\n])\n\n\n\na_and_b\n \n=\n \ndata_a\n.\nintersection\n(\ndata_b\n)\n\n\nprint\n \na_and_b\n\n\n\n\n\n\n\nOutput:\n\n\n1\nset([1, 5])\n\n\n\n\n\n\nFind numbers common to three sets\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nreduce\n()\n \nis\n\n\n\na\n \n=\n \nset\n((\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n))\n\n\nb\n \n=\n \nset\n((\n2\n,\n \n4\n,\n \n6\n,\n \n7\n,\n \n1\n))\n\n\nc\n \n=\n \nset\n((\n1\n,\n \n4\n,\n \n5\n,\n \n9\n))\n\n\n\ntriple_set\n \n=\n \n[\na\n,\n \nb\n,\n \nc\n]\n\n\ncommon\n \n=\n \nreduce\n(\nset\n.\nintersection\n,\n \ntriple_set\n)\n\n\nprint\n \ncommon\n\n\n\n\n\n\n\nOutput:\n\n\n1\nset([1, 4])\n\n\n\n\n\n\nCalculate the differences of two lists\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\ndata_a\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n]\n\n\ndata_b\n \n=\n \n[\n1\n,\n \n5\n,\n \n7\n,\n \n8\n,\n \n9\n]\n\n\n\na_not_b\n \n=\n \n[]\n\n\nb_not_a\n \n=\n \n[]\n\n\n\nfor\n \nnum\n \nin\n \ndata_a\n:\n\n    \nif\n \nnum\n \nnot\n \nin\n \ndata_b\n:\n\n        \na_not_b\n.\nappend\n(\nnum\n)\n\n\n\nfor\n \nnum\n \nin\n \ndata_b\n:\n\n    \nif\n \nnum\n \nnot\n \nin\n \ndata_a\n:\n\n        \nb_not_a\n.\nappend\n(\nnum\n)\n\n\n\nprint\n \na_not_b\n\n\nprint\n \nb_not_a\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n[2, 3, 4, 6]\n[7, 8, 9]\n\n\n\n\n\n\nCalculate the differences of two sets 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ndata_a\n \n=\n \nset\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n])\n\n\ndata_b\n \n=\n \nset\n([\n1\n,\n \n5\n,\n \n7\n,\n \n8\n,\n \n9\n])\n\n\n\na_not_b\n \n=\n \ndata_a\n.\ndifference\n(\ndata_b\n)\n\n\nb_not_a\n \n=\n \ndata_b\n.\ndifference\n(\ndata_a\n)\n\n\n\nprint\n \na_not_b\n\n\nprint\n \nb_not_a\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\nset([2, 3, 4, 6])\nset([8, 9, 7])\n\n\n\n\n\n\nCalculate the differences of two sets 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ndata_a\n \n=\n \nset\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n])\n\n\ndata_b\n \n=\n \nset\n([\n1\n,\n \n5\n,\n \n7\n,\n \n8\n,\n \n9\n])\n\n\n\na_or_b\n \n=\n \ndata_a\n.\nunion\n(\ndata_b\n)\n\n\na_xor_b\n \n=\n \ndata_a\n.\nsymmetric_difference\n(\ndata_b\n)\n\n\n\nprint\n \na_or_b\n\n\nprint\n \na_xor_b\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\nset([1, 2, 3, 4, 5, 6, 7, 8, 9])\nset([2, 3, 4, 6, 7, 8, 9])\n\n\n\n\n\n\nRemove elements from a list\n\n\n\n\npop()\n; return and remove the first value.\n\n\npop(0)\n; return and remove a specific position in the index.\n\n\n\n\n1\n2\n3\n4\n5\n6\n>>>\n \ndata_a\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n,\n \n7\n]\n\n\n>>>\n \ndata_a\n.\npop\n()\n\n\n1\n\n\n\n>>>\n \nprint\n \ndata_a\n\n\n[\n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n,\n \n7\n]\n\n\n\n\n\n\n\n\n\ndel()\n; remove a specific position in the index only.\n\n\n\n\ndelete\n\n\n1\n2\n3\n4\n>>>\n \ndata_a\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n,\n \n7\n]\n\n\n>>>\n \ndel\n(\ndata_a\n[\n1\n])\n\n\n>>>\n \nprint\n \ndata_a\n\n\n[\n1\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n,\n \n7\n]\n\n\n\n\n\n\n\n\n\nremove()\n;  remove a specific element only.\n\n\n\n\nremove\n\n\n1\n2\n3\n4\n5\n6\n>>>\n \ndata_a\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n]\n\n\n>>>\n \ndata_a\n.\nremove\n(\n2\n)\n\n\n>>>\n \nprint\n \ndata_a\n\n\n[\n1\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n]\n\n\n\n>>>\n \ndata\n \n=\n \n[\nx\n \nfor\n \nx\n \nin\n \ndata_a\n \nif\n \nx\n \n!=\n \n3\n]\n\n\n\n\n\n\n\nSlicing a list\n\n\nslice, subset\n\n\n1\n2\n3\n>>>\n \ndata_a\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n]\n\n\n>>>\n \ndata_2\n \n=\n \ndata_a\n[:\n2\n]\n\n\n[\n1\n,\n \n2\n]\n\n\n\n\n\n\n\nRemove elements from a dictionary\n\n\npop, delete\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n>>>\n \nd\n \n=\n \n{\n'a'\n:\n \n1\n,\n \n'b'\n:\n \n2\n,\n \n'c'\n:\n \n3\n}\n\n\n>>>\n \nd\n.\npop\n(\n'a'\n)\n\n\n1\n\n\n\n>>>\n \nd\n\n\n{\n'b'\n:\n \n2\n,\n \n'c'\n:\n \n3\n}\n\n\n\n>>>\n \nd\n \n=\n \n{\n'a'\n:\n \n1\n,\n \n'b'\n:\n \n2\n,\n \n'c'\n:\n \n3\n}\n\n\n>>>\n \ndel\n \nd\n[\n'a'\n]\n\n\n1\n\n\n\n>>>\n \nd\n\n\n{\n'b'\n:\n \n2\n,\n \n'c'\n:\n \n3\n}\n\n\n\n\n\n\n\nDelete particular lines from a text file or write back particular lines in a new file\n\n\n1\n2\nlines\n \n=\n \nopen\n(\n'text.txt'\n)\n.\nreadlines\n()\n\n\nopen\n(\n'new.txt'\n,\n \n'w'\n)\n.\nwritelines\n(\nlines\n[\n2\n:\n4\n]\n+\nlines\n[\n6\n:])\n\n\n\n\n\n\n\nRemove some lines from a text file\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nin_file\n \n=\n \nopen\n(\n'text.txt'\n)\n\n\nout_file\n \n=\n \nopen\n(\n'new.txt'\n,\n \n'w'\n)\n\n\n\nindex\n \n=\n \n0\n\n\nindices_to_remove\n \n=\n \n[\n1\n,\n \n2\n,\n \n5\n,\n \n6\n]\n\n\nfor\n \nline\n \nin\n \nin_file\n:\n\n    \nindex\n \n=\n \nindex\n \n+\n \n1\n\n    \nif\n \nindex\n \nnot\n \nin\n \nindices_to_remove\n:\n\n        \nout_file\n.\nwrite\n(\nline\n)\n\n\n\nin_file\n.\nclose\n()\n\n\nout_file\n.\nclose\n()\n\n\n\n\n\n\n\nRemove some lines from a text file with \nenumerate\n()\n\n\nenumerate\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nout_file\n \n=\n \nopen\n(\n'new.txt'\n,\n \n'w'\n)\n\n\nindices_to_remove\n \n=\n \n[\n1\n,\n \n2\n,\n \n5\n,\n \n6\n]\n\n\n\nfor\n \nindex\n,\n \nline\n \nin\n \nenumerate\n(\nopen\n(\n'text.txt'\n)):\n\n    \nif\n \n(\nindex\n \n+\n \n1\n)\n \nnot\n \nin\n \nindices_to_remove\n:\n\n        \nout_file_write\n(\nline\n)\n\n\n\nout_file\n.\nclose\n()\n\n\n\n\n\n\n\nRemove duplicates from a file with accession numbers 1\n\n\nset\n\n\n\n\nUsing a set is faster but distorts the order.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ninput_file\n \n=\n \nopen\n(\n'UniprotID.txt'\n)\n\n\noutput_file\n \n=\n \nopen\n(\n'UniprotID-unique.txt'\n,\n'w'\n)\n\n\n\nunique\n \n=\n \nset\n(\ninput_file\n)\n\n\nfor\n \nline\n \nin\n \ninput_file\n:\n\n    \nunique\n.\nadd\n(\nline\n)\n\n\n\nfor\n \nline\n \nin\n \nunique\n:\n\n    \noutput_file\n.\nwrite\n(\nline\n)\n\n\n\n\n\n\n\nRemove duplicates from a list of accession numbers 2\n\n\nlist\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ninput_file\n \n=\n \nopen\n(\n'UniprotID.txt'\n)\n\n\noutput_file\n \n=\n \nopen\n(\n'UniprotID-unique.txt'\n,\n'w'\n)\n\n\n\nunique\n \n=\n \n[]\n\n\nfor\n \nline\n \nin\n \ninput_file\n:\n\n    \nif\n \nline\n \nnot\n \nin\n \nunique\n:\n\n        \noutput_file\n.\nwrite\n(\nline\n)\n\n        \nunique\n.\nappend\n(\nline\n)\n\n\n\ninput_file\n.\nclose\n()\n\n\noutput_file\n.\nclose\n()\n\n\n\n\n\n\n\nCompare two lists of accession codes using sets\n\n\nset comparison, difference\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n# read the old database release\n\n\nold_db\n \n=\n \nset\n()\n\n\nfor\n \nline\n \nin\n \nopen\n(\n\"list_old.txt\"\n):\n\n    \naccession\n \n=\n \nline\n.\nstrip\n()\n\n    \nold_db\n.\nadd\n(\naccession\n)\n\n\n\n# read the new database release\n\n\nnew_db\n \n=\n \nset\n()\n\n\nfor\n \nline\n \nin\n \nopen\n(\n\"list_new.txt\"\n):\n\n    \naccession\n \n=\n \nline\n.\nstrip\n()\n\n    \nnew_db\n.\nadd\n(\naccession\n)\n\n\n\n# report the differences\n\n\nnew_entries\n \n=\n \nnew_db\n.\ndifference\n(\nold_db\n)\n\n\nprint\n \n\"new entries\"\n,\n \nlist\n(\nnew_entries\n)\n\n\nold_entries\n \n=\n \nold_db\n.\ndifference\n(\nnew_db\n)\n\n\nprint\n \n\"deprecated entries\"\n,\n \nlist\n(\nold_entries\n)\n\n\nunique_entries\n \n=\n \nnew_db\n.\nsymmetric_difference\n(\nold_db\n)\n\n\nprint\n \n\"unique entries\"\n,\n \nlist\n(\nunique_entries\n)\n\n\n\n\n\n\n\nChapter 7, Managing Tabular Data\n\u00b6\n\n\nThe original data\n\n\n\n\n\n\n\n\nprotein\n\n\next1\n\n\next2\n\n\next3\n\n\n\n\n\n\n\n\n\n\n0.16\n\n\n0.038\n\n\n0.044\n\n\n0.04\n\n\n\n\n\n\n0.33\n\n\n0.089\n\n\n0.095\n\n\n0.091\n\n\n\n\n\n\n0.66\n\n\n0.184\n\n\n0.191\n\n\n0.191\n\n\n\n\n\n\n1.0\n\n\n0.28\n\n\n0.292\n\n\n0.283\n\n\n\n\n\n\n1.32\n\n\n0.365\n\n\n0.367\n\n\n0.365\n\n\n\n\n\n\n1.66\n\n\n0.441\n\n\n0.443\n\n\n0.444\n\n\n\n\n\n\n\n\nRead tabular data from a tab-separated text file\n\n\n1\n2\n3\n4\n5\n6\ntable\n \n=\n \n[]\n\n\n\nfor\n \nline\n \nin\n \nopen\n(\n'lowry_data.txt'\n):\n\n    \ntable\n.\nappend\n(\nline\n.\nstrip\n()\n.\nsplit\n(\n'\n\\t\n'\n))\n\n\n\nprint\n \ntable\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n[\n['protein', 'ext1', 'ext2', 'ext3'],\n['0.16', '0.038', '0.044', '0.04'],\n['0.33', '0.089', '0.095', '0.091'],\n['0.66', '0.184', '0.191', '0.191'],\n['1.0', '0.28', '0.292', '0.283'],\n['1.32', '0.365', '0.367', '0.365'],\n['1.66', '0.441', '0.443', '0.444']\n]\n\n\n\n\n\n\nWrite a nested list to a text file\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\ntable\n \n=\n \n[\n\n    \n[\n'protein'\n,\n \n'ext1'\n,\n \n'ext2'\n,\n \n'ext3'\n],\n\n    \n[\n0.16\n,\n \n0.038\n,\n \n0.044\n,\n \n0.040\n],\n\n    \n[\n0.33\n,\n \n0.089\n,\n \n0.095\n,\n \n0.091\n],\n\n    \n[\n0.66\n,\n \n0.184\n,\n \n0.191\n,\n \n0.191\n],\n\n    \n[\n1.00\n,\n \n0.280\n,\n \n0.292\n,\n \n0.283\n],\n\n    \n[\n1.32\n,\n \n0.365\n,\n \n0.367\n,\n \n0.365\n],\n\n    \n[\n1.66\n,\n \n0.441\n,\n \n0.443\n,\n \n0.444\n]\n\n    \n]\n\n\n\nout\n \n=\n \n''\n\n\n\nfor\n \nrow\n \nin\n \ntable\n:\n\n    \nline\n \n=\n \n[\nstr\n(\ncell\n)\n \nfor\n \ncell\n \nin\n \nrow\n]\n\n    \nout\n \n=\n \nout\n \n+\n \n'\n\\t\n'\n.\njoin\n(\nline\n)\n \n+\n \n'\n\\n\n'\n\n\n\nopen\n(\n'lowry_data.txt'\n,\n \n'w'\n)\n.\nwrite\n(\nout\n)\n\n\n\n\n\n\n\nReformat a four-column to a two-column table\n\n\nCreate a 2D table.\n\n\nPrint the table line by line.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\ntable\n \n=\n \n[\n\n    \n[\n'protein'\n,\n \n'ext1'\n,\n \n'ext2'\n,\n \n'ext3'\n],\n\n    \n[\n0.16\n,\n \n0.038\n,\n \n0.044\n,\n \n0.040\n],\n\n    \n[\n0.33\n,\n \n0.089\n,\n \n0.095\n,\n \n0.091\n],\n\n    \n[\n0.66\n,\n \n0.184\n,\n \n0.191\n,\n \n0.191\n],\n\n    \n[\n1.00\n,\n \n0.280\n,\n \n0.292\n,\n \n0.283\n],\n\n    \n[\n1.32\n,\n \n0.365\n,\n \n0.367\n,\n \n0.365\n],\n\n    \n[\n1.66\n,\n \n0.441\n,\n \n0.443\n,\n \n0.444\n]\n\n    \n]\n\n\n\n# remove the first row\n\n\ntable\n \n=\n \ntable\n[\n1\n:]\n\n\n\nprotein\n,\n \next1\n,\n \next2\n,\n \next3\n \n=\n \nzip\n(\n*\ntable\n)\n\n\n\n# create a single column for `ext` or concatenate each `ext`\n\n\n# extend (`* 3`) the `protein` column to match the `ext` column.\n\n\nextinction\n \n=\n \next1\n \n+\n \next2\n \n+\n \next3\n\n\nprotein\n \n=\n \nprotein\n \n*\n \n3\n\n\n\n# create four tuples for each column\n\n\ntable\n \n=\n \nzip\n(\nprotein\n,\n \nextinction\n)\n\n\n\nfor\n \nprot\n,\n \next\n \nin\n \ntable\n:\n\n    \nprint\n \nprot\n,\n \next\n\n\n\n\n\n\n\nOutput:\n\n\n\n\n\n\n\n\nprotein\n\n\next\n\n\n\n\n\n\n\n\n\n\n0.16\n\n\n0.038\n\n\n\n\n\n\n0.33\n\n\n0.089\n\n\n\n\n\n\n0.66\n\n\n0.184\n\n\n\n\n\n\n1.0\n\n\n0.28\n\n\n\n\n\n\n1.32\n\n\n0.365\n\n\n\n\n\n\n1.66\n\n\n0.441\n\n\n\n\n\n\n0.16\n\n\n0.044\n\n\n\n\n\n\n0.33\n\n\n0.095\n\n\n\n\n\n\n0.66\n\n\n0.191\n\n\n\n\n\n\n1.0\n\n\n0.292\n\n\n\n\n\n\n1.32\n\n\n0.367\n\n\n\n\n\n\n1.66\n\n\n0.443\n\n\n\n\n\n\n0.16\n\n\n0.04\n\n\n\n\n\n\n0.33\n\n\n0.091\n\n\n\n\n\n\n0.66\n\n\n0.191\n\n\n\n\n\n\n1.0\n\n\n0.283\n\n\n\n\n\n\n1.32\n\n\n0.365\n\n\n\n\n\n\n1.66\n\n\n0.444\n\n\n\n\n\n\n\n\nCreate a table; lists in a list\n\n\n\n\nEmpty 1.\n\n\n\n\n1\ntable\n \n=\n \n[[\n0\n]\n \n*\n \n3\n \nfor\n \nx\n \nin\n \nrange\n(\n3\n)]\n\n\n\n\n\n\n\n\n\nEmpty 2.\n\n\n\n\n1\n2\n3\ntable\n \n=\n \n[]\n\n\nfor\n \ni\n \nin\n \nrange\n(\n3\n):\n\n    \ntable\n.\nappend\n([\n0\n]\n \n*\n \n3\n)\n\n\n\n\n\n\n\nEncode a 2D list; lists in a list\n\n\ntabular, table, two dimensions\n\n\n1\n2\n3\n4\n5\ntable\n \n=\n \n[\n\n    \n[\n \n0\n,\n  \n1\n,\n  \n2\n,\n  \n3\n],\n\n    \n[\n10\n,\n \n11\n,\n \n12\n,\n \n13\n],\n\n    \n[\n20\n,\n \n21\n,\n \n22\n,\n \n23\n]\n\n    \n]\n\n\n\n\n\n\n\nEncode a list of nested tuples; tuples in a list\n\n\n1\n2\n3\n4\n5\ntable\n \n=\n \n[\n\n    \n(\n \n0\n,\n  \n1\n,\n  \n2\n,\n  \n3\n),\n\n    \n(\n10\n,\n \n11\n,\n \n12\n,\n \n13\n),\n\n    \n(\n20\n,\n \n21\n,\n \n22\n,\n \n23\n)\n\n    \n]\n\n\n\n\n\n\n\nExtract, access rows and cells from a 2D table\n\n\ntabular, table, two dimensions\n\n\n\n\ntable[1]\n; extract the 2\nnd\n row.\n\n\ntable[1][2]\n; extract a single cell (2\nnd\n row, 3\nrd\n column).\n\n\ntable[1:]\n or \ntable.pop(0)\n; slice the 1\nst\n row, keep the remaining.\n\n\ntable.pop(2)\n; delete the 3\nrd\n row.\n\n\ntable[:2]\n; slice the 3\nrd\n column, keep the remaining.\n\n\ntable[:2] + table[3:]\n; slice the 3\nrd\n column and 4\nth\n row, keep the remaining.\n\n\ntable.insert(2, [0.55, 0.12, 0.12, 0.14])\n; insert a new row in 3\nrd\n position\n\n\ntable.append([0.55, 0.12, 0.12, 0.14])\n; insert a new row at the end.\n\n\n\n\nLooping to access each row\n\n\n1\n2\nfor\n \nrow\n \nin\n \ntable\n:\n\n    \nprint\n \nrow\n\n\n\n\n\n\n\nLooping to access each cell\n\n\n1\n2\n3\nfor\n \nrow\n \nin\n \ntable\n:\n\n    \nfor\n \ncell\n \nin\n \nrow\n:\n\n        \nprint\n \ncell\n\n\n\n\n\n\n\nExtract, access columns from a 2D table\n\n\ntabular, table, two dimensions\n\n\n1\n2\n3\n4\n5\nprotein\n \n=\n \n[]\n\n\n\n# access the 1st, 2nd... column (separate the columns)\n\n\nfor\n \nrow\n \nin\n \ntable\n:\n\n    \nprotein\n.\nappend\n(\nrow\n[\n0\n])\n\n\n\n\n\n\n\n1\n2\n3\n# access the 4th column\n\n\ncolumns\n \n=\n \nzip\n(\n*\ntable\n)\n\n\nfourth\n \n=\n \ncolumn\n[\n3\n]\n\n\n\n\n\n\n\n\n\nprotein, ex1. ext2, ext3 = zip(*table)\n; access many columns; now each column is in a separate tuple.\n\n\n\n\nFlip a table 90 degrees\n\n\nconvert column to row, row to column\n\n\n\n\nColumn becomes rows. Easier to extract or insert rows and cells.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ndata\n \n=\n \n[\n\n    \n[\n \n0\n,\n  \n1\n,\n  \n2\n,\n  \n3\n],\n\n    \n[\n10\n,\n \n11\n,\n \n12\n,\n \n13\n],\n\n    \n[\n20\n,\n \n21\n,\n \n22\n,\n \n23\n]\n\n\n]\n\n\n\ncolumns\n \n=\n \nzip\n(\n*\ndata\n)\n\n\nprint\n \ncolumns\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\n5\n6\n[\n(0, 10, 20),\n(1, 11, 21),\n(2, 12, 22),\n(3, 13, 23)\n]\n\n\n\n\n\n\n\n\nBut rows are now immutable tuples!\n\n\nYou cannot manipulate individual cells.\n\n\nConvert the rows to lists again in order to extract a cell.\n\n\n\n\n1\n2\ntable\n[\n1\n]\n \n=\n \nlist\n(\ntable\n[\n1\n])\n\n\ntable\n[\n1\n][\n2\n]\n\n\n\n\n\n\n\nInsert, access or extract columns from a 2D table\n\n\ntabular, table, two dimensions\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ntable\n \n=\n \nzip\n(\n*\ntable\n)\n\n\ntable\n.\nappend\n([\n'ext4'\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n])\n\n\ntable\n \n=\n \nzip\n(\n*\ntable\n)\n\n\n\ntable\n \n=\n \nzip\n(\n*\ntable\n)\n\n\ntable\n.\npop\n(\n1\n)\n\n\ntable\n \n=\n \nzip\n(\n*\ntable\n)\n\n\n\ntable\n \n=\n \nzip\n(\n*\ntable\n)\n\n\ntable\n\n\n\n\n\n\n\nThe \nzip()\n function\n\n\n\n\nzip()\n; iterate though lists, tuples, and strings.\n\n\n\n\n1\n2\n3\n4\n5\n6\n>>>\n \nzip\n([\n1\n,\n \n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n,\n \n6\n])\n\n\n[\n\n\n(\n1\n,\n \n4\n),\n\n\n(\n2\n,\n \n5\n),\n\n\n(\n3\n,\n \n6\n)\n\n\n]\n\n\n\n\n\n\n\n\n\nThe asterik tells the function to use all the arguments.\n\n\n\n\n1\n2\n3\n4\n5\nzip\n(\n*\ntable\n)\n\n\n\n# vs\n\n\n\nzip\n(\ntable\n[\n0\n],\n \ntable\n[\n1\n],\n \ntable\n[\n2\n],\n \ntable\n[\n3\n])\n\n\n\n\n\n\n\nMulti-dimentional tables\n\n\ntabular, table, two dimensions, three dimensions, 2D, 3D, lists in list\n\n\n1\ncube\n \n=\n \n[[[\n0\n,\n \n1\n],\n \n[\n2\n,\n \n3\n]],\n \n[[\n4\n,\n \n5\n],\n \n[\n6\n,\n \n7\n]]]\n\n\n\n\n\n\n\n\n\nWarning: more dimensions means more nested data.\n\n\nIt slows down the calculations!!! \n\n\nPrefer Numpy, Pandas, parallel computing.\n\n\nAvoid going over 2D!\n\n\n\n\nCreate a table; dictionaries in a table, in a list\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ntable\n \n=\n \n[\n\n   \n{\n'protein'\n:\n \n0.16\n,\n \n'ext1'\n:\n \n0.038\n,\n \n'ext2'\n:\n \n0.044\n,\n \n'ext3'\n:\n \n0.040\n},\n\n   \n{\n'protein'\n:\n \n0.33\n,\n \n'ext1'\n:\n \n0.089\n,\n \n'ext2'\n:\n \n0.095\n,\n \n'ext3'\n:\n \n0.091\n},\n\n   \n{\n'protein'\n:\n \n0.66\n,\n \n'ext1'\n:\n \n0.184\n,\n \n'ext2'\n:\n \n0.191\n,\n \n'ext3'\n:\n \n0.191\n},\n\n   \n{\n'protein'\n:\n \n1.00\n,\n \n'ext1'\n:\n \n0.280\n,\n \n'ext2'\n:\n \n0.292\n,\n \n'ext3'\n:\n \n0.283\n},\n\n   \n{\n'protein'\n:\n \n1.32\n,\n \n'ext1'\n:\n \n0.365\n,\n \n'ext2'\n:\n \n0.367\n,\n \n'ext3'\n:\n \n0.365\n},\n\n   \n{\n'protein'\n:\n \n1.66\n,\n \n'ext1'\n:\n \n0.441\n,\n \n'ext2'\n:\n \n0.443\n,\n \n'ext3'\n:\n \n0.444\n}\n\n   \n]\n\n\n\n\n\n\n\nExtract, access cells in a table\n\n\n1\n2\n3\n4\n5\n# second row, cell 'ext2' instead of a number\n\n\ncell\n \n=\n \ntable\n[\n1\n][\n'ext2'\n]\n\n\n\nprint\n \ntable\n\n\nprint\n \ncell\n\n\n\n\n\n\n\nCreate a table; dictionaries in a dictionary\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ntable\n \n=\n \n{\n\n   \n'row1'\n:\n \n{\n'protein'\n:\n \n0.16\n,\n \n'ext1'\n:\n \n0.038\n,\n \n'ext2'\n:\n \n0.044\n,\n \n'ext3'\n:\n \n0.040\n},\n\n   \n'row2'\n:\n \n{\n'protein'\n:\n \n0.33\n,\n \n'ext1'\n:\n \n0.089\n,\n \n'ext2'\n:\n \n0.095\n,\n \n'ext3'\n:\n \n0.091\n},\n\n   \n'row3'\n:\n \n{\n'protein'\n:\n \n0.66\n,\n \n'ext1'\n:\n \n0.184\n,\n \n'ext2'\n:\n \n0.191\n,\n \n'ext3'\n:\n \n0.191\n},\n\n   \n'row4'\n:\n \n{\n'protein'\n:\n \n1.00\n,\n \n'ext1'\n:\n \n0.280\n,\n \n'ext2'\n:\n \n0.292\n,\n \n'ext3'\n:\n \n0.283\n},\n\n   \n'row5'\n:\n \n{\n'protein'\n:\n \n1.32\n,\n \n'ext1'\n:\n \n0.365\n,\n \n'ext2'\n:\n \n0.367\n,\n \n'ext3'\n:\n \n0.365\n},\n\n   \n'row6'\n:\n \n{\n'protein'\n:\n \n1.66\n,\n \n'ext1'\n:\n \n0.441\n,\n \n'ext2'\n:\n \n0.443\n,\n \n'ext3'\n:\n \n0.444\n}\n\n   \n}\n\n\n\n\n\n\n\nExtract, access cells in a table, in a dictionary\n\n\nMore readable this way; second row, cell \n'ext2'\n:\n\n\n1\n2\n3\n4\ncell\n \n=\n \ntable\n[\n'row1'\n][\n'ext2'\n]\n\n\n\nprint\n \ntable\n\n\nprint\n \ncell\n\n\n\n\n\n\n\nCreate a table: lists in a dictionaries\n\n\nData for each row are in a simpler format.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ntable\n \n=\n \n{\n\n   \n'1'\n:\n \n[\n'protein'\n:\n \n0.16\n,\n \n'ext1'\n:\n \n0.038\n,\n \n'ext2'\n:\n \n0.044\n,\n \n'ext3'\n:\n \n0.040\n\u00b8\n],\n\n   \n'2'\n:\n \n[\n'protein'\n:\n \n0.33\n,\n \n'ext1'\n:\n \n0.089\n,\n \n'ext2'\n:\n \n0.095\n,\n \n'ext3'\n:\n \n0.091\n],\n\n   \n'3'\n:\n \n[\n'protein'\n:\n \n0.66\n,\n \n'ext1'\n:\n \n0.184\n,\n \n'ext2'\n:\n \n0.191\n,\n \n'ext3'\n:\n \n0.191\n],\n\n   \n'4'\n:\n \n[\n'protein'\n:\n \n1.00\n,\n \n'ext1'\n:\n \n0.280\n,\n \n'ext2'\n:\n \n0.292\n,\n \n'ext3'\n:\n \n0.283\n],\n\n   \n'5'\n:\n \n[\n'protein'\n:\n \n1.32\n,\n \n'ext1'\n:\n \n0.365\n,\n \n'ext2'\n:\n \n0.367\n,\n \n'ext3'\n:\n \n0.365\n],\n\n   \n'6'\n:\n \n[\n'protein'\n:\n \n1.66\n,\n \n'ext1'\n:\n \n0.441\n,\n \n'ext2'\n:\n \n0.443\n,\n \n'ext3'\n:\n \n0.444\n]\n\n   \n}\n\n\n\n\n\n\n\nCreate a table; formats\n\n\n\n\nLists in a list: \n\n\nEasy to access/add/delete rows, to sort. \n\n\nDifficult to deal with columns and a specific cell.\n\n\n\n\n\n\nDictionaries in a dictionary:\n\n\nEasy to access column entries.\n\n\nEasy to read (find data).\n\n\nUnsorted and impossible to sort.\n\n\n\n\n\n\nMixed lists and dictionaries:\n\n\nUse the advantage of both types and build the table accordingly (l, d or d, l for rows, columns) depending on the operations (see above).\n\n\nThe code is harder to read or less straightforward.\n\n\n\n\n\n\n\n\nConvert a table from a nested list to a nested dictionary\u2026\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\ntable\n \n=\n \n[\n\n    \n[\n'protein'\n,\n \n'ext'\n],\n\n    \n[\n0.16\n,\n \n0.038\n],\n\n    \n[\n0.33\n,\n \n0.089\n],\n\n    \n[\n0.66\n,\n \n0.184\n],\n\n    \n[\n1.00\n,\n \n0.280\n],\n\n    \n[\n1.32\n,\n \n0.365\n],\n\n    \n[\n1.66\n,\n \n0.441\n]\n\n\n]\n\n\n\n# convert nested list to nested dict\n\n\nnested_dict\n \n=\n \n{}\n\n\nn\n \n=\n \n0\n\n\nkey\n \n=\n \ntable\n[\n0\n]\n\n\nfor\n \nrow\n \nin\n \ntable\n[\n1\n:]:\n \n# for row in table[0:]  includes the header\n\n    \nn\n \n+=\n \n1\n\n    \nentry\n \n=\n \n{\nkey\n[\n0\n]:\n \nrow\n[\n0\n],\n \nkey\n[\n1\n]:\n \nrow\n[\n1\n]}\n\n    \nnested_dict\n[\n'row'\n+\nstr\n(\nn\n)]\n \n=\n \nentry\n\n\n\nprint\n \nnested_dict\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n{\n\n\n'row1'\n:\n \n{\n'protein'\n:\n \n0.16\n,\n \n'ext'\n:\n \n0.038\n},\n\n\n'row2'\n:\n \n{\n'protein'\n:\n \n0.33\n,\n \n'ext'\n:\n \n0.089\n},\n\n\n'row3'\n:\n \n{\n'protein'\n:\n \n0.66\n,\n \n'ext'\n:\n \n0.184\n},\n\n\n'row4'\n:\n \n{\n'protein'\n:\n \n1.0\n,\n \n'ext'\n:\n \n0.28\n},\n\n\n'row5'\n:\n \n{\n'protein'\n:\n \n1.32\n,\n \n'ext'\n:\n \n0.365\n},\n\n\n'row6'\n:\n \n{\n'protein'\n:\n \n1.66\n,\n \n'ext'\n:\n \n0.441\n}\n\n\n}\n\n\n\n\n\n\n\n\u2026and convert a nested dictionary to a table\n\n\n1\n2\n3\n4\n5\n6\n7\n# convert nested dict back to nested list\n\n\nnested_list\n \n=\n \n[]\n\n\nfor\n \nentry\n \nin\n \nnested_dict\n:\n\n    \nkey\n \n=\n \nnested_dict\n[\nentry\n]\n\n    \nnested_list\n.\nappend\n([\nkey\n[\n'protein'\n],\n \nkey\n[\n'ext'\n]])\n\n\n\nprint\n \nnested_list\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n[\n\n\n[\n0.16\n,\n \n0.038\n],\n\n\n[\n0.33\n,\n \n0.089\n],\n\n\n[\n0.66\n,\n \n0.184\n],\n\n\n[\n1.0\n,\n \n0.28\n],\n\n\n[\n1.32\n,\n \n0.365\n],\n\n\n[\n1.66\n,\n \n0.441\n]\n\n\n]\n\n\n\n\n\n\n\nChapter 8, Sorting Data\n\u00b6\n\n\nSort a table by one column and write it to a file\n\n\nadd, index, list\n\n\n\n\nsorted()\n.\n\n\nitemgetter()\n; turn elements of each column into a sortable key.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nfrom\n \noperator\n \nimport\n \nitemgetter\n\n\n\n# read table to a nested list of floats\n\n\ntable\n \n=\n \n[]\n\n\nfor\n \nline\n \nin\n \nopen\n(\n\"random_distribution.tsv\"\n):\n\n    \ncolumns\n \n=\n \nline\n.\nsplit\n()\n\n    \ncolumns\n \n=\n \n[\nfloat\n(\nx\n)\n \nfor\n \nx\n \nin\n \ncolumns\n]\n\n    \ntable\n.\nappend\n(\ncolumns\n)\n\n\n\n# sort the table by second column\n\n\ncolumn\n \n=\n \n1\n\n\ntable_sorted\n \n=\n \nsorted\n(\ntable\n,\n \nkey\n \n=\n \nitemgetter\n(\ncolumn\n))\n\n\n\n# format table as strings\n\n\nfor\n \nrow\n \nin\n \ntable_sorted\n:\n\n    \nrow\n \n=\n \n[\nstr\n(\nx\n)\n \nfor\n \nx\n \nin\n \nrow\n]\n\n    \nprint\n \n\"\n\\t\n\"\n.\njoin\n(\nrow\n)\n\n\n\n\n\n\n\nOutput (first 3 lines only):\n\n\n1\n2\n3\n6153.0  58.0    0.00942629611572    40.0    0.00650089387291    260.0   0.0422558101739\n6101.0  64.0    0.0104900835929 41.0    0.00672020980167    299.0   0.0490083592854\n6101.0  68.0    0.0111457138174 39.0    0.0063923946894 274.0   0.0449106703819\n\n\n\n\n\n\nList are good for sorting\n\n\n\n\nASCII sort order chart (top to bottom, left to right):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspace\n\n\n0\n\n\n:\n\n\nA\n\n\nQ\n\n\n[\n\n\na\n\n\nq\n\n\n}\n\n\n\n\n\n\n!\n\n\n1\n\n\n;\n\n\nB\n\n\nR\n\n\n\\\n\n\nb\n\n\nr\n\n\ntick\n\n\n\n\n\n\n\u201c\n\n\n2\n\n\n<\n\n\nC\n\n\nS\n\n\n]\n\n\nc\n\n\ns\n\n\n{\n\n\n\n\n\n\n#\n\n\n3\n\n\n=\n\n\nD\n\n\nT\n\n\n^\n\n\nd\n\n\nt\n\n\n\n\n\n\n\n\n$\n\n\n4\n\n\n>\n\n\nE\n\n\nU\n\n\n_\n\n\ne\n\n\nu\n\n\nDEL\n\n\n\n\n\n\n%\n\n\n5\n\n\n?\n\n\nF\n\n\nV\n\n\n`\n\n\nf\n\n\nv\n\n\n\n\n\n\n\n\n&\n\n\n6\n\n\n@\n\n\nG\n\n\nW\n\n\n\n\ng\n\n\nw\n\n\n\n\n\n\n\n\n\u2018\n\n\n7\n\n\n\n\nH\n\n\nX\n\n\n\n\nh\n\n\nx\n\n\n\n\n\n\n\n\n(\n\n\n8\n\n\n\n\nI\n\n\nY\n\n\n\n\ni\n\n\ny\n\n\n\n\n\n\n\n\n)\n\n\n9\n\n\n\n\nJ\n\n\nZ\n\n\n\n\nj\n\n\nz\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\nK\n\n\n\n\n\n\nk\n\n\n\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\nL\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\nM\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\nN\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\nO\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n/\n\n\n\n\n\n\nP\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\nDifference between \nsort()\n and \nsorted()\n\n\n\n\nsort()\n; apply to lists\n\n\nsorted()\n; apply to lists, tuples, and dictionary keys.\n\n\nreverse()\n sort the other way around.\n\n\nsorted(data, reverse = True)\n; idem.\n\n\noperator.itemgetter(i)(T)\n returns the \ni\nth element of \nT\n, a string, a list, a tuple, or a dictionary.\n\n\n\n\n1\n2\n3\n4\n5\n6\n>>>\n \nfrom\n \noperator\n \nimport\n \nitemgetter\n\n\n>>>\n \ndata\n \n=\n \n[\n'A'\n,\n \n'T'\n,\n \n'C'\n]\n\n\n>>>\n \nitemgetter\n(\n1\n)(\ndata\n)\n\n\n'A'\n\n\n>>>\n \nitemgetter\n(\n1\n,\n \n-\n1\n)(\ndata\n)\n\n\n(\n'A'\n,\n \n'T'\n)\n\n\n\n\n\n\n\n1\nnew_table\n \n=\n \nsorted\n(\ntable\n,\n \nkey\n \n=\n \nitemgetter\n(\n1\n,\n \n3\n))\n\n\n\n\n\n\n\nSort entries in a tabular output file in reverse order\n\n\n\n\nNotice the \ntable_sorted = sorted(table, key = itemgetter(2), reverse=True)\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nfrom\n \noperator\n \nimport\n \nitemgetter\n\n\n\ninput_file\n \n=\n \nopen\n(\n\"BlastOut.csv\"\n)\n\n\noutput_file\n \n=\n \nopen\n(\n\"BlastOutSorted.csv\"\n,\n\"w\"\n)\n\n\n\n# read BLAST output table\n\n\ntable\n \n=\n \n[]\n\n\nfor\n \nline\n \nin\n \ninput_file\n:\n\n    \ncol\n \n=\n \nline\n.\nsplit\n(\n','\n)\n\n    \ncol\n[\n2\n]\n \n=\n \nfloat\n(\ncol\n[\n2\n])\n\n    \ntable\n.\nappend\n(\ncol\n)\n\n\n\ntable_sorted\n \n=\n \nsorted\n(\ntable\n,\n \nkey\n \n=\n \nitemgetter\n(\n2\n),\n \nreverse\n=\nTrue\n)\n\n\n\n# write sorted table to an output file\n\n\nfor\n \nrow\n \nin\n \ntable_sorted\n:\n\n    \nrow\n \n=\n \n[\nstr\n(\nx\n)\n \nfor\n \nx\n \nin\n \nrow\n]\n\n    \noutput_file\n.\nwrite\n(\n\"\n\\t\n\"\n.\njoin\n(\nrow\n)\n \n+\n \n'\n\\n\n'\n)\n\n\n\ninput_file\n.\nclose\n()\n\n\noutput_file\n.\nclose\n()\n\n\n\n\n\n\n\nSort a tuple by converting it to a list\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# sort a tuple\n\n\ndata\n \n=\n \n(\n1\n,\n \n4\n,\n \n5\n,\n \n3\n,\n \n8\n,\n \n9\n,\n \n2\n,\n \n6\n,\n \n8\n,\n \n9\n,\n \n30\n)\n\n\nlist_data\n \n=\n \nlist\n(\ndata\n)\n\n\nlist_data\n.\nsort\n()\n\n\nnew_tup\n \n=\n \ntuple\n(\ndata\n)\n\n\nprint\n \nnew_tup\n\n\n\n# sort a tuple using the sorted() built-in function\n\n\nnew_tup\n \n=\n \ntuple\n(\nsorted\n(\ndata\n))\n\n\nprint\n \nnew_tup\n\n\n\n\n\n\n\nBoth outputs:\n\n\n1\n2\n(\n1\n,\n \n4\n,\n \n5\n,\n \n3\n,\n \n8\n,\n \n9\n,\n \n2\n,\n \n6\n,\n \n8\n,\n \n9\n,\n \n30\n)\n\n\n(\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n,\n \n8\n,\n \n8\n,\n \n9\n,\n \n9\n,\n \n30\n)\n\n\n\n\n\n\n\nConvert a dictionary to a sorted list\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\ndata\n \n=\n \n{\n1\n:\n \n'a'\n,\n \n2\n:\n \n'b'\n,\n \n4\n:\n \n'd'\n,\n \n3\n:\n \n'c'\n,\n\n        \n5\n:\n \n't'\n,\n \n6\n:\n \n'm'\n,\n \n36\n:\n \n'z'\n}\n\n\n\n# create a list of keys and go through them one by one\n\n\nkeys\n \n=\n \nlist\n(\ndata\n)\n\n\nkeys\n.\nsort\n()\n\n\nfor\n \nkey\n \nin\n \nkeys\n:\n\n    \nprint\n \nkey\n,\n \ndata\n[\nkey\n]\n\n\n\n\n# sort keys using the sorted() built-in function\n\n\nfor\n \nkey\n \nin\n \nsorted\n(\ndata\n):\n\n    \nprint\n \nkey\n,\n \ndata\n[\nkey\n]\n\n\n\n\n\n\n\nOutput:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z\n1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z\n\n\n\n\n\n\nSort strings by their length\n\n\nlamda, function\n\n\n\n\nUse a \nlambda\n function and replace \nitemgetter()\n.\n\n\n\n\n1\n2\n3\n4\ndata\n \n=\n \n[\n'ASDF'\n,\n \n'SDFSADGSAG'\n,\n \n'SDFSD'\n,\n \n'GSGDGG'\n]\n\n\n\nnew_data\n \n=\n \nsorted\n(\ndata\n,\n \nkey\n \n=\n \nlambda\n \nx\n:\n \nlen\n(\nx\n))\n\n\nprint\n \nnew_data\n\n\n\n\n\n\n\n1\n2\n3\n4\ndata\n \n=\n \n[\n'ASDF'\n,\n \n'SDFSADGSAG'\n,\n \n'SDFSD'\n,\n \n'GSGDGG'\n]\n\n\n\nnew_data\n \n=\n \nsorted\n(\ndata\n,\n \nkey\n \n=\n \nlambda\n \ncol\n:\n \ncol\n[\n1\n])\n \n# alternative\n\n\nprint\n \nnew_data\n\n\n\n\n\n\n\nSame output:\n\n\n1\n[\n'ASDF'\n,\n \n'SDFSD'\n,\n \n'GSGDGG'\n,\n \n'SDFSADGSAG'\n]\n\n\n\n\n\n\n\nSort a table by seven columns in one operation\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nfrom\n \noperator\n \nimport\n \nitemgetter\n\n\n\n# read table\n\n\nin_file\n \n=\n \nopen\n(\n\"random_distribution.tsv\"\n)\n\n\ntable\n \n=\n \n[]\n\n\nfor\n \nline\n \nin\n \nin_file\n:\n\n    \ncolumns\n \n=\n \nline\n.\nsplit\n()\n\n    \ncolumns\n \n=\n \n[\nfloat\n(\nx\n)\n \nfor\n \nx\n \nin\n \ncolumns\n]\n\n    \ntable\n.\nappend\n(\ncolumns\n)\n\n\n\ntable_sorted\n \n=\n \nsorted\n(\ntable\n,\n \nkey\n=\nitemgetter\n(\n0\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n))\n\n\nprint\n \ntable_sorted\n\n\n\n\n\n\n\nOutput (first 3 lines only):\n\n\n1\n2\n3\n4\n5\n6\n[\n\n\n[\n6041.0\n,\n \n87.0\n,\n \n0.0144015891409\n,\n \n44.0\n,\n \n0.00728356232412\n,\n \n213.0\n,\n \n0.035259063069\n],\n\n\n[\n6042.0\n,\n \n121.0\n,\n \n0.0200264812976\n,\n \n35.0\n,\n \n0.00579278384641\n,\n \n262.0\n,\n \n0.0433631247931\n],\n\n\n[\n6044.0\n,\n \n113.0\n,\n \n0.0186962276638\n,\n \n67.0\n,\n \n0.0110853739246\n,\n \n266.0\n,\n \n0.0440105890139\n],\n\n\n...\n\n\n]\n\n\n\n\n\n\n\nSort entries in a tabular BLAST output file in reverse order\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nfrom\n \noperator\n \nimport\n \nitemgetter\n\n\n\ninput_file\n \n=\n \nopen\n(\n\"BlastOut.csv\"\n)\n\n\noutput_file\n \n=\n \nopen\n(\n\"BlastOutSorted.csv\"\n,\n\"w\"\n)\n\n\n\n# read BLAST output table\n\n\ntable\n \n=\n \n[]\n\n\nfor\n \nline\n \nin\n \ninput_file\n:\n\n    \ncol\n \n=\n \nline\n.\nsplit\n(\n','\n)\n\n    \ncol\n[\n2\n]\n \n=\n \nfloat\n(\ncol\n[\n2\n])\n\n    \ntable\n.\nappend\n(\ncol\n)\n\n\n\ntable_sorted\n \n=\n \nsorted\n(\ntable\n,\n \nkey\n=\nitemgetter\n(\n2\n),\n \nreverse\n=\nTrue\n)\n\n\n\n# write sorted table to an output file\n\n\nfor\n \nrow\n \nin\n \ntable_sorted\n:\n\n    \nrow\n \n=\n \n[\nstr\n(\nx\n)\n \nfor\n \nx\n \nin\n \nrow\n]\n\n    \noutput_file\n.\nwrite\n(\n\"\n\\t\n\"\n.\njoin\n(\nrow\n)\n \n+\n \n'\n\\n\n'\n)\n\n\n\ninput_file\n.\nclose\n()\n\n\noutput_file\n.\nclose\n()\n\n\n\n\n\n\n\nSort entries in a comma separated file by two columns\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nfrom\n \noperator\n \nimport\n \nitemgetter\n\n\n\ninput_file\n \n=\n \nopen\n(\n\"PDBhaemoglobinReport.csv\"\n)\n\n\noutput_file\n \n=\n \nopen\n(\n\"PDBhaemoglobinSorted.csv\"\n,\n\"w\"\n)\n\n\n\ntable\n \n=\n \n[]\n\n\nheader\n \n=\n \ninput_file\n.\nreadline\n()\n\n\nfor\n \nline\n \nin\n \ninput_file\n:\n\n    \ncol\n \n=\n \nline\n.\nsplit\n(\n','\n)\n\n    \ncol\n[\n3\n]\n \n=\n \nfloat\n(\ncol\n[\n3\n][\n1\n:\n-\n1\n])\n\n    \ncol\n[\n4\n]\n \n=\n \nint\n(\ncol\n[\n4\n][\n1\n:\n-\n2\n])\n\n    \ntable\n.\nappend\n(\ncol\n)\n\n\n\ntable_sorted\n \n=\n \nsorted\n(\ntable\n,\n \nkey\n=\nitemgetter\n(\n3\n,\n \n4\n))\n\n\n\noutput_file\n.\nwrite\n(\nheader\n \n+\n \n'\n\\t\n'\n)\n\n\nfor\n \nrow\n \nin\n \ntable_sorted\n:\n\n    \nrow\n \n=\n \n[\nstr\n(\nx\n)\n \nfor\n \nx\n \nin\n \nrow\n]\n\n    \noutput_file\n.\nwrite\n(\n\"\n\\t\n\"\n.\njoin\n(\nrow\n)\n \n+\n \n'\n\\n\n'\n)\n\n\n\ninput_file\n.\nclose\n()\n\n\noutput_file\n.\nclose\n()\n\n\n\n\n\n\n\nChapter 9, Pattern Matching and Text Mining\n\u00b6\n\n\nFind a sequence pattern in a sequence\n\n\nregex, regular expression\n\n\n\n\nre\n package.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nimport\n \nre\n\n\n\n# define a string with occurrences of regex:\n\n\nseq\n \n=\n \n'VSVLTMFRYAGWLDRLYMLVGTQLAAIIHGVALPLMMLI'\n\n\n\n# compile a pattern and assign it to a variable\n\n\npattern\n \n=\n \nre\n.\ncompile\n(\n'[ST]Q'\n)\n\n\n\n# search for the pattern in the string\n\n\nmatch\n \n=\n \npattern\n.\nsearch\n(\nseq\n)\n\n\nif\n \nmatch\n:\n\n    \n# print the first match along the sequence with the group() method\n\n    \n# 4 characters before and after the pattern\n\n    \nprint\n \n'\n%10s\n'\n \n%\n(\nseq\n[\nmatch\n.\nstart\n()\n \n-\n \n4\n:\nmatch\n.\nend\n()\n \n+\n \n4\n])\n\n    \nprint\n \n'\n%6s\n'\n \n%\n \nmatch\n.\ngroup\n()\n\n\nelse\n:\n\n    \nprint\n \n\"no match\"\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\nMLVGTQLAAI\n    TQ\n\n\n\n\n\n\nre\n methods\n\n\n\n\ngroup()\n; return the matching subgroup.\n\n\nspan()\n; return a tuple containing the starting and ending position of the match.\n\n\nstart()\n; return the starting position.\n\n\nend()\n; return the ending position.\n\n\nsearch()\n; find the \nfirst\n occurence within the string.\n\n\nmatch()\n; attempt to match a pattern to a string. If the pattern is within the string, it will not match it. It will find \u2018S\u2019 in \u2018ST\u2019, but not in \u2018TST\u2019. \n\n\nfindall()\n; return a list containing \nall\n the matching substrings.\n\n\nfinditer()\n; find \nall\n the match objects corresponding to the regex matches and returns them in the form of an iterator.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nimport\n \nre\n\n\n\npattern\n \n=\n \nre\n.\ncompile\n(\n'R.[ST][^P]'\n)\n\n\nseq\n \n=\n \n'RQSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'\n\n\n\n# findall returns a list of all matches\n\n\nmatches\n \n=\n \npattern\n.\nfindall\n(\nseq\n)\n\n\nprint\n \nmatches\n\n\n\n# finditer returns an iterator of match objects\n\n\nmatch_iter\n \n=\n \npattern\n.\nfinditer\n(\nseq\n)\n\n\nfor\n \nmatch\n \nin\n \nmatch_iter\n:\n\n    \nprint\n \nmatch\n.\ngroup\n(),\n \nmatch\n.\nspan\n(),\n \nmatch\n.\nstart\n(),\n \nmatch\n.\nend\n()\n\n\n\n\n\n\n\nOuput:\n\n\n1\n2\n3\n4\n[\n'RQSA'\n,\n \n'RRSL'\n,\n \n'RPSK'\n]\n\n\nRQSA\n \n(\n0\n,\n \n4\n)\n \n0\n \n4\n\n\nRRSL\n \n(\n18\n,\n \n22\n)\n \n18\n \n22\n\n\nRPSK\n \n(\n40\n,\n \n44\n)\n \n40\n \n44\n\n\n\n\n\n\n\nMore \nre\n methods\n\n\n\n\nDivide regex in subgroups, each matching a different component of interest.\n\n\n(.)\n; delimite a group.\n\n\nR(.)[ST][^P]\n; stand for \u2018R\u2019, \u2018any character\u2019, pattern \u2018ST\u2019, any character different from \u2018P\u2019.\n\n\nThe \u2018any character\u2019 is also a subgroup.\n\n\nWhat ever is found between \nR\n and \n[ST][^P]\n is a subgroup.\n\n\n\n\n\n\nR(.{0,3})[ST][^P]\n; add a `{0,3}.\n\n\nThis qualifier or quantifiers means that at least 0 and at most 3 repetitions of \u2018R\u2019.\n\n\n\n\n\n\ngroup()\n; always return the complete matching substring (0 for no subgroup).\n\n\ngroup(#)\n; return subgroups numbered from left to right in increasing order (subgroup #).\n\n\n\n\nFind multiple patterns in a search string\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nimport\n \nre\n\n\n\nseq\n \n=\n \n'QSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'\n\n\n\npattern1\n \n=\n \nre\n.\ncompile\n(\n'R(.)[ST][^P]'\n)\n\n\nmatch1\n \n=\n \npattern1\n.\nsearch\n(\nseq\n)\n\n\nprint\n \nmatch1\n.\ngroup\n()\n\n\nprint\n \nmatch1\n.\ngroup\n(\n1\n)\n\n\n\npattern2\n \n=\n \nre\n.\ncompile\n(\n'R(.{0,3})[ST][^P]'\n)\n\n\nmatch2\n \n=\n \npattern2\n.\nsearch\n(\nseq\n)\n\n\nprint\n \nmatch2\n.\ngroup\n()\n\n\nprint\n \nmatch2\n.\ngroup\n(\n1\n)\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\nRRSL\nR\nRRRSL\nRR\n\n\n\n\n\n\nAnother example with two subgroups\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nimport\n \nre\n\n\n\nseq\n \n=\n \n'zzabcdzz'\n\n\n\npattern\n \n=\n \nre\n.\ncompile\n(\n'(a(b)c)d'\n)\n\n\nmatch\n \n=\n \npattern\n.\nsearch\n(\nseq\n)\n\n\nprint\n \nmatch\n.\ngroup\n(\n0\n)\n\n\nprint\n \nmatch\n.\ngroup\n(\n1\n)\n\n\nprint\n \nmatch\n.\ngroup\n(\n2\n)\n\n\nprint\n \nmatch\n.\ngroups\n()\n\n\n\n\n\n\n\n\n\ngroups()\n; return a tuple with the substrings corresponding to all subgroups.\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\nabcd\n\n\nabc\n\n\nb\n\n\n(\n'abc'\n,\n \n'b'\n)\n\n\n\n\n\n\n\nAssign  names to subgroup: \n?P<w1>\n and \n?P<w2>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \nre\n\n\n\nseq\n \n=\n \n'zzabcdzz'\n\n\n\npattern\n \n=\n \nre\n.\ncompile\n(\n'(?P<w1>a(?P<w2>b)c)d'\n)\n\n\nmatch\n \n=\n \npattern\n.\nsearch\n(\nseq\n)\n\n\nprint\n \nmatch\n.\ngroup\n(\n0\n)\n\n\nprint\n \nmatch\n.\ngroup\n(\n'w1'\n)\n\n\nprint\n \nmatch\n.\ngroup\n(\n'w2'\n)\n\n\n\n\n\n\n\nOuput:\n\n\n1\n2\n3\nabcd\nabc\nb\n\n\n\n\n\n\nMore \nre\n methods\n\n\n\n\nsplits(s)\n; split the string \ns\n at the matches of a regex.\n\n\nsub(r, s, [c])\n; return a new string \ns\n where nonoverlapping occurrences of a given pattern in the string are all replaced with the value of \nr\n. \nc\n, an optional number, stands for the maximum numbers of occurences.\n\n\nsubn(r, s, [c])\n; do what \nsub()\n does, but returns a tuple of two elements; the first element is the new string (as with \nsub(r, s, [c])\n) and the second is the number of replacements.\n\n\n\n\nSplit text and replace separators with a pattern\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nimport\n \nre\n\n\n\nseparator\n \n=\n \nre\n.\ncompile\n(\n'\\|'\n)\n\n\n\n# split\n\n\nannotation\n \n=\n \n'ATOM:CA|RES:ALA|CHAIN:B|NUMRES:166'\n\n\ncolumns\n \n=\n \nseparator\n.\nsplit\n(\nannotation\n)\n\n\nprint\n \ncolumns\n\n\n\n# replace\n\n\nnew_annotation\n \n=\n \nseparator\n.\nsub\n(\n'@'\n,\n \nannotation\n)\n\n\nprint\n \n\"replace all |:\"\n\n\nprint\n \nnew_annotation\n\n\n\nnew_annotation2\n \n=\n \nseparator\n.\nsub\n(\n'@'\n,\n \nannotation\n,\n \n2\n)\n\n\nprint\n \n\"replace 2 |:\"\n\n\nprint\n \nnew_annotation2\n\n\n\nnew_annotation3\n \n=\n \nseparator\n.\nsubn\n(\n'@'\n,\n \nannotation\n)\n\n\nprint\n \n\"replace all |:\"\n\n\nprint\n \nnew_annotation3\n\n\n\nnew_annotation4\n \n=\n \nseparator\n.\nsubn\n(\n'@'\n,\n \nannotation\n,\n \n2\n)\n\n\nprint\n \n\"replace 2 |:\"\n\n\nprint\n \nnew_annotation4\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n[\n'ATOM:CA'\n,\n \n'RES:ALA'\n,\n \n'CHAIN:B'\n,\n \n'NUMRES:166'\n]\n\n\nreplace\n \nall\n \n|\n:\n\n\nATOM\n:\nCA\n@RES\n:\nALA\n@CHAIN\n:\nB\n@NUMRES\n:\n166\n\n\nreplace\n \n2\n \n|\n:\n\n\nATOM\n:\nCA\n@RES\n:\nALA\n@CHAIN\n:\nB\n|\nNUMRES\n:\n166\n\n\nreplace\n \nall\n \n|\n:\n\n\n(\n'ATOM:CA@RES:ALA@CHAIN:B@NUMRES:166'\n,\n \n3\n)\n\n\nreplace\n \n2\n \n|\n:\n\n\n(\n'ATOM:CA@RES:ALA@CHAIN:B|NUMRES:166'\n,\n \n2\n)\n\n\n\n\n\n\n\nFind transcription factor binding sites\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nimport\n \nre\n\n\n\ngenome_seq\n \n=\n \nopen\n(\n'genome.txt'\n)\n.\nread\n()\n\n\n\n# read transcription factor binding site patterns\n\n\nsites\n \n=\n \n[]\n\n\nfor\n \nline\n \nin\n \nopen\n(\n'TFBS.txt'\n):\n\n    \nfields\n \n=\n \nline\n.\nsplit\n()\n\n    \ntf\n \n=\n \nfields\n[\n0\n]\n\n    \nsite\n \n=\n \nfields\n[\n1\n]\n\n    \nsites\n.\nappend\n((\ntf\n,\n \nsite\n))\n\n\n\n# match all TF's to the genome and print matches\n\n\nfor\n \ntf\n,\n \nsite\n \nin\n \nsites\n:\n\n    \ntfbs_regexp\n \n=\n \nre\n.\ncompile\n(\nsite\n)\n\n    \nall_matches\n \n=\n \ntfbs_regexp\n.\nfindall\n(\ngenome_seq\n)\n\n    \nmatches\n \n=\n \ntfbs_regexp\n.\nfinditer\n(\ngenome_seq\n)\n\n    \nif\n \nall_matches\n:\n\n        \nprint\n \ntf\n,\n \n':'\n\n        \nfor\n \ntfbs\n \nin\n \nmatches\n:\n\n            \nprint\n \n'\n\\t\n'\n,\n \ntfbs\n.\ngroup\n(),\n \ntfbs\n.\nstart\n(),\n \ntfbs\n.\nend\n()\n\n\n\n\n\n\n\nParse abstracts from PubMed HTML pages\n\n\n\n\nThe script opens the HTML webpage and parses it in order to selectively fetch some parts of it.\n\n\nExtract the title and the abstract text.\n\n\nThe title of the paper is enclosed between \n<h1>\n and \n</h1>\n.\n\n\nWhereas the text of the abstract is enclosed between \n<h3>\nAbstract\n</h3><div\n \nclass =\n \n\"\"\n><p>\n and \n</p>\n.\n\n\nThe paper.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nimport\n \nurllib2\n\n\nimport\n \nre\n\n\n\npmid\n \n=\n \n'18235848'\n\n\nurl\n \n=\n \n'http://www.ncbi.nlm.nih.gov/pubmed?term=\n%s\n'\n \n%\n \npmid\n\n\nhandler\n \n=\n \nurllib2\n.\nurlopen\n(\nurl\n)\n\n\nhtml\n \n=\n \nhandler\n.\nread\n()\n\n\n\ntitle_regexp\n \n=\n \nre\n.\ncompile\n(\n'<h1>.{5,400}</h1>'\n)\n\n\ntitle_text\n \n=\n \ntitle_regexp\n.\nsearch\n(\nhtml\n)\n\n\n\nabstract_regexp\n \n=\n \nre\n.\ncompile\n(\n'<AbstractText>.{20,3000}</AbstractText>'\n)\n\n\nabstract_text\n \n=\n \nabstract_regexp\n.\nsearch\n(\nhtml\n)\n\n\n\nprint\n \n'TITLE:'\n,\n \ntitle_text\n.\ngroup\n()\n \n\nprint\n \n'ABSTRACT:'\n,\n \nabstract_text\n.\ngroup\n()\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\nTITLE: \n<\nh1\n>\nQuantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade.\n</\nh1\n>\n\nABSTRACT: \n<\nAbstractText\n>\nSchistosomiasis is a tropical disease associated with high morbidity and mortality, currently affecting over 200 million people worldwide. Praziquantel is the only drug used to treat the disease, and with its increased use the probability of developing drug resistance has grown significantly. The Schistosoma parasites can survive for up to decades in the human host due in part to a unique set of antioxidant enzymes that continuously degrade the reactive oxygen species produced by the host's innate immune response. Two principal components of this defense system have been recently identified in S. mansoni as thioredoxin/glutathione reductase (TGR) and peroxiredoxin (Prx) and as such these enzymes present attractive new targets for anti-schistosomiasis drug development. Inhibition of TGR/Prx activity was screened in a dual-enzyme format with reducing equivalents being transferred from NADPH to glutathione via a TGR-catalyzed reaction and then to hydrogen peroxide via a Prx-catalyzed step. A fully automated quantitative high-throughput (qHTS) experiment was performed against a collection of 71,028 compounds tested as 7- to 15-point concentration series at 5 microL reaction volume in 1536-well plate format. In order to generate a robust data set and to minimize the effect of compound autofluorescence, apparent reaction rates derived from a kinetic read were utilized instead of end-point measurements. Actives identified from the screen, along with previously untested analogues, were subjected to confirmatory experiments using the screening assay and subsequently against the individual targets in secondary assays. Several novel active series were identified which inhibited TGR at a range of potencies, with IC(50)s ranging from micromolar to the assay response limit ( approximately 25 nM). This is, to our knowledge, the first report of a large-scale HTS to identify lead compounds for a helminthic disease, and provides a paradigm that can be used to jump-start development of novel therapeutics for other neglected tropical diseases.\n</\nAbstractText\n>\n\n\n\n\n\n\n\nSearch for keywords in a series of PubMed abstracts\n\n\n\n\nThis example can be applied to perform very simple text mining and can be compared to the \u201cfind\u201d tool in Microsoft Word.\n\n\nIt might stop on the first occurence.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport\n \nurllib2\n\n\nimport\n \nre\n\n\n\n# word to be searched\n\n\nword_regexp\n \n=\n \nre\n.\ncompile\n(\n'schistosoma'\n)\n\n\n\n# list of PMIDs where we want to search the word\n\n\npmids\n \n=\n \n[\n'18235848'\n,\n \n'22607149'\n,\n \n'22405002'\n,\n \n'21630672'\n]\n\n\nfor\n \npmid\n \nin\n \npmids\n:\n\n    \nurl\n \n=\n \n'http://www.ncbi.nlm.nih.gov/pubmed?term='\n \n+\n \npmid\n\n    \nhandler\n \n=\n \nurllib2\n.\nurlopen\n(\nurl\n)\n\n    \nhtml\n \n=\n \nhandler\n.\nread\n()\n\n    \ntitle_regexp\n \n=\n \nre\n.\ncompile\n(\n'<h1>.{5,400}</h1>'\n)\n\n    \ntitle\n \n=\n \ntitle_regexp\n.\nsearch\n(\nhtml\n)\n\n    \ntitle\n \n=\n \ntitle\n.\ngroup\n()\n \n    \nabstract_regexp\n \n=\n \nre\n.\ncompile\n(\n'<AbstractText>.{20,3000}</AbstractText>'\n)\n\n    \nabstract\n \n=\n \nabstract_regexp\n.\nsearch\n(\nhtml\n)\n\n    \nabstract\n \n=\n \nabstract\n.\ngroup\n()\n\n    \nword\n \n=\n \nword_regexp\n.\nsearch\n(\nabstract\n,\n \nre\n.\nIGNORECASE\n)\n\n    \nif\n \nword\n:\n\n        \n# display title and where the keyword was found\n\n        \nprint\n \ntitle\n\n        \nprint\n \nword\n.\ngroup\n(),\n \nword\n.\nstart\n(),\n \nword\n.\nend\n()\n\n\n\n\n\n\n\n\n\nCircumvent the problem with the \nfinditer()\n method.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nimport\n \nurllib2\n\n\nimport\n \nre\n\n\n\n# word to be searched\n\n\nword_regexp\n \n=\n \nre\n.\ncompile\n(\n'schistosoma'\n)\n\n\n\n# list of PMIDs where we want to search the word\n\n\npmids\n \n=\n \n[\n'18235848'\n,\n \n'22607149'\n,\n \n'22405002'\n,\n \n'21630672'\n]\n\n\nfor\n \npmid\n \nin\n \npmids\n:\n\n    \nurl\n \n=\n \n'http://www.ncbi.nlm.nih.gov/pubmed?term='\n \n+\n \npmid\n\n    \nhandler\n \n=\n \nurllib2\n.\nurlopen\n(\nurl\n)\n\n    \nhtml\n \n=\n \nhandler\n.\nread\n()\n\n    \ntitle_regexp\n \n=\n \nre\n.\ncompile\n(\n'<h1>.{5,400}</h1>'\n)\n\n    \ntitle\n \n=\n \ntitle_regexp\n.\nsearch\n(\nhtml\n)\n\n    \ntitle\n \n=\n \ntitle\n.\ngroup\n()\n \n    \nabstract_regexp\n \n=\n \nre\n.\ncompile\n(\n'<AbstractText>.{20,3000}</AbstractText>'\n)\n\n    \nabstract\n \n=\n \nabstract_regexp\n.\nsearch\n(\nhtml\n)\n\n    \nabstract\n \n=\n \nabstract\n.\ngroup\n()\n\n    \nwords\n \n=\n \nword_regexp\n.\nfinditer\n(\nabstract\n)\n\n    \nif\n \nwords\n:\n\n        \n# display title and where the keyword was found\n\n        \nprint\n \ntitle\n\n        \nfor\n \nword\n \nin\n \nwords\n:\n\n            \nprint\n \nword\n.\ngroup\n(),\n \nword\n.\nstart\n(),\n \nword\n.\nend\n()\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\n<\nh1\n>\nQuantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade.\n</\nh1\n>\n\n\n<\nh1\n>\nThe redox biology of schistosome parasites and applications for drug development.\n</\nh1\n>\n\n\n<\nh1\n>\nMoonlighting by different stressors: crystal structure of the chaperone species of a 2-Cys peroxiredoxin.\n</\nh1\n>\n\n\n<\nh1\n>\nInvestigations of the catalytic mechanism of thioredoxin glutathione reductase from Schistosoma mansoni.\n</\nh1\n>\n\n\n\n\n\n\n\nMore \nre\n methods\n\n\n\n\nfindall()\n; look for all (non-overlapping) occurrences of pattern in string; return a list of matches.\n\n\nfinditer()\n; same as above except returns an iterator instead of a list; for each match, the iterator returns a match object; it is adapted for loops!\n\n\n|\n;  \u2018OR\u2019.\n\n\n$\n; indicate that a match exists in the string only if the pattern is in the last position of the string.\n\n\n^\n; indicate that a match exists in the string only if the pattern is in the first position of the string.\n\n\n\n\nPython Regex, Characters and Metacharaters\n\n\n\n\nPart 3, Modular Programming\n\u00b6\n\n\nChapter 10, Divide a Program into Functions\n\u00b6\n\n\nBuilt-in functions\n\n\nlength, total, sum, range\n\n\n\n\nlen()\n.\n\n\nsum()\n.\n\n\nrange(n, m, step)\n; from n to m-1, n = 0 by default.\n\n\nxrange(n, m, step)\n; better suited for big numbers.\n\n\n\n\nDefine functions\n\n\ndocstring, docstrings\n\n\n\n\nThe documentation is retrieved with the \n__doc__\n attribute: type \naddition.__doc__\n.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ndef\n \naddition\n(\narg1\n,\n \narg2\n):\n\n    \n'''\n\n\n    documentation: calculates the sum of two numbers\n\n\n    '''\n\n    \nresult\n \n=\n \narg1\n \n+\n \narg2\n\n    \nreturn\n \nresult\n\n\n\nprint\n \naddition\n(\n1\n,\n1\n)\n\n\n\n\n\n\n\nLambda functions\n\n\n\n\nSmall anonymous functions; they are not declared using \ndef\n.\n\n\nThey do not contain return statement.\n\n\nThey can be defined in an argument in a function (useful).\n\n\nThere are nameless.\n\n\n\n\n1\n2\n3\n4\ndef\n \nf\n(\nx\n):\n\n    \nreturn\n \nx\n \n**\n \n2\n\n\n\nprint\n \nf\n(\n8\n)\n\n\n\n\n\n\n\nvs\n\n\n1\n2\n3\ng\n \n=\n \nlambda\n \nx\n:\n \nx\n \n**\n \n2\n\n\n\nprint\n \ng\n(\n8\n)\n\n\n\n\n\n\n\nor\n\n\n1\n(\nlambda\n \nx\n:\n \nx\n \n**\n \n2\n)(\n8\n)\n\n\n\n\n\n\n\n\n\nUse a \nlambda\n function as an argument of a built-in function:\n\n\n\n\n1\n2\n3\n4\ndata\n \n=\n \n[\n'ASDF'\n,\n \n'SDFSADGSAG'\n,\n \n'SDFSD'\n,\n \n'GSGDGG'\n]\n\n\n\nnew_data\n \n=\n \nsorted\n(\ndata\n,\n \nkey\n \n=\n \nlambda\n \nx\n:\n \nlen\n(\nx\n))\n\n\nprint\n \nnew_data\n\n\n\n\n\n\n\nOutput:\n\n\n1\n[\n'ASDF'\n,\n \n'SDFSD'\n,\n \n'GSGDGG'\n,\n \n'SDFSADGSAG'\n]\n\n\n\n\n\n\n\nFunction Arguments\n\n\n\n\nrequired arguments.\n\n\nkeyword arguments.\n\n\ndefault arguments.\n\n\nvariable-length arguments.\n\n\n\n\n1. Required Arguments\n\n\n1\n2\n3\n4\ndef\n \nprint_funct\n(\nnum\n,\n \nseq\n):\n\n    \nprint\n \nnum\n,\n \nseq\n\n\n\nprint_funct\n(\n10\n,\n \n\"ABC\"\n)\n\n\n\n\n\n\n\nOutput:\n\n\n1\n10\n \nABC\n\n\n\n\n\n\n\n2. Keyword Arguments\n\n\n1\n2\n3\n4\ndef\n \nprint_funct\n(\nnum\n,\n \nseq\n):\n\n    \nprint\n \nnum\n,\n \nseq\n\n\n\nprint_funct\n(\nseq\n \n=\n \n\"ABC\"\n,\n \nnum\n \n=\n \n10\n)\n\n\n\n\n\n\n\nOutput:\n\n\n1\n10\n \nABC\n\n\n\n\n\n\n\n3. Default Arguments\n\n\nsequence\n\n\n\n\nThe argument is given by default; but can be overwritten!\n\n\n\n\n1\n2\n3\n4\n5\ndef\n \nprint_funct\n(\nnum\n,\n \nseq\n \n=\n \n\"A\"\n):\n\n    \nprint\n \nnum\n,\n \nseq\n\n\n\nprint_funct\n(\n10\n,\n \n\"ABC\"\n)\n\n\nprint_funct\n(\n10\n)\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n10\n \nABC\n\n\n10\n \nA\n\n\n\n\n\n\n\n4. Variable-Length Arguments\n\n\nargument, list, tuple, dictionary\n\n\n\n\nFlexibility of providing any tuple.\n\n\n\n\n1\n2\n3\n4\n5\n6\ndef\n \nprint_args\n(\n*\nargs\n):\n\n    \nprint\n \nargs\n\n\n\nprint_args\n(\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n)\n\n\nprint_args\n(\n'Hi'\n)\n\n\nprint_args\n(\n100\n,\n \n200\n,\n \n\"ABC\"\n)\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n(\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n)\n\n\n(\n'Hi'\n)\n\n\n(\n100\n,\n \n200\n,\n \n'ABC'\n)\n\n\n\n\n\n\n\n\n\nProvide both the keys and values for a returned dictionary.\n\n\n\n\n1\n2\n3\n4\ndef\n \nprint_args2\n(\n**\nargs\n):\n\n    \nprint\n \nargs\n\n\n\nprint_args2\n(\nnum\n \n=\n \n100\n,\n \nnum2\n \n=\n \n200\n,\n \nseq\n \n=\n \n\"ABC\"\n)\n\n\n\n\n\n\n\nOutput:\n\n\n1\n{\n'num'\n:\n \n100\n,\n \n'seq'\n:\n \n'ABC, '\nnum2\n': 200}\n\n\n\n\n\n\n\nConvert a string into a tuple or vice-versa\n\n\n\n\nstruct\n package.\n\n\nIn the format, \ns\n stands for string, \n3s\n stands for a three-character string.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nimport\n \nstruct\n\n\n\n# pack() method; creates a string\n\n\nformat\n \n=\n \n'2s1s1s1s1s'\n\n\ngroup\n \n=\n \nstruct\n.\npack\n(\nformat\n,\n \n'10'\n,\n \n'2'\n,\n \n'3'\n,\n \n'4'\n,\n \n'5'\n)\n\n\nprint\n \ngroup\n\n\n\n# unpack() method; parses the string to a tuple\n\n\nformat\n \n=\n \n'1s2s1s1s'\n\n\nline\n \n=\n \n'12345'\n\n\ncol\n \n=\n \nstruct\n.\nunpack\n(\nformat\n,\n \nline\n)\n\n\nprint\n \ncol\n\n\n\n# calcsize() returns the number of characters\n\n\n# in a given format string\n\n\nformat\n \n=\n \n'30s30s20s1s'\n\n\nprint\n \nstruct\n.\ncalcsize\n(\nformat\n)\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n102345\n\n\n(\n'1'\n,\n \n'23'\n,\n \n'4'\n,\n \n'5'\n)\n\n\n81\n\n\n\n\n\n\n\n\n\nThen, convert the tuple to a list if needed.\n\n\n\n\nFunction to calculate distance between two coordinates\n\n\npower\n\n\n\n\nmath\n package.\n\n\npow(x, y)\n replaces \nx ** y\n.\n\n\n\n\n\n\ndistance\n package; geometric calculations.\n\n\ncalc-dist()\n.\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nfrom\n \nmath\n \nimport\n \nsqrt\n\n\n\ndef\n \ncalc_dist\n(\np1\n,\n \np2\n):\n\n    \n'''returns the pythagorian distance between two 3D points'''\n\n    \ndx\n \n=\n \np1\n[\n0\n]\n \n-\n \np2\n[\n0\n]\n\n    \ndy\n \n=\n \np1\n[\n1\n]\n \n-\n \np2\n[\n1\n]\n\n    \ndz\n \n=\n \np1\n[\n2\n]\n \n-\n \np2\n[\n2\n]\n\n    \ndistsq\n \n=\n \npow\n(\ndx\n,\n \n2\n)\n \n+\n \npow\n(\ndy\n,\n \n2\n)\n \n+\n \npow\n(\ndz\n,\n \n2\n)\n\n    \ndistance\n \n=\n \nsqrt\n(\ndistsq\n)\n\n    \nreturn\n \ndistance\n\n\n\nprint\n \ncalc_dist\n([\n3.0\n,\n \n3.0\n,\n \n3.0\n],\n \n[\n9.0\n,\n \n9.0\n,\n \n9.0\n])\n\n\n\n\n\n\n\nOutput:\n\n\n1\n10.3923048454\n\n\n\n\n\n\n\nChapter 11 Managing Complexity with Classes\n\u00b6\n\n\nClasses\n\n\n\n\nDefine a Class: \nclass\n \nProtein\n.\n\n\nAdd docstrings.\n\n\nThe constructor \n__init__()\n is a special function that defines what kinds of data your class should contain and enables the creation of instances. Add a docstring.\n\n\nOne class can have many instances. \nlys = Protein('lysozyme')\n is an instance of \nclass\n \nProtein\n.\n\n\nCreate a class function; a class function works like a method.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nclass\n \nProtein\n:\n\n    \n'''Class storing protein names'''\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nname\n):\n\n        \n'''Sets the name of a protein'''\n\n        \nself\n.\nname\n \n=\n \nname\n\n\n    \ndef\n \nwrite\n(\nself\n):\n\n        \n'''Writes protein name to the screen.'''\n\n        \nprint\n \n'I am '\n \n+\n \nself\n.\nname\n\n\n\nlys\n \n=\n \nProtein\n(\n'lysozyme'\n)\n\n\nmyo\n \n=\n \nProtein\n(\n'myoglobin'\n)\n\n\n\nprint\n \n\"Docstrings:\"\n\n\nprint\n \nProtein\n.\n__doc__\n\n\nprint\n \nProtein\n.\n__init__\n.\n__doc__\n\n\nprint\n \nProtein\n.\nwrite\n.\n__doc__\n\n\n\nprint\n \n\"\"\n\n\n\nprint\n \nlys\n.\nname\n\n\nprint\n \nmyo\n.\nname\n\n\n\nlys\n.\nwrite\n()\n \n# a class function works like a method\n\n\nmyo\n.\nwrite\n()\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nDocstrings\n:\n\n\nClass\n \nstoring\n \nprotein\n \nnames\n\n\nSets\n \nthe\n \nname\n \nof\n \na\n \nprotein\n\n\nWrites\n \nprotein\n \nname\n \nto\n \nthe\n \nscreen\n.\n\n\n\nlysozyme\n\n\nmyoglobin\n\n\nI\n \nam\n \nlysozyme\n\n\nI\n \nam\n \nmyoglobin\n\n\n\n\n\n\n\nPrinting a object created from a class\n\n\n\n\nPrinting an object from a class is not very informative.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nclass\n \nPea\n:\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \ngenotype\n):\n\n        \nself\n.\ngenotype\n \n=\n \ngenotype\n\n\n\nclass\n \nPeaStrain\n:\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \npeas\n):\n\n        \nself\n.\npeas\n \n=\n \npeas\n\n\n\nyellow\n \n=\n \nPea\n(\n'GG'\n)\n\n\ngreen\n \n=\n \nPea\n(\n'gg'\n)\n\n\nstrain\n \n=\n \nPeaStrain\n([\nyellow\n,\n \ngreen\n])\n\n\n\nprint\n \nPea\n\n\nprint\n \nPeaStrain\n\n\nprint\n \nPea\n.\n__init__\n\n\nprint\n \nPeaStrain\n.\n__init__\n\n\n\nprint\n \nyellow\n\n\nprint\n \ngreen\n\n\nprint\n \nstrain\n\n\n\n\n\n\n\nOutput:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n__main__\n.\nPea\n\n\n__main__\n.\nPeaStrain\n\n\n<\nunbound\n \nmethod\n \nPea\n.\n__init__\n>\n\n\n<\nunbound\n \nmethod\n \nPeaStrain\n.\n__init__\n>\n\n\n<\n__main__\n.\nPea\n \ninstance\n \nat\n \n0x0000000001DC6748\n>\n\n\n<\n__main__\n.\nPea\n \ninstance\n \nat\n \n0x0000000001DC6748\n>\n\n\n<\n__main__\n.\nPea\n \ninstance\n \nat\n \n0x000000000216BE08\n>\n\n\n<\n__main__\n.\nPeaStrain\n \ninstance\n \nat\n \n0x000000000216BE48\n>\n\n\n\n\n\n\n\n\n\n__repr__\n fixes this problem. The \n__repr__\n method takes no parameters except self.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\nclass\n \nPea\n:\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \ngenotype\n):\n\n        \nself\n.\ngenotype\n \n=\n \ngenotype\n\n\n    \ndef\n \n__repr__\n(\nself\n):\n\n        \nreturn\n \n'genotype: [\n%s\n]'\n \n%\n \n(\nself\n.\ngenotype\n)\n\n\n\nclass\n \nPeaStrain\n:\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \npeas\n):\n\n        \nself\n.\npeas\n \n=\n \npeas\n\n\n    \ndef\n \n__repr__\n(\nself\n):\n\n        \nreturn\n \n'strain with \n%i\n peas'\n \n%\n \n(\nlen\n(\nself\n.\npeas\n))\n\n\n\nyellow\n \n=\n \nPea\n(\n'GG'\n)\n\n\ngreen\n \n=\n \nPea\n(\n'gg'\n)\n\n\nstrain\n \n=\n \nPeaStrain\n([\nyellow\n,\n \ngreen\n])\n\n\n\nprint\n \nPea\n\n\nprint\n \nPeaStrain\n\n\nprint\n \nPea\n.\n__init__\n\n\nprint\n \nPeaStrain\n.\n__init__\n\n\n\nprint\n \nyellow\n\n\nprint\n \nrepr\n(\nyellow\n)\n\n\nprint\n \nrepr\n(\ngreen\n)\n\n\nprint\n \nrepr\n(\nstrain\n)\n\n\n\n\n\n\n\nNew output:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n__main__\n.\nPea\n\n\n__main__\n.\nPeaStrain\n\n\n<\nunbound\n \nmethod\n \nPea\n.\n__init__\n>\n\n\n<\nunbound\n \nmethod\n \nPeaStrain\n.\n__init__\n>\n\n\ngenotype\n:\n \n[\nGG\n]\n\n\ngenotype\n:\n \n[\nGG\n]\n\n\ngenotype\n:\n \n[\ngg\n]\n\n\nstrain\n \nwith\n \n2\n \npeas\n\n\n\n\n\n\n\n\n\n\n\nNo difference between \nprint yellow\n and \nprint repr(yellow)\n.\n\n\n\n\n\n\nObjects\u2019 predefined class attributes:\n\n\n\n\n__doc__\n: the docstring.\n\n\n__dict__\n: a list of attributes.\n\n\n__name__\n: the name of the object.\n\n\n__bases__\n: the object inherits from what object. For example, above, the PeaStrain class inherits from the Pea class. Classes (subclasses) can inherit from other classes\n\nand extend their functionality.\n\n\n__module__\n: the name of the module in which this class was defined. \n__main__\n means the object is in the current module. \n\n\n\n\n\n\n\n\nA python script can be imported just like a package:\n\n\n\n\nimport\n \nProtein\n.\n\n\nfrom\n \nProtein\n \nimport\n \nwrite\n.\n\n\nimport\n \nmath\n.\n\n\nfrom\n \nmath\n \nimport\n \nsqrt\n.\n\n\n\n\n\n\nSynonyms: packages, library, module, script, etc.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\nclass\n \nPea\n:\n\n    \n'''docstring 1'''\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \ngenotype\n):\n\n        \nself\n.\ngenotype\n \n=\n \ngenotype\n\n\n    \ndef\n \n__repr__\n(\nself\n):\n\n        \nreturn\n \n'genotype: [\n%s\n]'\n \n%\n \n(\nself\n.\ngenotype\n)\n\n\n\nyellow\n \n=\n \nPea\n(\n'GG'\n)\n\n\n\nprint\n \nyellow\n\n\nprint\n \nPea\n.\n__doc__\n\n\nprint\n \nPea\n.\n__dict__\n\n\nprint\n \nPea\n.\n__name__\n\n\nprint\n \nPea\n.\n__bases__\n\n\nprint\n \nPea\n.\n__module__\n\n\n\nprint\n \n\"\"\n\n\n\nclass\n \nPeaclone\n(\nPea\n):\n\n    \n'''docstring 2'''\n\n\n\nblue\n \n=\n \nPeaclone\n(\n'AA'\n)\n\n\n\nprint\n \nblue\n\n\nprint\n \nPeaclone\n.\n__doc__\n\n\nprint\n \nPeaclone\n.\n__dict__\n\n\nprint\n \nPeaclone\n.\n__name__\n\n\nprint\n \nPeaclone\n.\n__bases__\n\n\nprint\n \nPeaclone\n.\n__module__\n\n\n\n\n\n\n\nOutput:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\ngenotype\n:\n \n[\nGG\n]\n\n\ndocstring\n \n1\n\n\n{\n'__module__'\n:\n \n'__main__'\n,\n \n'__doc__'\n:\n \n'docstring 1'\n,\n \n'__init__'\n:\n \n<\nfunction\n \n__init__\n \nat\n \n0x000000000229FC18\n>\n,\n \n'__repr__'\n:\n \n<\nfunction\n \n__repr__\n \nat\n \n0x000000000229FC88\n>\n}\n\n\nPea\n\n\n()\n\n\n__main__\n\n\n\ngenotype\n:\n \n[\nAA\n]\n\n\ndocstring\n \n2\n\n\n{\n'__module__'\n:\n \n'__main__'\n,\n \n'__doc__'\n:\n \n'docstring 2'\n}\n\n\nPeaclone\n\n\n(\n<\nclass\n \n__main__\n.\nPea\n \nat\n \n0x0000000001D3C828\n>\n,)\n\n\n__main__\n\n\n\n\n\n\n\n\n\nMore attributes:\n\n\n__del__\n.\n\n\n__getattr__\n.\n\n\n__setattr__\n.\n\n\n__delattr__\n.\n\n\n\n\n\n\n\n\nChapter 12 Debugging\n\u00b6\n\n\nbug\n\n\n\n\nKinds of errors:\n\n\nLogical errors.\n\n\nSyntax errors.\n\n\nRuntime errors.\n\n\n\n\n\n\n\n\nIDE (Eric, PyCharm, etc.) automate debugging.\n\n\n1. Logical (semantic) errors\n\n\n\n\nResults are wrong because the program does something different from what you had in mind.\n\n\n\n\n2. Syntax errors\n\n\n\n\nWrong symbol, mispelling, wrong position in the code, etc..\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\ndef\n \nevaluate_data\n(\ndata\n,\n \nlower\n \n=\n \n100\n,\n \nupper\n \n=\n \n300\n):\n\n    \n\"\"\"Analyze a two-column table. Counts data points in three bins.\"\"\"\n\n\n    \nsmaller\n \n=\n \n0\n\n    \nbetween\n \n=\n \n0\n\n    \nbigger\n  \n=\n \n0\n\n\n    \nfor\n \nlength\n \nin\n \ndata\n:\n\n        \nif\n \nlength\n \n<\n \nlower\n:\n\n            \nsmaller\n \n=\n \nsmaller\n \n+\n \n1\n\n        \nelif\n \nlower\n \n<\n \nlength\n \n<\n \nupper\n:\n\n            \nbetween\n \n=\n \nbetween\n \n+\n \n1\n\n        \nelif\n \nlength\n \n>\n \nupper\n:\n\n            \nbigger\n \n=\n \n1\n\n    \nreturn\n \nsmaller\n,\n \nbetween\n,\n \nbigger\n\n\n\ndef\n \nread_data\n(\nfilename\n):\n\n    \n\"\"\"Reads neuron lengths from a text file.\"\"\"\n\n\n    \nprimary\n,\n \nsecondry\n \n=\n \n[],\n \n[]\n\n\n    \nfor\n \nline\n \nin\n \nopen\n(\nfilename\n):\n\n        \ncategory\n,\n \nlength\n \n=\n \nline\n.\nsplit\n(\n\"\n\\t\n\"\n)\n\n        \nlength\n \n=\n \nfloat\n(\nlength\n)\n\n        \nif\n \ncategory\n \n==\n \n\"Primary\"\n\n            \nprimary\n.\nappend\n(\nlength\n)\n\n        \nelif\n \ncategory\n \n==\n \n\"Secondary\"\n:\n\n            \nsecondary\n.\nappend\n(\nlength\n)\n\n    \nreturn\n \nprimary\n,\n \nsecondary\n\n\n\ndef\n \nwrite_output\n(\nfilename\n,\n \ncount_pri\n,\n \ncount_sec\n):\n\n    \n\"\"\"Writes counted values to a file.\"\"\"\n\n\n    \noutput\n \n=\n \nopen\n(\nfilename\n,\n\"w\"\n)\n\n    \noutput\n.\nwrite\n(\n\"category      <100  100-300   >300\n\\n\n\"\n)\n\n    \noutput\n.\nwrite\n(\n\"Primary  :  \n%5i\n   \n%5i\n   \n%5i\n\\n\n\"\n \n%\n \ncount_pri\n)\n\n    \noutput\n.\nwrite\n(\n\"Secondary:  \n%5i\n   \n%5i\n   \n%5i\n\\n\n\"\n \n%\n \ncount_sec\n)\n\n    \noutput\n.\nclose\n()\n\n\n\nprimary\n,\n \nsecondary\n \n=\n \nread_data\n(\n'neuron_data.xls'\n)\n\n\ncount_pri\n \n=\n \nevaluate_data\n(\nprimary\n)\n\n\ncount_sec\n \n=\n \nevaluate_data\n(\nsecondary\n)\n\n\nwrite_output_file\n(\n'results.txt'\n \n,\n \ncount_pri\n,\ncount_sec\n)\n\n\n\n\n\n\n\nBug 1\n\n\n1\nif\n \ncategory\n \n==\n \n\"Primary\"\n\n\n\n\n\n\n\n\n\nCause: \nSyntaxError\n:\n \ninvalid\n \nsyntax\n.\n\n\nFix:\n\n\n\n\n1\nif\n \ncategory\n \n==\n \n\"Primary\"\n:\n\n\n\n\n\n\n\n\n\nOther common \nSyntaxErrors\n:\n\n\nEOL\nor End Of Line; an open quote somewhere without a matching closing quote.\n\n\nTokenError\n; an open parenthesis, but not a matching closing parenthesis.\n\n\netc.\n\n\n\n\n\n\n\n\nBug 2\n\n\n1\nwrite_output_file\n(\n'results.txt'\n \n,\n \ncount_pri\n,\ncount_sec\n)\n\n\n\n\n\n\n\n\n\nCause: \nNameError\n:\n \nname\n \n'write_output_file'\n \nis\n \nnot\n \ndefined\n.\n\n\nFix:\n\n\n\n\n1\n2\n3\n4\n5\nfile\n \n=\n \nopen\n(\n'results.txt'\n \n,\n \n'w'\n)\n\n\nfile\n.\nwrite\n(\nstr\n(\ncount_pri\n))\n\n\nfile\n.\nwrite\n(\n'\n\\n\n'\n)\n\n\nfile\n.\nwrite\n(\nstr\n(\ncount_sec\n))\n\n\nfile\n.\nclose\n()\n\n\n\n\n\n\n\n3. Runtime Error\n\n\nIOError\n\n\n1\nprimary\n,\n \nsecondary\n \n=\n \nread_data\n(\n'neuron_data.xls'\n)\n\n\n\n\n\n\n\n\n\nCause: \nIOError: [Errno21] No such file or directory: 'neuron_data.xls'\n\n\nFix: the file extention is .txt.\n\n\nOther common bugs and causes:\n\n\nMispelled files, directory name.\n\n\nWrong website URL.\n\n\nUser without the permission or access.\n\n\nThe file is already opened.\n\n\nProblem with the Internet connection.\n\n\nWhitespace, uppercase, lowercase letters.\n\n\nFile in a different directory.\n\n\nExpected date format.\n\n\netc.\n\n\n\n\n\n\n\n\nNameError\n\n\n1\n2\n3\n4\nprimary\n,\n \nsecondry\n \n=\n \n[],\n \n[]\n\n\n...\n\n\n...\n\n\nelif\n \ncategory\n \n==\n \n\"Secondary\"\n:\n\n\n\n\n\n\n\n\n\nCause: \nNameError: 'secondary' is not defined\n. The \u2018name\u2019 was misspelled when called.\n\n\nFix: add the line \nprint dir()\n before the errors occurs. It shows the list of variables that are known. In the above case, only \nsecondry\n exits while \nsecondary\n is called. Choose one.\n\n\nOther common bugs and causes:\n\n\nUnknown object name:\n\n\na name was not imported (\nimport\n \n*\n).\n\n\na name was not initialized (as in \ncounter = 0\n for \ncounter += 1\n).\n\n\n\n\n\n\n\n\n\n\n\n\nIndexError\n\n\n\n\nCause and fix: when \nprint data[3]\n looks into \ndata = [1, 2, 3]\n, the list index is out of range.\n\n\n\n\nKeyError\n\n\n1\n2\nspam\n \n=\n \n{\n'cat'\n:\n \n'Zophie'\n,\n \n'dog'\n:\n \n'Basil'\n,\n \n'mouse'\n:\n \n'Whiskers'\n}\n\n\nprint\n(\n'The name of my pet zebra is '\n \n+\n \nspam\n[\n'zebra'\n])\n\n\n\n\n\n\n\n\n\nCause and fix: the key does not exist!\n\n\n\n\nImportError\n\n\n\n\nCauses and fixes:\n\n\nThe imported module name is mispelled.\n\n\nThe imported module is located in a subdirectory without an \n__init__.py\n file.\n\n\nTry adding import sys and print sys.path; you need to add the directory to the PYTHONPATH variable or to append it to the sys.path.\n\n\nThe imported module has a duplicate name (two functions with the same name; try working with classes to avoir that).\n\n\n\n\n\n\n\n\nValueError\n\n\n\n\nCause and fix: when an object is loaded with a wrong type to perform another operation; variable \nrange_a\n should be a number for the loop \nfor a in range(range_a):\n, but a string is given instead.\n\n\nOther common bugs and causes: \nIndentationError\n:\n \nunexpected\n \nindent\n, \nIndentationError\n:\n \nunindent\n \ndoes\n \nnot\n \nmatch\n \nany\n \nouter\n \nindentation\n \nlevel\n, and \nIndentationError\n:\n \nexpected\n \nan\n \nindented\n \nblock\n.\n\n\n\n\nTypeError\n\n\n\n\nCause and fix: an object does not support item assignment.\n\n\n\n\n1\n2\nspam\n \n=\n \n'I have a pet cat.'\n\n\nspam\n[\n13\n]\n \n=\n \n'r'\n\n\n\n\n\n\n\n\n\nCause:  cannot convert implicitly an object.\n\n\n\n\n1\n2\nnumEggs\n \n=\n \n12\n\n\nprint\n(\n'I have '\n \n+\n \nnumEggs\n \n+\n \n' eggs.'\n)\n\n\n\n\n\n\n\n\n\nFix:\n\n\n\n\n1\n2\nnumEggs\n \n=\n \n12\n\n\nprint\n(\n'I have '\n \n+\n \nstr\n(\nnumEggs\n)\n \n+\n \n' eggs.'\n)\n\n\n\n\n\n\n\n\n\nCause:  an object is misinterpreted (for another object).\n\n\n\n\n1\n2\n3\nspam\n \n=\n \n[\n'cat'\n,\n \n'dog'\n,\n \n'mouse'\n]\n\n\nfor\n \ni\n \nin\n \nrange\n(\nspam\n):\n\n    \nprint\n(\nspam\n[\ni\n])\n\n\n\n\n\n\n\n\n\nFix: \nfor i in spam:\n.\n\n\n\n\nAttributeError\n\n\n\n\nCause and fix: apply the right method.\n\n\n\n\n1\n2\nspam\n \n=\n \n'THIS IS IN LOWERCASE.'\n\n\nspam\n \n=\n \nspam\n.\nlowerr\n()\n\n\n\n\n\n\n\nUnboundLocalError\n\n\n\n\nCause and fix: a variable is referenced before assignment.\n\n\n\n\nCountermeasures to prevent errors\n\n\n\n\nBreak down the code in parts; print to a file using \npython code.py > output.txt\n.\n\n\nCompare the input and output (print the input data, print the output data, create control points).\n\n\nAdd lots of \nprint\n statements within the code as control points,\n\n\nUse descriptive and explicit object names (\nsequence_file\n is better than \ns_file\n).\n\n\nStart function with verbs (\nread_sequence_file\n is better than \nseq_file\n).\n\n\nAdd comments.\n\n\nAvoid \nimport\n \n*\n, but rather \nfrom\n \nmath\n \nimport\n \npi\n.\n\n\nFollow PEP8 and PEP20! \npylint\n and \nflake8\n packages.\n\n\nIDE (Eric, PyCharm, Spyder, etc.) automate debugging and easily execute \npylint\n and \nflake8\n.\n\n\n\n\nA note on \nraw_input()\n and \ninput()\n\n\npython2, python3, py2, py3\n\n\n\n\nIn Python 2, \nraw_input()\n takes exactly what the user typed and passes it back as a string. \ninput()\n takes the \nraw_input()\n and performs an \neval()\n on it as well. \ninput()\n expects a syntactically correct python statement where \nraw_input()\n does not.\n\n\nThe \neval()\n function run the code within itself:\n\n\n\n\n1\n2\n3\n4\n5\n>>>\n \nx\n \n=\n \n1\n\n\n>>>\n \neval\n(\n'x + 1'\n)\n\n\n2\n\n\n>>>\n \neval\n(\n'x'\n)\n\n\n1\n\n\n\n\n\n\n\n\n\nIn Python 3, \nraw_input()\n is renamed to \ninput()\n and the old \ninput()\n is removed. If you want to use the old \ninput()\n, you can do \neval(input())\n.\n\n\n\n\nCountermeasures to prevent errors: the Python debugger or \npdb\n\n\n\n\npdb\n package.\n\n\n\n\n1\n2\n3\n4\n# on top of the code\n\n\nimport\n \npdb\n\n\n\npdb\n.\nset_trace\n()\n\n\n\n\n\n\n\n\n\nThe code is executed line by line:\n\n\n\u2018n\u2019 execute the next line.\n\n\n\u2018s\u2019 execute the next line but does not descend into functions.\n\n\n\u2018l\u2019 shows where in the code the program currently is.\n\n\n\u2018c\u2019 continues execution normally.\n\n\n\n\n\n\n\n\nCountermeasurea to prevent errors: \ntry, except\n\n\n1\n2\n3\n4\n5\n6\ntry\n:\n\n    \na\n \n=\n \nfloat\n(\nraw_input\n(\n\"Insert a number:\"\n))\n\n    \nprint\n \na\n\n\nexcept\n \nValueError\n:\n\n    \nprint\n \n\"You haven't inserted a number. Please retry.\"\n\n    \nraise\n \nSystemExit\n\n\n\n\n\n\n\n\n\nelse\n is optional and only executed if no exception was generated.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ntry\n:\n\n    \nfilename\n \n=\n \nraw_input\n(\n\"Insert a filename:\"\n)\n\n    \nin_file\n \n=\n \nopen\n(\nfilename\n)\n\n\nexcept\n \nIOError\n:\n\n    \nprint\n \n\"The filename \n%s\n has not been found.\"\n \n%\n \nfilename\n\n    \nraise\n \nSystemExit\n\n\nelse\n:\n\n    \nfor\n \nline\n \nin\n \nin_file\n:\n\n        \nprint\n \nline\n\n        \nin_file\n.\nclose\n()\n\n\n\n\n\n\n\n\n\nUsually, exceptions are typos and wrong entries:\n\n\nSyntaxError\n.\n\n\nIOError\n.\n\n\nNameError\n.\n\n\nValueError\n.\n\n\n\n\n\n\nRarely will we see:\n\n\nIndexError\n.\n\n\nKeyError\n.\n\n\nImportError\n.\n\n\nTypeError\n.\n\n\nAttributeError\n.\n\n\nUnbounLocalError\n.\n\n\n\n\n\n\n\n\nChapter 13, Using External Modules, The Python Interface to R\n\u00b6\n\n\n\n\nRPy2\n package; bridge Python with R.\n\n\n\n\nThe R code:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\np \n=\n \npi\n\nx \n=\n \nc\n(\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n)\n\ny \n=\n \nseq\n(\n1\n,\n \n10\n)\n\nm \n=\n \nmatrix\n(\ny\n,\n nrow \n=\n \n5\n)\n\nn \n=\n \nmatrix\n(\ny\n,\n ncol \n=\n \n5\n)\n\nf \n=\n read.table\n(\n'RandomDistribution.tsv'\n,\n sep \n=\n \n'\\t'\n)\n\nf_matrix \n=\n \nmatrix\n(\nf\n,\n ncol \n=\n \n7\n)\n\nmean_first_col \n=\n \nmean\n(\nf_mean\n[\n0\n])\n\n\n\n\n\n\n\nThe Python code:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \nrpy2.reobjects\n \nas\n \nrobjects\n\n\n\nr\n \n=\n \nrobjects\n.\nr\n\n\n\npi\n \n=\n \nr\n.\npi\n\n\nx\n \n=\n \nr\n.\nc\n(\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n)\n\n\ny\n \n=\n \nr\n.\nseq\n(\n1\n,\n \n10\n)\n\n\nm\n \n=\n \nr\n.\nmatrix\n(\ny\n,\n \nnrow\n \n=\n \n5\n)\n\n\nn\n \n=\n \nr\n.\nmatrix\n(\ny\n,\n \nncol\n \n=\n \n5\n)\n\n\nf\n \n=\n \nr\n(\n\"read.table('RandomDistribution.tsv', sep = '\n\\t\n')\"\n)\n\n\nf_matrix\n \n=\n \nr\n.\nmatrix\n(\nf\n,\n \nncol\n \n=\n \n7\n)\n\n\nmean_first_col\n \n=\n \nr\n.\nmean\n(\nf_mean\n[\n0\n])\n\n\n\n\n\n- Python is better suited to implement solutions by building GUIs or freezing the code.\n\n- Rpy2 is the best of both worlds: \n\n    - R statistical analyses and data visualization.\n\n    - Python computation power with SciPy/NumPy/Pandas.\n\n\nCalculate a mean value from a table file\n\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \nrpy2.robjects\n \nas\n \nrobjects\n\n\n\nr\n \n=\n \nrobjects\n.\nr\n\n\ntable\n \n=\n \nr\n(\n\"read.table('RandomDistribution.tsv', sep = '\n\\t\n')\"\n)\n\n\nmatrix\n \n=\n \nr\n.\nmatrix\n(\ntable\n,\n \nncol\n \n=\n \n7\n)\n\n\nmean_first_col\n \n=\n \nr\n.\nmean\n(\nmatrix\n[\n0\n])\n\n\nprint\n \nmean_first_col\n\n\n\n\n\n\n\nDraw a histogram\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nimport\n \nrpy2.robjects\n \nas\n \nro\n\n\nfrom\n \nrpy2.robjects.packages\n \nimport\n \nimportr\n\n\n\nr\n \n=\n \nro\n.\nr\n\n\ntable\n \n=\n \nr\n(\n\"read.table('RandomDistribution.tsv',sep = '\n\\t\n')\"\n)\n\n\ngrdevices\n \n=\n \nimportr\n(\n'grDevices'\n)\n\n\ngrdevices\n.\npng\n(\nfile\n \n=\n \n\"Plot.png\"\n,\n \nwidth\n \n=\n \n512\n,\n \nheight\n \n=\n \n512\n)\n\n\nr\n.\nplot\n(\ntable\n[\n1\n],\n \ntable\n[\n2\n],\n \nxlab\n \n=\n \n\"x\"\n,\n \nylab\n \n=\n \n\"y\"\n)\n\n\ngrdevices\n.\ndev_off\n()\n\n\n\ngrdevices\n.\npng\n(\nfile\n=\n\"Histogram.png\"\n,\n \nwidth\n \n=\n \n512\n,\n \nheight\n \n=\n \n512\n)\n\n\nr\n.\nhist\n(\ntable\n[\n4\n],\n \nxlab\n \n=\n \n'x'\n,\n \nmain\n \n=\n \n'Distribution of values'\n)\n\n\ngrdevices\n.\ndev_off\n()\n\n\n\n\n\n\n\nCalculate a z-score and a p-value\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nimport\n \nrpy2.robjects\n \nas\n \nro\n\n\n\nr\n \n=\n \nro\n.\nr\n\n\ntable\n \n=\n \nr\n(\n\"read.table('RandomDistribution.tsv',sep = '\n\\t\n')\"\n)\n\n\nm\n \n=\n \nr\n.\nmean\n(\ntable\n[\n2\n],\n \ntrim\n \n=\n \n0\n,\n \nna_rm\n \n=\n \n'FALSE'\n)\n\n\nsdev\n \n=\n \nr\n.\nsd\n(\ntable\n[\n2\n],\n \nna_rm\n \n=\n \n'FALSE'\n)\n\n\nvalue\n \n=\n \n0.01844\n\n\nzscore\n \n=\n \n(\nm\n[\n0\n]\n \n-\n \nvalue\n)\n \n/\n \nsdev\n[\n0\n]\n\n\nprint\n \nzscore\n\n\n\nx\n \n=\n \nr\n.\nabs\n(\nzscore\n)\n\n\npvalue\n \n=\n \nr\n.\npnorm\n(\n-\nx\n[\n0\n])\n\n\nprint\n \npvalue\n[\n0\n]\n\n\n\n\n\n\n\nCreate an interactive plot and histogram from data in a file\n\n\n1\n2\n3\n4\n5\n6\nimport\n \nrpy2.robjects\n \nas\n \nrobjects\n\n\n\nr\n \n=\n \nrobjects\n.\nr\n\n\ntable\n \n=\n \nr\n(\n\"read.table('RandomDistribution.tsv', sep = '\n\\t\n')\"\n)\n\n\nr\n.\nplot\n(\ntable\n[\n1\n],\n \ntable\n[\n2\n],\n \nxlab\n \n=\n \n\"x\"\n,\n \nylab\n \n=\n \n\"y\"\n)\n\n\nr\n.\nhist\n(\ntable\n[\n4\n],\n \nxlab\n \n=\n \n'x'\n,\n \nmain\n \n=\n \n'Distribution of values'\n)\n\n\n\n\n\n\n\nCreate an interactive plot\n\n\n1\n2\n3\n4\nimport\n \nrpy2.robjects\n \nas\n \nro\n\n\n\nr\n \n=\n \nro\n.\nr\n\n\nr\n.\nplot\n(\nr\n.\npnorm\n(\n100\n),\n \nxlab\n \n=\n \n\"y\"\n,\n \nylab\n \n=\n \n\"y\"\n)\n\n\n\n\n\n\n\nConduct a chi-square test on data from a text file\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \nrpy2.robjects\n \nas\n \nro\n\n\n\nr\n \n=\n \nro\n.\nr\n\n\ntable\n \n=\n \nr\n(\n\"read.table('Chi-square_input.txt', header = TRUE, sep = '\n\\t\n')\"\n)\n\n\nprint\n \nr\n.\nnames\n(\ntable\n)\n\n\n\ncont_table\n \n=\n \nr\n.\ntable\n(\ntable\n[\n1\n],\n \ntable\n[\n2\n])\n\n\nchitest\n \n=\n \nr\n[\n'chisq.test'\n]\n\n\nprint\n \nchitest\n(\ntable\n[\n1\n],\n \ntable\n[\n2\n])\n\n\n\n\n\n\n\nChapter 14, Building Program Pipelines\n\u00b6\n\n\n\n\nos\n package.\n\n\nsys\n package.\n\n\n\n\nPrograms can work together with Python\n\n\n\n\nCreate path and file variables.\n\n\nCreate command line.\n\n\nExecute commands from the command line (as if you did it with a mouse and keyboard) with \nos.system\n.\n\n\n\n\nREF: Appendix D.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nimport\n \nos\n\n\n\noutput_dir\n \n=\n \n'/home/RNA-seq/tophat_dir/'\n\n\noutput_file\n \n=\n \n'accepted_hits.txt'\n\n\n\ncommand_line\n \n=\n \n'pgm -o \n%s%s\n'\n \n%\n \n(\noutput_dir\n,\n \noutput_file\n)\n\n\n\nos\n.\nsystem\n(\ncommand_line\n)\n\n\n\n\n\n\n\nCommand lines in Python\n\n\n\n\nUNIX to Python:\n\n\nUNIX \npwd\n; \nprint os.getcwd()\n.\n\n\nUNIX \nls\n; \nprint os.listdir('.')\n.\n\n\nUNIX \ncd\n; \nos.chdir('../data/')\n.\n\n\nUNIX \nmkdir\n; \nos.mkdir()\n.\n\n\nUNIX \nrmdir\n; \nos.rmdir()\n.\n\n\nand many more.\n\n\n\n\n\n\n\n\nPipelines\n\n\n\n\nPipeline are scripts connecting programs to each other (run two or more external programs from command lines).\n\n\nA program that runs another program is a \nwrapper\n.\n\n\nExchange filenames and data between programs.\n\n\nsys.argv\n; Python program sorted parameters.\n\n\nimport\n \nsys\n; access or print them.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n \nsys\n\n\nimport\n \nos\n\n\n\nsys\n.\npath\n.\nappend\n(\n'/home/RNA-seq/'\n)\n\n\n\nfrom\n \npathvariables\n \nimport\n \ntophat_dir\n,\n \nindex_dir\n\n\n\nif\n \nos\n.\npath\n.\nexists\n(\ntophat_dir\n)\n \nand\n \nos\n.\npath\n.\nexists\n(\nindex_dir\n):\n\n    \nos\n.\nsystem\n(\n'tophat -o '\n \n+\n \ntophat_dir\n \n+\n \n' '\n \n+\n \nindex_dir\n \n+\n \n'sample.txt'\n)\n\n\nelse\n:\n\n    \nprint\n \n\"You have to create tophat and/or index directories before running your wrapper\"\n\n\n\n\n\n\n\n\n\nOne problem with pipelines is lagging. \n\n\nThe system call of the second program should occur when the execution of the first program has finished, especially if the second one uses as input the output of the first one.\n\n\nUse subprocesses, such as \nos.popen()\n or \nsubprocess.call()\n, to wait for the command to complete and return a value corresponding to the program exit status (0 for success, 256 for failure)\n\n\nA more robust trick is to insert an action and verify its success after a system call and before the subsequent system call.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nimport\n \nsys\n\n\nimport\n \nos\n\n\n\nfrom\n \npathvariables\n \nimport\n \ntophat_dir\n,\n \nindex_dir\n,\n \ncufflinks_dir\n\n\n\nsys\n.\npath\n.\nappend\n(\n'/home/RNA-seq/'\n)\n\n\nfrom\n \npathvariables\n \nimport\n \ntophat_dir\n,\n \nindex_dir\n,\n \ncufflinks_dir\n\n\n\n# the tophat program crates an output file\n\n\nos\n.\nsystem\n(\n'tophat -o '\n \n+\n \ntophat_dir\n \n+\n \n' '\n \n+\n \nindex_dir\n \n+\n \n'sample.txt'\n)\n\n\n\n# here we don't know whether the tophat output file is comleted and available\n\n\n# we open and close a dummy file, so the operating system catches up\n\n\nlag_file\n \n=\n \nopen\n(\n'dummy.txt, '\nw\n')\n\n\nlag_file\n.\nwrite\n(\n'tophat completed'\n)\n\n\nlag_file\n.\nclose\n()\n\n\n\n# read the output file\n\n\nif\n \nos\n.\npath\n.\nexists\n(\n'/home/RNA-seq/dummy.txt'\n):\n\n    \nos\n.\nsystem\n(\n'cufflinks -o '\n \n+\n \ncufflinks_dir\n \n+\n \n' '\n \n+\n \ntophat_dir\n \n+\n \n'/accepted_hits.txt'\n)\n\n\n\n\n\n\n\nAttributes\n\n\n\n\nprint dir()\n; Visualize attributes.\n\n\nSome attributes are module-specific, such as locatime, whereas others refer to modules in general:\n\n\n__file__\n; return the path of the module.\n\n\n__doc__\n; return the module documentation, if present.\n\n\n__name__\n; return the name of the imported file without the .py suffix if the module is imported and the string \n'__main__'\n is executed.\n\n\nExecute \n<statements>\n only if the module is run from the command line and not imported by means of an import statement:\n\n\n\n\n\n\n\n\n\n\n\n\n1\n2\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \n<\nstatements\n>\n\n\n\n\n\n\n\nWorking with files and directories\n\n\n\n\nos.path\n package.\n\n\nos.path.split(filename)\n; split a filename from the directory names.\n\n\nos.path.exists(filename)\n; verify if the file exists, return True or False.\n\n\n\n\nExport the path\n\n\n\n\nIn Windows, add the path to the PATH environment variables.\n\n\nIn PowerShell: \n$\nenv\n:\nPYTHONPATH\n \n=\n \n\"$env:PYTHONPATH;.\"\n\n\n\n\n\n\nIn UNIX, enter in the bash: \nexport PYTHONPATH=.\n or \nadd PYTHONPATH=.\n.\n\n\nIn a Python code, add to the beginning of the script:\n\n\n\n\n1\n2\n3\nimport\n \nsys\n\n\n\nsys\n.\npath\n.\nappend\n(\n'.'\n)\n \n# '/var/www/'\n\n\n\n\n\n\n\n\n\nOr with \nsys.path.append('pathmodules/')\n.\n\n\n\n\nRead files from directories\n\n\n1\n2\n3\n4\nimport\n \nos\n\n\n\nfor\n \nfilename\n \nis\n \nos\n.\nlistdir\n(\n'data/'\n):\n\n    \nos\n.\nsystem\n(\n'<my_program>\n%s\n'\n \n%\n \n(\nfilename\n))\n\n\n\n\n\n\n\n\n\n\n\nos.remove('log.txt')\n; remove files.\n\n\n\n\n\n\ntempfile\n package;  create temporary files. \n\n\n\n\n\n\nChapter 15, Writing Good Programs\n\u00b6\n\n\nPriorities\n\n\n\n\nMake it work.\n\n\nMake it nice.\n\n\nMake if fast.\n\n\n\n\nTips\n\n\n\n\nDivide a programming project into smaller tasks.\n\n\nWhat are the inputs?\n\n\nWhat are the outputs?\n\n\nWhat is between them?\n\n\nWrite smaller programs; split a program into functions and classes.\n\n\nAnalyze and run tests.\n\n\nAdopt PEP.\n\n\nScaffold before writing a functional program:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\ndef\n \nread_files\n(\ndirectory\n):\n\n    \n'''\n\n\n    Reads a...\n\n\n    '''\n\n    \npass\n\n\n\ndef\n \nfilter\n(\nsequences\n):\n\n    \n'''\n\n\n    Removes all...\n\n\n    '''\n\n    \npass\n\n\n\n...\n\n\n\nif\n \n__name\n \n==\n \n'__main__'\n:\n\n    \nINPUT_DIR\n \n=\n \n'aaa/'\n\n    \nOUTPUT_FILE\n \n=\n \n'filtered.txt'\n\n    \nseq\n \n=\n \nread_files\n(\nINPUT_DIR\n)\n\n    \nfilter\n(\nseq\n)\n\n    \n...\n\n\n\n\n\n\n\nAdopt PEP\n\n\n\n\nVariables in functions in lowercase.\n\n\nConstants in modules in uppercase.\n\n\nA function name starts with a verb.\n\n\nAfter each function, two empty lines.\n\n\nAfter each logical chunks of long functions, one empty line.\n\n\nComment.\n\n\nKeep lines shorter than 80 characters long.\n\n\nEach class, function, and variable has a docstring; docstrings can be read with \nprint object.__doc__\n.\n\n\n\n\nEnforce PEP\n\n\n\n\npylint\n package.\n\n\npylint\n is a Python source code analyzer which looks for programming errors, helps enforcing a coding standard and sniffs for some code smells.\n\n\nDownload\n an install pylint.\n\n\nOr install it with \npip\n.\n\n\nDoc\n\n\nRun \npylint python_file.py\n.\n\n\n\n\n\n\nflake8\n package.\n\n\nflake8\n is a modular source code checker (a \nwrapper\n).\n\n\nIt works with \npep8\n, \npyflakes\n, \npycodestyle\n, and so on.\n\n\n\n\n\n\n\n\nVersion controls\n\n\n\n\nUse version control programs (Mercurial, git, SVN).\n\n\nUse repository (GitHub, Bitbucket) to control program versions.\n\n\nGitHub\n\n\nBitbucket\n\n\nSourceForce\n\n\nGitlab\n\n\nand others.\n\n\n\n\n\n\n\n\nBefore releasing (to a repository)\n\n\n\n\nCreate a directory with a concise name containing all the project.\n\n\nSet a version number (0.1 or 1.0).\n\n\nWrite a README.TXT file with the name of the program, the author, contacts, numbers, emails, a version number, the program purpose in 50-100 words, how to use the program, simple command-line examples, the license (\u201cAll rights reserved\u201d, MIT, etc.)\n\n\nCreate a zip file out of the directory including the README.TXT file in addition to the unzipped directory.\n\n\nRelease the project on a repository (for example, with git, push the project to the repository).\n\n\n\n\nReleasing a distribution\n\n\n\n\nRelease a distribution to a repository for others to download and install. \n\n\n\n\nFreezing a program\n\n\n\n\nNon-programmer would rather want an execuble program they can unzip and run.\n\n\nCompile the code or freeze it!\n\n\ncx_freeze\n is a set of utilities that create standalone executables from python scripts for any platform or OS.\n\n    i. There are alternatives to \u2018cx_freeze\u2019 such as \nbbfreeze\n.\n\n\npyinstaller\n is a simpler alternative (it is not as flexible as \ncx_freeze\n but it can create single files).\n\n\ndistutils\n is a Python package that provides support for building and installing additional modules (libraries or packages) into a Python installation. The new modules may be either 100%-pure Python, written in C, or coded in both Python and C. \ndistutils\n autogenerates an install script.\n\n    i. Such distribution needs a \nsetup.py\n file with the group of subdirectories and program files.\n\n    i. \npy2exe\n is an extension to the \ndistutils\n package to create executable files on Windows.\n\n    i. \npy2app\n is an extension to the \ndistutils\n packages to create executable files on OS X.\n\n\nnuitka\n is a Python compiler, compatible with CPython.\n\n    i. CPython is a source code interpreter with an interface with several languages, including C, in which one must explicitly write bindings in a language other than Python.\n\n\npypy\n is an alternative to \nnuitka\n.\n\n\nCython is a compiled language that generates CPython extension modules.\n\n\nJython does the same, but in Java.\n\n\n\n\n\n\n\n\nContinuous improvement\n\n\n\n\nA good program is never finished:\n\n\nCreate a baseline release.\n\n\nUpdate and release new versions. Tell the users what is new.\n\n\nListen to users, improve on it.\n\n\nGo on programming.\n\n\n\n\n\n\n\n\nSoftware development\n\n\n\n\nThe Agile Manifesto.\n\n\nMethodologies: Scrum, eXtreme Programming, etc.\n\n\n\n\nPart 4, Data Visualization\n\u00b6\n\n\nChapter 16, Creating Scientific Diagrams\n\u00b6\n\n\n\n\nmatplotlib\n package.\n\n\nPillow\n or \nPIL\n package.\n\n\nTip: install the entire SciPy Stack: (Python (2.x >= 2.6 or 3.x >= 3.2), NumPy (>= 1.6), SciPy library (>= 0.10), Matplotlib (>= 1.1) with dateutil and pytz, IPython (>= 0.13) with pyzmq and tornado, pandas (>= 0.8), Sympy (>= 0.7), nose (>= 1.1).\n\n\nMatplotlib\n depends on \nPillow\n for reading and saving JPEG, BMP, and TIFF image files. \nMatplotlib\n requires MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are required for the animation module. Add \nnose\n, \nmock\n, and Inkscape.\n\n\n\n\nDraw a simple line plot\n\n\n\n\nProvide \n(x, y)\n points.\n\n\nfigure()\n; main function is\n\n\nplot()\n.\n\n\nsavefig()\n; save the plot in a file.\n\n\nshow()\n; show the plot in a window.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nfrom\n \npylab\n \nimport\n \nfigure\n,\n \nplot\n,\n \nsavefig\n\n\n\nxdata\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n]\n\n\nydata\n \n=\n \n[\n1.25\n,\n \n2.5\n,\n \n5.0\n,\n \n10.0\n]\n\n\n\nfigure\n()\n\n\nplot\n(\nxdata\n,\n \nydata\n)\n\n\n\nsavefig\n(\n'figure1.png'\n)\n\n\n\n\n\n\n\nResult:\n\n\n\n\nPlot a sine function\n\n\n\n\nGenerate \n(x, y)\n points; first the \nx\n; then generate the \ny\n with the \nx\n.\n\n\nplot()\n with a line type \n'kd'\n and \nlinewidth = 1\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nfrom\n \npylab\n \nimport\n \nfigure\n,\n \nplot\n,\n \ntext\n,\n \naxis\n,\n \nsavefig\n\n\nimport\n \nmath\n\n\n\nfigure\n()\n\n\n\nxdata\n \n=\n \n[\n0.1\n \n*\n \ni\n \nfor\n \ni\n \nin\n \nrange\n(\n100\n)]\n\n\nydata\n \n=\n \n[\nmath\n.\nsin\n(\nj\n)\n \nfor\n \nj\n \nin\n \nxdata\n]\n\n\n\nplot\n(\nxdata\n,\n \nydata\n,\n \n'kd'\n,\n \nlinewidth\n \n=\n \n1\n)\n\n\ntext\n(\n4.8\n,\n \n0\n,\n \n\"$y = sin(x)$\"\n,\n \nhorizontalalignment\n \n=\n \n'center'\n,\n \nfontsize\n \n=\n \n20\n)\n\n\naxis\n([\n0\n,\n \n3\n \n*\n \nmath\n.\npi\n,\n \n-\n1.2\n,\n \n1.2\n])\n\n\n\nsavefig\n(\n'sinfunc.png'\n)\n\n\n\n\n\n\n\nResult:\n\n\n\n\nDraw a histogram\n\n\n\n\nProvide the \n(x, y)\n points in lists, and the number of bins.\n\n\nhist()\n needs \ndata\n points and \nn_bins\n.\n\n\nalpha\n stands for the graph color transparency.\n\n\nAdd a title, labels, axes, and gridlines.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nfrom\n \npylab\n \nimport\n \nfigure\n,\n \ntitle\n,\n \nxlabel\n,\n \nylabel\n,\n \nhist\n,\n \naxis\n,\n \ngrid\n,\n \nsavefig\n\n\n\ndata\n \n=\n \n[\n1\n,\n \n1\n,\n \n9\n,\n \n1\n,\n \n3\n,\n \n5\n,\n \n8\n,\n \n2\n,\n \n1\n,\n \n5\n,\n \n11\n,\n \n8\n,\n \n3\n,\n \n4\n,\n \n2\n,\n \n5\n]\n\n\nn_bins\n \n=\n \n5\n\n\n\nfigure\n()\n\n\nnum\n,\n \nbins\n,\n \npatches\n \n=\n \nhist\n(\ndata\n,\n \nn_bins\n,\n \nnormed\n \n=\n \n1.0\n,\n \nhisttype\n \n=\n \n'bar'\n,\n \nfacecolor\n \n=\n \n'green'\n,\n \nalpha\n \n=\n \n0.75\n)\n\n\n\ntitle\n(\n'Histogram'\n)\n\n\nxlabel\n(\n'value'\n)\n\n\nylabel\n(\n'frequency'\n)\n\n\naxis\n()\n\n\ngrid\n(\nTrue\n)\n\n\n\nsavefig\n(\n'histogram.png'\n)\n\n\n\n\n\n\n\nResult:\n\n\n\n\nDraw a bar plot\n\n\n\n\ncount\n: two series, \nx1\n and \nx2\n with each four categories, \nnucleotides\n. \n\n\nAdd a title, labels, axes and ticks to the axes, and a legend.\n\n\nxticks(x1, nucleotides)\n,  where the first element is the list of \nx\n points and the second element is the label variable.\n\n\nlegend()\n takes the labels of all data sets that are plotted.\n\n\naxis()\n is set with a list [from left to right, bottom,  and top].\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nfrom\n \npylab\n \nimport\n \nfigure\n,\n \ntitle\n,\n \nxlabel\n,\n \nylabel\n,\n \nxticks\n,\n \nbar\n,\n \nlegend\n,\n \naxis\n,\n \nsavefig\n\n\n\nnucleotides\n \n=\n \n[\n\"A\"\n,\n \n\"G\"\n,\n \n\"C\"\n,\n \n\"U\"\n]\n\n\n\ncounts\n \n=\n \n[\n\n    \n[\n606\n,\n \n1024\n,\n \n759\n,\n \n398\n],\n\n    \n[\n762\n,\n \n912\n,\n \n639\n,\n \n591\n],\n\n    \n]\n\n\n\nfigure\n()\n\n\ntitle\n(\n'RNA nucleotides in the ribosome'\n)\n\n\nxlabel\n(\n'RNA'\n)\n\n\nylabel\n(\n'base count'\n)\n\n\n\nx1\n \n=\n \n[\n2.0\n,\n \n4.0\n,\n \n6.0\n,\n \n8.0\n]\n\n\nx2\n \n=\n \n[\nx\n \n-\n \n0.5\n \nfor\n \nx\n \nin\n \nx1\n]\n\n\n\nxticks\n(\nx1\n,\n \nnucleotides\n)\n\n\n\nbar\n(\nx1\n,\n \ncounts\n[\n1\n],\n \nwidth\n \n=\n \n0.5\n,\n \ncolor\n \n=\n \n\"#cccccc\"\n,\n \nlabel\n \n=\n \n\"E.coli 23S\"\n)\n\n\nbar\n(\nx2\n,\n \ncounts\n[\n0\n],\n \nwidth\n \n=\n \n0.5\n,\n \ncolor\n \n=\n \n\"#808080\"\n,\n \nlabel\n \n=\n \n\"T.thermophilus 23S\"\n)\n\n\n\nlegend\n()\n\n\naxis\n([\n1.0\n,\n \n9.0\n,\n \n0\n,\n \n1200\n])\n\n\n\nsavefig\n(\n'barplot.png'\n)\n\n\n\n\n\n\n\nResult:\n\n\n\n\nAdd error bars to a scatterplot or a bar chart\n\n\n\n\nerrorbar()\n.\n\n\nbar()\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nfrom\n \npylab\n \nimport\n \nfigure\n,\n \nerrorbar\n,\n \nbar\n,\n \nsavefig\n\n\n\nfigure\n()\n\n\n\n# scatterplot with error bars\n\n\nx1\n \n=\n \n[\n0.1\n,\n \n0.3\n,\n \n0.5\n,\n \n0.6\n,\n \n0.7\n]\n\n\ny1\n \n=\n \n[\n1\n,\n \n5\n,\n \n5\n,\n \n10\n,\n \n20\n]\n\n\nerr1\n \n=\n \n[\n3\n,\n \n3\n,\n \n3\n,\n \n10\n,\n \n12\n]\n\n\nerrorbar\n(\nx1\n,\n \ny1\n,\n \nerr1\n \n,\n \nfmt\n \n=\n \n'ro'\n)\n\n\n\n# barplot with error bars\n\n\nx2\n \n=\n \n[\n1.1\n,\n \n1.2\n,\n \n1.3\n,\n \n1.4\n,\n \n1.5\n]\n\n\ny2\n \n=\n \n[\n10\n,\n \n15\n,\n \n10\n,\n \n15\n,\n \n17\n]\n\n\nerr2\n \n=\n \n(\n2\n,\n \n3\n,\n \n4\n,\n \n1\n,\n \n2\n)\n\n\nwidth\n \n=\n \n0.05\n\n\nbar\n(\nx2\n,\n \ny2\n,\n \nwidth\n,\n \ncolor\n \n=\n \n'r'\n,\n \nyerr\n \n=\n \nerr2\n,\n \necolor\n \n=\n \n\"black\"\n)\n\n\n\nsavefig\n(\n'errorbars.png'\n)\n\n\n\n\n\n\n\nResult:\n\n\n\n\nDraw a pie chart with protruding slices\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nfrom\n \npylab\n \nimport\n \nfigure\n,\n \ntitle\n,\n \npie\n,\n \nsavefig\n\n\n\nnucleotides\n \n=\n \n'G'\n,\n \n'C'\n,\n \n'A'\n,\n \n'U'\n\n\ncount\n \n=\n \n[\n1024\n,\n \n759\n,\n \n606\n,\n \n398\n]\n\n\nexplode\n \n=\n \n[\n0.0\n,\n \n0.0\n,\n \n0.05\n,\n \n0.05\n]\n\n\n\ncolors\n \n=\n \n[\n\"#f0f0f0\"\n,\n \n\"#dddddd\"\n,\n \n\"#bbbbbb\"\n,\n \n\"#999999\"\n]\n\n\n\ndef\n \nget_percent\n(\nvalue\n):\n\n    \n'''Formats float values in pie slices to percent.'''\n\n    \nreturn\n \n\"\n%4.1f%%\n\"\n \n%\n \n(\nvalue\n)\n\n\n\nfigure\n(\n1\n)\n\n\ntitle\n(\n'nucleotides in 23S RNA from T.thermophilus'\n)\n\n\n\npie\n(\ncount\n,\n \nexplode\n \n=\n \nexplode\n,\n \nlabels\n \n=\n \nnucleotides\n,\n \nshadow\n \n=\n \nTrue\n,\n\n    \ncolors\n \n=\n \ncolors\n,\n \nautopct\n \n=\n \nget_percent\n)\n\n\n\nsavefig\n(\n'piechart.png'\n,\n \ndpi\n \n=\n \n150\n)\n\n\n\n\n\n\n\nResult:\n\n\n\n\n\n\nIt is possible to use math symbols, subscripts, and superscripts in the strings:\n\n\nxlabel('protein concentration [mM]')\n.\n\n\nxlabel('protein concentration [$\\muM$]')\n.\n\n\n\n\n\n\nIt is possible to use placeholder for variables such as:\n\n\n\"4.1f%%\" % (variable)\n.\n\n\n\"2i%\" % (variable)\n.\n\n\netc. \n\n\nThe \n%%\n stands for percentage.\n\n\n\n\n\n\nChange the image file resolution (dpi = 100 or 150 or 300 or 600) as in \nsavefig('chart.png', dpi=150)\n.\n\n\nColors are based on the PIL library.\n\n\nPIL has 140 colors (X11 color names) such as:\n\n\n'red'\n, \n'lightred'\n, \n'magenta'\n, etc.\n\n\nin RGB, red is \n(255, 0, 0)\n.\n\n\nwhite is \n(255, 255, 255)\n or \n'#ffffff'\n.\n\n\n\u2018black\u2019 is \n(0, 0, 0)\n or \n'#000000'\n.\n\n\netc.\n\n\n\n\n\n\nThe \nX11 color names\n.\n\n\n\n\nChapter 18, Manipulating Images\n\u00b6\n\n\n\n\nPillow\n or \nPIL\n package.\n\n\n\n\nPaste a small image into a big one\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom\n \nPIL\n \nimport\n \nImage\n\n\n\nimage\n \n=\n \nImage\n.\nopen\n(\n'color.png'\n,\n \n'r'\n)\n\n\nlabel\n \n=\n \nImage\n.\nopen\n(\n'label.png'\n,\n \n'r'\n)\n \n# small legend\n\n\nimage\n.\npaste\n(\nlabel\n,\n \n(\n40\n,\n \n460\n))\n\n\n\nimage\n.\nsave\n(\n'combined.png'\n)\n\n\n\n\n\n\n\nResult:\n\n\n\n\nResizes a big image to a small one\n\n\n1\n2\n3\n4\n5\n6\nfrom\n \nPIL\n \nimport\n \nImage\n\n\n\nimage\n \n=\n \nImage\n.\nopen\n(\n'big.png'\n)\n\n\nsmall\n \n=\n \nimage\n.\nresize\n((\n100\n,\n \n100\n))\n\n\n\nsmall\n.\nsave\n(\n'small.png'\n)\n\n\n\n\n\n\n\nResult:\n\n\n\n\nConverts a color to a black/white image\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom\n \nPIL\n \nimport\n \nImage\n\n\n\nimage\n \n=\n \nImage\n.\nopen\n(\n'color.png'\n,\n \n'r'\n)\n\n\nbw_image\n \n=\n \nImage\n.\nnew\n(\n'LA'\n,\n \nimage\n.\nsize\n,\n \n(\n255\n,\n \n255\n))\n\n\nbw_image\n.\npaste\n(\nimage\n,\n \n(\n0\n,\n \n0\n))\n\n\n\nbw_image\n.\nsave\n(\n'black_white.png'\n)\n\n\n\n\n\n\n\nResult:\n\n\n\n\nDiminishes the size of all .png files by half\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nfrom\n \nPIL\n \nimport\n \nImage\n\n\nimport\n \nos\n\n\n\nfor\n \nfilename\n \nin\n \nos\n.\nlistdir\n(\n'.'\n):\n\n    \nif\n \nfilename\n.\nendswith\n(\n'.png'\n):\n\n        \nim\n \n=\n \nImage\n.\nopen\n(\nfilename\n)\n\n        \nx\n \n=\n \nim\n.\nsize\n[\n0\n]\n \n/\n \n2\n\n        \ny\n \n=\n \nim\n.\nsize\n[\n1\n]\n \n/\n \n2\n\n        \nsmall\n \n=\n \nim\n.\nresize\n((\nx\n,\n \ny\n))\n\n        \nsmall\n.\nsave\n(\n'small_'\n+\nfilename\n)\n\n\n\n\n\n\n\nFor \nos.listdir('.')\n, consult \nChapter 14, Building Program Pipelines, Command lines in Python\n.\n\n\nDraw an image of a plasmid\n\n\n\n\nUse constant variable: \nPLASMID_LENGTH = 4361\n is the total number of base pairs in the entire plastmid, \nSIZE = (500, 500)\n is the size of the entire image, \nCENTER = (250, 250)\n is the center point of the plasmid circle, the center of the image.\n\n\nCreate an image: \npBR322 = Image.new('RGB', SIZE, 'white')\n. \n'RGB'\n color scheme, \nSIZE = (x, y)\n size in pixels, \n'white'\n set the background color.\n\n\nDraw object \npBR322\n: \nDRAW = ImageDraw.Draw(pBR322)\n.\n\n\nThe image object is now in object \nDRAW\n.\n\n\nFinally, save the object: \npBR322.save('plasmid_pBR322.png')\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\nfrom\n \nPIL\n \nimport\n \nImage\n,\n \nImageDraw\n\n\nimport\n \nmath\n\n\n\nPLASMID_LENGTH\n \n=\n \n4361\n\n\nSIZE\n \n=\n \n(\n500\n,\n \n500\n)\n\n\nCENTER\n \n=\n \n(\n250\n,\n \n250\n)\n\n\n\npBR322\n \n=\n \nImage\n.\nnew\n(\n'RGB'\n,\n \nSIZE\n,\n \n'white'\n)\n\n\nDRAW\n \n=\n \nImageDraw\n.\nDraw\n(\npBR322\n)\n\n\n\ndef\n \nget_angle\n(\nbp\n,\n \nlength\n=\nPLASMID_LENGTH\n):\n\n    \n\"\"\"Converts base position into an angle.\"\"\"\n\n    \nreturn\n \nbp\n \n*\n \n360\n \n/\n \nlength\n\n\n\ndef\n \ncoord\n(\nangle\n,\n \ncenter\n,\n \nradius\n):\n\n    \n\"\"\"Return (x, y) coordinates of a point in a circle.\"\"\"\n\n    \nrad\n \n=\n \nmath\n.\nradians\n(\n90\n \n-\n \nangle\n)\n\n    \nx\n \n=\n \nint\n(\ncenter\n[\n0\n]\n \n+\n \nmath\n.\nsin\n(\nrad\n)\n \n*\n \nradius\n)\n\n    \ny\n \n=\n \nint\n(\ncenter\n[\n1\n]\n \n+\n \nmath\n.\ncos\n(\nrad\n)\n \n*\n \nradius\n)\n\n    \nreturn\n \nx\n,\n \ny\n\n\n\ndef\n \ndraw_arrow_tip\n(\nstart\n,\n \ndirection\n,\n \ncolor\n):\n\n    \n\"\"\"Draws a triangle at the given start angle.\"\"\"\n\n    \np1\n \n=\n \ncoord\n(\nstart\n \n+\n \ndirection\n,\n \nCENTER\n,\n \n185\n)\n\n    \np2\n \n=\n \ncoord\n(\nstart\n,\n \nCENTER\n,\n \n160\n)\n\n    \np3\n \n=\n \ncoord\n(\nstart\n,\n \nCENTER\n,\n \n210\n)\n\n    \nDRAW\n.\npolygon\n((\np1\n,\n \np2\n,\n \np3\n),\n \nfill\n \n=\n \ncolor\n)\n\n\n\n\nTET_START\n,\n \nTET_END\n \n=\n \nget_angle\n(\n88\n),\n \nget_angle\n(\n1276\n)\n\n\nAMP_START\n,\n \nAMP_END\n \n=\n \nget_angle\n(\n3293\n),\n \nget_angle\n(\n4153\n)\n\n\nORI_START\n,\n \nORI_END\n \n=\n \nget_angle\n(\n2519\n),\n \nget_angle\n(\n3133\n)\n\n\n\n# drawing the plasmid\n\n\nBOX\n \n=\n \n(\n50\n,\n \n50\n,\n \n450\n,\n \n450\n)\n\n\nDRAW\n.\npieslice\n(\nBOX\n,\n \n0\n,\n \n360\n,\n \nfill\n \n=\n \n'gray'\n)\n\n\nDRAW\n.\npieslice\n(\nBOX\n,\n \nTET_START\n,\n \nTET_END\n,\n \nfill\n \n=\n \n'blue'\n)\n\n\nDRAW\n.\npieslice\n(\nBOX\n,\n \nAMP_START\n,\n \nAMP_END\n,\n \nfill\n \n=\n \n'orange'\n)\n\n\nDRAW\n.\npieslice\n(\nBOX\n,\n \nORI_START\n,\n \nORI_END\n,\n \nfill\n \n=\n \n'darkmagenta'\n)\n\n\nDRAW\n.\npieslice\n((\n80\n,\n \n80\n,\n \n420\n,\n \n420\n),\n \n0\n,\n \n360\n,\n \nfill\n \n=\n \n'white'\n)\n\n\n\ndraw_arrow_tip\n(\nTET_END\n,\n \n10\n,\n \n'blue'\n)\n\n\ndraw_arrow_tip\n(\nAMP_START\n,\n \n-\n10\n,\n \n'orange'\n)\n\n\ndraw_arrow_tip\n(\nORI_START\n,\n \n-\n10\n,\n \n'darkmagenta'\n)\n\n\n\npBR322\n.\nsave\n(\n'plasmid_pBR322.png'\n)\n\n\n\n\n\n\n\nResult:\n\n\n\n\nDrawings\n\n\n\n\nImage extensions:\n\n\nBMP; simple table of pixels.\n\n\nPNG; preserves the color of every single pixel; can be partially transparent.\n\n\nGIF; can be animated; similar to PNG.\n\n\nJPG; compressed format, blurred.\n\n\nTIF; bigger and more precise than PNG.\n\n\n\n\n\n\nimage = Image.open('color.png', 'r')\n; read the object.\n\n\nWrite points:\n\n\npoint = (100, 100)\n; with tuples (x, y); x pixels from the left border, y pixels from the top of the image.\n\n\n\n\n\n\nWrite rectangles\n\n\nBOX = (100, 100, 150, 150)\n; with tuple (x, y, x\u2019, y\u2019); \nBOX\n becomes a constant.\n\n\nDRAW.rectangle(BOX, fill = 'lightblue', outline = 'black')\n\n\n\n\n\n\nDraw circles inside \u2018guidelines\u2019 or a rectangle:\n\n\nDRAW.pieslice((50, 50, 450, 450), 0, 360, fill = 'grey')\n.\n\n\nDRAW.pieslice((50, 50, 450, 450), 0, 360, fill = (0, 0, 0))\n.\n\n\nDRAW.pieslice((50, 50, 450, 450), 0, 360, fill = '#ffffff')\n.\n\n\nBOX = (50, 50, 450, 450)\n\n\nDRAW.pieslice(BOX, 0, 360, fill = 'grey', outline = 'black')\n\n\nDRAW.pieslice(BOX, 7, 106, fill = 'blue')\n\n\n\n\n\n\n\n\n\n\nDraw an arc:\n\n\nDRAW.arc(BOX, 0, 360, fill = 'black')\n\n\n\n\n\n\nDraw a polygon:\n\n\nDRAW.polygon((point1, point2, point3) fill = 'lightblue', outline = 'blue')\n\n\n\n\n\n\nDraw a line:\n\n\nECOR1 = angle(4359)\n\n\np1 = coord(ECOR1, CENTER, 160)\n\n\np1 = coord(ECOR1, CENTER, 210)\n\n\nDRAW.line((p1, p2), fill = 'black', width = 3)\n\n\n\n\n\n\nRotate the image:\n\n\npBR322 = pBR322.rotate(45)\n\n\n\n\n\n\nAdd text:\n\n\nDRAW.text((370, 240), \"EcoR1\", fill = \"black\")\n\n\n\n\n\n\n\n\nDraw an image of a plasmid and label it\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\nfrom\n \nPIL\n \nimport\n \nImage\n,\n \nImageDraw\n\n\nimport\n \nmath\n\n\n\nPLASMID_LENGTH\n \n=\n \n4361\n\n\nSIZE\n \n=\n \n(\n500\n,\n \n500\n)\n\n\nCENTER\n \n=\n \n(\n250\n,\n \n250\n)\n\n\n\npBR322\n \n=\n \nImage\n.\nnew\n(\n'RGB'\n,\n \nSIZE\n,\n \n'white'\n)\n\n\nDRAW\n \n=\n \nImageDraw\n.\nDraw\n(\npBR322\n)\n\n\n\ndef\n \nget_angle\n(\nbp\n,\n \nlength\n=\nPLASMID_LENGTH\n):\n\n    \n\"\"\"Converts base position into an angle.\"\"\"\n\n    \nreturn\n \nbp\n \n*\n \n360\n \n/\n \nlength\n\n\n\ndef\n \ncoord\n(\nangle\n,\n \ncenter\n,\n \nradius\n):\n\n    \n\"\"\"Return (x, y) coordinates of a point in a circle.\"\"\"\n\n    \nrad\n \n=\n \nmath\n.\nradians\n(\n90\n \n-\n \nangle\n)\n\n    \nx\n \n=\n \nint\n(\ncenter\n[\n0\n]\n \n+\n \nmath\n.\nsin\n(\nrad\n)\n \n*\n \nradius\n)\n\n    \ny\n \n=\n \nint\n(\ncenter\n[\n1\n]\n \n+\n \nmath\n.\ncos\n(\nrad\n)\n \n*\n \nradius\n)\n\n    \nreturn\n \nx\n,\n \ny\n\n\n\ndef\n \ndraw_arrow_tip\n(\nstart\n,\n \ndirection\n,\n \ncolor\n):\n\n    \n\"\"\"Draws a triangle at the given start angle.\"\"\"\n\n    \np1\n \n=\n \ncoord\n(\nstart\n \n+\n \ndirection\n,\n \nCENTER\n,\n \n185\n)\n\n    \np2\n \n=\n \ncoord\n(\nstart\n,\n \nCENTER\n,\n \n160\n)\n\n    \np3\n \n=\n \ncoord\n(\nstart\n,\n \nCENTER\n,\n \n210\n)\n\n    \nDRAW\n.\npolygon\n((\np1\n,\n \np2\n,\n \np3\n),\n \nfill\n \n=\n \ncolor\n)\n\n\n\n\nTET_START\n,\n \nTET_END\n \n=\n \nget_angle\n(\n88\n),\n \nget_angle\n(\n1276\n)\n\n\nAMP_START\n,\n \nAMP_END\n \n=\n \nget_angle\n(\n3293\n),\n \nget_angle\n(\n4153\n)\n\n\nORI_START\n,\n \nORI_END\n \n=\n \nget_angle\n(\n2519\n),\n \nget_angle\n(\n3133\n)\n\n\n\n# drawing the plasmid\n\n\nBOX\n \n=\n \n(\n50\n,\n \n50\n,\n \n450\n,\n \n450\n)\n\n\nDRAW\n.\npieslice\n(\nBOX\n,\n \n0\n,\n \n360\n,\n \nfill\n \n=\n \n'gray'\n)\n\n\nDRAW\n.\npieslice\n(\nBOX\n,\n \nTET_START\n,\n \nTET_END\n,\n \nfill\n \n=\n \n'blue'\n)\n\n\nDRAW\n.\npieslice\n(\nBOX\n,\n \nAMP_START\n,\n \nAMP_END\n,\n \nfill\n \n=\n \n'orange'\n)\n\n\nDRAW\n.\npieslice\n(\nBOX\n,\n \nORI_START\n,\n \nORI_END\n,\n \nfill\n \n=\n \n'darkmagenta'\n)\n\n\nDRAW\n.\npieslice\n((\n80\n,\n \n80\n,\n \n420\n,\n \n420\n),\n \n0\n,\n \n360\n,\n \nfill\n \n=\n \n'white'\n)\n\n\n\ndraw_arrow_tip\n(\nTET_END\n,\n \n10\n,\n \n'blue'\n)\n\n\ndraw_arrow_tip\n(\nAMP_START\n,\n \n-\n10\n,\n \n'orange'\n)\n\n\ndraw_arrow_tip\n(\nORI_START\n,\n \n-\n10\n,\n \n'darkmagenta'\n)\n\n\n\nDRAW\n.\ntext\n((\n150\n,\n \n130\n),\n \n\"ori\"\n,\n \nfill\n \n=\n \n(\n0\n,\n \n0\n,\n \n0\n))\n\n\nDRAW\n.\ntext\n((\n340\n,\n \n130\n),\n \n\"amp\"\n,\n \nfill\n \n=\n(\n0\n,\n \n0\n,\n \n0\n))\n\n\nDRAW\n.\ntext\n((\n300\n,\n \n380\n),\n \n\"tet\"\n,\n \nfill\n \n=\n \n(\n0\n,\n \n0\n,\n \n0\n))\n\n\n\npBR322\n.\nsave\n(\n'plasmid_pBR322.png'\n)\n\n\n\n\n\n\n\nResult:\n\n\n\n\nPart 6, Cookbook\n\u00b6\n\n\nRecipe 2, Reversing and Randomizing a Sequence\n\u00b6\n\n\nsort, reverse, random, probability, list, loop\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\nseq\n \n=\n \n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n\nprint\n(\nseq\n)\n\n\n\nseq_list\n \n=\n \nlist\n(\nseq\n)\n\n\nseq_list\n.\nreverse\n()\n\n\nrev_seq\n \n=\n \n''\n.\njoin\n(\nseq_list\n)\n\n\nprint\n(\nrev_seq\n)\n\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\n# reverse a sequence, using a loop\n\n\n# rev_seq = ''\n\n\nrev_seq\n \n=\n \n''\n\n\nfor\n \ns\n \nin\n \nreversed\n(\nseq\n):\n\n    \nrev_seq\n \n=\n \nrev_seq\n \n+\n \ns\n\n\nprint\n(\nrev_seq\n)\n\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\n# reverse a sequence, using seq[start:end:step]\n\n\nrev_seq\n \n=\n \nseq\n[:\n-\n1\n]\n\n\nprint\n(\nrev_seq\n)\n\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\n# mixing a sequence\n\n\nimport\n \nrandom\n\n\n\nran_seq\n \n=\n \nrandom\n.\nsample\n(\nseq\n,\n \nlen\n(\nseq\n))\n\n\nprint\n(\nran_seq\n)\n\n\nran_seq\n \n=\n \n''\n.\njoin\n(\nrandom\n.\nsample\n(\nseq\n,\n \nlen\n(\nseq\n)))\n\n\nprint\n(\nran_seq\n)\n\n\nran_seq\n \n=\n \n''\n.\njoin\n(\nrandom\n.\nsample\n(\nseq\n,\n \nlen\n(\nseq\n)\n-\n10\n))\n\n\nprint\n(\nran_seq\n)\n\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\n# mixing a sequence (using random again)\n\n\nran_seq\n \n=\n \n''\n.\njoin\n([\nrandom\n.\nchoice\n(\nseq\n)\n \\\n \nfor\n \nx\n \nin\n \nrange\n(\nlen\n(\nseq\n))])\n\n\nprint\n(\nran_seq\n)\n\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\n# shuffle a sequence (using random again)\n\n\ndata\n \n=\n \nlist\n(\nseq\n)\n\n\nrandom\n.\nshuffle\n(\ndata\n)\n\n\nshuffled_seq\n \n=\n \ndata\n\n\nprint\n(\nshuffled_seq\n)\n\n\n\nshuffled_seq\n \n=\n \n''\n.\njoin\n(\ndata\n)\n\n\nprint\n(\nshuffled_seq\n)\n\n\n\n\n\n\n\nOuput:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nABCDEFGHIJKLMNOPQRSTUVWXY\n=========================\n['F', 'J', 'I', 'L', 'O', 'R', 'U', 'C', 'A', 'V', 'Q', 'M', 'T', 'N', 'B', 'G', 'W', 'P', 'Y', 'H', 'D', 'S', 'Z', 'E', 'X', 'K']\nLKAZHTVFGQROUXIMYWESDPCBJN\nLXRDUVFHKGJZMIAB\n=========================\nRYYEYKWUGMYFYMUWWBOSZWSRMJ\n=========================\n['R', 'N', 'S', 'E', 'M', 'H', 'A', 'P', 'X', 'F', 'W', 'K', 'J', 'I', 'Y', 'T', 'Z', 'G', 'V', 'O', 'C', 'B', 'Q', 'D', 'L', 'U']\nRNSEMHAPXFWKJIYTZGVOCBQDLU\n\n\n\n\n\n\nRecipe 3, Creating a Random Sequence with Probabilities\n\u00b6\n\n\nrandom, list, generate, probability\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nimport\n \nrandom\n\n\n\nnucleotides\n \n=\n \nlist\n(\n'ACGT'\n)\n\n\ndna\n \n=\n \n''\n\n\nwhile\n \nlen\n(\ndna\n)\n \n<\n \n100\n:\n\n    \ndna\n \n+=\n \nrandom\n.\nchoice\n(\nnucleotides\n)\n \n# choose amoung the list, fetch 1 item\n\n\nprint\n(\ndna\n)\n\n\n\nprint\n(\n\"=\"\n \n*\n \n25\n)\n\n\n\nnucleotides\n \n=\n \nlist\n(\n'ACGT'\n)\n\n\nprobs\n \n=\n \n{\n'A'\n:\n \n0.3\n,\n \n'C'\n:\n \n0.2\n,\n \n'G'\n:\n \n0.2\n,\n \n'T'\n:\n \n0.3\n}\n \n# sum of 1.0\n\n\nassert\n \nsum\n(\nprobs\n.\nvalues\n())\n \n==\n \n1.0\n\n\n# or\n\n\n# if sum(probs.values()) != 1.0:\n\n\n#   raise Exception('Sum of probabilites is not 1.0!')\n\n\n\ndna\n \n=\n \n''\n\n\nwhile\n \nlen\n(\ndna\n)\n \n<\n \n100\n:\n\n    \nnuc\n \n=\n \nrandom\n.\nchoi",
            "title": "Managing Your Biological Data with Python"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-1-the-python-shell-and-basics",
            "text": "Data structure   Booleans:  True  or  False .  Dictionaries: unordered collections of key-value pairs; both can be numbers or strings; indicated with  {key1: value1, 'key2': 'value2'} .  Floats: numbers with digits after the dicemal point,  Integers: numbers without digits after the decimal point.  Lists: mutable ordered collections of objects; indicated with  [a, b, c] .  Sets: immutable unordered collections of unique elements; indicated by  ([a, b, c]) .  Strings: immutable ordered collections of characters; indicated with  'single'  or  \"double\"  quotation marks.  Tuples: immutable ordered collections of objects; indicated with  (a, b, c) .   Conversions  Convert or coerce data: \n-  float(value) ; into a float. \n-  int(value) ; into an integer. \n-  str(value) ; into a string.  Strings  'Single'  and  \"double\"  quotes are for short strings.  \u2019\u2018\u2019Triple single and double quotes \nare rather multilines.\u2019\u2018\u2019  Access character and substrings   print s[-1] ; print the last character of a string.  print s[-5:] ; print from the 5 th  position from the end to the end.   String functions   len(s) ; length of the string,  s.upper() ; convert to uppercase.  s.lower() ; convert to lowercase.  s.strip() ; remove white spaces and tabs from both ends.  s.strio('m') ; remove  'm'  from both ends.  s.rstrip() ; remove on the right only.  s.lstrip('m') ; remove on the left only.  s.split(' ') ; cut into words where there is space.  s.find('m') ; search for the  'm'  substring and return the starting position.  s.replace('m', 'n') ; replace  'm'  with  'n' .  s.startwith('m') ; check beginning and return  True  or  False .  s.endwith('m') ; check end and return  True  or  False .   Create lists   data = [1, 2, 3, 4, 5] .  data[1:3] ;  [2, 3] .  data[0:2] ;  [1, 2] .  data[:3] ;  [1, 2, 3] .  data[-2:] ;  [4, 5] .  data2 = data[:] ; create a copy.   Modify lists   l[i] = x ; replace the i th  element with  x .  l[i;j] = t ; replace elements from  i  to  j  by  t  (iterable).  del l[i;j] ; delete the elements of the list from  i  to  j .  del s[i;k;k] ; delete the elements of the list from  i  to  j  with stop  k .  l.append(x) ; add element  x  to the list.  l.extend(x) ; add several element  x  to the list (iterable).  l.count(x) ; return the number of elements  x  in the list.  l.index(x[. i[. j]]) ; return the smaller  k  such that  l[k] = x  and  i <= k <= j .  l.insert(i.x) ; insert(wedge in)  x .  l.pop(i) ; cancel the ith element and return its value;  l.pop()  does it for the last element.  l.remove(x) ; delete a choosen  x  element.  l.reverse() ; reverse the list order.  l.sort() ; sort the list.  l.sort([cmp[. key[. reverse]]]) ; sort the list;  cmp  is a customized function for the comparison of element pairs that must return a negative value, zero, or a positive value depending on if the first element of the pair is lower than. equal to. or greater than the second element.  sorted(l) ; create a new list made of a simple ascending sort of the list without modifying the list.   Functions working of lists   len(data) ; length of the list.  min(data) ; smallest.  max(data) ; largest.  sum(data) ; sum.  range(4) ; create a list of number from 0 to 3.  range(1.5) ; create a list of number from 1 to 4.  range(2.9.2) ; create  [2, 4, 6, 8] .  range(5, 0, -1) ; create  [5, 4, 3, 2, 1]   Tuples   t = 1, 2, 3  or  t = (1, 2, 3)  t = 1  or  tuple = (1,)   Accessing data in dictionaries   prices['banana'] ; return the value of the key.  prices.get('banaba') ; do the same thing, but if the key does not exit, it returns  None .  prices.has_key('apple') ; check whether the key(s) is(are) defined.  prices.keys() ; return a list of all keys.  prices.values() ; return a list of all values.  prices.items() ; return all keys and values as a list of tuples.   Modifying dictionaries   prices['kiwi'] = 0.6 ; set the value of the key.  prices.setdefault('egg', 0.9) ; set the value of the key if it is not yet defined.   None  None indicate the object or part of it is empty. For example: \n-  a = None . \n-  b = [None, None, 'green'] .",
            "title": "Chapter 1, The Python Shell and Basics"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-2-your-first-python-program",
            "text": "Difference between functions and methods  Functions are generic; use them anywhere without constraints. For example,  len()  works on all data.  1\n2\n3\n4 >>>   len ( 'protein' )  7  >>>   len ( '111' )  3    Other funtions, called methods, are specific; use them on a certain type of data. For example,  count()  works only for strings or a \u2018string\u2019 variable (below,  protein  is a string).  1\n2\n3\n4 >>>   'protein' . count ( 'r' )  1  >>>   'occurence' . count ( 'c' )  3    Count the occurrence of each amino acid in a protein sequence  count, element, in, string  1\n2\n3\n4\n5 insulin   =   \"GIVEQCCTSICSLYQLENYCNFVNQHLCGSHLVEALYLVCGERGFFYTPKT\"  for   amino_acid   in   \"ACDEFGHIKLMNPQRSTVWY\" : \n     number   =   insulin . count ( amino_acid ) \n     print   amino_acid ,   number    Create a random DNA sequence of length 10  1\n2\n3\n4\n5\n6\n7\n8\n9 import   random  alphabet   =   \"AGCT\"  sequence   =   \"\"  for   i   in   range ( 10 ): \n     index   =   random . randint ( 0 ,   3 ) \n     sequence   =   sequence   +   alphabet [ index ]  print   sequence",
            "title": "Chapter 2, Your First Python Program"
        },
        {
            "location": "/Managing Your Biological Data with Python/#part-2-data-management",
            "text": "",
            "title": "Part 2, Data management"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-3-analyzing-a-data-column",
            "text": "Read from a text file   readlines() .   1\n2\n3\n4\n5\n6\n7\n8 text_file   =   open ( 'neuron_data.txt' ,   'r' )  # 'r' is facultative  lines   =   text_file . readlines ()  text_file . close ()  print   lines     read() .    1\n2\n3\n4\n5\n6 text_file   =   open ( 'neuron_data.txt' )  # 'r' is facultative  print   text_file . read ()  text_file . close ()    Difference between  read()  and  readlines()   read(x) ; read up to x bytes in a file. If you don\u2019t supply the size, it reads the entire file. The output is displayed as strings only once.  One character = 1 byte.  Close and reopen the file to read it again.  readlines(x) ; read up to x bytes. If you don\u2019t supply a size, it reads all the data until it reaches a newline ( \\n ) or the end of a paragraph.  Close and reopen the file to read it again.   Write a text file  1\n2\n3\n4\n5\n6 output_file   =   open ( 'counts.txt' ,   'w' )  # 'w' is mandatory  output_file . write ( 'number of neuron lengths: 7 \\n ' )  output_file . close ()    Clean a text file  strip   strip() ; removes blanks spaces.  rstrip() ; right only.  lstrip() ; left only.   1\n2\n3\n4\n5\n6\n7\n8\n9 output_file   =   open ( 'counts.txt' )  output_file . read ()  output_file . close ()  # vs  output_file   =   open ( 'counts.txt' )  output_file . read () . strip ()  output_file . close ()    Write and then read the same file   'r' ; cannot write with, only reads.  'w' ; cannot read with, only writes (an existing file with the same name will be erased).  'a'  append; data added to the end.   'r+' ; both read and write (by replacing the existing string at the beginning by the new string).    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 file1   =   open ( 'count.txt' , 'w' )  file1 . write ( 'this is just a dummy test \\n ' )  file1 . close ()  file2   =   open ( 'count.txt' ,   'r' )  print   file2 . read ()  file2 . close ()  file3   =   open ( 'count.txt' , 'a' )  file3 . write ( 'this is another test \\n ' )  file3 . close ()  file4   =   open ( 'count.txt' ,   'r' )  print   file4 . read ()  file4 . close ()  file5   =   open ( 'count.txt' ,   'w' )  file5 . write ( 'this is a final test \\n ' )  file5 . close ()  file6   =   open ( 'count.txt' ,   'r' )  print   file6 . read ()  file6 . close ()    Read a series of numbers from a text file and print a summary of the data  strip, append, length, minimum, maximum, sort, format, integer, float   strip() ; remove blank spaces.  A text is string by default even thought the file contains numbers; transform the text into float.  append() ; each line to a list.  len(data) .  sum(data) .  min(data) .  max(data) .  sort() .  %4i  is an integer with 4 digits.  %6.1f  is a float with 6 digits and 2 decimals.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 data   =   []  for   line   in   open ( 'neuron_data.txt' ): \n     length   =   float ( line . strip ()) \n     data . append ( length )  n_items   =   len ( data )  total   =   sum ( data )  shortest   =   min ( data )  longest   =   max ( data )  data . sort ()  output   =   open ( \"results.txt\" , \"w\" )  output . write ( \"number of dendritic lengths :  %4i   \\n \" % ( n_items ))  output . write ( \"total dendritic length      :  %6.1f   \\n \" % ( total ))  output . write ( \"shortest dendritic length   :  %7.2f   \\n \" % ( shortest ))  output . write ( \"longest dendritic length    :  %7.2f   \\n \" % ( longest ))  output . write ( \" %37.2f \\n %37.2f \" % ( data [ - 2 ],   data [ - 3 ]))  output . close ()    Format the data  formatting, variable   %s ; a string.  %d ; a digit.  %r ; raw data.  %10s ; left-justify by 10 bytes.  %-10s ; right-justify. by bytes  %i ; an integer.  %f ; a float.  %2f ; a float with 2 digits.  %2.2f ; has 2 digits and 2 decimals.  %2i ; has 2 digits.  And so on.  str() ; turn a variable into a string (digit  3  to string  '3'  for example).  int() ; turn a variable into an integer (string  '3'  to digit  3  for example).  float() ; turn a variable into a float (digit  3  to  3.0  for example).    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 file1   =   open ( 'count.txt' , 'w' )  file1 . write ( 'this is just a dummy test' )  file1 . close ()  file2   =   open ( 'count.txt' ,   'r' )  variable   =   file2 . read ()  print   \"Test1:  %r \"   %   ( variable )  print   \"Test2:  %s \"   %   ( variable )  print   \"Test3:  %30s \"   %   ( variable )  print   \"Test4:  %-30s \"   %   ( variable )  print   \"Test5:  %30r \"   %   ( variable )  print   \"Test6:  %-30r \"   %   ( variable )  print   \"Test7:  %d ,  %d ,  %d \"   %   ( 1 ,   2 ,   3 )  print   \"Test8:  %2d ,  %3d ,  %10d \"   %   ( 1 ,   2 ,   3 )  print   \"Test9:  %d ,  %i ,  %f \"   %   ( 1 ,   2 ,   3 )  print   \"Test10:  %i ,  %i ,  %i \"   %   ( 1 ,   2.8 ,   3.1416 )  print   \"Test11:  %2i ,  %5i ,  %10i \"   %   ( 1 ,   2.8 ,   3.1416 )  print   \"Test12:  %f ,  %f ,  %f \"   %   ( 1 ,   2.8 ,   3.1416 )  print   \"Test13:  %2f ,  %2.2f ,  %10.3f \"   %   ( 1 ,   2.8 ,   3.1416 )  print   \"Test14:  %2f ,  %2f ,  %2f \"   %   ( 0.11 ,   10.111 ,   1000.1111 )  print   \"Test15:  %2.1f ,  %2.1f ,  %2.10f \"   %   ( 0.11 ,   10.111 ,   1000.1111 )  file2 . close ()    Output:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 Test1: 'this is just a dummy test'\nTest2: this is just a dummy test\nTest3:      this is just a dummy test\nTest4: this is just a dummy test     \nTest5:    'this is just a dummy test'\nTest6: 'this is just a dummy test'   \nTest7: 1, 2, 3\nTest8:  1,   2,          3\nTest9: 1, 2, 3.000000\nTest10: 1, 2, 3\nTest11:  1,     2,          3\nTest12: 1.000000, 2.800000, 3.141600\nTest13: 1.000000, 2.80,      3.142\nTest14: 0.110000, 10.111000, 1000.111100\nTest15: 0.1, 10.1, 1000.1111000000   Write a list of numbers to a text file  1\n2\n3\n4\n5\n6\n7 data   =   [ 16.38 ,   139.90 ,   441.46 ,   29.03 ,   40.93 ,   202.07 ,   142.30 ,   346.00 ,   300.00 ]  out   =   []  for   value   in   data : \n     out . append ( str ( value )   +   ' \\n ' )  open ( 'results.txt' ,   'w' ) . writelines ( out )    Ouput:  1\n2\n3\n4\n5\n6\n7\n8\n9 16.38\n139.9\n441.46\n29.03\n40.93\n202.07\n142.3\n346.0\n300.0   Calculate the average from a list of numbers  1\n2\n3\n4\n5\n6\n7\n8\n9 # calculate average from float numbers  data   =   [ 3.53 ,   3.47 ,   3.51 ,   3.72 ,   3.43 ]  average   =   sum ( data )   /   len ( data )  print   average  # calculate average from integer numbers  data   =   [ 1 ,   2 ,   3 ,   4 ]  average   =   float ( sum ( data ))   /   len ( data )  print   average    Calculate the median from a list of numbers   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 data   =   [ 3.53 ,   3.47 ,   3.51 ,   3.72 ,   3.43 ]  data . sort ()  mid   =   len ( data )   /   2   if   len ( data )   %   2   ==   0 : \n     median   =   ( data [ mid   -   1 ]   +   data [ mid ])   /   2.0  else : \n     median   =   data [ mid ]  print   median    Join or concatenate a list   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 >>>   L   =   [ '1' ,   '2' ,   '3' ]  >>>   '+' . join ( L )  '1+2+3'  >>>   L   =   [ 'a' ,   'b' ,   'c' ]  >>>   '' . join ( L )  'abc'  >>>   L   =   [ '1' ,   '2' ,   '3' ]  >>>   int ( '' . join ( L ))  123    Calculate (a variance and )a standard deviation from a list of numbers   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 import   math  data   =   [ 3.53 ,   3.47 ,   3.51 ,   3.72 ,   3.43 ]  average   =   sum ( data )   /   len ( data )  total   =   0.0  for   value   in   data : \n     total   +=   ( value   -   average )   **   2  variance   =   total   /   len ( data )   # population variance  stddev   =   math . sqrt ( variance )   # population stddev  print   variance  print   stddev",
            "title": "Chapter 3, Analyzing a Data Column"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-4-parsing-data-records",
            "text": "Find items common to two lists   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 # proteins participating in cell cycle  list_a   =   []  for   line   in   open ( \"cell_cycle_proteins.txt\" ): \n     list_a . append ( line . strip ())  print   list_a  # proteins expressed in a given cancer cell  list_b   =   []  for   line   in   open ( \"cancer_cell_proteins.txt\" ): \n     list_b . append ( line . strip ())   print   list_b  for   protein   in   list_a : \n     if   protein   in   list_b : \n         print   protein ,   'detected in the cancer cell' \n     else : \n         print   protein ,   'not observed'    Output:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ['P62258', 'P61981', 'P62191', 'P17980', 'P43686', 'P35998', 'P62333', 'Q99460', 'O75832']\n['P43686', 'P62333']\n\nP62258 not observed\nP61981 not observed\nP62191 not observed\nP17980 not observed\nP43686 detected in the cancer cell\nP35998 not observed\nP62333 detected in the cancer cell\nQ99460 not observed\nO75832 not observed   **Find if two or more conditions are met  boolean, operators, and, or, not   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 seq   =   \"MGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQTPSKPASADGHRGPSAAFAPAAAE\"  if   'GGG'   in   seq   and   'RRR' in   seq : \n     print   'GGG is at position: ' ,   seq . find ( 'GGG' ) \n     print   'RRR is at position: ' ,   seq . find ( 'RRR' )  if   'WWW'   in   seq   or   'AAA'   in   seq : \n     print   'Either WWW or AAA occur in the sequence'  if   'AAA'   in   seq   and   not   'PPP'   in   seq : \n     print   'AAA occurs in the sequence but not PPP'    Boolean Operators     Condition  Meaning      A < B  A lower than B    A <= B  A lower than or equal to B    A > B  A greater than B    A >= B  A greater than or equal to B    A == B  A equal to B    A != B  A different from B    A<> B  idem    A is B  A is the same thing as B \u2018thing\u2019 being an object    A is not B  A is not the same thing as B    A in B  A is present in the sequence B    A not in B  A is not present in the sequence B     Find all prime numbers under 30   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 for   i   in   range ( 30 ): \n     if   i   <   4 : \n         print   \"prime number:\" ,   i \n     elif   i   %   2   ==   0 : \n         print   \"multiple of two:\" ,   i \n     elif   i   %   3   ==   0 : \n         print   \"multiple of three:\" ,   i \n     elif   i   %   5   ==   0 : \n         print   \"multiple of five:\" ,   i \n     else : \n         print   \"prime number:\" ,   i    List vs Tuple vs Set   mutable: change, replace, reorder, add elements.  List = [1, 2, 3] ; mutable sequences of objects.   Tuple = (1, 2, 3) ; immutable ordered sequences of objects;.  Set = set([1, 2, 3]) ; immutable unordered  collections of unique elements.  The three can contain digits, strings or other objects (embedded).   More on lists   List[0] ; extract  Llist = [[1, 2, 3],[a, b, c],[x, 4, 'text'], 'seq'] ; embedded lists.  List[0][1] ; extract from embedded lists.  List.append(5) ; add.  Create:  range(3) .  seq(0, 2, 1) .  [0.0] * 10 .  [x**2 for x in range(5)] .     Creating a list with a one-line loop  loop, conditional, conditional, on one line   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # remove non-base symbols from a sequence  squares   =   [ x ** 2   for   x   in   range ( 5 )]  print   squares  bases   =   [ 'A' ,   'C' ,   'T' ,   'G' ]  print   bases  seq   =   'GGACXCAGXXGATT'  print   seq  seqlist   =   [ base   for   base   in   seq   if   base   in   bases ]  print   seqlist    Write all headers from a file to a separate file  1\n2\n3\n4\n5\n6\n7\n8 fasta_file   =   open ( 'SwissProt.fasta' , 'r' )  out_file   =   open ( 'SwissProt.header' , 'w' )  for   line   in   fasta_file : \n     if   line [ 0 : 1 ]   ==   '>' : \n         out_file . write ( line )  out_file . close ()    Reads all AC numbers from the deflines of a file  parse, parsing, text, file   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 input_file   =   open ( \"SwissProt.fasta\" , \"r\" )  ac_list   =   []  for   line   in   input_file : \n     if   line [ 0 ]   ==   '>' : \n         fields   =   line . split ( '|' ) \n         ac_list . append ( fields [ 1 ])  print   ac_list    Output:  1 ['P31946', 'P62258', 'Q04917', 'P61981', 'P31947', 'P27348', 'P63104', 'P30443']   Read a file (genbank_file) and convert it to another file (output_file)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 genbank_file   =   open ( \"AY810830.gb\" )  output_file   =   open ( \"AY810830.fasta\" , \"w\" )  flag   =   False  for   line   in   genbank_file : \n     if   line [ 0 : 9 ]   ==   'ACCESSION' : \n         accession   =   line . split ()[ 1 ] . strip () \n         output_file . write ( '>'   +   accession   +   ' \\n ' ) \n     if   line [ 0 : 6 ]   ==   'ORIGIN' :  \n         flag   =   True \n     elif   flag : \n         fields   =   line . split () \n         if   fields   !=   []: \n             seq   =   '' . join ( fields [ 1 :]) \n             output_file . write ( seq . upper ()   +   ' \\n ' )  genbank_file . close ()  output_file . close ()    Read multiple files and extract data   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 fasta_file   =   open ( 'SwissProt.fasta' , 'r' )  out_file   =   open ( 'SwissProtHuman.fasta' , 'w' )  seq   =   ''  for   line   in   fasta_file : \n     if   line [ 0 ]   ==   '>'   and   seq   ==   '' : \n         # process the first line of the input file \n         header   =   line \n     elif   line   [ 0 ]   !=   '>' : \n         # join the lines with sequence \n         seq   =   seq   +   line \n     elif   line [ 0 ]   ==   '>'   and   seq   !=   '' : \n         # in subsequent lines starting with '>', \n         # write the previous header and sequence \n         # to the output file. Then re-initialize \n         # the header and seq variables for the next record \n         if   \"Homo sapiens\"   in   header : \n             out_file . write ( header   +   seq ) \n         seq   =   '' \n         header   =   line  # take care of the very last record of the input file  if   \"Homo sapiens\"   in   header : \n     out_file . write ( header   +   seq )  out_file . close ()",
            "title": "Chapter 4, Parsing Data Records"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-5-searching-data",
            "text": "Translate a RNA sequence to a protein sequence in three reading frames  dictionary   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41 codon_table   =   { \n     'GCU' : 'A' ,   'GCC' : 'A' ,   'GCA' : 'A' ,   'GCG' : 'A' ,   'CGU' : 'R' ,   'CGC' : 'R' ,    \n     'CGA' : 'R' ,   'CGG' : 'R' ,   'AGA' : 'R' ,   'AGG' : 'R' ,   'UCU' : 'S' ,   'UCC' : 'S' , \n     'UCA' : 'S' ,   'UCG' : 'S' ,   'AGU' : 'S' ,   'AGC' : 'S' ,   'AUU' : 'I' ,   'AUC' : 'I' , \n     'AUA' : 'I' ,   'UUA' : 'L' ,   'UUG' : 'L' ,   'CUU' : 'L' ,   'CUC' : 'L' ,   'CUA' : 'L' , \n     'CUG' : 'L' ,   'GGU' : 'G' ,   'GGC' : 'G' ,   'GGA' : 'G' ,   'GGG' : 'G' ,   'GUU' : 'V' , \n     'GUC' : 'V' ,   'GUA' : 'V' ,   'GUG' : 'V' ,   'ACU' : 'T' ,   'ACC' : 'T' ,   'ACA' : 'T' , \n     'ACG' : 'T' ,   'CCU' : 'P' ,   'CCC' : 'P' ,   'CCA' : 'P' ,   'CCG' : 'P' ,   'AAU' : 'N' , \n     'AAC' : 'N' ,   'GAU' : 'D' ,   'GAC' : 'D' ,   'UGU' : 'C' ,   'UGC' : 'C' ,   'CAA' : 'Q' , \n     'CAG' : 'Q' ,   'GAA' : 'E' ,   'GAG' : 'E' ,   'CAU' : 'H' ,   'CAC' : 'H' ,   'AAA' : 'K' , \n     'AAG' : 'K' ,   'UUU' : 'F' ,   'UUC' : 'F' ,   'UAU' : 'Y' ,   'UAC' : 'Y' ,   'AUG' : 'M' , \n     'UGG' : 'W' , \n     'UAG' : 'STOP' ,   'UGA' : 'STOP' ,   'UAA' : 'STOP' \n     }  # read the RNA sequence into a single string  rna   =   ''  for   line   in   open ( 'A06662-RNA.fasta' ): \n     if   not   line . startswith ( '>' ):  \n         rna   =   rna   +   line . strip ()  # translate one frame at a time  for   frame   in   range ( 3 ): \n     prot   =   ''  \n     print   'Reading frame '   +   str ( frame   +   1 ) \n     for   i   in   range ( frame ,   len ( rna ),   3 ): \n         codon   =   rna [ i : i   +   3 ] \n         if   codon   in   codon_table : \n             if   codon_table [ codon ]   ==   'STOP' : \n                 prot   =   prot   +   '*' \n             else :  \n                 prot   =   prot   +   codon_table [ codon ] \n         else : \n             # handle too short codons \n             prot   =   prot   +   '-'    \n\n     # format to blocks of 48 columns \n     i   =   0 \n     while   i   <   len ( prot ): \n         print   prot [ i : i   +   48 ] \n         i   =   i   +   48    Output (contains a translated sequence for each reading frame):   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 Reading frame 1\nWDQSAEAACVRVRVRVCACVCVRLHLCRVGKEIEMGGQ*AQVPKALNP\nLVWSLLRAMGAIEKSEQGCV*M*GLEGSSREASSKAFAIIW*ENPARM\nDRQNGIEMSWQLKWTGFGTSLVVGSKQRRIWDSGGLAWGRRGCLRGWE\nG*E*DDTWWCLAGGGQG*LCEGTARATEAF*DPAVPEPGRQDLHCGRP\nGEHLA\n\nReading frame 2\nGTSQQRQRVCACVCVCVRVCVYACICVGWVRR*RWAGSRPRSRRP*TH\nWFGVS*GQWGPLRSLNRAVSECEV*KDPPEKPALKLLQSSGERTQQGW\nTGRME*R*VGS*SGQDLVLAWLWGASRGESGTLVVWPGADGGVSGAGR\nDESRMIHGGVWQEAGKDDYVKALPGQLKPFETLLSQNQGGKTFIVGDQ\nVSIW-\n\nReading frame 3\nGPVSRGSVCARACACVCVCVCTLAFVSGG*GDRDGRAVGPGPEGLEPT\nGLESPKGNGGH*EV*TGLCLNVRSRRILQRSQL*SFCNHLVREPSKDG\nQAEWNRDELAAEVDRIWY*PGCGEQAEENLGLWWSGLGQTGVSQGLGG\nMRVG*YMVVSGRRRARMTM*RHCPGN*SLLRPCCPRTREARPSLWETR\n*ASG-   While loop  1\n2\n3\n4\n5\n6 seq   =   \"IVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\"  i   =   0  while   i   <   len ( seq ): \n     print   seq [ i : i   +   12 ] \n     i   =   i   +   12    Output:  1\n2\n3\n4\n5\n6 IVGGYTCGANTV\nPYQVSLNSGYHF\nCGGSLINSQWVV\nSAAHCYKSGIQV\nRLGEDNINVVEG\nNEQF   Find the a sequence in a file   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 swissprot   =   open ( \"SwissProt.fasta\" )  insulin_ac   =   'P61981'  result   =   None  while   result   ==   None : \n     line   =   swissprot . next () \n     if   line . startswith ( '>' ): \n         ac   =   line . split ( '|' )[ 1 ] \n         if   ac   ==   insulin_ac : \n             result   =   line . strip ()  print   result    Output:  1 >sp|P61981|1433G_HUMAN 14-3-3 protein gamma OS=Homo sapiens GN=YWHAG PE=1 SV=2   Searching a list  search  1\n2\n3\n4\n5\n6 bases   =   [ 'A' ,   'C' ,   'T' ,   'G' ]  seq   =   'CAGGCCATTRKGL'  for   i   in   seq : \n     if   i   not   in   bases : \n         print   i ,   \"is not a nucleotide\"    Output:  1\n2\n3 R is not a nucleotide\nK is not a nucleotide\nL is not a nucleotide   Read a file and store entries in a dictionary   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 sequences   =   {}  ac   =   ''  seq   =   ''  for   line   in   open ( \"SwissProt.fasta\" ): \n     if   line . startswith ( '>' )   and   seq   !=   '' : \n         sequences [ ac ]   =   seq \n         seq   =   '' \n     if   line . startswith ( '>' ): \n         ac   =   line . split ( '|' )[ 1 ] \n     else : \n         seq   =   seq   +   line . strip ()  sequences [ ac ]   =   seq  print   sequences . keys ()  print   sequences [ 'P62258' ]    Output:  1\n2\n3 ['Q04917', 'P63104', 'P27348', 'P31947', 'P31946', 'P30443', 'P61981', 'P62258']\n\nMDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIGARRASWRIISSIEQKEENKGGEDKLKMIREYRQMVETELKLICCDILDVLDKHLIPAANTGESKVFYYKMKGDYHRYLAEFATGNDRKEAAENSLVAYKAASDIAMTELPPTHPIRLGLALNFSVFYYEILNSPDRACRLAKAAFDDAIAELDTLSEESYKDSTLIMQLLRDNLTLWTSDMQGDGEEQNKEALQDVEDENQ   Read a sequence from a structure   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 aa_codes   =   { \n      'ALA' : 'A' ,   'CYS' : 'C' ,   'ASP' : 'D' ,   'GLU' : 'E' , \n      'PHE' : 'F' ,   'GLY' : 'G' ,   'HIS' : 'H' ,   'LYS' : 'K' , \n      'ILE' : 'I' ,   'LEU' : 'L' ,   'MET' : 'M' ,   'ASN' : 'N' , \n      'PRO' : 'P' ,   'GLN' : 'Q' ,   'ARG' : 'R' ,   'SER' : 'S' , \n      'THR' : 'T' ,   'VAL' : 'V' ,   'TYR' : 'Y' ,   'TRP' : 'W' }  seq   =   ''  for   line   in   open ( \"1TLD.pdb\" ): \n     if   line [ 0 : 6 ]   ==   \"SEQRES\" : \n         columns   =   line . split () \n         for   resname   in   columns [ 4 :]: \n             seq   =   seq   +   aa_codes [ resname ]  i   =   0  print   \">1TLD\"  while   i   <   len ( seq ): \n     print   seq [ i : i   +   64 ] \n     i   =   i   +   64    Output:  1\n2\n3\n4\n5 >1TLD\nIVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\nISASKSIVHPSYNSNTLNNDIMLIKLKSAASLNSRVASISLPTSCASAGTQCLISGWGNTKSSG\nTSYPDVLKCLKAPILSDSSCKSAYPGQITSNMFCAGYLEGGKDSCQGDSGGPVVCSGKLQGIVS\nWGSGCAQKNKPGVYTKVCNYVSWIKQTIASN",
            "title": "Chapter 5, Searching Data"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-6-filtering-data",
            "text": "Calculate the intersection of two lists  venn   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 data_a   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ]  data_b   =   [ 1 ,   5 ,   7 ,   8 ,   9 ]  a_and_b   =   []  for   num   in   data_a : \n     if   num   in   data_b : \n         a_and_b . append ( num )  print   a_and_b    Output:  1 [1, 5]   More about sets  set   Set = set([1, 2, 3]) ; immutable unordered collections of unique elements.  They are not sequential objects like lists.  They cannot contain identical elements.  to remove duplicates  to calculate the intersection  the union  the difference between two or more group of objects  as long as the order is not important.    They do not support indexing and slicing operations.  They take the  in  and  not in  operators (test an element for membership in a set).    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63 >>>   s1   =   set ( 'LDFGJLDFGDGD' )  >>>   s1  set ([ 'J' ,   'F' ,   'L' ,   'G' ,   'D' ])  >>>   'L'   in   s1  True  >>>   'Z'   not   in   s1  True  >>>   s2   =   ( 'LDF' )  >>>   s1 . issubset ( s2 )  False  >>>   s1 . issuperset ( s2 )  True  >>>   s1   =   set ([ 'a' ,   1 ,   2 ,   3 ,   4 ,   5 ,   'c' ,   'b' ])  >>>   5   in   s1  True  >>>   6   in   s1  False  >>>   s2   =   set ([ 10 ,   4 ,   5 ])  >>>   s1 . issubset ( s2 )  False  >>>   s1 . issuperset ( s2 )  False  >>>   s3   =   set (( 1 ,   2 ,   3 ,   4 ))  >>>   s3  set ([ 1 ,   2 ,   3 ,   4 ])  >>>   s3 . add ( 5 )  >>>   s3  set ([ 1 ,   2 ,   3 ,   4 ,   5 ])  >>>   s5   =   set ([ 1 ,   2 ,   3 ,   'b' ,   'c' ])  >>>   s5  set ([ 1 ,   2 ,   3 ,   'b' ,   'c' ])  >>>   s5 . update ([ 'a' ,   'd' ,   4 ])  >>>   s5  set ([ 'a' ,   1 ,   2 ,   3 ,   4 ,   'd' ,   'c' ,   'b' ])  >>>   s1   =   set ([ 'a' ,   'b' ,   'c' ])  >>>   s2   =   set ([ 'c' ,   'd' ,   'e' ])  >>>   s1 . union ( s2 )  set ([ 'a' ,   'c' ,   'b' ,   'e' ,   'd' ])  >>>   s1 . intersection ( s2 )  set ([ 'c' ])  >>>   s1 . symmetric_difference ( s2 )  set ([ 'a' ,   'b' ,   'e' ,   'd' ])  >>>   s1 . difference ( s2 )  set ([ 'a' ,   'b' ])  >>>   s2 . difference ( s1 )  set ([ 'e' ,   'd' ])    Calculate the intersection of two sets  1\n2\n3\n4\n5 data_a   =   set ([ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ])  data_b   =   set ([ 1 ,   5 ,   7 ,   8 ,   9 ])  a_and_b   =   data_a . intersection ( data_b )  print   a_and_b    Output:  1 set([1, 5])   Find numbers common to three sets  1\n2\n3\n4\n5\n6\n7\n8\n9 reduce ()   is  a   =   set (( 1 ,   2 ,   3 ,   4 ,   5 ))  b   =   set (( 2 ,   4 ,   6 ,   7 ,   1 ))  c   =   set (( 1 ,   4 ,   5 ,   9 ))  triple_set   =   [ a ,   b ,   c ]  common   =   reduce ( set . intersection ,   triple_set )  print   common    Output:  1 set([1, 4])   Calculate the differences of two lists   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 data_a   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ]  data_b   =   [ 1 ,   5 ,   7 ,   8 ,   9 ]  a_not_b   =   []  b_not_a   =   []  for   num   in   data_a : \n     if   num   not   in   data_b : \n         a_not_b . append ( num )  for   num   in   data_b : \n     if   num   not   in   data_a : \n         b_not_a . append ( num )  print   a_not_b  print   b_not_a    Output:  1\n2 [2, 3, 4, 6]\n[7, 8, 9]   Calculate the differences of two sets 1  1\n2\n3\n4\n5\n6\n7\n8 data_a   =   set ([ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ])  data_b   =   set ([ 1 ,   5 ,   7 ,   8 ,   9 ])  a_not_b   =   data_a . difference ( data_b )  b_not_a   =   data_b . difference ( data_a )  print   a_not_b  print   b_not_a    Output:  1\n2 set([2, 3, 4, 6])\nset([8, 9, 7])   Calculate the differences of two sets 2  1\n2\n3\n4\n5\n6\n7\n8 data_a   =   set ([ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ])  data_b   =   set ([ 1 ,   5 ,   7 ,   8 ,   9 ])  a_or_b   =   data_a . union ( data_b )  a_xor_b   =   data_a . symmetric_difference ( data_b )  print   a_or_b  print   a_xor_b    Output:  1\n2 set([1, 2, 3, 4, 5, 6, 7, 8, 9])\nset([2, 3, 4, 6, 7, 8, 9])   Remove elements from a list   pop() ; return and remove the first value.  pop(0) ; return and remove a specific position in the index.   1\n2\n3\n4\n5\n6 >>>   data_a   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ]  >>>   data_a . pop ()  1  >>>   print   data_a  [ 2 ,   3 ,   4 ,   5 ,   6 ,   7 ]     del() ; remove a specific position in the index only.   delete  1\n2\n3\n4 >>>   data_a   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ]  >>>   del ( data_a [ 1 ])  >>>   print   data_a  [ 1 ,   3 ,   4 ,   5 ,   6 ,   7 ]     remove() ;  remove a specific element only.   remove  1\n2\n3\n4\n5\n6 >>>   data_a   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ]  >>>   data_a . remove ( 2 )  >>>   print   data_a  [ 1 ,   3 ,   4 ,   5 ,   6 ]  >>>   data   =   [ x   for   x   in   data_a   if   x   !=   3 ]    Slicing a list  slice, subset  1\n2\n3 >>>   data_a   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ]  >>>   data_2   =   data_a [: 2 ]  [ 1 ,   2 ]    Remove elements from a dictionary  pop, delete   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 >>>   d   =   { 'a' :   1 ,   'b' :   2 ,   'c' :   3 }  >>>   d . pop ( 'a' )  1  >>>   d  { 'b' :   2 ,   'c' :   3 }  >>>   d   =   { 'a' :   1 ,   'b' :   2 ,   'c' :   3 }  >>>   del   d [ 'a' ]  1  >>>   d  { 'b' :   2 ,   'c' :   3 }    Delete particular lines from a text file or write back particular lines in a new file  1\n2 lines   =   open ( 'text.txt' ) . readlines ()  open ( 'new.txt' ,   'w' ) . writelines ( lines [ 2 : 4 ] + lines [ 6 :])    Remove some lines from a text file   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 in_file   =   open ( 'text.txt' )  out_file   =   open ( 'new.txt' ,   'w' )  index   =   0  indices_to_remove   =   [ 1 ,   2 ,   5 ,   6 ]  for   line   in   in_file : \n     index   =   index   +   1 \n     if   index   not   in   indices_to_remove : \n         out_file . write ( line )  in_file . close ()  out_file . close ()    Remove some lines from a text file with  enumerate ()  enumerate  1\n2\n3\n4\n5\n6\n7\n8 out_file   =   open ( 'new.txt' ,   'w' )  indices_to_remove   =   [ 1 ,   2 ,   5 ,   6 ]  for   index ,   line   in   enumerate ( open ( 'text.txt' )): \n     if   ( index   +   1 )   not   in   indices_to_remove : \n         out_file_write ( line )  out_file . close ()    Remove duplicates from a file with accession numbers 1  set   Using a set is faster but distorts the order.   1\n2\n3\n4\n5\n6\n7\n8\n9 input_file   =   open ( 'UniprotID.txt' )  output_file   =   open ( 'UniprotID-unique.txt' , 'w' )  unique   =   set ( input_file )  for   line   in   input_file : \n     unique . add ( line )  for   line   in   unique : \n     output_file . write ( line )    Remove duplicates from a list of accession numbers 2  list   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 input_file   =   open ( 'UniprotID.txt' )  output_file   =   open ( 'UniprotID-unique.txt' , 'w' )  unique   =   []  for   line   in   input_file : \n     if   line   not   in   unique : \n         output_file . write ( line ) \n         unique . append ( line )  input_file . close ()  output_file . close ()    Compare two lists of accession codes using sets  set comparison, difference   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 # read the old database release  old_db   =   set ()  for   line   in   open ( \"list_old.txt\" ): \n     accession   =   line . strip () \n     old_db . add ( accession )  # read the new database release  new_db   =   set ()  for   line   in   open ( \"list_new.txt\" ): \n     accession   =   line . strip () \n     new_db . add ( accession )  # report the differences  new_entries   =   new_db . difference ( old_db )  print   \"new entries\" ,   list ( new_entries )  old_entries   =   old_db . difference ( new_db )  print   \"deprecated entries\" ,   list ( old_entries )  unique_entries   =   new_db . symmetric_difference ( old_db )  print   \"unique entries\" ,   list ( unique_entries )",
            "title": "Chapter 6, Filtering Data"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-7-managing-tabular-data",
            "text": "The original data     protein  ext1  ext2  ext3      0.16  0.038  0.044  0.04    0.33  0.089  0.095  0.091    0.66  0.184  0.191  0.191    1.0  0.28  0.292  0.283    1.32  0.365  0.367  0.365    1.66  0.441  0.443  0.444     Read tabular data from a tab-separated text file  1\n2\n3\n4\n5\n6 table   =   []  for   line   in   open ( 'lowry_data.txt' ): \n     table . append ( line . strip () . split ( ' \\t ' ))  print   table    Output:  1\n2\n3\n4\n5\n6\n7\n8\n9 [\n['protein', 'ext1', 'ext2', 'ext3'],\n['0.16', '0.038', '0.044', '0.04'],\n['0.33', '0.089', '0.095', '0.091'],\n['0.66', '0.184', '0.191', '0.191'],\n['1.0', '0.28', '0.292', '0.283'],\n['1.32', '0.365', '0.367', '0.365'],\n['1.66', '0.441', '0.443', '0.444']\n]   Write a nested list to a text file   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 table   =   [ \n     [ 'protein' ,   'ext1' ,   'ext2' ,   'ext3' ], \n     [ 0.16 ,   0.038 ,   0.044 ,   0.040 ], \n     [ 0.33 ,   0.089 ,   0.095 ,   0.091 ], \n     [ 0.66 ,   0.184 ,   0.191 ,   0.191 ], \n     [ 1.00 ,   0.280 ,   0.292 ,   0.283 ], \n     [ 1.32 ,   0.365 ,   0.367 ,   0.365 ], \n     [ 1.66 ,   0.441 ,   0.443 ,   0.444 ] \n     ]  out   =   ''  for   row   in   table : \n     line   =   [ str ( cell )   for   cell   in   row ] \n     out   =   out   +   ' \\t ' . join ( line )   +   ' \\n '  open ( 'lowry_data.txt' ,   'w' ) . write ( out )    Reformat a four-column to a two-column table  Create a 2D table.  Print the table line by line.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 table   =   [ \n     [ 'protein' ,   'ext1' ,   'ext2' ,   'ext3' ], \n     [ 0.16 ,   0.038 ,   0.044 ,   0.040 ], \n     [ 0.33 ,   0.089 ,   0.095 ,   0.091 ], \n     [ 0.66 ,   0.184 ,   0.191 ,   0.191 ], \n     [ 1.00 ,   0.280 ,   0.292 ,   0.283 ], \n     [ 1.32 ,   0.365 ,   0.367 ,   0.365 ], \n     [ 1.66 ,   0.441 ,   0.443 ,   0.444 ] \n     ]  # remove the first row  table   =   table [ 1 :]  protein ,   ext1 ,   ext2 ,   ext3   =   zip ( * table )  # create a single column for `ext` or concatenate each `ext`  # extend (`* 3`) the `protein` column to match the `ext` column.  extinction   =   ext1   +   ext2   +   ext3  protein   =   protein   *   3  # create four tuples for each column  table   =   zip ( protein ,   extinction )  for   prot ,   ext   in   table : \n     print   prot ,   ext    Output:     protein  ext      0.16  0.038    0.33  0.089    0.66  0.184    1.0  0.28    1.32  0.365    1.66  0.441    0.16  0.044    0.33  0.095    0.66  0.191    1.0  0.292    1.32  0.367    1.66  0.443    0.16  0.04    0.33  0.091    0.66  0.191    1.0  0.283    1.32  0.365    1.66  0.444     Create a table; lists in a list   Empty 1.   1 table   =   [[ 0 ]   *   3   for   x   in   range ( 3 )]     Empty 2.   1\n2\n3 table   =   []  for   i   in   range ( 3 ): \n     table . append ([ 0 ]   *   3 )    Encode a 2D list; lists in a list  tabular, table, two dimensions  1\n2\n3\n4\n5 table   =   [ \n     [   0 ,    1 ,    2 ,    3 ], \n     [ 10 ,   11 ,   12 ,   13 ], \n     [ 20 ,   21 ,   22 ,   23 ] \n     ]    Encode a list of nested tuples; tuples in a list  1\n2\n3\n4\n5 table   =   [ \n     (   0 ,    1 ,    2 ,    3 ), \n     ( 10 ,   11 ,   12 ,   13 ), \n     ( 20 ,   21 ,   22 ,   23 ) \n     ]    Extract, access rows and cells from a 2D table  tabular, table, two dimensions   table[1] ; extract the 2 nd  row.  table[1][2] ; extract a single cell (2 nd  row, 3 rd  column).  table[1:]  or  table.pop(0) ; slice the 1 st  row, keep the remaining.  table.pop(2) ; delete the 3 rd  row.  table[:2] ; slice the 3 rd  column, keep the remaining.  table[:2] + table[3:] ; slice the 3 rd  column and 4 th  row, keep the remaining.  table.insert(2, [0.55, 0.12, 0.12, 0.14]) ; insert a new row in 3 rd  position  table.append([0.55, 0.12, 0.12, 0.14]) ; insert a new row at the end.   Looping to access each row  1\n2 for   row   in   table : \n     print   row    Looping to access each cell  1\n2\n3 for   row   in   table : \n     for   cell   in   row : \n         print   cell    Extract, access columns from a 2D table  tabular, table, two dimensions  1\n2\n3\n4\n5 protein   =   []  # access the 1st, 2nd... column (separate the columns)  for   row   in   table : \n     protein . append ( row [ 0 ])    1\n2\n3 # access the 4th column  columns   =   zip ( * table )  fourth   =   column [ 3 ]     protein, ex1. ext2, ext3 = zip(*table) ; access many columns; now each column is in a separate tuple.   Flip a table 90 degrees  convert column to row, row to column   Column becomes rows. Easier to extract or insert rows and cells.   1\n2\n3\n4\n5\n6\n7\n8 data   =   [ \n     [   0 ,    1 ,    2 ,    3 ], \n     [ 10 ,   11 ,   12 ,   13 ], \n     [ 20 ,   21 ,   22 ,   23 ]  ]  columns   =   zip ( * data )  print   columns    Output:  1\n2\n3\n4\n5\n6 [\n(0, 10, 20),\n(1, 11, 21),\n(2, 12, 22),\n(3, 13, 23)\n]    But rows are now immutable tuples!  You cannot manipulate individual cells.  Convert the rows to lists again in order to extract a cell.   1\n2 table [ 1 ]   =   list ( table [ 1 ])  table [ 1 ][ 2 ]    Insert, access or extract columns from a 2D table  tabular, table, two dimensions   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 table   =   zip ( * table )  table . append ([ 'ext4' ,   0 ,   0 ,   0 ,   0 ,   0 ,   0 ])  table   =   zip ( * table )  table   =   zip ( * table )  table . pop ( 1 )  table   =   zip ( * table )  table   =   zip ( * table )  table    The  zip()  function   zip() ; iterate though lists, tuples, and strings.   1\n2\n3\n4\n5\n6 >>>   zip ([ 1 ,   2 ,   3 ],   [ 4 ,   5 ,   6 ])  [  ( 1 ,   4 ),  ( 2 ,   5 ),  ( 3 ,   6 )  ]     The asterik tells the function to use all the arguments.   1\n2\n3\n4\n5 zip ( * table )  # vs  zip ( table [ 0 ],   table [ 1 ],   table [ 2 ],   table [ 3 ])    Multi-dimentional tables  tabular, table, two dimensions, three dimensions, 2D, 3D, lists in list  1 cube   =   [[[ 0 ,   1 ],   [ 2 ,   3 ]],   [[ 4 ,   5 ],   [ 6 ,   7 ]]]     Warning: more dimensions means more nested data.  It slows down the calculations!!!   Prefer Numpy, Pandas, parallel computing.  Avoid going over 2D!   Create a table; dictionaries in a table, in a list  1\n2\n3\n4\n5\n6\n7\n8 table   =   [ \n    { 'protein' :   0.16 ,   'ext1' :   0.038 ,   'ext2' :   0.044 ,   'ext3' :   0.040 }, \n    { 'protein' :   0.33 ,   'ext1' :   0.089 ,   'ext2' :   0.095 ,   'ext3' :   0.091 }, \n    { 'protein' :   0.66 ,   'ext1' :   0.184 ,   'ext2' :   0.191 ,   'ext3' :   0.191 }, \n    { 'protein' :   1.00 ,   'ext1' :   0.280 ,   'ext2' :   0.292 ,   'ext3' :   0.283 }, \n    { 'protein' :   1.32 ,   'ext1' :   0.365 ,   'ext2' :   0.367 ,   'ext3' :   0.365 }, \n    { 'protein' :   1.66 ,   'ext1' :   0.441 ,   'ext2' :   0.443 ,   'ext3' :   0.444 } \n    ]    Extract, access cells in a table  1\n2\n3\n4\n5 # second row, cell 'ext2' instead of a number  cell   =   table [ 1 ][ 'ext2' ]  print   table  print   cell    Create a table; dictionaries in a dictionary  1\n2\n3\n4\n5\n6\n7\n8 table   =   { \n    'row1' :   { 'protein' :   0.16 ,   'ext1' :   0.038 ,   'ext2' :   0.044 ,   'ext3' :   0.040 }, \n    'row2' :   { 'protein' :   0.33 ,   'ext1' :   0.089 ,   'ext2' :   0.095 ,   'ext3' :   0.091 }, \n    'row3' :   { 'protein' :   0.66 ,   'ext1' :   0.184 ,   'ext2' :   0.191 ,   'ext3' :   0.191 }, \n    'row4' :   { 'protein' :   1.00 ,   'ext1' :   0.280 ,   'ext2' :   0.292 ,   'ext3' :   0.283 }, \n    'row5' :   { 'protein' :   1.32 ,   'ext1' :   0.365 ,   'ext2' :   0.367 ,   'ext3' :   0.365 }, \n    'row6' :   { 'protein' :   1.66 ,   'ext1' :   0.441 ,   'ext2' :   0.443 ,   'ext3' :   0.444 } \n    }    Extract, access cells in a table, in a dictionary  More readable this way; second row, cell  'ext2' :  1\n2\n3\n4 cell   =   table [ 'row1' ][ 'ext2' ]  print   table  print   cell    Create a table: lists in a dictionaries  Data for each row are in a simpler format.  1\n2\n3\n4\n5\n6\n7\n8 table   =   { \n    '1' :   [ 'protein' :   0.16 ,   'ext1' :   0.038 ,   'ext2' :   0.044 ,   'ext3' :   0.040 \u00b8 ], \n    '2' :   [ 'protein' :   0.33 ,   'ext1' :   0.089 ,   'ext2' :   0.095 ,   'ext3' :   0.091 ], \n    '3' :   [ 'protein' :   0.66 ,   'ext1' :   0.184 ,   'ext2' :   0.191 ,   'ext3' :   0.191 ], \n    '4' :   [ 'protein' :   1.00 ,   'ext1' :   0.280 ,   'ext2' :   0.292 ,   'ext3' :   0.283 ], \n    '5' :   [ 'protein' :   1.32 ,   'ext1' :   0.365 ,   'ext2' :   0.367 ,   'ext3' :   0.365 ], \n    '6' :   [ 'protein' :   1.66 ,   'ext1' :   0.441 ,   'ext2' :   0.443 ,   'ext3' :   0.444 ] \n    }    Create a table; formats   Lists in a list:   Easy to access/add/delete rows, to sort.   Difficult to deal with columns and a specific cell.    Dictionaries in a dictionary:  Easy to access column entries.  Easy to read (find data).  Unsorted and impossible to sort.    Mixed lists and dictionaries:  Use the advantage of both types and build the table accordingly (l, d or d, l for rows, columns) depending on the operations (see above).  The code is harder to read or less straightforward.     Convert a table from a nested list to a nested dictionary\u2026   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 table   =   [ \n     [ 'protein' ,   'ext' ], \n     [ 0.16 ,   0.038 ], \n     [ 0.33 ,   0.089 ], \n     [ 0.66 ,   0.184 ], \n     [ 1.00 ,   0.280 ], \n     [ 1.32 ,   0.365 ], \n     [ 1.66 ,   0.441 ]  ]  # convert nested list to nested dict  nested_dict   =   {}  n   =   0  key   =   table [ 0 ]  for   row   in   table [ 1 :]:   # for row in table[0:]  includes the header \n     n   +=   1 \n     entry   =   { key [ 0 ]:   row [ 0 ],   key [ 1 ]:   row [ 1 ]} \n     nested_dict [ 'row' + str ( n )]   =   entry  print   nested_dict    Output:  1\n2\n3\n4\n5\n6\n7\n8 {  'row1' :   { 'protein' :   0.16 ,   'ext' :   0.038 },  'row2' :   { 'protein' :   0.33 ,   'ext' :   0.089 },  'row3' :   { 'protein' :   0.66 ,   'ext' :   0.184 },  'row4' :   { 'protein' :   1.0 ,   'ext' :   0.28 },  'row5' :   { 'protein' :   1.32 ,   'ext' :   0.365 },  'row6' :   { 'protein' :   1.66 ,   'ext' :   0.441 }  }    \u2026and convert a nested dictionary to a table  1\n2\n3\n4\n5\n6\n7 # convert nested dict back to nested list  nested_list   =   []  for   entry   in   nested_dict : \n     key   =   nested_dict [ entry ] \n     nested_list . append ([ key [ 'protein' ],   key [ 'ext' ]])  print   nested_list    Output:  1\n2\n3\n4\n5\n6\n7\n8 [  [ 0.16 ,   0.038 ],  [ 0.33 ,   0.089 ],  [ 0.66 ,   0.184 ],  [ 1.0 ,   0.28 ],  [ 1.32 ,   0.365 ],  [ 1.66 ,   0.441 ]  ]",
            "title": "Chapter 7, Managing Tabular Data"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-8-sorting-data",
            "text": "Sort a table by one column and write it to a file  add, index, list   sorted() .  itemgetter() ; turn elements of each column into a sortable key.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 from   operator   import   itemgetter  # read table to a nested list of floats  table   =   []  for   line   in   open ( \"random_distribution.tsv\" ): \n     columns   =   line . split () \n     columns   =   [ float ( x )   for   x   in   columns ] \n     table . append ( columns )  # sort the table by second column  column   =   1  table_sorted   =   sorted ( table ,   key   =   itemgetter ( column ))  # format table as strings  for   row   in   table_sorted : \n     row   =   [ str ( x )   for   x   in   row ] \n     print   \" \\t \" . join ( row )    Output (first 3 lines only):  1\n2\n3 6153.0  58.0    0.00942629611572    40.0    0.00650089387291    260.0   0.0422558101739\n6101.0  64.0    0.0104900835929 41.0    0.00672020980167    299.0   0.0490083592854\n6101.0  68.0    0.0111457138174 39.0    0.0063923946894 274.0   0.0449106703819   List are good for sorting   ASCII sort order chart (top to bottom, left to right):                   space  0  :  A  Q  [  a  q  }    !  1  ;  B  R  \\  b  r  tick    \u201c  2  <  C  S  ]  c  s  {    #  3  =  D  T  ^  d  t     $  4  >  E  U  _  e  u  DEL    %  5  ?  F  V  `  f  v     &  6  @  G  W   g  w     \u2018  7   H  X   h  x     (  8   I  Y   i  y     )  9   J  Z   j  z     *    K    k      +    L    l      ,    M    m      -    N    n      .    O    o      /    P    p       Difference between  sort()  and  sorted()   sort() ; apply to lists  sorted() ; apply to lists, tuples, and dictionary keys.  reverse()  sort the other way around.  sorted(data, reverse = True) ; idem.  operator.itemgetter(i)(T)  returns the  i th element of  T , a string, a list, a tuple, or a dictionary.   1\n2\n3\n4\n5\n6 >>>   from   operator   import   itemgetter  >>>   data   =   [ 'A' ,   'T' ,   'C' ]  >>>   itemgetter ( 1 )( data )  'A'  >>>   itemgetter ( 1 ,   - 1 )( data )  ( 'A' ,   'T' )    1 new_table   =   sorted ( table ,   key   =   itemgetter ( 1 ,   3 ))    Sort entries in a tabular output file in reverse order   Notice the  table_sorted = sorted(table, key = itemgetter(2), reverse=True) .    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 from   operator   import   itemgetter  input_file   =   open ( \"BlastOut.csv\" )  output_file   =   open ( \"BlastOutSorted.csv\" , \"w\" )  # read BLAST output table  table   =   []  for   line   in   input_file : \n     col   =   line . split ( ',' ) \n     col [ 2 ]   =   float ( col [ 2 ]) \n     table . append ( col )  table_sorted   =   sorted ( table ,   key   =   itemgetter ( 2 ),   reverse = True )  # write sorted table to an output file  for   row   in   table_sorted : \n     row   =   [ str ( x )   for   x   in   row ] \n     output_file . write ( \" \\t \" . join ( row )   +   ' \\n ' )  input_file . close ()  output_file . close ()    Sort a tuple by converting it to a list   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # sort a tuple  data   =   ( 1 ,   4 ,   5 ,   3 ,   8 ,   9 ,   2 ,   6 ,   8 ,   9 ,   30 )  list_data   =   list ( data )  list_data . sort ()  new_tup   =   tuple ( data )  print   new_tup  # sort a tuple using the sorted() built-in function  new_tup   =   tuple ( sorted ( data ))  print   new_tup    Both outputs:  1\n2 ( 1 ,   4 ,   5 ,   3 ,   8 ,   9 ,   2 ,   6 ,   8 ,   9 ,   30 )  ( 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   8 ,   8 ,   9 ,   9 ,   30 )    Convert a dictionary to a sorted list   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 data   =   { 1 :   'a' ,   2 :   'b' ,   4 :   'd' ,   3 :   'c' , \n         5 :   't' ,   6 :   'm' ,   36 :   'z' }  # create a list of keys and go through them one by one  keys   =   list ( data )  keys . sort ()  for   key   in   keys : \n     print   key ,   data [ key ]  # sort keys using the sorted() built-in function  for   key   in   sorted ( data ): \n     print   key ,   data [ key ]    Output:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z\n1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z   Sort strings by their length  lamda, function   Use a  lambda  function and replace  itemgetter() .   1\n2\n3\n4 data   =   [ 'ASDF' ,   'SDFSADGSAG' ,   'SDFSD' ,   'GSGDGG' ]  new_data   =   sorted ( data ,   key   =   lambda   x :   len ( x ))  print   new_data    1\n2\n3\n4 data   =   [ 'ASDF' ,   'SDFSADGSAG' ,   'SDFSD' ,   'GSGDGG' ]  new_data   =   sorted ( data ,   key   =   lambda   col :   col [ 1 ])   # alternative  print   new_data    Same output:  1 [ 'ASDF' ,   'SDFSD' ,   'GSGDGG' ,   'SDFSADGSAG' ]    Sort a table by seven columns in one operation   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 from   operator   import   itemgetter  # read table  in_file   =   open ( \"random_distribution.tsv\" )  table   =   []  for   line   in   in_file : \n     columns   =   line . split () \n     columns   =   [ float ( x )   for   x   in   columns ] \n     table . append ( columns )  table_sorted   =   sorted ( table ,   key = itemgetter ( 0 ,   1 ,   2 ,   3 ,   4 ,   5 ,   6 ))  print   table_sorted    Output (first 3 lines only):  1\n2\n3\n4\n5\n6 [  [ 6041.0 ,   87.0 ,   0.0144015891409 ,   44.0 ,   0.00728356232412 ,   213.0 ,   0.035259063069 ],  [ 6042.0 ,   121.0 ,   0.0200264812976 ,   35.0 ,   0.00579278384641 ,   262.0 ,   0.0433631247931 ],  [ 6044.0 ,   113.0 ,   0.0186962276638 ,   67.0 ,   0.0110853739246 ,   266.0 ,   0.0440105890139 ],  ...  ]    Sort entries in a tabular BLAST output file in reverse order   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 from   operator   import   itemgetter  input_file   =   open ( \"BlastOut.csv\" )  output_file   =   open ( \"BlastOutSorted.csv\" , \"w\" )  # read BLAST output table  table   =   []  for   line   in   input_file : \n     col   =   line . split ( ',' ) \n     col [ 2 ]   =   float ( col [ 2 ]) \n     table . append ( col )  table_sorted   =   sorted ( table ,   key = itemgetter ( 2 ),   reverse = True )  # write sorted table to an output file  for   row   in   table_sorted : \n     row   =   [ str ( x )   for   x   in   row ] \n     output_file . write ( \" \\t \" . join ( row )   +   ' \\n ' )  input_file . close ()  output_file . close ()    Sort entries in a comma separated file by two columns   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 from   operator   import   itemgetter  input_file   =   open ( \"PDBhaemoglobinReport.csv\" )  output_file   =   open ( \"PDBhaemoglobinSorted.csv\" , \"w\" )  table   =   []  header   =   input_file . readline ()  for   line   in   input_file : \n     col   =   line . split ( ',' ) \n     col [ 3 ]   =   float ( col [ 3 ][ 1 : - 1 ]) \n     col [ 4 ]   =   int ( col [ 4 ][ 1 : - 2 ]) \n     table . append ( col )  table_sorted   =   sorted ( table ,   key = itemgetter ( 3 ,   4 ))  output_file . write ( header   +   ' \\t ' )  for   row   in   table_sorted : \n     row   =   [ str ( x )   for   x   in   row ] \n     output_file . write ( \" \\t \" . join ( row )   +   ' \\n ' )  input_file . close ()  output_file . close ()",
            "title": "Chapter 8, Sorting Data"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-9-pattern-matching-and-text-mining",
            "text": "Find a sequence pattern in a sequence  regex, regular expression   re  package.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 import   re  # define a string with occurrences of regex:  seq   =   'VSVLTMFRYAGWLDRLYMLVGTQLAAIIHGVALPLMMLI'  # compile a pattern and assign it to a variable  pattern   =   re . compile ( '[ST]Q' )  # search for the pattern in the string  match   =   pattern . search ( seq )  if   match : \n     # print the first match along the sequence with the group() method \n     # 4 characters before and after the pattern \n     print   ' %10s '   % ( seq [ match . start ()   -   4 : match . end ()   +   4 ]) \n     print   ' %6s '   %   match . group ()  else : \n     print   \"no match\"    Output:  1\n2 MLVGTQLAAI\n    TQ   re  methods   group() ; return the matching subgroup.  span() ; return a tuple containing the starting and ending position of the match.  start() ; return the starting position.  end() ; return the ending position.  search() ; find the  first  occurence within the string.  match() ; attempt to match a pattern to a string. If the pattern is within the string, it will not match it. It will find \u2018S\u2019 in \u2018ST\u2019, but not in \u2018TST\u2019.   findall() ; return a list containing  all  the matching substrings.  finditer() ; find  all  the match objects corresponding to the regex matches and returns them in the form of an iterator.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 import   re  pattern   =   re . compile ( 'R.[ST][^P]' )  seq   =   'RQSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'  # findall returns a list of all matches  matches   =   pattern . findall ( seq )  print   matches  # finditer returns an iterator of match objects  match_iter   =   pattern . finditer ( seq )  for   match   in   match_iter : \n     print   match . group (),   match . span (),   match . start (),   match . end ()    Ouput:  1\n2\n3\n4 [ 'RQSA' ,   'RRSL' ,   'RPSK' ]  RQSA   ( 0 ,   4 )   0   4  RRSL   ( 18 ,   22 )   18   22  RPSK   ( 40 ,   44 )   40   44    More  re  methods   Divide regex in subgroups, each matching a different component of interest.  (.) ; delimite a group.  R(.)[ST][^P] ; stand for \u2018R\u2019, \u2018any character\u2019, pattern \u2018ST\u2019, any character different from \u2018P\u2019.  The \u2018any character\u2019 is also a subgroup.  What ever is found between  R  and  [ST][^P]  is a subgroup.    R(.{0,3})[ST][^P] ; add a `{0,3}.  This qualifier or quantifiers means that at least 0 and at most 3 repetitions of \u2018R\u2019.    group() ; always return the complete matching substring (0 for no subgroup).  group(#) ; return subgroups numbered from left to right in increasing order (subgroup #).   Find multiple patterns in a search string   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 import   re  seq   =   'QSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'  pattern1   =   re . compile ( 'R(.)[ST][^P]' )  match1   =   pattern1 . search ( seq )  print   match1 . group ()  print   match1 . group ( 1 )  pattern2   =   re . compile ( 'R(.{0,3})[ST][^P]' )  match2   =   pattern2 . search ( seq )  print   match2 . group ()  print   match2 . group ( 1 )    Output:  1\n2\n3\n4 RRSL\nR\nRRRSL\nRR   Another example with two subgroups   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 import   re  seq   =   'zzabcdzz'  pattern   =   re . compile ( '(a(b)c)d' )  match   =   pattern . search ( seq )  print   match . group ( 0 )  print   match . group ( 1 )  print   match . group ( 2 )  print   match . groups ()     groups() ; return a tuple with the substrings corresponding to all subgroups.   Output:  1\n2\n3\n4 abcd  abc  b  ( 'abc' ,   'b' )    Assign  names to subgroup:  ?P<w1>  and  ?P<w2>  1\n2\n3\n4\n5\n6\n7\n8\n9 import   re  seq   =   'zzabcdzz'  pattern   =   re . compile ( '(?P<w1>a(?P<w2>b)c)d' )  match   =   pattern . search ( seq )  print   match . group ( 0 )  print   match . group ( 'w1' )  print   match . group ( 'w2' )    Ouput:  1\n2\n3 abcd\nabc\nb   More  re  methods   splits(s) ; split the string  s  at the matches of a regex.  sub(r, s, [c]) ; return a new string  s  where nonoverlapping occurrences of a given pattern in the string are all replaced with the value of  r .  c , an optional number, stands for the maximum numbers of occurences.  subn(r, s, [c]) ; do what  sub()  does, but returns a tuple of two elements; the first element is the new string (as with  sub(r, s, [c]) ) and the second is the number of replacements.   Split text and replace separators with a pattern   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 import   re  separator   =   re . compile ( '\\|' )  # split  annotation   =   'ATOM:CA|RES:ALA|CHAIN:B|NUMRES:166'  columns   =   separator . split ( annotation )  print   columns  # replace  new_annotation   =   separator . sub ( '@' ,   annotation )  print   \"replace all |:\"  print   new_annotation  new_annotation2   =   separator . sub ( '@' ,   annotation ,   2 )  print   \"replace 2 |:\"  print   new_annotation2  new_annotation3   =   separator . subn ( '@' ,   annotation )  print   \"replace all |:\"  print   new_annotation3  new_annotation4   =   separator . subn ( '@' ,   annotation ,   2 )  print   \"replace 2 |:\"  print   new_annotation4    Output:  1\n2\n3\n4\n5\n6\n7\n8\n9 [ 'ATOM:CA' ,   'RES:ALA' ,   'CHAIN:B' ,   'NUMRES:166' ]  replace   all   | :  ATOM : CA @RES : ALA @CHAIN : B @NUMRES : 166  replace   2   | :  ATOM : CA @RES : ALA @CHAIN : B | NUMRES : 166  replace   all   | :  ( 'ATOM:CA@RES:ALA@CHAIN:B@NUMRES:166' ,   3 )  replace   2   | :  ( 'ATOM:CA@RES:ALA@CHAIN:B|NUMRES:166' ,   2 )    Find transcription factor binding sites   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 import   re  genome_seq   =   open ( 'genome.txt' ) . read ()  # read transcription factor binding site patterns  sites   =   []  for   line   in   open ( 'TFBS.txt' ): \n     fields   =   line . split () \n     tf   =   fields [ 0 ] \n     site   =   fields [ 1 ] \n     sites . append (( tf ,   site ))  # match all TF's to the genome and print matches  for   tf ,   site   in   sites : \n     tfbs_regexp   =   re . compile ( site ) \n     all_matches   =   tfbs_regexp . findall ( genome_seq ) \n     matches   =   tfbs_regexp . finditer ( genome_seq ) \n     if   all_matches : \n         print   tf ,   ':' \n         for   tfbs   in   matches : \n             print   ' \\t ' ,   tfbs . group (),   tfbs . start (),   tfbs . end ()    Parse abstracts from PubMed HTML pages   The script opens the HTML webpage and parses it in order to selectively fetch some parts of it.  Extract the title and the abstract text.  The title of the paper is enclosed between  <h1>  and  </h1> .  Whereas the text of the abstract is enclosed between  <h3> Abstract </h3><div   class =   \"\" ><p>  and  </p> .  The paper.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 import   urllib2  import   re  pmid   =   '18235848'  url   =   'http://www.ncbi.nlm.nih.gov/pubmed?term= %s '   %   pmid  handler   =   urllib2 . urlopen ( url )  html   =   handler . read ()  title_regexp   =   re . compile ( '<h1>.{5,400}</h1>' )  title_text   =   title_regexp . search ( html )  abstract_regexp   =   re . compile ( '<AbstractText>.{20,3000}</AbstractText>' )  abstract_text   =   abstract_regexp . search ( html )  print   'TITLE:' ,   title_text . group ()   print   'ABSTRACT:' ,   abstract_text . group ()    Output:  1\n2 TITLE:  < h1 > Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade. </ h1 > \nABSTRACT:  < AbstractText > Schistosomiasis is a tropical disease associated with high morbidity and mortality, currently affecting over 200 million people worldwide. Praziquantel is the only drug used to treat the disease, and with its increased use the probability of developing drug resistance has grown significantly. The Schistosoma parasites can survive for up to decades in the human host due in part to a unique set of antioxidant enzymes that continuously degrade the reactive oxygen species produced by the host's innate immune response. Two principal components of this defense system have been recently identified in S. mansoni as thioredoxin/glutathione reductase (TGR) and peroxiredoxin (Prx) and as such these enzymes present attractive new targets for anti-schistosomiasis drug development. Inhibition of TGR/Prx activity was screened in a dual-enzyme format with reducing equivalents being transferred from NADPH to glutathione via a TGR-catalyzed reaction and then to hydrogen peroxide via a Prx-catalyzed step. A fully automated quantitative high-throughput (qHTS) experiment was performed against a collection of 71,028 compounds tested as 7- to 15-point concentration series at 5 microL reaction volume in 1536-well plate format. In order to generate a robust data set and to minimize the effect of compound autofluorescence, apparent reaction rates derived from a kinetic read were utilized instead of end-point measurements. Actives identified from the screen, along with previously untested analogues, were subjected to confirmatory experiments using the screening assay and subsequently against the individual targets in secondary assays. Several novel active series were identified which inhibited TGR at a range of potencies, with IC(50)s ranging from micromolar to the assay response limit ( approximately 25 nM). This is, to our knowledge, the first report of a large-scale HTS to identify lead compounds for a helminthic disease, and provides a paradigm that can be used to jump-start development of novel therapeutics for other neglected tropical diseases. </ AbstractText >    Search for keywords in a series of PubMed abstracts   This example can be applied to perform very simple text mining and can be compared to the \u201cfind\u201d tool in Microsoft Word.  It might stop on the first occurence.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 import   urllib2  import   re  # word to be searched  word_regexp   =   re . compile ( 'schistosoma' )  # list of PMIDs where we want to search the word  pmids   =   [ '18235848' ,   '22607149' ,   '22405002' ,   '21630672' ]  for   pmid   in   pmids : \n     url   =   'http://www.ncbi.nlm.nih.gov/pubmed?term='   +   pmid \n     handler   =   urllib2 . urlopen ( url ) \n     html   =   handler . read () \n     title_regexp   =   re . compile ( '<h1>.{5,400}</h1>' ) \n     title   =   title_regexp . search ( html ) \n     title   =   title . group ()  \n     abstract_regexp   =   re . compile ( '<AbstractText>.{20,3000}</AbstractText>' ) \n     abstract   =   abstract_regexp . search ( html ) \n     abstract   =   abstract . group () \n     word   =   word_regexp . search ( abstract ,   re . IGNORECASE ) \n     if   word : \n         # display title and where the keyword was found \n         print   title \n         print   word . group (),   word . start (),   word . end ()     Circumvent the problem with the  finditer()  method.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 import   urllib2  import   re  # word to be searched  word_regexp   =   re . compile ( 'schistosoma' )  # list of PMIDs where we want to search the word  pmids   =   [ '18235848' ,   '22607149' ,   '22405002' ,   '21630672' ]  for   pmid   in   pmids : \n     url   =   'http://www.ncbi.nlm.nih.gov/pubmed?term='   +   pmid \n     handler   =   urllib2 . urlopen ( url ) \n     html   =   handler . read () \n     title_regexp   =   re . compile ( '<h1>.{5,400}</h1>' ) \n     title   =   title_regexp . search ( html ) \n     title   =   title . group ()  \n     abstract_regexp   =   re . compile ( '<AbstractText>.{20,3000}</AbstractText>' ) \n     abstract   =   abstract_regexp . search ( html ) \n     abstract   =   abstract . group () \n     words   =   word_regexp . finditer ( abstract ) \n     if   words : \n         # display title and where the keyword was found \n         print   title \n         for   word   in   words : \n             print   word . group (),   word . start (),   word . end ()    Output:  1\n2\n3\n4 < h1 > Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade. </ h1 >  < h1 > The redox biology of schistosome parasites and applications for drug development. </ h1 >  < h1 > Moonlighting by different stressors: crystal structure of the chaperone species of a 2-Cys peroxiredoxin. </ h1 >  < h1 > Investigations of the catalytic mechanism of thioredoxin glutathione reductase from Schistosoma mansoni. </ h1 >    More  re  methods   findall() ; look for all (non-overlapping) occurrences of pattern in string; return a list of matches.  finditer() ; same as above except returns an iterator instead of a list; for each match, the iterator returns a match object; it is adapted for loops!  | ;  \u2018OR\u2019.  $ ; indicate that a match exists in the string only if the pattern is in the last position of the string.  ^ ; indicate that a match exists in the string only if the pattern is in the first position of the string.   Python Regex, Characters and Metacharaters",
            "title": "Chapter 9, Pattern Matching and Text Mining"
        },
        {
            "location": "/Managing Your Biological Data with Python/#part-3-modular-programming",
            "text": "",
            "title": "Part 3, Modular Programming"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-10-divide-a-program-into-functions",
            "text": "Built-in functions  length, total, sum, range   len() .  sum() .  range(n, m, step) ; from n to m-1, n = 0 by default.  xrange(n, m, step) ; better suited for big numbers.   Define functions  docstring, docstrings   The documentation is retrieved with the  __doc__  attribute: type  addition.__doc__ .   1\n2\n3\n4\n5\n6\n7\n8 def   addition ( arg1 ,   arg2 ): \n     '''      documentation: calculates the sum of two numbers      ''' \n     result   =   arg1   +   arg2 \n     return   result  print   addition ( 1 , 1 )    Lambda functions   Small anonymous functions; they are not declared using  def .  They do not contain return statement.  They can be defined in an argument in a function (useful).  There are nameless.   1\n2\n3\n4 def   f ( x ): \n     return   x   **   2  print   f ( 8 )    vs  1\n2\n3 g   =   lambda   x :   x   **   2  print   g ( 8 )    or  1 ( lambda   x :   x   **   2 )( 8 )     Use a  lambda  function as an argument of a built-in function:   1\n2\n3\n4 data   =   [ 'ASDF' ,   'SDFSADGSAG' ,   'SDFSD' ,   'GSGDGG' ]  new_data   =   sorted ( data ,   key   =   lambda   x :   len ( x ))  print   new_data    Output:  1 [ 'ASDF' ,   'SDFSD' ,   'GSGDGG' ,   'SDFSADGSAG' ]    Function Arguments   required arguments.  keyword arguments.  default arguments.  variable-length arguments.   1. Required Arguments  1\n2\n3\n4 def   print_funct ( num ,   seq ): \n     print   num ,   seq  print_funct ( 10 ,   \"ABC\" )    Output:  1 10   ABC    2. Keyword Arguments  1\n2\n3\n4 def   print_funct ( num ,   seq ): \n     print   num ,   seq  print_funct ( seq   =   \"ABC\" ,   num   =   10 )    Output:  1 10   ABC    3. Default Arguments  sequence   The argument is given by default; but can be overwritten!   1\n2\n3\n4\n5 def   print_funct ( num ,   seq   =   \"A\" ): \n     print   num ,   seq  print_funct ( 10 ,   \"ABC\" )  print_funct ( 10 )    Output:  1\n2 10   ABC  10   A    4. Variable-Length Arguments  argument, list, tuple, dictionary   Flexibility of providing any tuple.   1\n2\n3\n4\n5\n6 def   print_args ( * args ): \n     print   args  print_args ( 1 ,   2 ,   3 ,   4 ,   5 )  print_args ( 'Hi' )  print_args ( 100 ,   200 ,   \"ABC\" )    Output:  1\n2\n3 ( 1 ,   2 ,   3 ,   4 ,   5 )  ( 'Hi' )  ( 100 ,   200 ,   'ABC' )     Provide both the keys and values for a returned dictionary.   1\n2\n3\n4 def   print_args2 ( ** args ): \n     print   args  print_args2 ( num   =   100 ,   num2   =   200 ,   seq   =   \"ABC\" )    Output:  1 { 'num' :   100 ,   'seq' :   'ABC, ' num2 ': 200}    Convert a string into a tuple or vice-versa   struct  package.  In the format,  s  stands for string,  3s  stands for a three-character string.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 import   struct  # pack() method; creates a string  format   =   '2s1s1s1s1s'  group   =   struct . pack ( format ,   '10' ,   '2' ,   '3' ,   '4' ,   '5' )  print   group  # unpack() method; parses the string to a tuple  format   =   '1s2s1s1s'  line   =   '12345'  col   =   struct . unpack ( format ,   line )  print   col  # calcsize() returns the number of characters  # in a given format string  format   =   '30s30s20s1s'  print   struct . calcsize ( format )    Output:  1\n2\n3 102345  ( '1' ,   '23' ,   '4' ,   '5' )  81     Then, convert the tuple to a list if needed.   Function to calculate distance between two coordinates  power   math  package.  pow(x, y)  replaces  x ** y .    distance  package; geometric calculations.  calc-dist() .      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 from   math   import   sqrt  def   calc_dist ( p1 ,   p2 ): \n     '''returns the pythagorian distance between two 3D points''' \n     dx   =   p1 [ 0 ]   -   p2 [ 0 ] \n     dy   =   p1 [ 1 ]   -   p2 [ 1 ] \n     dz   =   p1 [ 2 ]   -   p2 [ 2 ] \n     distsq   =   pow ( dx ,   2 )   +   pow ( dy ,   2 )   +   pow ( dz ,   2 ) \n     distance   =   sqrt ( distsq ) \n     return   distance  print   calc_dist ([ 3.0 ,   3.0 ,   3.0 ],   [ 9.0 ,   9.0 ,   9.0 ])    Output:  1 10.3923048454",
            "title": "Chapter 10, Divide a Program into Functions"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-11-managing-complexity-with-classes",
            "text": "Classes   Define a Class:  class   Protein .  Add docstrings.  The constructor  __init__()  is a special function that defines what kinds of data your class should contain and enables the creation of instances. Add a docstring.  One class can have many instances.  lys = Protein('lysozyme')  is an instance of  class   Protein .  Create a class function; a class function works like a method.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 class   Protein : \n     '''Class storing protein names''' \n\n     def   __init__ ( self ,   name ): \n         '''Sets the name of a protein''' \n         self . name   =   name \n\n     def   write ( self ): \n         '''Writes protein name to the screen.''' \n         print   'I am '   +   self . name  lys   =   Protein ( 'lysozyme' )  myo   =   Protein ( 'myoglobin' )  print   \"Docstrings:\"  print   Protein . __doc__  print   Protein . __init__ . __doc__  print   Protein . write . __doc__  print   \"\"  print   lys . name  print   myo . name  lys . write ()   # a class function works like a method  myo . write ()    Output:  1\n2\n3\n4\n5\n6\n7\n8\n9 Docstrings :  Class   storing   protein   names  Sets   the   name   of   a   protein  Writes   protein   name   to   the   screen .  lysozyme  myoglobin  I   am   lysozyme  I   am   myoglobin    Printing a object created from a class   Printing an object from a class is not very informative.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 class   Pea : \n\n     def   __init__ ( self ,   genotype ): \n         self . genotype   =   genotype  class   PeaStrain : \n\n     def   __init__ ( self ,   peas ): \n         self . peas   =   peas  yellow   =   Pea ( 'GG' )  green   =   Pea ( 'gg' )  strain   =   PeaStrain ([ yellow ,   green ])  print   Pea  print   PeaStrain  print   Pea . __init__  print   PeaStrain . __init__  print   yellow  print   green  print   strain    Output:  1\n2\n3\n4\n5\n6\n7\n8 __main__ . Pea  __main__ . PeaStrain  < unbound   method   Pea . __init__ >  < unbound   method   PeaStrain . __init__ >  < __main__ . Pea   instance   at   0x0000000001DC6748 >  < __main__ . Pea   instance   at   0x0000000001DC6748 >  < __main__ . Pea   instance   at   0x000000000216BE08 >  < __main__ . PeaStrain   instance   at   0x000000000216BE48 >     __repr__  fixes this problem. The  __repr__  method takes no parameters except self.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 class   Pea : \n\n     def   __init__ ( self ,   genotype ): \n         self . genotype   =   genotype \n\n     def   __repr__ ( self ): \n         return   'genotype: [ %s ]'   %   ( self . genotype )  class   PeaStrain : \n\n     def   __init__ ( self ,   peas ): \n         self . peas   =   peas \n\n     def   __repr__ ( self ): \n         return   'strain with  %i  peas'   %   ( len ( self . peas ))  yellow   =   Pea ( 'GG' )  green   =   Pea ( 'gg' )  strain   =   PeaStrain ([ yellow ,   green ])  print   Pea  print   PeaStrain  print   Pea . __init__  print   PeaStrain . __init__  print   yellow  print   repr ( yellow )  print   repr ( green )  print   repr ( strain )    New output:  1\n2\n3\n4\n5\n6\n7\n8 __main__ . Pea  __main__ . PeaStrain  < unbound   method   Pea . __init__ >  < unbound   method   PeaStrain . __init__ >  genotype :   [ GG ]  genotype :   [ GG ]  genotype :   [ gg ]  strain   with   2   peas      No difference between  print yellow  and  print repr(yellow) .    Objects\u2019 predefined class attributes:   __doc__ : the docstring.  __dict__ : a list of attributes.  __name__ : the name of the object.  __bases__ : the object inherits from what object. For example, above, the PeaStrain class inherits from the Pea class. Classes (subclasses) can inherit from other classes \nand extend their functionality.  __module__ : the name of the module in which this class was defined.  __main__  means the object is in the current module.      A python script can be imported just like a package:   import   Protein .  from   Protein   import   write .  import   math .  from   math   import   sqrt .    Synonyms: packages, library, module, script, etc.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 class   Pea : \n     '''docstring 1''' \n\n     def   __init__ ( self ,   genotype ): \n         self . genotype   =   genotype \n\n     def   __repr__ ( self ): \n         return   'genotype: [ %s ]'   %   ( self . genotype )  yellow   =   Pea ( 'GG' )  print   yellow  print   Pea . __doc__  print   Pea . __dict__  print   Pea . __name__  print   Pea . __bases__  print   Pea . __module__  print   \"\"  class   Peaclone ( Pea ): \n     '''docstring 2'''  blue   =   Peaclone ( 'AA' )  print   blue  print   Peaclone . __doc__  print   Peaclone . __dict__  print   Peaclone . __name__  print   Peaclone . __bases__  print   Peaclone . __module__    Output:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 genotype :   [ GG ]  docstring   1  { '__module__' :   '__main__' ,   '__doc__' :   'docstring 1' ,   '__init__' :   < function   __init__   at   0x000000000229FC18 > ,   '__repr__' :   < function   __repr__   at   0x000000000229FC88 > }  Pea  ()  __main__  genotype :   [ AA ]  docstring   2  { '__module__' :   '__main__' ,   '__doc__' :   'docstring 2' }  Peaclone  ( < class   __main__ . Pea   at   0x0000000001D3C828 > ,)  __main__     More attributes:  __del__ .  __getattr__ .  __setattr__ .  __delattr__ .",
            "title": "Chapter 11 Managing Complexity with Classes"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-12-debugging",
            "text": "bug   Kinds of errors:  Logical errors.  Syntax errors.  Runtime errors.     IDE (Eric, PyCharm, etc.) automate debugging.  1. Logical (semantic) errors   Results are wrong because the program does something different from what you had in mind.   2. Syntax errors   Wrong symbol, mispelling, wrong position in the code, etc..    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43 def   evaluate_data ( data ,   lower   =   100 ,   upper   =   300 ): \n     \"\"\"Analyze a two-column table. Counts data points in three bins.\"\"\" \n\n     smaller   =   0 \n     between   =   0 \n     bigger    =   0 \n\n     for   length   in   data : \n         if   length   <   lower : \n             smaller   =   smaller   +   1 \n         elif   lower   <   length   <   upper : \n             between   =   between   +   1 \n         elif   length   >   upper : \n             bigger   =   1 \n     return   smaller ,   between ,   bigger  def   read_data ( filename ): \n     \"\"\"Reads neuron lengths from a text file.\"\"\" \n\n     primary ,   secondry   =   [],   [] \n\n     for   line   in   open ( filename ): \n         category ,   length   =   line . split ( \" \\t \" ) \n         length   =   float ( length ) \n         if   category   ==   \"Primary\" \n             primary . append ( length ) \n         elif   category   ==   \"Secondary\" : \n             secondary . append ( length ) \n     return   primary ,   secondary  def   write_output ( filename ,   count_pri ,   count_sec ): \n     \"\"\"Writes counted values to a file.\"\"\" \n\n     output   =   open ( filename , \"w\" ) \n     output . write ( \"category      <100  100-300   >300 \\n \" ) \n     output . write ( \"Primary  :   %5i     %5i     %5i \\n \"   %   count_pri ) \n     output . write ( \"Secondary:   %5i     %5i     %5i \\n \"   %   count_sec ) \n     output . close ()  primary ,   secondary   =   read_data ( 'neuron_data.xls' )  count_pri   =   evaluate_data ( primary )  count_sec   =   evaluate_data ( secondary )  write_output_file ( 'results.txt'   ,   count_pri , count_sec )    Bug 1  1 if   category   ==   \"Primary\"     Cause:  SyntaxError :   invalid   syntax .  Fix:   1 if   category   ==   \"Primary\" :     Other common  SyntaxErrors :  EOL or End Of Line; an open quote somewhere without a matching closing quote.  TokenError ; an open parenthesis, but not a matching closing parenthesis.  etc.     Bug 2  1 write_output_file ( 'results.txt'   ,   count_pri , count_sec )     Cause:  NameError :   name   'write_output_file'   is   not   defined .  Fix:   1\n2\n3\n4\n5 file   =   open ( 'results.txt'   ,   'w' )  file . write ( str ( count_pri ))  file . write ( ' \\n ' )  file . write ( str ( count_sec ))  file . close ()    3. Runtime Error  IOError  1 primary ,   secondary   =   read_data ( 'neuron_data.xls' )     Cause:  IOError: [Errno21] No such file or directory: 'neuron_data.xls'  Fix: the file extention is .txt.  Other common bugs and causes:  Mispelled files, directory name.  Wrong website URL.  User without the permission or access.  The file is already opened.  Problem with the Internet connection.  Whitespace, uppercase, lowercase letters.  File in a different directory.  Expected date format.  etc.     NameError  1\n2\n3\n4 primary ,   secondry   =   [],   []  ...  ...  elif   category   ==   \"Secondary\" :     Cause:  NameError: 'secondary' is not defined . The \u2018name\u2019 was misspelled when called.  Fix: add the line  print dir()  before the errors occurs. It shows the list of variables that are known. In the above case, only  secondry  exits while  secondary  is called. Choose one.  Other common bugs and causes:  Unknown object name:  a name was not imported ( import   * ).  a name was not initialized (as in  counter = 0  for  counter += 1 ).       IndexError   Cause and fix: when  print data[3]  looks into  data = [1, 2, 3] , the list index is out of range.   KeyError  1\n2 spam   =   { 'cat' :   'Zophie' ,   'dog' :   'Basil' ,   'mouse' :   'Whiskers' }  print ( 'The name of my pet zebra is '   +   spam [ 'zebra' ])     Cause and fix: the key does not exist!   ImportError   Causes and fixes:  The imported module name is mispelled.  The imported module is located in a subdirectory without an  __init__.py  file.  Try adding import sys and print sys.path; you need to add the directory to the PYTHONPATH variable or to append it to the sys.path.  The imported module has a duplicate name (two functions with the same name; try working with classes to avoir that).     ValueError   Cause and fix: when an object is loaded with a wrong type to perform another operation; variable  range_a  should be a number for the loop  for a in range(range_a): , but a string is given instead.  Other common bugs and causes:  IndentationError :   unexpected   indent ,  IndentationError :   unindent   does   not   match   any   outer   indentation   level , and  IndentationError :   expected   an   indented   block .   TypeError   Cause and fix: an object does not support item assignment.   1\n2 spam   =   'I have a pet cat.'  spam [ 13 ]   =   'r'     Cause:  cannot convert implicitly an object.   1\n2 numEggs   =   12  print ( 'I have '   +   numEggs   +   ' eggs.' )     Fix:   1\n2 numEggs   =   12  print ( 'I have '   +   str ( numEggs )   +   ' eggs.' )     Cause:  an object is misinterpreted (for another object).   1\n2\n3 spam   =   [ 'cat' ,   'dog' ,   'mouse' ]  for   i   in   range ( spam ): \n     print ( spam [ i ])     Fix:  for i in spam: .   AttributeError   Cause and fix: apply the right method.   1\n2 spam   =   'THIS IS IN LOWERCASE.'  spam   =   spam . lowerr ()    UnboundLocalError   Cause and fix: a variable is referenced before assignment.   Countermeasures to prevent errors   Break down the code in parts; print to a file using  python code.py > output.txt .  Compare the input and output (print the input data, print the output data, create control points).  Add lots of  print  statements within the code as control points,  Use descriptive and explicit object names ( sequence_file  is better than  s_file ).  Start function with verbs ( read_sequence_file  is better than  seq_file ).  Add comments.  Avoid  import   * , but rather  from   math   import   pi .  Follow PEP8 and PEP20!  pylint  and  flake8  packages.  IDE (Eric, PyCharm, Spyder, etc.) automate debugging and easily execute  pylint  and  flake8 .   A note on  raw_input()  and  input()  python2, python3, py2, py3   In Python 2,  raw_input()  takes exactly what the user typed and passes it back as a string.  input()  takes the  raw_input()  and performs an  eval()  on it as well.  input()  expects a syntactically correct python statement where  raw_input()  does not.  The  eval()  function run the code within itself:   1\n2\n3\n4\n5 >>>   x   =   1  >>>   eval ( 'x + 1' )  2  >>>   eval ( 'x' )  1     In Python 3,  raw_input()  is renamed to  input()  and the old  input()  is removed. If you want to use the old  input() , you can do  eval(input()) .   Countermeasures to prevent errors: the Python debugger or  pdb   pdb  package.   1\n2\n3\n4 # on top of the code  import   pdb  pdb . set_trace ()     The code is executed line by line:  \u2018n\u2019 execute the next line.  \u2018s\u2019 execute the next line but does not descend into functions.  \u2018l\u2019 shows where in the code the program currently is.  \u2018c\u2019 continues execution normally.     Countermeasurea to prevent errors:  try, except  1\n2\n3\n4\n5\n6 try : \n     a   =   float ( raw_input ( \"Insert a number:\" )) \n     print   a  except   ValueError : \n     print   \"You haven't inserted a number. Please retry.\" \n     raise   SystemExit     else  is optional and only executed if no exception was generated.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 try : \n     filename   =   raw_input ( \"Insert a filename:\" ) \n     in_file   =   open ( filename )  except   IOError : \n     print   \"The filename  %s  has not been found.\"   %   filename \n     raise   SystemExit  else : \n     for   line   in   in_file : \n         print   line \n         in_file . close ()     Usually, exceptions are typos and wrong entries:  SyntaxError .  IOError .  NameError .  ValueError .    Rarely will we see:  IndexError .  KeyError .  ImportError .  TypeError .  AttributeError .  UnbounLocalError .",
            "title": "Chapter 12 Debugging"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-13-using-external-modules-the-python-interface-to-r",
            "text": "RPy2  package; bridge Python with R.   The R code:  1\n2\n3\n4\n5\n6\n7\n8 p  =   pi \nx  =   c ( 1 ,   2 ,   3 ,   4 ,   5 ,   6 ) \ny  =   seq ( 1 ,   10 ) \nm  =   matrix ( y ,  nrow  =   5 ) \nn  =   matrix ( y ,  ncol  =   5 ) \nf  =  read.table ( 'RandomDistribution.tsv' ,  sep  =   '\\t' ) \nf_matrix  =   matrix ( f ,  ncol  =   7 ) \nmean_first_col  =   mean ( f_mean [ 0 ])    The Python code:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   rpy2.reobjects   as   robjects  r   =   robjects . r  pi   =   r . pi  x   =   r . c ( 1 ,   2 ,   3 ,   4 ,   5 ,   6 )  y   =   r . seq ( 1 ,   10 )  m   =   r . matrix ( y ,   nrow   =   5 )  n   =   r . matrix ( y ,   ncol   =   5 )  f   =   r ( \"read.table('RandomDistribution.tsv', sep = ' \\t ')\" )  f_matrix   =   r . matrix ( f ,   ncol   =   7 )  mean_first_col   =   r . mean ( f_mean [ 0 ])   \n- Python is better suited to implement solutions by building GUIs or freezing the code. \n- Rpy2 is the best of both worlds:  \n    - R statistical analyses and data visualization. \n    - Python computation power with SciPy/NumPy/Pandas.  Calculate a mean value from a table file  1\n2\n3\n4\n5\n6\n7 import   rpy2.robjects   as   robjects  r   =   robjects . r  table   =   r ( \"read.table('RandomDistribution.tsv', sep = ' \\t ')\" )  matrix   =   r . matrix ( table ,   ncol   =   7 )  mean_first_col   =   r . mean ( matrix [ 0 ])  print   mean_first_col    Draw a histogram   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 import   rpy2.robjects   as   ro  from   rpy2.robjects.packages   import   importr  r   =   ro . r  table   =   r ( \"read.table('RandomDistribution.tsv',sep = ' \\t ')\" )  grdevices   =   importr ( 'grDevices' )  grdevices . png ( file   =   \"Plot.png\" ,   width   =   512 ,   height   =   512 )  r . plot ( table [ 1 ],   table [ 2 ],   xlab   =   \"x\" ,   ylab   =   \"y\" )  grdevices . dev_off ()  grdevices . png ( file = \"Histogram.png\" ,   width   =   512 ,   height   =   512 )  r . hist ( table [ 4 ],   xlab   =   'x' ,   main   =   'Distribution of values' )  grdevices . dev_off ()    Calculate a z-score and a p-value   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 import   rpy2.robjects   as   ro  r   =   ro . r  table   =   r ( \"read.table('RandomDistribution.tsv',sep = ' \\t ')\" )  m   =   r . mean ( table [ 2 ],   trim   =   0 ,   na_rm   =   'FALSE' )  sdev   =   r . sd ( table [ 2 ],   na_rm   =   'FALSE' )  value   =   0.01844  zscore   =   ( m [ 0 ]   -   value )   /   sdev [ 0 ]  print   zscore  x   =   r . abs ( zscore )  pvalue   =   r . pnorm ( - x [ 0 ])  print   pvalue [ 0 ]    Create an interactive plot and histogram from data in a file  1\n2\n3\n4\n5\n6 import   rpy2.robjects   as   robjects  r   =   robjects . r  table   =   r ( \"read.table('RandomDistribution.tsv', sep = ' \\t ')\" )  r . plot ( table [ 1 ],   table [ 2 ],   xlab   =   \"x\" ,   ylab   =   \"y\" )  r . hist ( table [ 4 ],   xlab   =   'x' ,   main   =   'Distribution of values' )    Create an interactive plot  1\n2\n3\n4 import   rpy2.robjects   as   ro  r   =   ro . r  r . plot ( r . pnorm ( 100 ),   xlab   =   \"y\" ,   ylab   =   \"y\" )    Conduct a chi-square test on data from a text file  1\n2\n3\n4\n5\n6\n7\n8\n9 import   rpy2.robjects   as   ro  r   =   ro . r  table   =   r ( \"read.table('Chi-square_input.txt', header = TRUE, sep = ' \\t ')\" )  print   r . names ( table )  cont_table   =   r . table ( table [ 1 ],   table [ 2 ])  chitest   =   r [ 'chisq.test' ]  print   chitest ( table [ 1 ],   table [ 2 ])",
            "title": "Chapter 13, Using External Modules, The Python Interface to R"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-14-building-program-pipelines",
            "text": "os  package.  sys  package.   Programs can work together with Python   Create path and file variables.  Create command line.  Execute commands from the command line (as if you did it with a mouse and keyboard) with  os.system .   REF: Appendix D.  1\n2\n3\n4\n5\n6\n7\n8 import   os  output_dir   =   '/home/RNA-seq/tophat_dir/'  output_file   =   'accepted_hits.txt'  command_line   =   'pgm -o  %s%s '   %   ( output_dir ,   output_file )  os . system ( command_line )    Command lines in Python   UNIX to Python:  UNIX  pwd ;  print os.getcwd() .  UNIX  ls ;  print os.listdir('.') .  UNIX  cd ;  os.chdir('../data/') .  UNIX  mkdir ;  os.mkdir() .  UNIX  rmdir ;  os.rmdir() .  and many more.     Pipelines   Pipeline are scripts connecting programs to each other (run two or more external programs from command lines).  A program that runs another program is a  wrapper .  Exchange filenames and data between programs.  sys.argv ; Python program sorted parameters.  import   sys ; access or print them.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import   sys  import   os  sys . path . append ( '/home/RNA-seq/' )  from   pathvariables   import   tophat_dir ,   index_dir  if   os . path . exists ( tophat_dir )   and   os . path . exists ( index_dir ): \n     os . system ( 'tophat -o '   +   tophat_dir   +   ' '   +   index_dir   +   'sample.txt' )  else : \n     print   \"You have to create tophat and/or index directories before running your wrapper\"     One problem with pipelines is lagging.   The system call of the second program should occur when the execution of the first program has finished, especially if the second one uses as input the output of the first one.  Use subprocesses, such as  os.popen()  or  subprocess.call() , to wait for the command to complete and return a value corresponding to the program exit status (0 for success, 256 for failure)  A more robust trick is to insert an action and verify its success after a system call and before the subsequent system call.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 import   sys  import   os  from   pathvariables   import   tophat_dir ,   index_dir ,   cufflinks_dir  sys . path . append ( '/home/RNA-seq/' )  from   pathvariables   import   tophat_dir ,   index_dir ,   cufflinks_dir  # the tophat program crates an output file  os . system ( 'tophat -o '   +   tophat_dir   +   ' '   +   index_dir   +   'sample.txt' )  # here we don't know whether the tophat output file is comleted and available  # we open and close a dummy file, so the operating system catches up  lag_file   =   open ( 'dummy.txt, ' w ')  lag_file . write ( 'tophat completed' )  lag_file . close ()  # read the output file  if   os . path . exists ( '/home/RNA-seq/dummy.txt' ): \n     os . system ( 'cufflinks -o '   +   cufflinks_dir   +   ' '   +   tophat_dir   +   '/accepted_hits.txt' )    Attributes   print dir() ; Visualize attributes.  Some attributes are module-specific, such as locatime, whereas others refer to modules in general:  __file__ ; return the path of the module.  __doc__ ; return the module documentation, if present.  __name__ ; return the name of the imported file without the .py suffix if the module is imported and the string  '__main__'  is executed.  Execute  <statements>  only if the module is run from the command line and not imported by means of an import statement:       1\n2 if   __name__   ==   '__main__' : \n     < statements >    Working with files and directories   os.path  package.  os.path.split(filename) ; split a filename from the directory names.  os.path.exists(filename) ; verify if the file exists, return True or False.   Export the path   In Windows, add the path to the PATH environment variables.  In PowerShell:  $ env : PYTHONPATH   =   \"$env:PYTHONPATH;.\"    In UNIX, enter in the bash:  export PYTHONPATH=.  or  add PYTHONPATH=. .  In a Python code, add to the beginning of the script:   1\n2\n3 import   sys  sys . path . append ( '.' )   # '/var/www/'     Or with  sys.path.append('pathmodules/') .   Read files from directories  1\n2\n3\n4 import   os  for   filename   is   os . listdir ( 'data/' ): \n     os . system ( '<my_program> %s '   %   ( filename ))      os.remove('log.txt') ; remove files.    tempfile  package;  create temporary files.",
            "title": "Chapter 14, Building Program Pipelines"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-15-writing-good-programs",
            "text": "Priorities   Make it work.  Make it nice.  Make if fast.   Tips   Divide a programming project into smaller tasks.  What are the inputs?  What are the outputs?  What is between them?  Write smaller programs; split a program into functions and classes.  Analyze and run tests.  Adopt PEP.  Scaffold before writing a functional program:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 def   read_files ( directory ): \n     '''      Reads a...      ''' \n     pass  def   filter ( sequences ): \n     '''      Removes all...      ''' \n     pass  ...  if   __name   ==   '__main__' : \n     INPUT_DIR   =   'aaa/' \n     OUTPUT_FILE   =   'filtered.txt' \n     seq   =   read_files ( INPUT_DIR ) \n     filter ( seq ) \n     ...    Adopt PEP   Variables in functions in lowercase.  Constants in modules in uppercase.  A function name starts with a verb.  After each function, two empty lines.  After each logical chunks of long functions, one empty line.  Comment.  Keep lines shorter than 80 characters long.  Each class, function, and variable has a docstring; docstrings can be read with  print object.__doc__ .   Enforce PEP   pylint  package.  pylint  is a Python source code analyzer which looks for programming errors, helps enforcing a coding standard and sniffs for some code smells.  Download  an install pylint.  Or install it with  pip .  Doc  Run  pylint python_file.py .    flake8  package.  flake8  is a modular source code checker (a  wrapper ).  It works with  pep8 ,  pyflakes ,  pycodestyle , and so on.     Version controls   Use version control programs (Mercurial, git, SVN).  Use repository (GitHub, Bitbucket) to control program versions.  GitHub  Bitbucket  SourceForce  Gitlab  and others.     Before releasing (to a repository)   Create a directory with a concise name containing all the project.  Set a version number (0.1 or 1.0).  Write a README.TXT file with the name of the program, the author, contacts, numbers, emails, a version number, the program purpose in 50-100 words, how to use the program, simple command-line examples, the license (\u201cAll rights reserved\u201d, MIT, etc.)  Create a zip file out of the directory including the README.TXT file in addition to the unzipped directory.  Release the project on a repository (for example, with git, push the project to the repository).   Releasing a distribution   Release a distribution to a repository for others to download and install.    Freezing a program   Non-programmer would rather want an execuble program they can unzip and run.  Compile the code or freeze it!  cx_freeze  is a set of utilities that create standalone executables from python scripts for any platform or OS. \n    i. There are alternatives to \u2018cx_freeze\u2019 such as  bbfreeze .  pyinstaller  is a simpler alternative (it is not as flexible as  cx_freeze  but it can create single files).  distutils  is a Python package that provides support for building and installing additional modules (libraries or packages) into a Python installation. The new modules may be either 100%-pure Python, written in C, or coded in both Python and C.  distutils  autogenerates an install script. \n    i. Such distribution needs a  setup.py  file with the group of subdirectories and program files. \n    i.  py2exe  is an extension to the  distutils  package to create executable files on Windows. \n    i.  py2app  is an extension to the  distutils  packages to create executable files on OS X.  nuitka  is a Python compiler, compatible with CPython. \n    i. CPython is a source code interpreter with an interface with several languages, including C, in which one must explicitly write bindings in a language other than Python.  pypy  is an alternative to  nuitka .  Cython is a compiled language that generates CPython extension modules.  Jython does the same, but in Java.     Continuous improvement   A good program is never finished:  Create a baseline release.  Update and release new versions. Tell the users what is new.  Listen to users, improve on it.  Go on programming.     Software development   The Agile Manifesto.  Methodologies: Scrum, eXtreme Programming, etc.",
            "title": "Chapter 15, Writing Good Programs"
        },
        {
            "location": "/Managing Your Biological Data with Python/#part-4-data-visualization",
            "text": "",
            "title": "Part 4, Data Visualization"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-16-creating-scientific-diagrams",
            "text": "matplotlib  package.  Pillow  or  PIL  package.  Tip: install the entire SciPy Stack: (Python (2.x >= 2.6 or 3.x >= 3.2), NumPy (>= 1.6), SciPy library (>= 0.10), Matplotlib (>= 1.1) with dateutil and pytz, IPython (>= 0.13) with pyzmq and tornado, pandas (>= 0.8), Sympy (>= 0.7), nose (>= 1.1).  Matplotlib  depends on  Pillow  for reading and saving JPEG, BMP, and TIFF image files.  Matplotlib  requires MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are required for the animation module. Add  nose ,  mock , and Inkscape.   Draw a simple line plot   Provide  (x, y)  points.  figure() ; main function is  plot() .  savefig() ; save the plot in a file.  show() ; show the plot in a window.   1\n2\n3\n4\n5\n6\n7\n8\n9 from   pylab   import   figure ,   plot ,   savefig  xdata   =   [ 1 ,   2 ,   3 ,   4 ]  ydata   =   [ 1.25 ,   2.5 ,   5.0 ,   10.0 ]  figure ()  plot ( xdata ,   ydata )  savefig ( 'figure1.png' )    Result:   Plot a sine function   Generate  (x, y)  points; first the  x ; then generate the  y  with the  x .  plot()  with a line type  'kd'  and  linewidth = 1 .    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 from   pylab   import   figure ,   plot ,   text ,   axis ,   savefig  import   math  figure ()  xdata   =   [ 0.1   *   i   for   i   in   range ( 100 )]  ydata   =   [ math . sin ( j )   for   j   in   xdata ]  plot ( xdata ,   ydata ,   'kd' ,   linewidth   =   1 )  text ( 4.8 ,   0 ,   \"$y = sin(x)$\" ,   horizontalalignment   =   'center' ,   fontsize   =   20 )  axis ([ 0 ,   3   *   math . pi ,   - 1.2 ,   1.2 ])  savefig ( 'sinfunc.png' )    Result:   Draw a histogram   Provide the  (x, y)  points in lists, and the number of bins.  hist()  needs  data  points and  n_bins .  alpha  stands for the graph color transparency.  Add a title, labels, axes, and gridlines.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 from   pylab   import   figure ,   title ,   xlabel ,   ylabel ,   hist ,   axis ,   grid ,   savefig  data   =   [ 1 ,   1 ,   9 ,   1 ,   3 ,   5 ,   8 ,   2 ,   1 ,   5 ,   11 ,   8 ,   3 ,   4 ,   2 ,   5 ]  n_bins   =   5  figure ()  num ,   bins ,   patches   =   hist ( data ,   n_bins ,   normed   =   1.0 ,   histtype   =   'bar' ,   facecolor   =   'green' ,   alpha   =   0.75 )  title ( 'Histogram' )  xlabel ( 'value' )  ylabel ( 'frequency' )  axis ()  grid ( True )  savefig ( 'histogram.png' )    Result:   Draw a bar plot   count : two series,  x1  and  x2  with each four categories,  nucleotides .   Add a title, labels, axes and ticks to the axes, and a legend.  xticks(x1, nucleotides) ,  where the first element is the list of  x  points and the second element is the label variable.  legend()  takes the labels of all data sets that are plotted.  axis()  is set with a list [from left to right, bottom,  and top].    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 from   pylab   import   figure ,   title ,   xlabel ,   ylabel ,   xticks ,   bar ,   legend ,   axis ,   savefig  nucleotides   =   [ \"A\" ,   \"G\" ,   \"C\" ,   \"U\" ]  counts   =   [ \n     [ 606 ,   1024 ,   759 ,   398 ], \n     [ 762 ,   912 ,   639 ,   591 ], \n     ]  figure ()  title ( 'RNA nucleotides in the ribosome' )  xlabel ( 'RNA' )  ylabel ( 'base count' )  x1   =   [ 2.0 ,   4.0 ,   6.0 ,   8.0 ]  x2   =   [ x   -   0.5   for   x   in   x1 ]  xticks ( x1 ,   nucleotides )  bar ( x1 ,   counts [ 1 ],   width   =   0.5 ,   color   =   \"#cccccc\" ,   label   =   \"E.coli 23S\" )  bar ( x2 ,   counts [ 0 ],   width   =   0.5 ,   color   =   \"#808080\" ,   label   =   \"T.thermophilus 23S\" )  legend ()  axis ([ 1.0 ,   9.0 ,   0 ,   1200 ])  savefig ( 'barplot.png' )    Result:   Add error bars to a scatterplot or a bar chart   errorbar() .  bar() .    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 from   pylab   import   figure ,   errorbar ,   bar ,   savefig  figure ()  # scatterplot with error bars  x1   =   [ 0.1 ,   0.3 ,   0.5 ,   0.6 ,   0.7 ]  y1   =   [ 1 ,   5 ,   5 ,   10 ,   20 ]  err1   =   [ 3 ,   3 ,   3 ,   10 ,   12 ]  errorbar ( x1 ,   y1 ,   err1   ,   fmt   =   'ro' )  # barplot with error bars  x2   =   [ 1.1 ,   1.2 ,   1.3 ,   1.4 ,   1.5 ]  y2   =   [ 10 ,   15 ,   10 ,   15 ,   17 ]  err2   =   ( 2 ,   3 ,   4 ,   1 ,   2 )  width   =   0.05  bar ( x2 ,   y2 ,   width ,   color   =   'r' ,   yerr   =   err2 ,   ecolor   =   \"black\" )  savefig ( 'errorbars.png' )    Result:   Draw a pie chart with protruding slices   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 from   pylab   import   figure ,   title ,   pie ,   savefig  nucleotides   =   'G' ,   'C' ,   'A' ,   'U'  count   =   [ 1024 ,   759 ,   606 ,   398 ]  explode   =   [ 0.0 ,   0.0 ,   0.05 ,   0.05 ]  colors   =   [ \"#f0f0f0\" ,   \"#dddddd\" ,   \"#bbbbbb\" ,   \"#999999\" ]  def   get_percent ( value ): \n     '''Formats float values in pie slices to percent.''' \n     return   \" %4.1f%% \"   %   ( value )  figure ( 1 )  title ( 'nucleotides in 23S RNA from T.thermophilus' )  pie ( count ,   explode   =   explode ,   labels   =   nucleotides ,   shadow   =   True , \n     colors   =   colors ,   autopct   =   get_percent )  savefig ( 'piechart.png' ,   dpi   =   150 )    Result:    It is possible to use math symbols, subscripts, and superscripts in the strings:  xlabel('protein concentration [mM]') .  xlabel('protein concentration [$\\muM$]') .    It is possible to use placeholder for variables such as:  \"4.1f%%\" % (variable) .  \"2i%\" % (variable) .  etc.   The  %%  stands for percentage.    Change the image file resolution (dpi = 100 or 150 or 300 or 600) as in  savefig('chart.png', dpi=150) .  Colors are based on the PIL library.  PIL has 140 colors (X11 color names) such as:  'red' ,  'lightred' ,  'magenta' , etc.  in RGB, red is  (255, 0, 0) .  white is  (255, 255, 255)  or  '#ffffff' .  \u2018black\u2019 is  (0, 0, 0)  or  '#000000' .  etc.    The  X11 color names .",
            "title": "Chapter 16, Creating Scientific Diagrams"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-18-manipulating-images",
            "text": "Pillow  or  PIL  package.   Paste a small image into a big one  1\n2\n3\n4\n5\n6\n7 from   PIL   import   Image  image   =   Image . open ( 'color.png' ,   'r' )  label   =   Image . open ( 'label.png' ,   'r' )   # small legend  image . paste ( label ,   ( 40 ,   460 ))  image . save ( 'combined.png' )    Result:   Resizes a big image to a small one  1\n2\n3\n4\n5\n6 from   PIL   import   Image  image   =   Image . open ( 'big.png' )  small   =   image . resize (( 100 ,   100 ))  small . save ( 'small.png' )    Result:   Converts a color to a black/white image  1\n2\n3\n4\n5\n6\n7 from   PIL   import   Image  image   =   Image . open ( 'color.png' ,   'r' )  bw_image   =   Image . new ( 'LA' ,   image . size ,   ( 255 ,   255 ))  bw_image . paste ( image ,   ( 0 ,   0 ))  bw_image . save ( 'black_white.png' )    Result:   Diminishes the size of all .png files by half   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 from   PIL   import   Image  import   os  for   filename   in   os . listdir ( '.' ): \n     if   filename . endswith ( '.png' ): \n         im   =   Image . open ( filename ) \n         x   =   im . size [ 0 ]   /   2 \n         y   =   im . size [ 1 ]   /   2 \n         small   =   im . resize (( x ,   y )) \n         small . save ( 'small_' + filename )    For  os.listdir('.') , consult  Chapter 14, Building Program Pipelines, Command lines in Python .  Draw an image of a plasmid   Use constant variable:  PLASMID_LENGTH = 4361  is the total number of base pairs in the entire plastmid,  SIZE = (500, 500)  is the size of the entire image,  CENTER = (250, 250)  is the center point of the plasmid circle, the center of the image.  Create an image:  pBR322 = Image.new('RGB', SIZE, 'white') .  'RGB'  color scheme,  SIZE = (x, y)  size in pixels,  'white'  set the background color.  Draw object  pBR322 :  DRAW = ImageDraw.Draw(pBR322) .  The image object is now in object  DRAW .  Finally, save the object:  pBR322.save('plasmid_pBR322.png') .    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46 from   PIL   import   Image ,   ImageDraw  import   math  PLASMID_LENGTH   =   4361  SIZE   =   ( 500 ,   500 )  CENTER   =   ( 250 ,   250 )  pBR322   =   Image . new ( 'RGB' ,   SIZE ,   'white' )  DRAW   =   ImageDraw . Draw ( pBR322 )  def   get_angle ( bp ,   length = PLASMID_LENGTH ): \n     \"\"\"Converts base position into an angle.\"\"\" \n     return   bp   *   360   /   length  def   coord ( angle ,   center ,   radius ): \n     \"\"\"Return (x, y) coordinates of a point in a circle.\"\"\" \n     rad   =   math . radians ( 90   -   angle ) \n     x   =   int ( center [ 0 ]   +   math . sin ( rad )   *   radius ) \n     y   =   int ( center [ 1 ]   +   math . cos ( rad )   *   radius ) \n     return   x ,   y  def   draw_arrow_tip ( start ,   direction ,   color ): \n     \"\"\"Draws a triangle at the given start angle.\"\"\" \n     p1   =   coord ( start   +   direction ,   CENTER ,   185 ) \n     p2   =   coord ( start ,   CENTER ,   160 ) \n     p3   =   coord ( start ,   CENTER ,   210 ) \n     DRAW . polygon (( p1 ,   p2 ,   p3 ),   fill   =   color )  TET_START ,   TET_END   =   get_angle ( 88 ),   get_angle ( 1276 )  AMP_START ,   AMP_END   =   get_angle ( 3293 ),   get_angle ( 4153 )  ORI_START ,   ORI_END   =   get_angle ( 2519 ),   get_angle ( 3133 )  # drawing the plasmid  BOX   =   ( 50 ,   50 ,   450 ,   450 )  DRAW . pieslice ( BOX ,   0 ,   360 ,   fill   =   'gray' )  DRAW . pieslice ( BOX ,   TET_START ,   TET_END ,   fill   =   'blue' )  DRAW . pieslice ( BOX ,   AMP_START ,   AMP_END ,   fill   =   'orange' )  DRAW . pieslice ( BOX ,   ORI_START ,   ORI_END ,   fill   =   'darkmagenta' )  DRAW . pieslice (( 80 ,   80 ,   420 ,   420 ),   0 ,   360 ,   fill   =   'white' )  draw_arrow_tip ( TET_END ,   10 ,   'blue' )  draw_arrow_tip ( AMP_START ,   - 10 ,   'orange' )  draw_arrow_tip ( ORI_START ,   - 10 ,   'darkmagenta' )  pBR322 . save ( 'plasmid_pBR322.png' )    Result:   Drawings   Image extensions:  BMP; simple table of pixels.  PNG; preserves the color of every single pixel; can be partially transparent.  GIF; can be animated; similar to PNG.  JPG; compressed format, blurred.  TIF; bigger and more precise than PNG.    image = Image.open('color.png', 'r') ; read the object.  Write points:  point = (100, 100) ; with tuples (x, y); x pixels from the left border, y pixels from the top of the image.    Write rectangles  BOX = (100, 100, 150, 150) ; with tuple (x, y, x\u2019, y\u2019);  BOX  becomes a constant.  DRAW.rectangle(BOX, fill = 'lightblue', outline = 'black')    Draw circles inside \u2018guidelines\u2019 or a rectangle:  DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = 'grey') .  DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = (0, 0, 0)) .  DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = '#ffffff') .  BOX = (50, 50, 450, 450)  DRAW.pieslice(BOX, 0, 360, fill = 'grey', outline = 'black')  DRAW.pieslice(BOX, 7, 106, fill = 'blue')      Draw an arc:  DRAW.arc(BOX, 0, 360, fill = 'black')    Draw a polygon:  DRAW.polygon((point1, point2, point3) fill = 'lightblue', outline = 'blue')    Draw a line:  ECOR1 = angle(4359)  p1 = coord(ECOR1, CENTER, 160)  p1 = coord(ECOR1, CENTER, 210)  DRAW.line((p1, p2), fill = 'black', width = 3)    Rotate the image:  pBR322 = pBR322.rotate(45)    Add text:  DRAW.text((370, 240), \"EcoR1\", fill = \"black\")     Draw an image of a plasmid and label it   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50 from   PIL   import   Image ,   ImageDraw  import   math  PLASMID_LENGTH   =   4361  SIZE   =   ( 500 ,   500 )  CENTER   =   ( 250 ,   250 )  pBR322   =   Image . new ( 'RGB' ,   SIZE ,   'white' )  DRAW   =   ImageDraw . Draw ( pBR322 )  def   get_angle ( bp ,   length = PLASMID_LENGTH ): \n     \"\"\"Converts base position into an angle.\"\"\" \n     return   bp   *   360   /   length  def   coord ( angle ,   center ,   radius ): \n     \"\"\"Return (x, y) coordinates of a point in a circle.\"\"\" \n     rad   =   math . radians ( 90   -   angle ) \n     x   =   int ( center [ 0 ]   +   math . sin ( rad )   *   radius ) \n     y   =   int ( center [ 1 ]   +   math . cos ( rad )   *   radius ) \n     return   x ,   y  def   draw_arrow_tip ( start ,   direction ,   color ): \n     \"\"\"Draws a triangle at the given start angle.\"\"\" \n     p1   =   coord ( start   +   direction ,   CENTER ,   185 ) \n     p2   =   coord ( start ,   CENTER ,   160 ) \n     p3   =   coord ( start ,   CENTER ,   210 ) \n     DRAW . polygon (( p1 ,   p2 ,   p3 ),   fill   =   color )  TET_START ,   TET_END   =   get_angle ( 88 ),   get_angle ( 1276 )  AMP_START ,   AMP_END   =   get_angle ( 3293 ),   get_angle ( 4153 )  ORI_START ,   ORI_END   =   get_angle ( 2519 ),   get_angle ( 3133 )  # drawing the plasmid  BOX   =   ( 50 ,   50 ,   450 ,   450 )  DRAW . pieslice ( BOX ,   0 ,   360 ,   fill   =   'gray' )  DRAW . pieslice ( BOX ,   TET_START ,   TET_END ,   fill   =   'blue' )  DRAW . pieslice ( BOX ,   AMP_START ,   AMP_END ,   fill   =   'orange' )  DRAW . pieslice ( BOX ,   ORI_START ,   ORI_END ,   fill   =   'darkmagenta' )  DRAW . pieslice (( 80 ,   80 ,   420 ,   420 ),   0 ,   360 ,   fill   =   'white' )  draw_arrow_tip ( TET_END ,   10 ,   'blue' )  draw_arrow_tip ( AMP_START ,   - 10 ,   'orange' )  draw_arrow_tip ( ORI_START ,   - 10 ,   'darkmagenta' )  DRAW . text (( 150 ,   130 ),   \"ori\" ,   fill   =   ( 0 ,   0 ,   0 ))  DRAW . text (( 340 ,   130 ),   \"amp\" ,   fill   = ( 0 ,   0 ,   0 ))  DRAW . text (( 300 ,   380 ),   \"tet\" ,   fill   =   ( 0 ,   0 ,   0 ))  pBR322 . save ( 'plasmid_pBR322.png' )    Result:",
            "title": "Chapter 18, Manipulating Images"
        },
        {
            "location": "/Managing Your Biological Data with Python/#part-6-cookbook",
            "text": "",
            "title": "Part 6, Cookbook"
        },
        {
            "location": "/Managing Your Biological Data with Python/#recipe-2-reversing-and-randomizing-a-sequence",
            "text": "sort, reverse, random, probability, list, loop   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52 seq   =   'ABCDEFGHIJKLMNOPQRSTUVWXYZ'  print ( seq )  seq_list   =   list ( seq )  seq_list . reverse ()  rev_seq   =   '' . join ( seq_list )  print ( rev_seq )  print ( \"=\"   *   25 )  # reverse a sequence, using a loop  # rev_seq = ''  rev_seq   =   ''  for   s   in   reversed ( seq ): \n     rev_seq   =   rev_seq   +   s  print ( rev_seq )  print ( \"=\"   *   25 )  # reverse a sequence, using seq[start:end:step]  rev_seq   =   seq [: - 1 ]  print ( rev_seq )  print ( \"=\"   *   25 )  # mixing a sequence  import   random  ran_seq   =   random . sample ( seq ,   len ( seq ))  print ( ran_seq )  ran_seq   =   '' . join ( random . sample ( seq ,   len ( seq )))  print ( ran_seq )  ran_seq   =   '' . join ( random . sample ( seq ,   len ( seq ) - 10 ))  print ( ran_seq )  print ( \"=\"   *   25 )  # mixing a sequence (using random again)  ran_seq   =   '' . join ([ random . choice ( seq )  \\\n  for   x   in   range ( len ( seq ))])  print ( ran_seq )  print ( \"=\"   *   25 )  # shuffle a sequence (using random again)  data   =   list ( seq )  random . shuffle ( data )  shuffled_seq   =   data  print ( shuffled_seq )  shuffled_seq   =   '' . join ( data )  print ( shuffled_seq )    Ouput:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 ABCDEFGHIJKLMNOPQRSTUVWXYZ\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nABCDEFGHIJKLMNOPQRSTUVWXY\n=========================\n['F', 'J', 'I', 'L', 'O', 'R', 'U', 'C', 'A', 'V', 'Q', 'M', 'T', 'N', 'B', 'G', 'W', 'P', 'Y', 'H', 'D', 'S', 'Z', 'E', 'X', 'K']\nLKAZHTVFGQROUXIMYWESDPCBJN\nLXRDUVFHKGJZMIAB\n=========================\nRYYEYKWUGMYFYMUWWBOSZWSRMJ\n=========================\n['R', 'N', 'S', 'E', 'M', 'H', 'A', 'P', 'X', 'F', 'W', 'K', 'J', 'I', 'Y', 'T', 'Z', 'G', 'V', 'O', 'C', 'B', 'Q', 'D', 'L', 'U']\nRNSEMHAPXFWKJIYTZGVOCBQDLU",
            "title": "Recipe 2, Reversing and Randomizing a Sequence"
        },
        {
            "location": "/Managing Your Biological Data with Python/#recipe-3-creating-a-random-sequence-with-probabilities",
            "text": "random, list, generate, probability   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 import   random  nucleotides   =   list ( 'ACGT' )  dna   =   ''  while   len ( dna )   <   100 : \n     dna   +=   random . choice ( nucleotides )   # choose amoung the list, fetch 1 item  print ( dna )  print ( \"=\"   *   25 )  nucleotides   =   list ( 'ACGT' )  probs   =   { 'A' :   0.3 ,   'C' :   0.2 ,   'G' :   0.2 ,   'T' :   0.3 }   # sum of 1.0  assert   sum ( probs . values ())   ==   1.0  # or  # if sum(probs.values()) != 1.0:  #   raise Exception('Sum of probabilites is not 1.0!')  dna   =   ''  while   len ( dna )   <   100 : \n     nuc   =   random . choi",
            "title": "Recipe 3, Creating a Random Sequence with Probabilities"
        },
        {
            "location": "/Python for Education/",
            "text": "CONTENT\n\n\n2, Programming in Python\n\n\n2.5, Python Lists\n\n\n2.7, Input from the Keyboard\n\n\n2.11, Line joining\n\n\n2.14, More on Strings and Lists\n\n\nRecap from the Above (Snippets)\n\n\n2.15, Python Modules and Packages\n\n\n2.16, Files Input/Ouput\n\n\n2.17, Formatted Printing\n\n\n2.18, Exception Handling\n\n\n2.20, Writing GUI Programs\n\n\n2.21, Object-Oriented Programming in Python\n\n\n\n\n\n\n3, Arrays and Matrices\n\n\n3.1, The NumPy Module\n\n\n3.2, Vectorized Functions\n\n\n\n\n\n\n4, Data visualization\n\n\n4.1, The Matplotlib Module\n\n\n\n\n\n\n5, Type Setting Using \\LaTeX\\LaTeX\n\n\n6, Numerical Methods\n\n\n6.5, Finding Roots of an Equation\n\n\n6.6, System of Linear Equations\n\n\n6.7, Least Squares Fitting\n\n\n6.8, Interpolation\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and code snippets. IPython 2 & 3. From Inter University Accelerator Centre, 2010. Creative Commons.\n\n\n\n\n2, Programming in Python\n\u00b6\n\n\n2.5, Python Lists\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\na\n \n=\n \n'hello world'\n\n\n\n# extract, subset\n\n\nprint\n(\na\n[\n3\n:\n5\n])\n\n\nprint\n(\na\n[\n6\n:])\n\n\nprint\n(\na\n[:\n5\n])\n\n\n\n\n\n\n\n1\n2\n3\nlo\nworld\nhello\n\n\n\n\n\n\n1\n2\n3\n4\n5\na\n \n=\n \n[\n1\n,\n \n2\n]\n\n\n\nprint\n(\na\n)\n\n\nprint\n(\na\n \n*\n \n2\n)\n \n# double print\n\n\nprint\n(\na\n \n+\n \n[\n1\n,\n \n1\n])\n \n# concatenate\n\n\n\n\n\n\n\n1\n2\n3\n[1, 2]\n\n\n[1, 2, 1, 2]\n\n\n[1, 2, 1, 1]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nb\n \n=\n \n[\n1\n,\n2\n,\na\n]\n\n\nprint\n(\nb\n)\n \n# embed\n\n\n\nb\n[\n2\n]\n \n=\n \n3\n\n\nprint\n(\nb\n)\n \n# change a mutable from the above list\n\n\n\n# Output:\n\n\n\n\n\n\n\n1\n2\n[1, 2, [1, 2]]\n\n\n[1, 2, 3]\n\n\n\n\n\n\n\n2.7, Input from the Keyboard\n\u00b6\n\n\n\n\ninput\n for numeric data.\n\n\nraw_input\n for string data.\n\n\n\n\n1\n2\n3\n4\nx\n \n=\n \ninput\n(\n'Enter an integer (x): '\n)\n\n\ny\n \n=\n \ninput\n(\n'Enter another one (y): '\n)\n\n\n\nprint\n(\n'The sum is = '\n,\n \nx\n \n+\n \ny\n)\n \n# print as numeric, input\n\n\n\n\n\n\n\n1\n2\n3\nEnter an integer (x): 1\nEnter another one (y): 2\n('The sum is = ', 3)\n\n\n\n\n\n\n1\n2\n3\n4\nt\n \n=\n \nraw_input\n(\n'Enter an integer: '\n)\n\n\nu\n \n=\n \nraw_input\n(\n'Enter another one: '\n)\n\n\n\nprint\n(\n'The sum is = '\n,\n \nt\n \n+\n \nu\n)\n \n# print as string, raw input\n\n\n\n\n\n\n\n1\n2\n3\nEnter an integer: 2\nEnter another one: 3\n('The sum is = ', '23')\n\n\n\n\n\n\n1\n2\n3\n4\nv\n \n=\n \ninput\n(\n'Enter an integer: '\n)\n\n\nw\n \n=\n \ninput\n(\n'Enter another one: '\n)\n\n\n\nprint\n(\n'The sum is = '\n,\n \nstr\n(\nv\n)\n \n+\n \nstr\n(\nw\n))\n \n# print as string, input changes into a string\n\n\n\n\n\n\n\n1\n2\n3\nEnter an integer: 1\nEnter another one: 1\n('The sum is = ', '11')\n\n\n\n\n\n\n1\n2\n3\n4\ny1\n \n=\n \nraw_input\n(\n'Enter an integer: '\n)\n\n\ny2\n \n=\n \nraw_input\n(\n'Enter another one: '\n)\n\n\n\nprint\n(\n \n'The sum is = '\n,\n \nint\n(\ny1\n)\n \n+\n \nint\n(\ny2\n))\n \n# print as numeric, raw input changed into integer\n\n\n\n\n\n\n\n1\n2\n3\nEnter an integer: 2\nEnter another one: 2\n('The sum is = ', 4)\n\n\n\n\n\n\n1\n2\n3\n4\ny3\n \n=\n \nraw_input\n(\n'Enter an integer: '\n)\n\n\ny4\n \n=\n \nraw_input\n(\n'Enter another one: '\n)\n\n\n\nprint\n(\n \n'The sum is = '\n,\n \nfloat\n(\ny3\n)\n \n+\n \nfloat\n(\ny4\n))\n \n# print as numeric, raw input changed into float\n\n\n\n\n\n\n\n1\n2\n3\nEnter an integer: 1\nEnter another one: 2\n('The sum is = ', 3.0)\n\n\n\n\n\n\n2.11, Line joining\n\u00b6\n\n\n1\n2\n3\n4\nyear\n \n=\n \ninput\n(\n'year: '\n)\n\n\nmonth\n \n=\n \ninput\n(\n'month: '\n)\n\n\nif\n \n1900\n \n<\n \nyear\n \n<\n \n2100\n \nand\n \n1\n \n<=\n \nmonth\n \n<=\n \n12\n \n:\n\n    \nprint\n(\n'I am so long and will not fit in a single line'\n)\n\n\n\n\n\n\n\n1\n2\n3\nyear\n:\n \n2016\n\n\nmonth\n:\n \n10\n\n\nI\n \nam\n \nso\n \nlong\n \nand\n \nwill\n \nnot\n \nfit\n \nin\n \na\n \nsingle\n \nline\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# simplify the code, shorten the line\n\n\nyear\n \n=\n \ninput\n(\n'year: '\n)\n\n\nmonth\n \n=\n \ninput\n(\n'month: '\n)\n\n\nif\n \n1900\n \n<\n \nyear\n \n<\n \n2100\n\\\n \nand\n \n1\n \n<=\n \nmonth\n \n<=\n \n12\n \n:\n\n    \nprint\n(\n'I am so long and will\n\\\n\n\n not fit in a single line'\n)\n\n\n\n\n\n\n\n1\n2\n3\nyear\n:\n \n2016\n\n\nmonth\n:\n \n10\n\n\nI\n \nam\n \nso\n \nlong\n \nand\n \nwill\n \nnot\n \nfit\n \nin\n \na\n \nsingle\n \nline\n\n\n\n\n\n\n\n1\n2\n# object, variable type\n\n\nprint\n(\ntype\n(\n4.5\n))\n\n\n\n\n\n\n\n1\n<type 'float'>\n\n\n\n\n\n\n2.14, More on Strings and Lists\n\u00b6\n\n\n1\n2\n3\n4\n5\ns\n \n=\n \n'hello world'\n\n\n\n# string length\n\n\nprint\n(\nlen\n(\ns\n))\n\n\nprint\n(\ns\n.\nupper\n())\n\n\n\n\n\n\n\n1\n2\n11\nHELLO WORLD\n\n\n\n\n\n\n1\n2\n# help with\n\n\nhelp\n(\nstr\n)\n\n\n\n\n\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\nHelp\n \non\n \nclass\n \nstr\n \nin\n \nmodule\n \n__builtin__\n:\n\n\n\nclass\n \nstr\n(\nbasestring\n)\n\n \n|\n  \nstr\n(\nobject\n=\n''\n)\n \n->\n \nstring\n\n \n|\n  \n \n|\n  \nReturn\n \na\n \nnice\n \nstring\n \nrepresentation\n \nof\n \nthe\n \nobject\n.\n\n \n|\n  \nIf\n \nthe\n \nargument\n \nis\n \na\n \nstring\n,\n \nthe\n \nreturn\n \nvalue\n \nis\n \nthe\n \nsame\n \nobject\n.\n\n \n|\n  \n \n|\n  \nMethod\n \nresolution\n \norder\n:\n\n \n|\n      \nstr\n\n \n|\n      \nbasestring\n\n \n|\n      \nobject\n\n \n|\n  \n \n|\n  \nMethods\n \ndefined\n \nhere\n:\n\n \n|\n  \n \n|\n  \n__add__\n(...)\n\n \n|\n      \nx\n.\n__add__\n(\ny\n)\n \n<==>\n \nx\n+\ny\n\n \n|\n  \n \n|\n  \n__contains__\n(...)\n\n \n|\n      \nx\n.\n__contains__\n(\ny\n)\n \n<==>\n \ny\n \nin\n \nx\n\n \n|\n  \n \n|\n  \n__eq__\n(...)\n\n \n|\n      \nx\n.\n__eq__\n(\ny\n)\n \n<==>\n \nx\n==\ny\n\n \n|\n  \n \n|\n  \n__format__\n(...)\n\n \n|\n      \nS\n.\n__format__\n(\nformat_spec\n)\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \nformatted\n \nversion\n \nof\n \nS\n \nas\n \ndescribed\n \nby\n \nformat_spec\n.\n\n \n|\n  \n \n|\n  \n__ge__\n(...)\n\n \n|\n      \nx\n.\n__ge__\n(\ny\n)\n \n<==>\n \nx\n>=\ny\n\n \n|\n  \n \n|\n  \n__getattribute__\n(...)\n\n \n|\n      \nx\n.\n__getattribute__\n(\n'name'\n)\n \n<==>\n \nx\n.\nname\n\n \n|\n  \n \n|\n  \n__getitem__\n(...)\n\n \n|\n      \nx\n.\n__getitem__\n(\ny\n)\n \n<==>\n \nx\n[\ny\n]\n\n \n|\n  \n \n|\n  \n__getnewargs__\n(...)\n\n \n|\n  \n \n|\n  \n__getslice__\n(...)\n\n \n|\n      \nx\n.\n__getslice__\n(\ni\n,\n \nj\n)\n \n<==>\n \nx\n[\ni\n:\nj\n]\n\n \n|\n      \n \n|\n      \nUse\n \nof\n \nnegative\n \nindices\n \nis\n \nnot\n \nsupported\n.\n\n \n|\n  \n \n|\n  \n__gt__\n(...)\n\n \n|\n      \nx\n.\n__gt__\n(\ny\n)\n \n<==>\n \nx\n>\ny\n\n \n|\n  \n \n|\n  \n__hash__\n(...)\n\n \n|\n      \nx\n.\n__hash__\n()\n \n<==>\n \nhash\n(\nx\n)\n\n \n|\n  \n \n|\n  \n__le__\n(...)\n\n \n|\n      \nx\n.\n__le__\n(\ny\n)\n \n<==>\n \nx\n<=\ny\n\n \n|\n  \n \n|\n  \n__len__\n(...)\n\n \n|\n      \nx\n.\n__len__\n()\n \n<==>\n \nlen\n(\nx\n)\n\n \n|\n  \n \n|\n  \n__lt__\n(...)\n\n \n|\n      \nx\n.\n__lt__\n(\ny\n)\n \n<==>\n \nx\n<\ny\n\n \n|\n  \n \n|\n  \n__mod__\n(...)\n\n \n|\n      \nx\n.\n__mod__\n(\ny\n)\n \n<==>\n \nx\n%\ny\n\n \n|\n  \n \n|\n  \n__mul__\n(...)\n\n \n|\n      \nx\n.\n__mul__\n(\nn\n)\n \n<==>\n \nx\n*\nn\n\n \n|\n  \n \n|\n  \n__ne__\n(...)\n\n \n|\n      \nx\n.\n__ne__\n(\ny\n)\n \n<==>\n \nx\n!=\ny\n\n \n|\n  \n \n|\n  \n__repr__\n(...)\n\n \n|\n      \nx\n.\n__repr__\n()\n \n<==>\n \nrepr\n(\nx\n)\n\n \n|\n  \n \n|\n  \n__rmod__\n(...)\n\n \n|\n      \nx\n.\n__rmod__\n(\ny\n)\n \n<==>\n \ny\n%\nx\n\n \n|\n  \n \n|\n  \n__rmul__\n(...)\n\n \n|\n      \nx\n.\n__rmul__\n(\nn\n)\n \n<==>\n \nn\n*\nx\n\n \n|\n  \n \n|\n  \n__sizeof__\n(...)\n\n \n|\n      \nS\n.\n__sizeof__\n()\n \n->\n \nsize\n \nof\n \nS\n \nin\n \nmemory\n,\n \nin\n \nbytes\n\n \n|\n  \n \n|\n  \n__str__\n(...)\n\n \n|\n      \nx\n.\n__str__\n()\n \n<==>\n \nstr\n(\nx\n)\n\n \n|\n  \n \n|\n  \ncapitalize\n(...)\n\n \n|\n      \nS\n.\ncapitalize\n()\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \ncopy\n \nof\n \nthe\n \nstring\n \nS\n \nwith\n \nonly\n \nits\n \nfirst\n \ncharacter\n\n \n|\n      \ncapitalized\n.\n\n \n|\n  \n \n|\n  \ncenter\n(...)\n\n \n|\n      \nS\n.\ncenter\n(\nwidth\n[,\n \nfillchar\n])\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \nS\n \ncentered\n \nin\n \na\n \nstring\n \nof\n \nlength\n \nwidth\n.\n \nPadding\n \nis\n\n \n|\n      \ndone\n \nusing\n \nthe\n \nspecified\n \nfill\n \ncharacter\n \n(\ndefault\n \nis\n \na\n \nspace\n)\n\n \n|\n  \n \n|\n  \ncount\n(...)\n\n \n|\n      \nS\n.\ncount\n(\nsub\n[,\n \nstart\n[,\n \nend\n]])\n \n->\n \nint\n\n \n|\n      \n \n|\n      \nReturn\n \nthe\n \nnumber\n \nof\n \nnon\n-\noverlapping\n \noccurrences\n \nof\n \nsubstring\n \nsub\n \nin\n\n \n|\n      \nstring\n \nS\n[\nstart\n:\nend\n].\n  \nOptional\n \narguments\n \nstart\n \nand\n \nend\n \nare\n \ninterpreted\n\n \n|\n      \nas\n \nin\n \nslice\n \nnotation\n.\n\n \n|\n  \n \n|\n  \ndecode\n(...)\n\n \n|\n      \nS\n.\ndecode\n([\nencoding\n[,\nerrors\n]])\n \n->\n \nobject\n\n \n|\n      \n \n|\n      \nDecodes\n \nS\n \nusing\n \nthe\n \ncodec\n \nregistered\n \nfor\n \nencoding\n.\n \nencoding\n \ndefaults\n\n \n|\n      \nto\n \nthe\n \ndefault\n \nencoding\n.\n \nerrors\n \nmay\n \nbe\n \ngiven\n \nto\n \nset\n \na\n \ndifferent\n \nerror\n\n \n|\n      \nhandling\n \nscheme\n.\n \nDefault\n \nis\n \n'strict'\n \nmeaning\n \nthat\n \nencoding\n \nerrors\n \nraise\n\n \n|\n      \na\n \nUnicodeDecodeError\n.\n \nOther\n \npossible\n \nvalues\n \nare\n \n'ignore'\n \nand\n \n'replace'\n\n \n|\n      \nas\n \nwell\n \nas\n \nany\n \nother\n \nname\n \nregistered\n \nwith\n \ncodecs\n.\nregister_error\n \nthat\n \nis\n\n \n|\n      \nable\n \nto\n \nhandle\n \nUnicodeDecodeErrors\n.\n\n \n|\n  \n \n|\n  \nencode\n(...)\n\n \n|\n      \nS\n.\nencode\n([\nencoding\n[,\nerrors\n]])\n \n->\n \nobject\n\n \n|\n      \n \n|\n      \nEncodes\n \nS\n \nusing\n \nthe\n \ncodec\n \nregistered\n \nfor\n \nencoding\n.\n \nencoding\n \ndefaults\n\n \n|\n      \nto\n \nthe\n \ndefault\n \nencoding\n.\n \nerrors\n \nmay\n \nbe\n \ngiven\n \nto\n \nset\n \na\n \ndifferent\n \nerror\n\n \n|\n      \nhandling\n \nscheme\n.\n \nDefault\n \nis\n \n'strict'\n \nmeaning\n \nthat\n \nencoding\n \nerrors\n \nraise\n\n \n|\n      \na\n \nUnicodeEncodeError\n.\n \nOther\n \npossible\n \nvalues\n \nare\n \n'ignore'\n,\n \n'replace'\n \nand\n\n \n|\n      \n'xmlcharrefreplace'\n \nas\n \nwell\n \nas\n \nany\n \nother\n \nname\n \nregistered\n \nwith\n\n \n|\n      \ncodecs\n.\nregister_error\n \nthat\n \nis\n \nable\n \nto\n \nhandle\n \nUnicodeEncodeErrors\n.\n\n \n|\n  \n \n|\n  \nendswith\n(...)\n\n \n|\n      \nS\n.\nendswith\n(\nsuffix\n[,\n \nstart\n[,\n \nend\n]])\n \n->\n \nbool\n\n \n|\n      \n \n|\n      \nReturn\n \nTrue\n \nif\n \nS\n \nends\n \nwith\n \nthe\n \nspecified\n \nsuffix\n,\n \nFalse\n \notherwise\n.\n\n \n|\n      \nWith\n \noptional\n \nstart\n,\n \ntest\n \nS\n \nbeginning\n \nat\n \nthat\n \nposition\n.\n\n \n|\n      \nWith\n \noptional\n \nend\n,\n \nstop\n \ncomparing\n \nS\n \nat\n \nthat\n \nposition\n.\n\n \n|\n      \nsuffix\n \ncan\n \nalso\n \nbe\n \na\n \ntuple\n \nof\n \nstrings\n \nto\n \ntry\n.\n\n \n|\n  \n \n|\n  \nexpandtabs\n(...)\n\n \n|\n      \nS\n.\nexpandtabs\n([\ntabsize\n])\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \ncopy\n \nof\n \nS\n \nwhere\n \nall\n \ntab\n \ncharacters\n \nare\n \nexpanded\n \nusing\n \nspaces\n.\n\n \n|\n      \nIf\n \ntabsize\n \nis\n \nnot\n \ngiven\n,\n \na\n \ntab\n \nsize\n \nof\n \n8\n \ncharacters\n \nis\n \nassumed\n.\n\n \n|\n  \n \n|\n  \nfind\n(...)\n\n \n|\n      \nS\n.\nfind\n(\nsub\n \n[,\nstart\n \n[,\nend\n]])\n \n->\n \nint\n\n \n|\n      \n \n|\n      \nReturn\n \nthe\n \nlowest\n \nindex\n \nin\n \nS\n \nwhere\n \nsubstring\n \nsub\n \nis\n \nfound\n,\n\n \n|\n      \nsuch\n \nthat\n \nsub\n \nis\n \ncontained\n \nwithin\n \nS\n[\nstart\n:\nend\n].\n  \nOptional\n\n \n|\n      \narguments\n \nstart\n \nand\n \nend\n \nare\n \ninterpreted\n \nas\n \nin\n \nslice\n \nnotation\n.\n\n \n|\n      \n \n|\n      \nReturn\n \n-\n1\n \non\n \nfailure\n.\n\n \n|\n  \n \n|\n  \nformat\n(...)\n\n \n|\n      \nS\n.\nformat\n(\n*\nargs\n,\n \n**\nkwargs\n)\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \nformatted\n \nversion\n \nof\n \nS\n,\n \nusing\n \nsubstitutions\n \nfrom\n \nargs\n \nand\n \nkwargs\n.\n\n \n|\n      \nThe\n \nsubstitutions\n \nare\n \nidentified\n \nby\n \nbraces\n \n(\n'{'\n \nand\n \n'}'\n).\n\n \n|\n  \n \n|\n  \nindex\n(...)\n\n \n|\n      \nS\n.\nindex\n(\nsub\n \n[,\nstart\n \n[,\nend\n]])\n \n->\n \nint\n\n \n|\n      \n \n|\n      \nLike\n \nS\n.\nfind\n()\n \nbut\n \nraise\n \nValueError\n \nwhen\n \nthe\n \nsubstring\n \nis\n \nnot\n \nfound\n.\n\n \n|\n  \n \n|\n  \nisalnum\n(...)\n\n \n|\n      \nS\n.\nisalnum\n()\n \n->\n \nbool\n\n \n|\n      \n \n|\n      \nReturn\n \nTrue\n \nif\n \nall\n \ncharacters\n \nin\n \nS\n \nare\n \nalphanumeric\n\n \n|\n      \nand\n \nthere\n \nis\n \nat\n \nleast\n \none\n \ncharacter\n \nin\n \nS\n,\n \nFalse\n \notherwise\n.\n\n \n|\n  \n \n|\n  \nisalpha\n(...)\n\n \n|\n      \nS\n.\nisalpha\n()\n \n->\n \nbool\n\n \n|\n      \n \n|\n      \nReturn\n \nTrue\n \nif\n \nall\n \ncharacters\n \nin\n \nS\n \nare\n \nalphabetic\n\n \n|\n      \nand\n \nthere\n \nis\n \nat\n \nleast\n \none\n \ncharacter\n \nin\n \nS\n,\n \nFalse\n \notherwise\n.\n\n \n|\n  \n \n|\n  \nisdigit\n(...)\n\n \n|\n      \nS\n.\nisdigit\n()\n \n->\n \nbool\n\n \n|\n      \n \n|\n      \nReturn\n \nTrue\n \nif\n \nall\n \ncharacters\n \nin\n \nS\n \nare\n \ndigits\n\n \n|\n      \nand\n \nthere\n \nis\n \nat\n \nleast\n \none\n \ncharacter\n \nin\n \nS\n,\n \nFalse\n \notherwise\n.\n\n \n|\n  \n \n|\n  \nislower\n(...)\n\n \n|\n      \nS\n.\nislower\n()\n \n->\n \nbool\n\n \n|\n      \n \n|\n      \nReturn\n \nTrue\n \nif\n \nall\n \ncased\n \ncharacters\n \nin\n \nS\n \nare\n \nlowercase\n \nand\n \nthere\n \nis\n\n \n|\n      \nat\n \nleast\n \none\n \ncased\n \ncharacter\n \nin\n \nS\n,\n \nFalse\n \notherwise\n.\n\n \n|\n  \n \n|\n  \nisspace\n(...)\n\n \n|\n      \nS\n.\nisspace\n()\n \n->\n \nbool\n\n \n|\n      \n \n|\n      \nReturn\n \nTrue\n \nif\n \nall\n \ncharacters\n \nin\n \nS\n \nare\n \nwhitespace\n\n \n|\n      \nand\n \nthere\n \nis\n \nat\n \nleast\n \none\n \ncharacter\n \nin\n \nS\n,\n \nFalse\n \notherwise\n.\n\n \n|\n  \n \n|\n  \nistitle\n(...)\n\n \n|\n      \nS\n.\nistitle\n()\n \n->\n \nbool\n\n \n|\n      \n \n|\n      \nReturn\n \nTrue\n \nif\n \nS\n \nis\n \na\n \ntitlecased\n \nstring\n \nand\n \nthere\n \nis\n \nat\n \nleast\n \none\n\n \n|\n      \ncharacter\n \nin\n \nS\n,\n \ni\n.\ne\n.\n \nuppercase\n \ncharacters\n \nmay\n \nonly\n \nfollow\n \nuncased\n\n \n|\n      \ncharacters\n \nand\n \nlowercase\n \ncharacters\n \nonly\n \ncased\n \nones\n.\n \nReturn\n \nFalse\n\n \n|\n      \notherwise\n.\n\n \n|\n  \n \n|\n  \nisupper\n(...)\n\n \n|\n      \nS\n.\nisupper\n()\n \n->\n \nbool\n\n \n|\n      \n \n|\n      \nReturn\n \nTrue\n \nif\n \nall\n \ncased\n \ncharacters\n \nin\n \nS\n \nare\n \nuppercase\n \nand\n \nthere\n \nis\n\n \n|\n      \nat\n \nleast\n \none\n \ncased\n \ncharacter\n \nin\n \nS\n,\n \nFalse\n \notherwise\n.\n\n \n|\n  \n \n|\n  \njoin\n(...)\n\n \n|\n      \nS\n.\njoin\n(\niterable\n)\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \nstring\n \nwhich\n \nis\n \nthe\n \nconcatenation\n \nof\n \nthe\n \nstrings\n \nin\n \nthe\n\n \n|\n      \niterable\n.\n  \nThe\n \nseparator\n \nbetween\n \nelements\n \nis\n \nS\n.\n\n \n|\n  \n \n|\n  \nljust\n(...)\n\n \n|\n      \nS\n.\nljust\n(\nwidth\n[,\n \nfillchar\n])\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \nS\n \nleft\n-\njustified\n \nin\n \na\n \nstring\n \nof\n \nlength\n \nwidth\n.\n \nPadding\n \nis\n\n \n|\n      \ndone\n \nusing\n \nthe\n \nspecified\n \nfill\n \ncharacter\n \n(\ndefault\n \nis\n \na\n \nspace\n).\n\n \n|\n  \n \n|\n  \nlower\n(...)\n\n \n|\n      \nS\n.\nlower\n()\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \ncopy\n \nof\n \nthe\n \nstring\n \nS\n \nconverted\n \nto\n \nlowercase\n.\n\n \n|\n  \n \n|\n  \nlstrip\n(...)\n\n \n|\n      \nS\n.\nlstrip\n([\nchars\n])\n \n->\n \nstring\n \nor\n \nunicode\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \ncopy\n \nof\n \nthe\n \nstring\n \nS\n \nwith\n \nleading\n \nwhitespace\n \nremoved\n.\n\n \n|\n      \nIf\n \nchars\n \nis\n \ngiven\n \nand\n \nnot\n \nNone\n,\n \nremove\n \ncharacters\n \nin\n \nchars\n \ninstead\n.\n\n \n|\n      \nIf\n \nchars\n \nis\n \nunicode\n,\n \nS\n \nwill\n \nbe\n \nconverted\n \nto\n \nunicode\n \nbefore\n \nstripping\n\n \n|\n  \n \n|\n  \npartition\n(...)\n\n \n|\n      \nS\n.\npartition\n(\nsep\n)\n \n->\n \n(\nhead\n,\n \nsep\n,\n \ntail\n)\n\n \n|\n      \n \n|\n      \nSearch\n \nfor\n \nthe\n \nseparator\n \nsep\n \nin\n \nS\n,\n \nand\n \nreturn\n \nthe\n \npart\n \nbefore\n \nit\n,\n\n \n|\n      \nthe\n \nseparator\n \nitself\n,\n \nand\n \nthe\n \npart\n \nafter\n \nit\n.\n  \nIf\n \nthe\n \nseparator\n \nis\n \nnot\n\n \n|\n      \nfound\n,\n \nreturn\n \nS\n \nand\n \ntwo\n \nempty\n \nstrings\n.\n\n \n|\n  \n \n|\n  \nreplace\n(...)\n\n \n|\n      \nS\n.\nreplace\n(\nold\n,\n \nnew\n[,\n \ncount\n])\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \ncopy\n \nof\n \nstring\n \nS\n \nwith\n \nall\n \noccurrences\n \nof\n \nsubstring\n\n \n|\n      \nold\n \nreplaced\n \nby\n \nnew\n.\n  \nIf\n \nthe\n \noptional\n \nargument\n \ncount\n \nis\n\n \n|\n      \ngiven\n,\n \nonly\n \nthe\n \nfirst\n \ncount\n \noccurrences\n \nare\n \nreplaced\n.\n\n \n|\n  \n \n|\n  \nrfind\n(...)\n\n \n|\n      \nS\n.\nrfind\n(\nsub\n \n[,\nstart\n \n[,\nend\n]])\n \n->\n \nint\n\n \n|\n      \n \n|\n      \nReturn\n \nthe\n \nhighest\n \nindex\n \nin\n \nS\n \nwhere\n \nsubstring\n \nsub\n \nis\n \nfound\n,\n\n \n|\n      \nsuch\n \nthat\n \nsub\n \nis\n \ncontained\n \nwithin\n \nS\n[\nstart\n:\nend\n].\n  \nOptional\n\n \n|\n      \narguments\n \nstart\n \nand\n \nend\n \nare\n \ninterpreted\n \nas\n \nin\n \nslice\n \nnotation\n.\n\n \n|\n      \n \n|\n      \nReturn\n \n-\n1\n \non\n \nfailure\n.\n\n \n|\n  \n \n|\n  \nrindex\n(...)\n\n \n|\n      \nS\n.\nrindex\n(\nsub\n \n[,\nstart\n \n[,\nend\n]])\n \n->\n \nint\n\n \n|\n      \n \n|\n      \nLike\n \nS\n.\nrfind\n()\n \nbut\n \nraise\n \nValueError\n \nwhen\n \nthe\n \nsubstring\n \nis\n \nnot\n \nfound\n.\n\n \n|\n  \n \n|\n  \nrjust\n(...)\n\n \n|\n      \nS\n.\nrjust\n(\nwidth\n[,\n \nfillchar\n])\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \nS\n \nright\n-\njustified\n \nin\n \na\n \nstring\n \nof\n \nlength\n \nwidth\n.\n \nPadding\n \nis\n\n \n|\n      \ndone\n \nusing\n \nthe\n \nspecified\n \nfill\n \ncharacter\n \n(\ndefault\n \nis\n \na\n \nspace\n)\n\n \n|\n  \n \n|\n  \nrpartition\n(...)\n\n \n|\n      \nS\n.\nrpartition\n(\nsep\n)\n \n->\n \n(\nhead\n,\n \nsep\n,\n \ntail\n)\n\n \n|\n      \n \n|\n      \nSearch\n \nfor\n \nthe\n \nseparator\n \nsep\n \nin\n \nS\n,\n \nstarting\n \nat\n \nthe\n \nend\n \nof\n \nS\n,\n \nand\n \nreturn\n\n \n|\n      \nthe\n \npart\n \nbefore\n \nit\n,\n \nthe\n \nseparator\n \nitself\n,\n \nand\n \nthe\n \npart\n \nafter\n \nit\n.\n  \nIf\n \nthe\n\n \n|\n      \nseparator\n \nis\n \nnot\n \nfound\n,\n \nreturn\n \ntwo\n \nempty\n \nstrings\n \nand\n \nS\n.\n\n \n|\n  \n \n|\n  \nrsplit\n(...)\n\n \n|\n      \nS\n.\nrsplit\n([\nsep\n \n[,\nmaxsplit\n]])\n \n->\n \nlist\n \nof\n \nstrings\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \nlist\n \nof\n \nthe\n \nwords\n \nin\n \nthe\n \nstring\n \nS\n,\n \nusing\n \nsep\n \nas\n \nthe\n\n \n|\n      \ndelimiter\n \nstring\n,\n \nstarting\n \nat\n \nthe\n \nend\n \nof\n \nthe\n \nstring\n \nand\n \nworking\n\n \n|\n      \nto\n \nthe\n \nfront\n.\n  \nIf\n \nmaxsplit\n \nis\n \ngiven\n,\n \nat\n \nmost\n \nmaxsplit\n \nsplits\n \nare\n\n \n|\n      \ndone\n.\n \nIf\n \nsep\n \nis\n \nnot\n \nspecified\n \nor\n \nis\n \nNone\n,\n \nany\n \nwhitespace\n \nstring\n\n \n|\n      \nis\n \na\n \nseparator\n.\n\n \n|\n  \n \n|\n  \nrstrip\n(...)\n\n \n|\n      \nS\n.\nrstrip\n([\nchars\n])\n \n->\n \nstring\n \nor\n \nunicode\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \ncopy\n \nof\n \nthe\n \nstring\n \nS\n \nwith\n \ntrailing\n \nwhitespace\n \nremoved\n.\n\n \n|\n      \nIf\n \nchars\n \nis\n \ngiven\n \nand\n \nnot\n \nNone\n,\n \nremove\n \ncharacters\n \nin\n \nchars\n \ninstead\n.\n\n \n|\n      \nIf\n \nchars\n \nis\n \nunicode\n,\n \nS\n \nwill\n \nbe\n \nconverted\n \nto\n \nunicode\n \nbefore\n \nstripping\n\n \n|\n  \n \n|\n  \nsplit\n(...)\n\n \n|\n      \nS\n.\nsplit\n([\nsep\n \n[,\nmaxsplit\n]])\n \n->\n \nlist\n \nof\n \nstrings\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \nlist\n \nof\n \nthe\n \nwords\n \nin\n \nthe\n \nstring\n \nS\n,\n \nusing\n \nsep\n \nas\n \nthe\n\n \n|\n      \ndelimiter\n \nstring\n.\n  \nIf\n \nmaxsplit\n \nis\n \ngiven\n,\n \nat\n \nmost\n \nmaxsplit\n\n \n|\n      \nsplits\n \nare\n \ndone\n.\n \nIf\n \nsep\n \nis\n \nnot\n \nspecified\n \nor\n \nis\n \nNone\n,\n \nany\n\n \n|\n      \nwhitespace\n \nstring\n \nis\n \na\n \nseparator\n \nand\n \nempty\n \nstrings\n \nare\n \nremoved\n\n \n|\n      \nfrom\n \nthe\n \nresult\n.\n\n \n|\n  \n \n|\n  \nsplitlines\n(...)\n\n \n|\n      \nS\n.\nsplitlines\n(\nkeepends\n=\nFalse\n)\n \n->\n \nlist\n \nof\n \nstrings\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \nlist\n \nof\n \nthe\n \nlines\n \nin\n \nS\n,\n \nbreaking\n \nat\n \nline\n \nboundaries\n.\n\n \n|\n      \nLine\n \nbreaks\n \nare\n \nnot\n \nincluded\n \nin\n \nthe\n \nresulting\n \nlist\n \nunless\n \nkeepends\n\n \n|\n      \nis\n \ngiven\n \nand\n \ntrue\n.\n\n \n|\n  \n \n|\n  \nstartswith\n(...)\n\n \n|\n      \nS\n.\nstartswith\n(\nprefix\n[,\n \nstart\n[,\n \nend\n]])\n \n->\n \nbool\n\n \n|\n      \n \n|\n      \nReturn\n \nTrue\n \nif\n \nS\n \nstarts\n \nwith\n \nthe\n \nspecified\n \nprefix\n,\n \nFalse\n \notherwise\n.\n\n \n|\n      \nWith\n \noptional\n \nstart\n,\n \ntest\n \nS\n \nbeginning\n \nat\n \nthat\n \nposition\n.\n\n \n|\n      \nWith\n \noptional\n \nend\n,\n \nstop\n \ncomparing\n \nS\n \nat\n \nthat\n \nposition\n.\n\n \n|\n      \nprefix\n \ncan\n \nalso\n \nbe\n \na\n \ntuple\n \nof\n \nstrings\n \nto\n \ntry\n.\n\n \n|\n  \n \n|\n  \nstrip\n(...)\n\n \n|\n      \nS\n.\nstrip\n([\nchars\n])\n \n->\n \nstring\n \nor\n \nunicode\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \ncopy\n \nof\n \nthe\n \nstring\n \nS\n \nwith\n \nleading\n \nand\n \ntrailing\n\n \n|\n      \nwhitespace\n \nremoved\n.\n\n \n|\n      \nIf\n \nchars\n \nis\n \ngiven\n \nand\n \nnot\n \nNone\n,\n \nremove\n \ncharacters\n \nin\n \nchars\n \ninstead\n.\n\n \n|\n      \nIf\n \nchars\n \nis\n \nunicode\n,\n \nS\n \nwill\n \nbe\n \nconverted\n \nto\n \nunicode\n \nbefore\n \nstripping\n\n \n|\n  \n \n|\n  \nswapcase\n(...)\n\n \n|\n      \nS\n.\nswapcase\n()\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \ncopy\n \nof\n \nthe\n \nstring\n \nS\n \nwith\n \nuppercase\n \ncharacters\n\n \n|\n      \nconverted\n \nto\n \nlowercase\n \nand\n \nvice\n \nversa\n.\n\n \n|\n  \n \n|\n  \ntitle\n(...)\n\n \n|\n      \nS\n.\ntitle\n()\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \ntitlecased\n \nversion\n \nof\n \nS\n,\n \ni\n.\ne\n.\n \nwords\n \nstart\n \nwith\n \nuppercase\n\n \n|\n      \ncharacters\n,\n \nall\n \nremaining\n \ncased\n \ncharacters\n \nhave\n \nlowercase\n.\n\n \n|\n  \n \n|\n  \ntranslate\n(...)\n\n \n|\n      \nS\n.\ntranslate\n(\ntable\n \n[,\ndeletechars\n])\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \ncopy\n \nof\n \nthe\n \nstring\n \nS\n,\n \nwhere\n \nall\n \ncharacters\n \noccurring\n\n \n|\n      \nin\n \nthe\n \noptional\n \nargument\n \ndeletechars\n \nare\n \nremoved\n,\n \nand\n \nthe\n\n \n|\n      \nremaining\n \ncharacters\n \nhave\n \nbeen\n \nmapped\n \nthrough\n \nthe\n \ngiven\n\n \n|\n      \ntranslation\n \ntable\n,\n \nwhich\n \nmust\n \nbe\n \na\n \nstring\n \nof\n \nlength\n \n256\n \nor\n \nNone\n.\n\n \n|\n      \nIf\n \nthe\n \ntable\n \nargument\n \nis\n \nNone\n,\n \nno\n \ntranslation\n \nis\n \napplied\n \nand\n\n \n|\n      \nthe\n \noperation\n \nsimply\n \nremoves\n \nthe\n \ncharacters\n \nin\n \ndeletechars\n.\n\n \n|\n  \n \n|\n  \nupper\n(...)\n\n \n|\n      \nS\n.\nupper\n()\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nReturn\n \na\n \ncopy\n \nof\n \nthe\n \nstring\n \nS\n \nconverted\n \nto\n \nuppercase\n.\n\n \n|\n  \n \n|\n  \nzfill\n(...)\n\n \n|\n      \nS\n.\nzfill\n(\nwidth\n)\n \n->\n \nstring\n\n \n|\n      \n \n|\n      \nPad\n \na\n \nnumeric\n \nstring\n \nS\n \nwith\n \nzeros\n \non\n \nthe\n \nleft\n,\n \nto\n \nfill\n \na\n \nfield\n\n \n|\n      \nof\n \nthe\n \nspecified\n \nwidth\n.\n  \nThe\n \nstring\n \nS\n \nis\n \nnever\n \ntruncated\n.\n\n \n|\n  \n \n|\n  \n----------------------------------------------------------------------\n\n \n|\n  \nData\n \nand\n \nother\n \nattributes\n \ndefined\n \nhere\n:\n\n \n|\n  \n \n|\n  \n__new__\n \n=\n \n<\nbuilt\n-\nin\n \nmethod\n \n__new__\n \nof\n \ntype\n \nobject\n>\n\n \n|\n      \nT\n.\n__new__\n(\nS\n,\n \n...)\n \n->\n \na\n \nnew\n \nobject\n \nwith\n \ntype\n \nS\n,\n \na\n \nsubtype\n \nof\n \nT\n\n\n\n\n\n\n\n1\n2\n3\n4\ns\n \n=\n \n'I am a long string'\n\n\n\n# split a string on space\n\n\nprint\n(\ns\n.\nsplit\n())\n\n\n\n\n\n\n\n1\n['I', 'am', 'a', 'long', 'string']\n\n\n\n\n\n\n1\n2\n3\n4\n5\na\n \n=\n \n'abc.abc.abc'\n\n\n\n# split a string on dot\n\n\naa\n \n=\n \na\n.\nsplit\n(\n'.'\n)\n\n\nprint\n(\naa\n)\n\n\n\n\n\n\n\n1\n['abc', 'abc', 'abc']\n\n\n\n\n\n\n1\n2\n3\n# join the elements, join character\n\n\nmm\n \n=\n \n'+'\n.\njoin\n(\naa\n)\n\n\nprint\n(\nmm\n)\n\n\n\n\n\n\n\n1\nabc+abc+abc\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\na\n \n=\n \n[]\n\n\n\n# append to a list\n\n\na\n.\nappend\n(\n3\n)\n\n\nprint\n(\na\n)\n\n\n\na\n.\nappend\n(\n4\n)\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n\n1\n2\n[3]\n\n\n[3, 4]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# insert 2.5 as first element (at index = 0)\n\n\na\n.\ninsert\n(\n0\n,\n \n2.5\n)\n\n\n\n# print several items\n\n\nprint\n(\na\n,\n \na\n[\n0\n])\n\n\nprint\n(\nlen\n(\na\n))\n\n\n\n\n\n\n\n1\n2\n([2.5, 3, 4], 2.5)\n3\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# copy module\n\n\na\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n]\n\n\n\nprint\n(\na\n)\n\n\n\nb\n \n=\n \na\n\n\nprint\n(\na\n \n==\n \nb\n)\n \n# True\n\n\n\n\n\n\n\n1\n2\n[1, 2, 3, 4]\n\n\nTrue\n\n\n\n\n\n\n\n1\n2\n# insert at index = 0\n\n\nb\n[\n0\n]\n \n=\n \n5\n\n\n\n\n\n\n\n1\n2\n3\n# b is a live duplicate, not an independent copy\n\n\nprint\n(\na\n \nis\n \nb\n)\n\n\nprint\n(\na\n,\n \nb\n)\n\n\n\n\n\n\n\n1\n2\nTrue\n([5, 2, 3, 4], [5, 2, 3, 4])\n\n\n\n\n\n\n1\n2\n3\nimport\n \ncopy\n\n\n\nc\n \n=\n \ncopy\n.\ncopy\n(\na\n)\n\n\n\n\n\n\n\n1\n2\n3\n# c is an ind. copy\n\n\nprint\n(\na\n \nis\n \nc\n)\n\n\nprint\n(\na\n,\n \nc\n)\n\n\n\n\n\n\n\n1\n2\nFalse\n([5, 2, 3, 4], [5, 2, 3, 4])\n\n\n\n\n\n\n1\n2\n3\n# replace at index = 1\n\n\nc\n[\n1\n]\n \n=\n \n100\n\n\nprint\n(\na\n,\n \nc\n)\n\n\n\n\n\n\n\n1\n([5, 2, 3, 4], [5, 100, 3, 4])\n\n\n\n\n\n\nRecap from the Above (Snippets)\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\ndicty\n \n=\n \n{\n'a'\n:\n \n'apple'\n,\n \n'b'\n:\n \n'berry'\n,\n \n'c'\n:\n \n'cherry'\n}\n\n\n\nfor\n \nkeyy\n \nin\n \ndicty\n:\n\n    \nprint\n(\n'keys are: '\n),\n \nkeyy\n\n    \nprint\n(\n'-'\n \n*\n \n5\n)\n\n    \nprint\n(\n'values are: '\n),\n \ndicty\n[\nkeyy\n]\n\n    \nprint\n(\n'-'\n \n*\n \n10\n)\n    \n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nkeys are:  a\n-----\nvalues are:  apple\n----------\nkeys are:  c\n-----\nvalues are:  cherry\n----------\nkeys are:  b\n-----\nvalues are:  berry\n----------\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nprint\n(\ntype\n(\n0\n))\n\n\nprint\n(\ntype\n(\n255\n))\n\n\nprint\n(\ntype\n(\n-\n1\n))\n\n\nprint\n(\ntype\n(\n-\n255\n))\n\n\nprint\n(\ntype\n(\n-\n30000\n))\n\n\nprint\n(\ntype\n(\n30000\n))\n\n\nprint\n(\ntype\n(\n-\n3500000\n))\n\n\nprint\n(\ntype\n(\n3500000\n))\n\n\nprint\n(\ntype\n(\n-\n1.5\n))\n\n\nprint\n(\ntype\n(\n1.345456734576345\n))\n\n\nprint\n(\ntype\n(\n'4'\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'float'>\n<type 'float'>\n<type 'str'>\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\na1\n \n=\n \ninput\n(\n'Enter: '\n)\n\n\n\na2\n \n=\n \na1\n\n\na3\n \n=\n \nbytes\n(\na1\n)\n \n# 0 - 255\n\n\na4\n \n=\n \nint\n(\na1\n)\n \n# -32768 - 32768\n\n\na5\n \n=\n \nlong\n(\na1\n)\n \n# -2147483648 -\n\n\na6\n \n=\n \nfloat\n(\na1\n)\n\n\na9\n \n=\n \nstr\n(\na1\n)\n\n\n\n\n\n\n\n1\nEnter\n:\n \n1\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\nlistnum\n \n=\n \n[\n0\n,\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n6\n,\n7\n,\n8\n,\n9\n,\n10\n]\n\n\n\nfor\n \ni\n \nin\n \nlistnum\n:\n\n    \nif\n \ni\n%\n2\n \n==\n \n0\n:\n \n# even\n\n        \nprint\n(\ni\n),\n\n\n\n\n\n\n\n1\n0 2 4 6 8 10\n\n\n\n\n\n\n1\n2\n3\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n10\n):\n\n    \nif\n \ni\n%\n2\n \n==\n \n0\n:\n \n# even\n\n        \nprint\n(\ni\n),\n\n\n\n\n\n\n\n1\n0 2 4 6 8\n\n\n\n\n\n\n1\n2\n3\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n100\n,\n3\n):\n\n    \nif\n \ni\n%\n2\n \n==\n \n0\n:\n \n# even\n\n        \nprint\n(\ni\n),\n\n\n\n\n\n\n\n1\n0 6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nlistnum\n \n=\n \n[\n'a'\n,\n'b'\n]\n\n\nlisttext\n \n=\n \n[]\n\n\n\nfor\n \ni\n \nin\n \nlistnum\n:\n\n    \nif\n \ni\n \n==\n \n'b'\n:\n \n# even\n\n        \nlisttext\n.\nappend\n(\ni\n)\n\n\n\nprint\n \nlisttext\n\n\n\n\n\n\n\n1\n['b']\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nlst\n \n=\n \n[\n3\n,\n5\n,\n7\n]\n\n\n\nlst\n.\nappend\n(\n9\n)\n\n\nprint\n \nlst\n\n\n\nlst\n.\nappend\n(\nlst\n[\n0\n])\n\n\nprint\n(\nlst\n)\n\n\n\n\n\n\n\n1\n2\n[3, 5, 7, 9]\n\n\n[3, 5, 7, 9, 3]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\nlst\n \n=\n \n[\n'a'\n,\n'b'\n,\n'c'\n]\n\n\n\nlst\n.\nappend\n(\n'd'\n)\n\n\nprint\n(\nlst\n)\n\n\n\nlst\n.\nappend\n(\nlst\n[\n0\n])\n\n\nprint\n(\nlst\n)\n\n\n\n\n\n\n\n1\n2\n['a', 'b', 'c', 'd']\n\n\n['a', 'b', 'c', 'd', 'a']\n\n\n\n\n\n\n\n1\n2\n3\n4\nelements\n \n=\n \n(\n'foo'\n,\n \n'bar'\n,\n \n'baz'\n)\n\n\n\nfor\n \nelem\n \nin\n \nelements\n:\n\n    \nprint\n(\nelem\n)\n\n\n\n\n\n\n\n1\n2\n3\nfoo\nbar\nbaz\n\n\n\n\n\n\n1\n2\nfor\n \ncount\n,\n \nelem\n \nin\n \nenumerate\n(\nelements\n):\n\n    \nprint\n(\ncount\n,\n \nelem\n)\n\n\n\n\n\n\n\n1\n2\n3\n(0, 'foo')\n(1, 'bar')\n(2, 'baz')\n\n\n\n\n\n\n1\n2\n3\n4\nlistnum\n \n=\n \n[\n0\n,\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n6\n,\n7\n,\n8\n,\n9\n,\n10\n]\n\n\n\nlistnum\n.\npop\n()\n \n# last\n\n\nprint\n(\nlistnum\n)\n\n\n\n\n\n\n\n1\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\n\n1\n2\nlistnum\n.\npop\n(\n0\n)\n \n# position 0\n\n\nprint\n(\nlistnum\n)\n\n\n\n\n\n\n\n1\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\n\n1\n2\nlistnum\n.\npop\n(\n2\n)\n \n# position 2\n\n\nprint\n(\nlistnum\n)\n\n\n\n\n\n\n\n1\n[1, 2, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\n\n1\n2\nlistnum\n.\nremove\n(\n8\n)\n \n# specific element\n\n\nprint\n(\nlistnum\n)\n\n\n\n\n\n\n\n1\n[1, 2, 4, 5, 6, 7, 9]\n\n\n\n\n\n\n1\n2\ndel\n(\nlistnum\n[\n0\n])\n\n\nprint\n(\nlistnum\n)\n\n\n\n\n\n\n\n1\n[2, 4, 5, 6, 7, 9]\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nword\n \n=\n \n'original'\n\n\nword2\n \n=\n \nword\n.\nupper\n()\n\n\nword3\n \n=\n \nword\n.\ncapitalize\n()\n\n\nfirst\n \n=\n \nword\n[\n0\n]\n\n\nallbutfirst\n \n=\n \nword\n[\n1\n:\nlen\n(\nword\n)]\n\n\n\nprint\n(\nword\n)\n\n\nprint\n(\nword2\n)\n\n\nprint\n(\nword3\n)\n\n\nprint\n(\nfirst\n)\n\n\nprint\n(\nallbutfirst\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\noriginal\nORIGINAL\nOriginal\no\nriginal\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nlist1\n \n=\n \n[\n1\n,\n2\n,\n3\n]\n\n\nlist2\n \n=\n \n[\n4\n,\n5\n,\n6\n,\n7\n]\n\n\n\nlist3\n \n=\n \n[\nlist1\n,\nlist2\n]\n\n\n\nresults\n \n=\n \n[]\n\n\n\ndef\n \njoiny\n(\nlisty\n):\n\n    \nfor\n \nlst\n \nin\n \nlisty\n:\n\n        \nfor\n \nnum\n \nin\n \nlst\n:\n\n            \nresults\n.\nappend\n(\nnum\n)\n\n    \nreturn\n \nresults\n\n\n\nprint\n(\njoiny\n(\nlist3\n))\n\n\n\n\n\n\n\n1\n[1, 2, 3, 4, 5, 6, 7]\n\n\n\n\n\n\n2.15, Python Modules and Packages\n\u00b6\n\n\n1\nprint\n(\nsin\n(\n0.5\n))\n\n\n\n\n\n\n\n1\n0.479425538604\n\n\n\n\n\n\n1\n2\n3\n# rename, more efficient\n\n\nimport\n \nmath\n \nas\n \nm\n\n\nprint\n(\nm\n.\nsin\n(\n0.5\n))\n\n\n\n\n\n\n\n1\n0.479425538604\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# package.module.function()\n\n\nimport\n \nrandom\n\n\n\na\n \n=\n \nrandom\n.\nrandint\n(\n1\n,\n5\n)\n\n\nprint\n(\na\n)\n\n\n\nrandom\n.\nrandint\n(\n1\n,\n10\n)\n\n\n\n\n\n\n\n1\n2\n3\n8\n\n\n\n\n\n\n1\n2\n3\n4\nimport\n \nrandom\n \nas\n \nrd\n\n\n\naa\n \n=\n \nrd\n.\nrandint\n(\n1\n,\n5\n)\n\n\nprint\n(\naa\n)\n\n\n\n\n\n\n\n1\n5\n\n\n\n\n\n\n2.16, Files Input/Ouput\n\u00b6\n\n\n1\n2\n3\n4\n# create the file\n\n\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt'\n,\n \n'w'\n)\n\n\nf\n.\nwrite\n(\n'This is a test file'\n)\n \n# write in\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n# read it\n\n\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt'\n,\n \n'r'\n)\n\n\nprint\n(\nf\n.\nread\n())\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\n1\nThis is a test file\n\n\n\n\n\n\n1\n2\n3\n4\n5\n# read it again\n\n\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt'\n,\n \n'r'\n)\n\n\nprint\n(\nf\n.\nread\n(\n7\n))\n \n# get first seven characters on the console\n\n\nprint\n(\nf\n.\nread\n())\n \n# get the remaining ones\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\nThis is\n a test file\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# create it\n\n\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt'\n,\n \n'w'\n)\n\n\nfor\n \nk\n \nin\n \nrange\n(\n1\n,\n10\n):\n \n# 1, 2, 3 stop before 4\n\n    \ns\n \n=\n \n'\n%3d\n\\n\n'\n \n%\n(\nk\n)\n \n# no format 3d, new line\n\n    \nf\n.\nwrite\n(\ns\n)\n \n# write in\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n# read it\n\n\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt'\n,\n \n'r'\n)\n \n# open\n\n\nprint\n(\nf\n.\nread\n())\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n\n\n\n\n\n\n1\n2\n3\n4\n# read it horizontally\n\n\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt'\n,\n \n'r'\n)\n \n# open\n\n\nprint\n(\nf\n.\nread\n(),)\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\n1\n('  1\\n  2\\n  3\\n  4\\n  5\\n  6\\n  7\\n  8\\n  9\\n',)\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt'\n,\n \n'r'\n)\n\n\nwhile\n \n1\n:\n \n# infinite loop\n\n    \ns\n \n=\n \nf\n.\nreadline\n()\n\n    \nif\n \ns\n \n==\n \n''\n:\n \n# Empty string means end of file\n\n        \nbreak\n \n# terminate the loop\n\n    \nm\n \n=\n \nint\n(\ns\n)\n \n# Convert to integer\n\n    \nprint\n(\nm\n \n*\n \n5\n),\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\n1\n5 10 15 20 25 30 35 40 45\n\n\n\n\n\n\n1\n2\n3\n4\n# create it\n\n\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt'\n,\n \n'w'\n)\n\n\nf\n.\nwrite\n(\n''\n)\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# give an error if there is a blank line in the file\n\n\n# test it (without the if, there would be an error)\n\n\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt'\n,\n \n'r'\n)\n\n\nwhile\n \n1\n:\n \n# infinite loop\n\n    \ns\n \n=\n \nf\n.\nreadline\n()\n\n    \nif\n \ns\n \n==\n \n''\n:\n \n# empty string means end of file\n\n        \nbreak\n \n# terminate the loop\n\n    \nm\n \n=\n \nint\n(\ns\n)\n \n# convert to integer\n\n    \nprint\n(\nm\n \n*\n \n5\n)\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# alternatively\n\n\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt'\n,\n \n'r'\n)\n\n\nwhile\n \n1\n:\n \n# infinite loop\n\n    \ns\n \n=\n \nf\n.\nreadline\n()\n\n    \nif\n \nlen\n(\ns\n)\n \n<\n \n1\n:\n \n# string with no value\n\n        \nbreak\n \n# terminate the loop\n\n    \nm\n \n=\n \nint\n(\ns\n)\n \n# convert to integer\n\n    \nprint\n(\nm\n \n*\n \n5\n)\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\nStrings can easily be written to and read from a \u001cle. Numbers take a bit more e\u001bort, since the \nread()\n method only returns Strings, which will have to be converted in to a number explicitly. However, when you want to save and restore data types like lists, dictionaries, or class instances, things get a lot more complicated. Rather than have the users constantly writing and debugging code to save complicated data types, Python provides a standard module called \npickle\n.\n\n\nThe \npickle\n module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure. \u201cPickling\u201d is the process whereby a Python object hierarchy is converted into a byte stream, and \u201cunpickling\u201d is the inverse operation, whereby a byte stream is converted back into an object hierarchy. Pickling (and unpickling) is alternatively known as \u201cserialization\u201d, \u201cmarshalling,\u201d [1] or \u201cflattening\u201d, however, to avoid confusion, the terms used here are \u201cpickling\u201d and \u201cunpickling\u201d.\n\n\n1\n2\n3\n4\n5\nimport\n \npickle\n\n\n\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt'\n,\n \n'w'\n)\n\n\npickle\n.\ndump\n(\n12.3\n,\n \nf\n)\n \n# write a float type\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\nf\n \n=\n \nopen\n(\n'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt'\n,\n \n'r'\n)\n\n\nx\n \n=\n \npickle\n.\nload\n(\nf\n)\n\n\nprint\n(\nx\n,\n \ntype\n(\nx\n))\n \n# check the type of data read\n\n\nf\n.\nclose\n()\n\n\n\n\n\n\n\n1\n(12.3, <type 'float'>)\n\n\n\n\n\n\n2.17, Formatted Printing\n\u00b6\n\n\n1\n2\n3\n4\na\n \n=\n \n2.0\n \n/\n \n3\n \n# 2/3 will print zero because of integer\n\n\nprint\n(\na\n)\n\n\n\nprint\n(\n'a = \n%5.3f\n'\n)\n \n%\n(\na\n)\n \n# up to 3 decimal places\n\n\n\n\n\n\n\n1\n2\n0.666666666667\na = 0.667\n\n\n\n\n\n\n\n\n\n\n\n\nConversion\n\n\nConversion\n\n\nExample\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nd, i\n\n\nsigned Integer\n\n\n\u2018%6d\u2019%(12)\n\n\n\u2018 12\u2019\n\n\n\n\n\n\nf\n\n\nfoating point decimal\n\n\n\u2018%6.4f\u2019%(2.0/3)\n\n\n0.667\n\n\n\n\n\n\ne\n\n\nfloating point exponential\n\n\n\u2018%6.2e\u2019%(2.0/3)\n\n\n6.67e-01\n\n\n\n\n\n\nx\n\n\nhexadecimal\n\n\n\u2018%x\u2019%(16)\n\n\n10\n\n\n\n\n\n\no\n\n\noctal\n\n\n\u2018%o\u2019%(8)\n\n\n10\n\n\n\n\n\n\ns\n\n\nstring\n\n\n\u2018%s\u2019%(\u2018abcd\u2019)\n\n\nabcd\n\n\n\n\n\n\n0d\n\n\nmodi\u001ced\n\n\n\u2018d\u2019 \u2018%05d\u2019%(12)\n\n\n00012\n\n\n\n\n\n\n\n\n1\n2\na\n \n=\n \n'justify as you like'\n\n\nprint\n(\n'\n%30s\n'\n)\n \n%\n(\na\n)\n \n# right justified\n\n\n\n\n\n\n\n1\n           justify as you like\n\n\n\n\n\n\n1\nprint\n(\n'\n%-30s\n'\n)\n \n%\n(\na\n)\n \n# minus sign for left justification\n\n\n\n\n\n\n\n1\njustify as you like\n\n\n\n\n\n\n1\n2\nfor\n \nk\n \nin\n \nrange\n(\n1\n,\n11\n):\n \n# A good looking table\n\n    \nprint\n(\n'5 x \n%2d\n = \n%2d\n'\n)\n \n%\n(\nk\n,\n \n5\n*\nk\n)\n \n# add 2 spaces before\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n5 x  1 =  5\n5 x  2 = 10\n5 x  3 = 15\n5 x  4 = 20\n5 x  5 = 25\n5 x  6 = 30\n5 x  7 = 35\n5 x  8 = 40\n5 x  9 = 45\n5 x 10 = 50\n\n\n\n\n\n\n2.18, Exception Handling\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\nx\n \n=\n \ninput\n(\n'Enter a number '\n)\n\n\n\ntry\n:\n\n    \nprint\n(\n10.0\n \n/\n \nx\n)\n\n\nexcept\n:\n\n    \nprint\n(\n'Division by zero not allowed'\n)\n\n\n\n\n\n\n\n1\n2\nEnter a number 0\nDivision by zero not allowed\n\n\n\n\n\n\n2.20, Writing GUI Programs\n\u00b6\n\n\nTkinter\n\n\n\n\nAn introduction to tkinter\n\n\nTkinter\n\n\nTkinter\n\n\n\n\nThe GUI programs are event-driven like a macro. Create Widgets like a Button, Label, Canvas,  etc. The first step is to create a main graphics window by calling the function \nTk()\n.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Example tkmain.py\n\n\n\n# open an empty box with min, max, close buttons\n\n\nimport\n \nTkinter\n \nas\n \ntk\n\n\n\nroot\n \n=\n \ntk\n.\nTk\n()\n\n\nroot\n.\nmainloop\n()\n\n\n\n# it opens a windows!\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Example tklabel.py\n\n\n\nroot\n \n=\n \ntk\n.\nTk\n()\n\n\nw\n \n=\n \ntk\n.\nLabel\n(\nroot\n,\n \ntext\n \n=\n \n\"Hello, world\"\n)\n\n\n\nw\n.\npack\n()\n\n\nroot\n.\nmainloop\n()\n\n\n\n# it opens a windows with the text in it\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# Example tkbutton.py\n\n\n\ndef\n \nhello\n():\n\n    \nprint\n(\n'hello world'\n)\n\n\n\nw\n \n=\n \ntk\n.\nTk\n()\n \n# Creates the main Graphics window\n\n\nb\n \n=\n \ntk\n.\nButton\n(\nw\n,\n \ntext\n \n=\n \n'Click Me'\n,\n \ncommand\n \n=\n \nhello\n)\n\n\n\nb\n.\npack\n()\n\n\nw\n.\nmainloop\n()\n\n\n\n# it opens a windows with a button; after clicking, it print the function\n\n\n\n\n\n\n\n1\nhello world\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n# Example tkcanvas.py\n\n\n\ndef\n \ndraw\n(\nevent\n):\n\n    \nc\n.\ncreate_rectangle\n(\nevent\n.\nx\n,\n \\\n        \nevent\n.\ny\n,\n \nevent\n.\nx\n+\n5\n,\n \nevent\n.\ny\n+\n5\n)\n\n\n\nw\n \n=\n \ntk\n.\nTk\n()\n\n\nc\n \n=\n \ntk\n.\nCanvas\n(\nw\n,\n \nwidth\n \n=\n \n300\n,\n \nheight\n \n=\n \n200\n)\n\n\n\nc\n.\npack\n()\n\n\nc\n.\nbind\n(\n\"<Button-1>\"\n,\n \ndraw\n)\n\n\nw\n.\nmainloop\n()\n\n\n\n# it open a windows; you can left-click and add dots in it\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n# Example tkcanvas2.py\n\n\n\nrecs\n \n=\n \n[]\n \n# list keeping track of the rectangles\n\n\n\ndef\n \nremove\n(\nevent\n):\n\n    \nglobal\n \nrecs\n\n    \nif\n \nlen\n(\nrecs\n)\n \n>\n \n0\n:\n\n        \nc\n.\ndelete\n(\nrecs\n[\n0\n])\n \n# delete from Canvas\n\n        \nrecs\n.\npop\n(\n0\n)\n \n# delete first item from list\n\n\n\ndef\n \ndraw\n(\nevent\n):\n\n    \nglobal\n \nrecs\n\n    \nr\n \n=\n \nc\n.\ncreate_rectangle\n(\nevent\n.\nx\n,\n \\\n        \nevent\n.\ny\n,\n \nevent\n.\nx\n \n+\n \n5\n,\n \nevent\n.\ny\n \n+\n \n5\n)\n\n    \nrecs\n.\nappend\n(\nr\n)\n\n\n\nw\n \n=\n \ntk\n.\nTk\n()\n\n\nc\n \n=\n \ntk\n.\nCanvas\n(\nw\n,\n \nwidth\n \n=\n \n300\n,\n \nheight\n \n=\n \n200\n)\n\n\n\nc\n.\npack\n()\n\n\nc\n.\nbind\n(\n\"<Button-1>\"\n,\n \ndraw\n)\n\n\nc\n.\nbind\n(\n\"<Button-3>\"\n,\n \nremove\n)\n\n\nw\n.\nmainloop\n()\n\n\n\n# it open a windows; you can left-click and add dots in it; right-click and remove them\n\n\n\n\n\n\n\n2.21, Object-Oriented Programming in Python\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n# example point.py\n\n\n\nclass\n \nPoint\n:\n\n    \n'''\n\n\n    This is documentation comment.\n\n\n    help(Point) will display this.\n\n\n    '''\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nx\n \n=\n \n0\n,\n \ny\n \n=\n \n0\n):\n\n        \nself\n.\nxpos\n \n=\n \nx\n\n        \nself\n.\nypos\n \n=\n \ny\n\n\n    \ndef\n \n__str__\n(\nself\n):\n \n# overload print()\n\n        \nreturn\n \n'Point at (\n%f\n,\n%f\n)'\n \n%\n(\nself\n.\nxpos\n,\n \nself\n.\nypos\n)\n\n\n    \ndef\n \n__add__\n(\nself\n,\n \nother\n):\n \n# overloads\n\n        \nxpos\n \n=\n \nself\n.\nxpos\n \n+\n \nother\n.\nxpos\n\n        \nypos\n \n=\n \nself\n.\nypos\n \n+\n \nother\n.\nypos\n\n        \nreturn\n \nPoint\n(\nxpos\n,\n \nypos\n)\n\n\n    \ndef\n \n__sub__\n(\nself\n,\n \nother\n):\n \n# overloads\n\n        \nimport\n \nmath\n\n        \ndx\n \n=\n \nself\n.\nxpos\n \n-\n \nother\n.\nxpos\n\n        \ndy\n \n=\n \nself\n.\nypos\n \n-\n \nother\n.\nypos\n\n        \nreturn\n \nmath\n.\nsqrt\n(\ndx\n \n**\n \n2\n \n+\n \ndy\n \n**\n \n2\n)\n\n\n    \ndef\n \ndist\n(\nself\n):\n\n        \nimport\n \nmath\n\n        \nreturn\n \nmath\n.\nsqrt\n(\nself\n.\nxpos\n \n**\n \n2\n \n+\n \nself\n.\nypos\n \n**\n \n2\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# example point1.py\n\n\n\n# import Point\n\n\n# if point.py is in the same directory and script point1.py is independent from point.py\n\n\n\norigin\n \n=\n \nPoint\n()\n \n# instance\n\n\nprint\n(\norigin\n)\n\n\n\np1\n \n=\n \nPoint\n(\n4\n,\n \n4\n)\n \n# instance\n\n\np2\n \n=\n \nPoint\n(\n8\n,\n \n7\n)\n\n\n\nprint\n(\np1\n)\n\n\n\n\n\n\n\n1\n2\nPoint at (0.000000,0.000000)\nPoint at (4.000000,4.000000)\n\n\n\n\n\n\n1\nprint\n(\np2\n)\n \n# __str__\n\n\n\n\n\n\n\n1\nPoint at (8.000000,7.000000)\n\n\n\n\n\n\n1\nprint\n(\np1\n \n+\n \np2\n)\n \n# __add__, __str__, (4 + 4, 7 + 4)\n\n\n\n\n\n\n\n1\nPoint at (12.000000,11.000000)\n\n\n\n\n\n\n1\nprint\n(\np1\n \n-\n \np2\n)\n \n# __sub__, __str__, ((4 - 8) ** 2, (3 - 7) ** 2)\n\n\n\n\n\n\n\n1\n5.0\n\n\n\n\n\n\n1\nprint\n(\np1\n.\ndist\n())\n \n# # __dist__, __str__, sqrt((4) ** 2 + (4) ** 2)\n\n\n\n\n\n\n\n1\n5.65685424949\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# example cpoint.py\n\n\n\nclass\n \ncolPoint\n(\nPoint\n):\n \n# colPoint inherits Point\n\n    \n'''\n\n\n    This is documentation comment.\n\n\n    help(colPoint) will display this.\n\n\n    '''\n\n\n    \ncolor\n \n=\n \n'black'\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nx\n \n=\n \n0\n,\n \ny\n \n=\n \n0\n,\n \ncol\n \n=\n \n'black'\n):\n\n        \nPoint\n.\n__init__\n(\nself\n,\n \nx\n,\n \ny\n)\n\n        \nself\n.\ncolor\n \n=\n \ncol\n\n\n    \ndef\n \n__str__\n(\nself\n):\n\n        \nreturn\n \n'\n%s\n colored Point at (\n%f\n,\n%f\n)'\n \n%\n \\\n            \n(\nself\n.\ncolor\n,\n \nself\n.\nxpos\n,\n \nself\n.\nypos\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# example point2.py\n\n\n\n# import cpoint\n\n\n# see above for the explanation\n\n\n\np1\n \n=\n \nPoint\n(\n5\n,\n \n5\n)\n\n\nrp1\n \n=\n \ncolPoint\n(\n2\n,\n \n2\n,\n \n'red'\n)\n\n\n\n\n\n\n\n1\nprint\n(\np1\n)\n\n\n\n\n\n    Point at (5.000000,5.000000)\n\n\n1\nprint\n(\nrp1\n)\n\n\n\n\n\n\n\n1\nred colored Point at (2.000000,2.000000)\n\n\n\n\n\n\n1\nprint\n(\nrp1\n \n+\n \np1\n)\n\n\n\n\n\n\n\n1\nPoint at (7.000000,7.000000)\n\n\n\n\n\n\n1\nprint\n(\nrp1\n.\ndist\n())\n\n\n\n\n\n\n\n1\n2.82842712475\n\n\n\n\n\n\n3, Arrays and Matrices\n\u00b6\n\n\nLet\u2019s switch to Python 3 for the remaining of the document.\n\n\n3.1, The NumPy Module\n\u00b6\n\n\nInstall (check) the Scipy Stack before.\n\n\n\n\nnumpy\n\n\nscipy\n\n\nmatplotlib\n\n\npandas\n\n\nsympy\n\n\nnose (testing)\n\n\n\n\nWith \npip\n.\n\n\nNote\n\n\nThe code below in Python 3 on Jupyter Notebook 3  installed on a Windows PC.\n\n\nHowever, running the Scipy Stack in Python 2.7 is problematic.\n\n\nSwitch kernel from here: from Python 2 to 3.\n\n\nNo need to \nimport\n \nnumpy\n,\n \nmatplotlib\n since it\u2019s included in the \n%pylab\n command.\n\n\n1\n2\n3\n4\n5\n6\n%\npylab\n \ninline\n\n\n# the Scipy Stack is executed in the notebook, no need to import numpy\n\n\n\nx\n \n=\n \narray\n([\n1\n,\n \n2\n,\n \n3\n])\n \n# make array from list\n\n\n\nprint\n(\nx\n,\n \ntype\n(\nx\n))\n\n\n\n\n\n\n\n1\n2\nPopulating the interactive namespace from numpy and matplotlib\n[1 2 3] <class 'numpy.ndarray'>\n\n\n\n\n\n\n1\n2\n3\n4\na\n \n=\n \n[[\n1\n,\n2\n],\n \n[\n3\n,\n4\n]]\n \n# make a list of lists\n\n\n\nx\n \n=\n \narray\n(\na\n)\n \n# and convert to an array\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n\n1\n[[1, 2], [3, 4]]\n\n\n\n\n\n\n1\narange\n(\n2.0\n,\n \n3.0\n,\n \n.\n1\n)\n\n\n\n\n\n\n\n1\narray([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])\n\n\n\n\n\n\n1\narray\n([\n \n2.\n \n,\n \n2.1\n,\n \n2.2\n,\n \n2.3\n,\n \n2.4\n,\n \n2.5\n,\n \n2.6\n,\n \n2.7\n,\n \n2.8\n,\n \n2.9\n])\n\n\n\n\n\n\n\n1\narray([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])\n\n\n\n\n\n\n1\nlinspace\n(\n1\n,\n \n2\n,\n \n11\n)\n\n\n\n\n\n\n\n1\narray([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])\n\n\n\n\n\n\n1\narray\n([\n \n1.\n \n,\n \n1.1\n,\n \n1.2\n,\n \n1.3\n,\n \n1.4\n,\n \n1.5\n,\n \n1.6\n,\n \n1.7\n,\n \n1.8\n,\n \n1.9\n,\n \n2.\n \n])\n\n\n\n\n\n\n\n1\narray([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])\n\n\n\n\n\n\n1\nzeros\n([\n3\n,\n2\n],\n \n'float'\n)\n\n\n\n\n\n\n\n1\n2\n3\narray([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])\n\n\n\n\n\n\n1\nzeros\n([\n3\n,\n2\n],\n \n'int'\n)\n\n\n\n\n\n\n\n1\n2\n3\narray([[0, 0],\n       [0, 0],\n       [0, 0]])\n\n\n\n\n\n\n1\nones\n([\n2\n,\n2\n],\n \n'i'\n)\n\n\n\n\n\n\n\n1\n2\narray([[1, 1],\n       [1, 1]], dtype=int32)\n\n\n\n\n\n\n1\nrandom\n.\nrandom\n([\n3\n,\n3\n])\n\n\n\n\n\n\n\n1\n2\n3\narray([[ 0.51158139,  0.83490474,  0.82306296],\n       [ 0.65830757,  0.98560397,  0.78565885],\n       [ 0.09887894,  0.11073038,  0.31037259]])\n\n\n\n\n\n\n1\n2\na\n \n=\n \narange\n(\n20\n)\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n\n1\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n\n\n\n\n\n\n1\n2\nb\n \n=\n \nreshape\n(\na\n,\n \n[\n4\n,\n5\n])\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n[[ 0  1  2  3  4]\n\n \n[ 5  6  7  8  9]\n\n \n[10 11 12 13 14]\n\n \n[15 16 17 18 19]]\n\n\n\n\n\n\n\n1\n2\na\n \n=\n \narange\n(\n1.0\n,\n \n2.0\n,\n \n0.1\n)\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n\n1\n[ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9]\n\n\n\n\n\n\n1\n2\nb\n \n=\n \nlinspace\n(\n1\n,\n \n2\n,\n \n11\n)\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\n\n1\n[ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2. ]\n\n\n\n\n\n\n1\n2\nc\n \n=\n \nones\n(\n5\n,\n \n'float'\n)\n\n\nprint\n(\nc\n)\n\n\n\n\n\n\n\n1\n[ 1.  1.  1.  1.  1.]\n\n\n\n\n\n\n1\n2\nd\n \n=\n \nzeros\n(\n5\n,\n \n'int'\n)\n\n\nprint\n(\nd\n)\n\n\n\n\n\n\n\n1\n[0 0 0 0 0]\n\n\n\n\n\n\n1\n2\ne\n \n=\n \nrandom\n.\nrand\n(\n5\n)\n\n\nprint\n(\ne\n)\n\n\n\n\n\n\n\n1\n[ 0.5677619   0.46086299  0.00274387  0.29916017  0.40593335]\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\na\n \n=\n \nzeros\n(\n5\n)\n\n\nprint\n(\na\n)\n\n\n\nb\n \n=\n \na\n\n\nb\n[\n0\n]\n \n=\n \n10\n\n\nprint\n(\na\n,\n \nb\n)\n \n# b and a remain in synch\n\n\n\nc\n \n=\n \na\n.\ncopy\n()\n\n\nc\n[\n4\n]\n \n=\n \n10\n\n\nprint\n(\na\n,\n \nc\n)\n \n# c is really a new variable, independent\n\n\n\n\n\n\n\n1\n2\n3\n[ 0.  0.  0.  0.  0.]\n\n\n[ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.   0.]\n\n\n[ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.  10.]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n# simple arithmetics\n\n\na\n \n=\n \narray\n([[\n2\n,\n3\n],\n \n[\n4\n,\n5\n]])\n\n\nb\n \n=\n \narray\n([[\n1\n,\n2\n],\n \n[\n3\n,\n0\n]])\n\n\n\nprint\n(\na\n \n+\n \nb\n)\n\n\nprint\n(\na\n \n*\n \nb\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n[[3 5]\n\n \n[7 5]]\n\n\n[[ 2  6]\n\n \n[12  0]]\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# cross product\n\n\na\n \n=\n \narray\n([\n1\n,\n2\n,\n3\n])\n\n\nb\n \n=\n \narray\n([\n4\n,\n5\n,\n6\n])\n\n\n\nprint\n(\na\n \n*\n \nb\n)\n\n\n\nc\n \n=\n \ncross\n(\na\n,\nb\n)\n\n\nprint\n(\nc\n)\n\n\n\n\n\n\n\n1\n2\n[ 4 10 18]\n\n\n[-3  6 -3]\n\n\n\n\n\n\n\n1\n2\n3\n# dot product\n\n\nc\n \n=\n \ndot\n(\na\n,\n \nb\n)\n\n\nprint\n(\nc\n)\n\n\n\n\n\n\n\n1\n32\n\n\n\n\n\n\n1\n2\na\n \n=\n \narange\n(\n10\n)\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n\n1\n[0 1 2 3 4 5 6 7 8 9]\n\n\n\n\n\n\n1\n2\n3\n4\n# save to file, restore or retrieve\n\n\na\n.\ntofile\n(\n'myfile.dat'\n)\n \n# a file is created in the directory\n\n\nb\n \n=\n \nfromfile\n(\n'myfile.dat'\n,\ndtype\n \n=\n \n'int'\n)\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\n\n1\n[0 1 2 3 4 5 6 7 8 9]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# matrix inversion\n\n\n\na\n \n=\n \narray\n([[\n4\n,\n1\n,\n-\n2\n],\n \n[\n2\n,\n-\n3\n,\n3\n],\n \n[\n-\n6\n,\n-\n2\n,\n1\n]\n \n],\n \ndtype\n=\n'float'\n)\n\n\nprint\n(\na\n)\n\n\n\nainv\n \n=\n \nlinalg\n.\ninv\n(\na\n)\n\n\nprint\n(\nainv\n)\n\n\n\nprint\n(\ndot\n(\na\n,\n \nainv\n))\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n[[ 4.  1. -2.]\n\n \n[ 2. -3.  3.]\n\n \n[-6. -2.  1.]]\n\n\n[[ 0.08333333  0.08333333 -0.08333333]\n\n \n[-0.55555556 -0.22222222 -0.44444444]\n\n \n[-0.61111111  0.05555556 -0.38888889]]\n\n\n[[  1.00000000e+00  -1.38777878e-17   0.00000000e+00]\n\n \n[  0.00000000e+00   1.00000000e+00   0.00000000e+00]\n\n \n[  0.00000000e+00   2.08166817e-17   1.00000000e+00]]\n\n\n\n\n\n\n\n3.2, Vectorized Functions\n\u00b6\n\n\n1\n2\n3\n# avoid loop, generate number with a function\n\n\na\n \n=\n \narray\n([\n1\n,\n \n10\n,\n \n100\n,\n \n1000\n])\n\n\nprint\n(\nlog10\n(\na\n))\n\n\n\n\n\n\n\n1\n[ 0.  1.  2.  3.]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ndef\n \nspf\n(\nx\n):\n\n    \nreturn\n \n3\n \n*\n \nx\n\n\n\nvspf\n \n=\n \nvectorize\n(\nspf\n)\n\n\na\n \n=\n \narray\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n])\n\n\n\nprint\n(\na\n)\n\n\nprint\n(\nvspf\n(\na\n))\n\n\n\n\n\n\n\n1\n2\n[1 2 3 4]\n\n\n[ 3  6  9 12]\n\n\n\n\n\n\n\n4, Data visualization\n\u00b6\n\n\n4.1, The Matplotlib Module\n\u00b6\n\n\nBasic or common plots.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n%\npylab\n \ninline\n\n\n# matplolib is part of pylab as is numpy\n\n\n\n# basic plot\n\n\ndata\n \n=\n \n[\n1\n,\n \n2\n,\n \n5\n]\n\n\n\nplot\n(\ndata\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n1\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# basic plot\n\n\nx\n \n=\n \n[\n1\n,\n \n2\n,\n \n5\n]\n\n\ny\n \n=\n \n[\n4\n,\n \n5\n,\n \n6\n]\n\n\n\nplot\n(\nx\n,\ny\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# basic plot\n\n\n\nx\n \n=\n \n[\n1\n,\n \n2\n,\n \n5\n]\n\n\ny\n \n=\n \n[\n4\n,\n \n5\n,\n \n6\n]\n\n\n\nplot\n(\nx\n,\n \ny\n,\n \n'ro'\n)\n\n\nxlabel\n(\n'x-axis'\n)\n\n\nylabel\n(\n'y-axis'\n)\n\n\naxis\n([\n0\n,\n \n6\n,\n \n1\n,\n \n7\n])\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# basic plots\n\n\n\n# data are unchanged\n\n\n\nt\n \n=\n \narange\n(\n0.0\n,\n \n5.0\n,\n \n0.2\n)\n\n\n\nplot\n(\nt\n,\n \nt\n**\n2\n,\n \n'x'\n)\n \n# t2\n\n\nplot\n(\nt\n,\n \nt\n**\n3\n,\n \n'ro'\n)\n \n# t3\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# subplot\n\n\n\n# data are unchanged\n\n\n\nsubplot\n(\n2\n,\n \n1\n,\n \n1\n)\n \n# the first subplot\n\n\nplot\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n])\n\n\nsubplot\n(\n2\n,\n \n1\n,\n \n2\n)\n \n# the second subplot\n\n\nplot\n([\n4\n,\n \n2\n,\n \n3\n,\n \n1\n])\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\n1\nrand\n(\n10\n)\n\n\n\n\n\n\n\n1\n2\narray([ 0.88744591,  0.324907  ,  0.90704288,  0.81398935,  0.96866761,\n        0.75620965,  0.31821423,  0.64119535,  0.56738357,  0.98143592])\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n# subplot\n\n\n\nmark\n \n=\n \n[\n'x'\n,\n'o'\n,\n'^'\n,\n'+'\n,\n'>'\n]\n\n\n\nNR\n \n=\n \n2\n \n# number of rows\n\n\nNC\n \n=\n \n3\n \n# number of columns\n\n\npn\n \n=\n \n1\n \n# plot number, starting number\n\n\n\nfor\n \nrow\n \nin\n \nrange\n(\nNR\n):\n\n    \nfor\n \ncol\n \nin\n \nrange\n(\nNC\n):\n\n        \nsubplot\n(\nNR\n,\n \nNC\n,\n \npn\n)\n\n        \na\n \n=\n \nrand\n(\n10\n)\n \n*\n \npn\n\n        \nplot\n(\na\n,\n \nmarker\n \n=\n \nmark\n[(\npn\n+\n1\n)\n%\n5\n])\n \n# plot the random numbers vs tick = (n+1)5%\n\n        \nxlabel\n(\n'plot \n%d\n X'\n \n%\npn\n)\n\n        \nylabel\n(\n'plot \n%d\n Y'\n \n%\npn\n)\n\n\n        \npn\n \n=\n \npn\n \n+\n \n1\n \n# move to the 2nd plot\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# polar plot\n\n\n\nth\n \n=\n \nlinspace\n(\n0\n,\n \n2\n*\npi\n,\n \n100\n)\n\n\nr\n \n=\n \n5\n \n*\n \nones\n(\n100\n)\n \n# radius = 5\n\n\npolar\n(\nth\n,\n \nr\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n# pie chart\n\n\n\nlabels\n \n=\n \n'Frogs'\n,\n \n'Hogs'\n,\n \n'Dogs'\n,\n \n'Logs'\n\n\nfracs\n \n=\n \n[\n25\n,\n \n25\n,\n \n30\n,\n \n20\n]\n\n\npie\n(\nfracs\n,\n \nlabels\n \n=\n \nlabels\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\nA few examples of mathematical plots. \n\n\nSpiral of Archimedes\n\n\nr = a\u03b8\nr = a\u03b8\n\n\n1\n2\n3\n4\n5\n6\n7\na\n \n=\n \n2\n\n\nth\n \n=\n \nlinspace\n(\n0\n,\n \n10\n*\npi\n,\n \n200\n)\n\n\nr\n \n=\n \na\n*\nth\n\n\npolar\n(\nth\n,\nr\n)\n\n\naxis\n([\n0\n,\n \n2\n*\npi\n,\n \n0\n,\n \n70\n])\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\nFermat\u2019s Spiral\n\n\nr^2 = a^2\u03b8\nr^2 = a^2\u03b8\n\n\n1\n2\n3\n4\n5\n6\n7\na\n \n=\n \n2\n\n\nth\n \n=\n \nlinspace\n(\n0\n,\n \n10\n*\npi\n,\n \n200\n)\n\n\nr\n \n=\n \nsqrt\n(\na\n**\n2\n \n*\n \nth\n)\n\n\npolar\n(\nth\n,\n \nr\n)\n\n\npolar\n(\nth\n,\n \n-\nr\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\nAnd more\u2026\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# example 1\n\n\n\nx\n \n=\n \narange\n(\n0\n,\n \n3\n,\n \n1\n)\n\n\ny\n \n=\n \narange\n(\n0\n,\n \n3\n,\n \n1\n)\n\n\ngx\n,\n \ngy\n \n=\n \nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nprint\n(\ngx\n)\n\n\nprint\n(\ngy\n)\n\n\n\nprint\n(\n'-'\n \n*\n \n25\n)\n\n\n\nx\n \n=\n \narange\n(\n-\n3\n*\npi\n,\n \n3\n*\npi\n,\n \n0.1\n)\n\n\ny\n \n=\n \narange\n(\n-\n3\n*\npi\n,\n \n3\n*\npi\n,\n \n0.1\n)\n\n\nxx\n,\n \nyy\n \n=\n \nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nz\n \n=\n \nsin\n(\nxx\n)\n \n+\n \nsin\n(\nyy\n)\n\n\n\nimshow\n(\nz\n)\n\n\nshow\n()\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n[[0 1 2]\n\n \n[0 1 2]\n\n \n[0 1 2]]\n\n\n[[0 0 0]\n\n \n[1 1 1]\n\n \n[2 2 2]]\n\n\n-------------------------\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n# example 2\n\n\n\nfrom\n \nmpl_toolkits.mplot3d\n \nimport\n \nAxes3D\n\n\n\nax\n \n=\n \nAxes3D\n(\nfigure\n())\n\n\nx\n \n=\n \narange\n(\n-\n3\n*\npi\n,\n \n3\n*\npi\n,\n \n0.1\n)\n\n\ny\n \n=\n \narange\n(\n-\n3\n*\npi\n,\n \n3\n*\npi\n,\n \n0.1\n)\n\n\nxx\n,\n \nyy\n \n=\n \nmeshgrid\n(\nx\n,\n \ny\n)\n\n\nz\n \n=\n \nsin\n(\nxx\n)\n \n+\n \nsin\n(\nyy\n)\n\n\nax\n.\nplot_surface\n(\nxx\n,\n \nyy\n,\n \nz\n,\n \ncmap\n=\ncm\n.\njet\n,\n \ncstride\n=\n1\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n# example 3\n\n\n\nfrom\n \nmpl_toolkits.mplot3d\n \nimport\n \nAxes3D\n\n\n\nax\n \n=\n \nAxes3D\n(\nfigure\n())\n\n\nphi\n \n=\n \nlinspace\n(\n0\n,\n \n2\n*\npi\n,\n \n400\n)\n\n\nx\n \n=\n \ncos\n(\nphi\n)\n\n\ny\n \n=\n \nsin\n(\nphi\n)\n\n\nz\n \n=\n \n0\n\n\nax\n.\nplot\n(\nx\n,\n \ny\n,\n \nz\n,\n \nlabel\n \n=\n \n'x'\n)\n# circle\n\n\nz\n \n=\n \nsin\n(\n4\n*\nphi\n)\n \n# modulated in z plane\n\n\nax\n.\nplot\n(\nx\n,\n \ny\n,\n \nz\n,\n \nlabel\n \n=\n \n'x'\n)\n\n\nax\n.\nset_xlabel\n(\n'X'\n)\n\n\nax\n.\nset_ylabel\n(\n'Y'\n)\n\n\nax\n.\nset_zlabel\n(\n'Z'\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n# example 4\n\n\n\nfrom\n \nmpl_toolkits.mplot3d\n \nimport\n \nAxes3D\n\n\n\nax\n \n=\n \nAxes3D\n(\nfigure\n())\n\n\nphi\n \n=\n \nlinspace\n(\n0\n,\n \n2\n \n*\n \npi\n,\n \n100\n)\n\n\ntheta\n \n=\n \nlinspace\n(\n0\n,\n \npi\n,\n \n100\n)\n\n\nx\n \n=\n \n10\n \n*\n \nouter\n(\ncos\n(\nphi\n),\n \nsin\n(\ntheta\n))\n\n\ny\n \n=\n \n10\n \n*\n \nouter\n(\nsin\n(\nphi\n),\n \nsin\n(\ntheta\n))\n\n\nz\n \n=\n \n10\n \n*\n \nouter\n(\nones\n(\nsize\n(\nphi\n)),\n \ncos\n(\ntheta\n))\n\n\nax\n.\nplot_wireframe\n(\nx\n,\ny\n,\nz\n,\n \nrstride\n=\n2\n,\n \ncstride\n=\n2\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\nAdditional mathematical plots (with functions):\n\n\n\n\nsine, function and friends\n\n\ncircles\n\n\nastroids\n\n\nellipses\n\n\npolar rose\n\n\npower series\n\n\nFourier series\n\n\nfractals\n\n\nmeshgrids\n\n\n2D plots\n\n\n3D plots\n\n\nsurface plots\n\n\nline plots\n\n\nwire-frame plots\n\n\nadvanced 3D with Mayavi (render 3D shapes)\n\n\n\n\n5, Type Setting Using \n\\LaTeX\n\\LaTeX\n\u00b6\n\n\nOnce a graphic or an image is generated by IPython, save it and reuse it in \n\\LaTeX\n\\LaTeX\n with the \nusepackage{graphicx}\n. Insert images and floating bodies.\n\n\n6, Numerical Methods\n\u00b6\n\n\n\n\nderivatives and differential calculus\n\n\nintegral calculus and numerical integration\n\n\noptimization and linear programming\n\n\nordinary differential equations\n\n\nEuler method\n\n\nRunge-Kutta method\n\n\nfunctions depending on the integrals\n\n\nand more\n\n\n\n\n\n\nPolynomials\n\n\nTaylor\u2019s series\n\n\nand other series\n\n\n\n\n\n\n\n\n6.5, Finding Roots of an Equation\n\u00b6\n\n\n\n\nA root is where a \nx\nx\n intersects the \ny\ny\n-axis.\n\n\nAn equation has any number of roots, or no roots at all.\n\n\nf(x) = x^2\nf(x) = x^2\n has a single root whereas \nf(x) = sin(x)\nf(x) = sin(x)\n has an infinite number of roots.\n\n\nVisual inspection will reveal the roots (by plotting the function).\n\n\nOther ways: the incremental search method, the method of bisection, and the Newton-Raphson method.\n\n\n\n\nIncremental Search Method\n\n\nThe basic idea behind the incremental search method is simple: if \nf(x1)\nf(x1)\n and \nf(x2)\nf(x2)\n have opposite signs, then there is at least one root in the interval \n(x1; x2)\n(x1; x2)\n. If the interval is small enough, it is likely to contain a single root. Thus, the zeroes of \nf(x)\nf(x)\n can be detected by evaluating the function at intervals of \n\\Delta x\n\\Delta x\n and looking for change in sign.\n\n\nThere are several potential problems with the incremental search method: it is possible to miss two closely spaced roots if the search increment \n\\Delta x\n\\Delta x\n is larger than the spacing of the roots. Certain singularities of \nf(x)\nf(x)\n can be mistaken for roots. For example, \nf(x) = tan(x)\nf(x) = tan(x)\n changes sign at odd multiples of \n\\pi/2\n\\pi/2\n, but these locations are not true zeroes.\n\n\nFor example, below, function \nroot()\n that searches the roots of a function \nf(x)\nf(x)\n from \nx = a\nx = a\n to \nx = b\nx = b\n, incrementing it by \ndx\ndx\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n%\n \npylab\n \ninline\n\n\n\nimport\n \nmath\n\n\n\ndef\n \nfunc\n(\nx\n):\n\n    \nreturn\n \nx\n**\n3\n \n-\n \n10.0\n \n*\n \nx\n \n*\n \nx\n \n+\n \n5\n\n\n\ndef\n \nroot\n(\nf\n,\n \na\n,\n \nb\n,\n \ndx\n):\n\n    \nx\n \n=\n \na\n\n    \nwhile\n \nTrue\n:\n\n        \nf1\n \n=\n \nf\n(\nx\n)\n\n        \nf2\n \n=\n \nf\n(\nx\n \n+\n \ndx\n)\n\n        \nif\n \nf1\n \n*\n \nf2\n \n<\n \n0\n:\n\n            \nreturn\n \nx\n,\n \nx\n \n+\n \ndx\n\n        \nx\n \n=\n \nx\n \n+\n \ndx\n\n        \nif\n \nx\n \n>=\n \nb\n:\n\n            \nreturn\n \n(\nNone\n,\nNone\n)\n\n\n\nx\n,\n \ny\n \n=\n \nroot\n(\nfunc\n,\n \n0.0\n,\n \n1.0\n,\n \n.\n1\n)\n\n\nprint\n(\nx\n,\n \ny\n)\n\n\n\nx\n,\n \ny\n \n=\n \nroot\n(\nmath\n.\ncos\n,\n \n0.0\n,\n \n4\n,\n \n.\n1\n)\n\n\nprint\n(\nx\n,\n \ny\n)\n\n\n\n\n\n\n\n1\n2\n3\nPopulating the interactive namespace from numpy and matplotlib\n0.7 0.7999999999999999\n1.5000000000000002 1.6000000000000003\n\n\n\n\n\n\nThe visual inspection will confirm. Let\u2019s take the first function, \nf(x) = x^3 - 10x^2 + 5\nf(x) = x^3 - 10x^2 + 5\n, and the inspected range, \n[0.0, 1.0]\n[0.0, 1.0]\n, to plot a graph.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nvector\n \n=\n \narange\n(\n-\n10\n,\n \n20\n,\n \n0.05\n)\n \n# from numpy\n\n\n\nplot\n(\nvector\n,\n \nfunc\n(\nvector\n))\n\n\nxlabel\n(\n'x-axis'\n)\n\n\nylabel\n(\n'y-axis'\n)\n\n\ntitle\n(\n'Find the roots'\n)\n\n\naxis\n([\n0.\n,\n \n2.\n,\n \n-\n1.\n,\n \n6.\n])\n\n\n# vert line\n\n\n# axvline(x = 4.,color = 'k',ls = 'dashed')\n\n\n# horiz line\n\n\naxhline\n(\ny\n \n=\n \n0\n,\n \ncolor\n \n=\n \n'k'\n,\nls\n \n=\n \n'dashed'\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\nBut, there is more than one root to the polynomial function, that is, \nf(x) = x^3 - 10x^2 + 5\nf(x) = x^3 - 10x^2 + 5\n. Such function should have 3 roots. Indeed, another plot reveals two roots around \nx=0\nx=0\n and another one close to \nx=10\nx=10\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nvector\n \n=\n \narange\n(\n-\n10\n,\n \n20\n,\n \n0.05\n)\n \n# from numpy\n\n\n\nplot\n(\nvector\n,\n \nfunc\n(\nvector\n))\n\n\nxlabel\n(\n'x-axis'\n)\n\n\nylabel\n(\n'y-axis'\n)\n\n\ntitle\n(\n'Find the roots'\n)\n\n\naxis\n([\n-\n2.\n,\n \n12.\n,\n \n-\n2.\n,\n \n6.\n])\n\n\n# vert line\n\n\n# axvline(x = 4.,color = 'k',ls = 'dashed')\n\n\n# horiz line\n\n\naxhline\n(\ny\n \n=\n \n0\n,\n \ncolor\n \n=\n \n'k'\n,\nls\n \n=\n \n'dashed'\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\nMethod of Bisection\n\n\nThe method of bisection \u001cfinds the root by successively halving the interval until it becomes sufficiently small.\n\n\nBisection is not the fastest method available for computing roots, but it is the most reliable. Once a root has been bracketed, bisection will always \u001cfind it. The method of bisection works in the following manner:\n\n\n\n\nIf there is a root between \nx1\nx1\n and \nx2\nx2\n, then \nf(x1)*f(x2) < 0\nf(x1)*f(x2) < 0\n.\n\n\nNext, we compute \nf(x3)\nf(x3)\n, where \nx3 = (x1 + x2) = 2\nx3 = (x1 + x2) = 2\n.\n\n\nIf \nf(x2) * f(x3) < 0\nf(x2) * f(x3) < 0\n, then the root must be in \n(x2; x3)\n(x2; x3)\n; we replace the original bound \nx1\nx1\n by \nx3\nx3\n.\n\n\nOtherwise, the root lies between \nx1\nx1\n and \nx3\nx3\n; in this case, \nx3\nx3\n replaces \nx2\nx2\n.\n\n\n\n\n\n\nThis process is repeated until the interval is reduced to a (previously) speci\u001cfied value, say \n\\epsilon\n\\epsilon\n.\n\n\nThe number of bisections required to reach the prescribed limit, \n\\epsilon\n\\epsilon\n, is given by equation:\n\n\n\n\n\n\n n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2} \n\n\n n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2} \n\n\n\n\nLet\u2019s continue with the example from above (\nf(x) = x^3 - 10x^2 + 5\nf(x) = x^3 - 10x^2 + 5\n).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\ndef\n \nbisect\n(\nf\n,\n \nx1\n,\n \nx2\n,\n \nepsilon\n \n=\n \n1.0e-9\n):\n\n    \nf1\n \n=\n \nf\n(\nx1\n)\n\n    \nf2\n \n=\n \nf\n(\nx2\n)\n\n    \nif\n \nf1\n \n*\n \nf2\n \n>\n \n0.0\n:\n\n        \nprint\n(\n'x1 and x2 are on the same side of x-axis'\n)\n\n        \nreturn\n   \n    \nn\n \n=\n \nmath\n.\nceil\n(\nmath\n.\nlog\n(\nabs\n(\nx2\n \n-\n \nx1\n)\n/\nepsilon\n)\n/\nmath\n.\nlog\n(\n2.0\n))\n\n    \nn\n \n=\n \nint\n(\nn\n)\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nn\n):\n\n        \nx3\n \n=\n \n0.5\n \n*\n \n(\nx1\n \n+\n \nx2\n)\n\n        \nf3\n \n=\n \nf\n(\nx3\n)\n\n        \nif\n \nf3\n \n==\n \n0.0\n:\n \nreturn\n \nx3\n\n        \nif\n \nf2\n \n*\n \nf3\n \n<\n \n0.0\n:\n\n            \nx1\n \n=\n \nx3\n\n            \nf1\n \n=\n \nf3\n\n        \nelse\n:\n\n            \nx2\n \n=\n \nx3\n\n            \nf2\n \n=\n \nf3\n\n    \nreturn\n \n(\nx1\n \n+\n \nx2\n)\n/\n2.0\n\n\n\nprint\n(\nbisect\n(\nfunc\n,\n \n0.70\n,\n \n0.8\n,\n \n1.0e-4\n))\n \n# more precise than the incremental search method\n\n\nprint\n(\nbisect\n(\nfunc\n,\n \n0.70\n,\n \n0.8\n,\n \n1.0e-9\n))\n \n# even more decimals!\n\n\n\n\n\n\n\n1\n2\n0.734619140625\n0.7346035074442625\n\n\n\n\n\n\nNewton-Raphson Method\n\n\nThis other method is an algorithm that requires the derivative of the function to evaluate the roots. Therefore, it is usable only in problems where the derivative can be readily computed. It does not require the value at two points to start with. We start with an initial guess which is reasonably close to the true root. Then the function is approximated by its tangent line and the x-intercept of the tangent line is calculated. This value is taken as the next guess and the process is repeated. The Newton-Raphson formula is shown below.\n\n\n\n\nx_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)} \n\n\nx_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)} \n\n\n\n\nLet\u2019s run an example on the quadratic equation \n2x^2 \u2212 3x \u22125 = 0\n2x^2 \u2212 3x \u22125 = 0\n and its two tangents. It can be seen that the zeros are at \nx = -1\nx = -1\n and \nx = 2.5\nx = 2.5\n. By the way, the derivative of the equation is: \n4x - 3\n4x - 3\n\n\nFunction \nnr()\nnr()\n is called twice, and we get the roots nearer to the corresponding starting values.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n# the function\n\n\ndef\n \nf\n(\nx\n):\n\n    \nreturn\n \n2.0\n \n*\n \nx\n**\n2\n \n-\n \n3\n*\nx\n \n-\n \n5\n\n\n\n# the derivative\n\n\ndef\n \ndf\n(\nx\n):\n\n    \nreturn\n \n4.0\n \n*\n \nx\n \n-\n \n3\n\n\n\n# the algorithm\n\n\ndef\n \nnr\n(\nx\n,\n \ntol\n \n=\n \n1.0e-9\n):\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n30\n):\n\n        \ndx\n \n=\n \n-\nf\n(\nx\n)\n/\ndf\n(\nx\n)\n\n        \n#print(x)\n\n        \nx\n \n=\n \nx\n \n+\n \ndx\n\n        \nif\n \nabs\n(\ndx\n)\n \n<\n \ntol\n:\n\n            \nreturn\n \nx\n\n\n\nprint\n(\n'The roots:'\n)\n\n\nprint\n(\nnr\n(\n4\n))\n\n\nprint\n(\nnr\n(\n0\n))\n\n\n\n\n\n\n\n1\n2\n3\nThe roots:\n2.5\n-1.0\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n# the function\n\n\ndef\n \nf\n(\nx\n):\n\n    \nreturn\n \n2.0\n \n*\n \nx\n**\n2\n \n-\n \n3\n*\nx\n \n-\n \n5\n\n\n\n# the derivative\n\n\ndef\n \ndf\n(\nx\n):\n\n    \nreturn\n \n4.0\n \n*\n \nx\n \n-\n \n3\n\n\n\n# the alogorithm\n\n\ndef\n \nnr\n(\nx\n,\n \ntol\n \n=\n \n1.0e-9\n):\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n30\n):\n\n        \ndx\n \n=\n \n-\nf\n(\nx\n)\n/\ndf\n(\nx\n)\n\n        \nprint\n(\nx\n)\n\n        \nx\n \n=\n \nx\n \n+\n \ndx\n\n        \nif\n \nabs\n(\ndx\n)\n \n<\n \ntol\n:\n\n            \nreturn\n \nx\n\n\n\nprint\n(\n'The iterations (nr(4):'\n)\n\n\nprint\n(\nnr\n(\n4\n))\n\n\nprint\n(\n'The iterations (nr(0):'\n)\n\n\nprint\n(\nnr\n(\n0\n))\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nThe iterations (nr(4):\n4\n2.8461538461538463\n2.528581510232886\n2.500229650067341\n2.5000000150663526\n2.5\n2.5\nThe iterations (nr(0):\n0\n-1.6666666666666667\n-1.0919540229885056\n-1.002295264224362\n-1.0000015032391993\n-1.0000000000006457\n-1.0\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n# the function\n\n\ndef\n \nf\n(\nx\n):\n\n    \nreturn\n \n2.0\n \n*\n \nx\n**\n2\n \n-\n \n3\n*\nx\n \n-\n \n5\n\n\n\n# the derivative\n\n\ndef\n \ndf\n(\nx\n):\n\n    \nreturn\n \n4.0\n \n*\n \nx\n \n-\n \n3\n\n\n\n# the plot\n\n\nvf\n \n=\n \nvectorize\n(\nf\n)\n\n\nx\n \n=\n \nlinspace\n(\n-\n2\n,\n \n5\n,\n \n100\n)\n\n\ny\n \n=\n \nvf\n(\nx\n)\n\n\n\n# tangents at x = 3 and x = 4, using one point slope formula\n\n\nx1\n \n=\n \n4\n\n\ntg1\n \n=\n \ndf\n(\nx1\n)\n*\n(\nx\n-\nx1\n)\n \n+\n \nf\n(\nx1\n)\n\n\nx1\n \n=\n \n3\n\n\ntg2\n \n=\n \ndf\n(\nx1\n)\n*\n(\nx\n-\nx1\n)\n \n+\n \nf\n(\nx1\n)\n\n\n\ngrid\n(\nTrue\n)\n\n\nplot\n(\nx\n,\ny\n)\n\n\nplot\n(\nx\n,\ntg1\n)\n\n\nplot\n(\nx\n,\ntg2\n)\n\n\nylim\n([\n-\n20\n,\n40\n])\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\n6.6, System of Linear Equations\n\u00b6\n\n\nA system of \nm\nm\n linear equations with \nn\nn\n unknowns can be written in a matrix form and can be solved by using several standard techniques like the Gaussian elimination.\n\n\nNon-homogeneous matrix equations of the form \nAx = b\nAx = b\n can be solved by matrix inversion to obtain \nx = A^{\u22121}b\nx = A^{\u22121}b\n. The system of equations\n\n$$\n\n\\begin{align}\n\n\\ 4x + y - 2z &= 0\n\n\\ 2x - 3y + 3z &= 9 \n\n\\ -6x - 2y + z &= 0\n\n\\end{align}\n\n$$\n\n\ncan be represented in the matrix form as\n\n\n\n\n\n \\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}\n\n\n\n\n \\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}\n\n\n\n\n\nand can be solved by \u001cnding the inverse of the coe\u001ecient matrix.\n\n\n\n\n\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n {\\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}}^{-1}\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}  \n\n\n\n\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n {\\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}}^{-1}\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}  \n\n\n\n\n\nLet\u2019s solve the equation.\n\n\n1\n2\n3\n4\nb\n \n=\n \narray\n([\n0\n,\n \n9\n,\n \n0\n])\n\n\nA\n \n=\n \narray\n([[\n4\n,\n1\n,\n-\n2\n],\n \n[\n2\n,\n \n-\n3\n,\n \n3\n],\n \n[\n-\n6\n,\n \n-\n2\n,\n \n1\n]])\n\n\n\nprint\n(\ndot\n(\nlinalg\n.\ninv\n(\nA\n),\nb\n))\n\n\n\n\n\n\n\n1\n[ 0.75 -2.    0.5 ]\n\n\n\n\n\n\nx = 0.75\nx = 0.75\n, \ny = \u22122\ny = \u22122\n, and \nz = 0.5\nz = 0.5\n.\n\n\n6.7, Least Squares Fitting\n\u00b6\n\n\nA mathematical procedure for \u001cfinding the best-\u001cfitting curve \nf(x)\nf(x)\n for a given set of points \n(x_n, y_n)\n(x_n, y_n)\n by minimizing the sum of the squares of the vertical off\u001bsets of the points from the curve is called least squares fi\u001ctting. \n\n\n1\n2\n3\n4\n5\n6\n# the raw data is generated by adding random numbers (between -1 and 1) to the y coordinates\n\n\n# generated by y = 3\u2217x + 2\n\n\n\nNP\n \n=\n \n50\n \n# observations\n\n\nr\n \n=\n \n2\n \n*\n \nranf\n([\nNP\n])\n \n-\n \n0.5\n\n\nprint\n(\nr\n)\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n[ 0.99203986 -0.36064885 -0.48805087  0.36617374  0.29567002  1.2411945\n  1.03900373 -0.32058291  0.45809449  0.7741206   1.11819248  1.04958093\n -0.47823795  0.14105707 -0.30262528  1.07469769 -0.44660783 -0.49313542\n  0.50995051 -0.11336372  1.47245243  0.34474142  0.52352519 -0.17051734\n  1.35723902  1.09822309  1.34626113  0.81862428  1.48731849  0.32958741\n  0.77572583  1.47898135  1.36664053  0.69356794  0.4978461   1.17619706\n -0.24303519  0.43521904  0.88177674  0.28791814 -0.22513721  0.78901677\n  0.15126297  1.24899092 -0.02995487  1.2136114   0.46617806 -0.29024591\n  0.23178231  0.50829941]\n\n\n\n\n\n\n1\n2\nx\n \n=\n \nlinspace\n(\n0\n,\n \n10\n,\n \nNP\n)\n\n\nprint\n(\nx\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n[  0.           0.20408163   0.40816327   0.6122449    0.81632653\n   1.02040816   1.2244898    1.42857143   1.63265306   1.83673469\n   2.04081633   2.24489796   2.44897959   2.65306122   2.85714286\n   3.06122449   3.26530612   3.46938776   3.67346939   3.87755102\n   4.08163265   4.28571429   4.48979592   4.69387755   4.89795918\n   5.10204082   5.30612245   5.51020408   5.71428571   5.91836735\n   6.12244898   6.32653061   6.53061224   6.73469388   6.93877551\n   7.14285714   7.34693878   7.55102041   7.75510204   7.95918367\n   8.16326531   8.36734694   8.57142857   8.7755102    8.97959184\n   9.18367347   9.3877551    9.59183673   9.79591837  10.        ]\n\n\n\n\n\n\n1\n2\ndata\n \n=\n \n3\n \n*\n \nx\n \n+\n \n2\n \n+\n \nr\n\n\nprint\n(\ndata\n)\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n[  2.99203986   2.25159605   2.73643893   4.20290843   4.74464961\n   6.30241899   6.71247312   5.96513138   7.35605367   8.28432469\n   9.24064146   9.7842748    8.86870082  10.10024074  10.26880329\n  12.25837115  11.34931053  11.91502784  13.53035867  13.51928934\n  15.71735039  15.20188427  15.99291295  15.91111532  18.05111657\n  18.40434554  19.26462847  19.34923652  20.63017563  20.08468945\n  21.14307277  22.45857319  22.95847726  22.89764957  23.31417263\n  24.60476849  23.79778114  25.08828026  26.14708286  26.16546916\n  26.26465871  27.89105759  27.86554869  29.57552153  28.90882064\n  30.76463181  30.62944337  30.48526429  31.61953741  32.50829941]\n\n\n\n\n\n\n1\n2\n3\nxbar\n \n=\n \nmean\n(\nx\n)\n\n\nybar\n \n=\n \nmean\n(\ndata\n)\n\n\nprint\n(\nxbar\n,\n \nybar\n)\n\n\n\n\n\n\n\n1\n5.0 17.5215723854\n\n\n\n\n\n\n1\n2\n3\nb\n \n=\n \nsum\n(\ndata\n \n*\n \n(\nx\n-\nxbar\n))\n \n/\n \nsum\n(\nx\n*\n(\nx\n-\nxbar\n))\n\n\na\n \n=\n \nybar\n \n-\n \nxbar\n \n*\n \nb\n\n\nprint\n(\na\n,\n \nb\n)\n\n\n\n\n\n\n\n1\n2.41774233468 3.02076601014\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\ny\n \n=\n \na\n \n+\n \nb\n \n*\n \nx\n\n\n\nplot\n(\nx\n,\n \ny\n)\n\n\nplot\n(\nx\n,\n \ndata\n,\n \n'ob'\n)\n\n\n\nshow\n()\n\n\n\n\n\n\n\n\n\n6.8, Interpolation\n\u00b6\n\n\nInterpolation is the process of constructing a function \nf(x)\nf(x)\n from a set of data points \n(x_i, y_i)\n(x_i, y_i)\n, in the interval \na < x < b\na < x < b\n that will satisfy \ny_i = f(x_i)\ny_i = f(x_i)\n\nfor any point in the same interval.\n\n\nIn other words, we find an equation with several observation by reverse engineering; we stand at the doorstep of machine and statistical learning here!\n\n\nThe easiest way is to construct a polynomial of degree \nn\nn\n, such as a Newton\u2019s interpolating polynomial, that passes through the \nn + 1\nn + 1\n distinct data points. Consult the document for the mathematical demonstration. Let\u2019s do an example.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n# calculate the coefficients\n\n\n\nfrom\n \ncopy\n \nimport\n \ncopy\n\n\n\ndef\n \ncoef\n(\nx\n,\n \ny\n):\n\n    \na\n \n=\n \ncopy\n(\ny\n)\n \n# copy the list y to coefficient a\n\n    \nm\n \n=\n \nlen\n(\nx\n)\n\n    \nfor\n \nk\n \nin\n \nrange\n(\n1\n,\n \nm\n):\n \n# with two loops, calculate the difference\n\n        \ntmp\n \n=\n \ncopy\n(\na\n)\n\n        \nfor\n \ni\n \nin\n \nrange\n(\nk\n,\n \nm\n):\n\n            \ntmp\n[\ni\n]\n \n=\n \n(\na\n[\ni\n]\n \n-\n \na\n[\ni\n-\n1\n])\n \n/\n \n(\nx\n[\ni\n]\n \n-\n \nx\n[\ni\n-\nk\n])\n\n        \na\n \n=\n \ncopy\n(\ntmp\n)\n\n    \nreturn\n \na\n\n\n\n\n\n\n\n1\n2\n3\n4\nx\n \n=\n \n[\n0\n,\n \n1\n,\n \n2\n,\n \n3\n]\n\n\ny\n \n=\n \n[\n0\n,\n \n3\n,\n \n14\n,\n \n39\n]\n\n\n\nprint\n(\ncoef\n(\nx\n,\n \ny\n))\n\n\n\n\n\n\n\n1\n[0, 3.0, 4.0, 1.0]\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# the same can be done with a Numpy array\n\n\n\ndef\n \ncoef\n(\nx\n,\n \ny\n):\n\n    \na\n \n=\n \ncopy\n(\ny\n)\n\n    \nm\n \n=\n \nlen\n(\nx\n)\n\n    \nfor\n \nk\n \nin\n \nrange\n(\n1\n,\n \nm\n):\n\n        \na\n[\nk\n:\nm\n]\n \n=\n \n(\na\n[\nk\n:\nm\n]\n \n-\n \na\n[\nk\n-\n1\n])\n \n/\n \n(\nx\n[\nk\n:\nm\n]\n-\nx\n[\nk\n-\n1\n])\n\n    \nreturn\n \na\n\n\n\n\n\n\n\n1\n2\n3\n4\nx\n \n=\n \narray\n([\n0\n,\n \n1\n,\n \n2\n,\n \n3\n])\n\n\ny\n \n=\n \narray\n([\n0\n,\n \n3\n,\n \n14\n,\n \n39\n])\n\n\n\nprint\n(\ncoef\n(\nx\n,\n \ny\n))\n\n\n\n\n\n\n\n1\n[0 3 4 1]\n\n\n\n\n\n\nThe next step is to calculate the value of \ny\ny\n for any given value of \nx\nx\n, using the coffe\u001ecients already calculated (above).\n\n\nThe program generates 20 new values of \nx\nx\n, and calculate corresponding values of \ny\ny\n and plots them along with the original data points.\n\n\nThe function \neval()\n uses the recurrence relation.\n\n\nYou may explore the results for new points outside the range by changing the second argument of line \nnewx = linspace(0,3,NP)\nnewx = linspace(0,3,NP)\n to a higher value.\n\n\n1\n2\n3\n4\n5\n6\ndef\n \neval\n(\na\n,\n \nxpoints\n,\n \nx\n):\n\n    \nn\n \n=\n \nlen\n(\nxpoints\n)\n \n-\n \n1\n\n    \np\n \n=\n \na\n[\nn\n]\n\n    \nfor\n \nk\n \nin\n \nrange\n(\n1\n,\nn\n+\n1\n):\n\n        \np\n \n=\n \na\n[\nn\n-\nk\n]\n \n+\n \n(\nx\n \n-\nxpoints\n[\nn\n-\nk\n])\n \n*\n \np\n\n    \nreturn\n \np\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\ndef\n \ncoef\n(\nx\n,\n \ny\n):\n\n    \na\n \n=\n \ncopy\n(\ny\n)\n\n    \nm\n \n=\n \nlen\n(\nx\n)\n\n    \nfor\n \nk\n \nin\n \nrange\n(\n1\n,\nm\n):\n\n        \na\n[\nk\n:\nm\n]\n \n=\n \n(\na\n[\nk\n:\nm\n]\n \n-\n \na\n[\nk\n-\n1\n])\n/\n(\nx\n[\nk\n:\nm\n]\n-\nx\n[\nk\n-\n1\n])\n\n    \nreturn\n \na\n\n\n\n\n\n\n\n1\n2\n3\nx\n \n=\n \narray\n([\n0\n,\n \n1\n,\n \n2\n,\n \n3\n])\n\n\ny\n \n=\n \narray\n([\n0\n,\n \n3\n,\n \n14\n,\n \n39\n])\n\n\ncoef\n \n=\n \ncoef\n(\nx\n,\n \ny\n)\n\n\n\n\n\n\n\n1\n2\n3\nNP\n \n=\n \n20\n\n\nnewx\n \n=\n \nlinspace\n(\n0\n,\n3\n,\n \nNP\n)\n \n# New x-values\n\n\nnewy\n \n=\n \nzeros\n(\nNP\n)\n\n\n\n\n\n\n\n1\n2\nfor\n \ni\n \nin\n \nrange\n(\nNP\n):\n \n# evaluate y-values\n\n    \nnewy\n[\ni\n]\n \n=\n \neval\n(\ncoef\n,\n \nx\n,\n \nnewx\n[\ni\n])\n\n\n\n\n\n\n\n1\n2\n3\n4\nplot\n(\nnewx\n,\n \nnewy\n,\n'-x'\n)\n\n\nplot\n(\nx\n,\n \ny\n,\n'ro'\n)\n\n\n\nshow\n()",
            "title": "Python for Education"
        },
        {
            "location": "/Python for Education/#25-python-lists",
            "text": "1\n2\n3\n4\n5\n6 a   =   'hello world'  # extract, subset  print ( a [ 3 : 5 ])  print ( a [ 6 :])  print ( a [: 5 ])    1\n2\n3 lo\nworld\nhello   1\n2\n3\n4\n5 a   =   [ 1 ,   2 ]  print ( a )  print ( a   *   2 )   # double print  print ( a   +   [ 1 ,   1 ])   # concatenate    1\n2\n3 [1, 2]  [1, 2, 1, 2]  [1, 2, 1, 1]    1\n2\n3\n4\n5\n6\n7 b   =   [ 1 , 2 , a ]  print ( b )   # embed  b [ 2 ]   =   3  print ( b )   # change a mutable from the above list  # Output:    1\n2 [1, 2, [1, 2]]  [1, 2, 3]",
            "title": "2.5, Python Lists"
        },
        {
            "location": "/Python for Education/#27-input-from-the-keyboard",
            "text": "input  for numeric data.  raw_input  for string data.   1\n2\n3\n4 x   =   input ( 'Enter an integer (x): ' )  y   =   input ( 'Enter another one (y): ' )  print ( 'The sum is = ' ,   x   +   y )   # print as numeric, input    1\n2\n3 Enter an integer (x): 1\nEnter another one (y): 2\n('The sum is = ', 3)   1\n2\n3\n4 t   =   raw_input ( 'Enter an integer: ' )  u   =   raw_input ( 'Enter another one: ' )  print ( 'The sum is = ' ,   t   +   u )   # print as string, raw input    1\n2\n3 Enter an integer: 2\nEnter another one: 3\n('The sum is = ', '23')   1\n2\n3\n4 v   =   input ( 'Enter an integer: ' )  w   =   input ( 'Enter another one: ' )  print ( 'The sum is = ' ,   str ( v )   +   str ( w ))   # print as string, input changes into a string    1\n2\n3 Enter an integer: 1\nEnter another one: 1\n('The sum is = ', '11')   1\n2\n3\n4 y1   =   raw_input ( 'Enter an integer: ' )  y2   =   raw_input ( 'Enter another one: ' )  print (   'The sum is = ' ,   int ( y1 )   +   int ( y2 ))   # print as numeric, raw input changed into integer    1\n2\n3 Enter an integer: 2\nEnter another one: 2\n('The sum is = ', 4)   1\n2\n3\n4 y3   =   raw_input ( 'Enter an integer: ' )  y4   =   raw_input ( 'Enter another one: ' )  print (   'The sum is = ' ,   float ( y3 )   +   float ( y4 ))   # print as numeric, raw input changed into float    1\n2\n3 Enter an integer: 1\nEnter another one: 2\n('The sum is = ', 3.0)",
            "title": "2.7, Input from the Keyboard"
        },
        {
            "location": "/Python for Education/#211-line-joining",
            "text": "1\n2\n3\n4 year   =   input ( 'year: ' )  month   =   input ( 'month: ' )  if   1900   <   year   <   2100   and   1   <=   month   <=   12   : \n     print ( 'I am so long and will not fit in a single line' )    1\n2\n3 year :   2016  month :   10  I   am   so   long   and   will   not   fit   in   a   single   line    1\n2\n3\n4\n5\n6\n7 # simplify the code, shorten the line  year   =   input ( 'year: ' )  month   =   input ( 'month: ' )  if   1900   <   year   <   2100 \\\n  and   1   <=   month   <=   12   : \n     print ( 'I am so long and will \\   not fit in a single line' )    1\n2\n3 year :   2016  month :   10  I   am   so   long   and   will   not   fit   in   a   single   line    1\n2 # object, variable type  print ( type ( 4.5 ))    1 <type 'float'>",
            "title": "2.11, Line joining"
        },
        {
            "location": "/Python for Education/#214-more-on-strings-and-lists",
            "text": "1\n2\n3\n4\n5 s   =   'hello world'  # string length  print ( len ( s ))  print ( s . upper ())    1\n2 11\nHELLO WORLD   1\n2 # help with  help ( str )      1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352 Help   on   class   str   in   module   __builtin__ :  class   str ( basestring ) \n  |    str ( object = '' )   ->   string \n  |   \n  |    Return   a   nice   string   representation   of   the   object . \n  |    If   the   argument   is   a   string ,   the   return   value   is   the   same   object . \n  |   \n  |    Method   resolution   order : \n  |        str \n  |        basestring \n  |        object \n  |   \n  |    Methods   defined   here : \n  |   \n  |    __add__ (...) \n  |        x . __add__ ( y )   <==>   x + y \n  |   \n  |    __contains__ (...) \n  |        x . __contains__ ( y )   <==>   y   in   x \n  |   \n  |    __eq__ (...) \n  |        x . __eq__ ( y )   <==>   x == y \n  |   \n  |    __format__ (...) \n  |        S . __format__ ( format_spec )   ->   string \n  |       \n  |        Return   a   formatted   version   of   S   as   described   by   format_spec . \n  |   \n  |    __ge__ (...) \n  |        x . __ge__ ( y )   <==>   x >= y \n  |   \n  |    __getattribute__ (...) \n  |        x . __getattribute__ ( 'name' )   <==>   x . name \n  |   \n  |    __getitem__ (...) \n  |        x . __getitem__ ( y )   <==>   x [ y ] \n  |   \n  |    __getnewargs__ (...) \n  |   \n  |    __getslice__ (...) \n  |        x . __getslice__ ( i ,   j )   <==>   x [ i : j ] \n  |       \n  |        Use   of   negative   indices   is   not   supported . \n  |   \n  |    __gt__ (...) \n  |        x . __gt__ ( y )   <==>   x > y \n  |   \n  |    __hash__ (...) \n  |        x . __hash__ ()   <==>   hash ( x ) \n  |   \n  |    __le__ (...) \n  |        x . __le__ ( y )   <==>   x <= y \n  |   \n  |    __len__ (...) \n  |        x . __len__ ()   <==>   len ( x ) \n  |   \n  |    __lt__ (...) \n  |        x . __lt__ ( y )   <==>   x < y \n  |   \n  |    __mod__ (...) \n  |        x . __mod__ ( y )   <==>   x % y \n  |   \n  |    __mul__ (...) \n  |        x . __mul__ ( n )   <==>   x * n \n  |   \n  |    __ne__ (...) \n  |        x . __ne__ ( y )   <==>   x != y \n  |   \n  |    __repr__ (...) \n  |        x . __repr__ ()   <==>   repr ( x ) \n  |   \n  |    __rmod__ (...) \n  |        x . __rmod__ ( y )   <==>   y % x \n  |   \n  |    __rmul__ (...) \n  |        x . __rmul__ ( n )   <==>   n * x \n  |   \n  |    __sizeof__ (...) \n  |        S . __sizeof__ ()   ->   size   of   S   in   memory ,   in   bytes \n  |   \n  |    __str__ (...) \n  |        x . __str__ ()   <==>   str ( x ) \n  |   \n  |    capitalize (...) \n  |        S . capitalize ()   ->   string \n  |       \n  |        Return   a   copy   of   the   string   S   with   only   its   first   character \n  |        capitalized . \n  |   \n  |    center (...) \n  |        S . center ( width [,   fillchar ])   ->   string \n  |       \n  |        Return   S   centered   in   a   string   of   length   width .   Padding   is \n  |        done   using   the   specified   fill   character   ( default   is   a   space ) \n  |   \n  |    count (...) \n  |        S . count ( sub [,   start [,   end ]])   ->   int \n  |       \n  |        Return   the   number   of   non - overlapping   occurrences   of   substring   sub   in \n  |        string   S [ start : end ].    Optional   arguments   start   and   end   are   interpreted \n  |        as   in   slice   notation . \n  |   \n  |    decode (...) \n  |        S . decode ([ encoding [, errors ]])   ->   object \n  |       \n  |        Decodes   S   using   the   codec   registered   for   encoding .   encoding   defaults \n  |        to   the   default   encoding .   errors   may   be   given   to   set   a   different   error \n  |        handling   scheme .   Default   is   'strict'   meaning   that   encoding   errors   raise \n  |        a   UnicodeDecodeError .   Other   possible   values   are   'ignore'   and   'replace' \n  |        as   well   as   any   other   name   registered   with   codecs . register_error   that   is \n  |        able   to   handle   UnicodeDecodeErrors . \n  |   \n  |    encode (...) \n  |        S . encode ([ encoding [, errors ]])   ->   object \n  |       \n  |        Encodes   S   using   the   codec   registered   for   encoding .   encoding   defaults \n  |        to   the   default   encoding .   errors   may   be   given   to   set   a   different   error \n  |        handling   scheme .   Default   is   'strict'   meaning   that   encoding   errors   raise \n  |        a   UnicodeEncodeError .   Other   possible   values   are   'ignore' ,   'replace'   and \n  |        'xmlcharrefreplace'   as   well   as   any   other   name   registered   with \n  |        codecs . register_error   that   is   able   to   handle   UnicodeEncodeErrors . \n  |   \n  |    endswith (...) \n  |        S . endswith ( suffix [,   start [,   end ]])   ->   bool \n  |       \n  |        Return   True   if   S   ends   with   the   specified   suffix ,   False   otherwise . \n  |        With   optional   start ,   test   S   beginning   at   that   position . \n  |        With   optional   end ,   stop   comparing   S   at   that   position . \n  |        suffix   can   also   be   a   tuple   of   strings   to   try . \n  |   \n  |    expandtabs (...) \n  |        S . expandtabs ([ tabsize ])   ->   string \n  |       \n  |        Return   a   copy   of   S   where   all   tab   characters   are   expanded   using   spaces . \n  |        If   tabsize   is   not   given ,   a   tab   size   of   8   characters   is   assumed . \n  |   \n  |    find (...) \n  |        S . find ( sub   [, start   [, end ]])   ->   int \n  |       \n  |        Return   the   lowest   index   in   S   where   substring   sub   is   found , \n  |        such   that   sub   is   contained   within   S [ start : end ].    Optional \n  |        arguments   start   and   end   are   interpreted   as   in   slice   notation . \n  |       \n  |        Return   - 1   on   failure . \n  |   \n  |    format (...) \n  |        S . format ( * args ,   ** kwargs )   ->   string \n  |       \n  |        Return   a   formatted   version   of   S ,   using   substitutions   from   args   and   kwargs . \n  |        The   substitutions   are   identified   by   braces   ( '{'   and   '}' ). \n  |   \n  |    index (...) \n  |        S . index ( sub   [, start   [, end ]])   ->   int \n  |       \n  |        Like   S . find ()   but   raise   ValueError   when   the   substring   is   not   found . \n  |   \n  |    isalnum (...) \n  |        S . isalnum ()   ->   bool \n  |       \n  |        Return   True   if   all   characters   in   S   are   alphanumeric \n  |        and   there   is   at   least   one   character   in   S ,   False   otherwise . \n  |   \n  |    isalpha (...) \n  |        S . isalpha ()   ->   bool \n  |       \n  |        Return   True   if   all   characters   in   S   are   alphabetic \n  |        and   there   is   at   least   one   character   in   S ,   False   otherwise . \n  |   \n  |    isdigit (...) \n  |        S . isdigit ()   ->   bool \n  |       \n  |        Return   True   if   all   characters   in   S   are   digits \n  |        and   there   is   at   least   one   character   in   S ,   False   otherwise . \n  |   \n  |    islower (...) \n  |        S . islower ()   ->   bool \n  |       \n  |        Return   True   if   all   cased   characters   in   S   are   lowercase   and   there   is \n  |        at   least   one   cased   character   in   S ,   False   otherwise . \n  |   \n  |    isspace (...) \n  |        S . isspace ()   ->   bool \n  |       \n  |        Return   True   if   all   characters   in   S   are   whitespace \n  |        and   there   is   at   least   one   character   in   S ,   False   otherwise . \n  |   \n  |    istitle (...) \n  |        S . istitle ()   ->   bool \n  |       \n  |        Return   True   if   S   is   a   titlecased   string   and   there   is   at   least   one \n  |        character   in   S ,   i . e .   uppercase   characters   may   only   follow   uncased \n  |        characters   and   lowercase   characters   only   cased   ones .   Return   False \n  |        otherwise . \n  |   \n  |    isupper (...) \n  |        S . isupper ()   ->   bool \n  |       \n  |        Return   True   if   all   cased   characters   in   S   are   uppercase   and   there   is \n  |        at   least   one   cased   character   in   S ,   False   otherwise . \n  |   \n  |    join (...) \n  |        S . join ( iterable )   ->   string \n  |       \n  |        Return   a   string   which   is   the   concatenation   of   the   strings   in   the \n  |        iterable .    The   separator   between   elements   is   S . \n  |   \n  |    ljust (...) \n  |        S . ljust ( width [,   fillchar ])   ->   string \n  |       \n  |        Return   S   left - justified   in   a   string   of   length   width .   Padding   is \n  |        done   using   the   specified   fill   character   ( default   is   a   space ). \n  |   \n  |    lower (...) \n  |        S . lower ()   ->   string \n  |       \n  |        Return   a   copy   of   the   string   S   converted   to   lowercase . \n  |   \n  |    lstrip (...) \n  |        S . lstrip ([ chars ])   ->   string   or   unicode \n  |       \n  |        Return   a   copy   of   the   string   S   with   leading   whitespace   removed . \n  |        If   chars   is   given   and   not   None ,   remove   characters   in   chars   instead . \n  |        If   chars   is   unicode ,   S   will   be   converted   to   unicode   before   stripping \n  |   \n  |    partition (...) \n  |        S . partition ( sep )   ->   ( head ,   sep ,   tail ) \n  |       \n  |        Search   for   the   separator   sep   in   S ,   and   return   the   part   before   it , \n  |        the   separator   itself ,   and   the   part   after   it .    If   the   separator   is   not \n  |        found ,   return   S   and   two   empty   strings . \n  |   \n  |    replace (...) \n  |        S . replace ( old ,   new [,   count ])   ->   string \n  |       \n  |        Return   a   copy   of   string   S   with   all   occurrences   of   substring \n  |        old   replaced   by   new .    If   the   optional   argument   count   is \n  |        given ,   only   the   first   count   occurrences   are   replaced . \n  |   \n  |    rfind (...) \n  |        S . rfind ( sub   [, start   [, end ]])   ->   int \n  |       \n  |        Return   the   highest   index   in   S   where   substring   sub   is   found , \n  |        such   that   sub   is   contained   within   S [ start : end ].    Optional \n  |        arguments   start   and   end   are   interpreted   as   in   slice   notation . \n  |       \n  |        Return   - 1   on   failure . \n  |   \n  |    rindex (...) \n  |        S . rindex ( sub   [, start   [, end ]])   ->   int \n  |       \n  |        Like   S . rfind ()   but   raise   ValueError   when   the   substring   is   not   found . \n  |   \n  |    rjust (...) \n  |        S . rjust ( width [,   fillchar ])   ->   string \n  |       \n  |        Return   S   right - justified   in   a   string   of   length   width .   Padding   is \n  |        done   using   the   specified   fill   character   ( default   is   a   space ) \n  |   \n  |    rpartition (...) \n  |        S . rpartition ( sep )   ->   ( head ,   sep ,   tail ) \n  |       \n  |        Search   for   the   separator   sep   in   S ,   starting   at   the   end   of   S ,   and   return \n  |        the   part   before   it ,   the   separator   itself ,   and   the   part   after   it .    If   the \n  |        separator   is   not   found ,   return   two   empty   strings   and   S . \n  |   \n  |    rsplit (...) \n  |        S . rsplit ([ sep   [, maxsplit ]])   ->   list   of   strings \n  |       \n  |        Return   a   list   of   the   words   in   the   string   S ,   using   sep   as   the \n  |        delimiter   string ,   starting   at   the   end   of   the   string   and   working \n  |        to   the   front .    If   maxsplit   is   given ,   at   most   maxsplit   splits   are \n  |        done .   If   sep   is   not   specified   or   is   None ,   any   whitespace   string \n  |        is   a   separator . \n  |   \n  |    rstrip (...) \n  |        S . rstrip ([ chars ])   ->   string   or   unicode \n  |       \n  |        Return   a   copy   of   the   string   S   with   trailing   whitespace   removed . \n  |        If   chars   is   given   and   not   None ,   remove   characters   in   chars   instead . \n  |        If   chars   is   unicode ,   S   will   be   converted   to   unicode   before   stripping \n  |   \n  |    split (...) \n  |        S . split ([ sep   [, maxsplit ]])   ->   list   of   strings \n  |       \n  |        Return   a   list   of   the   words   in   the   string   S ,   using   sep   as   the \n  |        delimiter   string .    If   maxsplit   is   given ,   at   most   maxsplit \n  |        splits   are   done .   If   sep   is   not   specified   or   is   None ,   any \n  |        whitespace   string   is   a   separator   and   empty   strings   are   removed \n  |        from   the   result . \n  |   \n  |    splitlines (...) \n  |        S . splitlines ( keepends = False )   ->   list   of   strings \n  |       \n  |        Return   a   list   of   the   lines   in   S ,   breaking   at   line   boundaries . \n  |        Line   breaks   are   not   included   in   the   resulting   list   unless   keepends \n  |        is   given   and   true . \n  |   \n  |    startswith (...) \n  |        S . startswith ( prefix [,   start [,   end ]])   ->   bool \n  |       \n  |        Return   True   if   S   starts   with   the   specified   prefix ,   False   otherwise . \n  |        With   optional   start ,   test   S   beginning   at   that   position . \n  |        With   optional   end ,   stop   comparing   S   at   that   position . \n  |        prefix   can   also   be   a   tuple   of   strings   to   try . \n  |   \n  |    strip (...) \n  |        S . strip ([ chars ])   ->   string   or   unicode \n  |       \n  |        Return   a   copy   of   the   string   S   with   leading   and   trailing \n  |        whitespace   removed . \n  |        If   chars   is   given   and   not   None ,   remove   characters   in   chars   instead . \n  |        If   chars   is   unicode ,   S   will   be   converted   to   unicode   before   stripping \n  |   \n  |    swapcase (...) \n  |        S . swapcase ()   ->   string \n  |       \n  |        Return   a   copy   of   the   string   S   with   uppercase   characters \n  |        converted   to   lowercase   and   vice   versa . \n  |   \n  |    title (...) \n  |        S . title ()   ->   string \n  |       \n  |        Return   a   titlecased   version   of   S ,   i . e .   words   start   with   uppercase \n  |        characters ,   all   remaining   cased   characters   have   lowercase . \n  |   \n  |    translate (...) \n  |        S . translate ( table   [, deletechars ])   ->   string \n  |       \n  |        Return   a   copy   of   the   string   S ,   where   all   characters   occurring \n  |        in   the   optional   argument   deletechars   are   removed ,   and   the \n  |        remaining   characters   have   been   mapped   through   the   given \n  |        translation   table ,   which   must   be   a   string   of   length   256   or   None . \n  |        If   the   table   argument   is   None ,   no   translation   is   applied   and \n  |        the   operation   simply   removes   the   characters   in   deletechars . \n  |   \n  |    upper (...) \n  |        S . upper ()   ->   string \n  |       \n  |        Return   a   copy   of   the   string   S   converted   to   uppercase . \n  |   \n  |    zfill (...) \n  |        S . zfill ( width )   ->   string \n  |       \n  |        Pad   a   numeric   string   S   with   zeros   on   the   left ,   to   fill   a   field \n  |        of   the   specified   width .    The   string   S   is   never   truncated . \n  |   \n  |    ---------------------------------------------------------------------- \n  |    Data   and   other   attributes   defined   here : \n  |   \n  |    __new__   =   < built - in   method   __new__   of   type   object > \n  |        T . __new__ ( S ,   ...)   ->   a   new   object   with   type   S ,   a   subtype   of   T    1\n2\n3\n4 s   =   'I am a long string'  # split a string on space  print ( s . split ())    1 ['I', 'am', 'a', 'long', 'string']   1\n2\n3\n4\n5 a   =   'abc.abc.abc'  # split a string on dot  aa   =   a . split ( '.' )  print ( aa )    1 ['abc', 'abc', 'abc']   1\n2\n3 # join the elements, join character  mm   =   '+' . join ( aa )  print ( mm )    1 abc+abc+abc   1\n2\n3\n4\n5\n6\n7\n8 a   =   []  # append to a list  a . append ( 3 )  print ( a )  a . append ( 4 )  print ( a )    1\n2 [3]  [3, 4]    1\n2\n3\n4\n5\n6 # insert 2.5 as first element (at index = 0)  a . insert ( 0 ,   2.5 )  # print several items  print ( a ,   a [ 0 ])  print ( len ( a ))    1\n2 ([2.5, 3, 4], 2.5)\n3   1\n2\n3\n4\n5\n6\n7 # copy module  a   =   [ 1 ,   2 ,   3 ,   4 ]  print ( a )  b   =   a  print ( a   ==   b )   # True    1\n2 [1, 2, 3, 4]  True    1\n2 # insert at index = 0  b [ 0 ]   =   5    1\n2\n3 # b is a live duplicate, not an independent copy  print ( a   is   b )  print ( a ,   b )    1\n2 True\n([5, 2, 3, 4], [5, 2, 3, 4])   1\n2\n3 import   copy  c   =   copy . copy ( a )    1\n2\n3 # c is an ind. copy  print ( a   is   c )  print ( a ,   c )    1\n2 False\n([5, 2, 3, 4], [5, 2, 3, 4])   1\n2\n3 # replace at index = 1  c [ 1 ]   =   100  print ( a ,   c )    1 ([5, 2, 3, 4], [5, 100, 3, 4])",
            "title": "2.14, More on Strings and Lists"
        },
        {
            "location": "/Python for Education/#recap-from-the-above-snippets",
            "text": "1\n2\n3\n4\n5\n6\n7 dicty   =   { 'a' :   'apple' ,   'b' :   'berry' ,   'c' :   'cherry' }  for   keyy   in   dicty : \n     print ( 'keys are: ' ),   keyy \n     print ( '-'   *   5 ) \n     print ( 'values are: ' ),   dicty [ keyy ] \n     print ( '-'   *   10 )         1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 keys are:  a\n-----\nvalues are:  apple\n----------\nkeys are:  c\n-----\nvalues are:  cherry\n----------\nkeys are:  b\n-----\nvalues are:  berry\n----------    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 print ( type ( 0 ))  print ( type ( 255 ))  print ( type ( - 1 ))  print ( type ( - 255 ))  print ( type ( - 30000 ))  print ( type ( 30000 ))  print ( type ( - 3500000 ))  print ( type ( 3500000 ))  print ( type ( - 1.5 ))  print ( type ( 1.345456734576345 ))  print ( type ( '4' ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 <type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'float'>\n<type 'float'>\n<type 'str'>   1\n2\n3\n4\n5\n6\n7\n8 a1   =   input ( 'Enter: ' )  a2   =   a1  a3   =   bytes ( a1 )   # 0 - 255  a4   =   int ( a1 )   # -32768 - 32768  a5   =   long ( a1 )   # -2147483648 -  a6   =   float ( a1 )  a9   =   str ( a1 )    1 Enter :   1    1\n2\n3\n4\n5 listnum   =   [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]  for   i   in   listnum : \n     if   i % 2   ==   0 :   # even \n         print ( i ),    1 0 2 4 6 8 10   1\n2\n3 for   i   in   range ( 0 , 10 ): \n     if   i % 2   ==   0 :   # even \n         print ( i ),    1 0 2 4 6 8   1\n2\n3 for   i   in   range ( 0 , 100 , 3 ): \n     if   i % 2   ==   0 :   # even \n         print ( i ),    1 0 6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96   1\n2\n3\n4\n5\n6\n7\n8 listnum   =   [ 'a' , 'b' ]  listtext   =   []  for   i   in   listnum : \n     if   i   ==   'b' :   # even \n         listtext . append ( i )  print   listtext    1 ['b']   1\n2\n3\n4\n5\n6\n7 lst   =   [ 3 , 5 , 7 ]  lst . append ( 9 )  print   lst  lst . append ( lst [ 0 ])  print ( lst )    1\n2 [3, 5, 7, 9]  [3, 5, 7, 9, 3]    1\n2\n3\n4\n5\n6\n7 lst   =   [ 'a' , 'b' , 'c' ]  lst . append ( 'd' )  print ( lst )  lst . append ( lst [ 0 ])  print ( lst )    1\n2 ['a', 'b', 'c', 'd']  ['a', 'b', 'c', 'd', 'a']    1\n2\n3\n4 elements   =   ( 'foo' ,   'bar' ,   'baz' )  for   elem   in   elements : \n     print ( elem )    1\n2\n3 foo\nbar\nbaz   1\n2 for   count ,   elem   in   enumerate ( elements ): \n     print ( count ,   elem )    1\n2\n3 (0, 'foo')\n(1, 'bar')\n(2, 'baz')   1\n2\n3\n4 listnum   =   [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]  listnum . pop ()   # last  print ( listnum )    1 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]   1\n2 listnum . pop ( 0 )   # position 0  print ( listnum )    1 [1, 2, 3, 4, 5, 6, 7, 8, 9]   1\n2 listnum . pop ( 2 )   # position 2  print ( listnum )    1 [1, 2, 4, 5, 6, 7, 8, 9]   1\n2 listnum . remove ( 8 )   # specific element  print ( listnum )    1 [1, 2, 4, 5, 6, 7, 9]   1\n2 del ( listnum [ 0 ])  print ( listnum )    1 [2, 4, 5, 6, 7, 9]    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 word   =   'original'  word2   =   word . upper ()  word3   =   word . capitalize ()  first   =   word [ 0 ]  allbutfirst   =   word [ 1 : len ( word )]  print ( word )  print ( word2 )  print ( word3 )  print ( first )  print ( allbutfirst )    1\n2\n3\n4\n5 original\nORIGINAL\nOriginal\no\nriginal    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 list1   =   [ 1 , 2 , 3 ]  list2   =   [ 4 , 5 , 6 , 7 ]  list3   =   [ list1 , list2 ]  results   =   []  def   joiny ( listy ): \n     for   lst   in   listy : \n         for   num   in   lst : \n             results . append ( num ) \n     return   results  print ( joiny ( list3 ))    1 [1, 2, 3, 4, 5, 6, 7]",
            "title": "Recap from the Above (Snippets)"
        },
        {
            "location": "/Python for Education/#215-python-modules-and-packages",
            "text": "1 print ( sin ( 0.5 ))    1 0.479425538604   1\n2\n3 # rename, more efficient  import   math   as   m  print ( m . sin ( 0.5 ))    1 0.479425538604   1\n2\n3\n4\n5\n6\n7 # package.module.function()  import   random  a   =   random . randint ( 1 , 5 )  print ( a )  random . randint ( 1 , 10 )    1\n2 3\n8   1\n2\n3\n4 import   random   as   rd  aa   =   rd . randint ( 1 , 5 )  print ( aa )    1 5",
            "title": "2.15, Python Modules and Packages"
        },
        {
            "location": "/Python for Education/#216-files-inputouput",
            "text": "1\n2\n3\n4 # create the file  f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt' ,   'w' )  f . write ( 'This is a test file' )   # write in  f . close ()    1\n2\n3\n4 # read it  f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt' ,   'r' )  print ( f . read ())  f . close ()    1 This is a test file   1\n2\n3\n4\n5 # read it again  f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt' ,   'r' )  print ( f . read ( 7 ))   # get first seven characters on the console  print ( f . read ())   # get the remaining ones  f . close ()    1\n2 This is\n a test file   1\n2\n3\n4\n5\n6 # create it  f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' ,   'w' )  for   k   in   range ( 1 , 10 ):   # 1, 2, 3 stop before 4 \n     s   =   ' %3d \\n '   % ( k )   # no format 3d, new line \n     f . write ( s )   # write in  f . close ()    1\n2\n3\n4 # read it  f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' ,   'r' )   # open  print ( f . read ())  f . close ()    1\n2\n3\n4\n5\n6\n7\n8\n9   1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9   1\n2\n3\n4 # read it horizontally  f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' ,   'r' )   # open  print ( f . read (),)  f . close ()    1 ('  1\\n  2\\n  3\\n  4\\n  5\\n  6\\n  7\\n  8\\n  9\\n',)   1\n2\n3\n4\n5\n6\n7\n8 f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt' ,   'r' )  while   1 :   # infinite loop \n     s   =   f . readline () \n     if   s   ==   '' :   # Empty string means end of file \n         break   # terminate the loop \n     m   =   int ( s )   # Convert to integer \n     print ( m   *   5 ),  f . close ()    1 5 10 15 20 25 30 35 40 45   1\n2\n3\n4 # create it  f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt' ,   'w' )  f . write ( '' )  f . close ()     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # give an error if there is a blank line in the file  # test it (without the if, there would be an error)  f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt' ,   'r' )  while   1 :   # infinite loop \n     s   =   f . readline () \n     if   s   ==   '' :   # empty string means end of file \n         break   # terminate the loop \n     m   =   int ( s )   # convert to integer \n     print ( m   *   5 )  f . close ()    1\n2\n3\n4\n5\n6\n7\n8\n9 # alternatively  f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt' ,   'r' )  while   1 :   # infinite loop \n     s   =   f . readline () \n     if   len ( s )   <   1 :   # string with no value \n         break   # terminate the loop \n     m   =   int ( s )   # convert to integer \n     print ( m   *   5 )  f . close ()    Strings can easily be written to and read from a \u001cle. Numbers take a bit more e\u001bort, since the  read()  method only returns Strings, which will have to be converted in to a number explicitly. However, when you want to save and restore data types like lists, dictionaries, or class instances, things get a lot more complicated. Rather than have the users constantly writing and debugging code to save complicated data types, Python provides a standard module called  pickle .  The  pickle  module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure. \u201cPickling\u201d is the process whereby a Python object hierarchy is converted into a byte stream, and \u201cunpickling\u201d is the inverse operation, whereby a byte stream is converted back into an object hierarchy. Pickling (and unpickling) is alternatively known as \u201cserialization\u201d, \u201cmarshalling,\u201d [1] or \u201cflattening\u201d, however, to avoid confusion, the terms used here are \u201cpickling\u201d and \u201cunpickling\u201d.  1\n2\n3\n4\n5 import   pickle  f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt' ,   'w' )  pickle . dump ( 12.3 ,   f )   # write a float type  f . close ()    1\n2\n3\n4 f   =   open ( 'D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt' ,   'r' )  x   =   pickle . load ( f )  print ( x ,   type ( x ))   # check the type of data read  f . close ()    1 (12.3, <type 'float'>)",
            "title": "2.16, Files Input/Ouput"
        },
        {
            "location": "/Python for Education/#217-formatted-printing",
            "text": "1\n2\n3\n4 a   =   2.0   /   3   # 2/3 will print zero because of integer  print ( a )  print ( 'a =  %5.3f ' )   % ( a )   # up to 3 decimal places    1\n2 0.666666666667\na = 0.667      Conversion  Conversion  Example  Result      d, i  signed Integer  \u2018%6d\u2019%(12)  \u2018 12\u2019    f  foating point decimal  \u2018%6.4f\u2019%(2.0/3)  0.667    e  floating point exponential  \u2018%6.2e\u2019%(2.0/3)  6.67e-01    x  hexadecimal  \u2018%x\u2019%(16)  10    o  octal  \u2018%o\u2019%(8)  10    s  string  \u2018%s\u2019%(\u2018abcd\u2019)  abcd    0d  modi\u001ced  \u2018d\u2019 \u2018%05d\u2019%(12)  00012     1\n2 a   =   'justify as you like'  print ( ' %30s ' )   % ( a )   # right justified    1            justify as you like   1 print ( ' %-30s ' )   % ( a )   # minus sign for left justification    1 justify as you like   1\n2 for   k   in   range ( 1 , 11 ):   # A good looking table \n     print ( '5 x  %2d  =  %2d ' )   % ( k ,   5 * k )   # add 2 spaces before     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 5 x  1 =  5\n5 x  2 = 10\n5 x  3 = 15\n5 x  4 = 20\n5 x  5 = 25\n5 x  6 = 30\n5 x  7 = 35\n5 x  8 = 40\n5 x  9 = 45\n5 x 10 = 50",
            "title": "2.17, Formatted Printing"
        },
        {
            "location": "/Python for Education/#218-exception-handling",
            "text": "1\n2\n3\n4\n5\n6 x   =   input ( 'Enter a number ' )  try : \n     print ( 10.0   /   x )  except : \n     print ( 'Division by zero not allowed' )    1\n2 Enter a number 0\nDivision by zero not allowed",
            "title": "2.18, Exception Handling"
        },
        {
            "location": "/Python for Education/#220-writing-gui-programs",
            "text": "Tkinter   An introduction to tkinter  Tkinter  Tkinter   The GUI programs are event-driven like a macro. Create Widgets like a Button, Label, Canvas,  etc. The first step is to create a main graphics window by calling the function  Tk() .  1\n2\n3\n4\n5\n6\n7\n8\n9 # Example tkmain.py  # open an empty box with min, max, close buttons  import   Tkinter   as   tk  root   =   tk . Tk ()  root . mainloop ()  # it opens a windows!    1\n2\n3\n4\n5\n6\n7\n8\n9 # Example tklabel.py  root   =   tk . Tk ()  w   =   tk . Label ( root ,   text   =   \"Hello, world\" )  w . pack ()  root . mainloop ()  # it opens a windows with the text in it     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # Example tkbutton.py  def   hello (): \n     print ( 'hello world' )  w   =   tk . Tk ()   # Creates the main Graphics window  b   =   tk . Button ( w ,   text   =   'Click Me' ,   command   =   hello )  b . pack ()  w . mainloop ()  # it opens a windows with a button; after clicking, it print the function    1 hello world    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 # Example tkcanvas.py  def   draw ( event ): \n     c . create_rectangle ( event . x ,  \\\n         event . y ,   event . x + 5 ,   event . y + 5 )  w   =   tk . Tk ()  c   =   tk . Canvas ( w ,   width   =   300 ,   height   =   200 )  c . pack ()  c . bind ( \"<Button-1>\" ,   draw )  w . mainloop ()  # it open a windows; you can left-click and add dots in it     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 # Example tkcanvas2.py  recs   =   []   # list keeping track of the rectangles  def   remove ( event ): \n     global   recs \n     if   len ( recs )   >   0 : \n         c . delete ( recs [ 0 ])   # delete from Canvas \n         recs . pop ( 0 )   # delete first item from list  def   draw ( event ): \n     global   recs \n     r   =   c . create_rectangle ( event . x ,  \\\n         event . y ,   event . x   +   5 ,   event . y   +   5 ) \n     recs . append ( r )  w   =   tk . Tk ()  c   =   tk . Canvas ( w ,   width   =   300 ,   height   =   200 )  c . pack ()  c . bind ( \"<Button-1>\" ,   draw )  c . bind ( \"<Button-3>\" ,   remove )  w . mainloop ()  # it open a windows; you can left-click and add dots in it; right-click and remove them",
            "title": "2.20, Writing GUI Programs"
        },
        {
            "location": "/Python for Education/#221-object-oriented-programming-in-python",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 # example point.py  class   Point : \n     '''      This is documentation comment.      help(Point) will display this.      ''' \n\n     def   __init__ ( self ,   x   =   0 ,   y   =   0 ): \n         self . xpos   =   x \n         self . ypos   =   y \n\n     def   __str__ ( self ):   # overload print() \n         return   'Point at ( %f , %f )'   % ( self . xpos ,   self . ypos ) \n\n     def   __add__ ( self ,   other ):   # overloads \n         xpos   =   self . xpos   +   other . xpos \n         ypos   =   self . ypos   +   other . ypos \n         return   Point ( xpos ,   ypos ) \n\n     def   __sub__ ( self ,   other ):   # overloads \n         import   math \n         dx   =   self . xpos   -   other . xpos \n         dy   =   self . ypos   -   other . ypos \n         return   math . sqrt ( dx   **   2   +   dy   **   2 ) \n\n     def   dist ( self ): \n         import   math \n         return   math . sqrt ( self . xpos   **   2   +   self . ypos   **   2 )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # example point1.py  # import Point  # if point.py is in the same directory and script point1.py is independent from point.py  origin   =   Point ()   # instance  print ( origin )  p1   =   Point ( 4 ,   4 )   # instance  p2   =   Point ( 8 ,   7 )  print ( p1 )    1\n2 Point at (0.000000,0.000000)\nPoint at (4.000000,4.000000)   1 print ( p2 )   # __str__    1 Point at (8.000000,7.000000)   1 print ( p1   +   p2 )   # __add__, __str__, (4 + 4, 7 + 4)    1 Point at (12.000000,11.000000)   1 print ( p1   -   p2 )   # __sub__, __str__, ((4 - 8) ** 2, (3 - 7) ** 2)    1 5.0   1 print ( p1 . dist ())   # # __dist__, __str__, sqrt((4) ** 2 + (4) ** 2)    1 5.65685424949    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # example cpoint.py  class   colPoint ( Point ):   # colPoint inherits Point \n     '''      This is documentation comment.      help(colPoint) will display this.      ''' \n\n     color   =   'black' \n\n     def   __init__ ( self ,   x   =   0 ,   y   =   0 ,   col   =   'black' ): \n         Point . __init__ ( self ,   x ,   y ) \n         self . color   =   col \n\n     def   __str__ ( self ): \n         return   ' %s  colored Point at ( %f , %f )'   %  \\\n             ( self . color ,   self . xpos ,   self . ypos )    1\n2\n3\n4\n5\n6\n7 # example point2.py  # import cpoint  # see above for the explanation  p1   =   Point ( 5 ,   5 )  rp1   =   colPoint ( 2 ,   2 ,   'red' )    1 print ( p1 )   \n    Point at (5.000000,5.000000)  1 print ( rp1 )    1 red colored Point at (2.000000,2.000000)   1 print ( rp1   +   p1 )    1 Point at (7.000000,7.000000)   1 print ( rp1 . dist ())    1 2.82842712475",
            "title": "2.21, Object-Oriented Programming in Python"
        },
        {
            "location": "/Python for Education/#3-arrays-and-matrices",
            "text": "Let\u2019s switch to Python 3 for the remaining of the document.",
            "title": "3, Arrays and Matrices"
        },
        {
            "location": "/Python for Education/#31-the-numpy-module",
            "text": "Install (check) the Scipy Stack before.   numpy  scipy  matplotlib  pandas  sympy  nose (testing)   With  pip .  Note  The code below in Python 3 on Jupyter Notebook 3  installed on a Windows PC.  However, running the Scipy Stack in Python 2.7 is problematic.  Switch kernel from here: from Python 2 to 3.  No need to  import   numpy ,   matplotlib  since it\u2019s included in the  %pylab  command.  1\n2\n3\n4\n5\n6 % pylab   inline  # the Scipy Stack is executed in the notebook, no need to import numpy  x   =   array ([ 1 ,   2 ,   3 ])   # make array from list  print ( x ,   type ( x ))    1\n2 Populating the interactive namespace from numpy and matplotlib\n[1 2 3] <class 'numpy.ndarray'>   1\n2\n3\n4 a   =   [[ 1 , 2 ],   [ 3 , 4 ]]   # make a list of lists  x   =   array ( a )   # and convert to an array  print ( a )    1 [[1, 2], [3, 4]]   1 arange ( 2.0 ,   3.0 ,   . 1 )    1 array([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])   1 array ([   2.   ,   2.1 ,   2.2 ,   2.3 ,   2.4 ,   2.5 ,   2.6 ,   2.7 ,   2.8 ,   2.9 ])    1 array([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])   1 linspace ( 1 ,   2 ,   11 )    1 array([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])   1 array ([   1.   ,   1.1 ,   1.2 ,   1.3 ,   1.4 ,   1.5 ,   1.6 ,   1.7 ,   1.8 ,   1.9 ,   2.   ])    1 array([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])   1 zeros ([ 3 , 2 ],   'float' )    1\n2\n3 array([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])   1 zeros ([ 3 , 2 ],   'int' )    1\n2\n3 array([[0, 0],\n       [0, 0],\n       [0, 0]])   1 ones ([ 2 , 2 ],   'i' )    1\n2 array([[1, 1],\n       [1, 1]], dtype=int32)   1 random . random ([ 3 , 3 ])    1\n2\n3 array([[ 0.51158139,  0.83490474,  0.82306296],\n       [ 0.65830757,  0.98560397,  0.78565885],\n       [ 0.09887894,  0.11073038,  0.31037259]])   1\n2 a   =   arange ( 20 )  print ( a )    1 [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]   1\n2 b   =   reshape ( a ,   [ 4 , 5 ])  print ( b )    1\n2\n3\n4 [[ 0  1  2  3  4] \n  [ 5  6  7  8  9] \n  [10 11 12 13 14] \n  [15 16 17 18 19]]    1\n2 a   =   arange ( 1.0 ,   2.0 ,   0.1 )  print ( a )    1 [ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9]   1\n2 b   =   linspace ( 1 ,   2 ,   11 )  print ( b )    1 [ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2. ]   1\n2 c   =   ones ( 5 ,   'float' )  print ( c )    1 [ 1.  1.  1.  1.  1.]   1\n2 d   =   zeros ( 5 ,   'int' )  print ( d )    1 [0 0 0 0 0]   1\n2 e   =   random . rand ( 5 )  print ( e )    1 [ 0.5677619   0.46086299  0.00274387  0.29916017  0.40593335]    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 a   =   zeros ( 5 )  print ( a )  b   =   a  b [ 0 ]   =   10  print ( a ,   b )   # b and a remain in synch  c   =   a . copy ()  c [ 4 ]   =   10  print ( a ,   c )   # c is really a new variable, independent    1\n2\n3 [ 0.  0.  0.  0.  0.]  [ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.   0.]  [ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.  10.]    1\n2\n3\n4\n5\n6 # simple arithmetics  a   =   array ([[ 2 , 3 ],   [ 4 , 5 ]])  b   =   array ([[ 1 , 2 ],   [ 3 , 0 ]])  print ( a   +   b )  print ( a   *   b )    1\n2\n3\n4 [[3 5] \n  [7 5]]  [[ 2  6] \n  [12  0]]    1\n2\n3\n4\n5\n6\n7\n8 # cross product  a   =   array ([ 1 , 2 , 3 ])  b   =   array ([ 4 , 5 , 6 ])  print ( a   *   b )  c   =   cross ( a , b )  print ( c )    1\n2 [ 4 10 18]  [-3  6 -3]    1\n2\n3 # dot product  c   =   dot ( a ,   b )  print ( c )    1 32   1\n2 a   =   arange ( 10 )  print ( a )    1 [0 1 2 3 4 5 6 7 8 9]   1\n2\n3\n4 # save to file, restore or retrieve  a . tofile ( 'myfile.dat' )   # a file is created in the directory  b   =   fromfile ( 'myfile.dat' , dtype   =   'int' )  print ( b )    1 [0 1 2 3 4 5 6 7 8 9]   1\n2\n3\n4\n5\n6\n7\n8\n9 # matrix inversion  a   =   array ([[ 4 , 1 , - 2 ],   [ 2 , - 3 , 3 ],   [ - 6 , - 2 , 1 ]   ],   dtype = 'float' )  print ( a )  ainv   =   linalg . inv ( a )  print ( ainv )  print ( dot ( a ,   ainv ))    1\n2\n3\n4\n5\n6\n7\n8\n9 [[ 4.  1. -2.] \n  [ 2. -3.  3.] \n  [-6. -2.  1.]]  [[ 0.08333333  0.08333333 -0.08333333] \n  [-0.55555556 -0.22222222 -0.44444444] \n  [-0.61111111  0.05555556 -0.38888889]]  [[  1.00000000e+00  -1.38777878e-17   0.00000000e+00] \n  [  0.00000000e+00   1.00000000e+00   0.00000000e+00] \n  [  0.00000000e+00   2.08166817e-17   1.00000000e+00]]",
            "title": "3.1, The NumPy Module"
        },
        {
            "location": "/Python for Education/#32-vectorized-functions",
            "text": "1\n2\n3 # avoid loop, generate number with a function  a   =   array ([ 1 ,   10 ,   100 ,   1000 ])  print ( log10 ( a ))    1 [ 0.  1.  2.  3.]   1\n2\n3\n4\n5\n6\n7\n8 def   spf ( x ): \n     return   3   *   x  vspf   =   vectorize ( spf )  a   =   array ([ 1 ,   2 ,   3 ,   4 ])  print ( a )  print ( vspf ( a ))    1\n2 [1 2 3 4]  [ 3  6  9 12]",
            "title": "3.2, Vectorized Functions"
        },
        {
            "location": "/Python for Education/#4-data-visualization",
            "text": "",
            "title": "4, Data visualization"
        },
        {
            "location": "/Python for Education/#41-the-matplotlib-module",
            "text": "Basic or common plots.  1\n2\n3\n4\n5\n6\n7\n8\n9 % pylab   inline  # matplolib is part of pylab as is numpy  # basic plot  data   =   [ 1 ,   2 ,   5 ]  plot ( data )  show ()    1 Populating the interactive namespace from numpy and matplotlib    1\n2\n3\n4\n5\n6\n7 # basic plot  x   =   [ 1 ,   2 ,   5 ]  y   =   [ 4 ,   5 ,   6 ]  plot ( x , y )  show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # basic plot  x   =   [ 1 ,   2 ,   5 ]  y   =   [ 4 ,   5 ,   6 ]  plot ( x ,   y ,   'ro' )  xlabel ( 'x-axis' )  ylabel ( 'y-axis' )  axis ([ 0 ,   6 ,   1 ,   7 ])  show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # basic plots  # data are unchanged  t   =   arange ( 0.0 ,   5.0 ,   0.2 )  plot ( t ,   t ** 2 ,   'x' )   # t2  plot ( t ,   t ** 3 ,   'ro' )   # t3  show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # subplot  # data are unchanged  subplot ( 2 ,   1 ,   1 )   # the first subplot  plot ([ 1 ,   2 ,   3 ,   4 ])  subplot ( 2 ,   1 ,   2 )   # the second subplot  plot ([ 4 ,   2 ,   3 ,   1 ])  show ()     1 rand ( 10 )    1\n2 array([ 0.88744591,  0.324907  ,  0.90704288,  0.81398935,  0.96866761,\n        0.75620965,  0.31821423,  0.64119535,  0.56738357,  0.98143592])    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 # subplot  mark   =   [ 'x' , 'o' , '^' , '+' , '>' ]  NR   =   2   # number of rows  NC   =   3   # number of columns  pn   =   1   # plot number, starting number  for   row   in   range ( NR ): \n     for   col   in   range ( NC ): \n         subplot ( NR ,   NC ,   pn ) \n         a   =   rand ( 10 )   *   pn \n         plot ( a ,   marker   =   mark [( pn + 1 ) % 5 ])   # plot the random numbers vs tick = (n+1)5% \n         xlabel ( 'plot  %d  X'   % pn ) \n         ylabel ( 'plot  %d  Y'   % pn ) \n\n         pn   =   pn   +   1   # move to the 2nd plot  show ()     1\n2\n3\n4\n5\n6\n7 # polar plot  th   =   linspace ( 0 ,   2 * pi ,   100 )  r   =   5   *   ones ( 100 )   # radius = 5  polar ( th ,   r )  show ()     1\n2\n3\n4\n5\n6\n7 # pie chart  labels   =   'Frogs' ,   'Hogs' ,   'Dogs' ,   'Logs'  fracs   =   [ 25 ,   25 ,   30 ,   20 ]  pie ( fracs ,   labels   =   labels )  show ()     A few examples of mathematical plots.   Spiral of Archimedes  r = a\u03b8 r = a\u03b8  1\n2\n3\n4\n5\n6\n7 a   =   2  th   =   linspace ( 0 ,   10 * pi ,   200 )  r   =   a * th  polar ( th , r )  axis ([ 0 ,   2 * pi ,   0 ,   70 ])  show ()     Fermat\u2019s Spiral  r^2 = a^2\u03b8 r^2 = a^2\u03b8  1\n2\n3\n4\n5\n6\n7 a   =   2  th   =   linspace ( 0 ,   10 * pi ,   200 )  r   =   sqrt ( a ** 2   *   th )  polar ( th ,   r )  polar ( th ,   - r )  show ()     And more\u2026   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # example 1  x   =   arange ( 0 ,   3 ,   1 )  y   =   arange ( 0 ,   3 ,   1 )  gx ,   gy   =   meshgrid ( x ,   y )  print ( gx )  print ( gy )  print ( '-'   *   25 )  x   =   arange ( - 3 * pi ,   3 * pi ,   0.1 )  y   =   arange ( - 3 * pi ,   3 * pi ,   0.1 )  xx ,   yy   =   meshgrid ( x ,   y )  z   =   sin ( xx )   +   sin ( yy )  imshow ( z )  show ()    1\n2\n3\n4\n5\n6\n7 [[0 1 2] \n  [0 1 2] \n  [0 1 2]]  [[0 0 0] \n  [1 1 1] \n  [2 2 2]]  -------------------------      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 # example 2  from   mpl_toolkits.mplot3d   import   Axes3D  ax   =   Axes3D ( figure ())  x   =   arange ( - 3 * pi ,   3 * pi ,   0.1 )  y   =   arange ( - 3 * pi ,   3 * pi ,   0.1 )  xx ,   yy   =   meshgrid ( x ,   y )  z   =   sin ( xx )   +   sin ( yy )  ax . plot_surface ( xx ,   yy ,   z ,   cmap = cm . jet ,   cstride = 1 )  show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 # example 3  from   mpl_toolkits.mplot3d   import   Axes3D  ax   =   Axes3D ( figure ())  phi   =   linspace ( 0 ,   2 * pi ,   400 )  x   =   cos ( phi )  y   =   sin ( phi )  z   =   0  ax . plot ( x ,   y ,   z ,   label   =   'x' ) # circle  z   =   sin ( 4 * phi )   # modulated in z plane  ax . plot ( x ,   y ,   z ,   label   =   'x' )  ax . set_xlabel ( 'X' )  ax . set_ylabel ( 'Y' )  ax . set_zlabel ( 'Z' )  show ()      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 # example 4  from   mpl_toolkits.mplot3d   import   Axes3D  ax   =   Axes3D ( figure ())  phi   =   linspace ( 0 ,   2   *   pi ,   100 )  theta   =   linspace ( 0 ,   pi ,   100 )  x   =   10   *   outer ( cos ( phi ),   sin ( theta ))  y   =   10   *   outer ( sin ( phi ),   sin ( theta ))  z   =   10   *   outer ( ones ( size ( phi )),   cos ( theta ))  ax . plot_wireframe ( x , y , z ,   rstride = 2 ,   cstride = 2 )  show ()     Additional mathematical plots (with functions):   sine, function and friends  circles  astroids  ellipses  polar rose  power series  Fourier series  fractals  meshgrids  2D plots  3D plots  surface plots  line plots  wire-frame plots  advanced 3D with Mayavi (render 3D shapes)",
            "title": "4.1, The Matplotlib Module"
        },
        {
            "location": "/Python for Education/#5-type-setting-using-latexlatex",
            "text": "Once a graphic or an image is generated by IPython, save it and reuse it in  \\LaTeX \\LaTeX  with the  usepackage{graphicx} . Insert images and floating bodies.",
            "title": "5, Type Setting Using \\LaTeX\\LaTeX"
        },
        {
            "location": "/Python for Education/#6-numerical-methods",
            "text": "derivatives and differential calculus  integral calculus and numerical integration  optimization and linear programming  ordinary differential equations  Euler method  Runge-Kutta method  functions depending on the integrals  and more    Polynomials  Taylor\u2019s series  and other series",
            "title": "6, Numerical Methods"
        },
        {
            "location": "/Python for Education/#65-finding-roots-of-an-equation",
            "text": "A root is where a  x x  intersects the  y y -axis.  An equation has any number of roots, or no roots at all.  f(x) = x^2 f(x) = x^2  has a single root whereas  f(x) = sin(x) f(x) = sin(x)  has an infinite number of roots.  Visual inspection will reveal the roots (by plotting the function).  Other ways: the incremental search method, the method of bisection, and the Newton-Raphson method.   Incremental Search Method  The basic idea behind the incremental search method is simple: if  f(x1) f(x1)  and  f(x2) f(x2)  have opposite signs, then there is at least one root in the interval  (x1; x2) (x1; x2) . If the interval is small enough, it is likely to contain a single root. Thus, the zeroes of  f(x) f(x)  can be detected by evaluating the function at intervals of  \\Delta x \\Delta x  and looking for change in sign.  There are several potential problems with the incremental search method: it is possible to miss two closely spaced roots if the search increment  \\Delta x \\Delta x  is larger than the spacing of the roots. Certain singularities of  f(x) f(x)  can be mistaken for roots. For example,  f(x) = tan(x) f(x) = tan(x)  changes sign at odd multiples of  \\pi/2 \\pi/2 , but these locations are not true zeroes.  For example, below, function  root()  that searches the roots of a function  f(x) f(x)  from  x = a x = a  to  x = b x = b , incrementing it by  dx dx .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 %   pylab   inline  import   math  def   func ( x ): \n     return   x ** 3   -   10.0   *   x   *   x   +   5  def   root ( f ,   a ,   b ,   dx ): \n     x   =   a \n     while   True : \n         f1   =   f ( x ) \n         f2   =   f ( x   +   dx ) \n         if   f1   *   f2   <   0 : \n             return   x ,   x   +   dx \n         x   =   x   +   dx \n         if   x   >=   b : \n             return   ( None , None )  x ,   y   =   root ( func ,   0.0 ,   1.0 ,   . 1 )  print ( x ,   y )  x ,   y   =   root ( math . cos ,   0.0 ,   4 ,   . 1 )  print ( x ,   y )    1\n2\n3 Populating the interactive namespace from numpy and matplotlib\n0.7 0.7999999999999999\n1.5000000000000002 1.6000000000000003   The visual inspection will confirm. Let\u2019s take the first function,  f(x) = x^3 - 10x^2 + 5 f(x) = x^3 - 10x^2 + 5 , and the inspected range,  [0.0, 1.0] [0.0, 1.0] , to plot a graph.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 vector   =   arange ( - 10 ,   20 ,   0.05 )   # from numpy  plot ( vector ,   func ( vector ))  xlabel ( 'x-axis' )  ylabel ( 'y-axis' )  title ( 'Find the roots' )  axis ([ 0. ,   2. ,   - 1. ,   6. ])  # vert line  # axvline(x = 4.,color = 'k',ls = 'dashed')  # horiz line  axhline ( y   =   0 ,   color   =   'k' , ls   =   'dashed' )  show ()     But, there is more than one root to the polynomial function, that is,  f(x) = x^3 - 10x^2 + 5 f(x) = x^3 - 10x^2 + 5 . Such function should have 3 roots. Indeed, another plot reveals two roots around  x=0 x=0  and another one close to  x=10 x=10 .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 vector   =   arange ( - 10 ,   20 ,   0.05 )   # from numpy  plot ( vector ,   func ( vector ))  xlabel ( 'x-axis' )  ylabel ( 'y-axis' )  title ( 'Find the roots' )  axis ([ - 2. ,   12. ,   - 2. ,   6. ])  # vert line  # axvline(x = 4.,color = 'k',ls = 'dashed')  # horiz line  axhline ( y   =   0 ,   color   =   'k' , ls   =   'dashed' )  show ()     Method of Bisection  The method of bisection \u001cfinds the root by successively halving the interval until it becomes sufficiently small.  Bisection is not the fastest method available for computing roots, but it is the most reliable. Once a root has been bracketed, bisection will always \u001cfind it. The method of bisection works in the following manner:   If there is a root between  x1 x1  and  x2 x2 , then  f(x1)*f(x2) < 0 f(x1)*f(x2) < 0 .  Next, we compute  f(x3) f(x3) , where  x3 = (x1 + x2) = 2 x3 = (x1 + x2) = 2 .  If  f(x2) * f(x3) < 0 f(x2) * f(x3) < 0 , then the root must be in  (x2; x3) (x2; x3) ; we replace the original bound  x1 x1  by  x3 x3 .  Otherwise, the root lies between  x1 x1  and  x3 x3 ; in this case,  x3 x3  replaces  x2 x2 .    This process is repeated until the interval is reduced to a (previously) speci\u001cfied value, say  \\epsilon \\epsilon .  The number of bisections required to reach the prescribed limit,  \\epsilon \\epsilon , is given by equation:     n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2}    n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2}    Let\u2019s continue with the example from above ( f(x) = x^3 - 10x^2 + 5 f(x) = x^3 - 10x^2 + 5 ).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 def   bisect ( f ,   x1 ,   x2 ,   epsilon   =   1.0e-9 ): \n     f1   =   f ( x1 ) \n     f2   =   f ( x2 ) \n     if   f1   *   f2   >   0.0 : \n         print ( 'x1 and x2 are on the same side of x-axis' ) \n         return    \n     n   =   math . ceil ( math . log ( abs ( x2   -   x1 ) / epsilon ) / math . log ( 2.0 )) \n     n   =   int ( n ) \n     for   i   in   range ( n ): \n         x3   =   0.5   *   ( x1   +   x2 ) \n         f3   =   f ( x3 ) \n         if   f3   ==   0.0 :   return   x3 \n         if   f2   *   f3   <   0.0 : \n             x1   =   x3 \n             f1   =   f3 \n         else : \n             x2   =   x3 \n             f2   =   f3 \n     return   ( x1   +   x2 ) / 2.0  print ( bisect ( func ,   0.70 ,   0.8 ,   1.0e-4 ))   # more precise than the incremental search method  print ( bisect ( func ,   0.70 ,   0.8 ,   1.0e-9 ))   # even more decimals!    1\n2 0.734619140625\n0.7346035074442625   Newton-Raphson Method  This other method is an algorithm that requires the derivative of the function to evaluate the roots. Therefore, it is usable only in problems where the derivative can be readily computed. It does not require the value at two points to start with. We start with an initial guess which is reasonably close to the true root. Then the function is approximated by its tangent line and the x-intercept of the tangent line is calculated. This value is taken as the next guess and the process is repeated. The Newton-Raphson formula is shown below.   x_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)}   x_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)}    Let\u2019s run an example on the quadratic equation  2x^2 \u2212 3x \u22125 = 0 2x^2 \u2212 3x \u22125 = 0  and its two tangents. It can be seen that the zeros are at  x = -1 x = -1  and  x = 2.5 x = 2.5 . By the way, the derivative of the equation is:  4x - 3 4x - 3  Function  nr() nr()  is called twice, and we get the roots nearer to the corresponding starting values.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 # the function  def   f ( x ): \n     return   2.0   *   x ** 2   -   3 * x   -   5  # the derivative  def   df ( x ): \n     return   4.0   *   x   -   3  # the algorithm  def   nr ( x ,   tol   =   1.0e-9 ): \n     for   i   in   range ( 30 ): \n         dx   =   - f ( x ) / df ( x ) \n         #print(x) \n         x   =   x   +   dx \n         if   abs ( dx )   <   tol : \n             return   x  print ( 'The roots:' )  print ( nr ( 4 ))  print ( nr ( 0 ))    1\n2\n3 The roots:\n2.5\n-1.0    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 # the function  def   f ( x ): \n     return   2.0   *   x ** 2   -   3 * x   -   5  # the derivative  def   df ( x ): \n     return   4.0   *   x   -   3  # the alogorithm  def   nr ( x ,   tol   =   1.0e-9 ): \n     for   i   in   range ( 30 ): \n         dx   =   - f ( x ) / df ( x ) \n         print ( x ) \n         x   =   x   +   dx \n         if   abs ( dx )   <   tol : \n             return   x  print ( 'The iterations (nr(4):' )  print ( nr ( 4 ))  print ( 'The iterations (nr(0):' )  print ( nr ( 0 ))     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 The iterations (nr(4):\n4\n2.8461538461538463\n2.528581510232886\n2.500229650067341\n2.5000000150663526\n2.5\n2.5\nThe iterations (nr(0):\n0\n-1.6666666666666667\n-1.0919540229885056\n-1.002295264224362\n-1.0000015032391993\n-1.0000000000006457\n-1.0    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 # the function  def   f ( x ): \n     return   2.0   *   x ** 2   -   3 * x   -   5  # the derivative  def   df ( x ): \n     return   4.0   *   x   -   3  # the plot  vf   =   vectorize ( f )  x   =   linspace ( - 2 ,   5 ,   100 )  y   =   vf ( x )  # tangents at x = 3 and x = 4, using one point slope formula  x1   =   4  tg1   =   df ( x1 ) * ( x - x1 )   +   f ( x1 )  x1   =   3  tg2   =   df ( x1 ) * ( x - x1 )   +   f ( x1 )  grid ( True )  plot ( x , y )  plot ( x , tg1 )  plot ( x , tg2 )  ylim ([ - 20 , 40 ])  show ()",
            "title": "6.5, Finding Roots of an Equation"
        },
        {
            "location": "/Python for Education/#66-system-of-linear-equations",
            "text": "A system of  m m  linear equations with  n n  unknowns can be written in a matrix form and can be solved by using several standard techniques like the Gaussian elimination.  Non-homogeneous matrix equations of the form  Ax = b Ax = b  can be solved by matrix inversion to obtain  x = A^{\u22121}b x = A^{\u22121}b . The system of equations \n$$ \n\\begin{align} \n\\ 4x + y - 2z &= 0 \n\\ 2x - 3y + 3z &= 9  \n\\ -6x - 2y + z &= 0 \n\\end{align} \n$$  can be represented in the matrix form as   \n \\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}  \n \\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}   and can be solved by \u001cnding the inverse of the coe\u001ecient matrix.   \n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n {\\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}}^{-1}\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}    \n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n {\\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}}^{-1}\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}     Let\u2019s solve the equation.  1\n2\n3\n4 b   =   array ([ 0 ,   9 ,   0 ])  A   =   array ([[ 4 , 1 , - 2 ],   [ 2 ,   - 3 ,   3 ],   [ - 6 ,   - 2 ,   1 ]])  print ( dot ( linalg . inv ( A ), b ))    1 [ 0.75 -2.    0.5 ]   x = 0.75 x = 0.75 ,  y = \u22122 y = \u22122 , and  z = 0.5 z = 0.5 .",
            "title": "6.6, System of Linear Equations"
        },
        {
            "location": "/Python for Education/#67-least-squares-fitting",
            "text": "A mathematical procedure for \u001cfinding the best-\u001cfitting curve  f(x) f(x)  for a given set of points  (x_n, y_n) (x_n, y_n)  by minimizing the sum of the squares of the vertical off\u001bsets of the points from the curve is called least squares fi\u001ctting.   1\n2\n3\n4\n5\n6 # the raw data is generated by adding random numbers (between -1 and 1) to the y coordinates  # generated by y = 3\u2217x + 2  NP   =   50   # observations  r   =   2   *   ranf ([ NP ])   -   0.5  print ( r )    1\n2\n3\n4\n5\n6\n7\n8\n9 [ 0.99203986 -0.36064885 -0.48805087  0.36617374  0.29567002  1.2411945\n  1.03900373 -0.32058291  0.45809449  0.7741206   1.11819248  1.04958093\n -0.47823795  0.14105707 -0.30262528  1.07469769 -0.44660783 -0.49313542\n  0.50995051 -0.11336372  1.47245243  0.34474142  0.52352519 -0.17051734\n  1.35723902  1.09822309  1.34626113  0.81862428  1.48731849  0.32958741\n  0.77572583  1.47898135  1.36664053  0.69356794  0.4978461   1.17619706\n -0.24303519  0.43521904  0.88177674  0.28791814 -0.22513721  0.78901677\n  0.15126297  1.24899092 -0.02995487  1.2136114   0.46617806 -0.29024591\n  0.23178231  0.50829941]   1\n2 x   =   linspace ( 0 ,   10 ,   NP )  print ( x )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 [  0.           0.20408163   0.40816327   0.6122449    0.81632653\n   1.02040816   1.2244898    1.42857143   1.63265306   1.83673469\n   2.04081633   2.24489796   2.44897959   2.65306122   2.85714286\n   3.06122449   3.26530612   3.46938776   3.67346939   3.87755102\n   4.08163265   4.28571429   4.48979592   4.69387755   4.89795918\n   5.10204082   5.30612245   5.51020408   5.71428571   5.91836735\n   6.12244898   6.32653061   6.53061224   6.73469388   6.93877551\n   7.14285714   7.34693878   7.55102041   7.75510204   7.95918367\n   8.16326531   8.36734694   8.57142857   8.7755102    8.97959184\n   9.18367347   9.3877551    9.59183673   9.79591837  10.        ]   1\n2 data   =   3   *   x   +   2   +   r  print ( data )     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 [  2.99203986   2.25159605   2.73643893   4.20290843   4.74464961\n   6.30241899   6.71247312   5.96513138   7.35605367   8.28432469\n   9.24064146   9.7842748    8.86870082  10.10024074  10.26880329\n  12.25837115  11.34931053  11.91502784  13.53035867  13.51928934\n  15.71735039  15.20188427  15.99291295  15.91111532  18.05111657\n  18.40434554  19.26462847  19.34923652  20.63017563  20.08468945\n  21.14307277  22.45857319  22.95847726  22.89764957  23.31417263\n  24.60476849  23.79778114  25.08828026  26.14708286  26.16546916\n  26.26465871  27.89105759  27.86554869  29.57552153  28.90882064\n  30.76463181  30.62944337  30.48526429  31.61953741  32.50829941]   1\n2\n3 xbar   =   mean ( x )  ybar   =   mean ( data )  print ( xbar ,   ybar )    1 5.0 17.5215723854   1\n2\n3 b   =   sum ( data   *   ( x - xbar ))   /   sum ( x * ( x - xbar ))  a   =   ybar   -   xbar   *   b  print ( a ,   b )    1 2.41774233468 3.02076601014   1\n2\n3\n4\n5\n6 y   =   a   +   b   *   x  plot ( x ,   y )  plot ( x ,   data ,   'ob' )  show ()",
            "title": "6.7, Least Squares Fitting"
        },
        {
            "location": "/Python for Education/#68-interpolation",
            "text": "Interpolation is the process of constructing a function  f(x) f(x)  from a set of data points  (x_i, y_i) (x_i, y_i) , in the interval  a < x < b a < x < b  that will satisfy  y_i = f(x_i) y_i = f(x_i) \nfor any point in the same interval.  In other words, we find an equation with several observation by reverse engineering; we stand at the doorstep of machine and statistical learning here!  The easiest way is to construct a polynomial of degree  n n , such as a Newton\u2019s interpolating polynomial, that passes through the  n + 1 n + 1  distinct data points. Consult the document for the mathematical demonstration. Let\u2019s do an example.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 # calculate the coefficients  from   copy   import   copy  def   coef ( x ,   y ): \n     a   =   copy ( y )   # copy the list y to coefficient a \n     m   =   len ( x ) \n     for   k   in   range ( 1 ,   m ):   # with two loops, calculate the difference \n         tmp   =   copy ( a ) \n         for   i   in   range ( k ,   m ): \n             tmp [ i ]   =   ( a [ i ]   -   a [ i - 1 ])   /   ( x [ i ]   -   x [ i - k ]) \n         a   =   copy ( tmp ) \n     return   a    1\n2\n3\n4 x   =   [ 0 ,   1 ,   2 ,   3 ]  y   =   [ 0 ,   3 ,   14 ,   39 ]  print ( coef ( x ,   y ))    1 [0, 3.0, 4.0, 1.0]   1\n2\n3\n4\n5\n6\n7\n8 # the same can be done with a Numpy array  def   coef ( x ,   y ): \n     a   =   copy ( y ) \n     m   =   len ( x ) \n     for   k   in   range ( 1 ,   m ): \n         a [ k : m ]   =   ( a [ k : m ]   -   a [ k - 1 ])   /   ( x [ k : m ] - x [ k - 1 ]) \n     return   a    1\n2\n3\n4 x   =   array ([ 0 ,   1 ,   2 ,   3 ])  y   =   array ([ 0 ,   3 ,   14 ,   39 ])  print ( coef ( x ,   y ))    1 [0 3 4 1]   The next step is to calculate the value of  y y  for any given value of  x x , using the coffe\u001ecients already calculated (above).  The program generates 20 new values of  x x , and calculate corresponding values of  y y  and plots them along with the original data points.  The function  eval()  uses the recurrence relation.  You may explore the results for new points outside the range by changing the second argument of line  newx = linspace(0,3,NP) newx = linspace(0,3,NP)  to a higher value.  1\n2\n3\n4\n5\n6 def   eval ( a ,   xpoints ,   x ): \n     n   =   len ( xpoints )   -   1 \n     p   =   a [ n ] \n     for   k   in   range ( 1 , n + 1 ): \n         p   =   a [ n - k ]   +   ( x   - xpoints [ n - k ])   *   p \n     return   p    1\n2\n3\n4\n5\n6 def   coef ( x ,   y ): \n     a   =   copy ( y ) \n     m   =   len ( x ) \n     for   k   in   range ( 1 , m ): \n         a [ k : m ]   =   ( a [ k : m ]   -   a [ k - 1 ]) / ( x [ k : m ] - x [ k - 1 ]) \n     return   a    1\n2\n3 x   =   array ([ 0 ,   1 ,   2 ,   3 ])  y   =   array ([ 0 ,   3 ,   14 ,   39 ])  coef   =   coef ( x ,   y )    1\n2\n3 NP   =   20  newx   =   linspace ( 0 , 3 ,   NP )   # New x-values  newy   =   zeros ( NP )    1\n2 for   i   in   range ( NP ):   # evaluate y-values \n     newy [ i ]   =   eval ( coef ,   x ,   newx [ i ])    1\n2\n3\n4 plot ( newx ,   newy , '-x' )  plot ( x ,   y , 'ro' )  show ()",
            "title": "6.8, Interpolation"
        }
    ]
}