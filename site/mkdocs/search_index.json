{
    "docs": [
        {
            "location": "/",
            "text": "Let there be light!\n\u00b6\n\n\nA Python documentation website.\n\n\nLayout\n\u00b6\n\n\n\n\nugo_py_doc\n is a corpus: a catalog of books, manuals, articles, presentations, videos, podcasts, summaries, notes, code snippets, excerpts, websites, etc.\n\n\nA Mkdocs site is automatically indexed. The \u2018docs\u2019 is a searchable knowledge-based system. \n\n\nYou type a keyword, it leads to several sources, you identify the document the source belongs to, and you go retrieve the document; whether it is a digital or a material document. Fast and easy!\n\n\nFor that matter, \ngenerously\n adding keywords to the \u2018docs\u2019 is crucial (adding them in subscript makes them stand apart).\n\n\nCitations, keywords, links, etc.; they all provide leads.\n\n\nThe corpus is unstructured. There is no unique chapter dedicated to one topic.\n\n\nKnowledge is rather cumulated, layer after layer, resulting in a hotchpotch of information. \n\n\nInformation may be repeted among many documents, with different explanations, or some more comprehensive.\n\n\nNewer entries might also supplement or contradict older entries.",
            "title": "Home"
        },
        {
            "location": "/#layout",
            "text": "ugo_py_doc  is a corpus: a catalog of books, manuals, articles, presentations, videos, podcasts, summaries, notes, code snippets, excerpts, websites, etc.  A Mkdocs site is automatically indexed. The \u2018docs\u2019 is a searchable knowledge-based system.   You type a keyword, it leads to several sources, you identify the document the source belongs to, and you go retrieve the document; whether it is a digital or a material document. Fast and easy!  For that matter,  generously  adding keywords to the \u2018docs\u2019 is crucial (adding them in subscript makes them stand apart).  Citations, keywords, links, etc.; they all provide leads.  The corpus is unstructured. There is no unique chapter dedicated to one topic.  Knowledge is rather cumulated, layer after layer, resulting in a hotchpotch of information.   Information may be repeted among many documents, with different explanations, or some more comprehensive.  Newer entries might also supplement or contradict older entries.",
            "title": "Layout"
        },
        {
            "location": "/Py_CS/",
            "text": "CONTENT\n\n\nPython 2\n\n\nPython 3\n\n\nLibraries\n\n\n\n\n\n\n\n\nForeword\n\n\nCheat sheets.\n\n\n\n\nPython 2\n\u00b6\n\n\n\n\nPython 2\n. PDF\n\n\nsys\n variables & argv, \nos\n variables, class methods, list methods, string methods, file methods, slice, datatime methods & formatting\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Quick Reference\n. PDF\n\n\n*help, operators, import, data types, syntax structure, built-in functions, math module functions, string methods & formatting, list methods, tuple methods, dictionary methods, file methods, ASCII.\n\n\n\n\n\n\n\n\n\n\n\n../img/\n\n\n\n\n\n\n\n\n\n\nPython 2\n. PDF\n\n\nlogic, strings, tuples, dictionaries, list, class & function, files\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython 2\n. PDF\n\n\nvariables, data types, functions, classes, imports, lists, comparisons, arithmetics, comments, control flow, exceptions & errors, files\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython 3\n\u00b6\n\n\n\n\nPython 3\n. PDF\n\n\ndata types, identifiers, variables, sequences, conversions, indexing, boolean, maths, imports, conditional statements, exceptions & errors, conditional loop, iterative loops, display, inputs, operations, lists, dictionaries, sets, files, integers, functions, strings, formatting\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLibraries\n\u00b6\n\n\n\n\nPython Debugger\n. PDF\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Decorators\n. PDF",
            "title": "Python Cheat Sheets"
        },
        {
            "location": "/Py_CS/#python-3",
            "text": "Python 3 . PDF  data types, identifiers, variables, sequences, conversions, indexing, boolean, maths, imports, conditional statements, exceptions & errors, conditional loop, iterative loops, display, inputs, operations, lists, dictionaries, sets, files, integers, functions, strings, formatting",
            "title": "Python 3"
        },
        {
            "location": "/Py_CS/#libraries",
            "text": "Python Debugger . PDF        Python Decorators . PDF",
            "title": "Libraries"
        },
        {
            "location": "/Python_Preliminaries/",
            "text": "CONTENT\n\n\n1, Installing (Complementary Details)\n\n\n2, pip\n\n\n3, Git\n\n\n4, Virtual Environment\n\n\n5, Launching\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\n1, Installing (Complementary Details)\n\u00b6\n\n\nPython\n\n\n\n\nInstalling Python, basic libraries, and virtual environments.\n\n\nhttp://docs.python-guide.org/en/latest/starting/install/win/#install-windows\n\n\nhttp://docs.python-guide.org/en/latest/starting/install/linux/\n\n\n\n\n\n\nSetting the path in Windows (examples):\n\n\nset PATH=%PATH%;C:\\Python27\n.\n\n\nset PATH=%PATH%;C:\\Python27\\Scripts\n.\n\n\nset PATH=%PATH%;C:\\PythonXX\n.\n\n\nset PATH=%PATH%;C:\\PythonXX\\Scripts\n.\n\n\n\n\n\n\nSetting the path in Linux (example):\n\n\nexport PYTHONPATH=$PYTHONPATH:\n.\n\n\n\u2026\n\n\n\n\n\n\n\n\n2, pip\n\u00b6\n\n\npypi\n\n\nPyPY directory of libraries.\n\n\nImportant commands:\n\n\n\n\npip help\n ou \npip --help\n.\n\n\npip install <module>\n.\n\n\npip --version\n.\n\n\npip install --upgrade pip\n\n\nsudo pip install <module>\n.\n\n\npip uninstall <module>\n.\n\n\npip install --user <module>\n: circumvent the \nsudo\n command.\n\n\n\n\n3, Git\n\u00b6\n\n\nAfter installing Git, to execute Python module in the Git Bash, (re)set the path in the Git Bash (example): \nexport PATH=\"$PATH:/c/Python27\"\n, \n\n\nexport PATH=\"$PATH:/c/Python27/Scripts\"\n, \u2026 The Git Bash simulates a UNIX-type environment.\n\n\n4, Virtual Environment\n\u00b6\n\n\nvirtual, environment, separate, project\n\n\nWhen you install a library, it is accessible to all python scripts. Project A and B have access to the library. \n\n\nIt brings out a problem if \u201cProject A depends on version 1.x but, Project B needs 4.x\u201d. This problem is recurrent when working with web frameworks. For example, you can work on a project which requires Django 1.3 while also maintaining a project which requires Django 1.0.\n\n\nA virtual environment solves this problem by building a sandbox for a project.\n\n\n5, Launching\n\u00b6\n\n\nWindows vs. UNIX (Linux or Mac OS X).\n\n\nAt the top of scripts\n\n\n\n\nIn Windows, Python 2:\n\n\n#! python\n\n\n\n\n\n\nWindows, Python 3:\n\n\n#! python 3\n\n\n\n\n\n\nUNIX, Python 2:\n\n\n#!/usr/bin/env python\n\n\n\n\n\n\nUNIX, Python 3:\n\n\n#!/usr/bin/env python 3\n\n\n\n\n\n\nAdd:\n\n\n# -*coding: utf-8 -*-\n\n\n# -*coding: latin-1 -*-\n\n\n\n\n\n\n\n\nLaunch a script\n\n\n\n\nIn Windows, Python 2:\n\n\npython <script.py>\n\n\npy <script.py>\n\n\npy -2 <script.py>\n\n\npy -2.7 <script.py>\n\n\n\n\n\n\nIn UNIX, Python 2:\n\n\npython <script.py>\n\n\n\n\n\n\nIn Windows, Python 3:\n\n\npy -3 <script.py>\n\n\npy -3.5 <script.py>\n\n\n\n\n\n\nIn UNIX, Python 3:\n\n\npython3 <script.py>\n\n\n\n\n\n\n\n\nIn UNIX-based OS, with a shebang, once the script is created, we can go in the folder and enter \nchmod +x <script.py>\n to change the properties. Now, we can launch a script with \n./<script.py>\n.\n\n\nLaunch a module\n\n\n\n\nSometimes, launching Python modules cannot be done directly with \npip install <script>\n for example.\n\n\nIn Windows (examples):\n\n\npy -2 -m pip install <script>\n if \npip install <script>\n does not work.\n\n\npy -2 -m pip install flake8\n.\n\n\npy -2 -m pip install pylint\n.    \n\n\n\n\n\n\n\n\nLaunch the shell/bash\n\n\n\n\nThe shell, Python 2:\n\n\npython\n\n\npy -2\n\n\npy -2.7\n\n\n\n\n\n\nThe bash, Python 2:\n\n\npython\n\n\npython2\n\n\n\n\n\n\nThe shell, Python 3:\n\n\npy -3\n\n\npy -3.5\n\n\n\n\n\n\nThe bash, Python 3:\n\n\npython3",
            "title": "Python Preliminaries"
        },
        {
            "location": "/Python_Preliminaries/#2-pip",
            "text": "pypi  PyPY directory of libraries.  Important commands:   pip help  ou  pip --help .  pip install <module> .  pip --version .  pip install --upgrade pip  sudo pip install <module> .  pip uninstall <module> .  pip install --user <module> : circumvent the  sudo  command.",
            "title": "2, pip"
        },
        {
            "location": "/Python_Preliminaries/#3-git",
            "text": "After installing Git, to execute Python module in the Git Bash, (re)set the path in the Git Bash (example):  export PATH=\"$PATH:/c/Python27\" ,   export PATH=\"$PATH:/c/Python27/Scripts\" , \u2026 The Git Bash simulates a UNIX-type environment.",
            "title": "3, Git"
        },
        {
            "location": "/Python_Preliminaries/#4-virtual-environment",
            "text": "virtual, environment, separate, project  When you install a library, it is accessible to all python scripts. Project A and B have access to the library.   It brings out a problem if \u201cProject A depends on version 1.x but, Project B needs 4.x\u201d. This problem is recurrent when working with web frameworks. For example, you can work on a project which requires Django 1.3 while also maintaining a project which requires Django 1.0.  A virtual environment solves this problem by building a sandbox for a project.",
            "title": "4, Virtual Environment"
        },
        {
            "location": "/Python_Preliminaries/#5-launching",
            "text": "Windows vs. UNIX (Linux or Mac OS X).  At the top of scripts   In Windows, Python 2:  #! python    Windows, Python 3:  #! python 3    UNIX, Python 2:  #!/usr/bin/env python    UNIX, Python 3:  #!/usr/bin/env python 3    Add:  # -*coding: utf-8 -*-  # -*coding: latin-1 -*-     Launch a script   In Windows, Python 2:  python <script.py>  py <script.py>  py -2 <script.py>  py -2.7 <script.py>    In UNIX, Python 2:  python <script.py>    In Windows, Python 3:  py -3 <script.py>  py -3.5 <script.py>    In UNIX, Python 3:  python3 <script.py>     In UNIX-based OS, with a shebang, once the script is created, we can go in the folder and enter  chmod +x <script.py>  to change the properties. Now, we can launch a script with  ./<script.py> .  Launch a module   Sometimes, launching Python modules cannot be done directly with  pip install <script>  for example.  In Windows (examples):  py -2 -m pip install <script>  if  pip install <script>  does not work.  py -2 -m pip install flake8 .  py -2 -m pip install pylint .         Launch the shell/bash   The shell, Python 2:  python  py -2  py -2.7    The bash, Python 2:  python  python2    The shell, Python 3:  py -3  py -3.5    The bash, Python 3:  python3",
            "title": "5, Launching"
        },
        {
            "location": "/Python_Nice_to_Have/",
            "text": "CONTENT\n\n\n1, mistune Converts Documents\n\n\n2, logging Collects Data\n\n\n3, PIL Manipulates Images\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\n1, \nmistune\n Converts Documents\n\u00b6\n\n\nconvert, conversion, document, file\n\n\nmistune is a markdown parser, turn into HTML markdown\n\n\nThe \nmistune\n module is a markdown parser that turns markdown file into HTML. Run this script to see the html result in the terminal. For more on converting documents, check Pandoc. Install \nmistune\n with pip.\n\n\nimport mistune\n\ntext_block = 'The `mistune` module converts .md to .html.'\n\nhtml_block = mistune.markdown(text_block) # convert to html\n\nprint html_block\n\n\n\n\nOr run this command  to produce a .html document:\n\n\npython mistune_pgm.py > mistune_html.html\n\n\n\n\n2, \nlogging\n Collects Data\n\u00b6\n\n\n\n\nLogging is a library recording what users pass in the code.\n\n\nIt creates log files (text documents); it collects data.\n\n\nFirst, it is a good tool for gathering data.\n\n\nSecond, it could also be a good tool for debugging; we can monitor what is inputed in the variables.\n\n\n\n\nWe have a starting script.\n\n\ndef get_location(monster, door, player):\n    \"\"\"Takes 3 arguments; string type.\n    Asks to enter 3 inputs.\n    Uses the 3 inputs in a sentence to print a sentence.\n    \"\"\"\n\n    print \"The %s behind the %s door was slayed by %s.\" % (monster, door, player)\n\n\nmonsterr = raw_input(\"Enter a monster type: \")\ndoorr = raw_input(\"Enter a door color: \")\nplayerr = raw_input(\"Enter the player's name: \")\n\nget_location(monsterr, doorr, playerr)\n\n\n\n\nWe run the script, the console displays 3 input messages, we input strings (Blob, blue, Al), and the script prints the results.\n\n\nThe Blob behind the blue door was slayed by Al.\n\n\n\n\nNow, we add the \nlogging\n library.\n\n\nimport logging\n\n\nlogging.basicConfig(filename='game.log', level=logging.DEBUG) # invisible to the user\n\n\ndef get_location(monster, door, player):\n    \"\"\"\n    Takes 3 arguments; string type.\n    Asks to enter 3 inputs.\n    Uses the 3 inputs in a sentence to print a sentence.\n    \"\"\"\n\n    print \"The %s behind the %s door was slayed by %s\" % (monster, door, player)\n\n\nmonsterr = raw_input(\"Enter a monster type: \")\ndoorr = raw_input(\"Enter a door color: \")\nplayerr = raw_input(\"Enter the player's name: \")\n\nget_location(monsterr, doorr, playerr)\n\nlogging.info('monsterr: {}; doorr: {}; playerr {}'.format(\n    monsterr, doorr, playerr)) # invisible to the user\n\n\n\n\nThe user does not see the difference. But anytime someone runs the script, inputs are save to a log file: game.log.txt.\n\n\nWe open the file.\n\n\nINFO:root:monsterr: Blob; doorr: blue; playerr Al\nINFO:root:monsterr: Puik; doorr: red; playerr Felicia\n\n\n\n\nIn the \nlogging.basicConfig\n function, we select \nlevel=logging.DEBUG\n.\n\n\nThere are 6 log levels (higher to lower): \nCRITICAL\n, \nERROR\n, \nWARNING\n, \nINFO\n, \nDEBUG\n, \nNOTSET\n.\n\n\n\n\nINFO\n, \nDEBUG\n are information about the running of an app.\n\n\nWARNING\n is for keeping track of questionable or exceptional things happening.\n\n\nERROR\n, \nCRITICAL\n are for when things go wrong.\n\n\n\n\n3, \nPIL\n Manipulates Images\n\u00b6\n\n\nThe \nPIL\n package stands for \u2018Python Image library\u2019 or Pillow. Pillow adds image processing capabilities. The library supports many file formats and provides powerful image processing and graphics capabilities. Given these images:\n\n\n\n\n\n\n\n\nballons.jpg\n\n\nribbons.jpg\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport PIL\n\nballons = Image.open('ballons.jpg')\nribbons = Image.open('ribbons.jpg')\n\n# pixels; left, top, right, bottom (clockwise)\nbox = (22, 324, 826, 846)\nballons.crop(box).show()\n\nballons.rotate(90).show()\n\nballons.rotate(45).show() # won't work\n\nballons.rotate(45, expand = True).show() # instead\n\nballons.rotate(90).save('balloon2,jpg') # to the same directory\nballons.rotate(90).save('path/balloon2,jpg') # to another directory",
            "title": "Python Nice to Have"
        },
        {
            "location": "/Python_Nice_to_Have/#2-logging-collects-data",
            "text": "Logging is a library recording what users pass in the code.  It creates log files (text documents); it collects data.  First, it is a good tool for gathering data.  Second, it could also be a good tool for debugging; we can monitor what is inputed in the variables.   We have a starting script.  def get_location(monster, door, player):\n    \"\"\"Takes 3 arguments; string type.\n    Asks to enter 3 inputs.\n    Uses the 3 inputs in a sentence to print a sentence.\n    \"\"\"\n\n    print \"The %s behind the %s door was slayed by %s.\" % (monster, door, player)\n\n\nmonsterr = raw_input(\"Enter a monster type: \")\ndoorr = raw_input(\"Enter a door color: \")\nplayerr = raw_input(\"Enter the player's name: \")\n\nget_location(monsterr, doorr, playerr)  We run the script, the console displays 3 input messages, we input strings (Blob, blue, Al), and the script prints the results.  The Blob behind the blue door was slayed by Al.  Now, we add the  logging  library.  import logging\n\n\nlogging.basicConfig(filename='game.log', level=logging.DEBUG) # invisible to the user\n\n\ndef get_location(monster, door, player):\n    \"\"\"\n    Takes 3 arguments; string type.\n    Asks to enter 3 inputs.\n    Uses the 3 inputs in a sentence to print a sentence.\n    \"\"\"\n\n    print \"The %s behind the %s door was slayed by %s\" % (monster, door, player)\n\n\nmonsterr = raw_input(\"Enter a monster type: \")\ndoorr = raw_input(\"Enter a door color: \")\nplayerr = raw_input(\"Enter the player's name: \")\n\nget_location(monsterr, doorr, playerr)\n\nlogging.info('monsterr: {}; doorr: {}; playerr {}'.format(\n    monsterr, doorr, playerr)) # invisible to the user  The user does not see the difference. But anytime someone runs the script, inputs are save to a log file: game.log.txt.  We open the file.  INFO:root:monsterr: Blob; doorr: blue; playerr Al\nINFO:root:monsterr: Puik; doorr: red; playerr Felicia  In the  logging.basicConfig  function, we select  level=logging.DEBUG .  There are 6 log levels (higher to lower):  CRITICAL ,  ERROR ,  WARNING ,  INFO ,  DEBUG ,  NOTSET .   INFO ,  DEBUG  are information about the running of an app.  WARNING  is for keeping track of questionable or exceptional things happening.  ERROR ,  CRITICAL  are for when things go wrong.",
            "title": "2, logging Collects Data"
        },
        {
            "location": "/Python_Nice_to_Have/#3-pil-manipulates-images",
            "text": "The  PIL  package stands for \u2018Python Image library\u2019 or Pillow. Pillow adds image processing capabilities. The library supports many file formats and provides powerful image processing and graphics capabilities. Given these images:     ballons.jpg  ribbons.jpg           import PIL\n\nballons = Image.open('ballons.jpg')\nribbons = Image.open('ribbons.jpg')\n\n# pixels; left, top, right, bottom (clockwise)\nbox = (22, 324, 826, 846)\nballons.crop(box).show()\n\nballons.rotate(90).show()\n\nballons.rotate(45).show() # won't work\n\nballons.rotate(45, expand = True).show() # instead\n\nballons.rotate(90).save('balloon2,jpg') # to the same directory\nballons.rotate(90).save('path/balloon2,jpg') # to another directory",
            "title": "3, PIL Manipulates Images"
        },
        {
            "location": "/Freeze_the_Code/",
            "text": "CONTENT\n\n\n1, Distutils (an Overview)\n\n\n2, cx-Freeze (with Snippets)\n\n\n3, pyInstaller (with Snippets)\n\n\n4, Nuitka (an Overview)\n\n\n5, PyPy (an Overview)\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\n\n\nFreezing a Python file is similar to compiling the file. When running the executable file, the code runs faster than with interpreted code.\n\n\nhttp://docs.python-guide.org/en/latest/shipping/freezing/?highlight=freeze\n\n\n\n\n\n\nIt is done on Windows in the following examples.\n\n\nIt can be executed on all OS: Windows, Linux and Max OS X (using Wine for all UNIX OS).\n\n\n\n\n1, Distutils (an Overview)\n\u00b6\n\n\n\n\nBuilding with distutils works well on all OS.\n\n\nThe package provides support for building and installing additional modules (libraries or packages) into a Python installation.\n\n\nThe new modules may be either 100%-pure Python, written in C, or coded in both Python and C.\n\n\ndistutils\n autogenerates an install script.\n\n\n\n\nDocumentation\n\n\n\n\nhttps://wiki.python.org/moin/Distutils/Tutorial\n\n\nhttps://docs.python.org/2/distutils/\n\n\n\n\n2, cx-Freeze (with Snippets)\n\u00b6\n\n\n\n\ncx_Freeze\n freezes Python scripts into executables.\n\n\nAlike \npy2exe\n for Windows only and \npy2app\n for Mac OS X only.\n\n\nBuilding with \ncx_Freeze\n works best on Windows.\n\n\nSupports Python 2.3 or higher (including Python 3).\n\n\nSimpler than \ndistutils\n.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://cx-freeze.readthedocs.io\n\n\nhttps://anthony-tuininga.github.io/cx_Freeze/\n\n\nInstall \ncx_Freeze\n (works on Pyhon 2 & 3).\n\n\nThe easiest way is with \npip install cx_Freeze\n.\n\n\npip3 install cx_Freeze\n.\n\n\n\n\n\n\n\n\nProcedure with a single script\n\n\nHave the \nhello.py\n ready.\n\n\ndef main():\nprint(\"Hello World\")\ninput(\"nPlease press ENTER to continue...\")\n\nif __name__ == \"__main__\":\nmain()\n\n\n\n\n\n\nCreate a \nsetup.py\n.\n\n\nFind out more in the doc.\n\n\n\n\n\n\nSimple setup.\n\n\n\n\nimport sys\nfrom cx_Freeze import setup, Executable\n\nsetup(\nname = \"Hello\",\nversion = \"0.1\",\ndescription = \"A general utility\",\nexecutables = [Executable(\"hello.py\", base = None)]\n)\n\n\n\n\n\n\nBetter setup.\n\n\n\n\nimport sys\nfrom cx_Freeze import setup, Executable\n\nincludefiles = [] # include any files here that you wish\nexcludes = []\npackages = []\n\nexe = Executable(\n# what to build\nscript = \"hello.py\", # the name of the main python script goes here \ninitScript = None,\nbase = None, # if creating a GUI instead of a console app, type \"Win32GUI\"\ntargetName = \"hello.exe\", # the name of the executable file\nicon = None # if you want to use an icon file, specify the file name here\n)\n\nsetup(\n# the actual setup & the definition of other misc. info\nname = \"Hello\", # the program name\nversion = \"0.1\",\ndescription = \"A general utility\",\nauthor = \"Your name\",\nauthor_email = \"your@email.com\",\noptions = {\"build_exe\": {\"excludes\":excludes,\"packages\":packages, \"include_files\":includefiles}},\nexecutables = [exe]\n)\n\n\n\n\n\n\nPlace the files in C:\\PythonXX\\, where pip and Python are installed.\n\n\nMake sure the path is in the environment variables or exported (we assume this is understood and done).\n\n\nOpen the shell (cmd), go to the C:\\PythonXX\\ directory.\n\n\nBuild the executable by calling the \nsetup.py\n script with the Python version of our choice.\n\n\n\n\npython setup.py build\n\n\n\n\n\n\nThe created files are located in C:\\PythonXX\\build\u2026\n\n\nGo in the subfolder, find the .exe file and launch it.\n\n\nOn Linux and Mac OS X, the .exe file must to be run with Wine (executing Windows apps)\n\n\nBuild an installer for Windows containing all the files.\n\n\n\n\npython setup.py bdist_msi\n\n\n\n\n\n\nThe installer is located in C:\\PythonXX\\dist\\\n\n\nIt can be distributed and installed/repaired/removed as a Windows program.\n\n\nThe installation creates what the build command does in a directory of our choice.\n\n\nBuild an installer on Mac OS X.\n\n\n\n\npython setup.py bdist_dmg\n\n\n\n\n\n\n\n\nProcedure with a set of scripts (with folders)\n\n\n\n\n\n\nThe project might look like this.\n\n\n\n\n\n\n\u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map\n\n\n\n\n\n\nUnder the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.\n\n\nThe setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\\n\n\nCreate a \nsetup.py\n.\n\n\nFind out more in the doc.\n\n\n\n\n\n\nSimple setup (or a more elaborate setup).\n\n\n\n\nimport sys\nfrom cx_Freeze import setup, Executable\n\nsetup(\nname = \"Any Names\",\nversion = \"0.1\",\ndescription = \"Any Description\",\nexecutables = [Executable(\"bin/FileName.py\", base = None)]\n)\n\n\n\n\n\n\nBuild the executable by calling the setup.py script with the Python version of choice.\n\n\n\n\nPros & Cons\n\n\n\n\nIt can handle a set of files (such as with the last example).\n\n\nLinux and Mac OS X can read the executable (using Wine).\n\n\nEasy to deploy (download, open, execute).\n\n\nIt does not generate a single file, except with the \nbdist_\n commands. However, a distribution requires additional steps to deploy.\n\n\n\n\n3, pyInstaller (with Snippets)\n\u00b6\n\n\n\n\npyinstaller\n is a simpler alternative to cx-Freeze.\n\n\nLibraries like \nPyQt\n, \nDjango\n or \nmatplotlib\n are fully supported, without having to handle plugins or external data files manually.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://www.pyinstaller.org/\n\n\nhttps://github.com/pyinstaller/pyinstaller\n\n\nInstall pyinstaller (works on Pyhon 2 & 3).\n\n\nThe easiest way is with \npip install pyinstaller\n.\n\n\npip3 install pyinstaller\n.\n\n\n\n\n\n\n\n\nProcedure with a single script\n\n\n\n\nHave the \nhello.py\n ready.\n\n\n\n\ndef main():\nprint(\"Hello World\")\ninput(\"nPlease press ENTER to continue...\")\n\nif __name__ == \"__main__\":\nmain()\n\n\n\n\n\n\nPlace the files in C:\\PythonXX\\, where pip and Python are installed.\n\n\nMake sure the path is in the environment variables or exported (we assume this is understood and done).\n\n\nOpen the shell (cmd), go to the C:\\PythonXX\\ directory.\n\n\nBuild the executable.\n\n\n\n\npyinstaller hello.py\n\n\n\n\nOr\n\n\npyinstaller -D hello.py\n\n\n\n\n\n\nThe created files are located in C:\\PythonXX\\dist\u2026\n\n\nGo in the subfolder, find the .exe file and launch it.\n\n\nThe default option is \n-D\n (above) is facultative.\n\n\nBuild the single executable file with the bundle option \n-F\n (below).\n\n\n\n\npyinstaller -F hello.py\n\n\n\n\n\n\n\n\nThe created file is located in C:\\PythonXX\\dist\u2026\n\n\n\n\n\n\nFind the single .exe file and launch it.\n\n\n\n\n\n\nBuild with an icon (.ico file)\n\n\n\n\nThe .ico and .py files are located in the same folder, otherwise we have to specify the path with filename.ico.\n\n\n\n\npyinstaller -F -i \"favicon.ico\" hello.py\n\n\n\n\n\n\n\n\nProcedure with a set of scripts (with folders)\n\n\n\n\n\n\nThe project might look like this.\n\n\n\n\n\n\n\u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map\n\n\n\n\n\n\n\n\nUnder the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.\n\n\n\n\n\n\nThe setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\\n\n\n\n\n\n\nBuild the single executable file.\n\n\n\n\n\n\npyinstaller -F -i \"favicon.ico\" bin/hello.py\n\n\n\n\nPros & Cons\n\n\n\n\nIt can handle a set of files (such as with the last example).\n\n\nLinux and Mac OS X can read the executable (using Wine).\n\n\nEasy to deploy (download, open, execute). Easier than with cx-Freeze, but without the flexibility a \nsetup.py\n file can allow.\n\n\nHowever, it can generate a single file: dowload, then launch in a single click.\n\n\n\n\n4, Nuitka (an Overview)\n\u00b6\n\n\n\n\nPython compiler compatible with CPython.\n\n\nWorks on all OS.\n\n\nCompiled files are faster.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://nuitka.net/pages/overview.html.\n\n\nCheck out the requirements.\n\n\nNeed for a C++ compiler.\n\n\n\n\n\n\n\n\n5, PyPy (an Overview)\n\u00b6\n\n\n\n\nAlternative to CPython: RPython (restricted Python).\n\n\nWorks on all OS, best on Linux.\n\n\nCompiled files are faster.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://pypy.org/index.html",
            "title": "Freeze the Code"
        },
        {
            "location": "/Freeze_the_Code/#2-cx-freeze-with-snippets",
            "text": "cx_Freeze  freezes Python scripts into executables.  Alike  py2exe  for Windows only and  py2app  for Mac OS X only.  Building with  cx_Freeze  works best on Windows.  Supports Python 2.3 or higher (including Python 3).  Simpler than  distutils .   Documentation   http://cx-freeze.readthedocs.io  https://anthony-tuininga.github.io/cx_Freeze/  Install  cx_Freeze  (works on Pyhon 2 & 3).  The easiest way is with  pip install cx_Freeze .  pip3 install cx_Freeze .     Procedure with a single script  Have the  hello.py  ready.  def main():\nprint(\"Hello World\")\ninput(\"nPlease press ENTER to continue...\")\n\nif __name__ == \"__main__\":\nmain()   Create a  setup.py .  Find out more in the doc.    Simple setup.   import sys\nfrom cx_Freeze import setup, Executable\n\nsetup(\nname = \"Hello\",\nversion = \"0.1\",\ndescription = \"A general utility\",\nexecutables = [Executable(\"hello.py\", base = None)]\n)   Better setup.   import sys\nfrom cx_Freeze import setup, Executable\n\nincludefiles = [] # include any files here that you wish\nexcludes = []\npackages = []\n\nexe = Executable(\n# what to build\nscript = \"hello.py\", # the name of the main python script goes here \ninitScript = None,\nbase = None, # if creating a GUI instead of a console app, type \"Win32GUI\"\ntargetName = \"hello.exe\", # the name of the executable file\nicon = None # if you want to use an icon file, specify the file name here\n)\n\nsetup(\n# the actual setup & the definition of other misc. info\nname = \"Hello\", # the program name\nversion = \"0.1\",\ndescription = \"A general utility\",\nauthor = \"Your name\",\nauthor_email = \"your@email.com\",\noptions = {\"build_exe\": {\"excludes\":excludes,\"packages\":packages, \"include_files\":includefiles}},\nexecutables = [exe]\n)   Place the files in C:\\PythonXX\\, where pip and Python are installed.  Make sure the path is in the environment variables or exported (we assume this is understood and done).  Open the shell (cmd), go to the C:\\PythonXX\\ directory.  Build the executable by calling the  setup.py  script with the Python version of our choice.   python setup.py build   The created files are located in C:\\PythonXX\\build\u2026  Go in the subfolder, find the .exe file and launch it.  On Linux and Mac OS X, the .exe file must to be run with Wine (executing Windows apps)  Build an installer for Windows containing all the files.   python setup.py bdist_msi   The installer is located in C:\\PythonXX\\dist\\  It can be distributed and installed/repaired/removed as a Windows program.  The installation creates what the build command does in a directory of our choice.  Build an installer on Mac OS X.   python setup.py bdist_dmg    Procedure with a set of scripts (with folders)    The project might look like this.    \u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map   Under the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.  The setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\  Create a  setup.py .  Find out more in the doc.    Simple setup (or a more elaborate setup).   import sys\nfrom cx_Freeze import setup, Executable\n\nsetup(\nname = \"Any Names\",\nversion = \"0.1\",\ndescription = \"Any Description\",\nexecutables = [Executable(\"bin/FileName.py\", base = None)]\n)   Build the executable by calling the setup.py script with the Python version of choice.   Pros & Cons   It can handle a set of files (such as with the last example).  Linux and Mac OS X can read the executable (using Wine).  Easy to deploy (download, open, execute).  It does not generate a single file, except with the  bdist_  commands. However, a distribution requires additional steps to deploy.",
            "title": "2, cx-Freeze (with Snippets)"
        },
        {
            "location": "/Freeze_the_Code/#3-pyinstaller-with-snippets",
            "text": "pyinstaller  is a simpler alternative to cx-Freeze.  Libraries like  PyQt ,  Django  or  matplotlib  are fully supported, without having to handle plugins or external data files manually.   Documentation   http://www.pyinstaller.org/  https://github.com/pyinstaller/pyinstaller  Install pyinstaller (works on Pyhon 2 & 3).  The easiest way is with  pip install pyinstaller .  pip3 install pyinstaller .     Procedure with a single script   Have the  hello.py  ready.   def main():\nprint(\"Hello World\")\ninput(\"nPlease press ENTER to continue...\")\n\nif __name__ == \"__main__\":\nmain()   Place the files in C:\\PythonXX\\, where pip and Python are installed.  Make sure the path is in the environment variables or exported (we assume this is understood and done).  Open the shell (cmd), go to the C:\\PythonXX\\ directory.  Build the executable.   pyinstaller hello.py  Or  pyinstaller -D hello.py   The created files are located in C:\\PythonXX\\dist\u2026  Go in the subfolder, find the .exe file and launch it.  The default option is  -D  (above) is facultative.  Build the single executable file with the bundle option  -F  (below).   pyinstaller -F hello.py    The created file is located in C:\\PythonXX\\dist\u2026    Find the single .exe file and launch it.    Build with an icon (.ico file)   The .ico and .py files are located in the same folder, otherwise we have to specify the path with filename.ico.   pyinstaller -F -i \"favicon.ico\" hello.py    Procedure with a set of scripts (with folders)    The project might look like this.    \u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map    Under the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.    The setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\    Build the single executable file.    pyinstaller -F -i \"favicon.ico\" bin/hello.py  Pros & Cons   It can handle a set of files (such as with the last example).  Linux and Mac OS X can read the executable (using Wine).  Easy to deploy (download, open, execute). Easier than with cx-Freeze, but without the flexibility a  setup.py  file can allow.  However, it can generate a single file: dowload, then launch in a single click.",
            "title": "3, pyInstaller (with Snippets)"
        },
        {
            "location": "/Freeze_the_Code/#4-nuitka-an-overview",
            "text": "Python compiler compatible with CPython.  Works on all OS.  Compiled files are faster.   Documentation   http://nuitka.net/pages/overview.html.  Check out the requirements.  Need for a C++ compiler.",
            "title": "4, Nuitka (an Overview)"
        },
        {
            "location": "/Freeze_the_Code/#5-pypy-an-overview",
            "text": "Alternative to CPython: RPython (restricted Python).  Works on all OS, best on Linux.  Compiled files are faster.   Documentation   http://pypy.org/index.html",
            "title": "5, PyPy (an Overview)"
        },
        {
            "location": "/Decorators/",
            "text": "Python Decorators\n\u00b6\n\n\nForeword\n\n\nNotes and code snippets. Python 3. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\nCONTENT\n\n\nPython Decorators\n\n\nThe Goal of Decorators\n\n\nFirst Thing First\n\n\nInvoking a Decorator\n\n\nUsing Decorators\n\n\nCases\n\n\nMore Cases and Examples\n\n\n\n\n\n\n\n\n\n\n\n\nThe Goal of Decorators\n\u00b6\n\n\nDecorators vs the Decorator Pattern\n\n\nPython decorators are best equated to macros.\n\n\nDefinition\n\n\n\n\nThey modify functions, and in the case of class decorators, entire classes. They provide a simpler alternative to metaclasses.\n\n\nA decorator itself is a callable that returns a callable.\n\n\nA decorator is a function that takes a function object as its argument, and returns a function object, and in the process, makes necessary modifications to the input function, possibly enhancing it.\n\n\nUseful for:\n\n\nbookkeeping,\n\n\nrepeating insularity functionalities,\n\n\nadding functionality of the function,\n\n\nmodifying the behavior of the function;\n\n\nin Django, Flask or other web frameworks.\n\n\n\n\n\n\n\n\nFirst Thing First\n\u00b6\n\n\nFirst dive\n\n\nDecorators are easy to add or remove. They are nested functions; inserted in another function.\n\n\nBelow, \ninner()\n can live inside \nouter()\n. When you call \nouter()\n, you can also call \ninner()\n.\n\n\nfrom functools import wraps\n\ndef outer():\n    number = 5\n\n    def inner():\n        print(number)\n\n    inner()\n\nouter() # print 5\ninner() # cannot be called\n\n\n\n\nFunctions are first-class objects that can be passed around:\n\n\ndef apply(func, x, y):\n    return func(x, y)\n\ndef add(x, y):\n    return x + y\n\ndef sub(x, y):\n    return x - y\n\nprint(apply(add, 5,5)) # call apply(), that calls add()\nprint(apply(sub, 2,8)) # call apply(), that calls sub()\n\n\n\n\nOutput:\n\n\n10\n-6\n\n\n\n\n\u2018Predefine scope\u2019: define the environment for the function. \ninner()\n has only access to \nouter()\n and \nnumber = 5\n.\n\n\ndef close():\n    x = 5\n\n    def inner():\n        print(x)\n\n    return inner\n\nclosure = close() # change the function name\nclosure() # call the 'new' function\n\n\n\n\nOutput:\n\n\n5\n\n\n\n\ndef add_to_five(num):\n\n    def inner():\n        print(num + 5)\n\n    return inner\n\nfifteen = add_to_five(10)\nfifteen()\n\n\n\n\nOutput: \n\n\n15\n\n\n\n\nTake two !\n\n\nA decorator is a function that accept function as an argument and returns a function.\n\n\nf()\n is an object, and it\u2019s not different from classes (\nMyClass\n) or variables (\na\n).\n\n\n>>> a = 10\n>>> def f():\n...     pass\n...\n>>> class MyClass():\n...     pass\n...\n>>> print dir()\n['MyClass', '__builtins__', '__doc__', '__name__', '__package__', 'a', 'f']\n\n\n\n\nAssign a function to a variable:\n\n\ndef func():\n   print \"func()\"\n\nfuncObj = func\nfuncObj() # inheritance from func()\n\n\n\n\nFunctions can be passed around in the same way other types of object such as strings, integers, lists, etc. \n\n\nA function can accept a function as an argument and return a new function object:\n\n\ndef myFunction(in_function):\n   def out_function():\n      pass\n   return out_function\n\n\n\n\nThe \nmyFunction\n is indeed a decorator because, by definition, a decorator is a function that takes a function object as its argument, and returns a function object (!!!).\n\n\nElaborate:\n\n\ndef myFunction(in_function):\n   def out_function():\n      print \"Entry: \", in_function.__name__\n      in_function()\n      print \"Exit: \", in_function.__name__\n   return out_function\n\n\n\n\nInvoking a Decorator\n\u00b6\n\n\nPut a simple_function into the decorator (\nmyFunction\n) as an argument, and get a \nenhanced_function\n as a return value from the decorator.\n\n\ndef simple_function():\n   pass\n\nenhanced_function = myFunction(simple_function)\n\n\n\n\nApply the decorator syntax to the code above:\n\n\n@myFunction\ndef simple_function():\n   pass\n\n\n\n\n@myFunction\n is a decorator line or an annotation line. The \n@\n indicates the application of the decorator. A decorator is the function itself which takes a function, and returns a new function: \nmyFunction\n.\n\n\nWhen the compiler passes over this code, \nsimple_function()\n is compiled. The resulting function object is passed to the \nmyFunction\n code. It produces a function-like object that is substituted for the original \nsimple_function()\n.\n\n\nThe static method:\n\n\n>>> class A:\n...    def s(x):\n...       print(x)\n...    s = staticmethod(s)\n... \n>>> A.s(10)\n10\n\n\n\n\nThe equivalent code using a decorator looks like this:\n\n\n>>> class A:\n...    @staticmethod\n...    def s(x):\n...       print(x)\n...\n>>> A.s(10)\n10\n\n\n\n\nFor example, suppose you\u2019d like to do something at the entry and exit points of a function (perform some kind of security, tracing, locking, etc.):\n\n\n@entryExit\ndef func1():\n    print \"inside func1()\"\n\n@entryExit\ndef func2():\n    print \"inside func2()\"\n\n\n\n\nAnother example:\n\n\n>>> def wrapper(f):\n...    return f\n...\n>>> def foo():\n...    pass\n...\n\n\n\n\nThen, the wrapper can be used for rebinding \nfoo()\n like this:\n\n\n>>> foo = wrapper(foo)\n\n\n\n\nSo, it\u2019s a decorator:\n\n\n>>> @wrapper\n... def foo():\n...    pass\n\n\n\n\nWith a decorator defined as below:\n\n\ndef decorator(f):\n   #process function\n   return f\n\n\n\n\nMaps the following:\n\n\n@decorator\ndef f(arg):\n   return arg*arg\n\nf(123)  # output 15129\n\n\n\n\nInto:\n\n\ndef f(arg):\n   print arg*arg\nf = decorator(f)\n\n\n\n\nDecoration maps the following line:\n\n\nf(123)\n\n\n\n\nInto:\n\n\ndecorator(f)(123)\n\n\n\n\nA function decorator is applied to a function definition by placing it on the line before that function definition begins:\n\n\n@myDecorator\ndef aFunction():\n    print \"inside aFunction\"\n\n\n\n\nThe compiler passes over the code. The \naFunction()\n is compiled. The resulting function object is passed to the \nmyDecorator\n code. It produces a function-like object that is then substituted for the original \naFunction()\n.\n\n\nUsing Decorators\n\u00b6\n\n\nWhat should the decorator do? Anything!\n\n\nDecorators allow you to modify code in functions or classes.\n\n\nThe only constraint upon the object returned by the decorator is that it can be used as a function. Any classes we use as decorators must implement \n__call__\n.\n\n\nExpect the original function code to be used at some point:\n\n\nclass myDecorator(object):\n\n    def __init__(self, f):\n        print \"inside myDecorator.__init__()\"\n        f() # Prove that function definition has completed\n\n    def __call__(self):\n        print \"inside myDecorator.__call__()\"\n\n@myDecorator\ndef aFunction():\n    print \"inside aFunction()\"\n\nprint \"Finished decorating aFunction()\"\n\naFunction()\n\n\n\n\nRun this code:\n\n\ninside myDecorator.__init__()\ninside aFunction()\nFinished decorating aFunction()\ninside myDecorator.__call__()\n\n\n\n\nThe constructor for \nmyDecorator\n is executed at the point of decoration of the function.\n\n\nCall \nf()\n inside \n__init__()\n. The creation of \nf()\n is complete before the decorator is called.\n\n\nThe decorator constructor receives the function object being decorated. \n\n\nCapture the function object in the constructor and later use it in the \n__call__()\n method.\n\n\nWhen \naFunction()\n is called after it has been decorated, the \nmyDecorator.__call__()\n method is called instead of the original code. The act of decoration replaces the original function object.\n\n\nBefore decorators were added:\n\n\ndef foo():\n    pass\nfoo = staticmethod(foo)\n\n\n\n\nWith the addition of the \n@\n decoration operator:\n\n\n@staticmethod\ndef foo():\n    pass\n\n\n\n\nThis syntax brings the idea of \u201capplying code to other code\u201d (i.e.: macros).\n\n\nSlightly More Useful\n\n\nUse the code in the decorated functions:\n\n\nclass entryExit(object):\n\n    def __init__(self, f):\n        self.f = f\n\n    def __call__(self):\n        print \"Entering\", self.f.__name__\n        self.f()\n        print \"Exited\", self.f.__name__\n\n@entryExit\ndef func1():\n    print \"inside func1()\"\n\n@entryExit\ndef func2():\n    print \"inside func2()\"\n\nfunc1()\nfunc2()\n\n\n\n\nOutput:\n\n\nEntering func1\ninside func1()\nExited func1\nEntering func2\ninside func2()\nExited func2\n\n\n\n\nThe decorated functions now have the \u2018Entering\u2019 and \u2018Exited\u2019 trace statements around the call.\n\n\nThe constructor stores the argument, which is the function object. In the call, use the \n__name__\n attribute of the function to display that function\u2019s name. \n\n\nThen call the function itself.\n\n\nUsing functions as decorators\n\n\nReplace the original function with an object of a class that has a \n__call__()\n method. But a function object is also callable. From the previous example, use a function instead of a class:\n\n\ndef entryExit(f):\n    def new_f():\n        print \"Entering\", f.__name__\n        f()\n        print \"Exited\", f.__name__\n    return new_f\n\n@entryExit\ndef func1():\n    print \"inside func1()\"\n\n@entryExit\ndef func2():\n    print \"inside func2()\"\n\nfunc1()\nfunc2()\nprint func1.__name__\n\n\n\n\nnew_f()\n is defined within the body of \nentryExit()\n. It is created and returned when \nentryExit()\n is called.  \n\n\nnew_f()\n is a closure; it captures the actual value of \nf\n.\n\n\nOnce \nnew_f()\n has been defined, it is returned from \nentryExit()\n. The decorator mechanism can assign the result as the decorated function.\n\n\nThe output of \nprint func1.__name__\n is \nnew_f\n, because the \nnew_f\n function has been substituted for the original function during decoration. If this is a problem, change the name of the decorator function before you return it:\n\n\ndef entryExit(f):\n    def new_f():\n        print \"Entering\", f.__name__\n        f()\n        print \"Exited\", f.__name__\n    new_f.__name__ = f.__name__\n    return new_f\n\n\n\n\nCases\n\u00b6\n\n\n1 - Adding \n$\n to the return value from \nprice()\n function\n\n\ndef dollar(fn):\n    def new(*args):\n        return '$' + str(fn(*args))\n    return new\n\n@dollar\ndef price(amount, tax_rate):\n    return amount + amount*tax_rate\n\nprint price(100,0.1)\n\n\n\n\nOutput:\n\n\n$110\n\n\n\n\nThe dollar decorator function takes the \nprice()\n function, and returns enhanced the output from the original \nprice()\n after modifying the inner working. Note that the decorator enables us to do it without making any changes on the \nprice()\n function itself.\n\n\nA decorator works as a wrapper, modifying the behavior of the code before and after a target function execution, without the need to modify the function itself, enhancing the original functionality.\n\n\nWith the pound or euro as well:\n\n\ndef pound(fn):\n    def new(*args):\n        return (u\"\\u00A3\").encode('utf-8') + str(fn(*args))\n        return '$' + str(fn(*args))\n    return new\n\n@pound\ndef price(amount, tax_rate):\n    return amount + amount*tax_rate\n\nprint price(100,0.1)\n\n\n\n\n2 - How many times a function called?\n\n\ndef count(f):\n    def inner(*args, **kargs):\n        inner.counter += 1\n        return f(*args, **kargs)\n    inner.counter = 0\n    return inner\n\n@count\ndef my_fnc():\n    pass\n\nif __name__ == '__main__':\n    my_fnc()\n    my_fnc()\n    my_fnc()\n\n    print 'my_fnc.counter=',my_fnc.counter\n\n\n\n\nOutput:\n\n\nmy_fnc.counter= 3\n\n\n\n\n3 - Timer\n\n\nimport time\ndef timer(f):\n    def inner(*args, **kargs):\n        t = time.time()\n        ret = f(*args, **kargs)\n        print 'timer = %s' %(time.time()-t) \n        return ret\n    return inner\n\n@timer\ndef my_fnc():\n    pass\n\nif __name__ == '__main__':\n    my_fnc()\n\n\n\n\nOutput:\n\n\ntimer = 5.96046447754e-06\n\n\n\n\nMore Cases and Examples\n\u00b6\n\n\nlearnpython.org (tutorial, snippets)\n\n\nCollected examples\n\n\ndef logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner():\n        logging.debug(\"Called {}\".format(func.__name__))\n\n        return func()\n\n    return inner\n\n\n\n\ndef logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug(\"Called {} with args {} and kwargs {}\".format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    return inner\n\n\n\n\ndef logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug(\"Called {} with args {} and kwargs {}\".format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    inner.__doc__ = func.__doc__\n    inner.__name__ = func.__name__\n\n    return inner\n\n\n\n\ndef logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    @wraps(func) # decorator\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug(\"Called {} with args {} and kwargs {}\".format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    # replace all this\n    #inner.__doc__ = func.__doc__\n    #inner.__name__ = func.__name__\n    # with  from functools import wraps  at the top\n    # functools packages\n    # wraps is a decorator; see above\n\n    return inner\n\n\n\n\n@logme\ndef sub(x, y):\n    \"\"\"Returns the difference between two numbers\"\"\"\n    return x - y",
            "title": "Decorators"
        },
        {
            "location": "/Decorators/#the-goal-of-decorators",
            "text": "Decorators vs the Decorator Pattern  Python decorators are best equated to macros.  Definition   They modify functions, and in the case of class decorators, entire classes. They provide a simpler alternative to metaclasses.  A decorator itself is a callable that returns a callable.  A decorator is a function that takes a function object as its argument, and returns a function object, and in the process, makes necessary modifications to the input function, possibly enhancing it.  Useful for:  bookkeeping,  repeating insularity functionalities,  adding functionality of the function,  modifying the behavior of the function;  in Django, Flask or other web frameworks.",
            "title": "The Goal of Decorators"
        },
        {
            "location": "/Decorators/#first-thing-first",
            "text": "First dive  Decorators are easy to add or remove. They are nested functions; inserted in another function.  Below,  inner()  can live inside  outer() . When you call  outer() , you can also call  inner() .  from functools import wraps\n\ndef outer():\n    number = 5\n\n    def inner():\n        print(number)\n\n    inner()\n\nouter() # print 5\ninner() # cannot be called  Functions are first-class objects that can be passed around:  def apply(func, x, y):\n    return func(x, y)\n\ndef add(x, y):\n    return x + y\n\ndef sub(x, y):\n    return x - y\n\nprint(apply(add, 5,5)) # call apply(), that calls add()\nprint(apply(sub, 2,8)) # call apply(), that calls sub()  Output:  10\n-6  \u2018Predefine scope\u2019: define the environment for the function.  inner()  has only access to  outer()  and  number = 5 .  def close():\n    x = 5\n\n    def inner():\n        print(x)\n\n    return inner\n\nclosure = close() # change the function name\nclosure() # call the 'new' function  Output:  5  def add_to_five(num):\n\n    def inner():\n        print(num + 5)\n\n    return inner\n\nfifteen = add_to_five(10)\nfifteen()  Output:   15  Take two !  A decorator is a function that accept function as an argument and returns a function.  f()  is an object, and it\u2019s not different from classes ( MyClass ) or variables ( a ).  >>> a = 10\n>>> def f():\n...     pass\n...\n>>> class MyClass():\n...     pass\n...\n>>> print dir()\n['MyClass', '__builtins__', '__doc__', '__name__', '__package__', 'a', 'f']  Assign a function to a variable:  def func():\n   print \"func()\"\n\nfuncObj = func\nfuncObj() # inheritance from func()  Functions can be passed around in the same way other types of object such as strings, integers, lists, etc.   A function can accept a function as an argument and return a new function object:  def myFunction(in_function):\n   def out_function():\n      pass\n   return out_function  The  myFunction  is indeed a decorator because, by definition, a decorator is a function that takes a function object as its argument, and returns a function object (!!!).  Elaborate:  def myFunction(in_function):\n   def out_function():\n      print \"Entry: \", in_function.__name__\n      in_function()\n      print \"Exit: \", in_function.__name__\n   return out_function",
            "title": "First Thing First"
        },
        {
            "location": "/Decorators/#invoking-a-decorator",
            "text": "Put a simple_function into the decorator ( myFunction ) as an argument, and get a  enhanced_function  as a return value from the decorator.  def simple_function():\n   pass\n\nenhanced_function = myFunction(simple_function)  Apply the decorator syntax to the code above:  @myFunction\ndef simple_function():\n   pass  @myFunction  is a decorator line or an annotation line. The  @  indicates the application of the decorator. A decorator is the function itself which takes a function, and returns a new function:  myFunction .  When the compiler passes over this code,  simple_function()  is compiled. The resulting function object is passed to the  myFunction  code. It produces a function-like object that is substituted for the original  simple_function() .  The static method:  >>> class A:\n...    def s(x):\n...       print(x)\n...    s = staticmethod(s)\n... \n>>> A.s(10)\n10  The equivalent code using a decorator looks like this:  >>> class A:\n...    @staticmethod\n...    def s(x):\n...       print(x)\n...\n>>> A.s(10)\n10  For example, suppose you\u2019d like to do something at the entry and exit points of a function (perform some kind of security, tracing, locking, etc.):  @entryExit\ndef func1():\n    print \"inside func1()\"\n\n@entryExit\ndef func2():\n    print \"inside func2()\"  Another example:  >>> def wrapper(f):\n...    return f\n...\n>>> def foo():\n...    pass\n...  Then, the wrapper can be used for rebinding  foo()  like this:  >>> foo = wrapper(foo)  So, it\u2019s a decorator:  >>> @wrapper\n... def foo():\n...    pass  With a decorator defined as below:  def decorator(f):\n   #process function\n   return f  Maps the following:  @decorator\ndef f(arg):\n   return arg*arg\n\nf(123)  # output 15129  Into:  def f(arg):\n   print arg*arg\nf = decorator(f)  Decoration maps the following line:  f(123)  Into:  decorator(f)(123)  A function decorator is applied to a function definition by placing it on the line before that function definition begins:  @myDecorator\ndef aFunction():\n    print \"inside aFunction\"  The compiler passes over the code. The  aFunction()  is compiled. The resulting function object is passed to the  myDecorator  code. It produces a function-like object that is then substituted for the original  aFunction() .",
            "title": "Invoking a Decorator"
        },
        {
            "location": "/Decorators/#using-decorators",
            "text": "What should the decorator do? Anything!  Decorators allow you to modify code in functions or classes.  The only constraint upon the object returned by the decorator is that it can be used as a function. Any classes we use as decorators must implement  __call__ .  Expect the original function code to be used at some point:  class myDecorator(object):\n\n    def __init__(self, f):\n        print \"inside myDecorator.__init__()\"\n        f() # Prove that function definition has completed\n\n    def __call__(self):\n        print \"inside myDecorator.__call__()\"\n\n@myDecorator\ndef aFunction():\n    print \"inside aFunction()\"\n\nprint \"Finished decorating aFunction()\"\n\naFunction()  Run this code:  inside myDecorator.__init__()\ninside aFunction()\nFinished decorating aFunction()\ninside myDecorator.__call__()  The constructor for  myDecorator  is executed at the point of decoration of the function.  Call  f()  inside  __init__() . The creation of  f()  is complete before the decorator is called.  The decorator constructor receives the function object being decorated.   Capture the function object in the constructor and later use it in the  __call__()  method.  When  aFunction()  is called after it has been decorated, the  myDecorator.__call__()  method is called instead of the original code. The act of decoration replaces the original function object.  Before decorators were added:  def foo():\n    pass\nfoo = staticmethod(foo)  With the addition of the  @  decoration operator:  @staticmethod\ndef foo():\n    pass  This syntax brings the idea of \u201capplying code to other code\u201d (i.e.: macros).  Slightly More Useful  Use the code in the decorated functions:  class entryExit(object):\n\n    def __init__(self, f):\n        self.f = f\n\n    def __call__(self):\n        print \"Entering\", self.f.__name__\n        self.f()\n        print \"Exited\", self.f.__name__\n\n@entryExit\ndef func1():\n    print \"inside func1()\"\n\n@entryExit\ndef func2():\n    print \"inside func2()\"\n\nfunc1()\nfunc2()  Output:  Entering func1\ninside func1()\nExited func1\nEntering func2\ninside func2()\nExited func2  The decorated functions now have the \u2018Entering\u2019 and \u2018Exited\u2019 trace statements around the call.  The constructor stores the argument, which is the function object. In the call, use the  __name__  attribute of the function to display that function\u2019s name.   Then call the function itself.  Using functions as decorators  Replace the original function with an object of a class that has a  __call__()  method. But a function object is also callable. From the previous example, use a function instead of a class:  def entryExit(f):\n    def new_f():\n        print \"Entering\", f.__name__\n        f()\n        print \"Exited\", f.__name__\n    return new_f\n\n@entryExit\ndef func1():\n    print \"inside func1()\"\n\n@entryExit\ndef func2():\n    print \"inside func2()\"\n\nfunc1()\nfunc2()\nprint func1.__name__  new_f()  is defined within the body of  entryExit() . It is created and returned when  entryExit()  is called.    new_f()  is a closure; it captures the actual value of  f .  Once  new_f()  has been defined, it is returned from  entryExit() . The decorator mechanism can assign the result as the decorated function.  The output of  print func1.__name__  is  new_f , because the  new_f  function has been substituted for the original function during decoration. If this is a problem, change the name of the decorator function before you return it:  def entryExit(f):\n    def new_f():\n        print \"Entering\", f.__name__\n        f()\n        print \"Exited\", f.__name__\n    new_f.__name__ = f.__name__\n    return new_f",
            "title": "Using Decorators"
        },
        {
            "location": "/Decorators/#cases",
            "text": "1 - Adding  $  to the return value from  price()  function  def dollar(fn):\n    def new(*args):\n        return '$' + str(fn(*args))\n    return new\n\n@dollar\ndef price(amount, tax_rate):\n    return amount + amount*tax_rate\n\nprint price(100,0.1)  Output:  $110  The dollar decorator function takes the  price()  function, and returns enhanced the output from the original  price()  after modifying the inner working. Note that the decorator enables us to do it without making any changes on the  price()  function itself.  A decorator works as a wrapper, modifying the behavior of the code before and after a target function execution, without the need to modify the function itself, enhancing the original functionality.  With the pound or euro as well:  def pound(fn):\n    def new(*args):\n        return (u\"\\u00A3\").encode('utf-8') + str(fn(*args))\n        return '$' + str(fn(*args))\n    return new\n\n@pound\ndef price(amount, tax_rate):\n    return amount + amount*tax_rate\n\nprint price(100,0.1)  2 - How many times a function called?  def count(f):\n    def inner(*args, **kargs):\n        inner.counter += 1\n        return f(*args, **kargs)\n    inner.counter = 0\n    return inner\n\n@count\ndef my_fnc():\n    pass\n\nif __name__ == '__main__':\n    my_fnc()\n    my_fnc()\n    my_fnc()\n\n    print 'my_fnc.counter=',my_fnc.counter  Output:  my_fnc.counter= 3  3 - Timer  import time\ndef timer(f):\n    def inner(*args, **kargs):\n        t = time.time()\n        ret = f(*args, **kargs)\n        print 'timer = %s' %(time.time()-t) \n        return ret\n    return inner\n\n@timer\ndef my_fnc():\n    pass\n\nif __name__ == '__main__':\n    my_fnc()  Output:  timer = 5.96046447754e-06",
            "title": "Cases"
        },
        {
            "location": "/Decorators/#more-cases-and-examples",
            "text": "learnpython.org (tutorial, snippets)  Collected examples  def logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner():\n        logging.debug(\"Called {}\".format(func.__name__))\n\n        return func()\n\n    return inner  def logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug(\"Called {} with args {} and kwargs {}\".format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    return inner  def logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug(\"Called {} with args {} and kwargs {}\".format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    inner.__doc__ = func.__doc__\n    inner.__name__ = func.__name__\n\n    return inner  def logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    @wraps(func) # decorator\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug(\"Called {} with args {} and kwargs {}\".format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    # replace all this\n    #inner.__doc__ = func.__doc__\n    #inner.__name__ = func.__name__\n    # with  from functools import wraps  at the top\n    # functools packages\n    # wraps is a decorator; see above\n\n    return inner  @logme\ndef sub(x, y):\n    \"\"\"Returns the difference between two numbers\"\"\"\n    return x - y",
            "title": "More Cases and Examples"
        },
        {
            "location": "/Write_Better_Python/",
            "text": "CONTENT\n\n\n1, PEP20\n\n\n2, PEP8\n\n\n3, PEP Diagnoses with flake8 & pylint\n\n\n4, Help & Docstrings\n\n\n5, pdb Debugs Scripts\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\n1, PEP20\n\u00b6\n\n\nPEP : Python Enhancement Proposals. In the Python shell, type \nimport this\n. We get the following \u2018easter egg\u2019.\n\n\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n\n\n\nThe \u2018easter egg\u2019 is a poem. A poem of best practices.\n\n\n\n\nExplicit is better than implicit. Don\u2019t add numbers to strings.\n\n\nReadability counts. Use the grammar of PEP8. Add comments.\n\n\nSpecial cases aren\u2019t special enough to break the rules. The\nlen\n function for all. A function applies to all. A method applied to some. Find the built-in function before coding new functions.\n\n\nThe code should be pleasant and easy to read.\n\n\n\n\n2, PEP8\n\u00b6\n\n\nPEP : Python Enhancement Proposals. Improves the look of the code. Here are a few principles:\n\n\n\n\nImport at the top and separate.\n\n\n1 space between parameters and variables.\n\n\n4-space indentation.\n\n\nTwo-line space between independent functions.\n\n\n1 space between operators.\n\n\n2-line space between class and other objects.\n\n\nClasses are capitalized.\n\n\nFunctions and methods are not capitalized.\n\n\n1-line space between class functions.\n\n\nConstant variable in uppercase.\n\n\nVariable in lowercase and long names.\n\n\n\n\nHere is an example where to apply these principles.\n\n\nimport sys # import at the top and separate\nimport random\n\n\ndef foo_Bar(arg1, arg2, arg3, arg4): # 1 space between parameters and variables\n    return arg1, arg2, arg3, arg4 # 4-space indentation\n\n\ndef bar(*args): # 2-line space between independent functions\n    # bad spacing\n    return 2 + 2 # 1 space between operators\n\n\nclass Submarine: # 2-line space between class and other objects; classes are capitalized\n    def one(self): # functions and methods are not capitalized\n        return 1\n\n    def two(self): # 1-line space between class functions\n        return 2\n\nCONSTANT = 10 # constant variable in uppercase\n\nalpha, beta, charlie, delta = foo_Bar( # variable in lowercase and long names\n \"a long string\", # one practical way to stack things\n \"a longer string\",\n \"yet another long string\", \n \"and other crazy string\")\n\none = 1 # 1 space\nthree = 3\nfourteen = 14\n\nprint alpha\nprint fourteen\n\nprint Submarine().two() # class.method\n\n\n\n\n3, PEP Diagnoses with \nflake8\n & \npylint\n\u00b6\n\n\nThe modules can be integrated with IDE and text editors (VIM, Emacs, gedit, Notepad++, etc.).\n\n\nflake8\n\n\n\n\nInstall \nflake8\n with pip.\n\n\nRun a script with \nflake8\n: \npython flake8 <script.py>\n. \n\n\nInstead of running the code, \nflake8\n runs a diagnosis and returns the results. \n\n\nThe results suggest improvement to the look of the script. \n\n\nIt shows a list: the line number, the character positions, and the improvement. We can then go back to the script, improve it and rerun \nflake8\n.\n\n\n\n\npylint\n\n\n\n\nInstall \npylint\n with pip.\n\n\nRun a script with \nflake8\n: \npython pylint script.py\n. \n\n\n\n\npylint\n runs a diagnosis and returns a report about the script.\n\n\n4, Help & Docstrings\n\u00b6\n\n\n\n\nIn the shell, for any command \u2018\n\u2018, type \nhelp(<cmd>)\n to get a definition.\n\n\nType \ndir(<cmd>)\n to get the attributes from the Python glossary.\n\n\nA docstrings is an enhancement to the \nhelp\n glossary.\n\n\n\n\nWithout docstrings.\n\n\ndef does_something(arg):\n    if isinstance(arg, (int, float)):\n        return arg + 10\n    elif isinstance(arg, str):\n        return str * 3\n    else:\n        raise TypeError(\"does_something only takes ints, floats, and strings\")\n\n\n\n\n\n\nWe should never read a code to figure out what it does! \n\n\nAdd docstrings: \u201c\u201d\u201d   \u201c\u201d\u201d on 1 line\n\n\nAdd docstrings: several lines (see below).\n\n\n\n\ndef does_better(arg):\n    \"\"\"Takes one argument and does something based on type.\n    If arg is a string, returns arg * 3;\n    If arg is an int or float, returns arg + 10\n    \"\"\"\n    if isinstance(arg, (int, float)):\n        return arg + 10\n    elif isinstance(arg, str):\n        return str * 3\n    else:\n        raise TypeError(\"does_something only takes ints, floats, and strings\")\n\n\n\n\n\n\nIn the shell, type \nhelp(docstrings.does_better)\n to print the function\u2019s docstring.\n\n\n\n\n5, \npdb\n Debugs Scripts\n\u00b6\n\n\nGo inside the code.\n\n\nThe next following script is bugged.\n\n\n# a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\n# modify the list\ndel my_list[3]\ndel my_list[4]\ndel my_list[6]\nprint my_list\n\n\n\n\nWe run the code and we get an error. The sloppy fix would be to add print statements.\n\n\n# a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\n# modify the list\ndel my_list[3] # ADD\nprint my_list\ndel my_list[4] # ADD\nprint my_list\ndel my_list[6] # ADD\nprint my_list\n\n\n\n\nInstead, use the Python debugger: \npdb.set_trace()\n in the code.\n\n\nimport pdb # ADD\n\n\n# a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\npdb.set_trace() # ADD\ndel my_list[3]\ndel my_list[4]\ndel my_list[6]\nprint my_list\n\n\n\n\nWhen we run the script, the routine stops at each line following the \nset_trace()\n function. We get a \n(Pdb)\n prompt. We can type in the variable name as if we were in the shell to see what is going on.\n\n\nWe punch \nn\n or \nnext\n to step forward in the script. \npdb\n pinpoint the trouble areas. In the current case, we want to delete a value at index 6 when the list had been reduced to 5 values (it is impossible to delete what is inexistant!).\n\n\nimport pdb\n\n\n# a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\npdb.set_trace()\ndel my_list[3] # [5, 2, 1, \"abcdefg\", 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[6] # [5, 2, 1, 3, 4]\nprint my_list\n\n\n\n\nAn alternative way.\n\n\n# a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\nimport pdb; pdb.set_trace() # ADD\ndel my_list[3] # [5, 2, 1, \"abcdefg\", 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list\n\n\n\n\nChange the script and rerun it.\n\n\nimport pdb\n\n\n# a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\npdb.set_trace()\ndel my_list[3] # [5, 2, 1, \"abcdefg\", 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list\n\n\n\n\nOnce the script is debugged, delete the \npdb\n stuff (it is a temporary measure).\n\n\n# a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\ndel my_list[3] # [5, 2, 1, \"abcdefg\", 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list",
            "title": "Write Better Python with PEP"
        },
        {
            "location": "/Write_Better_Python/#2-pep8",
            "text": "PEP : Python Enhancement Proposals. Improves the look of the code. Here are a few principles:   Import at the top and separate.  1 space between parameters and variables.  4-space indentation.  Two-line space between independent functions.  1 space between operators.  2-line space between class and other objects.  Classes are capitalized.  Functions and methods are not capitalized.  1-line space between class functions.  Constant variable in uppercase.  Variable in lowercase and long names.   Here is an example where to apply these principles.  import sys # import at the top and separate\nimport random\n\n\ndef foo_Bar(arg1, arg2, arg3, arg4): # 1 space between parameters and variables\n    return arg1, arg2, arg3, arg4 # 4-space indentation\n\n\ndef bar(*args): # 2-line space between independent functions\n    # bad spacing\n    return 2 + 2 # 1 space between operators\n\n\nclass Submarine: # 2-line space between class and other objects; classes are capitalized\n    def one(self): # functions and methods are not capitalized\n        return 1\n\n    def two(self): # 1-line space between class functions\n        return 2\n\nCONSTANT = 10 # constant variable in uppercase\n\nalpha, beta, charlie, delta = foo_Bar( # variable in lowercase and long names\n \"a long string\", # one practical way to stack things\n \"a longer string\",\n \"yet another long string\", \n \"and other crazy string\")\n\none = 1 # 1 space\nthree = 3\nfourteen = 14\n\nprint alpha\nprint fourteen\n\nprint Submarine().two() # class.method",
            "title": "2, PEP8"
        },
        {
            "location": "/Write_Better_Python/#3-pep-diagnoses-with-flake8-pylint",
            "text": "The modules can be integrated with IDE and text editors (VIM, Emacs, gedit, Notepad++, etc.).  flake8   Install  flake8  with pip.  Run a script with  flake8 :  python flake8 <script.py> .   Instead of running the code,  flake8  runs a diagnosis and returns the results.   The results suggest improvement to the look of the script.   It shows a list: the line number, the character positions, and the improvement. We can then go back to the script, improve it and rerun  flake8 .   pylint   Install  pylint  with pip.  Run a script with  flake8 :  python pylint script.py .    pylint  runs a diagnosis and returns a report about the script.",
            "title": "3, PEP Diagnoses with flake8 &amp; pylint"
        },
        {
            "location": "/Write_Better_Python/#4-help-docstrings",
            "text": "In the shell, for any command \u2018 \u2018, type  help(<cmd>)  to get a definition.  Type  dir(<cmd>)  to get the attributes from the Python glossary.  A docstrings is an enhancement to the  help  glossary.   Without docstrings.  def does_something(arg):\n    if isinstance(arg, (int, float)):\n        return arg + 10\n    elif isinstance(arg, str):\n        return str * 3\n    else:\n        raise TypeError(\"does_something only takes ints, floats, and strings\")   We should never read a code to figure out what it does!   Add docstrings: \u201c\u201d\u201d   \u201c\u201d\u201d on 1 line  Add docstrings: several lines (see below).   def does_better(arg):\n    \"\"\"Takes one argument and does something based on type.\n    If arg is a string, returns arg * 3;\n    If arg is an int or float, returns arg + 10\n    \"\"\"\n    if isinstance(arg, (int, float)):\n        return arg + 10\n    elif isinstance(arg, str):\n        return str * 3\n    else:\n        raise TypeError(\"does_something only takes ints, floats, and strings\")   In the shell, type  help(docstrings.does_better)  to print the function\u2019s docstring.",
            "title": "4, Help &amp; Docstrings"
        },
        {
            "location": "/Write_Better_Python/#5-pdb-debugs-scripts",
            "text": "Go inside the code.  The next following script is bugged.  # a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\n# modify the list\ndel my_list[3]\ndel my_list[4]\ndel my_list[6]\nprint my_list  We run the code and we get an error. The sloppy fix would be to add print statements.  # a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\n# modify the list\ndel my_list[3] # ADD\nprint my_list\ndel my_list[4] # ADD\nprint my_list\ndel my_list[6] # ADD\nprint my_list  Instead, use the Python debugger:  pdb.set_trace()  in the code.  import pdb # ADD\n\n\n# a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\npdb.set_trace() # ADD\ndel my_list[3]\ndel my_list[4]\ndel my_list[6]\nprint my_list  When we run the script, the routine stops at each line following the  set_trace()  function. We get a  (Pdb)  prompt. We can type in the variable name as if we were in the shell to see what is going on.  We punch  n  or  next  to step forward in the script.  pdb  pinpoint the trouble areas. In the current case, we want to delete a value at index 6 when the list had been reduced to 5 values (it is impossible to delete what is inexistant!).  import pdb\n\n\n# a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\npdb.set_trace()\ndel my_list[3] # [5, 2, 1, \"abcdefg\", 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[6] # [5, 2, 1, 3, 4]\nprint my_list  An alternative way.  # a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\nimport pdb; pdb.set_trace() # ADD\ndel my_list[3] # [5, 2, 1, \"abcdefg\", 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list  Change the script and rerun it.  import pdb\n\n\n# a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\npdb.set_trace()\ndel my_list[3] # [5, 2, 1, \"abcdefg\", 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list  Once the script is debugged, delete the  pdb  stuff (it is a temporary measure).  # a list\nmy_list = [5, 2, 1, True, \"abcdefg\", 3, False, 4]\n\ndel my_list[3] # [5, 2, 1, \"abcdefg\", 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list",
            "title": "5, pdb Debugs Scripts"
        },
        {
            "location": "/Regex/",
            "text": "CONTENT\n\n\n1, Additional Commands (unused)\n\n\n2, match & search \u2013 One Expression, One Search\n\n\nRecap:\n\n\n\n\n\n\n3, Escape Characters \u2013 Comprenhensive Search\n\n\nRecap:\n\n\n\n\n\n\n4, Repetitions \u2013 Power Search\n\n\nRecap:\n\n\n\n\n\n\n5, Sets \u2013 Target Search\n\n\nRecap:\n\n\n\n\n\n\n6, Boundaries \u2013 Smart Search\n\n\nRecap:\n\n\n\n\n\n\n7, Groups \u2013 Subdivided Search\n\n\nRecap:\n\n\n\n\n\n\n8, Compile & Build Dictionaries \u2013 Operationalized Search\n\n\nRecap:\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2 in Windows. UNIX-based OS generate slighly different results. Contrary to Windows, UNIX-based OS easily process international characters. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\nCheck out \u2018Managing Your Biological Data with Python, Chapter 9, Pattern Matching and Text Mining\u2019.\n\n\nTest\n.\n\n\n\n\n\n\n1, Additional Commands (unused)\n\u00b6\n\n\n\n\nspan\n, return a tuple containing the start, end positions of the match.\n\n\nstart\n, return the starting position of the match.\n\n\nend\n, return the ending position of the match.\n\n\ngroup\n, return the string matched by the RE\n\n\ngroups\n, return a tuple containing the strings fal all the subgroups\n\n\nsplit(s)\n, split the string into a list, splitting it wherever the RE matches\n\n\nsub(r, s)\n, find all substrings where the RE matches and replaces them with a different string\n\n\nsubn(r, s)\n, do the same thing, but return the new string and the number of replacements\n\n\nIGNORECASE\n, \nI\n, case-insensitive matches.\n\n\n\n\n2, \nmatch\n & \nsearch\n \u2013 One Expression, One Search\n\u00b6\n\n\nFirst, we have a text file called names.txt.\n\n\nLiff, Kenneth   kenneth@submarine.com   (555) 555-5555  Teacher, Submarine  @kennethliff\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\nArthur, King    king_arthur@camelot.co.uk   King, Camelot\n\u00d6sterberg, Gustav   governor@norrbotten.co.se   Governor, Norrbotten    @gustata\n, Tim   tim@killerrabbit.com    Enchanter, Killer Rabbit Cave\nCarson, Ryan    ryan@submarine.com  (555) 555-5543  CEO, Submarine  @ryancarson\nDoctor  The doctor+companion@tardis.co.uk   Time Lord, Gallifrey\nExampleson, Exampleme   me@example.com  555-555-5552    Example, Example Co.    @exemple\nObama, Barack   president.44@us.gov 555 555-5551    President, United States of America @potus44\nChalks, Andrew  andrew@submarine.com    (555) 555-5553  Teacher, Submarine  @chalkers\nVader, Darth    darth-vader@empire.gov  (555) 555-4444  Sith lord, Galactic Empire  @darthvader\n\n\n\n\nSecond, we want to process the file: extract strings. \n\n\nWe could use \nre.match\n, but the function is picky. \nre.search\n is more forgiving in terms of precision. In both cases, the function should return the first match it finds, then stop.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nprint re.search(r'McFarland', data).group() # r for raw string, no need for \\\nprint re.search(r'Arthur', data).group() # search in the strings\n\n\n\n\nResults (in Windows).\n\n\n<_sre.SRE_Match object at 0x00000000021DB510>\n<_sre.SRE_Match object at 0x00000000021DB510>\n\n\n\n\nResults may vary in UNIX-type OS. In Linux, we get.\n\n\n<_sre.SRE_Match object; span=(0, 8), match='McFarland'>\n<_sre.SRE_Match object; span=(10, 15), match='Arthur'>\n\n\n\n\nChange the script and rerun it.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nprint re.search(r'McFarland', data).group() # CHANGE\nprint re.search(r'Arthur', data).group() # CHANGE\n\n\n\n\nResults.\n\n\nMcFarland\nArthur\n\n\n\n\nAlternatively.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nlast_name = r'McFarland'\nfirst_name = r'Arthur'\nprint re.search(last_name, data).group() # CHANGE\nprint re.search(first_name, data).group() # CHANGE\n\n\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\n\n\n3, Escape Characters \u2013 Comprenhensive Search\n\u00b6\n\n\n\n\n\\w\n, match any Unicode word character.\n\n\n\\W\n, match anything that isn\u2019t a Unicode word character.\n\n\n\\s\n, any whitespace.\n\n\n\\S\n, not.\n\n\n\\d\n, any number 0-9.\n\n\n\\D\n, not.\n\n\n\\b\n, boundaries or the edges of a word.\n\n\n\\B\n, not.\n\n\n\n\nTry.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\nprint re.match(r'\\w, \\w', data) # CHANGE\n\n\n\n\nResults.\n\n\nNone\n\n\n\n\nWe get \nNone\n because of \nre.match\n. Instead, try.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch phone numbers\nprint re.search(r'\\d\\d\\d-\\d\\d\\d\\d', data).group() # CHANGE\n\n\n\n\nResults.\n\n\n555-5555\n\n\n\n\nImprove the code.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch complete phone numbers\nprint re.search(r'\\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d', data).group() # CHANGE\n\n\n\n\nResults.\n\n\n(555) 555-5555\n\n\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (see above).\n\n\n\n\n4, Repetitions \u2013 Power Search\n\u00b6\n\n\n\n\n{3}\n, repeat 3 times.\n\n\n{,3}\n, repeat 0 to 3 times.\n\n\n{3,}\n, repeat 3 or more times.\n\n\n{3, 5}\n, repeat 3, 4 or 5 times.\n\n\n?\n, repeat 0 or once.\n\n\n*\n, repeat at least 0 times (no upper bound).\n\n\n+\n, repeat at least once (no upper bound).\n\n\n\n\nCatch a name.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch a name\nprint re.search(r'\\w+, \\w+', data).group() # CHANGE\n\n\n\n\nResults.\n\n\nLiff, Kenneth\n\n\n\n\nCatch a phone number.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch a complete phone numbers\nprint re.search(r'\\(\\d{3}\\) \\d{3}-\\d{4}', data).group() # CHANGE\n\n\n\n\nResults.\n\n\n(555) 555-5555\n\n\n\n\nCatch multiple phone numbers.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# more universal way (parentheses, hyphen, space become optional)\n# on multiple lines!\nprint re.findall(r'\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4}', data) # CHANGE\n\n\n\n\nResults.\n\n\n['(555) 555-5555', '(555) 555-5555', '(555) 555-5543', '555-555-5552', '555 555-5551', '(555) 555-5553', '(555) 555-4444']\n\n\n\n\nCatch multiple names.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# universal way for names\nprint re.findall(r'\\w*, \\w+', data)  # CHANGE: findall\n\n\n\n\nResults.\n\n\n['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', ', Tim', 'Enchanter, Killer', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Obama, Barack', 'President, United', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic']\n\n\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (see above).\n\n\nfindall\n.\n\n\n\n\n5, Sets \u2013 Target Search\n\u00b6\n\n\nCatch patterns. We only need unique characters even when a word contains repetitive characters.\n\n\n\n\n[aple]\n, search for \u2018apple\u2019.\n\n\n[a-z]\n, search for any lowercase letters.\n\n\n[^2]\n, search for anything that is not 2.\n\n\n.\n, stands for any possible character.\n\n\n\n\nFor finding email addresses, search better \u2018cures\u2019 on email adresses. Search for email address regex or email address regular expressions on Stack Overflow, Quora, etc.\n\n\nWe can also try.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# find emails\nprint re.findall(r'[-\\w\\d+.]+@[-\\w\\d.]+', data) # CHANGE\n\n\n\n\nResults.\n\n\n['kenneth@submarine.com', 'arty@submarine.com', 'king_arthur@camelot.co.uk', 'governor@norrbotten.co.se', 'tim@killerrabbit.com', 'ryan@submarine.com', 'doctor+companion@tardis.co.uk', 'me@example.com', 'president.44@us.gov', 'andrew@submarine.com', 'darth-vader@empire.gov']\n\n\n\n\nRetrieve \u2018submarine\u2019. All characters are unique. The set should be \u2018submarine\u2019.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# set [submarine] should catch 'submarine'\n# add word boundaries, at least once, ignore lower or upper cases\nprint re.findall(r'\\b[submarine]+\\b', data, re.IGNORECASE) # CHANGE\n\n\n\n\nResults.\n\n\n['submarine', 'Submarine', 'submarine', 'Submarine', 'se', 'submarine', 'Submarine', 'me', 'us', 'submarine', 'Submarine']\n\n\n\n\nHowever, we also collect shorter strings (\u2018se\u2019, \u2018me\u2019, \u2018us\u2019, \u2018Maria\u2019) with characters from [submarine]. If we wanted to limit the search to \u2018submarine\u2019 only.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# always 9 letters\nprint re.findall(r'\\b[submarine]{9}\\b', data, re.IGNORECASE) # CHANGE\n\n\n\n\nResults.\n\n\n['submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine']\n\n\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\n\n\n\n\n\n\n6, Boundaries \u2013 Smart Search\n\u00b6\n\n\n\n\n'''\n, add a multiline string.\n\n\n\\b@\n, word boundary \n@\n.\n\n\n\\b\n, word boundary \n.\n\n\n^\n, ignore.\n\n\n\\t\n, tab character.\n\n\n.\n, any character.\n\n\n\n\nFind emails with word boundaries, spaces, words, explicit spaces (without using VERBOSE!!!), at least once for any number of characters, ignore tabs, and ignore newlines.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# multiline strings\nprint re.findall(r'''\n    \\b@[-\\w\\d.]* # First a word boundary, an @, and then any number of characters\n    [^gov\\t] # Ignore 1+ instances of the letters 'g', 'o' or 'v' and a tab\n    \\b # Another word boundary\n''', data, re.VERBOSE|re.I)\n\n\n\n\nResults.\n\n\n['@submarine.com', '@submarine.com', '@camelot.co.uk', '@norrbotten.co.se', '@killerrabbit.com', '@submarine.com', '@tardis.co.uk', '@example.com', '@us.', '@submarine.com', '@empire.']\n\n\n\n\nWe left off a few details in the email addresses. \n\n\nRetrieve the names and workplaces.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# name and place of work\nprint re.findall(r'''\n    \\b[-\\w]*, # Find a word boundary, 1+ hyphens or characters, and a comma\n    \\s  # Find 1 whitespace\n    [-\\w ]+ # 1+ hyphens and characters and explicit spaces\n    [^\\t\\n] # Ignore tabs and newlines\n''', data, re.X)\n\n\n\n\nResults.\n\n\n['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', 'Enchanter, Killer Rabbit Cave', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Example, Example Co.', 'Obama, Barack', 'President, United States of America', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic Empire']\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\nre.VERBOSE|re.I\n, more readable, introduce whitespaces or comments.\n\n\nre.X\n.\n\n\n\n\n\n\n\n\n7, Groups \u2013 Subdivided Search\n\u00b6\n\n\n\n\nlast and first names.\n\n\nemails.\n\n\nphone numbers.\n\n\njob and workplaces.\n\n\nTwitter accounts.\n\n\netc\u2026\n\n\n\n\nFor that, we need parentheses.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# retrieve groups...\nprint re.findall(r'''\n    ([-\\w ]+,\\s[-\\w ]+)\\t # last and first names\n    ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails\n    (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})\\t # phone numbers\n    ([\\w\\s]+,\\s[\\w\\s]+)\\t # job and work place\n    (@[\\w\\d]+)$ # Twitter account\n''', data, re.X)\n\n\n\n\nResults (a tupple).\n\n\n[('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine', '@ryancarson'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire', '@darthvader')]\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nOn the other hand, there are some details missing. We need to make the code more universal for the first and last names. The phone number should be optional, tabs are optional, without Twitter accounts, and tabs should become a new line instead.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# retrieve groups...\nprint re.findall(r'''\n    ^([-\\w ]*,\\s[-\\w ]+)\\t # last and first names CHANGE\n    ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails\n    (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t # phone numbers CHANGE\n    ([\\w\\s]+,\\s[\\w\\s.]+)\\t? # job and work place CHANGE\n    (@[\\w\\d]+)?$ # Twitter account CHANGE\n''', data, re.X|re.MULTILINE)\n\n\n\n\nResults (a tupple). More.\n\n\n[('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('McFarland, Arthur', 'arty@submarine.com', '(555) 555-5555', 'Teacher, Submarine', ''), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine\\t', '@ryancarson'), ('Exampleson, Exampleme', 'me@example.com', '555-555-5552', 'Example, Example Co.\\t', '@exemple'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America\\t', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine\\t', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire\\t', '@darthvader')]\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nTurn the results into a \ndictionary\n with \u2018patterns\u2019 or \nP<...>\n.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE ALL\nline = re.search(r'''\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P<twitter>@[\\w\\d]+)?$\n''', data, re.X|re.MULTILINE)\n\nprint \"print line...\"\nprint line\nprint \"=\" * 25\nprint \"print line.group()...\"\nprint line.group()\nprint \"=\" * 25\nprint \"print line.groupdict()...\"\nprint line.groupdict()\n\n\n\n\nResults (a tupple). Say we remove the first line in the data\u2026\n\n\nprint line...\n<_sre.SRE_Match object at 0x00000000021DDDD8>\n=========================\nprint line.group()...\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\n=========================\nprint line.groupdict()...\n{'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}\n\n\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\nre.VERBOSE|re.I\n.\n\n\nre.X\n.\n\n\nre.X|re.MULTILINE\n or \nre.X|re.M\n.\n\n\n\n\n\n\n\n\n8, Compile & Build Dictionaries \u2013 Operationalized Search\n\u00b6\n\n\nCompile a pattern into an object. Replace \nfindall\n or \nsearch\n with \ncompile\n. Remove \ndata\n to make a generic function to process any data.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE\nline = re.compile(r'''\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P<twitter>@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nprint re.search(line, data).groupdict() # CHANGE\n\n\n\n\nResults (a tupple). Say we remove the first line in the data\u2026\n\n\n{'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}\n\n\n\n\nAlternatively.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE\nline = re.compile(r'''\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P<twitter>@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nprint line.search(data).groupdict() # CHANGE\n\n\n\n\nCompiling not only does it make the script universal (ready for any data), but it also make the execution faster. It becomes easier to compile the script into an executable.\n\n\nWe want all the lines, but a specific group (say \u2018names\u2019).\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary\nline = re.compile(r'''\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P<twitter>@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nfor match in line.finditer(data): # CHANGE\n    print match.group('name')\n\n\n\n\nResults (a tupple).\n\n\nLiff, Kenneth\nMcFarland, Arthur\nCarson, Ryan\nExampleson, Exampleme\nObama, Barack\nChalks, Andrew\nVader, Darth\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nCreate sub-patterns and extract specific groups.\n\n\nimport re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary\nline = re.compile(r'''\n    ^(?P<name>(?P<last>[-\\w ]*),\\s(?P<first>[-\\w ]+))\\t # CHANGE\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P<twitter>@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nfor match in line.finditer(data):\n    print '{first} {last} <{email}>'.format(**match.groupdict())\n\n\n\n\nResults\n\n\nKenneth Liff <kenneth@submarine.com>\nArthur McFarland <arty@submarine.com>\nRyan Carson <ryan@submarine.com>\nExampleme Exampleson <me@example.com>\nBarack Obama <president.44@us.gov>\nAndrew Chalks <andrew@submarine.com>\nDarth Vader <darth-vader@empire.gov>\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nRecap:\n\u00b6\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\nre.VERBOSE|re.I\n.\n\n\nre.X\n.\n\n\nre.X|re.MULTILINE\n or \nre.X|re.M\n.\n\n\n\n\n\n\ncompile\n.\n\n\ngroupdict\n.\n\n\nline.finditer\n.\n\n\nmatch.group\n.\n\n\nmatch.groupdict\n.",
            "title": "Regular Expressions (REGEX)"
        },
        {
            "location": "/Regex/#2-match-search-one-expression-one-search",
            "text": "First, we have a text file called names.txt.  Liff, Kenneth   kenneth@submarine.com   (555) 555-5555  Teacher, Submarine  @kennethliff\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\nArthur, King    king_arthur@camelot.co.uk   King, Camelot\n\u00d6sterberg, Gustav   governor@norrbotten.co.se   Governor, Norrbotten    @gustata\n, Tim   tim@killerrabbit.com    Enchanter, Killer Rabbit Cave\nCarson, Ryan    ryan@submarine.com  (555) 555-5543  CEO, Submarine  @ryancarson\nDoctor  The doctor+companion@tardis.co.uk   Time Lord, Gallifrey\nExampleson, Exampleme   me@example.com  555-555-5552    Example, Example Co.    @exemple\nObama, Barack   president.44@us.gov 555 555-5551    President, United States of America @potus44\nChalks, Andrew  andrew@submarine.com    (555) 555-5553  Teacher, Submarine  @chalkers\nVader, Darth    darth-vader@empire.gov  (555) 555-4444  Sith lord, Galactic Empire  @darthvader  Second, we want to process the file: extract strings.   We could use  re.match , but the function is picky.  re.search  is more forgiving in terms of precision. In both cases, the function should return the first match it finds, then stop.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nprint re.search(r'McFarland', data).group() # r for raw string, no need for \\\nprint re.search(r'Arthur', data).group() # search in the strings  Results (in Windows).  <_sre.SRE_Match object at 0x00000000021DB510>\n<_sre.SRE_Match object at 0x00000000021DB510>  Results may vary in UNIX-type OS. In Linux, we get.  <_sre.SRE_Match object; span=(0, 8), match='McFarland'>\n<_sre.SRE_Match object; span=(10, 15), match='Arthur'>  Change the script and rerun it.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nprint re.search(r'McFarland', data).group() # CHANGE\nprint re.search(r'Arthur', data).group() # CHANGE  Results.  McFarland\nArthur  Alternatively.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nlast_name = r'McFarland'\nfirst_name = r'Arthur'\nprint re.search(last_name, data).group() # CHANGE\nprint re.search(first_name, data).group() # CHANGE",
            "title": "2, match &amp; search -- One Expression, One Search"
        },
        {
            "location": "/Regex/#recap",
            "text": "match .  search .",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#3-escape-characters-comprenhensive-search",
            "text": "\\w , match any Unicode word character.  \\W , match anything that isn\u2019t a Unicode word character.  \\s , any whitespace.  \\S , not.  \\d , any number 0-9.  \\D , not.  \\b , boundaries or the edges of a word.  \\B , not.   Try.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\nprint re.match(r'\\w, \\w', data) # CHANGE  Results.  None  We get  None  because of  re.match . Instead, try.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch phone numbers\nprint re.search(r'\\d\\d\\d-\\d\\d\\d\\d', data).group() # CHANGE  Results.  555-5555  Improve the code.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch complete phone numbers\nprint re.search(r'\\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d', data).group() # CHANGE  Results.  (555) 555-5555",
            "title": "3, Escape Characters -- Comprenhensive Search"
        },
        {
            "location": "/Regex/#recap_1",
            "text": "match .  search .  Escape characters (see above).",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#4-repetitions-power-search",
            "text": "{3} , repeat 3 times.  {,3} , repeat 0 to 3 times.  {3,} , repeat 3 or more times.  {3, 5} , repeat 3, 4 or 5 times.  ? , repeat 0 or once.  * , repeat at least 0 times (no upper bound).  + , repeat at least once (no upper bound).   Catch a name.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch a name\nprint re.search(r'\\w+, \\w+', data).group() # CHANGE  Results.  Liff, Kenneth  Catch a phone number.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch a complete phone numbers\nprint re.search(r'\\(\\d{3}\\) \\d{3}-\\d{4}', data).group() # CHANGE  Results.  (555) 555-5555  Catch multiple phone numbers.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# more universal way (parentheses, hyphen, space become optional)\n# on multiple lines!\nprint re.findall(r'\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4}', data) # CHANGE  Results.  ['(555) 555-5555', '(555) 555-5555', '(555) 555-5543', '555-555-5552', '555 555-5551', '(555) 555-5553', '(555) 555-4444']  Catch multiple names.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# universal way for names\nprint re.findall(r'\\w*, \\w+', data)  # CHANGE: findall  Results.  ['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', ', Tim', 'Enchanter, Killer', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Obama, Barack', 'President, United', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic']",
            "title": "4, Repetitions -- Power Search"
        },
        {
            "location": "/Regex/#recap_2",
            "text": "match .  search .  Escape characters (previous section).  Repetitions (see above).  findall .",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#5-sets-target-search",
            "text": "Catch patterns. We only need unique characters even when a word contains repetitive characters.   [aple] , search for \u2018apple\u2019.  [a-z] , search for any lowercase letters.  [^2] , search for anything that is not 2.  . , stands for any possible character.   For finding email addresses, search better \u2018cures\u2019 on email adresses. Search for email address regex or email address regular expressions on Stack Overflow, Quora, etc.  We can also try.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# find emails\nprint re.findall(r'[-\\w\\d+.]+@[-\\w\\d.]+', data) # CHANGE  Results.  ['kenneth@submarine.com', 'arty@submarine.com', 'king_arthur@camelot.co.uk', 'governor@norrbotten.co.se', 'tim@killerrabbit.com', 'ryan@submarine.com', 'doctor+companion@tardis.co.uk', 'me@example.com', 'president.44@us.gov', 'andrew@submarine.com', 'darth-vader@empire.gov']  Retrieve \u2018submarine\u2019. All characters are unique. The set should be \u2018submarine\u2019.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# set [submarine] should catch 'submarine'\n# add word boundaries, at least once, ignore lower or upper cases\nprint re.findall(r'\\b[submarine]+\\b', data, re.IGNORECASE) # CHANGE  Results.  ['submarine', 'Submarine', 'submarine', 'Submarine', 'se', 'submarine', 'Submarine', 'me', 'us', 'submarine', 'Submarine']  However, we also collect shorter strings (\u2018se\u2019, \u2018me\u2019, \u2018us\u2019, \u2018Maria\u2019) with characters from [submarine]. If we wanted to limit the search to \u2018submarine\u2019 only.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# always 9 letters\nprint re.findall(r'\\b[submarine]{9}\\b', data, re.IGNORECASE) # CHANGE  Results.  ['submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine']",
            "title": "5, Sets -- Target Search"
        },
        {
            "location": "/Regex/#recap_3",
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#6-boundaries-smart-search",
            "text": "''' , add a multiline string.  \\b@ , word boundary  @ .  \\b , word boundary  .  ^ , ignore.  \\t , tab character.  . , any character.   Find emails with word boundaries, spaces, words, explicit spaces (without using VERBOSE!!!), at least once for any number of characters, ignore tabs, and ignore newlines.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# multiline strings\nprint re.findall(r'''\n    \\b@[-\\w\\d.]* # First a word boundary, an @, and then any number of characters\n    [^gov\\t] # Ignore 1+ instances of the letters 'g', 'o' or 'v' and a tab\n    \\b # Another word boundary\n''', data, re.VERBOSE|re.I)  Results.  ['@submarine.com', '@submarine.com', '@camelot.co.uk', '@norrbotten.co.se', '@killerrabbit.com', '@submarine.com', '@tardis.co.uk', '@example.com', '@us.', '@submarine.com', '@empire.']  We left off a few details in the email addresses.   Retrieve the names and workplaces.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# name and place of work\nprint re.findall(r'''\n    \\b[-\\w]*, # Find a word boundary, 1+ hyphens or characters, and a comma\n    \\s  # Find 1 whitespace\n    [-\\w ]+ # 1+ hyphens and characters and explicit spaces\n    [^\\t\\n] # Ignore tabs and newlines\n''', data, re.X)  Results.  ['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', 'Enchanter, Killer Rabbit Cave', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Example, Example Co.', 'Obama, Barack', 'President, United States of America', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic Empire']  The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.",
            "title": "6, Boundaries -- Smart Search"
        },
        {
            "location": "/Regex/#recap_4",
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .  re.VERBOSE|re.I , more readable, introduce whitespaces or comments.  re.X .",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#7-groups-subdivided-search",
            "text": "last and first names.  emails.  phone numbers.  job and workplaces.  Twitter accounts.  etc\u2026   For that, we need parentheses.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# retrieve groups...\nprint re.findall(r'''\n    ([-\\w ]+,\\s[-\\w ]+)\\t # last and first names\n    ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails\n    (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})\\t # phone numbers\n    ([\\w\\s]+,\\s[\\w\\s]+)\\t # job and work place\n    (@[\\w\\d]+)$ # Twitter account\n''', data, re.X)  Results (a tupple).  [('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine', '@ryancarson'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire', '@darthvader')]  The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.  On the other hand, there are some details missing. We need to make the code more universal for the first and last names. The phone number should be optional, tabs are optional, without Twitter accounts, and tabs should become a new line instead.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# retrieve groups...\nprint re.findall(r'''\n    ^([-\\w ]*,\\s[-\\w ]+)\\t # last and first names CHANGE\n    ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails\n    (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t # phone numbers CHANGE\n    ([\\w\\s]+,\\s[\\w\\s.]+)\\t? # job and work place CHANGE\n    (@[\\w\\d]+)?$ # Twitter account CHANGE\n''', data, re.X|re.MULTILINE)  Results (a tupple). More.  [('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('McFarland, Arthur', 'arty@submarine.com', '(555) 555-5555', 'Teacher, Submarine', ''), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine\\t', '@ryancarson'), ('Exampleson, Exampleme', 'me@example.com', '555-555-5552', 'Example, Example Co.\\t', '@exemple'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America\\t', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine\\t', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire\\t', '@darthvader')]  The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.  Turn the results into a  dictionary  with \u2018patterns\u2019 or  P<...> .  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE ALL\nline = re.search(r'''\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P<twitter>@[\\w\\d]+)?$\n''', data, re.X|re.MULTILINE)\n\nprint \"print line...\"\nprint line\nprint \"=\" * 25\nprint \"print line.group()...\"\nprint line.group()\nprint \"=\" * 25\nprint \"print line.groupdict()...\"\nprint line.groupdict()  Results (a tupple). Say we remove the first line in the data\u2026  print line...\n<_sre.SRE_Match object at 0x00000000021DDDD8>\n=========================\nprint line.group()...\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\n=========================\nprint line.groupdict()...\n{'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}",
            "title": "7, Groups -- Subdivided Search"
        },
        {
            "location": "/Regex/#recap_5",
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .  re.VERBOSE|re.I .  re.X .  re.X|re.MULTILINE  or  re.X|re.M .",
            "title": "Recap:"
        },
        {
            "location": "/Regex/#8-compile-build-dictionaries-operationalized-search",
            "text": "Compile a pattern into an object. Replace  findall  or  search  with  compile . Remove  data  to make a generic function to process any data.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE\nline = re.compile(r'''\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P<twitter>@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nprint re.search(line, data).groupdict() # CHANGE  Results (a tupple). Say we remove the first line in the data\u2026  {'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}  Alternatively.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE\nline = re.compile(r'''\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P<twitter>@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nprint line.search(data).groupdict() # CHANGE  Compiling not only does it make the script universal (ready for any data), but it also make the execution faster. It becomes easier to compile the script into an executable.  We want all the lines, but a specific group (say \u2018names\u2019).  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary\nline = re.compile(r'''\n    ^(?P<name>[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P<twitter>@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nfor match in line.finditer(data): # CHANGE\n    print match.group('name')  Results (a tupple).  Liff, Kenneth\nMcFarland, Arthur\nCarson, Ryan\nExampleson, Exampleme\nObama, Barack\nChalks, Andrew\nVader, Darth  The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.  Create sub-patterns and extract specific groups.  import re\n\n# read the file\nname_file = open(\"names.txt\")\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary\nline = re.compile(r'''\n    ^(?P<name>(?P<last>[-\\w ]*),\\s(?P<first>[-\\w ]+))\\t # CHANGE\n    (?P<email>[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P<phone>\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P<job>[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P<twitter>@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nfor match in line.finditer(data):\n    print '{first} {last} <{email}>'.format(**match.groupdict())  Results  Kenneth Liff <kenneth@submarine.com>\nArthur McFarland <arty@submarine.com>\nRyan Carson <ryan@submarine.com>\nExampleme Exampleson <me@example.com>\nBarack Obama <president.44@us.gov>\nAndrew Chalks <andrew@submarine.com>\nDarth Vader <darth-vader@empire.gov>  The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.",
            "title": "8, Compile &amp; Build Dictionaries -- Operationalized Search"
        },
        {
            "location": "/Regex/#recap_6",
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .  re.VERBOSE|re.I .  re.X .  re.X|re.MULTILINE  or  re.X|re.M .    compile .  groupdict .  line.finditer .  match.group .  match.groupdict .",
            "title": "Recap:"
        },
        {
            "location": "/Databases/",
            "text": "CONTENT\n\n\n1, SQLite3\n\n\n2, SQLite3 CLI\n\n\n3, SQL Database GUI, Administration, and Management Tools\n\n\n4, Spreadsheet Data and SQLite\n\n\n5, R and Python with SQL\n\n\n6, The Chinook SQLite Sample Database\n\n\n7, Using a Python ORM: peewee\n\n\nInstall peewee\n\n\nCreate a database with a script\n\n\nCreate, read, update, and delete (CRUD)\n\n\nA diary app \u2013 The skeleton (empty classes and functions)\n\n\nA diary app \u2013 Initialize\n\n\nA diary app \u2013 Create a menu\n\n\nA diary app \u2013 Data entry\n\n\nA diary app \u2013 Search and view entries\n\n\nA diary app \u2013 Delete entries\n\n\nA diary app \u2013 Finalize and polish up\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\nAlthough we work with SQLite, most concepts are applicable to MySQL and PostgreSQL.\n\n\n\n\n1, SQLite3\n\u00b6\n\n\nFollow the tutorial on \nTutorialPoint\n. Especially the \nQuick Guide\n for installation, basic commands, syntax, comments, SQL statement, data type, affinity type, boolean, date & time, creating a database, a table, dropping a table, querying, operators, expressions, and clauses. Each topic has also a dedicated section such as unions, joins, truncated table, etc.\n\n\n\n\nInstall.\n\n\nDownload from the \nSQLite website\n.\n\n\nFollow the Quick Guide (or find instruction online).\n\n\nOn Windows, databases are located on C:\\sqlite.\n\n\nOn Linux, SQLite is in the root directory(/usr/lib/\u2026), but databases can be stored in the Personal folder (or in a directory of choice; for example, in a new subdirectory under Documents).\n\n\n\n\n\n\n\n\n2, SQLite3 CLI\n\u00b6\n\n\nBasics\n\n\n\n\nIn the shell/bash:\n\n\nsqlite3 test.db\n, create a database/open the database (show the prompt); the database is located in SQLite\u2019s directory.\n\n\n\n\n\n\nBasic commands inside a database.\n\n\n.help\n.\n\n\n.databases\n, show all databases.\n\n\ncreate table first (a int, b string);\n, create a table with two fields.\n\n\n.schema\n, show the last commands.\n\n\n.tables\n, show all tables in the database.\n\n\ninsert into first (a, b) values (1, \"hello\");\n, load the table.\n\n\nselect * from first;\n, extract all values from the table.\n\n\n.quit\n or \n.exit\n.\n\n\ndrop table first;\n, delete a table (first).\n\n\nDelete a database by deleting the database file in the directory.\n\n\n\n\n\n\nIntermediate commands.\n\n\n.mode insert\n, change the view (insertions to build the database).\n\n\n.dump\n, dump data on screen.\n\n\n.output .\\Documents\\sqlite3Files.sql\n, create a folder in a file (Windows).\n\n\n.output ./Documents/sqlite3Files.sql\n, create a folder in a file (UNIX-based).\n\n\n.dump\n, dump data into the above. VERY USEFUL for recreating a database/table.\n\n\n\n\n\n\n.output stdout\n, to the screen.\n\n\n.mode column\n, change the view (flat table with fixed width).\n\n        - \n.width 15 20\n, define the width by column.\n\n\n.output ./Documents/sqlite3Files/table.sql\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output stdout\n, dump the data.\n\n\n\n\n\n\n.mode line\n, change the view (long list without commas).\n\n\nIdem.\n\n\n\n\n\n\n.mode html\n, change the view (html formats ready to be dumbed).\n\n\n.output ./Documents/sqlite3Files/table.html\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output stdout\n, dump the data.\n\n\n\n\n\n\n.mode tabs\n, change the view (flat table separated by tabs).\n\n\n.output ./Documents/sqlite3Files/table.tsv\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output stdout\n, dump the data.\n\n\n\n\n\n\n.mode csv\n, change the view (flat table separated by commas or semi-colons).\n\n\n.separator ;\n, change the separator.\n\n\n.output ./Documents/sqlite3Files/table.csv\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output stdout\n, dump the data.\n\n\n\n\n\n\n.mode tcs\n, change the view (flat table with double-quotes).\n\n\n.headers on\n, show the headers.\n\n\n.show\n, show the (above) parameters (and change them).\n\n\n.prompt 'sqlite3> '\n, change the prompt.\n\n\n.read <path>\n, repopulate the database with the above.\n\n\n\n\n\n\n\n\nAdvanced\n\n\nThere are plenty of resources about SQLite: books, online documents, online tutorials, etc. We can learn how to:\n\n\n\n\nBuild a database, tables.\n\n\nQuery a database, create, alter, select, order by, limit, offset, update, delete, and other functions.\n\n\nJoins and Triggers.\n\n\nAnd more.\n\n\n\n\n3, SQL Database GUI, Administration, and Management Tools\n\u00b6\n\n\nWith database managers, we can create scripts to automate operations.\n\n\n\n\nSQLite is free, open source, and cross-platform.\n\n\nDB Browser for SQLite is free, for all OS.\n\n\nAdd-ons to browsers such as the SQLite Managers for Firefox.\n\n\n\n\n\n\nMySQL is free, open source, and cross-platform.\n\n\nMySQL Workbench is free, for all OS.\n\n\nDatabase Design & Modeling, SQL Development (replacing MySQL Query Browser), and Database Administration (replacing MySQL Administrator). MySQL features: SQL editor, SQL code completion, SQL code formatter, SQL Syntax highlighting, server start/stop, server status/health, server logs, server/replication configuration, user management, session management, and much more.\n\n\n\n\n\n\nThere are web-based managers.\n\n\n\n\n\n\nPostgreSQL is free, open source, also cross-platform.\n\n\npgAdminIII.\n\n\nThere are web-based managers.\n\n\n\n\n\n\nSQL in general.\n\n\nDB Browser is free, for all OS.\n\n\nphpMyAdmin is free, for all OS.\n\n\nToad is free, for Windows.\n\n\nHeidiSQL is free, for Windows.\n\n\nThere are web-based managers.\n\n\n\n\n\n\n\n\n4, Spreadsheet Data and SQLite\n\u00b6\n\n\nImport from the spreadsheet\n\n\n\n\nPull data from the spreadsheet into SQLite via an add-on or a database manager (automated procedure).\n\n\nOr export data (save as) from the spreadsheet into a .csv file.\n\n\nImport the .csv into SQLite.\n\n\nIn can be done with a manager such as DB Browser for SQLite.\n\n\nIt can be done with a web-based manager such as SQLite Managers for Firefox.\n\n\nAdjust the general and field parameters.\n\n\nCreate a primary key.\n\n\nPopulate a table with the .csv file.\n\n\n\n\n\n\n\n\nImport into a spreadsheet\n\n\n\n\nDump the data from the CLI or a database manager into a .csv file.\n\n\nOr connect the spreadsheet with SQLite with built-in functionalities or add-ons to pull data into the database.\n\n\nThere are add-ons that can execute SQL queries in a cell and dump the results in other cells: Excellic, Microsoft SQL Server Data Mining, SaveToDB, Database Connection Wizard, Publish Wizard, etc.\n\n\n\n\n5, R and Python with SQL\n\u00b6\n\n\n\n\nR can import data from / export data to relational databases using specialized packages such as \nDBI\n, \nRSQLite\n, \nRMySQL\n, \nRPostgreSQL\n, etc.\n\n\nPython libraries are: \npython-sql\n, \nsqlalchemy\n, \nrecords\n, \npeewee\n, etc.\n\n\npip install <library>\n.    \n\n\n\n\n\n\n\n\n6, The Chinook SQLite Sample Database\n\u00b6\n\n\nLearn, practice, and test commands with a fake database. \n\n\n\n\nDownload the \ndatabase\n.\n\n\nConsult the \ndiagram\n.\n\n\nWe can also download the database and diagrams.\n\n\n\n\n\n\n\n\n7, Using a Python ORM: \npeewee\n\u00b6\n\n\nInstall \npeewee\n\u00b6\n\n\nWe can run queries with SQL or use a Python wrapper: \npeewee\n. It is a lightweight Object Relational Mapper (ORM). \npeewee\n works with SQLite, MySQL, and PostgreSQL.\n\n\nInstall it with pip.\n\n\nWe can manage our databases with Python scripts.\n\n\nCreate a database with a script\n\u00b6\n\n\nIn \npeewee\n, models are Python classes. Everything in the database is an object: tables, rows, columns, entries, etc.\n\n\nWe create a new database, \nstudents.db\n, with Python. We connect to the database and create two fields with their SQL parameters. We run the script in the terminal.\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model): # use a singular name convention\n    username = CharField(max_length=255, unique=True) # varchar, unique value, no duplicates\n    points = IntegerField(default=0) # if not supplies, it inputs 0 by default\n\n    class Meta: # a class inside a class (meta-class)\n        database = db\n\nif __name__ == '__main__': # for running the script directly, not import it\n    db.connect()\n    db.create_tables([Student], safe=True) # safe is a mandatory convention\n\n\n\n\nWe get no result in the terminal: a good sign. Check out the database to see the results.\n\n\nThe script runs on Windows in Python 2. In Python 3, we would need minor adjustments; they are documented along the way. In addition, in UNIX-based OS, we would need two extra lines at the top of the script.\n\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n\n\nOr.\n\n\n#!/usr/bin/env python 3\n# -*- coding: utf-8 -*-\n\n\n\n\nCreate, read, update, and delete (CRUD)\n\u00b6\n\n\nCreate, read, update, and delete is knows as CRUD; the backbone of ORM. Five useful methods:\n\n\n\n\n.create()\n, add a new record to the table.\n\n\n.select()\n, pick rows out of the table.\n\n\n.save()\n, update an existing row in a table.\n\n\n.get()\n, fetch a single record from a table.\n\n\n.delete_instance()\n, delete a row from a table.\n\n\n\n\nImprove the script, but avoid the false start\u2026\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\n# ADD a dictionary\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students(): # ADD a function\n    for student in students:\n        Student.create(username=student['username'],\n                        points=student['points']) \n\n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students() # ADD\n\n\n\n\nWe can run the script once, but not twice because of the \nunique=True\n in the \nclass Student(Model):\n. We get an \nIntegrityError\n in the terminal. \n\n\nWe need to add a \ntry\n block. Take two.\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students(): # CHANGE the function\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()\n\n\n\n\nWe get no result in the terminal: a good sign. We can run the script at will. We can check out the results in the database.\n\n\nAdd a function to select the top students, order them in descending order (from high to low), and retrieve them.\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students():\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\ndef top_student():\n    student = Student.select().order_by(Student.points.desc()).get() # ADD\n    return student            \n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()\n    print(\"Our top student right now is: {0.username}.\".format(top_student())) # ADD\n\n\n\n\nThis time, we should get a result in the terminal.\n\n\nOur top student right now is: adammcfarland.\n\n\n\n\nChange the points in the dictionary and rerun the script.\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 14718}, # CHANGE, make it the top student\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students():\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\ndef top_student():\n    student = Student.select().order_by(Student.points.desc()).get()\n    return student            \n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()\n    print(\"Our top student right now is: {0.username}.\".format(top_student()))\n\n\n\n\nResults in the terminal.\n\n\nOur top student right now is: kennethliff.\n\n\n\n\nRecap:\n\n\n\n\n.create()\n, add a new record to the table.\n\n\n.select()\n, pick rows out of the table.\n\n\n.get()\n, fetch a single record from a table.\n\n\n\n\nA diary app \u2013 The skeleton (empty classes and functions)\n\u00b6\n\n\nNow, let\u2019s build a diary application using an SQLite database. Such an application can be integrated into a web framework (like Flask) or frozen as an executive file (embedding SQLite). \n\n\nWe want to be able to load data and retrieve them. \n\n\nThe more general use could be a log book: we can write stuff and retrieve it. We can classify the entries and search for a specific word.\n\n\nWe start with a skeleton, bare functions and docstrings.\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    # content\n    # timestamp\n\n    class Meta:\n        database = db\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n\n\ndef view_entries():\n    \"\"\"View previous entries.\"\"\"\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n\n\nif __name__ == '__main__': # for running the script directly, not import it\n    menu_loop()\n\n\n\n\nA diary app \u2013 Initialize\n\u00b6\n\n\nLet\u2019s add some flesh to the skeleton. Add the the \ndatetime\n library and a new function to initialize the diary.\n\n\nimport datetime # ADD\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model): # CHANGE\n    content = TextField() # content: TextField ia more flexible, holds any type of data; contrary to CharField, a varchar with a maximum length\n    timestamp = DateTimeField(default=datetime.datetime.now) # timestamp; now does take parentheses\n\n    class Meta:\n        database = db\n\n\ndef initialize(): # ADD\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n\n\ndef view_entries():\n    \"\"\"View previous entries.\"\"\"\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n\n\nif __name__ == '__main__': # for running the script directly, not import it\n    initialize() # INSERT\n    menu_loop()\n\n\n\n\nWe get no result in the terminal: a good sign. We can check out the results in the db.\n\n\nA diary app \u2013 Create a menu\n\u00b6\n\n\nWe add a menu using a dictionary (we need the \nOrderedDict\n library).\n\n\nfrom collections import OrderedDict # ADD\nimport datetime\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n    choice = None # new variable with a default value\n\n    while choice != 'q': # ADD\n        print(\"Enter 'q' to quit.\") # starting message\n        for key, value in menu.items(): # loop through the dictionary\n            print('{}) {}'.format(key, value.__doc__)) # value from the menu variables furthur down in the script; __doc__ is the docstrings\n        choice = raw_input('Action: ').lower().strip() # lowercase, remove white spaces\n\n        if choice in menu: # check if the selection is in the menu\n            menu[choice]() # execute the choice\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n\n\ndef view_entries():\n    \"\"\"View previous entries.\"\"\"\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n\n\nmenu = OrderedDict([ # ADD tuple\n    ('a', add_entry),\n    ('v', view_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()\n\n\n\n\nThis is coded in Python 2. In Python 3, we would replace \nraw_input\n by \ninput\n.\n\n\nThe result is dynamic. We can input data in the terminal and the script continues to run until we quit with \nq\n. We cannot do much since the functions are still empty (\ndef add_entry():\n and \ndef view_entries():\n). The following is a snapshot.\n\n\nEnter 'q' to quit.\na) Add an entry.\nv) View previous entries.\nActions:\n\n\n\n\nA diary app \u2013 Data entry\n\u00b6\n\n\nAdd the \nsys\n library. We want to enter data and load the database.\n\n\nfrom collections import OrderedDict\nimport datetime\nimport sys # ADD\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n    choice = None\n\n    while choice != 'q':\n        print(\"Enter 'q' to quit.\")\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry(): # IMPROVE\n    \"\"\"Add an entry.\"\"\"\n    print(\"Enter your entry. Press ctrl+z when finished.\")\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\"Saved successfully!\")\n\n\ndef view_entries():\n    \"\"\"View previous entries.\"\"\"\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()\n\n\n\n\nThe result is dynamic.\n\n\nTo the question \nEnter your entry. Press ctrl+d when finished.\n, write \nWorking with databases. I enjoy my day.\n. Press enter, then press ctrl+z, then enter in Windows, ctrl+d in UNIX-based OS (for End-of-File key sequence). Save it (with a \ny\n input). Repeat. This time, do not save it (\nn\n). Check out the results in the database.\n\n\nraw_input\n in Python 2 vs. \ninput\n in Python 3. In Python 2, we can print with \nprint \" \"\n or \nprint(\" \")\n. The later is only possible in Python 3.\n\n\nA diary app \u2013 Search and view entries\n\u00b6\n\n\nWe now want to read the data (query the database). We also want to search throught the entries. In SQL, we would code: \nSELECT * FROM entry WHERE content LIKE '%search_query$' ORDER BY timestamp DESC;\n.\n\n\nfrom collections import OrderedDict\nimport datetime\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n    choice = None\n\n    while choice != 'q':\n        print(\"Enter 'q' to quit.\")\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n    print(\"Enter your entry. Press ctrl+z when finished.\")\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\"Saved successfully!\")\n\n\ndef view_entries(search_query=None): # IMPROVE\n    \"\"\"View previous entries.\"\"\"\n    entries = Entry.select().order_by(Entry.timestamp.desc()) # sort them\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p') # day name, month, date, year, hour (12h), minute, am/pm\n        print(timestamp)\n        print('='*len(timestamp)) # print the number of characters in the timestamp\n        print(entry.content)\n        print('n) next entry')\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Nq] ').lower().strip()\n        if next_action == 'q':\n            break\n\n\ndef search_entries():\n    \"\"\"Search entries for a string.\"\"\"\n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries), # ADD\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()\n\n\n\n\nThe result is dynamic. Try entering stuff, save it. Back to the menu, read the entry. We should get a date, a line of \n=\n and the entry. Quit and go back to the menu. Try search for a word. It should find a single word among all the entry and pull out the entry where the word appears.\n\n\nA diary app \u2013 Delete entries\n\u00b6\n\n\nComplete the last function: \ndef delete_entry(entry):\n.\n\n\nfrom collections import OrderedDict\nimport datetime\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n    choice = None\n\n    while choice != 'q':\n        print(\"Enter 'q' to quit.\")\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n    print(\"Enter your entry. Press ctrl+z when finished.\")\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\"Saved successfully!\")\n\n\ndef view_entries(search_query=None):\n    \"\"\"View previous entries.\"\"\"\n    entries = Entry.select().order_by(Entry.timestamp.desc())\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p')\n        print(timestamp)\n        print('='*len(timestamp))\n        print(entry.content)\n        print('n) next entry')\n        print('d) delete entry') # ADD\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Ndq] ').lower().strip()\n        if next_action == 'q':\n            break\n        elif next_action == 'd': # ADD\n            delete_entry(entry)\n\n\ndef search_entries():\n    \"\"\"Search entries for a string.\"\"\"\n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry): # IMPROVE\n    \"\"\"Delete an entry.\"\"\"\n    if raw_input(\"Are you sure? [yN] \").lower() == 'y':\n        entry.delete_instance()\n        print(\"Entry deleted!\")\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()\n\n\n\n\nThe result is dynamic. Enter something. Save it. View it. Delete it (the last entry). Confirm it. Go back to the main menu. View the previous entries. The last entry was deleted and we see the previous entry.\n\n\nA diary app \u2013 Finalize and polish up\n\u00b6\n\n\nWe can polish up the final result. We need to ventilate the onscreen printouts by cleaning the screen here and there. On Windows, we clear the screen with \ncls\n; on UNIX-based OS, with \nclear\n.\n\n\nHere is the final product. It\u2019s not perfect, but it works.\n\n\nfrom collections import OrderedDict\nimport datetime\nimport os # ADD\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef clear(): # ADD\n    os.system('cls' if os.name == 'nt' else 'clear') # ADD; cls for Windows, clear for Linux or Mac OS X\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n    choice = None\n\n    while choice != 'q':\n        clear()\n        print(\"Enter 'q' to quit.\")\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            clear()\n            menu[choice]()\n\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n    print(\"Enter your entry. Press ctrl+z when finished.\")\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\"Saved successfully!\")\n\n\ndef view_entries(search_query=None):\n    \"\"\"View previous entries.\"\"\"\n    entries = Entry.select().order_by(Entry.timestamp.desc())\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p')\n        clear()\n        print(timestamp)\n        print('='*len(timestamp))\n        print(entry.content)\n        print('\\n\\n'+'='*len(timestamp)) # ADD\n        print('n) next entry')\n        print('d) delete entry')\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Ndq] ').lower().strip()\n        if next_action == 'q':\n            break\n        elif next_action == 'd':\n            delete_entry(entry)\n\n\ndef search_entries():\n    \"\"\"Search entries for a string.\"\"\"\n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n    if raw_input(\"Are you sure? [yN] \").lower() == 'y':\n        entry.delete_instance()\n        print(\"Entry deleted!\")\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()",
            "title": "Databases"
        },
        {
            "location": "/Databases/#2-sqlite3-cli",
            "text": "Basics   In the shell/bash:  sqlite3 test.db , create a database/open the database (show the prompt); the database is located in SQLite\u2019s directory.    Basic commands inside a database.  .help .  .databases , show all databases.  create table first (a int, b string); , create a table with two fields.  .schema , show the last commands.  .tables , show all tables in the database.  insert into first (a, b) values (1, \"hello\"); , load the table.  select * from first; , extract all values from the table.  .quit  or  .exit .  drop table first; , delete a table (first).  Delete a database by deleting the database file in the directory.    Intermediate commands.  .mode insert , change the view (insertions to build the database).  .dump , dump data on screen.  .output .\\Documents\\sqlite3Files.sql , create a folder in a file (Windows).  .output ./Documents/sqlite3Files.sql , create a folder in a file (UNIX-based).  .dump , dump data into the above. VERY USEFUL for recreating a database/table.    .output stdout , to the screen.  .mode column , change the view (flat table with fixed width). \n        -  .width 15 20 , define the width by column.  .output ./Documents/sqlite3Files/table.sql , prepare the dump.  select * from table; , extract.  .output stdout , dump the data.    .mode line , change the view (long list without commas).  Idem.    .mode html , change the view (html formats ready to be dumbed).  .output ./Documents/sqlite3Files/table.html , prepare the dump.  select * from table; , extract.  .output stdout , dump the data.    .mode tabs , change the view (flat table separated by tabs).  .output ./Documents/sqlite3Files/table.tsv , prepare the dump.  select * from table; , extract.  .output stdout , dump the data.    .mode csv , change the view (flat table separated by commas or semi-colons).  .separator ; , change the separator.  .output ./Documents/sqlite3Files/table.csv , prepare the dump.  select * from table; , extract.  .output stdout , dump the data.    .mode tcs , change the view (flat table with double-quotes).  .headers on , show the headers.  .show , show the (above) parameters (and change them).  .prompt 'sqlite3> ' , change the prompt.  .read <path> , repopulate the database with the above.     Advanced  There are plenty of resources about SQLite: books, online documents, online tutorials, etc. We can learn how to:   Build a database, tables.  Query a database, create, alter, select, order by, limit, offset, update, delete, and other functions.  Joins and Triggers.  And more.",
            "title": "2, SQLite3 CLI"
        },
        {
            "location": "/Databases/#3-sql-database-gui-administration-and-management-tools",
            "text": "With database managers, we can create scripts to automate operations.   SQLite is free, open source, and cross-platform.  DB Browser for SQLite is free, for all OS.  Add-ons to browsers such as the SQLite Managers for Firefox.    MySQL is free, open source, and cross-platform.  MySQL Workbench is free, for all OS.  Database Design & Modeling, SQL Development (replacing MySQL Query Browser), and Database Administration (replacing MySQL Administrator). MySQL features: SQL editor, SQL code completion, SQL code formatter, SQL Syntax highlighting, server start/stop, server status/health, server logs, server/replication configuration, user management, session management, and much more.    There are web-based managers.    PostgreSQL is free, open source, also cross-platform.  pgAdminIII.  There are web-based managers.    SQL in general.  DB Browser is free, for all OS.  phpMyAdmin is free, for all OS.  Toad is free, for Windows.  HeidiSQL is free, for Windows.  There are web-based managers.",
            "title": "3, SQL Database GUI, Administration, and Management Tools"
        },
        {
            "location": "/Databases/#4-spreadsheet-data-and-sqlite",
            "text": "Import from the spreadsheet   Pull data from the spreadsheet into SQLite via an add-on or a database manager (automated procedure).  Or export data (save as) from the spreadsheet into a .csv file.  Import the .csv into SQLite.  In can be done with a manager such as DB Browser for SQLite.  It can be done with a web-based manager such as SQLite Managers for Firefox.  Adjust the general and field parameters.  Create a primary key.  Populate a table with the .csv file.     Import into a spreadsheet   Dump the data from the CLI or a database manager into a .csv file.  Or connect the spreadsheet with SQLite with built-in functionalities or add-ons to pull data into the database.  There are add-ons that can execute SQL queries in a cell and dump the results in other cells: Excellic, Microsoft SQL Server Data Mining, SaveToDB, Database Connection Wizard, Publish Wizard, etc.",
            "title": "4, Spreadsheet Data and SQLite"
        },
        {
            "location": "/Databases/#5-r-and-python-with-sql",
            "text": "R can import data from / export data to relational databases using specialized packages such as  DBI ,  RSQLite ,  RMySQL ,  RPostgreSQL , etc.  Python libraries are:  python-sql ,  sqlalchemy ,  records ,  peewee , etc.  pip install <library> .",
            "title": "5, R and Python with SQL"
        },
        {
            "location": "/Databases/#6-the-chinook-sqlite-sample-database",
            "text": "Learn, practice, and test commands with a fake database.    Download the  database .  Consult the  diagram .  We can also download the database and diagrams.",
            "title": "6, The Chinook SQLite Sample Database"
        },
        {
            "location": "/Databases/#7-using-a-python-orm-peewee",
            "text": "",
            "title": "7, Using a Python ORM: peewee"
        },
        {
            "location": "/Databases/#install-peewee",
            "text": "We can run queries with SQL or use a Python wrapper:  peewee . It is a lightweight Object Relational Mapper (ORM).  peewee  works with SQLite, MySQL, and PostgreSQL.  Install it with pip.  We can manage our databases with Python scripts.",
            "title": "Install peewee"
        },
        {
            "location": "/Databases/#create-a-database-with-a-script",
            "text": "In  peewee , models are Python classes. Everything in the database is an object: tables, rows, columns, entries, etc.  We create a new database,  students.db , with Python. We connect to the database and create two fields with their SQL parameters. We run the script in the terminal.  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model): # use a singular name convention\n    username = CharField(max_length=255, unique=True) # varchar, unique value, no duplicates\n    points = IntegerField(default=0) # if not supplies, it inputs 0 by default\n\n    class Meta: # a class inside a class (meta-class)\n        database = db\n\nif __name__ == '__main__': # for running the script directly, not import it\n    db.connect()\n    db.create_tables([Student], safe=True) # safe is a mandatory convention  We get no result in the terminal: a good sign. Check out the database to see the results.  The script runs on Windows in Python 2. In Python 3, we would need minor adjustments; they are documented along the way. In addition, in UNIX-based OS, we would need two extra lines at the top of the script.  #!/usr/bin/env python\n# -*- coding: utf-8 -*-  Or.  #!/usr/bin/env python 3\n# -*- coding: utf-8 -*-",
            "title": "Create a database with a script"
        },
        {
            "location": "/Databases/#create-read-update-and-delete-crud",
            "text": "Create, read, update, and delete is knows as CRUD; the backbone of ORM. Five useful methods:   .create() , add a new record to the table.  .select() , pick rows out of the table.  .save() , update an existing row in a table.  .get() , fetch a single record from a table.  .delete_instance() , delete a row from a table.   Improve the script, but avoid the false start\u2026  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\n# ADD a dictionary\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students(): # ADD a function\n    for student in students:\n        Student.create(username=student['username'],\n                        points=student['points']) \n\n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students() # ADD  We can run the script once, but not twice because of the  unique=True  in the  class Student(Model): . We get an  IntegrityError  in the terminal.   We need to add a  try  block. Take two.  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students(): # CHANGE the function\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()  We get no result in the terminal: a good sign. We can run the script at will. We can check out the results in the database.  Add a function to select the top students, order them in descending order (from high to low), and retrieve them.  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students():\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\ndef top_student():\n    student = Student.select().order_by(Student.points.desc()).get() # ADD\n    return student            \n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()\n    print(\"Our top student right now is: {0.username}.\".format(top_student())) # ADD  This time, we should get a result in the terminal.  Our top student right now is: adammcfarland.  Change the points in the dictionary and rerun the script.  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 14718}, # CHANGE, make it the top student\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students():\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\ndef top_student():\n    student = Student.select().order_by(Student.points.desc()).get()\n    return student            \n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()\n    print(\"Our top student right now is: {0.username}.\".format(top_student()))  Results in the terminal.  Our top student right now is: kennethliff.  Recap:   .create() , add a new record to the table.  .select() , pick rows out of the table.  .get() , fetch a single record from a table.",
            "title": "Create, read, update, and delete (CRUD)"
        },
        {
            "location": "/Databases/#a-diary-app-the-skeleton-empty-classes-and-functions",
            "text": "Now, let\u2019s build a diary application using an SQLite database. Such an application can be integrated into a web framework (like Flask) or frozen as an executive file (embedding SQLite).   We want to be able to load data and retrieve them.   The more general use could be a log book: we can write stuff and retrieve it. We can classify the entries and search for a specific word.  We start with a skeleton, bare functions and docstrings.  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    # content\n    # timestamp\n\n    class Meta:\n        database = db\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n\n\ndef view_entries():\n    \"\"\"View previous entries.\"\"\"\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n\n\nif __name__ == '__main__': # for running the script directly, not import it\n    menu_loop()",
            "title": "A diary app -- The skeleton (empty classes and functions)"
        },
        {
            "location": "/Databases/#a-diary-app-initialize",
            "text": "Let\u2019s add some flesh to the skeleton. Add the the  datetime  library and a new function to initialize the diary.  import datetime # ADD\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model): # CHANGE\n    content = TextField() # content: TextField ia more flexible, holds any type of data; contrary to CharField, a varchar with a maximum length\n    timestamp = DateTimeField(default=datetime.datetime.now) # timestamp; now does take parentheses\n\n    class Meta:\n        database = db\n\n\ndef initialize(): # ADD\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n\n\ndef view_entries():\n    \"\"\"View previous entries.\"\"\"\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n\n\nif __name__ == '__main__': # for running the script directly, not import it\n    initialize() # INSERT\n    menu_loop()  We get no result in the terminal: a good sign. We can check out the results in the db.",
            "title": "A diary app -- Initialize"
        },
        {
            "location": "/Databases/#a-diary-app-create-a-menu",
            "text": "We add a menu using a dictionary (we need the  OrderedDict  library).  from collections import OrderedDict # ADD\nimport datetime\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n    choice = None # new variable with a default value\n\n    while choice != 'q': # ADD\n        print(\"Enter 'q' to quit.\") # starting message\n        for key, value in menu.items(): # loop through the dictionary\n            print('{}) {}'.format(key, value.__doc__)) # value from the menu variables furthur down in the script; __doc__ is the docstrings\n        choice = raw_input('Action: ').lower().strip() # lowercase, remove white spaces\n\n        if choice in menu: # check if the selection is in the menu\n            menu[choice]() # execute the choice\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n\n\ndef view_entries():\n    \"\"\"View previous entries.\"\"\"\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n\n\nmenu = OrderedDict([ # ADD tuple\n    ('a', add_entry),\n    ('v', view_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()  This is coded in Python 2. In Python 3, we would replace  raw_input  by  input .  The result is dynamic. We can input data in the terminal and the script continues to run until we quit with  q . We cannot do much since the functions are still empty ( def add_entry():  and  def view_entries(): ). The following is a snapshot.  Enter 'q' to quit.\na) Add an entry.\nv) View previous entries.\nActions:",
            "title": "A diary app -- Create a menu"
        },
        {
            "location": "/Databases/#a-diary-app-data-entry",
            "text": "Add the  sys  library. We want to enter data and load the database.  from collections import OrderedDict\nimport datetime\nimport sys # ADD\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n    choice = None\n\n    while choice != 'q':\n        print(\"Enter 'q' to quit.\")\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry(): # IMPROVE\n    \"\"\"Add an entry.\"\"\"\n    print(\"Enter your entry. Press ctrl+z when finished.\")\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\"Saved successfully!\")\n\n\ndef view_entries():\n    \"\"\"View previous entries.\"\"\"\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()  The result is dynamic.  To the question  Enter your entry. Press ctrl+d when finished. , write  Working with databases. I enjoy my day. . Press enter, then press ctrl+z, then enter in Windows, ctrl+d in UNIX-based OS (for End-of-File key sequence). Save it (with a  y  input). Repeat. This time, do not save it ( n ). Check out the results in the database.  raw_input  in Python 2 vs.  input  in Python 3. In Python 2, we can print with  print \" \"  or  print(\" \") . The later is only possible in Python 3.",
            "title": "A diary app -- Data entry"
        },
        {
            "location": "/Databases/#a-diary-app-search-and-view-entries",
            "text": "We now want to read the data (query the database). We also want to search throught the entries. In SQL, we would code:  SELECT * FROM entry WHERE content LIKE '%search_query$' ORDER BY timestamp DESC; .  from collections import OrderedDict\nimport datetime\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n    choice = None\n\n    while choice != 'q':\n        print(\"Enter 'q' to quit.\")\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n    print(\"Enter your entry. Press ctrl+z when finished.\")\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\"Saved successfully!\")\n\n\ndef view_entries(search_query=None): # IMPROVE\n    \"\"\"View previous entries.\"\"\"\n    entries = Entry.select().order_by(Entry.timestamp.desc()) # sort them\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p') # day name, month, date, year, hour (12h), minute, am/pm\n        print(timestamp)\n        print('='*len(timestamp)) # print the number of characters in the timestamp\n        print(entry.content)\n        print('n) next entry')\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Nq] ').lower().strip()\n        if next_action == 'q':\n            break\n\n\ndef search_entries():\n    \"\"\"Search entries for a string.\"\"\"\n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries), # ADD\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()  The result is dynamic. Try entering stuff, save it. Back to the menu, read the entry. We should get a date, a line of  =  and the entry. Quit and go back to the menu. Try search for a word. It should find a single word among all the entry and pull out the entry where the word appears.",
            "title": "A diary app -- Search and view entries"
        },
        {
            "location": "/Databases/#a-diary-app-delete-entries",
            "text": "Complete the last function:  def delete_entry(entry): .  from collections import OrderedDict\nimport datetime\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n    choice = None\n\n    while choice != 'q':\n        print(\"Enter 'q' to quit.\")\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n    print(\"Enter your entry. Press ctrl+z when finished.\")\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\"Saved successfully!\")\n\n\ndef view_entries(search_query=None):\n    \"\"\"View previous entries.\"\"\"\n    entries = Entry.select().order_by(Entry.timestamp.desc())\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p')\n        print(timestamp)\n        print('='*len(timestamp))\n        print(entry.content)\n        print('n) next entry')\n        print('d) delete entry') # ADD\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Ndq] ').lower().strip()\n        if next_action == 'q':\n            break\n        elif next_action == 'd': # ADD\n            delete_entry(entry)\n\n\ndef search_entries():\n    \"\"\"Search entries for a string.\"\"\"\n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry): # IMPROVE\n    \"\"\"Delete an entry.\"\"\"\n    if raw_input(\"Are you sure? [yN] \").lower() == 'y':\n        entry.delete_instance()\n        print(\"Entry deleted!\")\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()  The result is dynamic. Enter something. Save it. View it. Delete it (the last entry). Confirm it. Go back to the main menu. View the previous entries. The last entry was deleted and we see the previous entry.",
            "title": "A diary app -- Delete entries"
        },
        {
            "location": "/Databases/#a-diary-app-finalize-and-polish-up",
            "text": "We can polish up the final result. We need to ventilate the onscreen printouts by cleaning the screen here and there. On Windows, we clear the screen with  cls ; on UNIX-based OS, with  clear .  Here is the final product. It\u2019s not perfect, but it works.  from collections import OrderedDict\nimport datetime\nimport os # ADD\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \"\"\"Create the database and the table if they don't exist.\"\"\"\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef clear(): # ADD\n    os.system('cls' if os.name == 'nt' else 'clear') # ADD; cls for Windows, clear for Linux or Mac OS X\n\n\ndef menu_loop():\n    \"\"\"Show the menu.\"\"\"\n    choice = None\n\n    while choice != 'q':\n        clear()\n        print(\"Enter 'q' to quit.\")\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            clear()\n            menu[choice]()\n\n\ndef add_entry():\n    \"\"\"Add an entry.\"\"\"\n    print(\"Enter your entry. Press ctrl+z when finished.\")\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\"Saved successfully!\")\n\n\ndef view_entries(search_query=None):\n    \"\"\"View previous entries.\"\"\"\n    entries = Entry.select().order_by(Entry.timestamp.desc())\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p')\n        clear()\n        print(timestamp)\n        print('='*len(timestamp))\n        print(entry.content)\n        print('\\n\\n'+'='*len(timestamp)) # ADD\n        print('n) next entry')\n        print('d) delete entry')\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Ndq] ').lower().strip()\n        if next_action == 'q':\n            break\n        elif next_action == 'd':\n            delete_entry(entry)\n\n\ndef search_entries():\n    \"\"\"Search entries for a string.\"\"\"\n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry):\n    \"\"\"Delete an entry.\"\"\"\n    if raw_input(\"Are you sure? [yN] \").lower() == 'y':\n        entry.delete_instance()\n        print(\"Entry deleted!\")\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()",
            "title": "A diary app -- Finalize and polish up"
        },
        {
            "location": "/Datetime/",
            "text": "CONTENT\n\n\nThe datatime library\n\n\nnow or any date-time\n\n\nDate-time difference\n\n\nMeasure duration with timedelta\n\n\nnow vs. today\n\n\nFormatting date-time\n\n\nA little printing app\n\n\n\n\n\n\nBuild a Quiz application\n\n\nBuild the skeleton\n\n\nGenerate questions\n\n\nFinalize the application\n\n\n\n\n\n\nTime zones\n\n\nTime zones with datatime only\n\n\nTime zones with datatime and pytz\n\n\nFind out more about pytz\n\n\nBuild a script to convert time zones\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2 & 3. Consult the \nHitchicker\u2019s Guide to Python\n.\n\n\n\n\nThe \ndatatime\n library\n\u00b6\n\n\nWhen building an application incorporating a time triggers, events, records log entries, and much more, we need to deal with dates and times; and time zones. Whether it is a simple script that starts every morning to scrape web data, build a report, and send emails or a comprehensive web framework script that records data entries.\n\n\nnow\n or any date-time\n\u00b6\n\n\nThe \ndatatime\n library has handy built-in functions: \ndate\n, \ntime\n, \ndatetime\n, \ntimedelta\n, and \ntzinfo\n. The following script demonstrates some of the functionalities.\n\n\nimport datetime\n\nprint \"The datatime library: \"\nprint dir(datetime)\nprint \"=\" * 25\n\nprint \"The current datetime: \"\nprint datetime.datetime.now()\n\nprint \"...in a variable: \"\ntest_start = datetime.datetime.now()\nprint test_start\nprint \"=\" * 25\n\nprint \"Replace the attributes: new formatting.\"\ntest_start = test_start.replace(hour=7, minute=39, second = 0, microsecond=0)\nprint test_start\nprint \"=\" * 25\n\n\n\n\nResults.\n\n\nimport datetime\n\nThe datatime library: \n['MAXYEAR', 'MINYEAR', '__doc__', '__name__', '__package__', 'date', 'datetime', 'datetime_CAPI', 'time', 'timedelta', 'tzinfo']\n=========================\n\nThe current datetime: \n2016-04-08 10:03:06.120000\n...in a variable: \n2016-04-08 10:03:06.120000\n=========================\n\nReplace the attributes: new formatting.\n2016-04-08 07:39:00\n=========================\n\n\n\n\nDate-time difference\n\u00b6\n\n\nCreate a date-time and compute the time difference.\n\n\nimport datetime\n\nprint \"Start: \"\nprint test_start\nprint \"=\" * 25\n\nduration = datetime.datetime.now() - test_start\nprint \"duration = datetime.datetime.now() - test_start: \"\nprint \"duration = \", duration\nprint \"day = \", duration.days\nprint \"microseconds = \", duration.microseconds\nprint \"seconds = \", duration.seconds\nprint \"hours (round(seconds/3600)) = \", round(duration.seconds/3600)\n\n\n\n\nResults.\n\n\nStart: \n2016-04-08 07:39:00\n=========================\n\nduration = datetime.datetime.now() - test_start: \nduration =  2:24:06.120000\nday =  0\nmicroseconds =  120000\nseconds =  8646\nhours (round(seconds/3600)) =  2.0\nminutes (round(seconds/60)) =  144.0\n=========================\n\n\n\n\nMeasure duration with \ntimedelta\n\u00b6\n\n\nCreate a delta.\n\n\nprint \"datetime.datetime.now():\"\nprint datetime.datetime.now()\n\nprint \"datetime.datetime.now() + datetime.timedelta(days=3): \"\nprint datetime.datetime.now() + datetime.timedelta(days=3)\nprint \"...........................................(days=-5): \"\nprint datetime.datetime.now() + datetime.timedelta(days=-5)\nprint \"...........................................(days=-1): \"\nprint datetime.datetime.now() + datetime.timedelta(days=-1)\nprint \"=\" * 25\nprint \"\"\n\nprint \"datetime.datetime.now() + datetime.timedelta(hours=1): \"\nprint datetime.datetime.now() + datetime.timedelta(hours=1)\nprint \"datetime.datetime.now() + datetime.timedelta(0, 3600): \"\nprint datetime.datetime.now() + datetime.timedelta(0, 3600)\nprint \"=\" * 25\nprint \"\"\n\nwork = 9\nprint \"work = \", work\n\nprint \"datetime.datetime.now() + datetime.timedelta(hours=work):\"\nprint datetime.datetime.now() + datetime.timedelta(hours=work)\nprint \"=\" * 25\nprint \"\"\n\n\n\n\nResults.\n\n\ndatetime.datetime.now():\n2016-04-08 10:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(days=3): \n2016-04-11 10:06:25.895000\n...........................................(days=-5): \n2016-04-03 10:06:25.895000\n...........................................(days=-1): \n2016-04-07 10:06:25.895000\n=========================\n\ndatetime.datetime.now() + datetime.timedelta(hours=1): \n2016-04-08 11:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(0, 3600): \n2016-04-08 11:06:25.895000\n=========================\n\nwork =  9\ndatetime.datetime.now() + datetime.timedelta(hours=work):\n2016-04-08 19:06:25.895000\n=========================\n\n\n\n\nUse \ntimedelta\n.\n\n\nprint \"Simplify: \"\nnow = datetime.datetime.now()\nprint \"now: \"\nprint now\nprint \"now.date: \"\nprint now.date()\nprint \"now.time: \"\nprint now.time()\nprint \"=\" * 25\nprint \"\"\n\nprint \"1 hour: \"\nhour = datetime.timedelta(hours=1)\nprint hour\nprint \"=\" * 25\nprint \"\"\n\nprint \"Add 1 day: \"\ntomorrow = datetime.datetime.now().replace(hour=9, minute=0) + datetime.timedelta(days=1)\nprint tomorrow\n\nprint \"Add 1 day (2): \"\nworkday = datetime.timedelta(hours=8)\nprint tomorrow + workday\nprint \"=\" * 25\nprint \"\"\n\nprint \"Appointment: \"\nappointment = datetime.timedelta(minutes=45)\n# year, month, day, hour, minute\nstart =  datetime.datetime(2016, 8, 17, 12, 45)\nend = start + appointment\nprint end\nprint \"=\" * 25\nprint \"\"\n\n\n\n\nResults.\n\n\nSimplify: \nnow: \n2016-04-08 10:16:11.476000\nnow.date: \n2016-04-08\nnow.time: \n10:16:11.476000\n=========================\n\n1 hour: \n1:00:00\n=========================\n\nAdd 1 day: \n2016-04-09 09:00:11.476000\nAdd 1 day (2): \n2016-04-09 17:00:11.476000\n=========================\n\nAppointment: \n2016-08-17 13:30:00\n=========================\n\n\n\n\nnow\n vs. \ntoday\n\u00b6\n\n\nThe difference between \nnow\n and \ntoday\n is\u2026\n\n\nimport datetime\n\nnow = datetime.datetime.now()\ntoday = datetime.datetime.today()\nprint now\nprint today\nprint \"=\" * 25\nprint \"\"\n\n\n\n\nResults.\n\n\n2016-04-08 10:34:28.444000\n2016-04-08 10:34:28.444000\n=========================\n\n\n\n\n\u2026\nnow\n can take a timezone. We deal with timezones further down. \nToday\n\u2026\n\n\nimport datetime\n\ntoday = datetime.datetime.combine(datetime.date.today(), datetime.time())\nprint today # today at midnight\nprint today.month\nprint today.hour\nprint today.year\nprint today.weekday() # 0 = Monday, 1, 2, 3, 4\nprint \"=\" * 25\nprint \"\"\n\n\n\n\nResults.\n\n\n2016-04-08 00:00:00\n4\n0\n2016\n5\n=========================\n\n\n\n\nFormatting date-time\n\u00b6\n\n\nFormat date and time.\n\n\nimport datetime\n\nnow = datetime.datetime.now()\nprint now\n\n# how to better present\n# strftime (strings-from-time) or turn datetime digits into strings\n\nprint \"formatting datetime:\"\nprint now.strftime('%B %d')\nprint now.strftime('%m/%m/%y')\n\n\n\n\nResults.\n\n\n2016-04-08 11:08:26.757000\nformatting datetime:\nApril 08\n04/04/16\n\n\n\n\nstrptime\n (strings-parse-time) turns strings into datetime digits. Look for help online for date and time types.\n\n\nimport datetime\n\nprint \"Formatting datetime: \"\nprint now.strftime('%B %d')\nprint now.strftime('%m/%m/%y')\nprint \"=\" * 25\nprint \"\"\n\nprint \"bithday: \"\nbirthday = datetime.datetime.strptime('2016-04-21', '%Y-%m-%d')\nprint birthday\nprint \"=\" * 25\nprint \"\"\n\nprint \"bithday_party: \"\nbirthday_party = datetime.datetime.strptime('2016-04-22 12:00', '%Y-%m-%d %H:%M')\nprint birthday_party\nprint \"=\" * 25\nprint \"\"\n\n\n\n\nResults.\n\n\nFormatting datetime: \nApril 08\n04/04/16\n=========================\n\nbithday: \n2016-04-21 00:00:00\n=========================\n\nbithday_party: \n2016-04-22 12:00:00\n=========================\n\n\n\n\nA little printing app\n\u00b6\n\n\nBuild an application that prints out a date in a sentence.\n\n\nimport datetime\n\nanswer_format = '%m/%d'\nlink_format = '%b_%d'\nlink = 'https://en.wikipedia.org/wiki/{}'\n\nwhile True:\n    answer = raw_input(\"What date would you like? Please use the MM/DD format. Enter 'q' to quit.\")\n    answer2 = str(answer)\n    if answer2.upper() == 'Q':\n        break\n\n    try:\n        date = datetime.datetime.strptime(answer, answer_format)\n        output = link.format(date.strftime(link_format))\n        print(output)\n        file = open('output.txt', 'w')\n        file.write(output)\n        file.close()\n    except:\n        print(\"That's not a valid date. Please try again.\")\n        break\n\n\n\n\nRun it; it creates an output file. Open output.txt. Copy the link and paste it into a web browser.\n\n\nBuild a Quiz application\n\u00b6\n\n\nBuild the skeleton\n\u00b6\n\n\nBuild an application (questions.py) that add and multiply numbers.\n\n\nimport datetime\n\nclass Question:\n    answer = None\n    text = None\n\n\nclass Add(Question):\n    def __init__(self, num1, num2):\n        self.text = '{} + {}'.format(num1, num2)\n        self.answer = num1 + num2\n\n\nclass Multiply(Question):\n    def __init__(self, num1, num2):\n        self.text = '{} x {}'.format(num1, num2)\n        self.answer = num1 * num2\n\n\nprint \"Add: \"\nadd1 = Add(5, 7)\nprint add1.text\nprint add1.answer\nprint \"Multiply: \"\nmultiply1 = Multiply(2, 2)\nprint multiply1.text\nprint multiply1.answer\n\n\n\n\nResults.\n\n\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n\n\n\n\nImport the questions.py module in another script: quiz.py. Build the skeleton.\n\n\nimport datetime\nimport random\n\nfrom questions import Add, Multiply # import the other module\n\n\nclass Quiz:\n    questions = []\n    answers = []\n\n    def __init__(self):\n        # generate 10 random questions with numbers from 1 to 10\n        # add these questions into self.questions\n        pass\n\n    def take_quiz(self):\n        # log the start time\n        # ask all of the questions\n        # log if they got the question right\n        # log the end time\n        # show a summary\n        pass\n\n    def ask(self, question):\n        # log the start time\n        # capture the answer\n        # check the answer\n        # log the end time\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        pass\n\n\n    def total_correct(self):\n        # return the total # of correct answers\n        pass\n\n\n    def summary(self):\n        # print how many you got right and the total of questions: 5/10\n        # print the total time for the quiz: 30 seconds!\n        pass\n\n\n\n\nResults (similar).\n\n\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n\n\n\n\nGenerate questions\n\u00b6\n\n\nComplete some functions and test the script.\n\n\nimport datetime\nimport random\n\nfrom questions import Add, Multiply\n\n\nclass Quiz: # ADD\n    questions = []\n    answers = []\n\n    def __init__(self):\n        \"\"\"\n        generate 10 random questions with numbers from 1 to 10\n        add these questions into self.questions\n        \"\"\"\n        question_types = (Add, Multiply)\n\n        for _ in range(10): # _ we don't care if it's 1, 5 or 12, as long as it is a number\n            num1 = random.randint(1, 10)\n            num2 = random.randint(1, 10)\n            question = random.choice(question_types)(num1, num2)\n            # add these questions into self.questions\n            self.questions.append(question)\n\n    def take_quiz(self):\n        # log the start time\n        # ask all of the questions\n        # log if they got the question right\n        # log the end time\n        # show a summary\n        pass\n\n    def ask(self, question):\n        # log the start time\n        # capture the answer\n        # check the answer\n        # log the end time\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        pass\n\n\n    def total_correct(self): # ADD\n        \"\"\"return the total # of correct answers\"\"\"\n        total = 0\n        for answer in self.answers:\n            if answer[0]:\n                total += 1\n        return total\n\n    def summary(self): # ADD\n        \"\"\"\n        print how many you got right and the total of questions: 5/10\n        print the total time for the quiz: 30 seconds!\n        \"\"\"\n        print(\"You got {} out of {} right.\".format(\n                self.total_correct(), len(self.questions)\n        ))\n        print(\"It took you {} seconds total.\".format(\n                (self.end_time-self.start_time).seconds\n        ))\n\n\nquiz1 = Quiz()\nprint quiz1.answers\nprint quiz1.questions\nprint \"=\" * 25\nprint quiz1.questions[0].text\nprint quiz1.questions[0].answer\n\n\n\n\nResults.\n\n\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n[]\n[<questions.Add instance at 0x00000000022B7E88>, <questions.Multiply instance at 0x00000000022FBC88>, <questions.Multiply instance at 0x00000000022FB688>, <questions.Multiply instance at 0x00000000022FBDC8>, <questions.Add instance at 0x00000000022FBE08>, <questions.Multiply instance at 0x00000000022FBE48>, <questions.Multiply instance at 0x00000000022FBE88>, <questions.Add instance at 0x00000000022FBEC8>, <questions.Multiply instance at 0x00000000022FBF08>, <questions.Multiply instance at 0x00000000022FBF48>]\n=========================\n3 + 1\n4\n\n\n\n\nFinalize the application\n\u00b6\n\n\nComplete the script and test it.\n\n\nimport datetime\nimport random\n\nfrom questions import Add, Multiply\n\n\nclass Quiz:\n    questions = []\n    answers = []\n\n    def __init__(self):\n        \"\"\"\n        generate 10 random questions with numbers from 1 to 10\n        add these questions into self.questions\n        \"\"\"\n        question_types = (Add, Multiply)\n\n        for _ in range(10): # _ we don't care if it's 1, 5 or 12, as long as it is a number\n            num1 = random.randint(1, 10)\n            num2 = random.randint(1, 10)\n            question = random.choice(question_types)(num1, num2)\n            # add these questions into self.questions\n            self.questions.append(question)\n\n    def take_quiz(self): # ADD\n        \"\"\"\n        log the start time, ask all of the questions\n        log if they got the question right, log the end time\n        show a summary\n        \"\"\"\n        # log the start time\n        self.start_time = datetime.datetime.now()\n\n        # ask all of the questions\n        for question in self.questions:\n            self.answers.append(self.ask(question))\n        else: # if the loop reached the end, so else happends\n            self.end_time = datetime.datetime.now()\n\n        # show a summary\n        return self.summary()     \n\n\n    def ask(self, question): # ADD\n        \"\"\"\n        log the start time, capture the answer, check the answer\n        log the end time, if the answer's right, send back True\n        otherwise, send back False, send back the elapses time, too\n        \"\"\"\n        correct = False\n        # log the start time\n        question_start = datetime.datetime.now()\n\n        # capture the answer\n        answer = raw_input(question.text + ' = ')\n\n        # check the answer\n        if answer == str(question.answer):\n            correct = True\n\n        # log the end time\n        question_end = datetime.datetime.now()\n\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        return correct, question_end - question_start\n\n\n    def total_correct(self):\n        \"\"\"return the total # of correct answers\"\"\"\n        total = 0\n        for answer in self.answers:\n            if answer[0]:\n                total += 1\n        return total\n\n    def summary(self):\n        \"\"\"\n        print how many you got right and the total of questions: 5/10\n        print the total time for the quiz: 30 seconds!\n        \"\"\"\n        print(\"You got {} out of {} right.\".format(\n                self.total_correct(), len(self.questions)\n        ))\n        print(\"It took you {} seconds total.\".format(\n                (self.end_time-self.start_time).seconds\n        ))\n\n\nQuiz().take_quiz() # ADD\n\n\n\n\nThe results are dynamic. We would get something that look like the following:\n\n\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n7 x 6 = 54\n9 x 10 = 90\n4 x 3 = 12\n3 + 6 = 9\n5 + 6 = 11\n10 x 6 = 60\n4 x 6 = 24\n9 + 9 = 18\n2 x 5 = 10\n8 + 3 = 11\nYou got 9 out of 10 rights.\nIt took you 21 seconds total.\n\n\n\n\nTime zones\n\u00b6\n\n\nTimezones are major challenges for websites and web frameworks. The following is coded in Python 3 since the most common Python frameworks (Flask, Django, Pyramid) at the time this documentation is written work under Python 3. One of the reason is the multi-language ability.\n\n\nTime zones with \ndatatime\n only\n\u00b6\n\n\nWe build two timezone-aware variables.\n\n\nimport datetime\n\npacific = datetime.timezone(datetime.timedelta(hours=-8))\neastern = datetime.timezone(datetime.timedelta(hours=-5))\n\nprint(pacific)\nprint(eastern)\n\n\n\n\nResults.\n\n\nUTC-08:00\nUTC-05:00\n\n\n\n\nWe build one timezone-naive variable and one timezone-aware variable.\n\n\n# ...\n\nnaive = datetime.datetime(2014, 4, 21, 9)\nprint(naive)\n\naware = datetime.datetime(2014, 4, 21, 9, tzinfo=pacific)\nprint(aware)\n\n\n\n\nResults.\n\n\n2014-04-21 09:00:00\n2014-04-21 09:00:00-08:00\n\n\n\n\nShow these in eastern time.\n\n\n# ...\n\nprint(naive.astimezone(eastern))\n\n\n\n\nResults: cannot be applied to a naive datetime.\n\n\n# ...\n\nprint(aware.astimezone(eastern))\n\n\n\n\nResults.\n\n\n2014-04-21 12:00:00-05:00\n\n\n\n\nOther interesting time zones.\n\n\n# ...\n\naukland = datetime.timezone(datetime.timedelta(hours=13))\nprint(aukland)\nprint(aware.astimezone(aukland))\nprint(\"=\" * 25)\n\nmumbai = datetime.timezone(datetime.timedelta(hours=13, minutes=30))\nprint(mumbai)\nprint(aware.astimezone(mumbai))\n\n\n\n\nResults.\n\n\nUTC+13:00\n2014-04-22 06:00:00+13:00\n=========================\nUTC+05:30\n2014-04-21 22:30:00+05:30\n\n\n\n\nTime zones with \ndatatime\n and \npytz\n\u00b6\n\n\npytz\n simplify things (a lot!).\n\n\nimport datetime\nimport pytz\n\npacific = pytz.timezone('US/Pacific')\neastern = pytz.timezone('US/Eastern')\n\nfmt = '%Y-%m-%d %H:%M:%S %Z%z'\nutc = pytz.utc\n\nprint(\"set: \")\nstart = pacific.localize(datetime.datetime(2014, 4, 21, 9))\nprint(start.strftime(fmt))\nprint(\"=\" * 25)\n\nprint(\"convert: \")\nstart_eastern = start.astimezone(eastern)\nprint(start_eastern)\nprint(\"=\" * 25)\n\nprint(start)\nprint(\"=\" * 25)\n\n\n\n\nResults.\n\n\nset: \n2014-04-21 09:00:00 PDT-0700\n=========================\nconvert: \n2014-04-21 12:00:00-04:00\n=========================\n2014-04-21 09:00:00-07:00\n=========================\n\n\n\n\nMore conversions.\n\n\n# ...\n\nprint(\"set: \")\nstart_utc = datetime.datetime(2014, 4, 21, 1, tzinfo=utc)\nprint(start_utc.strftime(fmt))\nprint(\"=\" * 25)\n\nprint(\"convert: \")\nstart_pacific = start_utc.astimezone(pacific)\nprint(start_pacific)\nprint(\"=\" * 25)\n\n\n\n\nResults.\n\n\nset: \n2014-04-21 01:00:00 UTC+0000\n=========================\nconvert: \n2014-04-20 18:00:00-07:00\n=========================\n\n\n\n\nSet a date-time and convert it.\n\n\n# ...\n\nprint(\"set aukland and mumbai\")\nauckland = pytz.timezone('Pacific/Auckland')\nmumbai = pytz.timezone('Asia/Calcutta')\n\nprint(\"create a date\")\napollo_13_naive = datetime.datetime(1970, 4, 11, 14, 13)\napollo_13_eastern = eastern.localize(apollo_13_naive)\n\nprint(\"print it: \")\nprint(apollo_13_naive)\nprint(apollo_13_eastern)\nprint(\"=\" * 25)\n\nprint(\"convert it, change location: \")\napollo_13_utc = apollo_13_eastern.astimezone(utc)\nprint(apollo_13_utc.astimezone(pacific).strftime(fmt))\nprint(apollo_13_utc.astimezone(auckland))\nprint(apollo_13_utc.astimezone(mumbai))\n\n\n\n\nResults.\n\n\nset aukland and mumbai\ncreate a date\nprint it: \n1970-04-11 14:13:00\n1970-04-11 14:13:00-05:00\n=========================\nconvert it, change location: \n1970-04-11 11:13:00 PST-0800\n1970-04-12 07:13:00+12:00\n1970-04-12 00:43:00+05:30\n\n\n\n\n\nFind out more about \npytz\n\u00b6\n\n\nFind out about timezones: \nprint(pytz.all_timezones)\n. Or focus on a country\u2019s timezones. The US.\n\n\nprint(pytz.country_timezones['us'])\n\n\n\n\nResults.\n\n\n['America/New_York', 'America/Detroit', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Indiana/Indianapolis', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Chicago', 'America/Indiana/Tell_City', 'America/Indiana/Knox', 'America/Menominee', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/North_Dakota/Beulah', 'America/Denver', 'America/Boise', 'America/Phoenix', 'America/Los_Angeles', 'America/Anchorage', 'America/Juneau', 'America/Sitka', 'America/Metlakatla', 'America/Yakutat', 'America/Nome', 'America/Adak', 'Pacific/Honolulu']\n\n\n\n\nCanada.\n\n\nprint(pytz.country_timezones['ca'])\n\n\n\n\nResults.\n\n\n['America/St_Johns', 'America/Halifax', 'America/Glace_Bay', 'America/Moncton', 'America/Goose_Bay', 'America/Blanc-Sablon', 'America/Toronto', 'America/Nipigon', 'America/Thunder_Bay', 'America/Iqaluit', 'America/Pangnirtung', 'America/Atikokan', 'America/Winnipeg', 'America/Rainy_River', 'America/Resolute', 'America/Rankin_Inlet', 'America/Regina', 'America/Swift_Current', 'America/Edmonton', 'America/Cambridge_Bay', 'America/Yellowknife', 'America/Inuvik', 'America/Creston', 'America/Dawson_Creek', 'America/Fort_Nelson', 'America/Vancouver', 'America/Whitehorse', 'America/Dawson']\n\n\n\n\nRussia.\n\n\nprint(pytz.country_timezones['ru'])\n\n\n\n\nResults.\n\n\n['Europe/Kaliningrad', 'Europe/Moscow', 'Europe/Simferopol', 'Europe/Volgograd', 'Europe/Kirov', 'Europe/Astrakhan', 'Europe/Saratov', 'Europe/Ulyanovsk', 'Europe/Samara', 'Asia/Yekaterinburg', 'Asia/Omsk', 'Asia/Novosibirsk', 'Asia/Barnaul', 'Asia/Tomsk', 'Asia/Novokuznetsk', 'Asia/Krasnoyarsk', 'Asia/Irkutsk', 'Asia/Chita', 'Asia/Yakutsk', 'Asia/Khandyga', 'Asia/Vladivostok', 'Asia/Ust-Nera', 'Asia/Magadan', 'Asia/Sakhalin', 'Asia/Srednekolymsk', 'Asia/Kamchatka', 'Asia/Anadyr']\n\n\n\n\nBuild a script to convert time zones\n\u00b6\n\n\nBuild a script that takes a datetime and give it back in 6 other timezones. For any given datetime, an appointment for example, we can know the equivalent elsewhere in the world.\n\n\nfrom datetime import datetime\n\nimport pytz\n\nOTHER_TIMEZONES = [\n    pytz.timezone('US/Eastern'),\n    pytz.timezone('Pacific/Auckland'),\n    pytz.timezone('Asia/Calcutta'),\n    pytz.timezone('UTC'),\n    pytz.timezone('Europe/Paris'),\n    pytz.timezone('Africa/Khartoum'),\n]\n\nfmt = '%Y-%m-%d %H:%M:%S %Z%z'\n\nwhile True:\n    date_input = input(\"When is your meeting? Please use MM/DD/YYYY HH:MM format. \")\n    try:\n        local_date = datetime.strptime(date_input, '%m/%d/%Y %H:%M')\n    except ValueError:\n        print(\"{} doesn't seem to be a valid date & time.\".format(date_input))\n    else:\n        local_date = pytz.timezone('US/Pacific').localize(local_date)\n        utc_date = local_date.astimezone(pytz.utc)\n\n        output = []\n        for timezone in OTHER_TIMEZONES:\n            output.append(utc_date.astimezone(timezone))\n        for appointment in output:\n            print(appointment.strftime(fmt))\n        break\n\n\n\n\nResults (1 inputs, 6 outputs).\n\n\nWhen is your meeting? Please use MM/DD/YYYY HH:MM format. 01/01/2018 13:00\n2018-01-01 16:00:00 EST-0500\n2018-01-02 10:00:00 NZDT+1300\n2018-01-02 02:30:00 IST+0530\n2018-01-01 21:00:00 UTC+0000\n2018-01-01 22:00:00 CET+0100\n2018-01-02 00:00:00 EAT+0300",
            "title": "Datetime"
        },
        {
            "location": "/Datetime/#now-or-any-date-time",
            "text": "The  datatime  library has handy built-in functions:  date ,  time ,  datetime ,  timedelta , and  tzinfo . The following script demonstrates some of the functionalities.  import datetime\n\nprint \"The datatime library: \"\nprint dir(datetime)\nprint \"=\" * 25\n\nprint \"The current datetime: \"\nprint datetime.datetime.now()\n\nprint \"...in a variable: \"\ntest_start = datetime.datetime.now()\nprint test_start\nprint \"=\" * 25\n\nprint \"Replace the attributes: new formatting.\"\ntest_start = test_start.replace(hour=7, minute=39, second = 0, microsecond=0)\nprint test_start\nprint \"=\" * 25  Results.  import datetime\n\nThe datatime library: \n['MAXYEAR', 'MINYEAR', '__doc__', '__name__', '__package__', 'date', 'datetime', 'datetime_CAPI', 'time', 'timedelta', 'tzinfo']\n=========================\n\nThe current datetime: \n2016-04-08 10:03:06.120000\n...in a variable: \n2016-04-08 10:03:06.120000\n=========================\n\nReplace the attributes: new formatting.\n2016-04-08 07:39:00\n=========================",
            "title": "now or any date-time"
        },
        {
            "location": "/Datetime/#date-time-difference",
            "text": "Create a date-time and compute the time difference.  import datetime\n\nprint \"Start: \"\nprint test_start\nprint \"=\" * 25\n\nduration = datetime.datetime.now() - test_start\nprint \"duration = datetime.datetime.now() - test_start: \"\nprint \"duration = \", duration\nprint \"day = \", duration.days\nprint \"microseconds = \", duration.microseconds\nprint \"seconds = \", duration.seconds\nprint \"hours (round(seconds/3600)) = \", round(duration.seconds/3600)  Results.  Start: \n2016-04-08 07:39:00\n=========================\n\nduration = datetime.datetime.now() - test_start: \nduration =  2:24:06.120000\nday =  0\nmicroseconds =  120000\nseconds =  8646\nhours (round(seconds/3600)) =  2.0\nminutes (round(seconds/60)) =  144.0\n=========================",
            "title": "Date-time difference"
        },
        {
            "location": "/Datetime/#measure-duration-with-timedelta",
            "text": "Create a delta.  print \"datetime.datetime.now():\"\nprint datetime.datetime.now()\n\nprint \"datetime.datetime.now() + datetime.timedelta(days=3): \"\nprint datetime.datetime.now() + datetime.timedelta(days=3)\nprint \"...........................................(days=-5): \"\nprint datetime.datetime.now() + datetime.timedelta(days=-5)\nprint \"...........................................(days=-1): \"\nprint datetime.datetime.now() + datetime.timedelta(days=-1)\nprint \"=\" * 25\nprint \"\"\n\nprint \"datetime.datetime.now() + datetime.timedelta(hours=1): \"\nprint datetime.datetime.now() + datetime.timedelta(hours=1)\nprint \"datetime.datetime.now() + datetime.timedelta(0, 3600): \"\nprint datetime.datetime.now() + datetime.timedelta(0, 3600)\nprint \"=\" * 25\nprint \"\"\n\nwork = 9\nprint \"work = \", work\n\nprint \"datetime.datetime.now() + datetime.timedelta(hours=work):\"\nprint datetime.datetime.now() + datetime.timedelta(hours=work)\nprint \"=\" * 25\nprint \"\"  Results.  datetime.datetime.now():\n2016-04-08 10:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(days=3): \n2016-04-11 10:06:25.895000\n...........................................(days=-5): \n2016-04-03 10:06:25.895000\n...........................................(days=-1): \n2016-04-07 10:06:25.895000\n=========================\n\ndatetime.datetime.now() + datetime.timedelta(hours=1): \n2016-04-08 11:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(0, 3600): \n2016-04-08 11:06:25.895000\n=========================\n\nwork =  9\ndatetime.datetime.now() + datetime.timedelta(hours=work):\n2016-04-08 19:06:25.895000\n=========================  Use  timedelta .  print \"Simplify: \"\nnow = datetime.datetime.now()\nprint \"now: \"\nprint now\nprint \"now.date: \"\nprint now.date()\nprint \"now.time: \"\nprint now.time()\nprint \"=\" * 25\nprint \"\"\n\nprint \"1 hour: \"\nhour = datetime.timedelta(hours=1)\nprint hour\nprint \"=\" * 25\nprint \"\"\n\nprint \"Add 1 day: \"\ntomorrow = datetime.datetime.now().replace(hour=9, minute=0) + datetime.timedelta(days=1)\nprint tomorrow\n\nprint \"Add 1 day (2): \"\nworkday = datetime.timedelta(hours=8)\nprint tomorrow + workday\nprint \"=\" * 25\nprint \"\"\n\nprint \"Appointment: \"\nappointment = datetime.timedelta(minutes=45)\n# year, month, day, hour, minute\nstart =  datetime.datetime(2016, 8, 17, 12, 45)\nend = start + appointment\nprint end\nprint \"=\" * 25\nprint \"\"  Results.  Simplify: \nnow: \n2016-04-08 10:16:11.476000\nnow.date: \n2016-04-08\nnow.time: \n10:16:11.476000\n=========================\n\n1 hour: \n1:00:00\n=========================\n\nAdd 1 day: \n2016-04-09 09:00:11.476000\nAdd 1 day (2): \n2016-04-09 17:00:11.476000\n=========================\n\nAppointment: \n2016-08-17 13:30:00\n=========================",
            "title": "Measure duration with timedelta"
        },
        {
            "location": "/Datetime/#now-vs-today",
            "text": "The difference between  now  and  today  is\u2026  import datetime\n\nnow = datetime.datetime.now()\ntoday = datetime.datetime.today()\nprint now\nprint today\nprint \"=\" * 25\nprint \"\"  Results.  2016-04-08 10:34:28.444000\n2016-04-08 10:34:28.444000\n=========================  \u2026 now  can take a timezone. We deal with timezones further down.  Today \u2026  import datetime\n\ntoday = datetime.datetime.combine(datetime.date.today(), datetime.time())\nprint today # today at midnight\nprint today.month\nprint today.hour\nprint today.year\nprint today.weekday() # 0 = Monday, 1, 2, 3, 4\nprint \"=\" * 25\nprint \"\"  Results.  2016-04-08 00:00:00\n4\n0\n2016\n5\n=========================",
            "title": "now vs. today"
        },
        {
            "location": "/Datetime/#formatting-date-time",
            "text": "Format date and time.  import datetime\n\nnow = datetime.datetime.now()\nprint now\n\n# how to better present\n# strftime (strings-from-time) or turn datetime digits into strings\n\nprint \"formatting datetime:\"\nprint now.strftime('%B %d')\nprint now.strftime('%m/%m/%y')  Results.  2016-04-08 11:08:26.757000\nformatting datetime:\nApril 08\n04/04/16  strptime  (strings-parse-time) turns strings into datetime digits. Look for help online for date and time types.  import datetime\n\nprint \"Formatting datetime: \"\nprint now.strftime('%B %d')\nprint now.strftime('%m/%m/%y')\nprint \"=\" * 25\nprint \"\"\n\nprint \"bithday: \"\nbirthday = datetime.datetime.strptime('2016-04-21', '%Y-%m-%d')\nprint birthday\nprint \"=\" * 25\nprint \"\"\n\nprint \"bithday_party: \"\nbirthday_party = datetime.datetime.strptime('2016-04-22 12:00', '%Y-%m-%d %H:%M')\nprint birthday_party\nprint \"=\" * 25\nprint \"\"  Results.  Formatting datetime: \nApril 08\n04/04/16\n=========================\n\nbithday: \n2016-04-21 00:00:00\n=========================\n\nbithday_party: \n2016-04-22 12:00:00\n=========================",
            "title": "Formatting date-time"
        },
        {
            "location": "/Datetime/#a-little-printing-app",
            "text": "Build an application that prints out a date in a sentence.  import datetime\n\nanswer_format = '%m/%d'\nlink_format = '%b_%d'\nlink = 'https://en.wikipedia.org/wiki/{}'\n\nwhile True:\n    answer = raw_input(\"What date would you like? Please use the MM/DD format. Enter 'q' to quit.\")\n    answer2 = str(answer)\n    if answer2.upper() == 'Q':\n        break\n\n    try:\n        date = datetime.datetime.strptime(answer, answer_format)\n        output = link.format(date.strftime(link_format))\n        print(output)\n        file = open('output.txt', 'w')\n        file.write(output)\n        file.close()\n    except:\n        print(\"That's not a valid date. Please try again.\")\n        break  Run it; it creates an output file. Open output.txt. Copy the link and paste it into a web browser.",
            "title": "A little printing app"
        },
        {
            "location": "/Datetime/#build-a-quiz-application",
            "text": "",
            "title": "Build a Quiz application"
        },
        {
            "location": "/Datetime/#build-the-skeleton",
            "text": "Build an application (questions.py) that add and multiply numbers.  import datetime\n\nclass Question:\n    answer = None\n    text = None\n\n\nclass Add(Question):\n    def __init__(self, num1, num2):\n        self.text = '{} + {}'.format(num1, num2)\n        self.answer = num1 + num2\n\n\nclass Multiply(Question):\n    def __init__(self, num1, num2):\n        self.text = '{} x {}'.format(num1, num2)\n        self.answer = num1 * num2\n\n\nprint \"Add: \"\nadd1 = Add(5, 7)\nprint add1.text\nprint add1.answer\nprint \"Multiply: \"\nmultiply1 = Multiply(2, 2)\nprint multiply1.text\nprint multiply1.answer  Results.  Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4  Import the questions.py module in another script: quiz.py. Build the skeleton.  import datetime\nimport random\n\nfrom questions import Add, Multiply # import the other module\n\n\nclass Quiz:\n    questions = []\n    answers = []\n\n    def __init__(self):\n        # generate 10 random questions with numbers from 1 to 10\n        # add these questions into self.questions\n        pass\n\n    def take_quiz(self):\n        # log the start time\n        # ask all of the questions\n        # log if they got the question right\n        # log the end time\n        # show a summary\n        pass\n\n    def ask(self, question):\n        # log the start time\n        # capture the answer\n        # check the answer\n        # log the end time\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        pass\n\n\n    def total_correct(self):\n        # return the total # of correct answers\n        pass\n\n\n    def summary(self):\n        # print how many you got right and the total of questions: 5/10\n        # print the total time for the quiz: 30 seconds!\n        pass  Results (similar).  Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4",
            "title": "Build the skeleton"
        },
        {
            "location": "/Datetime/#generate-questions",
            "text": "Complete some functions and test the script.  import datetime\nimport random\n\nfrom questions import Add, Multiply\n\n\nclass Quiz: # ADD\n    questions = []\n    answers = []\n\n    def __init__(self):\n        \"\"\"\n        generate 10 random questions with numbers from 1 to 10\n        add these questions into self.questions\n        \"\"\"\n        question_types = (Add, Multiply)\n\n        for _ in range(10): # _ we don't care if it's 1, 5 or 12, as long as it is a number\n            num1 = random.randint(1, 10)\n            num2 = random.randint(1, 10)\n            question = random.choice(question_types)(num1, num2)\n            # add these questions into self.questions\n            self.questions.append(question)\n\n    def take_quiz(self):\n        # log the start time\n        # ask all of the questions\n        # log if they got the question right\n        # log the end time\n        # show a summary\n        pass\n\n    def ask(self, question):\n        # log the start time\n        # capture the answer\n        # check the answer\n        # log the end time\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        pass\n\n\n    def total_correct(self): # ADD\n        \"\"\"return the total # of correct answers\"\"\"\n        total = 0\n        for answer in self.answers:\n            if answer[0]:\n                total += 1\n        return total\n\n    def summary(self): # ADD\n        \"\"\"\n        print how many you got right and the total of questions: 5/10\n        print the total time for the quiz: 30 seconds!\n        \"\"\"\n        print(\"You got {} out of {} right.\".format(\n                self.total_correct(), len(self.questions)\n        ))\n        print(\"It took you {} seconds total.\".format(\n                (self.end_time-self.start_time).seconds\n        ))\n\n\nquiz1 = Quiz()\nprint quiz1.answers\nprint quiz1.questions\nprint \"=\" * 25\nprint quiz1.questions[0].text\nprint quiz1.questions[0].answer  Results.  Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n[]\n[<questions.Add instance at 0x00000000022B7E88>, <questions.Multiply instance at 0x00000000022FBC88>, <questions.Multiply instance at 0x00000000022FB688>, <questions.Multiply instance at 0x00000000022FBDC8>, <questions.Add instance at 0x00000000022FBE08>, <questions.Multiply instance at 0x00000000022FBE48>, <questions.Multiply instance at 0x00000000022FBE88>, <questions.Add instance at 0x00000000022FBEC8>, <questions.Multiply instance at 0x00000000022FBF08>, <questions.Multiply instance at 0x00000000022FBF48>]\n=========================\n3 + 1\n4",
            "title": "Generate questions"
        },
        {
            "location": "/Datetime/#finalize-the-application",
            "text": "Complete the script and test it.  import datetime\nimport random\n\nfrom questions import Add, Multiply\n\n\nclass Quiz:\n    questions = []\n    answers = []\n\n    def __init__(self):\n        \"\"\"\n        generate 10 random questions with numbers from 1 to 10\n        add these questions into self.questions\n        \"\"\"\n        question_types = (Add, Multiply)\n\n        for _ in range(10): # _ we don't care if it's 1, 5 or 12, as long as it is a number\n            num1 = random.randint(1, 10)\n            num2 = random.randint(1, 10)\n            question = random.choice(question_types)(num1, num2)\n            # add these questions into self.questions\n            self.questions.append(question)\n\n    def take_quiz(self): # ADD\n        \"\"\"\n        log the start time, ask all of the questions\n        log if they got the question right, log the end time\n        show a summary\n        \"\"\"\n        # log the start time\n        self.start_time = datetime.datetime.now()\n\n        # ask all of the questions\n        for question in self.questions:\n            self.answers.append(self.ask(question))\n        else: # if the loop reached the end, so else happends\n            self.end_time = datetime.datetime.now()\n\n        # show a summary\n        return self.summary()     \n\n\n    def ask(self, question): # ADD\n        \"\"\"\n        log the start time, capture the answer, check the answer\n        log the end time, if the answer's right, send back True\n        otherwise, send back False, send back the elapses time, too\n        \"\"\"\n        correct = False\n        # log the start time\n        question_start = datetime.datetime.now()\n\n        # capture the answer\n        answer = raw_input(question.text + ' = ')\n\n        # check the answer\n        if answer == str(question.answer):\n            correct = True\n\n        # log the end time\n        question_end = datetime.datetime.now()\n\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        return correct, question_end - question_start\n\n\n    def total_correct(self):\n        \"\"\"return the total # of correct answers\"\"\"\n        total = 0\n        for answer in self.answers:\n            if answer[0]:\n                total += 1\n        return total\n\n    def summary(self):\n        \"\"\"\n        print how many you got right and the total of questions: 5/10\n        print the total time for the quiz: 30 seconds!\n        \"\"\"\n        print(\"You got {} out of {} right.\".format(\n                self.total_correct(), len(self.questions)\n        ))\n        print(\"It took you {} seconds total.\".format(\n                (self.end_time-self.start_time).seconds\n        ))\n\n\nQuiz().take_quiz() # ADD  The results are dynamic. We would get something that look like the following:  Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n7 x 6 = 54\n9 x 10 = 90\n4 x 3 = 12\n3 + 6 = 9\n5 + 6 = 11\n10 x 6 = 60\n4 x 6 = 24\n9 + 9 = 18\n2 x 5 = 10\n8 + 3 = 11\nYou got 9 out of 10 rights.\nIt took you 21 seconds total.",
            "title": "Finalize the application"
        },
        {
            "location": "/Datetime/#time-zones",
            "text": "Timezones are major challenges for websites and web frameworks. The following is coded in Python 3 since the most common Python frameworks (Flask, Django, Pyramid) at the time this documentation is written work under Python 3. One of the reason is the multi-language ability.",
            "title": "Time zones"
        },
        {
            "location": "/Datetime/#time-zones-with-datatime-only",
            "text": "We build two timezone-aware variables.  import datetime\n\npacific = datetime.timezone(datetime.timedelta(hours=-8))\neastern = datetime.timezone(datetime.timedelta(hours=-5))\n\nprint(pacific)\nprint(eastern)  Results.  UTC-08:00\nUTC-05:00  We build one timezone-naive variable and one timezone-aware variable.  # ...\n\nnaive = datetime.datetime(2014, 4, 21, 9)\nprint(naive)\n\naware = datetime.datetime(2014, 4, 21, 9, tzinfo=pacific)\nprint(aware)  Results.  2014-04-21 09:00:00\n2014-04-21 09:00:00-08:00  Show these in eastern time.  # ...\n\nprint(naive.astimezone(eastern))  Results: cannot be applied to a naive datetime.  # ...\n\nprint(aware.astimezone(eastern))  Results.  2014-04-21 12:00:00-05:00  Other interesting time zones.  # ...\n\naukland = datetime.timezone(datetime.timedelta(hours=13))\nprint(aukland)\nprint(aware.astimezone(aukland))\nprint(\"=\" * 25)\n\nmumbai = datetime.timezone(datetime.timedelta(hours=13, minutes=30))\nprint(mumbai)\nprint(aware.astimezone(mumbai))  Results.  UTC+13:00\n2014-04-22 06:00:00+13:00\n=========================\nUTC+05:30\n2014-04-21 22:30:00+05:30",
            "title": "Time zones with datatime only"
        },
        {
            "location": "/Datetime/#time-zones-with-datatime-and-pytz",
            "text": "pytz  simplify things (a lot!).  import datetime\nimport pytz\n\npacific = pytz.timezone('US/Pacific')\neastern = pytz.timezone('US/Eastern')\n\nfmt = '%Y-%m-%d %H:%M:%S %Z%z'\nutc = pytz.utc\n\nprint(\"set: \")\nstart = pacific.localize(datetime.datetime(2014, 4, 21, 9))\nprint(start.strftime(fmt))\nprint(\"=\" * 25)\n\nprint(\"convert: \")\nstart_eastern = start.astimezone(eastern)\nprint(start_eastern)\nprint(\"=\" * 25)\n\nprint(start)\nprint(\"=\" * 25)  Results.  set: \n2014-04-21 09:00:00 PDT-0700\n=========================\nconvert: \n2014-04-21 12:00:00-04:00\n=========================\n2014-04-21 09:00:00-07:00\n=========================  More conversions.  # ...\n\nprint(\"set: \")\nstart_utc = datetime.datetime(2014, 4, 21, 1, tzinfo=utc)\nprint(start_utc.strftime(fmt))\nprint(\"=\" * 25)\n\nprint(\"convert: \")\nstart_pacific = start_utc.astimezone(pacific)\nprint(start_pacific)\nprint(\"=\" * 25)  Results.  set: \n2014-04-21 01:00:00 UTC+0000\n=========================\nconvert: \n2014-04-20 18:00:00-07:00\n=========================  Set a date-time and convert it.  # ...\n\nprint(\"set aukland and mumbai\")\nauckland = pytz.timezone('Pacific/Auckland')\nmumbai = pytz.timezone('Asia/Calcutta')\n\nprint(\"create a date\")\napollo_13_naive = datetime.datetime(1970, 4, 11, 14, 13)\napollo_13_eastern = eastern.localize(apollo_13_naive)\n\nprint(\"print it: \")\nprint(apollo_13_naive)\nprint(apollo_13_eastern)\nprint(\"=\" * 25)\n\nprint(\"convert it, change location: \")\napollo_13_utc = apollo_13_eastern.astimezone(utc)\nprint(apollo_13_utc.astimezone(pacific).strftime(fmt))\nprint(apollo_13_utc.astimezone(auckland))\nprint(apollo_13_utc.astimezone(mumbai))  Results.  set aukland and mumbai\ncreate a date\nprint it: \n1970-04-11 14:13:00\n1970-04-11 14:13:00-05:00\n=========================\nconvert it, change location: \n1970-04-11 11:13:00 PST-0800\n1970-04-12 07:13:00+12:00\n1970-04-12 00:43:00+05:30",
            "title": "Time zones with datatime and pytz"
        },
        {
            "location": "/Datetime/#find-out-more-about-pytz",
            "text": "Find out about timezones:  print(pytz.all_timezones) . Or focus on a country\u2019s timezones. The US.  print(pytz.country_timezones['us'])  Results.  ['America/New_York', 'America/Detroit', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Indiana/Indianapolis', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Chicago', 'America/Indiana/Tell_City', 'America/Indiana/Knox', 'America/Menominee', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/North_Dakota/Beulah', 'America/Denver', 'America/Boise', 'America/Phoenix', 'America/Los_Angeles', 'America/Anchorage', 'America/Juneau', 'America/Sitka', 'America/Metlakatla', 'America/Yakutat', 'America/Nome', 'America/Adak', 'Pacific/Honolulu']  Canada.  print(pytz.country_timezones['ca'])  Results.  ['America/St_Johns', 'America/Halifax', 'America/Glace_Bay', 'America/Moncton', 'America/Goose_Bay', 'America/Blanc-Sablon', 'America/Toronto', 'America/Nipigon', 'America/Thunder_Bay', 'America/Iqaluit', 'America/Pangnirtung', 'America/Atikokan', 'America/Winnipeg', 'America/Rainy_River', 'America/Resolute', 'America/Rankin_Inlet', 'America/Regina', 'America/Swift_Current', 'America/Edmonton', 'America/Cambridge_Bay', 'America/Yellowknife', 'America/Inuvik', 'America/Creston', 'America/Dawson_Creek', 'America/Fort_Nelson', 'America/Vancouver', 'America/Whitehorse', 'America/Dawson']  Russia.  print(pytz.country_timezones['ru'])  Results.  ['Europe/Kaliningrad', 'Europe/Moscow', 'Europe/Simferopol', 'Europe/Volgograd', 'Europe/Kirov', 'Europe/Astrakhan', 'Europe/Saratov', 'Europe/Ulyanovsk', 'Europe/Samara', 'Asia/Yekaterinburg', 'Asia/Omsk', 'Asia/Novosibirsk', 'Asia/Barnaul', 'Asia/Tomsk', 'Asia/Novokuznetsk', 'Asia/Krasnoyarsk', 'Asia/Irkutsk', 'Asia/Chita', 'Asia/Yakutsk', 'Asia/Khandyga', 'Asia/Vladivostok', 'Asia/Ust-Nera', 'Asia/Magadan', 'Asia/Sakhalin', 'Asia/Srednekolymsk', 'Asia/Kamchatka', 'Asia/Anadyr']",
            "title": "Find out more about pytz"
        },
        {
            "location": "/Datetime/#build-a-script-to-convert-time-zones",
            "text": "Build a script that takes a datetime and give it back in 6 other timezones. For any given datetime, an appointment for example, we can know the equivalent elsewhere in the world.  from datetime import datetime\n\nimport pytz\n\nOTHER_TIMEZONES = [\n    pytz.timezone('US/Eastern'),\n    pytz.timezone('Pacific/Auckland'),\n    pytz.timezone('Asia/Calcutta'),\n    pytz.timezone('UTC'),\n    pytz.timezone('Europe/Paris'),\n    pytz.timezone('Africa/Khartoum'),\n]\n\nfmt = '%Y-%m-%d %H:%M:%S %Z%z'\n\nwhile True:\n    date_input = input(\"When is your meeting? Please use MM/DD/YYYY HH:MM format. \")\n    try:\n        local_date = datetime.strptime(date_input, '%m/%d/%Y %H:%M')\n    except ValueError:\n        print(\"{} doesn't seem to be a valid date & time.\".format(date_input))\n    else:\n        local_date = pytz.timezone('US/Pacific').localize(local_date)\n        utc_date = local_date.astimezone(pytz.utc)\n\n        output = []\n        for timezone in OTHER_TIMEZONES:\n            output.append(utc_date.astimezone(timezone))\n        for appointment in output:\n            print(appointment.strftime(fmt))\n        break  Results (1 inputs, 6 outputs).  When is your meeting? Please use MM/DD/YYYY HH:MM format. 01/01/2018 13:00\n2018-01-01 16:00:00 EST-0500\n2018-01-02 10:00:00 NZDT+1300\n2018-01-02 02:30:00 IST+0530\n2018-01-01 21:00:00 UTC+0000\n2018-01-01 22:00:00 CET+0100\n2018-01-02 00:00:00 EAT+0300",
            "title": "Build a script to convert time zones"
        },
        {
            "location": "/Execute_Highlighted_Python_Code_in_gedit/",
            "text": "CONTENT\n\n\n\n\n\n\nForeword\n\n\nNotes. Python and gedit.\n\n\n\n\n\n\nIn the gedit menu: Tools/Manage External Tools\n\n\nOn the left, add: Execute Highlighted Python Code\n\n\nOn the right, add:\n\n\n\n\n#!/usr/bin/env python3\nimport sys\nexec(sys.stdin.read())\n\n\n\n\n\n\nAt the bottom,\n\n\nChoose a shortcut key: \nAlt+x\n.\n\n\nInput: \nCurrent selection (default to document)\n.\n\n\nOutput: \nDisplay in bottom pane\n.\n\n\nDo not change the other parameters.\n\n\n\n\n\n\nCreate a python document (.py), add Python code, highlight the code, and press \nAlt+x\n: a bottom pane opens showing the results.\n\n\nThe external tool is now part of gedit and ready to use.",
            "title": "Execute Highlighted Python Code in gedit"
        },
        {
            "location": "/Scipy_CS/",
            "text": "CONTENT\n\n\nImporting Data\n\n\nData Mining\n\n\nMachine Learning\n\n\nVisualization\n\n\n\n\n\n\n\n\nForeword\n\n\nCheat sheets.\n\n\n\n\nImporting Data\n\u00b6\n\n\n\n\nImporting Data\n. PDF. Files: text, falt, spreadsheet, SAS, Stata, RDB, Pickled, HDF5, Matlab, with numpy, pandas, accessing, exploring, and navigating.\n\n\n\n\n\n\n\n\n\n\nData Mining\n\u00b6\n\n\n\n\nData Mining\n. PDF only.\n\n\n\n\n\n\n\n\nNumPy/SciPy/Pandas Cheat Sheet\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Numpy Array\n. HTML only.\n\n\nNumpy\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinear Algebra\n. PDF only.\n\n\nSciPy Linear Algebra\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPandas\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPandas DataFrame Notes\n. PDF.\n\n\n\n\n\n\n\n\n\n\nMachine Learning\n\u00b6\n\n\n\n\n.\n\n\n\n\n\n\n\n\nscikit-learn\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPySpark\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPySpark SQL\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeras\n. PDF.\n\n\n\n\n\n\n\n\n\n\nVisualization\n\u00b6\n\n\n\n\nMatplotlib\n. PDF.\n\n\nMatplotlib Notes\n. PDF only.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeaborn\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBokeh\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotly\n. PDF only.",
            "title": "Scipy Stack Cheat Sheets"
        },
        {
            "location": "/Scipy_CS/#data-mining",
            "text": "Data Mining . PDF only.     NumPy/SciPy/Pandas Cheat Sheet . PDF.           Python Numpy Array . HTML only.  Numpy . PDF.        Linear Algebra . PDF only.  SciPy Linear Algebra . PDF.        Pandas . PDF.         Pandas DataFrame Notes . PDF.",
            "title": "Data Mining"
        },
        {
            "location": "/Scipy_CS/#machine-learning",
            "text": ".     scikit-learn . PDF.        PySpark . PDF.        PySpark SQL . PDF.        Keras . PDF.",
            "title": "Machine Learning"
        },
        {
            "location": "/Scipy_CS/#visualization",
            "text": "Matplotlib . PDF.  Matplotlib Notes . PDF only.        Seaborn . PDF.        Bokeh . PDF.        plotly . PDF only.",
            "title": "Visualization"
        },
        {
            "location": "/JN_CS/",
            "text": "CONTENT\n\n\nJupyter Notebook commands\n\n\nObjects\n\n\nLogging\n\n\nMagic & Help\n\n\nFunction\n\n\nNavigation\n\n\nExternal\n\n\n\n\n\n\n\n\nForeword\n\n\nCheat sheets and snippets.\n\n\n\n\nJupyter Notebook commands\n\u00b6\n\n\n\n\nJupyter Notebook\n. PDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJupyter Notebook\n. PDF\n\n\n\n\n\n\n\n\n\n\nObjects\n\u00b6\n\n\nFind, list, search, reset.\n\n\na = 10\nb = 20.1\nc = \"test\"\nd = [1, 2, 3]\n\n\n\n\nwho\n\n\n\n\na    b   c   d\n\n\n\nwhos\n\n\n\n\nVariable   Type     Data/Info\n-----------------------------\na          int      10\nb          float    20.1\nc          str      test\nd          list     n=3\n\n\n\nreset\n\n\n\n\nOnce deleted, variables cannot be recovered. Proceed (y/[n])? y\n\n\n\nwho\n\n\n\n\nInteractive namespace is empty.\n\n\n\na = 10\nb = 20\nc = \"test\"\nd = [1, 2, 3]\n\n\n\n\nwho\n\n\n\n\na    b   c   d\n\n\n\n\n\nLogging\n\u00b6\n\n\nStart, state, on, off.\n\n\nlogstate\n\n\n\n\n\nLogging has not been activated.\n\n\n\nlogstart\n\n\n\n\n\nActivating auto-logging. Current session state plus future input saved.\nFilename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : active\n\n\n\nlogstate\n\n\n\n\n\nFilename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : active\n\n\n\nlogoff\n\n\n\n\n\nSwitching logging OFF\n\n\n\nlogstate\n\n\n\n\n\nFilename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : temporarily suspended\n\n\n\nlogon\n\n\n\n\n\nSwitching logging ON\n\n\n\nlogstate\n\n\n\n\n\nFilename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : active\n\n\n\n\n\nMagic & Help\n\u00b6\n\n\nList, help.\n\n\nlsmagic\n\n\n\n\n\nAvailable line magics:\n%alias  %alias_magic  %autocall  %automagic  %autosave  %bookmark  %cat  %cd  %clear  %colors  %config  %connect_info  %cp  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode\n\nAvailable cell magics:\n%%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n\nAutomagic is ON, % prefix IS NOT needed for line magics.\n\n\n\nOpen a window about magic commands.\n\n\nmagic\n\n\n\n\nOpen a window about the command (minimum, maximum help).\n\n\n%alias?\n\n\n\n\n%alias??\n\n\n\n\n\n\nFunction\n\u00b6\n\n\ndocstrings, info, source.\n\n\ndef print_number(nb):\n\n    \"\"\"\n    The docstring. print_number prints Hi!\n    \"\"\"\n    print(\"Hi!\" * nb)\n\n\n\n\nprint_number(1)\nprint_number(5)\n\n\n\n\nHi!\nHi!Hi!Hi!Hi!Hi!\n\n\n\npdef print_number\n\n\n\n\n print_number(nb)\n\n\n\nOpen a window about the docstrings.\n\n\npdoc print_number\n\n\n\n\n\nOpen a window about the function.\n\n\npinfo print_number\n\n\n\n\n\n\n\nNavigation\n\u00b6\n\n\nBookmark, history.\n\n\nbookmark -l\n\n\n\n\nCurrent bookmarks:\nname     -> path\nuntitled -> /home/user\n\n\n\nAdd a bookmark.\n\n\nbookmark aaa path\n\n\n\n\nbookmark -l\n\n\n\n\nCurrent bookmarks:\naaa      -> path\nname     -> path\nuntitled -> /home/user\n\n\n\nDelete a bookmark.\n\n\nbookmark -d aaa\n\n\n\n\nbookmark -l\n\n\n\n\nCurrent bookmarks:\nname     -> path\nuntitled -> /home/user\n\n\n\nPrint the directory navigation history.\n\n\ndhist\n\n\n\n\nDirectory history (kept in _dh)\n0: /home/user\n\n\n\n\n\nExternal\n\u00b6\n\n\nBash, script.\n\n\nThe following is an example of one bash command.\n\n\n!pwd\n\n\n\n\n/home/user\n\n\n\nabc = !pwd\n\n\n\n\nabc\n\n\n\n\n['/home/user']\n\n\n\nalias\n\n\n\n\nTotal number of aliases: 12\n\n[('cat', 'cat'),\n ('cp', 'cp'),\n ('ldir', 'ls -F -o --color %l | grep /$'),\n ('lf', 'ls -F -o --color %l | grep ^-'),\n ('lk', 'ls -F -o --color %l | grep ^l'),\n ('ll', 'ls -F -o --color'),\n ('ls', 'ls -F --color'),\n ('lx', 'ls -F -o --color %l | grep ^-..x'),\n ('mkdir', 'mkdir'),\n ('mv', 'mv'),\n ('rm', 'rm'),\n ('rmdir', 'rmdir')]\n\n\n\nInvoke an external script into IPython.\n\n\nrun print_text.py\n\n\n\n\nHi!\n\n\n\nInvoke an external script into IPython and open a window about the script\u2019s profile.\n\n\nrun -p print_text.py\n\n\n\n\nHi!\n\n\n\nLoad the external script into IPython (\nload print_text.py\n turns into \n# %load print_text.py\n).\n\n\n# %load print_text.py\ndef print_text():\n\n    \"\"\"\n    The docstring. print_text prints Hi!\n    \"\"\"\n    print(\"Hi!\")\n\nprint_text()",
            "title": "Jupyter Notebook Cheat Sheets"
        },
        {
            "location": "/JN_CS/#objects",
            "text": "Find, list, search, reset.  a = 10\nb = 20.1\nc = \"test\"\nd = [1, 2, 3]  who  a    b   c   d  whos  Variable   Type     Data/Info\n-----------------------------\na          int      10\nb          float    20.1\nc          str      test\nd          list     n=3  reset  Once deleted, variables cannot be recovered. Proceed (y/[n])? y  who  Interactive namespace is empty.  a = 10\nb = 20\nc = \"test\"\nd = [1, 2, 3]  who  a    b   c   d",
            "title": "Objects"
        },
        {
            "location": "/JN_CS/#logging",
            "text": "Start, state, on, off.  logstate  Logging has not been activated.  logstart  Activating auto-logging. Current session state plus future input saved.\nFilename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : active  logstate  Filename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : active  logoff  Switching logging OFF  logstate  Filename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : temporarily suspended  logon  Switching logging ON  logstate  Filename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : active",
            "title": "Logging"
        },
        {
            "location": "/JN_CS/#magic-help",
            "text": "List, help.  lsmagic  Available line magics:\n%alias  %alias_magic  %autocall  %automagic  %autosave  %bookmark  %cat  %cd  %clear  %colors  %config  %connect_info  %cp  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode\n\nAvailable cell magics:\n%%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n\nAutomagic is ON, % prefix IS NOT needed for line magics.  Open a window about magic commands.  magic  Open a window about the command (minimum, maximum help).  %alias?  %alias??",
            "title": "Magic &amp; Help"
        },
        {
            "location": "/JN_CS/#function",
            "text": "docstrings, info, source.  def print_number(nb):\n\n    \"\"\"\n    The docstring. print_number prints Hi!\n    \"\"\"\n    print(\"Hi!\" * nb)  print_number(1)\nprint_number(5)  Hi!\nHi!Hi!Hi!Hi!Hi!  pdef print_number   print_number(nb)  Open a window about the docstrings.  pdoc print_number  Open a window about the function.  pinfo print_number",
            "title": "Function"
        },
        {
            "location": "/JN_CS/#navigation",
            "text": "Bookmark, history.  bookmark -l  Current bookmarks:\nname     -> path\nuntitled -> /home/user  Add a bookmark.  bookmark aaa path  bookmark -l  Current bookmarks:\naaa      -> path\nname     -> path\nuntitled -> /home/user  Delete a bookmark.  bookmark -d aaa  bookmark -l  Current bookmarks:\nname     -> path\nuntitled -> /home/user  Print the directory navigation history.  dhist  Directory history (kept in _dh)\n0: /home/user",
            "title": "Navigation"
        },
        {
            "location": "/JN_CS/#external",
            "text": "Bash, script.  The following is an example of one bash command.  !pwd  /home/user  abc = !pwd  abc  ['/home/user']  alias  Total number of aliases: 12\n\n[('cat', 'cat'),\n ('cp', 'cp'),\n ('ldir', 'ls -F -o --color %l | grep /$'),\n ('lf', 'ls -F -o --color %l | grep ^-'),\n ('lk', 'ls -F -o --color %l | grep ^l'),\n ('ll', 'ls -F -o --color'),\n ('ls', 'ls -F --color'),\n ('lx', 'ls -F -o --color %l | grep ^-..x'),\n ('mkdir', 'mkdir'),\n ('mv', 'mv'),\n ('rm', 'rm'),\n ('rmdir', 'rmdir')]  Invoke an external script into IPython.  run print_text.py  Hi!  Invoke an external script into IPython and open a window about the script\u2019s profile.  run -p print_text.py  Hi!  Load the external script into IPython ( load print_text.py  turns into  # %load print_text.py ).  # %load print_text.py\ndef print_text():\n\n    \"\"\"\n    The docstring. print_text prints Hi!\n    \"\"\"\n    print(\"Hi!\")\n\nprint_text()",
            "title": "External"
        },
        {
            "location": "/Scientific Python (the SciPy Stack)/",
            "text": "CONTENT\n\n\n\n\n\n\nForeword\n\n\nNotes.\n\n\n\n\n\n\nSciPy.org\n\n\nInstall\n\n\nGetting Started\n\n\nDocumentation\n\n\nSciPy Central (collection of code snippets, modules and links for solving scientific problems with SciPy and related Python tools)\n\n\nBlogs\n\n\nNumpy (Base N-dimensional array)\n\n\nMatplotlib (Comprehensive 2D Plotting) (official documentation, examples, gallery, commands)\n\n\nSympy (Symbolic mathematics) (official documentation, features, projects)\n\n\n\u2026\n\n\nIPython (Enhanced Interactive Console) (official documentation, Jupyter)\n\n\nPandas (Data structures & analysis) (official documentation)\n\n\n\n\n\n\nNumpy examples (crash course and snippets in a IPython notebook)\n\n\nL\u2019informatique scientifique avec Python\n\n\n\u2026\n\n\nComment cr\u00e9er et manipuler les donn\u00e9es scientifiques : autour de Numpy (crash course, snippets\n\n\nSavoir chercher (trouver) de l\u2019aide\n\n\n\u2026\n\n\n\n\n\n\nMPIA Python Workshop (hands-on workshops on using Python to solve real-world problems)\n\n\nIntroduction and Motivation (quick tour, who is using, examples)\n\n\nPython Installation and Understanding Packages\n\n\nAn introduction to Pure Python (crash course)\n\n\nCore packages for analysis: NumPy and SciPy (snippets)\n\n\nPlotting and Images\n\n\nMatplotlib (procedural method, snippets)\n\n\nAdvanced plotting (object-based method)\n\n\nPublication-quality plots (tips)\n\n\n\n\n\n\nObject-Oriented Programming in Python (snippets)\n\n\nFitting data with Python (models, algorithms, how-to)",
            "title": "Scientific Python (the SciPy Stack)"
        },
        {
            "location": "/Importing Data into Python/",
            "text": "CONTENT\n\n\n1, Importing from Flat Files\n\n\nNumpy\n\n\nPandas\n\n\n\n\n\n\n2, Importing from Other Files\n\n\n3, Working with Relational Databases\n\n\n4, Importing Flat Files from the Web (Web Scraping)\n\n\n5, Introduction to APIs and JSONs\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the courses. Python 3. From DataCamp.\n\n\n\n\n1, Importing from Flat Files\n\u00b6\n\n\n\n\nLoad the script and run it.\n\n\n\n\n# %load \"Importing Data in Python.py\"\nfile = open('moby_dick.txt', 'r')\n\n# Print it\nprint(file.read())\n\n# Check whether file is closed\nprint(file.closed)\n\n# Close file\nfile.close()\n\n# Check whether file is closed\nprint(file.closed)\n\n\n\n\nCHAPTER 1. Loomings.\n\nCall me Ishmael. Some years ago--never mind how long precisely--having\nlittle or no money in my purse, and nothing particular to interest me on\nshore, I thought I would sail about a little and see the watery part of\nthe world. It is a way I have of driving off the spleen and regulating\nthe circulation. Whenever I find myself growing grim about the mouth;\nwhenever it is a damp, drizzly November in my soul; whenever I find\nmyself involuntarily pausing before coffin warehouses, and bringing up\nthe rear of every funeral I meet; and especially whenever my hypos get\nsuch an upper hand of me, that it requires a strong moral principle to\nprevent me from deliberately stepping into the street, and methodically\nknocking people's hats off--then, I account it high time to get to sea\nas soon as I can. This is my substitute for pistol and ball. With a\nphilosophical flourish Cato throws himself upon his sword; I quietly\ntake to the ship. There is nothing surprising in this. If they but knew\nit, almost all men in their degree, some time or other, cherish very\nnearly the same feelings towards the ocean with me.\nFalse\nTrue\n\n\n\n# Read & print the first 3 lines\nwith open('moby_dick.txt') as file:\n    print(file.readline())\n    print(file.readline())\n    print(file.readline())\n    print(file.readline(10))\n    print(file.readline(50))\n    print(file.readline(50))\n\n\n\n\nCHAPTER 1. Loomings.\n\nCall me Ishmael. Some years ago--never mind how long precisely--having\n\nlittle or \nno money in my purse, and nothing particular to in\nterest me on\n\n\n\n\n\nthis\n is a special package about PEP 20.\n\n\n\n\nimport this\n\n\n\n\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n\n\n\n\nBDFL: Benevolent Dictator For Life, a.k.a. Guido van Rossum, Python\u2019s creator.\n\n\n\n\nNumpy\n\u00b6\n\n\n\n\nNumPy arrays are a standard for storing numerical data.\n\n\nArrays are essential to other packages such as the \nscikit-learn\n, for machine learning.\n\n\nImport \nnumpy\n and \nmatplotlib\n (or invoke them with the \n%pylab\n magic command).\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n\n\n# or...\n%pylab inline\n\n# no need for preceeding functions (methods) with np. or plt.\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\nImport a csv file and assign the content to an array.\n\n\n\n\nfile = 'digits.csv'\n\n# Load the file as an array called digits\ndigits = loadtxt(file, delimiter = ',')\n\n# Print the datatype of digits\nprint(type(digits))\n\nprint(digits)\n\n# Select a row\nim = digits[2, 2:]\nprint(im)\n\n\n\n\n<class 'numpy.ndarray'>\n[[ 1.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 1.  0.  0.  0.  0.  0.]\n [ 2.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 5.  0.  0.  0.  0.  0.]]\n[ 0.  0.  0.  0.]\n\n\n\n\n\nImport a txt file. The \ndelimiter\n can be \n'\\t'\n, \n','\n, \n';'\n, etc. \n\n\nSkip the first 90 rows.\n\n\n\n\nfile = 'digits_header.txt'\n\n# Load the data into array data\ndata = loadtxt(file, delimiter='  ', skiprows = 90)\n\n# Print data\nprint(data)\n\n\n\n\n[[ 3.  0.]\n [ 6.  0.]\n [ 4.  0.]\n [ 6.  0.]\n [ 2.  0.]\n [ 9.  0.]\n [ 1.  0.]\n [ 2.  0.]\n [ 0.  0.]\n [ 5.  0.]]\n\n\n\n\n\nImport a txt file, but only the last rows and first column.\n\n\n\n\ndata2 = loadtxt(file, delimiter='  ', skiprows = 90, usecols = [0])\n\n# Print data\nprint(data2)\n\n\n\n\n[ 3.  6.  4.  6.  2.  9.  1.  2.  0.  5.]\n\n\n\n\n\nImport a txt file as string.\n\n\n\n\nfile = 'seaslug.txt'\n\n# Import file: data\ndata = loadtxt(file, delimiter = ' ', dtype = str)\n\n# Print the first element of data\nprint(data[0])\n\n\n\n\n['b\"b\\'Time\\'\"' 'b\"b\\'Percent\\'\"']\n\n\n\n\n\nImport a txt file as float numbers.\n\n\n\n\nfile = 'seaslug2.txt'\n\n# Import data as floats and skip the first row: data_float\ndata_float = loadtxt(file, delimiter='   ', dtype = float, skiprows = 1)\n\n# Print the 10th element of data_float\nprint(data_float[9])\n\n# Plot a scatterplot of the data\nscatter(data_float[:, 0], data_float[:, 1])\nxlabel('time (min.)')\nylabel('percentage of larvae')\n\nshow()\n\n\n\n\n[ 0.     0.357]\n\n\n\n\n\n\n\nImport a csv file. Format the data.\n\n\n\n\ndata = genfromtxt('titanic.csv', delimiter = ',', names = True, dtype = None)\n\n\n\n\n # A structred array\nshape(data)\n\n\n\n\n(891,)\n\n\n\n\n\nExtract a row, a column.\n\n\n\n\n# to get the ith row, merely execute data[i]\nprint(data[0:10])\n\n\n\n\n[ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")\n (4, 1, 1, b\" b'female'\", 35.0, 1, 0, b\" b'113803'\", 53.1, b\" b'C123'\", b\" b'S'\")\n (5, 0, 3, b\" b'male'\", 35.0, 0, 0, b\" b'373450'\", 8.05, b\" b''\", b\" b'S'\")\n (6, 0, 3, b\" b'male'\", nan, 0, 0, b\" b'330877'\", 8.4583, b\" b''\", b\" b'Q'\")\n (7, 0, 1, b\" b'male'\", 54.0, 0, 0, b\" b'17463'\", 51.8625, b\" b'E46'\", b\" b'S'\")\n (8, 0, 3, b\" b'male'\", 2.0, 3, 1, b\" b'349909'\", 21.075, b\" b''\", b\" b'S'\")\n (9, 1, 3, b\" b'female'\", 27.0, 0, 2, b\" b'347742'\", 11.1333, b\" b''\", b\" b'S'\")\n (10, 1, 2, b\" b'female'\", 14.0, 1, 0, b\" b'237736'\", 30.0708, b\" b''\", b\" b'C'\")]\n\n\n\n# to get the column with name 'Fare', execute data['Fare']\nprint(data['Fare'][0:10])\n\n\n\n\n[  7.25    71.2833   7.925   53.1      8.05     8.4583  51.8625  21.075\n  11.1333  30.0708]\n\n\n\n\n\nImport a csv file. \n\n\nFormat the data.\n\n\n\n\n# default dtype is None\ndata2 = recfromcsv('titanic.csv', delimiter = ',', names = True, dtype = None)\n\n\n\n\n# Print out first three entries\nprint(data2[:3])\n\n\n\n\n[ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")]\n\n\n\nPandas\n\u00b6\n\n\n\n\nTwo-dimensional labeled data structure(s) or  data frame (DataFrame).\n\n\nPythonic analog of R\u2019s dataframes.\n\n\nColumns can be of potentially different types.\n\n\nExcellent object for: \n\n\nManipulate, slice, reshape, groupby, join, merge.\n\n\nPerform statistics.\n\n\nWork with time series data.\n\n\nExploratory data analysis.\n\n\nData wrangling.\n\n\nData preprocessing.\n\n\nBuilding models.\n\n\nVisualization.\n\n\n\n\n\n\nThere exists standards and best practices to use pandas.\n\n\n\n\n# Import pandas\nimport pandas as pd\n\n\n\n\n\n\nPandas is not part of \n%pylab\n.\n\n\nImport a file.\n\n\n\n\nfile = 'titanic.csv'\n\n# Read the file into a DataFrame: df\ndf = pd.read_csv(file)\n\n# View the head of the DataFrame\nprint(df.head())\n\n\n\n\n   Passengerid   Survived   Pclass         Sex    Age   SibSp   Parch  \\\n0            1          0        3     b'male'   22.0       1       0   \n1            2          1        1   b'female'   38.0       1       0   \n2            3          1        3   b'female'   26.0       0       0   \n3            4          1        1   b'female'   35.0       1       0   \n4            5          0        3     b'male'   35.0       0       0\n\n                 Ticket     Fare     Cabin  Embarked  \n0          b'A/5 21171'   7.2500       b''      b'S'  \n1           b'PC 17599'  71.2833    b'C85'      b'C'  \n2   b'STON/O2. 3101282'   7.9250       b''      b'S'  \n3             b'113803'  53.1000   b'C123'      b'S'  \n4             b'373450'   8.0500       b''      b'S'\n\n\n\n\n\nImport another file; no header and some rows.\n\n\n\n\nfile = 'digits2.csv'\n\n# Read the first 5 rows of the file into a DataFrame: data\ndata = pd.read_csv(file, nrows = 5, header = None)\n\n# Print the datatype of data\nprint(type(data))\n\n# Build a numpy array from the DataFrame: data_array\ndata_array = data.values\n\n# Print the datatype of data_array to the shell\nprint(type(data_array))\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\n<class 'numpy.ndarray'>\n\n\n\n\n\nImport another file; replace the missing data (NA).\n\n\n\n\nfile = 'titanic_corrupt.csv'\n\n# Assign filename: file\nfile = 'titanic_corrupt.csv'\n\n# Import file: data\ndata = pd.read_csv(file, sep = ';', comment = '#', na_values = ['Nothing'])\n\n# Print the head of the DataFrame\nprint(data.head())\n\n\n\n\n   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch   \\\n0            1         0       3    male  22.0      1       0   \n1            2         1       1  female  38.0      1       0   \n2            3         1       3  female  26.0      0       0   \n3            4         1       1  female  35.0      1       0   \n4            5         0       3    male  35.0      0       0\n\n             Ticket   Fare Cabin Embarked  \n0         A/5 21171   7,25   NaN        S  \n1          PC 17599    NaN   NaN      NaN  \n2  STON/O2. 3101282  7,925   NaN        S  \n3            113803   53,1  C123        S  \n4            373450   8,05   NaN        S\n\n\n\n\n\nPlot the \nAge\n variable in a histogram.\n\n\n\n\npd.DataFrame.hist(data[['Age']])\nplt.xlabel('Age (years)')\nplt.ylabel('count')\n\nplt.show()\n\n\n\n\n\n\n2, Importing from Other Files\n\u00b6\n\n\n\n\nWith Pandas\u2026 and a bit of Numpy.\n\n\nExcel spreadsheets.\n\n\nMATLAB files.\n\n\nSAS files.\n\n\nStata files.\n\n\nHDF5 files (large datasets, scientific, legal, etc.).\n\n\nFeather.\n\n\nJulia.\n\n\nPickled files (binary).\n\n\n\n\nimport os\n\nwd = os.getcwd()\nos.listdir(wd)\n\n\n\n\n['.ipynb_checkpoints',\n 'a_movie.json',\n 'cars.csv',\n 'count.svg',\n 'CYratioCyt.png',\n 'CYratioCyt.svg',\n 'digits.csv',\n 'digits2.csv',\n 'digits_header.txt',\n 'disa10.png',\n 'disa10.svg',\n 'economic.csv',\n 'economic2.xls',\n 'Importing Data into Python 3.ipynb',\n 'importing_python_ch1_pdf_slides.pdf',\n 'importing_python_ch2_pdf_slides.pdf',\n 'importing_python_ch3_pdf_slides.pdf',\n 'importing_python_ch4_pdf_slides.pdf',\n 'importing_python_ch5_pdf_slides.pdf',\n 'intermediate_python_ch1_slides.pdf',\n 'intermediate_python_ch2_slides.pdf',\n 'intermediate_python_ch3_slides.pdf',\n 'intermediate_python_ch4_slides.pdf',\n 'intermediate_python_ch5_slides.pdf',\n 'intro_python_ch1_slides.pdf',\n 'intro_python_ch2_slides.pdf',\n 'intro_python_ch3_slides.pdf',\n 'intro_python_ch4_slides.pdf',\n 'moby_dick.txt',\n 'new1.py',\n 'p.png',\n 'PRIO_bd3.0.xls',\n 'Python 3.ipynb',\n 'Python3.py',\n 'sales.sas7bdat',\n 'save.p',\n 'seaslug.txt',\n 'seaslug2.txt',\n 'strain.png',\n 'strain.svg',\n 'Thumbs.db',\n 'titanic.csv',\n 'titanic_corrupt.csv',\n 'tweets_figure.png',\n 'tweets_figure.svg',\n 'winequality-red.csv']\n\n\n\nPickled files\n\n\n\n\nThere are a number of datatypes that cannot be saved easily to flat files, such as lists and dictionaries. \n\n\nIf you want your files to be human readable, you may want to save them as text files in a clever manner (JSONs, which you will see in a later chapter, are appropriate for Python dictionaries).\n\n\nIf, however, you merely want to be able to import them into Python, you can serialize them. \n\n\nAll this means is converting the object into a sequence of bytes, or bytestream.\n\n\nImport it.\n\n\n\n\nimport pickle\n\n# Save a dictionary into a pickle file.\nfav = {'Airline' : '8', 'Aug' : '85', 'June' : '69.4', 'Mar' : '84.4'}\npickle.dump(fav, open(\"save.p\", \"wb\"))\n\n# save.p\n\n# Open pickle file and load data: d\n\nwith open('save.p', 'rb') as file:\n    d = pickle.load(file)\n\n# Print d\nprint(d)\n\n# Print datatype of d\nprint(type(d))\n\n\n\n\n{'Aug': '85', 'Airline': '8', 'Mar': '84.4', 'June': '69.4'}\n<class 'dict'>\n\n\n\nExcel files\n\n\nfile = 'PRIO_bd3.0.xls'\n\n# Load spreadsheet: xl\nxl = pd.ExcelFile(file)\n\n# Print sheet names\nprint(xl.sheet_names)\n\n\n\n\n['bdonly']\n\n\n\n\n\nParse the sheets. \n\n\nBy name or by number (first, second, \u2026).\n\n\n\n\ndf1 = xl.parse('bdonly')\n\n\n\n\ndf2 = xl.parse(0)\n\n\n\n\n\n\nOptions: parse the first sheet by index, skip the first row of data, then name the columns \u2018Country\u2019 and \u2018AAM due to War (2002)\u2019\n\n\n\n\ndf2 = xl.parse(0, parse_cols = [0], skiprows = [0], names = ['Country', 'AAM due to War (2002)'])\n\n\n\n\n\n\nOptions: parse the second sheet, parse only the first column, skip the first row and rename the column \u2018Country\u2019.\n\n\n\n\ndf2 = xl.parse(1, parse_cols = [0], skiprows = [0], names = ['Country'])\n\n\n\n\n\n\nPrint the head of the DataFrame.\n\n\n\n\nprint(df1.head())\n\n\n\n\n   id  year  bdeadlow  bdeadhig  bdeadbes  annualdata  source  bdversion  \\\n0   1  1946      1000      9999      1000           2       1          3   \n1   1  1952       450      3000      -999           2       1          3   \n2   1  1967        25       999        82           2       1          3   \n3   2  1946        25       999      -999           0       0          3   \n4   2  1947        25       999      -999           0       0          3\n\n   location    sidea   ...    epend  ependdate ependprec  gwnoa gwnoa2nd  \\\n0   Bolivia  Bolivia   ...        1 1946-07-21     -99.0    145      NaN   \n1   Bolivia  Bolivia   ...        1 1952-04-12     -99.0    145      NaN   \n2   Bolivia  Bolivia   ...        1 1967-10-16     -99.0    145      NaN   \n3  Cambodia   France   ...        0        NaT       NaN    220      NaN   \n4  Cambodia   France   ...        0        NaT       NaN    220      NaN\n\n   gwnob  gwnob2nd  gwnoloc region  version  \n0    NaN       NaN      145      5   2009-4  \n1    NaN       NaN      145      5   2009-4  \n2    NaN       NaN      145      5   2009-4  \n3    NaN       NaN      811      3   2009-4  \n4    NaN       NaN      811      3   2009-4\n\n[5 rows x 32 columns]\n\n\n\n\n\nWe process images since we cheat a little. \n\n\nMany packages are not installed. \n\n\nWe are not be able to import some data. \n\n\nImages will then present the final results.\n\n\n\n\nfrom IPython.display import Image\n# for the following pictures...\n\n\n\n\nSAS files\n\n\n\n\nAdvanced analytics\n\n\nMultivariate analysis\n\n\nBusiness intelligence\n\n\nData management\n\n\nPredictive analytics\n\n\nStandard for computational analysis\n\n\nCode (instead of importing the package):\n\n\n\n\n# Import sas7bdat package\nfrom sas7bdat import SAS7BDAT\n\n# Save file to a DataFrame: df_sas\nwith SAS7BDAT('sales.sas7bdat') as file:\n    df_sas = file.to_data_frame()\n\n# Print head of DataFrame\nprint(df_sas.head())\n\n# Plot histogram of DataFrame features\npd.DataFrame.hist(df_sas[['P']])\nplt.ylabel('count')\n\nplt.show()\n\n\n\n\n\n\nThe data are adapted from the website of the undergraduate text book Principles of Economics by Hill, Griffiths and Lim (http://www.principlesofeconometrics.com/sas/).\n\n\nThe chart would be:\n\n\n\n\nImage('p.png')\n\n\n\n\n\n\nStata files\n\n\n\n\nThe data consist of disease extent for several diseases in various countries (more information can be found at http://www.cid.harvard.edu/ciddata/geog/readme_disarea.html).\n\n\n\n\n# Import pandas\nimport pandas as pd\n\n# Load Stata file into a pandas DataFrame: df\ndf = pd.read_stata('disarea.dta')\n\n# Print the head of the DataFrame df\nprint(df.head())\n\n\n\n\n  wbcode               country  disa1  disa2  disa3  disa4  disa5  disa6  \\\n0    AFG           Afghanistan   0.00   0.00   0.76   0.73    0.0   0.00   \n1    AGO                Angola   0.32   0.02   0.56   0.00    0.0   0.00   \n2    ALB               Albania   0.00   0.00   0.02   0.00    0.0   0.00   \n3    ARE  United Arab Emirates   0.00   0.00   0.00   0.00    0.0   0.00   \n4    ARG             Argentina   0.00   0.24   0.24   0.00    0.0   0.23\n\n   disa7  disa8   ...    disa16  disa17  disa18  disa19  disa20  disa21  \\\n0   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n1   0.56    0.0   ...       0.0     0.4     0.0    0.61    0.00     0.0   \n2   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n3   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n4   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.05     0.0\n\n   disa22  disa23  disa24  disa25  \n0    0.00    0.02    0.00    0.00  \n1    0.99    0.98    0.61    0.00  \n2    0.00    0.00    0.00    0.16  \n3    0.00    0.00    0.00    0.00  \n4    0.00    0.01    0.00    0.11\n\n[5 rows x 27 columns]\n\n\n\n\n\nPlot histogram of one column of the DataFrame.\n\n\n\n\npd.DataFrame.hist(df[['disa10']])\nplt.xlabel('Extent of disease')\nplt.ylabel('Number of coutries')\n\nplt.show()\n\n\n\n\n\n\nHDF5 files\n\n\n\n\nStandard for storing large quantities of numerical data.\n\n\nDatasets can be hundreds of gigabytes or terabytes.\n\n\nHDF5 can scale to exabytes.\n\n\nCode (instead of importing the package):\n\n\n\n\n# Import packages\nimport numpy as np\nimport h5py\n\n# Assign filename: file\nfile = 'LIGO_data.hdf5' \n\n# Load file: data\ndata = h5py.File(file, 'r')\n\n# Print the datatype of the loaded file\nprint(type(data))\n\n# Print the keys of the file\nfor key in data.keys():\n    print(key)\n\n# Get the HDF5 group: group\ngroup = data['strain']\n\n# Check out keys of group\nfor key in group.keys():\n    print(key)\n\n# Set variable equal to time series data: strain\nstrain = data['strain']['Strain'].value\n\n# Set number of time points to sample: num_samples\nnum_samples = 10000\n\n# Set time vector\ntime = np.arange(0, 1, 1/num_samples)\n\n# Plot data\nplt.plot(time, strain[:num_samples])\nplt.xlabel('GPS Time (s)')\nplt.ylabel('strain')\nplt.show()\n\n\n\n\n\n\nYou can find the LIGO data plus loads of documentation and tutorials (https://losc.ligo.org/events/GW150914/) and (https://losc.ligo.org/s/events/GW150914/GW150914_tutorial.html) is a great tutorial on Signal Processing with the data.\n\n\n\n\nImage('strain.png')\n\n\n\n\n\n\nMATLAB\n\n\n\n\n\u201cMatrix Laboratory\u201d.\n\n\nIndustry standard in engineering and science.\n\n\nCode (instead of importing the package):\n\n\n\n\n# Import package\nimport scipy.io\n\n# Load MATLAB file: mat\nmat = scipy.io.loadmat('albeck_gene_expression.mat')\n\n# Print the datatype type of mat\nprint(type(mat))\n\n# Print the keys of the MATLAB dictionary\nprint(mat.keys())\n\n# Print the type of the value corresponding to the key 'CYratioCyt'\nprint(type(mat['CYratioCyt']))\n\n# Print the shape of the value corresponding to the key 'CYratioCyt'\nprint(np.shape(mat['CYratioCyt']))\n\n# Subset the array and plot it\ndata = mat['CYratioCyt'][25, 5:]\nfig = plt.figure()\nplt.plot(data)\nplt.xlabel('time (min.)')\nplt.ylabel('normalized fluorescence (measure of expression)')\nplt.show()\n\n\n\n\n\n\nThis file contains gene expression data from the Albeck Lab at UC Davis (https://www.mcb.ucdavis.edu/faculty-labs/albeck/workshop.htm). You can find the data and some great documentation.\n\n\n\n\nImage('CYratioCyt.png')\n\n\n\n\n\n\n3, Working with Relational Databases\n\u00b6\n\n\nRelational Database Management System\n\n\n\n\nPostgreSQL.\n\n\nMySQL.\n\n\nSQLite.\n\n\nCode (instead of importing the package):\n\n\n\n\n# Import necessary module\nfrom sqlalchemy import create_engine\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n\n\n\n'sqlite:///Northwind.sqlite'\n is called the connection string to the SQLite database.\n\n\n\n\nThe Chinook database (http://chinookdatabase.codeplex.com/) contains information about a semi-fictional digital media store in which media data is real and customer, employee and sales data has been manually created.\n\n\nCode (instead of importing the package):\n\n\n\n\n# Save the table names to a list: table_names\ntable_names = engine.table_names()\n\n# Print the table names to the shell\nprint(table_names)\n\n\n\n\nQuery the DB\n\n\n\n\nThe final \n;\n is facultative.\n\n\nCode (instead of importing the package):\n\n\n\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine connection: con\ncon = engine.connect()\n\n# Perform query: rs\nrs = con.execute('SELECT * FROM Album')\n\n# Save results of the query to DataFrame: df\ndf = pd.DataFrame(rs.fetchall())\n\n# Close connection\ncon.close()\n\n# Print head of DataFrame df\nprint(df.head())\n\n\n\n\nCustomize queries\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite') # becomes facultative with many queries\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute('SELECT LastName, Title FROM Employee')\n    df = pd.DataFrame(rs.fetchmany(size = 3))\n    df.columns = rs.keys() # set the DataFrame's column names to the corresponding names of the table columns\n\n# Print the length of the DataFrame df\nprint(len(df))\n\n# Print the head of the DataFrame df\nprint(df.head())\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite') # becomes facultative with many queries\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute(\"SELECT * FROM Employee WHERE EmployeeId >= 6\")\n    df = pd.DataFrame(rs.fetchall())\n    df.columns = rs.keys()\n\n# Print the head of the DataFrame df\nprint(df.head())\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine in context manager\nwith engine.connect() as con:\n    rs = con.execute('SELECT * FROM Employee ORDER BY BirthDate')\n    df = pd.DataFrame(rs.fetchall())\n\n    # Set the DataFrame's column names\n    df.columns = rs.keys()\n\n# Print head of DataFrame\nprint(df.head())\n\n\n\n\nQuery the DB the Pandas way\n\n\n\n\nSimpler code (instead of importing the package)!!!\n\n\n\n\n# Import packages\nfrom sqlalchemy import create_engine\nimport pandas as pd\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Execute query and store records in DataFrame: df\ndf = pd.read_sql_query(\"SELECT * FROM Album\", engine)\n\n# Print head of DataFrame\nprint(df.head())\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df1\nwith engine.connect() as con:\n    rs = con.execute(\"SELECT * FROM Album\")\n    df1 = pd.DataFrame(rs.fetchall())\n    df1.columns = rs.keys()\n\n# Confirm that both methods yield the same result: does df = df1 ?   \nprint(df.equals(df1))\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n# Import packages\nfrom sqlalchemy import create_engine\nimport pandas as pd\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Execute query and store records in DataFrame: df\ndf = pd.read_sql_query(\"SELECT * FROM Employee WHERE EmployeeId >= 6 ORDER BY BirthDate\", engine)\n\n# Print head of DataFrame\nprint(df.head())\n\n\n\n\nINNER JOIN\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute(\"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\")\n    df = pd.DataFrame(rs.fetchall())\n    df.columns = rs.keys()\n\n# Print head of DataFrame df\nprint(df.head())\n\n\n\n\n\n\nAlternative code:\n\n\n\n\ndf = pd.read_sql_query(\"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\", engine)\n\n# Print head of DataFrame df\nprint(df.head())\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n# Execute query and store records in DataFrame: df\ndf = pd.read_sql_query(\"SELECT * FROM PlaylistTrack INNER JOIN Track on PlaylistTrack.TrackId = Track.TrackId WHERE Milliseconds < 250000\", engine)\n\n# Print head of DataFrame\nprint(df.head())\n\n\n\n\n4, Importing Flat Files from the Web (Web Scraping)\n\u00b6\n\n\n scrape, wrangle, munge, wrangling, munging\n \n\n\n\n\nImport and locally save datasets from the web.\n\n\nLoad datasets into pandas DataFrames.\n\n\nMake HTTP requests (GET requests).\n\n\nScrape web data such as HTML.\n\n\nParse HTML into useful data (BeautifulSoup).\n\n\nUse the urllib and requests packages.\n\n\n\n\nUsing the \nurllib\n package on csv files\n\n\n\n\nImport the package.\n\n\n\n\nfrom urllib.request import urlretrieve\n\n# import pandas as pd\n\n# Assign url of file: url\nurl = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\n# Save file locally\nurlretrieve(url, 'winequality-red.csv')\n\n# Read file into a DataFrame and print its head\ndf = pd.read_csv('winequality-red.csv', sep=';')\nprint(df.head())\n\n\n\n\n   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5\n\n\n\n# import matplotlib.pyplot as plt\n# import pandas as pd\n\n# Assign url of file: url\nurl = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\n# Read file into a DataFrame: df\ndf = pd.read_csv(url, sep = ';')\n\n# Print the head of the DataFrame\nprint(df.head())\n\n# Plot first column of df\npd.DataFrame.hist(df.ix[:, 0:1])\nplt.xlabel('fixed acidity (g(tartaric acid)/dm$^3$)')\nplt.ylabel('count')\nplt.show()\n\n\n\n\n   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5\n\n\n\n\n\nUsing the \nurllib\n package on Excel files\n\n\n# import pandas as pd\n\n# Assign url of file: url\nurl = 'http://s3.amazonaws.com/assets.datacamp.com/course/importing_data_into_r/latitude.xls'\n\n# Read in all sheets of Excel file: xl\nxl = pd.read_excel(url, sheetname = None)\n\n# Print the sheetnames (keys) to the shell !!!\nprint(xl.keys())\n\n# Print the head of the first sheet (using its name, NOT its index)\nprint(xl['1700'].head())\n\n\n\n\ndict_keys(['1700', '1900'])\n                 country       1700\n0            Afghanistan  34.565000\n1  Akrotiri and Dhekelia  34.616667\n2                Albania  41.312000\n3                Algeria  36.720000\n4         American Samoa -14.307000\n\n\n\nHTTP requests to import files from the web\n\n\n\n\nrequests\n is one of the most downloaded Python packages.\n\n\nrequests\n works with \nurllib\n.\n\n\nImport the package.\n\n\n\n\nfrom urllib.request import urlopen, Request\n\n# Specify the url\nurl = \"http://www.datacamp.com/teach/documentation\"\n\n# This packages the request: request\nrequest = Request(url)\n\n# Send the request and catches the response: response\nresponse = urlopen(request)\n\n# Print the datatype of response\nprint(type(response))\n\n# Be polite and close the response!\nresponse.close()\n\n\n\n\n<class 'http.client.HTTPResponse'>\n\n\n\nfrom urllib.request import urlopen, Request\n\nurl = \"http://docs.datacamp.com/teach/\"\n\nrequest = Request(url)\n\nresponse = urlopen(request)\n\n\n# Extract the response: html\nhtml = response.read()\n\n# Print the html\nprint(html)\n\n# Be polite and close the response!\nresponse.close()\n\n\n\n\nb'<!DOCTYPE html>\\n<link rel=\"shortcut icon\" href=\"images/favicon.ico\" />\\n<html>\\n\\n  <head>\\n  <meta charset=\"utf-8\">\\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\n  <title>Home</title>\\n  <meta name=\"description\" content=\"All Documentation on Course Creation\">\\n\\n  <link rel=\"stylesheet\" href=\"/teach/css/main.css\">\\n  <link rel=\"canonical\" href=\"/teach/\">\\n  <link rel=\"alternate\" type=\"application/rss+xml\" title=\"DataCamp Teach Documentation\" href=\"/teach/feed.xml\" />\\n</head>\\n\\n\\n  <body>\\n\\n    <header class=\"site-header\">\\n\\n  <div class=\"wrapper\">\\n\\n    <a class=\"site-title\" href=\"/teach/\">DataCamp Teach Documentation</a>\\n\\n  </div>\\n\\n</header>\\n\\n\\n    <div class=\"page-content\">\\n      <div class=\"wrapper\">\\n        <p>The Teach Documentation has been moved to <a href=\"https://www.datacamp.com/teach/documentation\">https://www.datacamp.com/teach/documentation</a>!</p>\\n\\n<!-- Everybody can teach on DataCamp. The resources on this website explain all the steps to build your own course on DataCamp\\'s interactive data science platform.\\n\\nInterested in partnering with DataCamp? Head over to the [Course Material](/teach/course-material.html) page to get an idea of the requirements to build your own interactive course together with DataCamp!\\n\\n## Table of Contents\\n\\n- [Course Material](/teach/course-material.html) - Content required to build a DataCamp course.\\n- [Video Lectures](/teach/video-lectures.html) - Details on video recording and editing.\\n- [DataCamp Teach](https://www.datacamp.com/teach) - Use the DataCamp Teach website to create DataCamp courses (preferred).\\n- [datacamp R Package](https://github.com/datacamp/datacamp/wiki) - Use R Package to create DataCamp courses (legacy).\\n- [Code DataCamp Exercises](/teach/code-datacamp-exercises.html)\\n- [SCT Design (R)](https://github.com/datacamp/testwhat/wiki)\\n- [SCT Design (Python)](https://github.com/datacamp/pythonwhat/wiki)\\n- [Style Guide](/teach/style-guide.html) -->\\n\\n\\n      </div>\\n    </div>\\n\\n    \\n\\n  </body>\\n\\n</html>\\n'\n\n\n\nUsing \nrequests\n\n\nimport requests\n\nurl = \"http://docs.datacamp.com/teach/\"\n\nr = requests.get(url)\n\ntext = r.text\n\n# Print part of the html (split the paragraphs) instead of all with  print(text)\nhead = text.split('\\n\\n')\n\nprint(head[0])\nprint('')\nprint(head[1])\nprint('')\nprint(head[2])\nprint('')\nprint(head[3])\n\n\n\n\n<!DOCTYPE html>\n<link rel=\"shortcut icon\" href=\"images/favicon.ico\" />\n<html>\n\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n  <title>Home</title>\n  <meta name=\"description\" content=\"All Documentation on Course Creation\">\n\n  <link rel=\"stylesheet\" href=\"/teach/css/main.css\">\n  <link rel=\"canonical\" href=\"/teach/\">\n  <link rel=\"alternate\" type=\"application/rss+xml\" title=\"DataCamp Teach Documentation\" href=\"/teach/feed.xml\" />\n</head>\n\n\n\nScraping the web\n\n\n scrape, wrangle, munge\n\n\n\n\nScrape unstructured data.\n\n\nScrape structured data, parse it and extract the data from HTML using the \nBeautifulSoup\n package.\n\n\nImport the packages.\n\n\n\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n# Create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Prettify the BeautifulSoup object: pretty_soup\npretty_soup = soup.prettify()\n\n# Print the response\nprint(type(pretty_soup))\n\n# Print part of the html (split the text), not all with  print(pretty_soup)\nhead = pretty_soup.split('</h3>')\n\nprint(head[0])\n\n\n\n\n<class 'str'>\n<html>\n <head>\n  <title>\n   Guido's Personal Home Page\n  </title>\n </head>\n <body bgcolor=\"#FFFFFF\" text=\"#000000\">\n  <h1>\n   <a href=\"pics.html\">\n    <img border=\"0\" src=\"images/IMG_2192.jpg\"/>\n   </a>\n   Guido van Rossum - Personal Home Page\n  </h1>\n  <p>\n   <a href=\"http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\">\n    <i>\n     \"Gawky and proud of it.\"\n    </i>\n   </a>\n  </p>\n  <h3>\n   <a href=\"http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\">\n    Who\nI Am\n   </a>\n\n\n\n\n\nOther operations with \nBeautifulSoup\n.\n\n\n\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n\n# Create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Get the title of Guido's webpage: guido_title\nguido_title = soup.title # attribute\n\n# Print the title of Guido's webpage to the shell\nprint(guido_title)\n\n# Get Guido's text: guido_text\nguido_text = soup.get_text() # method\n\n# Print Guido's text to the shell\nprint(guido_text)\n\n\n\n\n<title>Guido's Personal Home Page</title>\n\nGuido's Personal Home Page\n\nGuido van Rossum - Personal Home Page\n\"Gawky and proud of it.\"\nWho\nI Am\nI am the author of the Python\nprogramming language.  See also my resume\nand my publications list, a brief bio, assorted writings, presentations and interviews (all about Python), some\npictures of me,\nmy new blog, and\nmy old\nblog on Artima.com.  I am\n@gvanrossum on Twitter.  I\nalso have\na G+\nprofile.\n\nIn January 2013 I joined\nDropbox.  I work on various Dropbox\nproducts and have 50% for my Python work, no strings attached.\nPreviously, I have worked for Google, Elemental Security, Zope\nCorporation, BeOpen.com, CNRI, CWI, and SARA.  (See\nmy resume.)  I created Python while at CWI.\n\nHow to Reach Me\nYou can send email for me to guido (at) python.org.\nI read everything sent there, but if you ask\nme a question about using Python, it's likely that I won't have time\nto answer it, and will instead refer you to\nhelp (at) python.org,\ncomp.lang.python or\nStackOverflow.  If you need to\ntalk to me on the phone or send me something by snail mail, send me an\nemail and I'll gladly email you instructions on how to reach me.\n\nMy Name\nMy name often poses difficulties for Americans.\n\nPronunciation: in Dutch, the \"G\" in Guido is a hard G,\npronounced roughly like the \"ch\" in Scottish \"loch\".  (Listen to the\nsound clip.)  However, if you're\nAmerican, you may also pronounce it as the Italian \"Guido\".  I'm not\ntoo worried about the associations with mob assassins that some people\nhave. :-)\n\nSpelling: my last name is two words, and I'd like keep it\nthat way, the spelling on some of my credit cards notwithstanding.\nDutch spelling rules dictate that when used in combination with my\nfirst name, \"van\" is not capitalized: \"Guido van Rossum\".  But when my\nlast name is used alone to refer to me, it is capitalized, for\nexample: \"As usual, Van Rossum was right.\"\n\nAlphabetization: in America, I show up in the alphabet under\n\"V\".  But in Europe, I show up under \"R\".  And some of my friends put\nme under \"G\" in their address book...\n\nMore Hyperlinks\n\nHere's a collection of essays relating to Python\nthat I've written, including the foreword I wrote for Mark Lutz' book\n\"Programming Python\".\nI own the official \nPython license.\n\nThe Audio File Formats FAQ\nI was the original creator and maintainer of the Audio File Formats\nFAQ.  It is now maintained by Chris Bagwell\nat http://www.cnpbagwell.com/audio-faq.  And here is a link to\nSOX, to which I contributed\nsome early code.\n\n\"On the Internet, nobody knows you're\na dog.\"\n\n\n\n\n\nMore.\n\n\n\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n# create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Print the title of Guido's webpage\nprint(soup.title)\n\n# Find all 'a' tags (which define hyperlinks): a_tags\na_tags = soup.find_all('a') # for <a>, hyperlinks\n\n# Print the URLs to the shell\nfor link in a_tags:\n    print( link.get('href'))\n\n\n\n\n<title>Guido's Personal Home Page</title>\npics.html\nhttp://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\nhttp://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\nhttp://www.python.org\nResume.html\nPublications.html\nbio.html\nhttp://legacy.python.org/doc/essays/\nhttp://legacy.python.org/doc/essays/ppt/\ninterviews.html\npics.html\nhttp://neopythonic.blogspot.com\nhttp://www.artima.com/weblogs/index.jsp?blogger=12088\nhttps://twitter.com/gvanrossum\nhttps://plus.google.com/u/0/115212051037621986145/posts\nhttp://www.dropbox.com\nResume.html\nhttp://groups.google.com/groups?q=comp.lang.python\nhttp://stackoverflow.com\nguido.au\nhttp://legacy.python.org/doc/essays/\nimages/license.jpg\nhttp://www.cnpbagwell.com/audio-faq\nhttp://sox.sourceforge.net/\nimages/internetdog.gif\n\n\n\n5, Introduction to APIs and JSONs\n\u00b6\n\n\n\n\nAPI or Application Programming Interface are protocols and routines providing access to websites and web apps like OMDb, Wikipedia, Uber, Uber Developers, BGG, ImDB, Facebook, Instagram, and Twitter.\n\n\nMost of data coming from APIS are JSON files.\n\n\n\n\nImport the \njson\n package\n\n\nimport json\n\n# Load JSON: json_data\nwith open('a_movie.json', 'r') as json_file:\n    json_data = json.load(json_file)\n\nprint(type(json_data))\nprint(json_data['Title'])\nprint(json_data['Year'])\nprint('')\n\n# Print each key-value pair in json_data\nfor k in json_data.keys():\n    print(k + ': ', json_data[k])\n\n\n\n\n<class 'dict'>\nThe Social Network\n2010\n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nAwards:  Won 3 Oscars. Another 161 wins & 162 nominations.\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nTitle:  The Social Network\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nDirector:  David Fincher\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)\n\n\n\nThe \nrequests\n package again\n\n\n\n\nPull some movie data down from the Open Movie Database (OMDB) using their API.\n\n\nPull it as text.\n\n\n\n\nimport requests\n\nurl = 'http://www.omdbapi.com/?t=social+network'\n\nr = requests.get(url)\n\nprint(type(r))\nprint('')\n\n# Print the text of the response\nprint(r.text)\n\n\n\n\n<class 'requests.models.Response'>\n\n{\"Title\":\"The Social Network\",\"Year\":\"2010\",\"Rated\":\"PG-13\",\"Released\":\"01 Oct 2010\",\"Runtime\":\"120 min\",\"Genre\":\"Biography, Drama\",\"Director\":\"David Fincher\",\"Writer\":\"Aaron Sorkin (screenplay), Ben Mezrich (book)\",\"Actors\":\"Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\",\"Plot\":\"Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\",\"Language\":\"English, French\",\"Country\":\"USA\",\"Awards\":\"Won 3 Oscars. Another 161 wins & 162 nominations.\",\"Poster\":\"http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\",\"Metascore\":\"95\",\"imdbRating\":\"7.7\",\"imdbVotes\":\"478,258\",\"imdbID\":\"tt1285016\",\"Type\":\"movie\",\"Response\":\"True\"}\n\n\n\n\n\nPull it as JSON or a dictionary.\n\n\n\n\nimport requests\n\nurl = 'http://www.omdbapi.com/?t=social+network'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\nprint(type(json_data))\nprint('')\n\n# Print each key-value pair in json_data\nfor k in json_data.keys():\n    print(k + ': ', json_data[k])\n\n\n\n\n<class 'dict'>\n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nAwards:  Won 3 Oscars. Another 161 wins & 162 nominations.\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nDirector:  David Fincher\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nTitle:  The Social Network\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)\n\n\n\n\n\nSearch the Library of Congress.\n\n\nPull a dictionary of dictionaries.\n\n\n\n\nimport requests\n\nurl = 'http://chroniclingamerica.loc.gov/search/titles/results/?terms=new%20york&format=json'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\n# Select the first element in the list json_data['items']: nyc_loc\n# dict of dict\nnyc_loc = json_data['items'][0]\n\n# Print each key-value pair in nyc_loc\nfor k in nyc_loc.keys():\n    print(k + ': ', nyc_loc[k])\n\n\n\n\ncounty:  ['New York']\nplace_of_publication:  New York\noclc:  12928956\nsubject:  ['New York (N.Y.)--Newspapers.', 'New York (State)--New York.--fast--(OCoLC)fst01204333']\nalt_title:  []\ntitle:  The New York thrice-a-week world.\ntype:  title\nedition:  New York and Pennsylvania ed.\nid:  /lccn/sn85047837/\nnote:  ['Democrat.', 'Description based on: Vol. 36, no. 3,670 (Oct. 4, 1895).', 'The words \"New York thrice-a-week\" appear in title ornament.']\nplace:  ['New York--New York--New York']\nessay:  []\nstart_year:  1890\nend_year:  1999\npublisher:  Press Pub. Co.\nlccn:  sn85047837\nholding_type:  ['Unspecified']\nstate:  ['New York']\ncity:  ['New York']\nlanguage:  ['English']\ncountry:  New York\ntitle_normal:  new york thrice-a-week world.\nurl:  http://chroniclingamerica.loc.gov/lccn/sn85047837.json\nfrequency:  Three times a week\n\n\n\n\n\nThe Wikipedia API.\n\n\nDocumentation: https://www.mediawiki.org/wiki/API:Main_page\n\n\nDictionary of dictionary of dictionary.\n\n\n\n\nimport requests\n\nurl = 'https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles=pizza'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\n# Print the Wikipedia page extract\npizza_extract = json_data['query']['pages']['24768']['extract']\nprint(pizza_extract)\n\n\n\n\n<p><b>Pizza</b> is a flatbread generally topped with tomato sauce and cheese and baked in an oven. It is commonly topped with a selection of meats, vegetables and condiments. The term was first recorded in the 10th century, in a Latin manuscript from Gaeta in Central Italy. The modern pizza was invented in Naples, Italy, and the dish and its variants have since become popular in many areas of the world.</p>\n<p>In 2009, upon Italy's request, Neapolitan pizza was safeguarded in the European Union as a Traditional Speciality Guaranteed dish. The Associazione Verace Pizza Napoletana (the True Neapolitan Pizza Association) is a non-profit organization founded in 1984 with headquarters in Naples. It promotes and protects the \"true Neapolitan pizza\".</p>\n<p>Pizza is sold fresh or frozen, either whole or in portions, and is a common fast food item in Europe and North America. Various types of ovens are used to cook them and many varieties exist. Several similar dishes are prepared from ingredients commonly used in pizza preparation, such as calzone and stromboli.</p>\n<p></p>\n\n\n\nThe Twitter API and Authentification\n\n\n\n\nTwitter has many APIs: the main API, the REST API, Streaming APIs (private, public), Firehouse (expensive), etc.\n\n\nField Guide: https://dev.twitter.com/overview/api/tweets\n\n\nConsult the documentation to set an authentification key (available online).\n\n\n\n\ntweepy\n package\n\n\n\n\nThe authentication looks like the following:\n\n\nCode:\n\n\n\n\n# Import package\nimport tweepy, json\n\n# Store OAuth authentication credentials in relevant variables\naccess_token = \"1092294848-aHN7DcRP9B4VMTQIhwqOYiB14YkW92fFO8k8EPy\"\naccess_token_secret = \"X4dHmhPfaksHcQ7SCbmZa2oYBBVSD2g8uIHXsp5CTaksx\"\nconsumer_key = \"nZ6EA0FxZ293SxGNg8g8aP0HM\"\nconsumer_secret = \"fJGEodwe3KiKUnsYJC3VRndj7jevVvXbK2D5EiJ2nehafRgA6i\"\n\n# Pass OAuth details to tweepy's OAuth handler\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n\n\n\nStart streaming tweets\n\n\n\n\nCode:\n\n\n\n\n# Initialize Stream listener\nl = MyStreamListener()\n\n# Create you Stream object with authentication\nstream = tweepy.Stream(auth, l)\n\n\n# Filter Twitter Streams to capture data by the keywords:\nstream.filter(track = ['clinton', 'trump', 'sanders', 'cruz'])\n\n\n\n\n\n\nCode of \nMyStreamListener()\n:\n\n\nCreates a file called tweets.txt, collects streaming tweets as .jsons and writes them to the file tweets.txt; once 100 tweets have been streamed, the listener closes the file and stops listening. \n\n\n\n\nclass MyStreamListener(tweepy.StreamListener):\n\n\n    def __init__(self, api=None):\n\n        super(MyStreamListener, self).__init__()\n        self.num_tweets = 0\n        self.file = open(\"tweets.txt\", \"w\")\n\n    def on_status(self, status):\n\n        tweet = status._json\n        self.file.write( json.dumps(tweet) + '\\n' )\n        tweet_list.append(status)\n        self.num_tweets += 1\n        if self.num_tweets < 100:\n            return True\n        else:\n            return False\n        self.file.close()\n\n    def on_error(self, status):\n        print(status)\n\n\n\n\nLoad and explore your Twitter data\n\n\n\n\nCode:\n\n\n\n\n# Import package\nimport json\n\n# String of path to file: tweets_data_path\ntweets_data_path = 'tweets.txt'\n\n# Initialize empty list to store tweets: tweets_data\ntweets_data = []\n\n# Open connection to file\ntweets_file = open(tweets_data_path, \"r\")\n\n# Read in tweets and store in list: tweets_data\nfor line in tweets_file:\n    tweet = json.loads(line)\n    tweets_data.append(tweet)\n\n# Close connection to file\ntweets_file.close()\n\n# Print the keys of the first tweet dict\nprint(tweets_data[0].keys())\n\n\n\n\nSend the Twitter data to DataFrame\n\n\n\n\nTwitter data in a list of dictionaries \ntweets_data\n, where each dictionary corresponds to a single tweet. \n\n\nThe text in a tweet \nt1\n is stored as the value \nt1['text']\n; similarly, the language is stored in \nt1['lang']\n. \n\n\nCode:\n\n\n\n\n# Import package\nimport pandas as pd\n\n# Build DataFrame of tweet texts and languages\ndf = pd.DataFrame(tweets_data, columns=['text', 'lang'])\n\n# Print head of DataFrame\nprint(df.head())\n\n\n\n\nAnalyze the tweets (NLP, regex)\n\n\n\n\nA little bit of Twitter text analysis and plotting. \n\n\nUse the statistical data visualization library seaborn: https://stanford.edu/%7Emwaskom/software/seaborn/\n\n\nCode:\n\n\n\n\n# Import the regular expressions library\nimport re\n\n# The function tells you whether the first argument (a word) occurs within the 2nd argument (a tweet)\ndef word_in_text(word, tweet):\n    word = word.lower()\n    text = tweet.lower()\n    match = re.search(word, tweet)\n\n    if match:\n        return True\n    return False\n\n# Initialize list to store tweet counts\n[clinton, trump, sanders, cruz] = [0, 0, 0, 0]\n\n# Iterate through df, counting the number of tweets in which\n# each candidate is mentioned\nfor index, row in df.iterrows():\n    clinton += word_in_text('clinton', row['text'])\n    trump += word_in_text('trump', row['text'])\n    sanders += word_in_text('sanders', row['text'])\n    cruz += word_in_text('cruz', row['text'])\n\n# Import packages\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set seaborn style\nsns.set(color_codes=True)\n\n# Create a list of labels:cd\ncd = ['clinton', 'trump', 'sanders', 'cruz']\n\n# Plot histogram\nax = sns.barplot(cd, [clinton, trump, sanders, cruz])\nax.set(ylabel=\"count\")\nplt.show()\n\n\n\n\nfrom IPython.display import Image\n# for the following pictures...\n\n\n\n\nImage('tweets_figure.png')",
            "title": "Importing Data into Python"
        },
        {
            "location": "/Importing Data into Python/#numpy",
            "text": "NumPy arrays are a standard for storing numerical data.  Arrays are essential to other packages such as the  scikit-learn , for machine learning.  Import  numpy  and  matplotlib  (or invoke them with the  %pylab  magic command).   import numpy as np\nimport matplotlib.pyplot as plt  # or...\n%pylab inline\n\n# no need for preceeding functions (methods) with np. or plt.  Populating the interactive namespace from numpy and matplotlib   Import a csv file and assign the content to an array.   file = 'digits.csv'\n\n# Load the file as an array called digits\ndigits = loadtxt(file, delimiter = ',')\n\n# Print the datatype of digits\nprint(type(digits))\n\nprint(digits)\n\n# Select a row\nim = digits[2, 2:]\nprint(im)  <class 'numpy.ndarray'>\n[[ 1.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 1.  0.  0.  0.  0.  0.]\n [ 2.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 5.  0.  0.  0.  0.  0.]]\n[ 0.  0.  0.  0.]   Import a txt file. The  delimiter  can be  '\\t' ,  ',' ,  ';' , etc.   Skip the first 90 rows.   file = 'digits_header.txt'\n\n# Load the data into array data\ndata = loadtxt(file, delimiter='  ', skiprows = 90)\n\n# Print data\nprint(data)  [[ 3.  0.]\n [ 6.  0.]\n [ 4.  0.]\n [ 6.  0.]\n [ 2.  0.]\n [ 9.  0.]\n [ 1.  0.]\n [ 2.  0.]\n [ 0.  0.]\n [ 5.  0.]]   Import a txt file, but only the last rows and first column.   data2 = loadtxt(file, delimiter='  ', skiprows = 90, usecols = [0])\n\n# Print data\nprint(data2)  [ 3.  6.  4.  6.  2.  9.  1.  2.  0.  5.]   Import a txt file as string.   file = 'seaslug.txt'\n\n# Import file: data\ndata = loadtxt(file, delimiter = ' ', dtype = str)\n\n# Print the first element of data\nprint(data[0])  ['b\"b\\'Time\\'\"' 'b\"b\\'Percent\\'\"']   Import a txt file as float numbers.   file = 'seaslug2.txt'\n\n# Import data as floats and skip the first row: data_float\ndata_float = loadtxt(file, delimiter='   ', dtype = float, skiprows = 1)\n\n# Print the 10th element of data_float\nprint(data_float[9])\n\n# Plot a scatterplot of the data\nscatter(data_float[:, 0], data_float[:, 1])\nxlabel('time (min.)')\nylabel('percentage of larvae')\n\nshow()  [ 0.     0.357]    Import a csv file. Format the data.   data = genfromtxt('titanic.csv', delimiter = ',', names = True, dtype = None)   # A structred array\nshape(data)  (891,)   Extract a row, a column.   # to get the ith row, merely execute data[i]\nprint(data[0:10])  [ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")\n (4, 1, 1, b\" b'female'\", 35.0, 1, 0, b\" b'113803'\", 53.1, b\" b'C123'\", b\" b'S'\")\n (5, 0, 3, b\" b'male'\", 35.0, 0, 0, b\" b'373450'\", 8.05, b\" b''\", b\" b'S'\")\n (6, 0, 3, b\" b'male'\", nan, 0, 0, b\" b'330877'\", 8.4583, b\" b''\", b\" b'Q'\")\n (7, 0, 1, b\" b'male'\", 54.0, 0, 0, b\" b'17463'\", 51.8625, b\" b'E46'\", b\" b'S'\")\n (8, 0, 3, b\" b'male'\", 2.0, 3, 1, b\" b'349909'\", 21.075, b\" b''\", b\" b'S'\")\n (9, 1, 3, b\" b'female'\", 27.0, 0, 2, b\" b'347742'\", 11.1333, b\" b''\", b\" b'S'\")\n (10, 1, 2, b\" b'female'\", 14.0, 1, 0, b\" b'237736'\", 30.0708, b\" b''\", b\" b'C'\")]  # to get the column with name 'Fare', execute data['Fare']\nprint(data['Fare'][0:10])  [  7.25    71.2833   7.925   53.1      8.05     8.4583  51.8625  21.075\n  11.1333  30.0708]   Import a csv file.   Format the data.   # default dtype is None\ndata2 = recfromcsv('titanic.csv', delimiter = ',', names = True, dtype = None)  # Print out first three entries\nprint(data2[:3])  [ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")]",
            "title": "Numpy"
        },
        {
            "location": "/Importing Data into Python/#pandas",
            "text": "Two-dimensional labeled data structure(s) or  data frame (DataFrame).  Pythonic analog of R\u2019s dataframes.  Columns can be of potentially different types.  Excellent object for:   Manipulate, slice, reshape, groupby, join, merge.  Perform statistics.  Work with time series data.  Exploratory data analysis.  Data wrangling.  Data preprocessing.  Building models.  Visualization.    There exists standards and best practices to use pandas.   # Import pandas\nimport pandas as pd   Pandas is not part of  %pylab .  Import a file.   file = 'titanic.csv'\n\n# Read the file into a DataFrame: df\ndf = pd.read_csv(file)\n\n# View the head of the DataFrame\nprint(df.head())     Passengerid   Survived   Pclass         Sex    Age   SibSp   Parch  \\\n0            1          0        3     b'male'   22.0       1       0   \n1            2          1        1   b'female'   38.0       1       0   \n2            3          1        3   b'female'   26.0       0       0   \n3            4          1        1   b'female'   35.0       1       0   \n4            5          0        3     b'male'   35.0       0       0\n\n                 Ticket     Fare     Cabin  Embarked  \n0          b'A/5 21171'   7.2500       b''      b'S'  \n1           b'PC 17599'  71.2833    b'C85'      b'C'  \n2   b'STON/O2. 3101282'   7.9250       b''      b'S'  \n3             b'113803'  53.1000   b'C123'      b'S'  \n4             b'373450'   8.0500       b''      b'S'   Import another file; no header and some rows.   file = 'digits2.csv'\n\n# Read the first 5 rows of the file into a DataFrame: data\ndata = pd.read_csv(file, nrows = 5, header = None)\n\n# Print the datatype of data\nprint(type(data))\n\n# Build a numpy array from the DataFrame: data_array\ndata_array = data.values\n\n# Print the datatype of data_array to the shell\nprint(type(data_array))  <class 'pandas.core.frame.DataFrame'>\n<class 'numpy.ndarray'>   Import another file; replace the missing data (NA).   file = 'titanic_corrupt.csv'\n\n# Assign filename: file\nfile = 'titanic_corrupt.csv'\n\n# Import file: data\ndata = pd.read_csv(file, sep = ';', comment = '#', na_values = ['Nothing'])\n\n# Print the head of the DataFrame\nprint(data.head())     PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch   \\\n0            1         0       3    male  22.0      1       0   \n1            2         1       1  female  38.0      1       0   \n2            3         1       3  female  26.0      0       0   \n3            4         1       1  female  35.0      1       0   \n4            5         0       3    male  35.0      0       0\n\n             Ticket   Fare Cabin Embarked  \n0         A/5 21171   7,25   NaN        S  \n1          PC 17599    NaN   NaN      NaN  \n2  STON/O2. 3101282  7,925   NaN        S  \n3            113803   53,1  C123        S  \n4            373450   8,05   NaN        S   Plot the  Age  variable in a histogram.   pd.DataFrame.hist(data[['Age']])\nplt.xlabel('Age (years)')\nplt.ylabel('count')\n\nplt.show()",
            "title": "Pandas"
        },
        {
            "location": "/Importing Data into Python/#2-importing-from-other-files",
            "text": "With Pandas\u2026 and a bit of Numpy.  Excel spreadsheets.  MATLAB files.  SAS files.  Stata files.  HDF5 files (large datasets, scientific, legal, etc.).  Feather.  Julia.  Pickled files (binary).   import os\n\nwd = os.getcwd()\nos.listdir(wd)  ['.ipynb_checkpoints',\n 'a_movie.json',\n 'cars.csv',\n 'count.svg',\n 'CYratioCyt.png',\n 'CYratioCyt.svg',\n 'digits.csv',\n 'digits2.csv',\n 'digits_header.txt',\n 'disa10.png',\n 'disa10.svg',\n 'economic.csv',\n 'economic2.xls',\n 'Importing Data into Python 3.ipynb',\n 'importing_python_ch1_pdf_slides.pdf',\n 'importing_python_ch2_pdf_slides.pdf',\n 'importing_python_ch3_pdf_slides.pdf',\n 'importing_python_ch4_pdf_slides.pdf',\n 'importing_python_ch5_pdf_slides.pdf',\n 'intermediate_python_ch1_slides.pdf',\n 'intermediate_python_ch2_slides.pdf',\n 'intermediate_python_ch3_slides.pdf',\n 'intermediate_python_ch4_slides.pdf',\n 'intermediate_python_ch5_slides.pdf',\n 'intro_python_ch1_slides.pdf',\n 'intro_python_ch2_slides.pdf',\n 'intro_python_ch3_slides.pdf',\n 'intro_python_ch4_slides.pdf',\n 'moby_dick.txt',\n 'new1.py',\n 'p.png',\n 'PRIO_bd3.0.xls',\n 'Python 3.ipynb',\n 'Python3.py',\n 'sales.sas7bdat',\n 'save.p',\n 'seaslug.txt',\n 'seaslug2.txt',\n 'strain.png',\n 'strain.svg',\n 'Thumbs.db',\n 'titanic.csv',\n 'titanic_corrupt.csv',\n 'tweets_figure.png',\n 'tweets_figure.svg',\n 'winequality-red.csv']  Pickled files   There are a number of datatypes that cannot be saved easily to flat files, such as lists and dictionaries.   If you want your files to be human readable, you may want to save them as text files in a clever manner (JSONs, which you will see in a later chapter, are appropriate for Python dictionaries).  If, however, you merely want to be able to import them into Python, you can serialize them.   All this means is converting the object into a sequence of bytes, or bytestream.  Import it.   import pickle\n\n# Save a dictionary into a pickle file.\nfav = {'Airline' : '8', 'Aug' : '85', 'June' : '69.4', 'Mar' : '84.4'}\npickle.dump(fav, open(\"save.p\", \"wb\"))\n\n# save.p\n\n# Open pickle file and load data: d\n\nwith open('save.p', 'rb') as file:\n    d = pickle.load(file)\n\n# Print d\nprint(d)\n\n# Print datatype of d\nprint(type(d))  {'Aug': '85', 'Airline': '8', 'Mar': '84.4', 'June': '69.4'}\n<class 'dict'>  Excel files  file = 'PRIO_bd3.0.xls'\n\n# Load spreadsheet: xl\nxl = pd.ExcelFile(file)\n\n# Print sheet names\nprint(xl.sheet_names)  ['bdonly']   Parse the sheets.   By name or by number (first, second, \u2026).   df1 = xl.parse('bdonly')  df2 = xl.parse(0)   Options: parse the first sheet by index, skip the first row of data, then name the columns \u2018Country\u2019 and \u2018AAM due to War (2002)\u2019   df2 = xl.parse(0, parse_cols = [0], skiprows = [0], names = ['Country', 'AAM due to War (2002)'])   Options: parse the second sheet, parse only the first column, skip the first row and rename the column \u2018Country\u2019.   df2 = xl.parse(1, parse_cols = [0], skiprows = [0], names = ['Country'])   Print the head of the DataFrame.   print(df1.head())     id  year  bdeadlow  bdeadhig  bdeadbes  annualdata  source  bdversion  \\\n0   1  1946      1000      9999      1000           2       1          3   \n1   1  1952       450      3000      -999           2       1          3   \n2   1  1967        25       999        82           2       1          3   \n3   2  1946        25       999      -999           0       0          3   \n4   2  1947        25       999      -999           0       0          3\n\n   location    sidea   ...    epend  ependdate ependprec  gwnoa gwnoa2nd  \\\n0   Bolivia  Bolivia   ...        1 1946-07-21     -99.0    145      NaN   \n1   Bolivia  Bolivia   ...        1 1952-04-12     -99.0    145      NaN   \n2   Bolivia  Bolivia   ...        1 1967-10-16     -99.0    145      NaN   \n3  Cambodia   France   ...        0        NaT       NaN    220      NaN   \n4  Cambodia   France   ...        0        NaT       NaN    220      NaN\n\n   gwnob  gwnob2nd  gwnoloc region  version  \n0    NaN       NaN      145      5   2009-4  \n1    NaN       NaN      145      5   2009-4  \n2    NaN       NaN      145      5   2009-4  \n3    NaN       NaN      811      3   2009-4  \n4    NaN       NaN      811      3   2009-4\n\n[5 rows x 32 columns]   We process images since we cheat a little.   Many packages are not installed.   We are not be able to import some data.   Images will then present the final results.   from IPython.display import Image\n# for the following pictures...  SAS files   Advanced analytics  Multivariate analysis  Business intelligence  Data management  Predictive analytics  Standard for computational analysis  Code (instead of importing the package):   # Import sas7bdat package\nfrom sas7bdat import SAS7BDAT\n\n# Save file to a DataFrame: df_sas\nwith SAS7BDAT('sales.sas7bdat') as file:\n    df_sas = file.to_data_frame()\n\n# Print head of DataFrame\nprint(df_sas.head())\n\n# Plot histogram of DataFrame features\npd.DataFrame.hist(df_sas[['P']])\nplt.ylabel('count')\n\nplt.show()   The data are adapted from the website of the undergraduate text book Principles of Economics by Hill, Griffiths and Lim (http://www.principlesofeconometrics.com/sas/).  The chart would be:   Image('p.png')   Stata files   The data consist of disease extent for several diseases in various countries (more information can be found at http://www.cid.harvard.edu/ciddata/geog/readme_disarea.html).   # Import pandas\nimport pandas as pd\n\n# Load Stata file into a pandas DataFrame: df\ndf = pd.read_stata('disarea.dta')\n\n# Print the head of the DataFrame df\nprint(df.head())    wbcode               country  disa1  disa2  disa3  disa4  disa5  disa6  \\\n0    AFG           Afghanistan   0.00   0.00   0.76   0.73    0.0   0.00   \n1    AGO                Angola   0.32   0.02   0.56   0.00    0.0   0.00   \n2    ALB               Albania   0.00   0.00   0.02   0.00    0.0   0.00   \n3    ARE  United Arab Emirates   0.00   0.00   0.00   0.00    0.0   0.00   \n4    ARG             Argentina   0.00   0.24   0.24   0.00    0.0   0.23\n\n   disa7  disa8   ...    disa16  disa17  disa18  disa19  disa20  disa21  \\\n0   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n1   0.56    0.0   ...       0.0     0.4     0.0    0.61    0.00     0.0   \n2   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n3   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n4   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.05     0.0\n\n   disa22  disa23  disa24  disa25  \n0    0.00    0.02    0.00    0.00  \n1    0.99    0.98    0.61    0.00  \n2    0.00    0.00    0.00    0.16  \n3    0.00    0.00    0.00    0.00  \n4    0.00    0.01    0.00    0.11\n\n[5 rows x 27 columns]   Plot histogram of one column of the DataFrame.   pd.DataFrame.hist(df[['disa10']])\nplt.xlabel('Extent of disease')\nplt.ylabel('Number of coutries')\n\nplt.show()   HDF5 files   Standard for storing large quantities of numerical data.  Datasets can be hundreds of gigabytes or terabytes.  HDF5 can scale to exabytes.  Code (instead of importing the package):   # Import packages\nimport numpy as np\nimport h5py\n\n# Assign filename: file\nfile = 'LIGO_data.hdf5' \n\n# Load file: data\ndata = h5py.File(file, 'r')\n\n# Print the datatype of the loaded file\nprint(type(data))\n\n# Print the keys of the file\nfor key in data.keys():\n    print(key)\n\n# Get the HDF5 group: group\ngroup = data['strain']\n\n# Check out keys of group\nfor key in group.keys():\n    print(key)\n\n# Set variable equal to time series data: strain\nstrain = data['strain']['Strain'].value\n\n# Set number of time points to sample: num_samples\nnum_samples = 10000\n\n# Set time vector\ntime = np.arange(0, 1, 1/num_samples)\n\n# Plot data\nplt.plot(time, strain[:num_samples])\nplt.xlabel('GPS Time (s)')\nplt.ylabel('strain')\nplt.show()   You can find the LIGO data plus loads of documentation and tutorials (https://losc.ligo.org/events/GW150914/) and (https://losc.ligo.org/s/events/GW150914/GW150914_tutorial.html) is a great tutorial on Signal Processing with the data.   Image('strain.png')   MATLAB   \u201cMatrix Laboratory\u201d.  Industry standard in engineering and science.  Code (instead of importing the package):   # Import package\nimport scipy.io\n\n# Load MATLAB file: mat\nmat = scipy.io.loadmat('albeck_gene_expression.mat')\n\n# Print the datatype type of mat\nprint(type(mat))\n\n# Print the keys of the MATLAB dictionary\nprint(mat.keys())\n\n# Print the type of the value corresponding to the key 'CYratioCyt'\nprint(type(mat['CYratioCyt']))\n\n# Print the shape of the value corresponding to the key 'CYratioCyt'\nprint(np.shape(mat['CYratioCyt']))\n\n# Subset the array and plot it\ndata = mat['CYratioCyt'][25, 5:]\nfig = plt.figure()\nplt.plot(data)\nplt.xlabel('time (min.)')\nplt.ylabel('normalized fluorescence (measure of expression)')\nplt.show()   This file contains gene expression data from the Albeck Lab at UC Davis (https://www.mcb.ucdavis.edu/faculty-labs/albeck/workshop.htm). You can find the data and some great documentation.   Image('CYratioCyt.png')",
            "title": "2, Importing from Other Files"
        },
        {
            "location": "/Importing Data into Python/#3-working-with-relational-databases",
            "text": "Relational Database Management System   PostgreSQL.  MySQL.  SQLite.  Code (instead of importing the package):   # Import necessary module\nfrom sqlalchemy import create_engine\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')  'sqlite:///Northwind.sqlite'  is called the connection string to the SQLite database.   The Chinook database (http://chinookdatabase.codeplex.com/) contains information about a semi-fictional digital media store in which media data is real and customer, employee and sales data has been manually created.  Code (instead of importing the package):   # Save the table names to a list: table_names\ntable_names = engine.table_names()\n\n# Print the table names to the shell\nprint(table_names)  Query the DB   The final  ;  is facultative.  Code (instead of importing the package):   # Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine connection: con\ncon = engine.connect()\n\n# Perform query: rs\nrs = con.execute('SELECT * FROM Album')\n\n# Save results of the query to DataFrame: df\ndf = pd.DataFrame(rs.fetchall())\n\n# Close connection\ncon.close()\n\n# Print head of DataFrame df\nprint(df.head())  Customize queries   Code (instead of importing the package):   # Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite') # becomes facultative with many queries\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute('SELECT LastName, Title FROM Employee')\n    df = pd.DataFrame(rs.fetchmany(size = 3))\n    df.columns = rs.keys() # set the DataFrame's column names to the corresponding names of the table columns\n\n# Print the length of the DataFrame df\nprint(len(df))\n\n# Print the head of the DataFrame df\nprint(df.head())   Code (instead of importing the package):   # Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite') # becomes facultative with many queries\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute(\"SELECT * FROM Employee WHERE EmployeeId >= 6\")\n    df = pd.DataFrame(rs.fetchall())\n    df.columns = rs.keys()\n\n# Print the head of the DataFrame df\nprint(df.head())   Code (instead of importing the package):   # Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine in context manager\nwith engine.connect() as con:\n    rs = con.execute('SELECT * FROM Employee ORDER BY BirthDate')\n    df = pd.DataFrame(rs.fetchall())\n\n    # Set the DataFrame's column names\n    df.columns = rs.keys()\n\n# Print head of DataFrame\nprint(df.head())  Query the DB the Pandas way   Simpler code (instead of importing the package)!!!   # Import packages\nfrom sqlalchemy import create_engine\nimport pandas as pd\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Execute query and store records in DataFrame: df\ndf = pd.read_sql_query(\"SELECT * FROM Album\", engine)\n\n# Print head of DataFrame\nprint(df.head())\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df1\nwith engine.connect() as con:\n    rs = con.execute(\"SELECT * FROM Album\")\n    df1 = pd.DataFrame(rs.fetchall())\n    df1.columns = rs.keys()\n\n# Confirm that both methods yield the same result: does df = df1 ?   \nprint(df.equals(df1))   Code (instead of importing the package):   # Import packages\nfrom sqlalchemy import create_engine\nimport pandas as pd\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Execute query and store records in DataFrame: df\ndf = pd.read_sql_query(\"SELECT * FROM Employee WHERE EmployeeId >= 6 ORDER BY BirthDate\", engine)\n\n# Print head of DataFrame\nprint(df.head())  INNER JOIN   Code (instead of importing the package):   import pandas as pd\nfrom sqlalchemy import create_engine\n\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute(\"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\")\n    df = pd.DataFrame(rs.fetchall())\n    df.columns = rs.keys()\n\n# Print head of DataFrame df\nprint(df.head())   Alternative code:   df = pd.read_sql_query(\"SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\", engine)\n\n# Print head of DataFrame df\nprint(df.head())   Code (instead of importing the package):   # Execute query and store records in DataFrame: df\ndf = pd.read_sql_query(\"SELECT * FROM PlaylistTrack INNER JOIN Track on PlaylistTrack.TrackId = Track.TrackId WHERE Milliseconds < 250000\", engine)\n\n# Print head of DataFrame\nprint(df.head())",
            "title": "3, Working with Relational Databases"
        },
        {
            "location": "/Importing Data into Python/#4-importing-flat-files-from-the-web-web-scraping",
            "text": "scrape, wrangle, munge, wrangling, munging     Import and locally save datasets from the web.  Load datasets into pandas DataFrames.  Make HTTP requests (GET requests).  Scrape web data such as HTML.  Parse HTML into useful data (BeautifulSoup).  Use the urllib and requests packages.   Using the  urllib  package on csv files   Import the package.   from urllib.request import urlretrieve\n\n# import pandas as pd\n\n# Assign url of file: url\nurl = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\n# Save file locally\nurlretrieve(url, 'winequality-red.csv')\n\n# Read file into a DataFrame and print its head\ndf = pd.read_csv('winequality-red.csv', sep=';')\nprint(df.head())     fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5  # import matplotlib.pyplot as plt\n# import pandas as pd\n\n# Assign url of file: url\nurl = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\n# Read file into a DataFrame: df\ndf = pd.read_csv(url, sep = ';')\n\n# Print the head of the DataFrame\nprint(df.head())\n\n# Plot first column of df\npd.DataFrame.hist(df.ix[:, 0:1])\nplt.xlabel('fixed acidity (g(tartaric acid)/dm$^3$)')\nplt.ylabel('count')\nplt.show()     fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5   Using the  urllib  package on Excel files  # import pandas as pd\n\n# Assign url of file: url\nurl = 'http://s3.amazonaws.com/assets.datacamp.com/course/importing_data_into_r/latitude.xls'\n\n# Read in all sheets of Excel file: xl\nxl = pd.read_excel(url, sheetname = None)\n\n# Print the sheetnames (keys) to the shell !!!\nprint(xl.keys())\n\n# Print the head of the first sheet (using its name, NOT its index)\nprint(xl['1700'].head())  dict_keys(['1700', '1900'])\n                 country       1700\n0            Afghanistan  34.565000\n1  Akrotiri and Dhekelia  34.616667\n2                Albania  41.312000\n3                Algeria  36.720000\n4         American Samoa -14.307000  HTTP requests to import files from the web   requests  is one of the most downloaded Python packages.  requests  works with  urllib .  Import the package.   from urllib.request import urlopen, Request\n\n# Specify the url\nurl = \"http://www.datacamp.com/teach/documentation\"\n\n# This packages the request: request\nrequest = Request(url)\n\n# Send the request and catches the response: response\nresponse = urlopen(request)\n\n# Print the datatype of response\nprint(type(response))\n\n# Be polite and close the response!\nresponse.close()  <class 'http.client.HTTPResponse'>  from urllib.request import urlopen, Request\n\nurl = \"http://docs.datacamp.com/teach/\"\n\nrequest = Request(url)\n\nresponse = urlopen(request)\n\n\n# Extract the response: html\nhtml = response.read()\n\n# Print the html\nprint(html)\n\n# Be polite and close the response!\nresponse.close()  b'<!DOCTYPE html>\\n<link rel=\"shortcut icon\" href=\"images/favicon.ico\" />\\n<html>\\n\\n  <head>\\n  <meta charset=\"utf-8\">\\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\n  <title>Home</title>\\n  <meta name=\"description\" content=\"All Documentation on Course Creation\">\\n\\n  <link rel=\"stylesheet\" href=\"/teach/css/main.css\">\\n  <link rel=\"canonical\" href=\"/teach/\">\\n  <link rel=\"alternate\" type=\"application/rss+xml\" title=\"DataCamp Teach Documentation\" href=\"/teach/feed.xml\" />\\n</head>\\n\\n\\n  <body>\\n\\n    <header class=\"site-header\">\\n\\n  <div class=\"wrapper\">\\n\\n    <a class=\"site-title\" href=\"/teach/\">DataCamp Teach Documentation</a>\\n\\n  </div>\\n\\n</header>\\n\\n\\n    <div class=\"page-content\">\\n      <div class=\"wrapper\">\\n        <p>The Teach Documentation has been moved to <a href=\"https://www.datacamp.com/teach/documentation\">https://www.datacamp.com/teach/documentation</a>!</p>\\n\\n<!-- Everybody can teach on DataCamp. The resources on this website explain all the steps to build your own course on DataCamp\\'s interactive data science platform.\\n\\nInterested in partnering with DataCamp? Head over to the [Course Material](/teach/course-material.html) page to get an idea of the requirements to build your own interactive course together with DataCamp!\\n\\n## Table of Contents\\n\\n- [Course Material](/teach/course-material.html) - Content required to build a DataCamp course.\\n- [Video Lectures](/teach/video-lectures.html) - Details on video recording and editing.\\n- [DataCamp Teach](https://www.datacamp.com/teach) - Use the DataCamp Teach website to create DataCamp courses (preferred).\\n- [datacamp R Package](https://github.com/datacamp/datacamp/wiki) - Use R Package to create DataCamp courses (legacy).\\n- [Code DataCamp Exercises](/teach/code-datacamp-exercises.html)\\n- [SCT Design (R)](https://github.com/datacamp/testwhat/wiki)\\n- [SCT Design (Python)](https://github.com/datacamp/pythonwhat/wiki)\\n- [Style Guide](/teach/style-guide.html) -->\\n\\n\\n      </div>\\n    </div>\\n\\n    \\n\\n  </body>\\n\\n</html>\\n'  Using  requests  import requests\n\nurl = \"http://docs.datacamp.com/teach/\"\n\nr = requests.get(url)\n\ntext = r.text\n\n# Print part of the html (split the paragraphs) instead of all with  print(text)\nhead = text.split('\\n\\n')\n\nprint(head[0])\nprint('')\nprint(head[1])\nprint('')\nprint(head[2])\nprint('')\nprint(head[3])  <!DOCTYPE html>\n<link rel=\"shortcut icon\" href=\"images/favicon.ico\" />\n<html>\n\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n  <title>Home</title>\n  <meta name=\"description\" content=\"All Documentation on Course Creation\">\n\n  <link rel=\"stylesheet\" href=\"/teach/css/main.css\">\n  <link rel=\"canonical\" href=\"/teach/\">\n  <link rel=\"alternate\" type=\"application/rss+xml\" title=\"DataCamp Teach Documentation\" href=\"/teach/feed.xml\" />\n</head>  Scraping the web   scrape, wrangle, munge   Scrape unstructured data.  Scrape structured data, parse it and extract the data from HTML using the  BeautifulSoup  package.  Import the packages.   import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n# Create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Prettify the BeautifulSoup object: pretty_soup\npretty_soup = soup.prettify()\n\n# Print the response\nprint(type(pretty_soup))\n\n# Print part of the html (split the text), not all with  print(pretty_soup)\nhead = pretty_soup.split('</h3>')\n\nprint(head[0])  <class 'str'>\n<html>\n <head>\n  <title>\n   Guido's Personal Home Page\n  </title>\n </head>\n <body bgcolor=\"#FFFFFF\" text=\"#000000\">\n  <h1>\n   <a href=\"pics.html\">\n    <img border=\"0\" src=\"images/IMG_2192.jpg\"/>\n   </a>\n   Guido van Rossum - Personal Home Page\n  </h1>\n  <p>\n   <a href=\"http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\">\n    <i>\n     \"Gawky and proud of it.\"\n    </i>\n   </a>\n  </p>\n  <h3>\n   <a href=\"http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\">\n    Who\nI Am\n   </a>   Other operations with  BeautifulSoup .   import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n\n# Create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Get the title of Guido's webpage: guido_title\nguido_title = soup.title # attribute\n\n# Print the title of Guido's webpage to the shell\nprint(guido_title)\n\n# Get Guido's text: guido_text\nguido_text = soup.get_text() # method\n\n# Print Guido's text to the shell\nprint(guido_text)  <title>Guido's Personal Home Page</title>\n\nGuido's Personal Home Page\n\nGuido van Rossum - Personal Home Page\n\"Gawky and proud of it.\"\nWho\nI Am\nI am the author of the Python\nprogramming language.  See also my resume\nand my publications list, a brief bio, assorted writings, presentations and interviews (all about Python), some\npictures of me,\nmy new blog, and\nmy old\nblog on Artima.com.  I am\n@gvanrossum on Twitter.  I\nalso have\na G+\nprofile.\n\nIn January 2013 I joined\nDropbox.  I work on various Dropbox\nproducts and have 50% for my Python work, no strings attached.\nPreviously, I have worked for Google, Elemental Security, Zope\nCorporation, BeOpen.com, CNRI, CWI, and SARA.  (See\nmy resume.)  I created Python while at CWI.\n\nHow to Reach Me\nYou can send email for me to guido (at) python.org.\nI read everything sent there, but if you ask\nme a question about using Python, it's likely that I won't have time\nto answer it, and will instead refer you to\nhelp (at) python.org,\ncomp.lang.python or\nStackOverflow.  If you need to\ntalk to me on the phone or send me something by snail mail, send me an\nemail and I'll gladly email you instructions on how to reach me.\n\nMy Name\nMy name often poses difficulties for Americans.\n\nPronunciation: in Dutch, the \"G\" in Guido is a hard G,\npronounced roughly like the \"ch\" in Scottish \"loch\".  (Listen to the\nsound clip.)  However, if you're\nAmerican, you may also pronounce it as the Italian \"Guido\".  I'm not\ntoo worried about the associations with mob assassins that some people\nhave. :-)\n\nSpelling: my last name is two words, and I'd like keep it\nthat way, the spelling on some of my credit cards notwithstanding.\nDutch spelling rules dictate that when used in combination with my\nfirst name, \"van\" is not capitalized: \"Guido van Rossum\".  But when my\nlast name is used alone to refer to me, it is capitalized, for\nexample: \"As usual, Van Rossum was right.\"\n\nAlphabetization: in America, I show up in the alphabet under\n\"V\".  But in Europe, I show up under \"R\".  And some of my friends put\nme under \"G\" in their address book...\n\nMore Hyperlinks\n\nHere's a collection of essays relating to Python\nthat I've written, including the foreword I wrote for Mark Lutz' book\n\"Programming Python\".\nI own the official \nPython license.\n\nThe Audio File Formats FAQ\nI was the original creator and maintainer of the Audio File Formats\nFAQ.  It is now maintained by Chris Bagwell\nat http://www.cnpbagwell.com/audio-faq.  And here is a link to\nSOX, to which I contributed\nsome early code.\n\n\"On the Internet, nobody knows you're\na dog.\"   More.   import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n# create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Print the title of Guido's webpage\nprint(soup.title)\n\n# Find all 'a' tags (which define hyperlinks): a_tags\na_tags = soup.find_all('a') # for <a>, hyperlinks\n\n# Print the URLs to the shell\nfor link in a_tags:\n    print( link.get('href'))  <title>Guido's Personal Home Page</title>\npics.html\nhttp://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\nhttp://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\nhttp://www.python.org\nResume.html\nPublications.html\nbio.html\nhttp://legacy.python.org/doc/essays/\nhttp://legacy.python.org/doc/essays/ppt/\ninterviews.html\npics.html\nhttp://neopythonic.blogspot.com\nhttp://www.artima.com/weblogs/index.jsp?blogger=12088\nhttps://twitter.com/gvanrossum\nhttps://plus.google.com/u/0/115212051037621986145/posts\nhttp://www.dropbox.com\nResume.html\nhttp://groups.google.com/groups?q=comp.lang.python\nhttp://stackoverflow.com\nguido.au\nhttp://legacy.python.org/doc/essays/\nimages/license.jpg\nhttp://www.cnpbagwell.com/audio-faq\nhttp://sox.sourceforge.net/\nimages/internetdog.gif",
            "title": "4, Importing Flat Files from the Web (Web Scraping)"
        },
        {
            "location": "/Importing Data into Python/#5-introduction-to-apis-and-jsons",
            "text": "API or Application Programming Interface are protocols and routines providing access to websites and web apps like OMDb, Wikipedia, Uber, Uber Developers, BGG, ImDB, Facebook, Instagram, and Twitter.  Most of data coming from APIS are JSON files.   Import the  json  package  import json\n\n# Load JSON: json_data\nwith open('a_movie.json', 'r') as json_file:\n    json_data = json.load(json_file)\n\nprint(type(json_data))\nprint(json_data['Title'])\nprint(json_data['Year'])\nprint('')\n\n# Print each key-value pair in json_data\nfor k in json_data.keys():\n    print(k + ': ', json_data[k])  <class 'dict'>\nThe Social Network\n2010\n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nAwards:  Won 3 Oscars. Another 161 wins & 162 nominations.\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nTitle:  The Social Network\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nDirector:  David Fincher\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)  The  requests  package again   Pull some movie data down from the Open Movie Database (OMDB) using their API.  Pull it as text.   import requests\n\nurl = 'http://www.omdbapi.com/?t=social+network'\n\nr = requests.get(url)\n\nprint(type(r))\nprint('')\n\n# Print the text of the response\nprint(r.text)  <class 'requests.models.Response'>\n\n{\"Title\":\"The Social Network\",\"Year\":\"2010\",\"Rated\":\"PG-13\",\"Released\":\"01 Oct 2010\",\"Runtime\":\"120 min\",\"Genre\":\"Biography, Drama\",\"Director\":\"David Fincher\",\"Writer\":\"Aaron Sorkin (screenplay), Ben Mezrich (book)\",\"Actors\":\"Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\",\"Plot\":\"Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\",\"Language\":\"English, French\",\"Country\":\"USA\",\"Awards\":\"Won 3 Oscars. Another 161 wins & 162 nominations.\",\"Poster\":\"http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\",\"Metascore\":\"95\",\"imdbRating\":\"7.7\",\"imdbVotes\":\"478,258\",\"imdbID\":\"tt1285016\",\"Type\":\"movie\",\"Response\":\"True\"}   Pull it as JSON or a dictionary.   import requests\n\nurl = 'http://www.omdbapi.com/?t=social+network'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\nprint(type(json_data))\nprint('')\n\n# Print each key-value pair in json_data\nfor k in json_data.keys():\n    print(k + ': ', json_data[k])  <class 'dict'>\n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nAwards:  Won 3 Oscars. Another 161 wins & 162 nominations.\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nDirector:  David Fincher\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nTitle:  The Social Network\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)   Search the Library of Congress.  Pull a dictionary of dictionaries.   import requests\n\nurl = 'http://chroniclingamerica.loc.gov/search/titles/results/?terms=new%20york&format=json'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\n# Select the first element in the list json_data['items']: nyc_loc\n# dict of dict\nnyc_loc = json_data['items'][0]\n\n# Print each key-value pair in nyc_loc\nfor k in nyc_loc.keys():\n    print(k + ': ', nyc_loc[k])  county:  ['New York']\nplace_of_publication:  New York\noclc:  12928956\nsubject:  ['New York (N.Y.)--Newspapers.', 'New York (State)--New York.--fast--(OCoLC)fst01204333']\nalt_title:  []\ntitle:  The New York thrice-a-week world.\ntype:  title\nedition:  New York and Pennsylvania ed.\nid:  /lccn/sn85047837/\nnote:  ['Democrat.', 'Description based on: Vol. 36, no. 3,670 (Oct. 4, 1895).', 'The words \"New York thrice-a-week\" appear in title ornament.']\nplace:  ['New York--New York--New York']\nessay:  []\nstart_year:  1890\nend_year:  1999\npublisher:  Press Pub. Co.\nlccn:  sn85047837\nholding_type:  ['Unspecified']\nstate:  ['New York']\ncity:  ['New York']\nlanguage:  ['English']\ncountry:  New York\ntitle_normal:  new york thrice-a-week world.\nurl:  http://chroniclingamerica.loc.gov/lccn/sn85047837.json\nfrequency:  Three times a week   The Wikipedia API.  Documentation: https://www.mediawiki.org/wiki/API:Main_page  Dictionary of dictionary of dictionary.   import requests\n\nurl = 'https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles=pizza'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\n# Print the Wikipedia page extract\npizza_extract = json_data['query']['pages']['24768']['extract']\nprint(pizza_extract)  <p><b>Pizza</b> is a flatbread generally topped with tomato sauce and cheese and baked in an oven. It is commonly topped with a selection of meats, vegetables and condiments. The term was first recorded in the 10th century, in a Latin manuscript from Gaeta in Central Italy. The modern pizza was invented in Naples, Italy, and the dish and its variants have since become popular in many areas of the world.</p>\n<p>In 2009, upon Italy's request, Neapolitan pizza was safeguarded in the European Union as a Traditional Speciality Guaranteed dish. The Associazione Verace Pizza Napoletana (the True Neapolitan Pizza Association) is a non-profit organization founded in 1984 with headquarters in Naples. It promotes and protects the \"true Neapolitan pizza\".</p>\n<p>Pizza is sold fresh or frozen, either whole or in portions, and is a common fast food item in Europe and North America. Various types of ovens are used to cook them and many varieties exist. Several similar dishes are prepared from ingredients commonly used in pizza preparation, such as calzone and stromboli.</p>\n<p></p>  The Twitter API and Authentification   Twitter has many APIs: the main API, the REST API, Streaming APIs (private, public), Firehouse (expensive), etc.  Field Guide: https://dev.twitter.com/overview/api/tweets  Consult the documentation to set an authentification key (available online).   tweepy  package   The authentication looks like the following:  Code:   # Import package\nimport tweepy, json\n\n# Store OAuth authentication credentials in relevant variables\naccess_token = \"1092294848-aHN7DcRP9B4VMTQIhwqOYiB14YkW92fFO8k8EPy\"\naccess_token_secret = \"X4dHmhPfaksHcQ7SCbmZa2oYBBVSD2g8uIHXsp5CTaksx\"\nconsumer_key = \"nZ6EA0FxZ293SxGNg8g8aP0HM\"\nconsumer_secret = \"fJGEodwe3KiKUnsYJC3VRndj7jevVvXbK2D5EiJ2nehafRgA6i\"\n\n# Pass OAuth details to tweepy's OAuth handler\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)  Start streaming tweets   Code:   # Initialize Stream listener\nl = MyStreamListener()\n\n# Create you Stream object with authentication\nstream = tweepy.Stream(auth, l)\n\n\n# Filter Twitter Streams to capture data by the keywords:\nstream.filter(track = ['clinton', 'trump', 'sanders', 'cruz'])   Code of  MyStreamListener() :  Creates a file called tweets.txt, collects streaming tweets as .jsons and writes them to the file tweets.txt; once 100 tweets have been streamed, the listener closes the file and stops listening.    class MyStreamListener(tweepy.StreamListener):\n\n\n    def __init__(self, api=None):\n\n        super(MyStreamListener, self).__init__()\n        self.num_tweets = 0\n        self.file = open(\"tweets.txt\", \"w\")\n\n    def on_status(self, status):\n\n        tweet = status._json\n        self.file.write( json.dumps(tweet) + '\\n' )\n        tweet_list.append(status)\n        self.num_tweets += 1\n        if self.num_tweets < 100:\n            return True\n        else:\n            return False\n        self.file.close()\n\n    def on_error(self, status):\n        print(status)  Load and explore your Twitter data   Code:   # Import package\nimport json\n\n# String of path to file: tweets_data_path\ntweets_data_path = 'tweets.txt'\n\n# Initialize empty list to store tweets: tweets_data\ntweets_data = []\n\n# Open connection to file\ntweets_file = open(tweets_data_path, \"r\")\n\n# Read in tweets and store in list: tweets_data\nfor line in tweets_file:\n    tweet = json.loads(line)\n    tweets_data.append(tweet)\n\n# Close connection to file\ntweets_file.close()\n\n# Print the keys of the first tweet dict\nprint(tweets_data[0].keys())  Send the Twitter data to DataFrame   Twitter data in a list of dictionaries  tweets_data , where each dictionary corresponds to a single tweet.   The text in a tweet  t1  is stored as the value  t1['text'] ; similarly, the language is stored in  t1['lang'] .   Code:   # Import package\nimport pandas as pd\n\n# Build DataFrame of tweet texts and languages\ndf = pd.DataFrame(tweets_data, columns=['text', 'lang'])\n\n# Print head of DataFrame\nprint(df.head())  Analyze the tweets (NLP, regex)   A little bit of Twitter text analysis and plotting.   Use the statistical data visualization library seaborn: https://stanford.edu/%7Emwaskom/software/seaborn/  Code:   # Import the regular expressions library\nimport re\n\n# The function tells you whether the first argument (a word) occurs within the 2nd argument (a tweet)\ndef word_in_text(word, tweet):\n    word = word.lower()\n    text = tweet.lower()\n    match = re.search(word, tweet)\n\n    if match:\n        return True\n    return False\n\n# Initialize list to store tweet counts\n[clinton, trump, sanders, cruz] = [0, 0, 0, 0]\n\n# Iterate through df, counting the number of tweets in which\n# each candidate is mentioned\nfor index, row in df.iterrows():\n    clinton += word_in_text('clinton', row['text'])\n    trump += word_in_text('trump', row['text'])\n    sanders += word_in_text('sanders', row['text'])\n    cruz += word_in_text('cruz', row['text'])\n\n# Import packages\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set seaborn style\nsns.set(color_codes=True)\n\n# Create a list of labels:cd\ncd = ['clinton', 'trump', 'sanders', 'cruz']\n\n# Plot histogram\nax = sns.barplot(cd, [clinton, trump, sanders, cruz])\nax.set(ylabel=\"count\")\nplt.show()  from IPython.display import Image\n# for the following pictures...  Image('tweets_figure.png')",
            "title": "5, Introduction to APIs and JSONs"
        },
        {
            "location": "/Python for Data Science/",
            "text": "CONTENT\n\n\n1, Introduction\n\n\nBasic operations\n\n\nConcatenating, help, printing, listing\n\n\nNumPy: arrays\n\n\n\n\n\n\n2, Intermediate\n\n\nPlotting basics\n\n\nA plotting project: Gapminder\n\n\nPandas: data frame\n\n\nLooping\n\n\nA NumPy project: random walk & Monte Carlo simulation\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the courses (Introduction and Intermediate). Python 3. From DataCamp.\n\n\n\n\n1, Introduction\n\u00b6\n\n\nBasic operations\n\u00b6\n\n\nPrint is a function\n\n\n\n\nIn Python 3:\n\n\n\n\nprint()\n\n\n\n\n\n\nWhile in Python 2:\n\n\n\n\nprint \"test\"\nprint \"-\" * 25\nprint 10\nprint 5 + 5\nprint variable\nprint function()\n\n\n\n\nprint(\"Python 3.x\")\n\n\n\n\nPython 3.x\n\n\n\n\n\nAddition and subtraction.\n\n\n\n\nprint(5 + 5)\nprint(5 - 5)\n\n\n\n\n10\n0\n\n\n\n\n\nMultiplication and division.\n\n\n\n\nprint(3 * 5)\nprint(10 / 2)\n\n\n\n\n15\n5.0\n\n\n\n\n\nExponentiation.\n\n\n\n\nprint(4 ** 2)\n\n\n\n\n16\n\n\n\n\n\nModulo.\n\n\n\n\nprint(18 % 7)\n\n\n\n\n4\n\n\n\n\n\nHow much is your $100 worth after 7 years?\n\n\n\n\nprint(100 * ((1 + 0.10)**7))\n\n\n\n\n194.87171000000012\n\n\n\n# Create a variable savings\nsavings = 100\n\n# Create a variable factor\nfactor = 1.10\n\n# Calculate result\nresult = savings * factor ** 7\n\n# Print out result\nprint(result)\n\n\n\n\n194.87171000000012\n\n\n\n\n\nSeveral variables to experiment with.\n\n\n\n\nsavings = 100\nfactor = 1.10\ndesc = \"compound interest\"\n\n# Assign product of factor and savings to year1\nyear1 = savings * factor\n\n# Print the type of year1\nprint(type(year1))\n\n\n\n\n<class 'float'>\n\n\n\n# Assign sum of  desc and  desc to doubledesc.\ndoubledesc = desc + desc\n\n# Print out doubledesc\nprint(doubledesc)\n\n\n\n\ncompound interestcompound interest\n\n\n\n# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\nprint(result)\n\n\n\n\n194.87171000000012\n\n\n\nConcatenating, help, printing, listing\n\u00b6\n\n\nConcatenation\n\n\nprint(\"I started with $\" + str(savings) + \" and now have $\" + str(result) + \". Awesome!\")\n\n\n\n\nI started with $100 and now have $194.87171000000012. Awesome!\n\n\n\n# Definition of pi_string\npi_string = \"3.1415926\"\n\n# Convert pi_string into float: pi_float\npi_float = float(pi_string)\nprint(pi_float)\n\n\n\n\n3.1415926\n\n\n\nHelp\n\n\n# Inline\nhelp(max)\n\n\n\n\nHelp on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -> value\n    max(arg1, arg2, *args, *[, key=func]) -> value\n\n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.\n\n\n\n# Offline\n?max\n\n\n\n\nContiguous printing\n\n\n horizontal, print\n\n\n# Print out room and room_up\nprint('room'); print('room_up')\n\n\n\n\nroom\nroom_up\n\n\n\nIndex\n\n\n# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Print out the index of the element 20.0\nprint(areas.index(20.0))\n\n\n\n\n2\n\n\n\n# Create list baseball \nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Print out the first and last elements\nprint(baseball[1]); print(baseball[-1])\n\n\n\n\n215\n200\n\n\n\nNumPy: arrays\n\u00b6\n\n\n\n\nAn overview with an simple array.\n\n\nImport the \nnumpy\n package as \nnp\n.\n\n\n\n\nimport numpy as np\n\n\n\n\n\n\nCreate a Numpy array from \nbaseball\n: \nnp_baseball\n.\n\n\nTransform a list into an array.\n\n\n\n\nnp_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))\n\n\n\n\n<class 'numpy.ndarray'>\n\n\n\n\n\nAgain.\n\n\n\n\n# Height list\nheight = [68, 78, 76, 80, 75, 79, 78, 80]\nweight = baseball\n\n# Create array from height with correct units: np_height_m\nnp_height_m = np.array(height) * 0.0254\n\n# Create array from weight with correct units: np_weight_kg \nnp_weight_kg = np.array(weight) * 0.453592\n\n# Calculate the BMI: bmi\nbmi = np_weight_kg / (np_height_m ** 2)\n\n# Print out bmi\nprint(bmi)\n\n\n\n\n[ 27.36860318  24.84546948  25.56171941  23.06945176  23.49812856\n  19.82697406  24.15210754  21.97090644]\n\n\n\n# Store weight and height lists as numpy arrays\nnp_weight = np.array(weight)\nnp_height = np.array(height)\n\n# Print out the weight at index 5\nprint(np_weight[5])\n\n# Print out sub-array of np_height: index 100 up to and including index 110\nprint(np_height[1:2])\n\n\n\n\n176\n[78]\n\n\n\nList to array\n\n\n\n\nA list in an array is a 2D array or a tabular array.\n\n\n\n\n 2 dimension, 2d, 2-d\n\n\n# Create baseball, a list of lists\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\n\n\n\n\n# Create a Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)\n\n# Print out the 4th row of np_baseball\nprint(np_baseball[3,:])\n\n# Select the entire second column of np_baseball: np_weight\nnp_weight = np_baseball[:,1]\n\n# Print out height of 4th player\nprint(np_baseball[3,0])\n\n\n\n\n<class 'numpy.ndarray'>\n(4, 2)\n[ 188.    75.2]\n188.0\n\n\n\n# Create np_height from np_baseball\nnp_height = np_baseball[:,1]\n\n# Print out the mean of np_height\nprint(np.mean(np_height))\n\n# Print out the median of np_height\nprint(np.median(np_height))\n\n\n\n\n88.7\n88.45\n\n\n\n# Print mean weight\navg = np.mean(np_baseball[:,0])\nprint(\"Average: \" + str(avg))\n\n# Print median weight. Replace 'None'\nmed = np.median(np_baseball[:,0])\nprint(\"Median: \" + str(med))\n\n# Print out the standard deviation on weight. Replace 'None'\nstddev = np.std(np_baseball[:,0])\nprint(\"Standard Deviation: \" + str(stddev))\n\n\n\n\nAverage: 198.25\nMedian: 199.0\nStandard Deviation: 14.6351460533\n\n\n\n# Print out correlation between first and second column. Replace 'None'\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint(\"Correlation: \" + str(corr))\n\n\n\n\nCorrelation: [[ 1.          0.95865738]\n [ 0.95865738  1.        ]]\n\n\n\nArrays and logicals\n\n\n# Create the arrays\nmy_house = np.array([18.0, 20.0, 10.75, 9.50])\nyour_house = np.array([14.0, 24.0, 14.25, 9.0])\n\n\n\n\n# Which areas in my_house are greater than or equal to 18\nprint(my_house >= 18)\n\n# compare two Numpy arrays element-wise\n# which areas in my_house are smaller than the ones in your_house\nprint(my_house[my_house < your_house])\n\n\n\n\n[ True  True False False]\n[ 20.    10.75]\n\n\n\n# np.logical_and(), np.logical_or() and np.logical_not()\n\n# my_house greater than 18.5 or smaller than 10\nprint(np.logical_or(my_house > 18.5, my_house < 10))\n\n# Both my_house and your_house smaller than 11\nprint(np.logical_and(my_house < 11, your_house < 11))\n\n\n\n\n[False  True False  True]\n[False False False  True]\n\n\n\n2, Intermediate\n\u00b6\n\n\nPlotting basics\n\u00b6\n\n\n\n\nIn this section, we use the \nmatplolib\n package for plotting and charting.\n\n\nIn IPython, the package is \u2018stacked\u2019 with the \nnumpy\n packages and other scientific packages under the magic command \n%pylab\n. \n\n\nCalling \n%pylab\n is calling the entire scientific stack or Scipy Stack.\n\n\n\n\nLine plot\n\n\nyear = [1950, 1970, 1990, 2010]\npop = [2.519, 3.692, 5.263, 6.972]\n\n# Print the last item from year and pop\nprint(year[-1])\nprint(pop[-1])\n\n\n\n\n2010\n6.972\n\n\n\n% pylab inline\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\nWith \ninline\n, graphics will be printed within the notebook as opposed to being printed in another window (a new window which pops open).\n\n\n\n\n# Make a line plot: year on the x-axis, pop on the y-axis\nplt.plot(year, pop)\nplt.show()\n\n\n\n\n\n\nScatter plot\n\n\neco = np.recfromcsv('economic.csv', delimiter=';', names=True, dtype=None)\n\n# gdp_cap, life_exp, pop\ngdp_cap = eco['gdp_cap']\nlife_exp = eco['life_exp']\npop = eco['pop']\n\n\n\n\n# Change the line plot to a scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Put the x-axis on a logarithmic scale\nplt.xscale('log')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n# Build Scatter plot\nplt.scatter(pop, life_exp)\n\n# Show plot\nplt.show()\n\n# There's no clear relationship between population and life expectancy, which makes perfect sense.\n\n\n\n\n\n\nHistograms\n\n\n# Create histogram of life_exp data (bins = 10 by default)\nplt.hist(life_exp)\n\n# Display histogram\nplt.show()\n\n\n\n\n\n\n# Build histogram with 5 bins\nplt.hist(life_exp, bins = 5)\n\n# Show and clean up plot\nplt.show()\nplt.clf() # clean up\n\n# Build histogram with 20 bins\nplt.hist(life_exp, bins = 20)\n\n# Show and clean up again\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n<matplotlib.figure.Figure at 0x7578cf8>\n\n\n\nLabel\n\n\n x, y, label\n\n\n# Basic scatter plot, log scale\nplt.scatter(gdp_cap, life_exp)\nplt.xscale('log') \n\n# Strings\nxlab = 'GDP per Capita [in USD]'\nylab = 'Life Expectancy [in years]'\ntitle = 'World Development in 2007'\n\n# Add axis labels\nplt.xlabel(xlab)\nplt.ylabel(ylab)\n\n# Add title\nplt.title(title)\n\n# After customizing, display the plot\nplt.show()\n\n\n\n\n\n\n# Scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\n\n# Definition of tick_val and tick_lab\ntick_val = [1000,10000,100000]\ntick_lab = ['1k','10k','100k']\n\n# Adapt the ticks on the x-axis\nplt.xticks(tick_val, tick_lab)\n\n# After customizing, display the plot\nplt.show()\n\n\n\n\n\n\nA plotting project: Gapminder\n\u00b6\n\n\nSize, the 3rd dimension\n\n\n\n\nA little project that emulates \nGapminder\n.\n\n\n\n\n# Store pop as a numpy array: np_pop\nnp_pop = np.array(pop)\n# array([])\n\n# Double np_pop\nnp_pop = np_pop * 2\n\n# Update: set s argument to np_pop\nplt.scatter(gdp_cap, life_exp, s = np_pop) # s = size of the bubble\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\nColors\n\n\n# adding con\ncon = ['red', 'green', 'blue', 'blue', 'yellow', 'black', 'green', 'red', 'red', 'green', 'blue', 'yellow', 'green', 'blue', 'yellow', 'green', 'blue', 'blue', 'red', 'blue', 'yellow', 'blue', 'blue', 'yellow', 'red', 'yellow', 'blue', 'blue', 'blue', 'yellow', 'blue', 'green', 'yellow', 'green', 'green', 'blue', 'yellow', 'yellow', 'blue', 'yellow', 'blue', 'blue', 'blue', 'green', 'green', 'blue', 'blue', 'green', 'blue', 'green', 'yellow', 'blue', 'blue', 'yellow', 'yellow', 'red', 'green', 'green', 'red', 'red', 'red', 'red', 'green', 'red', 'green', 'yellow', 'red', 'red', 'blue', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'red', 'blue', 'blue', 'blue', 'yellow', 'red', 'green', 'blue', 'blue', 'red', 'blue', 'red', 'green', 'black', 'yellow', 'blue', 'blue', 'green', 'red', 'red', 'yellow', 'yellow', 'yellow', 'red', 'green', 'green', 'yellow', 'blue', 'green', 'blue', 'blue', 'red', 'blue', 'green', 'blue', 'red', 'green', 'green', 'blue', 'blue', 'green', 'red', 'blue', 'blue', 'green', 'green', 'red', 'red', 'blue', 'red', 'blue', 'yellow', 'blue', 'green', 'blue', 'green', 'yellow', 'yellow', 'yellow', 'red', 'red', 'red', 'blue', 'blue']\nprint(con)\n\n\n\n\n['red', 'green', 'blue', 'blue', 'yellow', 'black', 'green', 'red', 'red', 'green', 'blue', 'yellow', 'green', 'blue', 'yellow', 'green', 'blue', 'blue', 'red', 'blue', 'yellow', 'blue', 'blue', 'yellow', 'red', 'yellow', 'blue', 'blue', 'blue', 'yellow', 'blue', 'green', 'yellow', 'green', 'green', 'blue', 'yellow', 'yellow', 'blue', 'yellow', 'blue', 'blue', 'blue', 'green', 'green', 'blue', 'blue', 'green', 'blue', 'green', 'yellow', 'blue', 'blue', 'yellow', 'yellow', 'red', 'green', 'green', 'red', 'red', 'red', 'red', 'green', 'red', 'green', 'yellow', 'red', 'red', 'blue', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'red', 'blue', 'blue', 'blue', 'yellow', 'red', 'green', 'blue', 'blue', 'red', 'blue', 'red', 'green', 'black', 'yellow', 'blue', 'blue', 'green', 'red', 'red', 'yellow', 'yellow', 'yellow', 'red', 'green', 'green', 'yellow', 'blue', 'green', 'blue', 'blue', 'red', 'blue', 'green', 'blue', 'red', 'green', 'green', 'blue', 'blue', 'green', 'red', 'blue', 'blue', 'green', 'green', 'red', 'red', 'blue', 'red', 'blue', 'yellow', 'blue', 'green', 'blue', 'green', 'yellow', 'yellow', 'yellow', 'red', 'red', 'red', 'blue', 'blue']\n\n\n\n# The Gapminder data contains a list continent with the continent each country belongs to.\n# A dictionary is constructed that maps continents onto colors:\ndict = {\n    'Asia':'red',\n    'Europe':'green',\n    'Africa':'blue',\n    'Americas':'yellow',\n    'Oceania':'black'\n}\n\n# Specify c and alpha inside plt.scatter()\nplt.scatter(x = gdp_cap, y = life_exp, s = np_pop * 2, c = con, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nAdditional Customizations\n\n\n# Scatter plot\nplt.scatter(x = gdp_cap, y = life_exp, s = np_pop * 2, c = con, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])\n\n# Additional customizations\nplt.text(1550, 71, 'India')\nplt.text(5700, 80, 'China')\n\n# Add grid() call\nplt.grid(True)\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nList\n\n\n# Definition of countries and capital\ncountries = ['spain', 'france', 'germany', 'norway']\ncapitals = ['madrid', 'paris', 'berlin', 'oslo']\n\n# Get index of 'germany': ind_ger\nind_ger = countries.index('germany')\nprint(ind_ger)\n\n# Use ind_ger to print out capital of Germany\nprint(capitals[ind_ger])\n\n\n\n\n2\nberlin\n\n\n\nDictionary\n\n\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }\n\n# Print out the keys in europe\nprint(europe.keys())\n\n# Print out value that belongs to key 'norway'\nprint(europe['norway'])\n\n\n\n\ndict_keys(['france', 'norway', 'spain', 'germany'])\noslo\n\n\n\n# Add italy to europe\neurope['italy'] = 'rome'\n\n# Print out italy in europe\nprint('italy' in europe)\n\n\n\n\nTrue\n\n\n\n# Add italy to europe\neurope['italy'] = 'rome'\n\n# Print out italy in europe\nprint('italy' in europe)\n\n\n\n\nTrue\n\n\n\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'bonn', \n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', \n          'australia':'vienna' }\n\n# Update capital of germany\neurope['germany'] = 'berlin'\n\n# Remove australia\ndel(europe['australia'])\n\n# Print europe\nprint(europe)\n\n\n\n\n{'france': 'paris', 'norway': 'oslo', 'poland': 'warsaw', 'italy': 'rome', 'spain': 'madrid', 'germany': 'berlin'}\n\n\n\n# Dictionary of dictionaries\neurope = { 'spain': { 'capital':'madrid', 'population':46.77 },\n           'france': { 'capital':'paris', 'population':66.03 },\n           'germany': { 'capital':'berlin', 'population':80.62 },\n           'norway': { 'capital':'oslo', 'population':5.084 } }\n\n\n# Print out the capital of France\nprint(europe['france']['capital'])\n\n# Create sub-dictionary data\ndata = {\n    'capital': 'rome',\n    'population': 59.83\n}\n\n# Add data to europe under key 'italy'\neurope['italy'] = data\n\n# Print europe\nprint(europe)\n\n\n\n\nparis\n{'france': {'capital': 'paris', 'population': 66.03}, 'italy': {'capital': 'rome', 'population': 59.83}, 'norway': {'capital': 'oslo', 'population': 5.084}, 'spain': {'capital': 'madrid', 'population': 46.77}, 'germany': {'capital': 'berlin', 'population': 80.62}}\n\n\n\nPandas: data frame\n\u00b6\n\n\n\n\nAn Overview.\n\n\nTabular data are rectangular or 2D. Numpy can handle that.\n\n\nBut, Numpy is good with similar data: all str, all float or all integer.\n\n\nPandas is a data frame that can mix diverse data: str, float, and integer.\n\n\nImport the \npandas\n package as \nnp\n.\n\n\n\n\nimport pandas as pd\n\n\n\n\n\n\nStart with pre-defined lists.\n\n\n\n\nnames = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\ndr =  [True, False, False, False, True, True, True]\ncpc = [809, 731, 588, 18, 200, 70, 45]\n\n\n\n\n# Create dictionary my_dict with three key:value pairs: my_dict\nmy_dict = {\n    'country': names,\n    'drives_right': dr,\n    'cars_per_cap': cpc\n}\n\n\n\n\n\n\nBuild DataFrame \ncars\n from \nmy_dict\n: \ncars\n.\n\n\n\n\n convert, dictionary, data frame\n\n\ncars = pd.DataFrame(my_dict)\n\n# Print cars\nprint(cars)\n\n\n\n\n   cars_per_cap        country drives_right\n0           809  United States         True\n1           731      Australia        False\n2           588          Japan        False\n3            18          India        False\n4           200         Russia         True\n5            70        Morocco         True\n6            45          Egypt         True\n\n\n\n\n\nAdd row labels.\n\n\n\n\nrow_labels = ['US', 'AUS', 'JAP', 'IN', 'RU', 'MOR', 'EG']\n\n# Specify row labels of cars\ncars.index = row_labels\n\n# Print cars again\nprint(cars)\n\n\n\n\n     cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\nIN             18          India        False\nRU            200         Russia         True\nMOR            70        Morocco         True\nEG             45          Egypt         True\n\n\n\n\n\nImport data: \u2018cars.csv\u2019 to create DataFrame \ncars\n.\n\n\n\n\ncars2 = pd.read_csv('cars.csv', sep = ';')\n\n\n\n\nOther parameters: \nindex_col\n, \nheader\n, \ndelimiter\n, \nnames\n, \nindex_col\n.\n\n\n\n\nAbove all, here are a few commands to extract, subset, parse:\n\n\n\n\nmy_array[r, c]\n\nmy_pandas['col'] as a series\nmy_pandas[['col']] as a d.f.\nmy_pandas[['col1', 'col2']]\n\nmy_pandas[1]\nmy_pandas[1:3]\n\nmy_pandas.loc['row'] as a series\nmy_pandas.loc[['row']] as a d.f\nmy_pandas.loc[['row1', 'row2']] \n\nmy_pandas.loc[['col1', 'col2'], ['row1', 'row2']] \nmy_pandas.loc[:, ['row1', 'row2']] \nmy_pandas.loc[['col1', 'col2'], :] \n\nmy_pandas.iloc[1] as a series\nmy_pandas.iloc[[1]] as a d.f\nmy_pandas.iloc[[1,2]] \n\nmy_pandas.iloc[[1, 2], [1, 2]] \nmy_pandas.iloc[:, [1, 2]] \nmy_pandas.iloc[[1, 2], :]\n\n\n\n\n\n\nApply these commands.\n\n\n\n\n# Print out country column as Pandas Series\nprint(cars2['country'])\n\n# Print out country column as Pandas DataFrame\nprint(cars2[['country']])\n\n# Print out DataFrame with country and drives_right columns\nprint(cars2[['country', 'drives_right']])\n\n\n\n\n0    United States\n1        Australia\n2            Japan\n3            India\n4           Russia\n5          Morocco\n6            Egypt\nName: country, dtype: object\n         country\n0  United States\n1      Australia\n2          Japan\n3          India\n4         Russia\n5        Morocco\n6          Egypt\n         country drives_right\n0  United States         True\n1      Australia        False\n2          Japan        False\n3          India        False\n4         Russia         True\n5        Morocco         True\n6          Egypt         True\n\n\n\n# Print out first 3 observations\nprint(cars[0:3])\n\n# Print out fourth, fifth and sixth observation\nprint(cars[3:6])\n\n\n\n\n     cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\n     cars_per_cap  country drives_right\nIN             18    India        False\nRU            200   Russia         True\nMOR            70  Morocco         True\n\n\n\n# Print out observation for Japan\nprint(cars.loc[['JAP']])\n\n# Print out observations for Australia and Egypt\nprint(cars.loc[['AUS', 'EG']])\n\n\n\n\n     cars_per_cap country drives_right\nJAP           588   Japan        False\n     cars_per_cap    country drives_right\nAUS           731  Australia        False\nEG             45      Egypt         True\n\n\n\n# Print out drives_right value of Morocco\nprint(cars.loc[['MOR'], ['drives_right']])\n\n# Print sub-DataFrame\nprint(cars.loc[['RU', 'MOR'], ['country', 'drives_right']])\n\n\n\n\n    drives_right\nMOR         True\n     country drives_right\nRU    Russia         True\nMOR  Morocco         True\n\n\n\n# Print out drives_right column as Series\nprint(cars.loc[:,'drives_right'])\n\n# Print out drives_right column as DataFrame\nprint(cars.loc[:,['drives_right']])\n\n# Print out car;, s_per_cap and drives_right as DataFrame\nprint(cars.loc[:, ['cars_per_cap', 'drives_right']])\n\n\n\n\nUS      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool\n    drives_right\nUS          True\nAUS        False\nJAP        False\nIN         False\nRU          True\nMOR         True\nEG          True\n     cars_per_cap drives_right\nUS            809         True\nAUS           731        False\nJAP           588        False\nIN             18        False\nRU            200         True\nMOR            70         True\nEG             45         True\n\n\n\n\n\nA series is \n[]\n.\n\n\nA data frame is \n[[]]\n.\n\n\n\n\n# Extract drives_right column as Series: dr\ndr = cars.loc[:,'drives_right'] # or cars['drives_right']\n\n# cars.iloc[:,2]\nprint(dr)\n\n\n\n\nUS      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool\n\n\n\n\n\nUse \ndr\n, a boolean series, to subset (row job) \ncars\n.\n\n\n\n\n# dr will extract the True (1) rows\nsel = cars[dr]\n\n# Or, convert code to a one-liner\nsel = cars[cars['drives_right'] == True]\n\n# Print sel\nprint(sel)\n\n\n\n\n     cars_per_cap        country drives_right\nUS            809  United States         True\nRU            200         Russia         True\nMOR            70        Morocco         True\nEG             45          Egypt         True\n\n\n\n# Create series car_maniac: observations that have a cars_per_cap over 500\ncpc = cars.loc[:, 'cars_per_cap']\nmany_cars = cpc > 500\ncar_maniac = cars[many_cars]\n\n# Print car_maniac\nprint(car_maniac)\n\n\n\n\n     cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\n\n\n\n# Create medium: observations with cars_per_cap between 100 and 500\ncpc = cars.loc[:,'cars_per_cap']\nbetween = np.logical_and(cpc > 100, cpc < 500) # Numpy\nmedium = cars[between]\n\n# Print medium\nprint(medium)\n\n\n\n\n    cars_per_cap country drives_right\nRU           200  Russia         True\n\n\n\nLooping\n\u00b6\n\n\nLoops\n\n\n# areas list\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n\n\n\n\n\nChange for-loop to use \nenumerate()\n.\n\n\n\n\n enumerate\n\n\nfor index, a in enumerate(areas) :\n    print(\"room \" + str(index) + \": \" + str(a))\n\n\n\n\nroom 0: 11.25\nroom 1: 18.0\nroom 2: 20.0\nroom 3: 10.75\nroom 4: 9.5\n\n\n\n\n\nAnother loop.\n\n\n\n\n# house list of lists\nhouse = [[\"hallway\", 11.25], \n         [\"kitchen\", 18.0], \n         [\"living room\", 20.0], \n         [\"bedroom\", 10.75], \n         [\"bathroom\", 9.50]]\n\n\n\n\n# Build a for-loop from scratch\nfor room in house:\n    print(\"the \" + room[0].capitalize() + \" is \" + str(room[1]) + \" sqm\")\n\n\n\n\nthe Hallway is 11.25 sqm\nthe Kitchen is 18.0 sqm\nthe Living room is 20.0 sqm\nthe Bedroom is 10.75 sqm\nthe Bathroom is 9.5 sqm\n\n\n\n\n\nAnother loop.\n\n\n\n\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'bonn', \n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'australia':'vienna' }\n\n\n\n\n# Iterate over europe\nfor country, capital in europe.items():\n    print(\"the capital of \" + str(country) + \" is \" + str(capital)) \n\n\n\n\nthe capital of australia is vienna\nthe capital of france is paris\nthe capital of norway is oslo\nthe capital of poland is warsaw\nthe capital of italy is rome\nthe capital of spain is madrid\nthe capital of germany is bonn\n\n\n\nLoop over a NumPy array\n\n\n\n\n\n\nIf you\u2019re dealing with a 1D Numpy array, looping over all elements can be as simple as: \nfor x in my_array : ...\n\n\n\n\n\n\nIf you\u2019re dealing with a 2D Numpy array, it\u2019s more complicated. \n\n\n\n\nA 2D array is built up of multiple 1D arrays. \n\n\n\n\nTo explicitly iterate over all separate elements of a multi-dimensional array, you\u2019ll need this syntax: \nfor x in np.nditer(my_array) : ...\n\n\n\n\n\n\nTwo Numpy arrays that you might recognize from the intro course are available in your Python session: np_height, a Numpy array containing the heights of Major League Baseball players, and np_baseball, a 2D Numpy array that contains both the heights (first column) and weights (second column) of those players.\n\n\n\n\n\n\nLoop over a Pandas data frame\n\n\n\n\nIterating over a Pandas DataFrame is typically done with the iterrows() method. \n\n\nUsed in a for loop, every observation is iterated over and on every iteration the row label and actual row contents are available: \nfor lab, row in brics.iterrows() : ...\n\n\nIn this and the following exercises you will be working on the cars DataFrame. \n\n\nIt contains information on the cars per capita and whether people drive right or left for seven countries in the world.\n\n\n\n\n# Iterate over rows of cars\nfor lab, row in cars.iterrows():\n    print(lab) # row label\n    print(row) # row content\n\n\n\n\nUS\ncars_per_cap              809\ncountry         United States\ndrives_right             True\nName: US, dtype: object\nAUS\ncars_per_cap          731\ncountry         Australia\ndrives_right        False\nName: AUS, dtype: object\nJAP\ncars_per_cap      588\ncountry         Japan\ndrives_right    False\nName: JAP, dtype: object\nIN\ncars_per_cap       18\ncountry         India\ndrives_right    False\nName: IN, dtype: object\nRU\ncars_per_cap       200\ncountry         Russia\ndrives_right      True\nName: RU, dtype: object\nMOR\ncars_per_cap         70\ncountry         Morocco\ndrives_right       True\nName: MOR, dtype: object\nEG\ncars_per_cap       45\ncountry         Egypt\ndrives_right     True\nName: EG, dtype: object\n\n\n\n# Adapt the for-loop\nfor lab, row in cars.iterrows() :\n    print(str(lab) + \": \" + str(row['cars_per_cap']))\n\n\n\n\n\n\nCode a for-loop that adds the \nCOUNTRY\n column with uppercase version of the \ncountry\n names in the \ncountry\n column.\n\n\n\n\nfor lab, row in cars.iterrows():\n    cars.loc[lab, \"COUNTRY\"] = (row[\"country\"].upper())\n\n# Print cars\nprint(cars)\n\n\n\n\n     cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT\n\n\n\n\n\nReplace the for-loop with a one-liner that uses \n.apply(str.upper)\n. \n\n\nThe call should give the same result: a column \nCOUNTRY\nshould be added to cars, containing an uppercase version of the country names.\n\n\n\n\ncars[\"COUNTRY\"] = cars[\"country\"].apply(str.upper)\nprint(cars)\n\n\n\n\n     cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT\n\n\n\nA NumPy project: random walk & Monte Carlo simulation\n\u00b6\n\n\n# Set the seed\nnp.random.seed(123)\n\n# Generate and print random float between 0 and 1\nprint(np.random.rand())\n\n\n\n\n0.6964691855978616\n\n\n\n# Use randint() to simulate a dice (1,2,3,4,5,6)\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\n\n\n\n\n5\n3\n2\n4\n3\n4\n2\n\n\n\n\n\nBuild a random walk.\n\n\n\n\n# Starting step\nstep = 50\n\n# Roll the dice\ndice = np.random.randint(1,7)\n\n# Finish the control construct\n'''\nIf dice is 1 or 2, you go one step down.\nif dice is 3, 4 or 5, you go one step up.\nElse, you throw the dice again. The number of eyes is the number of steps you go up.\n'''\nif dice <= 2 :\n    step = step - 1\nelif dice <= 5 :\n    step = step + 1\nelse :\n    step = step + np.random.randint(1,7)\n\n# Print out dice and step\nprint(dice), print(step)\n\n\n\n\n2\n49\n\n(None, None)\n\n\n\noutcomes = []\n\nfor x in range(10) :\n    coin = np.random.randint(0, 2)\nif coin == 0 :\n    outcomes.append(\"heads\")\nelse :\n    outcomes.append(\"tails\")\n\nprint(outcomes)\n\n\n\n\n['tails']\n\n\n\ntails = [0]\n\nfor x in range(10) :\n    coin = np.random.randint(0, 2)\n\n    tails.append(coin)\n\nprint(tails)\n\n\n\n\n[0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1]\n\n\n\n\n\nInitialize \nrandom_walk\n.\n\n\n\n\nrandom_walk = [0]\n\n# Complete the ___\nfor x in range(100) :\n    # Set step: last element in random_walk\n    step = random_walk[-1]\n\n    # Roll the dice\n    dice = np.random.randint(1,7)\n\n    # Determine next step\n    if dice <= 2:\n        step = max(0, step - 1) # make sure that 'step' never goes below 0 when you decrease it\n    elif dice <= 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    # append next_step to random_walk\n    random_walk.append(step)\n\n# Print random_walk\nprint(random_walk)\n\n\n\n\n[0, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 10, 12, 11, 12, 13, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 19, 21, 20, 19, 20, 21, 20, 22, 23, 24, 25, 26, 27, 28, 27, 28, 29, 34, 35, 34, 33, 32, 31, 32, 33, 34, 39, 40, 39, 40, 41, 42, 43, 44, 45, 44, 43, 44, 43, 49, 48, 49, 48, 49, 48, 49, 53, 57, 59, 61, 60, 61, 63, 62, 68, 69, 71, 72, 71, 72, 73, 74, 73, 74, 75, 76, 78, 77, 76, 77, 83, 88, 87, 86]\n\n\n\n\n\nPlot \nrandom_walk\n.\n\n\n\n\nplt.plot(range(101), random_walk)\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\nBuild a Monte Carlo as an alternative.\n\n\n\n\n# Initialize all_walks\nall_walks = []\n\n# Simulate random walk 10 times\nfor i in range(10) :\n\n    # Code from before\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n\n    # Append random_walk to all_walks\n    all_walks.append(random_walk) \n\n# Print all_walks\nprint(all_walks)\n\n\n\n\n[[0, 4, 5, 6, 7, 9, 8, 9, 8, 9, 8, 7, 13, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 20, 19, 18, 19, 18, 19, 18, 19, 20, 24, 25, 24, 30, 29, 28, 29, 28, 27, 28, 27, 31, 30, 31, 30, 31, 30, 31, 33, 32, 31, 30, 31, 30, 35, 36, 37, 36, 35, 36, 35, 36, 35, 40, 41, 40, 39, 38, 37, 38, 39, 43, 49, 50, 51, 52, 53, 52, 53, 55, 56, 57, 58, 57, 56, 57, 56, 57, 58, 59, 58, 59, 60, 61, 60, 59, 60, 61, 66], [0, 1, 2, 7, 6, 7, 6, 7, 8, 9, 10, 9, 15, 14, 15, 14, 13, 14, 18, 19, 20, 21, 22, 21, 20, 19, 18, 17, 18, 19, 20, 21, 22, 23, 22, 23, 24, 23, 24, 25, 28, 27, 28, 27, 28, 31, 32, 33, 34, 33, 32, 35, 36, 37, 38, 37, 36, 37, 40, 41, 46, 47, 46, 47, 46, 47, 46, 52, 51, 50, 51, 53, 52, 51, 50, 51, 52, 53, 54, 58, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 74, 73, 74, 75, 74, 80, 79, 80, 81, 80], [0, 0, 1, 0, 0, 6, 5, 4, 5, 6, 5, 4, 3, 2, 3, 9, 10, 13, 14, 20, 21, 22, 28, 27, 33, 32, 33, 34, 35, 34, 40, 41, 40, 41, 40, 41, 40, 41, 40, 41, 45, 46, 48, 47, 48, 47, 46, 47, 46, 47, 46, 50, 54, 53, 52, 51, 52, 53, 57, 58, 59, 63, 62, 61, 60, 61, 62, 64, 63, 62, 63, 64, 66, 69, 74, 75, 74, 75, 76, 77, 78, 79, 78, 79, 80, 86, 85, 90, 89, 93, 92, 96, 95, 98, 99, 98, 99, 105, 104, 103, 102], [0, 4, 3, 2, 3, 4, 3, 4, 5, 6, 7, 6, 5, 4, 5, 4, 3, 7, 8, 10, 14, 20, 19, 18, 19, 20, 21, 20, 21, 20, 21, 22, 21, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 35, 38, 39, 38, 37, 38, 39, 40, 39, 38, 37, 36, 37, 38, 39, 40, 41, 42, 43, 42, 43, 44, 46, 45, 46, 47, 50, 52, 53, 52, 51, 50, 49, 48, 49, 48, 49, 51, 52, 53, 52, 53, 52, 51, 52, 51, 50, 49, 50, 49, 48, 49, 50, 51, 53, 54], [0, 1, 0, 0, 1, 7, 6, 7, 8, 13, 12, 13, 12, 13, 14, 13, 14, 15, 21, 22, 23, 24, 23, 25, 26, 27, 28, 27, 28, 29, 30, 31, 30, 31, 30, 31, 32, 31, 32, 36, 37, 40, 41, 45, 46, 45, 46, 47, 46, 45, 50, 51, 52, 51, 50, 51, 52, 53, 52, 56, 55, 56, 57, 58, 59, 60, 61, 62, 61, 60, 59, 60, 61, 65, 66, 65, 66, 67, 66, 72, 73, 74, 75, 74, 75, 76, 79, 78, 79, 78, 77, 76, 77, 78, 80, 81, 82, 86, 87, 86, 85], [0, 1, 2, 1, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 4, 5, 4, 3, 2, 3, 4, 5, 6, 7, 12, 16, 15, 16, 15, 14, 13, 14, 13, 14, 15, 14, 18, 19, 18, 19, 18, 17, 18, 17, 21, 22, 23, 24, 25, 26, 25, 26, 27, 28, 29, 30, 29, 34, 35, 36, 35, 36, 35, 36, 37, 36, 37, 42, 43, 44, 43, 44, 45, 46, 45, 46, 45, 46, 47, 46, 45, 44, 45, 46, 45, 44, 43, 44, 48, 49, 50, 51, 52, 53, 52, 53, 54, 53, 54, 59, 60], [0, 0, 0, 1, 0, 0, 0, 4, 5, 6, 7, 6, 7, 8, 9, 10, 11, 10, 9, 12, 11, 10, 9, 8, 9, 15, 16, 15, 16, 17, 16, 15, 16, 17, 18, 17, 21, 22, 21, 23, 24, 23, 24, 25, 26, 27, 28, 29, 28, 27, 28, 29, 28, 29, 30, 29, 28, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 39, 40, 41, 42, 43, 44, 43, 42, 48, 49, 50, 49, 48, 47, 51, 52, 56, 55, 61, 62, 63, 67, 68, 67, 66, 67, 68, 69, 70, 69, 75, 76, 75], [0, 4, 5, 4, 5, 4, 10, 16, 17, 16, 17, 18, 19, 20, 21, 20, 23, 22, 24, 25, 31, 30, 31, 32, 31, 30, 31, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 43, 44, 45, 46, 45, 44, 43, 44, 43, 47, 46, 45, 46, 48, 49, 54, 53, 54, 55, 59, 58, 59, 60, 59, 58, 59, 60, 61, 60, 59, 58, 59, 58, 57, 58, 57, 56, 55, 56, 57, 56, 55, 54, 55, 56, 57, 56, 55, 56, 57, 58, 59, 58, 59, 58, 59, 60, 61, 62], [0, 1, 6, 11, 10, 11, 12, 11, 12, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 18, 19, 20, 21, 20, 19, 18, 20, 21, 22, 21, 20, 19, 20, 21, 22, 21, 20, 21, 24, 29, 32, 33, 34, 40, 41, 42, 43, 42, 44, 49, 50, 51, 52, 53, 54, 55, 54, 55, 56, 57, 58, 59, 61, 65, 66, 67, 68, 69, 73, 78, 77, 76, 75, 74, 77, 78, 79, 80, 79, 78, 81, 82, 81, 80, 79, 80, 81, 82, 83, 82, 83, 82, 83, 84, 83, 84, 85, 86, 87, 88, 89], [0, 1, 0, 0, 1, 2, 5, 6, 5, 4, 5, 6, 7, 12, 11, 10, 9, 8, 7, 6, 7, 6, 5, 6, 9, 8, 7, 8, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 26, 27, 28, 29, 30, 31, 30, 29, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 43, 42, 41, 40, 39, 40, 41, 42, 41, 40, 39, 38, 37, 36, 37, 41, 45, 46, 47, 46, 45, 46, 47, 48, 54, 55, 54, 53, 54, 53, 54, 53, 54, 55, 54, 55, 54, 53, 54, 55, 54, 55, 54]]\n\n\n\nall_walks = []\nfor i in range(10) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Convert all_walks to Numpy array: np_aw\n# all_walks is a list of 10 lists\nnp_aw = np.array(all_walks)\n# np_aw is an array of 10 horizontal vectors (a matrix...)\n\n# Plot np_aw and show\nplt.plot(np_aw)\nplt.show()\n\n\n\n\n\n\n\n\nNow every row in \nnp_all_walks\n represents the position after 1 throw (of dice) for the 10 random walks.\n\n\n\n\n# Clear the figure\nplt.clf()\n\n# Transpose np_aw: np_aw_t\nnp_aw_t = np.transpose(np_aw)\n\n# Plot np_aw_t and show\nplt.plot(np_aw_t)\nplt.show()\n\n\n\n\n\n\n\n\n10 randoms walks from 0 to 100 (the dice only had 6 possibilities).\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(123)\nall_walks = []\n\n# Simulate random walk 250 times\nfor i in range(250) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n\n        # Implement clumsiness\n        # if a random float is less or equal to 0.001\n        # randint = integer\n        # rand = float\n        if np.random.rand() <= 0.001 :\n            step = 0\n\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\nplt.plot(np_aw_t)\nplt.show()\n\n\n\n\n\n\n\n\nWhat are the odds that you\u2019ll reach 60 steps high on the Empire State Building? \n\n\nBasically, you want to know about the end points of all the random walks you\u2019ve simulated. \n\n\nThese end points have a certain distribution that you can visualize with a histogram.\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(123)\nall_walks = []\n\n# Simulate random walk 1000 times\nfor i in range(1000) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        if np.random.rand() <= 0.001 :\n            step = 0\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\n\n# Select last row from np_aw_t: ends\nends = np_aw_t[-1]\n\n# Plot histogram of ends, display plot\nplt.hist(ends)\nplt.show()\n\n\n\n\n\n\n\n\nThe histogram of the previous exercise was created from a Numpy array \nends\n, that contains 1,000 integers. \n\n\nEach integer represents the end point of a random walk. \n\n\nTo calculate the change that this end point is higher than or equal to 60, you can count the number of integers in ends that are greater than or equal to 60 and divide that number by 1000, the total number of simulations.\n\n\nWell then, what\u2019s the estimated chance that you\u2019ll reach 60 steps high if you play this Empire State Building game? \n\n\nThe \nends\n array is everything you need.\n\n\n\n\nsum(ends >= 60) / 1000\n\n# 78.8%\n\n\n\n\n0.78800000000000003",
            "title": "Python for Data Science"
        },
        {
            "location": "/Python for Data Science/#basic-operations",
            "text": "Print is a function   In Python 3:   print()   While in Python 2:   print \"test\"\nprint \"-\" * 25\nprint 10\nprint 5 + 5\nprint variable\nprint function()  print(\"Python 3.x\")  Python 3.x   Addition and subtraction.   print(5 + 5)\nprint(5 - 5)  10\n0   Multiplication and division.   print(3 * 5)\nprint(10 / 2)  15\n5.0   Exponentiation.   print(4 ** 2)  16   Modulo.   print(18 % 7)  4   How much is your $100 worth after 7 years?   print(100 * ((1 + 0.10)**7))  194.87171000000012  # Create a variable savings\nsavings = 100\n\n# Create a variable factor\nfactor = 1.10\n\n# Calculate result\nresult = savings * factor ** 7\n\n# Print out result\nprint(result)  194.87171000000012   Several variables to experiment with.   savings = 100\nfactor = 1.10\ndesc = \"compound interest\"\n\n# Assign product of factor and savings to year1\nyear1 = savings * factor\n\n# Print the type of year1\nprint(type(year1))  <class 'float'>  # Assign sum of  desc and  desc to doubledesc.\ndoubledesc = desc + desc\n\n# Print out doubledesc\nprint(doubledesc)  compound interestcompound interest  # Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\nprint(result)  194.87171000000012",
            "title": "Basic operations"
        },
        {
            "location": "/Python for Data Science/#concatenating-help-printing-listing",
            "text": "Concatenation  print(\"I started with $\" + str(savings) + \" and now have $\" + str(result) + \". Awesome!\")  I started with $100 and now have $194.87171000000012. Awesome!  # Definition of pi_string\npi_string = \"3.1415926\"\n\n# Convert pi_string into float: pi_float\npi_float = float(pi_string)\nprint(pi_float)  3.1415926  Help  # Inline\nhelp(max)  Help on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -> value\n    max(arg1, arg2, *args, *[, key=func]) -> value\n\n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.  # Offline\n?max  Contiguous printing   horizontal, print  # Print out room and room_up\nprint('room'); print('room_up')  room\nroom_up  Index  # Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Print out the index of the element 20.0\nprint(areas.index(20.0))  2  # Create list baseball \nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Print out the first and last elements\nprint(baseball[1]); print(baseball[-1])  215\n200",
            "title": "Concatenating, help, printing, listing"
        },
        {
            "location": "/Python for Data Science/#numpy-arrays",
            "text": "An overview with an simple array.  Import the  numpy  package as  np .   import numpy as np   Create a Numpy array from  baseball :  np_baseball .  Transform a list into an array.   np_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))  <class 'numpy.ndarray'>   Again.   # Height list\nheight = [68, 78, 76, 80, 75, 79, 78, 80]\nweight = baseball\n\n# Create array from height with correct units: np_height_m\nnp_height_m = np.array(height) * 0.0254\n\n# Create array from weight with correct units: np_weight_kg \nnp_weight_kg = np.array(weight) * 0.453592\n\n# Calculate the BMI: bmi\nbmi = np_weight_kg / (np_height_m ** 2)\n\n# Print out bmi\nprint(bmi)  [ 27.36860318  24.84546948  25.56171941  23.06945176  23.49812856\n  19.82697406  24.15210754  21.97090644]  # Store weight and height lists as numpy arrays\nnp_weight = np.array(weight)\nnp_height = np.array(height)\n\n# Print out the weight at index 5\nprint(np_weight[5])\n\n# Print out sub-array of np_height: index 100 up to and including index 110\nprint(np_height[1:2])  176\n[78]  List to array   A list in an array is a 2D array or a tabular array.    2 dimension, 2d, 2-d  # Create baseball, a list of lists\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]  # Create a Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)\n\n# Print out the 4th row of np_baseball\nprint(np_baseball[3,:])\n\n# Select the entire second column of np_baseball: np_weight\nnp_weight = np_baseball[:,1]\n\n# Print out height of 4th player\nprint(np_baseball[3,0])  <class 'numpy.ndarray'>\n(4, 2)\n[ 188.    75.2]\n188.0  # Create np_height from np_baseball\nnp_height = np_baseball[:,1]\n\n# Print out the mean of np_height\nprint(np.mean(np_height))\n\n# Print out the median of np_height\nprint(np.median(np_height))  88.7\n88.45  # Print mean weight\navg = np.mean(np_baseball[:,0])\nprint(\"Average: \" + str(avg))\n\n# Print median weight. Replace 'None'\nmed = np.median(np_baseball[:,0])\nprint(\"Median: \" + str(med))\n\n# Print out the standard deviation on weight. Replace 'None'\nstddev = np.std(np_baseball[:,0])\nprint(\"Standard Deviation: \" + str(stddev))  Average: 198.25\nMedian: 199.0\nStandard Deviation: 14.6351460533  # Print out correlation between first and second column. Replace 'None'\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint(\"Correlation: \" + str(corr))  Correlation: [[ 1.          0.95865738]\n [ 0.95865738  1.        ]]  Arrays and logicals  # Create the arrays\nmy_house = np.array([18.0, 20.0, 10.75, 9.50])\nyour_house = np.array([14.0, 24.0, 14.25, 9.0])  # Which areas in my_house are greater than or equal to 18\nprint(my_house >= 18)\n\n# compare two Numpy arrays element-wise\n# which areas in my_house are smaller than the ones in your_house\nprint(my_house[my_house < your_house])  [ True  True False False]\n[ 20.    10.75]  # np.logical_and(), np.logical_or() and np.logical_not()\n\n# my_house greater than 18.5 or smaller than 10\nprint(np.logical_or(my_house > 18.5, my_house < 10))\n\n# Both my_house and your_house smaller than 11\nprint(np.logical_and(my_house < 11, your_house < 11))  [False  True False  True]\n[False False False  True]",
            "title": "NumPy: arrays"
        },
        {
            "location": "/Python for Data Science/#2-intermediate",
            "text": "",
            "title": "2, Intermediate"
        },
        {
            "location": "/Python for Data Science/#plotting-basics",
            "text": "In this section, we use the  matplolib  package for plotting and charting.  In IPython, the package is \u2018stacked\u2019 with the  numpy  packages and other scientific packages under the magic command  %pylab .   Calling  %pylab  is calling the entire scientific stack or Scipy Stack.   Line plot  year = [1950, 1970, 1990, 2010]\npop = [2.519, 3.692, 5.263, 6.972]\n\n# Print the last item from year and pop\nprint(year[-1])\nprint(pop[-1])  2010\n6.972  % pylab inline  Populating the interactive namespace from numpy and matplotlib   With  inline , graphics will be printed within the notebook as opposed to being printed in another window (a new window which pops open).   # Make a line plot: year on the x-axis, pop on the y-axis\nplt.plot(year, pop)\nplt.show()   Scatter plot  eco = np.recfromcsv('economic.csv', delimiter=';', names=True, dtype=None)\n\n# gdp_cap, life_exp, pop\ngdp_cap = eco['gdp_cap']\nlife_exp = eco['life_exp']\npop = eco['pop']  # Change the line plot to a scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Put the x-axis on a logarithmic scale\nplt.xscale('log')\n\n# Show plot\nplt.show()   # Build Scatter plot\nplt.scatter(pop, life_exp)\n\n# Show plot\nplt.show()\n\n# There's no clear relationship between population and life expectancy, which makes perfect sense.   Histograms  # Create histogram of life_exp data (bins = 10 by default)\nplt.hist(life_exp)\n\n# Display histogram\nplt.show()   # Build histogram with 5 bins\nplt.hist(life_exp, bins = 5)\n\n# Show and clean up plot\nplt.show()\nplt.clf() # clean up\n\n# Build histogram with 20 bins\nplt.hist(life_exp, bins = 20)\n\n# Show and clean up again\nplt.show()\nplt.clf()    <matplotlib.figure.Figure at 0x7578cf8>  Label   x, y, label  # Basic scatter plot, log scale\nplt.scatter(gdp_cap, life_exp)\nplt.xscale('log') \n\n# Strings\nxlab = 'GDP per Capita [in USD]'\nylab = 'Life Expectancy [in years]'\ntitle = 'World Development in 2007'\n\n# Add axis labels\nplt.xlabel(xlab)\nplt.ylabel(ylab)\n\n# Add title\nplt.title(title)\n\n# After customizing, display the plot\nplt.show()   # Scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\n\n# Definition of tick_val and tick_lab\ntick_val = [1000,10000,100000]\ntick_lab = ['1k','10k','100k']\n\n# Adapt the ticks on the x-axis\nplt.xticks(tick_val, tick_lab)\n\n# After customizing, display the plot\nplt.show()",
            "title": "Plotting basics"
        },
        {
            "location": "/Python for Data Science/#a-plotting-project-gapminder",
            "text": "Size, the 3rd dimension   A little project that emulates  Gapminder .   # Store pop as a numpy array: np_pop\nnp_pop = np.array(pop)\n# array([])\n\n# Double np_pop\nnp_pop = np_pop * 2\n\n# Update: set s argument to np_pop\nplt.scatter(gdp_cap, life_exp, s = np_pop) # s = size of the bubble\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])\n\n# Display the plot\nplt.show()   Colors  # adding con\ncon = ['red', 'green', 'blue', 'blue', 'yellow', 'black', 'green', 'red', 'red', 'green', 'blue', 'yellow', 'green', 'blue', 'yellow', 'green', 'blue', 'blue', 'red', 'blue', 'yellow', 'blue', 'blue', 'yellow', 'red', 'yellow', 'blue', 'blue', 'blue', 'yellow', 'blue', 'green', 'yellow', 'green', 'green', 'blue', 'yellow', 'yellow', 'blue', 'yellow', 'blue', 'blue', 'blue', 'green', 'green', 'blue', 'blue', 'green', 'blue', 'green', 'yellow', 'blue', 'blue', 'yellow', 'yellow', 'red', 'green', 'green', 'red', 'red', 'red', 'red', 'green', 'red', 'green', 'yellow', 'red', 'red', 'blue', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'red', 'blue', 'blue', 'blue', 'yellow', 'red', 'green', 'blue', 'blue', 'red', 'blue', 'red', 'green', 'black', 'yellow', 'blue', 'blue', 'green', 'red', 'red', 'yellow', 'yellow', 'yellow', 'red', 'green', 'green', 'yellow', 'blue', 'green', 'blue', 'blue', 'red', 'blue', 'green', 'blue', 'red', 'green', 'green', 'blue', 'blue', 'green', 'red', 'blue', 'blue', 'green', 'green', 'red', 'red', 'blue', 'red', 'blue', 'yellow', 'blue', 'green', 'blue', 'green', 'yellow', 'yellow', 'yellow', 'red', 'red', 'red', 'blue', 'blue']\nprint(con)  ['red', 'green', 'blue', 'blue', 'yellow', 'black', 'green', 'red', 'red', 'green', 'blue', 'yellow', 'green', 'blue', 'yellow', 'green', 'blue', 'blue', 'red', 'blue', 'yellow', 'blue', 'blue', 'yellow', 'red', 'yellow', 'blue', 'blue', 'blue', 'yellow', 'blue', 'green', 'yellow', 'green', 'green', 'blue', 'yellow', 'yellow', 'blue', 'yellow', 'blue', 'blue', 'blue', 'green', 'green', 'blue', 'blue', 'green', 'blue', 'green', 'yellow', 'blue', 'blue', 'yellow', 'yellow', 'red', 'green', 'green', 'red', 'red', 'red', 'red', 'green', 'red', 'green', 'yellow', 'red', 'red', 'blue', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'red', 'blue', 'blue', 'blue', 'yellow', 'red', 'green', 'blue', 'blue', 'red', 'blue', 'red', 'green', 'black', 'yellow', 'blue', 'blue', 'green', 'red', 'red', 'yellow', 'yellow', 'yellow', 'red', 'green', 'green', 'yellow', 'blue', 'green', 'blue', 'blue', 'red', 'blue', 'green', 'blue', 'red', 'green', 'green', 'blue', 'blue', 'green', 'red', 'blue', 'blue', 'green', 'green', 'red', 'red', 'blue', 'red', 'blue', 'yellow', 'blue', 'green', 'blue', 'green', 'yellow', 'yellow', 'yellow', 'red', 'red', 'red', 'blue', 'blue']  # The Gapminder data contains a list continent with the continent each country belongs to.\n# A dictionary is constructed that maps continents onto colors:\ndict = {\n    'Asia':'red',\n    'Europe':'green',\n    'Africa':'blue',\n    'Americas':'yellow',\n    'Oceania':'black'\n}\n\n# Specify c and alpha inside plt.scatter()\nplt.scatter(x = gdp_cap, y = life_exp, s = np_pop * 2, c = con, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])\n\n# Show the plot\nplt.show()   Additional Customizations  # Scatter plot\nplt.scatter(x = gdp_cap, y = life_exp, s = np_pop * 2, c = con, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])\n\n# Additional customizations\nplt.text(1550, 71, 'India')\nplt.text(5700, 80, 'China')\n\n# Add grid() call\nplt.grid(True)\n\n# Show the plot\nplt.show()   List  # Definition of countries and capital\ncountries = ['spain', 'france', 'germany', 'norway']\ncapitals = ['madrid', 'paris', 'berlin', 'oslo']\n\n# Get index of 'germany': ind_ger\nind_ger = countries.index('germany')\nprint(ind_ger)\n\n# Use ind_ger to print out capital of Germany\nprint(capitals[ind_ger])  2\nberlin  Dictionary  # Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }\n\n# Print out the keys in europe\nprint(europe.keys())\n\n# Print out value that belongs to key 'norway'\nprint(europe['norway'])  dict_keys(['france', 'norway', 'spain', 'germany'])\noslo  # Add italy to europe\neurope['italy'] = 'rome'\n\n# Print out italy in europe\nprint('italy' in europe)  True  # Add italy to europe\neurope['italy'] = 'rome'\n\n# Print out italy in europe\nprint('italy' in europe)  True  # Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'bonn', \n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', \n          'australia':'vienna' }\n\n# Update capital of germany\neurope['germany'] = 'berlin'\n\n# Remove australia\ndel(europe['australia'])\n\n# Print europe\nprint(europe)  {'france': 'paris', 'norway': 'oslo', 'poland': 'warsaw', 'italy': 'rome', 'spain': 'madrid', 'germany': 'berlin'}  # Dictionary of dictionaries\neurope = { 'spain': { 'capital':'madrid', 'population':46.77 },\n           'france': { 'capital':'paris', 'population':66.03 },\n           'germany': { 'capital':'berlin', 'population':80.62 },\n           'norway': { 'capital':'oslo', 'population':5.084 } }\n\n\n# Print out the capital of France\nprint(europe['france']['capital'])\n\n# Create sub-dictionary data\ndata = {\n    'capital': 'rome',\n    'population': 59.83\n}\n\n# Add data to europe under key 'italy'\neurope['italy'] = data\n\n# Print europe\nprint(europe)  paris\n{'france': {'capital': 'paris', 'population': 66.03}, 'italy': {'capital': 'rome', 'population': 59.83}, 'norway': {'capital': 'oslo', 'population': 5.084}, 'spain': {'capital': 'madrid', 'population': 46.77}, 'germany': {'capital': 'berlin', 'population': 80.62}}",
            "title": "A plotting project: Gapminder"
        },
        {
            "location": "/Python for Data Science/#pandas-data-frame",
            "text": "An Overview.  Tabular data are rectangular or 2D. Numpy can handle that.  But, Numpy is good with similar data: all str, all float or all integer.  Pandas is a data frame that can mix diverse data: str, float, and integer.  Import the  pandas  package as  np .   import pandas as pd   Start with pre-defined lists.   names = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\ndr =  [True, False, False, False, True, True, True]\ncpc = [809, 731, 588, 18, 200, 70, 45]  # Create dictionary my_dict with three key:value pairs: my_dict\nmy_dict = {\n    'country': names,\n    'drives_right': dr,\n    'cars_per_cap': cpc\n}   Build DataFrame  cars  from  my_dict :  cars .    convert, dictionary, data frame  cars = pd.DataFrame(my_dict)\n\n# Print cars\nprint(cars)     cars_per_cap        country drives_right\n0           809  United States         True\n1           731      Australia        False\n2           588          Japan        False\n3            18          India        False\n4           200         Russia         True\n5            70        Morocco         True\n6            45          Egypt         True   Add row labels.   row_labels = ['US', 'AUS', 'JAP', 'IN', 'RU', 'MOR', 'EG']\n\n# Specify row labels of cars\ncars.index = row_labels\n\n# Print cars again\nprint(cars)       cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\nIN             18          India        False\nRU            200         Russia         True\nMOR            70        Morocco         True\nEG             45          Egypt         True   Import data: \u2018cars.csv\u2019 to create DataFrame  cars .   cars2 = pd.read_csv('cars.csv', sep = ';')  Other parameters:  index_col ,  header ,  delimiter ,  names ,  index_col .   Above all, here are a few commands to extract, subset, parse:   my_array[r, c]\n\nmy_pandas['col'] as a series\nmy_pandas[['col']] as a d.f.\nmy_pandas[['col1', 'col2']]\n\nmy_pandas[1]\nmy_pandas[1:3]\n\nmy_pandas.loc['row'] as a series\nmy_pandas.loc[['row']] as a d.f\nmy_pandas.loc[['row1', 'row2']] \n\nmy_pandas.loc[['col1', 'col2'], ['row1', 'row2']] \nmy_pandas.loc[:, ['row1', 'row2']] \nmy_pandas.loc[['col1', 'col2'], :] \n\nmy_pandas.iloc[1] as a series\nmy_pandas.iloc[[1]] as a d.f\nmy_pandas.iloc[[1,2]] \n\nmy_pandas.iloc[[1, 2], [1, 2]] \nmy_pandas.iloc[:, [1, 2]] \nmy_pandas.iloc[[1, 2], :]   Apply these commands.   # Print out country column as Pandas Series\nprint(cars2['country'])\n\n# Print out country column as Pandas DataFrame\nprint(cars2[['country']])\n\n# Print out DataFrame with country and drives_right columns\nprint(cars2[['country', 'drives_right']])  0    United States\n1        Australia\n2            Japan\n3            India\n4           Russia\n5          Morocco\n6            Egypt\nName: country, dtype: object\n         country\n0  United States\n1      Australia\n2          Japan\n3          India\n4         Russia\n5        Morocco\n6          Egypt\n         country drives_right\n0  United States         True\n1      Australia        False\n2          Japan        False\n3          India        False\n4         Russia         True\n5        Morocco         True\n6          Egypt         True  # Print out first 3 observations\nprint(cars[0:3])\n\n# Print out fourth, fifth and sixth observation\nprint(cars[3:6])       cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\n     cars_per_cap  country drives_right\nIN             18    India        False\nRU            200   Russia         True\nMOR            70  Morocco         True  # Print out observation for Japan\nprint(cars.loc[['JAP']])\n\n# Print out observations for Australia and Egypt\nprint(cars.loc[['AUS', 'EG']])       cars_per_cap country drives_right\nJAP           588   Japan        False\n     cars_per_cap    country drives_right\nAUS           731  Australia        False\nEG             45      Egypt         True  # Print out drives_right value of Morocco\nprint(cars.loc[['MOR'], ['drives_right']])\n\n# Print sub-DataFrame\nprint(cars.loc[['RU', 'MOR'], ['country', 'drives_right']])      drives_right\nMOR         True\n     country drives_right\nRU    Russia         True\nMOR  Morocco         True  # Print out drives_right column as Series\nprint(cars.loc[:,'drives_right'])\n\n# Print out drives_right column as DataFrame\nprint(cars.loc[:,['drives_right']])\n\n# Print out car;, s_per_cap and drives_right as DataFrame\nprint(cars.loc[:, ['cars_per_cap', 'drives_right']])  US      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool\n    drives_right\nUS          True\nAUS        False\nJAP        False\nIN         False\nRU          True\nMOR         True\nEG          True\n     cars_per_cap drives_right\nUS            809         True\nAUS           731        False\nJAP           588        False\nIN             18        False\nRU            200         True\nMOR            70         True\nEG             45         True   A series is  [] .  A data frame is  [[]] .   # Extract drives_right column as Series: dr\ndr = cars.loc[:,'drives_right'] # or cars['drives_right']\n\n# cars.iloc[:,2]\nprint(dr)  US      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool   Use  dr , a boolean series, to subset (row job)  cars .   # dr will extract the True (1) rows\nsel = cars[dr]\n\n# Or, convert code to a one-liner\nsel = cars[cars['drives_right'] == True]\n\n# Print sel\nprint(sel)       cars_per_cap        country drives_right\nUS            809  United States         True\nRU            200         Russia         True\nMOR            70        Morocco         True\nEG             45          Egypt         True  # Create series car_maniac: observations that have a cars_per_cap over 500\ncpc = cars.loc[:, 'cars_per_cap']\nmany_cars = cpc > 500\ncar_maniac = cars[many_cars]\n\n# Print car_maniac\nprint(car_maniac)       cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False  # Create medium: observations with cars_per_cap between 100 and 500\ncpc = cars.loc[:,'cars_per_cap']\nbetween = np.logical_and(cpc > 100, cpc < 500) # Numpy\nmedium = cars[between]\n\n# Print medium\nprint(medium)      cars_per_cap country drives_right\nRU           200  Russia         True",
            "title": "Pandas: data frame"
        },
        {
            "location": "/Python for Data Science/#looping",
            "text": "Loops  # areas list\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]   Change for-loop to use  enumerate() .    enumerate  for index, a in enumerate(areas) :\n    print(\"room \" + str(index) + \": \" + str(a))  room 0: 11.25\nroom 1: 18.0\nroom 2: 20.0\nroom 3: 10.75\nroom 4: 9.5   Another loop.   # house list of lists\nhouse = [[\"hallway\", 11.25], \n         [\"kitchen\", 18.0], \n         [\"living room\", 20.0], \n         [\"bedroom\", 10.75], \n         [\"bathroom\", 9.50]]  # Build a for-loop from scratch\nfor room in house:\n    print(\"the \" + room[0].capitalize() + \" is \" + str(room[1]) + \" sqm\")  the Hallway is 11.25 sqm\nthe Kitchen is 18.0 sqm\nthe Living room is 20.0 sqm\nthe Bedroom is 10.75 sqm\nthe Bathroom is 9.5 sqm   Another loop.   # Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'bonn', \n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'australia':'vienna' }  # Iterate over europe\nfor country, capital in europe.items():\n    print(\"the capital of \" + str(country) + \" is \" + str(capital))   the capital of australia is vienna\nthe capital of france is paris\nthe capital of norway is oslo\nthe capital of poland is warsaw\nthe capital of italy is rome\nthe capital of spain is madrid\nthe capital of germany is bonn  Loop over a NumPy array    If you\u2019re dealing with a 1D Numpy array, looping over all elements can be as simple as:  for x in my_array : ...    If you\u2019re dealing with a 2D Numpy array, it\u2019s more complicated.    A 2D array is built up of multiple 1D arrays.    To explicitly iterate over all separate elements of a multi-dimensional array, you\u2019ll need this syntax:  for x in np.nditer(my_array) : ...    Two Numpy arrays that you might recognize from the intro course are available in your Python session: np_height, a Numpy array containing the heights of Major League Baseball players, and np_baseball, a 2D Numpy array that contains both the heights (first column) and weights (second column) of those players.    Loop over a Pandas data frame   Iterating over a Pandas DataFrame is typically done with the iterrows() method.   Used in a for loop, every observation is iterated over and on every iteration the row label and actual row contents are available:  for lab, row in brics.iterrows() : ...  In this and the following exercises you will be working on the cars DataFrame.   It contains information on the cars per capita and whether people drive right or left for seven countries in the world.   # Iterate over rows of cars\nfor lab, row in cars.iterrows():\n    print(lab) # row label\n    print(row) # row content  US\ncars_per_cap              809\ncountry         United States\ndrives_right             True\nName: US, dtype: object\nAUS\ncars_per_cap          731\ncountry         Australia\ndrives_right        False\nName: AUS, dtype: object\nJAP\ncars_per_cap      588\ncountry         Japan\ndrives_right    False\nName: JAP, dtype: object\nIN\ncars_per_cap       18\ncountry         India\ndrives_right    False\nName: IN, dtype: object\nRU\ncars_per_cap       200\ncountry         Russia\ndrives_right      True\nName: RU, dtype: object\nMOR\ncars_per_cap         70\ncountry         Morocco\ndrives_right       True\nName: MOR, dtype: object\nEG\ncars_per_cap       45\ncountry         Egypt\ndrives_right     True\nName: EG, dtype: object  # Adapt the for-loop\nfor lab, row in cars.iterrows() :\n    print(str(lab) + \": \" + str(row['cars_per_cap']))   Code a for-loop that adds the  COUNTRY  column with uppercase version of the  country  names in the  country  column.   for lab, row in cars.iterrows():\n    cars.loc[lab, \"COUNTRY\"] = (row[\"country\"].upper())\n\n# Print cars\nprint(cars)       cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT   Replace the for-loop with a one-liner that uses  .apply(str.upper) .   The call should give the same result: a column  COUNTRY should be added to cars, containing an uppercase version of the country names.   cars[\"COUNTRY\"] = cars[\"country\"].apply(str.upper)\nprint(cars)       cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT",
            "title": "Looping"
        },
        {
            "location": "/Python for Data Science/#a-numpy-project-random-walk-monte-carlo-simulation",
            "text": "# Set the seed\nnp.random.seed(123)\n\n# Generate and print random float between 0 and 1\nprint(np.random.rand())  0.6964691855978616  # Use randint() to simulate a dice (1,2,3,4,5,6)\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))  5\n3\n2\n4\n3\n4\n2   Build a random walk.   # Starting step\nstep = 50\n\n# Roll the dice\ndice = np.random.randint(1,7)\n\n# Finish the control construct\n'''\nIf dice is 1 or 2, you go one step down.\nif dice is 3, 4 or 5, you go one step up.\nElse, you throw the dice again. The number of eyes is the number of steps you go up.\n'''\nif dice <= 2 :\n    step = step - 1\nelif dice <= 5 :\n    step = step + 1\nelse :\n    step = step + np.random.randint(1,7)\n\n# Print out dice and step\nprint(dice), print(step)  2\n49\n\n(None, None)  outcomes = []\n\nfor x in range(10) :\n    coin = np.random.randint(0, 2)\nif coin == 0 :\n    outcomes.append(\"heads\")\nelse :\n    outcomes.append(\"tails\")\n\nprint(outcomes)  ['tails']  tails = [0]\n\nfor x in range(10) :\n    coin = np.random.randint(0, 2)\n\n    tails.append(coin)\n\nprint(tails)  [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1]   Initialize  random_walk .   random_walk = [0]\n\n# Complete the ___\nfor x in range(100) :\n    # Set step: last element in random_walk\n    step = random_walk[-1]\n\n    # Roll the dice\n    dice = np.random.randint(1,7)\n\n    # Determine next step\n    if dice <= 2:\n        step = max(0, step - 1) # make sure that 'step' never goes below 0 when you decrease it\n    elif dice <= 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    # append next_step to random_walk\n    random_walk.append(step)\n\n# Print random_walk\nprint(random_walk)  [0, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 10, 12, 11, 12, 13, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 19, 21, 20, 19, 20, 21, 20, 22, 23, 24, 25, 26, 27, 28, 27, 28, 29, 34, 35, 34, 33, 32, 31, 32, 33, 34, 39, 40, 39, 40, 41, 42, 43, 44, 45, 44, 43, 44, 43, 49, 48, 49, 48, 49, 48, 49, 53, 57, 59, 61, 60, 61, 63, 62, 68, 69, 71, 72, 71, 72, 73, 74, 73, 74, 75, 76, 78, 77, 76, 77, 83, 88, 87, 86]   Plot  random_walk .   plt.plot(range(101), random_walk)\n\n# Show the plot\nplt.show()    Build a Monte Carlo as an alternative.   # Initialize all_walks\nall_walks = []\n\n# Simulate random walk 10 times\nfor i in range(10) :\n\n    # Code from before\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n\n    # Append random_walk to all_walks\n    all_walks.append(random_walk) \n\n# Print all_walks\nprint(all_walks)  [[0, 4, 5, 6, 7, 9, 8, 9, 8, 9, 8, 7, 13, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 20, 19, 18, 19, 18, 19, 18, 19, 20, 24, 25, 24, 30, 29, 28, 29, 28, 27, 28, 27, 31, 30, 31, 30, 31, 30, 31, 33, 32, 31, 30, 31, 30, 35, 36, 37, 36, 35, 36, 35, 36, 35, 40, 41, 40, 39, 38, 37, 38, 39, 43, 49, 50, 51, 52, 53, 52, 53, 55, 56, 57, 58, 57, 56, 57, 56, 57, 58, 59, 58, 59, 60, 61, 60, 59, 60, 61, 66], [0, 1, 2, 7, 6, 7, 6, 7, 8, 9, 10, 9, 15, 14, 15, 14, 13, 14, 18, 19, 20, 21, 22, 21, 20, 19, 18, 17, 18, 19, 20, 21, 22, 23, 22, 23, 24, 23, 24, 25, 28, 27, 28, 27, 28, 31, 32, 33, 34, 33, 32, 35, 36, 37, 38, 37, 36, 37, 40, 41, 46, 47, 46, 47, 46, 47, 46, 52, 51, 50, 51, 53, 52, 51, 50, 51, 52, 53, 54, 58, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 74, 73, 74, 75, 74, 80, 79, 80, 81, 80], [0, 0, 1, 0, 0, 6, 5, 4, 5, 6, 5, 4, 3, 2, 3, 9, 10, 13, 14, 20, 21, 22, 28, 27, 33, 32, 33, 34, 35, 34, 40, 41, 40, 41, 40, 41, 40, 41, 40, 41, 45, 46, 48, 47, 48, 47, 46, 47, 46, 47, 46, 50, 54, 53, 52, 51, 52, 53, 57, 58, 59, 63, 62, 61, 60, 61, 62, 64, 63, 62, 63, 64, 66, 69, 74, 75, 74, 75, 76, 77, 78, 79, 78, 79, 80, 86, 85, 90, 89, 93, 92, 96, 95, 98, 99, 98, 99, 105, 104, 103, 102], [0, 4, 3, 2, 3, 4, 3, 4, 5, 6, 7, 6, 5, 4, 5, 4, 3, 7, 8, 10, 14, 20, 19, 18, 19, 20, 21, 20, 21, 20, 21, 22, 21, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 35, 38, 39, 38, 37, 38, 39, 40, 39, 38, 37, 36, 37, 38, 39, 40, 41, 42, 43, 42, 43, 44, 46, 45, 46, 47, 50, 52, 53, 52, 51, 50, 49, 48, 49, 48, 49, 51, 52, 53, 52, 53, 52, 51, 52, 51, 50, 49, 50, 49, 48, 49, 50, 51, 53, 54], [0, 1, 0, 0, 1, 7, 6, 7, 8, 13, 12, 13, 12, 13, 14, 13, 14, 15, 21, 22, 23, 24, 23, 25, 26, 27, 28, 27, 28, 29, 30, 31, 30, 31, 30, 31, 32, 31, 32, 36, 37, 40, 41, 45, 46, 45, 46, 47, 46, 45, 50, 51, 52, 51, 50, 51, 52, 53, 52, 56, 55, 56, 57, 58, 59, 60, 61, 62, 61, 60, 59, 60, 61, 65, 66, 65, 66, 67, 66, 72, 73, 74, 75, 74, 75, 76, 79, 78, 79, 78, 77, 76, 77, 78, 80, 81, 82, 86, 87, 86, 85], [0, 1, 2, 1, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 4, 5, 4, 3, 2, 3, 4, 5, 6, 7, 12, 16, 15, 16, 15, 14, 13, 14, 13, 14, 15, 14, 18, 19, 18, 19, 18, 17, 18, 17, 21, 22, 23, 24, 25, 26, 25, 26, 27, 28, 29, 30, 29, 34, 35, 36, 35, 36, 35, 36, 37, 36, 37, 42, 43, 44, 43, 44, 45, 46, 45, 46, 45, 46, 47, 46, 45, 44, 45, 46, 45, 44, 43, 44, 48, 49, 50, 51, 52, 53, 52, 53, 54, 53, 54, 59, 60], [0, 0, 0, 1, 0, 0, 0, 4, 5, 6, 7, 6, 7, 8, 9, 10, 11, 10, 9, 12, 11, 10, 9, 8, 9, 15, 16, 15, 16, 17, 16, 15, 16, 17, 18, 17, 21, 22, 21, 23, 24, 23, 24, 25, 26, 27, 28, 29, 28, 27, 28, 29, 28, 29, 30, 29, 28, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 39, 40, 41, 42, 43, 44, 43, 42, 48, 49, 50, 49, 48, 47, 51, 52, 56, 55, 61, 62, 63, 67, 68, 67, 66, 67, 68, 69, 70, 69, 75, 76, 75], [0, 4, 5, 4, 5, 4, 10, 16, 17, 16, 17, 18, 19, 20, 21, 20, 23, 22, 24, 25, 31, 30, 31, 32, 31, 30, 31, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 43, 44, 45, 46, 45, 44, 43, 44, 43, 47, 46, 45, 46, 48, 49, 54, 53, 54, 55, 59, 58, 59, 60, 59, 58, 59, 60, 61, 60, 59, 58, 59, 58, 57, 58, 57, 56, 55, 56, 57, 56, 55, 54, 55, 56, 57, 56, 55, 56, 57, 58, 59, 58, 59, 58, 59, 60, 61, 62], [0, 1, 6, 11, 10, 11, 12, 11, 12, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 18, 19, 20, 21, 20, 19, 18, 20, 21, 22, 21, 20, 19, 20, 21, 22, 21, 20, 21, 24, 29, 32, 33, 34, 40, 41, 42, 43, 42, 44, 49, 50, 51, 52, 53, 54, 55, 54, 55, 56, 57, 58, 59, 61, 65, 66, 67, 68, 69, 73, 78, 77, 76, 75, 74, 77, 78, 79, 80, 79, 78, 81, 82, 81, 80, 79, 80, 81, 82, 83, 82, 83, 82, 83, 84, 83, 84, 85, 86, 87, 88, 89], [0, 1, 0, 0, 1, 2, 5, 6, 5, 4, 5, 6, 7, 12, 11, 10, 9, 8, 7, 6, 7, 6, 5, 6, 9, 8, 7, 8, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 26, 27, 28, 29, 30, 31, 30, 29, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 43, 42, 41, 40, 39, 40, 41, 42, 41, 40, 39, 38, 37, 36, 37, 41, 45, 46, 47, 46, 45, 46, 47, 48, 54, 55, 54, 53, 54, 53, 54, 53, 54, 55, 54, 55, 54, 53, 54, 55, 54, 55, 54]]  all_walks = []\nfor i in range(10) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Convert all_walks to Numpy array: np_aw\n# all_walks is a list of 10 lists\nnp_aw = np.array(all_walks)\n# np_aw is an array of 10 horizontal vectors (a matrix...)\n\n# Plot np_aw and show\nplt.plot(np_aw)\nplt.show()    Now every row in  np_all_walks  represents the position after 1 throw (of dice) for the 10 random walks.   # Clear the figure\nplt.clf()\n\n# Transpose np_aw: np_aw_t\nnp_aw_t = np.transpose(np_aw)\n\n# Plot np_aw_t and show\nplt.plot(np_aw_t)\nplt.show()    10 randoms walks from 0 to 100 (the dice only had 6 possibilities).   import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(123)\nall_walks = []\n\n# Simulate random walk 250 times\nfor i in range(250) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n\n        # Implement clumsiness\n        # if a random float is less or equal to 0.001\n        # randint = integer\n        # rand = float\n        if np.random.rand() <= 0.001 :\n            step = 0\n\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\nplt.plot(np_aw_t)\nplt.show()    What are the odds that you\u2019ll reach 60 steps high on the Empire State Building?   Basically, you want to know about the end points of all the random walks you\u2019ve simulated.   These end points have a certain distribution that you can visualize with a histogram.   import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(123)\nall_walks = []\n\n# Simulate random walk 1000 times\nfor i in range(1000) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        if np.random.rand() <= 0.001 :\n            step = 0\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\n\n# Select last row from np_aw_t: ends\nends = np_aw_t[-1]\n\n# Plot histogram of ends, display plot\nplt.hist(ends)\nplt.show()    The histogram of the previous exercise was created from a Numpy array  ends , that contains 1,000 integers.   Each integer represents the end point of a random walk.   To calculate the change that this end point is higher than or equal to 60, you can count the number of integers in ends that are greater than or equal to 60 and divide that number by 1000, the total number of simulations.  Well then, what\u2019s the estimated chance that you\u2019ll reach 60 steps high if you play this Empire State Building game?   The  ends  array is everything you need.   sum(ends >= 60) / 1000\n\n# 78.8%  0.78800000000000003",
            "title": "A NumPy project: random walk &amp; Monte Carlo simulation"
        },
        {
            "location": "/Tidy_Data_in_Python/",
            "text": "CONTENT\n\n\n1, Loading\n\n\n2, Tidy vs. Messy Data\n\n\n3, Messy data\n\n\n4, Using melt to Tidy Data\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3.\n\n\n\n\nIt is often said that data scientists spend only 20% of their time analyzing their data, and 80% of time cleaning it. Indeed, maintaining a tidy, easy-to-use dataset is crucial in our age of big data. In the paper Tidy Data, veteran statistician Hadley Wickham gives definitions of tidy and messy data so that all data scientists can keep their work organized. \n\n\n1, Loading\n\u00b6\n\n\nFirst, load all the datasets.\n\n\nimport pandas as pd\n\nmessy = pd.read_csv('messy.csv')\ndf1 = pd.read_csv('df1.csv')\ndf2 = pd.read_csv('df2.csv')\neyes = pd.read_csv('eyes.csv')\n\n\n\n\n2, Tidy vs. Messy Data\n\u00b6\n\n\nWhat exactly marks the difference between tidy data and messy data? It is not only how organized and intuitive the datasets look to our human eyes, but also how easily and efficiently they can be processed by computers. In his seminal paper \nTidy Data\n, Hadley Wickham proposed three standards for tidy data:\n\n\n\n\nEach variable forms a column\n\n\nEach observation forms a row\n\n\nEach type of observation forms a unit.\n\n\n\n\n3, Messy data\n\u00b6\n\n\nTo get started, execute \nmessy\n. This dataset, which appears in Wickham\u2019s paper, shows the number of people who choose either of two treatments in a hospital. Observe its structure in comparison with Wickham\u2019s rules. This dataset is \nmessy\n because it violates rule 2: it combines Treatment A and Treatment B, two distinct observations, in a single row.\n\n\nprint(messy.head())\n\n\n\n\n  First     Last  Treatment A  Treatment B\n0  John    Smith          NaN            2\n1  Jane      Doe         16.0           11\n2  Mary  Johnson          3.0            1\n\n\n\nNow let\u2019s look at two more datasets. Execute \ndf1\n and \ndf2\n in the shell to check out two other preloaded datasets. The former shows the type and number of pets owned by three co-workers, and the latter shows the average BMI in three countries over several years. \n\n\nprint(df1.head())\n\n\n\n\n      owner  dogs  cats  birds\n0     Jason     2     4      3\n1      Lisa     7    10      9\n2  Terrence     8     5      1\n\n\n\nprint(df2.head())\n\n\n\n\n       Country     Y1980     Y1981     Y1982     Y1983\n0  Afghanistan  21.48678  21.46552  21.45145  21.43822\n1      Albania  25.22533  25.23981  25.25636  25.27176\n2      Algeria  22.25703  22.34745  22.43647  22.52105\n\n\n\ndf2\n is messy because it violates rule 2.\n\n\n4, Using \nmelt\n to Tidy Data\n\u00b6\n\n\nIts basic syntax is \npd.melt(df, id_vars = lst)\n, where \ndf\n is the name of the data frame we\u2019re dealing with and \nlst\n is a list of all the columns that we want to keep as columns. \n\n\n# Melt df2 into a new data frame: df2_melted\ndf2_melted = pd.melt(df2, id_vars = 'Country')\n\n# print df2_melted\nprint(df2_melted)\n\n\n\n\n        Country variable     value\n0   Afghanistan    Y1980  21.48678\n1       Albania    Y1980  25.22533\n2       Algeria    Y1980  22.25703\n3   Afghanistan    Y1981  21.46552\n4       Albania    Y1981  25.23981\n5       Algeria    Y1981  22.34745\n6   Afghanistan    Y1982  21.45145\n7       Albania    Y1982  25.25636\n8       Algeria    Y1982  22.43647\n9   Afghanistan    Y1983  21.43822\n10      Albania    Y1983  25.27176\n11      Algeria    Y1983  22.52105\n\n\n\nRenaming Columns\n\n\nChange the column names with pandas\u2019 rename function. Its syntax is \ndf.rename(columns = d, inplace = False)\n, where \nd\n is a dictionary where the keys are the columns you want to change, and the values are the new names for these columns.\n\n\n# Rename the columns of df2_melted: df2_tidy\ndf2_tidy = df2_melted.rename(columns = {'variable': 'Year', 'value': 'Income'})\n\n# Print out df2_tidy\nprint(df2_tidy)\n\n\n\n\n        Country   Year    Income\n0   Afghanistan  Y1980  21.48678\n1       Albania  Y1980  25.22533\n2       Algeria  Y1980  22.25703\n3   Afghanistan  Y1981  21.46552\n4       Albania  Y1981  25.23981\n5       Algeria  Y1981  22.34745\n6   Afghanistan  Y1982  21.45145\n7       Albania  Y1982  25.25636\n8       Algeria  Y1982  22.43647\n9   Afghanistan  Y1983  21.43822\n10      Albania  Y1983  25.27176\n11      Algeria  Y1983  22.52105\n\n\n\nMore messiness\n\n\nExecute \neyes\n in the shell. This dataset is about the eye colors of three women and whether or not they wear glasses. What problem does this dataset have?\n\n\nprint(eyes)\n\n\n\n\n        Name  Brown  Blue  Black Wear_Glasses\n0     Esther      0     1      0        False\n1  Elizabeth      1     0      0        False\n2   Michelle      0     0      1         True\n\n\n\nIt violates rule 1 of tidy data: there are several columns that represent the same variable.\n\n\nDeal with it\n\n\nUse \nmelt\n.\n\n\n# Melt the Black, Blue, and Brown columns of eyes: eyes_melted\neyes_melted = pd.melt(eyes, id_vars = ['Name', 'Wear_Glasses'])\n\n# Rename the variable column and save to eyes_renamed\neyes_renamed = eyes_melted.rename(columns = {'variable': 'Eye_Color'})\n\n# print out eyes_renamed\nprint(eyes_renamed)\n\n\n\n\n        Name Wear_Glasses Eye_Color  value\n0     Esther        False     Brown      0\n1  Elizabeth        False     Brown      1\n2   Michelle         True     Brown      0\n3     Esther        False      Blue      1\n4  Elizabeth        False      Blue      0\n5   Michelle         True      Blue      0\n6     Esther        False     Black      0\n7  Elizabeth        False     Black      0\n8   Michelle         True     Black      1\n\n\n\nFurther Cleaning\n\n\nGet rid of all rows whose value in the value column is 0.\n\n\ndf1 = df2[df2.column == value]\n\n\nwhere \ncolumn\n is the name of the column we are examining and \nvalue\n is the value we want to keep. This step will give us one row for each girl that tells us only her correct eye color. Now the \nvalue\n column is no longer necessary, so let\u2019s delete it:\n\n\ndf.drop(lst, axis = 1)\n\n\nHere \nlst\n is a list of the columns we want to get rid of, and \naxis = 1\n specifies that we want to drop columns instead of rows.\n\n\n# Filter eyes_ranamed and save to eyes_filtered \neyes_filtered = eyes_renamed[eyes_renamed.value == 1]\n\n# Delete the `value` column and save to eyes_tidy\neyes_tidy = eyes_filtered.drop(['value'], axis = 1)\n\n# print eyes_tidy\nprint(eyes_tidy)\n\n\n\n\n        Name Wear_Glasses Eye_Color\n1  Elizabeth        False     Brown\n3     Esther        False      Blue\n8   Michelle         True     Black",
            "title": "Tidy Data in Python"
        },
        {
            "location": "/Tidy_Data_in_Python/#2-tidy-vs-messy-data",
            "text": "What exactly marks the difference between tidy data and messy data? It is not only how organized and intuitive the datasets look to our human eyes, but also how easily and efficiently they can be processed by computers. In his seminal paper  Tidy Data , Hadley Wickham proposed three standards for tidy data:   Each variable forms a column  Each observation forms a row  Each type of observation forms a unit.",
            "title": "2, Tidy vs. Messy Data"
        },
        {
            "location": "/Tidy_Data_in_Python/#3-messy-data",
            "text": "To get started, execute  messy . This dataset, which appears in Wickham\u2019s paper, shows the number of people who choose either of two treatments in a hospital. Observe its structure in comparison with Wickham\u2019s rules. This dataset is  messy  because it violates rule 2: it combines Treatment A and Treatment B, two distinct observations, in a single row.  print(messy.head())    First     Last  Treatment A  Treatment B\n0  John    Smith          NaN            2\n1  Jane      Doe         16.0           11\n2  Mary  Johnson          3.0            1  Now let\u2019s look at two more datasets. Execute  df1  and  df2  in the shell to check out two other preloaded datasets. The former shows the type and number of pets owned by three co-workers, and the latter shows the average BMI in three countries over several years.   print(df1.head())        owner  dogs  cats  birds\n0     Jason     2     4      3\n1      Lisa     7    10      9\n2  Terrence     8     5      1  print(df2.head())         Country     Y1980     Y1981     Y1982     Y1983\n0  Afghanistan  21.48678  21.46552  21.45145  21.43822\n1      Albania  25.22533  25.23981  25.25636  25.27176\n2      Algeria  22.25703  22.34745  22.43647  22.52105  df2  is messy because it violates rule 2.",
            "title": "3, Messy data"
        },
        {
            "location": "/Tidy_Data_in_Python/#4-using-melt-to-tidy-data",
            "text": "Its basic syntax is  pd.melt(df, id_vars = lst) , where  df  is the name of the data frame we\u2019re dealing with and  lst  is a list of all the columns that we want to keep as columns.   # Melt df2 into a new data frame: df2_melted\ndf2_melted = pd.melt(df2, id_vars = 'Country')\n\n# print df2_melted\nprint(df2_melted)          Country variable     value\n0   Afghanistan    Y1980  21.48678\n1       Albania    Y1980  25.22533\n2       Algeria    Y1980  22.25703\n3   Afghanistan    Y1981  21.46552\n4       Albania    Y1981  25.23981\n5       Algeria    Y1981  22.34745\n6   Afghanistan    Y1982  21.45145\n7       Albania    Y1982  25.25636\n8       Algeria    Y1982  22.43647\n9   Afghanistan    Y1983  21.43822\n10      Albania    Y1983  25.27176\n11      Algeria    Y1983  22.52105  Renaming Columns  Change the column names with pandas\u2019 rename function. Its syntax is  df.rename(columns = d, inplace = False) , where  d  is a dictionary where the keys are the columns you want to change, and the values are the new names for these columns.  # Rename the columns of df2_melted: df2_tidy\ndf2_tidy = df2_melted.rename(columns = {'variable': 'Year', 'value': 'Income'})\n\n# Print out df2_tidy\nprint(df2_tidy)          Country   Year    Income\n0   Afghanistan  Y1980  21.48678\n1       Albania  Y1980  25.22533\n2       Algeria  Y1980  22.25703\n3   Afghanistan  Y1981  21.46552\n4       Albania  Y1981  25.23981\n5       Algeria  Y1981  22.34745\n6   Afghanistan  Y1982  21.45145\n7       Albania  Y1982  25.25636\n8       Algeria  Y1982  22.43647\n9   Afghanistan  Y1983  21.43822\n10      Albania  Y1983  25.27176\n11      Algeria  Y1983  22.52105  More messiness  Execute  eyes  in the shell. This dataset is about the eye colors of three women and whether or not they wear glasses. What problem does this dataset have?  print(eyes)          Name  Brown  Blue  Black Wear_Glasses\n0     Esther      0     1      0        False\n1  Elizabeth      1     0      0        False\n2   Michelle      0     0      1         True  It violates rule 1 of tidy data: there are several columns that represent the same variable.  Deal with it  Use  melt .  # Melt the Black, Blue, and Brown columns of eyes: eyes_melted\neyes_melted = pd.melt(eyes, id_vars = ['Name', 'Wear_Glasses'])\n\n# Rename the variable column and save to eyes_renamed\neyes_renamed = eyes_melted.rename(columns = {'variable': 'Eye_Color'})\n\n# print out eyes_renamed\nprint(eyes_renamed)          Name Wear_Glasses Eye_Color  value\n0     Esther        False     Brown      0\n1  Elizabeth        False     Brown      1\n2   Michelle         True     Brown      0\n3     Esther        False      Blue      1\n4  Elizabeth        False      Blue      0\n5   Michelle         True      Blue      0\n6     Esther        False     Black      0\n7  Elizabeth        False     Black      0\n8   Michelle         True     Black      1  Further Cleaning  Get rid of all rows whose value in the value column is 0.  df1 = df2[df2.column == value]  where  column  is the name of the column we are examining and  value  is the value we want to keep. This step will give us one row for each girl that tells us only her correct eye color. Now the  value  column is no longer necessary, so let\u2019s delete it:  df.drop(lst, axis = 1)  Here  lst  is a list of the columns we want to get rid of, and  axis = 1  specifies that we want to drop columns instead of rows.  # Filter eyes_ranamed and save to eyes_filtered \neyes_filtered = eyes_renamed[eyes_renamed.value == 1]\n\n# Delete the `value` column and save to eyes_tidy\neyes_tidy = eyes_filtered.drop(['value'], axis = 1)\n\n# print eyes_tidy\nprint(eyes_tidy)          Name Wear_Glasses Eye_Color\n1  Elizabeth        False     Brown\n3     Esther        False      Blue\n8   Michelle         True     Black",
            "title": "4, Using melt to Tidy Data"
        },
        {
            "location": "/Lists/",
            "text": "CONTENT\n\n\n1, Notes\n\n\nIterable\n\n\nLists Versus tuples\n\n\nLists Versus sets\n\n\nFrozensets\n\n\n\n\n\n\nLists Versus dictionaries\n\n\nHashable or Not\n\n\n\n\n\n\n2, Snippets\n\n\nSelect an element from a list\n\n\nSelect the last element\n\n\nOut of range error\n\n\nSlice\n\n\nRandom\n\n\nConvert a list to a string with join()\n\n\nConvert a list to a tuple with tuple()\n\n\nConvert a list to a set with set()\n\n\nConvert a list to a dictionary with zip()\n\n\nSize of your list with len()\n\n\nappend() and extend()\n\n\nConcatenate lists\n\n\nSort a list\n\n\nCopy a List (3 ways):\n\n\nList comprehension\n\n\nDictionary comprehension also\u2026\n\n\nCounting the occurrences of one item in a list\n\n\nCounting all items in a list with count()\n\n\nCounting all items in a list with Counter() from the collections library\n\n\nSplit A Python List Into Evenly Sized Chunks\n\n\nLoop over a list\n\n\nCreate flat lists out of lists\n\n\nGet an intersection of two Python lists\n\n\nRemove duplicates from a list\n\n\nCreate Empty NumPy Arrays\n\n\n\n\n\n\nDo math with lists (wt avg)\n\n\nDo math with lists (quantiles)\n\n\nDo math with lists (sum)\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and snippets. Python 3.\n\n\n\n\n1, Notes\n\u00b6\n\n\nlist_zoo = ['bear', 'lion', 'panda', 'zebra']\n\n\n\n\nLists in Python store ordered collections of items or objects, we can say that they are sequence types.\n\n\n\n\nIterable\n\u00b6\n\n\n\n\nThe program can iterate over them.\n\n\nLists, strings, tuples, and sets are called \u201citerables\u201d.\n\n\n\n\nLists Versus tuples\n\u00b6\n\n\ntup_course = ('physics', 'chemistry', 1997, 2000)\n\n\n\n\nYou can\u2019t add elements to a tuple. There\u2019s no \nappend()\n or \nextend()\n method for tuples,\n\n\nYou can\u2019t remove elements from a tuple. Tuples have no \nremove()\n or \npop()\n method,\n\n\nYou can find elements in a tuple since this doesn\u2019t change the tuple.\n\n\nYou can also use the in operator to check if an element exists in the tuple.\n\n\nIf you\u2019re defining a constant set of values, use a tuple instead of a list. It will be faster and safer.\n\n\n\n\nLists Versus sets\n\u00b6\n\n\nset_code = set{\"Perl\", \"Python\", \"Java\"}\n\n\n\n\nJust like dictionaries, sets have no order in their collection of items. Not like lists.\n\n\nSet requires the items contained in it to be hashable, lists store non-hashable items.\n\n\nSets require your items to be unique and immutable. Duplicates are not allowed in sets, while lists allow for duplicates and are mutable.\n\n\nUse sets when you have an unordered set of UNIQUE, immutable values that are hashable.\n\n\n\n\nFrozensets\n\u00b6\n\n\nset_cities = frozenset{\"Frankfurt\", \"Basel\",\"Freiburg\"}\n\n\n\n\nFrozensets are like sets except that they cannot be changed, i.e. they are immutable.\n\n\n\n\nLists Versus dictionaries\n\u00b6\n\n\ndict_kid = {'Name': 'Zara', 'Age': 7, 'Class': 'First'\n\n\n\n\nA list stores an ordered collection of items, so it keeps some order. Dictionaries don\u2019t have any order.\n\n\nDictionaries are known to associate each key with a value, while lists just contain values.\n\n\nUse a dictionary when you have an unordered set of unique keys that map to values.\n\n\n\n\nHashable or Not\n\u00b6\n\n\n\n\nHashable: float, integer, tuple, string.\n\n\nNot: dictionary, set, list.\n\n\n\n\n2, Snippets\n\u00b6\n\n\nSelect an element from a list\n\u00b6\n\n\n# These list elements are all of the same type\nzoo = ['bear', 'lion', 'panda', 'zebra']\nprint(zoo)\n\n\n\n\n['bear', 'lion', 'panda', 'zebra']\n\n\n\n# But these list elements are not\nbiggerZoo = ['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\nprint(biggerZoo)\n\n\n\n\n['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n\n\n\n# Select the first list element\noneZooAnimal = biggerZoo[0]\n\n# Print oneZooAnimal\nprint(oneZooAnimal)\nprint(biggerZoo[0])\n\n\n\n\nbear\nbear\n\n\n\nSelect the last element\n\u00b6\n\n\n# Pass -1 to the index operator on `biggerZoo`\nmonkeys = biggerZoo[-1]\nprint(monkeys)\n\n# Pass -2 to the index operator on `biggerZoo`\nzebra = biggerZoo[-2]\nprint(zebra)\n\n\n\n\n['chimpanzees', 'gorillas', 'orangutans', 'gibbons']\nzebra\n\n\n\nOut of range error\n\u00b6\n\n\n# Run this code to trigger an \"Index Out Of Range\" Error\nprint(\"print(biggerZoo[6])\")\n\n\n\n\nprint(biggerZoo[6])\n\n\n\nSlice\n\u00b6\n\n\n# Print all\nprint(biggerZoo)\n\n# Print a[start: ]\nsomeZooAnimals = biggerZoo[2: ]\n\n# Print to see what you exactly select from `biggerZoo`\nprint(someZooAnimals)\n\n# Print a[ :end]\notherZooAnimals = biggerZoo[ :2]\n\n# Print to see what you're getting back\nprint(otherZooAnimals)\n\n# Print a[start:end]\nprint(biggerZoo[2:4])\n\n# Print a[start:end:step]\nprint(biggerZoo[2::4])\nprint(biggerZoo[2::2])\nprint(biggerZoo[2::1])\n\n\n\n\n['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n['panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n['bear', 'lion']\n['panda', 'zebra']\n['panda']\n['panda', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n['panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n\n\n\nRandom\n\u00b6\n\n\n# Import `choice` from the `random` library\nfrom random import choice\n\n# Construct your `list` variable with a list of the first 4 letters of the alphabet\nlist1 = ['a','b','c','d']\n\n# Print your random 'list' element\nprint(choice(list1))\nprint(choice(list1))\n\n# Import `randrange` from the `random` library\nfrom random import randrange\n\n# Construct your `randomLetters` variable with a list of the first 4 letters of the alphabet\nrandomLetters = ['e','f', 'g', 'h']\n\n# Select a random index from 'randomLetters`\nrandomIndex = randrange(0,len(randomLetters))\n\n# Print your random element from `random`\nprint(randomLetters[randomIndex])\n\n\n\n\nc\nc\ng\n\n\n\nConvert a list to a string with \njoin()\n\u00b6\n\n\n# List of Strings to a String\nlistOfStrings = ['One', 'Two', 'Three']\nstrOfStrings = ''.join(listOfStrings)\nprint(strOfStrings)\n\n# List Of Integers to a String\nlistOfNumbers = [1, 2, 3]\nstrOfNumbers = ''.join(str(n) for n in listOfNumbers)\nprint(strOfNumbers)\n\n\n\n\nOneTwoThree\n123\n\n\n\nConvert a list to a tuple with \ntuple()\n\u00b6\n\n\nlistOfStrings = ['One', 'Two', 'Three']\ntupOfStrings = tuple(listOfStrings)\nprint(tupOfStrings)\n\n\n\n\n('One', 'Two', 'Three')\n\n\n\nConvert a list to a set with \nset()\n\u00b6\n\n\nlistOfStrings = ['One', 'Two', 'Three']\nsetOfStrings = set(listOfStrings)\nprint(setOfStrings)\n\n\n\n\n{'One', 'Three', 'Two'}\n\n\n\nConvert a list to a dictionary with \nzip()\n\u00b6\n\n\nhelloWorld = ['hello','world','1','2']\n\n# Convert to a dictionary\n# 1 will be interpreted as a key and 2 as a value\nhelloWorldDictionary = dict(zip(helloWorld[0::2], helloWorld[1::2]))\n\n# Print out the result\nprint(helloWorldDictionary)\n\na = [1, 2, 3, 4, 5]\n\n# Create a list iterator object\ni = iter(a)\n\n# Zip and create a dictionary\nprint(dict(zip(i, i)))\n\n\n\n\n{'hello': 'world', '1': '2'}\n{1: 2, 3: 4}\n\n\n\nSize of your list with \nlen()\n\u00b6\n\n\nprint(biggerZoo)\n\n# Pass `justAList` to `len()`\nprint(len(biggerZoo))\n\n\n\n\n['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n5\n\n\n\nappend()\n and \nextend()\n\u00b6\n\n\n# This is your list\nlist1 = [5, 6, 7, 8, 9]\nprint(list1)\n\n# Check whether it's iterable\nprint(list1.__iter__)\n\nshortList = [5, 6, 7, 8, 9]\nprint(shortList)\n\n# Append [4,5] to `shortList`\nshortList.append([4, 5])\n\n# Use the print() method to show shortList\nprint(shortList)\n\nlongerList = [5, 6, 7, 8, 9]\nprint(longerList)\n\n# Extend `longerList` with [4,5]\nlongerList.extend([4, 5])\n\n# Use the print() method to see longerList\nprint(longerList)\n\n\n\n\n[5, 6, 7, 8, 9]\n<method-wrapper '__iter__' of list object at 0x7ff7a7d2dd88>\n[5, 6, 7, 8, 9]\n[5, 6, 7, 8, 9, [4, 5]]\n[5, 6, 7, 8, 9]\n[5, 6, 7, 8, 9, 4, 5]\n\n\n\nConcatenate lists\n\u00b6\n\n\nshortList = [5, 6, 7, 8, 9]\nprint(shortList)\n\n# Concatenate `shortList` with `[4,5]`\nplusList = shortList + [4,5]\n\n\n\n\n[5, 6, 7, 8, 9]\n\n\n\nSort a list\n\u00b6\n\n\nzoo = ['zebra', 'bear', 'lion', 'panda']\nprint(zoo)\n\n# Use sort() on the rooms list\nzoo.sort() # lists only\nprint(zoo)\n\nzoo = ['zebra', 'bear', 'lion', 'panda']\nprint(zoo)\n\n# Now use the sorted() function on orders\nprint(sorted(zoo)) # lists, strings, sets, dictionaries\n\n\n\n\n['zebra', 'bear', 'lion', 'panda']\n['bear', 'lion', 'panda', 'zebra']\n['zebra', 'bear', 'lion', 'panda']\n['bear', 'lion', 'panda', 'zebra']\n\n\n\nCopy a List (3 ways):\n\u00b6\n\n\nzoo = ['zebra', 'bear', 'lion', 'panda']\nprint(zoo)\n\n# Copy the grocery list by slicing and store it in the `newGroceries` variable\nnewZoo = zoo[:]\nprint(newZoo)\n\n# Import the copy library as c\nimport copy as c\n\n# Create a `groceriesForFamily` variable and assign the copied grocery list to it\nzooForFamily =  c.copy(zoo)\nprint(zooForFamily)\n\n# Use `deepcopy()` and assign the copied list to a `groceriesForKids` variable\nzooForKids= c.deepcopy(zoo)\nprint(zooForKids)\n\n\n\n\n['zebra', 'bear', 'lion', 'panda']\n['zebra', 'bear', 'lion', 'panda']\n['zebra', 'bear', 'lion', 'panda']\n['zebra', 'bear', 'lion', 'panda']\n\n\n\nWhen you use the \u2018simple\u2019 copy methods, your original lists will be modified. However, if you use the \ndeepcopy()\n method, it will be prevented.\n\n\n# This is your list\nobjectList = ['a','b',['ab','ba']]\nprint(objectList)\n\n# Copy the `objectList`\ncopiedList = objectList[:]\n\n# Change the first list element of `copiedList`\ncopiedList[0] = 'c'\n\n# Go to the third element (the nested list) and change the second element\ncopiedList[2][1] = 'd'\n\n# Print out the original list to see what happened to it\nprint(objectList); print(copiedList)\nprint(\"Both lists are equal.\")\n\n\n\n\n['a', 'b', ['ab', 'ba']]\n['a', 'b', ['ab', 'd']]\n['c', 'b', ['ab', 'd']]\nBoth lists are equal.\n\n\n\n# 2, this is your list\nobjectList = ['a','b',['ab','ba']]\nprint(objectList)\n\n# Copy the `objectList`\nimport copy as c\ncopiedList2 = c.deepcopy(objectList)\n\n# Change the first list element of `copiedList`\ncopiedList2[0] = 'c'\n\n# Go to the third element (the nested list) and change the second element\ncopiedList2[2][1] = 'd'\n\n# Print out the original list to see what happened to it\nprint(objectList); print(copiedList2)\nprint(\"Both lists are different.\")\n\n\n\n\n['a', 'b', ['ab', 'ba']]\n['a', 'b', ['ab', 'ba']]\n['c', 'b', ['ab', 'd']]\nBoth lists are different.\n\n\n\nList comprehension\n\u00b6\n\n\nprint([x for x in range(10)]) # 10 not included\nprint([x**2 for x in range(10)])\nprint([x for x in range(10) if x%2==0])\nprint([x**2 for x in range(10) if x%2==0])\n\n\n\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n[0, 2, 4, 6, 8]\n[0, 4, 16, 36, 64]\n\n\n\nmyList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(myList)\n[(lambda x: x*x)(x) for x in myList]\nprint([(lambda x: x*x)(x) for x in myList])\n# or\nprint(range(10))\nf = lambda x: x*x\n[f(x) for x in range(10)]\nprint([f(x) for x in range(10)])\n\n\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nrange(0, 10)\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n\n\nDictionary comprehension also\u2026\n\u00b6\n\n\nCounting the occurrences of one item in a list\n\u00b6\n\n\n# tallying\nprint(\"Count the occurrences of the number 4 in the list.\")\nprint([1, 2, 9, 4, 5, 4, 1])\nprint([1, 2, 9, 4, 5, 4, 1].count(4))\n\nprint(\"Count the occurrences of the letter 'a' in the list\")\nlist1 = [\"d\", \"a\", \"t\", \"a\", \"c\", \"a\", \"m\", \"p\"]\nprint(list)\nlist1.count(\"a\")\n\n\n\n\nCount the occurrences of the number 4 in the list.\n[1, 2, 9, 4, 5, 4, 1]\n2\nCount the occurrences of the letter 'a' in the list\n<class 'list'>\n\n\n\n\n\n3\n\n\n\nCounting all items in a list with \ncount()\n\u00b6\n\n\nlist2 = [\"a\",\"b\",\"b\"]\nprint(list2)\n[[x,list2.count(x)] for x in list(list2)]\nprint([[x,list2.count(x)] for x in list(list2)])\n# now a set; sets only contain unique items\n# only the unique list items are kept\n\n\n\n\n['a', 'b', 'b']\n[['a', 1], ['b', 2], ['b', 2]]\n\n\n\nCounting all items in a list with \nCounter()\n from the \ncollections\n library\n\u00b6\n\n\n# Import `Counter` from the `collections` library\nfrom collections import Counter\n\n# This is your list\nlist2 = [\"a\",\"b\",\"b\"]\nprint(list2)\n\n# Pass `list` to `Counter()`\nCounter(list2)\nprint(Counter(list2))\n\n\n\n\n['a', 'b', 'b']\nCounter({'b': 2, 'a': 1})\n\n\n\nSplit A Python List Into Evenly Sized Chunks\n\u00b6\n\n\n# Your list `x`\nx = [1,2,3,4,5,6,7,8,9]\nprint(x)\n\n# Split `x` up in chunks of 3\ny = zip(*[iter(x)]*3)\n\n\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]\n\n\n\n\nThe first time, zip() will take one element of the list sequentially, which leaves you with:\n\n\n\n\n[1][2][3]\n\n\n\n\nThe second time, elements will be added to the three lists you just created:\n\n\n\n\n[1, 4], [2, 5], [3, 6]\n\n\n\n\nThe third and last time:\n\n\n\n\n[1, 2, 3], [4, 5, 6], [7, 8, 9]\n\n\n# Use `list()` to print the result of `zip()`\nprint(y.__doc__)\ntype(y)\n\n\n\n\nzip(iter1 [,iter2 [...]]) --> zip object\n\nReturn a zip object whose .__next__() method returns a tuple where\nthe i-th element comes from the i-th iterable argument.  The .__next__()\nmethod continues until the shortest iterable in the argument sequence\nis exhausted and then it raises StopIteration.\n\n\n\n\n\nzip\n\n\n\nprint(list(y))\n\n\n\n\n[]\n\n\n\n# Method to split up your lists into chunks\ndef chunks(myList, chunkSize):\n    \"\"\"Yield successive chunkSize-sized chunks from list.\"\"\"\n    for i in range(0, len(myList), chunkSize):\n        yield myList[i:i + chunkSize]\n\n# Use your `chunks` function to print out chunks of the same size\nimport pprint # pretty print\n\npprint.pprint(range(10, 75))\npprint.pprint(list(chunks(range(10, 75), 10)))\n\n\n\n\nrange(10, 75)\n[range(10, 20),\n range(20, 30),\n range(30, 40),\n range(40, 50),\n range(50, 60),\n range(60, 70),\n range(70, 75)]\n\n\n\n# Set up your list and chunk size\nlist1 = range(0, 50)\nchunk = 5\n\n# Split up your list into chunks\nprint([list1[i:i + chunk] for i in range(0, len(list1), chunk)])\n\n\n\n\n[range(0, 5), range(5, 10), range(10, 15), range(15, 20), range(20, 25), range(25, 30), range(30, 35), range(35, 40), range(40, 45), range(45, 50)]\n\n\n\nLoop over a list\n\u00b6\n\n\n# This is your list\nmyList = [[1,2,3],[4,5,6,7],[8,9,10]]\nprint(myList)\n\n# Loop over your list and print all elements that are of size 3\nfor x in myList:\n      if len(x)==3:\n        print(x) # element\n\n\n\n\n[[1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]\n[1, 2, 3]\n[8, 9, 10]\n\n\n\n# Alternatively\nprint([x for x in myList if len(x)==3])\n\n\n\n\n[[1, 2, 3], [8, 9, 10]]\n\n\n\n# This is your list\nmyList = [3,4,5,6]\nprint(myList)\n\n# Loop over `myList` and print tuples of all indices and values \nfor i, val in enumerate(myList): # return an index and a value\n     print(i, val) # indexElement, element\n\n\n\n\n[3, 4, 5, 6]\n0 3\n1 4\n2 5\n3 6\n\n\n\nCreate flat lists out of lists\n\u00b6\n\n\n# Your initial list of lists\nlistOfLists = [[1,2],[3,4],[5,6]]\nprint(listOfLists)\n\n# Flatten out your original list of lists with `sum()`\nprint(sum(listOfLists, []))\nprint(sum.__doc__)\n\nmyList = [1,2,3,4,5,6]\n\nprint(sum(myList))\n\n\n\n\n[[1, 2], [3, 4], [5, 6]]\n[1, 2, 3, 4, 5, 6]\nReturn the sum of a 'start' value (default: 0) plus an iterable of numbers\n\nWhen the iterable is empty, return the start value.\nThis function is intended specifically for use with numeric values and may\nreject non-numeric types.\n21\n\n\n\n# Alternatively\nfrom functools import reduce\n\nprint(reduce(lambda x,y: x+y,listOfLists)) #  iterable is reduced to a single value\n\n\n\n\n[1, 2, 3, 4, 5, 6]\n\n\n\nWhat happens, is that \n[1,2]\n is added to \n[3,4]\n and this result is added to \n[5,6]\n.\n\n\n([1,2]+[3,4])+[5,6])\n\n\nConsider item for item in sublist, printing out each item from the sublist.\n\n\nlist1 = []\nprint(list1)\n\nfor sublist in listOfLists:\n  for item in sublist:\n    list1.append(item)\n\nprint(list1)\n\n\n\n\n[]\n[1, 2, 3, 4, 5, 6]\n\n\n\n# Or you can use list comprehension\nprint([item for sublist in listOfLists for item in sublist])\n\n\n\n\n[1, 2, 3, 4, 5, 6]\n\n\n\nGet an intersection of two Python lists\n\u00b6\n\n\nlist1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\nprint(list1)\n\nlist2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\nprint(list2)\n\n# Intersect both lists with list comprehension\nintersection = [list(filter(lambda x: x in list1, sublist)) for sublist in list2]\n\n# Print the result of the intersection\nprint(intersection)\n\n\n\n\n[1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\n[[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\n[[13, 32], [7, 13, 28], [1, 6]]\n\n\n\n# An intersection of both lists, stored in `intersection`\nintersection = [[x for x in sublist if x in list1] for sublist in list2]\n\n# Print the result of the intersection\nprint(intersection)\n\n\n\n\n[[13, 32], [7, 13, 28], [1, 6]]\n\n\n\nRemove duplicates from a list\n\u00b6\n\n\nCheck whether a variable is an iterable by applying the method \n.__iter__\n.\n\n\n# Your list with duplicate values\nduplicates = [1, 2, 3, 1, 2, 5, 6, 7, 8]\n\n# Print the unique `duplicates` list\n#print(list(set(duplicates)))\n\n# A list with small numbers \nsmallNumbers = [1, 2, 3]\n\n# Print the unique `duplicates` list without the small numbers\n# detract the set elements of smallNumbers\nlist(set(duplicates) - set(smallNumbers))\n\n\n\n\n[8, 5, 6, 7]\n\n\n\nCreate Empty NumPy Arrays\n\u00b6\n\n\nPrefer NumPy arrays over lists in Python:\n\n\n\n\nBecause NumPy arrays are more compact than lists.\n\n\nBecause access in reading and writing items is faster with NumPy.\n\n\nBecause NumPy can be more convenient to work with, thanks to the fact that you get a lot of vector and matrix operations for free\n\n\nBecause NumPy can be more efficient to work with because they are implemented more efficiently.\n\n\n\n\nimport numpy\nprint(numpy.array([]))\n\n# Make a NumPy array of four rows and two columns and filled with 0\nprint(numpy.zeros(shape=(4,2)))\n\n# Make a NumPy array of 1 values of three columns\nprint(numpy.ones(3))\n\n# Make an empty NumPy array\nprint(numpy.empty(shape=(0,0)))\n\n\n\n\n[]\n[[ 0.  0.]\n [ 0.  0.]\n [ 0.  0.]\n [ 0.  0.]]\n[ 1.  1.  1.]\n[]\n\n\n\nDo math with lists (wt avg)\n\u00b6\n\n\ncost = [0.424, 0.4221, 0.4185, 0.4132, 0.413]\ncases = [10, 20, 30, 40, 50]\n\n\n\n\nfor c in range(len(cost)):\n   cost[c] = (cost[c] * cases[c] / sum(cases))\ncost = sum(cost)\nprint(cost)\n\n\n\n\n0.41609999999999997\n\n\n\ncost = [0.424, 0.4221, 0.4185, 0.4132, 0.413]\ncases = [10, 20, 30, 40, 50]\n\nsum(cost[c] * cases[c] / sum(cases) for c in range(len(cost)))\n\n\n\n\n0.41609999999999997\n\n\n\ncost = [0.424, 0.4221, 0.4185, 0.4132, 0.413]\ncases = [10, 20, 30, 40, 50]\n\nsum(cost[c] * cases[c] for c in range(len(cost))) / sum(cases)\n\n\n\n\n0.41609999999999997\n\n\n\ncost = [0.424, 0.4221, 0.4185, 0.4132, 0.413]\ncases = [10, 20, 30, 40, 50]\n\n# See what `zip()` does to your `cost` and `cases`\nprint(list(zip(cost, cases)))\n# zips your lists together\n\n# Calculate the weighted average\nprint(sum([x * y for x, y in zip(cost, cases)]) / sum(cases))\n\n\n\n\n[(0.424, 10), (0.4221, 20), (0.4185, 30), (0.4132, 40), (0.413, 50)]\n0.41609999999999997\n\n\n\nDo math with lists (quantiles)\n\u00b6\n\n\n# Import numpy as np\nimport numpy as np\n\n# Make a NumPy array\na = np.array([1,2,3,4,5])\n\n# Return the 50th percentile of our NumPy array\np50 = np.percentile(a, 50)\n\n#Print the result\nprint(p50)\n\nprint(np.percentile(a, (25, 75)))\n\n\n\n\n3.0\n[ 2.  4.]\n\n\n\nDo math with lists (\nsum\n)\n\u00b6\n\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nfrom operator import add\nlist(map(add, list1, list2))\n\n\n\n\n[5, 7, 9]\n\n\n\n[sum(x) for x in zip(list1, list2)]\n\n\n\n\n[5, 7, 9]\n\n\n\n# Import numpy as np\nimport numpy as np\n\n# Make your lists into NumPy arrays\nvector1 = np.array([1, 2, 3])\nvector2 = np.array([4, 5, 6])\n\n# Element-wise addition\nsum_vector = vector1 + vector2 \n\n# Print the result\nprint(sum_vector)\n\n\n\n\n[5 7 9]",
            "title": "Lists"
        },
        {
            "location": "/Lists/#iterable",
            "text": "The program can iterate over them.  Lists, strings, tuples, and sets are called \u201citerables\u201d.",
            "title": "Iterable"
        },
        {
            "location": "/Lists/#lists-versus-tuples",
            "text": "tup_course = ('physics', 'chemistry', 1997, 2000)   You can\u2019t add elements to a tuple. There\u2019s no  append()  or  extend()  method for tuples,  You can\u2019t remove elements from a tuple. Tuples have no  remove()  or  pop()  method,  You can find elements in a tuple since this doesn\u2019t change the tuple.  You can also use the in operator to check if an element exists in the tuple.  If you\u2019re defining a constant set of values, use a tuple instead of a list. It will be faster and safer.",
            "title": "Lists Versus tuples"
        },
        {
            "location": "/Lists/#lists-versus-sets",
            "text": "set_code = set{\"Perl\", \"Python\", \"Java\"}   Just like dictionaries, sets have no order in their collection of items. Not like lists.  Set requires the items contained in it to be hashable, lists store non-hashable items.  Sets require your items to be unique and immutable. Duplicates are not allowed in sets, while lists allow for duplicates and are mutable.  Use sets when you have an unordered set of UNIQUE, immutable values that are hashable.",
            "title": "Lists Versus sets"
        },
        {
            "location": "/Lists/#frozensets",
            "text": "set_cities = frozenset{\"Frankfurt\", \"Basel\",\"Freiburg\"}   Frozensets are like sets except that they cannot be changed, i.e. they are immutable.",
            "title": "Frozensets"
        },
        {
            "location": "/Lists/#lists-versus-dictionaries",
            "text": "dict_kid = {'Name': 'Zara', 'Age': 7, 'Class': 'First'   A list stores an ordered collection of items, so it keeps some order. Dictionaries don\u2019t have any order.  Dictionaries are known to associate each key with a value, while lists just contain values.  Use a dictionary when you have an unordered set of unique keys that map to values.",
            "title": "Lists Versus dictionaries"
        },
        {
            "location": "/Lists/#hashable-or-not",
            "text": "Hashable: float, integer, tuple, string.  Not: dictionary, set, list.",
            "title": "Hashable or Not"
        },
        {
            "location": "/Lists/#2-snippets",
            "text": "",
            "title": "2, Snippets"
        },
        {
            "location": "/Lists/#select-an-element-from-a-list",
            "text": "# These list elements are all of the same type\nzoo = ['bear', 'lion', 'panda', 'zebra']\nprint(zoo)  ['bear', 'lion', 'panda', 'zebra']  # But these list elements are not\nbiggerZoo = ['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\nprint(biggerZoo)  ['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]  # Select the first list element\noneZooAnimal = biggerZoo[0]\n\n# Print oneZooAnimal\nprint(oneZooAnimal)\nprint(biggerZoo[0])  bear\nbear",
            "title": "Select an element from a list"
        },
        {
            "location": "/Lists/#select-the-last-element",
            "text": "# Pass -1 to the index operator on `biggerZoo`\nmonkeys = biggerZoo[-1]\nprint(monkeys)\n\n# Pass -2 to the index operator on `biggerZoo`\nzebra = biggerZoo[-2]\nprint(zebra)  ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']\nzebra",
            "title": "Select the last element"
        },
        {
            "location": "/Lists/#out-of-range-error",
            "text": "# Run this code to trigger an \"Index Out Of Range\" Error\nprint(\"print(biggerZoo[6])\")  print(biggerZoo[6])",
            "title": "Out of range error"
        },
        {
            "location": "/Lists/#slice",
            "text": "# Print all\nprint(biggerZoo)\n\n# Print a[start: ]\nsomeZooAnimals = biggerZoo[2: ]\n\n# Print to see what you exactly select from `biggerZoo`\nprint(someZooAnimals)\n\n# Print a[ :end]\notherZooAnimals = biggerZoo[ :2]\n\n# Print to see what you're getting back\nprint(otherZooAnimals)\n\n# Print a[start:end]\nprint(biggerZoo[2:4])\n\n# Print a[start:end:step]\nprint(biggerZoo[2::4])\nprint(biggerZoo[2::2])\nprint(biggerZoo[2::1])  ['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n['panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n['bear', 'lion']\n['panda', 'zebra']\n['panda']\n['panda', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n['panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]",
            "title": "Slice"
        },
        {
            "location": "/Lists/#random",
            "text": "# Import `choice` from the `random` library\nfrom random import choice\n\n# Construct your `list` variable with a list of the first 4 letters of the alphabet\nlist1 = ['a','b','c','d']\n\n# Print your random 'list' element\nprint(choice(list1))\nprint(choice(list1))\n\n# Import `randrange` from the `random` library\nfrom random import randrange\n\n# Construct your `randomLetters` variable with a list of the first 4 letters of the alphabet\nrandomLetters = ['e','f', 'g', 'h']\n\n# Select a random index from 'randomLetters`\nrandomIndex = randrange(0,len(randomLetters))\n\n# Print your random element from `random`\nprint(randomLetters[randomIndex])  c\nc\ng",
            "title": "Random"
        },
        {
            "location": "/Lists/#convert-a-list-to-a-string-with-join",
            "text": "# List of Strings to a String\nlistOfStrings = ['One', 'Two', 'Three']\nstrOfStrings = ''.join(listOfStrings)\nprint(strOfStrings)\n\n# List Of Integers to a String\nlistOfNumbers = [1, 2, 3]\nstrOfNumbers = ''.join(str(n) for n in listOfNumbers)\nprint(strOfNumbers)  OneTwoThree\n123",
            "title": "Convert a list to a string with join()"
        },
        {
            "location": "/Lists/#convert-a-list-to-a-tuple-with-tuple",
            "text": "listOfStrings = ['One', 'Two', 'Three']\ntupOfStrings = tuple(listOfStrings)\nprint(tupOfStrings)  ('One', 'Two', 'Three')",
            "title": "Convert a list to a tuple with tuple()"
        },
        {
            "location": "/Lists/#convert-a-list-to-a-set-with-set",
            "text": "listOfStrings = ['One', 'Two', 'Three']\nsetOfStrings = set(listOfStrings)\nprint(setOfStrings)  {'One', 'Three', 'Two'}",
            "title": "Convert a list to a set with set()"
        },
        {
            "location": "/Lists/#convert-a-list-to-a-dictionary-with-zip",
            "text": "helloWorld = ['hello','world','1','2']\n\n# Convert to a dictionary\n# 1 will be interpreted as a key and 2 as a value\nhelloWorldDictionary = dict(zip(helloWorld[0::2], helloWorld[1::2]))\n\n# Print out the result\nprint(helloWorldDictionary)\n\na = [1, 2, 3, 4, 5]\n\n# Create a list iterator object\ni = iter(a)\n\n# Zip and create a dictionary\nprint(dict(zip(i, i)))  {'hello': 'world', '1': '2'}\n{1: 2, 3: 4}",
            "title": "Convert a list to a dictionary with zip()"
        },
        {
            "location": "/Lists/#size-of-your-list-with-len",
            "text": "print(biggerZoo)\n\n# Pass `justAList` to `len()`\nprint(len(biggerZoo))  ['bear', 'lion', 'panda', 'zebra', ['chimpanzees', 'gorillas', 'orangutans', 'gibbons']]\n5",
            "title": "Size of your list with len()"
        },
        {
            "location": "/Lists/#append-and-extend",
            "text": "# This is your list\nlist1 = [5, 6, 7, 8, 9]\nprint(list1)\n\n# Check whether it's iterable\nprint(list1.__iter__)\n\nshortList = [5, 6, 7, 8, 9]\nprint(shortList)\n\n# Append [4,5] to `shortList`\nshortList.append([4, 5])\n\n# Use the print() method to show shortList\nprint(shortList)\n\nlongerList = [5, 6, 7, 8, 9]\nprint(longerList)\n\n# Extend `longerList` with [4,5]\nlongerList.extend([4, 5])\n\n# Use the print() method to see longerList\nprint(longerList)  [5, 6, 7, 8, 9]\n<method-wrapper '__iter__' of list object at 0x7ff7a7d2dd88>\n[5, 6, 7, 8, 9]\n[5, 6, 7, 8, 9, [4, 5]]\n[5, 6, 7, 8, 9]\n[5, 6, 7, 8, 9, 4, 5]",
            "title": "append() and extend()"
        },
        {
            "location": "/Lists/#concatenate-lists",
            "text": "shortList = [5, 6, 7, 8, 9]\nprint(shortList)\n\n# Concatenate `shortList` with `[4,5]`\nplusList = shortList + [4,5]  [5, 6, 7, 8, 9]",
            "title": "Concatenate lists"
        },
        {
            "location": "/Lists/#sort-a-list",
            "text": "zoo = ['zebra', 'bear', 'lion', 'panda']\nprint(zoo)\n\n# Use sort() on the rooms list\nzoo.sort() # lists only\nprint(zoo)\n\nzoo = ['zebra', 'bear', 'lion', 'panda']\nprint(zoo)\n\n# Now use the sorted() function on orders\nprint(sorted(zoo)) # lists, strings, sets, dictionaries  ['zebra', 'bear', 'lion', 'panda']\n['bear', 'lion', 'panda', 'zebra']\n['zebra', 'bear', 'lion', 'panda']\n['bear', 'lion', 'panda', 'zebra']",
            "title": "Sort a list"
        },
        {
            "location": "/Lists/#copy-a-list-3-ways",
            "text": "zoo = ['zebra', 'bear', 'lion', 'panda']\nprint(zoo)\n\n# Copy the grocery list by slicing and store it in the `newGroceries` variable\nnewZoo = zoo[:]\nprint(newZoo)\n\n# Import the copy library as c\nimport copy as c\n\n# Create a `groceriesForFamily` variable and assign the copied grocery list to it\nzooForFamily =  c.copy(zoo)\nprint(zooForFamily)\n\n# Use `deepcopy()` and assign the copied list to a `groceriesForKids` variable\nzooForKids= c.deepcopy(zoo)\nprint(zooForKids)  ['zebra', 'bear', 'lion', 'panda']\n['zebra', 'bear', 'lion', 'panda']\n['zebra', 'bear', 'lion', 'panda']\n['zebra', 'bear', 'lion', 'panda']  When you use the \u2018simple\u2019 copy methods, your original lists will be modified. However, if you use the  deepcopy()  method, it will be prevented.  # This is your list\nobjectList = ['a','b',['ab','ba']]\nprint(objectList)\n\n# Copy the `objectList`\ncopiedList = objectList[:]\n\n# Change the first list element of `copiedList`\ncopiedList[0] = 'c'\n\n# Go to the third element (the nested list) and change the second element\ncopiedList[2][1] = 'd'\n\n# Print out the original list to see what happened to it\nprint(objectList); print(copiedList)\nprint(\"Both lists are equal.\")  ['a', 'b', ['ab', 'ba']]\n['a', 'b', ['ab', 'd']]\n['c', 'b', ['ab', 'd']]\nBoth lists are equal.  # 2, this is your list\nobjectList = ['a','b',['ab','ba']]\nprint(objectList)\n\n# Copy the `objectList`\nimport copy as c\ncopiedList2 = c.deepcopy(objectList)\n\n# Change the first list element of `copiedList`\ncopiedList2[0] = 'c'\n\n# Go to the third element (the nested list) and change the second element\ncopiedList2[2][1] = 'd'\n\n# Print out the original list to see what happened to it\nprint(objectList); print(copiedList2)\nprint(\"Both lists are different.\")  ['a', 'b', ['ab', 'ba']]\n['a', 'b', ['ab', 'ba']]\n['c', 'b', ['ab', 'd']]\nBoth lists are different.",
            "title": "Copy a List (3 ways):"
        },
        {
            "location": "/Lists/#list-comprehension",
            "text": "print([x for x in range(10)]) # 10 not included\nprint([x**2 for x in range(10)])\nprint([x for x in range(10) if x%2==0])\nprint([x**2 for x in range(10) if x%2==0])  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n[0, 2, 4, 6, 8]\n[0, 4, 16, 36, 64]  myList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(myList)\n[(lambda x: x*x)(x) for x in myList]\nprint([(lambda x: x*x)(x) for x in myList])\n# or\nprint(range(10))\nf = lambda x: x*x\n[f(x) for x in range(10)]\nprint([f(x) for x in range(10)])  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nrange(0, 10)\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]",
            "title": "List comprehension"
        },
        {
            "location": "/Lists/#dictionary-comprehension-also",
            "text": "",
            "title": "Dictionary comprehension also..."
        },
        {
            "location": "/Lists/#counting-the-occurrences-of-one-item-in-a-list",
            "text": "# tallying\nprint(\"Count the occurrences of the number 4 in the list.\")\nprint([1, 2, 9, 4, 5, 4, 1])\nprint([1, 2, 9, 4, 5, 4, 1].count(4))\n\nprint(\"Count the occurrences of the letter 'a' in the list\")\nlist1 = [\"d\", \"a\", \"t\", \"a\", \"c\", \"a\", \"m\", \"p\"]\nprint(list)\nlist1.count(\"a\")  Count the occurrences of the number 4 in the list.\n[1, 2, 9, 4, 5, 4, 1]\n2\nCount the occurrences of the letter 'a' in the list\n<class 'list'>\n\n\n\n\n\n3",
            "title": "Counting the occurrences of one item in a list"
        },
        {
            "location": "/Lists/#counting-all-items-in-a-list-with-count",
            "text": "list2 = [\"a\",\"b\",\"b\"]\nprint(list2)\n[[x,list2.count(x)] for x in list(list2)]\nprint([[x,list2.count(x)] for x in list(list2)])\n# now a set; sets only contain unique items\n# only the unique list items are kept  ['a', 'b', 'b']\n[['a', 1], ['b', 2], ['b', 2]]",
            "title": "Counting all items in a list with count()"
        },
        {
            "location": "/Lists/#counting-all-items-in-a-list-with-counter-from-the-collections-library",
            "text": "# Import `Counter` from the `collections` library\nfrom collections import Counter\n\n# This is your list\nlist2 = [\"a\",\"b\",\"b\"]\nprint(list2)\n\n# Pass `list` to `Counter()`\nCounter(list2)\nprint(Counter(list2))  ['a', 'b', 'b']\nCounter({'b': 2, 'a': 1})",
            "title": "Counting all items in a list with Counter() from the collections library"
        },
        {
            "location": "/Lists/#split-a-python-list-into-evenly-sized-chunks",
            "text": "# Your list `x`\nx = [1,2,3,4,5,6,7,8,9]\nprint(x)\n\n# Split `x` up in chunks of 3\ny = zip(*[iter(x)]*3)  [1, 2, 3, 4, 5, 6, 7, 8, 9]  [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]   The first time, zip() will take one element of the list sequentially, which leaves you with:   [1][2][3]   The second time, elements will be added to the three lists you just created:   [1, 4], [2, 5], [3, 6]   The third and last time:   [1, 2, 3], [4, 5, 6], [7, 8, 9]  # Use `list()` to print the result of `zip()`\nprint(y.__doc__)\ntype(y)  zip(iter1 [,iter2 [...]]) --> zip object\n\nReturn a zip object whose .__next__() method returns a tuple where\nthe i-th element comes from the i-th iterable argument.  The .__next__()\nmethod continues until the shortest iterable in the argument sequence\nis exhausted and then it raises StopIteration.\n\n\n\n\n\nzip  print(list(y))  []  # Method to split up your lists into chunks\ndef chunks(myList, chunkSize):\n    \"\"\"Yield successive chunkSize-sized chunks from list.\"\"\"\n    for i in range(0, len(myList), chunkSize):\n        yield myList[i:i + chunkSize]\n\n# Use your `chunks` function to print out chunks of the same size\nimport pprint # pretty print\n\npprint.pprint(range(10, 75))\npprint.pprint(list(chunks(range(10, 75), 10)))  range(10, 75)\n[range(10, 20),\n range(20, 30),\n range(30, 40),\n range(40, 50),\n range(50, 60),\n range(60, 70),\n range(70, 75)]  # Set up your list and chunk size\nlist1 = range(0, 50)\nchunk = 5\n\n# Split up your list into chunks\nprint([list1[i:i + chunk] for i in range(0, len(list1), chunk)])  [range(0, 5), range(5, 10), range(10, 15), range(15, 20), range(20, 25), range(25, 30), range(30, 35), range(35, 40), range(40, 45), range(45, 50)]",
            "title": "Split A Python List Into Evenly Sized Chunks"
        },
        {
            "location": "/Lists/#loop-over-a-list",
            "text": "# This is your list\nmyList = [[1,2,3],[4,5,6,7],[8,9,10]]\nprint(myList)\n\n# Loop over your list and print all elements that are of size 3\nfor x in myList:\n      if len(x)==3:\n        print(x) # element  [[1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]\n[1, 2, 3]\n[8, 9, 10]  # Alternatively\nprint([x for x in myList if len(x)==3])  [[1, 2, 3], [8, 9, 10]]  # This is your list\nmyList = [3,4,5,6]\nprint(myList)\n\n# Loop over `myList` and print tuples of all indices and values \nfor i, val in enumerate(myList): # return an index and a value\n     print(i, val) # indexElement, element  [3, 4, 5, 6]\n0 3\n1 4\n2 5\n3 6",
            "title": "Loop over a list"
        },
        {
            "location": "/Lists/#create-flat-lists-out-of-lists",
            "text": "# Your initial list of lists\nlistOfLists = [[1,2],[3,4],[5,6]]\nprint(listOfLists)\n\n# Flatten out your original list of lists with `sum()`\nprint(sum(listOfLists, []))\nprint(sum.__doc__)\n\nmyList = [1,2,3,4,5,6]\n\nprint(sum(myList))  [[1, 2], [3, 4], [5, 6]]\n[1, 2, 3, 4, 5, 6]\nReturn the sum of a 'start' value (default: 0) plus an iterable of numbers\n\nWhen the iterable is empty, return the start value.\nThis function is intended specifically for use with numeric values and may\nreject non-numeric types.\n21  # Alternatively\nfrom functools import reduce\n\nprint(reduce(lambda x,y: x+y,listOfLists)) #  iterable is reduced to a single value  [1, 2, 3, 4, 5, 6]  What happens, is that  [1,2]  is added to  [3,4]  and this result is added to  [5,6] .  ([1,2]+[3,4])+[5,6])  Consider item for item in sublist, printing out each item from the sublist.  list1 = []\nprint(list1)\n\nfor sublist in listOfLists:\n  for item in sublist:\n    list1.append(item)\n\nprint(list1)  []\n[1, 2, 3, 4, 5, 6]  # Or you can use list comprehension\nprint([item for sublist in listOfLists for item in sublist])  [1, 2, 3, 4, 5, 6]",
            "title": "Create flat lists out of lists"
        },
        {
            "location": "/Lists/#get-an-intersection-of-two-python-lists",
            "text": "list1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\nprint(list1)\n\nlist2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\nprint(list2)\n\n# Intersect both lists with list comprehension\nintersection = [list(filter(lambda x: x in list1, sublist)) for sublist in list2]\n\n# Print the result of the intersection\nprint(intersection)  [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\n[[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\n[[13, 32], [7, 13, 28], [1, 6]]  # An intersection of both lists, stored in `intersection`\nintersection = [[x for x in sublist if x in list1] for sublist in list2]\n\n# Print the result of the intersection\nprint(intersection)  [[13, 32], [7, 13, 28], [1, 6]]",
            "title": "Get an intersection of two Python lists"
        },
        {
            "location": "/Lists/#remove-duplicates-from-a-list",
            "text": "Check whether a variable is an iterable by applying the method  .__iter__ .  # Your list with duplicate values\nduplicates = [1, 2, 3, 1, 2, 5, 6, 7, 8]\n\n# Print the unique `duplicates` list\n#print(list(set(duplicates)))\n\n# A list with small numbers \nsmallNumbers = [1, 2, 3]\n\n# Print the unique `duplicates` list without the small numbers\n# detract the set elements of smallNumbers\nlist(set(duplicates) - set(smallNumbers))  [8, 5, 6, 7]",
            "title": "Remove duplicates from a list"
        },
        {
            "location": "/Lists/#create-empty-numpy-arrays",
            "text": "Prefer NumPy arrays over lists in Python:   Because NumPy arrays are more compact than lists.  Because access in reading and writing items is faster with NumPy.  Because NumPy can be more convenient to work with, thanks to the fact that you get a lot of vector and matrix operations for free  Because NumPy can be more efficient to work with because they are implemented more efficiently.   import numpy\nprint(numpy.array([]))\n\n# Make a NumPy array of four rows and two columns and filled with 0\nprint(numpy.zeros(shape=(4,2)))\n\n# Make a NumPy array of 1 values of three columns\nprint(numpy.ones(3))\n\n# Make an empty NumPy array\nprint(numpy.empty(shape=(0,0)))  []\n[[ 0.  0.]\n [ 0.  0.]\n [ 0.  0.]\n [ 0.  0.]]\n[ 1.  1.  1.]\n[]",
            "title": "Create Empty NumPy Arrays"
        },
        {
            "location": "/Lists/#do-math-with-lists-wt-avg",
            "text": "cost = [0.424, 0.4221, 0.4185, 0.4132, 0.413]\ncases = [10, 20, 30, 40, 50]  for c in range(len(cost)):\n   cost[c] = (cost[c] * cases[c] / sum(cases))\ncost = sum(cost)\nprint(cost)  0.41609999999999997  cost = [0.424, 0.4221, 0.4185, 0.4132, 0.413]\ncases = [10, 20, 30, 40, 50]\n\nsum(cost[c] * cases[c] / sum(cases) for c in range(len(cost)))  0.41609999999999997  cost = [0.424, 0.4221, 0.4185, 0.4132, 0.413]\ncases = [10, 20, 30, 40, 50]\n\nsum(cost[c] * cases[c] for c in range(len(cost))) / sum(cases)  0.41609999999999997  cost = [0.424, 0.4221, 0.4185, 0.4132, 0.413]\ncases = [10, 20, 30, 40, 50]\n\n# See what `zip()` does to your `cost` and `cases`\nprint(list(zip(cost, cases)))\n# zips your lists together\n\n# Calculate the weighted average\nprint(sum([x * y for x, y in zip(cost, cases)]) / sum(cases))  [(0.424, 10), (0.4221, 20), (0.4185, 30), (0.4132, 40), (0.413, 50)]\n0.41609999999999997",
            "title": "Do math with lists (wt avg)"
        },
        {
            "location": "/Lists/#do-math-with-lists-quantiles",
            "text": "# Import numpy as np\nimport numpy as np\n\n# Make a NumPy array\na = np.array([1,2,3,4,5])\n\n# Return the 50th percentile of our NumPy array\np50 = np.percentile(a, 50)\n\n#Print the result\nprint(p50)\n\nprint(np.percentile(a, (25, 75)))  3.0\n[ 2.  4.]",
            "title": "Do math with lists (quantiles)"
        },
        {
            "location": "/Lists/#do-math-with-lists-sum",
            "text": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nfrom operator import add\nlist(map(add, list1, list2))  [5, 7, 9]  [sum(x) for x in zip(list1, list2)]  [5, 7, 9]  # Import numpy as np\nimport numpy as np\n\n# Make your lists into NumPy arrays\nvector1 = np.array([1, 2, 3])\nvector2 = np.array([4, 5, 6])\n\n# Element-wise addition\nsum_vector = vector1 + vector2 \n\n# Print the result\nprint(sum_vector)  [5 7 9]",
            "title": "Do math with lists (sum)"
        },
        {
            "location": "/IPython Notebook/",
            "text": "CONTENT\n\n\nWebsites\n\n\nIpython Notebook Essentials\n\n\nLearning IPython for Interactive Computing and Data Visualization\n\n\nIPython Interactive Computing and Visualization Cookbook\n\n\nIntroduction to Python for Econometrics, Statistics and Data Analysis\n\n\nBuilding Machine Learning Systems with Python\n\n\nScipy Lecture Notes\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and books\u2019 tables of contents.\n\n\n\n\nWebsites\n\u00b6\n\n\n\n\nA gallery of interesting IPython Notebooks\n\n\nExcel plug-ins for Anaconda\n\n\n\n\nIpython Notebook Essentials\n\u00b6\n\n\nChapter 1: A Tour of the IPython Notebook 7\nGetting started with Anaconda or Wakari 8\nInstalling Anaconda 8\nRunning the notebook 8\nCreating a Wakari account 10\nCreating your frst notebook 11\nExample \u2013 the coffee cooling problem 12\nExercises 22\nSummary 22\nChapter 2: The Notebook Interface 23\nEditing and navigating a notebook 23\nGetting help and interrupting computations 25\nThe Edit mode 25\nThe Command mode 28\nCell types 29\nIPython magics 33\nInteracting with the operating system 37\nSaving the notebook 37\nConverting the notebook to other formats 38\nRunning shell commands 39\nRunning scripts, loading data, and saving data 41\nRunning Python scripts 41\nRunning scripts in other languages 43\nLoading and saving data 45\nThe rich display system 47\nImages and YouTube videos 47\nHTML 49\nSummary 52\nChapter 3: Graphics with matplotlib 53\nThe plot function 54\nAdding a title, labels, and a legend 59\nText and annotations 62\nThree-dimensional plots 66\nAnimations 71\nSummary 77\nChapter 4: Handling Data with pandas 79\nThe Series class 79\nThe DataFrame class 88\nComputational and graphics tools 95\nAn example with a realistic dataset 101\nSummary 108\nChapter 5: Advanced Computing with SciPy, Numba, and NumbaPro 109\nOverview of SciPy 109\nAdvanced mathematical algorithms with SciPy 111\nSolving equations and fnding optimal values 111\nCalculus and differential equations 117\nAccelerating computations with Numba and NumbaPro 128\nSummary 138\nAppendix A: IPython Notebook Reference Card 139\nStarting the notebook 139\nKeyboard shortcuts 139\nShortcuts in the Edit mode 139\nShortcuts in the Command mode 140\nImporting modules 141\nGetting help 141\nAppendix B: A Brief Review of Python 143\nIntroduction 143\nBasic types, expressions, and variables and their assignment 143\nSequence types 147\nLists 147\nTuples 150\nStrings 151\nDictionaries 152\nControl structures 152\nFunctions, objects, and methods 156\nFunctions 156\nObjects and methods 158\nSummary 159\nAppendix C: NumPy Arrays 161\nIntroduction 161\nArray creation and member access 161\nIndexing and Slicing 164\nIndex 167\n\n\n\n\nLearning IPython for Interactive Computing and Data Visualization\n\u00b6\n\n\nChapter 1: Getting Started with IPython 5\nInstalling IPython and the recommended packages 6\nPrerequisites for IPython 6\nInstalling an all-in-one distribution 7\nInstalling the packages one by one 7\nPackages websites 8\nGetting binary installers 9\nUsing the Python packaging system 11\nInstalling the development versions 12\nTen IPython essentials 13\nRunning the IPython console 13\nUsing IPython as a system shell 14\nUsing the history 15\nTab completion 15\nExecuting a script with the %run command 16\nQuick benchmarking with the %timeit command 17\nQuick debugging with the %debug command 17\nInteractive computing with Pylab 18\nUsing the IPython Notebook 19\nCustomizing IPython 19\nSummary 20\nChapter 2: Interactive Work with IPython 21\nThe extended shell 21\nNavigating through the flesystem 22\nAccessing the system shell from IPython 24\nThe extended Python console 25\nExploring the history 26\nImport/export of Python code 27\nImporting code in IPython 27\nExporting code to a fle 29\nDynamic introspection 29\nTab completion 29\nSource code introspection 31\nUsing the interactive debugger 32\nInteractive benchmarking and profling 33\nControlling the execution time of a command 33\nProfling a script 34\nUsing the IPython notebook 35\nInstallation 36\nThe notebook dashboard 36\nWorking with cells 37\nCell magics 38\nManaging notebooks 39\nMultimedia and rich text editing 39\nGraph plotting 40\nSummary 41\nChapter 3: Numerical Computing with IPython 43\nA primer to vector computing 44\nAn example of computation with Python loops 44\nWhat an array is 45\nReimplementing the example with arrays 48\nCreating and loading arrays 50\nCreating arrays 50\nFrom scratch, element by element 50\nFrom scratch, using predefned templates 51\nFrom random values 52\nLoading arrays 53\nFrom a native Python object 53\nFrom a buffer or an external fle 53\nUsing Pandas 54\nWorking with arrays 56\nSelection 56\nUsing Pandas 57\nUsing NumPy 58\nMore indexing possibilities 59\nManipulation 60\nReshaping 60\nRepeating and concatenating 61\nBroadcasting 62\nPermuting 63\nComputation 63\nAdvanced mathematical processing 65\nSummary 66\nChapter 4: Interactive Plotting and Graphical Interfaces 67\nFigures with Matplotlib 68\nSetting up IPython for interactive visualization 68\nUsing Matplotlib 68\nInteractive navigation 69\nMatplotlib in the IPython notebook 69\nStandard plots 69\nCurves 69\nScatter plots 71\nBar graphs 72\nPlot customization 72\nStyles and colors 73\nGrid, axes, and legends 74\nInteraction from IPython 75\nDrawing multiple plots 76\nAdvanced fgures and graphics 76\nImage processing 77\nLoading images 77\nShowing images 78\nUsing PIL 79\nAdvanced image processing \u2013 color quantization 79\nMaps 81\n3D plots 83\nAnimations 84\nOther visualization packages 84\nGraphical User Interfaces (GUI) 84\nSetting up IPython for interactive GUIs 85\nA \"Hello World\" example 85\nSummary 87\nChapter 5: High-Performance and Parallel Computing 89\nInteractive task parallelization 90\nParallel computing in Python 90\nDistributing tasks on multiple cores 91\nStarting the engines 91\nCreating a Client instance 92\nUsing the parallel magic 92\nParallel map 93\nA practical example \u2013 Monte Carlo simulations 95\nUsing MPI with IPython 96\nAdvanced parallel computing features of IPython 98\nUsing C in IPython with Cython 99\nInstalling and confguring Cython 99\nUsing Cython from IPython 100\nAccelerating a pure Python algorithm with Cython 101\nPure Python version 101\nNa\u00efve Cython conversion 102\nAdding C types 102\nUsing NumPy and Cython 103\nPython version 103\nCython version 104\nMore advanced options for accelerating Python code 106\nSummary 107\nChapter 6: Customizing IPython 109\nIPython profles 109\nProfle locations 110\nThe IPython confguration fles 110\nLoading scripts when IPython starts 111\nIPython extensions 111\nExample \u2013 line-by-line profling 111\nCreating new extensions 113\nExample \u2013 executing C++ code in IPython 113\nRich representations in the frontend 115\nEmbedding IPython 117\nFinal words 117\nSummary 118\nIndex 119\n\n\n\n\nIPython Interactive Computing and Visualization Cookbook\n\u00b6\n\n\nChapter 1: A Tour of Interactive Computing with IPython 9\nIntroduction 9\nIntroducing the IPython notebook 13\nGetting started with exploratory data analysis in IPython 22\nIntroducing the multidimensional array in NumPy for fast array computations 28\nCreating an IPython extension with custom magic commands 32\nMastering IPython configuration system 36\nCreating a simple kernel for IPython 39\nChapter 2: Best Practices in Interactive Computing 45\nIntroduction 45\nChoosing (or not) between Python 2 and Python 3 46\nEffcient interactive computing work\ufb02ows with IPython 50\nLearning the basics of the distributed version control system Git 53\nA typical work\ufb02ow with Git branching 56\nTen tips for conducting reproducible interactive computing experiments 59\nWriting high-quality Python code 63\nWriting unit tests with nose 67\nDebugging your code with IPython 74\nChapter 3: Mastering the Notebook 79\nIntroduction 79\nTeaching programming in the notebook with IPython blocks 84\nConverting an IPython notebook to other formats with nbconvert 89\nAdding custom controls in the notebook toolbar 94\nCustomizing the CSS style in the notebook 96\nUsing interactive widgets \u2013 a piano in the notebook 99\nCreating a custom JavaScript widget in the notebook \u2013 a spreadsheet editor for pandas 103\nProcessing webcam images in real time from the notebook 108\nChapter 4: Profling and Optimization 115\nIntroduction 115\nEvaluating the time taken by a statement in IPython 116\nProfling your code easily with cProfle and IPython 117\nProfling your code line-by-line with line_profler 121\nProfling the memory usage of your code with memory_profler 124\nUnderstanding the internals of NumPy to avoid unnecessary array copying 127\nUsing stride tricks with NumPy 133\nImplementing an effcient rolling average algorithm with stride tricks 135\nMaking effcient array selections in NumPy 138\nProcessing huge NumPy arrays with memory mapping 140\nManipulating large arrays with HDF5 and PyTables 142\nManipulating large heterogeneous tables with HDF5 and PyTables 146\nChapter 5: High-performance Computing 149\nIntroduction 149\nAccelerating pure Python code with Numba and Just-In-Time compilation 154\nAccelerating array computations with Numexpr 158\nWrapping a C library in Python with ctypes 159\nAccelerating Python code with Cython 163\nOptimizing Cython code by writing less Python and more C 167\nReleasing the GIL to take advantage of multi-core processors with Cython and OpenMP 174\nWriting massively parallel code for NVIDIA graphics cards (GPUs) with CUDA 175\nWriting massively parallel code for heterogeneous platforms with OpenCL 181\nDistributing Python code across multiple cores with IPython 185\nInteracting with asynchronous parallel tasks in IPython 189\nParallelizing code with MPI in IPython 192\nTrying the Julia language in the notebook 195\nChapter 6: Advanced Visualization 201\nIntroduction 201\nMaking nicer matplotlib fgures with prettyplotlib 202\nCreating beautiful statistical plots with seaborn 205\nCreating interactive web visualizations with Bokeh 208\nVisualizing a NetworkX graph in the IPython notebook with D3.js 211\nConverting matplotlib fgures to D3.js visualizations with mpld3 215\nGetting started with Vispy for high-performance interactive data visualizations 218\nChapter 7: Statistical Data Analysis 225\nIntroduction 225\nExploring a dataset with pandas and matplotlib 229\nGetting started with statistical hypothesis testing \u2013 a simple z-test 233\nGetting started with Bayesian methods 236\nEstimating the correlation between two variables with a contingency table and a chi-squared test 241\nFitting a probability distribution to data with the maximum likelihood method 245\nEstimating a probability distribution nonparametrically with a kernel density estimation 251\nFitting a Bayesian model by sampling from a posterior distribution with a Markov chain Monte Carlo method 255\nAnalyzing data with the R programming language in the IPython notebook 261\nChapter 8: Machine Learning 267\nIntroduction 267\nGetting started with scikit-learn 273\nPredicting who will survive on the Titanic with logistic regression 281\nLearning to recognize handwritten digits with a K-nearest neighbors classifer 285\nLearning from text \u2013 Naive Bayes for Natural Language Processing 289\nUsing support vector machines for classifcation tasks 293\nUsing a random forest to select important features for regression 298\nReducing the dimensionality of a dataset with a principal component analysis 302\nDetecting hidden structures in a dataset with clustering 306\nChapter 9: Numerical Optimization 311\nIntroduction 311\nFinding the root of a mathematical function 314\nMinimizing a mathematical function 317\nFitting a function to data with nonlinear least squares 323\nFinding the equilibrium state of a physical system by minimizing its potential energy 326\nChapter 10: Signal Processing 333\nIntroduction 333\nAnalyzing the frequency components of a signal with a Fast Fourier Transform 337\nApplying a linear flter to a digital signal 343\nComputing the autocorrelation of a time series 349\nChapter 11: Image and Audio Processing 353\nIntroduction 353\nManipulating the exposure of an image 355\nApplying flters on an image 358\nSegmenting an image 362\nFinding points of interest in an image 367\nDetecting faces in an image with OpenCV 370\nApplying digital flters to speech sounds 373\nCreating a sound synthesizer in the notebook 377\nChapter 12: Deterministic Dynamical Systems 381\nIntroduction 381\nPlotting the bifurcation diagram of a chaotic dynamical system 383\nSimulating an elementary cellular automaton 387\nSimulating an ordinary differential equation with SciPy 390\nSimulating a partial differential equation \u2013 reaction-diffusion systems and Turing patterns 394\nChapter 13: Stochastic Dynamical Systems 401\nIntroduction 401\nSimulating a discrete-time Markov chain 402\nSimulating a Poisson process 406\nSimulating a Brownian motion 410\nSimulating a stochastic differential equation 412\nChapter 14: Graphs, Geometry, and Geographic Information Systems 417\nIntroduction 417\nManipulating and visualizing graphs with NetworkX 421\nAnalyzing a social network with NetworkX 425\nResolving dependencies in a directed acyclic graph with a topological sort 430\nComputing connected components in an image 434\nComputing the Voronoi diagram of a set of points 438\nManipulating geospatial data with Shapely and basemap 442\nCreating a route planner for a road network 446\nChapter 15: Symbolic and Numerical Mathematics 453\nIntroduction 453\nDiving into symbolic computing with SymPy 454\nSolving equations and inequalities 457\nAnalyzing real-valued functions 458\nComputing exact probabilities and manipulating random variables 460\nA bit of number theory with SymPy 462\nFinding a Boolean propositional formula from a truth table 465\nAnalyzing a nonlinear differential system \u2013 Lotka-Volterra (predator-prey) equations 467\nGetting started with Sage 470\nIndex 473\n\n\n\n\nIntroduction to Python for Econometrics, Statistics and Data Analysis\n\u00b6\n\n\n1 Introduction 1\n1.1 Background 1\n1.2 Conventions 2\n1.3 Important Components of the Python Scientific Stack 3\n1.4 Setup 4\n1.5 Using Python 6\n1.6 Exercises 17\n1.A Frequently Encountered Problems 17\n1.B register_python.py 18\n1.C Advanced Setup 19\n2 Python 2.7 vs. 3 (and the rest) 27\n2.1 Python 2.7 vs. 3 27\n2.2 Intel Math Kernel Library and AMD Core Math Library 27\n2.3 Other Variants 28\n2.A Relevant Differences between Python 2.7 and 3 29\n3 Built-in Data Types 31\n3.1 Variable Names 31\n3.2 Core Native Data Types 32\n3.3 Python and Memory Management 42\n3.4 Exercises 44\n4 Arrays and Matrices 47\n4.1 Array 47\n4.2 Matrix 49\n4.3 1-dimensional Arrays 50\n4.4 2-dimensional Arrays 51\n4.5 Multidimensional Arrays 51\n4.6 Concatenation 51\n4.7 Accessing Elements of an Array 52\n4.8 Slicing and Memory Management 57\n4.9 import and Modules 59\n4.10 Calling Functions 59\n4.11 Exercises 61\n5 Basic Math 63\n5.1 Operators 63\n5.2 Broadcasting 64\n5.3 Array and Matrix Addition (+) and Subtraction (-) 65\n5.4 Array Multiplication (x) 66\n5.5 Matrix Multiplication (x) 66\n5.6 Array and Matrix Division (=) 66\n5.7 Array Exponentiation (xx) 66\n5.8 Matrix Exponentiation (xx) 67\n5.9 Parentheses 67\n5.10 Transpose 67\n5.11 Operator Precedence 67\n5.12 Exercises 68\n6 Basic Functions and Numerical Indexing 71\n6.1 Generating Arrays and Matrices 71\n6.2 Rounding 74\n6.3 Mathematics 75\n6.4 Complex Values 77\n6.5 Set Functions 77\n6.6 Sorting and Extreme Values 78\n6.7 Nan Functions 80\n6.8 Functions and Methods/Properties 81\n6.9 Exercises 82\n7 Special Arrays 83\n7.1 Exercises 84\n8 Array and Matrix Functions 85\n8.1 Views 85\n8.2 Shape Information and Transformation 86\n8.3 Linear Algebra Functions 93\n8.4 Exercises 96\n9 Importing and Exporting Data 99\n9.1 Importing Data using pandas 99\n9.2 Importing Data without pandas 100\n9.3 Saving or Exporting Data using pandas 106\n9.4 Saving or Exporting Data without pandas 106\n9.5 Exercises 107\n10 Inf, NaN and Numeric Limits 109\n10.1 inf and NaN 109\n10.2 Floating point precision 109\n10.3 Exercises 110\n11 Logical Operators and Find 113\n11.1 >, >=, <, <=, ==, != 113\n11.2 and, or, not and xor 114\n11.3 Multiple tests 115\n11.4 is* 116\n11.5 Exercises 117\n12 Advanced Selection and Assignment 119\n12.1 Numerical Indexing 119\n12.2 Logical Indexing 124\n12.3 Performance Considerations and Memory Management 128\n12.4 Assignment with Broadcasting 128\n12.5 Exercises 130\n13 Flow Control, Loops and Exception Handling 133\n13.1 Whitespace and Flow Control 133\n13.2 if . . . elif . . . else  133\n13.3 for 134\n13.4 while 137\n13.5 try . . . except 139\n13.6 List Comprehensions 139\n13.7 Tuple, Dictionary and Set Comprehensions 141\n13.8 Exercises 141\n14 Dates and Times 143\n14.1 Creating Dates and Times 143\n14.2 Dates Mathematics 143\n14.3 Numpy datetime64 144\n15 Graphics 147\n15.1 seaborn 147\n15.2 2D Plotting 147\n15.3 Advanced 2D Plotting 153\n15.4 3D Plotting 162\n15.5 General Plotting Functions 165\n15.6 Exporting Plots 165\n15.7 Exercises 166\n16 Structured Arrays 167\n16.1 Mixed Arrays with Column Names 167\n16.2 Record Arrays 170\n17 pandas 171\n17.1 Data Structures 171\n17.2 Statistical Function 191\n17.3 Time-series Data 192\n17.4 Importing and Exporting Data 196\n17.5 Graphics 200\n17.6 Examples 201\n18 Custom Function and Modules 207\n18.1 Functions 207\n18.2 Variable Scope 214\n18.3 Example: Least Squares with Newey-West Covariance 215\n18.4 Anonymous Functions 216\n18.5 Modules 216\n18.6 Packages 217\n18.7 PYTHONPATH 219\n18.8 Python Coding Conventions 219\n18.9 Exercises 220\n18.A Listing of econometrics.py 221\n19 Probability and Statistics Functions 225\n19.1 Simulating Random Variables 225\n19.2 Simulation and Random Number Generation 229\n19.3 Statistics Functions 231\n19.4 Continuous Random Variables 234\n19.5 Select Statistics Functions 237\n19.6 Select Statistical Tests 240\n19.7 Exercises 241\n20 Non-linear Function Optimization 243\n20.1 Unconstrained Optimization 244\n20.2 Derivative-free Optimization 247\n20.3 Constrained Optimization 248\n20.4 Scalar Function Minimization 252\n20.5 Nonlinear Least Squares 253\n20.6 Exercises 254\n21 String Manipulation 255\n21.1 String Building 255\n21.2 String Functions 256\n21.3 Formatting Numbers 260\n21.4 Regular Expressions 264\n21.5 Safe Conversion of Strings 265\n22 File System Operations 267\n22.1 Changing the Working Directory 267\n22.2 Creating and Deleting Directories 267\n22.3 Listing the Contents of a Directory 268\n22.4 Copying, Moving and Deleting Files 268\n22.5 Executing Other Programs 269\n22.6 Creating and Opening Archives 269\n22.7 Reading and Writing Files 270\n22.8 Exercises 272\n23 Performance and Code Optimization 273\n23.1 Getting Started 273\n23.2 Timing Code 273\n23.3 Vectorize to Avoid Unnecessary Loops 274\n23.4 Alter the loop dimensions 275\n23.5 Utilize Broadcasting 276\n23.6 Use In-place Assignment 276\n23.7 Avoid Allocating Memory 276\n23.8 Inline Frequent Function Calls 276\n23.9 Consider Data Locality in Arrays 276\n23.10 Profile Long Running Functions 277\n23.11 Numba 282\n23.12 Cython 288\n23.13 External Code 297\n23.14 Exercises 302\n24 Executing Code in Parallel 303\n24.1 map and related functions 303\n24.2 multiprocessing 304\n24.3 joblib 306\n24.4 IPython\u2019s Parallel Cluster 308\n24.5 Converting a Serial Program to Parallel 314\n24.6 Other Concerns when executing in Parallel 316\n25 Object Oriented Programming (OOP) 319\n25.1 Introduction 319\n25.2 Class basics 320\n25.3 Building a class for Autoregressions 322\n25.4 Exercises 329\n26 Other Interesting Python Packages 331\n26.1 statsmodels 331\n26.2 pytz and babel 331\n26.3 rpy2 331\n26.4 PyTables and h5py 331\n27 Examples 333\n27.1 Estimating the Parameters of a GARCH Model 333\n27.2 Estimating the Risk Premia using Fama-MacBeth Regressions 338\n27.3 Estimating the Risk Premia using GMM 341\n27.4 Outputting L ATEX 344\n28 Quick Reference 347\n28.1 Built-ins 347\n28.2 NumPy (numpy) 354\n28.3 SciPy 369\n28.4 Matplotlib 372\n28.5 Pandas 374\n28.6 IPython 378\n\n\n\n\nBuilding Machine Learning Systems with Python\n\u00b6\n\n\nChapter 1: Getting Started with Python Machine Learning 7\nMachine learning and Python \u2013 the dream team 8\nWhat the book will teach you (and what it will not) 9\nWhat to do when you are stuck 10\nGetting started 11\nIntroduction to NumPy, SciPy, and Matplotlib 12\nInstalling Python 12\nChewing data effciently with NumPy and intelligently with SciPy 12\nLearning NumPy 13\nIndexing 15\nHandling non-existing values 15\nComparing runtime behaviors 16\nLearning SciPy 17\nOur frst (tiny) machine learning application 19\nReading in the data 19\nPreprocessing and cleaning the data 20\nChoosing the right model and learning algorithm 22\nBefore building our frst model 22\nStarting with a simple straight line 22\nTowards some advanced stuff 24\nStepping back to go forward \u2013 another look at our data 26\nTraining and testing 28\nAnswering our initial question 30\nSummary 31\nChapter 2: Learning How to Classify with Real-world Examples 33\nThe Iris dataset 33\nThe frst step is visualization 34\nBuilding our frst classifcation model 35\nEvaluation \u2013 holding out data and cross-validation 38\nBuilding more complex classifers 40\nA more complex dataset and a more complex classifer 41\nLearning about the Seeds dataset 42\nFeatures and feature engineering 43\nNearest neighbor classifcation 44\nBinary and multiclass classifcation 47\nSummary 48\nChapter 3: Clustering \u2013 Finding Related Posts 49\nMeasuring the relatedness of posts 50\nHow not to do it 50\nHow to do it 51\nPreprocessing \u2013 similarity measured as similar number of common words 51\nConverting raw text into a bag-of-words 52\nCounting words 53\nNormalizing the word count vectors 56\nRemoving less important words 56\nStemming 57\nInstalling and using NLTK 58\nExtending the vectorizer with NLTK's stemmer 59\nStop words on steroids 60\nOur achievements and goals 61\nClustering 62\nKMeans 63\nGetting test data to evaluate our ideas on 65\nClustering posts 67\nSolving our initial challenge 68\nAnother look at noise 71\nTweaking the parameters 72\nSummary 73\nChapter 4: Topic Modeling 75\nLatent Dirichlet allocation (LDA) 75\nBuilding a topic model 76\nComparing similarity in topic space 80\nModeling the whole of Wikipedia 83\nChoosing the number of topics 86\nSummary 87\nChapter 5: Classifcation \u2013 Detecting Poor Answers 89\nSketching our roadmap 90\nLearning to classify classy answers 90\nTuning the instance 90\nTuning the classifer 90\nFetching the data 91\nSlimming the data down to chewable chunks 92\nPreselection and processing of attributes 93\nDefning what is a good answer 94\nCreating our frst classifer 95\nStarting with the k-nearest neighbor (kNN) algorithm 95\nEngineering the features 96\nTraining the classifer 97\nMeasuring the classifer's performance 97\nDesigning more features 98\nDeciding how to improve 101\nBias-variance and its trade-off 102\nFixing high bias 102\nFixing high variance 103\nHigh bias or low bias 103\nUsing logistic regression 105\nA bit of math with a small example 106\nApplying logistic regression to our postclassifcation problem 108\nLooking behind accuracy \u2013 precision and recall 110\nSlimming the classifer 114\nShip it! 115\nSummary 115\nChapter 6: Classifcation II \u2013 Sentiment Analysis 117\nSketching our roadmap 117\nFetching the Twitter data 118\nIntroducing the Naive Bayes classifer 118\nGetting to know the Bayes theorem 119\nBeing naive 120\nUsing Naive Bayes to classify 121\nAccounting for unseen words and other oddities 124\nAccounting for arithmetic under\ufb02ows 125\nCreating our frst classifer and tuning it 127\nSolving an easy problem frst 128\nUsing all the classes 130\nTuning the classifer's parameters 132\nCleaning tweets 136\nTaking the word types into account 138\nDetermining the word types 139\nSuccessfully cheating using SentiWordNet 141\nOur frst estimator 143\nPutting everything together 145\nSummary 146\nChapter 7: Regression \u2013 Recommendations 147\nPredicting house prices with regression 147\nMultidimensional regression 151\nCross-validation for regression 151\nPenalized regression 153\nL1 and L2 penalties 153\nUsing Lasso or Elastic nets in scikit-learn 154\nP greater than N scenarios 155\nAn example based on text 156\nSetting hyperparameters in a smart way 158\nRating prediction and recommendations 159\nSummary 163\nChapter 8: Regression \u2013 Recommendations Improved 165\nImproved recommendations 165\nUsing the binary matrix of recommendations 166\nLooking at the movie neighbors 168\nCombining multiple methods 169\nBasket analysis 172\nObtaining useful predictions 173\nAnalyzing supermarket shopping baskets 173\nAssociation rule mining 176\nMore advanced basket analysis 178\nSummary 179\nChapter 9: Classifcation III \u2013 Music Genre Classifcation 181\nSketching our roadmap 181\nFetching the music data 182\nConverting into a wave format 182\nLooking at music 182\nDecomposing music into sine wave components 184\nUsing FFT to build our frst classifer 186\nIncreasing experimentation agility 186\nTraining the classifer 187\nUsing the confusion matrix to measure accuracy in multiclass problems 188\nAn alternate way to measure classifer performance using receiver operator characteristic (ROC) 190\nImproving classifcation performance with Mel Frequency Cepstral Coeffcients 193\nSummary 197\nChapter 10: Computer Vision \u2013 Pattern Recognition 199\nIntroducing image processing 199\nLoading and displaying images 200\nBasic image processing 201\nThresholding 202\nGaussian blurring 205\nFiltering for different effects 207\nAdding salt and pepper noise 207\nPutting the center in focus 208\nPattern recognition 210\nComputing features from images 211\nWriting your own features 212\nClassifying a harder dataset 215\nLocal feature representations 216\nSummary 219\nChapter 11: Dimensionality Reduction 221\nSketching our roadmap 222\nSelecting features 222\nDetecting redundant features using flters 223\nCorrelation 223\nMutual information 225\nAsking the model about the features using wrappers 230\nOther feature selection methods 232\nFeature extraction 233\nAbout principal component analysis (PCA) 233\nSketching PCA 234\nApplying PCA 234\nLimitations of PCA and how LDA can help 236\nMultidimensional scaling (MDS) 237\nSummary 240\nChapter 12: Big(ger) Data 241\nLearning about big data 241\nUsing jug to break up your pipeline into tasks 242\nAbout tasks 242\nReusing partial results 245\nLooking under the hood 246\nUsing jug for data analysis 246\nUsing Amazon Web Services (AWS) 248\nCreating your frst machines 250\nInstalling Python packages on Amazon Linux 253\nRunning jug on our cloud machine 254\nAutomating the generation of clusters with starcluster 255\nSummary 259\nAppendix: Where to Learn More about Machine Learning 261\nOnline courses 261\nBooks 261\nQ&A sites 262\nBlogs 262\nData sources 263\nGetting competitive 263\nWhat was left out 264\nSummary 264\nIndex 265\n\n\n\n\nScipy Lecture Notes\n\u00b6\n\n\nI Getting started with Python for science 2\n1 Scientific computing with tools and workflow 4\n1.1 Why Python? 4\n1.2 Scientific Python building blocks 5\n1.3 The interactive workflow: IPython and a text editor 6\n2 The Python language 10\n2.1 First steps 10\n2.2 Basic types 11\n2.3 Control Flow 18\n2.4 Defining functions 22\n2.5 Reusing code: scripts and modules 27\n2.6 Input and Output 34\n2.7 Standard Library 35\n2.8 Exception handling in Python 39\n2.9 Object-oriented programming (OOP) 42\n3 NumPy: creating and manipulating numerical data 43\n3.1 The Numpy array object 43\n3.2 Numerical operations on arrays 55\n3.3 More elaborate arrays 68\n3.4 Advanced operations 72\n3.5 Some exercises 77\n4 Matplotlib: plotting 82\n4.1 Introduction 82\n4.2 Simple plot 83\n4.3 Figures, Subplots, Axes and Ticks 89\n4.4 Other Types of Plots: examples and exercises 90\n4.5 Beyond this tutorial 96\n4.6 Quick references 98\n5 Scipy : high-level scientific computing 101\n5.1 File input/output: scipy.io 102\n5.2 Special functions: scipy.special 103\n5.3 Linear algebra operations: scipy.linalg 103\n5.4 Fast Fourier transforms: scipy.fftpack 104\n5.5 Optimization and fit: scipy.optimize 109\n5.6 Statistics and random numbers: scipy.stats 113\n5.7 Interpolation: scipy.interpolate 115\n5.8 Numerical integration: scipy.integrate 116\n5.9 Signal processing: scipy.signal 118\n5.10 Image processing: scipy.ndimage 120\n5.11 Summary exercises on scientific computing 124\n6 Getting help and finding documentation 137\nII Advanced topics 140\n7 Advanced Python Constructs 142\n7.1 Iterators, generator expressions and generators 142\n7.2 Decorators 147\n7.3 Context managers 155\n8 Advanced Numpy 159\n8.1 Life of ndarray 160\n8.2 Universal functions 173\n8.3 Interoperability features 182\n8.4 Array siblings: chararray, maskedarray, matrix 185\n8.5 Summary 188\n8.6 Contributing to Numpy/Scipy 188\n9 Debugging code 192\n9.1 Avoiding bugs 192\n9.2 Debugging workflow 195\n9.3 Using the Python debugger 195\n9.4 Debugging segmentation faults using gdb 200\n10 Optimizing code 203\n10.1 Optimization workflow 203\n10.2 Profiling Python code 203\n10.3 Making code go faster 206\n10.4 Writing faster numerical code 207\n11 Sparse Matrices in SciPy 210\n11.1 Introduction 210\n11.2 Storage Schemes 212\n11.3 Linear System Solvers 224\n11.4 Other Interesting Packages 229\n12 Image manipulation and processing using Numpy and Scipy 230\n12.1 Opening and writing to image files 231\n12.2 Displaying images 232\n12.3 Basic manipulations 233\n12.4 Image filtering 235\n12.5 Feature extraction 240\n12.6 Measuring objects properties: ndimage.measurements 243\n13 Mathematical optimization: finding minima of functions 248\n13.1 Knowing your problem 249\n13.2 A review of the different optimizers 251\n13.3 Practical guide to optimization with scipy 258\n13.4 Special case: non-linear least-squares 260\n13.5 Optimization with constraints 261\n14 Interfacing with C 263\n14.1 Introduction 263\n14.2 Python-C-Api 264\n14.3 Ctypes 268\n14.4 SWIG 272\n14.5 Cython 276\n14.6 Summary 279\n14.7 Further Reading and References 280\n14.8 Exercises 280\nIII Packages and applications 282\n15 Statistics in Python 284\n15.1 Data representation and interaction 285\n15.2 Hypothesis testing: comparing two groups 289\n15.3 Linear models, multiple factors, and analysis of variance 292\n15.4 More visualization: seaborn for statistical exploration 297\n15.5 Testing for interactions 299\n16 Sympy : Symbolic Mathematics in Python 301\n16.1 First Steps with SymPy 302\n16.2 Algebraic manipulations 303\n16.3 Calculus 304\n16.4 Equation solving 305\n16.5 Linear Algebra 306\n17 Scikit-image: image processing 308\n17.1 Introduction and concepts 308\n17.2 Input/output, data types and colorspaces 310\n17.3 Image preprocessing / enhancement 312\n17.4 Image segmentation 315\n17.5 Measuring regions\u2019 properties 318\n17.6 Data visualization and interaction 318\n17.7 Feature extraction for computer vision 320\n18 Traits: building interactive dialogs 322\n18.1 Introduction 323\n18.2 Example 323\n18.3 What are Traits 324\n19 3D plotting with Mayavi 340\n19.1 Mlab: the scripting interface 340\n19.2 Interactive work 346\n19.3 Slicing and dicing data: sources, modules and filters 347\n19.4 Animating the data 349\n19.5 Making interactive dialogs 350\n19.6 Putting it together 351\n20 scikit-learn: machine learning in Python 353\n20.1 Loading an example dataset 354\n20.2 Classification 355\n20.3 Clustering: grouping observations together 357\n20.4 Dimension Reduction with Principal Component Analysis 359\n20.5 Putting it all together: face recognition 360\n20.6 Linear model: from regression to sparsity 361\n20.7 Model selection: choosing estimators and their parameters 362\nIndex 363",
            "title": "IPython Notebook, Collection"
        },
        {
            "location": "/IPython Notebook/#ipython-notebook-essentials",
            "text": "Chapter 1: A Tour of the IPython Notebook 7\nGetting started with Anaconda or Wakari 8\nInstalling Anaconda 8\nRunning the notebook 8\nCreating a Wakari account 10\nCreating your frst notebook 11\nExample \u2013 the coffee cooling problem 12\nExercises 22\nSummary 22\nChapter 2: The Notebook Interface 23\nEditing and navigating a notebook 23\nGetting help and interrupting computations 25\nThe Edit mode 25\nThe Command mode 28\nCell types 29\nIPython magics 33\nInteracting with the operating system 37\nSaving the notebook 37\nConverting the notebook to other formats 38\nRunning shell commands 39\nRunning scripts, loading data, and saving data 41\nRunning Python scripts 41\nRunning scripts in other languages 43\nLoading and saving data 45\nThe rich display system 47\nImages and YouTube videos 47\nHTML 49\nSummary 52\nChapter 3: Graphics with matplotlib 53\nThe plot function 54\nAdding a title, labels, and a legend 59\nText and annotations 62\nThree-dimensional plots 66\nAnimations 71\nSummary 77\nChapter 4: Handling Data with pandas 79\nThe Series class 79\nThe DataFrame class 88\nComputational and graphics tools 95\nAn example with a realistic dataset 101\nSummary 108\nChapter 5: Advanced Computing with SciPy, Numba, and NumbaPro 109\nOverview of SciPy 109\nAdvanced mathematical algorithms with SciPy 111\nSolving equations and fnding optimal values 111\nCalculus and differential equations 117\nAccelerating computations with Numba and NumbaPro 128\nSummary 138\nAppendix A: IPython Notebook Reference Card 139\nStarting the notebook 139\nKeyboard shortcuts 139\nShortcuts in the Edit mode 139\nShortcuts in the Command mode 140\nImporting modules 141\nGetting help 141\nAppendix B: A Brief Review of Python 143\nIntroduction 143\nBasic types, expressions, and variables and their assignment 143\nSequence types 147\nLists 147\nTuples 150\nStrings 151\nDictionaries 152\nControl structures 152\nFunctions, objects, and methods 156\nFunctions 156\nObjects and methods 158\nSummary 159\nAppendix C: NumPy Arrays 161\nIntroduction 161\nArray creation and member access 161\nIndexing and Slicing 164\nIndex 167",
            "title": "Ipython Notebook Essentials"
        },
        {
            "location": "/IPython Notebook/#learning-ipython-for-interactive-computing-and-data-visualization",
            "text": "Chapter 1: Getting Started with IPython 5\nInstalling IPython and the recommended packages 6\nPrerequisites for IPython 6\nInstalling an all-in-one distribution 7\nInstalling the packages one by one 7\nPackages websites 8\nGetting binary installers 9\nUsing the Python packaging system 11\nInstalling the development versions 12\nTen IPython essentials 13\nRunning the IPython console 13\nUsing IPython as a system shell 14\nUsing the history 15\nTab completion 15\nExecuting a script with the %run command 16\nQuick benchmarking with the %timeit command 17\nQuick debugging with the %debug command 17\nInteractive computing with Pylab 18\nUsing the IPython Notebook 19\nCustomizing IPython 19\nSummary 20\nChapter 2: Interactive Work with IPython 21\nThe extended shell 21\nNavigating through the flesystem 22\nAccessing the system shell from IPython 24\nThe extended Python console 25\nExploring the history 26\nImport/export of Python code 27\nImporting code in IPython 27\nExporting code to a fle 29\nDynamic introspection 29\nTab completion 29\nSource code introspection 31\nUsing the interactive debugger 32\nInteractive benchmarking and profling 33\nControlling the execution time of a command 33\nProfling a script 34\nUsing the IPython notebook 35\nInstallation 36\nThe notebook dashboard 36\nWorking with cells 37\nCell magics 38\nManaging notebooks 39\nMultimedia and rich text editing 39\nGraph plotting 40\nSummary 41\nChapter 3: Numerical Computing with IPython 43\nA primer to vector computing 44\nAn example of computation with Python loops 44\nWhat an array is 45\nReimplementing the example with arrays 48\nCreating and loading arrays 50\nCreating arrays 50\nFrom scratch, element by element 50\nFrom scratch, using predefned templates 51\nFrom random values 52\nLoading arrays 53\nFrom a native Python object 53\nFrom a buffer or an external fle 53\nUsing Pandas 54\nWorking with arrays 56\nSelection 56\nUsing Pandas 57\nUsing NumPy 58\nMore indexing possibilities 59\nManipulation 60\nReshaping 60\nRepeating and concatenating 61\nBroadcasting 62\nPermuting 63\nComputation 63\nAdvanced mathematical processing 65\nSummary 66\nChapter 4: Interactive Plotting and Graphical Interfaces 67\nFigures with Matplotlib 68\nSetting up IPython for interactive visualization 68\nUsing Matplotlib 68\nInteractive navigation 69\nMatplotlib in the IPython notebook 69\nStandard plots 69\nCurves 69\nScatter plots 71\nBar graphs 72\nPlot customization 72\nStyles and colors 73\nGrid, axes, and legends 74\nInteraction from IPython 75\nDrawing multiple plots 76\nAdvanced fgures and graphics 76\nImage processing 77\nLoading images 77\nShowing images 78\nUsing PIL 79\nAdvanced image processing \u2013 color quantization 79\nMaps 81\n3D plots 83\nAnimations 84\nOther visualization packages 84\nGraphical User Interfaces (GUI) 84\nSetting up IPython for interactive GUIs 85\nA \"Hello World\" example 85\nSummary 87\nChapter 5: High-Performance and Parallel Computing 89\nInteractive task parallelization 90\nParallel computing in Python 90\nDistributing tasks on multiple cores 91\nStarting the engines 91\nCreating a Client instance 92\nUsing the parallel magic 92\nParallel map 93\nA practical example \u2013 Monte Carlo simulations 95\nUsing MPI with IPython 96\nAdvanced parallel computing features of IPython 98\nUsing C in IPython with Cython 99\nInstalling and confguring Cython 99\nUsing Cython from IPython 100\nAccelerating a pure Python algorithm with Cython 101\nPure Python version 101\nNa\u00efve Cython conversion 102\nAdding C types 102\nUsing NumPy and Cython 103\nPython version 103\nCython version 104\nMore advanced options for accelerating Python code 106\nSummary 107\nChapter 6: Customizing IPython 109\nIPython profles 109\nProfle locations 110\nThe IPython confguration fles 110\nLoading scripts when IPython starts 111\nIPython extensions 111\nExample \u2013 line-by-line profling 111\nCreating new extensions 113\nExample \u2013 executing C++ code in IPython 113\nRich representations in the frontend 115\nEmbedding IPython 117\nFinal words 117\nSummary 118\nIndex 119",
            "title": "Learning IPython for Interactive Computing and Data Visualization"
        },
        {
            "location": "/IPython Notebook/#ipython-interactive-computing-and-visualization-cookbook",
            "text": "Chapter 1: A Tour of Interactive Computing with IPython 9\nIntroduction 9\nIntroducing the IPython notebook 13\nGetting started with exploratory data analysis in IPython 22\nIntroducing the multidimensional array in NumPy for fast array computations 28\nCreating an IPython extension with custom magic commands 32\nMastering IPython configuration system 36\nCreating a simple kernel for IPython 39\nChapter 2: Best Practices in Interactive Computing 45\nIntroduction 45\nChoosing (or not) between Python 2 and Python 3 46\nEffcient interactive computing work\ufb02ows with IPython 50\nLearning the basics of the distributed version control system Git 53\nA typical work\ufb02ow with Git branching 56\nTen tips for conducting reproducible interactive computing experiments 59\nWriting high-quality Python code 63\nWriting unit tests with nose 67\nDebugging your code with IPython 74\nChapter 3: Mastering the Notebook 79\nIntroduction 79\nTeaching programming in the notebook with IPython blocks 84\nConverting an IPython notebook to other formats with nbconvert 89\nAdding custom controls in the notebook toolbar 94\nCustomizing the CSS style in the notebook 96\nUsing interactive widgets \u2013 a piano in the notebook 99\nCreating a custom JavaScript widget in the notebook \u2013 a spreadsheet editor for pandas 103\nProcessing webcam images in real time from the notebook 108\nChapter 4: Profling and Optimization 115\nIntroduction 115\nEvaluating the time taken by a statement in IPython 116\nProfling your code easily with cProfle and IPython 117\nProfling your code line-by-line with line_profler 121\nProfling the memory usage of your code with memory_profler 124\nUnderstanding the internals of NumPy to avoid unnecessary array copying 127\nUsing stride tricks with NumPy 133\nImplementing an effcient rolling average algorithm with stride tricks 135\nMaking effcient array selections in NumPy 138\nProcessing huge NumPy arrays with memory mapping 140\nManipulating large arrays with HDF5 and PyTables 142\nManipulating large heterogeneous tables with HDF5 and PyTables 146\nChapter 5: High-performance Computing 149\nIntroduction 149\nAccelerating pure Python code with Numba and Just-In-Time compilation 154\nAccelerating array computations with Numexpr 158\nWrapping a C library in Python with ctypes 159\nAccelerating Python code with Cython 163\nOptimizing Cython code by writing less Python and more C 167\nReleasing the GIL to take advantage of multi-core processors with Cython and OpenMP 174\nWriting massively parallel code for NVIDIA graphics cards (GPUs) with CUDA 175\nWriting massively parallel code for heterogeneous platforms with OpenCL 181\nDistributing Python code across multiple cores with IPython 185\nInteracting with asynchronous parallel tasks in IPython 189\nParallelizing code with MPI in IPython 192\nTrying the Julia language in the notebook 195\nChapter 6: Advanced Visualization 201\nIntroduction 201\nMaking nicer matplotlib fgures with prettyplotlib 202\nCreating beautiful statistical plots with seaborn 205\nCreating interactive web visualizations with Bokeh 208\nVisualizing a NetworkX graph in the IPython notebook with D3.js 211\nConverting matplotlib fgures to D3.js visualizations with mpld3 215\nGetting started with Vispy for high-performance interactive data visualizations 218\nChapter 7: Statistical Data Analysis 225\nIntroduction 225\nExploring a dataset with pandas and matplotlib 229\nGetting started with statistical hypothesis testing \u2013 a simple z-test 233\nGetting started with Bayesian methods 236\nEstimating the correlation between two variables with a contingency table and a chi-squared test 241\nFitting a probability distribution to data with the maximum likelihood method 245\nEstimating a probability distribution nonparametrically with a kernel density estimation 251\nFitting a Bayesian model by sampling from a posterior distribution with a Markov chain Monte Carlo method 255\nAnalyzing data with the R programming language in the IPython notebook 261\nChapter 8: Machine Learning 267\nIntroduction 267\nGetting started with scikit-learn 273\nPredicting who will survive on the Titanic with logistic regression 281\nLearning to recognize handwritten digits with a K-nearest neighbors classifer 285\nLearning from text \u2013 Naive Bayes for Natural Language Processing 289\nUsing support vector machines for classifcation tasks 293\nUsing a random forest to select important features for regression 298\nReducing the dimensionality of a dataset with a principal component analysis 302\nDetecting hidden structures in a dataset with clustering 306\nChapter 9: Numerical Optimization 311\nIntroduction 311\nFinding the root of a mathematical function 314\nMinimizing a mathematical function 317\nFitting a function to data with nonlinear least squares 323\nFinding the equilibrium state of a physical system by minimizing its potential energy 326\nChapter 10: Signal Processing 333\nIntroduction 333\nAnalyzing the frequency components of a signal with a Fast Fourier Transform 337\nApplying a linear flter to a digital signal 343\nComputing the autocorrelation of a time series 349\nChapter 11: Image and Audio Processing 353\nIntroduction 353\nManipulating the exposure of an image 355\nApplying flters on an image 358\nSegmenting an image 362\nFinding points of interest in an image 367\nDetecting faces in an image with OpenCV 370\nApplying digital flters to speech sounds 373\nCreating a sound synthesizer in the notebook 377\nChapter 12: Deterministic Dynamical Systems 381\nIntroduction 381\nPlotting the bifurcation diagram of a chaotic dynamical system 383\nSimulating an elementary cellular automaton 387\nSimulating an ordinary differential equation with SciPy 390\nSimulating a partial differential equation \u2013 reaction-diffusion systems and Turing patterns 394\nChapter 13: Stochastic Dynamical Systems 401\nIntroduction 401\nSimulating a discrete-time Markov chain 402\nSimulating a Poisson process 406\nSimulating a Brownian motion 410\nSimulating a stochastic differential equation 412\nChapter 14: Graphs, Geometry, and Geographic Information Systems 417\nIntroduction 417\nManipulating and visualizing graphs with NetworkX 421\nAnalyzing a social network with NetworkX 425\nResolving dependencies in a directed acyclic graph with a topological sort 430\nComputing connected components in an image 434\nComputing the Voronoi diagram of a set of points 438\nManipulating geospatial data with Shapely and basemap 442\nCreating a route planner for a road network 446\nChapter 15: Symbolic and Numerical Mathematics 453\nIntroduction 453\nDiving into symbolic computing with SymPy 454\nSolving equations and inequalities 457\nAnalyzing real-valued functions 458\nComputing exact probabilities and manipulating random variables 460\nA bit of number theory with SymPy 462\nFinding a Boolean propositional formula from a truth table 465\nAnalyzing a nonlinear differential system \u2013 Lotka-Volterra (predator-prey) equations 467\nGetting started with Sage 470\nIndex 473",
            "title": "IPython Interactive Computing and Visualization Cookbook"
        },
        {
            "location": "/IPython Notebook/#introduction-to-python-for-econometrics-statistics-and-data-analysis",
            "text": "1 Introduction 1\n1.1 Background 1\n1.2 Conventions 2\n1.3 Important Components of the Python Scientific Stack 3\n1.4 Setup 4\n1.5 Using Python 6\n1.6 Exercises 17\n1.A Frequently Encountered Problems 17\n1.B register_python.py 18\n1.C Advanced Setup 19\n2 Python 2.7 vs. 3 (and the rest) 27\n2.1 Python 2.7 vs. 3 27\n2.2 Intel Math Kernel Library and AMD Core Math Library 27\n2.3 Other Variants 28\n2.A Relevant Differences between Python 2.7 and 3 29\n3 Built-in Data Types 31\n3.1 Variable Names 31\n3.2 Core Native Data Types 32\n3.3 Python and Memory Management 42\n3.4 Exercises 44\n4 Arrays and Matrices 47\n4.1 Array 47\n4.2 Matrix 49\n4.3 1-dimensional Arrays 50\n4.4 2-dimensional Arrays 51\n4.5 Multidimensional Arrays 51\n4.6 Concatenation 51\n4.7 Accessing Elements of an Array 52\n4.8 Slicing and Memory Management 57\n4.9 import and Modules 59\n4.10 Calling Functions 59\n4.11 Exercises 61\n5 Basic Math 63\n5.1 Operators 63\n5.2 Broadcasting 64\n5.3 Array and Matrix Addition (+) and Subtraction (-) 65\n5.4 Array Multiplication (x) 66\n5.5 Matrix Multiplication (x) 66\n5.6 Array and Matrix Division (=) 66\n5.7 Array Exponentiation (xx) 66\n5.8 Matrix Exponentiation (xx) 67\n5.9 Parentheses 67\n5.10 Transpose 67\n5.11 Operator Precedence 67\n5.12 Exercises 68\n6 Basic Functions and Numerical Indexing 71\n6.1 Generating Arrays and Matrices 71\n6.2 Rounding 74\n6.3 Mathematics 75\n6.4 Complex Values 77\n6.5 Set Functions 77\n6.6 Sorting and Extreme Values 78\n6.7 Nan Functions 80\n6.8 Functions and Methods/Properties 81\n6.9 Exercises 82\n7 Special Arrays 83\n7.1 Exercises 84\n8 Array and Matrix Functions 85\n8.1 Views 85\n8.2 Shape Information and Transformation 86\n8.3 Linear Algebra Functions 93\n8.4 Exercises 96\n9 Importing and Exporting Data 99\n9.1 Importing Data using pandas 99\n9.2 Importing Data without pandas 100\n9.3 Saving or Exporting Data using pandas 106\n9.4 Saving or Exporting Data without pandas 106\n9.5 Exercises 107\n10 Inf, NaN and Numeric Limits 109\n10.1 inf and NaN 109\n10.2 Floating point precision 109\n10.3 Exercises 110\n11 Logical Operators and Find 113\n11.1 >, >=, <, <=, ==, != 113\n11.2 and, or, not and xor 114\n11.3 Multiple tests 115\n11.4 is* 116\n11.5 Exercises 117\n12 Advanced Selection and Assignment 119\n12.1 Numerical Indexing 119\n12.2 Logical Indexing 124\n12.3 Performance Considerations and Memory Management 128\n12.4 Assignment with Broadcasting 128\n12.5 Exercises 130\n13 Flow Control, Loops and Exception Handling 133\n13.1 Whitespace and Flow Control 133\n13.2 if . . . elif . . . else  133\n13.3 for 134\n13.4 while 137\n13.5 try . . . except 139\n13.6 List Comprehensions 139\n13.7 Tuple, Dictionary and Set Comprehensions 141\n13.8 Exercises 141\n14 Dates and Times 143\n14.1 Creating Dates and Times 143\n14.2 Dates Mathematics 143\n14.3 Numpy datetime64 144\n15 Graphics 147\n15.1 seaborn 147\n15.2 2D Plotting 147\n15.3 Advanced 2D Plotting 153\n15.4 3D Plotting 162\n15.5 General Plotting Functions 165\n15.6 Exporting Plots 165\n15.7 Exercises 166\n16 Structured Arrays 167\n16.1 Mixed Arrays with Column Names 167\n16.2 Record Arrays 170\n17 pandas 171\n17.1 Data Structures 171\n17.2 Statistical Function 191\n17.3 Time-series Data 192\n17.4 Importing and Exporting Data 196\n17.5 Graphics 200\n17.6 Examples 201\n18 Custom Function and Modules 207\n18.1 Functions 207\n18.2 Variable Scope 214\n18.3 Example: Least Squares with Newey-West Covariance 215\n18.4 Anonymous Functions 216\n18.5 Modules 216\n18.6 Packages 217\n18.7 PYTHONPATH 219\n18.8 Python Coding Conventions 219\n18.9 Exercises 220\n18.A Listing of econometrics.py 221\n19 Probability and Statistics Functions 225\n19.1 Simulating Random Variables 225\n19.2 Simulation and Random Number Generation 229\n19.3 Statistics Functions 231\n19.4 Continuous Random Variables 234\n19.5 Select Statistics Functions 237\n19.6 Select Statistical Tests 240\n19.7 Exercises 241\n20 Non-linear Function Optimization 243\n20.1 Unconstrained Optimization 244\n20.2 Derivative-free Optimization 247\n20.3 Constrained Optimization 248\n20.4 Scalar Function Minimization 252\n20.5 Nonlinear Least Squares 253\n20.6 Exercises 254\n21 String Manipulation 255\n21.1 String Building 255\n21.2 String Functions 256\n21.3 Formatting Numbers 260\n21.4 Regular Expressions 264\n21.5 Safe Conversion of Strings 265\n22 File System Operations 267\n22.1 Changing the Working Directory 267\n22.2 Creating and Deleting Directories 267\n22.3 Listing the Contents of a Directory 268\n22.4 Copying, Moving and Deleting Files 268\n22.5 Executing Other Programs 269\n22.6 Creating and Opening Archives 269\n22.7 Reading and Writing Files 270\n22.8 Exercises 272\n23 Performance and Code Optimization 273\n23.1 Getting Started 273\n23.2 Timing Code 273\n23.3 Vectorize to Avoid Unnecessary Loops 274\n23.4 Alter the loop dimensions 275\n23.5 Utilize Broadcasting 276\n23.6 Use In-place Assignment 276\n23.7 Avoid Allocating Memory 276\n23.8 Inline Frequent Function Calls 276\n23.9 Consider Data Locality in Arrays 276\n23.10 Profile Long Running Functions 277\n23.11 Numba 282\n23.12 Cython 288\n23.13 External Code 297\n23.14 Exercises 302\n24 Executing Code in Parallel 303\n24.1 map and related functions 303\n24.2 multiprocessing 304\n24.3 joblib 306\n24.4 IPython\u2019s Parallel Cluster 308\n24.5 Converting a Serial Program to Parallel 314\n24.6 Other Concerns when executing in Parallel 316\n25 Object Oriented Programming (OOP) 319\n25.1 Introduction 319\n25.2 Class basics 320\n25.3 Building a class for Autoregressions 322\n25.4 Exercises 329\n26 Other Interesting Python Packages 331\n26.1 statsmodels 331\n26.2 pytz and babel 331\n26.3 rpy2 331\n26.4 PyTables and h5py 331\n27 Examples 333\n27.1 Estimating the Parameters of a GARCH Model 333\n27.2 Estimating the Risk Premia using Fama-MacBeth Regressions 338\n27.3 Estimating the Risk Premia using GMM 341\n27.4 Outputting L ATEX 344\n28 Quick Reference 347\n28.1 Built-ins 347\n28.2 NumPy (numpy) 354\n28.3 SciPy 369\n28.4 Matplotlib 372\n28.5 Pandas 374\n28.6 IPython 378",
            "title": "Introduction to Python for Econometrics, Statistics and Data Analysis"
        },
        {
            "location": "/IPython Notebook/#building-machine-learning-systems-with-python",
            "text": "Chapter 1: Getting Started with Python Machine Learning 7\nMachine learning and Python \u2013 the dream team 8\nWhat the book will teach you (and what it will not) 9\nWhat to do when you are stuck 10\nGetting started 11\nIntroduction to NumPy, SciPy, and Matplotlib 12\nInstalling Python 12\nChewing data effciently with NumPy and intelligently with SciPy 12\nLearning NumPy 13\nIndexing 15\nHandling non-existing values 15\nComparing runtime behaviors 16\nLearning SciPy 17\nOur frst (tiny) machine learning application 19\nReading in the data 19\nPreprocessing and cleaning the data 20\nChoosing the right model and learning algorithm 22\nBefore building our frst model 22\nStarting with a simple straight line 22\nTowards some advanced stuff 24\nStepping back to go forward \u2013 another look at our data 26\nTraining and testing 28\nAnswering our initial question 30\nSummary 31\nChapter 2: Learning How to Classify with Real-world Examples 33\nThe Iris dataset 33\nThe frst step is visualization 34\nBuilding our frst classifcation model 35\nEvaluation \u2013 holding out data and cross-validation 38\nBuilding more complex classifers 40\nA more complex dataset and a more complex classifer 41\nLearning about the Seeds dataset 42\nFeatures and feature engineering 43\nNearest neighbor classifcation 44\nBinary and multiclass classifcation 47\nSummary 48\nChapter 3: Clustering \u2013 Finding Related Posts 49\nMeasuring the relatedness of posts 50\nHow not to do it 50\nHow to do it 51\nPreprocessing \u2013 similarity measured as similar number of common words 51\nConverting raw text into a bag-of-words 52\nCounting words 53\nNormalizing the word count vectors 56\nRemoving less important words 56\nStemming 57\nInstalling and using NLTK 58\nExtending the vectorizer with NLTK's stemmer 59\nStop words on steroids 60\nOur achievements and goals 61\nClustering 62\nKMeans 63\nGetting test data to evaluate our ideas on 65\nClustering posts 67\nSolving our initial challenge 68\nAnother look at noise 71\nTweaking the parameters 72\nSummary 73\nChapter 4: Topic Modeling 75\nLatent Dirichlet allocation (LDA) 75\nBuilding a topic model 76\nComparing similarity in topic space 80\nModeling the whole of Wikipedia 83\nChoosing the number of topics 86\nSummary 87\nChapter 5: Classifcation \u2013 Detecting Poor Answers 89\nSketching our roadmap 90\nLearning to classify classy answers 90\nTuning the instance 90\nTuning the classifer 90\nFetching the data 91\nSlimming the data down to chewable chunks 92\nPreselection and processing of attributes 93\nDefning what is a good answer 94\nCreating our frst classifer 95\nStarting with the k-nearest neighbor (kNN) algorithm 95\nEngineering the features 96\nTraining the classifer 97\nMeasuring the classifer's performance 97\nDesigning more features 98\nDeciding how to improve 101\nBias-variance and its trade-off 102\nFixing high bias 102\nFixing high variance 103\nHigh bias or low bias 103\nUsing logistic regression 105\nA bit of math with a small example 106\nApplying logistic regression to our postclassifcation problem 108\nLooking behind accuracy \u2013 precision and recall 110\nSlimming the classifer 114\nShip it! 115\nSummary 115\nChapter 6: Classifcation II \u2013 Sentiment Analysis 117\nSketching our roadmap 117\nFetching the Twitter data 118\nIntroducing the Naive Bayes classifer 118\nGetting to know the Bayes theorem 119\nBeing naive 120\nUsing Naive Bayes to classify 121\nAccounting for unseen words and other oddities 124\nAccounting for arithmetic under\ufb02ows 125\nCreating our frst classifer and tuning it 127\nSolving an easy problem frst 128\nUsing all the classes 130\nTuning the classifer's parameters 132\nCleaning tweets 136\nTaking the word types into account 138\nDetermining the word types 139\nSuccessfully cheating using SentiWordNet 141\nOur frst estimator 143\nPutting everything together 145\nSummary 146\nChapter 7: Regression \u2013 Recommendations 147\nPredicting house prices with regression 147\nMultidimensional regression 151\nCross-validation for regression 151\nPenalized regression 153\nL1 and L2 penalties 153\nUsing Lasso or Elastic nets in scikit-learn 154\nP greater than N scenarios 155\nAn example based on text 156\nSetting hyperparameters in a smart way 158\nRating prediction and recommendations 159\nSummary 163\nChapter 8: Regression \u2013 Recommendations Improved 165\nImproved recommendations 165\nUsing the binary matrix of recommendations 166\nLooking at the movie neighbors 168\nCombining multiple methods 169\nBasket analysis 172\nObtaining useful predictions 173\nAnalyzing supermarket shopping baskets 173\nAssociation rule mining 176\nMore advanced basket analysis 178\nSummary 179\nChapter 9: Classifcation III \u2013 Music Genre Classifcation 181\nSketching our roadmap 181\nFetching the music data 182\nConverting into a wave format 182\nLooking at music 182\nDecomposing music into sine wave components 184\nUsing FFT to build our frst classifer 186\nIncreasing experimentation agility 186\nTraining the classifer 187\nUsing the confusion matrix to measure accuracy in multiclass problems 188\nAn alternate way to measure classifer performance using receiver operator characteristic (ROC) 190\nImproving classifcation performance with Mel Frequency Cepstral Coeffcients 193\nSummary 197\nChapter 10: Computer Vision \u2013 Pattern Recognition 199\nIntroducing image processing 199\nLoading and displaying images 200\nBasic image processing 201\nThresholding 202\nGaussian blurring 205\nFiltering for different effects 207\nAdding salt and pepper noise 207\nPutting the center in focus 208\nPattern recognition 210\nComputing features from images 211\nWriting your own features 212\nClassifying a harder dataset 215\nLocal feature representations 216\nSummary 219\nChapter 11: Dimensionality Reduction 221\nSketching our roadmap 222\nSelecting features 222\nDetecting redundant features using flters 223\nCorrelation 223\nMutual information 225\nAsking the model about the features using wrappers 230\nOther feature selection methods 232\nFeature extraction 233\nAbout principal component analysis (PCA) 233\nSketching PCA 234\nApplying PCA 234\nLimitations of PCA and how LDA can help 236\nMultidimensional scaling (MDS) 237\nSummary 240\nChapter 12: Big(ger) Data 241\nLearning about big data 241\nUsing jug to break up your pipeline into tasks 242\nAbout tasks 242\nReusing partial results 245\nLooking under the hood 246\nUsing jug for data analysis 246\nUsing Amazon Web Services (AWS) 248\nCreating your frst machines 250\nInstalling Python packages on Amazon Linux 253\nRunning jug on our cloud machine 254\nAutomating the generation of clusters with starcluster 255\nSummary 259\nAppendix: Where to Learn More about Machine Learning 261\nOnline courses 261\nBooks 261\nQ&A sites 262\nBlogs 262\nData sources 263\nGetting competitive 263\nWhat was left out 264\nSummary 264\nIndex 265",
            "title": "Building Machine Learning Systems with Python"
        },
        {
            "location": "/IPython Notebook/#scipy-lecture-notes",
            "text": "I Getting started with Python for science 2\n1 Scientific computing with tools and workflow 4\n1.1 Why Python? 4\n1.2 Scientific Python building blocks 5\n1.3 The interactive workflow: IPython and a text editor 6\n2 The Python language 10\n2.1 First steps 10\n2.2 Basic types 11\n2.3 Control Flow 18\n2.4 Defining functions 22\n2.5 Reusing code: scripts and modules 27\n2.6 Input and Output 34\n2.7 Standard Library 35\n2.8 Exception handling in Python 39\n2.9 Object-oriented programming (OOP) 42\n3 NumPy: creating and manipulating numerical data 43\n3.1 The Numpy array object 43\n3.2 Numerical operations on arrays 55\n3.3 More elaborate arrays 68\n3.4 Advanced operations 72\n3.5 Some exercises 77\n4 Matplotlib: plotting 82\n4.1 Introduction 82\n4.2 Simple plot 83\n4.3 Figures, Subplots, Axes and Ticks 89\n4.4 Other Types of Plots: examples and exercises 90\n4.5 Beyond this tutorial 96\n4.6 Quick references 98\n5 Scipy : high-level scientific computing 101\n5.1 File input/output: scipy.io 102\n5.2 Special functions: scipy.special 103\n5.3 Linear algebra operations: scipy.linalg 103\n5.4 Fast Fourier transforms: scipy.fftpack 104\n5.5 Optimization and fit: scipy.optimize 109\n5.6 Statistics and random numbers: scipy.stats 113\n5.7 Interpolation: scipy.interpolate 115\n5.8 Numerical integration: scipy.integrate 116\n5.9 Signal processing: scipy.signal 118\n5.10 Image processing: scipy.ndimage 120\n5.11 Summary exercises on scientific computing 124\n6 Getting help and finding documentation 137\nII Advanced topics 140\n7 Advanced Python Constructs 142\n7.1 Iterators, generator expressions and generators 142\n7.2 Decorators 147\n7.3 Context managers 155\n8 Advanced Numpy 159\n8.1 Life of ndarray 160\n8.2 Universal functions 173\n8.3 Interoperability features 182\n8.4 Array siblings: chararray, maskedarray, matrix 185\n8.5 Summary 188\n8.6 Contributing to Numpy/Scipy 188\n9 Debugging code 192\n9.1 Avoiding bugs 192\n9.2 Debugging workflow 195\n9.3 Using the Python debugger 195\n9.4 Debugging segmentation faults using gdb 200\n10 Optimizing code 203\n10.1 Optimization workflow 203\n10.2 Profiling Python code 203\n10.3 Making code go faster 206\n10.4 Writing faster numerical code 207\n11 Sparse Matrices in SciPy 210\n11.1 Introduction 210\n11.2 Storage Schemes 212\n11.3 Linear System Solvers 224\n11.4 Other Interesting Packages 229\n12 Image manipulation and processing using Numpy and Scipy 230\n12.1 Opening and writing to image files 231\n12.2 Displaying images 232\n12.3 Basic manipulations 233\n12.4 Image filtering 235\n12.5 Feature extraction 240\n12.6 Measuring objects properties: ndimage.measurements 243\n13 Mathematical optimization: finding minima of functions 248\n13.1 Knowing your problem 249\n13.2 A review of the different optimizers 251\n13.3 Practical guide to optimization with scipy 258\n13.4 Special case: non-linear least-squares 260\n13.5 Optimization with constraints 261\n14 Interfacing with C 263\n14.1 Introduction 263\n14.2 Python-C-Api 264\n14.3 Ctypes 268\n14.4 SWIG 272\n14.5 Cython 276\n14.6 Summary 279\n14.7 Further Reading and References 280\n14.8 Exercises 280\nIII Packages and applications 282\n15 Statistics in Python 284\n15.1 Data representation and interaction 285\n15.2 Hypothesis testing: comparing two groups 289\n15.3 Linear models, multiple factors, and analysis of variance 292\n15.4 More visualization: seaborn for statistical exploration 297\n15.5 Testing for interactions 299\n16 Sympy : Symbolic Mathematics in Python 301\n16.1 First Steps with SymPy 302\n16.2 Algebraic manipulations 303\n16.3 Calculus 304\n16.4 Equation solving 305\n16.5 Linear Algebra 306\n17 Scikit-image: image processing 308\n17.1 Introduction and concepts 308\n17.2 Input/output, data types and colorspaces 310\n17.3 Image preprocessing / enhancement 312\n17.4 Image segmentation 315\n17.5 Measuring regions\u2019 properties 318\n17.6 Data visualization and interaction 318\n17.7 Feature extraction for computer vision 320\n18 Traits: building interactive dialogs 322\n18.1 Introduction 323\n18.2 Example 323\n18.3 What are Traits 324\n19 3D plotting with Mayavi 340\n19.1 Mlab: the scripting interface 340\n19.2 Interactive work 346\n19.3 Slicing and dicing data: sources, modules and filters 347\n19.4 Animating the data 349\n19.5 Making interactive dialogs 350\n19.6 Putting it together 351\n20 scikit-learn: machine learning in Python 353\n20.1 Loading an example dataset 354\n20.2 Classification 355\n20.3 Clustering: grouping observations together 357\n20.4 Dimension Reduction with Principal Component Analysis 359\n20.5 Putting it all together: face recognition 360\n20.6 Linear model: from regression to sparsity 361\n20.7 Model selection: choosing estimators and their parameters 362\nIndex 363",
            "title": "Scipy Lecture Notes"
        },
        {
            "location": "/Python Numpy Arrays/",
            "text": "CONTENT\n\n\nInvoke Numpy\n\n\nMake Numpy Arrays\n\n\nA Python Numpy Array\n\n\nMake an \u201cEmpty\u201d Numpy Array\n\n\nLoad Numpy Arrays from Text\n\n\nSave Numpy Arrays\n\n\nInspect Numpy Arrays\n\n\nNumpy Broadcasting Works\n\n\nArray Mathematics\n\n\nSubset, Slice, and Index Arrays\n\n\nAsk for Help\n\n\nManipulate Arrays\n\n\nTranspose Arrays\n\n\nReshaping versus Resizing Arrays\n\n\nHow to Append Arrays\n\n\nHow to Insert and Delete Array Elements\n\n\nHow to Join and Split Arrays\n\n\nSplit Arrays\n\n\n\n\n\n\nHow to Visualize Numpy Arrays\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nInvoke Numpy\n\u00b6\n\n\n\n\nCode \nimport numpy as np\n alone.\n\n\nCode \n%pylab\n to invoke Numpy and matplotlib or \n%pylab inline\n for plotting inside the notebook.\n\n\nFollowing \n%pylab\n, \nimport numpy as np\n forces to use the prefix \nnp.\n before any Numpy function.\n\n\n\n\n%pylab inline\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\nimport numpy as np\n\n\n\n\nnp.__version__\n\n\n\n\n'1.12.1'\n\n\n\n\n\nReference: https://docs.scipy.org/doc/numpy/reference/\n\n\n\n\nMake Numpy Arrays\n\u00b6\n\n\nIf \n%pylab\n was invoked.\n\n\narray([1,2,3,4])\n\n\n\n\narray([1, 2, 3, 4])\n\n\n\nIf \nimport numpy as np\n was invoked alone.\n\n\nnp.array([1,2,3,4])\n\n\n\n\narray([1, 2, 3, 4])\n\n\n\nLet\u2019s begin.\n\n\nmy_array = np.array([[1, 2, 3, 4], [5, 6, 7, 8]], dtype = np.int64)\nmy_2d_array = np.array([[1, 2, 3, 4], [5, 6, 7, 8]], dtype = np.int32)\nmy_3d_array = np.array([[[1, 2, 3, 4], [5, 6, 7, 8]], [[1, 2, 3, 4], [9, 10, 11, 12]]])\n\n\n\n\n# Print the array\nprint(my_array)\n\n\n\n\n[[1 2 3 4]\n [5 6 7 8]]\n\n\n\n# Print the 2d array\nprint(my_2d_array)\n\n\n\n\n[[1 2 3 4]\n [5 6 7 8]]\n\n\n\n# Print the 3d array\nprint(my_3d_array)\n\n\n\n\n[[[ 1  2  3  4]\n  [ 5  6  7  8]]\n\n [[ 1  2  3  4]\n  [ 9 10 11 12]]]\n\n\n\nA Python Numpy Array\n\u00b6\n\n\n# Print out memory address\nprint(my_array.data)\nprint(my_2d_array.data)\n\n\n\n\n<memory at 0x7f85dcedd8b8>\n<memory at 0x7f85dcedd8b8>\n\n\n\n# Print out the shape of `my_array`\nprint(my_array.shape)\nprint(my_2d_array.shape)\n\n\n\n\n(2, 4)\n(2, 4)\n\n\n\n# Print out the data type of `my_array`\n# kind of elements that are contained within the array\nprint(my_array.dtype)\nprint(my_2d_array.dtype)\n\n\n\n\nint64\nint32\n\n\n\n# Print out the stride of `my_array`\n# the number of bytes that should be skipped in memory to go to the next element.\nprint(my_array.strides)\nprint(my_2d_array.strides)\n\n\n\n\n(32, 8)\n(16, 4)\n\n\n\nMake an \u201cEmpty\u201d Numpy Array\n\u00b6\n\n\nMake use of initial placeholders, which can be filled up afterwards.\n\n\n# Create an array of ones\nnp.ones((3,4))\n\n\n\n\narray([[ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.]])\n\n\n\nnp.ones(4)\n\n\n\n\narray([ 1.,  1.,  1.,  1.])\n\n\n\nnp.ones((1,4))\n\n\n\n\narray([[ 1.,  1.,  1.,  1.]])\n\n\n\n# Create an array of zeros\nnp.zeros((2,3,4), dtype=np.int16)\n\n\n\n\narray([[[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]],\n\n       [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]]], dtype=int16)\n\n\n\nnp.zeros(4)\n\n\n\n\narray([ 0.,  0.,  0.,  0.])\n\n\n\nnp.zeros((1,4))\n\n\n\n\narray([[ 0.,  0.,  0.,  0.]])\n\n\n\n# Create an array with random values\nnp.random.random((2,2))\n\n\n\n\narray([[ 0.28103745,  0.58180454],\n       [ 0.31233242,  0.28414052]])\n\n\n\n# Create an empty array\nnp.empty((3,2))\n\n\n\n\narray([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])\n\n\n\n# Create a full array\nnp.full((2,2), 7)\n\n\n\n\narray([[7, 7],\n       [7, 7]])\n\n\n\n# Create an array of evenly-spaced values\n# from 10 to 25 (excluded) by 5\nnp.arange(10, 25, 5)\n\n\n\n\narray([10, 15, 20])\n\n\n\n# Create an array of evenly-spaced values\n# from 0 to 2 in 9 intervals\nnp.linspace(0, 2, 9)\n\n\n\n\narray([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ])\n\n\n\n# Create an identity array or matrix\nnp.eye(2,2)\n\n\n\n\narray([[ 1.,  0.],\n       [ 0.,  1.]])\n\n\n\nnp.eye(3,3)\n\n\n\n\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n\n\n\nnp.eye(3)\n\n\n\n\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n\n\n\n# Idem\nnp.identity(3)\n\n\n\n\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n\n\n\nLoad Numpy Arrays from Text\n\u00b6\n\n\n# Data in the text file\n\n# Value1  Value2  Value3\n# 0.2536  0.1008  0.3857\n# 0.4839  0.4536  0.3561\n# 0.1292  0.6875  0.5929\n# 0.1781  0.3049  0.8928\n# 0.6253  0.3486  0.8791\n\n\n\n\n# Set the current directory\nimport os\n\nos.chdir('/home/ugo/Documents/Notebooks/DataCamp, Numpy tutorial')\nprint(os.getcwd())\n\n\n\n\n/home/ugo/Documents/Notebooks/DataCamp, Numpy tutorial\n\n\n\n# Import data\nx, y, z = np.loadtxt('textfile.txt',\n                    skiprows = 1,\n                    unpack = True)\n# unpack=True\n# the values in column Value1 will be put in x, and so on\n# delimiter\n# comma-delimited data \n# specify the data type\n# dtype\n\nprint(x)\n\n\n\n\n[ 0.2536  0.4839  0.1292  0.1781  0.6253]\n\n\n\nprint(y)\n\n\n\n\n[ 0.1008  0.4536  0.6875  0.3049  0.3486]\n\n\n\nprint(z)\n\n\n\n\n[ 0.3857  0.3561  0.5929  0.8928  0.8791]\n\n\n\nprint(x)\nprint(y)\nprint(z)\n\n\n\n\n[ 0.2536  0.4839  0.1292  0.1781  0.6253]\n[ 0.1008  0.4536  0.6875  0.3049  0.3486]\n[ 0.3857  0.3561  0.5929  0.8928  0.8791]\n\n\n\n# Data in the text file\n\n# Value1  Value2  Value3\n# 0.4839  0.4536  0.3561\n# 0.1292  0.6875  MISSING\n# 0.1781  0.3049  0.8928\n# MISSING 0.5801  0.2038\n# 0.5993  0.4357  0.7410\n\n\n\n\n# Import data\nmy_array2 = np.genfromtxt('textfile2.txt',\n                      skip_header = 1,\n                      filling_values = -999)\n# filling_values\n# converts character strings in numeric columns to nan, \n# convert these values to other ones\n# missing_values\n# argument that allows to specify what the missing values\n\nprint(my_array2)\n\n\n\n\n[[  4.83900000e-01   4.53600000e-01   3.56100000e-01]\n [  1.29200000e-01   6.87500000e-01  -9.99000000e+02]\n [  1.78100000e-01   3.04900000e-01   8.92800000e-01]\n [ -9.99000000e+02   5.80100000e-01   2.03800000e-01]\n [  5.99300000e-01   4.35700000e-01   7.41000000e-01]]\n\n\n\nSave Numpy Arrays\n\u00b6\n\n\nx = np.arange(0.0,5.0,1.0) # array of evenly-spaced values from 0 to 5 by 1\n\nnp.savetxt('test1.txt', x, delimiter=',') # to a text file\nnp.save('test2.npy', x) # to a binary file\nnp.savez('test3.npz', x) # to a uncompressed archive\nnp.savez_compressed('test4.npz', x) # compressed archive\n\n\n\n\nInspect Numpy Arrays\n\u00b6\n\n\nAlmost all the attributes that an array can have.\n\n\n# Print the number of `my_array`'s dimensions\nprint(my_array.ndim)\n\n\n\n\n2\n\n\n\n# Print the number of `my_array`'s elements\nprint(my_array.size)\n\n\n\n\n8\n\n\n\n# Print information about `my_array`'s memory layout\nprint(my_array.flags)\n\n\n\n\n  C_CONTIGUOUS : True\n  F_CONTIGUOUS : False\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  UPDATEIFCOPY : False\n\n\n\n# Print the length of one array element in bytes\nprint(my_array.itemsize)\n\n\n\n\n8\n\n\n\n# Print the total consumed bytes by `my_array`'s elements\nprint(my_array.nbytes)\n\n\n\n\n64\n\n\n\n# Print the length of `my_array`\nprint(len(my_array))\n\n\n\n\n2\n\n\n\n# Change the data type of `my_array`\nmy_array.astype(float)\n\n\n\n\narray([[ 1.,  2.,  3.,  4.],\n       [ 5.,  6.,  7.,  8.]])\n\n\n\nNumpy Broadcasting Works\n\u00b6\n\n\nWork with arrays of different shapes when performing arithmetic operations.\n\n\n# Initialize `x`\nx = np.ones((3,4))\n\n# Check shape of `x`\nprint(x.shape)\n\n\n\n\n(3, 4)\n\n\n\n# Initialize `y`\ny = np.random.random((3,4))\n\n# Check shape of `y`\nprint(y.shape)\n\n\n\n\n(3, 4)\n\n\n\nprint(x)\nprint(y)\n\n\n\n\n[[ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]]\n[[ 0.44011854  0.55827517  0.8107237   0.96725064]\n [ 0.55923674  0.7754099   0.69282818  0.27928312]\n [ 0.03662555  0.70499711  0.59944023  0.67982408]]\n\n\n\n# Add `x` and `y`\nx + y\n\n\n\n\narray([[ 1.44011854,  1.55827517,  1.8107237 ,  1.96725064],\n       [ 1.55923674,  1.7754099 ,  1.69282818,  1.27928312],\n       [ 1.03662555,  1.70499711,  1.59944023,  1.67982408]])\n\n\n\n# Initialize `y`\ny2 = np.arange(4)\n\n# Check shape of `y`\nprint(y2.shape)\n\n\n\n\n(4,)\n\n\n\nprint(x)\nprint(y2)\n\n\n\n\n[[ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]]\n[0 1 2 3]\n\n\n\n# Subtract `x` and `y`\nx - y2\n\n\n\n\narray([[ 1.,  0., -1., -2.],\n       [ 1.,  0., -1., -2.],\n       [ 1.,  0., -1., -2.]])\n\n\n\n# Initialize `x` and `y`\nx2 = np.ones((3,4))\ny3 = np.random.random((5,1,4))\n\n\n\n\nprint(x2.shape)\nprint(y3.shape)\n\n\n\n\n(3, 4)\n(5, 1, 4)\n\n\n\nprint(x2)\nprint(y3)\n\n\n\n\n[[ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]]\n[[[ 0.51096464  0.17753054  0.64596468  0.77465719]]\n\n [[ 0.51629966  0.52917705  0.76817841  0.20105093]]\n\n [[ 0.04512461  0.64426203  0.3210533   0.88679126]]\n\n [[ 0.93015065  0.34094049  0.01714773  0.37384124]]\n\n [[ 0.02498021  0.73107663  0.10914001  0.89487447]]]\n\n\n\n# Add `x` and `y`\nx2 + y3\n\n\n\n\narray([[[ 1.51096464,  1.17753054,  1.64596468,  1.77465719],\n        [ 1.51096464,  1.17753054,  1.64596468,  1.77465719],\n        [ 1.51096464,  1.17753054,  1.64596468,  1.77465719]],\n\n       [[ 1.51629966,  1.52917705,  1.76817841,  1.20105093],\n        [ 1.51629966,  1.52917705,  1.76817841,  1.20105093],\n        [ 1.51629966,  1.52917705,  1.76817841,  1.20105093]],\n\n       [[ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126],\n        [ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126],\n        [ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126]],\n\n       [[ 1.93015065,  1.34094049,  1.01714773,  1.37384124],\n        [ 1.93015065,  1.34094049,  1.01714773,  1.37384124],\n        [ 1.93015065,  1.34094049,  1.01714773,  1.37384124]],\n\n       [[ 1.02498021,  1.73107663,  1.10914001,  1.89487447],\n        [ 1.02498021,  1.73107663,  1.10914001,  1.89487447],\n        [ 1.02498021,  1.73107663,  1.10914001,  1.89487447]]])\n\n\n\nBut what if the dimensions are not compatible? What if they are not equal or if one of them is not equal to 1? Fix this by manipulating the array.\n\n\nArray Mathematics\n\u00b6\n\n\n\n\nnp.add(), np.subtract(), np.multiply(), np.divide() and np.remainder()\n.\n\n\n\n\nx = np.array([[1, 2, 3], [3, 4, 5]])\ny = np.array([6, 7, 8])\n\nprint(x)\nprint(y)\n\n\n\n\n[[1 2 3]\n [3 4 5]]\n[6 7 8]\n\n\n\n# Add `x` and `y`\nnp.add(x,y)\n\n\n\n\narray([[ 7,  9, 11],\n       [ 9, 11, 13]])\n\n\n\n# Subtract `x` and `y`\nnp.subtract(x,y)\n\n\n\n\narray([[-5, -5, -5],\n       [-3, -3, -3]])\n\n\n\n# Multiply `x` and `y`\nnp.multiply(x,y)\n\n\n\n\narray([[ 6, 14, 24],\n       [18, 28, 40]])\n\n\n\n# Divide `x` and `y`; x/y\nnp.divide(x,y)\n\n\n\n\narray([[ 0.16666667,  0.28571429,  0.375     ],\n       [ 0.5       ,  0.57142857,  0.625     ]])\n\n\n\n# Calculate the remainder of `x` and `y`\nnp.remainder(x,y)\n\n\n\n\narray([[1, 2, 3],\n       [3, 4, 5]])\n\n\n\n\n\nnp.exp(), np.sqrt(), np.log()\n.\n\n\nnp.dot()\n.\n\n\na.sum(), a.min(), a.max(axis=0), a.cumsum(axis=1), a.mean(), a.median(), a.corrcoef(), a.std(b)\n.\n\n\n\n\nx = np.array([[1, 2, 3], [3, 4, 5]])\nprint(x)\n\n\n\n\n[[1 2 3]\n [3 4 5]]\n\n\n\nx.sum()\n\n\n\n\n18\n\n\n\nx.min()\n\n\n\n\n1\n\n\n\ny = np.array([6, 7, 8])\nprint(y)\n\n\n\n\n[6 7 8]\n\n\n\ny.max(axis=0)\n\n\n\n\n8\n\n\n\nx.max(axis=1)\n\n\n\n\narray([3, 5])\n\n\n\ny.cumsum(axis=0)\n\n\n\n\narray([ 6, 13, 21])\n\n\n\nx.mean()\n\n\n\n\n3.0\n\n\n\nnp.std(x)\n\n\n\n\n1.2909944487358056\n\n\n\n\n\n==, <, >\n.\n\n\nnp.array_equal()\n\n\nnp.logical_or(), np.logical_not(), np.logical_and()\n.\n\n\n\n\na = np.array([True, True, False, False])\nb = np.array([False, False, True, True])\n\n\n\n\n# `a` AND `b` \nnp.logical_and(a, b)\n\n\n\n\narray([False, False, False, False], dtype=bool)\n\n\n\n# `a` OR `b` \nnp.logical_or(a, b)\n\n\n\n\narray([ True,  True,  True,  True], dtype=bool)\n\n\n\n# `a` NOT `b` \nnp.logical_not(a,b)\n\n\n\n\narray([False, False,  True,  True], dtype=bool)\n\n\n\nSubset, Slice, and Index Arrays\n\u00b6\n\n\n\n\na[start:end]\n, items start through the end (but the end is not included!).\n\n\na[start:]\n, items start through the rest of the array.\n\n\na[:end]\n, items from the beginning through the end (but the end is not included!).\n\n\n\n\nmy_array = np.array([1,2,3,4])\nprint(my_array)\n\n\n\n\n[1 2 3 4]\n\n\n\n# Select the element at the 1st index\nprint(my_array[1])\n\n\n\n\n2\n\n\n\nprint(my_2d_array)\n\n\n\n\n[[1 2 3 4]\n [5 6 7 8]]\n\n\n\n# Select the element at row 1 column 2\nprint(my_2d_array[1][2])\n\n\n\n\n7\n\n\n\n# Select the element at row 1 column 2\nprint(my_2d_array[1,2])\n\n\n\n\n7\n\n\n\nprint(my_3d_array)\n\n\n\n\n[[[ 1  2  3  4]\n  [ 5  6  7  8]]\n\n [[ 1  2  3  4]\n  [ 9 10 11 12]]]\n\n\n\n# Select the element at row 1, column 2 and \nprint(my_3d_array[1,1,2])\n\n\n\n\n11\n\n\n\n# Select items at index 0 and 1\nprint(my_array[0:2])\n\n\n\n\n[1 2]\n\n\n\n# Select items at row 0 and 1, column 1\nprint(my_2d_array[0:2,1])\n\n\n\n\n[2 6]\n\n\n\n# Select items at row 1\n# This is the same as saying `my_3d_array[1,:,:]\nprint(my_3d_array[1,...])\n\n\n\n\n[[ 1  2  3  4]\n [ 9 10 11 12]]\n\n\n\n# Try out a simple example\nprint(my_array[my_array < 3])\n\n\n\n\n[1 2]\n\n\n\n# Specify a condition\nbigger_than_3 = (my_3d_array >= 3)\n\n\n\n\n# Use the condition to index our 3d array\nprint(my_3d_array[bigger_than_3])\n\n\n\n\n[ 3  4  5  6  7  8  3  4  9 10 11 12]\n\n\n\nbigger_than_3 = (my_3d_array > 3) | (my_3d_array == 3)\n\n\n\n\nbigger_than_3\nprint(bigger_than_3)\n\n\n\n\n[[[False False  True  True]\n  [ True  True  True  True]]\n\n [[False False  True  True]\n  [ True  True  True  True]]]\n\n\n\n# Select elements at (1,0), (0,1), (1,2) and (0,0)\n# [[r], [c]]\nprint(my_2d_array[[1, 0, 1, 0],[0, 1, 2, 0]])\n\n\n\n\n[5 2 7 1]\n\n\n\n# Select a subset of the rows and columns\n# [[r], [c]]\nprint(my_2d_array[[1, 0, 1, 0]][:,[0,1,2,0]])\n\n\n\n\n[[5 6 7 5]\n [1 2 3 1]\n [5 6 7 5]\n [1 2 3 1]]\n\n\n\nAsk for Help\n\u00b6\n\n\n# Look up info on `mean` with `np.lookfor()` \nprint(np.lookfor(\"median\"))\n\n\n\n\nSearch results for 'median'\n---------------------------\nnumpy.median\n    Compute the median along the specified axis.\nnumpy.nanmedian\n    Compute the median along the specified axis, while ignoring NaNs.\nnumpy.ma.median\n    Compute the median along the specified axis.\nnumpy.pad\n    Pads an array.\nnumpy.percentile\n    Compute the qth percentile of the data along the specified axis.\nnumpy.nanpercentile\n    Compute the qth percentile of the data along the specified axis,\nNone\n\n\n\n# Get info on data types with `np.info()`\nnp.info(np.ndarray.dtype)\n\n\n\n\nData-type of the array's elements.\n\nParameters\n----------\nNone\n\nReturns\n-------\nd : numpy dtype object\n\nSee Also\n--------\nnumpy.dtype\n\nExamples\n--------\n>>> x\narray([[0, 1],\n       [2, 3]])\n>>> x.dtype\ndtype('int32')\n>>> type(x.dtype)\n<type 'numpy.dtype'>\n\n\n\nManipulate Arrays\n\u00b6\n\n\nTranspose Arrays\n\u00b6\n\n\nThere is no effect when transposing a 1-D array!\n\n\n# Print `my_2d_array`\nprint(my_2d_array)\n\n\n\n\n[[1 2 3 4]\n [5 6 7 8]]\n\n\n\n# Transpose `my_2d_array`\nprint(np.transpose(my_2d_array))\n\n\n\n\n[[1 5]\n [2 6]\n [3 7]\n [4 8]]\n\n\n\n# Or use `T` to transpose `my_2d_array` (more flexible, more arguments)\nprint(my_2d_array.T)\n\n\n\n\n[[1 5]\n [2 6]\n [3 7]\n [4 8]]\n\n\n\nReshaping versus Resizing Arrays\n\u00b6\n\n\nx = np.ones((3,4))\nprint(x)\n\n\n\n\n[[ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]]\n\n\n\n# Print the shape of `x`\nprint(x.shape)\n\n\n\n\n(3, 4)\n\n\n\n# Resize `x` to ((6,4))\nnp.resize(x, (6,4))\n\n\n\n\narray([[ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.]])\n\n\n\n# Try out this as well\nx.resize((6,4))\n\n# Print out `x`\nprint(x)\n\n\n\n\n[[ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 0.  0.  0.  0.]\n [ 0.  0.  0.  0.]\n [ 0.  0.  0.  0.]]\n\n\n\nx = np.ones((1,12))\nprint(x)\n\n\n\n\n[[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]\n\n\n\n# Print the size of `x` to see what's possible\nprint(x.size)\n\n\n\n\n12\n\n\n\n# Reshape `x` to (2,6)\nprint(x.reshape((2,6)))\n\n\n\n\n[[ 1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.]]\n\n\n\n# Flatten `x`\n# n-D arrays to a 1-D array\nz = x.ravel()\n\n# Print `z`\nprint(z)\n\n\n\n\n[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n\n\n\nHow to Append Arrays\n\u00b6\n\n\nmy_array = np.array([1, 2, 3, 4])\nprint(my_array)\n\n\n\n\n[1 2 3 4]\n\n\n\n# Append a 1D array to `my_array`\nnew_array = np.append(my_array, [7, 8, 9, 10])\n\n# Print `new_array`\nprint(new_array)\n\n\n\n\n[ 1  2  3  4  7  8  9 10]\n\n\n\nprint(my_2d_array)\n\n\n\n\n[[1 2 3 4]\n [5 6 7 8]]\n\n\n\n# Append an extra column to `my_2d_array`\n# axis 1 indicates the columns, \n# while axis 0 indicates the rows in 2-D arrays\nnew_2d_array = np.append(my_2d_array, [[7], [8]], axis=1)\n\n# Print `new_2d_array`\nprint(new_2d_array)\n\n\n\n\n[[1 2 3 4 7]\n [5 6 7 8 8]]\n\n\n\nHow to Insert and Delete Array Elements\n\u00b6\n\n\nprint(my_array)\n\n\n\n\n[1 2 3 4]\n\n\n\n# Insert `5` at index 1\nnp.insert(my_array, 1, 5)\n\n\n\n\narray([1, 5, 2, 3, 4])\n\n\n\nprint(my_array)\n\n\n\n\n[1 2 3 4]\n\n\n\n# Delete the value at index 1\nnp.delete(my_array,[1])\n\n\n\n\narray([1, 3, 4])\n\n\n\nHow to Join and Split Arrays\n\u00b6\n\n\n\n\nThe number of dimensions needs to be the same if want to concatenate two arrays with \nnp.concatenate()\n.\n\n\nWith \nnp.vstack()\n, make sure that the number of columns in both arrays is the same.\n\n\nThe same holds also for when using \nnp.r[]\n.\n\n\nFor \nnp.hstack()\n, make sure that the number of dimensions is the same and that the number of rows in both arrays is the same.\n\n\nPrefer \nnp.concatenate()\n or \nnp.stack()\n.\n\n\nWith \nnp.column_stack()\n, make sure that the arrays have the same first dimension.\n\n\nnp.c_[]\n is another way to concatenate. Here also, the first dimension of both arrays needs to match.\n\n\n\n\nx = np.array([1,1,1,1])\nx = np.ones((4))\nprint(x)\n\nprint(my_array)\n\n\n\n\n[ 1.  1.  1.  1.]\n[1 2 3 4]\n\n\n\n# Concatentate `my_array` and `x`\nprint(np.concatenate((my_array,x)))\n\n\n\n\n[ 1.  2.  3.  4.  1.  1.  1.  1.]\n\n\n\nprint(my_2d_array)\n\n\n\n\n[[1 2 3 4]\n [5 6 7 8]]\n\n\n\n# Stack arrays row-wise\nprint(np.vstack((my_array, my_2d_array)))\n\n\n\n\n[[1 2 3 4]\n [1 2 3 4]\n [5 6 7 8]]\n\n\n\nmy_resized_array = np.vstack((my_array, my_array))\nprint(my_resized_array)\n\n\n\n\n[[1 2 3 4]\n [1 2 3 4]]\n\n\n\n# Stack arrays row-wise\nprint(np.r_[my_resized_array, my_2d_array])\n\n\n\n\n[[1 2 3 4]\n [1 2 3 4]\n [1 2 3 4]\n [5 6 7 8]]\n\n\n\n# Stack arrays horizontally\nprint(np.hstack((my_resized_array, my_2d_array)))\n\n\n\n\n[[1 2 3 4 1 2 3 4]\n [1 2 3 4 5 6 7 8]]\n\n\n\n# Stack arrays column-wise\nprint(np.column_stack((my_resized_array, my_2d_array)))\n\n\n\n\n[[1 2 3 4 1 2 3 4]\n [1 2 3 4 5 6 7 8]]\n\n\n\n# Stack arrays column-wise\nprint(np.c_[my_resized_array, my_2d_array])\n\n\n\n\n[[1 2 3 4 1 2 3 4]\n [1 2 3 4 5 6 7 8]]\n\n\n\nSplit Arrays\n\u00b6\n\n\nprint(my_resized_array)\n\n\n\n\n[[1 2 3 4]\n [1 2 3 4]]\n\n\n\n# Split `my_stacked_array` horizontally at the 2nd index (left-right)\nprint(np.hsplit(my_resized_array, 2))\n\n\n\n\n[array([[1, 2],\n       [1, 2]]), array([[3, 4],\n       [3, 4]])]\n\n\n\n# Split `my_stacked_array` vertically at the 2nd index (top-bottom)\nprint(np.vsplit(my_resized_array, 2))\n\n\n\n\n[array([[1, 2, 3, 4]]), array([[1, 2, 3, 4]])]\n\n\n\nHow to Visualize Numpy Arrays\n\u00b6\n\n\n\n\nFollowing %pylab, \nimport matplotlib.pyplot as plt\n forces to use the prefix \nplt.\n before any matplotlib function.\n\n\n\n\n# Initialize an array\nmy_3d_array = np.array([[[1,2,3,4], [5,6,7,8]], [[1,2,3,4], [9,10,11,12]]], dtype = np.int64)\n\nprint(my_3d_array)\n\n\n\n\n[[[ 1  2  3  4]\n  [ 5  6  7  8]]\n\n [[ 1  2  3  4]\n  [ 9 10 11 12]]]\n\n\n\n# Pass the array to `np.histogram()`\n# compute the occurrences of the array that fall within each bin\n# the first array lists the frequencies for all the elements of the array,\n# while the second array lists the bins that would be used without specifying any bins.\nprint(np.histogram(my_3d_array))\n\n\n\n\n(array([4, 2, 2, 1, 1, 1, 1, 1, 1, 2]), array([  1. ,   2.1,   3.2,   4.3,   5.4,   6.5,   7.6,   8.7,   9.8,\n        10.9,  12. ]))\n\n\n\n# Specify the number of bins\nprint(np.histogram(my_3d_array, bins = range(0,13)))\n\n\n\n\n(array([0, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2]), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]))\n\n\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\n\n\n\n# Construct the histogram with a flattened 3d array and a range of bins\n# plt.hist() flattens data and the bins\nplt.hist(my_3d_array.ravel(), bins = range(0,13))\n\n# Add a title to the plot\nplt.title('Frequency of My 3D Array Elements')\nplt.grid(True)\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n# Create an array\npoints = np.arange(-5, 5, 0.01)\n\n# Make a meshgrid\n# need 2-D arrays of x and y coordinate values \n# create a rectangular grid out of an array of x values and an array of y values\nxs, ys = np.meshgrid(points, points)\nz = np.sqrt(xs ** 2 + ys ** 2)\n\n# Display the image on the axes\nplt.imshow(z, cmap=plt.cm.gray)\nplt.grid(True)\n\n# Draw a color bar\nplt.colorbar()\n\n# Show the plot\nplt.show()",
            "title": "Python Numpy Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#make-numpy-arrays",
            "text": "If  %pylab  was invoked.  array([1,2,3,4])  array([1, 2, 3, 4])  If  import numpy as np  was invoked alone.  np.array([1,2,3,4])  array([1, 2, 3, 4])  Let\u2019s begin.  my_array = np.array([[1, 2, 3, 4], [5, 6, 7, 8]], dtype = np.int64)\nmy_2d_array = np.array([[1, 2, 3, 4], [5, 6, 7, 8]], dtype = np.int32)\nmy_3d_array = np.array([[[1, 2, 3, 4], [5, 6, 7, 8]], [[1, 2, 3, 4], [9, 10, 11, 12]]])  # Print the array\nprint(my_array)  [[1 2 3 4]\n [5 6 7 8]]  # Print the 2d array\nprint(my_2d_array)  [[1 2 3 4]\n [5 6 7 8]]  # Print the 3d array\nprint(my_3d_array)  [[[ 1  2  3  4]\n  [ 5  6  7  8]]\n\n [[ 1  2  3  4]\n  [ 9 10 11 12]]]",
            "title": "Make Numpy Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#a-python-numpy-array",
            "text": "# Print out memory address\nprint(my_array.data)\nprint(my_2d_array.data)  <memory at 0x7f85dcedd8b8>\n<memory at 0x7f85dcedd8b8>  # Print out the shape of `my_array`\nprint(my_array.shape)\nprint(my_2d_array.shape)  (2, 4)\n(2, 4)  # Print out the data type of `my_array`\n# kind of elements that are contained within the array\nprint(my_array.dtype)\nprint(my_2d_array.dtype)  int64\nint32  # Print out the stride of `my_array`\n# the number of bytes that should be skipped in memory to go to the next element.\nprint(my_array.strides)\nprint(my_2d_array.strides)  (32, 8)\n(16, 4)",
            "title": "A Python Numpy Array"
        },
        {
            "location": "/Python Numpy Arrays/#make-an-empty-numpy-array",
            "text": "Make use of initial placeholders, which can be filled up afterwards.  # Create an array of ones\nnp.ones((3,4))  array([[ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.]])  np.ones(4)  array([ 1.,  1.,  1.,  1.])  np.ones((1,4))  array([[ 1.,  1.,  1.,  1.]])  # Create an array of zeros\nnp.zeros((2,3,4), dtype=np.int16)  array([[[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]],\n\n       [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]]], dtype=int16)  np.zeros(4)  array([ 0.,  0.,  0.,  0.])  np.zeros((1,4))  array([[ 0.,  0.,  0.,  0.]])  # Create an array with random values\nnp.random.random((2,2))  array([[ 0.28103745,  0.58180454],\n       [ 0.31233242,  0.28414052]])  # Create an empty array\nnp.empty((3,2))  array([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])  # Create a full array\nnp.full((2,2), 7)  array([[7, 7],\n       [7, 7]])  # Create an array of evenly-spaced values\n# from 10 to 25 (excluded) by 5\nnp.arange(10, 25, 5)  array([10, 15, 20])  # Create an array of evenly-spaced values\n# from 0 to 2 in 9 intervals\nnp.linspace(0, 2, 9)  array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ])  # Create an identity array or matrix\nnp.eye(2,2)  array([[ 1.,  0.],\n       [ 0.,  1.]])  np.eye(3,3)  array([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])  np.eye(3)  array([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])  # Idem\nnp.identity(3)  array([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])",
            "title": "Make an \"Empty\" Numpy Array"
        },
        {
            "location": "/Python Numpy Arrays/#load-numpy-arrays-from-text",
            "text": "# Data in the text file\n\n# Value1  Value2  Value3\n# 0.2536  0.1008  0.3857\n# 0.4839  0.4536  0.3561\n# 0.1292  0.6875  0.5929\n# 0.1781  0.3049  0.8928\n# 0.6253  0.3486  0.8791  # Set the current directory\nimport os\n\nos.chdir('/home/ugo/Documents/Notebooks/DataCamp, Numpy tutorial')\nprint(os.getcwd())  /home/ugo/Documents/Notebooks/DataCamp, Numpy tutorial  # Import data\nx, y, z = np.loadtxt('textfile.txt',\n                    skiprows = 1,\n                    unpack = True)\n# unpack=True\n# the values in column Value1 will be put in x, and so on\n# delimiter\n# comma-delimited data \n# specify the data type\n# dtype\n\nprint(x)  [ 0.2536  0.4839  0.1292  0.1781  0.6253]  print(y)  [ 0.1008  0.4536  0.6875  0.3049  0.3486]  print(z)  [ 0.3857  0.3561  0.5929  0.8928  0.8791]  print(x)\nprint(y)\nprint(z)  [ 0.2536  0.4839  0.1292  0.1781  0.6253]\n[ 0.1008  0.4536  0.6875  0.3049  0.3486]\n[ 0.3857  0.3561  0.5929  0.8928  0.8791]  # Data in the text file\n\n# Value1  Value2  Value3\n# 0.4839  0.4536  0.3561\n# 0.1292  0.6875  MISSING\n# 0.1781  0.3049  0.8928\n# MISSING 0.5801  0.2038\n# 0.5993  0.4357  0.7410  # Import data\nmy_array2 = np.genfromtxt('textfile2.txt',\n                      skip_header = 1,\n                      filling_values = -999)\n# filling_values\n# converts character strings in numeric columns to nan, \n# convert these values to other ones\n# missing_values\n# argument that allows to specify what the missing values\n\nprint(my_array2)  [[  4.83900000e-01   4.53600000e-01   3.56100000e-01]\n [  1.29200000e-01   6.87500000e-01  -9.99000000e+02]\n [  1.78100000e-01   3.04900000e-01   8.92800000e-01]\n [ -9.99000000e+02   5.80100000e-01   2.03800000e-01]\n [  5.99300000e-01   4.35700000e-01   7.41000000e-01]]",
            "title": "Load Numpy Arrays from Text"
        },
        {
            "location": "/Python Numpy Arrays/#save-numpy-arrays",
            "text": "x = np.arange(0.0,5.0,1.0) # array of evenly-spaced values from 0 to 5 by 1\n\nnp.savetxt('test1.txt', x, delimiter=',') # to a text file\nnp.save('test2.npy', x) # to a binary file\nnp.savez('test3.npz', x) # to a uncompressed archive\nnp.savez_compressed('test4.npz', x) # compressed archive",
            "title": "Save Numpy Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#inspect-numpy-arrays",
            "text": "Almost all the attributes that an array can have.  # Print the number of `my_array`'s dimensions\nprint(my_array.ndim)  2  # Print the number of `my_array`'s elements\nprint(my_array.size)  8  # Print information about `my_array`'s memory layout\nprint(my_array.flags)    C_CONTIGUOUS : True\n  F_CONTIGUOUS : False\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  UPDATEIFCOPY : False  # Print the length of one array element in bytes\nprint(my_array.itemsize)  8  # Print the total consumed bytes by `my_array`'s elements\nprint(my_array.nbytes)  64  # Print the length of `my_array`\nprint(len(my_array))  2  # Change the data type of `my_array`\nmy_array.astype(float)  array([[ 1.,  2.,  3.,  4.],\n       [ 5.,  6.,  7.,  8.]])",
            "title": "Inspect Numpy Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#numpy-broadcasting-works",
            "text": "Work with arrays of different shapes when performing arithmetic operations.  # Initialize `x`\nx = np.ones((3,4))\n\n# Check shape of `x`\nprint(x.shape)  (3, 4)  # Initialize `y`\ny = np.random.random((3,4))\n\n# Check shape of `y`\nprint(y.shape)  (3, 4)  print(x)\nprint(y)  [[ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]]\n[[ 0.44011854  0.55827517  0.8107237   0.96725064]\n [ 0.55923674  0.7754099   0.69282818  0.27928312]\n [ 0.03662555  0.70499711  0.59944023  0.67982408]]  # Add `x` and `y`\nx + y  array([[ 1.44011854,  1.55827517,  1.8107237 ,  1.96725064],\n       [ 1.55923674,  1.7754099 ,  1.69282818,  1.27928312],\n       [ 1.03662555,  1.70499711,  1.59944023,  1.67982408]])  # Initialize `y`\ny2 = np.arange(4)\n\n# Check shape of `y`\nprint(y2.shape)  (4,)  print(x)\nprint(y2)  [[ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]]\n[0 1 2 3]  # Subtract `x` and `y`\nx - y2  array([[ 1.,  0., -1., -2.],\n       [ 1.,  0., -1., -2.],\n       [ 1.,  0., -1., -2.]])  # Initialize `x` and `y`\nx2 = np.ones((3,4))\ny3 = np.random.random((5,1,4))  print(x2.shape)\nprint(y3.shape)  (3, 4)\n(5, 1, 4)  print(x2)\nprint(y3)  [[ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]]\n[[[ 0.51096464  0.17753054  0.64596468  0.77465719]]\n\n [[ 0.51629966  0.52917705  0.76817841  0.20105093]]\n\n [[ 0.04512461  0.64426203  0.3210533   0.88679126]]\n\n [[ 0.93015065  0.34094049  0.01714773  0.37384124]]\n\n [[ 0.02498021  0.73107663  0.10914001  0.89487447]]]  # Add `x` and `y`\nx2 + y3  array([[[ 1.51096464,  1.17753054,  1.64596468,  1.77465719],\n        [ 1.51096464,  1.17753054,  1.64596468,  1.77465719],\n        [ 1.51096464,  1.17753054,  1.64596468,  1.77465719]],\n\n       [[ 1.51629966,  1.52917705,  1.76817841,  1.20105093],\n        [ 1.51629966,  1.52917705,  1.76817841,  1.20105093],\n        [ 1.51629966,  1.52917705,  1.76817841,  1.20105093]],\n\n       [[ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126],\n        [ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126],\n        [ 1.04512461,  1.64426203,  1.3210533 ,  1.88679126]],\n\n       [[ 1.93015065,  1.34094049,  1.01714773,  1.37384124],\n        [ 1.93015065,  1.34094049,  1.01714773,  1.37384124],\n        [ 1.93015065,  1.34094049,  1.01714773,  1.37384124]],\n\n       [[ 1.02498021,  1.73107663,  1.10914001,  1.89487447],\n        [ 1.02498021,  1.73107663,  1.10914001,  1.89487447],\n        [ 1.02498021,  1.73107663,  1.10914001,  1.89487447]]])  But what if the dimensions are not compatible? What if they are not equal or if one of them is not equal to 1? Fix this by manipulating the array.",
            "title": "Numpy Broadcasting Works"
        },
        {
            "location": "/Python Numpy Arrays/#array-mathematics",
            "text": "np.add(), np.subtract(), np.multiply(), np.divide() and np.remainder() .   x = np.array([[1, 2, 3], [3, 4, 5]])\ny = np.array([6, 7, 8])\n\nprint(x)\nprint(y)  [[1 2 3]\n [3 4 5]]\n[6 7 8]  # Add `x` and `y`\nnp.add(x,y)  array([[ 7,  9, 11],\n       [ 9, 11, 13]])  # Subtract `x` and `y`\nnp.subtract(x,y)  array([[-5, -5, -5],\n       [-3, -3, -3]])  # Multiply `x` and `y`\nnp.multiply(x,y)  array([[ 6, 14, 24],\n       [18, 28, 40]])  # Divide `x` and `y`; x/y\nnp.divide(x,y)  array([[ 0.16666667,  0.28571429,  0.375     ],\n       [ 0.5       ,  0.57142857,  0.625     ]])  # Calculate the remainder of `x` and `y`\nnp.remainder(x,y)  array([[1, 2, 3],\n       [3, 4, 5]])   np.exp(), np.sqrt(), np.log() .  np.dot() .  a.sum(), a.min(), a.max(axis=0), a.cumsum(axis=1), a.mean(), a.median(), a.corrcoef(), a.std(b) .   x = np.array([[1, 2, 3], [3, 4, 5]])\nprint(x)  [[1 2 3]\n [3 4 5]]  x.sum()  18  x.min()  1  y = np.array([6, 7, 8])\nprint(y)  [6 7 8]  y.max(axis=0)  8  x.max(axis=1)  array([3, 5])  y.cumsum(axis=0)  array([ 6, 13, 21])  x.mean()  3.0  np.std(x)  1.2909944487358056   ==, <, > .  np.array_equal()  np.logical_or(), np.logical_not(), np.logical_and() .   a = np.array([True, True, False, False])\nb = np.array([False, False, True, True])  # `a` AND `b` \nnp.logical_and(a, b)  array([False, False, False, False], dtype=bool)  # `a` OR `b` \nnp.logical_or(a, b)  array([ True,  True,  True,  True], dtype=bool)  # `a` NOT `b` \nnp.logical_not(a,b)  array([False, False,  True,  True], dtype=bool)",
            "title": "Array Mathematics"
        },
        {
            "location": "/Python Numpy Arrays/#subset-slice-and-index-arrays",
            "text": "a[start:end] , items start through the end (but the end is not included!).  a[start:] , items start through the rest of the array.  a[:end] , items from the beginning through the end (but the end is not included!).   my_array = np.array([1,2,3,4])\nprint(my_array)  [1 2 3 4]  # Select the element at the 1st index\nprint(my_array[1])  2  print(my_2d_array)  [[1 2 3 4]\n [5 6 7 8]]  # Select the element at row 1 column 2\nprint(my_2d_array[1][2])  7  # Select the element at row 1 column 2\nprint(my_2d_array[1,2])  7  print(my_3d_array)  [[[ 1  2  3  4]\n  [ 5  6  7  8]]\n\n [[ 1  2  3  4]\n  [ 9 10 11 12]]]  # Select the element at row 1, column 2 and \nprint(my_3d_array[1,1,2])  11  # Select items at index 0 and 1\nprint(my_array[0:2])  [1 2]  # Select items at row 0 and 1, column 1\nprint(my_2d_array[0:2,1])  [2 6]  # Select items at row 1\n# This is the same as saying `my_3d_array[1,:,:]\nprint(my_3d_array[1,...])  [[ 1  2  3  4]\n [ 9 10 11 12]]  # Try out a simple example\nprint(my_array[my_array < 3])  [1 2]  # Specify a condition\nbigger_than_3 = (my_3d_array >= 3)  # Use the condition to index our 3d array\nprint(my_3d_array[bigger_than_3])  [ 3  4  5  6  7  8  3  4  9 10 11 12]  bigger_than_3 = (my_3d_array > 3) | (my_3d_array == 3)  bigger_than_3\nprint(bigger_than_3)  [[[False False  True  True]\n  [ True  True  True  True]]\n\n [[False False  True  True]\n  [ True  True  True  True]]]  # Select elements at (1,0), (0,1), (1,2) and (0,0)\n# [[r], [c]]\nprint(my_2d_array[[1, 0, 1, 0],[0, 1, 2, 0]])  [5 2 7 1]  # Select a subset of the rows and columns\n# [[r], [c]]\nprint(my_2d_array[[1, 0, 1, 0]][:,[0,1,2,0]])  [[5 6 7 5]\n [1 2 3 1]\n [5 6 7 5]\n [1 2 3 1]]",
            "title": "Subset, Slice, and Index Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#ask-for-help",
            "text": "# Look up info on `mean` with `np.lookfor()` \nprint(np.lookfor(\"median\"))  Search results for 'median'\n---------------------------\nnumpy.median\n    Compute the median along the specified axis.\nnumpy.nanmedian\n    Compute the median along the specified axis, while ignoring NaNs.\nnumpy.ma.median\n    Compute the median along the specified axis.\nnumpy.pad\n    Pads an array.\nnumpy.percentile\n    Compute the qth percentile of the data along the specified axis.\nnumpy.nanpercentile\n    Compute the qth percentile of the data along the specified axis,\nNone  # Get info on data types with `np.info()`\nnp.info(np.ndarray.dtype)  Data-type of the array's elements.\n\nParameters\n----------\nNone\n\nReturns\n-------\nd : numpy dtype object\n\nSee Also\n--------\nnumpy.dtype\n\nExamples\n--------\n>>> x\narray([[0, 1],\n       [2, 3]])\n>>> x.dtype\ndtype('int32')\n>>> type(x.dtype)\n<type 'numpy.dtype'>",
            "title": "Ask for Help"
        },
        {
            "location": "/Python Numpy Arrays/#manipulate-arrays",
            "text": "",
            "title": "Manipulate Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#transpose-arrays",
            "text": "There is no effect when transposing a 1-D array!  # Print `my_2d_array`\nprint(my_2d_array)  [[1 2 3 4]\n [5 6 7 8]]  # Transpose `my_2d_array`\nprint(np.transpose(my_2d_array))  [[1 5]\n [2 6]\n [3 7]\n [4 8]]  # Or use `T` to transpose `my_2d_array` (more flexible, more arguments)\nprint(my_2d_array.T)  [[1 5]\n [2 6]\n [3 7]\n [4 8]]",
            "title": "Transpose Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#reshaping-versus-resizing-arrays",
            "text": "x = np.ones((3,4))\nprint(x)  [[ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]]  # Print the shape of `x`\nprint(x.shape)  (3, 4)  # Resize `x` to ((6,4))\nnp.resize(x, (6,4))  array([[ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.]])  # Try out this as well\nx.resize((6,4))\n\n# Print out `x`\nprint(x)  [[ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 1.  1.  1.  1.]\n [ 0.  0.  0.  0.]\n [ 0.  0.  0.  0.]\n [ 0.  0.  0.  0.]]  x = np.ones((1,12))\nprint(x)  [[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]  # Print the size of `x` to see what's possible\nprint(x.size)  12  # Reshape `x` to (2,6)\nprint(x.reshape((2,6)))  [[ 1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.]]  # Flatten `x`\n# n-D arrays to a 1-D array\nz = x.ravel()\n\n# Print `z`\nprint(z)  [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]",
            "title": "Reshaping versus Resizing Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#how-to-append-arrays",
            "text": "my_array = np.array([1, 2, 3, 4])\nprint(my_array)  [1 2 3 4]  # Append a 1D array to `my_array`\nnew_array = np.append(my_array, [7, 8, 9, 10])\n\n# Print `new_array`\nprint(new_array)  [ 1  2  3  4  7  8  9 10]  print(my_2d_array)  [[1 2 3 4]\n [5 6 7 8]]  # Append an extra column to `my_2d_array`\n# axis 1 indicates the columns, \n# while axis 0 indicates the rows in 2-D arrays\nnew_2d_array = np.append(my_2d_array, [[7], [8]], axis=1)\n\n# Print `new_2d_array`\nprint(new_2d_array)  [[1 2 3 4 7]\n [5 6 7 8 8]]",
            "title": "How to Append Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#how-to-insert-and-delete-array-elements",
            "text": "print(my_array)  [1 2 3 4]  # Insert `5` at index 1\nnp.insert(my_array, 1, 5)  array([1, 5, 2, 3, 4])  print(my_array)  [1 2 3 4]  # Delete the value at index 1\nnp.delete(my_array,[1])  array([1, 3, 4])",
            "title": "How to Insert and Delete Array Elements"
        },
        {
            "location": "/Python Numpy Arrays/#how-to-join-and-split-arrays",
            "text": "The number of dimensions needs to be the same if want to concatenate two arrays with  np.concatenate() .  With  np.vstack() , make sure that the number of columns in both arrays is the same.  The same holds also for when using  np.r[] .  For  np.hstack() , make sure that the number of dimensions is the same and that the number of rows in both arrays is the same.  Prefer  np.concatenate()  or  np.stack() .  With  np.column_stack() , make sure that the arrays have the same first dimension.  np.c_[]  is another way to concatenate. Here also, the first dimension of both arrays needs to match.   x = np.array([1,1,1,1])\nx = np.ones((4))\nprint(x)\n\nprint(my_array)  [ 1.  1.  1.  1.]\n[1 2 3 4]  # Concatentate `my_array` and `x`\nprint(np.concatenate((my_array,x)))  [ 1.  2.  3.  4.  1.  1.  1.  1.]  print(my_2d_array)  [[1 2 3 4]\n [5 6 7 8]]  # Stack arrays row-wise\nprint(np.vstack((my_array, my_2d_array)))  [[1 2 3 4]\n [1 2 3 4]\n [5 6 7 8]]  my_resized_array = np.vstack((my_array, my_array))\nprint(my_resized_array)  [[1 2 3 4]\n [1 2 3 4]]  # Stack arrays row-wise\nprint(np.r_[my_resized_array, my_2d_array])  [[1 2 3 4]\n [1 2 3 4]\n [1 2 3 4]\n [5 6 7 8]]  # Stack arrays horizontally\nprint(np.hstack((my_resized_array, my_2d_array)))  [[1 2 3 4 1 2 3 4]\n [1 2 3 4 5 6 7 8]]  # Stack arrays column-wise\nprint(np.column_stack((my_resized_array, my_2d_array)))  [[1 2 3 4 1 2 3 4]\n [1 2 3 4 5 6 7 8]]  # Stack arrays column-wise\nprint(np.c_[my_resized_array, my_2d_array])  [[1 2 3 4 1 2 3 4]\n [1 2 3 4 5 6 7 8]]",
            "title": "How to Join and Split Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#split-arrays",
            "text": "print(my_resized_array)  [[1 2 3 4]\n [1 2 3 4]]  # Split `my_stacked_array` horizontally at the 2nd index (left-right)\nprint(np.hsplit(my_resized_array, 2))  [array([[1, 2],\n       [1, 2]]), array([[3, 4],\n       [3, 4]])]  # Split `my_stacked_array` vertically at the 2nd index (top-bottom)\nprint(np.vsplit(my_resized_array, 2))  [array([[1, 2, 3, 4]]), array([[1, 2, 3, 4]])]",
            "title": "Split Arrays"
        },
        {
            "location": "/Python Numpy Arrays/#how-to-visualize-numpy-arrays",
            "text": "Following %pylab,  import matplotlib.pyplot as plt  forces to use the prefix  plt.  before any matplotlib function.   # Initialize an array\nmy_3d_array = np.array([[[1,2,3,4], [5,6,7,8]], [[1,2,3,4], [9,10,11,12]]], dtype = np.int64)\n\nprint(my_3d_array)  [[[ 1  2  3  4]\n  [ 5  6  7  8]]\n\n [[ 1  2  3  4]\n  [ 9 10 11 12]]]  # Pass the array to `np.histogram()`\n# compute the occurrences of the array that fall within each bin\n# the first array lists the frequencies for all the elements of the array,\n# while the second array lists the bins that would be used without specifying any bins.\nprint(np.histogram(my_3d_array))  (array([4, 2, 2, 1, 1, 1, 1, 1, 1, 2]), array([  1. ,   2.1,   3.2,   4.3,   5.4,   6.5,   7.6,   8.7,   9.8,\n        10.9,  12. ]))  # Specify the number of bins\nprint(np.histogram(my_3d_array, bins = range(0,13)))  (array([0, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2]), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]))  %matplotlib inline\nimport matplotlib.pyplot as plt  # Construct the histogram with a flattened 3d array and a range of bins\n# plt.hist() flattens data and the bins\nplt.hist(my_3d_array.ravel(), bins = range(0,13))\n\n# Add a title to the plot\nplt.title('Frequency of My 3D Array Elements')\nplt.grid(True)\n\n# Show the plot\nplt.show()   # Create an array\npoints = np.arange(-5, 5, 0.01)\n\n# Make a meshgrid\n# need 2-D arrays of x and y coordinate values \n# create a rectangular grid out of an array of x values and an array of y values\nxs, ys = np.meshgrid(points, points)\nz = np.sqrt(xs ** 2 + ys ** 2)\n\n# Display the image on the axes\nplt.imshow(z, cmap=plt.cm.gray)\nplt.grid(True)\n\n# Draw a color bar\nplt.colorbar()\n\n# Show the plot\nplt.show()",
            "title": "How to Visualize Numpy Arrays"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/",
            "text": "CONTENT\n\n\nSciPy versus Numpy\n\n\nThe Essentials of Numpy ndarray Objects\n\n\nArray Creation\n\n\nIndexing and Slicing\n\n\nShape Selection and Manipulation\n\n\n\n\n\n\nLinear Algebra With SciPy\n\n\nVectors and Matrices: The Basics\n\n\nMatrices: Operations and Routines\n\n\n\n\n\n\nEigenvalues and Eigenvectors\n\n\nSingular Value Decomposition (SVD)\n\n\nCompress images with SVD\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nSciPy versus Numpy\n\u00b6\n\n\nEfficiently compute arrays and matrices: SciPy is Numpy.\n\n\nThe Essentials of Numpy \nndarray\n Objects\n\u00b6\n\n\n%pylab inline\nimport numpy as np\n\nmyArray = np.array([[1, 2, 3], [4, 5, 6]], dtype = np.int64)\nprint(myArray)\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n[[1 2 3]\n [4 5 6]]\n\n\n\n# Inspect the data of `myArray`\nprint(myArray.data)\n\n\n\n\n<memory at 0x7f7bbcb71a68>\n\n\n\n# Inspect the data type of `myArray`\nprint(myArray.dtype)\n\n\n\n\nint64\n\n\n\n# Inspect the shape of `myArray`\nprint(myArray.shape)\n\n\n\n\n(2, 3)\n\n\n\n# Inspect the size of `myArray`\nprint(myArray.size)\n\n\n\n\n6\n\n\n\n\n\nConvert with \nastype()\n.\n\n\nHandle complex numbers.\n\n\n\n\n# Return the real part of `myArray` elements\nnp.real(myArray)\n\n\n\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n\n# Return the imaginary part of `myArray` elements\nnp.imag(myArray)\n\n\n\n\narray([[0, 0, 0],\n       [0, 0, 0]])\n\n\n\n# Return a real array if the complex parts are close to 0\nnp.real_if_close(myArray,tol=1000)\n\n\n\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n\n# Cast `myArray` to float\nnp.cast['f'](myArray)\n\n\n\n\narray([[ 1.,  2.,  3.],\n       [ 4.,  5.,  6.]], dtype=float32)\n\n\n\n# Cast `myArray` to integer\nnp.cast['q'](myArray)\n\n\n\n\narray([[1, 2, 3],\n       [4, 5, 6]], dtype=int64)\n\n\n\n\n\n\u2018b\u2019 for int8.\n\n\n\u2018c\u2019 for |S21; character or string.\n\n\n\u2018e\u2019 for float16\n\n\n\u2018f\u2019 for float32.\n\n\n\u2018g\u2019 for float128\n\n\n\u2018h\u2019 for int16, integer.\n\n\n\u2018d\u2019 for digits.\n\n\n\u2018i\u2019 for int32, integer.\n\n\n\u2018l\u2019 for long.\n\n\n\u2018m\u2019 for timedelta64.\n\n\n\u2018q\u2019 for int64, integer.\n\n\n\n\nArray Creation\n\u00b6\n\n\n# Create a 2X2 identity matrix with `np.eye()`\nnp.eye(2)\n\n\n\n\narray([[ 1.,  0.],\n       [ 0.,  1.]])\n\n\n\nnp.eye(2, 4)\n\n\n\n\narray([[ 1.,  0.,  0.,  0.],\n       [ 0.,  1.,  0.,  0.]])\n\n\n\nnp.eye(4, 2)\n\n\n\n\narray([[ 1.,  0.],\n       [ 0.,  1.],\n       [ 0.,  0.],\n       [ 0.,  0.]])\n\n\n\n# Create a 3X3 identity matrix with `np.identity()`\nnp.identity(3)\n\n\n\n\narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n\n\n\n# Uniformly spaced values: spacing; from 2 to 8 (excluded) by 2\nnp.arange(3, 8, 2)\n\n\n\n\narray([3, 5, 7])\n\n\n\n# Uniformly spaced values: number of samples; from 2 to 3 in 5 intervals\nnp.linspace(2, 3, 5)\n\n\n\n\narray([ 2.  ,  2.25,  2.5 ,  2.75,  3.  ])\n\n\n\n# Uniformly spaced values: logarithmic spacing; from 2 to 3 in 4 intervals \nnp.logspace(2, 3, 4)\n\n\n\n\narray([  100.        ,   215.443469  ,   464.15888336,  1000.        ])\n\n\n\nIndexing and Slicing\n\u00b6\n\n\nprint(myArray)\n\n\n\n\n[[1 2 3]\n [4 5 6]]\n\n\n\n# Slice `myArray` at index 0 and 1\nprint(myArray[0,0:2])\n\n\n\n\n[1 2]\n\n\n\n# Slice `my_2dArray` at row 0 and 1, column 1\nprint(myArray[0:2,1])\n\n\n\n\n[2 5]\n\n\n\n# Slice `my_3dArray` at row 1\nprint(myArray[1,...])\n\n\n\n\n[4 5 6]\n\n\n\n# Boolean indexing: only values < 3\nprint(myArray[myArray<3])\n\n\n\n\n[1 2]\n\n\n\n# Fancy indexing; r-c coordinates\nprint(myArray[[1, 0, 1, 0],[0, 1, 2, 0]])\n\n\n\n\n[4 2 6 1]\n\n\n\nMeshgrid\n\n\n\n\nIndex tricks: \nnp.mgrid()\n, \nnp.ogrid()\n, \nnp.r\n and \nnp.c\n.\n\n\nInstead of \nnp.concatenate()\n.\n\n\nnp.meshgrid()\n.\n\n\n\n\n# Create a dense mesh grid; from to (excluded) by\n# takes two 1D arrays and produces two 2D matrices \n# corresponding to all pairs of (x, y) in the two arrays\n# the dimensions and number of the output arrays are equal\n# to the number of indexing dimensions\nnp.mgrid[1:11:2, -12:-3:3]\n\n\n\n\narray([[[  1,   1,   1],\n        [  3,   3,   3],\n        [  5,   5,   5],\n        [  7,   7,   7],\n        [  9,   9,   9]],\n\n       [[-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6]]])\n\n\n\n# Create an open meshgrid; from to (excluded) by\nnp.ogrid[1:11:2, -12:-3:3]\n\n\n\n\n[array([[1],\n        [3],\n        [5],\n        [7],\n        [9]]), array([[-12,  -9,  -6]])]\n\n\n\n# Stack arrays vertically\nnp.r_[3, [0]*5, -1:1:10j]\n\n\n\n\narray([ 3.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        , -1.        , -0.77777778, -0.55555556, -0.33333333,\n       -0.11111111,  0.11111111,  0.33333333,  0.55555556,  0.77777778,  1.        ])\n\n\n\narray = np.ones(2)\nmy2Array = np.array([[1,2,3,4],[5,6,7,8]])\nprint(array)\n\n\n\n\n[ 1.  1.]\n\n\n\nprint(my2Array)\n\n\n\n\n[[1 2 3 4]\n [5 6 7 8]]\n\n\n\n# Stack arrays horizontally (left-right)\nnp.c_[array]\n\n\n\n\narray([[ 1.],\n       [ 1.]])\n\n\n\nnp.c_[my2Array]\n\n\n\n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nnp.c_[array, my2Array]\n\n\n\n\narray([[ 1.,  1.,  2.,  3.,  4.],\n       [ 1.,  5.,  6.,  7.,  8.]])\n\n\n\narray2 = np.array([[1,2,3,4], [1,2,3,4]])\nprint(array2)\n\n\n\n\n[[1 2 3 4]\n [1 2 3 4]]\n\n\n\nnp.r_[array2]\n\n\n\n\narray([[1, 2, 3, 4],\n       [1, 2, 3, 4]])\n\n\n\nnp.r_[my2Array]\n\n\n\n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nnp.r_[array2, my2Array]\n\n\n\n\narray([[1, 2, 3, 4],\n       [1, 2, 3, 4],\n       [1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nOther indexing/slicing\n\n\n# Initialize a 2D array \nmy_2dArray = np.array([[1,2,3,4], [5,6,7,8]], dtype=np.int64)\nprint(my_2dArray)\n\n\n\n\n[[1 2 3 4]\n [5 6 7 8]]\n\n\n\n# Select values from `my_2dArray`\n# argument 1: select\n# argument 2: transform\nnp.select([my_2dArray < 4], [my_2dArray])\n\n\n\n\narray([[1, 2, 3, 0],\n       [0, 0, 0, 0]])\n\n\n\nnp.select([my_2dArray < 4], [my_2dArray * 2])\n\n\n\n\narray([[2, 4, 6, 0],\n       [0, 0, 0, 0]])\n\n\n\nShape Selection and Manipulation\n\u00b6\n\n\n\n\nStack.\n\n\nSplit.\n\n\nTranspose.\n\n\nChange shape.\n\n\n\n\nmyArray = np.array([[1, 2, 3, 4]])\nmy_2dArray = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\n\n\n\n\nprint(myArray)\n\n\n\n\n[[1 2 3 4]]\n\n\n\nprint(my_2dArray)\n\n\n\n\n[[1 2 3 4]\n [5 6 7 8]]\n\n\n\n# Stack arrays horizontally (column-wise)\nprint(np.hstack((np.eye(2), my_2dArray)))\n\n\n\n\n[[ 1.  0.  1.  2.  3.  4.]\n [ 0.  1.  5.  6.  7.  8.]]\n\n\n\n# Stack arrays vertically (row-wise)\nprint(np.vstack((myArray, my_2dArray)))\n\n\n\n\n[[1 2 3 4]\n [1 2 3 4]\n [5 6 7 8]]\n\n\n\n# Split the array horizontally at the 2nd index (left-right)\nprint(np.hsplit(my_2dArray, 2))\n\n\n\n\n[array([[1, 2],\n       [5, 6]]), array([[3, 4],\n       [7, 8]])]\n\n\n\n# Split the array vertically at the 2nd index (top-bottom)\nprint(np.vsplit(my_2dArray, 2))\n\n\n\n\n[array([[1, 2, 3, 4]]), array([[5, 6, 7, 8]])]\n\n\n\n# Permute `myArray` dimensions\nprint(np.transpose(myArray))\n\n\n\n\n[[1]\n [2]\n [3]\n [4]]\n\n\n\nmy_3dArray = np.array([[[1, 2, 3, 4], [5, 6, 7,  8]], [[1, 2, 3, 4], [9, 10, 11, 12]]])\nprint(my_3dArray)\n\n\n\n\n[[[ 1  2  3  4]\n  [ 5  6  7  8]]\n\n [[ 1  2  3  4]\n  [ 9 10 11 12]]]\n\n\n\n# Flatten `my_3dArray`\nprint(my_3dArray.flatten())\n\n\n\n\n[ 1  2  3  4  5  6  7  8  1  2  3  4  9 10 11 12]\n\n\n\nnp.reshsape()\n vs \nnp.resize()\n.\n\n\n# Reshape but don't change the data\nprint(my_2dArray.reshape(4,2))\n\n\n\n\n[[1 2]\n [3 4]\n [5 6]\n [7 8]]\n\n\n\n# Resize to (6,4)\nprint(np.resize(my_3dArray, (6,4)))\n\n\n\n\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 1  2  3  4]\n [ 9 10 11 12]\n [ 1  2  3  4]\n [ 5  6  7  8]]\n\n\n\nVectorized functions (to \u2018loop\u2019 over an array, all items)\n\n\n# Define a function `myfunc`\ndef myfunc(a,b):\n  if a > b:\n     return a - b\n  else:\n     return a + b\n\n# Vectorize `myfunc`\nvectorizedFunc = np.vectorize(myfunc) \n\n# Apply\nprint(myArray)\nvectorizedFunc(myArray, 2)\n\n\n\n\n[[1 2 3 4]]\n\n\n\n\n\narray([[3, 4, 1, 2]])\n\n\n\nnp.angle()\n provides the angle of the elements of complex array elements, but also basic trigonometric, exponential or logarithmic functions.\n\n\nLinear Algebra With SciPy\n\u00b6\n\n\nimport scipy\n\n# Check package version\nscipy.__version__\n\n\n\n\n'0.19.0'\n\n\n\nVectors and Matrices: The Basics\n\u00b6\n\n\n# Create a vector\nmyVector = np.array([1,2,3,4])\nprint(myVector)\n\n\n\n\n[1 2 3 4]\n\n\n\n\n\nA matrix is a subclass of arrays.\n\n\nA matrix is always 2D.\n\n\nBoth arrays and matrices have \n.T()\n.\n\n\nOnly matrices have \n.H()\n and \n.I()\n.\n\n\nMatrix multiplication works differently from an element-wise array.\n\n\nT\n**\n has different results for matrices and arrays.\n\n\nSparse matrices have mostly zero elements, while the ones that have mostly non-zero elements are called dense matrices.\n\n\nscipy.linalg\n.\n\n\nscipy.sparse\n.\n\n\n\n\n\n\n\n\n# Create a matrix\nmyMatrix = np.matrix(np.random.random((5,5)))\nprint(myMatrix)\n\n\n\n\n[[ 0.45409417  0.51518628  0.21891525  0.4827949   0.11485953]\n [ 0.26387125  0.27904581  0.27371679  0.81793744  0.03194194]\n [ 0.44758032  0.40043501  0.53270025  0.73481508  0.40994865]\n [ 0.26650523  0.47469863  0.77731378  0.33237448  0.0932401 ]\n [ 0.47477976  0.4054091   0.62060959  0.76708818  0.33732755]]\n\n\n\n# Create a 2X2 identity matrix\nnp.eye(3, k=1)        \n\n\n\n\narray([[ 0.,  1.,  0.],\n       [ 0.,  0.,  1.],\n       [ 0.,  0.,  0.]])\n\n\n\n# Create a 2x2 identity matrix\nnp.mat(np.identity(2))         \n\n\n\n\nmatrix([[ 1.,  0.],\n        [ 0.,  1.]])\n\n\n\nC = np.matrix([[0.47332239,0.26149519,0.,0.01665965,0.05914868], [0.24440216,0.,0.,0.,0.],  [0.,0.,0.4320679,0.10501837,0.], [0.32164578,0.,0.,0.10963973,0.],  [0.15023766,0.04764381,0.,0.,0.38244847],  [0.08499095,0.,0.0163261,0.,0.27636168], [0.,0.36569833,0.34968224,0.,0.40275066],  [0.,0.,0.,0.40504002,0.],  [0.41632136,0.35405707,0.33020532,0.16344026,0.], [0.04105013,0.26913226,0.,0.00280266,0.]])\n\n\n\n\nprint(C)\n\n\n\n\n[[ 0.47332239  0.26149519  0.          0.01665965  0.05914868]\n [ 0.24440216  0.          0.          0.          0.        ]\n [ 0.          0.          0.4320679   0.10501837  0.        ]\n [ 0.32164578  0.          0.          0.10963973  0.        ]\n [ 0.15023766  0.04764381  0.          0.          0.38244847]\n [ 0.08499095  0.          0.0163261   0.          0.27636168]\n [ 0.          0.36569833  0.34968224  0.          0.40275066]\n [ 0.          0.          0.          0.40504002  0.        ]\n [ 0.41632136  0.35405707  0.33020532  0.16344026  0.        ]\n [ 0.04105013  0.26913226  0.          0.00280266  0.        ]]\n\n\n\nfrom scipy import linalg, sparse\n\n\n\n\n# Compressed Sparse Row matrix\n# fast access to rows and columns\nsparse.csr_matrix(C)\n\n\n\n\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Compressed Sparse Row format>\n\n\n\n# Compressed Sparse Column matrix\n# fast access to  rows and columns\nsparse.csc_matrix(C)  \n\n\n\n\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Compressed Sparse Column format>\n\n\n\n# Dictionary Of Keys matrix\n# fill the matrix with numbers one by one\nsparse.dok_matrix(C)  \n\n\n\n\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Dictionary Of Keys format>\n\n\n\n# block Sparse Row matrices\n# constructing the matrix from blocks of smaller matrices\nsparse.bsr_matrix(C)\n\n\n\n\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements (blocksize = 1x1) in Block Sparse Row format>\n\n\n\n# COOrdinate format sparse matrices\n# fill the matrix with numbers one by one\nsparse.coo_matrix(C)\n\n\n\n\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in COOrdinate format>\n\n\n\n# DIAgonal storage sparse matrices\n# initialize the matrix with an array as the diagonal\nsparse.dia_matrix(C)\n\n\n\n\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 47 stored elements (13 diagonals) in DIAgonal format>\n\n\n\n# Row-based linked list sparse matrices\n# sliced-based matrices\nsparse.lil_matrix(C)\n\n\n\n\n<10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in LInked List format>\n\n\n\nvector1 = np.array([1, 2, 3])\nvector2 = np.array([2, 3, 4])\nprint(vector1)\n\n\n\n\n[1 2 3]\n\n\n\nprint(vector2)\n\n\n\n\n[2 3 4]\n\n\n\n# Addition of `vector1` and `vector2`\nvector3 = vector1 + vector2\n\n# Print `vector3`\nprint(vector3)\n\n\n\n\n[3 5 7]\n\n\n\n# Subtraction of `vector2` and `vector1`\nvector4 = vector2 - vector1\n\n# print `vector4`\nprint(vector4)\n\n\n\n\n[1 1 1]\n\n\n\n# Dot product of `vector1` and `vector2`\ndotProduct = np.dot(vector1, vector2)\n\n# Print `dotProduct`\nprint(dotProduct)\n\n\n\n\n20\n\n\n\n# Cross product of `vector1` and `vector2`\n# vector product in vector algebra; search the formula online\ncrossProduct = np.cross(vector1, vector2)\n\n# Print `crossProduct`\nprint(crossProduct)\n\n\n\n\n[-1  2 -1]\n\n\n\nMatrices: Operations and Routines\n\u00b6\n\n\nnp.add(vector1, vector2)\n\n\n\n\narray([3, 5, 7])\n\n\n\nnp.subtract(vector1, vector2)\n\n\n\n\narray([-1, -1, -1])\n\n\n\nnp.divide(vector1, vector2)\n\n\n\n\narray([ 0.5       ,  0.66666667,  0.75      ])\n\n\n\nnp.multiply(vector1, vector2)\n\n\n\n\narray([ 2,  6, 12])\n\n\n\n# Vector dot product\nvectorDotProduct = np.vdot(vector1, vector2)\nprint(vectorDotProduct)\n\n\n\n\n20\n\n\n\n# Inner product\ninnerProduct = np.inner(vector1, vector2)\nprint(vectorDotProduct)\n\n\n\n\n20\n\n\n\n# Outer product\nouterProduct = np.outer(vector1, vector2)\nprint(vectorDotProduct)\n\n\n\n\n20\n\n\n\nmatrix1 = np.matrix([[0.47332239, 0.26149519], [0.86380934, 0.01665965]])\nmatrix2 = np.matrix([[3, 4], [5, 6]])\n\nprint(matrix1)\n\n\n\n\n[[ 0.47332239  0.26149519]\n [ 0.86380934  0.01665965]]\n\n\n\nprint(matrix2)\n\n\n\n\n[[3 4]\n [5 6]]\n\n\n\n# Tensor dot product\ntensorDotProduct = np.tensordot(matrix1, matrix2)\nprint(vectorDotProduct)\n\n\n\n\n20\n\n\n\n# Kronecker product\nkronProduct = np.kron(matrix1, matrix2)\nprint(vectorDotProduct)\n\n\n\n\n20\n\n\n\nprint(matrix1)\n\n\n\n\n[[ 0.47332239  0.26149519]\n [ 0.86380934  0.01665965]]\n\n\n\n# exponent\nlinalg.expm(matrix1)\n#linalg.expm2(matrix1)\n#linalg.expm3(matrix1)\n\n\n\n\narray([[ 1.76478622,  0.34978586],\n       [ 1.15546404,  1.15393687]])\n\n\n\n# logarithm\nlinalg.logm(matrix1)\n\n\n\n\narray([[-0.54372715+0.89057597j,  0.24956103-0.77901846j],\n       [ 0.82438668-2.57336825j, -0.97954865+2.25101668j]])\n\n\n\n# squared root\nlinalg.sqrtm(matrix1)\n\n\n\n\narray([[ 0.62966832+0.15061317j,  0.21791187-0.1317467j ],\n       [ 0.71983850-0.43520505j,  0.24911742+0.38068933j]])\n\n\n\n# lambda\nlinalg.funm(matrix1, lambda x: x*x)\n\n\n\n\narray([[ 0.44991607,  0.12812795],\n       [ 0.42325106,  0.22615953]])\n\n\n\n# transposition\n# make a new matrix whose rows are the columns of the original\nmatrix1.T\n\n\n\n\nmatrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])\n\n\n\nnp.transpose(matrix1)\n\n\n\n\nmatrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])\n\n\n\n# conjugate transposition\n# interchanges the row and column index for each matrix element\nmatrix1.H\n\n\n\n\nmatrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])\n\n\n\n# inverse\n# matrix multiplied with the original matrix results in an identity matrix\nmatrix1.I\n\n\n\n\nmatrix([[-0.0764216 ,  1.19953792],\n        [ 3.96248993, -2.17123747]])\n\n\n\nlinalg.inv(matrix1)\n\n\n\n\narray([[-0.0764216 ,  1.19953792],\n       [ 3.96248993, -2.17123747]])\n\n\n\n# cast an array\nmatrix1.A\n\n\n\n\narray([[ 0.47332239,  0.26149519],\n       [ 0.86380934,  0.01665965]])\n\n\n\n# retrieve the trace or sum of the elements on the main matrix diagonal\nnp.trace(matrix1)\n\n\n\n\n0.48998204000000001\n\n\n\n# retrieve the matrix rank or the number\n# of Singular Value Decomposition singular values\n# of an array that are greater than a certain threshold\nnp.linalg.matrix_rank(matrix1)\n\n\n\n\n2\n\n\n\n# norm of a matrix\n# number defined in terms of the entries of the matrix\n# how large the elements are\nlinalg.norm(matrix1)\n\n\n\n\n1.0192438074758199\n\n\n\n# matrix determinant\nlinalg.det(matrix1)\n\n\n\n\n-0.21799660213251107\n\n\n\nSolving system of \nAx=b\n, where \nA\n is a square matrix and \nb\n a general matrix. There are two methods to find \nx\n.\n\n\nA = np.matrix([[0.35115177, 0.79693272], [0.81264708, 0.06853826]])\nb = np.matrix([[1.+5.j, 0.+2.j, 0.+3.j], [ 0.+4.j, 0.+5.j, 0.+6.j]])\nprint(A)\n\n\n\n\n[[ 0.35115177  0.79693272]\n [ 0.81264708  0.06853826]]\n\n\n\nprint(b)\n\n\n\n\n[[ 1.+5.j  0.+2.j  0.+3.j]\n [ 0.+4.j  0.+5.j  0.+6.j]]\n\n\n\n# Dense matrix solver\nlinalg.solve(A, b)\n\n\n\n\narray([[-0.10991486+4.56259221j,  0.00000000+6.17037842j,\n         0.00000000+7.33850519j],\n       [ 1.30324276+4.26364433j,  0.00000000-0.20922633j,\n         0.00000000+0.53087407j]])\n\n\n\nF = np.matrix([[0., 1., 0.], [0., 0., 1.], [0., 0., 0.]])\nE = np.matrix([[1],[2],[3]])\nprint(F)\n\n\n\n\n[[ 0.  1.  0.]\n [ 0.  0.  1.]\n [ 0.  0.  0.]]\n\n\n\nprint(E)\n\n\n\n\n[[1]\n [2]\n [3]]\n\n\n\n# Linear least-square solver\nnp.linalg.lstsq(F,E)\n\n\n\n\n(matrix([[ 0.],\n         [ 1.],\n         [ 2.]]),\n matrix([], shape=(1, 0), dtype=float64),\n 2,\n array([ 1.,  1.,  0.]))\n\n\n\nFor sparse matrices, \nlinalg.spsolve()\nmay solve the equation, otherwise, it might still be possible to obtain an approximate \nx\n with the help of the \nlinalg.lstsq()\n.\n\n\nEigenvalues and Eigenvectors\n\u00b6\n\n\nThe eigenvalues and eigenvectors are important concepts in many computer vision and machine learning techniques:\n\n\n\n\nPrincipal Component Analysis (PCA) for dimensionality reduction.\n\n\nEigenFaces for \nface recognition\n. Consult the latter case for an illustration.\n\n\n\n\nAlmost all vectors change direction, when they are multiplied by a matrix. However, certain resulting vectors maintain the same direction after the multiplication. These are the eigenvectors.\n\n\nMultiply an eigenvector by a matrix, and the resulting vector of that multiplication is equal to a multiplication of the original eigenvector with \n\\lambda\n, the eigenvalue:\n\n\n\n\nAx = \\lambda x\n\n\n\n\nEigenvalue gives valuable information: whether one of the eigenvectors is stretched, shrunk, reversed, or left unchanged when multiplied by a matrix.\n\n\nmyMatrix = np.matrix([[0.84790079, 0.08996585], [0.66653841, 0.94212726]])\nprint(myMatrix)\n\n\n\n\n[[ 0.84790079  0.08996585]\n [ 0.66653841  0.94212726]]\n\n\n\n# Solve eigenvalue problem\nla, v = linalg.eig(myMatrix) \n\n# Unpack eigenvalues\nl1, l2 = la\n\n# First eigenvector\nv[:,0]\n\n\n\n\narray([-0.40641758,  0.91368745])\n\n\n\n# Second eigenvector\nv[:,1]\n\n\n\n\narray([-0.29036942, -0.95691463])\n\n\n\n# Or unpack eigenvalues with `eigvals()`\nlinalg.eigvals(myMatrix)\n\n\n\n\narray([ 0.64564412+0.j,  1.14438393+0.j])\n\n\n\n# laternative\neigvals(myMatrix)\n\n\n\n\narray([ 0.64564412,  1.14438393])\n\n\n\nWith sparse matricesL \nla, v = sparse.linalg.eigs(myMatrix,1)\n; the number of eigenvalues and eigenvectors that has to be retrieved = 1.\n\n\nSingular Value Decomposition (SVD)\n\u00b6\n\n\nSVD is useful for many tasks:\n\n\n\n\ndata compression,\n\n\nnoise reduction, and\n\n\ndata analysis.\n\n\n\n\nSVD is closely linked to Principal Component Analysis (PCA), which is used for dimensionality reduction.\n\n\nAnother link is one with data mining and natural language processing (NLP): Latent Semantic Indexing (LSI). It is a technique that is used in document retrieval and word similarity. Latent semantic indexing uses SVD to group documents to the concepts that could consist of different words found in those documents. Various words can be grouped into a concept. Also here, SVD reduces the noisy correlation between words and their documents, and it decreases the number of dimensions that the original data has.\n\n\nThe singular value decomposition of a matrix \nA\n is the decomposition or factorization of \nA\n into the product of three matrices: \nA=U\u2217\u03a3\u2217V^t\n.\n\n\nThe size of the individual matrices is as follows given the matrix \nA\n is of size \nM x N\n:\n\n\n\n\nMatrix \nU\n is of size \nM x M\n\n\n\n\nMatrix \nV\n is of size \nN x N\n\n\n\n\nMatrix \n\\Sigma\n is of size \nM x N\n\n\n\n\n\n\nThe \n\u2217\n indicates that the matrices are multiplied and the \nt\n in \nV^t\n\n\n\nmeans that the matrix is transposed, which means that the rows and columns are interchanged.\n\n\nSimply stated, singular value decomposition provides a way to break a matrix into simpler, meaningful pieces. These pieces may contain some data we are interested in.\n\n\nprint(myMatrix)\n\n\n\n\n[[ 0.84790079  0.08996585]\n [ 0.66653841  0.94212726]]\n\n\n\n# Singular Value Decomposition\nU,s,Vh = linalg.svd(myMatrix) \n\n# Initialize `M` and `N`\nM,N = myMatrix.shape\n\n# Construct sigma matrix in SVD\nSig = linalg.diagsvd(s,M,N)\n\n\n\n\nprint(U)\nprint(s)\nprint(Vh)\n\n\n\n\n[[-0.53763961 -0.84317474]\n [-0.84317474  0.53763961]]\n[ 1.32147227  0.5591224 ]\n[[-0.7702571  -0.63773348]\n [-0.63773348  0.7702571 ]]\n\n\n\nprint(M)\nprint(N)\n\n\n\n\n2\n2\n\n\n\nprint(Sig)\n\n\n\n\n[[ 1.32147227  0.        ]\n [ 0.          0.5591224 ]]\n\n\n\nWith sparse matrices, use the \nsparse.linalg.svds()\n.\n\n\nCompress images with SVD\n\u00b6\n\n\n%matplotlib inline\n# Import the necessary packages\nimport numpy as np\nfrom scipy import linalg\nfrom skimage import data\nimport matplotlib.pyplot as plt\n\n\n\n\n# Get an image from `skimage`\nimg = data.camera()\n\nprint(img)\nprint(img.shape)\n\n\n\n\n[[156 157 160 ..., 152 152 152]\n [156 157 159 ..., 152 152 152]\n [158 157 156 ..., 152 152 152]\n ..., \n [121 123 126 ..., 121 113 111]\n [121 123 126 ..., 121 113 111]\n [121 123 126 ..., 121 113 111]]\n(512, 512)\n\n\n\nfig = plt.figure(figsize=(8, 3))\nax = fig.add_subplot(121)\nax.imshow(img, cmap='gray')\nplt.show()\n\n\n\n\n\n\n# Check number of singular values\nlinalg.svdvals(img)\n\n\n\n\narray([  6.38689996e+04,   1.44910897e+04,   1.09561592e+04,\n         6.19958837e+03,   5.85460599e+03,   4.82514545e+03,\n         4.59023130e+03,   3.61148738e+03,   3.34731861e+03,\n         3.14349896e+03,   3.05262875e+03,   2.95922014e+03,\n         2.84709763e+03,   2.81972262e+03,   2.53580358e+03,\n         2.35379736e+03,   2.25234388e+03,   2.19445315e+03,\n         1.95347281e+03,   1.93643231e+03,   1.78576072e+03,\n         1.68444543e+03,   1.55985334e+03,   1.53124809e+03,\n         1.49461049e+03,   1.46783730e+03,   1.37841479e+03,\n         1.31705840e+03,   1.28469563e+03,   1.26983772e+03,\n         1.23258950e+03,   1.19028553e+03,   1.14311122e+03,\n         1.11896715e+03,   1.07893598e+03,   1.04322585e+03,\n         1.00915095e+03,   9.95390582e+02,   9.77961424e+02,\n         9.41174385e+02,   9.32201249e+02,   8.93615745e+02,\n         8.74195561e+02,   8.58051291e+02,   8.29598226e+02,\n         8.00811160e+02,   7.93729536e+02,   7.89373695e+02,\n         7.58404767e+02,   7.29609262e+02,   7.09087154e+02,\n         7.00077886e+02,   6.86673719e+02,   6.65400930e+02,\n         6.56677192e+02,   6.28475541e+02,   6.10557098e+02,\n         5.94000126e+02,   5.84294112e+02,   5.72429055e+02,\n         5.69451585e+02,   5.50921578e+02,   5.37266578e+02,\n         5.33291637e+02,   5.21789437e+02,   5.05141703e+02,\n         5.01052645e+02,   4.93184398e+02,   4.80118682e+02,\n         4.73384191e+02,   4.56418309e+02,   4.48913305e+02,\n         4.44146447e+02,   4.32995274e+02,   4.26315380e+02,\n         4.22328895e+02,   4.05541490e+02,   3.98653047e+02,\n         3.96319140e+02,   3.89453125e+02,   3.84647691e+02,\n         3.75627016e+02,   3.71488605e+02,   3.67691102e+02,\n         3.59979435e+02,   3.50653860e+02,   3.48018191e+02,\n         3.35741100e+02,   3.33256260e+02,   3.26076697e+02,\n         3.19055085e+02,   3.09630221e+02,   3.03809793e+02,\n         3.02834775e+02,   2.94473792e+02,   2.89237544e+02,\n         2.83072764e+02,   2.80221278e+02,   2.74752660e+02,\n         2.71946305e+02,   2.67137796e+02,   2.63076632e+02,\n         2.56422198e+02,   2.54502372e+02,   2.49312761e+02,\n         2.44629388e+02,   2.42104483e+02,   2.38784276e+02,\n         2.24177802e+02,   2.21962143e+02,   2.20585254e+02,\n         2.16305370e+02,   2.14023345e+02,   2.10191299e+02,\n         2.06326744e+02,   2.01216165e+02,   1.95901568e+02,\n         1.93425008e+02,   1.86544957e+02,   1.81946842e+02,\n         1.81111952e+02,   1.79250161e+02,   1.73406209e+02,\n         1.71851416e+02,   1.68149855e+02,   1.61459003e+02,\n         1.60960447e+02,   1.54019279e+02,   1.52120965e+02,\n         1.50570121e+02,   1.45586776e+02,   1.42319905e+02,\n         1.41079625e+02,   1.39402001e+02,   1.36894791e+02,\n         1.35479523e+02,   1.33651596e+02,   1.29473707e+02,\n         1.25074480e+02,   1.23799569e+02,   1.21554208e+02,\n         1.19267845e+02,   1.16142251e+02,   1.14798303e+02,\n         1.09566347e+02,   1.07809839e+02,   1.05206661e+02,\n         1.03096542e+02,   1.02101366e+02,   9.92918020e+01,\n         9.80967375e+01,   9.25471187e+01,   9.06671721e+01,\n         8.94885949e+01,   8.59407127e+01,   8.47271098e+01,\n         8.25043759e+01,   8.05678329e+01,   7.98244891e+01,\n         7.88264924e+01,   7.60557363e+01,   7.52551314e+01,\n         7.20841101e+01,   7.16497267e+01,   7.09295551e+01,\n         6.93447334e+01,   6.68699361e+01,   6.61087591e+01,\n         6.51986683e+01,   6.19754992e+01,   6.03605056e+01,\n         5.93183446e+01,   5.72723667e+01,   5.62244673e+01,\n         5.48748626e+01,   5.35303251e+01,   5.31190637e+01,\n         5.14073607e+01,   5.05882613e+01,   4.85873327e+01,\n         4.77033490e+01,   4.61730309e+01,   4.58253352e+01,\n         4.45738941e+01,   4.41688671e+01,   4.30565443e+01,\n         4.21824960e+01,   4.13096543e+01,   4.01687931e+01,\n         3.89251008e+01,   3.76938723e+01,   3.71696405e+01,\n         3.65261279e+01,   3.63225111e+01,   3.47286204e+01,\n         3.38767247e+01,   3.36300965e+01,   3.28077851e+01,\n         3.22430013e+01,   3.19168059e+01,   3.04258560e+01,\n         3.01029523e+01,   2.94482797e+01,   2.93136739e+01,\n         2.84675969e+01,   2.70583102e+01,   2.69171207e+01,\n         2.62988906e+01,   2.53912737e+01,   2.52678982e+01,\n         2.48858839e+01,   2.35476097e+01,   2.33100666e+01,\n         2.23100190e+01,   2.15793552e+01,   2.11961369e+01,\n         2.05803331e+01,   2.00864770e+01,   1.96897799e+01,\n         1.84825965e+01,   1.78147513e+01,   1.76346865e+01,\n         1.67939919e+01,   1.64216226e+01,   1.60543495e+01,\n         1.55344956e+01,   1.49332344e+01,   1.45289863e+01,\n         1.42587318e+01,   1.37963455e+01,   1.34972766e+01,\n         1.34093515e+01,   1.22216082e+01,   1.19781514e+01,\n         1.15231001e+01,   1.09781821e+01,   1.09187142e+01,\n         1.03661279e+01,   1.00838177e+01,   9.79683858e+00,\n         9.54913700e+00,   9.35377121e+00,   8.98307957e+00,\n         8.62827079e+00,   8.43304143e+00,   8.21026198e+00,\n         8.11055326e+00,   7.84205214e+00,   7.82091983e+00,\n         7.72211462e+00,   7.65176844e+00,   7.57527347e+00,\n         7.48948062e+00,   7.32714219e+00,   7.24843636e+00,\n         7.23134018e+00,   7.11545722e+00,   6.94245132e+00,\n         6.90872672e+00,   6.89105932e+00,   6.85271365e+00,\n         6.73119810e+00,   6.67101027e+00,   6.65355095e+00,\n         6.61537333e+00,   6.57919154e+00,   6.51264665e+00,\n         6.43529244e+00,   6.38642585e+00,   6.32124352e+00,\n         6.26921968e+00,   6.22470192e+00,   6.18684862e+00,\n         6.12487899e+00,   6.08056310e+00,   6.02142397e+00,\n         5.98369919e+00,   5.96324230e+00,   5.90521877e+00,\n         5.89164599e+00,   5.85948724e+00,   5.78142589e+00,\n         5.77436927e+00,   5.72763143e+00,   5.68593121e+00,\n         5.64079641e+00,   5.59691503e+00,   5.57872232e+00,\n         5.56560739e+00,   5.46793402e+00,   5.45802649e+00,\n         5.43835398e+00,   5.40609891e+00,   5.38649282e+00,\n         5.35337487e+00,   5.32541786e+00,   5.26717335e+00,\n         5.22386437e+00,   5.18279263e+00,   5.15811624e+00,\n         5.11921277e+00,   5.07521779e+00,   5.06576107e+00,\n         5.02393795e+00,   4.98303961e+00,   4.93214693e+00,\n         4.91731420e+00,   4.85042743e+00,   4.84257910e+00,\n         4.82282191e+00,   4.80521779e+00,   4.75593168e+00,\n         4.74270318e+00,   4.70514352e+00,   4.68191260e+00,\n         4.65822179e+00,   4.62781009e+00,   4.58206294e+00,\n         4.55433009e+00,   4.52197896e+00,   4.47442964e+00,\n         4.45449682e+00,   4.45025349e+00,   4.38840686e+00,\n         4.38117331e+00,   4.35291236e+00,   4.32921175e+00,\n         4.30202225e+00,   4.26791973e+00,   4.21523395e+00,\n         4.21145347e+00,   4.18818581e+00,   4.17622715e+00,\n         4.13550887e+00,   4.12577916e+00,   4.11039284e+00,\n         4.09685513e+00,   4.07109036e+00,   4.02939243e+00,\n         4.00331783e+00,   3.97696241e+00,   3.94503312e+00,\n         3.93368480e+00,   3.84158980e+00,   3.82521909e+00,\n         3.80125077e+00,   3.76970168e+00,   3.76023660e+00,\n         3.75084950e+00,   3.73636863e+00,   3.72902284e+00,\n         3.66340067e+00,   3.64716250e+00,   3.61147057e+00,\n         3.60098533e+00,   3.58812743e+00,   3.53498132e+00,\n         3.52033176e+00,   3.49043477e+00,   3.46514179e+00,\n         3.44527900e+00,   3.42356869e+00,   3.40704111e+00,\n         3.34890626e+00,   3.32804671e+00,   3.29605788e+00,\n         3.28071188e+00,   3.25011320e+00,   3.23532434e+00,\n         3.21811867e+00,   3.18616262e+00,   3.16750232e+00,\n         3.12643543e+00,   3.10574635e+00,   3.09627820e+00,\n         3.05806788e+00,   3.01996318e+00,   3.00220202e+00,\n         2.95796156e+00,   2.94847475e+00,   2.90728643e+00,\n         2.87763724e+00,   2.86278424e+00,   2.83268253e+00,\n         2.82204155e+00,   2.80120062e+00,   2.78503941e+00,\n         2.76435415e+00,   2.74332238e+00,   2.71836658e+00,\n         2.71569528e+00,   2.69770561e+00,   2.64760980e+00,\n         2.62849348e+00,   2.61505591e+00,   2.59158684e+00,\n         2.54179224e+00,   2.51940320e+00,   2.50792107e+00,\n         2.49862874e+00,   2.48957871e+00,   2.44314028e+00,\n         2.42365590e+00,   2.41973257e+00,   2.35331088e+00,\n         2.34517297e+00,   2.31817739e+00,   2.30469350e+00,\n         2.27487356e+00,   2.26056150e+00,   2.23148661e+00,\n         2.20462740e+00,   2.19470644e+00,   2.17251816e+00,\n         2.14874503e+00,   2.11092460e+00,   2.10652682e+00,\n         2.06180197e+00,   2.03489164e+00,   2.02493153e+00,\n         2.01580398e+00,   1.97923652e+00,   1.95861598e+00,\n         1.92322853e+00,   1.91765275e+00,   1.88301850e+00,\n         1.87107658e+00,   1.86174602e+00,   1.81490812e+00,\n         1.80252752e+00,   1.78513146e+00,   1.75186936e+00,\n         1.73384237e+00,   1.69815585e+00,   1.67087083e+00,\n         1.65504461e+00,   1.62833826e+00,   1.59350016e+00,\n         1.58518520e+00,   1.57406121e+00,   1.52318355e+00,\n         1.52041380e+00,   1.48200585e+00,   1.46617961e+00,\n         1.46038913e+00,   1.44102572e+00,   1.42057616e+00,\n         1.40485251e+00,   1.38762119e+00,   1.37527086e+00,\n         1.36211908e+00,   1.34039135e+00,   1.29930779e+00,\n         1.26872251e+00,   1.23195908e+00,   1.22788520e+00,\n         1.22080800e+00,   1.19465263e+00,   1.17805481e+00,\n         1.16555637e+00,   1.12718364e+00,   1.10793283e+00,\n         1.10594246e+00,   1.06675455e+00,   1.04439770e+00,\n         1.02978244e+00,   1.00620518e+00,   9.81504353e-01,\n         9.57163454e-01,   9.33625951e-01,   9.08940260e-01,\n         8.89946907e-01,   8.73754378e-01,   8.54367286e-01,\n         8.33089642e-01,   8.14710711e-01,   7.90545224e-01,\n         7.44180512e-01,   7.25739820e-01,   7.18590163e-01,\n         6.97220443e-01,   6.39175669e-01,   6.18528497e-01,\n         5.96683219e-01,   5.83800689e-01,   5.72232599e-01,\n         5.31453332e-01,   5.26804142e-01,   5.20281933e-01,\n         4.75313705e-01,   4.54635778e-01,   4.34567930e-01,\n         4.23330255e-01,   4.04104582e-01,   3.84718206e-01,\n         3.61246016e-01,   3.32050389e-01,   2.95766519e-01,\n         2.84756495e-01,   2.66739045e-01,   2.41418262e-01,\n         2.08111390e-01,   1.85992093e-01,   1.48587324e-01,\n         1.32123996e-01,   1.16957628e-01,   8.67857990e-02,\n         7.80847492e-02,   6.61861872e-02,   4.85935027e-02,\n         3.31185916e-02,   1.08448303e-02])\n\n\n\n# Singular Value Decomposition\nU, s, Vh = linalg.svd(img)\n\n# Use only 32 singular values\nA = np.dot(U[:,0:32], \n          np.dot(np.diag(s[0:32]), Vh[0:32,:]))\n\n\n\n\nfig = plt.figure(figsize=(8, 3))\nprint(fig)\n\n\n\n\nFigure(576x216)\n\n\n\n<matplotlib.figure.Figure at 0x7f7bbb7b0710>\n\n\n\n# Add a subplot to the figure\nax = fig.add_subplot(121)\nprint(ax)\n\n\n\n\nAxes(0.125,0.125;0.352273x0.755)\n\n\n\nfig = plt.figure(figsize=(8, 3))\n\n# Add a subplot to the figure\nax = fig.add_subplot(121)\n\n# Plot `img` on grayscale\nax.imshow(img, cmap='gray')\n\n# Add a second subplot to the figure\nax2 = fig.add_subplot(122)\n\n# Plot `A` in the second subplot\nax2.imshow(A)\n\n# Add a title\nfig.suptitle('Image Compression with SVD', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()",
            "title": "Vectors and Arrays (Linear Algebra)"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#the-essentials-of-numpy-ndarray-objects",
            "text": "%pylab inline\nimport numpy as np\n\nmyArray = np.array([[1, 2, 3], [4, 5, 6]], dtype = np.int64)\nprint(myArray)  Populating the interactive namespace from numpy and matplotlib\n[[1 2 3]\n [4 5 6]]  # Inspect the data of `myArray`\nprint(myArray.data)  <memory at 0x7f7bbcb71a68>  # Inspect the data type of `myArray`\nprint(myArray.dtype)  int64  # Inspect the shape of `myArray`\nprint(myArray.shape)  (2, 3)  # Inspect the size of `myArray`\nprint(myArray.size)  6   Convert with  astype() .  Handle complex numbers.   # Return the real part of `myArray` elements\nnp.real(myArray)  array([[1, 2, 3],\n       [4, 5, 6]])  # Return the imaginary part of `myArray` elements\nnp.imag(myArray)  array([[0, 0, 0],\n       [0, 0, 0]])  # Return a real array if the complex parts are close to 0\nnp.real_if_close(myArray,tol=1000)  array([[1, 2, 3],\n       [4, 5, 6]])  # Cast `myArray` to float\nnp.cast['f'](myArray)  array([[ 1.,  2.,  3.],\n       [ 4.,  5.,  6.]], dtype=float32)  # Cast `myArray` to integer\nnp.cast['q'](myArray)  array([[1, 2, 3],\n       [4, 5, 6]], dtype=int64)   \u2018b\u2019 for int8.  \u2018c\u2019 for |S21; character or string.  \u2018e\u2019 for float16  \u2018f\u2019 for float32.  \u2018g\u2019 for float128  \u2018h\u2019 for int16, integer.  \u2018d\u2019 for digits.  \u2018i\u2019 for int32, integer.  \u2018l\u2019 for long.  \u2018m\u2019 for timedelta64.  \u2018q\u2019 for int64, integer.",
            "title": "The Essentials of Numpy ndarray Objects"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#array-creation",
            "text": "# Create a 2X2 identity matrix with `np.eye()`\nnp.eye(2)  array([[ 1.,  0.],\n       [ 0.,  1.]])  np.eye(2, 4)  array([[ 1.,  0.,  0.,  0.],\n       [ 0.,  1.,  0.,  0.]])  np.eye(4, 2)  array([[ 1.,  0.],\n       [ 0.,  1.],\n       [ 0.,  0.],\n       [ 0.,  0.]])  # Create a 3X3 identity matrix with `np.identity()`\nnp.identity(3)  array([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])  # Uniformly spaced values: spacing; from 2 to 8 (excluded) by 2\nnp.arange(3, 8, 2)  array([3, 5, 7])  # Uniformly spaced values: number of samples; from 2 to 3 in 5 intervals\nnp.linspace(2, 3, 5)  array([ 2.  ,  2.25,  2.5 ,  2.75,  3.  ])  # Uniformly spaced values: logarithmic spacing; from 2 to 3 in 4 intervals \nnp.logspace(2, 3, 4)  array([  100.        ,   215.443469  ,   464.15888336,  1000.        ])",
            "title": "Array Creation"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#indexing-and-slicing",
            "text": "print(myArray)  [[1 2 3]\n [4 5 6]]  # Slice `myArray` at index 0 and 1\nprint(myArray[0,0:2])  [1 2]  # Slice `my_2dArray` at row 0 and 1, column 1\nprint(myArray[0:2,1])  [2 5]  # Slice `my_3dArray` at row 1\nprint(myArray[1,...])  [4 5 6]  # Boolean indexing: only values < 3\nprint(myArray[myArray<3])  [1 2]  # Fancy indexing; r-c coordinates\nprint(myArray[[1, 0, 1, 0],[0, 1, 2, 0]])  [4 2 6 1]  Meshgrid   Index tricks:  np.mgrid() ,  np.ogrid() ,  np.r  and  np.c .  Instead of  np.concatenate() .  np.meshgrid() .   # Create a dense mesh grid; from to (excluded) by\n# takes two 1D arrays and produces two 2D matrices \n# corresponding to all pairs of (x, y) in the two arrays\n# the dimensions and number of the output arrays are equal\n# to the number of indexing dimensions\nnp.mgrid[1:11:2, -12:-3:3]  array([[[  1,   1,   1],\n        [  3,   3,   3],\n        [  5,   5,   5],\n        [  7,   7,   7],\n        [  9,   9,   9]],\n\n       [[-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6],\n        [-12,  -9,  -6]]])  # Create an open meshgrid; from to (excluded) by\nnp.ogrid[1:11:2, -12:-3:3]  [array([[1],\n        [3],\n        [5],\n        [7],\n        [9]]), array([[-12,  -9,  -6]])]  # Stack arrays vertically\nnp.r_[3, [0]*5, -1:1:10j]  array([ 3.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        , -1.        , -0.77777778, -0.55555556, -0.33333333,\n       -0.11111111,  0.11111111,  0.33333333,  0.55555556,  0.77777778,  1.        ])  array = np.ones(2)\nmy2Array = np.array([[1,2,3,4],[5,6,7,8]])\nprint(array)  [ 1.  1.]  print(my2Array)  [[1 2 3 4]\n [5 6 7 8]]  # Stack arrays horizontally (left-right)\nnp.c_[array]  array([[ 1.],\n       [ 1.]])  np.c_[my2Array]  array([[1, 2, 3, 4],\n       [5, 6, 7, 8]])  np.c_[array, my2Array]  array([[ 1.,  1.,  2.,  3.,  4.],\n       [ 1.,  5.,  6.,  7.,  8.]])  array2 = np.array([[1,2,3,4], [1,2,3,4]])\nprint(array2)  [[1 2 3 4]\n [1 2 3 4]]  np.r_[array2]  array([[1, 2, 3, 4],\n       [1, 2, 3, 4]])  np.r_[my2Array]  array([[1, 2, 3, 4],\n       [5, 6, 7, 8]])  np.r_[array2, my2Array]  array([[1, 2, 3, 4],\n       [1, 2, 3, 4],\n       [1, 2, 3, 4],\n       [5, 6, 7, 8]])  Other indexing/slicing  # Initialize a 2D array \nmy_2dArray = np.array([[1,2,3,4], [5,6,7,8]], dtype=np.int64)\nprint(my_2dArray)  [[1 2 3 4]\n [5 6 7 8]]  # Select values from `my_2dArray`\n# argument 1: select\n# argument 2: transform\nnp.select([my_2dArray < 4], [my_2dArray])  array([[1, 2, 3, 0],\n       [0, 0, 0, 0]])  np.select([my_2dArray < 4], [my_2dArray * 2])  array([[2, 4, 6, 0],\n       [0, 0, 0, 0]])",
            "title": "Indexing and Slicing"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#shape-selection-and-manipulation",
            "text": "Stack.  Split.  Transpose.  Change shape.   myArray = np.array([[1, 2, 3, 4]])\nmy_2dArray = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])  print(myArray)  [[1 2 3 4]]  print(my_2dArray)  [[1 2 3 4]\n [5 6 7 8]]  # Stack arrays horizontally (column-wise)\nprint(np.hstack((np.eye(2), my_2dArray)))  [[ 1.  0.  1.  2.  3.  4.]\n [ 0.  1.  5.  6.  7.  8.]]  # Stack arrays vertically (row-wise)\nprint(np.vstack((myArray, my_2dArray)))  [[1 2 3 4]\n [1 2 3 4]\n [5 6 7 8]]  # Split the array horizontally at the 2nd index (left-right)\nprint(np.hsplit(my_2dArray, 2))  [array([[1, 2],\n       [5, 6]]), array([[3, 4],\n       [7, 8]])]  # Split the array vertically at the 2nd index (top-bottom)\nprint(np.vsplit(my_2dArray, 2))  [array([[1, 2, 3, 4]]), array([[5, 6, 7, 8]])]  # Permute `myArray` dimensions\nprint(np.transpose(myArray))  [[1]\n [2]\n [3]\n [4]]  my_3dArray = np.array([[[1, 2, 3, 4], [5, 6, 7,  8]], [[1, 2, 3, 4], [9, 10, 11, 12]]])\nprint(my_3dArray)  [[[ 1  2  3  4]\n  [ 5  6  7  8]]\n\n [[ 1  2  3  4]\n  [ 9 10 11 12]]]  # Flatten `my_3dArray`\nprint(my_3dArray.flatten())  [ 1  2  3  4  5  6  7  8  1  2  3  4  9 10 11 12]  np.reshsape()  vs  np.resize() .  # Reshape but don't change the data\nprint(my_2dArray.reshape(4,2))  [[1 2]\n [3 4]\n [5 6]\n [7 8]]  # Resize to (6,4)\nprint(np.resize(my_3dArray, (6,4)))  [[ 1  2  3  4]\n [ 5  6  7  8]\n [ 1  2  3  4]\n [ 9 10 11 12]\n [ 1  2  3  4]\n [ 5  6  7  8]]  Vectorized functions (to \u2018loop\u2019 over an array, all items)  # Define a function `myfunc`\ndef myfunc(a,b):\n  if a > b:\n     return a - b\n  else:\n     return a + b\n\n# Vectorize `myfunc`\nvectorizedFunc = np.vectorize(myfunc) \n\n# Apply\nprint(myArray)\nvectorizedFunc(myArray, 2)  [[1 2 3 4]]\n\n\n\n\n\narray([[3, 4, 1, 2]])  np.angle()  provides the angle of the elements of complex array elements, but also basic trigonometric, exponential or logarithmic functions.",
            "title": "Shape Selection and Manipulation"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#linear-algebra-with-scipy",
            "text": "import scipy\n\n# Check package version\nscipy.__version__  '0.19.0'",
            "title": "Linear Algebra With SciPy"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#vectors-and-matrices-the-basics",
            "text": "# Create a vector\nmyVector = np.array([1,2,3,4])\nprint(myVector)  [1 2 3 4]   A matrix is a subclass of arrays.  A matrix is always 2D.  Both arrays and matrices have  .T() .  Only matrices have  .H()  and  .I() .  Matrix multiplication works differently from an element-wise array.  T **  has different results for matrices and arrays.  Sparse matrices have mostly zero elements, while the ones that have mostly non-zero elements are called dense matrices.  scipy.linalg .  scipy.sparse .     # Create a matrix\nmyMatrix = np.matrix(np.random.random((5,5)))\nprint(myMatrix)  [[ 0.45409417  0.51518628  0.21891525  0.4827949   0.11485953]\n [ 0.26387125  0.27904581  0.27371679  0.81793744  0.03194194]\n [ 0.44758032  0.40043501  0.53270025  0.73481508  0.40994865]\n [ 0.26650523  0.47469863  0.77731378  0.33237448  0.0932401 ]\n [ 0.47477976  0.4054091   0.62060959  0.76708818  0.33732755]]  # Create a 2X2 identity matrix\nnp.eye(3, k=1)          array([[ 0.,  1.,  0.],\n       [ 0.,  0.,  1.],\n       [ 0.,  0.,  0.]])  # Create a 2x2 identity matrix\nnp.mat(np.identity(2))           matrix([[ 1.,  0.],\n        [ 0.,  1.]])  C = np.matrix([[0.47332239,0.26149519,0.,0.01665965,0.05914868], [0.24440216,0.,0.,0.,0.],  [0.,0.,0.4320679,0.10501837,0.], [0.32164578,0.,0.,0.10963973,0.],  [0.15023766,0.04764381,0.,0.,0.38244847],  [0.08499095,0.,0.0163261,0.,0.27636168], [0.,0.36569833,0.34968224,0.,0.40275066],  [0.,0.,0.,0.40504002,0.],  [0.41632136,0.35405707,0.33020532,0.16344026,0.], [0.04105013,0.26913226,0.,0.00280266,0.]])  print(C)  [[ 0.47332239  0.26149519  0.          0.01665965  0.05914868]\n [ 0.24440216  0.          0.          0.          0.        ]\n [ 0.          0.          0.4320679   0.10501837  0.        ]\n [ 0.32164578  0.          0.          0.10963973  0.        ]\n [ 0.15023766  0.04764381  0.          0.          0.38244847]\n [ 0.08499095  0.          0.0163261   0.          0.27636168]\n [ 0.          0.36569833  0.34968224  0.          0.40275066]\n [ 0.          0.          0.          0.40504002  0.        ]\n [ 0.41632136  0.35405707  0.33020532  0.16344026  0.        ]\n [ 0.04105013  0.26913226  0.          0.00280266  0.        ]]  from scipy import linalg, sparse  # Compressed Sparse Row matrix\n# fast access to rows and columns\nsparse.csr_matrix(C)  <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Compressed Sparse Row format>  # Compressed Sparse Column matrix\n# fast access to  rows and columns\nsparse.csc_matrix(C)    <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Compressed Sparse Column format>  # Dictionary Of Keys matrix\n# fill the matrix with numbers one by one\nsparse.dok_matrix(C)    <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in Dictionary Of Keys format>  # block Sparse Row matrices\n# constructing the matrix from blocks of smaller matrices\nsparse.bsr_matrix(C)  <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements (blocksize = 1x1) in Block Sparse Row format>  # COOrdinate format sparse matrices\n# fill the matrix with numbers one by one\nsparse.coo_matrix(C)  <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in COOrdinate format>  # DIAgonal storage sparse matrices\n# initialize the matrix with an array as the diagonal\nsparse.dia_matrix(C)  <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 47 stored elements (13 diagonals) in DIAgonal format>  # Row-based linked list sparse matrices\n# sliced-based matrices\nsparse.lil_matrix(C)  <10x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 26 stored elements in LInked List format>  vector1 = np.array([1, 2, 3])\nvector2 = np.array([2, 3, 4])\nprint(vector1)  [1 2 3]  print(vector2)  [2 3 4]  # Addition of `vector1` and `vector2`\nvector3 = vector1 + vector2\n\n# Print `vector3`\nprint(vector3)  [3 5 7]  # Subtraction of `vector2` and `vector1`\nvector4 = vector2 - vector1\n\n# print `vector4`\nprint(vector4)  [1 1 1]  # Dot product of `vector1` and `vector2`\ndotProduct = np.dot(vector1, vector2)\n\n# Print `dotProduct`\nprint(dotProduct)  20  # Cross product of `vector1` and `vector2`\n# vector product in vector algebra; search the formula online\ncrossProduct = np.cross(vector1, vector2)\n\n# Print `crossProduct`\nprint(crossProduct)  [-1  2 -1]",
            "title": "Vectors and Matrices: The Basics"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#matrices-operations-and-routines",
            "text": "np.add(vector1, vector2)  array([3, 5, 7])  np.subtract(vector1, vector2)  array([-1, -1, -1])  np.divide(vector1, vector2)  array([ 0.5       ,  0.66666667,  0.75      ])  np.multiply(vector1, vector2)  array([ 2,  6, 12])  # Vector dot product\nvectorDotProduct = np.vdot(vector1, vector2)\nprint(vectorDotProduct)  20  # Inner product\ninnerProduct = np.inner(vector1, vector2)\nprint(vectorDotProduct)  20  # Outer product\nouterProduct = np.outer(vector1, vector2)\nprint(vectorDotProduct)  20  matrix1 = np.matrix([[0.47332239, 0.26149519], [0.86380934, 0.01665965]])\nmatrix2 = np.matrix([[3, 4], [5, 6]])\n\nprint(matrix1)  [[ 0.47332239  0.26149519]\n [ 0.86380934  0.01665965]]  print(matrix2)  [[3 4]\n [5 6]]  # Tensor dot product\ntensorDotProduct = np.tensordot(matrix1, matrix2)\nprint(vectorDotProduct)  20  # Kronecker product\nkronProduct = np.kron(matrix1, matrix2)\nprint(vectorDotProduct)  20  print(matrix1)  [[ 0.47332239  0.26149519]\n [ 0.86380934  0.01665965]]  # exponent\nlinalg.expm(matrix1)\n#linalg.expm2(matrix1)\n#linalg.expm3(matrix1)  array([[ 1.76478622,  0.34978586],\n       [ 1.15546404,  1.15393687]])  # logarithm\nlinalg.logm(matrix1)  array([[-0.54372715+0.89057597j,  0.24956103-0.77901846j],\n       [ 0.82438668-2.57336825j, -0.97954865+2.25101668j]])  # squared root\nlinalg.sqrtm(matrix1)  array([[ 0.62966832+0.15061317j,  0.21791187-0.1317467j ],\n       [ 0.71983850-0.43520505j,  0.24911742+0.38068933j]])  # lambda\nlinalg.funm(matrix1, lambda x: x*x)  array([[ 0.44991607,  0.12812795],\n       [ 0.42325106,  0.22615953]])  # transposition\n# make a new matrix whose rows are the columns of the original\nmatrix1.T  matrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])  np.transpose(matrix1)  matrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])  # conjugate transposition\n# interchanges the row and column index for each matrix element\nmatrix1.H  matrix([[ 0.47332239,  0.86380934],\n        [ 0.26149519,  0.01665965]])  # inverse\n# matrix multiplied with the original matrix results in an identity matrix\nmatrix1.I  matrix([[-0.0764216 ,  1.19953792],\n        [ 3.96248993, -2.17123747]])  linalg.inv(matrix1)  array([[-0.0764216 ,  1.19953792],\n       [ 3.96248993, -2.17123747]])  # cast an array\nmatrix1.A  array([[ 0.47332239,  0.26149519],\n       [ 0.86380934,  0.01665965]])  # retrieve the trace or sum of the elements on the main matrix diagonal\nnp.trace(matrix1)  0.48998204000000001  # retrieve the matrix rank or the number\n# of Singular Value Decomposition singular values\n# of an array that are greater than a certain threshold\nnp.linalg.matrix_rank(matrix1)  2  # norm of a matrix\n# number defined in terms of the entries of the matrix\n# how large the elements are\nlinalg.norm(matrix1)  1.0192438074758199  # matrix determinant\nlinalg.det(matrix1)  -0.21799660213251107  Solving system of  Ax=b , where  A  is a square matrix and  b  a general matrix. There are two methods to find  x .  A = np.matrix([[0.35115177, 0.79693272], [0.81264708, 0.06853826]])\nb = np.matrix([[1.+5.j, 0.+2.j, 0.+3.j], [ 0.+4.j, 0.+5.j, 0.+6.j]])\nprint(A)  [[ 0.35115177  0.79693272]\n [ 0.81264708  0.06853826]]  print(b)  [[ 1.+5.j  0.+2.j  0.+3.j]\n [ 0.+4.j  0.+5.j  0.+6.j]]  # Dense matrix solver\nlinalg.solve(A, b)  array([[-0.10991486+4.56259221j,  0.00000000+6.17037842j,\n         0.00000000+7.33850519j],\n       [ 1.30324276+4.26364433j,  0.00000000-0.20922633j,\n         0.00000000+0.53087407j]])  F = np.matrix([[0., 1., 0.], [0., 0., 1.], [0., 0., 0.]])\nE = np.matrix([[1],[2],[3]])\nprint(F)  [[ 0.  1.  0.]\n [ 0.  0.  1.]\n [ 0.  0.  0.]]  print(E)  [[1]\n [2]\n [3]]  # Linear least-square solver\nnp.linalg.lstsq(F,E)  (matrix([[ 0.],\n         [ 1.],\n         [ 2.]]),\n matrix([], shape=(1, 0), dtype=float64),\n 2,\n array([ 1.,  1.,  0.]))  For sparse matrices,  linalg.spsolve() may solve the equation, otherwise, it might still be possible to obtain an approximate  x  with the help of the  linalg.lstsq() .",
            "title": "Matrices: Operations and Routines"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#eigenvalues-and-eigenvectors",
            "text": "The eigenvalues and eigenvectors are important concepts in many computer vision and machine learning techniques:   Principal Component Analysis (PCA) for dimensionality reduction.  EigenFaces for  face recognition . Consult the latter case for an illustration.   Almost all vectors change direction, when they are multiplied by a matrix. However, certain resulting vectors maintain the same direction after the multiplication. These are the eigenvectors.  Multiply an eigenvector by a matrix, and the resulting vector of that multiplication is equal to a multiplication of the original eigenvector with  \\lambda , the eigenvalue:   Ax = \\lambda x   Eigenvalue gives valuable information: whether one of the eigenvectors is stretched, shrunk, reversed, or left unchanged when multiplied by a matrix.  myMatrix = np.matrix([[0.84790079, 0.08996585], [0.66653841, 0.94212726]])\nprint(myMatrix)  [[ 0.84790079  0.08996585]\n [ 0.66653841  0.94212726]]  # Solve eigenvalue problem\nla, v = linalg.eig(myMatrix) \n\n# Unpack eigenvalues\nl1, l2 = la\n\n# First eigenvector\nv[:,0]  array([-0.40641758,  0.91368745])  # Second eigenvector\nv[:,1]  array([-0.29036942, -0.95691463])  # Or unpack eigenvalues with `eigvals()`\nlinalg.eigvals(myMatrix)  array([ 0.64564412+0.j,  1.14438393+0.j])  # laternative\neigvals(myMatrix)  array([ 0.64564412,  1.14438393])  With sparse matricesL  la, v = sparse.linalg.eigs(myMatrix,1) ; the number of eigenvalues and eigenvectors that has to be retrieved = 1.",
            "title": "Eigenvalues and Eigenvectors"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#singular-value-decomposition-svd",
            "text": "SVD is useful for many tasks:   data compression,  noise reduction, and  data analysis.   SVD is closely linked to Principal Component Analysis (PCA), which is used for dimensionality reduction.  Another link is one with data mining and natural language processing (NLP): Latent Semantic Indexing (LSI). It is a technique that is used in document retrieval and word similarity. Latent semantic indexing uses SVD to group documents to the concepts that could consist of different words found in those documents. Various words can be grouped into a concept. Also here, SVD reduces the noisy correlation between words and their documents, and it decreases the number of dimensions that the original data has.  The singular value decomposition of a matrix  A  is the decomposition or factorization of  A  into the product of three matrices:  A=U\u2217\u03a3\u2217V^t .  The size of the individual matrices is as follows given the matrix  A  is of size  M x N :   Matrix  U  is of size  M x M   Matrix  V  is of size  N x N   Matrix  \\Sigma  is of size  M x N    The  \u2217  indicates that the matrices are multiplied and the  t  in  V^t  \nmeans that the matrix is transposed, which means that the rows and columns are interchanged.  Simply stated, singular value decomposition provides a way to break a matrix into simpler, meaningful pieces. These pieces may contain some data we are interested in.  print(myMatrix)  [[ 0.84790079  0.08996585]\n [ 0.66653841  0.94212726]]  # Singular Value Decomposition\nU,s,Vh = linalg.svd(myMatrix) \n\n# Initialize `M` and `N`\nM,N = myMatrix.shape\n\n# Construct sigma matrix in SVD\nSig = linalg.diagsvd(s,M,N)  print(U)\nprint(s)\nprint(Vh)  [[-0.53763961 -0.84317474]\n [-0.84317474  0.53763961]]\n[ 1.32147227  0.5591224 ]\n[[-0.7702571  -0.63773348]\n [-0.63773348  0.7702571 ]]  print(M)\nprint(N)  2\n2  print(Sig)  [[ 1.32147227  0.        ]\n [ 0.          0.5591224 ]]  With sparse matrices, use the  sparse.linalg.svds() .",
            "title": "Singular Value Decomposition (SVD)"
        },
        {
            "location": "/Vectors and Arrays (Linear Algebra)/#compress-images-with-svd",
            "text": "%matplotlib inline\n# Import the necessary packages\nimport numpy as np\nfrom scipy import linalg\nfrom skimage import data\nimport matplotlib.pyplot as plt  # Get an image from `skimage`\nimg = data.camera()\n\nprint(img)\nprint(img.shape)  [[156 157 160 ..., 152 152 152]\n [156 157 159 ..., 152 152 152]\n [158 157 156 ..., 152 152 152]\n ..., \n [121 123 126 ..., 121 113 111]\n [121 123 126 ..., 121 113 111]\n [121 123 126 ..., 121 113 111]]\n(512, 512)  fig = plt.figure(figsize=(8, 3))\nax = fig.add_subplot(121)\nax.imshow(img, cmap='gray')\nplt.show()   # Check number of singular values\nlinalg.svdvals(img)  array([  6.38689996e+04,   1.44910897e+04,   1.09561592e+04,\n         6.19958837e+03,   5.85460599e+03,   4.82514545e+03,\n         4.59023130e+03,   3.61148738e+03,   3.34731861e+03,\n         3.14349896e+03,   3.05262875e+03,   2.95922014e+03,\n         2.84709763e+03,   2.81972262e+03,   2.53580358e+03,\n         2.35379736e+03,   2.25234388e+03,   2.19445315e+03,\n         1.95347281e+03,   1.93643231e+03,   1.78576072e+03,\n         1.68444543e+03,   1.55985334e+03,   1.53124809e+03,\n         1.49461049e+03,   1.46783730e+03,   1.37841479e+03,\n         1.31705840e+03,   1.28469563e+03,   1.26983772e+03,\n         1.23258950e+03,   1.19028553e+03,   1.14311122e+03,\n         1.11896715e+03,   1.07893598e+03,   1.04322585e+03,\n         1.00915095e+03,   9.95390582e+02,   9.77961424e+02,\n         9.41174385e+02,   9.32201249e+02,   8.93615745e+02,\n         8.74195561e+02,   8.58051291e+02,   8.29598226e+02,\n         8.00811160e+02,   7.93729536e+02,   7.89373695e+02,\n         7.58404767e+02,   7.29609262e+02,   7.09087154e+02,\n         7.00077886e+02,   6.86673719e+02,   6.65400930e+02,\n         6.56677192e+02,   6.28475541e+02,   6.10557098e+02,\n         5.94000126e+02,   5.84294112e+02,   5.72429055e+02,\n         5.69451585e+02,   5.50921578e+02,   5.37266578e+02,\n         5.33291637e+02,   5.21789437e+02,   5.05141703e+02,\n         5.01052645e+02,   4.93184398e+02,   4.80118682e+02,\n         4.73384191e+02,   4.56418309e+02,   4.48913305e+02,\n         4.44146447e+02,   4.32995274e+02,   4.26315380e+02,\n         4.22328895e+02,   4.05541490e+02,   3.98653047e+02,\n         3.96319140e+02,   3.89453125e+02,   3.84647691e+02,\n         3.75627016e+02,   3.71488605e+02,   3.67691102e+02,\n         3.59979435e+02,   3.50653860e+02,   3.48018191e+02,\n         3.35741100e+02,   3.33256260e+02,   3.26076697e+02,\n         3.19055085e+02,   3.09630221e+02,   3.03809793e+02,\n         3.02834775e+02,   2.94473792e+02,   2.89237544e+02,\n         2.83072764e+02,   2.80221278e+02,   2.74752660e+02,\n         2.71946305e+02,   2.67137796e+02,   2.63076632e+02,\n         2.56422198e+02,   2.54502372e+02,   2.49312761e+02,\n         2.44629388e+02,   2.42104483e+02,   2.38784276e+02,\n         2.24177802e+02,   2.21962143e+02,   2.20585254e+02,\n         2.16305370e+02,   2.14023345e+02,   2.10191299e+02,\n         2.06326744e+02,   2.01216165e+02,   1.95901568e+02,\n         1.93425008e+02,   1.86544957e+02,   1.81946842e+02,\n         1.81111952e+02,   1.79250161e+02,   1.73406209e+02,\n         1.71851416e+02,   1.68149855e+02,   1.61459003e+02,\n         1.60960447e+02,   1.54019279e+02,   1.52120965e+02,\n         1.50570121e+02,   1.45586776e+02,   1.42319905e+02,\n         1.41079625e+02,   1.39402001e+02,   1.36894791e+02,\n         1.35479523e+02,   1.33651596e+02,   1.29473707e+02,\n         1.25074480e+02,   1.23799569e+02,   1.21554208e+02,\n         1.19267845e+02,   1.16142251e+02,   1.14798303e+02,\n         1.09566347e+02,   1.07809839e+02,   1.05206661e+02,\n         1.03096542e+02,   1.02101366e+02,   9.92918020e+01,\n         9.80967375e+01,   9.25471187e+01,   9.06671721e+01,\n         8.94885949e+01,   8.59407127e+01,   8.47271098e+01,\n         8.25043759e+01,   8.05678329e+01,   7.98244891e+01,\n         7.88264924e+01,   7.60557363e+01,   7.52551314e+01,\n         7.20841101e+01,   7.16497267e+01,   7.09295551e+01,\n         6.93447334e+01,   6.68699361e+01,   6.61087591e+01,\n         6.51986683e+01,   6.19754992e+01,   6.03605056e+01,\n         5.93183446e+01,   5.72723667e+01,   5.62244673e+01,\n         5.48748626e+01,   5.35303251e+01,   5.31190637e+01,\n         5.14073607e+01,   5.05882613e+01,   4.85873327e+01,\n         4.77033490e+01,   4.61730309e+01,   4.58253352e+01,\n         4.45738941e+01,   4.41688671e+01,   4.30565443e+01,\n         4.21824960e+01,   4.13096543e+01,   4.01687931e+01,\n         3.89251008e+01,   3.76938723e+01,   3.71696405e+01,\n         3.65261279e+01,   3.63225111e+01,   3.47286204e+01,\n         3.38767247e+01,   3.36300965e+01,   3.28077851e+01,\n         3.22430013e+01,   3.19168059e+01,   3.04258560e+01,\n         3.01029523e+01,   2.94482797e+01,   2.93136739e+01,\n         2.84675969e+01,   2.70583102e+01,   2.69171207e+01,\n         2.62988906e+01,   2.53912737e+01,   2.52678982e+01,\n         2.48858839e+01,   2.35476097e+01,   2.33100666e+01,\n         2.23100190e+01,   2.15793552e+01,   2.11961369e+01,\n         2.05803331e+01,   2.00864770e+01,   1.96897799e+01,\n         1.84825965e+01,   1.78147513e+01,   1.76346865e+01,\n         1.67939919e+01,   1.64216226e+01,   1.60543495e+01,\n         1.55344956e+01,   1.49332344e+01,   1.45289863e+01,\n         1.42587318e+01,   1.37963455e+01,   1.34972766e+01,\n         1.34093515e+01,   1.22216082e+01,   1.19781514e+01,\n         1.15231001e+01,   1.09781821e+01,   1.09187142e+01,\n         1.03661279e+01,   1.00838177e+01,   9.79683858e+00,\n         9.54913700e+00,   9.35377121e+00,   8.98307957e+00,\n         8.62827079e+00,   8.43304143e+00,   8.21026198e+00,\n         8.11055326e+00,   7.84205214e+00,   7.82091983e+00,\n         7.72211462e+00,   7.65176844e+00,   7.57527347e+00,\n         7.48948062e+00,   7.32714219e+00,   7.24843636e+00,\n         7.23134018e+00,   7.11545722e+00,   6.94245132e+00,\n         6.90872672e+00,   6.89105932e+00,   6.85271365e+00,\n         6.73119810e+00,   6.67101027e+00,   6.65355095e+00,\n         6.61537333e+00,   6.57919154e+00,   6.51264665e+00,\n         6.43529244e+00,   6.38642585e+00,   6.32124352e+00,\n         6.26921968e+00,   6.22470192e+00,   6.18684862e+00,\n         6.12487899e+00,   6.08056310e+00,   6.02142397e+00,\n         5.98369919e+00,   5.96324230e+00,   5.90521877e+00,\n         5.89164599e+00,   5.85948724e+00,   5.78142589e+00,\n         5.77436927e+00,   5.72763143e+00,   5.68593121e+00,\n         5.64079641e+00,   5.59691503e+00,   5.57872232e+00,\n         5.56560739e+00,   5.46793402e+00,   5.45802649e+00,\n         5.43835398e+00,   5.40609891e+00,   5.38649282e+00,\n         5.35337487e+00,   5.32541786e+00,   5.26717335e+00,\n         5.22386437e+00,   5.18279263e+00,   5.15811624e+00,\n         5.11921277e+00,   5.07521779e+00,   5.06576107e+00,\n         5.02393795e+00,   4.98303961e+00,   4.93214693e+00,\n         4.91731420e+00,   4.85042743e+00,   4.84257910e+00,\n         4.82282191e+00,   4.80521779e+00,   4.75593168e+00,\n         4.74270318e+00,   4.70514352e+00,   4.68191260e+00,\n         4.65822179e+00,   4.62781009e+00,   4.58206294e+00,\n         4.55433009e+00,   4.52197896e+00,   4.47442964e+00,\n         4.45449682e+00,   4.45025349e+00,   4.38840686e+00,\n         4.38117331e+00,   4.35291236e+00,   4.32921175e+00,\n         4.30202225e+00,   4.26791973e+00,   4.21523395e+00,\n         4.21145347e+00,   4.18818581e+00,   4.17622715e+00,\n         4.13550887e+00,   4.12577916e+00,   4.11039284e+00,\n         4.09685513e+00,   4.07109036e+00,   4.02939243e+00,\n         4.00331783e+00,   3.97696241e+00,   3.94503312e+00,\n         3.93368480e+00,   3.84158980e+00,   3.82521909e+00,\n         3.80125077e+00,   3.76970168e+00,   3.76023660e+00,\n         3.75084950e+00,   3.73636863e+00,   3.72902284e+00,\n         3.66340067e+00,   3.64716250e+00,   3.61147057e+00,\n         3.60098533e+00,   3.58812743e+00,   3.53498132e+00,\n         3.52033176e+00,   3.49043477e+00,   3.46514179e+00,\n         3.44527900e+00,   3.42356869e+00,   3.40704111e+00,\n         3.34890626e+00,   3.32804671e+00,   3.29605788e+00,\n         3.28071188e+00,   3.25011320e+00,   3.23532434e+00,\n         3.21811867e+00,   3.18616262e+00,   3.16750232e+00,\n         3.12643543e+00,   3.10574635e+00,   3.09627820e+00,\n         3.05806788e+00,   3.01996318e+00,   3.00220202e+00,\n         2.95796156e+00,   2.94847475e+00,   2.90728643e+00,\n         2.87763724e+00,   2.86278424e+00,   2.83268253e+00,\n         2.82204155e+00,   2.80120062e+00,   2.78503941e+00,\n         2.76435415e+00,   2.74332238e+00,   2.71836658e+00,\n         2.71569528e+00,   2.69770561e+00,   2.64760980e+00,\n         2.62849348e+00,   2.61505591e+00,   2.59158684e+00,\n         2.54179224e+00,   2.51940320e+00,   2.50792107e+00,\n         2.49862874e+00,   2.48957871e+00,   2.44314028e+00,\n         2.42365590e+00,   2.41973257e+00,   2.35331088e+00,\n         2.34517297e+00,   2.31817739e+00,   2.30469350e+00,\n         2.27487356e+00,   2.26056150e+00,   2.23148661e+00,\n         2.20462740e+00,   2.19470644e+00,   2.17251816e+00,\n         2.14874503e+00,   2.11092460e+00,   2.10652682e+00,\n         2.06180197e+00,   2.03489164e+00,   2.02493153e+00,\n         2.01580398e+00,   1.97923652e+00,   1.95861598e+00,\n         1.92322853e+00,   1.91765275e+00,   1.88301850e+00,\n         1.87107658e+00,   1.86174602e+00,   1.81490812e+00,\n         1.80252752e+00,   1.78513146e+00,   1.75186936e+00,\n         1.73384237e+00,   1.69815585e+00,   1.67087083e+00,\n         1.65504461e+00,   1.62833826e+00,   1.59350016e+00,\n         1.58518520e+00,   1.57406121e+00,   1.52318355e+00,\n         1.52041380e+00,   1.48200585e+00,   1.46617961e+00,\n         1.46038913e+00,   1.44102572e+00,   1.42057616e+00,\n         1.40485251e+00,   1.38762119e+00,   1.37527086e+00,\n         1.36211908e+00,   1.34039135e+00,   1.29930779e+00,\n         1.26872251e+00,   1.23195908e+00,   1.22788520e+00,\n         1.22080800e+00,   1.19465263e+00,   1.17805481e+00,\n         1.16555637e+00,   1.12718364e+00,   1.10793283e+00,\n         1.10594246e+00,   1.06675455e+00,   1.04439770e+00,\n         1.02978244e+00,   1.00620518e+00,   9.81504353e-01,\n         9.57163454e-01,   9.33625951e-01,   9.08940260e-01,\n         8.89946907e-01,   8.73754378e-01,   8.54367286e-01,\n         8.33089642e-01,   8.14710711e-01,   7.90545224e-01,\n         7.44180512e-01,   7.25739820e-01,   7.18590163e-01,\n         6.97220443e-01,   6.39175669e-01,   6.18528497e-01,\n         5.96683219e-01,   5.83800689e-01,   5.72232599e-01,\n         5.31453332e-01,   5.26804142e-01,   5.20281933e-01,\n         4.75313705e-01,   4.54635778e-01,   4.34567930e-01,\n         4.23330255e-01,   4.04104582e-01,   3.84718206e-01,\n         3.61246016e-01,   3.32050389e-01,   2.95766519e-01,\n         2.84756495e-01,   2.66739045e-01,   2.41418262e-01,\n         2.08111390e-01,   1.85992093e-01,   1.48587324e-01,\n         1.32123996e-01,   1.16957628e-01,   8.67857990e-02,\n         7.80847492e-02,   6.61861872e-02,   4.85935027e-02,\n         3.31185916e-02,   1.08448303e-02])  # Singular Value Decomposition\nU, s, Vh = linalg.svd(img)\n\n# Use only 32 singular values\nA = np.dot(U[:,0:32], \n          np.dot(np.diag(s[0:32]), Vh[0:32,:]))  fig = plt.figure(figsize=(8, 3))\nprint(fig)  Figure(576x216)\n\n\n\n<matplotlib.figure.Figure at 0x7f7bbb7b0710>  # Add a subplot to the figure\nax = fig.add_subplot(121)\nprint(ax)  Axes(0.125,0.125;0.352273x0.755)  fig = plt.figure(figsize=(8, 3))\n\n# Add a subplot to the figure\nax = fig.add_subplot(121)\n\n# Plot `img` on grayscale\nax.imshow(img, cmap='gray')\n\n# Add a second subplot to the figure\nax2 = fig.add_subplot(122)\n\n# Plot `A` in the second subplot\nax2.imshow(A)\n\n# Add a title\nfig.suptitle('Image Compression with SVD', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()",
            "title": "Compress images with SVD"
        },
        {
            "location": "/Matplotlib, Python Plotting/",
            "text": "CONTENT\n\n\nA Matplotlib Python Plot\n\n\nmatplotlib, pyplot and pylab: how are they related?\n\n\nCreate a Plot\n\n\nA Subplot\n\n\nThe Difference Between add_axes() and add_subplot()\n\n\n\n\n\n\nChange the Size of Figures\n\n\nWorking With Pyplot: Plotting Routines\n\n\nCustomize pyplot\n\n\nDelete an Axis\n\n\nPut the Legend out of the Plot\n\n\nSet Plot Title and Axes Labels\n\n\nSet the Plot Layout\n\n\n\n\n\n\nShow, Save, and Close the Plot\n\n\nSave a Plot to an Image File\n\n\nSave a Plot to a Pdf File\n\n\nUse cla(), clf() or close()\n\n\n\n\n\n\nCustomizing Matplotlib\n\n\nUse a ggplot2 Style\n\n\nrc Settings\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nA Matplotlib Python Plot\n\u00b6\n\n\nImports, prepare some data, and start plotting.\n\n\n%matplotlib inline\n\n# Import the necessary packages and modules\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Prepare the plot\nimport matplotlib as mpl\nmpl.rcParams['lines.linewidth'] = 1\nplt.style.use(\"default\")\n\n\n\n\n# Prepare the data\nx = np.linspace(0, 10, 100)\nprint(x)\n\n\n\n\n[  0.           0.1010101    0.2020202    0.3030303    0.4040404\n   0.50505051   0.60606061   0.70707071   0.80808081   0.90909091\n   1.01010101   1.11111111   1.21212121   1.31313131   1.41414141\n   1.51515152   1.61616162   1.71717172   1.81818182   1.91919192\n   2.02020202   2.12121212   2.22222222   2.32323232   2.42424242\n   2.52525253   2.62626263   2.72727273   2.82828283   2.92929293\n   3.03030303   3.13131313   3.23232323   3.33333333   3.43434343\n   3.53535354   3.63636364   3.73737374   3.83838384   3.93939394\n   4.04040404   4.14141414   4.24242424   4.34343434   4.44444444\n   4.54545455   4.64646465   4.74747475   4.84848485   4.94949495\n   5.05050505   5.15151515   5.25252525   5.35353535   5.45454545\n   5.55555556   5.65656566   5.75757576   5.85858586   5.95959596\n   6.06060606   6.16161616   6.26262626   6.36363636   6.46464646\n   6.56565657   6.66666667   6.76767677   6.86868687   6.96969697\n   7.07070707   7.17171717   7.27272727   7.37373737   7.47474747\n   7.57575758   7.67676768   7.77777778   7.87878788   7.97979798\n   8.08080808   8.18181818   8.28282828   8.38383838   8.48484848\n   8.58585859   8.68686869   8.78787879   8.88888889   8.98989899\n   9.09090909   9.19191919   9.29292929   9.39393939   9.49494949\n   9.5959596    9.6969697    9.7979798    9.8989899   10.        ]\n\n\n\n# Plot the data\nplt.plot(x, x, label='linear')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\nFigure.\n\n\nTitle, sub, text, legend.\n\n\nAxes with \nplot()\n and \nscatter()\n with ticks, labels, etc.\n\n\n\n\n\n\n\n\nax.plot()\n calls \nplt.plot()\n.\n\n\nax.scatter\n calls \nplt.scatter\n.\n\n\nax.set_xlim\n call \nplt.xlim\n.\n\n\n\n\nWith multiple axes, be explicit and prefer the first snippet to the second. See below.\n\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nax.plot([1, 2, 3, 4], [10, 20, 25, 30], color='lightblue', linewidth=3)\nax.scatter([0.3, 3.8, 1.2, 2.5], [11, 25, 9, 26], color='darkgreen', marker='^')\nax.set_xlim(0.5, 4.5)\n\nplt.show()\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4], [10, 20, 25, 30], color='lightblue', linewidth=3)\nplt.scatter([0.3, 3.8, 1.2, 2.5], [11, 25, 9, 26], color='darkgreen', marker='^')\nplt.xlim(0.5, 4.5)\n\nplt.show()\n\n\n\n\n\n\n\n\nEach Axes has an x-axis and a y-axis, which contain ticks, which have major and minor ticklines and ticklabels.\n\n\nThe axis labels, title, and legend.\n\n\nSpines are lines that connect the axis tick marks and that designate the boundaries of the data area. The right and top spines are set to invisible.\n\n\n\n\n\n\n\n\nEverything drawn using \nmatplotlib\n is part of the Artist module. The containers to plot the data, such as Axis, Axes, and Figure, and other graphical objects such as text, patches, etc.\n\n\nGALLERY\n.\n\n\n\n\nmatplotlib\n, \npyplot\n and \npylab\n: how are they related?\n\u00b6\n\n\npyplot\n is a module in \nmatplotlib\n to implicitly and automatically create figures and axes. Everything can be customized though.\n\n\n%pylab\n and \n%pylab inline\n import \npyplot\n and \nnumpy\n. \n%matplotlib\n and \n%matplotlib inline\n import \npyplot\n.\n\n\nmatplotlib\n can save images to the local file system.\n\n\nCreate a Plot\n\u00b6\n\n\n# Import `pyplot`\nimport matplotlib.pyplot as plt\n\n# Initialize a Figure \nfig = plt.figure()\n\n# Add Axes to the Figure\nfig.add_axes([0,0,1,1])\n\n\n\n\n<matplotlib.axes._axes.Axes at 0x7f796d5c7ac8>\n\n\n\n\n\nA Subplot\n\u00b6\n\n\nAxes and subplot are synonymous. There is, however, a difference between the \nadd_axes()\n and the \nadd_subplots()\n function.\n\n\n# Import the necessary packages and modules\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a Figure\nfig = plt.figure()\n\n# Set up Axes\nax = fig.add_subplot(111)\n\n# Scatter the data\nax.scatter(np.linspace(0, 1, 5), np.linspace(0, 5, 5))\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n111\n designates the number of rows (1), the number of columns (1) and the plot number (1); it means one subplot.\n\n\n# Create a Figure\nfig = plt.figure()\n\n# Set up Axes of no 1\nax = fig.add_subplot(121)\n\n# Scatter the data\nax.scatter(np.linspace(0, 1, 5), np.linspace(0, 5, 5))\n\n# Set up Axes of no 2\nax = fig.add_subplot(122)\n\n# Scatter the data\nax.scatter(np.linspace(0, 1, 5), np.linspace(0, 5, 5))\n\n# Show the plots\nplt.show()\n\n\n\n\n\n\nThe Difference Between \nadd_axes()\n and \nadd_subplot()\n\u00b6\n\n\n\n\nadd_axes()\n is the lower left point, the width, and the height. In cases where the positioning matters.\n\n\nadd_subplot()\n is a grid: the number of rows, columns, and the plot number.\n\n\n\n\nChange the Size of Figures\n\u00b6\n\n\nplt.figure(figsize=(3,4))\n for the width and height in inches.\n\n\nimport matplotlib.pyplot as plt\n\n# Initialize the plot\nfig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\n\nax1.bar([1,2,3],[3,4,5])\nax2.barh([0.5,1,2.5],[0,1,2])\n\nplt.show()\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\n# Initialize the plot\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(20,10))\n\nax1.bar([1,2,3],[3,4,5])\nax2.barh([0.5,1,2.5],[0,1,2])\n\nplt.show()\n\n\n\n\n\n\nWorking With Pyplot: Plotting Routines\n\u00b6\n\n\nCommon plots.\n\n\n\n\nax.bar()\n: Vertical rectangles.\n\n\nax.barh()\n: Horizontal rectangles.\n\n\nax.axhline()\n: Horizontal line across axes.\n\n\nax.axvline()\n: Vertical line across axes.\n\n\nax.fill()\n: Filled polygons.\n\n\nax.fill_between()\n: Fill between y-values and 0 (area plot).\n\n\nax.stackplot()\n: Stack plot.\n\n\n\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(231)\nax2 = fig.add_subplot(232)\nax3 = fig.add_subplot(233)\nax4 = fig.add_subplot(234)\nax5 = fig.add_subplot(235)\nax6 = fig.add_subplot(236)\n\nax1.bar([1,2,3],[3,4,5])\nax1.axvline(1.65, color='red', linewidth=2)\n\nax2.barh([0.5,1,2.5],[0,1,2])\nax2.axhline(1.45, color='red', linewidth=2)\n\nax3.scatter([1,2,3],[3,4,8], marker='^')\n\nax4.plot([1, 2, 3, 4], [10, 20, 25, 30], color='lightblue', linewidth=3)\n\nax5.fill_between([1,2,3],[3,4,8])\n\nax6.stackplot([1,2,3],[3,4,8])\n\nplt.show()\n\n\n\n\n\n\nSpecialized plots.\n\n\n\n\nax.arrow()\n: Arrow.\n\n\nax.quiver()\n: 2D field of arrows.\n\n\nax.streamplot()\n: 2D vector fields.\n\n\nax.hist()\n: Histogram.\n\n\nax.boxplot()\n: Boxplot.\n\n\nax.violinplot()\n: Violinplot.\n\n\n\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(231)\nax2 = fig.add_subplot(232)\nax3 = fig.add_subplot(233)\nax4 = fig.add_subplot(234)\nax5 = fig.add_subplot(235)\nax6 = fig.add_subplot(236)\n\nax1.arrow(0, 0, 0.5, 0.5, head_width=0.05, head_length=0.1, fc='k', ec='k')\n\nX, Y = np.meshgrid(np.arange(0, 2 * np.pi, .2), np.arange(0, 2 * np.pi, .2))\nU = np.cos(X)\nV = np.sin(Y)\nax2.quiver(X, Y, U, V, units='width')\n\nY, X = np.mgrid[-3:3:100j, -3:3:100j]\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nspeed = np.sqrt(U*U + V*V)\nax3.streamplot(X, Y, U, V, color=U)\n\nax4.hist(np.random.rand(50) * 100)\n\nax5.boxplot(np.random.rand(50) * 100)\n\nax6.violinplot(np.random.rand(50) * 100)\n\nplt.show()\n\n\n\n\n\n\nAnd more specialized plots.\n\n\n\n\nax.pcolor()\n: Pseudocolor plot.\n\n\nax.pcolormesh()\n: Pseudocolor plot.\n\n\nax.contour()\n: Contour plot.\n\n\nax.contourf()\n: Filled contour plot.\n\n\nax.clabel()\n: Labeled contour plot.\n\n\n\n\nContour plots are used to explore the potential relationship between three variables. Pseudocolor plots can be used for this purpose since they are surface plot seen from above. \n\n\nCustomize \npyplot\n\u00b6\n\n\nSee the online plot \nGallery\n\n\nDelete an Axis\n\u00b6\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132)\nax3 = fig.add_subplot(133)\n\nax1.bar([1,2,3],[3,4,5])\nax1.axvline(0.65, color='red')\n\nax2.barh([0.5,1,2.5],[0,1,2])\nax2.axhline(0.45, color='red')\n\nax3.scatter(np.linspace(0, 1, 5), np.linspace(0, 5, 5))\n\n# Delete `ax3` !!! (add them back further down)\nfig.delaxes(ax3)\n\nplt.show()\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132)\nax3 = fig.add_subplot(133)\n\nax1.bar([1,2,3],[3,4,5])\nax1.axvline(0.65, color='red')\n\nax2.barh([0.5,1,2.5],[0,1,2])\nax2.axhline(0.45, color='red')\n\nax3.scatter(np.linspace(0, 1, 5), np.linspace(0, 5, 5))\n\n# Delete `ax3` !!!\nfig.delaxes(ax3)\n# Add them back !!!\nfig.add_axes(ax3)\n\nplt.show()\n\n\n\n\n\n\nPut the Legend out of the Plot\n\u00b6\n\n\nlegend()\n with many options.\n\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\nax.bar([1,2,3],[3,4,5], width=0.2, align='center', label=\"test1\")\nax.bar([1.2,2.2,3.2],[4,5,3], color='darkgreen', width=0.2, align='center', label=\"test2\")\n\nax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.2)\n\nplt.show()\n\n\n\n\n\n\nSet Plot Title and Axes Labels\n\u00b6\n\n\n\n\nax.set(title=\"A title\", xlabel=\"x\", ylabel=\"y\")\n or \nax.set_xlim()\n, \nax.set_ylim()\n or \nax.set_title()\n. \n\n\nplt.title()\n, \nplt.xlabel()\n, \nplt.ylabel()\n.\n\n\n\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\nax.bar([1,2,3],[3,4,5], width=0.2, align='center', label=\"test1\")\nax.bar([1.2,2.2,3.2],[4,5,3], color='darkgreen', width=0.2, align='center', label=\"test2\")\n\nax.set(title=\"A title\", xlabel=\"x-axis\", ylabel=\"y-axis\")\n\nplt.show()\n\n\n\n\n\n\nSet the Plot Layout\n\u00b6\n\n\n\n\nplt.tight_layout()\n before \nplt.show()\n.\n\n\nsubplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)\n, which allows to manually set the width and height reserved for blank space between subplots, and also fix the left and right sides, and the top and bottom of the subplots.\n\n\n\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\nax.bar([1,2,3],[3,4,5], width=0.2, align='center', label=\"test1\")\nax.bar([1.2,2.2,3.2],[4,5,3], color='darkgreen', width=0.2, align='center', label=\"test2\")\n\nplt.tight_layout()         \nplt.show()\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(15,7))\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\n\nax1.bar([1,2,3],[3,4,5])\nax1.axvline(0.65, color='red')\n\nax2.barh([0.5,1,2.5],[0,1,2])\nax2.axhline(0.45, color='red')\n\nplt.subplots_adjust(top=0.9)\nplt.show()\n\n\n\n\n\n\nShow, Save, and Close the Plot\n\u00b6\n\n\n# Import the necessary packages and modules\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Prepare the data\nx = np.linspace(0, 10, 100)\n\n# Plot the data\nplt.plot(x, x, label='linear')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nSave a Plot to an Image File\n\u00b6\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\n\nplt.plot(x, x, label='linear')\n\nplt.legend()\n\n# Save Figure\nplt.savefig(\"foo1.png\")\n\n# Save Transparent (alpha layer) Figure\nplt.savefig(\"foo2.png\", transparent=True)\n\n\n\n\n\n\nBring back the image:\n\n\nfoo1.png: \n\n\nSave a Plot to a Pdf File\n\u00b6\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.backends.backend_pdf import PdfPages\n\nx = np.linspace(0, 10, 100)\n\nplt.plot(x, x, label='linear')\n\nplt.legend()\n\n# Initialize the pdf file\npp = PdfPages('multipage.pdf')\n\n# Save the figure to the file\npp.savefig()\n\n# Close the file\npp.close()\n\n\n\n\n\n\nUse \ncla()\n, \nclf()\n or \nclose()\n\u00b6\n\n\nTell \nmatplotlib\n to close down the plot and move on. When plotting in a pop-up window.\n\n\n\n\nplt.cla()\n to clear an axis.\n\n\nplt.clf()\n to clear the entire figure.\n\n\nplt.close()\n to close a window that has popped up to show the plot.\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 1\nx = np.linspace(0, 10, 100)\n\nplt.plot(x, x, label='linear')\n\nplt.legend()\n\nplt.show()\n\n# 2\nx = np.linspace(0, 20, 100)\n\nplt.plot(x, x, label='linear', color='red')\n\nplt.legend()\n\nplt.show()\n\n\n\n\n\n\n\n\nCustomizing Matplotlib\n\u00b6\n\n\nCustomizing\n \nmatplotlib\n.\n\n\nUse a ggplot2 Style\n\u00b6\n\n\n# Import `pyplot` \nimport matplotlib.pyplot as plt\n\n# Set the style to `ggplot`\nplt.style.use(\"ggplot\")\n\nx = np.linspace(0, 10, 100)\n\nplt.plot(x, x, label='linear')\n\nplt.legend()\n\nplt.show()\n\nplt.style.use(\"default\")\n\n\n\n\n\n\nrc Settings\n\u00b6\n\n\nAutomatically \nr\nun and \nc\nonfigure settings.\n\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Uncomment following line to see the effect \nmpl.rcParams['lines.linewidth'] = 5\n\nx = np.linspace(0, 10, 100)\n\nplt.plot(x, x, label='linear')\n\nplt.legend()\n\nplt.show()\n\nmpl.rcParams['lines.linewidth'] = 1\n\n\n\n\n\n\nTo work more statically, there is a \nmatplotlibrc\n configuration file which  can be used to customize all kinds of properties.\n\n\nimport matplotlib\n\nmatplotlib.matplotlib_fname()\n\n\n\n\nRun the commands, go to the subdir indicated by the result, pull up the file, change the parameters, save the file and see the results on the next plots.",
            "title": "Matplotlib, Python Plotting"
        },
        {
            "location": "/Matplotlib, Python Plotting/#matplotlib-pyplot-and-pylab-how-are-they-related",
            "text": "pyplot  is a module in  matplotlib  to implicitly and automatically create figures and axes. Everything can be customized though.  %pylab  and  %pylab inline  import  pyplot  and  numpy .  %matplotlib  and  %matplotlib inline  import  pyplot .  matplotlib  can save images to the local file system.",
            "title": "matplotlib, pyplot and pylab: how are they related?"
        },
        {
            "location": "/Matplotlib, Python Plotting/#create-a-plot",
            "text": "# Import `pyplot`\nimport matplotlib.pyplot as plt\n\n# Initialize a Figure \nfig = plt.figure()\n\n# Add Axes to the Figure\nfig.add_axes([0,0,1,1])  <matplotlib.axes._axes.Axes at 0x7f796d5c7ac8>",
            "title": "Create a Plot"
        },
        {
            "location": "/Matplotlib, Python Plotting/#a-subplot",
            "text": "Axes and subplot are synonymous. There is, however, a difference between the  add_axes()  and the  add_subplots()  function.  # Import the necessary packages and modules\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a Figure\nfig = plt.figure()\n\n# Set up Axes\nax = fig.add_subplot(111)\n\n# Scatter the data\nax.scatter(np.linspace(0, 1, 5), np.linspace(0, 5, 5))\n\n# Show the plot\nplt.show()   111  designates the number of rows (1), the number of columns (1) and the plot number (1); it means one subplot.  # Create a Figure\nfig = plt.figure()\n\n# Set up Axes of no 1\nax = fig.add_subplot(121)\n\n# Scatter the data\nax.scatter(np.linspace(0, 1, 5), np.linspace(0, 5, 5))\n\n# Set up Axes of no 2\nax = fig.add_subplot(122)\n\n# Scatter the data\nax.scatter(np.linspace(0, 1, 5), np.linspace(0, 5, 5))\n\n# Show the plots\nplt.show()",
            "title": "A Subplot"
        },
        {
            "location": "/Matplotlib, Python Plotting/#the-difference-between-add_axes-and-add_subplot",
            "text": "add_axes()  is the lower left point, the width, and the height. In cases where the positioning matters.  add_subplot()  is a grid: the number of rows, columns, and the plot number.",
            "title": "The Difference Between add_axes() and add_subplot()"
        },
        {
            "location": "/Matplotlib, Python Plotting/#change-the-size-of-figures",
            "text": "plt.figure(figsize=(3,4))  for the width and height in inches.  import matplotlib.pyplot as plt\n\n# Initialize the plot\nfig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\n\nax1.bar([1,2,3],[3,4,5])\nax2.barh([0.5,1,2.5],[0,1,2])\n\nplt.show()   import matplotlib.pyplot as plt\n\n# Initialize the plot\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(20,10))\n\nax1.bar([1,2,3],[3,4,5])\nax2.barh([0.5,1,2.5],[0,1,2])\n\nplt.show()",
            "title": "Change the Size of Figures"
        },
        {
            "location": "/Matplotlib, Python Plotting/#working-with-pyplot-plotting-routines",
            "text": "Common plots.   ax.bar() : Vertical rectangles.  ax.barh() : Horizontal rectangles.  ax.axhline() : Horizontal line across axes.  ax.axvline() : Vertical line across axes.  ax.fill() : Filled polygons.  ax.fill_between() : Fill between y-values and 0 (area plot).  ax.stackplot() : Stack plot.   import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(231)\nax2 = fig.add_subplot(232)\nax3 = fig.add_subplot(233)\nax4 = fig.add_subplot(234)\nax5 = fig.add_subplot(235)\nax6 = fig.add_subplot(236)\n\nax1.bar([1,2,3],[3,4,5])\nax1.axvline(1.65, color='red', linewidth=2)\n\nax2.barh([0.5,1,2.5],[0,1,2])\nax2.axhline(1.45, color='red', linewidth=2)\n\nax3.scatter([1,2,3],[3,4,8], marker='^')\n\nax4.plot([1, 2, 3, 4], [10, 20, 25, 30], color='lightblue', linewidth=3)\n\nax5.fill_between([1,2,3],[3,4,8])\n\nax6.stackplot([1,2,3],[3,4,8])\n\nplt.show()   Specialized plots.   ax.arrow() : Arrow.  ax.quiver() : 2D field of arrows.  ax.streamplot() : 2D vector fields.  ax.hist() : Histogram.  ax.boxplot() : Boxplot.  ax.violinplot() : Violinplot.   import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(231)\nax2 = fig.add_subplot(232)\nax3 = fig.add_subplot(233)\nax4 = fig.add_subplot(234)\nax5 = fig.add_subplot(235)\nax6 = fig.add_subplot(236)\n\nax1.arrow(0, 0, 0.5, 0.5, head_width=0.05, head_length=0.1, fc='k', ec='k')\n\nX, Y = np.meshgrid(np.arange(0, 2 * np.pi, .2), np.arange(0, 2 * np.pi, .2))\nU = np.cos(X)\nV = np.sin(Y)\nax2.quiver(X, Y, U, V, units='width')\n\nY, X = np.mgrid[-3:3:100j, -3:3:100j]\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nspeed = np.sqrt(U*U + V*V)\nax3.streamplot(X, Y, U, V, color=U)\n\nax4.hist(np.random.rand(50) * 100)\n\nax5.boxplot(np.random.rand(50) * 100)\n\nax6.violinplot(np.random.rand(50) * 100)\n\nplt.show()   And more specialized plots.   ax.pcolor() : Pseudocolor plot.  ax.pcolormesh() : Pseudocolor plot.  ax.contour() : Contour plot.  ax.contourf() : Filled contour plot.  ax.clabel() : Labeled contour plot.   Contour plots are used to explore the potential relationship between three variables. Pseudocolor plots can be used for this purpose since they are surface plot seen from above.",
            "title": "Working With Pyplot: Plotting Routines"
        },
        {
            "location": "/Matplotlib, Python Plotting/#customize-pyplot",
            "text": "See the online plot  Gallery",
            "title": "Customize pyplot"
        },
        {
            "location": "/Matplotlib, Python Plotting/#delete-an-axis",
            "text": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132)\nax3 = fig.add_subplot(133)\n\nax1.bar([1,2,3],[3,4,5])\nax1.axvline(0.65, color='red')\n\nax2.barh([0.5,1,2.5],[0,1,2])\nax2.axhline(0.45, color='red')\n\nax3.scatter(np.linspace(0, 1, 5), np.linspace(0, 5, 5))\n\n# Delete `ax3` !!! (add them back further down)\nfig.delaxes(ax3)\n\nplt.show()   import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132)\nax3 = fig.add_subplot(133)\n\nax1.bar([1,2,3],[3,4,5])\nax1.axvline(0.65, color='red')\n\nax2.barh([0.5,1,2.5],[0,1,2])\nax2.axhline(0.45, color='red')\n\nax3.scatter(np.linspace(0, 1, 5), np.linspace(0, 5, 5))\n\n# Delete `ax3` !!!\nfig.delaxes(ax3)\n# Add them back !!!\nfig.add_axes(ax3)\n\nplt.show()",
            "title": "Delete an Axis"
        },
        {
            "location": "/Matplotlib, Python Plotting/#put-the-legend-out-of-the-plot",
            "text": "legend()  with many options.  import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\nax.bar([1,2,3],[3,4,5], width=0.2, align='center', label=\"test1\")\nax.bar([1.2,2.2,3.2],[4,5,3], color='darkgreen', width=0.2, align='center', label=\"test2\")\n\nax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.2)\n\nplt.show()",
            "title": "Put the Legend out of the Plot"
        },
        {
            "location": "/Matplotlib, Python Plotting/#set-plot-title-and-axes-labels",
            "text": "ax.set(title=\"A title\", xlabel=\"x\", ylabel=\"y\")  or  ax.set_xlim() ,  ax.set_ylim()  or  ax.set_title() .   plt.title() ,  plt.xlabel() ,  plt.ylabel() .   import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\nax.bar([1,2,3],[3,4,5], width=0.2, align='center', label=\"test1\")\nax.bar([1.2,2.2,3.2],[4,5,3], color='darkgreen', width=0.2, align='center', label=\"test2\")\n\nax.set(title=\"A title\", xlabel=\"x-axis\", ylabel=\"y-axis\")\n\nplt.show()",
            "title": "Set Plot Title and Axes Labels"
        },
        {
            "location": "/Matplotlib, Python Plotting/#set-the-plot-layout",
            "text": "plt.tight_layout()  before  plt.show() .  subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None) , which allows to manually set the width and height reserved for blank space between subplots, and also fix the left and right sides, and the top and bottom of the subplots.   import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\nax.bar([1,2,3],[3,4,5], width=0.2, align='center', label=\"test1\")\nax.bar([1.2,2.2,3.2],[4,5,3], color='darkgreen', width=0.2, align='center', label=\"test2\")\n\nplt.tight_layout()         \nplt.show()   import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(15,7))\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\n\nax1.bar([1,2,3],[3,4,5])\nax1.axvline(0.65, color='red')\n\nax2.barh([0.5,1,2.5],[0,1,2])\nax2.axhline(0.45, color='red')\n\nplt.subplots_adjust(top=0.9)\nplt.show()",
            "title": "Set the Plot Layout"
        },
        {
            "location": "/Matplotlib, Python Plotting/#show-save-and-close-the-plot",
            "text": "# Import the necessary packages and modules\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Prepare the data\nx = np.linspace(0, 10, 100)\n\n# Plot the data\nplt.plot(x, x, label='linear')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()",
            "title": "Show, Save, and Close the Plot"
        },
        {
            "location": "/Matplotlib, Python Plotting/#save-a-plot-to-an-image-file",
            "text": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\n\nplt.plot(x, x, label='linear')\n\nplt.legend()\n\n# Save Figure\nplt.savefig(\"foo1.png\")\n\n# Save Transparent (alpha layer) Figure\nplt.savefig(\"foo2.png\", transparent=True)   Bring back the image:  foo1.png:",
            "title": "Save a Plot to an Image File"
        },
        {
            "location": "/Matplotlib, Python Plotting/#save-a-plot-to-a-pdf-file",
            "text": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.backends.backend_pdf import PdfPages\n\nx = np.linspace(0, 10, 100)\n\nplt.plot(x, x, label='linear')\n\nplt.legend()\n\n# Initialize the pdf file\npp = PdfPages('multipage.pdf')\n\n# Save the figure to the file\npp.savefig()\n\n# Close the file\npp.close()",
            "title": "Save a Plot to a Pdf File"
        },
        {
            "location": "/Matplotlib, Python Plotting/#use-cla-clf-or-close",
            "text": "Tell  matplotlib  to close down the plot and move on. When plotting in a pop-up window.   plt.cla()  to clear an axis.  plt.clf()  to clear the entire figure.  plt.close()  to close a window that has popped up to show the plot.   import matplotlib.pyplot as plt\nimport numpy as np\n\n# 1\nx = np.linspace(0, 10, 100)\n\nplt.plot(x, x, label='linear')\n\nplt.legend()\n\nplt.show()\n\n# 2\nx = np.linspace(0, 20, 100)\n\nplt.plot(x, x, label='linear', color='red')\n\nplt.legend()\n\nplt.show()",
            "title": "Use cla(), clf() or close()"
        },
        {
            "location": "/Matplotlib, Python Plotting/#customizing-matplotlib",
            "text": "Customizing   matplotlib .",
            "title": "Customizing Matplotlib"
        },
        {
            "location": "/Matplotlib, Python Plotting/#use-a-ggplot2-style",
            "text": "# Import `pyplot` \nimport matplotlib.pyplot as plt\n\n# Set the style to `ggplot`\nplt.style.use(\"ggplot\")\n\nx = np.linspace(0, 10, 100)\n\nplt.plot(x, x, label='linear')\n\nplt.legend()\n\nplt.show()\n\nplt.style.use(\"default\")",
            "title": "Use a ggplot2 Style"
        },
        {
            "location": "/Matplotlib, Python Plotting/#rc-settings",
            "text": "Automatically  r un and  c onfigure settings.  import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Uncomment following line to see the effect \nmpl.rcParams['lines.linewidth'] = 5\n\nx = np.linspace(0, 10, 100)\n\nplt.plot(x, x, label='linear')\n\nplt.legend()\n\nplt.show()\n\nmpl.rcParams['lines.linewidth'] = 1   To work more statically, there is a  matplotlibrc  configuration file which  can be used to customize all kinds of properties.  import matplotlib\n\nmatplotlib.matplotlib_fname()  Run the commands, go to the subdir indicated by the result, pull up the file, change the parameters, save the file and see the results on the next plots.",
            "title": "rc Settings"
        },
        {
            "location": "/Viewing+3D+Volumetric+Data+With+Matplotlib/",
            "text": "CONTENT\n\n\nContent\n\n\nInterlude: Getting The Data\u2026\n\n\nDownload the Data\n\n\n\n\n\n\n\u2026 Back To Plotting\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\nSome images can only be simulated with Jupyter since the images are interactive.\n\n\n\n\nContent\n\u00b6\n\n\nImage data can be taken with ordinary cameras (these are often called \u201cnatural images\u201d in the scientific literature) or with specialized instruments, such as microscopes or telescopes.\n\n\nThe most common way to display them is using the \nimshow\n function of Matplotlib.\n\n\nFor example, magnetic resonance imaging (MRI) and computed tomography (CT) scans measure the 3D structure inside the human body; X-ray microtomography measures the 3D structure inside materials such as glass, or metal alloys; and light-sheet microscopes measure fluorescent particles inside biological tissues.\n\n\nEnable the interactive matplotlib mode.\n\n\nOther applications: spatial analysis (visualization over time), maps (layers of a neighbourhood over time), etc. \n\n\n%matplotlib notebook\n\n\n\n\nWhen running matplotlib in the interactive notebook mode, the open figure remains the only active figure until disabled, using the power symbol on the top-right of the figure. Do that before moving on from each plot.\n\n\nimport matplotlib.pyplot as plt\nfrom skimage import data\n\nastronaut = data.astronaut()\nihc = data.immunohistochemistry()\nhubble = data.hubble_deep_field()\n\n# Initialize the subplot panels side by side\nfig, ax = plt.subplots(nrows=1, ncols=3)\n\n# Show an image in each subplot\nax[0].imshow(astronaut)\nax[0].set_title('Natural image')\nax[1].imshow(ihc)\nax[1].set_title('Microscopy image')\nax[2].imshow(hubble)\nax[2].set_title('Telescope image');\n\n\n\n\n>>> Interactive images here! <<<\n\n\nThese images are called 2-dimensional or 2D images. Some images are 3D, in that they have an additional depth dimension (z, or planes). These include magnetic resonance imaging (MRI) and serial section transmission electron microscopy (ssTEM), in which a sample is thinly sliced, like a salami, and each of the slices is imaged separately.\n\n\nimport nibabel\n\n\n\n\nInterlude: Getting The Data\u2026\n\u00b6\n\n\nDataset source: Buchel and Friston, Cortical Interactions Evaluated with Structural Equation Modelling and fMRI (1997).\n\n\nimport tempfile\n\n# Create a temporary directory\nd = tempfile.mkdtemp()\n\nprint(d)\n\n\n\n\n/tmp/tmp8xdzu1ad\n\n\n\nimport os\n\nos.chdir('/home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial')\nprint(os.getcwd())\n\n\n\n\n/home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial\n\n\n\nd = os.getcwd()\nprint(d)\n\n\n\n\n/home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial\n\n\n\n# Return the tail of the path\nos.path.basename('http://google.com/attention.zip')\n\n\n\n\n'attention.zip'\n\n\n\nDownload the Data\n\u00b6\n\n\nfrom urllib.request import urlretrieve\n\n# Define URL\nurl = 'http://www.fil.ion.ucl.ac.uk/spm/download/data/attention/attention.zip'\n\n# Retrieve the data\nfn, info = urlretrieve(url, os.path.join(d, 'attention.zip'))\n\n\n\n\nExtract it from the zip file to our temporary directory.\n\n\nimport zipfile\n\n# Extract the contents into the temporary directory we created earlier\nzipfile.ZipFile(fn).extractall(path=d)\n\n# List first 10 files\n[f.filename for f in zipfile.ZipFile(fn).filelist[:10]]\n\n\n\n\n['attention/',\n 'attention/multi_block_regressors.mat',\n 'attention/README_DATA.txt',\n 'attention/factors.mat',\n 'attention/functional/',\n 'attention/functional/snffM00587_0201.hdr',\n 'attention/functional/snffM00587_0040.img',\n 'attention/functional/snffM00587_0458.hdr',\n 'attention/functional/snffM00587_0185.img',\n 'attention/functional/snffM00587_0018.hdr']\n\n\n\nThese are in the NIfTI file format. \n\n\nnibabel\n library provides the reader. \n\n\nInstall it with either: \nconda install -c conda-forge nibabel\n or \npip install nibabel\n.\n\n\nimport nibabel\n\n# Read the image \nstruct = nibabel.load(os.path.join(d, 'attention/structural/nsM00587_0002.hdr'))\n\n# Get a plain NumPy array, without all the metadata\nstruct_arr = struct.get_data()\n\n# Plot the MRI data\nfrom skimage import io\n\nstruct_arr = io.imread(\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/attention-mri.tif\")\n\nplt.imshow(struct_arr[75])\n\n\n\n\n>>> Interactive images here! <<<\n\n\n\u2026 Back To Plotting\n\u00b6\n\n\n# fix the aspect parameter\nplt.imshow(struct_arr[75], aspect=0.5)\n\n# transpose the data\n# horizontal slices\nstruct_arr2 = struct_arr.T\nplt.imshow(struct_arr2[34])\n\n# slice along a different axis\nplt.imshow(struct_arr2[5])\n\n\n\n\n>>> Interactive images here! <<<\n\n\nExplore 3D data within Python, minimizing the need to switch contexts between data exploration and data analysis.\n\n\nThe key is to use the matplotlibevent handler API.\n\n\nhttps://matplotlib.org/users/event_handling.html\n\n\nBind the J and K keys on the keyboard to previous slice and next slice.\n\n\ndef previous_slice():\n    pass\n\ndef next_slice():\n    pass\n\ndef process_key(event):\n    if event.key == 'j':\n        previous_slice()\n    elif event.key == 'k':\n        next_slice()\n\n\n\n\nUse the \nprocess_key\n function to process keyboard presses and the figure canvas method \nmpl_connect\n.\n\n\nfig, ax = plt.subplots()\nax.imshow(struct_arr[..., 43])\nfig.canvas.mpl_connect('key_press_event', process_key)\n\n\n\n\n>>> Interactive images here! <<<\n\n\nimshow\n returns an \nAxesImage\n object, which lives inside the matplotlib \nAxes\n object where all the drawing takes place, in its \n.images\n attribute. This object provides a convenient \nset_array\n method that swaps out the image.\n\n\ndef multi_slice_viewer(volume):\n    fig, ax = plt.subplots()\n    ax.volume = volume\n    ax.index = volume.shape[0] // 2\n    ax.imshow(volume[ax.index])\n    fig.canvas.mpl_connect('key_press_event', process_key)\n\ndef process_key(event):\n    fig = event.canvas.figure\n    ax = fig.axes[0]\n    if event.key == 'j':\n        previous_slice(ax)\n    elif event.key == 'k':\n        next_slice(ax)\n    fig.canvas.draw()\n\ndef previous_slice(ax):\n    \"\"\"Go to the previous slice.\"\"\"\n    volume = ax.volume\n    ax.index = (ax.index - 1) % volume.shape[0]  # wrap around using %\n    ax.images[0].set_array(volume[ax.index])\n\ndef next_slice(ax):\n    \"\"\"Go to the next slice.\"\"\"\n    volume = ax.volume\n    ax.index = (ax.index + 1) % volume.shape[0]\n    ax.images[0].set_array(volume[ax.index])\n\n\n\n\nGo!\n\n\nmulti_slice_viewer(struct_arr2)\n\n\n\n\n>>> Interactive images here! <<<\n\n\nMatplotlib simply piles them on on top of each other.\n\n\nK is a built-in keyboard shortcut to change the x-axis to use a logarithmic scale.\n\nIf we want to use K exclusively, we have to remove it from matplotlib\u2019s default\n\nkey maps.\n\n\nThese live as lists in the \nplt.rcParams\n dictionary, which is matplotlib\u2019s \n\nrepository for default system-wide settings:\n\n\nplt.rcParams['keymap.<command>'] = ['<key1>', '<key2>']\n \n\nwhere pressing any of the keys in the list (i.e. \n<key1>\n or \n<key2>\n) \n\nwill cause \n<command>\n to be executed.\n\n\nLet\u2019s rewrite the function.\n\n\ndef multi_slice_viewer(volume):\n    remove_keymap_conflicts({'j', 'k'})\n    fig, ax = plt.subplots()\n    ax.volume = volume\n    ax.index = volume.shape[0] // 2\n    ax.imshow(volume[ax.index])\n    fig.canvas.mpl_connect('key_press_event', process_key)\n\ndef process_key(event):\n    fig = event.canvas.figure\n    ax = fig.axes[0]\n    if event.key == 'j':\n        previous_slice(ax)\n    elif event.key == 'k':\n        next_slice(ax)\n    fig.canvas.draw()\n\ndef previous_slice(ax):\n    volume = ax.volume\n    ax.index = (ax.index - 1) % volume.shape[0]  # wrap around using %\n    ax.images[0].set_array(volume[ax.index])\n\ndef next_slice(ax):\n    volume = ax.volume\n    ax.index = (ax.index + 1) % volume.shape[0]\n    ax.images[0].set_array(volume[ax.index])\n\n\n\n\nWe should be able to view all the slices in our MRI volume without pesky interference from the default keymap! \n\nOne nice feature about this method is that it works on any matplotlib backend!\n\n\nSo, in the IPython terminal console, we will still get the same interaction as we did in the browser! \n\nAnd the same is true for a Qt or Tkinter app embedding a matplotlib plot.\n\n\nThis simple tool therefore lets us build ever more complex applications \n\naround matplotlib\u2019s visualization capabilities.\n\n\n#multi_slice_viewer(struct_arr2)\n\n\n\n\nDelete the temporary directory.\n\n\nd = tempfile.mkdtemp()\n\nprint(d)\n\n\n\n\n/tmp/tmpyylc3632\n\n\n\nimport shutil\n\n# Remove the temporary directory\nshutil.rmtree(d)",
            "title": "Viewing 3D Volumetric Data With Matplotlib"
        },
        {
            "location": "/Viewing+3D+Volumetric+Data+With+Matplotlib/#interlude-getting-the-data",
            "text": "Dataset source: Buchel and Friston, Cortical Interactions Evaluated with Structural Equation Modelling and fMRI (1997).  import tempfile\n\n# Create a temporary directory\nd = tempfile.mkdtemp()\n\nprint(d)  /tmp/tmp8xdzu1ad  import os\n\nos.chdir('/home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial')\nprint(os.getcwd())  /home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial  d = os.getcwd()\nprint(d)  /home/ugo/Documents/Notebooks/DataCamp, Matplotlib tutorial  # Return the tail of the path\nos.path.basename('http://google.com/attention.zip')  'attention.zip'",
            "title": "Interlude: Getting The Data\u2026"
        },
        {
            "location": "/Viewing+3D+Volumetric+Data+With+Matplotlib/#download-the-data",
            "text": "from urllib.request import urlretrieve\n\n# Define URL\nurl = 'http://www.fil.ion.ucl.ac.uk/spm/download/data/attention/attention.zip'\n\n# Retrieve the data\nfn, info = urlretrieve(url, os.path.join(d, 'attention.zip'))  Extract it from the zip file to our temporary directory.  import zipfile\n\n# Extract the contents into the temporary directory we created earlier\nzipfile.ZipFile(fn).extractall(path=d)\n\n# List first 10 files\n[f.filename for f in zipfile.ZipFile(fn).filelist[:10]]  ['attention/',\n 'attention/multi_block_regressors.mat',\n 'attention/README_DATA.txt',\n 'attention/factors.mat',\n 'attention/functional/',\n 'attention/functional/snffM00587_0201.hdr',\n 'attention/functional/snffM00587_0040.img',\n 'attention/functional/snffM00587_0458.hdr',\n 'attention/functional/snffM00587_0185.img',\n 'attention/functional/snffM00587_0018.hdr']  These are in the NIfTI file format.   nibabel  library provides the reader.   Install it with either:  conda install -c conda-forge nibabel  or  pip install nibabel .  import nibabel\n\n# Read the image \nstruct = nibabel.load(os.path.join(d, 'attention/structural/nsM00587_0002.hdr'))\n\n# Get a plain NumPy array, without all the metadata\nstruct_arr = struct.get_data()\n\n# Plot the MRI data\nfrom skimage import io\n\nstruct_arr = io.imread(\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/attention-mri.tif\")\n\nplt.imshow(struct_arr[75])  >>> Interactive images here! <<<",
            "title": "Download the Data"
        },
        {
            "location": "/Viewing+3D+Volumetric+Data+With+Matplotlib/#back-to-plotting",
            "text": "# fix the aspect parameter\nplt.imshow(struct_arr[75], aspect=0.5)\n\n# transpose the data\n# horizontal slices\nstruct_arr2 = struct_arr.T\nplt.imshow(struct_arr2[34])\n\n# slice along a different axis\nplt.imshow(struct_arr2[5])  >>> Interactive images here! <<<  Explore 3D data within Python, minimizing the need to switch contexts between data exploration and data analysis.  The key is to use the matplotlibevent handler API.  https://matplotlib.org/users/event_handling.html  Bind the J and K keys on the keyboard to previous slice and next slice.  def previous_slice():\n    pass\n\ndef next_slice():\n    pass\n\ndef process_key(event):\n    if event.key == 'j':\n        previous_slice()\n    elif event.key == 'k':\n        next_slice()  Use the  process_key  function to process keyboard presses and the figure canvas method  mpl_connect .  fig, ax = plt.subplots()\nax.imshow(struct_arr[..., 43])\nfig.canvas.mpl_connect('key_press_event', process_key)  >>> Interactive images here! <<<  imshow  returns an  AxesImage  object, which lives inside the matplotlib  Axes  object where all the drawing takes place, in its  .images  attribute. This object provides a convenient  set_array  method that swaps out the image.  def multi_slice_viewer(volume):\n    fig, ax = plt.subplots()\n    ax.volume = volume\n    ax.index = volume.shape[0] // 2\n    ax.imshow(volume[ax.index])\n    fig.canvas.mpl_connect('key_press_event', process_key)\n\ndef process_key(event):\n    fig = event.canvas.figure\n    ax = fig.axes[0]\n    if event.key == 'j':\n        previous_slice(ax)\n    elif event.key == 'k':\n        next_slice(ax)\n    fig.canvas.draw()\n\ndef previous_slice(ax):\n    \"\"\"Go to the previous slice.\"\"\"\n    volume = ax.volume\n    ax.index = (ax.index - 1) % volume.shape[0]  # wrap around using %\n    ax.images[0].set_array(volume[ax.index])\n\ndef next_slice(ax):\n    \"\"\"Go to the next slice.\"\"\"\n    volume = ax.volume\n    ax.index = (ax.index + 1) % volume.shape[0]\n    ax.images[0].set_array(volume[ax.index])  Go!  multi_slice_viewer(struct_arr2)  >>> Interactive images here! <<<  Matplotlib simply piles them on on top of each other.  K is a built-in keyboard shortcut to change the x-axis to use a logarithmic scale. \nIf we want to use K exclusively, we have to remove it from matplotlib\u2019s default \nkey maps.  These live as lists in the  plt.rcParams  dictionary, which is matplotlib\u2019s  \nrepository for default system-wide settings:  plt.rcParams['keymap.<command>'] = ['<key1>', '<key2>']   \nwhere pressing any of the keys in the list (i.e.  <key1>  or  <key2> )  \nwill cause  <command>  to be executed.  Let\u2019s rewrite the function.  def multi_slice_viewer(volume):\n    remove_keymap_conflicts({'j', 'k'})\n    fig, ax = plt.subplots()\n    ax.volume = volume\n    ax.index = volume.shape[0] // 2\n    ax.imshow(volume[ax.index])\n    fig.canvas.mpl_connect('key_press_event', process_key)\n\ndef process_key(event):\n    fig = event.canvas.figure\n    ax = fig.axes[0]\n    if event.key == 'j':\n        previous_slice(ax)\n    elif event.key == 'k':\n        next_slice(ax)\n    fig.canvas.draw()\n\ndef previous_slice(ax):\n    volume = ax.volume\n    ax.index = (ax.index - 1) % volume.shape[0]  # wrap around using %\n    ax.images[0].set_array(volume[ax.index])\n\ndef next_slice(ax):\n    volume = ax.volume\n    ax.index = (ax.index + 1) % volume.shape[0]\n    ax.images[0].set_array(volume[ax.index])  We should be able to view all the slices in our MRI volume without pesky interference from the default keymap!  \nOne nice feature about this method is that it works on any matplotlib backend!  So, in the IPython terminal console, we will still get the same interaction as we did in the browser!  \nAnd the same is true for a Qt or Tkinter app embedding a matplotlib plot.  This simple tool therefore lets us build ever more complex applications  \naround matplotlib\u2019s visualization capabilities.  #multi_slice_viewer(struct_arr2)  Delete the temporary directory.  d = tempfile.mkdtemp()\n\nprint(d)  /tmp/tmpyylc3632  import shutil\n\n# Remove the temporary directory\nshutil.rmtree(d)",
            "title": "\u2026 Back To Plotting"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/",
            "text": "CONTENT\n\n\nSeaborn vs Matplotlib\n\n\nLoad Data to Construct Seaborn Plots\n\n\nLoading a Built-in Seaborn Data Set\n\n\n\n\n\n\nShow Seaborn Plots\n\n\nUse Seaborn with Matplotlib Defaults\n\n\nUse Seaborn\u2019s Colors as a colormap in Matplotlib?\n\n\nScale Seaborn Plots for other Contexts\n\n\nTemporarily Set the Plot Style\n\n\nSet the Figure Size in Seaborn\n\n\nRotate Label Text in Seaborn\n\n\nSet xlim or ylim in Seaborn\n\n\nSet Log Scale\n\n\nAdd A Title\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nSeaborn vs Matplotlib\n\u00b6\n\n\nSeaborn a complement to Matplotlib and it specifically targets statistical data visualization.\n\n\nWith Seaborn, the plotting functions operate on DataFrames and arrays that contain a whole dataset: colors, the tick marks on the upper and right axes, the style, etc.\n\n\n%pylab inline\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Initialize Figure and Axes object\nfig, ax = plt.subplots()\n\n# Load in data\ntips = pd.read_csv(\"https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv\")\n\n# Create violinplot\nax.violinplot(tips[\"total_bill\"], vert=False)\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load the data\ntips = sns.load_dataset(\"tips\")\n\n# Create violinplot\nsns.violinplot(x = \"total_bill\", data=tips)\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nLoad Data to Construct Seaborn Plots\n\u00b6\n\n\nLoading a Built-in Seaborn Data Set\n\u00b6\n\n\nThe Seaborn data are a GitHun \nrepo\n.\n\n\n# Import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load iris data\niris = sns.load_dataset(\"iris\")\n\n# Construct iris plot\nsns.swarmplot(x=\"species\", y=\"petal_length\", data=iris)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\nSeaborn works best with Pandas DataFrames and arrays that contain a whole data set.\n\n\nShow Seaborn Plots\n\u00b6\n\n\nplt.show()\n\n\n# Import necessarily libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load data\n# built-in Seaborn dataset\ntitanic = sns.load_dataset(\"titanic\")\n\n# Set up a factorplot\ng = sns.factorplot(\"class\", \"survived\", \"sex\",\n                   data=titanic,\n                   kind=\"bar\",\n                   palette=\"muted\",\n                   legend=False)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\nUse Seaborn with Matplotlib Defaults\n\u00b6\n\n\n# Import Matplotlib\nimport matplotlib.pyplot as plt\n\n# Check the available styles\nplt.style.available\n\n\n\n\n['seaborn-dark-palette',\n 'seaborn-ticks',\n 'seaborn-darkgrid',\n 'seaborn-muted',\n 'seaborn-white',\n 'seaborn-pastel',\n 'grayscale',\n 'seaborn-bright',\n '_classic_test',\n 'seaborn-poster',\n 'seaborn-whitegrid',\n 'classic',\n 'seaborn-dark',\n 'seaborn-talk',\n 'bmh',\n 'seaborn-notebook',\n 'ggplot',\n 'seaborn-colorblind',\n 'seaborn-deep',\n 'seaborn',\n 'fivethirtyeight',\n 'dark_background',\n 'seaborn-paper']\n\n\n\n# Use Matplotlib defaults\nplt.style.use(\"classic\")\n\n# Set up a factorplot\ng = sns.factorplot(\"class\", \"survived\", \"sex\",\n                   data=titanic,\n                   kind=\"bar\",\n                   legend=False)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\nplt.style.use(\"ggplot\")\n\n# Set up a factorplot\ng = sns.factorplot(\"class\", \"survived\", \"sex\",\n                   data=titanic,\n                   kind=\"bar\",\n                   legend=False)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\nUse Seaborn\u2019s Colors as a colormap in Matplotlib?\n\u00b6\n\n\n# Import the necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import ListedColormap\n\n# Define a variable N\nN = 500\n\n# Construct the colormap\ncurrent_palette = sns.color_palette(\"muted\", n_colors=5)\ncmap = ListedColormap(sns.color_palette(current_palette).as_hex())\n\n\n# Initialize the data\ndata1 = np.random.randn(N)\ndata2 = np.random.randn(N)\n# Assume that there are 5 possible labels\ncolors = np.random.randint(0,5,N)\n\n\n# Create a scatter plot\nplt.scatter(data1, data2, c=colors, cmap=cmap)\n\n# Add a color bar\nplt.colorbar()\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nScale Seaborn Plots for other Contexts\n\u00b6\n\n\nLarger or smaller plots.\n\n\n\n\n\u201cpaper\u201d,\n\n\n\u201cnotebook\u201d,\n\n\n\u201ctalk\u201d and\n\n\n\u201cposter\u201d\n\n\n\n\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Reset default params\nsns.set()\n\n# Set context to `\"paper\"`\nsns.set_context(\"paper\")\n\n# Load iris data\niris = sns.load_dataset(\"iris\")\n\n# Construct iris plot\nsns.swarmplot(x=\"species\", y=\"petal_length\", data=iris)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\nMore parameters.\n\n\nUse the higher-level \nset()\n function instead of \nset_context()\n to adjust other plot elements.\n\n\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set context to `\"paper\"`\nsns.set_context(\"paper\", \n                font_scale=3, \n                rc={\"font.size\":8,\n                    \"axes.labelsize\":5})\n\n# Load iris data\niris = sns.load_dataset(\"iris\")\n\n# Construct iris plot\nsns.swarmplot(x=\"species\", y=\"petal_length\", data=iris)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Reset default params\nsns.set(rc={\"font.size\":8,\n            \"axes.labelsize\":5})\n\n# Load iris data\niris = sns.load_dataset(\"iris\")\n\n# Construct iris plot\nsns.swarmplot(x=\"species\", y=\"petal_length\", data=iris)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\nAxes-level functions and figure-level functions. \n\n\n\n\nThe ones that operate on the Axes level are, for example, \nregplot()\n, \nboxplot()\n, \nkdeplot()\n, \u2026, \n\n\nwhile the functions that operate on the Figure level are \nlmplot()\n, \nfactorplot()\n, \njointplot()\n, \u2026\n\n\n\n\nThe first group is identified by taking an explicit \nax\n argument and returning an Axes object, while the second group of functions creates plots that potentially include Axes. \n\n\ntips.head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ntotal_bill\n\n      \ntip\n\n      \nsex\n\n      \nsmoker\n\n      \nday\n\n      \ntime\n\n      \nsize\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n16.99\n\n      \n1.01\n\n      \nFemale\n\n      \nNo\n\n      \nSun\n\n      \nDinner\n\n      \n2\n\n    \n\n    \n\n      \n1\n\n      \n10.34\n\n      \n1.66\n\n      \nMale\n\n      \nNo\n\n      \nSun\n\n      \nDinner\n\n      \n3\n\n    \n\n    \n\n      \n2\n\n      \n21.01\n\n      \n3.50\n\n      \nMale\n\n      \nNo\n\n      \nSun\n\n      \nDinner\n\n      \n3\n\n    \n\n    \n\n      \n3\n\n      \n23.68\n\n      \n3.31\n\n      \nMale\n\n      \nNo\n\n      \nSun\n\n      \nDinner\n\n      \n2\n\n    \n\n    \n\n      \n4\n\n      \n24.59\n\n      \n3.61\n\n      \nFemale\n\n      \nNo\n\n      \nSun\n\n      \nDinner\n\n      \n4\n\n    \n\n  \n\n\n\n\n\n\n\n# Set context to `\"paper\"`\nsns.set_context(\"notebook\", \n                font_scale=1,\n                rc={\"font.size\":16,\n                    \"axes.labelsize\":16})\n\n\n\n\nsns.boxplot(x=\"total_bill\", data=tips)\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7f6dc1c721d0>\n\n\n\n\n\nsns.lmplot(x=\"size\", y=\"total_bill\",\n           data=tips,\n           size=7,\n           truncate=True,\n           scatter_kws={\"s\": 100})\n\n\n\n\n<seaborn.axisgrid.FacetGrid at 0x7f6dc1b9a9b0>\n\n\n\n\n\nlmplot()\n returns an object of the type \nFacetGrid\n with underlying figure and array of axes at the \nFacetGrid.fig\n and \nFacetGrid.axes\n arguments.\n\n\nMake customizations to a regression plot constructed with \nregplot()\n on the \nAxes\n level (see below) and make customizations with \nlmplot()\n at the Figure level (see further down).\n\n\nTemporarily Set the Plot Style\n\u00b6\n\n\naxes_style()\n in a \nwith\n statement to temporarily set the plot style.\n\n\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load data\niris = sns.load_dataset(\"iris\")\ntips = sns.load_dataset(\"tips\")\n\n# Set axes style to white for first subplot\nwith sns.axes_style(\"white\"):\n    plt.subplot(211)\n    sns.swarmplot(x=\"species\", y=\"petal_length\", data=iris)\n\n# Initialize the second subplot\nplt.subplot(212)\n\n# Plot violinplot\nsns.violinplot(x = \"total_bill\", data=tips)\n\n# Show the plot                   \nplt.show()\n\n\n\n\n\n\nSet the Figure Size in Seaborn\n\u00b6\n\n\nAxes-level functions: \nplt.subplots()\n function to which we pass the \nfigsize\n argument.\n\n\n# Import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Initialize Figure and Axes object\nfig, ax = plt.subplots(figsize=(10,4))\n\n# Load in the data\niris = sns.load_dataset(\"iris\")\n\n# Create swarmplot\nsns.swarmplot(x=\"species\", y=\"petal_length\", data=iris, ax=ax)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\nFigure-level functions: rely on two parameters to set the Figure size, namely, \nsize\n and \naspect\n.\n\n\n# Import the libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\n# Load data\ntitanic = sns.load_dataset(\"titanic\")\n\n# Set up a factorplot\ng = sns.factorplot(\"class\", \"survived\", \"sex\", \n                   data=titanic, \n                   kind=\"bar\", \n                   size=6, \n                   aspect=2, \n                   palette=\"muted\", \n                   legend=False)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\nRotate Label Text in Seaborn\n\u00b6\n\n\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\n\n# Initialize the data\nx = 10 ** np.arange(1, 10)\ny = x * 2\ndata = pd.DataFrame(data={'x': x, 'y': y})\n\n# Create an lmplot\ngrid = sns.lmplot('x', 'y',\n                  data,\n                  size=7,\n                  truncate=True,\n                  scatter_kws={\"s\": 100})\n\n# Rotate the labels on x-axis\ngrid.set_xticklabels(rotation=30)\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nSet \nxlim\n or \nylim\n in Seaborn\n\u00b6\n\n\nAssign boxplot to a variable \nax\n, which will be a \nmatplotlib.axes._subplots.AxesSubplot\n object.\n\n\n# Import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the data\ntips = sns.load_dataset(\"tips\")\n\n# Create the boxplot\nax = sns.boxplot(x=\"total_bill\", data=tips)\n\n# Set the `xlim`\nax.set(xlim=(0, 100))\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n# Import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the data\ntips = sns.load_dataset(\"tips\")\n\n# Create the boxplot\nax = sns.boxplot(x=\"total_bill\", data=tips)\n\n# Set the `xlim`\nax.set(xlim=(0, 60))\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nFigure-level: access the \nAxes\n object with the help of the \naxes\n argument.\n\n\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\n\n# Initialize the data\nx = 10 ** np.arange(1, 10)\ny = x * 2\ndata = pd.DataFrame(data={'x': x, 'y': y})\n\n# Create lmplot\nlm = sns.lmplot('x', 'y',\n                data,\n                size=7,\n                truncate=True,\n                scatter_kws={\"s\": 100})\n\n# Get hold of the `Axes` objects\naxes = lm.ax\n\n# Tweak the `Axes` properties\naxes.set_ylim(-1000000000,)\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nFigure-level: \nFacetGrid\n exposes the underlying figure with the help of the \nfig\n argument.\n\n\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\n\n# Initialize the data\nx = 10 ** np.arange(1, 10)\ny = x * 2\ndata = pd.DataFrame(data={'x': x, 'y': y})\n\n# Create lmplot\nlm = sns.lmplot('x', 'y',\n                data,\n                size=7,\n                truncate=True,\n                scatter_kws={\"s\": 100})\n\n# Access the Figure\nfig = lm.fig \n\n# Add a title to the Figure\nfig.suptitle('this is the figure title', fontsize=12)\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nSet Log Scale\n\u00b6\n\n\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\n\n# Create the data\nx = 10 ** np.arange(1, 10)\ny = x * 2\ndata = pd.DataFrame(data={'x': x, 'y': y})\n\n# Initialize figure and ax\nfig, ax = plt.subplots()\n\n# Set the scale of the x-and y-axes\nax.set(xscale=\"log\", yscale=\"log\")\n\n# Create a regplot\nsns.regplot(\"x\", \"y\",\n            data,\n            ax=ax,\n            scatter_kws={\"s\": 100})\n\n# Show plot\nplt.show()\n\n\n\n\n\n\nFigure-level: set the \nxscale\n and \nyscale\n properties with the help of the \nset()\n method of the \nFacetGrid\n object.\n\n\n# Import the libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\n# Load data\ntitanic = sns.load_dataset(\"titanic\")\n\n# Set up a factorplot\ng = sns.factorplot(\"class\", \"survived\", \"sex\",\n                   data=titanic,\n                   kind=\"bar\",\n                   size=6,\n                   palette=\"muted\",\n                   legend=False)\n\n# Set the `yscale`\ng.set(yscale=\"log\")\n\n# Show plot\nplt.show()\n\n\n\n\n\n\nAdd A Title\n\u00b6\n\n\nAxes-level: \nset_title()\n.\n\n\n# Import the libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\ntips = sns.load_dataset(\"tips\")\n\n# Create the boxplot\nax = sns.boxplot(x=\"total_bill\", data=tips)\n\n# Set title\nax.set_title(\"boxplot\")\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nFigure-level: \nfig\n.\n\n\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\n\n# Load the data\ntips = sns.load_dataset(\"tips\")\n\n# Create scatter plots\ng = sns.FacetGrid(tips, col=\"sex\", row=\"smoker\", margin_titles=True)\ng.map(sns.plt.scatter, \"total_bill\", \"tip\")\n\n# Add a title to the figure\ng.fig.suptitle(\"this is a title\")\n\n# Show the plot\nplt.show()",
            "title": "Seaborn, Python's Statistical Data Visualization Library"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#load-data-to-construct-seaborn-plots",
            "text": "",
            "title": "Load Data to Construct Seaborn Plots"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#loading-a-built-in-seaborn-data-set",
            "text": "The Seaborn data are a GitHun  repo .  # Import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load iris data\niris = sns.load_dataset(\"iris\")\n\n# Construct iris plot\nsns.swarmplot(x=\"species\", y=\"petal_length\", data=iris)\n\n# Show plot\nplt.show()   Seaborn works best with Pandas DataFrames and arrays that contain a whole data set.",
            "title": "Loading a Built-in Seaborn Data Set"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#show-seaborn-plots",
            "text": "plt.show()  # Import necessarily libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load data\n# built-in Seaborn dataset\ntitanic = sns.load_dataset(\"titanic\")\n\n# Set up a factorplot\ng = sns.factorplot(\"class\", \"survived\", \"sex\",\n                   data=titanic,\n                   kind=\"bar\",\n                   palette=\"muted\",\n                   legend=False)\n\n# Show plot\nplt.show()",
            "title": "Show Seaborn Plots"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#use-seaborn-with-matplotlib-defaults",
            "text": "# Import Matplotlib\nimport matplotlib.pyplot as plt\n\n# Check the available styles\nplt.style.available  ['seaborn-dark-palette',\n 'seaborn-ticks',\n 'seaborn-darkgrid',\n 'seaborn-muted',\n 'seaborn-white',\n 'seaborn-pastel',\n 'grayscale',\n 'seaborn-bright',\n '_classic_test',\n 'seaborn-poster',\n 'seaborn-whitegrid',\n 'classic',\n 'seaborn-dark',\n 'seaborn-talk',\n 'bmh',\n 'seaborn-notebook',\n 'ggplot',\n 'seaborn-colorblind',\n 'seaborn-deep',\n 'seaborn',\n 'fivethirtyeight',\n 'dark_background',\n 'seaborn-paper']  # Use Matplotlib defaults\nplt.style.use(\"classic\")\n\n# Set up a factorplot\ng = sns.factorplot(\"class\", \"survived\", \"sex\",\n                   data=titanic,\n                   kind=\"bar\",\n                   legend=False)\n\n# Show plot\nplt.show()   plt.style.use(\"ggplot\")\n\n# Set up a factorplot\ng = sns.factorplot(\"class\", \"survived\", \"sex\",\n                   data=titanic,\n                   kind=\"bar\",\n                   legend=False)\n\n# Show plot\nplt.show()",
            "title": "Use Seaborn with Matplotlib Defaults"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#use-seaborns-colors-as-a-colormap-in-matplotlib",
            "text": "# Import the necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import ListedColormap\n\n# Define a variable N\nN = 500\n\n# Construct the colormap\ncurrent_palette = sns.color_palette(\"muted\", n_colors=5)\ncmap = ListedColormap(sns.color_palette(current_palette).as_hex())\n\n\n# Initialize the data\ndata1 = np.random.randn(N)\ndata2 = np.random.randn(N)\n# Assume that there are 5 possible labels\ncolors = np.random.randint(0,5,N)\n\n\n# Create a scatter plot\nplt.scatter(data1, data2, c=colors, cmap=cmap)\n\n# Add a color bar\nplt.colorbar()\n\n# Show the plot\nplt.show()",
            "title": "Use Seaborn\u2019s Colors as a colormap in Matplotlib?"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#scale-seaborn-plots-for-other-contexts",
            "text": "Larger or smaller plots.   \u201cpaper\u201d,  \u201cnotebook\u201d,  \u201ctalk\u201d and  \u201cposter\u201d   # Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Reset default params\nsns.set()\n\n# Set context to `\"paper\"`\nsns.set_context(\"paper\")\n\n# Load iris data\niris = sns.load_dataset(\"iris\")\n\n# Construct iris plot\nsns.swarmplot(x=\"species\", y=\"petal_length\", data=iris)\n\n# Show plot\nplt.show()   More parameters.  Use the higher-level  set()  function instead of  set_context()  to adjust other plot elements.  # Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set context to `\"paper\"`\nsns.set_context(\"paper\", \n                font_scale=3, \n                rc={\"font.size\":8,\n                    \"axes.labelsize\":5})\n\n# Load iris data\niris = sns.load_dataset(\"iris\")\n\n# Construct iris plot\nsns.swarmplot(x=\"species\", y=\"petal_length\", data=iris)\n\n# Show plot\nplt.show()   # Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Reset default params\nsns.set(rc={\"font.size\":8,\n            \"axes.labelsize\":5})\n\n# Load iris data\niris = sns.load_dataset(\"iris\")\n\n# Construct iris plot\nsns.swarmplot(x=\"species\", y=\"petal_length\", data=iris)\n\n# Show plot\nplt.show()   Axes-level functions and figure-level functions.    The ones that operate on the Axes level are, for example,  regplot() ,  boxplot() ,  kdeplot() , \u2026,   while the functions that operate on the Figure level are  lmplot() ,  factorplot() ,  jointplot() , \u2026   The first group is identified by taking an explicit  ax  argument and returning an Axes object, while the second group of functions creates plots that potentially include Axes.   tips.head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       total_bill \n       tip \n       sex \n       smoker \n       day \n       time \n       size \n     \n   \n   \n     \n       0 \n       16.99 \n       1.01 \n       Female \n       No \n       Sun \n       Dinner \n       2 \n     \n     \n       1 \n       10.34 \n       1.66 \n       Male \n       No \n       Sun \n       Dinner \n       3 \n     \n     \n       2 \n       21.01 \n       3.50 \n       Male \n       No \n       Sun \n       Dinner \n       3 \n     \n     \n       3 \n       23.68 \n       3.31 \n       Male \n       No \n       Sun \n       Dinner \n       2 \n     \n     \n       4 \n       24.59 \n       3.61 \n       Female \n       No \n       Sun \n       Dinner \n       4 \n     \n      # Set context to `\"paper\"`\nsns.set_context(\"notebook\", \n                font_scale=1,\n                rc={\"font.size\":16,\n                    \"axes.labelsize\":16})  sns.boxplot(x=\"total_bill\", data=tips)  <matplotlib.axes._subplots.AxesSubplot at 0x7f6dc1c721d0>   sns.lmplot(x=\"size\", y=\"total_bill\",\n           data=tips,\n           size=7,\n           truncate=True,\n           scatter_kws={\"s\": 100})  <seaborn.axisgrid.FacetGrid at 0x7f6dc1b9a9b0>   lmplot()  returns an object of the type  FacetGrid  with underlying figure and array of axes at the  FacetGrid.fig  and  FacetGrid.axes  arguments.  Make customizations to a regression plot constructed with  regplot()  on the  Axes  level (see below) and make customizations with  lmplot()  at the Figure level (see further down).",
            "title": "Scale Seaborn Plots for other Contexts"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#temporarily-set-the-plot-style",
            "text": "axes_style()  in a  with  statement to temporarily set the plot style.  # Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load data\niris = sns.load_dataset(\"iris\")\ntips = sns.load_dataset(\"tips\")\n\n# Set axes style to white for first subplot\nwith sns.axes_style(\"white\"):\n    plt.subplot(211)\n    sns.swarmplot(x=\"species\", y=\"petal_length\", data=iris)\n\n# Initialize the second subplot\nplt.subplot(212)\n\n# Plot violinplot\nsns.violinplot(x = \"total_bill\", data=tips)\n\n# Show the plot                   \nplt.show()",
            "title": "Temporarily Set the Plot Style"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#set-the-figure-size-in-seaborn",
            "text": "Axes-level functions:  plt.subplots()  function to which we pass the  figsize  argument.  # Import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Initialize Figure and Axes object\nfig, ax = plt.subplots(figsize=(10,4))\n\n# Load in the data\niris = sns.load_dataset(\"iris\")\n\n# Create swarmplot\nsns.swarmplot(x=\"species\", y=\"petal_length\", data=iris, ax=ax)\n\n# Show plot\nplt.show()   Figure-level functions: rely on two parameters to set the Figure size, namely,  size  and  aspect .  # Import the libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\n# Load data\ntitanic = sns.load_dataset(\"titanic\")\n\n# Set up a factorplot\ng = sns.factorplot(\"class\", \"survived\", \"sex\", \n                   data=titanic, \n                   kind=\"bar\", \n                   size=6, \n                   aspect=2, \n                   palette=\"muted\", \n                   legend=False)\n\n# Show plot\nplt.show()",
            "title": "Set the Figure Size in Seaborn"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#rotate-label-text-in-seaborn",
            "text": "# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\n\n# Initialize the data\nx = 10 ** np.arange(1, 10)\ny = x * 2\ndata = pd.DataFrame(data={'x': x, 'y': y})\n\n# Create an lmplot\ngrid = sns.lmplot('x', 'y',\n                  data,\n                  size=7,\n                  truncate=True,\n                  scatter_kws={\"s\": 100})\n\n# Rotate the labels on x-axis\ngrid.set_xticklabels(rotation=30)\n\n# Show the plot\nplt.show()",
            "title": "Rotate Label Text in Seaborn"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#set-xlim-or-ylim-in-seaborn",
            "text": "Assign boxplot to a variable  ax , which will be a  matplotlib.axes._subplots.AxesSubplot  object.  # Import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the data\ntips = sns.load_dataset(\"tips\")\n\n# Create the boxplot\nax = sns.boxplot(x=\"total_bill\", data=tips)\n\n# Set the `xlim`\nax.set(xlim=(0, 100))\n\n# Show the plot\nplt.show()   # Import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the data\ntips = sns.load_dataset(\"tips\")\n\n# Create the boxplot\nax = sns.boxplot(x=\"total_bill\", data=tips)\n\n# Set the `xlim`\nax.set(xlim=(0, 60))\n\n# Show the plot\nplt.show()   Figure-level: access the  Axes  object with the help of the  axes  argument.  # Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\n\n# Initialize the data\nx = 10 ** np.arange(1, 10)\ny = x * 2\ndata = pd.DataFrame(data={'x': x, 'y': y})\n\n# Create lmplot\nlm = sns.lmplot('x', 'y',\n                data,\n                size=7,\n                truncate=True,\n                scatter_kws={\"s\": 100})\n\n# Get hold of the `Axes` objects\naxes = lm.ax\n\n# Tweak the `Axes` properties\naxes.set_ylim(-1000000000,)\n\n# Show the plot\nplt.show()   Figure-level:  FacetGrid  exposes the underlying figure with the help of the  fig  argument.  # Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\n\n# Initialize the data\nx = 10 ** np.arange(1, 10)\ny = x * 2\ndata = pd.DataFrame(data={'x': x, 'y': y})\n\n# Create lmplot\nlm = sns.lmplot('x', 'y',\n                data,\n                size=7,\n                truncate=True,\n                scatter_kws={\"s\": 100})\n\n# Access the Figure\nfig = lm.fig \n\n# Add a title to the Figure\nfig.suptitle('this is the figure title', fontsize=12)\n\n# Show the plot\nplt.show()",
            "title": "Set xlim or ylim in Seaborn"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#set-log-scale",
            "text": "# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\n\n# Create the data\nx = 10 ** np.arange(1, 10)\ny = x * 2\ndata = pd.DataFrame(data={'x': x, 'y': y})\n\n# Initialize figure and ax\nfig, ax = plt.subplots()\n\n# Set the scale of the x-and y-axes\nax.set(xscale=\"log\", yscale=\"log\")\n\n# Create a regplot\nsns.regplot(\"x\", \"y\",\n            data,\n            ax=ax,\n            scatter_kws={\"s\": 100})\n\n# Show plot\nplt.show()   Figure-level: set the  xscale  and  yscale  properties with the help of the  set()  method of the  FacetGrid  object.  # Import the libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\n# Load data\ntitanic = sns.load_dataset(\"titanic\")\n\n# Set up a factorplot\ng = sns.factorplot(\"class\", \"survived\", \"sex\",\n                   data=titanic,\n                   kind=\"bar\",\n                   size=6,\n                   palette=\"muted\",\n                   legend=False)\n\n# Set the `yscale`\ng.set(yscale=\"log\")\n\n# Show plot\nplt.show()",
            "title": "Set Log Scale"
        },
        {
            "location": "/Seaborn, Python Statistical Data Visualization Library/#add-a-title",
            "text": "Axes-level:  set_title() .  # Import the libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\ntips = sns.load_dataset(\"tips\")\n\n# Create the boxplot\nax = sns.boxplot(x=\"total_bill\", data=tips)\n\n# Set title\nax.set_title(\"boxplot\")\n\n# Show the plot\nplt.show()   Figure-level:  fig .  # Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\n\n# Load the data\ntips = sns.load_dataset(\"tips\")\n\n# Create scatter plots\ng = sns.FacetGrid(tips, col=\"sex\", row=\"smoker\", margin_titles=True)\ng.map(sns.plt.scatter, \"total_bill\", \"tip\")\n\n# Add a title to the figure\ng.fig.suptitle(\"this is a title\")\n\n# Show the plot\nplt.show()",
            "title": "Add A Title"
        },
        {
            "location": "/Pandas+DataFrames/",
            "text": "CONTENT\n\n\nWhat are Pandas Data Frames?\n\n\nCreate a Pandas DataFrame\n\n\nFundamental DataFrame Operations\n\n\nSelect an Index or Column from a Pandas DataFrame\n\n\nElement\n\n\nRow, Column\n\n\n\n\n\n\n\n\n\n\nAdd an Index, Row or Column to a Pandas DataFrame\n\n\nAdd an Index to a DataFrame\n\n\nAdd Rows to a DataFrame\n\n\nAdd a Column to a DataFrame\n\n\nReset the Index of a DataFrame\n\n\n\n\n\n\nDelete Indices, Rows or Columns From a Pandas Data Frame\n\n\nDelete an Index from a DataFrame\n\n\nDelete a Column from a DataFrame\n\n\nRemove a Row from a DataFrame\n\n\n\n\n\n\nRename the Index or Columns of a Pandas DataFrame\n\n\nFormat The Data in a Pandas DataFrame\n\n\nReplace All Occurrences of a String in a DataFrame\n\n\nRemove Parts from Strings in the Cells of a DataFrame\n\n\nSplit Text in a Column into Multiple Rows in a DataFrame\n\n\nApply a Function to a Pandas DataFrame\u2019s Columns or Rows\n\n\n\n\n\n\nCreate an Empty DataFrame\n\n\nDoes Pandas Recognize Dates when Importing Data?\n\n\nWhen, Why and How we should Reshape a DataFrame\n\n\nPivot a DataFrame\n\n\nUse stack() and unstack() to Reshape a Pandas DataFrame\n\n\nReshape a DataFrame with melt()\n\n\n\n\n\n\nIterate over a Pandas DataFrame\n\n\nWrite a Pandas DataFrame to a File\n\n\nOutput a DataFrame to CSV\n\n\nWrite a DataFrame to Excel\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nWhat are Pandas Data Frames?\n\u00b6\n\n\n\n\na Pandas \nDataFrame\n.\n\n\na Pandas \nSeries\n: a one-dimensional labeled array capable of holding any data type with axis labels or index. An example of a Series object is one column from a DataFrame.\n\n\na Numpy \nndarray\n, which can be a record or structured\n\n\na two-dimensional \nndarray\n\n\ndictionaries of one-dimensional \nndarrays\n, lists, dictionaries or Series.\n\n\n\n\nnp.ndarray\n is the actual data type, while \nnp.array()\n is a function.\n\n\nBesides the data that a DataFrame needs to contain, we can also specify the index and column names. The index, on the one hand, indicates the difference in rows, while the column names indicate the difference in columns.\n\n\n%pylab inline\nimport numpy as np\nimport pandas as pd\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\nimport os\n\nos.chdir('/home/ugo/Documents/Notebooks/DataCamp, Pandas tutorial/')\n\nprint(os.getcwd())\n\n\n\n\n/home/ugo/Documents/Notebooks/DataCamp, Pandas tutorial\n\n\n\n# A structured array\nmy_array = np.ones(3, dtype=([('foo', int), ('bar', float)]))\n# Print the structured array\nprint(my_array['foo'])\n\n\n\n\n[1 1 1]\n\n\n\n# A record array\nmy_array2 = my_array.view(np.recarray)\n# Print the record array\nprint(my_array2.foo)\n\n\n\n\n[1 1 1]\n\n\n\nCreate a Pandas DataFrame\n\u00b6\n\n\nFirst, select the values that are contained in the lists that start with \nRow1\n and \nRow2\n, then select the index or row numbers \nRow1\n and \nRow2\n, and then the column names \nCol1\n and \nCol2\n.\n\n\ndata = np.array([['','Col1','Col2'],\n                ['Row1',1,2],\n                ['Row2',3,4]])\nprint(data)\n\n\n\n\n[['' 'Col1' 'Col2']\n ['Row1' '1' '2']\n ['Row2' '3' '4']]\n\n\n\nprint(pd.DataFrame(data=data[1:,1:],\n                  index=data[1:,0],\n                  columns=data[0,1:]))\n\n\n\n\n     Col1 Col2\nRow1    1    2\nRow2    3    4\n\n\n\n# Take a 2D array as input to a DataFrame \nmy_2darray = np.array([[1, 2, 3], [4, 5, 6]])\nprint(pd.DataFrame(my_2darray))\n\n\n\n\n   0  1  2\n0  1  2  3\n1  4  5  6\n\n\n\n# Take a dictionary as input to a DataFrame \nmy_dict = {1: ['1', '3'], 2: ['1', '2'], 3: ['2', '4']}\nprint(pd.DataFrame(my_dict))\n\n\n\n\n   1  2  3\n0  1  1  2\n1  3  2  4\n\n\n\n# Take a DataFrame as input to a DataFrame \nmy_df = pd.DataFrame(data=[4,5,6,7], index=range(0,4), columns=['A'])\nprint(pd.DataFrame(my_df))\n\n\n\n\n   A\n0  4\n1  5\n2  6\n3  7\n\n\n\n# Take a Series as input to a DataFrame\nmy_series = pd.Series({\"United Kingdom\":\"London\", \"India\":\"New Delhi\", \"United States\":\"Washington\", \"Belgium\":\"Brussels\"})\nprint(pd.DataFrame(my_series))\n\n\n\n\n                         0\nBelgium           Brussels\nIndia            New Delhi\nUnited Kingdom      London\nUnited States   Washington\n\n\n\ndf = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6]]))\nprint(df)\n\n\n\n\n   0  1  2\n0  1  2  3\n1  4  5  6\n\n\n\n# header\nlist(df.columns.values)\n\n\n\n\n[0, 1, 2]\n\n\n\n# Use the `shape` property\nprint(df.shape)\n\n\n\n\n(2, 3)\n\n\n\n# Or use the `len()` function with the `index` property\nprint(len(df.index))\n# length = rows\n\n\n\n\n2\n\n\n\n# exclude the NaN\ndf[0].count()\n\n\n\n\n2\n\n\n\nFundamental DataFrame Operations\n\u00b6\n\n\nSelect an Index or Column from a Pandas DataFrame\n\u00b6\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A','B','C'])\nprint(df)\n\n\n\n\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\nElement\n\u00b6\n\n\n# Using `iloc[]`\nprint(df.iloc[0][0])\n\n\n\n\n1\n\n\n\n# Using `loc[]`\nprint(df.loc[0]['A'])\n\n\n\n\n1\n\n\n\n# Using `at[]`\nprint(df.at[0,'A'])\n\n\n\n\n1\n\n\n\n# Using `iat[]`\nprint(df.iat[0,0])\n\n\n\n\n1\n\n\n\n# Using `get_value(index, column)`\nprint(df.get_value(0, 'A'))\n\n\n\n\n1\n\n\n\nRow, Column\n\u00b6\n\n\n# Use `iloc[]` to select a row\nprint(df.iloc[0])\n\n\n\n\nA    1\nB    2\nC    3\nName: 0, dtype: int64\n\n\n\n# Use `loc[]` to select a column\nprint(df.loc[:,'A'])\n\n\n\n\n0    1\n1    4\n2    7\nName: A, dtype: int64\n\n\n\nAdd an Index, Row or Column to a Pandas DataFrame\n\u00b6\n\n\nAdd an Index to a DataFrame\n\u00b6\n\n\n# Print out the DataFrame `df` to check it out\nprint(df)\n\n\n\n\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n# Set 'C' as the index of the DataFrame\ndf.set_index('C')\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nA\n\n      \nB\n\n    \n\n    \n\n      \nC\n\n      \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n3\n\n      \n1\n\n      \n2\n\n    \n\n    \n\n      \n6\n\n      \n4\n\n      \n5\n\n    \n\n    \n\n      \n9\n\n      \n7\n\n      \n8\n\n    \n\n  \n\n\n\n\n\n\n\nAdd Rows to a DataFrame\n\u00b6\n\n\nBut before\u2026\n\n\n\n\nloc\n works on labels of an index. This means with \nloc[2]\n, we look for the values of the DataFrame that have an index labeled 2.\n\n\niloc\n works on the positions in the index. This means with \niloc[2]\n, we look for the values of the DataFrame that are at index \u20182\u2019.\n\n\nix\n is a more complex case: when the index is integer-based, we pass a label to \nix\n. \nix[2]\n then means that we are looking in the DataFrame for values that have an index labeled \n2\n. This is just like \nloc\n! However, if the index is not solely integer-based, \nix\n will work with positions, just like \niloc\n.\n\n\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2, 'A', 4], columns=[48, 49, 50])\nprint(df)\n\n\n\n\n   48  49  50\n2   1   2   3\nA   4   5   6\n4   7   8   9\n\n\n\n# Pass `2` to `loc`\nprint(df.loc[2])\n\n\n\n\n48    1\n49    2\n50    3\nName: 2, dtype: int64\n\n\n\n# Pass `2` to `iloc`\nprint(df.iloc[2])\n\n\n\n\n48    7\n49    8\n50    9\nName: 4, dtype: int64\n\n\n\n# Pass `2` to `ix`\nprint(df.ix[2])\n\n\n\n\nFormat Type              text\nData Description         HTML\nReader              read_html\nWriter                to_html\nName: 2, dtype: object\n\n\n\nAdd a row.\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2.5, 12.6, 4.8], columns=[48, 49, 50])\nprint(df)\n\n\n\n\n      48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9\n\n\n\n# There's no index labeled `2`, so change the index at position `2`\ndf.ix[2] = [60, 50, 40]\nprint(df)\n\n\n\n\n      48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8   60  50  40\n\n\n\n# This will make an index labeled `2` and ADD the new values\ndf.loc[2] = [11, 12, 13]\nprint(df)\n\n\n\n\n      48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8   60  50  40\n2.0   11  12  13\n\n\n\nAdd a Column to a DataFrame\n\u00b6\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)\n\n\n\n\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n# Use `.index`\ndf['D'] = df.index\n\n# Print `df`\nprint(df)\n\n\n\n\n   A  B  C  D\n0  1  2  3  0\n1  4  5  6  1\n2  7  8  9  2\n\n\n\nTell the DataFrame that it should take column A as its index.\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6]]), columns=[1,2,3])\nprint(df)\n\n\n\n\n   1  2  3\n0  1  2  3\n1  4  5  6\n\n\n\n# Append a column to `df`\ndf.loc[:, 4] = pd.Series(['5', '6'], index=df.index)\n\n# Print out `df` again to see the changes\nprint(df)\n\n\n\n\n   1  2  3  4\n0  1  2  3  5\n1  4  5  6  6\n\n\n\nReset the Index of a DataFrame\n\u00b6\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2.5, 12.6, 4.8], columns=[48, 49, 50])\nprint(df)\n\n\n\n\n      48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9\n\n\n\n# Use `reset_index()` to reset the values\ndf.reset_index(level=0, drop=True)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n48\n\n      \n49\n\n      \n50\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n    \n\n    \n\n      \n1\n\n      \n4\n\n      \n5\n\n      \n6\n\n    \n\n    \n\n      \n2\n\n      \n7\n\n      \n8\n\n      \n9\n\n    \n\n  \n\n\n\n\n\n\n\nDelete Indices, Rows or Columns From a Pandas Data Frame\n\u00b6\n\n\nDelete an Index from a DataFrame\n\u00b6\n\n\nBecause DataFrames and Series always have an index.\n\n\n\n\nReset the index of a DataFrame (go back to the previous section to see how it is done) or\n\n\nremove the index name, if there is any, by executing del df.index.name,\n\n\nremove duplicate index values by resetting the index, dropping the duplicates of the index column that has been added to a DataFrame and reinstating that duplicateless column again as the index,\n\n\nand lastly, remove an index, and with it a row. This is elaborated in one of the next sections.\n\n\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [40, 50, 60], [23, 35, 37]]), \n                  index= [2.5, 12.6, 4.8, 4.8, 2.5], \n                  columns=[48, 49, 50])\nprint(df)\n\n\n\n\n      48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9\n4.8   40  50  60\n2.5   23  35  37\n\n\n\ndf.reset_index().drop_duplicates(subset='index', keep='last').set_index('index')\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n48\n\n      \n49\n\n      \n50\n\n    \n\n    \n\n      \nindex\n\n      \n\n      \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n12.6\n\n      \n4\n\n      \n5\n\n      \n6\n\n    \n\n    \n\n      \n4.8\n\n      \n40\n\n      \n50\n\n      \n60\n\n    \n\n    \n\n      \n2.5\n\n      \n23\n\n      \n35\n\n      \n37\n\n    \n\n  \n\n\n\n\n\n\n\n\n\n\n\n\nDelete a Column from a DataFrame\n\u00b6\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)\n\n\n\n\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n# Drop the column with label 'A'                  \ndf.drop('A', axis=1, inplace=True)\nprint(df)\n\n\n\n\n   B  C\n0  2  3\n1  5  6\n2  8  9\n\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\ndf.drop('A', axis=1, inplace=False)\nprint(df)\n\n\n\n\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\n# Drop the column at position 1\ndf.drop(df.columns[[1]], axis=1)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nA\n\n      \nC\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n3\n\n    \n\n    \n\n      \n1\n\n      \n4\n\n      \n6\n\n    \n\n    \n\n      \n2\n\n      \n7\n\n      \n9\n\n    \n\n  \n\n\n\n\n\n\n\nRemove a Row from a DataFrame\n\u00b6\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3, 4], [4, 5, 6, 5], [7, 8, 9, 6], [23, 50, 60, 7], [23, 35, 37, 23]]), \n                  index= [2.5, 12.6, 4.8, 4.8, 2.5], \n                  columns=[48, 49, 50, 50])\nprint(df)\n\n\n\n\n      48  49  50  50\n2.5    1   2   3   4\n12.6   4   5   6   5\n4.8    7   8   9   6\n4.8   23  50  60   7\n2.5   23  35  37  23\n\n\n\n# Drop the duplicates in `df`\ndf.drop_duplicates([48], keep='last')\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n48\n\n      \n49\n\n      \n50\n\n      \n50\n\n    \n\n  \n\n  \n\n    \n\n      \n2.5\n\n      \n1\n\n      \n2\n\n      \n3\n\n      \n4\n\n    \n\n    \n\n      \n12.6\n\n      \n4\n\n      \n5\n\n      \n6\n\n      \n5\n\n    \n\n    \n\n      \n4.8\n\n      \n7\n\n      \n8\n\n      \n9\n\n      \n6\n\n    \n\n    \n\n      \n2.5\n\n      \n23\n\n      \n35\n\n      \n37\n\n      \n23\n\n    \n\n  \n\n\n\n\n\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)\n\n\n\n\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n# Drop the index at position 1\nprint(df.drop(df.index[1]))\n\n\n\n\n   A  B  C\n0  1  2  3\n2  7  8  9\n\n\n\ndf.reset_index(level=0, drop=True)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nA\n\n      \nB\n\n      \nC\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n    \n\n    \n\n      \n1\n\n      \n4\n\n      \n5\n\n      \n6\n\n    \n\n    \n\n      \n2\n\n      \n7\n\n      \n8\n\n      \n9\n\n    \n\n  \n\n\n\n\n\n\n\nRename the Index or Columns of a Pandas DataFrame\n\u00b6\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)\n\n\n\n\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n# Define the new names of columns\nnewcols = {\n    'A': 'new_column_1', \n    'B': 'new_column_2', \n    'C': 'new_column_3'\n}\n\n# Use `rename()` to rename columns\ndf.rename(columns=newcols, inplace=True)\n\nprint(df)\n\n\n\n\n   new_column_1  new_column_2  new_column_3\n0             1             2             3\n1             4             5             6\n2             7             8             9\n\n\n\n# Rename the index\ndf.rename(index={1: 'a'})\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nnew_column_1\n\n      \nnew_column_2\n\n      \nnew_column_3\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n    \n\n    \n\n      \na\n\n      \n4\n\n      \n5\n\n      \n6\n\n    \n\n    \n\n      \n2\n\n      \n7\n\n      \n8\n\n      \n9\n\n    \n\n  \n\n\n\n\n\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\n# Define the new names of columns\nnewcols = {\n    'A': 'new_column_1', \n    'B': 'new_column_2', \n    'C': 'new_column_3'\n}\n\n# Use `rename()` to rename columns\ndf2 = df.rename(columns=newcols, inplace=False)\n\nprint(df)\nprint(df2)\n\n\n\n\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n   new_column_1  new_column_2  new_column_3\n0             1             2             3\n1             4             5             6\n2             7             8             9\n\n\n\nFormat The Data in a Pandas DataFrame\n\u00b6\n\n\nReplace All Occurrences of a String in a DataFrame\n\u00b6\n\n\ndf = pd.DataFrame(data=np.array([['OK','Perfect','Acceptable'], ['Awful','Awful','Perfect'], ['Acceptable','OK','Poor']]), columns=['Student1','Student2','Student3'])\nprint(df)\n\n\n\n\n     Student1 Student2    Student3\n0          OK  Perfect  Acceptable\n1       Awful    Awful     Perfect\n2  Acceptable       OK        Poor\n\n\n\n# Replace the strings by numerical values (0-4)\ndf.replace(['Awful', 'Poor', 'OK', 'Acceptable', 'Perfect'], [0, 1, 2, 3, 4]) \n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nStudent1\n\n      \nStudent2\n\n      \nStudent3\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2\n\n      \n4\n\n      \n3\n\n    \n\n    \n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n4\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n2\n\n      \n1\n\n    \n\n  \n\n\n\n\n\n\n\ndf = pd.DataFrame(data=np.array([['1\\n',2,'3\\n'], ['4',5 ,'6\\n'], ['7','8\\n','9']]), columns=[0,1,2])\nprint(df)\n\n\n\n\n     0    1    2\n0  1\\n    2  3\\n\n1    4    5  6\\n\n2    7  8\\n    9\n\n\n\n# Replace strings by others with `regex`\ndf.replace({'\\n': '<br>'}, regex=True)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n0\n\n      \n1\n\n      \n2\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1<br>\n\n      \n2\n\n      \n3<br>\n\n    \n\n    \n\n      \n1\n\n      \n4\n\n      \n5\n\n      \n6<br>\n\n    \n\n    \n\n      \n2\n\n      \n7\n\n      \n8<br>\n\n      \n9\n\n    \n\n  \n\n\n\n\n\n\n\nRemove Parts from Strings in the Cells of a DataFrame\n\u00b6\n\n\ndf = pd.DataFrame(data=np.array([[1,2,'+3b'], [4,5,'-6B'], [7,8,'+9A']]), columns=['class','test','result'])\nprint(df)\n\n\n\n\n  class test result\n0     1    2    +3b\n1     4    5    -6B\n2     7    8    +9A\n\n\n\n# Delete unwanted parts from the strings in the `result` column\ndf['result'] = df['result'].map(lambda x: x.lstrip('+-').rstrip('aAbBcC'))\n\n# Check out the result again\nprint(df)\n\n\n\n\n  class test result\n0     1    2      3\n1     4    5      6\n2     7    8      9\n\n\n\nUse \nmap()\n on the column \nresult\n to apply the lambda function over each element or element-wise of the column. The function in itself takes the string value and strips the \n+\n or \n-\n that\u2019s located on the left, and also strips away any of the six \naAbBcC\n on the right.\n\n\nSplit Text in a Column into Multiple Rows in a DataFrame\n\u00b6\n\n\ndf = pd.DataFrame(data=np.array([[34,0,'23:44:55'], [22,0,'66:77:88'], [19,1,'43:68:05 56:34:12']]), columns=['Age','PlusOne','Ticket'])\nprint(df)                    \n\n\n\n\n  Age PlusOne             Ticket\n0  34       0           23:44:55\n1  22       0           66:77:88\n2  19       1  43:68:05 56:34:12\n\n\n\n# Split out the two values in the third row\n# Make it a Series\n# Stack the values\nticket_series = df['Ticket'].str.split(' ').apply(pd.Series, 1).stack()\nprint(ticket_series)\n\n\n\n\n0  0    23:44:55\n1  0    66:77:88\n2  0    43:68:05\n   1    56:34:12\ndtype: object\n\n\n\n# Get rid of the stack:\n# Drop the level to line up with the DataFrame\nticket_series.index = ticket_series.index.droplevel(-1)\n\n\n\n\n# Make a series a dataframe \nticketdf = pd.DataFrame(ticket_series)\n\n\n\n\n# Delete the `Ticket` column from a DataFrame\ndel df['Ticket']\n\n\n\n\n# Check out the new `df`\nprint(df)\n\n\n\n\n  Age PlusOne\n0  34       0\n1  22       0\n2  19       1\n\n\n\nprint(ticketdf)\n\n\n\n\n          0\n0  23:44:55\n1  66:77:88\n2  43:68:05\n2  56:34:12\n\n\n\n# Join the ticket DataFrame to `df`\ndf.join(ticketdf)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nAge\n\n      \nPlusOne\n\n      \n0\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n34\n\n      \n0\n\n      \n23:44:55\n\n    \n\n    \n\n      \n1\n\n      \n22\n\n      \n0\n\n      \n66:77:88\n\n    \n\n    \n\n      \n2\n\n      \n19\n\n      \n1\n\n      \n43:68:05\n\n    \n\n    \n\n      \n2\n\n      \n19\n\n      \n1\n\n      \n56:34:12\n\n    \n\n  \n\n\n\n\n\n\n\nFirst, inspect the DataFrame at hand. The values in the last row and in the last column are a bit too long. It appears there are two tickets because a guest has taken a plus-one to the concert.\n\n\nTake the \nTicket\n column from the DataFrame \ndf\n and strings on a space. This will make sure that the two tickets will end up in two separate rows in the end. Next, take these four values (the four ticket numbers) and put them into a Series object. That still doesn\u2019t seem quite right. There are \nNaN\n values in there! Stack the Series to make sure they don\u2019t have any \nNaN\n values in the resulting Series.\n\n\nNext, stack the Series.\n\n\nThat is not ideal either. Drop the level to line up with the DataFrame.\n\n\nTransform a Series to a DataFrame to make sure we can join it back to the initial DataFrame. However, to avoid having any duplicates in the DataFrame, delete the original \nTicket\n column.\n\n\nApply a Function to a Pandas DataFrame\u2019s Columns or Rows\n\u00b6\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)\n\n\n\n\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\n# A lambda function\ndoubler = lambda x: x*2\n\n# Apply the `doubler` function to the `A` DataFrame column\ndf['A'].apply(doubler)\n\n\n\n\n0     2\n1     8\n2    14\nName: A, dtype: int64\n\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\ndf.loc[0].apply(doubler)\n\n\n\n\nA    2\nB    4\nC    6\nName: 0, dtype: int64\n\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\ndf.iloc[0].apply(doubler)\n\n\n\n\nA    2\nB    4\nC    6\nName: 0, dtype: int64\n\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\ndf['A'].apply(doubler)\n\n\n\n\n0     2\n1     8\n2    14\nName: A, dtype: int64\n\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\ndf.applymap(doubler)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nA\n\n      \nB\n\n      \nC\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2\n\n      \n4\n\n      \n6\n\n    \n\n    \n\n      \n1\n\n      \n8\n\n      \n10\n\n      \n12\n\n    \n\n    \n\n      \n2\n\n      \n14\n\n      \n16\n\n      \n18\n\n    \n\n  \n\n\n\n\n\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\n\ndef doubler(x):\n    if x % 2 == 0:\n        return x\n    else:\n        return x * 2\n\n# Use `applymap()` to apply `doubler()` to a DataFrame\ndf.applymap(doubler)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nA\n\n      \nB\n\n      \nC\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2\n\n      \n2\n\n      \n6\n\n    \n\n    \n\n      \n1\n\n      \n4\n\n      \n10\n\n      \n6\n\n    \n\n    \n\n      \n2\n\n      \n14\n\n      \n8\n\n      \n18\n\n    \n\n  \n\n\n\n\n\n\n\n# Check the DataFrame\nprint(df)\n\n\n\n\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\nCreate an Empty DataFrame\n\u00b6\n\n\nnumpy.nan\n has type float.\n\n\ndf = pd.DataFrame(np.nan, index=[0,1,2,3], columns=['A'])\nprint(df)\n\n\n\n\n    A\n0 NaN\n1 NaN\n2 NaN\n3 NaN\n\n\n\nAdd an attribute.\n\n\ndf = pd.DataFrame(index=range(0,4),columns=['A'], dtype='float')\nprint(df)\n\n\n\n\n    A\n0 NaN\n1 NaN\n2 NaN\n3 NaN\n\n\n\nDoes Pandas Recognize Dates when Importing Data?\n\u00b6\n\n\ndf = pd.read_csv('date.csv', header=0, parse_dates=True)\nprint(df)\n\n\n\n\n     unit      date\n0  6.1101  02/08/16\n1  5.5277  08/07/16\n2  8.5186  09/05/16\n3  7.0032  20/03/16\n\n\n\n# or this option:\ndf = pd.read_csv('date.csv', header=0, parse_dates=['date'])\nprint(df)\n\n\n\n\n     unit       date\n0  6.1101 2016-02-08\n1  5.5277 2016-08-07\n2  8.5186 2016-09-05\n3  7.0032 2016-03-20\n\n\n\nThe second code succeeded.\n\n\nWhen, Why and How we should Reshape a DataFrame\n\u00b6\n\n\nPivot a DataFrame\n\u00b6\n\n\n\n\nValues: this argument allows to specify which values of the original DataFrame we want to see in the pivot table.\n\n\nColumns: whatever is passed to this argument will become a column in the resulting table.\n\n\nIndex: whatever is passed to this argument will become an index in the resulting table.\n\n\n\n\nproducts = pd.DataFrame({'category': ['Cleaning', 'Cleaning', 'Entertainment', 'Entertainment', 'Tech', 'Tech'],\n                        'store': ['Walmart', 'Dia', 'Walmart', 'Fnac', 'Dia','Walmart'],\n                        'price':[11.42, 23.50, 19.99, 15.95, 55.75, 111.55],\n                        'testscore': [4, 3, 5, 7, 5, 8]})\nprint(products)\n\n\n\n\n        category   price    store  testscore\n0       Cleaning   11.42  Walmart          4\n1       Cleaning   23.50      Dia          3\n2  Entertainment   19.99  Walmart          5\n3  Entertainment   15.95     Fnac          7\n4           Tech   55.75      Dia          5\n5           Tech  111.55  Walmart          8\n\n\n\n# Use `pivot()` to pivot the DataFrame\npivot_products = products.pivot(index='category', columns='store', values='price')\n\n# Check out the result\nprint(pivot_products)\n\n\n\n\nstore            Dia   Fnac  Walmart\ncategory                            \nCleaning       23.50    NaN    11.42\nEntertainment    NaN  15.95    19.99\nTech           55.75    NaN   111.55\n\n\n\nWithout specific values.\n\n\nproducts = pd.DataFrame({'category': ['Cleaning', 'Cleaning', 'Entertainment', 'Entertainment', 'Tech', 'Tech'],\n                        'store': ['Walmart', 'Dia', 'Walmart', 'Fnac', 'Dia','Walmart'],\n                        'price':[11.42, 23.50, 19.99, 15.95, 55.75, 111.55],\n                        'testscore': [4, 3, 5, 7, 5, 8]})\n\n# Use `pivot()` to pivot the DataFrame\npivot_products = products.pivot(index='category', columns='store')\n\n# Check out the results\nprint(pivot_products)\n\n\n\n\n               price                testscore             \nstore            Dia   Fnac Walmart       Dia Fnac Walmart\ncategory                                                  \nCleaning       23.50    NaN   11.42       3.0  NaN     4.0\nEntertainment    NaN  15.95   19.99       NaN  7.0     5.0\nTech           55.75    NaN  111.55       5.0  NaN     8.0\n\n\n\npivot_table()\n can add a function: \nmean\n.\n\n\n# The DataFrame\nproducts = pd.DataFrame({'category': ['Cleaning', 'Cleaning', 'Entertainment', 'Entertainment', 'Tech', 'Tech'],\n                        'store': ['Walmart', 'Dia', 'Walmart', 'Fnac', 'Dia','Walmart'],\n                        'price':[11.42, 23.50, 19.99, 15.95, 19.99, 111.55],\n                        'testscore': [4, 3, 5, 7, 5, 8]})\n\n# Pivot the `products` DataFrame with `pivot_table()`\npivot_products = products.pivot_table(index='category', columns='store', values='price', aggfunc='mean')\n\n# Check out the results\nprint(pivot_products)\n\n\n\n\nstore            Dia   Fnac  Walmart\ncategory                            \nCleaning       23.50    NaN    11.42\nEntertainment    NaN  15.95    19.99\nTech           19.99    NaN   111.55\n\n\n\nUse \nstack()\n and \nunstack()\n to Reshape a Pandas DataFrame\n\u00b6\n\n\nWhen we stack a DataFrame, we make it taller. Move the innermost column index to become the innermost row index.\n\n\nMuch like \nstack()\n, use \nunstack()\n to move the innermost row index to become the innermost column index.\n\n\nfrom collections import OrderedDict\nfrom pandas import DataFrame\nimport pandas as pd\nimport numpy as np\n\ntable = OrderedDict((\n    (\"Item\", ['Item0', 'Item0', 'Item1', 'Item1']),\n    ('CType',['Gold', 'Bronze', 'Gold', 'Silver']),\n    ('USD',  ['1$', '2$', '3$', '4$']),\n    ('EU',   ['1\u20ac', '2\u20ac', '3\u20ac', '4\u20ac'])\n))\ndf = DataFrame(table)\nprint(df)\n\n\n\n\n    Item   CType USD  EU\n0  Item0    Gold  1$  1\u20ac\n1  Item0  Bronze  2$  2\u20ac\n2  Item1    Gold  3$  3\u20ac\n3  Item1  Silver  4$  4\u20ac\n\n\n\n# Original DataFrame: Access the USD cost of Item0 for Gold customers\nprint(df[(df.Item=='Item0') & (df.CType=='Gold')].USD.values)\n\n\n\n\n['1$']\n\n\n\n# Column pivot\np = df.pivot(index='Item', columns='CType')\nprint(p)\n\n\n\n\n         USD                 EU            \nCType Bronze Gold Silver Bronze Gold Silver\nItem                                       \nItem0     2$   1$   None     2\u20ac   1\u20ac   None\nItem1   None   3$     4$   None   3\u20ac     4\u20ac\n\n\n\n# Pivoted DataFrame: p.USD gives a \"sub-DataFrame\" with the USD values only\nprint(p.USD[p.USD.index=='Item0'])\n\n\n\n\nCType Bronze Gold Silver\nItem                    \nItem0     2$   1$   None\n\n\n\n# more precise\nprint(p.USD[p.USD.index=='Item0'].Gold.values)\n\n\n\n\n['1$']\n\n\n\n# Pivoting By Multiple Columns\np = df.pivot(index='Item', columns='CType')\nprint(p)\n\n\n\n\n         USD                 EU            \nCType Bronze Gold Silver Bronze Gold Silver\nItem                                       \nItem0     2$   1$   None     2\u20ac   1\u20ac   None\nItem1   None   3$     4$   None   3\u20ac     4\u20ac\n\n\n\n# Pivoted DataFrame: p.USD gives a \"sub-DataFrame\" with the USD values only\nprint(p.USD[p.USD.index=='Item0'])\n\n\n\n\nCType Bronze Gold Silver\nItem                    \nItem0     2$   1$   None\n\n\n\n# more precise\nprint(p.USD[p.USD.index=='Item0'].Gold.values)\n\n\n\n\n['1$']\n\n\n\n# Stack/Unstack\ns = df.stack()\nprint(s)\n\n\n\n\n0  Item      Item0\n   CType      Gold\n   USD          1$\n   EU           1\u20ac\n1  Item      Item0\n   CType    Bronze\n   USD          2$\n   EU           2\u20ac\n2  Item      Item1\n   CType      Gold\n   USD          3$\n   EU           3\u20ac\n3  Item      Item1\n   CType    Silver\n   USD          4$\n   EU           4\u20ac\ndtype: object\n\n\n\nu = s.unstack()\nprint(u)\n\n\n\n\n    Item   CType USD  EU\n0  Item0    Gold  1$  1\u20ac\n1  Item0  Bronze  2$  2\u20ac\n2  Item1    Gold  3$  3\u20ac\n3  Item1  Silver  4$  4\u20ac\n\n\n\nReshape a DataFrame with \nmelt()\n\u00b6\n\n\nWhen we have a data that has one or more columns that are identifier variables, while all other columns are considered measured variables.\n\n\n# The `people` DataFrame\npeople = pd.DataFrame({'FirstName' : ['John', 'Jane'],\n                       'LastName' : ['Doe', 'Austen'],\n                       'BloodType' : ['A-', 'B+'],\n                       'Weight' : [90, 64]})\nprint(people)\n\n\n\n\n  BloodType FirstName LastName  Weight\n0        A-      John      Doe      90\n1        B+      Jane   Austen      64\n\n\n\n# Use `melt()` on the `people` DataFrame\nprint(pd.melt(people, id_vars=['FirstName', 'LastName'], var_name='measurements'))\n\n\n\n\n  FirstName LastName measurements value\n0      John      Doe    BloodType    A-\n1      Jane   Austen    BloodType    B+\n2      John      Doe       Weight    90\n3      Jane   Austen       Weight    64\n\n\n\nIterate over a Pandas DataFrame\n\u00b6\n\n\ndf = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)\n\n\n\n\n   A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\n\n\nfor index, row in df.iterrows() :\n    print(row['A'], row['B'])\n\n\n\n\n1 2\n4 5\n7 8\n\n\n\nWrite a Pandas DataFrame to a File\n\u00b6\n\n\nOutput a DataFrame to CSV\n\u00b6\n\n\ndf.to_csv('myDataFrame.csv')\n\n\n\n\ndf.to_csv('myDataFrame2.csv', sep='\\t')\n\n\n\n\ndf.to_csv('myDataFrame3.csv', sep='\\t', encoding='utf-8')\n\n\n\n\nWrite a DataFrame to \nExcel\n\u00b6\n\n\nwriter = pd.ExcelWriter('myDataFrame.xlsx')\ndf.to_excel(writer, 'DataFrame')\nwriter.save()\n# startcol=\n# startrow=\n\n\n\n\nimport xlrd\n\nxlsx = pd.ExcelFile('filetype.xlsx')\nxlsx.sheet_names\n\n\n\n\n['a']\n\n\n\ndf = pd.read_excel(xlsx, 'a')\nprint(df)\n\n\n\n\n   Format Type      Data Description          Reader        Writer\n0         text                   CSV        read_csv        to_csv\n1         text                  JSON       read_json       to_json\n2         text                  HTML       read_html       to_html\n3         text       Local clipboard  read_clipboard  to_clipboard\n4       binary              MS Excel      read_excel      to_excel\n5       binary           HDF5 Format        read_hdf        to_hdf\n6       binary        Feather Format    read_feather    to_feather\n7       binary               Msgpack    read_msgpack    to_msgpack\n8       binary                 Stata      read_stata      to_stata\n9       binary                   SAS        read_sas             \u00a0\n10      binary  Python Pickle Format     read_pickle     to_pickle\n11         SQL                   SQL        read_sql        to_sql\n12         SQL      Google Big Query        read_gbq        to_gbq",
            "title": "Pandas DataFrames"
        },
        {
            "location": "/Pandas+DataFrames/#create-a-pandas-dataframe",
            "text": "First, select the values that are contained in the lists that start with  Row1  and  Row2 , then select the index or row numbers  Row1  and  Row2 , and then the column names  Col1  and  Col2 .  data = np.array([['','Col1','Col2'],\n                ['Row1',1,2],\n                ['Row2',3,4]])\nprint(data)  [['' 'Col1' 'Col2']\n ['Row1' '1' '2']\n ['Row2' '3' '4']]  print(pd.DataFrame(data=data[1:,1:],\n                  index=data[1:,0],\n                  columns=data[0,1:]))       Col1 Col2\nRow1    1    2\nRow2    3    4  # Take a 2D array as input to a DataFrame \nmy_2darray = np.array([[1, 2, 3], [4, 5, 6]])\nprint(pd.DataFrame(my_2darray))     0  1  2\n0  1  2  3\n1  4  5  6  # Take a dictionary as input to a DataFrame \nmy_dict = {1: ['1', '3'], 2: ['1', '2'], 3: ['2', '4']}\nprint(pd.DataFrame(my_dict))     1  2  3\n0  1  1  2\n1  3  2  4  # Take a DataFrame as input to a DataFrame \nmy_df = pd.DataFrame(data=[4,5,6,7], index=range(0,4), columns=['A'])\nprint(pd.DataFrame(my_df))     A\n0  4\n1  5\n2  6\n3  7  # Take a Series as input to a DataFrame\nmy_series = pd.Series({\"United Kingdom\":\"London\", \"India\":\"New Delhi\", \"United States\":\"Washington\", \"Belgium\":\"Brussels\"})\nprint(pd.DataFrame(my_series))                           0\nBelgium           Brussels\nIndia            New Delhi\nUnited Kingdom      London\nUnited States   Washington  df = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6]]))\nprint(df)     0  1  2\n0  1  2  3\n1  4  5  6  # header\nlist(df.columns.values)  [0, 1, 2]  # Use the `shape` property\nprint(df.shape)  (2, 3)  # Or use the `len()` function with the `index` property\nprint(len(df.index))\n# length = rows  2  # exclude the NaN\ndf[0].count()  2",
            "title": "Create a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#fundamental-dataframe-operations",
            "text": "",
            "title": "Fundamental DataFrame Operations"
        },
        {
            "location": "/Pandas+DataFrames/#select-an-index-or-column-from-a-pandas-dataframe",
            "text": "df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A','B','C'])\nprint(df)     A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9",
            "title": "Select an Index or Column from a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#element",
            "text": "# Using `iloc[]`\nprint(df.iloc[0][0])  1  # Using `loc[]`\nprint(df.loc[0]['A'])  1  # Using `at[]`\nprint(df.at[0,'A'])  1  # Using `iat[]`\nprint(df.iat[0,0])  1  # Using `get_value(index, column)`\nprint(df.get_value(0, 'A'))  1",
            "title": "Element"
        },
        {
            "location": "/Pandas+DataFrames/#row-column",
            "text": "# Use `iloc[]` to select a row\nprint(df.iloc[0])  A    1\nB    2\nC    3\nName: 0, dtype: int64  # Use `loc[]` to select a column\nprint(df.loc[:,'A'])  0    1\n1    4\n2    7\nName: A, dtype: int64",
            "title": "Row, Column"
        },
        {
            "location": "/Pandas+DataFrames/#add-an-index-row-or-column-to-a-pandas-dataframe",
            "text": "",
            "title": "Add an Index, Row or Column to a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#add-an-index-to-a-dataframe",
            "text": "# Print out the DataFrame `df` to check it out\nprint(df)     A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9  # Set 'C' as the index of the DataFrame\ndf.set_index('C')   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       A \n       B \n     \n     \n       C \n       \n       \n     \n   \n   \n     \n       3 \n       1 \n       2 \n     \n     \n       6 \n       4 \n       5 \n     \n     \n       9 \n       7 \n       8",
            "title": "Add an Index to a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#add-rows-to-a-dataframe",
            "text": "But before\u2026   loc  works on labels of an index. This means with  loc[2] , we look for the values of the DataFrame that have an index labeled 2.  iloc  works on the positions in the index. This means with  iloc[2] , we look for the values of the DataFrame that are at index \u20182\u2019.  ix  is a more complex case: when the index is integer-based, we pass a label to  ix .  ix[2]  then means that we are looking in the DataFrame for values that have an index labeled  2 . This is just like  loc ! However, if the index is not solely integer-based,  ix  will work with positions, just like  iloc .   df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2, 'A', 4], columns=[48, 49, 50])\nprint(df)     48  49  50\n2   1   2   3\nA   4   5   6\n4   7   8   9  # Pass `2` to `loc`\nprint(df.loc[2])  48    1\n49    2\n50    3\nName: 2, dtype: int64  # Pass `2` to `iloc`\nprint(df.iloc[2])  48    7\n49    8\n50    9\nName: 4, dtype: int64  # Pass `2` to `ix`\nprint(df.ix[2])  Format Type              text\nData Description         HTML\nReader              read_html\nWriter                to_html\nName: 2, dtype: object  Add a row.  df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2.5, 12.6, 4.8], columns=[48, 49, 50])\nprint(df)        48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9  # There's no index labeled `2`, so change the index at position `2`\ndf.ix[2] = [60, 50, 40]\nprint(df)        48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8   60  50  40  # This will make an index labeled `2` and ADD the new values\ndf.loc[2] = [11, 12, 13]\nprint(df)        48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8   60  50  40\n2.0   11  12  13",
            "title": "Add Rows to a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#add-a-column-to-a-dataframe",
            "text": "df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)     A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9  # Use `.index`\ndf['D'] = df.index\n\n# Print `df`\nprint(df)     A  B  C  D\n0  1  2  3  0\n1  4  5  6  1\n2  7  8  9  2  Tell the DataFrame that it should take column A as its index.  df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6]]), columns=[1,2,3])\nprint(df)     1  2  3\n0  1  2  3\n1  4  5  6  # Append a column to `df`\ndf.loc[:, 4] = pd.Series(['5', '6'], index=df.index)\n\n# Print out `df` again to see the changes\nprint(df)     1  2  3  4\n0  1  2  3  5\n1  4  5  6  6",
            "title": "Add a Column to a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#reset-the-index-of-a-dataframe",
            "text": "df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), index= [2.5, 12.6, 4.8], columns=[48, 49, 50])\nprint(df)        48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9  # Use `reset_index()` to reset the values\ndf.reset_index(level=0, drop=True)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       48 \n       49 \n       50 \n     \n   \n   \n     \n       0 \n       1 \n       2 \n       3 \n     \n     \n       1 \n       4 \n       5 \n       6 \n     \n     \n       2 \n       7 \n       8 \n       9",
            "title": "Reset the Index of a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#delete-indices-rows-or-columns-from-a-pandas-data-frame",
            "text": "",
            "title": "Delete Indices, Rows or Columns From a Pandas Data Frame"
        },
        {
            "location": "/Pandas+DataFrames/#delete-an-index-from-a-dataframe",
            "text": "Because DataFrames and Series always have an index.   Reset the index of a DataFrame (go back to the previous section to see how it is done) or  remove the index name, if there is any, by executing del df.index.name,  remove duplicate index values by resetting the index, dropping the duplicates of the index column that has been added to a DataFrame and reinstating that duplicateless column again as the index,  and lastly, remove an index, and with it a row. This is elaborated in one of the next sections.   df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [40, 50, 60], [23, 35, 37]]), \n                  index= [2.5, 12.6, 4.8, 4.8, 2.5], \n                  columns=[48, 49, 50])\nprint(df)        48  49  50\n2.5    1   2   3\n12.6   4   5   6\n4.8    7   8   9\n4.8   40  50  60\n2.5   23  35  37  df.reset_index().drop_duplicates(subset='index', keep='last').set_index('index')   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       48 \n       49 \n       50 \n     \n     \n       index \n       \n       \n       \n     \n   \n   \n     \n       12.6 \n       4 \n       5 \n       6 \n     \n     \n       4.8 \n       40 \n       50 \n       60 \n     \n     \n       2.5 \n       23 \n       35 \n       37",
            "title": "Delete an Index from a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#delete-a-column-from-a-dataframe",
            "text": "df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)     A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9  # Drop the column with label 'A'                  \ndf.drop('A', axis=1, inplace=True)\nprint(df)     B  C\n0  2  3\n1  5  6\n2  8  9  df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\ndf.drop('A', axis=1, inplace=False)\nprint(df)     A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9  df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\n# Drop the column at position 1\ndf.drop(df.columns[[1]], axis=1)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       A \n       C \n     \n   \n   \n     \n       0 \n       1 \n       3 \n     \n     \n       1 \n       4 \n       6 \n     \n     \n       2 \n       7 \n       9",
            "title": "Delete a Column from a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#remove-a-row-from-a-dataframe",
            "text": "df = pd.DataFrame(data=np.array([[1, 2, 3, 4], [4, 5, 6, 5], [7, 8, 9, 6], [23, 50, 60, 7], [23, 35, 37, 23]]), \n                  index= [2.5, 12.6, 4.8, 4.8, 2.5], \n                  columns=[48, 49, 50, 50])\nprint(df)        48  49  50  50\n2.5    1   2   3   4\n12.6   4   5   6   5\n4.8    7   8   9   6\n4.8   23  50  60   7\n2.5   23  35  37  23  # Drop the duplicates in `df`\ndf.drop_duplicates([48], keep='last')   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       48 \n       49 \n       50 \n       50 \n     \n   \n   \n     \n       2.5 \n       1 \n       2 \n       3 \n       4 \n     \n     \n       12.6 \n       4 \n       5 \n       6 \n       5 \n     \n     \n       4.8 \n       7 \n       8 \n       9 \n       6 \n     \n     \n       2.5 \n       23 \n       35 \n       37 \n       23 \n     \n      df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)     A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9  # Drop the index at position 1\nprint(df.drop(df.index[1]))     A  B  C\n0  1  2  3\n2  7  8  9  df.reset_index(level=0, drop=True)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       A \n       B \n       C \n     \n   \n   \n     \n       0 \n       1 \n       2 \n       3 \n     \n     \n       1 \n       4 \n       5 \n       6 \n     \n     \n       2 \n       7 \n       8 \n       9",
            "title": "Remove a Row from a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#rename-the-index-or-columns-of-a-pandas-dataframe",
            "text": "df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)     A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9  # Define the new names of columns\nnewcols = {\n    'A': 'new_column_1', \n    'B': 'new_column_2', \n    'C': 'new_column_3'\n}\n\n# Use `rename()` to rename columns\ndf.rename(columns=newcols, inplace=True)\n\nprint(df)     new_column_1  new_column_2  new_column_3\n0             1             2             3\n1             4             5             6\n2             7             8             9  # Rename the index\ndf.rename(index={1: 'a'})   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       new_column_1 \n       new_column_2 \n       new_column_3 \n     \n   \n   \n     \n       0 \n       1 \n       2 \n       3 \n     \n     \n       a \n       4 \n       5 \n       6 \n     \n     \n       2 \n       7 \n       8 \n       9 \n     \n      df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\n# Define the new names of columns\nnewcols = {\n    'A': 'new_column_1', \n    'B': 'new_column_2', \n    'C': 'new_column_3'\n}\n\n# Use `rename()` to rename columns\ndf2 = df.rename(columns=newcols, inplace=False)\n\nprint(df)\nprint(df2)     A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9\n   new_column_1  new_column_2  new_column_3\n0             1             2             3\n1             4             5             6\n2             7             8             9",
            "title": "Rename the Index or Columns of a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#format-the-data-in-a-pandas-dataframe",
            "text": "",
            "title": "Format The Data in a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#replace-all-occurrences-of-a-string-in-a-dataframe",
            "text": "df = pd.DataFrame(data=np.array([['OK','Perfect','Acceptable'], ['Awful','Awful','Perfect'], ['Acceptable','OK','Poor']]), columns=['Student1','Student2','Student3'])\nprint(df)       Student1 Student2    Student3\n0          OK  Perfect  Acceptable\n1       Awful    Awful     Perfect\n2  Acceptable       OK        Poor  # Replace the strings by numerical values (0-4)\ndf.replace(['Awful', 'Poor', 'OK', 'Acceptable', 'Perfect'], [0, 1, 2, 3, 4])    \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Student1 \n       Student2 \n       Student3 \n     \n   \n   \n     \n       0 \n       2 \n       4 \n       3 \n     \n     \n       1 \n       0 \n       0 \n       4 \n     \n     \n       2 \n       3 \n       2 \n       1 \n     \n      df = pd.DataFrame(data=np.array([['1\\n',2,'3\\n'], ['4',5 ,'6\\n'], ['7','8\\n','9']]), columns=[0,1,2])\nprint(df)       0    1    2\n0  1\\n    2  3\\n\n1    4    5  6\\n\n2    7  8\\n    9  # Replace strings by others with `regex`\ndf.replace({'\\n': '<br>'}, regex=True)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       0 \n       1 \n       2 \n     \n   \n   \n     \n       0 \n       1<br> \n       2 \n       3<br> \n     \n     \n       1 \n       4 \n       5 \n       6<br> \n     \n     \n       2 \n       7 \n       8<br> \n       9",
            "title": "Replace All Occurrences of a String in a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#remove-parts-from-strings-in-the-cells-of-a-dataframe",
            "text": "df = pd.DataFrame(data=np.array([[1,2,'+3b'], [4,5,'-6B'], [7,8,'+9A']]), columns=['class','test','result'])\nprint(df)    class test result\n0     1    2    +3b\n1     4    5    -6B\n2     7    8    +9A  # Delete unwanted parts from the strings in the `result` column\ndf['result'] = df['result'].map(lambda x: x.lstrip('+-').rstrip('aAbBcC'))\n\n# Check out the result again\nprint(df)    class test result\n0     1    2      3\n1     4    5      6\n2     7    8      9  Use  map()  on the column  result  to apply the lambda function over each element or element-wise of the column. The function in itself takes the string value and strips the  +  or  -  that\u2019s located on the left, and also strips away any of the six  aAbBcC  on the right.",
            "title": "Remove Parts from Strings in the Cells of a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#split-text-in-a-column-into-multiple-rows-in-a-dataframe",
            "text": "df = pd.DataFrame(data=np.array([[34,0,'23:44:55'], [22,0,'66:77:88'], [19,1,'43:68:05 56:34:12']]), columns=['Age','PlusOne','Ticket'])\nprint(df)                        Age PlusOne             Ticket\n0  34       0           23:44:55\n1  22       0           66:77:88\n2  19       1  43:68:05 56:34:12  # Split out the two values in the third row\n# Make it a Series\n# Stack the values\nticket_series = df['Ticket'].str.split(' ').apply(pd.Series, 1).stack()\nprint(ticket_series)  0  0    23:44:55\n1  0    66:77:88\n2  0    43:68:05\n   1    56:34:12\ndtype: object  # Get rid of the stack:\n# Drop the level to line up with the DataFrame\nticket_series.index = ticket_series.index.droplevel(-1)  # Make a series a dataframe \nticketdf = pd.DataFrame(ticket_series)  # Delete the `Ticket` column from a DataFrame\ndel df['Ticket']  # Check out the new `df`\nprint(df)    Age PlusOne\n0  34       0\n1  22       0\n2  19       1  print(ticketdf)            0\n0  23:44:55\n1  66:77:88\n2  43:68:05\n2  56:34:12  # Join the ticket DataFrame to `df`\ndf.join(ticketdf)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Age \n       PlusOne \n       0 \n     \n   \n   \n     \n       0 \n       34 \n       0 \n       23:44:55 \n     \n     \n       1 \n       22 \n       0 \n       66:77:88 \n     \n     \n       2 \n       19 \n       1 \n       43:68:05 \n     \n     \n       2 \n       19 \n       1 \n       56:34:12 \n     \n      First, inspect the DataFrame at hand. The values in the last row and in the last column are a bit too long. It appears there are two tickets because a guest has taken a plus-one to the concert.  Take the  Ticket  column from the DataFrame  df  and strings on a space. This will make sure that the two tickets will end up in two separate rows in the end. Next, take these four values (the four ticket numbers) and put them into a Series object. That still doesn\u2019t seem quite right. There are  NaN  values in there! Stack the Series to make sure they don\u2019t have any  NaN  values in the resulting Series.  Next, stack the Series.  That is not ideal either. Drop the level to line up with the DataFrame.  Transform a Series to a DataFrame to make sure we can join it back to the initial DataFrame. However, to avoid having any duplicates in the DataFrame, delete the original  Ticket  column.",
            "title": "Split Text in a Column into Multiple Rows in a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#apply-a-function-to-a-pandas-dataframes-columns-or-rows",
            "text": "df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)     A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9  # A lambda function\ndoubler = lambda x: x*2\n\n# Apply the `doubler` function to the `A` DataFrame column\ndf['A'].apply(doubler)  0     2\n1     8\n2    14\nName: A, dtype: int64  df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\ndf.loc[0].apply(doubler)  A    2\nB    4\nC    6\nName: 0, dtype: int64  df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\ndf.iloc[0].apply(doubler)  A    2\nB    4\nC    6\nName: 0, dtype: int64  df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\ndf['A'].apply(doubler)  0     2\n1     8\n2    14\nName: A, dtype: int64  df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\ndf.applymap(doubler)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       A \n       B \n       C \n     \n   \n   \n     \n       0 \n       2 \n       4 \n       6 \n     \n     \n       1 \n       8 \n       10 \n       12 \n     \n     \n       2 \n       14 \n       16 \n       18 \n     \n      df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\n\ndef doubler(x):\n    if x % 2 == 0:\n        return x\n    else:\n        return x * 2\n\n# Use `applymap()` to apply `doubler()` to a DataFrame\ndf.applymap(doubler)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       A \n       B \n       C \n     \n   \n   \n     \n       0 \n       2 \n       2 \n       6 \n     \n     \n       1 \n       4 \n       10 \n       6 \n     \n     \n       2 \n       14 \n       8 \n       18 \n     \n      # Check the DataFrame\nprint(df)     A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9",
            "title": "Apply a Function to a Pandas DataFrame\u2019s Columns or Rows"
        },
        {
            "location": "/Pandas+DataFrames/#create-an-empty-dataframe",
            "text": "numpy.nan  has type float.  df = pd.DataFrame(np.nan, index=[0,1,2,3], columns=['A'])\nprint(df)      A\n0 NaN\n1 NaN\n2 NaN\n3 NaN  Add an attribute.  df = pd.DataFrame(index=range(0,4),columns=['A'], dtype='float')\nprint(df)      A\n0 NaN\n1 NaN\n2 NaN\n3 NaN",
            "title": "Create an Empty DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#does-pandas-recognize-dates-when-importing-data",
            "text": "df = pd.read_csv('date.csv', header=0, parse_dates=True)\nprint(df)       unit      date\n0  6.1101  02/08/16\n1  5.5277  08/07/16\n2  8.5186  09/05/16\n3  7.0032  20/03/16  # or this option:\ndf = pd.read_csv('date.csv', header=0, parse_dates=['date'])\nprint(df)       unit       date\n0  6.1101 2016-02-08\n1  5.5277 2016-08-07\n2  8.5186 2016-09-05\n3  7.0032 2016-03-20  The second code succeeded.",
            "title": "Does Pandas Recognize Dates when Importing Data?"
        },
        {
            "location": "/Pandas+DataFrames/#when-why-and-how-we-should-reshape-a-dataframe",
            "text": "",
            "title": "When, Why and How we should Reshape a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#pivot-a-dataframe",
            "text": "Values: this argument allows to specify which values of the original DataFrame we want to see in the pivot table.  Columns: whatever is passed to this argument will become a column in the resulting table.  Index: whatever is passed to this argument will become an index in the resulting table.   products = pd.DataFrame({'category': ['Cleaning', 'Cleaning', 'Entertainment', 'Entertainment', 'Tech', 'Tech'],\n                        'store': ['Walmart', 'Dia', 'Walmart', 'Fnac', 'Dia','Walmart'],\n                        'price':[11.42, 23.50, 19.99, 15.95, 55.75, 111.55],\n                        'testscore': [4, 3, 5, 7, 5, 8]})\nprint(products)          category   price    store  testscore\n0       Cleaning   11.42  Walmart          4\n1       Cleaning   23.50      Dia          3\n2  Entertainment   19.99  Walmart          5\n3  Entertainment   15.95     Fnac          7\n4           Tech   55.75      Dia          5\n5           Tech  111.55  Walmart          8  # Use `pivot()` to pivot the DataFrame\npivot_products = products.pivot(index='category', columns='store', values='price')\n\n# Check out the result\nprint(pivot_products)  store            Dia   Fnac  Walmart\ncategory                            \nCleaning       23.50    NaN    11.42\nEntertainment    NaN  15.95    19.99\nTech           55.75    NaN   111.55  Without specific values.  products = pd.DataFrame({'category': ['Cleaning', 'Cleaning', 'Entertainment', 'Entertainment', 'Tech', 'Tech'],\n                        'store': ['Walmart', 'Dia', 'Walmart', 'Fnac', 'Dia','Walmart'],\n                        'price':[11.42, 23.50, 19.99, 15.95, 55.75, 111.55],\n                        'testscore': [4, 3, 5, 7, 5, 8]})\n\n# Use `pivot()` to pivot the DataFrame\npivot_products = products.pivot(index='category', columns='store')\n\n# Check out the results\nprint(pivot_products)                 price                testscore             \nstore            Dia   Fnac Walmart       Dia Fnac Walmart\ncategory                                                  \nCleaning       23.50    NaN   11.42       3.0  NaN     4.0\nEntertainment    NaN  15.95   19.99       NaN  7.0     5.0\nTech           55.75    NaN  111.55       5.0  NaN     8.0  pivot_table()  can add a function:  mean .  # The DataFrame\nproducts = pd.DataFrame({'category': ['Cleaning', 'Cleaning', 'Entertainment', 'Entertainment', 'Tech', 'Tech'],\n                        'store': ['Walmart', 'Dia', 'Walmart', 'Fnac', 'Dia','Walmart'],\n                        'price':[11.42, 23.50, 19.99, 15.95, 19.99, 111.55],\n                        'testscore': [4, 3, 5, 7, 5, 8]})\n\n# Pivot the `products` DataFrame with `pivot_table()`\npivot_products = products.pivot_table(index='category', columns='store', values='price', aggfunc='mean')\n\n# Check out the results\nprint(pivot_products)  store            Dia   Fnac  Walmart\ncategory                            \nCleaning       23.50    NaN    11.42\nEntertainment    NaN  15.95    19.99\nTech           19.99    NaN   111.55",
            "title": "Pivot a DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#use-stack-and-unstack-to-reshape-a-pandas-dataframe",
            "text": "When we stack a DataFrame, we make it taller. Move the innermost column index to become the innermost row index.  Much like  stack() , use  unstack()  to move the innermost row index to become the innermost column index.  from collections import OrderedDict\nfrom pandas import DataFrame\nimport pandas as pd\nimport numpy as np\n\ntable = OrderedDict((\n    (\"Item\", ['Item0', 'Item0', 'Item1', 'Item1']),\n    ('CType',['Gold', 'Bronze', 'Gold', 'Silver']),\n    ('USD',  ['1$', '2$', '3$', '4$']),\n    ('EU',   ['1\u20ac', '2\u20ac', '3\u20ac', '4\u20ac'])\n))\ndf = DataFrame(table)\nprint(df)      Item   CType USD  EU\n0  Item0    Gold  1$  1\u20ac\n1  Item0  Bronze  2$  2\u20ac\n2  Item1    Gold  3$  3\u20ac\n3  Item1  Silver  4$  4\u20ac  # Original DataFrame: Access the USD cost of Item0 for Gold customers\nprint(df[(df.Item=='Item0') & (df.CType=='Gold')].USD.values)  ['1$']  # Column pivot\np = df.pivot(index='Item', columns='CType')\nprint(p)           USD                 EU            \nCType Bronze Gold Silver Bronze Gold Silver\nItem                                       \nItem0     2$   1$   None     2\u20ac   1\u20ac   None\nItem1   None   3$     4$   None   3\u20ac     4\u20ac  # Pivoted DataFrame: p.USD gives a \"sub-DataFrame\" with the USD values only\nprint(p.USD[p.USD.index=='Item0'])  CType Bronze Gold Silver\nItem                    \nItem0     2$   1$   None  # more precise\nprint(p.USD[p.USD.index=='Item0'].Gold.values)  ['1$']  # Pivoting By Multiple Columns\np = df.pivot(index='Item', columns='CType')\nprint(p)           USD                 EU            \nCType Bronze Gold Silver Bronze Gold Silver\nItem                                       \nItem0     2$   1$   None     2\u20ac   1\u20ac   None\nItem1   None   3$     4$   None   3\u20ac     4\u20ac  # Pivoted DataFrame: p.USD gives a \"sub-DataFrame\" with the USD values only\nprint(p.USD[p.USD.index=='Item0'])  CType Bronze Gold Silver\nItem                    \nItem0     2$   1$   None  # more precise\nprint(p.USD[p.USD.index=='Item0'].Gold.values)  ['1$']  # Stack/Unstack\ns = df.stack()\nprint(s)  0  Item      Item0\n   CType      Gold\n   USD          1$\n   EU           1\u20ac\n1  Item      Item0\n   CType    Bronze\n   USD          2$\n   EU           2\u20ac\n2  Item      Item1\n   CType      Gold\n   USD          3$\n   EU           3\u20ac\n3  Item      Item1\n   CType    Silver\n   USD          4$\n   EU           4\u20ac\ndtype: object  u = s.unstack()\nprint(u)      Item   CType USD  EU\n0  Item0    Gold  1$  1\u20ac\n1  Item0  Bronze  2$  2\u20ac\n2  Item1    Gold  3$  3\u20ac\n3  Item1  Silver  4$  4\u20ac",
            "title": "Use stack() and unstack() to Reshape a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#reshape-a-dataframe-with-melt",
            "text": "When we have a data that has one or more columns that are identifier variables, while all other columns are considered measured variables.  # The `people` DataFrame\npeople = pd.DataFrame({'FirstName' : ['John', 'Jane'],\n                       'LastName' : ['Doe', 'Austen'],\n                       'BloodType' : ['A-', 'B+'],\n                       'Weight' : [90, 64]})\nprint(people)    BloodType FirstName LastName  Weight\n0        A-      John      Doe      90\n1        B+      Jane   Austen      64  # Use `melt()` on the `people` DataFrame\nprint(pd.melt(people, id_vars=['FirstName', 'LastName'], var_name='measurements'))    FirstName LastName measurements value\n0      John      Doe    BloodType    A-\n1      Jane   Austen    BloodType    B+\n2      John      Doe       Weight    90\n3      Jane   Austen       Weight    64",
            "title": "Reshape a DataFrame with melt()"
        },
        {
            "location": "/Pandas+DataFrames/#iterate-over-a-pandas-dataframe",
            "text": "df = pd.DataFrame(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['A', 'B', 'C'])\nprint(df)     A  B  C\n0  1  2  3\n1  4  5  6\n2  7  8  9  for index, row in df.iterrows() :\n    print(row['A'], row['B'])  1 2\n4 5\n7 8",
            "title": "Iterate over a Pandas DataFrame"
        },
        {
            "location": "/Pandas+DataFrames/#write-a-pandas-dataframe-to-a-file",
            "text": "",
            "title": "Write a Pandas DataFrame to a File"
        },
        {
            "location": "/Pandas+DataFrames/#output-a-dataframe-to-csv",
            "text": "df.to_csv('myDataFrame.csv')  df.to_csv('myDataFrame2.csv', sep='\\t')  df.to_csv('myDataFrame3.csv', sep='\\t', encoding='utf-8')",
            "title": "Output a DataFrame to CSV"
        },
        {
            "location": "/Pandas+DataFrames/#write-a-dataframe-to-excel",
            "text": "writer = pd.ExcelWriter('myDataFrame.xlsx')\ndf.to_excel(writer, 'DataFrame')\nwriter.save()\n# startcol=\n# startrow=  import xlrd\n\nxlsx = pd.ExcelFile('filetype.xlsx')\nxlsx.sheet_names  ['a']  df = pd.read_excel(xlsx, 'a')\nprint(df)     Format Type      Data Description          Reader        Writer\n0         text                   CSV        read_csv        to_csv\n1         text                  JSON       read_json       to_json\n2         text                  HTML       read_html       to_html\n3         text       Local clipboard  read_clipboard  to_clipboard\n4       binary              MS Excel      read_excel      to_excel\n5       binary           HDF5 Format        read_hdf        to_hdf\n6       binary        Feather Format    read_feather    to_feather\n7       binary               Msgpack    read_msgpack    to_msgpack\n8       binary                 Stata      read_stata      to_stata\n9       binary                   SAS        read_sas             \u00a0\n10      binary  Python Pickle Format     read_pickle     to_pickle\n11         SQL                   SQL        read_sql        to_sql\n12         SQL      Google Big Query        read_gbq        to_gbq",
            "title": "Write a DataFrame to Excel"
        },
        {
            "location": "/Write Idiomatic Pandas Code/",
            "text": "CONTENT\n\n\nLoad and Explore the Data\n\n\nThe Data\n\n\nQuickly Inspecting the Data\n\n\n\n\n\n\nIndex and Pull Values\n\n\nMethod Chaining\n\n\nClean the Data\n\n\nConcatenate into a single DataFrame\n\n\n\n\n\n\nMemory Optimization\n\n\nCast Object Types\n\n\n\n\n\n\nReplace, Rank, Subset, Groupby\n\n\nReplace\n\n\nRank, Subset, Groupby\n\n\n\n\n\n\nVisualization\n\n\nMatplotlib\n\n\nRemove values\n\n\nSeaborn\n\n\nFilter rows\n\n\nCorrelation\n\n\n\n\n\n\nTo go beyond\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nLoad and Explore the Data\n\u00b6\n\n\nThe Data\n\u00b6\n\n\nThe datasets are downloadable from \nKaggle\n.\n\n\n%pylab inline\nimport pandas as pd\n\n# Import Times Higher Education World University Rankings data\n# https://www.timeshighereducation.com/world-university-rankings\ntimes_df = pd.read_csv('timesData.csv', thousands=\",\")\n\n# Import Academic Ranking of World Universities data\n# http://www.shanghairanking.com/\nshanghai_df = pd.read_csv('shanghaiData.csv')\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\nQuickly Inspecting the Data\n\u00b6\n\n\n# Return the first rows of `times_df`\ntimes_df.head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nworld_rank\n\n      \nuniversity_name\n\n      \ncountry\n\n      \nteaching\n\n      \ninternational\n\n      \nresearch\n\n      \ncitations\n\n      \nincome\n\n      \ntotal_score\n\n      \nnum_students\n\n      \nstudent_staff_ratio\n\n      \ninternational_students\n\n      \nfemale_male_ratio\n\n      \nyear\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \nHarvard University\n\n      \nUnited States of America\n\n      \n99.7\n\n      \n72.4\n\n      \n98.7\n\n      \n98.8\n\n      \n34.5\n\n      \n96.1\n\n      \n20152.0\n\n      \n8.9\n\n      \n25%\n\n      \nNaN\n\n      \n2011\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \nCalifornia Institute of Technology\n\n      \nUnited States of America\n\n      \n97.7\n\n      \n54.6\n\n      \n98.0\n\n      \n99.9\n\n      \n83.7\n\n      \n96.0\n\n      \n2243.0\n\n      \n6.9\n\n      \n27%\n\n      \n33 : 67\n\n      \n2011\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nMassachusetts Institute of Technology\n\n      \nUnited States of America\n\n      \n97.8\n\n      \n82.3\n\n      \n91.4\n\n      \n99.9\n\n      \n87.5\n\n      \n95.6\n\n      \n11074.0\n\n      \n9.0\n\n      \n33%\n\n      \n37 : 63\n\n      \n2011\n\n    \n\n    \n\n      \n3\n\n      \n4\n\n      \nStanford University\n\n      \nUnited States of America\n\n      \n98.3\n\n      \n29.5\n\n      \n98.1\n\n      \n99.2\n\n      \n64.3\n\n      \n94.3\n\n      \n15596.0\n\n      \n7.8\n\n      \n22%\n\n      \n42 : 58\n\n      \n2011\n\n    \n\n    \n\n      \n4\n\n      \n5\n\n      \nPrinceton University\n\n      \nUnited States of America\n\n      \n90.9\n\n      \n70.3\n\n      \n95.4\n\n      \n99.9\n\n      \n-\n\n      \n94.2\n\n      \n7929.0\n\n      \n8.4\n\n      \n27%\n\n      \n45 : 55\n\n      \n2011\n\n    \n\n  \n\n\n\n\n\n\n\n# Describe `times_df`\ntimes_df.describe()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nteaching\n\n      \nresearch\n\n      \ncitations\n\n      \nnum_students\n\n      \nstudent_staff_ratio\n\n      \nyear\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n2603.000000\n\n      \n2603.000000\n\n      \n2603.000000\n\n      \n2544.000000\n\n      \n2544.000000\n\n      \n2603.000000\n\n    \n\n    \n\n      \nmean\n\n      \n37.801498\n\n      \n35.910257\n\n      \n60.921629\n\n      \n23873.758648\n\n      \n18.445283\n\n      \n2014.075682\n\n    \n\n    \n\n      \nstd\n\n      \n17.604218\n\n      \n21.254805\n\n      \n23.073219\n\n      \n17675.946877\n\n      \n11.458698\n\n      \n1.685733\n\n    \n\n    \n\n      \nmin\n\n      \n9.900000\n\n      \n2.900000\n\n      \n1.200000\n\n      \n462.000000\n\n      \n0.600000\n\n      \n2011.000000\n\n    \n\n    \n\n      \n25%\n\n      \n24.700000\n\n      \n19.600000\n\n      \n45.500000\n\n      \n12637.750000\n\n      \n11.975000\n\n      \n2013.000000\n\n    \n\n    \n\n      \n50%\n\n      \n33.900000\n\n      \n30.500000\n\n      \n62.500000\n\n      \n20851.000000\n\n      \n16.100000\n\n      \n2014.000000\n\n    \n\n    \n\n      \n75%\n\n      \n46.400000\n\n      \n47.250000\n\n      \n79.050000\n\n      \n29991.000000\n\n      \n21.500000\n\n      \n2016.000000\n\n    \n\n    \n\n      \nmax\n\n      \n99.700000\n\n      \n99.400000\n\n      \n100.000000\n\n      \n379231.000000\n\n      \n162.600000\n\n      \n2016.000000\n\n    \n\n  \n\n\n\n\n\n\n\n# Return the first rows of `shanghai_df`\nshanghai_df.head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nworld_rank\n\n      \nuniversity_name\n\n      \nnational_rank\n\n      \ntotal_score\n\n      \nalumni\n\n      \naward\n\n      \nhici\n\n      \nns\n\n      \npub\n\n      \npcp\n\n      \nyear\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \nHarvard University\n\n      \n1\n\n      \n100.0\n\n      \n100.0\n\n      \n100.0\n\n      \n100.0\n\n      \n100.0\n\n      \n100.0\n\n      \n72.4\n\n      \n2005\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \nUniversity of Cambridge\n\n      \n1\n\n      \n73.6\n\n      \n99.8\n\n      \n93.4\n\n      \n53.3\n\n      \n56.6\n\n      \n70.9\n\n      \n66.9\n\n      \n2005\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nStanford University\n\n      \n2\n\n      \n73.4\n\n      \n41.1\n\n      \n72.2\n\n      \n88.5\n\n      \n70.9\n\n      \n72.3\n\n      \n65.0\n\n      \n2005\n\n    \n\n    \n\n      \n3\n\n      \n4\n\n      \nUniversity of California, Berkeley\n\n      \n3\n\n      \n72.8\n\n      \n71.8\n\n      \n76.0\n\n      \n69.4\n\n      \n73.9\n\n      \n72.2\n\n      \n52.7\n\n      \n2005\n\n    \n\n    \n\n      \n4\n\n      \n5\n\n      \nMassachusetts Institute of Technology (MIT)\n\n      \n4\n\n      \n70.1\n\n      \n74.0\n\n      \n80.6\n\n      \n66.7\n\n      \n65.8\n\n      \n64.3\n\n      \n53.0\n\n      \n2005\n\n    \n\n  \n\n\n\n\n\n\n\n# Describe `shanghai_df`\nshanghai_df.describe()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ntotal_score\n\n      \nalumni\n\n      \naward\n\n      \nhici\n\n      \nns\n\n      \npub\n\n      \npcp\n\n      \nyear\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n1101.000000\n\n      \n4896.000000\n\n      \n4895.00000\n\n      \n4895.000000\n\n      \n4875.000000\n\n      \n4895.000000\n\n      \n4895.000000\n\n      \n4897.000000\n\n    \n\n    \n\n      \nmean\n\n      \n36.383470\n\n      \n9.161724\n\n      \n7.69191\n\n      \n16.221491\n\n      \n16.078503\n\n      \n38.254648\n\n      \n21.242329\n\n      \n2009.658566\n\n    \n\n    \n\n      \nstd\n\n      \n13.557186\n\n      \n14.140636\n\n      \n15.49411\n\n      \n14.382710\n\n      \n12.511529\n\n      \n13.050809\n\n      \n9.254351\n\n      \n3.197576\n\n    \n\n    \n\n      \nmin\n\n      \n23.500000\n\n      \n0.000000\n\n      \n0.00000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n7.300000\n\n      \n8.300000\n\n      \n2005.000000\n\n    \n\n    \n\n      \n25%\n\n      \n27.400000\n\n      \n0.000000\n\n      \n0.00000\n\n      \n7.300000\n\n      \n8.000000\n\n      \n28.900000\n\n      \n15.600000\n\n      \n2007.000000\n\n    \n\n    \n\n      \n50%\n\n      \n31.300000\n\n      \n0.000000\n\n      \n0.00000\n\n      \n12.600000\n\n      \n12.800000\n\n      \n36.000000\n\n      \n19.000000\n\n      \n2009.000000\n\n    \n\n    \n\n      \n75%\n\n      \n41.800000\n\n      \n15.600000\n\n      \n13.40000\n\n      \n21.700000\n\n      \n19.800000\n\n      \n45.300000\n\n      \n24.500000\n\n      \n2012.000000\n\n    \n\n    \n\n      \nmax\n\n      \n100.000000\n\n      \n100.000000\n\n      \n100.00000\n\n      \n100.000000\n\n      \n100.000000\n\n      \n100.000000\n\n      \n100.000000\n\n      \n2015.000000\n\n    \n\n  \n\n\n\n\n\n\n\nIndex and Pull Values\n\u00b6\n\n\n[]\n for row numbers or column names, \nloc[]\n, \niloc[]\n, \nquery\n.\n\n\n# Retrieve the total score of the first row\nprint(times_df.loc[0, 'total_score'])\n\n\n\n\n96.1\n\n\n\n# Retrieve rows 0 and 1\nprint(times_df[0:2])\n\n\n\n\n  world_rank                     university_name                   country  \\\n0          1                  Harvard University  United States of America   \n1          2  California Institute of Technology  United States of America\n\n   teaching international  research  citations income total_score  \\\n0      99.7          72.4      98.7       98.8   34.5        96.1   \n1      97.7          54.6      98.0       99.9   83.7        96.0\n\n   num_students  student_staff_ratio international_students female_male_ratio  \\\n0       20152.0                  8.9                    25%               NaN   \n1        2243.0                  6.9                    27%           33 : 67\n\n   year  \n0  2011  \n1  2011\n\n\n\n# Retrieve the values at columns and rows 1-3\nprint(times_df.iloc[1:4,1:4])\n\n\n\n\n                         university_name                   country  teaching\n1     California Institute of Technology  United States of America      97.7\n2  Massachusetts Institute of Technology  United States of America      97.8\n3                    Stanford University  United States of America      98.3\n\n\n\n# Retrieve the column `total_score` \nprint(times_df['total_score'])\n\n\n\n\n0       96.1\n1       96.0\n2       95.6\n3       94.3\n4       94.2\n5       91.2\n6       91.2\n7       91.1\n8       90.6\n9       89.5\n10      87.7\n11      86.9\n12      86.4\n13      83.9\n14      83.4\n15      83.4\n16      82.0\n17      81.0\n18      79.5\n19      79.3\n20      79.2\n21      78.4\n22      78.0\n23      76.5\n24      75.9\n25      75.6\n26      75.3\n27      75.1\n28      75.0\n29      73.8\n        ... \n2573       -\n2574       -\n2575       -\n2576       -\n2577       -\n2578       -\n2579       -\n2580       -\n2581       -\n2582       -\n2583       -\n2584       -\n2585       -\n2586       -\n2587       -\n2588       -\n2589       -\n2590       -\n2591       -\n2592       -\n2593       -\n2594       -\n2595       -\n2596       -\n2597       -\n2598       -\n2599       -\n2600       -\n2601       -\n2602       -\nName: total_score, Length: 2603, dtype: object\n\n\n\n# Are the last entries after 2006?\nprint(shanghai_df.loc[:-10, 'year'] > 2006)\n\n\n\n\nSeries([], Name: year, dtype: bool)\n\n\n\n# Was the alumni count higher than 90 for the first ten universities?\nprint(shanghai_df.loc[0:11, 'alumni'] > 90)\n\n\n\n\n0      True\n1      True\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\nName: alumni, dtype: bool\n\n\n\n# Query `shanghai_df` for universities with total score between 40 and 50\naverage_schools = shanghai_df.query('total_score > 0 and total_score < 50')\n\n# Print the result\nprint(average_schools)\n\n\n\n\n     world_rank                                    university_name  \\\n15           16                  University of Wisconsin - Madison   \n16           17                           University of Washington   \n17           18            University of California, San Francisco   \n18           19                       The Johns Hopkins University   \n19           20                            The University of Tokyo   \n20           21                 University of Michigan - Ann Arbor   \n21           22                                   Kyoto University   \n22           23  The Imperial College of Science, Technology an...   \n23           24                              University of Toronto   \n24           25         University of Illinois at Urbana-Champaign   \n25           26                          University College London   \n26           27       Swiss Federal Institute of Technology Zurich   \n27           28                 Washington University in St. Louis   \n28           29                                New York University   \n29           30                             Rockefeller University   \n30           31                            Northwestern University   \n31           32                                    Duke University   \n32           32               University of Minnesota, Twin Cities   \n33           34            University of California, Santa Barbara   \n34           35                  University of Colorado at Boulder   \n35           36                  The University of Texas at Austin   \n36           37                     University of British Columbia   \n37           38  The University of Texas Southwestern Medical C...   \n38           39    Pennsylvania State University - University Park   \n39           39                              Vanderbilt University   \n40           41                    University of California, Davis   \n41           41                                 Utrecht University   \n42           43  Rutgers, The State University of New Jersey - ...   \n43           43                           University of Pittsburgh   \n44           45                               Karolinska Institute   \n...         ...                                                ...   \n4467         71                                   Ghent University   \n4468         72                   Ecole Normale Superieure - Paris   \n4469         73                                  Aarhus University   \n4470         73                                  Boston University   \n4471         75                                   Brown University   \n4472         75                            University of Groningen   \n4473         77                                  Nagoya University   \n4474         77                               Stockholm University   \n4475         77            Technion-Israel Institute of Technology   \n4476         77                 The Australian National University   \n4477         77                       The University of Queensland   \n4478         82                                  Leiden University   \n4479         83                              University of Florida   \n4480         84                                    Rice University   \n4481         85                                   Osaka University   \n4482         86                            Moscow State University   \n4483         87                The University of Western Australia   \n4484         87                                University of Basel   \n4485         87                           University of Strasbourg   \n4486         90                                          KU Leuven   \n4487         90                              University of Arizona   \n4488         92                              University of Warwick   \n4489         93                           Arizona State University   \n4490         93               University of California, Santa Cruz   \n4491         93                                 University of Utah   \n4492         96                                McMaster University   \n4493         97                                 University of Bonn   \n4494         98                            VU University Amsterdam   \n4495         99                          Michigan State University   \n4496        100                               Texas A&M University\n\n     national_rank  total_score  alumni  award  hici    ns   pub   pcp  year  \n15              14         49.2    43.0   36.3  52.1  46.3  68.7  29.0  2005  \n16              15         48.4    28.8   32.4  53.9  47.1  73.8  27.2  2005  \n17              16         47.8     0.0   37.6  55.6  57.9  58.8  45.2  2005  \n18              17         46.9    51.4   28.3  41.6  52.2  67.7  24.9  2005  \n19               1         46.7    36.0   14.4  38.5  52.1  86.5  34.7  2005  \n20              18         44.9    43.0    0.0  61.9  43.0  76.5  30.9  2005  \n21               2         43.8    39.7   34.1  34.2  37.0  72.3  31.1  2005  \n22               3         43.7    20.8   38.1  40.8  38.2  64.6  40.3  2005  \n23               1         43.1    28.1   19.7  39.3  38.9  76.7  41.9  2005  \n24              19         42.8    41.6   37.4  44.4  34.1  58.0  26.0  2005  \n25               4         42.6    30.7   32.9  37.7  41.5  60.5  38.8  2005  \n26               1         41.7    40.2   37.0  35.1  41.1  43.4  52.4  2005  \n27              20         40.7    25.1   26.6  38.5  46.5  53.9  39.9  2005  \n28              21         38.8    33.8   25.0  43.0  35.3  55.4  26.3  2005  \n29              22         38.2    22.6   59.8  28.3  44.1  24.0  35.9  2005  \n30              23         37.9    21.7   19.3  44.4  33.8  57.6  36.2  2005  \n31              24         37.7    20.8    0.0  47.1  45.3  60.8  38.9  2005  \n32              24         37.7    36.0    0.0  49.7  35.2  68.4  23.8  2005  \n33              26         36.9     0.0   36.0  42.3  39.0  44.1  35.8  2005  \n34              27         36.3    16.6   29.8  40.8  36.6  46.3  29.5  2005  \n35              28         35.5    21.7   17.1  49.1  30.0  54.8  21.7  2005  \n36               2         35.4    20.8   19.3  32.4  32.5  60.4  33.9  2005  \n37              29         34.8    24.3   33.9  31.4  38.2  37.9  31.0  2005  \n38              30         33.4    14.0    0.0  45.8  37.9  59.9  24.0  2005  \n39              30         33.4    12.5   30.2  34.2  24.5  49.2  35.6  2005  \n40              32         32.9     0.0    0.0  46.5  34.5  64.0  29.8  2005  \n41               1         32.9    30.7   21.4  27.2  27.3  55.7  25.9  2005  \n42              33         32.3    15.4   20.4  36.9  32.9  47.1  24.1  2005  \n43              33         32.3    25.1    0.0  40.1  25.9  64.3  28.2  2005  \n44               1         32.1    30.7   27.8  33.3  19.7  47.3  25.1  2005  \n...            ...          ...     ...    ...   ...   ...   ...   ...   ...  \n4467             1         27.8     5.1   13.3  26.9  18.3  57.5  34.5  2015  \n4468             3         27.6    48.9   28.0   6.2  19.5  26.4  60.5  2015  \n4469             2         27.3    11.5   22.1  12.3  25.8  51.8  31.0  2015  \n4470            42         27.3    11.5   11.5  29.1  26.3  49.5  21.8  2015  \n4471            43         27.0    14.5   13.3  26.2  25.1  43.6  32.8  2015  \n4472             2         27.0     0.0   18.8  23.0  21.0  52.6  32.7  2015  \n4473             3         26.7    29.0   25.3  16.8  17.7  44.3  23.1  2015  \n4474             3         26.7    24.1   27.4  18.1  19.4  40.4  25.6  2015  \n4475             2         26.7    23.5   37.6  15.2  18.3  33.3  28.2  2015  \n4476             2         26.7    13.6   19.2  24.8  20.1  45.1  29.1  2015  \n4477             2         26.7    12.6    0.0  22.0  24.0  63.2  29.3  2015  \n4478             3         26.5    17.8    9.4  25.7  22.0  46.9  32.9  2015  \n4479            44         26.2    17.0    0.0  30.9  21.0  58.7  17.3  2015  \n4480            45         26.0    16.2   21.7  28.1  22.8  29.2  34.3  2015  \n4481             4         25.7     8.9    0.0  31.6  26.7  51.7  21.7  2015  \n4482             1         25.3    41.4   33.0   0.0   7.7  46.4  31.3  2015  \n4483             4         24.9    13.6   14.1  24.1  14.5  47.5  28.9  2015  \n4484             4         24.9    19.2   16.3  17.4  21.4  39.2  35.0  2015  \n4485             4         24.9    25.1   28.8  15.9  19.0  34.6  21.7  2015  \n4486             2         24.7     0.0    0.0  30.1  18.6  56.6  30.4  2015  \n4487            46         24.7    14.5    0.0  27.2  27.5  48.4  20.3  2015  \n4488             9         24.6     0.0   29.8  23.7  14.0  39.3  26.8  2015  \n4489            47         24.5     0.0   20.0  22.2  25.5  42.6  19.1  2015  \n4490            47         24.5     0.0    0.0  37.9  33.9  29.0  37.6  2015  \n4491            47         24.5     0.0   11.5  26.5  25.5  46.7  18.7  2015  \n4492             4         24.4    12.6   18.8  23.2  15.1  44.5  22.5  2015  \n4493             4         24.3    15.4   19.8  17.4  21.1  39.8  25.9  2015  \n4494             4         24.2     0.0    0.0  27.8  18.0  55.5  33.3  2015  \n4495            50         24.0     8.9    0.0  30.7  21.8  50.6  18.9  2015  \n4496            51         23.9     0.0    0.0  34.3  22.7  49.5  20.9  2015\n\n[948 rows x 11 columns]\n\n\n\nshanghai_df.query(\"national_rank == 1 and world_rank == 1\")\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nworld_rank\n\n      \nuniversity_name\n\n      \nnational_rank\n\n      \ntotal_score\n\n      \nalumni\n\n      \naward\n\n      \nhici\n\n      \nns\n\n      \npub\n\n      \npcp\n\n      \nyear\n\n    \n\n  \n\n  \n\n  \n\n\n\n\n\n\n\nshanghai_df.query(\"alumni < 20\")\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nworld_rank\n\n      \nuniversity_name\n\n      \nnational_rank\n\n      \ntotal_score\n\n      \nalumni\n\n      \naward\n\n      \nhici\n\n      \nns\n\n      \npub\n\n      \npcp\n\n      \nyear\n\n    \n\n  \n\n  \n\n    \n\n      \n12\n\n      \n13\n\n      \nUniversity of California, San Diego\n\n      \n11\n\n      \n51.0\n\n      \n17.7\n\n      \n34.7\n\n      \n59.8\n\n      \n56.5\n\n      \n64.5\n\n      \n46.6\n\n      \n2005\n\n    \n\n    \n\n      \n17\n\n      \n18\n\n      \nUniversity of California, San Francisco\n\n      \n16\n\n      \n47.8\n\n      \n0.0\n\n      \n37.6\n\n      \n55.6\n\n      \n57.9\n\n      \n58.8\n\n      \n45.2\n\n      \n2005\n\n    \n\n    \n\n      \n33\n\n      \n34\n\n      \nUniversity of California, Santa Barbara\n\n      \n26\n\n      \n36.9\n\n      \n0.0\n\n      \n36.0\n\n      \n42.3\n\n      \n39.0\n\n      \n44.1\n\n      \n35.8\n\n      \n2005\n\n    \n\n    \n\n      \n34\n\n      \n35\n\n      \nUniversity of Colorado at Boulder\n\n      \n27\n\n      \n36.3\n\n      \n16.6\n\n      \n29.8\n\n      \n40.8\n\n      \n36.6\n\n      \n46.3\n\n      \n29.5\n\n      \n2005\n\n    \n\n    \n\n      \n38\n\n      \n39\n\n      \nPennsylvania State University - University Park\n\n      \n30\n\n      \n33.4\n\n      \n14.0\n\n      \n0.0\n\n      \n45.8\n\n      \n37.9\n\n      \n59.9\n\n      \n24.0\n\n      \n2005\n\n    \n\n    \n\n      \n39\n\n      \n39\n\n      \nVanderbilt University\n\n      \n30\n\n      \n33.4\n\n      \n12.5\n\n      \n30.2\n\n      \n34.2\n\n      \n24.5\n\n      \n49.2\n\n      \n35.6\n\n      \n2005\n\n    \n\n    \n\n      \n40\n\n      \n41\n\n      \nUniversity of California, Davis\n\n      \n32\n\n      \n32.9\n\n      \n0.0\n\n      \n0.0\n\n      \n46.5\n\n      \n34.5\n\n      \n64.0\n\n      \n29.8\n\n      \n2005\n\n    \n\n    \n\n      \n42\n\n      \n43\n\n      \nRutgers, The State University of New Jersey - ...\n\n      \n33\n\n      \n32.3\n\n      \n15.4\n\n      \n20.4\n\n      \n36.9\n\n      \n32.9\n\n      \n47.1\n\n      \n24.1\n\n      \n2005\n\n    \n\n    \n\n      \n47\n\n      \n47\n\n      \nUniversity of California, Irvine\n\n      \n35\n\n      \n31.8\n\n      \n0.0\n\n      \n30.0\n\n      \n32.4\n\n      \n28.5\n\n      \n48.2\n\n      \n31.1\n\n      \n2005\n\n    \n\n    \n\n      \n49\n\n      \n50\n\n      \nUniversity of Southern California\n\n      \n37\n\n      \n31.7\n\n      \n0.0\n\n      \n27.3\n\n      \n37.7\n\n      \n23.6\n\n      \n52.8\n\n      \n25.8\n\n      \n2005\n\n    \n\n    \n\n      \n54\n\n      \n55\n\n      \nUniversity of North Carolina at Chapel Hill\n\n      \n39\n\n      \n30.3\n\n      \n12.5\n\n      \n0.0\n\n      \n35.1\n\n      \n32.8\n\n      \n59.5\n\n      \n27.3\n\n      \n2005\n\n    \n\n    \n\n      \n55\n\n      \n56\n\n      \nThe Australian National University\n\n      \n1\n\n      \n30.2\n\n      \n17.7\n\n      \n12.9\n\n      \n36.9\n\n      \n29.0\n\n      \n45.1\n\n      \n27.8\n\n      \n2005\n\n    \n\n    \n\n      \n57\n\n      \n57\n\n      \nUniversity of Florida\n\n      \n40\n\n      \n30.0\n\n      \n15.4\n\n      \n0.0\n\n      \n35.1\n\n      \n25.0\n\n      \n65.2\n\n      \n25.8\n\n      \n2005\n\n    \n\n    \n\n      \n58\n\n      \n57\n\n      \nUniversity of Zurich\n\n      \n2\n\n      \n30.0\n\n      \n12.5\n\n      \n27.3\n\n      \n19.2\n\n      \n30.3\n\n      \n47.2\n\n      \n30.6\n\n      \n2005\n\n    \n\n    \n\n      \n61\n\n      \n62\n\n      \nOsaka University\n\n      \n3\n\n      \n29.3\n\n      \n12.5\n\n      \n0.0\n\n      \n23.6\n\n      \n31.1\n\n      \n66.8\n\n      \n29.2\n\n      \n2005\n\n    \n\n    \n\n      \n62\n\n      \n63\n\n      \nThe Ohio State University - Columbus\n\n      \n41\n\n      \n29.2\n\n      \n17.7\n\n      \n0.0\n\n      \n40.8\n\n      \n21.5\n\n      \n61.2\n\n      \n19.5\n\n      \n2005\n\n    \n\n    \n\n      \n63\n\n      \n64\n\n      \nUniversity of Bristol\n\n      \n7\n\n      \n28.8\n\n      \n10.9\n\n      \n18.2\n\n      \n30.4\n\n      \n24.5\n\n      \n47.5\n\n      \n27.4\n\n      \n2005\n\n    \n\n    \n\n      \n70\n\n      \n71\n\n      \nUniversity of Heidelberg\n\n      \n3\n\n      \n28.0\n\n      \n10.9\n\n      \n27.7\n\n      \n20.8\n\n      \n20.9\n\n      \n48.1\n\n      \n26.9\n\n      \n2005\n\n    \n\n    \n\n      \n72\n\n      \n73\n\n      \nTohoku University\n\n      \n4\n\n      \n27.8\n\n      \n18.8\n\n      \n0.0\n\n      \n19.2\n\n      \n26.9\n\n      \n65.3\n\n      \n29.0\n\n      \n2005\n\n    \n\n    \n\n      \n73\n\n      \n73\n\n      \nUniversity of Arizona\n\n      \n44\n\n      \n27.8\n\n      \n0.0\n\n      \n0.0\n\n      \n29.4\n\n      \n36.8\n\n      \n55.8\n\n      \n25.7\n\n      \n2005\n\n    \n\n    \n\n      \n74\n\n      \n75\n\n      \nPurdue University - West Lafayette\n\n      \n45\n\n      \n27.7\n\n      \n18.8\n\n      \n17.1\n\n      \n27.2\n\n      \n21.4\n\n      \n49.8\n\n      \n19.4\n\n      \n2005\n\n    \n\n    \n\n      \n75\n\n      \n76\n\n      \nUniversity of Helsinki\n\n      \n1\n\n      \n27.4\n\n      \n18.8\n\n      \n18.2\n\n      \n15.7\n\n      \n21.4\n\n      \n54.5\n\n      \n27.5\n\n      \n2005\n\n    \n\n    \n\n      \n76\n\n      \n77\n\n      \nMichigan State University\n\n      \n46\n\n      \n26.9\n\n      \n12.5\n\n      \n0.0\n\n      \n37.7\n\n      \n26.6\n\n      \n51.0\n\n      \n18.7\n\n      \n2005\n\n    \n\n    \n\n      \n79\n\n      \n80\n\n      \nBoston University\n\n      \n48\n\n      \n26.1\n\n      \n15.4\n\n      \n0.0\n\n      \n31.4\n\n      \n28.1\n\n      \n50.8\n\n      \n17.5\n\n      \n2005\n\n    \n\n    \n\n      \n80\n\n      \n80\n\n      \nKing's College London\n\n      \n9\n\n      \n26.1\n\n      \n16.6\n\n      \n23.5\n\n      \n20.8\n\n      \n17.4\n\n      \n44.6\n\n      \n24.8\n\n      \n2005\n\n    \n\n    \n\n      \n81\n\n      \n82\n\n      \nUniversity of Melbourne\n\n      \n2\n\n      \n26.0\n\n      \n15.4\n\n      \n14.4\n\n      \n22.2\n\n      \n18.7\n\n      \n53.5\n\n      \n19.9\n\n      \n2005\n\n    \n\n    \n\n      \n82\n\n      \n83\n\n      \nUniversity of Nottingham\n\n      \n10\n\n      \n25.9\n\n      \n15.4\n\n      \n20.4\n\n      \n20.8\n\n      \n19.0\n\n      \n45.6\n\n      \n24.8\n\n      \n2005\n\n    \n\n    \n\n      \n85\n\n      \n86\n\n      \nBrown University\n\n      \n49\n\n      \n25.4\n\n      \n0.0\n\n      \n13.9\n\n      \n29.4\n\n      \n25.5\n\n      \n40.7\n\n      \n27.9\n\n      \n2005\n\n    \n\n    \n\n      \n86\n\n      \n87\n\n      \nIndiana University Bloomington\n\n      \n50\n\n      \n25.2\n\n      \n14.0\n\n      \n18.2\n\n      \n24.8\n\n      \n21.2\n\n      \n42.0\n\n      \n18.2\n\n      \n2005\n\n    \n\n    \n\n      \n88\n\n      \n89\n\n      \nTexas A&M University - College Station\n\n      \n51\n\n      \n25.1\n\n      \n0.0\n\n      \n0.0\n\n      \n32.4\n\n      \n24.4\n\n      \n55.0\n\n      \n20.4\n\n      \n2005\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n4867\n\n      \n401-500\n\n      \nUniversity of Jena\n\n      \n29-39\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n9.3\n\n      \n34.0\n\n      \n17.1\n\n      \n2015\n\n    \n\n    \n\n      \n4868\n\n      \n401-500\n\n      \nUniversity of Jyvaskyla\n\n      \n4-6\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n10.3\n\n      \n26.7\n\n      \n14.1\n\n      \n2015\n\n    \n\n    \n\n      \n4869\n\n      \n401-500\n\n      \nUniversity of Konstanz\n\n      \n29-39\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n12.1\n\n      \n11.4\n\n      \n22.2\n\n      \n13.5\n\n      \n2015\n\n    \n\n    \n\n      \n4870\n\n      \n401-500\n\n      \nUniversity of KwaZulu-Natal\n\n      \n3-4\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n8.4\n\n      \n32.8\n\n      \n16.6\n\n      \n2015\n\n    \n\n    \n\n      \n4871\n\n      \n401-500\n\n      \nUniversity of Ljubljana\n\n      \n1\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n7.7\n\n      \n35.1\n\n      \n14.2\n\n      \n2015\n\n    \n\n    \n\n      \n4872\n\n      \n401-500\n\n      \nUniversity of Maryland, Baltimore County\n\n      \n126-146\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n17.4\n\n      \n6.5\n\n      \n17.8\n\n      \n17.3\n\n      \n2015\n\n    \n\n    \n\n      \n4873\n\n      \n401-500\n\n      \nUniversity of Milan - Bicocca\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n5.0\n\n      \n5.6\n\n      \n30.9\n\n      \n21.4\n\n      \n2015\n\n    \n\n    \n\n      \n4874\n\n      \n401-500\n\n      \nUniversity of Nice Sophia Antipolis\n\n      \n19-22\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n16.3\n\n      \n26.2\n\n      \n12.7\n\n      \n2015\n\n    \n\n    \n\n      \n4875\n\n      \n401-500\n\n      \nUniversity of Oklahoma - Norman\n\n      \n126-146\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n5.1\n\n      \n10.0\n\n      \n28.0\n\n      \n14.0\n\n      \n2015\n\n    \n\n    \n\n      \n4876\n\n      \n401-500\n\n      \nUniversity of Palermo\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n6.3\n\n      \n6.6\n\n      \n28.2\n\n      \n14.8\n\n      \n2015\n\n    \n\n    \n\n      \n4877\n\n      \n401-500\n\n      \nUniversity of Parma\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n13.6\n\n      \n2.1\n\n      \n26.7\n\n      \n19.6\n\n      \n2015\n\n    \n\n    \n\n      \n4878\n\n      \n401-500\n\n      \nUniversity of Pavia\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n5.0\n\n      \n5.7\n\n      \n30.7\n\n      \n19.7\n\n      \n2015\n\n    \n\n    \n\n      \n4879\n\n      \n401-500\n\n      \nUniversity of Perugia\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n7.5\n\n      \n29.3\n\n      \n18.5\n\n      \n2015\n\n    \n\n    \n\n      \n4880\n\n      \n401-500\n\n      \nUniversity of Quebec\n\n      \n19-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n9.8\n\n      \n33.3\n\n      \n16.8\n\n      \n2015\n\n    \n\n    \n\n      \n4881\n\n      \n401-500\n\n      \nUniversity of Regensburg\n\n      \n29-39\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n13.9\n\n      \n27.7\n\n      \n15.2\n\n      \n2015\n\n    \n\n    \n\n      \n4882\n\n      \n401-500\n\n      \nUniversity of Rennes 1\n\n      \n19-22\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n9.2\n\n      \n28.1\n\n      \n11.2\n\n      \n2015\n\n    \n\n    \n\n      \n4883\n\n      \n401-500\n\n      \nUniversity of Rhode Island\n\n      \n126-146\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n15.2\n\n      \n6.1\n\n      \n21.1\n\n      \n16.0\n\n      \n2015\n\n    \n\n    \n\n      \n4884\n\n      \n401-500\n\n      \nUniversity of Roma - Tor Vergata\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n8.8\n\n      \n33.7\n\n      \n19.2\n\n      \n2015\n\n    \n\n    \n\n      \n4885\n\n      \n401-500\n\n      \nUniversity of Rostock\n\n      \n29-39\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n8.6\n\n      \n8.4\n\n      \n25.0\n\n      \n13.5\n\n      \n2015\n\n    \n\n    \n\n      \n4886\n\n      \n401-500\n\n      \nUniversity of Santiago Compostela\n\n      \n9-13\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n7.1\n\n      \n6.1\n\n      \n31.1\n\n      \n13.2\n\n      \n2015\n\n    \n\n    \n\n      \n4887\n\n      \n401-500\n\n      \nUniversity of Science, Malaysia\n\n      \n2\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n7.1\n\n      \n3.3\n\n      \n30.6\n\n      \n15.7\n\n      \n2015\n\n    \n\n    \n\n      \n4888\n\n      \n401-500\n\n      \nUniversity of Seville\n\n      \n9-13\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n7.5\n\n      \n33.7\n\n      \n11.3\n\n      \n2015\n\n    \n\n    \n\n      \n4889\n\n      \n401-500\n\n      \nUniversity of Surrey\n\n      \n34-37\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n8.6\n\n      \n4.9\n\n      \n27.0\n\n      \n18.0\n\n      \n2015\n\n    \n\n    \n\n      \n4890\n\n      \n401-500\n\n      \nUniversity of Szeged\n\n      \n1-2\n\n      \nNaN\n\n      \n0.0\n\n      \n13.3\n\n      \n3.6\n\n      \n3.4\n\n      \n21.8\n\n      \n12.8\n\n      \n2015\n\n    \n\n    \n\n      \n4891\n\n      \n401-500\n\n      \nUniversity of the Basque Country\n\n      \n9-13\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n3.6\n\n      \n7.1\n\n      \n36.1\n\n      \n13.5\n\n      \n2015\n\n    \n\n    \n\n      \n4892\n\n      \n401-500\n\n      \nUniversity of Trieste\n\n      \n11-20\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n5.0\n\n      \n10.9\n\n      \n25.1\n\n      \n20.1\n\n      \n2015\n\n    \n\n    \n\n      \n4893\n\n      \n401-500\n\n      \nUniversity of Zaragoza\n\n      \n9-13\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n7.6\n\n      \n5.1\n\n      \n33.3\n\n      \n13.1\n\n      \n2015\n\n    \n\n    \n\n      \n4894\n\n      \n401-500\n\n      \nUtah State University\n\n      \n126-146\n\n      \nNaN\n\n      \n13.6\n\n      \n0.0\n\n      \n3.6\n\n      \n10.8\n\n      \n25.1\n\n      \n15.5\n\n      \n2015\n\n    \n\n    \n\n      \n4895\n\n      \n401-500\n\n      \nVienna University of Technology\n\n      \n4-6\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n0.0\n\n      \n12.2\n\n      \n28.8\n\n      \n22.9\n\n      \n2015\n\n    \n\n    \n\n      \n4896\n\n      \n401-500\n\n      \nWake Forest University\n\n      \n126-146\n\n      \nNaN\n\n      \n0.0\n\n      \n0.0\n\n      \n14.9\n\n      \n7.5\n\n      \n25.0\n\n      \n11.9\n\n      \n2015\n\n    \n\n  \n\n\n\n\n4122 rows \u00d7 11 columns\n\n\n\n\n\nMethod Chaining\n\u00b6\n\n\npipe()\n to chain operations and thus eliminate the need for intermediate DataFrames.\n\n\nWithout this operator, instead of writing \ndf.pipe(f).pipe(g).pipe(h)\n write: \nh(g(f(df)))\n. This becomes harder to follow once the number of nested functions grows large.\n\n\n# Extract info\ndef extract_info(input_df, name):\n    df = input_df.copy()\n    info_df = pd.DataFrame({'nb_rows': df.shape[0], 'nb_cols': df.shape[1], 'name': name}, index=range(1))\n    return info_df\n\n\n\n\n# Gather all info   \nall_info = pd.concat([times_df.pipe(extract_info, 'times'), shanghai_df.pipe(extract_info, 'shanghai')])\n\nprint(all_info)\n\n\n\n\n       name  nb_cols  nb_rows\n0     times       14     2603\n0  shanghai       11     4897\n\n\n\nSelect the common columns.\n\n\ncommon_columns = set(shanghai_df.columns) & set(times_df.columns)\n\n# Return `common_columns`\nprint(common_columns)\n\n\n\n\n{'year', 'university_name', 'total_score', 'world_rank'}\n\n\n\nClean the Data\n\u00b6\n\n\n# Clean up the `world_rank` \ndef clean_world_rank(input_df):\n    df = input_df.copy()\n    df.world_rank = df.world_rank.str.split('-').str[0].str.split('=').str[0]\n    return df\n\n\n\n\n# Assign the common years of `shanghai_df` and `times_df` to `common_years`    \ncommon_years = set(shanghai_df.year) & set(times_df.year) \n\n# Print `common_years`\nprint(common_years)\n\n\n\n\n{2011, 2012, 2013, 2014, 2015}\n\n\n\n# Filter years\ndef filter_year(input_df, years):\n    df = input_df.copy()\n    return df.query('year in {}'.format(list(years)))\n\n\n\n\n# Clean `times_df` and `shanghai_df`\ncleaned_times_df = (times_df.loc[:, common_columns]\n                            .pipe(filter_year, common_years)\n                            .pipe(clean_world_rank)\n                            .assign(name='times'))\ncleaned_shanghai_df = (shanghai_df.loc[:, common_columns]\n                                  .pipe(filter_year, common_years)\n                                  .pipe(clean_world_rank)\n                                  .assign(name='shanghai'))\n\n\n\n\nConcatenate into a single DataFrame\n\u00b6\n\n\n38% of data missing from the \ntotal_score column\n: drop this column with the \n.drop\n method.\n\n\n# Compose `ranking_df` with `cleaned_times_df` and `cleaned_shanghai_df`\nranking_df = pd.concat([cleaned_times_df, cleaned_shanghai_df])\n\n# Calculate the percentage of missing data\nmissing_data = 100 * pd.isnull(ranking_df.total_score).sum() / len(ranking_df)\n\n# Drop the `total_score` column of `ranking_df`\nranking_df = ranking_df.drop('total_score', axis=1)\n\n\n\n\nMemory Optimization\n\u00b6\n\n\nMemory can start to play a big part in how fast the pipelines can run. Without the \u201cdeep\u201d flag turned on, Pandas won\u2019t estimate memory consumption for the \nobject\n dtype: \ncategory\n when dealing with categorical data, etc. \nint64\n or even \nint16\n takes less memory.\n\n\n# Print the memory usage of `ranking_df` \nranking_df.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nworld_rank         3686 non-null object\nuniversity_name    3685 non-null object\nname               3686 non-null object\ndtypes: int64(1), object(3)\nmemory usage: 144.0+ KB\n\n\n\n# Print the deep memory usage of `ranking_df` \nranking_df.info(memory_usage=\"deep\")\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nworld_rank         3686 non-null object\nuniversity_name    3685 non-null object\nname               3686 non-null object\ndtypes: int64(1), object(3)\nmemory usage: 803.1 KB\n\n\n\nCast Object Types\n\u00b6\n\n\n\u2026to more appropriate ones.\n\n\ndef memory_change(input_df, column, dtype):\n    df = input_df.copy()\n    old = round(df[column].memory_usage(deep=True) / 1024, 2) # In KB\n    new = round(df[column].astype(dtype).memory_usage(deep=True) / 1024, 2)# In KB\n    change = round(100 * (old - new) / (old), 2)\n    report = (\"The inital memory footprint for {column} is: {old}KB.\\n\" \n              \"The casted {column} now takes: {new}KB.\\n\"\n              \"A change of {change} %.\").format(**locals())\n    return report\n\n\n\n\n# parameters:\n# input_df, column, dtype\nprint(memory_change(ranking_df,'world_rank', 'int16'))\n\n\n\n\nThe inital memory footprint for world_rank is: 244.43KB.\nThe casted world_rank now takes: 36.0KB.\nA change of 85.27 %.\n\n\n\nprint(memory_change(ranking_df,'university_name', 'category'))\n\n\n\n\nThe inital memory footprint for university_name is: 329.98KB.\nThe casted university_name now takes: 121.37KB.\nA change of 63.22 %.\n\n\n\nprint(memory_change(ranking_df,'name', 'category'))\n\n\n\n\nThe inital memory footprint for name is: 257.49KB.\nThe casted name now takes: 32.6KB.\nA change of 87.34 %.\n\n\n\n# Cast `world_rank` as type `int16`\nranking_df.world_rank = ranking_df.world_rank.astype('int16')\n\n\n\n\n# Cast `unversity_name` as type `category`\nranking_df.university_name = ranking_df.university_name.astype('category')\n\n\n\n\n# Cast `name` as type `category`\nranking_df.name = ranking_df.name.astype('category')\n\n\n\n\n# Double check the memory usage after type casting\nranking_df.info(memory_usage='deep')\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nuniversity_name    3685 non-null category\nworld_rank         3686 non-null int16\nname               3686 non-null category\ndtypes: category(2), int16(1), int64(1)\nmemory usage: 161.2 KB\n\n\n\nFrom 803.1 KB!\n\n\nWe have a well-formed data set (i.e. it is in a tidy state) with an optimized memory footprint, data analysis can start.\n\n\nReplace, Rank, Subset, \nGroupby\n\u00b6\n\n\nReplace\n\u00b6\n\n\n\u2018Massachusetts Institute of Technology (MIT)\u2019 and \u2018Massachusetts Institute of Technology\u2019 are two different records of the same university. Thus, change the first name to the latter.\n\n\n# Query for the rows with university name 'Massachusetts Institute of Technology (MIT)'\nprint(ranking_df.query(\"university_name == 'Massachusetts Institute of Technology (MIT)'\"))\n\n\n\n\n      year                              university_name  world_rank      name\n3016  2011  Massachusetts Institute of Technology (MIT)           3  shanghai\n3516  2012  Massachusetts Institute of Technology (MIT)           3  shanghai\n3801  2013  Massachusetts Institute of Technology (MIT)           4  shanghai\n3899  2014  Massachusetts Institute of Technology (MIT)           3  shanghai\n4399  2015  Massachusetts Institute of Technology (MIT)           3  shanghai\n\n\n\nranking_df.loc[ranking_df.university_name == 'Massachusetts Institute of Technology (MIT)', 'university_name'] = 'Massachusetts Institute of Technology'\n\n\n\n\nranking_df.university_name.head()\n\n\n\n\n0                       Harvard University\n1       California Institute of Technology\n2    Massachusetts Institute of Technology\n3                      Stanford University\n4                     Princeton University\nName: university_name, dtype: category\nCategories (785, object): [Aalborg University, Aalto University, Aarhus University, Aberystwyth University, ..., \u00c9cole Normale Sup\u00e9rieure, \u00c9cole Normale Sup\u00e9rieure de Lyon, \u00c9cole Polytechnique, \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne]\n\n\n\nRank, Subset, \nGroupby\n\u00b6\n\n\nTo find the 5 (more generally \nn\n) top universities over the years, for each ranking system, here is how to do it in pseudo-code:\n\n\n\n\nFor each year (in the \nyear\n column) and for each ranking system (in the \nname\n column):\n\n\nSelect the subset of the data for this given year and the given ranking system.\n\n\nSelect the 5 top universities and store them in a list.\n\n\nStore the result in a dictionary with (year, name) as key and the list of the universities (in descending order) as the value.\n\n\n\n\n\n\n\n\n# Load in `itertools`\nimport itertools\n\n# Initialize `ranking`\nranking = {}\n\nfor year, name in itertools.product(common_years, [\"times\", \"shanghai\"]):\n    s = (ranking_df.loc[lambda df: ((df.year == year) & (df.name == name)\n                                    & (df.world_rank.isin(range(1,6)))), :]\n                   .sort_values('world_rank', ascending=False)\n                   .university_name)\n    ranking[(year, name)] = list(s)\n\n\n# Print `ranking`\nprint(ranking)\n\n\n\n\n{(2011, 'times'): ['Princeton University', 'Stanford University', 'Massachusetts Institute of Technology', 'California Institute of Technology', 'Harvard University'], (2011, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2012, 'times'): ['Princeton University', 'University of Oxford', 'Harvard University', 'Stanford University', 'California Institute of Technology'], (2012, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2013, 'times'): ['Massachusetts Institute of Technology', 'Harvard University', 'Stanford University', 'University of Oxford', 'California Institute of Technology'], (2013, 'shanghai'): ['University of Cambridge', 'Massachusetts Institute of Technology', 'University of California, Berkeley', 'Stanford University', 'Harvard University'], (2014, 'times'): ['Massachusetts Institute of Technology', 'Stanford University', 'Harvard University', 'University of Oxford', 'California Institute of Technology'], (2014, 'shanghai'): ['University of Cambridge', 'University of California-Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2015, 'times'): ['University of Cambridge', 'Stanford University', 'University of Oxford', 'Harvard University', 'California Institute of Technology'], (2015, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University']}\n\n\n\nWe have this ranking dictionary, let\u2019s find out how much (in percentage) both ranking methods differ over the years: the two are 100% set-similar if the selected 5-top universities are the same even though they aren\u2019t ranked the same.\n\n\n# Import `defaultdict`\nfrom collections import defaultdict\n\n# Initialize `compare`\ncompare = defaultdict(list)\n\n# Initialize `exact_similarity` and `set_similarity`\nexact_similarity = {}\nset_similarity = {}\n\nfor (year, method), universities in ranking.items():\n    compare[year].append(universities)\n\nfor year, ranks in compare.items():\n    set_similarity[year] = 100 * len(set(ranks[0]) & set(ranks[1])) / 5.0\n\n# Print `set_similarity`  \nprint(set_similarity)\n\n\n\n\n{2011: 60.0, 2012: 40.0, 2013: 60.0, 2014: 60.0, 2015: 60.0}\n\n\n\nIs there a better, more idiomatic Pandas way?\n\n\n# Construct a DataFrame with the top 5 universities \ntop_5_df = ranking_df.loc[lambda df: df.world_rank.isin(range(1, 6)), :]\n\n# Print the first rows of `top_5_df`\ntop_5_df.head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nyear\n\n      \nuniversity_name\n\n      \nworld_rank\n\n      \nname\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2011\n\n      \nHarvard University\n\n      \n1\n\n      \ntimes\n\n    \n\n    \n\n      \n1\n\n      \n2011\n\n      \nCalifornia Institute of Technology\n\n      \n2\n\n      \ntimes\n\n    \n\n    \n\n      \n2\n\n      \n2011\n\n      \nMassachusetts Institute of Technology\n\n      \n3\n\n      \ntimes\n\n    \n\n    \n\n      \n3\n\n      \n2011\n\n      \nStanford University\n\n      \n4\n\n      \ntimes\n\n    \n\n    \n\n      \n4\n\n      \n2011\n\n      \nPrinceton University\n\n      \n5\n\n      \ntimes\n\n    \n\n  \n\n\n\n\n\n\n\ntop_5_df.tail()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nyear\n\n      \nuniversity_name\n\n      \nworld_rank\n\n      \nname\n\n    \n\n  \n\n  \n\n    \n\n      \n4397\n\n      \n2015\n\n      \nHarvard University\n\n      \n1\n\n      \nshanghai\n\n    \n\n    \n\n      \n4398\n\n      \n2015\n\n      \nStanford University\n\n      \n2\n\n      \nshanghai\n\n    \n\n    \n\n      \n4399\n\n      \n2015\n\n      \nMassachusetts Institute of Technology\n\n      \n3\n\n      \nshanghai\n\n    \n\n    \n\n      \n4400\n\n      \n2015\n\n      \nUniversity of California, Berkeley\n\n      \n4\n\n      \nshanghai\n\n    \n\n    \n\n      \n4401\n\n      \n2015\n\n      \nUniversity of Cambridge\n\n      \n5\n\n      \nshanghai\n\n    \n\n  \n\n\n\n\n\n\n\n# Compute the similarity\ndef compute_set_similarity(s):\n    pivoted = s.pivot(values='world_rank', columns='name', index='university_name').dropna()\n    set_simlarity = 100 * len((set(pivoted['shanghai'].index) & set(pivoted['times'].index))) / 5\n    return set_simlarity\n\n# Group `top_5_df` by `year`    \ngrouped_df = top_5_df.groupby('year')\n\n# Use `compute_set_similarity` to construct a DataFrame\nsetsimilarity_df = pd.DataFrame({'set_similarity': grouped_df.apply(compute_set_similarity)}).reset_index()\n\n# Print the first rows of `setsimilarity_df`\nsetsimilarity_df.head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nyear\n\n      \nset_similarity\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2011\n\n      \n60.0\n\n    \n\n    \n\n      \n1\n\n      \n2012\n\n      \n40.0\n\n    \n\n    \n\n      \n2\n\n      \n2013\n\n      \n60.0\n\n    \n\n    \n\n      \n3\n\n      \n2014\n\n      \n60.0\n\n    \n\n    \n\n      \n4\n\n      \n2015\n\n      \n60.0\n\n    \n\n  \n\n\n\n\n\n\n\nVisualization\n\u00b6\n\n\nMatplotlib\n\u00b6\n\n\nimport matplotlib.pyplot as plt\n\n\n\n\n# Plot a scatterplot with `total_score` and `alumni`\nshanghai_df.plot.scatter('total_score', 'alumni', c='year', colormap='viridis')\n\nplt.show()\n\n\n\n\n\n\nRemove values\n\u00b6\n\n\nThere are some 0 values for the alumni column (0, -, \nNaN\n, etc.). Remove them.\n\n\n# Replace `-` entries with NaN values\ntimes_df['total_score'] = times_df['total_score'].replace(\"-\", \"NaN\").astype('float')\n\n# Drop all rows with NaN values for `num_students` \ntimes_df = times_df.dropna(subset=['num_students'], how='all')\n\n# Cast the remaining rows with `num_students` as int\ntimes_df['num_students'] = times_df['num_students'].astype('int')\n\n\n\n\n# Plot a scatterplot with `total_score` and `num_students`\ntimes_df.plot.scatter('total_score', 'num_students', c='year', colormap='viridis')\n\nplt.show()\n\n\n\n\n\n\nSeaborn\n\u00b6\n\n\nThe Seaborn plotting tool is mainly used to create statistical plots that are visually appealing.\n\n\nimport seaborn as sns\n\n# Set the Seaborn theme if desired\nsns.set_style('darkgrid')\n\n\n\n\n# Abbreviate country names of United States and United Kingdom\ntimes_df['country'] = times_df['country'].replace(\"United States of America\", \"USA\").replace(\"United Kingdom\", \"UK\")\n\n# Count the frequency of countries \ncount = times_df['country'].value_counts()[:10]\n\n# Convert the top 10 countries to a DataFrame \ndf = count.to_frame()\n\n\n\n\n# Reset the index \n#df.reset_index(level=0, inplace=True)\n# or...\ndf['index1'] = df.index\n\ndf\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ncountry\n\n      \nindex1\n\n    \n\n  \n\n  \n\n    \n\n      \nUSA\n\n      \n625\n\n      \nUSA\n\n    \n\n    \n\n      \nUK\n\n      \n286\n\n      \nUK\n\n    \n\n    \n\n      \nGermany\n\n      \n150\n\n      \nGermany\n\n    \n\n    \n\n      \nAustralia\n\n      \n117\n\n      \nAustralia\n\n    \n\n    \n\n      \nCanada\n\n      \n108\n\n      \nCanada\n\n    \n\n    \n\n      \nJapan\n\n      \n98\n\n      \nJapan\n\n    \n\n    \n\n      \nItaly\n\n      \n94\n\n      \nItaly\n\n    \n\n    \n\n      \nChina\n\n      \n82\n\n      \nChina\n\n    \n\n    \n\n      \nNetherlands\n\n      \n75\n\n      \nNetherlands\n\n    \n\n    \n\n      \nFrance\n\n      \n73\n\n      \nFrance\n\n    \n\n  \n\n\n\n\n\n\n\n# Rename the columns\ndf.columns = ['count', 'country',]\n\n\n\n\n# Plot a barplot with `country` and `count`\nsns.barplot(x='country', y='count', data=df)\nsns.despine()\n\nplt.show()\n\n\n\n\n\n\nFilter rows\n\u00b6\n\n\ntimes_df_filtered = times_df.loc[times_df['country'].isin(['USA', 'UK', 'Canada', 'Australia', 'Germany'])]\n\n\n\n\n# Barplot with `country` and `total_score`\nsns.barplot(x='country', y='total_score', data=times_df_filtered)\nsns.despine()\n\nplt.show()\n\n\n\n\n\n\nCorrelation\n\u00b6\n\n\nimport numpy as np\n\nnp.seterr(invalid='ignore')\n\n\n\n\n{'divide': 'warn', 'invalid': 'warn', 'over': 'warn', 'under': 'ignore'}\n\n\n\nsns.pairplot(times_df, hue='country')\n\nplt.show()\n\n\n\n\n\n\ng = sns.FacetGrid(times_df_filtered, col='country', hue='country')\ng.map(sns.regplot, 'year', 'total_score').set(xlim=(2010, 2015), ylim=(0,100))\ng.fig.subplots_adjust(wspace=.2)\n\n\n\n\n\n\nsns.set(style=\"white\")\n\n# Compute the correlation matrix\ncorr = times_df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3,\n            square=True, linewidths=.5, ax=ax)\n\nplt.show()\n\n\n\n\n\n\nTo go beyond\n\u00b6\n\n\nwith \nGroup-by\n.",
            "title": "Write Idiomatic Pandas Code"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#the-data",
            "text": "The datasets are downloadable from  Kaggle .  %pylab inline\nimport pandas as pd\n\n# Import Times Higher Education World University Rankings data\n# https://www.timeshighereducation.com/world-university-rankings\ntimes_df = pd.read_csv('timesData.csv', thousands=\",\")\n\n# Import Academic Ranking of World Universities data\n# http://www.shanghairanking.com/\nshanghai_df = pd.read_csv('shanghaiData.csv')  Populating the interactive namespace from numpy and matplotlib",
            "title": "The Data"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#quickly-inspecting-the-data",
            "text": "# Return the first rows of `times_df`\ntimes_df.head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       world_rank \n       university_name \n       country \n       teaching \n       international \n       research \n       citations \n       income \n       total_score \n       num_students \n       student_staff_ratio \n       international_students \n       female_male_ratio \n       year \n     \n   \n   \n     \n       0 \n       1 \n       Harvard University \n       United States of America \n       99.7 \n       72.4 \n       98.7 \n       98.8 \n       34.5 \n       96.1 \n       20152.0 \n       8.9 \n       25% \n       NaN \n       2011 \n     \n     \n       1 \n       2 \n       California Institute of Technology \n       United States of America \n       97.7 \n       54.6 \n       98.0 \n       99.9 \n       83.7 \n       96.0 \n       2243.0 \n       6.9 \n       27% \n       33 : 67 \n       2011 \n     \n     \n       2 \n       3 \n       Massachusetts Institute of Technology \n       United States of America \n       97.8 \n       82.3 \n       91.4 \n       99.9 \n       87.5 \n       95.6 \n       11074.0 \n       9.0 \n       33% \n       37 : 63 \n       2011 \n     \n     \n       3 \n       4 \n       Stanford University \n       United States of America \n       98.3 \n       29.5 \n       98.1 \n       99.2 \n       64.3 \n       94.3 \n       15596.0 \n       7.8 \n       22% \n       42 : 58 \n       2011 \n     \n     \n       4 \n       5 \n       Princeton University \n       United States of America \n       90.9 \n       70.3 \n       95.4 \n       99.9 \n       - \n       94.2 \n       7929.0 \n       8.4 \n       27% \n       45 : 55 \n       2011 \n     \n      # Describe `times_df`\ntimes_df.describe()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       teaching \n       research \n       citations \n       num_students \n       student_staff_ratio \n       year \n     \n   \n   \n     \n       count \n       2603.000000 \n       2603.000000 \n       2603.000000 \n       2544.000000 \n       2544.000000 \n       2603.000000 \n     \n     \n       mean \n       37.801498 \n       35.910257 \n       60.921629 \n       23873.758648 \n       18.445283 \n       2014.075682 \n     \n     \n       std \n       17.604218 \n       21.254805 \n       23.073219 \n       17675.946877 \n       11.458698 \n       1.685733 \n     \n     \n       min \n       9.900000 \n       2.900000 \n       1.200000 \n       462.000000 \n       0.600000 \n       2011.000000 \n     \n     \n       25% \n       24.700000 \n       19.600000 \n       45.500000 \n       12637.750000 \n       11.975000 \n       2013.000000 \n     \n     \n       50% \n       33.900000 \n       30.500000 \n       62.500000 \n       20851.000000 \n       16.100000 \n       2014.000000 \n     \n     \n       75% \n       46.400000 \n       47.250000 \n       79.050000 \n       29991.000000 \n       21.500000 \n       2016.000000 \n     \n     \n       max \n       99.700000 \n       99.400000 \n       100.000000 \n       379231.000000 \n       162.600000 \n       2016.000000 \n     \n      # Return the first rows of `shanghai_df`\nshanghai_df.head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       world_rank \n       university_name \n       national_rank \n       total_score \n       alumni \n       award \n       hici \n       ns \n       pub \n       pcp \n       year \n     \n   \n   \n     \n       0 \n       1 \n       Harvard University \n       1 \n       100.0 \n       100.0 \n       100.0 \n       100.0 \n       100.0 \n       100.0 \n       72.4 \n       2005 \n     \n     \n       1 \n       2 \n       University of Cambridge \n       1 \n       73.6 \n       99.8 \n       93.4 \n       53.3 \n       56.6 \n       70.9 \n       66.9 \n       2005 \n     \n     \n       2 \n       3 \n       Stanford University \n       2 \n       73.4 \n       41.1 \n       72.2 \n       88.5 \n       70.9 \n       72.3 \n       65.0 \n       2005 \n     \n     \n       3 \n       4 \n       University of California, Berkeley \n       3 \n       72.8 \n       71.8 \n       76.0 \n       69.4 \n       73.9 \n       72.2 \n       52.7 \n       2005 \n     \n     \n       4 \n       5 \n       Massachusetts Institute of Technology (MIT) \n       4 \n       70.1 \n       74.0 \n       80.6 \n       66.7 \n       65.8 \n       64.3 \n       53.0 \n       2005 \n     \n      # Describe `shanghai_df`\nshanghai_df.describe()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       total_score \n       alumni \n       award \n       hici \n       ns \n       pub \n       pcp \n       year \n     \n   \n   \n     \n       count \n       1101.000000 \n       4896.000000 \n       4895.00000 \n       4895.000000 \n       4875.000000 \n       4895.000000 \n       4895.000000 \n       4897.000000 \n     \n     \n       mean \n       36.383470 \n       9.161724 \n       7.69191 \n       16.221491 \n       16.078503 \n       38.254648 \n       21.242329 \n       2009.658566 \n     \n     \n       std \n       13.557186 \n       14.140636 \n       15.49411 \n       14.382710 \n       12.511529 \n       13.050809 \n       9.254351 \n       3.197576 \n     \n     \n       min \n       23.500000 \n       0.000000 \n       0.00000 \n       0.000000 \n       0.000000 \n       7.300000 \n       8.300000 \n       2005.000000 \n     \n     \n       25% \n       27.400000 \n       0.000000 \n       0.00000 \n       7.300000 \n       8.000000 \n       28.900000 \n       15.600000 \n       2007.000000 \n     \n     \n       50% \n       31.300000 \n       0.000000 \n       0.00000 \n       12.600000 \n       12.800000 \n       36.000000 \n       19.000000 \n       2009.000000 \n     \n     \n       75% \n       41.800000 \n       15.600000 \n       13.40000 \n       21.700000 \n       19.800000 \n       45.300000 \n       24.500000 \n       2012.000000 \n     \n     \n       max \n       100.000000 \n       100.000000 \n       100.00000 \n       100.000000 \n       100.000000 \n       100.000000 \n       100.000000 \n       2015.000000",
            "title": "Quickly Inspecting the Data"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#index-and-pull-values",
            "text": "[]  for row numbers or column names,  loc[] ,  iloc[] ,  query .  # Retrieve the total score of the first row\nprint(times_df.loc[0, 'total_score'])  96.1  # Retrieve rows 0 and 1\nprint(times_df[0:2])    world_rank                     university_name                   country  \\\n0          1                  Harvard University  United States of America   \n1          2  California Institute of Technology  United States of America\n\n   teaching international  research  citations income total_score  \\\n0      99.7          72.4      98.7       98.8   34.5        96.1   \n1      97.7          54.6      98.0       99.9   83.7        96.0\n\n   num_students  student_staff_ratio international_students female_male_ratio  \\\n0       20152.0                  8.9                    25%               NaN   \n1        2243.0                  6.9                    27%           33 : 67\n\n   year  \n0  2011  \n1  2011  # Retrieve the values at columns and rows 1-3\nprint(times_df.iloc[1:4,1:4])                           university_name                   country  teaching\n1     California Institute of Technology  United States of America      97.7\n2  Massachusetts Institute of Technology  United States of America      97.8\n3                    Stanford University  United States of America      98.3  # Retrieve the column `total_score` \nprint(times_df['total_score'])  0       96.1\n1       96.0\n2       95.6\n3       94.3\n4       94.2\n5       91.2\n6       91.2\n7       91.1\n8       90.6\n9       89.5\n10      87.7\n11      86.9\n12      86.4\n13      83.9\n14      83.4\n15      83.4\n16      82.0\n17      81.0\n18      79.5\n19      79.3\n20      79.2\n21      78.4\n22      78.0\n23      76.5\n24      75.9\n25      75.6\n26      75.3\n27      75.1\n28      75.0\n29      73.8\n        ... \n2573       -\n2574       -\n2575       -\n2576       -\n2577       -\n2578       -\n2579       -\n2580       -\n2581       -\n2582       -\n2583       -\n2584       -\n2585       -\n2586       -\n2587       -\n2588       -\n2589       -\n2590       -\n2591       -\n2592       -\n2593       -\n2594       -\n2595       -\n2596       -\n2597       -\n2598       -\n2599       -\n2600       -\n2601       -\n2602       -\nName: total_score, Length: 2603, dtype: object  # Are the last entries after 2006?\nprint(shanghai_df.loc[:-10, 'year'] > 2006)  Series([], Name: year, dtype: bool)  # Was the alumni count higher than 90 for the first ten universities?\nprint(shanghai_df.loc[0:11, 'alumni'] > 90)  0      True\n1      True\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\nName: alumni, dtype: bool  # Query `shanghai_df` for universities with total score between 40 and 50\naverage_schools = shanghai_df.query('total_score > 0 and total_score < 50')\n\n# Print the result\nprint(average_schools)       world_rank                                    university_name  \\\n15           16                  University of Wisconsin - Madison   \n16           17                           University of Washington   \n17           18            University of California, San Francisco   \n18           19                       The Johns Hopkins University   \n19           20                            The University of Tokyo   \n20           21                 University of Michigan - Ann Arbor   \n21           22                                   Kyoto University   \n22           23  The Imperial College of Science, Technology an...   \n23           24                              University of Toronto   \n24           25         University of Illinois at Urbana-Champaign   \n25           26                          University College London   \n26           27       Swiss Federal Institute of Technology Zurich   \n27           28                 Washington University in St. Louis   \n28           29                                New York University   \n29           30                             Rockefeller University   \n30           31                            Northwestern University   \n31           32                                    Duke University   \n32           32               University of Minnesota, Twin Cities   \n33           34            University of California, Santa Barbara   \n34           35                  University of Colorado at Boulder   \n35           36                  The University of Texas at Austin   \n36           37                     University of British Columbia   \n37           38  The University of Texas Southwestern Medical C...   \n38           39    Pennsylvania State University - University Park   \n39           39                              Vanderbilt University   \n40           41                    University of California, Davis   \n41           41                                 Utrecht University   \n42           43  Rutgers, The State University of New Jersey - ...   \n43           43                           University of Pittsburgh   \n44           45                               Karolinska Institute   \n...         ...                                                ...   \n4467         71                                   Ghent University   \n4468         72                   Ecole Normale Superieure - Paris   \n4469         73                                  Aarhus University   \n4470         73                                  Boston University   \n4471         75                                   Brown University   \n4472         75                            University of Groningen   \n4473         77                                  Nagoya University   \n4474         77                               Stockholm University   \n4475         77            Technion-Israel Institute of Technology   \n4476         77                 The Australian National University   \n4477         77                       The University of Queensland   \n4478         82                                  Leiden University   \n4479         83                              University of Florida   \n4480         84                                    Rice University   \n4481         85                                   Osaka University   \n4482         86                            Moscow State University   \n4483         87                The University of Western Australia   \n4484         87                                University of Basel   \n4485         87                           University of Strasbourg   \n4486         90                                          KU Leuven   \n4487         90                              University of Arizona   \n4488         92                              University of Warwick   \n4489         93                           Arizona State University   \n4490         93               University of California, Santa Cruz   \n4491         93                                 University of Utah   \n4492         96                                McMaster University   \n4493         97                                 University of Bonn   \n4494         98                            VU University Amsterdam   \n4495         99                          Michigan State University   \n4496        100                               Texas A&M University\n\n     national_rank  total_score  alumni  award  hici    ns   pub   pcp  year  \n15              14         49.2    43.0   36.3  52.1  46.3  68.7  29.0  2005  \n16              15         48.4    28.8   32.4  53.9  47.1  73.8  27.2  2005  \n17              16         47.8     0.0   37.6  55.6  57.9  58.8  45.2  2005  \n18              17         46.9    51.4   28.3  41.6  52.2  67.7  24.9  2005  \n19               1         46.7    36.0   14.4  38.5  52.1  86.5  34.7  2005  \n20              18         44.9    43.0    0.0  61.9  43.0  76.5  30.9  2005  \n21               2         43.8    39.7   34.1  34.2  37.0  72.3  31.1  2005  \n22               3         43.7    20.8   38.1  40.8  38.2  64.6  40.3  2005  \n23               1         43.1    28.1   19.7  39.3  38.9  76.7  41.9  2005  \n24              19         42.8    41.6   37.4  44.4  34.1  58.0  26.0  2005  \n25               4         42.6    30.7   32.9  37.7  41.5  60.5  38.8  2005  \n26               1         41.7    40.2   37.0  35.1  41.1  43.4  52.4  2005  \n27              20         40.7    25.1   26.6  38.5  46.5  53.9  39.9  2005  \n28              21         38.8    33.8   25.0  43.0  35.3  55.4  26.3  2005  \n29              22         38.2    22.6   59.8  28.3  44.1  24.0  35.9  2005  \n30              23         37.9    21.7   19.3  44.4  33.8  57.6  36.2  2005  \n31              24         37.7    20.8    0.0  47.1  45.3  60.8  38.9  2005  \n32              24         37.7    36.0    0.0  49.7  35.2  68.4  23.8  2005  \n33              26         36.9     0.0   36.0  42.3  39.0  44.1  35.8  2005  \n34              27         36.3    16.6   29.8  40.8  36.6  46.3  29.5  2005  \n35              28         35.5    21.7   17.1  49.1  30.0  54.8  21.7  2005  \n36               2         35.4    20.8   19.3  32.4  32.5  60.4  33.9  2005  \n37              29         34.8    24.3   33.9  31.4  38.2  37.9  31.0  2005  \n38              30         33.4    14.0    0.0  45.8  37.9  59.9  24.0  2005  \n39              30         33.4    12.5   30.2  34.2  24.5  49.2  35.6  2005  \n40              32         32.9     0.0    0.0  46.5  34.5  64.0  29.8  2005  \n41               1         32.9    30.7   21.4  27.2  27.3  55.7  25.9  2005  \n42              33         32.3    15.4   20.4  36.9  32.9  47.1  24.1  2005  \n43              33         32.3    25.1    0.0  40.1  25.9  64.3  28.2  2005  \n44               1         32.1    30.7   27.8  33.3  19.7  47.3  25.1  2005  \n...            ...          ...     ...    ...   ...   ...   ...   ...   ...  \n4467             1         27.8     5.1   13.3  26.9  18.3  57.5  34.5  2015  \n4468             3         27.6    48.9   28.0   6.2  19.5  26.4  60.5  2015  \n4469             2         27.3    11.5   22.1  12.3  25.8  51.8  31.0  2015  \n4470            42         27.3    11.5   11.5  29.1  26.3  49.5  21.8  2015  \n4471            43         27.0    14.5   13.3  26.2  25.1  43.6  32.8  2015  \n4472             2         27.0     0.0   18.8  23.0  21.0  52.6  32.7  2015  \n4473             3         26.7    29.0   25.3  16.8  17.7  44.3  23.1  2015  \n4474             3         26.7    24.1   27.4  18.1  19.4  40.4  25.6  2015  \n4475             2         26.7    23.5   37.6  15.2  18.3  33.3  28.2  2015  \n4476             2         26.7    13.6   19.2  24.8  20.1  45.1  29.1  2015  \n4477             2         26.7    12.6    0.0  22.0  24.0  63.2  29.3  2015  \n4478             3         26.5    17.8    9.4  25.7  22.0  46.9  32.9  2015  \n4479            44         26.2    17.0    0.0  30.9  21.0  58.7  17.3  2015  \n4480            45         26.0    16.2   21.7  28.1  22.8  29.2  34.3  2015  \n4481             4         25.7     8.9    0.0  31.6  26.7  51.7  21.7  2015  \n4482             1         25.3    41.4   33.0   0.0   7.7  46.4  31.3  2015  \n4483             4         24.9    13.6   14.1  24.1  14.5  47.5  28.9  2015  \n4484             4         24.9    19.2   16.3  17.4  21.4  39.2  35.0  2015  \n4485             4         24.9    25.1   28.8  15.9  19.0  34.6  21.7  2015  \n4486             2         24.7     0.0    0.0  30.1  18.6  56.6  30.4  2015  \n4487            46         24.7    14.5    0.0  27.2  27.5  48.4  20.3  2015  \n4488             9         24.6     0.0   29.8  23.7  14.0  39.3  26.8  2015  \n4489            47         24.5     0.0   20.0  22.2  25.5  42.6  19.1  2015  \n4490            47         24.5     0.0    0.0  37.9  33.9  29.0  37.6  2015  \n4491            47         24.5     0.0   11.5  26.5  25.5  46.7  18.7  2015  \n4492             4         24.4    12.6   18.8  23.2  15.1  44.5  22.5  2015  \n4493             4         24.3    15.4   19.8  17.4  21.1  39.8  25.9  2015  \n4494             4         24.2     0.0    0.0  27.8  18.0  55.5  33.3  2015  \n4495            50         24.0     8.9    0.0  30.7  21.8  50.6  18.9  2015  \n4496            51         23.9     0.0    0.0  34.3  22.7  49.5  20.9  2015\n\n[948 rows x 11 columns]  shanghai_df.query(\"national_rank == 1 and world_rank == 1\")   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       world_rank \n       university_name \n       national_rank \n       total_score \n       alumni \n       award \n       hici \n       ns \n       pub \n       pcp \n       year \n     \n   \n   \n      shanghai_df.query(\"alumni < 20\")   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       world_rank \n       university_name \n       national_rank \n       total_score \n       alumni \n       award \n       hici \n       ns \n       pub \n       pcp \n       year \n     \n   \n   \n     \n       12 \n       13 \n       University of California, San Diego \n       11 \n       51.0 \n       17.7 \n       34.7 \n       59.8 \n       56.5 \n       64.5 \n       46.6 \n       2005 \n     \n     \n       17 \n       18 \n       University of California, San Francisco \n       16 \n       47.8 \n       0.0 \n       37.6 \n       55.6 \n       57.9 \n       58.8 \n       45.2 \n       2005 \n     \n     \n       33 \n       34 \n       University of California, Santa Barbara \n       26 \n       36.9 \n       0.0 \n       36.0 \n       42.3 \n       39.0 \n       44.1 \n       35.8 \n       2005 \n     \n     \n       34 \n       35 \n       University of Colorado at Boulder \n       27 \n       36.3 \n       16.6 \n       29.8 \n       40.8 \n       36.6 \n       46.3 \n       29.5 \n       2005 \n     \n     \n       38 \n       39 \n       Pennsylvania State University - University Park \n       30 \n       33.4 \n       14.0 \n       0.0 \n       45.8 \n       37.9 \n       59.9 \n       24.0 \n       2005 \n     \n     \n       39 \n       39 \n       Vanderbilt University \n       30 \n       33.4 \n       12.5 \n       30.2 \n       34.2 \n       24.5 \n       49.2 \n       35.6 \n       2005 \n     \n     \n       40 \n       41 \n       University of California, Davis \n       32 \n       32.9 \n       0.0 \n       0.0 \n       46.5 \n       34.5 \n       64.0 \n       29.8 \n       2005 \n     \n     \n       42 \n       43 \n       Rutgers, The State University of New Jersey - ... \n       33 \n       32.3 \n       15.4 \n       20.4 \n       36.9 \n       32.9 \n       47.1 \n       24.1 \n       2005 \n     \n     \n       47 \n       47 \n       University of California, Irvine \n       35 \n       31.8 \n       0.0 \n       30.0 \n       32.4 \n       28.5 \n       48.2 \n       31.1 \n       2005 \n     \n     \n       49 \n       50 \n       University of Southern California \n       37 \n       31.7 \n       0.0 \n       27.3 \n       37.7 \n       23.6 \n       52.8 \n       25.8 \n       2005 \n     \n     \n       54 \n       55 \n       University of North Carolina at Chapel Hill \n       39 \n       30.3 \n       12.5 \n       0.0 \n       35.1 \n       32.8 \n       59.5 \n       27.3 \n       2005 \n     \n     \n       55 \n       56 \n       The Australian National University \n       1 \n       30.2 \n       17.7 \n       12.9 \n       36.9 \n       29.0 \n       45.1 \n       27.8 \n       2005 \n     \n     \n       57 \n       57 \n       University of Florida \n       40 \n       30.0 \n       15.4 \n       0.0 \n       35.1 \n       25.0 \n       65.2 \n       25.8 \n       2005 \n     \n     \n       58 \n       57 \n       University of Zurich \n       2 \n       30.0 \n       12.5 \n       27.3 \n       19.2 \n       30.3 \n       47.2 \n       30.6 \n       2005 \n     \n     \n       61 \n       62 \n       Osaka University \n       3 \n       29.3 \n       12.5 \n       0.0 \n       23.6 \n       31.1 \n       66.8 \n       29.2 \n       2005 \n     \n     \n       62 \n       63 \n       The Ohio State University - Columbus \n       41 \n       29.2 \n       17.7 \n       0.0 \n       40.8 \n       21.5 \n       61.2 \n       19.5 \n       2005 \n     \n     \n       63 \n       64 \n       University of Bristol \n       7 \n       28.8 \n       10.9 \n       18.2 \n       30.4 \n       24.5 \n       47.5 \n       27.4 \n       2005 \n     \n     \n       70 \n       71 \n       University of Heidelberg \n       3 \n       28.0 \n       10.9 \n       27.7 \n       20.8 \n       20.9 \n       48.1 \n       26.9 \n       2005 \n     \n     \n       72 \n       73 \n       Tohoku University \n       4 \n       27.8 \n       18.8 \n       0.0 \n       19.2 \n       26.9 \n       65.3 \n       29.0 \n       2005 \n     \n     \n       73 \n       73 \n       University of Arizona \n       44 \n       27.8 \n       0.0 \n       0.0 \n       29.4 \n       36.8 \n       55.8 \n       25.7 \n       2005 \n     \n     \n       74 \n       75 \n       Purdue University - West Lafayette \n       45 \n       27.7 \n       18.8 \n       17.1 \n       27.2 \n       21.4 \n       49.8 \n       19.4 \n       2005 \n     \n     \n       75 \n       76 \n       University of Helsinki \n       1 \n       27.4 \n       18.8 \n       18.2 \n       15.7 \n       21.4 \n       54.5 \n       27.5 \n       2005 \n     \n     \n       76 \n       77 \n       Michigan State University \n       46 \n       26.9 \n       12.5 \n       0.0 \n       37.7 \n       26.6 \n       51.0 \n       18.7 \n       2005 \n     \n     \n       79 \n       80 \n       Boston University \n       48 \n       26.1 \n       15.4 \n       0.0 \n       31.4 \n       28.1 \n       50.8 \n       17.5 \n       2005 \n     \n     \n       80 \n       80 \n       King's College London \n       9 \n       26.1 \n       16.6 \n       23.5 \n       20.8 \n       17.4 \n       44.6 \n       24.8 \n       2005 \n     \n     \n       81 \n       82 \n       University of Melbourne \n       2 \n       26.0 \n       15.4 \n       14.4 \n       22.2 \n       18.7 \n       53.5 \n       19.9 \n       2005 \n     \n     \n       82 \n       83 \n       University of Nottingham \n       10 \n       25.9 \n       15.4 \n       20.4 \n       20.8 \n       19.0 \n       45.6 \n       24.8 \n       2005 \n     \n     \n       85 \n       86 \n       Brown University \n       49 \n       25.4 \n       0.0 \n       13.9 \n       29.4 \n       25.5 \n       40.7 \n       27.9 \n       2005 \n     \n     \n       86 \n       87 \n       Indiana University Bloomington \n       50 \n       25.2 \n       14.0 \n       18.2 \n       24.8 \n       21.2 \n       42.0 \n       18.2 \n       2005 \n     \n     \n       88 \n       89 \n       Texas A&M University - College Station \n       51 \n       25.1 \n       0.0 \n       0.0 \n       32.4 \n       24.4 \n       55.0 \n       20.4 \n       2005 \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       4867 \n       401-500 \n       University of Jena \n       29-39 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       9.3 \n       34.0 \n       17.1 \n       2015 \n     \n     \n       4868 \n       401-500 \n       University of Jyvaskyla \n       4-6 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       10.3 \n       26.7 \n       14.1 \n       2015 \n     \n     \n       4869 \n       401-500 \n       University of Konstanz \n       29-39 \n       NaN \n       0.0 \n       0.0 \n       12.1 \n       11.4 \n       22.2 \n       13.5 \n       2015 \n     \n     \n       4870 \n       401-500 \n       University of KwaZulu-Natal \n       3-4 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       8.4 \n       32.8 \n       16.6 \n       2015 \n     \n     \n       4871 \n       401-500 \n       University of Ljubljana \n       1 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       7.7 \n       35.1 \n       14.2 \n       2015 \n     \n     \n       4872 \n       401-500 \n       University of Maryland, Baltimore County \n       126-146 \n       NaN \n       0.0 \n       0.0 \n       17.4 \n       6.5 \n       17.8 \n       17.3 \n       2015 \n     \n     \n       4873 \n       401-500 \n       University of Milan - Bicocca \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       5.0 \n       5.6 \n       30.9 \n       21.4 \n       2015 \n     \n     \n       4874 \n       401-500 \n       University of Nice Sophia Antipolis \n       19-22 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       16.3 \n       26.2 \n       12.7 \n       2015 \n     \n     \n       4875 \n       401-500 \n       University of Oklahoma - Norman \n       126-146 \n       NaN \n       0.0 \n       0.0 \n       5.1 \n       10.0 \n       28.0 \n       14.0 \n       2015 \n     \n     \n       4876 \n       401-500 \n       University of Palermo \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       6.3 \n       6.6 \n       28.2 \n       14.8 \n       2015 \n     \n     \n       4877 \n       401-500 \n       University of Parma \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       13.6 \n       2.1 \n       26.7 \n       19.6 \n       2015 \n     \n     \n       4878 \n       401-500 \n       University of Pavia \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       5.0 \n       5.7 \n       30.7 \n       19.7 \n       2015 \n     \n     \n       4879 \n       401-500 \n       University of Perugia \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       7.5 \n       29.3 \n       18.5 \n       2015 \n     \n     \n       4880 \n       401-500 \n       University of Quebec \n       19-20 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       9.8 \n       33.3 \n       16.8 \n       2015 \n     \n     \n       4881 \n       401-500 \n       University of Regensburg \n       29-39 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       13.9 \n       27.7 \n       15.2 \n       2015 \n     \n     \n       4882 \n       401-500 \n       University of Rennes 1 \n       19-22 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       9.2 \n       28.1 \n       11.2 \n       2015 \n     \n     \n       4883 \n       401-500 \n       University of Rhode Island \n       126-146 \n       NaN \n       0.0 \n       0.0 \n       15.2 \n       6.1 \n       21.1 \n       16.0 \n       2015 \n     \n     \n       4884 \n       401-500 \n       University of Roma - Tor Vergata \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       8.8 \n       33.7 \n       19.2 \n       2015 \n     \n     \n       4885 \n       401-500 \n       University of Rostock \n       29-39 \n       NaN \n       0.0 \n       0.0 \n       8.6 \n       8.4 \n       25.0 \n       13.5 \n       2015 \n     \n     \n       4886 \n       401-500 \n       University of Santiago Compostela \n       9-13 \n       NaN \n       0.0 \n       0.0 \n       7.1 \n       6.1 \n       31.1 \n       13.2 \n       2015 \n     \n     \n       4887 \n       401-500 \n       University of Science, Malaysia \n       2 \n       NaN \n       0.0 \n       0.0 \n       7.1 \n       3.3 \n       30.6 \n       15.7 \n       2015 \n     \n     \n       4888 \n       401-500 \n       University of Seville \n       9-13 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       7.5 \n       33.7 \n       11.3 \n       2015 \n     \n     \n       4889 \n       401-500 \n       University of Surrey \n       34-37 \n       NaN \n       0.0 \n       0.0 \n       8.6 \n       4.9 \n       27.0 \n       18.0 \n       2015 \n     \n     \n       4890 \n       401-500 \n       University of Szeged \n       1-2 \n       NaN \n       0.0 \n       13.3 \n       3.6 \n       3.4 \n       21.8 \n       12.8 \n       2015 \n     \n     \n       4891 \n       401-500 \n       University of the Basque Country \n       9-13 \n       NaN \n       0.0 \n       0.0 \n       3.6 \n       7.1 \n       36.1 \n       13.5 \n       2015 \n     \n     \n       4892 \n       401-500 \n       University of Trieste \n       11-20 \n       NaN \n       0.0 \n       0.0 \n       5.0 \n       10.9 \n       25.1 \n       20.1 \n       2015 \n     \n     \n       4893 \n       401-500 \n       University of Zaragoza \n       9-13 \n       NaN \n       0.0 \n       0.0 \n       7.6 \n       5.1 \n       33.3 \n       13.1 \n       2015 \n     \n     \n       4894 \n       401-500 \n       Utah State University \n       126-146 \n       NaN \n       13.6 \n       0.0 \n       3.6 \n       10.8 \n       25.1 \n       15.5 \n       2015 \n     \n     \n       4895 \n       401-500 \n       Vienna University of Technology \n       4-6 \n       NaN \n       0.0 \n       0.0 \n       0.0 \n       12.2 \n       28.8 \n       22.9 \n       2015 \n     \n     \n       4896 \n       401-500 \n       Wake Forest University \n       126-146 \n       NaN \n       0.0 \n       0.0 \n       14.9 \n       7.5 \n       25.0 \n       11.9 \n       2015 \n     \n     4122 rows \u00d7 11 columns",
            "title": "Index and Pull Values"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#method-chaining",
            "text": "pipe()  to chain operations and thus eliminate the need for intermediate DataFrames.  Without this operator, instead of writing  df.pipe(f).pipe(g).pipe(h)  write:  h(g(f(df))) . This becomes harder to follow once the number of nested functions grows large.  # Extract info\ndef extract_info(input_df, name):\n    df = input_df.copy()\n    info_df = pd.DataFrame({'nb_rows': df.shape[0], 'nb_cols': df.shape[1], 'name': name}, index=range(1))\n    return info_df  # Gather all info   \nall_info = pd.concat([times_df.pipe(extract_info, 'times'), shanghai_df.pipe(extract_info, 'shanghai')])\n\nprint(all_info)         name  nb_cols  nb_rows\n0     times       14     2603\n0  shanghai       11     4897  Select the common columns.  common_columns = set(shanghai_df.columns) & set(times_df.columns)\n\n# Return `common_columns`\nprint(common_columns)  {'year', 'university_name', 'total_score', 'world_rank'}",
            "title": "Method Chaining"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#clean-the-data",
            "text": "# Clean up the `world_rank` \ndef clean_world_rank(input_df):\n    df = input_df.copy()\n    df.world_rank = df.world_rank.str.split('-').str[0].str.split('=').str[0]\n    return df  # Assign the common years of `shanghai_df` and `times_df` to `common_years`    \ncommon_years = set(shanghai_df.year) & set(times_df.year) \n\n# Print `common_years`\nprint(common_years)  {2011, 2012, 2013, 2014, 2015}  # Filter years\ndef filter_year(input_df, years):\n    df = input_df.copy()\n    return df.query('year in {}'.format(list(years)))  # Clean `times_df` and `shanghai_df`\ncleaned_times_df = (times_df.loc[:, common_columns]\n                            .pipe(filter_year, common_years)\n                            .pipe(clean_world_rank)\n                            .assign(name='times'))\ncleaned_shanghai_df = (shanghai_df.loc[:, common_columns]\n                                  .pipe(filter_year, common_years)\n                                  .pipe(clean_world_rank)\n                                  .assign(name='shanghai'))",
            "title": "Clean the Data"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#concatenate-into-a-single-dataframe",
            "text": "38% of data missing from the  total_score column : drop this column with the  .drop  method.  # Compose `ranking_df` with `cleaned_times_df` and `cleaned_shanghai_df`\nranking_df = pd.concat([cleaned_times_df, cleaned_shanghai_df])\n\n# Calculate the percentage of missing data\nmissing_data = 100 * pd.isnull(ranking_df.total_score).sum() / len(ranking_df)\n\n# Drop the `total_score` column of `ranking_df`\nranking_df = ranking_df.drop('total_score', axis=1)",
            "title": "Concatenate into a single DataFrame"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#memory-optimization",
            "text": "Memory can start to play a big part in how fast the pipelines can run. Without the \u201cdeep\u201d flag turned on, Pandas won\u2019t estimate memory consumption for the  object  dtype:  category  when dealing with categorical data, etc.  int64  or even  int16  takes less memory.  # Print the memory usage of `ranking_df` \nranking_df.info()  <class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nworld_rank         3686 non-null object\nuniversity_name    3685 non-null object\nname               3686 non-null object\ndtypes: int64(1), object(3)\nmemory usage: 144.0+ KB  # Print the deep memory usage of `ranking_df` \nranking_df.info(memory_usage=\"deep\")  <class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nworld_rank         3686 non-null object\nuniversity_name    3685 non-null object\nname               3686 non-null object\ndtypes: int64(1), object(3)\nmemory usage: 803.1 KB",
            "title": "Memory Optimization"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#cast-object-types",
            "text": "\u2026to more appropriate ones.  def memory_change(input_df, column, dtype):\n    df = input_df.copy()\n    old = round(df[column].memory_usage(deep=True) / 1024, 2) # In KB\n    new = round(df[column].astype(dtype).memory_usage(deep=True) / 1024, 2)# In KB\n    change = round(100 * (old - new) / (old), 2)\n    report = (\"The inital memory footprint for {column} is: {old}KB.\\n\" \n              \"The casted {column} now takes: {new}KB.\\n\"\n              \"A change of {change} %.\").format(**locals())\n    return report  # parameters:\n# input_df, column, dtype\nprint(memory_change(ranking_df,'world_rank', 'int16'))  The inital memory footprint for world_rank is: 244.43KB.\nThe casted world_rank now takes: 36.0KB.\nA change of 85.27 %.  print(memory_change(ranking_df,'university_name', 'category'))  The inital memory footprint for university_name is: 329.98KB.\nThe casted university_name now takes: 121.37KB.\nA change of 63.22 %.  print(memory_change(ranking_df,'name', 'category'))  The inital memory footprint for name is: 257.49KB.\nThe casted name now takes: 32.6KB.\nA change of 87.34 %.  # Cast `world_rank` as type `int16`\nranking_df.world_rank = ranking_df.world_rank.astype('int16')  # Cast `unversity_name` as type `category`\nranking_df.university_name = ranking_df.university_name.astype('category')  # Cast `name` as type `category`\nranking_df.name = ranking_df.name.astype('category')  # Double check the memory usage after type casting\nranking_df.info(memory_usage='deep')  <class 'pandas.core.frame.DataFrame'>\nInt64Index: 3686 entries, 0 to 4896\nData columns (total 4 columns):\nyear               3686 non-null int64\nuniversity_name    3685 non-null category\nworld_rank         3686 non-null int16\nname               3686 non-null category\ndtypes: category(2), int16(1), int64(1)\nmemory usage: 161.2 KB  From 803.1 KB!  We have a well-formed data set (i.e. it is in a tidy state) with an optimized memory footprint, data analysis can start.",
            "title": "Cast Object Types"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#replace-rank-subset-groupby",
            "text": "",
            "title": "Replace, Rank, Subset, Groupby"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#replace",
            "text": "\u2018Massachusetts Institute of Technology (MIT)\u2019 and \u2018Massachusetts Institute of Technology\u2019 are two different records of the same university. Thus, change the first name to the latter.  # Query for the rows with university name 'Massachusetts Institute of Technology (MIT)'\nprint(ranking_df.query(\"university_name == 'Massachusetts Institute of Technology (MIT)'\"))        year                              university_name  world_rank      name\n3016  2011  Massachusetts Institute of Technology (MIT)           3  shanghai\n3516  2012  Massachusetts Institute of Technology (MIT)           3  shanghai\n3801  2013  Massachusetts Institute of Technology (MIT)           4  shanghai\n3899  2014  Massachusetts Institute of Technology (MIT)           3  shanghai\n4399  2015  Massachusetts Institute of Technology (MIT)           3  shanghai  ranking_df.loc[ranking_df.university_name == 'Massachusetts Institute of Technology (MIT)', 'university_name'] = 'Massachusetts Institute of Technology'  ranking_df.university_name.head()  0                       Harvard University\n1       California Institute of Technology\n2    Massachusetts Institute of Technology\n3                      Stanford University\n4                     Princeton University\nName: university_name, dtype: category\nCategories (785, object): [Aalborg University, Aalto University, Aarhus University, Aberystwyth University, ..., \u00c9cole Normale Sup\u00e9rieure, \u00c9cole Normale Sup\u00e9rieure de Lyon, \u00c9cole Polytechnique, \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne]",
            "title": "Replace"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#rank-subset-groupby",
            "text": "To find the 5 (more generally  n ) top universities over the years, for each ranking system, here is how to do it in pseudo-code:   For each year (in the  year  column) and for each ranking system (in the  name  column):  Select the subset of the data for this given year and the given ranking system.  Select the 5 top universities and store them in a list.  Store the result in a dictionary with (year, name) as key and the list of the universities (in descending order) as the value.     # Load in `itertools`\nimport itertools\n\n# Initialize `ranking`\nranking = {}\n\nfor year, name in itertools.product(common_years, [\"times\", \"shanghai\"]):\n    s = (ranking_df.loc[lambda df: ((df.year == year) & (df.name == name)\n                                    & (df.world_rank.isin(range(1,6)))), :]\n                   .sort_values('world_rank', ascending=False)\n                   .university_name)\n    ranking[(year, name)] = list(s)\n\n\n# Print `ranking`\nprint(ranking)  {(2011, 'times'): ['Princeton University', 'Stanford University', 'Massachusetts Institute of Technology', 'California Institute of Technology', 'Harvard University'], (2011, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2012, 'times'): ['Princeton University', 'University of Oxford', 'Harvard University', 'Stanford University', 'California Institute of Technology'], (2012, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2013, 'times'): ['Massachusetts Institute of Technology', 'Harvard University', 'Stanford University', 'University of Oxford', 'California Institute of Technology'], (2013, 'shanghai'): ['University of Cambridge', 'Massachusetts Institute of Technology', 'University of California, Berkeley', 'Stanford University', 'Harvard University'], (2014, 'times'): ['Massachusetts Institute of Technology', 'Stanford University', 'Harvard University', 'University of Oxford', 'California Institute of Technology'], (2014, 'shanghai'): ['University of Cambridge', 'University of California-Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University'], (2015, 'times'): ['University of Cambridge', 'Stanford University', 'University of Oxford', 'Harvard University', 'California Institute of Technology'], (2015, 'shanghai'): ['University of Cambridge', 'University of California, Berkeley', 'Massachusetts Institute of Technology', 'Stanford University', 'Harvard University']}  We have this ranking dictionary, let\u2019s find out how much (in percentage) both ranking methods differ over the years: the two are 100% set-similar if the selected 5-top universities are the same even though they aren\u2019t ranked the same.  # Import `defaultdict`\nfrom collections import defaultdict\n\n# Initialize `compare`\ncompare = defaultdict(list)\n\n# Initialize `exact_similarity` and `set_similarity`\nexact_similarity = {}\nset_similarity = {}\n\nfor (year, method), universities in ranking.items():\n    compare[year].append(universities)\n\nfor year, ranks in compare.items():\n    set_similarity[year] = 100 * len(set(ranks[0]) & set(ranks[1])) / 5.0\n\n# Print `set_similarity`  \nprint(set_similarity)  {2011: 60.0, 2012: 40.0, 2013: 60.0, 2014: 60.0, 2015: 60.0}  Is there a better, more idiomatic Pandas way?  # Construct a DataFrame with the top 5 universities \ntop_5_df = ranking_df.loc[lambda df: df.world_rank.isin(range(1, 6)), :]\n\n# Print the first rows of `top_5_df`\ntop_5_df.head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       year \n       university_name \n       world_rank \n       name \n     \n   \n   \n     \n       0 \n       2011 \n       Harvard University \n       1 \n       times \n     \n     \n       1 \n       2011 \n       California Institute of Technology \n       2 \n       times \n     \n     \n       2 \n       2011 \n       Massachusetts Institute of Technology \n       3 \n       times \n     \n     \n       3 \n       2011 \n       Stanford University \n       4 \n       times \n     \n     \n       4 \n       2011 \n       Princeton University \n       5 \n       times \n     \n      top_5_df.tail()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       year \n       university_name \n       world_rank \n       name \n     \n   \n   \n     \n       4397 \n       2015 \n       Harvard University \n       1 \n       shanghai \n     \n     \n       4398 \n       2015 \n       Stanford University \n       2 \n       shanghai \n     \n     \n       4399 \n       2015 \n       Massachusetts Institute of Technology \n       3 \n       shanghai \n     \n     \n       4400 \n       2015 \n       University of California, Berkeley \n       4 \n       shanghai \n     \n     \n       4401 \n       2015 \n       University of Cambridge \n       5 \n       shanghai \n     \n      # Compute the similarity\ndef compute_set_similarity(s):\n    pivoted = s.pivot(values='world_rank', columns='name', index='university_name').dropna()\n    set_simlarity = 100 * len((set(pivoted['shanghai'].index) & set(pivoted['times'].index))) / 5\n    return set_simlarity\n\n# Group `top_5_df` by `year`    \ngrouped_df = top_5_df.groupby('year')\n\n# Use `compute_set_similarity` to construct a DataFrame\nsetsimilarity_df = pd.DataFrame({'set_similarity': grouped_df.apply(compute_set_similarity)}).reset_index()\n\n# Print the first rows of `setsimilarity_df`\nsetsimilarity_df.head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       year \n       set_similarity \n     \n   \n   \n     \n       0 \n       2011 \n       60.0 \n     \n     \n       1 \n       2012 \n       40.0 \n     \n     \n       2 \n       2013 \n       60.0 \n     \n     \n       3 \n       2014 \n       60.0 \n     \n     \n       4 \n       2015 \n       60.0",
            "title": "Rank, Subset, Groupby"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#visualization",
            "text": "",
            "title": "Visualization"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#matplotlib",
            "text": "import matplotlib.pyplot as plt  # Plot a scatterplot with `total_score` and `alumni`\nshanghai_df.plot.scatter('total_score', 'alumni', c='year', colormap='viridis')\n\nplt.show()",
            "title": "Matplotlib"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#remove-values",
            "text": "There are some 0 values for the alumni column (0, -,  NaN , etc.). Remove them.  # Replace `-` entries with NaN values\ntimes_df['total_score'] = times_df['total_score'].replace(\"-\", \"NaN\").astype('float')\n\n# Drop all rows with NaN values for `num_students` \ntimes_df = times_df.dropna(subset=['num_students'], how='all')\n\n# Cast the remaining rows with `num_students` as int\ntimes_df['num_students'] = times_df['num_students'].astype('int')  # Plot a scatterplot with `total_score` and `num_students`\ntimes_df.plot.scatter('total_score', 'num_students', c='year', colormap='viridis')\n\nplt.show()",
            "title": "Remove values"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#seaborn",
            "text": "The Seaborn plotting tool is mainly used to create statistical plots that are visually appealing.  import seaborn as sns\n\n# Set the Seaborn theme if desired\nsns.set_style('darkgrid')  # Abbreviate country names of United States and United Kingdom\ntimes_df['country'] = times_df['country'].replace(\"United States of America\", \"USA\").replace(\"United Kingdom\", \"UK\")\n\n# Count the frequency of countries \ncount = times_df['country'].value_counts()[:10]\n\n# Convert the top 10 countries to a DataFrame \ndf = count.to_frame()  # Reset the index \n#df.reset_index(level=0, inplace=True)\n# or...\ndf['index1'] = df.index\n\ndf   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       country \n       index1 \n     \n   \n   \n     \n       USA \n       625 \n       USA \n     \n     \n       UK \n       286 \n       UK \n     \n     \n       Germany \n       150 \n       Germany \n     \n     \n       Australia \n       117 \n       Australia \n     \n     \n       Canada \n       108 \n       Canada \n     \n     \n       Japan \n       98 \n       Japan \n     \n     \n       Italy \n       94 \n       Italy \n     \n     \n       China \n       82 \n       China \n     \n     \n       Netherlands \n       75 \n       Netherlands \n     \n     \n       France \n       73 \n       France \n     \n      # Rename the columns\ndf.columns = ['count', 'country',]  # Plot a barplot with `country` and `count`\nsns.barplot(x='country', y='count', data=df)\nsns.despine()\n\nplt.show()",
            "title": "Seaborn"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#filter-rows",
            "text": "times_df_filtered = times_df.loc[times_df['country'].isin(['USA', 'UK', 'Canada', 'Australia', 'Germany'])]  # Barplot with `country` and `total_score`\nsns.barplot(x='country', y='total_score', data=times_df_filtered)\nsns.despine()\n\nplt.show()",
            "title": "Filter rows"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#correlation",
            "text": "import numpy as np\n\nnp.seterr(invalid='ignore')  {'divide': 'warn', 'invalid': 'warn', 'over': 'warn', 'under': 'ignore'}  sns.pairplot(times_df, hue='country')\n\nplt.show()   g = sns.FacetGrid(times_df_filtered, col='country', hue='country')\ng.map(sns.regplot, 'year', 'total_score').set(xlim=(2010, 2015), ylim=(0,100))\ng.fig.subplots_adjust(wspace=.2)   sns.set(style=\"white\")\n\n# Compute the correlation matrix\ncorr = times_df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3,\n            square=True, linewidths=.5, ax=ax)\n\nplt.show()",
            "title": "Correlation"
        },
        {
            "location": "/Write Idiomatic Pandas Code/#to-go-beyond",
            "text": "with  Group-by .",
            "title": "To go beyond"
        },
        {
            "location": "/Exploratory Data Analysis/",
            "text": "CONTENT\n\n\nImport the Data\n\n\ndigits\n\n\niris\n\n\n\n\n\n\nBasic Description of the Data\n\n\nDescribing The Data\n\n\nFirst and Last DataFrame Rows\n\n\nSample the Data\n\n\n\n\n\n\nQueries\n\n\nThe Challenges of Data\n\n\nMissing Values\n\n\nDelete\n\n\nImpute\n\n\nOutliers\n\n\n\n\n\n\nThe Data\u2019s Features\n\n\nFeature Engineering\n\n\nEncode categorical variables into numerical ones\n\n\nBin continuous variables in groups\n\n\nScale features\n\n\n\n\n\n\nFeature Selection\n\n\n\n\n\n\nPatterns In the Data\n\n\nCorrelation Identification with PCA from scikit-learn\n\n\nMatplotlib\n\n\nBokeh\n\n\n\n\n\n\nCorrelation Identification with Pandas\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nImport the Data\n\u00b6\n\n\n\n\nsep\n, delimiter.\n\n\ndelimiter\n, delimiter.\n\n\nnames\n, column names to use.\n\n\n\n\nindex_col\n, column to use as the row labels.\n\n\n\n\n\n\nread_table()\n, general delimited files.\n\n\n\n\nread_excel()\n, Excel files.\n\n\nread_fwf()\n, Fixed-Width Formatted data.\n\n\nread_clipboard\n, data copied to the clipboard.\n\n\nread_sql()\n, SQL query.\n\n\n\n\nhttp://pandas.pydata.org/pandas-docs/version/0.18.1/api.html#input-output\n\n\n%pylab inline\nimport numpy as np\nimport pandas as pd\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\ndigits\n\u00b6\n\n\n# Load in the data with `read_csv()`\ndigits = pd.read_csv(\"http://archive.ics.uci.edu/ml/machine-learning-databases/optdigits/optdigits.tra\",\n                     header=None)\n\ndigits.head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n      \n4\n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n8\n\n      \n9\n\n      \n...\n\n      \n55\n\n      \n56\n\n      \n57\n\n      \n58\n\n      \n59\n\n      \n60\n\n      \n61\n\n      \n62\n\n      \n63\n\n      \n64\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n6\n\n      \n15\n\n      \n12\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n7\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n6\n\n      \n14\n\n      \n7\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n10\n\n      \n16\n\n      \n6\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n7\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n10\n\n      \n16\n\n      \n15\n\n      \n3\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n8\n\n      \n15\n\n      \n16\n\n      \n13\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n9\n\n      \n14\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n7\n\n    \n\n    \n\n      \n3\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n3\n\n      \n11\n\n      \n16\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n15\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n4\n\n    \n\n    \n\n      \n4\n\n      \n0\n\n      \n0\n\n      \n5\n\n      \n14\n\n      \n4\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n4\n\n      \n12\n\n      \n14\n\n      \n7\n\n      \n0\n\n      \n0\n\n      \n6\n\n    \n\n  \n\n\n\n\n5 rows \u00d7 65 columns\n\n\n\n\n\nFind out about the \ndataset\n.\n\n\niris\n\u00b6\n\n\nAnother classical dataset.\n\n\niris = pd.read_csv(\"http://mlr.cs.umass.edu/ml/machine-learning-databases/iris/iris.data\")\n\niris.columns = ['Sepal_Length', 'Sepal_Width', 'Petal_Length', 'Petal_Width', 'Class']\n\niris.head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n2\n\n      \n4.6\n\n      \n3.1\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n3\n\n      \n5.0\n\n      \n3.6\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n4\n\n      \n5.4\n\n      \n3.9\n\n      \n1.7\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n  \n\n\n\n\n\n\n\nBasic Description of the Data\n\u00b6\n\n\nDescribing The Data\n\u00b6\n\n\niris.dtypes\n\n\n\n\nSepal_Length    float64\nSepal_Width     float64\nPetal_Length    float64\nPetal_Width     float64\nClass            object\ndtype: object\n\n\n\ndef get_var_category(series):\n    unique_count = series.nunique(dropna=False)\n    total_count = len(series)\n    if pd.api.types.is_numeric_dtype(series):\n        return 'Numerical'\n    elif pd.api.types.is_datetime64_dtype(series):\n        return 'Date'\n    elif unique_count==total_count:\n        return 'Text (Unique)'\n    else:\n        return 'Categorical'\n\ndef print_categories(df):\n    for column_name in df.columns:\n        print(column_name, \": \", get_var_category(df[column_name]))\n\n\n\n\nprint_categories(iris)\n\n\n\n\nSepal_Length :  Numerical\nSepal_Width :  Numerical\nPetal_Length :  Numerical\nPetal_Width :  Numerical\nClass :  Categorical\n\n\n\ndigits.describe()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n      \n4\n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n8\n\n      \n9\n\n      \n...\n\n      \n55\n\n      \n56\n\n      \n57\n\n      \n58\n\n      \n59\n\n      \n60\n\n      \n61\n\n      \n62\n\n      \n63\n\n      \n64\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n3823.0\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n...\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n      \n3823.000000\n\n    \n\n    \n\n      \nmean\n\n      \n0.0\n\n      \n0.301334\n\n      \n5.481821\n\n      \n11.805912\n\n      \n11.451478\n\n      \n5.505362\n\n      \n1.387392\n\n      \n0.142297\n\n      \n0.002093\n\n      \n1.960502\n\n      \n...\n\n      \n0.148313\n\n      \n0.000262\n\n      \n0.283024\n\n      \n5.855872\n\n      \n11.942977\n\n      \n11.461156\n\n      \n6.700497\n\n      \n2.105676\n\n      \n0.202197\n\n      \n4.497253\n\n    \n\n    \n\n      \nstd\n\n      \n0.0\n\n      \n0.866986\n\n      \n4.631601\n\n      \n4.259811\n\n      \n4.537556\n\n      \n5.613060\n\n      \n3.371444\n\n      \n1.051598\n\n      \n0.088572\n\n      \n3.052353\n\n      \n...\n\n      \n0.767761\n\n      \n0.016173\n\n      \n0.928046\n\n      \n4.980012\n\n      \n4.334508\n\n      \n4.991934\n\n      \n5.775815\n\n      \n4.028266\n\n      \n1.150694\n\n      \n2.869831\n\n    \n\n    \n\n      \nmin\n\n      \n0.0\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n...\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n    \n\n    \n\n      \n25%\n\n      \n0.0\n\n      \n0.000000\n\n      \n1.000000\n\n      \n10.000000\n\n      \n9.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n...\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n1.000000\n\n      \n10.000000\n\n      \n9.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n2.000000\n\n    \n\n    \n\n      \n50%\n\n      \n0.0\n\n      \n0.000000\n\n      \n5.000000\n\n      \n13.000000\n\n      \n13.000000\n\n      \n4.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n...\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n5.000000\n\n      \n13.000000\n\n      \n13.000000\n\n      \n6.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n4.000000\n\n    \n\n    \n\n      \n75%\n\n      \n0.0\n\n      \n0.000000\n\n      \n9.000000\n\n      \n15.000000\n\n      \n15.000000\n\n      \n10.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n3.000000\n\n      \n...\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n10.000000\n\n      \n15.000000\n\n      \n16.000000\n\n      \n12.000000\n\n      \n2.000000\n\n      \n0.000000\n\n      \n7.000000\n\n    \n\n    \n\n      \nmax\n\n      \n0.0\n\n      \n8.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n5.000000\n\n      \n15.000000\n\n      \n...\n\n      \n12.000000\n\n      \n1.000000\n\n      \n10.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n16.000000\n\n      \n9.000000\n\n    \n\n  \n\n\n\n\n8 rows \u00d7 65 columns\n\n\n\n\n\niris.describe()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n149.000000\n\n      \n149.000000\n\n      \n149.000000\n\n      \n149.000000\n\n    \n\n    \n\n      \nmean\n\n      \n5.848322\n\n      \n3.051007\n\n      \n3.774497\n\n      \n1.205369\n\n    \n\n    \n\n      \nstd\n\n      \n0.828594\n\n      \n0.433499\n\n      \n1.759651\n\n      \n0.761292\n\n    \n\n    \n\n      \nmin\n\n      \n4.300000\n\n      \n2.000000\n\n      \n1.000000\n\n      \n0.100000\n\n    \n\n    \n\n      \n25%\n\n      \n5.100000\n\n      \n2.800000\n\n      \n1.600000\n\n      \n0.300000\n\n    \n\n    \n\n      \n50%\n\n      \n5.800000\n\n      \n3.000000\n\n      \n4.400000\n\n      \n1.300000\n\n    \n\n    \n\n      \n75%\n\n      \n6.400000\n\n      \n3.300000\n\n      \n5.100000\n\n      \n1.800000\n\n    \n\n    \n\n      \nmax\n\n      \n7.900000\n\n      \n4.400000\n\n      \n6.900000\n\n      \n2.500000\n\n    \n\n  \n\n\n\n\n\n\n\niris[[\"Sepal_Length\", \"Sepal_Width\"]].describe()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n149.000000\n\n      \n149.000000\n\n    \n\n    \n\n      \nmean\n\n      \n5.848322\n\n      \n3.051007\n\n    \n\n    \n\n      \nstd\n\n      \n0.828594\n\n      \n0.433499\n\n    \n\n    \n\n      \nmin\n\n      \n4.300000\n\n      \n2.000000\n\n    \n\n    \n\n      \n25%\n\n      \n5.100000\n\n      \n2.800000\n\n    \n\n    \n\n      \n50%\n\n      \n5.800000\n\n      \n3.000000\n\n    \n\n    \n\n      \n75%\n\n      \n6.400000\n\n      \n3.300000\n\n    \n\n    \n\n      \nmax\n\n      \n7.900000\n\n      \n4.400000\n\n    \n\n  \n\n\n\n\n\n\n\nlength = len(digits)\nprint(length)\n\n\n\n\n3823\n\n\n\ncount = digits[2].count()\nprint(count)\n\n\n\n\n3823\n\n\n\nnumber_of_missing_values = length - count\npct_of_missing_values = float(number_of_missing_values / length)\npct_of_missing_values = \"{0:.1f}%\".format(pct_of_missing_values*100)\nprint(pct_of_missing_values)\n\n\n\n\n0.0%\n\n\n\nprint(\"Minimum value: \", iris[\"Sepal_Length\"].min())\nprint(\"Maximum value: \", iris[\"Sepal_Length\"].max())\n\n\n\n\nMinimum value:  4.3\nMaximum value:  7.9\n\n\n\nprint(iris[\"Sepal_Length\"].mode())\n\n\n\n\n0    5.0\ndtype: float64\n\n\n\nprint(iris[\"Sepal_Length\"].mean())\n\n\n\n\n5.848322147651008\n\n\n\nprint(iris[\"Sepal_Length\"].median())\n\n\n\n\n5.8\n\n\n\nprint(iris[\"Sepal_Length\"].std())\n\n\n\n\n0.8285940572656172\n\n\n\nprint(iris[\"Sepal_Length\"].quantile([.25, .5, .75]))\n\n\n\n\n0.25    5.1\n0.50    5.8\n0.75    6.4\nName: Sepal_Length, dtype: float64\n\n\n\nimport seaborn as sns\nsns.set(color_codes=True)\n\nsns.set_palette(sns.color_palette(\"muted\"))\n\nsns.distplot(iris[\"Sepal_Length\"].dropna())\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7f87b39b0320>\n\n\n\n\n\niris[[\"Sepal_Length\", \"Sepal_Width\"]].corr()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n    \n\n  \n\n  \n\n    \n\n      \nSepal_Length\n\n      \n1.000000\n\n      \n-0.103784\n\n    \n\n    \n\n      \nSepal_Width\n\n      \n-0.103784\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\nimport pandas_profiling \n\n# Print a full report\npandas_profiling.ProfileReport(iris)\n\n\n\n\n\n\n\n\n        .variablerow {\n            border: 1px solid #e1e1e8;\n            border-top: hidden;\n            padding-top: 2em;\n            padding-bottom: 2em;\n            padding-left: 1em;\n            padding-right: 1em;\n        }\n\n        .headerrow {\n            border: 1px solid #e1e1e8;\n            background-color: #f5f5f5;\n            padding: 2em;\n        }\n        .namecol {\n            margin-top: -1em;\n            overflow-x: auto;\n        }\n\n        .dl-horizontal dt {\n            text-align: left;\n            padding-right: 1em;\n            white-space: normal;\n        }\n\n        .dl-horizontal dd {\n            margin-left: 0;\n        }\n\n        .ignore {\n            opacity: 0.4;\n        }\n\n        .container.pandas-profiling {\n            max-width:975px;\n        }\n\n        .col-md-12 {\n            padding-left: 2em;\n        }\n\n        .indent {\n            margin-left: 1em;\n        }\n\n        /* Table example_values */\n            table.example_values {\n                border: 0;\n            }\n\n            .example_values th {\n                border: 0;\n                padding: 0 ;\n                color: #555;\n                font-weight: 600;\n            }\n\n            .example_values tr, .example_values td{\n                border: 0;\n                padding: 0;\n                color: #555;\n            }\n\n        /* STATS */\n            table.stats {\n                border: 0;\n            }\n\n            .stats th {\n                border: 0;\n                padding: 0 2em 0 0;\n                color: #555;\n                font-weight: 600;\n            }\n\n            .stats tr {\n                border: 0;\n            }\n\n            .stats tr:hover{\n                text-decoration: underline;\n            }\n\n            .stats td{\n                color: #555;\n                padding: 1px;\n                border: 0;\n            }\n\n\n        /* Sample table */\n            table.sample {\n                border: 0;\n                margin-bottom: 2em;\n                margin-left:1em;\n            }\n            .sample tr {\n                border:0;\n            }\n            .sample td, .sample th{\n                padding: 0.5em;\n                white-space: nowrap;\n                border: none;\n\n            }\n\n            .sample thead {\n                border-top: 0;\n                border-bottom: 2px solid #ddd;\n            }\n\n            .sample td {\n                width:100%;\n            }\n\n\n        /* There is no good solution available to make the divs equal height and then center ... */\n            .histogram {\n                margin-top: 3em;\n            }\n        /* Freq table */\n\n            table.freq {\n                margin-bottom: 2em;\n                border: 0;\n            }\n            table.freq th, table.freq tr, table.freq td {\n                border: 0;\n                padding: 0;\n            }\n\n            .freq thead {\n                font-weight: 600;\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n\n            }\n\n            td.fillremaining{\n                width:auto;\n                max-width: none;\n            }\n\n            td.number, th.number {\n                text-align:right ;\n            }\n\n        /* Freq mini */\n            .freq.mini td{\n                width: 50%;\n                padding: 1px;\n                font-size: 12px;\n\n            }\n            table.freq.mini {\n                 width:100%;\n            }\n            .freq.mini th {\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                max-width: 5em;\n                font-weight: 400;\n                text-align:right;\n                padding-right: 0.5em;\n            }\n\n            .missing {\n                color: #a94442;\n            }\n            .alert, .alert > th, .alert > td {\n                color: #a94442;\n            }\n\n\n        /* Bars in tables */\n            .freq .bar{\n                float: left;\n                width: 0;\n                height: 100%;\n                line-height: 20px;\n                color: #fff;\n                text-align: center;\n                background-color: #337ab7;\n                border-radius: 3px;\n                margin-right: 4px;\n            }\n            .other .bar {\n                background-color: #999;\n            }\n            .missing .bar{\n                background-color: #a94442;\n            }\n            .tooltip-inner {\n                width: 100%;\n                white-space: nowrap;\n                text-align:left;\n            }\n\n            .extrapadding{\n                padding: 2em;\n            }\n\n\n\n\n\n\n    \n\n        \nOverview\n\n    \n\n    \n\n    \n\n        \nDataset info\n\n        \n\n            \n\n            \n\n                \nNumber of variables\n\n                \n5 \n\n            \n\n            \n\n                \nNumber of observations\n\n                \n149 \n\n            \n\n            \n\n                \nTotal Missing (%)\n\n                \n0.0% \n\n            \n\n            \n\n                \nTotal size in memory\n\n                \n5.9 KiB \n\n            \n\n            \n\n                \nAverage record size in memory\n\n                \n40.5 B \n\n            \n\n            \n\n        \n\n    \n\n    \n\n        \nVariables types\n\n        \n\n            \n\n            \n\n                \nNumeric\n\n                \n3 \n\n            \n\n            \n\n                \nCategorical\n\n                \n1 \n\n            \n\n            \n\n                \nDate\n\n                \n0 \n\n            \n\n            \n\n                \nText (Unique)\n\n                \n0 \n\n            \n\n            \n\n                \nRejected\n\n                \n1 \n\n            \n\n            \n\n        \n\n    \n\n    \n\n        \nWarnings\n\n        \nPetal_Width\n is highly correlated with \nPetal_Length\n (\u03c1 = 0.96231) \nRejected\nDataset has 3 duplicate rows \nWarning\n \n\n    \n\n\n\n    \n\n        \nVariables\n\n    \n\n    \n\n    \n\n        \nClass\n\n            \nCategorical\n\n        \n\n    \n\n    \n\n        \n\n            \nDistinct count\n\n            \n3\n\n        \n\n        \n\n            \nUnique (%)\n\n            \n2.0%\n\n        \n\n        \n\n            \nMissing (%)\n\n            \n0.0%\n\n        \n\n        \n\n            \nMissing (n)\n\n            \n0\n\n        \n\n    \n\n\n\n\n\n    \n\n        \n\n    \nIris-virginica\n\n    \n\n        \n\n            50\n        \n\n\n    \n\n\n\n    \nIris-versicolor\n\n    \n\n        \n\n            50\n        \n\n\n    \n\n\n\n    \nIris-setosa\n\n    \n\n        \n\n            49\n        \n\n\n    \n\n\n\n    \n\n\n\n\n\n    \n\n        Toggle details\n    \n\n\n\n\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \nIris-virginica\n\n        \n50\n\n        \n33.6%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \nIris-versicolor\n\n        \n50\n\n        \n33.6%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \nIris-setosa\n\n        \n49\n\n        \n32.9%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n\n\n\n\n    \n\n        \nPetal_Length\n\n            \nNumeric\n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \nDistinct count\n\n                    \n43\n\n                \n\n                \n\n                    \nUnique (%)\n\n                    \n28.9%\n\n                \n\n                \n\n                    \nMissing (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nMissing (n)\n\n                    \n0\n\n                \n\n                \n\n                    \nInfinite (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nInfinite (n)\n\n                    \n0\n\n                \n\n            \n\n\n        \n\n        \n\n            \n\n\n                \n\n                    \nMean\n\n                    \n3.7745\n\n                \n\n                \n\n                    \nMinimum\n\n                    \n1\n\n                \n\n                \n\n                    \nMaximum\n\n                    \n6.9\n\n                \n\n                \n\n                    \nZeros (%)\n\n                    \n0.0%\n\n                \n\n            \n\n        \n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n    \n\n        Toggle details\n    \n\n\n\n\n\n    \n\n        \nStatistics\n\n        \nHistogram\n\n        \nCommon Values\n\n        \nExtreme Values\n\n\n    \n\n\n    \n\n        \n\n            \n\n                \nQuantile statistics\n\n                \n\n                    \n\n                        \nMinimum\n\n                        \n1\n\n                    \n\n                    \n\n                        \n5-th percentile\n\n                        \n1.3\n\n                    \n\n                    \n\n                        \nQ1\n\n                        \n1.6\n\n                    \n\n                    \n\n                        \nMedian\n\n                        \n4.4\n\n                    \n\n                    \n\n                        \nQ3\n\n                        \n5.1\n\n                    \n\n                    \n\n                        \n95-th percentile\n\n                        \n6.1\n\n                    \n\n                    \n\n                        \nMaximum\n\n                        \n6.9\n\n                    \n\n                    \n\n                        \nRange\n\n                        \n5.9\n\n                    \n\n                    \n\n                        \nInterquartile range\n\n                        \n3.5\n\n                    \n\n                \n\n            \n\n            \n\n                \nDescriptive statistics\n\n                \n\n                    \n\n                        \nStandard deviation\n\n                        \n1.7597\n\n                    \n\n                    \n\n                        \nCoef of variation\n\n                        \n0.46619\n\n                    \n\n                    \n\n                        \nKurtosis\n\n                        \n-1.385\n\n                    \n\n                    \n\n                        \nMean\n\n                        \n3.7745\n\n                    \n\n                    \n\n                        \nMAD\n\n                        \n1.5526\n\n                    \n\n                    \n\n                        \nSkewness\n\n                        \n-0.28946\n\n                    \n\n                    \n\n                        \nSum\n\n                        \n562.4\n\n                    \n\n                    \n\n                        \nVariance\n\n                        \n3.0964\n\n                    \n\n                    \n\n                        \nMemory size\n\n                        \n1.2 KiB\n\n                    \n\n                \n\n            \n\n        \n\n        \n\n            \n\n        \n\n        \n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n1.5\n\n        \n14\n\n        \n9.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.4\n\n        \n11\n\n        \n7.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.1\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.5\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.3\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.6\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.6\n\n        \n6\n\n        \n4.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.0\n\n        \n5\n\n        \n3.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.9\n\n        \n5\n\n        \n3.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.7\n\n        \n5\n\n        \n3.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \nOther values (33)\n\n        \n73\n\n        \n49.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n        \n\n            \nMinimum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n1.0\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.1\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.2\n\n        \n2\n\n        \n1.3%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.3\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n1.4\n\n        \n11\n\n        \n7.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n            \nMaximum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n6.3\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.4\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.6\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.7\n\n        \n2\n\n        \n1.3%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.9\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n    \n\n\n\n\n\n    \n\n        \nPetal_Width\n\n            \nHighly correlated\n\n        \n\n    \n\n    \nThis variable is highly correlated with \nPetal_Length\n and should be ignored for analysis\n\n\n\n\n\n    \n\n        \n\n            \nCorrelation\n\n            \n0.96231\n\n        \n\n    \n\n\n\n\n\n    \n\n        \nSepal_Length\n\n            \nNumeric\n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \nDistinct count\n\n                    \n35\n\n                \n\n                \n\n                    \nUnique (%)\n\n                    \n23.5%\n\n                \n\n                \n\n                    \nMissing (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nMissing (n)\n\n                    \n0\n\n                \n\n                \n\n                    \nInfinite (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nInfinite (n)\n\n                    \n0\n\n                \n\n            \n\n\n        \n\n        \n\n            \n\n\n                \n\n                    \nMean\n\n                    \n5.8483\n\n                \n\n                \n\n                    \nMinimum\n\n                    \n4.3\n\n                \n\n                \n\n                    \nMaximum\n\n                    \n7.9\n\n                \n\n                \n\n                    \nZeros (%)\n\n                    \n0.0%\n\n                \n\n            \n\n        \n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n    \n\n        Toggle details\n    \n\n\n\n\n\n    \n\n        \nStatistics\n\n        \nHistogram\n\n        \nCommon Values\n\n        \nExtreme Values\n\n\n    \n\n\n    \n\n        \n\n            \n\n                \nQuantile statistics\n\n                \n\n                    \n\n                        \nMinimum\n\n                        \n4.3\n\n                    \n\n                    \n\n                        \n5-th percentile\n\n                        \n4.6\n\n                    \n\n                    \n\n                        \nQ1\n\n                        \n5.1\n\n                    \n\n                    \n\n                        \nMedian\n\n                        \n5.8\n\n                    \n\n                    \n\n                        \nQ3\n\n                        \n6.4\n\n                    \n\n                    \n\n                        \n95-th percentile\n\n                        \n7.26\n\n                    \n\n                    \n\n                        \nMaximum\n\n                        \n7.9\n\n                    \n\n                    \n\n                        \nRange\n\n                        \n3.6\n\n                    \n\n                    \n\n                        \nInterquartile range\n\n                        \n1.3\n\n                    \n\n                \n\n            \n\n            \n\n                \nDescriptive statistics\n\n                \n\n                    \n\n                        \nStandard deviation\n\n                        \n0.82859\n\n                    \n\n                    \n\n                        \nCoef of variation\n\n                        \n0.14168\n\n                    \n\n                    \n\n                        \nKurtosis\n\n                        \n-0.55356\n\n                    \n\n                    \n\n                        \nMean\n\n                        \n5.8483\n\n                    \n\n                    \n\n                        \nMAD\n\n                        \n0.68748\n\n                    \n\n                    \n\n                        \nSkewness\n\n                        \n0.3031\n\n                    \n\n                    \n\n                        \nSum\n\n                        \n871.4\n\n                    \n\n                    \n\n                        \nVariance\n\n                        \n0.68657\n\n                    \n\n                    \n\n                        \nMemory size\n\n                        \n1.2 KiB\n\n                    \n\n                \n\n            \n\n        \n\n        \n\n            \n\n        \n\n        \n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n5.0\n\n        \n10\n\n        \n6.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.3\n\n        \n9\n\n        \n6.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.1\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.7\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.7\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.5\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n5.8\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.4\n\n        \n7\n\n        \n4.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n6.0\n\n        \n6\n\n        \n4.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.9\n\n        \n6\n\n        \n4.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \nOther values (25)\n\n        \n73\n\n        \n49.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n        \n\n            \nMinimum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n4.3\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.4\n\n        \n3\n\n        \n2.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.5\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.6\n\n        \n4\n\n        \n2.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.7\n\n        \n2\n\n        \n1.3%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n            \nMaximum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n7.3\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n7.4\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n7.6\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n7.7\n\n        \n4\n\n        \n2.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n7.9\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n    \n\n\n\n\n\n    \n\n        \nSepal_Width\n\n            \nNumeric\n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \nDistinct count\n\n                    \n23\n\n                \n\n                \n\n                    \nUnique (%)\n\n                    \n15.4%\n\n                \n\n                \n\n                    \nMissing (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nMissing (n)\n\n                    \n0\n\n                \n\n                \n\n                    \nInfinite (%)\n\n                    \n0.0%\n\n                \n\n                \n\n                    \nInfinite (n)\n\n                    \n0\n\n                \n\n            \n\n\n        \n\n        \n\n            \n\n\n                \n\n                    \nMean\n\n                    \n3.051\n\n                \n\n                \n\n                    \nMinimum\n\n                    \n2\n\n                \n\n                \n\n                    \nMaximum\n\n                    \n4.4\n\n                \n\n                \n\n                    \nZeros (%)\n\n                    \n0.0%\n\n                \n\n            \n\n        \n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n    \n\n        Toggle details\n    \n\n\n\n\n\n    \n\n        \nStatistics\n\n        \nHistogram\n\n        \nCommon Values\n\n        \nExtreme Values\n\n\n    \n\n\n    \n\n        \n\n            \n\n                \nQuantile statistics\n\n                \n\n                    \n\n                        \nMinimum\n\n                        \n2\n\n                    \n\n                    \n\n                        \n5-th percentile\n\n                        \n2.34\n\n                    \n\n                    \n\n                        \nQ1\n\n                        \n2.8\n\n                    \n\n                    \n\n                        \nMedian\n\n                        \n3\n\n                    \n\n                    \n\n                        \nQ3\n\n                        \n3.3\n\n                    \n\n                    \n\n                        \n95-th percentile\n\n                        \n3.8\n\n                    \n\n                    \n\n                        \nMaximum\n\n                        \n4.4\n\n                    \n\n                    \n\n                        \nRange\n\n                        \n2.4\n\n                    \n\n                    \n\n                        \nInterquartile range\n\n                        \n0.5\n\n                    \n\n                \n\n            \n\n            \n\n                \nDescriptive statistics\n\n                \n\n                    \n\n                        \nStandard deviation\n\n                        \n0.4335\n\n                    \n\n                    \n\n                        \nCoef of variation\n\n                        \n0.14208\n\n                    \n\n                    \n\n                        \nKurtosis\n\n                        \n0.31865\n\n                    \n\n                    \n\n                        \nMean\n\n                        \n3.051\n\n                    \n\n                    \n\n                        \nMAD\n\n                        \n0.33199\n\n                    \n\n                    \n\n                        \nSkewness\n\n                        \n0.3501\n\n                    \n\n                    \n\n                        \nSum\n\n                        \n454.6\n\n                    \n\n                    \n\n                        \nVariance\n\n                        \n0.18792\n\n                    \n\n                    \n\n                        \nMemory size\n\n                        \n1.2 KiB\n\n                    \n\n                \n\n            \n\n        \n\n        \n\n            \n\n        \n\n        \n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n3.0\n\n        \n26\n\n        \n17.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.8\n\n        \n14\n\n        \n9.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n3.2\n\n        \n13\n\n        \n8.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n3.4\n\n        \n12\n\n        \n8.1%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n3.1\n\n        \n12\n\n        \n8.1%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.9\n\n        \n10\n\n        \n6.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.7\n\n        \n9\n\n        \n6.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.5\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n3.8\n\n        \n6\n\n        \n4.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n3.3\n\n        \n6\n\n        \n4.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \nOther values (13)\n\n        \n33\n\n        \n22.1%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n        \n\n            \nMinimum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n2.0\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.2\n\n        \n3\n\n        \n2.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.3\n\n        \n4\n\n        \n2.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.4\n\n        \n3\n\n        \n2.0%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n2.5\n\n        \n8\n\n        \n5.4%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n            \nMaximum 5 values\n\n\n\n\n    \n\n    \n\n        \nValue\n\n        \nCount\n\n        \nFrequency (%)\n\n        \n\u00a0\n\n    \n\n    \n\n    \n\n        \n3.9\n\n        \n2\n\n        \n1.3%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.0\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.1\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.2\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n        \n4.4\n\n        \n1\n\n        \n0.7%\n\n        \n\n            \n\u00a0\n\n        \n\n\n\n\n\n        \n\n    \n\n\n\n\n\n    \n\n        \nSample\n\n    \n\n    \n\n    \n\n        \n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n2\n\n      \n4.6\n\n      \n3.1\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n3\n\n      \n5.0\n\n      \n3.6\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n4\n\n      \n5.4\n\n      \n3.9\n\n      \n1.7\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n  \n\n\n\n    \n\n\n\n\n\n\n\n# Print a full report\npandas_profiling.ProfileReport(digits)\n\n\n\n\n>>> Full (lengthy) report here!!! <<<\n\n\nFirst and Last DataFrame Rows\n\u00b6\n\n\n# Inspect the first 5 rows of `digits`\nfirst = digits.head(5)\n\n# Inspect the last 3 rows\nlast = digits.tail(3)\n\n\n\n\nprint(first)\n\n\n\n\n   0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  62  \\\n0   0   1   6  15  12   1   0   0   0   7 ...   0   0   0   6  14   7   1   0   \n1   0   0  10  16   6   0   0   0   0   7 ...   0   0   0  10  16  15   3   0   \n2   0   0   8  15  16  13   0   0   0   1 ...   0   0   0   9  14   0   0   0   \n3   0   0   0   3  11  16   0   0   0   0 ...   0   0   0   0   1  15   2   0   \n4   0   0   5  14   4   0   0   0   0   0 ...   0   0   0   4  12  14   7   0\n\n   63  64  \n0   0   0  \n1   0   0  \n2   0   7  \n3   0   4  \n4   0   6\n\n[5 rows x 65 columns]\n\n\n\nprint(last)\n\n\n\n\n      0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  \\\n3820   0   0   3  15   0   0   0   0   0   0 ...   0   0   0   4  14  16   9   \n3821   0   0   6  16   2   0   0   0   0   0 ...   0   0   0   5  16  16  16   \n3822   0   0   2  15  16  13   1   0   0   0 ...   0   0   0   4  14   1   0\n\n      62  63  64  \n3820   0   0   6  \n3821   5   0   6  \n3822   0   0   7\n\n[3 rows x 65 columns]\n\n\n\nSample the Data\n\u00b6\n\n\n# Take a sample of 5\ndigits.sample(5)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n      \n4\n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n8\n\n      \n9\n\n      \n...\n\n      \n55\n\n      \n56\n\n      \n57\n\n      \n58\n\n      \n59\n\n      \n60\n\n      \n61\n\n      \n62\n\n      \n63\n\n      \n64\n\n    \n\n  \n\n  \n\n    \n\n      \n1249\n\n      \n0\n\n      \n0\n\n      \n14\n\n      \n14\n\n      \n13\n\n      \n15\n\n      \n5\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n12\n\n      \n16\n\n      \n10\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n5\n\n    \n\n    \n\n      \n3702\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n9\n\n      \n16\n\n      \n12\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n9\n\n      \n14\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1605\n\n      \n0\n\n      \n0\n\n      \n7\n\n      \n16\n\n      \n13\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n2\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n5\n\n      \n14\n\n      \n11\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1890\n\n      \n0\n\n      \n0\n\n      \n3\n\n      \n15\n\n      \n15\n\n      \n5\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n2\n\n      \n0\n\n      \n0\n\n      \n3\n\n      \n15\n\n      \n16\n\n      \n16\n\n      \n13\n\n      \n1\n\n      \n9\n\n    \n\n    \n\n      \n1295\n\n      \n0\n\n      \n0\n\n      \n7\n\n      \n15\n\n      \n13\n\n      \n3\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n...\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n9\n\n      \n13\n\n      \n12\n\n      \n3\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n  \n\n\n\n\n5 rows \u00d7 65 columns\n\n\n\n\n\n# import `sample` from `random`\nfrom random import sample\n\n# Create a random index\nrandomIndex = np.array(sample(range(len(digits)), 5))\n\nprint(randomIndex)\n\n\n\n\n[ 846  569  315 2932 2328]\n\n\n\n# Get 5 random rows\ndigitsSample = digits.ix[randomIndex]\n\n# Print the sample\nprint(digitsSample)\n\n\n\n\n      0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  \\\n846    0   5  14  15   9   1   0   0   0   7 ...   0   0   4  12  16  12  10   \n569    0   1   7  12  12   0   0   0   0   3 ...   0   0   0  10  16  13   7   \n315    0   1   6  13  13   4   0   0   0   9 ...   0   0   0   4  14  16   9   \n2932   0   0   4  12  10   1   0   0   0   0 ...   0   0   0   4  12  11   3   \n2328   0   0   4  15  16  16  16  15   0   0 ...   0   0   0   5  15   3   0\n\n      62  63  64  \n846    4   0   2  \n569    0   0   3  \n315    2   0   2  \n2932   0   0   0  \n2328   0   0   7\n\n[5 rows x 65 columns]\n\n\n\nQueries\n\u00b6\n\n\niris.head(2)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n  \n\n\n\n\n\n\n\n# Petal length greater than sepal length?\niris.query('Petal_Length > Sepal_Length')\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n  \n\n\n\n\n\n\n\n# reverse\niris.query('Sepal_Length > Petal_Length')\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n2\n\n      \n4.6\n\n      \n3.1\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n3\n\n      \n5.0\n\n      \n3.6\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n4\n\n      \n5.4\n\n      \n3.9\n\n      \n1.7\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n5\n\n      \n4.6\n\n      \n3.4\n\n      \n1.4\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n6\n\n      \n5.0\n\n      \n3.4\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n7\n\n      \n4.4\n\n      \n2.9\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n8\n\n      \n4.9\n\n      \n3.1\n\n      \n1.5\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n9\n\n      \n5.4\n\n      \n3.7\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n10\n\n      \n4.8\n\n      \n3.4\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n11\n\n      \n4.8\n\n      \n3.0\n\n      \n1.4\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n12\n\n      \n4.3\n\n      \n3.0\n\n      \n1.1\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n13\n\n      \n5.8\n\n      \n4.0\n\n      \n1.2\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n14\n\n      \n5.7\n\n      \n4.4\n\n      \n1.5\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n15\n\n      \n5.4\n\n      \n3.9\n\n      \n1.3\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n16\n\n      \n5.1\n\n      \n3.5\n\n      \n1.4\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n17\n\n      \n5.7\n\n      \n3.8\n\n      \n1.7\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n18\n\n      \n5.1\n\n      \n3.8\n\n      \n1.5\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n19\n\n      \n5.4\n\n      \n3.4\n\n      \n1.7\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n20\n\n      \n5.1\n\n      \n3.7\n\n      \n1.5\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n21\n\n      \n4.6\n\n      \n3.6\n\n      \n1.0\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n22\n\n      \n5.1\n\n      \n3.3\n\n      \n1.7\n\n      \n0.5\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n23\n\n      \n4.8\n\n      \n3.4\n\n      \n1.9\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n24\n\n      \n5.0\n\n      \n3.0\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n25\n\n      \n5.0\n\n      \n3.4\n\n      \n1.6\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n26\n\n      \n5.2\n\n      \n3.5\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n27\n\n      \n5.2\n\n      \n3.4\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n28\n\n      \n4.7\n\n      \n3.2\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n29\n\n      \n4.8\n\n      \n3.1\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n119\n\n      \n6.9\n\n      \n3.2\n\n      \n5.7\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n120\n\n      \n5.6\n\n      \n2.8\n\n      \n4.9\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n121\n\n      \n7.7\n\n      \n2.8\n\n      \n6.7\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n122\n\n      \n6.3\n\n      \n2.7\n\n      \n4.9\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n123\n\n      \n6.7\n\n      \n3.3\n\n      \n5.7\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n124\n\n      \n7.2\n\n      \n3.2\n\n      \n6.0\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n125\n\n      \n6.2\n\n      \n2.8\n\n      \n4.8\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n126\n\n      \n6.1\n\n      \n3.0\n\n      \n4.9\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n127\n\n      \n6.4\n\n      \n2.8\n\n      \n5.6\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n128\n\n      \n7.2\n\n      \n3.0\n\n      \n5.8\n\n      \n1.6\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n129\n\n      \n7.4\n\n      \n2.8\n\n      \n6.1\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n130\n\n      \n7.9\n\n      \n3.8\n\n      \n6.4\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n131\n\n      \n6.4\n\n      \n2.8\n\n      \n5.6\n\n      \n2.2\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n132\n\n      \n6.3\n\n      \n2.8\n\n      \n5.1\n\n      \n1.5\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n133\n\n      \n6.1\n\n      \n2.6\n\n      \n5.6\n\n      \n1.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n134\n\n      \n7.7\n\n      \n3.0\n\n      \n6.1\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n135\n\n      \n6.3\n\n      \n3.4\n\n      \n5.6\n\n      \n2.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n136\n\n      \n6.4\n\n      \n3.1\n\n      \n5.5\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n137\n\n      \n6.0\n\n      \n3.0\n\n      \n4.8\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n138\n\n      \n6.9\n\n      \n3.1\n\n      \n5.4\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n139\n\n      \n6.7\n\n      \n3.1\n\n      \n5.6\n\n      \n2.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n140\n\n      \n6.9\n\n      \n3.1\n\n      \n5.1\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n141\n\n      \n5.8\n\n      \n2.7\n\n      \n5.1\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n142\n\n      \n6.8\n\n      \n3.2\n\n      \n5.9\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n143\n\n      \n6.7\n\n      \n3.3\n\n      \n5.7\n\n      \n2.5\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n144\n\n      \n6.7\n\n      \n3.0\n\n      \n5.2\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n145\n\n      \n6.3\n\n      \n2.5\n\n      \n5.0\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n146\n\n      \n6.5\n\n      \n3.0\n\n      \n5.2\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n147\n\n      \n6.2\n\n      \n3.4\n\n      \n5.4\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n148\n\n      \n5.9\n\n      \n3.0\n\n      \n5.1\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n  \n\n\n\n\n149 rows \u00d7 5 columns\n\n\n\n\n\n# alternatively\niris[iris.Sepal_Length > iris.Petal_Length]\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n1\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n2\n\n      \n4.6\n\n      \n3.1\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n3\n\n      \n5.0\n\n      \n3.6\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n4\n\n      \n5.4\n\n      \n3.9\n\n      \n1.7\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n5\n\n      \n4.6\n\n      \n3.4\n\n      \n1.4\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n6\n\n      \n5.0\n\n      \n3.4\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n7\n\n      \n4.4\n\n      \n2.9\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n8\n\n      \n4.9\n\n      \n3.1\n\n      \n1.5\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n9\n\n      \n5.4\n\n      \n3.7\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n10\n\n      \n4.8\n\n      \n3.4\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n11\n\n      \n4.8\n\n      \n3.0\n\n      \n1.4\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n12\n\n      \n4.3\n\n      \n3.0\n\n      \n1.1\n\n      \n0.1\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n13\n\n      \n5.8\n\n      \n4.0\n\n      \n1.2\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n14\n\n      \n5.7\n\n      \n4.4\n\n      \n1.5\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n15\n\n      \n5.4\n\n      \n3.9\n\n      \n1.3\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n16\n\n      \n5.1\n\n      \n3.5\n\n      \n1.4\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n17\n\n      \n5.7\n\n      \n3.8\n\n      \n1.7\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n18\n\n      \n5.1\n\n      \n3.8\n\n      \n1.5\n\n      \n0.3\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n19\n\n      \n5.4\n\n      \n3.4\n\n      \n1.7\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n20\n\n      \n5.1\n\n      \n3.7\n\n      \n1.5\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n21\n\n      \n4.6\n\n      \n3.6\n\n      \n1.0\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n22\n\n      \n5.1\n\n      \n3.3\n\n      \n1.7\n\n      \n0.5\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n23\n\n      \n4.8\n\n      \n3.4\n\n      \n1.9\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n24\n\n      \n5.0\n\n      \n3.0\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n25\n\n      \n5.0\n\n      \n3.4\n\n      \n1.6\n\n      \n0.4\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n26\n\n      \n5.2\n\n      \n3.5\n\n      \n1.5\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n27\n\n      \n5.2\n\n      \n3.4\n\n      \n1.4\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n28\n\n      \n4.7\n\n      \n3.2\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n29\n\n      \n4.8\n\n      \n3.1\n\n      \n1.6\n\n      \n0.2\n\n      \nIris-setosa\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n119\n\n      \n6.9\n\n      \n3.2\n\n      \n5.7\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n120\n\n      \n5.6\n\n      \n2.8\n\n      \n4.9\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n121\n\n      \n7.7\n\n      \n2.8\n\n      \n6.7\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n122\n\n      \n6.3\n\n      \n2.7\n\n      \n4.9\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n123\n\n      \n6.7\n\n      \n3.3\n\n      \n5.7\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n124\n\n      \n7.2\n\n      \n3.2\n\n      \n6.0\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n125\n\n      \n6.2\n\n      \n2.8\n\n      \n4.8\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n126\n\n      \n6.1\n\n      \n3.0\n\n      \n4.9\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n127\n\n      \n6.4\n\n      \n2.8\n\n      \n5.6\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n128\n\n      \n7.2\n\n      \n3.0\n\n      \n5.8\n\n      \n1.6\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n129\n\n      \n7.4\n\n      \n2.8\n\n      \n6.1\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n130\n\n      \n7.9\n\n      \n3.8\n\n      \n6.4\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n131\n\n      \n6.4\n\n      \n2.8\n\n      \n5.6\n\n      \n2.2\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n132\n\n      \n6.3\n\n      \n2.8\n\n      \n5.1\n\n      \n1.5\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n133\n\n      \n6.1\n\n      \n2.6\n\n      \n5.6\n\n      \n1.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n134\n\n      \n7.7\n\n      \n3.0\n\n      \n6.1\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n135\n\n      \n6.3\n\n      \n3.4\n\n      \n5.6\n\n      \n2.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n136\n\n      \n6.4\n\n      \n3.1\n\n      \n5.5\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n137\n\n      \n6.0\n\n      \n3.0\n\n      \n4.8\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n138\n\n      \n6.9\n\n      \n3.1\n\n      \n5.4\n\n      \n2.1\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n139\n\n      \n6.7\n\n      \n3.1\n\n      \n5.6\n\n      \n2.4\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n140\n\n      \n6.9\n\n      \n3.1\n\n      \n5.1\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n141\n\n      \n5.8\n\n      \n2.7\n\n      \n5.1\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n142\n\n      \n6.8\n\n      \n3.2\n\n      \n5.9\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n143\n\n      \n6.7\n\n      \n3.3\n\n      \n5.7\n\n      \n2.5\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n144\n\n      \n6.7\n\n      \n3.0\n\n      \n5.2\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n145\n\n      \n6.3\n\n      \n2.5\n\n      \n5.0\n\n      \n1.9\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n146\n\n      \n6.5\n\n      \n3.0\n\n      \n5.2\n\n      \n2.0\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n147\n\n      \n6.2\n\n      \n3.4\n\n      \n5.4\n\n      \n2.3\n\n      \nIris-virginica\n\n    \n\n    \n\n      \n148\n\n      \n5.9\n\n      \n3.0\n\n      \n5.1\n\n      \n1.8\n\n      \nIris-virginica\n\n    \n\n  \n\n\n\n\n149 rows \u00d7 5 columns\n\n\n\n\n\nThe Challenges of Data\n\u00b6\n\n\nMissing Values\n\u00b6\n\n\n# Identifiy missing values\npd.isnull(digits)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n0\n\n      \n1\n\n      \n2\n\n      \n3\n\n      \n4\n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n8\n\n      \n9\n\n      \n...\n\n      \n55\n\n      \n56\n\n      \n57\n\n      \n58\n\n      \n59\n\n      \n60\n\n      \n61\n\n      \n62\n\n      \n63\n\n      \n64\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n1\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n2\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n4\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n5\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n6\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n7\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n8\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n9\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n10\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n11\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n12\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n13\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n14\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n15\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n16\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n17\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n18\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n19\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n20\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n21\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n22\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n23\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n24\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n25\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n26\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n27\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n28\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n29\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n3793\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3794\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3795\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3796\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3797\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3798\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3799\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3800\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3801\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3802\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3803\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3804\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3805\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3806\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3807\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3808\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3809\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3810\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3811\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3812\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3813\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3814\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3815\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3816\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3817\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3818\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3819\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3820\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3821\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n    \n\n      \n3822\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \n...\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n    \n\n  \n\n\n\n\n3823 rows \u00d7 65 columns\n\n\n\n\n\nDelete\n\u00b6\n\n\n# Drop rows with missing values\ndf.dropna(axis=0)\n\n# Drop columns with missing values \ndf.dropna(axis=1)\n\n\n\n\nImpute\n\u00b6\n\n\nImputation: mean, median, another variable, estimate with regression ANOVA, logit, k-NN.\n\n\n# Import NumPy\nimport numpy as np\n\n# Calculate the mean of the DataFrame variable Salary\nmean = np.mean(df.Salary)\n\n# Replace missing values with the mean\ndf = df.Salary.fillna(mean)\n\ndf = df.Salary.fillna(mean, method=ffill)\n\n\n\n\n\n\nffill\n and \nbfill\n for forward and backward fill.\n\n\n\n\nfrom scipy import interpolate\n\n# Fill the DataFrame\ndf.interpolate()\n\ndf.interpolate(method=cubic)\n\n\n\n\n\n\ncubic\n, \npolynomial\n.\n\n\nlimit\n and \nlimit_direction\n.\n\n\n\n\nOutliers\n\u00b6\n\n\nDelete (data entry, processing errors), transform (assign weights, natural log to reduce variation) or impute them (replace extreme values with median, mean or mode values).\n\n\nThe Data\u2019s Features\n\u00b6\n\n\nFeature Engineering\n\u00b6\n\n\nIncrease the predictive power of learning algorithms by creating features from raw data that will help the learning process.\n\n\nEncode categorical variables into numerical ones\n\u00b6\n\n\n# Factorize the values \nlabels,levels = pd.factorize(iris.Class)\n\n# Save the encoded variables in `iris.Class`\niris.Class = labels\n\n# Print out the first rows\niris.Class.head()\n\n\n\n\n0    0\n1    0\n2    0\n3    0\n4    0\nName: Class, dtype: int64\n\n\n\nBin continuous variables in groups\n\u00b6\n\n\n# Define the bins\nmybins = range(0, df.age.max(), 10)\n\n# Cut the data from the DataFrame with the help of the bins\ndf['age_bucket'] = pd.cut(df.age, bins=mybins)\n\n# Count the number of values per bucket\ndf['age_bucket'].value_counts()\n\n\n\n\nScale features\n\u00b6\n\n\nCenter the data around 0.\n\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler().fit(X)\n\nrescaledX = scaler.transform(X)\n\n\n\n\nFeature Selection\n\u00b6\n\n\nSelect the key subset of original data features in an attempt to reduce the dimensionality of the training problem.\n\n\nPCA combines similar (correlated) attributes and creates new ones that are considered superior to the original attributes of the dataset. \n\n\nFeature selection doesn\u2019t combine attributes: it evaluates the quality and predictive power and selects the best set.\n\n\nTo find important features, calculate how much better or worse a model does when we leave one variable out of the equation.\n\n\n# Import `RandomForestClassifier`\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Isolate Data, class labels and column values\nX = iris.iloc[:,0:4]\nY = iris.iloc[:,-1]\nnames = iris.columns.values\n\n# Build the model\nrfc = RandomForestClassifier()\n\n# Fit the model\nrfc.fit(X, Y)\n\n# Print the results\nprint(\"Features sorted by their score:\")\nprint(sorted(zip(map(lambda x: round(x, 4), rfc.feature_importances_), names), reverse=True))\n\n\n\n\nFeatures sorted by their score:\n[(0.4899, 'Petal_Length'), (0.2752, 'Petal_Width'), (0.2185, 'Sepal_Length'), (0.016400000000000001, 'Sepal_Width')]\n\n\n\nThe best feature set is one that includes the petal length and petal width data.\n\n\n# Isolate feature importances \nimportance = rfc.feature_importances_\n\n# Sort the feature importances \nsorted_importances = np.argsort(importance)\n\n# Insert padding\npadding = np.arange(len(names)-1) + 0.5\n\n# Plot the data\nplt.barh(padding, importance[sorted_importances], align='center')\n\n# Customize the plot\nplt.yticks(padding, names[sorted_importances])\nplt.xlabel(\"Relative Importance\")\nplt.title(\"Variable Importance\")\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nPatterns In the Data\n\u00b6\n\n\nVisualization of the data; static with Matplotlib or Seaborn, interactive with Bokeh or Plotly.\n\n\nCorrelation Identification with PCA from scikit-learn\n\u00b6\n\n\nMatplotlib\n\u00b6\n\n\nDimensionality Reduction techniques, such as Principal Component Analysis (PCA). From \u2018many\u2019 to two \u2018principal components\u2019.\n\n\n# Import `PCA` from `sklearn.decomposition`\nfrom sklearn.decomposition import PCA\n\n# Build the model\npca = PCA(n_components=2)\n\n# Reduce the data, output is ndarray\nreduced_data = pca.fit_transform(digits)\n\n# Inspect shape of the `reduced_data`\nreduced_data.shape\n\n# print out the reduced data\nprint(reduced_data)\n\n\n\n\n[[ 12.65674168  -4.63610357]\n [ 16.82906354 -12.96575346]\n [-19.08072301  10.58293767]\n ..., \n [ 23.90693984   6.06265415]\n [ 29.1798759   -3.06847144]\n [-25.23132536  11.60863909]]\n\n\n\nreduced_data = pd.DataFrame(reduced_data)\n\n\n\n\nimport matplotlib.pyplot as plt\n\nplt.scatter(reduced_data[0], reduced_data[1])\n\nplt.show()\n\n\n\n\n\n\nBokeh\n\u00b6\n\n\nTo be implemented in a webpage for example.\n\n\nfrom bokeh.charts import Scatter, output_file, show\n\n# Construct the scatter plot\np = Scatter(iris, x='Petal_Length', y='Petal_Width', color=\"Class\", title=\"Petal Length vs Petal Width\",\n            xlabel=\"Sepal Length\", ylabel=\"Sepal Width\")\n\n# Output the file \noutput_file('scatter.html')\n\n# Show the scatter plot\nshow(p)\n\n\n\n\nThe GIF output:\n\n\n\n\n\n\nCorrelation Identification with Pandas\n\u00b6\n\n\nThe Pearson correlation assumes that the variables are normally distributed, that there is a straight line relationship between each of the variables and that the data is normally distributed about the regression line. \n\n\nThe Spearman correlation, on the other hand, assumes that we have two ordinal variables or two variables that are related in some way, but not linearly. The Spearman coefficient is the sum of deviation squared by \nn\n times \nn\n minus 1.\n\n\nThe Kendall Tau correlation is a coefficient that represents the degree of concordance between two columns of ranked data. We can use the Spearman correlation to measure the degree of association between two variables. The Kendal Tau coefficient is calculated by the number of concordant pairs minus the number of discordant pairs divided by the total number of pairs.\n\n\nSpearman\u2019s coefficient will usually be larger than the Kendall\u2019s Tau coefficient, but this is not always the case: we\u2019ll get a smaller Spearman\u2019s coefficient when the deviations are huge among the observations of the data. The Spearman correlation is very sensitive to this and this might come in handy in some cases!\n\n\nThe two last correlation measures require ranking the data.\n\n\n# Pearson correlation\niris.corr()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \nSepal_Length\n\n      \n1.000000\n\n      \n-0.103784\n\n      \n0.871283\n\n      \n0.816971\n\n      \n0.781219\n\n    \n\n    \n\n      \nSepal_Width\n\n      \n-0.103784\n\n      \n1.000000\n\n      \n-0.415218\n\n      \n-0.350733\n\n      \n-0.414532\n\n    \n\n    \n\n      \nPetal_Length\n\n      \n0.871283\n\n      \n-0.415218\n\n      \n1.000000\n\n      \n0.962314\n\n      \n0.948519\n\n    \n\n    \n\n      \nPetal_Width\n\n      \n0.816971\n\n      \n-0.350733\n\n      \n0.962314\n\n      \n1.000000\n\n      \n0.956014\n\n    \n\n    \n\n      \nClass\n\n      \n0.781219\n\n      \n-0.414532\n\n      \n0.948519\n\n      \n0.956014\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\niris2 = iris.rank()\n# Kendall Tau correlation\niris2.corr('kendall')\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \nSepal_Length\n\n      \n1.000000\n\n      \n-0.067636\n\n      \n0.718290\n\n      \n0.654197\n\n      \n0.669163\n\n    \n\n    \n\n      \nSepal_Width\n\n      \n-0.067636\n\n      \n1.000000\n\n      \n-0.175665\n\n      \n-0.140207\n\n      \n-0.327228\n\n    \n\n    \n\n      \nPetal_Length\n\n      \n0.718290\n\n      \n-0.175665\n\n      \n1.000000\n\n      \n0.803041\n\n      \n0.822578\n\n    \n\n    \n\n      \nPetal_Width\n\n      \n0.654197\n\n      \n-0.140207\n\n      \n0.803041\n\n      \n1.000000\n\n      \n0.837934\n\n    \n\n    \n\n      \nClass\n\n      \n0.669163\n\n      \n-0.327228\n\n      \n0.822578\n\n      \n0.837934\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\n# Spearman Rank correlation\niris2.corr('spearman')\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSepal_Length\n\n      \nSepal_Width\n\n      \nPetal_Length\n\n      \nPetal_Width\n\n      \nClass\n\n    \n\n  \n\n  \n\n    \n\n      \nSepal_Length\n\n      \n1.000000\n\n      \n-0.152136\n\n      \n0.881759\n\n      \n0.833586\n\n      \n0.796546\n\n    \n\n    \n\n      \nSepal_Width\n\n      \n-0.152136\n\n      \n1.000000\n\n      \n-0.294020\n\n      \n-0.267686\n\n      \n-0.426319\n\n    \n\n    \n\n      \nPetal_Length\n\n      \n0.881759\n\n      \n-0.294020\n\n      \n1.000000\n\n      \n0.936188\n\n      \n0.935220\n\n    \n\n    \n\n      \nPetal_Width\n\n      \n0.833586\n\n      \n-0.267686\n\n      \n0.936188\n\n      \n1.000000\n\n      \n0.937409\n\n    \n\n    \n\n      \nClass\n\n      \n0.796546\n\n      \n-0.426319\n\n      \n0.935220\n\n      \n0.937409\n\n      \n1.000000",
            "title": "Exploratory Data Analysis"
        },
        {
            "location": "/Exploratory Data Analysis/#digits",
            "text": "# Load in the data with `read_csv()`\ndigits = pd.read_csv(\"http://archive.ics.uci.edu/ml/machine-learning-databases/optdigits/optdigits.tra\",\n                     header=None)\n\ndigits.head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       0 \n       1 \n       2 \n       3 \n       4 \n       5 \n       6 \n       7 \n       8 \n       9 \n       ... \n       55 \n       56 \n       57 \n       58 \n       59 \n       60 \n       61 \n       62 \n       63 \n       64 \n     \n   \n   \n     \n       0 \n       0 \n       1 \n       6 \n       15 \n       12 \n       1 \n       0 \n       0 \n       0 \n       7 \n       ... \n       0 \n       0 \n       0 \n       6 \n       14 \n       7 \n       1 \n       0 \n       0 \n       0 \n     \n     \n       1 \n       0 \n       0 \n       10 \n       16 \n       6 \n       0 \n       0 \n       0 \n       0 \n       7 \n       ... \n       0 \n       0 \n       0 \n       10 \n       16 \n       15 \n       3 \n       0 \n       0 \n       0 \n     \n     \n       2 \n       0 \n       0 \n       8 \n       15 \n       16 \n       13 \n       0 \n       0 \n       0 \n       1 \n       ... \n       0 \n       0 \n       0 \n       9 \n       14 \n       0 \n       0 \n       0 \n       0 \n       7 \n     \n     \n       3 \n       0 \n       0 \n       0 \n       3 \n       11 \n       16 \n       0 \n       0 \n       0 \n       0 \n       ... \n       0 \n       0 \n       0 \n       0 \n       1 \n       15 \n       2 \n       0 \n       0 \n       4 \n     \n     \n       4 \n       0 \n       0 \n       5 \n       14 \n       4 \n       0 \n       0 \n       0 \n       0 \n       0 \n       ... \n       0 \n       0 \n       0 \n       4 \n       12 \n       14 \n       7 \n       0 \n       0 \n       6 \n     \n     5 rows \u00d7 65 columns   Find out about the  dataset .",
            "title": "digits"
        },
        {
            "location": "/Exploratory Data Analysis/#iris",
            "text": "Another classical dataset.  iris = pd.read_csv(\"http://mlr.cs.umass.edu/ml/machine-learning-databases/iris/iris.data\")\n\niris.columns = ['Sepal_Length', 'Sepal_Width', 'Petal_Length', 'Petal_Width', 'Class']\n\niris.head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       0 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       1 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       Iris-setosa \n     \n     \n       2 \n       4.6 \n       3.1 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       3 \n       5.0 \n       3.6 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       4 \n       5.4 \n       3.9 \n       1.7 \n       0.4 \n       Iris-setosa",
            "title": "iris"
        },
        {
            "location": "/Exploratory Data Analysis/#basic-description-of-the-data",
            "text": "",
            "title": "Basic Description of the Data"
        },
        {
            "location": "/Exploratory Data Analysis/#describing-the-data",
            "text": "iris.dtypes  Sepal_Length    float64\nSepal_Width     float64\nPetal_Length    float64\nPetal_Width     float64\nClass            object\ndtype: object  def get_var_category(series):\n    unique_count = series.nunique(dropna=False)\n    total_count = len(series)\n    if pd.api.types.is_numeric_dtype(series):\n        return 'Numerical'\n    elif pd.api.types.is_datetime64_dtype(series):\n        return 'Date'\n    elif unique_count==total_count:\n        return 'Text (Unique)'\n    else:\n        return 'Categorical'\n\ndef print_categories(df):\n    for column_name in df.columns:\n        print(column_name, \": \", get_var_category(df[column_name]))  print_categories(iris)  Sepal_Length :  Numerical\nSepal_Width :  Numerical\nPetal_Length :  Numerical\nPetal_Width :  Numerical\nClass :  Categorical  digits.describe()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       0 \n       1 \n       2 \n       3 \n       4 \n       5 \n       6 \n       7 \n       8 \n       9 \n       ... \n       55 \n       56 \n       57 \n       58 \n       59 \n       60 \n       61 \n       62 \n       63 \n       64 \n     \n   \n   \n     \n       count \n       3823.0 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       ... \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n       3823.000000 \n     \n     \n       mean \n       0.0 \n       0.301334 \n       5.481821 \n       11.805912 \n       11.451478 \n       5.505362 \n       1.387392 \n       0.142297 \n       0.002093 \n       1.960502 \n       ... \n       0.148313 \n       0.000262 \n       0.283024 \n       5.855872 \n       11.942977 \n       11.461156 \n       6.700497 \n       2.105676 \n       0.202197 \n       4.497253 \n     \n     \n       std \n       0.0 \n       0.866986 \n       4.631601 \n       4.259811 \n       4.537556 \n       5.613060 \n       3.371444 \n       1.051598 \n       0.088572 \n       3.052353 \n       ... \n       0.767761 \n       0.016173 \n       0.928046 \n       4.980012 \n       4.334508 \n       4.991934 \n       5.775815 \n       4.028266 \n       1.150694 \n       2.869831 \n     \n     \n       min \n       0.0 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       ... \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n     \n     \n       25% \n       0.0 \n       0.000000 \n       1.000000 \n       10.000000 \n       9.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       ... \n       0.000000 \n       0.000000 \n       0.000000 \n       1.000000 \n       10.000000 \n       9.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       2.000000 \n     \n     \n       50% \n       0.0 \n       0.000000 \n       5.000000 \n       13.000000 \n       13.000000 \n       4.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       ... \n       0.000000 \n       0.000000 \n       0.000000 \n       5.000000 \n       13.000000 \n       13.000000 \n       6.000000 \n       0.000000 \n       0.000000 \n       4.000000 \n     \n     \n       75% \n       0.0 \n       0.000000 \n       9.000000 \n       15.000000 \n       15.000000 \n       10.000000 \n       0.000000 \n       0.000000 \n       0.000000 \n       3.000000 \n       ... \n       0.000000 \n       0.000000 \n       0.000000 \n       10.000000 \n       15.000000 \n       16.000000 \n       12.000000 \n       2.000000 \n       0.000000 \n       7.000000 \n     \n     \n       max \n       0.0 \n       8.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       5.000000 \n       15.000000 \n       ... \n       12.000000 \n       1.000000 \n       10.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       16.000000 \n       9.000000 \n     \n     8 rows \u00d7 65 columns   iris.describe()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n     \n   \n   \n     \n       count \n       149.000000 \n       149.000000 \n       149.000000 \n       149.000000 \n     \n     \n       mean \n       5.848322 \n       3.051007 \n       3.774497 \n       1.205369 \n     \n     \n       std \n       0.828594 \n       0.433499 \n       1.759651 \n       0.761292 \n     \n     \n       min \n       4.300000 \n       2.000000 \n       1.000000 \n       0.100000 \n     \n     \n       25% \n       5.100000 \n       2.800000 \n       1.600000 \n       0.300000 \n     \n     \n       50% \n       5.800000 \n       3.000000 \n       4.400000 \n       1.300000 \n     \n     \n       75% \n       6.400000 \n       3.300000 \n       5.100000 \n       1.800000 \n     \n     \n       max \n       7.900000 \n       4.400000 \n       6.900000 \n       2.500000 \n     \n      iris[[\"Sepal_Length\", \"Sepal_Width\"]].describe()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n     \n   \n   \n     \n       count \n       149.000000 \n       149.000000 \n     \n     \n       mean \n       5.848322 \n       3.051007 \n     \n     \n       std \n       0.828594 \n       0.433499 \n     \n     \n       min \n       4.300000 \n       2.000000 \n     \n     \n       25% \n       5.100000 \n       2.800000 \n     \n     \n       50% \n       5.800000 \n       3.000000 \n     \n     \n       75% \n       6.400000 \n       3.300000 \n     \n     \n       max \n       7.900000 \n       4.400000 \n     \n      length = len(digits)\nprint(length)  3823  count = digits[2].count()\nprint(count)  3823  number_of_missing_values = length - count\npct_of_missing_values = float(number_of_missing_values / length)\npct_of_missing_values = \"{0:.1f}%\".format(pct_of_missing_values*100)\nprint(pct_of_missing_values)  0.0%  print(\"Minimum value: \", iris[\"Sepal_Length\"].min())\nprint(\"Maximum value: \", iris[\"Sepal_Length\"].max())  Minimum value:  4.3\nMaximum value:  7.9  print(iris[\"Sepal_Length\"].mode())  0    5.0\ndtype: float64  print(iris[\"Sepal_Length\"].mean())  5.848322147651008  print(iris[\"Sepal_Length\"].median())  5.8  print(iris[\"Sepal_Length\"].std())  0.8285940572656172  print(iris[\"Sepal_Length\"].quantile([.25, .5, .75]))  0.25    5.1\n0.50    5.8\n0.75    6.4\nName: Sepal_Length, dtype: float64  import seaborn as sns\nsns.set(color_codes=True)\n\nsns.set_palette(sns.color_palette(\"muted\"))\n\nsns.distplot(iris[\"Sepal_Length\"].dropna())  <matplotlib.axes._subplots.AxesSubplot at 0x7f87b39b0320>   iris[[\"Sepal_Length\", \"Sepal_Width\"]].corr()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n     \n   \n   \n     \n       Sepal_Length \n       1.000000 \n       -0.103784 \n     \n     \n       Sepal_Width \n       -0.103784 \n       1.000000 \n     \n      import pandas_profiling \n\n# Print a full report\npandas_profiling.ProfileReport(iris)   \n\n        .variablerow {\n            border: 1px solid #e1e1e8;\n            border-top: hidden;\n            padding-top: 2em;\n            padding-bottom: 2em;\n            padding-left: 1em;\n            padding-right: 1em;\n        }\n\n        .headerrow {\n            border: 1px solid #e1e1e8;\n            background-color: #f5f5f5;\n            padding: 2em;\n        }\n        .namecol {\n            margin-top: -1em;\n            overflow-x: auto;\n        }\n\n        .dl-horizontal dt {\n            text-align: left;\n            padding-right: 1em;\n            white-space: normal;\n        }\n\n        .dl-horizontal dd {\n            margin-left: 0;\n        }\n\n        .ignore {\n            opacity: 0.4;\n        }\n\n        .container.pandas-profiling {\n            max-width:975px;\n        }\n\n        .col-md-12 {\n            padding-left: 2em;\n        }\n\n        .indent {\n            margin-left: 1em;\n        }\n\n        /* Table example_values */\n            table.example_values {\n                border: 0;\n            }\n\n            .example_values th {\n                border: 0;\n                padding: 0 ;\n                color: #555;\n                font-weight: 600;\n            }\n\n            .example_values tr, .example_values td{\n                border: 0;\n                padding: 0;\n                color: #555;\n            }\n\n        /* STATS */\n            table.stats {\n                border: 0;\n            }\n\n            .stats th {\n                border: 0;\n                padding: 0 2em 0 0;\n                color: #555;\n                font-weight: 600;\n            }\n\n            .stats tr {\n                border: 0;\n            }\n\n            .stats tr:hover{\n                text-decoration: underline;\n            }\n\n            .stats td{\n                color: #555;\n                padding: 1px;\n                border: 0;\n            }\n\n\n        /* Sample table */\n            table.sample {\n                border: 0;\n                margin-bottom: 2em;\n                margin-left:1em;\n            }\n            .sample tr {\n                border:0;\n            }\n            .sample td, .sample th{\n                padding: 0.5em;\n                white-space: nowrap;\n                border: none;\n\n            }\n\n            .sample thead {\n                border-top: 0;\n                border-bottom: 2px solid #ddd;\n            }\n\n            .sample td {\n                width:100%;\n            }\n\n\n        /* There is no good solution available to make the divs equal height and then center ... */\n            .histogram {\n                margin-top: 3em;\n            }\n        /* Freq table */\n\n            table.freq {\n                margin-bottom: 2em;\n                border: 0;\n            }\n            table.freq th, table.freq tr, table.freq td {\n                border: 0;\n                padding: 0;\n            }\n\n            .freq thead {\n                font-weight: 600;\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n\n            }\n\n            td.fillremaining{\n                width:auto;\n                max-width: none;\n            }\n\n            td.number, th.number {\n                text-align:right ;\n            }\n\n        /* Freq mini */\n            .freq.mini td{\n                width: 50%;\n                padding: 1px;\n                font-size: 12px;\n\n            }\n            table.freq.mini {\n                 width:100%;\n            }\n            .freq.mini th {\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                max-width: 5em;\n                font-weight: 400;\n                text-align:right;\n                padding-right: 0.5em;\n            }\n\n            .missing {\n                color: #a94442;\n            }\n            .alert, .alert > th, .alert > td {\n                color: #a94442;\n            }\n\n\n        /* Bars in tables */\n            .freq .bar{\n                float: left;\n                width: 0;\n                height: 100%;\n                line-height: 20px;\n                color: #fff;\n                text-align: center;\n                background-color: #337ab7;\n                border-radius: 3px;\n                margin-right: 4px;\n            }\n            .other .bar {\n                background-color: #999;\n            }\n            .missing .bar{\n                background-color: #a94442;\n            }\n            .tooltip-inner {\n                width: 100%;\n                white-space: nowrap;\n                text-align:left;\n            }\n\n            .extrapadding{\n                padding: 2em;\n            }",
            "title": "Describing The Data"
        },
        {
            "location": "/Exploratory Data Analysis/#first-and-last-dataframe-rows",
            "text": "# Inspect the first 5 rows of `digits`\nfirst = digits.head(5)\n\n# Inspect the last 3 rows\nlast = digits.tail(3)  print(first)     0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  62  \\\n0   0   1   6  15  12   1   0   0   0   7 ...   0   0   0   6  14   7   1   0   \n1   0   0  10  16   6   0   0   0   0   7 ...   0   0   0  10  16  15   3   0   \n2   0   0   8  15  16  13   0   0   0   1 ...   0   0   0   9  14   0   0   0   \n3   0   0   0   3  11  16   0   0   0   0 ...   0   0   0   0   1  15   2   0   \n4   0   0   5  14   4   0   0   0   0   0 ...   0   0   0   4  12  14   7   0\n\n   63  64  \n0   0   0  \n1   0   0  \n2   0   7  \n3   0   4  \n4   0   6\n\n[5 rows x 65 columns]  print(last)        0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  \\\n3820   0   0   3  15   0   0   0   0   0   0 ...   0   0   0   4  14  16   9   \n3821   0   0   6  16   2   0   0   0   0   0 ...   0   0   0   5  16  16  16   \n3822   0   0   2  15  16  13   1   0   0   0 ...   0   0   0   4  14   1   0\n\n      62  63  64  \n3820   0   0   6  \n3821   5   0   6  \n3822   0   0   7\n\n[3 rows x 65 columns]",
            "title": "First and Last DataFrame Rows"
        },
        {
            "location": "/Exploratory Data Analysis/#sample-the-data",
            "text": "# Take a sample of 5\ndigits.sample(5)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       0 \n       1 \n       2 \n       3 \n       4 \n       5 \n       6 \n       7 \n       8 \n       9 \n       ... \n       55 \n       56 \n       57 \n       58 \n       59 \n       60 \n       61 \n       62 \n       63 \n       64 \n     \n   \n   \n     \n       1249 \n       0 \n       0 \n       14 \n       14 \n       13 \n       15 \n       5 \n       0 \n       0 \n       0 \n       ... \n       0 \n       0 \n       0 \n       12 \n       16 \n       10 \n       2 \n       0 \n       0 \n       5 \n     \n     \n       3702 \n       0 \n       0 \n       0 \n       9 \n       16 \n       12 \n       2 \n       0 \n       0 \n       0 \n       ... \n       0 \n       0 \n       0 \n       0 \n       9 \n       14 \n       2 \n       0 \n       0 \n       0 \n     \n     \n       1605 \n       0 \n       0 \n       7 \n       16 \n       13 \n       2 \n       0 \n       0 \n       0 \n       2 \n       ... \n       0 \n       0 \n       0 \n       5 \n       14 \n       11 \n       1 \n       0 \n       0 \n       0 \n     \n     \n       1890 \n       0 \n       0 \n       3 \n       15 \n       15 \n       5 \n       0 \n       0 \n       0 \n       0 \n       ... \n       2 \n       0 \n       0 \n       3 \n       15 \n       16 \n       16 \n       13 \n       1 \n       9 \n     \n     \n       1295 \n       0 \n       0 \n       7 \n       15 \n       13 \n       3 \n       0 \n       0 \n       0 \n       0 \n       ... \n       0 \n       0 \n       0 \n       9 \n       13 \n       12 \n       3 \n       0 \n       0 \n       0 \n     \n     5 rows \u00d7 65 columns   # import `sample` from `random`\nfrom random import sample\n\n# Create a random index\nrandomIndex = np.array(sample(range(len(digits)), 5))\n\nprint(randomIndex)  [ 846  569  315 2932 2328]  # Get 5 random rows\ndigitsSample = digits.ix[randomIndex]\n\n# Print the sample\nprint(digitsSample)        0   1   2   3   4   5   6   7   8   9  ...  55  56  57  58  59  60  61  \\\n846    0   5  14  15   9   1   0   0   0   7 ...   0   0   4  12  16  12  10   \n569    0   1   7  12  12   0   0   0   0   3 ...   0   0   0  10  16  13   7   \n315    0   1   6  13  13   4   0   0   0   9 ...   0   0   0   4  14  16   9   \n2932   0   0   4  12  10   1   0   0   0   0 ...   0   0   0   4  12  11   3   \n2328   0   0   4  15  16  16  16  15   0   0 ...   0   0   0   5  15   3   0\n\n      62  63  64  \n846    4   0   2  \n569    0   0   3  \n315    2   0   2  \n2932   0   0   0  \n2328   0   0   7\n\n[5 rows x 65 columns]",
            "title": "Sample the Data"
        },
        {
            "location": "/Exploratory Data Analysis/#queries",
            "text": "iris.head(2)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       0 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       1 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       Iris-setosa \n     \n      # Petal length greater than sepal length?\niris.query('Petal_Length > Sepal_Length')   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n      # reverse\niris.query('Sepal_Length > Petal_Length')   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       0 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       1 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       Iris-setosa \n     \n     \n       2 \n       4.6 \n       3.1 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       3 \n       5.0 \n       3.6 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       4 \n       5.4 \n       3.9 \n       1.7 \n       0.4 \n       Iris-setosa \n     \n     \n       5 \n       4.6 \n       3.4 \n       1.4 \n       0.3 \n       Iris-setosa \n     \n     \n       6 \n       5.0 \n       3.4 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       7 \n       4.4 \n       2.9 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       8 \n       4.9 \n       3.1 \n       1.5 \n       0.1 \n       Iris-setosa \n     \n     \n       9 \n       5.4 \n       3.7 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       10 \n       4.8 \n       3.4 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       11 \n       4.8 \n       3.0 \n       1.4 \n       0.1 \n       Iris-setosa \n     \n     \n       12 \n       4.3 \n       3.0 \n       1.1 \n       0.1 \n       Iris-setosa \n     \n     \n       13 \n       5.8 \n       4.0 \n       1.2 \n       0.2 \n       Iris-setosa \n     \n     \n       14 \n       5.7 \n       4.4 \n       1.5 \n       0.4 \n       Iris-setosa \n     \n     \n       15 \n       5.4 \n       3.9 \n       1.3 \n       0.4 \n       Iris-setosa \n     \n     \n       16 \n       5.1 \n       3.5 \n       1.4 \n       0.3 \n       Iris-setosa \n     \n     \n       17 \n       5.7 \n       3.8 \n       1.7 \n       0.3 \n       Iris-setosa \n     \n     \n       18 \n       5.1 \n       3.8 \n       1.5 \n       0.3 \n       Iris-setosa \n     \n     \n       19 \n       5.4 \n       3.4 \n       1.7 \n       0.2 \n       Iris-setosa \n     \n     \n       20 \n       5.1 \n       3.7 \n       1.5 \n       0.4 \n       Iris-setosa \n     \n     \n       21 \n       4.6 \n       3.6 \n       1.0 \n       0.2 \n       Iris-setosa \n     \n     \n       22 \n       5.1 \n       3.3 \n       1.7 \n       0.5 \n       Iris-setosa \n     \n     \n       23 \n       4.8 \n       3.4 \n       1.9 \n       0.2 \n       Iris-setosa \n     \n     \n       24 \n       5.0 \n       3.0 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       25 \n       5.0 \n       3.4 \n       1.6 \n       0.4 \n       Iris-setosa \n     \n     \n       26 \n       5.2 \n       3.5 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       27 \n       5.2 \n       3.4 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       28 \n       4.7 \n       3.2 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       29 \n       4.8 \n       3.1 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       119 \n       6.9 \n       3.2 \n       5.7 \n       2.3 \n       Iris-virginica \n     \n     \n       120 \n       5.6 \n       2.8 \n       4.9 \n       2.0 \n       Iris-virginica \n     \n     \n       121 \n       7.7 \n       2.8 \n       6.7 \n       2.0 \n       Iris-virginica \n     \n     \n       122 \n       6.3 \n       2.7 \n       4.9 \n       1.8 \n       Iris-virginica \n     \n     \n       123 \n       6.7 \n       3.3 \n       5.7 \n       2.1 \n       Iris-virginica \n     \n     \n       124 \n       7.2 \n       3.2 \n       6.0 \n       1.8 \n       Iris-virginica \n     \n     \n       125 \n       6.2 \n       2.8 \n       4.8 \n       1.8 \n       Iris-virginica \n     \n     \n       126 \n       6.1 \n       3.0 \n       4.9 \n       1.8 \n       Iris-virginica \n     \n     \n       127 \n       6.4 \n       2.8 \n       5.6 \n       2.1 \n       Iris-virginica \n     \n     \n       128 \n       7.2 \n       3.0 \n       5.8 \n       1.6 \n       Iris-virginica \n     \n     \n       129 \n       7.4 \n       2.8 \n       6.1 \n       1.9 \n       Iris-virginica \n     \n     \n       130 \n       7.9 \n       3.8 \n       6.4 \n       2.0 \n       Iris-virginica \n     \n     \n       131 \n       6.4 \n       2.8 \n       5.6 \n       2.2 \n       Iris-virginica \n     \n     \n       132 \n       6.3 \n       2.8 \n       5.1 \n       1.5 \n       Iris-virginica \n     \n     \n       133 \n       6.1 \n       2.6 \n       5.6 \n       1.4 \n       Iris-virginica \n     \n     \n       134 \n       7.7 \n       3.0 \n       6.1 \n       2.3 \n       Iris-virginica \n     \n     \n       135 \n       6.3 \n       3.4 \n       5.6 \n       2.4 \n       Iris-virginica \n     \n     \n       136 \n       6.4 \n       3.1 \n       5.5 \n       1.8 \n       Iris-virginica \n     \n     \n       137 \n       6.0 \n       3.0 \n       4.8 \n       1.8 \n       Iris-virginica \n     \n     \n       138 \n       6.9 \n       3.1 \n       5.4 \n       2.1 \n       Iris-virginica \n     \n     \n       139 \n       6.7 \n       3.1 \n       5.6 \n       2.4 \n       Iris-virginica \n     \n     \n       140 \n       6.9 \n       3.1 \n       5.1 \n       2.3 \n       Iris-virginica \n     \n     \n       141 \n       5.8 \n       2.7 \n       5.1 \n       1.9 \n       Iris-virginica \n     \n     \n       142 \n       6.8 \n       3.2 \n       5.9 \n       2.3 \n       Iris-virginica \n     \n     \n       143 \n       6.7 \n       3.3 \n       5.7 \n       2.5 \n       Iris-virginica \n     \n     \n       144 \n       6.7 \n       3.0 \n       5.2 \n       2.3 \n       Iris-virginica \n     \n     \n       145 \n       6.3 \n       2.5 \n       5.0 \n       1.9 \n       Iris-virginica \n     \n     \n       146 \n       6.5 \n       3.0 \n       5.2 \n       2.0 \n       Iris-virginica \n     \n     \n       147 \n       6.2 \n       3.4 \n       5.4 \n       2.3 \n       Iris-virginica \n     \n     \n       148 \n       5.9 \n       3.0 \n       5.1 \n       1.8 \n       Iris-virginica \n     \n     149 rows \u00d7 5 columns   # alternatively\niris[iris.Sepal_Length > iris.Petal_Length]   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       0 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       1 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       Iris-setosa \n     \n     \n       2 \n       4.6 \n       3.1 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       3 \n       5.0 \n       3.6 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       4 \n       5.4 \n       3.9 \n       1.7 \n       0.4 \n       Iris-setosa \n     \n     \n       5 \n       4.6 \n       3.4 \n       1.4 \n       0.3 \n       Iris-setosa \n     \n     \n       6 \n       5.0 \n       3.4 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       7 \n       4.4 \n       2.9 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       8 \n       4.9 \n       3.1 \n       1.5 \n       0.1 \n       Iris-setosa \n     \n     \n       9 \n       5.4 \n       3.7 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       10 \n       4.8 \n       3.4 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       11 \n       4.8 \n       3.0 \n       1.4 \n       0.1 \n       Iris-setosa \n     \n     \n       12 \n       4.3 \n       3.0 \n       1.1 \n       0.1 \n       Iris-setosa \n     \n     \n       13 \n       5.8 \n       4.0 \n       1.2 \n       0.2 \n       Iris-setosa \n     \n     \n       14 \n       5.7 \n       4.4 \n       1.5 \n       0.4 \n       Iris-setosa \n     \n     \n       15 \n       5.4 \n       3.9 \n       1.3 \n       0.4 \n       Iris-setosa \n     \n     \n       16 \n       5.1 \n       3.5 \n       1.4 \n       0.3 \n       Iris-setosa \n     \n     \n       17 \n       5.7 \n       3.8 \n       1.7 \n       0.3 \n       Iris-setosa \n     \n     \n       18 \n       5.1 \n       3.8 \n       1.5 \n       0.3 \n       Iris-setosa \n     \n     \n       19 \n       5.4 \n       3.4 \n       1.7 \n       0.2 \n       Iris-setosa \n     \n     \n       20 \n       5.1 \n       3.7 \n       1.5 \n       0.4 \n       Iris-setosa \n     \n     \n       21 \n       4.6 \n       3.6 \n       1.0 \n       0.2 \n       Iris-setosa \n     \n     \n       22 \n       5.1 \n       3.3 \n       1.7 \n       0.5 \n       Iris-setosa \n     \n     \n       23 \n       4.8 \n       3.4 \n       1.9 \n       0.2 \n       Iris-setosa \n     \n     \n       24 \n       5.0 \n       3.0 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       25 \n       5.0 \n       3.4 \n       1.6 \n       0.4 \n       Iris-setosa \n     \n     \n       26 \n       5.2 \n       3.5 \n       1.5 \n       0.2 \n       Iris-setosa \n     \n     \n       27 \n       5.2 \n       3.4 \n       1.4 \n       0.2 \n       Iris-setosa \n     \n     \n       28 \n       4.7 \n       3.2 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       29 \n       4.8 \n       3.1 \n       1.6 \n       0.2 \n       Iris-setosa \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       119 \n       6.9 \n       3.2 \n       5.7 \n       2.3 \n       Iris-virginica \n     \n     \n       120 \n       5.6 \n       2.8 \n       4.9 \n       2.0 \n       Iris-virginica \n     \n     \n       121 \n       7.7 \n       2.8 \n       6.7 \n       2.0 \n       Iris-virginica \n     \n     \n       122 \n       6.3 \n       2.7 \n       4.9 \n       1.8 \n       Iris-virginica \n     \n     \n       123 \n       6.7 \n       3.3 \n       5.7 \n       2.1 \n       Iris-virginica \n     \n     \n       124 \n       7.2 \n       3.2 \n       6.0 \n       1.8 \n       Iris-virginica \n     \n     \n       125 \n       6.2 \n       2.8 \n       4.8 \n       1.8 \n       Iris-virginica \n     \n     \n       126 \n       6.1 \n       3.0 \n       4.9 \n       1.8 \n       Iris-virginica \n     \n     \n       127 \n       6.4 \n       2.8 \n       5.6 \n       2.1 \n       Iris-virginica \n     \n     \n       128 \n       7.2 \n       3.0 \n       5.8 \n       1.6 \n       Iris-virginica \n     \n     \n       129 \n       7.4 \n       2.8 \n       6.1 \n       1.9 \n       Iris-virginica \n     \n     \n       130 \n       7.9 \n       3.8 \n       6.4 \n       2.0 \n       Iris-virginica \n     \n     \n       131 \n       6.4 \n       2.8 \n       5.6 \n       2.2 \n       Iris-virginica \n     \n     \n       132 \n       6.3 \n       2.8 \n       5.1 \n       1.5 \n       Iris-virginica \n     \n     \n       133 \n       6.1 \n       2.6 \n       5.6 \n       1.4 \n       Iris-virginica \n     \n     \n       134 \n       7.7 \n       3.0 \n       6.1 \n       2.3 \n       Iris-virginica \n     \n     \n       135 \n       6.3 \n       3.4 \n       5.6 \n       2.4 \n       Iris-virginica \n     \n     \n       136 \n       6.4 \n       3.1 \n       5.5 \n       1.8 \n       Iris-virginica \n     \n     \n       137 \n       6.0 \n       3.0 \n       4.8 \n       1.8 \n       Iris-virginica \n     \n     \n       138 \n       6.9 \n       3.1 \n       5.4 \n       2.1 \n       Iris-virginica \n     \n     \n       139 \n       6.7 \n       3.1 \n       5.6 \n       2.4 \n       Iris-virginica \n     \n     \n       140 \n       6.9 \n       3.1 \n       5.1 \n       2.3 \n       Iris-virginica \n     \n     \n       141 \n       5.8 \n       2.7 \n       5.1 \n       1.9 \n       Iris-virginica \n     \n     \n       142 \n       6.8 \n       3.2 \n       5.9 \n       2.3 \n       Iris-virginica \n     \n     \n       143 \n       6.7 \n       3.3 \n       5.7 \n       2.5 \n       Iris-virginica \n     \n     \n       144 \n       6.7 \n       3.0 \n       5.2 \n       2.3 \n       Iris-virginica \n     \n     \n       145 \n       6.3 \n       2.5 \n       5.0 \n       1.9 \n       Iris-virginica \n     \n     \n       146 \n       6.5 \n       3.0 \n       5.2 \n       2.0 \n       Iris-virginica \n     \n     \n       147 \n       6.2 \n       3.4 \n       5.4 \n       2.3 \n       Iris-virginica \n     \n     \n       148 \n       5.9 \n       3.0 \n       5.1 \n       1.8 \n       Iris-virginica \n     \n     149 rows \u00d7 5 columns",
            "title": "Queries"
        },
        {
            "location": "/Exploratory Data Analysis/#the-challenges-of-data",
            "text": "",
            "title": "The Challenges of Data"
        },
        {
            "location": "/Exploratory Data Analysis/#missing-values",
            "text": "# Identifiy missing values\npd.isnull(digits)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       0 \n       1 \n       2 \n       3 \n       4 \n       5 \n       6 \n       7 \n       8 \n       9 \n       ... \n       55 \n       56 \n       57 \n       58 \n       59 \n       60 \n       61 \n       62 \n       63 \n       64 \n     \n   \n   \n     \n       0 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       1 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       2 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       4 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       5 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       6 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       7 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       8 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       9 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       10 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       11 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       12 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       13 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       14 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       15 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       16 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       17 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       18 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       19 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       20 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       21 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       22 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       23 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       24 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       25 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       26 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       27 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       28 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       29 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       3793 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3794 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3795 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3796 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3797 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3798 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3799 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3800 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3801 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3802 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3803 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3804 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3805 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3806 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3807 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3808 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3809 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3810 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3811 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3812 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3813 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3814 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3815 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3816 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3817 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3818 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3819 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3820 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3821 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     \n       3822 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       ... \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n     \n     3823 rows \u00d7 65 columns",
            "title": "Missing Values"
        },
        {
            "location": "/Exploratory Data Analysis/#delete",
            "text": "# Drop rows with missing values\ndf.dropna(axis=0)\n\n# Drop columns with missing values \ndf.dropna(axis=1)",
            "title": "Delete"
        },
        {
            "location": "/Exploratory Data Analysis/#impute",
            "text": "Imputation: mean, median, another variable, estimate with regression ANOVA, logit, k-NN.  # Import NumPy\nimport numpy as np\n\n# Calculate the mean of the DataFrame variable Salary\nmean = np.mean(df.Salary)\n\n# Replace missing values with the mean\ndf = df.Salary.fillna(mean)\n\ndf = df.Salary.fillna(mean, method=ffill)   ffill  and  bfill  for forward and backward fill.   from scipy import interpolate\n\n# Fill the DataFrame\ndf.interpolate()\n\ndf.interpolate(method=cubic)   cubic ,  polynomial .  limit  and  limit_direction .",
            "title": "Impute"
        },
        {
            "location": "/Exploratory Data Analysis/#outliers",
            "text": "Delete (data entry, processing errors), transform (assign weights, natural log to reduce variation) or impute them (replace extreme values with median, mean or mode values).",
            "title": "Outliers"
        },
        {
            "location": "/Exploratory Data Analysis/#the-datas-features",
            "text": "",
            "title": "The Data\u2019s Features"
        },
        {
            "location": "/Exploratory Data Analysis/#feature-engineering",
            "text": "Increase the predictive power of learning algorithms by creating features from raw data that will help the learning process.",
            "title": "Feature Engineering"
        },
        {
            "location": "/Exploratory Data Analysis/#encode-categorical-variables-into-numerical-ones",
            "text": "# Factorize the values \nlabels,levels = pd.factorize(iris.Class)\n\n# Save the encoded variables in `iris.Class`\niris.Class = labels\n\n# Print out the first rows\niris.Class.head()  0    0\n1    0\n2    0\n3    0\n4    0\nName: Class, dtype: int64",
            "title": "Encode categorical variables into numerical ones"
        },
        {
            "location": "/Exploratory Data Analysis/#bin-continuous-variables-in-groups",
            "text": "# Define the bins\nmybins = range(0, df.age.max(), 10)\n\n# Cut the data from the DataFrame with the help of the bins\ndf['age_bucket'] = pd.cut(df.age, bins=mybins)\n\n# Count the number of values per bucket\ndf['age_bucket'].value_counts()",
            "title": "Bin continuous variables in groups"
        },
        {
            "location": "/Exploratory Data Analysis/#scale-features",
            "text": "Center the data around 0.  from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler().fit(X)\n\nrescaledX = scaler.transform(X)",
            "title": "Scale features"
        },
        {
            "location": "/Exploratory Data Analysis/#feature-selection",
            "text": "Select the key subset of original data features in an attempt to reduce the dimensionality of the training problem.  PCA combines similar (correlated) attributes and creates new ones that are considered superior to the original attributes of the dataset.   Feature selection doesn\u2019t combine attributes: it evaluates the quality and predictive power and selects the best set.  To find important features, calculate how much better or worse a model does when we leave one variable out of the equation.  # Import `RandomForestClassifier`\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Isolate Data, class labels and column values\nX = iris.iloc[:,0:4]\nY = iris.iloc[:,-1]\nnames = iris.columns.values\n\n# Build the model\nrfc = RandomForestClassifier()\n\n# Fit the model\nrfc.fit(X, Y)\n\n# Print the results\nprint(\"Features sorted by their score:\")\nprint(sorted(zip(map(lambda x: round(x, 4), rfc.feature_importances_), names), reverse=True))  Features sorted by their score:\n[(0.4899, 'Petal_Length'), (0.2752, 'Petal_Width'), (0.2185, 'Sepal_Length'), (0.016400000000000001, 'Sepal_Width')]  The best feature set is one that includes the petal length and petal width data.  # Isolate feature importances \nimportance = rfc.feature_importances_\n\n# Sort the feature importances \nsorted_importances = np.argsort(importance)\n\n# Insert padding\npadding = np.arange(len(names)-1) + 0.5\n\n# Plot the data\nplt.barh(padding, importance[sorted_importances], align='center')\n\n# Customize the plot\nplt.yticks(padding, names[sorted_importances])\nplt.xlabel(\"Relative Importance\")\nplt.title(\"Variable Importance\")\n\n# Show the plot\nplt.show()",
            "title": "Feature Selection"
        },
        {
            "location": "/Exploratory Data Analysis/#patterns-in-the-data",
            "text": "Visualization of the data; static with Matplotlib or Seaborn, interactive with Bokeh or Plotly.",
            "title": "Patterns In the Data"
        },
        {
            "location": "/Exploratory Data Analysis/#correlation-identification-with-pca-from-scikit-learn",
            "text": "",
            "title": "Correlation Identification with PCA from scikit-learn"
        },
        {
            "location": "/Exploratory Data Analysis/#matplotlib",
            "text": "Dimensionality Reduction techniques, such as Principal Component Analysis (PCA). From \u2018many\u2019 to two \u2018principal components\u2019.  # Import `PCA` from `sklearn.decomposition`\nfrom sklearn.decomposition import PCA\n\n# Build the model\npca = PCA(n_components=2)\n\n# Reduce the data, output is ndarray\nreduced_data = pca.fit_transform(digits)\n\n# Inspect shape of the `reduced_data`\nreduced_data.shape\n\n# print out the reduced data\nprint(reduced_data)  [[ 12.65674168  -4.63610357]\n [ 16.82906354 -12.96575346]\n [-19.08072301  10.58293767]\n ..., \n [ 23.90693984   6.06265415]\n [ 29.1798759   -3.06847144]\n [-25.23132536  11.60863909]]  reduced_data = pd.DataFrame(reduced_data)  import matplotlib.pyplot as plt\n\nplt.scatter(reduced_data[0], reduced_data[1])\n\nplt.show()",
            "title": "Matplotlib"
        },
        {
            "location": "/Exploratory Data Analysis/#bokeh",
            "text": "To be implemented in a webpage for example.  from bokeh.charts import Scatter, output_file, show\n\n# Construct the scatter plot\np = Scatter(iris, x='Petal_Length', y='Petal_Width', color=\"Class\", title=\"Petal Length vs Petal Width\",\n            xlabel=\"Sepal Length\", ylabel=\"Sepal Width\")\n\n# Output the file \noutput_file('scatter.html')\n\n# Show the scatter plot\nshow(p)  The GIF output:",
            "title": "Bokeh"
        },
        {
            "location": "/Exploratory Data Analysis/#correlation-identification-with-pandas",
            "text": "The Pearson correlation assumes that the variables are normally distributed, that there is a straight line relationship between each of the variables and that the data is normally distributed about the regression line.   The Spearman correlation, on the other hand, assumes that we have two ordinal variables or two variables that are related in some way, but not linearly. The Spearman coefficient is the sum of deviation squared by  n  times  n  minus 1.  The Kendall Tau correlation is a coefficient that represents the degree of concordance between two columns of ranked data. We can use the Spearman correlation to measure the degree of association between two variables. The Kendal Tau coefficient is calculated by the number of concordant pairs minus the number of discordant pairs divided by the total number of pairs.  Spearman\u2019s coefficient will usually be larger than the Kendall\u2019s Tau coefficient, but this is not always the case: we\u2019ll get a smaller Spearman\u2019s coefficient when the deviations are huge among the observations of the data. The Spearman correlation is very sensitive to this and this might come in handy in some cases!  The two last correlation measures require ranking the data.  # Pearson correlation\niris.corr()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       Sepal_Length \n       1.000000 \n       -0.103784 \n       0.871283 \n       0.816971 \n       0.781219 \n     \n     \n       Sepal_Width \n       -0.103784 \n       1.000000 \n       -0.415218 \n       -0.350733 \n       -0.414532 \n     \n     \n       Petal_Length \n       0.871283 \n       -0.415218 \n       1.000000 \n       0.962314 \n       0.948519 \n     \n     \n       Petal_Width \n       0.816971 \n       -0.350733 \n       0.962314 \n       1.000000 \n       0.956014 \n     \n     \n       Class \n       0.781219 \n       -0.414532 \n       0.948519 \n       0.956014 \n       1.000000 \n     \n      iris2 = iris.rank()\n# Kendall Tau correlation\niris2.corr('kendall')   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       Sepal_Length \n       1.000000 \n       -0.067636 \n       0.718290 \n       0.654197 \n       0.669163 \n     \n     \n       Sepal_Width \n       -0.067636 \n       1.000000 \n       -0.175665 \n       -0.140207 \n       -0.327228 \n     \n     \n       Petal_Length \n       0.718290 \n       -0.175665 \n       1.000000 \n       0.803041 \n       0.822578 \n     \n     \n       Petal_Width \n       0.654197 \n       -0.140207 \n       0.803041 \n       1.000000 \n       0.837934 \n     \n     \n       Class \n       0.669163 \n       -0.327228 \n       0.822578 \n       0.837934 \n       1.000000 \n     \n      # Spearman Rank correlation\niris2.corr('spearman')   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sepal_Length \n       Sepal_Width \n       Petal_Length \n       Petal_Width \n       Class \n     \n   \n   \n     \n       Sepal_Length \n       1.000000 \n       -0.152136 \n       0.881759 \n       0.833586 \n       0.796546 \n     \n     \n       Sepal_Width \n       -0.152136 \n       1.000000 \n       -0.294020 \n       -0.267686 \n       -0.426319 \n     \n     \n       Petal_Length \n       0.881759 \n       -0.294020 \n       1.000000 \n       0.936188 \n       0.935220 \n     \n     \n       Petal_Width \n       0.833586 \n       -0.267686 \n       0.936188 \n       1.000000 \n       0.937409 \n     \n     \n       Class \n       0.796546 \n       -0.426319 \n       0.935220 \n       0.937409 \n       1.000000",
            "title": "Correlation Identification with Pandas"
        },
        {
            "location": "/Intro to data.world in Python/",
            "text": "CONTENT\n\n\nIntroduction\n\n\nWorking with Datasets\n\n\nImport a Dataset\n\n\nWorking with Datasets\n\n\nReading the metadata\n\n\nAccessing the data\n\n\n\n\n\n\nWorking with multiple datasets\n\n\nQuerying with data.world\n\n\nSQL: Querying a table\n\n\nSQL: Query multiple tables (join)\n\n\nSPARQL: Querying linked data\n\n\n\n\n\n\nWrap up\n\n\nAdvanced SDK Functionality\n\n\nOpen the API\n\n\nCreate a dataset using create_dataset method\n\n\nWrite a dataframe to a local file and upload to dataset\n\n\nUpdate dataset\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the course. Python 3. From DataCamp.\n\n\n\n\nIntroduction\n\u00b6\n\n\nOpen data is at the heart of \ndata.world\n. \n\n\nOpen an account, log in, find a dataset, download it or copy URL or integrate data.world with Python/R/Tableau by installing dw in the terminal. In Python for example.\n\n\npip install datadotworld[pandas]\n or \nconda install datadotworld-py\n\n\nthen,\n\n\ndw configure\n\n\nPull the API token from the account and enter it.\n\n\nThere are similar procedures for R and Tableau. Everything is documented on the website (when trying to download any dataset, more options appear for Python/R/Tableau).\n\n\nOption 1: use the data.world Jupyter Notebook template as a way to jump-start a project with Python.\n\n\nOption 2:\n\n\n%pylab inline\nimport pandas as pd\nimport os\n\n# Import the datadotworld module as dw\nimport datadotworld as dw\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\nWorking with Datasets\n\u00b6\n\n\nImport a Dataset\n\u00b6\n\n\nOnce the module is loaded, there are two ways to import a dataset.\n\n\n# First\n# Import the city council votes dataset\ndataset = dw.load_dataset('stephen-hoover/chicago-city-council-votes')\n\n\n\n\nThe dataset is now in the cache.\n\n\n# Second\n# Import the city council votes dataset\ndataset = dw.load_dataset('https://data.world/stephen-hoover/chicago-city-council-votes')\n\n\n\n\nWorking with Datasets\n\u00b6\n\n\nFrom the beginning.\n\n\n# Import the datadotworld module as dw\nimport datadotworld as dw\n# Import the Pretty Print module\nimport pprint as pp\n\n\n\n\n# Import the city council votes dataset\ndataset = dw.load_dataset('https://data.world/stephen-hoover/chicago-city-council-votes')\n\n# Use describe() \n# Review all the metadata that is downloaded with the dataset\n# Print it to the screen using pp.pprint()\npp.pprint(dataset.describe())\n\n\n\n\n{'description': 'Chicago city council voting records from May 2006 to March '\n                '2017\\n'\n                '\\n'\n                '# About this project\\n'\n                'This dataset aims to increase transparency into the Chicago '\n                \"city government by publishing each Alderman's voting record \"\n                'in an easily machine-readable format. These data come from '\n                'pdfs [published by the Office of the City '\n                'Clerk](http://www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports).\\n'\n                '\\n'\n                'This work was done as part of the Data for Democracy '\n                '[\"Chicago '\n                'Lobbyists\"](https://data.world/lilianhj/chicago-lobbyists) '\n                'project.\\n'\n                '\\n'\n                'The code which produced these data is at '\n                'https://github.com/stephen-hoover/data-processing/blob/master/scraping/Scrape%20Chicago%20City%20Clerk%20Website.ipynb '\n                '.\\n'\n                '\\n'\n                '# Still to-do\\n'\n                'It would be useful to include more information about each '\n                'measure -- sponsors, full text, and subject tags would be '\n                'particularly good to have.\\n'\n                '\\n'\n                'Aldermen names in the voting records are not fully '\n                'standardized yet. Ideally the same person would always have '\n                'exactly the same string.\\n'\n                '\\n'\n                '# External resources\\n'\n                '[City council meeting '\n                'reports](http://www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports)\\n'\n                '\\n'\n                '[Chicago Councilmatic](https://chicago.councilmatic.org)\\n'\n                '\\n'\n                '[City of Chicago Legislative Information '\n                'Center](https://chicago.legistar.com)',\n 'homepage': 'https://data.world/stephen-hoover/chicago-city-council-votes',\n 'keywords': ['chicago', 'government'],\n 'license': 'Public Domain',\n 'name': 'stephen-hoover_chicago-city-council-votes',\n 'resources': [{'format': 'csv',\n                'name': 'alderman_votes',\n                'path': 'data/alderman_votes.csv'},\n               {'format': 'csv',\n                'name': 'legislation_titles',\n                'path': 'data/legislation_titles.csv'},\n               {'bytes': 428918,\n                'format': 'csv',\n                'keywords': ['clean data'],\n                'mediatype': 'text/csv',\n                'name': 'original/alderman_votes.csv',\n                'path': 'original/alderman_votes.csv'},\n               {'bytes': 29658,\n                'description': 'These are titles for each of the issues in the '\n                               'alderman_votes.csv document. Join on \"Record\".',\n                'format': 'csv',\n                'keywords': ['clean data'],\n                'mediatype': 'text/csv',\n                'name': 'original/legislation_titles.csv',\n                'path': 'original/legislation_titles.csv'}],\n 'title': 'Chicago City Council Votes'}\n\n\n\n# Use describe() again\n# Get a description of a specific resource: alderman_votes\n# Print it to the screen\npp.pprint(dataset.describe('alderman_votes'))\n\n\n\n\n{'format': 'csv',\n 'name': 'alderman_votes',\n 'path': 'data/alderman_votes.csv',\n 'schema': {'fields': [{'description': 'Note that some entries contain a full '\n                                       'name and others only have a last name.',\n                        'name': 'alderman',\n                        'rdfType': 'http://www.w3.org/2001/XMLSchema#string',\n                        'title': 'Alderman',\n                        'type': 'string'},\n                       {'description': 'VOTE KEY: Y=Yes; N=No; A=Absent; '\n                                       'NV=Not Voting;  E=Excused; V=Vacant '\n                                       'R=Recusals from voting',\n                        'name': 'vote',\n                        'rdfType': 'http://www.w3.org/2001/XMLSchema#string',\n                        'title': 'Vote',\n                        'type': 'string'},\n                       {'name': 'ward',\n                        'rdfType': 'http://www.w3.org/2001/XMLSchema#integer',\n                        'title': 'Ward',\n                        'type': 'integer'},\n                       {'description': 'YYYY-MM-DD',\n                        'name': 'date',\n                        'rdfType': 'http://www.w3.org/2001/XMLSchema#date',\n                        'title': 'Date',\n                        'type': 'date'},\n                       {'name': 'record',\n                        'rdfType': 'http://www.w3.org/2001/XMLSchema#string',\n                        'title': 'Record',\n                        'type': 'string'}]}}\n\n\n\nReading the metadata\n\u00b6\n\n\nAll fields begin with \n{\n. The \nalderman_votes\n variable has 5 fields.\n\n\nAccessing the data\n\u00b6\n\n\nWe have access to three properties: \nraw_data\n, \ntables\n, and \ndataframes\n. Each of these returns a dictionary of values, just in different formats: \nbytes\n, \nlist\n and \npandas.DataFrame\n objects.\n\n\n# Use the dataframes property\n# Assign the alderman_votes table to the variable votes_dataframe\nvotes_dataframe = dataset.dataframes['alderman_votes']\n\n# Use the pandas shape property\n# Get rows/columns size for the `votes_dataframe` dataframe\npp.pprint(votes_dataframe.shape)\n\n\n\n\n(10850, 5)\n\n\n\n# Use the pandas head function\n# Print the first 3 rows of the `votes_dataframe` dataframe\npp.pprint(votes_dataframe.head(3))\n\n\n\n\n                alderman vote  ward       date       record\n0          Manuel Flores    N     1 2006-07-26  SO2006-3086\n1  Madeline L. Haithcock    N     2 2006-07-26  SO2006-3086\n2     Dorothy J. Tillman    N     3 2006-07-26  SO2006-3086\n\n\n\nWorking with multiple datasets\n\u00b6\n\n\nimport datadotworld as dw\n\n# Loaded two datasets\nint_dataset = dw.load_dataset('https://data.world/jonloyens/intermediate-data-world')\nfipsCodes_dataset = dw.load_dataset('https://data.world/uscensusbureau/fips-state-codes')\n\n\n\n\n# Create two dataframes:\n# police_shootings from the 'fatal_police_shootings_data' table of int_dataset and\n# state_abbrvs, from the 'statesfipscodes' table of fipsCodes_dataset\npolice_shootings = int_dataset.dataframes['fatal_police_shootings_data']\nstate_abbrvs = fipsCodes_dataset.dataframes['statesfipscodes']\n\n# Merge the two datasets together\n# on the state and stusab fields\n# Assign to a merged_dataframe variable\nmerged_dataframe = police_shootings.merge(state_abbrvs,\n                                          how = 'left',\n                                          left_on = 'state',\n                                          right_on='stusab')\n\n# Add a 'citystate' column to the merged_dataframe dataframe,\n# populating it with the concatinated values from the 'city' and 'state_name' columns,\n# separated by ', '\nmerged_dataframe[\"citystate\"] = merged_dataframe[\"city\"] + \\\n                                \", \" + merged_dataframe[\"state_name\"]\n\n## Print head of merged_dataframe\npp.pprint(merged_dataframe.head(5))\n\n\n\n\n   id                name        date   manner_of_death       armed   age  \\\n0   3          Tim Elliot  2015-01-02              shot         gun  53.0   \n1   4    Lewis Lee Lembke  2015-01-02              shot         gun  47.0   \n2   5  John Paul Quintero  2015-01-03  shot and Tasered     unarmed  23.0   \n3   8     Matthew Hoffman  2015-01-04              shot  toy weapon  32.0   \n4   9   Michael Rodriguez  2015-01-04              shot    nail gun  39.0\n\n  gender race           city state  signs_of_mental_illness threat_level  \\\n0      M    A        Shelton    WA                     True       attack   \n1      M    W          Aloha    OR                    False       attack   \n2      M    H        Wichita    KS                    False        other   \n3      M    W  San Francisco    CA                     True       attack   \n4      M    H          Evans    CO                    False       attack\n\n          flee  body_camera  state_fips stusab  state_name  statens  \\\n0  Not fleeing        False          53     WA  Washington  1779804   \n1  Not fleeing        False          41     OR      Oregon  1155107   \n2  Not fleeing        False          20     KS      Kansas   481813   \n3  Not fleeing        False           6     CA  California  1779778   \n4  Not fleeing        False           8     CO    Colorado  1779779\n\n                   citystate  \n0        Shelton, Washington  \n1              Aloha, Oregon  \n2            Wichita, Kansas  \n3  San Francisco, California  \n4            Evans, Colorado\n\n\n\nQuerying with data.world\n\u00b6\n\n\nAnother way to pull data in from data.world is to use the \nquery()\n method to use SQL or SPARQL to query one or more datasets. Check out the full dwSQL \ndocumentation\n.\n\n\nSQL: Querying a table\n\u00b6\n\n\nimport datadotworld as dw\n\n# Run a SQL query\n# Select all rows from the `unhcr_all` table where `Year` equals 2010\n# Assign the query string to a `sql_query` variable\nsql_query = \"SELECT * FROM `unhcr_all` WHERE Year = 2010\"\n\n# Use the `query` method of the datadotworld module\n# Run the `sql_query`\n# Assign the results to a `query2010` variable\nquery2010 = dw.query('https://data.world/agriculture/national-farmers-markets', sql_query)\n\n# Use the dataframe property of the resulting query\n# Create a dataframe variable named `unhcr2010`\nunhcr2010 = query2010.dataframe\n\n# Print the first 5 rows using the head method\npp.pprint(unhcr2010.head(5))\n\n\n\n\nSQL: Query multiple tables (join)\n\u00b6\n\n\nWrite queries against multiple tables within a single dataset or across many datasets! \n\n\nimport datadotworld as dw\n\n# Run a SQL query\n# Select state, the count of farmers markets (fmid),\n# and average obesity rate \n# from agriculture.`national-farmers-markets`.export,\n# LEFT JOINED against health.`obesity-by-state-2014`\n# adult_obese on state and location\nsql_query = \"SELECT state, count(fmid) as count, Avg(obesity.Value) as obesityAvg FROM Export LEFT JOIN health.`obesity-by-state-2014`.`adult_obese` as obesity ON state = obesity.location GROUP BY state ORDER BY count desc\"\n\n# Use the `query` method of the datadotworld module\n# Run the `sql_query` against the `https://data.world/agriculture/national-farmers-markets` dataset\n# Assign the results to a `queryResults` variable\nqueryResults = dw.query('https://data.world/agriculture/national-farmers-markets', \\\n                        sql_query)\n\n# Use the dataframes property of the resulting query\n# Create a dataframe variable named `stateStats`\nstateStats = queryResults.dataframe\n\n\n\n\nimport matplotlib.pyplot as plt\n\n# Plot the stateStats results using state as the x-axis\nstateStats.plot(x='state')\n\nplt.show()\n\n\n\n\n\n\nSPARQL: Querying linked data\n\u00b6\n\n\nBehind the scenes, data.world is converting all tabular data files into linked data using Semantic Web technologies. This allows to upload any tabular format, like xlsx, csv, tsv or json, and instantly be able to query and join them without issue. SQL is great for this, but SPARQL - which is the query language for linked data - can be more robust and flexible than SQL, allowing for more complex queries.\n\n\nCheck out the full SPARQL \ndocumentation\n.\n\n\nimport datadotworld as dw\n\n# A SPARQL query assigned to the `sparql_query` variable: \nsparql_query = \"PREFIX GOT: <https://tutorial.linked.data.world/d/sparqltutorial/> SELECT ?FName ?LName WHERE {?person GOT:col-got-house \\\"Stark\\\" . ?person GOT:col-got-fname ?FName . ?person GOT:col-got-lname ?LName .}\"\n\n# Use the pre-defined SPARQL query\n# Query dataset http://data.world/tutorial/sparqltutorial and\n# return the results to a queryResults variable\nqueryResults = dw.query('http://data.world/tutorial/sparqltutorial', \\\n                        sparql_query, query_type='sparql')\n\n# Use the dataframe property of the resulting query\n# Create a dataframe variable named `houseStark`\nhouseStark = queryResults.dataframe\n\n# Use pp.pprint() to print the dataframe to the screen\npp.pprint(houseStark)\n\n\n\n\n    FName  LName\n0    Robb  Stark\n1     Jon   Snow\n2   Sansa  Stark\n3    Arya  Stark\n4    Bran  Stark\n5  Rickon  Stark\n\n\n\nWrap up\n\u00b6\n\n\nimport datadotworld as dw\n# Import the sys module\nimport sys\n\n# Import a dataset\nrefugee_dataset = dw.load_dataset('nrippner/refugee-host-nations')\n\n# Get the size of the dataset:\nsys.getsizeof(refugee_dataset)\n\n\n\n\n56\n\n\n\n# List all of the data files:\ndataframes = refugee_dataset.dataframes\nfor df in dataframes:\n    pp.pprint(df)\n\n\n\n\n'refugees2011_15'\n'refugees_all_years'\n'refugees_per_capita'\n'unhcr_2015'\n'unhcr_all'\n'worldbank_data_dict'\n'worldbank_indicators'\n\n\n\n# Print all of the files in a dataset:\nresources = refugee_dataset.describe()['resources']\npp.pprint('name:')\nfor r in resources:\n    pp.pprint(r['name'])\npp.pprint('\\ntype of file:')\nfor r in resources:\n    pp.pprint(r['format'])\n\n\n\n\n'name:'\n'refugees2011_15'\n'refugees_all_years'\n'refugees_per_capita'\n'unhcr_2015'\n'unhcr_all'\n'worldbank_data_dict'\n'worldbank_indicators'\n'original/Refugees.ipynb'\n'original/refs.py'\n'original/refugees2011-15.csv'\n'original/refugees_all_years.csv'\n'original/refugees_per_capita.csv'\n'original/unhcr_2015.csv'\n'original/unhcr_all.csv'\n'original/worldbank_data_dict.csv'\n'original/worldbank_indicators.csv'\n'\\ntype of file:'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'ipynb'\n'py'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n\n\n\nAdvanced SDK Functionality\n\u00b6\n\n\nThe data.world Python SDK includes a variety of API wrappers, available via the \nApiClient\n class, to create, replace, update, and delete a dataset. In this section, we walk through a few common tasks:\n\n\n\n\nUse \napi_client()\n to get an instance of the \nApiClient\n\n\nCreate a dataset\n\n\nAdd a file from a dataframe: we write to a local csv and the upload the file\n\n\nAdd a file from a source URL: this is an easy way to add external data to the dataset and keep it up to date. We use a file from GitHub as an example, but we can use any URL source that points to a file.\n\n\nSync the dataset: this simple call reloads any files with a source URL, to ensure the latest version.\n\n\nUpdate the dataset: after creating a dataset, use \nupdate_dataset\n to change attiributes like description, summary or tags.\n\n\n\n\nUse \nhelp(api_client)\n to learn more about each available function or see the full \ndata.world API documentation\n.\n\n\nOpen the API\n\u00b6\n\n\nimport datadotworld as dw\n\n# Create an instance of the ApiClient using `api_client()`\napi_client = dw.api_client()\n\n# See api_client documentation\nhelp(api_client)\n\n\n\n\nHelp on RestApiClient in module datadotworld.client.api object:\n\nclass RestApiClient(builtins.object)\n |  REST API client\n |  \n |  Parameters\n |  ----------\n |  profile : str, optional\n |      Name of the configuration profile to use\n |  \n |  Methods defined here:\n |  \n |  __init__(self, config)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  add_files_via_url(self, dataset_key, files={})\n |      Add or update dataset files linked to source URLs\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      files : dict\n |          File names and source URLs to add or update\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> url = 'http://www.acme.inc/example.csv'\n |      >>> api_client = dw.api_client()\n |      >>> api_client.add_files_via_url(\n |      ...    'username/test-dataset',\n |      ...    {'example.csv': url})  # doctest: +SKIP\n |  \n |  create_dataset(self, owner_id, **kwargs)\n |      Create a new dataset\n |      \n |      Parameters\n |      ----------\n |      owner_id : str\n |          Username of the owner of the new dataset\n |      title : str\n |          Dataset title (will be used to generate dataset id on creation)\n |      description : str, optional\n |          Dataset description\n |      summary : str, optional\n |          Dataset summary markdown\n |      tags : list, optional\n |          Dataset tags\n |      license : {'Public Domain', 'PDDL', 'CC-0', 'CC-BY', 'ODC-BY',\n |                 'CC-BY-SA', 'ODC-ODbL', 'CC BY-NC', 'CC BY-NC-SA', 'Other'}\n |          Dataset license\n |      visibility : {'OPEN', 'PRIVATE'}\n |          Dataset visibility\n |      files : dict, optional\n |          File names and source URLs\n |      \n |      Returns\n |      -------\n |      str\n |          Newly created dataset key\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.create_dataset(\n |      ...     'username', title='Test dataset', visibility='PRIVATE',\n |      ...     license='Public Domain')  # doctest: +SKIP\n |  \n |  delete_files(self, dataset_key, names)\n |      Delete dataset file(s)\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      names : list of str\n |          The list of names for files to be deleted\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.delete_files(\n |      ...     'username/test-dataset', ['example.csv'])  # doctest: +SKIP\n |  \n |  download_datapackage(self, dataset_key, dest_dir)\n |      Download and unzip a dataset's datapackage\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      dest_dir : str or path\n |          Directory under which datapackage should be saved\n |      \n |      Returns\n |      -------\n |      path\n |          Location of the datapackage descriptor (datapackage.json) in the\n |          local filesystem\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> datapackage_descriptor = api_client.download_datapackage(\n |      ...     'jonloyens/an-intro-to-dataworld-dataset', '/tmp/test')\n |      >>> datapackage_descriptor\n |      '/tmp/test/datapackage.json'\n |  \n |  get_dataset(self, dataset_key)\n |      Retrieve an existing dataset definition\n |      \n |      This method retrieves metadata about an existing\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      \n |      Returns\n |      -------\n |      dict\n |          Dataset definition, with all attributes\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> intro_dataset = api_client.get_dataset(\n |      ...     'jonloyens/an-intro-to-dataworld-dataset')\n |      >>> intro_dataset['title']\n |      'An Intro to data.world Dataset'\n |  \n |  replace_dataset(self, dataset_key, **kwargs)\n |      Replace an existing dataset\n |      \n |      *This method will completely overwrite an existing dataset.*\n |      \n |      Parameters\n |      ----------\n |      description : str, optional\n |          Dataset description\n |      summary : str, optional\n |          Dataset summary markdown\n |      tags : list, optional\n |          Dataset tags\n |      license : {'Public Domain', 'PDDL', 'CC-0', 'CC-BY', 'ODC-BY',\n |                 'CC-BY-SA', 'ODC-ODbL', 'CC BY-NC', 'CC BY-NC-SA', 'Other'}\n |          Dataset license\n |      visibility : {'OPEN', 'PRIVATE'}\n |          Dataset visibility\n |      files : dict, optional\n |          File names and source URLs to add or update\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.replace_dataset(\n |      ...    'username/test-dataset',\n |      ...    visibility='PRIVATE', license='Public Domain',\n |      ...    description='A better description')  # doctest: +SKIP\n |  \n |  sync_files(self, dataset_key)\n |      Trigger synchronization process to update all dataset files linked to\n |      source URLs.\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.sync_files('username/test-dataset')  # doctest: +SKIP\n |  \n |  update_dataset(self, dataset_key, **kwargs)\n |      Update an existing dataset\n |      \n |      Parameters\n |      ----------\n |      description : str, optional\n |          Dataset description\n |      summary : str, optional\n |          Dataset summary markdown\n |      tags : list, optional\n |          Dataset tags\n |      license : {'Public Domain', 'PDDL', 'CC-0', 'CC-BY', 'ODC-BY',\n |                 'CC-BY-SA', 'ODC-ODbL', 'CC BY-NC', 'CC BY-NC-SA', 'Other'}\n |          Dataset license\n |      visibility : {'OPEN', 'PRIVATE'}, optional\n |          Dataset visibility\n |      files : dict, optional\n |          File names and source URLs to add or update\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.update_dataset(\n |      ...    'username/test-dataset',\n |      ...    tags=['demo', 'datadotworld'])  # doctest: +SKIP\n |  \n |  upload_files(self, dataset_key, files)\n |      Upload dataset files\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      files : list of str\n |          The list of names/paths for files stored in the local filesystem\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.upload_files(\n |      ...     'username/test-dataset',\n |      ...     ['/my/local/example.csv'])  # doctest: +SKIP\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nCreate a dataset using create_dataset method\n\u00b6\n\n\napi_client.create_dataset(owner_id=\"<YOUR_USERNAME>\", title=\"<DATASET_TITLE>\", visibility='PRIVATE')\n\n\nimport datadotworld as dw\n\n# Replace the < > items with your username and desired dataset title\n# Visibility can be changed to 'OPEN' if you choose\napi_client.create_dataset(owner_id=\"ugo\", title=\"intermediate-data-world\", visibility='OPEN')\n\n\n\n\n'https://data.world/ugo/intermediate-data-world'\n\n\n\nWrite a dataframe to a local file and upload to dataset\n\u00b6\n\n\nAdd file to the dataset using upload_files(). Replace the < > items with the dataset values.\n\n\napi_client.upload_files('<YOUR_USERNAME>/<DATASET_TITLE>',['police_shootings.csv'])\n\n\nimport os\n\ncwd = os.getcwd()\n#print(cwd)\n\n\n\n\nimport datadotworld as dw\n\n# Create a dataframe\npolice_shootings = dw.load_dataset('https://data.world/jonloyens/intermediate-data-world').dataframes['fatal_police_shootings_data']\n\n# Write dataframe to local csv using pandas to_csv() method\n# in the current working directory (cwd)\npolice_shootings.to_csv('police_shootings.csv', encoding='utf-8')\n\n\n\n\nCheck the current working directory.\n\n\nUpdate dataset\n\u00b6\n\n\nAdd a file from an external source URL. In this example we use GitHub. \n\nReplace the < > items with the dataset values\n\n\napi_client.add_files_via_url('<YOUR_USERNAME>/<DATASET_TITLE>',{'shootings_of_police.csv': 'https://github.com/fivethirtyeight/data/blob/master/police-deaths/all_data.csv\u2019})\n\n\nFor files added with \nadd_files_via_url\n, fetch the latest version using the \nsync()\n method:\n\n\napi_client.sync_files('<YOUR_USERNAME>/<DATASET_TITLE>')\n\n\nUse the \nupdate_dataset()\n method to update the metadata after dataset creation:\n\n\napi_client.update_dataset('<YOUR_USERNAME>/<DATASET_TITLE>', description='Dataset created to test out the python SDK functionality.', tags=['test', 'datacamp'])",
            "title": "Intro to data.world in Python"
        },
        {
            "location": "/Intro to data.world in Python/#working-with-datasets",
            "text": "",
            "title": "Working with Datasets"
        },
        {
            "location": "/Intro to data.world in Python/#import-a-dataset",
            "text": "Once the module is loaded, there are two ways to import a dataset.  # First\n# Import the city council votes dataset\ndataset = dw.load_dataset('stephen-hoover/chicago-city-council-votes')  The dataset is now in the cache.  # Second\n# Import the city council votes dataset\ndataset = dw.load_dataset('https://data.world/stephen-hoover/chicago-city-council-votes')",
            "title": "Import a Dataset"
        },
        {
            "location": "/Intro to data.world in Python/#working-with-datasets_1",
            "text": "From the beginning.  # Import the datadotworld module as dw\nimport datadotworld as dw\n# Import the Pretty Print module\nimport pprint as pp  # Import the city council votes dataset\ndataset = dw.load_dataset('https://data.world/stephen-hoover/chicago-city-council-votes')\n\n# Use describe() \n# Review all the metadata that is downloaded with the dataset\n# Print it to the screen using pp.pprint()\npp.pprint(dataset.describe())  {'description': 'Chicago city council voting records from May 2006 to March '\n                '2017\\n'\n                '\\n'\n                '# About this project\\n'\n                'This dataset aims to increase transparency into the Chicago '\n                \"city government by publishing each Alderman's voting record \"\n                'in an easily machine-readable format. These data come from '\n                'pdfs [published by the Office of the City '\n                'Clerk](http://www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports).\\n'\n                '\\n'\n                'This work was done as part of the Data for Democracy '\n                '[\"Chicago '\n                'Lobbyists\"](https://data.world/lilianhj/chicago-lobbyists) '\n                'project.\\n'\n                '\\n'\n                'The code which produced these data is at '\n                'https://github.com/stephen-hoover/data-processing/blob/master/scraping/Scrape%20Chicago%20City%20Clerk%20Website.ipynb '\n                '.\\n'\n                '\\n'\n                '# Still to-do\\n'\n                'It would be useful to include more information about each '\n                'measure -- sponsors, full text, and subject tags would be '\n                'particularly good to have.\\n'\n                '\\n'\n                'Aldermen names in the voting records are not fully '\n                'standardized yet. Ideally the same person would always have '\n                'exactly the same string.\\n'\n                '\\n'\n                '# External resources\\n'\n                '[City council meeting '\n                'reports](http://www.chicityclerk.com/legislation-records/journals-and-reports/council-meeting-reports)\\n'\n                '\\n'\n                '[Chicago Councilmatic](https://chicago.councilmatic.org)\\n'\n                '\\n'\n                '[City of Chicago Legislative Information '\n                'Center](https://chicago.legistar.com)',\n 'homepage': 'https://data.world/stephen-hoover/chicago-city-council-votes',\n 'keywords': ['chicago', 'government'],\n 'license': 'Public Domain',\n 'name': 'stephen-hoover_chicago-city-council-votes',\n 'resources': [{'format': 'csv',\n                'name': 'alderman_votes',\n                'path': 'data/alderman_votes.csv'},\n               {'format': 'csv',\n                'name': 'legislation_titles',\n                'path': 'data/legislation_titles.csv'},\n               {'bytes': 428918,\n                'format': 'csv',\n                'keywords': ['clean data'],\n                'mediatype': 'text/csv',\n                'name': 'original/alderman_votes.csv',\n                'path': 'original/alderman_votes.csv'},\n               {'bytes': 29658,\n                'description': 'These are titles for each of the issues in the '\n                               'alderman_votes.csv document. Join on \"Record\".',\n                'format': 'csv',\n                'keywords': ['clean data'],\n                'mediatype': 'text/csv',\n                'name': 'original/legislation_titles.csv',\n                'path': 'original/legislation_titles.csv'}],\n 'title': 'Chicago City Council Votes'}  # Use describe() again\n# Get a description of a specific resource: alderman_votes\n# Print it to the screen\npp.pprint(dataset.describe('alderman_votes'))  {'format': 'csv',\n 'name': 'alderman_votes',\n 'path': 'data/alderman_votes.csv',\n 'schema': {'fields': [{'description': 'Note that some entries contain a full '\n                                       'name and others only have a last name.',\n                        'name': 'alderman',\n                        'rdfType': 'http://www.w3.org/2001/XMLSchema#string',\n                        'title': 'Alderman',\n                        'type': 'string'},\n                       {'description': 'VOTE KEY: Y=Yes; N=No; A=Absent; '\n                                       'NV=Not Voting;  E=Excused; V=Vacant '\n                                       'R=Recusals from voting',\n                        'name': 'vote',\n                        'rdfType': 'http://www.w3.org/2001/XMLSchema#string',\n                        'title': 'Vote',\n                        'type': 'string'},\n                       {'name': 'ward',\n                        'rdfType': 'http://www.w3.org/2001/XMLSchema#integer',\n                        'title': 'Ward',\n                        'type': 'integer'},\n                       {'description': 'YYYY-MM-DD',\n                        'name': 'date',\n                        'rdfType': 'http://www.w3.org/2001/XMLSchema#date',\n                        'title': 'Date',\n                        'type': 'date'},\n                       {'name': 'record',\n                        'rdfType': 'http://www.w3.org/2001/XMLSchema#string',\n                        'title': 'Record',\n                        'type': 'string'}]}}",
            "title": "Working with Datasets"
        },
        {
            "location": "/Intro to data.world in Python/#reading-the-metadata",
            "text": "All fields begin with  { . The  alderman_votes  variable has 5 fields.",
            "title": "Reading the metadata"
        },
        {
            "location": "/Intro to data.world in Python/#accessing-the-data",
            "text": "We have access to three properties:  raw_data ,  tables , and  dataframes . Each of these returns a dictionary of values, just in different formats:  bytes ,  list  and  pandas.DataFrame  objects.  # Use the dataframes property\n# Assign the alderman_votes table to the variable votes_dataframe\nvotes_dataframe = dataset.dataframes['alderman_votes']\n\n# Use the pandas shape property\n# Get rows/columns size for the `votes_dataframe` dataframe\npp.pprint(votes_dataframe.shape)  (10850, 5)  # Use the pandas head function\n# Print the first 3 rows of the `votes_dataframe` dataframe\npp.pprint(votes_dataframe.head(3))                  alderman vote  ward       date       record\n0          Manuel Flores    N     1 2006-07-26  SO2006-3086\n1  Madeline L. Haithcock    N     2 2006-07-26  SO2006-3086\n2     Dorothy J. Tillman    N     3 2006-07-26  SO2006-3086",
            "title": "Accessing the data"
        },
        {
            "location": "/Intro to data.world in Python/#working-with-multiple-datasets",
            "text": "import datadotworld as dw\n\n# Loaded two datasets\nint_dataset = dw.load_dataset('https://data.world/jonloyens/intermediate-data-world')\nfipsCodes_dataset = dw.load_dataset('https://data.world/uscensusbureau/fips-state-codes')  # Create two dataframes:\n# police_shootings from the 'fatal_police_shootings_data' table of int_dataset and\n# state_abbrvs, from the 'statesfipscodes' table of fipsCodes_dataset\npolice_shootings = int_dataset.dataframes['fatal_police_shootings_data']\nstate_abbrvs = fipsCodes_dataset.dataframes['statesfipscodes']\n\n# Merge the two datasets together\n# on the state and stusab fields\n# Assign to a merged_dataframe variable\nmerged_dataframe = police_shootings.merge(state_abbrvs,\n                                          how = 'left',\n                                          left_on = 'state',\n                                          right_on='stusab')\n\n# Add a 'citystate' column to the merged_dataframe dataframe,\n# populating it with the concatinated values from the 'city' and 'state_name' columns,\n# separated by ', '\nmerged_dataframe[\"citystate\"] = merged_dataframe[\"city\"] + \\\n                                \", \" + merged_dataframe[\"state_name\"]\n\n## Print head of merged_dataframe\npp.pprint(merged_dataframe.head(5))     id                name        date   manner_of_death       armed   age  \\\n0   3          Tim Elliot  2015-01-02              shot         gun  53.0   \n1   4    Lewis Lee Lembke  2015-01-02              shot         gun  47.0   \n2   5  John Paul Quintero  2015-01-03  shot and Tasered     unarmed  23.0   \n3   8     Matthew Hoffman  2015-01-04              shot  toy weapon  32.0   \n4   9   Michael Rodriguez  2015-01-04              shot    nail gun  39.0\n\n  gender race           city state  signs_of_mental_illness threat_level  \\\n0      M    A        Shelton    WA                     True       attack   \n1      M    W          Aloha    OR                    False       attack   \n2      M    H        Wichita    KS                    False        other   \n3      M    W  San Francisco    CA                     True       attack   \n4      M    H          Evans    CO                    False       attack\n\n          flee  body_camera  state_fips stusab  state_name  statens  \\\n0  Not fleeing        False          53     WA  Washington  1779804   \n1  Not fleeing        False          41     OR      Oregon  1155107   \n2  Not fleeing        False          20     KS      Kansas   481813   \n3  Not fleeing        False           6     CA  California  1779778   \n4  Not fleeing        False           8     CO    Colorado  1779779\n\n                   citystate  \n0        Shelton, Washington  \n1              Aloha, Oregon  \n2            Wichita, Kansas  \n3  San Francisco, California  \n4            Evans, Colorado",
            "title": "Working with multiple datasets"
        },
        {
            "location": "/Intro to data.world in Python/#querying-with-dataworld",
            "text": "Another way to pull data in from data.world is to use the  query()  method to use SQL or SPARQL to query one or more datasets. Check out the full dwSQL  documentation .",
            "title": "Querying with data.world"
        },
        {
            "location": "/Intro to data.world in Python/#sql-querying-a-table",
            "text": "import datadotworld as dw\n\n# Run a SQL query\n# Select all rows from the `unhcr_all` table where `Year` equals 2010\n# Assign the query string to a `sql_query` variable\nsql_query = \"SELECT * FROM `unhcr_all` WHERE Year = 2010\"\n\n# Use the `query` method of the datadotworld module\n# Run the `sql_query`\n# Assign the results to a `query2010` variable\nquery2010 = dw.query('https://data.world/agriculture/national-farmers-markets', sql_query)\n\n# Use the dataframe property of the resulting query\n# Create a dataframe variable named `unhcr2010`\nunhcr2010 = query2010.dataframe\n\n# Print the first 5 rows using the head method\npp.pprint(unhcr2010.head(5))",
            "title": "SQL: Querying a table"
        },
        {
            "location": "/Intro to data.world in Python/#sql-query-multiple-tables-join",
            "text": "Write queries against multiple tables within a single dataset or across many datasets!   import datadotworld as dw\n\n# Run a SQL query\n# Select state, the count of farmers markets (fmid),\n# and average obesity rate \n# from agriculture.`national-farmers-markets`.export,\n# LEFT JOINED against health.`obesity-by-state-2014`\n# adult_obese on state and location\nsql_query = \"SELECT state, count(fmid) as count, Avg(obesity.Value) as obesityAvg FROM Export LEFT JOIN health.`obesity-by-state-2014`.`adult_obese` as obesity ON state = obesity.location GROUP BY state ORDER BY count desc\"\n\n# Use the `query` method of the datadotworld module\n# Run the `sql_query` against the `https://data.world/agriculture/national-farmers-markets` dataset\n# Assign the results to a `queryResults` variable\nqueryResults = dw.query('https://data.world/agriculture/national-farmers-markets', \\\n                        sql_query)\n\n# Use the dataframes property of the resulting query\n# Create a dataframe variable named `stateStats`\nstateStats = queryResults.dataframe  import matplotlib.pyplot as plt\n\n# Plot the stateStats results using state as the x-axis\nstateStats.plot(x='state')\n\nplt.show()",
            "title": "SQL: Query multiple tables (join)"
        },
        {
            "location": "/Intro to data.world in Python/#sparql-querying-linked-data",
            "text": "Behind the scenes, data.world is converting all tabular data files into linked data using Semantic Web technologies. This allows to upload any tabular format, like xlsx, csv, tsv or json, and instantly be able to query and join them without issue. SQL is great for this, but SPARQL - which is the query language for linked data - can be more robust and flexible than SQL, allowing for more complex queries.  Check out the full SPARQL  documentation .  import datadotworld as dw\n\n# A SPARQL query assigned to the `sparql_query` variable: \nsparql_query = \"PREFIX GOT: <https://tutorial.linked.data.world/d/sparqltutorial/> SELECT ?FName ?LName WHERE {?person GOT:col-got-house \\\"Stark\\\" . ?person GOT:col-got-fname ?FName . ?person GOT:col-got-lname ?LName .}\"\n\n# Use the pre-defined SPARQL query\n# Query dataset http://data.world/tutorial/sparqltutorial and\n# return the results to a queryResults variable\nqueryResults = dw.query('http://data.world/tutorial/sparqltutorial', \\\n                        sparql_query, query_type='sparql')\n\n# Use the dataframe property of the resulting query\n# Create a dataframe variable named `houseStark`\nhouseStark = queryResults.dataframe\n\n# Use pp.pprint() to print the dataframe to the screen\npp.pprint(houseStark)      FName  LName\n0    Robb  Stark\n1     Jon   Snow\n2   Sansa  Stark\n3    Arya  Stark\n4    Bran  Stark\n5  Rickon  Stark",
            "title": "SPARQL: Querying linked data"
        },
        {
            "location": "/Intro to data.world in Python/#wrap-up",
            "text": "import datadotworld as dw\n# Import the sys module\nimport sys\n\n# Import a dataset\nrefugee_dataset = dw.load_dataset('nrippner/refugee-host-nations')\n\n# Get the size of the dataset:\nsys.getsizeof(refugee_dataset)  56  # List all of the data files:\ndataframes = refugee_dataset.dataframes\nfor df in dataframes:\n    pp.pprint(df)  'refugees2011_15'\n'refugees_all_years'\n'refugees_per_capita'\n'unhcr_2015'\n'unhcr_all'\n'worldbank_data_dict'\n'worldbank_indicators'  # Print all of the files in a dataset:\nresources = refugee_dataset.describe()['resources']\npp.pprint('name:')\nfor r in resources:\n    pp.pprint(r['name'])\npp.pprint('\\ntype of file:')\nfor r in resources:\n    pp.pprint(r['format'])  'name:'\n'refugees2011_15'\n'refugees_all_years'\n'refugees_per_capita'\n'unhcr_2015'\n'unhcr_all'\n'worldbank_data_dict'\n'worldbank_indicators'\n'original/Refugees.ipynb'\n'original/refs.py'\n'original/refugees2011-15.csv'\n'original/refugees_all_years.csv'\n'original/refugees_per_capita.csv'\n'original/unhcr_2015.csv'\n'original/unhcr_all.csv'\n'original/worldbank_data_dict.csv'\n'original/worldbank_indicators.csv'\n'\\ntype of file:'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'ipynb'\n'py'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'\n'csv'",
            "title": "Wrap up"
        },
        {
            "location": "/Intro to data.world in Python/#advanced-sdk-functionality",
            "text": "The data.world Python SDK includes a variety of API wrappers, available via the  ApiClient  class, to create, replace, update, and delete a dataset. In this section, we walk through a few common tasks:   Use  api_client()  to get an instance of the  ApiClient  Create a dataset  Add a file from a dataframe: we write to a local csv and the upload the file  Add a file from a source URL: this is an easy way to add external data to the dataset and keep it up to date. We use a file from GitHub as an example, but we can use any URL source that points to a file.  Sync the dataset: this simple call reloads any files with a source URL, to ensure the latest version.  Update the dataset: after creating a dataset, use  update_dataset  to change attiributes like description, summary or tags.   Use  help(api_client)  to learn more about each available function or see the full  data.world API documentation .",
            "title": "Advanced SDK Functionality"
        },
        {
            "location": "/Intro to data.world in Python/#open-the-api",
            "text": "import datadotworld as dw\n\n# Create an instance of the ApiClient using `api_client()`\napi_client = dw.api_client()\n\n# See api_client documentation\nhelp(api_client)  Help on RestApiClient in module datadotworld.client.api object:\n\nclass RestApiClient(builtins.object)\n |  REST API client\n |  \n |  Parameters\n |  ----------\n |  profile : str, optional\n |      Name of the configuration profile to use\n |  \n |  Methods defined here:\n |  \n |  __init__(self, config)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  add_files_via_url(self, dataset_key, files={})\n |      Add or update dataset files linked to source URLs\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      files : dict\n |          File names and source URLs to add or update\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> url = 'http://www.acme.inc/example.csv'\n |      >>> api_client = dw.api_client()\n |      >>> api_client.add_files_via_url(\n |      ...    'username/test-dataset',\n |      ...    {'example.csv': url})  # doctest: +SKIP\n |  \n |  create_dataset(self, owner_id, **kwargs)\n |      Create a new dataset\n |      \n |      Parameters\n |      ----------\n |      owner_id : str\n |          Username of the owner of the new dataset\n |      title : str\n |          Dataset title (will be used to generate dataset id on creation)\n |      description : str, optional\n |          Dataset description\n |      summary : str, optional\n |          Dataset summary markdown\n |      tags : list, optional\n |          Dataset tags\n |      license : {'Public Domain', 'PDDL', 'CC-0', 'CC-BY', 'ODC-BY',\n |                 'CC-BY-SA', 'ODC-ODbL', 'CC BY-NC', 'CC BY-NC-SA', 'Other'}\n |          Dataset license\n |      visibility : {'OPEN', 'PRIVATE'}\n |          Dataset visibility\n |      files : dict, optional\n |          File names and source URLs\n |      \n |      Returns\n |      -------\n |      str\n |          Newly created dataset key\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.create_dataset(\n |      ...     'username', title='Test dataset', visibility='PRIVATE',\n |      ...     license='Public Domain')  # doctest: +SKIP\n |  \n |  delete_files(self, dataset_key, names)\n |      Delete dataset file(s)\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      names : list of str\n |          The list of names for files to be deleted\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.delete_files(\n |      ...     'username/test-dataset', ['example.csv'])  # doctest: +SKIP\n |  \n |  download_datapackage(self, dataset_key, dest_dir)\n |      Download and unzip a dataset's datapackage\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      dest_dir : str or path\n |          Directory under which datapackage should be saved\n |      \n |      Returns\n |      -------\n |      path\n |          Location of the datapackage descriptor (datapackage.json) in the\n |          local filesystem\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> datapackage_descriptor = api_client.download_datapackage(\n |      ...     'jonloyens/an-intro-to-dataworld-dataset', '/tmp/test')\n |      >>> datapackage_descriptor\n |      '/tmp/test/datapackage.json'\n |  \n |  get_dataset(self, dataset_key)\n |      Retrieve an existing dataset definition\n |      \n |      This method retrieves metadata about an existing\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      \n |      Returns\n |      -------\n |      dict\n |          Dataset definition, with all attributes\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> intro_dataset = api_client.get_dataset(\n |      ...     'jonloyens/an-intro-to-dataworld-dataset')\n |      >>> intro_dataset['title']\n |      'An Intro to data.world Dataset'\n |  \n |  replace_dataset(self, dataset_key, **kwargs)\n |      Replace an existing dataset\n |      \n |      *This method will completely overwrite an existing dataset.*\n |      \n |      Parameters\n |      ----------\n |      description : str, optional\n |          Dataset description\n |      summary : str, optional\n |          Dataset summary markdown\n |      tags : list, optional\n |          Dataset tags\n |      license : {'Public Domain', 'PDDL', 'CC-0', 'CC-BY', 'ODC-BY',\n |                 'CC-BY-SA', 'ODC-ODbL', 'CC BY-NC', 'CC BY-NC-SA', 'Other'}\n |          Dataset license\n |      visibility : {'OPEN', 'PRIVATE'}\n |          Dataset visibility\n |      files : dict, optional\n |          File names and source URLs to add or update\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.replace_dataset(\n |      ...    'username/test-dataset',\n |      ...    visibility='PRIVATE', license='Public Domain',\n |      ...    description='A better description')  # doctest: +SKIP\n |  \n |  sync_files(self, dataset_key)\n |      Trigger synchronization process to update all dataset files linked to\n |      source URLs.\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.sync_files('username/test-dataset')  # doctest: +SKIP\n |  \n |  update_dataset(self, dataset_key, **kwargs)\n |      Update an existing dataset\n |      \n |      Parameters\n |      ----------\n |      description : str, optional\n |          Dataset description\n |      summary : str, optional\n |          Dataset summary markdown\n |      tags : list, optional\n |          Dataset tags\n |      license : {'Public Domain', 'PDDL', 'CC-0', 'CC-BY', 'ODC-BY',\n |                 'CC-BY-SA', 'ODC-ODbL', 'CC BY-NC', 'CC BY-NC-SA', 'Other'}\n |          Dataset license\n |      visibility : {'OPEN', 'PRIVATE'}, optional\n |          Dataset visibility\n |      files : dict, optional\n |          File names and source URLs to add or update\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.update_dataset(\n |      ...    'username/test-dataset',\n |      ...    tags=['demo', 'datadotworld'])  # doctest: +SKIP\n |  \n |  upload_files(self, dataset_key, files)\n |      Upload dataset files\n |      \n |      Parameters\n |      ----------\n |      dataset_key : str\n |          Dataset identifier, in the form of owner/id\n |      files : list of str\n |          The list of names/paths for files stored in the local filesystem\n |      \n |      Raises\n |      ------\n |      RestApiException\n |          If a server error occurs\n |      \n |      Examples\n |      --------\n |      >>> import datadotworld as dw\n |      >>> api_client = dw.api_client()\n |      >>> api_client.upload_files(\n |      ...     'username/test-dataset',\n |      ...     ['/my/local/example.csv'])  # doctest: +SKIP\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)",
            "title": "Open the API"
        },
        {
            "location": "/Intro to data.world in Python/#create-a-dataset-using-create_dataset-method",
            "text": "api_client.create_dataset(owner_id=\"<YOUR_USERNAME>\", title=\"<DATASET_TITLE>\", visibility='PRIVATE')  import datadotworld as dw\n\n# Replace the < > items with your username and desired dataset title\n# Visibility can be changed to 'OPEN' if you choose\napi_client.create_dataset(owner_id=\"ugo\", title=\"intermediate-data-world\", visibility='OPEN')  'https://data.world/ugo/intermediate-data-world'",
            "title": "Create a dataset using create_dataset method"
        },
        {
            "location": "/Intro to data.world in Python/#write-a-dataframe-to-a-local-file-and-upload-to-dataset",
            "text": "Add file to the dataset using upload_files(). Replace the < > items with the dataset values.  api_client.upload_files('<YOUR_USERNAME>/<DATASET_TITLE>',['police_shootings.csv'])  import os\n\ncwd = os.getcwd()\n#print(cwd)  import datadotworld as dw\n\n# Create a dataframe\npolice_shootings = dw.load_dataset('https://data.world/jonloyens/intermediate-data-world').dataframes['fatal_police_shootings_data']\n\n# Write dataframe to local csv using pandas to_csv() method\n# in the current working directory (cwd)\npolice_shootings.to_csv('police_shootings.csv', encoding='utf-8')  Check the current working directory.",
            "title": "Write a dataframe to a local file and upload to dataset"
        },
        {
            "location": "/Intro to data.world in Python/#update-dataset",
            "text": "Add a file from an external source URL. In this example we use GitHub.  \nReplace the < > items with the dataset values  api_client.add_files_via_url('<YOUR_USERNAME>/<DATASET_TITLE>',{'shootings_of_police.csv': 'https://github.com/fivethirtyeight/data/blob/master/police-deaths/all_data.csv\u2019})  For files added with  add_files_via_url , fetch the latest version using the  sync()  method:  api_client.sync_files('<YOUR_USERNAME>/<DATASET_TITLE>')  Use the  update_dataset()  method to update the metadata after dataset creation:  api_client.update_dataset('<YOUR_USERNAME>/<DATASET_TITLE>', description='Dataset created to test out the python SDK functionality.', tags=['test', 'datacamp'])",
            "title": "Update dataset"
        },
        {
            "location": "/Python+And+Excel/",
            "text": "CONTENT\n\n\nThe Data as the Starting Point\n\n\nCheck the Quality of the Spreadsheet\n\n\nBest Practices for Spreadsheet Data\n\n\n\n\n\n\nPreparing the Workspace\n\n\nUsing Virtual Environments\n\n\nCheck the Loaded Dataset\n\n\nInstall Packages to Read and Write Excel Files\n\n\nPackages to Parse Excel Files and Write them back with Python\n\n\n\n\n\n\nLoad Excel & CSV Files as Pandas DataFrames\n\n\nExcel\n\n\nCSV\n\n\nFlat files, tables\n\n\n\n\n\n\nWrite Pandas DataFrames to Excel and CSV Files\n\n\nExcel\n\n\nCSV, flat files, tables\n\n\n\n\n\n\nRead and Write Excel Files with openyxl\n\n\nRead and Format Excel Files with xlrd\n\n\nWrite to Excel Files with xlwt\n\n\nA Collection of Utilities: xlutils\n\n\nRead with pyexcel\n\n\nWrite with pyexcel\n\n\nRead and Write .csv Files\n\n\nNumpy\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nThe Data as the Starting Point\n\u00b6\n\n\nWork with packages such as \npandas, openpyxl, xlrd, xlutils, pyexcel\n.\n\n\nDatasets from Kaggle, Quandl, Google or on repositories (GitHub, Bitbucket, GitLab, etc.).\n\n\nCheck the Quality of the Spreadsheet\n\u00b6\n\n\n\n\nDoes the spreadsheet represent static data?\n\n\nDoes the spreadsheet mix data, calculations, and reporting?\n\n\nIs the data in the spreadsheet complete and consistent?\n\n\nDoes the spreadsheet have a systematic worksheet structure?\n\n\nAre the live formulas in the spreadsheet valid?\n\n\n\n\n\n\n\n\nBest Practices for Spreadsheet Data\n\u00b6\n\n\n\n\nThe first row of the spreadsheet is usually reserved for the header, while the first column is used to identify the sampling unit;\n\n\nAvoid names, values or fields with blank spaces. Otherwise, each word will be interpreted as a separate variable, resulting in errors that are related to the number of elements per line in the dataset. Consider using:\n\n\nUnderscores,\n\n\nDashes,\n\n\nCamel case, where the first letter of each section of text is capitalized, or\n\n\nConcatenating words\n\n\n\n\n\n\nShort names are preferred over longer names;\n\n\nTry to avoid using names that contain symbols such as \n?, %, ^, &, *, (, ), -, #, ?, <, >, /, |, \\, [ ,] , {, }\n and \n,\n and dollar sign;\n\n\nDelete any comments that were made in the file to avoid extra columns or NA\u2019s to be added to the file; and\n\n\nMake sure that any missing values in the dataset are indicated with NA.\n\n\n\n\nSave in \n.xls, .xlsx, .csv, .txt\n.\n\n\nPreparing the Workspace\n\u00b6\n\n\n# Import `os` \nimport os\n\n# Retrieve current working directory (`cwd`)\ncwd = os.getcwd()\n\n\n\n\nPrint it with \ncwd\n or \nprint(cwd)\n.\n\n\n# Change directory \nos.chdir(\"/path/to/your/folder\")\n\n# List all files and directories in current directory\nos.listdir('.')\n\n\n\n\nUsing Virtual Environments\n\u00b6\n\n\nIn a Python virtualenv: we can multiple projects running at the same time and we don\u2019t want them to share the same Python installation or when projects have conflicting requirements.\n\n\n# Install virtualenv\n$ pip install virtualenv\n\n# Go to the folder of the project\n$ cd my_folder\n\n# Create a virtual environment `venv`\n$ virtualenv venv\n\n# Indicate the Python interpreter to use for `venv`\n$ virtualenv -p /usr/bin/python2.7 venv\n\n# Activate `venv`\n$ source venv/bin/activate\n\n# Deactivate `venv`\n$ deactivate\n\n\n\n\nCheck the Loaded Dataset\n\u00b6\n\n\n# Check the first entries of the DataFrame\ndf1.head()\n\n# Check the last entries of the DataFrame\ndf1.tail()\n\n# Inspect the shape \ndata.shape\n\n# Inspect the number of dimensions\ndata.ndim\n\n# Inspect the data type\ndata.dtype\n\n\n\n\nInstall Packages to Read and Write Excel Files\n\u00b6\n\n\npandas, openpyxl, xlrd, xlutils, pyexcel\n\u2026\n\n\n\n\npip install\n.\n\n\nconda install\n (Anaconda includes \n100 of the most popular Python\n, \nR\n and Scala packages for data science and several open source development environments such as Jupyter and Spyder).\n\n\n\n\nPackages to Parse Excel Files and Write them back with Python\n\u00b6\n\n\nFrom the \nsite\n:\n\n\n\n\nopenpyxl\n, the recommended package for reading and writing Excel 2010 files (ie: .xlsx). \nDocumentation\n.\n\n\nxlsxwriter\n, an alternative package for writing data, formatting information and, in particular, charts in the Excel 2010 format (ie: .xlsx). \nDocumentation\n.\n\n\nxlrd\n, this package is for reading data and formatting information from older Excel files (ie: .xls). \nDocumentation\n.\n\n\nxlwt\n, this package is for writing data and formatting information to older Excel files (ie: .xls). \nDocumentation\n.\n\n\nxlutils\n, this package collects utilities that require both xlrd and xlwt, including the ability to copy and modify or filter existing excel files. \nDocumentation\n.\n\n\n\n\nLoad Excel & CSV Files as Pandas DataFrames\n\u00b6\n\n\nExcel\n\u00b6\n\n\n# Import pandas\nimport pandas as pd\n\n# Assign spreadsheet filename to `file`\nfile = 'example.xlsx'\n\n# Load spreadsheet\nxl = pd.ExcelFile(file)\n\n# Print the sheet names\nprint(xl.sheet_names)\n\n# Load a sheet into a DataFrame by name: df1\ndf1 = xl.parse('Sheet1')\n\n\n\n\nCSV\n\u00b6\n\n\n# Import pandas\nimport pandas as pd\n\n# Load csv\ndf = pd.read_csv(\"example.csv\") \n\n\n\n\nMore options\n.\n\n\nFlat files, tables\n\u00b6\n\n\nAlso: \nread_table()\n and \nread_fwf()\n. \nMore options\n.\n\n\nWrite Pandas DataFrames to Excel and CSV Files\n\u00b6\n\n\nExcel\n\u00b6\n\n\n# Specify a writer\nwriter = pd.ExcelWriter('example.xlsx', engine='xlsxwriter')\n\n# Write the DataFrame to a file     \nyourData.to_excel(writer, 'Sheet1')\n\n# Save the result \nwriter.save()\n\n\n\n\nPass the writer variable to the \nto_excel()\n function and specify the sheet name. Add a sheet with the data to an existing workbook: \nExcelWriter\n save multiple, (slightly) different DataFrames to one workbook.\n\n\n# Specify a writer\nwriter = pd.ExcelWriter('example.xlsx')\n\n# Write the DataFrame to a file     \nyourData.to_excel(writer, 'Sheet1')\n\n# Save the result \nwriter.save()\n\n\n\n\nSave one DataFrame to a file, don\u2019t specify the engine argument in the \npd.ExcelWriter()\n function. The rest of the steps stay the same.\n\n\nCSV, flat files, tables\n\u00b6\n\n\n# Write the DataFrame to csv\ndf.to_csv(\"example.csv\")\n\n\n\n\nTab-separated file, pass the \nsep = '\\t'\n argument.\n\n\nRead and Write Excel Files with \nopenyxl\n\u00b6\n\n\nRead and write .xlsx, xlsm, xltx, xltm files.\n\n\nThe general advice for installing this package is to do it in a Python virtual environment without system packages. We can use virtual environment to create isolated Python environments: it creates a folder which contains all the necessary executables to use the packages that a Python project would need.\n\n\n\n\nGo to the directory in which the project is located and re-activate the virtual environment \nvenv\n. \n\n\nThen proceed to install \nopenpyxl\n with \npip\n to make sure that we can read and write files with it:\n\n\n\n\n# Activate virtualenv\n$ source activate venv\n\n# Install `openpyxl` in `venv`\n$ pip install openpyxl\n\n\n\n\n\n\nInstall \nopenpyxl\n and start loading in the data.\n\n\nMake sure that we\u2019re in the right directory where the spreadsheet is located (change the working directory with \nos.chdir()\n).\n\n\n\n\n# Import `load_workbook` module from `openpyxl`\nfrom openpyxl import load_workbook\n\n# Load in the workbook\nwb = load_workbook('./test.xlsx')\ntype(wb)\n\n# Get sheet names\nprint(wb.get_sheet_names())\n\n\n\n\n\n\nWhich sheet is currently active.\n\n\n\n\n# Get a sheet by name \nsheet = wb.get_sheet_by_name('Sheet3')\n\n# Print the sheet title \nsheet.title\n\n# Get currently active sheet\nanotherSheet = wb.active\n\n# Check `anotherSheet` \nanotherSheet\n\n\n\n\n\n\nRetrieve information in the workbook\u2019s sheet.\n\n\n\n\n# Retrieve the value of a certain cell\nsheet['A1'].value\n\n# Select element 'B2' of the sheet \nc = sheet['B2']\n\n# Retrieve the row number of the element\nc.row\n\n# Retrieve the column letter of the element\nc.column\n\n# Retrieve the coordinates of the cell \nc.coordinate\n\n# Retrieve cell value \nsheet.cell(row=1, column=2).value\n\n# Print out values in column 2 \nfor i in range(1, 4):\n     print(i, sheet.cell(row=i, column=2).value)\n\n# Import relevant modules from `openpyxl.utils`\nfrom openpyxl.utils import get_column_letter, column_index_from_string\n\n# Return 'A'\nget_column_letter(1)\n\n# Return '1'\ncolumn_index_from_string('A')\n\n\n\n\nPrint the coordinate and the value that is contained within that cell.\n\n\n# Print row per row\nfor cellObj in sheet['A1':'C3']:\n      for cell in cellObj:\n              print(cells.coordinate, cells.value)\n      print('--- END ---')\n\n\n\n\n('A1', u'M')\n('B1', u'N')\n('C1', u'O')\n--- END ---\n('A2', 10L)\n('B2', 11L)\n('C2', 12L)\n--- END ---\n('A3', 14L)\n('B3', 15L)\n('C3', 16L)\n--- END ---\n\n\n\n\nCheck up on the result of import.\n\n\n# Retrieve the maximum amount of rows \nsheet.max_row\n\n# Retrieve the maximum amount of columns\nsheet.max_column\n\n\n\n\nPandas DataFrames.\n\n\n# Import `pandas` \nimport pandas as pd\n\n# Convert Sheet to DataFrame\ndf = pd.DataFrame(sheet.values)\n\n\n\n\nSpecify headers and indices.\n\n\n# Put the sheet values in `data`\ndata = sheet.values\n\n# Indicate the columns in the sheet values\ncols = next(data)[1:]\n\n# Convert the data to a list\ndata = list(data)\n\n# Read in the data at index 0 for the indices\nidx = [r[0] for r in data]\n\n# Slice the data at index 1 \ndata = (islice(r, 1, None) for r in data)\n\n# Make the DataFrame\ndf = pd.DataFrame(data, index=idx, columns=cols)\n\n\n\n\nWrite the Pandas DataFrames back to an Excel file.\n\n\n# Import `dataframe_to_rows`\nfrom openpyxl.utils.dataframe import dataframe_to_rows\n\n# Initialize a workbook \nwb = Workbook()\n\n# Get the worksheet in the active workbook\nws = wb.active\n\n# Append the rows of the DataFrame to the worksheet\nfor r in dataframe_to_rows(df, index=True, header=True):\n    ws.append(r)\n\n\n\n\nMore options: change cell styles or use the write-only mode.\n\n\nRead and Format Excel Files with \nxlrd\n\u00b6\n\n\n.xls or .xlsx extensions.\n\n\n# Import `xlrd`\nimport xlrd\n\n# Open a workbook \nworkbook = xlrd.open_workbook('example.xls')\n\n# Loads only current sheets to memory\nworkbook = xlrd.open_workbook('example.xls', on_demand = True)\n\n\n\n\nRetrieve the sheets, then cells.\n\n\n# Load a specific sheet by name\nworksheet = workbook.sheet_by_name('Sheet1')\n\n# Load a specific sheet by index \nworksheet = workbook.sheet_by_index(0)\n\n# Retrieve the value from cell at indices (0,0) \nsheet.cell(0, 0).value\n\n\n\n\nWrite to Excel Files with \nxlwt\n\u00b6\n\n\n.xls extension\n\n\n# Import `xlwt` \nimport xlwt\n\n# Initialize a workbook \nbook = xlwt.Workbook(encoding=\"utf-8\")\n\n# Add a sheet to the workbook \nsheet1 = book.add_sheet(\"Python Sheet 1\") \n\n# Write to the sheet of the workbook \nsheet1.write(0, 0, \"This is the First Cell of the First Sheet\") \n\n# Save the workbook \nbook.save(\"spreadsheet.xls\")\n\n\n\n\nLoop: every element in the range from 0 to 4 (5 not included).\n\n\n# Initialize a workbook\nbook = xlwt.Workbook()\n\n# Add a sheet to the workbook\nsheet1 = book.add_sheet(\"Sheet1\")\n\n# The data\ncols = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ntxt = [0,1,2,3,4]\n\n# Loop over the rows and columns and fill in the values\nfor num in range(5):\n      row = sheet1.row(num)\n      for index, col in enumerate(cols):\n          value = txt[index] + num\n          row.write(index, value)\n\n# Save the result\nbook.save(\"test.xls\")\n\n\n\n\n\n\nA Collection of Utilities: \nxlutils\n\u00b6\n\n\nCollection of utilities that require both \nxlrd\n and \nxlwt\n, which includes the ability to copy and modify or filter existing files. Generally speaking, these use cases are now covered by \nopenpyxl\n.\n\n\nRead with \npyexcel\n\u00b6\n\n\nPython Wrapper that provides one API for reading, manipulating and writing data in .csv, .ods, .xls, .xlsx and .xlsm.\n\n\nDocumentation\n.\n\n\nIn an array.\n\n\n# Import `pyexcel`\nimport pyexcel\n\n# Get an array from the data\nmy_array = pyexcel.get_array(file_name=\"test.xls\")\n\n\n\n\nIn an ordered dictionary of lists; even obtain all the workbook sheets in a single dictionary.\n\n\n# Import `OrderedDict` module \nfrom pyexcel._compact import OrderedDict\n\n# Get the data in an ordered dictionary of lists\nmy_dict = pyexcel.get_dict(file_name=\"test.xls\", name_columns_by_row=0)\n\n# Get the data in a dictionary of 2D arrays\nbook_dict = pyexcel.get_book_dict(file_name=\"test.xls\")\n\n\n\n\nThe arrays and dictionaries of the spreadsheet, allow creating DataFrames of the data with \npd.DataFrame()\n.\n\n\nJust retrieve the records.\n\n\n# Retrieve the records of the file\nrecords = pyexcel.get_records(file_name=\"test.xls\")\n\n\n\n\nWrite with \npyexcel\n\u00b6\n\n\nArrays.\n\n\n# Get the data\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# Save the array to a file\npyexcel.save_as(array=data, dest_file_name=\"array_data.xls\")\n\n\n\n\ndest_delimiter = \";\"\n\n\nDictionary.\n\n\n# The data\n2d_array_dictionary = {'Sheet 1': [\n                                   ['ID', 'AGE', 'SCORE']\n                                   [1, 22, 5],\n                                   [2, 15, 6],\n                                   [3, 28, 9]\n                                  ],\n                       'Sheet 2': [\n                                    ['X', 'Y', 'Z'],\n                                    [1, 2, 3],\n                                    [4, 5, 6]\n                                    [7, 8, 9]\n                                  ],\n                       'Sheet 3': [\n                                    ['M', 'N', 'O', 'P'],\n                                    [10, 11, 12, 13],\n                                    [14, 15, 16, 17]\n                                    [18, 19, 20, 21]\n                                   ]}\n\n# Save the data to a file                        \npyexcel.save_book_as(bookdict=2d_array_dictionary, dest_file_name=\"2d_array_data.xls\")\n\n\n\n\nThe order of the data in the dictionary will not be kept.\n\n\nRead and Write .csv Files\n\u00b6\n\n\n# import `csv`\nimport csv\n\n# Read in csv file \nfor row in csv.reader(open('data.csv'), delimiter=','):\n      print(row)\n\n# Write csv file\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\noutfile = open('data.csv', 'w')\nwriter = csv.writer(outfile, delimiter=';', quotechar='\"')\nwriter.writerows(data)\noutfile.close()\n\n\n\n\nNumpy\n\u00b6\n\n\ngenfromtxt()\n allows to load in the data that is contained within .csv files into arrays which we can then put in DataFrames.",
            "title": "Python and Excel"
        },
        {
            "location": "/Python+And+Excel/#check-the-quality-of-the-spreadsheet",
            "text": "Does the spreadsheet represent static data?  Does the spreadsheet mix data, calculations, and reporting?  Is the data in the spreadsheet complete and consistent?  Does the spreadsheet have a systematic worksheet structure?  Are the live formulas in the spreadsheet valid?",
            "title": "Check the Quality of the Spreadsheet"
        },
        {
            "location": "/Python+And+Excel/#best-practices-for-spreadsheet-data",
            "text": "The first row of the spreadsheet is usually reserved for the header, while the first column is used to identify the sampling unit;  Avoid names, values or fields with blank spaces. Otherwise, each word will be interpreted as a separate variable, resulting in errors that are related to the number of elements per line in the dataset. Consider using:  Underscores,  Dashes,  Camel case, where the first letter of each section of text is capitalized, or  Concatenating words    Short names are preferred over longer names;  Try to avoid using names that contain symbols such as  ?, %, ^, &, *, (, ), -, #, ?, <, >, /, |, \\, [ ,] , {, }  and  ,  and dollar sign;  Delete any comments that were made in the file to avoid extra columns or NA\u2019s to be added to the file; and  Make sure that any missing values in the dataset are indicated with NA.   Save in  .xls, .xlsx, .csv, .txt .",
            "title": "Best Practices for Spreadsheet Data"
        },
        {
            "location": "/Python+And+Excel/#preparing-the-workspace",
            "text": "# Import `os` \nimport os\n\n# Retrieve current working directory (`cwd`)\ncwd = os.getcwd()  Print it with  cwd  or  print(cwd) .  # Change directory \nos.chdir(\"/path/to/your/folder\")\n\n# List all files and directories in current directory\nos.listdir('.')",
            "title": "Preparing the Workspace"
        },
        {
            "location": "/Python+And+Excel/#using-virtual-environments",
            "text": "In a Python virtualenv: we can multiple projects running at the same time and we don\u2019t want them to share the same Python installation or when projects have conflicting requirements.  # Install virtualenv\n$ pip install virtualenv\n\n# Go to the folder of the project\n$ cd my_folder\n\n# Create a virtual environment `venv`\n$ virtualenv venv\n\n# Indicate the Python interpreter to use for `venv`\n$ virtualenv -p /usr/bin/python2.7 venv\n\n# Activate `venv`\n$ source venv/bin/activate\n\n# Deactivate `venv`\n$ deactivate",
            "title": "Using Virtual Environments"
        },
        {
            "location": "/Python+And+Excel/#check-the-loaded-dataset",
            "text": "# Check the first entries of the DataFrame\ndf1.head()\n\n# Check the last entries of the DataFrame\ndf1.tail()\n\n# Inspect the shape \ndata.shape\n\n# Inspect the number of dimensions\ndata.ndim\n\n# Inspect the data type\ndata.dtype",
            "title": "Check the Loaded Dataset"
        },
        {
            "location": "/Python+And+Excel/#install-packages-to-read-and-write-excel-files",
            "text": "pandas, openpyxl, xlrd, xlutils, pyexcel \u2026   pip install .  conda install  (Anaconda includes  100 of the most popular Python ,  R  and Scala packages for data science and several open source development environments such as Jupyter and Spyder).",
            "title": "Install Packages to Read and Write Excel Files"
        },
        {
            "location": "/Python+And+Excel/#packages-to-parse-excel-files-and-write-them-back-with-python",
            "text": "From the  site :   openpyxl , the recommended package for reading and writing Excel 2010 files (ie: .xlsx).  Documentation .  xlsxwriter , an alternative package for writing data, formatting information and, in particular, charts in the Excel 2010 format (ie: .xlsx).  Documentation .  xlrd , this package is for reading data and formatting information from older Excel files (ie: .xls).  Documentation .  xlwt , this package is for writing data and formatting information to older Excel files (ie: .xls).  Documentation .  xlutils , this package collects utilities that require both xlrd and xlwt, including the ability to copy and modify or filter existing excel files.  Documentation .",
            "title": "Packages to Parse Excel Files and Write them back with Python"
        },
        {
            "location": "/Python+And+Excel/#load-excel-csv-files-as-pandas-dataframes",
            "text": "",
            "title": "Load Excel &amp; CSV Files as Pandas DataFrames"
        },
        {
            "location": "/Python+And+Excel/#excel",
            "text": "# Import pandas\nimport pandas as pd\n\n# Assign spreadsheet filename to `file`\nfile = 'example.xlsx'\n\n# Load spreadsheet\nxl = pd.ExcelFile(file)\n\n# Print the sheet names\nprint(xl.sheet_names)\n\n# Load a sheet into a DataFrame by name: df1\ndf1 = xl.parse('Sheet1')",
            "title": "Excel"
        },
        {
            "location": "/Python+And+Excel/#csv",
            "text": "# Import pandas\nimport pandas as pd\n\n# Load csv\ndf = pd.read_csv(\"example.csv\")   More options .",
            "title": "CSV"
        },
        {
            "location": "/Python+And+Excel/#flat-files-tables",
            "text": "Also:  read_table()  and  read_fwf() .  More options .",
            "title": "Flat files, tables"
        },
        {
            "location": "/Python+And+Excel/#write-pandas-dataframes-to-excel-and-csv-files",
            "text": "",
            "title": "Write Pandas DataFrames to Excel and CSV Files"
        },
        {
            "location": "/Python+And+Excel/#excel_1",
            "text": "# Specify a writer\nwriter = pd.ExcelWriter('example.xlsx', engine='xlsxwriter')\n\n# Write the DataFrame to a file     \nyourData.to_excel(writer, 'Sheet1')\n\n# Save the result \nwriter.save()  Pass the writer variable to the  to_excel()  function and specify the sheet name. Add a sheet with the data to an existing workbook:  ExcelWriter  save multiple, (slightly) different DataFrames to one workbook.  # Specify a writer\nwriter = pd.ExcelWriter('example.xlsx')\n\n# Write the DataFrame to a file     \nyourData.to_excel(writer, 'Sheet1')\n\n# Save the result \nwriter.save()  Save one DataFrame to a file, don\u2019t specify the engine argument in the  pd.ExcelWriter()  function. The rest of the steps stay the same.",
            "title": "Excel"
        },
        {
            "location": "/Python+And+Excel/#csv-flat-files-tables",
            "text": "# Write the DataFrame to csv\ndf.to_csv(\"example.csv\")  Tab-separated file, pass the  sep = '\\t'  argument.",
            "title": "CSV, flat files, tables"
        },
        {
            "location": "/Python+And+Excel/#read-and-write-excel-files-with-openyxl",
            "text": "Read and write .xlsx, xlsm, xltx, xltm files.  The general advice for installing this package is to do it in a Python virtual environment without system packages. We can use virtual environment to create isolated Python environments: it creates a folder which contains all the necessary executables to use the packages that a Python project would need.   Go to the directory in which the project is located and re-activate the virtual environment  venv .   Then proceed to install  openpyxl  with  pip  to make sure that we can read and write files with it:   # Activate virtualenv\n$ source activate venv\n\n# Install `openpyxl` in `venv`\n$ pip install openpyxl   Install  openpyxl  and start loading in the data.  Make sure that we\u2019re in the right directory where the spreadsheet is located (change the working directory with  os.chdir() ).   # Import `load_workbook` module from `openpyxl`\nfrom openpyxl import load_workbook\n\n# Load in the workbook\nwb = load_workbook('./test.xlsx')\ntype(wb)\n\n# Get sheet names\nprint(wb.get_sheet_names())   Which sheet is currently active.   # Get a sheet by name \nsheet = wb.get_sheet_by_name('Sheet3')\n\n# Print the sheet title \nsheet.title\n\n# Get currently active sheet\nanotherSheet = wb.active\n\n# Check `anotherSheet` \nanotherSheet   Retrieve information in the workbook\u2019s sheet.   # Retrieve the value of a certain cell\nsheet['A1'].value\n\n# Select element 'B2' of the sheet \nc = sheet['B2']\n\n# Retrieve the row number of the element\nc.row\n\n# Retrieve the column letter of the element\nc.column\n\n# Retrieve the coordinates of the cell \nc.coordinate\n\n# Retrieve cell value \nsheet.cell(row=1, column=2).value\n\n# Print out values in column 2 \nfor i in range(1, 4):\n     print(i, sheet.cell(row=i, column=2).value)\n\n# Import relevant modules from `openpyxl.utils`\nfrom openpyxl.utils import get_column_letter, column_index_from_string\n\n# Return 'A'\nget_column_letter(1)\n\n# Return '1'\ncolumn_index_from_string('A')  Print the coordinate and the value that is contained within that cell.  # Print row per row\nfor cellObj in sheet['A1':'C3']:\n      for cell in cellObj:\n              print(cells.coordinate, cells.value)\n      print('--- END ---')  ('A1', u'M')\n('B1', u'N')\n('C1', u'O')\n--- END ---\n('A2', 10L)\n('B2', 11L)\n('C2', 12L)\n--- END ---\n('A3', 14L)\n('B3', 15L)\n('C3', 16L)\n--- END ---  Check up on the result of import.  # Retrieve the maximum amount of rows \nsheet.max_row\n\n# Retrieve the maximum amount of columns\nsheet.max_column  Pandas DataFrames.  # Import `pandas` \nimport pandas as pd\n\n# Convert Sheet to DataFrame\ndf = pd.DataFrame(sheet.values)  Specify headers and indices.  # Put the sheet values in `data`\ndata = sheet.values\n\n# Indicate the columns in the sheet values\ncols = next(data)[1:]\n\n# Convert the data to a list\ndata = list(data)\n\n# Read in the data at index 0 for the indices\nidx = [r[0] for r in data]\n\n# Slice the data at index 1 \ndata = (islice(r, 1, None) for r in data)\n\n# Make the DataFrame\ndf = pd.DataFrame(data, index=idx, columns=cols)  Write the Pandas DataFrames back to an Excel file.  # Import `dataframe_to_rows`\nfrom openpyxl.utils.dataframe import dataframe_to_rows\n\n# Initialize a workbook \nwb = Workbook()\n\n# Get the worksheet in the active workbook\nws = wb.active\n\n# Append the rows of the DataFrame to the worksheet\nfor r in dataframe_to_rows(df, index=True, header=True):\n    ws.append(r)  More options: change cell styles or use the write-only mode.",
            "title": "Read and Write Excel Files with openyxl"
        },
        {
            "location": "/Python+And+Excel/#read-and-format-excel-files-with-xlrd",
            "text": ".xls or .xlsx extensions.  # Import `xlrd`\nimport xlrd\n\n# Open a workbook \nworkbook = xlrd.open_workbook('example.xls')\n\n# Loads only current sheets to memory\nworkbook = xlrd.open_workbook('example.xls', on_demand = True)  Retrieve the sheets, then cells.  # Load a specific sheet by name\nworksheet = workbook.sheet_by_name('Sheet1')\n\n# Load a specific sheet by index \nworksheet = workbook.sheet_by_index(0)\n\n# Retrieve the value from cell at indices (0,0) \nsheet.cell(0, 0).value",
            "title": "Read and Format Excel Files with xlrd"
        },
        {
            "location": "/Python+And+Excel/#write-to-excel-files-with-xlwt",
            "text": ".xls extension  # Import `xlwt` \nimport xlwt\n\n# Initialize a workbook \nbook = xlwt.Workbook(encoding=\"utf-8\")\n\n# Add a sheet to the workbook \nsheet1 = book.add_sheet(\"Python Sheet 1\") \n\n# Write to the sheet of the workbook \nsheet1.write(0, 0, \"This is the First Cell of the First Sheet\") \n\n# Save the workbook \nbook.save(\"spreadsheet.xls\")  Loop: every element in the range from 0 to 4 (5 not included).  # Initialize a workbook\nbook = xlwt.Workbook()\n\n# Add a sheet to the workbook\nsheet1 = book.add_sheet(\"Sheet1\")\n\n# The data\ncols = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ntxt = [0,1,2,3,4]\n\n# Loop over the rows and columns and fill in the values\nfor num in range(5):\n      row = sheet1.row(num)\n      for index, col in enumerate(cols):\n          value = txt[index] + num\n          row.write(index, value)\n\n# Save the result\nbook.save(\"test.xls\")",
            "title": "Write to Excel Files with xlwt"
        },
        {
            "location": "/Python+And+Excel/#a-collection-of-utilities-xlutils",
            "text": "Collection of utilities that require both  xlrd  and  xlwt , which includes the ability to copy and modify or filter existing files. Generally speaking, these use cases are now covered by  openpyxl .",
            "title": "A Collection of Utilities: xlutils"
        },
        {
            "location": "/Python+And+Excel/#read-with-pyexcel",
            "text": "Python Wrapper that provides one API for reading, manipulating and writing data in .csv, .ods, .xls, .xlsx and .xlsm.  Documentation .  In an array.  # Import `pyexcel`\nimport pyexcel\n\n# Get an array from the data\nmy_array = pyexcel.get_array(file_name=\"test.xls\")  In an ordered dictionary of lists; even obtain all the workbook sheets in a single dictionary.  # Import `OrderedDict` module \nfrom pyexcel._compact import OrderedDict\n\n# Get the data in an ordered dictionary of lists\nmy_dict = pyexcel.get_dict(file_name=\"test.xls\", name_columns_by_row=0)\n\n# Get the data in a dictionary of 2D arrays\nbook_dict = pyexcel.get_book_dict(file_name=\"test.xls\")  The arrays and dictionaries of the spreadsheet, allow creating DataFrames of the data with  pd.DataFrame() .  Just retrieve the records.  # Retrieve the records of the file\nrecords = pyexcel.get_records(file_name=\"test.xls\")",
            "title": "Read with pyexcel"
        },
        {
            "location": "/Python+And+Excel/#write-with-pyexcel",
            "text": "Arrays.  # Get the data\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# Save the array to a file\npyexcel.save_as(array=data, dest_file_name=\"array_data.xls\")  dest_delimiter = \";\"  Dictionary.  # The data\n2d_array_dictionary = {'Sheet 1': [\n                                   ['ID', 'AGE', 'SCORE']\n                                   [1, 22, 5],\n                                   [2, 15, 6],\n                                   [3, 28, 9]\n                                  ],\n                       'Sheet 2': [\n                                    ['X', 'Y', 'Z'],\n                                    [1, 2, 3],\n                                    [4, 5, 6]\n                                    [7, 8, 9]\n                                  ],\n                       'Sheet 3': [\n                                    ['M', 'N', 'O', 'P'],\n                                    [10, 11, 12, 13],\n                                    [14, 15, 16, 17]\n                                    [18, 19, 20, 21]\n                                   ]}\n\n# Save the data to a file                        \npyexcel.save_book_as(bookdict=2d_array_dictionary, dest_file_name=\"2d_array_data.xls\")  The order of the data in the dictionary will not be kept.",
            "title": "Write with pyexcel"
        },
        {
            "location": "/Python+And+Excel/#read-and-write-csv-files",
            "text": "# import `csv`\nimport csv\n\n# Read in csv file \nfor row in csv.reader(open('data.csv'), delimiter=','):\n      print(row)\n\n# Write csv file\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\noutfile = open('data.csv', 'w')\nwriter = csv.writer(outfile, delimiter=';', quotechar='\"')\nwriter.writerows(data)\noutfile.close()",
            "title": "Read and Write .csv Files"
        },
        {
            "location": "/Python+And+Excel/#numpy",
            "text": "genfromtxt()  allows to load in the data that is contained within .csv files into arrays which we can then put in DataFrames.",
            "title": "Numpy"
        },
        {
            "location": "/Overview_of_scikit-learn/",
            "text": "CONTENT\n\n\nThe scikit-learn module\n\n\nBasic level\n\n\nHard-coded dataset\n\n\nDecision tree\n\n\nRandom Forests\n\n\nk-Nearest Neighbours\n\n\nLogistic regression\n\n\nNa\u00efve Bayes\n\n\n\n\n\n\nIntermediate level\n\n\nImported dataset\n\n\nDecision tree\n\n\nRandom Forests\n\n\nRandom Forests (with the Iris dataset)\n\n\nk-Nearest Neighbours\n\n\nLogistic regression\n\n\nNa\u00efve Bayes\n\n\n\n\n\n\nIntermediate level (Additional)\n\n\nPrincipal Component Analysis\n\n\nSupport Vector Machines\n\n\n\n\n\n\nA little application\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\n# Set the current directory\nimport os\n\nos.chdir('/home/ugo/Documents/Notebooks/DataCamp, Overview of scikit-learn/')\nprint(os.getcwd())\n\n\n\n\n/home/ugo/Documents/Notebooks/DataCamp, Overview of scikit-learn\n\n\n\nThe scikit-learn module\n\u00b6\n\n\n\n\nWe use different algorithms from the \nsciki-learn\n module as classifiers (on a binary dependent variable). Most models come from this \nlink\n.\n\n\nUnused algorithms:\n\n\n\n\nRegressions,\n\n\nRidge regression (for dealing with heteroscedasticity),\n\n\nElasticNet, Lasso (for dealing with heteroscedasticity),\n\n\nSupport Vector Regression (SVR), ensemble models,\n\n\n\n\n\n\nClassfication,\n\n\nLinear SVC, ensemble SVC, kernel approximation,\n\n\n\n\n\n\nClustering,\n\n\nk-means, spectral clustering GMM,\n\n\nOther k-means,\n\n\n\n\n\n\nDimensionality reduction,\n\n\nPrincipal Component Analysis (PCA),\n\n\nOthers.\n\n\n\n\n\n\n\n\nBasic level\n\u00b6\n\n\nHard-coded dataset\n\u00b6\n\n\n# [height, weight, shoe_size]\nX = [[181, 80, 44], [177, 70, 43], [160, 60, 38], [154, 54, 37], [166, 65, 40],\n     [190, 90, 47], [175, 64, 39],\n     [177, 70, 40], [159, 55, 37], [171, 75, 42], [181, 85, 43]]\n\nY = ['male', 'male', 'female', 'female', 'male', 'male', 'female', 'female',\n     'female', 'male', 'male']\n\n\n\n\nDecision tree\n\u00b6\n\n\n# import decision tree\nfrom sklearn import tree\n\n# train on the train set\nclf = tree.DecisionTreeClassifier()\n\nclf = clf.fit(X,Y)\n\n\n\n\n# test\nprediction = clf.predict([[190, 70, 43]])\nprint(prediction)\n\n\n\n\n['male']\n\n\n\nRandom Forests\n\u00b6\n\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# set the training parameters\nclf = RandomForestClassifier(n_estimators=1000)\n\n# train on the same train set\nclf = clf.fit(X,Y)\n\n# validate the classifier\naccuracy = clf.score(X, Y)\nprint('Accuracy: ' + str(accuracy))\n\n\n\n\nAccuracy: 1.0\n\n\n\n# test\nprediction = clf.predict([[190, 70, 43]])\nprint(prediction)\n\n\n\n\n['male']\n\n\n\nk-Nearest Neighbours\n\u00b6\n\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# set the training parameters\nneigh = KNeighborsClassifier(n_neighbors=3)\n\n# train on the same train set\nneigh.fit(X,Y)\n\n\n\n\nKNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n           metric_params=None, n_jobs=1, n_neighbors=3, p=2,\n           weights='uniform')\n\n\n\n# test\nprediction = neigh.predict([[190, 70, 43]])\nprint(prediction)\n\n\n\n\n['male']\n\n\n\nLogistic regression\n\u00b6\n\n\nfrom sklearn.linear_model import LogisticRegression\n\n# set the training parameters\nneigh = LogisticRegression()\n\n# train on the same train set\nneigh.fit(X, Y)\n\n\n\n\nLogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)\n\n\n\n# test\nprediction = neigh.predict([[190, 70, 43]])\nprint(prediction)\n\n\n\n\n['female']\n\n\n\nNa\u00efve Bayes\n\u00b6\n\n\nfrom sklearn.naive_bayes import GaussianNB\n\n# set the training parameters\ngnb = GaussianNB()\n\n# train on the same train set\ngnb = gnb.fit(X, Y)\n\n\n\n\n# test\nprediction = gnb.predict([[190, 70, 43]])\nprint(prediction)\n\n\n\n\n['male']\n\n\n\nIntermediate level\n\u00b6\n\n\nImported dataset\n\u00b6\n\n\nDecision tree\n\u00b6\n\n\nimport pandas as pd\nfrom sklearn import tree\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\nlen(data)\n\n\n\n\n32561\n\n\n\ndata.shape\n\n\n\n\n(32561, 15)\n\n\n\ndata.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 32561 entries, 0 to 32560\nData columns (total 15 columns):\nage               32561 non-null int64\nworkclass         32561 non-null object\nfinal_weight      32561 non-null int64\neducation         32561 non-null object\neducation_num     32561 non-null int64\nmarital_status    32561 non-null object\noccupation        32561 non-null object\nrelationship      32561 non-null object\nrace              32561 non-null object\nsex               32561 non-null object\ncapital_gain      32561 non-null int64\ncapital_loss      32561 non-null int64\nhours_per_week    32561 non-null int64\nnative_country    32561 non-null object\nsalary            32561 non-null object\ndtypes: int64(6), object(9)\nmemory usage: 3.7+ MB\n\n\n\n# convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n# take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()\n\n\n\n\n# split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# set the training parameters, instantiate the classifier\nclf = tree.DecisionTreeClassifier()\n\n# train on the train set\nclf = clf.fit(X_train, Y_train)\n\n\n\n\n# validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))\n\n\n\n\nAccuracy: 0.727198280274\n\n\n\n# test\nprediction = clf.predict(X_test)\nprint(prediction)\n\n\n\n\n['Female' 'Female' 'Male' ..., 'Male' 'Male' 'Male']\n\n\n\n# create a confusion matrix\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)\n\n\n\n\n[[1613 1037]\n [1628 5491]]\n\n\n\nRandom Forests\n\u00b6\n\n\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n# convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n# take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()\n\n\n\n\n# split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# set the training parameters\nclf = RandomForestClassifier(n_estimators=1000)\n\n# train on the train set\nclf = clf.fit(X_train, Y_train)\n\n\n\n\n# validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))\n\n\n\n\nAccuracy: 0.738765482649\n\n\n\n# test\nprediction = clf.predict(X_test)\nprint(prediction)\n\n\n\n\n['Male' 'Female' 'Male' ..., 'Female' 'Male' 'Female']\n\n\n\n# create a confusion matrix\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)\n\n\n\n\n[[1568  970]\n [1582 5649]]\n\n\n\nRandom Forests (with the Iris dataset)\n\u00b6\n\n\nIris dataset.\n\n\nfrom sklearn.cross_validation import cross_val_score, train_test_split\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import preprocessing\n\niris = datasets.load_iris()\n\n\n\n\n# feature scaling\nmin_max_scaler = preprocessing.MinMaxScaler()\nX = min_max_scaler.fit_transform(iris.data)\n\n# train on the train set\nclf = RandomForestClassifier(n_estimators=200)   \n\n\n\n\n# test our classifier\nscores = cross_val_score(clf, X, iris.target, cv=5)\n\nprint(\"Accuracy: %0.2f (+/- %0.2f)\" % (scores.mean(), scores.std() * 2))\n\n\n\n\nAccuracy: 0.97 (+/- 0.04)\n\n\n\nk-Nearest Neighbours\n\u00b6\n\n\nimport pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# Import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n# convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n# take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()\n\n\n\n\n# split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# set the training parameters, instantiate the classifier\nclf = KNeighborsClassifier(n_neighbors=3)\n\n# train on the train set\nclf = clf.fit(X_train, Y_train)\n\n\n\n\n# validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))\n\n\n\n\nAccuracy: 0.68113420002\n\n\n\n# create a confusion matrix\nprediction = clf.predict(X_test)\n\n\n\n\n# test\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)\n\n\n\n\n[[1694 1591]\n [1524 4960]]\n\n\n\nLogistic regression\n\u00b6\n\n\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n# convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n# take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()\n\n\n\n\n# split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# set the training parameters, instantiate the classifier\nclf = LogisticRegression()\n\n# train on the train set\nclf = clf.fit(X_train, Y_train)\n\n\n\n\n# validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))\n\n\n\n\nAccuracy: 0.669259903777\n\n\n\n# create a confusion matrix\nprediction = clf.predict(X_test)\nprint(prediction)\n\n\n\n\n['Male' 'Male' 'Male' ..., 'Female' 'Female' 'Male']\n\n\n\n# test\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)\n\n\n\n\n[[ 459  419]\n [2812 6079]]\n\n\n\nNa\u00efve Bayes\n\u00b6\n\n\nimport pandas as pd\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n# convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n# take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()\n\n\n\n\n# split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# set the training parameters, instantiate the classifier\nclf = GaussianNB()\n\n# train on the train set\nclf = clf.fit(X_train, Y_train)\n\n\n\n\n# validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))\n\n\n\n\nAccuracy: 0.6612754632\n\n\n\n# create a confusion matrix\nprediction = clf.predict(X_test)\nprint(prediction)\n\n\n\n\n['Male' 'Male' 'Male' ..., 'Male' 'Male' 'Female']\n\n\n\n# test\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)\n\n\n\n\n[[ 674  721]\n [2588 5786]]\n\n\n\nIntermediate level (Additional)\n\u00b6\n\n\nPrincipal Component Analysis\n\u00b6\n\n\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import LabelEncoder\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n# convert the string labels to numeric labels\nfor label in ['race', 'occupation', 'sex']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race  sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4    1          2174   \n1  Married-civ-spouse           4        Husband     4    1             0   \n2            Divorced           6  Not-in-family     4    1             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\nprint(data.shape)\n\n\n\n\n(32561, 15)\n\n\n\n# print one variable\nprint(data.sex.head(3))\n\n\n\n\n0    1\n1    1\n2    1\nName: sex, dtype: int64\n\n\n\n# % Male\nsum(data.sex)/len(data)\n\n\n\n\n0.66920549123184181\n\n\n\n# take the fields of interest and plug them into variable X\nX = data[['age', 'final_weight', 'education_num', 'occupation', 'race', 'capital_gain', 'hours_per_week']]\n\n\n\n\n# create a regular PCA model \n# tell the model to only keep two components.\npca = PCA(n_components=2)\n\n# Fit and transform the data to the model\nreduced_data_pca = pca.fit_transform(X)\n\n# Inspect the shape\nprint(reduced_data_pca.shape)\n\n\n\n\n(32561, 2)\n\n\n\n# Print out the data (array)\nprint(reduced_data_pca[0:3])\n\n\n\n\n[[-112262.33316766   -1099.76011639]\n [-106467.39923916    1074.41772634]\n [  25867.60075685    1078.43450794]]\n\n\n\n%pylab inline\nimport matplotlib.pyplot as plt\n\nx = reduced_data_pca[:, 0]\ny = reduced_data_pca[:, 1]\n\nplt.scatter(x, y)\n\nplt.xlabel('First Principal Component')\nplt.ylabel('Second Principal Component')\nplt.title(\"PCA Scatter Plot\")\n\nplt.show()\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\nmale = [data.sex == 1][0:3]\ntype(male)\n\n\n\n\nlist\n\n\n\n# Is Male?\nmale[0][0:3]\n\n\n\n\n0    True\n1    True\n2    True\nName: sex, dtype: bool\n\n\n\nfemale = [data.sex == 0][0:3]\n\n# Is Female?\nfemale[0][0:3]\n\n\n\n\n0    False\n1    False\n2    False\nName: sex, dtype: bool\n\n\n\nfor i in range(len(colors)):\n    print(i)\n\n\n\n\n0\n1\n\n\n\ndata.sex = data.sex.astype(int)\ndata.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nage\n\n      \nworkclass\n\n      \nfinal_weight\n\n      \neducation\n\n      \neducation_num\n\n      \nmarital_status\n\n      \noccupation\n\n      \nrelationship\n\n      \nrace\n\n      \nsex\n\n      \ncapital_gain\n\n      \ncapital_loss\n\n      \nhours_per_week\n\n      \nnative_country\n\n      \nsalary\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n39\n\n      \nState-gov\n\n      \n77516\n\n      \nBachelors\n\n      \n13\n\n      \nNever-married\n\n      \n1\n\n      \nNot-in-family\n\n      \n4\n\n      \n1\n\n      \n2174\n\n      \n0\n\n      \n40\n\n      \nUnited-States\n\n      \n<=50K\n\n    \n\n    \n\n      \n1\n\n      \n50\n\n      \nSelf-emp-not-inc\n\n      \n83311\n\n      \nBachelors\n\n      \n13\n\n      \nMarried-civ-spouse\n\n      \n4\n\n      \nHusband\n\n      \n4\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n13\n\n      \nUnited-States\n\n      \n<=50K\n\n    \n\n    \n\n      \n2\n\n      \n38\n\n      \nPrivate\n\n      \n215646\n\n      \nHS-grad\n\n      \n9\n\n      \nDivorced\n\n      \n6\n\n      \nNot-in-family\n\n      \n4\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n40\n\n      \nUnited-States\n\n      \n<=50K\n\n    \n\n  \n\n\n\n\n\n\n\ncolors = ['blue', \n          'red']\n\n# colors = ['black','blue','purple','yellow','white','red','lime','cyan','orange','gray']\n\n# 0 Female, blue\n# 1 Male, red\nfor i in range(len(colors)):\n    x = reduced_data_pca[:, 0]*[data.sex == i]\n    y = reduced_data_pca[:, 1]*[data.sex == i]\n    plt.scatter(x, y, c=colors[i]) \n\n# 0 Female, 1 Male\nplt.legend(['Female','Male'], \n           bbox_to_anchor=(1.05, 1), \n           loc=2, \n           borderaxespad=0.)\n\nplt.xlabel('First Principal Component')\nplt.ylabel('Second Principal Component')\nplt.title(\"PCA Scatter Plot\")\n\nplt.show()\n\n\n\n\n\n\nSupport Vector Machines\n\u00b6\n\n\nimport pandas as pd\nfrom sklearn import svm\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K\n\n\n\n# convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))\n\n\n\n\n   age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K\n\n\n\n# take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()\n\n\n\n\n# split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# Create the SVC model\nclf = svm.SVC(gamma=0.001, C=100., kernel='linear')\n\n# Fit the data to the SVC model\nclf = clf.fit(X_train, Y_train)\n\n\n\n\n# validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))\n\n\n\n\n# create a confusion matrix\nprediction = clf.predict(X_test)\nprint(prediction)\n\n\n\n\n# test\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)\n\n\n\n\nA little application\n\u00b6\n\n\nAppend each result in a dictionary\n\n\nindex = np.argmax([acc_model1, acc_model2])\nclassifiers = {0: 'model1', 1: 'model2}\nprint('Best classifier is {}'.format(classifiers[index]))",
            "title": "Overview of scikit-learn"
        },
        {
            "location": "/Overview_of_scikit-learn/#basic-level",
            "text": "",
            "title": "Basic level"
        },
        {
            "location": "/Overview_of_scikit-learn/#hard-coded-dataset",
            "text": "# [height, weight, shoe_size]\nX = [[181, 80, 44], [177, 70, 43], [160, 60, 38], [154, 54, 37], [166, 65, 40],\n     [190, 90, 47], [175, 64, 39],\n     [177, 70, 40], [159, 55, 37], [171, 75, 42], [181, 85, 43]]\n\nY = ['male', 'male', 'female', 'female', 'male', 'male', 'female', 'female',\n     'female', 'male', 'male']",
            "title": "Hard-coded dataset"
        },
        {
            "location": "/Overview_of_scikit-learn/#decision-tree",
            "text": "# import decision tree\nfrom sklearn import tree\n\n# train on the train set\nclf = tree.DecisionTreeClassifier()\n\nclf = clf.fit(X,Y)  # test\nprediction = clf.predict([[190, 70, 43]])\nprint(prediction)  ['male']",
            "title": "Decision tree"
        },
        {
            "location": "/Overview_of_scikit-learn/#random-forests",
            "text": "from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# set the training parameters\nclf = RandomForestClassifier(n_estimators=1000)\n\n# train on the same train set\nclf = clf.fit(X,Y)\n\n# validate the classifier\naccuracy = clf.score(X, Y)\nprint('Accuracy: ' + str(accuracy))  Accuracy: 1.0  # test\nprediction = clf.predict([[190, 70, 43]])\nprint(prediction)  ['male']",
            "title": "Random Forests"
        },
        {
            "location": "/Overview_of_scikit-learn/#k-nearest-neighbours",
            "text": "from sklearn.neighbors import KNeighborsClassifier\n\n# set the training parameters\nneigh = KNeighborsClassifier(n_neighbors=3)\n\n# train on the same train set\nneigh.fit(X,Y)  KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n           metric_params=None, n_jobs=1, n_neighbors=3, p=2,\n           weights='uniform')  # test\nprediction = neigh.predict([[190, 70, 43]])\nprint(prediction)  ['male']",
            "title": "k-Nearest Neighbours"
        },
        {
            "location": "/Overview_of_scikit-learn/#logistic-regression",
            "text": "from sklearn.linear_model import LogisticRegression\n\n# set the training parameters\nneigh = LogisticRegression()\n\n# train on the same train set\nneigh.fit(X, Y)  LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)  # test\nprediction = neigh.predict([[190, 70, 43]])\nprint(prediction)  ['female']",
            "title": "Logistic regression"
        },
        {
            "location": "/Overview_of_scikit-learn/#naive-bayes",
            "text": "from sklearn.naive_bayes import GaussianNB\n\n# set the training parameters\ngnb = GaussianNB()\n\n# train on the same train set\ngnb = gnb.fit(X, Y)  # test\nprediction = gnb.predict([[190, 70, 43]])\nprint(prediction)  ['male']",
            "title": "Na\u00efve Bayes"
        },
        {
            "location": "/Overview_of_scikit-learn/#intermediate-level",
            "text": "",
            "title": "Intermediate level"
        },
        {
            "location": "/Overview_of_scikit-learn/#imported-dataset",
            "text": "",
            "title": "Imported dataset"
        },
        {
            "location": "/Overview_of_scikit-learn/#decision-tree_1",
            "text": "import pandas as pd\nfrom sklearn import tree\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K  len(data)  32561  data.shape  (32561, 15)  data.info()  <class 'pandas.core.frame.DataFrame'>\nRangeIndex: 32561 entries, 0 to 32560\nData columns (total 15 columns):\nage               32561 non-null int64\nworkclass         32561 non-null object\nfinal_weight      32561 non-null int64\neducation         32561 non-null object\neducation_num     32561 non-null int64\nmarital_status    32561 non-null object\noccupation        32561 non-null object\nrelationship      32561 non-null object\nrace              32561 non-null object\nsex               32561 non-null object\ncapital_gain      32561 non-null int64\ncapital_loss      32561 non-null int64\nhours_per_week    32561 non-null int64\nnative_country    32561 non-null object\nsalary            32561 non-null object\ndtypes: int64(6), object(9)\nmemory usage: 3.7+ MB  # convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K  # take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()  # split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# set the training parameters, instantiate the classifier\nclf = tree.DecisionTreeClassifier()\n\n# train on the train set\nclf = clf.fit(X_train, Y_train)  # validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))  Accuracy: 0.727198280274  # test\nprediction = clf.predict(X_test)\nprint(prediction)  ['Female' 'Female' 'Male' ..., 'Male' 'Male' 'Male']  # create a confusion matrix\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)  [[1613 1037]\n [1628 5491]]",
            "title": "Decision tree"
        },
        {
            "location": "/Overview_of_scikit-learn/#random-forests_1",
            "text": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K  # convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K  # take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()  # split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# set the training parameters\nclf = RandomForestClassifier(n_estimators=1000)\n\n# train on the train set\nclf = clf.fit(X_train, Y_train)  # validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))  Accuracy: 0.738765482649  # test\nprediction = clf.predict(X_test)\nprint(prediction)  ['Male' 'Female' 'Male' ..., 'Female' 'Male' 'Female']  # create a confusion matrix\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)  [[1568  970]\n [1582 5649]]",
            "title": "Random Forests"
        },
        {
            "location": "/Overview_of_scikit-learn/#random-forests-with-the-iris-dataset",
            "text": "Iris dataset.  from sklearn.cross_validation import cross_val_score, train_test_split\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import preprocessing\n\niris = datasets.load_iris()  # feature scaling\nmin_max_scaler = preprocessing.MinMaxScaler()\nX = min_max_scaler.fit_transform(iris.data)\n\n# train on the train set\nclf = RandomForestClassifier(n_estimators=200)     # test our classifier\nscores = cross_val_score(clf, X, iris.target, cv=5)\n\nprint(\"Accuracy: %0.2f (+/- %0.2f)\" % (scores.mean(), scores.std() * 2))  Accuracy: 0.97 (+/- 0.04)",
            "title": "Random Forests (with the Iris dataset)"
        },
        {
            "location": "/Overview_of_scikit-learn/#k-nearest-neighbours_1",
            "text": "import pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# Import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K  # convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K  # take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()  # split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# set the training parameters, instantiate the classifier\nclf = KNeighborsClassifier(n_neighbors=3)\n\n# train on the train set\nclf = clf.fit(X_train, Y_train)  # validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))  Accuracy: 0.68113420002  # create a confusion matrix\nprediction = clf.predict(X_test)  # test\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)  [[1694 1591]\n [1524 4960]]",
            "title": "k-Nearest Neighbours"
        },
        {
            "location": "/Overview_of_scikit-learn/#logistic-regression_1",
            "text": "import pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K  # convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K  # take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()  # split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# set the training parameters, instantiate the classifier\nclf = LogisticRegression()\n\n# train on the train set\nclf = clf.fit(X_train, Y_train)  # validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))  Accuracy: 0.669259903777  # create a confusion matrix\nprediction = clf.predict(X_test)\nprint(prediction)  ['Male' 'Male' 'Male' ..., 'Female' 'Female' 'Male']  # test\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)  [[ 459  419]\n [2812 6079]]",
            "title": "Logistic regression"
        },
        {
            "location": "/Overview_of_scikit-learn/#naive-bayes_1",
            "text": "import pandas as pd\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K  # convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K  # take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()  # split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# set the training parameters, instantiate the classifier\nclf = GaussianNB()\n\n# train on the train set\nclf = clf.fit(X_train, Y_train)  # validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))  Accuracy: 0.6612754632  # create a confusion matrix\nprediction = clf.predict(X_test)\nprint(prediction)  ['Male' 'Male' 'Male' ..., 'Male' 'Male' 'Female']  # test\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)  [[ 674  721]\n [2588 5786]]",
            "title": "Na\u00efve Bayes"
        },
        {
            "location": "/Overview_of_scikit-learn/#intermediate-level-additional",
            "text": "",
            "title": "Intermediate level (Additional)"
        },
        {
            "location": "/Overview_of_scikit-learn/#principal-component-analysis",
            "text": "import pandas as pd\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import LabelEncoder\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K  # convert the string labels to numeric labels\nfor label in ['race', 'occupation', 'sex']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race  sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4    1          2174   \n1  Married-civ-spouse           4        Husband     4    1             0   \n2            Divorced           6  Not-in-family     4    1             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K  print(data.shape)  (32561, 15)  # print one variable\nprint(data.sex.head(3))  0    1\n1    1\n2    1\nName: sex, dtype: int64  # % Male\nsum(data.sex)/len(data)  0.66920549123184181  # take the fields of interest and plug them into variable X\nX = data[['age', 'final_weight', 'education_num', 'occupation', 'race', 'capital_gain', 'hours_per_week']]  # create a regular PCA model \n# tell the model to only keep two components.\npca = PCA(n_components=2)\n\n# Fit and transform the data to the model\nreduced_data_pca = pca.fit_transform(X)\n\n# Inspect the shape\nprint(reduced_data_pca.shape)  (32561, 2)  # Print out the data (array)\nprint(reduced_data_pca[0:3])  [[-112262.33316766   -1099.76011639]\n [-106467.39923916    1074.41772634]\n [  25867.60075685    1078.43450794]]  %pylab inline\nimport matplotlib.pyplot as plt\n\nx = reduced_data_pca[:, 0]\ny = reduced_data_pca[:, 1]\n\nplt.scatter(x, y)\n\nplt.xlabel('First Principal Component')\nplt.ylabel('Second Principal Component')\nplt.title(\"PCA Scatter Plot\")\n\nplt.show()  Populating the interactive namespace from numpy and matplotlib   male = [data.sex == 1][0:3]\ntype(male)  list  # Is Male?\nmale[0][0:3]  0    True\n1    True\n2    True\nName: sex, dtype: bool  female = [data.sex == 0][0:3]\n\n# Is Female?\nfemale[0][0:3]  0    False\n1    False\n2    False\nName: sex, dtype: bool  for i in range(len(colors)):\n    print(i)  0\n1  data.sex = data.sex.astype(int)\ndata.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       age \n       workclass \n       final_weight \n       education \n       education_num \n       marital_status \n       occupation \n       relationship \n       race \n       sex \n       capital_gain \n       capital_loss \n       hours_per_week \n       native_country \n       salary \n     \n   \n   \n     \n       0 \n       39 \n       State-gov \n       77516 \n       Bachelors \n       13 \n       Never-married \n       1 \n       Not-in-family \n       4 \n       1 \n       2174 \n       0 \n       40 \n       United-States \n       <=50K \n     \n     \n       1 \n       50 \n       Self-emp-not-inc \n       83311 \n       Bachelors \n       13 \n       Married-civ-spouse \n       4 \n       Husband \n       4 \n       1 \n       0 \n       0 \n       13 \n       United-States \n       <=50K \n     \n     \n       2 \n       38 \n       Private \n       215646 \n       HS-grad \n       9 \n       Divorced \n       6 \n       Not-in-family \n       4 \n       1 \n       0 \n       0 \n       40 \n       United-States \n       <=50K \n     \n      colors = ['blue', \n          'red']\n\n# colors = ['black','blue','purple','yellow','white','red','lime','cyan','orange','gray']\n\n# 0 Female, blue\n# 1 Male, red\nfor i in range(len(colors)):\n    x = reduced_data_pca[:, 0]*[data.sex == i]\n    y = reduced_data_pca[:, 1]*[data.sex == i]\n    plt.scatter(x, y, c=colors[i]) \n\n# 0 Female, 1 Male\nplt.legend(['Female','Male'], \n           bbox_to_anchor=(1.05, 1), \n           loc=2, \n           borderaxespad=0.)\n\nplt.xlabel('First Principal Component')\nplt.ylabel('Second Principal Component')\nplt.title(\"PCA Scatter Plot\")\n\nplt.show()",
            "title": "Principal Component Analysis"
        },
        {
            "location": "/Overview_of_scikit-learn/#support-vector-machines",
            "text": "import pandas as pd\nfrom sklearn import svm\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# import the adult.txt file into Python\ndata = pd.read_csv('data/adults.txt', sep=',')\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status         occupation   relationship   race   sex  \\\n0       Never-married       Adm-clerical  Not-in-family  White  Male   \n1  Married-civ-spouse    Exec-managerial        Husband  White  Male   \n2            Divorced  Handlers-cleaners  Not-in-family  White  Male\n\n   capital_gain  capital_loss  hours_per_week native_country salary  \n0          2174             0              40  United-States  <=50K  \n1             0             0              13  United-States  <=50K  \n2             0             0              40  United-States  <=50K  # convert the string labels to numeric labels\nfor label in ['race', 'occupation']:\n    data[label] = LabelEncoder().fit_transform(data[label])\nprint(data.head(3))     age         workclass  final_weight  education  education_num  \\\n0   39         State-gov         77516  Bachelors             13   \n1   50  Self-emp-not-inc         83311  Bachelors             13   \n2   38           Private        215646    HS-grad              9\n\n       marital_status  occupation   relationship  race   sex  capital_gain  \\\n0       Never-married           1  Not-in-family     4  Male          2174   \n1  Married-civ-spouse           4        Husband     4  Male             0   \n2            Divorced           6  Not-in-family     4  Male             0\n\n   capital_loss  hours_per_week native_country salary  \n0             0              40  United-States  <=50K  \n1             0              13  United-States  <=50K  \n2             0              40  United-States  <=50K  # take the fields of interest and plug them into variable X\nX = data[['race', 'hours_per_week', 'occupation']]\n\n# make sure to provide the corresponding truth value\nY = data['sex'].values.tolist()  # split the data into a test (30%) and train set (70%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n\n# Create the SVC model\nclf = svm.SVC(gamma=0.001, C=100., kernel='linear')\n\n# Fit the data to the SVC model\nclf = clf.fit(X_train, Y_train)  # validate the classifier\naccuracy = clf.score(X_test, Y_test)\nprint('Accuracy: ' + str(accuracy))  # create a confusion matrix\nprediction = clf.predict(X_test)\nprint(prediction)  # test\ncm = confusion_matrix(prediction, Y_test)\nprint(cm)",
            "title": "Support Vector Machines"
        },
        {
            "location": "/Overview_of_scikit-learn/#a-little-application",
            "text": "Append each result in a dictionary  index = np.argmax([acc_model1, acc_model2])\nclassifiers = {0: 'model1', 1: 'model2}\nprint('Best classifier is {}'.format(classifiers[index]))",
            "title": "A little application"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/",
            "text": "CONTENT\n\n\nLoad and explore the Wine dataset\n\n\nk-Nearest Neighbours\n\n\nMeasure performance\n\n\nTrain-test split and performance in practice\n\n\n\n\n\n\nPreprocessing: scaling and centering the data\n\n\nk-NN: scaling in practice\n\n\nScale the data\n\n\nRun the k-NN\n\n\nMeasure the performance\n\n\n\n\n\n\nk-NN Recap\n\n\nWithout scaling\n\n\nWith scaling\n\n\n\n\n\n\nLinear regression\n\n\nLogistic regression (Logit)\n\n\nWith random numbers\n\n\nWith the Wine dataset\n\n\nScale the data\n\n\nRun the Logit and measure the performance\n\n\n\n\n\n\nLogit Recap\n\n\nWithout scaling\n\n\n\n\n\n\nNoise and scaling\n\n\nPlotting the synthesized data\n\n\nk-Nearest Neighbours\n\n\nScale the data, run the k-NN, and measure the performance\n\n\nAdd noise to the signal\n\n\nRun the k-NN and measure the performance\n\n\nScale the data, add noise, run the k-NN, and measure the performance\n\n\n\n\n\n\nNoise strength vs. accuracy (and the need for scaling)\n\n\nLogit (Repeat the k-NN procedure)\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nLoad and explore the Wine dataset\n\u00b6\n\n\nWe use the \nwine quality dataset\n related to red and white vinho verde wine samples, from the north of Portugal.\n\n\n# import the modules\n%pylab inline\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# set the style\nplt.style.use('ggplot')\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n# import the data\ndf = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';')\ndf.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nfixed acidity\n\n      \nvolatile acidity\n\n      \ncitric acid\n\n      \nresidual sugar\n\n      \nchlorides\n\n      \nfree sulfur dioxide\n\n      \ntotal sulfur dioxide\n\n      \ndensity\n\n      \npH\n\n      \nsulphates\n\n      \nalcohol\n\n      \nquality\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n7.4\n\n      \n0.70\n\n      \n0.00\n\n      \n1.9\n\n      \n0.076\n\n      \n11.0\n\n      \n34.0\n\n      \n0.9978\n\n      \n3.51\n\n      \n0.56\n\n      \n9.4\n\n      \n5\n\n    \n\n    \n\n      \n1\n\n      \n7.8\n\n      \n0.88\n\n      \n0.00\n\n      \n2.6\n\n      \n0.098\n\n      \n25.0\n\n      \n67.0\n\n      \n0.9968\n\n      \n3.20\n\n      \n0.68\n\n      \n9.8\n\n      \n5\n\n    \n\n    \n\n      \n2\n\n      \n7.8\n\n      \n0.76\n\n      \n0.04\n\n      \n2.3\n\n      \n0.092\n\n      \n15.0\n\n      \n54.0\n\n      \n0.9970\n\n      \n3.26\n\n      \n0.65\n\n      \n9.8\n\n      \n5\n\n    \n\n  \n\n\n\n\n\n\n\n# drop target variable\n# only keep the values; the DataFrame becomes a simple array (matrix)\n# index (axis=0 / \u2018index\u2019) or columns (axis=1 / \u2018columns\u2019).\nX = df.drop('quality' , axis=1).values\n\n# print the array\nprint(X)\n\n\n\n\n[[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ]\n [  7.8     0.88    0.    ...,   3.2     0.68    9.8  ]\n [  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ]\n ..., \n [  6.3     0.51    0.13  ...,   3.42    0.75   11.   ]\n [  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ]\n [  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]\n\n\n\nThe last column is gone from the array. Make it a list instead (or a single-row array).\n\n\ny1 = df['quality'].values\n\n# print the single-row array\nprint(y1)\n\n\n\n\n[5 5 5 ..., 6 5 6]\n\n\n\n# row, col of the DataFrame\ndf.shape\n\n\n\n\n(1599, 12)\n\n\n\n# plot all the columns or variables\npd.DataFrame.hist(df, figsize = [15,15]);\n\nplt.show()\n\n\n\n\n\n\nNotice the range of each variable; some are wider.\n\n\nAny algorithm, such as k-NN, which cares about the distance between data points. This motivates scaling our data.\n\n\nLet us turn it into a two-category variable consisting of \u2018good\u2019 (rating > 5) & \u2018bad\u2019 (rating <= 5) qualities.\n\n\nprint(y1)\n\n\n\n\n[5 5 5 ..., 6 5 6]\n\n\n\n# is the rating <= 5 ?\ny = y1 <= 5\nprint(y)\n\n\n\n\n[ True  True  True ..., False  True False]\n\n\n\nTrue\n is worth 1 and \nFalse\n is worth 0.\n\n\n# plot two histograms\n# the original target variable\n# and the aggregated target variable\nplt.figure(figsize=(20,5));\n\n# left plot\nplt.subplot(1, 2, 1 );\nplt.hist(y1);\nplt.xlabel('original target value')\nplt.ylabel('count')\n\n# right plot\nplt.subplot(1, 2, 2);\nplt.hist(y)\nplt.xlabel('aggregated target value')\nplt.show()\n\n\n\n\n\n\nAgain, on the right histogram, \nTrue\n = 1 and \nFalse\n = 0.\n\n\nk-Nearest Neighbours\n\u00b6\n\n\nMeasure performance\n\u00b6\n\n\nAccuracy\n is the default scoring method for both\n\n\n\n\nk-Nearest Neighbours and\n\n\nlogistic regression.\n\n\n\n\n\n\n\\text{Accuracy}=\\frac{\\text{Number of Correct Predictions}}{\\text{Total Number of Predictions}}\n\n\n\n\nAccuracy is commonly defined for binary classification problems in terms of true positives & false negatives. It can also be defined in terms of a \nconfusion matrix\n. \n\n\nOther measures\n of model performance are derived from the confusion matrix: \nprecision\n (true positives divided by the number of true & false positives) and \nrecall\n (number of true positives divided by the number of true positives plus the number of false negatives). \n\n\nThe \nF1-score\n is the harmonic mean of the precision and the recall.\n\n\nTrain-test split and performance in practice\n\u00b6\n\n\nThe rule of thumb is to use approximately \n\n\n\n\n80% of the data for training (train set) and\n\n\n20% for testing (test set).\n\n\n\n\nfrom sklearn.cross_validation import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.2, \n                                                    random_state=42)\n\n\n\n\n# the k-NN model\nfrom sklearn import neighbors, linear_model\n\nknn = neighbors.KNeighborsClassifier(n_neighbors = 5)\nknn_model_1 = knn.fit(X_train, y_train)\n\n\n\n\nprint('k-NN score for test set: %f' % knn_model_1.score(X_test, y_test))\nprint('k-NN score for training set: %f' % knn_model_1.score(X_train, y_train))\n\n\n\n\nk-NN score for test set: 0.612500\nk-NN score for training set: 0.774042\n\n\n\nThe accuracy, more specifically the test accuracy, is not great.\n\n\nLet us print out all the \nother\n performance measures for the test set.\n\n\nfrom sklearn.metrics import classification_report\n\ny_true, y_pred = y_test, knn_model_1.predict(X_test)\nprint(classification_report(y_true, y_pred))\n\n\n\n\n             precision    recall  f1-score   support\n\n      False       0.66      0.64      0.65       179\n       True       0.56      0.57      0.57       141\n\navg / total       0.61      0.61      0.61       320\n\n\n\nOther\n performance measures for the train set.\n\n\ny_true, y_pred = y_train, knn_model_1.predict(X_train)\nprint(classification_report(y_true, y_pred))\n\n\n\n\n             precision    recall  f1-score   support\n\n      False       0.80      0.76      0.78       676\n       True       0.75      0.79      0.77       603\n\navg / total       0.78      0.77      0.77      1279\n\n\n\nThese underperformances might come from the spread in the variables. The range of each variable is different; some are wider.\n\n\nPreprocessing: scaling and centering the data\n\u00b6\n\n\nPreprocessing happens before running any model, such as a regression (predicting a continuous variable) or a classification (predicting a discrete variable) using one or another model (k-NN, logistic, decision tree, random forests etc.).\n\n\nFor numerical variables, it is common to either normalize or standardize the data.\n\n\nNormalization\n: \nscaling\n a dataset so that its minimum is 0 and its maximum 1.\n\n\n\n\nx_{normalized} = \\frac{x-x_{min}}{x_{max}-x_{min}}\n\n\n\n\nStardardization\n: \ncentering\n the data around 0 and to scale with respect to the standard deviation.\n\n\n\n\nx_{standardized} = \\frac{x-\\mu}{\\sigma}\n\n\n\n\nwhere \n\\mu\n and \n\\sigma\n are the mean and standard deviation of the dataset.\n\n\nThere are other transformatoions, such as the log transformation or the Box-Cox transformation, to make the data look more Gaussian or a normally distributed.\n\n\nk-NN: scaling in practice\n\u00b6\n\n\nScale the data\n\u00b6\n\n\nprint(X)\n\n\n\n\n[[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ]\n [  7.8     0.88    0.    ...,   3.2     0.68    9.8  ]\n [  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ]\n ..., \n [  6.3     0.51    0.13  ...,   3.42    0.75   11.   ]\n [  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ]\n [  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]\n\n\n\nfrom sklearn.preprocessing import scale\n\n# minimum is 0 and its maximum 1\nXs = scale(X)\nprint(Xs)\n\n\n\n\n[[-0.52835961  0.96187667 -1.39147228 ...,  1.28864292 -0.57920652\n  -0.96024611]\n [-0.29854743  1.96744245 -1.39147228 ..., -0.7199333   0.1289504\n  -0.58477711]\n [-0.29854743  1.29706527 -1.18607043 ..., -0.33117661 -0.04808883\n  -0.58477711]\n ..., \n [-1.1603431  -0.09955388 -0.72391627 ...,  0.70550789  0.54204194\n   0.54162988]\n [-1.39015528  0.65462046 -0.77526673 ...,  1.6773996   0.30598963\n  -0.20930812]\n [-1.33270223 -1.21684919  1.02199944 ...,  0.51112954  0.01092425\n   0.54162988]]\n\n\n\nRun the k-NN\n\u00b6\n\n\nfrom sklearn.cross_validation import train_test_split\n\n# split\n# 80% of the data for training (train set)\n# 20% for testing (test set)\nXs_train, Xs_test, y_train, y_test = train_test_split(Xs,\n                                                      y,\n                                                      test_size=0.2,\n                                                      random_state=42)\n\n\n\n\n# Run\nknn_model_2 = knn.fit(Xs_train, y_train)\n\n\n\n\nMeasure the performance\n\u00b6\n\n\nprint('k-NN score for test set: %f' % knn_model_2.score(Xs_test, y_test))\nprint('k-NN score for training set: %f' % knn_model_2.score(Xs_train, y_train))\n\n\n\n\nk-NN score for test set: 0.712500\nk-NN score for training set: 0.814699\n\n\n\ny_true, y_pred = y_test, knn_model_2.predict(Xs_test)\n\n# Test set\nprint(classification_report(y_true, y_pred))\n\n\n\n\n             precision    recall  f1-score   support\n\n      False       0.72      0.79      0.75       179\n       True       0.70      0.62      0.65       141\n\navg / total       0.71      0.71      0.71       320\n\n\n\ny_true, y_pred = y_train, knn_model_2.predict(Xs_train)\n\n# Train set\nprint(classification_report(y_true, y_pred))\n\n\n\n\n             precision    recall  f1-score   support\n\n      False       0.80      0.86      0.83       676\n       True       0.83      0.77      0.80       603\n\navg / total       0.82      0.81      0.81      1279\n\n\n\nNormalization-scaling improves the performance compare to the previous \nclassification_report\n.\n\n\nk-NN Recap\n\u00b6\n\n\nWithout scaling\n\u00b6\n\n\n# Set sc = False \n# Do not scale the features \nsc = False\n# Set the number of k in k-NN\nnk = 5\n\n# Load data \ndf = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';') \n# Drop target variable \nX = df.drop('quality' , 1).values\n\n# Scale, if desired \nif sc == True: \n  X = scale(X) \n\n# Target value \ny1 = df['quality'].values # original target variable \n# New target variable: is the rating <= 5?\ny = y1 <= 5 \n\n# Split (80/20) the data into a test set and a train set\n# X_train, X_test, y_train, y_test \nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.2,\n                                                    random_state=42) \n\n# Train the k-NN model\nknn = neighbors.KNeighborsClassifier(n_neighbors = nk)\nknn_model = knn.fit(X_train, y_train)\n\n# Print performance on the test set \nprint('k-NN accuracy for test set: %f' % knn_model.score(X_test, y_test))\ny_true, y_pred = y_test, knn_model.predict(X_test) \nprint(classification_report(y_true, y_pred))\n\n\n\n\nk-NN accuracy for test set: 0.612500\n             precision    recall  f1-score   support\n\n      False       0.66      0.64      0.65       179\n       True       0.56      0.57      0.57       141\n\navg / total       0.61      0.61      0.61       320\n\n\n\nWith scaling\n\u00b6\n\n\n# Set sc = True \n# to scale the features \nsc = True\n# Set the number of k in k-NN\nnk = 5\n\n# Load data \ndf = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';') \n# Drop target variable \nX = df.drop('quality' , 1).values\n\n# Scale, if desired \nif sc == True: \n  X = scale(X) \n\n# Target value \ny1 = df['quality'].values # original target variable \n# New target variable: is the rating <= 5?\ny = y1 <= 5 \n\n# Split (80/20) the data into a test set and a train set\n# X_train, X_test, y_train, y_test \nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.2,\n                                                    random_state=42) \n\n# Train the k-NN model\nknn = neighbors.KNeighborsClassifier(n_neighbors = nk)\nknn_model = knn.fit(X_train, y_train)\n\n# Print performance on the test set \nprint('k-NN accuracy for test set: %f' % knn_model.score(X_test, y_test))\ny_true, y_pred = y_test, knn_model.predict(X_test) \nprint(classification_report(y_true, y_pred))\n\n\n\n\nk-NN accuracy for test set: 0.712500\n             precision    recall  f1-score   support\n\n      False       0.72      0.79      0.75       179\n       True       0.70      0.62      0.65       141\n\navg / total       0.71      0.71      0.71       320\n\n\n\nLinear regression\n\u00b6\n\n\nBefore addressing an alternative to k-NN, the logistic regression or Logit, let us briefly review the linear regresion with a different dataset.\n\n\n# Import necessary packages\n%pylab inline\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# set the style\nplt.style.use('ggplot')\n\n# Import nmore packages\nfrom sklearn import datasets\nfrom sklearn import linear_model\nimport numpy as np\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n# Load the data\n# The data is part of the scikit-learn module\nboston = datasets.load_boston()\nyb = boston.target.reshape(-1, 1)\nXb = boston['data'][:,5].reshape(-1, 1)\n\nprint(yb[:10])\n\n\n\n\n[[ 24. ]\n [ 21.6]\n [ 34.7]\n [ 33.4]\n [ 36.2]\n [ 28.7]\n [ 22.9]\n [ 27.1]\n [ 16.5]\n [ 18.9]]\n\n\n\nprint(Xb[:10])\n\n\n\n\n[[ 6.575]\n [ 6.421]\n [ 7.185]\n [ 6.998]\n [ 7.147]\n [ 6.43 ]\n [ 6.012]\n [ 6.172]\n [ 5.631]\n [ 6.004]]\n\n\n\n# Plot data\nplt.scatter(Xb,yb)\nplt.ylabel('value of house /1000 ($)')\nplt.xlabel('number of rooms')\n\n\n\n\n<matplotlib.text.Text at 0x7f3681ae90b8>\n\n\n\n\n\n# Create linear regression object\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit( Xb, yb)\n\n\n\n\nLinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)\n\n\n\n# Plot outputs\nplt.scatter(Xb, yb,  color='black')\nplt.plot(Xb, regr.predict(Xb), color='blue',\n         linewidth=3)\nplt.show()\n\n\n\n\n\n\nLogistic regression (Logit)\n\u00b6\n\n\nWith random numbers\n\u00b6\n\n\n# Synthesize data\nX1 = np.random.normal(size=150)\ny1 = (X1 > 0).astype(np.float)\nX1[X1 > 0] *= 4\nX1 += .3 * np.random.normal(size=150)\nX1 = X1.reshape(-1, 1)\n\n\n\n\n# Run the classifier\nclf = linear_model.LogisticRegression()\nclf.fit(X1, y1)\n\n\n\n\nLogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)\n\n\n\nX1[:10]\n\n\n\n\narray([[-0.74466839],\n       [ 0.47335714],\n       [-1.94951938],\n       [ 0.12078443],\n       [-1.62121705],\n       [-2.23684396],\n       [ 7.66984914],\n       [-0.31941781],\n       [-1.07205326],\n       [ 0.85413978]])\n\n\n\n# Order X1\nX1_ordered = sorted(X1, reverse=False)\n\nX1_ordered[:10]\n\n\n\n\n[array([-3.29826361]),\n array([-2.76292445]),\n array([-2.23684396]),\n array([-1.96629089]),\n array([-1.94951938]),\n array([-1.87501025]),\n array([-1.83321548]),\n array([-1.73611093]),\n array([-1.62121705]),\n array([-1.61885181])]\n\n\n\n# Plot the result\nplt.scatter(X1.ravel(), y1, color='black', zorder=20 , alpha = 0.5)\nplt.plot(X1_ordered, clf.predict_proba(X1_ordered)[:,1], color='blue' , linewidth = 3)\nplt.ylabel('target variable')\nplt.xlabel('predictor variable')\nplt.show()\n\n\n\n\n\n\nWith the Wine dataset\n\u00b6\n\n\n# Load data\ndf = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';')\n\ndf.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nfixed acidity\n\n      \nvolatile acidity\n\n      \ncitric acid\n\n      \nresidual sugar\n\n      \nchlorides\n\n      \nfree sulfur dioxide\n\n      \ntotal sulfur dioxide\n\n      \ndensity\n\n      \npH\n\n      \nsulphates\n\n      \nalcohol\n\n      \nquality\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n7.4\n\n      \n0.70\n\n      \n0.00\n\n      \n1.9\n\n      \n0.076\n\n      \n11.0\n\n      \n34.0\n\n      \n0.9978\n\n      \n3.51\n\n      \n0.56\n\n      \n9.4\n\n      \n5\n\n    \n\n    \n\n      \n1\n\n      \n7.8\n\n      \n0.88\n\n      \n0.00\n\n      \n2.6\n\n      \n0.098\n\n      \n25.0\n\n      \n67.0\n\n      \n0.9968\n\n      \n3.20\n\n      \n0.68\n\n      \n9.8\n\n      \n5\n\n    \n\n    \n\n      \n2\n\n      \n7.8\n\n      \n0.76\n\n      \n0.04\n\n      \n2.3\n\n      \n0.092\n\n      \n15.0\n\n      \n54.0\n\n      \n0.9970\n\n      \n3.26\n\n      \n0.65\n\n      \n9.8\n\n      \n5\n\n    \n\n  \n\n\n\n\n\n\n\n# Drop target variable\nX = df.drop('quality' , 1).values\n\n# Print the array\nprint(X)\n\n\n\n\n[[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ]\n [  7.8     0.88    0.    ...,   3.2     0.68    9.8  ]\n [  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ]\n ..., \n [  6.3     0.51    0.13  ...,   3.42    0.75   11.   ]\n [  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ]\n [  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]\n\n\n\nThe last column is gone.\n\n\ny1 = df['quality'].values\n\n# Print the single-row array\nprint(y1)\n\n\n\n\n[5 5 5 ..., 6 5 6]\n\n\n\ndf.shape\n\n\n\n\n(1599, 12)\n\n\n\n# plot the other columns or variables\npd.DataFrame.hist(df, figsize = [15,15]);\n\nplt.show() # facultative in Jypyter\n\n\n\n\n\n\nLet us turn it into a two-category variable consisting of \u2018good\u2019 (rating > 5) & \u2018bad\u2019 (rating <= 5) qualities.\n\n\n# is the rating <= 5 ?\ny = y1 <= 5\nprint(y)\n\n\n\n\n[ True  True  True ..., False  True False]\n\n\n\nfrom sklearn.cross_validation import train_test_split\n\n# split\n# 80% of the data for training (train set)\n# 20% for testing (test set)\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.2,\n                                                    random_state=42)\n\n\n\n\nfrom sklearn import linear_model\n\n# Initial logistic regression model\nlr = linear_model.LogisticRegression()\n\n\n\n\n# Fit the model\nlr = lr.fit(X_train, y_train)\ny_true, y_pred = y_train, lr.predict(X_train)\n\n# Evaluate the train set\nprint('Logistic Regression score for train set: %f' % lr.score(X_train, y_train))\n\n\n\n\nLogistic Regression score for train set: 0.752932\n\n\n\nprint(classification_report(y_true, y_pred))\n\n\n\n\n             precision    recall  f1-score   support\n\n      False       0.77      0.75      0.76       676\n       True       0.73      0.75      0.74       603\n\navg / total       0.75      0.75      0.75      1279\n\n\n\nfrom sklearn.metrics import classification_report\n\n# Use the test set\ny_true, y_pred = y_test, lr.predict(X_test)\n\n# Evaluate the test set\nprint('Logistic Regression score for test set: %f' % lr.score(X_test, y_test))\n\n\n\n\nLogistic Regression score for test set: 0.740625\n\n\n\nprint(classification_report(y_true, y_pred))\n\n\n\n\n             precision    recall  f1-score   support\n\n      False       0.78      0.74      0.76       179\n       True       0.69      0.74      0.71       141\n\navg / total       0.74      0.74      0.74       320\n\n\n\nNote\n: the logistic regression performs better than k-NN without scaling.\n\n\nScale the data\n\u00b6\n\n\nprint(X)\n\n\n\n\n[[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ]\n [  7.8     0.88    0.    ...,   3.2     0.68    9.8  ]\n [  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ]\n ..., \n [  6.3     0.51    0.13  ...,   3.42    0.75   11.   ]\n [  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ]\n [  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]\n\n\n\nfrom sklearn.preprocessing import scale\n\nXs = scale(X)\nprint(Xs)\n\n\n\n\n[[-0.52835961  0.96187667 -1.39147228 ...,  1.28864292 -0.57920652\n  -0.96024611]\n [-0.29854743  1.96744245 -1.39147228 ..., -0.7199333   0.1289504\n  -0.58477711]\n [-0.29854743  1.29706527 -1.18607043 ..., -0.33117661 -0.04808883\n  -0.58477711]\n ..., \n [-1.1603431  -0.09955388 -0.72391627 ...,  0.70550789  0.54204194\n   0.54162988]\n [-1.39015528  0.65462046 -0.77526673 ...,  1.6773996   0.30598963\n  -0.20930812]\n [-1.33270223 -1.21684919  1.02199944 ...,  0.51112954  0.01092425\n   0.54162988]]\n\n\n\nRun the Logit and measure the performance\n\u00b6\n\n\nfrom sklearn.cross_validation import train_test_split\n\n# Split 80/20\nXs_train, Xs_test, y_train, y_test = train_test_split(Xs,\n                                                      y,\n                                                      test_size=0.2,\n                                                      random_state=42)\n\n\n\n\n# Run the logistic regression model\nlr_2 = lr.fit(Xs_train, y_train)\n\n\n\n\n# Fit the model\ny_true, y_pred = y_train, lr_2.predict(Xs_train)\n\n# Evaluate the train set\nprint('Logistic Regression score for train set: %f' % lr_2.score(Xs_train, y_train))\n\n\n\n\nLogistic Regression score for train set: 0.752150\n\n\n\nprint(classification_report(y_true, y_pred))\n\n\n\n\n             precision    recall  f1-score   support\n\n      False       0.77      0.76      0.76       676\n       True       0.73      0.75      0.74       603\n\navg / total       0.75      0.75      0.75      1279\n\n\n\n# Use the test set\ny_true, y_pred = y_test, lr_2.predict(Xs_test)\n\n# Evaluate the test set\nprint('Logistic Regression score for test set: %f' % lr_2.score(Xs_test, y_test))\n\n\n\n\nLogistic Regression score for test set: 0.740625\n\n\n\nprint(classification_report(y_true, y_pred))\n\n\n\n\n             precision    recall  f1-score   support\n\n      False       0.79      0.74      0.76       179\n       True       0.69      0.74      0.72       141\n\navg / total       0.74      0.74      0.74       320\n\n\n\nThis is very interesting! The performance of logistic regression did not improve with data scaling.\n\n\nPredictor variables with large ranges that do not effect the target variable, a regression algorithm will make the corresponding coefficients small so that they do not effect predictions so much.\n\n\nLogit Recap\n\u00b6\n\n\nWithout scaling\n\u00b6\n\n\n# Set sc = False\n# do not scale the features \nsc = False \n\n# Load the data \ndf = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';') \nX = df.drop('quality' , 1).values # drop target variable \n\n# Scale, if desired \nif sc == True: \n  X = scale(X) \n\n# Target value \ny1 = df['quality'].values # original target variable \ny = y1 <= 5  # new target variable: is the rating <= 5? \n\n# Split (80/20) the data into a test set and a train\n# X_train, X_test, y_train, y_test\ntrain_test_split(X, y, test_size=0.2, random_state=42) \n\n# Train logistic regression model \nlr = linear_model.LogisticRegression() \nlr = lr.fit(X_train, y_train) \n\n# Print performance on the test set\nprint('Logistic Regression score for training set: %f' % lr.score(X_train, y_train)) \ny_true, y_pred = y_test, lr.predict(X_test) \nprint(classification_report(y_true, y_pred))\n\n\n\n\nLogistic Regression score for training set: 0.752932\n             precision    recall  f1-score   support\n\n      False       0.78      0.74      0.76       179\n       True       0.69      0.74      0.71       141\n\navg / total       0.74      0.74      0.74       320\n\n\n\nNoise and scaling\n\u00b6\n\n\nThe noisier the symthesized data, the more important scaling will be.\n\n\nMeasurements can be in meters and and miles, with small or large ranges. If we scale the data, they end up being the same.\n\n\nscikit-learn\u2019s \nmake_blobs\n function to generate 2000 data points that are in 4 clusters (each data point has 2 predictor variables and 1 target variable).\n\n\n%pylab inline\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n# Generate some clustered data (blobs!)\nimport numpy as np\nfrom sklearn.datasets.samples_generator import make_blobs\n\nn_samples=2000\nX, y = make_blobs(n_samples, centers=4, n_features=2, random_state=0)\n\nprint(X)\n\n\n\n\n[[-0.46530384  1.73299482]\n [-0.33963733  3.84220272]\n [ 2.25309569  0.99541446]\n ..., \n [ 1.03616476  4.09126428]\n [-0.5901088   3.68821314]\n [ 2.30405277  4.20250584]]\n\n\n\nprint(y)\n\n\n\n\n[2 0 1 ..., 0 2 0]\n\n\n\nPlotting the synthesized data\n\u00b6\n\n\nEach axis is a predictor variable and the colour is a key to the target variable\n\n\nAll possible target variables are equally represented. In this case (or even if they are approximately equally represented), we say that the class y is balanced.\n\n\nimport matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\n\nplt.figure(figsize=(20,5));\nplt.subplot(1, 2, 1 );\nplt.scatter(X[:,0] , X[:,1],  c = y, alpha = 0.7);\nplt.subplot(1, 2, 2);\nplt.hist(y)\n\nplt.show()\n\n\n\n\n\n\nPlot histograms of the features.\n\n\nimport pandas as pd\n\n# Convert to a DataFrame\ndf = pd.DataFrame(X)\n\n# Plot it\npd.DataFrame.hist(df, figsize=(20,5))\n\n\n\n\narray([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f366d3dbba8>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x7f366d30ca58>]], dtype=object)\n\n\n\n\n\nSplit into test & train sets, and plot both sets (train set > test set; 80/20).\n\n\nfrom sklearn.cross_validation import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.2,\n                                                    random_state=42)\n\n\n\n\nplt.figure(figsize=(20,5));\nplt.subplot(1, 2, 1 );\nplt.title('training set')\nplt.scatter(X_train[:,0] , X_train[:,1],  c = y_train, alpha = 0.7);\nplt.subplot(1, 2, 2);\nplt.scatter(X_test[:,0] , X_test[:,1],  c = y_test, alpha = 0.7);\nplt.title('test set')\n\nplt.show()\n\n\n\n\n\n\nk-Nearest Neighbours\n\u00b6\n\n\nLet\u2019s instantiate a k-Nearest Neighbours classifier and train it on our train set.\n\n\nfrom sklearn import neighbors, linear_model\n\nknn = neighbors.KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\n\n\n\n\nFit the \nknn_model\n to the test set and compute the accuracy.\n\n\nknn_model.score(X_test, y_test)\n\n\n\n\n0.93500000000000005\n\n\n\nprint('k-NN score for test set: %f' % knn_model.score(X_test, y_test))\n\n\n\n\nk-NN score for test set: 0.935000\n\n\n\nCheck out a variety of other metrics.\n\n\nfrom sklearn.metrics import classification_report\n\ny_true, y_pred = y_test, knn_model.predict(X_test)\nprint(classification_report(y_true, y_pred))\n\n\n\n\n             precision    recall  f1-score   support\n\n          0       0.87      0.90      0.88       106\n          1       0.98      0.93      0.95       102\n          2       0.90      0.92      0.91       100\n          3       1.00      1.00      1.00        92\n\navg / total       0.94      0.94      0.94       400\n\n\n\nRe-fit \nknn_model\n to the train set and compute the accuracy.\n\n\nprint('k-NN score for train set: %f' % knn_model.score(X_train, y_train))\n\n\n\n\nk-NN score for train set: 0.941875\n\n\n\nfrom sklearn.metrics import classification_report\n\ny_true, y_pred = y_train, knn_model.predict(X_train)\nprint(classification_report(y_true, y_pred))\n\n\n\n\n             precision    recall  f1-score   support\n\n          0       0.88      0.90      0.89       394\n          1       0.97      0.96      0.96       398\n          2       0.94      0.93      0.93       400\n          3       0.99      0.98      0.98       408\n\navg / total       0.94      0.94      0.94      1600\n\n\n\nScale the data, run the k-NN, and measure the performance\n\u00b6\n\n\nprint(X)\n\n\n\n\n[[-0.46530384  1.73299482]\n [-0.33963733  3.84220272]\n [ 2.25309569  0.99541446]\n ..., \n [ 1.03616476  4.09126428]\n [-0.5901088   3.68821314]\n [ 2.30405277  4.20250584]]\n\n\n\nfrom sklearn.preprocessing import scale\n\nXs = scale(X)\nprint(Xs)\n\n\n\n\n[[-0.26508542 -0.82638395]\n [-0.19594894 -0.0519305 ]\n [ 1.23046484 -1.09720678]\n ..., \n [ 0.5609601   0.03951927]\n [-0.33374791 -0.10847199]\n [ 1.25849931  0.08036466]]\n\n\n\nfrom sklearn.cross_validation import train_test_split\n\nXs_train, Xs_test, y_train, y_test = train_test_split(Xs,\n                                                      y,\n                                                      test_size=0.2,\n                                                      random_state=42)\n\n\n\n\nplt.figure(figsize=(20,5));\n\nplt.subplot(1, 2, 1 );\nplt.scatter(Xs_train[:,0] , Xs_train[:,1],  c = y_train, alpha = 0.7);\nplt.title('scaled training set')\n\nplt.subplot(1, 2, 2);\nplt.scatter(Xs_test[:,0] , Xs_test[:,1],  c = y_test, alpha = 0.7);\nplt.title('scaled test set')\n\nplt.show()\n\n\n\n\n\n\nknn_model_s = knn.fit(Xs_train, y_train)\n\nprint('k-NN score for test set: %f' % knn_model_s.score(Xs_test, y_test))\n\n\n\n\nk-NN score for test set: 0.935000\n\n\n\nIt doesn\u2019t perform any better with scaling.\n\n\nThis is most likely because both features were already around the same range.\n\n\nAdd noise to the signal\n\u00b6\n\n\nAdding a third variable of Gaussian noise with mean 0 and variable standard deviation \n\\sigma\n. We call \n\\sigma\n the strength of the noise and we see that the stronger the noise, the worse the performance of k-Nearest Neighbours.\n\n\n# Strength of noise term\nns = 10**(3)\n\n# Add noise column to predictor variables\nnewcol = np.transpose([ns*np.random.randn(n_samples)])\nXn = np.concatenate((X, newcol), axis = 1)\n\nprint(Xn)\n\n\n\n\n[[ -4.65303843e-01   1.73299482e+00  -9.41949646e+01]\n [ -3.39637332e-01   3.84220272e+00  -1.00446506e+03]\n [  2.25309569e+00   9.95414462e-01   2.95697211e+02]\n ..., \n [  1.03616476e+00   4.09126428e+00  -1.16020635e+02]\n [ -5.90108797e-01   3.68821314e+00   5.60244701e+02]\n [  2.30405277e+00   4.20250584e+00  -8.97600798e+02]]\n\n\n\nPlot the 3D data.\n\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=(15,10))\nax = fig.add_subplot(111, projection='3d' , alpha = 0.5)\nax.scatter(Xn[:,0], Xn[:,1], Xn[:,2], c = y)\n\n\n\n\n<mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7f366d409cf8>\n\n\n\n\n\nRun the k-NN and measure the performance\n\u00b6\n\n\n# Split into train-test sets\nXn_train, Xn_test, y_train, y_test = train_test_split(Xn,\n                                                      y, \n                                                      test_size=0.2, \n                                                      random_state=42)\n\n\n\n\n# Run the model\nknn = neighbors.KNeighborsClassifier()\nknn_model = knn.fit(Xn_train, y_train)\n\n\n\n\n# Evaluate\nprint('k-NN score for test set: %f' % knn_model.score(Xn_test, y_test))\n\n\n\n\nk-NN score for test set: 0.337500\n\n\n\nHorrible!\n\n\nScale the data, add noise, run the k-NN, and measure the performance\n\u00b6\n\n\n# Scale\nXns = scale(Xn)\n\nprint(Xns)\n\n\n\n\n[[-0.26508542 -0.82638395 -0.07164275]\n [-0.19594894 -0.0519305  -0.98584539]\n [ 1.23046484 -1.09720678  0.31993383]\n ..., \n [ 0.5609601   0.03951927 -0.09356271]\n [-0.33374791 -0.10847199  0.58562421]\n [ 1.25849931  0.08036466 -0.87851945]]\n\n\n\n# Apply noise\ns = int(.2*n_samples)\nXns_train = Xns[s:]\ny_train = y[s:]\nXns_test = Xns[:s]\ny_test = y[:s]\n\n# Run the model\nknn = neighbors.KNeighborsClassifier()\nknn_models = knn.fit(Xns_train, y_train)\n\n# Evaluate\nprint('k-NN score for test set: %f' % knn_models.score(Xns_test, y_test))\n\n\n\n\nk-NN score for test set: 0.917500\n\n\n\nAfter scaling the data, the model performs nearly as well as were there no noise introduced.\n\n\nNoise strength vs. accuracy (and the need for scaling)\n\u00b6\n\n\nHow the noise strength can effect model accuracy?\n\n\nCreate a function to split the data and run the model. \n\n\nUse the function in a loop.\n\n\ndef accu( X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X,\n                                                        y,\n                                                        test_size=0.2,\n                                                        random_state=42)\n\n    knn = neighbors.KNeighborsClassifier()\n    knn_model = knn.fit(X_train, y_train)\n\n    return(knn_model.score(X_test, y_test))\n\n\n\n\n# Set the variables\nnoise = [10**i for i in np.arange(0,6)]\nA1 = np.zeros(len(noise))\nA2 = np.zeros(len(noise))\ncount = 0\n\n\n\n\nprint(noise)\n\n\n\n\n[1, 10, 100, 1000, 10000, 100000]\n\n\n\nprint(A1)\nprint(A2)\n\n\n\n\n[ 0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.]\n\n\n\n# Run the loop\nfor ns in noise:\n    newcol = np.transpose([ns*np.random.randn(n_samples)])\n    Xn = np.concatenate((X, newcol), axis = 1)\n    Xns = scale(Xn)\n    A1[count] = accu( Xn, y)\n    A2[count] = accu( Xns, y)\n    count += 1\n\n\n\n\n# Plot the results\nplt.scatter( noise, A1 )\nplt.plot( noise, A1, label = 'unscaled', linewidth = 2)\nplt.scatter( noise, A2 , c = 'r')\nplt.plot( noise, A2 , label = 'scaled', linewidth = 2)\nplt.xscale('log')\nplt.xlabel('Noise strength')\nplt.ylabel('Accuracy')\nplt.legend(loc=3);\n\n\n\n\n\n\nprint(A1)\nprint(A2)\n\n\n\n\n[ 0.9225  0.9175  0.8025  0.3275  0.22    0.2525]\n[ 0.91    0.9175  0.9325  0.9075  0.9325  0.92  ]\n\n\n\nThe more noise there is in the nuisance variable, the more important it is to scale the data for the k-NN model.\n\n\n\n\nMore noise, more scaling.\n\n\n\n\nLogit (Repeat the k-NN procedure)\n\u00b6\n\n\n# Change the exponent of 10 to alter the amount of noise\nns = 10**(3) # Strength of noise term\n\n# Set sc = True if we want to scale the features\nsc = True\n\n\n\n\n# Import packages\nimport numpy as np\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn import neighbors, linear_model\nfrom sklearn.preprocessing import scale\nfrom sklearn.datasets.samples_generator import make_blobs\n\n\n\n\n# Generate some data\nn_samples=2000\nX, y = make_blobs(n_samples, \n                  centers=4, \n                  n_features=2,\n                  random_state=0)\n\n\n\n\n# Add noise column to predictor variables\nnewcol = np.transpose([ns*np.random.randn(n_samples)])\nXn = np.concatenate((X, newcol), axis = 1)\n\n\n\n\n# Scale if desired\nif sc == True:\n    Xn = scale(Xn)\n\n\n\n\n# Train model and test after splitting\nXn_train, Xn_test, y_train, y_test = train_test_split(Xn, y, test_size=0.2, random_state=42)\nlr = linear_model.LogisticRegression()\nlr_model = lr.fit(Xn_train, y_train)\nprint('logistic regression score for test set: %f' % lr_model.score(Xn_test, y_test))\n\n\n\n\nlogistic regression score for test set: 0.942500",
            "title": "k-NN, Linear regression, Logit, Scaling, Centering, Noise"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nearest-neighbours",
            "text": "",
            "title": "k-Nearest Neighbours"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#measure-performance",
            "text": "Accuracy  is the default scoring method for both   k-Nearest Neighbours and  logistic regression.    \\text{Accuracy}=\\frac{\\text{Number of Correct Predictions}}{\\text{Total Number of Predictions}}   Accuracy is commonly defined for binary classification problems in terms of true positives & false negatives. It can also be defined in terms of a  confusion matrix .   Other measures  of model performance are derived from the confusion matrix:  precision  (true positives divided by the number of true & false positives) and  recall  (number of true positives divided by the number of true positives plus the number of false negatives).   The  F1-score  is the harmonic mean of the precision and the recall.",
            "title": "Measure performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#train-test-split-and-performance-in-practice",
            "text": "The rule of thumb is to use approximately    80% of the data for training (train set) and  20% for testing (test set).   from sklearn.cross_validation import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.2, \n                                                    random_state=42)  # the k-NN model\nfrom sklearn import neighbors, linear_model\n\nknn = neighbors.KNeighborsClassifier(n_neighbors = 5)\nknn_model_1 = knn.fit(X_train, y_train)  print('k-NN score for test set: %f' % knn_model_1.score(X_test, y_test))\nprint('k-NN score for training set: %f' % knn_model_1.score(X_train, y_train))  k-NN score for test set: 0.612500\nk-NN score for training set: 0.774042  The accuracy, more specifically the test accuracy, is not great.  Let us print out all the  other  performance measures for the test set.  from sklearn.metrics import classification_report\n\ny_true, y_pred = y_test, knn_model_1.predict(X_test)\nprint(classification_report(y_true, y_pred))               precision    recall  f1-score   support\n\n      False       0.66      0.64      0.65       179\n       True       0.56      0.57      0.57       141\n\navg / total       0.61      0.61      0.61       320  Other  performance measures for the train set.  y_true, y_pred = y_train, knn_model_1.predict(X_train)\nprint(classification_report(y_true, y_pred))               precision    recall  f1-score   support\n\n      False       0.80      0.76      0.78       676\n       True       0.75      0.79      0.77       603\n\navg / total       0.78      0.77      0.77      1279  These underperformances might come from the spread in the variables. The range of each variable is different; some are wider.",
            "title": "Train-test split and performance in practice"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#preprocessing-scaling-and-centering-the-data",
            "text": "Preprocessing happens before running any model, such as a regression (predicting a continuous variable) or a classification (predicting a discrete variable) using one or another model (k-NN, logistic, decision tree, random forests etc.).  For numerical variables, it is common to either normalize or standardize the data.  Normalization :  scaling  a dataset so that its minimum is 0 and its maximum 1.   x_{normalized} = \\frac{x-x_{min}}{x_{max}-x_{min}}   Stardardization :  centering  the data around 0 and to scale with respect to the standard deviation.   x_{standardized} = \\frac{x-\\mu}{\\sigma}   where  \\mu  and  \\sigma  are the mean and standard deviation of the dataset.  There are other transformatoions, such as the log transformation or the Box-Cox transformation, to make the data look more Gaussian or a normally distributed.",
            "title": "Preprocessing: scaling and centering the data"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nn-scaling-in-practice",
            "text": "",
            "title": "k-NN: scaling in practice"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data",
            "text": "print(X)  [[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ]\n [  7.8     0.88    0.    ...,   3.2     0.68    9.8  ]\n [  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ]\n ..., \n [  6.3     0.51    0.13  ...,   3.42    0.75   11.   ]\n [  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ]\n [  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]  from sklearn.preprocessing import scale\n\n# minimum is 0 and its maximum 1\nXs = scale(X)\nprint(Xs)  [[-0.52835961  0.96187667 -1.39147228 ...,  1.28864292 -0.57920652\n  -0.96024611]\n [-0.29854743  1.96744245 -1.39147228 ..., -0.7199333   0.1289504\n  -0.58477711]\n [-0.29854743  1.29706527 -1.18607043 ..., -0.33117661 -0.04808883\n  -0.58477711]\n ..., \n [-1.1603431  -0.09955388 -0.72391627 ...,  0.70550789  0.54204194\n   0.54162988]\n [-1.39015528  0.65462046 -0.77526673 ...,  1.6773996   0.30598963\n  -0.20930812]\n [-1.33270223 -1.21684919  1.02199944 ...,  0.51112954  0.01092425\n   0.54162988]]",
            "title": "Scale the data"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#run-the-k-nn",
            "text": "from sklearn.cross_validation import train_test_split\n\n# split\n# 80% of the data for training (train set)\n# 20% for testing (test set)\nXs_train, Xs_test, y_train, y_test = train_test_split(Xs,\n                                                      y,\n                                                      test_size=0.2,\n                                                      random_state=42)  # Run\nknn_model_2 = knn.fit(Xs_train, y_train)",
            "title": "Run the k-NN"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#measure-the-performance",
            "text": "print('k-NN score for test set: %f' % knn_model_2.score(Xs_test, y_test))\nprint('k-NN score for training set: %f' % knn_model_2.score(Xs_train, y_train))  k-NN score for test set: 0.712500\nk-NN score for training set: 0.814699  y_true, y_pred = y_test, knn_model_2.predict(Xs_test)\n\n# Test set\nprint(classification_report(y_true, y_pred))               precision    recall  f1-score   support\n\n      False       0.72      0.79      0.75       179\n       True       0.70      0.62      0.65       141\n\navg / total       0.71      0.71      0.71       320  y_true, y_pred = y_train, knn_model_2.predict(Xs_train)\n\n# Train set\nprint(classification_report(y_true, y_pred))               precision    recall  f1-score   support\n\n      False       0.80      0.86      0.83       676\n       True       0.83      0.77      0.80       603\n\navg / total       0.82      0.81      0.81      1279  Normalization-scaling improves the performance compare to the previous  classification_report .",
            "title": "Measure the performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nn-recap",
            "text": "",
            "title": "k-NN Recap"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#without-scaling",
            "text": "# Set sc = False \n# Do not scale the features \nsc = False\n# Set the number of k in k-NN\nnk = 5\n\n# Load data \ndf = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';') \n# Drop target variable \nX = df.drop('quality' , 1).values\n\n# Scale, if desired \nif sc == True: \n  X = scale(X) \n\n# Target value \ny1 = df['quality'].values # original target variable \n# New target variable: is the rating <= 5?\ny = y1 <= 5 \n\n# Split (80/20) the data into a test set and a train set\n# X_train, X_test, y_train, y_test \nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.2,\n                                                    random_state=42) \n\n# Train the k-NN model\nknn = neighbors.KNeighborsClassifier(n_neighbors = nk)\nknn_model = knn.fit(X_train, y_train)\n\n# Print performance on the test set \nprint('k-NN accuracy for test set: %f' % knn_model.score(X_test, y_test))\ny_true, y_pred = y_test, knn_model.predict(X_test) \nprint(classification_report(y_true, y_pred))  k-NN accuracy for test set: 0.612500\n             precision    recall  f1-score   support\n\n      False       0.66      0.64      0.65       179\n       True       0.56      0.57      0.57       141\n\navg / total       0.61      0.61      0.61       320",
            "title": "Without scaling"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#with-scaling",
            "text": "# Set sc = True \n# to scale the features \nsc = True\n# Set the number of k in k-NN\nnk = 5\n\n# Load data \ndf = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';') \n# Drop target variable \nX = df.drop('quality' , 1).values\n\n# Scale, if desired \nif sc == True: \n  X = scale(X) \n\n# Target value \ny1 = df['quality'].values # original target variable \n# New target variable: is the rating <= 5?\ny = y1 <= 5 \n\n# Split (80/20) the data into a test set and a train set\n# X_train, X_test, y_train, y_test \nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.2,\n                                                    random_state=42) \n\n# Train the k-NN model\nknn = neighbors.KNeighborsClassifier(n_neighbors = nk)\nknn_model = knn.fit(X_train, y_train)\n\n# Print performance on the test set \nprint('k-NN accuracy for test set: %f' % knn_model.score(X_test, y_test))\ny_true, y_pred = y_test, knn_model.predict(X_test) \nprint(classification_report(y_true, y_pred))  k-NN accuracy for test set: 0.712500\n             precision    recall  f1-score   support\n\n      False       0.72      0.79      0.75       179\n       True       0.70      0.62      0.65       141\n\navg / total       0.71      0.71      0.71       320",
            "title": "With scaling"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#linear-regression",
            "text": "Before addressing an alternative to k-NN, the logistic regression or Logit, let us briefly review the linear regresion with a different dataset.  # Import necessary packages\n%pylab inline\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# set the style\nplt.style.use('ggplot')\n\n# Import nmore packages\nfrom sklearn import datasets\nfrom sklearn import linear_model\nimport numpy as np  Populating the interactive namespace from numpy and matplotlib  # Load the data\n# The data is part of the scikit-learn module\nboston = datasets.load_boston()\nyb = boston.target.reshape(-1, 1)\nXb = boston['data'][:,5].reshape(-1, 1)\n\nprint(yb[:10])  [[ 24. ]\n [ 21.6]\n [ 34.7]\n [ 33.4]\n [ 36.2]\n [ 28.7]\n [ 22.9]\n [ 27.1]\n [ 16.5]\n [ 18.9]]  print(Xb[:10])  [[ 6.575]\n [ 6.421]\n [ 7.185]\n [ 6.998]\n [ 7.147]\n [ 6.43 ]\n [ 6.012]\n [ 6.172]\n [ 5.631]\n [ 6.004]]  # Plot data\nplt.scatter(Xb,yb)\nplt.ylabel('value of house /1000 ($)')\nplt.xlabel('number of rooms')  <matplotlib.text.Text at 0x7f3681ae90b8>   # Create linear regression object\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit( Xb, yb)  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)  # Plot outputs\nplt.scatter(Xb, yb,  color='black')\nplt.plot(Xb, regr.predict(Xb), color='blue',\n         linewidth=3)\nplt.show()",
            "title": "Linear regression"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#logistic-regression-logit",
            "text": "",
            "title": "Logistic regression (Logit)"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#with-random-numbers",
            "text": "# Synthesize data\nX1 = np.random.normal(size=150)\ny1 = (X1 > 0).astype(np.float)\nX1[X1 > 0] *= 4\nX1 += .3 * np.random.normal(size=150)\nX1 = X1.reshape(-1, 1)  # Run the classifier\nclf = linear_model.LogisticRegression()\nclf.fit(X1, y1)  LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)  X1[:10]  array([[-0.74466839],\n       [ 0.47335714],\n       [-1.94951938],\n       [ 0.12078443],\n       [-1.62121705],\n       [-2.23684396],\n       [ 7.66984914],\n       [-0.31941781],\n       [-1.07205326],\n       [ 0.85413978]])  # Order X1\nX1_ordered = sorted(X1, reverse=False)\n\nX1_ordered[:10]  [array([-3.29826361]),\n array([-2.76292445]),\n array([-2.23684396]),\n array([-1.96629089]),\n array([-1.94951938]),\n array([-1.87501025]),\n array([-1.83321548]),\n array([-1.73611093]),\n array([-1.62121705]),\n array([-1.61885181])]  # Plot the result\nplt.scatter(X1.ravel(), y1, color='black', zorder=20 , alpha = 0.5)\nplt.plot(X1_ordered, clf.predict_proba(X1_ordered)[:,1], color='blue' , linewidth = 3)\nplt.ylabel('target variable')\nplt.xlabel('predictor variable')\nplt.show()",
            "title": "With random numbers"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#with-the-wine-dataset",
            "text": "# Load data\ndf = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';')\n\ndf.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       fixed acidity \n       volatile acidity \n       citric acid \n       residual sugar \n       chlorides \n       free sulfur dioxide \n       total sulfur dioxide \n       density \n       pH \n       sulphates \n       alcohol \n       quality \n     \n   \n   \n     \n       0 \n       7.4 \n       0.70 \n       0.00 \n       1.9 \n       0.076 \n       11.0 \n       34.0 \n       0.9978 \n       3.51 \n       0.56 \n       9.4 \n       5 \n     \n     \n       1 \n       7.8 \n       0.88 \n       0.00 \n       2.6 \n       0.098 \n       25.0 \n       67.0 \n       0.9968 \n       3.20 \n       0.68 \n       9.8 \n       5 \n     \n     \n       2 \n       7.8 \n       0.76 \n       0.04 \n       2.3 \n       0.092 \n       15.0 \n       54.0 \n       0.9970 \n       3.26 \n       0.65 \n       9.8 \n       5 \n     \n      # Drop target variable\nX = df.drop('quality' , 1).values\n\n# Print the array\nprint(X)  [[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ]\n [  7.8     0.88    0.    ...,   3.2     0.68    9.8  ]\n [  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ]\n ..., \n [  6.3     0.51    0.13  ...,   3.42    0.75   11.   ]\n [  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ]\n [  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]  The last column is gone.  y1 = df['quality'].values\n\n# Print the single-row array\nprint(y1)  [5 5 5 ..., 6 5 6]  df.shape  (1599, 12)  # plot the other columns or variables\npd.DataFrame.hist(df, figsize = [15,15]);\n\nplt.show() # facultative in Jypyter   Let us turn it into a two-category variable consisting of \u2018good\u2019 (rating > 5) & \u2018bad\u2019 (rating <= 5) qualities.  # is the rating <= 5 ?\ny = y1 <= 5\nprint(y)  [ True  True  True ..., False  True False]  from sklearn.cross_validation import train_test_split\n\n# split\n# 80% of the data for training (train set)\n# 20% for testing (test set)\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.2,\n                                                    random_state=42)  from sklearn import linear_model\n\n# Initial logistic regression model\nlr = linear_model.LogisticRegression()  # Fit the model\nlr = lr.fit(X_train, y_train)\ny_true, y_pred = y_train, lr.predict(X_train)\n\n# Evaluate the train set\nprint('Logistic Regression score for train set: %f' % lr.score(X_train, y_train))  Logistic Regression score for train set: 0.752932  print(classification_report(y_true, y_pred))               precision    recall  f1-score   support\n\n      False       0.77      0.75      0.76       676\n       True       0.73      0.75      0.74       603\n\navg / total       0.75      0.75      0.75      1279  from sklearn.metrics import classification_report\n\n# Use the test set\ny_true, y_pred = y_test, lr.predict(X_test)\n\n# Evaluate the test set\nprint('Logistic Regression score for test set: %f' % lr.score(X_test, y_test))  Logistic Regression score for test set: 0.740625  print(classification_report(y_true, y_pred))               precision    recall  f1-score   support\n\n      False       0.78      0.74      0.76       179\n       True       0.69      0.74      0.71       141\n\navg / total       0.74      0.74      0.74       320  Note : the logistic regression performs better than k-NN without scaling.",
            "title": "With the Wine dataset"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data_1",
            "text": "print(X)  [[  7.4     0.7     0.    ...,   3.51    0.56    9.4  ]\n [  7.8     0.88    0.    ...,   3.2     0.68    9.8  ]\n [  7.8     0.76    0.04  ...,   3.26    0.65    9.8  ]\n ..., \n [  6.3     0.51    0.13  ...,   3.42    0.75   11.   ]\n [  5.9     0.645   0.12  ...,   3.57    0.71   10.2  ]\n [  6.      0.31    0.47  ...,   3.39    0.66   11.   ]]  from sklearn.preprocessing import scale\n\nXs = scale(X)\nprint(Xs)  [[-0.52835961  0.96187667 -1.39147228 ...,  1.28864292 -0.57920652\n  -0.96024611]\n [-0.29854743  1.96744245 -1.39147228 ..., -0.7199333   0.1289504\n  -0.58477711]\n [-0.29854743  1.29706527 -1.18607043 ..., -0.33117661 -0.04808883\n  -0.58477711]\n ..., \n [-1.1603431  -0.09955388 -0.72391627 ...,  0.70550789  0.54204194\n   0.54162988]\n [-1.39015528  0.65462046 -0.77526673 ...,  1.6773996   0.30598963\n  -0.20930812]\n [-1.33270223 -1.21684919  1.02199944 ...,  0.51112954  0.01092425\n   0.54162988]]",
            "title": "Scale the data"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#run-the-logit-and-measure-the-performance",
            "text": "from sklearn.cross_validation import train_test_split\n\n# Split 80/20\nXs_train, Xs_test, y_train, y_test = train_test_split(Xs,\n                                                      y,\n                                                      test_size=0.2,\n                                                      random_state=42)  # Run the logistic regression model\nlr_2 = lr.fit(Xs_train, y_train)  # Fit the model\ny_true, y_pred = y_train, lr_2.predict(Xs_train)\n\n# Evaluate the train set\nprint('Logistic Regression score for train set: %f' % lr_2.score(Xs_train, y_train))  Logistic Regression score for train set: 0.752150  print(classification_report(y_true, y_pred))               precision    recall  f1-score   support\n\n      False       0.77      0.76      0.76       676\n       True       0.73      0.75      0.74       603\n\navg / total       0.75      0.75      0.75      1279  # Use the test set\ny_true, y_pred = y_test, lr_2.predict(Xs_test)\n\n# Evaluate the test set\nprint('Logistic Regression score for test set: %f' % lr_2.score(Xs_test, y_test))  Logistic Regression score for test set: 0.740625  print(classification_report(y_true, y_pred))               precision    recall  f1-score   support\n\n      False       0.79      0.74      0.76       179\n       True       0.69      0.74      0.72       141\n\navg / total       0.74      0.74      0.74       320  This is very interesting! The performance of logistic regression did not improve with data scaling.  Predictor variables with large ranges that do not effect the target variable, a regression algorithm will make the corresponding coefficients small so that they do not effect predictions so much.",
            "title": "Run the Logit and measure the performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#logit-recap",
            "text": "",
            "title": "Logit Recap"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#without-scaling_1",
            "text": "# Set sc = False\n# do not scale the features \nsc = False \n\n# Load the data \ndf = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv ' , sep = ';') \nX = df.drop('quality' , 1).values # drop target variable \n\n# Scale, if desired \nif sc == True: \n  X = scale(X) \n\n# Target value \ny1 = df['quality'].values # original target variable \ny = y1 <= 5  # new target variable: is the rating <= 5? \n\n# Split (80/20) the data into a test set and a train\n# X_train, X_test, y_train, y_test\ntrain_test_split(X, y, test_size=0.2, random_state=42) \n\n# Train logistic regression model \nlr = linear_model.LogisticRegression() \nlr = lr.fit(X_train, y_train) \n\n# Print performance on the test set\nprint('Logistic Regression score for training set: %f' % lr.score(X_train, y_train)) \ny_true, y_pred = y_test, lr.predict(X_test) \nprint(classification_report(y_true, y_pred))  Logistic Regression score for training set: 0.752932\n             precision    recall  f1-score   support\n\n      False       0.78      0.74      0.76       179\n       True       0.69      0.74      0.71       141\n\navg / total       0.74      0.74      0.74       320",
            "title": "Without scaling"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#noise-and-scaling",
            "text": "The noisier the symthesized data, the more important scaling will be.  Measurements can be in meters and and miles, with small or large ranges. If we scale the data, they end up being the same.  scikit-learn\u2019s  make_blobs  function to generate 2000 data points that are in 4 clusters (each data point has 2 predictor variables and 1 target variable).  %pylab inline  Populating the interactive namespace from numpy and matplotlib  # Generate some clustered data (blobs!)\nimport numpy as np\nfrom sklearn.datasets.samples_generator import make_blobs\n\nn_samples=2000\nX, y = make_blobs(n_samples, centers=4, n_features=2, random_state=0)\n\nprint(X)  [[-0.46530384  1.73299482]\n [-0.33963733  3.84220272]\n [ 2.25309569  0.99541446]\n ..., \n [ 1.03616476  4.09126428]\n [-0.5901088   3.68821314]\n [ 2.30405277  4.20250584]]  print(y)  [2 0 1 ..., 0 2 0]",
            "title": "Noise and scaling"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#plotting-the-synthesized-data",
            "text": "Each axis is a predictor variable and the colour is a key to the target variable  All possible target variables are equally represented. In this case (or even if they are approximately equally represented), we say that the class y is balanced.  import matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\n\nplt.figure(figsize=(20,5));\nplt.subplot(1, 2, 1 );\nplt.scatter(X[:,0] , X[:,1],  c = y, alpha = 0.7);\nplt.subplot(1, 2, 2);\nplt.hist(y)\n\nplt.show()   Plot histograms of the features.  import pandas as pd\n\n# Convert to a DataFrame\ndf = pd.DataFrame(X)\n\n# Plot it\npd.DataFrame.hist(df, figsize=(20,5))  array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f366d3dbba8>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x7f366d30ca58>]], dtype=object)   Split into test & train sets, and plot both sets (train set > test set; 80/20).  from sklearn.cross_validation import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.2,\n                                                    random_state=42)  plt.figure(figsize=(20,5));\nplt.subplot(1, 2, 1 );\nplt.title('training set')\nplt.scatter(X_train[:,0] , X_train[:,1],  c = y_train, alpha = 0.7);\nplt.subplot(1, 2, 2);\nplt.scatter(X_test[:,0] , X_test[:,1],  c = y_test, alpha = 0.7);\nplt.title('test set')\n\nplt.show()",
            "title": "Plotting the synthesized data"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#k-nearest-neighbours_1",
            "text": "Let\u2019s instantiate a k-Nearest Neighbours classifier and train it on our train set.  from sklearn import neighbors, linear_model\n\nknn = neighbors.KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)  Fit the  knn_model  to the test set and compute the accuracy.  knn_model.score(X_test, y_test)  0.93500000000000005  print('k-NN score for test set: %f' % knn_model.score(X_test, y_test))  k-NN score for test set: 0.935000  Check out a variety of other metrics.  from sklearn.metrics import classification_report\n\ny_true, y_pred = y_test, knn_model.predict(X_test)\nprint(classification_report(y_true, y_pred))               precision    recall  f1-score   support\n\n          0       0.87      0.90      0.88       106\n          1       0.98      0.93      0.95       102\n          2       0.90      0.92      0.91       100\n          3       1.00      1.00      1.00        92\n\navg / total       0.94      0.94      0.94       400  Re-fit  knn_model  to the train set and compute the accuracy.  print('k-NN score for train set: %f' % knn_model.score(X_train, y_train))  k-NN score for train set: 0.941875  from sklearn.metrics import classification_report\n\ny_true, y_pred = y_train, knn_model.predict(X_train)\nprint(classification_report(y_true, y_pred))               precision    recall  f1-score   support\n\n          0       0.88      0.90      0.89       394\n          1       0.97      0.96      0.96       398\n          2       0.94      0.93      0.93       400\n          3       0.99      0.98      0.98       408\n\navg / total       0.94      0.94      0.94      1600",
            "title": "k-Nearest Neighbours"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data-run-the-k-nn-and-measure-the-performance",
            "text": "print(X)  [[-0.46530384  1.73299482]\n [-0.33963733  3.84220272]\n [ 2.25309569  0.99541446]\n ..., \n [ 1.03616476  4.09126428]\n [-0.5901088   3.68821314]\n [ 2.30405277  4.20250584]]  from sklearn.preprocessing import scale\n\nXs = scale(X)\nprint(Xs)  [[-0.26508542 -0.82638395]\n [-0.19594894 -0.0519305 ]\n [ 1.23046484 -1.09720678]\n ..., \n [ 0.5609601   0.03951927]\n [-0.33374791 -0.10847199]\n [ 1.25849931  0.08036466]]  from sklearn.cross_validation import train_test_split\n\nXs_train, Xs_test, y_train, y_test = train_test_split(Xs,\n                                                      y,\n                                                      test_size=0.2,\n                                                      random_state=42)  plt.figure(figsize=(20,5));\n\nplt.subplot(1, 2, 1 );\nplt.scatter(Xs_train[:,0] , Xs_train[:,1],  c = y_train, alpha = 0.7);\nplt.title('scaled training set')\n\nplt.subplot(1, 2, 2);\nplt.scatter(Xs_test[:,0] , Xs_test[:,1],  c = y_test, alpha = 0.7);\nplt.title('scaled test set')\n\nplt.show()   knn_model_s = knn.fit(Xs_train, y_train)\n\nprint('k-NN score for test set: %f' % knn_model_s.score(Xs_test, y_test))  k-NN score for test set: 0.935000  It doesn\u2019t perform any better with scaling.  This is most likely because both features were already around the same range.",
            "title": "Scale the data, run the k-NN, and measure the performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#add-noise-to-the-signal",
            "text": "Adding a third variable of Gaussian noise with mean 0 and variable standard deviation  \\sigma . We call  \\sigma  the strength of the noise and we see that the stronger the noise, the worse the performance of k-Nearest Neighbours.  # Strength of noise term\nns = 10**(3)\n\n# Add noise column to predictor variables\nnewcol = np.transpose([ns*np.random.randn(n_samples)])\nXn = np.concatenate((X, newcol), axis = 1)\n\nprint(Xn)  [[ -4.65303843e-01   1.73299482e+00  -9.41949646e+01]\n [ -3.39637332e-01   3.84220272e+00  -1.00446506e+03]\n [  2.25309569e+00   9.95414462e-01   2.95697211e+02]\n ..., \n [  1.03616476e+00   4.09126428e+00  -1.16020635e+02]\n [ -5.90108797e-01   3.68821314e+00   5.60244701e+02]\n [  2.30405277e+00   4.20250584e+00  -8.97600798e+02]]  Plot the 3D data.  from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=(15,10))\nax = fig.add_subplot(111, projection='3d' , alpha = 0.5)\nax.scatter(Xn[:,0], Xn[:,1], Xn[:,2], c = y)  <mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7f366d409cf8>",
            "title": "Add noise to the signal"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#run-the-k-nn-and-measure-the-performance",
            "text": "# Split into train-test sets\nXn_train, Xn_test, y_train, y_test = train_test_split(Xn,\n                                                      y, \n                                                      test_size=0.2, \n                                                      random_state=42)  # Run the model\nknn = neighbors.KNeighborsClassifier()\nknn_model = knn.fit(Xn_train, y_train)  # Evaluate\nprint('k-NN score for test set: %f' % knn_model.score(Xn_test, y_test))  k-NN score for test set: 0.337500  Horrible!",
            "title": "Run the k-NN and measure the performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#scale-the-data-add-noise-run-the-k-nn-and-measure-the-performance",
            "text": "# Scale\nXns = scale(Xn)\n\nprint(Xns)  [[-0.26508542 -0.82638395 -0.07164275]\n [-0.19594894 -0.0519305  -0.98584539]\n [ 1.23046484 -1.09720678  0.31993383]\n ..., \n [ 0.5609601   0.03951927 -0.09356271]\n [-0.33374791 -0.10847199  0.58562421]\n [ 1.25849931  0.08036466 -0.87851945]]  # Apply noise\ns = int(.2*n_samples)\nXns_train = Xns[s:]\ny_train = y[s:]\nXns_test = Xns[:s]\ny_test = y[:s]\n\n# Run the model\nknn = neighbors.KNeighborsClassifier()\nknn_models = knn.fit(Xns_train, y_train)\n\n# Evaluate\nprint('k-NN score for test set: %f' % knn_models.score(Xns_test, y_test))  k-NN score for test set: 0.917500  After scaling the data, the model performs nearly as well as were there no noise introduced.",
            "title": "Scale the data, add noise, run the k-NN, and measure the performance"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#noise-strength-vs-accuracy-and-the-need-for-scaling",
            "text": "How the noise strength can effect model accuracy?  Create a function to split the data and run the model.   Use the function in a loop.  def accu( X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X,\n                                                        y,\n                                                        test_size=0.2,\n                                                        random_state=42)\n\n    knn = neighbors.KNeighborsClassifier()\n    knn_model = knn.fit(X_train, y_train)\n\n    return(knn_model.score(X_test, y_test))  # Set the variables\nnoise = [10**i for i in np.arange(0,6)]\nA1 = np.zeros(len(noise))\nA2 = np.zeros(len(noise))\ncount = 0  print(noise)  [1, 10, 100, 1000, 10000, 100000]  print(A1)\nprint(A2)  [ 0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.]  # Run the loop\nfor ns in noise:\n    newcol = np.transpose([ns*np.random.randn(n_samples)])\n    Xn = np.concatenate((X, newcol), axis = 1)\n    Xns = scale(Xn)\n    A1[count] = accu( Xn, y)\n    A2[count] = accu( Xns, y)\n    count += 1  # Plot the results\nplt.scatter( noise, A1 )\nplt.plot( noise, A1, label = 'unscaled', linewidth = 2)\nplt.scatter( noise, A2 , c = 'r')\nplt.plot( noise, A2 , label = 'scaled', linewidth = 2)\nplt.xscale('log')\nplt.xlabel('Noise strength')\nplt.ylabel('Accuracy')\nplt.legend(loc=3);   print(A1)\nprint(A2)  [ 0.9225  0.9175  0.8025  0.3275  0.22    0.2525]\n[ 0.91    0.9175  0.9325  0.9075  0.9325  0.92  ]  The more noise there is in the nuisance variable, the more important it is to scale the data for the k-NN model.   More noise, more scaling.",
            "title": "Noise strength vs. accuracy (and the need for scaling)"
        },
        {
            "location": "/k-NN_Linear_regression_Logit_Scaling_Centering_Noise/#logit-repeat-the-k-nn-procedure",
            "text": "# Change the exponent of 10 to alter the amount of noise\nns = 10**(3) # Strength of noise term\n\n# Set sc = True if we want to scale the features\nsc = True  # Import packages\nimport numpy as np\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn import neighbors, linear_model\nfrom sklearn.preprocessing import scale\nfrom sklearn.datasets.samples_generator import make_blobs  # Generate some data\nn_samples=2000\nX, y = make_blobs(n_samples, \n                  centers=4, \n                  n_features=2,\n                  random_state=0)  # Add noise column to predictor variables\nnewcol = np.transpose([ns*np.random.randn(n_samples)])\nXn = np.concatenate((X, newcol), axis = 1)  # Scale if desired\nif sc == True:\n    Xn = scale(Xn)  # Train model and test after splitting\nXn_train, Xn_test, y_train, y_test = train_test_split(Xn, y, test_size=0.2, random_state=42)\nlr = linear_model.LogisticRegression()\nlr_model = lr.fit(Xn_train, y_train)\nprint('logistic regression score for test set: %f' % lr_model.score(Xn_test, y_test))  logistic regression score for test set: 0.942500",
            "title": "Logit (Repeat the k-NN procedure)"
        },
        {
            "location": "/Time_Series_Analysis/",
            "text": "CONTENT\n\n\nImporting Packages and the Data\n\n\nWrangle the Data\n\n\nExploratory Data Analysis (EDA)\n\n\nTrends and Seasonality in Time Series\n\n\nIdentifying Trends in Time Series\n\n\nSeasonal Patterns in Time Series\n\n\nFirst-order differencing\n\n\n\n\n\n\nPeriodicity and Autocorrelation\n\n\nA Word about Correlation\n\n\nPeriodicity and Autocorrelation (continued)\n\n\nAutocorrelation\n\n\n\n\n\n\n\n\n\n\nForecasts, ARIMA\u2026\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nGet Google Trends data of keywords such as \u2018diet\u2019 and \u2018gym\u2019 and see how they vary over time while learning about trends and seasonality in time series data.\n\n\n\n\nSource the data\n\n\nWrangle the data\n\n\nExploratory Data Analysis\n\n\nTrends and seasonality in time series data\n\n\nIdentifying Trends\n\n\nSeasonal patterns\n\n\nFirst Order Differencing\n\n\nPeriodicity and Autocorrelation\n\n\n\n\n\n\n\n\n\n\n\n\nImporting Packages and the Data\n\u00b6\n\n\nThe data are from \nGoogle Trends\n.\n\n\n# Import the packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Switch to the Seaborn defaults\nsns.set()\n\n\n\n\n# Import the data\n# Check out the first rows\ndf = pd.read_csv('multiTimeline.csv', skiprows=1)\ndf.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nMonth\n\n      \ndiet: (Worldwide)\n\n      \ngym: (Worldwide)\n\n      \nfinance: (Worldwide)\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2004-01\n\n      \n100\n\n      \n31\n\n      \n48\n\n    \n\n    \n\n      \n1\n\n      \n2004-02\n\n      \n75\n\n      \n26\n\n      \n49\n\n    \n\n    \n\n      \n2\n\n      \n2004-03\n\n      \n67\n\n      \n24\n\n      \n47\n\n    \n\n  \n\n\n\n\n\n\n\n# Check out the data types, number of rows and more\ndf.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 168 entries, 0 to 167\nData columns (total 4 columns):\nMonth                   168 non-null object\ndiet: (Worldwide)       168 non-null int64\ngym: (Worldwide)        168 non-null int64\nfinance: (Worldwide)    168 non-null int64\ndtypes: int64(3), object(1)\nmemory usage: 5.3+ KB\n\n\n\nWrangle the Data\n\u00b6\n\n\nRename the columns of the DataFrame \ndf\n so that they have no whitespaces in them.\n\n\ndf.columns = ['month', 'diet', 'gym', 'finance']\ndf.head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nmonth\n\n      \ndiet\n\n      \ngym\n\n      \nfinance\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2004-01\n\n      \n100\n\n      \n31\n\n      \n48\n\n    \n\n    \n\n      \n1\n\n      \n2004-02\n\n      \n75\n\n      \n26\n\n      \n49\n\n    \n\n    \n\n      \n2\n\n      \n2004-03\n\n      \n67\n\n      \n24\n\n      \n47\n\n    \n\n    \n\n      \n3\n\n      \n2004-04\n\n      \n70\n\n      \n22\n\n      \n48\n\n    \n\n    \n\n      \n4\n\n      \n2004-05\n\n      \n72\n\n      \n22\n\n      \n43\n\n    \n\n  \n\n\n\n\n\n\n\nTurn the \nmonth\n column into a \nDateTime\n data type (vs. \nobject\n).\n\n\ndf.month = pd.to_datetime(df.month)\n\n\n\n\nMake it the index of the DataFrame. Include the \ninplace\n argument when setting the index of the DataFrame \ndf\n so that we alter the original index and set it to the \nmonth\n column.\n\n\ndf.set_index('month', inplace=True)\ndf.head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ndiet\n\n      \ngym\n\n      \nfinance\n\n    \n\n    \n\n      \nmonth\n\n      \n\n      \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n2004-01-01\n\n      \n100\n\n      \n31\n\n      \n48\n\n    \n\n    \n\n      \n2004-02-01\n\n      \n75\n\n      \n26\n\n      \n49\n\n    \n\n    \n\n      \n2004-03-01\n\n      \n67\n\n      \n24\n\n      \n47\n\n    \n\n    \n\n      \n2004-04-01\n\n      \n70\n\n      \n22\n\n      \n48\n\n    \n\n    \n\n      \n2004-05-01\n\n      \n72\n\n      \n22\n\n      \n43\n\n    \n\n  \n\n\n\n\n\n\n\nExploratory Data Analysis (EDA)\n\u00b6\n\n\nUse a built-in \npandas\n visualization method \n.plot()\n to plot the data. Specify the label on the x-axis.\n\n\ndf.plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Year', fontsize=20);\n\n\n\n\n\n\nA value of 100 is the peak popularity for the term. A value of 50 means that the term is half as popular. Likewise a score of 0 means the term was less than 1% as popular as the peak.\n\n\nPlot one column.\n\n\ndf[['diet']].plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Year', fontsize=20);\n\n\n\n\n\n\nTrends and Seasonality in Time Series\n\u00b6\n\n\nIdentifying Trends in Time Series\n\u00b6\n\n\nTake a rolling average to remove the seasonality and see the trend. 12 months for example (before and after each point).\n\n\n# Extract one column, \n# but do not create a Series with df['diet']\ndiet = df[['diet']]\n\n# Chain: rolling, avg, plot\ndiet.rolling(12).mean().plot(figsize=(20,10), linewidth=5, fontsize=20)\n\n# Plot\nplt.xlabel('Year', fontsize=20)\n\n\n\n\n<matplotlib.text.Text at 0x7f3c0630c240>\n\n\n\n\n\n# Another column\ngym = df[['gym']]\n\n# Chain\ngym.rolling(12).mean().plot(figsize=(20,10), linewidth=5, fontsize=20)\n\n# Plot\nplt.xlabel('Year', fontsize=20)\n\n\n\n\n<matplotlib.text.Text at 0x7f3c0da837f0>\n\n\n\n\n\n# Create a new df with both\ndf_rm = pd.concat([diet.rolling(12).mean(), gym.rolling(12).mean()], axis=1)\n\n# Chain\ndf_rm.plot(figsize=(20,10), linewidth=5, fontsize=20)\n\n# Plot\nplt.xlabel('Year', fontsize=20)\n\n\n\n\n<matplotlib.text.Text at 0x7f3c0621c7f0>\n\n\n\n\n\nSeasonal Patterns in Time Series\n\u00b6\n\n\nWe can remove the trend from the time series by subtracting the rolling mean from the original signal, leaving the seasonality only and turning the data into a stationary time series (such as mean and variance don\u2019t change over time). Many time series forecasting methods are based on the assumption that the time series is approximately stationary.\n\n\nAnother way to remove the trend is called \u201cdifferencing\u201d.\n\n\nFirst-order differencing\n\u00b6\n\n\nDifference between one data point and the one before it.\n\n\nSecond-order differencing\n means that we would be looking at the difference between one data point and the two that precede it.\n\n\nMore on differencing\n.\n\n\n# Differencing\ndiet.diff().plot(figsize=(20,10), linewidth=5, fontsize=20)\n\n# Plot\nplt.xlabel('Year', fontsize=20);\n\n\n\n\n\n\nPeriodicity and Autocorrelation\n\u00b6\n\n\nA time series is periodic if it repeats itself at equally spaced intervals, say, every 12 months.\n\n\nYet another way of thinking about this is that the time series is correlated with itself shifted by 12 months. That means that, if we took the time series and moved it 12 months backwards or forwards, it would map onto itself in some way: autocorrelation.\n\n\nA Word about Correlation\n\u00b6\n\n\nfrom sklearn import datasets\n\niris = datasets.load_iris()\n\ndf_iris = pd.DataFrame(data = np.c_[iris['data'], iris['target']],\n                       columns = iris['feature_names'] + ['target'])\ndf_iris.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nsepal length (cm)\n\n      \nsepal width (cm)\n\n      \npetal length (cm)\n\n      \npetal width (cm)\n\n      \ntarget\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n5.1\n\n      \n3.5\n\n      \n1.4\n\n      \n0.2\n\n      \n0.0\n\n    \n\n    \n\n      \n1\n\n      \n4.9\n\n      \n3.0\n\n      \n1.4\n\n      \n0.2\n\n      \n0.0\n\n    \n\n    \n\n      \n2\n\n      \n4.7\n\n      \n3.2\n\n      \n1.3\n\n      \n0.2\n\n      \n0.0\n\n    \n\n  \n\n\n\n\n\n\n\nsns.lmplot(x='sepal length (cm)', y='sepal width (cm)',\n           fit_reg=False, data=df_iris)\n\n\n\n\n<seaborn.axisgrid.FacetGrid at 0x7f3c060fb5f8>\n\n\n\n\n\nsns.lmplot(x='sepal length (cm)', y='sepal width (cm)',\n           fit_reg=True, data=df_iris);\n\n\n\n\n\n\nsns.lmplot(x='sepal length (cm)', y='sepal width (cm)',\n           fit_reg=False, data=df_iris, hue='target')\n\n\n\n\n<seaborn.axisgrid.FacetGrid at 0x7f3c060b7438>\n\n\n\n\n\ndf_iris.corr()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nsepal length (cm)\n\n      \nsepal width (cm)\n\n      \npetal length (cm)\n\n      \npetal width (cm)\n\n      \ntarget\n\n    \n\n  \n\n  \n\n    \n\n      \nsepal length (cm)\n\n      \n1.000000\n\n      \n-0.109369\n\n      \n0.871754\n\n      \n0.817954\n\n      \n0.782561\n\n    \n\n    \n\n      \nsepal width (cm)\n\n      \n-0.109369\n\n      \n1.000000\n\n      \n-0.420516\n\n      \n-0.356544\n\n      \n-0.419446\n\n    \n\n    \n\n      \npetal length (cm)\n\n      \n0.871754\n\n      \n-0.420516\n\n      \n1.000000\n\n      \n0.962757\n\n      \n0.949043\n\n    \n\n    \n\n      \npetal width (cm)\n\n      \n0.817954\n\n      \n-0.356544\n\n      \n0.962757\n\n      \n1.000000\n\n      \n0.956464\n\n    \n\n    \n\n      \ntarget\n\n      \n0.782561\n\n      \n-0.419446\n\n      \n0.949043\n\n      \n0.956464\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\ndf_iris.groupby(['target']).corr()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \n\n      \npetal length (cm)\n\n      \npetal width (cm)\n\n      \nsepal length (cm)\n\n      \nsepal width (cm)\n\n    \n\n    \n\n      \ntarget\n\n      \n\n      \n\n      \n\n      \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n0.0\n\n      \npetal length (cm)\n\n      \n1.000000\n\n      \n0.306308\n\n      \n0.263874\n\n      \n0.176695\n\n    \n\n    \n\n      \npetal width (cm)\n\n      \n0.306308\n\n      \n1.000000\n\n      \n0.279092\n\n      \n0.279973\n\n    \n\n    \n\n      \nsepal length (cm)\n\n      \n0.263874\n\n      \n0.279092\n\n      \n1.000000\n\n      \n0.746780\n\n    \n\n    \n\n      \nsepal width (cm)\n\n      \n0.176695\n\n      \n0.279973\n\n      \n0.746780\n\n      \n1.000000\n\n    \n\n    \n\n      \n1.0\n\n      \npetal length (cm)\n\n      \n1.000000\n\n      \n0.786668\n\n      \n0.754049\n\n      \n0.560522\n\n    \n\n    \n\n      \npetal width (cm)\n\n      \n0.786668\n\n      \n1.000000\n\n      \n0.546461\n\n      \n0.663999\n\n    \n\n    \n\n      \nsepal length (cm)\n\n      \n0.754049\n\n      \n0.546461\n\n      \n1.000000\n\n      \n0.525911\n\n    \n\n    \n\n      \nsepal width (cm)\n\n      \n0.560522\n\n      \n0.663999\n\n      \n0.525911\n\n      \n1.000000\n\n    \n\n    \n\n      \n2.0\n\n      \npetal length (cm)\n\n      \n1.000000\n\n      \n0.322108\n\n      \n0.864225\n\n      \n0.401045\n\n    \n\n    \n\n      \npetal width (cm)\n\n      \n0.322108\n\n      \n1.000000\n\n      \n0.281108\n\n      \n0.537728\n\n    \n\n    \n\n      \nsepal length (cm)\n\n      \n0.864225\n\n      \n0.281108\n\n      \n1.000000\n\n      \n0.457228\n\n    \n\n    \n\n      \nsepal width (cm)\n\n      \n0.401045\n\n      \n0.537728\n\n      \n0.457228\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\nPeriodicity and Autocorrelation (continued)\n\u00b6\n\n\nThe time series again.\n\n\ndf.plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Year', fontsize=20)\n\n\n\n\n<matplotlib.text.Text at 0x7f3c062fd390>\n\n\n\n\n\ndf.corr()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ndiet\n\n      \ngym\n\n      \nfinance\n\n    \n\n  \n\n  \n\n    \n\n      \ndiet\n\n      \n1.000000\n\n      \n-0.100764\n\n      \n-0.034639\n\n    \n\n    \n\n      \ngym\n\n      \n-0.100764\n\n      \n1.000000\n\n      \n-0.284279\n\n    \n\n    \n\n      \nfinance\n\n      \n-0.034639\n\n      \n-0.284279\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\ndiet\n and \ngym\n are negatively correlated. However, from looking at the times series, it looks as though their seasonal components would be positively correlated and their trends negatively correlated. The actual correlation coefficient is actually capturing both of those.\n\n\n# first-order differences\ndf.diff().plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Year', fontsize=20)\n\n\n\n\n<matplotlib.text.Text at 0x7f3c05fcfac8>\n\n\n\n\n\ndiet\n and \ngym\n are incredibly correlated once we remove the trend.\n\n\ndf.diff().corr()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ndiet\n\n      \ngym\n\n      \nfinance\n\n    \n\n  \n\n  \n\n    \n\n      \ndiet\n\n      \n1.000000\n\n      \n0.758707\n\n      \n0.373828\n\n    \n\n    \n\n      \ngym\n\n      \n0.758707\n\n      \n1.000000\n\n      \n0.301111\n\n    \n\n    \n\n      \nfinance\n\n      \n0.373828\n\n      \n0.301111\n\n      \n1.000000\n\n    \n\n  \n\n\n\n\n\n\n\nAutocorrelation\n\u00b6\n\n\nAutocorrelation of the \u2018diet\u2019 series: on the x-axis, we have the lag and on the y-axis, we have how correlated the time series is with itself at that lag.\n\n\nSo, this means that if the original time series repeats itself every two days, we would expect to see a spike in the autocorrelation function at 2 days.\n\n\npd.plotting.autocorrelation_plot(diet)\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7f3c05f587b8>\n\n\n\n\n\nThis is 12 months at which we have this huge peak in correlation. We have another peak at a 24 month interval, where it\u2019s also correlated with itself. We have another peak at 36, but as we move further away, there\u2019s less and less of a correlation.\n\n\nThe dotted lines in the above plot actually tell us about the statistical significance of the correlation.\n\n\nForecasts, ARIMA\u2026\n\u00b6\n\n\nUse ARIMA modeling to make some time series forecasts as to what these search trends will look like over the coming years.",
            "title": "Time Series Analysis"
        },
        {
            "location": "/Time_Series_Analysis/#wrangle-the-data",
            "text": "Rename the columns of the DataFrame  df  so that they have no whitespaces in them.  df.columns = ['month', 'diet', 'gym', 'finance']\ndf.head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       month \n       diet \n       gym \n       finance \n     \n   \n   \n     \n       0 \n       2004-01 \n       100 \n       31 \n       48 \n     \n     \n       1 \n       2004-02 \n       75 \n       26 \n       49 \n     \n     \n       2 \n       2004-03 \n       67 \n       24 \n       47 \n     \n     \n       3 \n       2004-04 \n       70 \n       22 \n       48 \n     \n     \n       4 \n       2004-05 \n       72 \n       22 \n       43 \n     \n      Turn the  month  column into a  DateTime  data type (vs.  object ).  df.month = pd.to_datetime(df.month)  Make it the index of the DataFrame. Include the  inplace  argument when setting the index of the DataFrame  df  so that we alter the original index and set it to the  month  column.  df.set_index('month', inplace=True)\ndf.head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       diet \n       gym \n       finance \n     \n     \n       month \n       \n       \n       \n     \n   \n   \n     \n       2004-01-01 \n       100 \n       31 \n       48 \n     \n     \n       2004-02-01 \n       75 \n       26 \n       49 \n     \n     \n       2004-03-01 \n       67 \n       24 \n       47 \n     \n     \n       2004-04-01 \n       70 \n       22 \n       48 \n     \n     \n       2004-05-01 \n       72 \n       22 \n       43",
            "title": "Wrangle the Data"
        },
        {
            "location": "/Time_Series_Analysis/#exploratory-data-analysis-eda",
            "text": "Use a built-in  pandas  visualization method  .plot()  to plot the data. Specify the label on the x-axis.  df.plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Year', fontsize=20);   A value of 100 is the peak popularity for the term. A value of 50 means that the term is half as popular. Likewise a score of 0 means the term was less than 1% as popular as the peak.  Plot one column.  df[['diet']].plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Year', fontsize=20);",
            "title": "Exploratory Data Analysis (EDA)"
        },
        {
            "location": "/Time_Series_Analysis/#trends-and-seasonality-in-time-series",
            "text": "",
            "title": "Trends and Seasonality in Time Series"
        },
        {
            "location": "/Time_Series_Analysis/#identifying-trends-in-time-series",
            "text": "Take a rolling average to remove the seasonality and see the trend. 12 months for example (before and after each point).  # Extract one column, \n# but do not create a Series with df['diet']\ndiet = df[['diet']]\n\n# Chain: rolling, avg, plot\ndiet.rolling(12).mean().plot(figsize=(20,10), linewidth=5, fontsize=20)\n\n# Plot\nplt.xlabel('Year', fontsize=20)  <matplotlib.text.Text at 0x7f3c0630c240>   # Another column\ngym = df[['gym']]\n\n# Chain\ngym.rolling(12).mean().plot(figsize=(20,10), linewidth=5, fontsize=20)\n\n# Plot\nplt.xlabel('Year', fontsize=20)  <matplotlib.text.Text at 0x7f3c0da837f0>   # Create a new df with both\ndf_rm = pd.concat([diet.rolling(12).mean(), gym.rolling(12).mean()], axis=1)\n\n# Chain\ndf_rm.plot(figsize=(20,10), linewidth=5, fontsize=20)\n\n# Plot\nplt.xlabel('Year', fontsize=20)  <matplotlib.text.Text at 0x7f3c0621c7f0>",
            "title": "Identifying Trends in Time Series"
        },
        {
            "location": "/Time_Series_Analysis/#seasonal-patterns-in-time-series",
            "text": "We can remove the trend from the time series by subtracting the rolling mean from the original signal, leaving the seasonality only and turning the data into a stationary time series (such as mean and variance don\u2019t change over time). Many time series forecasting methods are based on the assumption that the time series is approximately stationary.  Another way to remove the trend is called \u201cdifferencing\u201d.",
            "title": "Seasonal Patterns in Time Series"
        },
        {
            "location": "/Time_Series_Analysis/#first-order-differencing",
            "text": "Difference between one data point and the one before it.  Second-order differencing  means that we would be looking at the difference between one data point and the two that precede it.  More on differencing .  # Differencing\ndiet.diff().plot(figsize=(20,10), linewidth=5, fontsize=20)\n\n# Plot\nplt.xlabel('Year', fontsize=20);",
            "title": "First-order differencing"
        },
        {
            "location": "/Time_Series_Analysis/#periodicity-and-autocorrelation",
            "text": "A time series is periodic if it repeats itself at equally spaced intervals, say, every 12 months.  Yet another way of thinking about this is that the time series is correlated with itself shifted by 12 months. That means that, if we took the time series and moved it 12 months backwards or forwards, it would map onto itself in some way: autocorrelation.",
            "title": "Periodicity and Autocorrelation"
        },
        {
            "location": "/Time_Series_Analysis/#a-word-about-correlation",
            "text": "from sklearn import datasets\n\niris = datasets.load_iris()\n\ndf_iris = pd.DataFrame(data = np.c_[iris['data'], iris['target']],\n                       columns = iris['feature_names'] + ['target'])\ndf_iris.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       sepal length (cm) \n       sepal width (cm) \n       petal length (cm) \n       petal width (cm) \n       target \n     \n   \n   \n     \n       0 \n       5.1 \n       3.5 \n       1.4 \n       0.2 \n       0.0 \n     \n     \n       1 \n       4.9 \n       3.0 \n       1.4 \n       0.2 \n       0.0 \n     \n     \n       2 \n       4.7 \n       3.2 \n       1.3 \n       0.2 \n       0.0 \n     \n      sns.lmplot(x='sepal length (cm)', y='sepal width (cm)',\n           fit_reg=False, data=df_iris)  <seaborn.axisgrid.FacetGrid at 0x7f3c060fb5f8>   sns.lmplot(x='sepal length (cm)', y='sepal width (cm)',\n           fit_reg=True, data=df_iris);   sns.lmplot(x='sepal length (cm)', y='sepal width (cm)',\n           fit_reg=False, data=df_iris, hue='target')  <seaborn.axisgrid.FacetGrid at 0x7f3c060b7438>   df_iris.corr()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       sepal length (cm) \n       sepal width (cm) \n       petal length (cm) \n       petal width (cm) \n       target \n     \n   \n   \n     \n       sepal length (cm) \n       1.000000 \n       -0.109369 \n       0.871754 \n       0.817954 \n       0.782561 \n     \n     \n       sepal width (cm) \n       -0.109369 \n       1.000000 \n       -0.420516 \n       -0.356544 \n       -0.419446 \n     \n     \n       petal length (cm) \n       0.871754 \n       -0.420516 \n       1.000000 \n       0.962757 \n       0.949043 \n     \n     \n       petal width (cm) \n       0.817954 \n       -0.356544 \n       0.962757 \n       1.000000 \n       0.956464 \n     \n     \n       target \n       0.782561 \n       -0.419446 \n       0.949043 \n       0.956464 \n       1.000000 \n     \n      df_iris.groupby(['target']).corr()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       \n       petal length (cm) \n       petal width (cm) \n       sepal length (cm) \n       sepal width (cm) \n     \n     \n       target \n       \n       \n       \n       \n       \n     \n   \n   \n     \n       0.0 \n       petal length (cm) \n       1.000000 \n       0.306308 \n       0.263874 \n       0.176695 \n     \n     \n       petal width (cm) \n       0.306308 \n       1.000000 \n       0.279092 \n       0.279973 \n     \n     \n       sepal length (cm) \n       0.263874 \n       0.279092 \n       1.000000 \n       0.746780 \n     \n     \n       sepal width (cm) \n       0.176695 \n       0.279973 \n       0.746780 \n       1.000000 \n     \n     \n       1.0 \n       petal length (cm) \n       1.000000 \n       0.786668 \n       0.754049 \n       0.560522 \n     \n     \n       petal width (cm) \n       0.786668 \n       1.000000 \n       0.546461 \n       0.663999 \n     \n     \n       sepal length (cm) \n       0.754049 \n       0.546461 \n       1.000000 \n       0.525911 \n     \n     \n       sepal width (cm) \n       0.560522 \n       0.663999 \n       0.525911 \n       1.000000 \n     \n     \n       2.0 \n       petal length (cm) \n       1.000000 \n       0.322108 \n       0.864225 \n       0.401045 \n     \n     \n       petal width (cm) \n       0.322108 \n       1.000000 \n       0.281108 \n       0.537728 \n     \n     \n       sepal length (cm) \n       0.864225 \n       0.281108 \n       1.000000 \n       0.457228 \n     \n     \n       sepal width (cm) \n       0.401045 \n       0.537728 \n       0.457228 \n       1.000000",
            "title": "A Word about Correlation"
        },
        {
            "location": "/Time_Series_Analysis/#periodicity-and-autocorrelation-continued",
            "text": "The time series again.  df.plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Year', fontsize=20)  <matplotlib.text.Text at 0x7f3c062fd390>   df.corr()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       diet \n       gym \n       finance \n     \n   \n   \n     \n       diet \n       1.000000 \n       -0.100764 \n       -0.034639 \n     \n     \n       gym \n       -0.100764 \n       1.000000 \n       -0.284279 \n     \n     \n       finance \n       -0.034639 \n       -0.284279 \n       1.000000 \n     \n      diet  and  gym  are negatively correlated. However, from looking at the times series, it looks as though their seasonal components would be positively correlated and their trends negatively correlated. The actual correlation coefficient is actually capturing both of those.  # first-order differences\ndf.diff().plot(figsize=(20,10), linewidth=5, fontsize=20)\nplt.xlabel('Year', fontsize=20)  <matplotlib.text.Text at 0x7f3c05fcfac8>   diet  and  gym  are incredibly correlated once we remove the trend.  df.diff().corr()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       diet \n       gym \n       finance \n     \n   \n   \n     \n       diet \n       1.000000 \n       0.758707 \n       0.373828 \n     \n     \n       gym \n       0.758707 \n       1.000000 \n       0.301111 \n     \n     \n       finance \n       0.373828 \n       0.301111 \n       1.000000",
            "title": "Periodicity and Autocorrelation (continued)"
        },
        {
            "location": "/Time_Series_Analysis/#autocorrelation",
            "text": "Autocorrelation of the \u2018diet\u2019 series: on the x-axis, we have the lag and on the y-axis, we have how correlated the time series is with itself at that lag.  So, this means that if the original time series repeats itself every two days, we would expect to see a spike in the autocorrelation function at 2 days.  pd.plotting.autocorrelation_plot(diet)  <matplotlib.axes._subplots.AxesSubplot at 0x7f3c05f587b8>   This is 12 months at which we have this huge peak in correlation. We have another peak at a 24 month interval, where it\u2019s also correlated with itself. We have another peak at 36, but as we move further away, there\u2019s less and less of a correlation.  The dotted lines in the above plot actually tell us about the statistical significance of the correlation.",
            "title": "Autocorrelation"
        },
        {
            "location": "/Time_Series_Analysis/#forecasts-arima",
            "text": "Use ARIMA modeling to make some time series forecasts as to what these search trends will look like over the coming years.",
            "title": "Forecasts, ARIMA..."
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/",
            "text": "CONTENT\n\n\nImport the modules and connect to Tweeter\n\n\nRetrieve tweets\n\n\nPerform sentiment analysis\n\n\nAn overview of NLP (with nltk and textblob)\n\n\nApplications\n\n\nQuery Tweeter, generate categorical results, populate a list of dictionaries\n\n\nQuery Tweeter, generate categorical results, populate a dictionary of lists, write files, compute statistics\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nImport the modules and connect to Tweeter\n\u00b6\n\n\nFrom this \nlink\n, analyze sentiments and perform text mining: tokenization, bag words, sentiment value from a lexicon. Psychology and Sociology. Consumer satisfaction. Comments.\n\n\nFind out about \ntweepy\n (Twitter API) and \ntextblob\n. TextBlob stands on the shoulders of NLTK and process textual data. It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification, translation, and more.\n\n\nimport pandas as pd\n\n# store the keys in a file to keep them private\ntwitter_api = pd.read_csv('twitter_api.csv', header=0, sep=',')\n\n\n\n\nimport tweepy\nfrom textblob import TextBlob\n\n# must have a Twitter account, see the video\n\n# authenticate with...\n# api_key\nconsumer_key = twitter_api.get_value(0, 'api_key')\n# api_secret\nconsumer_secret = twitter_api.get_value(0, 'api_secret')\n# access token\naccess_token = twitter_api.get_value(0, 'access_token')\n# access secret\naccess_token_secret = twitter_api.get_value(0, 'access_secret')\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n\n\n\nRetrieve tweets\n\u00b6\n\n\n# retrieve tweets with the API\npublic_tweets = api.search('Climate')\n\nfor tweet in public_tweets:\n    print(tweet.text)\n\n\n\n\nPerform sentiment analysis\n\u00b6\n\n\n# perform sentiment analysis on each tweet\n# -1 < polarity < 1 (negativity vs positivity (sentiment))\n# 0 < subjectivity < 1 (factual vs opinion)\nfor tweet in public_tweets:\n    print(tweet.text)\n    analysis = TextBlob(tweet.text)\n    print(analysis.sentiment)\n    print(\"----------\")\n\n\n\n\n# create a list of dictionaries\n# each dictionary contains a tweet text and user\n# the list bundle up the dictionaries\nsaved_tweets = []\nfor tweet in public_tweets:\n    parsed_tweet = {}\n    parsed_tweet['text'] = tweet.text\n    parsed_tweet['user'] = tweet.user.screen_name\n    saved_tweets.append(parsed_tweet)\n\n\n\n\n# convert the list into a data frame\nsaved_tweets_df = pd.DataFrame(saved_tweets)\n# print the head\nprint(saved_tweets_df.head(3))\n\n\n\n\n# save the data frame into a csv file\nsaved_tweets_df.to_csv('saved_tweets_df.csv')\n\n\n\n\nAn overview of NLP (with \nnltk\n and \ntextblob\n)\n\u00b6\n\n\nMake sure to install the \nnltk\n (with pip or conda) module and then run \npython -m textblob.download_corpora\n.\n\n\n# a comment or an opinion\ncomment = TextBlob(\"I am angry that I never get good players in my pool\")\n\n\n\n\nprint(comment)\n\n\n\n\n# tags are not token\nprint(comment.tags)\n\n\n\n\n# words are like tokens\nprint(comment.words)\n\n\n\n\n# -1 < polarity < 1 (negativity vs positivity (sentiment))\nprint(comment.sentiment.polarity)\n\n\n\n\n# 0 < subjectivity < 1 (factual vs opinion)\nprint(comment.sentiment.subjectivity)\n\n\n\n\n# both\nprint(comment.sentiment)\n\n\n\n\n# a fact\nfact = TextBlob(\"The sun is setting at the moment\")\n\nprint(fact.sentiment)\n\n\n\n\nApplications\n\u00b6\n\n\nQuery Tweeter, generate categorical results, populate a list of dictionaries\n\u00b6\n\n\nPointers:\n\n\n\n\nUse of functions and a class.\n\n\nError-handling authentication.\n\n\nQuery tweets, retweets, etc.\n\n\nGenerate categorical results with sentiment analysis.\n\n\nCreate a list of little dictionaries for parsing and containing tweet data and metadata.\n\n\nError-handling parsing.\n\n\nFilter retweets.\n\n\n\n\nimport os\nimport re\nimport tweepy\nfrom tweepy import OAuthHandler\nfrom textblob import TextBlob\n\n\nclass TwitterClient(object):\n    '''\n    Generic Twitter Class for the App\n    '''\n    def __init__(self, query, retweets_only=False, with_sentiment=False):\n        # keys and tokens from the Twitter Dev Console\n        consumer_key = os.environ['CONSUMER_KEY']\n        consumer_secret = os.environ['CONSUMER_SECRET']\n        access_token = os.environ['ACCESS_TOKEN']\n        access_token_secret = os.environ['ACCESS_TOKEN_SECRET']\n        # Attempt authentication\n        try:\n            self.auth = OAuthHandler(consumer_key, consumer_secret)\n            self.auth.set_access_token(access_token, access_token_secret)\n            self.query = query\n            self.retweets_only = retweets_only\n            self.with_sentiment = with_sentiment\n            self.api = tweepy.API(self.auth)\n            self.tweet_count_max = 100  # To prevent Rate Limiting\n        except:\n            print(\"Error: Authentication Failed\")\n\n    def set_query(self, query=''):\n        self.query = query\n\n    def set_retweet_checking(self, retweets_only='false'):\n        self.retweets_only = retweets_only\n\n    def set_with_sentiment(self, with_sentiment='false'):\n        self.with_sentiment = with_sentiment\n\n    def clean_tweet(self, tweet):\n        return ' '.join(re.sub(\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\/\\/\\S+)\", \" \", tweet).split())\n\n    def get_tweet_sentiment(self, tweet):\n        analysis = TextBlob(self.clean_tweet(tweet))\n        if analysis.sentiment.polarity > 0:\n            return 'positive'\n        elif analysis.sentiment.polarity == 0:\n            return 'neutral'\n        else:\n            return 'negative'\n\n    def get_tweets(self):\n        tweets = []\n\n        try:\n            recd_tweets = self.api.search(q=self.query,\n                                          count=self.tweet_count_max)\n            if not recd_tweets:\n                pass\n            for tweet in recd_tweets:\n                parsed_tweet = {}\n\n                parsed_tweet['text'] = tweet.text\n                parsed_tweet['user'] = tweet.user.screen_name\n\n                if self.with_sentiment == 1:\n                    parsed_tweet['sentiment'] = self.get_tweet_sentiment(tweet.text)\n                else:\n                    parsed_tweet['sentiment'] = 'unavailable'\n\n                if tweet.retweet_count > 0 and self.retweets_only == 1:\n                    if parsed_tweet not in tweets:\n                        tweets.append(parsed_tweet)\n                elif not self.retweets_only:\n                    if parsed_tweet not in tweets:\n                        tweets.append(parsed_tweet)\n\n            return tweets\n\n        except tweepy.TweepError as e:\nprint(\"Error : \" + str(e))\n\n\n\n\nQuery Tweeter, generate categorical results, populate a dictionary of lists, write files, compute statistics\n\u00b6\n\n\nPointers:\n\n\n\n\nScope the queries: keywords, dates.\n\n\nGenerate categorical results with sentiment analysis.\n\n\nGenerate a dictionary of lists.\n\n\nWrite a file for each candidate (not pandas involved); the list.\n\n\nEnrich each tweet for each candidate with sentiment analysis and the mean values; the list.\n\n\nBuild a list of all sentiment analysis.\n\n\nWith the dictionary of lists, sort the mean values and rank the keywords.\n\n\n\n\nimport tweepy\nfrom textblob import TextBlob\n#French adaptor\nfrom textblob_fr import PatternTagger, PatternAnalyzer\n\nimport numpy as np\nimport operator\n\n\n# Step 1 - Authenticate\nconsumer_key= 'CONSUMER_KEY_HERE'\nconsumer_secret= 'CONSUMER_SECRET_HERE'\n\naccess_token='ACCESS_TOKEN_HERE'\naccess_token_secret='ACCESS_TOKEN_SECRET_HERE'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n#Step 2 - Prepare query features\n\n#List of candidates to French Republicans Primary Elections\ncandidates_names = ['Sarkozy', 'Kosciusko', 'Cope', 'Juppe', 'Fillon', 'Le Maire', 'Poisson']\n#Hashtag related to the debate\nname_of_debate = \"PrimaireLeDebat\" \n#Date of the debate : October 13th\nsince_date = \"2016-10-13\"\nuntil_date = \"2016-10-14\"\n\n#Step 2b - Function of labelisation of analysis\ndef get_label(analysis, threshold = 0):\n    if analysis.sentiment[0]>threshold:\n        return 'Positive'\n    else:\n        return 'Negative'\n\n\n#Step 3 - Retrieve Tweets and Save Them\nall_polarities = dict()\nfor candidate in candidates_names:\n    this_candidate_polarities = []\n    #Get the tweets about the debate and the candidate between the dates\n    this_candidate_tweets = api.search(q=[name_of_debate, candidate], count=100, since = since_date, until=until_date)\n    #Save the tweets in csv\n    with open('%s_tweets.csv' % candidate, 'wb') as this_candidate_file:\n        this_candidate_file.write('tweet,sentiment_label\\n')\n        for tweet in this_candidate_tweets:\n            analysis = TextBlob(tweet.text, pos_tagger=PatternTagger(), analyzer=PatternAnalyzer())\n            #Get the label corresponding to the sentiment analysis\n            this_candidate_polarities.append(analysis.sentiment[0])\n            this_candidate_file.write('%s,%s\\n' % (tweet.text.encode('utf8'), get_label(analysis)))\n    #Save the mean for final results\n    all_polarities[candidate] = np.mean(this_candidate_polarities)\n\n#Step bonus - Print a Result\nsorted_analysis = sorted(all_polarities.items(), key=operator.itemgetter(1), reverse=True)\nprint 'Mean Sentiment Polarity in descending order :'\nfor candidate, polarity in sorted_analysis:\nprint '%s : %0.3f' % (candidate, polarity)",
            "title": "Sentiment Analysis with Twitter"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#retrieve-tweets",
            "text": "# retrieve tweets with the API\npublic_tweets = api.search('Climate')\n\nfor tweet in public_tweets:\n    print(tweet.text)",
            "title": "Retrieve tweets"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#perform-sentiment-analysis",
            "text": "# perform sentiment analysis on each tweet\n# -1 < polarity < 1 (negativity vs positivity (sentiment))\n# 0 < subjectivity < 1 (factual vs opinion)\nfor tweet in public_tweets:\n    print(tweet.text)\n    analysis = TextBlob(tweet.text)\n    print(analysis.sentiment)\n    print(\"----------\")  # create a list of dictionaries\n# each dictionary contains a tweet text and user\n# the list bundle up the dictionaries\nsaved_tweets = []\nfor tweet in public_tweets:\n    parsed_tweet = {}\n    parsed_tweet['text'] = tweet.text\n    parsed_tweet['user'] = tweet.user.screen_name\n    saved_tweets.append(parsed_tweet)  # convert the list into a data frame\nsaved_tweets_df = pd.DataFrame(saved_tweets)\n# print the head\nprint(saved_tweets_df.head(3))  # save the data frame into a csv file\nsaved_tweets_df.to_csv('saved_tweets_df.csv')",
            "title": "Perform sentiment analysis"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#an-overview-of-nlp-with-nltk-and-textblob",
            "text": "Make sure to install the  nltk  (with pip or conda) module and then run  python -m textblob.download_corpora .  # a comment or an opinion\ncomment = TextBlob(\"I am angry that I never get good players in my pool\")  print(comment)  # tags are not token\nprint(comment.tags)  # words are like tokens\nprint(comment.words)  # -1 < polarity < 1 (negativity vs positivity (sentiment))\nprint(comment.sentiment.polarity)  # 0 < subjectivity < 1 (factual vs opinion)\nprint(comment.sentiment.subjectivity)  # both\nprint(comment.sentiment)  # a fact\nfact = TextBlob(\"The sun is setting at the moment\")\n\nprint(fact.sentiment)",
            "title": "An overview of NLP (with nltk and textblob)"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#applications",
            "text": "",
            "title": "Applications"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#query-tweeter-generate-categorical-results-populate-a-list-of-dictionaries",
            "text": "Pointers:   Use of functions and a class.  Error-handling authentication.  Query tweets, retweets, etc.  Generate categorical results with sentiment analysis.  Create a list of little dictionaries for parsing and containing tweet data and metadata.  Error-handling parsing.  Filter retweets.   import os\nimport re\nimport tweepy\nfrom tweepy import OAuthHandler\nfrom textblob import TextBlob\n\n\nclass TwitterClient(object):\n    '''\n    Generic Twitter Class for the App\n    '''\n    def __init__(self, query, retweets_only=False, with_sentiment=False):\n        # keys and tokens from the Twitter Dev Console\n        consumer_key = os.environ['CONSUMER_KEY']\n        consumer_secret = os.environ['CONSUMER_SECRET']\n        access_token = os.environ['ACCESS_TOKEN']\n        access_token_secret = os.environ['ACCESS_TOKEN_SECRET']\n        # Attempt authentication\n        try:\n            self.auth = OAuthHandler(consumer_key, consumer_secret)\n            self.auth.set_access_token(access_token, access_token_secret)\n            self.query = query\n            self.retweets_only = retweets_only\n            self.with_sentiment = with_sentiment\n            self.api = tweepy.API(self.auth)\n            self.tweet_count_max = 100  # To prevent Rate Limiting\n        except:\n            print(\"Error: Authentication Failed\")\n\n    def set_query(self, query=''):\n        self.query = query\n\n    def set_retweet_checking(self, retweets_only='false'):\n        self.retweets_only = retweets_only\n\n    def set_with_sentiment(self, with_sentiment='false'):\n        self.with_sentiment = with_sentiment\n\n    def clean_tweet(self, tweet):\n        return ' '.join(re.sub(\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\/\\/\\S+)\", \" \", tweet).split())\n\n    def get_tweet_sentiment(self, tweet):\n        analysis = TextBlob(self.clean_tweet(tweet))\n        if analysis.sentiment.polarity > 0:\n            return 'positive'\n        elif analysis.sentiment.polarity == 0:\n            return 'neutral'\n        else:\n            return 'negative'\n\n    def get_tweets(self):\n        tweets = []\n\n        try:\n            recd_tweets = self.api.search(q=self.query,\n                                          count=self.tweet_count_max)\n            if not recd_tweets:\n                pass\n            for tweet in recd_tweets:\n                parsed_tweet = {}\n\n                parsed_tweet['text'] = tweet.text\n                parsed_tweet['user'] = tweet.user.screen_name\n\n                if self.with_sentiment == 1:\n                    parsed_tweet['sentiment'] = self.get_tweet_sentiment(tweet.text)\n                else:\n                    parsed_tweet['sentiment'] = 'unavailable'\n\n                if tweet.retweet_count > 0 and self.retweets_only == 1:\n                    if parsed_tweet not in tweets:\n                        tweets.append(parsed_tweet)\n                elif not self.retweets_only:\n                    if parsed_tweet not in tweets:\n                        tweets.append(parsed_tweet)\n\n            return tweets\n\n        except tweepy.TweepError as e:\nprint(\"Error : \" + str(e))",
            "title": "Query Tweeter, generate categorical results, populate a list of dictionaries"
        },
        {
            "location": "/Sentiment_Analysis_with_Twitter/#query-tweeter-generate-categorical-results-populate-a-dictionary-of-lists-write-files-compute-statistics",
            "text": "Pointers:   Scope the queries: keywords, dates.  Generate categorical results with sentiment analysis.  Generate a dictionary of lists.  Write a file for each candidate (not pandas involved); the list.  Enrich each tweet for each candidate with sentiment analysis and the mean values; the list.  Build a list of all sentiment analysis.  With the dictionary of lists, sort the mean values and rank the keywords.   import tweepy\nfrom textblob import TextBlob\n#French adaptor\nfrom textblob_fr import PatternTagger, PatternAnalyzer\n\nimport numpy as np\nimport operator\n\n\n# Step 1 - Authenticate\nconsumer_key= 'CONSUMER_KEY_HERE'\nconsumer_secret= 'CONSUMER_SECRET_HERE'\n\naccess_token='ACCESS_TOKEN_HERE'\naccess_token_secret='ACCESS_TOKEN_SECRET_HERE'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n#Step 2 - Prepare query features\n\n#List of candidates to French Republicans Primary Elections\ncandidates_names = ['Sarkozy', 'Kosciusko', 'Cope', 'Juppe', 'Fillon', 'Le Maire', 'Poisson']\n#Hashtag related to the debate\nname_of_debate = \"PrimaireLeDebat\" \n#Date of the debate : October 13th\nsince_date = \"2016-10-13\"\nuntil_date = \"2016-10-14\"\n\n#Step 2b - Function of labelisation of analysis\ndef get_label(analysis, threshold = 0):\n    if analysis.sentiment[0]>threshold:\n        return 'Positive'\n    else:\n        return 'Negative'\n\n\n#Step 3 - Retrieve Tweets and Save Them\nall_polarities = dict()\nfor candidate in candidates_names:\n    this_candidate_polarities = []\n    #Get the tweets about the debate and the candidate between the dates\n    this_candidate_tweets = api.search(q=[name_of_debate, candidate], count=100, since = since_date, until=until_date)\n    #Save the tweets in csv\n    with open('%s_tweets.csv' % candidate, 'wb') as this_candidate_file:\n        this_candidate_file.write('tweet,sentiment_label\\n')\n        for tweet in this_candidate_tweets:\n            analysis = TextBlob(tweet.text, pos_tagger=PatternTagger(), analyzer=PatternAnalyzer())\n            #Get the label corresponding to the sentiment analysis\n            this_candidate_polarities.append(analysis.sentiment[0])\n            this_candidate_file.write('%s,%s\\n' % (tweet.text.encode('utf8'), get_label(analysis)))\n    #Save the mean for final results\n    all_polarities[candidate] = np.mean(this_candidate_polarities)\n\n#Step bonus - Print a Result\nsorted_analysis = sorted(all_polarities.items(), key=operator.itemgetter(1), reverse=True)\nprint 'Mean Sentiment Polarity in descending order :'\nfor candidate, polarity in sorted_analysis:\nprint '%s : %0.3f' % (candidate, polarity)",
            "title": "Query Tweeter, generate categorical results, populate a dictionary of lists, write files, compute statistics"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/",
            "text": "CONTENT\n\n\nExploratory Data Analysis (EDA) prior to Machine Learning\n\n\nHow to Start with Supervised Learning (Take 1)\n\n\nImport the Data and Explore it\n\n\nVisual Exploratory Data Analysis (EDA) and a First Model\n\n\nSubmit to Kaggle (1st)\n\n\n\n\n\n\nEDA on Feature Variables\n\n\nSubmit to Kaggle (2nd)\n\n\n\n\n\n\nExplore the Data More!\n\n\nEDA with Numeric Variables\n\n\n\n\n\n\nA First Machine Learning Model\n\n\nHow to Start with Supervised Learning (Take 2)\n\n\nBuild a Decision Tree Classifier\n\n\nSubmit to Kaggle (3rd)\n\n\n\n\n\n\nA Decision Tree Classifier in More Details\n\n\nWhy Choose max_depth=3?\n\n\n\n\n\n\nFeature Engineering\n\n\nHow to Start with Feature Engineering\n\n\nWhy Feature Engineer At All?\n\n\nTitanic\u2019s Passenger Titles\n\n\nPassenger\u2019s Cabins\n\n\nHandling Missing Values\n\n\nBinning Numerical Data\n\n\nNumber of Members in Family Onboard\n\n\nTransforming all Variables into Numerical Variables\n\n\n\n\n\n\nBuilding models with a New Dataset!\n\n\nSubmit to Kaggle (4th)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the tutorial. Python 3. From DataCamp.\n\n\n\n\nExploratory Data Analysis (EDA) prior to Machine Learning\n\u00b6\n\n\nSupervised learning models with the help of exploratory data analysis (EDA) on the Titanic data.\n\n\nHow to Start with Supervised Learning (Take 1)\n\u00b6\n\n\nApproach supervised learning is the following:\n\n\n\n\nPerform an Exploratory Data Analysis (EDA) on a dataset;\n\n\nBuild a quick and dirty model, or a baseline model, which can serve as a comparison against later models that we will build;\n\n\nIterate this process. We will do more EDA and build another model;\n\n\nEngineer features: take the features that we already have and combine them or extract more information from them to eventually come to the last point, which is\n\n\nGet a model that performs better.\n\n\n\n\nImport the Data and Explore it\n\u00b6\n\n\n# Import modules\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import tree\nfrom sklearn.metrics import accuracy_score\n\n# Figures inline and set visualization style\n%matplotlib inline\nsns.set()\n\n\n\n\n# Import test and train datasets\ndf_train = pd.read_csv('data/train.csv')\ndf_test = pd.read_csv('data/test.csv')\n\n# View first lines of training data\ndf_train.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nSurvived\n\n      \nPclass\n\n      \nName\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n0\n\n      \n3\n\n      \nBraund, Mr. Owen Harris\n\n      \nmale\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \nA/5 21171\n\n      \n7.2500\n\n      \nNaN\n\n      \nS\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \n1\n\n      \n1\n\n      \nCumings, Mrs. John Bradley (Florence Briggs Th...\n\n      \nfemale\n\n      \n38.0\n\n      \n1\n\n      \n0\n\n      \nPC 17599\n\n      \n71.2833\n\n      \nC85\n\n      \nC\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n1\n\n      \n3\n\n      \nHeikkinen, Miss. Laina\n\n      \nfemale\n\n      \n26.0\n\n      \n0\n\n      \n0\n\n      \nSTON/O2. 3101282\n\n      \n7.9250\n\n      \nNaN\n\n      \nS\n\n    \n\n  \n\n\n\n\n\n\n\n\n\nThe target variable is the variable we are trying to predict;\n\n\nOther variables are known as \u201cfeatures\u201d (or \u201cpredictor variables\u201d, the features that we are using to predict the target variable).\n\n\n\n\nNote that the \ndf_test\n DataFrame doesn\u2019t have the \nSurvived\n column because this is what we will try to predict!\n\n\n# View first lines of test data\ndf_test.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nPclass\n\n      \nName\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n892\n\n      \n3\n\n      \nKelly, Mr. James\n\n      \nmale\n\n      \n34.5\n\n      \n0\n\n      \n0\n\n      \n330911\n\n      \n7.8292\n\n      \nNaN\n\n      \nQ\n\n    \n\n    \n\n      \n1\n\n      \n893\n\n      \n3\n\n      \nWilkes, Mrs. James (Ellen Needs)\n\n      \nfemale\n\n      \n47.0\n\n      \n1\n\n      \n0\n\n      \n363272\n\n      \n7.0000\n\n      \nNaN\n\n      \nS\n\n    \n\n    \n\n      \n2\n\n      \n894\n\n      \n2\n\n      \nMyles, Mr. Thomas Francis\n\n      \nmale\n\n      \n62.0\n\n      \n0\n\n      \n0\n\n      \n240276\n\n      \n9.6875\n\n      \nNaN\n\n      \nQ\n\n    \n\n  \n\n\n\n\n\n\n\ndf_train.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.6+ KB\n\n\n\ndf_train.describe()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nSurvived\n\n      \nPclass\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nFare\n\n    \n\n  \n\n  \n\n    \n\n      \ncount\n\n      \n891.000000\n\n      \n891.000000\n\n      \n891.000000\n\n      \n714.000000\n\n      \n891.000000\n\n      \n891.000000\n\n      \n891.000000\n\n    \n\n    \n\n      \nmean\n\n      \n446.000000\n\n      \n0.383838\n\n      \n2.308642\n\n      \n29.699118\n\n      \n0.523008\n\n      \n0.381594\n\n      \n32.204208\n\n    \n\n    \n\n      \nstd\n\n      \n257.353842\n\n      \n0.486592\n\n      \n0.836071\n\n      \n14.526497\n\n      \n1.102743\n\n      \n0.806057\n\n      \n49.693429\n\n    \n\n    \n\n      \nmin\n\n      \n1.000000\n\n      \n0.000000\n\n      \n1.000000\n\n      \n0.420000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n0.000000\n\n    \n\n    \n\n      \n25%\n\n      \n223.500000\n\n      \n0.000000\n\n      \n2.000000\n\n      \n20.125000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n7.910400\n\n    \n\n    \n\n      \n50%\n\n      \n446.000000\n\n      \n0.000000\n\n      \n3.000000\n\n      \n28.000000\n\n      \n0.000000\n\n      \n0.000000\n\n      \n14.454200\n\n    \n\n    \n\n      \n75%\n\n      \n668.500000\n\n      \n1.000000\n\n      \n3.000000\n\n      \n38.000000\n\n      \n1.000000\n\n      \n0.000000\n\n      \n31.000000\n\n    \n\n    \n\n      \nmax\n\n      \n891.000000\n\n      \n1.000000\n\n      \n3.000000\n\n      \n80.000000\n\n      \n8.000000\n\n      \n6.000000\n\n      \n512.329200\n\n    \n\n  \n\n\n\n\n\n\n\nVisual Exploratory Data Analysis (EDA) and a First Model\n\u00b6\n\n\nWith seaborn.\n\n\nsns.countplot(x='Survived', data=df_train)\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7fc65fa0e668>\n\n\n\n\n\nTake-away\n: in the training set, less people survived than didn\u2019t. Let\u2019s then build a first model that predicts that nobody survived.\n\n\nThis is a bad model as we know that people survived. But it gives us a \nbaseline\n: any model that we build later needs to do better than this one.\n\n\n\n\nCreate a column \nSurvived\n for \ndf_test\n that encodes \u2018did not survive\u2019 for all rows;\n\n\nSave \nPassengerId\n and \nSurvived\n columns of \ndf_test\n to a .csv and submit to Kaggle.\n\n\n\n\ndf_test['Survived'] = 0\ndf_test[['PassengerId', 'Survived']].to_csv('results/no_survivors.csv', index=False)\n\n\n\n\nSubmit to Kaggle (1st)\n\u00b6\n\n\n\n\nGo to \nKaggle\n, log in, and search for \nTitanic: Machine Learning from Disaster\n. \n\n\nJoin the competition and submit the .csv file.\n\n\nAdd a description and submit.\n\n\nKaggle returns a ranking.\n\n\nAt the time of the first submission: score 0.63679, rank 9387.\n\n\n\n\n\n\nEDA on Feature Variables\n\u00b6\n\n\nDo some more Exploratory Data Analysis and build another model!\n\n\nsns.countplot(x='Sex', data=df_train);\n\n\n\n\n\n\n# kind is the facets\nsns.factorplot(x='Survived', col='Sex', kind='count', data=df_train)\n\n\n\n\n<seaborn.axisgrid.FacetGrid at 0x7fc65fa35a20>\n\n\n\n\n\nTake-away\n: Women were more likely to survive than men.\n\n\nWith this take-away, we can use pandas to figure out how many women and how many men survived:\n\n\ndf_train.head(1)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nSurvived\n\n      \nPclass\n\n      \nName\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n0\n\n      \n3\n\n      \nBraund, Mr. Owen Harris\n\n      \nmale\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \nA/5 21171\n\n      \n7.25\n\n      \nNaN\n\n      \nS\n\n    \n\n  \n\n\n\n\n\n\n\n# Chain a group by Sex, sum Survived\ndf_train.groupby(['Sex']).Survived.sum()\n\n\n\n\nSex\nfemale    233\nmale      109\nName: Survived, dtype: int64\n\n\n\n# Chain calculations\nprint(df_train[df_train.Sex == 'female'].Survived.sum() /\n      df_train[df_train.Sex == 'female'].Survived.count())\n\nprint(df_train[df_train.Sex == 'male'].Survived.sum() /\n      df_train[df_train.Sex == 'male'].Survived.count())\n\n\n\n\n0.742038216561\n0.188908145581\n\n\n\n74% of women survived, while 19% of men survived.\n\n\nBuild a second model and predict that all women survived and all men didn\u2019t.\n\n\n\n\nCreate a column \nSurvived\n for \ndf_test\n that encodes the above prediction.\n\n\nSave \nPassengerId\n and \nSurvived\n columns of \ndf_test\n to a .csv and submit to Kaggle.\n\n\n\n\ndf_test['Survived'] = df_test.Sex == 'female'\ndf_test['Survived'] = df_test.Survived.apply(lambda x: int(x))\ndf_test.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nPclass\n\n      \nName\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n      \nSurvived\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n892\n\n      \n3\n\n      \nKelly, Mr. James\n\n      \nmale\n\n      \n34.5\n\n      \n0\n\n      \n0\n\n      \n330911\n\n      \n7.8292\n\n      \nNaN\n\n      \nQ\n\n      \n0\n\n    \n\n    \n\n      \n1\n\n      \n893\n\n      \n3\n\n      \nWilkes, Mrs. James (Ellen Needs)\n\n      \nfemale\n\n      \n47.0\n\n      \n1\n\n      \n0\n\n      \n363272\n\n      \n7.0000\n\n      \nNaN\n\n      \nS\n\n      \n1\n\n    \n\n    \n\n      \n2\n\n      \n894\n\n      \n2\n\n      \nMyles, Mr. Thomas Francis\n\n      \nmale\n\n      \n62.0\n\n      \n0\n\n      \n0\n\n      \n240276\n\n      \n9.6875\n\n      \nNaN\n\n      \nQ\n\n      \n0\n\n    \n\n  \n\n\n\n\n\n\n\ndf_test[['PassengerId', 'Survived']].to_csv('results/women_survived.csv', index=False)\n\n\n\n\nSubmit to Kaggle (2nd)\n\u00b6\n\n\n\n\nGo to \nKaggle\n, log in, and search for \nTitanic: Machine Learning from Disaster\n. \n\n\nJoin the competition and submit the .csv file.\n\n\nAdd a description and submit.\n\n\nKaggle returns a ranking.\n\n\nAt the time of the first submission: score 0.76555 (from 0.62679), rank 7274 (a jump of 2122 places).\n\n\n\n\n\n\nExplore the Data More!\n\u00b6\n\n\n# kind is the facets\nsns.factorplot(x='Survived', col='Pclass', kind='count', data=df_train)\n\n\n\n\n<seaborn.axisgrid.FacetGrid at 0x7fc65f8dcf98>\n\n\n\n\n\nTake-away\n: Passengers that travelled in first class were more likely to survive. On the other hand, passengers travelling in third class were more unlikely to survive. \n\n\n# kind is the facets\nsns.factorplot(x='Survived', col='Embarked', kind='count', data=df_train)\n\n\n\n\n<seaborn.axisgrid.FacetGrid at 0x7fc65f937c50>\n\n\n\n\n\nTake-away\n: Passengers that embarked in Southampton were less likely to survive. \n\n\nEDA with Numeric Variables\n\u00b6\n\n\nsns.distplot(df_train.Fare, kde=False)\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7fc6633fb9e8>\n\n\n\n\n\nTake-away\n: Most passengers paid less than 100 for travelling with the Titanic.\n\n\n# Group by Survived, trace histograms of Fare with alpha color 0.6\ndf_train.groupby('Survived').Fare.hist(alpha=0.6)\n\n\n\n\nSurvived\n0    Axes(0.125,0.125;0.775x0.775)\n1    Axes(0.125,0.125;0.775x0.775)\nName: Fare, dtype: object\n\n\n\n\n\nTake-away\n: It looks as though those that paid more had a higher chance of surviving.\n\n\n# Remove NaN\ndf_train_drop = df_train.dropna()\n\nsns.distplot(df_train_drop.Age, kde=False)\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7fc65f64be80>\n\n\n\n\n\n# Alternative to bars or scatter\nsns.stripplot(x='Survived', \n              y='Fare', \n              data=df_train, \n              alpha=0.3, jitter=True)\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7fc65f5cca58>\n\n\n\n\n\n# Alternative to bars or scatter\nsns.swarmplot(x='Survived', \n              y='Fare', \n              data=df_train)\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7fc65f2e4ef0>\n\n\n\n\n\nTake-away\n: Fare definitely seems to be correlated with survival aboard the Titanic.\n\n\n# Group by Survived, describe Fare (descriptive statistics)\ndf_train.groupby('Survived').Fare.describe()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \ncount\n\n      \nmean\n\n      \nstd\n\n      \nmin\n\n      \n25%\n\n      \n50%\n\n      \n75%\n\n      \nmax\n\n    \n\n    \n\n      \nSurvived\n\n      \n\n      \n\n      \n\n      \n\n      \n\n      \n\n      \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n549.0\n\n      \n22.117887\n\n      \n31.388207\n\n      \n0.0\n\n      \n7.8542\n\n      \n10.5\n\n      \n26.0\n\n      \n263.0000\n\n    \n\n    \n\n      \n1\n\n      \n342.0\n\n      \n48.395408\n\n      \n66.596998\n\n      \n0.0\n\n      \n12.4750\n\n      \n26.0\n\n      \n57.0\n\n      \n512.3292\n\n    \n\n  \n\n\n\n\n\n\n\nsns.lmplot(x='Age', \n           y='Fare', \n           hue='Survived', \n           data=df_train, \n           fit_reg=False, scatter_kws={'alpha':0.5})\n\n\n\n\n<seaborn.axisgrid.FacetGrid at 0x7fc65f5ccba8>\n\n\n\n\n\nsns.lmplot(x='Age', \n           y='Fare', \n           hue='Survived', \n           data=df_train, \n           fit_reg=True, scatter_kws={'alpha':0.5})\n\n\n\n\n<seaborn.axisgrid.FacetGrid at 0x7fc65f22d710>\n\n\n\n\n\nTake-away\n: It looks like those who survived either paid quite a bit for their ticket or they were young.\n\n\nsns.pairplot(df_train_drop, hue='Survived')\n\n\n\n\n<seaborn.axisgrid.PairGrid at 0x7fc65f8826d8>\n\n\n\n\n\nA First Machine Learning Model\n\u00b6\n\n\nA decision tree classifier, with the Python scikit-learn.\n\n\nHow to Start with Supervised Learning (Take 2)\n\u00b6\n\n\nNow that we have done our homeworks with EDA\u2026\n\n\n# Import modules\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport numpy as np\nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\n# Figures inline and set visualization style\n%matplotlib inline\nsns.set()\n\n\n\n\n# Import data\ndf_train = pd.read_csv('data/train.csv')\ndf_test = pd.read_csv('data/test.csv')\n\n\n\n\ndf_train.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.6+ KB\n\n\n\ndf_test.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    418 non-null int64\nPclass         418 non-null int64\nName           418 non-null object\nSex            418 non-null object\nAge            332 non-null float64\nSibSp          418 non-null int64\nParch          418 non-null int64\nTicket         418 non-null object\nFare           417 non-null float64\nCabin          91 non-null object\nEmbarked       418 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB\n\n\n\n# Store target variable of training data in a safe place\nsurvived_train = df_train.Survived\n\n# Concatenate (along the index or axis=1) training and test sets\n# to preprocess the data a little bit\n# and make sure that any operations that\n# we perform on the training set are also\n# being done on the test data set\ndata = pd.concat([df_train.drop(['Survived'], axis=1), df_test])\n\n\n\n\n# The combined datasets (891+418 entries)\ndata.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1046 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1308 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB\n\n\n\nMissing values for the \nAge\n and \nFare\n columns! Also notice that \nCabin\n and \nEmbarked\n are also missing values and we will need to deal with that also at some point. However, now we will focus on fixing the numerical variables \nAge\n and \nFare\n, using the median of the of these variables where we know them. It\u2019s perfect for dealing with outliers. In other words, the median is useful to use when the distribution of data is skewed. Other ways to impute the missing values would be to use the mean or the mode.\n\n\n# Impute missing numerical variables where NaN\ndata['Age'] = data.Age.fillna(data.Age.median())\ndata['Fare'] = data.Fare.fillna(data.Fare.median())\n\n# Check out info of data\ndata.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1309 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1309 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB\n\n\n\nEncode the data with numbers with \n.get_dummies()\n. \n\n\nIt creates a new column for female, called \nSex_female\n, and then a new column for \nSex_male\n, which encodes whether that row was male or female (1 if that row is a male - and a 0 if that row is female). Because of \ndrop_first\n argument, we dropped \nSex_female\n because, essentially, these new columns, \nSex_female\n and \nSex_male\n, encode the same information.\n\n\ndata = pd.get_dummies(data, columns=['Sex'], drop_first=True)\ndata.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nPclass\n\n      \nName\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n      \nSex_male\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n3\n\n      \nBraund, Mr. Owen Harris\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \nA/5 21171\n\n      \n7.2500\n\n      \nNaN\n\n      \nS\n\n      \n1\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \n1\n\n      \nCumings, Mrs. John Bradley (Florence Briggs Th...\n\n      \n38.0\n\n      \n1\n\n      \n0\n\n      \nPC 17599\n\n      \n71.2833\n\n      \nC85\n\n      \nC\n\n      \n0\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n3\n\n      \nHeikkinen, Miss. Laina\n\n      \n26.0\n\n      \n0\n\n      \n0\n\n      \nSTON/O2. 3101282\n\n      \n7.9250\n\n      \nNaN\n\n      \nS\n\n      \n0\n\n    \n\n  \n\n\n\n\n\n\n\n# Select columns and view head\ndata = data[['Sex_male', 'Fare', 'Age','Pclass', 'SibSp']]\ndata.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nSex_male\n\n      \nFare\n\n      \nAge\n\n      \nPclass\n\n      \nSibSp\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n7.2500\n\n      \n22.0\n\n      \n3\n\n      \n1\n\n    \n\n    \n\n      \n1\n\n      \n0\n\n      \n71.2833\n\n      \n38.0\n\n      \n1\n\n      \n1\n\n    \n\n    \n\n      \n2\n\n      \n0\n\n      \n7.9250\n\n      \n26.0\n\n      \n3\n\n      \n0\n\n    \n\n  \n\n\n\n\n\n\n\ndata.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 5 columns):\nSex_male    1309 non-null uint8\nFare        1309 non-null float64\nAge         1309 non-null float64\nPclass      1309 non-null int64\nSibSp       1309 non-null int64\ndtypes: float64(2), int64(2), uint8(1)\nmemory usage: 52.4 KB\n\n\n\nAll the entries are non-null now.\n\n\nBuild a Decision Tree Classifier\n\u00b6\n\n\n\u201cWas \nSex_male\n\u201d less than 0.5? In other words, was the data point a female. If the answer to this question is \nTrue\n, we can go down to the left and we get \nSurvived\n. If \nFalse\n, we go down the right and we get \nDead\n.\n\n\n\n\nThat the first branch is on \nMale\n or not and that \nMale\n results in a prediction of \nDead\n. The gini coefficient is used to make these decisions.\n\n\nBefore fitting a model to the data, split it back into training and test sets:\n\n\ndata_train = data.iloc[:891]\ndata_test = data.iloc[891:]\n\n\n\n\nscikit-learn requires the data as arrays, not DataFrames. Transform them.\n\n\nX = data_train.values\ntest = data_test.values\n\n# and from above: survived_train = df_train.Survived\ny = survived_train.values\n\n\n\n\nX\n\n\n\n\narray([[  1.    ,   7.25  ,  22.    ,   3.    ,   1.    ],\n       [  0.    ,  71.2833,  38.    ,   1.    ,   1.    ],\n       [  0.    ,   7.925 ,  26.    ,   3.    ,   0.    ],\n       ..., \n       [  0.    ,  23.45  ,  28.    ,   3.    ,   1.    ],\n       [  1.    ,  30.    ,  26.    ,   1.    ,   0.    ],\n       [  1.    ,   7.75  ,  32.    ,   3.    ,   0.    ]])\n\n\n\nBuild a decision tree classifier! First create such a model with \nmax_depth=3\n and then fit it the data. Name the model \nclf\n, which is short for \u201cClassifier\u201d.\n\n\n# Instantiate model and fit to data\n# The max depth is set at 3\nclf = tree.DecisionTreeClassifier(max_depth=3)\n\n# X is the indenpendent variables, y is the dependent variable\nclf.fit(X, y)\n\n\n\n\nDecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=3,\n            max_features=None, max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n            splitter='best')\n\n\n\nMake predictions on the test set.\n\n\n# Make predictions and store in 'Survived' column of df_test\nY_pred = clf.predict(test)\ndf_test['Survived'] = Y_pred\n\n# Save it\ndf_test[['PassengerId', 'Survived']].to_csv('results/1st_dec_tree.csv',\n                                            index=False)\n\n\n\n\nSubmit to Kaggle (3rd)\n\u00b6\n\n\n\n\nGo to \nKaggle\n, log in, and search for \nTitanic: Machine Learning from Disaster\n. \n\n\nJoin the competition and submit the .csv file.\n\n\nAdd a description and submit.\n\n\nKaggle returns a ranking.\n\n\nAt the time of the first submission: score 0.77990 (from 0.76555), rank 4828 (a jump of 2434 places).\n\n\n\n\n\n\n# Compute accuracy on the training set\ntrain_accuracy = clf.score(X, y)\ntrain_accuracy\n\n\n\n\n0.8271604938271605\n\n\n\nA Decision Tree Classifier in More Details\n\u00b6\n\n\nThe Decision Tree Classifier we just built had a max_depth=3 and it looks like this:\n\n\n\n\nThe maximal distance between the first decision and the last is 3, so that\u2019s \nmax_depth=3\n.\n\n\nGenerate images with \ngraphviz\n.\n\n\nimport graphviz\n\ntree_data = tree.export_graphviz(clf, out_file=None) \ngraph = graphviz.Source(tree_data)\n# Save the pdf\ngraph.render(\"img/tree_data\")\n\n\n\n\n'img/tree_data.pdf'\n\n\n\nWe get a tree_data test file (the code for generating the image) and a pdf file. We can generate an image.\n\n\nfeature_names = list(data_train)\nfeature_names\n\n\n\n\n['Sex_male', 'Fare', 'Age', 'Pclass', 'SibSp']\n\n\n\n#data_train\n#data_test\ntree_data = tree.export_graphviz(clf, out_file=None, \n                                feature_names=feature_names,\n                                class_names=None,\n                                filled=True, rounded=True,\n                                special_characters=True)  \ngraph = graphviz.Source(tree_data)  \ngraph \n\n\n\n\n\n\nIn building this model, what we are essentially doing is creating a \ndecision boundary\n in the space of feature variables.\n\n\n\n\nWhy Choose \nmax_depth=3\n?\n\u00b6\n\n\nThe depth of the tree is known as a hyperparameter, which means a parameter we need to decide before we fit the model to the data. If we choose a larger \nmax_depth\n, we will get a more complex decision boundary;  the bias-variance trade-off.\n\n\n\n\nIf the decision boundary is too complex, we can overfit to the data, which means that the model will be describing noise as well as signal.\n\n\nIf the \nmax_depth\n is too small, we might be underfitting the data, meaning that the model doesn\u2019t contain enough of the signal.\n\n\n\n\nOne way is to hold out a test set from the training data. We can then fit the model to the training data, make predictions on the test set and see how well the prediction does on the test set.\n\n\nSplit the original training data into training and test sets:\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, stratify=y)\n\n\n\n\nIterate over values of \nmax_depth\n ranging from 1 to 9 and plot the accuracy of the models on training and test sets:\n\n\n# Setup arrays to store train and test accuracies\ndep = np.arange(1, 9)\ntrain_accuracy = np.empty(len(dep))\ntest_accuracy = np.empty(len(dep))\n\n# Loop over different values of k\nfor i, k in enumerate(dep):\n    # Setup a k-NN Classifier with k neighbors: knn\n    clf = tree.DecisionTreeClassifier(max_depth=k)\n\n    # Fit the classifier to the training data\n    clf.fit(X_train, y_train)\n\n    # Compute accuracy on the training set\n    train_accuracy[i] = clf.score(X_train, y_train)\n\n    # Compute accuracy on the testing set\n    test_accuracy[i] = clf.score(X_test, y_test)\n\n# Generate plot\nplt.title('clf: Varying depth of tree')\nplt.plot(dep, test_accuracy, label = 'Testing Accuracy')\nplt.plot(dep, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.xlabel('Depth of tree')\nplt.ylabel('Accuracy')\nplt.show()\n\n\n\n\n\n\nAt \nmax_depth-3\n, we get the same results as with the model before (around 82%).\n\n\nAs we increase the max_depth, we are going to fit better and better to the training data because we will make decisions that describe the training data. The accuracy for the training data will go up and up, but we see that this doesn\u2019t happen for the test data: we are overfitting.\n\n\nSo that\u2019s why we chose \nmax_depth=3\n. \n\n\nFeature Engineering\n\u00b6\n\n\nhttps://www.datacamp.com/community/tutorials/feature-engineering-kaggle\n\n\nA process where we use domain knowledge of the data to create additional relevant features (create new columns, transform variables and more) that increase the predictive power of the learning algorithm and make the machine learning models perform even better.\n\n\nHow to Start with Feature Engineering\n\u00b6\n\n\n# Imports\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport numpy as np\nfrom sklearn import tree\nfrom sklearn.model_selection import GridSearchCV\n\n# Figures inline and set visualization style\n%matplotlib inline\nsns.set()\n\n\n\n\n# Import data\ndf_train = pd.read_csv('data/train.csv')\ndf_test = pd.read_csv('data/test.csv')\n\n# Store target variable of training data in a safe place\nsurvived_train = df_train.Survived\n\n# Concatenate training and test sets\ndata = pd.concat([df_train.drop(['Survived'], axis=1), df_test])\n\n# View head\ndata.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1046 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1308 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB\n\n\n\nWhy Feature Engineer At All?\n\u00b6\n\n\nTitanic\u2019s Passenger Titles\n\u00b6\n\n\n# View head of 'Name' column\ndata.Name.tail()\n\n\n\n\n413              Spector, Mr. Woolf\n414    Oliva y Ocana, Dona. Fermina\n415    Saether, Mr. Simon Sivertsen\n416             Ware, Mr. Frederick\n417        Peter, Master. Michael J\nName: Name, dtype: object\n\n\n\nThese titles of course give us information on social status, profession, etc., which in the end could tell us something more about survival. use regular expressions to extract the title and store it in a new column \u2018Title\u2019:\n\n\n# Extract Title from Name, store in column and plot barplot\n# One upper character, one lower character, one dot\ndata['Title'] = data.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\\.', x).group(1))\n\n\n\n\n# New column Title is a new feature of the dataset \ndata.Title.head(3)\n\n\n\n\n0      Mr\n1     Mrs\n2    Miss\nName: Title, dtype: object\n\n\n\nsns.countplot(x='Title', data=data);\nplt.xticks(rotation=45);\n\n\n\n\n\n\n# Substitute some title with their English form\ndata['Title'] = data['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Miss'})\n# Gather exceptions\ndata['Title'] = data['Title'].replace(['Don', 'Dona', 'Rev', 'Dr', 'Major', 'Lady', 'Sir', 'Col', 'Capt', 'Countess', 'Jonkheer'],'Special')\n\n\n\n\ndata.Title.head(3)\n\n\n\n\n0      Mr\n1     Mrs\n2    Miss\nName: Title, dtype: object\n\n\n\nsns.countplot(x='Title', data=data);\nplt.xticks(rotation=45);\n\n\n\n\n\n\n# View tail of data (for change)\ndata.tail(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPassengerId\n\n      \nPclass\n\n      \nName\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nTicket\n\n      \nFare\n\n      \nCabin\n\n      \nEmbarked\n\n      \nTitle\n\n    \n\n  \n\n  \n\n    \n\n      \n415\n\n      \n1307\n\n      \n3\n\n      \nSaether, Mr. Simon Sivertsen\n\n      \nmale\n\n      \n38.5\n\n      \n0\n\n      \n0\n\n      \nSOTON/O.Q. 3101262\n\n      \n7.2500\n\n      \nNaN\n\n      \nS\n\n      \nMr\n\n    \n\n    \n\n      \n416\n\n      \n1308\n\n      \n3\n\n      \nWare, Mr. Frederick\n\n      \nmale\n\n      \nNaN\n\n      \n0\n\n      \n0\n\n      \n359309\n\n      \n8.0500\n\n      \nNaN\n\n      \nS\n\n      \nMr\n\n    \n\n    \n\n      \n417\n\n      \n1309\n\n      \n3\n\n      \nPeter, Master. Michael J\n\n      \nmale\n\n      \nNaN\n\n      \n1\n\n      \n1\n\n      \n2668\n\n      \n22.3583\n\n      \nNaN\n\n      \nC\n\n      \nMaster\n\n    \n\n  \n\n\n\n\n\n\n\nPassenger\u2019s Cabins\n\u00b6\n\n\nThere are several NaNs or missing values in the \nCabin\n column. Those NaNs didn\u2019t have a cabin, which could tell us something about survival.\n\n\n# View head of data\ndata[['Name', 'PassengerId', 'Ticket', 'Cabin']].head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nName\n\n      \nPassengerId\n\n      \nTicket\n\n      \nCabin\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \nBraund, Mr. Owen Harris\n\n      \n1\n\n      \nA/5 21171\n\n      \nNaN\n\n    \n\n    \n\n      \n1\n\n      \nCumings, Mrs. John Bradley (Florence Briggs Th...\n\n      \n2\n\n      \nPC 17599\n\n      \nC85\n\n    \n\n    \n\n      \n2\n\n      \nHeikkinen, Miss. Laina\n\n      \n3\n\n      \nSTON/O2. 3101282\n\n      \nNaN\n\n    \n\n    \n\n      \n3\n\n      \nFutrelle, Mrs. Jacques Heath (Lily May Peel)\n\n      \n4\n\n      \n113803\n\n      \nC123\n\n    \n\n    \n\n      \n4\n\n      \nAllen, Mr. William Henry\n\n      \n5\n\n      \n373450\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n\n\n\n# Did they have a Cabin?\n# Return True is the passenger has a cabin\ndata['Has_Cabin'] = ~data.Cabin.isnull()\n\n# # View head of data\ndata[['Name', 'PassengerId', 'Ticket', 'Cabin', 'Has_Cabin']].head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nName\n\n      \nPassengerId\n\n      \nTicket\n\n      \nCabin\n\n      \nHas_Cabin\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \nBraund, Mr. Owen Harris\n\n      \n1\n\n      \nA/5 21171\n\n      \nNaN\n\n      \nFalse\n\n    \n\n    \n\n      \n1\n\n      \nCumings, Mrs. John Bradley (Florence Briggs Th...\n\n      \n2\n\n      \nPC 17599\n\n      \nC85\n\n      \nTrue\n\n    \n\n    \n\n      \n2\n\n      \nHeikkinen, Miss. Laina\n\n      \n3\n\n      \nSTON/O2. 3101282\n\n      \nNaN\n\n      \nFalse\n\n    \n\n    \n\n      \n3\n\n      \nFutrelle, Mrs. Jacques Heath (Lily May Peel)\n\n      \n4\n\n      \n113803\n\n      \nC123\n\n      \nTrue\n\n    \n\n    \n\n      \n4\n\n      \nAllen, Mr. William Henry\n\n      \n5\n\n      \n373450\n\n      \nNaN\n\n      \nFalse\n\n    \n\n  \n\n\n\n\n\n\n\nDrop these columns, except \nHas_Cabin\n, in the actual \ndata\n DataFrame; make sure to use the \ninplace\n argument in the \n.drop()\n method and set it to \nTrue\n:\n\n\n# Drop columns and view head\ndata.drop(['Cabin', 'Name', 'PassengerId', 'Ticket'], axis=1, inplace=True)\ndata.head()\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nFare\n\n      \nEmbarked\n\n      \nTitle\n\n      \nHas_Cabin\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nmale\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \n7.2500\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nfemale\n\n      \n38.0\n\n      \n1\n\n      \n0\n\n      \n71.2833\n\n      \nC\n\n      \nMrs\n\n      \nTrue\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nfemale\n\n      \n26.0\n\n      \n0\n\n      \n0\n\n      \n7.9250\n\n      \nS\n\n      \nMiss\n\n      \nFalse\n\n    \n\n    \n\n      \n3\n\n      \n1\n\n      \nfemale\n\n      \n35.0\n\n      \n1\n\n      \n0\n\n      \n53.1000\n\n      \nS\n\n      \nMrs\n\n      \nTrue\n\n    \n\n    \n\n      \n4\n\n      \n3\n\n      \nmale\n\n      \n35.0\n\n      \n0\n\n      \n0\n\n      \n8.0500\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n    \n\n  \n\n\n\n\n\n\n\nNew features such as \nTitle\n and \nHas_Cabin\n. \n\n\nFeatures that don\u2019t add any more useful information for the machine learning model are now dropped from the DataFrame.\n\n\nHandling Missing Values\n\u00b6\n\n\ndata.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 9 columns):\nPclass       1309 non-null int64\nSex          1309 non-null object\nAge          1046 non-null float64\nSibSp        1309 non-null int64\nParch        1309 non-null int64\nFare         1308 non-null float64\nEmbarked     1307 non-null object\nTitle        1309 non-null object\nHas_Cabin    1309 non-null bool\ndtypes: bool(1), float64(2), int64(3), object(3)\nmemory usage: 133.3+ KB\n\n\n\nMissing values in \nAge\n, \nFare\n, and \nEmbarked\n. Impute these missing values with the help of \n.fillna()\n and use the median to fill in the columns (or the mean, the mode, etc.).\n\n\n# Impute missing values for Age, Fare, Embarked\ndata['Age'] = data.Age.fillna(data.Age.median())\ndata['Fare'] = data.Fare.fillna(data.Fare.median())\ndata['Embarked'] = data['Embarked'].fillna('S')\ndata.info()\n\n\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 9 columns):\nPclass       1309 non-null int64\nSex          1309 non-null object\nAge          1309 non-null float64\nSibSp        1309 non-null int64\nParch        1309 non-null int64\nFare         1309 non-null float64\nEmbarked     1309 non-null object\nTitle        1309 non-null object\nHas_Cabin    1309 non-null bool\ndtypes: bool(1), float64(2), int64(3), object(3)\nmemory usage: 133.3+ KB\n\n\n\ndata.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nFare\n\n      \nEmbarked\n\n      \nTitle\n\n      \nHas_Cabin\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nmale\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \n7.2500\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nfemale\n\n      \n38.0\n\n      \n1\n\n      \n0\n\n      \n71.2833\n\n      \nC\n\n      \nMrs\n\n      \nTrue\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nfemale\n\n      \n26.0\n\n      \n0\n\n      \n0\n\n      \n7.9250\n\n      \nS\n\n      \nMiss\n\n      \nFalse\n\n    \n\n  \n\n\n\n\n\n\n\nBinning Numerical Data\n\u00b6\n\n\n# Binning numerical columns\n# q=4 means 4 quantiles 0, 1, 2, 3\n# labels=False are numbers, not characters\ndata['CatAge'] = pd.qcut(data.Age, q=4, labels=False )\ndata['CatFare']= pd.qcut(data.Fare, q=4, labels=False)\ndata.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nSex\n\n      \nAge\n\n      \nSibSp\n\n      \nParch\n\n      \nFare\n\n      \nEmbarked\n\n      \nTitle\n\n      \nHas_Cabin\n\n      \nCatAge\n\n      \nCatFare\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nmale\n\n      \n22.0\n\n      \n1\n\n      \n0\n\n      \n7.2500\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nfemale\n\n      \n38.0\n\n      \n1\n\n      \n0\n\n      \n71.2833\n\n      \nC\n\n      \nMrs\n\n      \nTrue\n\n      \n3\n\n      \n3\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nfemale\n\n      \n26.0\n\n      \n0\n\n      \n0\n\n      \n7.9250\n\n      \nS\n\n      \nMiss\n\n      \nFalse\n\n      \n1\n\n      \n1\n\n    \n\n  \n\n\n\n\n\n\n\n# Drop the 'Age' and 'Fare' columns\ndata = data.drop(['Age', 'Fare'], axis=1)\ndata.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nSex\n\n      \nSibSp\n\n      \nParch\n\n      \nEmbarked\n\n      \nTitle\n\n      \nHas_Cabin\n\n      \nCatAge\n\n      \nCatFare\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nmale\n\n      \n1\n\n      \n0\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nfemale\n\n      \n1\n\n      \n0\n\n      \nC\n\n      \nMrs\n\n      \nTrue\n\n      \n3\n\n      \n3\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nfemale\n\n      \n0\n\n      \n0\n\n      \nS\n\n      \nMiss\n\n      \nFalse\n\n      \n1\n\n      \n1\n\n    \n\n  \n\n\n\n\n\n\n\nNumber of Members in Family Onboard\n\u00b6\n\n\nCreate a new column, which is the number of members in families that were onboard of the Titanic.\n\n\n# Create column of number of Family members onboard\ndata['Fam_Size'] = data.Parch + data.SibSp\n\n# Drop columns\ndata = data.drop(['SibSp','Parch'], axis=1)\ndata.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nSex\n\n      \nEmbarked\n\n      \nTitle\n\n      \nHas_Cabin\n\n      \nCatAge\n\n      \nCatFare\n\n      \nFam_Size\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nmale\n\n      \nS\n\n      \nMr\n\n      \nFalse\n\n      \n0\n\n      \n0\n\n      \n1\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nfemale\n\n      \nC\n\n      \nMrs\n\n      \nTrue\n\n      \n3\n\n      \n3\n\n      \n1\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nfemale\n\n      \nS\n\n      \nMiss\n\n      \nFalse\n\n      \n1\n\n      \n1\n\n      \n0\n\n    \n\n  \n\n\n\n\n\n\n\nTransforming all Variables into Numerical Variables\n\u00b6\n\n\nTransform all variables into numeric ones. We do this because machine learning models generally take numeric input.\n\n\n# Transform into binary variables\n# Has_Cabin is a boolean\n# Sex becomes Sex_male=1 or 0\n# Embarked becomes Embarked_Q=1 or 0, Embarked_...\n# Title becomes Title_Miss=1 or 0, ...\n# The former variables are dropped, only the later variables remain\ndata_dum = pd.get_dummies(data, drop_first=True)\ndata_dum.head(3)\n\n\n\n\n\n\n\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nPclass\n\n      \nHas_Cabin\n\n      \nCatAge\n\n      \nCatFare\n\n      \nFam_Size\n\n      \nSex_male\n\n      \nEmbarked_Q\n\n      \nEmbarked_S\n\n      \nTitle_Miss\n\n      \nTitle_Mr\n\n      \nTitle_Mrs\n\n      \nTitle_Special\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n3\n\n      \nFalse\n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n1\n\n      \n0\n\n      \n1\n\n      \n0\n\n      \n1\n\n      \n0\n\n      \n0\n\n    \n\n    \n\n      \n1\n\n      \n1\n\n      \nTrue\n\n      \n3\n\n      \n3\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n0\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \nFalse\n\n      \n1\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n      \n1\n\n      \n1\n\n      \n0\n\n      \n0\n\n      \n0\n\n    \n\n  \n\n\n\n\n\n\n\nFirst, split the data back into training and test sets. Then, transform them into arrays:\n\n\n# Split into test.train\ndata_train = data_dum.iloc[:891]\ndata_test = data_dum.iloc[891:]\n\n# Transform into arrays for scikit-learn\nX = data_train.values\ntest = data_test.values\ny = survived_train.values\n\n\n\n\nBuilding models with a New Dataset!\n\u00b6\n\n\nBuild a decision tree on a brand new feature-engineered dataset. To choose the hyperparameter \nmax_depth\n, we will use a variation on test train split called \u201ccross validation\u201d.\n\n\n\n\nSplit the dataset into 5 groups or folds. Then we hold out the first fold as a test set, fit the model on the remaining four folds, predict on the test set and compute the metric of interest. Next, we hold out the second fold as the test set, fit on the remaining data, predict on the test set and compute the metric of interest. Then similarly with the third, fourth and fifth.\n\n\nAs a result, we get five values of accuracy, from which we can compute statistics of interest, such as the median and/or mean and 95% confidence intervals.\n\n\nWe do this for each value of each hyperparameter that we are tuning and choose the set of hyperparameters that performs the best. This is called grid search.\n\n\nIn the following, we will use cross validation and grid search to choose the best \nmax_depth\n for the new feature-engineered dataset:\n\n\n# Setup the hyperparameter grid\ndep = np.arange(1,9)\nparam_grid = {'max_depth' : dep}\n\n# Instantiate a decision tree classifier: clf\nclf = tree.DecisionTreeClassifier()\n\n# Instantiate the GridSearchCV object: clf_cv\nclf_cv = GridSearchCV(clf, param_grid=param_grid, cv=5)\n\n# Fit it to the data\nclf_cv.fit(X, y)\n\n# Print the tuned parameter and score\nprint(\"Tuned Decision Tree Parameters: {}\".format(clf_cv.best_params_))\nprint(\"Best score is {}\".format(clf_cv.best_score_))\n\n\n\n\nTuned Decision Tree Parameters: {'max_depth': 3}\nBest score is 0.8294051627384961\n\n\n\nMake predictions on the test set, create a new column \nSurvived\n and store the predictions in it.\n\n\nSave the \nPassengerId\n and \nSurvived\n columns of \ndf_test\n to a .csv and submit it to Kaggle.\n\n\nY_pred = clf_cv.predict(test)\ndf_test['Survived'] = Y_pred\ndf_test[['PassengerId', 'Survived']].to_csv('results/dec_tree_feat_eng.csv', index=False)\n\n\n\n\nSubmit to Kaggle (4th)\n\u00b6\n\n\n\n\nGo to \nKaggle\n, log in, and search for \nTitanic: Machine Learning from Disaster\n. \n\n\nJoin the competition and submit the .csv file.\n\n\nAdd a description and submit.\n\n\nKaggle returns a ranking.\n\n\nAt the time of the first submission: score 0.78468 (from 0.77980), rank 4009 (a jump of 819 places).",
            "title": "EDA, Machine Learning, Feature Engineering, and Kaggle"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#how-to-start-with-supervised-learning-take-1",
            "text": "Approach supervised learning is the following:   Perform an Exploratory Data Analysis (EDA) on a dataset;  Build a quick and dirty model, or a baseline model, which can serve as a comparison against later models that we will build;  Iterate this process. We will do more EDA and build another model;  Engineer features: take the features that we already have and combine them or extract more information from them to eventually come to the last point, which is  Get a model that performs better.",
            "title": "How to Start with Supervised Learning (Take 1)"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#import-the-data-and-explore-it",
            "text": "# Import modules\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import tree\nfrom sklearn.metrics import accuracy_score\n\n# Figures inline and set visualization style\n%matplotlib inline\nsns.set()  # Import test and train datasets\ndf_train = pd.read_csv('data/train.csv')\ndf_test = pd.read_csv('data/test.csv')\n\n# View first lines of training data\ndf_train.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Survived \n       Pclass \n       Name \n       Sex \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n     \n   \n   \n     \n       0 \n       1 \n       0 \n       3 \n       Braund, Mr. Owen Harris \n       male \n       22.0 \n       1 \n       0 \n       A/5 21171 \n       7.2500 \n       NaN \n       S \n     \n     \n       1 \n       2 \n       1 \n       1 \n       Cumings, Mrs. John Bradley (Florence Briggs Th... \n       female \n       38.0 \n       1 \n       0 \n       PC 17599 \n       71.2833 \n       C85 \n       C \n     \n     \n       2 \n       3 \n       1 \n       3 \n       Heikkinen, Miss. Laina \n       female \n       26.0 \n       0 \n       0 \n       STON/O2. 3101282 \n       7.9250 \n       NaN \n       S \n     \n       The target variable is the variable we are trying to predict;  Other variables are known as \u201cfeatures\u201d (or \u201cpredictor variables\u201d, the features that we are using to predict the target variable).   Note that the  df_test  DataFrame doesn\u2019t have the  Survived  column because this is what we will try to predict!  # View first lines of test data\ndf_test.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Pclass \n       Name \n       Sex \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n     \n   \n   \n     \n       0 \n       892 \n       3 \n       Kelly, Mr. James \n       male \n       34.5 \n       0 \n       0 \n       330911 \n       7.8292 \n       NaN \n       Q \n     \n     \n       1 \n       893 \n       3 \n       Wilkes, Mrs. James (Ellen Needs) \n       female \n       47.0 \n       1 \n       0 \n       363272 \n       7.0000 \n       NaN \n       S \n     \n     \n       2 \n       894 \n       2 \n       Myles, Mr. Thomas Francis \n       male \n       62.0 \n       0 \n       0 \n       240276 \n       9.6875 \n       NaN \n       Q \n     \n      df_train.info()  <class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.6+ KB  df_train.describe()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Survived \n       Pclass \n       Age \n       SibSp \n       Parch \n       Fare \n     \n   \n   \n     \n       count \n       891.000000 \n       891.000000 \n       891.000000 \n       714.000000 \n       891.000000 \n       891.000000 \n       891.000000 \n     \n     \n       mean \n       446.000000 \n       0.383838 \n       2.308642 \n       29.699118 \n       0.523008 \n       0.381594 \n       32.204208 \n     \n     \n       std \n       257.353842 \n       0.486592 \n       0.836071 \n       14.526497 \n       1.102743 \n       0.806057 \n       49.693429 \n     \n     \n       min \n       1.000000 \n       0.000000 \n       1.000000 \n       0.420000 \n       0.000000 \n       0.000000 \n       0.000000 \n     \n     \n       25% \n       223.500000 \n       0.000000 \n       2.000000 \n       20.125000 \n       0.000000 \n       0.000000 \n       7.910400 \n     \n     \n       50% \n       446.000000 \n       0.000000 \n       3.000000 \n       28.000000 \n       0.000000 \n       0.000000 \n       14.454200 \n     \n     \n       75% \n       668.500000 \n       1.000000 \n       3.000000 \n       38.000000 \n       1.000000 \n       0.000000 \n       31.000000 \n     \n     \n       max \n       891.000000 \n       1.000000 \n       3.000000 \n       80.000000 \n       8.000000 \n       6.000000 \n       512.329200",
            "title": "Import the Data and Explore it"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#visual-exploratory-data-analysis-eda-and-a-first-model",
            "text": "With seaborn.  sns.countplot(x='Survived', data=df_train)  <matplotlib.axes._subplots.AxesSubplot at 0x7fc65fa0e668>   Take-away : in the training set, less people survived than didn\u2019t. Let\u2019s then build a first model that predicts that nobody survived.  This is a bad model as we know that people survived. But it gives us a  baseline : any model that we build later needs to do better than this one.   Create a column  Survived  for  df_test  that encodes \u2018did not survive\u2019 for all rows;  Save  PassengerId  and  Survived  columns of  df_test  to a .csv and submit to Kaggle.   df_test['Survived'] = 0\ndf_test[['PassengerId', 'Survived']].to_csv('results/no_survivors.csv', index=False)",
            "title": "Visual Exploratory Data Analysis (EDA) and a First Model"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-1st",
            "text": "Go to  Kaggle , log in, and search for  Titanic: Machine Learning from Disaster .   Join the competition and submit the .csv file.  Add a description and submit.  Kaggle returns a ranking.  At the time of the first submission: score 0.63679, rank 9387.",
            "title": "Submit to Kaggle (1st)"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#eda-on-feature-variables",
            "text": "Do some more Exploratory Data Analysis and build another model!  sns.countplot(x='Sex', data=df_train);   # kind is the facets\nsns.factorplot(x='Survived', col='Sex', kind='count', data=df_train)  <seaborn.axisgrid.FacetGrid at 0x7fc65fa35a20>   Take-away : Women were more likely to survive than men.  With this take-away, we can use pandas to figure out how many women and how many men survived:  df_train.head(1)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Survived \n       Pclass \n       Name \n       Sex \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n     \n   \n   \n     \n       0 \n       1 \n       0 \n       3 \n       Braund, Mr. Owen Harris \n       male \n       22.0 \n       1 \n       0 \n       A/5 21171 \n       7.25 \n       NaN \n       S \n     \n      # Chain a group by Sex, sum Survived\ndf_train.groupby(['Sex']).Survived.sum()  Sex\nfemale    233\nmale      109\nName: Survived, dtype: int64  # Chain calculations\nprint(df_train[df_train.Sex == 'female'].Survived.sum() /\n      df_train[df_train.Sex == 'female'].Survived.count())\n\nprint(df_train[df_train.Sex == 'male'].Survived.sum() /\n      df_train[df_train.Sex == 'male'].Survived.count())  0.742038216561\n0.188908145581  74% of women survived, while 19% of men survived.  Build a second model and predict that all women survived and all men didn\u2019t.   Create a column  Survived  for  df_test  that encodes the above prediction.  Save  PassengerId  and  Survived  columns of  df_test  to a .csv and submit to Kaggle.   df_test['Survived'] = df_test.Sex == 'female'\ndf_test['Survived'] = df_test.Survived.apply(lambda x: int(x))\ndf_test.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Pclass \n       Name \n       Sex \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n       Survived \n     \n   \n   \n     \n       0 \n       892 \n       3 \n       Kelly, Mr. James \n       male \n       34.5 \n       0 \n       0 \n       330911 \n       7.8292 \n       NaN \n       Q \n       0 \n     \n     \n       1 \n       893 \n       3 \n       Wilkes, Mrs. James (Ellen Needs) \n       female \n       47.0 \n       1 \n       0 \n       363272 \n       7.0000 \n       NaN \n       S \n       1 \n     \n     \n       2 \n       894 \n       2 \n       Myles, Mr. Thomas Francis \n       male \n       62.0 \n       0 \n       0 \n       240276 \n       9.6875 \n       NaN \n       Q \n       0 \n     \n      df_test[['PassengerId', 'Survived']].to_csv('results/women_survived.csv', index=False)",
            "title": "EDA on Feature Variables"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-2nd",
            "text": "Go to  Kaggle , log in, and search for  Titanic: Machine Learning from Disaster .   Join the competition and submit the .csv file.  Add a description and submit.  Kaggle returns a ranking.  At the time of the first submission: score 0.76555 (from 0.62679), rank 7274 (a jump of 2122 places).",
            "title": "Submit to Kaggle (2nd)"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#explore-the-data-more",
            "text": "# kind is the facets\nsns.factorplot(x='Survived', col='Pclass', kind='count', data=df_train)  <seaborn.axisgrid.FacetGrid at 0x7fc65f8dcf98>   Take-away : Passengers that travelled in first class were more likely to survive. On the other hand, passengers travelling in third class were more unlikely to survive.   # kind is the facets\nsns.factorplot(x='Survived', col='Embarked', kind='count', data=df_train)  <seaborn.axisgrid.FacetGrid at 0x7fc65f937c50>   Take-away : Passengers that embarked in Southampton were less likely to survive.",
            "title": "Explore the Data More!"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#eda-with-numeric-variables",
            "text": "sns.distplot(df_train.Fare, kde=False)  <matplotlib.axes._subplots.AxesSubplot at 0x7fc6633fb9e8>   Take-away : Most passengers paid less than 100 for travelling with the Titanic.  # Group by Survived, trace histograms of Fare with alpha color 0.6\ndf_train.groupby('Survived').Fare.hist(alpha=0.6)  Survived\n0    Axes(0.125,0.125;0.775x0.775)\n1    Axes(0.125,0.125;0.775x0.775)\nName: Fare, dtype: object   Take-away : It looks as though those that paid more had a higher chance of surviving.  # Remove NaN\ndf_train_drop = df_train.dropna()\n\nsns.distplot(df_train_drop.Age, kde=False)  <matplotlib.axes._subplots.AxesSubplot at 0x7fc65f64be80>   # Alternative to bars or scatter\nsns.stripplot(x='Survived', \n              y='Fare', \n              data=df_train, \n              alpha=0.3, jitter=True)  <matplotlib.axes._subplots.AxesSubplot at 0x7fc65f5cca58>   # Alternative to bars or scatter\nsns.swarmplot(x='Survived', \n              y='Fare', \n              data=df_train)  <matplotlib.axes._subplots.AxesSubplot at 0x7fc65f2e4ef0>   Take-away : Fare definitely seems to be correlated with survival aboard the Titanic.  # Group by Survived, describe Fare (descriptive statistics)\ndf_train.groupby('Survived').Fare.describe()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       count \n       mean \n       std \n       min \n       25% \n       50% \n       75% \n       max \n     \n     \n       Survived \n       \n       \n       \n       \n       \n       \n       \n       \n     \n   \n   \n     \n       0 \n       549.0 \n       22.117887 \n       31.388207 \n       0.0 \n       7.8542 \n       10.5 \n       26.0 \n       263.0000 \n     \n     \n       1 \n       342.0 \n       48.395408 \n       66.596998 \n       0.0 \n       12.4750 \n       26.0 \n       57.0 \n       512.3292 \n     \n      sns.lmplot(x='Age', \n           y='Fare', \n           hue='Survived', \n           data=df_train, \n           fit_reg=False, scatter_kws={'alpha':0.5})  <seaborn.axisgrid.FacetGrid at 0x7fc65f5ccba8>   sns.lmplot(x='Age', \n           y='Fare', \n           hue='Survived', \n           data=df_train, \n           fit_reg=True, scatter_kws={'alpha':0.5})  <seaborn.axisgrid.FacetGrid at 0x7fc65f22d710>   Take-away : It looks like those who survived either paid quite a bit for their ticket or they were young.  sns.pairplot(df_train_drop, hue='Survived')  <seaborn.axisgrid.PairGrid at 0x7fc65f8826d8>",
            "title": "EDA with Numeric Variables"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#a-first-machine-learning-model",
            "text": "A decision tree classifier, with the Python scikit-learn.",
            "title": "A First Machine Learning Model"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#how-to-start-with-supervised-learning-take-2",
            "text": "Now that we have done our homeworks with EDA\u2026  # Import modules\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport numpy as np\nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\n# Figures inline and set visualization style\n%matplotlib inline\nsns.set()  # Import data\ndf_train = pd.read_csv('data/train.csv')\ndf_test = pd.read_csv('data/test.csv')  df_train.info()  <class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.6+ KB  df_test.info()  <class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    418 non-null int64\nPclass         418 non-null int64\nName           418 non-null object\nSex            418 non-null object\nAge            332 non-null float64\nSibSp          418 non-null int64\nParch          418 non-null int64\nTicket         418 non-null object\nFare           417 non-null float64\nCabin          91 non-null object\nEmbarked       418 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB  # Store target variable of training data in a safe place\nsurvived_train = df_train.Survived\n\n# Concatenate (along the index or axis=1) training and test sets\n# to preprocess the data a little bit\n# and make sure that any operations that\n# we perform on the training set are also\n# being done on the test data set\ndata = pd.concat([df_train.drop(['Survived'], axis=1), df_test])  # The combined datasets (891+418 entries)\ndata.info()  <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1046 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1308 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB  Missing values for the  Age  and  Fare  columns! Also notice that  Cabin  and  Embarked  are also missing values and we will need to deal with that also at some point. However, now we will focus on fixing the numerical variables  Age  and  Fare , using the median of the of these variables where we know them. It\u2019s perfect for dealing with outliers. In other words, the median is useful to use when the distribution of data is skewed. Other ways to impute the missing values would be to use the mean or the mode.  # Impute missing numerical variables where NaN\ndata['Age'] = data.Age.fillna(data.Age.median())\ndata['Fare'] = data.Fare.fillna(data.Fare.median())\n\n# Check out info of data\ndata.info()  <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1309 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1309 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB  Encode the data with numbers with  .get_dummies() .   It creates a new column for female, called  Sex_female , and then a new column for  Sex_male , which encodes whether that row was male or female (1 if that row is a male - and a 0 if that row is female). Because of  drop_first  argument, we dropped  Sex_female  because, essentially, these new columns,  Sex_female  and  Sex_male , encode the same information.  data = pd.get_dummies(data, columns=['Sex'], drop_first=True)\ndata.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Pclass \n       Name \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n       Sex_male \n     \n   \n   \n     \n       0 \n       1 \n       3 \n       Braund, Mr. Owen Harris \n       22.0 \n       1 \n       0 \n       A/5 21171 \n       7.2500 \n       NaN \n       S \n       1 \n     \n     \n       1 \n       2 \n       1 \n       Cumings, Mrs. John Bradley (Florence Briggs Th... \n       38.0 \n       1 \n       0 \n       PC 17599 \n       71.2833 \n       C85 \n       C \n       0 \n     \n     \n       2 \n       3 \n       3 \n       Heikkinen, Miss. Laina \n       26.0 \n       0 \n       0 \n       STON/O2. 3101282 \n       7.9250 \n       NaN \n       S \n       0 \n     \n      # Select columns and view head\ndata = data[['Sex_male', 'Fare', 'Age','Pclass', 'SibSp']]\ndata.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Sex_male \n       Fare \n       Age \n       Pclass \n       SibSp \n     \n   \n   \n     \n       0 \n       1 \n       7.2500 \n       22.0 \n       3 \n       1 \n     \n     \n       1 \n       0 \n       71.2833 \n       38.0 \n       1 \n       1 \n     \n     \n       2 \n       0 \n       7.9250 \n       26.0 \n       3 \n       0 \n     \n      data.info()  <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 5 columns):\nSex_male    1309 non-null uint8\nFare        1309 non-null float64\nAge         1309 non-null float64\nPclass      1309 non-null int64\nSibSp       1309 non-null int64\ndtypes: float64(2), int64(2), uint8(1)\nmemory usage: 52.4 KB  All the entries are non-null now.",
            "title": "How to Start with Supervised Learning (Take 2)"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#build-a-decision-tree-classifier",
            "text": "\u201cWas  Sex_male \u201d less than 0.5? In other words, was the data point a female. If the answer to this question is  True , we can go down to the left and we get  Survived . If  False , we go down the right and we get  Dead .   That the first branch is on  Male  or not and that  Male  results in a prediction of  Dead . The gini coefficient is used to make these decisions.  Before fitting a model to the data, split it back into training and test sets:  data_train = data.iloc[:891]\ndata_test = data.iloc[891:]  scikit-learn requires the data as arrays, not DataFrames. Transform them.  X = data_train.values\ntest = data_test.values\n\n# and from above: survived_train = df_train.Survived\ny = survived_train.values  X  array([[  1.    ,   7.25  ,  22.    ,   3.    ,   1.    ],\n       [  0.    ,  71.2833,  38.    ,   1.    ,   1.    ],\n       [  0.    ,   7.925 ,  26.    ,   3.    ,   0.    ],\n       ..., \n       [  0.    ,  23.45  ,  28.    ,   3.    ,   1.    ],\n       [  1.    ,  30.    ,  26.    ,   1.    ,   0.    ],\n       [  1.    ,   7.75  ,  32.    ,   3.    ,   0.    ]])  Build a decision tree classifier! First create such a model with  max_depth=3  and then fit it the data. Name the model  clf , which is short for \u201cClassifier\u201d.  # Instantiate model and fit to data\n# The max depth is set at 3\nclf = tree.DecisionTreeClassifier(max_depth=3)\n\n# X is the indenpendent variables, y is the dependent variable\nclf.fit(X, y)  DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=3,\n            max_features=None, max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n            splitter='best')  Make predictions on the test set.  # Make predictions and store in 'Survived' column of df_test\nY_pred = clf.predict(test)\ndf_test['Survived'] = Y_pred\n\n# Save it\ndf_test[['PassengerId', 'Survived']].to_csv('results/1st_dec_tree.csv',\n                                            index=False)",
            "title": "Build a Decision Tree Classifier"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-3rd",
            "text": "Go to  Kaggle , log in, and search for  Titanic: Machine Learning from Disaster .   Join the competition and submit the .csv file.  Add a description and submit.  Kaggle returns a ranking.  At the time of the first submission: score 0.77990 (from 0.76555), rank 4828 (a jump of 2434 places).    # Compute accuracy on the training set\ntrain_accuracy = clf.score(X, y)\ntrain_accuracy  0.8271604938271605",
            "title": "Submit to Kaggle (3rd)"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#a-decision-tree-classifier-in-more-details",
            "text": "The Decision Tree Classifier we just built had a max_depth=3 and it looks like this:   The maximal distance between the first decision and the last is 3, so that\u2019s  max_depth=3 .  Generate images with  graphviz .  import graphviz\n\ntree_data = tree.export_graphviz(clf, out_file=None) \ngraph = graphviz.Source(tree_data)\n# Save the pdf\ngraph.render(\"img/tree_data\")  'img/tree_data.pdf'  We get a tree_data test file (the code for generating the image) and a pdf file. We can generate an image.  feature_names = list(data_train)\nfeature_names  ['Sex_male', 'Fare', 'Age', 'Pclass', 'SibSp']  #data_train\n#data_test\ntree_data = tree.export_graphviz(clf, out_file=None, \n                                feature_names=feature_names,\n                                class_names=None,\n                                filled=True, rounded=True,\n                                special_characters=True)  \ngraph = graphviz.Source(tree_data)  \ngraph    In building this model, what we are essentially doing is creating a  decision boundary  in the space of feature variables.",
            "title": "A Decision Tree Classifier in More Details"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#why-choose-max_depth3",
            "text": "The depth of the tree is known as a hyperparameter, which means a parameter we need to decide before we fit the model to the data. If we choose a larger  max_depth , we will get a more complex decision boundary;  the bias-variance trade-off.   If the decision boundary is too complex, we can overfit to the data, which means that the model will be describing noise as well as signal.  If the  max_depth  is too small, we might be underfitting the data, meaning that the model doesn\u2019t contain enough of the signal.   One way is to hold out a test set from the training data. We can then fit the model to the training data, make predictions on the test set and see how well the prediction does on the test set.  Split the original training data into training and test sets:  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, stratify=y)  Iterate over values of  max_depth  ranging from 1 to 9 and plot the accuracy of the models on training and test sets:  # Setup arrays to store train and test accuracies\ndep = np.arange(1, 9)\ntrain_accuracy = np.empty(len(dep))\ntest_accuracy = np.empty(len(dep))\n\n# Loop over different values of k\nfor i, k in enumerate(dep):\n    # Setup a k-NN Classifier with k neighbors: knn\n    clf = tree.DecisionTreeClassifier(max_depth=k)\n\n    # Fit the classifier to the training data\n    clf.fit(X_train, y_train)\n\n    # Compute accuracy on the training set\n    train_accuracy[i] = clf.score(X_train, y_train)\n\n    # Compute accuracy on the testing set\n    test_accuracy[i] = clf.score(X_test, y_test)\n\n# Generate plot\nplt.title('clf: Varying depth of tree')\nplt.plot(dep, test_accuracy, label = 'Testing Accuracy')\nplt.plot(dep, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.xlabel('Depth of tree')\nplt.ylabel('Accuracy')\nplt.show()   At  max_depth-3 , we get the same results as with the model before (around 82%).  As we increase the max_depth, we are going to fit better and better to the training data because we will make decisions that describe the training data. The accuracy for the training data will go up and up, but we see that this doesn\u2019t happen for the test data: we are overfitting.  So that\u2019s why we chose  max_depth=3 .",
            "title": "Why Choose max_depth=3?"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#feature-engineering",
            "text": "https://www.datacamp.com/community/tutorials/feature-engineering-kaggle  A process where we use domain knowledge of the data to create additional relevant features (create new columns, transform variables and more) that increase the predictive power of the learning algorithm and make the machine learning models perform even better.",
            "title": "Feature Engineering"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#how-to-start-with-feature-engineering",
            "text": "# Imports\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport numpy as np\nfrom sklearn import tree\nfrom sklearn.model_selection import GridSearchCV\n\n# Figures inline and set visualization style\n%matplotlib inline\nsns.set()  # Import data\ndf_train = pd.read_csv('data/train.csv')\ndf_test = pd.read_csv('data/test.csv')\n\n# Store target variable of training data in a safe place\nsurvived_train = df_train.Survived\n\n# Concatenate training and test sets\ndata = pd.concat([df_train.drop(['Survived'], axis=1), df_test])\n\n# View head\ndata.info()  <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    1309 non-null int64\nPclass         1309 non-null int64\nName           1309 non-null object\nSex            1309 non-null object\nAge            1046 non-null float64\nSibSp          1309 non-null int64\nParch          1309 non-null int64\nTicket         1309 non-null object\nFare           1308 non-null float64\nCabin          295 non-null object\nEmbarked       1307 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 122.7+ KB",
            "title": "How to Start with Feature Engineering"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#why-feature-engineer-at-all",
            "text": "",
            "title": "Why Feature Engineer At All?"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#titanics-passenger-titles",
            "text": "# View head of 'Name' column\ndata.Name.tail()  413              Spector, Mr. Woolf\n414    Oliva y Ocana, Dona. Fermina\n415    Saether, Mr. Simon Sivertsen\n416             Ware, Mr. Frederick\n417        Peter, Master. Michael J\nName: Name, dtype: object  These titles of course give us information on social status, profession, etc., which in the end could tell us something more about survival. use regular expressions to extract the title and store it in a new column \u2018Title\u2019:  # Extract Title from Name, store in column and plot barplot\n# One upper character, one lower character, one dot\ndata['Title'] = data.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\\.', x).group(1))  # New column Title is a new feature of the dataset \ndata.Title.head(3)  0      Mr\n1     Mrs\n2    Miss\nName: Title, dtype: object  sns.countplot(x='Title', data=data);\nplt.xticks(rotation=45);   # Substitute some title with their English form\ndata['Title'] = data['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Miss'})\n# Gather exceptions\ndata['Title'] = data['Title'].replace(['Don', 'Dona', 'Rev', 'Dr', 'Major', 'Lady', 'Sir', 'Col', 'Capt', 'Countess', 'Jonkheer'],'Special')  data.Title.head(3)  0      Mr\n1     Mrs\n2    Miss\nName: Title, dtype: object  sns.countplot(x='Title', data=data);\nplt.xticks(rotation=45);   # View tail of data (for change)\ndata.tail(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       PassengerId \n       Pclass \n       Name \n       Sex \n       Age \n       SibSp \n       Parch \n       Ticket \n       Fare \n       Cabin \n       Embarked \n       Title \n     \n   \n   \n     \n       415 \n       1307 \n       3 \n       Saether, Mr. Simon Sivertsen \n       male \n       38.5 \n       0 \n       0 \n       SOTON/O.Q. 3101262 \n       7.2500 \n       NaN \n       S \n       Mr \n     \n     \n       416 \n       1308 \n       3 \n       Ware, Mr. Frederick \n       male \n       NaN \n       0 \n       0 \n       359309 \n       8.0500 \n       NaN \n       S \n       Mr \n     \n     \n       417 \n       1309 \n       3 \n       Peter, Master. Michael J \n       male \n       NaN \n       1 \n       1 \n       2668 \n       22.3583 \n       NaN \n       C \n       Master",
            "title": "Titanic's Passenger Titles"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#passengers-cabins",
            "text": "There are several NaNs or missing values in the  Cabin  column. Those NaNs didn\u2019t have a cabin, which could tell us something about survival.  # View head of data\ndata[['Name', 'PassengerId', 'Ticket', 'Cabin']].head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Name \n       PassengerId \n       Ticket \n       Cabin \n     \n   \n   \n     \n       0 \n       Braund, Mr. Owen Harris \n       1 \n       A/5 21171 \n       NaN \n     \n     \n       1 \n       Cumings, Mrs. John Bradley (Florence Briggs Th... \n       2 \n       PC 17599 \n       C85 \n     \n     \n       2 \n       Heikkinen, Miss. Laina \n       3 \n       STON/O2. 3101282 \n       NaN \n     \n     \n       3 \n       Futrelle, Mrs. Jacques Heath (Lily May Peel) \n       4 \n       113803 \n       C123 \n     \n     \n       4 \n       Allen, Mr. William Henry \n       5 \n       373450 \n       NaN \n     \n      # Did they have a Cabin?\n# Return True is the passenger has a cabin\ndata['Has_Cabin'] = ~data.Cabin.isnull()\n\n# # View head of data\ndata[['Name', 'PassengerId', 'Ticket', 'Cabin', 'Has_Cabin']].head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Name \n       PassengerId \n       Ticket \n       Cabin \n       Has_Cabin \n     \n   \n   \n     \n       0 \n       Braund, Mr. Owen Harris \n       1 \n       A/5 21171 \n       NaN \n       False \n     \n     \n       1 \n       Cumings, Mrs. John Bradley (Florence Briggs Th... \n       2 \n       PC 17599 \n       C85 \n       True \n     \n     \n       2 \n       Heikkinen, Miss. Laina \n       3 \n       STON/O2. 3101282 \n       NaN \n       False \n     \n     \n       3 \n       Futrelle, Mrs. Jacques Heath (Lily May Peel) \n       4 \n       113803 \n       C123 \n       True \n     \n     \n       4 \n       Allen, Mr. William Henry \n       5 \n       373450 \n       NaN \n       False \n     \n      Drop these columns, except  Has_Cabin , in the actual  data  DataFrame; make sure to use the  inplace  argument in the  .drop()  method and set it to  True :  # Drop columns and view head\ndata.drop(['Cabin', 'Name', 'PassengerId', 'Ticket'], axis=1, inplace=True)\ndata.head()   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Sex \n       Age \n       SibSp \n       Parch \n       Fare \n       Embarked \n       Title \n       Has_Cabin \n     \n   \n   \n     \n       0 \n       3 \n       male \n       22.0 \n       1 \n       0 \n       7.2500 \n       S \n       Mr \n       False \n     \n     \n       1 \n       1 \n       female \n       38.0 \n       1 \n       0 \n       71.2833 \n       C \n       Mrs \n       True \n     \n     \n       2 \n       3 \n       female \n       26.0 \n       0 \n       0 \n       7.9250 \n       S \n       Miss \n       False \n     \n     \n       3 \n       1 \n       female \n       35.0 \n       1 \n       0 \n       53.1000 \n       S \n       Mrs \n       True \n     \n     \n       4 \n       3 \n       male \n       35.0 \n       0 \n       0 \n       8.0500 \n       S \n       Mr \n       False \n     \n      New features such as  Title  and  Has_Cabin .   Features that don\u2019t add any more useful information for the machine learning model are now dropped from the DataFrame.",
            "title": "Passenger's Cabins"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#handling-missing-values",
            "text": "data.info()  <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 9 columns):\nPclass       1309 non-null int64\nSex          1309 non-null object\nAge          1046 non-null float64\nSibSp        1309 non-null int64\nParch        1309 non-null int64\nFare         1308 non-null float64\nEmbarked     1307 non-null object\nTitle        1309 non-null object\nHas_Cabin    1309 non-null bool\ndtypes: bool(1), float64(2), int64(3), object(3)\nmemory usage: 133.3+ KB  Missing values in  Age ,  Fare , and  Embarked . Impute these missing values with the help of  .fillna()  and use the median to fill in the columns (or the mean, the mode, etc.).  # Impute missing values for Age, Fare, Embarked\ndata['Age'] = data.Age.fillna(data.Age.median())\ndata['Fare'] = data.Fare.fillna(data.Fare.median())\ndata['Embarked'] = data['Embarked'].fillna('S')\ndata.info()  <class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 9 columns):\nPclass       1309 non-null int64\nSex          1309 non-null object\nAge          1309 non-null float64\nSibSp        1309 non-null int64\nParch        1309 non-null int64\nFare         1309 non-null float64\nEmbarked     1309 non-null object\nTitle        1309 non-null object\nHas_Cabin    1309 non-null bool\ndtypes: bool(1), float64(2), int64(3), object(3)\nmemory usage: 133.3+ KB  data.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Sex \n       Age \n       SibSp \n       Parch \n       Fare \n       Embarked \n       Title \n       Has_Cabin \n     \n   \n   \n     \n       0 \n       3 \n       male \n       22.0 \n       1 \n       0 \n       7.2500 \n       S \n       Mr \n       False \n     \n     \n       1 \n       1 \n       female \n       38.0 \n       1 \n       0 \n       71.2833 \n       C \n       Mrs \n       True \n     \n     \n       2 \n       3 \n       female \n       26.0 \n       0 \n       0 \n       7.9250 \n       S \n       Miss \n       False",
            "title": "Handling Missing Values"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#binning-numerical-data",
            "text": "# Binning numerical columns\n# q=4 means 4 quantiles 0, 1, 2, 3\n# labels=False are numbers, not characters\ndata['CatAge'] = pd.qcut(data.Age, q=4, labels=False )\ndata['CatFare']= pd.qcut(data.Fare, q=4, labels=False)\ndata.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Sex \n       Age \n       SibSp \n       Parch \n       Fare \n       Embarked \n       Title \n       Has_Cabin \n       CatAge \n       CatFare \n     \n   \n   \n     \n       0 \n       3 \n       male \n       22.0 \n       1 \n       0 \n       7.2500 \n       S \n       Mr \n       False \n       0 \n       0 \n     \n     \n       1 \n       1 \n       female \n       38.0 \n       1 \n       0 \n       71.2833 \n       C \n       Mrs \n       True \n       3 \n       3 \n     \n     \n       2 \n       3 \n       female \n       26.0 \n       0 \n       0 \n       7.9250 \n       S \n       Miss \n       False \n       1 \n       1 \n     \n      # Drop the 'Age' and 'Fare' columns\ndata = data.drop(['Age', 'Fare'], axis=1)\ndata.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Sex \n       SibSp \n       Parch \n       Embarked \n       Title \n       Has_Cabin \n       CatAge \n       CatFare \n     \n   \n   \n     \n       0 \n       3 \n       male \n       1 \n       0 \n       S \n       Mr \n       False \n       0 \n       0 \n     \n     \n       1 \n       1 \n       female \n       1 \n       0 \n       C \n       Mrs \n       True \n       3 \n       3 \n     \n     \n       2 \n       3 \n       female \n       0 \n       0 \n       S \n       Miss \n       False \n       1 \n       1",
            "title": "Binning Numerical Data"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#number-of-members-in-family-onboard",
            "text": "Create a new column, which is the number of members in families that were onboard of the Titanic.  # Create column of number of Family members onboard\ndata['Fam_Size'] = data.Parch + data.SibSp\n\n# Drop columns\ndata = data.drop(['SibSp','Parch'], axis=1)\ndata.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Sex \n       Embarked \n       Title \n       Has_Cabin \n       CatAge \n       CatFare \n       Fam_Size \n     \n   \n   \n     \n       0 \n       3 \n       male \n       S \n       Mr \n       False \n       0 \n       0 \n       1 \n     \n     \n       1 \n       1 \n       female \n       C \n       Mrs \n       True \n       3 \n       3 \n       1 \n     \n     \n       2 \n       3 \n       female \n       S \n       Miss \n       False \n       1 \n       1 \n       0",
            "title": "Number of Members in Family Onboard"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#transforming-all-variables-into-numerical-variables",
            "text": "Transform all variables into numeric ones. We do this because machine learning models generally take numeric input.  # Transform into binary variables\n# Has_Cabin is a boolean\n# Sex becomes Sex_male=1 or 0\n# Embarked becomes Embarked_Q=1 or 0, Embarked_...\n# Title becomes Title_Miss=1 or 0, ...\n# The former variables are dropped, only the later variables remain\ndata_dum = pd.get_dummies(data, drop_first=True)\ndata_dum.head(3)   \n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }  \n   \n     \n       \n       Pclass \n       Has_Cabin \n       CatAge \n       CatFare \n       Fam_Size \n       Sex_male \n       Embarked_Q \n       Embarked_S \n       Title_Miss \n       Title_Mr \n       Title_Mrs \n       Title_Special \n     \n   \n   \n     \n       0 \n       3 \n       False \n       0 \n       0 \n       1 \n       1 \n       0 \n       1 \n       0 \n       1 \n       0 \n       0 \n     \n     \n       1 \n       1 \n       True \n       3 \n       3 \n       1 \n       0 \n       0 \n       0 \n       0 \n       0 \n       1 \n       0 \n     \n     \n       2 \n       3 \n       False \n       1 \n       1 \n       0 \n       0 \n       0 \n       1 \n       1 \n       0 \n       0 \n       0 \n     \n      First, split the data back into training and test sets. Then, transform them into arrays:  # Split into test.train\ndata_train = data_dum.iloc[:891]\ndata_test = data_dum.iloc[891:]\n\n# Transform into arrays for scikit-learn\nX = data_train.values\ntest = data_test.values\ny = survived_train.values",
            "title": "Transforming all Variables into Numerical Variables"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#building-models-with-a-new-dataset",
            "text": "Build a decision tree on a brand new feature-engineered dataset. To choose the hyperparameter  max_depth , we will use a variation on test train split called \u201ccross validation\u201d.   Split the dataset into 5 groups or folds. Then we hold out the first fold as a test set, fit the model on the remaining four folds, predict on the test set and compute the metric of interest. Next, we hold out the second fold as the test set, fit on the remaining data, predict on the test set and compute the metric of interest. Then similarly with the third, fourth and fifth.  As a result, we get five values of accuracy, from which we can compute statistics of interest, such as the median and/or mean and 95% confidence intervals.  We do this for each value of each hyperparameter that we are tuning and choose the set of hyperparameters that performs the best. This is called grid search.  In the following, we will use cross validation and grid search to choose the best  max_depth  for the new feature-engineered dataset:  # Setup the hyperparameter grid\ndep = np.arange(1,9)\nparam_grid = {'max_depth' : dep}\n\n# Instantiate a decision tree classifier: clf\nclf = tree.DecisionTreeClassifier()\n\n# Instantiate the GridSearchCV object: clf_cv\nclf_cv = GridSearchCV(clf, param_grid=param_grid, cv=5)\n\n# Fit it to the data\nclf_cv.fit(X, y)\n\n# Print the tuned parameter and score\nprint(\"Tuned Decision Tree Parameters: {}\".format(clf_cv.best_params_))\nprint(\"Best score is {}\".format(clf_cv.best_score_))  Tuned Decision Tree Parameters: {'max_depth': 3}\nBest score is 0.8294051627384961  Make predictions on the test set, create a new column  Survived  and store the predictions in it.  Save the  PassengerId  and  Survived  columns of  df_test  to a .csv and submit it to Kaggle.  Y_pred = clf_cv.predict(test)\ndf_test['Survived'] = Y_pred\ndf_test[['PassengerId', 'Survived']].to_csv('results/dec_tree_feat_eng.csv', index=False)",
            "title": "Building models with a New Dataset!"
        },
        {
            "location": "/EDA_Machine_Learning_Feature_Engineering_and_Kaggle/#submit-to-kaggle-4th",
            "text": "Go to  Kaggle , log in, and search for  Titanic: Machine Learning from Disaster .   Join the competition and submit the .csv file.  Add a description and submit.  Kaggle returns a ranking.  At the time of the first submission: score 0.78468 (from 0.77980), rank 4009 (a jump of 819 places).",
            "title": "Submit to Kaggle (4th)"
        },
        {
            "location": "/Apprenez a programmer en Python/",
            "text": "CONTENT\n\n\nShebang Line\n\n\nChapter 8, Exceptions\n\n\nChapter 10, Strings\n\n\nChapter 11, Lists and Tuples 1\n\n\nChapter 12, Lists and Tuples 2\n\n\nChapter 13, Dictionaries\n\n\nChapter 14, Files\n\n\nChapter 17, Classes and docstrings\n\n\nChapter 18, (Class) Properties\n\n\nChapter 19, Special Methods\n\n\nChapter 20, Heritage\n\n\nChapter 21, The for Loop Again\n\n\nChapter 23, Decorators\n\n\nChapter 24, Metaclasses\n\n\nChapter 25, Regular Expressions\n\n\nChapter 26, Time\n\n\nChapter 27, System Programming\n\n\nChapter 28, Maths\n\n\nChapter 29, Password Management\n\n\nChapter 30, Network\n\n\nChapter 31, Tkinter\n\n\nChapter 33, Distribute Scripts and Programs\n\n\nChapter 34, PEP\n\n\nChapter 35, More\u2026\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3. From Le Livre du Z\u00e9ro, Simple IT, 2011.\n\n\n\n\nShebang Line\n\u00b6\n\n\nshebang, top, file, environment, language, kernel, python2, python 2, python3, python 3, utf, utf8, utf-8\n\n\nOther names: sha-bang, hashbang, pound-bang, hash-pling.\n\n\nAt the top of scripts\n\n\n\n\nIn Windows, Python 2:\n\n\n#! python\n\n\n\n\n\n\nWindows, Python 3:\n\n\n#! python 3\n\n\n\n\n\n\nUNIX, Python 2:\n\n\n#!/usr/bin/env python\n\n\n\n\n\n\nUNIX, Python 3:\n\n\n#!/usr/bin/env python 3\n\n\n\n\n\n\nAdd:\n\n\n# -*coding: utf-8 -*-\n\n\n# -*coding: latin-1 -*-\n\n\n\n\n\n\n\n\nLaunch a script\n\n\n\n\nIn Windows, Python 2:\n\n\npython script.py\n\n\npy script.py\n\n\npy -2 script.py\n\n\npy -2.7 script.py\n\n\n\n\n\n\nIn UNIX, Python 2:\n\n\npython script.py\n\n\n\n\n\n\nIn Windows, Python 3:\n\n\npy -3 script.py\n\n\npy -3.5 script.py\n\n\n\n\n\n\nIn UNIX, Python 3:\n\n\npython3 script.py\n\n\n\n\n\n\n\n\nLaunch the shell/bash\n\n\n\n\nThe shell, Python 2:\n\n\npython\n\n\npy -2\n\n\npy -2.7\n\n\n\n\n\n\nThe bash, Python 2:\n\n\npython\n\n\npython2\n\n\n\n\n\n\nThe shell, Python 3:\n\n\npy -3\n\n\npy -3.5\n\n\n\n\n\n\nThe bash, Python 3:\n\n\npython3\n\n\n\n\n\n\n\n\nChapter 8, Exceptions\n\u00b6\n\n\nBasic.\n\n\n\n\ntry:\n block.\n\n\nexcept\n errors.\n\n\nelse:\n.\n\n\nfinally:\n.\n\n\nassert\n tests and conditions.\n\n\nraise\n an exception.\n\n\n\n\nChapter 10, Strings\n\u00b6\n\n\nBasic.\n\n\nA \n\"string\"\n.\n\n\n\n\nstr()\n function.\n\n\nupper()\n and \nlower()\n methods; upper/lower characters.\n\n\ncapitalize()\n method; first-letter upper character.\n\n\nleft()\n, \nright()\n, \ncenter()\n methods.\n\n\nstrip()\n, \nlstrip()\n, \nrstrip()\n methods; remove white space\n\n\nformat()\n method.\n\n\ncount()\n method.\n\n\nfind()\n method.\n\n\nreplace()\n method.\n\n\n[:]\n to subset a string.\n\n\nwhile\n loop on a string.\n\n\n\n\nChapter 11, Lists and Tuples 1\n\u00b6\n\n\nBasic.\n\n\ndelete, length, size\n\n\nLists are mutable; can add or remove elements from a list; can change the order of elements.\n\n\nA \n[list]\n.\n\n\n\n\ninsert()\n method.\n\n\nappend()\n method.\n\n\nextends()\n method.\n\n\ndel()\n function; delete an indexed element.\n\n\nremove()\n method; remove an occurrence.\n\n\nlen()\n function; length.\n\n\nfor\n loop, \nin\n a list.\n\n\nenumerate()\n function; return the index and elements.\n\n\n\n\nTuples are immutable; cannot be modified.\n\n\n(tuple)\n.\n\n\nChapter 12, Lists and Tuples 2\n\u00b6\n\n\nBasic.\n\n\nflexible, function, flexibility, parameter\n\n\nWith lists, functions can have an undetermined number of parameters (very flexible!):\n\n\n\n\ndef my_function(*parameter):\n.\n\n\ndef my_function(a, b, *parameter):\n.\n\n\n\n\nStrings and lists. Create, split, loop through a sequence. Even in a list of list.\n\n\n\n\nsplit()\n method.\n\n\njoin()\n method.\n\n\nfor\n loop, \nin\n a list.\n\n\n\n\nFind the \ntype()\n of a variable (integer, float, boolean, etc.)\n\n\nChapter 13, Dictionaries\n\u00b6\n\n\nBasic.\n\n\ndictionary, flexible, function, flexibility, parameter\n\n\nDictionaries are mutable; you can add or remove elements from a dictionary; order of elements is unimportant.\n\n\nOne-entry dictionary: \n{'key': 'value'}\n.\n\n\nWith dictionaries, functions can have an undetermined number of parameters (very flexible!):\n\n\n\n\ndef my_function(**parameter):\n.\n\n\ndef my_function(a, b, **parameter):\n.\n\n\n\n\nCombine lists and dictionaries in a function with an undetermined number of parameters:\n\n\n\n\ndef my_function(*, parameter, **parameter):\n.\n\n\n\n\ndef my_function(a, b, *parameter, **parameter):\n.\n\n\n\n\n\n\ndel dict['key']\n function; delete.\n\n\n\n\npop()\n method; pop out an element.\n\n\nfor\n loop, \nin\n a dictionary.\n\n\nin dict.keys()\n method; extract the dictionary \ndict\n in order.\n\n\nin dict.values()\n method; extract the values from dictionary \ndict\n.\n\n\nin dict.items()\n method to extract the keys and values from dictionary \ndict\n.\n\n\n\n\nChapter 14, Files\n\u00b6\n\n\nBasic.\n\n\nos\n module. Perform bash, shell operations such as opening, closing, reading, and writing files. Manage relative and absolute path. In UNIX and Windows.\n\n\n\n\nopen()\n method.\n\n\nclose()\n method.\n\n\nread()\n method.\n\n\n\n\nwrite()\n method.\n\n\n\n\n\n\nwith/as\n method; create aliases.\n\n\n\n\n\n\npickle\n module. Record objects in a file and retrieve them.\n\n\n\n\nPickler()\n method.\n\n\n\n\nChapter 17, Classes and docstrings\n\u00b6\n\n\nBasic.\n\n\nclass, instance, self\n\n\ndocstring\n module. Under a \nClass\n, a docstring documents the class. Under \ndef __init__():\n, a docstring documents the attributes. Under \ndef function():\n, a docstring documents the use of the function or class method, under \nvariable\n, a docstring documents the use of the variable.\n\n\nobject.__doc__\n method; accesses the docstring.\n\n\n__all__\n function; displays the list of public names (of objects).\n\n\npydoc\n module. Displays information about an object with the \nhelp(object)\n function.\n\n\ndir(object)\n function; returns an object\u2019s parameters (all the attributes, methods, functions).\n\n\nobject.__dict__\n method; returns an object\u2019s attributes.\n\n\nobject.__dict__[\"att_a\"] = \"att_b\"\n changes an object\u2019s attribute.\n\n\nChapter 18, (Class) Properties\n\u00b6\n\n\nBasic.\n\n\ninstance, constructor\n\n\nMore about the \ndef __init__():\n constructor.\n\n\nChapter 19, Special Methods\n\u00b6\n\n\nBasic.\n\n\nmathematics, display results\n\n\n\n\ndef __repr__(self):\n modifies the way an object is displayed when called.\n\n\n\n\ndef __str__(self):\n method modifies the way an object is displayed when printed.\n\n\n\n\n\n\ndef __getattr__():\n defines a message when an inexistent object\u2019s attributes is called (like a \ntry\n block) vs the built-in \nobject.__dict__\n\n\n\n\ndef __setattr__():\n does the same when an object\u2019s attribute is modified vs the built-in \nobject.__dict__[\"att_a\"] = \"att_b\"\n\n\ndef __delattr__():\n does the same when an object\u2019s attribute is deleted.\n\n\n\n\ndef __hasattr__():\n returns true or false if the attribute exists.\n\n\n\n\n\n\ndef __getitem__():\n, \ndef __setitem__():\n, and \ndef __delitem__():\n all define what to do when we write, respectively: \nobject[index]\n, \nobject[index] = value\n, and \ndel object[index]\n.\n\n\n\n\n\n\nobject.__contains__\n checks out if a list contains a specific element; like \nin\n\n\n\n\n\n\nobject.__len__()\n shows the size of an object.\n\n\n\n\n\n\nobject.__add__(4)\n is equivalent to \nobject + 4\n; \n\n\n\n\ndef __add():\n as well.\n\n\nobject.__sub__()\n or \n-\n.\n\n\n__mul__\n or \n*\n.\n\n\n__truediv__\n or \n/\n.\n\n\n__floordiv__\n or \n//\n.\n\n\n__mod__\n or \n%\n.\n\n\n__pow__\n or \n**\n.\n\n\n__radd__\n, \n__iadd__\n, etc.\n\n\ndef __eq__():\n or \n==\n.\n\n\n__ne__\n or \n!=\n.\n\n\n__gt__\n or \n>\n.\n\n\n__ge__\n or \n>=\n.\n\n\n__lt__\n or \n<\n.\n\n\n\n\n__le__\n or \n<=\n.\n\n\n\n\n\n\npickle\n module. Record objects in a file and retrieve them.\n\n\n\n\n\n\n__getstate__\n method.\n\n\n\n\n__setstate__\n method.\n\n\n\n\nChapter 20, Heritage\n\u00b6\n\n\nBasic.\n\n\nexcept\n\n\nClass heritage transfers all attributes, parameters and methods from a class to a subclass.\n\n\n\n\nissubclass\n verifies (true or false) if a class is a subclass of another class.\n\n\nisinstance\n verifies if an object comes from a class.\n\n\n\n\nA subclass can inherit from two or more classes (multiple heritage).\n\n\nMore exceptions in a \ntry\n block, \nexcept\n, heritage, \nAttributeError\n, \nException\n, \nBaseException\n, and resolution. \n\n\nExceptions are classes with hierarchy.\n\n\nChapter 21, The for Loop Again\n\u00b6\n\n\nBasic.\n\n\nRelated to the \nfor\n loop and how to dig deeper into the iterator with \n__iter__\n and \n__next__\n.\n\n\nIterator can also skip items in a list: iterate from 1 to 5, them jump to 10 and go on. A sort of conditional \nbreak\n. For that, we must generate intervals with \nyield\n.\n\n\nChapter 23, Decorators\n\u00b6\n\n\nAdvanced!\n\n\nsimplify code\n\n\nA decorator simplifies:\n\n\ndef function(...):\n    ...\n...\nfunction = decorator (function)\n\n\n\n\nWith:\n\n\n@decorator\ndef function(...):\n    ...\n\n\n\n\nThere are decorators without parameters, with parameters, applied to classes; chained together.\n\n\nUse:\n\n\n\n\nLimit a class instance to only one instance  or one object (a \nsingleton\n).\n\n\nAdd more control on the type of data going into functions. \n\n\n\n\nChapter 24, Metaclasses\n\u00b6\n\n\nAdvanced!\n\n\n__init__\n initiates an object with attributes, but does not create the object itself. \n\n\nIt is done by coding a new instance or with \n__new__\n. The method is useful to create immutable objects that cannot be modified.\n\n\nCreate dynamic classes with \ntype\n.\n\n\nChapter 25, Regular Expressions\n\u00b6\n\n\nBasic.\n\n\nregex, string, search, beginning, end, replace,  occurrence, character, class, group, number, numbered group, name, named\n\n\nre\n module.\n\n\nChapter 26, Time\n\u00b6\n\n\nBasic.\n\n\ndate, time, year, month, day, hour, minute, second, time zone, timezone, time delta, timedelta, time stamp, timestamp, format\n\n\ntime\n module and \ndatetime\n module.\n\n\nChapter 27, System Programming\n\u00b6\n\n\nBasic.\n\n\ninput, output, stdin, stdout, open, close, read, write, directory, file\n\n\nsys\n module and \nos\n module. Access system variables and control the operating system.\n\n\nsignal\n module. Read process signals sent to programs (such as stopping and exiting). \n\n\nAccess and control the OS console, enter CLI arguments, program actions usually done with the mouse and the keyboard. \n\n\nsystem\n module, related to \nos\n.\n\n\n\n\nos.system('ls')\n on Linux.\n\n\nos.system('dir')\n on Windows.\n\n\n\n\nFor example:\n\n\nimport os\n\ncmd = os.popen('ls')\n\ncmd\ncmd.read()\n\n\n\n\nChapter 28, Maths\n\u00b6\n\n\nBasic.\n\n\nmath\n module.\n\n\nEnables new methods in arithmetics, trigonometry, rounding: \npow()\n, \nsqrt()\n, \nexp()\n, \nfabs()\n, \nradians()\n, \ndegrees()\n, \nceil()\n, \nfloor()\n, \ntrunc()\n, etc\n\n\nfractions\n module.\n\n\nFraction()\n, \nfrom_float()\n, etc.\n\n\nrandom\n module.\n\n\nrandom()\n, \nrandrange()\n, \nrandint()\n, \nchoice()\n, etc.\n\n\nChapter 29, Password Management\n\u00b6\n\n\nWeb framework.\n\n\ngetpass\n module.\n\n\nReceive a password, cypher a password, etc.\n\n\nChapter 30, Network\n\u00b6\n\n\nWeb framework.\n\n\ntcp, protocol, client, server, connection, http, port, socket, connect,  \n\n\nsocket\n module and \nselect\n module.\n\n\nChapter 31, Tkinter\n\u00b6\n\n\nSoftware, application.\n\n\ngui, graphic, interface, window, button, interactive, box, toggle, widget, labels, square, checkbox, list, command\n\n\nTkinter\n module.\n\n\nChapter 33, Distribute Scripts and Programs\n\u00b6\n\n\nBasic.\n\n\nMethod 1: Executable File\n\n\ncx_freeze\n creates a standalone executable file. \ncx_Freeze\n is portable (Windows, Linux, Mac OS X), compatible with Py -2 and Py -3, simple, fast, flexible.\n\n\nDownload, install, use the \ncxfreeze\n script\n\n\nAlternative: \npy2exe\n (Windows only).\n\n\nMethod 2: Setup File\n\n\nThe traditional way of distributing a code and a more powerful approach.\n\n\nChapter 34, PEP\n\u00b6\n\n\nBasic.\n\n\n\n\nPEP 20: The Zen of Python.\n\n\nPEP 8: coding conventions.\n\n\nidentation, tabulation, line length, line spacing, encoding, importing, spacing, commenting, naming, coding comparisons.\n\n\n\n\n\n\nPEP 257: documentation and docstrings.\n\n\n\n\nChapter 35, More\u2026\n\u00b6\n\n\nBasic.\n\n\n\n\nReferences.\n\n\nWiki.\n\n\nPEP.\n\n\nDocumentation.\n\n\nBasic library\n\n\nAdditional libraries.\n\n\ngraphical interfaces: Tk, PyQT, PyGTK, wx Python.\n\n\nweb framworks: Django, CherryPy.\n\n\nnetworks: Twisted.\n\n\n\n\n\n\nIndex.",
            "title": "Apprenez \u00e0 programmer en Python"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-8-exceptions",
            "text": "Basic.   try:  block.  except  errors.  else: .  finally: .  assert  tests and conditions.  raise  an exception.",
            "title": "Chapter 8, Exceptions"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-10-strings",
            "text": "Basic.  A  \"string\" .   str()  function.  upper()  and  lower()  methods; upper/lower characters.  capitalize()  method; first-letter upper character.  left() ,  right() ,  center()  methods.  strip() ,  lstrip() ,  rstrip()  methods; remove white space  format()  method.  count()  method.  find()  method.  replace()  method.  [:]  to subset a string.  while  loop on a string.",
            "title": "Chapter 10, Strings"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-11-lists-and-tuples-1",
            "text": "Basic.  delete, length, size  Lists are mutable; can add or remove elements from a list; can change the order of elements.  A  [list] .   insert()  method.  append()  method.  extends()  method.  del()  function; delete an indexed element.  remove()  method; remove an occurrence.  len()  function; length.  for  loop,  in  a list.  enumerate()  function; return the index and elements.   Tuples are immutable; cannot be modified.  (tuple) .",
            "title": "Chapter 11, Lists and Tuples 1"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-12-lists-and-tuples-2",
            "text": "Basic.  flexible, function, flexibility, parameter  With lists, functions can have an undetermined number of parameters (very flexible!):   def my_function(*parameter): .  def my_function(a, b, *parameter): .   Strings and lists. Create, split, loop through a sequence. Even in a list of list.   split()  method.  join()  method.  for  loop,  in  a list.   Find the  type()  of a variable (integer, float, boolean, etc.)",
            "title": "Chapter 12, Lists and Tuples 2"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-13-dictionaries",
            "text": "Basic.  dictionary, flexible, function, flexibility, parameter  Dictionaries are mutable; you can add or remove elements from a dictionary; order of elements is unimportant.  One-entry dictionary:  {'key': 'value'} .  With dictionaries, functions can have an undetermined number of parameters (very flexible!):   def my_function(**parameter): .  def my_function(a, b, **parameter): .   Combine lists and dictionaries in a function with an undetermined number of parameters:   def my_function(*, parameter, **parameter): .   def my_function(a, b, *parameter, **parameter): .    del dict['key']  function; delete.   pop()  method; pop out an element.  for  loop,  in  a dictionary.  in dict.keys()  method; extract the dictionary  dict  in order.  in dict.values()  method; extract the values from dictionary  dict .  in dict.items()  method to extract the keys and values from dictionary  dict .",
            "title": "Chapter 13, Dictionaries"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-14-files",
            "text": "Basic.  os  module. Perform bash, shell operations such as opening, closing, reading, and writing files. Manage relative and absolute path. In UNIX and Windows.   open()  method.  close()  method.  read()  method.   write()  method.    with/as  method; create aliases.    pickle  module. Record objects in a file and retrieve them.   Pickler()  method.",
            "title": "Chapter 14, Files"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-17-classes-and-docstrings",
            "text": "Basic.  class, instance, self  docstring  module. Under a  Class , a docstring documents the class. Under  def __init__(): , a docstring documents the attributes. Under  def function(): , a docstring documents the use of the function or class method, under  variable , a docstring documents the use of the variable.  object.__doc__  method; accesses the docstring.  __all__  function; displays the list of public names (of objects).  pydoc  module. Displays information about an object with the  help(object)  function.  dir(object)  function; returns an object\u2019s parameters (all the attributes, methods, functions).  object.__dict__  method; returns an object\u2019s attributes.  object.__dict__[\"att_a\"] = \"att_b\"  changes an object\u2019s attribute.",
            "title": "Chapter 17, Classes and docstrings"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-18-class-properties",
            "text": "Basic.  instance, constructor  More about the  def __init__():  constructor.",
            "title": "Chapter 18, (Class) Properties"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-19-special-methods",
            "text": "Basic.  mathematics, display results   def __repr__(self):  modifies the way an object is displayed when called.   def __str__(self):  method modifies the way an object is displayed when printed.    def __getattr__():  defines a message when an inexistent object\u2019s attributes is called (like a  try  block) vs the built-in  object.__dict__   def __setattr__():  does the same when an object\u2019s attribute is modified vs the built-in  object.__dict__[\"att_a\"] = \"att_b\"  def __delattr__():  does the same when an object\u2019s attribute is deleted.   def __hasattr__():  returns true or false if the attribute exists.    def __getitem__(): ,  def __setitem__(): , and  def __delitem__():  all define what to do when we write, respectively:  object[index] ,  object[index] = value , and  del object[index] .    object.__contains__  checks out if a list contains a specific element; like  in    object.__len__()  shows the size of an object.    object.__add__(4)  is equivalent to  object + 4 ;    def __add():  as well.  object.__sub__()  or  - .  __mul__  or  * .  __truediv__  or  / .  __floordiv__  or  // .  __mod__  or  % .  __pow__  or  ** .  __radd__ ,  __iadd__ , etc.  def __eq__():  or  == .  __ne__  or  != .  __gt__  or  > .  __ge__  or  >= .  __lt__  or  < .   __le__  or  <= .    pickle  module. Record objects in a file and retrieve them.    __getstate__  method.   __setstate__  method.",
            "title": "Chapter 19, Special Methods"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-20-heritage",
            "text": "Basic.  except  Class heritage transfers all attributes, parameters and methods from a class to a subclass.   issubclass  verifies (true or false) if a class is a subclass of another class.  isinstance  verifies if an object comes from a class.   A subclass can inherit from two or more classes (multiple heritage).  More exceptions in a  try  block,  except , heritage,  AttributeError ,  Exception ,  BaseException , and resolution.   Exceptions are classes with hierarchy.",
            "title": "Chapter 20, Heritage"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-21-the-for-loop-again",
            "text": "Basic.  Related to the  for  loop and how to dig deeper into the iterator with  __iter__  and  __next__ .  Iterator can also skip items in a list: iterate from 1 to 5, them jump to 10 and go on. A sort of conditional  break . For that, we must generate intervals with  yield .",
            "title": "Chapter 21, The for Loop Again"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-23-decorators",
            "text": "Advanced!  simplify code  A decorator simplifies:  def function(...):\n    ...\n...\nfunction = decorator (function)  With:  @decorator\ndef function(...):\n    ...  There are decorators without parameters, with parameters, applied to classes; chained together.  Use:   Limit a class instance to only one instance  or one object (a  singleton ).  Add more control on the type of data going into functions.",
            "title": "Chapter 23, Decorators"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-24-metaclasses",
            "text": "Advanced!  __init__  initiates an object with attributes, but does not create the object itself.   It is done by coding a new instance or with  __new__ . The method is useful to create immutable objects that cannot be modified.  Create dynamic classes with  type .",
            "title": "Chapter 24, Metaclasses"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-25-regular-expressions",
            "text": "Basic.  regex, string, search, beginning, end, replace,  occurrence, character, class, group, number, numbered group, name, named  re  module.",
            "title": "Chapter 25, Regular Expressions"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-26-time",
            "text": "Basic.  date, time, year, month, day, hour, minute, second, time zone, timezone, time delta, timedelta, time stamp, timestamp, format  time  module and  datetime  module.",
            "title": "Chapter 26, Time"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-27-system-programming",
            "text": "Basic.  input, output, stdin, stdout, open, close, read, write, directory, file  sys  module and  os  module. Access system variables and control the operating system.  signal  module. Read process signals sent to programs (such as stopping and exiting).   Access and control the OS console, enter CLI arguments, program actions usually done with the mouse and the keyboard.   system  module, related to  os .   os.system('ls')  on Linux.  os.system('dir')  on Windows.   For example:  import os\n\ncmd = os.popen('ls')\n\ncmd\ncmd.read()",
            "title": "Chapter 27, System Programming"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-28-maths",
            "text": "Basic.  math  module.  Enables new methods in arithmetics, trigonometry, rounding:  pow() ,  sqrt() ,  exp() ,  fabs() ,  radians() ,  degrees() ,  ceil() ,  floor() ,  trunc() , etc  fractions  module.  Fraction() ,  from_float() , etc.  random  module.  random() ,  randrange() ,  randint() ,  choice() , etc.",
            "title": "Chapter 28, Maths"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-29-password-management",
            "text": "Web framework.  getpass  module.  Receive a password, cypher a password, etc.",
            "title": "Chapter 29, Password Management"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-30-network",
            "text": "Web framework.  tcp, protocol, client, server, connection, http, port, socket, connect,    socket  module and  select  module.",
            "title": "Chapter 30, Network"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-31-tkinter",
            "text": "Software, application.  gui, graphic, interface, window, button, interactive, box, toggle, widget, labels, square, checkbox, list, command  Tkinter  module.",
            "title": "Chapter 31, Tkinter"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-33-distribute-scripts-and-programs",
            "text": "Basic.  Method 1: Executable File  cx_freeze  creates a standalone executable file.  cx_Freeze  is portable (Windows, Linux, Mac OS X), compatible with Py -2 and Py -3, simple, fast, flexible.  Download, install, use the  cxfreeze  script  Alternative:  py2exe  (Windows only).  Method 2: Setup File  The traditional way of distributing a code and a more powerful approach.",
            "title": "Chapter 33, Distribute Scripts and Programs"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-34-pep",
            "text": "Basic.   PEP 20: The Zen of Python.  PEP 8: coding conventions.  identation, tabulation, line length, line spacing, encoding, importing, spacing, commenting, naming, coding comparisons.    PEP 257: documentation and docstrings.",
            "title": "Chapter 34, PEP"
        },
        {
            "location": "/Apprenez a programmer en Python/#chapter-35-more",
            "text": "Basic.   References.  Wiki.  PEP.  Documentation.  Basic library  Additional libraries.  graphical interfaces: Tk, PyQT, PyGTK, wx Python.  web framworks: Django, CherryPy.  networks: Twisted.    Index.",
            "title": "Chapter 35, More..."
        },
        {
            "location": "/Codecademy Python/",
            "text": "CONTENT\n\n\nUNIT 1, Python Syntax\n\n\nPython Syntax\n\n\nTip Calculator\n\n\nQuiz 1\n\n\n\n\n\n\nUNIT 2, Strings and Console Output\n\n\nStrings & Console Output\n\n\nDate and Time\n\n\nQuiz 2\n\n\nProject Python Mad Libs\n\n\n\n\n\n\nUNIT 3, Conditionals and Control Flow\n\n\nConditionals & Control Flow\n\n\nPygLatin\n\n\nQuiz 3\n\n\nProject Area Calculator\n\n\n\n\n\n\nUNIT 4, Functions\n\n\nFunctions\n\n\nTaking a Vacation\n\n\nQuiz 4\n\n\nProject Number Guess\n\n\n\n\n\n\nUNIT 5, Lists & Dictionaries\n\n\nLists and Dictionaries\n\n\nA Day at the Supermarket\n\n\nQuiz 5\n\n\nProject Rock, Paper, Scissors\n\n\n\n\n\n\nUNIT 6, Student Becomes the Teacher\n\n\nStudent Becomes the Teacher\n\n\n\n\n\n\nUNIT 7, Lists and Functions\n\n\nLists and Functions\n\n\nBattleship!\n\n\nBattleship FINAL!\n\n\nQuiz 7\n\n\n\n\n\n\nUNIT 8, Loops\n\n\nLoops\n\n\nPractice Makes Perfect\n\n\nQuiz 8\n\n\nProject Command Line Calendar\n\n\n\n\n\n\nUNIT 9, Exam Statistics\n\n\nExam Statistics\n\n\n\n\n\n\nUNIT 10, Advanced Topics in Python\n\n\nAdvanced Topics in Python\n\n\nIntroduction to Bitwise Operators\n\n\nProject RGB-HEX Converter\n\n\n\n\n\n\nUNIT 11, Introduction to Classes\n\n\nIntroduction to Classes\n\n\nMore on Classes\n\n\nQuiz 11\n\n\nProject Bank Account\n\n\n\n\n\n\nUNIT 12, File Input and Output\n\n\nFile Input/Output\n\n\n\n\n\n\nMore I/O\n\n\nQuiz 12\n\n\nProject DNA Analysis\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the course. Python 2. From Codecademy. \n\n\n\n\nUNIT 1, Python Syntax\n\u00b6\n\n\nPython Syntax\n\u00b6\n\n\nPython is an easy to learn programming language. You can use it to create web apps, games, even a search engine!\n\n\nprint \"Welcome to Python!\"\nprint(\"Welcome\")\nprint 5 + 3\nprint(5 + 5)\nprint \"What \" + str(3)\nprint \"What\",5\n\n\n\n\nWelcome to Python!\nWelcome\n8\n10\nWhat 3\nWhat 5\n\n\n\na = 30\nprint \"What \" + str(a)\n\nb = \"A list \\t*A  \\\\ \\\" \\' \"\nprint b\n\nc = 10 + 20\nprint c\n\n\n\n\nWhat 30\nA list  *A  \\ \" ' \n30\n\n\n\nprint \"1 : %r\" % (a) # read#\nprint \"2 : %s\" % (a) # string#\nprint \"? : %d\" % (a) # digit\nprint \"3 : %r\" % (b)\nprint \"4 : %s\" % (b)\n# print \"? : %d\" % (b) !!!\n\n\n\n\n1 : 30\n2 : 30\n? : 30\n3 : 'A list \\t*A  \\\\ \" \\' '\n4 : A list  *A  \\ \" '\n\n\n\nCreating web apps, games, and search engines all involve storing and working with different types of data. They do so using variables. A variable stores a piece of data, and gives it a specific name.\n\n\nmy_variable = 10\n\n\n\n\nYou just stored a number in a variable. Numbers are one data type we use in programming. A second data type is called a boolean. A boolean is like a light switch. It can only have two values. Just like a light switch can only be on or off, a boolean can only be \nTrue\n or \nFalse\n.\n\n\nmy_int = 7\nmy_float = 1.23\nmy_bool = True\n\n\n\n\nSay \nmy_int = 7\n. You can change the value of a variable by \u201creassigning\u201d it.\n\n\nmy_int = 7\n\nmy_int = 3\n\nprint my_int\n\n\n\n\n3\n\n\n\nIn Python, whitespace is used to structure code. Whitespace is important, so you have to be careful with how you use it.\n\n\ndef spam():\n    eggs = 12\n    return eggs\n\nprint spam()\n\n\n\n\n12\n\n\n\nYou\u2019ll get this error whenever your whitespace is off.\n\n\nThe interpreter runs your code line by line, and checks for any errors.\n\n\nYou probably saw us use the # sign a few times in earlier exercises. The # sign is for comments. A comment is a line of text that Python won\u2019t try to run as code. It\u2019s just for humans to read.\n\n\nComments make your program easier to understand. When you look back at your code or others want to collaborate with you, they can read your comments and easily figure out what your code does.\n\n\nThe \n#\n sign will only comment out a single line. While you could write a multi-line comment, starting each line with \n#\n, that can be a pain.\n\n\nInstead, for multi-line comments, you can include the whole block in a set of triple quotation marks:\n\n\n\"\"\"\nSipping from your cup 'til it runneth over,\nHoly Grail.\n\"\"\"\n\n\n\n\n\"\\nSipping from your cup 'til it runneth over,\\nHoly Grail.\\n\"\n\n\n\nGreat! Now let\u2019s do some math. You can add, subtract, multiply, divide numbers.\n\n\naddition = 72 + 23\nsubtraction = 108 - 204\nmultiplication = 108 * 0.5\ndivision = 108 / 9\n\ncount_to = 72 + 56\n\nprint count_to\n\n\n\n\n128\n\n\n\nAll that math can be done on a calculator, so why use Python? Because you can combine math with other data types (e.g. booleans) and commands to create useful programs. Calculators just stick to numbers.\n\n\nCreate a new variable called eight and set it to 8, or the result of 2 to the power to 3 (\n2 ^ 3\n oe \n2 ** 3\n).\n\n\neggs = 10 ** 2\n\nprint eggs\n\n\n\n\n100\n\n\n\nOur final operator is modulo. Modulo returns the remainder from a division. So, if you type \n3 % 2\n, it will return 1, because 2 goes into 3 evenly once, with 1 left over.\n\n\nspam = 5 % 4\n\nprint spam\n\n\n\n\n1\n\n\n\nTip Calculator\n\u00b6\n\n\nNow let\u2019s apply the concepts from the previous section to a real world example. You\u2019ve finished eating at a restaurant, and received this bill:\n\n\n\n\nCost of meal: $44.50\n\n\nRestaurant tax: 6.75%\n\n\nTip: 15%\n\n\n\n\nmeal = 44.50\ntax = 6.75/100 \ntip = 0.15\n\nmeal = meal + meal * tax\ntotal = meal + meal * tip\n\nprint(\"%.2f\") % total\n\n\n\n\n54.63\n\n\n\nQuiz 1\n\u00b6\n\n\nOK\n\n\nUNIT 2, Strings and Console Output\n\u00b6\n\n\nStrings & Console Output\n\u00b6\n\n\nAnother useful data type is the string. A string can contain letters, numbers, and symbols.\n\n\nname = \"Ryan\"\nage = \"19\"\nfood = \"cheese\"\n\n\n\n\nLet\u2019s get a little practice in with strings.\n\n\ncaesar = \"Graham\"\npraline = \"John\"\nviking = \"Teresa\"\n\nprint caesar\nprint praline\nprint viking\n\n\n\n\nGraham\nJohn\nTeresa\n\n\n\n'There's a snake in my boot!'\n\n\n\n\n  File \"<ipython-input-16-13621f01b99c>\", line 1\n    'There's a snake in my boot!'\n           ^\nSyntaxError: invalid syntax\n\n\n\nThis code breaks because Python thinks the apostrophe in \u2018There\u2019s\u2018 ends the string. We can use the backslash to fix the problem, like this:\n\n\n'There\\'s a snake in my boot!'\n'This isn\\'t flying, this is falling with style!'\n\n\n\n\n\"This isn't flying, this is falling with style!\"\n\n\n\nEach character in a string is assigned a number. This number is called the index. Check out the diagram in the editor.\n\n\nc = \"cats\"[0]\nn = \"Ryan\"[3]\n\n\"\"\"\nThe string \"PYTHON\" has six characters,\nnumbered 0 to 5, as shown below:\n\n+---+---+---+---+---+---+\n| P | Y | T | H | O | N |\n+---+---+---+---+---+---+\n  0   1   2   3   4   5\n\nSo if you wanted \"Y\", you could just type\n\"PYTHON\"[1] (always start counting from 0!)\n\"\"\"\nfifth_letter = \"MONTY\"[4]\n\nprint fifth_letter\n\n\n\n\nY\n\n\n\nNow that we know how to store strings, let\u2019s see how we can change them using string methods. String methods let you perform specific tasks for strings. We\u2019ll focus on four string methods:\n\n\n\n\nlen()\n\n\nlower()\n\n\nupper()\n\n\nstr()\n\n\n\n\nlength, string\n\n\nparrot = \"Norwegian Blue\"\n\nprint len(parrot) # length, number of characters, including blanks\nprint parrot.lower() # to lowercases\nprint parrot.upper() # to uppercases\n\npi = 3.14\n\nprint str(pi) # number of character in the string\n\n\n\n\n14\nnorwegian blue\nNORWEGIAN BLUE\n3.14\n\n\n\nlen(string)\n and \nstr(object)\n, but dot notation (such as \u201cString\u201d.upper()) for the rest.\n\n\nMethods that use dot notation only work with strings.\n\n\nOn the other hand, \nlen()\n and \nstr()\n can work on other data types.\n\n\nThe area where we\u2019ve been writing our code is called the editor. The console is where the results of your code is shown. \nprint\n simply displays your code in the console.\n\n\nprint \"Monty Python\"\n\nthe_machine_goes = \"Ping!\"\nprint the_machine_goes\n\n\n\n\nMonty Python\nPing!\n\n\n\nNow let\u2019s combine the two! The \n+\n operator between strings will \u2018add\u2019 them together, one after the other. Notice that there are spaces inside the quotation marks after Life and of so that we can make the combined string look like 3 words. Combining strings together like this is called concatenation. Let\u2019s try concatenating a few strings together now!\n\n\nprint \"Life \" + \"of \" + \"Brian\"\nprint \"Spam and eggs\"\n\n\n\n\nLife of Brian\nSpam and eggs\n\n\n\nSometimes you need to combine a string with something that isn\u2019t a string. In order to do that, you have to convert the non-string into a string. he \nstr()\n method converts non-strings into strings. In the above example, you convert the number 2 into a string and then you concatenate the strings together.\n\n\nprint \"The value of pi is around \" + str(3.14)\n\n\n\n\nThe value of pi is around 3.14\n\n\n\nWhen you want to print a variable with a string, the \n%\n operator after a string is used to combine a string with variables. The \n%\n operator will replace a \n%s\n in the string with the string variable that comes after it.\n\n\nstring_1 = \"Camelot\"\nstring_2 = \"place\"\n\nprint \"Let's not go to %s. 'Tis a silly %s.\" % (string_1, string_2)\n\nname = raw_input(\"What is your name?\")\nquest = raw_input(\"What is your quest?\")\ncolor = raw_input(\"What is your favorite color?\")\n\nprint \"Ah, so your name is %s, your quest is %s, \" \\\n    \"and your favorite color is %s.\" % (name, quest, color)\n\n\n\n\nLet's not go to Camelot. 'Tis a silly place.\nWhat is your name?Al\nWhat is your quest?Graal\nWhat is your favorite color?red\nAh, so your name is Al, your quest is Graal, and your favorite color is red.\n\n\n\nDate and Time\n\u00b6\n\n\nA lot of times you want to keep track of when something happened. We can do so in Python using \ndatetime\n. Here we\u2019ll use datetime to print the date and time in a nice format.\n\n\nfrom datetime import datetime # all functions from datetime are imported\n\nnow = datetime.now()\n\nprint now\nprint now.year\nprint now.month\nprint now.day\n\nprint '%s/%s/%s' % (now.month, now.day, now.year)\nprint '%s:%s:%s' % (now.hour, now.minute, now.second)\n\nprint '%s/%s/%s %s:%s:%s' % (now.month, now.day, now.year, now.hour, now.minute, now.second)\n\n\n\n\n2016-10-18 14:02:03.661000\n2016\n10\n18\n10/18/2016\n14:2:3\n10/18/2016 14:2:3\n\n\n\nQuiz 2\n\u00b6\n\n\ntime = datetime.now()\nprint time.day\n\ntime = datetime.now() #13:08:09\nprint str(time.hour) + \":\" + str(time.minute) + \":\" + str(time.second)\n\nnow = datetime.now() #2013-01-04 19:22:43\n\nprint '%s/%s/%s %s:%s:%s' % (now.day, now.month, now.year, now.hour, now.minute, now.second)\n\nday = 04\n\n\n\n\n18\n14:2:11\n18/10/2016 14:2:11\n\n\n\nProject Python Mad Libs\n\u00b6\n\n\nconcatenate, variable\n\n\nPython can be used for a variety of different tasks. In this project, we\u2019ll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story.\n\n\nMad Libs require:\n\n\n\n\nWords from the reader (for the blank spaces)\n\n\nA story to plug the words into\n\n\n\n\nFor this project, we\u2019ll provide you with the story (feel free to modify it), but it will be up to you to build a program that does the following:\n\n\n\n\nPrompt the user for input\n\n\nPrint the entire Mad Libs story with the user\u2019s input in the right places   \n\n\n\n\n\"\"\"\nPython can be used for a variety of different tasks. In this project, we'll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story.\n\"\"\"\n\nprint \"The program is running.\"\n\nname = raw_input(\"Input a name? \")\n\nadj_one = raw_input(\"Input an adjective? \")\nadj_two = raw_input(\"Input another adjective? \")\nadj_three = raw_input(\"Input a last adjective? \")\n\nverb_one = raw_input(\"Input a verb? \")\nverb_two = raw_input(\"Input another verb? \")\nverb_three = raw_input(\"Input a last verb? \")\n\nnoun_one = raw_input(\"Input a noun? \")\nnoun_two = raw_input(\"Input another noun? \")\nnoun_three = raw_input(\"Input another noun? \")\nnoun_four = raw_input(\"Input a last noun? \")\n\nanimal = raw_input(\"Input an animal? \")\nfood = raw_input(\"Input a food? \")\nfruit = raw_input(\"Input a fruit? \")\nnumber = raw_input(\"Input a number? \")\nsuperhero = raw_input(\"Input a superhero? \")\ncountry = raw_input(\"Input a country? \")\ndessert = raw_input(\"Input a dessert? \")\nyear = raw_input(\"Input a year? \")\nprint \"\"\n\n\n\n\nThe program is running.\nInput a name? Al\nInput an adjective? small\nInput another adjective? great\nInput a last adjective? yellow\nInput a verb? dig\nInput another verb? walk\nInput a last verb? eat\nInput a noun? spoon\nInput another noun? lamp\nInput another noun? table\nInput a last noun? pen\nInput an animal? dog\nInput a food? pasta\nInput a fruit? apple\nInput a number? 10\nInput a superhero? spiderman\nInput a country? mexico\nInput a dessert? apple pie\nInput a year? 2016\n\n\n\nThe template for the story.\n\n\nSTORY = \"This morning I woke up and felt %s because %s was going to finally %s over the big %s %s. On the other side of the %s were many %ss protesting to keep %s in stores. The crowd began to %s to the rythym of the %s, which made all of the %ss very %s. %s tried to %s into the sewers and found %s rats. Needing help, %s quickly called %s. %s appeared and saved %s by flying to %s and dropping %s into a puddle of %s. %s then fell asleep and woke up in the year %s, in a world where %ss ruled the world.\"\n\nprint STORY % (adj_one, name, verb_one, adj_two, noun_one, noun_two, animal, food, verb_two, noun_three, fruit, adj_three, name, verb_three, number, name, superhero, superhero, name, country, name, dessert, name, year, noun_four)\n\n\n\n\nThis morning I woke up and felt small because Al was going to finally dig over the big great spoon. On the other side of the lamp were many dogs protesting to keep pasta in stores. The crowd began to walk to the rythym of the table, which made all of the apples very yellow. Al tried to eat into the sewers and found 10 rats. Needing help, Al quickly called spiderman. spiderman appeared and saved Al by flying to mexico and dropping Al into a puddle of apple pie. Al then fell asleep and woke up in the year 2016, in a world where pens ruled the world.\n\n\n\nUNIT 3, Conditionals and Control Flow\n\u00b6\n\n\nConditionals & Control Flow\n\u00b6\n\n\nControl flow gives us this ability to choose among outcomes based off what else is happening in the program.\n\n\ndef clinic():\n\n    print \"You've just entered the clinic!\"\n    print \"Do you take the door on the left or the right?\"\n    answer = raw_input(\"Type left or right and hit 'Enter'.\").lower()\n    if answer == \"left\" or answer == \"l\":\n        print \"This is the Verbal Abuse Room, you heap of parrot droppings!\"\n    elif answer == \"right\" or answer == \"r\":\n        print \"Of course this is the Argument Room, I've told you that already!\"\n    else:\n        print \"You didn't pick left or right! Try again.\"\n        clinic() # launch the function back\n\nclinic()\n\n\n\n\nYou've just entered the clinic!\nDo you take the door on the left or the right?\nType left or right and hit 'Enter'.left\nThis is the Verbal Abuse Room, you heap of parrot droppings!\n\n\n\nComparators. There are six:\n\n\n\n\nEqual to: \n==\n\n\nNot equal to: \n!=\n\n\nLess than: \n<\n\n\nLess than or equal to: \n<=\n\n\nGreater than: \n>\n\n\nGreater than or equal to: \n>=\n\n\n\n\nNote that \n==\n compares whether two things are equal, and \n=\n assigns a value to a variable.\n\n\nbool_one = 1 + 2\nbool_two = 3\nbool_one == bool_two # true\n\n\n\n\nTrue\n\n\n\nBoolean operators compare statements and result in boolean values. There are three boolean operators:\n\n\n\n\nand\n, which checks if both the statements are True;\n\n\nor\n, which checks if at least one of the statements is True;\n\n\nnot\n, which gives the opposite of the statement.\n\n\n\n\nbool_one = 1 > 2 and 2 > 3 # false\nbool_two = False and True # false\nbool_one = True or False # true\nbool_two = 2 == 2 or 2 == 3 # true\nbool_one = not 40 != 41 # true\n\n\n\n\nif\n is a conditional statement.\n\n\nanswer = \"Left\"\n\nif answer == \"Left\":\n    print \"This is the Verbal Abuse Room, you heap of parrot droppings!\"\n\ndef using_control_once():\n\n    if \"A\"==\"A\":\n        return \"Success #1\"\n\ndef using_control_again():\n\n    if 1!=2:\n        return \"Success #2\"\n\nprint using_control_once()\nprint using_control_again()\n\n\n\n\nThis is the Verbal Abuse Room, you heap of parrot droppings!\nSuccess #1\nSuccess #2\n\n\n\nThe \nelse\n statement complements the \nif\n statement.\n\n\nanswer = \"'This but a scratch!\"\n\ndef black_knight():\n\n    if answer == \"'Tis but a scratch!\":\n        return True\n    else:             \n        return False  # Make sure this returns False\n\ndef french_soldier():\n\n    if answer == \"Go away, or I shall taunt you a second time!\":\n        return True\n    else:             \n        return False  # Make sure this returns False\n\nprint black_knight()\nprint french_soldier()\n\n\n\n\nFalse\nFalse\n\n\n\nelif\n is short for \u2018else if\u2019. It means exactly what it sounds like: \u201cotherwise, if the following expression is true, do this!\u201d\n\n\ndef greater_less_equal_5(answer):\n\n    if answer > 5:\n        return 1\n    elif answer < 5:          \n        return -1\n    else:\n        return 0\n\nprint greater_less_equal_5(4)\nprint greater_less_equal_5(5)\nprint greater_less_equal_5(6)\n\n\ndef the_flying_circus():\n\n    if 1 != 0 and 3 > 2:\n        return True\n    elif 0 == 0 or 2 == 2:\n        return False\n    else:\n        return True\n\nprint the_flying_circus()\n\n\n\n\n-1\n0\n1\nTrue\n\n\n\nPygLatin\n\u00b6\n\n\nNow let\u2019s take what we\u2019ve learned so far and write a Pig Latin translator. Pig Latin is a language game, where you move the first letter of the word to the end and add \u201cay.\u201d So \u201cPython\u201d becomes \u201cythonpay.\u201d \n\n\nprint 'Welcome to the Pig Latin Translator!'\n\noriginal = raw_input(\"Enter a word:\")\nif len(original) > 0 and original.isalpha():\n    print original\nelse:\n    print \"empty\"\n\n\npyg = 'ay'\n\noriginal = raw_input('Enter a word: ')\n\nif len(original) > 0 and original.isalpha():\n    word = original.lower()\n    first = word[0]\n    new_word = word + first + pyg\n    new_word = new_word[1:len(new_word)]\n    print new_word\nelse:\n    print 'empty'\n\n\n\n\nWelcome to the Pig Latin Translator!\nEnter a word:translator\ntranslator\nEnter a word: radiator\nadiatorray\n\n\n\nQuiz 3\n\u00b6\n\n\nTakeaway: there no limits to the number of \nelif\n.\n\n\nProject Area Calculator\n\u00b6\n\n\nPython is especially useful for doing math and can be used to automate many calculations. In this project, you\u2019ll create a calculator than can compute the area of a given shape, as selected by the user. The calculator will be able to determine the area of the following shapes:\n\n\n\n\nCircle\n\n\nTriangle\n\n\n\n\nThe program should do the following:\n\n\n\n\nPrompt the user to select a shape\n\n\nDepending on the shape the user selects, calculate the area of that shape\n\n\nPrint the area of that shape to the user\n\n\n\n\nPython is especially useful for doing math and can be used to automate many calculations.\n\n\nfrom math import pi\nfrom time import sleep\nfrom datetime import datetime\n\nnow = datetime.now() # from datetime\nprint \"The calculator is starting up at: \\n\"+str(now)\n\nprint \"\\nCurently: %s/%s/%s %s:%s\" %(now.month, now.day, now.year, now.hour, now.minute)\n\nsleep(1) # pause 1 sec\n\nhint = \"Don't forget to include the correct units!\"\n\n\nfrom math import pi\nfrom time import sleep\n\ndef question():\n\n        option = raw_input(\"Enter C for Circle or T for Triangle: \")\n        if option.upper() == 'C' or option.upper() == 'CIRCLE':\n            print circle()\n        elif option.upper() == 'T' or option.upper() == 'TRIANGLE':\n            print triangle()\n        else:\n            print \"Please answer with a C or T\", question() #!!!!!!\n\ndef circle():\n\n    radius = float(raw_input(\"Enter radius: \"))\n\n    areac = pi * (radius ** 2)\n    print \"The pie is baking...\"\n    sleep(1)\n    return(str(\"%.2f\" % areac)) # !!!!!\n\ndef triangle():\n\n    base = float(raw_input(\"Enter base: \"))\n    height = float(raw_input(\"Enter height: \"))\n    areat = base * height / 2\n    print \"Uni Bi Tri...\"\n    sleep(1)\n    return(str(\"%.2f\" % areat)) # !!!!!\n\nquestion()\n\n\n\n\nThe calculator is starting up at: \n2016-10-18 14:05:19.204000\n\nCurently: 10/18/2016 14:5\nEnter C for Circle or T for Triangle: T\nEnter base: 10\nEnter height: 5\nUni Bi Tri...\n25.00\n\n\n\nUNIT 4, Functions\n\u00b6\n\n\nFunctions\n\u00b6\n\n\nYou might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it\u2019s much cleaner to define a function, which can then be used repeatedly.\n\n\ndef tax(billa):\n\n    billb = float(billa) * 1.08\n    return billb\n\ndef tip(billc):\n\n    billd = float(billc) * 1.15\n    return billd\n\nmeal_cost = 100.00\nmeal_with_tax = tax(meal_cost)\nprint(\"With tax: %.2f\" % meal_with_tax) # !!!!!\nmeal_with_tip = tip(meal_with_tax)\nprint(\"With tip: %.2f\" % meal_with_tip)\n\n# The header, the comment, the body:\ndef spam():\n\n    \"\"\"print the string \"Eggs!\" to the console.\"\"\"\n    print \"Eggs!\"\n\n\n\n\nWith tax: 108.00\nWith tip: 124.20\n\n\n\nAfter defining a function, it must be called to be implemented.\n\n\ndef square(n):\n\n    \"\"\"Returns the square of a number.\"\"\"\n    squared = n ** 2\n    return(\"%d squared is %d.\" % (n, squared))\n\nprint square(10)\n\n\n\n\n10 squared is 100.\n\n\n\nFunctions can be much more powerful than that. For example, a function can call another function.\n\n\nn = 1\n\ndef one_good_turn(n):\n\n    return n + 1\n\ndef deserves_another(m):\n\n    return one_good_turn(m) + 2 # calling a function already defined\n\n\n\n\nAgain.\n\n\ndef cube(number):\n\n    return number ** 3\n\ndef by_three(number):\n\n    if number % 3 == 0:    \n        return cube(number)\n    else:\n        return False\n\nby_three(3)\n\n\n\n\n27\n\n\n\nImport modules to use custom functions.\n\n\nimport math\n\nprint math.sqrt(25)\n\n\n\n\n5.0\n\n\n\nHowever, we only really needed the sqrt function, and it can be frustrating to have to keep typing \nmath.sqrt()\n. It\u2019s possible to import only certain variables or functions from a given module (like \npi\n above). Pulling in just a single function from a module is called a function import, and it\u2019s done with the from keyword.\n\n\nfrom math import sqrt # module 'math', function 'sqrt'\nfrom math import pi # module 'math', variable 'pi'\n\n\n\n\nUniversal \nimport\n can handle all of the variables and functions in a module to avoid to constantly type \nmath\n.\n\n\nfrom math import *\n\n\n\n\nUniversal \nimport\n may look great on the surface, but they\u2019re not a good idea for one very important reason: they fill your program with a ton of variable and function names without the safety of those names still being associated with the module(s) they came from.\n\n\ndir(), dir\n\n\nimport math\n\neverything = dir(math)\nprint everything\n\n\n\n\n['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']\n\n\n\nFor these reasons, it\u2019s best to stick with either \nimport module\n and type \nmodule.name\n or just import specific variables and functions from various modules as needed.\n\n\nLet\u2019s look at some of the functions that are built in to Python (no modules required!).\n\n\ndef distance_from_zero(arg):\n\n    return abs(arg)\n\ndef biggest_number(arg1, arg2):\n\n    return min(arg1, arg2)\n\ndef smallest_number(*args):\n\n    return min(args)\n\nprint distance_from_zero(-10)\n\n\n\n\nprint biggest_number(-10, -5)\n\n\n\n\n-10\n\n\n\nprint biggest_number(-10, -5, 5, 10) # test\n\n\n\n\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-24-40abbc687778> in <module>()\n----> 1 print biggest_number(-10, -5, 5, 10) # test\n\n\nTypeError: biggest_number() takes exactly 2 arguments (4 given)\n\n\n\nprint smallest_number(1, 2)\nprint smallest_number(3, 4, 5, 6, 7)\nprint smallest_number(-10, -5, 5, 10)\n\n\n\n\n1\n3\n-10\n\n\n\nmaximum = max(-5, 3, 5, 10)\nprint maximum\n\nminimum = min(-3, -5)\nprint minimum\n\nabsolute = abs(-42)\nprint absolute\n\nprint type(42) # <type 'int'>\nprint type(4.2) # <type 'float'>\nprint type('spam') # <type 'str'>\n\n\n\n\n10\n-5\n42\n<type 'int'>\n<type 'float'>\n<type 'str'>\n\n\n\nTaking a Vacation\n\u00b6\n\n\ndef hotel_cost(nights):\n\n    return 140 * nights\n\ndef plane_ride_cost(city):\n\n    if city == \"Charlotte\":\n        return 183\n    elif city == \"Tampa\":\n        return 220\n    elif city == \"Pittsburgh\":\n        return 222\n    elif city == \"Los Angeles\":\n        return 475\n\ndef rental_car_cost(days):\n\n    cost = days * 40\n    if days >= 7:\n        cost -= 50\n    elif days >= 3 and days<7:\n        cost -= 20\n    else:\n        cost\n    return cost\n\ndef trip_cost(city, days, spending_money):\n\n    return rental_car_cost(days) + hotel_cost(days)+plane_ride_cost(city) + spending_money\n\nprint trip_cost(\"Los Angeles\", 5, 600)\n\n\n\n\n1955\n\n\n\nQuiz 4\n\u00b6\n\n\nOK\n\n\nProject Number Guess\n\u00b6\n\n\nWanna play a game? In this project, we\u2019ll build a program that rolls a pair of dice and asks the user to guess a number. Based on the user\u2019s guess, the program should determine a winner. If the user\u2019s guess is greater than the total value of the dice roll, they win! Otherwise, the computer wins.\n\n\nThe program should do the following:\n\n\n\n\nRandomly roll a pair of dice\n\n\nAdd the values of the roll\n\n\nAsk the user to guess a number\n\n\nCompare the user\u2019s guess to the total value\n\n\nDecide a winner (the user or the program)\n\n\nInform the user who the winner is\n\n\n\n\nfrom random import randint\nfrom time import sleep\n\ndef get_user_guess():\n\n    user_guess = int(raw_input(\"Guess a number: \"))\n    return user_guess\n\ndef roll_dice(number_of_sides):\n\n    first_roll = randint(1, number_of_sides)\n    second_roll = randint(1, number_of_sides)\n    max_value = number_of_sides * 2\n    print \"The maximum value is: \"+str(max_value)\n    sleep(1)\n    user_guess = get_user_guess()\n    if user_guess > max_value:\n        print \"Your guess is higher than the max allowed (\"+str(max_value)+\"). Please, take another guess.\"\n        return # exit the if block is condition met\n    else:\n        print \"Rolling...\"\n        sleep(1)\n        print \"First roll is: %d\" % (first_roll)\n        sleep(1)\n        print \"Second roll is: %d\" % (second_roll)\n        total_roll = first_roll + second_roll\n        print \"Result...\"\n        sleep(1)\n        if user_guess > total_roll:\n            print \"You win since your guess, \"+str(user_guess)+\", is greater than the total roll, \"+str(total_roll)\n            return # exit\n        else:\n            print \"You lose!\"\n            return # exit\n\nroll_dice(6)\n\n\n\n\nThe maximum value is: 12\nGuess a number: 5\nRolling...\nFirst roll is: 1\nSecond roll is: 2\nResult...\nYou win since your guess, 5, is greater than the total roll, 3\n\n\n\nUNIT 5, Lists & Dictionaries\n\u00b6\n\n\nLists and Dictionaries\n\u00b6\n\n\nLists are a datatype you can use to store a collection of different pieces of information as a sequence under a single variable name. (Datatypes you\u2019ve already learned about include strings, numbers, and booleans.)\n\n\nzoo_animals = [\"pangolin\", \"cassowary\", \"sloth\", \"kangourou\"];\n\n# You can access an individual item on the list by its index. An index is like an address that identifies the item's place in the list. The index appears directly after the list name, in between brackets, like this: list_name[index].\n\nif len(zoo_animals) > 3:\n    print \"The first animal at the zoo is the \" + zoo_animals[0]\n    print \"The second animal at the zoo is the \" + zoo_animals[1]\n    print \"The third animal at the zoo is the \" + zoo_animals[2]\n    print \"The fourth animal at the zoo is the \" + zoo_animals[3]\n\n\n\n\nThe first animal at the zoo is the pangolin\nThe second animal at the zoo is the cassowary\nThe third animal at the zoo is the sloth\nThe fourth animal at the zoo is the kangourou\n\n\n\nnumbers = [5, 6, 7, 8]\n\nprint \"Adding the numbers at indices 0 and 2...\"\nprint numbers[0] + numbers[2]\nprint \"Adding the numbers at indices 1 and 3...\"\nprint numbers[1] + numbers[3]\n\n\n\n\nAdding the numbers at indices 0 and 2...\n12\nAdding the numbers at indices 1 and 3...\n14\n\n\n\nA list doesn\u2019t have to have a fixed length. You can add items to the end of a list any time you like!\n\n\nsuitcase = []\n\nsuitcase.append(\"sunglasses\")\nsuitcase.append(\"calculator\")\nsuitcase.append(\"screen\")\nsuitcase.append(\"mouse\")\n\nlist_length = len(suitcase) # Set this to the length of suitcase\n\nprint list_length\n\nprint \"There are %d items in the suitcase.\" % (list_length)\nprint suitcase\n\n\n\n\n4\nThere are 4 items in the suitcase.\n['sunglasses', 'calculator', 'screen', 'mouse']\n\n\n\nsuitcase = [\"sunglasses\", \"hat\", \"passport\", \"laptop\", \"suit\", \"shoes\"]\n\nfirst  = suitcase[0:2] # The first and second items (index zero and one)\nmiddle = suitcase[2:4] # Third and fourth items (index two and three)\nlast = suitcase[4:6] # The last two items (index four and five)\n\n\n\n\nYou can slice a string exactly like a list! In fact, you can think of strings as lists of characters: each character is a sequential item in the list, starting from index 0.\n\n\nanimals = \"catdogfrog\"\n\ncat  = animals[:3] # The first three characters of animals\ndog  = animals[3:6] # The fourth through sixth characters\nfrog = animals[6:] # From the seventh character to the end\n\n\n\n\nSometimes you need to search for an item in a list.\n\n\nanimals = [\"aardvark\", \"badger\", \"duck\", \"emu\", \"fennec fox\"]\n\nduck_index = animals.index(\"duck\") # Use index() to find \"duck\"\n\nprint duck_index\n\nanimals.insert(duck_index,\"cobra\")\n\nprint animals # Observe what prints after the insert  operation\n\n\n\n\n2\n['aardvark', 'badger', 'cobra', 'duck', 'emu', 'fennec fox']\n\n\n\nIf you want to do something with every item in the list, you can use a for loop.\n\n\nmy_list = [1,9,3,8,5,7]\n\nfor number in my_list:\n    print 2 * number\n\n\n\n\n2\n18\n6\n16\n10\n14\n\n\n\nIf your list is a jumbled mess, you may need to \nsort()\n it.\n\n\nstart_list = [5, 3, 1, 2, 4]\nsquare_list = []\n\nfor var in start_list:\n    square_list.append(var ** 2)\n\nsquare_list.sort()\n\nprint square_list\n\n\n\n\n[1, 4, 9, 16, 25]\n\n\n\nA dictionary is similar to a list, but you access values by looking up a key instead of an index. A key can be any string or number. Dictionaries are great for things like phone books (pairing a name with a phone number), login pages (pairing an e-mail address with a username), and more!\n\n\nresidents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106}\n\nprint residents['Puffin'] # Prints Puffin's room number\nprint residents['Sloth']\nprint residents['Burmese Python']\n\n\n\n\n104\n105\n106\n\n\n\nAn empty pair of curly braces \n{}\n is an empty dictionary, just like an empty pair of \n[]\n is an empty list.\n\n\nLike Lists, Dictionaries are \u2018mutable\u2019. This means they can be changed after they are created. One advantage of this is that we can add new key-value pairs to the dictionary after it is created.\n\n\nThe length \nlen()\n of a dictionary is the number of key-value pairs it has. Each pair counts only once, even if the value is a list.\n\n\nmenu = {} # Empty dictionary\n\nmenu['Chicken Alfredo'] = 14.50 # Adding new key-value pair\n\nprint menu['Chicken Alfredo']\n\nmenu['General Tao'] = 12.00\nmenu['Pad Thai'] = 10.50\nmenu['Poutine'] = 9.00\n\nprint \"There are \" + str(len(menu)) + \" items on the menu.\"\nprint menu\n\nfor key, value in menu.iteritems(): # !!!!!\n    print key, value\n\nfor key, value in menu.iteritems(): # !!!!!\n    print key\n\nfor key, value in menu.iteritems(): # !!!!!\n    print value\n\n\n\n\n14.5\nThere are 4 items on the menu.\n{'Chicken Alfredo': 14.5, 'General Tao': 12.0, 'Poutine': 9.0, 'Pad Thai': 10.5}\nChicken Alfredo 14.5\nGeneral Tao 12.0\nPoutine 9.0\nPad Thai 10.5\nChicken Alfredo\nGeneral Tao\nPoutine\nPad Thai\n14.5\n12.0\n9.0\n10.5\n\n\n\nBecause dictionaries are mutable, they can be changed in many ways. Items can be removed from a dictionary with the \ndel()\n command.\n\n\n# key - animal_name : value - location \n\nzoo_animals = {\n'Unicorn' : 'Cotton Candy House',\n'Sloth' : 'Rainforest Exhibit',\n'Bengal Tiger' : 'Jungle House',\n'Atlantic Puffin' : 'Arctic Exhibit',\n'Rockhopper Penguin' : 'Arctic Exhibit'\n}\n\n\n\n\nA dictionary (or list) declaration may break across multiple lines\n\n\nRemoving the \u2018Unicorn\u2019 entry. (Unicorns are incredibly expensive.)\n\n\nzoo_animals = {\n'Unicorn' : 'Cotton Candy House',\n'Sloth' : 'Rainforest Exhibit',\n'Bengal Tiger' : 'Jungle House',\n'Atlantic Puffin' : 'Arctic Exhibit',\n'Rockhopper Penguin' : 'Arctic Exhibit'\n}\n\ndel zoo_animals['Unicorn']\ndel zoo_animals['Sloth']\ndel zoo_animals['Bengal Tiger']\nzoo_animals['Rockhopper Penguin'] = 'Cotton Candy House'\n\nprint zoo_animals\n\n\n\n\n{'Atlantic Puffin': 'Arctic Exhibit', 'Rockhopper Penguin': 'Cotton Candy House'}\n\n\n\nSometimes you need to remove something from a list.\n\n\nbackpack = ['xylophone', 'dagger', 'tent', 'bread loaf']\n\nbackpack.remove('dagger')\n\n\n\n\nWe can create a dictionary that holds many types of values.\n\n\nextract, sort, remove\n\n\ninventory = {\n    'gold' : 500,\n    'pouch' : ['flint', 'twine', 'gemstone'], # Assigned a new list to 'pouch' key\n    'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']\n}\n\nprint inventory\n\n# Adding a key 'burlap bag' and assigning a list to it\ninventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']\n\nprint inventory\n\n\n\n\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'gold': 500}\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\n# Sorting the list found under the key 'pouch'\ninventory['pouch'].sort() \n\nprint inventory\n\n\n\n\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\ninventory['pocket'] = ['seashell', 'strange berry', 'lint']\n\nprint inventory\n\n\n\n\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\ninventory['backpack'].sort()\n\nprint inventory\n\n\n\n\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'dagger', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\ninventory['backpack'].remove('dagger')\n\nprint inventory\n\n\n\n\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\ninventory['gold'] += 50\n\nprint inventory\n\n\n\n\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 550}\n\n\n\nA Day at the Supermarket\n\u00b6\n\n\nfor\n loops allow us to iterate through all of the elements in a list from the left-most (or zeroth element) to the right-most element.\n\n\nnames = [\"Adam\", \"Alex\", \"Mariah\", \"Martine\", \"Columbus\"]\n\nfor items in names:\n    print items\n\n\n\n\nAdam\nAlex\nMariah\nMartine\nColumbus\n\n\n\nYou can also use a for loop on a dictionary to loop through its keys.\n\n\nwebster = {\n    \"Aardvark\" : \"A star of a popular children's cartoon show.\",\n    \"Baa\" : \"The sound a goat makes.\",\n    \"Carpet\": \"Goes on the floor.\",\n    \"Dab\": \"A small amount.\"\n}\n\nfor item in webster:\n    print webster[item]\n\n\n\n\nA star of a popular children's cartoon show.\nGoes on the floor.\nA small amount.\nThe sound a goat makes.\n\n\n\nWhile looping, you may want to perform different actions depending on the particular item in the list.\n\n\na = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\nfor item in a:\n    if item % 2 == 0:\n        print item\n\n\n\n\n0\n2\n4\n6\n8\n10\n12\n\n\n\nFunctions can also take lists as inputs and perform various operations on those lists.\n\n\ndef count_small(numbers):\n\n    total = 0\n    for n in numbers:\n        if n < 10:\n            total = total + 1\n    return total\n\nlost = [4, 8, 15, 16, 23, 42]\nsmall = count_small(lost)\n\nprint small\n\n\n\n\n2\n\n\n\nYou can loop through strings the same way you loop through lists!\n\n\nfor letter in \"Codecademy\":\n    print letter\n\nword = \"Programming is fun!\"\n\nfor letter in word:\n    # Only print out the letter i\n    if letter == \"i\":\n        print letter\n\n\n\n\nC\no\nd\ne\nc\na\nd\ne\nm\ny\ni\ni\n\n\n\nYou are now the proud owner of your very own Codecademy brand supermarket. For paperwork and accounting purposes, let\u2019s record the total value of your inventory.\n\n\nprices = {\n    \"banana\" : 4,\n    \"apple\" : 2,\n    \"orange\" : 1.5,\n    \"pear\" : 3\n    }\n\nstock = {\n    \"banana\" : 6,\n    \"apple\" : 0,\n    \"orange\" : 32,\n    \"pear\" : 15\n    }\n\ntotal = 0\n\nfor item in prices:\n    print item # print key\n    print \"price: %s\" % prices[item] # print value\n    print \"stock: %s\" % stock[item]\n    print prices[item]*stock[item]\n    total += prices[item]*stock[item]\n\nprint total\n\n\n\n\norange\nprice: 1.5\nstock: 32\n48.0\npear\nprice: 3\nstock: 15\n45\nbanana\nprice: 4\nstock: 6\n24\napple\nprice: 2\nstock: 0\n0\n117.0\n\n\n\nIn order for customers to order online, we are going to have to make a consumer interface.\n\n\nshopping_list = [\"banana\", \"orange\", \"apple\"]\n\nstock = {\n    \"banana\" : 6,\n    \"apple\" : 0,\n    \"orange\" : 32,\n    \"pear\" : 15\n}\n\nprices = {\n    \"banana\" : 4,\n    \"apple\" : 2,\n    \"orange\" : 1.5,\n    \"pear\" : 3\n}\n\ndef compute_bill(food):\n\n    total = 0\n    for item in food:\n        if stock[item] > 0:\n            total += prices[item] # you only pick one from the stock!\n            stock[item] = stock[item] - 1 # the stock goes down by 1\n    print total\n    return food\n\nprint compute_bill(shopping_list)\n\n\n\n\n5.5\n['banana', 'orange', 'apple']\n\n\n\nQuiz 5\n\u00b6\n\n\nOK\n\n\nProject Rock, Paper, Scissors\n\u00b6\n\n\nIn this project, we\u2019ll build Rock-Paper-Scissors!\n\n\nThe program should do the following:\n\n\n\n\nPrompt the user to select either Rock, Paper, or Scissors\n\n\nInstruct the computer to randomly select either Rock, Paper, or Scissors\n\n\nCompare the user\u2019s choice and the computer\u2019s choice\n\n\nDetermine a winner (the user or the computer)\n\n\nInform the user who the winner is\n\n\n\n\nfrom random import randint\nfrom time import sleep\n\noptions = [\"R\", \"P\", \"S\"]\nLOSE = \"You lost!\" # constant, uppercase\nWIN = \"You win!\"\n\ndef decide_winner(user_choice, computer_choice):\n\n    print(\"You picked: \"+str(user_choice))\n    print \"Computer selecting...\"\n\n    sleep(1)\n\n    print(\"Computer picks: \"+str(computer_choice))\n\n    user_choice_index = options.index(user_choice)\n    computer_choice_index = options.index(computer_choice) # !!!!!\n\n    if user_choice_index == computer_choice_index:\n        print \"Tie!\"\n    elif user_choice_index == 0 and computer_choice_index == 2:\n        print WIN\n    elif user_choice_index == 1 and computer_choice_index == 0:\n        print WIN\n    elif user_choice_index == 2 and computer_choice_index == 1:\n        print WIN\n    elif user_choice_index > 2:\n        print \"Invalid choice!!!\"\n    else:\n        print LOSE\n\ndef play_RPS():\n\n    print \"Let's pay Rock-Paper-Scissors\"\n\n    user_choice = raw_input(\"Select R for Rock, P for Paper, or S for Scissors: \")\n\n    sleep(1)\n\n    user_choice = user_choice.upper()\n    # computer_choice = options[randint(0,2)] \n    # pull out an element from a list, the 1st (0) out of 3 (2)\n\n    computer_choice = options[randint(0,len(options)-1)] \n    # This will ensure that if we ever add more options to the game, we won't have to change this line of code.\n\n    decide_winner(user_choice, computer_choice)\n\nplay_RPS()\n\n\n\n\nLet's pay Rock-Paper-Scissors\nSelect R for Rock, P for Paper, or S for Scissors: r\nYou picked: R\nComputer selecting...\nComputer picks: S\nYou win!\n\n\n\nUNIT 6, Student Becomes the Teacher\n\u00b6\n\n\nStudent Becomes the Teacher\n\u00b6\n\n\nMake a gradebook for all of your students.\n\n\nFirst, create 3 dictionaries.\n\n\nSecond, add names, marks\u2026\n\n\nlloyd = {\n    \"name\" : \"Lloyd\",\n    \"homework\" : [90.0, 97.0, 75.0, 92.0],\n    \"quizzes\" : [88.0, 40.0, 94.0],\n    \"tests\" : [75.0, 90.0]\n}\n\nalice = {\n    \"name\": \"Alice\",\n    \"homework\" : [100.0, 92.0, 98.0, 100.0],\n    \"quizzes\" : [82.0, 83.0, 91.0],\n    \"tests\" : [89.0, 97.0]\n}\n\ntyler = {\n    \"name\" : \"Tyler\",\n    \"homework\" : [0.0, 87.0, 75.0, 22.0],\n    \"quizzes\" : [0.0, 75.0, 78.0],\n    \"tests\" : [100.0, 100.0]\n}\n\n\n\n\nThird, make a list.\n\n\nstudents= [lloyd, alice, tyler]\n\ncases = [\"homework\", \"quizzes\", \"tests\"]\n\nw_calc = [0.10, 0.30, 0.60]\n\nall_average = 0.0\n\n\n\n\nFour, print out.\n\n\nprint \"\\nStudents' Grades\".upper()\n\nprint \"\"\n\nfor student in students:\n    print student[\"name\"].upper()\n    print \"Homework\"\n    print student[\"homework\"]\n    print \"Quizzes\"\n    print student[\"quizzes\"]\n    print \"Tests\"\n    print student[\"tests\"]\n    print \"\"\n\n\n\n\nSTUDENTS' GRADES\n\nLLOYD\nHomework\n[90.0, 97.0, 75.0, 92.0]\nQuizzes\n[88.0, 40.0, 94.0]\nTests\n[75.0, 90.0]\n\nALICE\nHomework\n[100.0, 92.0, 98.0, 100.0]\nQuizzes\n[82.0, 83.0, 91.0]\nTests\n[89.0, 97.0]\n\nTYLER\nHomework\n[0.0, 87.0, 75.0, 22.0]\nQuizzes\n[0.0, 75.0, 78.0]\nTests\n[100.0, 100.0]\n\n\n\nCompute averages.\n\n\ndef average(numbers):\n\n    total = sum(numbers)\n    temp = float(total) / len(numbers)\n    return temp\n\nprint \"Students' Averages\".upper()\n\nprint \"\"\n\nfor c in cases:\n    cc = c.upper()\n    print cc\n    for student in students:\n        numbers = student[c]\n        calc = round(average(numbers),1)\n        print student[\"name\"]\n        print calc\n    print \"\"\n\n\n\n\nSTUDENTS' AVERAGES\n\nHOMEWORK\nLloyd\n88.5\nAlice\n97.5\nTyler\n46.0\n\nQUIZZES\nLloyd\n74.0\nAlice\n85.3\nTyler\n51.0\n\nTESTS\nLloyd\n82.5\nAlice\n93.0\nTyler\n100.0\n\n\n\nCompute weighted averages.\n\n\ndef w_average(marks):\n\n    #w_calc = [0.10, 0.30, 0.60]\n    s_calc = 0\n    w = 0\n    while w < len(w_calc):\n        s_calc += w_calc[w] * marks[w]\n        w += 1\n    return s_calc\n\ndef get_letter_grade(score):\n\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"\n\ndef get_class_average(ind):\n    class_total = round(ind / len(students), 1)\n    return class_total\n\nprint \"Students' Weighted Average\".upper()\n\nprint \" Ponderation [Homeworks, Quizzes, Tests]: [\"+str(float(w_calc[0])*100)+\", \"+str(float(w_calc[1])*100)+\", \"+str(float(w_calc[2])*100)+\"]\"\n\nprint \"\"\n\nfor student in students:\n    print(student[\"name\"] + \"'s marks are:\").upper()\n    l_calc = []\n    for c in cases:    \n        numbers = student[c]\n        calc = round(average(numbers),1)\n        l_calc.append(calc)\n    print l_calc\n    print(\"For a weighted average of:\")\n    ind_average = round(w_average(l_calc),1)\n    print ind_average\n    print(\"Standing for a:\")\n    print get_letter_grade(ind_average)\n    all_average += ind_average\n    print \"\"\n\nprint(\"Finally, The class average is:\").upper()\nprint get_class_average(all_average)\n\n\n\n\nSTUDENTS' WEIGHTED AVERAGE\n Ponderation [Homeworks, Quizzes, Tests]: [10.0, 30.0, 60.0]\n\nLLOYD'S MARKS ARE:\n[88.5, 74.0, 82.5]\nFor a weighted average of:\n80.5\nStanding for a:\nB\n\nALICE'S MARKS ARE:\n[97.5, 85.3, 93.0]\nFor a weighted average of:\n91.1\nStanding for a:\nA\n\nTYLER'S MARKS ARE:\n[46.0, 51.0, 100.0]\nFor a weighted average of:\n79.9\nStanding for a:\nC\n\nFINALLY, THE CLASS AVERAGE IS:\n83.8\n\n\n\nUNIT 7, Lists and Functions\n\u00b6\n\n\nLists and Functions\n\u00b6\n\n\nWhat you can do with a list: extract, add, append, remove, pop out, delete.\n\n\nn = [1, 3, 5]\nprint n[1]\n\nn[1] = n [1] * 5\nprint n\n\n# Add elements\nn.append(4)\nprint n\n\n# Remove elements\nn.pop(0)\nprint n\n\n\n\n\n3\n[1, 15, 5]\n[1, 15, 5, 4]\n[15, 5, 4]\n\n\n\nWhat you can do with functions.\n\n\nMultiply, divide.\n\n\nnumber = 5\n\ndef my_function(x):\n\n    return x * 3\n\n# Print my_function(5)\nprint my_function(number)\n\n\n\n\n15\n\n\n\nAdd, substract.\n\n\nm = 5\nn = 13\n\ndef add_function(x,y):\n\n    return x + y\n\nprint add_function(m, n)\n\n\n\n\n18\n\n\n\nConcatenate.\n\n\nn = \"Hello\"\n\ndef string_function(s):\n\n    return s + \" world\"\n\nprint string_function(n)\n\n\n\n\nHello world\n\n\n\nShow all.\n\n\nn = [3, 5, 7]\n\ndef list_function(x):\n\n    return x\n\nprint list_function(n)\n\n\n\n\n[3, 5, 7]\n\n\n\nShow some.\n\n\ndef list_function(x):\n\n    return x[1]\n\nn = [3, 5, 7]\n\nprint list_function(n)\n\n\n\n\n5\n\n\n\nExtract and modify.\n\n\ndef list_function(x):\n\n    x[1] = x[1] + 3\n    return x\n\nn = [3, 5, 7]\n\nprint list_function(n)\n\n\n\n\n[3, 8, 7]\n\n\n\nAdd elements.\n\n\nn = [3, 5, 7]\n\ndef list_extender(lst):\n\n    lst.append(9)\n    return lst\n\nprint list_extender(n)\n\n\n\n\n[3, 5, 7, 9]\n\n\n\nRemove elements.\n\n\nn = [3, 5, 7]\n\ndef list_shorter(lst):\n\n    lst.remove(5)\n    return lst\n\nprint list_shorter(n)\n\n\n\n\n[3, 7]\n\n\n\nPop out the 2nd element.\n\n\nn = [3, 5, 7]\n\ndef list_extract(lst):\n\n    lst.pop(1)\n    return lst\n\nprint list_extract(n)\n\n\n\n\n[3, 7]\n\n\n\nLoop through each element.\n\n\nn = [3, 5, 7]\n\ndef print_list(x):\n\n    for i in range(0, len(x)):\n        print x[i]\n\nprint print_list(n)\n\n\n\n\n3\n5\n7\nNone\n\n\n\nLoop, transform each element.\n\n\nn = [3, 5, 7]\n\ndef double_list(x):\n\n    for i in range(0, len(x)):\n        x[i] = x[i] * 2\n    return x\n\nprint double_list(n)\n\n\n\n\n[6, 10, 14]\n\n\n\nLoop, transform each element.\n\n\ndef my_function(x):\n\n    for i in range(0, len(x)):\n        x[i] = x[i] * 2\n    return x\n\nprint my_function(range(3))\n\nprint range(6) # => [0,1,2,3,4,5]\nprint range(1,6) # => [1,2,3,4,5]\nprint range(1,6,3) # => [1,4]\n\n\n\n\n[0, 2, 4]\n[0, 1, 2, 3, 4, 5]\n[1, 2, 3, 4, 5]\n[1, 4]\n\n\n\nLoop, fill the variable with \n+=\n (or \n-=\n, \n*=\n, \n/=\n)\n\n\nn = [3, 5, 7]\n\ndef total(numbers):\n\n    result = 0 # empty variable\n    for item in numbers:\n        result += item\n    return result\n\n\n\n\nEmpty variable, loop, fill the variable.\n\n\nn = [\"Michael\", \"Lieberman\"]\n\ndef join_strings(words):\n\n    result = \"\"\n    for item in words:\n        result = result + item\n    return result\n\nprint join_strings(n)\n\n\n\n\nMichaelLieberman\n\n\n\nJoin (not add up) the list. You want this to \nprint [1, 2, 3, 4, 5, 6]\n.\n\n\nm = [1, 2, 3]\nn = [4, 5, 6]\n\ndef join_lists(x,y):\n    return x + y\n\nprint join_lists(m, n)\n\n\n\n\n[1, 2, 3, 4, 5, 6]\n\n\n\nList of lists. Several loops.\n\n\nn = [\n    [1, 2, 3],\n    [4, 5, 6, 7, 8, 9]\n]\n\ndef flatten(lists):\n\n    results = []\n    for lst in lists:\n        for num in range(len(lst)):\n            results.append(lst[num])\n    return results\n\nprint flatten(n)\n\n\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nUse \nrange(len(lst))\n.\n\n\nrange, length\n\n\nprint range(6) # => [0,1,2,3,4,5]\n\n\n\n\n[0, 1, 2, 3, 4, 5]\n\n\n\nBattleship!\n\u00b6\n\n\nThis first script is incomplete (work in progress).\n\nThe next script is functional.\n\n\nfrom random import randint\n\nboard = []\n\nfor x in range(5):  # 0, 1, 2, 3, 4 (stop before 5)\n    board.append([\"O\"] * 5) # print 5 rows of 5 'O'\n\ndef print_board(board):\n\n    for row in board:\n        # print row # print ['O', 'O', 'O', 'O', 'O'] on 5 rows\n        print \" \".join(row) # print O O O O O \n\nprint \"Let's play Battleship!\"\n\ndef random_row(board): # hide the ship at r-c\n\n    return randint(0,len(board) - 1)\n\ndef random_col(board):\n\n    return randint(0,len(board) - 1)\n\nprint random_row(board)\nprint random_col(board)\n\nguess_row = int(raw_input(\"Guess Row (1 to 5):\")) # involve the player\nguess_col = int(raw_input(\"Guess Col (1 to 5):\"))\n\nprint ship_col # print ship position\nprint ship_row\n\nif (guess_row == ship_row) and (guess_col == ship_col):\n    print \"Congratulations! You sank my battleship!\"\n    guess_row=guess_row-1\n    guess_col=guess_col-1\n    board[guess_row][guess_col]=\"S\"\n    print print_board(board)\nelse:\n    #print \"You missed my battleship!\"\n    if guess_row not in range(5) or guess_row == 0 or guess_col not in range(5) or guess_col == 0: # condition for wrong entries\n        print \"Oops, that's not even in the ocean.\"\n    elif board[guess_row][guess_col] == \"X\":\n        print \"You guessed that one already.\"\n    else:\n        print \"You missed my battleship!\"\n\nguess_row = guess_row - 1 # transform the numbers, 1 becomes 0...\nguess_col = guess_col - 1\n\nboard[guess_row][guess_col] = \"X\" # replace the 'O'\nprint print_board(board)\n\n\n\n\nLet's play Battleship!\n4\n0\nGuess Row (1 to 5):1\nGuess Col (1 to 5):2\n\n\n\n---------------------------------------------------------------------------\n\nNameError                                 Traceback (most recent call last)\n\n<ipython-input-87-efd1e0de637a> in <module>()\n     24 guess_col = int(raw_input(\"Guess Col (1 to 5):\"))\n     25 \n---> 26 print ship_col # print ship position\n     27 print ship_row\n     28\n\n\nNameError: name 'ship_col' is not defined\n\n\n\nBattleship FINAL!\n\u00b6\n\n\nfrom random import randint\n\nboard = []\n\nfor x in range(5):\n    board.append([\"O\"] * 5)\n\ndef print_board(board):\n\n    for row in board:\n        print \" \".join(row)\n\nprint \"\\nLet's play Battleship! You have 4 strikes to sink by ship.\\n\"\nprint_board(board)\n\ndef random_row(board):\n\n    return randint(0, len(board) - 1)\n\ndef random_col(board):\n\n    return randint(0, len(board) - 1)\n\nship_row = random_row(board)\nship_col = random_col(board)\n#ship_row = 1 to test and fix to (1,1)\n#ship_col = 1\n\nfor turn in range(5):\n    turn += 1\n    if turn == 5:\n        print \"\\nGame Over\"\n        print \"The ship was here => I\\n\"\n        board[ship_row - 1][ship_col - 1] = \"I\"\n        print_board(board)\n        break\n    else:\n        print \"\\nTurn\", turn\n\n        guess_row = int(raw_input(\"Guess Row (1 to 5): \"))\n        guess_col = int(raw_input(\"Guess Col (1 to 5): \"))\n\n        if (guess_row == ship_row) and (guess_col == ship_col):\n            print \"\\nCongratulations! You sank my battleship!\\n\"\n\n            guess_row = guess_row - 1\n            guess_col = guess_col - 1\n            board[guess_row][guess_col] = \"S\"\n\n            print_board(board)\n            print \"\\nGame Over\"\n            break\n\n        elif (guess_row < 1 or guess_row > 5) or (guess_col < 1 or guess_col > 5):\n            print \"\\nOops, that's not even in the ocean.\\n\"\n\n        elif board[guess_row - 1][guess_col - 1] == \"X\":\n            print \"\\nYou guessed that one already.\\n\"\n            print_board(board)\n\n        else:\n            print \"\\nYou missed my battleship!\\n\"\n            board[guess_row - 1][guess_col - 1] = \"X\"\n            print_board(board)\n\n\n\n\nLet's play Battleship! You have 4 strikes to sink by ship.\n\nO O O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 1\nGuess Row (1 to 5): 1\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 2\nGuess Row (1 to 5): 2\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 3\nGuess Row (1 to 5): 3\nGuess Col (1 to 5): 5\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O O O O\nO O O O O\n\nTurn 4\nGuess Row (1 to 5): 4\nGuess Col (1 to 5): 3\n\nCongratulations! You sank my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O S O O\nO O O O O\n\nGame Over\n\n\n\nJoining.\n\n\njoin, split\n\n\nletters = ['a', 'b', 'c', 'd']\n\nprint \" \".join(letters) # a b c d\nprint \"---\".join(letters) # #---b---c---d\n\n\n\n\na b c d\na---b---c---d\n\n\n\nRandomizing.\n\n\nrandom, rand\n\n\nfrom random import randint\n\ncoin = randint(0, 1) # randint(low, high)\ndice = randint(1, 6)\n\n\n\n\nQuiz 7\n\u00b6\n\n\nTakeaway.\n\n\nmy_list = [1, 3, 5, 7]\n\nmy_list.pop(3) # remove the 4th\nmy_list.remove(3) # remove the '3'\n\nrange(0, len(my_list)) # every list item\nrange(0, len(my_list), 2) # every other list item\n\n\n\n\n[0]\n\n\n\nUNIT 8, Loops\n\u00b6\n\n\nLoops\n\u00b6\n\n\nA \nwhile\n loop is a sort of \nif\n.\n\n\ncount = 0\n\nif count <= 9: # \n    print \"Hello, I am an if statement and count is\", count\n\n\n\n\nHello, I am an if statement and count is 0\n\n\n\nwhile count <= 9: # similar to if: executes as long as the condition is true\n    print \"Hello, I am a while and count is\", count\n    count += 1\n\n\n\n\nHello, I am a while and count is 0\nHello, I am a while and count is 1\nHello, I am a while and count is 2\nHello, I am a while and count is 3\nHello, I am a while and count is 4\nHello, I am a while and count is 5\nHello, I am a while and count is 6\nHello, I am a while and count is 7\nHello, I am a while and count is 8\nHello, I am a while and count is 9\n\n\n\nA \nwhile\n loop allows control (checkpoint, a switch, on and off).\n\n\nloop_condition = True\n\nwhile loop_condition: # On\n    print \"I am a loop\"\n    loop_condition = False # Off\n\n\n\n\nI am a loop\n\n\n\nnum = 1\n\nwhile num <= 10: # the condition\n    print num ** 2\n    num += num ** (1/2)\n    print num\n\n\n\n\n1\n2\n4\n3\n9\n4\n16\n5\n25\n6\n36\n7\n49\n8\n64\n9\n81\n10\n100\n11\n\n\n\nA common application of a \nwhile\n loop is to check user input to see if it is valid.\n\n\nchoice = raw_input('Enjoying the course? (y/n)')\n\nwhile choice != \"y\" and choice != \"n\":\n    choice = raw_input(\"Sorry, I didn't catch that. Enter again (case sensitive): \")\n\n\n\n\nEnjoying the course? (y/n)y\n\n\n\nbreak\n means \u201cexit the current loop\u201d. Opposite to \nbreak\n is \ncontinue\n.\n\n\ncount = 0\n\nwhile True:\n    print count\n    count += 1\n    if count >= 10:\n        break\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\nwhile\n/\nelse\n are like \nif\n/\nelse\n; \nelse\n is executed when \nwhile\n is false.\n\n\nimport random\n\nprint \"Lucky Numbers! 3 numbers will be generated.\"\nprint \"If one of them is a '5', you lose!\"\n\ncount = 0\n\nwhile count < 3:\n    num = random.randint(1, 6)\n    print num\n    if num == 5:\n        print \"Sorry, you lose!\"\n        break\n    count += 1\nelse:\n    print \"You win!\"\n\n\n\n\nLucky Numbers! 3 numbers will be generated.\nIf one of them is a '5', you lose!\n5\nSorry, you lose!\n\n\n\nGuess game.\n\n\nfrom random import randint\n\n# Generates a number from 1 through 10 inclusive\nrandom_number = randint(1, 10)\n\n# print random_number\nguesses_left = 3\nprint \"Guess right!\"\n\nwhile guesses_left > 0:\n    print \"You have \"+str(guesses_left)+\" attempts.\"\n    guess = raw_input(\"Guess a number from 1 to 10: \")\n    if int(guess) == random_number:\n        print \"You win!\"\n        break\n    elif guesses_left == 1:\n        print \"You lose.\"\n        break\n    else:\n        guesses_left -= 1\n        print \"Try again.\"\n\n\n\n\nGuess right!\nYou have 3 attempts.\nGuess a number from 1 to 10: 2\nTry again.\nYou have 2 attempts.\nGuess a number from 1 to 10: 6\nTry again.\nYou have 1 attempts.\nGuess a number from 1 to 10: 9\nYou lose.\n\n\n\nif\n loop.\n\n\nprint \"Counting...\"\n\nfor i in range(20):\n    print i\n\n\n\n\nCounting...\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\nCreate a list.\n\n\nhobbies = []\n\nprint hobbies\n\nfor i in range(3):\n    hobby = raw_input(\"Enter a hobby: \")\n    hobbies.append(hobby)\n\nprint hobbies\n\n\n\n\n[]\nEnter a hobby: fishing\nEnter a hobby: skiing\nEnter a hobby: knitting!!!\n['fishing', 'skiing', 'knitting!!!']\n\n\n\nRun though a string, but each character will be spaced out.\n\n\nthing = \"spam!\"\n\nfor c in thing:\n    print c\n\nword = \"eggs!\"\n\nfor char in word:\n    print char, # , print on the same line\n\n\n\n\ns\np\na\nm\n!\ne g g s !\n\n\n\nReplace a character in a string. \n,\n print on the same line.\n\n\nphrase = \"A bird in the hand...\"\n\nfor char in phrase:\n    if char == \"A\" or char == \"a\":\n        print \"X\",\n    else:\n        print char,\n\n\n\n\nX   b i r d   i n   t h e   h X n d . . .\n\n\n\nRun though a list.\n\n\nnumbers  = [7, 9, 12, 54, 99]\n\nprint \"This list contains: \"\n\nfor num in numbers:\n    print num\n\nfor numm in numbers:\n    print numm ** 2,\n\n\n\n\nThis list contains: \n7\n9\n12\n54\n99\n49 81 144 2916 9801\n\n\n\nRun though a dictionary.\n\n\nd = {'a' : 'apple', 'b' : 'berry', 'c' : 'cherry'}\n\nfor key in d:\n    # key:value\n    print key+\" \"+d[key]\n    print key # key\n    print d[key] # value\n\n\n\n\na apple\na\napple\nc cherry\nc\ncherry\nb berry\nb\nberry\n\n\n\nEnumerate a list (numbers and members).\n\n\nchoices = ['pizza', 'pasta', 'salad', 'nachos']\n\nprint 'Your choices are:'\nfor index, item in enumerate(choices):\n    print index + 1, item\n\n\n\n\nYour choices are:\n1 pizza\n2 pasta\n3 salad\n4 nachos\n\n\n\nMultiple lists.\n\n\nlist_a = [3, 9, 17, 15, 19]\nlist_b = [2, 4, 8, 10, 30, 40, 50, 60, 70, 80, 90]\n\nfor a, b in zip(list_a, list_b):\n    if a > b: \n        print a\n    elif a == b:\n        print \"-\"\n    else:\n        print b\n\n\n\n\n3\n9\n17\n15\n30\n\n\n\nList with concatenation.\n\n\nfruits = ['banana', 'apple', 'orange', 'tomata', 'pear', 'grape']\n\nprint 'You have...'\n\nfor f in fruits:\n    if f == 'tomato':\n        print 'A tomato is not a fruit!' # (It actually is.)\n        break\n    print ', a', f,\nelse:\n    print '; A fine selection of fruits!'\n\n\n\n\nYou have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!\n\n\n\nRemove the \nbreak\n.\n\n\nfruits = ['banana', 'apple', 'orange', 'tomata', 'pear', 'grape']\n\nprint 'You have...'\n\nfor f in fruits:\n    if f == 'tomato':\n        print 'A tomato is not a fruit!' # (It actually is.)\n    else:    \n        print ', a', f,\nelse:\n    print '; A fine selection of fruits!'\n\n\n\n\nYou have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!\n\n\n\nPractice Makes Perfect\n\u00b6\n\n\nIs it even?\n\n\ndef is_even(x):\n\n    if x % 2 == 0:\n        return True # if x is even\n    else:\n        return False\n\nprint is_even(2)\nprint is_even(3)\n\n\n\n\nTrue\nFalse\n\n\n\nOr not?\n\n\nn = -1.0\n\nprint(n - round(n,0))\n\ndef is_int(x):\n\n    if (x - round(x,0)) == 0:\n        return True\n    else:\n        return False\n\nprint is_int(7.0)\nprint is_int(7.5)\nprint is_int(-1)\n\n\n\n\n0.0\nTrue\nFalse\nTrue\n\n\n\nSumming the digits of a number.\n\n\ndef digit_sum(n):\n\n    liss = []\n    n = str(n) # from integers to characters\n    for char in n:\n        liss.append(char) # populate liss\n        total = 0\n        for i in range(len(liss)):\n            liss[i] = int(liss[i]) # back to integers\n            total += liss[i] # sum them up\n    return total\n\nprint digit_sum(1234)\nprint digit_sum(8888)\n\n\n\n\n10\n32\n\n\n\nWhat is the factorial?\n\n\ndef factorial(x):\n\n    if x == 1 or x == 0:\n        return 1\n    else:\n        result = 1\n        while x > 0:\n            # say x = 4\n            # 1 * 4 = 4\n            # 4 * 3 = 12\n            # 12 * 2 = 24\n            # 24 * 1 = 24\n            result *= x\n            x -= 1\n\n    return result \n\nprint factorial(1)\nprint factorial(2)\nprint factorial(3)\nprint factorial(4)\nprint factorial(5)\n\n\n\n\n1\n2\n6\n24\n120\n\n\n\nIs it a prime number? (Check the web for the list of prime numbers.)\n\n\ndef is_prime(x):\n\n    if (x > 1): # to catch greater than 1\n        for n in range(2,(x - 1)): # range 2 - 1 less than x\n            if x % n == 0:\n                print x\n                return False\n    else: # ro catch 0 and 1\n        print x\n        return False\n    print x # the input\n    return True # the output, will be printed when the function will be called\n\nfor ii in range(24):\n    print is_prime(ii),\n\n\n\n\n0\nFalse 1\nFalse 2\nTrue 3\nTrue 4\nFalse 5\nTrue 6\nFalse 7\nTrue 8\nFalse 9\nFalse 10\nFalse 11\nTrue 12\nFalse 13\nTrue 14\nFalse 15\nFalse 16\nFalse 17\nTrue 18\nFalse 19\nTrue 20\nFalse 21\nFalse 22\nFalse 23\nTrue\n\n\n\nReverse a string.\n\n\ndef reverse(text):\n\n    count = len(text) - 1 # start at the end\n\n    print text\n    print count # 3 letters will be 0,1,2,3 or 3\n\n    reversed_text = \"\" # empty string\n\n    print reversed_text\n\n    while count >= 0:\n        reversed_text += text[count] # adding the right-most letter\n        count -= 1 # decrement count\n    return reversed_text\n\nprint reverse(\"make\")\nprint reverse(\"codeacademy\")\n\n\n\n\nmake\n3\n\nekam\ncodeacademy\n10\n\nymedacaedoc\n\n\n\nRemove vowels in apunctuation word (could work for punctuation too).\n\n\ndef anti_vowel(text):\n\n    vowels = \"aAeEiIoOuU\"\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\"\")\n    return text\n\nprint anti_vowel(\"allo\")\n\n\n\n\nll\n\n\n\nRemove all but punctuation.\n\n\ndef anti_vowel(text):\n\n    text = text.lower()\n    vowels = \"abcdefghijklmnopqrstuvwxyz1234567890$-\"\n\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\"\")\n    for char in text:\n        if char == \" \":\n            text = text.replace(char,\"\")\n    return text\n\nprint anti_vowel(\"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\\"ID\\\" associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\")\n\n\n\n\n.?,,.,.......\"\"...\n\n\n\nScrabble scoring.\n\n\nscore = {\"a\": 1, \"c\": 3, \"b\": 3, \"e\": 1, \"d\": 2, \"g\": 2, \n         \"f\": 4, \"i\": 1, \"h\": 4, \"k\": 5, \"j\": 8, \"m\": 3, \n         \"l\": 1, \"o\": 1, \"n\": 1, \"q\": 10, \"p\": 3, \"s\": 1, \n         \"r\": 1, \"u\": 1, \"t\": 1, \"w\": 4, \"v\": 4, \"y\": 4, \n         \"x\": 8, \"z\": 10}\n\ndef scrabble_score(word):\n\n    word2 = word.lower()\n\n    print word2+\":\",\n    points = 0\n    for letter in word2:\n        if letter == str(letter):\n            points += score[letter]\n    return points\n\nprint scrabble_score(\"ab\")\nprint scrabble_score(\"allo\")\nprint scrabble_score(\"xylophone\")\nprint scrabble_score(\"coding\")\nprint scrabble_score(\"yak\")\n\n\n\n\nab: 4\nallo: 4\nxylophone: 24\ncoding: 10\nyak: 10\n\n\n\nCensor a word in a string.\n\n\nlength\n\n\ndef censor(text,word_to_censor):\n\n    text = text.split(' ')\n    for word in range(0,len(text)):\n        if text[word] == word_to_censor:\n            text[word] = \"*\" * len(text[word]) * 2\n    return \" \".join(text) # join the w separated by spaces\n\nprint censor(\"it is two days\", \"two\")\n\n\n\n\nit is ****** days\n\n\n\nCount items is a list.\n\n\ndef count(sequence, item):\n\n    sequence = list(sequence)\n    count = 0\n\n    for i in sequence:\n        if i == item:\n            count += 1\n    return count\n\nlist2 = [1,3,1,5]\nlist3 = [\"a\",\"b\",\"c\",\"a\"]\nlist4 = (\"a\",\"b\",\"c\",\"a\")\nlist5 = (1,2,3,1,1)\n\nprint count(list2,1)\nprint count(list3,1)\nprint count(list4,1)\nprint count(list5,1)\n\n\n\n\n2\n0\n0\n3\n\n\n\nExtract even numbers from a list.\n\n\ndef purify(listing):\n\n    listing = list(listing)\n    listing2 = []\n\n    for l in listing:\n        if l % 2 == 0:\n            listing2.append(l)\n    return listing2\n\ncase1 = [1,2,3,4]\n\nprint purify(case1)\n\n\n\n\n[2, 4]\n\n\n\nCompute a product.\n\n\ndef product(listing):\n\n    print listing\n    result = 1\n    for l in listing:\n        result = result * l\n    return result\n\ncase1 = [1,2,3]\ncase2 = (5,10,15)\n\nprint product(case1)\nprint product(case2)\n\n\n\n\n[1, 2, 3]\n6\n(5, 10, 15)\n750\n\n\n\nRemove duplicates from a list.\n\n\ndef remove_duplicates(listing):\n\n    print listing\n\n    listing = list(listing)\n    listing2 = []\n\n    for l in listing:\n        if l not in listing2:\n            listing2.append(l)\n    return listing2\n\ncase1 = [1,2,3,3,4]\ncase2 = (1,6,1,4,2,8,2,1,6,7,4,6)\n\nprint remove_duplicates(case1)\nprint remove_duplicates(case2)\n\n\n\n\n[1, 2, 3, 3, 4]\n[1, 2, 3, 4]\n(1, 6, 1, 4, 2, 8, 2, 1, 6, 7, 4, 6)\n[1, 6, 4, 2, 8, 7]\n\n\n\nExtract the median from an unordered list of numbers.\n\n\ndef median(listing):\n\n    median_no = 0\n    median_low = 0\n    median_high = 0\n    low = 0\n    high = 0\n\n    print listing\n\n    listing = sorted(listing)\n\n    if len(listing) % 2 == 0:\n        low = len(listing)/2 - 1 # 6/2 = 3 -1 = 2 or the 3rd\n        high = len(listing)/2 # 6/2 = 3 or the 4th\n        median_low = float(listing[low]) # extract the 3rd of 6\n        median_high = float(listing[high]) # the 4th of 6\n        median_no = (median_low + median_high)/2\n    else:\n        median_no = listing[(len(listing))/2] # on 5, the / will yield 2.5, but coerced to the integer 2 or the 3rd\n    return median_no\n\ncase1 = (7,12,3,1,6)\ncase2 = (7,12,3,1,6,17)\n\nprint median(case1)\nprint median(case2)\n\n\n\n\n(7, 12, 3, 1, 6)\n6\n(7, 12, 3, 1, 6, 17)\n6.5\n\n\n\nQuiz 8\n\u00b6\n\n\nTakeaway: built-in functions.\n\n\nx = [1, 2, 3]\ny = [4, 5, 6]\n\nzipped = zip(x, y)\n# zipped = [(1, 4), (2, 5), (3, 6)]\n\nx2, y2 = zip(*zipped)\n\nx == list(x2) and y == list(y2)\n# True\n\n\n\n\nTrue\n\n\n\nseasons = ['Spring', 'Summer', 'Fall', 'Winter']\n\nlist(enumerate(seasons))\n# [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n\nlist(enumerate(seasons, start=1))\n# [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n\n\n\n\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n\n\n\nProject Command Line Calendar\n\u00b6\n\n\nIn this project, we\u2019ll build a basic calendar that the user will be able to interact with from the command line. The user should be able to choose to:\n\n\n\n\nView the calendar\n\n\nAdd an event to the calendar\n\n\nUpdate an existing event\n\n\nDelete an existing event\n\n\n\n\nfrom time import sleep, strftime\n\nhis_name = raw_input(\"What is your first name? \")\nhis_name = str(his_name)\n# calendar will store the dates as keys and the events as values\n\ncalendar = {}\n\ndef welcome():\n\n    print(\"Welcome \" + his_name +\".\")\n\n    print(\"Calendar starting...\")\n    sleep(0.5)\n    print(\"Today is: \" + strftime(\"%A, %B %d, %Y\"))\n    print(\"It is currently: \" + strftime(\"%H:%M:%S\"))\n    sleep(0.5)\n\ndef start_calendar():\n\n    welcome()\n    print(\"What would you like to do?\")\n    print(calendar)\n    start = True\n\n    while start:\n        user_choice = raw_input(\"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \").upper()\n\n        if user_choice == 'V': # V\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty\")\n            else:\n                print(calendar)\n\n        elif user_choice == 'U': # U\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty\")\n            else:\n                print(calendar)\n                date = raw_input(\"What date? \")\n                update = raw_input(\"Enter the update: \")\n                # could be more control here...\n                calendar[date] = update # without checking if the date is valid or if it already exists (which could override things)!\n                print(\"Successful!\")\n                print(calendar)\n\n        elif user_choice == 'A': # A\n            event = raw_input(\"Enter event: \")\n            date = raw_input(\"Enter date (MM/DD/YYYY): \")\n            if (len(date) > 10 or int(date[6:]) < int(strftime(\"%Y\"))): # could be more control...\n                print(\"Invalid date format.\")\n                try_again = raw_input(\"Try Again? 'Y' for Yes, 'N' for No: \").upper()\n                if try_again == 'Y':\n                    continue #! break, continue, start is still True\n                else:\n                    start == False\n            else:\n                calendar[date] = event # without checking if the date is valid or if it already exists (which could override things)!\n                print(\"Successful!\")\n                print(calendar)\n\n        elif user_choice == 'D': # D\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty.\")\n            else:\n                print(calendar)\n                event = raw_input(\"What event? \") # could be more option like: What date?\n                for date in calendar.keys():\n                    if event == calendar[date]:\n                        del calendar[date] # del a[], [1], [\"a\"], [1:3], [5:], [:9], etc.\n                        print(\"Deleted.\")\n                        print(calendar)\n                    else:\n                        print(\"Incorrect.\")\n\n        elif user_choice == 'X': # X\n            start = False\n\n        else:\n            print(\"Invalid command.\")\n            break\n\nstart_calendar()\n\n\n\n\nWhat is your first name? Al\nWelcome Al.\nCalendar starting...\nToday is: Thursday, October 20, 2016\nIt is currently: 13:42:02\nWhat would you like to do?\n{}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? a\nEnter event: Buy stuff\nEnter date (MM/DD/YYYY): 10/21/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Sell stuff\nEnter date (MM/DD/YYYY): 11/01/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Rent stuff\nEnter date (MM/DD/YYYY): 01/01/2018\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? u\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nWhat date? 01/01/2018\nEnter the update: Lease stuff\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? Buy stuff\nDeleted.\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? 10/21/2016\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? x\n\n\n\nUNIT 9, Exam Statistics\n\u00b6\n\n\nExam Statistics\n\u00b6\n\n\ngrades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]\n\nprint \"Grades:\", grades\n\ndef print_grades(grades): # list the grades\n\n    for i in grades:\n        print i, # , keep the list on the same line\n\nprint_grades(grades)\n\nprint \"Let's compute some stats!\"\n\ndef grades_sum(scores): # sum up the grades\n\n    total = 0\n    for s in scores:\n        total += s\n    return total\n\nprint grades_sum(grades)\n\ndef grades_average(grades): # average the grades\n\n    sum_of_grades = grades_sum(grades)\n    average = sum_of_grades / float(len(grades))\n    return average\n\nprint grades_average(grades)\n\nprint \"Time to conquer the variance!\"\n\ndef grades_variance(scores): # compute the variance\n\n    average = grades_average(scores)\n    totalvariance = 0\n    for score in scores:\n        totalvariance += (score - average) ** 2\n    tvariance = totalvariance/float(len(scores))\n    return tvariance\n\nvariance = grades_variance(grades)\nprint variance\n\ndef grades_std_deviation(variance): # compute standard deviation\n\n    stddevisation = variance ** 0.5\n    return stddevisation\n\nprint grades_std_deviation(variance)\n\n\n\n\nGrades: [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]\n100 100 90 40 80 100 85 70 90 65 90 85 50.5 Let's compute some stats!\n1045.5\n80.4230769231\nTime to conquer the variance!\n334.071005917\n18.2776094147\n\n\n\nUNIT 10, Advanced Topics in Python\n\u00b6\n\n\nAdvanced Topics in Python\n\u00b6\n\n\nIterate through a dictionary.\n\n\nmy_dict = {\n    \"CodeCademy\" : \"Python\",\n    \"DataCamp\" : \"R\",\n    \"Code School\" : \"SQL\"\n}\n\nprint my_dict.items()\nprint my_dict.keys()\nprint my_dict.values()\n\nfor key in my_dict:\n    print key, my_dict[key] # key and value\n\n\n\n\n[('CodeCademy', 'Python'), ('Code School', 'SQL'), ('DataCamp', 'R')]\n['CodeCademy', 'Code School', 'DataCamp']\n['Python', 'SQL', 'R']\nCodeCademy Python\nCode School SQL\nDataCamp R\n\n\n\nBuild a list.\n\n\nevens_to_50 = [i for i in range(51) if i % 2 == 0]\n\nprint evens_to_50\n\n\n\n\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]\n\n\n\nBuild lists with conditions.\n\n\ndoubles_by_3 = [x * 2 for x in range(1,6) if (x * 2) % 3 == 0]\n\nprint doubles_by_3\n\n\n\n\n[6]\n\n\n\neven_squares = [x ** 2 for x in range(2,11) if (x ** 2) % 2 == 0]\n\nprint even_squares\n\n\n\n\n[4, 16, 36, 64, 100]\n\n\n\ncubes_by_four = [x ** 3 for x in range(1,11) if x ** 3 % 4 == 0]\n\nprint cubes_by_four\n\n\n\n\n[8, 64, 216, 512, 1000]\n\n\n\nLists slicing.\n\n\nextract, list\n\n\nl = [i ** 2 for i in range(1, 11)] # Should be [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\nprint l[2:9:2] # [start:end:stride]\n\n\n\n\n[9, 25, 49, 81]\n\n\n\nmy_list = range(1, 11) # list of numbers 1 - 10\n\nprint my_list[::2]\n\n\n\n\n[1, 3, 5, 7, 9]\n\n\n\nmy_list = range(1, 11)\n\nbackwards = my_list[::-1]\n\nprint backwards\n\n\n\n\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n\n\nto_one_hundred = range(101)\n\nbackwards_by_tens = to_one_hundred[::-10]\n\nprint backwards_by_tens\n\n\n\n\n[100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0]\n\n\n\nto_21 = range(1, 22)\n\nprint to_21\n\nodds = range(1, 22, 2)\n\nprint odds\n\nmiddle_third = to_21[7:14:1]\n\nprint middle_third\n\n\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n[8, 9, 10, 11, 12, 13, 14]\n\n\n\nLambda function.\n\n\nmy_list = range(16)\n\nprint filter(lambda x: x % 3 == 0, my_list)\n\n\n\n\n[0, 3, 6, 9, 12, 15]\n\n\n\nlanguages = [\"HTML\", \"JavaScript\", \"Python\", \"Ruby\"]\n\nprint filter(lambda x: x == \"Python\",languages)\n\n\n\n\n['Python']\n\n\n\nsquares = [x**2 for x in range(1,11)]\n\nprint filter(lambda x: (x >= 30 and x <= 70), squares)\n\n\n\n\n[36, 49, 64]\n\n\n\nIterating over dictionaries.\n\n\nmovies = {\n    \"Monty Python and the Holy Grail\": \"Great\",\n    \"Monty Python's Life of Brian\": \"Good\",\n    \"Monty Python's Meaning of Life\": \"Okay\"\n}\n\nprint movies.items()\n\n\n\n\n[(\"Monty Python's Life of Brian\", 'Good'), (\"Monty Python's Meaning of Life\", 'Okay'), ('Monty Python and the Holy Grail', 'Great')]\n\n\n\nComprehensions.\n\n\nthrees_and_fives = [x for x in range(1,16) if (x % 3 == 0 or x % 5 == 0)]\n\nprint threes_and_fives\n\n\n\n\n[3, 5, 6, 9, 10, 12, 15]\n\n\n\nSlicing again.\n\n\nextract\n\n\ngarbled = \"!XeXgXaXsXsXeXmX XtXeXrXcXeXsX XeXhXtX XmXaX XI\"\n\nmessage = garbled[::-2]\n\nprint message\n\n\n\n\nI am the secret message!\n\n\n\ngarbled = \"IXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX\"\n\nmessage = filter(lambda x: x != \"X\", garbled)\n\nprint message\n\n\n\n\nI am another secret message!\n\n\n\nIntroduction to Bitwise Operators\n\u00b6\n\n\nOperators.\n\n\nprint 5 >> 4  # Right Shift\nprint 5 << 1  # Left Shift\nprint 8 & 5   # Bitwise AND\nprint 9 | 4   # Bitwise OR\nprint 12 ^ 42 # Bitwise XOR\nprint </sub>88     # Bitwise NOT\n\n\n\n\n0\n10\n0\n13\n38\n-89\n\n\n\nBase 2 or binary.\n\n\nprint 0b1,    # 1\nprint 0b10,   # 2\nprint 0b11,   # 3\nprint 0b100,  # 4\nprint 0b101,  # 5\nprint 0b110,  # 6\nprint 0b111   # 7\nprint \"******\"\nprint 0b1 + 0b11 # 1 + 3 = 4\nprint 0b11 * 0b11 # 3 * 3 = 90\n\n\n\n\n1 2 3 4 5 6 7\n******\n4\n9\n\n\n\none = 0b1\ntwo = 0b10\nthree = 0b11\nfour = 0b100\nfive = 0b101\nsix = 0b110\nseven = 0b111\neight = 0b1000\nnine = 0b1001\nten = 0b1010\neleven = 0b1011\ntwelve = 0b1100\n\n\n\n\nDecimal to binary.\n\n\nprint bin(1)\nprint bin(2)\nprint bin(3)\nprint bin(4)\nprint bin(5)\n\n\n\n\n0b1\n0b10\n0b11\n0b100\n0b101\n\n\n\nBinary to decimal.\n\n\nprint int(\"1\",2)\nprint int(\"10\",2)\nprint int(\"111\",2)\nprint int(\"0b100\",2)\nprint int(bin(5),2)\n\n\n\n\n1\n2\n7\n4\n5\n\n\n\nPrint out the decimal equivalent of the binary 11001001.\n\n\nprint int(\"11001001\",2)\n\n\n\n\n201\n\n\n\nLeft Bit Shift (\n<<\n)\n\n\n0b000001 << 2 == 0b000100 (1 << 2 = 4)\n0b000101 << 3 == 0b101000 (5 << 3 = 40)       \n\n\n\n\nRight Bit Shift (\n>>\n)\n\n\n0b0010100 >> 3 == 0b000010 (20 >> 3 = 2)\n0b0000010 >> 2 == 0b000000 (2 >> 2 = 0)\n\n\n\n\nThis operation is mathematically equivalent to floor dividing and multiplying by 2 (respectively) for every time you shift, but it\u2019s often easier just to think of it as shifting all the 1s and 0s left or right by the specified number of slots.\n\n\nshift_right = 0b1100\nshift_left = 0b1\n\nshift_right = 0b1100 >> 2\nshift_left = 0b1 << 2\nprint bin(shift_right)\nprint bin(shift_left)\n\n\n\n\n0b11\n0b100\n\n\n\nThe bitwise AND (\n&\n) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if the corresponding bits of both numbers are 1. For example:\n\n\n    a:   00101010   42\n    b:   00001111   15       \n===================\na & b:   00001010   10\n\n\n\n\nAs you can see, the 2\u2019s bit and the 8\u2019s bit are the only bits that are on in both \na\n and \nb\n, so \na & b\n only contains those bits. Note that using the & operator can only result in a number that is less than or equal to the smaller of the two values.\n\n\n\n\n0 & 0 = 0\n\n\n0 & 1 = 0\n\n\n1 & 0 = 0\n\n\n1 & 1 = 1\n\n\n\n\nFor example: \n0b111 (7) & 0b1010 (10) = 0b10\n.\n\n\nprint bin(0b1110&0b101)\n\nprint bin(0b100)\n\n\n\n\n0b100\n0b100\n\n\n\nThe bitwise OR (\n|\n) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of either number are 1. For example:\n\n\n    a:  00101010  42\n    b:  00001111  15       \n================\na | b:  00101111  47\n\n\n\n\nNote that the bitwise \n|\n operator can only create results that are greater than or equal to the larger of the two integer inputs.\n\n\n\n\n0 | 0 = 0\n\n\n0 | 1 = 1 \n\n\n1 | 0 = 1\n\n\n1 | 1 = 1\n\n\n\n\nFor example: \n110 (6) | 1010 (10) = 1110 (14)\n.\n\n\nprint bin(0b1110|0b101)\n\n\n\n\n0b1111\n\n\n\nThe XOR (\n^\n) or exclusive or operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of the two numbers are 1, but not both.\n\n\n    a:  00101010   42\n    b:  00001111   15       \n================\na ^ b:  00100101   37\n\n\n\n\nKeep in mind that if a bit is off in both numbers, it stays off in the result. Note that \nXOR\n-ing a number with itself will always result in 0.\n\n\n\n\n0 ^ 0 = 0\n\n\n0 ^ 1 = 1\n\n\n1 ^ 0 = 1\n\n\n1 ^ 1 = 0\n\n\n\n\nFor example: \n111 (7) ^ 1010 (10) = 1101 (13)\n.\n\n\nprint bin(0b1110^0b101)\n\n\n\n\n0b1011\n\n\n\nThe bitwise NOT operator (\n</sub>\n) just flips all of the bits in a single number. What this actually means to the computer is actually very complicated, so we\u2019re not going to get into it. Just know that mathematically, this is equivalent to adding one to the number and then making it negative. \n\n\nprint </sub>1\nprint </sub>2\nprint </sub>3\nprint </sub>42\nprint </sub>123\n\n\n\n\n-2\n-3\n-4\n-43\n-124\n\n\n\nA bit mask is just a variable that aids you with bitwise operations. A bit mask can help you turn specific bits on, turn others off, or just collect data from an integer about which bits are on or off.\n\n\ndef check_bit4(input):\n\n    mask = 0b1000\n    desired = input & mask\n    if desired > 0:\n        return \"on\"\n    else:\n        return \"off\"\n\nprint check_bit4(0b1100)\n\n\n\n\non\n\n\n\n0b1000\n0b1100\n======\n0b1000\n\n\n\n\nYou can also use masks to turn a bit in a number on using \n|\n. Use a bitmask and the value a in order to achieve a result where the third bit from the right of a is turned on. Be sure to print your answer as a \nbin()\n string!\n\n\na = 0b10111011\nmask = 0b100\ndesired = a | mask\nprint bin(desired)\n\n\n\n\n0b10111111\n\n\n\n0b10111011\n0b00000100\n==========\n0b10111111\n\n\n\n\nUsing the XOR (\n^\n) operator is very useful for flipping bits. Using \n^\n on a bit with the number one will return a result where that bit is flipped. In the editor is the 8 bit variable a. Use a bitmask and the value a in order to achieve a result where all of the bits in a are flipped. Be sure to print your answer as a \nbin()\n string!\n\n\na = 0b11101110\nmask = 0b11111111\ndesired = a ^ mask\nprint bin(desired)\n\n\n\n\n0b10001\n\n\n\n0b11101110\n0b11111111\n==========\n0b00010001\n\n\n\n\nFinally, you can also use the left shift (\n<<\n) and right shift (\n>>\n) operators to slide masks into place.\n\n\ndef flip_bit(number, n):\n\n    mask = (0b1 << (n-1))\n    result = number ^ mask\n    return bin(result)\n\nprint flip_bit(0b111, 2)\n\n\n\n\n0b101\n\n\n\nProject RGB-HEX Converter\n\u00b6\n\n\nIn this project, we\u2019ll use Bitwise operators to build a calculator that can convert RGB values to Hexadecimal (\nhex\n) values, and vice-versa.\n\n\ndef rgb_hex():\n\n    invalid_msg = \"Invalid entry\"\n    red = int(raw_input(\"Enter a 'red' (R) value, from 0 to 255: \"))\n    if red < 0 or red > 255:\n        print invalid_msg\n        return # return will exit the function, w/o return, the function jumps to the next line...\n\n    green = int(raw_input(\"Enter a 'green' (G) value, from 0 to 255: \"))\n    if green < 0 or green > 255:\n        print invalid_msg\n        return\n\n    blue = int(raw_input(\"Enter a 'blue' (B) value, from 0 to 255: \"))\n    if blue < 0 or blue > 255:\n        print invalid_msg\n        return\n\n    val = red << 16 + green << 8 + blue\n    # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character.\n    # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\n    # Become familiar with bits by reading more here.\n    print \"%s\" %(hex(val)[2:].upper()) # string formatting\n\ndef hex_rgb():\n\n    invalid_msg = \"Invalid entry\"\n    hex_val = raw_input(\"Enter a color (six hexadecimal digits): \")\n    if len(hex_val) != 6:\n        print \"Invalid Entry\"\n    else:\n        hex_val = int(hex_val, 16)\n    two_hex_digits = 2 ** 8\n    blue = hex_val % two_hex_digits\n    hex_val = hex_val >> 8\n    green = hex_val % two_hex_digits\n    hex_val = hex_val >> 8\n    red = hex_val % two_hex_digits\n    print \"Red: %s Green: %s Blue: %s\" %(red, green,blue)\n\ndef convert():\n\n    while True:\n        option = str(raw_input(\"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \"))\n        if option == '1':\n            print \"RGB to Hex...\"\n            rgb_hex()\n        elif option == '2':\n            print \"Hex to RGB...\"\n            hex_rgb()\n        elif option == 'X' or option == 'x':\n            break\n        else:\n            print \"Error\"\n\nconvert()\n\n\n\n\nEnter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. 1\nRGB to Hex...\nEnter a 'red' (R) value, from 0 to 255: 10\nEnter a 'green' (G) value, from 0 to 255: 10\nEnter a 'blue' (B) value, from 0 to 255: 20\n280000000000000L\nEnter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. x\n\n\n\nUNIT 11, Introduction to Classes\n\u00b6\n\n\nIntroduction to Classes\n\u00b6\n\n\nYou can think of an object as a single data structure that contains data as well as functions; functions of objects are called methods. \nClass Fruit\n, \nlemon instance\n.\n\n\nclass Fruit(object):\n\n\n    def __init__(self, name, color, flavor, poisonous):\n\n        self.name = name\n        self.color = color\n        self.flavor = flavor\n        self.poisonous = poisonous\n\n    def description(self):\n\n        print \"I'm a %s %s and I taste %s.\" % (self.color, self.name, self.flavor)\n\n    def is_edible(self):\n\n        if not self.poisonous:\n            print \"Yep! I'm edible.\"\n        else:\n            print \"Don't eat me! I am super poisonous.\"\n\n\nlemon = Fruit(\"lemon\", \"yellow\", \"sour\", False)\n\nlemon.description()\n\nlemon.is_edible()\n\n\n\n\nI'm a yellow lemon and I taste sour.\nYep! I'm edible.\n\n\n\nThe class keyword, the name of the class, and the class from which the new class inherits in parentheses. By convention, user-defined Python class names start with a capital letter.\n\n\nclass Animal(object):\n\n\n    pass\n\n\n\n\n__init__():\n this function is required for classes, and it\u2019s used to initialize the objects it creates. \n__init__()\n always takes at least one argument, self, that refers to the object being created. You can think of \n__init__()\n as the function that \u201cboots up\u201d each object the class creates. Python will use the first parameter that \n__init__()\n receives to refer to the object being created; this is why it\u2019s often called self, since this parameter gives the object being created its identity.\n\n\nclass Animal(object):\n\n\n    def __init__(self, name):\n\n        self.name = name\n\n\n\n\nStart creating objects. We can access attributes of our objects using dot notation.\n\n\nclass Animal(object):\n\n\n    def __init__(self, name):\n\n        self.name = name\n\n\nzebra = Animal(\"Jeffrey\") # instance of Animal\n\nprint zebra.name # instance with attributes\n\n\n\n\nJeffrey\n\n\n\nMore\u2026\n\n\nClass Animal(object):\n\n\n    def __init__(self, name, age, is_hungry):\n\n        self.name = name\n        self.age = age\n        self.is_hungry = is_hungry\n\n\nzebra = Animal(\"Jeffrey\", 2, True)\ngiraffe = Animal(\"Bruce\", 1, False)\npanda = Animal(\"Chad\", 7, True)\n\nprint zebra.name, zebra.age, zebra.is_hungry\nprint giraffe.name, giraffe.age, giraffe.is_hungry\nprint panda.name, panda.age, panda.is_hungry\n\n\n\n\n  File \"<ipython-input-55-08cd00c1ed56>\", line 1\n    Class Animal(object):\n               ^\nSyntaxError: invalid syntax\n\n\n\nAnother important aspect of Python classes is scope. The scope of a variable is the context in which it\u2019s visible to the program.\n\n\nIt may surprise you to learn that not all variables are accessible to all parts of a Python program at all times. When dealing with classes, you can have variables that are available everywhere (global variables), variables that are only available to members of a certain class (member variables), and variables that are only available to particular instances of a class (instance variables).\n\n\nGlobal variable, (class) member variable, class variable, instance variable\n\n\nThe same goes for functions: some are available everywhere, some are only available to members of a certain class, and still others are only available to particular instance objects.\n\n\nGlobal function, class function, instance function\n\n\nThey all have access to the member variable is_alive, since they\u2019re all members of the Animal class.\n\n\nclass Animal(object):\n\n\n    \"\"\"Makes cute animals.\"\"\"\n\n    is_alive = True\n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n\nzebra = Animal(\"Jeffrey\", 2)\ngiraffe = Animal(\"Bruce\", 1)\npanda = Animal(\"Chad\", 7)\n\nprint zebra.name, zebra.age, zebra.is_alive\nprint giraffe.name, giraffe.age, giraffe.is_alive\nprint panda.name, panda.age, panda.is_alive\n\n\n\n\nJeffrey 2 True\nBruce 1 True\nChad 7 True\n\n\n\nWhen a class has its own functions, those functions are called methods.\n\n\nclass Animal(object):\n\n\n    \"\"\"Makes cute animals.\"\"\"\n\n    is_alive = True\n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n    def description(self):\n\n        print self.name\n        print self.age\n\n\nhippo = Animal(\"Yan\", 10)\n\nhippo.description() # will call the class function and print\n\n\n\n\nYan\n10\n\n\n\nA class can have any number of member variables.\n\n\nclass Animal(object):\n\n\n    \"\"\"Makes cute animals.\"\"\"\n\n    is_alive = True\n    health = \"good\"\n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n    def description(self):\n\n        print self.name\n        print self.age\n\n\nhippo = Animal(\"Yan\", 10)\nsloth = Animal(\"George\", 1)\nocelot = Animal(\"Holly\", 2)\n\nprint hippo.health # will call the class variable\nprint sloth.health\nprint ocelot.health\n\n\n\n\ngood\ngood\ngood\n\n\n\nKind of classes and objects you might find in commercial software: here we have a basic \nShoppingCart\n class for creating shopping cart objects for website customers; though basic, it\u2019s similar to what you\u2019d see in a real program.\n\n\nclass ShoppingCart(object):\n\n\n    items_in_cart = {} # try it with an empty or not dictionary\n    items_in_cart = {\"cereal\":1}\n\n    def __init__(self, customer_name):\n\n        self.customer_name = customer_name\n\n    def add_item(self, product, price):\n\n        \"\"\"Add product to the cart.\"\"\"\n\n        if not product in self.items_in_cart: # check the dictionary\n            self.items_in_cart[product] = price\n            print product + \" added.\"\n        else:\n            print product + \" is already in the cart.\"\n\n    def remove_item(self, product):\n\n        \"\"\"Remove product from the cart.\"\"\"\n\n        if product in self.items_in_cart: # check the dictionary\n            del self.items_in_cart[product]\n            print product + \" removed.\"\n        else:\n            print product + \" is not in the cart.\"\n\n\nmy_cart = ShoppingCart(\"Jean\") # instance\nmy_cart.add_item(\"cereal\",1) # class function\n\n\n\n\ncereal is already in the cart.\n\n\n\nInheritance is a tricky concept, so let\u2019s go through it step by step. Inheritance is the process by which one class takes on the attributes and methods of another, and it\u2019s used to express an is-a relationship. For example, a Panda is a bear, so a Panda class could inherit from a Bear class.\n\n\nclass Customer(object):\n\n\n    \"\"\"Produces objects that represent customers.\"\"\"\n\n    def __init__(self, customer_id):\n\n        self.customer_id = customer_id\n\n    def display_cart(self):\n\n        print \"I'm a string that stands in for the contents of your shopping cart!\"\n\n\nclass ReturningCustomer(Customer):\n\n\n    \"\"\"For customers of the repeat variety.\"\"\"\n\n    def display_order_history(self):\n\n        print \"I'm a string that stands in for your order history!\"\n\n\nmonty_python = ReturningCustomer(\"ID: 12345\") # class instance\nmonty_python.display_cart() # inherited from the 1st class\nmonty_python.display_order_history() # from the current class\n\n\n\n\nI'm a string that stands in for the contents of your shopping cart!\nI'm a string that stands in for your order history!\n\n\n\nCOMPLETE EXAMPLE.\n\n\nclass Shape(object):\n\n\n    \"\"\"make shapes\"\"\"\n\n    number_of_sides = 5\n\n    def __init__(self, number_of_sides):\n\n        self.number_of_sides = number_of_sides\n\n\nmy_shape = Shape(4) # instance\n\n\nclass Triangle(Shape):\n\n\n    number_of_3sides = 3\n    # number_of_sides = 3 # would override the above\n\n\n    def __init__(self, angle1, angle2, angle3):\n\n        self.angle1 = angle1\n        self.angle2 = angle2\n        self.angle3 = angle3\n\n    def check_angles(self):\n\n        if self.angle1 + self.angle2 + self.angle3 == 180:\n            return True\n        else:\n            return False\n\n\nmy_triangle = Triangle(90, 30, 60) # instance\n\nprint my_triangle.number_of_sides # inherit\nprint my_shape.number_of_sides\n\nprint my_triangle.number_of_3sides\nprint my_triangle.check_angles()\n\n\nclass Equilateral(Triangle):\n\n\n    angle = 60\n\n    def __init__(self):\n\n        self.angle1 = self.angle # override the above\n        self.angle2 = self.angle\n        self.angle3 = self.angle\n\n\nmy_equilateral = Equilateral() # instance\n\nprint my_equilateral.angle\nprint my_equilateral.angle1 # based on variable angle\n\nprint my_equilateral.number_of_sides # inherit\nprint my_equilateral.number_of_3sides # inherit\n\nprint my_equilateral.check_angles() # inherit; method way\nprint Equilateral.check_angles(my_equilateral) # function way; IDEM !!!\n\n\n\n\n5\n4\n3\nTrue\n60\n60\n5\n3\nTrue\nTrue\n\n\n\nSometimes you\u2019ll want one class that inherits from another to not only take on the methods and attributes of its parent, but to override one or more of them.\n\n\nclass Employee(object):\n\n\n    \"\"\"Models real-life employees!\"\"\"\n\n    def __init__(self, employee_name):\n\n        self.employee_name = employee_name\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 20.00\n\n\nclass PartTimeEmployee(Employee):\n\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 12.00 # override what is naturally inherited\n\n\n\n\nclass Employee(object):\n\n\n    def __init__(self, name):\n\n        self.name = name\n\n    def greet(self, other):\n\n        print \"Hello, %s\" % other.name\n\n\nclass CEO(Employee):\n\n    def greet(self, other):\n\n        print \"Get back to work, %s!\" % other.name # override\n\n\nceo = CEO(\"Emily\")\nemp = Employee(\"Steve\")\n\nemp.greet(ceo)\nceo.greet(emp)\n\n\n\n\nHello, Emily\nGet back to work, Steve!\n\n\n\nOn the flip side, sometimes you\u2019ll be working with a derived class (or subclass) and realize that you\u2019ve overwritten a method or attribute defined in that class\u2019 base class (also called a parent or superclass) that you actually need. Have no fear! You can directly access the attributes or methods of a superclass with Python\u2019s built-in super call.\n\n\nclass Employee(object):\n\n\n    \"\"\"Models real-life employees!\"\"\"\n\n    def __init__(self, employee_name):\n\n        self.employee_name = employee_name\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 20.00\n\n\nclass PartTimeEmployee(Employee):\n\n\n    def calculate_wage(self, hours): # override\n\n        self.hours = hours\n        return hours * 12.00\n\n    def full_time_wage(self, hours): # super call: associate the parent's class function with child's new function withtout retyping the function\n\n        return super(PartTimeEmployee, self).calculate_wage(hours)\n\n\nmilton = PartTimeEmployee(\"Jack\")\n\nprint milton.full_time_wage(10)\n\n\n\n\n200.0\n\n\n\nMore on Classes\n\u00b6\n\n\nclass Car(object): # create a class\n\n\n    pass\n\n\nmy_car = Car() # create a class instance\n\n\n\n\nclass Car(object):\n\n\n    condition = \"new\" # create a member variables\n\n\nmy_car = Car()\n\nprint my_car.condition # call the member variable\n\n\n\n\nnew\n\n\n\nclass Car(object):\n\n\n    condition = \"new\"\n\n    def __init__(self, model, color, mpg): # initialize or boot up!\n\n        self.model = model # assign class variables\n        self.color = color\n        self.mpg = mpg\n\n\nmy_car = Car(\"DeLorean\", \"silver\", 88) # create an instance with its class variables\n\nprint my_car.condition\n\nprint my_car.model # call the class variables...\nprint my_car.color\nprint my_car.mpg\n\n\n\n\nnew\nDeLorean\nsilver\n88\n\n\n\nclass Car(object):\n\n\n    condition = \"new\"\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \"This is a %s %s with %s MPG.\" % (self.color, self.model, str(self.mpg)) # create a class method (function)\n\n\nmy_car = Car(\"DeLorean\", \"silver\", 88)\n\nprint my_car.condition\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car() # call the class method\n\n\n\n\nnew\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\n\n\n\nclass Car(object):\n\n\n    condition = \"new\"\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \"This is a %s %s with %s MPG.\" % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition = \"used\"\n\n\nmy_car = Car(\"DeLorean\", \"silver\", 88)\n\nprint my_car.condition # 'new'\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car()\nprint my_car.condition # the condition changes to 'used'\n\n\n\n\nnew\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused\n\n\n\nclass Car(object):\n\n\n    condition = \"new\"\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \"This is a %s %s with %s MPG.\" % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition = \"used\"\n\n\nmy_car = Car(\"DeLorean\", \"silver\", 88)\n\nprint my_car.condition\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car()\nprint my_car.condition\n\n\nclass ElectricCar(Car):\n\n\n    def __init__(self, model, color, mpg, battery_type): # initialize with some partial inheritance from class Car\n\n        Car.__init__(self, model, color, mpg) # assign class variable by inheritance from class Car\n        self.battery_type = battery_type # assign a new class variable\n\n\nmy_car = ElectricCar(\"Telsa\", \"red\", 0, \"molten salt\") # create an instance with its class variables; OVERRIDE the above\n\nprint my_car.condition # call the class variables; OVERRIDE the above\n\nprint my_car.model # call the member variable; OVERRIDE the above\nprint my_car.color\nprint my_car.mpg\n\nmy_ride = ElectricCar(\"Google\", \"blue\", 10, \"electrical\") # create an instance with its class variables\n\nprint my_ride.condition # call the class variables\n\nprint my_ride.model # call the member variable\nprint my_ride.color\nprint my_ride.mpg\n\n\n\n\nnew\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused\nnew\nTelsa\nred\n0\nnew\nGoogle\nblue\n10\n\n\n\nclass Car(object):\n\n\n    condition = \"new\"\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \"This is a %s %s with %s MPG.\" % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition = \"used\"\n\n\nmy_car = Car(\"DeLorean\", \"silver\", 88)\n\nprint my_car.condition + \"!\" # call the member variable; 'new'\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car() # call the class method\nprint my_car.condition + \"!!\" # member variable; now 'used'\n\nclass ElectricCar(Car):\n\n\n    def __init__(self, model, color, mpg, battery_type):\n\n        Car.__init__(self, model, color, mpg)\n        self.battery_type = battery_type\n\n    def drive_car(self): # create a class method; OVERRIDE the above\n\n        self.condition = \"like new\"\n\n\nmy_car = ElectricCar(\"Telsa\", \"red\", 0, \"molten salt\")\n\nprint my_car.condition + \"!\" # 'new' again\nmy_car.drive_car() # call the class method\nprint my_car.condition + \"!!\" # 'like new' now\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nmy_ride = ElectricCar(\"Google\", \"blue\", 10, \"electrical\")\n\nprint my_ride.condition + \"!\" # 'used' again\nmy_ride.drive_car()# call the class method\nprint my_ride.condition + \"!!\" # 'like new' now\n\nprint my_ride.model\nprint my_ride.color\nprint my_ride.mpg\n\n\n\n\nnew!\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused!!\nnew!\nlike new!!\nTelsa\nred\n0\nnew!\nlike new!!\nGoogle\nblue\n10\n\n\n\nclass Point3D(object):\n\n\n    def __init__(self, x, y, z): # initialize\n\n        self.x = x\n        self.y = y\n        self.z = z\n\n# __repr__() method, which is short for representation; by providing a return value in this method, we can tell Python how to represent an object of our class (for instance, when using a print statement).\n\n    def __repr__(self):\n\n        return \"(%d, %d, %d)\" % (self.x, self.y, self.z)\n\n\nmy_point = Point3D(1,2,3) # instance\n\n# Print my_point.__repr__() w/o adding variables\n\nprint my_point\n\n\n\n\n(1, 2, 3)\n\n\n\nQuiz 11\n\u00b6\n\n\nPython writes data to a file when you close the file!\n\n\nProject Bank Account\n\u00b6\n\n\nIn this project, we\u2019ll create a Python class that can be used to create and manipulate a personal bank account.\n\n\nclass BankAccount(object):\n\n\n    balance = 0\n\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n\n    # The __repr__() method defines what represents the object when a user tries to print the BnkAccount object using print. Let's add to this method and make it descriptive.\n\n        return \"%s's account; Balance: $%.2f\" % (self.name, self.balance) # $%.2f for 2 decimals, self.class attribute, self.member variable\n\n    def show_balance(self):\n\n        print \"Balance: $%.2f\\n\" % (self.balance)\n\n    def deposit(self, amount):\n\n        if amount <= 0:\n            print \"No Account. Invalid\\n\"\n            return # # return will exit the function, w/o return, the function jumps to the next line...\n        else:\n            print \"Depositing: $%.2f\" % (amount) # ?\n            self.balance += amount\n            self.show_balance() # calling a class function\n\n    def withdraw(self, amount):\n\n        if amount > self.balance:\n            print \"More than the balance. Invalid\\n\"\n            return\n        else:\n            print \"Withdrawing: $%.2f\" % (amount) # ?\n            self.balance -= amount\n            self.show_balance()\n\n\nmy_account = BankAccount(\"Ugo\") # Ugo is the argument 'name'\n\nprint my_account # launch the __repr__\nmy_account.show_balance() # launch the class function (method) show_balance\n\nmy_account.deposit(2000)\nmy_account.withdraw(3000)\nmy_account.withdraw(1000)\n\nprint my_account\n\n\n\n\nUgo's account; Balance: $0.00\nBalance: $0.00\n\nDepositing: $2000.00\nBalance: $2000.00\n\nMore than the balance. Invalid\n\nWithdrawing: $1000.00\nBalance: $1000.00\n\nUgo's account; Balance: $1000.00\n\n\n\nUNIT 12, File Input and Output\n\u00b6\n\n\nFile Input/Output\n\u00b6\n\n\nRead information from a file on your computer, and/or write that information to another file? This process is called file I/O.\n\n\nmy_list = [i ** 2 for i in range(1,11)]\n\nf = open(\"output.txt\", \"w\") # create a file\n\nfor item in my_list:\n    f.write(str(item) + \"\\n\") # write\n\nf.close() # save, close\n\n\n\n\nFirst.\n\n\nf = open(\"output.txt\", \"w\") # This told Python to open output.txt in \"w\" mode (\"w\" stands for \"write\").\n\n\n\n\nRead and write.\n\n\nmy_list = [i ** 2 for i in range(1,11)]\n\nmy_file = open(\"output.txt\", \"r+\") # the file must exist\n\nfor item in my_list:\n    my_file.write(str(item) + \"\\n\") # overwrite\n\nmy_file.close() # save, close\n\n\n\n\nRead on the console.\n\n\nmy_file = open(\"output.txt\", \"r\") # the file must exist\nprint my_file.read()\n\nmy_file.close()\n\n\n\n\n1\n4\n9\n16\n25\n36\n49\n64\n81\n100\n\n\n\nRead lines on the console.\n\n\nmy_file = open(\"output.txt\", \"r\") # the file must exist\n\nprint my_file.readline() # read line 1\nprint my_file.readline() # read line 2 automatically\nprint my_file.readline() # read line 3\n\nmy_file.close()\n\n\n\n\n1\n\n4\n\n9\n\n\n\nOpen the file for reading.\n\n\nread_file = open(\"output.txt\", \"r\")\nprint read_file.read()\nread_file.close()\n\n\n\n\n1\n4\n9\n16\n25\n36\n49\n64\n81\n100\n\n\n\nUse a second file handler to open the file for writing.\n\n\nwrite_file = open(\"text.txt\", \"w\")\n\n# Write to the file\nwrite_file.write(\"Not closing files is VERY BAD.\")\n\n# Try to read from the file\nprint write_file.read() # Not working...``\n\nwrite_file.close()\n\n\n\n\n---------------------------------------------------------------------------\n\nIOError                                   Traceback (most recent call last)\n\n<ipython-input-87-db256164394e> in <module>()\n      5 \n      6 # Try to read from the file\n----> 7 print write_file.read() # Not working...``\n      8 \n      9 write_file.close()\n\n\nIOError: File not open for reading\n\n\n\nTry.\n\n\nread_file = open(\"text.txt\", \"r\")\nprint read_file.read()\n\nwrite_file = open(\"text.txt\", \"w\")\nwrite_file.write(\"Not closing files is VERY BAD.\")\n\nwrite_file.close() # close it!\n\nwrite_file = open(\"text.txt\", \"r\") # reopen it in read mode\nprint write_file.read() # working\nwrite_file.close()\n\n\n\n\nNot closing files is VERY BAD.\nNot closing files is VERY BAD.\n\n\n\nAnd.\n\n\nwrite_file = open(\"text.txt\", \"w\")\nwrite_file.write(\"Not closing files is VERY BAD.\") # could be a variable\nwrite_file.close()\n\n\n\n\nread_file = open(\"text.txt\", \"r\")\nprint read_file.read()\nread_file.close()\n\n\n\n\nNot closing files is VERY BAD.\n\n\n\nwrite_file = open(\"text.txt\", \"w\")\nwrite_file.truncate() # delete\nwrite_file.close()\n\n\n\n\nread_file = open(\"text.txt\", \"r\")\nprint read_file.read()\nread_file.close()\n\n\n\n\nYou may not know this, but file objects contain a special pair of built-in methods: \n__enter__()\n and \n__exit__()\n. The details aren\u2019t important, but what is important is that when a file object\u2019s \n__exit__()\n method is invoked, it automatically closes the file. How do we invoke this method? With with and as.\n\n\nwith open(\"text.txt\", \"w\") as textfile: # a variable\n    textfile.write(\"Success!\")\n    textfile.close()\n\n\n\n\nwith open(\"text.txt\", \"r\") as textfile:\n    print textfile.read()\n    textfile.close()\n\n\n\n\nSuccess!\n\n\n\nMore I/O\n\u00b6\n\n\nwith open(\"text.txt\", \"w\") as my_file:\n    my_file.write(\"Youpee!!!\")\n\nprint my_file.closed # true\n\nif not my_file.closed == True:\n    my_file.close()\n\nprint my_file.closed # true\n\nwith open(\"text.txt\", \"r\") as my_file:\n    print my_file.read()\n\nprint my_file.closed # true\n\nwith open(\"text.txt\", \"r\") as my_file:\n    print my_file.closed # false\n\nmy_file.close()\n\nprint my_file.closed # true\n\n\n\n\nTrue\nTrue\nYoupee!!!\nTrue\nFalse\nTrue\n\n\n\nQuiz 12\n\u00b6\n\n\nOK\n\n\nProject DNA Analysis\n\u00b6\n\n\nIn this project, we\u2019ll use many of the concepts you\u2019ve learned throughout the Python course in order to do some DNA analysis for a crime investigation.\n\n\nThe scenario:\n\n\nA spy deleted important files from a computer. There were a few witnesses at the scene of the crime, but no one is sure who exactly the spy was. Three possible suspects were apprehended based on surveillance video. Each suspect had a sample of DNA taken from them. The computer\u2019s keyboard was also swabbed for DNA evidence and, luckily, one small DNA sample was successfully retrieved from the computer\u2019s keyboard.\n\n\nGiven the three suspects\u2019 DNA and the sample DNA retreived from the keyboard, it\u2019s up to you to figure out who the spy is!\n\n\nThe project should have methods for each of the following:\n\n\n\n\nGiven a file, read in the DNA for each suspect and save it as a string\n\n\nTake a DNA string and split it into a list of codons\n\n\nIterate through a suspect\u2019s codon list to see how many of their codons match the sample codons\n\n\nPick the right suspect to continue the investigation on\n\n\n\n\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n\n    dna_data = \"\" # empty string\n\n    with open(dna_file, \"r\") as f: # f = open(dna_file, \"r\"); with, as\n        for line in f:\n            dna_data += line\n        return dna_data\n\ndef dna_codons(dna):\n\n    codons = []\n    for i in range(0,len(dna),3): # slice strings of 3 letters\n        if i+3 < len(dna): # make sure that you don't add a string to the codon list that isn't at least 3 letters long\n            codons.append(dna[i:i+3]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3\n    return codons\n\ndef match_dna(dna):\n\n    matches = 0\n    for codon in dna:\n        if codon in sample: # if ,in\n            matches += 1\n    return matches\n\ndef is_criminal(dna_sample):\n\n    dna_data = read_dna(dna_sample)\n    codons = dna_codons(dna_data)\n    num_matches = match_dna(codons)\n    if num_matches >= 3:\n        print((dna_sample)[:-4]).upper(),\n        print(\": number of matches = \" + str(num_matches) + \"; the investigation will proceed further more with this suspect.\")\n    else:\n        print((dna_sample)[:-4]).upper(),\n        print(\": no evidence; the suspect can be freed.\")\n\na = \"suspect1.txt\"\nis_criminal(a)\n\na = \"suspect2.txt\"\nis_criminal(a)\n\na = \"suspect3.txt\"\nis_criminal(a)\n\n\n\n\nSUSPECT1 : no evidence; the suspect can be freed.\nSUSPECT2 : number of matches = 6; the investigation will proceed further more with this suspect.\nSUSPECT3 : no evidence; the suspect can be freed.\n\n\n\nsuspect1.txt\n\n\nATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT\n\n\n\n\nsuspect2.txt\n\n\nCCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG\n\n\n\n\nsuspect3.txt\n\n\nTCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA",
            "title": "Codecademy Python"
        },
        {
            "location": "/Codecademy Python/#python-syntax",
            "text": "Python is an easy to learn programming language. You can use it to create web apps, games, even a search engine!  print \"Welcome to Python!\"\nprint(\"Welcome\")\nprint 5 + 3\nprint(5 + 5)\nprint \"What \" + str(3)\nprint \"What\",5  Welcome to Python!\nWelcome\n8\n10\nWhat 3\nWhat 5  a = 30\nprint \"What \" + str(a)\n\nb = \"A list \\t*A  \\\\ \\\" \\' \"\nprint b\n\nc = 10 + 20\nprint c  What 30\nA list  *A  \\ \" ' \n30  print \"1 : %r\" % (a) # read#\nprint \"2 : %s\" % (a) # string#\nprint \"? : %d\" % (a) # digit\nprint \"3 : %r\" % (b)\nprint \"4 : %s\" % (b)\n# print \"? : %d\" % (b) !!!  1 : 30\n2 : 30\n? : 30\n3 : 'A list \\t*A  \\\\ \" \\' '\n4 : A list  *A  \\ \" '  Creating web apps, games, and search engines all involve storing and working with different types of data. They do so using variables. A variable stores a piece of data, and gives it a specific name.  my_variable = 10  You just stored a number in a variable. Numbers are one data type we use in programming. A second data type is called a boolean. A boolean is like a light switch. It can only have two values. Just like a light switch can only be on or off, a boolean can only be  True  or  False .  my_int = 7\nmy_float = 1.23\nmy_bool = True  Say  my_int = 7 . You can change the value of a variable by \u201creassigning\u201d it.  my_int = 7\n\nmy_int = 3\n\nprint my_int  3  In Python, whitespace is used to structure code. Whitespace is important, so you have to be careful with how you use it.  def spam():\n    eggs = 12\n    return eggs\n\nprint spam()  12  You\u2019ll get this error whenever your whitespace is off.  The interpreter runs your code line by line, and checks for any errors.  You probably saw us use the # sign a few times in earlier exercises. The # sign is for comments. A comment is a line of text that Python won\u2019t try to run as code. It\u2019s just for humans to read.  Comments make your program easier to understand. When you look back at your code or others want to collaborate with you, they can read your comments and easily figure out what your code does.  The  #  sign will only comment out a single line. While you could write a multi-line comment, starting each line with  # , that can be a pain.  Instead, for multi-line comments, you can include the whole block in a set of triple quotation marks:  \"\"\"\nSipping from your cup 'til it runneth over,\nHoly Grail.\n\"\"\"  \"\\nSipping from your cup 'til it runneth over,\\nHoly Grail.\\n\"  Great! Now let\u2019s do some math. You can add, subtract, multiply, divide numbers.  addition = 72 + 23\nsubtraction = 108 - 204\nmultiplication = 108 * 0.5\ndivision = 108 / 9\n\ncount_to = 72 + 56\n\nprint count_to  128  All that math can be done on a calculator, so why use Python? Because you can combine math with other data types (e.g. booleans) and commands to create useful programs. Calculators just stick to numbers.  Create a new variable called eight and set it to 8, or the result of 2 to the power to 3 ( 2 ^ 3  oe  2 ** 3 ).  eggs = 10 ** 2\n\nprint eggs  100  Our final operator is modulo. Modulo returns the remainder from a division. So, if you type  3 % 2 , it will return 1, because 2 goes into 3 evenly once, with 1 left over.  spam = 5 % 4\n\nprint spam  1",
            "title": "Python Syntax"
        },
        {
            "location": "/Codecademy Python/#tip-calculator",
            "text": "Now let\u2019s apply the concepts from the previous section to a real world example. You\u2019ve finished eating at a restaurant, and received this bill:   Cost of meal: $44.50  Restaurant tax: 6.75%  Tip: 15%   meal = 44.50\ntax = 6.75/100 \ntip = 0.15\n\nmeal = meal + meal * tax\ntotal = meal + meal * tip\n\nprint(\"%.2f\") % total  54.63",
            "title": "Tip Calculator"
        },
        {
            "location": "/Codecademy Python/#quiz-1",
            "text": "OK",
            "title": "Quiz 1"
        },
        {
            "location": "/Codecademy Python/#unit-2-strings-and-console-output",
            "text": "",
            "title": "UNIT 2, Strings and Console Output"
        },
        {
            "location": "/Codecademy Python/#strings-console-output",
            "text": "Another useful data type is the string. A string can contain letters, numbers, and symbols.  name = \"Ryan\"\nage = \"19\"\nfood = \"cheese\"  Let\u2019s get a little practice in with strings.  caesar = \"Graham\"\npraline = \"John\"\nviking = \"Teresa\"\n\nprint caesar\nprint praline\nprint viking  Graham\nJohn\nTeresa  'There's a snake in my boot!'    File \"<ipython-input-16-13621f01b99c>\", line 1\n    'There's a snake in my boot!'\n           ^\nSyntaxError: invalid syntax  This code breaks because Python thinks the apostrophe in \u2018There\u2019s\u2018 ends the string. We can use the backslash to fix the problem, like this:  'There\\'s a snake in my boot!'\n'This isn\\'t flying, this is falling with style!'  \"This isn't flying, this is falling with style!\"  Each character in a string is assigned a number. This number is called the index. Check out the diagram in the editor.  c = \"cats\"[0]\nn = \"Ryan\"[3]\n\n\"\"\"\nThe string \"PYTHON\" has six characters,\nnumbered 0 to 5, as shown below:\n\n+---+---+---+---+---+---+\n| P | Y | T | H | O | N |\n+---+---+---+---+---+---+\n  0   1   2   3   4   5\n\nSo if you wanted \"Y\", you could just type\n\"PYTHON\"[1] (always start counting from 0!)\n\"\"\"\nfifth_letter = \"MONTY\"[4]\n\nprint fifth_letter  Y  Now that we know how to store strings, let\u2019s see how we can change them using string methods. String methods let you perform specific tasks for strings. We\u2019ll focus on four string methods:   len()  lower()  upper()  str()   length, string  parrot = \"Norwegian Blue\"\n\nprint len(parrot) # length, number of characters, including blanks\nprint parrot.lower() # to lowercases\nprint parrot.upper() # to uppercases\n\npi = 3.14\n\nprint str(pi) # number of character in the string  14\nnorwegian blue\nNORWEGIAN BLUE\n3.14  len(string)  and  str(object) , but dot notation (such as \u201cString\u201d.upper()) for the rest.  Methods that use dot notation only work with strings.  On the other hand,  len()  and  str()  can work on other data types.  The area where we\u2019ve been writing our code is called the editor. The console is where the results of your code is shown.  print  simply displays your code in the console.  print \"Monty Python\"\n\nthe_machine_goes = \"Ping!\"\nprint the_machine_goes  Monty Python\nPing!  Now let\u2019s combine the two! The  +  operator between strings will \u2018add\u2019 them together, one after the other. Notice that there are spaces inside the quotation marks after Life and of so that we can make the combined string look like 3 words. Combining strings together like this is called concatenation. Let\u2019s try concatenating a few strings together now!  print \"Life \" + \"of \" + \"Brian\"\nprint \"Spam and eggs\"  Life of Brian\nSpam and eggs  Sometimes you need to combine a string with something that isn\u2019t a string. In order to do that, you have to convert the non-string into a string. he  str()  method converts non-strings into strings. In the above example, you convert the number 2 into a string and then you concatenate the strings together.  print \"The value of pi is around \" + str(3.14)  The value of pi is around 3.14  When you want to print a variable with a string, the  %  operator after a string is used to combine a string with variables. The  %  operator will replace a  %s  in the string with the string variable that comes after it.  string_1 = \"Camelot\"\nstring_2 = \"place\"\n\nprint \"Let's not go to %s. 'Tis a silly %s.\" % (string_1, string_2)\n\nname = raw_input(\"What is your name?\")\nquest = raw_input(\"What is your quest?\")\ncolor = raw_input(\"What is your favorite color?\")\n\nprint \"Ah, so your name is %s, your quest is %s, \" \\\n    \"and your favorite color is %s.\" % (name, quest, color)  Let's not go to Camelot. 'Tis a silly place.\nWhat is your name?Al\nWhat is your quest?Graal\nWhat is your favorite color?red\nAh, so your name is Al, your quest is Graal, and your favorite color is red.",
            "title": "Strings &amp; Console Output"
        },
        {
            "location": "/Codecademy Python/#date-and-time",
            "text": "A lot of times you want to keep track of when something happened. We can do so in Python using  datetime . Here we\u2019ll use datetime to print the date and time in a nice format.  from datetime import datetime # all functions from datetime are imported\n\nnow = datetime.now()\n\nprint now\nprint now.year\nprint now.month\nprint now.day\n\nprint '%s/%s/%s' % (now.month, now.day, now.year)\nprint '%s:%s:%s' % (now.hour, now.minute, now.second)\n\nprint '%s/%s/%s %s:%s:%s' % (now.month, now.day, now.year, now.hour, now.minute, now.second)  2016-10-18 14:02:03.661000\n2016\n10\n18\n10/18/2016\n14:2:3\n10/18/2016 14:2:3",
            "title": "Date and Time"
        },
        {
            "location": "/Codecademy Python/#quiz-2",
            "text": "time = datetime.now()\nprint time.day\n\ntime = datetime.now() #13:08:09\nprint str(time.hour) + \":\" + str(time.minute) + \":\" + str(time.second)\n\nnow = datetime.now() #2013-01-04 19:22:43\n\nprint '%s/%s/%s %s:%s:%s' % (now.day, now.month, now.year, now.hour, now.minute, now.second)\n\nday = 04  18\n14:2:11\n18/10/2016 14:2:11",
            "title": "Quiz 2"
        },
        {
            "location": "/Codecademy Python/#project-python-mad-libs",
            "text": "concatenate, variable  Python can be used for a variety of different tasks. In this project, we\u2019ll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story.  Mad Libs require:   Words from the reader (for the blank spaces)  A story to plug the words into   For this project, we\u2019ll provide you with the story (feel free to modify it), but it will be up to you to build a program that does the following:   Prompt the user for input  Print the entire Mad Libs story with the user\u2019s input in the right places      \"\"\"\nPython can be used for a variety of different tasks. In this project, we'll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story.\n\"\"\"\n\nprint \"The program is running.\"\n\nname = raw_input(\"Input a name? \")\n\nadj_one = raw_input(\"Input an adjective? \")\nadj_two = raw_input(\"Input another adjective? \")\nadj_three = raw_input(\"Input a last adjective? \")\n\nverb_one = raw_input(\"Input a verb? \")\nverb_two = raw_input(\"Input another verb? \")\nverb_three = raw_input(\"Input a last verb? \")\n\nnoun_one = raw_input(\"Input a noun? \")\nnoun_two = raw_input(\"Input another noun? \")\nnoun_three = raw_input(\"Input another noun? \")\nnoun_four = raw_input(\"Input a last noun? \")\n\nanimal = raw_input(\"Input an animal? \")\nfood = raw_input(\"Input a food? \")\nfruit = raw_input(\"Input a fruit? \")\nnumber = raw_input(\"Input a number? \")\nsuperhero = raw_input(\"Input a superhero? \")\ncountry = raw_input(\"Input a country? \")\ndessert = raw_input(\"Input a dessert? \")\nyear = raw_input(\"Input a year? \")\nprint \"\"  The program is running.\nInput a name? Al\nInput an adjective? small\nInput another adjective? great\nInput a last adjective? yellow\nInput a verb? dig\nInput another verb? walk\nInput a last verb? eat\nInput a noun? spoon\nInput another noun? lamp\nInput another noun? table\nInput a last noun? pen\nInput an animal? dog\nInput a food? pasta\nInput a fruit? apple\nInput a number? 10\nInput a superhero? spiderman\nInput a country? mexico\nInput a dessert? apple pie\nInput a year? 2016  The template for the story.  STORY = \"This morning I woke up and felt %s because %s was going to finally %s over the big %s %s. On the other side of the %s were many %ss protesting to keep %s in stores. The crowd began to %s to the rythym of the %s, which made all of the %ss very %s. %s tried to %s into the sewers and found %s rats. Needing help, %s quickly called %s. %s appeared and saved %s by flying to %s and dropping %s into a puddle of %s. %s then fell asleep and woke up in the year %s, in a world where %ss ruled the world.\"\n\nprint STORY % (adj_one, name, verb_one, adj_two, noun_one, noun_two, animal, food, verb_two, noun_three, fruit, adj_three, name, verb_three, number, name, superhero, superhero, name, country, name, dessert, name, year, noun_four)  This morning I woke up and felt small because Al was going to finally dig over the big great spoon. On the other side of the lamp were many dogs protesting to keep pasta in stores. The crowd began to walk to the rythym of the table, which made all of the apples very yellow. Al tried to eat into the sewers and found 10 rats. Needing help, Al quickly called spiderman. spiderman appeared and saved Al by flying to mexico and dropping Al into a puddle of apple pie. Al then fell asleep and woke up in the year 2016, in a world where pens ruled the world.",
            "title": "Project Python Mad Libs"
        },
        {
            "location": "/Codecademy Python/#unit-3-conditionals-and-control-flow",
            "text": "",
            "title": "UNIT 3, Conditionals and Control Flow"
        },
        {
            "location": "/Codecademy Python/#conditionals-control-flow",
            "text": "Control flow gives us this ability to choose among outcomes based off what else is happening in the program.  def clinic():\n\n    print \"You've just entered the clinic!\"\n    print \"Do you take the door on the left or the right?\"\n    answer = raw_input(\"Type left or right and hit 'Enter'.\").lower()\n    if answer == \"left\" or answer == \"l\":\n        print \"This is the Verbal Abuse Room, you heap of parrot droppings!\"\n    elif answer == \"right\" or answer == \"r\":\n        print \"Of course this is the Argument Room, I've told you that already!\"\n    else:\n        print \"You didn't pick left or right! Try again.\"\n        clinic() # launch the function back\n\nclinic()  You've just entered the clinic!\nDo you take the door on the left or the right?\nType left or right and hit 'Enter'.left\nThis is the Verbal Abuse Room, you heap of parrot droppings!  Comparators. There are six:   Equal to:  ==  Not equal to:  !=  Less than:  <  Less than or equal to:  <=  Greater than:  >  Greater than or equal to:  >=   Note that  ==  compares whether two things are equal, and  =  assigns a value to a variable.  bool_one = 1 + 2\nbool_two = 3\nbool_one == bool_two # true  True  Boolean operators compare statements and result in boolean values. There are three boolean operators:   and , which checks if both the statements are True;  or , which checks if at least one of the statements is True;  not , which gives the opposite of the statement.   bool_one = 1 > 2 and 2 > 3 # false\nbool_two = False and True # false\nbool_one = True or False # true\nbool_two = 2 == 2 or 2 == 3 # true\nbool_one = not 40 != 41 # true  if  is a conditional statement.  answer = \"Left\"\n\nif answer == \"Left\":\n    print \"This is the Verbal Abuse Room, you heap of parrot droppings!\"\n\ndef using_control_once():\n\n    if \"A\"==\"A\":\n        return \"Success #1\"\n\ndef using_control_again():\n\n    if 1!=2:\n        return \"Success #2\"\n\nprint using_control_once()\nprint using_control_again()  This is the Verbal Abuse Room, you heap of parrot droppings!\nSuccess #1\nSuccess #2  The  else  statement complements the  if  statement.  answer = \"'This but a scratch!\"\n\ndef black_knight():\n\n    if answer == \"'Tis but a scratch!\":\n        return True\n    else:             \n        return False  # Make sure this returns False\n\ndef french_soldier():\n\n    if answer == \"Go away, or I shall taunt you a second time!\":\n        return True\n    else:             \n        return False  # Make sure this returns False\n\nprint black_knight()\nprint french_soldier()  False\nFalse  elif  is short for \u2018else if\u2019. It means exactly what it sounds like: \u201cotherwise, if the following expression is true, do this!\u201d  def greater_less_equal_5(answer):\n\n    if answer > 5:\n        return 1\n    elif answer < 5:          \n        return -1\n    else:\n        return 0\n\nprint greater_less_equal_5(4)\nprint greater_less_equal_5(5)\nprint greater_less_equal_5(6)\n\n\ndef the_flying_circus():\n\n    if 1 != 0 and 3 > 2:\n        return True\n    elif 0 == 0 or 2 == 2:\n        return False\n    else:\n        return True\n\nprint the_flying_circus()  -1\n0\n1\nTrue",
            "title": "Conditionals &amp; Control Flow"
        },
        {
            "location": "/Codecademy Python/#pyglatin",
            "text": "Now let\u2019s take what we\u2019ve learned so far and write a Pig Latin translator. Pig Latin is a language game, where you move the first letter of the word to the end and add \u201cay.\u201d So \u201cPython\u201d becomes \u201cythonpay.\u201d   print 'Welcome to the Pig Latin Translator!'\n\noriginal = raw_input(\"Enter a word:\")\nif len(original) > 0 and original.isalpha():\n    print original\nelse:\n    print \"empty\"\n\n\npyg = 'ay'\n\noriginal = raw_input('Enter a word: ')\n\nif len(original) > 0 and original.isalpha():\n    word = original.lower()\n    first = word[0]\n    new_word = word + first + pyg\n    new_word = new_word[1:len(new_word)]\n    print new_word\nelse:\n    print 'empty'  Welcome to the Pig Latin Translator!\nEnter a word:translator\ntranslator\nEnter a word: radiator\nadiatorray",
            "title": "PygLatin"
        },
        {
            "location": "/Codecademy Python/#quiz-3",
            "text": "Takeaway: there no limits to the number of  elif .",
            "title": "Quiz 3"
        },
        {
            "location": "/Codecademy Python/#project-area-calculator",
            "text": "Python is especially useful for doing math and can be used to automate many calculations. In this project, you\u2019ll create a calculator than can compute the area of a given shape, as selected by the user. The calculator will be able to determine the area of the following shapes:   Circle  Triangle   The program should do the following:   Prompt the user to select a shape  Depending on the shape the user selects, calculate the area of that shape  Print the area of that shape to the user   Python is especially useful for doing math and can be used to automate many calculations.  from math import pi\nfrom time import sleep\nfrom datetime import datetime\n\nnow = datetime.now() # from datetime\nprint \"The calculator is starting up at: \\n\"+str(now)\n\nprint \"\\nCurently: %s/%s/%s %s:%s\" %(now.month, now.day, now.year, now.hour, now.minute)\n\nsleep(1) # pause 1 sec\n\nhint = \"Don't forget to include the correct units!\"\n\n\nfrom math import pi\nfrom time import sleep\n\ndef question():\n\n        option = raw_input(\"Enter C for Circle or T for Triangle: \")\n        if option.upper() == 'C' or option.upper() == 'CIRCLE':\n            print circle()\n        elif option.upper() == 'T' or option.upper() == 'TRIANGLE':\n            print triangle()\n        else:\n            print \"Please answer with a C or T\", question() #!!!!!!\n\ndef circle():\n\n    radius = float(raw_input(\"Enter radius: \"))\n\n    areac = pi * (radius ** 2)\n    print \"The pie is baking...\"\n    sleep(1)\n    return(str(\"%.2f\" % areac)) # !!!!!\n\ndef triangle():\n\n    base = float(raw_input(\"Enter base: \"))\n    height = float(raw_input(\"Enter height: \"))\n    areat = base * height / 2\n    print \"Uni Bi Tri...\"\n    sleep(1)\n    return(str(\"%.2f\" % areat)) # !!!!!\n\nquestion()  The calculator is starting up at: \n2016-10-18 14:05:19.204000\n\nCurently: 10/18/2016 14:5\nEnter C for Circle or T for Triangle: T\nEnter base: 10\nEnter height: 5\nUni Bi Tri...\n25.00",
            "title": "Project Area Calculator"
        },
        {
            "location": "/Codecademy Python/#unit-4-functions",
            "text": "",
            "title": "UNIT 4, Functions"
        },
        {
            "location": "/Codecademy Python/#functions",
            "text": "You might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it\u2019s much cleaner to define a function, which can then be used repeatedly.  def tax(billa):\n\n    billb = float(billa) * 1.08\n    return billb\n\ndef tip(billc):\n\n    billd = float(billc) * 1.15\n    return billd\n\nmeal_cost = 100.00\nmeal_with_tax = tax(meal_cost)\nprint(\"With tax: %.2f\" % meal_with_tax) # !!!!!\nmeal_with_tip = tip(meal_with_tax)\nprint(\"With tip: %.2f\" % meal_with_tip)\n\n# The header, the comment, the body:\ndef spam():\n\n    \"\"\"print the string \"Eggs!\" to the console.\"\"\"\n    print \"Eggs!\"  With tax: 108.00\nWith tip: 124.20  After defining a function, it must be called to be implemented.  def square(n):\n\n    \"\"\"Returns the square of a number.\"\"\"\n    squared = n ** 2\n    return(\"%d squared is %d.\" % (n, squared))\n\nprint square(10)  10 squared is 100.  Functions can be much more powerful than that. For example, a function can call another function.  n = 1\n\ndef one_good_turn(n):\n\n    return n + 1\n\ndef deserves_another(m):\n\n    return one_good_turn(m) + 2 # calling a function already defined  Again.  def cube(number):\n\n    return number ** 3\n\ndef by_three(number):\n\n    if number % 3 == 0:    \n        return cube(number)\n    else:\n        return False\n\nby_three(3)  27  Import modules to use custom functions.  import math\n\nprint math.sqrt(25)  5.0  However, we only really needed the sqrt function, and it can be frustrating to have to keep typing  math.sqrt() . It\u2019s possible to import only certain variables or functions from a given module (like  pi  above). Pulling in just a single function from a module is called a function import, and it\u2019s done with the from keyword.  from math import sqrt # module 'math', function 'sqrt'\nfrom math import pi # module 'math', variable 'pi'  Universal  import  can handle all of the variables and functions in a module to avoid to constantly type  math .  from math import *  Universal  import  may look great on the surface, but they\u2019re not a good idea for one very important reason: they fill your program with a ton of variable and function names without the safety of those names still being associated with the module(s) they came from.  dir(), dir  import math\n\neverything = dir(math)\nprint everything  ['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']  For these reasons, it\u2019s best to stick with either  import module  and type  module.name  or just import specific variables and functions from various modules as needed.  Let\u2019s look at some of the functions that are built in to Python (no modules required!).  def distance_from_zero(arg):\n\n    return abs(arg)\n\ndef biggest_number(arg1, arg2):\n\n    return min(arg1, arg2)\n\ndef smallest_number(*args):\n\n    return min(args)\n\nprint distance_from_zero(-10)  print biggest_number(-10, -5)  -10  print biggest_number(-10, -5, 5, 10) # test  ---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-24-40abbc687778> in <module>()\n----> 1 print biggest_number(-10, -5, 5, 10) # test\n\n\nTypeError: biggest_number() takes exactly 2 arguments (4 given)  print smallest_number(1, 2)\nprint smallest_number(3, 4, 5, 6, 7)\nprint smallest_number(-10, -5, 5, 10)  1\n3\n-10  maximum = max(-5, 3, 5, 10)\nprint maximum\n\nminimum = min(-3, -5)\nprint minimum\n\nabsolute = abs(-42)\nprint absolute\n\nprint type(42) # <type 'int'>\nprint type(4.2) # <type 'float'>\nprint type('spam') # <type 'str'>  10\n-5\n42\n<type 'int'>\n<type 'float'>\n<type 'str'>",
            "title": "Functions"
        },
        {
            "location": "/Codecademy Python/#taking-a-vacation",
            "text": "def hotel_cost(nights):\n\n    return 140 * nights\n\ndef plane_ride_cost(city):\n\n    if city == \"Charlotte\":\n        return 183\n    elif city == \"Tampa\":\n        return 220\n    elif city == \"Pittsburgh\":\n        return 222\n    elif city == \"Los Angeles\":\n        return 475\n\ndef rental_car_cost(days):\n\n    cost = days * 40\n    if days >= 7:\n        cost -= 50\n    elif days >= 3 and days<7:\n        cost -= 20\n    else:\n        cost\n    return cost\n\ndef trip_cost(city, days, spending_money):\n\n    return rental_car_cost(days) + hotel_cost(days)+plane_ride_cost(city) + spending_money\n\nprint trip_cost(\"Los Angeles\", 5, 600)  1955",
            "title": "Taking a Vacation"
        },
        {
            "location": "/Codecademy Python/#quiz-4",
            "text": "OK",
            "title": "Quiz 4"
        },
        {
            "location": "/Codecademy Python/#project-number-guess",
            "text": "Wanna play a game? In this project, we\u2019ll build a program that rolls a pair of dice and asks the user to guess a number. Based on the user\u2019s guess, the program should determine a winner. If the user\u2019s guess is greater than the total value of the dice roll, they win! Otherwise, the computer wins.  The program should do the following:   Randomly roll a pair of dice  Add the values of the roll  Ask the user to guess a number  Compare the user\u2019s guess to the total value  Decide a winner (the user or the program)  Inform the user who the winner is   from random import randint\nfrom time import sleep\n\ndef get_user_guess():\n\n    user_guess = int(raw_input(\"Guess a number: \"))\n    return user_guess\n\ndef roll_dice(number_of_sides):\n\n    first_roll = randint(1, number_of_sides)\n    second_roll = randint(1, number_of_sides)\n    max_value = number_of_sides * 2\n    print \"The maximum value is: \"+str(max_value)\n    sleep(1)\n    user_guess = get_user_guess()\n    if user_guess > max_value:\n        print \"Your guess is higher than the max allowed (\"+str(max_value)+\"). Please, take another guess.\"\n        return # exit the if block is condition met\n    else:\n        print \"Rolling...\"\n        sleep(1)\n        print \"First roll is: %d\" % (first_roll)\n        sleep(1)\n        print \"Second roll is: %d\" % (second_roll)\n        total_roll = first_roll + second_roll\n        print \"Result...\"\n        sleep(1)\n        if user_guess > total_roll:\n            print \"You win since your guess, \"+str(user_guess)+\", is greater than the total roll, \"+str(total_roll)\n            return # exit\n        else:\n            print \"You lose!\"\n            return # exit\n\nroll_dice(6)  The maximum value is: 12\nGuess a number: 5\nRolling...\nFirst roll is: 1\nSecond roll is: 2\nResult...\nYou win since your guess, 5, is greater than the total roll, 3",
            "title": "Project Number Guess"
        },
        {
            "location": "/Codecademy Python/#unit-5-lists-dictionaries",
            "text": "",
            "title": "UNIT 5, Lists &amp; Dictionaries"
        },
        {
            "location": "/Codecademy Python/#lists-and-dictionaries",
            "text": "Lists are a datatype you can use to store a collection of different pieces of information as a sequence under a single variable name. (Datatypes you\u2019ve already learned about include strings, numbers, and booleans.)  zoo_animals = [\"pangolin\", \"cassowary\", \"sloth\", \"kangourou\"];\n\n# You can access an individual item on the list by its index. An index is like an address that identifies the item's place in the list. The index appears directly after the list name, in between brackets, like this: list_name[index].\n\nif len(zoo_animals) > 3:\n    print \"The first animal at the zoo is the \" + zoo_animals[0]\n    print \"The second animal at the zoo is the \" + zoo_animals[1]\n    print \"The third animal at the zoo is the \" + zoo_animals[2]\n    print \"The fourth animal at the zoo is the \" + zoo_animals[3]  The first animal at the zoo is the pangolin\nThe second animal at the zoo is the cassowary\nThe third animal at the zoo is the sloth\nThe fourth animal at the zoo is the kangourou  numbers = [5, 6, 7, 8]\n\nprint \"Adding the numbers at indices 0 and 2...\"\nprint numbers[0] + numbers[2]\nprint \"Adding the numbers at indices 1 and 3...\"\nprint numbers[1] + numbers[3]  Adding the numbers at indices 0 and 2...\n12\nAdding the numbers at indices 1 and 3...\n14  A list doesn\u2019t have to have a fixed length. You can add items to the end of a list any time you like!  suitcase = []\n\nsuitcase.append(\"sunglasses\")\nsuitcase.append(\"calculator\")\nsuitcase.append(\"screen\")\nsuitcase.append(\"mouse\")\n\nlist_length = len(suitcase) # Set this to the length of suitcase\n\nprint list_length\n\nprint \"There are %d items in the suitcase.\" % (list_length)\nprint suitcase  4\nThere are 4 items in the suitcase.\n['sunglasses', 'calculator', 'screen', 'mouse']  suitcase = [\"sunglasses\", \"hat\", \"passport\", \"laptop\", \"suit\", \"shoes\"]\n\nfirst  = suitcase[0:2] # The first and second items (index zero and one)\nmiddle = suitcase[2:4] # Third and fourth items (index two and three)\nlast = suitcase[4:6] # The last two items (index four and five)  You can slice a string exactly like a list! In fact, you can think of strings as lists of characters: each character is a sequential item in the list, starting from index 0.  animals = \"catdogfrog\"\n\ncat  = animals[:3] # The first three characters of animals\ndog  = animals[3:6] # The fourth through sixth characters\nfrog = animals[6:] # From the seventh character to the end  Sometimes you need to search for an item in a list.  animals = [\"aardvark\", \"badger\", \"duck\", \"emu\", \"fennec fox\"]\n\nduck_index = animals.index(\"duck\") # Use index() to find \"duck\"\n\nprint duck_index\n\nanimals.insert(duck_index,\"cobra\")\n\nprint animals # Observe what prints after the insert  operation  2\n['aardvark', 'badger', 'cobra', 'duck', 'emu', 'fennec fox']  If you want to do something with every item in the list, you can use a for loop.  my_list = [1,9,3,8,5,7]\n\nfor number in my_list:\n    print 2 * number  2\n18\n6\n16\n10\n14  If your list is a jumbled mess, you may need to  sort()  it.  start_list = [5, 3, 1, 2, 4]\nsquare_list = []\n\nfor var in start_list:\n    square_list.append(var ** 2)\n\nsquare_list.sort()\n\nprint square_list  [1, 4, 9, 16, 25]  A dictionary is similar to a list, but you access values by looking up a key instead of an index. A key can be any string or number. Dictionaries are great for things like phone books (pairing a name with a phone number), login pages (pairing an e-mail address with a username), and more!  residents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106}\n\nprint residents['Puffin'] # Prints Puffin's room number\nprint residents['Sloth']\nprint residents['Burmese Python']  104\n105\n106  An empty pair of curly braces  {}  is an empty dictionary, just like an empty pair of  []  is an empty list.  Like Lists, Dictionaries are \u2018mutable\u2019. This means they can be changed after they are created. One advantage of this is that we can add new key-value pairs to the dictionary after it is created.  The length  len()  of a dictionary is the number of key-value pairs it has. Each pair counts only once, even if the value is a list.  menu = {} # Empty dictionary\n\nmenu['Chicken Alfredo'] = 14.50 # Adding new key-value pair\n\nprint menu['Chicken Alfredo']\n\nmenu['General Tao'] = 12.00\nmenu['Pad Thai'] = 10.50\nmenu['Poutine'] = 9.00\n\nprint \"There are \" + str(len(menu)) + \" items on the menu.\"\nprint menu\n\nfor key, value in menu.iteritems(): # !!!!!\n    print key, value\n\nfor key, value in menu.iteritems(): # !!!!!\n    print key\n\nfor key, value in menu.iteritems(): # !!!!!\n    print value  14.5\nThere are 4 items on the menu.\n{'Chicken Alfredo': 14.5, 'General Tao': 12.0, 'Poutine': 9.0, 'Pad Thai': 10.5}\nChicken Alfredo 14.5\nGeneral Tao 12.0\nPoutine 9.0\nPad Thai 10.5\nChicken Alfredo\nGeneral Tao\nPoutine\nPad Thai\n14.5\n12.0\n9.0\n10.5  Because dictionaries are mutable, they can be changed in many ways. Items can be removed from a dictionary with the  del()  command.  # key - animal_name : value - location \n\nzoo_animals = {\n'Unicorn' : 'Cotton Candy House',\n'Sloth' : 'Rainforest Exhibit',\n'Bengal Tiger' : 'Jungle House',\n'Atlantic Puffin' : 'Arctic Exhibit',\n'Rockhopper Penguin' : 'Arctic Exhibit'\n}  A dictionary (or list) declaration may break across multiple lines  Removing the \u2018Unicorn\u2019 entry. (Unicorns are incredibly expensive.)  zoo_animals = {\n'Unicorn' : 'Cotton Candy House',\n'Sloth' : 'Rainforest Exhibit',\n'Bengal Tiger' : 'Jungle House',\n'Atlantic Puffin' : 'Arctic Exhibit',\n'Rockhopper Penguin' : 'Arctic Exhibit'\n}\n\ndel zoo_animals['Unicorn']\ndel zoo_animals['Sloth']\ndel zoo_animals['Bengal Tiger']\nzoo_animals['Rockhopper Penguin'] = 'Cotton Candy House'\n\nprint zoo_animals  {'Atlantic Puffin': 'Arctic Exhibit', 'Rockhopper Penguin': 'Cotton Candy House'}  Sometimes you need to remove something from a list.  backpack = ['xylophone', 'dagger', 'tent', 'bread loaf']\n\nbackpack.remove('dagger')  We can create a dictionary that holds many types of values.  extract, sort, remove  inventory = {\n    'gold' : 500,\n    'pouch' : ['flint', 'twine', 'gemstone'], # Assigned a new list to 'pouch' key\n    'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']\n}\n\nprint inventory\n\n# Adding a key 'burlap bag' and assigning a list to it\ninventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']\n\nprint inventory  {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'gold': 500}\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}  # Sorting the list found under the key 'pouch'\ninventory['pouch'].sort() \n\nprint inventory  {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}  inventory['pocket'] = ['seashell', 'strange berry', 'lint']\n\nprint inventory  {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}  inventory['backpack'].sort()\n\nprint inventory  {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'dagger', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}  inventory['backpack'].remove('dagger')\n\nprint inventory  {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}  inventory['gold'] += 50\n\nprint inventory  {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 550}",
            "title": "Lists and Dictionaries"
        },
        {
            "location": "/Codecademy Python/#a-day-at-the-supermarket",
            "text": "for  loops allow us to iterate through all of the elements in a list from the left-most (or zeroth element) to the right-most element.  names = [\"Adam\", \"Alex\", \"Mariah\", \"Martine\", \"Columbus\"]\n\nfor items in names:\n    print items  Adam\nAlex\nMariah\nMartine\nColumbus  You can also use a for loop on a dictionary to loop through its keys.  webster = {\n    \"Aardvark\" : \"A star of a popular children's cartoon show.\",\n    \"Baa\" : \"The sound a goat makes.\",\n    \"Carpet\": \"Goes on the floor.\",\n    \"Dab\": \"A small amount.\"\n}\n\nfor item in webster:\n    print webster[item]  A star of a popular children's cartoon show.\nGoes on the floor.\nA small amount.\nThe sound a goat makes.  While looping, you may want to perform different actions depending on the particular item in the list.  a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\nfor item in a:\n    if item % 2 == 0:\n        print item  0\n2\n4\n6\n8\n10\n12  Functions can also take lists as inputs and perform various operations on those lists.  def count_small(numbers):\n\n    total = 0\n    for n in numbers:\n        if n < 10:\n            total = total + 1\n    return total\n\nlost = [4, 8, 15, 16, 23, 42]\nsmall = count_small(lost)\n\nprint small  2  You can loop through strings the same way you loop through lists!  for letter in \"Codecademy\":\n    print letter\n\nword = \"Programming is fun!\"\n\nfor letter in word:\n    # Only print out the letter i\n    if letter == \"i\":\n        print letter  C\no\nd\ne\nc\na\nd\ne\nm\ny\ni\ni  You are now the proud owner of your very own Codecademy brand supermarket. For paperwork and accounting purposes, let\u2019s record the total value of your inventory.  prices = {\n    \"banana\" : 4,\n    \"apple\" : 2,\n    \"orange\" : 1.5,\n    \"pear\" : 3\n    }\n\nstock = {\n    \"banana\" : 6,\n    \"apple\" : 0,\n    \"orange\" : 32,\n    \"pear\" : 15\n    }\n\ntotal = 0\n\nfor item in prices:\n    print item # print key\n    print \"price: %s\" % prices[item] # print value\n    print \"stock: %s\" % stock[item]\n    print prices[item]*stock[item]\n    total += prices[item]*stock[item]\n\nprint total  orange\nprice: 1.5\nstock: 32\n48.0\npear\nprice: 3\nstock: 15\n45\nbanana\nprice: 4\nstock: 6\n24\napple\nprice: 2\nstock: 0\n0\n117.0  In order for customers to order online, we are going to have to make a consumer interface.  shopping_list = [\"banana\", \"orange\", \"apple\"]\n\nstock = {\n    \"banana\" : 6,\n    \"apple\" : 0,\n    \"orange\" : 32,\n    \"pear\" : 15\n}\n\nprices = {\n    \"banana\" : 4,\n    \"apple\" : 2,\n    \"orange\" : 1.5,\n    \"pear\" : 3\n}\n\ndef compute_bill(food):\n\n    total = 0\n    for item in food:\n        if stock[item] > 0:\n            total += prices[item] # you only pick one from the stock!\n            stock[item] = stock[item] - 1 # the stock goes down by 1\n    print total\n    return food\n\nprint compute_bill(shopping_list)  5.5\n['banana', 'orange', 'apple']",
            "title": "A Day at the Supermarket"
        },
        {
            "location": "/Codecademy Python/#quiz-5",
            "text": "OK",
            "title": "Quiz 5"
        },
        {
            "location": "/Codecademy Python/#project-rock-paper-scissors",
            "text": "In this project, we\u2019ll build Rock-Paper-Scissors!  The program should do the following:   Prompt the user to select either Rock, Paper, or Scissors  Instruct the computer to randomly select either Rock, Paper, or Scissors  Compare the user\u2019s choice and the computer\u2019s choice  Determine a winner (the user or the computer)  Inform the user who the winner is   from random import randint\nfrom time import sleep\n\noptions = [\"R\", \"P\", \"S\"]\nLOSE = \"You lost!\" # constant, uppercase\nWIN = \"You win!\"\n\ndef decide_winner(user_choice, computer_choice):\n\n    print(\"You picked: \"+str(user_choice))\n    print \"Computer selecting...\"\n\n    sleep(1)\n\n    print(\"Computer picks: \"+str(computer_choice))\n\n    user_choice_index = options.index(user_choice)\n    computer_choice_index = options.index(computer_choice) # !!!!!\n\n    if user_choice_index == computer_choice_index:\n        print \"Tie!\"\n    elif user_choice_index == 0 and computer_choice_index == 2:\n        print WIN\n    elif user_choice_index == 1 and computer_choice_index == 0:\n        print WIN\n    elif user_choice_index == 2 and computer_choice_index == 1:\n        print WIN\n    elif user_choice_index > 2:\n        print \"Invalid choice!!!\"\n    else:\n        print LOSE\n\ndef play_RPS():\n\n    print \"Let's pay Rock-Paper-Scissors\"\n\n    user_choice = raw_input(\"Select R for Rock, P for Paper, or S for Scissors: \")\n\n    sleep(1)\n\n    user_choice = user_choice.upper()\n    # computer_choice = options[randint(0,2)] \n    # pull out an element from a list, the 1st (0) out of 3 (2)\n\n    computer_choice = options[randint(0,len(options)-1)] \n    # This will ensure that if we ever add more options to the game, we won't have to change this line of code.\n\n    decide_winner(user_choice, computer_choice)\n\nplay_RPS()  Let's pay Rock-Paper-Scissors\nSelect R for Rock, P for Paper, or S for Scissors: r\nYou picked: R\nComputer selecting...\nComputer picks: S\nYou win!",
            "title": "Project Rock, Paper, Scissors"
        },
        {
            "location": "/Codecademy Python/#unit-6-student-becomes-the-teacher",
            "text": "",
            "title": "UNIT 6, Student Becomes the Teacher"
        },
        {
            "location": "/Codecademy Python/#student-becomes-the-teacher",
            "text": "Make a gradebook for all of your students.  First, create 3 dictionaries.  Second, add names, marks\u2026  lloyd = {\n    \"name\" : \"Lloyd\",\n    \"homework\" : [90.0, 97.0, 75.0, 92.0],\n    \"quizzes\" : [88.0, 40.0, 94.0],\n    \"tests\" : [75.0, 90.0]\n}\n\nalice = {\n    \"name\": \"Alice\",\n    \"homework\" : [100.0, 92.0, 98.0, 100.0],\n    \"quizzes\" : [82.0, 83.0, 91.0],\n    \"tests\" : [89.0, 97.0]\n}\n\ntyler = {\n    \"name\" : \"Tyler\",\n    \"homework\" : [0.0, 87.0, 75.0, 22.0],\n    \"quizzes\" : [0.0, 75.0, 78.0],\n    \"tests\" : [100.0, 100.0]\n}  Third, make a list.  students= [lloyd, alice, tyler]\n\ncases = [\"homework\", \"quizzes\", \"tests\"]\n\nw_calc = [0.10, 0.30, 0.60]\n\nall_average = 0.0  Four, print out.  print \"\\nStudents' Grades\".upper()\n\nprint \"\"\n\nfor student in students:\n    print student[\"name\"].upper()\n    print \"Homework\"\n    print student[\"homework\"]\n    print \"Quizzes\"\n    print student[\"quizzes\"]\n    print \"Tests\"\n    print student[\"tests\"]\n    print \"\"  STUDENTS' GRADES\n\nLLOYD\nHomework\n[90.0, 97.0, 75.0, 92.0]\nQuizzes\n[88.0, 40.0, 94.0]\nTests\n[75.0, 90.0]\n\nALICE\nHomework\n[100.0, 92.0, 98.0, 100.0]\nQuizzes\n[82.0, 83.0, 91.0]\nTests\n[89.0, 97.0]\n\nTYLER\nHomework\n[0.0, 87.0, 75.0, 22.0]\nQuizzes\n[0.0, 75.0, 78.0]\nTests\n[100.0, 100.0]  Compute averages.  def average(numbers):\n\n    total = sum(numbers)\n    temp = float(total) / len(numbers)\n    return temp\n\nprint \"Students' Averages\".upper()\n\nprint \"\"\n\nfor c in cases:\n    cc = c.upper()\n    print cc\n    for student in students:\n        numbers = student[c]\n        calc = round(average(numbers),1)\n        print student[\"name\"]\n        print calc\n    print \"\"  STUDENTS' AVERAGES\n\nHOMEWORK\nLloyd\n88.5\nAlice\n97.5\nTyler\n46.0\n\nQUIZZES\nLloyd\n74.0\nAlice\n85.3\nTyler\n51.0\n\nTESTS\nLloyd\n82.5\nAlice\n93.0\nTyler\n100.0  Compute weighted averages.  def w_average(marks):\n\n    #w_calc = [0.10, 0.30, 0.60]\n    s_calc = 0\n    w = 0\n    while w < len(w_calc):\n        s_calc += w_calc[w] * marks[w]\n        w += 1\n    return s_calc\n\ndef get_letter_grade(score):\n\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"\n\ndef get_class_average(ind):\n    class_total = round(ind / len(students), 1)\n    return class_total\n\nprint \"Students' Weighted Average\".upper()\n\nprint \" Ponderation [Homeworks, Quizzes, Tests]: [\"+str(float(w_calc[0])*100)+\", \"+str(float(w_calc[1])*100)+\", \"+str(float(w_calc[2])*100)+\"]\"\n\nprint \"\"\n\nfor student in students:\n    print(student[\"name\"] + \"'s marks are:\").upper()\n    l_calc = []\n    for c in cases:    \n        numbers = student[c]\n        calc = round(average(numbers),1)\n        l_calc.append(calc)\n    print l_calc\n    print(\"For a weighted average of:\")\n    ind_average = round(w_average(l_calc),1)\n    print ind_average\n    print(\"Standing for a:\")\n    print get_letter_grade(ind_average)\n    all_average += ind_average\n    print \"\"\n\nprint(\"Finally, The class average is:\").upper()\nprint get_class_average(all_average)  STUDENTS' WEIGHTED AVERAGE\n Ponderation [Homeworks, Quizzes, Tests]: [10.0, 30.0, 60.0]\n\nLLOYD'S MARKS ARE:\n[88.5, 74.0, 82.5]\nFor a weighted average of:\n80.5\nStanding for a:\nB\n\nALICE'S MARKS ARE:\n[97.5, 85.3, 93.0]\nFor a weighted average of:\n91.1\nStanding for a:\nA\n\nTYLER'S MARKS ARE:\n[46.0, 51.0, 100.0]\nFor a weighted average of:\n79.9\nStanding for a:\nC\n\nFINALLY, THE CLASS AVERAGE IS:\n83.8",
            "title": "Student Becomes the Teacher"
        },
        {
            "location": "/Codecademy Python/#unit-7-lists-and-functions",
            "text": "",
            "title": "UNIT 7, Lists and Functions"
        },
        {
            "location": "/Codecademy Python/#lists-and-functions",
            "text": "What you can do with a list: extract, add, append, remove, pop out, delete.  n = [1, 3, 5]\nprint n[1]\n\nn[1] = n [1] * 5\nprint n\n\n# Add elements\nn.append(4)\nprint n\n\n# Remove elements\nn.pop(0)\nprint n  3\n[1, 15, 5]\n[1, 15, 5, 4]\n[15, 5, 4]  What you can do with functions.  Multiply, divide.  number = 5\n\ndef my_function(x):\n\n    return x * 3\n\n# Print my_function(5)\nprint my_function(number)  15  Add, substract.  m = 5\nn = 13\n\ndef add_function(x,y):\n\n    return x + y\n\nprint add_function(m, n)  18  Concatenate.  n = \"Hello\"\n\ndef string_function(s):\n\n    return s + \" world\"\n\nprint string_function(n)  Hello world  Show all.  n = [3, 5, 7]\n\ndef list_function(x):\n\n    return x\n\nprint list_function(n)  [3, 5, 7]  Show some.  def list_function(x):\n\n    return x[1]\n\nn = [3, 5, 7]\n\nprint list_function(n)  5  Extract and modify.  def list_function(x):\n\n    x[1] = x[1] + 3\n    return x\n\nn = [3, 5, 7]\n\nprint list_function(n)  [3, 8, 7]  Add elements.  n = [3, 5, 7]\n\ndef list_extender(lst):\n\n    lst.append(9)\n    return lst\n\nprint list_extender(n)  [3, 5, 7, 9]  Remove elements.  n = [3, 5, 7]\n\ndef list_shorter(lst):\n\n    lst.remove(5)\n    return lst\n\nprint list_shorter(n)  [3, 7]  Pop out the 2nd element.  n = [3, 5, 7]\n\ndef list_extract(lst):\n\n    lst.pop(1)\n    return lst\n\nprint list_extract(n)  [3, 7]  Loop through each element.  n = [3, 5, 7]\n\ndef print_list(x):\n\n    for i in range(0, len(x)):\n        print x[i]\n\nprint print_list(n)  3\n5\n7\nNone  Loop, transform each element.  n = [3, 5, 7]\n\ndef double_list(x):\n\n    for i in range(0, len(x)):\n        x[i] = x[i] * 2\n    return x\n\nprint double_list(n)  [6, 10, 14]  Loop, transform each element.  def my_function(x):\n\n    for i in range(0, len(x)):\n        x[i] = x[i] * 2\n    return x\n\nprint my_function(range(3))\n\nprint range(6) # => [0,1,2,3,4,5]\nprint range(1,6) # => [1,2,3,4,5]\nprint range(1,6,3) # => [1,4]  [0, 2, 4]\n[0, 1, 2, 3, 4, 5]\n[1, 2, 3, 4, 5]\n[1, 4]  Loop, fill the variable with  +=  (or  -= ,  *= ,  /= )  n = [3, 5, 7]\n\ndef total(numbers):\n\n    result = 0 # empty variable\n    for item in numbers:\n        result += item\n    return result  Empty variable, loop, fill the variable.  n = [\"Michael\", \"Lieberman\"]\n\ndef join_strings(words):\n\n    result = \"\"\n    for item in words:\n        result = result + item\n    return result\n\nprint join_strings(n)  MichaelLieberman  Join (not add up) the list. You want this to  print [1, 2, 3, 4, 5, 6] .  m = [1, 2, 3]\nn = [4, 5, 6]\n\ndef join_lists(x,y):\n    return x + y\n\nprint join_lists(m, n)  [1, 2, 3, 4, 5, 6]  List of lists. Several loops.  n = [\n    [1, 2, 3],\n    [4, 5, 6, 7, 8, 9]\n]\n\ndef flatten(lists):\n\n    results = []\n    for lst in lists:\n        for num in range(len(lst)):\n            results.append(lst[num])\n    return results\n\nprint flatten(n)  [1, 2, 3, 4, 5, 6, 7, 8, 9]  Use  range(len(lst)) .  range, length  print range(6) # => [0,1,2,3,4,5]  [0, 1, 2, 3, 4, 5]",
            "title": "Lists and Functions"
        },
        {
            "location": "/Codecademy Python/#battleship",
            "text": "This first script is incomplete (work in progress). \nThe next script is functional.  from random import randint\n\nboard = []\n\nfor x in range(5):  # 0, 1, 2, 3, 4 (stop before 5)\n    board.append([\"O\"] * 5) # print 5 rows of 5 'O'\n\ndef print_board(board):\n\n    for row in board:\n        # print row # print ['O', 'O', 'O', 'O', 'O'] on 5 rows\n        print \" \".join(row) # print O O O O O \n\nprint \"Let's play Battleship!\"\n\ndef random_row(board): # hide the ship at r-c\n\n    return randint(0,len(board) - 1)\n\ndef random_col(board):\n\n    return randint(0,len(board) - 1)\n\nprint random_row(board)\nprint random_col(board)\n\nguess_row = int(raw_input(\"Guess Row (1 to 5):\")) # involve the player\nguess_col = int(raw_input(\"Guess Col (1 to 5):\"))\n\nprint ship_col # print ship position\nprint ship_row\n\nif (guess_row == ship_row) and (guess_col == ship_col):\n    print \"Congratulations! You sank my battleship!\"\n    guess_row=guess_row-1\n    guess_col=guess_col-1\n    board[guess_row][guess_col]=\"S\"\n    print print_board(board)\nelse:\n    #print \"You missed my battleship!\"\n    if guess_row not in range(5) or guess_row == 0 or guess_col not in range(5) or guess_col == 0: # condition for wrong entries\n        print \"Oops, that's not even in the ocean.\"\n    elif board[guess_row][guess_col] == \"X\":\n        print \"You guessed that one already.\"\n    else:\n        print \"You missed my battleship!\"\n\nguess_row = guess_row - 1 # transform the numbers, 1 becomes 0...\nguess_col = guess_col - 1\n\nboard[guess_row][guess_col] = \"X\" # replace the 'O'\nprint print_board(board)  Let's play Battleship!\n4\n0\nGuess Row (1 to 5):1\nGuess Col (1 to 5):2\n\n\n\n---------------------------------------------------------------------------\n\nNameError                                 Traceback (most recent call last)\n\n<ipython-input-87-efd1e0de637a> in <module>()\n     24 guess_col = int(raw_input(\"Guess Col (1 to 5):\"))\n     25 \n---> 26 print ship_col # print ship position\n     27 print ship_row\n     28\n\n\nNameError: name 'ship_col' is not defined",
            "title": "Battleship!"
        },
        {
            "location": "/Codecademy Python/#battleship-final",
            "text": "from random import randint\n\nboard = []\n\nfor x in range(5):\n    board.append([\"O\"] * 5)\n\ndef print_board(board):\n\n    for row in board:\n        print \" \".join(row)\n\nprint \"\\nLet's play Battleship! You have 4 strikes to sink by ship.\\n\"\nprint_board(board)\n\ndef random_row(board):\n\n    return randint(0, len(board) - 1)\n\ndef random_col(board):\n\n    return randint(0, len(board) - 1)\n\nship_row = random_row(board)\nship_col = random_col(board)\n#ship_row = 1 to test and fix to (1,1)\n#ship_col = 1\n\nfor turn in range(5):\n    turn += 1\n    if turn == 5:\n        print \"\\nGame Over\"\n        print \"The ship was here => I\\n\"\n        board[ship_row - 1][ship_col - 1] = \"I\"\n        print_board(board)\n        break\n    else:\n        print \"\\nTurn\", turn\n\n        guess_row = int(raw_input(\"Guess Row (1 to 5): \"))\n        guess_col = int(raw_input(\"Guess Col (1 to 5): \"))\n\n        if (guess_row == ship_row) and (guess_col == ship_col):\n            print \"\\nCongratulations! You sank my battleship!\\n\"\n\n            guess_row = guess_row - 1\n            guess_col = guess_col - 1\n            board[guess_row][guess_col] = \"S\"\n\n            print_board(board)\n            print \"\\nGame Over\"\n            break\n\n        elif (guess_row < 1 or guess_row > 5) or (guess_col < 1 or guess_col > 5):\n            print \"\\nOops, that's not even in the ocean.\\n\"\n\n        elif board[guess_row - 1][guess_col - 1] == \"X\":\n            print \"\\nYou guessed that one already.\\n\"\n            print_board(board)\n\n        else:\n            print \"\\nYou missed my battleship!\\n\"\n            board[guess_row - 1][guess_col - 1] = \"X\"\n            print_board(board)  Let's play Battleship! You have 4 strikes to sink by ship.\n\nO O O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 1\nGuess Row (1 to 5): 1\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 2\nGuess Row (1 to 5): 2\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 3\nGuess Row (1 to 5): 3\nGuess Col (1 to 5): 5\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O O O O\nO O O O O\n\nTurn 4\nGuess Row (1 to 5): 4\nGuess Col (1 to 5): 3\n\nCongratulations! You sank my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O S O O\nO O O O O\n\nGame Over  Joining.  join, split  letters = ['a', 'b', 'c', 'd']\n\nprint \" \".join(letters) # a b c d\nprint \"---\".join(letters) # #---b---c---d  a b c d\na---b---c---d  Randomizing.  random, rand  from random import randint\n\ncoin = randint(0, 1) # randint(low, high)\ndice = randint(1, 6)",
            "title": "Battleship FINAL!"
        },
        {
            "location": "/Codecademy Python/#quiz-7",
            "text": "Takeaway.  my_list = [1, 3, 5, 7]\n\nmy_list.pop(3) # remove the 4th\nmy_list.remove(3) # remove the '3'\n\nrange(0, len(my_list)) # every list item\nrange(0, len(my_list), 2) # every other list item  [0]",
            "title": "Quiz 7"
        },
        {
            "location": "/Codecademy Python/#unit-8-loops",
            "text": "",
            "title": "UNIT 8, Loops"
        },
        {
            "location": "/Codecademy Python/#loops",
            "text": "A  while  loop is a sort of  if .  count = 0\n\nif count <= 9: # \n    print \"Hello, I am an if statement and count is\", count  Hello, I am an if statement and count is 0  while count <= 9: # similar to if: executes as long as the condition is true\n    print \"Hello, I am a while and count is\", count\n    count += 1  Hello, I am a while and count is 0\nHello, I am a while and count is 1\nHello, I am a while and count is 2\nHello, I am a while and count is 3\nHello, I am a while and count is 4\nHello, I am a while and count is 5\nHello, I am a while and count is 6\nHello, I am a while and count is 7\nHello, I am a while and count is 8\nHello, I am a while and count is 9  A  while  loop allows control (checkpoint, a switch, on and off).  loop_condition = True\n\nwhile loop_condition: # On\n    print \"I am a loop\"\n    loop_condition = False # Off  I am a loop  num = 1\n\nwhile num <= 10: # the condition\n    print num ** 2\n    num += num ** (1/2)\n    print num  1\n2\n4\n3\n9\n4\n16\n5\n25\n6\n36\n7\n49\n8\n64\n9\n81\n10\n100\n11  A common application of a  while  loop is to check user input to see if it is valid.  choice = raw_input('Enjoying the course? (y/n)')\n\nwhile choice != \"y\" and choice != \"n\":\n    choice = raw_input(\"Sorry, I didn't catch that. Enter again (case sensitive): \")  Enjoying the course? (y/n)y  break  means \u201cexit the current loop\u201d. Opposite to  break  is  continue .  count = 0\n\nwhile True:\n    print count\n    count += 1\n    if count >= 10:\n        break  0\n1\n2\n3\n4\n5\n6\n7\n8\n9  while / else  are like  if / else ;  else  is executed when  while  is false.  import random\n\nprint \"Lucky Numbers! 3 numbers will be generated.\"\nprint \"If one of them is a '5', you lose!\"\n\ncount = 0\n\nwhile count < 3:\n    num = random.randint(1, 6)\n    print num\n    if num == 5:\n        print \"Sorry, you lose!\"\n        break\n    count += 1\nelse:\n    print \"You win!\"  Lucky Numbers! 3 numbers will be generated.\nIf one of them is a '5', you lose!\n5\nSorry, you lose!  Guess game.  from random import randint\n\n# Generates a number from 1 through 10 inclusive\nrandom_number = randint(1, 10)\n\n# print random_number\nguesses_left = 3\nprint \"Guess right!\"\n\nwhile guesses_left > 0:\n    print \"You have \"+str(guesses_left)+\" attempts.\"\n    guess = raw_input(\"Guess a number from 1 to 10: \")\n    if int(guess) == random_number:\n        print \"You win!\"\n        break\n    elif guesses_left == 1:\n        print \"You lose.\"\n        break\n    else:\n        guesses_left -= 1\n        print \"Try again.\"  Guess right!\nYou have 3 attempts.\nGuess a number from 1 to 10: 2\nTry again.\nYou have 2 attempts.\nGuess a number from 1 to 10: 6\nTry again.\nYou have 1 attempts.\nGuess a number from 1 to 10: 9\nYou lose.  if  loop.  print \"Counting...\"\n\nfor i in range(20):\n    print i  Counting...\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19  Create a list.  hobbies = []\n\nprint hobbies\n\nfor i in range(3):\n    hobby = raw_input(\"Enter a hobby: \")\n    hobbies.append(hobby)\n\nprint hobbies  []\nEnter a hobby: fishing\nEnter a hobby: skiing\nEnter a hobby: knitting!!!\n['fishing', 'skiing', 'knitting!!!']  Run though a string, but each character will be spaced out.  thing = \"spam!\"\n\nfor c in thing:\n    print c\n\nword = \"eggs!\"\n\nfor char in word:\n    print char, # , print on the same line  s\np\na\nm\n!\ne g g s !  Replace a character in a string.  ,  print on the same line.  phrase = \"A bird in the hand...\"\n\nfor char in phrase:\n    if char == \"A\" or char == \"a\":\n        print \"X\",\n    else:\n        print char,  X   b i r d   i n   t h e   h X n d . . .  Run though a list.  numbers  = [7, 9, 12, 54, 99]\n\nprint \"This list contains: \"\n\nfor num in numbers:\n    print num\n\nfor numm in numbers:\n    print numm ** 2,  This list contains: \n7\n9\n12\n54\n99\n49 81 144 2916 9801  Run though a dictionary.  d = {'a' : 'apple', 'b' : 'berry', 'c' : 'cherry'}\n\nfor key in d:\n    # key:value\n    print key+\" \"+d[key]\n    print key # key\n    print d[key] # value  a apple\na\napple\nc cherry\nc\ncherry\nb berry\nb\nberry  Enumerate a list (numbers and members).  choices = ['pizza', 'pasta', 'salad', 'nachos']\n\nprint 'Your choices are:'\nfor index, item in enumerate(choices):\n    print index + 1, item  Your choices are:\n1 pizza\n2 pasta\n3 salad\n4 nachos  Multiple lists.  list_a = [3, 9, 17, 15, 19]\nlist_b = [2, 4, 8, 10, 30, 40, 50, 60, 70, 80, 90]\n\nfor a, b in zip(list_a, list_b):\n    if a > b: \n        print a\n    elif a == b:\n        print \"-\"\n    else:\n        print b  3\n9\n17\n15\n30  List with concatenation.  fruits = ['banana', 'apple', 'orange', 'tomata', 'pear', 'grape']\n\nprint 'You have...'\n\nfor f in fruits:\n    if f == 'tomato':\n        print 'A tomato is not a fruit!' # (It actually is.)\n        break\n    print ', a', f,\nelse:\n    print '; A fine selection of fruits!'  You have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!  Remove the  break .  fruits = ['banana', 'apple', 'orange', 'tomata', 'pear', 'grape']\n\nprint 'You have...'\n\nfor f in fruits:\n    if f == 'tomato':\n        print 'A tomato is not a fruit!' # (It actually is.)\n    else:    \n        print ', a', f,\nelse:\n    print '; A fine selection of fruits!'  You have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!",
            "title": "Loops"
        },
        {
            "location": "/Codecademy Python/#practice-makes-perfect",
            "text": "Is it even?  def is_even(x):\n\n    if x % 2 == 0:\n        return True # if x is even\n    else:\n        return False\n\nprint is_even(2)\nprint is_even(3)  True\nFalse  Or not?  n = -1.0\n\nprint(n - round(n,0))\n\ndef is_int(x):\n\n    if (x - round(x,0)) == 0:\n        return True\n    else:\n        return False\n\nprint is_int(7.0)\nprint is_int(7.5)\nprint is_int(-1)  0.0\nTrue\nFalse\nTrue  Summing the digits of a number.  def digit_sum(n):\n\n    liss = []\n    n = str(n) # from integers to characters\n    for char in n:\n        liss.append(char) # populate liss\n        total = 0\n        for i in range(len(liss)):\n            liss[i] = int(liss[i]) # back to integers\n            total += liss[i] # sum them up\n    return total\n\nprint digit_sum(1234)\nprint digit_sum(8888)  10\n32  What is the factorial?  def factorial(x):\n\n    if x == 1 or x == 0:\n        return 1\n    else:\n        result = 1\n        while x > 0:\n            # say x = 4\n            # 1 * 4 = 4\n            # 4 * 3 = 12\n            # 12 * 2 = 24\n            # 24 * 1 = 24\n            result *= x\n            x -= 1\n\n    return result \n\nprint factorial(1)\nprint factorial(2)\nprint factorial(3)\nprint factorial(4)\nprint factorial(5)  1\n2\n6\n24\n120  Is it a prime number? (Check the web for the list of prime numbers.)  def is_prime(x):\n\n    if (x > 1): # to catch greater than 1\n        for n in range(2,(x - 1)): # range 2 - 1 less than x\n            if x % n == 0:\n                print x\n                return False\n    else: # ro catch 0 and 1\n        print x\n        return False\n    print x # the input\n    return True # the output, will be printed when the function will be called\n\nfor ii in range(24):\n    print is_prime(ii),  0\nFalse 1\nFalse 2\nTrue 3\nTrue 4\nFalse 5\nTrue 6\nFalse 7\nTrue 8\nFalse 9\nFalse 10\nFalse 11\nTrue 12\nFalse 13\nTrue 14\nFalse 15\nFalse 16\nFalse 17\nTrue 18\nFalse 19\nTrue 20\nFalse 21\nFalse 22\nFalse 23\nTrue  Reverse a string.  def reverse(text):\n\n    count = len(text) - 1 # start at the end\n\n    print text\n    print count # 3 letters will be 0,1,2,3 or 3\n\n    reversed_text = \"\" # empty string\n\n    print reversed_text\n\n    while count >= 0:\n        reversed_text += text[count] # adding the right-most letter\n        count -= 1 # decrement count\n    return reversed_text\n\nprint reverse(\"make\")\nprint reverse(\"codeacademy\")  make\n3\n\nekam\ncodeacademy\n10\n\nymedacaedoc  Remove vowels in apunctuation word (could work for punctuation too).  def anti_vowel(text):\n\n    vowels = \"aAeEiIoOuU\"\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\"\")\n    return text\n\nprint anti_vowel(\"allo\")  ll  Remove all but punctuation.  def anti_vowel(text):\n\n    text = text.lower()\n    vowels = \"abcdefghijklmnopqrstuvwxyz1234567890$-\"\n\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\"\")\n    for char in text:\n        if char == \" \":\n            text = text.replace(char,\"\")\n    return text\n\nprint anti_vowel(\"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\\"ID\\\" associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\")  .?,,.,.......\"\"...  Scrabble scoring.  score = {\"a\": 1, \"c\": 3, \"b\": 3, \"e\": 1, \"d\": 2, \"g\": 2, \n         \"f\": 4, \"i\": 1, \"h\": 4, \"k\": 5, \"j\": 8, \"m\": 3, \n         \"l\": 1, \"o\": 1, \"n\": 1, \"q\": 10, \"p\": 3, \"s\": 1, \n         \"r\": 1, \"u\": 1, \"t\": 1, \"w\": 4, \"v\": 4, \"y\": 4, \n         \"x\": 8, \"z\": 10}\n\ndef scrabble_score(word):\n\n    word2 = word.lower()\n\n    print word2+\":\",\n    points = 0\n    for letter in word2:\n        if letter == str(letter):\n            points += score[letter]\n    return points\n\nprint scrabble_score(\"ab\")\nprint scrabble_score(\"allo\")\nprint scrabble_score(\"xylophone\")\nprint scrabble_score(\"coding\")\nprint scrabble_score(\"yak\")  ab: 4\nallo: 4\nxylophone: 24\ncoding: 10\nyak: 10  Censor a word in a string.  length  def censor(text,word_to_censor):\n\n    text = text.split(' ')\n    for word in range(0,len(text)):\n        if text[word] == word_to_censor:\n            text[word] = \"*\" * len(text[word]) * 2\n    return \" \".join(text) # join the w separated by spaces\n\nprint censor(\"it is two days\", \"two\")  it is ****** days  Count items is a list.  def count(sequence, item):\n\n    sequence = list(sequence)\n    count = 0\n\n    for i in sequence:\n        if i == item:\n            count += 1\n    return count\n\nlist2 = [1,3,1,5]\nlist3 = [\"a\",\"b\",\"c\",\"a\"]\nlist4 = (\"a\",\"b\",\"c\",\"a\")\nlist5 = (1,2,3,1,1)\n\nprint count(list2,1)\nprint count(list3,1)\nprint count(list4,1)\nprint count(list5,1)  2\n0\n0\n3  Extract even numbers from a list.  def purify(listing):\n\n    listing = list(listing)\n    listing2 = []\n\n    for l in listing:\n        if l % 2 == 0:\n            listing2.append(l)\n    return listing2\n\ncase1 = [1,2,3,4]\n\nprint purify(case1)  [2, 4]  Compute a product.  def product(listing):\n\n    print listing\n    result = 1\n    for l in listing:\n        result = result * l\n    return result\n\ncase1 = [1,2,3]\ncase2 = (5,10,15)\n\nprint product(case1)\nprint product(case2)  [1, 2, 3]\n6\n(5, 10, 15)\n750  Remove duplicates from a list.  def remove_duplicates(listing):\n\n    print listing\n\n    listing = list(listing)\n    listing2 = []\n\n    for l in listing:\n        if l not in listing2:\n            listing2.append(l)\n    return listing2\n\ncase1 = [1,2,3,3,4]\ncase2 = (1,6,1,4,2,8,2,1,6,7,4,6)\n\nprint remove_duplicates(case1)\nprint remove_duplicates(case2)  [1, 2, 3, 3, 4]\n[1, 2, 3, 4]\n(1, 6, 1, 4, 2, 8, 2, 1, 6, 7, 4, 6)\n[1, 6, 4, 2, 8, 7]  Extract the median from an unordered list of numbers.  def median(listing):\n\n    median_no = 0\n    median_low = 0\n    median_high = 0\n    low = 0\n    high = 0\n\n    print listing\n\n    listing = sorted(listing)\n\n    if len(listing) % 2 == 0:\n        low = len(listing)/2 - 1 # 6/2 = 3 -1 = 2 or the 3rd\n        high = len(listing)/2 # 6/2 = 3 or the 4th\n        median_low = float(listing[low]) # extract the 3rd of 6\n        median_high = float(listing[high]) # the 4th of 6\n        median_no = (median_low + median_high)/2\n    else:\n        median_no = listing[(len(listing))/2] # on 5, the / will yield 2.5, but coerced to the integer 2 or the 3rd\n    return median_no\n\ncase1 = (7,12,3,1,6)\ncase2 = (7,12,3,1,6,17)\n\nprint median(case1)\nprint median(case2)  (7, 12, 3, 1, 6)\n6\n(7, 12, 3, 1, 6, 17)\n6.5",
            "title": "Practice Makes Perfect"
        },
        {
            "location": "/Codecademy Python/#quiz-8",
            "text": "Takeaway: built-in functions.  x = [1, 2, 3]\ny = [4, 5, 6]\n\nzipped = zip(x, y)\n# zipped = [(1, 4), (2, 5), (3, 6)]\n\nx2, y2 = zip(*zipped)\n\nx == list(x2) and y == list(y2)\n# True  True  seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n\nlist(enumerate(seasons))\n# [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n\nlist(enumerate(seasons, start=1))\n# [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]  [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]",
            "title": "Quiz 8"
        },
        {
            "location": "/Codecademy Python/#project-command-line-calendar",
            "text": "In this project, we\u2019ll build a basic calendar that the user will be able to interact with from the command line. The user should be able to choose to:   View the calendar  Add an event to the calendar  Update an existing event  Delete an existing event   from time import sleep, strftime\n\nhis_name = raw_input(\"What is your first name? \")\nhis_name = str(his_name)\n# calendar will store the dates as keys and the events as values\n\ncalendar = {}\n\ndef welcome():\n\n    print(\"Welcome \" + his_name +\".\")\n\n    print(\"Calendar starting...\")\n    sleep(0.5)\n    print(\"Today is: \" + strftime(\"%A, %B %d, %Y\"))\n    print(\"It is currently: \" + strftime(\"%H:%M:%S\"))\n    sleep(0.5)\n\ndef start_calendar():\n\n    welcome()\n    print(\"What would you like to do?\")\n    print(calendar)\n    start = True\n\n    while start:\n        user_choice = raw_input(\"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \").upper()\n\n        if user_choice == 'V': # V\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty\")\n            else:\n                print(calendar)\n\n        elif user_choice == 'U': # U\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty\")\n            else:\n                print(calendar)\n                date = raw_input(\"What date? \")\n                update = raw_input(\"Enter the update: \")\n                # could be more control here...\n                calendar[date] = update # without checking if the date is valid or if it already exists (which could override things)!\n                print(\"Successful!\")\n                print(calendar)\n\n        elif user_choice == 'A': # A\n            event = raw_input(\"Enter event: \")\n            date = raw_input(\"Enter date (MM/DD/YYYY): \")\n            if (len(date) > 10 or int(date[6:]) < int(strftime(\"%Y\"))): # could be more control...\n                print(\"Invalid date format.\")\n                try_again = raw_input(\"Try Again? 'Y' for Yes, 'N' for No: \").upper()\n                if try_again == 'Y':\n                    continue #! break, continue, start is still True\n                else:\n                    start == False\n            else:\n                calendar[date] = event # without checking if the date is valid or if it already exists (which could override things)!\n                print(\"Successful!\")\n                print(calendar)\n\n        elif user_choice == 'D': # D\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty.\")\n            else:\n                print(calendar)\n                event = raw_input(\"What event? \") # could be more option like: What date?\n                for date in calendar.keys():\n                    if event == calendar[date]:\n                        del calendar[date] # del a[], [1], [\"a\"], [1:3], [5:], [:9], etc.\n                        print(\"Deleted.\")\n                        print(calendar)\n                    else:\n                        print(\"Incorrect.\")\n\n        elif user_choice == 'X': # X\n            start = False\n\n        else:\n            print(\"Invalid command.\")\n            break\n\nstart_calendar()  What is your first name? Al\nWelcome Al.\nCalendar starting...\nToday is: Thursday, October 20, 2016\nIt is currently: 13:42:02\nWhat would you like to do?\n{}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? a\nEnter event: Buy stuff\nEnter date (MM/DD/YYYY): 10/21/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Sell stuff\nEnter date (MM/DD/YYYY): 11/01/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Rent stuff\nEnter date (MM/DD/YYYY): 01/01/2018\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? u\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nWhat date? 01/01/2018\nEnter the update: Lease stuff\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? Buy stuff\nDeleted.\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? 10/21/2016\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? x",
            "title": "Project Command Line Calendar"
        },
        {
            "location": "/Codecademy Python/#unit-9-exam-statistics",
            "text": "",
            "title": "UNIT 9, Exam Statistics"
        },
        {
            "location": "/Codecademy Python/#exam-statistics",
            "text": "grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]\n\nprint \"Grades:\", grades\n\ndef print_grades(grades): # list the grades\n\n    for i in grades:\n        print i, # , keep the list on the same line\n\nprint_grades(grades)\n\nprint \"Let's compute some stats!\"\n\ndef grades_sum(scores): # sum up the grades\n\n    total = 0\n    for s in scores:\n        total += s\n    return total\n\nprint grades_sum(grades)\n\ndef grades_average(grades): # average the grades\n\n    sum_of_grades = grades_sum(grades)\n    average = sum_of_grades / float(len(grades))\n    return average\n\nprint grades_average(grades)\n\nprint \"Time to conquer the variance!\"\n\ndef grades_variance(scores): # compute the variance\n\n    average = grades_average(scores)\n    totalvariance = 0\n    for score in scores:\n        totalvariance += (score - average) ** 2\n    tvariance = totalvariance/float(len(scores))\n    return tvariance\n\nvariance = grades_variance(grades)\nprint variance\n\ndef grades_std_deviation(variance): # compute standard deviation\n\n    stddevisation = variance ** 0.5\n    return stddevisation\n\nprint grades_std_deviation(variance)  Grades: [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]\n100 100 90 40 80 100 85 70 90 65 90 85 50.5 Let's compute some stats!\n1045.5\n80.4230769231\nTime to conquer the variance!\n334.071005917\n18.2776094147",
            "title": "Exam Statistics"
        },
        {
            "location": "/Codecademy Python/#unit-10-advanced-topics-in-python",
            "text": "",
            "title": "UNIT 10, Advanced Topics in Python"
        },
        {
            "location": "/Codecademy Python/#advanced-topics-in-python",
            "text": "Iterate through a dictionary.  my_dict = {\n    \"CodeCademy\" : \"Python\",\n    \"DataCamp\" : \"R\",\n    \"Code School\" : \"SQL\"\n}\n\nprint my_dict.items()\nprint my_dict.keys()\nprint my_dict.values()\n\nfor key in my_dict:\n    print key, my_dict[key] # key and value  [('CodeCademy', 'Python'), ('Code School', 'SQL'), ('DataCamp', 'R')]\n['CodeCademy', 'Code School', 'DataCamp']\n['Python', 'SQL', 'R']\nCodeCademy Python\nCode School SQL\nDataCamp R  Build a list.  evens_to_50 = [i for i in range(51) if i % 2 == 0]\n\nprint evens_to_50  [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]  Build lists with conditions.  doubles_by_3 = [x * 2 for x in range(1,6) if (x * 2) % 3 == 0]\n\nprint doubles_by_3  [6]  even_squares = [x ** 2 for x in range(2,11) if (x ** 2) % 2 == 0]\n\nprint even_squares  [4, 16, 36, 64, 100]  cubes_by_four = [x ** 3 for x in range(1,11) if x ** 3 % 4 == 0]\n\nprint cubes_by_four  [8, 64, 216, 512, 1000]  Lists slicing.  extract, list  l = [i ** 2 for i in range(1, 11)] # Should be [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\nprint l[2:9:2] # [start:end:stride]  [9, 25, 49, 81]  my_list = range(1, 11) # list of numbers 1 - 10\n\nprint my_list[::2]  [1, 3, 5, 7, 9]  my_list = range(1, 11)\n\nbackwards = my_list[::-1]\n\nprint backwards  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]  to_one_hundred = range(101)\n\nbackwards_by_tens = to_one_hundred[::-10]\n\nprint backwards_by_tens  [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0]  to_21 = range(1, 22)\n\nprint to_21\n\nodds = range(1, 22, 2)\n\nprint odds\n\nmiddle_third = to_21[7:14:1]\n\nprint middle_third  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n[8, 9, 10, 11, 12, 13, 14]  Lambda function.  my_list = range(16)\n\nprint filter(lambda x: x % 3 == 0, my_list)  [0, 3, 6, 9, 12, 15]  languages = [\"HTML\", \"JavaScript\", \"Python\", \"Ruby\"]\n\nprint filter(lambda x: x == \"Python\",languages)  ['Python']  squares = [x**2 for x in range(1,11)]\n\nprint filter(lambda x: (x >= 30 and x <= 70), squares)  [36, 49, 64]  Iterating over dictionaries.  movies = {\n    \"Monty Python and the Holy Grail\": \"Great\",\n    \"Monty Python's Life of Brian\": \"Good\",\n    \"Monty Python's Meaning of Life\": \"Okay\"\n}\n\nprint movies.items()  [(\"Monty Python's Life of Brian\", 'Good'), (\"Monty Python's Meaning of Life\", 'Okay'), ('Monty Python and the Holy Grail', 'Great')]  Comprehensions.  threes_and_fives = [x for x in range(1,16) if (x % 3 == 0 or x % 5 == 0)]\n\nprint threes_and_fives  [3, 5, 6, 9, 10, 12, 15]  Slicing again.  extract  garbled = \"!XeXgXaXsXsXeXmX XtXeXrXcXeXsX XeXhXtX XmXaX XI\"\n\nmessage = garbled[::-2]\n\nprint message  I am the secret message!  garbled = \"IXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX\"\n\nmessage = filter(lambda x: x != \"X\", garbled)\n\nprint message  I am another secret message!",
            "title": "Advanced Topics in Python"
        },
        {
            "location": "/Codecademy Python/#introduction-to-bitwise-operators",
            "text": "Operators.  print 5 >> 4  # Right Shift\nprint 5 << 1  # Left Shift\nprint 8 & 5   # Bitwise AND\nprint 9 | 4   # Bitwise OR\nprint 12 ^ 42 # Bitwise XOR\nprint </sub>88     # Bitwise NOT  0\n10\n0\n13\n38\n-89  Base 2 or binary.  print 0b1,    # 1\nprint 0b10,   # 2\nprint 0b11,   # 3\nprint 0b100,  # 4\nprint 0b101,  # 5\nprint 0b110,  # 6\nprint 0b111   # 7\nprint \"******\"\nprint 0b1 + 0b11 # 1 + 3 = 4\nprint 0b11 * 0b11 # 3 * 3 = 90  1 2 3 4 5 6 7\n******\n4\n9  one = 0b1\ntwo = 0b10\nthree = 0b11\nfour = 0b100\nfive = 0b101\nsix = 0b110\nseven = 0b111\neight = 0b1000\nnine = 0b1001\nten = 0b1010\neleven = 0b1011\ntwelve = 0b1100  Decimal to binary.  print bin(1)\nprint bin(2)\nprint bin(3)\nprint bin(4)\nprint bin(5)  0b1\n0b10\n0b11\n0b100\n0b101  Binary to decimal.  print int(\"1\",2)\nprint int(\"10\",2)\nprint int(\"111\",2)\nprint int(\"0b100\",2)\nprint int(bin(5),2)  1\n2\n7\n4\n5  Print out the decimal equivalent of the binary 11001001.  print int(\"11001001\",2)  201  Left Bit Shift ( << )  0b000001 << 2 == 0b000100 (1 << 2 = 4)\n0b000101 << 3 == 0b101000 (5 << 3 = 40)         Right Bit Shift ( >> )  0b0010100 >> 3 == 0b000010 (20 >> 3 = 2)\n0b0000010 >> 2 == 0b000000 (2 >> 2 = 0)  This operation is mathematically equivalent to floor dividing and multiplying by 2 (respectively) for every time you shift, but it\u2019s often easier just to think of it as shifting all the 1s and 0s left or right by the specified number of slots.  shift_right = 0b1100\nshift_left = 0b1\n\nshift_right = 0b1100 >> 2\nshift_left = 0b1 << 2\nprint bin(shift_right)\nprint bin(shift_left)  0b11\n0b100  The bitwise AND ( & ) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if the corresponding bits of both numbers are 1. For example:      a:   00101010   42\n    b:   00001111   15       \n===================\na & b:   00001010   10  As you can see, the 2\u2019s bit and the 8\u2019s bit are the only bits that are on in both  a  and  b , so  a & b  only contains those bits. Note that using the & operator can only result in a number that is less than or equal to the smaller of the two values.   0 & 0 = 0  0 & 1 = 0  1 & 0 = 0  1 & 1 = 1   For example:  0b111 (7) & 0b1010 (10) = 0b10 .  print bin(0b1110&0b101)\n\nprint bin(0b100)  0b100\n0b100  The bitwise OR ( | ) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of either number are 1. For example:      a:  00101010  42\n    b:  00001111  15       \n================\na | b:  00101111  47  Note that the bitwise  |  operator can only create results that are greater than or equal to the larger of the two integer inputs.   0 | 0 = 0  0 | 1 = 1   1 | 0 = 1  1 | 1 = 1   For example:  110 (6) | 1010 (10) = 1110 (14) .  print bin(0b1110|0b101)  0b1111  The XOR ( ^ ) or exclusive or operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of the two numbers are 1, but not both.      a:  00101010   42\n    b:  00001111   15       \n================\na ^ b:  00100101   37  Keep in mind that if a bit is off in both numbers, it stays off in the result. Note that  XOR -ing a number with itself will always result in 0.   0 ^ 0 = 0  0 ^ 1 = 1  1 ^ 0 = 1  1 ^ 1 = 0   For example:  111 (7) ^ 1010 (10) = 1101 (13) .  print bin(0b1110^0b101)  0b1011  The bitwise NOT operator ( </sub> ) just flips all of the bits in a single number. What this actually means to the computer is actually very complicated, so we\u2019re not going to get into it. Just know that mathematically, this is equivalent to adding one to the number and then making it negative.   print </sub>1\nprint </sub>2\nprint </sub>3\nprint </sub>42\nprint </sub>123  -2\n-3\n-4\n-43\n-124  A bit mask is just a variable that aids you with bitwise operations. A bit mask can help you turn specific bits on, turn others off, or just collect data from an integer about which bits are on or off.  def check_bit4(input):\n\n    mask = 0b1000\n    desired = input & mask\n    if desired > 0:\n        return \"on\"\n    else:\n        return \"off\"\n\nprint check_bit4(0b1100)  on  0b1000\n0b1100\n======\n0b1000  You can also use masks to turn a bit in a number on using  | . Use a bitmask and the value a in order to achieve a result where the third bit from the right of a is turned on. Be sure to print your answer as a  bin()  string!  a = 0b10111011\nmask = 0b100\ndesired = a | mask\nprint bin(desired)  0b10111111  0b10111011\n0b00000100\n==========\n0b10111111  Using the XOR ( ^ ) operator is very useful for flipping bits. Using  ^  on a bit with the number one will return a result where that bit is flipped. In the editor is the 8 bit variable a. Use a bitmask and the value a in order to achieve a result where all of the bits in a are flipped. Be sure to print your answer as a  bin()  string!  a = 0b11101110\nmask = 0b11111111\ndesired = a ^ mask\nprint bin(desired)  0b10001  0b11101110\n0b11111111\n==========\n0b00010001  Finally, you can also use the left shift ( << ) and right shift ( >> ) operators to slide masks into place.  def flip_bit(number, n):\n\n    mask = (0b1 << (n-1))\n    result = number ^ mask\n    return bin(result)\n\nprint flip_bit(0b111, 2)  0b101",
            "title": "Introduction to Bitwise Operators"
        },
        {
            "location": "/Codecademy Python/#project-rgb-hex-converter",
            "text": "In this project, we\u2019ll use Bitwise operators to build a calculator that can convert RGB values to Hexadecimal ( hex ) values, and vice-versa.  def rgb_hex():\n\n    invalid_msg = \"Invalid entry\"\n    red = int(raw_input(\"Enter a 'red' (R) value, from 0 to 255: \"))\n    if red < 0 or red > 255:\n        print invalid_msg\n        return # return will exit the function, w/o return, the function jumps to the next line...\n\n    green = int(raw_input(\"Enter a 'green' (G) value, from 0 to 255: \"))\n    if green < 0 or green > 255:\n        print invalid_msg\n        return\n\n    blue = int(raw_input(\"Enter a 'blue' (B) value, from 0 to 255: \"))\n    if blue < 0 or blue > 255:\n        print invalid_msg\n        return\n\n    val = red << 16 + green << 8 + blue\n    # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character.\n    # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\n    # Become familiar with bits by reading more here.\n    print \"%s\" %(hex(val)[2:].upper()) # string formatting\n\ndef hex_rgb():\n\n    invalid_msg = \"Invalid entry\"\n    hex_val = raw_input(\"Enter a color (six hexadecimal digits): \")\n    if len(hex_val) != 6:\n        print \"Invalid Entry\"\n    else:\n        hex_val = int(hex_val, 16)\n    two_hex_digits = 2 ** 8\n    blue = hex_val % two_hex_digits\n    hex_val = hex_val >> 8\n    green = hex_val % two_hex_digits\n    hex_val = hex_val >> 8\n    red = hex_val % two_hex_digits\n    print \"Red: %s Green: %s Blue: %s\" %(red, green,blue)\n\ndef convert():\n\n    while True:\n        option = str(raw_input(\"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \"))\n        if option == '1':\n            print \"RGB to Hex...\"\n            rgb_hex()\n        elif option == '2':\n            print \"Hex to RGB...\"\n            hex_rgb()\n        elif option == 'X' or option == 'x':\n            break\n        else:\n            print \"Error\"\n\nconvert()  Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. 1\nRGB to Hex...\nEnter a 'red' (R) value, from 0 to 255: 10\nEnter a 'green' (G) value, from 0 to 255: 10\nEnter a 'blue' (B) value, from 0 to 255: 20\n280000000000000L\nEnter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. x",
            "title": "Project RGB-HEX Converter"
        },
        {
            "location": "/Codecademy Python/#unit-11-introduction-to-classes",
            "text": "",
            "title": "UNIT 11, Introduction to Classes"
        },
        {
            "location": "/Codecademy Python/#introduction-to-classes",
            "text": "You can think of an object as a single data structure that contains data as well as functions; functions of objects are called methods.  Class Fruit ,  lemon instance .  class Fruit(object):\n\n\n    def __init__(self, name, color, flavor, poisonous):\n\n        self.name = name\n        self.color = color\n        self.flavor = flavor\n        self.poisonous = poisonous\n\n    def description(self):\n\n        print \"I'm a %s %s and I taste %s.\" % (self.color, self.name, self.flavor)\n\n    def is_edible(self):\n\n        if not self.poisonous:\n            print \"Yep! I'm edible.\"\n        else:\n            print \"Don't eat me! I am super poisonous.\"\n\n\nlemon = Fruit(\"lemon\", \"yellow\", \"sour\", False)\n\nlemon.description()\n\nlemon.is_edible()  I'm a yellow lemon and I taste sour.\nYep! I'm edible.  The class keyword, the name of the class, and the class from which the new class inherits in parentheses. By convention, user-defined Python class names start with a capital letter.  class Animal(object):\n\n\n    pass  __init__():  this function is required for classes, and it\u2019s used to initialize the objects it creates.  __init__()  always takes at least one argument, self, that refers to the object being created. You can think of  __init__()  as the function that \u201cboots up\u201d each object the class creates. Python will use the first parameter that  __init__()  receives to refer to the object being created; this is why it\u2019s often called self, since this parameter gives the object being created its identity.  class Animal(object):\n\n\n    def __init__(self, name):\n\n        self.name = name  Start creating objects. We can access attributes of our objects using dot notation.  class Animal(object):\n\n\n    def __init__(self, name):\n\n        self.name = name\n\n\nzebra = Animal(\"Jeffrey\") # instance of Animal\n\nprint zebra.name # instance with attributes  Jeffrey  More\u2026  Class Animal(object):\n\n\n    def __init__(self, name, age, is_hungry):\n\n        self.name = name\n        self.age = age\n        self.is_hungry = is_hungry\n\n\nzebra = Animal(\"Jeffrey\", 2, True)\ngiraffe = Animal(\"Bruce\", 1, False)\npanda = Animal(\"Chad\", 7, True)\n\nprint zebra.name, zebra.age, zebra.is_hungry\nprint giraffe.name, giraffe.age, giraffe.is_hungry\nprint panda.name, panda.age, panda.is_hungry    File \"<ipython-input-55-08cd00c1ed56>\", line 1\n    Class Animal(object):\n               ^\nSyntaxError: invalid syntax  Another important aspect of Python classes is scope. The scope of a variable is the context in which it\u2019s visible to the program.  It may surprise you to learn that not all variables are accessible to all parts of a Python program at all times. When dealing with classes, you can have variables that are available everywhere (global variables), variables that are only available to members of a certain class (member variables), and variables that are only available to particular instances of a class (instance variables).  Global variable, (class) member variable, class variable, instance variable  The same goes for functions: some are available everywhere, some are only available to members of a certain class, and still others are only available to particular instance objects.  Global function, class function, instance function  They all have access to the member variable is_alive, since they\u2019re all members of the Animal class.  class Animal(object):\n\n\n    \"\"\"Makes cute animals.\"\"\"\n\n    is_alive = True\n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n\nzebra = Animal(\"Jeffrey\", 2)\ngiraffe = Animal(\"Bruce\", 1)\npanda = Animal(\"Chad\", 7)\n\nprint zebra.name, zebra.age, zebra.is_alive\nprint giraffe.name, giraffe.age, giraffe.is_alive\nprint panda.name, panda.age, panda.is_alive  Jeffrey 2 True\nBruce 1 True\nChad 7 True  When a class has its own functions, those functions are called methods.  class Animal(object):\n\n\n    \"\"\"Makes cute animals.\"\"\"\n\n    is_alive = True\n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n    def description(self):\n\n        print self.name\n        print self.age\n\n\nhippo = Animal(\"Yan\", 10)\n\nhippo.description() # will call the class function and print  Yan\n10  A class can have any number of member variables.  class Animal(object):\n\n\n    \"\"\"Makes cute animals.\"\"\"\n\n    is_alive = True\n    health = \"good\"\n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n    def description(self):\n\n        print self.name\n        print self.age\n\n\nhippo = Animal(\"Yan\", 10)\nsloth = Animal(\"George\", 1)\nocelot = Animal(\"Holly\", 2)\n\nprint hippo.health # will call the class variable\nprint sloth.health\nprint ocelot.health  good\ngood\ngood  Kind of classes and objects you might find in commercial software: here we have a basic  ShoppingCart  class for creating shopping cart objects for website customers; though basic, it\u2019s similar to what you\u2019d see in a real program.  class ShoppingCart(object):\n\n\n    items_in_cart = {} # try it with an empty or not dictionary\n    items_in_cart = {\"cereal\":1}\n\n    def __init__(self, customer_name):\n\n        self.customer_name = customer_name\n\n    def add_item(self, product, price):\n\n        \"\"\"Add product to the cart.\"\"\"\n\n        if not product in self.items_in_cart: # check the dictionary\n            self.items_in_cart[product] = price\n            print product + \" added.\"\n        else:\n            print product + \" is already in the cart.\"\n\n    def remove_item(self, product):\n\n        \"\"\"Remove product from the cart.\"\"\"\n\n        if product in self.items_in_cart: # check the dictionary\n            del self.items_in_cart[product]\n            print product + \" removed.\"\n        else:\n            print product + \" is not in the cart.\"\n\n\nmy_cart = ShoppingCart(\"Jean\") # instance\nmy_cart.add_item(\"cereal\",1) # class function  cereal is already in the cart.  Inheritance is a tricky concept, so let\u2019s go through it step by step. Inheritance is the process by which one class takes on the attributes and methods of another, and it\u2019s used to express an is-a relationship. For example, a Panda is a bear, so a Panda class could inherit from a Bear class.  class Customer(object):\n\n\n    \"\"\"Produces objects that represent customers.\"\"\"\n\n    def __init__(self, customer_id):\n\n        self.customer_id = customer_id\n\n    def display_cart(self):\n\n        print \"I'm a string that stands in for the contents of your shopping cart!\"\n\n\nclass ReturningCustomer(Customer):\n\n\n    \"\"\"For customers of the repeat variety.\"\"\"\n\n    def display_order_history(self):\n\n        print \"I'm a string that stands in for your order history!\"\n\n\nmonty_python = ReturningCustomer(\"ID: 12345\") # class instance\nmonty_python.display_cart() # inherited from the 1st class\nmonty_python.display_order_history() # from the current class  I'm a string that stands in for the contents of your shopping cart!\nI'm a string that stands in for your order history!  COMPLETE EXAMPLE.  class Shape(object):\n\n\n    \"\"\"make shapes\"\"\"\n\n    number_of_sides = 5\n\n    def __init__(self, number_of_sides):\n\n        self.number_of_sides = number_of_sides\n\n\nmy_shape = Shape(4) # instance\n\n\nclass Triangle(Shape):\n\n\n    number_of_3sides = 3\n    # number_of_sides = 3 # would override the above\n\n\n    def __init__(self, angle1, angle2, angle3):\n\n        self.angle1 = angle1\n        self.angle2 = angle2\n        self.angle3 = angle3\n\n    def check_angles(self):\n\n        if self.angle1 + self.angle2 + self.angle3 == 180:\n            return True\n        else:\n            return False\n\n\nmy_triangle = Triangle(90, 30, 60) # instance\n\nprint my_triangle.number_of_sides # inherit\nprint my_shape.number_of_sides\n\nprint my_triangle.number_of_3sides\nprint my_triangle.check_angles()\n\n\nclass Equilateral(Triangle):\n\n\n    angle = 60\n\n    def __init__(self):\n\n        self.angle1 = self.angle # override the above\n        self.angle2 = self.angle\n        self.angle3 = self.angle\n\n\nmy_equilateral = Equilateral() # instance\n\nprint my_equilateral.angle\nprint my_equilateral.angle1 # based on variable angle\n\nprint my_equilateral.number_of_sides # inherit\nprint my_equilateral.number_of_3sides # inherit\n\nprint my_equilateral.check_angles() # inherit; method way\nprint Equilateral.check_angles(my_equilateral) # function way; IDEM !!!  5\n4\n3\nTrue\n60\n60\n5\n3\nTrue\nTrue  Sometimes you\u2019ll want one class that inherits from another to not only take on the methods and attributes of its parent, but to override one or more of them.  class Employee(object):\n\n\n    \"\"\"Models real-life employees!\"\"\"\n\n    def __init__(self, employee_name):\n\n        self.employee_name = employee_name\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 20.00\n\n\nclass PartTimeEmployee(Employee):\n\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 12.00 # override what is naturally inherited  class Employee(object):\n\n\n    def __init__(self, name):\n\n        self.name = name\n\n    def greet(self, other):\n\n        print \"Hello, %s\" % other.name\n\n\nclass CEO(Employee):\n\n    def greet(self, other):\n\n        print \"Get back to work, %s!\" % other.name # override\n\n\nceo = CEO(\"Emily\")\nemp = Employee(\"Steve\")\n\nemp.greet(ceo)\nceo.greet(emp)  Hello, Emily\nGet back to work, Steve!  On the flip side, sometimes you\u2019ll be working with a derived class (or subclass) and realize that you\u2019ve overwritten a method or attribute defined in that class\u2019 base class (also called a parent or superclass) that you actually need. Have no fear! You can directly access the attributes or methods of a superclass with Python\u2019s built-in super call.  class Employee(object):\n\n\n    \"\"\"Models real-life employees!\"\"\"\n\n    def __init__(self, employee_name):\n\n        self.employee_name = employee_name\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 20.00\n\n\nclass PartTimeEmployee(Employee):\n\n\n    def calculate_wage(self, hours): # override\n\n        self.hours = hours\n        return hours * 12.00\n\n    def full_time_wage(self, hours): # super call: associate the parent's class function with child's new function withtout retyping the function\n\n        return super(PartTimeEmployee, self).calculate_wage(hours)\n\n\nmilton = PartTimeEmployee(\"Jack\")\n\nprint milton.full_time_wage(10)  200.0",
            "title": "Introduction to Classes"
        },
        {
            "location": "/Codecademy Python/#more-on-classes",
            "text": "class Car(object): # create a class\n\n\n    pass\n\n\nmy_car = Car() # create a class instance  class Car(object):\n\n\n    condition = \"new\" # create a member variables\n\n\nmy_car = Car()\n\nprint my_car.condition # call the member variable  new  class Car(object):\n\n\n    condition = \"new\"\n\n    def __init__(self, model, color, mpg): # initialize or boot up!\n\n        self.model = model # assign class variables\n        self.color = color\n        self.mpg = mpg\n\n\nmy_car = Car(\"DeLorean\", \"silver\", 88) # create an instance with its class variables\n\nprint my_car.condition\n\nprint my_car.model # call the class variables...\nprint my_car.color\nprint my_car.mpg  new\nDeLorean\nsilver\n88  class Car(object):\n\n\n    condition = \"new\"\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \"This is a %s %s with %s MPG.\" % (self.color, self.model, str(self.mpg)) # create a class method (function)\n\n\nmy_car = Car(\"DeLorean\", \"silver\", 88)\n\nprint my_car.condition\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car() # call the class method  new\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.  class Car(object):\n\n\n    condition = \"new\"\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \"This is a %s %s with %s MPG.\" % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition = \"used\"\n\n\nmy_car = Car(\"DeLorean\", \"silver\", 88)\n\nprint my_car.condition # 'new'\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car()\nprint my_car.condition # the condition changes to 'used'  new\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused  class Car(object):\n\n\n    condition = \"new\"\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \"This is a %s %s with %s MPG.\" % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition = \"used\"\n\n\nmy_car = Car(\"DeLorean\", \"silver\", 88)\n\nprint my_car.condition\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car()\nprint my_car.condition\n\n\nclass ElectricCar(Car):\n\n\n    def __init__(self, model, color, mpg, battery_type): # initialize with some partial inheritance from class Car\n\n        Car.__init__(self, model, color, mpg) # assign class variable by inheritance from class Car\n        self.battery_type = battery_type # assign a new class variable\n\n\nmy_car = ElectricCar(\"Telsa\", \"red\", 0, \"molten salt\") # create an instance with its class variables; OVERRIDE the above\n\nprint my_car.condition # call the class variables; OVERRIDE the above\n\nprint my_car.model # call the member variable; OVERRIDE the above\nprint my_car.color\nprint my_car.mpg\n\nmy_ride = ElectricCar(\"Google\", \"blue\", 10, \"electrical\") # create an instance with its class variables\n\nprint my_ride.condition # call the class variables\n\nprint my_ride.model # call the member variable\nprint my_ride.color\nprint my_ride.mpg  new\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused\nnew\nTelsa\nred\n0\nnew\nGoogle\nblue\n10  class Car(object):\n\n\n    condition = \"new\"\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \"This is a %s %s with %s MPG.\" % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition = \"used\"\n\n\nmy_car = Car(\"DeLorean\", \"silver\", 88)\n\nprint my_car.condition + \"!\" # call the member variable; 'new'\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car() # call the class method\nprint my_car.condition + \"!!\" # member variable; now 'used'\n\nclass ElectricCar(Car):\n\n\n    def __init__(self, model, color, mpg, battery_type):\n\n        Car.__init__(self, model, color, mpg)\n        self.battery_type = battery_type\n\n    def drive_car(self): # create a class method; OVERRIDE the above\n\n        self.condition = \"like new\"\n\n\nmy_car = ElectricCar(\"Telsa\", \"red\", 0, \"molten salt\")\n\nprint my_car.condition + \"!\" # 'new' again\nmy_car.drive_car() # call the class method\nprint my_car.condition + \"!!\" # 'like new' now\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nmy_ride = ElectricCar(\"Google\", \"blue\", 10, \"electrical\")\n\nprint my_ride.condition + \"!\" # 'used' again\nmy_ride.drive_car()# call the class method\nprint my_ride.condition + \"!!\" # 'like new' now\n\nprint my_ride.model\nprint my_ride.color\nprint my_ride.mpg  new!\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused!!\nnew!\nlike new!!\nTelsa\nred\n0\nnew!\nlike new!!\nGoogle\nblue\n10  class Point3D(object):\n\n\n    def __init__(self, x, y, z): # initialize\n\n        self.x = x\n        self.y = y\n        self.z = z\n\n# __repr__() method, which is short for representation; by providing a return value in this method, we can tell Python how to represent an object of our class (for instance, when using a print statement).\n\n    def __repr__(self):\n\n        return \"(%d, %d, %d)\" % (self.x, self.y, self.z)\n\n\nmy_point = Point3D(1,2,3) # instance\n\n# Print my_point.__repr__() w/o adding variables\n\nprint my_point  (1, 2, 3)",
            "title": "More on Classes"
        },
        {
            "location": "/Codecademy Python/#quiz-11",
            "text": "Python writes data to a file when you close the file!",
            "title": "Quiz 11"
        },
        {
            "location": "/Codecademy Python/#project-bank-account",
            "text": "In this project, we\u2019ll create a Python class that can be used to create and manipulate a personal bank account.  class BankAccount(object):\n\n\n    balance = 0\n\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n\n    # The __repr__() method defines what represents the object when a user tries to print the BnkAccount object using print. Let's add to this method and make it descriptive.\n\n        return \"%s's account; Balance: $%.2f\" % (self.name, self.balance) # $%.2f for 2 decimals, self.class attribute, self.member variable\n\n    def show_balance(self):\n\n        print \"Balance: $%.2f\\n\" % (self.balance)\n\n    def deposit(self, amount):\n\n        if amount <= 0:\n            print \"No Account. Invalid\\n\"\n            return # # return will exit the function, w/o return, the function jumps to the next line...\n        else:\n            print \"Depositing: $%.2f\" % (amount) # ?\n            self.balance += amount\n            self.show_balance() # calling a class function\n\n    def withdraw(self, amount):\n\n        if amount > self.balance:\n            print \"More than the balance. Invalid\\n\"\n            return\n        else:\n            print \"Withdrawing: $%.2f\" % (amount) # ?\n            self.balance -= amount\n            self.show_balance()\n\n\nmy_account = BankAccount(\"Ugo\") # Ugo is the argument 'name'\n\nprint my_account # launch the __repr__\nmy_account.show_balance() # launch the class function (method) show_balance\n\nmy_account.deposit(2000)\nmy_account.withdraw(3000)\nmy_account.withdraw(1000)\n\nprint my_account  Ugo's account; Balance: $0.00\nBalance: $0.00\n\nDepositing: $2000.00\nBalance: $2000.00\n\nMore than the balance. Invalid\n\nWithdrawing: $1000.00\nBalance: $1000.00\n\nUgo's account; Balance: $1000.00",
            "title": "Project Bank Account"
        },
        {
            "location": "/Codecademy Python/#unit-12-file-input-and-output",
            "text": "",
            "title": "UNIT 12, File Input and Output"
        },
        {
            "location": "/Codecademy Python/#file-inputoutput",
            "text": "Read information from a file on your computer, and/or write that information to another file? This process is called file I/O.  my_list = [i ** 2 for i in range(1,11)]\n\nf = open(\"output.txt\", \"w\") # create a file\n\nfor item in my_list:\n    f.write(str(item) + \"\\n\") # write\n\nf.close() # save, close  First.  f = open(\"output.txt\", \"w\") # This told Python to open output.txt in \"w\" mode (\"w\" stands for \"write\").  Read and write.  my_list = [i ** 2 for i in range(1,11)]\n\nmy_file = open(\"output.txt\", \"r+\") # the file must exist\n\nfor item in my_list:\n    my_file.write(str(item) + \"\\n\") # overwrite\n\nmy_file.close() # save, close  Read on the console.  my_file = open(\"output.txt\", \"r\") # the file must exist\nprint my_file.read()\n\nmy_file.close()  1\n4\n9\n16\n25\n36\n49\n64\n81\n100  Read lines on the console.  my_file = open(\"output.txt\", \"r\") # the file must exist\n\nprint my_file.readline() # read line 1\nprint my_file.readline() # read line 2 automatically\nprint my_file.readline() # read line 3\n\nmy_file.close()  1\n\n4\n\n9  Open the file for reading.  read_file = open(\"output.txt\", \"r\")\nprint read_file.read()\nread_file.close()  1\n4\n9\n16\n25\n36\n49\n64\n81\n100  Use a second file handler to open the file for writing.  write_file = open(\"text.txt\", \"w\")\n\n# Write to the file\nwrite_file.write(\"Not closing files is VERY BAD.\")\n\n# Try to read from the file\nprint write_file.read() # Not working...``\n\nwrite_file.close()  ---------------------------------------------------------------------------\n\nIOError                                   Traceback (most recent call last)\n\n<ipython-input-87-db256164394e> in <module>()\n      5 \n      6 # Try to read from the file\n----> 7 print write_file.read() # Not working...``\n      8 \n      9 write_file.close()\n\n\nIOError: File not open for reading  Try.  read_file = open(\"text.txt\", \"r\")\nprint read_file.read()\n\nwrite_file = open(\"text.txt\", \"w\")\nwrite_file.write(\"Not closing files is VERY BAD.\")\n\nwrite_file.close() # close it!\n\nwrite_file = open(\"text.txt\", \"r\") # reopen it in read mode\nprint write_file.read() # working\nwrite_file.close()  Not closing files is VERY BAD.\nNot closing files is VERY BAD.  And.  write_file = open(\"text.txt\", \"w\")\nwrite_file.write(\"Not closing files is VERY BAD.\") # could be a variable\nwrite_file.close()  read_file = open(\"text.txt\", \"r\")\nprint read_file.read()\nread_file.close()  Not closing files is VERY BAD.  write_file = open(\"text.txt\", \"w\")\nwrite_file.truncate() # delete\nwrite_file.close()  read_file = open(\"text.txt\", \"r\")\nprint read_file.read()\nread_file.close()  You may not know this, but file objects contain a special pair of built-in methods:  __enter__()  and  __exit__() . The details aren\u2019t important, but what is important is that when a file object\u2019s  __exit__()  method is invoked, it automatically closes the file. How do we invoke this method? With with and as.  with open(\"text.txt\", \"w\") as textfile: # a variable\n    textfile.write(\"Success!\")\n    textfile.close()  with open(\"text.txt\", \"r\") as textfile:\n    print textfile.read()\n    textfile.close()  Success!",
            "title": "File Input/Output"
        },
        {
            "location": "/Codecademy Python/#more-io",
            "text": "with open(\"text.txt\", \"w\") as my_file:\n    my_file.write(\"Youpee!!!\")\n\nprint my_file.closed # true\n\nif not my_file.closed == True:\n    my_file.close()\n\nprint my_file.closed # true\n\nwith open(\"text.txt\", \"r\") as my_file:\n    print my_file.read()\n\nprint my_file.closed # true\n\nwith open(\"text.txt\", \"r\") as my_file:\n    print my_file.closed # false\n\nmy_file.close()\n\nprint my_file.closed # true  True\nTrue\nYoupee!!!\nTrue\nFalse\nTrue",
            "title": "More I/O"
        },
        {
            "location": "/Codecademy Python/#quiz-12",
            "text": "OK",
            "title": "Quiz 12"
        },
        {
            "location": "/Codecademy Python/#project-dna-analysis",
            "text": "In this project, we\u2019ll use many of the concepts you\u2019ve learned throughout the Python course in order to do some DNA analysis for a crime investigation.  The scenario:  A spy deleted important files from a computer. There were a few witnesses at the scene of the crime, but no one is sure who exactly the spy was. Three possible suspects were apprehended based on surveillance video. Each suspect had a sample of DNA taken from them. The computer\u2019s keyboard was also swabbed for DNA evidence and, luckily, one small DNA sample was successfully retrieved from the computer\u2019s keyboard.  Given the three suspects\u2019 DNA and the sample DNA retreived from the keyboard, it\u2019s up to you to figure out who the spy is!  The project should have methods for each of the following:   Given a file, read in the DNA for each suspect and save it as a string  Take a DNA string and split it into a list of codons  Iterate through a suspect\u2019s codon list to see how many of their codons match the sample codons  Pick the right suspect to continue the investigation on   sample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n\n    dna_data = \"\" # empty string\n\n    with open(dna_file, \"r\") as f: # f = open(dna_file, \"r\"); with, as\n        for line in f:\n            dna_data += line\n        return dna_data\n\ndef dna_codons(dna):\n\n    codons = []\n    for i in range(0,len(dna),3): # slice strings of 3 letters\n        if i+3 < len(dna): # make sure that you don't add a string to the codon list that isn't at least 3 letters long\n            codons.append(dna[i:i+3]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3\n    return codons\n\ndef match_dna(dna):\n\n    matches = 0\n    for codon in dna:\n        if codon in sample: # if ,in\n            matches += 1\n    return matches\n\ndef is_criminal(dna_sample):\n\n    dna_data = read_dna(dna_sample)\n    codons = dna_codons(dna_data)\n    num_matches = match_dna(codons)\n    if num_matches >= 3:\n        print((dna_sample)[:-4]).upper(),\n        print(\": number of matches = \" + str(num_matches) + \"; the investigation will proceed further more with this suspect.\")\n    else:\n        print((dna_sample)[:-4]).upper(),\n        print(\": no evidence; the suspect can be freed.\")\n\na = \"suspect1.txt\"\nis_criminal(a)\n\na = \"suspect2.txt\"\nis_criminal(a)\n\na = \"suspect3.txt\"\nis_criminal(a)  SUSPECT1 : no evidence; the suspect can be freed.\nSUSPECT2 : number of matches = 6; the investigation will proceed further more with this suspect.\nSUSPECT3 : no evidence; the suspect can be freed.  suspect1.txt  ATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT  suspect2.txt  CCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG  suspect3.txt  TCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA",
            "title": "Project DNA Analysis"
        },
        {
            "location": "/Learn Python the Hard Way/",
            "text": "CONTENT\n\n\nExercise 1, A Good First Program\n\n\nShorcuts, Good to Know\n\n\n\n\n\n\nExercise 3, Numbers and Math\n\n\nExercise 4, Variables and Names\n\n\nExercise 5, More Variables and Printing\n\n\nExercise 6, Strings and Text\n\n\nExercise 15, Reading Files\n\n\nExercise 16, Reading and Writing Files\n\n\nExercise 17, More Files\n\n\nExercise 18, Names, Variables, Code, Functions\n\n\nExercise 19, Functions and Variables\n\n\nExercise 20, Functions and Files\n\n\nExercise 21, Functions Can Return Something or not\u2026\n\n\nExercise 23, Read Some Code\n\n\nExercise 24, More Practice\n\n\nExercise 25, Even More Practice\n\n\nExercise 32, Loops and Lists\n\n\nExercise 33, While Loops\n\n\nExercise 34, Accessing Elements of Lists\n\n\nExercise 38, Doing Things to Lists\n\n\nExercise 39, Dictionaries, Oh Lovely Dictionaries\n\n\nExercise 40, Modules, Classes, and Objects\n\n\nExercise 41, Learning to Speak Object-Oriented\n\n\nExercise 42, Is-A, Has-A, Objects, and Classes\n\n\nExercise 43, Gothons from Planet Percal #25\n\n\nWrap up\n\n\n\n\n\n\nExercise 44, Inheritance vs Composition\n\n\nWhen to Use Inheritance or Composition\n\n\nFunction Style\n\n\nComposition\n\n\nImplicit Inheritance\n\n\nInherit from both Classes\n\n\nOverride Explicitly\n\n\nAlter Before or After\n\n\nSuper\n\n\nAll Three Combined\n\n\n\n\n\n\nExercise 45, You Make a Game\n\n\nExercise 46, A Project Skeleton\n\n\nExercise 47, Automated Testing\n\n\nMiscellaneous notes\n\n\n\n\n\n\nExercise 50, Your First Website\n\n\nAn overview\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes, code snippets, and excerpts from the course. Python 2. From the book and website:\n\n\n\n\nLPTHW\n\n\n\n\n\n\nExercise 1, A Good First Program\n\u00b6\n\n\n shebang, begin, script\n\n\n\n\nThis is a shebang (language): \n# -*- coding: utf-8 -*-\n.\n\n\n#\n is an octothorpe or pound or hash or mesh.\n\n\nAdd a second line (Python version): \n#! /usr/bin/env python 2\n.\n\n\n\n\n# -*- coding: utf-8 -*-\n#! /usr/bin/env python 2\n\nprint \"Hello World!\"\nprint \"Hello Again\"\nprint \"I like typing this.\"\nprint \"This is fun.\"\nprint 'Yay! Printing.'\nprint \"I'd much rather you 'not'\"\nprint 'I said do not touch this.'\nprint \"testing2\"\n\n\n\n\nHello World!\nHello Again\nI like typing this.\nThis is fun.\nYay! Printing.\nI'd much rather you 'not'\nI said do not touch this.\ntesting2\n\n\n\nShorcuts, Good to Know\n\u00b6\n\n\n\n\nIn the terminal, type \npydoc <python item>\n to invoke the documentation on a python item (built-in functions, methods, objects, etc.).\n\n\nctrl+c\n and/or \nctrl+d\n break a loop.\n\n\n\n\nExercise 3, Numbers and Math\n\u00b6\n\n\n print, format, calculate\n\n\nprint \"I will now count my chickens:\"\n\n\n\n\nI will now count my chickens:\n\n\n\nprint \"Hens\", 25 + 30 / 6\nprint \"Roosters\", 100 - 25 * 3 % 4\n\nprint \"Now I will count the eggs:\"\n\nprint 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6\n# copy 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 straight into the shell and run it\n# you will get the result only (don't add print before the statement)\n\n\n\n\nHens 30\nRoosters 97\nNow I will count the eggs:\n7\n\n\n\nprint \"Is it true that 3 + 2 < 5 - 7\"\nprint 3 + 2 < 5 - 7\n\n\n\n\nIs it true that 3 + 2 < 5 - 7\nFalse\n\n\n\nprint \"What is 3 + 2?\", 3 + 2\nprint \"What is 5 - 7?\", 5 - 7\n\n\n\n\nWhat is 3 + 2? 5\nWhat is 5 - 7? -2\n\n\n\nprint \"Oh, that's why it's False.\"\nprint \"How about some more.\"\n\n\n\n\nOh, that's why it's False.\nHow about some more.\n\n\n\nprint \"Is it greater?\", 5 > -2\nprint \"Is it greater or equal?\", 5 >= -2\nprint \"Is it less or equal?\", 5 <= -2\n\n\n\n\nIs it greater? True\nIs it greater or equal? True\nIs it less or equal? False\n\n\n\nprint (1 + 1) # integer\n\n\n\n\n2\n\n\n\nprint (1.0 + 1) # float\n\n\n\n\n2.0\n\n\n\nExercise 4, Variables and Names\n\u00b6\n\n\ncars = 100\nspace_in_a_car = 4.0 # float\ndrivers = 30\npassengers = 90\ncars_not_driven = cars - drivers\ncars_driven = drivers\ncarpool_capacity = cars_driven * space_in_a_car\naverage_passengers_per_car = passengers / cars_driven\n\nprint \"There are\", cars, \"cars available.\"\nprint \"There are only\", drivers, \"drivers available.\"\nprint \"There will be\", cars_not_driven, \"empty cars today.\"\nprint \"We can transport\", carpool_capacity, \"people today.\"\nprint \"We have\", passengers, \"to carpool today.\"\nprint \"We need to put about\", average_passengers_per_car, \"in each cars.\"\n\n\n\n\nThere are 100 cars available.\nThere are only 30 drivers available.\nThere will be 70 empty cars today.\nWe can transport 120.0 people today.\nWe have 90 to carpool today.\nWe need to put about 3 in each cars.\n\n\n\n\n\nA constant variable, a variable that should never be altered, should be set in capital as \nPI = 3.1416\n.\n\n\n\n\nExercise 5, More Variables and Printing\n\u00b6\n\n\n\n\nCall a variable with:\n\n\n%r\n; raw variable.\n\n\n%s\n; string.\n\n\n%d\n; digit.\n\n\n\n\n\n\nMake the choice depending on the variable type.\n\n\nHowever, if calling a \u2018string\u2019 (text, NLP), it must be done with \n%s\n; \u2018numbers\u2019 is done with \n%r\n and \n%d\n (possibly with \n%s\n). \n\n\nThe use and effects of the different calls is explained in Exercises 6 and 21.\n\n\n\n\nmy_name = 'Zed A. Shaw'\nmy_age = 35 # not a lie\nmy_height = 74 # inches\nmy_weight = 180 # lbs\nmy_eyes = 'Blue'\nmy_teeth = 'White'\nmy_hair = 'Brown'\n\nprint \"Let's talk about %s.\" % my_name\n\n\n\n\nLet's talk about Zed A. Shaw.\n\n\n\n# does the same thing\nprint \"He's %d years old.\" %my_age\nprint \"He's\", my_age,\"years old.\"\nprint \"He will be\", my_age + 1,\"years old next year.\"\n\n\n\n\nHe's 35 years old.\nHe's 35 years old.\nHe will be 36 years old next year.\n\n\n\nprint \"He's %d inches tall.\" % my_height\nprint \"He's %d pounds heavy\" % my_weight\nprint \"Actually that's not too heavy.\"\nprint \"He's got %s eyes and %s hair.\" % (my_eyes, my_hair)\nprint \"His teeth are usually %s depending on the coffee.\" % my_teeth\n\n\n\n\nHe's 74 inches tall.\nHe's 180 pounds heavy\nActually that's not too heavy.\nHe's got Blue eyes and Brown hair.\nHis teeth are usually White depending on the coffee.\n\n\n\n# this line is tricky, try to get it exactly right\nprint \"If I add %d, %d, and %d I get %d.\" % (\n    my_age, my_height, my_weight, my_age + my_height + my_weight)\n\n\n\n\nIf I add 35, 74, and 180 I get 289.\n\n\n\nExercise 6, Strings and Text\n\u00b6\n\n\n concatenate\n\n\n\n\n%s\n and \n%r\n help when concatenating strings.\n\n\n%r\n does not coerce the variable into a format (\n%s\n string or \n%d\n digit).\n\n\n\n\nx = \"There are %d types of people.\" % 10\nbinary = \"binary\"\ndo_not = \"don't\"\n\ny = \"Those who know %s and those who %s.\" % (binary, do_not) # assign strings or chains of strings to a variable\n\nprint x \nprint y\n\n\n\n\nThere are 10 types of people.\nThose who know binary and those who don't.\n\n\n\nprint \"I said: %r.\" % x\nprint \"I also said: '%s'.\" % y\n\n\n\n\nI said: 'There are 10 types of people.'.\nI also said: 'Those who know binary and those who don't.'.\n\n\n\nhilarious = False\njoke_evaluation = \"Isn't that joke so funny?! %r\"\n\nprint joke_evaluation % hilarious\n\n\n\n\nIsn't that joke so funny?! False\n\n\n\n# add two strings together, concatenate them\nw = \"This is the left side of...\"\ne = \" a string with a right side.\"\n\n# with Numpy, it would have added (mathematically speaking)\nprint w + e\n\n\n\n\nThis is the left side of... a string with a right side.\n\n\n\nExercise 15, Reading Files\n\u00b6\n\n\n\n\nBefore running this script, create a text file.\n\n\nType \n\"Test file thing\" > test.txt\n.\n\n\nThen type \ncat test.txt\n.\n\n\n\u2018test.txt\u2019 is now saved along the other scripts.\n\n\nRun the script: \npython ex15.py test.txt\n\n\nWith IPython, type: \n%run ex15.py test.txt\n\n\nRun the script without the extra argument \ntest.txt\n to check the result.\n\n\n\n\n%run ex15.py test.txt\n\n\n\n\nHere's your file 'test.txt':\nTest file thing\nType the filename again:\n> test.txt\nHere's your file 'test.txt' again:\nTest file thing\n\n\n\n%run ex15.py\n\n\n\n\n---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n\\\\Learn Python the Hard Way\\ex15.py in <module>()\n      1 from sys import argv\n      2 \n----> 3 script, filename = argv\n      4 \n      5 # similarities\n\n\nValueError: need more than 1 value to unpack\n\n\n\n\n\nLoad the script in IPython with \n%load\n to study it (don\u2019t run it!).\n\n\nThis type of script requires \u2018external\u2019 arguments when launched: \npython ex15.py test.txt\n\n\nIn the script itself, always preceed the \u2018external\u2019 arguments, like \nfilename\n, with \nscript\n since your write \npython ex15.py test.txt\n or \npython script argument\n when you launch the script.\n\n\n\n\n# %load ex15.py\nfrom sys import argv\n\nscript, filename = argv\n\n# similarities between\n# var = raw_input(\"string\", digit, \"prompt\")\n# var = open(\"string\")\n\ntxt = open(filename) # reference to a file, not the file\nprint \"Here's your file %r:\" % filename\nprint txt.read()\n\nprint \"Type the filename again:\"\nfile_again = raw_input(\"> \")\n\ntext_again = open(file_again)\nprint \"Here's your file %r again:\" % file_again\nprint text_again.read()\n\n\n\n\n\n\nThe script again (this time, a manual import or copy-paste).\n\n\n\n\nfrom sys import argv\n\n# always preceed the arguments like 'filename' with 'script'\nscript, filename = argv\n\n# similarities\n# var = raw_input(\"string\", digit, \"prompt\")\n# var = open(\"string\")\n\ntxt = open(filename) #reference to a file, not the file\nprint \"Here's your file %r:\" % filename\nprint txt.read()\n\nprint \"Type the filename again:\"\nfile_again = raw_input(\"> \")\n\ntext_again = open(file_again)\nprint \"Here's your file %r again:\" % file_again\nprint text_again.read()\n\n\n\n\n\n\nNow, use this alternative code instead.\n\n\nIt does not require an external argument; the argument (\nfilename\n) is in the script itself (it has become a variable).\n\n\n\u2018Internal\u2019 arguments are for functions (\ndef function(arg1, arg2):\n); see Exercise 18.\n\n\n\n\nfilename = \"test.txt\" # however, the code is limited to this file only\n\ntxt = open(filename) # reference to a file, not the file\nprint \"Here's your file %r:\" % filename\nprint txt.read()\n\nprint \"Type the filename again:\"\nfile_again = raw_input(\"> \")\n\ntext_again = open(file_again)\nprint text_again.read()\n\n\n\n\nExercise 16, Reading and Writing Files\n\u00b6\n\n\n open, close, readlines, truncate\n\n\n\n\n'w'\n, write, \n'r'\n, read, \n'a'\n, append.\n\n\n'w+'\n, read-write, \n'r+'\n, read-write, \n'a+'\n, read-append.\n\n\n'r'\n being the default argument, it is facultative when writing \nopen('file', 'r')\n.\n\n\nThe other arguments are mandatory; without them in \nopen('file, 'w')\n, you cannot write, truncate, append or replace.\n\n\nFirst, load the script in IPython by typing \n%load ex16_1.py\n; it then turn to  a comment \n# %load ex16_1.py\n.\n\n\n\n\n# %load ex16.py\nfrom sys import argv\n\nscript, filename = argv\n\nprint \"We're going to erase %r.\" % filename\nprint \"If you don't want that, hit CTRL-C (^C).\"\nprint \"If you do want that, hit RETURN.\"\n\nraw_input(\"?\")\n\nprint \"Opening the file...\"\ntarget = open(filename, 'w')\n\nprint \"Truncating the file!\"\n\ntarget.truncate()\n\nprint \"Now, I'm going to ask you  for three lines.\"\n\nline1 = raw_input(\"line 1: \")\nline2 = raw_input(\"line 2: \")\nline3 = raw_input(\"line 3: \")\n\nprint \"I'm going to write these to the file.\"\n\ntarget.write(line1) # 'write' variable line1\ntarget.write(\"\\n\") # add a new line\ntarget.write(line2)\ntarget.write(\"\\n\")\ntarget.write(line3)\ntarget.write(\"\\n\")\n\nprint \"And finally, we close it.\"\ntarget.close()\n\n\n\n\n\n\nNow, run the external file in IPython (it imports the code behind the scene).\n\n\nCareful: the script requires a second argument (\nfilename\n).\n\n\n\n\n%run ex16.py text.txt\n\n\n\n\nWe're going to erase 'text.txt'.\nIf you don't want that, hit CTRL-C (^C).\nIf you do want that, hit RETURN.\n?\nOpening the file...\nTruncating the file!\nNow, I'm going to ask you  for three lines.\nline 1: Good morning.\nline 2: How are you?\nline 3: I wish you a good day.\nI'm going to write these to the file.\nAnd finally, we close it.\n\n\n\n\n\nRead the file.\n\n\n\n\nfilename = 'text.txt'\n\ntarget = open(filename, 'r')\nprint target.read()\ntarget.close()\n\n\n\n\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\n\n\nNow, truncate (empty, delete, erase, clear) the file, reopen it, and to read it.\n\n\n\n\nfilename = 'text.txt'\n\ntarget = open(filename, 'w')\nprint \"Truncating the file!\"\nprint \"-\" * 25\ntarget.truncate()\ntarget.close()\n\ntarget = open(filename, 'r')\nprint target.read()\ntarget.close()\n\n\n\n\nTruncating the file!\n------------------------\n\n\n\n\n\nExercise 17, More Files\n\u00b6\n\n\n length, len()\n\n\n\n\ntarget.read()\n; read the whole file (EOF).\n\n\ntarget.read(10)\n; read the amount of bytes between the parentheses (1 byte = 1 character).\n\n\ntarget.readline()\n; read one line character at a time; the first line or the file until the first \n\\n\n.\n\n\ntarget.readline(10)\n; read 10 bytes of the first line, but never more than the first line.\n\n\nreadlines()\n; read in the whole file at once and splits it by line (create a list).\n\n\nxreadlines()\n; read big files.\n\n\nFirst, load \nscript ex17_1.py\n in IPython. This script needs two additional arguments.\n\n\n\n\n# %load ex17_1.py\nfrom sys import argv\nfrom os.path import exists # does the file exists, T or F?\n\nscript, from_file, to_file = argv\n\nprint \"Copying from %s to %s\" % (from_file, to_file)\n\nin_file = open(from_file, 'r') # 'r' is facultative\nindata = in_file.read() # read the content, store in memory\n\nprint \"The input file is %d bytes long\" % len(indata) # number of bytes in the file or length of 'indata'\n\nprint \"Does the output file exist? %r\" % exists(to_file) # if the second file hasn't been created, this row will yield a 'False'\n\n# after you run this script, if you run it again, il will yield a 'True'\nprint \"Ready, hit RETURN to continue, CTRL-C to abort.\"\nraw_input(\"? \")\n\nout_file = open(to_file, 'w')\nout_file.write(indata)\n\nprint \"Alright, all done.\"\n\nout_file.close()\nin_file.close()\n\n\n\n\n%run ex17_1.py text2.txt new.txt\n\n\n\n\nCopying from text2.txt to new.txt\nThe input file is 49 bytes long\nDoes the output file exist? True\nReady, hit RETURN to continue, CTRL-C to abort.\n? \nAlright, all done.\n\n\n\ntarget = open(\"text2.txt\")\nprint target.read()\ntarget.close()\n\n\n\n\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\ntarget = open(\"new.txt\")\nprint target.read()\ntarget.close()\n\n\n\n\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\n# %load ex17_2.py\nfrom sys import argv\nfrom os.path import exists # does the file exists, T or F?\n\nscript, from_file, to_file = argv\n\n# FIRST\nin_file = open(from_file, 'r')\nindata = in_file.read()\n\nprint \"The input file is %d bytes long\" % len(indata)\n\nin_file.close()\n\nprint \"-\" * 25\n\n# SECOND\ncheckfile = open(from_file, 'r')\nprint checkfile.readline() # read line 1, show\nprint checkfile.readline() # read line 2\nprint checkfile.readline() # read line 3\n\ncheckfile.close()\n\nprint \"-\" * 25\n\n# THIRD\ncheckfile2 = open(from_file, 'r')\nout_file = open(to_file, 'w')\n\nindata = checkfile2.read()\nout_file.write(indata)\n\nprint \"Alright, all done.\"\n\ncheckfile2.close()\nout_file.close()\n\nprint \"-\" * 25\n\n# FOURTH\n\ncheckfile3 = open(to_file, 'r')\n\nprint checkfile3.read()\n\ncheckfile3.close()\n\n\n\n\n%run ex17_2.py text2.txt new2.txt\n\n\n\n\nThe input file is 49 bytes long\n-------------------------\nGood morning.\n\nHow are you?\n\nI wish you a good day.\n-------------------------\nAlright, all done.\n-------------------------\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\nExercise 18, Names, Variables, Code, Functions\n\u00b6\n\n\n argument, flexible, indefinite\n\n\n\n\nA function can have no, one or several arguments.\n\n\ndef function():\n.\n\n\ndef function(one)\n.\n\n\ndef function(one, two, three)\n.\n\n\n\n\n\n\n*args\n means indifinite number of arguments. \n\n\nAll the arguments are is a list (\u2018args\u2019).\n\n\n\n\n# indefinite\ndef print_two(*args):\n\n    arg1, arg2 = args\n    print \"arg1: %r, arg2: %r\" % (arg1, arg2)\n\n# two arguments\ndef print_two_again(arg1, arg2):\n\n    print \"arg1: %r, arg2: %r\" % (arg1, arg2)\n\n# one argument\ndef print_one(arg1):\n\n    print \"arg1: %r\" % arg1\n\n# no arguments\ndef print_none():\n\n    print \"I got nothin'.\"\n\n# indefinite\ndef print_two_2(*args):\n\n    print \"args: %r\" % (args,) # much more flexible    \n\n# two arguments\ndef print_two_again_2(arg1, arg2, arg3):\n\n    print \"arg1: %r, arg2: %r, arg3: %r\" % (arg1, arg2, arg3)    \n\n# three arguments\ndef print_two_again_3(arg1, arg2, arg3):\n\n    print \"arg1: %r, arg2: %r, arg3: %r\" % (arg1, arg2, arg3)\n    print_two(\"Joe\", \"Frank\") # call a function inside a function\n\n\n\n\n\n\nRun the functions.\n\n\n\n\nprint_two(\"Zed\", \"Shaw\")\nprint_two_again(\"Zed\", \"Shaw\")\n\n\n\n\narg1: 'Zed', arg2: 'Shaw'\narg1: 'Zed', arg2: 'Shaw'\n\n\n\nprint_one(\"First!\")\nprint_none()\n\n\n\n\narg1: 'First!'\nI got nothin'.\n\n\n\nprint_two_2(\"Zed\", \"Shaw\", \"A\", \"B\")\n\n\n\n\nargs: ('Zed', 'Shaw', 'A', 'B')\n\n\n\nprint_two_again_2(\"Zed\", \"Shaw\", \"C\")\n\n\n\n\narg1: 'Zed', arg2: 'Shaw', arg3: 'C'\n\n\n\nprint_two_again_3(\"Zed\", \"Shaw\", \"C\")\n\n\n\n\narg1: 'Zed', arg2: 'Shaw', arg3: 'C'\narg1: 'Joe', arg2: 'Frank'\n\n\n\nExercise 19, Functions and Variables\n\u00b6\n\n\n\n\nGive different names to functions and arguments not to get confuse.\n\n\n\n\ndef cheese_and_crackers(cheese_count, boxes_of_crackers):\n\n    print \"You have %d cheeses!\" % cheese_count\n    print \"You have %d boxes of crackers!\" % boxes_of_crackers\n    print \"Man that's enough for a party!\"\n    print \"Get a blanket. \\n\"\n\n\n\n\nprint \"1.We can just give the function numbers directly:\"\ncheese_and_crackers(20, 30)\n\n\n\n\n1.We can just give the function numbers directly:\nYou have 20 cheeses!\nYou have 30 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\nprint \"2.Or, we can use variables from our script:\"\namount_of_cheese = 10\namount_of_crackers = 50\ncheese_and_crackers(amount_of_cheese, amount_of_crackers)\n\n\n\n\n2.Or, we can use variables from our script:\nYou have 10 cheeses!\nYou have 50 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\nprint \"3.We can even do math inside too:\"\ncheese_and_crackers(10 + 20, 5 + 6)\n\n\n\n\n3.We can even do math inside too:\nYou have 30 cheeses!\nYou have 11 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\nprint \"4.And we can combine the two, variables and math:\"\ncheese_and_crackers(amount_of_cheese + 100, amount_of_crackers + 1000)\n\n\n\n\n4.And we can combine the two, variables and math:\nYou have 110 cheeses!\nYou have 1050 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\nprint \"5.Make a GUI.\"\nprint \"Enter the amount of cheese:\",\namount_of_cheese = int(raw_input())\namount_of_crackers = int(raw_input(\"Enter the amount of crackers: \"))\ncheese_and_crackers(amount_of_cheese, amount_of_crackers)\n\n\n\n\n5.Make a GUI.\nEnter the amount of cheese:2\nEnter the amount of crackers: 5\n You have 2 cheeses!\nYou have 5 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\nExercise 20, Functions and Files\n\u00b6\n\n\n seek, move, file\n\n\n# %load ex20.py\nfrom sys import argv\n\nscript, input_file = argv\n# python ex20.py test.txt\n\ndef print_all(f): # f is the file\n\n    print f.read() # read the file, reach the end\n\ndef rewind(f):\n\n    f.seek(0) # move back to the initial position in the file\n# 'seek' actively move in the file\n\ndef print_a_line(line_count, f):\n\n    print line_count, f.readline() # print a line # and this line number in the file\n\n\ncurrent_file = open(input_file)\n\nprint \"First, let's print the whole file:\\n\"\n\nprint_all(current_file) # launch function, f = current_file\n\nprint \"-\" * 25\n\nprint \"Now let's rewind, kind of like a tape.\"\n\nrewind(current_file) # launch function, f = current_file\n\nprint \"-\" * 25\n\nprint \"Let's print three lines:\"\n\ncurrent_line = 1 # load variable\nprint_a_line(current_line, current_file) # launch function\n# set 'current_line' to 1\n\ncurrent_line = current_line + 1\n# current_line += 1\nprint_a_line(current_line, current_file)\n# 'current_line' grows to 2...\n\n# current_line = current_line + 1\ncurrent_line += 1\nprint_a_line(current_line, current_file)\n\n\n\n\n%run ex20.py new2.txt\n\n\n\n\nFirst, let's print the whole file:\n\nGood morning.\nHow are you?\nI wish you a good day.\n-------------------------\nNow let's rewind, kind of like a tape.\n-------------------------\nLet's print three lines:\n1 Good morning.\n\n2 How are you?\n\n3 I wish you a good day.\n\n\n\nExercise 21, Functions Can Return Something or not\u2026\n\u00b6\n\n\n integer, float, int, coerce, digit, string, raw\n\n\n\n\n%r\n for raw.\n\n\n%d\n for digit.\n\n\n%s\n for string.\n\n\nint()\n with \n%d\n = integer.\n\n\nint()\n with \n%r\n or \n%s\n = integer.\n\n\nfloat()\n with \n%d\n = integer.\n\n\nfloat()\n  with \n%r\n or \n%s\n = float.\n\n\n%r\n is a safer choice; see below.\n\n\n\n\na = 10 # a digit\nb = 10.1\n\nprint \"%r\" % a\nprint \"%s\" % a\nprint \"%d\" % a\nprint \"%r\" % b\nprint \"%s\" % b\nprint \"%d\" % b\n\n\n\n\n10\n10\n10\n10.1\n10.1\n10\n\n\n\na = \"10\" # a string or str(10)\n\nprint \"%r\" % a\nprint \"%s\" % a\nprint \"%d\" % a\n\n\n\n\n'10'\n10\n\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-34-71a6226dbd27> in <module>()\n      2 print \"%r\" % a\n      3 print \"%s\" % a\n----> 4 print \"%d\" % a\n\nTypeError: %d format: a number is required, not str\n\n\n\nb = \"10.1\" # a string or str(10)\n\nprint \"%r\" % b\nprint \"%s\" % b\nprint \"%d\" % b\n\n\n\n\n'10.1'\n10.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-33-18d4f3068fee> in <module>()\n      2 print \"%r\" % b\n      3 print \"%s\" % b\n----> 4 print \"%d\" % b\n\nTypeError: %d format: a number is required, not str\n\n\n\na = \"10\" # a string or str(10)\nb = \"10.1\" # a string or str(10)\n\nprint \"%r\" * 1 % a\nprint \"%s\" * 1 % a\nprint \"%r\" * 1 % b\nprint \"%s\" * 1 % b\n\n\n\n\n'10'\n10\n'10.1'\n10.1\n\n\n\na = \"10\" # a string or str(10)\nb = \"10.1\" # a string or str(10)\n\nprint \"%r\" * 2 % a\nprint \"%s\" * 2 % a\nprint \"%r\" * 2 % b\nprint \"%s\" * 2 % b\n\n\n\n\n---------------------------------------------------------------------------\n\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-34-18d4f3068fee> in <module>()\n      1 a = \"10\"\n      2 b = \"10.1\"\n----> 3 print \"%r\" * 2 % a\n      4 print \"%s\" * 2 % a\n      5 print \"%r\" * 2 % b\n\nTypeError: not enough arguments for format string\n\n\n\na = 10\nb = 10.1\na = int(a)\nb = int(b)\nprint \"%r\" % a\nprint \"%s\" % a\nprint \"%d\" % a\nprint \"%r\" % b\nprint \"%s\" % b\nprint \"%d\" % b\n\n\n\n\n10\n10\n10\n10\n10\n10\n\n\n\na = 10\nb = 10.1\na = float(a)\nb = float(b)\n\nprint \"%r\" % a\nprint \"%s\" % a\nprint \"%d\" % a\nprint \"%r\" % b\nprint \"%s\" % b\nprint \"%d\" % b\n\n\n\n\n10.0\n10.0\n10\n10.1\n10.1\n10\n\n\n\na = 1\nb = 2.1\n\nprint a * b\nprint int(a) * int(b)\nprint float(a) * float(b)\nprint str(a) * 10\nprint str(b) * 10\nprint str(a) * str(b)\n\n\n\n\n2.1\n2\n2.1\n1111111111\n2.12.12.12.12.12.12.12.12.12.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-52-57a5dd7c13d0> in <module>()\n      7 print str(a) * 10\n      8 print str(b) * 10\n----> 9 print str(a) * str(b)\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n\ndef add(a, b):\n\n    print \"ADDING %s + %s\" % (a, b)\n    return a + b  \n\ndef substract(a, b):\n\n    print \"SUBTRACTING %d - %d\" % (a, b) # show the arguments\n    return a - b # compute the arguments\n\ndef multiply(a, b):\n\n    print \"MULTIPLYING %d * %d\" % (a, b)\n    return a * b    \n\ndef divide(a, b):\n\n    print \"DIVIDING %d / %d\" % (a, b)\n    return a / b\n\n\n\n\nprint \"Let's do some math with just functions!\"\n\naa = int(raw_input(\"Enter a (integer): \")) # to enter an integer\nbb = float(raw_input(\"Enter b (float): \")) # to enter a float\nage = add(aa, bb) # launch function add()\n\n\n\n\nLet's do some math with just functions!\nEnter a (integer): 1\nEnter b (float): 2.2\nADDING 1 + 2.2\n\n\n\nprint add(aa, bb)\n\n\n\n\nADDING 1 + 2.2\n3.2\n\n\n\nheight = substract(78, 4) # launch function substract()\nweight = multiply(90, 2) # launch function multiply()\niq = divide(100, 2) # launch function divide()\n\nprint height\nprint weight\nprint iq\n\n\n\n\nSUBTRACTING 78 - 4\nMULTIPLYING 90 * 2\nDIVIDING 100 / 2\n74\n180\n50\n\n\n\n# Use the variable, previously loaded\nprint \"Age: %d, Height: %d, Weight: %d, IQ: %d\" % (age, height, weight, iq)\n\n\n\n\nAge: 3, Height: 74, Weight: 180, IQ: 50\n\n\n\n# A puzzle for the extra credit, type it in anyway.\nprint \"Here is a puzzle.\"\n\nwhat = add(age, substract(height, multiply(weight, divide(iq, 2)))) # launch functions one by one!!!\n\n# Insert variable 'what' in the text\nprint \"That becomes: \", what, \"Can you do it by hand?\"\n\n\n\n\nHere is a puzzle.\nDIVIDING 50 / 2\nMULTIPLYING 180 * 25\nSUBTRACTING 74 - 4500\nADDING 3.2 + -4426\nThat becomes:  -4422.8 Can you do it by hand?\n\n\n\nExercise 23, Read Some Code\n\u00b6\n\n\n\n\nGo to \nGitHub\n:\n\n\nIn the \u2018lamson\u2019 directory, take a script.\n\n\nGo through the script.\n\n\nFind projects on collaborative sites or depositories:\n\n\nbitbucket.org\n.\n\n\ngithub.com\n.\n\n\ngitorious.org\n.\n\n\nlaunchpad.net\n.\n\n\nsourceforge.net\n.\n\n\n\n\n\n\n\n\nExercise 24, More Practice\n\u00b6\n\n\n\n\n\\'\n for an aposthrophy.\n\n\n\\t\n for a tab.\n\n\n\\\\\n for a backslash.\n\n\n\\n\n for a new line.\n\n\n\n\nprint \"Let's practice everything.\"\n\nprint 'You\\'d need to know \\'bout escapes with \\\\ that do \\nnewlines and \\ttabs.'\n\n\n\n\nLet's practice everything.\nYou'd need to know 'bout escapes with \\ that do \nnewlines and    tabs.\n\n\n\npoem = \"\"\"\n\\tThe lovely world\nwith logic so firmly planted\nconnot discern \\n the needs of love\nnor comprehend passion from intuition\nand requires an explanation\n\\n\\t\\twhere there is none.\n\"\"\"\n\nprint \"----------------\"\nprint poem\nprint \"----------------\"\n\n\n\n\n----------------\n\n    The lovely world\nwith logic so firmly planted\nconnot discern \n the needs of love\nnor comprehend passion from intuition\nand requires an explanation\n\n        where there is none.\n\n----------------\n\n\n\n# variable 'five'\nfive = 10 -2 + 3 - 6\n\n# use of variable 'five'\nprint \"This should be five: %s\" % five\n\n\n\n\nThis should be five: 5\n\n\n\n# function with one argument\ndef secret_formula(started):\n\n    jelly_beans = started * 500 # load variable with another\n    jars = jelly_beans / 1000\n    crates = jars / 100\n    return jelly_beans, jars, crates\n\n\n# variable; warning, this variable is modified further down\nstart_point = 10000\n\n# redefine the results of a function (rename a variable)\n# from this point, 'jelly_beans' becomes 'beans'\n# and must be called so in any line of code\nbeans, jars, crates = secret_formula(start_point)\n\nprint \"With a starting point of: %d\" % start_point\n# we apply 'bean'\nprint \"We's have %d beans, %d jars, and %d crates.\" % (beans, jars, crates)\n\n# modified variable is loaded into the code from this point\nstart_point = start_point / 10\n\nprint \"We can also do that this way:\"\n# we apply the modified variable 'start_point'\nprint \"We's have %d beans, %d jars, and %d crates.\" % secret_formula(start_point)\n\n\n\n\nWith a starting point of: 10000\nWe's have 5000000 beans, 5000 jars, and 50 crates.\nWe can also do that this way:\nWe's have 500000 beans, 500 jars, and 5 crates.\n\n\n\nExercise 25, Even More Practice\n\u00b6\n\n\n import, module, package, script, library\n\n\n\n\nFor this exercice, consult the manual.\n\n\nFirst, run python ex25.py to find out any errors.\n\n\nSecond, use the python engine to run pieces of codes from this file and not just trigger the whole code from this file\n\n\nCheck out file \n25_1.txt\n.\n\n\n\n\n# %load ex25.py\ndef break_words(stuff):\n\n    \"\"\"This function will break up words for us.\"\"\"\n    words = stuff.split(' ') # the method splits the characters each time it finds a 'space'\n    return words # you must specify in python where to load the result (into 'words')\n\ndef sort_words(words):\n\n    \"\"\"Sorts the words.\"\"\"\n    return sorted(words) # the python function sorts the separated words\n\ndef print_first_word(words):\n\n    \"\"\"Prints the first word after popping in off.\"\"\"\n    word = words.pop(0) # the method returns the first word in the index (position 0)\n    print word\n\ndef print_last_word(words):\n\n    \"\"\"Prints the last word after popping it off.\"\"\"\n    word = words.pop(-1) # the method returns the last word in the index (position -1)\n    print word\n\ndef sort_sentence(sentence):\n\n    \"\"\"Takes in a full sentence and returns the sorted words.\"\"\"\n    words = break_words(sentence) # launch a function\n    return sort_words(words) # launch another function with the result of the first function\n\ndef print_first_and_last(sentence):\n\n    \"\"\"Prints the first and last words of the sentence.\"\"\"\n    words = break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n\ndef print_first_and_last_sorted(sentence):\n\n    \"\"\"Sorts the words then prints the first and last one.\"\"\"\n    words = sort_sentence(sentence)\n    print_first_word(words)\n    print_last_word(words)\n\n\n\n\n%run ex25.py\n\n\n\n\n\n\nIn the next script, you \nimport\n the above script (ex25.py) as an external module (even though the script was previously run in IPython, and we want to simulate a script importing another script) and use its function as methods.\n\n\n\n\nimport ex25\n\nsentence = \"All good things come to those who wait.\"\n\nwords = ex25.break_words(sentence)\nwords\n\n\n\n\n['All', 'good', 'things', 'come', 'to', 'those', 'who', 'wait.']\n\n\n\nsorted_words = ex25.sort_words(words)\nsorted_words\n\n\n\n\n['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']\n\n\n\nex25.print_first_word(words)\nex25.print_last_word(words)\nwords\n\n\n\n\nAll\nwait.\n['good', 'things', 'come', 'to', 'those', 'who']\n\n\n\nex25.print_first_word(sorted_words)\nex25.print_last_word(sorted_words)\nsorted_words\n\n\n\n\nAll\nwho\n['come', 'good', 'things', 'those', 'to', 'wait.']\n\n\n\nsorted_words = ex25.sort_sentence(sentence)\nsorted_words\n\n\n\n\n['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']\n\n\n\nex25.print_first_and_last(sentence)\nex25.print_first_and_last_sorted(sentence)\n\n\n\n\nAll\nwait.\nAll\nwho\n\n\n\nExercise 32, Loops and Lists\n\u00b6\n\n\n for, loop, list\n\n\nthe_count = [1,2,3,4,5]\nfruits = ['apples', 'oranges', 'pears', 'apricots']\nchange = [1, 'pennies', 2, 'dimes', 3, 'quarters']\n\n# this first kind of for-loop goes through a list\nfor number in the_count:\n    print \"\\tThis is count %d\" % number\n\n\n\n\n    This is count 1\n    This is count 2\n    This is count 3\n    This is count 4\n    This is count 5\n\n\n\n# same as above\nfor fruit in fruits:\n    print \"A fruit of type: %s\" % fruit\n\n\n\n\nA fruit of type: apples\nA fruit of type: oranges\nA fruit of type: pears\nA fruit of type: apricots\n\n\n\n\n\nWe can go though mixed lists too. Notice we have to use \n%r\n since we don\u2019t know what\u2019s in it.\n\n\n\n\nfor i in change:\n    print \"\\tI got %r\" % i\n\n\n\n\n    I got 1\n    I got 'pennies'\n    I got 2\n    I got 'dimes'\n    I got 3\n    I got 'quarters'\n\n\n\n\n\nWe can also build lists. First, start with an empty one.\n\n\n\n\nelements = []\n\n# then use the range function to do 0 to 5 counts\n# 0 means 1st, the 6th is excluded; 0,1,2,3,4,5\nfor i in range(0, 6):\n    print \"Adding %d to the list.\" % i\n    # append is a function that lists understand\n    elements.append(i) # elements is a variable to which we add numbers\n\n\n\n\nAdding 0 to the list.\nAdding 1 to the list.\nAdding 2 to the list.\nAdding 3 to the list.\nAdding 4 to the list.\nAdding 5 to the list.\n\n\n\n\n\nWe can print them out.\n\n\n\n\nfor i in elements:\n    print \"\\tElement was: %d\" % i  \n\n\n\n\n    Element was: 0\n    Element was: 1\n    Element was: 2\n    Element was: 3\n    Element was: 4\n    Element was: 5\n\n\n\nprint \"Test the range function...\"\nprint \"range(5):\", range(5)\nprint \"range(6):\", range(6)\nprint \"range(1, 5):\", range(1, 5)\nprint \"range(2, 5):\", range(2, 5)\nprint \"range(0, 10, 2):\", range(0, 10, 2)\n\n\n\n\nTest the range function...\nrange(5): [0, 1, 2, 3, 4]\nrange(6): [0, 1, 2, 3, 4, 5]\nrange(1, 5): [1, 2, 3, 4]\nrange(2, 5): [2, 3, 4]\nrange(0, 10, 2): [0, 2, 4, 6, 8]\n\n\n\n\n\nTwo-dimentional lists (above 2 dimension, it can become memory-intensive to compute!).\n\n\n\n\n 2d, tabular, lists in list, list of lists\n\n\nthe_count_two = [[1,2,3],[4,5,6]]\n\n# this first kind of for-loop goes through a list\n# this list is not numerical, use %r or %s\nfor number in the_count_two:\n    print \"\\tThis is count %r\" % number\n\n\n\n\nThis is count [1, 2, 3]\nThis is count [4, 5, 6]\n\n\n\nExercise 33, While Loops\n\u00b6\n\n\n while, loop\n\n\ni = 0\nnumbers = []\n\nwhile i < 6:\n    print \"At the top i is %d\" % i\n    numbers.append(i)\n\n    i += 1\n    print \"Number now: \", numbers\n    print \"At the botton i is %d\" % i\n\n\nprint \"The numbers: \"\n\n\n\n\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 1\nAt the top i is 1\nNumber now:  [0, 1]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 1, 2]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 1, 2, 3]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 1, 2, 3, 4]\nAt the botton i is 5\nAt the top i is 5\nNumber now:  [0, 1, 2, 3, 4, 5]\nAt the botton i is 6\nThe numbers:\n\n\n\nfor num in numbers:\n    print num    \n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n\n\n\nMake it a function.\n\n\n\n\ndef breaking_list(max_of, increm):\n\n    i = 0\n    numbers = []\n\n    while i < max_of:\n        print \"At the top i is %d\" % i\n        numbers.append(i)\n\n        i += increm\n        print \"Number now: \", numbers\n        print \"At the botton i is %d\" % i\n\n    print \"The numbers: \"\n\n    for num in numbers:\n        print num\n\nprint \"Enter an integer, a maximum, higher than 1.\"\nmax_integer = int(raw_input(\"> \"))\nprint \"Enter an integer, an increment, equal or more than 1\"\nincrement = int(raw_input(\"> \"))\nprint \"The maximum is %d and the increment is %d\" % (max_integer, increment)\n\nbreaking_list(max_integer, increment)\n\n\n\n\nEnter an integer, a maximum, higher than 1.\n> 5\nEnter an integer, an increment, equal or more than 1\n> 2\nThe maximum is 5 and the increment is 2\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 2]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 2, 4]\nAt the botton i is 6\nThe numbers: \n0\n2\n4\n\n\n\n\n\nChange the function, replace with a for-loops. \n\n\n\n\ndef breaking_list2(max_of, increm):\n\n    i = 0\n    numbers = []\n\n    for i in range(0, max_of, increm):\n        print \"At the top i is %d\" % i\n        numbers.append(i)\n\n        i += increm\n        print \"Number now: \", numbers\n        print \"At the botton i is %d\" % i\n\n    print \"The numbers: \"\n\n    for num in numbers:\n        print num\n\nmax_integer2 = max_integer + 2\nincrement2 = increment + 1\nbreaking_list2(max_integer2, increment2)\n\n\n\n\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 3]\nAt the botton i is 6\nAt the top i is 6\nNumber now:  [0, 3, 6]\nAt the botton i is 9\nThe numbers: \n0\n3\n6\n\n\n\nExercise 34, Accessing Elements of Lists\n\u00b6\n\n\n list, list of lists, lists in list, exit, program\n\n\n\n\nLet\u2019s build a scenario; functions leading to other functions.\n\n\ndef gold_room():\n\n\ndef bear_room():\n\n\ndef cthulhu_room():\n\n\ndef dead(why):\n\n\ndef start():\n\n\nstart()\n to launch the chain reaction.\n\n\n\n\nfrom sys import exit\n\ndef gold_room():\n\n    print \"This room is full of gold. How much do you take?\"\n\n    choice = raw_input(\"Write any number from 0 to 100> \") # variable\n    if \"0\" in choice or \"1\" in choice: # could be 0, 1, 10, 11:19, 20, 21, 30, 31, 40, 41, 50, 51, etc.\n        how_much = int(choice) # variable\n    else:\n        dead(\"Man, learn to type a number.\") # launch function dead\n\n    if how_much < 50:\n        print \"Nice, you're not greedy, you win!\"\n        exit(0) # launch system function exit\n    else:\n        dead(\"You greedy bastard!\") # launch function dead\n\ndef bear_room():\n\n    print \"There is bear here.\"\n    print \"The bear has a bunch of honey.\"\n    print \"The fat bear is in front of another door.\"\n    print \"How are you going to move the bear?\"\n    bear_moved = False # variable\n\n    while True: # infinite loop, run until it finds a right answer\n        choice = raw_input(\"Write 'take honey', 'taunt bear' or 'open door'> \") # variable\n\n        if choice == \"take honey\": # variable check\n            dead(\"The bear looks at you then slaps your face off.\") # launch function dead\n        elif choice == \"taunt bear\" and not bear_moved: # double variables check\n            print \"The bear has moved from the door. You can go thought it now.\"\n            bear_moved = True # change the variable\n        elif choice == \"taunt bear\" and bear_moved:\n            dead(\"The bear gets pissed off and chews your leg off.\")\n        elif choice == \"open door\" and bear_moved: # variable check\n            gold_room() # launch function gold_room\n        else:\n            print \"I got no idea what that means.\"\n\ndef cthulhu_room():\n\n    print \"Here you see the great evil Cthulhu.\"\n    print \"He, it, whatever stares at you and you go insane.\"\n    print \"Do you flee your life or eat your head?\"\n\n    choice = raw_input(\"Write 'flee' or 'head'> \") # variable\n\n    if \"flee\" in choice: # variable check\n        start() # launch function start\n    elif \"head\" in choice:\n        dead(\"Well that was tasty!\")\n    else:\n        cthulhu_room() # launch function\n\ndef dead(why):\n\n    print why, \"Good job!\"\n    exit(0) # launch system function exit\n    # exit(0) is neutral\n    # exit(1) is an error, could be a useful warning\n    # exit(2) or others like exit(100) are other warnings, or different messages\n\ndef start():\n\n    print \"You are in a dark room.\"\n    print \"There is a door to your right and left.\"\n    print \"Which one do you take: left or right?\"\n\n    choice = raw_input(\"Write 'left' or 'right'> \") # variable\n\n    if choice == \"left\": # variable check, exact\n        bear_room() # launch function bear_room\n    elif choice == \"right\": # variable check, exact\n        cthulhu_room()\n    else:\n        dead(\"You stumble around the room until you starve.\")\n\nstart() # launch the chain reaction\n\n\n\n\nYou are in a dark room.\nThere is a door to your right and left.\nWhich one do you take: left or right?\nWrite 'left' or 'right'> left\nThere is bear here.\nThe bear has a bunch of honey.\nThe fat bear is in front of another door.\nHow are you going to move the bear?\nWrite 'take honey', 'taunt bear' or 'open door'> taunt bear\nThe bear has moved from the door. You can go thought it now.\nWrite 'take honey', 'taunt bear' or 'open door'> open door\nThis room is full of gold. How much do you take?\nWrite any number from 0 to 100> 63\nMan, learn to type a number. Good job!\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 0\n\n\n\n\n\nThere are multiple scenarios to try\u2026\n\n\n\n\nExercise 38, Doing Things to Lists\n\u00b6\n\n\n list, index, add, remove, delete, extract\n\n\nten_things = \"Apples Oranges Crows Telephones Light Sugar\"\n\nprint \"ten_things:\", ten_things,\", not a list\"\n\nprint \"Wait there are not 10 things is that list. Let's fix that.\"\n\n\n\n\nten_things: Apples Oranges Crows Telephones Light Sugar , not a list\nWait there are not 10 things is that list. Let's fix that.\n\n\n\nstuff = ten_things.split(' ') # variable ten_things, method split\n\nprint \"stuff:\", stuff,\", a list\"\n\n\n\n\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar'] , a list\n\n\n\nmore_stuff = [\"Day\", \"Night\", \"Song\", \"Frisbee\", \"Corn\", \"Banana\", \"Girl\", \"Boy\"] # list variable\n\nprint \"more_stuff:\", more_stuff,\", a list\"\n\n\n\n\nmore_stuff: ['Day', 'Night', 'Song', 'Frisbee', 'Corn', 'Banana', 'Girl', 'Boy'] , a list\n\n\n\n\n\nMost of the time, a for-loop is better than a while-loop.\n\n\nA while-loop is better when there is a test, a condition.\n\n\n\n\nwhile len(stuff) != 10:\n    next_one = more_stuff.pop() # load a variable with another variable, method pop, pop means extracting 1 item from a list variable, the last item in the list\n    print \"Adding: \", next_one # show the content\n    stuff.append(next_one) # variable stuff add 1-item list variable; the loop will go as long as stuff has less than 10 items  \n    print \"stuff:\", stuff\n    print \"There are %d items now.\" % len(stuff) # length of stuff or the number of items in it\n\nprint \"There we go: \", stuff\n\n\n\n\nAdding:  Boy\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy']\nThere are 7 items now.\nAdding:  Girl\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl']\nThere are 8 items now.\nAdding:  Banana\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana']\nThere are 9 items now.\nAdding:  Corn\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana', 'Corn']\nThere are 10 items now.\nThere we go:  ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana', 'Corn']\n\n\n\nprint \"Let's do some things with stuff.\"\n\n# print and pop choosen items according to the index\n# could also be random index values!!!\n# could reorder the list before (ascending, descending) \nprint stuff[1] # the 2nd item\nprint stuff[2] # the 3rd item\nprint stuff[-1] # the last item\nprint stuff[-2]\nprint stuff.pop() # pop the last item\nprint stuff.pop(0) # pop the first item\nprint stuff.pop(1) # pop the 2nd item\nprint stuff.pop(-1) # pop the last item\nprint ' '.join(stuff) # var.split(' ') vs ' '.join(var), concatenate the list\nprint '#'.join(stuff[3:5]) # add a character at position 3 and 4 (4th, 5th, excluding the last) \n\n\n\n\nLet's do some things with stuff.\nOranges\nCrows\nCorn\nBanana\nCorn\nApples\nCrows\nBanana\nOranges Telephones Light Sugar Boy Girl\nSugar#Boy\n\n\n\nExercise 39, Dictionaries, Oh Lovely Dictionaries\n\u00b6\n\n\n dictionary\n\n\nthings = ['a','b','c','d'] # list\n\nprint things\nprint things[1]\n\n\n\n\n['a', 'b', 'c', 'd']\nb\n\n\n\n\n\nChange an element.\n\n\n\n\nthings[1] = 'z'\nprint things\n\n\n\n\n['a', 'z', 'c', 'd']\n\n\n\n\n\nA dictionary has keys associated with values. \n\n\nOrder does not matter. \n\n\nIf you supply the key, you will get the value.\n\n\n\n\nstuff = {'name' : 'Zed','age' : '39','height' : 8 * 12 + 2} # a dictionary\n\nprint stuff\nprint stuff['name']\nprint stuff['age']\nprint stuff['height']\n\n\n\n\n{'age': '39', 'name': 'Zed', 'height': 98}\nZed\n39\n98\n\n\n\n\n\nAdd an element.\n\n\n\n\nstuff['city'] = \"San Francisco\"\nprint stuff['city']\nprint stuff\n\n\n\n\nSan Francisco\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n\n\n\n\n\nAdd and remove an element.\n\n\n\n\nstuff['color'] = \"blue\"\nprint stuff\n\ndel stuff['color']\nprint stuff\n\n\n\n\n{'color': 'blue', 'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n\n\n\n\n\nIf the value does not exist when you call it, it will turn out an error. Instead, write it this way: \nprint \"%r\" % stuff.get('color',None)\n. \n\n\nIf it\u2019s not existant, it will return \u2018None\u2019 or a value by default\n\n\n\n\nprint stuff['state']\n\n\n\n\n---------------------------------------------------------------------------\n\nKeyError                                  Traceback (most recent call last)\n\n<ipython-input-69-f211ffe8fe02> in <module>()\n----> 1 print stuff['state']\n\n\nKeyError: 'state'\n\n\n\nprint \"%r\" % stuff.get('color', None)\n\n\n\n\nNone\n\n\n\n\n\nChange an element.\n\n\n\n\nprint stuff['age']\n\nstuff['age'] = 400\nprint stuff['age']\n\n\n\n\n39\n400\n\n\n\n\n\nExtract with the index.\n\n\n\n\nstuff[1] = \"Wow\"\nstuff[2] = \"Neato\"\nprint stuff[1]\nprint stuff[2]\n\nprint stuff # new items won't be in order\n\n\n\n\nWow\nNeato\n{'city': 'San Francisco', 2: 'Neato', 'name': 'Zed', 1: 'Wow', 'age': 400, 'height': 98}\n\n\n\n\n\nDelete an element (according to the index).\n\n\n\n\ndel stuff[1]\ndel stuff[2]\n\nprint stuff\n\n\n\n\n{'city': 'San Francisco', 'name': 'Zed', 'age': 400, 'height': 98}\n\n\n\n\n\nCreate a mapping of state to abbreviation.\n\n\n\n\nstates = {\n    'Oregon': 'OR',\n    'Florida': 'FL',\n    'California': 'CA',\n    'New York': 'NY',\n    'Michigan': 'MI'\n}\n\n\n\n\n\n\nCreate a basic set of states and some cities in them.\n\n\n\n\ncities = {\n    'CA': 'San Francisco',\n    'MI': 'Detroit',\n    'FL': 'Jacksonville'\n}\n\n\n\n\n\n\nAdd some key:value to dictionary cities.\n\n\n\n\ncities['NY'] = 'New York'\ncities['OR'] = 'Portland'\n\n\n\n\n\n\nPrint out some cities.\n\n\n\n\nprint \"Dictionary 'cities': \", cities\nprint '-' * 10\nprint \"NY State has: \", cities['NY'] # call the key\nprint \"OR State has: \", cities['OR'] # get the value\n\n\n\n\nDictionary 'cities':  {'FL': 'Jacksonville', 'CA': 'San Francisco', 'MI': 'Detroit', 'OR': 'Portland', 'NY': 'New York'}\n----------\nNY State has:  New York\nOR State has:  Portland\n\n\n\n\n\nPrint some states.\n\n\n\n\nprint \"Dictionary 'states': \", states\nprint '-' * 10\nprint \"Michigan's abbreviation is: \", states['Michigan']\nprint \"Florida's abbrebiation is: \", states['Florida']\n\n\n\n\nDictionary 'states':  {'California': 'CA', 'Michigan': 'MI', 'New York': 'NY', 'Florida': 'FL', 'Oregon': 'OR'}\n----------\nMichigan's abbreviation is:  MI\nFlorida's abbrebiation is:  FL\n\n\n\n\n\nPrint a dictionary in dictionary.\n\n\n\n\nprint \"Michigan has: \", cities[states['Michigan']]\n# is like states['Michigan'], then cities['MI']\nprint \"florida has: \", cities[states['Florida']]\n\n\n\n\nMichigan has:  Detroit\nflorida has:  Jacksonville\n\n\n\n\n\nPrint every state abbreviation.\n\n\n\n\nprint \"Enumerate Dictionary 'states', key:value...\"\nfor state, abbrev in states.items():\n    print \"%s is abbreviated %s\" % (state, abbrev)\n# state = 1st item = key, abbrev = 2nd item = value\n\n\n\n\nEnumerate Dictionary 'states', key:value...\nCalifornia is abbreviated CA\nMichigan is abbreviated MI\nNew York is abbreviated NY\nFlorida is abbreviated FL\nOregon is abbreviated OR\n\n\n\n\n\nPrint every city in state.\n\n\n\n\nprint \"Enumerate Dictionary 'cities', key:value...\"\nfor abbrev, city in cities.items():\n    print \"%s has the city %s\" % (abbrev, city)   \n\n\n\n\nEnumerate Dictionary 'cities', key:value...\nFL has the city Jacksonville\nCA has the city San Francisco\nMI has the city Detroit\nOR has the city Portland\nNY has the city New York\n\n\n\n\n\nNow do both at the same time.\n\n\n\n\nprint \"Enumerate both dictionaries...\"\nfor state, abbrev in states.items():\n    print \"%s state is abbreviated %s and has city %s\" % (state, abbrev, cities[abbrev])\n# state California gives abbrev CA, inside cities gives San Francisco   \n\n\n\n\nEnumerate both dictionaries...\nCalifornia state is abbreviated CA and has city San Francisco\nMichigan state is abbreviated MI and has city Detroit\nNew York state is abbreviated NY and has city New York\nFlorida state is abbreviated FL and has city Jacksonville\nOregon state is abbreviated OR and has city Portland\n\n\n\n\n\nget()\n seek a key, whether it exists or not.\n\n\n\n\nstate = states.get('Texas') # extract\n\nif not state:\n    print \"Sorry, no Texas.\"\n\n\n\n\nSorry, no Texas.\n\n\n\n\n\nGet a city with a default value.\n\n\n\n\ncity = cities.get('TX', 'Does Not Exist')\nprint \"The city for the state 'TX' is: %s\" % city\n\n\n\n\nThe city for the state 'TX' is: Does Not Exist\n\n\n\n\n\nLet\u2019s step up the above operations.\n\n\nModule \nhashmap.py\n works through a dictionary. \n\n\nModule \nex39_test.py\n contains dictionaries (just like the above).\n\n\nIn Python, we would run module \nex39_test.py\n. \n\n\nThe module would begin by importing module \nhashmap.py\n to use its methods and perform operations.\n\n\nConsult the manual.\n\n\n\n\nExercise 40, Modules, Classes, and Objects\n\u00b6\n\n\nmystuff = {'apple': 'I AM APPLES'}\n\nprint mystuff['apple'] # get X from Y\n\n\n\n\nI AM APPLES\n\n\n\n\n\nYou can import a file with functions and variables from a another module.\n\n\nYou can access the functions (methods) and variables from this other module.\n\n\nBoth files must be in the same directory, otherwise, specify the path as well.\n\n\n\n\n# %load ex40.py\ndef apple():\n\n    print \"I AM APPLES!\"\n\n# this is just a variable\ntangerine = \"Living reflection of a dream\"\n\napple()\n\n\n\n\n%run ex40.py\n\n\n\n\nI AM APPLES!\n\n\n\nimport ex40\n\nex40.apple()\n\nprint ex40.tangerine\n\n\n\n\nI AM APPLES!\nLiving reflection of a dream\n\n\n\nmystuff['new'] = ex40.tangerine\n\nprint mystuff['new']\n\n\n\n\nLiving reflection of a dream\n\n\n\nimport ex40\n\nthing = ex40\n\nthing.apple()\nprint thing.tangerine\n\n\n\n\nI AM APPLES!\nI AM APPLES!\nLiving reflection of a dream\n\n\n\n\n\nUse a class instead of an imported module.\n\n\nRemember: class method = class function.\n\n\n\n\nclass Song(object):\n\n\n    def __init__(self, lyrics): # instantiation and shortcut for a creating a variable\n        self.lyrics = lyrics # the variable could be equal to a text, a number or a variable\n\n    def sing_me_a_song(self): # create a class function\n        for line in self.lyrics:\n            print line\n\n\n# instance            \nhappy_bday = Song([\"Happy birthday to you\",\n                   \"I don't want to get sued\",\n                   \"So I'll stop right there\"])\n\n# instance\nbulls_on_parade = Song([\"They rally around tha family\",\n                        \"With pockets full of shells\"])\n\n# instance\nau_clair = Song([\"Au clair de la lune\",\n                 \"Mon ami Pierrot\",\n                 \"Prete-moi ta plume\",\n                 \"Pour ecrire un mot\"])\n\n# not an instance!!!\nfrere_jacques = [\"Frere Jacques (bis)\",\n                 \"Dormez-vous (bis)\",\n                 \"Sonnez les matines (bis)\",\n                 \"Ding-din-don (bis)\"]\n\n# instance\nfrere = Song([\"Frere Jacques (bis)\",\n              \"Dormez-vous (bis)\",\n              \"Sonnez les matines (bis)\",\n              \"Ding-din-don (bis)\"])\n\n\n# not a class function\ndef chante_moi(paroles): # create a function\n\n    for ligne in paroles:\n        print ligne\n\n\n\n\n\n\nInvoke an instance.\n\n\n\n\nhappy_bday.sing_me_a_song()\n\n\n\n\nHappy birthday to you\nI don't want to get sued\nSo I'll stop right there\n\n\n\n\n\nAgain.\n\n\n\n\nbulls_on_parade.sing_me_a_song()\n\n\n\n\nThey rally around tha family\nWith pockets full of shells\n\n\n\nWrite \ninstance.class function\n/\ninstance.class method\n\n\nau_clair.sing_me_a_song()\n\n\n\n\nAu clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot\n\n\n\n\n\nWrite the method the other around: \nClass.class_function()\n/\nClass.class_method()\n.\n\n\n\n\n#au_clair.sing_me_a_song()\nSong.sing_me_a_song(au_clair)\n\n\n\n\nAu clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot\n\n\n\n\n\nThis function is independent.\n\n\nfrere_jacques.chante_moi()\n can\u2019t be!!!\n\n\n\n\nchante_moi(frere_jacques)\n\n\n\n\nFrere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)\n\n\n\n\n\nIt looks like \nClass.class_function()\n/\nClass.class_method()\n\n\n\n\nSong.sing_me_a_song(frere)\n\n\n\n\nFrere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)\n\n\n\nExercise 41, Learning to Speak Object-Oriented\n\u00b6\n\n\n\n\nObject-oriented programming (oop).\n\n\nThe script below (\nex41.py\n) imports a word list from a text file (\nex41_words.txt\n).\n\n\nThe script is a drill for learning oop.\n\n\n\n\nimport random\nimport sys\n\n## WORD_URL = \"http://learncodethehardway.org/words.txt\" # read a file http://learncodethehardway.org/words.txt\nWORD_TXT = \"ex41_words.txt\"\nWORDS = []\n\n# dictionary {\"Python\": \"English\"}\nPHRASES = {\n    \"class %%%(%%%):\":\n        \"Make a class named %%% that is-a %%%.\",\n    \"class %%%(object):\\n\\tdef __init__(self, ***):\":\n        \"class %%% has-a __init__ that takes self and *** parameters.\",\n    \"class %%%(object):\\n\\tdef ***(self, @@@):\":\n        \"class %%% has-a function named *** that takes self and @@@ parameters.\",\n    \"*** = %%%()\":\n        \"Set *** to an instance of class %%%.\",\n    \"***.***(@@@)\":\n        \"From *** get the *** function, and call it with parameters self, @@@.\",\n    \"***.*** = '***'\":\n        \"From *** get the *** attribute and set it to '***'.\"\n}\n\n# do they want to drill phrases first\nif len(sys.argv) == 2 and sys.argv[1] == \"English\":\n    PHRASE_FIRST = True\nelse:\n    PHRASE_FIRST = False\n\n# load up the words from the website\n## for word in urlopen(WORD_URL).readlines():\nfor word in open(WORD_TXT, \"r\").readlines():\n    WORDS.append(word.strip())\n\ndef convert(snippet, phrase): # 'list comprehension', reseach on the Internet\n\n    class_names = [w.capitalize() for w in\n                    random.sample(WORDS, snippet.count(\"%%%\"))]\n    other_names = random.sample(WORDS, snippet.count(\"***\"))\n    results = []\n    param_names = []\n\n    for i in range(0, snippet.count(\"@@@\")):\n        param_count = random.randint(1,3)\n        param_names.append(', '.join(random.sample(WORDS, param_count)))\n\n    for sentence in snippet, phrase:\n        result = sentence[:]\n\n        # fake class names\n        for word in class_names:\n            result = result.replace(\"%%%\", word, 1)\n\n        # fake other names\n        for word in other_names:\n            result = result.replace(\"***\", word, 1)\n\n        # fake parameter lists\n        for word in param_names:\n            result = result.replace(\"@@@\", word, 1)\n\n        results.append(result)\n\n    return results\n\n# keep going until until they hit CTRL-D\ntry:\n    while True:\n        snippets = PHRASES.keys()\n        random.shuffle(snippets)\n\n        for snippet in snippets:\n            phrase = PHRASES[snippet]\n            question, answer = convert(snippet, phrase)\n            if PHRASE_FIRST:\n                question, answer = answer, question\n\n            print question\n\n            raw_input(\"> \")\n            print \"ANSWER: %s\\n\\n\" % answer\nexcept EOFError:\n    print \"\\nBye\"\n\n\n\n\nalarm.deer(disgust, brass)\n> deer is a Class alarm function that takes arguments digust and brass\nANSWER: From alarm get the deer function, and call it with parameters self, disgust, brass.\n\nclass Building(Blood):\n> etc\nANSWER: Make a class named Building that is-a Blood.\n\nbucket = Berry()\n\n\n\n\n\n\n\nSample of the original word list, 10 out of 503:\n\n\ntext\naccount\nachiever\nactor\naddition\nadjustment\nadvertisement\nadvice\naftermath\nagreement\nairplane\n\n\n\n\n\n\n\nSame script, but the list of word comes  from the Internet.\n\n\n\n\nA note on the script:\n\n\nThe use of constant variable such as WORD_URL (such variable should not be modified).\n\n\nA constant variable can be anything from a number, a string to a dictionary.\n\n\nThe use of \ntry/except\n pair to check for errors. It is similar to the pair \nif/else\n.\n\n\nTherea are several types of errors. \nEOFError\n is just one type. Consult other (or online) manuals to find out about all the types of errors.\n\n\n\n\n\n\n\n\nimport random\nfrom urllib import urlopen\nimport sys\n\nWORD_URL = \"http://learncodethehardway.org/words.txt\" # read a file\nWORDS = []\n\n# dictionary {\"Python\": \"English\"}\nPHRASES = {\n    \"class %%%(%%%):\":\n        \"Make a class named %%% that is-a %%%.\",\n    \"class %%%(object):\\n\\tdef __init__(self, ***)\":\n        \"class %%% has-a __init__ that takes self and *** parameters.\",\n    \"class %%%(object):\\n\\tdef ***(self, @@@)\":\n        \"class %%% has-a function named *** that takes self and @@@ parameters.\",\n    \"*** = %%%()\":\n        \"Set *** to an instance of class %%%.\",\n    \"***.***(@@@)\":\n        \"From *** get the *** function, and call it with parameters self, @@@.\",\n    \"***.*** = '***'\":\n        \"From *** get the *** attribute and set it to '***'.\"\n}\n\n# do they want to drill phrases first\nif len(sys.argv) == 2 and sys.argv[1] == \"English\":\n    PHRASE_FIRST = True\nelse:\n    PHRASE_FIRST = False\n\n# load up the words from the website\nfor word in urlopen(WORD_URL).readlines():\n    WORDS.append(word.strip())\n\ndef convert(snippet, phrase): # 'list comprehension', reseach on the Internet\n\n    class_names = [w.capitalize() for w in\n                    random.sample(WORDS, snippet.count(\"%%%\"))]\n    other_names = random.sample(WORDS, snippet.count(\"***\"))\n    results = []\n    param_names = []\n\n    for i in range(0, snippet.count(\"@@@\")):\n        param_count = random.randint(1,3)\n        param_names.append(', '.join(random.sample(WORDS, param_count)))\n\n    for sentence in snippet, phrase:\n        result = sentence[:]\n\n        # fake class names\n        for word in class_names:\n            result = result.replace(\"%%%\", word, 1)\n\n        # fake other names\n        for word in other_names:\n            result = result.replace(\"***\", word, 1)\n\n        # fake parameter lists\n        for word in param_names:\n            result = result.replace(\"@@@\", word, 1)\n\n        results.append(result)\n\n    return results\n\n# keep going until until they hit CTRL-D\ntry:\n    while True:\n        snippets = PHRASES.keys()\n        random.shuffle(snippets)\n\n        for snippet in snippets:\n            phrase = PHRASES[snippet]\n            question, answer = convert(snippet, phrase)\n            if PHRASE_FIRST:\n                question, answer = answer, question\n\n            print question\n\n            raw_input(\"> \")\n            print \"ANSWER: %s\\n\\n\" % answer\nexcept EOFError:\n    print \"\\nBye\"\n\n\n\n\nExercise 42, Is-A, Has-A, Objects, and Classes\n\u00b6\n\n\n\n\nThis exercise explains Exercise 41.\n\n\n\n\nInheritance:\n\n\n\n\nis-a.\n\n\nobject.\n\n\ninstance of an object.\n\n\nobject of object.\n\n\n\n\n\n\nhas-a.\n\n\nattribute.\n\n\nnot attribute.\n\n\nobject.\n\n\n\n\n\n\n\n\n\n\n\n\nAnimal is-a object.\n\n\n\n\n\n\nclass Animal(object):\n\n\n    pass\n\n\n\n\n\n\nDog is-a Animal, Animal is-a object.\n\n\n\n\nclass Dog(Animal):\n\n\n    def __init__(self, name):\n\n    ## Cat has-a name\n        self.name = name\n\n\n\n\n\n\nCat is-a Animal, Animal is-a object.\n\n\n\n\nclass Cat(Animal):\n\n\n    def __init__(self, name):\n    ## Cat has-a name\n        self.name = name\n\n\n\n\n\n\n\nPerson is-a object.\n\n\n\n\nclass Person(object):\n\n\n    def __init__(self, name):\n\n    ## Person has-a name\n        self.name = name\n\n    ## Person has-a pet of some kind, but the pet is specifies elsewhere...\n        self.pet = None\n\n\n\n\n\n\nEmployee is-a Person, Person is-a object.\n\n\n\n\nclass Employee(Person):\n\n\n    def __init__(self, name, salary):\n\n    ## Employee has-a name, because Person has-a name\n    ## super:\n        super(Employee, self).__init__(name)\n    ## Employee has-a salary\n        self.salary = salary\n\n\n\n\n\n\n\nFish is-a object.\n\n\n\n\nclass Fish(object):\n\n\n    ## no attributes like has-a name\n    pass\n\n\n\n\n\n\nSalmon is-a Fish, Fish is-a object.\n\n\n\n\nclass Salmon(Fish):\n\n\n    ## no attributes like has-a name\n    pass\n\n\n\n\n\n\nHalibut is-a Fish, Fish is-a object.\n\n\n\n\nclass Halibut(Fish):\n\n\n    ## no attributes like has-a name\n    pass\n\n\n\n\n\n\n\nrover is-a instance of name, Dog has-a name.\n\n\n\n\nrover = Dog(\"Rover\")\n\n\n\n\n\n\nsatan is-a instance of name, Cat has-a name.\n\n\n\n\nsatan = Cat(\"Satan\")\n\n\n\n\n\n\nmary is-a instance of name, Person has-a name.\n\n\n\n\nmary = Person(\"Mary\")\n\n\n\n\n\n\nmary has-a Cat, Cat has-a name, satan, is-a Cat.\n\n\n\n\nmary.pet = satan\n\n\n\n\n\n\nfrank is-a instance of name, salary, Employee has-a name, salary.\n\n\n\n\nfrank = Employee(\"Frank\", 120000)\n\n\n\n\n\n\nfrank has-a Dog, Dog has-a name, rover, is-a Dog.\n\n\n\n\nfrank.pet = rover\n\n\n\n\n\n\nflipper is-a instance of Fish, Fish is-a object, both has-a not attributes.\n\n\n\n\nflipper = Fish()\n\n\n\n\n\n\ncrouse is-a instance of Salmon, Salmon is-a Fish; both has-a not attribute.\n\n\n\n\ncrouse = Salmon()\n\n\n\n\n\n\nharry is-a instance of Halibut, Halibut is-a Fish; both has-a not attribute.\n\n\n\n\nharry = Halibut()\n\n\n\n\n\n\nWrap-up.\n\n\n\n\nobject\n    class Fish(object)\n        class Salmon(Fish)\n            crouse = Salmon()\n        class Halibut(Fish)\n            harry = Halibut()\n        flipper = Fish()\n    class Animal(object)\n        class Dog(Animal)\n            rover = Dog(\"Rover\") has-a name\n        class Cat(Animal)\n            satan = Cat(\"Satan\") has-a name\n    class Person(object)\n        mary.pet = satan has-a name, pet\n        class Employee(Person)\n            frank = Employee (\"Frank\", 120000) has-a name, salary\n            frank.pet = rover has-a pet\n\n\n\n\n\n\nThe concept of inheritance, and those of implicit inheritance, overridden inheritance, multiple inheritance, composition, alteration, super objects (or \u2018reinheritance\u2019) are explained in Exercise 44.\n\n\n\n\nExercise 43, Gothons from Planet Percal #25\n\u00b6\n\n\nThis Exercise is the first to prepare the final project (Exercise 52, the last chapter). Let\u2019s create a game, from A to Z. First, start by planning. This methodology is valuable for planning any kind of project or program.\n\n\nMethodology\n\n\n1- Write about the problem:\n\n\n\u201cAliens have invaded a space ship and our hero has to go through a maze of rooms defeating them so he can escape into an escape pod to the planet below. The game will be more like a Zork or Adventure type game with text outputs and funny ways to die. The game will involve an engine that runs a map full of rooms or scenes. Each room will print its own description when the player enters it and then tell the engine what room to run next out of the map.\u201d\n\n\n2- Describe each scene:\n\n\n\n\nDeath\n\n\nThis is when the player dies and should be something funny.\n\n\n\n\n\n\nCentral Corridor\n\n\nThis is the starting point and has a Gothon already standing there they have to defeat with a joke before continuing.\n\n\n\n\n\n\nLaser Weapon Armory\n\n\nThis is where the hero gets a neutron bomb to blow up the ship before getting to the escape pod. It has a keypad the hero has to guess the number for.\n\n\n\n\n\n\nThe Bridge\n\n\nAnother battle scene with a Gothon where the hero places the bomb.\n\n\n\n\n\n\nEscape Pod\n\n\nWhere the hero escapes but only after guessing the right escape pod. \n\n\n\n\n\n\n\n\n3- Draw a map, write more descriptions.\n\n\n4- Extract key concepts:\n\n\n\n\n1 concept = 1 class.\n\n\nResearch them, deepen things.\n\n\nNouns = concepts = classes:\n\n\nAlien\n\n\nPlayer\n\n\nShip\n\n\nMaze\n\n\nRoom\n\n\nScene\n\n\nGothon\n\n\nEscape Pod\n\n\nPlanet\n\n\nMap\n\n\nEngine\n\n\nDeath\n\n\nCentral Corridor\n\n\nLaser Weapon Armory\n\n\nThe Bridge\n\n\n\n\n\n\nVerbs = functions.\n\n\n\n\nThis is par the PEP: classes should be in an explicit noun startin with a uppercased letter such as \nclass Central Corridor()\n. Functions should be verbs such as \ndef play():\n.\n\n\n5- Create a class Hierarchy and object Map\n\n\n\n\nMake a class Hierarchy:\n\n\nMap\n\n\nEngine\n\n\nScene\n\n\nDeath\n\n\nCentral Corridor\n\n\nLaser Weapon Armory\n\n\nThe Bridge\n\n\nEscape Pod\n\n\n\n\n\n\n\n\nPEP: I know from the description I\u2019m going to need a way to \u2018run\u2019 the engine, \u2018get the next scene\u2019 from the map, get the \u2018opening scene\u2019, and \u2018enter\u2019 a scene. I\u2019ll add those like this:\n\n\n\n\nMap\n\n\nnext_scene\n\n\nopening_scene\n\n\nEngine\n\n\nplay\n\n\nScene\n\n\nenter\n\n\nDeath\n\n\nCentral Corridor\n\n\nLaser Weapon Armory\n\n\nThe Bridge\n\n\nEscape Pod\n\n\n\n\nAll the scenes under another scene will inherit it; except \u2018enter\u2019: override it later.\n\n\n6- Code the Classes and a Test to Run Them:\n\n\n\n\nTurn:\n\n\n\n\n- Map\n    - next_scene (verb)\n    - opening scene (verb)\n- Engine\n    - play (verb)\n- Scene\n    - enter (verb)\n    - Death\n    - Central Corridor\n    - Laser Weapon Armory\n    - The Bridge\n    - Escape Pod\n\n\n\n\n\n\nInto:\n\n\n\n\nclass Map(object): \n    def __init__(self, start_scene):\n    def next_scene(self, start_scene):    \n    def opening_scene(self):\n\nclass Engine(object): \n    def __init__(self, scene_map):\n    def play(self):\n\nclass Scene(object):\n    def enter(self):\n\n    class CentralCorridor(Scene):\n        def enter(self):\n    class LaserWeaponArmory(Scene):\n        def enter(self):\n    class TheBridge(Scene):\n        def enter(self):\n    class EscapePod(Scene):\n        def enter(self):\n    class Death(Scene):\n        def enter(self):\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()\n\n\n\n\n\n\nInto:\n\n\n\n\nclass Scene(object):\n\n    def enter(self):\n        pass\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map):\n        pass\n    def play(self):\n        pass\n\n\nclass Death(Scene):\n\n    def enter(self):\n        pass\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self):\n        pass\n\n\n    def enter(self):\n        pass\n\n\nclass TheBridge(Scene):\n    def enter(self):\n        pass\n\n\nclass EscapePod(Scene):\n\n    def enter(self):\n        pass\n\n\nclass Map(object):\n\n    def __init__(self, start_scene):\n        pass\n    def next_scene(self, scene_name):\n        pass\n    def opening_scene(self):\n        pass\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()\n\n\n\n\n\n\nStart coding (first code skeleton).\n\n\n\n\nclass Scene(object):\n\n\n    def enter(self):\n\n        pass\n\nclass Engine(object):\n\n\n    def __init__(self, scene_map):\n\n        pass\n\n    def play(self):\n\n        pass\n\n\nclass Death(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass CentralCorridor(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass LaserWeaponArmory(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass TheBridge(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass EscapePod(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass Map(object):\n\n\n    def __init__(self, start_scene):\n\n        pass\n\n    def next_scene(self, scene_name):\n\n        pass\n\n    def opening_scene(self):\n\n        pass\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()\n\n\n\n\n\n\nImprove the code.\n\n\n\n\n# import two functions from two libraries\nfrom sys import exit\nfrom random import randint\n\n# class to generate child classes\nclass Scene(object):\n\n    def enter(self):\n\n        print \"This scene is not yet configured. Subclass it and implement enter().\"\n        exit(1)\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map):\n\n        self.scene_map = scene_map\n\n    def play(self):\n\n        current_scene = self.scene_map.opening_scene() # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below\n\n        last_scene = self.scene_map.next_scene('finished') # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below\n\n        while current_scene != last_scene:\n\n            next_scene_name = current_scene.enter() # function/method from class Scene(object) above\n\n            current_scene = self.scene_map.next_scene(next_scene_name) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object)\n\n        current_scene.enter() # use newly-created current_scene with function/method from class Scene(object) above\n\n\nclass Death(Scene):\n\n    quips = [\"You died.  You kinda suck at this.\", \"Your mom would be proud...if she were smarter.\", \"Such a louser.\", \"I have a small puppy that's better at this.\"] # a list (variable) where a random method will extract an element\n\n    def enter(self):\n\n        print Death.quips[randint(0, len(self.quips)-1)] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list)\n        exit(1)\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"The Gothons of Planet Percal #25 have invaded your ship and destroyed\"\n        print \"your entire crew.  You are the last surviving member and your last\"\n        print \"mission is to get the neutron destruct bomb from the Weapons Armory,\"\n        print \"put it in the bridge, and blow the ship up after getting into an \"\n        print \"escape pod.\"\n        print \"\\n\"\n        print \"You're running down the central corridor to the Weapons Armory when\"\n        print \"a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume\"\n        print \"flowing around his hate filled body.  He's blocking the door to the\"\n        print \"Armory and about to pull a weapon to blast you.\"\n\n        action = raw_input(\"shoot!/dodge!/tell a joke> \") \n\n        if action == \"shoot!\":\n            print \"Quick on the draw you yank out your blaster and fire it at the Gothon.\"\n            print \"His clown costume is flowing and moving around his body, which throws\"\n            print \"off your aim.  Your laser hits his costume but misses him entirely.  This\"\n            print \"completely ruins his brand new costume his mother bought him, which\"\n            print \"makes him fly into an insane rage and blast you repeatedly in the face until\"\n            print \"you are dead.  Then he eats you.\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \"dodge!\":\n            print \"Like a world class boxer you dodge, weave, slip and slide right\"\n            print \"as the Gothon's blaster cranks a laser past your head.\"\n            print \"In the middle of your artful dodge your foot slips and you\"\n            print \"bang your head on the metal wall and pass out.\"\n            print \"You wake up shortly after only to die as the Gothon stomps on\"\n            print \"your head and eats you.\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \"tell a joke\":\n            print \"Lucky for you they made you learn Gothon insults in the academy.\"\n            print \"You tell the one Gothon joke you know:\"\n            print \"Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr.\"\n            print \"The Gothon stops, tries not to laugh, then busts out laughing and can't move.\"\n            print \"While he's laughing you run up and shoot him square in the head\"\n            print \"putting him down, then jump through the Weapon Armory door.\"\n            return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        else:\n            print \"DOES NOT COMPUTE!\"\n            return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass LaserWeaponArmory(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"You do a dive roll into the Weapon Armory, crouch and scan the room\"\n        print \"for more Gothons that might be hiding.  It's dead quiet, too quiet.\"\n        print \"You stand up and run to the far side of the room and find the\"\n        print \"neutron bomb in its container.  There's a keypad lock on the box\"\n        print \"and you need the code to get the bomb out.  If you get the code\"\n        print \"wrong 10 times then the lock closes forever and you can't\"\n        print \"get the bomb.  The code is 3 digits.\"\n        code = \"%d%d%d\" %(1,2,3) #% (randint(1,9), randint(1,9), randint(1,9))\n        guess = raw_input(\"[keypad]> \")\n        guesses = 0\n\n        while guess != code and guesses < 10:\n            print \"BZZZZEDDD!\"\n            guesses += 1\n            guess = raw_input(\"[keypad]> \")\n\n        if guess == code:\n            print \"The container clicks open and the seal breaks, letting gas out.\"\n            print \"You grab the neutron bomb and run as fast as you can to the\"\n            print \"bridge where you must place it in the right spot.\"\n            return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \"The lock buzzes one last time and then you hear a sickening\"\n            print \"melting sound as the mechanism is fused together.\"\n            print \"You decide to sit there, and finally the Gothons blow up the\"\n            print \"ship from their ship and you die.\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass TheBridge(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"You burst onto the Bridge with the netron destruct bomb\"\n        print \"under your arm and surprise 5 Gothons who are trying to\"\n        print \"take control of the ship.  Each of them has an even uglier\"\n        print \"clown costume than the last.  They haven't pulled their\"\n        print \"weapons out yet, as they see the active bomb under your\"\n        print \"arm and don't want to set it off.\"\n\n        action = raw_input(\"throw the bomb/slowly place the bomb> \")\n\n        if action == \"throw the bomb\":\n            print \"In a panic you throw the bomb at the group of Gothons\"\n            print \"and make a leap for the door.  Right as you drop it a\"\n            print \"Gothon shoots you right in the back killing you.\"\n            print \"As you die you see another Gothon frantically try to disarm\"\n            print \"the bomb. You die knowing they will probably blow up when\"\n            print \"it goes off.\"\n            return 'death'\n\n        elif action == \"slowly place the bomb\":\n            print \"You point your blaster at the bomb under your arm\"\n            print \"and the Gothons put their hands up and start to sweat.\"\n            print \"You inch backward to the door, open it, and then carefully\"\n            print \"place the bomb on the floor, pointing your blaster at it.\"\n            print \"You then jump back through the door, punch the close button\"\n            print \"and blast the lock so the Gothons can't get out.\"\n            print \"Now that the bomb is placed you run to the escape pod to\"\n            print \"get off this tin can.\"\n            return 'escape_pod'\n        else:\n            print \"DOES NOT COMPUTE!\"\n            return \"the_bridge\" # input for class Map(object)'s dictionary of key:value; extract a function from another class    \n\n\nclass EscapePod(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"You rush through the ship desperately trying to make it to\"\n        print \"the escape pod before the whole ship explodes.  It seems like\"\n        print \"hardly any Gothons are on the ship, so your run is clear of\"\n        print \"interference.  You get to the chamber with the escape pods, and\"\n        print \"now need to pick one to take.  Some of them could be damaged\"\n        print \"but you don't have time to look.  There's 5 pods, which one\"\n        print \"do you take?\"\n\n        good_pod = 1#randint(1,5)\n        guess = raw_input(\"[pod #]> \")\n\n        if int(guess) != good_pod:\n            print \"You jump into pod %s and hit the eject button.\" % guess\n            print \"The pod escapes out into the void of space, then\"\n            print \"implodes as the hull ruptures, crushing your body\"\n            print \"into jam jelly.\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \"You jump into pod %s and hit the eject button.\" % guess\n            print \"The pod easily slides out into space heading to\"\n            print \"the planet below.  As it flies to the planet, you look\"\n            print \"back and see your ship implode then explode like a\"\n            print \"bright star, taking out the Gothon ship at the same\"\n            print \"time.  You won!\"\n            return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Finished(Scene):\n\n    def enter(self):\n\n        print \"You won! Good job.\"\n        return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Map(object):\n\n    scenes = {\n        'central_corridor': CentralCorridor(),\n        'laser_weapon_armory': LaserWeaponArmory(),\n        'the_bridge': TheBridge(),\n        'escape_pod': EscapePod(),\n        'death': Death(),\n        'finished': Finished(),\n    }\n\n    def __init__(self, start_scene):\n\n        self.start_scene = start_scene\n\n    def next_scene(self, scene_name):\n\n        val = Map.scenes.get(scene_name)\n        return val\n\n    def opening_scene(self):\n\n        return self.next_scene(self.start_scene)\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()\n\n\n\n\n\n\nImprove\u2026\n\n\n\n\n# import two functions from two libraries\nfrom sys import exit\nfrom random import randint\nimport time\nimport math\n\n# class to generate child classes\nclass Scene(object):\n\n    def enter(self):\n\n        print \"This scene is not yet configured. Subclass it and implement enter().\"\n        exit(1)\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map, hero):\n\n        self.scene_map = scene_map\n        self.hero = hero\n\n    def play(self):\n\n        current_scene = self.scene_map.opening_scene() # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below\n\n        last_scene = self.scene_map.next_scene('finished') # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below\n\n        while current_scene != last_scene: # True:\n            print \"\\n----------\"\n            next_scene_name = current_scene.enter(self.hero) # function/method from class Scene(object) above\n\n            current_scene = self.scene_map.next_scene(next_scene_name) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object)\n\n        current_scene.enter() # use newly-created current_scene with function/method from class Scene(object) above\n\n\nclass Death(Scene):\n\n    quips = [\"Death1\", \"Death2\", \"Death3\", \"Death4\"] # a list (variable) where a random method will extract an element\n\n    def enter(self, hero):\n\n        print Death.quips[randint(0, len(self.quips)-1)] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list)\n        exit(1)\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"Enter. Select.\"\n        action = raw_input(\"Pick one: a/b/c> \").upper() \n\n        if action == \"A\":\n            print \"Ouch!\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \"B\":\n            print \"Aye!\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \"C\":\n            print \"Good.\"\n            return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        else:\n            print \"DOES NOT COMPUTE!\"\n            return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass LaserWeaponArmory(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"Pick a 3-digit combinaison.\"\n        code = \"%d%d%d\" %(1,2,3) #% (randint(1,9), randint(1,9), randint(1,9))\n        print code\n        guess = raw_input(\"[keypad]> \")\n        guesses = 0\n\n        while guess != code and guesses < 10:\n            print \"BZZZZEDDD!\"\n            guesses += 1\n            guess = raw_input(\"[keypad]> \")\n\n        if guess == code:\n            print \"Click! Go!\"\n            return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \"Boom!\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass TheBridge(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"Bridge enigma.\"\n\n        action = raw_input(\"true/false> \").upper()\n\n        if action == \"TRUE\" or action == \"T\":\n            print \"It goes off.\"\n            return 'death'\n\n        elif action == \"FALSE\" or action == \"F\":\n            print \"Escape.\"\n            return 'escape_pod'\n        else:\n            print \"DOES NOT COMPUTE!\"\n            return \"the_bridge\" # input for class Map(object)'s dictionary of key:value; extract a function from another class    \n\n\nclass EscapePod(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"You rush!\"\n\n        good_pod = 1 #randint(1,5)\n        guess = raw_input(\"[Pick a pod #]> \")\n\n        if int(guess) != good_pod:\n            print \"Oups!\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \"Good choice!\"\n            return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Win(Scene):\n\n    def enter(self, hero):\n        print \"You won! Good job.\"\n        return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        # exit(0)\n\n\nclass Final(Scene):\n\n    def enter(self, hero)\n\n        monster = Monster(\"Gothon\")\n        print \"%s, You now came across the final boss %s! Let's fight!!!\" % (hero.name, monster.name)\n        a_combat = Combat()\n        next_stage = a_combat.combat(hero, monster)\n        return next_stage\n\n\nclass Combat(object):\n\n    def combat(self, hero, monster): #combat between two roles\n\n        round = 1\n        while True:\n            print '='*30\n            print 'round %d' % round\n            print '='*30\n            print \"Your HP: %d\" % hero.hp\n            print \"%s's HP: %d\" % (monster.name, monster.hp)\n            print 'Which action do you want to take?'\n            print '-'*10\n            print '1) attack - Attack the enemy'\n            print '2) defend - Defend from being attacked, also will recover a bit'\n\n            try:\n                action = int(raw_input('> '))\n            except ValueError:\n                print \"Please enter a number!!\"\n                continue\n\n            # defending should be done before attacking\n            if action == 2:\n                hero.defend()\n\n            # action of monster, 1/5 possibility it will defends\n            monster_action = randint(1, 6)\n            if monster_action == 5:\n                monster.defend()\n\n            if action == 1:\n                hero.attack(monster)\n            elif action == 2:\n                pass\n            else:\n                print \"No such action!\"\n\n            if monster_action < 5:\n                monster.attack(hero)\n\n            # whether win or die\n            if hero.hp <= 0:\n                return 'death'\n\n            if monster.hp <= 0:\n                return 'win'\n\n            hero.rest()\n            monster.rest()\n\n            round += 1\n\n\nclass Map(object):\n\n    scenes = {\n        'central_corridor': CentralCorridor(),\n        'laser_weapon_armory': LaserWeaponArmory(),\n        'the_bridge': TheBridge(),\n        'escape_pod': EscapePod(),\n        'death': Death(),\n        'final_fight': Final(),\n        'win': Win(),\n        'finished': Finished(),\n    }\n\n    def __init__(self, start_scene):\n\n        self.start_scene = start_scene\n\n    def next_scene(self, scene_name):\n\n        val = Map.scenes.get(scene_name)\n        return val\n\n    def opening_scene(self):\n\n        return self.next_scene(self.start_scene)\n\n\nclass human(object):\n\n    defending = 0\n\n    def __init__(self, name):\n\n        self.name = name\n\n    def attack(self, target): # attack the target\n\n        percent = 0\n        time.sleep(1)\n        if target.defending == 1:\n            percent = float(self.power) / 10.0 + randint(0, 10)\n            target.hp = math.floor(target.hp - percent)\n        else:\n            percent = float(self.power) / 5.0 + randint(0, 10)\n            target.hp = math.floor(target.hp - percent)\n        print \"%s attack %s. %s's HP decreased by %d points.\" % (self.name, target.name, target.name, percent)\n\n    def defend(self): # be in the defending state\n\n        self.defending = 1\n        print \"%s is trying to defend.\" % self.name\n\n    def rest(self): # recover a bit after each round\n\n        if self.defending == 1:\n            percent = self.rate * 10 + randint(0, 10)\n        else:\n            percent = self.rate * 2 + randint(0, 10)\n        self.hp += percent\n        print \"%s's HP increased by %d after rest.\" % (self.name, percent)\n        self.defending = 0\n\n\nclass Hero(Human): # class for hero\n\n    hp = 1000\n    power = 200\n    rate = 5\n\n\nclass Monster(Human): # class for monster\n\n    hp = 5000\n    power = 250\n    rate = 5\n\n\na_map = Map('central_corridor')\na_hero = Hero('Joe')\na_game = Engine(a_map)\na_game.play()\n\n\n\n\nWrap up\n\u00b6\n\n\n\n\nDraw a mindmap.\n\n\nDraw a flowchart.\n\n\nList all variables, data, other objects and add comments.\n\n\nBuild the modules (classes) and embed the primal code.\n\n\nRefine.\n\n\nUse a visualizing software.\n\n\n\n\nExercise 44, Inheritance vs Composition\n\u00b6\n\n\nFrom the manual.\n\n\nWhen to Use Inheritance or Composition\n\u00b6\n\n\nThe question of \u2018inheritance versus composition\u2019 comes down to an attempt to solve the problem of reusable code. \n\n\nYou don\u2019t want to have duplicated code all over your software, since that\u2019s not clean and efficient. \n\n\n\n\nInheritance: solves this problem by creating a mechanism for you to have implied features in base classes.\n\n\nComposition: solves this by giving you modules and the ability to call functions in other classes.\n\n\n\n\nIf both solutions solve the problem of reuse, then which one is appropriate in which situations? The answer is incredibly subjective, but I\u2019ll give you my three guidelines for when to do which:\n\n\n\n\nAvoid multiple Inheritance at all costs, as it\u2019s too complex to be reliable. If you\u2019re stuck with it, then be prepared to know the class hierarchy and spend time finding where everything is coming from.\n\n\nUse Composition to package code into modules that are used in many different unrelated places and situations.\n\n\nUse Inheritance only when there are clearly related reusable pieces of code that fit under a single common concept or if you have to because of something you\u2019re using.\n\n\n\n\nThe thing to remember about object-oriented programming is that it is entirely a social convention programmers have created to package and share code. In that case, find out how they use things and then just adapt to the situation.\n\n\nFunction Style\n\u00b6\n\n\n pep\n\n\nFunction = Method.\n\n\nA class does things: name it as if it\u2019s a command you are giving to the class. Same as \npop\n is saying \u2018pop this off the list\u2019.\n\n\nKeep functions small and simple (PEP).\n\n\nClass Style\n\n\n\n\nUse the camel case: \nSuperGoldFactory\n.\n\n\nMinimize what \n__init__\n does. It should be simple to use.\n\n\nOther class functions use the underscore format: \nmy_awesome_hair\n.\n\n\nBe consistent in how you organize your function arguments. Function 1 takes \n(dog, cat, user)\n, function 2 should take \n(dog, cat, user)\n. Unless there is a good reason.\n\n\nVariable should be self-contained. Limit importing from modules or globals.\n\n\nAlways have a class \nName(object)\n on top of all.\n\n\n\n\nCode Style\n\n\n\n\nGive your code vertical space to read.\n\n\nRead you code out loud to test it. Change the difficult passages to improve readibility.\n\n\nImitate other coders: find you style.\n\n\nRespect others\u2019s style; be a team player.\n\n\n\n\nGood Comments\n\n\n\n\nDescribe why you are doing doing what you are doing.\n\n\nWrite for the others.\n\n\nWrite sentences.\n\n\nAvoid clutering the code though. Short sentences, to the point.\n\n\nReview your comments.\n\n\n\n\nComposition\n\u00b6\n\n\nIn this code I\u2019m not using the name Parent, since there is not a parent-child is-a relationship. This is a has-a relationship, where Child has-a Other that it uses to get its work done. \n\n\nclass Other(object):\n\n    def implicit(self):\n\n        print \"OTHER implicit()\"\n\n    def override(self):\n\n        print \"OTHER override()\"\n\n    def altered(self):\n\n        print \"OTHER altered()\"\n\n\nclass Child(object):\n\n    def __init__(self):\n\n        self.other = Other() # initialize this class with Other(), when an instance is created, it will inherit the class member variables, class functions...\n\n    def implicit(self):\n\n        self.other.implicit() # call the other class function \n\n    def override(self):\n\n        print \"CHILD override()\"\n\n    def altered(self):\n\n        print \"CHILD, BEFORE OTHER altered()\"\n        self.other.altered() # call the other class function\n        print \"CHILD, AFTER OTHER altered()\"\n\n\nson = Child() # instance\n\nson.implicit()\nson.override()\nson.altered()\n\n\n\n\nImplicit Inheritance\n\u00b6\n\n\nActions on the child imply an action on the parent.\n\n\nThe use of pass under the \nclass Child:\n is how you tell Python that you want an empty block. This creates a class named \nChild\n but says that there\u2019s nothing new to define in it. Instead it will inherit all of its behavior from \nParent\n.\n\n\nIf you put functions in a base class (i.e., \nParent\n) then all subclasses (i.e., \nChild\n) will automatically get those features. Very handy for repetitive code you need in many classes.\n\n\nclass Parent(object):\n\n    def implicit(self):\n\n        print \"PARENT implicit()\"\n\n\nclass Child(Parent):\n\n    pass\n\n\ndad = Parent()\nson = Child()\n\n\n\n\nInherit from both Classes\n\u00b6\n\n\nPython has to look-up the possible function in the class hierarchy for both \nChild\n and \nBadStuff\n, but it needs to do this in a consistent order. To do this Python uses \u201cmethod resolution order\u201d (MRO) and an algorithm called C3 to get it straight.\n\n\nBecause the MRO is complex and a well-defined algorithm is used, Python can\u2019t leave it to you to get the MRO right. Instead, Python gives you the \nsuper()\n function, which handles all of this for you in the places that you need the altering type of actions as I did in Child.altered. With \nsuper()\n you don\u2019t have to worry about getting this right, and Python will find the right function for you.\n\n\nclass SuperFun(Child, BadStuff):\n\n    pass\n\n\n\n\nOverride Explicitly\n\u00b6\n\n\nActions on the child override the action on the parent.\n\n\nAs you can see, it runs the \nParent.override\n function because that variable (dad) is a Parent. But it also runs  \nChild.override\n messages because son is an instance of \nChild\n and \nChild\n overrides that function by defining its own version.\n\n\nclass Parent(object):\n\n    def override(self):\n        print \"PARENT override()\"\n\n\nclass Child(Parent):\n\n    def override(self):\n\n        print \"CHILD override()\"\n\n\ndad = Parent()\nson = Child()\n\ndad.override()\nson.override()\n\n\n\n\nAlter Before or After\n\u00b6\n\n\nActions on the child alter the action on the parent.\n\n\nson.altered()\n overrides Parent.altered the \nChild.altered\n version runs, and line 9 executes like you\u2019d expect. In this case I want to do a before and after, I want to use super to get the \nParent.altered\n version. I call \nsuper(Child, self).altered()\n, which is aware of inheritance and will get the \nParent\n class for you. You should be able to read this as \u201ccall super with arguments \nChild\n and \nself\n, then call the function altered on whatever it returns.\u201d At this point, the \nParent.altered\n version of the function runs, and that prints out the Parent message. Finally, this returns from the \nParent.altered\n and the \nChild.altered\n function continues to print out the after message.\n\n\nclass Parent(object):\n\n    def altered(self):\n\n        print \"PARENT altered()\"\n\nclass Child(Parent):\n\n    def altered(self):\n\n        print \"CHILD, BEFORE PARENT altered()\"\n        super(Child, self).altered()\n        print \"CHILD, AFTER PARENT altered()\"\n\n\ndad = Parent()\nson = Child()\n\ndad.altered()\nson.altered()\n\n\n\n\nSuper\n\u00b6\n\n\nWith \nsuper\n, \nChild\n reinherit from the \nParent\n.\n\n\nThe most common use of \nsuper()\n is actually in \n__init__\n functions in base classes. Then additional class functions.\n\n\nclass Child(Parent):\n\n    def __init__(self, stuff):\n\n        self.stuff = stuff\n        super(Child, self).__init__()\n\n\n\n\nAll Three Combined\n\u00b6\n\n\nclass Parent(object):\n\n    def override(self):\n\n        print \"PARENT override()\"\n\n    def implicit(self):\n\n        print \"PARENT implicit()\"\n\n    def altered(self):\n\n        print \"PARENT altered()\"\n\n\nclass Child(Parent):\n\n    def override(self):\n\n        print \"CHILD override()\"\n\n    def altered(self):\n\n        print \"CHILD, BEFORE PARENT altered()\"\n        super(Child, self).altered()\n        print \"CHILD, AFTER PARENT altered()\"\n\n\ndad = Parent()\nson = Child()\n\ndad.implicit()\nson.implicit()\n\ndad.override()\nson.override()\n\ndad.altered()\nson.altered()\n\n\n\n\nExercise 45, You Make a Game\n\u00b6\n\n\nUse an existing project, Exercise 43 for example, and adapt it. This is a first draft for a project\u2026\n\n\n1\n\n\nStoryboarding tool.\n\n\nCreate a program that would question the user on its data and advise him on what would be the best graphics to use. Frame by frame, the user could build a presentation knowing slide 1 should be a histogram, slide 2 a scatter plot, etc. \n\n\n2\n\n\n\n\nMap\n\n\nnext_graph\n\n\nopening comment (verb)\n\n\n\n\n\n\nEngine\n\n\nchoose (verb)\n\n\n\n\n\n\n\n\nGraph\n\n\n\n\nproceed (verb)\n\n\nCC pie\n\n\nIC bar\n\n\nTSC column, line\n\n\nFDC column, line\n\n\nCorC bar, dot\n\n\n\n\n\n\n\n\nopening comment\n\n\n\n\ngeneral comment\n\n\nstorytelling\n\n\npie\n\n\ncompare data, y, n\n\n\ny, stacked bar chart\n\n\nn, pie chart with a maximum of 6 items\n\n\n\n\n\n\nbar\n\n\nsimple series of data or items: h deviation bar chart (tornado), divide A from B (winners from losers, good markets from bad markets): h deviation bar chart (tornado), mix of two components (portfolio A items vs portfolio B items):sliding h bar chart, high-low spreads:range h bar chart, correlation x1 and x2 with y (two products, two markets\u2026 with): paired bar chart, compare aspects (with or without discount, red or blue paint):group h bar chart, components of the total: subdivided h bar chart\u2026\n\n\n\n\n\n\ncolumn\n\n\np.37, 42\n\n\n\n\n\n\nline\n\n\np.39, 44-45\n\n\n\n\n\n\nsurface\n\n\np. 40\n\n\n\n\n\n\ndot\n\n\np.49\n\n\n\n\n\n\n\n\n3\n\n\n\n\nCreate module \n3graph_story\n (proof of concept).\n\n\nThe module presents a story in 3 graphs, according to 3 sets of data.\n\n\n\n\nclass Map(object):\n    def __init__(self,start):\n    def next(self, start):\n    def opening(self):\n\nclass Engine(object):\n    def __init__(self,graph_map):\n    def choose(self):\n\nclass Graph(object):\n    def proceed(self):\n\n    class 1CC(Graph):\n        def enter(self)\n            pie\n    class 2IC(Graph):\n        def enter(self):\n            bar\n    class 3TSC(Graph):\n        def enter(self):\n            column\n            line\n    class 4FDC(Graph):\n        def enter(self):\n            column\n            line\n    class 5CorC(Graph):\n        def enter(self):\n            bar\n            dot\n\n\n\n\nAnd so on. Consult the manual to find out more\n\n\nExercise 46, A Project Skeleton\n\u00b6\n\n\n\n\nThe \u2018skeleton\u2019 directory (see below) or the directory framework will have all the basics you need to get a new project up and running. \n\n\nIt will have your project layout, automated tests, modules, and install scripts.\n\n\n\n\n\\:.\n\u251c\u2500\u2500\u2500bin\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500docs\n\u251c\u2500\u2500\u2500NAME\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500tests\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u2514\u2500\u2500\u2500setup.py   \n\n\n\n\n\n\n\\:.\n is the project parent directory or simply \u2018the\u2019 directory (its name is the project\u2019s name).\n\n\nThe directory is the place to be when launching scripts.\n\n\nbin\n is the main sub-directory. It contains the main script (\npython bin/main.py\n) for launching other scripts in the project; and launching tests as well. These script are often located in other sub-directories.\n\n\nA sub-directory must be executable to import a module from it or execute a script in it: add an empty script called \n__init__.py\n.\n\n\nWhen a script is executed, it is compiled. Another script, with the extension \n.pyc\n, appears. Same as for \n__init__.pyc\n, as the sub-directory was executed (when a script import a script from another sub-directory for example).\n\n\ntests\n contains files to perform nose tests and unittests.\n\n\nsetup.py\n is for documenting and distributing the project (when the project is compiled to be launched as a whole or frozen to be distributed).\n\n\nYou can add a \nreadme\n file below (usually a text or markdown document).\n\n\nThe \ndocs\n sub-directory contains all the project\u2019s documentation. It is more elaborate than the \u2018readme\u2019 file: manuals, explanations, logs, wikis, etc.\n\n\nThere can be other sub-directories for static such as images, web languages, etc.\n\n\nRepeat this directory structure for every project.\n\n\nTo clean up the directory, in the bash:\n\n\n\n\nfind . -name \"*.pyc\" -print #display\nfind . -name \"*.pyc\" -exec rn{}\\; 1 remove\n\ngrep -r \"NAME\" * #search within files\n\n\n\n\n\n\nIn Linux, before running any script, be sure to set the path to the project directory. \n\n\nBash:\n\n\n\n\nexport PYTHONPATH=.\nexport PYTHONPATH=$PYTHONPATH:$PWD\n\nunset PYTHONPATH # to remove\n\n\n\n\n\n\nIn Windows, set the path in the environment variables. Otherwise, Python won\u2019t find the scripts.\n\n\nPowerShell:\n\n\n\n\n$env:PYTHONPATH = \"$env:PYTHONPATH;.\"\n\n\n\n\n\n\nOr, on top of the Python code, below the shebang lnes, and before any other imports, add:\n\n\n\n\nimport sys\nsys.path # to view\nsys.path.append('.') # to set\n\n\n\n\n\n\nConsult the manual to find out more.\n\n\n\n\nExercise 47, Automated Testing\n\u00b6\n\n\nMiscellaneous notes\n\u00b6\n\n\n\n\nThe project directory is \u2018ex47\u2019.\n\n\nTest if you migrated the files correctly. In the bash:\n\n\n\n\ngrep -r NAME *  # no traces of 'NAME', from 'skeleton'\nfind . -name \"*.pyc\" -exec rm {} \\; # no trace of 'name'\n\n\n\n\n\n\nWhen you launch a script, you launch it from the parent directory with \npython bin/app.py\n.\n\n\nIn directory \u2018ex47\u2019, run tests with \npython tests/BLAH_tests.py\n. \n\n\nConsult the manual about testing. This is not covered in this notebook. \n\n\nTesting must be done in the shell or in the bash. Make sure you\u2019re running the tests with nosetests not with just Python. \n\n\nThe important functions here are \nassert_equal\n which makes sure that variables you have set or paths you have built in a Room are actually what you think they are. If you get the wrong result, then nosetests will print out an error message so you can go figure it out.\n\n\nIn a script, when you import from another sub-directory, code:\n\n\n\n\nfrom ex47.game import Room\n\n\n\n\n\n\nWhen the imported script is in the same sub-directory, code:\n\n\n\n\nfrom bin import Room\n\n\n\n\n\n\nConsult the manual to find out more.\n\n\n\n\nExercise 50, Your First Website\n\u00b6\n\n\nAn overview\n\u00b6\n\n\n\n\nWeb framework for web projects.\n\n\nDjango (the real deal, but complicated), Flask (modest), Pyramid (scalable), etc.\n\n\nOr the simple, yet powerful enough, web.py.\n\n\nExercises, from 50 to 52, are done with web.p",
            "title": "Learn Python the Hard Way"
        },
        {
            "location": "/Learn Python the Hard Way/#shorcuts-good-to-know",
            "text": "In the terminal, type  pydoc <python item>  to invoke the documentation on a python item (built-in functions, methods, objects, etc.).  ctrl+c  and/or  ctrl+d  break a loop.",
            "title": "Shorcuts, Good to Know"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-3-numbers-and-math",
            "text": "print, format, calculate  print \"I will now count my chickens:\"  I will now count my chickens:  print \"Hens\", 25 + 30 / 6\nprint \"Roosters\", 100 - 25 * 3 % 4\n\nprint \"Now I will count the eggs:\"\n\nprint 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6\n# copy 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 straight into the shell and run it\n# you will get the result only (don't add print before the statement)  Hens 30\nRoosters 97\nNow I will count the eggs:\n7  print \"Is it true that 3 + 2 < 5 - 7\"\nprint 3 + 2 < 5 - 7  Is it true that 3 + 2 < 5 - 7\nFalse  print \"What is 3 + 2?\", 3 + 2\nprint \"What is 5 - 7?\", 5 - 7  What is 3 + 2? 5\nWhat is 5 - 7? -2  print \"Oh, that's why it's False.\"\nprint \"How about some more.\"  Oh, that's why it's False.\nHow about some more.  print \"Is it greater?\", 5 > -2\nprint \"Is it greater or equal?\", 5 >= -2\nprint \"Is it less or equal?\", 5 <= -2  Is it greater? True\nIs it greater or equal? True\nIs it less or equal? False  print (1 + 1) # integer  2  print (1.0 + 1) # float  2.0",
            "title": "Exercise 3, Numbers and Math"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-4-variables-and-names",
            "text": "cars = 100\nspace_in_a_car = 4.0 # float\ndrivers = 30\npassengers = 90\ncars_not_driven = cars - drivers\ncars_driven = drivers\ncarpool_capacity = cars_driven * space_in_a_car\naverage_passengers_per_car = passengers / cars_driven\n\nprint \"There are\", cars, \"cars available.\"\nprint \"There are only\", drivers, \"drivers available.\"\nprint \"There will be\", cars_not_driven, \"empty cars today.\"\nprint \"We can transport\", carpool_capacity, \"people today.\"\nprint \"We have\", passengers, \"to carpool today.\"\nprint \"We need to put about\", average_passengers_per_car, \"in each cars.\"  There are 100 cars available.\nThere are only 30 drivers available.\nThere will be 70 empty cars today.\nWe can transport 120.0 people today.\nWe have 90 to carpool today.\nWe need to put about 3 in each cars.   A constant variable, a variable that should never be altered, should be set in capital as  PI = 3.1416 .",
            "title": "Exercise 4, Variables and Names"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-5-more-variables-and-printing",
            "text": "Call a variable with:  %r ; raw variable.  %s ; string.  %d ; digit.    Make the choice depending on the variable type.  However, if calling a \u2018string\u2019 (text, NLP), it must be done with  %s ; \u2018numbers\u2019 is done with  %r  and  %d  (possibly with  %s ).   The use and effects of the different calls is explained in Exercises 6 and 21.   my_name = 'Zed A. Shaw'\nmy_age = 35 # not a lie\nmy_height = 74 # inches\nmy_weight = 180 # lbs\nmy_eyes = 'Blue'\nmy_teeth = 'White'\nmy_hair = 'Brown'\n\nprint \"Let's talk about %s.\" % my_name  Let's talk about Zed A. Shaw.  # does the same thing\nprint \"He's %d years old.\" %my_age\nprint \"He's\", my_age,\"years old.\"\nprint \"He will be\", my_age + 1,\"years old next year.\"  He's 35 years old.\nHe's 35 years old.\nHe will be 36 years old next year.  print \"He's %d inches tall.\" % my_height\nprint \"He's %d pounds heavy\" % my_weight\nprint \"Actually that's not too heavy.\"\nprint \"He's got %s eyes and %s hair.\" % (my_eyes, my_hair)\nprint \"His teeth are usually %s depending on the coffee.\" % my_teeth  He's 74 inches tall.\nHe's 180 pounds heavy\nActually that's not too heavy.\nHe's got Blue eyes and Brown hair.\nHis teeth are usually White depending on the coffee.  # this line is tricky, try to get it exactly right\nprint \"If I add %d, %d, and %d I get %d.\" % (\n    my_age, my_height, my_weight, my_age + my_height + my_weight)  If I add 35, 74, and 180 I get 289.",
            "title": "Exercise 5, More Variables and Printing"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-6-strings-and-text",
            "text": "concatenate   %s  and  %r  help when concatenating strings.  %r  does not coerce the variable into a format ( %s  string or  %d  digit).   x = \"There are %d types of people.\" % 10\nbinary = \"binary\"\ndo_not = \"don't\"\n\ny = \"Those who know %s and those who %s.\" % (binary, do_not) # assign strings or chains of strings to a variable\n\nprint x \nprint y  There are 10 types of people.\nThose who know binary and those who don't.  print \"I said: %r.\" % x\nprint \"I also said: '%s'.\" % y  I said: 'There are 10 types of people.'.\nI also said: 'Those who know binary and those who don't.'.  hilarious = False\njoke_evaluation = \"Isn't that joke so funny?! %r\"\n\nprint joke_evaluation % hilarious  Isn't that joke so funny?! False  # add two strings together, concatenate them\nw = \"This is the left side of...\"\ne = \" a string with a right side.\"\n\n# with Numpy, it would have added (mathematically speaking)\nprint w + e  This is the left side of... a string with a right side.",
            "title": "Exercise 6, Strings and Text"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-15-reading-files",
            "text": "Before running this script, create a text file.  Type  \"Test file thing\" > test.txt .  Then type  cat test.txt .  \u2018test.txt\u2019 is now saved along the other scripts.  Run the script:  python ex15.py test.txt  With IPython, type:  %run ex15.py test.txt  Run the script without the extra argument  test.txt  to check the result.   %run ex15.py test.txt  Here's your file 'test.txt':\nTest file thing\nType the filename again:\n> test.txt\nHere's your file 'test.txt' again:\nTest file thing  %run ex15.py  ---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n\\\\Learn Python the Hard Way\\ex15.py in <module>()\n      1 from sys import argv\n      2 \n----> 3 script, filename = argv\n      4 \n      5 # similarities\n\n\nValueError: need more than 1 value to unpack   Load the script in IPython with  %load  to study it (don\u2019t run it!).  This type of script requires \u2018external\u2019 arguments when launched:  python ex15.py test.txt  In the script itself, always preceed the \u2018external\u2019 arguments, like  filename , with  script  since your write  python ex15.py test.txt  or  python script argument  when you launch the script.   # %load ex15.py\nfrom sys import argv\n\nscript, filename = argv\n\n# similarities between\n# var = raw_input(\"string\", digit, \"prompt\")\n# var = open(\"string\")\n\ntxt = open(filename) # reference to a file, not the file\nprint \"Here's your file %r:\" % filename\nprint txt.read()\n\nprint \"Type the filename again:\"\nfile_again = raw_input(\"> \")\n\ntext_again = open(file_again)\nprint \"Here's your file %r again:\" % file_again\nprint text_again.read()   The script again (this time, a manual import or copy-paste).   from sys import argv\n\n# always preceed the arguments like 'filename' with 'script'\nscript, filename = argv\n\n# similarities\n# var = raw_input(\"string\", digit, \"prompt\")\n# var = open(\"string\")\n\ntxt = open(filename) #reference to a file, not the file\nprint \"Here's your file %r:\" % filename\nprint txt.read()\n\nprint \"Type the filename again:\"\nfile_again = raw_input(\"> \")\n\ntext_again = open(file_again)\nprint \"Here's your file %r again:\" % file_again\nprint text_again.read()   Now, use this alternative code instead.  It does not require an external argument; the argument ( filename ) is in the script itself (it has become a variable).  \u2018Internal\u2019 arguments are for functions ( def function(arg1, arg2): ); see Exercise 18.   filename = \"test.txt\" # however, the code is limited to this file only\n\ntxt = open(filename) # reference to a file, not the file\nprint \"Here's your file %r:\" % filename\nprint txt.read()\n\nprint \"Type the filename again:\"\nfile_again = raw_input(\"> \")\n\ntext_again = open(file_again)\nprint text_again.read()",
            "title": "Exercise 15, Reading Files"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-16-reading-and-writing-files",
            "text": "open, close, readlines, truncate   'w' , write,  'r' , read,  'a' , append.  'w+' , read-write,  'r+' , read-write,  'a+' , read-append.  'r'  being the default argument, it is facultative when writing  open('file', 'r') .  The other arguments are mandatory; without them in  open('file, 'w') , you cannot write, truncate, append or replace.  First, load the script in IPython by typing  %load ex16_1.py ; it then turn to  a comment  # %load ex16_1.py .   # %load ex16.py\nfrom sys import argv\n\nscript, filename = argv\n\nprint \"We're going to erase %r.\" % filename\nprint \"If you don't want that, hit CTRL-C (^C).\"\nprint \"If you do want that, hit RETURN.\"\n\nraw_input(\"?\")\n\nprint \"Opening the file...\"\ntarget = open(filename, 'w')\n\nprint \"Truncating the file!\"\n\ntarget.truncate()\n\nprint \"Now, I'm going to ask you  for three lines.\"\n\nline1 = raw_input(\"line 1: \")\nline2 = raw_input(\"line 2: \")\nline3 = raw_input(\"line 3: \")\n\nprint \"I'm going to write these to the file.\"\n\ntarget.write(line1) # 'write' variable line1\ntarget.write(\"\\n\") # add a new line\ntarget.write(line2)\ntarget.write(\"\\n\")\ntarget.write(line3)\ntarget.write(\"\\n\")\n\nprint \"And finally, we close it.\"\ntarget.close()   Now, run the external file in IPython (it imports the code behind the scene).  Careful: the script requires a second argument ( filename ).   %run ex16.py text.txt  We're going to erase 'text.txt'.\nIf you don't want that, hit CTRL-C (^C).\nIf you do want that, hit RETURN.\n?\nOpening the file...\nTruncating the file!\nNow, I'm going to ask you  for three lines.\nline 1: Good morning.\nline 2: How are you?\nline 3: I wish you a good day.\nI'm going to write these to the file.\nAnd finally, we close it.   Read the file.   filename = 'text.txt'\n\ntarget = open(filename, 'r')\nprint target.read()\ntarget.close()  Good morning.\nHow are you?\nI wish you a good day.   Now, truncate (empty, delete, erase, clear) the file, reopen it, and to read it.   filename = 'text.txt'\n\ntarget = open(filename, 'w')\nprint \"Truncating the file!\"\nprint \"-\" * 25\ntarget.truncate()\ntarget.close()\n\ntarget = open(filename, 'r')\nprint target.read()\ntarget.close()  Truncating the file!\n------------------------",
            "title": "Exercise 16, Reading and Writing Files"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-17-more-files",
            "text": "length, len()   target.read() ; read the whole file (EOF).  target.read(10) ; read the amount of bytes between the parentheses (1 byte = 1 character).  target.readline() ; read one line character at a time; the first line or the file until the first  \\n .  target.readline(10) ; read 10 bytes of the first line, but never more than the first line.  readlines() ; read in the whole file at once and splits it by line (create a list).  xreadlines() ; read big files.  First, load  script ex17_1.py  in IPython. This script needs two additional arguments.   # %load ex17_1.py\nfrom sys import argv\nfrom os.path import exists # does the file exists, T or F?\n\nscript, from_file, to_file = argv\n\nprint \"Copying from %s to %s\" % (from_file, to_file)\n\nin_file = open(from_file, 'r') # 'r' is facultative\nindata = in_file.read() # read the content, store in memory\n\nprint \"The input file is %d bytes long\" % len(indata) # number of bytes in the file or length of 'indata'\n\nprint \"Does the output file exist? %r\" % exists(to_file) # if the second file hasn't been created, this row will yield a 'False'\n\n# after you run this script, if you run it again, il will yield a 'True'\nprint \"Ready, hit RETURN to continue, CTRL-C to abort.\"\nraw_input(\"? \")\n\nout_file = open(to_file, 'w')\nout_file.write(indata)\n\nprint \"Alright, all done.\"\n\nout_file.close()\nin_file.close()  %run ex17_1.py text2.txt new.txt  Copying from text2.txt to new.txt\nThe input file is 49 bytes long\nDoes the output file exist? True\nReady, hit RETURN to continue, CTRL-C to abort.\n? \nAlright, all done.  target = open(\"text2.txt\")\nprint target.read()\ntarget.close()  Good morning.\nHow are you?\nI wish you a good day.  target = open(\"new.txt\")\nprint target.read()\ntarget.close()  Good morning.\nHow are you?\nI wish you a good day.  # %load ex17_2.py\nfrom sys import argv\nfrom os.path import exists # does the file exists, T or F?\n\nscript, from_file, to_file = argv\n\n# FIRST\nin_file = open(from_file, 'r')\nindata = in_file.read()\n\nprint \"The input file is %d bytes long\" % len(indata)\n\nin_file.close()\n\nprint \"-\" * 25\n\n# SECOND\ncheckfile = open(from_file, 'r')\nprint checkfile.readline() # read line 1, show\nprint checkfile.readline() # read line 2\nprint checkfile.readline() # read line 3\n\ncheckfile.close()\n\nprint \"-\" * 25\n\n# THIRD\ncheckfile2 = open(from_file, 'r')\nout_file = open(to_file, 'w')\n\nindata = checkfile2.read()\nout_file.write(indata)\n\nprint \"Alright, all done.\"\n\ncheckfile2.close()\nout_file.close()\n\nprint \"-\" * 25\n\n# FOURTH\n\ncheckfile3 = open(to_file, 'r')\n\nprint checkfile3.read()\n\ncheckfile3.close()  %run ex17_2.py text2.txt new2.txt  The input file is 49 bytes long\n-------------------------\nGood morning.\n\nHow are you?\n\nI wish you a good day.\n-------------------------\nAlright, all done.\n-------------------------\nGood morning.\nHow are you?\nI wish you a good day.",
            "title": "Exercise 17, More Files"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-18-names-variables-code-functions",
            "text": "argument, flexible, indefinite   A function can have no, one or several arguments.  def function(): .  def function(one) .  def function(one, two, three) .    *args  means indifinite number of arguments.   All the arguments are is a list (\u2018args\u2019).   # indefinite\ndef print_two(*args):\n\n    arg1, arg2 = args\n    print \"arg1: %r, arg2: %r\" % (arg1, arg2)\n\n# two arguments\ndef print_two_again(arg1, arg2):\n\n    print \"arg1: %r, arg2: %r\" % (arg1, arg2)\n\n# one argument\ndef print_one(arg1):\n\n    print \"arg1: %r\" % arg1\n\n# no arguments\ndef print_none():\n\n    print \"I got nothin'.\"\n\n# indefinite\ndef print_two_2(*args):\n\n    print \"args: %r\" % (args,) # much more flexible    \n\n# two arguments\ndef print_two_again_2(arg1, arg2, arg3):\n\n    print \"arg1: %r, arg2: %r, arg3: %r\" % (arg1, arg2, arg3)    \n\n# three arguments\ndef print_two_again_3(arg1, arg2, arg3):\n\n    print \"arg1: %r, arg2: %r, arg3: %r\" % (arg1, arg2, arg3)\n    print_two(\"Joe\", \"Frank\") # call a function inside a function   Run the functions.   print_two(\"Zed\", \"Shaw\")\nprint_two_again(\"Zed\", \"Shaw\")  arg1: 'Zed', arg2: 'Shaw'\narg1: 'Zed', arg2: 'Shaw'  print_one(\"First!\")\nprint_none()  arg1: 'First!'\nI got nothin'.  print_two_2(\"Zed\", \"Shaw\", \"A\", \"B\")  args: ('Zed', 'Shaw', 'A', 'B')  print_two_again_2(\"Zed\", \"Shaw\", \"C\")  arg1: 'Zed', arg2: 'Shaw', arg3: 'C'  print_two_again_3(\"Zed\", \"Shaw\", \"C\")  arg1: 'Zed', arg2: 'Shaw', arg3: 'C'\narg1: 'Joe', arg2: 'Frank'",
            "title": "Exercise 18, Names, Variables, Code, Functions"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-19-functions-and-variables",
            "text": "Give different names to functions and arguments not to get confuse.   def cheese_and_crackers(cheese_count, boxes_of_crackers):\n\n    print \"You have %d cheeses!\" % cheese_count\n    print \"You have %d boxes of crackers!\" % boxes_of_crackers\n    print \"Man that's enough for a party!\"\n    print \"Get a blanket. \\n\"  print \"1.We can just give the function numbers directly:\"\ncheese_and_crackers(20, 30)  1.We can just give the function numbers directly:\nYou have 20 cheeses!\nYou have 30 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.  print \"2.Or, we can use variables from our script:\"\namount_of_cheese = 10\namount_of_crackers = 50\ncheese_and_crackers(amount_of_cheese, amount_of_crackers)  2.Or, we can use variables from our script:\nYou have 10 cheeses!\nYou have 50 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.  print \"3.We can even do math inside too:\"\ncheese_and_crackers(10 + 20, 5 + 6)  3.We can even do math inside too:\nYou have 30 cheeses!\nYou have 11 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.  print \"4.And we can combine the two, variables and math:\"\ncheese_and_crackers(amount_of_cheese + 100, amount_of_crackers + 1000)  4.And we can combine the two, variables and math:\nYou have 110 cheeses!\nYou have 1050 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.  print \"5.Make a GUI.\"\nprint \"Enter the amount of cheese:\",\namount_of_cheese = int(raw_input())\namount_of_crackers = int(raw_input(\"Enter the amount of crackers: \"))\ncheese_and_crackers(amount_of_cheese, amount_of_crackers)  5.Make a GUI.\nEnter the amount of cheese:2\nEnter the amount of crackers: 5\n You have 2 cheeses!\nYou have 5 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.",
            "title": "Exercise 19, Functions and Variables"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-20-functions-and-files",
            "text": "seek, move, file  # %load ex20.py\nfrom sys import argv\n\nscript, input_file = argv\n# python ex20.py test.txt\n\ndef print_all(f): # f is the file\n\n    print f.read() # read the file, reach the end\n\ndef rewind(f):\n\n    f.seek(0) # move back to the initial position in the file\n# 'seek' actively move in the file\n\ndef print_a_line(line_count, f):\n\n    print line_count, f.readline() # print a line # and this line number in the file\n\n\ncurrent_file = open(input_file)\n\nprint \"First, let's print the whole file:\\n\"\n\nprint_all(current_file) # launch function, f = current_file\n\nprint \"-\" * 25\n\nprint \"Now let's rewind, kind of like a tape.\"\n\nrewind(current_file) # launch function, f = current_file\n\nprint \"-\" * 25\n\nprint \"Let's print three lines:\"\n\ncurrent_line = 1 # load variable\nprint_a_line(current_line, current_file) # launch function\n# set 'current_line' to 1\n\ncurrent_line = current_line + 1\n# current_line += 1\nprint_a_line(current_line, current_file)\n# 'current_line' grows to 2...\n\n# current_line = current_line + 1\ncurrent_line += 1\nprint_a_line(current_line, current_file)  %run ex20.py new2.txt  First, let's print the whole file:\n\nGood morning.\nHow are you?\nI wish you a good day.\n-------------------------\nNow let's rewind, kind of like a tape.\n-------------------------\nLet's print three lines:\n1 Good morning.\n\n2 How are you?\n\n3 I wish you a good day.",
            "title": "Exercise 20, Functions and Files"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-21-functions-can-return-something-or-not",
            "text": "integer, float, int, coerce, digit, string, raw   %r  for raw.  %d  for digit.  %s  for string.  int()  with  %d  = integer.  int()  with  %r  or  %s  = integer.  float()  with  %d  = integer.  float()   with  %r  or  %s  = float.  %r  is a safer choice; see below.   a = 10 # a digit\nb = 10.1\n\nprint \"%r\" % a\nprint \"%s\" % a\nprint \"%d\" % a\nprint \"%r\" % b\nprint \"%s\" % b\nprint \"%d\" % b  10\n10\n10\n10.1\n10.1\n10  a = \"10\" # a string or str(10)\n\nprint \"%r\" % a\nprint \"%s\" % a\nprint \"%d\" % a  '10'\n10\n\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-34-71a6226dbd27> in <module>()\n      2 print \"%r\" % a\n      3 print \"%s\" % a\n----> 4 print \"%d\" % a\n\nTypeError: %d format: a number is required, not str  b = \"10.1\" # a string or str(10)\n\nprint \"%r\" % b\nprint \"%s\" % b\nprint \"%d\" % b  '10.1'\n10.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-33-18d4f3068fee> in <module>()\n      2 print \"%r\" % b\n      3 print \"%s\" % b\n----> 4 print \"%d\" % b\n\nTypeError: %d format: a number is required, not str  a = \"10\" # a string or str(10)\nb = \"10.1\" # a string or str(10)\n\nprint \"%r\" * 1 % a\nprint \"%s\" * 1 % a\nprint \"%r\" * 1 % b\nprint \"%s\" * 1 % b  '10'\n10\n'10.1'\n10.1  a = \"10\" # a string or str(10)\nb = \"10.1\" # a string or str(10)\n\nprint \"%r\" * 2 % a\nprint \"%s\" * 2 % a\nprint \"%r\" * 2 % b\nprint \"%s\" * 2 % b  ---------------------------------------------------------------------------\n\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-34-18d4f3068fee> in <module>()\n      1 a = \"10\"\n      2 b = \"10.1\"\n----> 3 print \"%r\" * 2 % a\n      4 print \"%s\" * 2 % a\n      5 print \"%r\" * 2 % b\n\nTypeError: not enough arguments for format string  a = 10\nb = 10.1\na = int(a)\nb = int(b)\nprint \"%r\" % a\nprint \"%s\" % a\nprint \"%d\" % a\nprint \"%r\" % b\nprint \"%s\" % b\nprint \"%d\" % b  10\n10\n10\n10\n10\n10  a = 10\nb = 10.1\na = float(a)\nb = float(b)\n\nprint \"%r\" % a\nprint \"%s\" % a\nprint \"%d\" % a\nprint \"%r\" % b\nprint \"%s\" % b\nprint \"%d\" % b  10.0\n10.0\n10\n10.1\n10.1\n10  a = 1\nb = 2.1\n\nprint a * b\nprint int(a) * int(b)\nprint float(a) * float(b)\nprint str(a) * 10\nprint str(b) * 10\nprint str(a) * str(b)  2.1\n2\n2.1\n1111111111\n2.12.12.12.12.12.12.12.12.12.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-52-57a5dd7c13d0> in <module>()\n      7 print str(a) * 10\n      8 print str(b) * 10\n----> 9 print str(a) * str(b)\n\nTypeError: can't multiply sequence by non-int of type 'str'  def add(a, b):\n\n    print \"ADDING %s + %s\" % (a, b)\n    return a + b  \n\ndef substract(a, b):\n\n    print \"SUBTRACTING %d - %d\" % (a, b) # show the arguments\n    return a - b # compute the arguments\n\ndef multiply(a, b):\n\n    print \"MULTIPLYING %d * %d\" % (a, b)\n    return a * b    \n\ndef divide(a, b):\n\n    print \"DIVIDING %d / %d\" % (a, b)\n    return a / b  print \"Let's do some math with just functions!\"\n\naa = int(raw_input(\"Enter a (integer): \")) # to enter an integer\nbb = float(raw_input(\"Enter b (float): \")) # to enter a float\nage = add(aa, bb) # launch function add()  Let's do some math with just functions!\nEnter a (integer): 1\nEnter b (float): 2.2\nADDING 1 + 2.2  print add(aa, bb)  ADDING 1 + 2.2\n3.2  height = substract(78, 4) # launch function substract()\nweight = multiply(90, 2) # launch function multiply()\niq = divide(100, 2) # launch function divide()\n\nprint height\nprint weight\nprint iq  SUBTRACTING 78 - 4\nMULTIPLYING 90 * 2\nDIVIDING 100 / 2\n74\n180\n50  # Use the variable, previously loaded\nprint \"Age: %d, Height: %d, Weight: %d, IQ: %d\" % (age, height, weight, iq)  Age: 3, Height: 74, Weight: 180, IQ: 50  # A puzzle for the extra credit, type it in anyway.\nprint \"Here is a puzzle.\"\n\nwhat = add(age, substract(height, multiply(weight, divide(iq, 2)))) # launch functions one by one!!!\n\n# Insert variable 'what' in the text\nprint \"That becomes: \", what, \"Can you do it by hand?\"  Here is a puzzle.\nDIVIDING 50 / 2\nMULTIPLYING 180 * 25\nSUBTRACTING 74 - 4500\nADDING 3.2 + -4426\nThat becomes:  -4422.8 Can you do it by hand?",
            "title": "Exercise 21, Functions Can Return Something or not..."
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-23-read-some-code",
            "text": "Go to  GitHub :  In the \u2018lamson\u2019 directory, take a script.  Go through the script.  Find projects on collaborative sites or depositories:  bitbucket.org .  github.com .  gitorious.org .  launchpad.net .  sourceforge.net .",
            "title": "Exercise 23, Read Some Code"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-24-more-practice",
            "text": "\\'  for an aposthrophy.  \\t  for a tab.  \\\\  for a backslash.  \\n  for a new line.   print \"Let's practice everything.\"\n\nprint 'You\\'d need to know \\'bout escapes with \\\\ that do \\nnewlines and \\ttabs.'  Let's practice everything.\nYou'd need to know 'bout escapes with \\ that do \nnewlines and    tabs.  poem = \"\"\"\n\\tThe lovely world\nwith logic so firmly planted\nconnot discern \\n the needs of love\nnor comprehend passion from intuition\nand requires an explanation\n\\n\\t\\twhere there is none.\n\"\"\"\n\nprint \"----------------\"\nprint poem\nprint \"----------------\"  ----------------\n\n    The lovely world\nwith logic so firmly planted\nconnot discern \n the needs of love\nnor comprehend passion from intuition\nand requires an explanation\n\n        where there is none.\n\n----------------  # variable 'five'\nfive = 10 -2 + 3 - 6\n\n# use of variable 'five'\nprint \"This should be five: %s\" % five  This should be five: 5  # function with one argument\ndef secret_formula(started):\n\n    jelly_beans = started * 500 # load variable with another\n    jars = jelly_beans / 1000\n    crates = jars / 100\n    return jelly_beans, jars, crates\n\n\n# variable; warning, this variable is modified further down\nstart_point = 10000\n\n# redefine the results of a function (rename a variable)\n# from this point, 'jelly_beans' becomes 'beans'\n# and must be called so in any line of code\nbeans, jars, crates = secret_formula(start_point)\n\nprint \"With a starting point of: %d\" % start_point\n# we apply 'bean'\nprint \"We's have %d beans, %d jars, and %d crates.\" % (beans, jars, crates)\n\n# modified variable is loaded into the code from this point\nstart_point = start_point / 10\n\nprint \"We can also do that this way:\"\n# we apply the modified variable 'start_point'\nprint \"We's have %d beans, %d jars, and %d crates.\" % secret_formula(start_point)  With a starting point of: 10000\nWe's have 5000000 beans, 5000 jars, and 50 crates.\nWe can also do that this way:\nWe's have 500000 beans, 500 jars, and 5 crates.",
            "title": "Exercise 24, More Practice"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-25-even-more-practice",
            "text": "import, module, package, script, library   For this exercice, consult the manual.  First, run python ex25.py to find out any errors.  Second, use the python engine to run pieces of codes from this file and not just trigger the whole code from this file  Check out file  25_1.txt .   # %load ex25.py\ndef break_words(stuff):\n\n    \"\"\"This function will break up words for us.\"\"\"\n    words = stuff.split(' ') # the method splits the characters each time it finds a 'space'\n    return words # you must specify in python where to load the result (into 'words')\n\ndef sort_words(words):\n\n    \"\"\"Sorts the words.\"\"\"\n    return sorted(words) # the python function sorts the separated words\n\ndef print_first_word(words):\n\n    \"\"\"Prints the first word after popping in off.\"\"\"\n    word = words.pop(0) # the method returns the first word in the index (position 0)\n    print word\n\ndef print_last_word(words):\n\n    \"\"\"Prints the last word after popping it off.\"\"\"\n    word = words.pop(-1) # the method returns the last word in the index (position -1)\n    print word\n\ndef sort_sentence(sentence):\n\n    \"\"\"Takes in a full sentence and returns the sorted words.\"\"\"\n    words = break_words(sentence) # launch a function\n    return sort_words(words) # launch another function with the result of the first function\n\ndef print_first_and_last(sentence):\n\n    \"\"\"Prints the first and last words of the sentence.\"\"\"\n    words = break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n\ndef print_first_and_last_sorted(sentence):\n\n    \"\"\"Sorts the words then prints the first and last one.\"\"\"\n    words = sort_sentence(sentence)\n    print_first_word(words)\n    print_last_word(words)  %run ex25.py   In the next script, you  import  the above script (ex25.py) as an external module (even though the script was previously run in IPython, and we want to simulate a script importing another script) and use its function as methods.   import ex25\n\nsentence = \"All good things come to those who wait.\"\n\nwords = ex25.break_words(sentence)\nwords  ['All', 'good', 'things', 'come', 'to', 'those', 'who', 'wait.']  sorted_words = ex25.sort_words(words)\nsorted_words  ['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']  ex25.print_first_word(words)\nex25.print_last_word(words)\nwords  All\nwait.\n['good', 'things', 'come', 'to', 'those', 'who']  ex25.print_first_word(sorted_words)\nex25.print_last_word(sorted_words)\nsorted_words  All\nwho\n['come', 'good', 'things', 'those', 'to', 'wait.']  sorted_words = ex25.sort_sentence(sentence)\nsorted_words  ['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']  ex25.print_first_and_last(sentence)\nex25.print_first_and_last_sorted(sentence)  All\nwait.\nAll\nwho",
            "title": "Exercise 25, Even More Practice"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-32-loops-and-lists",
            "text": "for, loop, list  the_count = [1,2,3,4,5]\nfruits = ['apples', 'oranges', 'pears', 'apricots']\nchange = [1, 'pennies', 2, 'dimes', 3, 'quarters']\n\n# this first kind of for-loop goes through a list\nfor number in the_count:\n    print \"\\tThis is count %d\" % number      This is count 1\n    This is count 2\n    This is count 3\n    This is count 4\n    This is count 5  # same as above\nfor fruit in fruits:\n    print \"A fruit of type: %s\" % fruit  A fruit of type: apples\nA fruit of type: oranges\nA fruit of type: pears\nA fruit of type: apricots   We can go though mixed lists too. Notice we have to use  %r  since we don\u2019t know what\u2019s in it.   for i in change:\n    print \"\\tI got %r\" % i      I got 1\n    I got 'pennies'\n    I got 2\n    I got 'dimes'\n    I got 3\n    I got 'quarters'   We can also build lists. First, start with an empty one.   elements = []\n\n# then use the range function to do 0 to 5 counts\n# 0 means 1st, the 6th is excluded; 0,1,2,3,4,5\nfor i in range(0, 6):\n    print \"Adding %d to the list.\" % i\n    # append is a function that lists understand\n    elements.append(i) # elements is a variable to which we add numbers  Adding 0 to the list.\nAdding 1 to the list.\nAdding 2 to the list.\nAdding 3 to the list.\nAdding 4 to the list.\nAdding 5 to the list.   We can print them out.   for i in elements:\n    print \"\\tElement was: %d\" % i        Element was: 0\n    Element was: 1\n    Element was: 2\n    Element was: 3\n    Element was: 4\n    Element was: 5  print \"Test the range function...\"\nprint \"range(5):\", range(5)\nprint \"range(6):\", range(6)\nprint \"range(1, 5):\", range(1, 5)\nprint \"range(2, 5):\", range(2, 5)\nprint \"range(0, 10, 2):\", range(0, 10, 2)  Test the range function...\nrange(5): [0, 1, 2, 3, 4]\nrange(6): [0, 1, 2, 3, 4, 5]\nrange(1, 5): [1, 2, 3, 4]\nrange(2, 5): [2, 3, 4]\nrange(0, 10, 2): [0, 2, 4, 6, 8]   Two-dimentional lists (above 2 dimension, it can become memory-intensive to compute!).    2d, tabular, lists in list, list of lists  the_count_two = [[1,2,3],[4,5,6]]\n\n# this first kind of for-loop goes through a list\n# this list is not numerical, use %r or %s\nfor number in the_count_two:\n    print \"\\tThis is count %r\" % number  This is count [1, 2, 3]\nThis is count [4, 5, 6]",
            "title": "Exercise 32, Loops and Lists"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-33-while-loops",
            "text": "while, loop  i = 0\nnumbers = []\n\nwhile i < 6:\n    print \"At the top i is %d\" % i\n    numbers.append(i)\n\n    i += 1\n    print \"Number now: \", numbers\n    print \"At the botton i is %d\" % i\n\n\nprint \"The numbers: \"  At the top i is 0\nNumber now:  [0]\nAt the botton i is 1\nAt the top i is 1\nNumber now:  [0, 1]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 1, 2]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 1, 2, 3]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 1, 2, 3, 4]\nAt the botton i is 5\nAt the top i is 5\nNumber now:  [0, 1, 2, 3, 4, 5]\nAt the botton i is 6\nThe numbers:  for num in numbers:\n    print num      0\n1\n2\n3\n4\n5   Make it a function.   def breaking_list(max_of, increm):\n\n    i = 0\n    numbers = []\n\n    while i < max_of:\n        print \"At the top i is %d\" % i\n        numbers.append(i)\n\n        i += increm\n        print \"Number now: \", numbers\n        print \"At the botton i is %d\" % i\n\n    print \"The numbers: \"\n\n    for num in numbers:\n        print num\n\nprint \"Enter an integer, a maximum, higher than 1.\"\nmax_integer = int(raw_input(\"> \"))\nprint \"Enter an integer, an increment, equal or more than 1\"\nincrement = int(raw_input(\"> \"))\nprint \"The maximum is %d and the increment is %d\" % (max_integer, increment)\n\nbreaking_list(max_integer, increment)  Enter an integer, a maximum, higher than 1.\n> 5\nEnter an integer, an increment, equal or more than 1\n> 2\nThe maximum is 5 and the increment is 2\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 2]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 2, 4]\nAt the botton i is 6\nThe numbers: \n0\n2\n4   Change the function, replace with a for-loops.    def breaking_list2(max_of, increm):\n\n    i = 0\n    numbers = []\n\n    for i in range(0, max_of, increm):\n        print \"At the top i is %d\" % i\n        numbers.append(i)\n\n        i += increm\n        print \"Number now: \", numbers\n        print \"At the botton i is %d\" % i\n\n    print \"The numbers: \"\n\n    for num in numbers:\n        print num\n\nmax_integer2 = max_integer + 2\nincrement2 = increment + 1\nbreaking_list2(max_integer2, increment2)  At the top i is 0\nNumber now:  [0]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 3]\nAt the botton i is 6\nAt the top i is 6\nNumber now:  [0, 3, 6]\nAt the botton i is 9\nThe numbers: \n0\n3\n6",
            "title": "Exercise 33, While Loops"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-34-accessing-elements-of-lists",
            "text": "list, list of lists, lists in list, exit, program   Let\u2019s build a scenario; functions leading to other functions.  def gold_room():  def bear_room():  def cthulhu_room():  def dead(why):  def start():  start()  to launch the chain reaction.   from sys import exit\n\ndef gold_room():\n\n    print \"This room is full of gold. How much do you take?\"\n\n    choice = raw_input(\"Write any number from 0 to 100> \") # variable\n    if \"0\" in choice or \"1\" in choice: # could be 0, 1, 10, 11:19, 20, 21, 30, 31, 40, 41, 50, 51, etc.\n        how_much = int(choice) # variable\n    else:\n        dead(\"Man, learn to type a number.\") # launch function dead\n\n    if how_much < 50:\n        print \"Nice, you're not greedy, you win!\"\n        exit(0) # launch system function exit\n    else:\n        dead(\"You greedy bastard!\") # launch function dead\n\ndef bear_room():\n\n    print \"There is bear here.\"\n    print \"The bear has a bunch of honey.\"\n    print \"The fat bear is in front of another door.\"\n    print \"How are you going to move the bear?\"\n    bear_moved = False # variable\n\n    while True: # infinite loop, run until it finds a right answer\n        choice = raw_input(\"Write 'take honey', 'taunt bear' or 'open door'> \") # variable\n\n        if choice == \"take honey\": # variable check\n            dead(\"The bear looks at you then slaps your face off.\") # launch function dead\n        elif choice == \"taunt bear\" and not bear_moved: # double variables check\n            print \"The bear has moved from the door. You can go thought it now.\"\n            bear_moved = True # change the variable\n        elif choice == \"taunt bear\" and bear_moved:\n            dead(\"The bear gets pissed off and chews your leg off.\")\n        elif choice == \"open door\" and bear_moved: # variable check\n            gold_room() # launch function gold_room\n        else:\n            print \"I got no idea what that means.\"\n\ndef cthulhu_room():\n\n    print \"Here you see the great evil Cthulhu.\"\n    print \"He, it, whatever stares at you and you go insane.\"\n    print \"Do you flee your life or eat your head?\"\n\n    choice = raw_input(\"Write 'flee' or 'head'> \") # variable\n\n    if \"flee\" in choice: # variable check\n        start() # launch function start\n    elif \"head\" in choice:\n        dead(\"Well that was tasty!\")\n    else:\n        cthulhu_room() # launch function\n\ndef dead(why):\n\n    print why, \"Good job!\"\n    exit(0) # launch system function exit\n    # exit(0) is neutral\n    # exit(1) is an error, could be a useful warning\n    # exit(2) or others like exit(100) are other warnings, or different messages\n\ndef start():\n\n    print \"You are in a dark room.\"\n    print \"There is a door to your right and left.\"\n    print \"Which one do you take: left or right?\"\n\n    choice = raw_input(\"Write 'left' or 'right'> \") # variable\n\n    if choice == \"left\": # variable check, exact\n        bear_room() # launch function bear_room\n    elif choice == \"right\": # variable check, exact\n        cthulhu_room()\n    else:\n        dead(\"You stumble around the room until you starve.\")\n\nstart() # launch the chain reaction  You are in a dark room.\nThere is a door to your right and left.\nWhich one do you take: left or right?\nWrite 'left' or 'right'> left\nThere is bear here.\nThe bear has a bunch of honey.\nThe fat bear is in front of another door.\nHow are you going to move the bear?\nWrite 'take honey', 'taunt bear' or 'open door'> taunt bear\nThe bear has moved from the door. You can go thought it now.\nWrite 'take honey', 'taunt bear' or 'open door'> open door\nThis room is full of gold. How much do you take?\nWrite any number from 0 to 100> 63\nMan, learn to type a number. Good job!\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 0   There are multiple scenarios to try\u2026",
            "title": "Exercise 34, Accessing Elements of Lists"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-38-doing-things-to-lists",
            "text": "list, index, add, remove, delete, extract  ten_things = \"Apples Oranges Crows Telephones Light Sugar\"\n\nprint \"ten_things:\", ten_things,\", not a list\"\n\nprint \"Wait there are not 10 things is that list. Let's fix that.\"  ten_things: Apples Oranges Crows Telephones Light Sugar , not a list\nWait there are not 10 things is that list. Let's fix that.  stuff = ten_things.split(' ') # variable ten_things, method split\n\nprint \"stuff:\", stuff,\", a list\"  stuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar'] , a list  more_stuff = [\"Day\", \"Night\", \"Song\", \"Frisbee\", \"Corn\", \"Banana\", \"Girl\", \"Boy\"] # list variable\n\nprint \"more_stuff:\", more_stuff,\", a list\"  more_stuff: ['Day', 'Night', 'Song', 'Frisbee', 'Corn', 'Banana', 'Girl', 'Boy'] , a list   Most of the time, a for-loop is better than a while-loop.  A while-loop is better when there is a test, a condition.   while len(stuff) != 10:\n    next_one = more_stuff.pop() # load a variable with another variable, method pop, pop means extracting 1 item from a list variable, the last item in the list\n    print \"Adding: \", next_one # show the content\n    stuff.append(next_one) # variable stuff add 1-item list variable; the loop will go as long as stuff has less than 10 items  \n    print \"stuff:\", stuff\n    print \"There are %d items now.\" % len(stuff) # length of stuff or the number of items in it\n\nprint \"There we go: \", stuff  Adding:  Boy\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy']\nThere are 7 items now.\nAdding:  Girl\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl']\nThere are 8 items now.\nAdding:  Banana\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana']\nThere are 9 items now.\nAdding:  Corn\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana', 'Corn']\nThere are 10 items now.\nThere we go:  ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana', 'Corn']  print \"Let's do some things with stuff.\"\n\n# print and pop choosen items according to the index\n# could also be random index values!!!\n# could reorder the list before (ascending, descending) \nprint stuff[1] # the 2nd item\nprint stuff[2] # the 3rd item\nprint stuff[-1] # the last item\nprint stuff[-2]\nprint stuff.pop() # pop the last item\nprint stuff.pop(0) # pop the first item\nprint stuff.pop(1) # pop the 2nd item\nprint stuff.pop(-1) # pop the last item\nprint ' '.join(stuff) # var.split(' ') vs ' '.join(var), concatenate the list\nprint '#'.join(stuff[3:5]) # add a character at position 3 and 4 (4th, 5th, excluding the last)   Let's do some things with stuff.\nOranges\nCrows\nCorn\nBanana\nCorn\nApples\nCrows\nBanana\nOranges Telephones Light Sugar Boy Girl\nSugar#Boy",
            "title": "Exercise 38, Doing Things to Lists"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-39-dictionaries-oh-lovely-dictionaries",
            "text": "dictionary  things = ['a','b','c','d'] # list\n\nprint things\nprint things[1]  ['a', 'b', 'c', 'd']\nb   Change an element.   things[1] = 'z'\nprint things  ['a', 'z', 'c', 'd']   A dictionary has keys associated with values.   Order does not matter.   If you supply the key, you will get the value.   stuff = {'name' : 'Zed','age' : '39','height' : 8 * 12 + 2} # a dictionary\n\nprint stuff\nprint stuff['name']\nprint stuff['age']\nprint stuff['height']  {'age': '39', 'name': 'Zed', 'height': 98}\nZed\n39\n98   Add an element.   stuff['city'] = \"San Francisco\"\nprint stuff['city']\nprint stuff  San Francisco\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}   Add and remove an element.   stuff['color'] = \"blue\"\nprint stuff\n\ndel stuff['color']\nprint stuff  {'color': 'blue', 'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}   If the value does not exist when you call it, it will turn out an error. Instead, write it this way:  print \"%r\" % stuff.get('color',None) .   If it\u2019s not existant, it will return \u2018None\u2019 or a value by default   print stuff['state']  ---------------------------------------------------------------------------\n\nKeyError                                  Traceback (most recent call last)\n\n<ipython-input-69-f211ffe8fe02> in <module>()\n----> 1 print stuff['state']\n\n\nKeyError: 'state'  print \"%r\" % stuff.get('color', None)  None   Change an element.   print stuff['age']\n\nstuff['age'] = 400\nprint stuff['age']  39\n400   Extract with the index.   stuff[1] = \"Wow\"\nstuff[2] = \"Neato\"\nprint stuff[1]\nprint stuff[2]\n\nprint stuff # new items won't be in order  Wow\nNeato\n{'city': 'San Francisco', 2: 'Neato', 'name': 'Zed', 1: 'Wow', 'age': 400, 'height': 98}   Delete an element (according to the index).   del stuff[1]\ndel stuff[2]\n\nprint stuff  {'city': 'San Francisco', 'name': 'Zed', 'age': 400, 'height': 98}   Create a mapping of state to abbreviation.   states = {\n    'Oregon': 'OR',\n    'Florida': 'FL',\n    'California': 'CA',\n    'New York': 'NY',\n    'Michigan': 'MI'\n}   Create a basic set of states and some cities in them.   cities = {\n    'CA': 'San Francisco',\n    'MI': 'Detroit',\n    'FL': 'Jacksonville'\n}   Add some key:value to dictionary cities.   cities['NY'] = 'New York'\ncities['OR'] = 'Portland'   Print out some cities.   print \"Dictionary 'cities': \", cities\nprint '-' * 10\nprint \"NY State has: \", cities['NY'] # call the key\nprint \"OR State has: \", cities['OR'] # get the value  Dictionary 'cities':  {'FL': 'Jacksonville', 'CA': 'San Francisco', 'MI': 'Detroit', 'OR': 'Portland', 'NY': 'New York'}\n----------\nNY State has:  New York\nOR State has:  Portland   Print some states.   print \"Dictionary 'states': \", states\nprint '-' * 10\nprint \"Michigan's abbreviation is: \", states['Michigan']\nprint \"Florida's abbrebiation is: \", states['Florida']  Dictionary 'states':  {'California': 'CA', 'Michigan': 'MI', 'New York': 'NY', 'Florida': 'FL', 'Oregon': 'OR'}\n----------\nMichigan's abbreviation is:  MI\nFlorida's abbrebiation is:  FL   Print a dictionary in dictionary.   print \"Michigan has: \", cities[states['Michigan']]\n# is like states['Michigan'], then cities['MI']\nprint \"florida has: \", cities[states['Florida']]  Michigan has:  Detroit\nflorida has:  Jacksonville   Print every state abbreviation.   print \"Enumerate Dictionary 'states', key:value...\"\nfor state, abbrev in states.items():\n    print \"%s is abbreviated %s\" % (state, abbrev)\n# state = 1st item = key, abbrev = 2nd item = value  Enumerate Dictionary 'states', key:value...\nCalifornia is abbreviated CA\nMichigan is abbreviated MI\nNew York is abbreviated NY\nFlorida is abbreviated FL\nOregon is abbreviated OR   Print every city in state.   print \"Enumerate Dictionary 'cities', key:value...\"\nfor abbrev, city in cities.items():\n    print \"%s has the city %s\" % (abbrev, city)     Enumerate Dictionary 'cities', key:value...\nFL has the city Jacksonville\nCA has the city San Francisco\nMI has the city Detroit\nOR has the city Portland\nNY has the city New York   Now do both at the same time.   print \"Enumerate both dictionaries...\"\nfor state, abbrev in states.items():\n    print \"%s state is abbreviated %s and has city %s\" % (state, abbrev, cities[abbrev])\n# state California gives abbrev CA, inside cities gives San Francisco     Enumerate both dictionaries...\nCalifornia state is abbreviated CA and has city San Francisco\nMichigan state is abbreviated MI and has city Detroit\nNew York state is abbreviated NY and has city New York\nFlorida state is abbreviated FL and has city Jacksonville\nOregon state is abbreviated OR and has city Portland   get()  seek a key, whether it exists or not.   state = states.get('Texas') # extract\n\nif not state:\n    print \"Sorry, no Texas.\"  Sorry, no Texas.   Get a city with a default value.   city = cities.get('TX', 'Does Not Exist')\nprint \"The city for the state 'TX' is: %s\" % city  The city for the state 'TX' is: Does Not Exist   Let\u2019s step up the above operations.  Module  hashmap.py  works through a dictionary.   Module  ex39_test.py  contains dictionaries (just like the above).  In Python, we would run module  ex39_test.py .   The module would begin by importing module  hashmap.py  to use its methods and perform operations.  Consult the manual.",
            "title": "Exercise 39, Dictionaries, Oh Lovely Dictionaries"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-40-modules-classes-and-objects",
            "text": "mystuff = {'apple': 'I AM APPLES'}\n\nprint mystuff['apple'] # get X from Y  I AM APPLES   You can import a file with functions and variables from a another module.  You can access the functions (methods) and variables from this other module.  Both files must be in the same directory, otherwise, specify the path as well.   # %load ex40.py\ndef apple():\n\n    print \"I AM APPLES!\"\n\n# this is just a variable\ntangerine = \"Living reflection of a dream\"\n\napple()  %run ex40.py  I AM APPLES!  import ex40\n\nex40.apple()\n\nprint ex40.tangerine  I AM APPLES!\nLiving reflection of a dream  mystuff['new'] = ex40.tangerine\n\nprint mystuff['new']  Living reflection of a dream  import ex40\n\nthing = ex40\n\nthing.apple()\nprint thing.tangerine  I AM APPLES!\nI AM APPLES!\nLiving reflection of a dream   Use a class instead of an imported module.  Remember: class method = class function.   class Song(object):\n\n\n    def __init__(self, lyrics): # instantiation and shortcut for a creating a variable\n        self.lyrics = lyrics # the variable could be equal to a text, a number or a variable\n\n    def sing_me_a_song(self): # create a class function\n        for line in self.lyrics:\n            print line\n\n\n# instance            \nhappy_bday = Song([\"Happy birthday to you\",\n                   \"I don't want to get sued\",\n                   \"So I'll stop right there\"])\n\n# instance\nbulls_on_parade = Song([\"They rally around tha family\",\n                        \"With pockets full of shells\"])\n\n# instance\nau_clair = Song([\"Au clair de la lune\",\n                 \"Mon ami Pierrot\",\n                 \"Prete-moi ta plume\",\n                 \"Pour ecrire un mot\"])\n\n# not an instance!!!\nfrere_jacques = [\"Frere Jacques (bis)\",\n                 \"Dormez-vous (bis)\",\n                 \"Sonnez les matines (bis)\",\n                 \"Ding-din-don (bis)\"]\n\n# instance\nfrere = Song([\"Frere Jacques (bis)\",\n              \"Dormez-vous (bis)\",\n              \"Sonnez les matines (bis)\",\n              \"Ding-din-don (bis)\"])\n\n\n# not a class function\ndef chante_moi(paroles): # create a function\n\n    for ligne in paroles:\n        print ligne   Invoke an instance.   happy_bday.sing_me_a_song()  Happy birthday to you\nI don't want to get sued\nSo I'll stop right there   Again.   bulls_on_parade.sing_me_a_song()  They rally around tha family\nWith pockets full of shells  Write  instance.class function / instance.class method  au_clair.sing_me_a_song()  Au clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot   Write the method the other around:  Class.class_function() / Class.class_method() .   #au_clair.sing_me_a_song()\nSong.sing_me_a_song(au_clair)  Au clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot   This function is independent.  frere_jacques.chante_moi()  can\u2019t be!!!   chante_moi(frere_jacques)  Frere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)   It looks like  Class.class_function() / Class.class_method()   Song.sing_me_a_song(frere)  Frere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)",
            "title": "Exercise 40, Modules, Classes, and Objects"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-41-learning-to-speak-object-oriented",
            "text": "Object-oriented programming (oop).  The script below ( ex41.py ) imports a word list from a text file ( ex41_words.txt ).  The script is a drill for learning oop.   import random\nimport sys\n\n## WORD_URL = \"http://learncodethehardway.org/words.txt\" # read a file http://learncodethehardway.org/words.txt\nWORD_TXT = \"ex41_words.txt\"\nWORDS = []\n\n# dictionary {\"Python\": \"English\"}\nPHRASES = {\n    \"class %%%(%%%):\":\n        \"Make a class named %%% that is-a %%%.\",\n    \"class %%%(object):\\n\\tdef __init__(self, ***):\":\n        \"class %%% has-a __init__ that takes self and *** parameters.\",\n    \"class %%%(object):\\n\\tdef ***(self, @@@):\":\n        \"class %%% has-a function named *** that takes self and @@@ parameters.\",\n    \"*** = %%%()\":\n        \"Set *** to an instance of class %%%.\",\n    \"***.***(@@@)\":\n        \"From *** get the *** function, and call it with parameters self, @@@.\",\n    \"***.*** = '***'\":\n        \"From *** get the *** attribute and set it to '***'.\"\n}\n\n# do they want to drill phrases first\nif len(sys.argv) == 2 and sys.argv[1] == \"English\":\n    PHRASE_FIRST = True\nelse:\n    PHRASE_FIRST = False\n\n# load up the words from the website\n## for word in urlopen(WORD_URL).readlines():\nfor word in open(WORD_TXT, \"r\").readlines():\n    WORDS.append(word.strip())\n\ndef convert(snippet, phrase): # 'list comprehension', reseach on the Internet\n\n    class_names = [w.capitalize() for w in\n                    random.sample(WORDS, snippet.count(\"%%%\"))]\n    other_names = random.sample(WORDS, snippet.count(\"***\"))\n    results = []\n    param_names = []\n\n    for i in range(0, snippet.count(\"@@@\")):\n        param_count = random.randint(1,3)\n        param_names.append(', '.join(random.sample(WORDS, param_count)))\n\n    for sentence in snippet, phrase:\n        result = sentence[:]\n\n        # fake class names\n        for word in class_names:\n            result = result.replace(\"%%%\", word, 1)\n\n        # fake other names\n        for word in other_names:\n            result = result.replace(\"***\", word, 1)\n\n        # fake parameter lists\n        for word in param_names:\n            result = result.replace(\"@@@\", word, 1)\n\n        results.append(result)\n\n    return results\n\n# keep going until until they hit CTRL-D\ntry:\n    while True:\n        snippets = PHRASES.keys()\n        random.shuffle(snippets)\n\n        for snippet in snippets:\n            phrase = PHRASES[snippet]\n            question, answer = convert(snippet, phrase)\n            if PHRASE_FIRST:\n                question, answer = answer, question\n\n            print question\n\n            raw_input(\"> \")\n            print \"ANSWER: %s\\n\\n\" % answer\nexcept EOFError:\n    print \"\\nBye\"  alarm.deer(disgust, brass)\n> deer is a Class alarm function that takes arguments digust and brass\nANSWER: From alarm get the deer function, and call it with parameters self, disgust, brass.\n\nclass Building(Blood):\n> etc\nANSWER: Make a class named Building that is-a Blood.\n\nbucket = Berry()    Sample of the original word list, 10 out of 503:  text\naccount\nachiever\nactor\naddition\nadjustment\nadvertisement\nadvice\naftermath\nagreement\nairplane    Same script, but the list of word comes  from the Internet.   A note on the script:  The use of constant variable such as WORD_URL (such variable should not be modified).  A constant variable can be anything from a number, a string to a dictionary.  The use of  try/except  pair to check for errors. It is similar to the pair  if/else .  Therea are several types of errors.  EOFError  is just one type. Consult other (or online) manuals to find out about all the types of errors.     import random\nfrom urllib import urlopen\nimport sys\n\nWORD_URL = \"http://learncodethehardway.org/words.txt\" # read a file\nWORDS = []\n\n# dictionary {\"Python\": \"English\"}\nPHRASES = {\n    \"class %%%(%%%):\":\n        \"Make a class named %%% that is-a %%%.\",\n    \"class %%%(object):\\n\\tdef __init__(self, ***)\":\n        \"class %%% has-a __init__ that takes self and *** parameters.\",\n    \"class %%%(object):\\n\\tdef ***(self, @@@)\":\n        \"class %%% has-a function named *** that takes self and @@@ parameters.\",\n    \"*** = %%%()\":\n        \"Set *** to an instance of class %%%.\",\n    \"***.***(@@@)\":\n        \"From *** get the *** function, and call it with parameters self, @@@.\",\n    \"***.*** = '***'\":\n        \"From *** get the *** attribute and set it to '***'.\"\n}\n\n# do they want to drill phrases first\nif len(sys.argv) == 2 and sys.argv[1] == \"English\":\n    PHRASE_FIRST = True\nelse:\n    PHRASE_FIRST = False\n\n# load up the words from the website\nfor word in urlopen(WORD_URL).readlines():\n    WORDS.append(word.strip())\n\ndef convert(snippet, phrase): # 'list comprehension', reseach on the Internet\n\n    class_names = [w.capitalize() for w in\n                    random.sample(WORDS, snippet.count(\"%%%\"))]\n    other_names = random.sample(WORDS, snippet.count(\"***\"))\n    results = []\n    param_names = []\n\n    for i in range(0, snippet.count(\"@@@\")):\n        param_count = random.randint(1,3)\n        param_names.append(', '.join(random.sample(WORDS, param_count)))\n\n    for sentence in snippet, phrase:\n        result = sentence[:]\n\n        # fake class names\n        for word in class_names:\n            result = result.replace(\"%%%\", word, 1)\n\n        # fake other names\n        for word in other_names:\n            result = result.replace(\"***\", word, 1)\n\n        # fake parameter lists\n        for word in param_names:\n            result = result.replace(\"@@@\", word, 1)\n\n        results.append(result)\n\n    return results\n\n# keep going until until they hit CTRL-D\ntry:\n    while True:\n        snippets = PHRASES.keys()\n        random.shuffle(snippets)\n\n        for snippet in snippets:\n            phrase = PHRASES[snippet]\n            question, answer = convert(snippet, phrase)\n            if PHRASE_FIRST:\n                question, answer = answer, question\n\n            print question\n\n            raw_input(\"> \")\n            print \"ANSWER: %s\\n\\n\" % answer\nexcept EOFError:\n    print \"\\nBye\"",
            "title": "Exercise 41, Learning to Speak Object-Oriented"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-42-is-a-has-a-objects-and-classes",
            "text": "This exercise explains Exercise 41.   Inheritance:   is-a.  object.  instance of an object.  object of object.    has-a.  attribute.  not attribute.  object.       Animal is-a object.    class Animal(object):\n\n\n    pass   Dog is-a Animal, Animal is-a object.   class Dog(Animal):\n\n\n    def __init__(self, name):\n\n    ## Cat has-a name\n        self.name = name   Cat is-a Animal, Animal is-a object.   class Cat(Animal):\n\n\n    def __init__(self, name):\n    ## Cat has-a name\n        self.name = name   Person is-a object.   class Person(object):\n\n\n    def __init__(self, name):\n\n    ## Person has-a name\n        self.name = name\n\n    ## Person has-a pet of some kind, but the pet is specifies elsewhere...\n        self.pet = None   Employee is-a Person, Person is-a object.   class Employee(Person):\n\n\n    def __init__(self, name, salary):\n\n    ## Employee has-a name, because Person has-a name\n    ## super:\n        super(Employee, self).__init__(name)\n    ## Employee has-a salary\n        self.salary = salary   Fish is-a object.   class Fish(object):\n\n\n    ## no attributes like has-a name\n    pass   Salmon is-a Fish, Fish is-a object.   class Salmon(Fish):\n\n\n    ## no attributes like has-a name\n    pass   Halibut is-a Fish, Fish is-a object.   class Halibut(Fish):\n\n\n    ## no attributes like has-a name\n    pass   rover is-a instance of name, Dog has-a name.   rover = Dog(\"Rover\")   satan is-a instance of name, Cat has-a name.   satan = Cat(\"Satan\")   mary is-a instance of name, Person has-a name.   mary = Person(\"Mary\")   mary has-a Cat, Cat has-a name, satan, is-a Cat.   mary.pet = satan   frank is-a instance of name, salary, Employee has-a name, salary.   frank = Employee(\"Frank\", 120000)   frank has-a Dog, Dog has-a name, rover, is-a Dog.   frank.pet = rover   flipper is-a instance of Fish, Fish is-a object, both has-a not attributes.   flipper = Fish()   crouse is-a instance of Salmon, Salmon is-a Fish; both has-a not attribute.   crouse = Salmon()   harry is-a instance of Halibut, Halibut is-a Fish; both has-a not attribute.   harry = Halibut()   Wrap-up.   object\n    class Fish(object)\n        class Salmon(Fish)\n            crouse = Salmon()\n        class Halibut(Fish)\n            harry = Halibut()\n        flipper = Fish()\n    class Animal(object)\n        class Dog(Animal)\n            rover = Dog(\"Rover\") has-a name\n        class Cat(Animal)\n            satan = Cat(\"Satan\") has-a name\n    class Person(object)\n        mary.pet = satan has-a name, pet\n        class Employee(Person)\n            frank = Employee (\"Frank\", 120000) has-a name, salary\n            frank.pet = rover has-a pet   The concept of inheritance, and those of implicit inheritance, overridden inheritance, multiple inheritance, composition, alteration, super objects (or \u2018reinheritance\u2019) are explained in Exercise 44.",
            "title": "Exercise 42, Is-A, Has-A, Objects, and Classes"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-43-gothons-from-planet-percal-25",
            "text": "This Exercise is the first to prepare the final project (Exercise 52, the last chapter). Let\u2019s create a game, from A to Z. First, start by planning. This methodology is valuable for planning any kind of project or program.  Methodology  1- Write about the problem:  \u201cAliens have invaded a space ship and our hero has to go through a maze of rooms defeating them so he can escape into an escape pod to the planet below. The game will be more like a Zork or Adventure type game with text outputs and funny ways to die. The game will involve an engine that runs a map full of rooms or scenes. Each room will print its own description when the player enters it and then tell the engine what room to run next out of the map.\u201d  2- Describe each scene:   Death  This is when the player dies and should be something funny.    Central Corridor  This is the starting point and has a Gothon already standing there they have to defeat with a joke before continuing.    Laser Weapon Armory  This is where the hero gets a neutron bomb to blow up the ship before getting to the escape pod. It has a keypad the hero has to guess the number for.    The Bridge  Another battle scene with a Gothon where the hero places the bomb.    Escape Pod  Where the hero escapes but only after guessing the right escape pod.      3- Draw a map, write more descriptions.  4- Extract key concepts:   1 concept = 1 class.  Research them, deepen things.  Nouns = concepts = classes:  Alien  Player  Ship  Maze  Room  Scene  Gothon  Escape Pod  Planet  Map  Engine  Death  Central Corridor  Laser Weapon Armory  The Bridge    Verbs = functions.   This is par the PEP: classes should be in an explicit noun startin with a uppercased letter such as  class Central Corridor() . Functions should be verbs such as  def play(): .  5- Create a class Hierarchy and object Map   Make a class Hierarchy:  Map  Engine  Scene  Death  Central Corridor  Laser Weapon Armory  The Bridge  Escape Pod     PEP: I know from the description I\u2019m going to need a way to \u2018run\u2019 the engine, \u2018get the next scene\u2019 from the map, get the \u2018opening scene\u2019, and \u2018enter\u2019 a scene. I\u2019ll add those like this:   Map  next_scene  opening_scene  Engine  play  Scene  enter  Death  Central Corridor  Laser Weapon Armory  The Bridge  Escape Pod   All the scenes under another scene will inherit it; except \u2018enter\u2019: override it later.  6- Code the Classes and a Test to Run Them:   Turn:   - Map\n    - next_scene (verb)\n    - opening scene (verb)\n- Engine\n    - play (verb)\n- Scene\n    - enter (verb)\n    - Death\n    - Central Corridor\n    - Laser Weapon Armory\n    - The Bridge\n    - Escape Pod   Into:   class Map(object): \n    def __init__(self, start_scene):\n    def next_scene(self, start_scene):    \n    def opening_scene(self):\n\nclass Engine(object): \n    def __init__(self, scene_map):\n    def play(self):\n\nclass Scene(object):\n    def enter(self):\n\n    class CentralCorridor(Scene):\n        def enter(self):\n    class LaserWeaponArmory(Scene):\n        def enter(self):\n    class TheBridge(Scene):\n        def enter(self):\n    class EscapePod(Scene):\n        def enter(self):\n    class Death(Scene):\n        def enter(self):\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()   Into:   class Scene(object):\n\n    def enter(self):\n        pass\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map):\n        pass\n    def play(self):\n        pass\n\n\nclass Death(Scene):\n\n    def enter(self):\n        pass\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self):\n        pass\n\n\n    def enter(self):\n        pass\n\n\nclass TheBridge(Scene):\n    def enter(self):\n        pass\n\n\nclass EscapePod(Scene):\n\n    def enter(self):\n        pass\n\n\nclass Map(object):\n\n    def __init__(self, start_scene):\n        pass\n    def next_scene(self, scene_name):\n        pass\n    def opening_scene(self):\n        pass\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()   Start coding (first code skeleton).   class Scene(object):\n\n\n    def enter(self):\n\n        pass\n\nclass Engine(object):\n\n\n    def __init__(self, scene_map):\n\n        pass\n\n    def play(self):\n\n        pass\n\n\nclass Death(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass CentralCorridor(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass LaserWeaponArmory(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass TheBridge(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass EscapePod(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass Map(object):\n\n\n    def __init__(self, start_scene):\n\n        pass\n\n    def next_scene(self, scene_name):\n\n        pass\n\n    def opening_scene(self):\n\n        pass\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()   Improve the code.   # import two functions from two libraries\nfrom sys import exit\nfrom random import randint\n\n# class to generate child classes\nclass Scene(object):\n\n    def enter(self):\n\n        print \"This scene is not yet configured. Subclass it and implement enter().\"\n        exit(1)\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map):\n\n        self.scene_map = scene_map\n\n    def play(self):\n\n        current_scene = self.scene_map.opening_scene() # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below\n\n        last_scene = self.scene_map.next_scene('finished') # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below\n\n        while current_scene != last_scene:\n\n            next_scene_name = current_scene.enter() # function/method from class Scene(object) above\n\n            current_scene = self.scene_map.next_scene(next_scene_name) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object)\n\n        current_scene.enter() # use newly-created current_scene with function/method from class Scene(object) above\n\n\nclass Death(Scene):\n\n    quips = [\"You died.  You kinda suck at this.\", \"Your mom would be proud...if she were smarter.\", \"Such a louser.\", \"I have a small puppy that's better at this.\"] # a list (variable) where a random method will extract an element\n\n    def enter(self):\n\n        print Death.quips[randint(0, len(self.quips)-1)] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list)\n        exit(1)\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"The Gothons of Planet Percal #25 have invaded your ship and destroyed\"\n        print \"your entire crew.  You are the last surviving member and your last\"\n        print \"mission is to get the neutron destruct bomb from the Weapons Armory,\"\n        print \"put it in the bridge, and blow the ship up after getting into an \"\n        print \"escape pod.\"\n        print \"\\n\"\n        print \"You're running down the central corridor to the Weapons Armory when\"\n        print \"a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume\"\n        print \"flowing around his hate filled body.  He's blocking the door to the\"\n        print \"Armory and about to pull a weapon to blast you.\"\n\n        action = raw_input(\"shoot!/dodge!/tell a joke> \") \n\n        if action == \"shoot!\":\n            print \"Quick on the draw you yank out your blaster and fire it at the Gothon.\"\n            print \"His clown costume is flowing and moving around his body, which throws\"\n            print \"off your aim.  Your laser hits his costume but misses him entirely.  This\"\n            print \"completely ruins his brand new costume his mother bought him, which\"\n            print \"makes him fly into an insane rage and blast you repeatedly in the face until\"\n            print \"you are dead.  Then he eats you.\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \"dodge!\":\n            print \"Like a world class boxer you dodge, weave, slip and slide right\"\n            print \"as the Gothon's blaster cranks a laser past your head.\"\n            print \"In the middle of your artful dodge your foot slips and you\"\n            print \"bang your head on the metal wall and pass out.\"\n            print \"You wake up shortly after only to die as the Gothon stomps on\"\n            print \"your head and eats you.\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \"tell a joke\":\n            print \"Lucky for you they made you learn Gothon insults in the academy.\"\n            print \"You tell the one Gothon joke you know:\"\n            print \"Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr.\"\n            print \"The Gothon stops, tries not to laugh, then busts out laughing and can't move.\"\n            print \"While he's laughing you run up and shoot him square in the head\"\n            print \"putting him down, then jump through the Weapon Armory door.\"\n            return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        else:\n            print \"DOES NOT COMPUTE!\"\n            return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass LaserWeaponArmory(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"You do a dive roll into the Weapon Armory, crouch and scan the room\"\n        print \"for more Gothons that might be hiding.  It's dead quiet, too quiet.\"\n        print \"You stand up and run to the far side of the room and find the\"\n        print \"neutron bomb in its container.  There's a keypad lock on the box\"\n        print \"and you need the code to get the bomb out.  If you get the code\"\n        print \"wrong 10 times then the lock closes forever and you can't\"\n        print \"get the bomb.  The code is 3 digits.\"\n        code = \"%d%d%d\" %(1,2,3) #% (randint(1,9), randint(1,9), randint(1,9))\n        guess = raw_input(\"[keypad]> \")\n        guesses = 0\n\n        while guess != code and guesses < 10:\n            print \"BZZZZEDDD!\"\n            guesses += 1\n            guess = raw_input(\"[keypad]> \")\n\n        if guess == code:\n            print \"The container clicks open and the seal breaks, letting gas out.\"\n            print \"You grab the neutron bomb and run as fast as you can to the\"\n            print \"bridge where you must place it in the right spot.\"\n            return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \"The lock buzzes one last time and then you hear a sickening\"\n            print \"melting sound as the mechanism is fused together.\"\n            print \"You decide to sit there, and finally the Gothons blow up the\"\n            print \"ship from their ship and you die.\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass TheBridge(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"You burst onto the Bridge with the netron destruct bomb\"\n        print \"under your arm and surprise 5 Gothons who are trying to\"\n        print \"take control of the ship.  Each of them has an even uglier\"\n        print \"clown costume than the last.  They haven't pulled their\"\n        print \"weapons out yet, as they see the active bomb under your\"\n        print \"arm and don't want to set it off.\"\n\n        action = raw_input(\"throw the bomb/slowly place the bomb> \")\n\n        if action == \"throw the bomb\":\n            print \"In a panic you throw the bomb at the group of Gothons\"\n            print \"and make a leap for the door.  Right as you drop it a\"\n            print \"Gothon shoots you right in the back killing you.\"\n            print \"As you die you see another Gothon frantically try to disarm\"\n            print \"the bomb. You die knowing they will probably blow up when\"\n            print \"it goes off.\"\n            return 'death'\n\n        elif action == \"slowly place the bomb\":\n            print \"You point your blaster at the bomb under your arm\"\n            print \"and the Gothons put their hands up and start to sweat.\"\n            print \"You inch backward to the door, open it, and then carefully\"\n            print \"place the bomb on the floor, pointing your blaster at it.\"\n            print \"You then jump back through the door, punch the close button\"\n            print \"and blast the lock so the Gothons can't get out.\"\n            print \"Now that the bomb is placed you run to the escape pod to\"\n            print \"get off this tin can.\"\n            return 'escape_pod'\n        else:\n            print \"DOES NOT COMPUTE!\"\n            return \"the_bridge\" # input for class Map(object)'s dictionary of key:value; extract a function from another class    \n\n\nclass EscapePod(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"You rush through the ship desperately trying to make it to\"\n        print \"the escape pod before the whole ship explodes.  It seems like\"\n        print \"hardly any Gothons are on the ship, so your run is clear of\"\n        print \"interference.  You get to the chamber with the escape pods, and\"\n        print \"now need to pick one to take.  Some of them could be damaged\"\n        print \"but you don't have time to look.  There's 5 pods, which one\"\n        print \"do you take?\"\n\n        good_pod = 1#randint(1,5)\n        guess = raw_input(\"[pod #]> \")\n\n        if int(guess) != good_pod:\n            print \"You jump into pod %s and hit the eject button.\" % guess\n            print \"The pod escapes out into the void of space, then\"\n            print \"implodes as the hull ruptures, crushing your body\"\n            print \"into jam jelly.\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \"You jump into pod %s and hit the eject button.\" % guess\n            print \"The pod easily slides out into space heading to\"\n            print \"the planet below.  As it flies to the planet, you look\"\n            print \"back and see your ship implode then explode like a\"\n            print \"bright star, taking out the Gothon ship at the same\"\n            print \"time.  You won!\"\n            return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Finished(Scene):\n\n    def enter(self):\n\n        print \"You won! Good job.\"\n        return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Map(object):\n\n    scenes = {\n        'central_corridor': CentralCorridor(),\n        'laser_weapon_armory': LaserWeaponArmory(),\n        'the_bridge': TheBridge(),\n        'escape_pod': EscapePod(),\n        'death': Death(),\n        'finished': Finished(),\n    }\n\n    def __init__(self, start_scene):\n\n        self.start_scene = start_scene\n\n    def next_scene(self, scene_name):\n\n        val = Map.scenes.get(scene_name)\n        return val\n\n    def opening_scene(self):\n\n        return self.next_scene(self.start_scene)\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()   Improve\u2026   # import two functions from two libraries\nfrom sys import exit\nfrom random import randint\nimport time\nimport math\n\n# class to generate child classes\nclass Scene(object):\n\n    def enter(self):\n\n        print \"This scene is not yet configured. Subclass it and implement enter().\"\n        exit(1)\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map, hero):\n\n        self.scene_map = scene_map\n        self.hero = hero\n\n    def play(self):\n\n        current_scene = self.scene_map.opening_scene() # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below\n\n        last_scene = self.scene_map.next_scene('finished') # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below\n\n        while current_scene != last_scene: # True:\n            print \"\\n----------\"\n            next_scene_name = current_scene.enter(self.hero) # function/method from class Scene(object) above\n\n            current_scene = self.scene_map.next_scene(next_scene_name) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object)\n\n        current_scene.enter() # use newly-created current_scene with function/method from class Scene(object) above\n\n\nclass Death(Scene):\n\n    quips = [\"Death1\", \"Death2\", \"Death3\", \"Death4\"] # a list (variable) where a random method will extract an element\n\n    def enter(self, hero):\n\n        print Death.quips[randint(0, len(self.quips)-1)] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list)\n        exit(1)\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"Enter. Select.\"\n        action = raw_input(\"Pick one: a/b/c> \").upper() \n\n        if action == \"A\":\n            print \"Ouch!\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \"B\":\n            print \"Aye!\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \"C\":\n            print \"Good.\"\n            return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        else:\n            print \"DOES NOT COMPUTE!\"\n            return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass LaserWeaponArmory(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"Pick a 3-digit combinaison.\"\n        code = \"%d%d%d\" %(1,2,3) #% (randint(1,9), randint(1,9), randint(1,9))\n        print code\n        guess = raw_input(\"[keypad]> \")\n        guesses = 0\n\n        while guess != code and guesses < 10:\n            print \"BZZZZEDDD!\"\n            guesses += 1\n            guess = raw_input(\"[keypad]> \")\n\n        if guess == code:\n            print \"Click! Go!\"\n            return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \"Boom!\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass TheBridge(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"Bridge enigma.\"\n\n        action = raw_input(\"true/false> \").upper()\n\n        if action == \"TRUE\" or action == \"T\":\n            print \"It goes off.\"\n            return 'death'\n\n        elif action == \"FALSE\" or action == \"F\":\n            print \"Escape.\"\n            return 'escape_pod'\n        else:\n            print \"DOES NOT COMPUTE!\"\n            return \"the_bridge\" # input for class Map(object)'s dictionary of key:value; extract a function from another class    \n\n\nclass EscapePod(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \"You rush!\"\n\n        good_pod = 1 #randint(1,5)\n        guess = raw_input(\"[Pick a pod #]> \")\n\n        if int(guess) != good_pod:\n            print \"Oups!\"\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \"Good choice!\"\n            return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Win(Scene):\n\n    def enter(self, hero):\n        print \"You won! Good job.\"\n        return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        # exit(0)\n\n\nclass Final(Scene):\n\n    def enter(self, hero)\n\n        monster = Monster(\"Gothon\")\n        print \"%s, You now came across the final boss %s! Let's fight!!!\" % (hero.name, monster.name)\n        a_combat = Combat()\n        next_stage = a_combat.combat(hero, monster)\n        return next_stage\n\n\nclass Combat(object):\n\n    def combat(self, hero, monster): #combat between two roles\n\n        round = 1\n        while True:\n            print '='*30\n            print 'round %d' % round\n            print '='*30\n            print \"Your HP: %d\" % hero.hp\n            print \"%s's HP: %d\" % (monster.name, monster.hp)\n            print 'Which action do you want to take?'\n            print '-'*10\n            print '1) attack - Attack the enemy'\n            print '2) defend - Defend from being attacked, also will recover a bit'\n\n            try:\n                action = int(raw_input('> '))\n            except ValueError:\n                print \"Please enter a number!!\"\n                continue\n\n            # defending should be done before attacking\n            if action == 2:\n                hero.defend()\n\n            # action of monster, 1/5 possibility it will defends\n            monster_action = randint(1, 6)\n            if monster_action == 5:\n                monster.defend()\n\n            if action == 1:\n                hero.attack(monster)\n            elif action == 2:\n                pass\n            else:\n                print \"No such action!\"\n\n            if monster_action < 5:\n                monster.attack(hero)\n\n            # whether win or die\n            if hero.hp <= 0:\n                return 'death'\n\n            if monster.hp <= 0:\n                return 'win'\n\n            hero.rest()\n            monster.rest()\n\n            round += 1\n\n\nclass Map(object):\n\n    scenes = {\n        'central_corridor': CentralCorridor(),\n        'laser_weapon_armory': LaserWeaponArmory(),\n        'the_bridge': TheBridge(),\n        'escape_pod': EscapePod(),\n        'death': Death(),\n        'final_fight': Final(),\n        'win': Win(),\n        'finished': Finished(),\n    }\n\n    def __init__(self, start_scene):\n\n        self.start_scene = start_scene\n\n    def next_scene(self, scene_name):\n\n        val = Map.scenes.get(scene_name)\n        return val\n\n    def opening_scene(self):\n\n        return self.next_scene(self.start_scene)\n\n\nclass human(object):\n\n    defending = 0\n\n    def __init__(self, name):\n\n        self.name = name\n\n    def attack(self, target): # attack the target\n\n        percent = 0\n        time.sleep(1)\n        if target.defending == 1:\n            percent = float(self.power) / 10.0 + randint(0, 10)\n            target.hp = math.floor(target.hp - percent)\n        else:\n            percent = float(self.power) / 5.0 + randint(0, 10)\n            target.hp = math.floor(target.hp - percent)\n        print \"%s attack %s. %s's HP decreased by %d points.\" % (self.name, target.name, target.name, percent)\n\n    def defend(self): # be in the defending state\n\n        self.defending = 1\n        print \"%s is trying to defend.\" % self.name\n\n    def rest(self): # recover a bit after each round\n\n        if self.defending == 1:\n            percent = self.rate * 10 + randint(0, 10)\n        else:\n            percent = self.rate * 2 + randint(0, 10)\n        self.hp += percent\n        print \"%s's HP increased by %d after rest.\" % (self.name, percent)\n        self.defending = 0\n\n\nclass Hero(Human): # class for hero\n\n    hp = 1000\n    power = 200\n    rate = 5\n\n\nclass Monster(Human): # class for monster\n\n    hp = 5000\n    power = 250\n    rate = 5\n\n\na_map = Map('central_corridor')\na_hero = Hero('Joe')\na_game = Engine(a_map)\na_game.play()",
            "title": "Exercise 43, Gothons from Planet Percal #25"
        },
        {
            "location": "/Learn Python the Hard Way/#wrap-up",
            "text": "Draw a mindmap.  Draw a flowchart.  List all variables, data, other objects and add comments.  Build the modules (classes) and embed the primal code.  Refine.  Use a visualizing software.",
            "title": "Wrap up"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-44-inheritance-vs-composition",
            "text": "From the manual.",
            "title": "Exercise 44, Inheritance vs Composition"
        },
        {
            "location": "/Learn Python the Hard Way/#when-to-use-inheritance-or-composition",
            "text": "The question of \u2018inheritance versus composition\u2019 comes down to an attempt to solve the problem of reusable code.   You don\u2019t want to have duplicated code all over your software, since that\u2019s not clean and efficient.    Inheritance: solves this problem by creating a mechanism for you to have implied features in base classes.  Composition: solves this by giving you modules and the ability to call functions in other classes.   If both solutions solve the problem of reuse, then which one is appropriate in which situations? The answer is incredibly subjective, but I\u2019ll give you my three guidelines for when to do which:   Avoid multiple Inheritance at all costs, as it\u2019s too complex to be reliable. If you\u2019re stuck with it, then be prepared to know the class hierarchy and spend time finding where everything is coming from.  Use Composition to package code into modules that are used in many different unrelated places and situations.  Use Inheritance only when there are clearly related reusable pieces of code that fit under a single common concept or if you have to because of something you\u2019re using.   The thing to remember about object-oriented programming is that it is entirely a social convention programmers have created to package and share code. In that case, find out how they use things and then just adapt to the situation.",
            "title": "When to Use Inheritance or Composition"
        },
        {
            "location": "/Learn Python the Hard Way/#function-style",
            "text": "pep  Function = Method.  A class does things: name it as if it\u2019s a command you are giving to the class. Same as  pop  is saying \u2018pop this off the list\u2019.  Keep functions small and simple (PEP).  Class Style   Use the camel case:  SuperGoldFactory .  Minimize what  __init__  does. It should be simple to use.  Other class functions use the underscore format:  my_awesome_hair .  Be consistent in how you organize your function arguments. Function 1 takes  (dog, cat, user) , function 2 should take  (dog, cat, user) . Unless there is a good reason.  Variable should be self-contained. Limit importing from modules or globals.  Always have a class  Name(object)  on top of all.   Code Style   Give your code vertical space to read.  Read you code out loud to test it. Change the difficult passages to improve readibility.  Imitate other coders: find you style.  Respect others\u2019s style; be a team player.   Good Comments   Describe why you are doing doing what you are doing.  Write for the others.  Write sentences.  Avoid clutering the code though. Short sentences, to the point.  Review your comments.",
            "title": "Function Style"
        },
        {
            "location": "/Learn Python the Hard Way/#composition",
            "text": "In this code I\u2019m not using the name Parent, since there is not a parent-child is-a relationship. This is a has-a relationship, where Child has-a Other that it uses to get its work done.   class Other(object):\n\n    def implicit(self):\n\n        print \"OTHER implicit()\"\n\n    def override(self):\n\n        print \"OTHER override()\"\n\n    def altered(self):\n\n        print \"OTHER altered()\"\n\n\nclass Child(object):\n\n    def __init__(self):\n\n        self.other = Other() # initialize this class with Other(), when an instance is created, it will inherit the class member variables, class functions...\n\n    def implicit(self):\n\n        self.other.implicit() # call the other class function \n\n    def override(self):\n\n        print \"CHILD override()\"\n\n    def altered(self):\n\n        print \"CHILD, BEFORE OTHER altered()\"\n        self.other.altered() # call the other class function\n        print \"CHILD, AFTER OTHER altered()\"\n\n\nson = Child() # instance\n\nson.implicit()\nson.override()\nson.altered()",
            "title": "Composition"
        },
        {
            "location": "/Learn Python the Hard Way/#implicit-inheritance",
            "text": "Actions on the child imply an action on the parent.  The use of pass under the  class Child:  is how you tell Python that you want an empty block. This creates a class named  Child  but says that there\u2019s nothing new to define in it. Instead it will inherit all of its behavior from  Parent .  If you put functions in a base class (i.e.,  Parent ) then all subclasses (i.e.,  Child ) will automatically get those features. Very handy for repetitive code you need in many classes.  class Parent(object):\n\n    def implicit(self):\n\n        print \"PARENT implicit()\"\n\n\nclass Child(Parent):\n\n    pass\n\n\ndad = Parent()\nson = Child()",
            "title": "Implicit Inheritance"
        },
        {
            "location": "/Learn Python the Hard Way/#inherit-from-both-classes",
            "text": "Python has to look-up the possible function in the class hierarchy for both  Child  and  BadStuff , but it needs to do this in a consistent order. To do this Python uses \u201cmethod resolution order\u201d (MRO) and an algorithm called C3 to get it straight.  Because the MRO is complex and a well-defined algorithm is used, Python can\u2019t leave it to you to get the MRO right. Instead, Python gives you the  super()  function, which handles all of this for you in the places that you need the altering type of actions as I did in Child.altered. With  super()  you don\u2019t have to worry about getting this right, and Python will find the right function for you.  class SuperFun(Child, BadStuff):\n\n    pass",
            "title": "Inherit from both Classes"
        },
        {
            "location": "/Learn Python the Hard Way/#override-explicitly",
            "text": "Actions on the child override the action on the parent.  As you can see, it runs the  Parent.override  function because that variable (dad) is a Parent. But it also runs   Child.override  messages because son is an instance of  Child  and  Child  overrides that function by defining its own version.  class Parent(object):\n\n    def override(self):\n        print \"PARENT override()\"\n\n\nclass Child(Parent):\n\n    def override(self):\n\n        print \"CHILD override()\"\n\n\ndad = Parent()\nson = Child()\n\ndad.override()\nson.override()",
            "title": "Override Explicitly"
        },
        {
            "location": "/Learn Python the Hard Way/#alter-before-or-after",
            "text": "Actions on the child alter the action on the parent.  son.altered()  overrides Parent.altered the  Child.altered  version runs, and line 9 executes like you\u2019d expect. In this case I want to do a before and after, I want to use super to get the  Parent.altered  version. I call  super(Child, self).altered() , which is aware of inheritance and will get the  Parent  class for you. You should be able to read this as \u201ccall super with arguments  Child  and  self , then call the function altered on whatever it returns.\u201d At this point, the  Parent.altered  version of the function runs, and that prints out the Parent message. Finally, this returns from the  Parent.altered  and the  Child.altered  function continues to print out the after message.  class Parent(object):\n\n    def altered(self):\n\n        print \"PARENT altered()\"\n\nclass Child(Parent):\n\n    def altered(self):\n\n        print \"CHILD, BEFORE PARENT altered()\"\n        super(Child, self).altered()\n        print \"CHILD, AFTER PARENT altered()\"\n\n\ndad = Parent()\nson = Child()\n\ndad.altered()\nson.altered()",
            "title": "Alter Before or After"
        },
        {
            "location": "/Learn Python the Hard Way/#super",
            "text": "With  super ,  Child  reinherit from the  Parent .  The most common use of  super()  is actually in  __init__  functions in base classes. Then additional class functions.  class Child(Parent):\n\n    def __init__(self, stuff):\n\n        self.stuff = stuff\n        super(Child, self).__init__()",
            "title": "Super"
        },
        {
            "location": "/Learn Python the Hard Way/#all-three-combined",
            "text": "class Parent(object):\n\n    def override(self):\n\n        print \"PARENT override()\"\n\n    def implicit(self):\n\n        print \"PARENT implicit()\"\n\n    def altered(self):\n\n        print \"PARENT altered()\"\n\n\nclass Child(Parent):\n\n    def override(self):\n\n        print \"CHILD override()\"\n\n    def altered(self):\n\n        print \"CHILD, BEFORE PARENT altered()\"\n        super(Child, self).altered()\n        print \"CHILD, AFTER PARENT altered()\"\n\n\ndad = Parent()\nson = Child()\n\ndad.implicit()\nson.implicit()\n\ndad.override()\nson.override()\n\ndad.altered()\nson.altered()",
            "title": "All Three Combined"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-45-you-make-a-game",
            "text": "Use an existing project, Exercise 43 for example, and adapt it. This is a first draft for a project\u2026  1  Storyboarding tool.  Create a program that would question the user on its data and advise him on what would be the best graphics to use. Frame by frame, the user could build a presentation knowing slide 1 should be a histogram, slide 2 a scatter plot, etc.   2   Map  next_graph  opening comment (verb)    Engine  choose (verb)     Graph   proceed (verb)  CC pie  IC bar  TSC column, line  FDC column, line  CorC bar, dot     opening comment   general comment  storytelling  pie  compare data, y, n  y, stacked bar chart  n, pie chart with a maximum of 6 items    bar  simple series of data or items: h deviation bar chart (tornado), divide A from B (winners from losers, good markets from bad markets): h deviation bar chart (tornado), mix of two components (portfolio A items vs portfolio B items):sliding h bar chart, high-low spreads:range h bar chart, correlation x1 and x2 with y (two products, two markets\u2026 with): paired bar chart, compare aspects (with or without discount, red or blue paint):group h bar chart, components of the total: subdivided h bar chart\u2026    column  p.37, 42    line  p.39, 44-45    surface  p. 40    dot  p.49     3   Create module  3graph_story  (proof of concept).  The module presents a story in 3 graphs, according to 3 sets of data.   class Map(object):\n    def __init__(self,start):\n    def next(self, start):\n    def opening(self):\n\nclass Engine(object):\n    def __init__(self,graph_map):\n    def choose(self):\n\nclass Graph(object):\n    def proceed(self):\n\n    class 1CC(Graph):\n        def enter(self)\n            pie\n    class 2IC(Graph):\n        def enter(self):\n            bar\n    class 3TSC(Graph):\n        def enter(self):\n            column\n            line\n    class 4FDC(Graph):\n        def enter(self):\n            column\n            line\n    class 5CorC(Graph):\n        def enter(self):\n            bar\n            dot  And so on. Consult the manual to find out more",
            "title": "Exercise 45, You Make a Game"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-46-a-project-skeleton",
            "text": "The \u2018skeleton\u2019 directory (see below) or the directory framework will have all the basics you need to get a new project up and running.   It will have your project layout, automated tests, modules, and install scripts.   \\:.\n\u251c\u2500\u2500\u2500bin\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500docs\n\u251c\u2500\u2500\u2500NAME\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500tests\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u2514\u2500\u2500\u2500setup.py      \\:.  is the project parent directory or simply \u2018the\u2019 directory (its name is the project\u2019s name).  The directory is the place to be when launching scripts.  bin  is the main sub-directory. It contains the main script ( python bin/main.py ) for launching other scripts in the project; and launching tests as well. These script are often located in other sub-directories.  A sub-directory must be executable to import a module from it or execute a script in it: add an empty script called  __init__.py .  When a script is executed, it is compiled. Another script, with the extension  .pyc , appears. Same as for  __init__.pyc , as the sub-directory was executed (when a script import a script from another sub-directory for example).  tests  contains files to perform nose tests and unittests.  setup.py  is for documenting and distributing the project (when the project is compiled to be launched as a whole or frozen to be distributed).  You can add a  readme  file below (usually a text or markdown document).  The  docs  sub-directory contains all the project\u2019s documentation. It is more elaborate than the \u2018readme\u2019 file: manuals, explanations, logs, wikis, etc.  There can be other sub-directories for static such as images, web languages, etc.  Repeat this directory structure for every project.  To clean up the directory, in the bash:   find . -name \"*.pyc\" -print #display\nfind . -name \"*.pyc\" -exec rn{}\\; 1 remove\n\ngrep -r \"NAME\" * #search within files   In Linux, before running any script, be sure to set the path to the project directory.   Bash:   export PYTHONPATH=.\nexport PYTHONPATH=$PYTHONPATH:$PWD\n\nunset PYTHONPATH # to remove   In Windows, set the path in the environment variables. Otherwise, Python won\u2019t find the scripts.  PowerShell:   $env:PYTHONPATH = \"$env:PYTHONPATH;.\"   Or, on top of the Python code, below the shebang lnes, and before any other imports, add:   import sys\nsys.path # to view\nsys.path.append('.') # to set   Consult the manual to find out more.",
            "title": "Exercise 46, A Project Skeleton"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-47-automated-testing",
            "text": "",
            "title": "Exercise 47, Automated Testing"
        },
        {
            "location": "/Learn Python the Hard Way/#miscellaneous-notes",
            "text": "The project directory is \u2018ex47\u2019.  Test if you migrated the files correctly. In the bash:   grep -r NAME *  # no traces of 'NAME', from 'skeleton'\nfind . -name \"*.pyc\" -exec rm {} \\; # no trace of 'name'   When you launch a script, you launch it from the parent directory with  python bin/app.py .  In directory \u2018ex47\u2019, run tests with  python tests/BLAH_tests.py .   Consult the manual about testing. This is not covered in this notebook.   Testing must be done in the shell or in the bash. Make sure you\u2019re running the tests with nosetests not with just Python.   The important functions here are  assert_equal  which makes sure that variables you have set or paths you have built in a Room are actually what you think they are. If you get the wrong result, then nosetests will print out an error message so you can go figure it out.  In a script, when you import from another sub-directory, code:   from ex47.game import Room   When the imported script is in the same sub-directory, code:   from bin import Room   Consult the manual to find out more.",
            "title": "Miscellaneous notes"
        },
        {
            "location": "/Learn Python the Hard Way/#exercise-50-your-first-website",
            "text": "",
            "title": "Exercise 50, Your First Website"
        },
        {
            "location": "/Learn Python the Hard Way/#an-overview",
            "text": "Web framework for web projects.  Django (the real deal, but complicated), Flask (modest), Pyramid (scalable), etc.  Or the simple, yet powerful enough, web.py.  Exercises, from 50 to 52, are done with web.p",
            "title": "An overview"
        },
        {
            "location": "/Python Code Snippets/",
            "text": "CONTENT\n\n\nA Battleship Game\n\n\nAn Interactive Calendar\n\n\nA Gradebook for Students\n\n\nGuess Games\n\n\nRegex Tools\n\n\nRGB-HEX Converter\n\n\nProject DNA Analysis\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets. Python 2.\n\n\n\n\nA Battleship Game\n\u00b6\n\n\nbuild, board, grid, row, column, list, assign, random, value, loop, conditional, if, else, elif\n\n\nfrom random import randint\n\nboard = []\n\nfor x in range(5):\n    board.append([\"O\"] * 5)\n\ndef print_board(board):\n\n    for row in board:\n        print \" \".join(row)\n\nprint \"\\nLet's play Battleship! You have 4 strikes to sink by ship.\\n\"\nprint_board(board)\n\ndef random_row(board):\n\n    return randint(0, len(board) - 1)\n\ndef random_col(board):\n\n    return randint(0, len(board) - 1)\n\nship_row = random_row(board)\nship_col = random_col(board)\n#ship_row = 1 to test and fix to (1,1)\n#ship_col = 1\n\nfor turn in range(5):\n    turn += 1\n    if turn == 5:\n        print \"\\nGame Over\"\n        print \"The ship was here => I\\n\"\n        board[ship_row - 1][ship_col - 1] = \"I\"\n        print_board(board)\n        break\n    else:\n        print \"\\nTurn\", turn\n\n        guess_row = int(raw_input(\"Guess Row (1 to 5): \"))\n        guess_col = int(raw_input(\"Guess Col (1 to 5): \"))\n\n        if (guess_row == ship_row) and (guess_col == ship_col):\n            print \"\\nCongratulations! You sank my battleship!\\n\"\n\n            guess_row = guess_row - 1\n            guess_col = guess_col - 1\n            board[guess_row][guess_col] = \"S\"\n\n            print_board(board)\n            print \"\\nGame Over\"\n            break\n\n        elif (guess_row < 1 or guess_row > 5) or (guess_col < 1 or guess_col > 5):\n            print \"\\nOops, that's not even in the ocean.\\n\"\n\n        elif board[guess_row - 1][guess_col - 1] == \"X\":\n            print \"\\nYou guessed that one already.\\n\"\n            print_board(board)\n\n        else:\n            print \"\\nYou missed my battleship!\\n\"\n            board[guess_row - 1][guess_col - 1] = \"X\"\n            print_board(board)\n\n\n\n\n\nAn Interactive Calendar\n\u00b6\n\n\nadd, delete, update, exit, dictionary, loop, conditional, if, else, elif\n\n\nfrom time import sleep, strftime\n\nhis_name = raw_input(\"What is your first name? \")\nhis_name = str(his_name)\n# calendar will store the dates as keys and the events as values\n\ncalendar = {}\n\ndef welcome():\n\n    print(\"Welcome \" + his_name +\".\")\n\n    print(\"Calendar starting...\")\n    sleep(0.5)\n    print(\"Today is: \" + strftime(\"%A, %B %d, %Y\"))\n    print(\"It is currently: \" + strftime(\"%H:%M:%S\"))\n    sleep(0.5)\n\ndef start_calendar():\n\n    welcome()\n    print(\"What would you like to do?\")\n    print(calendar)\n    start = True\n\n    while start:\n        user_choice = raw_input(\"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \").upper()\n\n        if user_choice == 'V': # V\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty\")\n            else:\n                print(calendar)\n\n        elif user_choice == 'U': # U\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty\")\n            else:\n                print(calendar)\n                date = raw_input(\"What date? \")\n                update = raw_input(\"Enter the update: \")\n                # could be more control here...\n                calendar[date] = update # without checking if the date is valid or if it already exists (which could override things)!\n                print(\"Successful!\")\n                print(calendar)\n\n        elif user_choice == 'A': # A\n            event = raw_input(\"Enter event: \")\n            date = raw_input(\"Enter date (MM/DD/YYYY): \")\n            if (len(date) > 10 or int(date[6:]) < int(strftime(\"%Y\"))): # could be more control...\n                print(\"Invalid date format.\")\n                try_again = raw_input(\"Try Again? 'Y' for Yes, 'N' for No: \").upper()\n                if try_again == 'Y':\n                    continue #! break, continue, start is still True\n                else:\n                    start == False\n            else:\n                calendar[date] = event # without checking if the date is valid or if it already exists (which could override things)!\n                print(\"Successful!\")\n                print(calendar)\n\n        elif user_choice == 'D': # D\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty.\")\n            else:\n                print(calendar)\n                event = raw_input(\"What event? \") # could be more option like: What date?\n                for date in calendar.keys():\n                    if event == calendar[date]:\n                        del calendar[date] # del a[], [1], [\"a\"], [1:3], [5:], [:9], etc.\n                        print(\"Deleted.\")\n                        print(calendar)\n                    else:\n                        print(\"Incorrect.\")\n\n        elif user_choice == 'X': # X\n            start = False\n\n        else:\n            print(\"Invalid command.\")\n            break\n\nstart_calendar()\n\n\n\n\nA Gradebook for Students\n\u00b6\n\n\nstudents, marks, grades, compute, average, weighted\n\n\nFirst, create 3 dictionaries.\n\n\nSecond, add names, marks.\n\n\nlloyd = {\n    \"name\" : \"Lloyd\",\n    \"homework\" : [90.0, 97.0, 75.0, 92.0],\n    \"quizzes\" : [88.0, 40.0, 94.0],\n    \"tests\" : [75.0, 90.0]\n}\n\nalice = {\n    \"name\": \"Alice\",\n    \"homework\" : [100.0, 92.0, 98.0, 100.0],\n    \"quizzes\" : [82.0, 83.0, 91.0],\n    \"tests\" : [89.0, 97.0]\n}\n\ntyler = {\n    \"name\" : \"Tyler\",\n    \"homework\" : [0.0, 87.0, 75.0, 22.0],\n    \"quizzes\" : [0.0, 75.0, 78.0],\n    \"tests\" : [100.0, 100.0]\n}\n\n\n\n\nThird, make a list.\n\n\nstudents= [lloyd, alice, tyler]\n\ncases = [\"homework\", \"quizzes\", \"tests\"]\n\nw_calc = [0.10, 0.30, 0.60]\n\nall_average = 0.0\n\n\n\n\nPrint out.\n\n\nprint \"\\nStudents' Grades\".upper()\n\nprint \"\"\n\nfor student in students:\n    print student[\"name\"].upper()\n    print \"Homework\"\n    print student[\"homework\"]\n    print \"Quizzes\"\n    print student[\"quizzes\"]\n    print \"Tests\"\n    print student[\"tests\"]\n    print \"\"\n\n\n\n\nCompute averages.\n\n\ndef average(numbers):\n\n    total = sum(numbers)\n    temp = float(total) / len(numbers)\n    return temp\n\nprint \"Students' Averages\".upper()\n\nprint \"\"\n\nfor c in cases:\n    cc = c.upper()\n    print cc\n    for student in students:\n        numbers = student[c]\n        calc = round(average(numbers),1)\n        print student[\"name\"]\n        print calc\n    print \"\"\n\n\n\n\nCompute weighted averages.\n\n\ndef w_average(marks):\n\n    #w_calc = [0.10, 0.30, 0.60]\n    s_calc = 0\n    w = 0\n    while w < len(w_calc):\n        s_calc += w_calc[w] * marks[w]\n        w += 1\n    return s_calc\n\ndef get_letter_grade(score):\n\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"\n\ndef get_class_average(ind):\n    class_total = round(ind / len(students), 1)\n    return class_total\n\nprint \"Students' Weighted Average\".upper()\n\nprint \" Ponderation [Homeworks, Quizzes, Tests]: [\"+str(float(w_calc[0])*100)+\", \"+str(float(w_calc[1])*100)+\", \"+str(float(w_calc[2])*100)+\"]\"\n\nprint \"\"\n\nfor student in students:\n    print(student[\"name\"] + \"'s marks are:\").upper()\n    l_calc = []\n    for c in cases:    \n        numbers = student[c]\n        calc = round(average(numbers),1)\n        l_calc.append(calc)\n    print l_calc\n    print(\"For a weighted average of:\")\n    ind_average = round(w_average(l_calc),1)\n    print ind_average\n    print(\"Standing for a:\")\n    print get_letter_grade(ind_average)\n    all_average += ind_average\n    print \"\"\n\nprint(\"Finally, The class average is:\").upper()\nprint get_class_average(all_average)\n\n\n\n\nGuess Games\n\u00b6\n\n\nrandom, generate, number, conditional, if, else, ifel, loop\n\n\nGuess a number.\n\n\nimport random\n\nprint \"Lucky Numbers! 3 numbers will be generated.\"\nprint \"If one of them is a '5', you lose!\"\n\ncount = 0\n\nwhile count < 3:\n    num = random.randint(1, 6)\n    print num\n    if num == 5:\n        print \"Sorry, you lose!\"\n        break\n    count += 1\nelse:\n    print \"You win!\"\n\n\n\n\nGuess a number (more).\n\n\nfrom random import randint\n\n# Generates a number from 1 through 10 inclusive\nrandom_number = randint(1, 10)\n\n# print random_number\nguesses_left = 3\nprint \"Guess right!\"\n\nwhile guesses_left > 0:\n    print \"You have \"+str(guesses_left)+\" attempts.\"\n    guess = raw_input(\"Guess a number from 1 to 10: \")\n    if int(guess) == random_number:\n        print \"You win!\"\n        break\n    elif guesses_left == 1:\n        print \"You lose.\"\n        break\n    else:\n        guesses_left -= 1\n        print \"Try again.\"\n\n\n\n\nRoll a dice.\n\n\nfrom random import randint\nfrom time import sleep\n\ndef get_user_guess():\n\n    user_guess = int(raw_input(\"Guess a number: \"))\n    return user_guess\n\ndef roll_dice(number_of_sides):\n\n    first_roll = randint(1, number_of_sides)\n    second_roll = randint(1, number_of_sides)\n    max_value = number_of_sides * 2\n    print \"The maximum value is: \"+str(max_value)\n    sleep(1)\n    user_guess = get_user_guess()\n    if user_guess > max_value:\n        print \"Your guess is higher than the max allowed (\"+str(max_value)+\"). Please, take another guess.\"\n        return # exit the if block is condition met\n    else:\n        print \"Rolling...\"\n        sleep(1)\n        print \"First roll is: %d\" % (first_roll)\n        sleep(1)\n        print \"Second roll is: %d\" % (second_roll)\n        total_roll = first_roll + second_roll\n        print \"Result...\"\n        sleep(1)\n        if user_guess > total_roll:\n            print \"You win since your guess, \"+str(user_guess)+\", is greater than the total roll, \"+str(total_roll)\n            return # exit\n        else:\n            print \"You lose!\"\n            return # exit\n\nroll_dice(6)\n\n\n\n\nRock, paper, Scissors.\n\n\nfrom random import randint\nfrom time import sleep\n\noptions = [\"R\", \"P\", \"S\"]\nLOSE = \"You lost!\" # constant, uppercase\nWIN = \"You win!\"\n\ndef decide_winner(user_choice, computer_choice):\n\n    print(\"You picked: \"+str(user_choice))\n    print \"Computer selecting...\"\n\n    sleep(1)\n\n    print(\"Computer picks: \"+str(computer_choice))\n\n    user_choice_index = options.index(user_choice)\n    computer_choice_index = options.index(computer_choice) # !!!!!\n\n    if user_choice_index == computer_choice_index:\n        print \"Tie!\"\n    elif user_choice_index == 0 and computer_choice_index == 2:\n        print WIN\n    elif user_choice_index == 1 and computer_choice_index == 0:\n        print WIN\n    elif user_choice_index == 2 and computer_choice_index == 1:\n        print WIN\n    elif user_choice_index > 2:\n        print \"Invalid choice!!!\"\n    else:\n        print LOSE\n\ndef play_RPS():\n\n    print \"Let's pay Rock-Paper-Scissors\"\n\n    user_choice = raw_input(\"Select R for Rock, P for Paper, or S for Scissors: \")\n\n    sleep(1)\n\n    user_choice = user_choice.upper()\n    # computer_choice = options[randint(0,2)] \n    # pull out an element from a list, the 1st (0) out of 3 (2)\n\n    computer_choice = options[randint(0,len(options)-1)] \n    # This will ensure that if we ever add more options to the game, we won't have to change this line of code.\n\n    decide_winner(user_choice, computer_choice)\n\nplay_RPS()\n\n\n\n\nRegex Tools\n\u00b6\n\n\nRemove vowels\n\n\ndef anti_vowel(text):\n\n    vowels = \"aAeEiIoOuU\"\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\"\")\n    return text\n\nprint anti_vowel(\"allo\")\n\n\n\n\nRemove all but punctuation.\n\n\ndef anti_vowel(text):\n\n    text = text.lower()\n    vowels = \"abcdefghijklmnopqrstuvwxyz1234567890$-\"\n\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\"\")\n    for char in text:\n        if char == \" \":\n            text = text.replace(char,\"\")\n    return text\n\nprint anti_vowel(\"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\\"ID\\\" associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\")\n\n\n\n\nScrape a text.\n\n\nurllib2, scrape, scrapy, parse, parser, split, extract, subset, join, project, gutenberg, split, conditional, count, occurences\n\n\nimport urllib2\n\nresponse = urllib2.urlopen('http://gutenberg.org/')\n\n# find Les Miserables by Victor Hugo\n# http://www.gutenberg.org/ebooks/135\n# the book is available in HTML, epub with images, w/o images, kindle with images, w/o images, and more...\n\nresponse = urllib2.urlopen('http://www.gutenberg.org/files/135/135-h/135-h.htm')\nhtml = response.read()\n\nprint html\n\nsad = 0\n\nlist_of_words = html.split(' ')\n\nfor word in list_of_words:\n    if word == 'sad':\n        sad += 1\n\nprint sad # count occurences\n\n\n\n\nScrabble score.\n\n\ndictionary, count, conditonal, if, loop\n\n\nscore = {\"a\": 1, \"c\": 3, \"b\": 3, \"e\": 1, \"d\": 2, \"g\": 2, \n         \"f\": 4, \"i\": 1, \"h\": 4, \"k\": 5, \"j\": 8, \"m\": 3, \n         \"l\": 1, \"o\": 1, \"n\": 1, \"q\": 10, \"p\": 3, \"s\": 1, \n         \"r\": 1, \"u\": 1, \"t\": 1, \"w\": 4, \"v\": 4, \"y\": 4, \n         \"x\": 8, \"z\": 10}\n\ndef scrabble_score(word):\n\n    word2 = word.lower()\n\n    print word2+\":\",\n    points = 0\n    for letter in word2:\n        if letter == str(letter):\n            points += score[letter]\n    return points\n\nprint scrabble_score(\"ab\")\nprint scrabble_score(\"allo\")\nprint scrabble_score(\"xylophone\")\nprint scrabble_score(\"coding\")\nprint scrabble_score(\"yak\")\n\n\n\n\nRGB-HEX Converter\n\u00b6\n\n\nconvert, bitwise, hexadecimal, hex, rgb, color\n\n\ndef rgb_hex():\n\n    invalid_msg = \"Invalid entry\"\n    red = int(raw_input(\"Enter a 'red' (R) value, from 0 to 255: \"))\n    if red < 0 or red > 255:\n        print invalid_msg\n        return # return will exit the function, w/o return, the function jumps to the next line...\n\n    green = int(raw_input(\"Enter a 'green' (G) value, from 0 to 255: \"))\n    if green < 0 or green > 255:\n        print invalid_msg\n        return\n\n    blue = int(raw_input(\"Enter a 'blue' (B) value, from 0 to 255: \"))\n    if blue < 0 or blue > 255:\n        print invalid_msg\n        return\n\n    val = red << 16 + green << 8 + blue\n    # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character.\n    # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\n    # Become familiar with bits by reading more here.\n    print \"%s\" %(hex(val)[2:].upper()) # string formatting\n\ndef hex_rgb():\n\n    invalid_msg = \"Invalid entry\"\n    hex_val = raw_input(\"Enter a color (six hexadecimal digits): \")\n    if len(hex_val) != 6:\n        print \"Invalid Entry\"\n    else:\n        hex_val = int(hex_val, 16)\n    two_hex_digits = 2 ** 8\n    blue = hex_val % two_hex_digits\n    hex_val = hex_val >> 8\n    green = hex_val % two_hex_digits\n    hex_val = hex_val >> 8\n    red = hex_val % two_hex_digits\n    print \"Red: %s Green: %s Blue: %s\" %(red, green,blue)\n\ndef convert():\n\n    while True:\n        option = str(raw_input(\"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \"))\n        if option == '1':\n            print \"RGB to Hex...\"\n            rgb_hex()\n        elif option == '2':\n            print \"Hex to RGB...\"\n            hex_rgb()\n        elif option == 'X' or option == 'x':\n            break\n        else:\n            print \"Error\"\n\nconvert()\n\n\n\n\nProject DNA Analysis\n\u00b6\n\n\nGiven the three suspects\u2019 DNA and the sample DNA retrieved from the keyboard, figure out who the spy is!\n\n\nlist, open, close, file, read, line, loop, conditional, if, match\n\n\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n\n    dna_data = \"\" # empty string\n\n    with open(dna_file, \"r\") as f: # f = open(dna_file, \"r\"); with, as\n        for line in f:\n            dna_data += line\n        return dna_data\n\ndef dna_codons(dna):\n\n    codons = []\n    for i in range(0,len(dna),3): # slice strings of 3 letters\n        if i+3 < len(dna): # make sure that you don't add a string to the codon list that isn't at least 3 letters long\n            codons.append(dna[i:i+3]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3\n    return codons\n\ndef match_dna(dna):\n\n    matches = 0\n    for codon in dna:\n        if codon in sample: # if ,in\n            matches += 1\n    return matches\n\ndef is_criminal(dna_sample):\n\n    dna_data = read_dna(dna_sample)\n    codons = dna_codons(dna_data)\n    num_matches = match_dna(codons)\n    if num_matches >= 3:\n        print((dna_sample)[:-4]).upper(),\n        print(\": number of matches = \" + str(num_matches) + \"; the investigation will proceed further more with this suspect.\")\n    else:\n        print((dna_sample)[:-4]).upper(),\n        print(\": no evidence; the suspect can be freed.\")\n\na = \"suspect1.txt\"\nis_criminal(a)\n\na = \"suspect2.txt\"\nis_criminal(a)\n\na = \"suspect3.txt\"\nis_criminal(a)\n\n\n\n\nsuspect1.txt\n\n\nATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT\n\n\n\n\nsuspect2.txt\n\n\nCCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG\n\n\n\n\nsuspect3.txt\n\n\nTCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA",
            "title": "Python Code Snippets"
        },
        {
            "location": "/Python Code Snippets/#an-interactive-calendar",
            "text": "add, delete, update, exit, dictionary, loop, conditional, if, else, elif  from time import sleep, strftime\n\nhis_name = raw_input(\"What is your first name? \")\nhis_name = str(his_name)\n# calendar will store the dates as keys and the events as values\n\ncalendar = {}\n\ndef welcome():\n\n    print(\"Welcome \" + his_name +\".\")\n\n    print(\"Calendar starting...\")\n    sleep(0.5)\n    print(\"Today is: \" + strftime(\"%A, %B %d, %Y\"))\n    print(\"It is currently: \" + strftime(\"%H:%M:%S\"))\n    sleep(0.5)\n\ndef start_calendar():\n\n    welcome()\n    print(\"What would you like to do?\")\n    print(calendar)\n    start = True\n\n    while start:\n        user_choice = raw_input(\"Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \").upper()\n\n        if user_choice == 'V': # V\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty\")\n            else:\n                print(calendar)\n\n        elif user_choice == 'U': # U\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty\")\n            else:\n                print(calendar)\n                date = raw_input(\"What date? \")\n                update = raw_input(\"Enter the update: \")\n                # could be more control here...\n                calendar[date] = update # without checking if the date is valid or if it already exists (which could override things)!\n                print(\"Successful!\")\n                print(calendar)\n\n        elif user_choice == 'A': # A\n            event = raw_input(\"Enter event: \")\n            date = raw_input(\"Enter date (MM/DD/YYYY): \")\n            if (len(date) > 10 or int(date[6:]) < int(strftime(\"%Y\"))): # could be more control...\n                print(\"Invalid date format.\")\n                try_again = raw_input(\"Try Again? 'Y' for Yes, 'N' for No: \").upper()\n                if try_again == 'Y':\n                    continue #! break, continue, start is still True\n                else:\n                    start == False\n            else:\n                calendar[date] = event # without checking if the date is valid or if it already exists (which could override things)!\n                print(\"Successful!\")\n                print(calendar)\n\n        elif user_choice == 'D': # D\n            if len(calendar.keys()) < 1:\n                print(\"The calendar is empty.\")\n            else:\n                print(calendar)\n                event = raw_input(\"What event? \") # could be more option like: What date?\n                for date in calendar.keys():\n                    if event == calendar[date]:\n                        del calendar[date] # del a[], [1], [\"a\"], [1:3], [5:], [:9], etc.\n                        print(\"Deleted.\")\n                        print(calendar)\n                    else:\n                        print(\"Incorrect.\")\n\n        elif user_choice == 'X': # X\n            start = False\n\n        else:\n            print(\"Invalid command.\")\n            break\n\nstart_calendar()",
            "title": "An Interactive Calendar"
        },
        {
            "location": "/Python Code Snippets/#a-gradebook-for-students",
            "text": "students, marks, grades, compute, average, weighted  First, create 3 dictionaries.  Second, add names, marks.  lloyd = {\n    \"name\" : \"Lloyd\",\n    \"homework\" : [90.0, 97.0, 75.0, 92.0],\n    \"quizzes\" : [88.0, 40.0, 94.0],\n    \"tests\" : [75.0, 90.0]\n}\n\nalice = {\n    \"name\": \"Alice\",\n    \"homework\" : [100.0, 92.0, 98.0, 100.0],\n    \"quizzes\" : [82.0, 83.0, 91.0],\n    \"tests\" : [89.0, 97.0]\n}\n\ntyler = {\n    \"name\" : \"Tyler\",\n    \"homework\" : [0.0, 87.0, 75.0, 22.0],\n    \"quizzes\" : [0.0, 75.0, 78.0],\n    \"tests\" : [100.0, 100.0]\n}  Third, make a list.  students= [lloyd, alice, tyler]\n\ncases = [\"homework\", \"quizzes\", \"tests\"]\n\nw_calc = [0.10, 0.30, 0.60]\n\nall_average = 0.0  Print out.  print \"\\nStudents' Grades\".upper()\n\nprint \"\"\n\nfor student in students:\n    print student[\"name\"].upper()\n    print \"Homework\"\n    print student[\"homework\"]\n    print \"Quizzes\"\n    print student[\"quizzes\"]\n    print \"Tests\"\n    print student[\"tests\"]\n    print \"\"  Compute averages.  def average(numbers):\n\n    total = sum(numbers)\n    temp = float(total) / len(numbers)\n    return temp\n\nprint \"Students' Averages\".upper()\n\nprint \"\"\n\nfor c in cases:\n    cc = c.upper()\n    print cc\n    for student in students:\n        numbers = student[c]\n        calc = round(average(numbers),1)\n        print student[\"name\"]\n        print calc\n    print \"\"  Compute weighted averages.  def w_average(marks):\n\n    #w_calc = [0.10, 0.30, 0.60]\n    s_calc = 0\n    w = 0\n    while w < len(w_calc):\n        s_calc += w_calc[w] * marks[w]\n        w += 1\n    return s_calc\n\ndef get_letter_grade(score):\n\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"\n\ndef get_class_average(ind):\n    class_total = round(ind / len(students), 1)\n    return class_total\n\nprint \"Students' Weighted Average\".upper()\n\nprint \" Ponderation [Homeworks, Quizzes, Tests]: [\"+str(float(w_calc[0])*100)+\", \"+str(float(w_calc[1])*100)+\", \"+str(float(w_calc[2])*100)+\"]\"\n\nprint \"\"\n\nfor student in students:\n    print(student[\"name\"] + \"'s marks are:\").upper()\n    l_calc = []\n    for c in cases:    \n        numbers = student[c]\n        calc = round(average(numbers),1)\n        l_calc.append(calc)\n    print l_calc\n    print(\"For a weighted average of:\")\n    ind_average = round(w_average(l_calc),1)\n    print ind_average\n    print(\"Standing for a:\")\n    print get_letter_grade(ind_average)\n    all_average += ind_average\n    print \"\"\n\nprint(\"Finally, The class average is:\").upper()\nprint get_class_average(all_average)",
            "title": "A Gradebook for Students"
        },
        {
            "location": "/Python Code Snippets/#guess-games",
            "text": "random, generate, number, conditional, if, else, ifel, loop  Guess a number.  import random\n\nprint \"Lucky Numbers! 3 numbers will be generated.\"\nprint \"If one of them is a '5', you lose!\"\n\ncount = 0\n\nwhile count < 3:\n    num = random.randint(1, 6)\n    print num\n    if num == 5:\n        print \"Sorry, you lose!\"\n        break\n    count += 1\nelse:\n    print \"You win!\"  Guess a number (more).  from random import randint\n\n# Generates a number from 1 through 10 inclusive\nrandom_number = randint(1, 10)\n\n# print random_number\nguesses_left = 3\nprint \"Guess right!\"\n\nwhile guesses_left > 0:\n    print \"You have \"+str(guesses_left)+\" attempts.\"\n    guess = raw_input(\"Guess a number from 1 to 10: \")\n    if int(guess) == random_number:\n        print \"You win!\"\n        break\n    elif guesses_left == 1:\n        print \"You lose.\"\n        break\n    else:\n        guesses_left -= 1\n        print \"Try again.\"  Roll a dice.  from random import randint\nfrom time import sleep\n\ndef get_user_guess():\n\n    user_guess = int(raw_input(\"Guess a number: \"))\n    return user_guess\n\ndef roll_dice(number_of_sides):\n\n    first_roll = randint(1, number_of_sides)\n    second_roll = randint(1, number_of_sides)\n    max_value = number_of_sides * 2\n    print \"The maximum value is: \"+str(max_value)\n    sleep(1)\n    user_guess = get_user_guess()\n    if user_guess > max_value:\n        print \"Your guess is higher than the max allowed (\"+str(max_value)+\"). Please, take another guess.\"\n        return # exit the if block is condition met\n    else:\n        print \"Rolling...\"\n        sleep(1)\n        print \"First roll is: %d\" % (first_roll)\n        sleep(1)\n        print \"Second roll is: %d\" % (second_roll)\n        total_roll = first_roll + second_roll\n        print \"Result...\"\n        sleep(1)\n        if user_guess > total_roll:\n            print \"You win since your guess, \"+str(user_guess)+\", is greater than the total roll, \"+str(total_roll)\n            return # exit\n        else:\n            print \"You lose!\"\n            return # exit\n\nroll_dice(6)  Rock, paper, Scissors.  from random import randint\nfrom time import sleep\n\noptions = [\"R\", \"P\", \"S\"]\nLOSE = \"You lost!\" # constant, uppercase\nWIN = \"You win!\"\n\ndef decide_winner(user_choice, computer_choice):\n\n    print(\"You picked: \"+str(user_choice))\n    print \"Computer selecting...\"\n\n    sleep(1)\n\n    print(\"Computer picks: \"+str(computer_choice))\n\n    user_choice_index = options.index(user_choice)\n    computer_choice_index = options.index(computer_choice) # !!!!!\n\n    if user_choice_index == computer_choice_index:\n        print \"Tie!\"\n    elif user_choice_index == 0 and computer_choice_index == 2:\n        print WIN\n    elif user_choice_index == 1 and computer_choice_index == 0:\n        print WIN\n    elif user_choice_index == 2 and computer_choice_index == 1:\n        print WIN\n    elif user_choice_index > 2:\n        print \"Invalid choice!!!\"\n    else:\n        print LOSE\n\ndef play_RPS():\n\n    print \"Let's pay Rock-Paper-Scissors\"\n\n    user_choice = raw_input(\"Select R for Rock, P for Paper, or S for Scissors: \")\n\n    sleep(1)\n\n    user_choice = user_choice.upper()\n    # computer_choice = options[randint(0,2)] \n    # pull out an element from a list, the 1st (0) out of 3 (2)\n\n    computer_choice = options[randint(0,len(options)-1)] \n    # This will ensure that if we ever add more options to the game, we won't have to change this line of code.\n\n    decide_winner(user_choice, computer_choice)\n\nplay_RPS()",
            "title": "Guess Games"
        },
        {
            "location": "/Python Code Snippets/#regex-tools",
            "text": "Remove vowels  def anti_vowel(text):\n\n    vowels = \"aAeEiIoOuU\"\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\"\")\n    return text\n\nprint anti_vowel(\"allo\")  Remove all but punctuation.  def anti_vowel(text):\n\n    text = text.lower()\n    vowels = \"abcdefghijklmnopqrstuvwxyz1234567890$-\"\n\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\"\")\n    for char in text:\n        if char == \" \":\n            text = text.replace(char,\"\")\n    return text\n\nprint anti_vowel(\"The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\\"ID\\\" associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\")  Scrape a text.  urllib2, scrape, scrapy, parse, parser, split, extract, subset, join, project, gutenberg, split, conditional, count, occurences  import urllib2\n\nresponse = urllib2.urlopen('http://gutenberg.org/')\n\n# find Les Miserables by Victor Hugo\n# http://www.gutenberg.org/ebooks/135\n# the book is available in HTML, epub with images, w/o images, kindle with images, w/o images, and more...\n\nresponse = urllib2.urlopen('http://www.gutenberg.org/files/135/135-h/135-h.htm')\nhtml = response.read()\n\nprint html\n\nsad = 0\n\nlist_of_words = html.split(' ')\n\nfor word in list_of_words:\n    if word == 'sad':\n        sad += 1\n\nprint sad # count occurences  Scrabble score.  dictionary, count, conditonal, if, loop  score = {\"a\": 1, \"c\": 3, \"b\": 3, \"e\": 1, \"d\": 2, \"g\": 2, \n         \"f\": 4, \"i\": 1, \"h\": 4, \"k\": 5, \"j\": 8, \"m\": 3, \n         \"l\": 1, \"o\": 1, \"n\": 1, \"q\": 10, \"p\": 3, \"s\": 1, \n         \"r\": 1, \"u\": 1, \"t\": 1, \"w\": 4, \"v\": 4, \"y\": 4, \n         \"x\": 8, \"z\": 10}\n\ndef scrabble_score(word):\n\n    word2 = word.lower()\n\n    print word2+\":\",\n    points = 0\n    for letter in word2:\n        if letter == str(letter):\n            points += score[letter]\n    return points\n\nprint scrabble_score(\"ab\")\nprint scrabble_score(\"allo\")\nprint scrabble_score(\"xylophone\")\nprint scrabble_score(\"coding\")\nprint scrabble_score(\"yak\")",
            "title": "Regex Tools"
        },
        {
            "location": "/Python Code Snippets/#rgb-hex-converter",
            "text": "convert, bitwise, hexadecimal, hex, rgb, color  def rgb_hex():\n\n    invalid_msg = \"Invalid entry\"\n    red = int(raw_input(\"Enter a 'red' (R) value, from 0 to 255: \"))\n    if red < 0 or red > 255:\n        print invalid_msg\n        return # return will exit the function, w/o return, the function jumps to the next line...\n\n    green = int(raw_input(\"Enter a 'green' (G) value, from 0 to 255: \"))\n    if green < 0 or green > 255:\n        print invalid_msg\n        return\n\n    blue = int(raw_input(\"Enter a 'blue' (B) value, from 0 to 255: \"))\n    if blue < 0 or blue > 255:\n        print invalid_msg\n        return\n\n    val = red << 16 + green << 8 + blue\n    # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character.\n    # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\n    # Become familiar with bits by reading more here.\n    print \"%s\" %(hex(val)[2:].upper()) # string formatting\n\ndef hex_rgb():\n\n    invalid_msg = \"Invalid entry\"\n    hex_val = raw_input(\"Enter a color (six hexadecimal digits): \")\n    if len(hex_val) != 6:\n        print \"Invalid Entry\"\n    else:\n        hex_val = int(hex_val, 16)\n    two_hex_digits = 2 ** 8\n    blue = hex_val % two_hex_digits\n    hex_val = hex_val >> 8\n    green = hex_val % two_hex_digits\n    hex_val = hex_val >> 8\n    red = hex_val % two_hex_digits\n    print \"Red: %s Green: %s Blue: %s\" %(red, green,blue)\n\ndef convert():\n\n    while True:\n        option = str(raw_input(\"Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \"))\n        if option == '1':\n            print \"RGB to Hex...\"\n            rgb_hex()\n        elif option == '2':\n            print \"Hex to RGB...\"\n            hex_rgb()\n        elif option == 'X' or option == 'x':\n            break\n        else:\n            print \"Error\"\n\nconvert()",
            "title": "RGB-HEX Converter"
        },
        {
            "location": "/Python Code Snippets/#project-dna-analysis",
            "text": "Given the three suspects\u2019 DNA and the sample DNA retrieved from the keyboard, figure out who the spy is!  list, open, close, file, read, line, loop, conditional, if, match  sample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n\n    dna_data = \"\" # empty string\n\n    with open(dna_file, \"r\") as f: # f = open(dna_file, \"r\"); with, as\n        for line in f:\n            dna_data += line\n        return dna_data\n\ndef dna_codons(dna):\n\n    codons = []\n    for i in range(0,len(dna),3): # slice strings of 3 letters\n        if i+3 < len(dna): # make sure that you don't add a string to the codon list that isn't at least 3 letters long\n            codons.append(dna[i:i+3]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3\n    return codons\n\ndef match_dna(dna):\n\n    matches = 0\n    for codon in dna:\n        if codon in sample: # if ,in\n            matches += 1\n    return matches\n\ndef is_criminal(dna_sample):\n\n    dna_data = read_dna(dna_sample)\n    codons = dna_codons(dna_data)\n    num_matches = match_dna(codons)\n    if num_matches >= 3:\n        print((dna_sample)[:-4]).upper(),\n        print(\": number of matches = \" + str(num_matches) + \"; the investigation will proceed further more with this suspect.\")\n    else:\n        print((dna_sample)[:-4]).upper(),\n        print(\": no evidence; the suspect can be freed.\")\n\na = \"suspect1.txt\"\nis_criminal(a)\n\na = \"suspect2.txt\"\nis_criminal(a)\n\na = \"suspect3.txt\"\nis_criminal(a)  suspect1.txt  ATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT  suspect2.txt  CCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG  suspect3.txt  TCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA",
            "title": "Project DNA Analysis"
        },
        {
            "location": "/Introduction to Python/",
            "text": "CONTENT\n\n\n1, A Good Way to Start (Crash Courses).\n\n\n2, More Comprehensive Courses\n\n\n3, A Comprehensive List of Courses\n\n\n4, Dive Right into a First Project\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2 & 3.\n\n\n\n\n1, A Good Way to Start (Crash Courses).\n\u00b6\n\n\n\n\nA Python Course\n\n\nInstant Python\n\n\n\n\n2, More Comprehensive Courses\n\u00b6\n\n\n\n\n\n\nThink Python\n\n\n\n\nThink Python starts with basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.\n\n\nSome examples and exercises are based on Swampy, a Python package written by the author to demonstrate aspects of software design, and to give readers a chance to experiment with simple graphics and animation.\n\n\nThink Python is a Free Book, available under the Creative Commons Attribution-NonCommercial 3.0 Unported License, which means that you are free to copy, distribute, and modify, as long as you attribute the work and don\u2019t use it for commercial purposes.\n\n\nSyllabus\n\n\nVariables, expressions and statements\n\n\nFunctions\n\n\nCase study: interface design\n\n\nConditionals and recursion\n\n\nFruitful functions\n\n\nIteration\n\n\nStrings\n\n\nCase study: word play\n\n\nLists\n\n\nDictionaries\n\n\nTuples\n\n\nCase study: data structure selection\n\n\nFiles\n\n\nClasses and objects\n\n\nClasses and functions\n\n\nClasses and methods\n\n\nInheritance\n\n\nCase study: Tkinter\n\n\nDebugging\n\n\nAnalysis of Algorithms\n\n\nLumpy (diagrams)\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\n\n\nCode School (focused on web frameworks)\n\n\n\n\nCodecademy (offers comprehensive intro course with a syllabus similar to the above)\n\n\nDataCamp (focused of data analysis)\n\n\nIntroduction au langage Python\n\n\nTreehouse (focused on web frameworks and specific packages)\n\n\n\n\n3, A Comprehensive List of Courses\n\u00b6\n\n\nFrom \nThe Hitchhiker\u2019s Guide to Python\n\n\n4, Dive Right into a First Project\n\u00b6\n\n\nProgramming Fundamentals in Python\n\n\n\n\nCreate a pypet.",
            "title": "Introduction to Python"
        },
        {
            "location": "/Introduction to Python/#2-more-comprehensive-courses",
            "text": "Think Python   Think Python starts with basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.  Some examples and exercises are based on Swampy, a Python package written by the author to demonstrate aspects of software design, and to give readers a chance to experiment with simple graphics and animation.  Think Python is a Free Book, available under the Creative Commons Attribution-NonCommercial 3.0 Unported License, which means that you are free to copy, distribute, and modify, as long as you attribute the work and don\u2019t use it for commercial purposes.  Syllabus  Variables, expressions and statements  Functions  Case study: interface design  Conditionals and recursion  Fruitful functions  Iteration  Strings  Case study: word play  Lists  Dictionaries  Tuples  Case study: data structure selection  Files  Classes and objects  Classes and functions  Classes and methods  Inheritance  Case study: Tkinter  Debugging  Analysis of Algorithms  Lumpy (diagrams)  Index       Code School (focused on web frameworks)   Codecademy (offers comprehensive intro course with a syllabus similar to the above)  DataCamp (focused of data analysis)  Introduction au langage Python  Treehouse (focused on web frameworks and specific packages)",
            "title": "2, More Comprehensive Courses"
        },
        {
            "location": "/Introduction to Python/#3-a-comprehensive-list-of-courses",
            "text": "From  The Hitchhiker\u2019s Guide to Python",
            "title": "3, A Comprehensive List of Courses"
        },
        {
            "location": "/Introduction to Python/#4-dive-right-into-a-first-project",
            "text": "Programming Fundamentals in Python   Create a pypet.",
            "title": "4, Dive Right into a First Project"
        },
        {
            "location": "/Automate the Boring Stuff with Python/",
            "text": "CONTENT\n\n\nChapter 2, Flow Control\n\n\nChapter 3, Functions\n\n\nChapter 4, Lists (and Tuples)\n\n\nChapter 5, Dictionaries and Structuring Data\n\n\nChapter 6, Manipulating Strings\n\n\nChapter 7, Pattern Matching and Regular Expressions\n\n\nChapter 8, Reading and Writing Files\n\n\nChapter 9, Organizing Files\n\n\nChapter 10, Debugging\n\n\nChapter 11, Web Scraping\n\n\nChapter 12, Excel Spreadsheets\n\n\nChapter 13, PDF and Word Documents\n\n\nChapter 14, CSV Files and JSON Data\n\n\nChapter 15, Time, Scheduling Tasks, and Launching Programs\n\n\nChapter 16, Sending Email and Text Messages\n\n\nChapter 17, Manipulating Images\n\n\nChapter 18, Controlling the Keyboard and Mouse with GUI Automation\n\n\nAppendix A\n\n\nAppendix B\n\n\nAppendix C\n\n\nAdditional Content\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3. From No Starch Press, 2015. Creative Commons. More at:\n\n\n\n\nOnline at \nautomatetheboringstuff.com\n\n\nMore at \nInvent with Python.com\n\n\nBooks\n:\n\n\nDevelop video games!\n\n\nMake games with graphics!\n\n\nEncrypt messages and hack ciphers!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChapter 2, Flow Control\n\u00b6\n\n\nboolean, comparison, operator, flow control, condition, conditional, loop\n\n\n\n\nTrue\n, \nFalse\n.\n\n\nand\n, \nor\n, \nnot\n.\n\n\n==\n, \n!=\n, \n<\n, \n>\n, etc.\n\n\nif\n, \nelse\n, \nelif\n\n\nLoops: \nwhile\n, \nfor\n with \nin\n, \nrange\n.\n\n\nbreak\n, \ncontinue\n.\n\n\nimport random, sys, os, math\n.\n\n\nrandom.randint\n.\n\n\nfrom random import *\n.\n\n\nsys.exit()\n.\n\n\n\n\nChapter 3, Functions\n\u00b6\n\n\nglobal, local, variable, scope\n\n\nException handling with \ntry:\n and \nexcept\n.\n\n\nChapter 4, Lists (and Tuples)\n\u00b6\n\n\ndata type, index, sublist, subset, slice,  change, concatenate, concatenation, tuple, convert, tuple to list\n\n\n\n\nlen()\n function; length.\n\n\nin\n and \nnot in\n operators.\n\n\n+=\n, \n-=\n, \n*=\n, \n/=\n, \n%=\n augmented assignments.\n\n\nindex()\n method; extract the position of an element.\n\n\nappend()\n method.\n\n\ninsert()\n method.\n\n\nremove()\n method.\n\n\nsort()\n method.\n\n\ncopy\n module and \ncopy()\n method.\n\n\ndeepcopy()\n method; for inner list or a list of lists (ensure the key exists).\n\n\n\n\nChapter 5, Dictionaries and Structuring Data\n\u00b6\n\n\nloop\n\n\nDictionaries are not indexed and ordered like lists.\n\n\n\n\nkeys()\n method; extract keys.\n\n\nvalues()\n method; extract values.\n\n\nitems()\n method; extract both.\n\n\nget()\n method; check out both.\n\n\nin\n and \nnot in\n operators. \n\n\nsetdefault()\n method, check out a key and set value to a key.\n\n\n\n\nPretty print with the \npprint()\n and \npformat()\n functions.\n\n\nNested dictionaries and lists.\n\n\nChapter 6, Manipulating Strings\n\u00b6\n\n\nEscape character: \n\\\n: \n\\'\n, \n\\\"\n, \n\\t\n, \n\\n\n, \n\\\\\n.\n\n\nRaw strings: \nprint(r'That is Carol')\n.\n\n\nTriple quotes:\n\n\nprint('''Dear Alice,\nbla-bla-bla\ncheers''')\n\nprint(\"\"\"Dear Alice,\nbla-bla-bla\ncheers\"\"\")\n\n\n\n\nComment: \n#\n.\n\nMultiline comments: \n\"\"\" \"\"\"\n.\n\n\n\n\nSlice, subset with \n[:]\n.\n\n\nin\n and \nnot in\n operators.\n\n\nlower()\n method.\n\n\nupper()\n method.\n\n\ncapitalize()\n method.\n\n\nis\n method; check if x is part of y.\n\n\nislower()\n method.\n\n\nisupper()\n method.\n\n\nisalpha()\n method; check letters, not blank.\n\n\nisalnum()\n method; check letters and numbers, and not blank.\n\n\nisdecimal()\n method; check numeric characters and not blank.\n\n\nisspace()\n method; check spaces, tabs and new lines and not blank.\n\n\nistitle()\n method; check if it begins with an uppercase letter followed with lowercase letters.\n\n\nstartwith()\n method; check if a string begins with a string of characters.\n\n\nendwith()\n method; idem.\n\n\njoin()\n method; concatenate.\n\n\nsplit()\n method.\n\n\nrjust()\n method; justify.\n\n\nljust()\n method justify.\n\n\ncenter()\n method.\n\n\nstrip()\n method; remove white space.\n\n\nrstrip()\n method; ; remove white space to the right.\n\n\nlstrip()\n method; remove white space to the left.\n\n\n\n\npyperclip\n module.\n\n\nThe \npyperclip.pyclip\n function send text to and receive text from the clipboard:\n\n\nIn addition:\n\n\nimport pyperclip\n\npyperclip.copy('Hello world!')\npyperclip.paste()\n\n\n\n\nChapter 7, Pattern Matching and Regular Expressions\n\u00b6\n\n\npatterns of text, with, without regular expression, regex, object, match, matching, group, grouping, pipe, question mark, star, ?, *, plus, +, curly bracket, {, }, character class, digit, numeric, letter, underscore, space, tab, newline, caret, ^, dollar sign, $, wildcard, dot, ., dotstar, newline, symbols, case-sensitive, case-insensitive\n\n\nre\n module.\n\n\n\n\nre.compile()\n method; find a single occurrence.\n\n\nre.findall()\n method; find all occurrences.\n\n\nsub()\n method; substitute.\n\n\nre.IGNORECASE\n; ignore capitalization with the \ncompile()\n method.\n\n\nre.DOTALL\n; ignore dots with the \nre.compile()\n method.\n\n\nre.VERBOSE\n; write comment with the \nre.compile()\n method.\n\n\n\n\nChapter 8, Reading and Writing Files\n\u00b6\n\n\nfile, file path, filename\n\n\nos\n module.\n\n\n\n\nA relative path: \n..\\eggs\\spam.txt\n, \n.\\fizz\\spam.txt\n.\n\n\nAn absolute path: \nC:\\bacon\\fizz\\spam.txt\n.\n\n\nos.getcwd()\n or \nos.chdir()\n functions; extract the current working directory.\n\n\nos.makedir()\nfunction; create a new folder.\n\n\n\n\nos.path\n module. \n\n\nHandle absolute and relative paths. Find file sizes and folder contents. Check path validity.\n\n\nWindows: backslash or \n\\\n:\n\n\nimport os\nos.path.join('usr', 'bin', 'spam')\n\n\n\n\nYields:\n\n\n'usr\\\\bin\\\\spam'\n\n\n\n\nUNIX: forwardslash or \n/\n:\n\n\nimport os\nos.path.join('usr', 'bin', 'spam')\n\n\n\n\nYields:\n\n\n'usr/bin/spam'\n\n\n\n\nRead and write files:\n\n\n\n\nos.path.open()\n function.\n\n\nos.path.read()\n method.\n\n\nos.path.readline()\n method.\n\n\nos.path.write()\n method.\n\n\nos.path.close()\n method.\n\n\n\n\nshelve\n module.\n\n\nHandle binary files.\n\n\npprint\n module. \n\n\nPretty printing:\n\n\n\n\npprint.pprint()\n.\n\n\npprint.pformat()\n.\n\n\n\n\nChapter 9, Organizing Files\n\u00b6\n\n\npdf, every sub-folder, folder, foldername, subfolder, filename, file, remove, zero, change titles, compress, decompress, zip, unzip\n\n\nshutil\n module. \n\n\nCopy, move, rename, and delete files and folders. \nshutil.rmtree()\n function; delete file and folder.\n\n\nos\n module. \n\n\nDelete, empty, remove files and folders, and change the path. \nos.walk()\n method; walk the tree directory.\n\n\nsend2trash\n module. \n\n\nDelete files and folders, but much safer.\n\n\nzipfile\n module. \n\n\nCompress and uncompress. Read the content of compressed and zipped files.\n\n\n\n\nzipfile.extracall()\n; method  extracts all the files and folders from a zip file.\n\n\nwrite()\n method; create a zip file.\n\n\n\n\nChapter 10, Debugging\n\u00b6\n\n\nHandle errors with \ntry\n and \nexcept\n.\n\n\nRaise exceptions with a \nraise\n statement and the \nException()\n function.\n\n\ntraceback\n module. \n\n\nDiscover what and how an error happens and obtain it as a string with the \ntraceback.format_exc()\n method. \n\n\nAn assertion is a sanity check performed with an \nassert\n statement. \n\n\nlogging\n module. \n\n\nDisplay log messages as the program runs. Log to a file. Debug a code. Enable and disable logging. Enable an IDLE debugger.\n\n\nSet a \nbreakpoint\n to check out potential bugs.\n\n\nChapter 11, Web Scraping\n\u00b6\n\n\nhtml\n\n\nwebbrowser\n module.\n\n\nOpen a browser to a specific webpage (in conjunction with the \nsys\n module). \n\n\nUse:\n\n\n\n\nGet a street address from the command line to the clipboard.\n\n\nGo to a Google Maps page.\n\n\nRead command line arguments from \nsys.argv\n.\n\n\nRead the clipboard content.\n\n\nOpen all links on a page in separate tabs.\n\n\nOpen the browser to the url for local weather.\n\n\nOpen several social network sites.\n\n\n\n\nrequests\n module.\n\n\nDownload files and webpages; similar to opening, reading, writing, closing files and folders. \n\n\n\n\nSimpler than the \nurllib2\n module.\n\n\nCan check out errors.\n\n\nSave the downloaded files.\n\n\n\n\nHTML crash course!\n\n\nbs4\n module (BeautifulSoup).\n\n\n\n\nBeautifulSoup()\n function; parses HTML. \n\n\nselect()\n method;  find an element. \n\n\nGet data from an element\u2019s attributes.\n\n\n\n\nUse:\n\n\n\n\nSearch Google.\n\n\nRetrieve search results.\n\n\nOpen tabs for each results.\n\n\nRead the command line arguments from \nsys.argv\n.\n\n\nFetch results with the \nrequests\n module.\n\n\nFind the links.\n\n\nDownload all images, videos, files, etc.\n\n\nBack up an entire site by following all of its links.\n\n\nCopy all the messages off a web forum.\n\n\nDuplicate the catalogue of items for sale on an online store.\n\n\n\n\nselenium\n module.\n\n\nLaunches and controls a web browser. Fill and submit forms. Simulate mouse clicks. Find elements on a page. Click on a page. Send special keys.\n\n\nCombining modules :\n\n\n\n\nCommand line emailer.\n\n\nImage site downloader.\n\n\nLink verification.\n\n\n\n\nChapter 12, Excel Spreadsheets\n\u00b6\n\n\nopenpyxl\n module.\n\n\nRead Excel documents. Open Excel documents. Get sheets from a workbook. Get cells from the sheets. Convert letters and numbers. Get rows and columns from sheets. Write results to a file.\n\n\nUse:\n\n\n\n\nCompare data across multiple rows in a spreadsheet.\n\n\nOpen multiple files and compare data.\n\n\nCheck blank rows or invalid data in any cells.\n\n\nRead data and use it as the input for Python programs.\n\n\nWrite Excel Documents.\n\n\nCreate and save Excel documents.\n\n\nCreate and remove sheets.\n\n\nWrite values to cells.\n\n\nUpdate a spreadsheet.\n\n\nRead data from one spreadsheet and write it to parts of other spreadsheets.\n\n\nRead data from websites, text files, or the clipboard and write it to a spreadsheet.\n\n\nClean up data, regular expressions.\n\n\nSet the font style, objects, formulas.\n\n\nAdjust rows and columns.\n\n\nSet row height and column width.\n\n\nMerge and unmerge cells.\n\n\nFreeze panes.\n\n\nCreate charts.\n\n\nInsert blank rows.\n\n\nConvert text files to spreadsheets, vice-versa.\n\n\n\n\nChapter 13, PDF and Word Documents\n\u00b6\n\n\nPyPDF2\n module.\n\n\nExtract text from a PDF. Decrypt a PDF. Create PDF. Copy pages, rotate pages, overlay pages from a PDF. Add a logo, a timestamp, a watermark to a PDF.\n\n\nUse:\n\n\n\n\nCombine pages from many PDF.\n\n\nCut out specific pages.\n\n\nReorder pages.\n\n\nCreate a PDF from only those pages that have some specific text.\n\n\n\n\npython-docx\n module.\n\n\nRead word documents. Get the full text from a .docs file. Style paragraphs. Create word documents with nondefault styles. Write word documents. Add headings, lines, page breaks, and pictures. \n\n\nUse:\n\n\n\n\nPDF Paranoia or encrypting a bunch of files.\n\n\nCustom invitations in Word.\n\n\nBrute-force PDF password breaker.\n\n\n\n\nChapter 14, CSV Files and JSON Data\n\u00b6\n\n\ncsv\n module.\n\n\nRead, open CSV. Split the file. Print CSV. Loop within a file or through many files. Write CSV. Change delimiters and lineterminators. Remove the header.\n\n\nUse:\n\n\n\n\nCompare data between different rows in a CSV file or between multiple CSV files.\n\n\nCopy specific data from a CSV file to an Excel file; vice-versa.\n\n\nCheck for invalid data or formatting mistakes in CSV files and alert the user.\n\n\nRead data from CSV file as input for Python programs.\n\n\nExcel to CSV to Excel converter (in conjunction with the \nopenpyxl\n module).\n\n\n\n\njson\n module.\n\n\nAlike web scraping. API. Read,  load, write, dump data.\n\n\nUse:\n\n\n\n\nFetch weather from a website.\n\n\nCollect weather forecasts for several campsites or hiking trails.\n\n\nSchedule a program to regularly check weather and send your a frost alert.\n\n\nPull weather data from multiple sites to show all at once, or calculate and show the average of multiple weather predictions.\n\n\n\n\nChapter 15, Time, Scheduling Tasks, and Launching Programs\n\u00b6\n\n\ntime\n module.\n\n\nRead the system clock for the current time. Pause a program (sleep). Round numbers.\n\n\nUse:\n\n\n\n\nTrack how much time spent on tasks with a stopwatch.\n\n\nRecord track times or lap times.\n\n\nBuild a program that launches other programs on a schedule by using the \nsubprocess\n and \nthreading\n modules.\n\n\nCreate a timesheet app that records when you enter data, and use the current time to clock them in or out.\n\n\nAdd a feature to a program to display the elapsed time since a process started (in conjunction with the \nrequests\n module).\n\n\nCheck how long a program has been running and offer the user a chance to cancel tasks.\n\n\n\n\ndatetime\n module.\n\n\nCompute time and date delta. Retrieve a specific moment. Add a timestamp. Add pauses to a routine. Convert datetime object to strings. Convert strings to datetime objects.   \n\n\nUse:\n\n\n\n\nMultithreading; modify a program to use a function. Create and start threads (see above).\n\n\nPass command line arguments.\n\n\nTask scheduler.\n\n\nOpen websites (time event).\n\n\nRun Python scripts (time event).\n\n\nOpen files (time event).\n\n\nCreate a countdown program.\n\n\nSchedule downloader (time event).\n\n\n\n\nChapter 16, Sending Email and Text Messages\n\u00b6\n\n\nhttp, smtp, mail, imap\n\n\nsmtplib\n module.\n\n\nConnect to an SMTP server. Log in. Search for emails. Send a message. Encrypt emails. Retrieve and delete emails. Disconnect from the SMTP server.\n\n\nimapclient\n module.\n\n\nConnect to an IMAP server. Log in. Search for emails. Fetch an email and mark it as read. Get email addresses from a raw message. Get the body from a raw message. Delete emails. Disconnect from the IMAP server.\n\n\nUse:\n\n\n\n\nSend members dues reminders.\n\n\nSend text messages.\n\n\nRandom emailer.\n\n\n\u2018Umbrella\u2019 reminder (in conjunction with weather forecasts and the \nrequests\n module).\n\n\nAuto-unsubscriber.\n\n\n\n\ntwilio\n module.\n\n\nSend text messages, SMS.\n\n\nChapter 17, Manipulating Images\n\u00b6\n\n\nColor and RGBA crash course!\n\n\nPIL\n module.\n\n\nManipulate images with Pillow. Work with the image data type. Crop, copy, paste an image. Multiply images tiles. Resize, rotate, flip an image. Change pixels. Draw on images (points, lines, rectangles, ellipses, polygons, text). \n\n\nUse:\n\n\n\n\nLoop through a folder of images.\n\n\nImage batch processing: resizing, cropping, copying and pasting, rotating, etc.\n\n\nAdding a logo to several images.\n\n\nIdentify the photo folders.\n\n\nCreate custom cards with custom invitations in Word (see chapter 13).\n\n\n\n\nChapter 18, Controlling the Keyboard and Mouse with GUI Automation\n\u00b6\n\n\nvirtual keystrokes, mouse clicks\n\n\npyautogui\n module and dependencies based of the OS in use.\n\n\nShutdown the computer. Log out from a session. Pauses, fail-safes. Control mouse movements and move the mouse. Get the mouse position and control the mouse. Control the keyboard. Send a string from the keyboard. Type in key name. Press and release buttons. Activate hotkey.\n\n\nUse:\n\n\n\n\nImage recognition.\n\n\nAutomatic form filler.\n\n\nLook busy!\n\n\nInstant messenger bot.\n\n\nGame-playing bot tutorial.\n\n\n\n\nAppendix A\n\u00b6\n\n\n\n\nPIP.\n\n\nInstalling modules.\n\n\n\n\nAppendix B\n\u00b6\n\n\n\n\nRunning programs.\n\n\nShebang line.\n\n\nOn Windows.\n\n\nOn UNIX.\n\n\n\n\nAppendix C\n\u00b6\n\n\nAnswers from questions: chapter 2 to 18.\n\n\nAdditional Content\n\u00b6\n\n\n\n\nDownload files used in the book.\n\n\nList of JSON API:\n\n\nTwitter API.\n\n\nFacebook Social Graph API.\n\n\nFlickr.\n\n\nYouTube.\n\n\nOpenStreetMap.\n\n\nGoogle Maps.\n\n\nImgur API.\n\n\n26 Weather APIs.\n\n\nRotten Tomatoes.\n\n\nReddit.\n\n\n\n\n\n\nList of programming practice sites. (programming problems you can try to practice your coding skills).\n\n\nList of web comics.\n\n\nSchedulers (operating system scheduling process).\n\n\nHow to do PyCon or any tech conference.",
            "title": "Automate the Boring Stuff with Python"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-3-functions",
            "text": "global, local, variable, scope  Exception handling with  try:  and  except .",
            "title": "Chapter 3, Functions"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-4-lists-and-tuples",
            "text": "data type, index, sublist, subset, slice,  change, concatenate, concatenation, tuple, convert, tuple to list   len()  function; length.  in  and  not in  operators.  += ,  -= ,  *= ,  /= ,  %=  augmented assignments.  index()  method; extract the position of an element.  append()  method.  insert()  method.  remove()  method.  sort()  method.  copy  module and  copy()  method.  deepcopy()  method; for inner list or a list of lists (ensure the key exists).",
            "title": "Chapter 4, Lists (and Tuples)"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-5-dictionaries-and-structuring-data",
            "text": "loop  Dictionaries are not indexed and ordered like lists.   keys()  method; extract keys.  values()  method; extract values.  items()  method; extract both.  get()  method; check out both.  in  and  not in  operators.   setdefault()  method, check out a key and set value to a key.   Pretty print with the  pprint()  and  pformat()  functions.  Nested dictionaries and lists.",
            "title": "Chapter 5, Dictionaries and Structuring Data"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-6-manipulating-strings",
            "text": "Escape character:  \\ :  \\' ,  \\\" ,  \\t ,  \\n ,  \\\\ .  Raw strings:  print(r'That is Carol') .  Triple quotes:  print('''Dear Alice,\nbla-bla-bla\ncheers''')\n\nprint(\"\"\"Dear Alice,\nbla-bla-bla\ncheers\"\"\")  Comment:  # . \nMultiline comments:  \"\"\" \"\"\" .   Slice, subset with  [:] .  in  and  not in  operators.  lower()  method.  upper()  method.  capitalize()  method.  is  method; check if x is part of y.  islower()  method.  isupper()  method.  isalpha()  method; check letters, not blank.  isalnum()  method; check letters and numbers, and not blank.  isdecimal()  method; check numeric characters and not blank.  isspace()  method; check spaces, tabs and new lines and not blank.  istitle()  method; check if it begins with an uppercase letter followed with lowercase letters.  startwith()  method; check if a string begins with a string of characters.  endwith()  method; idem.  join()  method; concatenate.  split()  method.  rjust()  method; justify.  ljust()  method justify.  center()  method.  strip()  method; remove white space.  rstrip()  method; ; remove white space to the right.  lstrip()  method; remove white space to the left.   pyperclip  module.  The  pyperclip.pyclip  function send text to and receive text from the clipboard:  In addition:  import pyperclip\n\npyperclip.copy('Hello world!')\npyperclip.paste()",
            "title": "Chapter 6, Manipulating Strings"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-7-pattern-matching-and-regular-expressions",
            "text": "patterns of text, with, without regular expression, regex, object, match, matching, group, grouping, pipe, question mark, star, ?, *, plus, +, curly bracket, {, }, character class, digit, numeric, letter, underscore, space, tab, newline, caret, ^, dollar sign, $, wildcard, dot, ., dotstar, newline, symbols, case-sensitive, case-insensitive  re  module.   re.compile()  method; find a single occurrence.  re.findall()  method; find all occurrences.  sub()  method; substitute.  re.IGNORECASE ; ignore capitalization with the  compile()  method.  re.DOTALL ; ignore dots with the  re.compile()  method.  re.VERBOSE ; write comment with the  re.compile()  method.",
            "title": "Chapter 7, Pattern Matching and Regular Expressions"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-8-reading-and-writing-files",
            "text": "file, file path, filename  os  module.   A relative path:  ..\\eggs\\spam.txt ,  .\\fizz\\spam.txt .  An absolute path:  C:\\bacon\\fizz\\spam.txt .  os.getcwd()  or  os.chdir()  functions; extract the current working directory.  os.makedir() function; create a new folder.   os.path  module.   Handle absolute and relative paths. Find file sizes and folder contents. Check path validity.  Windows: backslash or  \\ :  import os\nos.path.join('usr', 'bin', 'spam')  Yields:  'usr\\\\bin\\\\spam'  UNIX: forwardslash or  / :  import os\nos.path.join('usr', 'bin', 'spam')  Yields:  'usr/bin/spam'  Read and write files:   os.path.open()  function.  os.path.read()  method.  os.path.readline()  method.  os.path.write()  method.  os.path.close()  method.   shelve  module.  Handle binary files.  pprint  module.   Pretty printing:   pprint.pprint() .  pprint.pformat() .",
            "title": "Chapter 8, Reading and Writing Files"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-9-organizing-files",
            "text": "pdf, every sub-folder, folder, foldername, subfolder, filename, file, remove, zero, change titles, compress, decompress, zip, unzip  shutil  module.   Copy, move, rename, and delete files and folders.  shutil.rmtree()  function; delete file and folder.  os  module.   Delete, empty, remove files and folders, and change the path.  os.walk()  method; walk the tree directory.  send2trash  module.   Delete files and folders, but much safer.  zipfile  module.   Compress and uncompress. Read the content of compressed and zipped files.   zipfile.extracall() ; method  extracts all the files and folders from a zip file.  write()  method; create a zip file.",
            "title": "Chapter 9, Organizing Files"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-10-debugging",
            "text": "Handle errors with  try  and  except .  Raise exceptions with a  raise  statement and the  Exception()  function.  traceback  module.   Discover what and how an error happens and obtain it as a string with the  traceback.format_exc()  method.   An assertion is a sanity check performed with an  assert  statement.   logging  module.   Display log messages as the program runs. Log to a file. Debug a code. Enable and disable logging. Enable an IDLE debugger.  Set a  breakpoint  to check out potential bugs.",
            "title": "Chapter 10, Debugging"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-11-web-scraping",
            "text": "html  webbrowser  module.  Open a browser to a specific webpage (in conjunction with the  sys  module).   Use:   Get a street address from the command line to the clipboard.  Go to a Google Maps page.  Read command line arguments from  sys.argv .  Read the clipboard content.  Open all links on a page in separate tabs.  Open the browser to the url for local weather.  Open several social network sites.   requests  module.  Download files and webpages; similar to opening, reading, writing, closing files and folders.    Simpler than the  urllib2  module.  Can check out errors.  Save the downloaded files.   HTML crash course!  bs4  module (BeautifulSoup).   BeautifulSoup()  function; parses HTML.   select()  method;  find an element.   Get data from an element\u2019s attributes.   Use:   Search Google.  Retrieve search results.  Open tabs for each results.  Read the command line arguments from  sys.argv .  Fetch results with the  requests  module.  Find the links.  Download all images, videos, files, etc.  Back up an entire site by following all of its links.  Copy all the messages off a web forum.  Duplicate the catalogue of items for sale on an online store.   selenium  module.  Launches and controls a web browser. Fill and submit forms. Simulate mouse clicks. Find elements on a page. Click on a page. Send special keys.  Combining modules :   Command line emailer.  Image site downloader.  Link verification.",
            "title": "Chapter 11, Web Scraping"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-12-excel-spreadsheets",
            "text": "openpyxl  module.  Read Excel documents. Open Excel documents. Get sheets from a workbook. Get cells from the sheets. Convert letters and numbers. Get rows and columns from sheets. Write results to a file.  Use:   Compare data across multiple rows in a spreadsheet.  Open multiple files and compare data.  Check blank rows or invalid data in any cells.  Read data and use it as the input for Python programs.  Write Excel Documents.  Create and save Excel documents.  Create and remove sheets.  Write values to cells.  Update a spreadsheet.  Read data from one spreadsheet and write it to parts of other spreadsheets.  Read data from websites, text files, or the clipboard and write it to a spreadsheet.  Clean up data, regular expressions.  Set the font style, objects, formulas.  Adjust rows and columns.  Set row height and column width.  Merge and unmerge cells.  Freeze panes.  Create charts.  Insert blank rows.  Convert text files to spreadsheets, vice-versa.",
            "title": "Chapter 12, Excel Spreadsheets"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-13-pdf-and-word-documents",
            "text": "PyPDF2  module.  Extract text from a PDF. Decrypt a PDF. Create PDF. Copy pages, rotate pages, overlay pages from a PDF. Add a logo, a timestamp, a watermark to a PDF.  Use:   Combine pages from many PDF.  Cut out specific pages.  Reorder pages.  Create a PDF from only those pages that have some specific text.   python-docx  module.  Read word documents. Get the full text from a .docs file. Style paragraphs. Create word documents with nondefault styles. Write word documents. Add headings, lines, page breaks, and pictures.   Use:   PDF Paranoia or encrypting a bunch of files.  Custom invitations in Word.  Brute-force PDF password breaker.",
            "title": "Chapter 13, PDF and Word Documents"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-14-csv-files-and-json-data",
            "text": "csv  module.  Read, open CSV. Split the file. Print CSV. Loop within a file or through many files. Write CSV. Change delimiters and lineterminators. Remove the header.  Use:   Compare data between different rows in a CSV file or between multiple CSV files.  Copy specific data from a CSV file to an Excel file; vice-versa.  Check for invalid data or formatting mistakes in CSV files and alert the user.  Read data from CSV file as input for Python programs.  Excel to CSV to Excel converter (in conjunction with the  openpyxl  module).   json  module.  Alike web scraping. API. Read,  load, write, dump data.  Use:   Fetch weather from a website.  Collect weather forecasts for several campsites or hiking trails.  Schedule a program to regularly check weather and send your a frost alert.  Pull weather data from multiple sites to show all at once, or calculate and show the average of multiple weather predictions.",
            "title": "Chapter 14, CSV Files and JSON Data"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-15-time-scheduling-tasks-and-launching-programs",
            "text": "time  module.  Read the system clock for the current time. Pause a program (sleep). Round numbers.  Use:   Track how much time spent on tasks with a stopwatch.  Record track times or lap times.  Build a program that launches other programs on a schedule by using the  subprocess  and  threading  modules.  Create a timesheet app that records when you enter data, and use the current time to clock them in or out.  Add a feature to a program to display the elapsed time since a process started (in conjunction with the  requests  module).  Check how long a program has been running and offer the user a chance to cancel tasks.   datetime  module.  Compute time and date delta. Retrieve a specific moment. Add a timestamp. Add pauses to a routine. Convert datetime object to strings. Convert strings to datetime objects.     Use:   Multithreading; modify a program to use a function. Create and start threads (see above).  Pass command line arguments.  Task scheduler.  Open websites (time event).  Run Python scripts (time event).  Open files (time event).  Create a countdown program.  Schedule downloader (time event).",
            "title": "Chapter 15, Time, Scheduling Tasks, and Launching Programs"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-16-sending-email-and-text-messages",
            "text": "http, smtp, mail, imap  smtplib  module.  Connect to an SMTP server. Log in. Search for emails. Send a message. Encrypt emails. Retrieve and delete emails. Disconnect from the SMTP server.  imapclient  module.  Connect to an IMAP server. Log in. Search for emails. Fetch an email and mark it as read. Get email addresses from a raw message. Get the body from a raw message. Delete emails. Disconnect from the IMAP server.  Use:   Send members dues reminders.  Send text messages.  Random emailer.  \u2018Umbrella\u2019 reminder (in conjunction with weather forecasts and the  requests  module).  Auto-unsubscriber.   twilio  module.  Send text messages, SMS.",
            "title": "Chapter 16, Sending Email and Text Messages"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-17-manipulating-images",
            "text": "Color and RGBA crash course!  PIL  module.  Manipulate images with Pillow. Work with the image data type. Crop, copy, paste an image. Multiply images tiles. Resize, rotate, flip an image. Change pixels. Draw on images (points, lines, rectangles, ellipses, polygons, text).   Use:   Loop through a folder of images.  Image batch processing: resizing, cropping, copying and pasting, rotating, etc.  Adding a logo to several images.  Identify the photo folders.  Create custom cards with custom invitations in Word (see chapter 13).",
            "title": "Chapter 17, Manipulating Images"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-18-controlling-the-keyboard-and-mouse-with-gui-automation",
            "text": "virtual keystrokes, mouse clicks  pyautogui  module and dependencies based of the OS in use.  Shutdown the computer. Log out from a session. Pauses, fail-safes. Control mouse movements and move the mouse. Get the mouse position and control the mouse. Control the keyboard. Send a string from the keyboard. Type in key name. Press and release buttons. Activate hotkey.  Use:   Image recognition.  Automatic form filler.  Look busy!  Instant messenger bot.  Game-playing bot tutorial.",
            "title": "Chapter 18, Controlling the Keyboard and Mouse with GUI Automation"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#appendix-a",
            "text": "PIP.  Installing modules.",
            "title": "Appendix A"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#appendix-b",
            "text": "Running programs.  Shebang line.  On Windows.  On UNIX.",
            "title": "Appendix B"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#appendix-c",
            "text": "Answers from questions: chapter 2 to 18.",
            "title": "Appendix C"
        },
        {
            "location": "/Automate the Boring Stuff with Python/#additional-content",
            "text": "Download files used in the book.  List of JSON API:  Twitter API.  Facebook Social Graph API.  Flickr.  YouTube.  OpenStreetMap.  Google Maps.  Imgur API.  26 Weather APIs.  Rotten Tomatoes.  Reddit.    List of programming practice sites. (programming problems you can try to practice your coding skills).  List of web comics.  Schedulers (operating system scheduling process).  How to do PyCon or any tech conference.",
            "title": "Additional Content"
        },
        {
            "location": "/Real_Python/",
            "text": "CONTENT\n\n\nPart 1: Introduction to Python\n\n\n0) Introduction\n\n\n0.1) Why Python?\n\n\n0.2) Why this book?\n\n\n0.3) How to use this book\n\n\n0.4) License\n\n\n\n\n\n\n1) Getting Started\n\n\n1.1) Download Python\n\n\n1.2) Open IDLE\n\n\n1.3) Write a Python Script\n\n\n1.4) Screw Things Up\n\n\n1.5) Store a Variable\n\n\n\n\n\n\n2) Interlude: Leave yourself helpful notes\n\n\n2.1) Learn to speak in Python\n\n\n2.2) Mess around with your words\n\n\n2.3) Use objects and methods\n\n\n\n\n\n\n3) Fundamentals: Working with Strings\n\n\n3.1) Mic and match different objects\n\n\n3.2) Streamline your print statements\n\n\n3.3) Find a string in a string\n\n\nAssignment: Turn your user into a 133t h4x0r\n\n\n\n\n\n\n4) Fundamentals: Functions and Loops\n\n\n4.1) Do futuristic arithmetic\n\n\n4.2) Create Your Own Functions\n\n\n4.3) Run in circles\n\n\n\n\n\n\nInterlude: Debug your code\n\n\n5) Fundamentals: Conditional Logic\n\n\n5.1) Compare Values\n\n\n5.2) Add Some Logic\n\n\n5.3) Control the Flow of Your Program\n\n\n5.4) Break Out of the Pattern\n\n\n5.5) Recover from errors\n\n\n5.6) Simulate Events and Calculate Probabilities\n\n\n5.7) Assignment: Simulate an election\n\n\n5.8) Assignment: Simulate a coin toss experiment\n\n\n\n\n\n\n6) Fundamentals: Lists and Dictionaries\n\n\n6.1) Make and update lists\n\n\n6.2) Make Permanent Lists\n\n\n6.3) Store Relationships in Dictionaries\n\n\n\n\n\n\n7) File Input and Output\n\n\n7.1) Read and write simple files\n\n\n7.2) Use more complicated folder structure\n\n\n7.4) Read and write CSV data\n\n\n\n\n\n\nInterlude: Install Packages\n\n\n8) Interact with PDF files\n\n\n8.1) Read and write PDFs\n\n\n8.2) Manipulate PDF Files\n\n\n\n\n\n\n9) SQL Database Connections\n\n\n9.1) Communicate with databases using SQLite\n\n\n9.2) Use Other SQL Variants\n\n\n\n\n\n\n10) Interacting with the Web\n\n\n10.1) Scrape and Parse Text From Websites\n\n\n10.2) Use an HTML Parser to Scrape Websites\n\n\n10.3) Interact with HTML Forms\n\n\n10.4) Interact with Websites in Real-time\n\n\n\n\n\n\n11) Scientific Computing and Graphing\n\n\n11.1) Use Numpy for Matrix Manipulation\n\n\n11.2) Use matplotlib for Plotting Graphs\n\n\n\n\n\n\n12) Graphical User Interface\n\n\n12.1) Add GUI elements with EasyGUI\n\n\n12.2) Create GUI Application with Tkinter\n\n\n\n\n\n\n13) Web applications\n\n\n13.1) Create a simple web application\n\n\n13.2) Create an interactive web application\n\n\n13.3) Put your web application online\n\n\n\n\n\n\n14) Final Thoughts\n\n\nAcknowledgements\n\n\n\n\n\n\nPart 2: Web Development with Python\n\n\nPart 3: Advanced Web Development with Django\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2.7. Real Python \u2013 An introduction to Python through pactical examples, c2.4, 2013. Creative Commons. Excerpt at \nrealpython.com/\n.\n\n\n\n\nPart 1: Introduction to Python\n\u00b6\n\n\n0) Introduction\n\u00b6\n\n\n0.1) Why Python?\n\u00b6\n\n\n0.2) Why this book?\n\u00b6\n\n\n0.3) How to use this book\n\u00b6\n\n\n0.4) License\n\u00b6\n\n\n1) Getting Started\n\u00b6\n\n\n1.1) Download Python\n\u00b6\n\n\n1.2) Open IDLE\n\u00b6\n\n\n1.3) Write a Python Script\n\u00b6\n\n\n1.4) Screw Things Up\n\u00b6\n\n\n1.5) Store a Variable\n\u00b6\n\n\n2) Interlude: Leave yourself helpful notes\n\u00b6\n\n\n2.1) Learn to speak in Python\n\u00b6\n\n\n2.2) Mess around with your words\n\u00b6\n\n\n2.3) Use objects and methods\n\u00b6\n\n\nAssignment: Pick apart your user\u2019s input\n\n\n3) Fundamentals: Working with Strings\n\u00b6\n\n\n3.1) Mic and match different objects\n\u00b6\n\n\n3.2) Streamline your print statements\n\u00b6\n\n\n3.3) Find a string in a string\n\u00b6\n\n\nAssignment: Turn your user into a 133t h4x0r\n\u00b6\n\n\n4) Fundamentals: Functions and Loops\n\u00b6\n\n\n4.1) Do futuristic arithmetic\n\u00b6\n\n\n4.2) Create Your Own Functions\n\u00b6\n\n\n4.3) Run in circles\n\u00b6\n\n\nAssignments: Perform calculations on user input, Convert temperatures, Track your investments\n\n\nInterlude: Debug your code\n\u00b6\n\n\n5) Fundamentals: Conditional Logic\n\u00b6\n\n\n5.1) Compare Values\n\u00b6\n\n\n5.2) Add Some Logic\n\u00b6\n\n\n5.3) Control the Flow of Your Program\n\u00b6\n\n\n5.4) Break Out of the Pattern\n\u00b6\n\n\n5.5) Recover from errors\n\u00b6\n\n\n5.6) Simulate Events and Calculate Probabilities\n\u00b6\n\n\n5.7) Assignment: Simulate an election\n\u00b6\n\n\n5.8) Assignment: Simulate a coin toss experiment\n\u00b6\n\n\nAssignments: Find the factors of a number, Simulate an election, Simulate a coin toss experiment\n\n\n6) Fundamentals: Lists and Dictionaries\n\u00b6\n\n\n6.1) Make and update lists\n\u00b6\n\n\n6.2) Make Permanent Lists\n\u00b6\n\n\n6.3) Store Relationships in Dictionaries\n\u00b6\n\n\nAssignment: Wax poetic\n\n\n7) File Input and Output\n\u00b6\n\n\n7.1) Read and write simple files\n\u00b6\n\n\n7.2) Use more complicated folder structure\n\u00b6\n\n\n7.4) Read and write CSV data\n\u00b6\n\n\nAssignments: Use pattern matching to delete files, Create a high scores list from CSV data\n\n\nInterlude: Install Packages\n\u00b6\n\n\n8) Interact with PDF files\n\u00b6\n\n\n8.1) Read and write PDFs\n\u00b6\n\n\n8.2) Manipulate PDF Files\n\u00b6\n\n\nAssignment: Add a cover sheet to a PDF file\n\n\n9) SQL Database Connections\n\u00b6\n\n\n9.1) Communicate with databases using SQLite\n\u00b6\n\n\n9.2) Use Other SQL Variants\n\u00b6\n\n\n10) Interacting with the Web\n\u00b6\n\n\n10.1) Scrape and Parse Text From Websites\n\u00b6\n\n\n10.2) Use an HTML Parser to Scrape Websites\n\u00b6\n\n\n10.3) Interact with HTML Forms\n\u00b6\n\n\n10.4) Interact with Websites in Real-time\n\u00b6\n\n\n11) Scientific Computing and Graphing\n\u00b6\n\n\n11.1) Use Numpy for Matrix Manipulation\n\u00b6\n\n\n11.2) Use matplotlib for Plotting Graphs\n\u00b6\n\n\nAssignment: Plot a graph from CSV data\n\n\n12) Graphical User Interface\n\u00b6\n\n\n12.1) Add GUI elements with EasyGUI\n\u00b6\n\n\n12.2) Create GUI Application with Tkinter\n\u00b6\n\n\nAssignments: Use GUI elements to help a user modify files, Return of the poet\n\n\n13) Web applications\n\u00b6\n\n\n13.1) Create a simple web application\n\u00b6\n\n\n13.2) Create an interactive web application\n\u00b6\n\n\n13.3) Put your web application online\n\u00b6\n\n\nAssignment: The poet gains a web presence\n\n\n14) Final Thoughts\n\u00b6\n\n\nAcknowledgements\n\u00b6\n\n\nPart 2: Web Development with Python\n\u00b6\n\n\nPart 3: Advanced Web Development with Django\n\u00b6",
            "title": "Real Python"
        },
        {
            "location": "/Real_Python/#0-introduction",
            "text": "",
            "title": "0) Introduction"
        },
        {
            "location": "/Real_Python/#01-why-python",
            "text": "",
            "title": "0.1) Why Python?"
        },
        {
            "location": "/Real_Python/#02-why-this-book",
            "text": "",
            "title": "0.2) Why this book?"
        },
        {
            "location": "/Real_Python/#03-how-to-use-this-book",
            "text": "",
            "title": "0.3) How to use this book"
        },
        {
            "location": "/Real_Python/#04-license",
            "text": "",
            "title": "0.4) License"
        },
        {
            "location": "/Real_Python/#1-getting-started",
            "text": "",
            "title": "1) Getting Started"
        },
        {
            "location": "/Real_Python/#11-download-python",
            "text": "",
            "title": "1.1) Download Python"
        },
        {
            "location": "/Real_Python/#12-open-idle",
            "text": "",
            "title": "1.2) Open IDLE"
        },
        {
            "location": "/Real_Python/#13-write-a-python-script",
            "text": "",
            "title": "1.3) Write a Python Script"
        },
        {
            "location": "/Real_Python/#14-screw-things-up",
            "text": "",
            "title": "1.4) Screw Things Up"
        },
        {
            "location": "/Real_Python/#15-store-a-variable",
            "text": "",
            "title": "1.5) Store a Variable"
        },
        {
            "location": "/Real_Python/#2-interlude-leave-yourself-helpful-notes",
            "text": "",
            "title": "2) Interlude: Leave yourself helpful notes"
        },
        {
            "location": "/Real_Python/#21-learn-to-speak-in-python",
            "text": "",
            "title": "2.1) Learn to speak in Python"
        },
        {
            "location": "/Real_Python/#22-mess-around-with-your-words",
            "text": "",
            "title": "2.2) Mess around with your words"
        },
        {
            "location": "/Real_Python/#23-use-objects-and-methods",
            "text": "Assignment: Pick apart your user\u2019s input",
            "title": "2.3) Use objects and methods"
        },
        {
            "location": "/Real_Python/#3-fundamentals-working-with-strings",
            "text": "",
            "title": "3) Fundamentals: Working with Strings"
        },
        {
            "location": "/Real_Python/#31-mic-and-match-different-objects",
            "text": "",
            "title": "3.1) Mic and match different objects"
        },
        {
            "location": "/Real_Python/#32-streamline-your-print-statements",
            "text": "",
            "title": "3.2) Streamline your print statements"
        },
        {
            "location": "/Real_Python/#33-find-a-string-in-a-string",
            "text": "",
            "title": "3.3) Find a string in a string"
        },
        {
            "location": "/Real_Python/#assignment-turn-your-user-into-a-133t-h4x0r",
            "text": "",
            "title": "Assignment: Turn your user into a 133t h4x0r"
        },
        {
            "location": "/Real_Python/#4-fundamentals-functions-and-loops",
            "text": "",
            "title": "4) Fundamentals: Functions and Loops"
        },
        {
            "location": "/Real_Python/#41-do-futuristic-arithmetic",
            "text": "",
            "title": "4.1) Do futuristic arithmetic"
        },
        {
            "location": "/Real_Python/#42-create-your-own-functions",
            "text": "",
            "title": "4.2) Create Your Own Functions"
        },
        {
            "location": "/Real_Python/#43-run-in-circles",
            "text": "Assignments: Perform calculations on user input, Convert temperatures, Track your investments",
            "title": "4.3) Run in circles"
        },
        {
            "location": "/Real_Python/#interlude-debug-your-code",
            "text": "",
            "title": "Interlude: Debug your code"
        },
        {
            "location": "/Real_Python/#5-fundamentals-conditional-logic",
            "text": "",
            "title": "5) Fundamentals: Conditional Logic"
        },
        {
            "location": "/Real_Python/#51-compare-values",
            "text": "",
            "title": "5.1) Compare Values"
        },
        {
            "location": "/Real_Python/#52-add-some-logic",
            "text": "",
            "title": "5.2) Add Some Logic"
        },
        {
            "location": "/Real_Python/#53-control-the-flow-of-your-program",
            "text": "",
            "title": "5.3) Control the Flow of Your Program"
        },
        {
            "location": "/Real_Python/#54-break-out-of-the-pattern",
            "text": "",
            "title": "5.4) Break Out of the Pattern"
        },
        {
            "location": "/Real_Python/#55-recover-from-errors",
            "text": "",
            "title": "5.5) Recover from errors"
        },
        {
            "location": "/Real_Python/#56-simulate-events-and-calculate-probabilities",
            "text": "",
            "title": "5.6) Simulate Events and Calculate Probabilities"
        },
        {
            "location": "/Real_Python/#57-assignment-simulate-an-election",
            "text": "",
            "title": "5.7) Assignment: Simulate an election"
        },
        {
            "location": "/Real_Python/#58-assignment-simulate-a-coin-toss-experiment",
            "text": "Assignments: Find the factors of a number, Simulate an election, Simulate a coin toss experiment",
            "title": "5.8) Assignment: Simulate a coin toss experiment"
        },
        {
            "location": "/Real_Python/#6-fundamentals-lists-and-dictionaries",
            "text": "",
            "title": "6) Fundamentals: Lists and Dictionaries"
        },
        {
            "location": "/Real_Python/#61-make-and-update-lists",
            "text": "",
            "title": "6.1) Make and update lists"
        },
        {
            "location": "/Real_Python/#62-make-permanent-lists",
            "text": "",
            "title": "6.2) Make Permanent Lists"
        },
        {
            "location": "/Real_Python/#63-store-relationships-in-dictionaries",
            "text": "Assignment: Wax poetic",
            "title": "6.3) Store Relationships in Dictionaries"
        },
        {
            "location": "/Real_Python/#7-file-input-and-output",
            "text": "",
            "title": "7) File Input and Output"
        },
        {
            "location": "/Real_Python/#71-read-and-write-simple-files",
            "text": "",
            "title": "7.1) Read and write simple files"
        },
        {
            "location": "/Real_Python/#72-use-more-complicated-folder-structure",
            "text": "",
            "title": "7.2) Use more complicated folder structure"
        },
        {
            "location": "/Real_Python/#74-read-and-write-csv-data",
            "text": "Assignments: Use pattern matching to delete files, Create a high scores list from CSV data",
            "title": "7.4) Read and write CSV data"
        },
        {
            "location": "/Real_Python/#interlude-install-packages",
            "text": "",
            "title": "Interlude: Install Packages"
        },
        {
            "location": "/Real_Python/#8-interact-with-pdf-files",
            "text": "",
            "title": "8) Interact with PDF files"
        },
        {
            "location": "/Real_Python/#81-read-and-write-pdfs",
            "text": "",
            "title": "8.1) Read and write PDFs"
        },
        {
            "location": "/Real_Python/#82-manipulate-pdf-files",
            "text": "Assignment: Add a cover sheet to a PDF file",
            "title": "8.2) Manipulate PDF Files"
        },
        {
            "location": "/Real_Python/#9-sql-database-connections",
            "text": "",
            "title": "9) SQL Database Connections"
        },
        {
            "location": "/Real_Python/#91-communicate-with-databases-using-sqlite",
            "text": "",
            "title": "9.1) Communicate with databases using SQLite"
        },
        {
            "location": "/Real_Python/#92-use-other-sql-variants",
            "text": "",
            "title": "9.2) Use Other SQL Variants"
        },
        {
            "location": "/Real_Python/#10-interacting-with-the-web",
            "text": "",
            "title": "10) Interacting with the Web"
        },
        {
            "location": "/Real_Python/#101-scrape-and-parse-text-from-websites",
            "text": "",
            "title": "10.1) Scrape and Parse Text From Websites"
        },
        {
            "location": "/Real_Python/#102-use-an-html-parser-to-scrape-websites",
            "text": "",
            "title": "10.2) Use an HTML Parser to Scrape Websites"
        },
        {
            "location": "/Real_Python/#103-interact-with-html-forms",
            "text": "",
            "title": "10.3) Interact with HTML Forms"
        },
        {
            "location": "/Real_Python/#104-interact-with-websites-in-real-time",
            "text": "",
            "title": "10.4) Interact with Websites in Real-time"
        },
        {
            "location": "/Real_Python/#11-scientific-computing-and-graphing",
            "text": "",
            "title": "11) Scientific Computing and Graphing"
        },
        {
            "location": "/Real_Python/#111-use-numpy-for-matrix-manipulation",
            "text": "",
            "title": "11.1) Use Numpy for Matrix Manipulation"
        },
        {
            "location": "/Real_Python/#112-use-matplotlib-for-plotting-graphs",
            "text": "Assignment: Plot a graph from CSV data",
            "title": "11.2) Use matplotlib for Plotting Graphs"
        },
        {
            "location": "/Real_Python/#12-graphical-user-interface",
            "text": "",
            "title": "12) Graphical User Interface"
        },
        {
            "location": "/Real_Python/#121-add-gui-elements-with-easygui",
            "text": "",
            "title": "12.1) Add GUI elements with EasyGUI"
        },
        {
            "location": "/Real_Python/#122-create-gui-application-with-tkinter",
            "text": "Assignments: Use GUI elements to help a user modify files, Return of the poet",
            "title": "12.2) Create GUI Application with Tkinter"
        },
        {
            "location": "/Real_Python/#13-web-applications",
            "text": "",
            "title": "13) Web applications"
        },
        {
            "location": "/Real_Python/#131-create-a-simple-web-application",
            "text": "",
            "title": "13.1) Create a simple web application"
        },
        {
            "location": "/Real_Python/#132-create-an-interactive-web-application",
            "text": "",
            "title": "13.2) Create an interactive web application"
        },
        {
            "location": "/Real_Python/#133-put-your-web-application-online",
            "text": "Assignment: The poet gains a web presence",
            "title": "13.3) Put your web application online"
        },
        {
            "location": "/Real_Python/#14-final-thoughts",
            "text": "",
            "title": "14) Final Thoughts"
        },
        {
            "location": "/Real_Python/#acknowledgements",
            "text": "",
            "title": "Acknowledgements"
        },
        {
            "location": "/Real_Python/#part-2-web-development-with-python",
            "text": "",
            "title": "Part 2: Web Development with Python"
        },
        {
            "location": "/Real_Python/#part-3-advanced-web-development-with-django",
            "text": "",
            "title": "Part 3: Advanced Web Development with Django"
        },
        {
            "location": "/Managing Your Biological Data with Python/",
            "text": "CONTENT\n\n\nPart 1, Getting Started\n\n\nChapter 1, The Python Shell and Basics\n\n\nChapter 2, Your First Python Program\n\n\nPart 2, Data management\n\n\nChapter 3, Analyzing a Data Column\n\n\nChapter 4, Parsing Data Records\n\n\nChapter 5, Searching Data\n\n\nChapter 6, Filtering Data\n\n\nChapter 7, Managing Tabular Data\n\n\nChapter 8, Sorting Data\n\n\nChapter 9, Pattern Matching and Text Mining\n\n\nPart 3, Modular Programming\n\n\nChapter 10, Divide a Program into Functions\n\n\nChapter 11 Managing Complexity with Classes\n\n\nChapter 12 Debugging\n\n\nChapter 13, Using External Modules, The Python Interface to R\n\n\nChapter 14, Building Program Pipelines\n\n\nChapter 15, Writing Good Programs\n\n\nPart 4, Data Visualization\n\n\nChapter 16, Creating Scientific Diagrams\n\n\nChapter 18, Manipulating Images\n\n\nPart 6, Cookbook\n\n\nRecipe 2, Reversing and Randomizing a Sequence\n\n\nRecipe 3, Creating a Random Sequence with Probabilities\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and code snippets. Python 2. The book comes with files and cases. Python 2. From CRC Press, 2014.\n\n\n\n\nPart 1, Getting Started\n\u00b6\n\n\nChapter 1, The Python Shell and Basics\n\u00b6\n\n\nData structure\n\n\n\n\nBooleans: \nTrue\n or \nFalse\n.\n\n\nDictionaries: unordered collections of key-value pairs; both can be numbers or strings; indicated with \n{key1: value1, 'key2': 'value2'}\n.\n\n\nFloats: numbers with digits after the dicemal point,\n\n\nIntegers: numbers without digits after the decimal point.\n\n\nLists: mutable ordered collections of objects; indicated with \n[a, b, c]\n.\n\n\nSets: immutable unordered collections of unique elements; indicated by \n([a, b, c])\n.\n\n\nStrings: immutable ordered collections of characters; indicated with \n'single'\n or \n\"double\"\n quotation marks.\n\n\nTuples: immutable ordered collections of objects; indicated with \n(a, b, c)\n.\n\n\n\n\nConversions\n\n\nConvert or coerce data:\n\n- \nfloat(value)\n; into a float.\n\n- \nint(value)\n; into an integer.\n\n- \nstr(value)\n; into a string.\n\n\nStrings\n\n\n'Single'\n and \n\"double\"\n quotes are for short strings.\n\n\n\u2019\u2018\u2019Triple single and double quotes\n\nare rather multilines.\u2019\u2018\u2019\n\n\nAccess character and substrings\n\n\n\n\nprint s[-1]\n; print the last character of a string.\n\n\nprint s[-5:]\n; print from the 5th position from the end to the end.\n\n\n\n\nString functions\n\n\n\n\nlen(s)\n; length of the string,\n\n\ns.upper()\n; convert to uppercase.\n\n\ns.lower()\n; convert to lowercase.\n\n\ns.strip()\n; remove white spaces and tabs from both ends.\n\n\ns.strio('m')\n; remove \n'm'\n from both ends.\n\n\ns.rstrip()\n; remove on the right only.\n\n\ns.lstrip('m')\n; remove on the left only.\n\n\ns.split(' ')\n; cut into words where there is space.\n\n\ns.find('m')\n; search for the \n'm'\n substring and return the starting position.\n\n\ns.replace('m', 'n')\n; replace \n'm'\n with \n'n'\n.\n\n\ns.startwith('m')\n; check beginning and return \nTrue\n or \nFalse\n.\n\n\ns.endwith('m')\n; check end and return \nTrue\n or \nFalse\n.\n\n\n\n\nCreate lists\n\n\n\n\ndata = [1, 2, 3, 4, 5]\n.\n\n\ndata[1:3]\n; \n[2, 3]\n.\n\n\ndata[0:2]\n; \n[1, 2]\n.\n\n\ndata[:3]\n; \n[1, 2, 3]\n.\n\n\ndata[-2:]\n; \n[4, 5]\n.\n\n\ndata2 = data[:]\n; create a copy.\n\n\n\n\nModify lists\n\n\n\n\nl[i] = x\n; replace the i\nth\n element with \nx\n.\n\n\nl[i;j] = t\n; replace elements from \ni\n to \nj\n by \nt\n (iterable).\n\n\ndel l[i;j]\n; delete the elements of the list from \ni\n to \nj\n.\n\n\ndel s[i;k;k]\n; delete the elements of the list from \ni\n to \nj\n with stop \nk\n.\n\n\nl.append(x)\n; add element \nx\n to the list.\n\n\nl.extend(x)\n; add several element \nx\n to the list (iterable).\n\n\nl.count(x)\n; return the number of elements \nx\n in the list.\n\n\nl.index(x[. i[. j]])\n; return the smaller \nk\n such that \nl[k] = x\n and \ni <= k <= j\n.\n\n\nl.insert(i.x)\n; insert(wedge in) \nx\n.\n\n\nl.pop(i)\n; cancel the ith element and return its value; \nl.pop()\n does it for the last element.\n\n\nl.remove(x)\n; delete a choosen \nx\n element.\n\n\nl.reverse()\n; reverse the list order.\n\n\nl.sort()\n; sort the list.\n\n\nl.sort([cmp[. key[. reverse]]])\n; sort the list; \ncmp\n is a customized function for the comparison of element pairs that must return a negative value, zero, or a positive value depending on if the first element of the pair is lower than. equal to. or greater than the second element.\n\n\nsorted(l)\n; create a new list made of a simple ascending sort of the list without modifying the list.\n\n\n\n\nFunctions working of lists\n\n\n\n\nlen(data)\n; length of the list.\n\n\nmin(data)\n; smallest.\n\n\nmax(data)\n; largest.\n\n\nsum(data)\n; sum.\n\n\nrange(4)\n; create a list of number from 0 to 3.\n\n\nrange(1.5)\n; create a list of number from 1 to 4.\n\n\nrange(2.9.2)\n; create \n[2, 4, 6, 8]\n.\n\n\nrange(5, 0, -1)\n; create \n[5, 4, 3, 2, 1]\n\n\n\n\nTuples\n\n\n\n\nt = 1, 2, 3\n or \nt = (1, 2, 3)\n\n\nt = 1\n or \ntuple = (1,)\n\n\n\n\nAccessing data in dictionaries\n\n\n\n\nprices['banana']\n; return the value of the key.\n\n\nprices.get('banaba')\n; do the same thing, but if the key does not exit, it returns \nNone\n.\n\n\nprices.has_key('apple')\n; check whether the key(s) is(are) defined.\n\n\nprices.keys()\n; return a list of all keys.\n\n\nprices.values()\n; return a list of all values.\n\n\nprices.items()\n; return all keys and values as a list of tuples.\n\n\n\n\nModifying dictionaries\n\n\n\n\nprices['kiwi'] = 0.6\n; set the value of the key.\n\n\nprices.setdefault('egg', 0.9)\n; set the value of the key if it is not yet defined.\n\n\n\n\nNone\n\n\nNone indicate the object or part of it is empty. For example:\n\n- \na = None\n.\n\n- \nb = [None, None, 'green']\n.\n\n\nChapter 2, Your First Python Program\n\u00b6\n\n\nDifference between functions and methods\n\n\nFunctions are generic; use them anywhere without constraints. For example, \nlen()\n works on all data.\n\n\n>>> len('protein')\n7\n>>> len('111')\n3\n\n\n\n\nOther funtions, called methods, are specific; use them on a certain type of data. For example, \ncount()\n works only for strings or a \u2018string\u2019 variable (below, \nprotein\n is a string).\n\n\n>>> 'protein'.count('r')\n1\n>>> 'occurence'.count('c')\n3\n\n\n\n\nCount the occurrence of each amino acid in a protein sequence\n\n\ncount, element, in, string\n\n\ninsulin = \"GIVEQCCTSICSLYQLENYCNFVNQHLCGSHLVEALYLVCGERGFFYTPKT\"\n\nfor amino_acid in \"ACDEFGHIKLMNPQRSTVWY\":\n    number = insulin.count(amino_acid)\n    print amino_acid, number\n\n\n\n\nCreate a random DNA sequence of length 10\n\n\nimport random\n\nalphabet = \"AGCT\"\nsequence = \"\"\nfor i in range(10):\n    index = random.randint(0, 3)\n    sequence = sequence + alphabet[index]\n\nprint sequence\n\n\n\n\nPart 2, Data management\n\u00b6\n\n\nChapter 3, Analyzing a Data Column\n\u00b6\n\n\nRead from a text file\n\n\n\n\nreadlines()\n.\n\n\n\n\ntext_file = open('neuron_data.txt', 'r')\n# 'r' is facultative\n\nlines = text_file.readlines()\n\ntext_file.close()\n\nprint lines\n\n\n\n\n\n\nread()\n. \n\n\n\n\ntext_file = open('neuron_data.txt')\n# 'r' is facultative\n\nprint text_file.read()\n\ntext_file.close()\n\n\n\n\nDifference between \nread()\n and \nreadlines()\n\n\n\n\nread(x)\n; read up to x bytes in a file. If you don\u2019t supply the size, it reads the entire file. The output is displayed as strings only once.\n\n\nOne character = 1 byte.\n\n\nClose and reopen the file to read it again.\n\n\nreadlines(x)\n; read up to x bytes. If you don\u2019t supply a size, it reads all the data until it reaches a newline (\n\\n\n) or the end of a paragraph.\n\n\nClose and reopen the file to read it again.\n\n\n\n\nWrite a text file\n\n\noutput_file = open('counts.txt', 'w')\n# 'w' is mandatory\n\noutput_file.write('number of neuron lengths: 7\\n')\n\noutput_file.close()\n\n\n\n\nClean a text file\n\n\nstrip\n\n\n\n\nstrip()\n; removes blanks spaces.\n\n\nrstrip()\n; right only.\n\n\nlstrip()\n; left only.\n\n\n\n\noutput_file = open('counts.txt')\noutput_file.read()\noutput_file.close()\n\n# vs\n\noutput_file = open('counts.txt')\noutput_file.read().strip()\noutput_file.close()\n\n\n\n\nWrite and then read the same file\n\n\n\n\n'r'\n; cannot write with, only reads.\n\n\n'w'\n; cannot read with, only writes (an existing file with the same name will be erased).\n\n\n'a'\n append; data added to the end. \n\n\n'r+'\n; both read and write (by replacing the existing string at the beginning by the new string).\n\n\n\n\nfile1 = open('count.txt','w')\nfile1.write('this is just a dummy test\\n')\nfile1.close()\n\nfile2 = open('count.txt', 'r')\nprint file2.read()\nfile2.close()\n\nfile3 = open('count.txt','a')\nfile3.write('this is another test\\n')\nfile3.close()\n\nfile4 = open('count.txt', 'r')\nprint file4.read()\nfile4.close()\n\nfile5 = open('count.txt', 'w')\nfile5.write('this is a final test\\n')\nfile5.close()\n\nfile6 = open('count.txt', 'r')\nprint file6.read()\nfile6.close()\n\n\n\n\nRead a series of numbers from a text file and print a summary of the data\n\n\nstrip, append, length, minimum, maximum, sort, format, integer, float\n\n\n\n\nstrip()\n; remove blank spaces.\n\n\nA text is string by default even thought the file contains numbers; transform the text into float.\n\n\nappend()\n; each line to a list.\n\n\nlen(data)\n.\n\n\nsum(data)\n.\n\n\nmin(data)\n.\n\n\nmax(data)\n.\n\n\nsort()\n.\n\n\n%4i\n is an integer with 4 digits.\n\n\n%6.1f\n is a float with 6 digits and 2 decimals.\n\n\n\n\ndata = []\n\nfor line in open('neuron_data.txt'):\n    length = float(line.strip())\n    data.append(length)\n\nn_items = len(data)\ntotal = sum(data)\nshortest = min(data)\nlongest = max(data)\n\ndata.sort()\n\n\noutput = open(\"results.txt\",\"w\")\n\noutput.write(\"number of dendritic lengths : %4i \\n\"%(n_items))\noutput.write(\"total dendritic length      : %6.1f \\n\"%(total))\noutput.write(\"shortest dendritic length   : %7.2f \\n\"%(shortest))\noutput.write(\"longest dendritic length    : %7.2f \\n\"%(longest))\noutput.write(\"%37.2f\\n%37.2f\"%(data[-2], data[-3]))\n\noutput.close()\n\n\n\n\nFormat the data\n\n\nformatting, variable\n\n\n\n\n%s\n; a string.\n\n\n%d\n; a digit.\n\n\n%r\n; raw data.\n\n\n%10s\n; left-justify by 10 bytes.\n\n\n%-10s\n; right-justify. by bytes\n\n\n%i\n; an integer.\n\n\n%f\n; a float.\n\n\n%2f\n; a float with 2 digits.\n\n\n%2.2f\n; has 2 digits and 2 decimals.\n\n\n%2i\n; has 2 digits.\n\n\nAnd so on.\n\n\nstr()\n; turn a variable into a string (digit \n3\n to string \n'3'\n for example).\n\n\nint()\n; turn a variable into an integer (string \n'3'\n to digit \n3\n for example).\n\n\nfloat()\n; turn a variable into a float (digit \n3\n to \n3.0\n for example).\n\n\n\n\nfile1 = open('count.txt','w')\nfile1.write('this is just a dummy test')\nfile1.close()\n\nfile2 = open('count.txt', 'r')\nvariable = file2.read()\n\nprint \"Test1: %r\" % (variable)\nprint \"Test2: %s\" % (variable)\nprint \"Test3: %30s\" % (variable)\nprint \"Test4: %-30s\" % (variable)\nprint \"Test5: %30r\" % (variable)\nprint \"Test6: %-30r\" % (variable)\nprint \"Test7: %d, %d, %d\" % (1, 2, 3)\nprint \"Test8: %2d, %3d, %10d\" % (1, 2, 3)\nprint \"Test9: %d, %i, %f\" % (1, 2, 3)\nprint \"Test10: %i, %i, %i\" % (1, 2.8, 3.1416)\nprint \"Test11: %2i, %5i, %10i\" % (1, 2.8, 3.1416)\nprint \"Test12: %f, %f, %f\" % (1, 2.8, 3.1416)\nprint \"Test13: %2f, %2.2f, %10.3f\" % (1, 2.8, 3.1416)\nprint \"Test14: %2f, %2f, %2f\" % (0.11, 10.111, 1000.1111)\nprint \"Test15: %2.1f, %2.1f, %2.10f\" % (0.11, 10.111, 1000.1111)\n\nfile2.close()\n\n\n\n\nOutput:\n\n\nTest1: 'this is just a dummy test'\nTest2: this is just a dummy test\nTest3:      this is just a dummy test\nTest4: this is just a dummy test     \nTest5:    'this is just a dummy test'\nTest6: 'this is just a dummy test'   \nTest7: 1, 2, 3\nTest8:  1,   2,          3\nTest9: 1, 2, 3.000000\nTest10: 1, 2, 3\nTest11:  1,     2,          3\nTest12: 1.000000, 2.800000, 3.141600\nTest13: 1.000000, 2.80,      3.142\nTest14: 0.110000, 10.111000, 1000.111100\nTest15: 0.1, 10.1, 1000.1111000000\n\n\n\n\nWrite a list of numbers to a text file\n\n\ndata = [16.38, 139.90, 441.46, 29.03, 40.93, 202.07, 142.30, 346.00, 300.00]\n\nout = []\n\nfor value in data:\n    out.append(str(value) + '\\n')\nopen('results.txt', 'w').writelines(out)\n\n\n\n\nOuput:\n\n\n16.38\n139.9\n441.46\n29.03\n40.93\n202.07\n142.3\n346.0\n300.0\n\n\n\n\nCalculate the average from a list of numbers\n\n\n# calculate average from float numbers\ndata = [3.53, 3.47, 3.51, 3.72, 3.43]\naverage = sum(data) / len(data)\nprint average\n\n# calculate average from integer numbers\ndata = [1, 2, 3, 4]\naverage = float(sum(data)) / len(data)\nprint average\n\n\n\n\nCalculate the median from a list of numbers\n\n\ndata = [3.53, 3.47, 3.51, 3.72, 3.43]\n\ndata.sort()\n\nmid = len(data) / 2 \nif len(data) % 2 == 0:\n    median = (data[mid - 1] + data[mid]) / 2.0\nelse:\n    median = data[mid]\n\nprint median\n\n\n\n\nJoin or concatenate a list\n\n\n>>> L = ['1', '2', '3']\n>>> '+'.join(L)\n'1+2+3'\n\n>>> L = ['a', 'b', 'c']\n>>> ''.join(L)\n'abc'\n\n>>> L = ['1', '2', '3']\n>>> int(''.join(L))\n123\n\n\n\n\nCalculate (a variance and )a standard deviation from a list of numbers\n\n\nimport math\n\ndata = [3.53, 3.47, 3.51, 3.72, 3.43]\naverage = sum(data) / len(data)\n\ntotal = 0.0\n\nfor value in data:\n    total += (value - average) ** 2\n\nvariance = total / len(data) # population variance\nstddev = math.sqrt(variance) # population stddev\n\nprint variance\nprint stddev\n\n\n\n\nChapter 4, Parsing Data Records\n\u00b6\n\n\nFind items common to two lists\n\n\n# proteins participating in cell cycle\n\nlist_a = []\n\nfor line in open(\"cell_cycle_proteins.txt\"):\n    list_a.append(line.strip())\n\nprint list_a\n\n# proteins expressed in a given cancer cell\n\nlist_b = []\n\nfor line in open(\"cancer_cell_proteins.txt\"):\n    list_b.append(line.strip()) \n\nprint list_b\n\nfor protein in list_a:\n    if protein in list_b:\n        print protein, 'detected in the cancer cell'\n    else:\n        print protein, 'not observed'\n\n\n\n\nOutput:\n\n\n['P62258', 'P61981', 'P62191', 'P17980', 'P43686', 'P35998', 'P62333', 'Q99460', 'O75832']\n['P43686', 'P62333']\n\nP62258 not observed\nP61981 not observed\nP62191 not observed\nP17980 not observed\nP43686 detected in the cancer cell\nP35998 not observed\nP62333 detected in the cancer cell\nQ99460 not observed\nO75832 not observed\n\n\n\n\n**Find if two or more conditions are met\n\n\nboolean, operators, and, or, not\n\n\nseq = \"MGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQTPSKPASADGHRGPSAAFAPAAAE\"\n\nif 'GGG' in seq and 'RRR'in seq:\n    print 'GGG is at position: ', seq.find('GGG')\n    print 'RRR is at position: ', seq.find('RRR')\n\nif 'WWW' in seq or 'AAA' in seq:\n    print 'Either WWW or AAA occur in the sequence'\n\nif 'AAA' in seq and not 'PPP' in seq:\n    print 'AAA occurs in the sequence but not PPP'\n\n\n\n\nBoolean Operators\n\n\n\n\n\n\n\n\nCondition\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nA < B\n\n\nA lower than B\n\n\n\n\n\n\nA <= B\n\n\nA lower than or equal to B\n\n\n\n\n\n\nA > B\n\n\nA greater than B\n\n\n\n\n\n\nA >= B\n\n\nA greater than or equal to B\n\n\n\n\n\n\nA == B\n\n\nA equal to B\n\n\n\n\n\n\nA != B\n\n\nA different from B\n\n\n\n\n\n\nA<> B\n\n\nidem\n\n\n\n\n\n\nA is B\n\n\nA is the same thing as B \u2018thing\u2019 being an object\n\n\n\n\n\n\nA is not B\n\n\nA is not the same thing as B\n\n\n\n\n\n\nA in B\n\n\nA is present in the sequence B\n\n\n\n\n\n\nA not in B\n\n\nA is not present in the sequence B\n\n\n\n\n\n\n\n\nFind all prime numbers under 30\n\n\nfor i in range(30):\n    if i < 4:\n        print \"prime number:\", i\n    elif i % 2 == 0:\n        print \"multiple of two:\", i\n    elif i % 3 == 0:\n        print \"multiple of three:\", i\n    elif i % 5 == 0:\n        print \"multiple of five:\", i\n    else:\n        print \"prime number:\", i\n\n\n\n\nList vs Tuple vs Set\n\n\n\n\nmutable: change, replace, reorder, add elements.\n\n\nList = [1, 2, 3]\n; mutable sequences of objects. \n\n\nTuple = (1, 2, 3)\n; immutable ordered sequences of objects;.\n\n\nSet = set([1, 2, 3])\n; immutable unordered  collections of unique elements.\n\n\nThe three can contain digits, strings or other objects (embedded).\n\n\n\n\nMore on lists\n\n\n\n\nList[0]\n; extract\n\n\nLlist = [[1, 2, 3],[a, b, c],[x, 4, 'text'], 'seq']\n; embedded lists.\n\n\nList[0][1]\n; extract from embedded lists.\n\n\nList.append(5)\n; add.\n\n\nCreate:\n\n\nrange(3)\n.\n\n\nseq(0, 2, 1)\n.\n\n\n[0.0] * 10\n.\n\n\n[x**2 for x in range(5)]\n.\n\n\n\n\n\n\n\n\nCreating a list with a one-line loop\n\n\nloop, conditional, conditional, on one line\n\n\n# remove non-base symbols from a sequence\nsquares = [x**2 for x in range(5)]\nprint squares\n\nbases = ['A', 'C', 'T', 'G']\nprint bases\n\nseq = 'GGACXCAGXXGATT'\nprint seq\n\nseqlist = [base for base in seq if base in bases]\nprint seqlist\n\n\n\n\nWrite all headers from a file to a separate file\n\n\nfasta_file = open('SwissProt.fasta','r')\nout_file = open('SwissProt.header','w')\n\nfor line in fasta_file:\n    if line[0:1] == '>':\n        out_file.write(line)\n\nout_file.close()\n\n\n\n\nReads all AC numbers from the deflines of a file\n\n\nparse, parsing, text, file\n\n\ninput_file = open(\"SwissProt.fasta\",\"r\")\n\nac_list = []\n\nfor line in input_file:\n    if line[0] == '>':\n        fields = line.split('|')\n        ac_list.append(fields[1])\n\nprint ac_list\n\n\n\n\nOutput:\n\n\n['P31946', 'P62258', 'Q04917', 'P61981', 'P31947', 'P27348', 'P63104', 'P30443']\n\n\n\n\nRead a file (genbank_file) and convert it to another file (output_file)\n\n\ngenbank_file = open(\"AY810830.gb\")\noutput_file = open(\"AY810830.fasta\",\"w\")\n\nflag = False\nfor line in genbank_file:\n    if line[0:9] == 'ACCESSION':\n        accession = line.split()[1].strip()\n        output_file.write('>' + accession + '\\n')\n    if line[0:6] == 'ORIGIN': \n        flag = True\n    elif flag:\n        fields = line.split()\n        if fields != []:\n            seq = ''.join(fields[1:])\n            output_file.write(seq.upper() + '\\n')\n\ngenbank_file.close()\noutput_file.close()\n\n\n\n\nRead multiple files and extract data\n\n\nfasta_file = open('SwissProt.fasta','r')\nout_file = open('SwissProtHuman.fasta','w')\n\nseq = ''\nfor line in fasta_file:\n    if line[0] == '>' and seq == '':\n        # process the first line of the input file\n        header = line\n    elif line [0] != '>':\n        # join the lines with sequence\n        seq = seq + line\n    elif line[0] == '>' and seq != '':\n        # in subsequent lines starting with '>',\n        # write the previous header and sequence\n        # to the output file. Then re-initialize\n        # the header and seq variables for the next record\n        if \"Homo sapiens\" in header:\n            out_file.write(header + seq)\n        seq = ''\n        header = line\n\n# take care of the very last record of the input file\nif \"Homo sapiens\" in header:\n    out_file.write(header + seq)\nout_file.close()\n\n\n\n\nChapter 5, Searching Data\n\u00b6\n\n\nTranslate a RNA sequence to a protein sequence in three reading frames\n\n\ndictionary\n\n\ncodon_table = {\n    'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A', 'CGU':'R', 'CGC':'R',   \n    'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R', 'UCU':'S', 'UCC':'S',\n    'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', 'AUU':'I', 'AUC':'I',\n    'AUA':'I', 'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L', 'CUA':'L',\n    'CUG':'L', 'GGU':'G', 'GGC':'G', 'GGA':'G', 'GGG':'G', 'GUU':'V',\n    'GUC':'V', 'GUA':'V', 'GUG':'V', 'ACU':'T', 'ACC':'T', 'ACA':'T',\n    'ACG':'T', 'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P', 'AAU':'N',\n    'AAC':'N', 'GAU':'D', 'GAC':'D', 'UGU':'C', 'UGC':'C', 'CAA':'Q',\n    'CAG':'Q', 'GAA':'E', 'GAG':'E', 'CAU':'H', 'CAC':'H', 'AAA':'K',\n    'AAG':'K', 'UUU':'F', 'UUC':'F', 'UAU':'Y', 'UAC':'Y', 'AUG':'M',\n    'UGG':'W',\n    'UAG':'STOP', 'UGA':'STOP', 'UAA':'STOP'\n    }\n\n# read the RNA sequence into a single string\nrna = ''\nfor line in open('A06662-RNA.fasta'):\n    if not line.startswith('>'): \n        rna = rna + line.strip()\n\n# translate one frame at a time\nfor frame in range(3):\n    prot = '' \n    print 'Reading frame ' + str(frame + 1)\n    for i in range(frame, len(rna), 3):\n        codon = rna[i:i + 3]\n        if codon in codon_table:\n            if codon_table[codon] == 'STOP':\n                prot = prot + '*'\n            else: \n                prot = prot + codon_table[codon]\n        else:\n            # handle too short codons\n            prot = prot + '-'   \n\n    # format to blocks of 48 columns\n    i = 0\n    while i < len(prot):\n        print prot[i:i + 48]\n        i = i + 48\n\n\n\n\nOutput (contains a translated sequence for each reading frame):\n\n\nReading frame 1\nWDQSAEAACVRVRVRVCACVCVRLHLCRVGKEIEMGGQ*AQVPKALNP\nLVWSLLRAMGAIEKSEQGCV*M*GLEGSSREASSKAFAIIW*ENPARM\nDRQNGIEMSWQLKWTGFGTSLVVGSKQRRIWDSGGLAWGRRGCLRGWE\nG*E*DDTWWCLAGGGQG*LCEGTARATEAF*DPAVPEPGRQDLHCGRP\nGEHLA\n\nReading frame 2\nGTSQQRQRVCACVCVCVRVCVYACICVGWVRR*RWAGSRPRSRRP*TH\nWFGVS*GQWGPLRSLNRAVSECEV*KDPPEKPALKLLQSSGERTQQGW\nTGRME*R*VGS*SGQDLVLAWLWGASRGESGTLVVWPGADGGVSGAGR\nDESRMIHGGVWQEAGKDDYVKALPGQLKPFETLLSQNQGGKTFIVGDQ\nVSIW-\n\nReading frame 3\nGPVSRGSVCARACACVCVCVCTLAFVSGG*GDRDGRAVGPGPEGLEPT\nGLESPKGNGGH*EV*TGLCLNVRSRRILQRSQL*SFCNHLVREPSKDG\nQAEWNRDELAAEVDRIWY*PGCGEQAEENLGLWWSGLGQTGVSQGLGG\nMRVG*YMVVSGRRRARMTM*RHCPGN*SLLRPCCPRTREARPSLWETR\n*ASG-\n\n\n\n\nWhile loop\n\n\nseq = \"IVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\"\n\ni = 0\nwhile i < len(seq):\n    print seq[i:i + 12]\n    i = i + 12\n\n\n\n\nOutput:\n\n\nIVGGYTCGANTV\nPYQVSLNSGYHF\nCGGSLINSQWVV\nSAAHCYKSGIQV\nRLGEDNINVVEG\nNEQF\n\n\n\n\nFind the a sequence in a file\n\n\nswissprot = open(\"SwissProt.fasta\")\ninsulin_ac = 'P61981'\nresult = None\n\nwhile result == None:\n    line = swissprot.next()\n    if line.startswith('>'):\n        ac = line.split('|')[1]\n        if ac == insulin_ac:\n            result = line.strip()\n\nprint result\n\n\n\n\nOutput:\n\n\n>sp|P61981|1433G_HUMAN 14-3-3 protein gamma OS=Homo sapiens GN=YWHAG PE=1 SV=2\n\n\n\n\nSearching a list\n\n\nsearch\n\n\nbases = ['A', 'C', 'T', 'G']\nseq = 'CAGGCCATTRKGL'\n\nfor i in seq:\n    if i not in bases:\n        print i, \"is not a nucleotide\"\n\n\n\n\nOutput:\n\n\nR is not a nucleotide\nK is not a nucleotide\nL is not a nucleotide\n\n\n\n\nRead a file and store entries in a dictionary\n\n\nsequences = {}\nac = ''\nseq = ''\n\nfor line in open(\"SwissProt.fasta\"):\n    if line.startswith('>') and seq != '':\n        sequences[ac] = seq\n        seq = ''\n    if line.startswith('>'):\n        ac = line.split('|')[1]\n    else:\n        seq = seq + line.strip()\n\nsequences[ac] = seq\nprint sequences.keys()\nprint sequences['P62258']\n\n\n\n\nOutput:\n\n\n['Q04917', 'P63104', 'P27348', 'P31947', 'P31946', 'P30443', 'P61981', 'P62258']\n\nMDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIGARRASWRIISSIEQKEENKGGEDKLKMIREYRQMVETELKLICCDILDVLDKHLIPAANTGESKVFYYKMKGDYHRYLAEFATGNDRKEAAENSLVAYKAASDIAMTELPPTHPIRLGLALNFSVFYYEILNSPDRACRLAKAAFDDAIAELDTLSEESYKDSTLIMQLLRDNLTLWTSDMQGDGEEQNKEALQDVEDENQ\n\n\n\n\nRead a sequence from a structure\n\n\naa_codes = {\n     'ALA':'A', 'CYS':'C', 'ASP':'D', 'GLU':'E',\n     'PHE':'F', 'GLY':'G', 'HIS':'H', 'LYS':'K',\n     'ILE':'I', 'LEU':'L', 'MET':'M', 'ASN':'N',\n     'PRO':'P', 'GLN':'Q', 'ARG':'R', 'SER':'S',\n     'THR':'T', 'VAL':'V', 'TYR':'Y', 'TRP':'W'}\n\nseq = ''\n\nfor line in open(\"1TLD.pdb\"):\n    if line[0:6] == \"SEQRES\":\n        columns = line.split()\n        for resname in columns[4:]:\n            seq = seq + aa_codes[resname]\n\ni = 0\nprint \">1TLD\"\nwhile i < len(seq):\n    print seq[i:i + 64]\n    i = i + 64\n\n\n\n\nOutput:\n\n\n>1TLD\nIVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\nISASKSIVHPSYNSNTLNNDIMLIKLKSAASLNSRVASISLPTSCASAGTQCLISGWGNTKSSG\nTSYPDVLKCLKAPILSDSSCKSAYPGQITSNMFCAGYLEGGKDSCQGDSGGPVVCSGKLQGIVS\nWGSGCAQKNKPGVYTKVCNYVSWIKQTIASN\n\n\n\n\nChapter 6, Filtering Data\n\u00b6\n\n\nCalculate the intersection of two lists\n\n\nvenn\n\n\ndata_a = [1, 2, 3, 4, 5, 6]\ndata_b = [1, 5, 7, 8, 9]\n\na_and_b = []\n\nfor num in data_a:\n    if num in data_b:\n        a_and_b.append(num)\n\nprint a_and_b\n\n\n\n\nOutput:\n\n\n[1, 5]\n\n\n\n\nMore about sets\n\n\nset\n\n\n\n\nSet = set([1, 2, 3])\n; immutable unordered collections of unique elements.\n\n\nThey are not sequential objects like lists.\n\n\nThey cannot contain identical elements.\n\n\nto remove duplicates\n\n\nto calculate the intersection\n\n\nthe union\n\n\nthe difference between two or more group of objects\n\n\nas long as the order is not important.\n\n\n\n\n\n\nThey do not support indexing and slicing operations.\n\n\nThey take the \nin\n and \nnot in\n operators (test an element for membership in a set).\n\n\n\n\n>>> s1 = set('LDFGJLDFGDGD')\n>>> s1\nset(['J', 'F', 'L', 'G', 'D'])\n\n>>> 'L' in s1\nTrue\n\n>>> 'Z' not in s1\nTrue\n\n>>> s2 = ('LDF')\n>>> s1.issubset(s2)\nFalse\n\n>>> s1.issuperset(s2)\nTrue\n\n>>> s1 = set(['a', 1, 2, 3, 4, 5, 'c', 'b'])\n>>> 5 in s1\nTrue\n\n>>> 6 in s1\nFalse\n\n>>> s2 = set([10, 4, 5])\n>>> s1.issubset(s2)\nFalse\n\n>>> s1.issuperset(s2)\nFalse\n\n>>> s3 = set((1, 2, 3, 4))\n>>> s3\nset([1, 2, 3, 4])\n\n>>> s3.add(5)\n>>> s3\nset([1, 2, 3, 4, 5])\n\n>>> s5 = set([1, 2, 3, 'b', 'c'])\n>>> s5\nset([1, 2, 3, 'b', 'c'])\n\n>>> s5.update(['a', 'd', 4])\n>>> s5\nset(['a', 1, 2, 3, 4, 'd', 'c', 'b'])\n\n>>> s1 = set(['a', 'b', 'c'])\n>>> s2 = set(['c', 'd', 'e'])\n>>> s1.union(s2)\nset(['a', 'c', 'b', 'e', 'd'])\n\n>>> s1.intersection(s2)\nset(['c'])\n\n>>> s1.symmetric_difference(s2)\nset(['a', 'b', 'e', 'd'])\n\n>>> s1.difference(s2)\nset(['a', 'b'])\n\n>>> s2.difference(s1)\nset(['e', 'd'])\n\n\n\n\nCalculate the intersection of two sets\n\n\ndata_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_and_b = data_a.intersection(data_b)\nprint a_and_b\n\n\n\n\nOutput:\n\n\nset([1, 5])\n\n\n\n\nFind numbers common to three sets\n\n\nreduce() is\n\na = set((1, 2, 3, 4, 5))\nb = set((2, 4, 6, 7, 1))\nc = set((1, 4, 5, 9))\n\ntriple_set = [a, b, c]\ncommon = reduce(set.intersection, triple_set)\nprint common\n\n\n\n\nOutput:\n\n\nset([1, 4])\n\n\n\n\nCalculate the differences of two lists\n\n\ndata_a = [1, 2, 3, 4, 5, 6]\ndata_b = [1, 5, 7, 8, 9]\n\na_not_b = []\nb_not_a = []\n\nfor num in data_a:\n    if num not in data_b:\n        a_not_b.append(num)\n\nfor num in data_b:\n    if num not in data_a:\n        b_not_a.append(num)\n\nprint a_not_b\nprint b_not_a\n\n\n\n\nOutput:\n\n\n[2, 3, 4, 6]\n[7, 8, 9]\n\n\n\n\nCalculate the differences of two sets 1\n\n\ndata_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_not_b = data_a.difference(data_b)\nb_not_a = data_b.difference(data_a)\n\nprint a_not_b\nprint b_not_a\n\n\n\n\nOutput:\n\n\nset([2, 3, 4, 6])\nset([8, 9, 7])\n\n\n\n\nCalculate the differences of two sets 2\n\n\ndata_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_or_b = data_a.union(data_b)\na_xor_b = data_a.symmetric_difference(data_b)\n\nprint a_or_b\nprint a_xor_b\n\n\n\n\nOutput:\n\n\nset([1, 2, 3, 4, 5, 6, 7, 8, 9])\nset([2, 3, 4, 6, 7, 8, 9])\n\n\n\n\nRemove elements from a list\n\n\n\n\npop()\n; return and remove the first value.\n\n\npop(0)\n; return and remove a specific position in the index.\n\n\n\n\n>>> data_a = [1, 2, 3, 4, 5, 6, 7]\n>>> data_a.pop()\n1\n\n>>> print data_a\n[2, 3, 4, 5, 6, 7]\n\n\n\n\n\n\ndel()\n; remove a specific position in the index only.\n\n\n\n\ndelete\n\n\n>>> data_a = [1, 2, 3, 4, 5, 6, 7]\n>>> del(data_a[1])\n>>> print data_a\n[1, 3, 4, 5, 6, 7]\n\n\n\n\n\n\nremove()\n;  remove a specific element only.\n\n\n\n\nremove\n\n\n>>> data_a = [1, 2, 3, 4, 5, 6]\n>>> data_a.remove(2)\n>>> print data_a\n[1, 3, 4, 5, 6]\n\n>>> data = [x for x in data_a if x != 3]\n\n\n\n\nSlicing a list\n\n\nslice, subset\n\n\n>>> data_a = [1, 2, 3, 4, 5, 6]\n>>> data_2 = data_a[:2]\n[1, 2]\n\n\n\n\nRemove elements from a dictionary\n\n\npop, delete\n\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> d.pop('a')\n1\n\n>>> d\n{'b': 2, 'c': 3}\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> del d['a']\n1\n\n>>> d\n{'b': 2, 'c': 3}\n\n\n\n\nDelete particular lines from a text file or write back particular lines in a new file\n\n\nlines = open('text.txt').readlines()\nopen('new.txt', 'w').writelines(lines[2:4]+lines[6:])\n\n\n\n\nRemove some lines from a text file\n\n\nin_file = open('text.txt')\nout_file = open('new.txt', 'w')\n\nindex = 0\nindices_to_remove = [1, 2, 5, 6]\nfor line in in_file:\n    index = index + 1\n    if index not in indices_to_remove:\n        out_file.write(line)\n\nin_file.close()\nout_file.close()\n\n\n\n\nRemove some lines from a text file with \nenumerate()\n\n\nenumerate\n\n\nout_file = open('new.txt', 'w')\nindices_to_remove = [1, 2, 5, 6]\n\nfor index, line in enumerate(open('text.txt')):\n    if (index + 1) not in indices_to_remove:\n        out_file_write(line)\n\nout_file.close()\n\n\n\n\nRemove duplicates from a file with accession numbers 1\n\n\nset\n\n\n\n\nUsing a set is faster but distorts the order.\n\n\n\n\ninput_file = open('UniprotID.txt')\noutput_file = open('UniprotID-unique.txt','w')\n\nunique = set(input_file)\nfor line in input_file:\n    unique.add(line)\n\nfor line in unique:\n    output_file.write(line)\n\n\n\n\nRemove duplicates from a list of accession numbers 2\n\n\nlist\n\n\ninput_file = open('UniprotID.txt')\noutput_file = open('UniprotID-unique.txt','w')\n\nunique = []\nfor line in input_file:\n    if line not in unique:\n        output_file.write(line)\n        unique.append(line)\n\ninput_file.close()\noutput_file.close()\n\n\n\n\nCompare two lists of accession codes using sets\n\n\nset comparison, difference\n\n\n# read the old database release\nold_db = set()\nfor line in open(\"list_old.txt\"):\n    accession = line.strip()\n    old_db.add(accession)\n\n# read the new database release\nnew_db = set()\nfor line in open(\"list_new.txt\"):\n    accession = line.strip()\n    new_db.add(accession)\n\n# report the differences\nnew_entries = new_db.difference(old_db)\nprint \"new entries\", list(new_entries)\nold_entries = old_db.difference(new_db)\nprint \"deprecated entries\", list(old_entries)\nunique_entries = new_db.symmetric_difference(old_db)\nprint \"unique entries\", list(unique_entries)\n\n\n\n\nChapter 7, Managing Tabular Data\n\u00b6\n\n\nThe original data\n\n\n\n\n\n\n\n\nprotein\n\n\next1\n\n\next2\n\n\next3\n\n\n\n\n\n\n\n\n\n\n0.16\n\n\n0.038\n\n\n0.044\n\n\n0.04\n\n\n\n\n\n\n0.33\n\n\n0.089\n\n\n0.095\n\n\n0.091\n\n\n\n\n\n\n0.66\n\n\n0.184\n\n\n0.191\n\n\n0.191\n\n\n\n\n\n\n1.0\n\n\n0.28\n\n\n0.292\n\n\n0.283\n\n\n\n\n\n\n1.32\n\n\n0.365\n\n\n0.367\n\n\n0.365\n\n\n\n\n\n\n1.66\n\n\n0.441\n\n\n0.443\n\n\n0.444\n\n\n\n\n\n\n\n\nRead tabular data from a tab-separated text file\n\n\ntable = []\n\nfor line in open('lowry_data.txt'):\n    table.append(line.strip().split('\\t'))\n\nprint table\n\n\n\n\nOutput:\n\n\n[\n['protein', 'ext1', 'ext2', 'ext3'],\n['0.16', '0.038', '0.044', '0.04'],\n['0.33', '0.089', '0.095', '0.091'],\n['0.66', '0.184', '0.191', '0.191'],\n['1.0', '0.28', '0.292', '0.283'],\n['1.32', '0.365', '0.367', '0.365'],\n['1.66', '0.441', '0.443', '0.444']\n]\n\n\n\n\nWrite a nested list to a text file\n\n\ntable = [\n    ['protein', 'ext1', 'ext2', 'ext3'],\n    [0.16, 0.038, 0.044, 0.040],\n    [0.33, 0.089, 0.095, 0.091],\n    [0.66, 0.184, 0.191, 0.191],\n    [1.00, 0.280, 0.292, 0.283],\n    [1.32, 0.365, 0.367, 0.365],\n    [1.66, 0.441, 0.443, 0.444]\n    ]\n\nout = ''\n\nfor row in table:\n    line = [str(cell) for cell in row]\n    out = out + '\\t'.join(line) + '\\n'\n\nopen('lowry_data.txt', 'w').write(out)\n\n\n\n\nReformat a four-column to a two-column table\n\n\nCreate a 2D table.\n\n\nPrint the table line by line.\n\n\ntable = [\n    ['protein', 'ext1', 'ext2', 'ext3'],\n    [0.16, 0.038, 0.044, 0.040],\n    [0.33, 0.089, 0.095, 0.091],\n    [0.66, 0.184, 0.191, 0.191],\n    [1.00, 0.280, 0.292, 0.283],\n    [1.32, 0.365, 0.367, 0.365],\n    [1.66, 0.441, 0.443, 0.444]\n    ]\n\n# remove the first row\ntable = table[1:]\n\nprotein, ext1, ext2, ext3 = zip(*table)\n\n# create a single column for `ext` or concatenate each `ext`\n# extend (`* 3`) the `protein` column to match the `ext` column.\nextinction = ext1 + ext2 + ext3\nprotein = protein * 3\n\n# create four tuples for each column\ntable = zip(protein, extinction)\n\nfor prot, ext in table:\n    print prot, ext\n\n\n\n\nOutput:\n\n\n\n\n\n\n\n\nprotein\n\n\next\n\n\n\n\n\n\n\n\n\n\n0.16\n\n\n0.038\n\n\n\n\n\n\n0.33\n\n\n0.089\n\n\n\n\n\n\n0.66\n\n\n0.184\n\n\n\n\n\n\n1.0\n\n\n0.28\n\n\n\n\n\n\n1.32\n\n\n0.365\n\n\n\n\n\n\n1.66\n\n\n0.441\n\n\n\n\n\n\n0.16\n\n\n0.044\n\n\n\n\n\n\n0.33\n\n\n0.095\n\n\n\n\n\n\n0.66\n\n\n0.191\n\n\n\n\n\n\n1.0\n\n\n0.292\n\n\n\n\n\n\n1.32\n\n\n0.367\n\n\n\n\n\n\n1.66\n\n\n0.443\n\n\n\n\n\n\n0.16\n\n\n0.04\n\n\n\n\n\n\n0.33\n\n\n0.091\n\n\n\n\n\n\n0.66\n\n\n0.191\n\n\n\n\n\n\n1.0\n\n\n0.283\n\n\n\n\n\n\n1.32\n\n\n0.365\n\n\n\n\n\n\n1.66\n\n\n0.444\n\n\n\n\n\n\n\n\nCreate a table; lists in a list\n\n\n\n\nEmpty 1.\n\n\n\n\ntable = [[0] * 3 for x in range(3)]\n\n\n\n\n\n\nEmpty 2.\n\n\n\n\ntable = []\nfor i in range(3):\n    table.append([0] * 3)\n\n\n\n\nEncode a 2D list; lists in a list\n\n\ntabular, table, two dimensions\n\n\ntable = [\n    [ 0,  1,  2,  3],\n    [10, 11, 12, 13],\n    [20, 21, 22, 23]\n    ]\n\n\n\n\nEncode a list of nested tuples; tuples in a list\n\n\ntable = [\n    ( 0,  1,  2,  3),\n    (10, 11, 12, 13),\n    (20, 21, 22, 23)\n    ]\n\n\n\n\nExtract, access rows and cells from a 2D table\n\n\ntabular, table, two dimensions\n\n\n\n\ntable[1]\n; extract the 2nd row.\n\n\ntable[1][2]\n; extract a single cell (2nd row, 3rd column).\n\n\ntable[1:]\n or \ntable.pop(0)\n; slice the 1st row, keep the remaining.\n\n\ntable.pop(2)\n; delete the 3rd row.\n\n\ntable[:2]\n; slice the 3rd column, keep the remaining.\n\n\ntable[:2] + table[3:]\n; slice the 3rd column and 4th row, keep the remaining.\n\n\ntable.insert(2, [0.55, 0.12, 0.12, 0.14])\n; insert a new row in 3rd position\n\n\ntable.append([0.55, 0.12, 0.12, 0.14])\n; insert a new row at the end.\n\n\n\n\nLooping to access each row\n\n\nfor row in table:\n    print row\n\n\n\n\nLooping to access each cell\n\n\nfor row in table:\n    for cell in row:\n        print cell\n\n\n\n\nExtract, access columns from a 2D table\n\n\ntabular, table, two dimensions\n\n\nprotein = []\n\n# access the 1st, 2nd... column (separate the columns)\nfor row in table:\n    protein.append(row[0])\n\n\n\n\n# access the 4th column\ncolumns = zip(*table)\nfourth = column[3]\n\n\n\n\n\n\nprotein, ex1. ext2, ext3 = zip(*table)\n; access many columns; now each column is in a separate tuple.\n\n\n\n\nFlip a table 90 degrees\n\n\nconvert column to row, row to column\n\n\n\n\nColumn becomes rows. Easier to extract or insert rows and cells.\n\n\n\n\ndata = [\n    [ 0,  1,  2,  3],\n    [10, 11, 12, 13],\n    [20, 21, 22, 23]\n]\n\ncolumns = zip(*data)\nprint columns\n\n\n\n\nOutput:\n\n\n[\n(0, 10, 20),\n(1, 11, 21),\n(2, 12, 22),\n(3, 13, 23)\n]\n\n\n\n\n\n\nBut rows are now immutable tuples!\n\n\nYou cannot manipulate individual cells.\n\n\nConvert the rows to lists again in order to extract a cell.\n\n\n\n\ntable[1] = list(table[1])\ntable[1][2]\n\n\n\n\nInsert, access or extract columns from a 2D table\n\n\ntabular, table, two dimensions\n\n\ntable = zip(*table)\ntable.append(['ext4', 0, 0, 0, 0, 0, 0])\ntable = zip(*table)\n\ntable = zip(*table)\ntable.pop(1)\ntable = zip(*table)\n\ntable = zip(*table)\ntable\n\n\n\n\nThe \nzip()\n function\n\n\n\n\nzip()\n; iterate though lists, tuples, and strings.\n\n\n\n\n>>> zip([1, 2, 3], [4, 5, 6])\n[\n(1, 4),\n(2, 5),\n(3, 6)\n]\n\n\n\n\n\n\nThe asterik tells the function to use all the arguments.\n\n\n\n\nzip(*table)\n\n# vs\n\nzip(table[0], table[1], table[2], table[3])\n\n\n\n\nMulti-dimentional tables\n\n\ntabular, table, two dimensions, three dimensions, 2D, 3D, lists in list\n\n\ncube = [[[0, 1], [2, 3]], [[4, 5], [6, 7]]]\n\n\n\n\n\n\nWarning: more dimensions means more nested data.\n\n\nIt slows down the calculations!!! \n\n\nPrefer Numpy, Pandas, parallel computing.\n\n\nAvoid going over 2D!\n\n\n\n\nCreate a table; dictionaries in a table, in a list\n\n\ntable = [\n   {'protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040},\n   {'protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091},\n   {'protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191},\n   {'protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283},\n   {'protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365},\n   {'protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444}\n   ]\n\n\n\n\nExtract, access cells in a table\n\n\n# second row, cell 'ext2' instead of a number\ncell = table[1]['ext2']\n\nprint table\nprint cell\n\n\n\n\nCreate a table; dictionaries in a dictionary\n\n\ntable = {\n   'row1': {'protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040},\n   'row2': {'protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091},\n   'row3': {'protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191},\n   'row4': {'protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283},\n   'row5': {'protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365},\n   'row6': {'protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444}\n   }\n\n\n\n\nExtract, access cells in a table, in a dictionary\n\n\nMore readable this way; second row, cell \n'ext2'\n:\n\n\ncell = table['row1']['ext2']\n\nprint table\nprint cell\n\n\n\n\nCreate a table: lists in a dictionaries\n\n\nData for each row are in a simpler format.\n\n\ntable = {\n   '1': ['protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040\u00b8],\n   '2': ['protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091],\n   '3': ['protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191],\n   '4': ['protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283],\n   '5': ['protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365],\n   '6': ['protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444]\n   }\n\n\n\n\nCreate a table; formats\n\n\n\n\nLists in a list: \n\n\nEasy to access/add/delete rows, to sort. \n\n\nDifficult to deal with columns and a specific cell.\n\n\n\n\n\n\nDictionaries in a dictionary:\n\n\nEasy to access column entries.\n\n\nEasy to read (find data).\n\n\nUnsorted and impossible to sort.\n\n\n\n\n\n\nMixed lists and dictionaries:\n\n\nUse the advantage of both types and build the table accordingly (l, d or d, l for rows, columns) depending on the operations (see above).\n\n\nThe code is harder to read or less straightforward.\n\n\n\n\n\n\n\n\nConvert a table from a nested list to a nested dictionary\u2026\n\n\ntable = [\n    ['protein', 'ext'],\n    [0.16, 0.038],\n    [0.33, 0.089],\n    [0.66, 0.184],\n    [1.00, 0.280],\n    [1.32, 0.365],\n    [1.66, 0.441]\n]\n\n# convert nested list to nested dict\nnested_dict = {}\nn = 0\nkey = table[0]\nfor row in table[1:]: # for row in table[0:]  includes the header\n    n += 1\n    entry = {key[0]: row[0], key[1]: row[1]}\n    nested_dict['row'+str(n)] = entry\n\nprint nested_dict\n\n\n\n\nOutput:\n\n\n{\n'row1': {'protein': 0.16, 'ext': 0.038},\n'row2': {'protein': 0.33, 'ext': 0.089},\n'row3': {'protein': 0.66, 'ext': 0.184},\n'row4': {'protein': 1.0, 'ext': 0.28},\n'row5': {'protein': 1.32, 'ext': 0.365},\n'row6': {'protein': 1.66, 'ext': 0.441}\n}\n\n\n\n\n\u2026and convert a nested dictionary to a table\n\n\n# convert nested dict back to nested list\nnested_list = []\nfor entry in nested_dict:\n    key = nested_dict[entry]\n    nested_list.append([key['protein'], key['ext']])\n\nprint nested_list\n\n\n\n\nOutput:\n\n\n[\n[0.16, 0.038],\n[0.33, 0.089],\n[0.66, 0.184],\n[1.0, 0.28],\n[1.32, 0.365],\n[1.66, 0.441]\n]\n\n\n\n\nChapter 8, Sorting Data\n\u00b6\n\n\nSort a table by one column and write it to a file\n\n\nadd, index, list\n\n\n\n\nsorted()\n.\n\n\nitemgetter()\n; turn elements of each column into a sortable key.\n\n\n\n\nfrom operator import itemgetter\n\n# read table to a nested list of floats\ntable = []\nfor line in open(\"random_distribution.tsv\"):\n    columns = line.split()\n    columns = [float(x) for x in columns]\n    table.append(columns)\n\n# sort the table by second column\ncolumn = 1\ntable_sorted = sorted(table, key = itemgetter(column))\n\n# format table as strings\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    print \"\\t\".join(row)\n\n\n\n\nOutput (first 3 lines only):\n\n\n6153.0  58.0    0.00942629611572    40.0    0.00650089387291    260.0   0.0422558101739\n6101.0  64.0    0.0104900835929 41.0    0.00672020980167    299.0   0.0490083592854\n6101.0  68.0    0.0111457138174 39.0    0.0063923946894 274.0   0.0449106703819\n\n\n\n\nList are good for sorting\n\n\n\n\nASCII sort order chart (top to bottom, left to right):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspace\n\n\n0\n\n\n:\n\n\nA\n\n\nQ\n\n\n[\n\n\na\n\n\nq\n\n\n}\n\n\n\n\n\n\n!\n\n\n1\n\n\n;\n\n\nB\n\n\nR\n\n\n\\\n\n\nb\n\n\nr\n\n\ntick\n\n\n\n\n\n\n\u201c\n\n\n2\n\n\n<\n\n\nC\n\n\nS\n\n\n]\n\n\nc\n\n\ns\n\n\n{\n\n\n\n\n\n\n#\n\n\n3\n\n\n=\n\n\nD\n\n\nT\n\n\n^\n\n\nd\n\n\nt\n\n\n\n\n\n\n\n\n$\n\n\n4\n\n\n>\n\n\nE\n\n\nU\n\n\n_\n\n\ne\n\n\nu\n\n\nDEL\n\n\n\n\n\n\n%\n\n\n5\n\n\n?\n\n\nF\n\n\nV\n\n\n`\n\n\nf\n\n\nv\n\n\n\n\n\n\n\n\n&\n\n\n6\n\n\n@\n\n\nG\n\n\nW\n\n\n\n\ng\n\n\nw\n\n\n\n\n\n\n\n\n\u2018\n\n\n7\n\n\n\n\nH\n\n\nX\n\n\n\n\nh\n\n\nx\n\n\n\n\n\n\n\n\n(\n\n\n8\n\n\n\n\nI\n\n\nY\n\n\n\n\ni\n\n\ny\n\n\n\n\n\n\n\n\n)\n\n\n9\n\n\n\n\nJ\n\n\nZ\n\n\n\n\nj\n\n\nz\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\nK\n\n\n\n\n\n\nk\n\n\n\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\nL\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\nM\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\nN\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\nO\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n/\n\n\n\n\n\n\nP\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\nDifference between \nsort()\n and \nsorted()\n\n\n\n\nsort()\n; apply to lists\n\n\nsorted()\n; apply to lists, tuples, and dictionary keys.\n\n\nreverse()\n sort the other way around.\n\n\nsorted(data, reverse = True)\n; idem.\n\n\noperator.itemgetter(i)(T)\n returns the \ni\nth element of \nT\n, a string, a list, a tuple, or a dictionary.\n\n\n\n\n>>> from operator import itemgetter\n>>> data = ['A', 'T', 'C']\n>>> itemgetter(1)(data)\n'A'\n>>> itemgetter(1, -1)(data)\n('A', 'T')\n\n\n\n\nnew_table = sorted(table, key = itemgetter(1, 3))\n\n\n\n\nSort entries in a tabular output file in reverse order\n\n\n\n\nNotice the \ntable_sorted = sorted(table, key = itemgetter(2), reverse=True)\n.\n\n\n\n\nfrom operator import itemgetter\n\ninput_file = open(\"BlastOut.csv\")\noutput_file = open(\"BlastOutSorted.csv\",\"w\")\n\n# read BLAST output table\ntable = []\nfor line in input_file:\n    col = line.split(',')\n    col[2] = float(col[2])\n    table.append(col)\n\ntable_sorted = sorted(table, key = itemgetter(2), reverse=True)\n\n# write sorted table to an output file\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write(\"\\t\".join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()\n\n\n\n\nSort a tuple by converting it to a list\n\n\n# sort a tuple\ndata = (1, 4, 5, 3, 8, 9, 2, 6, 8, 9, 30)\nlist_data = list(data)\nlist_data.sort()\nnew_tup = tuple(data)\nprint new_tup\n\n# sort a tuple using the sorted() built-in function\nnew_tup = tuple(sorted(data))\nprint new_tup\n\n\n\n\nBoth outputs:\n\n\n(1, 4, 5, 3, 8, 9, 2, 6, 8, 9, 30)\n(1, 2, 3, 4, 5, 6, 8, 8, 9, 9, 30)\n\n\n\n\nConvert a dictionary to a sorted list\n\n\ndata = {1: 'a', 2: 'b', 4: 'd', 3: 'c',\n        5: 't', 6: 'm', 36: 'z'}\n\n# create a list of keys and go through them one by one\nkeys = list(data)\nkeys.sort()\nfor key in keys:\n    print key, data[key]\n\n\n# sort keys using the sorted() built-in function\nfor key in sorted(data):\n    print key, data[key]\n\n\n\n\nOutput:\n\n\n1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z\n1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z\n\n\n\n\nSort strings by their length\n\n\nlamda, function\n\n\n\n\nUse a \nlambda\n function and replace \nitemgetter()\n.\n\n\n\n\ndata = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda x: len(x))\nprint new_data\n\n\n\n\ndata = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda col: col[1]) # alternative\nprint new_data\n\n\n\n\nSame output:\n\n\n['ASDF', 'SDFSD', 'GSGDGG', 'SDFSADGSAG']\n\n\n\n\nSort a table by seven columns in one operation\n\n\nfrom operator import itemgetter\n\n# read table\nin_file = open(\"random_distribution.tsv\")\ntable = []\nfor line in in_file:\n    columns = line.split()\n    columns = [float(x) for x in columns]\n    table.append(columns)\n\ntable_sorted = sorted(table, key=itemgetter(0, 1, 2, 3, 4, 5, 6))\nprint table_sorted\n\n\n\n\nOutput (first 3 lines only):\n\n\n[\n[6041.0, 87.0, 0.0144015891409, 44.0, 0.00728356232412, 213.0, 0.035259063069],\n[6042.0, 121.0, 0.0200264812976, 35.0, 0.00579278384641, 262.0, 0.0433631247931],\n[6044.0, 113.0, 0.0186962276638, 67.0, 0.0110853739246, 266.0, 0.0440105890139],\n...\n]\n\n\n\n\nSort entries in a tabular BLAST output file in reverse order\n\n\nfrom operator import itemgetter\n\ninput_file = open(\"BlastOut.csv\")\noutput_file = open(\"BlastOutSorted.csv\",\"w\")\n\n# read BLAST output table\ntable = []\nfor line in input_file:\n    col = line.split(',')\n    col[2] = float(col[2])\n    table.append(col)\n\ntable_sorted = sorted(table, key=itemgetter(2), reverse=True)\n\n# write sorted table to an output file\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write(\"\\t\".join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()\n\n\n\n\nSort entries in a comma separated file by two columns\n\n\nfrom operator import itemgetter\n\ninput_file = open(\"PDBhaemoglobinReport.csv\")\noutput_file = open(\"PDBhaemoglobinSorted.csv\",\"w\")\n\ntable = []\nheader = input_file.readline()\nfor line in input_file:\n    col = line.split(',')\n    col[3] = float(col[3][1:-1])\n    col[4] = int(col[4][1:-2])\n    table.append(col)\n\ntable_sorted = sorted(table, key=itemgetter(3, 4))\n\noutput_file.write(header + '\\t')\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write(\"\\t\".join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()\n\n\n\n\nChapter 9, Pattern Matching and Text Mining\n\u00b6\n\n\nFind a sequence pattern in a sequence\n\n\nregex, regular expression\n\n\n\n\nre\n package.\n\n\n\n\nimport re\n\n# define a string with occurrences of regex:\nseq = 'VSVLTMFRYAGWLDRLYMLVGTQLAAIIHGVALPLMMLI'\n\n# compile a pattern and assign it to a variable\npattern = re.compile('[ST]Q')\n\n# search for the pattern in the string\nmatch = pattern.search(seq)\nif match:\n    # print the first match along the sequence with the group() method\n    # 4 characters before and after the pattern\n    print '%10s' %(seq[match.start() - 4:match.end() + 4])\n    print '%6s' % match.group()\nelse:\n    print \"no match\"\n\n\n\n\nOutput:\n\n\nMLVGTQLAAI\n    TQ\n\n\n\n\nre\n methods\n\n\n\n\ngroup()\n; return the matching subgroup.\n\n\nspan()\n; return a tuple containing the starting and ending position of the match.\n\n\nstart()\n; return the starting position.\n\n\nend()\n; return the ending position.\n\n\nsearch()\n; find the \nfirst\n occurence within the string.\n\n\nmatch()\n; attempt to match a pattern to a string. If the pattern is within the string, it will not match it. It will find \u2018S\u2019 in \u2018ST\u2019, but not in \u2018TST\u2019. \n\n\nfindall()\n; return a list containing \nall\n the matching substrings.\n\n\nfinditer()\n; find \nall\n the match objects corresponding to the regex matches and returns them in the form of an iterator.\n\n\n\n\nimport re\n\npattern = re.compile('R.[ST][^P]')\nseq = 'RQSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'\n\n# findall returns a list of all matches\nmatches = pattern.findall(seq)\nprint matches\n\n# finditer returns an iterator of match objects\nmatch_iter = pattern.finditer(seq)\nfor match in match_iter:\n    print match.group(), match.span(), match.start(), match.end()\n\n\n\n\nOuput:\n\n\n['RQSA', 'RRSL', 'RPSK']\nRQSA (0, 4) 0 4\nRRSL (18, 22) 18 22\nRPSK (40, 44) 40 44\n\n\n\n\nMore \nre\n methods\n\n\n\n\nDivide regex in subgroups, each matching a different component of interest.\n\n\n(.)\n; delimite a group.\n\n\nR(.)[ST][^P]\n; stand for \u2018R\u2019, \u2018any character\u2019, pattern \u2018ST\u2019, any character different from \u2018P\u2019.\n\n\nThe \u2018any character\u2019 is also a subgroup.\n\n\nWhat ever is found between \nR\n and \n[ST][^P]\n is a subgroup.\n\n\n\n\n\n\nR(.{0,3})[ST][^P]\n; add a `{0,3}.\n\n\nThis qualifier or quantifiers means that at least 0 and at most 3 repetitions of \u2018R\u2019.\n\n\n\n\n\n\ngroup()\n; always return the complete matching substring (0 for no subgroup).\n\n\ngroup(#)\n; return subgroups numbered from left to right in increasing order (subgroup #).\n\n\n\n\nFind multiple patterns in a search string\n\n\nimport re\n\nseq = 'QSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'\n\npattern1 = re.compile('R(.)[ST][^P]')\nmatch1 = pattern1.search(seq)\nprint match1.group()\nprint match1.group(1)\n\npattern2 = re.compile('R(.{0,3})[ST][^P]')\nmatch2 = pattern2.search(seq)\nprint match2.group()\nprint match2.group(1)\n\n\n\n\nOutput:\n\n\nRRSL\nR\nRRRSL\nRR\n\n\n\n\nAnother example with two subgroups\n\n\nimport re\n\nseq = 'zzabcdzz'\n\npattern = re.compile('(a(b)c)d')\nmatch = pattern.search(seq)\nprint match.group(0)\nprint match.group(1)\nprint match.group(2)\nprint match.groups()\n\n\n\n\n\n\ngroups()\n; return a tuple with the substrings corresponding to all subgroups.\n\n\n\n\nOutput:\n\n\nabcd\nabc\nb\n('abc', 'b')\n\n\n\n\nAssign  names to subgroup: \n?P<w1>\n and \n?P<w2>\n\n\nimport re\n\nseq = 'zzabcdzz'\n\npattern = re.compile('(?P<w1>a(?P<w2>b)c)d')\nmatch = pattern.search(seq)\nprint match.group(0)\nprint match.group('w1')\nprint match.group('w2')\n\n\n\n\nOuput:\n\n\nabcd\nabc\nb\n\n\n\n\nMore \nre\n methods\n\n\n\n\nsplits(s)\n; split the string \ns\n at the matches of a regex.\n\n\nsub(r, s, [c])\n; return a new string \ns\n where nonoverlapping occurrences of a given pattern in the string are all replaced with the value of \nr\n. \nc\n, an optional number, stands for the maximum numbers of occurences.\n\n\nsubn(r, s, [c])\n; do what \nsub()\n does, but returns a tuple of two elements; the first element is the new string (as with \nsub(r, s, [c])\n) and the second is the number of replacements.\n\n\n\n\nSplit text and replace separators with a pattern\n\n\nimport re\n\nseparator = re.compile('\\|')\n\n# split\nannotation = 'ATOM:CA|RES:ALA|CHAIN:B|NUMRES:166'\ncolumns = separator.split(annotation)\nprint columns\n\n# replace\nnew_annotation = separator.sub('@', annotation)\nprint \"replace all |:\"\nprint new_annotation\n\nnew_annotation2 = separator.sub('@', annotation, 2)\nprint \"replace 2 |:\"\nprint new_annotation2\n\nnew_annotation3 = separator.subn('@', annotation)\nprint \"replace all |:\"\nprint new_annotation3\n\nnew_annotation4 = separator.subn('@', annotation, 2)\nprint \"replace 2 |:\"\nprint new_annotation4\n\n\n\n\nOutput:\n\n\n['ATOM:CA', 'RES:ALA', 'CHAIN:B', 'NUMRES:166']\nreplace all |:\nATOM:CA@RES:ALA@CHAIN:B@NUMRES:166\nreplace 2 |:\nATOM:CA@RES:ALA@CHAIN:B|NUMRES:166\nreplace all |:\n('ATOM:CA@RES:ALA@CHAIN:B@NUMRES:166', 3)\nreplace 2 |:\n('ATOM:CA@RES:ALA@CHAIN:B|NUMRES:166', 2)\n\n\n\n\nFind transcription factor binding sites\n\n\nimport re\n\ngenome_seq = open('genome.txt').read()\n\n# read transcription factor binding site patterns\nsites = []\nfor line in open('TFBS.txt'):\n    fields = line.split()\n    tf = fields[0]\n    site = fields[1]\n    sites.append((tf, site))\n\n# match all TF's to the genome and print matches\nfor tf, site in sites:\n    tfbs_regexp = re.compile(site)\n    all_matches = tfbs_regexp.findall(genome_seq)\n    matches = tfbs_regexp.finditer(genome_seq)\n    if all_matches:\n        print tf, ':'\n        for tfbs in matches:\n            print '\\t', tfbs.group(), tfbs.start(), tfbs.end()\n\n\n\n\nParse abstracts from PubMed HTML pages\n\n\n\n\nThe script opens the HTML webpage and parses it in order to selectively fetch some parts of it.\n\n\nExtract the title and the abstract text.\n\n\nThe title of the paper is enclosed between \n<h1>\n and \n</h1>\n.\n\n\nWhereas the text of the abstract is enclosed between \n<h3>Abstract</h3><div class = \"\"><p>\n and \n</p>\n.\n\n\nThe paper.\n\n\n\n\nimport urllib2\nimport re\n\npmid = '18235848'\nurl = 'http://www.ncbi.nlm.nih.gov/pubmed?term=%s' % pmid\nhandler = urllib2.urlopen(url)\nhtml = handler.read()\n\ntitle_regexp = re.compile('<h1>.{5,400}</h1>')\ntitle_text = title_regexp.search(html)\n\nabstract_regexp = re.compile('<AbstractText>.{20,3000}</AbstractText>')\nabstract_text = abstract_regexp.search(html)\n\nprint 'TITLE:', title_text.group() \nprint 'ABSTRACT:', abstract_text.group()\n\n\n\n\nOutput:\n\n\nTITLE: <h1>Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade.</h1>\nABSTRACT: <AbstractText>Schistosomiasis is a tropical disease associated with high morbidity and mortality, currently affecting over 200 million people worldwide. Praziquantel is the only drug used to treat the disease, and with its increased use the probability of developing drug resistance has grown significantly. The Schistosoma parasites can survive for up to decades in the human host due in part to a unique set of antioxidant enzymes that continuously degrade the reactive oxygen species produced by the host's innate immune response. Two principal components of this defense system have been recently identified in S. mansoni as thioredoxin/glutathione reductase (TGR) and peroxiredoxin (Prx) and as such these enzymes present attractive new targets for anti-schistosomiasis drug development. Inhibition of TGR/Prx activity was screened in a dual-enzyme format with reducing equivalents being transferred from NADPH to glutathione via a TGR-catalyzed reaction and then to hydrogen peroxide via a Prx-catalyzed step. A fully automated quantitative high-throughput (qHTS) experiment was performed against a collection of 71,028 compounds tested as 7- to 15-point concentration series at 5 microL reaction volume in 1536-well plate format. In order to generate a robust data set and to minimize the effect of compound autofluorescence, apparent reaction rates derived from a kinetic read were utilized instead of end-point measurements. Actives identified from the screen, along with previously untested analogues, were subjected to confirmatory experiments using the screening assay and subsequently against the individual targets in secondary assays. Several novel active series were identified which inhibited TGR at a range of potencies, with IC(50)s ranging from micromolar to the assay response limit ( approximately 25 nM). This is, to our knowledge, the first report of a large-scale HTS to identify lead compounds for a helminthic disease, and provides a paradigm that can be used to jump-start development of novel therapeutics for other neglected tropical diseases.</AbstractText>\n\n\n\n\nSearch for keywords in a series of PubMed abstracts\n\n\n\n\nThis example can be applied to perform very simple text mining and can be compared to the \u201cfind\u201d tool in Microsoft Word.\n\n\nIt might stop on the first occurence.\n\n\n\n\nimport urllib2\nimport re\n\n# word to be searched\nword_regexp = re.compile('schistosoma')\n\n# list of PMIDs where we want to search the word\npmids = ['18235848', '22607149', '22405002', '21630672']\nfor pmid in pmids:\n    url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid\n    handler = urllib2.urlopen(url)\n    html = handler.read()\n    title_regexp = re.compile('<h1>.{5,400}</h1>')\n    title = title_regexp.search(html)\n    title = title.group() \n    abstract_regexp = re.compile('<AbstractText>.{20,3000}</AbstractText>')\n    abstract = abstract_regexp.search(html)\n    abstract = abstract.group()\n    word = word_regexp.search(abstract, re.IGNORECASE)\n    if word:\n        # display title and where the keyword was found\n        print title\n        print word.group(), word.start(), word.end()\n\n\n\n\n\n\nCircumvent the problem with the \nfinditer()\n method.\n\n\n\n\nimport urllib2\nimport re\n\n# word to be searched\nword_regexp = re.compile('schistosoma')\n\n# list of PMIDs where we want to search the word\npmids = ['18235848', '22607149', '22405002', '21630672']\nfor pmid in pmids:\n    url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid\n    handler = urllib2.urlopen(url)\n    html = handler.read()\n    title_regexp = re.compile('<h1>.{5,400}</h1>')\n    title = title_regexp.search(html)\n    title = title.group() \n    abstract_regexp = re.compile('<AbstractText>.{20,3000}</AbstractText>')\n    abstract = abstract_regexp.search(html)\n    abstract = abstract.group()\n    words = word_regexp.finditer(abstract)\n    if words:\n        # display title and where the keyword was found\n        print title\n        for word in words:\n            print word.group(), word.start(), word.end()\n\n\n\n\nOutput:\n\n\n<h1>Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade.</h1>\n<h1>The redox biology of schistosome parasites and applications for drug development.</h1>\n<h1>Moonlighting by different stressors: crystal structure of the chaperone species of a 2-Cys peroxiredoxin.</h1>\n<h1>Investigations of the catalytic mechanism of thioredoxin glutathione reductase from Schistosoma mansoni.</h1>\n\n\n\n\nMore \nre\n methods\n\n\n\n\nfindall()\n; look for all (non-overlapping) occurrences of pattern in string; return a list of matches.\n\n\nfinditer()\n; same as above except returns an iterator instead of a list; for each match, the iterator returns a match object; it is adapted for loops!\n\n\n|\n;  \u2018OR\u2019.\n\n\n$\n; indicate that a match exists in the string only if the pattern is in the last position of the string.\n\n\n^\n; indicate that a match exists in the string only if the pattern is in the first position of the string.\n\n\n\n\nPython Regex, Characters and Metacharaters\n\n\n\n\nPart 3, Modular Programming\n\u00b6\n\n\nChapter 10, Divide a Program into Functions\n\u00b6\n\n\nBuilt-in functions\n\n\nlength, total, sum, range\n\n\n\n\nlen()\n.\n\n\nsum()\n.\n\n\nrange(n, m, step)\n; from n to m-1, n = 0 by default.\n\n\nxrange(n, m, step)\n; better suited for big numbers.\n\n\n\n\nDefine functions\n\n\ndocstring, docstrings\n\n\n\n\nThe documentation is retrieved with the \n__doc__\n attribute: type \naddition.__doc__\n.\n\n\n\n\ndef addition(arg1, arg2):\n    '''\n    documentation: calculates the sum of two numbers\n    '''\n    result = arg1 + arg2\n    return result\n\nprint addition(1,1)\n\n\n\n\nLambda functions\n\n\n\n\nSmall anonymous functions; they are not declared using \ndef\n.\n\n\nThey do not contain return statement.\n\n\nThey can be defined in an argument in a function (useful).\n\n\nThere are nameless.\n\n\n\n\ndef f(x):\n    return x ** 2\n\nprint f(8)\n\n\n\n\nvs\n\n\ng = lambda x: x ** 2\n\nprint g(8)\n\n\n\n\nor\n\n\n(lambda x: x ** 2)(8)\n\n\n\n\n\n\nUse a \nlambda\n function as an argument of a built-in function:\n\n\n\n\ndata = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda x: len(x))\nprint new_data\n\n\n\n\nOutput:\n\n\n['ASDF', 'SDFSD', 'GSGDGG', 'SDFSADGSAG']\n\n\n\n\nFunction Arguments\n\n\n\n\nrequired arguments.\n\n\nkeyword arguments.\n\n\ndefault arguments.\n\n\nvariable-length arguments.\n\n\n\n\n1. Required Arguments\n\n\ndef print_funct(num, seq):\n    print num, seq\n\nprint_funct(10, \"ABC\")\n\n\n\n\nOutput:\n\n\n10 ABC\n\n\n\n\n2. Keyword Arguments\n\n\ndef print_funct(num, seq):\n    print num, seq\n\nprint_funct(seq = \"ABC\", num = 10)\n\n\n\n\nOutput:\n\n\n10 ABC\n\n\n\n\n3. Default Arguments\n\n\nsequence\n\n\n\n\nThe argument is given by default; but can be overwritten!\n\n\n\n\ndef print_funct(num, seq = \"A\"):\n    print num, seq\n\nprint_funct(10, \"ABC\")\nprint_funct(10)\n\n\n\n\nOutput:\n\n\n10 ABC\n10 A\n\n\n\n\n4. Variable-Length Arguments\n\n\nargument, list, tuple, dictionary\n\n\n\n\nFlexibility of providing any tuple.\n\n\n\n\ndef print_args(*args):\n    print args\n\nprint_args(1, 2, 3, 4, 5)\nprint_args('Hi')\nprint_args(100, 200, \"ABC\")\n\n\n\n\nOutput:\n\n\n(1, 2, 3, 4, 5)\n('Hi')\n(100, 200, 'ABC')\n\n\n\n\n\n\nProvide both the keys and values for a returned dictionary.\n\n\n\n\ndef print_args2(**args):\n    print args\n\nprint_args2(num = 100, num2 = 200, seq = \"ABC\")\n\n\n\n\nOutput:\n\n\n{'num': 100, 'seq': 'ABC, 'num2': 200}\n\n\n\n\nConvert a string into a tuple or vice-versa\n\n\n\n\nstruct\n package.\n\n\nIn the format, \ns\n stands for string, \n3s\n stands for a three-character string.\n\n\n\n\nimport struct\n\n# pack() method; creates a string\nformat = '2s1s1s1s1s'\ngroup = struct.pack(format, '10', '2', '3', '4', '5')\nprint group\n\n# unpack() method; parses the string to a tuple\nformat = '1s2s1s1s'\nline = '12345'\ncol = struct.unpack(format, line)\nprint col\n\n# calcsize() returns the number of characters\n# in a given format string\nformat = '30s30s20s1s'\nprint struct.calcsize(format)\n\n\n\n\nOutput:\n\n\n102345\n('1', '23', '4', '5')\n81\n\n\n\n\n\n\nThen, convert the tuple to a list if needed.\n\n\n\n\nFunction to calculate distance between two coordinates\n\n\npower\n\n\n\n\nmath\n package.\n\n\npow(x, y)\n replaces \nx ** y\n.\n\n\n\n\n\n\ndistance\n package; geometric calculations.\n\n\ncalc-dist()\n.\n\n\n\n\n\n\n\n\nfrom math import sqrt\n\ndef calc_dist(p1, p2):\n    '''returns the pythagorian distance between two 3D points'''\n    dx = p1[0] - p2[0]\n    dy = p1[1] - p2[1]\n    dz = p1[2] - p2[2]\n    distsq = pow(dx, 2) + pow(dy, 2) + pow(dz, 2)\n    distance = sqrt(distsq)\n    return distance\n\nprint calc_dist([3.0, 3.0, 3.0], [9.0, 9.0, 9.0])\n\n\n\n\nOutput:\n\n\n10.3923048454\n\n\n\n\nChapter 11 Managing Complexity with Classes\n\u00b6\n\n\nClasses\n\n\n\n\nDefine a Class: \nclass Protein\n.\n\n\nAdd docstrings.\n\n\nThe constructor \n__init__()\n is a special function that defines what kinds of data your class should contain and enables the creation of instances. Add a docstring.\n\n\nOne class can have many instances. \nlys = Protein('lysozyme')\n is an instance of \nclass Protein\n.\n\n\nCreate a class function; a class function works like a method.\n\n\n\n\nclass Protein:\n    '''Class storing protein names'''\n\n    def __init__(self, name):\n        '''Sets the name of a protein'''\n        self.name = name\n\n    def write(self):\n        '''Writes protein name to the screen.'''\n        print 'I am ' + self.name\n\nlys = Protein('lysozyme')\nmyo = Protein('myoglobin')\n\nprint \"Docstrings:\"\nprint Protein.__doc__\nprint Protein.__init__.__doc__\nprint Protein.write.__doc__\n\nprint \"\"\n\nprint lys.name\nprint myo.name\n\nlys.write() # a class function works like a method\nmyo.write()\n\n\n\n\nOutput:\n\n\nDocstrings:\nClass storing protein names\nSets the name of a protein\nWrites protein name to the screen.\n\nlysozyme\nmyoglobin\nI am lysozyme\nI am myoglobin\n\n\n\n\nPrinting a object created from a class\n\n\n\n\nPrinting an object from a class is not very informative.\n\n\n\n\nclass Pea:\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\nclass PeaStrain:\n\n    def __init__(self, peas):\n        self.peas = peas\n\nyellow = Pea('GG')\ngreen = Pea('gg')\nstrain = PeaStrain([yellow, green])\n\nprint Pea\nprint PeaStrain\nprint Pea.__init__\nprint PeaStrain.__init__\n\nprint yellow\nprint green\nprint strain\n\n\n\n\nOutput:\n\n\n__main__.Pea\n__main__.PeaStrain\n<unbound method Pea.__init__>\n<unbound method PeaStrain.__init__>\n<__main__.Pea instance at 0x0000000001DC6748>\n<__main__.Pea instance at 0x0000000001DC6748>\n<__main__.Pea instance at 0x000000000216BE08>\n<__main__.PeaStrain instance at 0x000000000216BE48>\n\n\n\n\n\n\n__repr__\n fixes this problem. The \n__repr__\n method takes no parameters except self.\n\n\n\n\nclass Pea:\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\n    def __repr__(self):\n        return 'genotype: [%s]' % (self.genotype)\n\nclass PeaStrain:\n\n    def __init__(self, peas):\n        self.peas = peas\n\n    def __repr__(self):\n        return 'strain with %i peas' % (len(self.peas))\n\nyellow = Pea('GG')\ngreen = Pea('gg')\nstrain = PeaStrain([yellow, green])\n\nprint Pea\nprint PeaStrain\nprint Pea.__init__\nprint PeaStrain.__init__\n\nprint yellow\nprint repr(yellow)\nprint repr(green)\nprint repr(strain)\n\n\n\n\nNew output:\n\n\n__main__.Pea\n__main__.PeaStrain\n<unbound method Pea.__init__>\n<unbound method PeaStrain.__init__>\ngenotype: [GG]\ngenotype: [GG]\ngenotype: [gg]\nstrain with 2 peas\n\n\n\n\n\n\n\n\nNo difference between \nprint yellow\n and \nprint repr(yellow)\n.\n\n\n\n\n\n\nObjects\u2019 predefined class attributes:\n\n\n\n\n__doc__\n: the docstring.\n\n\n__dict__\n: a list of attributes.\n\n\n__name__\n: the name of the object.\n\n\n__bases__\n: the object inherits from what object. For example, above, the PeaStrain class inherits from the Pea class. Classes (subclasses) can inherit from other classes\n\nand extend their functionality.\n\n\n__module__\n: the name of the module in which this class was defined. \n__main__\n means the object is in the current module. \n\n\n\n\n\n\n\n\nA python script can be imported just like a package:\n\n\n\n\nimport Protein\n.\n\n\nfrom Protein import write\n.\n\n\nimport math\n.\n\n\nfrom math import sqrt\n.\n\n\n\n\n\n\nSynonyms: packages, library, module, script, etc.\n\n\n\n\nclass Pea:\n    '''docstring 1'''\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\n    def __repr__(self):\n        return 'genotype: [%s]' % (self.genotype)\n\nyellow = Pea('GG')\n\nprint yellow\nprint Pea.__doc__\nprint Pea.__dict__\nprint Pea.__name__\nprint Pea.__bases__\nprint Pea.__module__\n\nprint \"\"\n\nclass Peaclone(Pea):\n    '''docstring 2'''\n\nblue = Peaclone('AA')\n\nprint blue\nprint Peaclone.__doc__\nprint Peaclone.__dict__\nprint Peaclone.__name__\nprint Peaclone.__bases__\nprint Peaclone.__module__\n\n\n\n\nOutput:\n\n\ngenotype: [GG]\ndocstring 1\n{'__module__': '__main__', '__doc__': 'docstring 1', '__init__': <function __init__ at 0x000000000229FC18>, '__repr__': <function __repr__ at 0x000000000229FC88>}\nPea\n()\n__main__\n\ngenotype: [AA]\ndocstring 2\n{'__module__': '__main__', '__doc__': 'docstring 2'}\nPeaclone\n(<class __main__.Pea at 0x0000000001D3C828>,)\n__main__\n\n\n\n\n\n\nMore attributes:\n\n\n__del__\n.\n\n\n__getattr__\n.\n\n\n__setattr__\n.\n\n\n__delattr__\n.\n\n\n\n\n\n\n\n\nChapter 12 Debugging\n\u00b6\n\n\nbug\n\n\n\n\nKinds of errors:\n\n\nLogical errors.\n\n\nSyntax errors.\n\n\nRuntime errors.\n\n\n\n\n\n\n\n\nIDE (Eric, PyCharm, etc.) automate debugging.\n\n\n1. Logical (semantic) errors\n\n\n\n\nResults are wrong because the program does something different from what you had in mind.\n\n\n\n\n2. Syntax errors\n\n\n\n\nWrong symbol, mispelling, wrong position in the code, etc..\n\n\n\n\ndef evaluate_data(data, lower = 100, upper = 300):\n    \"\"\"Analyze a two-column table. Counts data points in three bins.\"\"\"\n\n    smaller = 0\n    between = 0\n    bigger  = 0\n\n    for length in data:\n        if length < lower:\n            smaller = smaller + 1\n        elif lower < length < upper:\n            between = between + 1\n        elif length > upper:\n            bigger = 1\n    return smaller, between, bigger\n\ndef read_data(filename):\n    \"\"\"Reads neuron lengths from a text file.\"\"\"\n\n    primary, secondry = [], []\n\n    for line in open(filename):\n        category, length = line.split(\"\\t\")\n        length = float(length)\n        if category == \"Primary\"\n            primary.append(length)\n        elif category == \"Secondary\":\n            secondary.append(length)\n    return primary, secondary\n\ndef write_output(filename, count_pri, count_sec):\n    \"\"\"Writes counted values to a file.\"\"\"\n\n    output = open(filename,\"w\")\n    output.write(\"category      <100  100-300   >300\\n\")\n    output.write(\"Primary  :  %5i   %5i   %5i\\n\" % count_pri)\n    output.write(\"Secondary:  %5i   %5i   %5i\\n\" % count_sec)\n    output.close()\n\nprimary, secondary = read_data('neuron_data.xls')\ncount_pri = evaluate_data(primary)\ncount_sec = evaluate_data(secondary)\nwrite_output_file('results.txt' , count_pri,count_sec)\n\n\n\n\nBug 1\n\n\nif category == \"Primary\"\n\n\n\n\n\n\nCause: \nSyntaxError: invalid syntax\n.\n\n\nFix:\n\n\n\n\nif category == \"Primary\":\n\n\n\n\n\n\nOther common \nSyntaxErrors\n:\n\n\nEOL\nor End Of Line; an open quote somewhere without a matching closing quote.\n\n\nTokenError\n; an open parenthesis, but not a matching closing parenthesis.\n\n\netc.\n\n\n\n\n\n\n\n\nBug 2\n\n\nwrite_output_file('results.txt' , count_pri,count_sec)\n\n\n\n\n\n\nCause: \nNameError: name 'write_output_file' is not defined\n.\n\n\nFix:\n\n\n\n\nfile = open('results.txt' , 'w')\nfile.write(str(count_pri))\nfile.write('\\n')\nfile.write(str(count_sec))\nfile.close()\n\n\n\n\n3. Runtime Error\n\n\nIOError\n\n\nprimary, secondary = read_data('neuron_data.xls')\n\n\n\n\n\n\nCause: \nIOError: [Errno21] No such file or directory: 'neuron_data.xls'\n\n\nFix: the file extention is .txt.\n\n\nOther common bugs and causes:\n\n\nMispelled files, directory name.\n\n\nWrong website URL.\n\n\nUser without the permission or access.\n\n\nThe file is already opened.\n\n\nProblem with the Internet connection.\n\n\nWhitespace, uppercase, lowercase letters.\n\n\nFile in a different directory.\n\n\nExpected date format.\n\n\netc.\n\n\n\n\n\n\n\n\nNameError\n\n\nprimary, secondry = [], []\n...\n...\nelif category == \"Secondary\":\n\n\n\n\n\n\nCause: \nNameError: 'secondary' is not defined\n. The \u2018name\u2019 was misspelled when called.\n\n\nFix: add the line \nprint dir()\n before the errors occurs. It shows the list of variables that are known. In the above case, only \nsecondry\n exits while \nsecondary\n is called. Choose one.\n\n\nOther common bugs and causes:\n\n\nUnknown object name:\n\n\na name was not imported (\nimport *\n).\n\n\na name was not initialized (as in \ncounter = 0\n for \ncounter += 1\n).\n\n\n\n\n\n\n\n\n\n\n\n\nIndexError\n\n\n\n\nCause and fix: when \nprint data[3]\n looks into \ndata = [1, 2, 3]\n, the list index is out of range.\n\n\n\n\nKeyError\n\n\nspam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'}\nprint('The name of my pet zebra is ' + spam['zebra'])\n\n\n\n\n\n\nCause and fix: the key does not exist!\n\n\n\n\nImportError\n\n\n\n\nCauses and fixes:\n\n\nThe imported module name is mispelled.\n\n\nThe imported module is located in a subdirectory without an \n__init__.py\n file.\n\n\nTry adding import sys and print sys.path; you need to add the directory to the PYTHONPATH variable or to append it to the sys.path.\n\n\nThe imported module has a duplicate name (two functions with the same name; try working with classes to avoir that).\n\n\n\n\n\n\n\n\nValueError\n\n\n\n\nCause and fix: when an object is loaded with a wrong type to perform another operation; variable \nrange_a\n should be a number for the loop \nfor a in range(range_a):\n, but a string is given instead.\n\n\nOther common bugs and causes: \nIndentationError: unexpected indent\n, \nIndentationError: unindent does not match any outer indentation level\n, and \nIndentationError: expected an indented block\n.\n\n\n\n\nTypeError\n\n\n\n\nCause and fix: an object does not support item assignment.\n\n\n\n\nspam = 'I have a pet cat.'\nspam[13] = 'r'\n\n\n\n\n\n\nCause:  cannot convert implicitly an object.\n\n\n\n\nnumEggs = 12\nprint('I have ' + numEggs + ' eggs.')\n\n\n\n\n\n\nFix:\n\n\n\n\nnumEggs = 12\nprint('I have ' + str(numEggs) + ' eggs.')\n\n\n\n\n\n\nCause:  an object is misinterpreted (for another object).\n\n\n\n\nspam = ['cat', 'dog', 'mouse']\nfor i in range(spam):\n    print(spam[i])\n\n\n\n\n\n\nFix: \nfor i in spam:\n.\n\n\n\n\nAttributeError\n\n\n\n\nCause and fix: apply the right method.\n\n\n\n\nspam = 'THIS IS IN LOWERCASE.'\nspam = spam.lowerr()\n\n\n\n\nUnboundLocalError\n\n\n\n\nCause and fix: a variable is referenced before assignment.\n\n\n\n\nCountermeasures to prevent errors\n\n\n\n\nBreak down the code in parts; print to a file using \npython code.py > output.txt\n.\n\n\nCompare the input and output (print the input data, print the output data, create control points).\n\n\nAdd lots of \nprint\n statements within the code as control points,\n\n\nUse descriptive and explicit object names (\nsequence_file\n is better than \ns_file\n).\n\n\nStart function with verbs (\nread_sequence_file\n is better than \nseq_file\n).\n\n\nAdd comments.\n\n\nAvoid \nimport *\n, but rather \nfrom math import pi\n.\n\n\nFollow PEP8 and PEP20! \npylint\n and \nflake8\n packages.\n\n\nIDE (Eric, PyCharm, Spyder, etc.) automate debugging and easily execute \npylint\n and \nflake8\n.\n\n\n\n\nA note on \nraw_input()\n and \ninput()\n\n\npython2, python3, py2, py3\n\n\n\n\nIn Python 2, \nraw_input()\n takes exactly what the user typed and passes it back as a string. \ninput()\n takes the \nraw_input()\n and performs an \neval()\n on it as well. \ninput()\n expects a syntactically correct python statement where \nraw_input()\n does not.\n\n\nThe \neval()\n function run the code within itself:\n\n\n\n\n>>> x = 1\n>>> eval('x + 1')\n2\n>>> eval('x')\n1\n\n\n\n\n\n\nIn Python 3, \nraw_input()\n is renamed to \ninput()\n and the old \ninput()\n is removed. If you want to use the old \ninput()\n, you can do \neval(input())\n.\n\n\n\n\nCountermeasures to prevent errors: the Python debugger or \npdb\n\n\n\n\npdb\n package.\n\n\n\n\n# on top of the code\nimport pdb\n\npdb.set_trace()\n\n\n\n\n\n\nThe code is executed line by line:\n\n\n\u2018n\u2019 execute the next line.\n\n\n\u2018s\u2019 execute the next line but does not descend into functions.\n\n\n\u2018l\u2019 shows where in the code the program currently is.\n\n\n\u2018c\u2019 continues execution normally.\n\n\n\n\n\n\n\n\nCountermeasurea to prevent errors: \ntry, except\n\n\ntry:\n    a = float(raw_input(\"Insert a number:\"))\n    print a\nexcept ValueError:\n    print \"You haven't inserted a number. Please retry.\"\n    raise SystemExit\n\n\n\n\n\n\nelse\n is optional and only executed if no exception was generated.\n\n\n\n\ntry:\n    filename = raw_input(\"Insert a filename:\")\n    in_file = open(filename)\nexcept IOError:\n    print \"The filename %s has not been found.\" % filename\n    raise SystemExit\nelse:\n    for line in in_file:\n        print line\n        in_file.close()\n\n\n\n\n\n\nUsually, exceptions are typos and wrong entries:\n\n\nSyntaxError\n.\n\n\nIOError\n.\n\n\nNameError\n.\n\n\nValueError\n.\n\n\n\n\n\n\nRarely will we see:\n\n\nIndexError\n.\n\n\nKeyError\n.\n\n\nImportError\n.\n\n\nTypeError\n.\n\n\nAttributeError\n.\n\n\nUnbounLocalError\n.\n\n\n\n\n\n\n\n\nChapter 13, Using External Modules, The Python Interface to R\n\u00b6\n\n\n\n\nRPy2\n package; bridge Python with R.\n\n\n\n\nThe R code:\n\n\np = pi\nx = c(1, 2, 3, 4, 5, 6)\ny = seq(1, 10)\nm = matrix(y, nrow = 5)\nn = matrix(y, ncol = 5)\nf = read.table('RandomDistribution.tsv', sep = '\\t')\nf_matrix = matrix(f, ncol = 7)\nmean_first_col = mean(f_mean[0])\n\n\n\n\nThe Python code:\n\n\nimport rpy2.reobjects as robjects\n\nr = robjects.r\n\npi = r.pi\nx = r.c(1, 2, 3, 4, 5, 6)\ny = r.seq(1, 10)\nm = r.matrix(y, nrow = 5)\nn = r.matrix(y, ncol = 5)\nf = r(\"read.table('RandomDistribution.tsv', sep = '\\t')\")\nf_matrix = r.matrix(f, ncol = 7)\nmean_first_col = r.mean(f_mean[0])\n\n\n\n\n\n\nPython is better suited to implement solutions by building GUIs or freezing the code.\n\n\nRpy2 is the best of both worlds: \n\n\nR statistical analyses and data visualization.\n\n\nPython computation power with SciPy/NumPy/Pandas.\n\n\n\n\n\n\n\n\nCalculate a mean value from a table file\n\n\nimport rpy2.robjects as robjects\n\nr = robjects.r\ntable = r(\"read.table('RandomDistribution.tsv', sep = '\\t')\")\nmatrix = r.matrix(table, ncol = 7)\nmean_first_col = r.mean(matrix[0])\nprint mean_first_col\n\n\n\n\nDraw a histogram\n\n\nimport rpy2.robjects as ro\nfrom rpy2.robjects.packages import importr\n\nr = ro.r\ntable = r(\"read.table('RandomDistribution.tsv',sep = '\\t')\")\ngrdevices = importr('grDevices')\ngrdevices.png(file = \"Plot.png\", width = 512, height = 512)\nr.plot(table[1], table[2], xlab = \"x\", ylab = \"y\")\ngrdevices.dev_off()\n\ngrdevices.png(file=\"Histogram.png\", width = 512, height = 512)\nr.hist(table[4], xlab = 'x', main = 'Distribution of values')\ngrdevices.dev_off()\n\n\n\n\nCalculate a z-score and a p-value\n\n\nimport rpy2.robjects as ro\n\nr = ro.r\ntable = r(\"read.table('RandomDistribution.tsv',sep = '\\t')\")\nm = r.mean(table[2], trim = 0, na_rm = 'FALSE')\nsdev = r.sd(table[2], na_rm = 'FALSE')\nvalue = 0.01844\nzscore = (m[0] - value) / sdev[0]\nprint zscore\n\nx = r.abs(zscore)\npvalue = r.pnorm(-x[0])\nprint pvalue[0]\n\n\n\n\nCreate an interactive plot and histogram from data in a file\n\n\nimport rpy2.robjects as robjects\n\nr = robjects.r\ntable = r(\"read.table('RandomDistribution.tsv', sep = '\\t')\")\nr.plot(table[1], table[2], xlab = \"x\", ylab = \"y\")\nr.hist(table[4], xlab = 'x', main = 'Distribution of values')\n\n\n\n\nCreate an interactive plot\n\n\nimport rpy2.robjects as ro\n\nr = ro.r\nr.plot(r.pnorm(100), xlab = \"y\", ylab = \"y\")\n\n\n\n\nConduct a chi-square test on data from a text file\n\n\nimport rpy2.robjects as ro\n\nr = ro.r\ntable = r(\"read.table('Chi-square_input.txt', header = TRUE, sep = '\\t')\")\nprint r.names(table)\n\ncont_table = r.table(table[1], table[2])\nchitest = r['chisq.test']\nprint chitest(table[1], table[2])\n\n\n\n\nChapter 14, Building Program Pipelines\n\u00b6\n\n\n\n\nos\n package.\n\n\nsys\n package.\n\n\n\n\nPrograms can work together with Python\n\n\n\n\nCreate path and file variables.\n\n\nCreate command line.\n\n\nExecute commands from the command line (as if you did it with a mouse and keyboard) with \nos.system\n.\n\n\n\n\nREF: Appendix D.\n\n\nimport os\n\noutput_dir = '/home/RNA-seq/tophat_dir/'\noutput_file = 'accepted_hits.txt'\n\ncommand_line = 'pgm -o %s%s' % (output_dir, output_file)\n\nos.system(command_line)\n\n\n\n\n\nCommand lines in Python\n\n\n\n\nUNIX to Python:\n\n\nUNIX \npwd\n; \nprint os.getcwd()\n.\n\n\nUNIX \nls\n; \nprint os.listdir('.')\n.\n\n\nUNIX \ncd\n; \nos.chdir('../data/')\n.\n\n\nUNIX \nmkdir\n; \nos.mkdir()\n.\n\n\nUNIX \nrmdir\n; \nos.rmdir()\n.\n\n\nand many more.\n\n\n\n\n\n\n\n\nPipelines\n\n\n\n\nPipeline are scripts connecting programs to each other (run two or more external programs from command lines).\n\n\nA program that runs another program is a \nwrapper\n.\n\n\nExchange filenames and data between programs.\n\n\nsys.argv\n; Python program sorted parameters.\n\n\nimport sys\n; access or print them.\n\n\n\n\nimport sys\nimport os\n\nsys.path.append('/home/RNA-seq/')\n\nfrom pathvariables import tophat_dir, index_dir\n\nif os.path.exists(tophat_dir) and os.path.exists(index_dir):\n    os.system('tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt')\nelse:\n    print \"You have to create tophat and/or index directories before running your wrapper\"\n\n\n\n\n\n\nOne problem with pipelines is lagging. \n\n\nThe system call of the second program should occur when the execution of the first program has finished, especially if the second one uses as input the output of the first one.\n\n\nUse subprocesses, such as \nos.popen()\n or \nsubprocess.call()\n, to wait for the command to complete and return a value corresponding to the program exit status (0 for success, 256 for failure)\n\n\nA more robust trick is to insert an action and verify its success after a system call and before the subsequent system call.\n\n\n\n\nimport sys\nimport os\n\nfrom pathvariables import tophat_dir, index_dir, cufflinks_dir\n\nsys.path.append('/home/RNA-seq/')\nfrom pathvariables import tophat_dir, index_dir, cufflinks_dir\n\n# the tophat program crates an output file\nos.system('tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt')\n\n# here we don't know whether the tophat output file is comleted and available\n# we open and close a dummy file, so the operating system catches up\nlag_file = open('dummy.txt, 'w')\nlag_file.write('tophat completed')\nlag_file.close()\n\n# read the output file\nif os.path.exists('/home/RNA-seq/dummy.txt'):\n    os.system('cufflinks -o ' + cufflinks_dir + ' ' + tophat_dir + '/accepted_hits.txt')\n\n\n\n\nAttributes\n\n\n\n\nprint dir()\n; Visualize attributes.\n\n\nSome attributes are module-specific, such as locatime, whereas others refer to modules in general:\n\n\n__file__\n; return the path of the module.\n\n\n__doc__\n; return the module documentation, if present.\n\n\n__name__\n; return the name of the imported file without the .py suffix if the module is imported and the string \n'__main__'\n is executed.\n\n\nExecute \n<statements>\n only if the module is run from the command line and not imported by means of an import statement:\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == '__main__':\n    <statements>\n\n\n\n\nWorking with files and directories\n\n\n\n\nos.path\n package.\n\n\nos.path.split(filename)\n; split a filename from the directory names.\n\n\nos.path.exists(filename)\n; verify if the file exists, return True or False.\n\n\n\n\nExport the path\n\n\n\n\nIn Windows, add the path to the PATH environment variables.\n\n\nIn PowerShell: \n$env:PYTHONPATH = \"$env:PYTHONPATH;.\"\n\n\n\n\n\n\nIn UNIX, enter in the bash: \nexport PYTHONPATH=.\n or \nadd PYTHONPATH=.\n.\n\n\nIn a Python code, add to the beginning of the script:\n\n\n\n\nimport sys\n\nsys.path.append('.') # '/var/www/'\n\n\n\n\n\n\nOr with \nsys.path.append('pathmodules/')\n.\n\n\n\n\nRead files from directories\n\n\nimport os\n\nfor filename is os.listdir('data/'):\n    os.system('<my_program>%s' % (filename))\n\n\n\n\n\n\n\n\nos.remove('log.txt')\n; remove files.\n\n\n\n\n\n\ntempfile\n package;  create temporary files. \n\n\n\n\n\n\nChapter 15, Writing Good Programs\n\u00b6\n\n\nPriorities\n\n\n\n\nMake it work.\n\n\nMake it nice.\n\n\nMake if fast.\n\n\n\n\nTips\n\n\n\n\nDivide a programming project into smaller tasks.\n\n\nWhat are the inputs?\n\n\nWhat are the outputs?\n\n\nWhat is between them?\n\n\nWrite smaller programs; split a program into functions and classes.\n\n\nAnalyze and run tests.\n\n\nAdopt PEP.\n\n\nScaffold before writing a functional program:\n\n\n\n\ndef read_files(directory):\n    '''\n    Reads a...\n    '''\n    pass\n\ndef filter(sequences):\n    '''\n    Removes all...\n    '''\n    pass\n\n...\n\nif __name == '__main__':\n    INPUT_DIR = 'aaa/'\n    OUTPUT_FILE = 'filtered.txt'\n    seq = read_files(INPUT_DIR)\n    filter(seq)\n    ...\n\n\n\n\nAdopt PEP\n\n\n\n\nVariables in functions in lowercase.\n\n\nConstants in modules in uppercase.\n\n\nA function name starts with a verb.\n\n\nAfter each function, two empty lines.\n\n\nAfter each logical chunks of long functions, one empty line.\n\n\nComment.\n\n\nKeep lines shorter than 80 characters long.\n\n\nEach class, function, and variable has a docstring; docstrings can be read with \nprint object.__doc__\n.\n\n\n\n\nEnforce PEP\n\n\n\n\npylint\n package.\n\n\npylint\n is a Python source code analyzer which looks for programming errors, helps enforcing a coding standard and sniffs for some code smells.\n\n\nDownload\n an install pylint.\n\n\nOr install it with \npip\n.\n\n\nDoc\n\n\nRun \npylint python_file.py\n.\n\n\n\n\n\n\nflake8\n package.\n\n\nflake8\n is a modular source code checker (a \nwrapper\n).\n\n\nIt works with \npep8\n, \npyflakes\n, \npycodestyle\n, and so on.\n\n\n\n\n\n\n\n\nVersion controls\n\n\n\n\nUse version control programs (Mercurial, git, SVN).\n\n\nUse repository (GitHub, Bitbucket) to control program versions.\n\n\nGitHub\n\n\nBitbucket\n\n\nSourceForce\n\n\nGitlab\n\n\nand others.\n\n\n\n\n\n\n\n\nBefore releasing (to a repository)\n\n\n\n\nCreate a directory with a concise name containing all the project.\n\n\nSet a version number (0.1 or 1.0).\n\n\nWrite a README.TXT file with the name of the program, the author, contacts, numbers, emails, a version number, the program purpose in 50-100 words, how to use the program, simple command-line examples, the license (\u201cAll rights reserved\u201d, MIT, etc.)\n\n\nCreate a zip file out of the directory including the README.TXT file in addition to the unzipped directory.\n\n\nRelease the project on a repository (for example, with git, push the project to the repository).\n\n\n\n\nReleasing a distribution\n\n\n\n\nRelease a distribution to a repository for others to download and install. \n\n\n\n\nFreezing a program\n\n\n\n\nNon-programmer would rather want an execuble program they can unzip and run.\n\n\nCompile the code or freeze it!\n\n\ncx_freeze\n is a set of utilities that create standalone executables from python scripts for any platform or OS.\n\n    i. There are alternatives to \u2018cx_freeze\u2019 such as \nbbfreeze\n.\n\n\npyinstaller\n is a simpler alternative (it is not as flexible as \ncx_freeze\n but it can create single files).\n\n\ndistutils\n is a Python package that provides support for building and installing additional modules (libraries or packages) into a Python installation. The new modules may be either 100%-pure Python, written in C, or coded in both Python and C. \ndistutils\n autogenerates an install script.\n\n    i. Such distribution needs a \nsetup.py\n file with the group of subdirectories and program files.\n\n    i. \npy2exe\n is an extension to the \ndistutils\n package to create executable files on Windows.\n\n    i. \npy2app\n is an extension to the \ndistutils\n packages to create executable files on OS X.\n\n\nnuitka\n is a Python compiler, compatible with CPython.\n\n    i. CPython is a source code interpreter with an interface with several languages, including C, in which one must explicitly write bindings in a language other than Python.\n\n\npypy\n is an alternative to \nnuitka\n.\n\n\nCython is a compiled language that generates CPython extension modules.\n\n\nJython does the same, but in Java.\n\n\n\n\n\n\n\n\nContinuous improvement\n\n\n\n\nA good program is never finished:\n\n\nCreate a baseline release.\n\n\nUpdate and release new versions. Tell the users what is new.\n\n\nListen to users, improve on it.\n\n\nGo on programming.\n\n\n\n\n\n\n\n\nSoftware development\n\n\n\n\nThe Agile Manifesto.\n\n\nMethodologies: Scrum, eXtreme Programming, etc.\n\n\n\n\nPart 4, Data Visualization\n\u00b6\n\n\nChapter 16, Creating Scientific Diagrams\n\u00b6\n\n\n\n\nmatplotlib\n package.\n\n\nPillow\n or \nPIL\n package.\n\n\nTip: install the entire SciPy Stack: (Python (2.x >= 2.6 or 3.x >= 3.2), NumPy (>= 1.6), SciPy library (>= 0.10), Matplotlib (>= 1.1) with dateutil and pytz, IPython (>= 0.13) with pyzmq and tornado, pandas (>= 0.8), Sympy (>= 0.7), nose (>= 1.1).\n\n\nMatplotlib\n depends on \nPillow\n for reading and saving JPEG, BMP, and TIFF image files. \nMatplotlib\n requires MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are required for the animation module. Add \nnose\n, \nmock\n, and Inkscape.\n\n\n\n\nDraw a simple line plot\n\n\n\n\nProvide \n(x, y)\n points.\n\n\nfigure()\n; main function is\n\n\nplot()\n.\n\n\nsavefig()\n; save the plot in a file.\n\n\nshow()\n; show the plot in a window.\n\n\n\n\nfrom pylab import figure, plot, savefig\n\nxdata = [1, 2, 3, 4]\nydata = [1.25, 2.5, 5.0, 10.0]\n\nfigure()\nplot(xdata, ydata)\n\nsavefig('figure1.png')\n\n\n\n\nResult:\n\n\n\n\nPlot a sine function\n\n\n\n\nGenerate \n(x, y)\n points; first the \nx\n; then generate the \ny\n with the \nx\n.\n\n\nplot()\n with a line type \n'kd'\n and \nlinewidth = 1\n.\n\n\n\n\nfrom pylab import figure, plot, text, axis, savefig\nimport math\n\nfigure()\n\nxdata = [0.1 * i for i in range(100)]\nydata = [math.sin(j) for j in xdata]\n\nplot(xdata, ydata, 'kd', linewidth = 1)\ntext(4.8, 0, \"$y = sin(x)$\", horizontalalignment = 'center', fontsize = 20)\naxis([0, 3 * math.pi, -1.2, 1.2])\n\nsavefig('sinfunc.png')\n\n\n\n\nResult:\n\n\n\n\nDraw a histogram\n\n\n\n\nProvide the \n(x, y)\n points in lists, and the number of bins.\n\n\nhist()\n needs \ndata\n points and \nn_bins\n.\n\n\nalpha\n stands for the graph color transparency.\n\n\nAdd a title, labels, axes, and gridlines.\n\n\n\n\nfrom pylab import figure, title, xlabel, ylabel, hist, axis, grid, savefig\n\ndata = [1, 1, 9, 1, 3, 5, 8, 2, 1, 5, 11, 8, 3, 4, 2, 5]\nn_bins = 5\n\nfigure()\nnum, bins, patches = hist(data, n_bins, normed = 1.0, histtype = 'bar', facecolor = 'green', alpha = 0.75)\n\ntitle('Histogram')\nxlabel('value')\nylabel('frequency')\naxis()\ngrid(True)\n\nsavefig('histogram.png')\n\n\n\n\nResult:\n\n\n\n\nDraw a bar plot\n\n\n\n\ncount\n: two series, \nx1\n and \nx2\n with each four categories, \nnucleotides\n. \n\n\nAdd a title, labels, axes and ticks to the axes, and a legend.\n\n\nxticks(x1, nucleotides)\n,  where the first element is the list of \nx\n points and the second element is the label variable.\n\n\nlegend()\n takes the labels of all data sets that are plotted.\n\n\naxis()\n is set with a list [from left to right, bottom,  and top].\n\n\n\n\nfrom pylab import figure, title, xlabel, ylabel, xticks, bar, legend, axis, savefig\n\nnucleotides = [\"A\", \"G\", \"C\", \"U\"]\n\ncounts = [\n    [606, 1024, 759, 398],\n    [762, 912, 639, 591],\n    ]\n\nfigure()\ntitle('RNA nucleotides in the ribosome')\nxlabel('RNA')\nylabel('base count')\n\nx1 = [2.0, 4.0, 6.0, 8.0]\nx2 = [x - 0.5 for x in x1]\n\nxticks(x1, nucleotides)\n\nbar(x1, counts[1], width = 0.5, color = \"#cccccc\", label = \"E.coli 23S\")\nbar(x2, counts[0], width = 0.5, color = \"#808080\", label = \"T.thermophilus 23S\")\n\nlegend()\naxis([1.0, 9.0, 0, 1200])\n\nsavefig('barplot.png')\n\n\n\n\nResult:\n\n\n\n\nAdd error bars to a scatterplot or a bar chart\n\n\n\n\nerrorbar()\n.\n\n\nbar()\n.\n\n\n\n\nfrom pylab import figure, errorbar, bar, savefig\n\nfigure()\n\n# scatterplot with error bars\nx1 = [0.1, 0.3, 0.5, 0.6, 0.7]\ny1 = [1, 5, 5, 10, 20]\nerr1 = [3, 3, 3, 10, 12]\nerrorbar(x1, y1, err1 , fmt = 'ro')\n\n# barplot with error bars\nx2 = [1.1, 1.2, 1.3, 1.4, 1.5]\ny2 = [10, 15, 10, 15, 17]\nerr2 = (2, 3, 4, 1, 2)\nwidth = 0.05\nbar(x2, y2, width, color = 'r', yerr = err2, ecolor = \"black\")\n\nsavefig('errorbars.png')\n\n\n\n\nResult:\n\n\n\n\nDraw a pie chart with protruding slices\n\n\nfrom pylab import figure, title, pie, savefig\n\nnucleotides = 'G', 'C', 'A', 'U'\ncount = [1024, 759, 606, 398]\nexplode = [0.0, 0.0, 0.05, 0.05]\n\ncolors = [\"#f0f0f0\", \"#dddddd\", \"#bbbbbb\", \"#999999\"]\n\ndef get_percent(value):\n    '''Formats float values in pie slices to percent.'''\n    return \"%4.1f%%\" % (value)\n\nfigure(1)\ntitle('nucleotides in 23S RNA from T.thermophilus')\n\npie(count, explode = explode, labels = nucleotides, shadow = True,\n    colors = colors, autopct = get_percent)\n\nsavefig('piechart.png', dpi = 150)\n\n\n\n\nResult:\n\n\n\n\n\n\nIt is possible to use math symbols, subscripts, and superscripts in the strings:\n\n\nxlabel('protein concentration [mM]')\n.\n\n\nxlabel('protein concentration [$\\muM$]')\n.\n\n\n\n\n\n\nIt is possible to use placeholder for variables such as:\n\n\n\"4.1f%%\" % (variable)\n.\n\n\n\"2i%\" % (variable)\n.\n\n\netc. \n\n\nThe \n%%\n stands for percentage.\n\n\n\n\n\n\nChange the image file resolution (dpi = 100 or 150 or 300 or 600) as in \nsavefig('chart.png', dpi=150)\n.\n\n\nColors are based on the PIL library.\n\n\nPIL has 140 colors (X11 color names) such as:\n\n\n'red'\n, \n'lightred'\n, \n'magenta'\n, etc.\n\n\nin RGB, red is \n(255, 0, 0)\n.\n\n\nwhite is \n(255, 255, 255)\n or \n'#ffffff'\n.\n\n\n\u2018black\u2019 is \n(0, 0, 0)\n or \n'#000000'\n.\n\n\netc.\n\n\n\n\n\n\nThe \nX11 color names\n.\n\n\n\n\nChapter 18, Manipulating Images\n\u00b6\n\n\n\n\nPillow\n or \nPIL\n package.\n\n\n\n\nPaste a small image into a big one\n\n\nfrom PIL import Image\n\nimage = Image.open('color.png', 'r')\nlabel = Image.open('label.png', 'r') # small legend\nimage.paste(label, (40, 460))\n\nimage.save('combined.png')\n\n\n\n\nResult:\n\n\n\n\nResizes a big image to a small one\n\n\nfrom PIL import Image\n\nimage = Image.open('big.png')\nsmall = image.resize((100, 100))\n\nsmall.save('small.png')\n\n\n\n\nResult:\n\n\n\n\nConverts a color to a black/white image\n\n\nfrom PIL import Image\n\nimage = Image.open('color.png', 'r')\nbw_image = Image.new('LA', image.size, (255, 255))\nbw_image.paste(image, (0, 0))\n\nbw_image.save('black_white.png')\n\n\n\n\nResult:\n\n\n\n\nDiminishes the size of all .png files by half\n\n\nfrom PIL import Image\nimport os\n\nfor filename in os.listdir('.'):\n    if filename.endswith('.png'):\n        im = Image.open(filename)\n        x = im.size[0] / 2\n        y = im.size[1] / 2\n        small = im.resize((x, y))\n        small.save('small_'+filename)\n\n\n\n\nFor \nos.listdir('.')\n, consult \nChapter 14, Building Program Pipelines, Command lines in Python\n.\n\n\nDraw an image of a plasmid\n\n\n\n\nUse constant variable: \nPLASMID_LENGTH = 4361\n is the total number of base pairs in the entire plastmid, \nSIZE = (500, 500)\n is the size of the entire image, \nCENTER = (250, 250)\n is the center point of the plasmid circle, the center of the image.\n\n\nCreate an image: \npBR322 = Image.new('RGB', SIZE, 'white')\n. \n'RGB'\n color scheme, \nSIZE = (x, y)\n size in pixels, \n'white'\n set the background color.\n\n\nDraw object \npBR322\n: \nDRAW = ImageDraw.Draw(pBR322)\n.\n\n\nThe image object is now in object \nDRAW\n.\n\n\nFinally, save the object: \npBR322.save('plasmid_pBR322.png')\n.\n\n\n\n\nfrom PIL import Image, ImageDraw\nimport math\n\nPLASMID_LENGTH = 4361\nSIZE = (500, 500)\nCENTER = (250, 250)\n\npBR322 = Image.new('RGB', SIZE, 'white')\nDRAW = ImageDraw.Draw(pBR322)\n\ndef get_angle(bp, length=PLASMID_LENGTH):\n    \"\"\"Converts base position into an angle.\"\"\"\n    return bp * 360 / length\n\ndef coord(angle, center, radius):\n    \"\"\"Return (x, y) coordinates of a point in a circle.\"\"\"\n    rad = math.radians(90 - angle)\n    x = int(center[0] + math.sin(rad) * radius)\n    y = int(center[1] + math.cos(rad) * radius)\n    return x, y\n\ndef draw_arrow_tip(start, direction, color):\n    \"\"\"Draws a triangle at the given start angle.\"\"\"\n    p1 = coord(start + direction, CENTER, 185)\n    p2 = coord(start, CENTER, 160)\n    p3 = coord(start, CENTER, 210)\n    DRAW.polygon((p1, p2, p3), fill = color)\n\n\nTET_START, TET_END = get_angle(88), get_angle(1276)\nAMP_START, AMP_END = get_angle(3293), get_angle(4153)\nORI_START, ORI_END = get_angle(2519), get_angle(3133)\n\n# drawing the plasmid\nBOX = (50, 50, 450, 450)\nDRAW.pieslice(BOX, 0, 360, fill = 'gray')\nDRAW.pieslice(BOX, TET_START, TET_END, fill = 'blue')\nDRAW.pieslice(BOX, AMP_START, AMP_END, fill = 'orange')\nDRAW.pieslice(BOX, ORI_START, ORI_END, fill = 'darkmagenta')\nDRAW.pieslice((80, 80, 420, 420), 0, 360, fill = 'white')\n\ndraw_arrow_tip(TET_END, 10, 'blue')\ndraw_arrow_tip(AMP_START, -10, 'orange')\ndraw_arrow_tip(ORI_START, -10, 'darkmagenta')\n\npBR322.save('plasmid_pBR322.png')\n\n\n\n\nResult:\n\n\n\n\nDrawings\n\n\n\n\nImage extensions:\n\n\nBMP; simple table of pixels.\n\n\nPNG; preserves the color of every single pixel; can be partially transparent.\n\n\nGIF; can be animated; similar to PNG.\n\n\nJPG; compressed format, blurred.\n\n\nTIF; bigger and more precise than PNG.\n\n\n\n\n\n\nimage = Image.open('color.png', 'r')\n; read the object.\n\n\nWrite points:\n\n\npoint = (100, 100)\n; with tuples (x, y); x pixels from the left border, y pixels from the top of the image.\n\n\n\n\n\n\nWrite rectangles\n\n\nBOX = (100, 100, 150, 150)\n; with tuple (x, y, x\u2019, y\u2019); \nBOX\n becomes a constant.\n\n\nDRAW.rectangle(BOX, fill = 'lightblue', outline = 'black')\n\n\n\n\n\n\nDraw circles inside \u2018guidelines\u2019 or a rectangle:\n\n\nDRAW.pieslice((50, 50, 450, 450), 0, 360, fill = 'grey')\n.\n\n\nDRAW.pieslice((50, 50, 450, 450), 0, 360, fill = (0, 0, 0))\n.\n\n\nDRAW.pieslice((50, 50, 450, 450), 0, 360, fill = '#ffffff')\n.\n\n\nBOX = (50, 50, 450, 450)\n\n\nDRAW.pieslice(BOX, 0, 360, fill = 'grey', outline = 'black')\n\n\nDRAW.pieslice(BOX, 7, 106, fill = 'blue')\n\n\n\n\n\n\n\n\n\n\nDraw an arc:\n\n\nDRAW.arc(BOX, 0, 360, fill = 'black')\n\n\n\n\n\n\nDraw a polygon:\n\n\nDRAW.polygon((point1, point2, point3) fill = 'lightblue', outline = 'blue')\n\n\n\n\n\n\nDraw a line:\n\n\nECOR1 = angle(4359)\n\n\np1 = coord(ECOR1, CENTER, 160)\n\n\np1 = coord(ECOR1, CENTER, 210)\n\n\nDRAW.line((p1, p2), fill = 'black', width = 3)\n\n\n\n\n\n\nRotate the image:\n\n\npBR322 = pBR322.rotate(45)\n\n\n\n\n\n\nAdd text:\n\n\nDRAW.text((370, 240), \"EcoR1\", fill = \"black\")\n\n\n\n\n\n\n\n\nDraw an image of a plasmid and label it\n\n\nfrom PIL import Image, ImageDraw\nimport math\n\nPLASMID_LENGTH = 4361\nSIZE = (500, 500)\nCENTER = (250, 250)\n\npBR322 = Image.new('RGB', SIZE, 'white')\nDRAW = ImageDraw.Draw(pBR322)\n\ndef get_angle(bp, length=PLASMID_LENGTH):\n    \"\"\"Converts base position into an angle.\"\"\"\n    return bp * 360 / length\n\ndef coord(angle, center, radius):\n    \"\"\"Return (x, y) coordinates of a point in a circle.\"\"\"\n    rad = math.radians(90 - angle)\n    x = int(center[0] + math.sin(rad) * radius)\n    y = int(center[1] + math.cos(rad) * radius)\n    return x, y\n\ndef draw_arrow_tip(start, direction, color):\n    \"\"\"Draws a triangle at the given start angle.\"\"\"\n    p1 = coord(start + direction, CENTER, 185)\n    p2 = coord(start, CENTER, 160)\n    p3 = coord(start, CENTER, 210)\n    DRAW.polygon((p1, p2, p3), fill = color)\n\n\nTET_START, TET_END = get_angle(88), get_angle(1276)\nAMP_START, AMP_END = get_angle(3293), get_angle(4153)\nORI_START, ORI_END = get_angle(2519), get_angle(3133)\n\n# drawing the plasmid\nBOX = (50, 50, 450, 450)\nDRAW.pieslice(BOX, 0, 360, fill = 'gray')\nDRAW.pieslice(BOX, TET_START, TET_END, fill = 'blue')\nDRAW.pieslice(BOX, AMP_START, AMP_END, fill = 'orange')\nDRAW.pieslice(BOX, ORI_START, ORI_END, fill = 'darkmagenta')\nDRAW.pieslice((80, 80, 420, 420), 0, 360, fill = 'white')\n\ndraw_arrow_tip(TET_END, 10, 'blue')\ndraw_arrow_tip(AMP_START, -10, 'orange')\ndraw_arrow_tip(ORI_START, -10, 'darkmagenta')\n\nDRAW.text((150, 130), \"ori\", fill = (0, 0, 0))\nDRAW.text((340, 130), \"amp\", fill =(0, 0, 0))\nDRAW.text((300, 380), \"tet\", fill = (0, 0, 0))\n\npBR322.save('plasmid_pBR322.png')\n\n\n\n\nResult:\n\n\n\n\nPart 6, Cookbook\n\u00b6\n\n\nRecipe 2, Reversing and Randomizing a Sequence\n\u00b6\n\n\nsort, reverse, random, probability, list, loop\n\n\nseq = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nprint(seq)\n\nseq_list = list(seq)\nseq_list.reverse()\nrev_seq = ''.join(seq_list)\nprint(rev_seq)\n\nprint(\"=\" * 25)\n\n# reverse a sequence, using a loop\n# rev_seq = ''\nrev_seq = ''\nfor s in reversed(seq):\n    rev_seq = rev_seq + s\nprint(rev_seq)\n\nprint(\"=\" * 25)\n\n# reverse a sequence, using seq[start:end:step]\nrev_seq = seq[:-1]\nprint(rev_seq)\n\nprint(\"=\" * 25)\n\n# mixing a sequence\nimport random\n\nran_seq = random.sample(seq, len(seq))\nprint(ran_seq)\nran_seq = ''.join(random.sample(seq, len(seq)))\nprint(ran_seq)\nran_seq = ''.join(random.sample(seq, len(seq)-10))\nprint(ran_seq)\n\nprint(\"=\" * 25)\n\n# mixing a sequence (using random again)\nran_seq = ''.join([random.choice(seq) \\\n for x in range(len(seq))])\nprint(ran_seq)\n\nprint(\"=\" * 25)\n\n# shuffle a sequence (using random again)\ndata = list(seq)\nrandom.shuffle(data)\nshuffled_seq = data\nprint(shuffled_seq)\n\nshuffled_seq = ''.join(data)\nprint(shuffled_seq)\n\n\n\n\nOuput:\n\n\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nABCDEFGHIJKLMNOPQRSTUVWXY\n=========================\n['F', 'J', 'I', 'L', 'O', 'R', 'U', 'C', 'A', 'V', 'Q', 'M', 'T', 'N', 'B', 'G', 'W', 'P', 'Y', 'H', 'D', 'S', 'Z', 'E', 'X', 'K']\nLKAZHTVFGQROUXIMYWESDPCBJN\nLXRDUVFHKGJZMIAB\n=========================\nRYYEYKWUGMYFYMUWWBOSZWSRMJ\n=========================\n['R', 'N', 'S', 'E', 'M', 'H', 'A', 'P', 'X', 'F', 'W', 'K', 'J', 'I', 'Y', 'T', 'Z', 'G', 'V', 'O', 'C', 'B', 'Q', 'D', 'L', 'U']\nRNSEMHAPXFWKJIYTZGVOCBQDLU\n\n\n\n\nRecipe 3, Creating a Random Sequence with Probabilities\n\u00b6\n\n\nrandom, list, generate, probability\n\n\nimport random\n\nnucleotides = list('ACGT')\ndna = ''\nwhile len(dna) < 100:\n    dna += random.choice(nucleotides) # choose amoung the list, fetch 1 item\nprint(dna)\n\nprint(\"=\" * 25)\n\nnucleotides = list('ACGT')\nprobs = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3} # sum of 1.0\nassert sum(probs.values()) == 1.0\n# or\n# if sum(probs.values()) != 1.0:\n#   raise Exception('Sum of probabilites is not 1.0!')\n\ndna = ''\nwhile len(dna) < 100:\n    nuc = random.choi",
            "title": "Managing Your Biological Data with Python"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-1-the-python-shell-and-basics",
            "text": "Data structure   Booleans:  True  or  False .  Dictionaries: unordered collections of key-value pairs; both can be numbers or strings; indicated with  {key1: value1, 'key2': 'value2'} .  Floats: numbers with digits after the dicemal point,  Integers: numbers without digits after the decimal point.  Lists: mutable ordered collections of objects; indicated with  [a, b, c] .  Sets: immutable unordered collections of unique elements; indicated by  ([a, b, c]) .  Strings: immutable ordered collections of characters; indicated with  'single'  or  \"double\"  quotation marks.  Tuples: immutable ordered collections of objects; indicated with  (a, b, c) .   Conversions  Convert or coerce data: \n-  float(value) ; into a float. \n-  int(value) ; into an integer. \n-  str(value) ; into a string.  Strings  'Single'  and  \"double\"  quotes are for short strings.  \u2019\u2018\u2019Triple single and double quotes \nare rather multilines.\u2019\u2018\u2019  Access character and substrings   print s[-1] ; print the last character of a string.  print s[-5:] ; print from the 5th position from the end to the end.   String functions   len(s) ; length of the string,  s.upper() ; convert to uppercase.  s.lower() ; convert to lowercase.  s.strip() ; remove white spaces and tabs from both ends.  s.strio('m') ; remove  'm'  from both ends.  s.rstrip() ; remove on the right only.  s.lstrip('m') ; remove on the left only.  s.split(' ') ; cut into words where there is space.  s.find('m') ; search for the  'm'  substring and return the starting position.  s.replace('m', 'n') ; replace  'm'  with  'n' .  s.startwith('m') ; check beginning and return  True  or  False .  s.endwith('m') ; check end and return  True  or  False .   Create lists   data = [1, 2, 3, 4, 5] .  data[1:3] ;  [2, 3] .  data[0:2] ;  [1, 2] .  data[:3] ;  [1, 2, 3] .  data[-2:] ;  [4, 5] .  data2 = data[:] ; create a copy.   Modify lists   l[i] = x ; replace the i th  element with  x .  l[i;j] = t ; replace elements from  i  to  j  by  t  (iterable).  del l[i;j] ; delete the elements of the list from  i  to  j .  del s[i;k;k] ; delete the elements of the list from  i  to  j  with stop  k .  l.append(x) ; add element  x  to the list.  l.extend(x) ; add several element  x  to the list (iterable).  l.count(x) ; return the number of elements  x  in the list.  l.index(x[. i[. j]]) ; return the smaller  k  such that  l[k] = x  and  i <= k <= j .  l.insert(i.x) ; insert(wedge in)  x .  l.pop(i) ; cancel the ith element and return its value;  l.pop()  does it for the last element.  l.remove(x) ; delete a choosen  x  element.  l.reverse() ; reverse the list order.  l.sort() ; sort the list.  l.sort([cmp[. key[. reverse]]]) ; sort the list;  cmp  is a customized function for the comparison of element pairs that must return a negative value, zero, or a positive value depending on if the first element of the pair is lower than. equal to. or greater than the second element.  sorted(l) ; create a new list made of a simple ascending sort of the list without modifying the list.   Functions working of lists   len(data) ; length of the list.  min(data) ; smallest.  max(data) ; largest.  sum(data) ; sum.  range(4) ; create a list of number from 0 to 3.  range(1.5) ; create a list of number from 1 to 4.  range(2.9.2) ; create  [2, 4, 6, 8] .  range(5, 0, -1) ; create  [5, 4, 3, 2, 1]   Tuples   t = 1, 2, 3  or  t = (1, 2, 3)  t = 1  or  tuple = (1,)   Accessing data in dictionaries   prices['banana'] ; return the value of the key.  prices.get('banaba') ; do the same thing, but if the key does not exit, it returns  None .  prices.has_key('apple') ; check whether the key(s) is(are) defined.  prices.keys() ; return a list of all keys.  prices.values() ; return a list of all values.  prices.items() ; return all keys and values as a list of tuples.   Modifying dictionaries   prices['kiwi'] = 0.6 ; set the value of the key.  prices.setdefault('egg', 0.9) ; set the value of the key if it is not yet defined.   None  None indicate the object or part of it is empty. For example: \n-  a = None . \n-  b = [None, None, 'green'] .",
            "title": "Chapter 1, The Python Shell and Basics"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-2-your-first-python-program",
            "text": "Difference between functions and methods  Functions are generic; use them anywhere without constraints. For example,  len()  works on all data.  >>> len('protein')\n7\n>>> len('111')\n3  Other funtions, called methods, are specific; use them on a certain type of data. For example,  count()  works only for strings or a \u2018string\u2019 variable (below,  protein  is a string).  >>> 'protein'.count('r')\n1\n>>> 'occurence'.count('c')\n3  Count the occurrence of each amino acid in a protein sequence  count, element, in, string  insulin = \"GIVEQCCTSICSLYQLENYCNFVNQHLCGSHLVEALYLVCGERGFFYTPKT\"\n\nfor amino_acid in \"ACDEFGHIKLMNPQRSTVWY\":\n    number = insulin.count(amino_acid)\n    print amino_acid, number  Create a random DNA sequence of length 10  import random\n\nalphabet = \"AGCT\"\nsequence = \"\"\nfor i in range(10):\n    index = random.randint(0, 3)\n    sequence = sequence + alphabet[index]\n\nprint sequence",
            "title": "Chapter 2, Your First Python Program"
        },
        {
            "location": "/Managing Your Biological Data with Python/#part-2-data-management",
            "text": "",
            "title": "Part 2, Data management"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-3-analyzing-a-data-column",
            "text": "Read from a text file   readlines() .   text_file = open('neuron_data.txt', 'r')\n# 'r' is facultative\n\nlines = text_file.readlines()\n\ntext_file.close()\n\nprint lines   read() .    text_file = open('neuron_data.txt')\n# 'r' is facultative\n\nprint text_file.read()\n\ntext_file.close()  Difference between  read()  and  readlines()   read(x) ; read up to x bytes in a file. If you don\u2019t supply the size, it reads the entire file. The output is displayed as strings only once.  One character = 1 byte.  Close and reopen the file to read it again.  readlines(x) ; read up to x bytes. If you don\u2019t supply a size, it reads all the data until it reaches a newline ( \\n ) or the end of a paragraph.  Close and reopen the file to read it again.   Write a text file  output_file = open('counts.txt', 'w')\n# 'w' is mandatory\n\noutput_file.write('number of neuron lengths: 7\\n')\n\noutput_file.close()  Clean a text file  strip   strip() ; removes blanks spaces.  rstrip() ; right only.  lstrip() ; left only.   output_file = open('counts.txt')\noutput_file.read()\noutput_file.close()\n\n# vs\n\noutput_file = open('counts.txt')\noutput_file.read().strip()\noutput_file.close()  Write and then read the same file   'r' ; cannot write with, only reads.  'w' ; cannot read with, only writes (an existing file with the same name will be erased).  'a'  append; data added to the end.   'r+' ; both read and write (by replacing the existing string at the beginning by the new string).   file1 = open('count.txt','w')\nfile1.write('this is just a dummy test\\n')\nfile1.close()\n\nfile2 = open('count.txt', 'r')\nprint file2.read()\nfile2.close()\n\nfile3 = open('count.txt','a')\nfile3.write('this is another test\\n')\nfile3.close()\n\nfile4 = open('count.txt', 'r')\nprint file4.read()\nfile4.close()\n\nfile5 = open('count.txt', 'w')\nfile5.write('this is a final test\\n')\nfile5.close()\n\nfile6 = open('count.txt', 'r')\nprint file6.read()\nfile6.close()  Read a series of numbers from a text file and print a summary of the data  strip, append, length, minimum, maximum, sort, format, integer, float   strip() ; remove blank spaces.  A text is string by default even thought the file contains numbers; transform the text into float.  append() ; each line to a list.  len(data) .  sum(data) .  min(data) .  max(data) .  sort() .  %4i  is an integer with 4 digits.  %6.1f  is a float with 6 digits and 2 decimals.   data = []\n\nfor line in open('neuron_data.txt'):\n    length = float(line.strip())\n    data.append(length)\n\nn_items = len(data)\ntotal = sum(data)\nshortest = min(data)\nlongest = max(data)\n\ndata.sort()\n\n\noutput = open(\"results.txt\",\"w\")\n\noutput.write(\"number of dendritic lengths : %4i \\n\"%(n_items))\noutput.write(\"total dendritic length      : %6.1f \\n\"%(total))\noutput.write(\"shortest dendritic length   : %7.2f \\n\"%(shortest))\noutput.write(\"longest dendritic length    : %7.2f \\n\"%(longest))\noutput.write(\"%37.2f\\n%37.2f\"%(data[-2], data[-3]))\n\noutput.close()  Format the data  formatting, variable   %s ; a string.  %d ; a digit.  %r ; raw data.  %10s ; left-justify by 10 bytes.  %-10s ; right-justify. by bytes  %i ; an integer.  %f ; a float.  %2f ; a float with 2 digits.  %2.2f ; has 2 digits and 2 decimals.  %2i ; has 2 digits.  And so on.  str() ; turn a variable into a string (digit  3  to string  '3'  for example).  int() ; turn a variable into an integer (string  '3'  to digit  3  for example).  float() ; turn a variable into a float (digit  3  to  3.0  for example).   file1 = open('count.txt','w')\nfile1.write('this is just a dummy test')\nfile1.close()\n\nfile2 = open('count.txt', 'r')\nvariable = file2.read()\n\nprint \"Test1: %r\" % (variable)\nprint \"Test2: %s\" % (variable)\nprint \"Test3: %30s\" % (variable)\nprint \"Test4: %-30s\" % (variable)\nprint \"Test5: %30r\" % (variable)\nprint \"Test6: %-30r\" % (variable)\nprint \"Test7: %d, %d, %d\" % (1, 2, 3)\nprint \"Test8: %2d, %3d, %10d\" % (1, 2, 3)\nprint \"Test9: %d, %i, %f\" % (1, 2, 3)\nprint \"Test10: %i, %i, %i\" % (1, 2.8, 3.1416)\nprint \"Test11: %2i, %5i, %10i\" % (1, 2.8, 3.1416)\nprint \"Test12: %f, %f, %f\" % (1, 2.8, 3.1416)\nprint \"Test13: %2f, %2.2f, %10.3f\" % (1, 2.8, 3.1416)\nprint \"Test14: %2f, %2f, %2f\" % (0.11, 10.111, 1000.1111)\nprint \"Test15: %2.1f, %2.1f, %2.10f\" % (0.11, 10.111, 1000.1111)\n\nfile2.close()  Output:  Test1: 'this is just a dummy test'\nTest2: this is just a dummy test\nTest3:      this is just a dummy test\nTest4: this is just a dummy test     \nTest5:    'this is just a dummy test'\nTest6: 'this is just a dummy test'   \nTest7: 1, 2, 3\nTest8:  1,   2,          3\nTest9: 1, 2, 3.000000\nTest10: 1, 2, 3\nTest11:  1,     2,          3\nTest12: 1.000000, 2.800000, 3.141600\nTest13: 1.000000, 2.80,      3.142\nTest14: 0.110000, 10.111000, 1000.111100\nTest15: 0.1, 10.1, 1000.1111000000  Write a list of numbers to a text file  data = [16.38, 139.90, 441.46, 29.03, 40.93, 202.07, 142.30, 346.00, 300.00]\n\nout = []\n\nfor value in data:\n    out.append(str(value) + '\\n')\nopen('results.txt', 'w').writelines(out)  Ouput:  16.38\n139.9\n441.46\n29.03\n40.93\n202.07\n142.3\n346.0\n300.0  Calculate the average from a list of numbers  # calculate average from float numbers\ndata = [3.53, 3.47, 3.51, 3.72, 3.43]\naverage = sum(data) / len(data)\nprint average\n\n# calculate average from integer numbers\ndata = [1, 2, 3, 4]\naverage = float(sum(data)) / len(data)\nprint average  Calculate the median from a list of numbers  data = [3.53, 3.47, 3.51, 3.72, 3.43]\n\ndata.sort()\n\nmid = len(data) / 2 \nif len(data) % 2 == 0:\n    median = (data[mid - 1] + data[mid]) / 2.0\nelse:\n    median = data[mid]\n\nprint median  Join or concatenate a list  >>> L = ['1', '2', '3']\n>>> '+'.join(L)\n'1+2+3'\n\n>>> L = ['a', 'b', 'c']\n>>> ''.join(L)\n'abc'\n\n>>> L = ['1', '2', '3']\n>>> int(''.join(L))\n123  Calculate (a variance and )a standard deviation from a list of numbers  import math\n\ndata = [3.53, 3.47, 3.51, 3.72, 3.43]\naverage = sum(data) / len(data)\n\ntotal = 0.0\n\nfor value in data:\n    total += (value - average) ** 2\n\nvariance = total / len(data) # population variance\nstddev = math.sqrt(variance) # population stddev\n\nprint variance\nprint stddev",
            "title": "Chapter 3, Analyzing a Data Column"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-4-parsing-data-records",
            "text": "Find items common to two lists  # proteins participating in cell cycle\n\nlist_a = []\n\nfor line in open(\"cell_cycle_proteins.txt\"):\n    list_a.append(line.strip())\n\nprint list_a\n\n# proteins expressed in a given cancer cell\n\nlist_b = []\n\nfor line in open(\"cancer_cell_proteins.txt\"):\n    list_b.append(line.strip()) \n\nprint list_b\n\nfor protein in list_a:\n    if protein in list_b:\n        print protein, 'detected in the cancer cell'\n    else:\n        print protein, 'not observed'  Output:  ['P62258', 'P61981', 'P62191', 'P17980', 'P43686', 'P35998', 'P62333', 'Q99460', 'O75832']\n['P43686', 'P62333']\n\nP62258 not observed\nP61981 not observed\nP62191 not observed\nP17980 not observed\nP43686 detected in the cancer cell\nP35998 not observed\nP62333 detected in the cancer cell\nQ99460 not observed\nO75832 not observed  **Find if two or more conditions are met  boolean, operators, and, or, not  seq = \"MGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQTPSKPASADGHRGPSAAFAPAAAE\"\n\nif 'GGG' in seq and 'RRR'in seq:\n    print 'GGG is at position: ', seq.find('GGG')\n    print 'RRR is at position: ', seq.find('RRR')\n\nif 'WWW' in seq or 'AAA' in seq:\n    print 'Either WWW or AAA occur in the sequence'\n\nif 'AAA' in seq and not 'PPP' in seq:\n    print 'AAA occurs in the sequence but not PPP'  Boolean Operators     Condition  Meaning      A < B  A lower than B    A <= B  A lower than or equal to B    A > B  A greater than B    A >= B  A greater than or equal to B    A == B  A equal to B    A != B  A different from B    A<> B  idem    A is B  A is the same thing as B \u2018thing\u2019 being an object    A is not B  A is not the same thing as B    A in B  A is present in the sequence B    A not in B  A is not present in the sequence B     Find all prime numbers under 30  for i in range(30):\n    if i < 4:\n        print \"prime number:\", i\n    elif i % 2 == 0:\n        print \"multiple of two:\", i\n    elif i % 3 == 0:\n        print \"multiple of three:\", i\n    elif i % 5 == 0:\n        print \"multiple of five:\", i\n    else:\n        print \"prime number:\", i  List vs Tuple vs Set   mutable: change, replace, reorder, add elements.  List = [1, 2, 3] ; mutable sequences of objects.   Tuple = (1, 2, 3) ; immutable ordered sequences of objects;.  Set = set([1, 2, 3]) ; immutable unordered  collections of unique elements.  The three can contain digits, strings or other objects (embedded).   More on lists   List[0] ; extract  Llist = [[1, 2, 3],[a, b, c],[x, 4, 'text'], 'seq'] ; embedded lists.  List[0][1] ; extract from embedded lists.  List.append(5) ; add.  Create:  range(3) .  seq(0, 2, 1) .  [0.0] * 10 .  [x**2 for x in range(5)] .     Creating a list with a one-line loop  loop, conditional, conditional, on one line  # remove non-base symbols from a sequence\nsquares = [x**2 for x in range(5)]\nprint squares\n\nbases = ['A', 'C', 'T', 'G']\nprint bases\n\nseq = 'GGACXCAGXXGATT'\nprint seq\n\nseqlist = [base for base in seq if base in bases]\nprint seqlist  Write all headers from a file to a separate file  fasta_file = open('SwissProt.fasta','r')\nout_file = open('SwissProt.header','w')\n\nfor line in fasta_file:\n    if line[0:1] == '>':\n        out_file.write(line)\n\nout_file.close()  Reads all AC numbers from the deflines of a file  parse, parsing, text, file  input_file = open(\"SwissProt.fasta\",\"r\")\n\nac_list = []\n\nfor line in input_file:\n    if line[0] == '>':\n        fields = line.split('|')\n        ac_list.append(fields[1])\n\nprint ac_list  Output:  ['P31946', 'P62258', 'Q04917', 'P61981', 'P31947', 'P27348', 'P63104', 'P30443']  Read a file (genbank_file) and convert it to another file (output_file)  genbank_file = open(\"AY810830.gb\")\noutput_file = open(\"AY810830.fasta\",\"w\")\n\nflag = False\nfor line in genbank_file:\n    if line[0:9] == 'ACCESSION':\n        accession = line.split()[1].strip()\n        output_file.write('>' + accession + '\\n')\n    if line[0:6] == 'ORIGIN': \n        flag = True\n    elif flag:\n        fields = line.split()\n        if fields != []:\n            seq = ''.join(fields[1:])\n            output_file.write(seq.upper() + '\\n')\n\ngenbank_file.close()\noutput_file.close()  Read multiple files and extract data  fasta_file = open('SwissProt.fasta','r')\nout_file = open('SwissProtHuman.fasta','w')\n\nseq = ''\nfor line in fasta_file:\n    if line[0] == '>' and seq == '':\n        # process the first line of the input file\n        header = line\n    elif line [0] != '>':\n        # join the lines with sequence\n        seq = seq + line\n    elif line[0] == '>' and seq != '':\n        # in subsequent lines starting with '>',\n        # write the previous header and sequence\n        # to the output file. Then re-initialize\n        # the header and seq variables for the next record\n        if \"Homo sapiens\" in header:\n            out_file.write(header + seq)\n        seq = ''\n        header = line\n\n# take care of the very last record of the input file\nif \"Homo sapiens\" in header:\n    out_file.write(header + seq)\nout_file.close()",
            "title": "Chapter 4, Parsing Data Records"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-5-searching-data",
            "text": "Translate a RNA sequence to a protein sequence in three reading frames  dictionary  codon_table = {\n    'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A', 'CGU':'R', 'CGC':'R',   \n    'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R', 'UCU':'S', 'UCC':'S',\n    'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', 'AUU':'I', 'AUC':'I',\n    'AUA':'I', 'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L', 'CUA':'L',\n    'CUG':'L', 'GGU':'G', 'GGC':'G', 'GGA':'G', 'GGG':'G', 'GUU':'V',\n    'GUC':'V', 'GUA':'V', 'GUG':'V', 'ACU':'T', 'ACC':'T', 'ACA':'T',\n    'ACG':'T', 'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P', 'AAU':'N',\n    'AAC':'N', 'GAU':'D', 'GAC':'D', 'UGU':'C', 'UGC':'C', 'CAA':'Q',\n    'CAG':'Q', 'GAA':'E', 'GAG':'E', 'CAU':'H', 'CAC':'H', 'AAA':'K',\n    'AAG':'K', 'UUU':'F', 'UUC':'F', 'UAU':'Y', 'UAC':'Y', 'AUG':'M',\n    'UGG':'W',\n    'UAG':'STOP', 'UGA':'STOP', 'UAA':'STOP'\n    }\n\n# read the RNA sequence into a single string\nrna = ''\nfor line in open('A06662-RNA.fasta'):\n    if not line.startswith('>'): \n        rna = rna + line.strip()\n\n# translate one frame at a time\nfor frame in range(3):\n    prot = '' \n    print 'Reading frame ' + str(frame + 1)\n    for i in range(frame, len(rna), 3):\n        codon = rna[i:i + 3]\n        if codon in codon_table:\n            if codon_table[codon] == 'STOP':\n                prot = prot + '*'\n            else: \n                prot = prot + codon_table[codon]\n        else:\n            # handle too short codons\n            prot = prot + '-'   \n\n    # format to blocks of 48 columns\n    i = 0\n    while i < len(prot):\n        print prot[i:i + 48]\n        i = i + 48  Output (contains a translated sequence for each reading frame):  Reading frame 1\nWDQSAEAACVRVRVRVCACVCVRLHLCRVGKEIEMGGQ*AQVPKALNP\nLVWSLLRAMGAIEKSEQGCV*M*GLEGSSREASSKAFAIIW*ENPARM\nDRQNGIEMSWQLKWTGFGTSLVVGSKQRRIWDSGGLAWGRRGCLRGWE\nG*E*DDTWWCLAGGGQG*LCEGTARATEAF*DPAVPEPGRQDLHCGRP\nGEHLA\n\nReading frame 2\nGTSQQRQRVCACVCVCVRVCVYACICVGWVRR*RWAGSRPRSRRP*TH\nWFGVS*GQWGPLRSLNRAVSECEV*KDPPEKPALKLLQSSGERTQQGW\nTGRME*R*VGS*SGQDLVLAWLWGASRGESGTLVVWPGADGGVSGAGR\nDESRMIHGGVWQEAGKDDYVKALPGQLKPFETLLSQNQGGKTFIVGDQ\nVSIW-\n\nReading frame 3\nGPVSRGSVCARACACVCVCVCTLAFVSGG*GDRDGRAVGPGPEGLEPT\nGLESPKGNGGH*EV*TGLCLNVRSRRILQRSQL*SFCNHLVREPSKDG\nQAEWNRDELAAEVDRIWY*PGCGEQAEENLGLWWSGLGQTGVSQGLGG\nMRVG*YMVVSGRRRARMTM*RHCPGN*SLLRPCCPRTREARPSLWETR\n*ASG-  While loop  seq = \"IVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\"\n\ni = 0\nwhile i < len(seq):\n    print seq[i:i + 12]\n    i = i + 12  Output:  IVGGYTCGANTV\nPYQVSLNSGYHF\nCGGSLINSQWVV\nSAAHCYKSGIQV\nRLGEDNINVVEG\nNEQF  Find the a sequence in a file  swissprot = open(\"SwissProt.fasta\")\ninsulin_ac = 'P61981'\nresult = None\n\nwhile result == None:\n    line = swissprot.next()\n    if line.startswith('>'):\n        ac = line.split('|')[1]\n        if ac == insulin_ac:\n            result = line.strip()\n\nprint result  Output:  >sp|P61981|1433G_HUMAN 14-3-3 protein gamma OS=Homo sapiens GN=YWHAG PE=1 SV=2  Searching a list  search  bases = ['A', 'C', 'T', 'G']\nseq = 'CAGGCCATTRKGL'\n\nfor i in seq:\n    if i not in bases:\n        print i, \"is not a nucleotide\"  Output:  R is not a nucleotide\nK is not a nucleotide\nL is not a nucleotide  Read a file and store entries in a dictionary  sequences = {}\nac = ''\nseq = ''\n\nfor line in open(\"SwissProt.fasta\"):\n    if line.startswith('>') and seq != '':\n        sequences[ac] = seq\n        seq = ''\n    if line.startswith('>'):\n        ac = line.split('|')[1]\n    else:\n        seq = seq + line.strip()\n\nsequences[ac] = seq\nprint sequences.keys()\nprint sequences['P62258']  Output:  ['Q04917', 'P63104', 'P27348', 'P31947', 'P31946', 'P30443', 'P61981', 'P62258']\n\nMDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIGARRASWRIISSIEQKEENKGGEDKLKMIREYRQMVETELKLICCDILDVLDKHLIPAANTGESKVFYYKMKGDYHRYLAEFATGNDRKEAAENSLVAYKAASDIAMTELPPTHPIRLGLALNFSVFYYEILNSPDRACRLAKAAFDDAIAELDTLSEESYKDSTLIMQLLRDNLTLWTSDMQGDGEEQNKEALQDVEDENQ  Read a sequence from a structure  aa_codes = {\n     'ALA':'A', 'CYS':'C', 'ASP':'D', 'GLU':'E',\n     'PHE':'F', 'GLY':'G', 'HIS':'H', 'LYS':'K',\n     'ILE':'I', 'LEU':'L', 'MET':'M', 'ASN':'N',\n     'PRO':'P', 'GLN':'Q', 'ARG':'R', 'SER':'S',\n     'THR':'T', 'VAL':'V', 'TYR':'Y', 'TRP':'W'}\n\nseq = ''\n\nfor line in open(\"1TLD.pdb\"):\n    if line[0:6] == \"SEQRES\":\n        columns = line.split()\n        for resname in columns[4:]:\n            seq = seq + aa_codes[resname]\n\ni = 0\nprint \">1TLD\"\nwhile i < len(seq):\n    print seq[i:i + 64]\n    i = i + 64  Output:  >1TLD\nIVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\nISASKSIVHPSYNSNTLNNDIMLIKLKSAASLNSRVASISLPTSCASAGTQCLISGWGNTKSSG\nTSYPDVLKCLKAPILSDSSCKSAYPGQITSNMFCAGYLEGGKDSCQGDSGGPVVCSGKLQGIVS\nWGSGCAQKNKPGVYTKVCNYVSWIKQTIASN",
            "title": "Chapter 5, Searching Data"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-6-filtering-data",
            "text": "Calculate the intersection of two lists  venn  data_a = [1, 2, 3, 4, 5, 6]\ndata_b = [1, 5, 7, 8, 9]\n\na_and_b = []\n\nfor num in data_a:\n    if num in data_b:\n        a_and_b.append(num)\n\nprint a_and_b  Output:  [1, 5]  More about sets  set   Set = set([1, 2, 3]) ; immutable unordered collections of unique elements.  They are not sequential objects like lists.  They cannot contain identical elements.  to remove duplicates  to calculate the intersection  the union  the difference between two or more group of objects  as long as the order is not important.    They do not support indexing and slicing operations.  They take the  in  and  not in  operators (test an element for membership in a set).   >>> s1 = set('LDFGJLDFGDGD')\n>>> s1\nset(['J', 'F', 'L', 'G', 'D'])\n\n>>> 'L' in s1\nTrue\n\n>>> 'Z' not in s1\nTrue\n\n>>> s2 = ('LDF')\n>>> s1.issubset(s2)\nFalse\n\n>>> s1.issuperset(s2)\nTrue\n\n>>> s1 = set(['a', 1, 2, 3, 4, 5, 'c', 'b'])\n>>> 5 in s1\nTrue\n\n>>> 6 in s1\nFalse\n\n>>> s2 = set([10, 4, 5])\n>>> s1.issubset(s2)\nFalse\n\n>>> s1.issuperset(s2)\nFalse\n\n>>> s3 = set((1, 2, 3, 4))\n>>> s3\nset([1, 2, 3, 4])\n\n>>> s3.add(5)\n>>> s3\nset([1, 2, 3, 4, 5])\n\n>>> s5 = set([1, 2, 3, 'b', 'c'])\n>>> s5\nset([1, 2, 3, 'b', 'c'])\n\n>>> s5.update(['a', 'd', 4])\n>>> s5\nset(['a', 1, 2, 3, 4, 'd', 'c', 'b'])\n\n>>> s1 = set(['a', 'b', 'c'])\n>>> s2 = set(['c', 'd', 'e'])\n>>> s1.union(s2)\nset(['a', 'c', 'b', 'e', 'd'])\n\n>>> s1.intersection(s2)\nset(['c'])\n\n>>> s1.symmetric_difference(s2)\nset(['a', 'b', 'e', 'd'])\n\n>>> s1.difference(s2)\nset(['a', 'b'])\n\n>>> s2.difference(s1)\nset(['e', 'd'])  Calculate the intersection of two sets  data_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_and_b = data_a.intersection(data_b)\nprint a_and_b  Output:  set([1, 5])  Find numbers common to three sets  reduce() is\n\na = set((1, 2, 3, 4, 5))\nb = set((2, 4, 6, 7, 1))\nc = set((1, 4, 5, 9))\n\ntriple_set = [a, b, c]\ncommon = reduce(set.intersection, triple_set)\nprint common  Output:  set([1, 4])  Calculate the differences of two lists  data_a = [1, 2, 3, 4, 5, 6]\ndata_b = [1, 5, 7, 8, 9]\n\na_not_b = []\nb_not_a = []\n\nfor num in data_a:\n    if num not in data_b:\n        a_not_b.append(num)\n\nfor num in data_b:\n    if num not in data_a:\n        b_not_a.append(num)\n\nprint a_not_b\nprint b_not_a  Output:  [2, 3, 4, 6]\n[7, 8, 9]  Calculate the differences of two sets 1  data_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_not_b = data_a.difference(data_b)\nb_not_a = data_b.difference(data_a)\n\nprint a_not_b\nprint b_not_a  Output:  set([2, 3, 4, 6])\nset([8, 9, 7])  Calculate the differences of two sets 2  data_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_or_b = data_a.union(data_b)\na_xor_b = data_a.symmetric_difference(data_b)\n\nprint a_or_b\nprint a_xor_b  Output:  set([1, 2, 3, 4, 5, 6, 7, 8, 9])\nset([2, 3, 4, 6, 7, 8, 9])  Remove elements from a list   pop() ; return and remove the first value.  pop(0) ; return and remove a specific position in the index.   >>> data_a = [1, 2, 3, 4, 5, 6, 7]\n>>> data_a.pop()\n1\n\n>>> print data_a\n[2, 3, 4, 5, 6, 7]   del() ; remove a specific position in the index only.   delete  >>> data_a = [1, 2, 3, 4, 5, 6, 7]\n>>> del(data_a[1])\n>>> print data_a\n[1, 3, 4, 5, 6, 7]   remove() ;  remove a specific element only.   remove  >>> data_a = [1, 2, 3, 4, 5, 6]\n>>> data_a.remove(2)\n>>> print data_a\n[1, 3, 4, 5, 6]\n\n>>> data = [x for x in data_a if x != 3]  Slicing a list  slice, subset  >>> data_a = [1, 2, 3, 4, 5, 6]\n>>> data_2 = data_a[:2]\n[1, 2]  Remove elements from a dictionary  pop, delete  >>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> d.pop('a')\n1\n\n>>> d\n{'b': 2, 'c': 3}\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> del d['a']\n1\n\n>>> d\n{'b': 2, 'c': 3}  Delete particular lines from a text file or write back particular lines in a new file  lines = open('text.txt').readlines()\nopen('new.txt', 'w').writelines(lines[2:4]+lines[6:])  Remove some lines from a text file  in_file = open('text.txt')\nout_file = open('new.txt', 'w')\n\nindex = 0\nindices_to_remove = [1, 2, 5, 6]\nfor line in in_file:\n    index = index + 1\n    if index not in indices_to_remove:\n        out_file.write(line)\n\nin_file.close()\nout_file.close()  Remove some lines from a text file with  enumerate()  enumerate  out_file = open('new.txt', 'w')\nindices_to_remove = [1, 2, 5, 6]\n\nfor index, line in enumerate(open('text.txt')):\n    if (index + 1) not in indices_to_remove:\n        out_file_write(line)\n\nout_file.close()  Remove duplicates from a file with accession numbers 1  set   Using a set is faster but distorts the order.   input_file = open('UniprotID.txt')\noutput_file = open('UniprotID-unique.txt','w')\n\nunique = set(input_file)\nfor line in input_file:\n    unique.add(line)\n\nfor line in unique:\n    output_file.write(line)  Remove duplicates from a list of accession numbers 2  list  input_file = open('UniprotID.txt')\noutput_file = open('UniprotID-unique.txt','w')\n\nunique = []\nfor line in input_file:\n    if line not in unique:\n        output_file.write(line)\n        unique.append(line)\n\ninput_file.close()\noutput_file.close()  Compare two lists of accession codes using sets  set comparison, difference  # read the old database release\nold_db = set()\nfor line in open(\"list_old.txt\"):\n    accession = line.strip()\n    old_db.add(accession)\n\n# read the new database release\nnew_db = set()\nfor line in open(\"list_new.txt\"):\n    accession = line.strip()\n    new_db.add(accession)\n\n# report the differences\nnew_entries = new_db.difference(old_db)\nprint \"new entries\", list(new_entries)\nold_entries = old_db.difference(new_db)\nprint \"deprecated entries\", list(old_entries)\nunique_entries = new_db.symmetric_difference(old_db)\nprint \"unique entries\", list(unique_entries)",
            "title": "Chapter 6, Filtering Data"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-7-managing-tabular-data",
            "text": "The original data     protein  ext1  ext2  ext3      0.16  0.038  0.044  0.04    0.33  0.089  0.095  0.091    0.66  0.184  0.191  0.191    1.0  0.28  0.292  0.283    1.32  0.365  0.367  0.365    1.66  0.441  0.443  0.444     Read tabular data from a tab-separated text file  table = []\n\nfor line in open('lowry_data.txt'):\n    table.append(line.strip().split('\\t'))\n\nprint table  Output:  [\n['protein', 'ext1', 'ext2', 'ext3'],\n['0.16', '0.038', '0.044', '0.04'],\n['0.33', '0.089', '0.095', '0.091'],\n['0.66', '0.184', '0.191', '0.191'],\n['1.0', '0.28', '0.292', '0.283'],\n['1.32', '0.365', '0.367', '0.365'],\n['1.66', '0.441', '0.443', '0.444']\n]  Write a nested list to a text file  table = [\n    ['protein', 'ext1', 'ext2', 'ext3'],\n    [0.16, 0.038, 0.044, 0.040],\n    [0.33, 0.089, 0.095, 0.091],\n    [0.66, 0.184, 0.191, 0.191],\n    [1.00, 0.280, 0.292, 0.283],\n    [1.32, 0.365, 0.367, 0.365],\n    [1.66, 0.441, 0.443, 0.444]\n    ]\n\nout = ''\n\nfor row in table:\n    line = [str(cell) for cell in row]\n    out = out + '\\t'.join(line) + '\\n'\n\nopen('lowry_data.txt', 'w').write(out)  Reformat a four-column to a two-column table  Create a 2D table.  Print the table line by line.  table = [\n    ['protein', 'ext1', 'ext2', 'ext3'],\n    [0.16, 0.038, 0.044, 0.040],\n    [0.33, 0.089, 0.095, 0.091],\n    [0.66, 0.184, 0.191, 0.191],\n    [1.00, 0.280, 0.292, 0.283],\n    [1.32, 0.365, 0.367, 0.365],\n    [1.66, 0.441, 0.443, 0.444]\n    ]\n\n# remove the first row\ntable = table[1:]\n\nprotein, ext1, ext2, ext3 = zip(*table)\n\n# create a single column for `ext` or concatenate each `ext`\n# extend (`* 3`) the `protein` column to match the `ext` column.\nextinction = ext1 + ext2 + ext3\nprotein = protein * 3\n\n# create four tuples for each column\ntable = zip(protein, extinction)\n\nfor prot, ext in table:\n    print prot, ext  Output:     protein  ext      0.16  0.038    0.33  0.089    0.66  0.184    1.0  0.28    1.32  0.365    1.66  0.441    0.16  0.044    0.33  0.095    0.66  0.191    1.0  0.292    1.32  0.367    1.66  0.443    0.16  0.04    0.33  0.091    0.66  0.191    1.0  0.283    1.32  0.365    1.66  0.444     Create a table; lists in a list   Empty 1.   table = [[0] * 3 for x in range(3)]   Empty 2.   table = []\nfor i in range(3):\n    table.append([0] * 3)  Encode a 2D list; lists in a list  tabular, table, two dimensions  table = [\n    [ 0,  1,  2,  3],\n    [10, 11, 12, 13],\n    [20, 21, 22, 23]\n    ]  Encode a list of nested tuples; tuples in a list  table = [\n    ( 0,  1,  2,  3),\n    (10, 11, 12, 13),\n    (20, 21, 22, 23)\n    ]  Extract, access rows and cells from a 2D table  tabular, table, two dimensions   table[1] ; extract the 2nd row.  table[1][2] ; extract a single cell (2nd row, 3rd column).  table[1:]  or  table.pop(0) ; slice the 1st row, keep the remaining.  table.pop(2) ; delete the 3rd row.  table[:2] ; slice the 3rd column, keep the remaining.  table[:2] + table[3:] ; slice the 3rd column and 4th row, keep the remaining.  table.insert(2, [0.55, 0.12, 0.12, 0.14]) ; insert a new row in 3rd position  table.append([0.55, 0.12, 0.12, 0.14]) ; insert a new row at the end.   Looping to access each row  for row in table:\n    print row  Looping to access each cell  for row in table:\n    for cell in row:\n        print cell  Extract, access columns from a 2D table  tabular, table, two dimensions  protein = []\n\n# access the 1st, 2nd... column (separate the columns)\nfor row in table:\n    protein.append(row[0])  # access the 4th column\ncolumns = zip(*table)\nfourth = column[3]   protein, ex1. ext2, ext3 = zip(*table) ; access many columns; now each column is in a separate tuple.   Flip a table 90 degrees  convert column to row, row to column   Column becomes rows. Easier to extract or insert rows and cells.   data = [\n    [ 0,  1,  2,  3],\n    [10, 11, 12, 13],\n    [20, 21, 22, 23]\n]\n\ncolumns = zip(*data)\nprint columns  Output:  [\n(0, 10, 20),\n(1, 11, 21),\n(2, 12, 22),\n(3, 13, 23)\n]   But rows are now immutable tuples!  You cannot manipulate individual cells.  Convert the rows to lists again in order to extract a cell.   table[1] = list(table[1])\ntable[1][2]  Insert, access or extract columns from a 2D table  tabular, table, two dimensions  table = zip(*table)\ntable.append(['ext4', 0, 0, 0, 0, 0, 0])\ntable = zip(*table)\n\ntable = zip(*table)\ntable.pop(1)\ntable = zip(*table)\n\ntable = zip(*table)\ntable  The  zip()  function   zip() ; iterate though lists, tuples, and strings.   >>> zip([1, 2, 3], [4, 5, 6])\n[\n(1, 4),\n(2, 5),\n(3, 6)\n]   The asterik tells the function to use all the arguments.   zip(*table)\n\n# vs\n\nzip(table[0], table[1], table[2], table[3])  Multi-dimentional tables  tabular, table, two dimensions, three dimensions, 2D, 3D, lists in list  cube = [[[0, 1], [2, 3]], [[4, 5], [6, 7]]]   Warning: more dimensions means more nested data.  It slows down the calculations!!!   Prefer Numpy, Pandas, parallel computing.  Avoid going over 2D!   Create a table; dictionaries in a table, in a list  table = [\n   {'protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040},\n   {'protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091},\n   {'protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191},\n   {'protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283},\n   {'protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365},\n   {'protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444}\n   ]  Extract, access cells in a table  # second row, cell 'ext2' instead of a number\ncell = table[1]['ext2']\n\nprint table\nprint cell  Create a table; dictionaries in a dictionary  table = {\n   'row1': {'protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040},\n   'row2': {'protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091},\n   'row3': {'protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191},\n   'row4': {'protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283},\n   'row5': {'protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365},\n   'row6': {'protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444}\n   }  Extract, access cells in a table, in a dictionary  More readable this way; second row, cell  'ext2' :  cell = table['row1']['ext2']\n\nprint table\nprint cell  Create a table: lists in a dictionaries  Data for each row are in a simpler format.  table = {\n   '1': ['protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040\u00b8],\n   '2': ['protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091],\n   '3': ['protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191],\n   '4': ['protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283],\n   '5': ['protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365],\n   '6': ['protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444]\n   }  Create a table; formats   Lists in a list:   Easy to access/add/delete rows, to sort.   Difficult to deal with columns and a specific cell.    Dictionaries in a dictionary:  Easy to access column entries.  Easy to read (find data).  Unsorted and impossible to sort.    Mixed lists and dictionaries:  Use the advantage of both types and build the table accordingly (l, d or d, l for rows, columns) depending on the operations (see above).  The code is harder to read or less straightforward.     Convert a table from a nested list to a nested dictionary\u2026  table = [\n    ['protein', 'ext'],\n    [0.16, 0.038],\n    [0.33, 0.089],\n    [0.66, 0.184],\n    [1.00, 0.280],\n    [1.32, 0.365],\n    [1.66, 0.441]\n]\n\n# convert nested list to nested dict\nnested_dict = {}\nn = 0\nkey = table[0]\nfor row in table[1:]: # for row in table[0:]  includes the header\n    n += 1\n    entry = {key[0]: row[0], key[1]: row[1]}\n    nested_dict['row'+str(n)] = entry\n\nprint nested_dict  Output:  {\n'row1': {'protein': 0.16, 'ext': 0.038},\n'row2': {'protein': 0.33, 'ext': 0.089},\n'row3': {'protein': 0.66, 'ext': 0.184},\n'row4': {'protein': 1.0, 'ext': 0.28},\n'row5': {'protein': 1.32, 'ext': 0.365},\n'row6': {'protein': 1.66, 'ext': 0.441}\n}  \u2026and convert a nested dictionary to a table  # convert nested dict back to nested list\nnested_list = []\nfor entry in nested_dict:\n    key = nested_dict[entry]\n    nested_list.append([key['protein'], key['ext']])\n\nprint nested_list  Output:  [\n[0.16, 0.038],\n[0.33, 0.089],\n[0.66, 0.184],\n[1.0, 0.28],\n[1.32, 0.365],\n[1.66, 0.441]\n]",
            "title": "Chapter 7, Managing Tabular Data"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-8-sorting-data",
            "text": "Sort a table by one column and write it to a file  add, index, list   sorted() .  itemgetter() ; turn elements of each column into a sortable key.   from operator import itemgetter\n\n# read table to a nested list of floats\ntable = []\nfor line in open(\"random_distribution.tsv\"):\n    columns = line.split()\n    columns = [float(x) for x in columns]\n    table.append(columns)\n\n# sort the table by second column\ncolumn = 1\ntable_sorted = sorted(table, key = itemgetter(column))\n\n# format table as strings\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    print \"\\t\".join(row)  Output (first 3 lines only):  6153.0  58.0    0.00942629611572    40.0    0.00650089387291    260.0   0.0422558101739\n6101.0  64.0    0.0104900835929 41.0    0.00672020980167    299.0   0.0490083592854\n6101.0  68.0    0.0111457138174 39.0    0.0063923946894 274.0   0.0449106703819  List are good for sorting   ASCII sort order chart (top to bottom, left to right):                   space  0  :  A  Q  [  a  q  }    !  1  ;  B  R  \\  b  r  tick    \u201c  2  <  C  S  ]  c  s  {    #  3  =  D  T  ^  d  t     $  4  >  E  U  _  e  u  DEL    %  5  ?  F  V  `  f  v     &  6  @  G  W   g  w     \u2018  7   H  X   h  x     (  8   I  Y   i  y     )  9   J  Z   j  z     *    K    k      +    L    l      ,    M    m      -    N    n      .    O    o      /    P    p       Difference between  sort()  and  sorted()   sort() ; apply to lists  sorted() ; apply to lists, tuples, and dictionary keys.  reverse()  sort the other way around.  sorted(data, reverse = True) ; idem.  operator.itemgetter(i)(T)  returns the  i th element of  T , a string, a list, a tuple, or a dictionary.   >>> from operator import itemgetter\n>>> data = ['A', 'T', 'C']\n>>> itemgetter(1)(data)\n'A'\n>>> itemgetter(1, -1)(data)\n('A', 'T')  new_table = sorted(table, key = itemgetter(1, 3))  Sort entries in a tabular output file in reverse order   Notice the  table_sorted = sorted(table, key = itemgetter(2), reverse=True) .   from operator import itemgetter\n\ninput_file = open(\"BlastOut.csv\")\noutput_file = open(\"BlastOutSorted.csv\",\"w\")\n\n# read BLAST output table\ntable = []\nfor line in input_file:\n    col = line.split(',')\n    col[2] = float(col[2])\n    table.append(col)\n\ntable_sorted = sorted(table, key = itemgetter(2), reverse=True)\n\n# write sorted table to an output file\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write(\"\\t\".join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()  Sort a tuple by converting it to a list  # sort a tuple\ndata = (1, 4, 5, 3, 8, 9, 2, 6, 8, 9, 30)\nlist_data = list(data)\nlist_data.sort()\nnew_tup = tuple(data)\nprint new_tup\n\n# sort a tuple using the sorted() built-in function\nnew_tup = tuple(sorted(data))\nprint new_tup  Both outputs:  (1, 4, 5, 3, 8, 9, 2, 6, 8, 9, 30)\n(1, 2, 3, 4, 5, 6, 8, 8, 9, 9, 30)  Convert a dictionary to a sorted list  data = {1: 'a', 2: 'b', 4: 'd', 3: 'c',\n        5: 't', 6: 'm', 36: 'z'}\n\n# create a list of keys and go through them one by one\nkeys = list(data)\nkeys.sort()\nfor key in keys:\n    print key, data[key]\n\n\n# sort keys using the sorted() built-in function\nfor key in sorted(data):\n    print key, data[key]  Output:  1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z\n1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z  Sort strings by their length  lamda, function   Use a  lambda  function and replace  itemgetter() .   data = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda x: len(x))\nprint new_data  data = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda col: col[1]) # alternative\nprint new_data  Same output:  ['ASDF', 'SDFSD', 'GSGDGG', 'SDFSADGSAG']  Sort a table by seven columns in one operation  from operator import itemgetter\n\n# read table\nin_file = open(\"random_distribution.tsv\")\ntable = []\nfor line in in_file:\n    columns = line.split()\n    columns = [float(x) for x in columns]\n    table.append(columns)\n\ntable_sorted = sorted(table, key=itemgetter(0, 1, 2, 3, 4, 5, 6))\nprint table_sorted  Output (first 3 lines only):  [\n[6041.0, 87.0, 0.0144015891409, 44.0, 0.00728356232412, 213.0, 0.035259063069],\n[6042.0, 121.0, 0.0200264812976, 35.0, 0.00579278384641, 262.0, 0.0433631247931],\n[6044.0, 113.0, 0.0186962276638, 67.0, 0.0110853739246, 266.0, 0.0440105890139],\n...\n]  Sort entries in a tabular BLAST output file in reverse order  from operator import itemgetter\n\ninput_file = open(\"BlastOut.csv\")\noutput_file = open(\"BlastOutSorted.csv\",\"w\")\n\n# read BLAST output table\ntable = []\nfor line in input_file:\n    col = line.split(',')\n    col[2] = float(col[2])\n    table.append(col)\n\ntable_sorted = sorted(table, key=itemgetter(2), reverse=True)\n\n# write sorted table to an output file\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write(\"\\t\".join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()  Sort entries in a comma separated file by two columns  from operator import itemgetter\n\ninput_file = open(\"PDBhaemoglobinReport.csv\")\noutput_file = open(\"PDBhaemoglobinSorted.csv\",\"w\")\n\ntable = []\nheader = input_file.readline()\nfor line in input_file:\n    col = line.split(',')\n    col[3] = float(col[3][1:-1])\n    col[4] = int(col[4][1:-2])\n    table.append(col)\n\ntable_sorted = sorted(table, key=itemgetter(3, 4))\n\noutput_file.write(header + '\\t')\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write(\"\\t\".join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()",
            "title": "Chapter 8, Sorting Data"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-9-pattern-matching-and-text-mining",
            "text": "Find a sequence pattern in a sequence  regex, regular expression   re  package.   import re\n\n# define a string with occurrences of regex:\nseq = 'VSVLTMFRYAGWLDRLYMLVGTQLAAIIHGVALPLMMLI'\n\n# compile a pattern and assign it to a variable\npattern = re.compile('[ST]Q')\n\n# search for the pattern in the string\nmatch = pattern.search(seq)\nif match:\n    # print the first match along the sequence with the group() method\n    # 4 characters before and after the pattern\n    print '%10s' %(seq[match.start() - 4:match.end() + 4])\n    print '%6s' % match.group()\nelse:\n    print \"no match\"  Output:  MLVGTQLAAI\n    TQ  re  methods   group() ; return the matching subgroup.  span() ; return a tuple containing the starting and ending position of the match.  start() ; return the starting position.  end() ; return the ending position.  search() ; find the  first  occurence within the string.  match() ; attempt to match a pattern to a string. If the pattern is within the string, it will not match it. It will find \u2018S\u2019 in \u2018ST\u2019, but not in \u2018TST\u2019.   findall() ; return a list containing  all  the matching substrings.  finditer() ; find  all  the match objects corresponding to the regex matches and returns them in the form of an iterator.   import re\n\npattern = re.compile('R.[ST][^P]')\nseq = 'RQSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'\n\n# findall returns a list of all matches\nmatches = pattern.findall(seq)\nprint matches\n\n# finditer returns an iterator of match objects\nmatch_iter = pattern.finditer(seq)\nfor match in match_iter:\n    print match.group(), match.span(), match.start(), match.end()  Ouput:  ['RQSA', 'RRSL', 'RPSK']\nRQSA (0, 4) 0 4\nRRSL (18, 22) 18 22\nRPSK (40, 44) 40 44  More  re  methods   Divide regex in subgroups, each matching a different component of interest.  (.) ; delimite a group.  R(.)[ST][^P] ; stand for \u2018R\u2019, \u2018any character\u2019, pattern \u2018ST\u2019, any character different from \u2018P\u2019.  The \u2018any character\u2019 is also a subgroup.  What ever is found between  R  and  [ST][^P]  is a subgroup.    R(.{0,3})[ST][^P] ; add a `{0,3}.  This qualifier or quantifiers means that at least 0 and at most 3 repetitions of \u2018R\u2019.    group() ; always return the complete matching substring (0 for no subgroup).  group(#) ; return subgroups numbered from left to right in increasing order (subgroup #).   Find multiple patterns in a search string  import re\n\nseq = 'QSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'\n\npattern1 = re.compile('R(.)[ST][^P]')\nmatch1 = pattern1.search(seq)\nprint match1.group()\nprint match1.group(1)\n\npattern2 = re.compile('R(.{0,3})[ST][^P]')\nmatch2 = pattern2.search(seq)\nprint match2.group()\nprint match2.group(1)  Output:  RRSL\nR\nRRRSL\nRR  Another example with two subgroups  import re\n\nseq = 'zzabcdzz'\n\npattern = re.compile('(a(b)c)d')\nmatch = pattern.search(seq)\nprint match.group(0)\nprint match.group(1)\nprint match.group(2)\nprint match.groups()   groups() ; return a tuple with the substrings corresponding to all subgroups.   Output:  abcd\nabc\nb\n('abc', 'b')  Assign  names to subgroup:  ?P<w1>  and  ?P<w2>  import re\n\nseq = 'zzabcdzz'\n\npattern = re.compile('(?P<w1>a(?P<w2>b)c)d')\nmatch = pattern.search(seq)\nprint match.group(0)\nprint match.group('w1')\nprint match.group('w2')  Ouput:  abcd\nabc\nb  More  re  methods   splits(s) ; split the string  s  at the matches of a regex.  sub(r, s, [c]) ; return a new string  s  where nonoverlapping occurrences of a given pattern in the string are all replaced with the value of  r .  c , an optional number, stands for the maximum numbers of occurences.  subn(r, s, [c]) ; do what  sub()  does, but returns a tuple of two elements; the first element is the new string (as with  sub(r, s, [c]) ) and the second is the number of replacements.   Split text and replace separators with a pattern  import re\n\nseparator = re.compile('\\|')\n\n# split\nannotation = 'ATOM:CA|RES:ALA|CHAIN:B|NUMRES:166'\ncolumns = separator.split(annotation)\nprint columns\n\n# replace\nnew_annotation = separator.sub('@', annotation)\nprint \"replace all |:\"\nprint new_annotation\n\nnew_annotation2 = separator.sub('@', annotation, 2)\nprint \"replace 2 |:\"\nprint new_annotation2\n\nnew_annotation3 = separator.subn('@', annotation)\nprint \"replace all |:\"\nprint new_annotation3\n\nnew_annotation4 = separator.subn('@', annotation, 2)\nprint \"replace 2 |:\"\nprint new_annotation4  Output:  ['ATOM:CA', 'RES:ALA', 'CHAIN:B', 'NUMRES:166']\nreplace all |:\nATOM:CA@RES:ALA@CHAIN:B@NUMRES:166\nreplace 2 |:\nATOM:CA@RES:ALA@CHAIN:B|NUMRES:166\nreplace all |:\n('ATOM:CA@RES:ALA@CHAIN:B@NUMRES:166', 3)\nreplace 2 |:\n('ATOM:CA@RES:ALA@CHAIN:B|NUMRES:166', 2)  Find transcription factor binding sites  import re\n\ngenome_seq = open('genome.txt').read()\n\n# read transcription factor binding site patterns\nsites = []\nfor line in open('TFBS.txt'):\n    fields = line.split()\n    tf = fields[0]\n    site = fields[1]\n    sites.append((tf, site))\n\n# match all TF's to the genome and print matches\nfor tf, site in sites:\n    tfbs_regexp = re.compile(site)\n    all_matches = tfbs_regexp.findall(genome_seq)\n    matches = tfbs_regexp.finditer(genome_seq)\n    if all_matches:\n        print tf, ':'\n        for tfbs in matches:\n            print '\\t', tfbs.group(), tfbs.start(), tfbs.end()  Parse abstracts from PubMed HTML pages   The script opens the HTML webpage and parses it in order to selectively fetch some parts of it.  Extract the title and the abstract text.  The title of the paper is enclosed between  <h1>  and  </h1> .  Whereas the text of the abstract is enclosed between  <h3>Abstract</h3><div class = \"\"><p>  and  </p> .  The paper.   import urllib2\nimport re\n\npmid = '18235848'\nurl = 'http://www.ncbi.nlm.nih.gov/pubmed?term=%s' % pmid\nhandler = urllib2.urlopen(url)\nhtml = handler.read()\n\ntitle_regexp = re.compile('<h1>.{5,400}</h1>')\ntitle_text = title_regexp.search(html)\n\nabstract_regexp = re.compile('<AbstractText>.{20,3000}</AbstractText>')\nabstract_text = abstract_regexp.search(html)\n\nprint 'TITLE:', title_text.group() \nprint 'ABSTRACT:', abstract_text.group()  Output:  TITLE: <h1>Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade.</h1>\nABSTRACT: <AbstractText>Schistosomiasis is a tropical disease associated with high morbidity and mortality, currently affecting over 200 million people worldwide. Praziquantel is the only drug used to treat the disease, and with its increased use the probability of developing drug resistance has grown significantly. The Schistosoma parasites can survive for up to decades in the human host due in part to a unique set of antioxidant enzymes that continuously degrade the reactive oxygen species produced by the host's innate immune response. Two principal components of this defense system have been recently identified in S. mansoni as thioredoxin/glutathione reductase (TGR) and peroxiredoxin (Prx) and as such these enzymes present attractive new targets for anti-schistosomiasis drug development. Inhibition of TGR/Prx activity was screened in a dual-enzyme format with reducing equivalents being transferred from NADPH to glutathione via a TGR-catalyzed reaction and then to hydrogen peroxide via a Prx-catalyzed step. A fully automated quantitative high-throughput (qHTS) experiment was performed against a collection of 71,028 compounds tested as 7- to 15-point concentration series at 5 microL reaction volume in 1536-well plate format. In order to generate a robust data set and to minimize the effect of compound autofluorescence, apparent reaction rates derived from a kinetic read were utilized instead of end-point measurements. Actives identified from the screen, along with previously untested analogues, were subjected to confirmatory experiments using the screening assay and subsequently against the individual targets in secondary assays. Several novel active series were identified which inhibited TGR at a range of potencies, with IC(50)s ranging from micromolar to the assay response limit ( approximately 25 nM). This is, to our knowledge, the first report of a large-scale HTS to identify lead compounds for a helminthic disease, and provides a paradigm that can be used to jump-start development of novel therapeutics for other neglected tropical diseases.</AbstractText>  Search for keywords in a series of PubMed abstracts   This example can be applied to perform very simple text mining and can be compared to the \u201cfind\u201d tool in Microsoft Word.  It might stop on the first occurence.   import urllib2\nimport re\n\n# word to be searched\nword_regexp = re.compile('schistosoma')\n\n# list of PMIDs where we want to search the word\npmids = ['18235848', '22607149', '22405002', '21630672']\nfor pmid in pmids:\n    url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid\n    handler = urllib2.urlopen(url)\n    html = handler.read()\n    title_regexp = re.compile('<h1>.{5,400}</h1>')\n    title = title_regexp.search(html)\n    title = title.group() \n    abstract_regexp = re.compile('<AbstractText>.{20,3000}</AbstractText>')\n    abstract = abstract_regexp.search(html)\n    abstract = abstract.group()\n    word = word_regexp.search(abstract, re.IGNORECASE)\n    if word:\n        # display title and where the keyword was found\n        print title\n        print word.group(), word.start(), word.end()   Circumvent the problem with the  finditer()  method.   import urllib2\nimport re\n\n# word to be searched\nword_regexp = re.compile('schistosoma')\n\n# list of PMIDs where we want to search the word\npmids = ['18235848', '22607149', '22405002', '21630672']\nfor pmid in pmids:\n    url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid\n    handler = urllib2.urlopen(url)\n    html = handler.read()\n    title_regexp = re.compile('<h1>.{5,400}</h1>')\n    title = title_regexp.search(html)\n    title = title.group() \n    abstract_regexp = re.compile('<AbstractText>.{20,3000}</AbstractText>')\n    abstract = abstract_regexp.search(html)\n    abstract = abstract.group()\n    words = word_regexp.finditer(abstract)\n    if words:\n        # display title and where the keyword was found\n        print title\n        for word in words:\n            print word.group(), word.start(), word.end()  Output:  <h1>Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade.</h1>\n<h1>The redox biology of schistosome parasites and applications for drug development.</h1>\n<h1>Moonlighting by different stressors: crystal structure of the chaperone species of a 2-Cys peroxiredoxin.</h1>\n<h1>Investigations of the catalytic mechanism of thioredoxin glutathione reductase from Schistosoma mansoni.</h1>  More  re  methods   findall() ; look for all (non-overlapping) occurrences of pattern in string; return a list of matches.  finditer() ; same as above except returns an iterator instead of a list; for each match, the iterator returns a match object; it is adapted for loops!  | ;  \u2018OR\u2019.  $ ; indicate that a match exists in the string only if the pattern is in the last position of the string.  ^ ; indicate that a match exists in the string only if the pattern is in the first position of the string.   Python Regex, Characters and Metacharaters",
            "title": "Chapter 9, Pattern Matching and Text Mining"
        },
        {
            "location": "/Managing Your Biological Data with Python/#part-3-modular-programming",
            "text": "",
            "title": "Part 3, Modular Programming"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-10-divide-a-program-into-functions",
            "text": "Built-in functions  length, total, sum, range   len() .  sum() .  range(n, m, step) ; from n to m-1, n = 0 by default.  xrange(n, m, step) ; better suited for big numbers.   Define functions  docstring, docstrings   The documentation is retrieved with the  __doc__  attribute: type  addition.__doc__ .   def addition(arg1, arg2):\n    '''\n    documentation: calculates the sum of two numbers\n    '''\n    result = arg1 + arg2\n    return result\n\nprint addition(1,1)  Lambda functions   Small anonymous functions; they are not declared using  def .  They do not contain return statement.  They can be defined in an argument in a function (useful).  There are nameless.   def f(x):\n    return x ** 2\n\nprint f(8)  vs  g = lambda x: x ** 2\n\nprint g(8)  or  (lambda x: x ** 2)(8)   Use a  lambda  function as an argument of a built-in function:   data = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda x: len(x))\nprint new_data  Output:  ['ASDF', 'SDFSD', 'GSGDGG', 'SDFSADGSAG']  Function Arguments   required arguments.  keyword arguments.  default arguments.  variable-length arguments.   1. Required Arguments  def print_funct(num, seq):\n    print num, seq\n\nprint_funct(10, \"ABC\")  Output:  10 ABC  2. Keyword Arguments  def print_funct(num, seq):\n    print num, seq\n\nprint_funct(seq = \"ABC\", num = 10)  Output:  10 ABC  3. Default Arguments  sequence   The argument is given by default; but can be overwritten!   def print_funct(num, seq = \"A\"):\n    print num, seq\n\nprint_funct(10, \"ABC\")\nprint_funct(10)  Output:  10 ABC\n10 A  4. Variable-Length Arguments  argument, list, tuple, dictionary   Flexibility of providing any tuple.   def print_args(*args):\n    print args\n\nprint_args(1, 2, 3, 4, 5)\nprint_args('Hi')\nprint_args(100, 200, \"ABC\")  Output:  (1, 2, 3, 4, 5)\n('Hi')\n(100, 200, 'ABC')   Provide both the keys and values for a returned dictionary.   def print_args2(**args):\n    print args\n\nprint_args2(num = 100, num2 = 200, seq = \"ABC\")  Output:  {'num': 100, 'seq': 'ABC, 'num2': 200}  Convert a string into a tuple or vice-versa   struct  package.  In the format,  s  stands for string,  3s  stands for a three-character string.   import struct\n\n# pack() method; creates a string\nformat = '2s1s1s1s1s'\ngroup = struct.pack(format, '10', '2', '3', '4', '5')\nprint group\n\n# unpack() method; parses the string to a tuple\nformat = '1s2s1s1s'\nline = '12345'\ncol = struct.unpack(format, line)\nprint col\n\n# calcsize() returns the number of characters\n# in a given format string\nformat = '30s30s20s1s'\nprint struct.calcsize(format)  Output:  102345\n('1', '23', '4', '5')\n81   Then, convert the tuple to a list if needed.   Function to calculate distance between two coordinates  power   math  package.  pow(x, y)  replaces  x ** y .    distance  package; geometric calculations.  calc-dist() .     from math import sqrt\n\ndef calc_dist(p1, p2):\n    '''returns the pythagorian distance between two 3D points'''\n    dx = p1[0] - p2[0]\n    dy = p1[1] - p2[1]\n    dz = p1[2] - p2[2]\n    distsq = pow(dx, 2) + pow(dy, 2) + pow(dz, 2)\n    distance = sqrt(distsq)\n    return distance\n\nprint calc_dist([3.0, 3.0, 3.0], [9.0, 9.0, 9.0])  Output:  10.3923048454",
            "title": "Chapter 10, Divide a Program into Functions"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-11-managing-complexity-with-classes",
            "text": "Classes   Define a Class:  class Protein .  Add docstrings.  The constructor  __init__()  is a special function that defines what kinds of data your class should contain and enables the creation of instances. Add a docstring.  One class can have many instances.  lys = Protein('lysozyme')  is an instance of  class Protein .  Create a class function; a class function works like a method.   class Protein:\n    '''Class storing protein names'''\n\n    def __init__(self, name):\n        '''Sets the name of a protein'''\n        self.name = name\n\n    def write(self):\n        '''Writes protein name to the screen.'''\n        print 'I am ' + self.name\n\nlys = Protein('lysozyme')\nmyo = Protein('myoglobin')\n\nprint \"Docstrings:\"\nprint Protein.__doc__\nprint Protein.__init__.__doc__\nprint Protein.write.__doc__\n\nprint \"\"\n\nprint lys.name\nprint myo.name\n\nlys.write() # a class function works like a method\nmyo.write()  Output:  Docstrings:\nClass storing protein names\nSets the name of a protein\nWrites protein name to the screen.\n\nlysozyme\nmyoglobin\nI am lysozyme\nI am myoglobin  Printing a object created from a class   Printing an object from a class is not very informative.   class Pea:\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\nclass PeaStrain:\n\n    def __init__(self, peas):\n        self.peas = peas\n\nyellow = Pea('GG')\ngreen = Pea('gg')\nstrain = PeaStrain([yellow, green])\n\nprint Pea\nprint PeaStrain\nprint Pea.__init__\nprint PeaStrain.__init__\n\nprint yellow\nprint green\nprint strain  Output:  __main__.Pea\n__main__.PeaStrain\n<unbound method Pea.__init__>\n<unbound method PeaStrain.__init__>\n<__main__.Pea instance at 0x0000000001DC6748>\n<__main__.Pea instance at 0x0000000001DC6748>\n<__main__.Pea instance at 0x000000000216BE08>\n<__main__.PeaStrain instance at 0x000000000216BE48>   __repr__  fixes this problem. The  __repr__  method takes no parameters except self.   class Pea:\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\n    def __repr__(self):\n        return 'genotype: [%s]' % (self.genotype)\n\nclass PeaStrain:\n\n    def __init__(self, peas):\n        self.peas = peas\n\n    def __repr__(self):\n        return 'strain with %i peas' % (len(self.peas))\n\nyellow = Pea('GG')\ngreen = Pea('gg')\nstrain = PeaStrain([yellow, green])\n\nprint Pea\nprint PeaStrain\nprint Pea.__init__\nprint PeaStrain.__init__\n\nprint yellow\nprint repr(yellow)\nprint repr(green)\nprint repr(strain)  New output:  __main__.Pea\n__main__.PeaStrain\n<unbound method Pea.__init__>\n<unbound method PeaStrain.__init__>\ngenotype: [GG]\ngenotype: [GG]\ngenotype: [gg]\nstrain with 2 peas    No difference between  print yellow  and  print repr(yellow) .    Objects\u2019 predefined class attributes:   __doc__ : the docstring.  __dict__ : a list of attributes.  __name__ : the name of the object.  __bases__ : the object inherits from what object. For example, above, the PeaStrain class inherits from the Pea class. Classes (subclasses) can inherit from other classes \nand extend their functionality.  __module__ : the name of the module in which this class was defined.  __main__  means the object is in the current module.      A python script can be imported just like a package:   import Protein .  from Protein import write .  import math .  from math import sqrt .    Synonyms: packages, library, module, script, etc.   class Pea:\n    '''docstring 1'''\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\n    def __repr__(self):\n        return 'genotype: [%s]' % (self.genotype)\n\nyellow = Pea('GG')\n\nprint yellow\nprint Pea.__doc__\nprint Pea.__dict__\nprint Pea.__name__\nprint Pea.__bases__\nprint Pea.__module__\n\nprint \"\"\n\nclass Peaclone(Pea):\n    '''docstring 2'''\n\nblue = Peaclone('AA')\n\nprint blue\nprint Peaclone.__doc__\nprint Peaclone.__dict__\nprint Peaclone.__name__\nprint Peaclone.__bases__\nprint Peaclone.__module__  Output:  genotype: [GG]\ndocstring 1\n{'__module__': '__main__', '__doc__': 'docstring 1', '__init__': <function __init__ at 0x000000000229FC18>, '__repr__': <function __repr__ at 0x000000000229FC88>}\nPea\n()\n__main__\n\ngenotype: [AA]\ndocstring 2\n{'__module__': '__main__', '__doc__': 'docstring 2'}\nPeaclone\n(<class __main__.Pea at 0x0000000001D3C828>,)\n__main__   More attributes:  __del__ .  __getattr__ .  __setattr__ .  __delattr__ .",
            "title": "Chapter 11 Managing Complexity with Classes"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-12-debugging",
            "text": "bug   Kinds of errors:  Logical errors.  Syntax errors.  Runtime errors.     IDE (Eric, PyCharm, etc.) automate debugging.  1. Logical (semantic) errors   Results are wrong because the program does something different from what you had in mind.   2. Syntax errors   Wrong symbol, mispelling, wrong position in the code, etc..   def evaluate_data(data, lower = 100, upper = 300):\n    \"\"\"Analyze a two-column table. Counts data points in three bins.\"\"\"\n\n    smaller = 0\n    between = 0\n    bigger  = 0\n\n    for length in data:\n        if length < lower:\n            smaller = smaller + 1\n        elif lower < length < upper:\n            between = between + 1\n        elif length > upper:\n            bigger = 1\n    return smaller, between, bigger\n\ndef read_data(filename):\n    \"\"\"Reads neuron lengths from a text file.\"\"\"\n\n    primary, secondry = [], []\n\n    for line in open(filename):\n        category, length = line.split(\"\\t\")\n        length = float(length)\n        if category == \"Primary\"\n            primary.append(length)\n        elif category == \"Secondary\":\n            secondary.append(length)\n    return primary, secondary\n\ndef write_output(filename, count_pri, count_sec):\n    \"\"\"Writes counted values to a file.\"\"\"\n\n    output = open(filename,\"w\")\n    output.write(\"category      <100  100-300   >300\\n\")\n    output.write(\"Primary  :  %5i   %5i   %5i\\n\" % count_pri)\n    output.write(\"Secondary:  %5i   %5i   %5i\\n\" % count_sec)\n    output.close()\n\nprimary, secondary = read_data('neuron_data.xls')\ncount_pri = evaluate_data(primary)\ncount_sec = evaluate_data(secondary)\nwrite_output_file('results.txt' , count_pri,count_sec)  Bug 1  if category == \"Primary\"   Cause:  SyntaxError: invalid syntax .  Fix:   if category == \"Primary\":   Other common  SyntaxErrors :  EOL or End Of Line; an open quote somewhere without a matching closing quote.  TokenError ; an open parenthesis, but not a matching closing parenthesis.  etc.     Bug 2  write_output_file('results.txt' , count_pri,count_sec)   Cause:  NameError: name 'write_output_file' is not defined .  Fix:   file = open('results.txt' , 'w')\nfile.write(str(count_pri))\nfile.write('\\n')\nfile.write(str(count_sec))\nfile.close()  3. Runtime Error  IOError  primary, secondary = read_data('neuron_data.xls')   Cause:  IOError: [Errno21] No such file or directory: 'neuron_data.xls'  Fix: the file extention is .txt.  Other common bugs and causes:  Mispelled files, directory name.  Wrong website URL.  User without the permission or access.  The file is already opened.  Problem with the Internet connection.  Whitespace, uppercase, lowercase letters.  File in a different directory.  Expected date format.  etc.     NameError  primary, secondry = [], []\n...\n...\nelif category == \"Secondary\":   Cause:  NameError: 'secondary' is not defined . The \u2018name\u2019 was misspelled when called.  Fix: add the line  print dir()  before the errors occurs. It shows the list of variables that are known. In the above case, only  secondry  exits while  secondary  is called. Choose one.  Other common bugs and causes:  Unknown object name:  a name was not imported ( import * ).  a name was not initialized (as in  counter = 0  for  counter += 1 ).       IndexError   Cause and fix: when  print data[3]  looks into  data = [1, 2, 3] , the list index is out of range.   KeyError  spam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'}\nprint('The name of my pet zebra is ' + spam['zebra'])   Cause and fix: the key does not exist!   ImportError   Causes and fixes:  The imported module name is mispelled.  The imported module is located in a subdirectory without an  __init__.py  file.  Try adding import sys and print sys.path; you need to add the directory to the PYTHONPATH variable or to append it to the sys.path.  The imported module has a duplicate name (two functions with the same name; try working with classes to avoir that).     ValueError   Cause and fix: when an object is loaded with a wrong type to perform another operation; variable  range_a  should be a number for the loop  for a in range(range_a): , but a string is given instead.  Other common bugs and causes:  IndentationError: unexpected indent ,  IndentationError: unindent does not match any outer indentation level , and  IndentationError: expected an indented block .   TypeError   Cause and fix: an object does not support item assignment.   spam = 'I have a pet cat.'\nspam[13] = 'r'   Cause:  cannot convert implicitly an object.   numEggs = 12\nprint('I have ' + numEggs + ' eggs.')   Fix:   numEggs = 12\nprint('I have ' + str(numEggs) + ' eggs.')   Cause:  an object is misinterpreted (for another object).   spam = ['cat', 'dog', 'mouse']\nfor i in range(spam):\n    print(spam[i])   Fix:  for i in spam: .   AttributeError   Cause and fix: apply the right method.   spam = 'THIS IS IN LOWERCASE.'\nspam = spam.lowerr()  UnboundLocalError   Cause and fix: a variable is referenced before assignment.   Countermeasures to prevent errors   Break down the code in parts; print to a file using  python code.py > output.txt .  Compare the input and output (print the input data, print the output data, create control points).  Add lots of  print  statements within the code as control points,  Use descriptive and explicit object names ( sequence_file  is better than  s_file ).  Start function with verbs ( read_sequence_file  is better than  seq_file ).  Add comments.  Avoid  import * , but rather  from math import pi .  Follow PEP8 and PEP20!  pylint  and  flake8  packages.  IDE (Eric, PyCharm, Spyder, etc.) automate debugging and easily execute  pylint  and  flake8 .   A note on  raw_input()  and  input()  python2, python3, py2, py3   In Python 2,  raw_input()  takes exactly what the user typed and passes it back as a string.  input()  takes the  raw_input()  and performs an  eval()  on it as well.  input()  expects a syntactically correct python statement where  raw_input()  does not.  The  eval()  function run the code within itself:   >>> x = 1\n>>> eval('x + 1')\n2\n>>> eval('x')\n1   In Python 3,  raw_input()  is renamed to  input()  and the old  input()  is removed. If you want to use the old  input() , you can do  eval(input()) .   Countermeasures to prevent errors: the Python debugger or  pdb   pdb  package.   # on top of the code\nimport pdb\n\npdb.set_trace()   The code is executed line by line:  \u2018n\u2019 execute the next line.  \u2018s\u2019 execute the next line but does not descend into functions.  \u2018l\u2019 shows where in the code the program currently is.  \u2018c\u2019 continues execution normally.     Countermeasurea to prevent errors:  try, except  try:\n    a = float(raw_input(\"Insert a number:\"))\n    print a\nexcept ValueError:\n    print \"You haven't inserted a number. Please retry.\"\n    raise SystemExit   else  is optional and only executed if no exception was generated.   try:\n    filename = raw_input(\"Insert a filename:\")\n    in_file = open(filename)\nexcept IOError:\n    print \"The filename %s has not been found.\" % filename\n    raise SystemExit\nelse:\n    for line in in_file:\n        print line\n        in_file.close()   Usually, exceptions are typos and wrong entries:  SyntaxError .  IOError .  NameError .  ValueError .    Rarely will we see:  IndexError .  KeyError .  ImportError .  TypeError .  AttributeError .  UnbounLocalError .",
            "title": "Chapter 12 Debugging"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-13-using-external-modules-the-python-interface-to-r",
            "text": "RPy2  package; bridge Python with R.   The R code:  p = pi\nx = c(1, 2, 3, 4, 5, 6)\ny = seq(1, 10)\nm = matrix(y, nrow = 5)\nn = matrix(y, ncol = 5)\nf = read.table('RandomDistribution.tsv', sep = '\\t')\nf_matrix = matrix(f, ncol = 7)\nmean_first_col = mean(f_mean[0])  The Python code:  import rpy2.reobjects as robjects\n\nr = robjects.r\n\npi = r.pi\nx = r.c(1, 2, 3, 4, 5, 6)\ny = r.seq(1, 10)\nm = r.matrix(y, nrow = 5)\nn = r.matrix(y, ncol = 5)\nf = r(\"read.table('RandomDistribution.tsv', sep = '\\t')\")\nf_matrix = r.matrix(f, ncol = 7)\nmean_first_col = r.mean(f_mean[0])   Python is better suited to implement solutions by building GUIs or freezing the code.  Rpy2 is the best of both worlds:   R statistical analyses and data visualization.  Python computation power with SciPy/NumPy/Pandas.     Calculate a mean value from a table file  import rpy2.robjects as robjects\n\nr = robjects.r\ntable = r(\"read.table('RandomDistribution.tsv', sep = '\\t')\")\nmatrix = r.matrix(table, ncol = 7)\nmean_first_col = r.mean(matrix[0])\nprint mean_first_col  Draw a histogram  import rpy2.robjects as ro\nfrom rpy2.robjects.packages import importr\n\nr = ro.r\ntable = r(\"read.table('RandomDistribution.tsv',sep = '\\t')\")\ngrdevices = importr('grDevices')\ngrdevices.png(file = \"Plot.png\", width = 512, height = 512)\nr.plot(table[1], table[2], xlab = \"x\", ylab = \"y\")\ngrdevices.dev_off()\n\ngrdevices.png(file=\"Histogram.png\", width = 512, height = 512)\nr.hist(table[4], xlab = 'x', main = 'Distribution of values')\ngrdevices.dev_off()  Calculate a z-score and a p-value  import rpy2.robjects as ro\n\nr = ro.r\ntable = r(\"read.table('RandomDistribution.tsv',sep = '\\t')\")\nm = r.mean(table[2], trim = 0, na_rm = 'FALSE')\nsdev = r.sd(table[2], na_rm = 'FALSE')\nvalue = 0.01844\nzscore = (m[0] - value) / sdev[0]\nprint zscore\n\nx = r.abs(zscore)\npvalue = r.pnorm(-x[0])\nprint pvalue[0]  Create an interactive plot and histogram from data in a file  import rpy2.robjects as robjects\n\nr = robjects.r\ntable = r(\"read.table('RandomDistribution.tsv', sep = '\\t')\")\nr.plot(table[1], table[2], xlab = \"x\", ylab = \"y\")\nr.hist(table[4], xlab = 'x', main = 'Distribution of values')  Create an interactive plot  import rpy2.robjects as ro\n\nr = ro.r\nr.plot(r.pnorm(100), xlab = \"y\", ylab = \"y\")  Conduct a chi-square test on data from a text file  import rpy2.robjects as ro\n\nr = ro.r\ntable = r(\"read.table('Chi-square_input.txt', header = TRUE, sep = '\\t')\")\nprint r.names(table)\n\ncont_table = r.table(table[1], table[2])\nchitest = r['chisq.test']\nprint chitest(table[1], table[2])",
            "title": "Chapter 13, Using External Modules, The Python Interface to R"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-14-building-program-pipelines",
            "text": "os  package.  sys  package.   Programs can work together with Python   Create path and file variables.  Create command line.  Execute commands from the command line (as if you did it with a mouse and keyboard) with  os.system .   REF: Appendix D.  import os\n\noutput_dir = '/home/RNA-seq/tophat_dir/'\noutput_file = 'accepted_hits.txt'\n\ncommand_line = 'pgm -o %s%s' % (output_dir, output_file)\n\nos.system(command_line)  Command lines in Python   UNIX to Python:  UNIX  pwd ;  print os.getcwd() .  UNIX  ls ;  print os.listdir('.') .  UNIX  cd ;  os.chdir('../data/') .  UNIX  mkdir ;  os.mkdir() .  UNIX  rmdir ;  os.rmdir() .  and many more.     Pipelines   Pipeline are scripts connecting programs to each other (run two or more external programs from command lines).  A program that runs another program is a  wrapper .  Exchange filenames and data between programs.  sys.argv ; Python program sorted parameters.  import sys ; access or print them.   import sys\nimport os\n\nsys.path.append('/home/RNA-seq/')\n\nfrom pathvariables import tophat_dir, index_dir\n\nif os.path.exists(tophat_dir) and os.path.exists(index_dir):\n    os.system('tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt')\nelse:\n    print \"You have to create tophat and/or index directories before running your wrapper\"   One problem with pipelines is lagging.   The system call of the second program should occur when the execution of the first program has finished, especially if the second one uses as input the output of the first one.  Use subprocesses, such as  os.popen()  or  subprocess.call() , to wait for the command to complete and return a value corresponding to the program exit status (0 for success, 256 for failure)  A more robust trick is to insert an action and verify its success after a system call and before the subsequent system call.   import sys\nimport os\n\nfrom pathvariables import tophat_dir, index_dir, cufflinks_dir\n\nsys.path.append('/home/RNA-seq/')\nfrom pathvariables import tophat_dir, index_dir, cufflinks_dir\n\n# the tophat program crates an output file\nos.system('tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt')\n\n# here we don't know whether the tophat output file is comleted and available\n# we open and close a dummy file, so the operating system catches up\nlag_file = open('dummy.txt, 'w')\nlag_file.write('tophat completed')\nlag_file.close()\n\n# read the output file\nif os.path.exists('/home/RNA-seq/dummy.txt'):\n    os.system('cufflinks -o ' + cufflinks_dir + ' ' + tophat_dir + '/accepted_hits.txt')  Attributes   print dir() ; Visualize attributes.  Some attributes are module-specific, such as locatime, whereas others refer to modules in general:  __file__ ; return the path of the module.  __doc__ ; return the module documentation, if present.  __name__ ; return the name of the imported file without the .py suffix if the module is imported and the string  '__main__'  is executed.  Execute  <statements>  only if the module is run from the command line and not imported by means of an import statement:       if __name__ == '__main__':\n    <statements>  Working with files and directories   os.path  package.  os.path.split(filename) ; split a filename from the directory names.  os.path.exists(filename) ; verify if the file exists, return True or False.   Export the path   In Windows, add the path to the PATH environment variables.  In PowerShell:  $env:PYTHONPATH = \"$env:PYTHONPATH;.\"    In UNIX, enter in the bash:  export PYTHONPATH=.  or  add PYTHONPATH=. .  In a Python code, add to the beginning of the script:   import sys\n\nsys.path.append('.') # '/var/www/'   Or with  sys.path.append('pathmodules/') .   Read files from directories  import os\n\nfor filename is os.listdir('data/'):\n    os.system('<my_program>%s' % (filename))    os.remove('log.txt') ; remove files.    tempfile  package;  create temporary files.",
            "title": "Chapter 14, Building Program Pipelines"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-15-writing-good-programs",
            "text": "Priorities   Make it work.  Make it nice.  Make if fast.   Tips   Divide a programming project into smaller tasks.  What are the inputs?  What are the outputs?  What is between them?  Write smaller programs; split a program into functions and classes.  Analyze and run tests.  Adopt PEP.  Scaffold before writing a functional program:   def read_files(directory):\n    '''\n    Reads a...\n    '''\n    pass\n\ndef filter(sequences):\n    '''\n    Removes all...\n    '''\n    pass\n\n...\n\nif __name == '__main__':\n    INPUT_DIR = 'aaa/'\n    OUTPUT_FILE = 'filtered.txt'\n    seq = read_files(INPUT_DIR)\n    filter(seq)\n    ...  Adopt PEP   Variables in functions in lowercase.  Constants in modules in uppercase.  A function name starts with a verb.  After each function, two empty lines.  After each logical chunks of long functions, one empty line.  Comment.  Keep lines shorter than 80 characters long.  Each class, function, and variable has a docstring; docstrings can be read with  print object.__doc__ .   Enforce PEP   pylint  package.  pylint  is a Python source code analyzer which looks for programming errors, helps enforcing a coding standard and sniffs for some code smells.  Download  an install pylint.  Or install it with  pip .  Doc  Run  pylint python_file.py .    flake8  package.  flake8  is a modular source code checker (a  wrapper ).  It works with  pep8 ,  pyflakes ,  pycodestyle , and so on.     Version controls   Use version control programs (Mercurial, git, SVN).  Use repository (GitHub, Bitbucket) to control program versions.  GitHub  Bitbucket  SourceForce  Gitlab  and others.     Before releasing (to a repository)   Create a directory with a concise name containing all the project.  Set a version number (0.1 or 1.0).  Write a README.TXT file with the name of the program, the author, contacts, numbers, emails, a version number, the program purpose in 50-100 words, how to use the program, simple command-line examples, the license (\u201cAll rights reserved\u201d, MIT, etc.)  Create a zip file out of the directory including the README.TXT file in addition to the unzipped directory.  Release the project on a repository (for example, with git, push the project to the repository).   Releasing a distribution   Release a distribution to a repository for others to download and install.    Freezing a program   Non-programmer would rather want an execuble program they can unzip and run.  Compile the code or freeze it!  cx_freeze  is a set of utilities that create standalone executables from python scripts for any platform or OS. \n    i. There are alternatives to \u2018cx_freeze\u2019 such as  bbfreeze .  pyinstaller  is a simpler alternative (it is not as flexible as  cx_freeze  but it can create single files).  distutils  is a Python package that provides support for building and installing additional modules (libraries or packages) into a Python installation. The new modules may be either 100%-pure Python, written in C, or coded in both Python and C.  distutils  autogenerates an install script. \n    i. Such distribution needs a  setup.py  file with the group of subdirectories and program files. \n    i.  py2exe  is an extension to the  distutils  package to create executable files on Windows. \n    i.  py2app  is an extension to the  distutils  packages to create executable files on OS X.  nuitka  is a Python compiler, compatible with CPython. \n    i. CPython is a source code interpreter with an interface with several languages, including C, in which one must explicitly write bindings in a language other than Python.  pypy  is an alternative to  nuitka .  Cython is a compiled language that generates CPython extension modules.  Jython does the same, but in Java.     Continuous improvement   A good program is never finished:  Create a baseline release.  Update and release new versions. Tell the users what is new.  Listen to users, improve on it.  Go on programming.     Software development   The Agile Manifesto.  Methodologies: Scrum, eXtreme Programming, etc.",
            "title": "Chapter 15, Writing Good Programs"
        },
        {
            "location": "/Managing Your Biological Data with Python/#part-4-data-visualization",
            "text": "",
            "title": "Part 4, Data Visualization"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-16-creating-scientific-diagrams",
            "text": "matplotlib  package.  Pillow  or  PIL  package.  Tip: install the entire SciPy Stack: (Python (2.x >= 2.6 or 3.x >= 3.2), NumPy (>= 1.6), SciPy library (>= 0.10), Matplotlib (>= 1.1) with dateutil and pytz, IPython (>= 0.13) with pyzmq and tornado, pandas (>= 0.8), Sympy (>= 0.7), nose (>= 1.1).  Matplotlib  depends on  Pillow  for reading and saving JPEG, BMP, and TIFF image files.  Matplotlib  requires MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are required for the animation module. Add  nose ,  mock , and Inkscape.   Draw a simple line plot   Provide  (x, y)  points.  figure() ; main function is  plot() .  savefig() ; save the plot in a file.  show() ; show the plot in a window.   from pylab import figure, plot, savefig\n\nxdata = [1, 2, 3, 4]\nydata = [1.25, 2.5, 5.0, 10.0]\n\nfigure()\nplot(xdata, ydata)\n\nsavefig('figure1.png')  Result:   Plot a sine function   Generate  (x, y)  points; first the  x ; then generate the  y  with the  x .  plot()  with a line type  'kd'  and  linewidth = 1 .   from pylab import figure, plot, text, axis, savefig\nimport math\n\nfigure()\n\nxdata = [0.1 * i for i in range(100)]\nydata = [math.sin(j) for j in xdata]\n\nplot(xdata, ydata, 'kd', linewidth = 1)\ntext(4.8, 0, \"$y = sin(x)$\", horizontalalignment = 'center', fontsize = 20)\naxis([0, 3 * math.pi, -1.2, 1.2])\n\nsavefig('sinfunc.png')  Result:   Draw a histogram   Provide the  (x, y)  points in lists, and the number of bins.  hist()  needs  data  points and  n_bins .  alpha  stands for the graph color transparency.  Add a title, labels, axes, and gridlines.   from pylab import figure, title, xlabel, ylabel, hist, axis, grid, savefig\n\ndata = [1, 1, 9, 1, 3, 5, 8, 2, 1, 5, 11, 8, 3, 4, 2, 5]\nn_bins = 5\n\nfigure()\nnum, bins, patches = hist(data, n_bins, normed = 1.0, histtype = 'bar', facecolor = 'green', alpha = 0.75)\n\ntitle('Histogram')\nxlabel('value')\nylabel('frequency')\naxis()\ngrid(True)\n\nsavefig('histogram.png')  Result:   Draw a bar plot   count : two series,  x1  and  x2  with each four categories,  nucleotides .   Add a title, labels, axes and ticks to the axes, and a legend.  xticks(x1, nucleotides) ,  where the first element is the list of  x  points and the second element is the label variable.  legend()  takes the labels of all data sets that are plotted.  axis()  is set with a list [from left to right, bottom,  and top].   from pylab import figure, title, xlabel, ylabel, xticks, bar, legend, axis, savefig\n\nnucleotides = [\"A\", \"G\", \"C\", \"U\"]\n\ncounts = [\n    [606, 1024, 759, 398],\n    [762, 912, 639, 591],\n    ]\n\nfigure()\ntitle('RNA nucleotides in the ribosome')\nxlabel('RNA')\nylabel('base count')\n\nx1 = [2.0, 4.0, 6.0, 8.0]\nx2 = [x - 0.5 for x in x1]\n\nxticks(x1, nucleotides)\n\nbar(x1, counts[1], width = 0.5, color = \"#cccccc\", label = \"E.coli 23S\")\nbar(x2, counts[0], width = 0.5, color = \"#808080\", label = \"T.thermophilus 23S\")\n\nlegend()\naxis([1.0, 9.0, 0, 1200])\n\nsavefig('barplot.png')  Result:   Add error bars to a scatterplot or a bar chart   errorbar() .  bar() .   from pylab import figure, errorbar, bar, savefig\n\nfigure()\n\n# scatterplot with error bars\nx1 = [0.1, 0.3, 0.5, 0.6, 0.7]\ny1 = [1, 5, 5, 10, 20]\nerr1 = [3, 3, 3, 10, 12]\nerrorbar(x1, y1, err1 , fmt = 'ro')\n\n# barplot with error bars\nx2 = [1.1, 1.2, 1.3, 1.4, 1.5]\ny2 = [10, 15, 10, 15, 17]\nerr2 = (2, 3, 4, 1, 2)\nwidth = 0.05\nbar(x2, y2, width, color = 'r', yerr = err2, ecolor = \"black\")\n\nsavefig('errorbars.png')  Result:   Draw a pie chart with protruding slices  from pylab import figure, title, pie, savefig\n\nnucleotides = 'G', 'C', 'A', 'U'\ncount = [1024, 759, 606, 398]\nexplode = [0.0, 0.0, 0.05, 0.05]\n\ncolors = [\"#f0f0f0\", \"#dddddd\", \"#bbbbbb\", \"#999999\"]\n\ndef get_percent(value):\n    '''Formats float values in pie slices to percent.'''\n    return \"%4.1f%%\" % (value)\n\nfigure(1)\ntitle('nucleotides in 23S RNA from T.thermophilus')\n\npie(count, explode = explode, labels = nucleotides, shadow = True,\n    colors = colors, autopct = get_percent)\n\nsavefig('piechart.png', dpi = 150)  Result:    It is possible to use math symbols, subscripts, and superscripts in the strings:  xlabel('protein concentration [mM]') .  xlabel('protein concentration [$\\muM$]') .    It is possible to use placeholder for variables such as:  \"4.1f%%\" % (variable) .  \"2i%\" % (variable) .  etc.   The  %%  stands for percentage.    Change the image file resolution (dpi = 100 or 150 or 300 or 600) as in  savefig('chart.png', dpi=150) .  Colors are based on the PIL library.  PIL has 140 colors (X11 color names) such as:  'red' ,  'lightred' ,  'magenta' , etc.  in RGB, red is  (255, 0, 0) .  white is  (255, 255, 255)  or  '#ffffff' .  \u2018black\u2019 is  (0, 0, 0)  or  '#000000' .  etc.    The  X11 color names .",
            "title": "Chapter 16, Creating Scientific Diagrams"
        },
        {
            "location": "/Managing Your Biological Data with Python/#chapter-18-manipulating-images",
            "text": "Pillow  or  PIL  package.   Paste a small image into a big one  from PIL import Image\n\nimage = Image.open('color.png', 'r')\nlabel = Image.open('label.png', 'r') # small legend\nimage.paste(label, (40, 460))\n\nimage.save('combined.png')  Result:   Resizes a big image to a small one  from PIL import Image\n\nimage = Image.open('big.png')\nsmall = image.resize((100, 100))\n\nsmall.save('small.png')  Result:   Converts a color to a black/white image  from PIL import Image\n\nimage = Image.open('color.png', 'r')\nbw_image = Image.new('LA', image.size, (255, 255))\nbw_image.paste(image, (0, 0))\n\nbw_image.save('black_white.png')  Result:   Diminishes the size of all .png files by half  from PIL import Image\nimport os\n\nfor filename in os.listdir('.'):\n    if filename.endswith('.png'):\n        im = Image.open(filename)\n        x = im.size[0] / 2\n        y = im.size[1] / 2\n        small = im.resize((x, y))\n        small.save('small_'+filename)  For  os.listdir('.') , consult  Chapter 14, Building Program Pipelines, Command lines in Python .  Draw an image of a plasmid   Use constant variable:  PLASMID_LENGTH = 4361  is the total number of base pairs in the entire plastmid,  SIZE = (500, 500)  is the size of the entire image,  CENTER = (250, 250)  is the center point of the plasmid circle, the center of the image.  Create an image:  pBR322 = Image.new('RGB', SIZE, 'white') .  'RGB'  color scheme,  SIZE = (x, y)  size in pixels,  'white'  set the background color.  Draw object  pBR322 :  DRAW = ImageDraw.Draw(pBR322) .  The image object is now in object  DRAW .  Finally, save the object:  pBR322.save('plasmid_pBR322.png') .   from PIL import Image, ImageDraw\nimport math\n\nPLASMID_LENGTH = 4361\nSIZE = (500, 500)\nCENTER = (250, 250)\n\npBR322 = Image.new('RGB', SIZE, 'white')\nDRAW = ImageDraw.Draw(pBR322)\n\ndef get_angle(bp, length=PLASMID_LENGTH):\n    \"\"\"Converts base position into an angle.\"\"\"\n    return bp * 360 / length\n\ndef coord(angle, center, radius):\n    \"\"\"Return (x, y) coordinates of a point in a circle.\"\"\"\n    rad = math.radians(90 - angle)\n    x = int(center[0] + math.sin(rad) * radius)\n    y = int(center[1] + math.cos(rad) * radius)\n    return x, y\n\ndef draw_arrow_tip(start, direction, color):\n    \"\"\"Draws a triangle at the given start angle.\"\"\"\n    p1 = coord(start + direction, CENTER, 185)\n    p2 = coord(start, CENTER, 160)\n    p3 = coord(start, CENTER, 210)\n    DRAW.polygon((p1, p2, p3), fill = color)\n\n\nTET_START, TET_END = get_angle(88), get_angle(1276)\nAMP_START, AMP_END = get_angle(3293), get_angle(4153)\nORI_START, ORI_END = get_angle(2519), get_angle(3133)\n\n# drawing the plasmid\nBOX = (50, 50, 450, 450)\nDRAW.pieslice(BOX, 0, 360, fill = 'gray')\nDRAW.pieslice(BOX, TET_START, TET_END, fill = 'blue')\nDRAW.pieslice(BOX, AMP_START, AMP_END, fill = 'orange')\nDRAW.pieslice(BOX, ORI_START, ORI_END, fill = 'darkmagenta')\nDRAW.pieslice((80, 80, 420, 420), 0, 360, fill = 'white')\n\ndraw_arrow_tip(TET_END, 10, 'blue')\ndraw_arrow_tip(AMP_START, -10, 'orange')\ndraw_arrow_tip(ORI_START, -10, 'darkmagenta')\n\npBR322.save('plasmid_pBR322.png')  Result:   Drawings   Image extensions:  BMP; simple table of pixels.  PNG; preserves the color of every single pixel; can be partially transparent.  GIF; can be animated; similar to PNG.  JPG; compressed format, blurred.  TIF; bigger and more precise than PNG.    image = Image.open('color.png', 'r') ; read the object.  Write points:  point = (100, 100) ; with tuples (x, y); x pixels from the left border, y pixels from the top of the image.    Write rectangles  BOX = (100, 100, 150, 150) ; with tuple (x, y, x\u2019, y\u2019);  BOX  becomes a constant.  DRAW.rectangle(BOX, fill = 'lightblue', outline = 'black')    Draw circles inside \u2018guidelines\u2019 or a rectangle:  DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = 'grey') .  DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = (0, 0, 0)) .  DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = '#ffffff') .  BOX = (50, 50, 450, 450)  DRAW.pieslice(BOX, 0, 360, fill = 'grey', outline = 'black')  DRAW.pieslice(BOX, 7, 106, fill = 'blue')      Draw an arc:  DRAW.arc(BOX, 0, 360, fill = 'black')    Draw a polygon:  DRAW.polygon((point1, point2, point3) fill = 'lightblue', outline = 'blue')    Draw a line:  ECOR1 = angle(4359)  p1 = coord(ECOR1, CENTER, 160)  p1 = coord(ECOR1, CENTER, 210)  DRAW.line((p1, p2), fill = 'black', width = 3)    Rotate the image:  pBR322 = pBR322.rotate(45)    Add text:  DRAW.text((370, 240), \"EcoR1\", fill = \"black\")     Draw an image of a plasmid and label it  from PIL import Image, ImageDraw\nimport math\n\nPLASMID_LENGTH = 4361\nSIZE = (500, 500)\nCENTER = (250, 250)\n\npBR322 = Image.new('RGB', SIZE, 'white')\nDRAW = ImageDraw.Draw(pBR322)\n\ndef get_angle(bp, length=PLASMID_LENGTH):\n    \"\"\"Converts base position into an angle.\"\"\"\n    return bp * 360 / length\n\ndef coord(angle, center, radius):\n    \"\"\"Return (x, y) coordinates of a point in a circle.\"\"\"\n    rad = math.radians(90 - angle)\n    x = int(center[0] + math.sin(rad) * radius)\n    y = int(center[1] + math.cos(rad) * radius)\n    return x, y\n\ndef draw_arrow_tip(start, direction, color):\n    \"\"\"Draws a triangle at the given start angle.\"\"\"\n    p1 = coord(start + direction, CENTER, 185)\n    p2 = coord(start, CENTER, 160)\n    p3 = coord(start, CENTER, 210)\n    DRAW.polygon((p1, p2, p3), fill = color)\n\n\nTET_START, TET_END = get_angle(88), get_angle(1276)\nAMP_START, AMP_END = get_angle(3293), get_angle(4153)\nORI_START, ORI_END = get_angle(2519), get_angle(3133)\n\n# drawing the plasmid\nBOX = (50, 50, 450, 450)\nDRAW.pieslice(BOX, 0, 360, fill = 'gray')\nDRAW.pieslice(BOX, TET_START, TET_END, fill = 'blue')\nDRAW.pieslice(BOX, AMP_START, AMP_END, fill = 'orange')\nDRAW.pieslice(BOX, ORI_START, ORI_END, fill = 'darkmagenta')\nDRAW.pieslice((80, 80, 420, 420), 0, 360, fill = 'white')\n\ndraw_arrow_tip(TET_END, 10, 'blue')\ndraw_arrow_tip(AMP_START, -10, 'orange')\ndraw_arrow_tip(ORI_START, -10, 'darkmagenta')\n\nDRAW.text((150, 130), \"ori\", fill = (0, 0, 0))\nDRAW.text((340, 130), \"amp\", fill =(0, 0, 0))\nDRAW.text((300, 380), \"tet\", fill = (0, 0, 0))\n\npBR322.save('plasmid_pBR322.png')  Result:",
            "title": "Chapter 18, Manipulating Images"
        },
        {
            "location": "/Managing Your Biological Data with Python/#part-6-cookbook",
            "text": "",
            "title": "Part 6, Cookbook"
        },
        {
            "location": "/Managing Your Biological Data with Python/#recipe-2-reversing-and-randomizing-a-sequence",
            "text": "sort, reverse, random, probability, list, loop  seq = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nprint(seq)\n\nseq_list = list(seq)\nseq_list.reverse()\nrev_seq = ''.join(seq_list)\nprint(rev_seq)\n\nprint(\"=\" * 25)\n\n# reverse a sequence, using a loop\n# rev_seq = ''\nrev_seq = ''\nfor s in reversed(seq):\n    rev_seq = rev_seq + s\nprint(rev_seq)\n\nprint(\"=\" * 25)\n\n# reverse a sequence, using seq[start:end:step]\nrev_seq = seq[:-1]\nprint(rev_seq)\n\nprint(\"=\" * 25)\n\n# mixing a sequence\nimport random\n\nran_seq = random.sample(seq, len(seq))\nprint(ran_seq)\nran_seq = ''.join(random.sample(seq, len(seq)))\nprint(ran_seq)\nran_seq = ''.join(random.sample(seq, len(seq)-10))\nprint(ran_seq)\n\nprint(\"=\" * 25)\n\n# mixing a sequence (using random again)\nran_seq = ''.join([random.choice(seq) \\\n for x in range(len(seq))])\nprint(ran_seq)\n\nprint(\"=\" * 25)\n\n# shuffle a sequence (using random again)\ndata = list(seq)\nrandom.shuffle(data)\nshuffled_seq = data\nprint(shuffled_seq)\n\nshuffled_seq = ''.join(data)\nprint(shuffled_seq)  Ouput:  ABCDEFGHIJKLMNOPQRSTUVWXYZ\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nABCDEFGHIJKLMNOPQRSTUVWXY\n=========================\n['F', 'J', 'I', 'L', 'O', 'R', 'U', 'C', 'A', 'V', 'Q', 'M', 'T', 'N', 'B', 'G', 'W', 'P', 'Y', 'H', 'D', 'S', 'Z', 'E', 'X', 'K']\nLKAZHTVFGQROUXIMYWESDPCBJN\nLXRDUVFHKGJZMIAB\n=========================\nRYYEYKWUGMYFYMUWWBOSZWSRMJ\n=========================\n['R', 'N', 'S', 'E', 'M', 'H', 'A', 'P', 'X', 'F', 'W', 'K', 'J', 'I', 'Y', 'T', 'Z', 'G', 'V', 'O', 'C', 'B', 'Q', 'D', 'L', 'U']\nRNSEMHAPXFWKJIYTZGVOCBQDLU",
            "title": "Recipe 2, Reversing and Randomizing a Sequence"
        },
        {
            "location": "/Managing Your Biological Data with Python/#recipe-3-creating-a-random-sequence-with-probabilities",
            "text": "random, list, generate, probability  import random\n\nnucleotides = list('ACGT')\ndna = ''\nwhile len(dna) < 100:\n    dna += random.choice(nucleotides) # choose amoung the list, fetch 1 item\nprint(dna)\n\nprint(\"=\" * 25)\n\nnucleotides = list('ACGT')\nprobs = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3} # sum of 1.0\nassert sum(probs.values()) == 1.0\n# or\n# if sum(probs.values()) != 1.0:\n#   raise Exception('Sum of probabilites is not 1.0!')\n\ndna = ''\nwhile len(dna) < 100:\n    nuc = random.choi",
            "title": "Recipe 3, Creating a Random Sequence with Probabilities"
        },
        {
            "location": "/Python for Education/",
            "text": "CONTENT\n\n\n2, Programming in Python\n\n\n2.5, Python Lists\n\n\n2.7, Input from the Keyboard\n\n\n2.11, Line joining\n\n\n2.14, More on Strings and Lists\n\n\nRecap from the Above (Snippets)\n\n\n2.15, Python Modules and Packages\n\n\n2.16, Files Input/Ouput\n\n\n2.17, Formatted Printing\n\n\n2.18, Exception Handling\n\n\n2.20, Writing GUI Programs\n\n\n2.21, Object-Oriented Programming in Python\n\n\n\n\n\n\n3, Arrays and Matrices\n\n\n3.1, The NumPy Module\n\n\n3.2, Vectorized Functions\n\n\n\n\n\n\n4, Data visualization\n\n\n4.1, The Matplotlib Module\n\n\n\n\n\n\n5, Type Setting Using \\LaTeX\n\n\n6, Numerical Methods\n\n\n6.5, Finding Roots of an Equation\n\n\n6.6, System of Linear Equations\n\n\n6.7, Least Squares Fitting\n\n\n6.8, Interpolation\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and code snippets. IPython 2 & 3. From Inter University Accelerator Centre, 2010. Creative Commons.\n\n\n\n\n2, Programming in Python\n\u00b6\n\n\n2.5, Python Lists\n\u00b6\n\n\na = 'hello world'\n\n# extract, subset\nprint(a[3:5])\nprint(a[6:])\nprint(a[:5])\n\n\n\n\nlo\nworld\nhello\n\n\n\na = [1, 2]\n\nprint(a)\nprint(a * 2) # double print\nprint(a + [1, 1]) # concatenate\n\n\n\n\n[1, 2]\n[1, 2, 1, 2]\n[1, 2, 1, 1]\n\n\n\nb = [1,2,a]\nprint(b) # embed\n\nb[2] = 3\nprint(b) # change a mutable from the above list\n\n# Output:\n\n\n\n\n[1, 2, [1, 2]]\n[1, 2, 3]\n\n\n\n2.7, Input from the Keyboard\n\u00b6\n\n\n\n\ninput\n for numeric data.\n\n\nraw_input\n for string data.\n\n\n\n\nx = input('Enter an integer (x): ')\ny = input('Enter another one (y): ')\n\nprint('The sum is = ', x + y) # print as numeric, input\n\n\n\n\nEnter an integer (x): 1\nEnter another one (y): 2\n('The sum is = ', 3)\n\n\n\nt = raw_input('Enter an integer: ')\nu = raw_input('Enter another one: ')\n\nprint('The sum is = ', t + u) # print as string, raw input\n\n\n\n\nEnter an integer: 2\nEnter another one: 3\n('The sum is = ', '23')\n\n\n\nv = input('Enter an integer: ')\nw = input('Enter another one: ')\n\nprint('The sum is = ', str(v) + str(w)) # print as string, input changes into a string\n\n\n\n\nEnter an integer: 1\nEnter another one: 1\n('The sum is = ', '11')\n\n\n\ny1 = raw_input('Enter an integer: ')\ny2 = raw_input('Enter another one: ')\n\nprint( 'The sum is = ', int(y1) + int(y2)) # print as numeric, raw input changed into integer\n\n\n\n\nEnter an integer: 2\nEnter another one: 2\n('The sum is = ', 4)\n\n\n\ny3 = raw_input('Enter an integer: ')\ny4 = raw_input('Enter another one: ')\n\nprint( 'The sum is = ', float(y3) + float(y4)) # print as numeric, raw input changed into float\n\n\n\n\nEnter an integer: 1\nEnter another one: 2\n('The sum is = ', 3.0)\n\n\n\n2.11, Line joining\n\u00b6\n\n\nyear = input('year: ')\nmonth = input('month: ')\nif 1900 < year < 2100 and 1 <= month <= 12 :\n    print('I am so long and will not fit in a single line')\n\n\n\n\nyear: 2016\nmonth: 10\nI am so long and will not fit in a single line\n\n\n\n# simplify the code, shorten the line\nyear = input('year: ')\nmonth = input('month: ')\nif 1900 < year < 2100\\\n and 1 <= month <= 12 :\n    print('I am so long and will\\\n not fit in a single line')\n\n\n\n\nyear: 2016\nmonth: 10\nI am so long and will not fit in a single line\n\n\n\n# object, variable type\nprint(type(4.5))\n\n\n\n\n<type 'float'>\n\n\n\n2.14, More on Strings and Lists\n\u00b6\n\n\ns = 'hello world'\n\n# string length\nprint(len(s))\nprint(s.upper())\n\n\n\n\n11\nHELLO WORLD\n\n\n\n# help with\nhelp(str)\n\n\n\n\nHelp on class str in module __builtin__:\n\nclass str(basestring)\n |  str(object='') -> string\n |  \n |  Return a nice string representation of the object.\n |  If the argument is a string, the return value is the same object.\n |  \n |  Method resolution order:\n |      str\n |      basestring\n |      object\n |  \n |  Methods defined here:\n |  \n |  __add__(...)\n |      x.__add__(y) <==> x+y\n |  \n |  __contains__(...)\n |      x.__contains__(y) <==> y in x\n |  \n |  __eq__(...)\n |      x.__eq__(y) <==> x==y\n |  \n |  __format__(...)\n |      S.__format__(format_spec) -> string\n |      \n |      Return a formatted version of S as described by format_spec.\n |  \n |  __ge__(...)\n |      x.__ge__(y) <==> x>=y\n |  \n |  __getattribute__(...)\n |      x.__getattribute__('name') <==> x.name\n |  \n |  __getitem__(...)\n |      x.__getitem__(y) <==> x[y]\n |  \n |  __getnewargs__(...)\n |  \n |  __getslice__(...)\n |      x.__getslice__(i, j) <==> x[i:j]\n |      \n |      Use of negative indices is not supported.\n |  \n |  __gt__(...)\n |      x.__gt__(y) <==> x>y\n |  \n |  __hash__(...)\n |      x.__hash__() <==> hash(x)\n |  \n |  __le__(...)\n |      x.__le__(y) <==> x<=y\n |  \n |  __len__(...)\n |      x.__len__() <==> len(x)\n |  \n |  __lt__(...)\n |      x.__lt__(y) <==> x<y\n |  \n |  __mod__(...)\n |      x.__mod__(y) <==> x%y\n |  \n |  __mul__(...)\n |      x.__mul__(n) <==> x*n\n |  \n |  __ne__(...)\n |      x.__ne__(y) <==> x!=y\n |  \n |  __repr__(...)\n |      x.__repr__() <==> repr(x)\n |  \n |  __rmod__(...)\n |      x.__rmod__(y) <==> y%x\n |  \n |  __rmul__(...)\n |      x.__rmul__(n) <==> n*x\n |  \n |  __sizeof__(...)\n |      S.__sizeof__() -> size of S in memory, in bytes\n |  \n |  __str__(...)\n |      x.__str__() <==> str(x)\n |  \n |  capitalize(...)\n |      S.capitalize() -> string\n |      \n |      Return a copy of the string S with only its first character\n |      capitalized.\n |  \n |  center(...)\n |      S.center(width[, fillchar]) -> string\n |      \n |      Return S centered in a string of length width. Padding is\n |      done using the specified fill character (default is a space)\n |  \n |  count(...)\n |      S.count(sub[, start[, end]]) -> int\n |      \n |      Return the number of non-overlapping occurrences of substring sub in\n |      string S[start:end].  Optional arguments start and end are interpreted\n |      as in slice notation.\n |  \n |  decode(...)\n |      S.decode([encoding[,errors]]) -> object\n |      \n |      Decodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\n |      as well as any other name registered with codecs.register_error that is\n |      able to handle UnicodeDecodeErrors.\n |  \n |  encode(...)\n |      S.encode([encoding[,errors]]) -> object\n |      \n |      Encodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n |      'xmlcharrefreplace' as well as any other name registered with\n |      codecs.register_error that is able to handle UnicodeEncodeErrors.\n |  \n |  endswith(...)\n |      S.endswith(suffix[, start[, end]]) -> bool\n |      \n |      Return True if S ends with the specified suffix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      suffix can also be a tuple of strings to try.\n |  \n |  expandtabs(...)\n |      S.expandtabs([tabsize]) -> string\n |      \n |      Return a copy of S where all tab characters are expanded using spaces.\n |      If tabsize is not given, a tab size of 8 characters is assumed.\n |  \n |  find(...)\n |      S.find(sub [,start [,end]]) -> int\n |      \n |      Return the lowest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  format(...)\n |      S.format(*args, **kwargs) -> string\n |      \n |      Return a formatted version of S, using substitutions from args and kwargs.\n |      The substitutions are identified by braces ('{' and '}').\n |  \n |  index(...)\n |      S.index(sub [,start [,end]]) -> int\n |      \n |      Like S.find() but raise ValueError when the substring is not found.\n |  \n |  isalnum(...)\n |      S.isalnum() -> bool\n |      \n |      Return True if all characters in S are alphanumeric\n |      and there is at least one character in S, False otherwise.\n |  \n |  isalpha(...)\n |      S.isalpha() -> bool\n |      \n |      Return True if all characters in S are alphabetic\n |      and there is at least one character in S, False otherwise.\n |  \n |  isdigit(...)\n |      S.isdigit() -> bool\n |      \n |      Return True if all characters in S are digits\n |      and there is at least one character in S, False otherwise.\n |  \n |  islower(...)\n |      S.islower() -> bool\n |      \n |      Return True if all cased characters in S are lowercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  isspace(...)\n |      S.isspace() -> bool\n |      \n |      Return True if all characters in S are whitespace\n |      and there is at least one character in S, False otherwise.\n |  \n |  istitle(...)\n |      S.istitle() -> bool\n |      \n |      Return True if S is a titlecased string and there is at least one\n |      character in S, i.e. uppercase characters may only follow uncased\n |      characters and lowercase characters only cased ones. Return False\n |      otherwise.\n |  \n |  isupper(...)\n |      S.isupper() -> bool\n |      \n |      Return True if all cased characters in S are uppercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  join(...)\n |      S.join(iterable) -> string\n |      \n |      Return a string which is the concatenation of the strings in the\n |      iterable.  The separator between elements is S.\n |  \n |  ljust(...)\n |      S.ljust(width[, fillchar]) -> string\n |      \n |      Return S left-justified in a string of length width. Padding is\n |      done using the specified fill character (default is a space).\n |  \n |  lower(...)\n |      S.lower() -> string\n |      \n |      Return a copy of the string S converted to lowercase.\n |  \n |  lstrip(...)\n |      S.lstrip([chars]) -> string or unicode\n |      \n |      Return a copy of the string S with leading whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  partition(...)\n |      S.partition(sep) -> (head, sep, tail)\n |      \n |      Search for the separator sep in S, and return the part before it,\n |      the separator itself, and the part after it.  If the separator is not\n |      found, return S and two empty strings.\n |  \n |  replace(...)\n |      S.replace(old, new[, count]) -> string\n |      \n |      Return a copy of string S with all occurrences of substring\n |      old replaced by new.  If the optional argument count is\n |      given, only the first count occurrences are replaced.\n |  \n |  rfind(...)\n |      S.rfind(sub [,start [,end]]) -> int\n |      \n |      Return the highest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  rindex(...)\n |      S.rindex(sub [,start [,end]]) -> int\n |      \n |      Like S.rfind() but raise ValueError when the substring is not found.\n |  \n |  rjust(...)\n |      S.rjust(width[, fillchar]) -> string\n |      \n |      Return S right-justified in a string of length width. Padding is\n |      done using the specified fill character (default is a space)\n |  \n |  rpartition(...)\n |      S.rpartition(sep) -> (head, sep, tail)\n |      \n |      Search for the separator sep in S, starting at the end of S, and return\n |      the part before it, the separator itself, and the part after it.  If the\n |      separator is not found, return two empty strings and S.\n |  \n |  rsplit(...)\n |      S.rsplit([sep [,maxsplit]]) -> list of strings\n |      \n |      Return a list of the words in the string S, using sep as the\n |      delimiter string, starting at the end of the string and working\n |      to the front.  If maxsplit is given, at most maxsplit splits are\n |      done. If sep is not specified or is None, any whitespace string\n |      is a separator.\n |  \n |  rstrip(...)\n |      S.rstrip([chars]) -> string or unicode\n |      \n |      Return a copy of the string S with trailing whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  split(...)\n |      S.split([sep [,maxsplit]]) -> list of strings\n |      \n |      Return a list of the words in the string S, using sep as the\n |      delimiter string.  If maxsplit is given, at most maxsplit\n |      splits are done. If sep is not specified or is None, any\n |      whitespace string is a separator and empty strings are removed\n |      from the result.\n |  \n |  splitlines(...)\n |      S.splitlines(keepends=False) -> list of strings\n |      \n |      Return a list of the lines in S, breaking at line boundaries.\n |      Line breaks are not included in the resulting list unless keepends\n |      is given and true.\n |  \n |  startswith(...)\n |      S.startswith(prefix[, start[, end]]) -> bool\n |      \n |      Return True if S starts with the specified prefix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      prefix can also be a tuple of strings to try.\n |  \n |  strip(...)\n |      S.strip([chars]) -> string or unicode\n |      \n |      Return a copy of the string S with leading and trailing\n |      whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  swapcase(...)\n |      S.swapcase() -> string\n |      \n |      Return a copy of the string S with uppercase characters\n |      converted to lowercase and vice versa.\n |  \n |  title(...)\n |      S.title() -> string\n |      \n |      Return a titlecased version of S, i.e. words start with uppercase\n |      characters, all remaining cased characters have lowercase.\n |  \n |  translate(...)\n |      S.translate(table [,deletechars]) -> string\n |      \n |      Return a copy of the string S, where all characters occurring\n |      in the optional argument deletechars are removed, and the\n |      remaining characters have been mapped through the given\n |      translation table, which must be a string of length 256 or None.\n |      If the table argument is None, no translation is applied and\n |      the operation simply removes the characters in deletechars.\n |  \n |  upper(...)\n |      S.upper() -> string\n |      \n |      Return a copy of the string S converted to uppercase.\n |  \n |  zfill(...)\n |      S.zfill(width) -> string\n |      \n |      Pad a numeric string S with zeros on the left, to fill a field\n |      of the specified width.  The string S is never truncated.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __new__ = <built-in method __new__ of type object>\n |      T.__new__(S, ...) -> a new object with type S, a subtype of T\n\n\n\ns = 'I am a long string'\n\n# split a string on space\nprint(s.split())\n\n\n\n\n['I', 'am', 'a', 'long', 'string']\n\n\n\na = 'abc.abc.abc'\n\n# split a string on dot\naa = a.split('.')\nprint(aa)\n\n\n\n\n['abc', 'abc', 'abc']\n\n\n\n# join the elements, join character\nmm = '+'.join(aa)\nprint(mm)\n\n\n\n\nabc+abc+abc\n\n\n\na = []\n\n# append to a list\na.append(3)\nprint(a)\n\na.append(4)\nprint(a)\n\n\n\n\n[3]\n[3, 4]\n\n\n\n# insert 2.5 as first element (at index = 0)\na.insert(0, 2.5)\n\n# print several items\nprint(a, a[0])\nprint(len(a))\n\n\n\n\n([2.5, 3, 4], 2.5)\n3\n\n\n\n# copy module\na = [1, 2, 3, 4]\n\nprint(a)\n\nb = a\nprint(a == b) # True\n\n\n\n\n[1, 2, 3, 4]\nTrue\n\n\n\n# insert at index = 0\nb[0] = 5\n\n\n\n\n# b is a live duplicate, not an independent copy\nprint(a is b)\nprint(a, b)\n\n\n\n\nTrue\n([5, 2, 3, 4], [5, 2, 3, 4])\n\n\n\nimport copy\n\nc = copy.copy(a)\n\n\n\n\n# c is an ind. copy\nprint(a is c)\nprint(a, c)\n\n\n\n\nFalse\n([5, 2, 3, 4], [5, 2, 3, 4])\n\n\n\n# replace at index = 1\nc[1] = 100\nprint(a, c)\n\n\n\n\n([5, 2, 3, 4], [5, 100, 3, 4])\n\n\n\nRecap from the Above (Snippets)\n\u00b6\n\n\ndicty = {'a': 'apple', 'b': 'berry', 'c': 'cherry'}\n\nfor keyy in dicty:\n    print('keys are: '), keyy\n    print('-' * 5)\n    print('values are: '), dicty[keyy]\n    print('-' * 10)    \n\n\n\n\nkeys are:  a\n-----\nvalues are:  apple\n----------\nkeys are:  c\n-----\nvalues are:  cherry\n----------\nkeys are:  b\n-----\nvalues are:  berry\n----------\n\n\n\nprint(type(0))\nprint(type(255))\nprint(type(-1))\nprint(type(-255))\nprint(type(-30000))\nprint(type(30000))\nprint(type(-3500000))\nprint(type(3500000))\nprint(type(-1.5))\nprint(type(1.345456734576345))\nprint(type('4'))\n\n\n\n\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'float'>\n<type 'float'>\n<type 'str'>\n\n\n\na1 = input('Enter: ')\n\na2 = a1\na3 = bytes(a1) # 0 - 255\na4 = int(a1) # -32768 - 32768\na5 = long(a1) # -2147483648 -\na6 = float(a1)\na9 = str(a1)\n\n\n\n\nEnter: 1\n\n\n\nlistnum = [0,1,2,3,4,5,6,7,8,9,10]\n\nfor i in listnum:\n    if i%2 == 0: # even\n        print(i),\n\n\n\n\n0 2 4 6 8 10\n\n\n\nfor i in range(0,10):\n    if i%2 == 0: # even\n        print(i),\n\n\n\n\n0 2 4 6 8\n\n\n\nfor i in range(0,100,3):\n    if i%2 == 0: # even\n        print(i),\n\n\n\n\n0 6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96\n\n\n\nlistnum = ['a','b']\nlisttext = []\n\nfor i in listnum:\n    if i == 'b': # even\n        listtext.append(i)\n\nprint listtext\n\n\n\n\n['b']\n\n\n\nlst = [3,5,7]\n\nlst.append(9)\nprint lst\n\nlst.append(lst[0])\nprint(lst)\n\n\n\n\n[3, 5, 7, 9]\n[3, 5, 7, 9, 3]\n\n\n\nlst = ['a','b','c']\n\nlst.append('d')\nprint(lst)\n\nlst.append(lst[0])\nprint(lst)\n\n\n\n\n['a', 'b', 'c', 'd']\n['a', 'b', 'c', 'd', 'a']\n\n\n\nelements = ('foo', 'bar', 'baz')\n\nfor elem in elements:\n    print(elem)\n\n\n\n\nfoo\nbar\nbaz\n\n\n\nfor count, elem in enumerate(elements):\n    print(count, elem)\n\n\n\n\n(0, 'foo')\n(1, 'bar')\n(2, 'baz')\n\n\n\nlistnum = [0,1,2,3,4,5,6,7,8,9,10]\n\nlistnum.pop() # last\nprint(listnum)\n\n\n\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlistnum.pop(0) # position 0\nprint(listnum)\n\n\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlistnum.pop(2) # position 2\nprint(listnum)\n\n\n\n\n[1, 2, 4, 5, 6, 7, 8, 9]\n\n\n\nlistnum.remove(8) # specific element\nprint(listnum)\n\n\n\n\n[1, 2, 4, 5, 6, 7, 9]\n\n\n\ndel(listnum[0])\nprint(listnum)\n\n\n\n\n[2, 4, 5, 6, 7, 9]\n\n\n\nword = 'original'\nword2 = word.upper()\nword3 = word.capitalize()\nfirst = word[0]\nallbutfirst = word[1:len(word)]\n\nprint(word)\nprint(word2)\nprint(word3)\nprint(first)\nprint(allbutfirst)\n\n\n\n\noriginal\nORIGINAL\nOriginal\no\nriginal\n\n\n\nlist1 = [1,2,3]\nlist2 = [4,5,6,7]\n\nlist3 = [list1,list2]\n\nresults = []\n\ndef joiny(listy):\n    for lst in listy:\n        for num in lst:\n            results.append(num)\n    return results\n\nprint(joiny(list3))\n\n\n\n\n[1, 2, 3, 4, 5, 6, 7]\n\n\n\n2.15, Python Modules and Packages\n\u00b6\n\n\nprint(sin(0.5))\n\n\n\n\n0.479425538604\n\n\n\n# rename, more efficient\nimport math as m\nprint(m.sin(0.5))\n\n\n\n\n0.479425538604\n\n\n\n# package.module.function()\nimport random\n\na = random.randint(1,5)\nprint(a)\n\nrandom.randint(1,10)\n\n\n\n\n3\n8\n\n\n\nimport random as rd\n\naa = rd.randint(1,5)\nprint(aa)\n\n\n\n\n5\n\n\n\n2.16, Files Input/Ouput\n\u00b6\n\n\n# create the file\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'w')\nf.write('This is a test file') # write in\nf.close()\n\n\n\n\n# read it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'r')\nprint(f.read())\nf.close()\n\n\n\n\nThis is a test file\n\n\n\n# read it again\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'r')\nprint(f.read(7)) # get first seven characters on the console\nprint(f.read()) # get the remaining ones\nf.close()\n\n\n\n\nThis is\n a test file\n\n\n\n# create it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'w')\nfor k in range(1,10): # 1, 2, 3 stop before 4\n    s = '%3d\\n' %(k) # no format 3d, new line\n    f.write(s) # write in\nf.close()\n\n\n\n\n# read it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r') # open\nprint(f.read())\nf.close()\n\n\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n\n\n\n# read it horizontally\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r') # open\nprint(f.read(),)\nf.close()\n\n\n\n\n('  1\\n  2\\n  3\\n  4\\n  5\\n  6\\n  7\\n  8\\n  9\\n',)\n\n\n\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if s == '': # Empty string means end of file\n        break # terminate the loop\n    m = int(s) # Convert to integer\n    print(m * 5),\nf.close()\n\n\n\n\n5 10 15 20 25 30 35 40 45\n\n\n\n# create it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'w')\nf.write('')\nf.close()\n\n\n\n\n# give an error if there is a blank line in the file\n# test it (without the if, there would be an error)\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if s == '': # empty string means end of file\n        break # terminate the loop\n    m = int(s) # convert to integer\n    print(m * 5)\nf.close()\n\n\n\n\n# alternatively\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if len(s) < 1: # string with no value\n        break # terminate the loop\n    m = int(s) # convert to integer\n    print(m * 5)\nf.close()\n\n\n\n\nStrings can easily be written to and read from a \u001cle. Numbers take a bit more e\u001bort, since the \nread()\n method only returns Strings, which will have to be converted in to a number explicitly. However, when you want to save and restore data types like lists, dictionaries, or class instances, things get a lot more complicated. Rather than have the users constantly writing and debugging code to save complicated data types, Python provides a standard module called \npickle\n.\n\n\nThe \npickle\n module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure. \u201cPickling\u201d is the process whereby a Python object hierarchy is converted into a byte stream, and \u201cunpickling\u201d is the inverse operation, whereby a byte stream is converted back into an object hierarchy. Pickling (and unpickling) is alternatively known as \u201cserialization\u201d, \u201cmarshalling,\u201d [1] or \u201cflattening\u201d, however, to avoid confusion, the terms used here are \u201cpickling\u201d and \u201cunpickling\u201d.\n\n\nimport pickle\n\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt', 'w')\npickle.dump(12.3, f) # write a float type\nf.close()\n\n\n\n\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt', 'r')\nx = pickle.load(f)\nprint(x, type(x)) # check the type of data read\nf.close()\n\n\n\n\n(12.3, <type 'float'>)\n\n\n\n2.17, Formatted Printing\n\u00b6\n\n\na = 2.0 / 3 # 2/3 will print zero because of integer\nprint(a)\n\nprint('a = %5.3f') %(a) # up to 3 decimal places\n\n\n\n\n0.666666666667\na = 0.667\n\n\n\n\n\n\n\n\n\nConversion\n\n\nConversion\n\n\nExample\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nd, i\n\n\nsigned Integer\n\n\n\u2018%6d\u2019%(12)\n\n\n\u2018 12\u2019\n\n\n\n\n\n\nf\n\n\nfoating point decimal\n\n\n\u2018%6.4f\u2019%(2.0/3)\n\n\n0.667\n\n\n\n\n\n\ne\n\n\nfloating point exponential\n\n\n\u2018%6.2e\u2019%(2.0/3)\n\n\n6.67e-01\n\n\n\n\n\n\nx\n\n\nhexadecimal\n\n\n\u2018%x\u2019%(16)\n\n\n10\n\n\n\n\n\n\no\n\n\noctal\n\n\n\u2018%o\u2019%(8)\n\n\n10\n\n\n\n\n\n\ns\n\n\nstring\n\n\n\u2018%s\u2019%(\u2018abcd\u2019)\n\n\nabcd\n\n\n\n\n\n\n0d\n\n\nmodi\u001ced\n\n\n\u2018d\u2019 \u2018%05d\u2019%(12)\n\n\n00012\n\n\n\n\n\n\n\n\na = 'justify as you like'\nprint('%30s') %(a) # right justified\n\n\n\n\n           justify as you like\n\n\n\nprint('%-30s') %(a) # minus sign for left justification\n\n\n\n\njustify as you like\n\n\n\nfor k in range(1,11): # A good looking table\n    print('5 x %2d = %2d') %(k, 5*k) # add 2 spaces before\n\n\n\n\n5 x  1 =  5\n5 x  2 = 10\n5 x  3 = 15\n5 x  4 = 20\n5 x  5 = 25\n5 x  6 = 30\n5 x  7 = 35\n5 x  8 = 40\n5 x  9 = 45\n5 x 10 = 50\n\n\n\n2.18, Exception Handling\n\u00b6\n\n\nx = input('Enter a number ')\n\ntry:\n    print(10.0 / x)\nexcept:\n    print('Division by zero not allowed')\n\n\n\n\nEnter a number 0\nDivision by zero not allowed\n\n\n\n2.20, Writing GUI Programs\n\u00b6\n\n\nTkinter\n\n\n\n\nAn introduction to tkinter\n\n\nTkinter\n\n\nTkinter\n\n\n\n\nThe GUI programs are event-driven like a macro. Create Widgets like a Button, Label, Canvas,  etc. The first step is to create a main graphics window by calling the function \nTk()\n.\n\n\n# Example tkmain.py\n\n# open an empty box with min, max, close buttons\nimport Tkinter as tk\n\nroot = tk.Tk()\nroot.mainloop()\n\n# it opens a windows!\n\n\n\n\n# Example tklabel.py\n\nroot = tk.Tk()\nw = tk.Label(root, text = \"Hello, world\")\n\nw.pack()\nroot.mainloop()\n\n# it opens a windows with the text in it\n\n\n\n\n# Example tkbutton.py\n\ndef hello():\n    print('hello world')\n\nw = tk.Tk() # Creates the main Graphics window\nb = tk.Button(w, text = 'Click Me', command = hello)\n\nb.pack()\nw.mainloop()\n\n# it opens a windows with a button; after clicking, it print the function\n\n\n\n\nhello world\n\n\n\n# Example tkcanvas.py\n\ndef draw(event):\n    c.create_rectangle(event.x, \\\n        event.y, event.x+5, event.y+5)\n\nw = tk.Tk()\nc = tk.Canvas(w, width = 300, height = 200)\n\nc.pack()\nc.bind(\"<Button-1>\", draw)\nw.mainloop()\n\n# it open a windows; you can left-click and add dots in it\n\n\n\n\n# Example tkcanvas2.py\n\nrecs = [] # list keeping track of the rectangles\n\ndef remove(event):\n    global recs\n    if len(recs) > 0:\n        c.delete(recs[0]) # delete from Canvas\n        recs.pop(0) # delete first item from list\n\ndef draw(event):\n    global recs\n    r = c.create_rectangle(event.x, \\\n        event.y, event.x + 5, event.y + 5)\n    recs.append(r)\n\nw = tk.Tk()\nc = tk.Canvas(w, width = 300, height = 200)\n\nc.pack()\nc.bind(\"<Button-1>\", draw)\nc.bind(\"<Button-3>\", remove)\nw.mainloop()\n\n# it open a windows; you can left-click and add dots in it; right-click and remove them\n\n\n\n\n2.21, Object-Oriented Programming in Python\n\u00b6\n\n\n# example point.py\n\nclass Point:\n    '''\n    This is documentation comment.\n    help(Point) will display this.\n    '''\n\n    def __init__(self, x = 0, y = 0):\n        self.xpos = x\n        self.ypos = y\n\n    def __str__(self): # overload print()\n        return 'Point at (%f,%f)' %(self.xpos, self.ypos)\n\n    def __add__(self, other): # overloads\n        xpos = self.xpos + other.xpos\n        ypos = self.ypos + other.ypos\n        return Point(xpos, ypos)\n\n    def __sub__(self, other): # overloads\n        import math\n        dx = self.xpos - other.xpos\n        dy = self.ypos - other.ypos\n        return math.sqrt(dx ** 2 + dy ** 2)\n\n    def dist(self):\n        import math\n        return math.sqrt(self.xpos ** 2 + self.ypos ** 2)\n\n\n\n\n# example point1.py\n\n# import Point\n# if point.py is in the same directory and script point1.py is independent from point.py\n\norigin = Point() # instance\nprint(origin)\n\np1 = Point(4, 4) # instance\np2 = Point(8, 7)\n\nprint(p1)\n\n\n\n\nPoint at (0.000000,0.000000)\nPoint at (4.000000,4.000000)\n\n\n\nprint(p2) # __str__\n\n\n\n\nPoint at (8.000000,7.000000)\n\n\n\nprint(p1 + p2) # __add__, __str__, (4 + 4, 7 + 4)\n\n\n\n\nPoint at (12.000000,11.000000)\n\n\n\nprint(p1 - p2) # __sub__, __str__, ((4 - 8) ** 2, (3 - 7) ** 2)\n\n\n\n\n5.0\n\n\n\nprint(p1.dist()) # # __dist__, __str__, sqrt((4) ** 2 + (4) ** 2)\n\n\n\n\n5.65685424949\n\n\n\n# example cpoint.py\n\nclass colPoint(Point): # colPoint inherits Point\n    '''\n    This is documentation comment.\n    help(colPoint) will display this.\n    '''\n\n    color = 'black'\n\n    def __init__(self, x = 0, y = 0, col = 'black'):\n        Point.__init__(self, x, y)\n        self.color = col\n\n    def __str__(self):\n        return '%s colored Point at (%f,%f)' % \\\n            (self.color, self.xpos, self.ypos)\n\n\n\n\n# example point2.py\n\n# import cpoint\n# see above for the explanation\n\np1 = Point(5, 5)\nrp1 = colPoint(2, 2, 'red')\n\n\n\n\nprint(p1)\n\n\n\n\nPoint at (5.000000,5.000000)\n\n\n\nprint(rp1)\n\n\n\n\nred colored Point at (2.000000,2.000000)\n\n\n\nprint(rp1 + p1)\n\n\n\n\nPoint at (7.000000,7.000000)\n\n\n\nprint(rp1.dist())\n\n\n\n\n2.82842712475\n\n\n\n3, Arrays and Matrices\n\u00b6\n\n\nLet\u2019s switch to Python 3 for the remaining of the document.\n\n\n3.1, The NumPy Module\n\u00b6\n\n\nInstall (check) the Scipy Stack before.\n\n\n\n\nnumpy\n\n\nscipy\n\n\nmatplotlib\n\n\npandas\n\n\nsympy\n\n\nnose (testing)\n\n\n\n\nWith \npip\n.\n\n\nNote\n\n\nThe code below in Python 3 on Jupyter Notebook 3  installed on a Windows PC.\n\n\nHowever, running the Scipy Stack in Python 2.7 is problematic.\n\n\nSwitch kernel from here: from Python 2 to 3.\n\n\nNo need to \nimport numpy, matplotlib\n since it\u2019s included in the \n%pylab\n command.\n\n\n%pylab inline\n# the Scipy Stack is executed in the notebook, no need to import numpy\n\nx = array([1, 2, 3]) # make array from list\n\nprint(x, type(x))\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n[1 2 3] <class 'numpy.ndarray'>\n\n\n\na = [[1,2], [3,4]] # make a list of lists\n\nx = array(a) # and convert to an array\nprint(a)\n\n\n\n\n[[1, 2], [3, 4]]\n\n\n\narange(2.0, 3.0, .1)\n\n\n\n\narray([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])\n\n\n\narray([ 2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9])\n\n\n\n\narray([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])\n\n\n\nlinspace(1, 2, 11)\n\n\n\n\narray([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])\n\n\n\narray([ 1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. ])\n\n\n\n\narray([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])\n\n\n\nzeros([3,2], 'float')\n\n\n\n\narray([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])\n\n\n\nzeros([3,2], 'int')\n\n\n\n\narray([[0, 0],\n       [0, 0],\n       [0, 0]])\n\n\n\nones([2,2], 'i')\n\n\n\n\narray([[1, 1],\n       [1, 1]], dtype=int32)\n\n\n\nrandom.random([3,3])\n\n\n\n\narray([[ 0.51158139,  0.83490474,  0.82306296],\n       [ 0.65830757,  0.98560397,  0.78565885],\n       [ 0.09887894,  0.11073038,  0.31037259]])\n\n\n\na = arange(20)\nprint(a)\n\n\n\n\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n\n\n\nb = reshape(a, [4,5])\nprint(b)\n\n\n\n\n[[ 0  1  2  3  4]\n [ 5  6  7  8  9]\n [10 11 12 13 14]\n [15 16 17 18 19]]\n\n\n\na = arange(1.0, 2.0, 0.1)\nprint(a)\n\n\n\n\n[ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9]\n\n\n\nb = linspace(1, 2, 11)\nprint(b)\n\n\n\n\n[ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2. ]\n\n\n\nc = ones(5, 'float')\nprint(c)\n\n\n\n\n[ 1.  1.  1.  1.  1.]\n\n\n\nd = zeros(5, 'int')\nprint(d)\n\n\n\n\n[0 0 0 0 0]\n\n\n\ne = random.rand(5)\nprint(e)\n\n\n\n\n[ 0.5677619   0.46086299  0.00274387  0.29916017  0.40593335]\n\n\n\na = zeros(5)\nprint(a)\n\nb = a\nb[0] = 10\nprint(a, b) # b and a remain in synch\n\nc = a.copy()\nc[4] = 10\nprint(a, c) # c is really a new variable, independent\n\n\n\n\n[ 0.  0.  0.  0.  0.]\n[ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.   0.]\n[ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.  10.]\n\n\n\n# simple arithmetics\na = array([[2,3], [4,5]])\nb = array([[1,2], [3,0]])\n\nprint(a + b)\nprint(a * b)\n\n\n\n\n[[3 5]\n [7 5]]\n[[ 2  6]\n [12  0]]\n\n\n\n# cross product\na = array([1,2,3])\nb = array([4,5,6])\n\nprint(a * b)\n\nc = cross(a,b)\nprint(c)\n\n\n\n\n[ 4 10 18]\n[-3  6 -3]\n\n\n\n# dot product\nc = dot(a, b)\nprint(c)\n\n\n\n\n32\n\n\n\na = arange(10)\nprint(a)\n\n\n\n\n[0 1 2 3 4 5 6 7 8 9]\n\n\n\n# save to file, restore or retrieve\na.tofile('myfile.dat') # a file is created in the directory\nb = fromfile('myfile.dat',dtype = 'int')\nprint(b)\n\n\n\n\n[0 1 2 3 4 5 6 7 8 9]\n\n\n\n# matrix inversion\n\na = array([[4,1,-2], [2,-3,3], [-6,-2,1] ], dtype='float')\nprint(a)\n\nainv = linalg.inv(a)\nprint(ainv)\n\nprint(dot(a, ainv))\n\n\n\n\n[[ 4.  1. -2.]\n [ 2. -3.  3.]\n [-6. -2.  1.]]\n[[ 0.08333333  0.08333333 -0.08333333]\n [-0.55555556 -0.22222222 -0.44444444]\n [-0.61111111  0.05555556 -0.38888889]]\n[[  1.00000000e+00  -1.38777878e-17   0.00000000e+00]\n [  0.00000000e+00   1.00000000e+00   0.00000000e+00]\n [  0.00000000e+00   2.08166817e-17   1.00000000e+00]]\n\n\n\n3.2, Vectorized Functions\n\u00b6\n\n\n# avoid loop, generate number with a function\na = array([1, 10, 100, 1000])\nprint(log10(a))\n\n\n\n\n[ 0.  1.  2.  3.]\n\n\n\ndef spf(x):\n    return 3 * x\n\nvspf = vectorize(spf)\na = array([1, 2, 3, 4])\n\nprint(a)\nprint(vspf(a))\n\n\n\n\n[1 2 3 4]\n[ 3  6  9 12]\n\n\n\n4, Data visualization\n\u00b6\n\n\n4.1, The Matplotlib Module\n\u00b6\n\n\nBasic or common plots.\n\n\n%pylab inline\n# matplolib is part of pylab as is numpy\n\n# basic plot\ndata = [1, 2, 5]\n\nplot(data)\n\nshow()\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n# basic plot\nx = [1, 2, 5]\ny = [4, 5, 6]\n\nplot(x,y)\n\nshow()\n\n\n\n\n\n\n# basic plot\n\nx = [1, 2, 5]\ny = [4, 5, 6]\n\nplot(x, y, 'ro')\nxlabel('x-axis')\nylabel('y-axis')\naxis([0, 6, 1, 7])\n\nshow()\n\n\n\n\n\n\n# basic plots\n\n# data are unchanged\n\nt = arange(0.0, 5.0, 0.2)\n\nplot(t, t**2, 'x') # t2\nplot(t, t**3, 'ro') # t3\n\nshow()\n\n\n\n\n\n\n# subplot\n\n# data are unchanged\n\nsubplot(2, 1, 1) # the first subplot\nplot([1, 2, 3, 4])\nsubplot(2, 1, 2) # the second subplot\nplot([4, 2, 3, 1])\n\nshow()\n\n\n\n\n\n\nrand(10)\n\n\n\n\narray([ 0.88744591,  0.324907  ,  0.90704288,  0.81398935,  0.96866761,\n        0.75620965,  0.31821423,  0.64119535,  0.56738357,  0.98143592])\n\n\n\n# subplot\n\nmark = ['x','o','^','+','>']\n\nNR = 2 # number of rows\nNC = 3 # number of columns\npn = 1 # plot number, starting number\n\nfor row in range(NR):\n    for col in range(NC):\n        subplot(NR, NC, pn)\n        a = rand(10) * pn\n        plot(a, marker = mark[(pn+1)%5]) # plot the random numbers vs tick = (n+1)5%\n        xlabel('plot %d X' %pn)\n        ylabel('plot %d Y' %pn)\n\n        pn = pn + 1 # move to the 2nd plot\n\nshow()\n\n\n\n\n\n\n# polar plot\n\nth = linspace(0, 2*pi, 100)\nr = 5 * ones(100) # radius = 5\npolar(th, r)\n\nshow()\n\n\n\n\n\n\n# pie chart\n\nlabels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\nfracs = [25, 25, 30, 20]\npie(fracs, labels = labels)\n\nshow()\n\n\n\n\n\n\nA few examples of mathematical plots. \n\n\nSpiral of Archimedes\n\n\n\n\nr = a\u03b8\n\n\n\n\na = 2\nth = linspace(0, 10*pi, 200)\nr = a*th\npolar(th,r)\naxis([0, 2*pi, 0, 70])\n\nshow()\n\n\n\n\n\n\nFermat\u2019s Spiral\n\n\n\n\nr^2 = a^2\u03b8\n\n\n\n\na = 2\nth = linspace(0, 10*pi, 200)\nr = sqrt(a**2 * th)\npolar(th, r)\npolar(th, -r)\n\nshow()\n\n\n\n\n\n\nAnd more\u2026\n\n\n# example 1\n\nx = arange(0, 3, 1)\ny = arange(0, 3, 1)\ngx, gy = meshgrid(x, y)\nprint(gx)\nprint(gy)\n\nprint('-' * 25)\n\nx = arange(-3*pi, 3*pi, 0.1)\ny = arange(-3*pi, 3*pi, 0.1)\nxx, yy = meshgrid(x, y)\nz = sin(xx) + sin(yy)\n\nimshow(z)\nshow()\n\n\n\n\n[[0 1 2]\n [0 1 2]\n [0 1 2]]\n[[0 0 0]\n [1 1 1]\n [2 2 2]]\n-------------------------\n\n\n\n\n\n# example 2\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nx = arange(-3*pi, 3*pi, 0.1)\ny = arange(-3*pi, 3*pi, 0.1)\nxx, yy = meshgrid(x, y)\nz = sin(xx) + sin(yy)\nax.plot_surface(xx, yy, z, cmap=cm.jet, cstride=1)\n\nshow()\n\n\n\n\n\n\n# example 3\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nphi = linspace(0, 2*pi, 400)\nx = cos(phi)\ny = sin(phi)\nz = 0\nax.plot(x, y, z, label = 'x')# circle\nz = sin(4*phi) # modulated in z plane\nax.plot(x, y, z, label = 'x')\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\nshow()\n\n\n\n\n\n\n# example 4\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nphi = linspace(0, 2 * pi, 100)\ntheta = linspace(0, pi, 100)\nx = 10 * outer(cos(phi), sin(theta))\ny = 10 * outer(sin(phi), sin(theta))\nz = 10 * outer(ones(size(phi)), cos(theta))\nax.plot_wireframe(x,y,z, rstride=2, cstride=2)\n\nshow()\n\n\n\n\n\n\nAdditional mathematical plots (with functions):\n\n\n\n\nsine, function and friends\n\n\ncircles\n\n\nastroids\n\n\nellipses\n\n\npolar rose\n\n\npower series\n\n\nFourier series\n\n\nfractals\n\n\nmeshgrids\n\n\n2D plots\n\n\n3D plots\n\n\nsurface plots\n\n\nline plots\n\n\nwire-frame plots\n\n\nadvanced 3D with Mayavi (render 3D shapes)\n\n\n\n\n5, Type Setting Using \n\\LaTeX\n\n\n\u00b6\n\n\nOnce a graphic or an image is generated by IPython, save it and reuse it in \n\\LaTeX\n with the \nusepackage{graphicx}\n. Insert images and floating bodies.\n\n\n6, Numerical Methods\n\u00b6\n\n\n\n\nderivatives and differential calculus\n\n\nintegral calculus and numerical integration\n\n\noptimization and linear programming\n\n\nordinary differential equations\n\n\nEuler method\n\n\nRunge-Kutta method\n\n\nfunctions depending on the integrals\n\n\nand more\n\n\n\n\n\n\nPolynomials\n\n\nTaylor\u2019s series\n\n\nand other series\n\n\n\n\n\n\n\n\n6.5, Finding Roots of an Equation\n\u00b6\n\n\n\n\nA root is where a \nx\n intersects the \ny\n-axis.\n\n\nAn equation has any number of roots, or no roots at all.\n\n\n\n\nf(x) = x^2\n has a single root whereas \nf(x) = sin(x)\n has an infinite number of roots.\n\n\nVisual inspection will reveal the roots (by plotting the function).\n\n\nOther ways: the incremental search method, the method of bisection, and the Newton-Raphson method.\n\n\n\n\nIncremental Search Method\n\n\nThe basic idea behind the incremental search method is simple: if \nf(x1)\n and \nf(x2)\n have opposite signs, then there is at least one root in the interval \n(x1; x2)\n. If the interval is small enough, it is likely to contain a single root. Thus, the zeroes of \nf(x)\n can be detected by evaluating the function at intervals of \n\\Delta x\n and looking for change in sign.\n\n\nThere are several potential problems with the incremental search method: it is possible to miss two closely spaced roots if the search increment \n\\Delta x\n is larger than the spacing of the roots. Certain singularities of \nf(x)\n can be mistaken for roots. For example, \nf(x) = tan(x)\n changes sign at odd multiples of \n\\pi/2\n, but these locations are not true zeroes.\n\n\nFor example, below, function \nroot()\n that searches the roots of a function \nf(x)\n from \nx = a\n to \nx = b\n, incrementing it by \ndx\n.\n\n\n% pylab inline\n\nimport math\n\ndef func(x):\n    return x**3 - 10.0 * x * x + 5\n\ndef root(f, a, b, dx):\n    x = a\n    while True:\n        f1 = f(x)\n        f2 = f(x + dx)\n        if f1 * f2 < 0:\n            return x, x + dx\n        x = x + dx\n        if x >= b:\n            return (None,None)\n\nx, y = root(func, 0.0, 1.0, .1)\nprint(x, y)\n\nx, y = root(math.cos, 0.0, 4, .1)\nprint(x, y)\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n0.7 0.7999999999999999\n1.5000000000000002 1.6000000000000003\n\n\n\nThe visual inspection will confirm. Let\u2019s take the first function, \nf(x) = x^3 - 10x^2 + 5\n, and the inspected range, \n[0.0, 1.0]\n, to plot a graph.\n\n\nvector = arange(-10, 20, 0.05) # from numpy\n\nplot(vector, func(vector))\nxlabel('x-axis')\nylabel('y-axis')\ntitle('Find the roots')\naxis([0., 2., -1., 6.])\n# vert line\n# axvline(x = 4.,color = 'k',ls = 'dashed')\n# horiz line\naxhline(y = 0, color = 'k',ls = 'dashed')\n\nshow()\n\n\n\n\n\n\nBut, there is more than one root to the polynomial function, that is, \nf(x) = x^3 - 10x^2 + 5\n. Such function should have 3 roots. Indeed, another plot reveals two roots around \nx=0\n and another one close to \nx=10\n.\n\n\nvector = arange(-10, 20, 0.05) # from numpy\n\nplot(vector, func(vector))\nxlabel('x-axis')\nylabel('y-axis')\ntitle('Find the roots')\naxis([-2., 12., -2., 6.])\n# vert line\n# axvline(x = 4.,color = 'k',ls = 'dashed')\n# horiz line\naxhline(y = 0, color = 'k',ls = 'dashed')\n\nshow()\n\n\n\n\n\n\nMethod of Bisection\n\n\nThe method of bisection \u001cfinds the root by successively halving the interval until it becomes sufficiently small.\n\n\nBisection is not the fastest method available for computing roots, but it is the most reliable. Once a root has been bracketed, bisection will always \u001cfind it. The method of bisection works in the following manner:\n\n\n\n\nIf there is a root between \nx1\n and \nx2\n, then \nf(x1)*f(x2) < 0\n.\n\n\nNext, we compute \nf(x3)\n, where \nx3 = (x1 + x2) = 2\n.\n\n\nIf \nf(x2) * f(x3) < 0\n, then the root must be in \n(x2; x3)\n; we replace the original bound \nx1\n by \nx3\n.\n\n\nOtherwise, the root lies between \nx1\n and \nx3\n; in this case, \nx3\n replaces \nx2\n.\n\n\n\n\n\n\nThis process is repeated until the interval is reduced to a (previously) speci\u001cfied value, say \n\\epsilon\n.\n\n\nThe number of bisections required to reach the prescribed limit, \n\\epsilon\n, is given by equation:\n\n\n\n\n\n\n n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2} \n\n\n\n\nLet\u2019s continue with the example from above (\nf(x) = x^3 - 10x^2 + 5\n).\n\n\ndef bisect(f, x1, x2, epsilon = 1.0e-9):\n    f1 = f(x1)\n    f2 = f(x2)\n    if f1 * f2 > 0.0:\n        print('x1 and x2 are on the same side of x-axis')\n        return   \n    n = math.ceil(math.log(abs(x2 - x1)/epsilon)/math.log(2.0))\n    n = int(n)\n    for i in range(n):\n        x3 = 0.5 * (x1 + x2)\n        f3 = f(x3)\n        if f3 == 0.0: return x3\n        if f2 * f3 < 0.0:\n            x1 = x3\n            f1 = f3\n        else:\n            x2 = x3\n            f2 = f3\n    return (x1 + x2)/2.0\n\nprint(bisect(func, 0.70, 0.8, 1.0e-4)) # more precise than the incremental search method\nprint(bisect(func, 0.70, 0.8, 1.0e-9)) # even more decimals!\n\n\n\n\n0.734619140625\n0.7346035074442625\n\n\n\nNewton-Raphson Method\n\n\nThis other method is an algorithm that requires the derivative of the function to evaluate the roots. Therefore, it is usable only in problems where the derivative can be readily computed. It does not require the value at two points to start with. We start with an initial guess which is reasonably close to the true root. Then the function is approximated by its tangent line and the x-intercept of the tangent line is calculated. This value is taken as the next guess and the process is repeated. The Newton-Raphson formula is shown below.\n\n\n\n\nx_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)} \n\n\n\n\nLet\u2019s run an example on the quadratic equation \n2x^2 \u2212 3x \u22125 = 0\n and its two tangents. It can be seen that the zeros are at \nx = -1\n and \nx = 2.5\n. By the way, the derivative of the equation is: \n4x - 3\n\n\n\n\nFunction \nnr()\n is called twice, and we get the roots nearer to the corresponding starting values.\n\n\n# the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the algorithm\ndef nr(x, tol = 1.0e-9):\n    for i in range(30):\n        dx = -f(x)/df(x)\n        #print(x)\n        x = x + dx\n        if abs(dx) < tol:\n            return x\n\nprint('The roots:')\nprint(nr(4))\nprint(nr(0))\n\n\n\n\nThe roots:\n2.5\n-1.0\n\n\n\n# the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the alogorithm\ndef nr(x, tol = 1.0e-9):\n    for i in range(30):\n        dx = -f(x)/df(x)\n        print(x)\n        x = x + dx\n        if abs(dx) < tol:\n            return x\n\nprint('The iterations (nr(4):')\nprint(nr(4))\nprint('The iterations (nr(0):')\nprint(nr(0))\n\n\n\n\nThe iterations (nr(4):\n4\n2.8461538461538463\n2.528581510232886\n2.500229650067341\n2.5000000150663526\n2.5\n2.5\nThe iterations (nr(0):\n0\n-1.6666666666666667\n-1.0919540229885056\n-1.002295264224362\n-1.0000015032391993\n-1.0000000000006457\n-1.0\n\n\n\n# the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the plot\nvf = vectorize(f)\nx = linspace(-2, 5, 100)\ny = vf(x)\n\n# tangents at x = 3 and x = 4, using one point slope formula\nx1 = 4\ntg1 = df(x1)*(x-x1) + f(x1)\nx1 = 3\ntg2 = df(x1)*(x-x1) + f(x1)\n\ngrid(True)\nplot(x,y)\nplot(x,tg1)\nplot(x,tg2)\nylim([-20,40])\n\nshow()\n\n\n\n\n\n\n6.6, System of Linear Equations\n\u00b6\n\n\nA system of \nm\n linear equations with \nn\n unknowns can be written in a matrix form and can be solved by using several standard techniques like the Gaussian elimination.\n\n\nNon-homogeneous matrix equations of the form \nAx = b\n can be solved by matrix inversion to obtain \nx = A^{\u22121}b\n. The system of equations\n\n\n\n\\begin{align}\n\\\\ 4x + y - 2z &= 0\n\\\\ 2x - 3y + 3z &= 9 \n\\\\ -6x - 2y + z &= 0\n\\end{align}\n\n\n\n\n\ncan be represented in the matrix form as\n\n\n\n\n\n \\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}\n\n\n\n\n\nand can be solved by \u001cnding the inverse of the coe\u001ecient matrix.\n\n\n\n\n\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n {\\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}}^{-1}\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}  \n\n\n\n\n\nLet\u2019s solve the equation.\n\n\nb = array([0, 9, 0])\nA = array([[4,1,-2], [2, -3, 3], [-6, -2, 1]])\n\nprint(dot(linalg.inv(A),b))\n\n\n\n\n[ 0.75 -2.    0.5 ]\n\n\n\n\n\nx = 0.75\n, \ny = \u22122\n, and \nz = 0.5\n.\n\n\n6.7, Least Squares Fitting\n\u00b6\n\n\nA mathematical procedure for \u001cfinding the best-\u001cfitting curve \nf(x)\n for a given set of points \n(x_n, y_n)\n by minimizing the sum of the squares of the vertical off\u001bsets of the points from the curve is called least squares fi\u001ctting. \n\n\n# the raw data is generated by adding random numbers (between -1 and 1) to the y coordinates\n# generated by y = 3\u2217x + 2\n\nNP = 50 # observations\nr = 2 * ranf([NP]) - 0.5\nprint(r)\n\n\n\n\n[ 0.99203986 -0.36064885 -0.48805087  0.36617374  0.29567002  1.2411945\n  1.03900373 -0.32058291  0.45809449  0.7741206   1.11819248  1.04958093\n -0.47823795  0.14105707 -0.30262528  1.07469769 -0.44660783 -0.49313542\n  0.50995051 -0.11336372  1.47245243  0.34474142  0.52352519 -0.17051734\n  1.35723902  1.09822309  1.34626113  0.81862428  1.48731849  0.32958741\n  0.77572583  1.47898135  1.36664053  0.69356794  0.4978461   1.17619706\n -0.24303519  0.43521904  0.88177674  0.28791814 -0.22513721  0.78901677\n  0.15126297  1.24899092 -0.02995487  1.2136114   0.46617806 -0.29024591\n  0.23178231  0.50829941]\n\n\n\nx = linspace(0, 10, NP)\nprint(x)\n\n\n\n\n[  0.           0.20408163   0.40816327   0.6122449    0.81632653\n   1.02040816   1.2244898    1.42857143   1.63265306   1.83673469\n   2.04081633   2.24489796   2.44897959   2.65306122   2.85714286\n   3.06122449   3.26530612   3.46938776   3.67346939   3.87755102\n   4.08163265   4.28571429   4.48979592   4.69387755   4.89795918\n   5.10204082   5.30612245   5.51020408   5.71428571   5.91836735\n   6.12244898   6.32653061   6.53061224   6.73469388   6.93877551\n   7.14285714   7.34693878   7.55102041   7.75510204   7.95918367\n   8.16326531   8.36734694   8.57142857   8.7755102    8.97959184\n   9.18367347   9.3877551    9.59183673   9.79591837  10.        ]\n\n\n\ndata = 3 * x + 2 + r\nprint(data)\n\n\n\n\n[  2.99203986   2.25159605   2.73643893   4.20290843   4.74464961\n   6.30241899   6.71247312   5.96513138   7.35605367   8.28432469\n   9.24064146   9.7842748    8.86870082  10.10024074  10.26880329\n  12.25837115  11.34931053  11.91502784  13.53035867  13.51928934\n  15.71735039  15.20188427  15.99291295  15.91111532  18.05111657\n  18.40434554  19.26462847  19.34923652  20.63017563  20.08468945\n  21.14307277  22.45857319  22.95847726  22.89764957  23.31417263\n  24.60476849  23.79778114  25.08828026  26.14708286  26.16546916\n  26.26465871  27.89105759  27.86554869  29.57552153  28.90882064\n  30.76463181  30.62944337  30.48526429  31.61953741  32.50829941]\n\n\n\nxbar = mean(x)\nybar = mean(data)\nprint(xbar, ybar)\n\n\n\n\n5.0 17.5215723854\n\n\n\nb = sum(data * (x-xbar)) / sum(x*(x-xbar))\na = ybar - xbar * b\nprint(a, b)\n\n\n\n\n2.41774233468 3.02076601014\n\n\n\ny = a + b * x\n\nplot(x, y)\nplot(x, data, 'ob')\n\nshow()\n\n\n\n\n\n\n6.8, Interpolation\n\u00b6\n\n\nInterpolation is the process of constructing a function \nf(x)\n from a set of data points \n(x_i, y_i)\n, in the interval \na < x < b\n that will satisfy \ny_i = f(x_i)\n\n\n\nfor any point in the same interval.\n\n\nIn other words, we find an equation with several observation by reverse engineering; we stand at the doorstep of machine and statistical learning here!\n\n\nThe easiest way is to construct a polynomial of degree \nn\n, such as a Newton\u2019s interpolating polynomial, that passes through the \nn + 1\n distinct data points. Consult the document for the mathematical demonstration. Let\u2019s do an example.\n\n\n# calculate the coefficients\n\nfrom copy import copy\n\ndef coef(x, y):\n    a = copy(y) # copy the list y to coefficient a\n    m = len(x)\n    for k in range(1, m): # with two loops, calculate the difference\n        tmp = copy(a)\n        for i in range(k, m):\n            tmp[i] = (a[i] - a[i-1]) / (x[i] - x[i-k])\n        a = copy(tmp)\n    return a\n\n\n\n\nx = [0, 1, 2, 3]\ny = [0, 3, 14, 39]\n\nprint(coef(x, y))\n\n\n\n\n[0, 3.0, 4.0, 1.0]\n\n\n\n# the same can be done with a Numpy array\n\ndef coef(x, y):\n    a = copy(y)\n    m = len(x)\n    for k in range(1, m):\n        a[k:m] = (a[k:m] - a[k-1]) / (x[k:m]-x[k-1])\n    return a\n\n\n\n\nx = array([0, 1, 2, 3])\ny = array([0, 3, 14, 39])\n\nprint(coef(x, y))\n\n\n\n\n[0 3 4 1]\n\n\n\nThe next step is to calculate the value of \ny\n for any given value of \nx\n, using the coffe\u001ecients already calculated (above).\n\n\nThe program generates 20 new values of \nx\n, and calculate corresponding values of \ny\n and plots them along with the original data points.\n\n\nThe function \neval()\n uses the recurrence relation.\n\n\nYou may explore the results for new points outside the range by changing the second argument of line \nnewx = linspace(0,3,NP)\n to a higher value.\n\n\ndef eval(a, xpoints, x):\n    n = len(xpoints) - 1\n    p = a[n]\n    for k in range(1,n+1):\n        p = a[n-k] + (x -xpoints[n-k]) * p\n    return p\n\n\n\n\ndef coef(x, y):\n    a = copy(y)\n    m = len(x)\n    for k in range(1,m):\n        a[k:m] = (a[k:m] - a[k-1])/(x[k:m]-x[k-1])\n    return a\n\n\n\n\nx = array([0, 1, 2, 3])\ny = array([0, 3, 14, 39])\ncoef = coef(x, y)\n\n\n\n\nNP = 20\nnewx = linspace(0,3, NP) # New x-values\nnewy = zeros(NP)\n\n\n\n\nfor i in range(NP): # evaluate y-values\n    newy[i] = eval(coef, x, newx[i])\n\n\n\n\nplot(newx, newy,'-x')\nplot(x, y,'ro')\n\nshow()",
            "title": "Python for Education"
        },
        {
            "location": "/Python for Education/#25-python-lists",
            "text": "a = 'hello world'\n\n# extract, subset\nprint(a[3:5])\nprint(a[6:])\nprint(a[:5])  lo\nworld\nhello  a = [1, 2]\n\nprint(a)\nprint(a * 2) # double print\nprint(a + [1, 1]) # concatenate  [1, 2]\n[1, 2, 1, 2]\n[1, 2, 1, 1]  b = [1,2,a]\nprint(b) # embed\n\nb[2] = 3\nprint(b) # change a mutable from the above list\n\n# Output:  [1, 2, [1, 2]]\n[1, 2, 3]",
            "title": "2.5, Python Lists"
        },
        {
            "location": "/Python for Education/#27-input-from-the-keyboard",
            "text": "input  for numeric data.  raw_input  for string data.   x = input('Enter an integer (x): ')\ny = input('Enter another one (y): ')\n\nprint('The sum is = ', x + y) # print as numeric, input  Enter an integer (x): 1\nEnter another one (y): 2\n('The sum is = ', 3)  t = raw_input('Enter an integer: ')\nu = raw_input('Enter another one: ')\n\nprint('The sum is = ', t + u) # print as string, raw input  Enter an integer: 2\nEnter another one: 3\n('The sum is = ', '23')  v = input('Enter an integer: ')\nw = input('Enter another one: ')\n\nprint('The sum is = ', str(v) + str(w)) # print as string, input changes into a string  Enter an integer: 1\nEnter another one: 1\n('The sum is = ', '11')  y1 = raw_input('Enter an integer: ')\ny2 = raw_input('Enter another one: ')\n\nprint( 'The sum is = ', int(y1) + int(y2)) # print as numeric, raw input changed into integer  Enter an integer: 2\nEnter another one: 2\n('The sum is = ', 4)  y3 = raw_input('Enter an integer: ')\ny4 = raw_input('Enter another one: ')\n\nprint( 'The sum is = ', float(y3) + float(y4)) # print as numeric, raw input changed into float  Enter an integer: 1\nEnter another one: 2\n('The sum is = ', 3.0)",
            "title": "2.7, Input from the Keyboard"
        },
        {
            "location": "/Python for Education/#211-line-joining",
            "text": "year = input('year: ')\nmonth = input('month: ')\nif 1900 < year < 2100 and 1 <= month <= 12 :\n    print('I am so long and will not fit in a single line')  year: 2016\nmonth: 10\nI am so long and will not fit in a single line  # simplify the code, shorten the line\nyear = input('year: ')\nmonth = input('month: ')\nif 1900 < year < 2100\\\n and 1 <= month <= 12 :\n    print('I am so long and will\\\n not fit in a single line')  year: 2016\nmonth: 10\nI am so long and will not fit in a single line  # object, variable type\nprint(type(4.5))  <type 'float'>",
            "title": "2.11, Line joining"
        },
        {
            "location": "/Python for Education/#214-more-on-strings-and-lists",
            "text": "s = 'hello world'\n\n# string length\nprint(len(s))\nprint(s.upper())  11\nHELLO WORLD  # help with\nhelp(str)  Help on class str in module __builtin__:\n\nclass str(basestring)\n |  str(object='') -> string\n |  \n |  Return a nice string representation of the object.\n |  If the argument is a string, the return value is the same object.\n |  \n |  Method resolution order:\n |      str\n |      basestring\n |      object\n |  \n |  Methods defined here:\n |  \n |  __add__(...)\n |      x.__add__(y) <==> x+y\n |  \n |  __contains__(...)\n |      x.__contains__(y) <==> y in x\n |  \n |  __eq__(...)\n |      x.__eq__(y) <==> x==y\n |  \n |  __format__(...)\n |      S.__format__(format_spec) -> string\n |      \n |      Return a formatted version of S as described by format_spec.\n |  \n |  __ge__(...)\n |      x.__ge__(y) <==> x>=y\n |  \n |  __getattribute__(...)\n |      x.__getattribute__('name') <==> x.name\n |  \n |  __getitem__(...)\n |      x.__getitem__(y) <==> x[y]\n |  \n |  __getnewargs__(...)\n |  \n |  __getslice__(...)\n |      x.__getslice__(i, j) <==> x[i:j]\n |      \n |      Use of negative indices is not supported.\n |  \n |  __gt__(...)\n |      x.__gt__(y) <==> x>y\n |  \n |  __hash__(...)\n |      x.__hash__() <==> hash(x)\n |  \n |  __le__(...)\n |      x.__le__(y) <==> x<=y\n |  \n |  __len__(...)\n |      x.__len__() <==> len(x)\n |  \n |  __lt__(...)\n |      x.__lt__(y) <==> x<y\n |  \n |  __mod__(...)\n |      x.__mod__(y) <==> x%y\n |  \n |  __mul__(...)\n |      x.__mul__(n) <==> x*n\n |  \n |  __ne__(...)\n |      x.__ne__(y) <==> x!=y\n |  \n |  __repr__(...)\n |      x.__repr__() <==> repr(x)\n |  \n |  __rmod__(...)\n |      x.__rmod__(y) <==> y%x\n |  \n |  __rmul__(...)\n |      x.__rmul__(n) <==> n*x\n |  \n |  __sizeof__(...)\n |      S.__sizeof__() -> size of S in memory, in bytes\n |  \n |  __str__(...)\n |      x.__str__() <==> str(x)\n |  \n |  capitalize(...)\n |      S.capitalize() -> string\n |      \n |      Return a copy of the string S with only its first character\n |      capitalized.\n |  \n |  center(...)\n |      S.center(width[, fillchar]) -> string\n |      \n |      Return S centered in a string of length width. Padding is\n |      done using the specified fill character (default is a space)\n |  \n |  count(...)\n |      S.count(sub[, start[, end]]) -> int\n |      \n |      Return the number of non-overlapping occurrences of substring sub in\n |      string S[start:end].  Optional arguments start and end are interpreted\n |      as in slice notation.\n |  \n |  decode(...)\n |      S.decode([encoding[,errors]]) -> object\n |      \n |      Decodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\n |      as well as any other name registered with codecs.register_error that is\n |      able to handle UnicodeDecodeErrors.\n |  \n |  encode(...)\n |      S.encode([encoding[,errors]]) -> object\n |      \n |      Encodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n |      'xmlcharrefreplace' as well as any other name registered with\n |      codecs.register_error that is able to handle UnicodeEncodeErrors.\n |  \n |  endswith(...)\n |      S.endswith(suffix[, start[, end]]) -> bool\n |      \n |      Return True if S ends with the specified suffix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      suffix can also be a tuple of strings to try.\n |  \n |  expandtabs(...)\n |      S.expandtabs([tabsize]) -> string\n |      \n |      Return a copy of S where all tab characters are expanded using spaces.\n |      If tabsize is not given, a tab size of 8 characters is assumed.\n |  \n |  find(...)\n |      S.find(sub [,start [,end]]) -> int\n |      \n |      Return the lowest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  format(...)\n |      S.format(*args, **kwargs) -> string\n |      \n |      Return a formatted version of S, using substitutions from args and kwargs.\n |      The substitutions are identified by braces ('{' and '}').\n |  \n |  index(...)\n |      S.index(sub [,start [,end]]) -> int\n |      \n |      Like S.find() but raise ValueError when the substring is not found.\n |  \n |  isalnum(...)\n |      S.isalnum() -> bool\n |      \n |      Return True if all characters in S are alphanumeric\n |      and there is at least one character in S, False otherwise.\n |  \n |  isalpha(...)\n |      S.isalpha() -> bool\n |      \n |      Return True if all characters in S are alphabetic\n |      and there is at least one character in S, False otherwise.\n |  \n |  isdigit(...)\n |      S.isdigit() -> bool\n |      \n |      Return True if all characters in S are digits\n |      and there is at least one character in S, False otherwise.\n |  \n |  islower(...)\n |      S.islower() -> bool\n |      \n |      Return True if all cased characters in S are lowercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  isspace(...)\n |      S.isspace() -> bool\n |      \n |      Return True if all characters in S are whitespace\n |      and there is at least one character in S, False otherwise.\n |  \n |  istitle(...)\n |      S.istitle() -> bool\n |      \n |      Return True if S is a titlecased string and there is at least one\n |      character in S, i.e. uppercase characters may only follow uncased\n |      characters and lowercase characters only cased ones. Return False\n |      otherwise.\n |  \n |  isupper(...)\n |      S.isupper() -> bool\n |      \n |      Return True if all cased characters in S are uppercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  join(...)\n |      S.join(iterable) -> string\n |      \n |      Return a string which is the concatenation of the strings in the\n |      iterable.  The separator between elements is S.\n |  \n |  ljust(...)\n |      S.ljust(width[, fillchar]) -> string\n |      \n |      Return S left-justified in a string of length width. Padding is\n |      done using the specified fill character (default is a space).\n |  \n |  lower(...)\n |      S.lower() -> string\n |      \n |      Return a copy of the string S converted to lowercase.\n |  \n |  lstrip(...)\n |      S.lstrip([chars]) -> string or unicode\n |      \n |      Return a copy of the string S with leading whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  partition(...)\n |      S.partition(sep) -> (head, sep, tail)\n |      \n |      Search for the separator sep in S, and return the part before it,\n |      the separator itself, and the part after it.  If the separator is not\n |      found, return S and two empty strings.\n |  \n |  replace(...)\n |      S.replace(old, new[, count]) -> string\n |      \n |      Return a copy of string S with all occurrences of substring\n |      old replaced by new.  If the optional argument count is\n |      given, only the first count occurrences are replaced.\n |  \n |  rfind(...)\n |      S.rfind(sub [,start [,end]]) -> int\n |      \n |      Return the highest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  rindex(...)\n |      S.rindex(sub [,start [,end]]) -> int\n |      \n |      Like S.rfind() but raise ValueError when the substring is not found.\n |  \n |  rjust(...)\n |      S.rjust(width[, fillchar]) -> string\n |      \n |      Return S right-justified in a string of length width. Padding is\n |      done using the specified fill character (default is a space)\n |  \n |  rpartition(...)\n |      S.rpartition(sep) -> (head, sep, tail)\n |      \n |      Search for the separator sep in S, starting at the end of S, and return\n |      the part before it, the separator itself, and the part after it.  If the\n |      separator is not found, return two empty strings and S.\n |  \n |  rsplit(...)\n |      S.rsplit([sep [,maxsplit]]) -> list of strings\n |      \n |      Return a list of the words in the string S, using sep as the\n |      delimiter string, starting at the end of the string and working\n |      to the front.  If maxsplit is given, at most maxsplit splits are\n |      done. If sep is not specified or is None, any whitespace string\n |      is a separator.\n |  \n |  rstrip(...)\n |      S.rstrip([chars]) -> string or unicode\n |      \n |      Return a copy of the string S with trailing whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  split(...)\n |      S.split([sep [,maxsplit]]) -> list of strings\n |      \n |      Return a list of the words in the string S, using sep as the\n |      delimiter string.  If maxsplit is given, at most maxsplit\n |      splits are done. If sep is not specified or is None, any\n |      whitespace string is a separator and empty strings are removed\n |      from the result.\n |  \n |  splitlines(...)\n |      S.splitlines(keepends=False) -> list of strings\n |      \n |      Return a list of the lines in S, breaking at line boundaries.\n |      Line breaks are not included in the resulting list unless keepends\n |      is given and true.\n |  \n |  startswith(...)\n |      S.startswith(prefix[, start[, end]]) -> bool\n |      \n |      Return True if S starts with the specified prefix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      prefix can also be a tuple of strings to try.\n |  \n |  strip(...)\n |      S.strip([chars]) -> string or unicode\n |      \n |      Return a copy of the string S with leading and trailing\n |      whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  swapcase(...)\n |      S.swapcase() -> string\n |      \n |      Return a copy of the string S with uppercase characters\n |      converted to lowercase and vice versa.\n |  \n |  title(...)\n |      S.title() -> string\n |      \n |      Return a titlecased version of S, i.e. words start with uppercase\n |      characters, all remaining cased characters have lowercase.\n |  \n |  translate(...)\n |      S.translate(table [,deletechars]) -> string\n |      \n |      Return a copy of the string S, where all characters occurring\n |      in the optional argument deletechars are removed, and the\n |      remaining characters have been mapped through the given\n |      translation table, which must be a string of length 256 or None.\n |      If the table argument is None, no translation is applied and\n |      the operation simply removes the characters in deletechars.\n |  \n |  upper(...)\n |      S.upper() -> string\n |      \n |      Return a copy of the string S converted to uppercase.\n |  \n |  zfill(...)\n |      S.zfill(width) -> string\n |      \n |      Pad a numeric string S with zeros on the left, to fill a field\n |      of the specified width.  The string S is never truncated.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __new__ = <built-in method __new__ of type object>\n |      T.__new__(S, ...) -> a new object with type S, a subtype of T  s = 'I am a long string'\n\n# split a string on space\nprint(s.split())  ['I', 'am', 'a', 'long', 'string']  a = 'abc.abc.abc'\n\n# split a string on dot\naa = a.split('.')\nprint(aa)  ['abc', 'abc', 'abc']  # join the elements, join character\nmm = '+'.join(aa)\nprint(mm)  abc+abc+abc  a = []\n\n# append to a list\na.append(3)\nprint(a)\n\na.append(4)\nprint(a)  [3]\n[3, 4]  # insert 2.5 as first element (at index = 0)\na.insert(0, 2.5)\n\n# print several items\nprint(a, a[0])\nprint(len(a))  ([2.5, 3, 4], 2.5)\n3  # copy module\na = [1, 2, 3, 4]\n\nprint(a)\n\nb = a\nprint(a == b) # True  [1, 2, 3, 4]\nTrue  # insert at index = 0\nb[0] = 5  # b is a live duplicate, not an independent copy\nprint(a is b)\nprint(a, b)  True\n([5, 2, 3, 4], [5, 2, 3, 4])  import copy\n\nc = copy.copy(a)  # c is an ind. copy\nprint(a is c)\nprint(a, c)  False\n([5, 2, 3, 4], [5, 2, 3, 4])  # replace at index = 1\nc[1] = 100\nprint(a, c)  ([5, 2, 3, 4], [5, 100, 3, 4])",
            "title": "2.14, More on Strings and Lists"
        },
        {
            "location": "/Python for Education/#recap-from-the-above-snippets",
            "text": "dicty = {'a': 'apple', 'b': 'berry', 'c': 'cherry'}\n\nfor keyy in dicty:\n    print('keys are: '), keyy\n    print('-' * 5)\n    print('values are: '), dicty[keyy]\n    print('-' * 10)      keys are:  a\n-----\nvalues are:  apple\n----------\nkeys are:  c\n-----\nvalues are:  cherry\n----------\nkeys are:  b\n-----\nvalues are:  berry\n----------  print(type(0))\nprint(type(255))\nprint(type(-1))\nprint(type(-255))\nprint(type(-30000))\nprint(type(30000))\nprint(type(-3500000))\nprint(type(3500000))\nprint(type(-1.5))\nprint(type(1.345456734576345))\nprint(type('4'))  <type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'int'>\n<type 'float'>\n<type 'float'>\n<type 'str'>  a1 = input('Enter: ')\n\na2 = a1\na3 = bytes(a1) # 0 - 255\na4 = int(a1) # -32768 - 32768\na5 = long(a1) # -2147483648 -\na6 = float(a1)\na9 = str(a1)  Enter: 1  listnum = [0,1,2,3,4,5,6,7,8,9,10]\n\nfor i in listnum:\n    if i%2 == 0: # even\n        print(i),  0 2 4 6 8 10  for i in range(0,10):\n    if i%2 == 0: # even\n        print(i),  0 2 4 6 8  for i in range(0,100,3):\n    if i%2 == 0: # even\n        print(i),  0 6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96  listnum = ['a','b']\nlisttext = []\n\nfor i in listnum:\n    if i == 'b': # even\n        listtext.append(i)\n\nprint listtext  ['b']  lst = [3,5,7]\n\nlst.append(9)\nprint lst\n\nlst.append(lst[0])\nprint(lst)  [3, 5, 7, 9]\n[3, 5, 7, 9, 3]  lst = ['a','b','c']\n\nlst.append('d')\nprint(lst)\n\nlst.append(lst[0])\nprint(lst)  ['a', 'b', 'c', 'd']\n['a', 'b', 'c', 'd', 'a']  elements = ('foo', 'bar', 'baz')\n\nfor elem in elements:\n    print(elem)  foo\nbar\nbaz  for count, elem in enumerate(elements):\n    print(count, elem)  (0, 'foo')\n(1, 'bar')\n(2, 'baz')  listnum = [0,1,2,3,4,5,6,7,8,9,10]\n\nlistnum.pop() # last\nprint(listnum)  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  listnum.pop(0) # position 0\nprint(listnum)  [1, 2, 3, 4, 5, 6, 7, 8, 9]  listnum.pop(2) # position 2\nprint(listnum)  [1, 2, 4, 5, 6, 7, 8, 9]  listnum.remove(8) # specific element\nprint(listnum)  [1, 2, 4, 5, 6, 7, 9]  del(listnum[0])\nprint(listnum)  [2, 4, 5, 6, 7, 9]  word = 'original'\nword2 = word.upper()\nword3 = word.capitalize()\nfirst = word[0]\nallbutfirst = word[1:len(word)]\n\nprint(word)\nprint(word2)\nprint(word3)\nprint(first)\nprint(allbutfirst)  original\nORIGINAL\nOriginal\no\nriginal  list1 = [1,2,3]\nlist2 = [4,5,6,7]\n\nlist3 = [list1,list2]\n\nresults = []\n\ndef joiny(listy):\n    for lst in listy:\n        for num in lst:\n            results.append(num)\n    return results\n\nprint(joiny(list3))  [1, 2, 3, 4, 5, 6, 7]",
            "title": "Recap from the Above (Snippets)"
        },
        {
            "location": "/Python for Education/#215-python-modules-and-packages",
            "text": "print(sin(0.5))  0.479425538604  # rename, more efficient\nimport math as m\nprint(m.sin(0.5))  0.479425538604  # package.module.function()\nimport random\n\na = random.randint(1,5)\nprint(a)\n\nrandom.randint(1,10)  3\n8  import random as rd\n\naa = rd.randint(1,5)\nprint(aa)  5",
            "title": "2.15, Python Modules and Packages"
        },
        {
            "location": "/Python for Education/#216-files-inputouput",
            "text": "# create the file\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'w')\nf.write('This is a test file') # write in\nf.close()  # read it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'r')\nprint(f.read())\nf.close()  This is a test file  # read it again\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'r')\nprint(f.read(7)) # get first seven characters on the console\nprint(f.read()) # get the remaining ones\nf.close()  This is\n a test file  # create it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'w')\nfor k in range(1,10): # 1, 2, 3 stop before 4\n    s = '%3d\\n' %(k) # no format 3d, new line\n    f.write(s) # write in\nf.close()  # read it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r') # open\nprint(f.read())\nf.close()    1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9  # read it horizontally\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r') # open\nprint(f.read(),)\nf.close()  ('  1\\n  2\\n  3\\n  4\\n  5\\n  6\\n  7\\n  8\\n  9\\n',)  f = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if s == '': # Empty string means end of file\n        break # terminate the loop\n    m = int(s) # Convert to integer\n    print(m * 5),\nf.close()  5 10 15 20 25 30 35 40 45  # create it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'w')\nf.write('')\nf.close()  # give an error if there is a blank line in the file\n# test it (without the if, there would be an error)\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if s == '': # empty string means end of file\n        break # terminate the loop\n    m = int(s) # convert to integer\n    print(m * 5)\nf.close()  # alternatively\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if len(s) < 1: # string with no value\n        break # terminate the loop\n    m = int(s) # convert to integer\n    print(m * 5)\nf.close()  Strings can easily be written to and read from a \u001cle. Numbers take a bit more e\u001bort, since the  read()  method only returns Strings, which will have to be converted in to a number explicitly. However, when you want to save and restore data types like lists, dictionaries, or class instances, things get a lot more complicated. Rather than have the users constantly writing and debugging code to save complicated data types, Python provides a standard module called  pickle .  The  pickle  module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure. \u201cPickling\u201d is the process whereby a Python object hierarchy is converted into a byte stream, and \u201cunpickling\u201d is the inverse operation, whereby a byte stream is converted back into an object hierarchy. Pickling (and unpickling) is alternatively known as \u201cserialization\u201d, \u201cmarshalling,\u201d [1] or \u201cflattening\u201d, however, to avoid confusion, the terms used here are \u201cpickling\u201d and \u201cunpickling\u201d.  import pickle\n\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt', 'w')\npickle.dump(12.3, f) # write a float type\nf.close()  f = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt', 'r')\nx = pickle.load(f)\nprint(x, type(x)) # check the type of data read\nf.close()  (12.3, <type 'float'>)",
            "title": "2.16, Files Input/Ouput"
        },
        {
            "location": "/Python for Education/#217-formatted-printing",
            "text": "a = 2.0 / 3 # 2/3 will print zero because of integer\nprint(a)\n\nprint('a = %5.3f') %(a) # up to 3 decimal places  0.666666666667\na = 0.667     Conversion  Conversion  Example  Result      d, i  signed Integer  \u2018%6d\u2019%(12)  \u2018 12\u2019    f  foating point decimal  \u2018%6.4f\u2019%(2.0/3)  0.667    e  floating point exponential  \u2018%6.2e\u2019%(2.0/3)  6.67e-01    x  hexadecimal  \u2018%x\u2019%(16)  10    o  octal  \u2018%o\u2019%(8)  10    s  string  \u2018%s\u2019%(\u2018abcd\u2019)  abcd    0d  modi\u001ced  \u2018d\u2019 \u2018%05d\u2019%(12)  00012     a = 'justify as you like'\nprint('%30s') %(a) # right justified             justify as you like  print('%-30s') %(a) # minus sign for left justification  justify as you like  for k in range(1,11): # A good looking table\n    print('5 x %2d = %2d') %(k, 5*k) # add 2 spaces before  5 x  1 =  5\n5 x  2 = 10\n5 x  3 = 15\n5 x  4 = 20\n5 x  5 = 25\n5 x  6 = 30\n5 x  7 = 35\n5 x  8 = 40\n5 x  9 = 45\n5 x 10 = 50",
            "title": "2.17, Formatted Printing"
        },
        {
            "location": "/Python for Education/#218-exception-handling",
            "text": "x = input('Enter a number ')\n\ntry:\n    print(10.0 / x)\nexcept:\n    print('Division by zero not allowed')  Enter a number 0\nDivision by zero not allowed",
            "title": "2.18, Exception Handling"
        },
        {
            "location": "/Python for Education/#220-writing-gui-programs",
            "text": "Tkinter   An introduction to tkinter  Tkinter  Tkinter   The GUI programs are event-driven like a macro. Create Widgets like a Button, Label, Canvas,  etc. The first step is to create a main graphics window by calling the function  Tk() .  # Example tkmain.py\n\n# open an empty box with min, max, close buttons\nimport Tkinter as tk\n\nroot = tk.Tk()\nroot.mainloop()\n\n# it opens a windows!  # Example tklabel.py\n\nroot = tk.Tk()\nw = tk.Label(root, text = \"Hello, world\")\n\nw.pack()\nroot.mainloop()\n\n# it opens a windows with the text in it  # Example tkbutton.py\n\ndef hello():\n    print('hello world')\n\nw = tk.Tk() # Creates the main Graphics window\nb = tk.Button(w, text = 'Click Me', command = hello)\n\nb.pack()\nw.mainloop()\n\n# it opens a windows with a button; after clicking, it print the function  hello world  # Example tkcanvas.py\n\ndef draw(event):\n    c.create_rectangle(event.x, \\\n        event.y, event.x+5, event.y+5)\n\nw = tk.Tk()\nc = tk.Canvas(w, width = 300, height = 200)\n\nc.pack()\nc.bind(\"<Button-1>\", draw)\nw.mainloop()\n\n# it open a windows; you can left-click and add dots in it  # Example tkcanvas2.py\n\nrecs = [] # list keeping track of the rectangles\n\ndef remove(event):\n    global recs\n    if len(recs) > 0:\n        c.delete(recs[0]) # delete from Canvas\n        recs.pop(0) # delete first item from list\n\ndef draw(event):\n    global recs\n    r = c.create_rectangle(event.x, \\\n        event.y, event.x + 5, event.y + 5)\n    recs.append(r)\n\nw = tk.Tk()\nc = tk.Canvas(w, width = 300, height = 200)\n\nc.pack()\nc.bind(\"<Button-1>\", draw)\nc.bind(\"<Button-3>\", remove)\nw.mainloop()\n\n# it open a windows; you can left-click and add dots in it; right-click and remove them",
            "title": "2.20, Writing GUI Programs"
        },
        {
            "location": "/Python for Education/#221-object-oriented-programming-in-python",
            "text": "# example point.py\n\nclass Point:\n    '''\n    This is documentation comment.\n    help(Point) will display this.\n    '''\n\n    def __init__(self, x = 0, y = 0):\n        self.xpos = x\n        self.ypos = y\n\n    def __str__(self): # overload print()\n        return 'Point at (%f,%f)' %(self.xpos, self.ypos)\n\n    def __add__(self, other): # overloads\n        xpos = self.xpos + other.xpos\n        ypos = self.ypos + other.ypos\n        return Point(xpos, ypos)\n\n    def __sub__(self, other): # overloads\n        import math\n        dx = self.xpos - other.xpos\n        dy = self.ypos - other.ypos\n        return math.sqrt(dx ** 2 + dy ** 2)\n\n    def dist(self):\n        import math\n        return math.sqrt(self.xpos ** 2 + self.ypos ** 2)  # example point1.py\n\n# import Point\n# if point.py is in the same directory and script point1.py is independent from point.py\n\norigin = Point() # instance\nprint(origin)\n\np1 = Point(4, 4) # instance\np2 = Point(8, 7)\n\nprint(p1)  Point at (0.000000,0.000000)\nPoint at (4.000000,4.000000)  print(p2) # __str__  Point at (8.000000,7.000000)  print(p1 + p2) # __add__, __str__, (4 + 4, 7 + 4)  Point at (12.000000,11.000000)  print(p1 - p2) # __sub__, __str__, ((4 - 8) ** 2, (3 - 7) ** 2)  5.0  print(p1.dist()) # # __dist__, __str__, sqrt((4) ** 2 + (4) ** 2)  5.65685424949  # example cpoint.py\n\nclass colPoint(Point): # colPoint inherits Point\n    '''\n    This is documentation comment.\n    help(colPoint) will display this.\n    '''\n\n    color = 'black'\n\n    def __init__(self, x = 0, y = 0, col = 'black'):\n        Point.__init__(self, x, y)\n        self.color = col\n\n    def __str__(self):\n        return '%s colored Point at (%f,%f)' % \\\n            (self.color, self.xpos, self.ypos)  # example point2.py\n\n# import cpoint\n# see above for the explanation\n\np1 = Point(5, 5)\nrp1 = colPoint(2, 2, 'red')  print(p1)  Point at (5.000000,5.000000)  print(rp1)  red colored Point at (2.000000,2.000000)  print(rp1 + p1)  Point at (7.000000,7.000000)  print(rp1.dist())  2.82842712475",
            "title": "2.21, Object-Oriented Programming in Python"
        },
        {
            "location": "/Python for Education/#3-arrays-and-matrices",
            "text": "Let\u2019s switch to Python 3 for the remaining of the document.",
            "title": "3, Arrays and Matrices"
        },
        {
            "location": "/Python for Education/#31-the-numpy-module",
            "text": "Install (check) the Scipy Stack before.   numpy  scipy  matplotlib  pandas  sympy  nose (testing)   With  pip .  Note  The code below in Python 3 on Jupyter Notebook 3  installed on a Windows PC.  However, running the Scipy Stack in Python 2.7 is problematic.  Switch kernel from here: from Python 2 to 3.  No need to  import numpy, matplotlib  since it\u2019s included in the  %pylab  command.  %pylab inline\n# the Scipy Stack is executed in the notebook, no need to import numpy\n\nx = array([1, 2, 3]) # make array from list\n\nprint(x, type(x))  Populating the interactive namespace from numpy and matplotlib\n[1 2 3] <class 'numpy.ndarray'>  a = [[1,2], [3,4]] # make a list of lists\n\nx = array(a) # and convert to an array\nprint(a)  [[1, 2], [3, 4]]  arange(2.0, 3.0, .1)  array([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])  array([ 2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9])  array([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])  linspace(1, 2, 11)  array([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])  array([ 1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. ])  array([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])  zeros([3,2], 'float')  array([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])  zeros([3,2], 'int')  array([[0, 0],\n       [0, 0],\n       [0, 0]])  ones([2,2], 'i')  array([[1, 1],\n       [1, 1]], dtype=int32)  random.random([3,3])  array([[ 0.51158139,  0.83490474,  0.82306296],\n       [ 0.65830757,  0.98560397,  0.78565885],\n       [ 0.09887894,  0.11073038,  0.31037259]])  a = arange(20)\nprint(a)  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]  b = reshape(a, [4,5])\nprint(b)  [[ 0  1  2  3  4]\n [ 5  6  7  8  9]\n [10 11 12 13 14]\n [15 16 17 18 19]]  a = arange(1.0, 2.0, 0.1)\nprint(a)  [ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9]  b = linspace(1, 2, 11)\nprint(b)  [ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2. ]  c = ones(5, 'float')\nprint(c)  [ 1.  1.  1.  1.  1.]  d = zeros(5, 'int')\nprint(d)  [0 0 0 0 0]  e = random.rand(5)\nprint(e)  [ 0.5677619   0.46086299  0.00274387  0.29916017  0.40593335]  a = zeros(5)\nprint(a)\n\nb = a\nb[0] = 10\nprint(a, b) # b and a remain in synch\n\nc = a.copy()\nc[4] = 10\nprint(a, c) # c is really a new variable, independent  [ 0.  0.  0.  0.  0.]\n[ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.   0.]\n[ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.  10.]  # simple arithmetics\na = array([[2,3], [4,5]])\nb = array([[1,2], [3,0]])\n\nprint(a + b)\nprint(a * b)  [[3 5]\n [7 5]]\n[[ 2  6]\n [12  0]]  # cross product\na = array([1,2,3])\nb = array([4,5,6])\n\nprint(a * b)\n\nc = cross(a,b)\nprint(c)  [ 4 10 18]\n[-3  6 -3]  # dot product\nc = dot(a, b)\nprint(c)  32  a = arange(10)\nprint(a)  [0 1 2 3 4 5 6 7 8 9]  # save to file, restore or retrieve\na.tofile('myfile.dat') # a file is created in the directory\nb = fromfile('myfile.dat',dtype = 'int')\nprint(b)  [0 1 2 3 4 5 6 7 8 9]  # matrix inversion\n\na = array([[4,1,-2], [2,-3,3], [-6,-2,1] ], dtype='float')\nprint(a)\n\nainv = linalg.inv(a)\nprint(ainv)\n\nprint(dot(a, ainv))  [[ 4.  1. -2.]\n [ 2. -3.  3.]\n [-6. -2.  1.]]\n[[ 0.08333333  0.08333333 -0.08333333]\n [-0.55555556 -0.22222222 -0.44444444]\n [-0.61111111  0.05555556 -0.38888889]]\n[[  1.00000000e+00  -1.38777878e-17   0.00000000e+00]\n [  0.00000000e+00   1.00000000e+00   0.00000000e+00]\n [  0.00000000e+00   2.08166817e-17   1.00000000e+00]]",
            "title": "3.1, The NumPy Module"
        },
        {
            "location": "/Python for Education/#32-vectorized-functions",
            "text": "# avoid loop, generate number with a function\na = array([1, 10, 100, 1000])\nprint(log10(a))  [ 0.  1.  2.  3.]  def spf(x):\n    return 3 * x\n\nvspf = vectorize(spf)\na = array([1, 2, 3, 4])\n\nprint(a)\nprint(vspf(a))  [1 2 3 4]\n[ 3  6  9 12]",
            "title": "3.2, Vectorized Functions"
        },
        {
            "location": "/Python for Education/#4-data-visualization",
            "text": "",
            "title": "4, Data visualization"
        },
        {
            "location": "/Python for Education/#41-the-matplotlib-module",
            "text": "Basic or common plots.  %pylab inline\n# matplolib is part of pylab as is numpy\n\n# basic plot\ndata = [1, 2, 5]\n\nplot(data)\n\nshow()  Populating the interactive namespace from numpy and matplotlib   # basic plot\nx = [1, 2, 5]\ny = [4, 5, 6]\n\nplot(x,y)\n\nshow()   # basic plot\n\nx = [1, 2, 5]\ny = [4, 5, 6]\n\nplot(x, y, 'ro')\nxlabel('x-axis')\nylabel('y-axis')\naxis([0, 6, 1, 7])\n\nshow()   # basic plots\n\n# data are unchanged\n\nt = arange(0.0, 5.0, 0.2)\n\nplot(t, t**2, 'x') # t2\nplot(t, t**3, 'ro') # t3\n\nshow()   # subplot\n\n# data are unchanged\n\nsubplot(2, 1, 1) # the first subplot\nplot([1, 2, 3, 4])\nsubplot(2, 1, 2) # the second subplot\nplot([4, 2, 3, 1])\n\nshow()   rand(10)  array([ 0.88744591,  0.324907  ,  0.90704288,  0.81398935,  0.96866761,\n        0.75620965,  0.31821423,  0.64119535,  0.56738357,  0.98143592])  # subplot\n\nmark = ['x','o','^','+','>']\n\nNR = 2 # number of rows\nNC = 3 # number of columns\npn = 1 # plot number, starting number\n\nfor row in range(NR):\n    for col in range(NC):\n        subplot(NR, NC, pn)\n        a = rand(10) * pn\n        plot(a, marker = mark[(pn+1)%5]) # plot the random numbers vs tick = (n+1)5%\n        xlabel('plot %d X' %pn)\n        ylabel('plot %d Y' %pn)\n\n        pn = pn + 1 # move to the 2nd plot\n\nshow()   # polar plot\n\nth = linspace(0, 2*pi, 100)\nr = 5 * ones(100) # radius = 5\npolar(th, r)\n\nshow()   # pie chart\n\nlabels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\nfracs = [25, 25, 30, 20]\npie(fracs, labels = labels)\n\nshow()   A few examples of mathematical plots.   Spiral of Archimedes   r = a\u03b8   a = 2\nth = linspace(0, 10*pi, 200)\nr = a*th\npolar(th,r)\naxis([0, 2*pi, 0, 70])\n\nshow()   Fermat\u2019s Spiral   r^2 = a^2\u03b8   a = 2\nth = linspace(0, 10*pi, 200)\nr = sqrt(a**2 * th)\npolar(th, r)\npolar(th, -r)\n\nshow()   And more\u2026  # example 1\n\nx = arange(0, 3, 1)\ny = arange(0, 3, 1)\ngx, gy = meshgrid(x, y)\nprint(gx)\nprint(gy)\n\nprint('-' * 25)\n\nx = arange(-3*pi, 3*pi, 0.1)\ny = arange(-3*pi, 3*pi, 0.1)\nxx, yy = meshgrid(x, y)\nz = sin(xx) + sin(yy)\n\nimshow(z)\nshow()  [[0 1 2]\n [0 1 2]\n [0 1 2]]\n[[0 0 0]\n [1 1 1]\n [2 2 2]]\n-------------------------   # example 2\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nx = arange(-3*pi, 3*pi, 0.1)\ny = arange(-3*pi, 3*pi, 0.1)\nxx, yy = meshgrid(x, y)\nz = sin(xx) + sin(yy)\nax.plot_surface(xx, yy, z, cmap=cm.jet, cstride=1)\n\nshow()   # example 3\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nphi = linspace(0, 2*pi, 400)\nx = cos(phi)\ny = sin(phi)\nz = 0\nax.plot(x, y, z, label = 'x')# circle\nz = sin(4*phi) # modulated in z plane\nax.plot(x, y, z, label = 'x')\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\nshow()   # example 4\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nphi = linspace(0, 2 * pi, 100)\ntheta = linspace(0, pi, 100)\nx = 10 * outer(cos(phi), sin(theta))\ny = 10 * outer(sin(phi), sin(theta))\nz = 10 * outer(ones(size(phi)), cos(theta))\nax.plot_wireframe(x,y,z, rstride=2, cstride=2)\n\nshow()   Additional mathematical plots (with functions):   sine, function and friends  circles  astroids  ellipses  polar rose  power series  Fourier series  fractals  meshgrids  2D plots  3D plots  surface plots  line plots  wire-frame plots  advanced 3D with Mayavi (render 3D shapes)",
            "title": "4.1, The Matplotlib Module"
        },
        {
            "location": "/Python for Education/#5-type-setting-using-latex",
            "text": "Once a graphic or an image is generated by IPython, save it and reuse it in  \\LaTeX  with the  usepackage{graphicx} . Insert images and floating bodies.",
            "title": "5, Type Setting Using \\LaTeX"
        },
        {
            "location": "/Python for Education/#6-numerical-methods",
            "text": "derivatives and differential calculus  integral calculus and numerical integration  optimization and linear programming  ordinary differential equations  Euler method  Runge-Kutta method  functions depending on the integrals  and more    Polynomials  Taylor\u2019s series  and other series",
            "title": "6, Numerical Methods"
        },
        {
            "location": "/Python for Education/#65-finding-roots-of-an-equation",
            "text": "A root is where a  x  intersects the  y -axis.  An equation has any number of roots, or no roots at all.   f(x) = x^2  has a single root whereas  f(x) = sin(x)  has an infinite number of roots.  Visual inspection will reveal the roots (by plotting the function).  Other ways: the incremental search method, the method of bisection, and the Newton-Raphson method.   Incremental Search Method  The basic idea behind the incremental search method is simple: if  f(x1)  and  f(x2)  have opposite signs, then there is at least one root in the interval  (x1; x2) . If the interval is small enough, it is likely to contain a single root. Thus, the zeroes of  f(x)  can be detected by evaluating the function at intervals of  \\Delta x  and looking for change in sign.  There are several potential problems with the incremental search method: it is possible to miss two closely spaced roots if the search increment  \\Delta x  is larger than the spacing of the roots. Certain singularities of  f(x)  can be mistaken for roots. For example,  f(x) = tan(x)  changes sign at odd multiples of  \\pi/2 , but these locations are not true zeroes.  For example, below, function  root()  that searches the roots of a function  f(x)  from  x = a  to  x = b , incrementing it by  dx .  % pylab inline\n\nimport math\n\ndef func(x):\n    return x**3 - 10.0 * x * x + 5\n\ndef root(f, a, b, dx):\n    x = a\n    while True:\n        f1 = f(x)\n        f2 = f(x + dx)\n        if f1 * f2 < 0:\n            return x, x + dx\n        x = x + dx\n        if x >= b:\n            return (None,None)\n\nx, y = root(func, 0.0, 1.0, .1)\nprint(x, y)\n\nx, y = root(math.cos, 0.0, 4, .1)\nprint(x, y)  Populating the interactive namespace from numpy and matplotlib\n0.7 0.7999999999999999\n1.5000000000000002 1.6000000000000003  The visual inspection will confirm. Let\u2019s take the first function,  f(x) = x^3 - 10x^2 + 5 , and the inspected range,  [0.0, 1.0] , to plot a graph.  vector = arange(-10, 20, 0.05) # from numpy\n\nplot(vector, func(vector))\nxlabel('x-axis')\nylabel('y-axis')\ntitle('Find the roots')\naxis([0., 2., -1., 6.])\n# vert line\n# axvline(x = 4.,color = 'k',ls = 'dashed')\n# horiz line\naxhline(y = 0, color = 'k',ls = 'dashed')\n\nshow()   But, there is more than one root to the polynomial function, that is,  f(x) = x^3 - 10x^2 + 5 . Such function should have 3 roots. Indeed, another plot reveals two roots around  x=0  and another one close to  x=10 .  vector = arange(-10, 20, 0.05) # from numpy\n\nplot(vector, func(vector))\nxlabel('x-axis')\nylabel('y-axis')\ntitle('Find the roots')\naxis([-2., 12., -2., 6.])\n# vert line\n# axvline(x = 4.,color = 'k',ls = 'dashed')\n# horiz line\naxhline(y = 0, color = 'k',ls = 'dashed')\n\nshow()   Method of Bisection  The method of bisection \u001cfinds the root by successively halving the interval until it becomes sufficiently small.  Bisection is not the fastest method available for computing roots, but it is the most reliable. Once a root has been bracketed, bisection will always \u001cfind it. The method of bisection works in the following manner:   If there is a root between  x1  and  x2 , then  f(x1)*f(x2) < 0 .  Next, we compute  f(x3) , where  x3 = (x1 + x2) = 2 .  If  f(x2) * f(x3) < 0 , then the root must be in  (x2; x3) ; we replace the original bound  x1  by  x3 .  Otherwise, the root lies between  x1  and  x3 ; in this case,  x3  replaces  x2 .    This process is repeated until the interval is reduced to a (previously) speci\u001cfied value, say  \\epsilon .  The number of bisections required to reach the prescribed limit,  \\epsilon , is given by equation:     n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2}    Let\u2019s continue with the example from above ( f(x) = x^3 - 10x^2 + 5 ).  def bisect(f, x1, x2, epsilon = 1.0e-9):\n    f1 = f(x1)\n    f2 = f(x2)\n    if f1 * f2 > 0.0:\n        print('x1 and x2 are on the same side of x-axis')\n        return   \n    n = math.ceil(math.log(abs(x2 - x1)/epsilon)/math.log(2.0))\n    n = int(n)\n    for i in range(n):\n        x3 = 0.5 * (x1 + x2)\n        f3 = f(x3)\n        if f3 == 0.0: return x3\n        if f2 * f3 < 0.0:\n            x1 = x3\n            f1 = f3\n        else:\n            x2 = x3\n            f2 = f3\n    return (x1 + x2)/2.0\n\nprint(bisect(func, 0.70, 0.8, 1.0e-4)) # more precise than the incremental search method\nprint(bisect(func, 0.70, 0.8, 1.0e-9)) # even more decimals!  0.734619140625\n0.7346035074442625  Newton-Raphson Method  This other method is an algorithm that requires the derivative of the function to evaluate the roots. Therefore, it is usable only in problems where the derivative can be readily computed. It does not require the value at two points to start with. We start with an initial guess which is reasonably close to the true root. Then the function is approximated by its tangent line and the x-intercept of the tangent line is calculated. This value is taken as the next guess and the process is repeated. The Newton-Raphson formula is shown below.   x_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)}    Let\u2019s run an example on the quadratic equation  2x^2 \u2212 3x \u22125 = 0  and its two tangents. It can be seen that the zeros are at  x = -1  and  x = 2.5 . By the way, the derivative of the equation is:  4x - 3   Function  nr()  is called twice, and we get the roots nearer to the corresponding starting values.  # the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the algorithm\ndef nr(x, tol = 1.0e-9):\n    for i in range(30):\n        dx = -f(x)/df(x)\n        #print(x)\n        x = x + dx\n        if abs(dx) < tol:\n            return x\n\nprint('The roots:')\nprint(nr(4))\nprint(nr(0))  The roots:\n2.5\n-1.0  # the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the alogorithm\ndef nr(x, tol = 1.0e-9):\n    for i in range(30):\n        dx = -f(x)/df(x)\n        print(x)\n        x = x + dx\n        if abs(dx) < tol:\n            return x\n\nprint('The iterations (nr(4):')\nprint(nr(4))\nprint('The iterations (nr(0):')\nprint(nr(0))  The iterations (nr(4):\n4\n2.8461538461538463\n2.528581510232886\n2.500229650067341\n2.5000000150663526\n2.5\n2.5\nThe iterations (nr(0):\n0\n-1.6666666666666667\n-1.0919540229885056\n-1.002295264224362\n-1.0000015032391993\n-1.0000000000006457\n-1.0  # the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the plot\nvf = vectorize(f)\nx = linspace(-2, 5, 100)\ny = vf(x)\n\n# tangents at x = 3 and x = 4, using one point slope formula\nx1 = 4\ntg1 = df(x1)*(x-x1) + f(x1)\nx1 = 3\ntg2 = df(x1)*(x-x1) + f(x1)\n\ngrid(True)\nplot(x,y)\nplot(x,tg1)\nplot(x,tg2)\nylim([-20,40])\n\nshow()",
            "title": "6.5, Finding Roots of an Equation"
        },
        {
            "location": "/Python for Education/#66-system-of-linear-equations",
            "text": "A system of  m  linear equations with  n  unknowns can be written in a matrix form and can be solved by using several standard techniques like the Gaussian elimination.  Non-homogeneous matrix equations of the form  Ax = b  can be solved by matrix inversion to obtain  x = A^{\u22121}b . The system of equations  \n\\begin{align}\n\\\\ 4x + y - 2z &= 0\n\\\\ 2x - 3y + 3z &= 9 \n\\\\ -6x - 2y + z &= 0\n\\end{align}   can be represented in the matrix form as   \n \\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}   and can be solved by \u001cnding the inverse of the coe\u001ecient matrix.   \n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n {\\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}}^{-1}\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}     Let\u2019s solve the equation.  b = array([0, 9, 0])\nA = array([[4,1,-2], [2, -3, 3], [-6, -2, 1]])\n\nprint(dot(linalg.inv(A),b))  [ 0.75 -2.    0.5 ]   x = 0.75 ,  y = \u22122 , and  z = 0.5 .",
            "title": "6.6, System of Linear Equations"
        },
        {
            "location": "/Python for Education/#67-least-squares-fitting",
            "text": "A mathematical procedure for \u001cfinding the best-\u001cfitting curve  f(x)  for a given set of points  (x_n, y_n)  by minimizing the sum of the squares of the vertical off\u001bsets of the points from the curve is called least squares fi\u001ctting.   # the raw data is generated by adding random numbers (between -1 and 1) to the y coordinates\n# generated by y = 3\u2217x + 2\n\nNP = 50 # observations\nr = 2 * ranf([NP]) - 0.5\nprint(r)  [ 0.99203986 -0.36064885 -0.48805087  0.36617374  0.29567002  1.2411945\n  1.03900373 -0.32058291  0.45809449  0.7741206   1.11819248  1.04958093\n -0.47823795  0.14105707 -0.30262528  1.07469769 -0.44660783 -0.49313542\n  0.50995051 -0.11336372  1.47245243  0.34474142  0.52352519 -0.17051734\n  1.35723902  1.09822309  1.34626113  0.81862428  1.48731849  0.32958741\n  0.77572583  1.47898135  1.36664053  0.69356794  0.4978461   1.17619706\n -0.24303519  0.43521904  0.88177674  0.28791814 -0.22513721  0.78901677\n  0.15126297  1.24899092 -0.02995487  1.2136114   0.46617806 -0.29024591\n  0.23178231  0.50829941]  x = linspace(0, 10, NP)\nprint(x)  [  0.           0.20408163   0.40816327   0.6122449    0.81632653\n   1.02040816   1.2244898    1.42857143   1.63265306   1.83673469\n   2.04081633   2.24489796   2.44897959   2.65306122   2.85714286\n   3.06122449   3.26530612   3.46938776   3.67346939   3.87755102\n   4.08163265   4.28571429   4.48979592   4.69387755   4.89795918\n   5.10204082   5.30612245   5.51020408   5.71428571   5.91836735\n   6.12244898   6.32653061   6.53061224   6.73469388   6.93877551\n   7.14285714   7.34693878   7.55102041   7.75510204   7.95918367\n   8.16326531   8.36734694   8.57142857   8.7755102    8.97959184\n   9.18367347   9.3877551    9.59183673   9.79591837  10.        ]  data = 3 * x + 2 + r\nprint(data)  [  2.99203986   2.25159605   2.73643893   4.20290843   4.74464961\n   6.30241899   6.71247312   5.96513138   7.35605367   8.28432469\n   9.24064146   9.7842748    8.86870082  10.10024074  10.26880329\n  12.25837115  11.34931053  11.91502784  13.53035867  13.51928934\n  15.71735039  15.20188427  15.99291295  15.91111532  18.05111657\n  18.40434554  19.26462847  19.34923652  20.63017563  20.08468945\n  21.14307277  22.45857319  22.95847726  22.89764957  23.31417263\n  24.60476849  23.79778114  25.08828026  26.14708286  26.16546916\n  26.26465871  27.89105759  27.86554869  29.57552153  28.90882064\n  30.76463181  30.62944337  30.48526429  31.61953741  32.50829941]  xbar = mean(x)\nybar = mean(data)\nprint(xbar, ybar)  5.0 17.5215723854  b = sum(data * (x-xbar)) / sum(x*(x-xbar))\na = ybar - xbar * b\nprint(a, b)  2.41774233468 3.02076601014  y = a + b * x\n\nplot(x, y)\nplot(x, data, 'ob')\n\nshow()",
            "title": "6.7, Least Squares Fitting"
        },
        {
            "location": "/Python for Education/#68-interpolation",
            "text": "Interpolation is the process of constructing a function  f(x)  from a set of data points  (x_i, y_i) , in the interval  a < x < b  that will satisfy  y_i = f(x_i)  \nfor any point in the same interval.  In other words, we find an equation with several observation by reverse engineering; we stand at the doorstep of machine and statistical learning here!  The easiest way is to construct a polynomial of degree  n , such as a Newton\u2019s interpolating polynomial, that passes through the  n + 1  distinct data points. Consult the document for the mathematical demonstration. Let\u2019s do an example.  # calculate the coefficients\n\nfrom copy import copy\n\ndef coef(x, y):\n    a = copy(y) # copy the list y to coefficient a\n    m = len(x)\n    for k in range(1, m): # with two loops, calculate the difference\n        tmp = copy(a)\n        for i in range(k, m):\n            tmp[i] = (a[i] - a[i-1]) / (x[i] - x[i-k])\n        a = copy(tmp)\n    return a  x = [0, 1, 2, 3]\ny = [0, 3, 14, 39]\n\nprint(coef(x, y))  [0, 3.0, 4.0, 1.0]  # the same can be done with a Numpy array\n\ndef coef(x, y):\n    a = copy(y)\n    m = len(x)\n    for k in range(1, m):\n        a[k:m] = (a[k:m] - a[k-1]) / (x[k:m]-x[k-1])\n    return a  x = array([0, 1, 2, 3])\ny = array([0, 3, 14, 39])\n\nprint(coef(x, y))  [0 3 4 1]  The next step is to calculate the value of  y  for any given value of  x , using the coffe\u001ecients already calculated (above).  The program generates 20 new values of  x , and calculate corresponding values of  y  and plots them along with the original data points.  The function  eval()  uses the recurrence relation.  You may explore the results for new points outside the range by changing the second argument of line  newx = linspace(0,3,NP)  to a higher value.  def eval(a, xpoints, x):\n    n = len(xpoints) - 1\n    p = a[n]\n    for k in range(1,n+1):\n        p = a[n-k] + (x -xpoints[n-k]) * p\n    return p  def coef(x, y):\n    a = copy(y)\n    m = len(x)\n    for k in range(1,m):\n        a[k:m] = (a[k:m] - a[k-1])/(x[k:m]-x[k-1])\n    return a  x = array([0, 1, 2, 3])\ny = array([0, 3, 14, 39])\ncoef = coef(x, y)  NP = 20\nnewx = linspace(0,3, NP) # New x-values\nnewy = zeros(NP)  for i in range(NP): # evaluate y-values\n    newy[i] = eval(coef, x, newx[i])  plot(newx, newy,'-x')\nplot(x, y,'ro')\n\nshow()",
            "title": "6.8, Interpolation"
        }
    ]
}