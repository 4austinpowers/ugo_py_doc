{
    "docs": [
        {
            "location": "/", 
            "text": "Let there be light!\n\n\nA Python documentation website.\n\n\nLayout\n\n\n\n\nugo_py_doc\n is a corpus: a catalog of books, manuals, articles, presentations, videos, podcasts, summaries, notes, code snippets, excerpts, websites, etc.\n\n\nA Mkdocs site is automatically indexed. The \ndocs\n is a searchable knowledge-based system. \n\n\nYou type a keyword, it leads to several sources, you identify the document the source belongs to, and you go retrieve the document; whether it is a digital or a material document. Fast and easy!\n\n\nFor that matter, \ngenerously\n adding keywords to the \ndocs\n is crucial (adding them in subscript makes them stand apart).\n\n\nCitations, keywords, links, etc.; they all provide leads.\n\n\nThe corpus is unstructured. There is no unique chapter dedicated to one topic.\n\n\nKnowledge is rather cumulated, layer after layer, resulting in a hotchpotch of information. \n\n\nInformation may be repeted among many documents, with different explanations, or some more comprehensive.\n\n\nNewer entries might also supplement or contradict older entries.", 
            "title": "Home"
        }, 
        {
            "location": "/#layout", 
            "text": "ugo_py_doc  is a corpus: a catalog of books, manuals, articles, presentations, videos, podcasts, summaries, notes, code snippets, excerpts, websites, etc.  A Mkdocs site is automatically indexed. The  docs  is a searchable knowledge-based system.   You type a keyword, it leads to several sources, you identify the document the source belongs to, and you go retrieve the document; whether it is a digital or a material document. Fast and easy!  For that matter,  generously  adding keywords to the  docs  is crucial (adding them in subscript makes them stand apart).  Citations, keywords, links, etc.; they all provide leads.  The corpus is unstructured. There is no unique chapter dedicated to one topic.  Knowledge is rather cumulated, layer after layer, resulting in a hotchpotch of information.   Information may be repeted among many documents, with different explanations, or some more comprehensive.  Newer entries might also supplement or contradict older entries.", 
            "title": "Layout"
        }, 
        {
            "location": "/Python_Preliminaries/", 
            "text": "CONTENT\n\n\n1, Installing (Complementary Details)\n\n\n2, pip\n\n\n3, Git\n\n\n4, Virtual Environment\n\n\n5, Launching\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Consult the \nHitchicker\ns Guide to Python\n.\n\n\n\n\n1, Installing (Complementary Details)\n\n\nPython\n\n\n\n\nInstalling Python, basic libraries, and virtual environments.\n\n\nhttp://docs.python-guide.org/en/latest/starting/install/win/#install-windows\n\n\nhttp://docs.python-guide.org/en/latest/starting/install/linux/\n\n\n\n\n\n\nSetting the path in Windows (examples):\n\n\nset PATH=%PATH%;C:\\Python27\n.\n\n\nset PATH=%PATH%;C:\\Python27\\Scripts\n.\n\n\nset PATH=%PATH%;C:\\PythonXX\n.\n\n\nset PATH=%PATH%;C:\\PythonXX\\Scripts\n.\n\n\n\n\n\n\nSetting the path in Linux (example):\n\n\nexport PYTHONPATH=$PYTHONPATH:\n.\n\n\n\n\n\n\n\n\n\n\n2, pip\n\n\npypi\n\n\nPyPY directory of libraries.\n\n\nImportant commands:\n\n\n\n\npip help\n ou \npip --help\n.\n\n\npip install \nmodule\n.\n\n\npip --version\n.\n\n\npip install --upgrade pip\n\n\nsudo pip install \nmodule\n.\n\n\npip uninstall \nmodule\n.\n\n\npip install --user \nmodule\n: circumvent the \nsudo\n command.\n\n\n\n\n3, Git\n\n\nAfter installing Git, to execute Python module in the Git Bash, (re)set the path in the Git Bash (example): \nexport PATH=\"$PATH:/c/Python27\"\n, \n\n\nexport PATH=\"$PATH:/c/Python27/Scripts\"\n, \n The Git Bash simulates a UNIX-type environment.\n\n\n4, Virtual Environment\n\n\nvirtual, environment, separate, project\n\n\nWhen you install a library, it is accessible to all python scripts. Project A and B have access to the library. \n\n\nIt brings out a problem if \nProject A depends on version 1.x but, Project B needs 4.x\n. This problem is recurrent when working with web frameworks. For example, you can work on a project which requires Django 1.3 while also maintaining a project which requires Django 1.0.\n\n\nA virtual environment solves this problem by building a sandbox for a project.\n\n\n5, Launching\n\n\nWindows vs. UNIX (Linux or Mac OS X).\n\n\nAt the top of scripts\n\n\n\n\nIn Windows, Python 2:\n\n\n#! python\n\n\n\n\n\n\nWindows, Python 3:\n\n\n#! python 3\n\n\n\n\n\n\nUNIX, Python 2:\n\n\n#!/usr/bin/env python\n\n\n\n\n\n\nUNIX, Python 3:\n\n\n#!/usr/bin/env python 3\n\n\n\n\n\n\nAdd:\n\n\n# -*coding: utf-8 -*-\n\n\n# -*coding: latin-1 -*-\n\n\n\n\n\n\n\n\nLaunch a script\n\n\n\n\nIn Windows, Python 2:\n\n\npython script.py\n\n\npy script.py\n\n\npy -2 script.py\n\n\npy -2.7 script.py\n\n\n\n\n\n\nIn UNIX, Python 2:\n\n\npython script.py\n\n\n\n\n\n\nIn Windows, Python 3:\n\n\npy -3 script.py\n\n\npy -3.5 script.py\n\n\n\n\n\n\nIn UNIX, Python 3:\n\n\npython3 script.py\n\n\n\n\n\n\n\n\nIn UNIX-based OS, with a shebang, once the script is created, we can go in the folder and enter \nchmod +x script.py\n to change the properties. Now, we can launch a script with \n./script.py\n.\n\n\nLaunch a module\n\n\n\n\nSometimes, launching Python modules cannot be done directly with \npip install \nscript\n for example.\n\n\nIn Windows (examples):\n\n\npy -2 -m pip install \nscript\n if \npip install script\n does not work.\n\n\npy -2 -m pip install flake8\n.\n\n\npy -2 -m pip install pylint\n.    \n\n\n\n\n\n\n\n\nLaunch the shell/bash\n\n\n\n\nThe shell, Python 2:\n\n\npython\n\n\npy -2\n\n\npy -2.7\n\n\n\n\n\n\nThe bash, Python 2:\n\n\npython\n\n\npython2\n\n\n\n\n\n\nThe shell, Python 3:\n\n\npy -3\n\n\npy -3.5\n\n\n\n\n\n\nThe bash, Python 3:\n\n\npython3", 
            "title": "Python Preliminaries"
        }, 
        {
            "location": "/Python_Preliminaries/#2-pip", 
            "text": "pypi  PyPY directory of libraries.  Important commands:   pip help  ou  pip --help .  pip install  module .  pip --version .  pip install --upgrade pip  sudo pip install  module .  pip uninstall  module .  pip install --user  module : circumvent the  sudo  command.", 
            "title": "2, pip"
        }, 
        {
            "location": "/Python_Preliminaries/#3-git", 
            "text": "After installing Git, to execute Python module in the Git Bash, (re)set the path in the Git Bash (example):  export PATH=\"$PATH:/c/Python27\" ,   export PATH=\"$PATH:/c/Python27/Scripts\" ,   The Git Bash simulates a UNIX-type environment.", 
            "title": "3, Git"
        }, 
        {
            "location": "/Python_Preliminaries/#4-virtual-environment", 
            "text": "virtual, environment, separate, project  When you install a library, it is accessible to all python scripts. Project A and B have access to the library.   It brings out a problem if  Project A depends on version 1.x but, Project B needs 4.x . This problem is recurrent when working with web frameworks. For example, you can work on a project which requires Django 1.3 while also maintaining a project which requires Django 1.0.  A virtual environment solves this problem by building a sandbox for a project.", 
            "title": "4, Virtual Environment"
        }, 
        {
            "location": "/Python_Preliminaries/#5-launching", 
            "text": "Windows vs. UNIX (Linux or Mac OS X).  At the top of scripts   In Windows, Python 2:  #! python    Windows, Python 3:  #! python 3    UNIX, Python 2:  #!/usr/bin/env python    UNIX, Python 3:  #!/usr/bin/env python 3    Add:  # -*coding: utf-8 -*-  # -*coding: latin-1 -*-     Launch a script   In Windows, Python 2:  python script.py  py script.py  py -2 script.py  py -2.7 script.py    In UNIX, Python 2:  python script.py    In Windows, Python 3:  py -3 script.py  py -3.5 script.py    In UNIX, Python 3:  python3 script.py     In UNIX-based OS, with a shebang, once the script is created, we can go in the folder and enter  chmod +x script.py  to change the properties. Now, we can launch a script with  ./script.py .  Launch a module   Sometimes, launching Python modules cannot be done directly with  pip install  script  for example.  In Windows (examples):  py -2 -m pip install  script  if  pip install script  does not work.  py -2 -m pip install flake8 .  py -2 -m pip install pylint .         Launch the shell/bash   The shell, Python 2:  python  py -2  py -2.7    The bash, Python 2:  python  python2    The shell, Python 3:  py -3  py -3.5    The bash, Python 3:  python3", 
            "title": "5, Launching"
        }, 
        {
            "location": "/Python_Nice_to_Have/", 
            "text": "CONTENT\n\n\n1, mistune Converts Documents\n\n\n2, logging Collects Data\n\n\n3, PIL Manipulates Images\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2. Consult the \nHitchicker\ns Guide to Python\n.\n\n\n\n\n1, \nmistune\n Converts Documents\n\n\nconvert, conversion, document, file\n\n\nmistune is a markdown parser, turn into HTML markdown\n\n\nThe \nmistune\n module is a markdown parser that turns markdown file into HTML. Run this script to see the html result in the terminal. For more on converting documents, check Pandoc. Install \nmistune\n with pip.\n\n\nimport mistune\n\ntext_block = 'The `mistune` module converts .md to .html.'\n\nhtml_block = mistune.markdown(text_block) # convert to html\n\nprint html_block\n\n\n\n\nOr run this command  to produce a .html document:\n\n\npython mistune_pgm.py \n mistune_html.html\n\n\n\n\n2, \nlogging\n Collects Data\n\n\n\n\nLogging is a library recording what users pass in the code.\n\n\nIt creates log files (text documents); it collects data.\n\n\nFirst, it is a good tool for gathering data.\n\n\nSecond, it could also be a good tool for debugging; we can monitor what is inputed in the variables.\n\n\n\n\nWe have a starting script.\n\n\ndef get_location(monster, door, player):\n    \nTakes 3 arguments; string type.\n    Asks to enter 3 inputs.\n    Uses the 3 inputs in a sentence to print a sentence.\n    \n\n\n    print \nThe %s behind the %s door was slayed by %s.\n % (monster, door, player)\n\n\nmonsterr = raw_input(\nEnter a monster type: \n)\ndoorr = raw_input(\nEnter a door color: \n)\nplayerr = raw_input(\nEnter the player's name: \n)\n\nget_location(monsterr, doorr, playerr)\n\n\n\n\nWe run the script, the console displays 3 input messages, we input strings (Blob, blue, Al), and the script prints the results.\n\n\nThe Blob behind the blue door was slayed by Al.\n\n\n\n\nNow, we add the \nlogging\n library.\n\n\nimport logging\n\n\nlogging.basicConfig(filename='game.log', level=logging.DEBUG) # invisible to the user\n\n\ndef get_location(monster, door, player):\n    \n\n    Takes 3 arguments; string type.\n    Asks to enter 3 inputs.\n    Uses the 3 inputs in a sentence to print a sentence.\n    \n\n\n    print \nThe %s behind the %s door was slayed by %s\n % (monster, door, player)\n\n\nmonsterr = raw_input(\nEnter a monster type: \n)\ndoorr = raw_input(\nEnter a door color: \n)\nplayerr = raw_input(\nEnter the player's name: \n)\n\nget_location(monsterr, doorr, playerr)\n\nlogging.info('monsterr: {}; doorr: {}; playerr {}'.format(\n    monsterr, doorr, playerr)) # invisible to the user\n\n\n\n\nThe user does not see the difference. But anytime someone runs the script, inputs are save to a log file: game.log.txt.\n\n\nWe open the file.\n\n\nINFO:root:monsterr: Blob; doorr: blue; playerr Al\nINFO:root:monsterr: Puik; doorr: red; playerr Felicia\n\n\n\n\nIn the \nlogging.basicConfig\n function, we select \nlevel=logging.DEBUG\n.\n\n\nThere are 6 log levels (higher to lower): \nCRITICAL\n, \nERROR\n, \nWARNING\n, \nINFO\n, \nDEBUG\n, \nNOTSET\n.\n\n\n\n\nINFO\n, \nDEBUG\n are information about the running of an app.\n\n\nWARNING\n is for keeping track of questionable or exceptional things happening.\n\n\nERROR\n, \nCRITICAL\n are for when things go wrong.\n\n\n\n\n3, \nPIL\n Manipulates Images\n\n\nThe \nPIL\n package stands for \nPython Image library\n or Pillow. Pillow adds image processing capabilities. The library supports many file formats and provides powerful image processing and graphics capabilities. Given these images:\n\n\n\n\n\n\n\n\nballons.jpg\n\n\nribbons.jpg\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport PIL\n\nballons = Image.open('ballons.jpg')\nribbons = Image.open('ribbons.jpg')\n\n# pixels; left, top, right, bottom (clockwise)\nbox = (22, 324, 826, 846)\nballons.crop(box).show()\n\nballons.rotate(90).show()\n\nballons.rotate(45).show() # won't work\n\nballons.rotate(45, expand = True).show() # instead\n\nballons.rotate(90).save('balloon2,jpg') # to the same directory\nballons.rotate(90).save('path/balloon2,jpg') # to another directory", 
            "title": "Python Nice to Have"
        }, 
        {
            "location": "/Python_Nice_to_Have/#2-logging-collects-data", 
            "text": "Logging is a library recording what users pass in the code.  It creates log files (text documents); it collects data.  First, it is a good tool for gathering data.  Second, it could also be a good tool for debugging; we can monitor what is inputed in the variables.   We have a starting script.  def get_location(monster, door, player):\n     Takes 3 arguments; string type.\n    Asks to enter 3 inputs.\n    Uses the 3 inputs in a sentence to print a sentence.\n     \n\n    print  The %s behind the %s door was slayed by %s.  % (monster, door, player)\n\n\nmonsterr = raw_input( Enter a monster type:  )\ndoorr = raw_input( Enter a door color:  )\nplayerr = raw_input( Enter the player's name:  )\n\nget_location(monsterr, doorr, playerr)  We run the script, the console displays 3 input messages, we input strings (Blob, blue, Al), and the script prints the results.  The Blob behind the blue door was slayed by Al.  Now, we add the  logging  library.  import logging\n\n\nlogging.basicConfig(filename='game.log', level=logging.DEBUG) # invisible to the user\n\n\ndef get_location(monster, door, player):\n     \n    Takes 3 arguments; string type.\n    Asks to enter 3 inputs.\n    Uses the 3 inputs in a sentence to print a sentence.\n     \n\n    print  The %s behind the %s door was slayed by %s  % (monster, door, player)\n\n\nmonsterr = raw_input( Enter a monster type:  )\ndoorr = raw_input( Enter a door color:  )\nplayerr = raw_input( Enter the player's name:  )\n\nget_location(monsterr, doorr, playerr)\n\nlogging.info('monsterr: {}; doorr: {}; playerr {}'.format(\n    monsterr, doorr, playerr)) # invisible to the user  The user does not see the difference. But anytime someone runs the script, inputs are save to a log file: game.log.txt.  We open the file.  INFO:root:monsterr: Blob; doorr: blue; playerr Al\nINFO:root:monsterr: Puik; doorr: red; playerr Felicia  In the  logging.basicConfig  function, we select  level=logging.DEBUG .  There are 6 log levels (higher to lower):  CRITICAL ,  ERROR ,  WARNING ,  INFO ,  DEBUG ,  NOTSET .   INFO ,  DEBUG  are information about the running of an app.  WARNING  is for keeping track of questionable or exceptional things happening.  ERROR ,  CRITICAL  are for when things go wrong.", 
            "title": "2, logging Collects Data"
        }, 
        {
            "location": "/Python_Nice_to_Have/#3-pil-manipulates-images", 
            "text": "The  PIL  package stands for  Python Image library  or Pillow. Pillow adds image processing capabilities. The library supports many file formats and provides powerful image processing and graphics capabilities. Given these images:     ballons.jpg  ribbons.jpg           import PIL\n\nballons = Image.open('ballons.jpg')\nribbons = Image.open('ribbons.jpg')\n\n# pixels; left, top, right, bottom (clockwise)\nbox = (22, 324, 826, 846)\nballons.crop(box).show()\n\nballons.rotate(90).show()\n\nballons.rotate(45).show() # won't work\n\nballons.rotate(45, expand = True).show() # instead\n\nballons.rotate(90).save('balloon2,jpg') # to the same directory\nballons.rotate(90).save('path/balloon2,jpg') # to another directory", 
            "title": "3, PIL Manipulates Images"
        }, 
        {
            "location": "/Freeze_the_Code/", 
            "text": "CONTENT\n\n\n1, Distutils (an Overview)\n\n\n2, cx-Freeze (with Snippets)\n\n\n3, pyInstaller (with Snippets)\n\n\n4, Nuitka (an Overview)\n\n\n5, PyPy (an Overview)\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2. Consult the \nHitchicker\ns Guide to Python\n.\n\n\n\n\n\n\nFreezing a Python file is similar to compiling the file. When running the executable file, the code runs faster than with interpreted code.\n\n\nhttp://docs.python-guide.org/en/latest/shipping/freezing/?highlight=freeze\n\n\n\n\n\n\nIt is done on Windows in the following examples.\n\n\nIt can be executed on all OS: Windows, Linux and Max OS X (using Wine for all UNIX OS).\n\n\n\n\n1, Distutils (an Overview)\n\n\n\n\nBuilding with distutils works well on all OS.\n\n\nThe package provides support for building and installing additional modules (libraries or packages) into a Python installation.\n\n\nThe new modules may be either 100%-pure Python, written in C, or coded in both Python and C.\n\n\ndistutils\n autogenerates an install script.\n\n\n\n\nDocumentation\n\n\n\n\nhttps://wiki.python.org/moin/Distutils/Tutorial\n\n\nhttps://docs.python.org/2/distutils/\n\n\n\n\n2, cx-Freeze (with Snippets)\n\n\n\n\ncx_Freeze\n freezes Python scripts into executables.\n\n\nAlike \npy2exe\n for Windows only and \npy2app\n for Mac OS X only.\n\n\nBuilding with \ncx_Freeze\n works best on Windows.\n\n\nSupports Python 2.3 or higher (including Python 3).\n\n\nSimpler than \ndistutils\n.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://cx-freeze.readthedocs.io\n\n\nhttps://anthony-tuininga.github.io/cx_Freeze/\n\n\nInstall \ncx_Freeze\n (works on Pyhon 2 \n 3).\n\n\nThe easiest way is with \npip install cx_Freeze\n.\n\n\npip3 install cx_Freeze\n.\n\n\n\n\n\n\n\n\nProcedure with a single script\n\n\nHave the \nhello.py\n ready.\n\n\ndef main():\nprint(\nHello World\n)\ninput(\nnPlease press ENTER to continue...\n)\n\nif __name__ == \n__main__\n:\nmain()\n\n\n\n\n\n\nCreate a \nsetup.py\n.\n\n\nFind out more in the doc.\n\n\n\n\n\n\nSimple setup.\n\n\n\n\nimport sys\nfrom cx_Freeze import setup, Executable\n\nsetup(\nname = \nHello\n,\nversion = \n0.1\n,\ndescription = \nA general utility\n,\nexecutables = [Executable(\nhello.py\n, base = None)]\n)\n\n\n\n\n\n\nBetter setup.\n\n\n\n\nimport sys\nfrom cx_Freeze import setup, Executable\n\nincludefiles = [] # include any files here that you wish\nexcludes = []\npackages = []\n\nexe = Executable(\n# what to build\nscript = \nhello.py\n, # the name of the main python script goes here \ninitScript = None,\nbase = None, # if creating a GUI instead of a console app, type \nWin32GUI\n\ntargetName = \nhello.exe\n, # the name of the executable file\nicon = None # if you want to use an icon file, specify the file name here\n)\n\nsetup(\n# the actual setup \n the definition of other misc. info\nname = \nHello\n, # the program name\nversion = \n0.1\n,\ndescription = \nA general utility\n,\nauthor = \nYour name\n,\nauthor_email = \nyour@email.com\n,\noptions = {\nbuild_exe\n: {\nexcludes\n:excludes,\npackages\n:packages, \ninclude_files\n:includefiles}},\nexecutables = [exe]\n)\n\n\n\n\n\n\nPlace the files in C:\\PythonXX\\, where pip and Python are installed.\n\n\nMake sure the path is in the environment variables or exported (we assume this is understood and done).\n\n\nOpen the shell (cmd), go to the C:\\PythonXX\\ directory.\n\n\nBuild the executable by calling the \nsetup.py\n script with the Python version of our choice.\n\n\n\n\npython setup.py build\n\n\n\n\n\n\nThe created files are located in C:\\PythonXX\\build\n\n\nGo in the subfolder, find the .exe file and launch it.\n\n\nOn Linux and Mac OS X, the .exe file must to be run with Wine (executing Windows apps)\n\n\nBuild an installer for Windows containing all the files.\n\n\n\n\npython setup.py bdist_msi\n\n\n\n\n\n\nThe installer is located in C:\\PythonXX\\dist\\\n\n\nIt can be distributed and installed/repaired/removed as a Windows program.\n\n\nThe installation creates what the build command does in a directory of our choice.\n\n\nBuild an installer on Mac OS X.\n\n\n\n\npython setup.py bdist_dmg\n\n\n\n\n\n\n\n\nProcedure with a set of scripts (with folders)\n\n\n\n\n\n\nThe project might look like this.\n\n\n\n\n\n\n\u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map\n\n\n\n\n\n\nUnder the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.\n\n\nThe setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\\n\n\nCreate a \nsetup.py\n.\n\n\nFind out more in the doc.\n\n\n\n\n\n\nSimple setup (or a more elaborate setup).\n\n\n\n\nimport sys\nfrom cx_Freeze import setup, Executable\n\nsetup(\nname = \nAny Names\n,\nversion = \n0.1\n,\ndescription = \nAny Description\n,\nexecutables = [Executable(\nbin/FileName.py\n, base = None)]\n)\n\n\n\n\n\n\nBuild the executable by calling the setup.py script with the Python version of choice.\n\n\n\n\nPros \n Cons\n\n\n\n\nIt can handle a set of files (such as with the last example).\n\n\nLinux and Mac OS X can read the executable (using Wine).\n\n\nEasy to deploy (download, open, execute).\n\n\nIt does not generate a single file, except with the \nbdist_\n commands. However, a distribution requires additional steps to deploy.\n\n\n\n\n3, pyInstaller (with Snippets)\n\n\n\n\npyinstaller\n is a simpler alternative to cx-Freeze.\n\n\nLibraries like \nPyQt\n, \nDjango\n or \nmatplotlib\n are fully supported, without having to handle plugins or external data files manually.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://www.pyinstaller.org/\n\n\nhttps://github.com/pyinstaller/pyinstaller\n\n\nInstall pyinstaller (works on Pyhon 2 \n 3).\n\n\nThe easiest way is with \npip install pyinstaller\n.\n\n\npip3 install pyinstaller\n.\n\n\n\n\n\n\n\n\nProcedure with a single script\n\n\n\n\nHave the \nhello.py\n ready.\n\n\n\n\ndef main():\nprint(\nHello World\n)\ninput(\nnPlease press ENTER to continue...\n)\n\nif __name__ == \n__main__\n:\nmain()\n\n\n\n\n\n\nPlace the files in C:\\PythonXX\\, where pip and Python are installed.\n\n\nMake sure the path is in the environment variables or exported (we assume this is understood and done).\n\n\nOpen the shell (cmd), go to the C:\\PythonXX\\ directory.\n\n\nBuild the executable.\n\n\n\n\npyinstaller hello.py\n\n\n\n\nOr\n\n\npyinstaller -D hello.py\n\n\n\n\n\n\nThe created files are located in C:\\PythonXX\\dist\n\n\nGo in the subfolder, find the .exe file and launch it.\n\n\nThe default option is \n-D\n (above) is facultative.\n\n\nBuild the single executable file with the bundle option \n-F\n (below).\n\n\n\n\npyinstaller -F hello.py\n\n\n\n\n\n\n\n\nThe created file is located in C:\\PythonXX\\dist\n\n\n\n\n\n\nFind the single .exe file and launch it.\n\n\n\n\n\n\nBuild with an icon (.ico file)\n\n\n\n\nThe .ico and .py files are located in the same folder, otherwise we have to specify the path with filename.ico.\n\n\n\n\npyinstaller -F -i \nfavicon.ico\n hello.py\n\n\n\n\n\n\n\n\nProcedure with a set of scripts (with folders)\n\n\n\n\n\n\nThe project might look like this.\n\n\n\n\n\n\n\u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map\n\n\n\n\n\n\n\n\nUnder the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.\n\n\n\n\n\n\nThe setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\\n\n\n\n\n\n\nBuild the single executable file.\n\n\n\n\n\n\npyinstaller -F -i \nfavicon.ico\n bin/hello.py\n\n\n\n\nPros \n Cons\n\n\n\n\nIt can handle a set of files (such as with the last example).\n\n\nLinux and Mac OS X can read the executable (using Wine).\n\n\nEasy to deploy (download, open, execute). Easier than with cx-Freeze, but without the flexibility a \nsetup.py\n file can allow.\n\n\nHowever, it can generate a single file: dowload, then launch in a single click.\n\n\n\n\n4, Nuitka (an Overview)\n\n\n\n\nPython compiler compatible with CPython.\n\n\nWorks on all OS.\n\n\nCompiled files are faster.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://nuitka.net/pages/overview.html.\n\n\nCheck out the requirements.\n\n\nNeed for a C++ compiler.\n\n\n\n\n\n\n\n\n5, PyPy (an Overview)\n\n\n\n\nAlternative to CPython: RPython (restricted Python).\n\n\nWorks on all OS, best on Linux.\n\n\nCompiled files are faster.\n\n\n\n\nDocumentation\n\n\n\n\nhttp://pypy.org/index.html", 
            "title": "Freeze the Code"
        }, 
        {
            "location": "/Freeze_the_Code/#2-cx-freeze-with-snippets", 
            "text": "cx_Freeze  freezes Python scripts into executables.  Alike  py2exe  for Windows only and  py2app  for Mac OS X only.  Building with  cx_Freeze  works best on Windows.  Supports Python 2.3 or higher (including Python 3).  Simpler than  distutils .   Documentation   http://cx-freeze.readthedocs.io  https://anthony-tuininga.github.io/cx_Freeze/  Install  cx_Freeze  (works on Pyhon 2   3).  The easiest way is with  pip install cx_Freeze .  pip3 install cx_Freeze .     Procedure with a single script  Have the  hello.py  ready.  def main():\nprint( Hello World )\ninput( nPlease press ENTER to continue... )\n\nif __name__ ==  __main__ :\nmain()   Create a  setup.py .  Find out more in the doc.    Simple setup.   import sys\nfrom cx_Freeze import setup, Executable\n\nsetup(\nname =  Hello ,\nversion =  0.1 ,\ndescription =  A general utility ,\nexecutables = [Executable( hello.py , base = None)]\n)   Better setup.   import sys\nfrom cx_Freeze import setup, Executable\n\nincludefiles = [] # include any files here that you wish\nexcludes = []\npackages = []\n\nexe = Executable(\n# what to build\nscript =  hello.py , # the name of the main python script goes here \ninitScript = None,\nbase = None, # if creating a GUI instead of a console app, type  Win32GUI \ntargetName =  hello.exe , # the name of the executable file\nicon = None # if you want to use an icon file, specify the file name here\n)\n\nsetup(\n# the actual setup   the definition of other misc. info\nname =  Hello , # the program name\nversion =  0.1 ,\ndescription =  A general utility ,\nauthor =  Your name ,\nauthor_email =  your@email.com ,\noptions = { build_exe : { excludes :excludes, packages :packages,  include_files :includefiles}},\nexecutables = [exe]\n)   Place the files in C:\\PythonXX\\, where pip and Python are installed.  Make sure the path is in the environment variables or exported (we assume this is understood and done).  Open the shell (cmd), go to the C:\\PythonXX\\ directory.  Build the executable by calling the  setup.py  script with the Python version of our choice.   python setup.py build   The created files are located in C:\\PythonXX\\build  Go in the subfolder, find the .exe file and launch it.  On Linux and Mac OS X, the .exe file must to be run with Wine (executing Windows apps)  Build an installer for Windows containing all the files.   python setup.py bdist_msi   The installer is located in C:\\PythonXX\\dist\\  It can be distributed and installed/repaired/removed as a Windows program.  The installation creates what the build command does in a directory of our choice.  Build an installer on Mac OS X.   python setup.py bdist_dmg    Procedure with a set of scripts (with folders)    The project might look like this.    \u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map   Under the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.  The setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\  Create a  setup.py .  Find out more in the doc.    Simple setup (or a more elaborate setup).   import sys\nfrom cx_Freeze import setup, Executable\n\nsetup(\nname =  Any Names ,\nversion =  0.1 ,\ndescription =  Any Description ,\nexecutables = [Executable( bin/FileName.py , base = None)]\n)   Build the executable by calling the setup.py script with the Python version of choice.   Pros   Cons   It can handle a set of files (such as with the last example).  Linux and Mac OS X can read the executable (using Wine).  Easy to deploy (download, open, execute).  It does not generate a single file, except with the  bdist_  commands. However, a distribution requires additional steps to deploy.", 
            "title": "2, cx-Freeze (with Snippets)"
        }, 
        {
            "location": "/Freeze_the_Code/#3-pyinstaller-with-snippets", 
            "text": "pyinstaller  is a simpler alternative to cx-Freeze.  Libraries like  PyQt ,  Django  or  matplotlib  are fully supported, without having to handle plugins or external data files manually.   Documentation   http://www.pyinstaller.org/  https://github.com/pyinstaller/pyinstaller  Install pyinstaller (works on Pyhon 2   3).  The easiest way is with  pip install pyinstaller .  pip3 install pyinstaller .     Procedure with a single script   Have the  hello.py  ready.   def main():\nprint( Hello World )\ninput( nPlease press ENTER to continue... )\n\nif __name__ ==  __main__ :\nmain()   Place the files in C:\\PythonXX\\, where pip and Python are installed.  Make sure the path is in the environment variables or exported (we assume this is understood and done).  Open the shell (cmd), go to the C:\\PythonXX\\ directory.  Build the executable.   pyinstaller hello.py  Or  pyinstaller -D hello.py   The created files are located in C:\\PythonXX\\dist  Go in the subfolder, find the .exe file and launch it.  The default option is  -D  (above) is facultative.  Build the single executable file with the bundle option  -F  (below).   pyinstaller -F hello.py    The created file is located in C:\\PythonXX\\dist    Find the single .exe file and launch it.    Build with an icon (.ico file)   The .ico and .py files are located in the same folder, otherwise we have to specify the path with filename.ico.   pyinstaller -F -i  favicon.ico  hello.py    Procedure with a set of scripts (with folders)    The project might look like this.    \u2514\u2500\u2500\u2500project\n    \u251c\u2500\u2500\u2500bin\n    \u2514\u2500\u2500\u2500map    Under the project folder, the bin folder contains the main .py file to be launched; this file relies on other files in its own folders or in the other folders.    The setup.py and project folders (bin, map, \u2026) are located in C:\\PythonXX\\    Build the single executable file.    pyinstaller -F -i  favicon.ico  bin/hello.py  Pros   Cons   It can handle a set of files (such as with the last example).  Linux and Mac OS X can read the executable (using Wine).  Easy to deploy (download, open, execute). Easier than with cx-Freeze, but without the flexibility a  setup.py  file can allow.  However, it can generate a single file: dowload, then launch in a single click.", 
            "title": "3, pyInstaller (with Snippets)"
        }, 
        {
            "location": "/Freeze_the_Code/#4-nuitka-an-overview", 
            "text": "Python compiler compatible with CPython.  Works on all OS.  Compiled files are faster.   Documentation   http://nuitka.net/pages/overview.html.  Check out the requirements.  Need for a C++ compiler.", 
            "title": "4, Nuitka (an Overview)"
        }, 
        {
            "location": "/Freeze_the_Code/#5-pypy-an-overview", 
            "text": "Alternative to CPython: RPython (restricted Python).  Works on all OS, best on Linux.  Compiled files are faster.   Documentation   http://pypy.org/index.html", 
            "title": "5, PyPy (an Overview)"
        }, 
        {
            "location": "/Decorators/", 
            "text": "Python Decorators\n\n\nForeword\n\n\nNotes and code snippets. Python 3. Consult the \nHitchicker\ns Guide to Python\n.\n\n\n\n\nCONTENT\n\n\nPython Decorators\n\n\nThe Goal of Decorators\n\n\nFirst Thing First\n\n\nInvoking a Decorator\n\n\nUsing Decorators\n\n\nCases\n\n\nMore Cases and Examples\n\n\n\n\n\n\n\n\n\n\n\n\nThe Goal of Decorators\n\n\nDecorators vs the Decorator Pattern\n\n\nPython decorators are best equated to macros.\n\n\nDefinition\n\n\n\n\nThey modify functions, and in the case of class decorators, entire classes. They provide a simpler alternative to metaclasses.\n\n\nA decorator itself is a callable that returns a callable.\n\n\nA decorator is a function that takes a function object as its argument, and returns a function object, and in the process, makes necessary modifications to the input function, possibly enhancing it.\n\n\nUseful for:\n\n\nbookkeeping,\n\n\nrepeating insularity functionalities,\n\n\nadding functionality of the function,\n\n\nmodifying the behavior of the function;\n\n\nin Django, Flask or other web frameworks.\n\n\n\n\n\n\n\n\nFirst Thing First\n\n\nFirst dive\n\n\nDecorators are easy to add or remove. They are nested functions; inserted in another function.\n\n\nBelow, \ninner()\n can live inside \nouter()\n. When you call \nouter()\n, you can also call \ninner()\n.\n\n\nfrom functools import wraps\n\ndef outer():\n    number = 5\n\n    def inner():\n        print(number)\n\n    inner()\n\nouter() # print 5\ninner() # cannot be called\n\n\n\n\nFunctions are first-class objects that can be passed around:\n\n\ndef apply(func, x, y):\n    return func(x, y)\n\ndef add(x, y):\n    return x + y\n\ndef sub(x, y):\n    return x - y\n\nprint(apply(add, 5,5)) # call apply(), that calls add()\nprint(apply(sub, 2,8)) # call apply(), that calls sub()\n\n\n\n\nOutput:\n\n\n10\n-6\n\n\n\n\nPredefine scope\n: define the environment for the function. \ninner()\n has only access to \nouter()\n and \nnumber = 5\n.\n\n\ndef close():\n    x = 5\n\n    def inner():\n        print(x)\n\n    return inner\n\nclosure = close() # change the function name\nclosure() # call the 'new' function\n\n\n\n\nOutput:\n\n\n5\n\n\n\n\ndef add_to_five(num):\n\n    def inner():\n        print(num + 5)\n\n    return inner\n\nfifteen = add_to_five(10)\nfifteen()\n\n\n\n\nOutput: \n\n\n15\n\n\n\n\nTake two !\n\n\nA decorator is a function that accept function as an argument and returns a function.\n\n\nf()\n is an object, and it\ns not different from classes (\nMyClass\n) or variables (\na\n).\n\n\n a = 10\n\n def f():\n...     pass\n...\n\n class MyClass():\n...     pass\n...\n\n print dir()\n['MyClass', '__builtins__', '__doc__', '__name__', '__package__', 'a', 'f']\n\n\n\n\nAssign a function to a variable:\n\n\ndef func():\n   print \nfunc()\n\n\nfuncObj = func\nfuncObj() # inheritance from func()\n\n\n\n\nFunctions can be passed around in the same way other types of object such as strings, integers, lists, etc. \n\n\nA function can accept a function as an argument and return a new function object:\n\n\ndef myFunction(in_function):\n   def out_function():\n      pass\n   return out_function\n\n\n\n\nThe \nmyFunction\n is indeed a decorator because, by definition, a decorator is a function that takes a function object as its argument, and returns a function object (!!!).\n\n\nElaborate:\n\n\ndef myFunction(in_function):\n   def out_function():\n      print \nEntry: \n, in_function.__name__\n      in_function()\n      print \nExit: \n, in_function.__name__\n   return out_function\n\n\n\n\nInvoking a Decorator\n\n\nPut a simple_function into the decorator (\nmyFunction\n) as an argument, and get a \nenhanced_function\n as a return value from the decorator.\n\n\ndef simple_function():\n   pass\n\nenhanced_function = myFunction(simple_function)\n\n\n\n\nApply the decorator syntax to the code above:\n\n\n@myFunction\ndef simple_function():\n   pass\n\n\n\n\n@myFunction\n is a decorator line or an annotation line. The \n@\n indicates the application of the decorator. A decorator is the function itself which takes a function, and returns a new function: \nmyFunction\n.\n\n\nWhen the compiler passes over this code, \nsimple_function()\n is compiled. The resulting function object is passed to the \nmyFunction\n code. It produces a function-like object that is substituted for the original \nsimple_function()\n.\n\n\nThe static method:\n\n\n class A:\n...    def s(x):\n...       print(x)\n...    s = staticmethod(s)\n... \n\n A.s(10)\n10\n\n\n\n\nThe equivalent code using a decorator looks like this:\n\n\n class A:\n...    @staticmethod\n...    def s(x):\n...       print(x)\n...\n\n A.s(10)\n10\n\n\n\n\nFor example, suppose you\nd like to do something at the entry and exit points of a function (perform some kind of security, tracing, locking, etc.):\n\n\n@entryExit\ndef func1():\n    print \ninside func1()\n\n\n@entryExit\ndef func2():\n    print \ninside func2()\n\n\n\n\n\nAnother example:\n\n\n def wrapper(f):\n...    return f\n...\n\n def foo():\n...    pass\n...\n\n\n\n\nThen, the wrapper can be used for rebinding \nfoo()\n like this:\n\n\n foo = wrapper(foo)\n\n\n\n\nSo, it\ns a decorator:\n\n\n @wrapper\n... def foo():\n...    pass\n\n\n\n\nWith a decorator defined as below:\n\n\ndef decorator(f):\n   #process function\n   return f\n\n\n\n\nMaps the following:\n\n\n@decorator\ndef f(arg):\n   return arg*arg\n\nf(123)  # output 15129\n\n\n\n\nInto:\n\n\ndef f(arg):\n   print arg*arg\nf = decorator(f)\n\n\n\n\nDecoration maps the following line:\n\n\nf(123)\n\n\n\n\nInto:\n\n\ndecorator(f)(123)\n\n\n\n\nA function decorator is applied to a function definition by placing it on the line before that function definition begins:\n\n\n@myDecorator\ndef aFunction():\n    print \ninside aFunction\n\n\n\n\n\nThe compiler passes over the code. The \naFunction()\n is compiled. The resulting function object is passed to the \nmyDecorator\n code. It produces a function-like object that is then substituted for the original \naFunction()\n.\n\n\nUsing Decorators\n\n\nWhat should the decorator do? Anything!\n\n\nDecorators allow you to modify code in functions or classes.\n\n\nThe only constraint upon the object returned by the decorator is that it can be used as a function. Any classes we use as decorators must implement \n__call__\n.\n\n\nExpect the original function code to be used at some point:\n\n\nclass myDecorator(object):\n\n    def __init__(self, f):\n        print \ninside myDecorator.__init__()\n\n        f() # Prove that function definition has completed\n\n    def __call__(self):\n        print \ninside myDecorator.__call__()\n\n\n@myDecorator\ndef aFunction():\n    print \ninside aFunction()\n\n\nprint \nFinished decorating aFunction()\n\n\naFunction()\n\n\n\n\nRun this code:\n\n\ninside myDecorator.__init__()\ninside aFunction()\nFinished decorating aFunction()\ninside myDecorator.__call__()\n\n\n\n\nThe constructor for \nmyDecorator\n is executed at the point of decoration of the function.\n\n\nCall \nf()\n inside \n__init__()\n. The creation of \nf()\n is complete before the decorator is called.\n\n\nThe decorator constructor receives the function object being decorated. \n\n\nCapture the function object in the constructor and later use it in the \n__call__()\n method.\n\n\nWhen \naFunction()\n is called after it has been decorated, the \nmyDecorator.__call__()\n method is called instead of the original code. The act of decoration replaces the original function object.\n\n\nBefore decorators were added:\n\n\ndef foo():\n    pass\nfoo = staticmethod(foo)\n\n\n\n\nWith the addition of the \n@\n decoration operator:\n\n\n@staticmethod\ndef foo():\n    pass\n\n\n\n\nThis syntax brings the idea of \napplying code to other code\n (i.e.: macros).\n\n\nSlightly More Useful\n\n\nUse the code in the decorated functions:\n\n\nclass entryExit(object):\n\n    def __init__(self, f):\n        self.f = f\n\n    def __call__(self):\n        print \nEntering\n, self.f.__name__\n        self.f()\n        print \nExited\n, self.f.__name__\n\n@entryExit\ndef func1():\n    print \ninside func1()\n\n\n@entryExit\ndef func2():\n    print \ninside func2()\n\n\nfunc1()\nfunc2()\n\n\n\n\nOutput:\n\n\nEntering func1\ninside func1()\nExited func1\nEntering func2\ninside func2()\nExited func2\n\n\n\n\nThe decorated functions now have the \nEntering\n and \nExited\n trace statements around the call.\n\n\nThe constructor stores the argument, which is the function object. In the call, use the \n__name__\n attribute of the function to display that function\ns name. \n\n\nThen call the function itself.\n\n\nUsing functions as decorators\n\n\nReplace the original function with an object of a class that has a \n__call__()\n method. But a function object is also callable. From the previous example, use a function instead of a class:\n\n\ndef entryExit(f):\n    def new_f():\n        print \nEntering\n, f.__name__\n        f()\n        print \nExited\n, f.__name__\n    return new_f\n\n@entryExit\ndef func1():\n    print \ninside func1()\n\n\n@entryExit\ndef func2():\n    print \ninside func2()\n\n\nfunc1()\nfunc2()\nprint func1.__name__\n\n\n\n\nnew_f()\n is defined within the body of \nentryExit()\n. It is created and returned when \nentryExit()\n is called.  \n\n\nnew_f()\n is a closure; it captures the actual value of \nf\n.\n\n\nOnce \nnew_f()\n has been defined, it is returned from \nentryExit()\n. The decorator mechanism can assign the result as the decorated function.\n\n\nThe output of \nprint func1.__name__\n is \nnew_f\n, because the \nnew_f\n function has been substituted for the original function during decoration. If this is a problem, change the name of the decorator function before you return it:\n\n\ndef entryExit(f):\n    def new_f():\n        print \nEntering\n, f.__name__\n        f()\n        print \nExited\n, f.__name__\n    new_f.__name__ = f.__name__\n    return new_f\n\n\n\n\nCases\n\n\n1 - Adding \n$\n to the return value from \nprice()\n function\n\n\ndef dollar(fn):\n    def new(*args):\n        return '$' + str(fn(*args))\n    return new\n\n@dollar\ndef price(amount, tax_rate):\n    return amount + amount*tax_rate\n\nprint price(100,0.1)\n\n\n\n\nOutput:\n\n\n$110\n\n\n\n\nThe dollar decorator function takes the \nprice()\n function, and returns enhanced the output from the original \nprice()\n after modifying the inner working. Note that the decorator enables us to do it without making any changes on the \nprice()\n function itself.\n\n\nA decorator works as a wrapper, modifying the behavior of the code before and after a target function execution, without the need to modify the function itself, enhancing the original functionality.\n\n\nWith the pound or euro as well:\n\n\ndef pound(fn):\n    def new(*args):\n        return (u\n\\u00A3\n).encode('utf-8') + str(fn(*args))\n        return '$' + str(fn(*args))\n    return new\n\n@pound\ndef price(amount, tax_rate):\n    return amount + amount*tax_rate\n\nprint price(100,0.1)\n\n\n\n\n2 - How many times a function called?\n\n\ndef count(f):\n    def inner(*args, **kargs):\n        inner.counter += 1\n        return f(*args, **kargs)\n    inner.counter = 0\n    return inner\n\n@count\ndef my_fnc():\n    pass\n\nif __name__ == '__main__':\n    my_fnc()\n    my_fnc()\n    my_fnc()\n\n    print 'my_fnc.counter=',my_fnc.counter\n\n\n\n\nOutput:\n\n\nmy_fnc.counter= 3\n\n\n\n\n3 - Timer\n\n\nimport time\ndef timer(f):\n    def inner(*args, **kargs):\n        t = time.time()\n        ret = f(*args, **kargs)\n        print 'timer = %s' %(time.time()-t) \n        return ret\n    return inner\n\n@timer\ndef my_fnc():\n    pass\n\nif __name__ == '__main__':\n    my_fnc()\n\n\n\n\nOutput:\n\n\ntimer = 5.96046447754e-06\n\n\n\n\nMore Cases and Examples\n\n\nlearnpython.org (tutorial, snippets)\n\n\nCollected examples\n\n\ndef logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner():\n        logging.debug(\nCalled {}\n.format(func.__name__))\n\n        return func()\n\n    return inner\n\n\n\n\ndef logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug(\nCalled {} with args {} and kwargs {}\n.format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    return inner\n\n\n\n\ndef logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug(\nCalled {} with args {} and kwargs {}\n.format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    inner.__doc__ = func.__doc__\n    inner.__name__ = func.__name__\n\n    return inner\n\n\n\n\ndef logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    @wraps(func) # decorator\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug(\nCalled {} with args {} and kwargs {}\n.format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    # replace all this\n    #inner.__doc__ = func.__doc__\n    #inner.__name__ = func.__name__\n    # with  from functools import wraps  at the top\n    # functools packages\n    # wraps is a decorator; see above\n\n    return inner\n\n\n\n\n@logme\ndef sub(x, y):\n    \nReturns the difference between two numbers\n\n    return x - y", 
            "title": "Decorators"
        }, 
        {
            "location": "/Decorators/#the-goal-of-decorators", 
            "text": "Decorators vs the Decorator Pattern  Python decorators are best equated to macros.  Definition   They modify functions, and in the case of class decorators, entire classes. They provide a simpler alternative to metaclasses.  A decorator itself is a callable that returns a callable.  A decorator is a function that takes a function object as its argument, and returns a function object, and in the process, makes necessary modifications to the input function, possibly enhancing it.  Useful for:  bookkeeping,  repeating insularity functionalities,  adding functionality of the function,  modifying the behavior of the function;  in Django, Flask or other web frameworks.", 
            "title": "The Goal of Decorators"
        }, 
        {
            "location": "/Decorators/#first-thing-first", 
            "text": "First dive  Decorators are easy to add or remove. They are nested functions; inserted in another function.  Below,  inner()  can live inside  outer() . When you call  outer() , you can also call  inner() .  from functools import wraps\n\ndef outer():\n    number = 5\n\n    def inner():\n        print(number)\n\n    inner()\n\nouter() # print 5\ninner() # cannot be called  Functions are first-class objects that can be passed around:  def apply(func, x, y):\n    return func(x, y)\n\ndef add(x, y):\n    return x + y\n\ndef sub(x, y):\n    return x - y\n\nprint(apply(add, 5,5)) # call apply(), that calls add()\nprint(apply(sub, 2,8)) # call apply(), that calls sub()  Output:  10\n-6  Predefine scope : define the environment for the function.  inner()  has only access to  outer()  and  number = 5 .  def close():\n    x = 5\n\n    def inner():\n        print(x)\n\n    return inner\n\nclosure = close() # change the function name\nclosure() # call the 'new' function  Output:  5  def add_to_five(num):\n\n    def inner():\n        print(num + 5)\n\n    return inner\n\nfifteen = add_to_five(10)\nfifteen()  Output:   15  Take two !  A decorator is a function that accept function as an argument and returns a function.  f()  is an object, and it s not different from classes ( MyClass ) or variables ( a ).   a = 10  def f():\n...     pass\n...  class MyClass():\n...     pass\n...  print dir()\n['MyClass', '__builtins__', '__doc__', '__name__', '__package__', 'a', 'f']  Assign a function to a variable:  def func():\n   print  func() \n\nfuncObj = func\nfuncObj() # inheritance from func()  Functions can be passed around in the same way other types of object such as strings, integers, lists, etc.   A function can accept a function as an argument and return a new function object:  def myFunction(in_function):\n   def out_function():\n      pass\n   return out_function  The  myFunction  is indeed a decorator because, by definition, a decorator is a function that takes a function object as its argument, and returns a function object (!!!).  Elaborate:  def myFunction(in_function):\n   def out_function():\n      print  Entry:  , in_function.__name__\n      in_function()\n      print  Exit:  , in_function.__name__\n   return out_function", 
            "title": "First Thing First"
        }, 
        {
            "location": "/Decorators/#invoking-a-decorator", 
            "text": "Put a simple_function into the decorator ( myFunction ) as an argument, and get a  enhanced_function  as a return value from the decorator.  def simple_function():\n   pass\n\nenhanced_function = myFunction(simple_function)  Apply the decorator syntax to the code above:  @myFunction\ndef simple_function():\n   pass  @myFunction  is a decorator line or an annotation line. The  @  indicates the application of the decorator. A decorator is the function itself which takes a function, and returns a new function:  myFunction .  When the compiler passes over this code,  simple_function()  is compiled. The resulting function object is passed to the  myFunction  code. It produces a function-like object that is substituted for the original  simple_function() .  The static method:   class A:\n...    def s(x):\n...       print(x)\n...    s = staticmethod(s)\n...   A.s(10)\n10  The equivalent code using a decorator looks like this:   class A:\n...    @staticmethod\n...    def s(x):\n...       print(x)\n...  A.s(10)\n10  For example, suppose you d like to do something at the entry and exit points of a function (perform some kind of security, tracing, locking, etc.):  @entryExit\ndef func1():\n    print  inside func1() \n\n@entryExit\ndef func2():\n    print  inside func2()   Another example:   def wrapper(f):\n...    return f\n...  def foo():\n...    pass\n...  Then, the wrapper can be used for rebinding  foo()  like this:   foo = wrapper(foo)  So, it s a decorator:   @wrapper\n... def foo():\n...    pass  With a decorator defined as below:  def decorator(f):\n   #process function\n   return f  Maps the following:  @decorator\ndef f(arg):\n   return arg*arg\n\nf(123)  # output 15129  Into:  def f(arg):\n   print arg*arg\nf = decorator(f)  Decoration maps the following line:  f(123)  Into:  decorator(f)(123)  A function decorator is applied to a function definition by placing it on the line before that function definition begins:  @myDecorator\ndef aFunction():\n    print  inside aFunction   The compiler passes over the code. The  aFunction()  is compiled. The resulting function object is passed to the  myDecorator  code. It produces a function-like object that is then substituted for the original  aFunction() .", 
            "title": "Invoking a Decorator"
        }, 
        {
            "location": "/Decorators/#using-decorators", 
            "text": "What should the decorator do? Anything!  Decorators allow you to modify code in functions or classes.  The only constraint upon the object returned by the decorator is that it can be used as a function. Any classes we use as decorators must implement  __call__ .  Expect the original function code to be used at some point:  class myDecorator(object):\n\n    def __init__(self, f):\n        print  inside myDecorator.__init__() \n        f() # Prove that function definition has completed\n\n    def __call__(self):\n        print  inside myDecorator.__call__() \n\n@myDecorator\ndef aFunction():\n    print  inside aFunction() \n\nprint  Finished decorating aFunction() \n\naFunction()  Run this code:  inside myDecorator.__init__()\ninside aFunction()\nFinished decorating aFunction()\ninside myDecorator.__call__()  The constructor for  myDecorator  is executed at the point of decoration of the function.  Call  f()  inside  __init__() . The creation of  f()  is complete before the decorator is called.  The decorator constructor receives the function object being decorated.   Capture the function object in the constructor and later use it in the  __call__()  method.  When  aFunction()  is called after it has been decorated, the  myDecorator.__call__()  method is called instead of the original code. The act of decoration replaces the original function object.  Before decorators were added:  def foo():\n    pass\nfoo = staticmethod(foo)  With the addition of the  @  decoration operator:  @staticmethod\ndef foo():\n    pass  This syntax brings the idea of  applying code to other code  (i.e.: macros).  Slightly More Useful  Use the code in the decorated functions:  class entryExit(object):\n\n    def __init__(self, f):\n        self.f = f\n\n    def __call__(self):\n        print  Entering , self.f.__name__\n        self.f()\n        print  Exited , self.f.__name__\n\n@entryExit\ndef func1():\n    print  inside func1() \n\n@entryExit\ndef func2():\n    print  inside func2() \n\nfunc1()\nfunc2()  Output:  Entering func1\ninside func1()\nExited func1\nEntering func2\ninside func2()\nExited func2  The decorated functions now have the  Entering  and  Exited  trace statements around the call.  The constructor stores the argument, which is the function object. In the call, use the  __name__  attribute of the function to display that function s name.   Then call the function itself.  Using functions as decorators  Replace the original function with an object of a class that has a  __call__()  method. But a function object is also callable. From the previous example, use a function instead of a class:  def entryExit(f):\n    def new_f():\n        print  Entering , f.__name__\n        f()\n        print  Exited , f.__name__\n    return new_f\n\n@entryExit\ndef func1():\n    print  inside func1() \n\n@entryExit\ndef func2():\n    print  inside func2() \n\nfunc1()\nfunc2()\nprint func1.__name__  new_f()  is defined within the body of  entryExit() . It is created and returned when  entryExit()  is called.    new_f()  is a closure; it captures the actual value of  f .  Once  new_f()  has been defined, it is returned from  entryExit() . The decorator mechanism can assign the result as the decorated function.  The output of  print func1.__name__  is  new_f , because the  new_f  function has been substituted for the original function during decoration. If this is a problem, change the name of the decorator function before you return it:  def entryExit(f):\n    def new_f():\n        print  Entering , f.__name__\n        f()\n        print  Exited , f.__name__\n    new_f.__name__ = f.__name__\n    return new_f", 
            "title": "Using Decorators"
        }, 
        {
            "location": "/Decorators/#cases", 
            "text": "1 - Adding  $  to the return value from  price()  function  def dollar(fn):\n    def new(*args):\n        return '$' + str(fn(*args))\n    return new\n\n@dollar\ndef price(amount, tax_rate):\n    return amount + amount*tax_rate\n\nprint price(100,0.1)  Output:  $110  The dollar decorator function takes the  price()  function, and returns enhanced the output from the original  price()  after modifying the inner working. Note that the decorator enables us to do it without making any changes on the  price()  function itself.  A decorator works as a wrapper, modifying the behavior of the code before and after a target function execution, without the need to modify the function itself, enhancing the original functionality.  With the pound or euro as well:  def pound(fn):\n    def new(*args):\n        return (u \\u00A3 ).encode('utf-8') + str(fn(*args))\n        return '$' + str(fn(*args))\n    return new\n\n@pound\ndef price(amount, tax_rate):\n    return amount + amount*tax_rate\n\nprint price(100,0.1)  2 - How many times a function called?  def count(f):\n    def inner(*args, **kargs):\n        inner.counter += 1\n        return f(*args, **kargs)\n    inner.counter = 0\n    return inner\n\n@count\ndef my_fnc():\n    pass\n\nif __name__ == '__main__':\n    my_fnc()\n    my_fnc()\n    my_fnc()\n\n    print 'my_fnc.counter=',my_fnc.counter  Output:  my_fnc.counter= 3  3 - Timer  import time\ndef timer(f):\n    def inner(*args, **kargs):\n        t = time.time()\n        ret = f(*args, **kargs)\n        print 'timer = %s' %(time.time()-t) \n        return ret\n    return inner\n\n@timer\ndef my_fnc():\n    pass\n\nif __name__ == '__main__':\n    my_fnc()  Output:  timer = 5.96046447754e-06", 
            "title": "Cases"
        }, 
        {
            "location": "/Decorators/#more-cases-and-examples", 
            "text": "learnpython.org (tutorial, snippets)  Collected examples  def logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner():\n        logging.debug( Called {} .format(func.__name__))\n\n        return func()\n\n    return inner  def logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug( Called {} with args {} and kwargs {} .format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    return inner  def logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug( Called {} with args {} and kwargs {} .format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    inner.__doc__ = func.__doc__\n    inner.__name__ = func.__name__\n\n    return inner  def logme(func):\n    import logging\n    logging.basicConfig(level = logging.DEBUG)\n\n    @wraps(func) # decorator\n    def inner(*args, **kwargs): # * for tuple, ** for dict.\n        logging.debug( Called {} with args {} and kwargs {} .format(\n            func.__name__, args, kwargs)) # to print the tuple and dict.\n\n        return func(*args, **kwargs) # to use the tuple and dict.\n\n    # replace all this\n    #inner.__doc__ = func.__doc__\n    #inner.__name__ = func.__name__\n    # with  from functools import wraps  at the top\n    # functools packages\n    # wraps is a decorator; see above\n\n    return inner  @logme\ndef sub(x, y):\n     Returns the difference between two numbers \n    return x - y", 
            "title": "More Cases and Examples"
        }, 
        {
            "location": "/Write_Better_Python/", 
            "text": "CONTENT\n\n\n1, PEP20\n\n\n2, PEP8\n\n\n3, PEP Diagnoses with flake8 \n pylint\n\n\n4, Help \n Docstrings\n\n\n5, pdb Debugs Scripts\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2. Consult the \nHitchicker\ns Guide to Python\n.\n\n\n\n\n1, PEP20\n\n\nPEP : Python Enhancement Proposals. In the Python shell, type \nimport this\n. We get the following \neaster egg\n.\n\n\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n\n\n\nThe \neaster egg\n is a poem. A poem of best practices.\n\n\n\n\nExplicit is better than implicit. Don\nt add numbers to strings.\n\n\nReadability counts. Use the grammar of PEP8. Add comments.\n\n\nSpecial cases aren\nt special enough to break the rules. The\nlen\n function for all. A function applies to all. A method applied to some. Find the built-in function before coding new functions.\n\n\nThe code should be pleasant and easy to read.\n\n\n\n\n2, PEP8\n\n\nPEP : Python Enhancement Proposals. Improves the look of the code. Here are a few principles:\n\n\n\n\nImport at the top and separate.\n\n\n1 space between parameters and variables.\n\n\n4-space indentation.\n\n\nTwo-line space between independent functions.\n\n\n1 space between operators.\n\n\n2-line space between class and other objects.\n\n\nClasses are capitalized.\n\n\nFunctions and methods are not capitalized.\n\n\n1-line space between class functions.\n\n\nConstant variable in uppercase.\n\n\nVariable in lowercase and long names.\n\n\n\n\nHere is an example where to apply these principles.\n\n\nimport sys # import at the top and separate\nimport random\n\n\ndef foo_Bar(arg1, arg2, arg3, arg4): # 1 space between parameters and variables\n    return arg1, arg2, arg3, arg4 # 4-space indentation\n\n\ndef bar(*args): # 2-line space between independent functions\n    # bad spacing\n    return 2 + 2 # 1 space between operators\n\n\nclass Submarine: # 2-line space between class and other objects; classes are capitalized\n    def one(self): # functions and methods are not capitalized\n        return 1\n\n    def two(self): # 1-line space between class functions\n        return 2\n\nCONSTANT = 10 # constant variable in uppercase\n\nalpha, beta, charlie, delta = foo_Bar( # variable in lowercase and long names\n \na long string\n, # one practical way to stack things\n \na longer string\n,\n \nyet another long string\n, \n \nand other crazy string\n)\n\none = 1 # 1 space\nthree = 3\nfourteen = 14\n\nprint alpha\nprint fourteen\n\nprint Submarine().two() # class.method\n\n\n\n\n3, PEP Diagnoses with \nflake8\n \n \npylint\n\n\nThe modules can be integrated with IDE and text editors (VIM, Emacs, gedit, Notepad++, etc.).\n\n\nflake8\n\n\n\n\nInstall \nflake8\n with pip.\n\n\nRun a script with \nflake8\n: \npython flake8 script.py\n. \n\n\nInstead of running the code, \nflake8\n runs a diagnosis and returns the results. \n\n\nThe results suggest improvement to the look of the script. \n\n\nIt shows a list: the line number, the character positions, and the improvement. We can then go back to the script, improve it and rerun \nflake8\n.\n\n\n\n\npylint\n\n\n\n\nInstall \npylint\n with pip.\n\n\nRun a script with \nflake8\n: \npython pylint script.py\n. \n\n\n\n\npylint\n runs a diagnosis and returns a report about the script.\n\n\n4, Help \n Docstrings\n\n\n\n\nIn the shell, for any command \ncmd\n, type \nhelp(cmd)\n to get a definition.\n\n\nType \ndir(cmd)\n to get the attributes from the Python glossary.\n\n\nA docstrings is an enhancement to the \nhelp\n glossary.\n\n\n\n\nWithout docstrings.\n\n\ndef does_something(arg):\n    if isinstance(arg, (int, float)):\n        return arg + 10\n    elif isinstance(arg, str):\n        return str * 3\n    else:\n        raise TypeError(\ndoes_something only takes ints, floats, and strings\n)\n\n\n\n\n\n\nWe should never read a code to figure out what it does! \n\n\nAdd docstrings: \n   \n on 1 line\n\n\nAdd docstrings: several lines (see below).\n\n\n\n\ndef does_better(arg):\n    \nTakes one argument and does something based on type.\n    If arg is a string, returns arg * 3;\n    If arg is an int or float, returns arg + 10\n    \n\n    if isinstance(arg, (int, float)):\n        return arg + 10\n    elif isinstance(arg, str):\n        return str * 3\n    else:\n        raise TypeError(\ndoes_something only takes ints, floats, and strings\n)\n\n\n\n\n\n\nIn the shell, type \nhelp(docstrings.does_better)\n to print the function\ns docstring.\n\n\n\n\n5, \npdb\n Debugs Scripts\n\n\nGo inside the code.\n\n\nThe next following script is bugged.\n\n\n# a list\nmy_list = [5, 2, 1, True, \nabcdefg\n, 3, False, 4]\n\n# modify the list\ndel my_list[3]\ndel my_list[4]\ndel my_list[6]\nprint my_list\n\n\n\n\nWe run the code and we get an error. The sloppy fix would be to add print statements.\n\n\n# a list\nmy_list = [5, 2, 1, True, \nabcdefg\n, 3, False, 4]\n\n# modify the list\ndel my_list[3] # ADD\nprint my_list\ndel my_list[4] # ADD\nprint my_list\ndel my_list[6] # ADD\nprint my_list\n\n\n\n\nInstead, use the Python debugger: \npdb\n and \nset_trace()\n in the code.\n\n\nimport pdb # ADD\n\n\n# a list\nmy_list = [5, 2, 1, True, \nabcdefg\n, 3, False, 4]\n\npdb.set_trace() # ADD\ndel my_list[3]\ndel my_list[4]\ndel my_list[6]\nprint my_list\n\n\n\n\nWhen we run the script, the routine stops at each line following the \nset_trace()\n function. We get a \n(Pdb)\n prompt. We can type in the variable name as if we were in the shell to see what is going on.\n\n\nWe punch \nn\n or \nnext\n to step forward in the script. \npdb\n pinpoint the trouble areas. In the current case, we want to delete a value at index 6 when the list had been reduced to 5 values (it is impossible to delete what is inexistant!).\n\n\nimport pdb\n\n\n# a list\nmy_list = [5, 2, 1, True, \nabcdefg\n, 3, False, 4]\n\npdb.set_trace()\ndel my_list[3] # [5, 2, 1, \nabcdefg\n, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[6] # [5, 2, 1, 3, 4]\nprint my_list\n\n\n\n\nAn alternative way.\n\n\n# a list\nmy_list = [5, 2, 1, True, \nabcdefg\n, 3, False, 4]\n\nimport pdb; pdb.set_trace() # ADD\ndel my_list[3] # [5, 2, 1, \nabcdefg\n, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list\n\n\n\n\nChange the script and rerun it.\n\n\nimport pdb\n\n\n# a list\nmy_list = [5, 2, 1, True, \nabcdefg\n, 3, False, 4]\n\npdb.set_trace()\ndel my_list[3] # [5, 2, 1, \nabcdefg\n, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list\n\n\n\n\nOnce the script is debugged, delete the \npdb\n stuff (it is a temporary measure).\n\n\n# a list\nmy_list = [5, 2, 1, True, \nabcdefg\n, 3, False, 4]\n\ndel my_list[3] # [5, 2, 1, \nabcdefg\n, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list", 
            "title": "Write Better Python with PEP"
        }, 
        {
            "location": "/Write_Better_Python/#2-pep8", 
            "text": "PEP : Python Enhancement Proposals. Improves the look of the code. Here are a few principles:   Import at the top and separate.  1 space between parameters and variables.  4-space indentation.  Two-line space between independent functions.  1 space between operators.  2-line space between class and other objects.  Classes are capitalized.  Functions and methods are not capitalized.  1-line space between class functions.  Constant variable in uppercase.  Variable in lowercase and long names.   Here is an example where to apply these principles.  import sys # import at the top and separate\nimport random\n\n\ndef foo_Bar(arg1, arg2, arg3, arg4): # 1 space between parameters and variables\n    return arg1, arg2, arg3, arg4 # 4-space indentation\n\n\ndef bar(*args): # 2-line space between independent functions\n    # bad spacing\n    return 2 + 2 # 1 space between operators\n\n\nclass Submarine: # 2-line space between class and other objects; classes are capitalized\n    def one(self): # functions and methods are not capitalized\n        return 1\n\n    def two(self): # 1-line space between class functions\n        return 2\n\nCONSTANT = 10 # constant variable in uppercase\n\nalpha, beta, charlie, delta = foo_Bar( # variable in lowercase and long names\n  a long string , # one practical way to stack things\n  a longer string ,\n  yet another long string , \n  and other crazy string )\n\none = 1 # 1 space\nthree = 3\nfourteen = 14\n\nprint alpha\nprint fourteen\n\nprint Submarine().two() # class.method", 
            "title": "2, PEP8"
        }, 
        {
            "location": "/Write_Better_Python/#3-pep-diagnoses-with-flake8-pylint", 
            "text": "The modules can be integrated with IDE and text editors (VIM, Emacs, gedit, Notepad++, etc.).  flake8   Install  flake8  with pip.  Run a script with  flake8 :  python flake8 script.py .   Instead of running the code,  flake8  runs a diagnosis and returns the results.   The results suggest improvement to the look of the script.   It shows a list: the line number, the character positions, and the improvement. We can then go back to the script, improve it and rerun  flake8 .   pylint   Install  pylint  with pip.  Run a script with  flake8 :  python pylint script.py .    pylint  runs a diagnosis and returns a report about the script.", 
            "title": "3, PEP Diagnoses with flake8 &amp; pylint"
        }, 
        {
            "location": "/Write_Better_Python/#4-help-docstrings", 
            "text": "In the shell, for any command  cmd , type  help(cmd)  to get a definition.  Type  dir(cmd)  to get the attributes from the Python glossary.  A docstrings is an enhancement to the  help  glossary.   Without docstrings.  def does_something(arg):\n    if isinstance(arg, (int, float)):\n        return arg + 10\n    elif isinstance(arg, str):\n        return str * 3\n    else:\n        raise TypeError( does_something only takes ints, floats, and strings )   We should never read a code to figure out what it does!   Add docstrings:       on 1 line  Add docstrings: several lines (see below).   def does_better(arg):\n     Takes one argument and does something based on type.\n    If arg is a string, returns arg * 3;\n    If arg is an int or float, returns arg + 10\n     \n    if isinstance(arg, (int, float)):\n        return arg + 10\n    elif isinstance(arg, str):\n        return str * 3\n    else:\n        raise TypeError( does_something only takes ints, floats, and strings )   In the shell, type  help(docstrings.does_better)  to print the function s docstring.", 
            "title": "4, Help &amp; Docstrings"
        }, 
        {
            "location": "/Write_Better_Python/#5-pdb-debugs-scripts", 
            "text": "Go inside the code.  The next following script is bugged.  # a list\nmy_list = [5, 2, 1, True,  abcdefg , 3, False, 4]\n\n# modify the list\ndel my_list[3]\ndel my_list[4]\ndel my_list[6]\nprint my_list  We run the code and we get an error. The sloppy fix would be to add print statements.  # a list\nmy_list = [5, 2, 1, True,  abcdefg , 3, False, 4]\n\n# modify the list\ndel my_list[3] # ADD\nprint my_list\ndel my_list[4] # ADD\nprint my_list\ndel my_list[6] # ADD\nprint my_list  Instead, use the Python debugger:  pdb  and  set_trace()  in the code.  import pdb # ADD\n\n\n# a list\nmy_list = [5, 2, 1, True,  abcdefg , 3, False, 4]\n\npdb.set_trace() # ADD\ndel my_list[3]\ndel my_list[4]\ndel my_list[6]\nprint my_list  When we run the script, the routine stops at each line following the  set_trace()  function. We get a  (Pdb)  prompt. We can type in the variable name as if we were in the shell to see what is going on.  We punch  n  or  next  to step forward in the script.  pdb  pinpoint the trouble areas. In the current case, we want to delete a value at index 6 when the list had been reduced to 5 values (it is impossible to delete what is inexistant!).  import pdb\n\n\n# a list\nmy_list = [5, 2, 1, True,  abcdefg , 3, False, 4]\n\npdb.set_trace()\ndel my_list[3] # [5, 2, 1,  abcdefg , 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[6] # [5, 2, 1, 3, 4]\nprint my_list  An alternative way.  # a list\nmy_list = [5, 2, 1, True,  abcdefg , 3, False, 4]\n\nimport pdb; pdb.set_trace() # ADD\ndel my_list[3] # [5, 2, 1,  abcdefg , 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list  Change the script and rerun it.  import pdb\n\n\n# a list\nmy_list = [5, 2, 1, True,  abcdefg , 3, False, 4]\n\npdb.set_trace()\ndel my_list[3] # [5, 2, 1,  abcdefg , 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list  Once the script is debugged, delete the  pdb  stuff (it is a temporary measure).  # a list\nmy_list = [5, 2, 1, True,  abcdefg , 3, False, 4]\n\ndel my_list[3] # [5, 2, 1,  abcdefg , 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, False, 4]\ndel my_list[4] # [5, 2, 1, 3, 4]\nprint my_list", 
            "title": "5, pdb Debugs Scripts"
        }, 
        {
            "location": "/Regex/", 
            "text": "CONTENT\n\n\n1, Additional Commands (unused)\n\n\n2, match \n search \n One Expression, One Search\n\n\nRecap:\n\n\n\n\n\n\n3, Escape Characters \n Comprenhensive Search\n\n\nRecap:\n\n\n\n\n\n\n4, Repetitions \n Power Search\n\n\nRecap:\n\n\n\n\n\n\n5, Sets \n Target Search\n\n\nRecap:\n\n\n\n\n\n\n6, Boundaries \n Smart Search\n\n\nRecap:\n\n\n\n\n\n\n7, Groups \n Subdivided Search\n\n\nRecap:\n\n\n\n\n\n\n8, Compile \n Build Dictionaries \n Operationalized Search\n\n\nRecap:\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2 in Windows. UNIX-based OS generate slighly different results. Contrary to Windows, UNIX-based OS easily process international characters. Consult the \nHitchicker\ns Guide to Python\n.\n\n\n\n\nCheck out \nManaging Your Biological Data with Python, Chapter 9, Pattern Matching and Text Mining\n.\n\n\nTest\n.\n\n\n\n\n\n\n1, Additional Commands (unused)\n\n\n\n\nspan\n, return a tuple containing the start, end positions of the match.\n\n\nstart\n, return the starting position of the match.\n\n\nend\n, return the ending position of the match.\n\n\ngroup\n, return the string matched by the RE\n\n\ngroups\n, return a tuple containing the strings fal all the subgroups\n\n\nsplit(s)\n, split the string into a list, splitting it wherever the RE matches\n\n\nsub(r, s)\n, find all substrings where the RE matches and replaces them with a different string\n\n\nsubn(r, s)\n, do the same thing, but return the new string and the number of replacements\n\n\nIGNORECASE\n, \nI\n, case-insensitive matches.\n\n\n\n\n2, \nmatch\n \n \nsearch\n \n One Expression, One Search\n\n\nFirst, we have a text file called names.txt.\n\n\nLiff, Kenneth   kenneth@submarine.com   (555) 555-5555  Teacher, Submarine  @kennethliff\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\nArthur, King    king_arthur@camelot.co.uk   King, Camelot\n\u00d6sterberg, Gustav   governor@norrbotten.co.se   Governor, Norrbotten    @gustata\n, Tim   tim@killerrabbit.com    Enchanter, Killer Rabbit Cave\nCarson, Ryan    ryan@submarine.com  (555) 555-5543  CEO, Submarine  @ryancarson\nDoctor  The doctor+companion@tardis.co.uk   Time Lord, Gallifrey\nExampleson, Exampleme   me@example.com  555-555-5552    Example, Example Co.    @exemple\nObama, Barack   president.44@us.gov 555 555-5551    President, United States of America @potus44\nChalks, Andrew  andrew@submarine.com    (555) 555-5553  Teacher, Submarine  @chalkers\nVader, Darth    darth-vader@empire.gov  (555) 555-4444  Sith lord, Galactic Empire  @darthvader\n\n\n\n\nSecond, we want to process the file: extract strings. \n\n\nWe could use \nre.match\n, but the function is picky. \nre.search\n is more forgiving in terms of precision. In both cases, the function should return the first match it finds, then stop.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nprint re.search(r'McFarland', data).group() # r for raw string, no need for \\\nprint re.search(r'Arthur', data).group() # search in the strings\n\n\n\n\nResults (in Windows).\n\n\n_sre.SRE_Match object at 0x00000000021DB510\n\n\n_sre.SRE_Match object at 0x00000000021DB510\n\n\n\n\n\nResults may vary in UNIX-type OS. In Linux, we get.\n\n\n_sre.SRE_Match object; span=(0, 8), match='McFarland'\n\n\n_sre.SRE_Match object; span=(10, 15), match='Arthur'\n\n\n\n\n\nChange the script and rerun it.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nprint re.search(r'McFarland', data).group() # CHANGE\nprint re.search(r'Arthur', data).group() # CHANGE\n\n\n\n\nResults.\n\n\nMcFarland\nArthur\n\n\n\n\nAlternatively.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nlast_name = r'McFarland'\nfirst_name = r'Arthur'\nprint re.search(last_name, data).group() # CHANGE\nprint re.search(first_name, data).group() # CHANGE\n\n\n\n\nRecap:\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\n\n\n3, Escape Characters \n Comprenhensive Search\n\n\n\n\n\\w\n, match any Unicode word character.\n\n\n\\W\n, match anything that isn\nt a Unicode word character.\n\n\n\\s\n, any whitespace.\n\n\n\\S\n, not.\n\n\n\\d\n, any number 0-9.\n\n\n\\D\n, not.\n\n\n\\b\n, boundaries or the edges of a word.\n\n\n\\B\n, not.\n\n\n\n\nTry.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\nprint re.match(r'\\w, \\w', data) # CHANGE\n\n\n\n\nResults.\n\n\nNone\n\n\n\n\nWe get \nNone\n because of \nre.match\n. Instead, try.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch phone numbers\nprint re.search(r'\\d\\d\\d-\\d\\d\\d\\d', data).group() # CHANGE\n\n\n\n\nResults.\n\n\n555-5555\n\n\n\n\nImprove the code.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch complete phone numbers\nprint re.search(r'\\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d', data).group() # CHANGE\n\n\n\n\nResults.\n\n\n(555) 555-5555\n\n\n\n\nRecap:\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (see above).\n\n\n\n\n4, Repetitions \n Power Search\n\n\n\n\n{3}\n, repeat 3 times.\n\n\n{,3}\n, repeat 0 to 3 times.\n\n\n{3,}\n, repeat 3 or more times.\n\n\n{3, 5}\n, repeat 3, 4 or 5 times.\n\n\n?\n, repeat 0 or once.\n\n\n*\n, repeat at least 0 times (no upper bound).\n\n\n+\n, repeat at least once (no upper bound).\n\n\n\n\nCatch a name.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch a name\nprint re.search(r'\\w+, \\w+', data).group() # CHANGE\n\n\n\n\nResults.\n\n\nLiff, Kenneth\n\n\n\n\nCatch a phone number.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch a complete phone numbers\nprint re.search(r'\\(\\d{3}\\) \\d{3}-\\d{4}', data).group() # CHANGE\n\n\n\n\nResults.\n\n\n(555) 555-5555\n\n\n\n\nCatch multiple phone numbers.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# more universal way (parentheses, hyphen, space become optional)\n# on multiple lines!\nprint re.findall(r'\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4}', data) # CHANGE\n\n\n\n\nResults.\n\n\n['(555) 555-5555', '(555) 555-5555', '(555) 555-5543', '555-555-5552', '555 555-5551', '(555) 555-5553', '(555) 555-4444']\n\n\n\n\nCatch multiple names.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# universal way for names\nprint re.findall(r'\\w*, \\w+', data)  # CHANGE: findall\n\n\n\n\nResults.\n\n\n['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', ', Tim', 'Enchanter, Killer', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Obama, Barack', 'President, United', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic']\n\n\n\n\nRecap:\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (see above).\n\n\nfindall\n.\n\n\n\n\n5, Sets \n Target Search\n\n\nCatch patterns. We only need unique characters even when a word contains repetitive characters.\n\n\n\n\n[aple]\n, search for \napple\n.\n\n\n[a-z]\n, search for any lowercase letters.\n\n\n[^2]\n, search for anything that is not 2.\n\n\n.\n, stands for any possible character.\n\n\n\n\nFor finding email addresses, search better \ncures\n on email adresses. Search for email address regex or email address regular expressions on Stack Overflow, Quora, etc.\n\n\nWe can also try.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# find emails\nprint re.findall(r'[-\\w\\d+.]+@[-\\w\\d.]+', data) # CHANGE\n\n\n\n\nResults.\n\n\n['kenneth@submarine.com', 'arty@submarine.com', 'king_arthur@camelot.co.uk', 'governor@norrbotten.co.se', 'tim@killerrabbit.com', 'ryan@submarine.com', 'doctor+companion@tardis.co.uk', 'me@example.com', 'president.44@us.gov', 'andrew@submarine.com', 'darth-vader@empire.gov']\n\n\n\n\nRetrieve \nsubmarine\n. All characters are unique. The set should be \nsubmarine\n.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# set [submarine] should catch 'submarine'\n# add word boundaries, at least once, ignore lower or upper cases\nprint re.findall(r'\\b[submarine]+\\b', data, re.IGNORECASE) # CHANGE\n\n\n\n\nResults.\n\n\n['submarine', 'Submarine', 'submarine', 'Submarine', 'se', 'submarine', 'Submarine', 'me', 'us', 'submarine', 'Submarine']\n\n\n\n\nHowever, we also collect shorter strings (\nse\n, \nme\n, \nus\n, \nMaria\n) with characters from [submarine]. If we wanted to limit the search to \nsubmarine\n only.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# always 9 letters\nprint re.findall(r'\\b[submarine]{9}\\b', data, re.IGNORECASE) # CHANGE\n\n\n\n\nResults.\n\n\n['submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine']\n\n\n\n\nRecap:\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\n\n\n\n\n\n\n6, Boundaries \n Smart Search\n\n\n\n\n'''\n, add a multiline string.\n\n\n\\b@\n, word boundary \n@\n.\n\n\n\\b\n, word boundary \n.\n\n\n^\n, ignore.\n\n\n\\t\n, tab character.\n\n\n.\n, any character.\n\n\n\n\nFind emails with word boundaries, spaces, words, explicit spaces (without using VERBOSE!!!), at least once for any number of characters, ignore tabs, and ignore newlines.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# multiline strings\nprint re.findall(r'''\n    \\b@[-\\w\\d.]* # First a word boundary, an @, and then any number of characters\n    [^gov\\t] # Ignore 1+ instances of the letters 'g', 'o' or 'v' and a tab\n    \\b # Another word boundary\n''', data, re.VERBOSE|re.I)\n\n\n\n\nResults.\n\n\n['@submarine.com', '@submarine.com', '@camelot.co.uk', '@norrbotten.co.se', '@killerrabbit.com', '@submarine.com', '@tardis.co.uk', '@example.com', '@us.', '@submarine.com', '@empire.']\n\n\n\n\nWe left off a few details in the email addresses. \n\n\nRetrieve the names and workplaces.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# name and place of work\nprint re.findall(r'''\n    \\b[-\\w]*, # Find a word boundary, 1+ hyphens or characters, and a comma\n    \\s  # Find 1 whitespace\n    [-\\w ]+ # 1+ hyphens and characters and explicit spaces\n    [^\\t\\n] # Ignore tabs and newlines\n''', data, re.X)\n\n\n\n\nResults.\n\n\n['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', 'Enchanter, Killer Rabbit Cave', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Example, Example Co.', 'Obama, Barack', 'President, United States of America', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic Empire']\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nRecap:\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\nre.VERBOSE|re.I\n, more readable, introduce whitespaces or comments.\n\n\nre.X\n.\n\n\n\n\n\n\n\n\n7, Groups \n Subdivided Search\n\n\n\n\nlast and first names.\n\n\nemails.\n\n\nphone numbers.\n\n\njob and workplaces.\n\n\nTwitter accounts.\n\n\netc\n\n\n\n\nFor that, we need parentheses.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# retrieve groups...\nprint re.findall(r'''\n    ([-\\w ]+,\\s[-\\w ]+)\\t # last and first names\n    ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails\n    (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})\\t # phone numbers\n    ([\\w\\s]+,\\s[\\w\\s]+)\\t # job and work place\n    (@[\\w\\d]+)$ # Twitter account\n''', data, re.X)\n\n\n\n\nResults (a tupple).\n\n\n[('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine', '@ryancarson'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire', '@darthvader')]\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nOn the other hand, there are some details missing. We need to make the code more universal for the first and last names. The phone number should be optional, tabs are optional, without Twitter accounts, and tabs should become a new line instead.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# retrieve groups...\nprint re.findall(r'''\n    ^([-\\w ]*,\\s[-\\w ]+)\\t # last and first names CHANGE\n    ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails\n    (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t # phone numbers CHANGE\n    ([\\w\\s]+,\\s[\\w\\s.]+)\\t? # job and work place CHANGE\n    (@[\\w\\d]+)?$ # Twitter account CHANGE\n''', data, re.X|re.MULTILINE)\n\n\n\n\nResults (a tupple). More.\n\n\n[('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('McFarland, Arthur', 'arty@submarine.com', '(555) 555-5555', 'Teacher, Submarine', ''), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine\\t', '@ryancarson'), ('Exampleson, Exampleme', 'me@example.com', '555-555-5552', 'Example, Example Co.\\t', '@exemple'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America\\t', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine\\t', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire\\t', '@darthvader')]\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nTurn the results into a \ndictionary\n with \npatterns\n or \nP\n...\n.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE ALL\nline = re.search(r'''\n    ^(?P\nname\n[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P\nemail\n[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P\nphone\n\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P\njob\n[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P\ntwitter\n@[\\w\\d]+)?$\n''', data, re.X|re.MULTILINE)\n\nprint \nprint line...\n\nprint line\nprint \n=\n * 25\nprint \nprint line.group()...\n\nprint line.group()\nprint \n=\n * 25\nprint \nprint line.groupdict()...\n\nprint line.groupdict()\n\n\n\n\nResults (a tupple). Say we remove the first line in the data\n\n\nprint line...\n\n_sre.SRE_Match object at 0x00000000021DDDD8\n\n=========================\nprint line.group()...\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\n=========================\nprint line.groupdict()...\n{'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}\n\n\n\n\nRecap:\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\nre.VERBOSE|re.I\n.\n\n\nre.X\n.\n\n\nre.X|re.MULTILINE\n or \nre.X|re.M\n.\n\n\n\n\n\n\n\n\n8, Compile \n Build Dictionaries \n Operationalized Search\n\n\nCompile a pattern into an object. Replace \nfindall\n or \nsearch\n with \ncompile\n. Remove \ndata\n to make a generic function to process any data.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE\nline = re.compile(r'''\n    ^(?P\nname\n[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P\nemail\n[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P\nphone\n\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P\njob\n[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P\ntwitter\n@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nprint re.search(line, data).groupdict() # CHANGE\n\n\n\n\nResults (a tupple). Say we remove the first line in the data\n\n\n{'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}\n\n\n\n\nAlternatively.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE\nline = re.compile(r'''\n    ^(?P\nname\n[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P\nemail\n[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P\nphone\n\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P\njob\n[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P\ntwitter\n@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nprint line.search(data).groupdict() # CHANGE\n\n\n\n\nCompiling not only does it make the script universal (ready for any data), but it also make the execution faster. It becomes easier to compile the script into an executable.\n\n\nWe want all the lines, but a specific group (say \nnames\n).\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary\nline = re.compile(r'''\n    ^(?P\nname\n[-\\w ]*,\\s[-\\w ]+)\\t\n    (?P\nemail\n[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P\nphone\n\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P\njob\n[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P\ntwitter\n@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nfor match in line.finditer(data): # CHANGE\n    print match.group('name')\n\n\n\n\nResults (a tupple).\n\n\nLiff, Kenneth\nMcFarland, Arthur\nCarson, Ryan\nExampleson, Exampleme\nObama, Barack\nChalks, Andrew\nVader, Darth\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nCreate sub-patterns and extract specific groups.\n\n\nimport re\n\n# read the file\nname_file = open(\nnames.txt\n)\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary\nline = re.compile(r'''\n    ^(?P\nname\n(?P\nlast\n[-\\w ]*),\\s(?P\nfirst\n[-\\w ]+))\\t # CHANGE\n    (?P\nemail\n[-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P\nphone\n\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P\njob\n[\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P\ntwitter\n@[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nfor match in line.finditer(data):\n    print '{first} {last} \n{email}\n'.format(**match.groupdict())\n\n\n\n\nResults\n\n\nKenneth Liff \nkenneth@submarine.com\n\nArthur McFarland \narty@submarine.com\n\nRyan Carson \nryan@submarine.com\n\nExampleme Exampleson \nme@example.com\n\nBarack Obama \npresident.44@us.gov\n\nAndrew Chalks \nandrew@submarine.com\n\nDarth Vader \ndarth-vader@empire.gov\n\n\n\n\n\nThe only problem: it did not catch \n\u00d6\n and \n, Tim\n. This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.\n\n\nRecap:\n\n\n\n\nmatch\n.\n\n\nsearch\n.\n\n\nEscape characters (previous section).\n\n\nRepetitions (previous section).\n\n\nfindall\n.\n\n\nre.IGNORECASE\n.\n\n\nre.VERBOSE|re.I\n.\n\n\nre.X\n.\n\n\nre.X|re.MULTILINE\n or \nre.X|re.M\n.\n\n\n\n\n\n\ncompile\n.\n\n\ngroupdict\n.\n\n\nline.finditer\n.\n\n\nmatch.group\n.\n\n\nmatch.groupdict\n.", 
            "title": "Regular Expressions (REGEX)"
        }, 
        {
            "location": "/Regex/#2-match-search-one-expression-one-search", 
            "text": "First, we have a text file called names.txt.  Liff, Kenneth   kenneth@submarine.com   (555) 555-5555  Teacher, Submarine  @kennethliff\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\nArthur, King    king_arthur@camelot.co.uk   King, Camelot\n\u00d6sterberg, Gustav   governor@norrbotten.co.se   Governor, Norrbotten    @gustata\n, Tim   tim@killerrabbit.com    Enchanter, Killer Rabbit Cave\nCarson, Ryan    ryan@submarine.com  (555) 555-5543  CEO, Submarine  @ryancarson\nDoctor  The doctor+companion@tardis.co.uk   Time Lord, Gallifrey\nExampleson, Exampleme   me@example.com  555-555-5552    Example, Example Co.    @exemple\nObama, Barack   president.44@us.gov 555 555-5551    President, United States of America @potus44\nChalks, Andrew  andrew@submarine.com    (555) 555-5553  Teacher, Submarine  @chalkers\nVader, Darth    darth-vader@empire.gov  (555) 555-4444  Sith lord, Galactic Empire  @darthvader  Second, we want to process the file: extract strings.   We could use  re.match , but the function is picky.  re.search  is more forgiving in terms of precision. In both cases, the function should return the first match it finds, then stop.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nprint re.search(r'McFarland', data).group() # r for raw string, no need for \\\nprint re.search(r'Arthur', data).group() # search in the strings  Results (in Windows).  _sre.SRE_Match object at 0x00000000021DB510  _sre.SRE_Match object at 0x00000000021DB510   Results may vary in UNIX-type OS. In Linux, we get.  _sre.SRE_Match object; span=(0, 8), match='McFarland'  _sre.SRE_Match object; span=(10, 15), match='Arthur'   Change the script and rerun it.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nprint re.search(r'McFarland', data).group() # CHANGE\nprint re.search(r'Arthur', data).group() # CHANGE  Results.  McFarland\nArthur  Alternatively.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# print what is in memory\nlast_name = r'McFarland'\nfirst_name = r'Arthur'\nprint re.search(last_name, data).group() # CHANGE\nprint re.search(first_name, data).group() # CHANGE", 
            "title": "2, match &amp; search -- One Expression, One Search"
        }, 
        {
            "location": "/Regex/#recap", 
            "text": "match .  search .", 
            "title": "Recap:"
        }, 
        {
            "location": "/Regex/#3-escape-characters-comprenhensive-search", 
            "text": "\\w , match any Unicode word character.  \\W , match anything that isn t a Unicode word character.  \\s , any whitespace.  \\S , not.  \\d , any number 0-9.  \\D , not.  \\b , boundaries or the edges of a word.  \\B , not.   Try.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\nprint re.match(r'\\w, \\w', data) # CHANGE  Results.  None  We get  None  because of  re.match . Instead, try.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch phone numbers\nprint re.search(r'\\d\\d\\d-\\d\\d\\d\\d', data).group() # CHANGE  Results.  555-5555  Improve the code.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch complete phone numbers\nprint re.search(r'\\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d', data).group() # CHANGE  Results.  (555) 555-5555", 
            "title": "3, Escape Characters -- Comprenhensive Search"
        }, 
        {
            "location": "/Regex/#recap_1", 
            "text": "match .  search .  Escape characters (see above).", 
            "title": "Recap:"
        }, 
        {
            "location": "/Regex/#4-repetitions-power-search", 
            "text": "{3} , repeat 3 times.  {,3} , repeat 0 to 3 times.  {3,} , repeat 3 or more times.  {3, 5} , repeat 3, 4 or 5 times.  ? , repeat 0 or once.  * , repeat at least 0 times (no upper bound).  + , repeat at least once (no upper bound).   Catch a name.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch a name\nprint re.search(r'\\w+, \\w+', data).group() # CHANGE  Results.  Liff, Kenneth  Catch a phone number.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# catch a complete phone numbers\nprint re.search(r'\\(\\d{3}\\) \\d{3}-\\d{4}', data).group() # CHANGE  Results.  (555) 555-5555  Catch multiple phone numbers.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# more universal way (parentheses, hyphen, space become optional)\n# on multiple lines!\nprint re.findall(r'\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4}', data) # CHANGE  Results.  ['(555) 555-5555', '(555) 555-5555', '(555) 555-5543', '555-555-5552', '555 555-5551', '(555) 555-5553', '(555) 555-4444']  Catch multiple names.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# universal way for names\nprint re.findall(r'\\w*, \\w+', data)  # CHANGE: findall  Results.  ['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', ', Tim', 'Enchanter, Killer', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Obama, Barack', 'President, United', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic']", 
            "title": "4, Repetitions -- Power Search"
        }, 
        {
            "location": "/Regex/#recap_2", 
            "text": "match .  search .  Escape characters (previous section).  Repetitions (see above).  findall .", 
            "title": "Recap:"
        }, 
        {
            "location": "/Regex/#5-sets-target-search", 
            "text": "Catch patterns. We only need unique characters even when a word contains repetitive characters.   [aple] , search for  apple .  [a-z] , search for any lowercase letters.  [^2] , search for anything that is not 2.  . , stands for any possible character.   For finding email addresses, search better  cures  on email adresses. Search for email address regex or email address regular expressions on Stack Overflow, Quora, etc.  We can also try.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# find emails\nprint re.findall(r'[-\\w\\d+.]+@[-\\w\\d.]+', data) # CHANGE  Results.  ['kenneth@submarine.com', 'arty@submarine.com', 'king_arthur@camelot.co.uk', 'governor@norrbotten.co.se', 'tim@killerrabbit.com', 'ryan@submarine.com', 'doctor+companion@tardis.co.uk', 'me@example.com', 'president.44@us.gov', 'andrew@submarine.com', 'darth-vader@empire.gov']  Retrieve  submarine . All characters are unique. The set should be  submarine .  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# set [submarine] should catch 'submarine'\n# add word boundaries, at least once, ignore lower or upper cases\nprint re.findall(r'\\b[submarine]+\\b', data, re.IGNORECASE) # CHANGE  Results.  ['submarine', 'Submarine', 'submarine', 'Submarine', 'se', 'submarine', 'Submarine', 'me', 'us', 'submarine', 'Submarine']  However, we also collect shorter strings ( se ,  me ,  us ,  Maria ) with characters from [submarine]. If we wanted to limit the search to  submarine  only.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# always 9 letters\nprint re.findall(r'\\b[submarine]{9}\\b', data, re.IGNORECASE) # CHANGE  Results.  ['submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine', 'submarine', 'Submarine']", 
            "title": "5, Sets -- Target Search"
        }, 
        {
            "location": "/Regex/#recap_3", 
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .", 
            "title": "Recap:"
        }, 
        {
            "location": "/Regex/#6-boundaries-smart-search", 
            "text": "''' , add a multiline string.  \\b@ , word boundary  @ .  \\b , word boundary  .  ^ , ignore.  \\t , tab character.  . , any character.   Find emails with word boundaries, spaces, words, explicit spaces (without using VERBOSE!!!), at least once for any number of characters, ignore tabs, and ignore newlines.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# multiline strings\nprint re.findall(r'''\n    \\b@[-\\w\\d.]* # First a word boundary, an @, and then any number of characters\n    [^gov\\t] # Ignore 1+ instances of the letters 'g', 'o' or 'v' and a tab\n    \\b # Another word boundary\n''', data, re.VERBOSE|re.I)  Results.  ['@submarine.com', '@submarine.com', '@camelot.co.uk', '@norrbotten.co.se', '@killerrabbit.com', '@submarine.com', '@tardis.co.uk', '@example.com', '@us.', '@submarine.com', '@empire.']  We left off a few details in the email addresses.   Retrieve the names and workplaces.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# name and place of work\nprint re.findall(r'''\n    \\b[-\\w]*, # Find a word boundary, 1+ hyphens or characters, and a comma\n    \\s  # Find 1 whitespace\n    [-\\w ]+ # 1+ hyphens and characters and explicit spaces\n    [^\\t\\n] # Ignore tabs and newlines\n''', data, re.X)  Results.  ['Liff, Kenneth', 'Teacher, Submarine', 'McFarland, Arthur', 'Teacher, Submarine', 'Arthur, King', 'King, Camelot', 'sterberg, Gustav', 'Governor, Norrbotten', 'Enchanter, Killer Rabbit Cave', 'Carson, Ryan', 'CEO, Submarine', 'Lord, Gallifrey', 'Exampleson, Exampleme', 'Example, Example Co.', 'Obama, Barack', 'President, United States of America', 'Chalks, Andrew', 'Teacher, Submarine', 'Vader, Darth', 'lord, Galactic Empire']  The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.", 
            "title": "6, Boundaries -- Smart Search"
        }, 
        {
            "location": "/Regex/#recap_4", 
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .  re.VERBOSE|re.I , more readable, introduce whitespaces or comments.  re.X .", 
            "title": "Recap:"
        }, 
        {
            "location": "/Regex/#7-groups-subdivided-search", 
            "text": "last and first names.  emails.  phone numbers.  job and workplaces.  Twitter accounts.  etc   For that, we need parentheses.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# retrieve groups...\nprint re.findall(r'''\n    ([-\\w ]+,\\s[-\\w ]+)\\t # last and first names\n    ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails\n    (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})\\t # phone numbers\n    ([\\w\\s]+,\\s[\\w\\s]+)\\t # job and work place\n    (@[\\w\\d]+)$ # Twitter account\n''', data, re.X)  Results (a tupple).  [('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine', '@ryancarson'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire', '@darthvader')]  The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.  On the other hand, there are some details missing. We need to make the code more universal for the first and last names. The phone number should be optional, tabs are optional, without Twitter accounts, and tabs should become a new line instead.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# retrieve groups...\nprint re.findall(r'''\n    ^([-\\w ]*,\\s[-\\w ]+)\\t # last and first names CHANGE\n    ([-\\w\\d.+]+@[-\\w\\d.]+)\\t # emails\n    (\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t # phone numbers CHANGE\n    ([\\w\\s]+,\\s[\\w\\s.]+)\\t? # job and work place CHANGE\n    (@[\\w\\d]+)?$ # Twitter account CHANGE\n''', data, re.X|re.MULTILINE)  Results (a tupple). More.  [('Liff, Kenneth', 'kenneth@submarine.com', '(555) 555-5555', 'Teacher, Submarine', '@kennethliff'), ('McFarland, Arthur', 'arty@submarine.com', '(555) 555-5555', 'Teacher, Submarine', ''), ('Carson, Ryan', 'ryan@submarine.com', '(555) 555-5543', 'CEO, Submarine\\t', '@ryancarson'), ('Exampleson, Exampleme', 'me@example.com', '555-555-5552', 'Example, Example Co.\\t', '@exemple'), ('Obama, Barack', 'president.44@us.gov', '555 555-5551', 'President, United States of America\\t', '@potus44'), ('Chalks, Andrew', 'andrew@submarine.com', '(555) 555-5553', 'Teacher, Submarine\\t', '@chalkers'), ('Vader, Darth', 'darth-vader@empire.gov', '(555) 555-4444', 'Sith lord, Galactic Empire\\t', '@darthvader')]  The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.  Turn the results into a  dictionary  with  patterns  or  P ... .  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE ALL\nline = re.search(r'''\n    ^(?P name [-\\w ]*,\\s[-\\w ]+)\\t\n    (?P email [-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P phone \\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P job [\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P twitter @[\\w\\d]+)?$\n''', data, re.X|re.MULTILINE)\n\nprint  print line... \nprint line\nprint  =  * 25\nprint  print line.group()... \nprint line.group()\nprint  =  * 25\nprint  print line.groupdict()... \nprint line.groupdict()  Results (a tupple). Say we remove the first line in the data  print line... _sre.SRE_Match object at 0x00000000021DDDD8 \n=========================\nprint line.group()...\nMcFarland, Arthur   arty@submarine.com  (555) 555-5555  Teacher, Submarine\n=========================\nprint line.groupdict()...\n{'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}", 
            "title": "7, Groups -- Subdivided Search"
        }, 
        {
            "location": "/Regex/#recap_5", 
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .  re.VERBOSE|re.I .  re.X .  re.X|re.MULTILINE  or  re.X|re.M .", 
            "title": "Recap:"
        }, 
        {
            "location": "/Regex/#8-compile-build-dictionaries-operationalized-search", 
            "text": "Compile a pattern into an object. Replace  findall  or  search  with  compile . Remove  data  to make a generic function to process any data.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE\nline = re.compile(r'''\n    ^(?P name [-\\w ]*,\\s[-\\w ]+)\\t\n    (?P email [-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P phone \\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P job [\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P twitter @[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nprint re.search(line, data).groupdict() # CHANGE  Results (a tupple). Say we remove the first line in the data  {'phone': '(555) 555-5555', 'job': 'Teacher, Submarine', 'name': 'McFarland, Arthur', 'twitter': None, 'email': 'arty@submarine.com'}  Alternatively.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary CHANGE\nline = re.compile(r'''\n    ^(?P name [-\\w ]*,\\s[-\\w ]+)\\t\n    (?P email [-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P phone \\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P job [\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P twitter @[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nprint line.search(data).groupdict() # CHANGE  Compiling not only does it make the script universal (ready for any data), but it also make the execution faster. It becomes easier to compile the script into an executable.  We want all the lines, but a specific group (say  names ).  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary\nline = re.compile(r'''\n    ^(?P name [-\\w ]*,\\s[-\\w ]+)\\t\n    (?P email [-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P phone \\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P job [\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P twitter @[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nfor match in line.finditer(data): # CHANGE\n    print match.group('name')  Results (a tupple).  Liff, Kenneth\nMcFarland, Arthur\nCarson, Ryan\nExampleson, Exampleme\nObama, Barack\nChalks, Andrew\nVader, Darth  The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.  Create sub-patterns and extract specific groups.  import re\n\n# read the file\nname_file = open( names.txt )\ndata = name_file.read()\n\n# data is now in memory\nname_file.close()\n\n# build a dictionary\nline = re.compile(r'''\n    ^(?P name (?P last [-\\w ]*),\\s(?P first [-\\w ]+))\\t # CHANGE\n    (?P email [-\\w\\d.+]+@[-\\w\\d.]+)\\t\n    (?P phone \\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4})?\\t\n    (?P job [\\w\\s]+,\\s[\\w\\s.]+)\\t?\n    (?P twitter @[\\w\\d]+)?$\n''', re.X|re.MULTILINE)\n\nfor match in line.finditer(data):\n    print '{first} {last}  {email} '.format(**match.groupdict())  Results  Kenneth Liff  kenneth@submarine.com \nArthur McFarland  arty@submarine.com \nRyan Carson  ryan@submarine.com \nExampleme Exampleson  me@example.com \nBarack Obama  president.44@us.gov \nAndrew Chalks  andrew@submarine.com \nDarth Vader  darth-vader@empire.gov   The only problem: it did not catch  \u00d6  and  , Tim . This is the problem with Windows: it is picky with some characters and requires extra coding to work around these problems. UNIX-based OS do not have these problems.", 
            "title": "8, Compile &amp; Build Dictionaries -- Operationalized Search"
        }, 
        {
            "location": "/Regex/#recap_6", 
            "text": "match .  search .  Escape characters (previous section).  Repetitions (previous section).  findall .  re.IGNORECASE .  re.VERBOSE|re.I .  re.X .  re.X|re.MULTILINE  or  re.X|re.M .    compile .  groupdict .  line.finditer .  match.group .  match.groupdict .", 
            "title": "Recap:"
        }, 
        {
            "location": "/Databases/", 
            "text": "CONTENT\n\n\n1, SQLite3\n\n\n2, SQLite3 CLI\n\n\n3, SQL Database GUI, Administration, and Management Tools\n\n\n4, Spreadsheet Data and SQLite\n\n\n5, R and Python with SQL\n\n\n6, The Chinook SQLite Sample Database\n\n\n7, Using a Python ORM: peewee\n\n\nInstall peewee\n\n\nCreate a database with a script\n\n\nCreate, read, update, and delete (CRUD)\n\n\nA diary app \n The skeleton (empty classes and functions)\n\n\nA diary app \n Initialize\n\n\nA diary app \n Create a menu\n\n\nA diary app \n Data entry\n\n\nA diary app \n Search and view entries\n\n\nA diary app \n Delete entries\n\n\nA diary app \n Finalize and polish up\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3. Consult the \nHitchicker\ns Guide to Python\n.\n\n\nAlthough we work with SQLite, most concepts are applicable to MySQL and PostgreSQL.\n\n\n\n\n1, SQLite3\n\n\nFollow the tutorial on \nTutorialPoint\n. Especially the \nQuick Guide\n for installation, basic commands, syntax, comments, SQL statement, data type, affinity type, boolean, date \n time, creating a database, a table, dropping a table, querying, operators, expressions, and clauses. Each topic has also a dedicated section such as unions, joins, truncated table, etc.\n\n\n\n\nInstall.\n\n\nDownload from the \nSQLite website\n.\n\n\nFollow the Quick Guide (or find instruction online).\n\n\nOn Windows, databases are located on C:\\sqlite.\n\n\nOn Linux, SQLite is in the root directory(/usr/lib/\n), but databases can be stored in the Personal folder (or in a directory of choice; for example, in a new subdirectory under Documents).\n\n\n\n\n\n\n\n\n2, SQLite3 CLI\n\n\nBasics\n\n\n\n\nIn the shell/bash:\n\n\nsqlite3 test.db\n, create a database/open the database (show the prompt); the database is located in SQLite\ns directory.\n\n\n\n\n\n\nBasic commands inside a database.\n\n\n.help\n.\n\n\n.databases\n, show all databases.\n\n\ncreate table first (a int, b string);\n, create a table with two fields.\n\n\n.schema\n, show the last commands.\n\n\n.tables\n, show all tables in the database.\n\n\ninsert into first (a, b) values (1, \"hello\");\n, load the table.\n\n\nselect * from first;\n, extract all values from the table.\n\n\n.quit\n or \n.exit\n.\n\n\ndrop table first;\n, delete a table (first).\n\n\nDelete a database by deleting the database file in the directory.\n\n\n\n\n\n\nIntermediate commands.\n\n\n.mode insert\n, change the view (insertions to build the database).\n\n\n.dump\n, dump data on screen.\n\n\n.output .\\Documents\\sqlite3Files.sql\n, create a folder in a file (Windows).\n\n\n.output ./Documents/sqlite3Files.sql\n, create a folder in a file (UNIX-based).\n\n\n.dump\n, dump data into the above. VERY USEFUL for recreating a database/table.\n\n\n\n\n\n\n.output stdout\n, to the screen.\n\n\n.mode column\n, change the view (flat table with fixed width).\n\n        - \n.width 15 20\n, define the width by column.\n\n\n.output ./Documents/sqlite3Files/table.sql\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output stdout\n, dump the data.\n\n\n\n\n\n\n.mode line\n, change the view (long list without commas).\n\n\nIdem.\n\n\n\n\n\n\n.mode html\n, change the view (html formats ready to be dumbed).\n\n\n.output ./Documents/sqlite3Files/table.html\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output stdout\n, dump the data.\n\n\n\n\n\n\n.mode tabs\n, change the view (flat table separated by tabs).\n\n\n.output ./Documents/sqlite3Files/table.tsv\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output stdout\n, dump the data.\n\n\n\n\n\n\n.mode csv\n, change the view (flat table separated by commas or semi-colons).\n\n\n.separator ;\n, change the separator.\n\n\n.output ./Documents/sqlite3Files/table.csv\n, prepare the dump.\n\n\nselect * from table;\n, extract.\n\n\n.output stdout\n, dump the data.\n\n\n\n\n\n\n.mode tcs\n, change the view (flat table with double-quotes).\n\n\n.headers on\n, show the headers.\n\n\n.show\n, show the (above) parameters (and change them).\n\n\n.prompt 'sqlite3\n '\n, change the prompt.\n\n\n.read \npath\n, repopulate the database with the above.\n\n\n\n\n\n\n\n\nAdvanced\n\n\nThere are plenty of resources about SQLite: books, online documents, online tutorials, etc. We can learn how to:\n\n\n\n\nBuild a database, tables.\n\n\nQuery a database, create, alter, select, order by, limit, offset, update, delete, and other functions.\n\n\nJoins and Triggers.\n\n\nAnd more.\n\n\n\n\n3, SQL Database GUI, Administration, and Management Tools\n\n\nWith database managers, we can create scripts to automate operations.\n\n\n\n\nSQLite is free, open source, and cross-platform.\n\n\nDB Browser for SQLite is free, for all OS.\n\n\nAdd-ons to browsers such as the SQLite Managers for Firefox.\n\n\n\n\n\n\nMySQL is free, open source, and cross-platform.\n\n\nMySQL Workbench is free, for all OS.\n\n\nDatabase Design \n Modeling, SQL Development (replacing MySQL Query Browser), and Database Administration (replacing MySQL Administrator). MySQL features: SQL editor, SQL code completion, SQL code formatter, SQL Syntax highlighting, server start/stop, server status/health, server logs, server/replication configuration, user management, session management, and much more.\n\n\n\n\n\n\nThere are web-based managers.\n\n\n\n\n\n\nPostgreSQL is free, open source, also cross-platform.\n\n\npgAdminIII.\n\n\nThere are web-based managers.\n\n\n\n\n\n\nSQL in general.\n\n\nDB Browser is free, for all OS.\n\n\nphpMyAdmin is free, for all OS.\n\n\nToad is free, for Windows.\n\n\nHeidiSQL is free, for Windows.\n\n\nThere are web-based managers.\n\n\n\n\n\n\n\n\n4, Spreadsheet Data and SQLite\n\n\nImport from the spreadsheet\n\n\n\n\nPull data from the spreadsheet into SQLite via an add-on or a database manager (automated procedure).\n\n\nOr export data (save as) from the spreadsheet into a .csv file.\n\n\nImport the .csv into SQLite.\n\n\nIn can be done with a manager such as DB Browser for SQLite.\n\n\nIt can be done with a web-based manager such as SQLite Managers for Firefox.\n\n\nAdjust the general and field parameters.\n\n\nCreate a primary key.\n\n\nPopulate a table with the .csv file.\n\n\n\n\n\n\n\n\nImport into a spreadsheet\n\n\n\n\nDump the data from the CLI or a database manager into a .csv file.\n\n\nOr connect the spreadsheet with SQLite with built-in functionalities or add-ons to pull data into the database.\n\n\nThere are add-ons that can execute SQL queries in a cell and dump the results in other cells: Excellic, Microsoft SQL Server Data Mining, SaveToDB, Database Connection Wizard, Publish Wizard, etc.\n\n\n\n\n5, R and Python with SQL\n\n\n\n\nR can import data from / export data to relational databases using specialized packages such as \nDBI\n, \nRSQLite\n, \nRMySQL\n, \nRPostgreSQL\n, etc.\n\n\nPython libraries are: \npython-sql\n, \nsqlalchemy\n, \nrecords\n, \npeewee\n, etc.\n\n\npip install \nlibrary\n.    \n\n\n\n\n\n\n\n\n6, The Chinook SQLite Sample Database\n\n\nLearn, practice, and test commands with a fake database. \n\n\n\n\nDownload the \ndatabase\n.\n\n\nConsult the \ndiagram\n.\n\n\nWe can also download the database and diagrams.\n\n\n\n\n\n\n\n\n7, Using a Python ORM: \npeewee\n\n\nInstall \npeewee\n\n\nWe can run queries with SQL or use a Python wrapper: \npeewee\n. It is a lightweight Object Relational Mapper (ORM). \npeewee\n works with SQLite, MySQL, and PostgreSQL.\n\n\nInstall it with pip.\n\n\nWe can manage our databases with Python scripts.\n\n\nCreate a database with a script\n\n\nIn \npeewee\n, models are Python classes. Everything in the database is an object: tables, rows, columns, entries, etc.\n\n\nWe create a new database, \nstudents.db\n, with Python. We connect to the database and create two fields with their SQL parameters. We run the script in the terminal.\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model): # use a singular name convention\n    username = CharField(max_length=255, unique=True) # varchar, unique value, no duplicates\n    points = IntegerField(default=0) # if not supplies, it inputs 0 by default\n\n    class Meta: # a class inside a class (meta-class)\n        database = db\n\nif __name__ == '__main__': # for running the script directly, not import it\n    db.connect()\n    db.create_tables([Student], safe=True) # safe is a mandatory convention\n\n\n\n\nWe get no result in the terminal: a good sign. Check out the database to see the results.\n\n\nThe script runs on Windows in Python 2. In Python 3, we would need minor adjustments; they are documented along the way. In addition, in UNIX-based OS, we would need two extra lines at the top of the script.\n\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n\n\nOr.\n\n\n#!/usr/bin/env python 3\n# -*- coding: utf-8 -*-\n\n\n\n\nCreate, read, update, and delete (CRUD)\n\n\nCreate, read, update, and delete is knows as CRUD; the backbone of ORM. Five useful methods:\n\n\n\n\n.create()\n, add a new record to the table.\n\n\n.select()\n, pick rows out of the table.\n\n\n.save()\n, update an existing row in a table.\n\n\n.get()\n, fetch a single record from a table.\n\n\n.delete_instance()\n, delete a row from a table.\n\n\n\n\nImprove the script, but avoid the false start\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\n# ADD a dictionary\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students(): # ADD a function\n    for student in students:\n        Student.create(username=student['username'],\n                        points=student['points']) \n\n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students() # ADD\n\n\n\n\nWe can run the script once, but not twice because of the \nunique=True\n in the \nclass Student(Model):\n. We get an \nIntegrityError\n in the terminal. \n\n\nWe need to add a \ntry\n block. Take two.\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students(): # CHANGE the function\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()\n\n\n\n\nWe get no result in the terminal: a good sign. We can run the script at will. We can check out the results in the database.\n\n\nAdd a function to select the top students, order them in descending order (from high to low), and retrieve them.\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students():\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\ndef top_student():\n    student = Student.select().order_by(Student.points.desc()).get() # ADD\n    return student            \n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()\n    print(\nOur top student right now is: {0.username}.\n.format(top_student())) # ADD\n\n\n\n\nThis time, we should get a result in the terminal.\n\n\nOur top student right now is: adammcfarland.\n\n\n\n\nChange the points in the dictionary and rerun the script.\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 14718}, # CHANGE, make it the top student\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students():\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\ndef top_student():\n    student = Student.select().order_by(Student.points.desc()).get()\n    return student            \n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()\n    print(\nOur top student right now is: {0.username}.\n.format(top_student()))\n\n\n\n\nResults in the terminal.\n\n\nOur top student right now is: kennethliff.\n\n\n\n\nRecap:\n\n\n\n\n.create()\n, add a new record to the table.\n\n\n.select()\n, pick rows out of the table.\n\n\n.get()\n, fetch a single record from a table.\n\n\n\n\nA diary app \n The skeleton (empty classes and functions)\n\n\nNow, let\ns build a diary application using an SQLite database. Such an application can be integrated into a web framework (like Flask) or frozen as an executive file (embedding SQLite). \n\n\nWe want to be able to load data and retrieve them. \n\n\nThe more general use could be a log book: we can write stuff and retrieve it. We can classify the entries and search for a specific word.\n\n\nWe start with a skeleton, bare functions and docstrings.\n\n\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    # content\n    # timestamp\n\n    class Meta:\n        database = db\n\n\ndef menu_loop():\n    \nShow the menu.\n\n\n\ndef add_entry():\n    \nAdd an entry.\n\n\n\ndef view_entries():\n    \nView previous entries.\n\n\n\ndef delete_entry(entry):\n    \nDelete an entry.\n\n\n\nif __name__ == '__main__': # for running the script directly, not import it\n    menu_loop()\n\n\n\n\nA diary app \n Initialize\n\n\nLet\ns add some flesh to the skeleton. Add the the \ndatetime\n library and a new function to initialize the diary.\n\n\nimport datetime # ADD\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model): # CHANGE\n    content = TextField() # content: TextField ia more flexible, holds any type of data; contrary to CharField, a varchar with a maximum length\n    timestamp = DateTimeField(default=datetime.datetime.now) # timestamp; now does take parentheses\n\n    class Meta:\n        database = db\n\n\ndef initialize(): # ADD\n    \nCreate the database and the table if they don't exist.\n\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \nShow the menu.\n\n\n\ndef add_entry():\n    \nAdd an entry.\n\n\n\ndef view_entries():\n    \nView previous entries.\n\n\n\ndef delete_entry(entry):\n    \nDelete an entry.\n\n\n\nif __name__ == '__main__': # for running the script directly, not import it\n    initialize() # INSERT\n    menu_loop()\n\n\n\n\nWe get no result in the terminal: a good sign. We can check out the results in the db.\n\n\nA diary app \n Create a menu\n\n\nWe add a menu using a dictionary (we need the \nOrderedDict\n library).\n\n\nfrom collections import OrderedDict # ADD\nimport datetime\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \nCreate the database and the table if they don't exist.\n\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \nShow the menu.\n\n    choice = None # new variable with a default value\n\n    while choice != 'q': # ADD\n        print(\nEnter 'q' to quit.\n) # starting message\n        for key, value in menu.items(): # loop through the dictionary\n            print('{}) {}'.format(key, value.__doc__)) # value from the menu variables furthur down in the script; __doc__ is the docstrings\n        choice = raw_input('Action: ').lower().strip() # lowercase, remove white spaces\n\n        if choice in menu: # check if the selection is in the menu\n            menu[choice]() # execute the choice\n\ndef add_entry():\n    \nAdd an entry.\n\n\n\ndef view_entries():\n    \nView previous entries.\n\n\n\ndef delete_entry(entry):\n    \nDelete an entry.\n\n\n\nmenu = OrderedDict([ # ADD tuple\n    ('a', add_entry),\n    ('v', view_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()\n\n\n\n\nThis is coded in Python 2. In Python 3, we would replace \nraw_input\n by \ninput\n.\n\n\nThe result is dynamic. We can input data in the terminal and the script continues to run until we quit with \nq\n. We cannot do much since the functions are still empty (\ndef add_entry():\n and \ndef view_entries():\n). The following is a snapshot.\n\n\nEnter 'q' to quit.\na) Add an entry.\nv) View previous entries.\nActions:\n\n\n\n\nA diary app \n Data entry\n\n\nAdd the \nsys\n library. We want to enter data and load the database.\n\n\nfrom collections import OrderedDict\nimport datetime\nimport sys # ADD\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \nCreate the database and the table if they don't exist.\n\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \nShow the menu.\n\n    choice = None\n\n    while choice != 'q':\n        print(\nEnter 'q' to quit.\n)\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry(): # IMPROVE\n    \nAdd an entry.\n\n    print(\nEnter your entry. Press ctrl+z when finished.\n)\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\nSaved successfully!\n)\n\n\ndef view_entries():\n    \nView previous entries.\n\n\n\ndef delete_entry(entry):\n    \nDelete an entry.\n\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()\n\n\n\n\nThe result is dynamic.\n\n\nTo the question \nEnter your entry. Press ctrl+d when finished.\n, write \nWorking with databases. I enjoy my day.\n. Press enter, then press ctrl+z, then enter in Windows, ctrl+d in UNIX-based OS (for End-of-File key sequence). Save it (with a \ny\n input). Repeat. This time, do not save it (\nn\n). Check out the results in the database.\n\n\nraw_input\n in Python 2 vs. \ninput\n in Python 3. In Python 2, we can print with \nprint \" \"\n or \nprint(\" \")\n. The later is only possible in Python 3.\n\n\nA diary app \n Search and view entries\n\n\nWe now want to read the data (query the database). We also want to search throught the entries. In SQL, we would code: \nSELECT * FROM entry WHERE content LIKE '%search_query$' ORDER BY timestamp DESC;\n.\n\n\nfrom collections import OrderedDict\nimport datetime\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \nCreate the database and the table if they don't exist.\n\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \nShow the menu.\n\n    choice = None\n\n    while choice != 'q':\n        print(\nEnter 'q' to quit.\n)\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry():\n    \nAdd an entry.\n\n    print(\nEnter your entry. Press ctrl+z when finished.\n)\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\nSaved successfully!\n)\n\n\ndef view_entries(search_query=None): # IMPROVE\n    \nView previous entries.\n\n    entries = Entry.select().order_by(Entry.timestamp.desc()) # sort them\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p') # day name, month, date, year, hour (12h), minute, am/pm\n        print(timestamp)\n        print('='*len(timestamp)) # print the number of characters in the timestamp\n        print(entry.content)\n        print('n) next entry')\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Nq] ').lower().strip()\n        if next_action == 'q':\n            break\n\n\ndef search_entries():\n    \nSearch entries for a string.\n\n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry):\n    \nDelete an entry.\n\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries), # ADD\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()\n\n\n\n\nThe result is dynamic. Try entering stuff, save it. Back to the menu, read the entry. We should get a date, a line of \n=\n and the entry. Quit and go back to the menu. Try search for a word. It should find a single word among all the entry and pull out the entry where the word appears.\n\n\nA diary app \n Delete entries\n\n\nComplete the last function: \ndef delete_entry(entry):\n.\n\n\nfrom collections import OrderedDict\nimport datetime\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \nCreate the database and the table if they don't exist.\n\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n    \nShow the menu.\n\n    choice = None\n\n    while choice != 'q':\n        print(\nEnter 'q' to quit.\n)\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry():\n    \nAdd an entry.\n\n    print(\nEnter your entry. Press ctrl+z when finished.\n)\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\nSaved successfully!\n)\n\n\ndef view_entries(search_query=None):\n    \nView previous entries.\n\n    entries = Entry.select().order_by(Entry.timestamp.desc())\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p')\n        print(timestamp)\n        print('='*len(timestamp))\n        print(entry.content)\n        print('n) next entry')\n        print('d) delete entry') # ADD\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Ndq] ').lower().strip()\n        if next_action == 'q':\n            break\n        elif next_action == 'd': # ADD\n            delete_entry(entry)\n\n\ndef search_entries():\n    \nSearch entries for a string.\n\n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry): # IMPROVE\n    \nDelete an entry.\n\n    if raw_input(\nAre you sure? [yN] \n).lower() == 'y':\n        entry.delete_instance()\n        print(\nEntry deleted!\n)\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()\n\n\n\n\nThe result is dynamic. Enter something. Save it. View it. Delete it (the last entry). Confirm it. Go back to the main menu. View the previous entries. The last entry was deleted and we see the previous entry.\n\n\nA diary app \n Finalize and polish up\n\n\nWe can polish up the final result. We need to ventilate the onscreen printouts by cleaning the screen here and there. On Windows, we clear the screen with \ncls\n; on UNIX-based OS, with \nclear\n.\n\n\nHere is the final product. It\ns not perfect, but it works.\n\n\nfrom collections import OrderedDict\nimport datetime\nimport os # ADD\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n    \nCreate the database and the table if they don't exist.\n\n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef clear(): # ADD\n    os.system('cls' if os.name == 'nt' else 'clear') # ADD; cls for Windows, clear for Linux or Mac OS X\n\n\ndef menu_loop():\n    \nShow the menu.\n\n    choice = None\n\n    while choice != 'q':\n        clear()\n        print(\nEnter 'q' to quit.\n)\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            clear()\n            menu[choice]()\n\n\ndef add_entry():\n    \nAdd an entry.\n\n    print(\nEnter your entry. Press ctrl+z when finished.\n)\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print(\nSaved successfully!\n)\n\n\ndef view_entries(search_query=None):\n    \nView previous entries.\n\n    entries = Entry.select().order_by(Entry.timestamp.desc())\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p')\n        clear()\n        print(timestamp)\n        print('='*len(timestamp))\n        print(entry.content)\n        print('\\n\\n'+'='*len(timestamp)) # ADD\n        print('n) next entry')\n        print('d) delete entry')\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Ndq] ').lower().strip()\n        if next_action == 'q':\n            break\n        elif next_action == 'd':\n            delete_entry(entry)\n\n\ndef search_entries():\n    \nSearch entries for a string.\n\n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry):\n    \nDelete an entry.\n\n    if raw_input(\nAre you sure? [yN] \n).lower() == 'y':\n        entry.delete_instance()\n        print(\nEntry deleted!\n)\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()", 
            "title": "Databases"
        }, 
        {
            "location": "/Databases/#2-sqlite3-cli", 
            "text": "Basics   In the shell/bash:  sqlite3 test.db , create a database/open the database (show the prompt); the database is located in SQLite s directory.    Basic commands inside a database.  .help .  .databases , show all databases.  create table first (a int, b string); , create a table with two fields.  .schema , show the last commands.  .tables , show all tables in the database.  insert into first (a, b) values (1, \"hello\"); , load the table.  select * from first; , extract all values from the table.  .quit  or  .exit .  drop table first; , delete a table (first).  Delete a database by deleting the database file in the directory.    Intermediate commands.  .mode insert , change the view (insertions to build the database).  .dump , dump data on screen.  .output .\\Documents\\sqlite3Files.sql , create a folder in a file (Windows).  .output ./Documents/sqlite3Files.sql , create a folder in a file (UNIX-based).  .dump , dump data into the above. VERY USEFUL for recreating a database/table.    .output stdout , to the screen.  .mode column , change the view (flat table with fixed width). \n        -  .width 15 20 , define the width by column.  .output ./Documents/sqlite3Files/table.sql , prepare the dump.  select * from table; , extract.  .output stdout , dump the data.    .mode line , change the view (long list without commas).  Idem.    .mode html , change the view (html formats ready to be dumbed).  .output ./Documents/sqlite3Files/table.html , prepare the dump.  select * from table; , extract.  .output stdout , dump the data.    .mode tabs , change the view (flat table separated by tabs).  .output ./Documents/sqlite3Files/table.tsv , prepare the dump.  select * from table; , extract.  .output stdout , dump the data.    .mode csv , change the view (flat table separated by commas or semi-colons).  .separator ; , change the separator.  .output ./Documents/sqlite3Files/table.csv , prepare the dump.  select * from table; , extract.  .output stdout , dump the data.    .mode tcs , change the view (flat table with double-quotes).  .headers on , show the headers.  .show , show the (above) parameters (and change them).  .prompt 'sqlite3  ' , change the prompt.  .read  path , repopulate the database with the above.     Advanced  There are plenty of resources about SQLite: books, online documents, online tutorials, etc. We can learn how to:   Build a database, tables.  Query a database, create, alter, select, order by, limit, offset, update, delete, and other functions.  Joins and Triggers.  And more.", 
            "title": "2, SQLite3 CLI"
        }, 
        {
            "location": "/Databases/#3-sql-database-gui-administration-and-management-tools", 
            "text": "With database managers, we can create scripts to automate operations.   SQLite is free, open source, and cross-platform.  DB Browser for SQLite is free, for all OS.  Add-ons to browsers such as the SQLite Managers for Firefox.    MySQL is free, open source, and cross-platform.  MySQL Workbench is free, for all OS.  Database Design   Modeling, SQL Development (replacing MySQL Query Browser), and Database Administration (replacing MySQL Administrator). MySQL features: SQL editor, SQL code completion, SQL code formatter, SQL Syntax highlighting, server start/stop, server status/health, server logs, server/replication configuration, user management, session management, and much more.    There are web-based managers.    PostgreSQL is free, open source, also cross-platform.  pgAdminIII.  There are web-based managers.    SQL in general.  DB Browser is free, for all OS.  phpMyAdmin is free, for all OS.  Toad is free, for Windows.  HeidiSQL is free, for Windows.  There are web-based managers.", 
            "title": "3, SQL Database GUI, Administration, and Management Tools"
        }, 
        {
            "location": "/Databases/#4-spreadsheet-data-and-sqlite", 
            "text": "Import from the spreadsheet   Pull data from the spreadsheet into SQLite via an add-on or a database manager (automated procedure).  Or export data (save as) from the spreadsheet into a .csv file.  Import the .csv into SQLite.  In can be done with a manager such as DB Browser for SQLite.  It can be done with a web-based manager such as SQLite Managers for Firefox.  Adjust the general and field parameters.  Create a primary key.  Populate a table with the .csv file.     Import into a spreadsheet   Dump the data from the CLI or a database manager into a .csv file.  Or connect the spreadsheet with SQLite with built-in functionalities or add-ons to pull data into the database.  There are add-ons that can execute SQL queries in a cell and dump the results in other cells: Excellic, Microsoft SQL Server Data Mining, SaveToDB, Database Connection Wizard, Publish Wizard, etc.", 
            "title": "4, Spreadsheet Data and SQLite"
        }, 
        {
            "location": "/Databases/#5-r-and-python-with-sql", 
            "text": "R can import data from / export data to relational databases using specialized packages such as  DBI ,  RSQLite ,  RMySQL ,  RPostgreSQL , etc.  Python libraries are:  python-sql ,  sqlalchemy ,  records ,  peewee , etc.  pip install  library .", 
            "title": "5, R and Python with SQL"
        }, 
        {
            "location": "/Databases/#6-the-chinook-sqlite-sample-database", 
            "text": "Learn, practice, and test commands with a fake database.    Download the  database .  Consult the  diagram .  We can also download the database and diagrams.", 
            "title": "6, The Chinook SQLite Sample Database"
        }, 
        {
            "location": "/Databases/#7-using-a-python-orm-peewee", 
            "text": "", 
            "title": "7, Using a Python ORM: peewee"
        }, 
        {
            "location": "/Databases/#install-peewee", 
            "text": "We can run queries with SQL or use a Python wrapper:  peewee . It is a lightweight Object Relational Mapper (ORM).  peewee  works with SQLite, MySQL, and PostgreSQL.  Install it with pip.  We can manage our databases with Python scripts.", 
            "title": "Install peewee"
        }, 
        {
            "location": "/Databases/#create-a-database-with-a-script", 
            "text": "In  peewee , models are Python classes. Everything in the database is an object: tables, rows, columns, entries, etc.  We create a new database,  students.db , with Python. We connect to the database and create two fields with their SQL parameters. We run the script in the terminal.  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model): # use a singular name convention\n    username = CharField(max_length=255, unique=True) # varchar, unique value, no duplicates\n    points = IntegerField(default=0) # if not supplies, it inputs 0 by default\n\n    class Meta: # a class inside a class (meta-class)\n        database = db\n\nif __name__ == '__main__': # for running the script directly, not import it\n    db.connect()\n    db.create_tables([Student], safe=True) # safe is a mandatory convention  We get no result in the terminal: a good sign. Check out the database to see the results.  The script runs on Windows in Python 2. In Python 3, we would need minor adjustments; they are documented along the way. In addition, in UNIX-based OS, we would need two extra lines at the top of the script.  #!/usr/bin/env python\n# -*- coding: utf-8 -*-  Or.  #!/usr/bin/env python 3\n# -*- coding: utf-8 -*-", 
            "title": "Create a database with a script"
        }, 
        {
            "location": "/Databases/#create-read-update-and-delete-crud", 
            "text": "Create, read, update, and delete is knows as CRUD; the backbone of ORM. Five useful methods:   .create() , add a new record to the table.  .select() , pick rows out of the table.  .save() , update an existing row in a table.  .get() , fetch a single record from a table.  .delete_instance() , delete a row from a table.   Improve the script, but avoid the false start  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\n# ADD a dictionary\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students(): # ADD a function\n    for student in students:\n        Student.create(username=student['username'],\n                        points=student['points']) \n\n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students() # ADD  We can run the script once, but not twice because of the  unique=True  in the  class Student(Model): . We get an  IntegrityError  in the terminal.   We need to add a  try  block. Take two.  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students(): # CHANGE the function\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()  We get no result in the terminal: a good sign. We can run the script at will. We can check out the results in the database.  Add a function to select the top students, order them in descending order (from high to low), and retrieve them.  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 4888},\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students():\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\ndef top_student():\n    student = Student.select().order_by(Student.points.desc()).get() # ADD\n    return student            \n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()\n    print( Our top student right now is: {0.username}. .format(top_student())) # ADD  This time, we should get a result in the terminal.  Our top student right now is: adammcfarland.  Change the points in the dictionary and rerun the script.  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\students.db')\n\n\nclass Student(Model):\n    username = CharField(max_length=255, unique=True)\n    points = IntegerField(default=0)\n\n    class Meta:\n        database = db\n\n\nstudents = [\n    {'username': 'kennethliff',\n    'points': 14718}, # CHANGE, make it the top student\n    {'username': 'chalkers',\n    'points': 11912},\n    {'username': 'joykesten2',\n    'points': 7363},\n    {'username': 'craigsrob',\n    'points': 4079},\n    {'username': 'adammcfarland',\n    'points': 14717}\n]    \n\n\ndef add_students():\n    for student in students:\n        try:\n            Student.create(username=student['username'],\n                            points=student['points'])\n        except IntegrityError:\n            student_record = Student.get(username=student['username'])\n            student_record.points = student['points']\n            student_record.save()\n\n\ndef top_student():\n    student = Student.select().order_by(Student.points.desc()).get()\n    return student            \n\nif __name__ == '__main__':\n    db.connect()\n    db.create_tables([Student], safe=True)\n    add_students()\n    print( Our top student right now is: {0.username}. .format(top_student()))  Results in the terminal.  Our top student right now is: kennethliff.  Recap:   .create() , add a new record to the table.  .select() , pick rows out of the table.  .get() , fetch a single record from a table.", 
            "title": "Create, read, update, and delete (CRUD)"
        }, 
        {
            "location": "/Databases/#a-diary-app-the-skeleton-empty-classes-and-functions", 
            "text": "Now, let s build a diary application using an SQLite database. Such an application can be integrated into a web framework (like Flask) or frozen as an executive file (embedding SQLite).   We want to be able to load data and retrieve them.   The more general use could be a log book: we can write stuff and retrieve it. We can classify the entries and search for a specific word.  We start with a skeleton, bare functions and docstrings.  from peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    # content\n    # timestamp\n\n    class Meta:\n        database = db\n\n\ndef menu_loop():\n     Show the menu. \n\n\ndef add_entry():\n     Add an entry. \n\n\ndef view_entries():\n     View previous entries. \n\n\ndef delete_entry(entry):\n     Delete an entry. \n\n\nif __name__ == '__main__': # for running the script directly, not import it\n    menu_loop()", 
            "title": "A diary app -- The skeleton (empty classes and functions)"
        }, 
        {
            "location": "/Databases/#a-diary-app-initialize", 
            "text": "Let s add some flesh to the skeleton. Add the the  datetime  library and a new function to initialize the diary.  import datetime # ADD\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model): # CHANGE\n    content = TextField() # content: TextField ia more flexible, holds any type of data; contrary to CharField, a varchar with a maximum length\n    timestamp = DateTimeField(default=datetime.datetime.now) # timestamp; now does take parentheses\n\n    class Meta:\n        database = db\n\n\ndef initialize(): # ADD\n     Create the database and the table if they don't exist. \n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n     Show the menu. \n\n\ndef add_entry():\n     Add an entry. \n\n\ndef view_entries():\n     View previous entries. \n\n\ndef delete_entry(entry):\n     Delete an entry. \n\n\nif __name__ == '__main__': # for running the script directly, not import it\n    initialize() # INSERT\n    menu_loop()  We get no result in the terminal: a good sign. We can check out the results in the db.", 
            "title": "A diary app -- Initialize"
        }, 
        {
            "location": "/Databases/#a-diary-app-create-a-menu", 
            "text": "We add a menu using a dictionary (we need the  OrderedDict  library).  from collections import OrderedDict # ADD\nimport datetime\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n     Create the database and the table if they don't exist. \n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n     Show the menu. \n    choice = None # new variable with a default value\n\n    while choice != 'q': # ADD\n        print( Enter 'q' to quit. ) # starting message\n        for key, value in menu.items(): # loop through the dictionary\n            print('{}) {}'.format(key, value.__doc__)) # value from the menu variables furthur down in the script; __doc__ is the docstrings\n        choice = raw_input('Action: ').lower().strip() # lowercase, remove white spaces\n\n        if choice in menu: # check if the selection is in the menu\n            menu[choice]() # execute the choice\n\ndef add_entry():\n     Add an entry. \n\n\ndef view_entries():\n     View previous entries. \n\n\ndef delete_entry(entry):\n     Delete an entry. \n\n\nmenu = OrderedDict([ # ADD tuple\n    ('a', add_entry),\n    ('v', view_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()  This is coded in Python 2. In Python 3, we would replace  raw_input  by  input .  The result is dynamic. We can input data in the terminal and the script continues to run until we quit with  q . We cannot do much since the functions are still empty ( def add_entry():  and  def view_entries(): ). The following is a snapshot.  Enter 'q' to quit.\na) Add an entry.\nv) View previous entries.\nActions:", 
            "title": "A diary app -- Create a menu"
        }, 
        {
            "location": "/Databases/#a-diary-app-data-entry", 
            "text": "Add the  sys  library. We want to enter data and load the database.  from collections import OrderedDict\nimport datetime\nimport sys # ADD\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n     Create the database and the table if they don't exist. \n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n     Show the menu. \n    choice = None\n\n    while choice != 'q':\n        print( Enter 'q' to quit. )\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry(): # IMPROVE\n     Add an entry. \n    print( Enter your entry. Press ctrl+z when finished. )\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print( Saved successfully! )\n\n\ndef view_entries():\n     View previous entries. \n\n\ndef delete_entry(entry):\n     Delete an entry. \n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()  The result is dynamic.  To the question  Enter your entry. Press ctrl+d when finished. , write  Working with databases. I enjoy my day. . Press enter, then press ctrl+z, then enter in Windows, ctrl+d in UNIX-based OS (for End-of-File key sequence). Save it (with a  y  input). Repeat. This time, do not save it ( n ). Check out the results in the database.  raw_input  in Python 2 vs.  input  in Python 3. In Python 2, we can print with  print \" \"  or  print(\" \") . The later is only possible in Python 3.", 
            "title": "A diary app -- Data entry"
        }, 
        {
            "location": "/Databases/#a-diary-app-search-and-view-entries", 
            "text": "We now want to read the data (query the database). We also want to search throught the entries. In SQL, we would code:  SELECT * FROM entry WHERE content LIKE '%search_query$' ORDER BY timestamp DESC; .  from collections import OrderedDict\nimport datetime\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n     Create the database and the table if they don't exist. \n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n     Show the menu. \n    choice = None\n\n    while choice != 'q':\n        print( Enter 'q' to quit. )\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry():\n     Add an entry. \n    print( Enter your entry. Press ctrl+z when finished. )\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print( Saved successfully! )\n\n\ndef view_entries(search_query=None): # IMPROVE\n     View previous entries. \n    entries = Entry.select().order_by(Entry.timestamp.desc()) # sort them\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p') # day name, month, date, year, hour (12h), minute, am/pm\n        print(timestamp)\n        print('='*len(timestamp)) # print the number of characters in the timestamp\n        print(entry.content)\n        print('n) next entry')\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Nq] ').lower().strip()\n        if next_action == 'q':\n            break\n\n\ndef search_entries():\n     Search entries for a string. \n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry):\n     Delete an entry. \n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries), # ADD\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()  The result is dynamic. Try entering stuff, save it. Back to the menu, read the entry. We should get a date, a line of  =  and the entry. Quit and go back to the menu. Try search for a word. It should find a single word among all the entry and pull out the entry where the word appears.", 
            "title": "A diary app -- Search and view entries"
        }, 
        {
            "location": "/Databases/#a-diary-app-delete-entries", 
            "text": "Complete the last function:  def delete_entry(entry): .  from collections import OrderedDict\nimport datetime\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n     Create the database and the table if they don't exist. \n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef menu_loop():\n     Show the menu. \n    choice = None\n\n    while choice != 'q':\n        print( Enter 'q' to quit. )\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            menu[choice]()\n\n\ndef add_entry():\n     Add an entry. \n    print( Enter your entry. Press ctrl+z when finished. )\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print( Saved successfully! )\n\n\ndef view_entries(search_query=None):\n     View previous entries. \n    entries = Entry.select().order_by(Entry.timestamp.desc())\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p')\n        print(timestamp)\n        print('='*len(timestamp))\n        print(entry.content)\n        print('n) next entry')\n        print('d) delete entry') # ADD\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Ndq] ').lower().strip()\n        if next_action == 'q':\n            break\n        elif next_action == 'd': # ADD\n            delete_entry(entry)\n\n\ndef search_entries():\n     Search entries for a string. \n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry): # IMPROVE\n     Delete an entry. \n    if raw_input( Are you sure? [yN]  ).lower() == 'y':\n        entry.delete_instance()\n        print( Entry deleted! )\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()  The result is dynamic. Enter something. Save it. View it. Delete it (the last entry). Confirm it. Go back to the main menu. View the previous entries. The last entry was deleted and we see the previous entry.", 
            "title": "A diary app -- Delete entries"
        }, 
        {
            "location": "/Databases/#a-diary-app-finalize-and-polish-up", 
            "text": "We can polish up the final result. We need to ventilate the onscreen printouts by cleaning the screen here and there. On Windows, we clear the screen with  cls ; on UNIX-based OS, with  clear .  Here is the final product. It s not perfect, but it works.  from collections import OrderedDict\nimport datetime\nimport os # ADD\nimport sys\nfrom peewee import *\n\ndb = SqliteDatabase('C:\\sqlite\\diary.db')\n\n\nclass Entry(Model):\n    content = TextField()\n    timestamp = DateTimeField(default=datetime.datetime.now)\n\n    class Meta:\n        database = db\n\n\ndef initialize():\n     Create the database and the table if they don't exist. \n    db.connect()\n    db.create_tables([Entry], safe=True)\n\n\ndef clear(): # ADD\n    os.system('cls' if os.name == 'nt' else 'clear') # ADD; cls for Windows, clear for Linux or Mac OS X\n\n\ndef menu_loop():\n     Show the menu. \n    choice = None\n\n    while choice != 'q':\n        clear()\n        print( Enter 'q' to quit. )\n        for key, value in menu.items():\n            print('{}) {}'.format(key, value.__doc__))\n        choice = raw_input('Action: ').lower().strip()\n\n        if choice in menu:\n            clear()\n            menu[choice]()\n\n\ndef add_entry():\n     Add an entry. \n    print( Enter your entry. Press ctrl+z when finished. )\n    data = sys.stdin.read().strip()\n\n    if data:\n        if raw_input('Save entry? [Yn] ').lower() != 'n':\n            Entry.create(content=data)\n            print( Saved successfully! )\n\n\ndef view_entries(search_query=None):\n     View previous entries. \n    entries = Entry.select().order_by(Entry.timestamp.desc())\n    if search_query:\n        entries = entries.where(Entry.content.contains(search_query))\n\n    for entry in entries:\n        timestamp = entry.timestamp.strftime('%A %B %d, %Y %I:%M%p')\n        clear()\n        print(timestamp)\n        print('='*len(timestamp))\n        print(entry.content)\n        print('\\n\\n'+'='*len(timestamp)) # ADD\n        print('n) next entry')\n        print('d) delete entry')\n        print('q) return to main menu')\n\n        next_action = raw_input('Action: [Ndq] ').lower().strip()\n        if next_action == 'q':\n            break\n        elif next_action == 'd':\n            delete_entry(entry)\n\n\ndef search_entries():\n     Search entries for a string. \n    view_entries(raw_input('Search query: '))\n\n\ndef delete_entry(entry):\n     Delete an entry. \n    if raw_input( Are you sure? [yN]  ).lower() == 'y':\n        entry.delete_instance()\n        print( Entry deleted! )\n\n\nmenu = OrderedDict([\n    ('a', add_entry),\n    ('v', view_entries),\n    ('s', search_entries),\n])\n\n\nif __name__ == '__main__':\n    initialize()\n    menu_loop()", 
            "title": "A diary app -- Finalize and polish up"
        }, 
        {
            "location": "/Datetime/", 
            "text": "CONTENT\n\n\nThe datatime library\n\n\nnow or any date-time\n\n\nDate-time difference\n\n\nMeasure duration with timedelta\n\n\nnow vs. today\n\n\nFormatting date-time\n\n\nA little printing app\n\n\n\n\n\n\nBuild a Quiz application\n\n\nBuild the skeleton\n\n\nGenerate questions\n\n\nFinalize the application\n\n\n\n\n\n\nTime zones\n\n\nTime zones with datatime only\n\n\nTime zones with datatime and pytz\n\n\nFind out more about pytz\n\n\nBuild a script to convert time zones\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2 \n 3. Consult the \nHitchicker\ns Guide to Python\n.\n\n\n\n\nThe \ndatatime\n library\n\n\nWhen building an application incorporating a time triggers, events, records log entries, and much more, we need to deal with dates and times; and time zones. Whether it is a simple script that starts every morning to scrape web data, build a report, and send emails or a comprehensive web framework script that records data entries.\n\n\nnow\n or any date-time\n\n\nThe \ndatatime\n library has handy built-in functions: \ndate\n, \ntime\n, \ndatetime\n, \ntimedelta\n, and \ntzinfo\n. The following script demonstrates some of the functionalities.\n\n\nimport datetime\n\nprint \nThe datatime library: \n\nprint dir(datetime)\nprint \n=\n * 25\n\nprint \nThe current datetime: \n\nprint datetime.datetime.now()\n\nprint \n...in a variable: \n\ntest_start = datetime.datetime.now()\nprint test_start\nprint \n=\n * 25\n\nprint \nReplace the attributes: new formatting.\n\ntest_start = test_start.replace(hour=7, minute=39, second = 0, microsecond=0)\nprint test_start\nprint \n=\n * 25\n\n\n\n\nResults.\n\n\nimport datetime\n\nThe datatime library: \n['MAXYEAR', 'MINYEAR', '__doc__', '__name__', '__package__', 'date', 'datetime', 'datetime_CAPI', 'time', 'timedelta', 'tzinfo']\n=========================\n\nThe current datetime: \n2016-04-08 10:03:06.120000\n...in a variable: \n2016-04-08 10:03:06.120000\n=========================\n\nReplace the attributes: new formatting.\n2016-04-08 07:39:00\n=========================\n\n\n\n\nDate-time difference\n\n\nCreate a date-time and compute the time difference.\n\n\nimport datetime\n\nprint \nStart: \n\nprint test_start\nprint \n=\n * 25\n\nduration = datetime.datetime.now() - test_start\nprint \nduration = datetime.datetime.now() - test_start: \n\nprint \nduration = \n, duration\nprint \nday = \n, duration.days\nprint \nmicroseconds = \n, duration.microseconds\nprint \nseconds = \n, duration.seconds\nprint \nhours (round(seconds/3600)) = \n, round(duration.seconds/3600)\n\n\n\n\nResults.\n\n\nStart: \n2016-04-08 07:39:00\n=========================\n\nduration = datetime.datetime.now() - test_start: \nduration =  2:24:06.120000\nday =  0\nmicroseconds =  120000\nseconds =  8646\nhours (round(seconds/3600)) =  2.0\nminutes (round(seconds/60)) =  144.0\n=========================\n\n\n\n\nMeasure duration with \ntimedelta\n\n\nCreate a delta.\n\n\nprint \ndatetime.datetime.now():\n\nprint datetime.datetime.now()\n\nprint \ndatetime.datetime.now() + datetime.timedelta(days=3): \n\nprint datetime.datetime.now() + datetime.timedelta(days=3)\nprint \n...........................................(days=-5): \n\nprint datetime.datetime.now() + datetime.timedelta(days=-5)\nprint \n...........................................(days=-1): \n\nprint datetime.datetime.now() + datetime.timedelta(days=-1)\nprint \n=\n * 25\nprint \n\n\nprint \ndatetime.datetime.now() + datetime.timedelta(hours=1): \n\nprint datetime.datetime.now() + datetime.timedelta(hours=1)\nprint \ndatetime.datetime.now() + datetime.timedelta(0, 3600): \n\nprint datetime.datetime.now() + datetime.timedelta(0, 3600)\nprint \n=\n * 25\nprint \n\n\nwork = 9\nprint \nwork = \n, work\n\nprint \ndatetime.datetime.now() + datetime.timedelta(hours=work):\n\nprint datetime.datetime.now() + datetime.timedelta(hours=work)\nprint \n=\n * 25\nprint \n\n\n\n\n\nResults.\n\n\ndatetime.datetime.now():\n2016-04-08 10:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(days=3): \n2016-04-11 10:06:25.895000\n...........................................(days=-5): \n2016-04-03 10:06:25.895000\n...........................................(days=-1): \n2016-04-07 10:06:25.895000\n=========================\n\ndatetime.datetime.now() + datetime.timedelta(hours=1): \n2016-04-08 11:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(0, 3600): \n2016-04-08 11:06:25.895000\n=========================\n\nwork =  9\ndatetime.datetime.now() + datetime.timedelta(hours=work):\n2016-04-08 19:06:25.895000\n=========================\n\n\n\n\nUse \ntimedelta\n.\n\n\nprint \nSimplify: \n\nnow = datetime.datetime.now()\nprint \nnow: \n\nprint now\nprint \nnow.date: \n\nprint now.date()\nprint \nnow.time: \n\nprint now.time()\nprint \n=\n * 25\nprint \n\n\nprint \n1 hour: \n\nhour = datetime.timedelta(hours=1)\nprint hour\nprint \n=\n * 25\nprint \n\n\nprint \nAdd 1 day: \n\ntomorrow = datetime.datetime.now().replace(hour=9, minute=0) + datetime.timedelta(days=1)\nprint tomorrow\n\nprint \nAdd 1 day (2): \n\nworkday = datetime.timedelta(hours=8)\nprint tomorrow + workday\nprint \n=\n * 25\nprint \n\n\nprint \nAppointment: \n\nappointment = datetime.timedelta(minutes=45)\n# year, month, day, hour, minute\nstart =  datetime.datetime(2016, 8, 17, 12, 45)\nend = start + appointment\nprint end\nprint \n=\n * 25\nprint \n\n\n\n\n\nResults.\n\n\nSimplify: \nnow: \n2016-04-08 10:16:11.476000\nnow.date: \n2016-04-08\nnow.time: \n10:16:11.476000\n=========================\n\n1 hour: \n1:00:00\n=========================\n\nAdd 1 day: \n2016-04-09 09:00:11.476000\nAdd 1 day (2): \n2016-04-09 17:00:11.476000\n=========================\n\nAppointment: \n2016-08-17 13:30:00\n=========================\n\n\n\n\nnow\n vs. \ntoday\n\n\nThe difference between \nnow\n and \ntoday\n is\n\n\nimport datetime\n\nnow = datetime.datetime.now()\ntoday = datetime.datetime.today()\nprint now\nprint today\nprint \n=\n * 25\nprint \n\n\n\n\n\nResults.\n\n\n2016-04-08 10:34:28.444000\n2016-04-08 10:34:28.444000\n=========================\n\n\n\n\nnow\n can take a timezone. We deal with timezones further down. \nToday\n\n\nimport datetime\n\ntoday = datetime.datetime.combine(datetime.date.today(), datetime.time())\nprint today # today at midnight\nprint today.month\nprint today.hour\nprint today.year\nprint today.weekday() # 0 = Monday, 1, 2, 3, 4\nprint \n=\n * 25\nprint \n\n\n\n\n\nResults.\n\n\n2016-04-08 00:00:00\n4\n0\n2016\n5\n=========================\n\n\n\n\nFormatting date-time\n\n\nFormat date and time.\n\n\nimport datetime\n\nnow = datetime.datetime.now()\nprint now\n\n# how to better present\n# strftime (strings-from-time) or turn datetime digits into strings\n\nprint \nformatting datetime:\n\nprint now.strftime('%B %d')\nprint now.strftime('%m/%m/%y')\n\n\n\n\nResults.\n\n\n2016-04-08 11:08:26.757000\nformatting datetime:\nApril 08\n04/04/16\n\n\n\n\nstrptime\n (strings-parse-time) turns strings into datetime digits. Look for help online for date and time types.\n\n\nimport datetime\n\nprint \nFormatting datetime: \n\nprint now.strftime('%B %d')\nprint now.strftime('%m/%m/%y')\nprint \n=\n * 25\nprint \n\n\nprint \nbithday: \n\nbirthday = datetime.datetime.strptime('2016-04-21', '%Y-%m-%d')\nprint birthday\nprint \n=\n * 25\nprint \n\n\nprint \nbithday_party: \n\nbirthday_party = datetime.datetime.strptime('2016-04-22 12:00', '%Y-%m-%d %H:%M')\nprint birthday_party\nprint \n=\n * 25\nprint \n\n\n\n\n\nResults.\n\n\nFormatting datetime: \nApril 08\n04/04/16\n=========================\n\nbithday: \n2016-04-21 00:00:00\n=========================\n\nbithday_party: \n2016-04-22 12:00:00\n=========================\n\n\n\n\nA little printing app\n\n\nBuild an application that prints out a date in a sentence.\n\n\nimport datetime\n\nanswer_format = '%m/%d'\nlink_format = '%b_%d'\nlink = 'https://en.wikipedia.org/wiki/{}'\n\nwhile True:\n    answer = raw_input(\nWhat date would you like? Please use the MM/DD format. Enter 'q' to quit.\n)\n    answer2 = str(answer)\n    if answer2.upper() == 'Q':\n        break\n\n    try:\n        date = datetime.datetime.strptime(answer, answer_format)\n        output = link.format(date.strftime(link_format))\n        print(output)\n        file = open('output.txt', 'w')\n        file.write(output)\n        file.close()\n    except:\n        print(\nThat's not a valid date. Please try again.\n)\n        break\n\n\n\n\nRun it; it creates an output file. Open output.txt. Copy the link and paste it into a web browser.\n\n\nBuild a Quiz application\n\n\nBuild the skeleton\n\n\nBuild an application (questions.py) that add and multiply numbers.\n\n\nimport datetime\n\nclass Question:\n    answer = None\n    text = None\n\n\nclass Add(Question):\n    def __init__(self, num1, num2):\n        self.text = '{} + {}'.format(num1, num2)\n        self.answer = num1 + num2\n\n\nclass Multiply(Question):\n    def __init__(self, num1, num2):\n        self.text = '{} x {}'.format(num1, num2)\n        self.answer = num1 * num2\n\n\nprint \nAdd: \n\nadd1 = Add(5, 7)\nprint add1.text\nprint add1.answer\nprint \nMultiply: \n\nmultiply1 = Multiply(2, 2)\nprint multiply1.text\nprint multiply1.answer\n\n\n\n\nResults.\n\n\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n\n\n\n\nImport the questions.py module in another script: quiz.py. Build the skeleton.\n\n\nimport datetime\nimport random\n\nfrom questions import Add, Multiply # import the other module\n\n\nclass Quiz:\n    questions = []\n    answers = []\n\n    def __init__(self):\n        # generate 10 random questions with numbers from 1 to 10\n        # add these questions into self.questions\n        pass\n\n    def take_quiz(self):\n        # log the start time\n        # ask all of the questions\n        # log if they got the question right\n        # log the end time\n        # show a summary\n        pass\n\n    def ask(self, question):\n        # log the start time\n        # capture the answer\n        # check the answer\n        # log the end time\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        pass\n\n\n    def total_correct(self):\n        # return the total # of correct answers\n        pass\n\n\n    def summary(self):\n        # print how many you got right and the total of questions: 5/10\n        # print the total time for the quiz: 30 seconds!\n        pass\n\n\n\n\nResults (similar).\n\n\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n\n\n\n\nGenerate questions\n\n\nComplete some functions and test the script.\n\n\nimport datetime\nimport random\n\nfrom questions import Add, Multiply\n\n\nclass Quiz: # ADD\n    questions = []\n    answers = []\n\n    def __init__(self):\n        \n\n        generate 10 random questions with numbers from 1 to 10\n        add these questions into self.questions\n        \n\n        question_types = (Add, Multiply)\n\n        for _ in range(10): # _ we don't care if it's 1, 5 or 12, as long as it is a number\n            num1 = random.randint(1, 10)\n            num2 = random.randint(1, 10)\n            question = random.choice(question_types)(num1, num2)\n            # add these questions into self.questions\n            self.questions.append(question)\n\n    def take_quiz(self):\n        # log the start time\n        # ask all of the questions\n        # log if they got the question right\n        # log the end time\n        # show a summary\n        pass\n\n    def ask(self, question):\n        # log the start time\n        # capture the answer\n        # check the answer\n        # log the end time\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        pass\n\n\n    def total_correct(self): # ADD\n        \nreturn the total # of correct answers\n\n        total = 0\n        for answer in self.answers:\n            if answer[0]:\n                total += 1\n        return total\n\n    def summary(self): # ADD\n        \n\n        print how many you got right and the total of questions: 5/10\n        print the total time for the quiz: 30 seconds!\n        \n\n        print(\nYou got {} out of {} right.\n.format(\n                self.total_correct(), len(self.questions)\n        ))\n        print(\nIt took you {} seconds total.\n.format(\n                (self.end_time-self.start_time).seconds\n        ))\n\n\nquiz1 = Quiz()\nprint quiz1.answers\nprint quiz1.questions\nprint \n=\n * 25\nprint quiz1.questions[0].text\nprint quiz1.questions[0].answer\n\n\n\n\nResults.\n\n\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n[]\n[\nquestions.Add instance at 0x00000000022B7E88\n, \nquestions.Multiply instance at 0x00000000022FBC88\n, \nquestions.Multiply instance at 0x00000000022FB688\n, \nquestions.Multiply instance at 0x00000000022FBDC8\n, \nquestions.Add instance at 0x00000000022FBE08\n, \nquestions.Multiply instance at 0x00000000022FBE48\n, \nquestions.Multiply instance at 0x00000000022FBE88\n, \nquestions.Add instance at 0x00000000022FBEC8\n, \nquestions.Multiply instance at 0x00000000022FBF08\n, \nquestions.Multiply instance at 0x00000000022FBF48\n]\n=========================\n3 + 1\n4\n\n\n\n\nFinalize the application\n\n\nComplete the script and test it.\n\n\nimport datetime\nimport random\n\nfrom questions import Add, Multiply\n\n\nclass Quiz:\n    questions = []\n    answers = []\n\n    def __init__(self):\n        \n\n        generate 10 random questions with numbers from 1 to 10\n        add these questions into self.questions\n        \n\n        question_types = (Add, Multiply)\n\n        for _ in range(10): # _ we don't care if it's 1, 5 or 12, as long as it is a number\n            num1 = random.randint(1, 10)\n            num2 = random.randint(1, 10)\n            question = random.choice(question_types)(num1, num2)\n            # add these questions into self.questions\n            self.questions.append(question)\n\n    def take_quiz(self): # ADD\n        \n\n        log the start time, ask all of the questions\n        log if they got the question right, log the end time\n        show a summary\n        \n\n        # log the start time\n        self.start_time = datetime.datetime.now()\n\n        # ask all of the questions\n        for question in self.questions:\n            self.answers.append(self.ask(question))\n        else: # if the loop reached the end, so else happends\n            self.end_time = datetime.datetime.now()\n\n        # show a summary\n        return self.summary()     \n\n\n    def ask(self, question): # ADD\n        \n\n        log the start time, capture the answer, check the answer\n        log the end time, if the answer's right, send back True\n        otherwise, send back False, send back the elapses time, too\n        \n\n        correct = False\n        # log the start time\n        question_start = datetime.datetime.now()\n\n        # capture the answer\n        answer = raw_input(question.text + ' = ')\n\n        # check the answer\n        if answer == str(question.answer):\n            correct = True\n\n        # log the end time\n        question_end = datetime.datetime.now()\n\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        return correct, question_end - question_start\n\n\n    def total_correct(self):\n        \nreturn the total # of correct answers\n\n        total = 0\n        for answer in self.answers:\n            if answer[0]:\n                total += 1\n        return total\n\n    def summary(self):\n        \n\n        print how many you got right and the total of questions: 5/10\n        print the total time for the quiz: 30 seconds!\n        \n\n        print(\nYou got {} out of {} right.\n.format(\n                self.total_correct(), len(self.questions)\n        ))\n        print(\nIt took you {} seconds total.\n.format(\n                (self.end_time-self.start_time).seconds\n        ))\n\n\nQuiz().take_quiz() # ADD\n\n\n\n\nThe results are dynamic. We would get something that look like the following:\n\n\nAdd: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n7 x 6 = 54\n9 x 10 = 90\n4 x 3 = 12\n3 + 6 = 9\n5 + 6 = 11\n10 x 6 = 60\n4 x 6 = 24\n9 + 9 = 18\n2 x 5 = 10\n8 + 3 = 11\nYou got 9 out of 10 rights.\nIt took you 21 seconds total.\n\n\n\n\nTime zones\n\n\nTimezones are major challenges for websites and web frameworks. The following is coded in Python 3 since the most common Python frameworks (Flask, Django, Pyramid) at the time this documentation is written work under Python 3. One of the reason is the multi-language ability.\n\n\nTime zones with \ndatatime\n only\n\n\nWe build two timezone-aware variables.\n\n\nimport datetime\n\npacific = datetime.timezone(datetime.timedelta(hours=-8))\neastern = datetime.timezone(datetime.timedelta(hours=-5))\n\nprint(pacific)\nprint(eastern)\n\n\n\n\nResults.\n\n\nUTC-08:00\nUTC-05:00\n\n\n\n\nWe build one timezone-naive variable and one timezone-aware variable.\n\n\n# ...\n\nnaive = datetime.datetime(2014, 4, 21, 9)\nprint(naive)\n\naware = datetime.datetime(2014, 4, 21, 9, tzinfo=pacific)\nprint(aware)\n\n\n\n\nResults.\n\n\n2014-04-21 09:00:00\n2014-04-21 09:00:00-08:00\n\n\n\n\nShow these in eastern time.\n\n\n# ...\n\nprint(naive.astimezone(eastern))\n\n\n\n\nResults: cannot be applied to a naive datetime.\n\n\n# ...\n\nprint(aware.astimezone(eastern))\n\n\n\n\nResults.\n\n\n2014-04-21 12:00:00-05:00\n\n\n\n\nOther interesting time zones.\n\n\n# ...\n\naukland = datetime.timezone(datetime.timedelta(hours=13))\nprint(aukland)\nprint(aware.astimezone(aukland))\nprint(\n=\n * 25)\n\nmumbai = datetime.timezone(datetime.timedelta(hours=13, minutes=30))\nprint(mumbai)\nprint(aware.astimezone(mumbai))\n\n\n\n\nResults.\n\n\nUTC+13:00\n2014-04-22 06:00:00+13:00\n=========================\nUTC+05:30\n2014-04-21 22:30:00+05:30\n\n\n\n\nTime zones with \ndatatime\n and \npytz\n\n\npytz\n simplify things (a lot!).\n\n\nimport datetime\nimport pytz\n\npacific = pytz.timezone('US/Pacific')\neastern = pytz.timezone('US/Eastern')\n\nfmt = '%Y-%m-%d %H:%M:%S %Z%z'\nutc = pytz.utc\n\nprint(\nset: \n)\nstart = pacific.localize(datetime.datetime(2014, 4, 21, 9))\nprint(start.strftime(fmt))\nprint(\n=\n * 25)\n\nprint(\nconvert: \n)\nstart_eastern = start.astimezone(eastern)\nprint(start_eastern)\nprint(\n=\n * 25)\n\nprint(start)\nprint(\n=\n * 25)\n\n\n\n\nResults.\n\n\nset: \n2014-04-21 09:00:00 PDT-0700\n=========================\nconvert: \n2014-04-21 12:00:00-04:00\n=========================\n2014-04-21 09:00:00-07:00\n=========================\n\n\n\n\nMore conversions.\n\n\n# ...\n\nprint(\nset: \n)\nstart_utc = datetime.datetime(2014, 4, 21, 1, tzinfo=utc)\nprint(start_utc.strftime(fmt))\nprint(\n=\n * 25)\n\nprint(\nconvert: \n)\nstart_pacific = start_utc.astimezone(pacific)\nprint(start_pacific)\nprint(\n=\n * 25)\n\n\n\n\nResults.\n\n\nset: \n2014-04-21 01:00:00 UTC+0000\n=========================\nconvert: \n2014-04-20 18:00:00-07:00\n=========================\n\n\n\n\nSet a date-time and convert it.\n\n\n# ...\n\nprint(\nset aukland and mumbai\n)\nauckland = pytz.timezone('Pacific/Auckland')\nmumbai = pytz.timezone('Asia/Calcutta')\n\nprint(\ncreate a date\n)\napollo_13_naive = datetime.datetime(1970, 4, 11, 14, 13)\napollo_13_eastern = eastern.localize(apollo_13_naive)\n\nprint(\nprint it: \n)\nprint(apollo_13_naive)\nprint(apollo_13_eastern)\nprint(\n=\n * 25)\n\nprint(\nconvert it, change location: \n)\napollo_13_utc = apollo_13_eastern.astimezone(utc)\nprint(apollo_13_utc.astimezone(pacific).strftime(fmt))\nprint(apollo_13_utc.astimezone(auckland))\nprint(apollo_13_utc.astimezone(mumbai))\n\n\n\n\nResults.\n\n\nset aukland and mumbai\ncreate a date\nprint it: \n1970-04-11 14:13:00\n1970-04-11 14:13:00-05:00\n=========================\nconvert it, change location: \n1970-04-11 11:13:00 PST-0800\n1970-04-12 07:13:00+12:00\n1970-04-12 00:43:00+05:30\n\n\n\n\n\nFind out more about \npytz\n\n\nFind out about timezones: \nprint(pytz.all_timezones)\n. Or focus on a country\ns timezones. The US.\n\n\nprint(pytz.country_timezones['us'])\n\n\n\n\nResults.\n\n\n['America/New_York', 'America/Detroit', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Indiana/Indianapolis', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Chicago', 'America/Indiana/Tell_City', 'America/Indiana/Knox', 'America/Menominee', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/North_Dakota/Beulah', 'America/Denver', 'America/Boise', 'America/Phoenix', 'America/Los_Angeles', 'America/Anchorage', 'America/Juneau', 'America/Sitka', 'America/Metlakatla', 'America/Yakutat', 'America/Nome', 'America/Adak', 'Pacific/Honolulu']\n\n\n\n\nCanada.\n\n\nprint(pytz.country_timezones['ca'])\n\n\n\n\nResults.\n\n\n['America/St_Johns', 'America/Halifax', 'America/Glace_Bay', 'America/Moncton', 'America/Goose_Bay', 'America/Blanc-Sablon', 'America/Toronto', 'America/Nipigon', 'America/Thunder_Bay', 'America/Iqaluit', 'America/Pangnirtung', 'America/Atikokan', 'America/Winnipeg', 'America/Rainy_River', 'America/Resolute', 'America/Rankin_Inlet', 'America/Regina', 'America/Swift_Current', 'America/Edmonton', 'America/Cambridge_Bay', 'America/Yellowknife', 'America/Inuvik', 'America/Creston', 'America/Dawson_Creek', 'America/Fort_Nelson', 'America/Vancouver', 'America/Whitehorse', 'America/Dawson']\n\n\n\n\nRussia.\n\n\nprint(pytz.country_timezones['ru'])\n\n\n\n\nResults.\n\n\n['Europe/Kaliningrad', 'Europe/Moscow', 'Europe/Simferopol', 'Europe/Volgograd', 'Europe/Kirov', 'Europe/Astrakhan', 'Europe/Saratov', 'Europe/Ulyanovsk', 'Europe/Samara', 'Asia/Yekaterinburg', 'Asia/Omsk', 'Asia/Novosibirsk', 'Asia/Barnaul', 'Asia/Tomsk', 'Asia/Novokuznetsk', 'Asia/Krasnoyarsk', 'Asia/Irkutsk', 'Asia/Chita', 'Asia/Yakutsk', 'Asia/Khandyga', 'Asia/Vladivostok', 'Asia/Ust-Nera', 'Asia/Magadan', 'Asia/Sakhalin', 'Asia/Srednekolymsk', 'Asia/Kamchatka', 'Asia/Anadyr']\n\n\n\n\nBuild a script to convert time zones\n\n\nBuild a script that takes a datetime and give it back in 6 other timezones. For any given datetime, an appointment for example, we can know the equivalent elsewhere in the world.\n\n\nfrom datetime import datetime\n\nimport pytz\n\nOTHER_TIMEZONES = [\n    pytz.timezone('US/Eastern'),\n    pytz.timezone('Pacific/Auckland'),\n    pytz.timezone('Asia/Calcutta'),\n    pytz.timezone('UTC'),\n    pytz.timezone('Europe/Paris'),\n    pytz.timezone('Africa/Khartoum'),\n]\n\nfmt = '%Y-%m-%d %H:%M:%S %Z%z'\n\nwhile True:\n    date_input = input(\nWhen is your meeting? Please use MM/DD/YYYY HH:MM format. \n)\n    try:\n        local_date = datetime.strptime(date_input, '%m/%d/%Y %H:%M')\n    except ValueError:\n        print(\n{} doesn't seem to be a valid date \n time.\n.format(date_input))\n    else:\n        local_date = pytz.timezone('US/Pacific').localize(local_date)\n        utc_date = local_date.astimezone(pytz.utc)\n\n        output = []\n        for timezone in OTHER_TIMEZONES:\n            output.append(utc_date.astimezone(timezone))\n        for appointment in output:\n            print(appointment.strftime(fmt))\n        break\n\n\n\n\nResults (1 inputs, 6 outputs).\n\n\nWhen is your meeting? Please use MM/DD/YYYY HH:MM format. 01/01/2018 13:00\n2018-01-01 16:00:00 EST-0500\n2018-01-02 10:00:00 NZDT+1300\n2018-01-02 02:30:00 IST+0530\n2018-01-01 21:00:00 UTC+0000\n2018-01-01 22:00:00 CET+0100\n2018-01-02 00:00:00 EAT+0300", 
            "title": "Datetime"
        }, 
        {
            "location": "/Datetime/#now-or-any-date-time", 
            "text": "The  datatime  library has handy built-in functions:  date ,  time ,  datetime ,  timedelta , and  tzinfo . The following script demonstrates some of the functionalities.  import datetime\n\nprint  The datatime library:  \nprint dir(datetime)\nprint  =  * 25\n\nprint  The current datetime:  \nprint datetime.datetime.now()\n\nprint  ...in a variable:  \ntest_start = datetime.datetime.now()\nprint test_start\nprint  =  * 25\n\nprint  Replace the attributes: new formatting. \ntest_start = test_start.replace(hour=7, minute=39, second = 0, microsecond=0)\nprint test_start\nprint  =  * 25  Results.  import datetime\n\nThe datatime library: \n['MAXYEAR', 'MINYEAR', '__doc__', '__name__', '__package__', 'date', 'datetime', 'datetime_CAPI', 'time', 'timedelta', 'tzinfo']\n=========================\n\nThe current datetime: \n2016-04-08 10:03:06.120000\n...in a variable: \n2016-04-08 10:03:06.120000\n=========================\n\nReplace the attributes: new formatting.\n2016-04-08 07:39:00\n=========================", 
            "title": "now or any date-time"
        }, 
        {
            "location": "/Datetime/#date-time-difference", 
            "text": "Create a date-time and compute the time difference.  import datetime\n\nprint  Start:  \nprint test_start\nprint  =  * 25\n\nduration = datetime.datetime.now() - test_start\nprint  duration = datetime.datetime.now() - test_start:  \nprint  duration =  , duration\nprint  day =  , duration.days\nprint  microseconds =  , duration.microseconds\nprint  seconds =  , duration.seconds\nprint  hours (round(seconds/3600)) =  , round(duration.seconds/3600)  Results.  Start: \n2016-04-08 07:39:00\n=========================\n\nduration = datetime.datetime.now() - test_start: \nduration =  2:24:06.120000\nday =  0\nmicroseconds =  120000\nseconds =  8646\nhours (round(seconds/3600)) =  2.0\nminutes (round(seconds/60)) =  144.0\n=========================", 
            "title": "Date-time difference"
        }, 
        {
            "location": "/Datetime/#measure-duration-with-timedelta", 
            "text": "Create a delta.  print  datetime.datetime.now(): \nprint datetime.datetime.now()\n\nprint  datetime.datetime.now() + datetime.timedelta(days=3):  \nprint datetime.datetime.now() + datetime.timedelta(days=3)\nprint  ...........................................(days=-5):  \nprint datetime.datetime.now() + datetime.timedelta(days=-5)\nprint  ...........................................(days=-1):  \nprint datetime.datetime.now() + datetime.timedelta(days=-1)\nprint  =  * 25\nprint  \n\nprint  datetime.datetime.now() + datetime.timedelta(hours=1):  \nprint datetime.datetime.now() + datetime.timedelta(hours=1)\nprint  datetime.datetime.now() + datetime.timedelta(0, 3600):  \nprint datetime.datetime.now() + datetime.timedelta(0, 3600)\nprint  =  * 25\nprint  \n\nwork = 9\nprint  work =  , work\n\nprint  datetime.datetime.now() + datetime.timedelta(hours=work): \nprint datetime.datetime.now() + datetime.timedelta(hours=work)\nprint  =  * 25\nprint    Results.  datetime.datetime.now():\n2016-04-08 10:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(days=3): \n2016-04-11 10:06:25.895000\n...........................................(days=-5): \n2016-04-03 10:06:25.895000\n...........................................(days=-1): \n2016-04-07 10:06:25.895000\n=========================\n\ndatetime.datetime.now() + datetime.timedelta(hours=1): \n2016-04-08 11:06:25.895000\ndatetime.datetime.now() + datetime.timedelta(0, 3600): \n2016-04-08 11:06:25.895000\n=========================\n\nwork =  9\ndatetime.datetime.now() + datetime.timedelta(hours=work):\n2016-04-08 19:06:25.895000\n=========================  Use  timedelta .  print  Simplify:  \nnow = datetime.datetime.now()\nprint  now:  \nprint now\nprint  now.date:  \nprint now.date()\nprint  now.time:  \nprint now.time()\nprint  =  * 25\nprint  \n\nprint  1 hour:  \nhour = datetime.timedelta(hours=1)\nprint hour\nprint  =  * 25\nprint  \n\nprint  Add 1 day:  \ntomorrow = datetime.datetime.now().replace(hour=9, minute=0) + datetime.timedelta(days=1)\nprint tomorrow\n\nprint  Add 1 day (2):  \nworkday = datetime.timedelta(hours=8)\nprint tomorrow + workday\nprint  =  * 25\nprint  \n\nprint  Appointment:  \nappointment = datetime.timedelta(minutes=45)\n# year, month, day, hour, minute\nstart =  datetime.datetime(2016, 8, 17, 12, 45)\nend = start + appointment\nprint end\nprint  =  * 25\nprint    Results.  Simplify: \nnow: \n2016-04-08 10:16:11.476000\nnow.date: \n2016-04-08\nnow.time: \n10:16:11.476000\n=========================\n\n1 hour: \n1:00:00\n=========================\n\nAdd 1 day: \n2016-04-09 09:00:11.476000\nAdd 1 day (2): \n2016-04-09 17:00:11.476000\n=========================\n\nAppointment: \n2016-08-17 13:30:00\n=========================", 
            "title": "Measure duration with timedelta"
        }, 
        {
            "location": "/Datetime/#now-vs-today", 
            "text": "The difference between  now  and  today  is  import datetime\n\nnow = datetime.datetime.now()\ntoday = datetime.datetime.today()\nprint now\nprint today\nprint  =  * 25\nprint    Results.  2016-04-08 10:34:28.444000\n2016-04-08 10:34:28.444000\n=========================  now  can take a timezone. We deal with timezones further down.  Today  import datetime\n\ntoday = datetime.datetime.combine(datetime.date.today(), datetime.time())\nprint today # today at midnight\nprint today.month\nprint today.hour\nprint today.year\nprint today.weekday() # 0 = Monday, 1, 2, 3, 4\nprint  =  * 25\nprint    Results.  2016-04-08 00:00:00\n4\n0\n2016\n5\n=========================", 
            "title": "now vs. today"
        }, 
        {
            "location": "/Datetime/#formatting-date-time", 
            "text": "Format date and time.  import datetime\n\nnow = datetime.datetime.now()\nprint now\n\n# how to better present\n# strftime (strings-from-time) or turn datetime digits into strings\n\nprint  formatting datetime: \nprint now.strftime('%B %d')\nprint now.strftime('%m/%m/%y')  Results.  2016-04-08 11:08:26.757000\nformatting datetime:\nApril 08\n04/04/16  strptime  (strings-parse-time) turns strings into datetime digits. Look for help online for date and time types.  import datetime\n\nprint  Formatting datetime:  \nprint now.strftime('%B %d')\nprint now.strftime('%m/%m/%y')\nprint  =  * 25\nprint  \n\nprint  bithday:  \nbirthday = datetime.datetime.strptime('2016-04-21', '%Y-%m-%d')\nprint birthday\nprint  =  * 25\nprint  \n\nprint  bithday_party:  \nbirthday_party = datetime.datetime.strptime('2016-04-22 12:00', '%Y-%m-%d %H:%M')\nprint birthday_party\nprint  =  * 25\nprint    Results.  Formatting datetime: \nApril 08\n04/04/16\n=========================\n\nbithday: \n2016-04-21 00:00:00\n=========================\n\nbithday_party: \n2016-04-22 12:00:00\n=========================", 
            "title": "Formatting date-time"
        }, 
        {
            "location": "/Datetime/#a-little-printing-app", 
            "text": "Build an application that prints out a date in a sentence.  import datetime\n\nanswer_format = '%m/%d'\nlink_format = '%b_%d'\nlink = 'https://en.wikipedia.org/wiki/{}'\n\nwhile True:\n    answer = raw_input( What date would you like? Please use the MM/DD format. Enter 'q' to quit. )\n    answer2 = str(answer)\n    if answer2.upper() == 'Q':\n        break\n\n    try:\n        date = datetime.datetime.strptime(answer, answer_format)\n        output = link.format(date.strftime(link_format))\n        print(output)\n        file = open('output.txt', 'w')\n        file.write(output)\n        file.close()\n    except:\n        print( That's not a valid date. Please try again. )\n        break  Run it; it creates an output file. Open output.txt. Copy the link and paste it into a web browser.", 
            "title": "A little printing app"
        }, 
        {
            "location": "/Datetime/#build-a-quiz-application", 
            "text": "", 
            "title": "Build a Quiz application"
        }, 
        {
            "location": "/Datetime/#build-the-skeleton", 
            "text": "Build an application (questions.py) that add and multiply numbers.  import datetime\n\nclass Question:\n    answer = None\n    text = None\n\n\nclass Add(Question):\n    def __init__(self, num1, num2):\n        self.text = '{} + {}'.format(num1, num2)\n        self.answer = num1 + num2\n\n\nclass Multiply(Question):\n    def __init__(self, num1, num2):\n        self.text = '{} x {}'.format(num1, num2)\n        self.answer = num1 * num2\n\n\nprint  Add:  \nadd1 = Add(5, 7)\nprint add1.text\nprint add1.answer\nprint  Multiply:  \nmultiply1 = Multiply(2, 2)\nprint multiply1.text\nprint multiply1.answer  Results.  Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4  Import the questions.py module in another script: quiz.py. Build the skeleton.  import datetime\nimport random\n\nfrom questions import Add, Multiply # import the other module\n\n\nclass Quiz:\n    questions = []\n    answers = []\n\n    def __init__(self):\n        # generate 10 random questions with numbers from 1 to 10\n        # add these questions into self.questions\n        pass\n\n    def take_quiz(self):\n        # log the start time\n        # ask all of the questions\n        # log if they got the question right\n        # log the end time\n        # show a summary\n        pass\n\n    def ask(self, question):\n        # log the start time\n        # capture the answer\n        # check the answer\n        # log the end time\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        pass\n\n\n    def total_correct(self):\n        # return the total # of correct answers\n        pass\n\n\n    def summary(self):\n        # print how many you got right and the total of questions: 5/10\n        # print the total time for the quiz: 30 seconds!\n        pass  Results (similar).  Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4", 
            "title": "Build the skeleton"
        }, 
        {
            "location": "/Datetime/#generate-questions", 
            "text": "Complete some functions and test the script.  import datetime\nimport random\n\nfrom questions import Add, Multiply\n\n\nclass Quiz: # ADD\n    questions = []\n    answers = []\n\n    def __init__(self):\n         \n        generate 10 random questions with numbers from 1 to 10\n        add these questions into self.questions\n         \n        question_types = (Add, Multiply)\n\n        for _ in range(10): # _ we don't care if it's 1, 5 or 12, as long as it is a number\n            num1 = random.randint(1, 10)\n            num2 = random.randint(1, 10)\n            question = random.choice(question_types)(num1, num2)\n            # add these questions into self.questions\n            self.questions.append(question)\n\n    def take_quiz(self):\n        # log the start time\n        # ask all of the questions\n        # log if they got the question right\n        # log the end time\n        # show a summary\n        pass\n\n    def ask(self, question):\n        # log the start time\n        # capture the answer\n        # check the answer\n        # log the end time\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        pass\n\n\n    def total_correct(self): # ADD\n         return the total # of correct answers \n        total = 0\n        for answer in self.answers:\n            if answer[0]:\n                total += 1\n        return total\n\n    def summary(self): # ADD\n         \n        print how many you got right and the total of questions: 5/10\n        print the total time for the quiz: 30 seconds!\n         \n        print( You got {} out of {} right. .format(\n                self.total_correct(), len(self.questions)\n        ))\n        print( It took you {} seconds total. .format(\n                (self.end_time-self.start_time).seconds\n        ))\n\n\nquiz1 = Quiz()\nprint quiz1.answers\nprint quiz1.questions\nprint  =  * 25\nprint quiz1.questions[0].text\nprint quiz1.questions[0].answer  Results.  Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n[]\n[ questions.Add instance at 0x00000000022B7E88 ,  questions.Multiply instance at 0x00000000022FBC88 ,  questions.Multiply instance at 0x00000000022FB688 ,  questions.Multiply instance at 0x00000000022FBDC8 ,  questions.Add instance at 0x00000000022FBE08 ,  questions.Multiply instance at 0x00000000022FBE48 ,  questions.Multiply instance at 0x00000000022FBE88 ,  questions.Add instance at 0x00000000022FBEC8 ,  questions.Multiply instance at 0x00000000022FBF08 ,  questions.Multiply instance at 0x00000000022FBF48 ]\n=========================\n3 + 1\n4", 
            "title": "Generate questions"
        }, 
        {
            "location": "/Datetime/#finalize-the-application", 
            "text": "Complete the script and test it.  import datetime\nimport random\n\nfrom questions import Add, Multiply\n\n\nclass Quiz:\n    questions = []\n    answers = []\n\n    def __init__(self):\n         \n        generate 10 random questions with numbers from 1 to 10\n        add these questions into self.questions\n         \n        question_types = (Add, Multiply)\n\n        for _ in range(10): # _ we don't care if it's 1, 5 or 12, as long as it is a number\n            num1 = random.randint(1, 10)\n            num2 = random.randint(1, 10)\n            question = random.choice(question_types)(num1, num2)\n            # add these questions into self.questions\n            self.questions.append(question)\n\n    def take_quiz(self): # ADD\n         \n        log the start time, ask all of the questions\n        log if they got the question right, log the end time\n        show a summary\n         \n        # log the start time\n        self.start_time = datetime.datetime.now()\n\n        # ask all of the questions\n        for question in self.questions:\n            self.answers.append(self.ask(question))\n        else: # if the loop reached the end, so else happends\n            self.end_time = datetime.datetime.now()\n\n        # show a summary\n        return self.summary()     \n\n\n    def ask(self, question): # ADD\n         \n        log the start time, capture the answer, check the answer\n        log the end time, if the answer's right, send back True\n        otherwise, send back False, send back the elapses time, too\n         \n        correct = False\n        # log the start time\n        question_start = datetime.datetime.now()\n\n        # capture the answer\n        answer = raw_input(question.text + ' = ')\n\n        # check the answer\n        if answer == str(question.answer):\n            correct = True\n\n        # log the end time\n        question_end = datetime.datetime.now()\n\n        # if the answer's right, send back True\n        # otherwise, send back False\n        # send back the elapses time, too\n        return correct, question_end - question_start\n\n\n    def total_correct(self):\n         return the total # of correct answers \n        total = 0\n        for answer in self.answers:\n            if answer[0]:\n                total += 1\n        return total\n\n    def summary(self):\n         \n        print how many you got right and the total of questions: 5/10\n        print the total time for the quiz: 30 seconds!\n         \n        print( You got {} out of {} right. .format(\n                self.total_correct(), len(self.questions)\n        ))\n        print( It took you {} seconds total. .format(\n                (self.end_time-self.start_time).seconds\n        ))\n\n\nQuiz().take_quiz() # ADD  The results are dynamic. We would get something that look like the following:  Add: \n5 + 7\n12\nMultiply: \n2 x 2\n4\n7 x 6 = 54\n9 x 10 = 90\n4 x 3 = 12\n3 + 6 = 9\n5 + 6 = 11\n10 x 6 = 60\n4 x 6 = 24\n9 + 9 = 18\n2 x 5 = 10\n8 + 3 = 11\nYou got 9 out of 10 rights.\nIt took you 21 seconds total.", 
            "title": "Finalize the application"
        }, 
        {
            "location": "/Datetime/#time-zones", 
            "text": "Timezones are major challenges for websites and web frameworks. The following is coded in Python 3 since the most common Python frameworks (Flask, Django, Pyramid) at the time this documentation is written work under Python 3. One of the reason is the multi-language ability.", 
            "title": "Time zones"
        }, 
        {
            "location": "/Datetime/#time-zones-with-datatime-only", 
            "text": "We build two timezone-aware variables.  import datetime\n\npacific = datetime.timezone(datetime.timedelta(hours=-8))\neastern = datetime.timezone(datetime.timedelta(hours=-5))\n\nprint(pacific)\nprint(eastern)  Results.  UTC-08:00\nUTC-05:00  We build one timezone-naive variable and one timezone-aware variable.  # ...\n\nnaive = datetime.datetime(2014, 4, 21, 9)\nprint(naive)\n\naware = datetime.datetime(2014, 4, 21, 9, tzinfo=pacific)\nprint(aware)  Results.  2014-04-21 09:00:00\n2014-04-21 09:00:00-08:00  Show these in eastern time.  # ...\n\nprint(naive.astimezone(eastern))  Results: cannot be applied to a naive datetime.  # ...\n\nprint(aware.astimezone(eastern))  Results.  2014-04-21 12:00:00-05:00  Other interesting time zones.  # ...\n\naukland = datetime.timezone(datetime.timedelta(hours=13))\nprint(aukland)\nprint(aware.astimezone(aukland))\nprint( =  * 25)\n\nmumbai = datetime.timezone(datetime.timedelta(hours=13, minutes=30))\nprint(mumbai)\nprint(aware.astimezone(mumbai))  Results.  UTC+13:00\n2014-04-22 06:00:00+13:00\n=========================\nUTC+05:30\n2014-04-21 22:30:00+05:30", 
            "title": "Time zones with datatime only"
        }, 
        {
            "location": "/Datetime/#time-zones-with-datatime-and-pytz", 
            "text": "pytz  simplify things (a lot!).  import datetime\nimport pytz\n\npacific = pytz.timezone('US/Pacific')\neastern = pytz.timezone('US/Eastern')\n\nfmt = '%Y-%m-%d %H:%M:%S %Z%z'\nutc = pytz.utc\n\nprint( set:  )\nstart = pacific.localize(datetime.datetime(2014, 4, 21, 9))\nprint(start.strftime(fmt))\nprint( =  * 25)\n\nprint( convert:  )\nstart_eastern = start.astimezone(eastern)\nprint(start_eastern)\nprint( =  * 25)\n\nprint(start)\nprint( =  * 25)  Results.  set: \n2014-04-21 09:00:00 PDT-0700\n=========================\nconvert: \n2014-04-21 12:00:00-04:00\n=========================\n2014-04-21 09:00:00-07:00\n=========================  More conversions.  # ...\n\nprint( set:  )\nstart_utc = datetime.datetime(2014, 4, 21, 1, tzinfo=utc)\nprint(start_utc.strftime(fmt))\nprint( =  * 25)\n\nprint( convert:  )\nstart_pacific = start_utc.astimezone(pacific)\nprint(start_pacific)\nprint( =  * 25)  Results.  set: \n2014-04-21 01:00:00 UTC+0000\n=========================\nconvert: \n2014-04-20 18:00:00-07:00\n=========================  Set a date-time and convert it.  # ...\n\nprint( set aukland and mumbai )\nauckland = pytz.timezone('Pacific/Auckland')\nmumbai = pytz.timezone('Asia/Calcutta')\n\nprint( create a date )\napollo_13_naive = datetime.datetime(1970, 4, 11, 14, 13)\napollo_13_eastern = eastern.localize(apollo_13_naive)\n\nprint( print it:  )\nprint(apollo_13_naive)\nprint(apollo_13_eastern)\nprint( =  * 25)\n\nprint( convert it, change location:  )\napollo_13_utc = apollo_13_eastern.astimezone(utc)\nprint(apollo_13_utc.astimezone(pacific).strftime(fmt))\nprint(apollo_13_utc.astimezone(auckland))\nprint(apollo_13_utc.astimezone(mumbai))  Results.  set aukland and mumbai\ncreate a date\nprint it: \n1970-04-11 14:13:00\n1970-04-11 14:13:00-05:00\n=========================\nconvert it, change location: \n1970-04-11 11:13:00 PST-0800\n1970-04-12 07:13:00+12:00\n1970-04-12 00:43:00+05:30", 
            "title": "Time zones with datatime and pytz"
        }, 
        {
            "location": "/Datetime/#find-out-more-about-pytz", 
            "text": "Find out about timezones:  print(pytz.all_timezones) . Or focus on a country s timezones. The US.  print(pytz.country_timezones['us'])  Results.  ['America/New_York', 'America/Detroit', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Indiana/Indianapolis', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Chicago', 'America/Indiana/Tell_City', 'America/Indiana/Knox', 'America/Menominee', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/North_Dakota/Beulah', 'America/Denver', 'America/Boise', 'America/Phoenix', 'America/Los_Angeles', 'America/Anchorage', 'America/Juneau', 'America/Sitka', 'America/Metlakatla', 'America/Yakutat', 'America/Nome', 'America/Adak', 'Pacific/Honolulu']  Canada.  print(pytz.country_timezones['ca'])  Results.  ['America/St_Johns', 'America/Halifax', 'America/Glace_Bay', 'America/Moncton', 'America/Goose_Bay', 'America/Blanc-Sablon', 'America/Toronto', 'America/Nipigon', 'America/Thunder_Bay', 'America/Iqaluit', 'America/Pangnirtung', 'America/Atikokan', 'America/Winnipeg', 'America/Rainy_River', 'America/Resolute', 'America/Rankin_Inlet', 'America/Regina', 'America/Swift_Current', 'America/Edmonton', 'America/Cambridge_Bay', 'America/Yellowknife', 'America/Inuvik', 'America/Creston', 'America/Dawson_Creek', 'America/Fort_Nelson', 'America/Vancouver', 'America/Whitehorse', 'America/Dawson']  Russia.  print(pytz.country_timezones['ru'])  Results.  ['Europe/Kaliningrad', 'Europe/Moscow', 'Europe/Simferopol', 'Europe/Volgograd', 'Europe/Kirov', 'Europe/Astrakhan', 'Europe/Saratov', 'Europe/Ulyanovsk', 'Europe/Samara', 'Asia/Yekaterinburg', 'Asia/Omsk', 'Asia/Novosibirsk', 'Asia/Barnaul', 'Asia/Tomsk', 'Asia/Novokuznetsk', 'Asia/Krasnoyarsk', 'Asia/Irkutsk', 'Asia/Chita', 'Asia/Yakutsk', 'Asia/Khandyga', 'Asia/Vladivostok', 'Asia/Ust-Nera', 'Asia/Magadan', 'Asia/Sakhalin', 'Asia/Srednekolymsk', 'Asia/Kamchatka', 'Asia/Anadyr']", 
            "title": "Find out more about pytz"
        }, 
        {
            "location": "/Datetime/#build-a-script-to-convert-time-zones", 
            "text": "Build a script that takes a datetime and give it back in 6 other timezones. For any given datetime, an appointment for example, we can know the equivalent elsewhere in the world.  from datetime import datetime\n\nimport pytz\n\nOTHER_TIMEZONES = [\n    pytz.timezone('US/Eastern'),\n    pytz.timezone('Pacific/Auckland'),\n    pytz.timezone('Asia/Calcutta'),\n    pytz.timezone('UTC'),\n    pytz.timezone('Europe/Paris'),\n    pytz.timezone('Africa/Khartoum'),\n]\n\nfmt = '%Y-%m-%d %H:%M:%S %Z%z'\n\nwhile True:\n    date_input = input( When is your meeting? Please use MM/DD/YYYY HH:MM format.  )\n    try:\n        local_date = datetime.strptime(date_input, '%m/%d/%Y %H:%M')\n    except ValueError:\n        print( {} doesn't seem to be a valid date   time. .format(date_input))\n    else:\n        local_date = pytz.timezone('US/Pacific').localize(local_date)\n        utc_date = local_date.astimezone(pytz.utc)\n\n        output = []\n        for timezone in OTHER_TIMEZONES:\n            output.append(utc_date.astimezone(timezone))\n        for appointment in output:\n            print(appointment.strftime(fmt))\n        break  Results (1 inputs, 6 outputs).  When is your meeting? Please use MM/DD/YYYY HH:MM format. 01/01/2018 13:00\n2018-01-01 16:00:00 EST-0500\n2018-01-02 10:00:00 NZDT+1300\n2018-01-02 02:30:00 IST+0530\n2018-01-01 21:00:00 UTC+0000\n2018-01-01 22:00:00 CET+0100\n2018-01-02 00:00:00 EAT+0300", 
            "title": "Build a script to convert time zones"
        }, 
        {
            "location": "/Scientific Python (the SciPy Stack)/", 
            "text": "CONTENT\n\n\n1, A word on the SciPy Stack\n\n\n2, Resources\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes.\n\n\n\n\n1, A word on the SciPy Stack\n\n\nThe Scipy Stack is a Python-based ecosystem for mathematics, science, and engineering:\n\n\n\n\nnumpy\n and \npandas\n packages handle data.\n\n\nmatplolib\n package handles 2D graphics.\n\n\nThere exists other graphic packages (for 3D).\n\n\n\n\n\n\nscipy\n is made of a group a math packages enabling interpolation, derivative and integral calculus, optimization and image processing.\n\n\nAnd other packages.\n\n\nOne would be careful to look on the side of other scientific libraries to find existing tools: GSL - GNU Scientific Library in C/C++ and Matlab toolboxes.\n\n\n\n\n2, Resources\n\n\n\n\nSciPy.org\n\n\nInstall\n\n\nGetting Started\n\n\nDocumentation\n\n\nSciPy Central (collection of code snippets, modules and links for solving scientific problems with SciPy and related Python tools)\n\n\nBlogs\n\n\nNumpy (Base N-dimensional array)\n\n\nMatplotlib (Comprehensive 2D Plotting) (official documentation, examples, gallery, commands)\n\n\nSympy (Symbolic mathematics) (official documentation, features, projects)\n\n\n\n\nIPython (Enhanced Interactive Console) (official documentation, Jupyter)\n\n\nPandas (Data structures \n analysis) (official documentation)\n\n\n\n\n\n\nNumpy examples (crash course and snippets in a IPython notebook)\n\n\nL\u2019informatique scientifique avec Python\n\n\n\n\nComment cr\u00e9er et manipuler les donn\u00e9es scientifiques : autour de Numpy (crash course, snippets\n\n\nSavoir chercher (trouver) de l\u2019aide\n\n\n\n\n\n\n\n\nMPIA Python Workshop (hands-on workshops on using Python to solve real-world problems)\n\n\nIntroduction and Motivation (quick tour, who is using, examples)\n\n\nPython Installation and Understanding Packages\n\n\nAn introduction to Pure Python (crash course)\n\n\nCore packages for analysis: NumPy and SciPy (snippets)\n\n\nPlotting and Images\n\n\nMatplotlib (procedural method, snippets)\n\n\nAdvanced plotting (object-based method)\n\n\nPublication-quality plots (tips)\n\n\n\n\n\n\nObject-Oriented Programming in Python (snippets)\n\n\nFitting data with Python (models, algorithms, how-to)", 
            "title": "Scientific Python (the SciPy Stack)"
        }, 
        {
            "location": "/Scientific Python (the SciPy Stack)/#2-resources", 
            "text": "SciPy.org  Install  Getting Started  Documentation  SciPy Central (collection of code snippets, modules and links for solving scientific problems with SciPy and related Python tools)  Blogs  Numpy (Base N-dimensional array)  Matplotlib (Comprehensive 2D Plotting) (official documentation, examples, gallery, commands)  Sympy (Symbolic mathematics) (official documentation, features, projects)   IPython (Enhanced Interactive Console) (official documentation, Jupyter)  Pandas (Data structures   analysis) (official documentation)    Numpy examples (crash course and snippets in a IPython notebook)  L\u2019informatique scientifique avec Python   Comment cr\u00e9er et manipuler les donn\u00e9es scientifiques : autour de Numpy (crash course, snippets  Savoir chercher (trouver) de l\u2019aide     MPIA Python Workshop (hands-on workshops on using Python to solve real-world problems)  Introduction and Motivation (quick tour, who is using, examples)  Python Installation and Understanding Packages  An introduction to Pure Python (crash course)  Core packages for analysis: NumPy and SciPy (snippets)  Plotting and Images  Matplotlib (procedural method, snippets)  Advanced plotting (object-based method)  Publication-quality plots (tips)    Object-Oriented Programming in Python (snippets)  Fitting data with Python (models, algorithms, how-to)", 
            "title": "2, Resources"
        }, 
        {
            "location": "/DataCamp Importing Data into Python 3/", 
            "text": "CONTENT\n\n\n1, Importing from Flat Files\n\n\nNumpy\n\n\nPandas\n\n\n\n\n\n\n2, Importing from Other Files\n\n\n3, Working with Relational Databases\n\n\n4, Importing Flat Files from the Web (Web Scraping)\n\n\n5, Introduction to APIs and JSONs\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the courses. Python 3. From DataCamp.\n\n\n\n\n1, Importing from Flat Files\n\n\n\n\nLoad the script and run it.\n\n\n\n\n# %load \nImporting Data in Python.py\n\nfile = open('moby_dick.txt', 'r')\n\n# Print it\nprint(file.read())\n\n# Check whether file is closed\nprint(file.closed)\n\n# Close file\nfile.close()\n\n# Check whether file is closed\nprint(file.closed)\n\n\n\n\nCHAPTER 1. Loomings.\n\nCall me Ishmael. Some years ago--never mind how long precisely--having\nlittle or no money in my purse, and nothing particular to interest me on\nshore, I thought I would sail about a little and see the watery part of\nthe world. It is a way I have of driving off the spleen and regulating\nthe circulation. Whenever I find myself growing grim about the mouth;\nwhenever it is a damp, drizzly November in my soul; whenever I find\nmyself involuntarily pausing before coffin warehouses, and bringing up\nthe rear of every funeral I meet; and especially whenever my hypos get\nsuch an upper hand of me, that it requires a strong moral principle to\nprevent me from deliberately stepping into the street, and methodically\nknocking people's hats off--then, I account it high time to get to sea\nas soon as I can. This is my substitute for pistol and ball. With a\nphilosophical flourish Cato throws himself upon his sword; I quietly\ntake to the ship. There is nothing surprising in this. If they but knew\nit, almost all men in their degree, some time or other, cherish very\nnearly the same feelings towards the ocean with me.\nFalse\nTrue\n\n\n\n# Read \n print the first 3 lines\nwith open('moby_dick.txt') as file:\n    print(file.readline())\n    print(file.readline())\n    print(file.readline())\n    print(file.readline(10))\n    print(file.readline(50))\n    print(file.readline(50))\n\n\n\n\nCHAPTER 1. Loomings.\n\nCall me Ishmael. Some years ago--never mind how long precisely--having\n\nlittle or \nno money in my purse, and nothing particular to in\nterest me on\n\n\n\n\n\nthis\n is a special package about PEP 20.\n\n\n\n\nimport this\n\n\n\n\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n\n\n\n\nBDFL: Benevolent Dictator For Life, a.k.a. Guido van Rossum, Python\u2019s creator.\n\n\n\n\nNumpy\n\n\n\n\nNumPy arrays are a standard for storing numerical data.\n\n\nArrays are essential to other packages such as the \nscikit-learn\n, for machine learning.\n\n\nImport \nnumpy\n and \nmatplotlib\n (or invoke them with the \n%pylab\n magic command).\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n\n\n# or...\n%pylab inline\n\n# no need for preceeding functions (methods) with np. or plt.\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\nImport a csv file and assign the content to an array.\n\n\n\n\nfile = 'digits.csv'\n\n# Load the file as an array called digits\ndigits = loadtxt(file, delimiter = ',')\n\n# Print the datatype of digits\nprint(type(digits))\n\nprint(digits)\n\n# Select a row\nim = digits[2, 2:]\nprint(im)\n\n\n\n\nclass 'numpy.ndarray'\n\n[[ 1.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 1.  0.  0.  0.  0.  0.]\n [ 2.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 5.  0.  0.  0.  0.  0.]]\n[ 0.  0.  0.  0.]\n\n\n\n\n\nImport a txt file. The \ndelimiter\n can be \n'\\t'\n, \n','\n, \n';'\n, etc. \n\n\nSkip the first 90 rows.\n\n\n\n\nfile = 'digits_header.txt'\n\n# Load the data into array data\ndata = loadtxt(file, delimiter='  ', skiprows = 90)\n\n# Print data\nprint(data)\n\n\n\n\n[[ 3.  0.]\n [ 6.  0.]\n [ 4.  0.]\n [ 6.  0.]\n [ 2.  0.]\n [ 9.  0.]\n [ 1.  0.]\n [ 2.  0.]\n [ 0.  0.]\n [ 5.  0.]]\n\n\n\n\n\nImport a txt file, but only the last rows and first column.\n\n\n\n\ndata2 = loadtxt(file, delimiter='  ', skiprows = 90, usecols = [0])\n\n# Print data\nprint(data2)\n\n\n\n\n[ 3.  6.  4.  6.  2.  9.  1.  2.  0.  5.]\n\n\n\n\n\nImport a txt file as string.\n\n\n\n\nfile = 'seaslug.txt'\n\n# Import file: data\ndata = loadtxt(file, delimiter = ' ', dtype = str)\n\n# Print the first element of data\nprint(data[0])\n\n\n\n\n['b\"b\\'Time\\'\"' 'b\"b\\'Percent\\'\"']\n\n\n\n\n\nImport a txt file as float numbers.\n\n\n\n\nfile = 'seaslug2.txt'\n\n# Import data as floats and skip the first row: data_float\ndata_float = loadtxt(file, delimiter='   ', dtype = float, skiprows = 1)\n\n# Print the 10th element of data_float\nprint(data_float[9])\n\n# Plot a scatterplot of the data\nscatter(data_float[:, 0], data_float[:, 1])\nxlabel('time (min.)')\nylabel('percentage of larvae')\n\nshow()\n\n\n\n\n[ 0.     0.357]\n\n\n\n\n\n\n\nImport a csv file. Format the data.\n\n\n\n\ndata = genfromtxt('titanic.csv', delimiter = ',', names = True, dtype = None)\n\n\n\n\n # A structred array\nshape(data)\n\n\n\n\n(891,)\n\n\n\n\n\nExtract a row, a column.\n\n\n\n\n# to get the ith row, merely execute data[i]\nprint(data[0:10])\n\n\n\n\n[ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")\n (4, 1, 1, b\" b'female'\", 35.0, 1, 0, b\" b'113803'\", 53.1, b\" b'C123'\", b\" b'S'\")\n (5, 0, 3, b\" b'male'\", 35.0, 0, 0, b\" b'373450'\", 8.05, b\" b''\", b\" b'S'\")\n (6, 0, 3, b\" b'male'\", nan, 0, 0, b\" b'330877'\", 8.4583, b\" b''\", b\" b'Q'\")\n (7, 0, 1, b\" b'male'\", 54.0, 0, 0, b\" b'17463'\", 51.8625, b\" b'E46'\", b\" b'S'\")\n (8, 0, 3, b\" b'male'\", 2.0, 3, 1, b\" b'349909'\", 21.075, b\" b''\", b\" b'S'\")\n (9, 1, 3, b\" b'female'\", 27.0, 0, 2, b\" b'347742'\", 11.1333, b\" b''\", b\" b'S'\")\n (10, 1, 2, b\" b'female'\", 14.0, 1, 0, b\" b'237736'\", 30.0708, b\" b''\", b\" b'C'\")]\n\n\n\n# to get the column with name 'Fare', execute data['Fare']\nprint(data['Fare'][0:10])\n\n\n\n\n[  7.25    71.2833   7.925   53.1      8.05     8.4583  51.8625  21.075\n  11.1333  30.0708]\n\n\n\n\n\nImport a csv file. \n\n\nFormat the data.\n\n\n\n\n# default dtype is None\ndata2 = recfromcsv('titanic.csv', delimiter = ',', names = True, dtype = None)\n\n\n\n\n# Print out first three entries\nprint(data2[:3])\n\n\n\n\n[ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")]\n\n\n\nPandas\n\n\n\n\nTwo-dimensional labeled data structure(s) or  data frame (DataFrame).\n\n\nPythonic analog of R\ns dataframes.\n\n\nColumns can be of potentially different types.\n\n\nExcellent object for: \n\n\nManipulate, slice, reshape, groupby, join, merge.\n\n\nPerform statistics.\n\n\nWork with time series data.\n\n\nExploratory data analysis.\n\n\nData wrangling.\n\n\nData preprocessing.\n\n\nBuilding models.\n\n\nVisualization.\n\n\n\n\n\n\nThere exists standards and best practices to use pandas.\n\n\n\n\n# Import pandas\nimport pandas as pd\n\n\n\n\n\n\nPandas is not part of \n%pylab\n.\n\n\nImport a file.\n\n\n\n\nfile = 'titanic.csv'\n\n# Read the file into a DataFrame: df\ndf = pd.read_csv(file)\n\n# View the head of the DataFrame\nprint(df.head())\n\n\n\n\n   Passengerid   Survived   Pclass         Sex    Age   SibSp   Parch  \\\n0            1          0        3     b'male'   22.0       1       0   \n1            2          1        1   b'female'   38.0       1       0   \n2            3          1        3   b'female'   26.0       0       0   \n3            4          1        1   b'female'   35.0       1       0   \n4            5          0        3     b'male'   35.0       0       0\n\n                 Ticket     Fare     Cabin  Embarked  \n0          b'A/5 21171'   7.2500       b''      b'S'  \n1           b'PC 17599'  71.2833    b'C85'      b'C'  \n2   b'STON/O2. 3101282'   7.9250       b''      b'S'  \n3             b'113803'  53.1000   b'C123'      b'S'  \n4             b'373450'   8.0500       b''      b'S'\n\n\n\n\n\nImport another file; no header and some rows.\n\n\n\n\nfile = 'digits2.csv'\n\n# Read the first 5 rows of the file into a DataFrame: data\ndata = pd.read_csv(file, nrows = 5, header = None)\n\n# Print the datatype of data\nprint(type(data))\n\n# Build a numpy array from the DataFrame: data_array\ndata_array = data.values\n\n# Print the datatype of data_array to the shell\nprint(type(data_array))\n\n\n\n\nclass 'pandas.core.frame.DataFrame'\n\n\nclass 'numpy.ndarray'\n\n\n\n\n\n\nImport another file; replace the missing data (NA).\n\n\n\n\nfile = 'titanic_corrupt.csv'\n\n# Assign filename: file\nfile = 'titanic_corrupt.csv'\n\n# Import file: data\ndata = pd.read_csv(file, sep = ';', comment = '#', na_values = ['Nothing'])\n\n# Print the head of the DataFrame\nprint(data.head())\n\n\n\n\n   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch   \\\n0            1         0       3    male  22.0      1       0   \n1            2         1       1  female  38.0      1       0   \n2            3         1       3  female  26.0      0       0   \n3            4         1       1  female  35.0      1       0   \n4            5         0       3    male  35.0      0       0\n\n             Ticket   Fare Cabin Embarked  \n0         A/5 21171   7,25   NaN        S  \n1          PC 17599    NaN   NaN      NaN  \n2  STON/O2. 3101282  7,925   NaN        S  \n3            113803   53,1  C123        S  \n4            373450   8,05   NaN        S\n\n\n\n\n\nPlot the \nAge\n variable in a histogram.\n\n\n\n\npd.DataFrame.hist(data[['Age']])\nplt.xlabel('Age (years)')\nplt.ylabel('count')\n\nplt.show()\n\n\n\n\n\n\n2, Importing from Other Files\n\n\n\n\nWith Pandas\n and a bit of Numpy.\n\n\nExcel spreadsheets.\n\n\nMATLAB files.\n\n\nSAS files.\n\n\nStata files.\n\n\nHDF5 files (large datasets, scientific, legal, etc.).\n\n\nFeather.\n\n\nJulia.\n\n\nPickled files (binary).\n\n\n\n\nimport os\n\nwd = os.getcwd()\nos.listdir(wd)\n\n\n\n\n['.ipynb_checkpoints',\n 'a_movie.json',\n 'cars.csv',\n 'count.svg',\n 'CYratioCyt.png',\n 'CYratioCyt.svg',\n 'digits.csv',\n 'digits2.csv',\n 'digits_header.txt',\n 'disa10.png',\n 'disa10.svg',\n 'economic.csv',\n 'economic2.xls',\n 'Importing Data into Python 3.ipynb',\n 'importing_python_ch1_pdf_slides.pdf',\n 'importing_python_ch2_pdf_slides.pdf',\n 'importing_python_ch3_pdf_slides.pdf',\n 'importing_python_ch4_pdf_slides.pdf',\n 'importing_python_ch5_pdf_slides.pdf',\n 'intermediate_python_ch1_slides.pdf',\n 'intermediate_python_ch2_slides.pdf',\n 'intermediate_python_ch3_slides.pdf',\n 'intermediate_python_ch4_slides.pdf',\n 'intermediate_python_ch5_slides.pdf',\n 'intro_python_ch1_slides.pdf',\n 'intro_python_ch2_slides.pdf',\n 'intro_python_ch3_slides.pdf',\n 'intro_python_ch4_slides.pdf',\n 'moby_dick.txt',\n 'new1.py',\n 'p.png',\n 'PRIO_bd3.0.xls',\n 'Python 3.ipynb',\n 'Python3.py',\n 'sales.sas7bdat',\n 'save.p',\n 'seaslug.txt',\n 'seaslug2.txt',\n 'strain.png',\n 'strain.svg',\n 'Thumbs.db',\n 'titanic.csv',\n 'titanic_corrupt.csv',\n 'tweets_figure.png',\n 'tweets_figure.svg',\n 'winequality-red.csv']\n\n\n\nPickled files\n\n\n\n\nThere are a number of datatypes that cannot be saved easily to flat files, such as lists and dictionaries. \n\n\nIf you want your files to be human readable, you may want to save them as text files in a clever manner (JSONs, which you will see in a later chapter, are appropriate for Python dictionaries).\n\n\nIf, however, you merely want to be able to import them into Python, you can serialize them. \n\n\nAll this means is converting the object into a sequence of bytes, or bytestream.\n\n\nImport it.\n\n\n\n\nimport pickle\n\n# Save a dictionary into a pickle file.\nfav = {'Airline' : '8', 'Aug' : '85', 'June' : '69.4', 'Mar' : '84.4'}\npickle.dump(fav, open(\nsave.p\n, \nwb\n))\n\n# save.p\n\n# Open pickle file and load data: d\n\nwith open('save.p', 'rb') as file:\n    d = pickle.load(file)\n\n# Print d\nprint(d)\n\n# Print datatype of d\nprint(type(d))\n\n\n\n\n{'Aug': '85', 'Airline': '8', 'Mar': '84.4', 'June': '69.4'}\n\nclass 'dict'\n\n\n\n\nExcel files\n\n\nfile = 'PRIO_bd3.0.xls'\n\n# Load spreadsheet: xl\nxl = pd.ExcelFile(file)\n\n# Print sheet names\nprint(xl.sheet_names)\n\n\n\n\n['bdonly']\n\n\n\n\n\nParse the sheets. \n\n\nBy name or by number (first, second, \n).\n\n\n\n\ndf1 = xl.parse('bdonly')\n\n\n\n\ndf2 = xl.parse(0)\n\n\n\n\n\n\nOptions: parse the first sheet by index, skip the first row of data, then name the columns \nCountry\n and \nAAM due to War (2002)\n\n\n\n\ndf2 = xl.parse(0, parse_cols = [0], skiprows = [0], names = ['Country', 'AAM due to War (2002)'])\n\n\n\n\n\n\nOptions: parse the second sheet, parse only the first column, skip the first row and rename the column \nCountry\n.\n\n\n\n\ndf2 = xl.parse(1, parse_cols = [0], skiprows = [0], names = ['Country'])\n\n\n\n\n\n\nPrint the head of the DataFrame.\n\n\n\n\nprint(df1.head())\n\n\n\n\n   id  year  bdeadlow  bdeadhig  bdeadbes  annualdata  source  bdversion  \\\n0   1  1946      1000      9999      1000           2       1          3   \n1   1  1952       450      3000      -999           2       1          3   \n2   1  1967        25       999        82           2       1          3   \n3   2  1946        25       999      -999           0       0          3   \n4   2  1947        25       999      -999           0       0          3\n\n   location    sidea   ...    epend  ependdate ependprec  gwnoa gwnoa2nd  \\\n0   Bolivia  Bolivia   ...        1 1946-07-21     -99.0    145      NaN   \n1   Bolivia  Bolivia   ...        1 1952-04-12     -99.0    145      NaN   \n2   Bolivia  Bolivia   ...        1 1967-10-16     -99.0    145      NaN   \n3  Cambodia   France   ...        0        NaT       NaN    220      NaN   \n4  Cambodia   France   ...        0        NaT       NaN    220      NaN\n\n   gwnob  gwnob2nd  gwnoloc region  version  \n0    NaN       NaN      145      5   2009-4  \n1    NaN       NaN      145      5   2009-4  \n2    NaN       NaN      145      5   2009-4  \n3    NaN       NaN      811      3   2009-4  \n4    NaN       NaN      811      3   2009-4\n\n[5 rows x 32 columns]\n\n\n\n\n\nWe process images since we cheat a little. \n\n\nMany packages are not installed. \n\n\nWe are not be able to import some data. \n\n\nImages will then present the final results.\n\n\n\n\nfrom IPython.display import Image\n# for the following pictures...\n\n\n\n\nSAS files\n\n\n\n\nAdvanced analytics\n\n\nMultivariate analysis\n\n\nBusiness intelligence\n\n\nData management\n\n\nPredictive analytics\n\n\nStandard for computational analysis\n\n\nCode (instead of importing the package):\n\n\n\n\n# Import sas7bdat package\nfrom sas7bdat import SAS7BDAT\n\n# Save file to a DataFrame: df_sas\nwith SAS7BDAT('sales.sas7bdat') as file:\n    df_sas = file.to_data_frame()\n\n# Print head of DataFrame\nprint(df_sas.head())\n\n# Plot histogram of DataFrame features\npd.DataFrame.hist(df_sas[['P']])\nplt.ylabel('count')\n\nplt.show()\n\n\n\n\n\n\nThe data are adapted from the website of the undergraduate text book Principles of Economics by Hill, Griffiths and Lim (http://www.principlesofeconometrics.com/sas/).\n\n\nThe chart would be:\n\n\n\n\nImage('p.png')\n\n\n\n\n\n\nStata files\n\n\n\n\nThe data consist of disease extent for several diseases in various countries (more information can be found at http://www.cid.harvard.edu/ciddata/geog/readme_disarea.html).\n\n\n\n\n# Import pandas\nimport pandas as pd\n\n# Load Stata file into a pandas DataFrame: df\ndf = pd.read_stata('disarea.dta')\n\n# Print the head of the DataFrame df\nprint(df.head())\n\n\n\n\n  wbcode               country  disa1  disa2  disa3  disa4  disa5  disa6  \\\n0    AFG           Afghanistan   0.00   0.00   0.76   0.73    0.0   0.00   \n1    AGO                Angola   0.32   0.02   0.56   0.00    0.0   0.00   \n2    ALB               Albania   0.00   0.00   0.02   0.00    0.0   0.00   \n3    ARE  United Arab Emirates   0.00   0.00   0.00   0.00    0.0   0.00   \n4    ARG             Argentina   0.00   0.24   0.24   0.00    0.0   0.23\n\n   disa7  disa8   ...    disa16  disa17  disa18  disa19  disa20  disa21  \\\n0   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n1   0.56    0.0   ...       0.0     0.4     0.0    0.61    0.00     0.0   \n2   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n3   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n4   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.05     0.0\n\n   disa22  disa23  disa24  disa25  \n0    0.00    0.02    0.00    0.00  \n1    0.99    0.98    0.61    0.00  \n2    0.00    0.00    0.00    0.16  \n3    0.00    0.00    0.00    0.00  \n4    0.00    0.01    0.00    0.11\n\n[5 rows x 27 columns]\n\n\n\n\n\nPlot histogram of one column of the DataFrame.\n\n\n\n\npd.DataFrame.hist(df[['disa10']])\nplt.xlabel('Extent of disease')\nplt.ylabel('Number of coutries')\n\nplt.show()\n\n\n\n\n\n\nHDF5 files\n\n\n\n\nStandard for storing large quantities of numerical data.\n\n\nDatasets can be hundreds of gigabytes or terabytes.\n\n\nHDF5 can scale to exabytes.\n\n\nCode (instead of importing the package):\n\n\n\n\n# Import packages\nimport numpy as np\nimport h5py\n\n# Assign filename: file\nfile = 'LIGO_data.hdf5' \n\n# Load file: data\ndata = h5py.File(file, 'r')\n\n# Print the datatype of the loaded file\nprint(type(data))\n\n# Print the keys of the file\nfor key in data.keys():\n    print(key)\n\n# Get the HDF5 group: group\ngroup = data['strain']\n\n# Check out keys of group\nfor key in group.keys():\n    print(key)\n\n# Set variable equal to time series data: strain\nstrain = data['strain']['Strain'].value\n\n# Set number of time points to sample: num_samples\nnum_samples = 10000\n\n# Set time vector\ntime = np.arange(0, 1, 1/num_samples)\n\n# Plot data\nplt.plot(time, strain[:num_samples])\nplt.xlabel('GPS Time (s)')\nplt.ylabel('strain')\nplt.show()\n\n\n\n\n\n\nYou can find the LIGO data plus loads of documentation and tutorials (https://losc.ligo.org/events/GW150914/) and (https://losc.ligo.org/s/events/GW150914/GW150914_tutorial.html) is a great tutorial on Signal Processing with the data.\n\n\n\n\nImage('strain.png')\n\n\n\n\n\n\nMATLAB\n\n\n\n\n\u201cMatrix Laboratory\u201d.\n\n\nIndustry standard in engineering and science.\n\n\nCode (instead of importing the package):\n\n\n\n\n# Import package\nimport scipy.io\n\n# Load MATLAB file: mat\nmat = scipy.io.loadmat('albeck_gene_expression.mat')\n\n# Print the datatype type of mat\nprint(type(mat))\n\n# Print the keys of the MATLAB dictionary\nprint(mat.keys())\n\n# Print the type of the value corresponding to the key 'CYratioCyt'\nprint(type(mat['CYratioCyt']))\n\n# Print the shape of the value corresponding to the key 'CYratioCyt'\nprint(np.shape(mat['CYratioCyt']))\n\n# Subset the array and plot it\ndata = mat['CYratioCyt'][25, 5:]\nfig = plt.figure()\nplt.plot(data)\nplt.xlabel('time (min.)')\nplt.ylabel('normalized fluorescence (measure of expression)')\nplt.show()\n\n\n\n\n\n\nThis file contains gene expression data from the Albeck Lab at UC Davis (https://www.mcb.ucdavis.edu/faculty-labs/albeck/workshop.htm). You can find the data and some great documentation.\n\n\n\n\nImage('CYratioCyt.png')\n\n\n\n\n\n\n3, Working with Relational Databases\n\n\nRelational Database Management System\n\n\n\n\nPostgreSQL.\n\n\nMySQL.\n\n\nSQLite.\n\n\nCode (instead of importing the package):\n\n\n\n\n# Import necessary module\nfrom sqlalchemy import create_engine\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n\n\n\n'sqlite:///Northwind.sqlite'\n is called the connection string to the SQLite database.\n\n\n\n\nThe Chinook database (http://chinookdatabase.codeplex.com/) contains information about a semi-fictional digital media store in which media data is real and customer, employee and sales data has been manually created.\n\n\nCode (instead of importing the package):\n\n\n\n\n# Save the table names to a list: table_names\ntable_names = engine.table_names()\n\n# Print the table names to the shell\nprint(table_names)\n\n\n\n\nQuery the DB\n\n\n\n\nThe final \n;\n is facultative.\n\n\nCode (instead of importing the package):\n\n\n\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine connection: con\ncon = engine.connect()\n\n# Perform query: rs\nrs = con.execute('SELECT * FROM Album')\n\n# Save results of the query to DataFrame: df\ndf = pd.DataFrame(rs.fetchall())\n\n# Close connection\ncon.close()\n\n# Print head of DataFrame df\nprint(df.head())\n\n\n\n\nCustomize queries\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite') # becomes facultative with many queries\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute('SELECT LastName, Title FROM Employee')\n    df = pd.DataFrame(rs.fetchmany(size = 3))\n    df.columns = rs.keys() # set the DataFrame's column names to the corresponding names of the table columns\n\n# Print the length of the DataFrame df\nprint(len(df))\n\n# Print the head of the DataFrame df\nprint(df.head())\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite') # becomes facultative with many queries\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute(\nSELECT * FROM Employee WHERE EmployeeId \n= 6\n)\n    df = pd.DataFrame(rs.fetchall())\n    df.columns = rs.keys()\n\n# Print the head of the DataFrame df\nprint(df.head())\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine in context manager\nwith engine.connect() as con:\n    rs = con.execute('SELECT * FROM Employee ORDER BY BirthDate')\n    df = pd.DataFrame(rs.fetchall())\n\n    # Set the DataFrame's column names\n    df.columns = rs.keys()\n\n# Print head of DataFrame\nprint(df.head())\n\n\n\n\nQuery the DB the Pandas way\n\n\n\n\nSimpler code (instead of importing the package)!!!\n\n\n\n\n# Import packages\nfrom sqlalchemy import create_engine\nimport pandas as pd\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Execute query and store records in DataFrame: df\ndf = pd.read_sql_query(\nSELECT * FROM Album\n, engine)\n\n# Print head of DataFrame\nprint(df.head())\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df1\nwith engine.connect() as con:\n    rs = con.execute(\nSELECT * FROM Album\n)\n    df1 = pd.DataFrame(rs.fetchall())\n    df1.columns = rs.keys()\n\n# Confirm that both methods yield the same result: does df = df1 ?   \nprint(df.equals(df1))\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n# Import packages\nfrom sqlalchemy import create_engine\nimport pandas as pd\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Execute query and store records in DataFrame: df\ndf = pd.read_sql_query(\nSELECT * FROM Employee WHERE EmployeeId \n= 6 ORDER BY BirthDate\n, engine)\n\n# Print head of DataFrame\nprint(df.head())\n\n\n\n\nINNER JOIN\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute(\nSELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\n)\n    df = pd.DataFrame(rs.fetchall())\n    df.columns = rs.keys()\n\n# Print head of DataFrame df\nprint(df.head())\n\n\n\n\n\n\nAlternative code:\n\n\n\n\ndf = pd.read_sql_query(\nSELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID\n, engine)\n\n# Print head of DataFrame df\nprint(df.head())\n\n\n\n\n\n\nCode (instead of importing the package):\n\n\n\n\n# Execute query and store records in DataFrame: df\ndf = pd.read_sql_query(\nSELECT * FROM PlaylistTrack INNER JOIN Track on PlaylistTrack.TrackId = Track.TrackId WHERE Milliseconds \n 250000\n, engine)\n\n# Print head of DataFrame\nprint(df.head())\n\n\n\n\n4, Importing Flat Files from the Web (Web Scraping)\n\n\n scrape, wrangle, munge, wrangling, munging\n \n\n\n\n\nImport and locally save datasets from the web.\n\n\nLoad datasets into pandas DataFrames.\n\n\nMake HTTP requests (GET requests).\n\n\nScrape web data such as HTML.\n\n\nParse HTML into useful data (BeautifulSoup).\n\n\nUse the urllib and requests packages.\n\n\n\n\nUsing the \nurllib\n package on csv files\n\n\n\n\nImport the package.\n\n\n\n\nfrom urllib.request import urlretrieve\n\n# import pandas as pd\n\n# Assign url of file: url\nurl = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\n# Save file locally\nurlretrieve(url, 'winequality-red.csv')\n\n# Read file into a DataFrame and print its head\ndf = pd.read_csv('winequality-red.csv', sep=';')\nprint(df.head())\n\n\n\n\n   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5\n\n\n\n# import matplotlib.pyplot as plt\n# import pandas as pd\n\n# Assign url of file: url\nurl = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\n# Read file into a DataFrame: df\ndf = pd.read_csv(url, sep = ';')\n\n# Print the head of the DataFrame\nprint(df.head())\n\n# Plot first column of df\npd.DataFrame.hist(df.ix[:, 0:1])\nplt.xlabel('fixed acidity (g(tartaric acid)/dm$^3$)')\nplt.ylabel('count')\nplt.show()\n\n\n\n\n   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5\n\n\n\n\n\nUsing the \nurllib\n package on Excel files\n\n\n# import pandas as pd\n\n# Assign url of file: url\nurl = 'http://s3.amazonaws.com/assets.datacamp.com/course/importing_data_into_r/latitude.xls'\n\n# Read in all sheets of Excel file: xl\nxl = pd.read_excel(url, sheetname = None)\n\n# Print the sheetnames (keys) to the shell !!!\nprint(xl.keys())\n\n# Print the head of the first sheet (using its name, NOT its index)\nprint(xl['1700'].head())\n\n\n\n\ndict_keys(['1700', '1900'])\n                 country       1700\n0            Afghanistan  34.565000\n1  Akrotiri and Dhekelia  34.616667\n2                Albania  41.312000\n3                Algeria  36.720000\n4         American Samoa -14.307000\n\n\n\nHTTP requests to import files from the web\n\n\n\n\nrequests\n is one of the most downloaded Python packages.\n\n\nrequests\n works with \nurllib\n.\n\n\nImport the package.\n\n\n\n\nfrom urllib.request import urlopen, Request\n\n# Specify the url\nurl = \nhttp://www.datacamp.com/teach/documentation\n\n\n# This packages the request: request\nrequest = Request(url)\n\n# Send the request and catches the response: response\nresponse = urlopen(request)\n\n# Print the datatype of response\nprint(type(response))\n\n# Be polite and close the response!\nresponse.close()\n\n\n\n\nclass 'http.client.HTTPResponse'\n\n\n\n\nfrom urllib.request import urlopen, Request\n\nurl = \nhttp://docs.datacamp.com/teach/\n\n\nrequest = Request(url)\n\nresponse = urlopen(request)\n\n\n# Extract the response: html\nhtml = response.read()\n\n# Print the html\nprint(html)\n\n# Be polite and close the response!\nresponse.close()\n\n\n\n\nb'\n!DOCTYPE html\n\\n\nlink rel=\"shortcut icon\" href=\"images/favicon.ico\" /\n\\n\nhtml\n\\n\\n  \nhead\n\\n  \nmeta charset=\"utf-8\"\n\\n  \nmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\n\\n  \nmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\n\\n\\n  \ntitle\nHome\n/title\n\\n  \nmeta name=\"description\" content=\"All Documentation on Course Creation\"\n\\n\\n  \nlink rel=\"stylesheet\" href=\"/teach/css/main.css\"\n\\n  \nlink rel=\"canonical\" href=\"/teach/\"\n\\n  \nlink rel=\"alternate\" type=\"application/rss+xml\" title=\"DataCamp Teach Documentation\" href=\"/teach/feed.xml\" /\n\\n\n/head\n\\n\\n\\n  \nbody\n\\n\\n    \nheader class=\"site-header\"\n\\n\\n  \ndiv class=\"wrapper\"\n\\n\\n    \na class=\"site-title\" href=\"/teach/\"\nDataCamp Teach Documentation\n/a\n\\n\\n  \n/div\n\\n\\n\n/header\n\\n\\n\\n    \ndiv class=\"page-content\"\n\\n      \ndiv class=\"wrapper\"\n\\n        \np\nThe Teach Documentation has been moved to \na href=\"https://www.datacamp.com/teach/documentation\"\nhttps://www.datacamp.com/teach/documentation\n/a\n!\n/p\n\\n\\n\n!-- Everybody can teach on DataCamp. The resources on this website explain all the steps to build your own course on DataCamp\\'s interactive data science platform.\\n\\nInterested in partnering with DataCamp? Head over to the [Course Material](/teach/course-material.html) page to get an idea of the requirements to build your own interactive course together with DataCamp!\\n\\n## Table of Contents\\n\\n- [Course Material](/teach/course-material.html) - Content required to build a DataCamp course.\\n- [Video Lectures](/teach/video-lectures.html) - Details on video recording and editing.\\n- [DataCamp Teach](https://www.datacamp.com/teach) - Use the DataCamp Teach website to create DataCamp courses (preferred).\\n- [datacamp R Package](https://github.com/datacamp/datacamp/wiki) - Use R Package to create DataCamp courses (legacy).\\n- [Code DataCamp Exercises](/teach/code-datacamp-exercises.html)\\n- [SCT Design (R)](https://github.com/datacamp/testwhat/wiki)\\n- [SCT Design (Python)](https://github.com/datacamp/pythonwhat/wiki)\\n- [Style Guide](/teach/style-guide.html) --\n\\n\\n\\n      \n/div\n\\n    \n/div\n\\n\\n    \\n\\n  \n/body\n\\n\\n\n/html\n\\n'\n\n\n\nUsing \nrequests\n\n\nimport requests\n\nurl = \nhttp://docs.datacamp.com/teach/\n\n\nr = requests.get(url)\n\ntext = r.text\n\n# Print part of the html (split the paragraphs) instead of all with  print(text)\nhead = text.split('\\n\\n')\n\nprint(head[0])\nprint('')\nprint(head[1])\nprint('')\nprint(head[2])\nprint('')\nprint(head[3])\n\n\n\n\n!DOCTYPE html\n\n\nlink rel=\"shortcut icon\" href=\"images/favicon.ico\" /\n\n\nhtml\n\n\n  \nhead\n\n  \nmeta charset=\"utf-8\"\n\n  \nmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\n\n  \nmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\n\n\n  \ntitle\nHome\n/title\n\n  \nmeta name=\"description\" content=\"All Documentation on Course Creation\"\n\n\n  \nlink rel=\"stylesheet\" href=\"/teach/css/main.css\"\n\n  \nlink rel=\"canonical\" href=\"/teach/\"\n\n  \nlink rel=\"alternate\" type=\"application/rss+xml\" title=\"DataCamp Teach Documentation\" href=\"/teach/feed.xml\" /\n\n\n/head\n\n\n\n\nScraping the web\n\n\n scrape, wrangle, munge\n\n\n\n\nScrape unstructured data.\n\n\nScrape structured data, parse it and extract the data from HTML using the \nBeautifulSoup\n package.\n\n\nImport the packages.\n\n\n\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n# Create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Prettify the BeautifulSoup object: pretty_soup\npretty_soup = soup.prettify()\n\n# Print the response\nprint(type(pretty_soup))\n\n# Print part of the html (split the text), not all with  print(pretty_soup)\nhead = pretty_soup.split('\n/h3\n')\n\nprint(head[0])\n\n\n\n\nclass 'str'\n\n\nhtml\n\n \nhead\n\n  \ntitle\n\n   Guido's Personal Home Page\n  \n/title\n\n \n/head\n\n \nbody bgcolor=\"#FFFFFF\" text=\"#000000\"\n\n  \nh1\n\n   \na href=\"pics.html\"\n\n    \nimg border=\"0\" src=\"images/IMG_2192.jpg\"/\n\n   \n/a\n\n   Guido van Rossum - Personal Home Page\n  \n/h1\n\n  \np\n\n   \na href=\"http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\"\n\n    \ni\n\n     \"Gawky and proud of it.\"\n    \n/i\n\n   \n/a\n\n  \n/p\n\n  \nh3\n\n   \na href=\"http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\"\n\n    Who\nI Am\n   \n/a\n\n\n\n\n\n\nOther operations with \nBeautifulSoup\n.\n\n\n\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n\n# Create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Get the title of Guido's webpage: guido_title\nguido_title = soup.title # attribute\n\n# Print the title of Guido's webpage to the shell\nprint(guido_title)\n\n# Get Guido's text: guido_text\nguido_text = soup.get_text() # method\n\n# Print Guido's text to the shell\nprint(guido_text)\n\n\n\n\ntitle\nGuido's Personal Home Page\n/title\n\n\nGuido's Personal Home Page\n\nGuido van Rossum - Personal Home Page\n\"Gawky and proud of it.\"\nWho\nI Am\nI am the author of the Python\nprogramming language.  See also my resume\nand my publications list, a brief bio, assorted writings, presentations and interviews (all about Python), some\npictures of me,\nmy new blog, and\nmy old\nblog on Artima.com.  I am\n@gvanrossum on Twitter.  I\nalso have\na G+\nprofile.\n\nIn January 2013 I joined\nDropbox.  I work on various Dropbox\nproducts and have 50% for my Python work, no strings attached.\nPreviously, I have worked for Google, Elemental Security, Zope\nCorporation, BeOpen.com, CNRI, CWI, and SARA.  (See\nmy resume.)  I created Python while at CWI.\n\nHow to Reach Me\nYou can send email for me to guido (at) python.org.\nI read everything sent there, but if you ask\nme a question about using Python, it's likely that I won't have time\nto answer it, and will instead refer you to\nhelp (at) python.org,\ncomp.lang.python or\nStackOverflow.  If you need to\ntalk to me on the phone or send me something by snail mail, send me an\nemail and I'll gladly email you instructions on how to reach me.\n\nMy Name\nMy name often poses difficulties for Americans.\n\nPronunciation: in Dutch, the \"G\" in Guido is a hard G,\npronounced roughly like the \"ch\" in Scottish \"loch\".  (Listen to the\nsound clip.)  However, if you're\nAmerican, you may also pronounce it as the Italian \"Guido\".  I'm not\ntoo worried about the associations with mob assassins that some people\nhave. :-)\n\nSpelling: my last name is two words, and I'd like keep it\nthat way, the spelling on some of my credit cards notwithstanding.\nDutch spelling rules dictate that when used in combination with my\nfirst name, \"van\" is not capitalized: \"Guido van Rossum\".  But when my\nlast name is used alone to refer to me, it is capitalized, for\nexample: \"As usual, Van Rossum was right.\"\n\nAlphabetization: in America, I show up in the alphabet under\n\"V\".  But in Europe, I show up under \"R\".  And some of my friends put\nme under \"G\" in their address book...\n\nMore Hyperlinks\n\nHere's a collection of essays relating to Python\nthat I've written, including the foreword I wrote for Mark Lutz' book\n\"Programming Python\".\nI own the official \nPython license.\n\nThe Audio File Formats FAQ\nI was the original creator and maintainer of the Audio File Formats\nFAQ.  It is now maintained by Chris Bagwell\nat http://www.cnpbagwell.com/audio-faq.  And here is a link to\nSOX, to which I contributed\nsome early code.\n\n\"On the Internet, nobody knows you're\na dog.\"\n\n\n\n\n\nMore.\n\n\n\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n# create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Print the title of Guido's webpage\nprint(soup.title)\n\n# Find all 'a' tags (which define hyperlinks): a_tags\na_tags = soup.find_all('a') # for \na\n, hyperlinks\n\n# Print the URLs to the shell\nfor link in a_tags:\n    print( link.get('href'))\n\n\n\n\ntitle\nGuido's Personal Home Page\n/title\n\npics.html\nhttp://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\nhttp://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\nhttp://www.python.org\nResume.html\nPublications.html\nbio.html\nhttp://legacy.python.org/doc/essays/\nhttp://legacy.python.org/doc/essays/ppt/\ninterviews.html\npics.html\nhttp://neopythonic.blogspot.com\nhttp://www.artima.com/weblogs/index.jsp?blogger=12088\nhttps://twitter.com/gvanrossum\nhttps://plus.google.com/u/0/115212051037621986145/posts\nhttp://www.dropbox.com\nResume.html\nhttp://groups.google.com/groups?q=comp.lang.python\nhttp://stackoverflow.com\nguido.au\nhttp://legacy.python.org/doc/essays/\nimages/license.jpg\nhttp://www.cnpbagwell.com/audio-faq\nhttp://sox.sourceforge.net/\nimages/internetdog.gif\n\n\n\n5, Introduction to APIs and JSONs\n\n\n\n\nAPI or Application Programming Interface are protocols and routines providing access to websites and web apps like OMDb, Wikipedia, Uber, Uber Developers, BGG, ImDB, Facebook, Instagram, and Twitter.\n\n\nMost of data coming from APIS are JSON files.\n\n\n\n\nImport the \njson\n package\n\n\nimport json\n\n# Load JSON: json_data\nwith open('a_movie.json', 'r') as json_file:\n    json_data = json.load(json_file)\n\nprint(type(json_data))\nprint(json_data['Title'])\nprint(json_data['Year'])\nprint('')\n\n# Print each key-value pair in json_data\nfor k in json_data.keys():\n    print(k + ': ', json_data[k])\n\n\n\n\nclass 'dict'\n\nThe Social Network\n2010\n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nAwards:  Won 3 Oscars. Another 161 wins \n 162 nominations.\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nTitle:  The Social Network\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nDirector:  David Fincher\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)\n\n\n\nThe \nrequests\n package again\n\n\n\n\nPull some movie data down from the Open Movie Database (OMDB) using their API.\n\n\nPull it as text.\n\n\n\n\nimport requests\n\nurl = 'http://www.omdbapi.com/?t=social+network'\n\nr = requests.get(url)\n\nprint(type(r))\nprint('')\n\n# Print the text of the response\nprint(r.text)\n\n\n\n\nclass 'requests.models.Response'\n\n\n{\"Title\":\"The Social Network\",\"Year\":\"2010\",\"Rated\":\"PG-13\",\"Released\":\"01 Oct 2010\",\"Runtime\":\"120 min\",\"Genre\":\"Biography, Drama\",\"Director\":\"David Fincher\",\"Writer\":\"Aaron Sorkin (screenplay), Ben Mezrich (book)\",\"Actors\":\"Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\",\"Plot\":\"Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\",\"Language\":\"English, French\",\"Country\":\"USA\",\"Awards\":\"Won 3 Oscars. Another 161 wins \n 162 nominations.\",\"Poster\":\"http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\",\"Metascore\":\"95\",\"imdbRating\":\"7.7\",\"imdbVotes\":\"478,258\",\"imdbID\":\"tt1285016\",\"Type\":\"movie\",\"Response\":\"True\"}\n\n\n\n\n\nPull it as JSON or a dictionary.\n\n\n\n\nimport requests\n\nurl = 'http://www.omdbapi.com/?t=social+network'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\nprint(type(json_data))\nprint('')\n\n# Print each key-value pair in json_data\nfor k in json_data.keys():\n    print(k + ': ', json_data[k])\n\n\n\n\nclass 'dict'\n\n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nAwards:  Won 3 Oscars. Another 161 wins \n 162 nominations.\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nDirector:  David Fincher\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nTitle:  The Social Network\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)\n\n\n\n\n\nSearch the Library of Congress.\n\n\nPull a dictionary of dictionaries.\n\n\n\n\nimport requests\n\nurl = 'http://chroniclingamerica.loc.gov/search/titles/results/?terms=new%20york\nformat=json'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\n# Select the first element in the list json_data['items']: nyc_loc\n# dict of dict\nnyc_loc = json_data['items'][0]\n\n# Print each key-value pair in nyc_loc\nfor k in nyc_loc.keys():\n    print(k + ': ', nyc_loc[k])\n\n\n\n\ncounty:  ['New York']\nplace_of_publication:  New York\noclc:  12928956\nsubject:  ['New York (N.Y.)--Newspapers.', 'New York (State)--New York.--fast--(OCoLC)fst01204333']\nalt_title:  []\ntitle:  The New York thrice-a-week world.\ntype:  title\nedition:  New York and Pennsylvania ed.\nid:  /lccn/sn85047837/\nnote:  ['Democrat.', 'Description based on: Vol. 36, no. 3,670 (Oct. 4, 1895).', 'The words \"New York thrice-a-week\" appear in title ornament.']\nplace:  ['New York--New York--New York']\nessay:  []\nstart_year:  1890\nend_year:  1999\npublisher:  Press Pub. Co.\nlccn:  sn85047837\nholding_type:  ['Unspecified']\nstate:  ['New York']\ncity:  ['New York']\nlanguage:  ['English']\ncountry:  New York\ntitle_normal:  new york thrice-a-week world.\nurl:  http://chroniclingamerica.loc.gov/lccn/sn85047837.json\nfrequency:  Three times a week\n\n\n\n\n\nThe Wikipedia API.\n\n\nDocumentation: https://www.mediawiki.org/wiki/API:Main_page\n\n\nDictionary of dictionary of dictionary.\n\n\n\n\nimport requests\n\nurl = 'https://en.wikipedia.org/w/api.php?action=query\nprop=extracts\nformat=json\nexintro=\ntitles=pizza'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\n# Print the Wikipedia page extract\npizza_extract = json_data['query']['pages']['24768']['extract']\nprint(pizza_extract)\n\n\n\n\np\nb\nPizza\n/b\n is a flatbread generally topped with tomato sauce and cheese and baked in an oven. It is commonly topped with a selection of meats, vegetables and condiments. The term was first recorded in the 10th century, in a Latin manuscript from Gaeta in Central Italy. The modern pizza was invented in Naples, Italy, and the dish and its variants have since become popular in many areas of the world.\n/p\n\n\np\nIn 2009, upon Italy's request, Neapolitan pizza was safeguarded in the European Union as a Traditional Speciality Guaranteed dish. The Associazione Verace Pizza Napoletana (the True Neapolitan Pizza Association) is a non-profit organization founded in 1984 with headquarters in Naples. It promotes and protects the \"true Neapolitan pizza\".\n/p\n\n\np\nPizza is sold fresh or frozen, either whole or in portions, and is a common fast food item in Europe and North America. Various types of ovens are used to cook them and many varieties exist. Several similar dishes are prepared from ingredients commonly used in pizza preparation, such as calzone and stromboli.\n/p\n\n\np\n/p\n\n\n\n\nThe Twitter API and Authentification\n\n\n\n\nTwitter has many APIs: the main API, the REST API, Streaming APIs (private, public), Firehouse (expensive), etc.\n\n\nField Guide: https://dev.twitter.com/overview/api/tweets\n\n\nConsult the documentation to set an authentification key (available online).\n\n\n\n\ntweepy\n package\n\n\n\n\nThe authentication looks like the following:\n\n\nCode:\n\n\n\n\n# Import package\nimport tweepy, json\n\n# Store OAuth authentication credentials in relevant variables\naccess_token = \n1092294848-aHN7DcRP9B4VMTQIhwqOYiB14YkW92fFO8k8EPy\n\naccess_token_secret = \nX4dHmhPfaksHcQ7SCbmZa2oYBBVSD2g8uIHXsp5CTaksx\n\nconsumer_key = \nnZ6EA0FxZ293SxGNg8g8aP0HM\n\nconsumer_secret = \nfJGEodwe3KiKUnsYJC3VRndj7jevVvXbK2D5EiJ2nehafRgA6i\n\n\n# Pass OAuth details to tweepy's OAuth handler\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n\n\n\nStart streaming tweets\n\n\n\n\nCode:\n\n\n\n\n# Initialize Stream listener\nl = MyStreamListener()\n\n# Create you Stream object with authentication\nstream = tweepy.Stream(auth, l)\n\n\n# Filter Twitter Streams to capture data by the keywords:\nstream.filter(track = ['clinton', 'trump', 'sanders', 'cruz'])\n\n\n\n\n\n\nCode of \nMyStreamListener()\n:\n\n\nCreates a file called tweets.txt, collects streaming tweets as .jsons and writes them to the file tweets.txt; once 100 tweets have been streamed, the listener closes the file and stops listening. \n\n\n\n\nclass MyStreamListener(tweepy.StreamListener):\n\n\n    def __init__(self, api=None):\n\n        super(MyStreamListener, self).__init__()\n        self.num_tweets = 0\n        self.file = open(\ntweets.txt\n, \nw\n)\n\n    def on_status(self, status):\n\n        tweet = status._json\n        self.file.write( json.dumps(tweet) + '\\n' )\n        tweet_list.append(status)\n        self.num_tweets += 1\n        if self.num_tweets \n 100:\n            return True\n        else:\n            return False\n        self.file.close()\n\n    def on_error(self, status):\n        print(status)\n\n\n\n\nLoad and explore your Twitter data\n\n\n\n\nCode:\n\n\n\n\n# Import package\nimport json\n\n# String of path to file: tweets_data_path\ntweets_data_path = 'tweets.txt'\n\n# Initialize empty list to store tweets: tweets_data\ntweets_data = []\n\n# Open connection to file\ntweets_file = open(tweets_data_path, \nr\n)\n\n# Read in tweets and store in list: tweets_data\nfor line in tweets_file:\n    tweet = json.loads(line)\n    tweets_data.append(tweet)\n\n# Close connection to file\ntweets_file.close()\n\n# Print the keys of the first tweet dict\nprint(tweets_data[0].keys())\n\n\n\n\nSend the Twitter data to DataFrame\n\n\n\n\nTwitter data in a list of dictionaries \ntweets_data\n, where each dictionary corresponds to a single tweet. \n\n\nThe text in a tweet \nt1\n is stored as the value \nt1['text']\n; similarly, the language is stored in \nt1['lang']\n. \n\n\nCode:\n\n\n\n\n# Import package\nimport pandas as pd\n\n# Build DataFrame of tweet texts and languages\ndf = pd.DataFrame(tweets_data, columns=['text', 'lang'])\n\n# Print head of DataFrame\nprint(df.head())\n\n\n\n\nAnalyze the tweets (NLP, regex)\n\n\n\n\nA little bit of Twitter text analysis and plotting. \n\n\nUse the statistical data visualization library seaborn: https://stanford.edu/%7Emwaskom/software/seaborn/\n\n\nCode:\n\n\n\n\n# Import the regular expressions library\nimport re\n\n# The function tells you whether the first argument (a word) occurs within the 2nd argument (a tweet)\ndef word_in_text(word, tweet):\n    word = word.lower()\n    text = tweet.lower()\n    match = re.search(word, tweet)\n\n    if match:\n        return True\n    return False\n\n# Initialize list to store tweet counts\n[clinton, trump, sanders, cruz] = [0, 0, 0, 0]\n\n# Iterate through df, counting the number of tweets in which\n# each candidate is mentioned\nfor index, row in df.iterrows():\n    clinton += word_in_text('clinton', row['text'])\n    trump += word_in_text('trump', row['text'])\n    sanders += word_in_text('sanders', row['text'])\n    cruz += word_in_text('cruz', row['text'])\n\n# Import packages\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set seaborn style\nsns.set(color_codes=True)\n\n# Create a list of labels:cd\ncd = ['clinton', 'trump', 'sanders', 'cruz']\n\n# Plot histogram\nax = sns.barplot(cd, [clinton, trump, sanders, cruz])\nax.set(ylabel=\ncount\n)\nplt.show()\n\n\n\n\nfrom IPython.display import Image\n# for the following pictures...\n\n\n\n\nImage('tweets_figure.png')", 
            "title": "DataCamp Importing Data into Python 3"
        }, 
        {
            "location": "/DataCamp Importing Data into Python 3/#numpy", 
            "text": "NumPy arrays are a standard for storing numerical data.  Arrays are essential to other packages such as the  scikit-learn , for machine learning.  Import  numpy  and  matplotlib  (or invoke them with the  %pylab  magic command).   import numpy as np\nimport matplotlib.pyplot as plt  # or...\n%pylab inline\n\n# no need for preceeding functions (methods) with np. or plt.  Populating the interactive namespace from numpy and matplotlib   Import a csv file and assign the content to an array.   file = 'digits.csv'\n\n# Load the file as an array called digits\ndigits = loadtxt(file, delimiter = ',')\n\n# Print the datatype of digits\nprint(type(digits))\n\nprint(digits)\n\n# Select a row\nim = digits[2, 2:]\nprint(im)  class 'numpy.ndarray' \n[[ 1.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 1.  0.  0.  0.  0.  0.]\n [ 2.  0.  0.  0.  0.  0.]\n [ 0.  0.  0.  0.  0.  0.]\n [ 5.  0.  0.  0.  0.  0.]]\n[ 0.  0.  0.  0.]   Import a txt file. The  delimiter  can be  '\\t' ,  ',' ,  ';' , etc.   Skip the first 90 rows.   file = 'digits_header.txt'\n\n# Load the data into array data\ndata = loadtxt(file, delimiter='  ', skiprows = 90)\n\n# Print data\nprint(data)  [[ 3.  0.]\n [ 6.  0.]\n [ 4.  0.]\n [ 6.  0.]\n [ 2.  0.]\n [ 9.  0.]\n [ 1.  0.]\n [ 2.  0.]\n [ 0.  0.]\n [ 5.  0.]]   Import a txt file, but only the last rows and first column.   data2 = loadtxt(file, delimiter='  ', skiprows = 90, usecols = [0])\n\n# Print data\nprint(data2)  [ 3.  6.  4.  6.  2.  9.  1.  2.  0.  5.]   Import a txt file as string.   file = 'seaslug.txt'\n\n# Import file: data\ndata = loadtxt(file, delimiter = ' ', dtype = str)\n\n# Print the first element of data\nprint(data[0])  ['b\"b\\'Time\\'\"' 'b\"b\\'Percent\\'\"']   Import a txt file as float numbers.   file = 'seaslug2.txt'\n\n# Import data as floats and skip the first row: data_float\ndata_float = loadtxt(file, delimiter='   ', dtype = float, skiprows = 1)\n\n# Print the 10th element of data_float\nprint(data_float[9])\n\n# Plot a scatterplot of the data\nscatter(data_float[:, 0], data_float[:, 1])\nxlabel('time (min.)')\nylabel('percentage of larvae')\n\nshow()  [ 0.     0.357]    Import a csv file. Format the data.   data = genfromtxt('titanic.csv', delimiter = ',', names = True, dtype = None)   # A structred array\nshape(data)  (891,)   Extract a row, a column.   # to get the ith row, merely execute data[i]\nprint(data[0:10])  [ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")\n (4, 1, 1, b\" b'female'\", 35.0, 1, 0, b\" b'113803'\", 53.1, b\" b'C123'\", b\" b'S'\")\n (5, 0, 3, b\" b'male'\", 35.0, 0, 0, b\" b'373450'\", 8.05, b\" b''\", b\" b'S'\")\n (6, 0, 3, b\" b'male'\", nan, 0, 0, b\" b'330877'\", 8.4583, b\" b''\", b\" b'Q'\")\n (7, 0, 1, b\" b'male'\", 54.0, 0, 0, b\" b'17463'\", 51.8625, b\" b'E46'\", b\" b'S'\")\n (8, 0, 3, b\" b'male'\", 2.0, 3, 1, b\" b'349909'\", 21.075, b\" b''\", b\" b'S'\")\n (9, 1, 3, b\" b'female'\", 27.0, 0, 2, b\" b'347742'\", 11.1333, b\" b''\", b\" b'S'\")\n (10, 1, 2, b\" b'female'\", 14.0, 1, 0, b\" b'237736'\", 30.0708, b\" b''\", b\" b'C'\")]  # to get the column with name 'Fare', execute data['Fare']\nprint(data['Fare'][0:10])  [  7.25    71.2833   7.925   53.1      8.05     8.4583  51.8625  21.075\n  11.1333  30.0708]   Import a csv file.   Format the data.   # default dtype is None\ndata2 = recfromcsv('titanic.csv', delimiter = ',', names = True, dtype = None)  # Print out first three entries\nprint(data2[:3])  [ (1, 0, 3, b\" b'male'\", 22.0, 1, 0, b\" b'A/5 21171'\", 7.25, b\" b''\", b\" b'S'\")\n (2, 1, 1, b\" b'female'\", 38.0, 1, 0, b\" b'PC 17599'\", 71.2833, b\" b'C85'\", b\" b'C'\")\n (3, 1, 3, b\" b'female'\", 26.0, 0, 0, b\" b'STON/O2. 3101282'\", 7.925, b\" b''\", b\" b'S'\")]", 
            "title": "Numpy"
        }, 
        {
            "location": "/DataCamp Importing Data into Python 3/#pandas", 
            "text": "Two-dimensional labeled data structure(s) or  data frame (DataFrame).  Pythonic analog of R s dataframes.  Columns can be of potentially different types.  Excellent object for:   Manipulate, slice, reshape, groupby, join, merge.  Perform statistics.  Work with time series data.  Exploratory data analysis.  Data wrangling.  Data preprocessing.  Building models.  Visualization.    There exists standards and best practices to use pandas.   # Import pandas\nimport pandas as pd   Pandas is not part of  %pylab .  Import a file.   file = 'titanic.csv'\n\n# Read the file into a DataFrame: df\ndf = pd.read_csv(file)\n\n# View the head of the DataFrame\nprint(df.head())     Passengerid   Survived   Pclass         Sex    Age   SibSp   Parch  \\\n0            1          0        3     b'male'   22.0       1       0   \n1            2          1        1   b'female'   38.0       1       0   \n2            3          1        3   b'female'   26.0       0       0   \n3            4          1        1   b'female'   35.0       1       0   \n4            5          0        3     b'male'   35.0       0       0\n\n                 Ticket     Fare     Cabin  Embarked  \n0          b'A/5 21171'   7.2500       b''      b'S'  \n1           b'PC 17599'  71.2833    b'C85'      b'C'  \n2   b'STON/O2. 3101282'   7.9250       b''      b'S'  \n3             b'113803'  53.1000   b'C123'      b'S'  \n4             b'373450'   8.0500       b''      b'S'   Import another file; no header and some rows.   file = 'digits2.csv'\n\n# Read the first 5 rows of the file into a DataFrame: data\ndata = pd.read_csv(file, nrows = 5, header = None)\n\n# Print the datatype of data\nprint(type(data))\n\n# Build a numpy array from the DataFrame: data_array\ndata_array = data.values\n\n# Print the datatype of data_array to the shell\nprint(type(data_array))  class 'pandas.core.frame.DataFrame'  class 'numpy.ndarray'    Import another file; replace the missing data (NA).   file = 'titanic_corrupt.csv'\n\n# Assign filename: file\nfile = 'titanic_corrupt.csv'\n\n# Import file: data\ndata = pd.read_csv(file, sep = ';', comment = '#', na_values = ['Nothing'])\n\n# Print the head of the DataFrame\nprint(data.head())     PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch   \\\n0            1         0       3    male  22.0      1       0   \n1            2         1       1  female  38.0      1       0   \n2            3         1       3  female  26.0      0       0   \n3            4         1       1  female  35.0      1       0   \n4            5         0       3    male  35.0      0       0\n\n             Ticket   Fare Cabin Embarked  \n0         A/5 21171   7,25   NaN        S  \n1          PC 17599    NaN   NaN      NaN  \n2  STON/O2. 3101282  7,925   NaN        S  \n3            113803   53,1  C123        S  \n4            373450   8,05   NaN        S   Plot the  Age  variable in a histogram.   pd.DataFrame.hist(data[['Age']])\nplt.xlabel('Age (years)')\nplt.ylabel('count')\n\nplt.show()", 
            "title": "Pandas"
        }, 
        {
            "location": "/DataCamp Importing Data into Python 3/#2-importing-from-other-files", 
            "text": "With Pandas  and a bit of Numpy.  Excel spreadsheets.  MATLAB files.  SAS files.  Stata files.  HDF5 files (large datasets, scientific, legal, etc.).  Feather.  Julia.  Pickled files (binary).   import os\n\nwd = os.getcwd()\nos.listdir(wd)  ['.ipynb_checkpoints',\n 'a_movie.json',\n 'cars.csv',\n 'count.svg',\n 'CYratioCyt.png',\n 'CYratioCyt.svg',\n 'digits.csv',\n 'digits2.csv',\n 'digits_header.txt',\n 'disa10.png',\n 'disa10.svg',\n 'economic.csv',\n 'economic2.xls',\n 'Importing Data into Python 3.ipynb',\n 'importing_python_ch1_pdf_slides.pdf',\n 'importing_python_ch2_pdf_slides.pdf',\n 'importing_python_ch3_pdf_slides.pdf',\n 'importing_python_ch4_pdf_slides.pdf',\n 'importing_python_ch5_pdf_slides.pdf',\n 'intermediate_python_ch1_slides.pdf',\n 'intermediate_python_ch2_slides.pdf',\n 'intermediate_python_ch3_slides.pdf',\n 'intermediate_python_ch4_slides.pdf',\n 'intermediate_python_ch5_slides.pdf',\n 'intro_python_ch1_slides.pdf',\n 'intro_python_ch2_slides.pdf',\n 'intro_python_ch3_slides.pdf',\n 'intro_python_ch4_slides.pdf',\n 'moby_dick.txt',\n 'new1.py',\n 'p.png',\n 'PRIO_bd3.0.xls',\n 'Python 3.ipynb',\n 'Python3.py',\n 'sales.sas7bdat',\n 'save.p',\n 'seaslug.txt',\n 'seaslug2.txt',\n 'strain.png',\n 'strain.svg',\n 'Thumbs.db',\n 'titanic.csv',\n 'titanic_corrupt.csv',\n 'tweets_figure.png',\n 'tweets_figure.svg',\n 'winequality-red.csv']  Pickled files   There are a number of datatypes that cannot be saved easily to flat files, such as lists and dictionaries.   If you want your files to be human readable, you may want to save them as text files in a clever manner (JSONs, which you will see in a later chapter, are appropriate for Python dictionaries).  If, however, you merely want to be able to import them into Python, you can serialize them.   All this means is converting the object into a sequence of bytes, or bytestream.  Import it.   import pickle\n\n# Save a dictionary into a pickle file.\nfav = {'Airline' : '8', 'Aug' : '85', 'June' : '69.4', 'Mar' : '84.4'}\npickle.dump(fav, open( save.p ,  wb ))\n\n# save.p\n\n# Open pickle file and load data: d\n\nwith open('save.p', 'rb') as file:\n    d = pickle.load(file)\n\n# Print d\nprint(d)\n\n# Print datatype of d\nprint(type(d))  {'Aug': '85', 'Airline': '8', 'Mar': '84.4', 'June': '69.4'} class 'dict'   Excel files  file = 'PRIO_bd3.0.xls'\n\n# Load spreadsheet: xl\nxl = pd.ExcelFile(file)\n\n# Print sheet names\nprint(xl.sheet_names)  ['bdonly']   Parse the sheets.   By name or by number (first, second,  ).   df1 = xl.parse('bdonly')  df2 = xl.parse(0)   Options: parse the first sheet by index, skip the first row of data, then name the columns  Country  and  AAM due to War (2002)   df2 = xl.parse(0, parse_cols = [0], skiprows = [0], names = ['Country', 'AAM due to War (2002)'])   Options: parse the second sheet, parse only the first column, skip the first row and rename the column  Country .   df2 = xl.parse(1, parse_cols = [0], skiprows = [0], names = ['Country'])   Print the head of the DataFrame.   print(df1.head())     id  year  bdeadlow  bdeadhig  bdeadbes  annualdata  source  bdversion  \\\n0   1  1946      1000      9999      1000           2       1          3   \n1   1  1952       450      3000      -999           2       1          3   \n2   1  1967        25       999        82           2       1          3   \n3   2  1946        25       999      -999           0       0          3   \n4   2  1947        25       999      -999           0       0          3\n\n   location    sidea   ...    epend  ependdate ependprec  gwnoa gwnoa2nd  \\\n0   Bolivia  Bolivia   ...        1 1946-07-21     -99.0    145      NaN   \n1   Bolivia  Bolivia   ...        1 1952-04-12     -99.0    145      NaN   \n2   Bolivia  Bolivia   ...        1 1967-10-16     -99.0    145      NaN   \n3  Cambodia   France   ...        0        NaT       NaN    220      NaN   \n4  Cambodia   France   ...        0        NaT       NaN    220      NaN\n\n   gwnob  gwnob2nd  gwnoloc region  version  \n0    NaN       NaN      145      5   2009-4  \n1    NaN       NaN      145      5   2009-4  \n2    NaN       NaN      145      5   2009-4  \n3    NaN       NaN      811      3   2009-4  \n4    NaN       NaN      811      3   2009-4\n\n[5 rows x 32 columns]   We process images since we cheat a little.   Many packages are not installed.   We are not be able to import some data.   Images will then present the final results.   from IPython.display import Image\n# for the following pictures...  SAS files   Advanced analytics  Multivariate analysis  Business intelligence  Data management  Predictive analytics  Standard for computational analysis  Code (instead of importing the package):   # Import sas7bdat package\nfrom sas7bdat import SAS7BDAT\n\n# Save file to a DataFrame: df_sas\nwith SAS7BDAT('sales.sas7bdat') as file:\n    df_sas = file.to_data_frame()\n\n# Print head of DataFrame\nprint(df_sas.head())\n\n# Plot histogram of DataFrame features\npd.DataFrame.hist(df_sas[['P']])\nplt.ylabel('count')\n\nplt.show()   The data are adapted from the website of the undergraduate text book Principles of Economics by Hill, Griffiths and Lim (http://www.principlesofeconometrics.com/sas/).  The chart would be:   Image('p.png')   Stata files   The data consist of disease extent for several diseases in various countries (more information can be found at http://www.cid.harvard.edu/ciddata/geog/readme_disarea.html).   # Import pandas\nimport pandas as pd\n\n# Load Stata file into a pandas DataFrame: df\ndf = pd.read_stata('disarea.dta')\n\n# Print the head of the DataFrame df\nprint(df.head())    wbcode               country  disa1  disa2  disa3  disa4  disa5  disa6  \\\n0    AFG           Afghanistan   0.00   0.00   0.76   0.73    0.0   0.00   \n1    AGO                Angola   0.32   0.02   0.56   0.00    0.0   0.00   \n2    ALB               Albania   0.00   0.00   0.02   0.00    0.0   0.00   \n3    ARE  United Arab Emirates   0.00   0.00   0.00   0.00    0.0   0.00   \n4    ARG             Argentina   0.00   0.24   0.24   0.00    0.0   0.23\n\n   disa7  disa8   ...    disa16  disa17  disa18  disa19  disa20  disa21  \\\n0   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n1   0.56    0.0   ...       0.0     0.4     0.0    0.61    0.00     0.0   \n2   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n3   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.00     0.0   \n4   0.00    0.0   ...       0.0     0.0     0.0    0.00    0.05     0.0\n\n   disa22  disa23  disa24  disa25  \n0    0.00    0.02    0.00    0.00  \n1    0.99    0.98    0.61    0.00  \n2    0.00    0.00    0.00    0.16  \n3    0.00    0.00    0.00    0.00  \n4    0.00    0.01    0.00    0.11\n\n[5 rows x 27 columns]   Plot histogram of one column of the DataFrame.   pd.DataFrame.hist(df[['disa10']])\nplt.xlabel('Extent of disease')\nplt.ylabel('Number of coutries')\n\nplt.show()   HDF5 files   Standard for storing large quantities of numerical data.  Datasets can be hundreds of gigabytes or terabytes.  HDF5 can scale to exabytes.  Code (instead of importing the package):   # Import packages\nimport numpy as np\nimport h5py\n\n# Assign filename: file\nfile = 'LIGO_data.hdf5' \n\n# Load file: data\ndata = h5py.File(file, 'r')\n\n# Print the datatype of the loaded file\nprint(type(data))\n\n# Print the keys of the file\nfor key in data.keys():\n    print(key)\n\n# Get the HDF5 group: group\ngroup = data['strain']\n\n# Check out keys of group\nfor key in group.keys():\n    print(key)\n\n# Set variable equal to time series data: strain\nstrain = data['strain']['Strain'].value\n\n# Set number of time points to sample: num_samples\nnum_samples = 10000\n\n# Set time vector\ntime = np.arange(0, 1, 1/num_samples)\n\n# Plot data\nplt.plot(time, strain[:num_samples])\nplt.xlabel('GPS Time (s)')\nplt.ylabel('strain')\nplt.show()   You can find the LIGO data plus loads of documentation and tutorials (https://losc.ligo.org/events/GW150914/) and (https://losc.ligo.org/s/events/GW150914/GW150914_tutorial.html) is a great tutorial on Signal Processing with the data.   Image('strain.png')   MATLAB   \u201cMatrix Laboratory\u201d.  Industry standard in engineering and science.  Code (instead of importing the package):   # Import package\nimport scipy.io\n\n# Load MATLAB file: mat\nmat = scipy.io.loadmat('albeck_gene_expression.mat')\n\n# Print the datatype type of mat\nprint(type(mat))\n\n# Print the keys of the MATLAB dictionary\nprint(mat.keys())\n\n# Print the type of the value corresponding to the key 'CYratioCyt'\nprint(type(mat['CYratioCyt']))\n\n# Print the shape of the value corresponding to the key 'CYratioCyt'\nprint(np.shape(mat['CYratioCyt']))\n\n# Subset the array and plot it\ndata = mat['CYratioCyt'][25, 5:]\nfig = plt.figure()\nplt.plot(data)\nplt.xlabel('time (min.)')\nplt.ylabel('normalized fluorescence (measure of expression)')\nplt.show()   This file contains gene expression data from the Albeck Lab at UC Davis (https://www.mcb.ucdavis.edu/faculty-labs/albeck/workshop.htm). You can find the data and some great documentation.   Image('CYratioCyt.png')", 
            "title": "2, Importing from Other Files"
        }, 
        {
            "location": "/DataCamp Importing Data into Python 3/#3-working-with-relational-databases", 
            "text": "Relational Database Management System   PostgreSQL.  MySQL.  SQLite.  Code (instead of importing the package):   # Import necessary module\nfrom sqlalchemy import create_engine\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')  'sqlite:///Northwind.sqlite'  is called the connection string to the SQLite database.   The Chinook database (http://chinookdatabase.codeplex.com/) contains information about a semi-fictional digital media store in which media data is real and customer, employee and sales data has been manually created.  Code (instead of importing the package):   # Save the table names to a list: table_names\ntable_names = engine.table_names()\n\n# Print the table names to the shell\nprint(table_names)  Query the DB   The final  ;  is facultative.  Code (instead of importing the package):   # Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine connection: con\ncon = engine.connect()\n\n# Perform query: rs\nrs = con.execute('SELECT * FROM Album')\n\n# Save results of the query to DataFrame: df\ndf = pd.DataFrame(rs.fetchall())\n\n# Close connection\ncon.close()\n\n# Print head of DataFrame df\nprint(df.head())  Customize queries   Code (instead of importing the package):   # Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite') # becomes facultative with many queries\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute('SELECT LastName, Title FROM Employee')\n    df = pd.DataFrame(rs.fetchmany(size = 3))\n    df.columns = rs.keys() # set the DataFrame's column names to the corresponding names of the table columns\n\n# Print the length of the DataFrame df\nprint(len(df))\n\n# Print the head of the DataFrame df\nprint(df.head())   Code (instead of importing the package):   # Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite') # becomes facultative with many queries\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute( SELECT * FROM Employee WHERE EmployeeId  = 6 )\n    df = pd.DataFrame(rs.fetchall())\n    df.columns = rs.keys()\n\n# Print the head of the DataFrame df\nprint(df.head())   Code (instead of importing the package):   # Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine in context manager\nwith engine.connect() as con:\n    rs = con.execute('SELECT * FROM Employee ORDER BY BirthDate')\n    df = pd.DataFrame(rs.fetchall())\n\n    # Set the DataFrame's column names\n    df.columns = rs.keys()\n\n# Print head of DataFrame\nprint(df.head())  Query the DB the Pandas way   Simpler code (instead of importing the package)!!!   # Import packages\nfrom sqlalchemy import create_engine\nimport pandas as pd\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Execute query and store records in DataFrame: df\ndf = pd.read_sql_query( SELECT * FROM Album , engine)\n\n# Print head of DataFrame\nprint(df.head())\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df1\nwith engine.connect() as con:\n    rs = con.execute( SELECT * FROM Album )\n    df1 = pd.DataFrame(rs.fetchall())\n    df1.columns = rs.keys()\n\n# Confirm that both methods yield the same result: does df = df1 ?   \nprint(df.equals(df1))   Code (instead of importing the package):   # Import packages\nfrom sqlalchemy import create_engine\nimport pandas as pd\n\n# Create engine: engine\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Execute query and store records in DataFrame: df\ndf = pd.read_sql_query( SELECT * FROM Employee WHERE EmployeeId  = 6 ORDER BY BirthDate , engine)\n\n# Print head of DataFrame\nprint(df.head())  INNER JOIN   Code (instead of importing the package):   import pandas as pd\nfrom sqlalchemy import create_engine\n\nengine = create_engine('sqlite:///Chinook.sqlite')\n\n# Open engine in context manager\n# Perform query and save results to DataFrame: df\nwith engine.connect() as con:\n    rs = con.execute( SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID )\n    df = pd.DataFrame(rs.fetchall())\n    df.columns = rs.keys()\n\n# Print head of DataFrame df\nprint(df.head())   Alternative code:   df = pd.read_sql_query( SELECT Title, Name FROM Album INNER JOIN Artist on Album.ArtistID = Artist.ArtistID , engine)\n\n# Print head of DataFrame df\nprint(df.head())   Code (instead of importing the package):   # Execute query and store records in DataFrame: df\ndf = pd.read_sql_query( SELECT * FROM PlaylistTrack INNER JOIN Track on PlaylistTrack.TrackId = Track.TrackId WHERE Milliseconds   250000 , engine)\n\n# Print head of DataFrame\nprint(df.head())", 
            "title": "3, Working with Relational Databases"
        }, 
        {
            "location": "/DataCamp Importing Data into Python 3/#4-importing-flat-files-from-the-web-web-scraping", 
            "text": "scrape, wrangle, munge, wrangling, munging     Import and locally save datasets from the web.  Load datasets into pandas DataFrames.  Make HTTP requests (GET requests).  Scrape web data such as HTML.  Parse HTML into useful data (BeautifulSoup).  Use the urllib and requests packages.   Using the  urllib  package on csv files   Import the package.   from urllib.request import urlretrieve\n\n# import pandas as pd\n\n# Assign url of file: url\nurl = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\n# Save file locally\nurlretrieve(url, 'winequality-red.csv')\n\n# Read file into a DataFrame and print its head\ndf = pd.read_csv('winequality-red.csv', sep=';')\nprint(df.head())     fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5  # import matplotlib.pyplot as plt\n# import pandas as pd\n\n# Assign url of file: url\nurl = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\n# Read file into a DataFrame: df\ndf = pd.read_csv(url, sep = ';')\n\n# Print the head of the DataFrame\nprint(df.head())\n\n# Plot first column of df\npd.DataFrame.hist(df.ix[:, 0:1])\nplt.xlabel('fixed acidity (g(tartaric acid)/dm$^3$)')\nplt.ylabel('count')\nplt.show()     fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n0            7.4              0.70         0.00             1.9      0.076   \n1            7.8              0.88         0.00             2.6      0.098   \n2            7.8              0.76         0.04             2.3      0.092   \n3           11.2              0.28         0.56             1.9      0.075   \n4            7.4              0.70         0.00             1.9      0.076\n\n   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n0                 11.0                  34.0   0.9978  3.51       0.56   \n1                 25.0                  67.0   0.9968  3.20       0.68   \n2                 15.0                  54.0   0.9970  3.26       0.65   \n3                 17.0                  60.0   0.9980  3.16       0.58   \n4                 11.0                  34.0   0.9978  3.51       0.56\n\n   alcohol  quality  \n0      9.4        5  \n1      9.8        5  \n2      9.8        5  \n3      9.8        6  \n4      9.4        5   Using the  urllib  package on Excel files  # import pandas as pd\n\n# Assign url of file: url\nurl = 'http://s3.amazonaws.com/assets.datacamp.com/course/importing_data_into_r/latitude.xls'\n\n# Read in all sheets of Excel file: xl\nxl = pd.read_excel(url, sheetname = None)\n\n# Print the sheetnames (keys) to the shell !!!\nprint(xl.keys())\n\n# Print the head of the first sheet (using its name, NOT its index)\nprint(xl['1700'].head())  dict_keys(['1700', '1900'])\n                 country       1700\n0            Afghanistan  34.565000\n1  Akrotiri and Dhekelia  34.616667\n2                Albania  41.312000\n3                Algeria  36.720000\n4         American Samoa -14.307000  HTTP requests to import files from the web   requests  is one of the most downloaded Python packages.  requests  works with  urllib .  Import the package.   from urllib.request import urlopen, Request\n\n# Specify the url\nurl =  http://www.datacamp.com/teach/documentation \n\n# This packages the request: request\nrequest = Request(url)\n\n# Send the request and catches the response: response\nresponse = urlopen(request)\n\n# Print the datatype of response\nprint(type(response))\n\n# Be polite and close the response!\nresponse.close()  class 'http.client.HTTPResponse'   from urllib.request import urlopen, Request\n\nurl =  http://docs.datacamp.com/teach/ \n\nrequest = Request(url)\n\nresponse = urlopen(request)\n\n\n# Extract the response: html\nhtml = response.read()\n\n# Print the html\nprint(html)\n\n# Be polite and close the response!\nresponse.close()  b' !DOCTYPE html \\n link rel=\"shortcut icon\" href=\"images/favicon.ico\" / \\n html \\n\\n   head \\n   meta charset=\"utf-8\" \\n   meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" \\n   meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" \\n\\n   title Home /title \\n   meta name=\"description\" content=\"All Documentation on Course Creation\" \\n\\n   link rel=\"stylesheet\" href=\"/teach/css/main.css\" \\n   link rel=\"canonical\" href=\"/teach/\" \\n   link rel=\"alternate\" type=\"application/rss+xml\" title=\"DataCamp Teach Documentation\" href=\"/teach/feed.xml\" / \\n /head \\n\\n\\n   body \\n\\n     header class=\"site-header\" \\n\\n   div class=\"wrapper\" \\n\\n     a class=\"site-title\" href=\"/teach/\" DataCamp Teach Documentation /a \\n\\n   /div \\n\\n /header \\n\\n\\n     div class=\"page-content\" \\n       div class=\"wrapper\" \\n         p The Teach Documentation has been moved to  a href=\"https://www.datacamp.com/teach/documentation\" https://www.datacamp.com/teach/documentation /a ! /p \\n\\n !-- Everybody can teach on DataCamp. The resources on this website explain all the steps to build your own course on DataCamp\\'s interactive data science platform.\\n\\nInterested in partnering with DataCamp? Head over to the [Course Material](/teach/course-material.html) page to get an idea of the requirements to build your own interactive course together with DataCamp!\\n\\n## Table of Contents\\n\\n- [Course Material](/teach/course-material.html) - Content required to build a DataCamp course.\\n- [Video Lectures](/teach/video-lectures.html) - Details on video recording and editing.\\n- [DataCamp Teach](https://www.datacamp.com/teach) - Use the DataCamp Teach website to create DataCamp courses (preferred).\\n- [datacamp R Package](https://github.com/datacamp/datacamp/wiki) - Use R Package to create DataCamp courses (legacy).\\n- [Code DataCamp Exercises](/teach/code-datacamp-exercises.html)\\n- [SCT Design (R)](https://github.com/datacamp/testwhat/wiki)\\n- [SCT Design (Python)](https://github.com/datacamp/pythonwhat/wiki)\\n- [Style Guide](/teach/style-guide.html) -- \\n\\n\\n       /div \\n     /div \\n\\n    \\n\\n   /body \\n\\n /html \\n'  Using  requests  import requests\n\nurl =  http://docs.datacamp.com/teach/ \n\nr = requests.get(url)\n\ntext = r.text\n\n# Print part of the html (split the paragraphs) instead of all with  print(text)\nhead = text.split('\\n\\n')\n\nprint(head[0])\nprint('')\nprint(head[1])\nprint('')\nprint(head[2])\nprint('')\nprint(head[3])  !DOCTYPE html  link rel=\"shortcut icon\" href=\"images/favicon.ico\" /  html \n\n   head \n   meta charset=\"utf-8\" \n   meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" \n   meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" \n\n   title Home /title \n   meta name=\"description\" content=\"All Documentation on Course Creation\" \n\n   link rel=\"stylesheet\" href=\"/teach/css/main.css\" \n   link rel=\"canonical\" href=\"/teach/\" \n   link rel=\"alternate\" type=\"application/rss+xml\" title=\"DataCamp Teach Documentation\" href=\"/teach/feed.xml\" /  /head   Scraping the web   scrape, wrangle, munge   Scrape unstructured data.  Scrape structured data, parse it and extract the data from HTML using the  BeautifulSoup  package.  Import the packages.   import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n# Create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Prettify the BeautifulSoup object: pretty_soup\npretty_soup = soup.prettify()\n\n# Print the response\nprint(type(pretty_soup))\n\n# Print part of the html (split the text), not all with  print(pretty_soup)\nhead = pretty_soup.split(' /h3 ')\n\nprint(head[0])  class 'str'  html \n  head \n   title \n   Guido's Personal Home Page\n   /title \n  /head \n  body bgcolor=\"#FFFFFF\" text=\"#000000\" \n   h1 \n    a href=\"pics.html\" \n     img border=\"0\" src=\"images/IMG_2192.jpg\"/ \n    /a \n   Guido van Rossum - Personal Home Page\n   /h1 \n   p \n    a href=\"http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\" \n     i \n     \"Gawky and proud of it.\"\n     /i \n    /a \n   /p \n   h3 \n    a href=\"http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\" \n    Who\nI Am\n    /a    Other operations with  BeautifulSoup .   import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n\n# Create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Get the title of Guido's webpage: guido_title\nguido_title = soup.title # attribute\n\n# Print the title of Guido's webpage to the shell\nprint(guido_title)\n\n# Get Guido's text: guido_text\nguido_text = soup.get_text() # method\n\n# Print Guido's text to the shell\nprint(guido_text)  title Guido's Personal Home Page /title \n\nGuido's Personal Home Page\n\nGuido van Rossum - Personal Home Page\n\"Gawky and proud of it.\"\nWho\nI Am\nI am the author of the Python\nprogramming language.  See also my resume\nand my publications list, a brief bio, assorted writings, presentations and interviews (all about Python), some\npictures of me,\nmy new blog, and\nmy old\nblog on Artima.com.  I am\n@gvanrossum on Twitter.  I\nalso have\na G+\nprofile.\n\nIn January 2013 I joined\nDropbox.  I work on various Dropbox\nproducts and have 50% for my Python work, no strings attached.\nPreviously, I have worked for Google, Elemental Security, Zope\nCorporation, BeOpen.com, CNRI, CWI, and SARA.  (See\nmy resume.)  I created Python while at CWI.\n\nHow to Reach Me\nYou can send email for me to guido (at) python.org.\nI read everything sent there, but if you ask\nme a question about using Python, it's likely that I won't have time\nto answer it, and will instead refer you to\nhelp (at) python.org,\ncomp.lang.python or\nStackOverflow.  If you need to\ntalk to me on the phone or send me something by snail mail, send me an\nemail and I'll gladly email you instructions on how to reach me.\n\nMy Name\nMy name often poses difficulties for Americans.\n\nPronunciation: in Dutch, the \"G\" in Guido is a hard G,\npronounced roughly like the \"ch\" in Scottish \"loch\".  (Listen to the\nsound clip.)  However, if you're\nAmerican, you may also pronounce it as the Italian \"Guido\".  I'm not\ntoo worried about the associations with mob assassins that some people\nhave. :-)\n\nSpelling: my last name is two words, and I'd like keep it\nthat way, the spelling on some of my credit cards notwithstanding.\nDutch spelling rules dictate that when used in combination with my\nfirst name, \"van\" is not capitalized: \"Guido van Rossum\".  But when my\nlast name is used alone to refer to me, it is capitalized, for\nexample: \"As usual, Van Rossum was right.\"\n\nAlphabetization: in America, I show up in the alphabet under\n\"V\".  But in Europe, I show up under \"R\".  And some of my friends put\nme under \"G\" in their address book...\n\nMore Hyperlinks\n\nHere's a collection of essays relating to Python\nthat I've written, including the foreword I wrote for Mark Lutz' book\n\"Programming Python\".\nI own the official \nPython license.\n\nThe Audio File Formats FAQ\nI was the original creator and maintainer of the Audio File Formats\nFAQ.  It is now maintained by Chris Bagwell\nat http://www.cnpbagwell.com/audio-faq.  And here is a link to\nSOX, to which I contributed\nsome early code.\n\n\"On the Internet, nobody knows you're\na dog.\"   More.   import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.python.org/~guido/'\n\nr = requests.get(url)\n\nhtml_doc = r.text\n\n# create a BeautifulSoup object from the HTML: soup\nsoup = BeautifulSoup(html_doc, 'lxml')\n\n# Print the title of Guido's webpage\nprint(soup.title)\n\n# Find all 'a' tags (which define hyperlinks): a_tags\na_tags = soup.find_all('a') # for  a , hyperlinks\n\n# Print the URLs to the shell\nfor link in a_tags:\n    print( link.get('href'))  title Guido's Personal Home Page /title \npics.html\nhttp://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm\nhttp://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg\nhttp://www.python.org\nResume.html\nPublications.html\nbio.html\nhttp://legacy.python.org/doc/essays/\nhttp://legacy.python.org/doc/essays/ppt/\ninterviews.html\npics.html\nhttp://neopythonic.blogspot.com\nhttp://www.artima.com/weblogs/index.jsp?blogger=12088\nhttps://twitter.com/gvanrossum\nhttps://plus.google.com/u/0/115212051037621986145/posts\nhttp://www.dropbox.com\nResume.html\nhttp://groups.google.com/groups?q=comp.lang.python\nhttp://stackoverflow.com\nguido.au\nhttp://legacy.python.org/doc/essays/\nimages/license.jpg\nhttp://www.cnpbagwell.com/audio-faq\nhttp://sox.sourceforge.net/\nimages/internetdog.gif", 
            "title": "4, Importing Flat Files from the Web (Web Scraping)"
        }, 
        {
            "location": "/DataCamp Importing Data into Python 3/#5-introduction-to-apis-and-jsons", 
            "text": "API or Application Programming Interface are protocols and routines providing access to websites and web apps like OMDb, Wikipedia, Uber, Uber Developers, BGG, ImDB, Facebook, Instagram, and Twitter.  Most of data coming from APIS are JSON files.   Import the  json  package  import json\n\n# Load JSON: json_data\nwith open('a_movie.json', 'r') as json_file:\n    json_data = json.load(json_file)\n\nprint(type(json_data))\nprint(json_data['Title'])\nprint(json_data['Year'])\nprint('')\n\n# Print each key-value pair in json_data\nfor k in json_data.keys():\n    print(k + ': ', json_data[k])  class 'dict' \nThe Social Network\n2010\n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nAwards:  Won 3 Oscars. Another 161 wins   162 nominations.\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nTitle:  The Social Network\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nDirector:  David Fincher\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)  The  requests  package again   Pull some movie data down from the Open Movie Database (OMDB) using their API.  Pull it as text.   import requests\n\nurl = 'http://www.omdbapi.com/?t=social+network'\n\nr = requests.get(url)\n\nprint(type(r))\nprint('')\n\n# Print the text of the response\nprint(r.text)  class 'requests.models.Response' \n\n{\"Title\":\"The Social Network\",\"Year\":\"2010\",\"Rated\":\"PG-13\",\"Released\":\"01 Oct 2010\",\"Runtime\":\"120 min\",\"Genre\":\"Biography, Drama\",\"Director\":\"David Fincher\",\"Writer\":\"Aaron Sorkin (screenplay), Ben Mezrich (book)\",\"Actors\":\"Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\",\"Plot\":\"Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\",\"Language\":\"English, French\",\"Country\":\"USA\",\"Awards\":\"Won 3 Oscars. Another 161 wins   162 nominations.\",\"Poster\":\"http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\",\"Metascore\":\"95\",\"imdbRating\":\"7.7\",\"imdbVotes\":\"478,258\",\"imdbID\":\"tt1285016\",\"Type\":\"movie\",\"Response\":\"True\"}   Pull it as JSON or a dictionary.   import requests\n\nurl = 'http://www.omdbapi.com/?t=social+network'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\nprint(type(json_data))\nprint('')\n\n# Print each key-value pair in json_data\nfor k in json_data.keys():\n    print(k + ': ', json_data[k])  class 'dict' \n\nResponse:  True\nRated:  PG-13\nPoster:  http://ia.media-imdb.com/images/M/MV5BMTM2ODk0NDAwMF5BMl5BanBnXkFtZTcwNTM1MDc2Mw@@._V1_SX300.jpg\nimdbID:  tt1285016\nYear:  2010\nMetascore:  95\nLanguage:  English, French\nCountry:  USA\nAwards:  Won 3 Oscars. Another 161 wins   162 nominations.\nPlot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.\nDirector:  David Fincher\nimdbRating:  7.7\nActors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons\nimdbVotes:  478,258\nReleased:  01 Oct 2010\nRuntime:  120 min\nGenre:  Biography, Drama\nType:  movie\nTitle:  The Social Network\nWriter:  Aaron Sorkin (screenplay), Ben Mezrich (book)   Search the Library of Congress.  Pull a dictionary of dictionaries.   import requests\n\nurl = 'http://chroniclingamerica.loc.gov/search/titles/results/?terms=new%20york format=json'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\n# Select the first element in the list json_data['items']: nyc_loc\n# dict of dict\nnyc_loc = json_data['items'][0]\n\n# Print each key-value pair in nyc_loc\nfor k in nyc_loc.keys():\n    print(k + ': ', nyc_loc[k])  county:  ['New York']\nplace_of_publication:  New York\noclc:  12928956\nsubject:  ['New York (N.Y.)--Newspapers.', 'New York (State)--New York.--fast--(OCoLC)fst01204333']\nalt_title:  []\ntitle:  The New York thrice-a-week world.\ntype:  title\nedition:  New York and Pennsylvania ed.\nid:  /lccn/sn85047837/\nnote:  ['Democrat.', 'Description based on: Vol. 36, no. 3,670 (Oct. 4, 1895).', 'The words \"New York thrice-a-week\" appear in title ornament.']\nplace:  ['New York--New York--New York']\nessay:  []\nstart_year:  1890\nend_year:  1999\npublisher:  Press Pub. Co.\nlccn:  sn85047837\nholding_type:  ['Unspecified']\nstate:  ['New York']\ncity:  ['New York']\nlanguage:  ['English']\ncountry:  New York\ntitle_normal:  new york thrice-a-week world.\nurl:  http://chroniclingamerica.loc.gov/lccn/sn85047837.json\nfrequency:  Three times a week   The Wikipedia API.  Documentation: https://www.mediawiki.org/wiki/API:Main_page  Dictionary of dictionary of dictionary.   import requests\n\nurl = 'https://en.wikipedia.org/w/api.php?action=query prop=extracts format=json exintro= titles=pizza'\n\nr = requests.get(url)\n\n# Decode the JSON data into a dictionary: json_data\njson_data = r.json()\n\n# Print the Wikipedia page extract\npizza_extract = json_data['query']['pages']['24768']['extract']\nprint(pizza_extract)  p b Pizza /b  is a flatbread generally topped with tomato sauce and cheese and baked in an oven. It is commonly topped with a selection of meats, vegetables and condiments. The term was first recorded in the 10th century, in a Latin manuscript from Gaeta in Central Italy. The modern pizza was invented in Naples, Italy, and the dish and its variants have since become popular in many areas of the world. /p  p In 2009, upon Italy's request, Neapolitan pizza was safeguarded in the European Union as a Traditional Speciality Guaranteed dish. The Associazione Verace Pizza Napoletana (the True Neapolitan Pizza Association) is a non-profit organization founded in 1984 with headquarters in Naples. It promotes and protects the \"true Neapolitan pizza\". /p  p Pizza is sold fresh or frozen, either whole or in portions, and is a common fast food item in Europe and North America. Various types of ovens are used to cook them and many varieties exist. Several similar dishes are prepared from ingredients commonly used in pizza preparation, such as calzone and stromboli. /p  p /p   The Twitter API and Authentification   Twitter has many APIs: the main API, the REST API, Streaming APIs (private, public), Firehouse (expensive), etc.  Field Guide: https://dev.twitter.com/overview/api/tweets  Consult the documentation to set an authentification key (available online).   tweepy  package   The authentication looks like the following:  Code:   # Import package\nimport tweepy, json\n\n# Store OAuth authentication credentials in relevant variables\naccess_token =  1092294848-aHN7DcRP9B4VMTQIhwqOYiB14YkW92fFO8k8EPy \naccess_token_secret =  X4dHmhPfaksHcQ7SCbmZa2oYBBVSD2g8uIHXsp5CTaksx \nconsumer_key =  nZ6EA0FxZ293SxGNg8g8aP0HM \nconsumer_secret =  fJGEodwe3KiKUnsYJC3VRndj7jevVvXbK2D5EiJ2nehafRgA6i \n\n# Pass OAuth details to tweepy's OAuth handler\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)  Start streaming tweets   Code:   # Initialize Stream listener\nl = MyStreamListener()\n\n# Create you Stream object with authentication\nstream = tweepy.Stream(auth, l)\n\n\n# Filter Twitter Streams to capture data by the keywords:\nstream.filter(track = ['clinton', 'trump', 'sanders', 'cruz'])   Code of  MyStreamListener() :  Creates a file called tweets.txt, collects streaming tweets as .jsons and writes them to the file tweets.txt; once 100 tweets have been streamed, the listener closes the file and stops listening.    class MyStreamListener(tweepy.StreamListener):\n\n\n    def __init__(self, api=None):\n\n        super(MyStreamListener, self).__init__()\n        self.num_tweets = 0\n        self.file = open( tweets.txt ,  w )\n\n    def on_status(self, status):\n\n        tweet = status._json\n        self.file.write( json.dumps(tweet) + '\\n' )\n        tweet_list.append(status)\n        self.num_tweets += 1\n        if self.num_tweets   100:\n            return True\n        else:\n            return False\n        self.file.close()\n\n    def on_error(self, status):\n        print(status)  Load and explore your Twitter data   Code:   # Import package\nimport json\n\n# String of path to file: tweets_data_path\ntweets_data_path = 'tweets.txt'\n\n# Initialize empty list to store tweets: tweets_data\ntweets_data = []\n\n# Open connection to file\ntweets_file = open(tweets_data_path,  r )\n\n# Read in tweets and store in list: tweets_data\nfor line in tweets_file:\n    tweet = json.loads(line)\n    tweets_data.append(tweet)\n\n# Close connection to file\ntweets_file.close()\n\n# Print the keys of the first tweet dict\nprint(tweets_data[0].keys())  Send the Twitter data to DataFrame   Twitter data in a list of dictionaries  tweets_data , where each dictionary corresponds to a single tweet.   The text in a tweet  t1  is stored as the value  t1['text'] ; similarly, the language is stored in  t1['lang'] .   Code:   # Import package\nimport pandas as pd\n\n# Build DataFrame of tweet texts and languages\ndf = pd.DataFrame(tweets_data, columns=['text', 'lang'])\n\n# Print head of DataFrame\nprint(df.head())  Analyze the tweets (NLP, regex)   A little bit of Twitter text analysis and plotting.   Use the statistical data visualization library seaborn: https://stanford.edu/%7Emwaskom/software/seaborn/  Code:   # Import the regular expressions library\nimport re\n\n# The function tells you whether the first argument (a word) occurs within the 2nd argument (a tweet)\ndef word_in_text(word, tweet):\n    word = word.lower()\n    text = tweet.lower()\n    match = re.search(word, tweet)\n\n    if match:\n        return True\n    return False\n\n# Initialize list to store tweet counts\n[clinton, trump, sanders, cruz] = [0, 0, 0, 0]\n\n# Iterate through df, counting the number of tweets in which\n# each candidate is mentioned\nfor index, row in df.iterrows():\n    clinton += word_in_text('clinton', row['text'])\n    trump += word_in_text('trump', row['text'])\n    sanders += word_in_text('sanders', row['text'])\n    cruz += word_in_text('cruz', row['text'])\n\n# Import packages\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set seaborn style\nsns.set(color_codes=True)\n\n# Create a list of labels:cd\ncd = ['clinton', 'trump', 'sanders', 'cruz']\n\n# Plot histogram\nax = sns.barplot(cd, [clinton, trump, sanders, cruz])\nax.set(ylabel= count )\nplt.show()  from IPython.display import Image\n# for the following pictures...  Image('tweets_figure.png')", 
            "title": "5, Introduction to APIs and JSONs"
        }, 
        {
            "location": "/DataCamp Python 3 for Data Science/", 
            "text": "CONTENT\n\n\n1, Introduction\n\n\nBasic operations\n\n\nConcatenating, help, printing, listing\n\n\nNumPy: arrays\n\n\n\n\n\n\n2, Intermediate\n\n\nPlotting basics\n\n\nA plotting project: Gapminder\n\n\nPandas: data frame\n\n\nLooping\n\n\nA NumPy project: random walk \n Monte Carlo simulation\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the courses (Introduction and Intermediate). Python 3. From DataCamp.\n\n\n\n\n1, Introduction\n\n\nBasic operations\n\n\nPrint is a function\n\n\n\n\nIn Python 3:\n\n\n\n\nprint()\n\n\n\n\n\n\nWhile in Python 2:\n\n\n\n\nprint \ntest\n\nprint \n-\n * 25\nprint 10\nprint 5 + 5\nprint variable\nprint function()\n\n\n\n\nprint(\nPython 3.x\n)\n\n\n\n\nPython 3.x\n\n\n\n\n\nAddition and subtraction.\n\n\n\n\nprint(5 + 5)\nprint(5 - 5)\n\n\n\n\n10\n0\n\n\n\n\n\nMultiplication and division.\n\n\n\n\nprint(3 * 5)\nprint(10 / 2)\n\n\n\n\n15\n5.0\n\n\n\n\n\nExponentiation.\n\n\n\n\nprint(4 ** 2)\n\n\n\n\n16\n\n\n\n\n\nModulo.\n\n\n\n\nprint(18 % 7)\n\n\n\n\n4\n\n\n\n\n\nHow much is your $100 worth after 7 years?\n\n\n\n\nprint(100 * ((1 + 0.10)**7))\n\n\n\n\n194.87171000000012\n\n\n\n# Create a variable savings\nsavings = 100\n\n# Create a variable factor\nfactor = 1.10\n\n# Calculate result\nresult = savings * factor ** 7\n\n# Print out result\nprint(result)\n\n\n\n\n194.87171000000012\n\n\n\n\n\nSeveral variables to experiment with.\n\n\n\n\nsavings = 100\nfactor = 1.10\ndesc = \ncompound interest\n\n\n# Assign product of factor and savings to year1\nyear1 = savings * factor\n\n# Print the type of year1\nprint(type(year1))\n\n\n\n\nclass 'float'\n\n\n\n\n# Assign sum of  desc and  desc to doubledesc.\ndoubledesc = desc + desc\n\n# Print out doubledesc\nprint(doubledesc)\n\n\n\n\ncompound interestcompound interest\n\n\n\n# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\nprint(result)\n\n\n\n\n194.87171000000012\n\n\n\nConcatenating, help, printing, listing\n\n\nConcatenation\n\n\nprint(\nI started with $\n + str(savings) + \n and now have $\n + str(result) + \n. Awesome!\n)\n\n\n\n\nI started with $100 and now have $194.87171000000012. Awesome!\n\n\n\n# Definition of pi_string\npi_string = \n3.1415926\n\n\n# Convert pi_string into float: pi_float\npi_float = float(pi_string)\nprint(pi_float)\n\n\n\n\n3.1415926\n\n\n\nHelp\n\n\n# Inline\nhelp(max)\n\n\n\n\nHelp on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -\n value\n    max(arg1, arg2, *args, *[, key=func]) -\n value\n\n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.\n\n\n\n# Offline\n?max\n\n\n\n\nContiguous printing\n\n\n horizontal, print\n\n\n# Print out room and room_up\nprint('room'); print('room_up')\n\n\n\n\nroom\nroom_up\n\n\n\nIndex\n\n\n# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Print out the index of the element 20.0\nprint(areas.index(20.0))\n\n\n\n\n2\n\n\n\n# Create list baseball \nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Print out the first and last elements\nprint(baseball[1]); print(baseball[-1])\n\n\n\n\n215\n200\n\n\n\nNumPy: arrays\n\n\n\n\nAn overview with an simple array.\n\n\nImport the \nnumpy\n package as \nnp\n.\n\n\n\n\nimport numpy as np\n\n\n\n\n\n\nCreate a Numpy array from \nbaseball\n: \nnp_baseball\n.\n\n\nTransform a list into an array.\n\n\n\n\nnp_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))\n\n\n\n\nclass 'numpy.ndarray'\n\n\n\n\n\n\nAgain.\n\n\n\n\n# Height list\nheight = [68, 78, 76, 80, 75, 79, 78, 80]\nweight = baseball\n\n# Create array from height with correct units: np_height_m\nnp_height_m = np.array(height) * 0.0254\n\n# Create array from weight with correct units: np_weight_kg \nnp_weight_kg = np.array(weight) * 0.453592\n\n# Calculate the BMI: bmi\nbmi = np_weight_kg / (np_height_m ** 2)\n\n# Print out bmi\nprint(bmi)\n\n\n\n\n[ 27.36860318  24.84546948  25.56171941  23.06945176  23.49812856\n  19.82697406  24.15210754  21.97090644]\n\n\n\n# Store weight and height lists as numpy arrays\nnp_weight = np.array(weight)\nnp_height = np.array(height)\n\n# Print out the weight at index 5\nprint(np_weight[5])\n\n# Print out sub-array of np_height: index 100 up to and including index 110\nprint(np_height[1:2])\n\n\n\n\n176\n[78]\n\n\n\nList to array\n\n\n\n\nA list in an array is a 2D array or a tabular array.\n\n\n\n\n 2 dimension, 2d, 2-d\n\n\n# Create baseball, a list of lists\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\n\n\n\n\n# Create a Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)\n\n# Print out the 4th row of np_baseball\nprint(np_baseball[3,:])\n\n# Select the entire second column of np_baseball: np_weight\nnp_weight = np_baseball[:,1]\n\n# Print out height of 4th player\nprint(np_baseball[3,0])\n\n\n\n\nclass 'numpy.ndarray'\n\n(4, 2)\n[ 188.    75.2]\n188.0\n\n\n\n# Create np_height from np_baseball\nnp_height = np_baseball[:,1]\n\n# Print out the mean of np_height\nprint(np.mean(np_height))\n\n# Print out the median of np_height\nprint(np.median(np_height))\n\n\n\n\n88.7\n88.45\n\n\n\n# Print mean weight\navg = np.mean(np_baseball[:,0])\nprint(\nAverage: \n + str(avg))\n\n# Print median weight. Replace 'None'\nmed = np.median(np_baseball[:,0])\nprint(\nMedian: \n + str(med))\n\n# Print out the standard deviation on weight. Replace 'None'\nstddev = np.std(np_baseball[:,0])\nprint(\nStandard Deviation: \n + str(stddev))\n\n\n\n\nAverage: 198.25\nMedian: 199.0\nStandard Deviation: 14.6351460533\n\n\n\n# Print out correlation between first and second column. Replace 'None'\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint(\nCorrelation: \n + str(corr))\n\n\n\n\nCorrelation: [[ 1.          0.95865738]\n [ 0.95865738  1.        ]]\n\n\n\nArrays and logicals\n\n\n# Create the arrays\nmy_house = np.array([18.0, 20.0, 10.75, 9.50])\nyour_house = np.array([14.0, 24.0, 14.25, 9.0])\n\n\n\n\n# Which areas in my_house are greater than or equal to 18\nprint(my_house \n= 18)\n\n# compare two Numpy arrays element-wise\n# which areas in my_house are smaller than the ones in your_house\nprint(my_house[my_house \n your_house])\n\n\n\n\n[ True  True False False]\n[ 20.    10.75]\n\n\n\n# np.logical_and(), np.logical_or() and np.logical_not()\n\n# my_house greater than 18.5 or smaller than 10\nprint(np.logical_or(my_house \n 18.5, my_house \n 10))\n\n# Both my_house and your_house smaller than 11\nprint(np.logical_and(my_house \n 11, your_house \n 11))\n\n\n\n\n[False  True False  True]\n[False False False  True]\n\n\n\n2, Intermediate\n\n\nPlotting basics\n\n\n\n\nIn this section, we use the \nmatplolib\n package for plotting and charting.\n\n\nIn IPython, the package is \nstacked\n with the \nnumpy\n packages and other scientific packages under the magic command \n%pylab\n. \n\n\nCalling \n%pylab\n is calling the entire scientific stack or Scipy Stack.\n\n\n\n\nLine plot\n\n\nyear = [1950, 1970, 1990, 2010]\npop = [2.519, 3.692, 5.263, 6.972]\n\n# Print the last item from year and pop\nprint(year[-1])\nprint(pop[-1])\n\n\n\n\n2010\n6.972\n\n\n\n% pylab inline\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\nWith \ninline\n, graphics will be printed within the notebook as opposed to being printed in another window (a new window which pops open).\n\n\n\n\n# Make a line plot: year on the x-axis, pop on the y-axis\nplt.plot(year, pop)\nplt.show()\n\n\n\n\n\n\nScatter plot\n\n\neco = np.recfromcsv('economic.csv', delimiter=';', names=True, dtype=None)\n\n# gdp_cap, life_exp, pop\ngdp_cap = eco['gdp_cap']\nlife_exp = eco['life_exp']\npop = eco['pop']\n\n\n\n\n# Change the line plot to a scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Put the x-axis on a logarithmic scale\nplt.xscale('log')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n# Build Scatter plot\nplt.scatter(pop, life_exp)\n\n# Show plot\nplt.show()\n\n# There's no clear relationship between population and life expectancy, which makes perfect sense.\n\n\n\n\n\n\nHistograms\n\n\n# Create histogram of life_exp data (bins = 10 by default)\nplt.hist(life_exp)\n\n# Display histogram\nplt.show()\n\n\n\n\n\n\n# Build histogram with 5 bins\nplt.hist(life_exp, bins = 5)\n\n# Show and clean up plot\nplt.show()\nplt.clf() # clean up\n\n# Build histogram with 20 bins\nplt.hist(life_exp, bins = 20)\n\n# Show and clean up again\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\nmatplotlib.figure.Figure at 0x7578cf8\n\n\n\n\nLabel\n\n\n x, y, label\n\n\n# Basic scatter plot, log scale\nplt.scatter(gdp_cap, life_exp)\nplt.xscale('log') \n\n# Strings\nxlab = 'GDP per Capita [in USD]'\nylab = 'Life Expectancy [in years]'\ntitle = 'World Development in 2007'\n\n# Add axis labels\nplt.xlabel(xlab)\nplt.ylabel(ylab)\n\n# Add title\nplt.title(title)\n\n# After customizing, display the plot\nplt.show()\n\n\n\n\n\n\n# Scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\n\n# Definition of tick_val and tick_lab\ntick_val = [1000,10000,100000]\ntick_lab = ['1k','10k','100k']\n\n# Adapt the ticks on the x-axis\nplt.xticks(tick_val, tick_lab)\n\n# After customizing, display the plot\nplt.show()\n\n\n\n\n\n\nA plotting project: Gapminder\n\n\nSize, the 3rd dimension\n\n\n\n\nA little project that emulates \nGapminder\n.\n\n\n\n\n# Store pop as a numpy array: np_pop\nnp_pop = np.array(pop)\n# array([])\n\n# Double np_pop\nnp_pop = np_pop * 2\n\n# Update: set s argument to np_pop\nplt.scatter(gdp_cap, life_exp, s = np_pop) # s = size of the bubble\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\nColors\n\n\n# adding con\ncon = ['red', 'green', 'blue', 'blue', 'yellow', 'black', 'green', 'red', 'red', 'green', 'blue', 'yellow', 'green', 'blue', 'yellow', 'green', 'blue', 'blue', 'red', 'blue', 'yellow', 'blue', 'blue', 'yellow', 'red', 'yellow', 'blue', 'blue', 'blue', 'yellow', 'blue', 'green', 'yellow', 'green', 'green', 'blue', 'yellow', 'yellow', 'blue', 'yellow', 'blue', 'blue', 'blue', 'green', 'green', 'blue', 'blue', 'green', 'blue', 'green', 'yellow', 'blue', 'blue', 'yellow', 'yellow', 'red', 'green', 'green', 'red', 'red', 'red', 'red', 'green', 'red', 'green', 'yellow', 'red', 'red', 'blue', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'red', 'blue', 'blue', 'blue', 'yellow', 'red', 'green', 'blue', 'blue', 'red', 'blue', 'red', 'green', 'black', 'yellow', 'blue', 'blue', 'green', 'red', 'red', 'yellow', 'yellow', 'yellow', 'red', 'green', 'green', 'yellow', 'blue', 'green', 'blue', 'blue', 'red', 'blue', 'green', 'blue', 'red', 'green', 'green', 'blue', 'blue', 'green', 'red', 'blue', 'blue', 'green', 'green', 'red', 'red', 'blue', 'red', 'blue', 'yellow', 'blue', 'green', 'blue', 'green', 'yellow', 'yellow', 'yellow', 'red', 'red', 'red', 'blue', 'blue']\nprint(con)\n\n\n\n\n['red', 'green', 'blue', 'blue', 'yellow', 'black', 'green', 'red', 'red', 'green', 'blue', 'yellow', 'green', 'blue', 'yellow', 'green', 'blue', 'blue', 'red', 'blue', 'yellow', 'blue', 'blue', 'yellow', 'red', 'yellow', 'blue', 'blue', 'blue', 'yellow', 'blue', 'green', 'yellow', 'green', 'green', 'blue', 'yellow', 'yellow', 'blue', 'yellow', 'blue', 'blue', 'blue', 'green', 'green', 'blue', 'blue', 'green', 'blue', 'green', 'yellow', 'blue', 'blue', 'yellow', 'yellow', 'red', 'green', 'green', 'red', 'red', 'red', 'red', 'green', 'red', 'green', 'yellow', 'red', 'red', 'blue', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'red', 'blue', 'blue', 'blue', 'yellow', 'red', 'green', 'blue', 'blue', 'red', 'blue', 'red', 'green', 'black', 'yellow', 'blue', 'blue', 'green', 'red', 'red', 'yellow', 'yellow', 'yellow', 'red', 'green', 'green', 'yellow', 'blue', 'green', 'blue', 'blue', 'red', 'blue', 'green', 'blue', 'red', 'green', 'green', 'blue', 'blue', 'green', 'red', 'blue', 'blue', 'green', 'green', 'red', 'red', 'blue', 'red', 'blue', 'yellow', 'blue', 'green', 'blue', 'green', 'yellow', 'yellow', 'yellow', 'red', 'red', 'red', 'blue', 'blue']\n\n\n\n# The Gapminder data contains a list continent with the continent each country belongs to.\n# A dictionary is constructed that maps continents onto colors:\ndict = {\n    'Asia':'red',\n    'Europe':'green',\n    'Africa':'blue',\n    'Americas':'yellow',\n    'Oceania':'black'\n}\n\n# Specify c and alpha inside plt.scatter()\nplt.scatter(x = gdp_cap, y = life_exp, s = np_pop * 2, c = con, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nAdditional Customizations\n\n\n# Scatter plot\nplt.scatter(x = gdp_cap, y = life_exp, s = np_pop * 2, c = con, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])\n\n# Additional customizations\nplt.text(1550, 71, 'India')\nplt.text(5700, 80, 'China')\n\n# Add grid() call\nplt.grid(True)\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nList\n\n\n# Definition of countries and capital\ncountries = ['spain', 'france', 'germany', 'norway']\ncapitals = ['madrid', 'paris', 'berlin', 'oslo']\n\n# Get index of 'germany': ind_ger\nind_ger = countries.index('germany')\nprint(ind_ger)\n\n# Use ind_ger to print out capital of Germany\nprint(capitals[ind_ger])\n\n\n\n\n2\nberlin\n\n\n\nDictionary\n\n\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }\n\n# Print out the keys in europe\nprint(europe.keys())\n\n# Print out value that belongs to key 'norway'\nprint(europe['norway'])\n\n\n\n\ndict_keys(['france', 'norway', 'spain', 'germany'])\noslo\n\n\n\n# Add italy to europe\neurope['italy'] = 'rome'\n\n# Print out italy in europe\nprint('italy' in europe)\n\n\n\n\nTrue\n\n\n\n# Add italy to europe\neurope['italy'] = 'rome'\n\n# Print out italy in europe\nprint('italy' in europe)\n\n\n\n\nTrue\n\n\n\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'bonn', \n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', \n          'australia':'vienna' }\n\n# Update capital of germany\neurope['germany'] = 'berlin'\n\n# Remove australia\ndel(europe['australia'])\n\n# Print europe\nprint(europe)\n\n\n\n\n{'france': 'paris', 'norway': 'oslo', 'poland': 'warsaw', 'italy': 'rome', 'spain': 'madrid', 'germany': 'berlin'}\n\n\n\n# Dictionary of dictionaries\neurope = { 'spain': { 'capital':'madrid', 'population':46.77 },\n           'france': { 'capital':'paris', 'population':66.03 },\n           'germany': { 'capital':'berlin', 'population':80.62 },\n           'norway': { 'capital':'oslo', 'population':5.084 } }\n\n\n# Print out the capital of France\nprint(europe['france']['capital'])\n\n# Create sub-dictionary data\ndata = {\n    'capital': 'rome',\n    'population': 59.83\n}\n\n# Add data to europe under key 'italy'\neurope['italy'] = data\n\n# Print europe\nprint(europe)\n\n\n\n\nparis\n{'france': {'capital': 'paris', 'population': 66.03}, 'italy': {'capital': 'rome', 'population': 59.83}, 'norway': {'capital': 'oslo', 'population': 5.084}, 'spain': {'capital': 'madrid', 'population': 46.77}, 'germany': {'capital': 'berlin', 'population': 80.62}}\n\n\n\nPandas: data frame\n\n\n\n\nAn Overview.\n\n\nTabular data are rectangular or 2D. Numpy can handle that.\n\n\nBut, Numpy is good with similar data: all str, all float or all integer.\n\n\nPandas is a data frame that can mix diverse data: str, float, and integer.\n\n\nImport the \npandas\n package as \nnp\n.\n\n\n\n\nimport pandas as pd\n\n\n\n\n\n\nStart with pre-defined lists.\n\n\n\n\nnames = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\ndr =  [True, False, False, False, True, True, True]\ncpc = [809, 731, 588, 18, 200, 70, 45]\n\n\n\n\n# Create dictionary my_dict with three key:value pairs: my_dict\nmy_dict = {\n    'country': names,\n    'drives_right': dr,\n    'cars_per_cap': cpc\n}\n\n\n\n\n\n\nBuild DataFrame \ncars\n from \nmy_dict\n: \ncars\n.\n\n\n\n\n convert, dictionary, data frame\n\n\ncars = pd.DataFrame(my_dict)\n\n# Print cars\nprint(cars)\n\n\n\n\n   cars_per_cap        country drives_right\n0           809  United States         True\n1           731      Australia        False\n2           588          Japan        False\n3            18          India        False\n4           200         Russia         True\n5            70        Morocco         True\n6            45          Egypt         True\n\n\n\n\n\nAdd row labels.\n\n\n\n\nrow_labels = ['US', 'AUS', 'JAP', 'IN', 'RU', 'MOR', 'EG']\n\n# Specify row labels of cars\ncars.index = row_labels\n\n# Print cars again\nprint(cars)\n\n\n\n\n     cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\nIN             18          India        False\nRU            200         Russia         True\nMOR            70        Morocco         True\nEG             45          Egypt         True\n\n\n\n\n\nImport data: \ncars.csv\n to create DataFrame \ncars\n.\n\n\n\n\ncars2 = pd.read_csv('cars.csv', sep = ';')\n\n\n\n\nOther parameters: \nindex_col\n, \nheader\n, \ndelimiter\n, \nnames\n, \nindex_col\n.\n\n\n\n\nAbove all, here are a few commands to extract, subset, parse:\n\n\n\n\nmy_array[r, c]\n\nmy_pandas['col'] as a series\nmy_pandas[['col']] as a d.f.\nmy_pandas[['col1', 'col2']]\n\nmy_pandas[1]\nmy_pandas[1:3]\n\nmy_pandas.loc['row'] as a series\nmy_pandas.loc[['row']] as a d.f\nmy_pandas.loc[['row1', 'row2']] \n\nmy_pandas.loc[['col1', 'col2'], ['row1', 'row2']] \nmy_pandas.loc[:, ['row1', 'row2']] \nmy_pandas.loc[['col1', 'col2'], :] \n\nmy_pandas.iloc[1] as a series\nmy_pandas.iloc[[1]] as a d.f\nmy_pandas.iloc[[1,2]] \n\nmy_pandas.iloc[[1, 2], [1, 2]] \nmy_pandas.iloc[:, [1, 2]] \nmy_pandas.iloc[[1, 2], :]\n\n\n\n\n\n\nApply these commands.\n\n\n\n\n# Print out country column as Pandas Series\nprint(cars2['country'])\n\n# Print out country column as Pandas DataFrame\nprint(cars2[['country']])\n\n# Print out DataFrame with country and drives_right columns\nprint(cars2[['country', 'drives_right']])\n\n\n\n\n0    United States\n1        Australia\n2            Japan\n3            India\n4           Russia\n5          Morocco\n6            Egypt\nName: country, dtype: object\n         country\n0  United States\n1      Australia\n2          Japan\n3          India\n4         Russia\n5        Morocco\n6          Egypt\n         country drives_right\n0  United States         True\n1      Australia        False\n2          Japan        False\n3          India        False\n4         Russia         True\n5        Morocco         True\n6          Egypt         True\n\n\n\n# Print out first 3 observations\nprint(cars[0:3])\n\n# Print out fourth, fifth and sixth observation\nprint(cars[3:6])\n\n\n\n\n     cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\n     cars_per_cap  country drives_right\nIN             18    India        False\nRU            200   Russia         True\nMOR            70  Morocco         True\n\n\n\n# Print out observation for Japan\nprint(cars.loc[['JAP']])\n\n# Print out observations for Australia and Egypt\nprint(cars.loc[['AUS', 'EG']])\n\n\n\n\n     cars_per_cap country drives_right\nJAP           588   Japan        False\n     cars_per_cap    country drives_right\nAUS           731  Australia        False\nEG             45      Egypt         True\n\n\n\n# Print out drives_right value of Morocco\nprint(cars.loc[['MOR'], ['drives_right']])\n\n# Print sub-DataFrame\nprint(cars.loc[['RU', 'MOR'], ['country', 'drives_right']])\n\n\n\n\n    drives_right\nMOR         True\n     country drives_right\nRU    Russia         True\nMOR  Morocco         True\n\n\n\n# Print out drives_right column as Series\nprint(cars.loc[:,'drives_right'])\n\n# Print out drives_right column as DataFrame\nprint(cars.loc[:,['drives_right']])\n\n# Print out car;, s_per_cap and drives_right as DataFrame\nprint(cars.loc[:, ['cars_per_cap', 'drives_right']])\n\n\n\n\nUS      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool\n    drives_right\nUS          True\nAUS        False\nJAP        False\nIN         False\nRU          True\nMOR         True\nEG          True\n     cars_per_cap drives_right\nUS            809         True\nAUS           731        False\nJAP           588        False\nIN             18        False\nRU            200         True\nMOR            70         True\nEG             45         True\n\n\n\n\n\nA series is \n[]\n.\n\n\nA data frame is \n[[]]\n.\n\n\n\n\n# Extract drives_right column as Series: dr\ndr = cars.loc[:,'drives_right'] # or cars['drives_right']\n\n# cars.iloc[:,2]\nprint(dr)\n\n\n\n\nUS      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool\n\n\n\n\n\nUse \ndr\n, a boolean series, to subset (row job) \ncars\n.\n\n\n\n\n# dr will extract the True (1) rows\nsel = cars[dr]\n\n# Or, convert code to a one-liner\nsel = cars[cars['drives_right'] == True]\n\n# Print sel\nprint(sel)\n\n\n\n\n     cars_per_cap        country drives_right\nUS            809  United States         True\nRU            200         Russia         True\nMOR            70        Morocco         True\nEG             45          Egypt         True\n\n\n\n# Create series car_maniac: observations that have a cars_per_cap over 500\ncpc = cars.loc[:, 'cars_per_cap']\nmany_cars = cpc \n 500\ncar_maniac = cars[many_cars]\n\n# Print car_maniac\nprint(car_maniac)\n\n\n\n\n     cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\n\n\n\n# Create medium: observations with cars_per_cap between 100 and 500\ncpc = cars.loc[:,'cars_per_cap']\nbetween = np.logical_and(cpc \n 100, cpc \n 500) # Numpy\nmedium = cars[between]\n\n# Print medium\nprint(medium)\n\n\n\n\n    cars_per_cap country drives_right\nRU           200  Russia         True\n\n\n\nLooping\n\n\nLoops\n\n\n# areas list\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n\n\n\n\n\nChange for-loop to use \nenumerate()\n.\n\n\n\n\n enumerate\n\n\nfor index, a in enumerate(areas) :\n    print(\nroom \n + str(index) + \n: \n + str(a))\n\n\n\n\nroom 0: 11.25\nroom 1: 18.0\nroom 2: 20.0\nroom 3: 10.75\nroom 4: 9.5\n\n\n\n\n\nAnother loop.\n\n\n\n\n# house list of lists\nhouse = [[\nhallway\n, 11.25], \n         [\nkitchen\n, 18.0], \n         [\nliving room\n, 20.0], \n         [\nbedroom\n, 10.75], \n         [\nbathroom\n, 9.50]]\n\n\n\n\n# Build a for-loop from scratch\nfor room in house:\n    print(\nthe \n + room[0].capitalize() + \n is \n + str(room[1]) + \n sqm\n)\n\n\n\n\nthe Hallway is 11.25 sqm\nthe Kitchen is 18.0 sqm\nthe Living room is 20.0 sqm\nthe Bedroom is 10.75 sqm\nthe Bathroom is 9.5 sqm\n\n\n\n\n\nAnother loop.\n\n\n\n\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'bonn', \n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'australia':'vienna' }\n\n\n\n\n# Iterate over europe\nfor country, capital in europe.items():\n    print(\nthe capital of \n + str(country) + \n is \n + str(capital)) \n\n\n\n\nthe capital of australia is vienna\nthe capital of france is paris\nthe capital of norway is oslo\nthe capital of poland is warsaw\nthe capital of italy is rome\nthe capital of spain is madrid\nthe capital of germany is bonn\n\n\n\nLoop over a NumPy array\n\n\n\n\n\n\nIf you\nre dealing with a 1D Numpy array, looping over all elements can be as simple as: \nfor x in my_array : ...\n\n\n\n\n\n\nIf you\nre dealing with a 2D Numpy array, it\ns more complicated. \n\n\n\n\nA 2D array is built up of multiple 1D arrays. \n\n\n\n\nTo explicitly iterate over all separate elements of a multi-dimensional array, you\nll need this syntax: \nfor x in np.nditer(my_array) : ...\n\n\n\n\n\n\nTwo Numpy arrays that you might recognize from the intro course are available in your Python session: np_height, a Numpy array containing the heights of Major League Baseball players, and np_baseball, a 2D Numpy array that contains both the heights (first column) and weights (second column) of those players.\n\n\n\n\n\n\nLoop over a Pandas data frame\n\n\n\n\nIterating over a Pandas DataFrame is typically done with the iterrows() method. \n\n\nUsed in a for loop, every observation is iterated over and on every iteration the row label and actual row contents are available: \nfor lab, row in brics.iterrows() : ...\n\n\nIn this and the following exercises you will be working on the cars DataFrame. \n\n\nIt contains information on the cars per capita and whether people drive right or left for seven countries in the world.\n\n\n\n\n# Iterate over rows of cars\nfor lab, row in cars.iterrows():\n    print(lab) # row label\n    print(row) # row content\n\n\n\n\nUS\ncars_per_cap              809\ncountry         United States\ndrives_right             True\nName: US, dtype: object\nAUS\ncars_per_cap          731\ncountry         Australia\ndrives_right        False\nName: AUS, dtype: object\nJAP\ncars_per_cap      588\ncountry         Japan\ndrives_right    False\nName: JAP, dtype: object\nIN\ncars_per_cap       18\ncountry         India\ndrives_right    False\nName: IN, dtype: object\nRU\ncars_per_cap       200\ncountry         Russia\ndrives_right      True\nName: RU, dtype: object\nMOR\ncars_per_cap         70\ncountry         Morocco\ndrives_right       True\nName: MOR, dtype: object\nEG\ncars_per_cap       45\ncountry         Egypt\ndrives_right     True\nName: EG, dtype: object\n\n\n\n# Adapt the for-loop\nfor lab, row in cars.iterrows() :\n    print(str(lab) + \n: \n + str(row['cars_per_cap']))\n\n\n\n\n\n\nCode a for-loop that adds the \nCOUNTRY\n column with uppercase version of the \ncountry\n names in the \ncountry\n column.\n\n\n\n\nfor lab, row in cars.iterrows():\n    cars.loc[lab, \nCOUNTRY\n] = (row[\ncountry\n].upper())\n\n# Print cars\nprint(cars)\n\n\n\n\n     cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT\n\n\n\n\n\nReplace the for-loop with a one-liner that uses \n.apply(str.upper)\n. \n\n\nThe call should give the same result: a column \nCOUNTRY\nshould be added to cars, containing an uppercase version of the country names.\n\n\n\n\ncars[\nCOUNTRY\n] = cars[\ncountry\n].apply(str.upper)\nprint(cars)\n\n\n\n\n     cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT\n\n\n\nA NumPy project: random walk \n Monte Carlo simulation\n\n\n# Set the seed\nnp.random.seed(123)\n\n# Generate and print random float between 0 and 1\nprint(np.random.rand())\n\n\n\n\n0.6964691855978616\n\n\n\n# Use randint() to simulate a dice (1,2,3,4,5,6)\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\n\n\n\n\n5\n3\n2\n4\n3\n4\n2\n\n\n\n\n\nBuild a random walk.\n\n\n\n\n# Starting step\nstep = 50\n\n# Roll the dice\ndice = np.random.randint(1,7)\n\n# Finish the control construct\n'''\nIf dice is 1 or 2, you go one step down.\nif dice is 3, 4 or 5, you go one step up.\nElse, you throw the dice again. The number of eyes is the number of steps you go up.\n'''\nif dice \n= 2 :\n    step = step - 1\nelif dice \n= 5 :\n    step = step + 1\nelse :\n    step = step + np.random.randint(1,7)\n\n# Print out dice and step\nprint(dice), print(step)\n\n\n\n\n2\n49\n\n(None, None)\n\n\n\noutcomes = []\n\nfor x in range(10) :\n    coin = np.random.randint(0, 2)\nif coin == 0 :\n    outcomes.append(\nheads\n)\nelse :\n    outcomes.append(\ntails\n)\n\nprint(outcomes)\n\n\n\n\n['tails']\n\n\n\ntails = [0]\n\nfor x in range(10) :\n    coin = np.random.randint(0, 2)\n\n    tails.append(coin)\n\nprint(tails)\n\n\n\n\n[0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1]\n\n\n\n\n\nInitialize \nrandom_walk\n.\n\n\n\n\nrandom_walk = [0]\n\n# Complete the ___\nfor x in range(100) :\n    # Set step: last element in random_walk\n    step = random_walk[-1]\n\n    # Roll the dice\n    dice = np.random.randint(1,7)\n\n    # Determine next step\n    if dice \n= 2:\n        step = max(0, step - 1) # make sure that 'step' never goes below 0 when you decrease it\n    elif dice \n= 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    # append next_step to random_walk\n    random_walk.append(step)\n\n# Print random_walk\nprint(random_walk)\n\n\n\n\n[0, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 10, 12, 11, 12, 13, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 19, 21, 20, 19, 20, 21, 20, 22, 23, 24, 25, 26, 27, 28, 27, 28, 29, 34, 35, 34, 33, 32, 31, 32, 33, 34, 39, 40, 39, 40, 41, 42, 43, 44, 45, 44, 43, 44, 43, 49, 48, 49, 48, 49, 48, 49, 53, 57, 59, 61, 60, 61, 63, 62, 68, 69, 71, 72, 71, 72, 73, 74, 73, 74, 75, 76, 78, 77, 76, 77, 83, 88, 87, 86]\n\n\n\n\n\nPlot \nrandom_walk\n.\n\n\n\n\nplt.plot(range(101), random_walk)\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\nBuild a Monte Carlo as an alternative.\n\n\n\n\n# Initialize all_walks\nall_walks = []\n\n# Simulate random walk 10 times\nfor i in range(10) :\n\n    # Code from before\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n\n        if dice \n= 2:\n            step = max(0, step - 1)\n        elif dice \n= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n\n    # Append random_walk to all_walks\n    all_walks.append(random_walk) \n\n# Print all_walks\nprint(all_walks)\n\n\n\n\n[[0, 4, 5, 6, 7, 9, 8, 9, 8, 9, 8, 7, 13, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 20, 19, 18, 19, 18, 19, 18, 19, 20, 24, 25, 24, 30, 29, 28, 29, 28, 27, 28, 27, 31, 30, 31, 30, 31, 30, 31, 33, 32, 31, 30, 31, 30, 35, 36, 37, 36, 35, 36, 35, 36, 35, 40, 41, 40, 39, 38, 37, 38, 39, 43, 49, 50, 51, 52, 53, 52, 53, 55, 56, 57, 58, 57, 56, 57, 56, 57, 58, 59, 58, 59, 60, 61, 60, 59, 60, 61, 66], [0, 1, 2, 7, 6, 7, 6, 7, 8, 9, 10, 9, 15, 14, 15, 14, 13, 14, 18, 19, 20, 21, 22, 21, 20, 19, 18, 17, 18, 19, 20, 21, 22, 23, 22, 23, 24, 23, 24, 25, 28, 27, 28, 27, 28, 31, 32, 33, 34, 33, 32, 35, 36, 37, 38, 37, 36, 37, 40, 41, 46, 47, 46, 47, 46, 47, 46, 52, 51, 50, 51, 53, 52, 51, 50, 51, 52, 53, 54, 58, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 74, 73, 74, 75, 74, 80, 79, 80, 81, 80], [0, 0, 1, 0, 0, 6, 5, 4, 5, 6, 5, 4, 3, 2, 3, 9, 10, 13, 14, 20, 21, 22, 28, 27, 33, 32, 33, 34, 35, 34, 40, 41, 40, 41, 40, 41, 40, 41, 40, 41, 45, 46, 48, 47, 48, 47, 46, 47, 46, 47, 46, 50, 54, 53, 52, 51, 52, 53, 57, 58, 59, 63, 62, 61, 60, 61, 62, 64, 63, 62, 63, 64, 66, 69, 74, 75, 74, 75, 76, 77, 78, 79, 78, 79, 80, 86, 85, 90, 89, 93, 92, 96, 95, 98, 99, 98, 99, 105, 104, 103, 102], [0, 4, 3, 2, 3, 4, 3, 4, 5, 6, 7, 6, 5, 4, 5, 4, 3, 7, 8, 10, 14, 20, 19, 18, 19, 20, 21, 20, 21, 20, 21, 22, 21, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 35, 38, 39, 38, 37, 38, 39, 40, 39, 38, 37, 36, 37, 38, 39, 40, 41, 42, 43, 42, 43, 44, 46, 45, 46, 47, 50, 52, 53, 52, 51, 50, 49, 48, 49, 48, 49, 51, 52, 53, 52, 53, 52, 51, 52, 51, 50, 49, 50, 49, 48, 49, 50, 51, 53, 54], [0, 1, 0, 0, 1, 7, 6, 7, 8, 13, 12, 13, 12, 13, 14, 13, 14, 15, 21, 22, 23, 24, 23, 25, 26, 27, 28, 27, 28, 29, 30, 31, 30, 31, 30, 31, 32, 31, 32, 36, 37, 40, 41, 45, 46, 45, 46, 47, 46, 45, 50, 51, 52, 51, 50, 51, 52, 53, 52, 56, 55, 56, 57, 58, 59, 60, 61, 62, 61, 60, 59, 60, 61, 65, 66, 65, 66, 67, 66, 72, 73, 74, 75, 74, 75, 76, 79, 78, 79, 78, 77, 76, 77, 78, 80, 81, 82, 86, 87, 86, 85], [0, 1, 2, 1, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 4, 5, 4, 3, 2, 3, 4, 5, 6, 7, 12, 16, 15, 16, 15, 14, 13, 14, 13, 14, 15, 14, 18, 19, 18, 19, 18, 17, 18, 17, 21, 22, 23, 24, 25, 26, 25, 26, 27, 28, 29, 30, 29, 34, 35, 36, 35, 36, 35, 36, 37, 36, 37, 42, 43, 44, 43, 44, 45, 46, 45, 46, 45, 46, 47, 46, 45, 44, 45, 46, 45, 44, 43, 44, 48, 49, 50, 51, 52, 53, 52, 53, 54, 53, 54, 59, 60], [0, 0, 0, 1, 0, 0, 0, 4, 5, 6, 7, 6, 7, 8, 9, 10, 11, 10, 9, 12, 11, 10, 9, 8, 9, 15, 16, 15, 16, 17, 16, 15, 16, 17, 18, 17, 21, 22, 21, 23, 24, 23, 24, 25, 26, 27, 28, 29, 28, 27, 28, 29, 28, 29, 30, 29, 28, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 39, 40, 41, 42, 43, 44, 43, 42, 48, 49, 50, 49, 48, 47, 51, 52, 56, 55, 61, 62, 63, 67, 68, 67, 66, 67, 68, 69, 70, 69, 75, 76, 75], [0, 4, 5, 4, 5, 4, 10, 16, 17, 16, 17, 18, 19, 20, 21, 20, 23, 22, 24, 25, 31, 30, 31, 32, 31, 30, 31, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 43, 44, 45, 46, 45, 44, 43, 44, 43, 47, 46, 45, 46, 48, 49, 54, 53, 54, 55, 59, 58, 59, 60, 59, 58, 59, 60, 61, 60, 59, 58, 59, 58, 57, 58, 57, 56, 55, 56, 57, 56, 55, 54, 55, 56, 57, 56, 55, 56, 57, 58, 59, 58, 59, 58, 59, 60, 61, 62], [0, 1, 6, 11, 10, 11, 12, 11, 12, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 18, 19, 20, 21, 20, 19, 18, 20, 21, 22, 21, 20, 19, 20, 21, 22, 21, 20, 21, 24, 29, 32, 33, 34, 40, 41, 42, 43, 42, 44, 49, 50, 51, 52, 53, 54, 55, 54, 55, 56, 57, 58, 59, 61, 65, 66, 67, 68, 69, 73, 78, 77, 76, 75, 74, 77, 78, 79, 80, 79, 78, 81, 82, 81, 80, 79, 80, 81, 82, 83, 82, 83, 82, 83, 84, 83, 84, 85, 86, 87, 88, 89], [0, 1, 0, 0, 1, 2, 5, 6, 5, 4, 5, 6, 7, 12, 11, 10, 9, 8, 7, 6, 7, 6, 5, 6, 9, 8, 7, 8, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 26, 27, 28, 29, 30, 31, 30, 29, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 43, 42, 41, 40, 39, 40, 41, 42, 41, 40, 39, 38, 37, 36, 37, 41, 45, 46, 47, 46, 45, 46, 47, 48, 54, 55, 54, 53, 54, 53, 54, 53, 54, 55, 54, 55, 54, 53, 54, 55, 54, 55, 54]]\n\n\n\nall_walks = []\nfor i in range(10) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice \n= 2:\n            step = max(0, step - 1)\n        elif dice \n= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Convert all_walks to Numpy array: np_aw\n# all_walks is a list of 10 lists\nnp_aw = np.array(all_walks)\n# np_aw is an array of 10 horizontal vectors (a matrix...)\n\n# Plot np_aw and show\nplt.plot(np_aw)\nplt.show()\n\n\n\n\n\n\n\n\nNow every row in \nnp_all_walks\n represents the position after 1 throw (of dice) for the 10 random walks.\n\n\n\n\n# Clear the figure\nplt.clf()\n\n# Transpose np_aw: np_aw_t\nnp_aw_t = np.transpose(np_aw)\n\n# Plot np_aw_t and show\nplt.plot(np_aw_t)\nplt.show()\n\n\n\n\n\n\n\n\n10 randoms walks from 0 to 100 (the dice only had 6 possibilities).\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(123)\nall_walks = []\n\n# Simulate random walk 250 times\nfor i in range(250) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice \n= 2:\n            step = max(0, step - 1)\n        elif dice \n= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n\n        # Implement clumsiness\n        # if a random float is less or equal to 0.001\n        # randint = integer\n        # rand = float\n        if np.random.rand() \n= 0.001 :\n            step = 0\n\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\nplt.plot(np_aw_t)\nplt.show()\n\n\n\n\n\n\n\n\nWhat are the odds that you\nll reach 60 steps high on the Empire State Building? \n\n\nBasically, you want to know about the end points of all the random walks you\nve simulated. \n\n\nThese end points have a certain distribution that you can visualize with a histogram.\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(123)\nall_walks = []\n\n# Simulate random walk 1000 times\nfor i in range(1000) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice \n= 2:\n            step = max(0, step - 1)\n        elif dice \n= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        if np.random.rand() \n= 0.001 :\n            step = 0\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\n\n# Select last row from np_aw_t: ends\nends = np_aw_t[-1]\n\n# Plot histogram of ends, display plot\nplt.hist(ends)\nplt.show()\n\n\n\n\n\n\n\n\nThe histogram of the previous exercise was created from a Numpy array \nends\n, that contains 1,000 integers. \n\n\nEach integer represents the end point of a random walk. \n\n\nTo calculate the change that this end point is higher than or equal to 60, you can count the number of integers in ends that are greater than or equal to 60 and divide that number by 1000, the total number of simulations.\n\n\nWell then, what\ns the estimated chance that you\nll reach 60 steps high if you play this Empire State Building game? \n\n\nThe \nends\n array is everything you need.\n\n\n\n\nsum(ends \n= 60) / 1000\n\n# 78.8%\n\n\n\n\n0.78800000000000003", 
            "title": "DataCamp Python 3 for Data Science"
        }, 
        {
            "location": "/DataCamp Python 3 for Data Science/#basic-operations", 
            "text": "Print is a function   In Python 3:   print()   While in Python 2:   print  test \nprint  -  * 25\nprint 10\nprint 5 + 5\nprint variable\nprint function()  print( Python 3.x )  Python 3.x   Addition and subtraction.   print(5 + 5)\nprint(5 - 5)  10\n0   Multiplication and division.   print(3 * 5)\nprint(10 / 2)  15\n5.0   Exponentiation.   print(4 ** 2)  16   Modulo.   print(18 % 7)  4   How much is your $100 worth after 7 years?   print(100 * ((1 + 0.10)**7))  194.87171000000012  # Create a variable savings\nsavings = 100\n\n# Create a variable factor\nfactor = 1.10\n\n# Calculate result\nresult = savings * factor ** 7\n\n# Print out result\nprint(result)  194.87171000000012   Several variables to experiment with.   savings = 100\nfactor = 1.10\ndesc =  compound interest \n\n# Assign product of factor and savings to year1\nyear1 = savings * factor\n\n# Print the type of year1\nprint(type(year1))  class 'float'   # Assign sum of  desc and  desc to doubledesc.\ndoubledesc = desc + desc\n\n# Print out doubledesc\nprint(doubledesc)  compound interestcompound interest  # Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\nprint(result)  194.87171000000012", 
            "title": "Basic operations"
        }, 
        {
            "location": "/DataCamp Python 3 for Data Science/#concatenating-help-printing-listing", 
            "text": "Concatenation  print( I started with $  + str(savings) +   and now have $  + str(result) +  . Awesome! )  I started with $100 and now have $194.87171000000012. Awesome!  # Definition of pi_string\npi_string =  3.1415926 \n\n# Convert pi_string into float: pi_float\npi_float = float(pi_string)\nprint(pi_float)  3.1415926  Help  # Inline\nhelp(max)  Help on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -  value\n    max(arg1, arg2, *args, *[, key=func]) -  value\n\n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.  # Offline\n?max  Contiguous printing   horizontal, print  # Print out room and room_up\nprint('room'); print('room_up')  room\nroom_up  Index  # Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Print out the index of the element 20.0\nprint(areas.index(20.0))  2  # Create list baseball \nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Print out the first and last elements\nprint(baseball[1]); print(baseball[-1])  215\n200", 
            "title": "Concatenating, help, printing, listing"
        }, 
        {
            "location": "/DataCamp Python 3 for Data Science/#numpy-arrays", 
            "text": "An overview with an simple array.  Import the  numpy  package as  np .   import numpy as np   Create a Numpy array from  baseball :  np_baseball .  Transform a list into an array.   np_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))  class 'numpy.ndarray'    Again.   # Height list\nheight = [68, 78, 76, 80, 75, 79, 78, 80]\nweight = baseball\n\n# Create array from height with correct units: np_height_m\nnp_height_m = np.array(height) * 0.0254\n\n# Create array from weight with correct units: np_weight_kg \nnp_weight_kg = np.array(weight) * 0.453592\n\n# Calculate the BMI: bmi\nbmi = np_weight_kg / (np_height_m ** 2)\n\n# Print out bmi\nprint(bmi)  [ 27.36860318  24.84546948  25.56171941  23.06945176  23.49812856\n  19.82697406  24.15210754  21.97090644]  # Store weight and height lists as numpy arrays\nnp_weight = np.array(weight)\nnp_height = np.array(height)\n\n# Print out the weight at index 5\nprint(np_weight[5])\n\n# Print out sub-array of np_height: index 100 up to and including index 110\nprint(np_height[1:2])  176\n[78]  List to array   A list in an array is a 2D array or a tabular array.    2 dimension, 2d, 2-d  # Create baseball, a list of lists\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]  # Create a Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)\n\n# Print out the 4th row of np_baseball\nprint(np_baseball[3,:])\n\n# Select the entire second column of np_baseball: np_weight\nnp_weight = np_baseball[:,1]\n\n# Print out height of 4th player\nprint(np_baseball[3,0])  class 'numpy.ndarray' \n(4, 2)\n[ 188.    75.2]\n188.0  # Create np_height from np_baseball\nnp_height = np_baseball[:,1]\n\n# Print out the mean of np_height\nprint(np.mean(np_height))\n\n# Print out the median of np_height\nprint(np.median(np_height))  88.7\n88.45  # Print mean weight\navg = np.mean(np_baseball[:,0])\nprint( Average:   + str(avg))\n\n# Print median weight. Replace 'None'\nmed = np.median(np_baseball[:,0])\nprint( Median:   + str(med))\n\n# Print out the standard deviation on weight. Replace 'None'\nstddev = np.std(np_baseball[:,0])\nprint( Standard Deviation:   + str(stddev))  Average: 198.25\nMedian: 199.0\nStandard Deviation: 14.6351460533  # Print out correlation between first and second column. Replace 'None'\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint( Correlation:   + str(corr))  Correlation: [[ 1.          0.95865738]\n [ 0.95865738  1.        ]]  Arrays and logicals  # Create the arrays\nmy_house = np.array([18.0, 20.0, 10.75, 9.50])\nyour_house = np.array([14.0, 24.0, 14.25, 9.0])  # Which areas in my_house are greater than or equal to 18\nprint(my_house  = 18)\n\n# compare two Numpy arrays element-wise\n# which areas in my_house are smaller than the ones in your_house\nprint(my_house[my_house   your_house])  [ True  True False False]\n[ 20.    10.75]  # np.logical_and(), np.logical_or() and np.logical_not()\n\n# my_house greater than 18.5 or smaller than 10\nprint(np.logical_or(my_house   18.5, my_house   10))\n\n# Both my_house and your_house smaller than 11\nprint(np.logical_and(my_house   11, your_house   11))  [False  True False  True]\n[False False False  True]", 
            "title": "NumPy: arrays"
        }, 
        {
            "location": "/DataCamp Python 3 for Data Science/#2-intermediate", 
            "text": "", 
            "title": "2, Intermediate"
        }, 
        {
            "location": "/DataCamp Python 3 for Data Science/#plotting-basics", 
            "text": "In this section, we use the  matplolib  package for plotting and charting.  In IPython, the package is  stacked  with the  numpy  packages and other scientific packages under the magic command  %pylab .   Calling  %pylab  is calling the entire scientific stack or Scipy Stack.   Line plot  year = [1950, 1970, 1990, 2010]\npop = [2.519, 3.692, 5.263, 6.972]\n\n# Print the last item from year and pop\nprint(year[-1])\nprint(pop[-1])  2010\n6.972  % pylab inline  Populating the interactive namespace from numpy and matplotlib   With  inline , graphics will be printed within the notebook as opposed to being printed in another window (a new window which pops open).   # Make a line plot: year on the x-axis, pop on the y-axis\nplt.plot(year, pop)\nplt.show()   Scatter plot  eco = np.recfromcsv('economic.csv', delimiter=';', names=True, dtype=None)\n\n# gdp_cap, life_exp, pop\ngdp_cap = eco['gdp_cap']\nlife_exp = eco['life_exp']\npop = eco['pop']  # Change the line plot to a scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Put the x-axis on a logarithmic scale\nplt.xscale('log')\n\n# Show plot\nplt.show()   # Build Scatter plot\nplt.scatter(pop, life_exp)\n\n# Show plot\nplt.show()\n\n# There's no clear relationship between population and life expectancy, which makes perfect sense.   Histograms  # Create histogram of life_exp data (bins = 10 by default)\nplt.hist(life_exp)\n\n# Display histogram\nplt.show()   # Build histogram with 5 bins\nplt.hist(life_exp, bins = 5)\n\n# Show and clean up plot\nplt.show()\nplt.clf() # clean up\n\n# Build histogram with 20 bins\nplt.hist(life_exp, bins = 20)\n\n# Show and clean up again\nplt.show()\nplt.clf()    matplotlib.figure.Figure at 0x7578cf8   Label   x, y, label  # Basic scatter plot, log scale\nplt.scatter(gdp_cap, life_exp)\nplt.xscale('log') \n\n# Strings\nxlab = 'GDP per Capita [in USD]'\nylab = 'Life Expectancy [in years]'\ntitle = 'World Development in 2007'\n\n# Add axis labels\nplt.xlabel(xlab)\nplt.ylabel(ylab)\n\n# Add title\nplt.title(title)\n\n# After customizing, display the plot\nplt.show()   # Scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\n\n# Definition of tick_val and tick_lab\ntick_val = [1000,10000,100000]\ntick_lab = ['1k','10k','100k']\n\n# Adapt the ticks on the x-axis\nplt.xticks(tick_val, tick_lab)\n\n# After customizing, display the plot\nplt.show()", 
            "title": "Plotting basics"
        }, 
        {
            "location": "/DataCamp Python 3 for Data Science/#a-plotting-project-gapminder", 
            "text": "Size, the 3rd dimension   A little project that emulates  Gapminder .   # Store pop as a numpy array: np_pop\nnp_pop = np.array(pop)\n# array([])\n\n# Double np_pop\nnp_pop = np_pop * 2\n\n# Update: set s argument to np_pop\nplt.scatter(gdp_cap, life_exp, s = np_pop) # s = size of the bubble\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])\n\n# Display the plot\nplt.show()   Colors  # adding con\ncon = ['red', 'green', 'blue', 'blue', 'yellow', 'black', 'green', 'red', 'red', 'green', 'blue', 'yellow', 'green', 'blue', 'yellow', 'green', 'blue', 'blue', 'red', 'blue', 'yellow', 'blue', 'blue', 'yellow', 'red', 'yellow', 'blue', 'blue', 'blue', 'yellow', 'blue', 'green', 'yellow', 'green', 'green', 'blue', 'yellow', 'yellow', 'blue', 'yellow', 'blue', 'blue', 'blue', 'green', 'green', 'blue', 'blue', 'green', 'blue', 'green', 'yellow', 'blue', 'blue', 'yellow', 'yellow', 'red', 'green', 'green', 'red', 'red', 'red', 'red', 'green', 'red', 'green', 'yellow', 'red', 'red', 'blue', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'red', 'blue', 'blue', 'blue', 'yellow', 'red', 'green', 'blue', 'blue', 'red', 'blue', 'red', 'green', 'black', 'yellow', 'blue', 'blue', 'green', 'red', 'red', 'yellow', 'yellow', 'yellow', 'red', 'green', 'green', 'yellow', 'blue', 'green', 'blue', 'blue', 'red', 'blue', 'green', 'blue', 'red', 'green', 'green', 'blue', 'blue', 'green', 'red', 'blue', 'blue', 'green', 'green', 'red', 'red', 'blue', 'red', 'blue', 'yellow', 'blue', 'green', 'blue', 'green', 'yellow', 'yellow', 'yellow', 'red', 'red', 'red', 'blue', 'blue']\nprint(con)  ['red', 'green', 'blue', 'blue', 'yellow', 'black', 'green', 'red', 'red', 'green', 'blue', 'yellow', 'green', 'blue', 'yellow', 'green', 'blue', 'blue', 'red', 'blue', 'yellow', 'blue', 'blue', 'yellow', 'red', 'yellow', 'blue', 'blue', 'blue', 'yellow', 'blue', 'green', 'yellow', 'green', 'green', 'blue', 'yellow', 'yellow', 'blue', 'yellow', 'blue', 'blue', 'blue', 'green', 'green', 'blue', 'blue', 'green', 'blue', 'green', 'yellow', 'blue', 'blue', 'yellow', 'yellow', 'red', 'green', 'green', 'red', 'red', 'red', 'red', 'green', 'red', 'green', 'yellow', 'red', 'red', 'blue', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'red', 'blue', 'blue', 'blue', 'yellow', 'red', 'green', 'blue', 'blue', 'red', 'blue', 'red', 'green', 'black', 'yellow', 'blue', 'blue', 'green', 'red', 'red', 'yellow', 'yellow', 'yellow', 'red', 'green', 'green', 'yellow', 'blue', 'green', 'blue', 'blue', 'red', 'blue', 'green', 'blue', 'red', 'green', 'green', 'blue', 'blue', 'green', 'red', 'blue', 'blue', 'green', 'green', 'red', 'red', 'blue', 'red', 'blue', 'yellow', 'blue', 'green', 'blue', 'green', 'yellow', 'yellow', 'yellow', 'red', 'red', 'red', 'blue', 'blue']  # The Gapminder data contains a list continent with the continent each country belongs to.\n# A dictionary is constructed that maps continents onto colors:\ndict = {\n    'Asia':'red',\n    'Europe':'green',\n    'Africa':'blue',\n    'Americas':'yellow',\n    'Oceania':'black'\n}\n\n# Specify c and alpha inside plt.scatter()\nplt.scatter(x = gdp_cap, y = life_exp, s = np_pop * 2, c = con, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])\n\n# Show the plot\nplt.show()   Additional Customizations  # Scatter plot\nplt.scatter(x = gdp_cap, y = life_exp, s = np_pop * 2, c = con, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])\n\n# Additional customizations\nplt.text(1550, 71, 'India')\nplt.text(5700, 80, 'China')\n\n# Add grid() call\nplt.grid(True)\n\n# Show the plot\nplt.show()   List  # Definition of countries and capital\ncountries = ['spain', 'france', 'germany', 'norway']\ncapitals = ['madrid', 'paris', 'berlin', 'oslo']\n\n# Get index of 'germany': ind_ger\nind_ger = countries.index('germany')\nprint(ind_ger)\n\n# Use ind_ger to print out capital of Germany\nprint(capitals[ind_ger])  2\nberlin  Dictionary  # Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }\n\n# Print out the keys in europe\nprint(europe.keys())\n\n# Print out value that belongs to key 'norway'\nprint(europe['norway'])  dict_keys(['france', 'norway', 'spain', 'germany'])\noslo  # Add italy to europe\neurope['italy'] = 'rome'\n\n# Print out italy in europe\nprint('italy' in europe)  True  # Add italy to europe\neurope['italy'] = 'rome'\n\n# Print out italy in europe\nprint('italy' in europe)  True  # Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'bonn', \n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', \n          'australia':'vienna' }\n\n# Update capital of germany\neurope['germany'] = 'berlin'\n\n# Remove australia\ndel(europe['australia'])\n\n# Print europe\nprint(europe)  {'france': 'paris', 'norway': 'oslo', 'poland': 'warsaw', 'italy': 'rome', 'spain': 'madrid', 'germany': 'berlin'}  # Dictionary of dictionaries\neurope = { 'spain': { 'capital':'madrid', 'population':46.77 },\n           'france': { 'capital':'paris', 'population':66.03 },\n           'germany': { 'capital':'berlin', 'population':80.62 },\n           'norway': { 'capital':'oslo', 'population':5.084 } }\n\n\n# Print out the capital of France\nprint(europe['france']['capital'])\n\n# Create sub-dictionary data\ndata = {\n    'capital': 'rome',\n    'population': 59.83\n}\n\n# Add data to europe under key 'italy'\neurope['italy'] = data\n\n# Print europe\nprint(europe)  paris\n{'france': {'capital': 'paris', 'population': 66.03}, 'italy': {'capital': 'rome', 'population': 59.83}, 'norway': {'capital': 'oslo', 'population': 5.084}, 'spain': {'capital': 'madrid', 'population': 46.77}, 'germany': {'capital': 'berlin', 'population': 80.62}}", 
            "title": "A plotting project: Gapminder"
        }, 
        {
            "location": "/DataCamp Python 3 for Data Science/#pandas-data-frame", 
            "text": "An Overview.  Tabular data are rectangular or 2D. Numpy can handle that.  But, Numpy is good with similar data: all str, all float or all integer.  Pandas is a data frame that can mix diverse data: str, float, and integer.  Import the  pandas  package as  np .   import pandas as pd   Start with pre-defined lists.   names = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\ndr =  [True, False, False, False, True, True, True]\ncpc = [809, 731, 588, 18, 200, 70, 45]  # Create dictionary my_dict with three key:value pairs: my_dict\nmy_dict = {\n    'country': names,\n    'drives_right': dr,\n    'cars_per_cap': cpc\n}   Build DataFrame  cars  from  my_dict :  cars .    convert, dictionary, data frame  cars = pd.DataFrame(my_dict)\n\n# Print cars\nprint(cars)     cars_per_cap        country drives_right\n0           809  United States         True\n1           731      Australia        False\n2           588          Japan        False\n3            18          India        False\n4           200         Russia         True\n5            70        Morocco         True\n6            45          Egypt         True   Add row labels.   row_labels = ['US', 'AUS', 'JAP', 'IN', 'RU', 'MOR', 'EG']\n\n# Specify row labels of cars\ncars.index = row_labels\n\n# Print cars again\nprint(cars)       cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\nIN             18          India        False\nRU            200         Russia         True\nMOR            70        Morocco         True\nEG             45          Egypt         True   Import data:  cars.csv  to create DataFrame  cars .   cars2 = pd.read_csv('cars.csv', sep = ';')  Other parameters:  index_col ,  header ,  delimiter ,  names ,  index_col .   Above all, here are a few commands to extract, subset, parse:   my_array[r, c]\n\nmy_pandas['col'] as a series\nmy_pandas[['col']] as a d.f.\nmy_pandas[['col1', 'col2']]\n\nmy_pandas[1]\nmy_pandas[1:3]\n\nmy_pandas.loc['row'] as a series\nmy_pandas.loc[['row']] as a d.f\nmy_pandas.loc[['row1', 'row2']] \n\nmy_pandas.loc[['col1', 'col2'], ['row1', 'row2']] \nmy_pandas.loc[:, ['row1', 'row2']] \nmy_pandas.loc[['col1', 'col2'], :] \n\nmy_pandas.iloc[1] as a series\nmy_pandas.iloc[[1]] as a d.f\nmy_pandas.iloc[[1,2]] \n\nmy_pandas.iloc[[1, 2], [1, 2]] \nmy_pandas.iloc[:, [1, 2]] \nmy_pandas.iloc[[1, 2], :]   Apply these commands.   # Print out country column as Pandas Series\nprint(cars2['country'])\n\n# Print out country column as Pandas DataFrame\nprint(cars2[['country']])\n\n# Print out DataFrame with country and drives_right columns\nprint(cars2[['country', 'drives_right']])  0    United States\n1        Australia\n2            Japan\n3            India\n4           Russia\n5          Morocco\n6            Egypt\nName: country, dtype: object\n         country\n0  United States\n1      Australia\n2          Japan\n3          India\n4         Russia\n5        Morocco\n6          Egypt\n         country drives_right\n0  United States         True\n1      Australia        False\n2          Japan        False\n3          India        False\n4         Russia         True\n5        Morocco         True\n6          Egypt         True  # Print out first 3 observations\nprint(cars[0:3])\n\n# Print out fourth, fifth and sixth observation\nprint(cars[3:6])       cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False\n     cars_per_cap  country drives_right\nIN             18    India        False\nRU            200   Russia         True\nMOR            70  Morocco         True  # Print out observation for Japan\nprint(cars.loc[['JAP']])\n\n# Print out observations for Australia and Egypt\nprint(cars.loc[['AUS', 'EG']])       cars_per_cap country drives_right\nJAP           588   Japan        False\n     cars_per_cap    country drives_right\nAUS           731  Australia        False\nEG             45      Egypt         True  # Print out drives_right value of Morocco\nprint(cars.loc[['MOR'], ['drives_right']])\n\n# Print sub-DataFrame\nprint(cars.loc[['RU', 'MOR'], ['country', 'drives_right']])      drives_right\nMOR         True\n     country drives_right\nRU    Russia         True\nMOR  Morocco         True  # Print out drives_right column as Series\nprint(cars.loc[:,'drives_right'])\n\n# Print out drives_right column as DataFrame\nprint(cars.loc[:,['drives_right']])\n\n# Print out car;, s_per_cap and drives_right as DataFrame\nprint(cars.loc[:, ['cars_per_cap', 'drives_right']])  US      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool\n    drives_right\nUS          True\nAUS        False\nJAP        False\nIN         False\nRU          True\nMOR         True\nEG          True\n     cars_per_cap drives_right\nUS            809         True\nAUS           731        False\nJAP           588        False\nIN             18        False\nRU            200         True\nMOR            70         True\nEG             45         True   A series is  [] .  A data frame is  [[]] .   # Extract drives_right column as Series: dr\ndr = cars.loc[:,'drives_right'] # or cars['drives_right']\n\n# cars.iloc[:,2]\nprint(dr)  US      True\nAUS    False\nJAP    False\nIN     False\nRU      True\nMOR     True\nEG      True\nName: drives_right, dtype: bool   Use  dr , a boolean series, to subset (row job)  cars .   # dr will extract the True (1) rows\nsel = cars[dr]\n\n# Or, convert code to a one-liner\nsel = cars[cars['drives_right'] == True]\n\n# Print sel\nprint(sel)       cars_per_cap        country drives_right\nUS            809  United States         True\nRU            200         Russia         True\nMOR            70        Morocco         True\nEG             45          Egypt         True  # Create series car_maniac: observations that have a cars_per_cap over 500\ncpc = cars.loc[:, 'cars_per_cap']\nmany_cars = cpc   500\ncar_maniac = cars[many_cars]\n\n# Print car_maniac\nprint(car_maniac)       cars_per_cap        country drives_right\nUS            809  United States         True\nAUS           731      Australia        False\nJAP           588          Japan        False  # Create medium: observations with cars_per_cap between 100 and 500\ncpc = cars.loc[:,'cars_per_cap']\nbetween = np.logical_and(cpc   100, cpc   500) # Numpy\nmedium = cars[between]\n\n# Print medium\nprint(medium)      cars_per_cap country drives_right\nRU           200  Russia         True", 
            "title": "Pandas: data frame"
        }, 
        {
            "location": "/DataCamp Python 3 for Data Science/#looping", 
            "text": "Loops  # areas list\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]   Change for-loop to use  enumerate() .    enumerate  for index, a in enumerate(areas) :\n    print( room   + str(index) +  :   + str(a))  room 0: 11.25\nroom 1: 18.0\nroom 2: 20.0\nroom 3: 10.75\nroom 4: 9.5   Another loop.   # house list of lists\nhouse = [[ hallway , 11.25], \n         [ kitchen , 18.0], \n         [ living room , 20.0], \n         [ bedroom , 10.75], \n         [ bathroom , 9.50]]  # Build a for-loop from scratch\nfor room in house:\n    print( the   + room[0].capitalize() +   is   + str(room[1]) +   sqm )  the Hallway is 11.25 sqm\nthe Kitchen is 18.0 sqm\nthe Living room is 20.0 sqm\nthe Bedroom is 10.75 sqm\nthe Bathroom is 9.5 sqm   Another loop.   # Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'bonn', \n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'australia':'vienna' }  # Iterate over europe\nfor country, capital in europe.items():\n    print( the capital of   + str(country) +   is   + str(capital))   the capital of australia is vienna\nthe capital of france is paris\nthe capital of norway is oslo\nthe capital of poland is warsaw\nthe capital of italy is rome\nthe capital of spain is madrid\nthe capital of germany is bonn  Loop over a NumPy array    If you re dealing with a 1D Numpy array, looping over all elements can be as simple as:  for x in my_array : ...    If you re dealing with a 2D Numpy array, it s more complicated.    A 2D array is built up of multiple 1D arrays.    To explicitly iterate over all separate elements of a multi-dimensional array, you ll need this syntax:  for x in np.nditer(my_array) : ...    Two Numpy arrays that you might recognize from the intro course are available in your Python session: np_height, a Numpy array containing the heights of Major League Baseball players, and np_baseball, a 2D Numpy array that contains both the heights (first column) and weights (second column) of those players.    Loop over a Pandas data frame   Iterating over a Pandas DataFrame is typically done with the iterrows() method.   Used in a for loop, every observation is iterated over and on every iteration the row label and actual row contents are available:  for lab, row in brics.iterrows() : ...  In this and the following exercises you will be working on the cars DataFrame.   It contains information on the cars per capita and whether people drive right or left for seven countries in the world.   # Iterate over rows of cars\nfor lab, row in cars.iterrows():\n    print(lab) # row label\n    print(row) # row content  US\ncars_per_cap              809\ncountry         United States\ndrives_right             True\nName: US, dtype: object\nAUS\ncars_per_cap          731\ncountry         Australia\ndrives_right        False\nName: AUS, dtype: object\nJAP\ncars_per_cap      588\ncountry         Japan\ndrives_right    False\nName: JAP, dtype: object\nIN\ncars_per_cap       18\ncountry         India\ndrives_right    False\nName: IN, dtype: object\nRU\ncars_per_cap       200\ncountry         Russia\ndrives_right      True\nName: RU, dtype: object\nMOR\ncars_per_cap         70\ncountry         Morocco\ndrives_right       True\nName: MOR, dtype: object\nEG\ncars_per_cap       45\ncountry         Egypt\ndrives_right     True\nName: EG, dtype: object  # Adapt the for-loop\nfor lab, row in cars.iterrows() :\n    print(str(lab) +  :   + str(row['cars_per_cap']))   Code a for-loop that adds the  COUNTRY  column with uppercase version of the  country  names in the  country  column.   for lab, row in cars.iterrows():\n    cars.loc[lab,  COUNTRY ] = (row[ country ].upper())\n\n# Print cars\nprint(cars)       cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT   Replace the for-loop with a one-liner that uses  .apply(str.upper) .   The call should give the same result: a column  COUNTRY should be added to cars, containing an uppercase version of the country names.   cars[ COUNTRY ] = cars[ country ].apply(str.upper)\nprint(cars)       cars_per_cap        country drives_right        COUNTRY\nUS            809  United States         True  UNITED STATES\nAUS           731      Australia        False      AUSTRALIA\nJAP           588          Japan        False          JAPAN\nIN             18          India        False          INDIA\nRU            200         Russia         True         RUSSIA\nMOR            70        Morocco         True        MOROCCO\nEG             45          Egypt         True          EGYPT", 
            "title": "Looping"
        }, 
        {
            "location": "/DataCamp Python 3 for Data Science/#a-numpy-project-random-walk-monte-carlo-simulation", 
            "text": "# Set the seed\nnp.random.seed(123)\n\n# Generate and print random float between 0 and 1\nprint(np.random.rand())  0.6964691855978616  # Use randint() to simulate a dice (1,2,3,4,5,6)\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))\nprint(np.random.randint(1, 7))  5\n3\n2\n4\n3\n4\n2   Build a random walk.   # Starting step\nstep = 50\n\n# Roll the dice\ndice = np.random.randint(1,7)\n\n# Finish the control construct\n'''\nIf dice is 1 or 2, you go one step down.\nif dice is 3, 4 or 5, you go one step up.\nElse, you throw the dice again. The number of eyes is the number of steps you go up.\n'''\nif dice  = 2 :\n    step = step - 1\nelif dice  = 5 :\n    step = step + 1\nelse :\n    step = step + np.random.randint(1,7)\n\n# Print out dice and step\nprint(dice), print(step)  2\n49\n\n(None, None)  outcomes = []\n\nfor x in range(10) :\n    coin = np.random.randint(0, 2)\nif coin == 0 :\n    outcomes.append( heads )\nelse :\n    outcomes.append( tails )\n\nprint(outcomes)  ['tails']  tails = [0]\n\nfor x in range(10) :\n    coin = np.random.randint(0, 2)\n\n    tails.append(coin)\n\nprint(tails)  [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1]   Initialize  random_walk .   random_walk = [0]\n\n# Complete the ___\nfor x in range(100) :\n    # Set step: last element in random_walk\n    step = random_walk[-1]\n\n    # Roll the dice\n    dice = np.random.randint(1,7)\n\n    # Determine next step\n    if dice  = 2:\n        step = max(0, step - 1) # make sure that 'step' never goes below 0 when you decrease it\n    elif dice  = 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    # append next_step to random_walk\n    random_walk.append(step)\n\n# Print random_walk\nprint(random_walk)  [0, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 10, 12, 11, 12, 13, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 19, 21, 20, 19, 20, 21, 20, 22, 23, 24, 25, 26, 27, 28, 27, 28, 29, 34, 35, 34, 33, 32, 31, 32, 33, 34, 39, 40, 39, 40, 41, 42, 43, 44, 45, 44, 43, 44, 43, 49, 48, 49, 48, 49, 48, 49, 53, 57, 59, 61, 60, 61, 63, 62, 68, 69, 71, 72, 71, 72, 73, 74, 73, 74, 75, 76, 78, 77, 76, 77, 83, 88, 87, 86]   Plot  random_walk .   plt.plot(range(101), random_walk)\n\n# Show the plot\nplt.show()    Build a Monte Carlo as an alternative.   # Initialize all_walks\nall_walks = []\n\n# Simulate random walk 10 times\nfor i in range(10) :\n\n    # Code from before\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n\n        if dice  = 2:\n            step = max(0, step - 1)\n        elif dice  = 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n\n    # Append random_walk to all_walks\n    all_walks.append(random_walk) \n\n# Print all_walks\nprint(all_walks)  [[0, 4, 5, 6, 7, 9, 8, 9, 8, 9, 8, 7, 13, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 20, 19, 18, 19, 18, 19, 18, 19, 20, 24, 25, 24, 30, 29, 28, 29, 28, 27, 28, 27, 31, 30, 31, 30, 31, 30, 31, 33, 32, 31, 30, 31, 30, 35, 36, 37, 36, 35, 36, 35, 36, 35, 40, 41, 40, 39, 38, 37, 38, 39, 43, 49, 50, 51, 52, 53, 52, 53, 55, 56, 57, 58, 57, 56, 57, 56, 57, 58, 59, 58, 59, 60, 61, 60, 59, 60, 61, 66], [0, 1, 2, 7, 6, 7, 6, 7, 8, 9, 10, 9, 15, 14, 15, 14, 13, 14, 18, 19, 20, 21, 22, 21, 20, 19, 18, 17, 18, 19, 20, 21, 22, 23, 22, 23, 24, 23, 24, 25, 28, 27, 28, 27, 28, 31, 32, 33, 34, 33, 32, 35, 36, 37, 38, 37, 36, 37, 40, 41, 46, 47, 46, 47, 46, 47, 46, 52, 51, 50, 51, 53, 52, 51, 50, 51, 52, 53, 54, 58, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 74, 73, 74, 75, 74, 80, 79, 80, 81, 80], [0, 0, 1, 0, 0, 6, 5, 4, 5, 6, 5, 4, 3, 2, 3, 9, 10, 13, 14, 20, 21, 22, 28, 27, 33, 32, 33, 34, 35, 34, 40, 41, 40, 41, 40, 41, 40, 41, 40, 41, 45, 46, 48, 47, 48, 47, 46, 47, 46, 47, 46, 50, 54, 53, 52, 51, 52, 53, 57, 58, 59, 63, 62, 61, 60, 61, 62, 64, 63, 62, 63, 64, 66, 69, 74, 75, 74, 75, 76, 77, 78, 79, 78, 79, 80, 86, 85, 90, 89, 93, 92, 96, 95, 98, 99, 98, 99, 105, 104, 103, 102], [0, 4, 3, 2, 3, 4, 3, 4, 5, 6, 7, 6, 5, 4, 5, 4, 3, 7, 8, 10, 14, 20, 19, 18, 19, 20, 21, 20, 21, 20, 21, 22, 21, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 35, 38, 39, 38, 37, 38, 39, 40, 39, 38, 37, 36, 37, 38, 39, 40, 41, 42, 43, 42, 43, 44, 46, 45, 46, 47, 50, 52, 53, 52, 51, 50, 49, 48, 49, 48, 49, 51, 52, 53, 52, 53, 52, 51, 52, 51, 50, 49, 50, 49, 48, 49, 50, 51, 53, 54], [0, 1, 0, 0, 1, 7, 6, 7, 8, 13, 12, 13, 12, 13, 14, 13, 14, 15, 21, 22, 23, 24, 23, 25, 26, 27, 28, 27, 28, 29, 30, 31, 30, 31, 30, 31, 32, 31, 32, 36, 37, 40, 41, 45, 46, 45, 46, 47, 46, 45, 50, 51, 52, 51, 50, 51, 52, 53, 52, 56, 55, 56, 57, 58, 59, 60, 61, 62, 61, 60, 59, 60, 61, 65, 66, 65, 66, 67, 66, 72, 73, 74, 75, 74, 75, 76, 79, 78, 79, 78, 77, 76, 77, 78, 80, 81, 82, 86, 87, 86, 85], [0, 1, 2, 1, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 4, 5, 4, 3, 2, 3, 4, 5, 6, 7, 12, 16, 15, 16, 15, 14, 13, 14, 13, 14, 15, 14, 18, 19, 18, 19, 18, 17, 18, 17, 21, 22, 23, 24, 25, 26, 25, 26, 27, 28, 29, 30, 29, 34, 35, 36, 35, 36, 35, 36, 37, 36, 37, 42, 43, 44, 43, 44, 45, 46, 45, 46, 45, 46, 47, 46, 45, 44, 45, 46, 45, 44, 43, 44, 48, 49, 50, 51, 52, 53, 52, 53, 54, 53, 54, 59, 60], [0, 0, 0, 1, 0, 0, 0, 4, 5, 6, 7, 6, 7, 8, 9, 10, 11, 10, 9, 12, 11, 10, 9, 8, 9, 15, 16, 15, 16, 17, 16, 15, 16, 17, 18, 17, 21, 22, 21, 23, 24, 23, 24, 25, 26, 27, 28, 29, 28, 27, 28, 29, 28, 29, 30, 29, 28, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 39, 40, 41, 42, 43, 44, 43, 42, 48, 49, 50, 49, 48, 47, 51, 52, 56, 55, 61, 62, 63, 67, 68, 67, 66, 67, 68, 69, 70, 69, 75, 76, 75], [0, 4, 5, 4, 5, 4, 10, 16, 17, 16, 17, 18, 19, 20, 21, 20, 23, 22, 24, 25, 31, 30, 31, 32, 31, 30, 31, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 43, 44, 45, 46, 45, 44, 43, 44, 43, 47, 46, 45, 46, 48, 49, 54, 53, 54, 55, 59, 58, 59, 60, 59, 58, 59, 60, 61, 60, 59, 58, 59, 58, 57, 58, 57, 56, 55, 56, 57, 56, 55, 54, 55, 56, 57, 56, 55, 56, 57, 58, 59, 58, 59, 58, 59, 60, 61, 62], [0, 1, 6, 11, 10, 11, 12, 11, 12, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 18, 19, 20, 21, 20, 19, 18, 20, 21, 22, 21, 20, 19, 20, 21, 22, 21, 20, 21, 24, 29, 32, 33, 34, 40, 41, 42, 43, 42, 44, 49, 50, 51, 52, 53, 54, 55, 54, 55, 56, 57, 58, 59, 61, 65, 66, 67, 68, 69, 73, 78, 77, 76, 75, 74, 77, 78, 79, 80, 79, 78, 81, 82, 81, 80, 79, 80, 81, 82, 83, 82, 83, 82, 83, 84, 83, 84, 85, 86, 87, 88, 89], [0, 1, 0, 0, 1, 2, 5, 6, 5, 4, 5, 6, 7, 12, 11, 10, 9, 8, 7, 6, 7, 6, 5, 6, 9, 8, 7, 8, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 26, 27, 28, 29, 30, 31, 30, 29, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 43, 42, 41, 40, 39, 40, 41, 42, 41, 40, 39, 38, 37, 36, 37, 41, 45, 46, 47, 46, 45, 46, 47, 48, 54, 55, 54, 53, 54, 53, 54, 53, 54, 55, 54, 55, 54, 53, 54, 55, 54, 55, 54]]  all_walks = []\nfor i in range(10) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice  = 2:\n            step = max(0, step - 1)\n        elif dice  = 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Convert all_walks to Numpy array: np_aw\n# all_walks is a list of 10 lists\nnp_aw = np.array(all_walks)\n# np_aw is an array of 10 horizontal vectors (a matrix...)\n\n# Plot np_aw and show\nplt.plot(np_aw)\nplt.show()    Now every row in  np_all_walks  represents the position after 1 throw (of dice) for the 10 random walks.   # Clear the figure\nplt.clf()\n\n# Transpose np_aw: np_aw_t\nnp_aw_t = np.transpose(np_aw)\n\n# Plot np_aw_t and show\nplt.plot(np_aw_t)\nplt.show()    10 randoms walks from 0 to 100 (the dice only had 6 possibilities).   import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(123)\nall_walks = []\n\n# Simulate random walk 250 times\nfor i in range(250) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice  = 2:\n            step = max(0, step - 1)\n        elif dice  = 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n\n        # Implement clumsiness\n        # if a random float is less or equal to 0.001\n        # randint = integer\n        # rand = float\n        if np.random.rand()  = 0.001 :\n            step = 0\n\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\nplt.plot(np_aw_t)\nplt.show()    What are the odds that you ll reach 60 steps high on the Empire State Building?   Basically, you want to know about the end points of all the random walks you ve simulated.   These end points have a certain distribution that you can visualize with a histogram.   import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(123)\nall_walks = []\n\n# Simulate random walk 1000 times\nfor i in range(1000) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice  = 2:\n            step = max(0, step - 1)\n        elif dice  = 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        if np.random.rand()  = 0.001 :\n            step = 0\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\n\n# Select last row from np_aw_t: ends\nends = np_aw_t[-1]\n\n# Plot histogram of ends, display plot\nplt.hist(ends)\nplt.show()    The histogram of the previous exercise was created from a Numpy array  ends , that contains 1,000 integers.   Each integer represents the end point of a random walk.   To calculate the change that this end point is higher than or equal to 60, you can count the number of integers in ends that are greater than or equal to 60 and divide that number by 1000, the total number of simulations.  Well then, what s the estimated chance that you ll reach 60 steps high if you play this Empire State Building game?   The  ends  array is everything you need.   sum(ends  = 60) / 1000\n\n# 78.8%  0.78800000000000003", 
            "title": "A NumPy project: random walk &amp; Monte Carlo simulation"
        }, 
        {
            "location": "/Tidy_Data_in_Python/", 
            "text": "CONTENT\n\n\n1, Loading\n\n\n2, Tidy vs. Messy Data\n\n\n4, Using melt to Tidy Data\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3.\n\n\n\n\nIt is often said that data scientists spend only 20% of their time analyzing their data, and 80% of time cleaning it. Indeed, maintaining a tidy, easy-to-use dataset is crucial in our age of big data. In the paper Tidy Data, veteran statistician Hadley Wickham gives definitions of tidy and messy data so that all data scientists can keep their work organized. \n\n\n1, Loading\n\n\nFirst, load all the datasets.\n\n\nimport pandas as pd\n\nmessy = pd.read_csv('messy.csv')\ndf1 = pd.read_csv('df1.csv')\ndf2 = pd.read_csv('df2.csv')\neyes = pd.read_csv('eyes.csv')\n\n\n\n\n2, Tidy vs. Messy Data\n\n\nWhat exactly marks the difference between tidy data and messy data? It is not only how organized and intuitive the datasets look to our human eyes, but also how easily and efficiently they can be processed by computers. In his seminal paper \nTidy Data\n, Hadley Wickham proposed three standards for tidy data:\n\n\n\n\nEach variable forms a column\n\n\nEach observation forms a row\n\n\nEach type of observation forms a unit.\n\n\n\n\nTo get started, execute \nmessy\n in the shell. This dataset, which appears in Wickham\ns paper, shows the number of people who choose either of two treatments in a hospital. Observe its structure in comparison with Wickham\ns rules. This dataset is \nmessy\n because it violates rule 2: it combines Treatment A and Treatment B, two distinct observations, in a single row.\n\n\nprint(messy.head())\n\n\n\n\n  First     Last  Treatment A  Treatment B\n0  John    Smith          NaN            2\n1  Jane      Doe         16.0           11\n2  Mary  Johnson          3.0            1\n\n\n\nNow let\ns look at two more datasets. Execute \ndf1\n and \ndf2\n in the shell to check out two other preloaded datasets. The former shows the type and number of pets owned by three co-workers, and the latter shows the average BMI in three countries over several years. \n\n\nprint(df1.head())\n\n\n\n\n      owner  dogs  cats  birds\n0     Jason     2     4      3\n1      Lisa     7    10      9\n2  Terrence     8     5      1\n\n\n\nprint(df2.head())\n\n\n\n\n       Country     Y1980     Y1981     Y1982     Y1983\n0  Afghanistan  21.48678  21.46552  21.45145  21.43822\n1      Albania  25.22533  25.23981  25.25636  25.27176\n2      Algeria  22.25703  22.34745  22.43647  22.52105\n\n\n\ndf2\n is messy because it violates rule 2.\n\n\n4, Using \nmelt\n to Tidy Data\n\n\nIts basic syntax is \npd.melt(df, id_vars = lst)\n, where \ndf\n is the name of the data frame we\nre dealing with and \nlst\n is a list of all the columns that we want to keep as columns. \n\n\n# Melt df2 into a new data frame: df2_melted\ndf2_melted = pd.melt(df2, id_vars = 'Country')\n\n# print df2_melted\nprint(df2_melted)\n\n\n\n\n        Country variable     value\n0   Afghanistan    Y1980  21.48678\n1       Albania    Y1980  25.22533\n2       Algeria    Y1980  22.25703\n3   Afghanistan    Y1981  21.46552\n4       Albania    Y1981  25.23981\n5       Algeria    Y1981  22.34745\n6   Afghanistan    Y1982  21.45145\n7       Albania    Y1982  25.25636\n8       Algeria    Y1982  22.43647\n9   Afghanistan    Y1983  21.43822\n10      Albania    Y1983  25.27176\n11      Algeria    Y1983  22.52105\n\n\n\nRenaming Columns\n\n\nChange the column names with pandas\n rename function. Its syntax is \ndf.rename(columns = d, inplace = False)\n, where \nd\n is a dictionary where the keys are the columns you want to change, and the values are the new names for these columns.\n\n\n# Rename the columns of df2_melted: df2_tidy\ndf2_tidy = df2_melted.rename(columns = {'variable': 'Year', 'value': 'Income'})\n\n# Print out df2_tidy\nprint(df2_tidy)\n\n\n\n\n        Country   Year    Income\n0   Afghanistan  Y1980  21.48678\n1       Albania  Y1980  25.22533\n2       Algeria  Y1980  22.25703\n3   Afghanistan  Y1981  21.46552\n4       Albania  Y1981  25.23981\n5       Algeria  Y1981  22.34745\n6   Afghanistan  Y1982  21.45145\n7       Albania  Y1982  25.25636\n8       Algeria  Y1982  22.43647\n9   Afghanistan  Y1983  21.43822\n10      Albania  Y1983  25.27176\n11      Algeria  Y1983  22.52105\n\n\n\nMore messiness\n\n\nExecute \neyes\n in the shell. This dataset is about the eye colors of three women and whether or not they wear glasses. What problem does this dataset have?\n\n\nprint(eyes)\n\n\n\n\n        Name  Brown  Blue  Black Wear_Glasses\n0     Esther      0     1      0        False\n1  Elizabeth      1     0      0        False\n2   Michelle      0     0      1         True\n\n\n\nIt violates rule 1 of tidy data: there are several columns that represent the same variable.\n\n\nDeal with it\n\n\nUse \nmelt\n.\n\n\n# Melt the Black, Blue, and Brown columns of eyes: eyes_melted\neyes_melted = pd.melt(eyes, id_vars = ['Name', 'Wear_Glasses'])\n\n# Rename the variable column and save to eyes_renamed\neyes_renamed = eyes_melted.rename(columns = {'variable': 'Eye_Color'})\n\n# print out eyes_renamed\nprint(eyes_renamed)\n\n\n\n\n        Name Wear_Glasses Eye_Color  value\n0     Esther        False     Brown      0\n1  Elizabeth        False     Brown      1\n2   Michelle         True     Brown      0\n3     Esther        False      Blue      1\n4  Elizabeth        False      Blue      0\n5   Michelle         True      Blue      0\n6     Esther        False     Black      0\n7  Elizabeth        False     Black      0\n8   Michelle         True     Black      1\n\n\n\nFurther Cleaning\n\n\nGet rid of all rows whose value in the value column is 0.\n\n\ndf1 = df2[df2.column == value]\n\n\nwhere \ncolumn\n is the name of the column we are examining and \nvalue\n is the value we want to keep. This step will give us one row for each girl that tells us only her correct eye color. Now the \nvalue\n column is no longer necessary, so let\ns delete it:\n\n\ndf.drop(lst, axis = 1)\n\n\nHere \nlst\n is a list of the columns we want to get rid of, and \naxis = 1\n specifies that we want to drop columns instead of rows.\n\n\n# Filter eyes_ranamed and save to eyes_filtered \neyes_filtered = eyes_renamed[eyes_renamed.value == 1]\n\n# Delete the `value` column and save to eyes_tidy\neyes_tidy = eyes_filtered.drop(['value'], axis = 1)\n\n# print eyes_tidy\nprint(eyes_tidy)\n\n\n\n\n        Name Wear_Glasses Eye_Color\n1  Elizabeth        False     Brown\n3     Esther        False      Blue\n8   Michelle         True     Black", 
            "title": "Tidy Data in Python"
        }, 
        {
            "location": "/Tidy_Data_in_Python/#2-tidy-vs-messy-data", 
            "text": "What exactly marks the difference between tidy data and messy data? It is not only how organized and intuitive the datasets look to our human eyes, but also how easily and efficiently they can be processed by computers. In his seminal paper  Tidy Data , Hadley Wickham proposed three standards for tidy data:   Each variable forms a column  Each observation forms a row  Each type of observation forms a unit.   To get started, execute  messy  in the shell. This dataset, which appears in Wickham s paper, shows the number of people who choose either of two treatments in a hospital. Observe its structure in comparison with Wickham s rules. This dataset is  messy  because it violates rule 2: it combines Treatment A and Treatment B, two distinct observations, in a single row.  print(messy.head())    First     Last  Treatment A  Treatment B\n0  John    Smith          NaN            2\n1  Jane      Doe         16.0           11\n2  Mary  Johnson          3.0            1  Now let s look at two more datasets. Execute  df1  and  df2  in the shell to check out two other preloaded datasets. The former shows the type and number of pets owned by three co-workers, and the latter shows the average BMI in three countries over several years.   print(df1.head())        owner  dogs  cats  birds\n0     Jason     2     4      3\n1      Lisa     7    10      9\n2  Terrence     8     5      1  print(df2.head())         Country     Y1980     Y1981     Y1982     Y1983\n0  Afghanistan  21.48678  21.46552  21.45145  21.43822\n1      Albania  25.22533  25.23981  25.25636  25.27176\n2      Algeria  22.25703  22.34745  22.43647  22.52105  df2  is messy because it violates rule 2.", 
            "title": "2, Tidy vs. Messy Data"
        }, 
        {
            "location": "/Tidy_Data_in_Python/#4-using-melt-to-tidy-data", 
            "text": "Its basic syntax is  pd.melt(df, id_vars = lst) , where  df  is the name of the data frame we re dealing with and  lst  is a list of all the columns that we want to keep as columns.   # Melt df2 into a new data frame: df2_melted\ndf2_melted = pd.melt(df2, id_vars = 'Country')\n\n# print df2_melted\nprint(df2_melted)          Country variable     value\n0   Afghanistan    Y1980  21.48678\n1       Albania    Y1980  25.22533\n2       Algeria    Y1980  22.25703\n3   Afghanistan    Y1981  21.46552\n4       Albania    Y1981  25.23981\n5       Algeria    Y1981  22.34745\n6   Afghanistan    Y1982  21.45145\n7       Albania    Y1982  25.25636\n8       Algeria    Y1982  22.43647\n9   Afghanistan    Y1983  21.43822\n10      Albania    Y1983  25.27176\n11      Algeria    Y1983  22.52105  Renaming Columns  Change the column names with pandas  rename function. Its syntax is  df.rename(columns = d, inplace = False) , where  d  is a dictionary where the keys are the columns you want to change, and the values are the new names for these columns.  # Rename the columns of df2_melted: df2_tidy\ndf2_tidy = df2_melted.rename(columns = {'variable': 'Year', 'value': 'Income'})\n\n# Print out df2_tidy\nprint(df2_tidy)          Country   Year    Income\n0   Afghanistan  Y1980  21.48678\n1       Albania  Y1980  25.22533\n2       Algeria  Y1980  22.25703\n3   Afghanistan  Y1981  21.46552\n4       Albania  Y1981  25.23981\n5       Algeria  Y1981  22.34745\n6   Afghanistan  Y1982  21.45145\n7       Albania  Y1982  25.25636\n8       Algeria  Y1982  22.43647\n9   Afghanistan  Y1983  21.43822\n10      Albania  Y1983  25.27176\n11      Algeria  Y1983  22.52105  More messiness  Execute  eyes  in the shell. This dataset is about the eye colors of three women and whether or not they wear glasses. What problem does this dataset have?  print(eyes)          Name  Brown  Blue  Black Wear_Glasses\n0     Esther      0     1      0        False\n1  Elizabeth      1     0      0        False\n2   Michelle      0     0      1         True  It violates rule 1 of tidy data: there are several columns that represent the same variable.  Deal with it  Use  melt .  # Melt the Black, Blue, and Brown columns of eyes: eyes_melted\neyes_melted = pd.melt(eyes, id_vars = ['Name', 'Wear_Glasses'])\n\n# Rename the variable column and save to eyes_renamed\neyes_renamed = eyes_melted.rename(columns = {'variable': 'Eye_Color'})\n\n# print out eyes_renamed\nprint(eyes_renamed)          Name Wear_Glasses Eye_Color  value\n0     Esther        False     Brown      0\n1  Elizabeth        False     Brown      1\n2   Michelle         True     Brown      0\n3     Esther        False      Blue      1\n4  Elizabeth        False      Blue      0\n5   Michelle         True      Blue      0\n6     Esther        False     Black      0\n7  Elizabeth        False     Black      0\n8   Michelle         True     Black      1  Further Cleaning  Get rid of all rows whose value in the value column is 0.  df1 = df2[df2.column == value]  where  column  is the name of the column we are examining and  value  is the value we want to keep. This step will give us one row for each girl that tells us only her correct eye color. Now the  value  column is no longer necessary, so let s delete it:  df.drop(lst, axis = 1)  Here  lst  is a list of the columns we want to get rid of, and  axis = 1  specifies that we want to drop columns instead of rows.  # Filter eyes_ranamed and save to eyes_filtered \neyes_filtered = eyes_renamed[eyes_renamed.value == 1]\n\n# Delete the `value` column and save to eyes_tidy\neyes_tidy = eyes_filtered.drop(['value'], axis = 1)\n\n# print eyes_tidy\nprint(eyes_tidy)          Name Wear_Glasses Eye_Color\n1  Elizabeth        False     Brown\n3     Esther        False      Blue\n8   Michelle         True     Black", 
            "title": "4, Using melt to Tidy Data"
        }, 
        {
            "location": "/IPython Notebook/", 
            "text": "CONTENT\n\n\nWebsites\n\n\nIpython Notebook Essentials\n\n\nLearning IPython for Interactive Computing and Data Visualization\n\n\nIPython Interactive Computing and Visualization Cookbook\n\n\nIntroduction to Python for Econometrics, Statistics and Data Analysis\n\n\nBuilding Machine Learning Systems with Python\n\n\nScipy Lecture Notes\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and books\n tables of contents.\n\n\n\n\nWebsites\n\n\n\n\nA gallery of interesting IPython Notebooks\n\n\nExcel plug-ins for Anaconda\n\n\n\n\nIpython Notebook Essentials\n\n\nChapter 1: A Tour of the IPython Notebook 7\nGetting started with Anaconda or Wakari 8\nInstalling Anaconda 8\nRunning the notebook 8\nCreating a Wakari account 10\nCreating your frst notebook 11\nExample \u2013 the coffee cooling problem 12\nExercises 22\nSummary 22\nChapter 2: The Notebook Interface 23\nEditing and navigating a notebook 23\nGetting help and interrupting computations 25\nThe Edit mode 25\nThe Command mode 28\nCell types 29\nIPython magics 33\nInteracting with the operating system 37\nSaving the notebook 37\nConverting the notebook to other formats 38\nRunning shell commands 39\nRunning scripts, loading data, and saving data 41\nRunning Python scripts 41\nRunning scripts in other languages 43\nLoading and saving data 45\nThe rich display system 47\nImages and YouTube videos 47\nHTML 49\nSummary 52\nChapter 3: Graphics with matplotlib 53\nThe plot function 54\nAdding a title, labels, and a legend 59\nText and annotations 62\nThree-dimensional plots 66\nAnimations 71\nSummary 77\nChapter 4: Handling Data with pandas 79\nThe Series class 79\nThe DataFrame class 88\nComputational and graphics tools 95\nAn example with a realistic dataset 101\nSummary 108\nChapter 5: Advanced Computing with SciPy, Numba, and NumbaPro 109\nOverview of SciPy 109\nAdvanced mathematical algorithms with SciPy 111\nSolving equations and fnding optimal values 111\nCalculus and differential equations 117\nAccelerating computations with Numba and NumbaPro 128\nSummary 138\nAppendix A: IPython Notebook Reference Card 139\nStarting the notebook 139\nKeyboard shortcuts 139\nShortcuts in the Edit mode 139\nShortcuts in the Command mode 140\nImporting modules 141\nGetting help 141\nAppendix B: A Brief Review of Python 143\nIntroduction 143\nBasic types, expressions, and variables and their assignment 143\nSequence types 147\nLists 147\nTuples 150\nStrings 151\nDictionaries 152\nControl structures 152\nFunctions, objects, and methods 156\nFunctions 156\nObjects and methods 158\nSummary 159\nAppendix C: NumPy Arrays 161\nIntroduction 161\nArray creation and member access 161\nIndexing and Slicing 164\nIndex 167\n\n\n\n\nLearning IPython for Interactive Computing and Data Visualization\n\n\nChapter 1: Getting Started with IPython 5\nInstalling IPython and the recommended packages 6\nPrerequisites for IPython 6\nInstalling an all-in-one distribution 7\nInstalling the packages one by one 7\nPackages websites 8\nGetting binary installers 9\nUsing the Python packaging system 11\nInstalling the development versions 12\nTen IPython essentials 13\nRunning the IPython console 13\nUsing IPython as a system shell 14\nUsing the history 15\nTab completion 15\nExecuting a script with the %run command 16\nQuick benchmarking with the %timeit command 17\nQuick debugging with the %debug command 17\nInteractive computing with Pylab 18\nUsing the IPython Notebook 19\nCustomizing IPython 19\nSummary 20\nChapter 2: Interactive Work with IPython 21\nThe extended shell 21\nNavigating through the flesystem 22\nAccessing the system shell from IPython 24\nThe extended Python console 25\nExploring the history 26\nImport/export of Python code 27\nImporting code in IPython 27\nExporting code to a fle 29\nDynamic introspection 29\nTab completion 29\nSource code introspection 31\nUsing the interactive debugger 32\nInteractive benchmarking and profling 33\nControlling the execution time of a command 33\nProfling a script 34\nUsing the IPython notebook 35\nInstallation 36\nThe notebook dashboard 36\nWorking with cells 37\nCell magics 38\nManaging notebooks 39\nMultimedia and rich text editing 39\nGraph plotting 40\nSummary 41\nChapter 3: Numerical Computing with IPython 43\nA primer to vector computing 44\nAn example of computation with Python loops 44\nWhat an array is 45\nReimplementing the example with arrays 48\nCreating and loading arrays 50\nCreating arrays 50\nFrom scratch, element by element 50\nFrom scratch, using predefned templates 51\nFrom random values 52\nLoading arrays 53\nFrom a native Python object 53\nFrom a buffer or an external fle 53\nUsing Pandas 54\nWorking with arrays 56\nSelection 56\nUsing Pandas 57\nUsing NumPy 58\nMore indexing possibilities 59\nManipulation 60\nReshaping 60\nRepeating and concatenating 61\nBroadcasting 62\nPermuting 63\nComputation 63\nAdvanced mathematical processing 65\nSummary 66\nChapter 4: Interactive Plotting and Graphical Interfaces 67\nFigures with Matplotlib 68\nSetting up IPython for interactive visualization 68\nUsing Matplotlib 68\nInteractive navigation 69\nMatplotlib in the IPython notebook 69\nStandard plots 69\nCurves 69\nScatter plots 71\nBar graphs 72\nPlot customization 72\nStyles and colors 73\nGrid, axes, and legends 74\nInteraction from IPython 75\nDrawing multiple plots 76\nAdvanced fgures and graphics 76\nImage processing 77\nLoading images 77\nShowing images 78\nUsing PIL 79\nAdvanced image processing \u2013 color quantization 79\nMaps 81\n3D plots 83\nAnimations 84\nOther visualization packages 84\nGraphical User Interfaces (GUI) 84\nSetting up IPython for interactive GUIs 85\nA \nHello World\n example 85\nSummary 87\nChapter 5: High-Performance and Parallel Computing 89\nInteractive task parallelization 90\nParallel computing in Python 90\nDistributing tasks on multiple cores 91\nStarting the engines 91\nCreating a Client instance 92\nUsing the parallel magic 92\nParallel map 93\nA practical example \u2013 Monte Carlo simulations 95\nUsing MPI with IPython 96\nAdvanced parallel computing features of IPython 98\nUsing C in IPython with Cython 99\nInstalling and confguring Cython 99\nUsing Cython from IPython 100\nAccelerating a pure Python algorithm with Cython 101\nPure Python version 101\nNa\u00efve Cython conversion 102\nAdding C types 102\nUsing NumPy and Cython 103\nPython version 103\nCython version 104\nMore advanced options for accelerating Python code 106\nSummary 107\nChapter 6: Customizing IPython 109\nIPython profles 109\nProfle locations 110\nThe IPython confguration fles 110\nLoading scripts when IPython starts 111\nIPython extensions 111\nExample \u2013 line-by-line profling 111\nCreating new extensions 113\nExample \u2013 executing C++ code in IPython 113\nRich representations in the frontend 115\nEmbedding IPython 117\nFinal words 117\nSummary 118\nIndex 119\n\n\n\n\nIPython Interactive Computing and Visualization Cookbook\n\n\nChapter 1: A Tour of Interactive Computing with IPython 9\nIntroduction 9\nIntroducing the IPython notebook 13\nGetting started with exploratory data analysis in IPython 22\nIntroducing the multidimensional array in NumPy for fast array computations 28\nCreating an IPython extension with custom magic commands 32\nMastering IPython configuration system 36\nCreating a simple kernel for IPython 39\nChapter 2: Best Practices in Interactive Computing 45\nIntroduction 45\nChoosing (or not) between Python 2 and Python 3 46\nEffcient interactive computing work\ufb02ows with IPython 50\nLearning the basics of the distributed version control system Git 53\nA typical work\ufb02ow with Git branching 56\nTen tips for conducting reproducible interactive computing experiments 59\nWriting high-quality Python code 63\nWriting unit tests with nose 67\nDebugging your code with IPython 74\nChapter 3: Mastering the Notebook 79\nIntroduction 79\nTeaching programming in the notebook with IPython blocks 84\nConverting an IPython notebook to other formats with nbconvert 89\nAdding custom controls in the notebook toolbar 94\nCustomizing the CSS style in the notebook 96\nUsing interactive widgets \u2013 a piano in the notebook 99\nCreating a custom JavaScript widget in the notebook \u2013 a spreadsheet editor for pandas 103\nProcessing webcam images in real time from the notebook 108\nChapter 4: Profling and Optimization 115\nIntroduction 115\nEvaluating the time taken by a statement in IPython 116\nProfling your code easily with cProfle and IPython 117\nProfling your code line-by-line with line_profler 121\nProfling the memory usage of your code with memory_profler 124\nUnderstanding the internals of NumPy to avoid unnecessary array copying 127\nUsing stride tricks with NumPy 133\nImplementing an effcient rolling average algorithm with stride tricks 135\nMaking effcient array selections in NumPy 138\nProcessing huge NumPy arrays with memory mapping 140\nManipulating large arrays with HDF5 and PyTables 142\nManipulating large heterogeneous tables with HDF5 and PyTables 146\nChapter 5: High-performance Computing 149\nIntroduction 149\nAccelerating pure Python code with Numba and Just-In-Time compilation 154\nAccelerating array computations with Numexpr 158\nWrapping a C library in Python with ctypes 159\nAccelerating Python code with Cython 163\nOptimizing Cython code by writing less Python and more C 167\nReleasing the GIL to take advantage of multi-core processors with Cython and OpenMP 174\nWriting massively parallel code for NVIDIA graphics cards (GPUs) with CUDA 175\nWriting massively parallel code for heterogeneous platforms with OpenCL 181\nDistributing Python code across multiple cores with IPython 185\nInteracting with asynchronous parallel tasks in IPython 189\nParallelizing code with MPI in IPython 192\nTrying the Julia language in the notebook 195\nChapter 6: Advanced Visualization 201\nIntroduction 201\nMaking nicer matplotlib fgures with prettyplotlib 202\nCreating beautiful statistical plots with seaborn 205\nCreating interactive web visualizations with Bokeh 208\nVisualizing a NetworkX graph in the IPython notebook with D3.js 211\nConverting matplotlib fgures to D3.js visualizations with mpld3 215\nGetting started with Vispy for high-performance interactive data visualizations 218\nChapter 7: Statistical Data Analysis 225\nIntroduction 225\nExploring a dataset with pandas and matplotlib 229\nGetting started with statistical hypothesis testing \u2013 a simple z-test 233\nGetting started with Bayesian methods 236\nEstimating the correlation between two variables with a contingency table and a chi-squared test 241\nFitting a probability distribution to data with the maximum likelihood method 245\nEstimating a probability distribution nonparametrically with a kernel density estimation 251\nFitting a Bayesian model by sampling from a posterior distribution with a Markov chain Monte Carlo method 255\nAnalyzing data with the R programming language in the IPython notebook 261\nChapter 8: Machine Learning 267\nIntroduction 267\nGetting started with scikit-learn 273\nPredicting who will survive on the Titanic with logistic regression 281\nLearning to recognize handwritten digits with a K-nearest neighbors classifer 285\nLearning from text \u2013 Naive Bayes for Natural Language Processing 289\nUsing support vector machines for classifcation tasks 293\nUsing a random forest to select important features for regression 298\nReducing the dimensionality of a dataset with a principal component analysis 302\nDetecting hidden structures in a dataset with clustering 306\nChapter 9: Numerical Optimization 311\nIntroduction 311\nFinding the root of a mathematical function 314\nMinimizing a mathematical function 317\nFitting a function to data with nonlinear least squares 323\nFinding the equilibrium state of a physical system by minimizing its potential energy 326\nChapter 10: Signal Processing 333\nIntroduction 333\nAnalyzing the frequency components of a signal with a Fast Fourier Transform 337\nApplying a linear flter to a digital signal 343\nComputing the autocorrelation of a time series 349\nChapter 11: Image and Audio Processing 353\nIntroduction 353\nManipulating the exposure of an image 355\nApplying flters on an image 358\nSegmenting an image 362\nFinding points of interest in an image 367\nDetecting faces in an image with OpenCV 370\nApplying digital flters to speech sounds 373\nCreating a sound synthesizer in the notebook 377\nChapter 12: Deterministic Dynamical Systems 381\nIntroduction 381\nPlotting the bifurcation diagram of a chaotic dynamical system 383\nSimulating an elementary cellular automaton 387\nSimulating an ordinary differential equation with SciPy 390\nSimulating a partial differential equation \u2013 reaction-diffusion systems and Turing patterns 394\nChapter 13: Stochastic Dynamical Systems 401\nIntroduction 401\nSimulating a discrete-time Markov chain 402\nSimulating a Poisson process 406\nSimulating a Brownian motion 410\nSimulating a stochastic differential equation 412\nChapter 14: Graphs, Geometry, and Geographic Information Systems 417\nIntroduction 417\nManipulating and visualizing graphs with NetworkX 421\nAnalyzing a social network with NetworkX 425\nResolving dependencies in a directed acyclic graph with a topological sort 430\nComputing connected components in an image 434\nComputing the Voronoi diagram of a set of points 438\nManipulating geospatial data with Shapely and basemap 442\nCreating a route planner for a road network 446\nChapter 15: Symbolic and Numerical Mathematics 453\nIntroduction 453\nDiving into symbolic computing with SymPy 454\nSolving equations and inequalities 457\nAnalyzing real-valued functions 458\nComputing exact probabilities and manipulating random variables 460\nA bit of number theory with SymPy 462\nFinding a Boolean propositional formula from a truth table 465\nAnalyzing a nonlinear differential system \u2013 Lotka-Volterra (predator-prey) equations 467\nGetting started with Sage 470\nIndex 473\n\n\n\n\nIntroduction to Python for Econometrics, Statistics and Data Analysis\n\n\n1 Introduction 1\n1.1 Background 1\n1.2 Conventions 2\n1.3 Important Components of the Python Scientific Stack 3\n1.4 Setup 4\n1.5 Using Python 6\n1.6 Exercises 17\n1.A Frequently Encountered Problems 17\n1.B register_python.py 18\n1.C Advanced Setup 19\n2 Python 2.7 vs. 3 (and the rest) 27\n2.1 Python 2.7 vs. 3 27\n2.2 Intel Math Kernel Library and AMD Core Math Library 27\n2.3 Other Variants 28\n2.A Relevant Differences between Python 2.7 and 3 29\n3 Built-in Data Types 31\n3.1 Variable Names 31\n3.2 Core Native Data Types 32\n3.3 Python and Memory Management 42\n3.4 Exercises 44\n4 Arrays and Matrices 47\n4.1 Array 47\n4.2 Matrix 49\n4.3 1-dimensional Arrays 50\n4.4 2-dimensional Arrays 51\n4.5 Multidimensional Arrays 51\n4.6 Concatenation 51\n4.7 Accessing Elements of an Array 52\n4.8 Slicing and Memory Management 57\n4.9 import and Modules 59\n4.10 Calling Functions 59\n4.11 Exercises 61\n5 Basic Math 63\n5.1 Operators 63\n5.2 Broadcasting 64\n5.3 Array and Matrix Addition (+) and Subtraction (-) 65\n5.4 Array Multiplication (x) 66\n5.5 Matrix Multiplication (x) 66\n5.6 Array and Matrix Division (=) 66\n5.7 Array Exponentiation (xx) 66\n5.8 Matrix Exponentiation (xx) 67\n5.9 Parentheses 67\n5.10 Transpose 67\n5.11 Operator Precedence 67\n5.12 Exercises 68\n6 Basic Functions and Numerical Indexing 71\n6.1 Generating Arrays and Matrices 71\n6.2 Rounding 74\n6.3 Mathematics 75\n6.4 Complex Values 77\n6.5 Set Functions 77\n6.6 Sorting and Extreme Values 78\n6.7 Nan Functions 80\n6.8 Functions and Methods/Properties 81\n6.9 Exercises 82\n7 Special Arrays 83\n7.1 Exercises 84\n8 Array and Matrix Functions 85\n8.1 Views 85\n8.2 Shape Information and Transformation 86\n8.3 Linear Algebra Functions 93\n8.4 Exercises 96\n9 Importing and Exporting Data 99\n9.1 Importing Data using pandas 99\n9.2 Importing Data without pandas 100\n9.3 Saving or Exporting Data using pandas 106\n9.4 Saving or Exporting Data without pandas 106\n9.5 Exercises 107\n10 Inf, NaN and Numeric Limits 109\n10.1 inf and NaN 109\n10.2 Floating point precision 109\n10.3 Exercises 110\n11 Logical Operators and Find 113\n11.1 \n, \n=, \n, \n=, ==, != 113\n11.2 and, or, not and xor 114\n11.3 Multiple tests 115\n11.4 is* 116\n11.5 Exercises 117\n12 Advanced Selection and Assignment 119\n12.1 Numerical Indexing 119\n12.2 Logical Indexing 124\n12.3 Performance Considerations and Memory Management 128\n12.4 Assignment with Broadcasting 128\n12.5 Exercises 130\n13 Flow Control, Loops and Exception Handling 133\n13.1 Whitespace and Flow Control 133\n13.2 if . . . elif . . . else  133\n13.3 for 134\n13.4 while 137\n13.5 try . . . except 139\n13.6 List Comprehensions 139\n13.7 Tuple, Dictionary and Set Comprehensions 141\n13.8 Exercises 141\n14 Dates and Times 143\n14.1 Creating Dates and Times 143\n14.2 Dates Mathematics 143\n14.3 Numpy datetime64 144\n15 Graphics 147\n15.1 seaborn 147\n15.2 2D Plotting 147\n15.3 Advanced 2D Plotting 153\n15.4 3D Plotting 162\n15.5 General Plotting Functions 165\n15.6 Exporting Plots 165\n15.7 Exercises 166\n16 Structured Arrays 167\n16.1 Mixed Arrays with Column Names 167\n16.2 Record Arrays 170\n17 pandas 171\n17.1 Data Structures 171\n17.2 Statistical Function 191\n17.3 Time-series Data 192\n17.4 Importing and Exporting Data 196\n17.5 Graphics 200\n17.6 Examples 201\n18 Custom Function and Modules 207\n18.1 Functions 207\n18.2 Variable Scope 214\n18.3 Example: Least Squares with Newey-West Covariance 215\n18.4 Anonymous Functions 216\n18.5 Modules 216\n18.6 Packages 217\n18.7 PYTHONPATH 219\n18.8 Python Coding Conventions 219\n18.9 Exercises 220\n18.A Listing of econometrics.py 221\n19 Probability and Statistics Functions 225\n19.1 Simulating Random Variables 225\n19.2 Simulation and Random Number Generation 229\n19.3 Statistics Functions 231\n19.4 Continuous Random Variables 234\n19.5 Select Statistics Functions 237\n19.6 Select Statistical Tests 240\n19.7 Exercises 241\n20 Non-linear Function Optimization 243\n20.1 Unconstrained Optimization 244\n20.2 Derivative-free Optimization 247\n20.3 Constrained Optimization 248\n20.4 Scalar Function Minimization 252\n20.5 Nonlinear Least Squares 253\n20.6 Exercises 254\n21 String Manipulation 255\n21.1 String Building 255\n21.2 String Functions 256\n21.3 Formatting Numbers 260\n21.4 Regular Expressions 264\n21.5 Safe Conversion of Strings 265\n22 File System Operations 267\n22.1 Changing the Working Directory 267\n22.2 Creating and Deleting Directories 267\n22.3 Listing the Contents of a Directory 268\n22.4 Copying, Moving and Deleting Files 268\n22.5 Executing Other Programs 269\n22.6 Creating and Opening Archives 269\n22.7 Reading and Writing Files 270\n22.8 Exercises 272\n23 Performance and Code Optimization 273\n23.1 Getting Started 273\n23.2 Timing Code 273\n23.3 Vectorize to Avoid Unnecessary Loops 274\n23.4 Alter the loop dimensions 275\n23.5 Utilize Broadcasting 276\n23.6 Use In-place Assignment 276\n23.7 Avoid Allocating Memory 276\n23.8 Inline Frequent Function Calls 276\n23.9 Consider Data Locality in Arrays 276\n23.10 Profile Long Running Functions 277\n23.11 Numba 282\n23.12 Cython 288\n23.13 External Code 297\n23.14 Exercises 302\n24 Executing Code in Parallel 303\n24.1 map and related functions 303\n24.2 multiprocessing 304\n24.3 joblib 306\n24.4 IPython\u2019s Parallel Cluster 308\n24.5 Converting a Serial Program to Parallel 314\n24.6 Other Concerns when executing in Parallel 316\n25 Object Oriented Programming (OOP) 319\n25.1 Introduction 319\n25.2 Class basics 320\n25.3 Building a class for Autoregressions 322\n25.4 Exercises 329\n26 Other Interesting Python Packages 331\n26.1 statsmodels 331\n26.2 pytz and babel 331\n26.3 rpy2 331\n26.4 PyTables and h5py 331\n27 Examples 333\n27.1 Estimating the Parameters of a GARCH Model 333\n27.2 Estimating the Risk Premia using Fama-MacBeth Regressions 338\n27.3 Estimating the Risk Premia using GMM 341\n27.4 Outputting L ATEX 344\n28 Quick Reference 347\n28.1 Built-ins 347\n28.2 NumPy (numpy) 354\n28.3 SciPy 369\n28.4 Matplotlib 372\n28.5 Pandas 374\n28.6 IPython 378\n\n\n\n\nBuilding Machine Learning Systems with Python\n\n\nChapter 1: Getting Started with Python Machine Learning 7\nMachine learning and Python \u2013 the dream team 8\nWhat the book will teach you (and what it will not) 9\nWhat to do when you are stuck 10\nGetting started 11\nIntroduction to NumPy, SciPy, and Matplotlib 12\nInstalling Python 12\nChewing data effciently with NumPy and intelligently with SciPy 12\nLearning NumPy 13\nIndexing 15\nHandling non-existing values 15\nComparing runtime behaviors 16\nLearning SciPy 17\nOur frst (tiny) machine learning application 19\nReading in the data 19\nPreprocessing and cleaning the data 20\nChoosing the right model and learning algorithm 22\nBefore building our frst model 22\nStarting with a simple straight line 22\nTowards some advanced stuff 24\nStepping back to go forward \u2013 another look at our data 26\nTraining and testing 28\nAnswering our initial question 30\nSummary 31\nChapter 2: Learning How to Classify with Real-world Examples 33\nThe Iris dataset 33\nThe frst step is visualization 34\nBuilding our frst classifcation model 35\nEvaluation \u2013 holding out data and cross-validation 38\nBuilding more complex classifers 40\nA more complex dataset and a more complex classifer 41\nLearning about the Seeds dataset 42\nFeatures and feature engineering 43\nNearest neighbor classifcation 44\nBinary and multiclass classifcation 47\nSummary 48\nChapter 3: Clustering \u2013 Finding Related Posts 49\nMeasuring the relatedness of posts 50\nHow not to do it 50\nHow to do it 51\nPreprocessing \u2013 similarity measured as similar number of common words 51\nConverting raw text into a bag-of-words 52\nCounting words 53\nNormalizing the word count vectors 56\nRemoving less important words 56\nStemming 57\nInstalling and using NLTK 58\nExtending the vectorizer with NLTK's stemmer 59\nStop words on steroids 60\nOur achievements and goals 61\nClustering 62\nKMeans 63\nGetting test data to evaluate our ideas on 65\nClustering posts 67\nSolving our initial challenge 68\nAnother look at noise 71\nTweaking the parameters 72\nSummary 73\nChapter 4: Topic Modeling 75\nLatent Dirichlet allocation (LDA) 75\nBuilding a topic model 76\nComparing similarity in topic space 80\nModeling the whole of Wikipedia 83\nChoosing the number of topics 86\nSummary 87\nChapter 5: Classifcation \u2013 Detecting Poor Answers 89\nSketching our roadmap 90\nLearning to classify classy answers 90\nTuning the instance 90\nTuning the classifer 90\nFetching the data 91\nSlimming the data down to chewable chunks 92\nPreselection and processing of attributes 93\nDefning what is a good answer 94\nCreating our frst classifer 95\nStarting with the k-nearest neighbor (kNN) algorithm 95\nEngineering the features 96\nTraining the classifer 97\nMeasuring the classifer's performance 97\nDesigning more features 98\nDeciding how to improve 101\nBias-variance and its trade-off 102\nFixing high bias 102\nFixing high variance 103\nHigh bias or low bias 103\nUsing logistic regression 105\nA bit of math with a small example 106\nApplying logistic regression to our postclassifcation problem 108\nLooking behind accuracy \u2013 precision and recall 110\nSlimming the classifer 114\nShip it! 115\nSummary 115\nChapter 6: Classifcation II \u2013 Sentiment Analysis 117\nSketching our roadmap 117\nFetching the Twitter data 118\nIntroducing the Naive Bayes classifer 118\nGetting to know the Bayes theorem 119\nBeing naive 120\nUsing Naive Bayes to classify 121\nAccounting for unseen words and other oddities 124\nAccounting for arithmetic under\ufb02ows 125\nCreating our frst classifer and tuning it 127\nSolving an easy problem frst 128\nUsing all the classes 130\nTuning the classifer's parameters 132\nCleaning tweets 136\nTaking the word types into account 138\nDetermining the word types 139\nSuccessfully cheating using SentiWordNet 141\nOur frst estimator 143\nPutting everything together 145\nSummary 146\nChapter 7: Regression \u2013 Recommendations 147\nPredicting house prices with regression 147\nMultidimensional regression 151\nCross-validation for regression 151\nPenalized regression 153\nL1 and L2 penalties 153\nUsing Lasso or Elastic nets in scikit-learn 154\nP greater than N scenarios 155\nAn example based on text 156\nSetting hyperparameters in a smart way 158\nRating prediction and recommendations 159\nSummary 163\nChapter 8: Regression \u2013 Recommendations Improved 165\nImproved recommendations 165\nUsing the binary matrix of recommendations 166\nLooking at the movie neighbors 168\nCombining multiple methods 169\nBasket analysis 172\nObtaining useful predictions 173\nAnalyzing supermarket shopping baskets 173\nAssociation rule mining 176\nMore advanced basket analysis 178\nSummary 179\nChapter 9: Classifcation III \u2013 Music Genre Classifcation 181\nSketching our roadmap 181\nFetching the music data 182\nConverting into a wave format 182\nLooking at music 182\nDecomposing music into sine wave components 184\nUsing FFT to build our frst classifer 186\nIncreasing experimentation agility 186\nTraining the classifer 187\nUsing the confusion matrix to measure accuracy in multiclass problems 188\nAn alternate way to measure classifer performance using receiver operator characteristic (ROC) 190\nImproving classifcation performance with Mel Frequency Cepstral Coeffcients 193\nSummary 197\nChapter 10: Computer Vision \u2013 Pattern Recognition 199\nIntroducing image processing 199\nLoading and displaying images 200\nBasic image processing 201\nThresholding 202\nGaussian blurring 205\nFiltering for different effects 207\nAdding salt and pepper noise 207\nPutting the center in focus 208\nPattern recognition 210\nComputing features from images 211\nWriting your own features 212\nClassifying a harder dataset 215\nLocal feature representations 216\nSummary 219\nChapter 11: Dimensionality Reduction 221\nSketching our roadmap 222\nSelecting features 222\nDetecting redundant features using flters 223\nCorrelation 223\nMutual information 225\nAsking the model about the features using wrappers 230\nOther feature selection methods 232\nFeature extraction 233\nAbout principal component analysis (PCA) 233\nSketching PCA 234\nApplying PCA 234\nLimitations of PCA and how LDA can help 236\nMultidimensional scaling (MDS) 237\nSummary 240\nChapter 12: Big(ger) Data 241\nLearning about big data 241\nUsing jug to break up your pipeline into tasks 242\nAbout tasks 242\nReusing partial results 245\nLooking under the hood 246\nUsing jug for data analysis 246\nUsing Amazon Web Services (AWS) 248\nCreating your frst machines 250\nInstalling Python packages on Amazon Linux 253\nRunning jug on our cloud machine 254\nAutomating the generation of clusters with starcluster 255\nSummary 259\nAppendix: Where to Learn More about Machine Learning 261\nOnline courses 261\nBooks 261\nQ\nA sites 262\nBlogs 262\nData sources 263\nGetting competitive 263\nWhat was left out 264\nSummary 264\nIndex 265\n\n\n\n\nScipy Lecture Notes\n\n\nI Getting started with Python for science 2\n1 Scientific computing with tools and workflow 4\n1.1 Why Python? 4\n1.2 Scientific Python building blocks 5\n1.3 The interactive workflow: IPython and a text editor 6\n2 The Python language 10\n2.1 First steps 10\n2.2 Basic types 11\n2.3 Control Flow 18\n2.4 Defining functions 22\n2.5 Reusing code: scripts and modules 27\n2.6 Input and Output 34\n2.7 Standard Library 35\n2.8 Exception handling in Python 39\n2.9 Object-oriented programming (OOP) 42\n3 NumPy: creating and manipulating numerical data 43\n3.1 The Numpy array object 43\n3.2 Numerical operations on arrays 55\n3.3 More elaborate arrays 68\n3.4 Advanced operations 72\n3.5 Some exercises 77\n4 Matplotlib: plotting 82\n4.1 Introduction 82\n4.2 Simple plot 83\n4.3 Figures, Subplots, Axes and Ticks 89\n4.4 Other Types of Plots: examples and exercises 90\n4.5 Beyond this tutorial 96\n4.6 Quick references 98\n5 Scipy : high-level scientific computing 101\n5.1 File input/output: scipy.io 102\n5.2 Special functions: scipy.special 103\n5.3 Linear algebra operations: scipy.linalg 103\n5.4 Fast Fourier transforms: scipy.fftpack 104\n5.5 Optimization and fit: scipy.optimize 109\n5.6 Statistics and random numbers: scipy.stats 113\n5.7 Interpolation: scipy.interpolate 115\n5.8 Numerical integration: scipy.integrate 116\n5.9 Signal processing: scipy.signal 118\n5.10 Image processing: scipy.ndimage 120\n5.11 Summary exercises on scientific computing 124\n6 Getting help and finding documentation 137\nII Advanced topics 140\n7 Advanced Python Constructs 142\n7.1 Iterators, generator expressions and generators 142\n7.2 Decorators 147\n7.3 Context managers 155\n8 Advanced Numpy 159\n8.1 Life of ndarray 160\n8.2 Universal functions 173\n8.3 Interoperability features 182\n8.4 Array siblings: chararray, maskedarray, matrix 185\n8.5 Summary 188\n8.6 Contributing to Numpy/Scipy 188\n9 Debugging code 192\n9.1 Avoiding bugs 192\n9.2 Debugging workflow 195\n9.3 Using the Python debugger 195\n9.4 Debugging segmentation faults using gdb 200\n10 Optimizing code 203\n10.1 Optimization workflow 203\n10.2 Profiling Python code 203\n10.3 Making code go faster 206\n10.4 Writing faster numerical code 207\n11 Sparse Matrices in SciPy 210\n11.1 Introduction 210\n11.2 Storage Schemes 212\n11.3 Linear System Solvers 224\n11.4 Other Interesting Packages 229\n12 Image manipulation and processing using Numpy and Scipy 230\n12.1 Opening and writing to image files 231\n12.2 Displaying images 232\n12.3 Basic manipulations 233\n12.4 Image filtering 235\n12.5 Feature extraction 240\n12.6 Measuring objects properties: ndimage.measurements 243\n13 Mathematical optimization: finding minima of functions 248\n13.1 Knowing your problem 249\n13.2 A review of the different optimizers 251\n13.3 Practical guide to optimization with scipy 258\n13.4 Special case: non-linear least-squares 260\n13.5 Optimization with constraints 261\n14 Interfacing with C 263\n14.1 Introduction 263\n14.2 Python-C-Api 264\n14.3 Ctypes 268\n14.4 SWIG 272\n14.5 Cython 276\n14.6 Summary 279\n14.7 Further Reading and References 280\n14.8 Exercises 280\nIII Packages and applications 282\n15 Statistics in Python 284\n15.1 Data representation and interaction 285\n15.2 Hypothesis testing: comparing two groups 289\n15.3 Linear models, multiple factors, and analysis of variance 292\n15.4 More visualization: seaborn for statistical exploration 297\n15.5 Testing for interactions 299\n16 Sympy : Symbolic Mathematics in Python 301\n16.1 First Steps with SymPy 302\n16.2 Algebraic manipulations 303\n16.3 Calculus 304\n16.4 Equation solving 305\n16.5 Linear Algebra 306\n17 Scikit-image: image processing 308\n17.1 Introduction and concepts 308\n17.2 Input/output, data types and colorspaces 310\n17.3 Image preprocessing / enhancement 312\n17.4 Image segmentation 315\n17.5 Measuring regions\u2019 properties 318\n17.6 Data visualization and interaction 318\n17.7 Feature extraction for computer vision 320\n18 Traits: building interactive dialogs 322\n18.1 Introduction 323\n18.2 Example 323\n18.3 What are Traits 324\n19 3D plotting with Mayavi 340\n19.1 Mlab: the scripting interface 340\n19.2 Interactive work 346\n19.3 Slicing and dicing data: sources, modules and filters 347\n19.4 Animating the data 349\n19.5 Making interactive dialogs 350\n19.6 Putting it together 351\n20 scikit-learn: machine learning in Python 353\n20.1 Loading an example dataset 354\n20.2 Classification 355\n20.3 Clustering: grouping observations together 357\n20.4 Dimension Reduction with Principal Component Analysis 359\n20.5 Putting it all together: face recognition 360\n20.6 Linear model: from regression to sparsity 361\n20.7 Model selection: choosing estimators and their parameters 362\nIndex 363", 
            "title": "IPython Notebook, Collection"
        }, 
        {
            "location": "/IPython Notebook/#ipython-notebook-essentials", 
            "text": "Chapter 1: A Tour of the IPython Notebook 7\nGetting started with Anaconda or Wakari 8\nInstalling Anaconda 8\nRunning the notebook 8\nCreating a Wakari account 10\nCreating your frst notebook 11\nExample \u2013 the coffee cooling problem 12\nExercises 22\nSummary 22\nChapter 2: The Notebook Interface 23\nEditing and navigating a notebook 23\nGetting help and interrupting computations 25\nThe Edit mode 25\nThe Command mode 28\nCell types 29\nIPython magics 33\nInteracting with the operating system 37\nSaving the notebook 37\nConverting the notebook to other formats 38\nRunning shell commands 39\nRunning scripts, loading data, and saving data 41\nRunning Python scripts 41\nRunning scripts in other languages 43\nLoading and saving data 45\nThe rich display system 47\nImages and YouTube videos 47\nHTML 49\nSummary 52\nChapter 3: Graphics with matplotlib 53\nThe plot function 54\nAdding a title, labels, and a legend 59\nText and annotations 62\nThree-dimensional plots 66\nAnimations 71\nSummary 77\nChapter 4: Handling Data with pandas 79\nThe Series class 79\nThe DataFrame class 88\nComputational and graphics tools 95\nAn example with a realistic dataset 101\nSummary 108\nChapter 5: Advanced Computing with SciPy, Numba, and NumbaPro 109\nOverview of SciPy 109\nAdvanced mathematical algorithms with SciPy 111\nSolving equations and fnding optimal values 111\nCalculus and differential equations 117\nAccelerating computations with Numba and NumbaPro 128\nSummary 138\nAppendix A: IPython Notebook Reference Card 139\nStarting the notebook 139\nKeyboard shortcuts 139\nShortcuts in the Edit mode 139\nShortcuts in the Command mode 140\nImporting modules 141\nGetting help 141\nAppendix B: A Brief Review of Python 143\nIntroduction 143\nBasic types, expressions, and variables and their assignment 143\nSequence types 147\nLists 147\nTuples 150\nStrings 151\nDictionaries 152\nControl structures 152\nFunctions, objects, and methods 156\nFunctions 156\nObjects and methods 158\nSummary 159\nAppendix C: NumPy Arrays 161\nIntroduction 161\nArray creation and member access 161\nIndexing and Slicing 164\nIndex 167", 
            "title": "Ipython Notebook Essentials"
        }, 
        {
            "location": "/IPython Notebook/#learning-ipython-for-interactive-computing-and-data-visualization", 
            "text": "Chapter 1: Getting Started with IPython 5\nInstalling IPython and the recommended packages 6\nPrerequisites for IPython 6\nInstalling an all-in-one distribution 7\nInstalling the packages one by one 7\nPackages websites 8\nGetting binary installers 9\nUsing the Python packaging system 11\nInstalling the development versions 12\nTen IPython essentials 13\nRunning the IPython console 13\nUsing IPython as a system shell 14\nUsing the history 15\nTab completion 15\nExecuting a script with the %run command 16\nQuick benchmarking with the %timeit command 17\nQuick debugging with the %debug command 17\nInteractive computing with Pylab 18\nUsing the IPython Notebook 19\nCustomizing IPython 19\nSummary 20\nChapter 2: Interactive Work with IPython 21\nThe extended shell 21\nNavigating through the flesystem 22\nAccessing the system shell from IPython 24\nThe extended Python console 25\nExploring the history 26\nImport/export of Python code 27\nImporting code in IPython 27\nExporting code to a fle 29\nDynamic introspection 29\nTab completion 29\nSource code introspection 31\nUsing the interactive debugger 32\nInteractive benchmarking and profling 33\nControlling the execution time of a command 33\nProfling a script 34\nUsing the IPython notebook 35\nInstallation 36\nThe notebook dashboard 36\nWorking with cells 37\nCell magics 38\nManaging notebooks 39\nMultimedia and rich text editing 39\nGraph plotting 40\nSummary 41\nChapter 3: Numerical Computing with IPython 43\nA primer to vector computing 44\nAn example of computation with Python loops 44\nWhat an array is 45\nReimplementing the example with arrays 48\nCreating and loading arrays 50\nCreating arrays 50\nFrom scratch, element by element 50\nFrom scratch, using predefned templates 51\nFrom random values 52\nLoading arrays 53\nFrom a native Python object 53\nFrom a buffer or an external fle 53\nUsing Pandas 54\nWorking with arrays 56\nSelection 56\nUsing Pandas 57\nUsing NumPy 58\nMore indexing possibilities 59\nManipulation 60\nReshaping 60\nRepeating and concatenating 61\nBroadcasting 62\nPermuting 63\nComputation 63\nAdvanced mathematical processing 65\nSummary 66\nChapter 4: Interactive Plotting and Graphical Interfaces 67\nFigures with Matplotlib 68\nSetting up IPython for interactive visualization 68\nUsing Matplotlib 68\nInteractive navigation 69\nMatplotlib in the IPython notebook 69\nStandard plots 69\nCurves 69\nScatter plots 71\nBar graphs 72\nPlot customization 72\nStyles and colors 73\nGrid, axes, and legends 74\nInteraction from IPython 75\nDrawing multiple plots 76\nAdvanced fgures and graphics 76\nImage processing 77\nLoading images 77\nShowing images 78\nUsing PIL 79\nAdvanced image processing \u2013 color quantization 79\nMaps 81\n3D plots 83\nAnimations 84\nOther visualization packages 84\nGraphical User Interfaces (GUI) 84\nSetting up IPython for interactive GUIs 85\nA  Hello World  example 85\nSummary 87\nChapter 5: High-Performance and Parallel Computing 89\nInteractive task parallelization 90\nParallel computing in Python 90\nDistributing tasks on multiple cores 91\nStarting the engines 91\nCreating a Client instance 92\nUsing the parallel magic 92\nParallel map 93\nA practical example \u2013 Monte Carlo simulations 95\nUsing MPI with IPython 96\nAdvanced parallel computing features of IPython 98\nUsing C in IPython with Cython 99\nInstalling and confguring Cython 99\nUsing Cython from IPython 100\nAccelerating a pure Python algorithm with Cython 101\nPure Python version 101\nNa\u00efve Cython conversion 102\nAdding C types 102\nUsing NumPy and Cython 103\nPython version 103\nCython version 104\nMore advanced options for accelerating Python code 106\nSummary 107\nChapter 6: Customizing IPython 109\nIPython profles 109\nProfle locations 110\nThe IPython confguration fles 110\nLoading scripts when IPython starts 111\nIPython extensions 111\nExample \u2013 line-by-line profling 111\nCreating new extensions 113\nExample \u2013 executing C++ code in IPython 113\nRich representations in the frontend 115\nEmbedding IPython 117\nFinal words 117\nSummary 118\nIndex 119", 
            "title": "Learning IPython for Interactive Computing and Data Visualization"
        }, 
        {
            "location": "/IPython Notebook/#ipython-interactive-computing-and-visualization-cookbook", 
            "text": "Chapter 1: A Tour of Interactive Computing with IPython 9\nIntroduction 9\nIntroducing the IPython notebook 13\nGetting started with exploratory data analysis in IPython 22\nIntroducing the multidimensional array in NumPy for fast array computations 28\nCreating an IPython extension with custom magic commands 32\nMastering IPython configuration system 36\nCreating a simple kernel for IPython 39\nChapter 2: Best Practices in Interactive Computing 45\nIntroduction 45\nChoosing (or not) between Python 2 and Python 3 46\nEffcient interactive computing work\ufb02ows with IPython 50\nLearning the basics of the distributed version control system Git 53\nA typical work\ufb02ow with Git branching 56\nTen tips for conducting reproducible interactive computing experiments 59\nWriting high-quality Python code 63\nWriting unit tests with nose 67\nDebugging your code with IPython 74\nChapter 3: Mastering the Notebook 79\nIntroduction 79\nTeaching programming in the notebook with IPython blocks 84\nConverting an IPython notebook to other formats with nbconvert 89\nAdding custom controls in the notebook toolbar 94\nCustomizing the CSS style in the notebook 96\nUsing interactive widgets \u2013 a piano in the notebook 99\nCreating a custom JavaScript widget in the notebook \u2013 a spreadsheet editor for pandas 103\nProcessing webcam images in real time from the notebook 108\nChapter 4: Profling and Optimization 115\nIntroduction 115\nEvaluating the time taken by a statement in IPython 116\nProfling your code easily with cProfle and IPython 117\nProfling your code line-by-line with line_profler 121\nProfling the memory usage of your code with memory_profler 124\nUnderstanding the internals of NumPy to avoid unnecessary array copying 127\nUsing stride tricks with NumPy 133\nImplementing an effcient rolling average algorithm with stride tricks 135\nMaking effcient array selections in NumPy 138\nProcessing huge NumPy arrays with memory mapping 140\nManipulating large arrays with HDF5 and PyTables 142\nManipulating large heterogeneous tables with HDF5 and PyTables 146\nChapter 5: High-performance Computing 149\nIntroduction 149\nAccelerating pure Python code with Numba and Just-In-Time compilation 154\nAccelerating array computations with Numexpr 158\nWrapping a C library in Python with ctypes 159\nAccelerating Python code with Cython 163\nOptimizing Cython code by writing less Python and more C 167\nReleasing the GIL to take advantage of multi-core processors with Cython and OpenMP 174\nWriting massively parallel code for NVIDIA graphics cards (GPUs) with CUDA 175\nWriting massively parallel code for heterogeneous platforms with OpenCL 181\nDistributing Python code across multiple cores with IPython 185\nInteracting with asynchronous parallel tasks in IPython 189\nParallelizing code with MPI in IPython 192\nTrying the Julia language in the notebook 195\nChapter 6: Advanced Visualization 201\nIntroduction 201\nMaking nicer matplotlib fgures with prettyplotlib 202\nCreating beautiful statistical plots with seaborn 205\nCreating interactive web visualizations with Bokeh 208\nVisualizing a NetworkX graph in the IPython notebook with D3.js 211\nConverting matplotlib fgures to D3.js visualizations with mpld3 215\nGetting started with Vispy for high-performance interactive data visualizations 218\nChapter 7: Statistical Data Analysis 225\nIntroduction 225\nExploring a dataset with pandas and matplotlib 229\nGetting started with statistical hypothesis testing \u2013 a simple z-test 233\nGetting started with Bayesian methods 236\nEstimating the correlation between two variables with a contingency table and a chi-squared test 241\nFitting a probability distribution to data with the maximum likelihood method 245\nEstimating a probability distribution nonparametrically with a kernel density estimation 251\nFitting a Bayesian model by sampling from a posterior distribution with a Markov chain Monte Carlo method 255\nAnalyzing data with the R programming language in the IPython notebook 261\nChapter 8: Machine Learning 267\nIntroduction 267\nGetting started with scikit-learn 273\nPredicting who will survive on the Titanic with logistic regression 281\nLearning to recognize handwritten digits with a K-nearest neighbors classifer 285\nLearning from text \u2013 Naive Bayes for Natural Language Processing 289\nUsing support vector machines for classifcation tasks 293\nUsing a random forest to select important features for regression 298\nReducing the dimensionality of a dataset with a principal component analysis 302\nDetecting hidden structures in a dataset with clustering 306\nChapter 9: Numerical Optimization 311\nIntroduction 311\nFinding the root of a mathematical function 314\nMinimizing a mathematical function 317\nFitting a function to data with nonlinear least squares 323\nFinding the equilibrium state of a physical system by minimizing its potential energy 326\nChapter 10: Signal Processing 333\nIntroduction 333\nAnalyzing the frequency components of a signal with a Fast Fourier Transform 337\nApplying a linear flter to a digital signal 343\nComputing the autocorrelation of a time series 349\nChapter 11: Image and Audio Processing 353\nIntroduction 353\nManipulating the exposure of an image 355\nApplying flters on an image 358\nSegmenting an image 362\nFinding points of interest in an image 367\nDetecting faces in an image with OpenCV 370\nApplying digital flters to speech sounds 373\nCreating a sound synthesizer in the notebook 377\nChapter 12: Deterministic Dynamical Systems 381\nIntroduction 381\nPlotting the bifurcation diagram of a chaotic dynamical system 383\nSimulating an elementary cellular automaton 387\nSimulating an ordinary differential equation with SciPy 390\nSimulating a partial differential equation \u2013 reaction-diffusion systems and Turing patterns 394\nChapter 13: Stochastic Dynamical Systems 401\nIntroduction 401\nSimulating a discrete-time Markov chain 402\nSimulating a Poisson process 406\nSimulating a Brownian motion 410\nSimulating a stochastic differential equation 412\nChapter 14: Graphs, Geometry, and Geographic Information Systems 417\nIntroduction 417\nManipulating and visualizing graphs with NetworkX 421\nAnalyzing a social network with NetworkX 425\nResolving dependencies in a directed acyclic graph with a topological sort 430\nComputing connected components in an image 434\nComputing the Voronoi diagram of a set of points 438\nManipulating geospatial data with Shapely and basemap 442\nCreating a route planner for a road network 446\nChapter 15: Symbolic and Numerical Mathematics 453\nIntroduction 453\nDiving into symbolic computing with SymPy 454\nSolving equations and inequalities 457\nAnalyzing real-valued functions 458\nComputing exact probabilities and manipulating random variables 460\nA bit of number theory with SymPy 462\nFinding a Boolean propositional formula from a truth table 465\nAnalyzing a nonlinear differential system \u2013 Lotka-Volterra (predator-prey) equations 467\nGetting started with Sage 470\nIndex 473", 
            "title": "IPython Interactive Computing and Visualization Cookbook"
        }, 
        {
            "location": "/IPython Notebook/#introduction-to-python-for-econometrics-statistics-and-data-analysis", 
            "text": "1 Introduction 1\n1.1 Background 1\n1.2 Conventions 2\n1.3 Important Components of the Python Scientific Stack 3\n1.4 Setup 4\n1.5 Using Python 6\n1.6 Exercises 17\n1.A Frequently Encountered Problems 17\n1.B register_python.py 18\n1.C Advanced Setup 19\n2 Python 2.7 vs. 3 (and the rest) 27\n2.1 Python 2.7 vs. 3 27\n2.2 Intel Math Kernel Library and AMD Core Math Library 27\n2.3 Other Variants 28\n2.A Relevant Differences between Python 2.7 and 3 29\n3 Built-in Data Types 31\n3.1 Variable Names 31\n3.2 Core Native Data Types 32\n3.3 Python and Memory Management 42\n3.4 Exercises 44\n4 Arrays and Matrices 47\n4.1 Array 47\n4.2 Matrix 49\n4.3 1-dimensional Arrays 50\n4.4 2-dimensional Arrays 51\n4.5 Multidimensional Arrays 51\n4.6 Concatenation 51\n4.7 Accessing Elements of an Array 52\n4.8 Slicing and Memory Management 57\n4.9 import and Modules 59\n4.10 Calling Functions 59\n4.11 Exercises 61\n5 Basic Math 63\n5.1 Operators 63\n5.2 Broadcasting 64\n5.3 Array and Matrix Addition (+) and Subtraction (-) 65\n5.4 Array Multiplication (x) 66\n5.5 Matrix Multiplication (x) 66\n5.6 Array and Matrix Division (=) 66\n5.7 Array Exponentiation (xx) 66\n5.8 Matrix Exponentiation (xx) 67\n5.9 Parentheses 67\n5.10 Transpose 67\n5.11 Operator Precedence 67\n5.12 Exercises 68\n6 Basic Functions and Numerical Indexing 71\n6.1 Generating Arrays and Matrices 71\n6.2 Rounding 74\n6.3 Mathematics 75\n6.4 Complex Values 77\n6.5 Set Functions 77\n6.6 Sorting and Extreme Values 78\n6.7 Nan Functions 80\n6.8 Functions and Methods/Properties 81\n6.9 Exercises 82\n7 Special Arrays 83\n7.1 Exercises 84\n8 Array and Matrix Functions 85\n8.1 Views 85\n8.2 Shape Information and Transformation 86\n8.3 Linear Algebra Functions 93\n8.4 Exercises 96\n9 Importing and Exporting Data 99\n9.1 Importing Data using pandas 99\n9.2 Importing Data without pandas 100\n9.3 Saving or Exporting Data using pandas 106\n9.4 Saving or Exporting Data without pandas 106\n9.5 Exercises 107\n10 Inf, NaN and Numeric Limits 109\n10.1 inf and NaN 109\n10.2 Floating point precision 109\n10.3 Exercises 110\n11 Logical Operators and Find 113\n11.1  ,  =,  ,  =, ==, != 113\n11.2 and, or, not and xor 114\n11.3 Multiple tests 115\n11.4 is* 116\n11.5 Exercises 117\n12 Advanced Selection and Assignment 119\n12.1 Numerical Indexing 119\n12.2 Logical Indexing 124\n12.3 Performance Considerations and Memory Management 128\n12.4 Assignment with Broadcasting 128\n12.5 Exercises 130\n13 Flow Control, Loops and Exception Handling 133\n13.1 Whitespace and Flow Control 133\n13.2 if . . . elif . . . else  133\n13.3 for 134\n13.4 while 137\n13.5 try . . . except 139\n13.6 List Comprehensions 139\n13.7 Tuple, Dictionary and Set Comprehensions 141\n13.8 Exercises 141\n14 Dates and Times 143\n14.1 Creating Dates and Times 143\n14.2 Dates Mathematics 143\n14.3 Numpy datetime64 144\n15 Graphics 147\n15.1 seaborn 147\n15.2 2D Plotting 147\n15.3 Advanced 2D Plotting 153\n15.4 3D Plotting 162\n15.5 General Plotting Functions 165\n15.6 Exporting Plots 165\n15.7 Exercises 166\n16 Structured Arrays 167\n16.1 Mixed Arrays with Column Names 167\n16.2 Record Arrays 170\n17 pandas 171\n17.1 Data Structures 171\n17.2 Statistical Function 191\n17.3 Time-series Data 192\n17.4 Importing and Exporting Data 196\n17.5 Graphics 200\n17.6 Examples 201\n18 Custom Function and Modules 207\n18.1 Functions 207\n18.2 Variable Scope 214\n18.3 Example: Least Squares with Newey-West Covariance 215\n18.4 Anonymous Functions 216\n18.5 Modules 216\n18.6 Packages 217\n18.7 PYTHONPATH 219\n18.8 Python Coding Conventions 219\n18.9 Exercises 220\n18.A Listing of econometrics.py 221\n19 Probability and Statistics Functions 225\n19.1 Simulating Random Variables 225\n19.2 Simulation and Random Number Generation 229\n19.3 Statistics Functions 231\n19.4 Continuous Random Variables 234\n19.5 Select Statistics Functions 237\n19.6 Select Statistical Tests 240\n19.7 Exercises 241\n20 Non-linear Function Optimization 243\n20.1 Unconstrained Optimization 244\n20.2 Derivative-free Optimization 247\n20.3 Constrained Optimization 248\n20.4 Scalar Function Minimization 252\n20.5 Nonlinear Least Squares 253\n20.6 Exercises 254\n21 String Manipulation 255\n21.1 String Building 255\n21.2 String Functions 256\n21.3 Formatting Numbers 260\n21.4 Regular Expressions 264\n21.5 Safe Conversion of Strings 265\n22 File System Operations 267\n22.1 Changing the Working Directory 267\n22.2 Creating and Deleting Directories 267\n22.3 Listing the Contents of a Directory 268\n22.4 Copying, Moving and Deleting Files 268\n22.5 Executing Other Programs 269\n22.6 Creating and Opening Archives 269\n22.7 Reading and Writing Files 270\n22.8 Exercises 272\n23 Performance and Code Optimization 273\n23.1 Getting Started 273\n23.2 Timing Code 273\n23.3 Vectorize to Avoid Unnecessary Loops 274\n23.4 Alter the loop dimensions 275\n23.5 Utilize Broadcasting 276\n23.6 Use In-place Assignment 276\n23.7 Avoid Allocating Memory 276\n23.8 Inline Frequent Function Calls 276\n23.9 Consider Data Locality in Arrays 276\n23.10 Profile Long Running Functions 277\n23.11 Numba 282\n23.12 Cython 288\n23.13 External Code 297\n23.14 Exercises 302\n24 Executing Code in Parallel 303\n24.1 map and related functions 303\n24.2 multiprocessing 304\n24.3 joblib 306\n24.4 IPython\u2019s Parallel Cluster 308\n24.5 Converting a Serial Program to Parallel 314\n24.6 Other Concerns when executing in Parallel 316\n25 Object Oriented Programming (OOP) 319\n25.1 Introduction 319\n25.2 Class basics 320\n25.3 Building a class for Autoregressions 322\n25.4 Exercises 329\n26 Other Interesting Python Packages 331\n26.1 statsmodels 331\n26.2 pytz and babel 331\n26.3 rpy2 331\n26.4 PyTables and h5py 331\n27 Examples 333\n27.1 Estimating the Parameters of a GARCH Model 333\n27.2 Estimating the Risk Premia using Fama-MacBeth Regressions 338\n27.3 Estimating the Risk Premia using GMM 341\n27.4 Outputting L ATEX 344\n28 Quick Reference 347\n28.1 Built-ins 347\n28.2 NumPy (numpy) 354\n28.3 SciPy 369\n28.4 Matplotlib 372\n28.5 Pandas 374\n28.6 IPython 378", 
            "title": "Introduction to Python for Econometrics, Statistics and Data Analysis"
        }, 
        {
            "location": "/IPython Notebook/#building-machine-learning-systems-with-python", 
            "text": "Chapter 1: Getting Started with Python Machine Learning 7\nMachine learning and Python \u2013 the dream team 8\nWhat the book will teach you (and what it will not) 9\nWhat to do when you are stuck 10\nGetting started 11\nIntroduction to NumPy, SciPy, and Matplotlib 12\nInstalling Python 12\nChewing data effciently with NumPy and intelligently with SciPy 12\nLearning NumPy 13\nIndexing 15\nHandling non-existing values 15\nComparing runtime behaviors 16\nLearning SciPy 17\nOur frst (tiny) machine learning application 19\nReading in the data 19\nPreprocessing and cleaning the data 20\nChoosing the right model and learning algorithm 22\nBefore building our frst model 22\nStarting with a simple straight line 22\nTowards some advanced stuff 24\nStepping back to go forward \u2013 another look at our data 26\nTraining and testing 28\nAnswering our initial question 30\nSummary 31\nChapter 2: Learning How to Classify with Real-world Examples 33\nThe Iris dataset 33\nThe frst step is visualization 34\nBuilding our frst classifcation model 35\nEvaluation \u2013 holding out data and cross-validation 38\nBuilding more complex classifers 40\nA more complex dataset and a more complex classifer 41\nLearning about the Seeds dataset 42\nFeatures and feature engineering 43\nNearest neighbor classifcation 44\nBinary and multiclass classifcation 47\nSummary 48\nChapter 3: Clustering \u2013 Finding Related Posts 49\nMeasuring the relatedness of posts 50\nHow not to do it 50\nHow to do it 51\nPreprocessing \u2013 similarity measured as similar number of common words 51\nConverting raw text into a bag-of-words 52\nCounting words 53\nNormalizing the word count vectors 56\nRemoving less important words 56\nStemming 57\nInstalling and using NLTK 58\nExtending the vectorizer with NLTK's stemmer 59\nStop words on steroids 60\nOur achievements and goals 61\nClustering 62\nKMeans 63\nGetting test data to evaluate our ideas on 65\nClustering posts 67\nSolving our initial challenge 68\nAnother look at noise 71\nTweaking the parameters 72\nSummary 73\nChapter 4: Topic Modeling 75\nLatent Dirichlet allocation (LDA) 75\nBuilding a topic model 76\nComparing similarity in topic space 80\nModeling the whole of Wikipedia 83\nChoosing the number of topics 86\nSummary 87\nChapter 5: Classifcation \u2013 Detecting Poor Answers 89\nSketching our roadmap 90\nLearning to classify classy answers 90\nTuning the instance 90\nTuning the classifer 90\nFetching the data 91\nSlimming the data down to chewable chunks 92\nPreselection and processing of attributes 93\nDefning what is a good answer 94\nCreating our frst classifer 95\nStarting with the k-nearest neighbor (kNN) algorithm 95\nEngineering the features 96\nTraining the classifer 97\nMeasuring the classifer's performance 97\nDesigning more features 98\nDeciding how to improve 101\nBias-variance and its trade-off 102\nFixing high bias 102\nFixing high variance 103\nHigh bias or low bias 103\nUsing logistic regression 105\nA bit of math with a small example 106\nApplying logistic regression to our postclassifcation problem 108\nLooking behind accuracy \u2013 precision and recall 110\nSlimming the classifer 114\nShip it! 115\nSummary 115\nChapter 6: Classifcation II \u2013 Sentiment Analysis 117\nSketching our roadmap 117\nFetching the Twitter data 118\nIntroducing the Naive Bayes classifer 118\nGetting to know the Bayes theorem 119\nBeing naive 120\nUsing Naive Bayes to classify 121\nAccounting for unseen words and other oddities 124\nAccounting for arithmetic under\ufb02ows 125\nCreating our frst classifer and tuning it 127\nSolving an easy problem frst 128\nUsing all the classes 130\nTuning the classifer's parameters 132\nCleaning tweets 136\nTaking the word types into account 138\nDetermining the word types 139\nSuccessfully cheating using SentiWordNet 141\nOur frst estimator 143\nPutting everything together 145\nSummary 146\nChapter 7: Regression \u2013 Recommendations 147\nPredicting house prices with regression 147\nMultidimensional regression 151\nCross-validation for regression 151\nPenalized regression 153\nL1 and L2 penalties 153\nUsing Lasso or Elastic nets in scikit-learn 154\nP greater than N scenarios 155\nAn example based on text 156\nSetting hyperparameters in a smart way 158\nRating prediction and recommendations 159\nSummary 163\nChapter 8: Regression \u2013 Recommendations Improved 165\nImproved recommendations 165\nUsing the binary matrix of recommendations 166\nLooking at the movie neighbors 168\nCombining multiple methods 169\nBasket analysis 172\nObtaining useful predictions 173\nAnalyzing supermarket shopping baskets 173\nAssociation rule mining 176\nMore advanced basket analysis 178\nSummary 179\nChapter 9: Classifcation III \u2013 Music Genre Classifcation 181\nSketching our roadmap 181\nFetching the music data 182\nConverting into a wave format 182\nLooking at music 182\nDecomposing music into sine wave components 184\nUsing FFT to build our frst classifer 186\nIncreasing experimentation agility 186\nTraining the classifer 187\nUsing the confusion matrix to measure accuracy in multiclass problems 188\nAn alternate way to measure classifer performance using receiver operator characteristic (ROC) 190\nImproving classifcation performance with Mel Frequency Cepstral Coeffcients 193\nSummary 197\nChapter 10: Computer Vision \u2013 Pattern Recognition 199\nIntroducing image processing 199\nLoading and displaying images 200\nBasic image processing 201\nThresholding 202\nGaussian blurring 205\nFiltering for different effects 207\nAdding salt and pepper noise 207\nPutting the center in focus 208\nPattern recognition 210\nComputing features from images 211\nWriting your own features 212\nClassifying a harder dataset 215\nLocal feature representations 216\nSummary 219\nChapter 11: Dimensionality Reduction 221\nSketching our roadmap 222\nSelecting features 222\nDetecting redundant features using flters 223\nCorrelation 223\nMutual information 225\nAsking the model about the features using wrappers 230\nOther feature selection methods 232\nFeature extraction 233\nAbout principal component analysis (PCA) 233\nSketching PCA 234\nApplying PCA 234\nLimitations of PCA and how LDA can help 236\nMultidimensional scaling (MDS) 237\nSummary 240\nChapter 12: Big(ger) Data 241\nLearning about big data 241\nUsing jug to break up your pipeline into tasks 242\nAbout tasks 242\nReusing partial results 245\nLooking under the hood 246\nUsing jug for data analysis 246\nUsing Amazon Web Services (AWS) 248\nCreating your frst machines 250\nInstalling Python packages on Amazon Linux 253\nRunning jug on our cloud machine 254\nAutomating the generation of clusters with starcluster 255\nSummary 259\nAppendix: Where to Learn More about Machine Learning 261\nOnline courses 261\nBooks 261\nQ A sites 262\nBlogs 262\nData sources 263\nGetting competitive 263\nWhat was left out 264\nSummary 264\nIndex 265", 
            "title": "Building Machine Learning Systems with Python"
        }, 
        {
            "location": "/IPython Notebook/#scipy-lecture-notes", 
            "text": "I Getting started with Python for science 2\n1 Scientific computing with tools and workflow 4\n1.1 Why Python? 4\n1.2 Scientific Python building blocks 5\n1.3 The interactive workflow: IPython and a text editor 6\n2 The Python language 10\n2.1 First steps 10\n2.2 Basic types 11\n2.3 Control Flow 18\n2.4 Defining functions 22\n2.5 Reusing code: scripts and modules 27\n2.6 Input and Output 34\n2.7 Standard Library 35\n2.8 Exception handling in Python 39\n2.9 Object-oriented programming (OOP) 42\n3 NumPy: creating and manipulating numerical data 43\n3.1 The Numpy array object 43\n3.2 Numerical operations on arrays 55\n3.3 More elaborate arrays 68\n3.4 Advanced operations 72\n3.5 Some exercises 77\n4 Matplotlib: plotting 82\n4.1 Introduction 82\n4.2 Simple plot 83\n4.3 Figures, Subplots, Axes and Ticks 89\n4.4 Other Types of Plots: examples and exercises 90\n4.5 Beyond this tutorial 96\n4.6 Quick references 98\n5 Scipy : high-level scientific computing 101\n5.1 File input/output: scipy.io 102\n5.2 Special functions: scipy.special 103\n5.3 Linear algebra operations: scipy.linalg 103\n5.4 Fast Fourier transforms: scipy.fftpack 104\n5.5 Optimization and fit: scipy.optimize 109\n5.6 Statistics and random numbers: scipy.stats 113\n5.7 Interpolation: scipy.interpolate 115\n5.8 Numerical integration: scipy.integrate 116\n5.9 Signal processing: scipy.signal 118\n5.10 Image processing: scipy.ndimage 120\n5.11 Summary exercises on scientific computing 124\n6 Getting help and finding documentation 137\nII Advanced topics 140\n7 Advanced Python Constructs 142\n7.1 Iterators, generator expressions and generators 142\n7.2 Decorators 147\n7.3 Context managers 155\n8 Advanced Numpy 159\n8.1 Life of ndarray 160\n8.2 Universal functions 173\n8.3 Interoperability features 182\n8.4 Array siblings: chararray, maskedarray, matrix 185\n8.5 Summary 188\n8.6 Contributing to Numpy/Scipy 188\n9 Debugging code 192\n9.1 Avoiding bugs 192\n9.2 Debugging workflow 195\n9.3 Using the Python debugger 195\n9.4 Debugging segmentation faults using gdb 200\n10 Optimizing code 203\n10.1 Optimization workflow 203\n10.2 Profiling Python code 203\n10.3 Making code go faster 206\n10.4 Writing faster numerical code 207\n11 Sparse Matrices in SciPy 210\n11.1 Introduction 210\n11.2 Storage Schemes 212\n11.3 Linear System Solvers 224\n11.4 Other Interesting Packages 229\n12 Image manipulation and processing using Numpy and Scipy 230\n12.1 Opening and writing to image files 231\n12.2 Displaying images 232\n12.3 Basic manipulations 233\n12.4 Image filtering 235\n12.5 Feature extraction 240\n12.6 Measuring objects properties: ndimage.measurements 243\n13 Mathematical optimization: finding minima of functions 248\n13.1 Knowing your problem 249\n13.2 A review of the different optimizers 251\n13.3 Practical guide to optimization with scipy 258\n13.4 Special case: non-linear least-squares 260\n13.5 Optimization with constraints 261\n14 Interfacing with C 263\n14.1 Introduction 263\n14.2 Python-C-Api 264\n14.3 Ctypes 268\n14.4 SWIG 272\n14.5 Cython 276\n14.6 Summary 279\n14.7 Further Reading and References 280\n14.8 Exercises 280\nIII Packages and applications 282\n15 Statistics in Python 284\n15.1 Data representation and interaction 285\n15.2 Hypothesis testing: comparing two groups 289\n15.3 Linear models, multiple factors, and analysis of variance 292\n15.4 More visualization: seaborn for statistical exploration 297\n15.5 Testing for interactions 299\n16 Sympy : Symbolic Mathematics in Python 301\n16.1 First Steps with SymPy 302\n16.2 Algebraic manipulations 303\n16.3 Calculus 304\n16.4 Equation solving 305\n16.5 Linear Algebra 306\n17 Scikit-image: image processing 308\n17.1 Introduction and concepts 308\n17.2 Input/output, data types and colorspaces 310\n17.3 Image preprocessing / enhancement 312\n17.4 Image segmentation 315\n17.5 Measuring regions\u2019 properties 318\n17.6 Data visualization and interaction 318\n17.7 Feature extraction for computer vision 320\n18 Traits: building interactive dialogs 322\n18.1 Introduction 323\n18.2 Example 323\n18.3 What are Traits 324\n19 3D plotting with Mayavi 340\n19.1 Mlab: the scripting interface 340\n19.2 Interactive work 346\n19.3 Slicing and dicing data: sources, modules and filters 347\n19.4 Animating the data 349\n19.5 Making interactive dialogs 350\n19.6 Putting it together 351\n20 scikit-learn: machine learning in Python 353\n20.1 Loading an example dataset 354\n20.2 Classification 355\n20.3 Clustering: grouping observations together 357\n20.4 Dimension Reduction with Principal Component Analysis 359\n20.5 Putting it all together: face recognition 360\n20.6 Linear model: from regression to sparsity 361\n20.7 Model selection: choosing estimators and their parameters 362\nIndex 363", 
            "title": "Scipy Lecture Notes"
        }, 
        {
            "location": "/Apprenez a programmer en Python/", 
            "text": "CONTENT\n\n\nShebang Line\n\n\nChapter 8, Exceptions\n\n\nChapter 10, Strings\n\n\nChapter 11, Lists and Tuples 1\n\n\nChapter 12, Lists and Tuples 2\n\n\nChapter 13, Dictionaries\n\n\nChapter 14, Files\n\n\nChapter 17, Classes and docstrings\n\n\nChapter 18, (Class) Properties\n\n\nChapter 19, Special Methods\n\n\nChapter 20, Heritage\n\n\nChapter 21, The for Loop Again\n\n\nChapter 23, Decorators\n\n\nChapter 24, Metaclasses\n\n\nChapter 25, Regular Expressions\n\n\nChapter 26, Time\n\n\nChapter 27, System Programming\n\n\nChapter 28, Maths\n\n\nChapter 29, Password Management\n\n\nChapter 30, Network\n\n\nChapter 31, Tkinter\n\n\nChapter 33, Distribute Scripts and Programs\n\n\nChapter 34, PEP\n\n\nChapter 35, More\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3. From Le Livre du Z\u00e9ro, Simple IT, 2011.\n\n\n\n\nShebang Line\n\n\nshebang, top, file, environment, language, kernel, python2, python 2, python3, python 3, utf, utf8, utf-8\n\n\nOther names: sha-bang, hashbang, pound-bang, hash-pling.\n\n\nAt the top of scripts\n\n\n\n\nIn Windows, Python 2:\n\n\n#! python\n\n\n\n\n\n\nWindows, Python 3:\n\n\n#! python 3\n\n\n\n\n\n\nUNIX, Python 2:\n\n\n#!/usr/bin/env python\n\n\n\n\n\n\nUNIX, Python 3:\n\n\n#!/usr/bin/env python 3\n\n\n\n\n\n\nAdd:\n\n\n# -*coding: utf-8 -*-\n\n\n# -*coding: latin-1 -*-\n\n\n\n\n\n\n\n\nLaunch a script\n\n\n\n\nIn Windows, Python 2:\n\n\npython script.py\n\n\npy script.py\n\n\npy -2 script.py\n\n\npy -2.7 script.py\n\n\n\n\n\n\nIn UNIX, Python 2:\n\n\npython script.py\n\n\n\n\n\n\nIn Windows, Python 3:\n\n\npy -3 script.py\n\n\npy -3.5 script.py\n\n\n\n\n\n\nIn UNIX, Python 3:\n\n\npython3 script.py\n\n\n\n\n\n\n\n\nLaunch the shell/bash\n\n\n\n\nThe shell, Python 2:\n\n\npython\n\n\npy -2\n\n\npy -2.7\n\n\n\n\n\n\nThe bash, Python 2:\n\n\npython\n\n\npython2\n\n\n\n\n\n\nThe shell, Python 3:\n\n\npy -3\n\n\npy -3.5\n\n\n\n\n\n\nThe bash, Python 3:\n\n\npython3\n\n\n\n\n\n\n\n\nChapter 8, Exceptions\n\n\nBasic.\n\n\n\n\ntry:\n block.\n\n\nexcept\n errors.\n\n\nelse:\n.\n\n\nfinally:\n.\n\n\nassert\n tests and conditions.\n\n\nraise\n an exception.\n\n\n\n\nChapter 10, Strings\n\n\nBasic.\n\n\nA \n\"string\"\n.\n\n\n\n\nstr()\n function.\n\n\nupper()\n and \nlower()\n methods; upper/lower characters.\n\n\ncapitalize()\n method; first-letter upper character.\n\n\nleft()\n, \nright()\n, \ncenter()\n methods.\n\n\nstrip()\n, \nlstrip()\n, \nrstrip()\n methods; remove white space\n\n\nformat()\n method.\n\n\ncount()\n method.\n\n\nfind()\n method.\n\n\nreplace()\n method.\n\n\n[:]\n to subset a string.\n\n\nwhile\n loop on a string.\n\n\n\n\nChapter 11, Lists and Tuples 1\n\n\nBasic.\n\n\ndelete, length, size\n\n\nLists are mutable; can add or remove elements from a list; can change the order of elements.\n\n\nA \n[list]\n.\n\n\n\n\ninsert()\n method.\n\n\nappend()\n method.\n\n\nextends()\n method.\n\n\ndel()\n function; delete an indexed element.\n\n\nremove()\n method; remove an occurrence.\n\n\nlen()\n function; length.\n\n\nfor\n loop, \nin\n a list.\n\n\nenumerate()\n function; return the index and elements.\n\n\n\n\nTuples are immutable; cannot be modified.\n\n\n(tuple)\n.\n\n\nChapter 12, Lists and Tuples 2\n\n\nBasic.\n\n\nflexible, function, flexibility, parameter\n\n\nWith lists, functions can have an undetermined number of parameters (very flexible!):\n\n\n\n\ndef my_function(*parameter):\n.\n\n\ndef my_function(a, b, *parameter):\n.\n\n\n\n\nStrings and lists. Create, split, loop through a sequence. Even in a list of list.\n\n\n\n\nsplit()\n method.\n\n\njoin()\n method.\n\n\nfor\n loop, \nin\n a list.\n\n\n\n\nFind the \ntype()\n of a variable (integer, float, boolean, etc.)\n\n\nChapter 13, Dictionaries\n\n\nBasic.\n\n\ndictionary, flexible, function, flexibility, parameter\n\n\nDictionaries are mutable; you can add or remove elements from a dictionary; order of elements is unimportant.\n\n\nOne-entry dictionary: \n{'key': 'value'}\n.\n\n\nWith dictionaries, functions can have an undetermined number of parameters (very flexible!):\n\n\n\n\ndef my_function(**parameter):\n.\n\n\ndef my_function(a, b, **parameter):\n.\n\n\n\n\nCombine lists and dictionaries in a function with an undetermined number of parameters:\n\n\n\n\ndef my_function(*, parameter, **parameter):\n.\n\n\n\n\ndef my_function(a, b, *parameter, **parameter):\n.\n\n\n\n\n\n\ndel dict['key']\n function; delete.\n\n\n\n\npop()\n method; pop out an element.\n\n\nfor\n loop, \nin\n a dictionary.\n\n\nin dict.keys()\n method; extract the dictionary \ndict\n in order.\n\n\nin dict.values()\n method; extract the values from dictionary \ndict\n.\n\n\nin dict.items()\n method to extract the keys and values from dictionary \ndict\n.\n\n\n\n\nChapter 14, Files\n\n\nBasic.\n\n\nos\n module. Perform bash, shell operations such as opening, closing, reading, and writing files. Manage relative and absolute path. In UNIX and Windows.\n\n\n\n\nopen()\n method.\n\n\nclose()\n method.\n\n\nread()\n method.\n\n\n\n\nwrite()\n method.\n\n\n\n\n\n\nwith/as\n method; create aliases.\n\n\n\n\n\n\npickle\n module. Record objects in a file and retrieve them.\n\n\n\n\nPickler()\n method.\n\n\n\n\nChapter 17, Classes and docstrings\n\n\nBasic.\n\n\nclass, instance, self\n\n\ndocstring\n module. Under a \nClass\n, a docstring documents the class. Under \ndef __init__():\n, a docstring documents the attributes. Under \ndef function():\n, a docstring documents the use of the function or class method, under \nvariable\n, a docstring documents the use of the variable.\n\n\nobject.__doc__\n method; accesses the docstring.\n\n\n__all__\n function; displays the list of public names (of objects).\n\n\npydoc\n module. Displays information about an object with the \nhelp(object)\n function.\n\n\ndir(object)\n function; returns an object\ns parameters (all the attributes, methods, functions).\n\n\nobject.__dict__\n method; returns an object\ns attributes.\n\n\nobject.__dict__[\"att_a\"] = \"att_b\"\n changes an object\ns attribute.\n\n\nChapter 18, (Class) Properties\n\n\nBasic.\n\n\ninstance, constructor\n\n\nMore about the \ndef __init__():\n constructor.\n\n\nChapter 19, Special Methods\n\n\nBasic.\n\n\nmathematics, display results\n\n\n\n\ndef __repr__(self):\n modifies the way an object is displayed when called.\n\n\n\n\ndef __str__(self):\n method modifies the way an object is displayed when printed.\n\n\n\n\n\n\ndef __getattr__():\n defines a message when an inexistent object\ns attributes is called (like a \ntry\n block) vs the built-in \nobject.__dict__\n\n\n\n\ndef __setattr__():\n does the same when an object\ns attribute is modified vs the built-in \nobject.__dict__[\"att_a\"] = \"att_b\"\n\n\ndef __delattr__():\n does the same when an object\ns attribute is deleted.\n\n\n\n\ndef __hasattr__():\n returns true or false if the attribute exists.\n\n\n\n\n\n\ndef __getitem__():\n, \ndef __setitem__():\n, and \ndef __delitem__():\n all define what to do when we write, respectively: \nobject[index]\n, \nobject[index] = value\n, and \ndel object[index]\n.\n\n\n\n\n\n\nobject.__contains__\n checks out if a list contains a specific element; like \nin\n\n\n\n\n\n\nobject.__len__()\n shows the size of an object.\n\n\n\n\n\n\nobject.__add__(4)\n is equivalent to \nobject + 4\n; \n\n\n\n\ndef __add():\n as well.\n\n\nobject.__sub__()\n or \n-\n.\n\n\n__mul__\n or \n*\n.\n\n\n__truediv__\n or \n/\n.\n\n\n__floordiv__\n or \n//\n.\n\n\n__mod__\n or \n%\n.\n\n\n__pow__\n or \n**\n.\n\n\n__radd__\n, \n__iadd__\n, etc.\n\n\ndef __eq__():\n or \n==\n.\n\n\n__ne__\n or \n!=\n.\n\n\n__gt__\n or \n.\n\n\n__ge__\n or \n=\n.\n\n\n__lt__\n or \n.\n\n\n\n\n__le__\n or \n=\n.\n\n\n\n\n\n\npickle\n module. Record objects in a file and retrieve them.\n\n\n\n\n\n\n__getstate__\n method.\n\n\n\n\n__setstate__\n method.\n\n\n\n\nChapter 20, Heritage\n\n\nBasic.\n\n\nexcept\n\n\nClass heritage transfers all attributes, parameters and methods from a class to a subclass.\n\n\n\n\nissubclass\n verifies (true or false) if a class is a subclass of another class.\n\n\nisinstance\n verifies if an object comes from a class.\n\n\n\n\nA subclass can inherit from two or more classes (multiple heritage).\n\n\nMore exceptions in a \ntry\n block, \nexcept\n, heritage, \nAttributeError\n, \nException\n, \nBaseException\n, and resolution. \n\n\nExceptions are classes with hierarchy.\n\n\nChapter 21, The for Loop Again\n\n\nBasic.\n\n\nRelated to the \nfor\n loop and how to dig deeper into the iterator with \n__iter__\n and \n__next__\n.\n\n\nIterator can also skip items in a list: iterate from 1 to 5, them jump to 10 and go on. A sort of conditional \nbreak\n. For that, we must generate intervals with \nyield\n.\n\n\nChapter 23, Decorators\n\n\nAdvanced!\n\n\nsimplify code\n\n\nA decorator simplifies:\n\n\ndef function(...):\n    ...\n...\nfunction = decorator (function)\n\n\n\n\nWith:\n\n\n@decorator\ndef function(...):\n    ...\n\n\n\n\nThere are decorators without parameters, with parameters, applied to classes; chained together.\n\n\nUse:\n\n\n\n\nLimit a class instance to only one instance  or one object (a \nsingleton\n).\n\n\nAdd more control on the type of data going into functions. \n\n\n\n\nChapter 24, Metaclasses\n\n\nAdvanced!\n\n\n__init__\n initiates an object with attributes, but does not create the object itself. \n\n\nIt is done by coding a new instance or with \n__new__\n. The method is useful to create immutable objects that cannot be modified.\n\n\nCreate dynamic classes with \ntype\n.\n\n\nChapter 25, Regular Expressions\n\n\nBasic.\n\n\nregex, string, search, beginning, end, replace,  occurrence, character, class, group, number, numbered group, name, named\n\n\nre\n module.\n\n\nChapter 26, Time\n\n\nBasic.\n\n\ndate, time, year, month, day, hour, minute, second, time zone, timezone, time delta, timedelta, time stamp, timestamp, format\n\n\ntime\n module and \ndatetime\n module.\n\n\nChapter 27, System Programming\n\n\nBasic.\n\n\ninput, output, stdin, stdout, open, close, read, write, directory, file\n\n\nsys\n module and \nos\n module. Access system variables and control the operating system.\n\n\nsignal\n module. Read process signals sent to programs (such as stopping and exiting). \n\n\nAccess and control the OS console, enter CLI arguments, program actions usually done with the mouse and the keyboard. \n\n\nsystem\n module, related to \nos\n.\n\n\n\n\nos.system('ls')\n on Linux.\n\n\nos.system('dir')\n on Windows.\n\n\n\n\nFor example:\n\n\nimport os\n\ncmd = os.popen('ls')\n\ncmd\ncmd.read()\n\n\n\n\nChapter 28, Maths\n\n\nBasic.\n\n\nmath\n module.\n\n\nEnables new methods in arithmetics, trigonometry, rounding: \npow()\n, \nsqrt()\n, \nexp()\n, \nfabs()\n, \nradians()\n, \ndegrees()\n, \nceil()\n, \nfloor()\n, \ntrunc()\n, etc\n\n\nfractions\n module.\n\n\nFraction()\n, \nfrom_float()\n, etc.\n\n\nrandom\n module.\n\n\nrandom()\n, \nrandrange()\n, \nrandint()\n, \nchoice()\n, etc.\n\n\nChapter 29, Password Management\n\n\nWeb framework.\n\n\ngetpass\n module.\n\n\nReceive a password, cypher a password, etc.\n\n\nChapter 30, Network\n\n\nWeb framework.\n\n\ntcp, protocol, client, server, connection, http, port, socket, connect,  \n\n\nsocket\n module and \nselect\n module.\n\n\nChapter 31, Tkinter\n\n\nSoftware, application.\n\n\ngui, graphic, interface, window, button, interactive, box, toggle, widget, labels, square, checkbox, list, command\n\n\nTkinter\n module.\n\n\nChapter 33, Distribute Scripts and Programs\n\n\nBasic.\n\n\nMethod 1: Executable File\n\n\ncx_freeze\n creates a standalone executable file. \ncx_Freeze\n is portable (Windows, Linux, Mac OS X), compatible with Py -2 and Py -3, simple, fast, flexible.\n\n\nDownload, install, use the \ncxfreeze\n script\n\n\nAlternative: \npy2exe\n (Windows only).\n\n\nMethod 2: Setup File\n\n\nThe traditional way of distributing a code and a more powerful approach.\n\n\nChapter 34, PEP\n\n\nBasic.\n\n\n\n\nPEP 20: The Zen of Python.\n\n\nPEP 8: coding conventions.\n\n\nidentation, tabulation, line length, line spacing, encoding, importing, spacing, commenting, naming, coding comparisons.\n\n\n\n\n\n\nPEP 257: documentation and docstrings.\n\n\n\n\nChapter 35, More\n\n\nBasic.\n\n\n\n\nReferences.\n\n\nWiki.\n\n\nPEP.\n\n\nDocumentation.\n\n\nBasic library\n\n\nAdditional libraries.\n\n\ngraphical interfaces: Tk, PyQT, PyGTK, wx Python.\n\n\nweb framworks: Django, CherryPy.\n\n\nnetworks: Twisted.\n\n\n\n\n\n\nIndex.", 
            "title": "Apprenez \u00e0 programmer en Python"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-8-exceptions", 
            "text": "Basic.   try:  block.  except  errors.  else: .  finally: .  assert  tests and conditions.  raise  an exception.", 
            "title": "Chapter 8, Exceptions"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-10-strings", 
            "text": "Basic.  A  \"string\" .   str()  function.  upper()  and  lower()  methods; upper/lower characters.  capitalize()  method; first-letter upper character.  left() ,  right() ,  center()  methods.  strip() ,  lstrip() ,  rstrip()  methods; remove white space  format()  method.  count()  method.  find()  method.  replace()  method.  [:]  to subset a string.  while  loop on a string.", 
            "title": "Chapter 10, Strings"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-11-lists-and-tuples-1", 
            "text": "Basic.  delete, length, size  Lists are mutable; can add or remove elements from a list; can change the order of elements.  A  [list] .   insert()  method.  append()  method.  extends()  method.  del()  function; delete an indexed element.  remove()  method; remove an occurrence.  len()  function; length.  for  loop,  in  a list.  enumerate()  function; return the index and elements.   Tuples are immutable; cannot be modified.  (tuple) .", 
            "title": "Chapter 11, Lists and Tuples 1"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-12-lists-and-tuples-2", 
            "text": "Basic.  flexible, function, flexibility, parameter  With lists, functions can have an undetermined number of parameters (very flexible!):   def my_function(*parameter): .  def my_function(a, b, *parameter): .   Strings and lists. Create, split, loop through a sequence. Even in a list of list.   split()  method.  join()  method.  for  loop,  in  a list.   Find the  type()  of a variable (integer, float, boolean, etc.)", 
            "title": "Chapter 12, Lists and Tuples 2"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-13-dictionaries", 
            "text": "Basic.  dictionary, flexible, function, flexibility, parameter  Dictionaries are mutable; you can add or remove elements from a dictionary; order of elements is unimportant.  One-entry dictionary:  {'key': 'value'} .  With dictionaries, functions can have an undetermined number of parameters (very flexible!):   def my_function(**parameter): .  def my_function(a, b, **parameter): .   Combine lists and dictionaries in a function with an undetermined number of parameters:   def my_function(*, parameter, **parameter): .   def my_function(a, b, *parameter, **parameter): .    del dict['key']  function; delete.   pop()  method; pop out an element.  for  loop,  in  a dictionary.  in dict.keys()  method; extract the dictionary  dict  in order.  in dict.values()  method; extract the values from dictionary  dict .  in dict.items()  method to extract the keys and values from dictionary  dict .", 
            "title": "Chapter 13, Dictionaries"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-14-files", 
            "text": "Basic.  os  module. Perform bash, shell operations such as opening, closing, reading, and writing files. Manage relative and absolute path. In UNIX and Windows.   open()  method.  close()  method.  read()  method.   write()  method.    with/as  method; create aliases.    pickle  module. Record objects in a file and retrieve them.   Pickler()  method.", 
            "title": "Chapter 14, Files"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-17-classes-and-docstrings", 
            "text": "Basic.  class, instance, self  docstring  module. Under a  Class , a docstring documents the class. Under  def __init__(): , a docstring documents the attributes. Under  def function(): , a docstring documents the use of the function or class method, under  variable , a docstring documents the use of the variable.  object.__doc__  method; accesses the docstring.  __all__  function; displays the list of public names (of objects).  pydoc  module. Displays information about an object with the  help(object)  function.  dir(object)  function; returns an object s parameters (all the attributes, methods, functions).  object.__dict__  method; returns an object s attributes.  object.__dict__[\"att_a\"] = \"att_b\"  changes an object s attribute.", 
            "title": "Chapter 17, Classes and docstrings"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-18-class-properties", 
            "text": "Basic.  instance, constructor  More about the  def __init__():  constructor.", 
            "title": "Chapter 18, (Class) Properties"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-19-special-methods", 
            "text": "Basic.  mathematics, display results   def __repr__(self):  modifies the way an object is displayed when called.   def __str__(self):  method modifies the way an object is displayed when printed.    def __getattr__():  defines a message when an inexistent object s attributes is called (like a  try  block) vs the built-in  object.__dict__   def __setattr__():  does the same when an object s attribute is modified vs the built-in  object.__dict__[\"att_a\"] = \"att_b\"  def __delattr__():  does the same when an object s attribute is deleted.   def __hasattr__():  returns true or false if the attribute exists.    def __getitem__(): ,  def __setitem__(): , and  def __delitem__():  all define what to do when we write, respectively:  object[index] ,  object[index] = value , and  del object[index] .    object.__contains__  checks out if a list contains a specific element; like  in    object.__len__()  shows the size of an object.    object.__add__(4)  is equivalent to  object + 4 ;    def __add():  as well.  object.__sub__()  or  - .  __mul__  or  * .  __truediv__  or  / .  __floordiv__  or  // .  __mod__  or  % .  __pow__  or  ** .  __radd__ ,  __iadd__ , etc.  def __eq__():  or  == .  __ne__  or  != .  __gt__  or  .  __ge__  or  = .  __lt__  or  .   __le__  or  = .    pickle  module. Record objects in a file and retrieve them.    __getstate__  method.   __setstate__  method.", 
            "title": "Chapter 19, Special Methods"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-20-heritage", 
            "text": "Basic.  except  Class heritage transfers all attributes, parameters and methods from a class to a subclass.   issubclass  verifies (true or false) if a class is a subclass of another class.  isinstance  verifies if an object comes from a class.   A subclass can inherit from two or more classes (multiple heritage).  More exceptions in a  try  block,  except , heritage,  AttributeError ,  Exception ,  BaseException , and resolution.   Exceptions are classes with hierarchy.", 
            "title": "Chapter 20, Heritage"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-21-the-for-loop-again", 
            "text": "Basic.  Related to the  for  loop and how to dig deeper into the iterator with  __iter__  and  __next__ .  Iterator can also skip items in a list: iterate from 1 to 5, them jump to 10 and go on. A sort of conditional  break . For that, we must generate intervals with  yield .", 
            "title": "Chapter 21, The for Loop Again"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-23-decorators", 
            "text": "Advanced!  simplify code  A decorator simplifies:  def function(...):\n    ...\n...\nfunction = decorator (function)  With:  @decorator\ndef function(...):\n    ...  There are decorators without parameters, with parameters, applied to classes; chained together.  Use:   Limit a class instance to only one instance  or one object (a  singleton ).  Add more control on the type of data going into functions.", 
            "title": "Chapter 23, Decorators"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-24-metaclasses", 
            "text": "Advanced!  __init__  initiates an object with attributes, but does not create the object itself.   It is done by coding a new instance or with  __new__ . The method is useful to create immutable objects that cannot be modified.  Create dynamic classes with  type .", 
            "title": "Chapter 24, Metaclasses"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-25-regular-expressions", 
            "text": "Basic.  regex, string, search, beginning, end, replace,  occurrence, character, class, group, number, numbered group, name, named  re  module.", 
            "title": "Chapter 25, Regular Expressions"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-26-time", 
            "text": "Basic.  date, time, year, month, day, hour, minute, second, time zone, timezone, time delta, timedelta, time stamp, timestamp, format  time  module and  datetime  module.", 
            "title": "Chapter 26, Time"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-27-system-programming", 
            "text": "Basic.  input, output, stdin, stdout, open, close, read, write, directory, file  sys  module and  os  module. Access system variables and control the operating system.  signal  module. Read process signals sent to programs (such as stopping and exiting).   Access and control the OS console, enter CLI arguments, program actions usually done with the mouse and the keyboard.   system  module, related to  os .   os.system('ls')  on Linux.  os.system('dir')  on Windows.   For example:  import os\n\ncmd = os.popen('ls')\n\ncmd\ncmd.read()", 
            "title": "Chapter 27, System Programming"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-28-maths", 
            "text": "Basic.  math  module.  Enables new methods in arithmetics, trigonometry, rounding:  pow() ,  sqrt() ,  exp() ,  fabs() ,  radians() ,  degrees() ,  ceil() ,  floor() ,  trunc() , etc  fractions  module.  Fraction() ,  from_float() , etc.  random  module.  random() ,  randrange() ,  randint() ,  choice() , etc.", 
            "title": "Chapter 28, Maths"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-29-password-management", 
            "text": "Web framework.  getpass  module.  Receive a password, cypher a password, etc.", 
            "title": "Chapter 29, Password Management"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-30-network", 
            "text": "Web framework.  tcp, protocol, client, server, connection, http, port, socket, connect,    socket  module and  select  module.", 
            "title": "Chapter 30, Network"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-31-tkinter", 
            "text": "Software, application.  gui, graphic, interface, window, button, interactive, box, toggle, widget, labels, square, checkbox, list, command  Tkinter  module.", 
            "title": "Chapter 31, Tkinter"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-33-distribute-scripts-and-programs", 
            "text": "Basic.  Method 1: Executable File  cx_freeze  creates a standalone executable file.  cx_Freeze  is portable (Windows, Linux, Mac OS X), compatible with Py -2 and Py -3, simple, fast, flexible.  Download, install, use the  cxfreeze  script  Alternative:  py2exe  (Windows only).  Method 2: Setup File  The traditional way of distributing a code and a more powerful approach.", 
            "title": "Chapter 33, Distribute Scripts and Programs"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-34-pep", 
            "text": "Basic.   PEP 20: The Zen of Python.  PEP 8: coding conventions.  identation, tabulation, line length, line spacing, encoding, importing, spacing, commenting, naming, coding comparisons.    PEP 257: documentation and docstrings.", 
            "title": "Chapter 34, PEP"
        }, 
        {
            "location": "/Apprenez a programmer en Python/#chapter-35-more", 
            "text": "Basic.   References.  Wiki.  PEP.  Documentation.  Basic library  Additional libraries.  graphical interfaces: Tk, PyQT, PyGTK, wx Python.  web framworks: Django, CherryPy.  networks: Twisted.    Index.", 
            "title": "Chapter 35, More..."
        }, 
        {
            "location": "/Codecademy Python/", 
            "text": "CONTENT\n\n\nUNIT 1, Python Syntax\n\n\nPython Syntax\n\n\nTip Calculator\n\n\nQuiz 1\n\n\n\n\n\n\nUNIT 2, Strings and Console Output\n\n\nStrings \n Console Output\n\n\nDate and Time\n\n\nQuiz 2\n\n\nProject Python Mad Libs\n\n\n\n\n\n\nUNIT 3, Conditionals and Control Flow\n\n\nConditionals \n Control Flow\n\n\nPygLatin\n\n\nQuiz 3\n\n\nProject Area Calculator\n\n\n\n\n\n\nUNIT 4, Functions\n\n\nFunctions\n\n\nTaking a Vacation\n\n\nQuiz 4\n\n\nProject Number Guess\n\n\n\n\n\n\nUNIT 5, Lists \n Dictionaries\n\n\nLists and Dictionaries\n\n\nA Day at the Supermarket\n\n\nQuiz 5\n\n\nProject Rock, Paper, Scissors\n\n\n\n\n\n\nUNIT 6, Student Becomes the Teacher\n\n\nStudent Becomes the Teacher\n\n\n\n\n\n\nUNIT 7, Lists and Functions\n\n\nLists and Functions\n\n\nBattleship!\n\n\nBattleship FINAL!\n\n\nQuiz 7\n\n\n\n\n\n\nUNIT 8, Loops\n\n\nLoops\n\n\nPractice Makes Perfect\n\n\nQuiz 8\n\n\nProject Command Line Calendar\n\n\n\n\n\n\nUNIT 9, Exam Statistics\n\n\nExam Statistics\n\n\n\n\n\n\nUNIT 10, Advanced Topics in Python\n\n\nAdvanced Topics in Python\n\n\nIntroduction to Bitwise Operators\n\n\nProject RGB-HEX Converter\n\n\n\n\n\n\nUNIT 11, Introduction to Classes\n\n\nIntroduction to Classes\n\n\nMore on Classes\n\n\nQuiz 11\n\n\nProject Bank Account\n\n\n\n\n\n\nUNIT 12, File Input and Output\n\n\nFile Input/Output\n\n\n\n\n\n\nMore I/O\n\n\nQuiz 12\n\n\nProject DNA Analysis\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets and excerpts from the course. Python 2. From Codecademy. \n\n\n\n\nUNIT 1, Python Syntax\n\n\nPython Syntax\n\n\nPython is an easy to learn programming language. You can use it to create web apps, games, even a search engine!\n\n\nprint \nWelcome to Python!\n\nprint(\nWelcome\n)\nprint 5 + 3\nprint(5 + 5)\nprint \nWhat \n + str(3)\nprint \nWhat\n,5\n\n\n\n\nWelcome to Python!\nWelcome\n8\n10\nWhat 3\nWhat 5\n\n\n\na = 30\nprint \nWhat \n + str(a)\n\nb = \nA list \\t*A  \\\\ \\\n \\' \n\nprint b\n\nc = 10 + 20\nprint c\n\n\n\n\nWhat 30\nA list  *A  \\ \" ' \n30\n\n\n\nprint \n1 : %r\n % (a) # read#\nprint \n2 : %s\n % (a) # string#\nprint \n? : %d\n % (a) # digit\nprint \n3 : %r\n % (b)\nprint \n4 : %s\n % (b)\n# print \n? : %d\n % (b) !!!\n\n\n\n\n1 : 30\n2 : 30\n? : 30\n3 : 'A list \\t*A  \\\\ \" \\' '\n4 : A list  *A  \\ \" '\n\n\n\nCreating web apps, games, and search engines all involve storing and working with different types of data. They do so using variables. A variable stores a piece of data, and gives it a specific name.\n\n\nmy_variable = 10\n\n\n\n\nYou just stored a number in a variable. Numbers are one data type we use in programming. A second data type is called a boolean. A boolean is like a light switch. It can only have two values. Just like a light switch can only be on or off, a boolean can only be \nTrue\n or \nFalse\n.\n\n\nmy_int = 7\nmy_float = 1.23\nmy_bool = True\n\n\n\n\nSay \nmy_int = 7\n. You can change the value of a variable by \nreassigning\n it.\n\n\nmy_int = 7\n\nmy_int = 3\n\nprint my_int\n\n\n\n\n3\n\n\n\nIn Python, whitespace is used to structure code. Whitespace is important, so you have to be careful with how you use it.\n\n\ndef spam():\n    eggs = 12\n    return eggs\n\nprint spam()\n\n\n\n\n12\n\n\n\nYou\nll get this error whenever your whitespace is off.\n\n\nThe interpreter runs your code line by line, and checks for any errors.\n\n\nYou probably saw us use the # sign a few times in earlier exercises. The # sign is for comments. A comment is a line of text that Python won\nt try to run as code. It\ns just for humans to read.\n\n\nComments make your program easier to understand. When you look back at your code or others want to collaborate with you, they can read your comments and easily figure out what your code does.\n\n\nThe \n#\n sign will only comment out a single line. While you could write a multi-line comment, starting each line with \n#\n, that can be a pain.\n\n\nInstead, for multi-line comments, you can include the whole block in a set of triple quotation marks:\n\n\n\nSipping from your cup 'til it runneth over,\nHoly Grail.\n\n\n\n\n\n\n\"\\nSipping from your cup 'til it runneth over,\\nHoly Grail.\\n\"\n\n\n\nGreat! Now let\ns do some math. You can add, subtract, multiply, divide numbers.\n\n\naddition = 72 + 23\nsubtraction = 108 - 204\nmultiplication = 108 * 0.5\ndivision = 108 / 9\n\ncount_to = 72 + 56\n\nprint count_to\n\n\n\n\n128\n\n\n\nAll that math can be done on a calculator, so why use Python? Because you can combine math with other data types (e.g. booleans) and commands to create useful programs. Calculators just stick to numbers.\n\n\nCreate a new variable called eight and set it to 8, or the result of 2 to the power to 3 (\n2 ^ 3\n oe \n2 ** 3\n).\n\n\neggs = 10 ** 2\n\nprint eggs\n\n\n\n\n100\n\n\n\nOur final operator is modulo. Modulo returns the remainder from a division. So, if you type \n3 % 2\n, it will return 1, because 2 goes into 3 evenly once, with 1 left over.\n\n\nspam = 5 % 4\n\nprint spam\n\n\n\n\n1\n\n\n\nTip Calculator\n\n\nNow let\ns apply the concepts from the previous section to a real world example. You\nve finished eating at a restaurant, and received this bill:\n\n\n\n\nCost of meal: $44.50\n\n\nRestaurant tax: 6.75%\n\n\nTip: 15%\n\n\n\n\nmeal = 44.50\ntax = 6.75/100 \ntip = 0.15\n\nmeal = meal + meal * tax\ntotal = meal + meal * tip\n\nprint(\n%.2f\n) % total\n\n\n\n\n54.63\n\n\n\nQuiz 1\n\n\nOK\n\n\nUNIT 2, Strings and Console Output\n\n\nStrings \n Console Output\n\n\nAnother useful data type is the string. A string can contain letters, numbers, and symbols.\n\n\nname = \nRyan\n\nage = \n19\n\nfood = \ncheese\n\n\n\n\n\nLet\ns get a little practice in with strings.\n\n\ncaesar = \nGraham\n\npraline = \nJohn\n\nviking = \nTeresa\n\n\nprint caesar\nprint praline\nprint viking\n\n\n\n\nGraham\nJohn\nTeresa\n\n\n\n'There's a snake in my boot!'\n\n\n\n\n  File \"\nipython-input-16-13621f01b99c\n\", line 1\n    'There's a snake in my boot!'\n           ^\nSyntaxError: invalid syntax\n\n\n\nThis code breaks because Python thinks the apostrophe in \nThere\ns\n ends the string. We can use the backslash to fix the problem, like this:\n\n\n'There\\'s a snake in my boot!'\n'This isn\\'t flying, this is falling with style!'\n\n\n\n\n\"This isn't flying, this is falling with style!\"\n\n\n\nEach character in a string is assigned a number. This number is called the index. Check out the diagram in the editor.\n\n\nc = \ncats\n[0]\nn = \nRyan\n[3]\n\n\n\nThe string \nPYTHON\n has six characters,\nnumbered 0 to 5, as shown below:\n\n+---+---+---+---+---+---+\n| P | Y | T | H | O | N |\n+---+---+---+---+---+---+\n  0   1   2   3   4   5\n\nSo if you wanted \nY\n, you could just type\n\nPYTHON\n[1] (always start counting from 0!)\n\n\nfifth_letter = \nMONTY\n[4]\n\nprint fifth_letter\n\n\n\n\nY\n\n\n\nNow that we know how to store strings, let\ns see how we can change them using string methods. String methods let you perform specific tasks for strings. We\nll focus on four string methods:\n\n\n\n\nlen()\n\n\nlower()\n\n\nupper()\n\n\nstr()\n\n\n\n\nlength, string\n\n\nparrot = \nNorwegian Blue\n\n\nprint len(parrot) # length, number of characters, including blanks\nprint parrot.lower() # to lowercases\nprint parrot.upper() # to uppercases\n\npi = 3.14\n\nprint str(pi) # number of character in the string\n\n\n\n\n14\nnorwegian blue\nNORWEGIAN BLUE\n3.14\n\n\n\nlen(string)\n and \nstr(object)\n, but dot notation (such as \nString\n.upper()) for the rest.\n\n\nMethods that use dot notation only work with strings.\n\n\nOn the other hand, \nlen()\n and \nstr()\n can work on other data types.\n\n\nThe area where we\nve been writing our code is called the editor. The console is where the results of your code is shown. \nprint\n simply displays your code in the console.\n\n\nprint \nMonty Python\n\n\nthe_machine_goes = \nPing!\n\nprint the_machine_goes\n\n\n\n\nMonty Python\nPing!\n\n\n\nNow let\ns combine the two! The \n+\n operator between strings will \nadd\n them together, one after the other. Notice that there are spaces inside the quotation marks after Life and of so that we can make the combined string look like 3 words. Combining strings together like this is called concatenation. Let\ns try concatenating a few strings together now!\n\n\nprint \nLife \n + \nof \n + \nBrian\n\nprint \nSpam and eggs\n\n\n\n\n\nLife of Brian\nSpam and eggs\n\n\n\nSometimes you need to combine a string with something that isn\nt a string. In order to do that, you have to convert the non-string into a string. he \nstr()\n method converts non-strings into strings. In the above example, you convert the number 2 into a string and then you concatenate the strings together.\n\n\nprint \nThe value of pi is around \n + str(3.14)\n\n\n\n\nThe value of pi is around 3.14\n\n\n\nWhen you want to print a variable with a string, the \n%\n operator after a string is used to combine a string with variables. The \n%\n operator will replace a \n%s\n in the string with the string variable that comes after it.\n\n\nstring_1 = \nCamelot\n\nstring_2 = \nplace\n\n\nprint \nLet's not go to %s. 'Tis a silly %s.\n % (string_1, string_2)\n\nname = raw_input(\nWhat is your name?\n)\nquest = raw_input(\nWhat is your quest?\n)\ncolor = raw_input(\nWhat is your favorite color?\n)\n\nprint \nAh, so your name is %s, your quest is %s, \n \\\n    \nand your favorite color is %s.\n % (name, quest, color)\n\n\n\n\nLet's not go to Camelot. 'Tis a silly place.\nWhat is your name?Al\nWhat is your quest?Graal\nWhat is your favorite color?red\nAh, so your name is Al, your quest is Graal, and your favorite color is red.\n\n\n\nDate and Time\n\n\nA lot of times you want to keep track of when something happened. We can do so in Python using \ndatetime\n. Here we\nll use datetime to print the date and time in a nice format.\n\n\nfrom datetime import datetime # all functions from datetime are imported\n\nnow = datetime.now()\n\nprint now\nprint now.year\nprint now.month\nprint now.day\n\nprint '%s/%s/%s' % (now.month, now.day, now.year)\nprint '%s:%s:%s' % (now.hour, now.minute, now.second)\n\nprint '%s/%s/%s %s:%s:%s' % (now.month, now.day, now.year, now.hour, now.minute, now.second)\n\n\n\n\n2016-10-18 14:02:03.661000\n2016\n10\n18\n10/18/2016\n14:2:3\n10/18/2016 14:2:3\n\n\n\nQuiz 2\n\n\ntime = datetime.now()\nprint time.day\n\ntime = datetime.now() #13:08:09\nprint str(time.hour) + \n:\n + str(time.minute) + \n:\n + str(time.second)\n\nnow = datetime.now() #2013-01-04 19:22:43\n\nprint '%s/%s/%s %s:%s:%s' % (now.day, now.month, now.year, now.hour, now.minute, now.second)\n\nday = 04\n\n\n\n\n18\n14:2:11\n18/10/2016 14:2:11\n\n\n\nProject Python Mad Libs\n\n\nconcatenate, variable\n\n\nPython can be used for a variety of different tasks. In this project, we\nll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story.\n\n\nMad Libs require:\n\n\n\n\nWords from the reader (for the blank spaces)\n\n\nA story to plug the words into\n\n\n\n\nFor this project, we\nll provide you with the story (feel free to modify it), but it will be up to you to build a program that does the following:\n\n\n\n\nPrompt the user for input\n\n\nPrint the entire Mad Libs story with the user\ns input in the right places   \n\n\n\n\n\nPython can be used for a variety of different tasks. In this project, we'll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story.\n\n\n\nprint \nThe program is running.\n\n\nname = raw_input(\nInput a name? \n)\n\nadj_one = raw_input(\nInput an adjective? \n)\nadj_two = raw_input(\nInput another adjective? \n)\nadj_three = raw_input(\nInput a last adjective? \n)\n\nverb_one = raw_input(\nInput a verb? \n)\nverb_two = raw_input(\nInput another verb? \n)\nverb_three = raw_input(\nInput a last verb? \n)\n\nnoun_one = raw_input(\nInput a noun? \n)\nnoun_two = raw_input(\nInput another noun? \n)\nnoun_three = raw_input(\nInput another noun? \n)\nnoun_four = raw_input(\nInput a last noun? \n)\n\nanimal = raw_input(\nInput an animal? \n)\nfood = raw_input(\nInput a food? \n)\nfruit = raw_input(\nInput a fruit? \n)\nnumber = raw_input(\nInput a number? \n)\nsuperhero = raw_input(\nInput a superhero? \n)\ncountry = raw_input(\nInput a country? \n)\ndessert = raw_input(\nInput a dessert? \n)\nyear = raw_input(\nInput a year? \n)\nprint \n\n\n\n\n\nThe program is running.\nInput a name? Al\nInput an adjective? small\nInput another adjective? great\nInput a last adjective? yellow\nInput a verb? dig\nInput another verb? walk\nInput a last verb? eat\nInput a noun? spoon\nInput another noun? lamp\nInput another noun? table\nInput a last noun? pen\nInput an animal? dog\nInput a food? pasta\nInput a fruit? apple\nInput a number? 10\nInput a superhero? spiderman\nInput a country? mexico\nInput a dessert? apple pie\nInput a year? 2016\n\n\n\nThe template for the story.\n\n\nSTORY = \nThis morning I woke up and felt %s because %s was going to finally %s over the big %s %s. On the other side of the %s were many %ss protesting to keep %s in stores. The crowd began to %s to the rythym of the %s, which made all of the %ss very %s. %s tried to %s into the sewers and found %s rats. Needing help, %s quickly called %s. %s appeared and saved %s by flying to %s and dropping %s into a puddle of %s. %s then fell asleep and woke up in the year %s, in a world where %ss ruled the world.\n\n\nprint STORY % (adj_one, name, verb_one, adj_two, noun_one, noun_two, animal, food, verb_two, noun_three, fruit, adj_three, name, verb_three, number, name, superhero, superhero, name, country, name, dessert, name, year, noun_four)\n\n\n\n\nThis morning I woke up and felt small because Al was going to finally dig over the big great spoon. On the other side of the lamp were many dogs protesting to keep pasta in stores. The crowd began to walk to the rythym of the table, which made all of the apples very yellow. Al tried to eat into the sewers and found 10 rats. Needing help, Al quickly called spiderman. spiderman appeared and saved Al by flying to mexico and dropping Al into a puddle of apple pie. Al then fell asleep and woke up in the year 2016, in a world where pens ruled the world.\n\n\n\nUNIT 3, Conditionals and Control Flow\n\n\nConditionals \n Control Flow\n\n\nControl flow gives us this ability to choose among outcomes based off what else is happening in the program.\n\n\ndef clinic():\n\n    print \nYou've just entered the clinic!\n\n    print \nDo you take the door on the left or the right?\n\n    answer = raw_input(\nType left or right and hit 'Enter'.\n).lower()\n    if answer == \nleft\n or answer == \nl\n:\n        print \nThis is the Verbal Abuse Room, you heap of parrot droppings!\n\n    elif answer == \nright\n or answer == \nr\n:\n        print \nOf course this is the Argument Room, I've told you that already!\n\n    else:\n        print \nYou didn't pick left or right! Try again.\n\n        clinic() # launch the function back\n\nclinic()\n\n\n\n\nYou've just entered the clinic!\nDo you take the door on the left or the right?\nType left or right and hit 'Enter'.left\nThis is the Verbal Abuse Room, you heap of parrot droppings!\n\n\n\nComparators. There are six:\n\n\n\n\nEqual to: \n==\n\n\nNot equal to: \n!=\n\n\nLess than: \n\n\nLess than or equal to: \n=\n\n\nGreater than: \n\n\nGreater than or equal to: \n=\n\n\n\n\nNote that \n==\n compares whether two things are equal, and \n=\n assigns a value to a variable.\n\n\nbool_one = 1 + 2\nbool_two = 3\nbool_one == bool_two # true\n\n\n\n\nTrue\n\n\n\nBoolean operators compare statements and result in boolean values. There are three boolean operators:\n\n\n\n\nand\n, which checks if both the statements are True;\n\n\nor\n, which checks if at least one of the statements is True;\n\n\nnot\n, which gives the opposite of the statement.\n\n\n\n\nbool_one = 1 \n 2 and 2 \n 3 # false\nbool_two = False and True # false\nbool_one = True or False # true\nbool_two = 2 == 2 or 2 == 3 # true\nbool_one = not 40 != 41 # true\n\n\n\n\nif\n is a conditional statement.\n\n\nanswer = \nLeft\n\n\nif answer == \nLeft\n:\n    print \nThis is the Verbal Abuse Room, you heap of parrot droppings!\n\n\ndef using_control_once():\n\n    if \nA\n==\nA\n:\n        return \nSuccess #1\n\n\ndef using_control_again():\n\n    if 1!=2:\n        return \nSuccess #2\n\n\nprint using_control_once()\nprint using_control_again()\n\n\n\n\nThis is the Verbal Abuse Room, you heap of parrot droppings!\nSuccess #1\nSuccess #2\n\n\n\nThe \nelse\n statement complements the \nif\n statement.\n\n\nanswer = \n'This but a scratch!\n\n\ndef black_knight():\n\n    if answer == \n'Tis but a scratch!\n:\n        return True\n    else:             \n        return False  # Make sure this returns False\n\ndef french_soldier():\n\n    if answer == \nGo away, or I shall taunt you a second time!\n:\n        return True\n    else:             \n        return False  # Make sure this returns False\n\nprint black_knight()\nprint french_soldier()\n\n\n\n\nFalse\nFalse\n\n\n\nelif\n is short for \nelse if\n. It means exactly what it sounds like: \notherwise, if the following expression is true, do this!\n\n\ndef greater_less_equal_5(answer):\n\n    if answer \n 5:\n        return 1\n    elif answer \n 5:          \n        return -1\n    else:\n        return 0\n\nprint greater_less_equal_5(4)\nprint greater_less_equal_5(5)\nprint greater_less_equal_5(6)\n\n\ndef the_flying_circus():\n\n    if 1 != 0 and 3 \n 2:\n        return True\n    elif 0 == 0 or 2 == 2:\n        return False\n    else:\n        return True\n\nprint the_flying_circus()\n\n\n\n\n-1\n0\n1\nTrue\n\n\n\nPygLatin\n\n\nNow let\ns take what we\nve learned so far and write a Pig Latin translator. Pig Latin is a language game, where you move the first letter of the word to the end and add \nay.\n So \nPython\n becomes \nythonpay.\n \n\n\nprint 'Welcome to the Pig Latin Translator!'\n\noriginal = raw_input(\nEnter a word:\n)\nif len(original) \n 0 and original.isalpha():\n    print original\nelse:\n    print \nempty\n\n\n\npyg = 'ay'\n\noriginal = raw_input('Enter a word: ')\n\nif len(original) \n 0 and original.isalpha():\n    word = original.lower()\n    first = word[0]\n    new_word = word + first + pyg\n    new_word = new_word[1:len(new_word)]\n    print new_word\nelse:\n    print 'empty'\n\n\n\n\nWelcome to the Pig Latin Translator!\nEnter a word:translator\ntranslator\nEnter a word: radiator\nadiatorray\n\n\n\nQuiz 3\n\n\nTakeaway: there no limits to the number of \nelif\n.\n\n\nProject Area Calculator\n\n\nPython is especially useful for doing math and can be used to automate many calculations. In this project, you\nll create a calculator than can compute the area of a given shape, as selected by the user. The calculator will be able to determine the area of the following shapes:\n\n\n\n\nCircle\n\n\nTriangle\n\n\n\n\nThe program should do the following:\n\n\n\n\nPrompt the user to select a shape\n\n\nDepending on the shape the user selects, calculate the area of that shape\n\n\nPrint the area of that shape to the user\n\n\n\n\nPython is especially useful for doing math and can be used to automate many calculations.\n\n\nfrom math import pi\nfrom time import sleep\nfrom datetime import datetime\n\nnow = datetime.now() # from datetime\nprint \nThe calculator is starting up at: \\n\n+str(now)\n\nprint \n\\nCurently: %s/%s/%s %s:%s\n %(now.month, now.day, now.year, now.hour, now.minute)\n\nsleep(1) # pause 1 sec\n\nhint = \nDon't forget to include the correct units!\n\n\n\nfrom math import pi\nfrom time import sleep\n\ndef question():\n\n        option = raw_input(\nEnter C for Circle or T for Triangle: \n)\n        if option.upper() == 'C' or option.upper() == 'CIRCLE':\n            print circle()\n        elif option.upper() == 'T' or option.upper() == 'TRIANGLE':\n            print triangle()\n        else:\n            print \nPlease answer with a C or T\n, question() #!!!!!!\n\ndef circle():\n\n    radius = float(raw_input(\nEnter radius: \n))\n\n    areac = pi * (radius ** 2)\n    print \nThe pie is baking...\n\n    sleep(1)\n    return(str(\n%.2f\n % areac)) # !!!!!\n\ndef triangle():\n\n    base = float(raw_input(\nEnter base: \n))\n    height = float(raw_input(\nEnter height: \n))\n    areat = base * height / 2\n    print \nUni Bi Tri...\n\n    sleep(1)\n    return(str(\n%.2f\n % areat)) # !!!!!\n\nquestion()\n\n\n\n\nThe calculator is starting up at: \n2016-10-18 14:05:19.204000\n\nCurently: 10/18/2016 14:5\nEnter C for Circle or T for Triangle: T\nEnter base: 10\nEnter height: 5\nUni Bi Tri...\n25.00\n\n\n\nUNIT 4, Functions\n\n\nFunctions\n\n\nYou might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it\ns much cleaner to define a function, which can then be used repeatedly.\n\n\ndef tax(billa):\n\n    billb = float(billa) * 1.08\n    return billb\n\ndef tip(billc):\n\n    billd = float(billc) * 1.15\n    return billd\n\nmeal_cost = 100.00\nmeal_with_tax = tax(meal_cost)\nprint(\nWith tax: %.2f\n % meal_with_tax) # !!!!!\nmeal_with_tip = tip(meal_with_tax)\nprint(\nWith tip: %.2f\n % meal_with_tip)\n\n# The header, the comment, the body:\ndef spam():\n\n    \nprint the string \nEggs!\n to the console.\n\n    print \nEggs!\n\n\n\n\n\nWith tax: 108.00\nWith tip: 124.20\n\n\n\nAfter defining a function, it must be called to be implemented.\n\n\ndef square(n):\n\n    \nReturns the square of a number.\n\n    squared = n ** 2\n    return(\n%d squared is %d.\n % (n, squared))\n\nprint square(10)\n\n\n\n\n10 squared is 100.\n\n\n\nFunctions can be much more powerful than that. For example, a function can call another function.\n\n\nn = 1\n\ndef one_good_turn(n):\n\n    return n + 1\n\ndef deserves_another(m):\n\n    return one_good_turn(m) + 2 # calling a function already defined\n\n\n\n\nAgain.\n\n\ndef cube(number):\n\n    return number ** 3\n\ndef by_three(number):\n\n    if number % 3 == 0:    \n        return cube(number)\n    else:\n        return False\n\nby_three(3)\n\n\n\n\n27\n\n\n\nImport modules to use custom functions.\n\n\nimport math\n\nprint math.sqrt(25)\n\n\n\n\n5.0\n\n\n\nHowever, we only really needed the sqrt function, and it can be frustrating to have to keep typing \nmath.sqrt()\n. It\ns possible to import only certain variables or functions from a given module (like \npi\n above). Pulling in just a single function from a module is called a function import, and it\ns done with the from keyword.\n\n\nfrom math import sqrt # module 'math', function 'sqrt'\nfrom math import pi # module 'math', variable 'pi'\n\n\n\n\nUniversal \nimport\n can handle all of the variables and functions in a module to avoid to constantly type \nmath\n.\n\n\nfrom math import *\n\n\n\n\nUniversal \nimport\n may look great on the surface, but they\nre not a good idea for one very important reason: they fill your program with a ton of variable and function names without the safety of those names still being associated with the module(s) they came from.\n\n\ndir(), dir\n\n\nimport math\n\neverything = dir(math)\nprint everything\n\n\n\n\n['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']\n\n\n\nFor these reasons, it\ns best to stick with either \nimport module\n and type \nmodule.name\n or just import specific variables and functions from various modules as needed.\n\n\nLet\ns look at some of the functions that are built in to Python (no modules required!).\n\n\ndef distance_from_zero(arg):\n\n    return abs(arg)\n\ndef biggest_number(arg1, arg2):\n\n    return min(arg1, arg2)\n\ndef smallest_number(*args):\n\n    return min(args)\n\nprint distance_from_zero(-10)\n\n\n\n\nprint biggest_number(-10, -5)\n\n\n\n\n-10\n\n\n\nprint biggest_number(-10, -5, 5, 10) # test\n\n\n\n\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n\nipython-input-24-40abbc687778\n in \nmodule\n()\n----\n 1 print biggest_number(-10, -5, 5, 10) # test\n\n\nTypeError: biggest_number() takes exactly 2 arguments (4 given)\n\n\n\nprint smallest_number(1, 2)\nprint smallest_number(3, 4, 5, 6, 7)\nprint smallest_number(-10, -5, 5, 10)\n\n\n\n\n1\n3\n-10\n\n\n\nmaximum = max(-5, 3, 5, 10)\nprint maximum\n\nminimum = min(-3, -5)\nprint minimum\n\nabsolute = abs(-42)\nprint absolute\n\nprint type(42) # \ntype 'int'\n\nprint type(4.2) # \ntype 'float'\n\nprint type('spam') # \ntype 'str'\n\n\n\n\n\n10\n-5\n42\n\ntype 'int'\n\n\ntype 'float'\n\n\ntype 'str'\n\n\n\n\nTaking a Vacation\n\n\ndef hotel_cost(nights):\n\n    return 140 * nights\n\ndef plane_ride_cost(city):\n\n    if city == \nCharlotte\n:\n        return 183\n    elif city == \nTampa\n:\n        return 220\n    elif city == \nPittsburgh\n:\n        return 222\n    elif city == \nLos Angeles\n:\n        return 475\n\ndef rental_car_cost(days):\n\n    cost = days * 40\n    if days \n= 7:\n        cost -= 50\n    elif days \n= 3 and days\n7:\n        cost -= 20\n    else:\n        cost\n    return cost\n\ndef trip_cost(city, days, spending_money):\n\n    return rental_car_cost(days) + hotel_cost(days)+plane_ride_cost(city) + spending_money\n\nprint trip_cost(\nLos Angeles\n, 5, 600)\n\n\n\n\n1955\n\n\n\nQuiz 4\n\n\nOK\n\n\nProject Number Guess\n\n\nWanna play a game? In this project, we\nll build a program that rolls a pair of dice and asks the user to guess a number. Based on the user\ns guess, the program should determine a winner. If the user\ns guess is greater than the total value of the dice roll, they win! Otherwise, the computer wins.\n\n\nThe program should do the following:\n\n\n\n\nRandomly roll a pair of dice\n\n\nAdd the values of the roll\n\n\nAsk the user to guess a number\n\n\nCompare the user\ns guess to the total value\n\n\nDecide a winner (the user or the program)\n\n\nInform the user who the winner is\n\n\n\n\nfrom random import randint\nfrom time import sleep\n\ndef get_user_guess():\n\n    user_guess = int(raw_input(\nGuess a number: \n))\n    return user_guess\n\ndef roll_dice(number_of_sides):\n\n    first_roll = randint(1, number_of_sides)\n    second_roll = randint(1, number_of_sides)\n    max_value = number_of_sides * 2\n    print \nThe maximum value is: \n+str(max_value)\n    sleep(1)\n    user_guess = get_user_guess()\n    if user_guess \n max_value:\n        print \nYour guess is higher than the max allowed (\n+str(max_value)+\n). Please, take another guess.\n\n        return # exit the if block is condition met\n    else:\n        print \nRolling...\n\n        sleep(1)\n        print \nFirst roll is: %d\n % (first_roll)\n        sleep(1)\n        print \nSecond roll is: %d\n % (second_roll)\n        total_roll = first_roll + second_roll\n        print \nResult...\n\n        sleep(1)\n        if user_guess \n total_roll:\n            print \nYou win since your guess, \n+str(user_guess)+\n, is greater than the total roll, \n+str(total_roll)\n            return # exit\n        else:\n            print \nYou lose!\n\n            return # exit\n\nroll_dice(6)\n\n\n\n\nThe maximum value is: 12\nGuess a number: 5\nRolling...\nFirst roll is: 1\nSecond roll is: 2\nResult...\nYou win since your guess, 5, is greater than the total roll, 3\n\n\n\nUNIT 5, Lists \n Dictionaries\n\n\nLists and Dictionaries\n\n\nLists are a datatype you can use to store a collection of different pieces of information as a sequence under a single variable name. (Datatypes you\nve already learned about include strings, numbers, and booleans.)\n\n\nzoo_animals = [\npangolin\n, \ncassowary\n, \nsloth\n, \nkangourou\n];\n\n# You can access an individual item on the list by its index. An index is like an address that identifies the item's place in the list. The index appears directly after the list name, in between brackets, like this: list_name[index].\n\nif len(zoo_animals) \n 3:\n    print \nThe first animal at the zoo is the \n + zoo_animals[0]\n    print \nThe second animal at the zoo is the \n + zoo_animals[1]\n    print \nThe third animal at the zoo is the \n + zoo_animals[2]\n    print \nThe fourth animal at the zoo is the \n + zoo_animals[3]\n\n\n\n\nThe first animal at the zoo is the pangolin\nThe second animal at the zoo is the cassowary\nThe third animal at the zoo is the sloth\nThe fourth animal at the zoo is the kangourou\n\n\n\nnumbers = [5, 6, 7, 8]\n\nprint \nAdding the numbers at indices 0 and 2...\n\nprint numbers[0] + numbers[2]\nprint \nAdding the numbers at indices 1 and 3...\n\nprint numbers[1] + numbers[3]\n\n\n\n\nAdding the numbers at indices 0 and 2...\n12\nAdding the numbers at indices 1 and 3...\n14\n\n\n\nA list doesn\nt have to have a fixed length. You can add items to the end of a list any time you like!\n\n\nsuitcase = []\n\nsuitcase.append(\nsunglasses\n)\nsuitcase.append(\ncalculator\n)\nsuitcase.append(\nscreen\n)\nsuitcase.append(\nmouse\n)\n\nlist_length = len(suitcase) # Set this to the length of suitcase\n\nprint list_length\n\nprint \nThere are %d items in the suitcase.\n % (list_length)\nprint suitcase\n\n\n\n\n4\nThere are 4 items in the suitcase.\n['sunglasses', 'calculator', 'screen', 'mouse']\n\n\n\nsuitcase = [\nsunglasses\n, \nhat\n, \npassport\n, \nlaptop\n, \nsuit\n, \nshoes\n]\n\nfirst  = suitcase[0:2] # The first and second items (index zero and one)\nmiddle = suitcase[2:4] # Third and fourth items (index two and three)\nlast = suitcase[4:6] # The last two items (index four and five)\n\n\n\n\nYou can slice a string exactly like a list! In fact, you can think of strings as lists of characters: each character is a sequential item in the list, starting from index 0.\n\n\nanimals = \ncatdogfrog\n\n\ncat  = animals[:3] # The first three characters of animals\ndog  = animals[3:6] # The fourth through sixth characters\nfrog = animals[6:] # From the seventh character to the end\n\n\n\n\nSometimes you need to search for an item in a list.\n\n\nanimals = [\naardvark\n, \nbadger\n, \nduck\n, \nemu\n, \nfennec fox\n]\n\nduck_index = animals.index(\nduck\n) # Use index() to find \nduck\n\n\nprint duck_index\n\nanimals.insert(duck_index,\ncobra\n)\n\nprint animals # Observe what prints after the insert  operation\n\n\n\n\n2\n['aardvark', 'badger', 'cobra', 'duck', 'emu', 'fennec fox']\n\n\n\nIf you want to do something with every item in the list, you can use a for loop.\n\n\nmy_list = [1,9,3,8,5,7]\n\nfor number in my_list:\n    print 2 * number\n\n\n\n\n2\n18\n6\n16\n10\n14\n\n\n\nIf your list is a jumbled mess, you may need to \nsort()\n it.\n\n\nstart_list = [5, 3, 1, 2, 4]\nsquare_list = []\n\nfor var in start_list:\n    square_list.append(var ** 2)\n\nsquare_list.sort()\n\nprint square_list\n\n\n\n\n[1, 4, 9, 16, 25]\n\n\n\nA dictionary is similar to a list, but you access values by looking up a key instead of an index. A key can be any string or number. Dictionaries are great for things like phone books (pairing a name with a phone number), login pages (pairing an e-mail address with a username), and more!\n\n\nresidents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106}\n\nprint residents['Puffin'] # Prints Puffin's room number\nprint residents['Sloth']\nprint residents['Burmese Python']\n\n\n\n\n104\n105\n106\n\n\n\nAn empty pair of curly braces \n{}\n is an empty dictionary, just like an empty pair of \n[]\n is an empty list.\n\n\nLike Lists, Dictionaries are \nmutable\n. This means they can be changed after they are created. One advantage of this is that we can add new key-value pairs to the dictionary after it is created.\n\n\nThe length \nlen()\n of a dictionary is the number of key-value pairs it has. Each pair counts only once, even if the value is a list.\n\n\nmenu = {} # Empty dictionary\n\nmenu['Chicken Alfredo'] = 14.50 # Adding new key-value pair\n\nprint menu['Chicken Alfredo']\n\nmenu['General Tao'] = 12.00\nmenu['Pad Thai'] = 10.50\nmenu['Poutine'] = 9.00\n\nprint \nThere are \n + str(len(menu)) + \n items on the menu.\n\nprint menu\n\nfor key, value in menu.iteritems(): # !!!!!\n    print key, value\n\nfor key, value in menu.iteritems(): # !!!!!\n    print key\n\nfor key, value in menu.iteritems(): # !!!!!\n    print value\n\n\n\n\n14.5\nThere are 4 items on the menu.\n{'Chicken Alfredo': 14.5, 'General Tao': 12.0, 'Poutine': 9.0, 'Pad Thai': 10.5}\nChicken Alfredo 14.5\nGeneral Tao 12.0\nPoutine 9.0\nPad Thai 10.5\nChicken Alfredo\nGeneral Tao\nPoutine\nPad Thai\n14.5\n12.0\n9.0\n10.5\n\n\n\nBecause dictionaries are mutable, they can be changed in many ways. Items can be removed from a dictionary with the \ndel()\n command.\n\n\n# key - animal_name : value - location \n\nzoo_animals = {\n'Unicorn' : 'Cotton Candy House',\n'Sloth' : 'Rainforest Exhibit',\n'Bengal Tiger' : 'Jungle House',\n'Atlantic Puffin' : 'Arctic Exhibit',\n'Rockhopper Penguin' : 'Arctic Exhibit'\n}\n\n\n\n\nA dictionary (or list) declaration may break across multiple lines\n\n\nRemoving the \nUnicorn\n entry. (Unicorns are incredibly expensive.)\n\n\nzoo_animals = {\n'Unicorn' : 'Cotton Candy House',\n'Sloth' : 'Rainforest Exhibit',\n'Bengal Tiger' : 'Jungle House',\n'Atlantic Puffin' : 'Arctic Exhibit',\n'Rockhopper Penguin' : 'Arctic Exhibit'\n}\n\ndel zoo_animals['Unicorn']\ndel zoo_animals['Sloth']\ndel zoo_animals['Bengal Tiger']\nzoo_animals['Rockhopper Penguin'] = 'Cotton Candy House'\n\nprint zoo_animals\n\n\n\n\n{'Atlantic Puffin': 'Arctic Exhibit', 'Rockhopper Penguin': 'Cotton Candy House'}\n\n\n\nSometimes you need to remove something from a list.\n\n\nbackpack = ['xylophone', 'dagger', 'tent', 'bread loaf']\n\nbackpack.remove('dagger')\n\n\n\n\nWe can create a dictionary that holds many types of values.\n\n\nextract, sort, remove\n\n\ninventory = {\n    'gold' : 500,\n    'pouch' : ['flint', 'twine', 'gemstone'], # Assigned a new list to 'pouch' key\n    'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']\n}\n\nprint inventory\n\n# Adding a key 'burlap bag' and assigning a list to it\ninventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']\n\nprint inventory\n\n\n\n\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'gold': 500}\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\n# Sorting the list found under the key 'pouch'\ninventory['pouch'].sort() \n\nprint inventory\n\n\n\n\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\ninventory['pocket'] = ['seashell', 'strange berry', 'lint']\n\nprint inventory\n\n\n\n\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\ninventory['backpack'].sort()\n\nprint inventory\n\n\n\n\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'dagger', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\ninventory['backpack'].remove('dagger')\n\nprint inventory\n\n\n\n\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}\n\n\n\ninventory['gold'] += 50\n\nprint inventory\n\n\n\n\n{'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 550}\n\n\n\nA Day at the Supermarket\n\n\nfor\n loops allow us to iterate through all of the elements in a list from the left-most (or zeroth element) to the right-most element.\n\n\nnames = [\nAdam\n, \nAlex\n, \nMariah\n, \nMartine\n, \nColumbus\n]\n\nfor items in names:\n    print items\n\n\n\n\nAdam\nAlex\nMariah\nMartine\nColumbus\n\n\n\nYou can also use a for loop on a dictionary to loop through its keys.\n\n\nwebster = {\n    \nAardvark\n : \nA star of a popular children's cartoon show.\n,\n    \nBaa\n : \nThe sound a goat makes.\n,\n    \nCarpet\n: \nGoes on the floor.\n,\n    \nDab\n: \nA small amount.\n\n}\n\nfor item in webster:\n    print webster[item]\n\n\n\n\nA star of a popular children's cartoon show.\nGoes on the floor.\nA small amount.\nThe sound a goat makes.\n\n\n\nWhile looping, you may want to perform different actions depending on the particular item in the list.\n\n\na = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\nfor item in a:\n    if item % 2 == 0:\n        print item\n\n\n\n\n0\n2\n4\n6\n8\n10\n12\n\n\n\nFunctions can also take lists as inputs and perform various operations on those lists.\n\n\ndef count_small(numbers):\n\n    total = 0\n    for n in numbers:\n        if n \n 10:\n            total = total + 1\n    return total\n\nlost = [4, 8, 15, 16, 23, 42]\nsmall = count_small(lost)\n\nprint small\n\n\n\n\n2\n\n\n\nYou can loop through strings the same way you loop through lists!\n\n\nfor letter in \nCodecademy\n:\n    print letter\n\nword = \nProgramming is fun!\n\n\nfor letter in word:\n    # Only print out the letter i\n    if letter == \ni\n:\n        print letter\n\n\n\n\nC\no\nd\ne\nc\na\nd\ne\nm\ny\ni\ni\n\n\n\nYou are now the proud owner of your very own Codecademy brand supermarket. For paperwork and accounting purposes, let\ns record the total value of your inventory.\n\n\nprices = {\n    \nbanana\n : 4,\n    \napple\n : 2,\n    \norange\n : 1.5,\n    \npear\n : 3\n    }\n\nstock = {\n    \nbanana\n : 6,\n    \napple\n : 0,\n    \norange\n : 32,\n    \npear\n : 15\n    }\n\ntotal = 0\n\nfor item in prices:\n    print item # print key\n    print \nprice: %s\n % prices[item] # print value\n    print \nstock: %s\n % stock[item]\n    print prices[item]*stock[item]\n    total += prices[item]*stock[item]\n\nprint total\n\n\n\n\norange\nprice: 1.5\nstock: 32\n48.0\npear\nprice: 3\nstock: 15\n45\nbanana\nprice: 4\nstock: 6\n24\napple\nprice: 2\nstock: 0\n0\n117.0\n\n\n\nIn order for customers to order online, we are going to have to make a consumer interface.\n\n\nshopping_list = [\nbanana\n, \norange\n, \napple\n]\n\nstock = {\n    \nbanana\n : 6,\n    \napple\n : 0,\n    \norange\n : 32,\n    \npear\n : 15\n}\n\nprices = {\n    \nbanana\n : 4,\n    \napple\n : 2,\n    \norange\n : 1.5,\n    \npear\n : 3\n}\n\ndef compute_bill(food):\n\n    total = 0\n    for item in food:\n        if stock[item] \n 0:\n            total += prices[item] # you only pick one from the stock!\n            stock[item] = stock[item] - 1 # the stock goes down by 1\n    print total\n    return food\n\nprint compute_bill(shopping_list)\n\n\n\n\n5.5\n['banana', 'orange', 'apple']\n\n\n\nQuiz 5\n\n\nOK\n\n\nProject Rock, Paper, Scissors\n\n\nIn this project, we\nll build Rock-Paper-Scissors!\n\n\nThe program should do the following:\n\n\n\n\nPrompt the user to select either Rock, Paper, or Scissors\n\n\nInstruct the computer to randomly select either Rock, Paper, or Scissors\n\n\nCompare the user\ns choice and the computer\ns choice\n\n\nDetermine a winner (the user or the computer)\n\n\nInform the user who the winner is\n\n\n\n\nfrom random import randint\nfrom time import sleep\n\noptions = [\nR\n, \nP\n, \nS\n]\nLOSE = \nYou lost!\n # constant, uppercase\nWIN = \nYou win!\n\n\ndef decide_winner(user_choice, computer_choice):\n\n    print(\nYou picked: \n+str(user_choice))\n    print \nComputer selecting...\n\n\n    sleep(1)\n\n    print(\nComputer picks: \n+str(computer_choice))\n\n    user_choice_index = options.index(user_choice)\n    computer_choice_index = options.index(computer_choice) # !!!!!\n\n    if user_choice_index == computer_choice_index:\n        print \nTie!\n\n    elif user_choice_index == 0 and computer_choice_index == 2:\n        print WIN\n    elif user_choice_index == 1 and computer_choice_index == 0:\n        print WIN\n    elif user_choice_index == 2 and computer_choice_index == 1:\n        print WIN\n    elif user_choice_index \n 2:\n        print \nInvalid choice!!!\n\n    else:\n        print LOSE\n\ndef play_RPS():\n\n    print \nLet's pay Rock-Paper-Scissors\n\n\n    user_choice = raw_input(\nSelect R for Rock, P for Paper, or S for Scissors: \n)\n\n    sleep(1)\n\n    user_choice = user_choice.upper()\n    # computer_choice = options[randint(0,2)] \n    # pull out an element from a list, the 1st (0) out of 3 (2)\n\n    computer_choice = options[randint(0,len(options)-1)] \n    # This will ensure that if we ever add more options to the game, we won't have to change this line of code.\n\n    decide_winner(user_choice, computer_choice)\n\nplay_RPS()\n\n\n\n\nLet's pay Rock-Paper-Scissors\nSelect R for Rock, P for Paper, or S for Scissors: r\nYou picked: R\nComputer selecting...\nComputer picks: S\nYou win!\n\n\n\nUNIT 6, Student Becomes the Teacher\n\n\nStudent Becomes the Teacher\n\n\nMake a gradebook for all of your students.\n\n\nFirst, create 3 dictionaries.\n\n\nSecond, add names, marks\n\n\nlloyd = {\n    \nname\n : \nLloyd\n,\n    \nhomework\n : [90.0, 97.0, 75.0, 92.0],\n    \nquizzes\n : [88.0, 40.0, 94.0],\n    \ntests\n : [75.0, 90.0]\n}\n\nalice = {\n    \nname\n: \nAlice\n,\n    \nhomework\n : [100.0, 92.0, 98.0, 100.0],\n    \nquizzes\n : [82.0, 83.0, 91.0],\n    \ntests\n : [89.0, 97.0]\n}\n\ntyler = {\n    \nname\n : \nTyler\n,\n    \nhomework\n : [0.0, 87.0, 75.0, 22.0],\n    \nquizzes\n : [0.0, 75.0, 78.0],\n    \ntests\n : [100.0, 100.0]\n}\n\n\n\n\nThird, make a list.\n\n\nstudents= [lloyd, alice, tyler]\n\ncases = [\nhomework\n, \nquizzes\n, \ntests\n]\n\nw_calc = [0.10, 0.30, 0.60]\n\nall_average = 0.0\n\n\n\n\nFour, print out.\n\n\nprint \n\\nStudents' Grades\n.upper()\n\nprint \n\n\nfor student in students:\n    print student[\nname\n].upper()\n    print \nHomework\n\n    print student[\nhomework\n]\n    print \nQuizzes\n\n    print student[\nquizzes\n]\n    print \nTests\n\n    print student[\ntests\n]\n    print \n\n\n\n\n\nSTUDENTS' GRADES\n\nLLOYD\nHomework\n[90.0, 97.0, 75.0, 92.0]\nQuizzes\n[88.0, 40.0, 94.0]\nTests\n[75.0, 90.0]\n\nALICE\nHomework\n[100.0, 92.0, 98.0, 100.0]\nQuizzes\n[82.0, 83.0, 91.0]\nTests\n[89.0, 97.0]\n\nTYLER\nHomework\n[0.0, 87.0, 75.0, 22.0]\nQuizzes\n[0.0, 75.0, 78.0]\nTests\n[100.0, 100.0]\n\n\n\nCompute averages.\n\n\ndef average(numbers):\n\n    total = sum(numbers)\n    temp = float(total) / len(numbers)\n    return temp\n\nprint \nStudents' Averages\n.upper()\n\nprint \n\n\nfor c in cases:\n    cc = c.upper()\n    print cc\n    for student in students:\n        numbers = student[c]\n        calc = round(average(numbers),1)\n        print student[\nname\n]\n        print calc\n    print \n\n\n\n\n\nSTUDENTS' AVERAGES\n\nHOMEWORK\nLloyd\n88.5\nAlice\n97.5\nTyler\n46.0\n\nQUIZZES\nLloyd\n74.0\nAlice\n85.3\nTyler\n51.0\n\nTESTS\nLloyd\n82.5\nAlice\n93.0\nTyler\n100.0\n\n\n\nCompute weighted averages.\n\n\ndef w_average(marks):\n\n    #w_calc = [0.10, 0.30, 0.60]\n    s_calc = 0\n    w = 0\n    while w \n len(w_calc):\n        s_calc += w_calc[w] * marks[w]\n        w += 1\n    return s_calc\n\ndef get_letter_grade(score):\n\n    if score \n= 90:\n        return \nA\n\n    elif score \n= 80:\n        return \nB\n\n    elif score \n= 70:\n        return \nC\n\n    elif score \n= 60:\n        return \nD\n\n    else:\n        return \nF\n\n\ndef get_class_average(ind):\n    class_total = round(ind / len(students), 1)\n    return class_total\n\nprint \nStudents' Weighted Average\n.upper()\n\nprint \n Ponderation [Homeworks, Quizzes, Tests]: [\n+str(float(w_calc[0])*100)+\n, \n+str(float(w_calc[1])*100)+\n, \n+str(float(w_calc[2])*100)+\n]\n\n\nprint \n\n\nfor student in students:\n    print(student[\nname\n] + \n's marks are:\n).upper()\n    l_calc = []\n    for c in cases:    \n        numbers = student[c]\n        calc = round(average(numbers),1)\n        l_calc.append(calc)\n    print l_calc\n    print(\nFor a weighted average of:\n)\n    ind_average = round(w_average(l_calc),1)\n    print ind_average\n    print(\nStanding for a:\n)\n    print get_letter_grade(ind_average)\n    all_average += ind_average\n    print \n\n\nprint(\nFinally, The class average is:\n).upper()\nprint get_class_average(all_average)\n\n\n\n\nSTUDENTS' WEIGHTED AVERAGE\n Ponderation [Homeworks, Quizzes, Tests]: [10.0, 30.0, 60.0]\n\nLLOYD'S MARKS ARE:\n[88.5, 74.0, 82.5]\nFor a weighted average of:\n80.5\nStanding for a:\nB\n\nALICE'S MARKS ARE:\n[97.5, 85.3, 93.0]\nFor a weighted average of:\n91.1\nStanding for a:\nA\n\nTYLER'S MARKS ARE:\n[46.0, 51.0, 100.0]\nFor a weighted average of:\n79.9\nStanding for a:\nC\n\nFINALLY, THE CLASS AVERAGE IS:\n83.8\n\n\n\nUNIT 7, Lists and Functions\n\n\nLists and Functions\n\n\nWhat you can do with a list: extract, add, append, remove, pop out, delete.\n\n\nn = [1, 3, 5]\nprint n[1]\n\nn[1] = n [1] * 5\nprint n\n\n# Add elements\nn.append(4)\nprint n\n\n# Remove elements\nn.pop(0)\nprint n\n\n\n\n\n3\n[1, 15, 5]\n[1, 15, 5, 4]\n[15, 5, 4]\n\n\n\nWhat you can do with functions.\n\n\nMultiply, divide.\n\n\nnumber = 5\n\ndef my_function(x):\n\n    return x * 3\n\n# Print my_function(5)\nprint my_function(number)\n\n\n\n\n15\n\n\n\nAdd, substract.\n\n\nm = 5\nn = 13\n\ndef add_function(x,y):\n\n    return x + y\n\nprint add_function(m, n)\n\n\n\n\n18\n\n\n\nConcatenate.\n\n\nn = \nHello\n\n\ndef string_function(s):\n\n    return s + \n world\n\n\nprint string_function(n)\n\n\n\n\nHello world\n\n\n\nShow all.\n\n\nn = [3, 5, 7]\n\ndef list_function(x):\n\n    return x\n\nprint list_function(n)\n\n\n\n\n[3, 5, 7]\n\n\n\nShow some.\n\n\ndef list_function(x):\n\n    return x[1]\n\nn = [3, 5, 7]\n\nprint list_function(n)\n\n\n\n\n5\n\n\n\nExtract and modify.\n\n\ndef list_function(x):\n\n    x[1] = x[1] + 3\n    return x\n\nn = [3, 5, 7]\n\nprint list_function(n)\n\n\n\n\n[3, 8, 7]\n\n\n\nAdd elements.\n\n\nn = [3, 5, 7]\n\ndef list_extender(lst):\n\n    lst.append(9)\n    return lst\n\nprint list_extender(n)\n\n\n\n\n[3, 5, 7, 9]\n\n\n\nRemove elements.\n\n\nn = [3, 5, 7]\n\ndef list_shorter(lst):\n\n    lst.remove(5)\n    return lst\n\nprint list_shorter(n)\n\n\n\n\n[3, 7]\n\n\n\nPop out the 2nd element.\n\n\nn = [3, 5, 7]\n\ndef list_extract(lst):\n\n    lst.pop(1)\n    return lst\n\nprint list_extract(n)\n\n\n\n\n[3, 7]\n\n\n\nLoop through each element.\n\n\nn = [3, 5, 7]\n\ndef print_list(x):\n\n    for i in range(0, len(x)):\n        print x[i]\n\nprint print_list(n)\n\n\n\n\n3\n5\n7\nNone\n\n\n\nLoop, transform each element.\n\n\nn = [3, 5, 7]\n\ndef double_list(x):\n\n    for i in range(0, len(x)):\n        x[i] = x[i] * 2\n    return x\n\nprint double_list(n)\n\n\n\n\n[6, 10, 14]\n\n\n\nLoop, transform each element.\n\n\ndef my_function(x):\n\n    for i in range(0, len(x)):\n        x[i] = x[i] * 2\n    return x\n\nprint my_function(range(3))\n\nprint range(6) # =\n [0,1,2,3,4,5]\nprint range(1,6) # =\n [1,2,3,4,5]\nprint range(1,6,3) # =\n [1,4]\n\n\n\n\n[0, 2, 4]\n[0, 1, 2, 3, 4, 5]\n[1, 2, 3, 4, 5]\n[1, 4]\n\n\n\nLoop, fill the variable with \n+=\n (or \n-=\n, \n*=\n, \n/=\n)\n\n\nn = [3, 5, 7]\n\ndef total(numbers):\n\n    result = 0 # empty variable\n    for item in numbers:\n        result += item\n    return result\n\n\n\n\nEmpty variable, loop, fill the variable.\n\n\nn = [\nMichael\n, \nLieberman\n]\n\ndef join_strings(words):\n\n    result = \n\n    for item in words:\n        result = result + item\n    return result\n\nprint join_strings(n)\n\n\n\n\nMichaelLieberman\n\n\n\nJoin (not add up) the list. You want this to \nprint [1, 2, 3, 4, 5, 6]\n.\n\n\nm = [1, 2, 3]\nn = [4, 5, 6]\n\ndef join_lists(x,y):\n    return x + y\n\nprint join_lists(m, n)\n\n\n\n\n[1, 2, 3, 4, 5, 6]\n\n\n\nList of lists. Several loops.\n\n\nn = [\n    [1, 2, 3],\n    [4, 5, 6, 7, 8, 9]\n]\n\ndef flatten(lists):\n\n    results = []\n    for lst in lists:\n        for num in range(len(lst)):\n            results.append(lst[num])\n    return results\n\nprint flatten(n)\n\n\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nUse \nrange(len(lst))\n.\n\n\nrange, length\n\n\nprint range(6) # =\n [0,1,2,3,4,5]\n\n\n\n\n[0, 1, 2, 3, 4, 5]\n\n\n\nBattleship!\n\n\nThis first script is incomplete (work in progress).\n\nThe next script is functional.\n\n\nfrom random import randint\n\nboard = []\n\nfor x in range(5):  # 0, 1, 2, 3, 4 (stop before 5)\n    board.append([\nO\n] * 5) # print 5 rows of 5 'O'\n\ndef print_board(board):\n\n    for row in board:\n        # print row # print ['O', 'O', 'O', 'O', 'O'] on 5 rows\n        print \n \n.join(row) # print O O O O O \n\nprint \nLet's play Battleship!\n\n\ndef random_row(board): # hide the ship at r-c\n\n    return randint(0,len(board) - 1)\n\ndef random_col(board):\n\n    return randint(0,len(board) - 1)\n\nprint random_row(board)\nprint random_col(board)\n\nguess_row = int(raw_input(\nGuess Row (1 to 5):\n)) # involve the player\nguess_col = int(raw_input(\nGuess Col (1 to 5):\n))\n\nprint ship_col # print ship position\nprint ship_row\n\nif (guess_row == ship_row) and (guess_col == ship_col):\n    print \nCongratulations! You sank my battleship!\n\n    guess_row=guess_row-1\n    guess_col=guess_col-1\n    board[guess_row][guess_col]=\nS\n\n    print print_board(board)\nelse:\n    #print \nYou missed my battleship!\n\n    if guess_row not in range(5) or guess_row == 0 or guess_col not in range(5) or guess_col == 0: # condition for wrong entries\n        print \nOops, that's not even in the ocean.\n\n    elif board[guess_row][guess_col] == \nX\n:\n        print \nYou guessed that one already.\n\n    else:\n        print \nYou missed my battleship!\n\n\nguess_row = guess_row - 1 # transform the numbers, 1 becomes 0...\nguess_col = guess_col - 1\n\nboard[guess_row][guess_col] = \nX\n # replace the 'O'\nprint print_board(board)\n\n\n\n\nLet's play Battleship!\n4\n0\nGuess Row (1 to 5):1\nGuess Col (1 to 5):2\n\n\n\n---------------------------------------------------------------------------\n\nNameError                                 Traceback (most recent call last)\n\n\nipython-input-87-efd1e0de637a\n in \nmodule\n()\n     24 guess_col = int(raw_input(\"Guess Col (1 to 5):\"))\n     25 \n---\n 26 print ship_col # print ship position\n     27 print ship_row\n     28\n\n\nNameError: name 'ship_col' is not defined\n\n\n\nBattleship FINAL!\n\n\nfrom random import randint\n\nboard = []\n\nfor x in range(5):\n    board.append([\nO\n] * 5)\n\ndef print_board(board):\n\n    for row in board:\n        print \n \n.join(row)\n\nprint \n\\nLet's play Battleship! You have 4 strikes to sink by ship.\\n\n\nprint_board(board)\n\ndef random_row(board):\n\n    return randint(0, len(board) - 1)\n\ndef random_col(board):\n\n    return randint(0, len(board) - 1)\n\nship_row = random_row(board)\nship_col = random_col(board)\n#ship_row = 1 to test and fix to (1,1)\n#ship_col = 1\n\nfor turn in range(5):\n    turn += 1\n    if turn == 5:\n        print \n\\nGame Over\n\n        print \nThe ship was here =\n I\\n\n\n        board[ship_row - 1][ship_col - 1] = \nI\n\n        print_board(board)\n        break\n    else:\n        print \n\\nTurn\n, turn\n\n        guess_row = int(raw_input(\nGuess Row (1 to 5): \n))\n        guess_col = int(raw_input(\nGuess Col (1 to 5): \n))\n\n        if (guess_row == ship_row) and (guess_col == ship_col):\n            print \n\\nCongratulations! You sank my battleship!\\n\n\n\n            guess_row = guess_row - 1\n            guess_col = guess_col - 1\n            board[guess_row][guess_col] = \nS\n\n\n            print_board(board)\n            print \n\\nGame Over\n\n            break\n\n        elif (guess_row \n 1 or guess_row \n 5) or (guess_col \n 1 or guess_col \n 5):\n            print \n\\nOops, that's not even in the ocean.\\n\n\n\n        elif board[guess_row - 1][guess_col - 1] == \nX\n:\n            print \n\\nYou guessed that one already.\\n\n\n            print_board(board)\n\n        else:\n            print \n\\nYou missed my battleship!\\n\n\n            board[guess_row - 1][guess_col - 1] = \nX\n\n            print_board(board)\n\n\n\n\nLet's play Battleship! You have 4 strikes to sink by ship.\n\nO O O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 1\nGuess Row (1 to 5): 1\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 2\nGuess Row (1 to 5): 2\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 3\nGuess Row (1 to 5): 3\nGuess Col (1 to 5): 5\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O O O O\nO O O O O\n\nTurn 4\nGuess Row (1 to 5): 4\nGuess Col (1 to 5): 3\n\nCongratulations! You sank my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O S O O\nO O O O O\n\nGame Over\n\n\n\nJoining.\n\n\njoin, split\n\n\nletters = ['a', 'b', 'c', 'd']\n\nprint \n \n.join(letters) # a b c d\nprint \n---\n.join(letters) # #---b---c---d\n\n\n\n\na b c d\na---b---c---d\n\n\n\nRandomizing.\n\n\nrandom, rand\n\n\nfrom random import randint\n\ncoin = randint(0, 1) # randint(low, high)\ndice = randint(1, 6)\n\n\n\n\nQuiz 7\n\n\nTakeaway.\n\n\nmy_list = [1, 3, 5, 7]\n\nmy_list.pop(3) # remove the 4th\nmy_list.remove(3) # remove the '3'\n\nrange(0, len(my_list)) # every list item\nrange(0, len(my_list), 2) # every other list item\n\n\n\n\n[0]\n\n\n\nUNIT 8, Loops\n\n\nLoops\n\n\nA \nwhile\n loop is a sort of \nif\n.\n\n\ncount = 0\n\nif count \n= 9: # \n    print \nHello, I am an if statement and count is\n, count\n\n\n\n\nHello, I am an if statement and count is 0\n\n\n\nwhile count \n= 9: # similar to if: executes as long as the condition is true\n    print \nHello, I am a while and count is\n, count\n    count += 1\n\n\n\n\nHello, I am a while and count is 0\nHello, I am a while and count is 1\nHello, I am a while and count is 2\nHello, I am a while and count is 3\nHello, I am a while and count is 4\nHello, I am a while and count is 5\nHello, I am a while and count is 6\nHello, I am a while and count is 7\nHello, I am a while and count is 8\nHello, I am a while and count is 9\n\n\n\nA \nwhile\n loop allows control (checkpoint, a switch, on and off).\n\n\nloop_condition = True\n\nwhile loop_condition: # On\n    print \nI am a loop\n\n    loop_condition = False # Off\n\n\n\n\nI am a loop\n\n\n\nnum = 1\n\nwhile num \n= 10: # the condition\n    print num ** 2\n    num += num ** (1/2)\n    print num\n\n\n\n\n1\n2\n4\n3\n9\n4\n16\n5\n25\n6\n36\n7\n49\n8\n64\n9\n81\n10\n100\n11\n\n\n\nA common application of a \nwhile\n loop is to check user input to see if it is valid.\n\n\nchoice = raw_input('Enjoying the course? (y/n)')\n\nwhile choice != \ny\n and choice != \nn\n:\n    choice = raw_input(\nSorry, I didn't catch that. Enter again (case sensitive): \n)\n\n\n\n\nEnjoying the course? (y/n)y\n\n\n\nbreak\n means \nexit the current loop\n. Opposite to \nbreak\n is \ncontinue\n.\n\n\ncount = 0\n\nwhile True:\n    print count\n    count += 1\n    if count \n= 10:\n        break\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\nwhile\n/\nelse\n are like \nif\n/\nelse\n; \nelse\n is executed when \nwhile\n is false.\n\n\nimport random\n\nprint \nLucky Numbers! 3 numbers will be generated.\n\nprint \nIf one of them is a '5', you lose!\n\n\ncount = 0\n\nwhile count \n 3:\n    num = random.randint(1, 6)\n    print num\n    if num == 5:\n        print \nSorry, you lose!\n\n        break\n    count += 1\nelse:\n    print \nYou win!\n\n\n\n\n\nLucky Numbers! 3 numbers will be generated.\nIf one of them is a '5', you lose!\n5\nSorry, you lose!\n\n\n\nGuess game.\n\n\nfrom random import randint\n\n# Generates a number from 1 through 10 inclusive\nrandom_number = randint(1, 10)\n\n# print random_number\nguesses_left = 3\nprint \nGuess right!\n\n\nwhile guesses_left \n 0:\n    print \nYou have \n+str(guesses_left)+\n attempts.\n\n    guess = raw_input(\nGuess a number from 1 to 10: \n)\n    if int(guess) == random_number:\n        print \nYou win!\n\n        break\n    elif guesses_left == 1:\n        print \nYou lose.\n\n        break\n    else:\n        guesses_left -= 1\n        print \nTry again.\n\n\n\n\n\nGuess right!\nYou have 3 attempts.\nGuess a number from 1 to 10: 2\nTry again.\nYou have 2 attempts.\nGuess a number from 1 to 10: 6\nTry again.\nYou have 1 attempts.\nGuess a number from 1 to 10: 9\nYou lose.\n\n\n\nif\n loop.\n\n\nprint \nCounting...\n\n\nfor i in range(20):\n    print i\n\n\n\n\nCounting...\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\nCreate a list.\n\n\nhobbies = []\n\nprint hobbies\n\nfor i in range(3):\n    hobby = raw_input(\nEnter a hobby: \n)\n    hobbies.append(hobby)\n\nprint hobbies\n\n\n\n\n[]\nEnter a hobby: fishing\nEnter a hobby: skiing\nEnter a hobby: knitting!!!\n['fishing', 'skiing', 'knitting!!!']\n\n\n\nRun though a string, but each character will be spaced out.\n\n\nthing = \nspam!\n\n\nfor c in thing:\n    print c\n\nword = \neggs!\n\n\nfor char in word:\n    print char, # , print on the same line\n\n\n\n\ns\np\na\nm\n!\ne g g s !\n\n\n\nReplace a character in a string. \n,\n print on the same line.\n\n\nphrase = \nA bird in the hand...\n\n\nfor char in phrase:\n    if char == \nA\n or char == \na\n:\n        print \nX\n,\n    else:\n        print char,\n\n\n\n\nX   b i r d   i n   t h e   h X n d . . .\n\n\n\nRun though a list.\n\n\nnumbers  = [7, 9, 12, 54, 99]\n\nprint \nThis list contains: \n\n\nfor num in numbers:\n    print num\n\nfor numm in numbers:\n    print numm ** 2,\n\n\n\n\nThis list contains: \n7\n9\n12\n54\n99\n49 81 144 2916 9801\n\n\n\nRun though a dictionary.\n\n\nd = {'a' : 'apple', 'b' : 'berry', 'c' : 'cherry'}\n\nfor key in d:\n    # key:value\n    print key+\n \n+d[key]\n    print key # key\n    print d[key] # value\n\n\n\n\na apple\na\napple\nc cherry\nc\ncherry\nb berry\nb\nberry\n\n\n\nEnumerate a list (numbers and members).\n\n\nchoices = ['pizza', 'pasta', 'salad', 'nachos']\n\nprint 'Your choices are:'\nfor index, item in enumerate(choices):\n    print index + 1, item\n\n\n\n\nYour choices are:\n1 pizza\n2 pasta\n3 salad\n4 nachos\n\n\n\nMultiple lists.\n\n\nlist_a = [3, 9, 17, 15, 19]\nlist_b = [2, 4, 8, 10, 30, 40, 50, 60, 70, 80, 90]\n\nfor a, b in zip(list_a, list_b):\n    if a \n b: \n        print a\n    elif a == b:\n        print \n-\n\n    else:\n        print b\n\n\n\n\n3\n9\n17\n15\n30\n\n\n\nList with concatenation.\n\n\nfruits = ['banana', 'apple', 'orange', 'tomata', 'pear', 'grape']\n\nprint 'You have...'\n\nfor f in fruits:\n    if f == 'tomato':\n        print 'A tomato is not a fruit!' # (It actually is.)\n        break\n    print ', a', f,\nelse:\n    print '; A fine selection of fruits!'\n\n\n\n\nYou have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!\n\n\n\nRemove the \nbreak\n.\n\n\nfruits = ['banana', 'apple', 'orange', 'tomata', 'pear', 'grape']\n\nprint 'You have...'\n\nfor f in fruits:\n    if f == 'tomato':\n        print 'A tomato is not a fruit!' # (It actually is.)\n    else:    \n        print ', a', f,\nelse:\n    print '; A fine selection of fruits!'\n\n\n\n\nYou have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!\n\n\n\nPractice Makes Perfect\n\n\nIs it even?\n\n\ndef is_even(x):\n\n    if x % 2 == 0:\n        return True # if x is even\n    else:\n        return False\n\nprint is_even(2)\nprint is_even(3)\n\n\n\n\nTrue\nFalse\n\n\n\nOr not?\n\n\nn = -1.0\n\nprint(n - round(n,0))\n\ndef is_int(x):\n\n    if (x - round(x,0)) == 0:\n        return True\n    else:\n        return False\n\nprint is_int(7.0)\nprint is_int(7.5)\nprint is_int(-1)\n\n\n\n\n0.0\nTrue\nFalse\nTrue\n\n\n\nSumming the digits of a number.\n\n\ndef digit_sum(n):\n\n    liss = []\n    n = str(n) # from integers to characters\n    for char in n:\n        liss.append(char) # populate liss\n        total = 0\n        for i in range(len(liss)):\n            liss[i] = int(liss[i]) # back to integers\n            total += liss[i] # sum them up\n    return total\n\nprint digit_sum(1234)\nprint digit_sum(8888)\n\n\n\n\n10\n32\n\n\n\nWhat is the factorial?\n\n\ndef factorial(x):\n\n    if x == 1 or x == 0:\n        return 1\n    else:\n        result = 1\n        while x \n 0:\n            # say x = 4\n            # 1 * 4 = 4\n            # 4 * 3 = 12\n            # 12 * 2 = 24\n            # 24 * 1 = 24\n            result *= x\n            x -= 1\n\n    return result \n\nprint factorial(1)\nprint factorial(2)\nprint factorial(3)\nprint factorial(4)\nprint factorial(5)\n\n\n\n\n1\n2\n6\n24\n120\n\n\n\nIs it a prime number? (Check the web for the list of prime numbers.)\n\n\ndef is_prime(x):\n\n    if (x \n 1): # to catch greater than 1\n        for n in range(2,(x - 1)): # range 2 - 1 less than x\n            if x % n == 0:\n                print x\n                return False\n    else: # ro catch 0 and 1\n        print x\n        return False\n    print x # the input\n    return True # the output, will be printed when the function will be called\n\nfor ii in range(24):\n    print is_prime(ii),\n\n\n\n\n0\nFalse 1\nFalse 2\nTrue 3\nTrue 4\nFalse 5\nTrue 6\nFalse 7\nTrue 8\nFalse 9\nFalse 10\nFalse 11\nTrue 12\nFalse 13\nTrue 14\nFalse 15\nFalse 16\nFalse 17\nTrue 18\nFalse 19\nTrue 20\nFalse 21\nFalse 22\nFalse 23\nTrue\n\n\n\nReverse a string.\n\n\ndef reverse(text):\n\n    count = len(text) - 1 # start at the end\n\n    print text\n    print count # 3 letters will be 0,1,2,3 or 3\n\n    reversed_text = \n # empty string\n\n    print reversed_text\n\n    while count \n= 0:\n        reversed_text += text[count] # adding the right-most letter\n        count -= 1 # decrement count\n    return reversed_text\n\nprint reverse(\nmake\n)\nprint reverse(\ncodeacademy\n)\n\n\n\n\nmake\n3\n\nekam\ncodeacademy\n10\n\nymedacaedoc\n\n\n\nRemove vowels in apunctuation word (could work for punctuation too).\n\n\ndef anti_vowel(text):\n\n    vowels = \naAeEiIoOuU\n\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\n)\n    return text\n\nprint anti_vowel(\nallo\n)\n\n\n\n\nll\n\n\n\nRemove all but punctuation.\n\n\ndef anti_vowel(text):\n\n    text = text.lower()\n    vowels = \nabcdefghijklmnopqrstuvwxyz1234567890$-\n\n\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\n)\n    for char in text:\n        if char == \n \n:\n            text = text.replace(char,\n)\n    return text\n\nprint anti_vowel(\nThe plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\\nID\\\n associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\n)\n\n\n\n\n.?,,.,.......\"\"...\n\n\n\nScrabble scoring.\n\n\nscore = {\na\n: 1, \nc\n: 3, \nb\n: 3, \ne\n: 1, \nd\n: 2, \ng\n: 2, \n         \nf\n: 4, \ni\n: 1, \nh\n: 4, \nk\n: 5, \nj\n: 8, \nm\n: 3, \n         \nl\n: 1, \no\n: 1, \nn\n: 1, \nq\n: 10, \np\n: 3, \ns\n: 1, \n         \nr\n: 1, \nu\n: 1, \nt\n: 1, \nw\n: 4, \nv\n: 4, \ny\n: 4, \n         \nx\n: 8, \nz\n: 10}\n\ndef scrabble_score(word):\n\n    word2 = word.lower()\n\n    print word2+\n:\n,\n    points = 0\n    for letter in word2:\n        if letter == str(letter):\n            points += score[letter]\n    return points\n\nprint scrabble_score(\nab\n)\nprint scrabble_score(\nallo\n)\nprint scrabble_score(\nxylophone\n)\nprint scrabble_score(\ncoding\n)\nprint scrabble_score(\nyak\n)\n\n\n\n\nab: 4\nallo: 4\nxylophone: 24\ncoding: 10\nyak: 10\n\n\n\nCensor a word in a string.\n\n\nlength\n\n\ndef censor(text,word_to_censor):\n\n    text = text.split(' ')\n    for word in range(0,len(text)):\n        if text[word] == word_to_censor:\n            text[word] = \n*\n * len(text[word]) * 2\n    return \n \n.join(text) # join the w separated by spaces\n\nprint censor(\nit is two days\n, \ntwo\n)\n\n\n\n\nit is ****** days\n\n\n\nCount items is a list.\n\n\ndef count(sequence, item):\n\n    sequence = list(sequence)\n    count = 0\n\n    for i in sequence:\n        if i == item:\n            count += 1\n    return count\n\nlist2 = [1,3,1,5]\nlist3 = [\na\n,\nb\n,\nc\n,\na\n]\nlist4 = (\na\n,\nb\n,\nc\n,\na\n)\nlist5 = (1,2,3,1,1)\n\nprint count(list2,1)\nprint count(list3,1)\nprint count(list4,1)\nprint count(list5,1)\n\n\n\n\n2\n0\n0\n3\n\n\n\nExtract even numbers from a list.\n\n\ndef purify(listing):\n\n    listing = list(listing)\n    listing2 = []\n\n    for l in listing:\n        if l % 2 == 0:\n            listing2.append(l)\n    return listing2\n\ncase1 = [1,2,3,4]\n\nprint purify(case1)\n\n\n\n\n[2, 4]\n\n\n\nCompute a product.\n\n\ndef product(listing):\n\n    print listing\n    result = 1\n    for l in listing:\n        result = result * l\n    return result\n\ncase1 = [1,2,3]\ncase2 = (5,10,15)\n\nprint product(case1)\nprint product(case2)\n\n\n\n\n[1, 2, 3]\n6\n(5, 10, 15)\n750\n\n\n\nRemove duplicates from a list.\n\n\ndef remove_duplicates(listing):\n\n    print listing\n\n    listing = list(listing)\n    listing2 = []\n\n    for l in listing:\n        if l not in listing2:\n            listing2.append(l)\n    return listing2\n\ncase1 = [1,2,3,3,4]\ncase2 = (1,6,1,4,2,8,2,1,6,7,4,6)\n\nprint remove_duplicates(case1)\nprint remove_duplicates(case2)\n\n\n\n\n[1, 2, 3, 3, 4]\n[1, 2, 3, 4]\n(1, 6, 1, 4, 2, 8, 2, 1, 6, 7, 4, 6)\n[1, 6, 4, 2, 8, 7]\n\n\n\nExtract the median from an unordered list of numbers.\n\n\ndef median(listing):\n\n    median_no = 0\n    median_low = 0\n    median_high = 0\n    low = 0\n    high = 0\n\n    print listing\n\n    listing = sorted(listing)\n\n    if len(listing) % 2 == 0:\n        low = len(listing)/2 - 1 # 6/2 = 3 -1 = 2 or the 3rd\n        high = len(listing)/2 # 6/2 = 3 or the 4th\n        median_low = float(listing[low]) # extract the 3rd of 6\n        median_high = float(listing[high]) # the 4th of 6\n        median_no = (median_low + median_high)/2\n    else:\n        median_no = listing[(len(listing))/2] # on 5, the / will yield 2.5, but coerced to the integer 2 or the 3rd\n    return median_no\n\ncase1 = (7,12,3,1,6)\ncase2 = (7,12,3,1,6,17)\n\nprint median(case1)\nprint median(case2)\n\n\n\n\n(7, 12, 3, 1, 6)\n6\n(7, 12, 3, 1, 6, 17)\n6.5\n\n\n\nQuiz 8\n\n\nTakeaway: built-in functions.\n\n\nx = [1, 2, 3]\ny = [4, 5, 6]\n\nzipped = zip(x, y)\n# zipped = [(1, 4), (2, 5), (3, 6)]\n\nx2, y2 = zip(*zipped)\n\nx == list(x2) and y == list(y2)\n# True\n\n\n\n\nTrue\n\n\n\nseasons = ['Spring', 'Summer', 'Fall', 'Winter']\n\nlist(enumerate(seasons))\n# [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n\nlist(enumerate(seasons, start=1))\n# [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n\n\n\n\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n\n\n\nProject Command Line Calendar\n\n\nIn this project, we\nll build a basic calendar that the user will be able to interact with from the command line. The user should be able to choose to:\n\n\n\n\nView the calendar\n\n\nAdd an event to the calendar\n\n\nUpdate an existing event\n\n\nDelete an existing event\n\n\n\n\nfrom time import sleep, strftime\n\nhis_name = raw_input(\nWhat is your first name? \n)\nhis_name = str(his_name)\n# calendar will store the dates as keys and the events as values\n\ncalendar = {}\n\ndef welcome():\n\n    print(\nWelcome \n + his_name +\n.\n)\n\n    print(\nCalendar starting...\n)\n    sleep(0.5)\n    print(\nToday is: \n + strftime(\n%A, %B %d, %Y\n))\n    print(\nIt is currently: \n + strftime(\n%H:%M:%S\n))\n    sleep(0.5)\n\ndef start_calendar():\n\n    welcome()\n    print(\nWhat would you like to do?\n)\n    print(calendar)\n    start = True\n\n    while start:\n        user_choice = raw_input(\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \n).upper()\n\n        if user_choice == 'V': # V\n            if len(calendar.keys()) \n 1:\n                print(\nThe calendar is empty\n)\n            else:\n                print(calendar)\n\n        elif user_choice == 'U': # U\n            if len(calendar.keys()) \n 1:\n                print(\nThe calendar is empty\n)\n            else:\n                print(calendar)\n                date = raw_input(\nWhat date? \n)\n                update = raw_input(\nEnter the update: \n)\n                # could be more control here...\n                calendar[date] = update # without checking if the date is valid or if it already exists (which could override things)!\n                print(\nSuccessful!\n)\n                print(calendar)\n\n        elif user_choice == 'A': # A\n            event = raw_input(\nEnter event: \n)\n            date = raw_input(\nEnter date (MM/DD/YYYY): \n)\n            if (len(date) \n 10 or int(date[6:]) \n int(strftime(\n%Y\n))): # could be more control...\n                print(\nInvalid date format.\n)\n                try_again = raw_input(\nTry Again? 'Y' for Yes, 'N' for No: \n).upper()\n                if try_again == 'Y':\n                    continue #! break, continue, start is still True\n                else:\n                    start == False\n            else:\n                calendar[date] = event # without checking if the date is valid or if it already exists (which could override things)!\n                print(\nSuccessful!\n)\n                print(calendar)\n\n        elif user_choice == 'D': # D\n            if len(calendar.keys()) \n 1:\n                print(\nThe calendar is empty.\n)\n            else:\n                print(calendar)\n                event = raw_input(\nWhat event? \n) # could be more option like: What date?\n                for date in calendar.keys():\n                    if event == calendar[date]:\n                        del calendar[date] # del a[], [1], [\na\n], [1:3], [5:], [:9], etc.\n                        print(\nDeleted.\n)\n                        print(calendar)\n                    else:\n                        print(\nIncorrect.\n)\n\n        elif user_choice == 'X': # X\n            start = False\n\n        else:\n            print(\nInvalid command.\n)\n            break\n\nstart_calendar()\n\n\n\n\nWhat is your first name? Al\nWelcome Al.\nCalendar starting...\nToday is: Thursday, October 20, 2016\nIt is currently: 13:42:02\nWhat would you like to do?\n{}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? a\nEnter event: Buy stuff\nEnter date (MM/DD/YYYY): 10/21/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Sell stuff\nEnter date (MM/DD/YYYY): 11/01/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Rent stuff\nEnter date (MM/DD/YYYY): 01/01/2018\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? u\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nWhat date? 01/01/2018\nEnter the update: Lease stuff\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? Buy stuff\nDeleted.\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? 10/21/2016\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? x\n\n\n\nUNIT 9, Exam Statistics\n\n\nExam Statistics\n\n\ngrades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]\n\nprint \nGrades:\n, grades\n\ndef print_grades(grades): # list the grades\n\n    for i in grades:\n        print i, # , keep the list on the same line\n\nprint_grades(grades)\n\nprint \nLet's compute some stats!\n\n\ndef grades_sum(scores): # sum up the grades\n\n    total = 0\n    for s in scores:\n        total += s\n    return total\n\nprint grades_sum(grades)\n\ndef grades_average(grades): # average the grades\n\n    sum_of_grades = grades_sum(grades)\n    average = sum_of_grades / float(len(grades))\n    return average\n\nprint grades_average(grades)\n\nprint \nTime to conquer the variance!\n\n\ndef grades_variance(scores): # compute the variance\n\n    average = grades_average(scores)\n    totalvariance = 0\n    for score in scores:\n        totalvariance += (score - average) ** 2\n    tvariance = totalvariance/float(len(scores))\n    return tvariance\n\nvariance = grades_variance(grades)\nprint variance\n\ndef grades_std_deviation(variance): # compute standard deviation\n\n    stddevisation = variance ** 0.5\n    return stddevisation\n\nprint grades_std_deviation(variance)\n\n\n\n\nGrades: [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]\n100 100 90 40 80 100 85 70 90 65 90 85 50.5 Let's compute some stats!\n1045.5\n80.4230769231\nTime to conquer the variance!\n334.071005917\n18.2776094147\n\n\n\nUNIT 10, Advanced Topics in Python\n\n\nAdvanced Topics in Python\n\n\nIterate through a dictionary.\n\n\nmy_dict = {\n    \nCodeCademy\n : \nPython\n,\n    \nDataCamp\n : \nR\n,\n    \nCode School\n : \nSQL\n\n}\n\nprint my_dict.items()\nprint my_dict.keys()\nprint my_dict.values()\n\nfor key in my_dict:\n    print key, my_dict[key] # key and value\n\n\n\n\n[('CodeCademy', 'Python'), ('Code School', 'SQL'), ('DataCamp', 'R')]\n['CodeCademy', 'Code School', 'DataCamp']\n['Python', 'SQL', 'R']\nCodeCademy Python\nCode School SQL\nDataCamp R\n\n\n\nBuild a list.\n\n\nevens_to_50 = [i for i in range(51) if i % 2 == 0]\n\nprint evens_to_50\n\n\n\n\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]\n\n\n\nBuild lists with conditions.\n\n\ndoubles_by_3 = [x * 2 for x in range(1,6) if (x * 2) % 3 == 0]\n\nprint doubles_by_3\n\n\n\n\n[6]\n\n\n\neven_squares = [x ** 2 for x in range(2,11) if (x ** 2) % 2 == 0]\n\nprint even_squares\n\n\n\n\n[4, 16, 36, 64, 100]\n\n\n\ncubes_by_four = [x ** 3 for x in range(1,11) if x ** 3 % 4 == 0]\n\nprint cubes_by_four\n\n\n\n\n[8, 64, 216, 512, 1000]\n\n\n\nLists slicing.\n\n\nextract, list\n\n\nl = [i ** 2 for i in range(1, 11)] # Should be [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\nprint l[2:9:2] # [start:end:stride]\n\n\n\n\n[9, 25, 49, 81]\n\n\n\nmy_list = range(1, 11) # list of numbers 1 - 10\n\nprint my_list[::2]\n\n\n\n\n[1, 3, 5, 7, 9]\n\n\n\nmy_list = range(1, 11)\n\nbackwards = my_list[::-1]\n\nprint backwards\n\n\n\n\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n\n\nto_one_hundred = range(101)\n\nbackwards_by_tens = to_one_hundred[::-10]\n\nprint backwards_by_tens\n\n\n\n\n[100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0]\n\n\n\nto_21 = range(1, 22)\n\nprint to_21\n\nodds = range(1, 22, 2)\n\nprint odds\n\nmiddle_third = to_21[7:14:1]\n\nprint middle_third\n\n\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n[8, 9, 10, 11, 12, 13, 14]\n\n\n\nLambda function.\n\n\nmy_list = range(16)\n\nprint filter(lambda x: x % 3 == 0, my_list)\n\n\n\n\n[0, 3, 6, 9, 12, 15]\n\n\n\nlanguages = [\nHTML\n, \nJavaScript\n, \nPython\n, \nRuby\n]\n\nprint filter(lambda x: x == \nPython\n,languages)\n\n\n\n\n['Python']\n\n\n\nsquares = [x**2 for x in range(1,11)]\n\nprint filter(lambda x: (x \n= 30 and x \n= 70), squares)\n\n\n\n\n[36, 49, 64]\n\n\n\nIterating over dictionaries.\n\n\nmovies = {\n    \nMonty Python and the Holy Grail\n: \nGreat\n,\n    \nMonty Python's Life of Brian\n: \nGood\n,\n    \nMonty Python's Meaning of Life\n: \nOkay\n\n}\n\nprint movies.items()\n\n\n\n\n[(\"Monty Python's Life of Brian\", 'Good'), (\"Monty Python's Meaning of Life\", 'Okay'), ('Monty Python and the Holy Grail', 'Great')]\n\n\n\nComprehensions.\n\n\nthrees_and_fives = [x for x in range(1,16) if (x % 3 == 0 or x % 5 == 0)]\n\nprint threes_and_fives\n\n\n\n\n[3, 5, 6, 9, 10, 12, 15]\n\n\n\nSlicing again.\n\n\nextract\n\n\ngarbled = \n!XeXgXaXsXsXeXmX XtXeXrXcXeXsX XeXhXtX XmXaX XI\n\n\nmessage = garbled[::-2]\n\nprint message\n\n\n\n\nI am the secret message!\n\n\n\ngarbled = \nIXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX\n\n\nmessage = filter(lambda x: x != \nX\n, garbled)\n\nprint message\n\n\n\n\nI am another secret message!\n\n\n\nIntroduction to Bitwise Operators\n\n\nOperators.\n\n\nprint 5 \n 4  # Right Shift\nprint 5 \n 1  # Left Shift\nprint 8 \n 5   # Bitwise AND\nprint 9 | 4   # Bitwise OR\nprint 12 ^ 42 # Bitwise XOR\nprint \n/sub\n88     # Bitwise NOT\n\n\n\n\n0\n10\n0\n13\n38\n-89\n\n\n\nBase 2 or binary.\n\n\nprint 0b1,    # 1\nprint 0b10,   # 2\nprint 0b11,   # 3\nprint 0b100,  # 4\nprint 0b101,  # 5\nprint 0b110,  # 6\nprint 0b111   # 7\nprint \n******\n\nprint 0b1 + 0b11 # 1 + 3 = 4\nprint 0b11 * 0b11 # 3 * 3 = 90\n\n\n\n\n1 2 3 4 5 6 7\n******\n4\n9\n\n\n\none = 0b1\ntwo = 0b10\nthree = 0b11\nfour = 0b100\nfive = 0b101\nsix = 0b110\nseven = 0b111\neight = 0b1000\nnine = 0b1001\nten = 0b1010\neleven = 0b1011\ntwelve = 0b1100\n\n\n\n\nDecimal to binary.\n\n\nprint bin(1)\nprint bin(2)\nprint bin(3)\nprint bin(4)\nprint bin(5)\n\n\n\n\n0b1\n0b10\n0b11\n0b100\n0b101\n\n\n\nBinary to decimal.\n\n\nprint int(\n1\n,2)\nprint int(\n10\n,2)\nprint int(\n111\n,2)\nprint int(\n0b100\n,2)\nprint int(bin(5),2)\n\n\n\n\n1\n2\n7\n4\n5\n\n\n\nPrint out the decimal equivalent of the binary 11001001.\n\n\nprint int(\n11001001\n,2)\n\n\n\n\n201\n\n\n\nLeft Bit Shift (\n)\n\n\n0b000001 \n 2 == 0b000100 (1 \n 2 = 4)\n0b000101 \n 3 == 0b101000 (5 \n 3 = 40)       \n\n\n\n\nRight Bit Shift (\n)\n\n\n0b0010100 \n 3 == 0b000010 (20 \n 3 = 2)\n0b0000010 \n 2 == 0b000000 (2 \n 2 = 0)\n\n\n\n\nThis operation is mathematically equivalent to floor dividing and multiplying by 2 (respectively) for every time you shift, but it\ns often easier just to think of it as shifting all the 1s and 0s left or right by the specified number of slots.\n\n\nshift_right = 0b1100\nshift_left = 0b1\n\nshift_right = 0b1100 \n 2\nshift_left = 0b1 \n 2\nprint bin(shift_right)\nprint bin(shift_left)\n\n\n\n\n0b11\n0b100\n\n\n\nThe bitwise AND (\n) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if the corresponding bits of both numbers are 1. For example:\n\n\n    a:   00101010   42\n    b:   00001111   15       \n===================\na \n b:   00001010   10\n\n\n\n\nAs you can see, the 2\ns bit and the 8\ns bit are the only bits that are on in both \na\n and \nb\n, so \na \n b\n only contains those bits. Note that using the \n operator can only result in a number that is less than or equal to the smaller of the two values.\n\n\n\n\n0 \n 0 = 0\n\n\n0 \n 1 = 0\n\n\n1 \n 0 = 0\n\n\n1 \n 1 = 1\n\n\n\n\nFor example: \n0b111 (7) \n 0b1010 (10) = 0b10\n.\n\n\nprint bin(0b1110\n0b101)\n\nprint bin(0b100)\n\n\n\n\n0b100\n0b100\n\n\n\nThe bitwise OR (\n|\n) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of either number are 1. For example:\n\n\n    a:  00101010  42\n    b:  00001111  15       \n================\na | b:  00101111  47\n\n\n\n\nNote that the bitwise \n|\n operator can only create results that are greater than or equal to the larger of the two integer inputs.\n\n\n\n\n0 | 0 = 0\n\n\n0 | 1 = 1 \n\n\n1 | 0 = 1\n\n\n1 | 1 = 1\n\n\n\n\nFor example: \n110 (6) | 1010 (10) = 1110 (14)\n.\n\n\nprint bin(0b1110|0b101)\n\n\n\n\n0b1111\n\n\n\nThe XOR (\n^\n) or exclusive or operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of the two numbers are 1, but not both.\n\n\n    a:  00101010   42\n    b:  00001111   15       \n================\na ^ b:  00100101   37\n\n\n\n\nKeep in mind that if a bit is off in both numbers, it stays off in the result. Note that \nXOR\n-ing a number with itself will always result in 0.\n\n\n\n\n0 ^ 0 = 0\n\n\n0 ^ 1 = 1\n\n\n1 ^ 0 = 1\n\n\n1 ^ 1 = 0\n\n\n\n\nFor example: \n111 (7) ^ 1010 (10) = 1101 (13)\n.\n\n\nprint bin(0b1110^0b101)\n\n\n\n\n0b1011\n\n\n\nThe bitwise NOT operator (\n/sub\n) just flips all of the bits in a single number. What this actually means to the computer is actually very complicated, so we\nre not going to get into it. Just know that mathematically, this is equivalent to adding one to the number and then making it negative. \n\n\nprint \n/sub\n1\nprint \n/sub\n2\nprint \n/sub\n3\nprint \n/sub\n42\nprint \n/sub\n123\n\n\n\n\n-2\n-3\n-4\n-43\n-124\n\n\n\nA bit mask is just a variable that aids you with bitwise operations. A bit mask can help you turn specific bits on, turn others off, or just collect data from an integer about which bits are on or off.\n\n\ndef check_bit4(input):\n\n    mask = 0b1000\n    desired = input \n mask\n    if desired \n 0:\n        return \non\n\n    else:\n        return \noff\n\n\nprint check_bit4(0b1100)\n\n\n\n\non\n\n\n\n0b1000\n0b1100\n======\n0b1000\n\n\n\n\nYou can also use masks to turn a bit in a number on using \n|\n. Use a bitmask and the value a in order to achieve a result where the third bit from the right of a is turned on. Be sure to print your answer as a \nbin()\n string!\n\n\na = 0b10111011\nmask = 0b100\ndesired = a | mask\nprint bin(desired)\n\n\n\n\n0b10111111\n\n\n\n0b10111011\n0b00000100\n==========\n0b10111111\n\n\n\n\nUsing the XOR (\n^\n) operator is very useful for flipping bits. Using \n^\n on a bit with the number one will return a result where that bit is flipped. In the editor is the 8 bit variable a. Use a bitmask and the value a in order to achieve a result where all of the bits in a are flipped. Be sure to print your answer as a \nbin()\n string!\n\n\na = 0b11101110\nmask = 0b11111111\ndesired = a ^ mask\nprint bin(desired)\n\n\n\n\n0b10001\n\n\n\n0b11101110\n0b11111111\n==========\n0b00010001\n\n\n\n\nFinally, you can also use the left shift (\n) and right shift (\n) operators to slide masks into place.\n\n\ndef flip_bit(number, n):\n\n    mask = (0b1 \n (n-1))\n    result = number ^ mask\n    return bin(result)\n\nprint flip_bit(0b111, 2)\n\n\n\n\n0b101\n\n\n\nProject RGB-HEX Converter\n\n\nIn this project, we\nll use Bitwise operators to build a calculator that can convert RGB values to Hexadecimal (\nhex\n) values, and vice-versa.\n\n\ndef rgb_hex():\n\n    invalid_msg = \nInvalid entry\n\n    red = int(raw_input(\nEnter a 'red' (R) value, from 0 to 255: \n))\n    if red \n 0 or red \n 255:\n        print invalid_msg\n        return # return will exit the function, w/o return, the function jumps to the next line...\n\n    green = int(raw_input(\nEnter a 'green' (G) value, from 0 to 255: \n))\n    if green \n 0 or green \n 255:\n        print invalid_msg\n        return\n\n    blue = int(raw_input(\nEnter a 'blue' (B) value, from 0 to 255: \n))\n    if blue \n 0 or blue \n 255:\n        print invalid_msg\n        return\n\n    val = red \n 16 + green \n 8 + blue\n    # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character.\n    # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\n    # Become familiar with bits by reading more here.\n    print \n%s\n %(hex(val)[2:].upper()) # string formatting\n\ndef hex_rgb():\n\n    invalid_msg = \nInvalid entry\n\n    hex_val = raw_input(\nEnter a color (six hexadecimal digits): \n)\n    if len(hex_val) != 6:\n        print \nInvalid Entry\n\n    else:\n        hex_val = int(hex_val, 16)\n    two_hex_digits = 2 ** 8\n    blue = hex_val % two_hex_digits\n    hex_val = hex_val \n 8\n    green = hex_val % two_hex_digits\n    hex_val = hex_val \n 8\n    red = hex_val % two_hex_digits\n    print \nRed: %s Green: %s Blue: %s\n %(red, green,blue)\n\ndef convert():\n\n    while True:\n        option = str(raw_input(\nEnter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \n))\n        if option == '1':\n            print \nRGB to Hex...\n\n            rgb_hex()\n        elif option == '2':\n            print \nHex to RGB...\n\n            hex_rgb()\n        elif option == 'X' or option == 'x':\n            break\n        else:\n            print \nError\n\n\nconvert()\n\n\n\n\nEnter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. 1\nRGB to Hex...\nEnter a 'red' (R) value, from 0 to 255: 10\nEnter a 'green' (G) value, from 0 to 255: 10\nEnter a 'blue' (B) value, from 0 to 255: 20\n280000000000000L\nEnter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. x\n\n\n\nUNIT 11, Introduction to Classes\n\n\nIntroduction to Classes\n\n\nYou can think of an object as a single data structure that contains data as well as functions; functions of objects are called methods. \nClass Fruit\n, \nlemon instance\n.\n\n\nclass Fruit(object):\n\n\n    def __init__(self, name, color, flavor, poisonous):\n\n        self.name = name\n        self.color = color\n        self.flavor = flavor\n        self.poisonous = poisonous\n\n    def description(self):\n\n        print \nI'm a %s %s and I taste %s.\n % (self.color, self.name, self.flavor)\n\n    def is_edible(self):\n\n        if not self.poisonous:\n            print \nYep! I'm edible.\n\n        else:\n            print \nDon't eat me! I am super poisonous.\n\n\n\nlemon = Fruit(\nlemon\n, \nyellow\n, \nsour\n, False)\n\nlemon.description()\n\nlemon.is_edible()\n\n\n\n\nI'm a yellow lemon and I taste sour.\nYep! I'm edible.\n\n\n\nThe class keyword, the name of the class, and the class from which the new class inherits in parentheses. By convention, user-defined Python class names start with a capital letter.\n\n\nclass Animal(object):\n\n\n    pass\n\n\n\n\n__init__():\n this function is required for classes, and it\ns used to initialize the objects it creates. \n__init__()\n always takes at least one argument, self, that refers to the object being created. You can think of \n__init__()\n as the function that \nboots up\n each object the class creates. Python will use the first parameter that \n__init__()\n receives to refer to the object being created; this is why it\ns often called self, since this parameter gives the object being created its identity.\n\n\nclass Animal(object):\n\n\n    def __init__(self, name):\n\n        self.name = name\n\n\n\n\nStart creating objects. We can access attributes of our objects using dot notation.\n\n\nclass Animal(object):\n\n\n    def __init__(self, name):\n\n        self.name = name\n\n\nzebra = Animal(\nJeffrey\n) # instance of Animal\n\nprint zebra.name # instance with attributes\n\n\n\n\nJeffrey\n\n\n\nMore\n\n\nClass Animal(object):\n\n\n    def __init__(self, name, age, is_hungry):\n\n        self.name = name\n        self.age = age\n        self.is_hungry = is_hungry\n\n\nzebra = Animal(\nJeffrey\n, 2, True)\ngiraffe = Animal(\nBruce\n, 1, False)\npanda = Animal(\nChad\n, 7, True)\n\nprint zebra.name, zebra.age, zebra.is_hungry\nprint giraffe.name, giraffe.age, giraffe.is_hungry\nprint panda.name, panda.age, panda.is_hungry\n\n\n\n\n  File \"\nipython-input-55-08cd00c1ed56\n\", line 1\n    Class Animal(object):\n               ^\nSyntaxError: invalid syntax\n\n\n\nAnother important aspect of Python classes is scope. The scope of a variable is the context in which it\ns visible to the program.\n\n\nIt may surprise you to learn that not all variables are accessible to all parts of a Python program at all times. When dealing with classes, you can have variables that are available everywhere (global variables), variables that are only available to members of a certain class (member variables), and variables that are only available to particular instances of a class (instance variables).\n\n\nGlobal variable, (class) member variable, class variable, instance variable\n\n\nThe same goes for functions: some are available everywhere, some are only available to members of a certain class, and still others are only available to particular instance objects.\n\n\nGlobal function, class function, instance function\n\n\nThey all have access to the member variable is_alive, since they\nre all members of the Animal class.\n\n\nclass Animal(object):\n\n\n    \nMakes cute animals.\n\n\n    is_alive = True\n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n\nzebra = Animal(\nJeffrey\n, 2)\ngiraffe = Animal(\nBruce\n, 1)\npanda = Animal(\nChad\n, 7)\n\nprint zebra.name, zebra.age, zebra.is_alive\nprint giraffe.name, giraffe.age, giraffe.is_alive\nprint panda.name, panda.age, panda.is_alive\n\n\n\n\nJeffrey 2 True\nBruce 1 True\nChad 7 True\n\n\n\nWhen a class has its own functions, those functions are called methods.\n\n\nclass Animal(object):\n\n\n    \nMakes cute animals.\n\n\n    is_alive = True\n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n    def description(self):\n\n        print self.name\n        print self.age\n\n\nhippo = Animal(\nYan\n, 10)\n\nhippo.description() # will call the class function and print\n\n\n\n\nYan\n10\n\n\n\nA class can have any number of member variables.\n\n\nclass Animal(object):\n\n\n    \nMakes cute animals.\n\n\n    is_alive = True\n    health = \ngood\n\n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n    def description(self):\n\n        print self.name\n        print self.age\n\n\nhippo = Animal(\nYan\n, 10)\nsloth = Animal(\nGeorge\n, 1)\nocelot = Animal(\nHolly\n, 2)\n\nprint hippo.health # will call the class variable\nprint sloth.health\nprint ocelot.health\n\n\n\n\ngood\ngood\ngood\n\n\n\nKind of classes and objects you might find in commercial software: here we have a basic \nShoppingCart\n class for creating shopping cart objects for website customers; though basic, it\ns similar to what you\nd see in a real program.\n\n\nclass ShoppingCart(object):\n\n\n    items_in_cart = {} # try it with an empty or not dictionary\n    items_in_cart = {\ncereal\n:1}\n\n    def __init__(self, customer_name):\n\n        self.customer_name = customer_name\n\n    def add_item(self, product, price):\n\n        \nAdd product to the cart.\n\n\n        if not product in self.items_in_cart: # check the dictionary\n            self.items_in_cart[product] = price\n            print product + \n added.\n\n        else:\n            print product + \n is already in the cart.\n\n\n    def remove_item(self, product):\n\n        \nRemove product from the cart.\n\n\n        if product in self.items_in_cart: # check the dictionary\n            del self.items_in_cart[product]\n            print product + \n removed.\n\n        else:\n            print product + \n is not in the cart.\n\n\n\nmy_cart = ShoppingCart(\nJean\n) # instance\nmy_cart.add_item(\ncereal\n,1) # class function\n\n\n\n\ncereal is already in the cart.\n\n\n\nInheritance is a tricky concept, so let\ns go through it step by step. Inheritance is the process by which one class takes on the attributes and methods of another, and it\ns used to express an is-a relationship. For example, a Panda is a bear, so a Panda class could inherit from a Bear class.\n\n\nclass Customer(object):\n\n\n    \nProduces objects that represent customers.\n\n\n    def __init__(self, customer_id):\n\n        self.customer_id = customer_id\n\n    def display_cart(self):\n\n        print \nI'm a string that stands in for the contents of your shopping cart!\n\n\n\nclass ReturningCustomer(Customer):\n\n\n    \nFor customers of the repeat variety.\n\n\n    def display_order_history(self):\n\n        print \nI'm a string that stands in for your order history!\n\n\n\nmonty_python = ReturningCustomer(\nID: 12345\n) # class instance\nmonty_python.display_cart() # inherited from the 1st class\nmonty_python.display_order_history() # from the current class\n\n\n\n\nI'm a string that stands in for the contents of your shopping cart!\nI'm a string that stands in for your order history!\n\n\n\nCOMPLETE EXAMPLE.\n\n\nclass Shape(object):\n\n\n    \nmake shapes\n\n\n    number_of_sides = 5\n\n    def __init__(self, number_of_sides):\n\n        self.number_of_sides = number_of_sides\n\n\nmy_shape = Shape(4) # instance\n\n\nclass Triangle(Shape):\n\n\n    number_of_3sides = 3\n    # number_of_sides = 3 # would override the above\n\n\n    def __init__(self, angle1, angle2, angle3):\n\n        self.angle1 = angle1\n        self.angle2 = angle2\n        self.angle3 = angle3\n\n    def check_angles(self):\n\n        if self.angle1 + self.angle2 + self.angle3 == 180:\n            return True\n        else:\n            return False\n\n\nmy_triangle = Triangle(90, 30, 60) # instance\n\nprint my_triangle.number_of_sides # inherit\nprint my_shape.number_of_sides\n\nprint my_triangle.number_of_3sides\nprint my_triangle.check_angles()\n\n\nclass Equilateral(Triangle):\n\n\n    angle = 60\n\n    def __init__(self):\n\n        self.angle1 = self.angle # override the above\n        self.angle2 = self.angle\n        self.angle3 = self.angle\n\n\nmy_equilateral = Equilateral() # instance\n\nprint my_equilateral.angle\nprint my_equilateral.angle1 # based on variable angle\n\nprint my_equilateral.number_of_sides # inherit\nprint my_equilateral.number_of_3sides # inherit\n\nprint my_equilateral.check_angles() # inherit; method way\nprint Equilateral.check_angles(my_equilateral) # function way; IDEM !!!\n\n\n\n\n5\n4\n3\nTrue\n60\n60\n5\n3\nTrue\nTrue\n\n\n\nSometimes you\nll want one class that inherits from another to not only take on the methods and attributes of its parent, but to override one or more of them.\n\n\nclass Employee(object):\n\n\n    \nModels real-life employees!\n\n\n    def __init__(self, employee_name):\n\n        self.employee_name = employee_name\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 20.00\n\n\nclass PartTimeEmployee(Employee):\n\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 12.00 # override what is naturally inherited\n\n\n\n\nclass Employee(object):\n\n\n    def __init__(self, name):\n\n        self.name = name\n\n    def greet(self, other):\n\n        print \nHello, %s\n % other.name\n\n\nclass CEO(Employee):\n\n    def greet(self, other):\n\n        print \nGet back to work, %s!\n % other.name # override\n\n\nceo = CEO(\nEmily\n)\nemp = Employee(\nSteve\n)\n\nemp.greet(ceo)\nceo.greet(emp)\n\n\n\n\nHello, Emily\nGet back to work, Steve!\n\n\n\nOn the flip side, sometimes you\nll be working with a derived class (or subclass) and realize that you\nve overwritten a method or attribute defined in that class\n base class (also called a parent or superclass) that you actually need. Have no fear! You can directly access the attributes or methods of a superclass with Python\ns built-in super call.\n\n\nclass Employee(object):\n\n\n    \nModels real-life employees!\n\n\n    def __init__(self, employee_name):\n\n        self.employee_name = employee_name\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 20.00\n\n\nclass PartTimeEmployee(Employee):\n\n\n    def calculate_wage(self, hours): # override\n\n        self.hours = hours\n        return hours * 12.00\n\n    def full_time_wage(self, hours): # super call: associate the parent's class function with child's new function withtout retyping the function\n\n        return super(PartTimeEmployee, self).calculate_wage(hours)\n\n\nmilton = PartTimeEmployee(\nJack\n)\n\nprint milton.full_time_wage(10)\n\n\n\n\n200.0\n\n\n\nMore on Classes\n\n\nclass Car(object): # create a class\n\n\n    pass\n\n\nmy_car = Car() # create a class instance\n\n\n\n\nclass Car(object):\n\n\n    condition = \nnew\n # create a member variables\n\n\nmy_car = Car()\n\nprint my_car.condition # call the member variable\n\n\n\n\nnew\n\n\n\nclass Car(object):\n\n\n    condition = \nnew\n\n\n    def __init__(self, model, color, mpg): # initialize or boot up!\n\n        self.model = model # assign class variables\n        self.color = color\n        self.mpg = mpg\n\n\nmy_car = Car(\nDeLorean\n, \nsilver\n, 88) # create an instance with its class variables\n\nprint my_car.condition\n\nprint my_car.model # call the class variables...\nprint my_car.color\nprint my_car.mpg\n\n\n\n\nnew\nDeLorean\nsilver\n88\n\n\n\nclass Car(object):\n\n\n    condition = \nnew\n\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \nThis is a %s %s with %s MPG.\n % (self.color, self.model, str(self.mpg)) # create a class method (function)\n\n\nmy_car = Car(\nDeLorean\n, \nsilver\n, 88)\n\nprint my_car.condition\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car() # call the class method\n\n\n\n\nnew\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\n\n\n\nclass Car(object):\n\n\n    condition = \nnew\n\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \nThis is a %s %s with %s MPG.\n % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition = \nused\n\n\n\nmy_car = Car(\nDeLorean\n, \nsilver\n, 88)\n\nprint my_car.condition # 'new'\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car()\nprint my_car.condition # the condition changes to 'used'\n\n\n\n\nnew\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused\n\n\n\nclass Car(object):\n\n\n    condition = \nnew\n\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \nThis is a %s %s with %s MPG.\n % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition = \nused\n\n\n\nmy_car = Car(\nDeLorean\n, \nsilver\n, 88)\n\nprint my_car.condition\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car()\nprint my_car.condition\n\n\nclass ElectricCar(Car):\n\n\n    def __init__(self, model, color, mpg, battery_type): # initialize with some partial inheritance from class Car\n\n        Car.__init__(self, model, color, mpg) # assign class variable by inheritance from class Car\n        self.battery_type = battery_type # assign a new class variable\n\n\nmy_car = ElectricCar(\nTelsa\n, \nred\n, 0, \nmolten salt\n) # create an instance with its class variables; OVERRIDE the above\n\nprint my_car.condition # call the class variables; OVERRIDE the above\n\nprint my_car.model # call the member variable; OVERRIDE the above\nprint my_car.color\nprint my_car.mpg\n\nmy_ride = ElectricCar(\nGoogle\n, \nblue\n, 10, \nelectrical\n) # create an instance with its class variables\n\nprint my_ride.condition # call the class variables\n\nprint my_ride.model # call the member variable\nprint my_ride.color\nprint my_ride.mpg\n\n\n\n\nnew\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused\nnew\nTelsa\nred\n0\nnew\nGoogle\nblue\n10\n\n\n\nclass Car(object):\n\n\n    condition = \nnew\n\n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return \nThis is a %s %s with %s MPG.\n % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition = \nused\n\n\n\nmy_car = Car(\nDeLorean\n, \nsilver\n, 88)\n\nprint my_car.condition + \n!\n # call the member variable; 'new'\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car() # call the class method\nprint my_car.condition + \n!!\n # member variable; now 'used'\n\nclass ElectricCar(Car):\n\n\n    def __init__(self, model, color, mpg, battery_type):\n\n        Car.__init__(self, model, color, mpg)\n        self.battery_type = battery_type\n\n    def drive_car(self): # create a class method; OVERRIDE the above\n\n        self.condition = \nlike new\n\n\n\nmy_car = ElectricCar(\nTelsa\n, \nred\n, 0, \nmolten salt\n)\n\nprint my_car.condition + \n!\n # 'new' again\nmy_car.drive_car() # call the class method\nprint my_car.condition + \n!!\n # 'like new' now\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nmy_ride = ElectricCar(\nGoogle\n, \nblue\n, 10, \nelectrical\n)\n\nprint my_ride.condition + \n!\n # 'used' again\nmy_ride.drive_car()# call the class method\nprint my_ride.condition + \n!!\n # 'like new' now\n\nprint my_ride.model\nprint my_ride.color\nprint my_ride.mpg\n\n\n\n\nnew!\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused!!\nnew!\nlike new!!\nTelsa\nred\n0\nnew!\nlike new!!\nGoogle\nblue\n10\n\n\n\nclass Point3D(object):\n\n\n    def __init__(self, x, y, z): # initialize\n\n        self.x = x\n        self.y = y\n        self.z = z\n\n# __repr__() method, which is short for representation; by providing a return value in this method, we can tell Python how to represent an object of our class (for instance, when using a print statement).\n\n    def __repr__(self):\n\n        return \n(%d, %d, %d)\n % (self.x, self.y, self.z)\n\n\nmy_point = Point3D(1,2,3) # instance\n\n# Print my_point.__repr__() w/o adding variables\n\nprint my_point\n\n\n\n\n(1, 2, 3)\n\n\n\nQuiz 11\n\n\nPython writes data to a file when you close the file!\n\n\nProject Bank Account\n\n\nIn this project, we\nll create a Python class that can be used to create and manipulate a personal bank account.\n\n\nclass BankAccount(object):\n\n\n    balance = 0\n\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n\n    # The __repr__() method defines what represents the object when a user tries to print the BnkAccount object using print. Let's add to this method and make it descriptive.\n\n        return \n%s's account; Balance: $%.2f\n % (self.name, self.balance) # $%.2f for 2 decimals, self.class attribute, self.member variable\n\n    def show_balance(self):\n\n        print \nBalance: $%.2f\\n\n % (self.balance)\n\n    def deposit(self, amount):\n\n        if amount \n= 0:\n            print \nNo Account. Invalid\\n\n\n            return # # return will exit the function, w/o return, the function jumps to the next line...\n        else:\n            print \nDepositing: $%.2f\n % (amount) # ?\n            self.balance += amount\n            self.show_balance() # calling a class function\n\n    def withdraw(self, amount):\n\n        if amount \n self.balance:\n            print \nMore than the balance. Invalid\\n\n\n            return\n        else:\n            print \nWithdrawing: $%.2f\n % (amount) # ?\n            self.balance -= amount\n            self.show_balance()\n\n\nmy_account = BankAccount(\nUgo\n) # Ugo is the argument 'name'\n\nprint my_account # launch the __repr__\nmy_account.show_balance() # launch the class function (method) show_balance\n\nmy_account.deposit(2000)\nmy_account.withdraw(3000)\nmy_account.withdraw(1000)\n\nprint my_account\n\n\n\n\nUgo's account; Balance: $0.00\nBalance: $0.00\n\nDepositing: $2000.00\nBalance: $2000.00\n\nMore than the balance. Invalid\n\nWithdrawing: $1000.00\nBalance: $1000.00\n\nUgo's account; Balance: $1000.00\n\n\n\nUNIT 12, File Input and Output\n\n\nFile Input/Output\n\n\nRead information from a file on your computer, and/or write that information to another file? This process is called file I/O.\n\n\nmy_list = [i ** 2 for i in range(1,11)]\n\nf = open(\noutput.txt\n, \nw\n) # create a file\n\nfor item in my_list:\n    f.write(str(item) + \n\\n\n) # write\n\nf.close() # save, close\n\n\n\n\nFirst.\n\n\nf = open(\noutput.txt\n, \nw\n) # This told Python to open output.txt in \nw\n mode (\nw\n stands for \nwrite\n).\n\n\n\n\nRead and write.\n\n\nmy_list = [i ** 2 for i in range(1,11)]\n\nmy_file = open(\noutput.txt\n, \nr+\n) # the file must exist\n\nfor item in my_list:\n    my_file.write(str(item) + \n\\n\n) # overwrite\n\nmy_file.close() # save, close\n\n\n\n\nRead on the console.\n\n\nmy_file = open(\noutput.txt\n, \nr\n) # the file must exist\nprint my_file.read()\n\nmy_file.close()\n\n\n\n\n1\n4\n9\n16\n25\n36\n49\n64\n81\n100\n\n\n\nRead lines on the console.\n\n\nmy_file = open(\noutput.txt\n, \nr\n) # the file must exist\n\nprint my_file.readline() # read line 1\nprint my_file.readline() # read line 2 automatically\nprint my_file.readline() # read line 3\n\nmy_file.close()\n\n\n\n\n1\n\n4\n\n9\n\n\n\nOpen the file for reading.\n\n\nread_file = open(\noutput.txt\n, \nr\n)\nprint read_file.read()\nread_file.close()\n\n\n\n\n1\n4\n9\n16\n25\n36\n49\n64\n81\n100\n\n\n\nUse a second file handler to open the file for writing.\n\n\nwrite_file = open(\ntext.txt\n, \nw\n)\n\n# Write to the file\nwrite_file.write(\nNot closing files is VERY BAD.\n)\n\n# Try to read from the file\nprint write_file.read() # Not working...``\n\nwrite_file.close()\n\n\n\n\n---------------------------------------------------------------------------\n\nIOError                                   Traceback (most recent call last)\n\n\nipython-input-87-db256164394e\n in \nmodule\n()\n      5 \n      6 # Try to read from the file\n----\n 7 print write_file.read() # Not working...``\n      8 \n      9 write_file.close()\n\n\nIOError: File not open for reading\n\n\n\nTry.\n\n\nread_file = open(\ntext.txt\n, \nr\n)\nprint read_file.read()\n\nwrite_file = open(\ntext.txt\n, \nw\n)\nwrite_file.write(\nNot closing files is VERY BAD.\n)\n\nwrite_file.close() # close it!\n\nwrite_file = open(\ntext.txt\n, \nr\n) # reopen it in read mode\nprint write_file.read() # working\nwrite_file.close()\n\n\n\n\nNot closing files is VERY BAD.\nNot closing files is VERY BAD.\n\n\n\nAnd.\n\n\nwrite_file = open(\ntext.txt\n, \nw\n)\nwrite_file.write(\nNot closing files is VERY BAD.\n) # could be a variable\nwrite_file.close()\n\n\n\n\nread_file = open(\ntext.txt\n, \nr\n)\nprint read_file.read()\nread_file.close()\n\n\n\n\nNot closing files is VERY BAD.\n\n\n\nwrite_file = open(\ntext.txt\n, \nw\n)\nwrite_file.truncate() # delete\nwrite_file.close()\n\n\n\n\nread_file = open(\ntext.txt\n, \nr\n)\nprint read_file.read()\nread_file.close()\n\n\n\n\nYou may not know this, but file objects contain a special pair of built-in methods: \n__enter__()\n and \n__exit__()\n. The details aren\nt important, but what is important is that when a file object\ns \n__exit__()\n method is invoked, it automatically closes the file. How do we invoke this method? With with and as.\n\n\nwith open(\ntext.txt\n, \nw\n) as textfile: # a variable\n    textfile.write(\nSuccess!\n)\n    textfile.close()\n\n\n\n\nwith open(\ntext.txt\n, \nr\n) as textfile:\n    print textfile.read()\n    textfile.close()\n\n\n\n\nSuccess!\n\n\n\nMore I/O\n\n\nwith open(\ntext.txt\n, \nw\n) as my_file:\n    my_file.write(\nYoupee!!!\n)\n\nprint my_file.closed # true\n\nif not my_file.closed == True:\n    my_file.close()\n\nprint my_file.closed # true\n\nwith open(\ntext.txt\n, \nr\n) as my_file:\n    print my_file.read()\n\nprint my_file.closed # true\n\nwith open(\ntext.txt\n, \nr\n) as my_file:\n    print my_file.closed # false\n\nmy_file.close()\n\nprint my_file.closed # true\n\n\n\n\nTrue\nTrue\nYoupee!!!\nTrue\nFalse\nTrue\n\n\n\nQuiz 12\n\n\nOK\n\n\nProject DNA Analysis\n\n\nIn this project, we\nll use many of the concepts you\nve learned throughout the Python course in order to do some DNA analysis for a crime investigation.\n\n\nThe scenario:\n\n\nA spy deleted important files from a computer. There were a few witnesses at the scene of the crime, but no one is sure who exactly the spy was. Three possible suspects were apprehended based on surveillance video. Each suspect had a sample of DNA taken from them. The computer\ns keyboard was also swabbed for DNA evidence and, luckily, one small DNA sample was successfully retrieved from the computer\ns keyboard.\n\n\nGiven the three suspects\n DNA and the sample DNA retreived from the keyboard, it\ns up to you to figure out who the spy is!\n\n\nThe project should have methods for each of the following:\n\n\n\n\nGiven a file, read in the DNA for each suspect and save it as a string\n\n\nTake a DNA string and split it into a list of codons\n\n\nIterate through a suspect\ns codon list to see how many of their codons match the sample codons\n\n\nPick the right suspect to continue the investigation on\n\n\n\n\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n\n    dna_data = \n # empty string\n\n    with open(dna_file, \nr\n) as f: # f = open(dna_file, \nr\n); with, as\n        for line in f:\n            dna_data += line\n        return dna_data\n\ndef dna_codons(dna):\n\n    codons = []\n    for i in range(0,len(dna),3): # slice strings of 3 letters\n        if i+3 \n len(dna): # make sure that you don't add a string to the codon list that isn't at least 3 letters long\n            codons.append(dna[i:i+3]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3\n    return codons\n\ndef match_dna(dna):\n\n    matches = 0\n    for codon in dna:\n        if codon in sample: # if ,in\n            matches += 1\n    return matches\n\ndef is_criminal(dna_sample):\n\n    dna_data = read_dna(dna_sample)\n    codons = dna_codons(dna_data)\n    num_matches = match_dna(codons)\n    if num_matches \n= 3:\n        print((dna_sample)[:-4]).upper(),\n        print(\n: number of matches = \n + str(num_matches) + \n; the investigation will proceed further more with this suspect.\n)\n    else:\n        print((dna_sample)[:-4]).upper(),\n        print(\n: no evidence; the suspect can be freed.\n)\n\na = \nsuspect1.txt\n\nis_criminal(a)\n\na = \nsuspect2.txt\n\nis_criminal(a)\n\na = \nsuspect3.txt\n\nis_criminal(a)\n\n\n\n\nSUSPECT1 : no evidence; the suspect can be freed.\nSUSPECT2 : number of matches = 6; the investigation will proceed further more with this suspect.\nSUSPECT3 : no evidence; the suspect can be freed.\n\n\n\nsuspect1.txt\n\n\nATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT\n\n\n\n\nsuspect2.txt\n\n\nCCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG\n\n\n\n\nsuspect3.txt\n\n\nTCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA", 
            "title": "Codecademy Python"
        }, 
        {
            "location": "/Codecademy Python/#python-syntax", 
            "text": "Python is an easy to learn programming language. You can use it to create web apps, games, even a search engine!  print  Welcome to Python! \nprint( Welcome )\nprint 5 + 3\nprint(5 + 5)\nprint  What   + str(3)\nprint  What ,5  Welcome to Python!\nWelcome\n8\n10\nWhat 3\nWhat 5  a = 30\nprint  What   + str(a)\n\nb =  A list \\t*A  \\\\ \\  \\'  \nprint b\n\nc = 10 + 20\nprint c  What 30\nA list  *A  \\ \" ' \n30  print  1 : %r  % (a) # read#\nprint  2 : %s  % (a) # string#\nprint  ? : %d  % (a) # digit\nprint  3 : %r  % (b)\nprint  4 : %s  % (b)\n# print  ? : %d  % (b) !!!  1 : 30\n2 : 30\n? : 30\n3 : 'A list \\t*A  \\\\ \" \\' '\n4 : A list  *A  \\ \" '  Creating web apps, games, and search engines all involve storing and working with different types of data. They do so using variables. A variable stores a piece of data, and gives it a specific name.  my_variable = 10  You just stored a number in a variable. Numbers are one data type we use in programming. A second data type is called a boolean. A boolean is like a light switch. It can only have two values. Just like a light switch can only be on or off, a boolean can only be  True  or  False .  my_int = 7\nmy_float = 1.23\nmy_bool = True  Say  my_int = 7 . You can change the value of a variable by  reassigning  it.  my_int = 7\n\nmy_int = 3\n\nprint my_int  3  In Python, whitespace is used to structure code. Whitespace is important, so you have to be careful with how you use it.  def spam():\n    eggs = 12\n    return eggs\n\nprint spam()  12  You ll get this error whenever your whitespace is off.  The interpreter runs your code line by line, and checks for any errors.  You probably saw us use the # sign a few times in earlier exercises. The # sign is for comments. A comment is a line of text that Python won t try to run as code. It s just for humans to read.  Comments make your program easier to understand. When you look back at your code or others want to collaborate with you, they can read your comments and easily figure out what your code does.  The  #  sign will only comment out a single line. While you could write a multi-line comment, starting each line with  # , that can be a pain.  Instead, for multi-line comments, you can include the whole block in a set of triple quotation marks:  \nSipping from your cup 'til it runneth over,\nHoly Grail.   \"\\nSipping from your cup 'til it runneth over,\\nHoly Grail.\\n\"  Great! Now let s do some math. You can add, subtract, multiply, divide numbers.  addition = 72 + 23\nsubtraction = 108 - 204\nmultiplication = 108 * 0.5\ndivision = 108 / 9\n\ncount_to = 72 + 56\n\nprint count_to  128  All that math can be done on a calculator, so why use Python? Because you can combine math with other data types (e.g. booleans) and commands to create useful programs. Calculators just stick to numbers.  Create a new variable called eight and set it to 8, or the result of 2 to the power to 3 ( 2 ^ 3  oe  2 ** 3 ).  eggs = 10 ** 2\n\nprint eggs  100  Our final operator is modulo. Modulo returns the remainder from a division. So, if you type  3 % 2 , it will return 1, because 2 goes into 3 evenly once, with 1 left over.  spam = 5 % 4\n\nprint spam  1", 
            "title": "Python Syntax"
        }, 
        {
            "location": "/Codecademy Python/#tip-calculator", 
            "text": "Now let s apply the concepts from the previous section to a real world example. You ve finished eating at a restaurant, and received this bill:   Cost of meal: $44.50  Restaurant tax: 6.75%  Tip: 15%   meal = 44.50\ntax = 6.75/100 \ntip = 0.15\n\nmeal = meal + meal * tax\ntotal = meal + meal * tip\n\nprint( %.2f ) % total  54.63", 
            "title": "Tip Calculator"
        }, 
        {
            "location": "/Codecademy Python/#quiz-1", 
            "text": "OK", 
            "title": "Quiz 1"
        }, 
        {
            "location": "/Codecademy Python/#unit-2-strings-and-console-output", 
            "text": "", 
            "title": "UNIT 2, Strings and Console Output"
        }, 
        {
            "location": "/Codecademy Python/#strings-console-output", 
            "text": "Another useful data type is the string. A string can contain letters, numbers, and symbols.  name =  Ryan \nage =  19 \nfood =  cheese   Let s get a little practice in with strings.  caesar =  Graham \npraline =  John \nviking =  Teresa \n\nprint caesar\nprint praline\nprint viking  Graham\nJohn\nTeresa  'There's a snake in my boot!'    File \" ipython-input-16-13621f01b99c \", line 1\n    'There's a snake in my boot!'\n           ^\nSyntaxError: invalid syntax  This code breaks because Python thinks the apostrophe in  There s  ends the string. We can use the backslash to fix the problem, like this:  'There\\'s a snake in my boot!'\n'This isn\\'t flying, this is falling with style!'  \"This isn't flying, this is falling with style!\"  Each character in a string is assigned a number. This number is called the index. Check out the diagram in the editor.  c =  cats [0]\nn =  Ryan [3] \nThe string  PYTHON  has six characters,\nnumbered 0 to 5, as shown below:\n\n+---+---+---+---+---+---+\n| P | Y | T | H | O | N |\n+---+---+---+---+---+---+\n  0   1   2   3   4   5\n\nSo if you wanted  Y , you could just type PYTHON [1] (always start counting from 0!) \nfifth_letter =  MONTY [4]\n\nprint fifth_letter  Y  Now that we know how to store strings, let s see how we can change them using string methods. String methods let you perform specific tasks for strings. We ll focus on four string methods:   len()  lower()  upper()  str()   length, string  parrot =  Norwegian Blue \n\nprint len(parrot) # length, number of characters, including blanks\nprint parrot.lower() # to lowercases\nprint parrot.upper() # to uppercases\n\npi = 3.14\n\nprint str(pi) # number of character in the string  14\nnorwegian blue\nNORWEGIAN BLUE\n3.14  len(string)  and  str(object) , but dot notation (such as  String .upper()) for the rest.  Methods that use dot notation only work with strings.  On the other hand,  len()  and  str()  can work on other data types.  The area where we ve been writing our code is called the editor. The console is where the results of your code is shown.  print  simply displays your code in the console.  print  Monty Python \n\nthe_machine_goes =  Ping! \nprint the_machine_goes  Monty Python\nPing!  Now let s combine the two! The  +  operator between strings will  add  them together, one after the other. Notice that there are spaces inside the quotation marks after Life and of so that we can make the combined string look like 3 words. Combining strings together like this is called concatenation. Let s try concatenating a few strings together now!  print  Life   +  of   +  Brian \nprint  Spam and eggs   Life of Brian\nSpam and eggs  Sometimes you need to combine a string with something that isn t a string. In order to do that, you have to convert the non-string into a string. he  str()  method converts non-strings into strings. In the above example, you convert the number 2 into a string and then you concatenate the strings together.  print  The value of pi is around   + str(3.14)  The value of pi is around 3.14  When you want to print a variable with a string, the  %  operator after a string is used to combine a string with variables. The  %  operator will replace a  %s  in the string with the string variable that comes after it.  string_1 =  Camelot \nstring_2 =  place \n\nprint  Let's not go to %s. 'Tis a silly %s.  % (string_1, string_2)\n\nname = raw_input( What is your name? )\nquest = raw_input( What is your quest? )\ncolor = raw_input( What is your favorite color? )\n\nprint  Ah, so your name is %s, your quest is %s,   \\\n     and your favorite color is %s.  % (name, quest, color)  Let's not go to Camelot. 'Tis a silly place.\nWhat is your name?Al\nWhat is your quest?Graal\nWhat is your favorite color?red\nAh, so your name is Al, your quest is Graal, and your favorite color is red.", 
            "title": "Strings &amp; Console Output"
        }, 
        {
            "location": "/Codecademy Python/#date-and-time", 
            "text": "A lot of times you want to keep track of when something happened. We can do so in Python using  datetime . Here we ll use datetime to print the date and time in a nice format.  from datetime import datetime # all functions from datetime are imported\n\nnow = datetime.now()\n\nprint now\nprint now.year\nprint now.month\nprint now.day\n\nprint '%s/%s/%s' % (now.month, now.day, now.year)\nprint '%s:%s:%s' % (now.hour, now.minute, now.second)\n\nprint '%s/%s/%s %s:%s:%s' % (now.month, now.day, now.year, now.hour, now.minute, now.second)  2016-10-18 14:02:03.661000\n2016\n10\n18\n10/18/2016\n14:2:3\n10/18/2016 14:2:3", 
            "title": "Date and Time"
        }, 
        {
            "location": "/Codecademy Python/#quiz-2", 
            "text": "time = datetime.now()\nprint time.day\n\ntime = datetime.now() #13:08:09\nprint str(time.hour) +  :  + str(time.minute) +  :  + str(time.second)\n\nnow = datetime.now() #2013-01-04 19:22:43\n\nprint '%s/%s/%s %s:%s:%s' % (now.day, now.month, now.year, now.hour, now.minute, now.second)\n\nday = 04  18\n14:2:11\n18/10/2016 14:2:11", 
            "title": "Quiz 2"
        }, 
        {
            "location": "/Codecademy Python/#project-python-mad-libs", 
            "text": "concatenate, variable  Python can be used for a variety of different tasks. In this project, we ll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story.  Mad Libs require:   Words from the reader (for the blank spaces)  A story to plug the words into   For this project, we ll provide you with the story (feel free to modify it), but it will be up to you to build a program that does the following:   Prompt the user for input  Print the entire Mad Libs story with the user s input in the right places      \nPython can be used for a variety of different tasks. In this project, we'll use Python to write a Mad Libs story! Mad Libs are stories with blank spaces that a reader can fill in with their own words. The result is usually a funny (or strange) story. \n\nprint  The program is running. \n\nname = raw_input( Input a name?  )\n\nadj_one = raw_input( Input an adjective?  )\nadj_two = raw_input( Input another adjective?  )\nadj_three = raw_input( Input a last adjective?  )\n\nverb_one = raw_input( Input a verb?  )\nverb_two = raw_input( Input another verb?  )\nverb_three = raw_input( Input a last verb?  )\n\nnoun_one = raw_input( Input a noun?  )\nnoun_two = raw_input( Input another noun?  )\nnoun_three = raw_input( Input another noun?  )\nnoun_four = raw_input( Input a last noun?  )\n\nanimal = raw_input( Input an animal?  )\nfood = raw_input( Input a food?  )\nfruit = raw_input( Input a fruit?  )\nnumber = raw_input( Input a number?  )\nsuperhero = raw_input( Input a superhero?  )\ncountry = raw_input( Input a country?  )\ndessert = raw_input( Input a dessert?  )\nyear = raw_input( Input a year?  )\nprint    The program is running.\nInput a name? Al\nInput an adjective? small\nInput another adjective? great\nInput a last adjective? yellow\nInput a verb? dig\nInput another verb? walk\nInput a last verb? eat\nInput a noun? spoon\nInput another noun? lamp\nInput another noun? table\nInput a last noun? pen\nInput an animal? dog\nInput a food? pasta\nInput a fruit? apple\nInput a number? 10\nInput a superhero? spiderman\nInput a country? mexico\nInput a dessert? apple pie\nInput a year? 2016  The template for the story.  STORY =  This morning I woke up and felt %s because %s was going to finally %s over the big %s %s. On the other side of the %s were many %ss protesting to keep %s in stores. The crowd began to %s to the rythym of the %s, which made all of the %ss very %s. %s tried to %s into the sewers and found %s rats. Needing help, %s quickly called %s. %s appeared and saved %s by flying to %s and dropping %s into a puddle of %s. %s then fell asleep and woke up in the year %s, in a world where %ss ruled the world. \n\nprint STORY % (adj_one, name, verb_one, adj_two, noun_one, noun_two, animal, food, verb_two, noun_three, fruit, adj_three, name, verb_three, number, name, superhero, superhero, name, country, name, dessert, name, year, noun_four)  This morning I woke up and felt small because Al was going to finally dig over the big great spoon. On the other side of the lamp were many dogs protesting to keep pasta in stores. The crowd began to walk to the rythym of the table, which made all of the apples very yellow. Al tried to eat into the sewers and found 10 rats. Needing help, Al quickly called spiderman. spiderman appeared and saved Al by flying to mexico and dropping Al into a puddle of apple pie. Al then fell asleep and woke up in the year 2016, in a world where pens ruled the world.", 
            "title": "Project Python Mad Libs"
        }, 
        {
            "location": "/Codecademy Python/#unit-3-conditionals-and-control-flow", 
            "text": "", 
            "title": "UNIT 3, Conditionals and Control Flow"
        }, 
        {
            "location": "/Codecademy Python/#conditionals-control-flow", 
            "text": "Control flow gives us this ability to choose among outcomes based off what else is happening in the program.  def clinic():\n\n    print  You've just entered the clinic! \n    print  Do you take the door on the left or the right? \n    answer = raw_input( Type left or right and hit 'Enter'. ).lower()\n    if answer ==  left  or answer ==  l :\n        print  This is the Verbal Abuse Room, you heap of parrot droppings! \n    elif answer ==  right  or answer ==  r :\n        print  Of course this is the Argument Room, I've told you that already! \n    else:\n        print  You didn't pick left or right! Try again. \n        clinic() # launch the function back\n\nclinic()  You've just entered the clinic!\nDo you take the door on the left or the right?\nType left or right and hit 'Enter'.left\nThis is the Verbal Abuse Room, you heap of parrot droppings!  Comparators. There are six:   Equal to:  ==  Not equal to:  !=  Less than:   Less than or equal to:  =  Greater than:   Greater than or equal to:  =   Note that  ==  compares whether two things are equal, and  =  assigns a value to a variable.  bool_one = 1 + 2\nbool_two = 3\nbool_one == bool_two # true  True  Boolean operators compare statements and result in boolean values. There are three boolean operators:   and , which checks if both the statements are True;  or , which checks if at least one of the statements is True;  not , which gives the opposite of the statement.   bool_one = 1   2 and 2   3 # false\nbool_two = False and True # false\nbool_one = True or False # true\nbool_two = 2 == 2 or 2 == 3 # true\nbool_one = not 40 != 41 # true  if  is a conditional statement.  answer =  Left \n\nif answer ==  Left :\n    print  This is the Verbal Abuse Room, you heap of parrot droppings! \n\ndef using_control_once():\n\n    if  A == A :\n        return  Success #1 \n\ndef using_control_again():\n\n    if 1!=2:\n        return  Success #2 \n\nprint using_control_once()\nprint using_control_again()  This is the Verbal Abuse Room, you heap of parrot droppings!\nSuccess #1\nSuccess #2  The  else  statement complements the  if  statement.  answer =  'This but a scratch! \n\ndef black_knight():\n\n    if answer ==  'Tis but a scratch! :\n        return True\n    else:             \n        return False  # Make sure this returns False\n\ndef french_soldier():\n\n    if answer ==  Go away, or I shall taunt you a second time! :\n        return True\n    else:             \n        return False  # Make sure this returns False\n\nprint black_knight()\nprint french_soldier()  False\nFalse  elif  is short for  else if . It means exactly what it sounds like:  otherwise, if the following expression is true, do this!  def greater_less_equal_5(answer):\n\n    if answer   5:\n        return 1\n    elif answer   5:          \n        return -1\n    else:\n        return 0\n\nprint greater_less_equal_5(4)\nprint greater_less_equal_5(5)\nprint greater_less_equal_5(6)\n\n\ndef the_flying_circus():\n\n    if 1 != 0 and 3   2:\n        return True\n    elif 0 == 0 or 2 == 2:\n        return False\n    else:\n        return True\n\nprint the_flying_circus()  -1\n0\n1\nTrue", 
            "title": "Conditionals &amp; Control Flow"
        }, 
        {
            "location": "/Codecademy Python/#pyglatin", 
            "text": "Now let s take what we ve learned so far and write a Pig Latin translator. Pig Latin is a language game, where you move the first letter of the word to the end and add  ay.  So  Python  becomes  ythonpay.    print 'Welcome to the Pig Latin Translator!'\n\noriginal = raw_input( Enter a word: )\nif len(original)   0 and original.isalpha():\n    print original\nelse:\n    print  empty \n\n\npyg = 'ay'\n\noriginal = raw_input('Enter a word: ')\n\nif len(original)   0 and original.isalpha():\n    word = original.lower()\n    first = word[0]\n    new_word = word + first + pyg\n    new_word = new_word[1:len(new_word)]\n    print new_word\nelse:\n    print 'empty'  Welcome to the Pig Latin Translator!\nEnter a word:translator\ntranslator\nEnter a word: radiator\nadiatorray", 
            "title": "PygLatin"
        }, 
        {
            "location": "/Codecademy Python/#quiz-3", 
            "text": "Takeaway: there no limits to the number of  elif .", 
            "title": "Quiz 3"
        }, 
        {
            "location": "/Codecademy Python/#project-area-calculator", 
            "text": "Python is especially useful for doing math and can be used to automate many calculations. In this project, you ll create a calculator than can compute the area of a given shape, as selected by the user. The calculator will be able to determine the area of the following shapes:   Circle  Triangle   The program should do the following:   Prompt the user to select a shape  Depending on the shape the user selects, calculate the area of that shape  Print the area of that shape to the user   Python is especially useful for doing math and can be used to automate many calculations.  from math import pi\nfrom time import sleep\nfrom datetime import datetime\n\nnow = datetime.now() # from datetime\nprint  The calculator is starting up at: \\n +str(now)\n\nprint  \\nCurently: %s/%s/%s %s:%s  %(now.month, now.day, now.year, now.hour, now.minute)\n\nsleep(1) # pause 1 sec\n\nhint =  Don't forget to include the correct units! \n\n\nfrom math import pi\nfrom time import sleep\n\ndef question():\n\n        option = raw_input( Enter C for Circle or T for Triangle:  )\n        if option.upper() == 'C' or option.upper() == 'CIRCLE':\n            print circle()\n        elif option.upper() == 'T' or option.upper() == 'TRIANGLE':\n            print triangle()\n        else:\n            print  Please answer with a C or T , question() #!!!!!!\n\ndef circle():\n\n    radius = float(raw_input( Enter radius:  ))\n\n    areac = pi * (radius ** 2)\n    print  The pie is baking... \n    sleep(1)\n    return(str( %.2f  % areac)) # !!!!!\n\ndef triangle():\n\n    base = float(raw_input( Enter base:  ))\n    height = float(raw_input( Enter height:  ))\n    areat = base * height / 2\n    print  Uni Bi Tri... \n    sleep(1)\n    return(str( %.2f  % areat)) # !!!!!\n\nquestion()  The calculator is starting up at: \n2016-10-18 14:05:19.204000\n\nCurently: 10/18/2016 14:5\nEnter C for Circle or T for Triangle: T\nEnter base: 10\nEnter height: 5\nUni Bi Tri...\n25.00", 
            "title": "Project Area Calculator"
        }, 
        {
            "location": "/Codecademy Python/#unit-4-functions", 
            "text": "", 
            "title": "UNIT 4, Functions"
        }, 
        {
            "location": "/Codecademy Python/#functions", 
            "text": "You might have considered the situation where you would like to reuse a piece of code, just with a few different values. Instead of rewriting the whole code, it s much cleaner to define a function, which can then be used repeatedly.  def tax(billa):\n\n    billb = float(billa) * 1.08\n    return billb\n\ndef tip(billc):\n\n    billd = float(billc) * 1.15\n    return billd\n\nmeal_cost = 100.00\nmeal_with_tax = tax(meal_cost)\nprint( With tax: %.2f  % meal_with_tax) # !!!!!\nmeal_with_tip = tip(meal_with_tax)\nprint( With tip: %.2f  % meal_with_tip)\n\n# The header, the comment, the body:\ndef spam():\n\n     print the string  Eggs!  to the console. \n    print  Eggs!   With tax: 108.00\nWith tip: 124.20  After defining a function, it must be called to be implemented.  def square(n):\n\n     Returns the square of a number. \n    squared = n ** 2\n    return( %d squared is %d.  % (n, squared))\n\nprint square(10)  10 squared is 100.  Functions can be much more powerful than that. For example, a function can call another function.  n = 1\n\ndef one_good_turn(n):\n\n    return n + 1\n\ndef deserves_another(m):\n\n    return one_good_turn(m) + 2 # calling a function already defined  Again.  def cube(number):\n\n    return number ** 3\n\ndef by_three(number):\n\n    if number % 3 == 0:    \n        return cube(number)\n    else:\n        return False\n\nby_three(3)  27  Import modules to use custom functions.  import math\n\nprint math.sqrt(25)  5.0  However, we only really needed the sqrt function, and it can be frustrating to have to keep typing  math.sqrt() . It s possible to import only certain variables or functions from a given module (like  pi  above). Pulling in just a single function from a module is called a function import, and it s done with the from keyword.  from math import sqrt # module 'math', function 'sqrt'\nfrom math import pi # module 'math', variable 'pi'  Universal  import  can handle all of the variables and functions in a module to avoid to constantly type  math .  from math import *  Universal  import  may look great on the surface, but they re not a good idea for one very important reason: they fill your program with a ton of variable and function names without the safety of those names still being associated with the module(s) they came from.  dir(), dir  import math\n\neverything = dir(math)\nprint everything  ['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']  For these reasons, it s best to stick with either  import module  and type  module.name  or just import specific variables and functions from various modules as needed.  Let s look at some of the functions that are built in to Python (no modules required!).  def distance_from_zero(arg):\n\n    return abs(arg)\n\ndef biggest_number(arg1, arg2):\n\n    return min(arg1, arg2)\n\ndef smallest_number(*args):\n\n    return min(args)\n\nprint distance_from_zero(-10)  print biggest_number(-10, -5)  -10  print biggest_number(-10, -5, 5, 10) # test  ---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last) ipython-input-24-40abbc687778  in  module ()\n----  1 print biggest_number(-10, -5, 5, 10) # test\n\n\nTypeError: biggest_number() takes exactly 2 arguments (4 given)  print smallest_number(1, 2)\nprint smallest_number(3, 4, 5, 6, 7)\nprint smallest_number(-10, -5, 5, 10)  1\n3\n-10  maximum = max(-5, 3, 5, 10)\nprint maximum\n\nminimum = min(-3, -5)\nprint minimum\n\nabsolute = abs(-42)\nprint absolute\n\nprint type(42) #  type 'int' \nprint type(4.2) #  type 'float' \nprint type('spam') #  type 'str'   10\n-5\n42 type 'int'  type 'float'  type 'str'", 
            "title": "Functions"
        }, 
        {
            "location": "/Codecademy Python/#taking-a-vacation", 
            "text": "def hotel_cost(nights):\n\n    return 140 * nights\n\ndef plane_ride_cost(city):\n\n    if city ==  Charlotte :\n        return 183\n    elif city ==  Tampa :\n        return 220\n    elif city ==  Pittsburgh :\n        return 222\n    elif city ==  Los Angeles :\n        return 475\n\ndef rental_car_cost(days):\n\n    cost = days * 40\n    if days  = 7:\n        cost -= 50\n    elif days  = 3 and days 7:\n        cost -= 20\n    else:\n        cost\n    return cost\n\ndef trip_cost(city, days, spending_money):\n\n    return rental_car_cost(days) + hotel_cost(days)+plane_ride_cost(city) + spending_money\n\nprint trip_cost( Los Angeles , 5, 600)  1955", 
            "title": "Taking a Vacation"
        }, 
        {
            "location": "/Codecademy Python/#quiz-4", 
            "text": "OK", 
            "title": "Quiz 4"
        }, 
        {
            "location": "/Codecademy Python/#project-number-guess", 
            "text": "Wanna play a game? In this project, we ll build a program that rolls a pair of dice and asks the user to guess a number. Based on the user s guess, the program should determine a winner. If the user s guess is greater than the total value of the dice roll, they win! Otherwise, the computer wins.  The program should do the following:   Randomly roll a pair of dice  Add the values of the roll  Ask the user to guess a number  Compare the user s guess to the total value  Decide a winner (the user or the program)  Inform the user who the winner is   from random import randint\nfrom time import sleep\n\ndef get_user_guess():\n\n    user_guess = int(raw_input( Guess a number:  ))\n    return user_guess\n\ndef roll_dice(number_of_sides):\n\n    first_roll = randint(1, number_of_sides)\n    second_roll = randint(1, number_of_sides)\n    max_value = number_of_sides * 2\n    print  The maximum value is:  +str(max_value)\n    sleep(1)\n    user_guess = get_user_guess()\n    if user_guess   max_value:\n        print  Your guess is higher than the max allowed ( +str(max_value)+ ). Please, take another guess. \n        return # exit the if block is condition met\n    else:\n        print  Rolling... \n        sleep(1)\n        print  First roll is: %d  % (first_roll)\n        sleep(1)\n        print  Second roll is: %d  % (second_roll)\n        total_roll = first_roll + second_roll\n        print  Result... \n        sleep(1)\n        if user_guess   total_roll:\n            print  You win since your guess,  +str(user_guess)+ , is greater than the total roll,  +str(total_roll)\n            return # exit\n        else:\n            print  You lose! \n            return # exit\n\nroll_dice(6)  The maximum value is: 12\nGuess a number: 5\nRolling...\nFirst roll is: 1\nSecond roll is: 2\nResult...\nYou win since your guess, 5, is greater than the total roll, 3", 
            "title": "Project Number Guess"
        }, 
        {
            "location": "/Codecademy Python/#unit-5-lists-dictionaries", 
            "text": "", 
            "title": "UNIT 5, Lists &amp; Dictionaries"
        }, 
        {
            "location": "/Codecademy Python/#lists-and-dictionaries", 
            "text": "Lists are a datatype you can use to store a collection of different pieces of information as a sequence under a single variable name. (Datatypes you ve already learned about include strings, numbers, and booleans.)  zoo_animals = [ pangolin ,  cassowary ,  sloth ,  kangourou ];\n\n# You can access an individual item on the list by its index. An index is like an address that identifies the item's place in the list. The index appears directly after the list name, in between brackets, like this: list_name[index].\n\nif len(zoo_animals)   3:\n    print  The first animal at the zoo is the   + zoo_animals[0]\n    print  The second animal at the zoo is the   + zoo_animals[1]\n    print  The third animal at the zoo is the   + zoo_animals[2]\n    print  The fourth animal at the zoo is the   + zoo_animals[3]  The first animal at the zoo is the pangolin\nThe second animal at the zoo is the cassowary\nThe third animal at the zoo is the sloth\nThe fourth animal at the zoo is the kangourou  numbers = [5, 6, 7, 8]\n\nprint  Adding the numbers at indices 0 and 2... \nprint numbers[0] + numbers[2]\nprint  Adding the numbers at indices 1 and 3... \nprint numbers[1] + numbers[3]  Adding the numbers at indices 0 and 2...\n12\nAdding the numbers at indices 1 and 3...\n14  A list doesn t have to have a fixed length. You can add items to the end of a list any time you like!  suitcase = []\n\nsuitcase.append( sunglasses )\nsuitcase.append( calculator )\nsuitcase.append( screen )\nsuitcase.append( mouse )\n\nlist_length = len(suitcase) # Set this to the length of suitcase\n\nprint list_length\n\nprint  There are %d items in the suitcase.  % (list_length)\nprint suitcase  4\nThere are 4 items in the suitcase.\n['sunglasses', 'calculator', 'screen', 'mouse']  suitcase = [ sunglasses ,  hat ,  passport ,  laptop ,  suit ,  shoes ]\n\nfirst  = suitcase[0:2] # The first and second items (index zero and one)\nmiddle = suitcase[2:4] # Third and fourth items (index two and three)\nlast = suitcase[4:6] # The last two items (index four and five)  You can slice a string exactly like a list! In fact, you can think of strings as lists of characters: each character is a sequential item in the list, starting from index 0.  animals =  catdogfrog \n\ncat  = animals[:3] # The first three characters of animals\ndog  = animals[3:6] # The fourth through sixth characters\nfrog = animals[6:] # From the seventh character to the end  Sometimes you need to search for an item in a list.  animals = [ aardvark ,  badger ,  duck ,  emu ,  fennec fox ]\n\nduck_index = animals.index( duck ) # Use index() to find  duck \n\nprint duck_index\n\nanimals.insert(duck_index, cobra )\n\nprint animals # Observe what prints after the insert  operation  2\n['aardvark', 'badger', 'cobra', 'duck', 'emu', 'fennec fox']  If you want to do something with every item in the list, you can use a for loop.  my_list = [1,9,3,8,5,7]\n\nfor number in my_list:\n    print 2 * number  2\n18\n6\n16\n10\n14  If your list is a jumbled mess, you may need to  sort()  it.  start_list = [5, 3, 1, 2, 4]\nsquare_list = []\n\nfor var in start_list:\n    square_list.append(var ** 2)\n\nsquare_list.sort()\n\nprint square_list  [1, 4, 9, 16, 25]  A dictionary is similar to a list, but you access values by looking up a key instead of an index. A key can be any string or number. Dictionaries are great for things like phone books (pairing a name with a phone number), login pages (pairing an e-mail address with a username), and more!  residents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106}\n\nprint residents['Puffin'] # Prints Puffin's room number\nprint residents['Sloth']\nprint residents['Burmese Python']  104\n105\n106  An empty pair of curly braces  {}  is an empty dictionary, just like an empty pair of  []  is an empty list.  Like Lists, Dictionaries are  mutable . This means they can be changed after they are created. One advantage of this is that we can add new key-value pairs to the dictionary after it is created.  The length  len()  of a dictionary is the number of key-value pairs it has. Each pair counts only once, even if the value is a list.  menu = {} # Empty dictionary\n\nmenu['Chicken Alfredo'] = 14.50 # Adding new key-value pair\n\nprint menu['Chicken Alfredo']\n\nmenu['General Tao'] = 12.00\nmenu['Pad Thai'] = 10.50\nmenu['Poutine'] = 9.00\n\nprint  There are   + str(len(menu)) +   items on the menu. \nprint menu\n\nfor key, value in menu.iteritems(): # !!!!!\n    print key, value\n\nfor key, value in menu.iteritems(): # !!!!!\n    print key\n\nfor key, value in menu.iteritems(): # !!!!!\n    print value  14.5\nThere are 4 items on the menu.\n{'Chicken Alfredo': 14.5, 'General Tao': 12.0, 'Poutine': 9.0, 'Pad Thai': 10.5}\nChicken Alfredo 14.5\nGeneral Tao 12.0\nPoutine 9.0\nPad Thai 10.5\nChicken Alfredo\nGeneral Tao\nPoutine\nPad Thai\n14.5\n12.0\n9.0\n10.5  Because dictionaries are mutable, they can be changed in many ways. Items can be removed from a dictionary with the  del()  command.  # key - animal_name : value - location \n\nzoo_animals = {\n'Unicorn' : 'Cotton Candy House',\n'Sloth' : 'Rainforest Exhibit',\n'Bengal Tiger' : 'Jungle House',\n'Atlantic Puffin' : 'Arctic Exhibit',\n'Rockhopper Penguin' : 'Arctic Exhibit'\n}  A dictionary (or list) declaration may break across multiple lines  Removing the  Unicorn  entry. (Unicorns are incredibly expensive.)  zoo_animals = {\n'Unicorn' : 'Cotton Candy House',\n'Sloth' : 'Rainforest Exhibit',\n'Bengal Tiger' : 'Jungle House',\n'Atlantic Puffin' : 'Arctic Exhibit',\n'Rockhopper Penguin' : 'Arctic Exhibit'\n}\n\ndel zoo_animals['Unicorn']\ndel zoo_animals['Sloth']\ndel zoo_animals['Bengal Tiger']\nzoo_animals['Rockhopper Penguin'] = 'Cotton Candy House'\n\nprint zoo_animals  {'Atlantic Puffin': 'Arctic Exhibit', 'Rockhopper Penguin': 'Cotton Candy House'}  Sometimes you need to remove something from a list.  backpack = ['xylophone', 'dagger', 'tent', 'bread loaf']\n\nbackpack.remove('dagger')  We can create a dictionary that holds many types of values.  extract, sort, remove  inventory = {\n    'gold' : 500,\n    'pouch' : ['flint', 'twine', 'gemstone'], # Assigned a new list to 'pouch' key\n    'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']\n}\n\nprint inventory\n\n# Adding a key 'burlap bag' and assigning a list to it\ninventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']\n\nprint inventory  {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'gold': 500}\n{'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'twine', 'gemstone'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}  # Sorting the list found under the key 'pouch'\ninventory['pouch'].sort() \n\nprint inventory  {'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}  inventory['pocket'] = ['seashell', 'strange berry', 'lint']\n\nprint inventory  {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}  inventory['backpack'].sort()\n\nprint inventory  {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'dagger', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}  inventory['backpack'].remove('dagger')\n\nprint inventory  {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 500}  inventory['gold'] += 50\n\nprint inventory  {'pocket': ['seashell', 'strange berry', 'lint'], 'backpack': ['bedroll', 'bread loaf', 'xylophone'], 'pouch': ['flint', 'gemstone', 'twine'], 'burlap bag': ['apple', 'small ruby', 'three-toed sloth'], 'gold': 550}", 
            "title": "Lists and Dictionaries"
        }, 
        {
            "location": "/Codecademy Python/#a-day-at-the-supermarket", 
            "text": "for  loops allow us to iterate through all of the elements in a list from the left-most (or zeroth element) to the right-most element.  names = [ Adam ,  Alex ,  Mariah ,  Martine ,  Columbus ]\n\nfor items in names:\n    print items  Adam\nAlex\nMariah\nMartine\nColumbus  You can also use a for loop on a dictionary to loop through its keys.  webster = {\n     Aardvark  :  A star of a popular children's cartoon show. ,\n     Baa  :  The sound a goat makes. ,\n     Carpet :  Goes on the floor. ,\n     Dab :  A small amount. \n}\n\nfor item in webster:\n    print webster[item]  A star of a popular children's cartoon show.\nGoes on the floor.\nA small amount.\nThe sound a goat makes.  While looping, you may want to perform different actions depending on the particular item in the list.  a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\nfor item in a:\n    if item % 2 == 0:\n        print item  0\n2\n4\n6\n8\n10\n12  Functions can also take lists as inputs and perform various operations on those lists.  def count_small(numbers):\n\n    total = 0\n    for n in numbers:\n        if n   10:\n            total = total + 1\n    return total\n\nlost = [4, 8, 15, 16, 23, 42]\nsmall = count_small(lost)\n\nprint small  2  You can loop through strings the same way you loop through lists!  for letter in  Codecademy :\n    print letter\n\nword =  Programming is fun! \n\nfor letter in word:\n    # Only print out the letter i\n    if letter ==  i :\n        print letter  C\no\nd\ne\nc\na\nd\ne\nm\ny\ni\ni  You are now the proud owner of your very own Codecademy brand supermarket. For paperwork and accounting purposes, let s record the total value of your inventory.  prices = {\n     banana  : 4,\n     apple  : 2,\n     orange  : 1.5,\n     pear  : 3\n    }\n\nstock = {\n     banana  : 6,\n     apple  : 0,\n     orange  : 32,\n     pear  : 15\n    }\n\ntotal = 0\n\nfor item in prices:\n    print item # print key\n    print  price: %s  % prices[item] # print value\n    print  stock: %s  % stock[item]\n    print prices[item]*stock[item]\n    total += prices[item]*stock[item]\n\nprint total  orange\nprice: 1.5\nstock: 32\n48.0\npear\nprice: 3\nstock: 15\n45\nbanana\nprice: 4\nstock: 6\n24\napple\nprice: 2\nstock: 0\n0\n117.0  In order for customers to order online, we are going to have to make a consumer interface.  shopping_list = [ banana ,  orange ,  apple ]\n\nstock = {\n     banana  : 6,\n     apple  : 0,\n     orange  : 32,\n     pear  : 15\n}\n\nprices = {\n     banana  : 4,\n     apple  : 2,\n     orange  : 1.5,\n     pear  : 3\n}\n\ndef compute_bill(food):\n\n    total = 0\n    for item in food:\n        if stock[item]   0:\n            total += prices[item] # you only pick one from the stock!\n            stock[item] = stock[item] - 1 # the stock goes down by 1\n    print total\n    return food\n\nprint compute_bill(shopping_list)  5.5\n['banana', 'orange', 'apple']", 
            "title": "A Day at the Supermarket"
        }, 
        {
            "location": "/Codecademy Python/#quiz-5", 
            "text": "OK", 
            "title": "Quiz 5"
        }, 
        {
            "location": "/Codecademy Python/#project-rock-paper-scissors", 
            "text": "In this project, we ll build Rock-Paper-Scissors!  The program should do the following:   Prompt the user to select either Rock, Paper, or Scissors  Instruct the computer to randomly select either Rock, Paper, or Scissors  Compare the user s choice and the computer s choice  Determine a winner (the user or the computer)  Inform the user who the winner is   from random import randint\nfrom time import sleep\n\noptions = [ R ,  P ,  S ]\nLOSE =  You lost!  # constant, uppercase\nWIN =  You win! \n\ndef decide_winner(user_choice, computer_choice):\n\n    print( You picked:  +str(user_choice))\n    print  Computer selecting... \n\n    sleep(1)\n\n    print( Computer picks:  +str(computer_choice))\n\n    user_choice_index = options.index(user_choice)\n    computer_choice_index = options.index(computer_choice) # !!!!!\n\n    if user_choice_index == computer_choice_index:\n        print  Tie! \n    elif user_choice_index == 0 and computer_choice_index == 2:\n        print WIN\n    elif user_choice_index == 1 and computer_choice_index == 0:\n        print WIN\n    elif user_choice_index == 2 and computer_choice_index == 1:\n        print WIN\n    elif user_choice_index   2:\n        print  Invalid choice!!! \n    else:\n        print LOSE\n\ndef play_RPS():\n\n    print  Let's pay Rock-Paper-Scissors \n\n    user_choice = raw_input( Select R for Rock, P for Paper, or S for Scissors:  )\n\n    sleep(1)\n\n    user_choice = user_choice.upper()\n    # computer_choice = options[randint(0,2)] \n    # pull out an element from a list, the 1st (0) out of 3 (2)\n\n    computer_choice = options[randint(0,len(options)-1)] \n    # This will ensure that if we ever add more options to the game, we won't have to change this line of code.\n\n    decide_winner(user_choice, computer_choice)\n\nplay_RPS()  Let's pay Rock-Paper-Scissors\nSelect R for Rock, P for Paper, or S for Scissors: r\nYou picked: R\nComputer selecting...\nComputer picks: S\nYou win!", 
            "title": "Project Rock, Paper, Scissors"
        }, 
        {
            "location": "/Codecademy Python/#unit-6-student-becomes-the-teacher", 
            "text": "", 
            "title": "UNIT 6, Student Becomes the Teacher"
        }, 
        {
            "location": "/Codecademy Python/#student-becomes-the-teacher", 
            "text": "Make a gradebook for all of your students.  First, create 3 dictionaries.  Second, add names, marks  lloyd = {\n     name  :  Lloyd ,\n     homework  : [90.0, 97.0, 75.0, 92.0],\n     quizzes  : [88.0, 40.0, 94.0],\n     tests  : [75.0, 90.0]\n}\n\nalice = {\n     name :  Alice ,\n     homework  : [100.0, 92.0, 98.0, 100.0],\n     quizzes  : [82.0, 83.0, 91.0],\n     tests  : [89.0, 97.0]\n}\n\ntyler = {\n     name  :  Tyler ,\n     homework  : [0.0, 87.0, 75.0, 22.0],\n     quizzes  : [0.0, 75.0, 78.0],\n     tests  : [100.0, 100.0]\n}  Third, make a list.  students= [lloyd, alice, tyler]\n\ncases = [ homework ,  quizzes ,  tests ]\n\nw_calc = [0.10, 0.30, 0.60]\n\nall_average = 0.0  Four, print out.  print  \\nStudents' Grades .upper()\n\nprint  \n\nfor student in students:\n    print student[ name ].upper()\n    print  Homework \n    print student[ homework ]\n    print  Quizzes \n    print student[ quizzes ]\n    print  Tests \n    print student[ tests ]\n    print    STUDENTS' GRADES\n\nLLOYD\nHomework\n[90.0, 97.0, 75.0, 92.0]\nQuizzes\n[88.0, 40.0, 94.0]\nTests\n[75.0, 90.0]\n\nALICE\nHomework\n[100.0, 92.0, 98.0, 100.0]\nQuizzes\n[82.0, 83.0, 91.0]\nTests\n[89.0, 97.0]\n\nTYLER\nHomework\n[0.0, 87.0, 75.0, 22.0]\nQuizzes\n[0.0, 75.0, 78.0]\nTests\n[100.0, 100.0]  Compute averages.  def average(numbers):\n\n    total = sum(numbers)\n    temp = float(total) / len(numbers)\n    return temp\n\nprint  Students' Averages .upper()\n\nprint  \n\nfor c in cases:\n    cc = c.upper()\n    print cc\n    for student in students:\n        numbers = student[c]\n        calc = round(average(numbers),1)\n        print student[ name ]\n        print calc\n    print    STUDENTS' AVERAGES\n\nHOMEWORK\nLloyd\n88.5\nAlice\n97.5\nTyler\n46.0\n\nQUIZZES\nLloyd\n74.0\nAlice\n85.3\nTyler\n51.0\n\nTESTS\nLloyd\n82.5\nAlice\n93.0\nTyler\n100.0  Compute weighted averages.  def w_average(marks):\n\n    #w_calc = [0.10, 0.30, 0.60]\n    s_calc = 0\n    w = 0\n    while w   len(w_calc):\n        s_calc += w_calc[w] * marks[w]\n        w += 1\n    return s_calc\n\ndef get_letter_grade(score):\n\n    if score  = 90:\n        return  A \n    elif score  = 80:\n        return  B \n    elif score  = 70:\n        return  C \n    elif score  = 60:\n        return  D \n    else:\n        return  F \n\ndef get_class_average(ind):\n    class_total = round(ind / len(students), 1)\n    return class_total\n\nprint  Students' Weighted Average .upper()\n\nprint   Ponderation [Homeworks, Quizzes, Tests]: [ +str(float(w_calc[0])*100)+ ,  +str(float(w_calc[1])*100)+ ,  +str(float(w_calc[2])*100)+ ] \n\nprint  \n\nfor student in students:\n    print(student[ name ] +  's marks are: ).upper()\n    l_calc = []\n    for c in cases:    \n        numbers = student[c]\n        calc = round(average(numbers),1)\n        l_calc.append(calc)\n    print l_calc\n    print( For a weighted average of: )\n    ind_average = round(w_average(l_calc),1)\n    print ind_average\n    print( Standing for a: )\n    print get_letter_grade(ind_average)\n    all_average += ind_average\n    print  \n\nprint( Finally, The class average is: ).upper()\nprint get_class_average(all_average)  STUDENTS' WEIGHTED AVERAGE\n Ponderation [Homeworks, Quizzes, Tests]: [10.0, 30.0, 60.0]\n\nLLOYD'S MARKS ARE:\n[88.5, 74.0, 82.5]\nFor a weighted average of:\n80.5\nStanding for a:\nB\n\nALICE'S MARKS ARE:\n[97.5, 85.3, 93.0]\nFor a weighted average of:\n91.1\nStanding for a:\nA\n\nTYLER'S MARKS ARE:\n[46.0, 51.0, 100.0]\nFor a weighted average of:\n79.9\nStanding for a:\nC\n\nFINALLY, THE CLASS AVERAGE IS:\n83.8", 
            "title": "Student Becomes the Teacher"
        }, 
        {
            "location": "/Codecademy Python/#unit-7-lists-and-functions", 
            "text": "", 
            "title": "UNIT 7, Lists and Functions"
        }, 
        {
            "location": "/Codecademy Python/#lists-and-functions", 
            "text": "What you can do with a list: extract, add, append, remove, pop out, delete.  n = [1, 3, 5]\nprint n[1]\n\nn[1] = n [1] * 5\nprint n\n\n# Add elements\nn.append(4)\nprint n\n\n# Remove elements\nn.pop(0)\nprint n  3\n[1, 15, 5]\n[1, 15, 5, 4]\n[15, 5, 4]  What you can do with functions.  Multiply, divide.  number = 5\n\ndef my_function(x):\n\n    return x * 3\n\n# Print my_function(5)\nprint my_function(number)  15  Add, substract.  m = 5\nn = 13\n\ndef add_function(x,y):\n\n    return x + y\n\nprint add_function(m, n)  18  Concatenate.  n =  Hello \n\ndef string_function(s):\n\n    return s +   world \n\nprint string_function(n)  Hello world  Show all.  n = [3, 5, 7]\n\ndef list_function(x):\n\n    return x\n\nprint list_function(n)  [3, 5, 7]  Show some.  def list_function(x):\n\n    return x[1]\n\nn = [3, 5, 7]\n\nprint list_function(n)  5  Extract and modify.  def list_function(x):\n\n    x[1] = x[1] + 3\n    return x\n\nn = [3, 5, 7]\n\nprint list_function(n)  [3, 8, 7]  Add elements.  n = [3, 5, 7]\n\ndef list_extender(lst):\n\n    lst.append(9)\n    return lst\n\nprint list_extender(n)  [3, 5, 7, 9]  Remove elements.  n = [3, 5, 7]\n\ndef list_shorter(lst):\n\n    lst.remove(5)\n    return lst\n\nprint list_shorter(n)  [3, 7]  Pop out the 2nd element.  n = [3, 5, 7]\n\ndef list_extract(lst):\n\n    lst.pop(1)\n    return lst\n\nprint list_extract(n)  [3, 7]  Loop through each element.  n = [3, 5, 7]\n\ndef print_list(x):\n\n    for i in range(0, len(x)):\n        print x[i]\n\nprint print_list(n)  3\n5\n7\nNone  Loop, transform each element.  n = [3, 5, 7]\n\ndef double_list(x):\n\n    for i in range(0, len(x)):\n        x[i] = x[i] * 2\n    return x\n\nprint double_list(n)  [6, 10, 14]  Loop, transform each element.  def my_function(x):\n\n    for i in range(0, len(x)):\n        x[i] = x[i] * 2\n    return x\n\nprint my_function(range(3))\n\nprint range(6) # =  [0,1,2,3,4,5]\nprint range(1,6) # =  [1,2,3,4,5]\nprint range(1,6,3) # =  [1,4]  [0, 2, 4]\n[0, 1, 2, 3, 4, 5]\n[1, 2, 3, 4, 5]\n[1, 4]  Loop, fill the variable with  +=  (or  -= ,  *= ,  /= )  n = [3, 5, 7]\n\ndef total(numbers):\n\n    result = 0 # empty variable\n    for item in numbers:\n        result += item\n    return result  Empty variable, loop, fill the variable.  n = [ Michael ,  Lieberman ]\n\ndef join_strings(words):\n\n    result =  \n    for item in words:\n        result = result + item\n    return result\n\nprint join_strings(n)  MichaelLieberman  Join (not add up) the list. You want this to  print [1, 2, 3, 4, 5, 6] .  m = [1, 2, 3]\nn = [4, 5, 6]\n\ndef join_lists(x,y):\n    return x + y\n\nprint join_lists(m, n)  [1, 2, 3, 4, 5, 6]  List of lists. Several loops.  n = [\n    [1, 2, 3],\n    [4, 5, 6, 7, 8, 9]\n]\n\ndef flatten(lists):\n\n    results = []\n    for lst in lists:\n        for num in range(len(lst)):\n            results.append(lst[num])\n    return results\n\nprint flatten(n)  [1, 2, 3, 4, 5, 6, 7, 8, 9]  Use  range(len(lst)) .  range, length  print range(6) # =  [0,1,2,3,4,5]  [0, 1, 2, 3, 4, 5]", 
            "title": "Lists and Functions"
        }, 
        {
            "location": "/Codecademy Python/#battleship", 
            "text": "This first script is incomplete (work in progress). \nThe next script is functional.  from random import randint\n\nboard = []\n\nfor x in range(5):  # 0, 1, 2, 3, 4 (stop before 5)\n    board.append([ O ] * 5) # print 5 rows of 5 'O'\n\ndef print_board(board):\n\n    for row in board:\n        # print row # print ['O', 'O', 'O', 'O', 'O'] on 5 rows\n        print    .join(row) # print O O O O O \n\nprint  Let's play Battleship! \n\ndef random_row(board): # hide the ship at r-c\n\n    return randint(0,len(board) - 1)\n\ndef random_col(board):\n\n    return randint(0,len(board) - 1)\n\nprint random_row(board)\nprint random_col(board)\n\nguess_row = int(raw_input( Guess Row (1 to 5): )) # involve the player\nguess_col = int(raw_input( Guess Col (1 to 5): ))\n\nprint ship_col # print ship position\nprint ship_row\n\nif (guess_row == ship_row) and (guess_col == ship_col):\n    print  Congratulations! You sank my battleship! \n    guess_row=guess_row-1\n    guess_col=guess_col-1\n    board[guess_row][guess_col]= S \n    print print_board(board)\nelse:\n    #print  You missed my battleship! \n    if guess_row not in range(5) or guess_row == 0 or guess_col not in range(5) or guess_col == 0: # condition for wrong entries\n        print  Oops, that's not even in the ocean. \n    elif board[guess_row][guess_col] ==  X :\n        print  You guessed that one already. \n    else:\n        print  You missed my battleship! \n\nguess_row = guess_row - 1 # transform the numbers, 1 becomes 0...\nguess_col = guess_col - 1\n\nboard[guess_row][guess_col] =  X  # replace the 'O'\nprint print_board(board)  Let's play Battleship!\n4\n0\nGuess Row (1 to 5):1\nGuess Col (1 to 5):2\n\n\n\n---------------------------------------------------------------------------\n\nNameError                                 Traceback (most recent call last) ipython-input-87-efd1e0de637a  in  module ()\n     24 guess_col = int(raw_input(\"Guess Col (1 to 5):\"))\n     25 \n---  26 print ship_col # print ship position\n     27 print ship_row\n     28\n\n\nNameError: name 'ship_col' is not defined", 
            "title": "Battleship!"
        }, 
        {
            "location": "/Codecademy Python/#battleship-final", 
            "text": "from random import randint\n\nboard = []\n\nfor x in range(5):\n    board.append([ O ] * 5)\n\ndef print_board(board):\n\n    for row in board:\n        print    .join(row)\n\nprint  \\nLet's play Battleship! You have 4 strikes to sink by ship.\\n \nprint_board(board)\n\ndef random_row(board):\n\n    return randint(0, len(board) - 1)\n\ndef random_col(board):\n\n    return randint(0, len(board) - 1)\n\nship_row = random_row(board)\nship_col = random_col(board)\n#ship_row = 1 to test and fix to (1,1)\n#ship_col = 1\n\nfor turn in range(5):\n    turn += 1\n    if turn == 5:\n        print  \\nGame Over \n        print  The ship was here =  I\\n \n        board[ship_row - 1][ship_col - 1] =  I \n        print_board(board)\n        break\n    else:\n        print  \\nTurn , turn\n\n        guess_row = int(raw_input( Guess Row (1 to 5):  ))\n        guess_col = int(raw_input( Guess Col (1 to 5):  ))\n\n        if (guess_row == ship_row) and (guess_col == ship_col):\n            print  \\nCongratulations! You sank my battleship!\\n \n\n            guess_row = guess_row - 1\n            guess_col = guess_col - 1\n            board[guess_row][guess_col] =  S \n\n            print_board(board)\n            print  \\nGame Over \n            break\n\n        elif (guess_row   1 or guess_row   5) or (guess_col   1 or guess_col   5):\n            print  \\nOops, that's not even in the ocean.\\n \n\n        elif board[guess_row - 1][guess_col - 1] ==  X :\n            print  \\nYou guessed that one already.\\n \n            print_board(board)\n\n        else:\n            print  \\nYou missed my battleship!\\n \n            board[guess_row - 1][guess_col - 1] =  X \n            print_board(board)  Let's play Battleship! You have 4 strikes to sink by ship.\n\nO O O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 1\nGuess Row (1 to 5): 1\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO O O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 2\nGuess Row (1 to 5): 2\nGuess Col (1 to 5): 2\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O O\nO O O O O\nO O O O O\n\nTurn 3\nGuess Row (1 to 5): 3\nGuess Col (1 to 5): 5\n\nYou missed my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O O O O\nO O O O O\n\nTurn 4\nGuess Row (1 to 5): 4\nGuess Col (1 to 5): 3\n\nCongratulations! You sank my battleship!\n\nO X O O O\nO X O O O\nO O O O X\nO O S O O\nO O O O O\n\nGame Over  Joining.  join, split  letters = ['a', 'b', 'c', 'd']\n\nprint    .join(letters) # a b c d\nprint  --- .join(letters) # #---b---c---d  a b c d\na---b---c---d  Randomizing.  random, rand  from random import randint\n\ncoin = randint(0, 1) # randint(low, high)\ndice = randint(1, 6)", 
            "title": "Battleship FINAL!"
        }, 
        {
            "location": "/Codecademy Python/#quiz-7", 
            "text": "Takeaway.  my_list = [1, 3, 5, 7]\n\nmy_list.pop(3) # remove the 4th\nmy_list.remove(3) # remove the '3'\n\nrange(0, len(my_list)) # every list item\nrange(0, len(my_list), 2) # every other list item  [0]", 
            "title": "Quiz 7"
        }, 
        {
            "location": "/Codecademy Python/#unit-8-loops", 
            "text": "", 
            "title": "UNIT 8, Loops"
        }, 
        {
            "location": "/Codecademy Python/#loops", 
            "text": "A  while  loop is a sort of  if .  count = 0\n\nif count  = 9: # \n    print  Hello, I am an if statement and count is , count  Hello, I am an if statement and count is 0  while count  = 9: # similar to if: executes as long as the condition is true\n    print  Hello, I am a while and count is , count\n    count += 1  Hello, I am a while and count is 0\nHello, I am a while and count is 1\nHello, I am a while and count is 2\nHello, I am a while and count is 3\nHello, I am a while and count is 4\nHello, I am a while and count is 5\nHello, I am a while and count is 6\nHello, I am a while and count is 7\nHello, I am a while and count is 8\nHello, I am a while and count is 9  A  while  loop allows control (checkpoint, a switch, on and off).  loop_condition = True\n\nwhile loop_condition: # On\n    print  I am a loop \n    loop_condition = False # Off  I am a loop  num = 1\n\nwhile num  = 10: # the condition\n    print num ** 2\n    num += num ** (1/2)\n    print num  1\n2\n4\n3\n9\n4\n16\n5\n25\n6\n36\n7\n49\n8\n64\n9\n81\n10\n100\n11  A common application of a  while  loop is to check user input to see if it is valid.  choice = raw_input('Enjoying the course? (y/n)')\n\nwhile choice !=  y  and choice !=  n :\n    choice = raw_input( Sorry, I didn't catch that. Enter again (case sensitive):  )  Enjoying the course? (y/n)y  break  means  exit the current loop . Opposite to  break  is  continue .  count = 0\n\nwhile True:\n    print count\n    count += 1\n    if count  = 10:\n        break  0\n1\n2\n3\n4\n5\n6\n7\n8\n9  while / else  are like  if / else ;  else  is executed when  while  is false.  import random\n\nprint  Lucky Numbers! 3 numbers will be generated. \nprint  If one of them is a '5', you lose! \n\ncount = 0\n\nwhile count   3:\n    num = random.randint(1, 6)\n    print num\n    if num == 5:\n        print  Sorry, you lose! \n        break\n    count += 1\nelse:\n    print  You win!   Lucky Numbers! 3 numbers will be generated.\nIf one of them is a '5', you lose!\n5\nSorry, you lose!  Guess game.  from random import randint\n\n# Generates a number from 1 through 10 inclusive\nrandom_number = randint(1, 10)\n\n# print random_number\nguesses_left = 3\nprint  Guess right! \n\nwhile guesses_left   0:\n    print  You have  +str(guesses_left)+  attempts. \n    guess = raw_input( Guess a number from 1 to 10:  )\n    if int(guess) == random_number:\n        print  You win! \n        break\n    elif guesses_left == 1:\n        print  You lose. \n        break\n    else:\n        guesses_left -= 1\n        print  Try again.   Guess right!\nYou have 3 attempts.\nGuess a number from 1 to 10: 2\nTry again.\nYou have 2 attempts.\nGuess a number from 1 to 10: 6\nTry again.\nYou have 1 attempts.\nGuess a number from 1 to 10: 9\nYou lose.  if  loop.  print  Counting... \n\nfor i in range(20):\n    print i  Counting...\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19  Create a list.  hobbies = []\n\nprint hobbies\n\nfor i in range(3):\n    hobby = raw_input( Enter a hobby:  )\n    hobbies.append(hobby)\n\nprint hobbies  []\nEnter a hobby: fishing\nEnter a hobby: skiing\nEnter a hobby: knitting!!!\n['fishing', 'skiing', 'knitting!!!']  Run though a string, but each character will be spaced out.  thing =  spam! \n\nfor c in thing:\n    print c\n\nword =  eggs! \n\nfor char in word:\n    print char, # , print on the same line  s\np\na\nm\n!\ne g g s !  Replace a character in a string.  ,  print on the same line.  phrase =  A bird in the hand... \n\nfor char in phrase:\n    if char ==  A  or char ==  a :\n        print  X ,\n    else:\n        print char,  X   b i r d   i n   t h e   h X n d . . .  Run though a list.  numbers  = [7, 9, 12, 54, 99]\n\nprint  This list contains:  \n\nfor num in numbers:\n    print num\n\nfor numm in numbers:\n    print numm ** 2,  This list contains: \n7\n9\n12\n54\n99\n49 81 144 2916 9801  Run though a dictionary.  d = {'a' : 'apple', 'b' : 'berry', 'c' : 'cherry'}\n\nfor key in d:\n    # key:value\n    print key+   +d[key]\n    print key # key\n    print d[key] # value  a apple\na\napple\nc cherry\nc\ncherry\nb berry\nb\nberry  Enumerate a list (numbers and members).  choices = ['pizza', 'pasta', 'salad', 'nachos']\n\nprint 'Your choices are:'\nfor index, item in enumerate(choices):\n    print index + 1, item  Your choices are:\n1 pizza\n2 pasta\n3 salad\n4 nachos  Multiple lists.  list_a = [3, 9, 17, 15, 19]\nlist_b = [2, 4, 8, 10, 30, 40, 50, 60, 70, 80, 90]\n\nfor a, b in zip(list_a, list_b):\n    if a   b: \n        print a\n    elif a == b:\n        print  - \n    else:\n        print b  3\n9\n17\n15\n30  List with concatenation.  fruits = ['banana', 'apple', 'orange', 'tomata', 'pear', 'grape']\n\nprint 'You have...'\n\nfor f in fruits:\n    if f == 'tomato':\n        print 'A tomato is not a fruit!' # (It actually is.)\n        break\n    print ', a', f,\nelse:\n    print '; A fine selection of fruits!'  You have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!  Remove the  break .  fruits = ['banana', 'apple', 'orange', 'tomata', 'pear', 'grape']\n\nprint 'You have...'\n\nfor f in fruits:\n    if f == 'tomato':\n        print 'A tomato is not a fruit!' # (It actually is.)\n    else:    \n        print ', a', f,\nelse:\n    print '; A fine selection of fruits!'  You have...\n, a banana , a apple , a orange , a tomata , a pear , a grape ; A fine selection of fruits!", 
            "title": "Loops"
        }, 
        {
            "location": "/Codecademy Python/#practice-makes-perfect", 
            "text": "Is it even?  def is_even(x):\n\n    if x % 2 == 0:\n        return True # if x is even\n    else:\n        return False\n\nprint is_even(2)\nprint is_even(3)  True\nFalse  Or not?  n = -1.0\n\nprint(n - round(n,0))\n\ndef is_int(x):\n\n    if (x - round(x,0)) == 0:\n        return True\n    else:\n        return False\n\nprint is_int(7.0)\nprint is_int(7.5)\nprint is_int(-1)  0.0\nTrue\nFalse\nTrue  Summing the digits of a number.  def digit_sum(n):\n\n    liss = []\n    n = str(n) # from integers to characters\n    for char in n:\n        liss.append(char) # populate liss\n        total = 0\n        for i in range(len(liss)):\n            liss[i] = int(liss[i]) # back to integers\n            total += liss[i] # sum them up\n    return total\n\nprint digit_sum(1234)\nprint digit_sum(8888)  10\n32  What is the factorial?  def factorial(x):\n\n    if x == 1 or x == 0:\n        return 1\n    else:\n        result = 1\n        while x   0:\n            # say x = 4\n            # 1 * 4 = 4\n            # 4 * 3 = 12\n            # 12 * 2 = 24\n            # 24 * 1 = 24\n            result *= x\n            x -= 1\n\n    return result \n\nprint factorial(1)\nprint factorial(2)\nprint factorial(3)\nprint factorial(4)\nprint factorial(5)  1\n2\n6\n24\n120  Is it a prime number? (Check the web for the list of prime numbers.)  def is_prime(x):\n\n    if (x   1): # to catch greater than 1\n        for n in range(2,(x - 1)): # range 2 - 1 less than x\n            if x % n == 0:\n                print x\n                return False\n    else: # ro catch 0 and 1\n        print x\n        return False\n    print x # the input\n    return True # the output, will be printed when the function will be called\n\nfor ii in range(24):\n    print is_prime(ii),  0\nFalse 1\nFalse 2\nTrue 3\nTrue 4\nFalse 5\nTrue 6\nFalse 7\nTrue 8\nFalse 9\nFalse 10\nFalse 11\nTrue 12\nFalse 13\nTrue 14\nFalse 15\nFalse 16\nFalse 17\nTrue 18\nFalse 19\nTrue 20\nFalse 21\nFalse 22\nFalse 23\nTrue  Reverse a string.  def reverse(text):\n\n    count = len(text) - 1 # start at the end\n\n    print text\n    print count # 3 letters will be 0,1,2,3 or 3\n\n    reversed_text =   # empty string\n\n    print reversed_text\n\n    while count  = 0:\n        reversed_text += text[count] # adding the right-most letter\n        count -= 1 # decrement count\n    return reversed_text\n\nprint reverse( make )\nprint reverse( codeacademy )  make\n3\n\nekam\ncodeacademy\n10\n\nymedacaedoc  Remove vowels in apunctuation word (could work for punctuation too).  def anti_vowel(text):\n\n    vowels =  aAeEiIoOuU \n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char, )\n    return text\n\nprint anti_vowel( allo )  ll  Remove all but punctuation.  def anti_vowel(text):\n\n    text = text.lower()\n    vowels =  abcdefghijklmnopqrstuvwxyz1234567890$- \n\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char, )\n    for char in text:\n        if char ==    :\n            text = text.replace(char, )\n    return text\n\nprint anti_vowel( The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\ ID\\  associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment. )  .?,,.,.......\"\"...  Scrabble scoring.  score = { a : 1,  c : 3,  b : 3,  e : 1,  d : 2,  g : 2, \n          f : 4,  i : 1,  h : 4,  k : 5,  j : 8,  m : 3, \n          l : 1,  o : 1,  n : 1,  q : 10,  p : 3,  s : 1, \n          r : 1,  u : 1,  t : 1,  w : 4,  v : 4,  y : 4, \n          x : 8,  z : 10}\n\ndef scrabble_score(word):\n\n    word2 = word.lower()\n\n    print word2+ : ,\n    points = 0\n    for letter in word2:\n        if letter == str(letter):\n            points += score[letter]\n    return points\n\nprint scrabble_score( ab )\nprint scrabble_score( allo )\nprint scrabble_score( xylophone )\nprint scrabble_score( coding )\nprint scrabble_score( yak )  ab: 4\nallo: 4\nxylophone: 24\ncoding: 10\nyak: 10  Censor a word in a string.  length  def censor(text,word_to_censor):\n\n    text = text.split(' ')\n    for word in range(0,len(text)):\n        if text[word] == word_to_censor:\n            text[word] =  *  * len(text[word]) * 2\n    return    .join(text) # join the w separated by spaces\n\nprint censor( it is two days ,  two )  it is ****** days  Count items is a list.  def count(sequence, item):\n\n    sequence = list(sequence)\n    count = 0\n\n    for i in sequence:\n        if i == item:\n            count += 1\n    return count\n\nlist2 = [1,3,1,5]\nlist3 = [ a , b , c , a ]\nlist4 = ( a , b , c , a )\nlist5 = (1,2,3,1,1)\n\nprint count(list2,1)\nprint count(list3,1)\nprint count(list4,1)\nprint count(list5,1)  2\n0\n0\n3  Extract even numbers from a list.  def purify(listing):\n\n    listing = list(listing)\n    listing2 = []\n\n    for l in listing:\n        if l % 2 == 0:\n            listing2.append(l)\n    return listing2\n\ncase1 = [1,2,3,4]\n\nprint purify(case1)  [2, 4]  Compute a product.  def product(listing):\n\n    print listing\n    result = 1\n    for l in listing:\n        result = result * l\n    return result\n\ncase1 = [1,2,3]\ncase2 = (5,10,15)\n\nprint product(case1)\nprint product(case2)  [1, 2, 3]\n6\n(5, 10, 15)\n750  Remove duplicates from a list.  def remove_duplicates(listing):\n\n    print listing\n\n    listing = list(listing)\n    listing2 = []\n\n    for l in listing:\n        if l not in listing2:\n            listing2.append(l)\n    return listing2\n\ncase1 = [1,2,3,3,4]\ncase2 = (1,6,1,4,2,8,2,1,6,7,4,6)\n\nprint remove_duplicates(case1)\nprint remove_duplicates(case2)  [1, 2, 3, 3, 4]\n[1, 2, 3, 4]\n(1, 6, 1, 4, 2, 8, 2, 1, 6, 7, 4, 6)\n[1, 6, 4, 2, 8, 7]  Extract the median from an unordered list of numbers.  def median(listing):\n\n    median_no = 0\n    median_low = 0\n    median_high = 0\n    low = 0\n    high = 0\n\n    print listing\n\n    listing = sorted(listing)\n\n    if len(listing) % 2 == 0:\n        low = len(listing)/2 - 1 # 6/2 = 3 -1 = 2 or the 3rd\n        high = len(listing)/2 # 6/2 = 3 or the 4th\n        median_low = float(listing[low]) # extract the 3rd of 6\n        median_high = float(listing[high]) # the 4th of 6\n        median_no = (median_low + median_high)/2\n    else:\n        median_no = listing[(len(listing))/2] # on 5, the / will yield 2.5, but coerced to the integer 2 or the 3rd\n    return median_no\n\ncase1 = (7,12,3,1,6)\ncase2 = (7,12,3,1,6,17)\n\nprint median(case1)\nprint median(case2)  (7, 12, 3, 1, 6)\n6\n(7, 12, 3, 1, 6, 17)\n6.5", 
            "title": "Practice Makes Perfect"
        }, 
        {
            "location": "/Codecademy Python/#quiz-8", 
            "text": "Takeaway: built-in functions.  x = [1, 2, 3]\ny = [4, 5, 6]\n\nzipped = zip(x, y)\n# zipped = [(1, 4), (2, 5), (3, 6)]\n\nx2, y2 = zip(*zipped)\n\nx == list(x2) and y == list(y2)\n# True  True  seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n\nlist(enumerate(seasons))\n# [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n\nlist(enumerate(seasons, start=1))\n# [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]  [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]", 
            "title": "Quiz 8"
        }, 
        {
            "location": "/Codecademy Python/#project-command-line-calendar", 
            "text": "In this project, we ll build a basic calendar that the user will be able to interact with from the command line. The user should be able to choose to:   View the calendar  Add an event to the calendar  Update an existing event  Delete an existing event   from time import sleep, strftime\n\nhis_name = raw_input( What is your first name?  )\nhis_name = str(his_name)\n# calendar will store the dates as keys and the events as values\n\ncalendar = {}\n\ndef welcome():\n\n    print( Welcome   + his_name + . )\n\n    print( Calendar starting... )\n    sleep(0.5)\n    print( Today is:   + strftime( %A, %B %d, %Y ))\n    print( It is currently:   + strftime( %H:%M:%S ))\n    sleep(0.5)\n\ndef start_calendar():\n\n    welcome()\n    print( What would you like to do? )\n    print(calendar)\n    start = True\n\n    while start:\n        user_choice = raw_input( Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit?  ).upper()\n\n        if user_choice == 'V': # V\n            if len(calendar.keys())   1:\n                print( The calendar is empty )\n            else:\n                print(calendar)\n\n        elif user_choice == 'U': # U\n            if len(calendar.keys())   1:\n                print( The calendar is empty )\n            else:\n                print(calendar)\n                date = raw_input( What date?  )\n                update = raw_input( Enter the update:  )\n                # could be more control here...\n                calendar[date] = update # without checking if the date is valid or if it already exists (which could override things)!\n                print( Successful! )\n                print(calendar)\n\n        elif user_choice == 'A': # A\n            event = raw_input( Enter event:  )\n            date = raw_input( Enter date (MM/DD/YYYY):  )\n            if (len(date)   10 or int(date[6:])   int(strftime( %Y ))): # could be more control...\n                print( Invalid date format. )\n                try_again = raw_input( Try Again? 'Y' for Yes, 'N' for No:  ).upper()\n                if try_again == 'Y':\n                    continue #! break, continue, start is still True\n                else:\n                    start == False\n            else:\n                calendar[date] = event # without checking if the date is valid or if it already exists (which could override things)!\n                print( Successful! )\n                print(calendar)\n\n        elif user_choice == 'D': # D\n            if len(calendar.keys())   1:\n                print( The calendar is empty. )\n            else:\n                print(calendar)\n                event = raw_input( What event?  ) # could be more option like: What date?\n                for date in calendar.keys():\n                    if event == calendar[date]:\n                        del calendar[date] # del a[], [1], [ a ], [1:3], [5:], [:9], etc.\n                        print( Deleted. )\n                        print(calendar)\n                    else:\n                        print( Incorrect. )\n\n        elif user_choice == 'X': # X\n            start = False\n\n        else:\n            print( Invalid command. )\n            break\n\nstart_calendar()  What is your first name? Al\nWelcome Al.\nCalendar starting...\nToday is: Thursday, October 20, 2016\nIt is currently: 13:42:02\nWhat would you like to do?\n{}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? a\nEnter event: Buy stuff\nEnter date (MM/DD/YYYY): 10/21/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Sell stuff\nEnter date (MM/DD/YYYY): 11/01/2016\nSuccessful!\n{'10/21/2016': 'Buy stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? A\nEnter event: Rent stuff\nEnter date (MM/DD/YYYY): 01/01/2018\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? u\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Rent stuff', '11/01/2016': 'Sell stuff'}\nWhat date? 01/01/2018\nEnter the update: Lease stuff\nSuccessful!\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? v\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'10/21/2016': 'Buy stuff', '01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? Buy stuff\nDeleted.\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? d\n{'01/01/2018': 'Lease stuff', '11/01/2016': 'Sell stuff'}\nWhat event? 10/21/2016\nIncorrect.\nIncorrect.\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? x", 
            "title": "Project Command Line Calendar"
        }, 
        {
            "location": "/Codecademy Python/#unit-9-exam-statistics", 
            "text": "", 
            "title": "UNIT 9, Exam Statistics"
        }, 
        {
            "location": "/Codecademy Python/#exam-statistics", 
            "text": "grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]\n\nprint  Grades: , grades\n\ndef print_grades(grades): # list the grades\n\n    for i in grades:\n        print i, # , keep the list on the same line\n\nprint_grades(grades)\n\nprint  Let's compute some stats! \n\ndef grades_sum(scores): # sum up the grades\n\n    total = 0\n    for s in scores:\n        total += s\n    return total\n\nprint grades_sum(grades)\n\ndef grades_average(grades): # average the grades\n\n    sum_of_grades = grades_sum(grades)\n    average = sum_of_grades / float(len(grades))\n    return average\n\nprint grades_average(grades)\n\nprint  Time to conquer the variance! \n\ndef grades_variance(scores): # compute the variance\n\n    average = grades_average(scores)\n    totalvariance = 0\n    for score in scores:\n        totalvariance += (score - average) ** 2\n    tvariance = totalvariance/float(len(scores))\n    return tvariance\n\nvariance = grades_variance(grades)\nprint variance\n\ndef grades_std_deviation(variance): # compute standard deviation\n\n    stddevisation = variance ** 0.5\n    return stddevisation\n\nprint grades_std_deviation(variance)  Grades: [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]\n100 100 90 40 80 100 85 70 90 65 90 85 50.5 Let's compute some stats!\n1045.5\n80.4230769231\nTime to conquer the variance!\n334.071005917\n18.2776094147", 
            "title": "Exam Statistics"
        }, 
        {
            "location": "/Codecademy Python/#unit-10-advanced-topics-in-python", 
            "text": "", 
            "title": "UNIT 10, Advanced Topics in Python"
        }, 
        {
            "location": "/Codecademy Python/#advanced-topics-in-python", 
            "text": "Iterate through a dictionary.  my_dict = {\n     CodeCademy  :  Python ,\n     DataCamp  :  R ,\n     Code School  :  SQL \n}\n\nprint my_dict.items()\nprint my_dict.keys()\nprint my_dict.values()\n\nfor key in my_dict:\n    print key, my_dict[key] # key and value  [('CodeCademy', 'Python'), ('Code School', 'SQL'), ('DataCamp', 'R')]\n['CodeCademy', 'Code School', 'DataCamp']\n['Python', 'SQL', 'R']\nCodeCademy Python\nCode School SQL\nDataCamp R  Build a list.  evens_to_50 = [i for i in range(51) if i % 2 == 0]\n\nprint evens_to_50  [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]  Build lists with conditions.  doubles_by_3 = [x * 2 for x in range(1,6) if (x * 2) % 3 == 0]\n\nprint doubles_by_3  [6]  even_squares = [x ** 2 for x in range(2,11) if (x ** 2) % 2 == 0]\n\nprint even_squares  [4, 16, 36, 64, 100]  cubes_by_four = [x ** 3 for x in range(1,11) if x ** 3 % 4 == 0]\n\nprint cubes_by_four  [8, 64, 216, 512, 1000]  Lists slicing.  extract, list  l = [i ** 2 for i in range(1, 11)] # Should be [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\nprint l[2:9:2] # [start:end:stride]  [9, 25, 49, 81]  my_list = range(1, 11) # list of numbers 1 - 10\n\nprint my_list[::2]  [1, 3, 5, 7, 9]  my_list = range(1, 11)\n\nbackwards = my_list[::-1]\n\nprint backwards  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]  to_one_hundred = range(101)\n\nbackwards_by_tens = to_one_hundred[::-10]\n\nprint backwards_by_tens  [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0]  to_21 = range(1, 22)\n\nprint to_21\n\nodds = range(1, 22, 2)\n\nprint odds\n\nmiddle_third = to_21[7:14:1]\n\nprint middle_third  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n[8, 9, 10, 11, 12, 13, 14]  Lambda function.  my_list = range(16)\n\nprint filter(lambda x: x % 3 == 0, my_list)  [0, 3, 6, 9, 12, 15]  languages = [ HTML ,  JavaScript ,  Python ,  Ruby ]\n\nprint filter(lambda x: x ==  Python ,languages)  ['Python']  squares = [x**2 for x in range(1,11)]\n\nprint filter(lambda x: (x  = 30 and x  = 70), squares)  [36, 49, 64]  Iterating over dictionaries.  movies = {\n     Monty Python and the Holy Grail :  Great ,\n     Monty Python's Life of Brian :  Good ,\n     Monty Python's Meaning of Life :  Okay \n}\n\nprint movies.items()  [(\"Monty Python's Life of Brian\", 'Good'), (\"Monty Python's Meaning of Life\", 'Okay'), ('Monty Python and the Holy Grail', 'Great')]  Comprehensions.  threes_and_fives = [x for x in range(1,16) if (x % 3 == 0 or x % 5 == 0)]\n\nprint threes_and_fives  [3, 5, 6, 9, 10, 12, 15]  Slicing again.  extract  garbled =  !XeXgXaXsXsXeXmX XtXeXrXcXeXsX XeXhXtX XmXaX XI \n\nmessage = garbled[::-2]\n\nprint message  I am the secret message!  garbled =  IXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX \n\nmessage = filter(lambda x: x !=  X , garbled)\n\nprint message  I am another secret message!", 
            "title": "Advanced Topics in Python"
        }, 
        {
            "location": "/Codecademy Python/#introduction-to-bitwise-operators", 
            "text": "Operators.  print 5   4  # Right Shift\nprint 5   1  # Left Shift\nprint 8   5   # Bitwise AND\nprint 9 | 4   # Bitwise OR\nprint 12 ^ 42 # Bitwise XOR\nprint  /sub 88     # Bitwise NOT  0\n10\n0\n13\n38\n-89  Base 2 or binary.  print 0b1,    # 1\nprint 0b10,   # 2\nprint 0b11,   # 3\nprint 0b100,  # 4\nprint 0b101,  # 5\nprint 0b110,  # 6\nprint 0b111   # 7\nprint  ****** \nprint 0b1 + 0b11 # 1 + 3 = 4\nprint 0b11 * 0b11 # 3 * 3 = 90  1 2 3 4 5 6 7\n******\n4\n9  one = 0b1\ntwo = 0b10\nthree = 0b11\nfour = 0b100\nfive = 0b101\nsix = 0b110\nseven = 0b111\neight = 0b1000\nnine = 0b1001\nten = 0b1010\neleven = 0b1011\ntwelve = 0b1100  Decimal to binary.  print bin(1)\nprint bin(2)\nprint bin(3)\nprint bin(4)\nprint bin(5)  0b1\n0b10\n0b11\n0b100\n0b101  Binary to decimal.  print int( 1 ,2)\nprint int( 10 ,2)\nprint int( 111 ,2)\nprint int( 0b100 ,2)\nprint int(bin(5),2)  1\n2\n7\n4\n5  Print out the decimal equivalent of the binary 11001001.  print int( 11001001 ,2)  201  Left Bit Shift ( )  0b000001   2 == 0b000100 (1   2 = 4)\n0b000101   3 == 0b101000 (5   3 = 40)         Right Bit Shift ( )  0b0010100   3 == 0b000010 (20   3 = 2)\n0b0000010   2 == 0b000000 (2   2 = 0)  This operation is mathematically equivalent to floor dividing and multiplying by 2 (respectively) for every time you shift, but it s often easier just to think of it as shifting all the 1s and 0s left or right by the specified number of slots.  shift_right = 0b1100\nshift_left = 0b1\n\nshift_right = 0b1100   2\nshift_left = 0b1   2\nprint bin(shift_right)\nprint bin(shift_left)  0b11\n0b100  The bitwise AND ( ) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if the corresponding bits of both numbers are 1. For example:      a:   00101010   42\n    b:   00001111   15       \n===================\na   b:   00001010   10  As you can see, the 2 s bit and the 8 s bit are the only bits that are on in both  a  and  b , so  a   b  only contains those bits. Note that using the   operator can only result in a number that is less than or equal to the smaller of the two values.   0   0 = 0  0   1 = 0  1   0 = 0  1   1 = 1   For example:  0b111 (7)   0b1010 (10) = 0b10 .  print bin(0b1110 0b101)\n\nprint bin(0b100)  0b100\n0b100  The bitwise OR ( | ) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of either number are 1. For example:      a:  00101010  42\n    b:  00001111  15       \n================\na | b:  00101111  47  Note that the bitwise  |  operator can only create results that are greater than or equal to the larger of the two integer inputs.   0 | 0 = 0  0 | 1 = 1   1 | 0 = 1  1 | 1 = 1   For example:  110 (6) | 1010 (10) = 1110 (14) .  print bin(0b1110|0b101)  0b1111  The XOR ( ^ ) or exclusive or operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of the two numbers are 1, but not both.      a:  00101010   42\n    b:  00001111   15       \n================\na ^ b:  00100101   37  Keep in mind that if a bit is off in both numbers, it stays off in the result. Note that  XOR -ing a number with itself will always result in 0.   0 ^ 0 = 0  0 ^ 1 = 1  1 ^ 0 = 1  1 ^ 1 = 0   For example:  111 (7) ^ 1010 (10) = 1101 (13) .  print bin(0b1110^0b101)  0b1011  The bitwise NOT operator ( /sub ) just flips all of the bits in a single number. What this actually means to the computer is actually very complicated, so we re not going to get into it. Just know that mathematically, this is equivalent to adding one to the number and then making it negative.   print  /sub 1\nprint  /sub 2\nprint  /sub 3\nprint  /sub 42\nprint  /sub 123  -2\n-3\n-4\n-43\n-124  A bit mask is just a variable that aids you with bitwise operations. A bit mask can help you turn specific bits on, turn others off, or just collect data from an integer about which bits are on or off.  def check_bit4(input):\n\n    mask = 0b1000\n    desired = input   mask\n    if desired   0:\n        return  on \n    else:\n        return  off \n\nprint check_bit4(0b1100)  on  0b1000\n0b1100\n======\n0b1000  You can also use masks to turn a bit in a number on using  | . Use a bitmask and the value a in order to achieve a result where the third bit from the right of a is turned on. Be sure to print your answer as a  bin()  string!  a = 0b10111011\nmask = 0b100\ndesired = a | mask\nprint bin(desired)  0b10111111  0b10111011\n0b00000100\n==========\n0b10111111  Using the XOR ( ^ ) operator is very useful for flipping bits. Using  ^  on a bit with the number one will return a result where that bit is flipped. In the editor is the 8 bit variable a. Use a bitmask and the value a in order to achieve a result where all of the bits in a are flipped. Be sure to print your answer as a  bin()  string!  a = 0b11101110\nmask = 0b11111111\ndesired = a ^ mask\nprint bin(desired)  0b10001  0b11101110\n0b11111111\n==========\n0b00010001  Finally, you can also use the left shift ( ) and right shift ( ) operators to slide masks into place.  def flip_bit(number, n):\n\n    mask = (0b1   (n-1))\n    result = number ^ mask\n    return bin(result)\n\nprint flip_bit(0b111, 2)  0b101", 
            "title": "Introduction to Bitwise Operators"
        }, 
        {
            "location": "/Codecademy Python/#project-rgb-hex-converter", 
            "text": "In this project, we ll use Bitwise operators to build a calculator that can convert RGB values to Hexadecimal ( hex ) values, and vice-versa.  def rgb_hex():\n\n    invalid_msg =  Invalid entry \n    red = int(raw_input( Enter a 'red' (R) value, from 0 to 255:  ))\n    if red   0 or red   255:\n        print invalid_msg\n        return # return will exit the function, w/o return, the function jumps to the next line...\n\n    green = int(raw_input( Enter a 'green' (G) value, from 0 to 255:  ))\n    if green   0 or green   255:\n        print invalid_msg\n        return\n\n    blue = int(raw_input( Enter a 'blue' (B) value, from 0 to 255:  ))\n    if blue   0 or blue   255:\n        print invalid_msg\n        return\n\n    val = red   16 + green   8 + blue\n    # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character.\n    # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\n    # Become familiar with bits by reading more here.\n    print  %s  %(hex(val)[2:].upper()) # string formatting\n\ndef hex_rgb():\n\n    invalid_msg =  Invalid entry \n    hex_val = raw_input( Enter a color (six hexadecimal digits):  )\n    if len(hex_val) != 6:\n        print  Invalid Entry \n    else:\n        hex_val = int(hex_val, 16)\n    two_hex_digits = 2 ** 8\n    blue = hex_val % two_hex_digits\n    hex_val = hex_val   8\n    green = hex_val % two_hex_digits\n    hex_val = hex_val   8\n    red = hex_val % two_hex_digits\n    print  Red: %s Green: %s Blue: %s  %(red, green,blue)\n\ndef convert():\n\n    while True:\n        option = str(raw_input( Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:.  ))\n        if option == '1':\n            print  RGB to Hex... \n            rgb_hex()\n        elif option == '2':\n            print  Hex to RGB... \n            hex_rgb()\n        elif option == 'X' or option == 'x':\n            break\n        else:\n            print  Error \n\nconvert()  Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. 1\nRGB to Hex...\nEnter a 'red' (R) value, from 0 to 255: 10\nEnter a 'green' (G) value, from 0 to 255: 10\nEnter a 'blue' (B) value, from 0 to 255: 20\n280000000000000L\nEnter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. x", 
            "title": "Project RGB-HEX Converter"
        }, 
        {
            "location": "/Codecademy Python/#unit-11-introduction-to-classes", 
            "text": "", 
            "title": "UNIT 11, Introduction to Classes"
        }, 
        {
            "location": "/Codecademy Python/#introduction-to-classes", 
            "text": "You can think of an object as a single data structure that contains data as well as functions; functions of objects are called methods.  Class Fruit ,  lemon instance .  class Fruit(object):\n\n\n    def __init__(self, name, color, flavor, poisonous):\n\n        self.name = name\n        self.color = color\n        self.flavor = flavor\n        self.poisonous = poisonous\n\n    def description(self):\n\n        print  I'm a %s %s and I taste %s.  % (self.color, self.name, self.flavor)\n\n    def is_edible(self):\n\n        if not self.poisonous:\n            print  Yep! I'm edible. \n        else:\n            print  Don't eat me! I am super poisonous. \n\n\nlemon = Fruit( lemon ,  yellow ,  sour , False)\n\nlemon.description()\n\nlemon.is_edible()  I'm a yellow lemon and I taste sour.\nYep! I'm edible.  The class keyword, the name of the class, and the class from which the new class inherits in parentheses. By convention, user-defined Python class names start with a capital letter.  class Animal(object):\n\n\n    pass  __init__():  this function is required for classes, and it s used to initialize the objects it creates.  __init__()  always takes at least one argument, self, that refers to the object being created. You can think of  __init__()  as the function that  boots up  each object the class creates. Python will use the first parameter that  __init__()  receives to refer to the object being created; this is why it s often called self, since this parameter gives the object being created its identity.  class Animal(object):\n\n\n    def __init__(self, name):\n\n        self.name = name  Start creating objects. We can access attributes of our objects using dot notation.  class Animal(object):\n\n\n    def __init__(self, name):\n\n        self.name = name\n\n\nzebra = Animal( Jeffrey ) # instance of Animal\n\nprint zebra.name # instance with attributes  Jeffrey  More  Class Animal(object):\n\n\n    def __init__(self, name, age, is_hungry):\n\n        self.name = name\n        self.age = age\n        self.is_hungry = is_hungry\n\n\nzebra = Animal( Jeffrey , 2, True)\ngiraffe = Animal( Bruce , 1, False)\npanda = Animal( Chad , 7, True)\n\nprint zebra.name, zebra.age, zebra.is_hungry\nprint giraffe.name, giraffe.age, giraffe.is_hungry\nprint panda.name, panda.age, panda.is_hungry    File \" ipython-input-55-08cd00c1ed56 \", line 1\n    Class Animal(object):\n               ^\nSyntaxError: invalid syntax  Another important aspect of Python classes is scope. The scope of a variable is the context in which it s visible to the program.  It may surprise you to learn that not all variables are accessible to all parts of a Python program at all times. When dealing with classes, you can have variables that are available everywhere (global variables), variables that are only available to members of a certain class (member variables), and variables that are only available to particular instances of a class (instance variables).  Global variable, (class) member variable, class variable, instance variable  The same goes for functions: some are available everywhere, some are only available to members of a certain class, and still others are only available to particular instance objects.  Global function, class function, instance function  They all have access to the member variable is_alive, since they re all members of the Animal class.  class Animal(object):\n\n\n     Makes cute animals. \n\n    is_alive = True\n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n\nzebra = Animal( Jeffrey , 2)\ngiraffe = Animal( Bruce , 1)\npanda = Animal( Chad , 7)\n\nprint zebra.name, zebra.age, zebra.is_alive\nprint giraffe.name, giraffe.age, giraffe.is_alive\nprint panda.name, panda.age, panda.is_alive  Jeffrey 2 True\nBruce 1 True\nChad 7 True  When a class has its own functions, those functions are called methods.  class Animal(object):\n\n\n     Makes cute animals. \n\n    is_alive = True\n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n    def description(self):\n\n        print self.name\n        print self.age\n\n\nhippo = Animal( Yan , 10)\n\nhippo.description() # will call the class function and print  Yan\n10  A class can have any number of member variables.  class Animal(object):\n\n\n     Makes cute animals. \n\n    is_alive = True\n    health =  good \n\n    def __init__(self, name, age):\n\n        self.name = name\n        self.age = age\n\n    def description(self):\n\n        print self.name\n        print self.age\n\n\nhippo = Animal( Yan , 10)\nsloth = Animal( George , 1)\nocelot = Animal( Holly , 2)\n\nprint hippo.health # will call the class variable\nprint sloth.health\nprint ocelot.health  good\ngood\ngood  Kind of classes and objects you might find in commercial software: here we have a basic  ShoppingCart  class for creating shopping cart objects for website customers; though basic, it s similar to what you d see in a real program.  class ShoppingCart(object):\n\n\n    items_in_cart = {} # try it with an empty or not dictionary\n    items_in_cart = { cereal :1}\n\n    def __init__(self, customer_name):\n\n        self.customer_name = customer_name\n\n    def add_item(self, product, price):\n\n         Add product to the cart. \n\n        if not product in self.items_in_cart: # check the dictionary\n            self.items_in_cart[product] = price\n            print product +   added. \n        else:\n            print product +   is already in the cart. \n\n    def remove_item(self, product):\n\n         Remove product from the cart. \n\n        if product in self.items_in_cart: # check the dictionary\n            del self.items_in_cart[product]\n            print product +   removed. \n        else:\n            print product +   is not in the cart. \n\n\nmy_cart = ShoppingCart( Jean ) # instance\nmy_cart.add_item( cereal ,1) # class function  cereal is already in the cart.  Inheritance is a tricky concept, so let s go through it step by step. Inheritance is the process by which one class takes on the attributes and methods of another, and it s used to express an is-a relationship. For example, a Panda is a bear, so a Panda class could inherit from a Bear class.  class Customer(object):\n\n\n     Produces objects that represent customers. \n\n    def __init__(self, customer_id):\n\n        self.customer_id = customer_id\n\n    def display_cart(self):\n\n        print  I'm a string that stands in for the contents of your shopping cart! \n\n\nclass ReturningCustomer(Customer):\n\n\n     For customers of the repeat variety. \n\n    def display_order_history(self):\n\n        print  I'm a string that stands in for your order history! \n\n\nmonty_python = ReturningCustomer( ID: 12345 ) # class instance\nmonty_python.display_cart() # inherited from the 1st class\nmonty_python.display_order_history() # from the current class  I'm a string that stands in for the contents of your shopping cart!\nI'm a string that stands in for your order history!  COMPLETE EXAMPLE.  class Shape(object):\n\n\n     make shapes \n\n    number_of_sides = 5\n\n    def __init__(self, number_of_sides):\n\n        self.number_of_sides = number_of_sides\n\n\nmy_shape = Shape(4) # instance\n\n\nclass Triangle(Shape):\n\n\n    number_of_3sides = 3\n    # number_of_sides = 3 # would override the above\n\n\n    def __init__(self, angle1, angle2, angle3):\n\n        self.angle1 = angle1\n        self.angle2 = angle2\n        self.angle3 = angle3\n\n    def check_angles(self):\n\n        if self.angle1 + self.angle2 + self.angle3 == 180:\n            return True\n        else:\n            return False\n\n\nmy_triangle = Triangle(90, 30, 60) # instance\n\nprint my_triangle.number_of_sides # inherit\nprint my_shape.number_of_sides\n\nprint my_triangle.number_of_3sides\nprint my_triangle.check_angles()\n\n\nclass Equilateral(Triangle):\n\n\n    angle = 60\n\n    def __init__(self):\n\n        self.angle1 = self.angle # override the above\n        self.angle2 = self.angle\n        self.angle3 = self.angle\n\n\nmy_equilateral = Equilateral() # instance\n\nprint my_equilateral.angle\nprint my_equilateral.angle1 # based on variable angle\n\nprint my_equilateral.number_of_sides # inherit\nprint my_equilateral.number_of_3sides # inherit\n\nprint my_equilateral.check_angles() # inherit; method way\nprint Equilateral.check_angles(my_equilateral) # function way; IDEM !!!  5\n4\n3\nTrue\n60\n60\n5\n3\nTrue\nTrue  Sometimes you ll want one class that inherits from another to not only take on the methods and attributes of its parent, but to override one or more of them.  class Employee(object):\n\n\n     Models real-life employees! \n\n    def __init__(self, employee_name):\n\n        self.employee_name = employee_name\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 20.00\n\n\nclass PartTimeEmployee(Employee):\n\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 12.00 # override what is naturally inherited  class Employee(object):\n\n\n    def __init__(self, name):\n\n        self.name = name\n\n    def greet(self, other):\n\n        print  Hello, %s  % other.name\n\n\nclass CEO(Employee):\n\n    def greet(self, other):\n\n        print  Get back to work, %s!  % other.name # override\n\n\nceo = CEO( Emily )\nemp = Employee( Steve )\n\nemp.greet(ceo)\nceo.greet(emp)  Hello, Emily\nGet back to work, Steve!  On the flip side, sometimes you ll be working with a derived class (or subclass) and realize that you ve overwritten a method or attribute defined in that class  base class (also called a parent or superclass) that you actually need. Have no fear! You can directly access the attributes or methods of a superclass with Python s built-in super call.  class Employee(object):\n\n\n     Models real-life employees! \n\n    def __init__(self, employee_name):\n\n        self.employee_name = employee_name\n\n    def calculate_wage(self, hours):\n\n        self.hours = hours\n        return hours * 20.00\n\n\nclass PartTimeEmployee(Employee):\n\n\n    def calculate_wage(self, hours): # override\n\n        self.hours = hours\n        return hours * 12.00\n\n    def full_time_wage(self, hours): # super call: associate the parent's class function with child's new function withtout retyping the function\n\n        return super(PartTimeEmployee, self).calculate_wage(hours)\n\n\nmilton = PartTimeEmployee( Jack )\n\nprint milton.full_time_wage(10)  200.0", 
            "title": "Introduction to Classes"
        }, 
        {
            "location": "/Codecademy Python/#more-on-classes", 
            "text": "class Car(object): # create a class\n\n\n    pass\n\n\nmy_car = Car() # create a class instance  class Car(object):\n\n\n    condition =  new  # create a member variables\n\n\nmy_car = Car()\n\nprint my_car.condition # call the member variable  new  class Car(object):\n\n\n    condition =  new \n\n    def __init__(self, model, color, mpg): # initialize or boot up!\n\n        self.model = model # assign class variables\n        self.color = color\n        self.mpg = mpg\n\n\nmy_car = Car( DeLorean ,  silver , 88) # create an instance with its class variables\n\nprint my_car.condition\n\nprint my_car.model # call the class variables...\nprint my_car.color\nprint my_car.mpg  new\nDeLorean\nsilver\n88  class Car(object):\n\n\n    condition =  new \n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return  This is a %s %s with %s MPG.  % (self.color, self.model, str(self.mpg)) # create a class method (function)\n\n\nmy_car = Car( DeLorean ,  silver , 88)\n\nprint my_car.condition\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car() # call the class method  new\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.  class Car(object):\n\n\n    condition =  new \n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return  This is a %s %s with %s MPG.  % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition =  used \n\n\nmy_car = Car( DeLorean ,  silver , 88)\n\nprint my_car.condition # 'new'\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car()\nprint my_car.condition # the condition changes to 'used'  new\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused  class Car(object):\n\n\n    condition =  new \n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return  This is a %s %s with %s MPG.  % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition =  used \n\n\nmy_car = Car( DeLorean ,  silver , 88)\n\nprint my_car.condition\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car()\nprint my_car.condition\n\n\nclass ElectricCar(Car):\n\n\n    def __init__(self, model, color, mpg, battery_type): # initialize with some partial inheritance from class Car\n\n        Car.__init__(self, model, color, mpg) # assign class variable by inheritance from class Car\n        self.battery_type = battery_type # assign a new class variable\n\n\nmy_car = ElectricCar( Telsa ,  red , 0,  molten salt ) # create an instance with its class variables; OVERRIDE the above\n\nprint my_car.condition # call the class variables; OVERRIDE the above\n\nprint my_car.model # call the member variable; OVERRIDE the above\nprint my_car.color\nprint my_car.mpg\n\nmy_ride = ElectricCar( Google ,  blue , 10,  electrical ) # create an instance with its class variables\n\nprint my_ride.condition # call the class variables\n\nprint my_ride.model # call the member variable\nprint my_ride.color\nprint my_ride.mpg  new\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused\nnew\nTelsa\nred\n0\nnew\nGoogle\nblue\n10  class Car(object):\n\n\n    condition =  new \n\n    def __init__(self, model, color, mpg):\n\n        self.model = model\n        self.color = color\n        self.mpg = mpg\n\n    def display_car(self):\n\n        return  This is a %s %s with %s MPG.  % (self.color, self.model, str(self.mpg))\n\n    def drive_car(self):\n\n        self.condition =  used \n\n\nmy_car = Car( DeLorean ,  silver , 88)\n\nprint my_car.condition +  !  # call the member variable; 'new'\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nprint my_car.display_car()\n\nmy_car.drive_car() # call the class method\nprint my_car.condition +  !!  # member variable; now 'used'\n\nclass ElectricCar(Car):\n\n\n    def __init__(self, model, color, mpg, battery_type):\n\n        Car.__init__(self, model, color, mpg)\n        self.battery_type = battery_type\n\n    def drive_car(self): # create a class method; OVERRIDE the above\n\n        self.condition =  like new \n\n\nmy_car = ElectricCar( Telsa ,  red , 0,  molten salt )\n\nprint my_car.condition +  !  # 'new' again\nmy_car.drive_car() # call the class method\nprint my_car.condition +  !!  # 'like new' now\n\nprint my_car.model\nprint my_car.color\nprint my_car.mpg\n\nmy_ride = ElectricCar( Google ,  blue , 10,  electrical )\n\nprint my_ride.condition +  !  # 'used' again\nmy_ride.drive_car()# call the class method\nprint my_ride.condition +  !!  # 'like new' now\n\nprint my_ride.model\nprint my_ride.color\nprint my_ride.mpg  new!\nDeLorean\nsilver\n88\nThis is a silver DeLorean with 88 MPG.\nused!!\nnew!\nlike new!!\nTelsa\nred\n0\nnew!\nlike new!!\nGoogle\nblue\n10  class Point3D(object):\n\n\n    def __init__(self, x, y, z): # initialize\n\n        self.x = x\n        self.y = y\n        self.z = z\n\n# __repr__() method, which is short for representation; by providing a return value in this method, we can tell Python how to represent an object of our class (for instance, when using a print statement).\n\n    def __repr__(self):\n\n        return  (%d, %d, %d)  % (self.x, self.y, self.z)\n\n\nmy_point = Point3D(1,2,3) # instance\n\n# Print my_point.__repr__() w/o adding variables\n\nprint my_point  (1, 2, 3)", 
            "title": "More on Classes"
        }, 
        {
            "location": "/Codecademy Python/#quiz-11", 
            "text": "Python writes data to a file when you close the file!", 
            "title": "Quiz 11"
        }, 
        {
            "location": "/Codecademy Python/#project-bank-account", 
            "text": "In this project, we ll create a Python class that can be used to create and manipulate a personal bank account.  class BankAccount(object):\n\n\n    balance = 0\n\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n\n    # The __repr__() method defines what represents the object when a user tries to print the BnkAccount object using print. Let's add to this method and make it descriptive.\n\n        return  %s's account; Balance: $%.2f  % (self.name, self.balance) # $%.2f for 2 decimals, self.class attribute, self.member variable\n\n    def show_balance(self):\n\n        print  Balance: $%.2f\\n  % (self.balance)\n\n    def deposit(self, amount):\n\n        if amount  = 0:\n            print  No Account. Invalid\\n \n            return # # return will exit the function, w/o return, the function jumps to the next line...\n        else:\n            print  Depositing: $%.2f  % (amount) # ?\n            self.balance += amount\n            self.show_balance() # calling a class function\n\n    def withdraw(self, amount):\n\n        if amount   self.balance:\n            print  More than the balance. Invalid\\n \n            return\n        else:\n            print  Withdrawing: $%.2f  % (amount) # ?\n            self.balance -= amount\n            self.show_balance()\n\n\nmy_account = BankAccount( Ugo ) # Ugo is the argument 'name'\n\nprint my_account # launch the __repr__\nmy_account.show_balance() # launch the class function (method) show_balance\n\nmy_account.deposit(2000)\nmy_account.withdraw(3000)\nmy_account.withdraw(1000)\n\nprint my_account  Ugo's account; Balance: $0.00\nBalance: $0.00\n\nDepositing: $2000.00\nBalance: $2000.00\n\nMore than the balance. Invalid\n\nWithdrawing: $1000.00\nBalance: $1000.00\n\nUgo's account; Balance: $1000.00", 
            "title": "Project Bank Account"
        }, 
        {
            "location": "/Codecademy Python/#unit-12-file-input-and-output", 
            "text": "", 
            "title": "UNIT 12, File Input and Output"
        }, 
        {
            "location": "/Codecademy Python/#file-inputoutput", 
            "text": "Read information from a file on your computer, and/or write that information to another file? This process is called file I/O.  my_list = [i ** 2 for i in range(1,11)]\n\nf = open( output.txt ,  w ) # create a file\n\nfor item in my_list:\n    f.write(str(item) +  \\n ) # write\n\nf.close() # save, close  First.  f = open( output.txt ,  w ) # This told Python to open output.txt in  w  mode ( w  stands for  write ).  Read and write.  my_list = [i ** 2 for i in range(1,11)]\n\nmy_file = open( output.txt ,  r+ ) # the file must exist\n\nfor item in my_list:\n    my_file.write(str(item) +  \\n ) # overwrite\n\nmy_file.close() # save, close  Read on the console.  my_file = open( output.txt ,  r ) # the file must exist\nprint my_file.read()\n\nmy_file.close()  1\n4\n9\n16\n25\n36\n49\n64\n81\n100  Read lines on the console.  my_file = open( output.txt ,  r ) # the file must exist\n\nprint my_file.readline() # read line 1\nprint my_file.readline() # read line 2 automatically\nprint my_file.readline() # read line 3\n\nmy_file.close()  1\n\n4\n\n9  Open the file for reading.  read_file = open( output.txt ,  r )\nprint read_file.read()\nread_file.close()  1\n4\n9\n16\n25\n36\n49\n64\n81\n100  Use a second file handler to open the file for writing.  write_file = open( text.txt ,  w )\n\n# Write to the file\nwrite_file.write( Not closing files is VERY BAD. )\n\n# Try to read from the file\nprint write_file.read() # Not working...``\n\nwrite_file.close()  ---------------------------------------------------------------------------\n\nIOError                                   Traceback (most recent call last) ipython-input-87-db256164394e  in  module ()\n      5 \n      6 # Try to read from the file\n----  7 print write_file.read() # Not working...``\n      8 \n      9 write_file.close()\n\n\nIOError: File not open for reading  Try.  read_file = open( text.txt ,  r )\nprint read_file.read()\n\nwrite_file = open( text.txt ,  w )\nwrite_file.write( Not closing files is VERY BAD. )\n\nwrite_file.close() # close it!\n\nwrite_file = open( text.txt ,  r ) # reopen it in read mode\nprint write_file.read() # working\nwrite_file.close()  Not closing files is VERY BAD.\nNot closing files is VERY BAD.  And.  write_file = open( text.txt ,  w )\nwrite_file.write( Not closing files is VERY BAD. ) # could be a variable\nwrite_file.close()  read_file = open( text.txt ,  r )\nprint read_file.read()\nread_file.close()  Not closing files is VERY BAD.  write_file = open( text.txt ,  w )\nwrite_file.truncate() # delete\nwrite_file.close()  read_file = open( text.txt ,  r )\nprint read_file.read()\nread_file.close()  You may not know this, but file objects contain a special pair of built-in methods:  __enter__()  and  __exit__() . The details aren t important, but what is important is that when a file object s  __exit__()  method is invoked, it automatically closes the file. How do we invoke this method? With with and as.  with open( text.txt ,  w ) as textfile: # a variable\n    textfile.write( Success! )\n    textfile.close()  with open( text.txt ,  r ) as textfile:\n    print textfile.read()\n    textfile.close()  Success!", 
            "title": "File Input/Output"
        }, 
        {
            "location": "/Codecademy Python/#more-io", 
            "text": "with open( text.txt ,  w ) as my_file:\n    my_file.write( Youpee!!! )\n\nprint my_file.closed # true\n\nif not my_file.closed == True:\n    my_file.close()\n\nprint my_file.closed # true\n\nwith open( text.txt ,  r ) as my_file:\n    print my_file.read()\n\nprint my_file.closed # true\n\nwith open( text.txt ,  r ) as my_file:\n    print my_file.closed # false\n\nmy_file.close()\n\nprint my_file.closed # true  True\nTrue\nYoupee!!!\nTrue\nFalse\nTrue", 
            "title": "More I/O"
        }, 
        {
            "location": "/Codecademy Python/#quiz-12", 
            "text": "OK", 
            "title": "Quiz 12"
        }, 
        {
            "location": "/Codecademy Python/#project-dna-analysis", 
            "text": "In this project, we ll use many of the concepts you ve learned throughout the Python course in order to do some DNA analysis for a crime investigation.  The scenario:  A spy deleted important files from a computer. There were a few witnesses at the scene of the crime, but no one is sure who exactly the spy was. Three possible suspects were apprehended based on surveillance video. Each suspect had a sample of DNA taken from them. The computer s keyboard was also swabbed for DNA evidence and, luckily, one small DNA sample was successfully retrieved from the computer s keyboard.  Given the three suspects  DNA and the sample DNA retreived from the keyboard, it s up to you to figure out who the spy is!  The project should have methods for each of the following:   Given a file, read in the DNA for each suspect and save it as a string  Take a DNA string and split it into a list of codons  Iterate through a suspect s codon list to see how many of their codons match the sample codons  Pick the right suspect to continue the investigation on   sample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n\n    dna_data =   # empty string\n\n    with open(dna_file,  r ) as f: # f = open(dna_file,  r ); with, as\n        for line in f:\n            dna_data += line\n        return dna_data\n\ndef dna_codons(dna):\n\n    codons = []\n    for i in range(0,len(dna),3): # slice strings of 3 letters\n        if i+3   len(dna): # make sure that you don't add a string to the codon list that isn't at least 3 letters long\n            codons.append(dna[i:i+3]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3\n    return codons\n\ndef match_dna(dna):\n\n    matches = 0\n    for codon in dna:\n        if codon in sample: # if ,in\n            matches += 1\n    return matches\n\ndef is_criminal(dna_sample):\n\n    dna_data = read_dna(dna_sample)\n    codons = dna_codons(dna_data)\n    num_matches = match_dna(codons)\n    if num_matches  = 3:\n        print((dna_sample)[:-4]).upper(),\n        print( : number of matches =   + str(num_matches) +  ; the investigation will proceed further more with this suspect. )\n    else:\n        print((dna_sample)[:-4]).upper(),\n        print( : no evidence; the suspect can be freed. )\n\na =  suspect1.txt \nis_criminal(a)\n\na =  suspect2.txt \nis_criminal(a)\n\na =  suspect3.txt \nis_criminal(a)  SUSPECT1 : no evidence; the suspect can be freed.\nSUSPECT2 : number of matches = 6; the investigation will proceed further more with this suspect.\nSUSPECT3 : no evidence; the suspect can be freed.  suspect1.txt  ATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT  suspect2.txt  CCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG  suspect3.txt  TCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA", 
            "title": "Project DNA Analysis"
        }, 
        {
            "location": "/Learn Python the Hard Way/", 
            "text": "CONTENT\n\n\nExercise 1, A Good First Program\n\n\nShorcuts, Good to Know\n\n\n\n\n\n\nExercise 3, Numbers and Math\n\n\nExercise 4, Variables and Names\n\n\nExercise 5, More Variables and Printing\n\n\nExercise 6, Strings and Text\n\n\nExercise 15, Reading Files\n\n\nExercise 16, Reading and Writing Files\n\n\nExercise 17, More Files\n\n\nExercise 18, Names, Variables, Code, Functions\n\n\nExercise 19, Functions and Variables\n\n\nExercise 20, Functions and Files\n\n\nExercise 21, Functions Can Return Something or not\n\n\nExercise 23, Read Some Code\n\n\nExercise 24, More Practice\n\n\nExercise 25, Even More Practice\n\n\nExercise 32, Loops and Lists\n\n\nExercise 33, While Loops\n\n\nExercise 34, Accessing Elements of Lists\n\n\nExercise 38, Doing Things to Lists\n\n\nExercise 39, Dictionaries, Oh Lovely Dictionaries\n\n\nExercise 40, Modules, Classes, and Objects\n\n\nExercise 41, Learning to Speak Object-Oriented\n\n\nExercise 42, Is-A, Has-A, Objects, and Classes\n\n\nExercise 43, Gothons from Planet Percal #25\n\n\nWrap up\n\n\n\n\n\n\nExercise 44, Inheritance vs Composition\n\n\nWhen to Use Inheritance or Composition\n\n\nFunction Style\n\n\nComposition\n\n\nImplicit Inheritance\n\n\nInherit from both Classes\n\n\nOverride Explicitly\n\n\nAlter Before or After\n\n\nSuper\n\n\nAll Three Combined\n\n\n\n\n\n\nExercise 45, You Make a Game\n\n\nExercise 46, A Project Skeleton\n\n\nExercise 47, Automated Testing\n\n\nMiscellaneous notes\n\n\n\n\n\n\nExercise 50, Your First Website\n\n\nAn overview\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes, code snippets, and excerpts from the course. Python 2. From the book and website:\n\n\n\n\nLPTHW\n\n\n\n\n\n\nExercise 1, A Good First Program\n\n\n shebang, begin, script\n\n\n\n\nThis is a shebang (language): \n# -*- coding: utf-8 -*-\n.\n\n\n#\n is an octothorpe or pound or hash or mesh.\n\n\nAdd a second line (Python version): \n#! /usr/bin/env python 2\n.\n\n\n\n\n# -*- coding: utf-8 -*-\n#! /usr/bin/env python 2\n\nprint \nHello World!\n\nprint \nHello Again\n\nprint \nI like typing this.\n\nprint \nThis is fun.\n\nprint 'Yay! Printing.'\nprint \nI'd much rather you 'not'\n\nprint 'I said do not touch this.'\nprint \ntesting2\n\n\n\n\n\nHello World!\nHello Again\nI like typing this.\nThis is fun.\nYay! Printing.\nI'd much rather you 'not'\nI said do not touch this.\ntesting2\n\n\n\nShorcuts, Good to Know\n\n\n\n\nIn the terminal, type \npydoc \npython item\n to invoke the documentation on a python item (built-in functions, methods, objects, etc.).\n\n\nctrl+c\n and/or \nctrl+d\n break a loop.\n\n\n\n\nExercise 3, Numbers and Math\n\n\n print, format, calculate\n\n\nprint \nI will now count my chickens:\n\n\n\n\n\nI will now count my chickens:\n\n\n\nprint \nHens\n, 25 + 30 / 6\nprint \nRoosters\n, 100 - 25 * 3 % 4\n\nprint \nNow I will count the eggs:\n\n\nprint 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6\n# copy 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 straight into the shell and run it\n# you will get the result only (don't add print before the statement)\n\n\n\n\nHens 30\nRoosters 97\nNow I will count the eggs:\n7\n\n\n\nprint \nIs it true that 3 + 2 \n 5 - 7\n\nprint 3 + 2 \n 5 - 7\n\n\n\n\nIs it true that 3 + 2 \n 5 - 7\nFalse\n\n\n\nprint \nWhat is 3 + 2?\n, 3 + 2\nprint \nWhat is 5 - 7?\n, 5 - 7\n\n\n\n\nWhat is 3 + 2? 5\nWhat is 5 - 7? -2\n\n\n\nprint \nOh, that's why it's False.\n\nprint \nHow about some more.\n\n\n\n\n\nOh, that's why it's False.\nHow about some more.\n\n\n\nprint \nIs it greater?\n, 5 \n -2\nprint \nIs it greater or equal?\n, 5 \n= -2\nprint \nIs it less or equal?\n, 5 \n= -2\n\n\n\n\nIs it greater? True\nIs it greater or equal? True\nIs it less or equal? False\n\n\n\nprint (1 + 1) # integer\n\n\n\n\n2\n\n\n\nprint (1.0 + 1) # float\n\n\n\n\n2.0\n\n\n\nExercise 4, Variables and Names\n\n\ncars = 100\nspace_in_a_car = 4.0 # float\ndrivers = 30\npassengers = 90\ncars_not_driven = cars - drivers\ncars_driven = drivers\ncarpool_capacity = cars_driven * space_in_a_car\naverage_passengers_per_car = passengers / cars_driven\n\nprint \nThere are\n, cars, \ncars available.\n\nprint \nThere are only\n, drivers, \ndrivers available.\n\nprint \nThere will be\n, cars_not_driven, \nempty cars today.\n\nprint \nWe can transport\n, carpool_capacity, \npeople today.\n\nprint \nWe have\n, passengers, \nto carpool today.\n\nprint \nWe need to put about\n, average_passengers_per_car, \nin each cars.\n\n\n\n\n\nThere are 100 cars available.\nThere are only 30 drivers available.\nThere will be 70 empty cars today.\nWe can transport 120.0 people today.\nWe have 90 to carpool today.\nWe need to put about 3 in each cars.\n\n\n\n\n\nA constant variable, a variable that should never be altered, should be set in capital as \nPI = 3.1416\n.\n\n\n\n\nExercise 5, More Variables and Printing\n\n\n\n\nCall a variable with:\n\n\n%r\n; raw variable.\n\n\n%s\n; string.\n\n\n%d\n; digit.\n\n\n\n\n\n\nMake the choice depending on the variable type.\n\n\nHowever, if calling a \nstring\n (text, NLP), it must be done with \n%s\n; \nnumbers\n is done with \n%r\n and \n%d\n (possibly with \n%s\n). \n\n\nThe use and effects of the different calls is explained in Exercises 6 and 21.\n\n\n\n\nmy_name = 'Zed A. Shaw'\nmy_age = 35 # not a lie\nmy_height = 74 # inches\nmy_weight = 180 # lbs\nmy_eyes = 'Blue'\nmy_teeth = 'White'\nmy_hair = 'Brown'\n\nprint \nLet's talk about %s.\n % my_name\n\n\n\n\nLet's talk about Zed A. Shaw.\n\n\n\n# does the same thing\nprint \nHe's %d years old.\n %my_age\nprint \nHe's\n, my_age,\nyears old.\n\nprint \nHe will be\n, my_age + 1,\nyears old next year.\n\n\n\n\n\nHe's 35 years old.\nHe's 35 years old.\nHe will be 36 years old next year.\n\n\n\nprint \nHe's %d inches tall.\n % my_height\nprint \nHe's %d pounds heavy\n % my_weight\nprint \nActually that's not too heavy.\n\nprint \nHe's got %s eyes and %s hair.\n % (my_eyes, my_hair)\nprint \nHis teeth are usually %s depending on the coffee.\n % my_teeth\n\n\n\n\nHe's 74 inches tall.\nHe's 180 pounds heavy\nActually that's not too heavy.\nHe's got Blue eyes and Brown hair.\nHis teeth are usually White depending on the coffee.\n\n\n\n# this line is tricky, try to get it exactly right\nprint \nIf I add %d, %d, and %d I get %d.\n % (\n    my_age, my_height, my_weight, my_age + my_height + my_weight)\n\n\n\n\nIf I add 35, 74, and 180 I get 289.\n\n\n\nExercise 6, Strings and Text\n\n\n concatenate\n\n\n\n\n%s\n and \n%r\n help when concatenating strings.\n\n\n%r\n does not coerce the variable into a format (\n%s\n string or \n%d\n digit).\n\n\n\n\nx = \nThere are %d types of people.\n % 10\nbinary = \nbinary\n\ndo_not = \ndon't\n\n\ny = \nThose who know %s and those who %s.\n % (binary, do_not) # assign strings or chains of strings to a variable\n\nprint x \nprint y\n\n\n\n\nThere are 10 types of people.\nThose who know binary and those who don't.\n\n\n\nprint \nI said: %r.\n % x\nprint \nI also said: '%s'.\n % y\n\n\n\n\nI said: 'There are 10 types of people.'.\nI also said: 'Those who know binary and those who don't.'.\n\n\n\nhilarious = False\njoke_evaluation = \nIsn't that joke so funny?! %r\n\n\nprint joke_evaluation % hilarious\n\n\n\n\nIsn't that joke so funny?! False\n\n\n\n# add two strings together, concatenate them\nw = \nThis is the left side of...\n\ne = \n a string with a right side.\n\n\n# with Numpy, it would have added (mathematically speaking)\nprint w + e\n\n\n\n\nThis is the left side of... a string with a right side.\n\n\n\nExercise 15, Reading Files\n\n\n\n\nBefore running this script, create a text file.\n\n\nType \n\"Test file thing\" \n test.txt\n.\n\n\nThen type \ncat test.txt\n.\n\n\ntest.txt\n is now saved along the other scripts.\n\n\nRun the script: \npython ex15.py test.txt\n\n\nWith IPython, type: \n%run ex15.py test.txt\n\n\nRun the script without the extra argument \ntest.txt\n to check the result.\n\n\n\n\n%run ex15.py test.txt\n\n\n\n\nHere's your file 'test.txt':\nTest file thing\nType the filename again:\n\n test.txt\nHere's your file 'test.txt' again:\nTest file thing\n\n\n\n%run ex15.py\n\n\n\n\n---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n\\\\Learn Python the Hard Way\\ex15.py in \nmodule\n()\n      1 from sys import argv\n      2 \n----\n 3 script, filename = argv\n      4 \n      5 # similarities\n\n\nValueError: need more than 1 value to unpack\n\n\n\n\n\nLoad the script in IPython with \n%load\n to study it (don\nt run it!).\n\n\nThis type of script requires \nexternal\n arguments when launched: \npython ex15.py test.txt\n\n\nIn the script itself, always preceed the \nexternal\n arguments, like \nfilename\n, with \nscript\n since your write \npython ex15.py test.txt\n or \npython script argument\n when you launch the script.\n\n\n\n\n# %load ex15.py\nfrom sys import argv\n\nscript, filename = argv\n\n# similarities between\n# var = raw_input(\nstring\n, digit, \nprompt\n)\n# var = open(\nstring\n)\n\ntxt = open(filename) # reference to a file, not the file\nprint \nHere's your file %r:\n % filename\nprint txt.read()\n\nprint \nType the filename again:\n\nfile_again = raw_input(\n \n)\n\ntext_again = open(file_again)\nprint \nHere's your file %r again:\n % file_again\nprint text_again.read()\n\n\n\n\n\n\nThe script again (this time, a manual import or copy-paste).\n\n\n\n\nfrom sys import argv\n\n# always preceed the arguments like 'filename' with 'script'\nscript, filename = argv\n\n# similarities\n# var = raw_input(\nstring\n, digit, \nprompt\n)\n# var = open(\nstring\n)\n\ntxt = open(filename) #reference to a file, not the file\nprint \nHere's your file %r:\n % filename\nprint txt.read()\n\nprint \nType the filename again:\n\nfile_again = raw_input(\n \n)\n\ntext_again = open(file_again)\nprint \nHere's your file %r again:\n % file_again\nprint text_again.read()\n\n\n\n\n\n\nNow, use this alternative code instead.\n\n\nIt does not require an external argument; the argument (\nfilename\n) is in the script itself (it has become a variable).\n\n\nInternal\n arguments are for functions (\ndef function(arg1, arg2):\n); see Exercise 18.\n\n\n\n\nfilename = \ntest.txt\n # however, the code is limited to this file only\n\ntxt = open(filename) # reference to a file, not the file\nprint \nHere's your file %r:\n % filename\nprint txt.read()\n\nprint \nType the filename again:\n\nfile_again = raw_input(\n \n)\n\ntext_again = open(file_again)\nprint text_again.read()\n\n\n\n\nExercise 16, Reading and Writing Files\n\n\n open, close, readlines, truncate\n\n\n\n\n'w'\n, write, \n'r'\n, read, \n'a'\n, append.\n\n\n'w+'\n, read-write, \n'r+'\n, read-write, \n'a+'\n, read-append.\n\n\n'r'\n being the default argument, it is facultative when writing \nopen('file', 'r')\n.\n\n\nThe other arguments are mandatory; without them in \nopen('file, 'w')\n, you cannot write, truncate, append or replace.\n\n\nFirst, load the script in IPython by typing \n%load ex16_1.py\n; it then turn to  a comment \n# %load ex16_1.py\n.\n\n\n\n\n# %load ex16.py\nfrom sys import argv\n\nscript, filename = argv\n\nprint \nWe're going to erase %r.\n % filename\nprint \nIf you don't want that, hit CTRL-C (^C).\n\nprint \nIf you do want that, hit RETURN.\n\n\nraw_input(\n?\n)\n\nprint \nOpening the file...\n\ntarget = open(filename, 'w')\n\nprint \nTruncating the file!\n\n\ntarget.truncate()\n\nprint \nNow, I'm going to ask you  for three lines.\n\n\nline1 = raw_input(\nline 1: \n)\nline2 = raw_input(\nline 2: \n)\nline3 = raw_input(\nline 3: \n)\n\nprint \nI'm going to write these to the file.\n\n\ntarget.write(line1) # 'write' variable line1\ntarget.write(\n\\n\n) # add a new line\ntarget.write(line2)\ntarget.write(\n\\n\n)\ntarget.write(line3)\ntarget.write(\n\\n\n)\n\nprint \nAnd finally, we close it.\n\ntarget.close()\n\n\n\n\n\n\nNow, run the external file in IPython (it imports the code behind the scene).\n\n\nCareful: the script requires a second argument (\nfilename\n).\n\n\n\n\n%run ex16.py text.txt\n\n\n\n\nWe're going to erase 'text.txt'.\nIf you don't want that, hit CTRL-C (^C).\nIf you do want that, hit RETURN.\n?\nOpening the file...\nTruncating the file!\nNow, I'm going to ask you  for three lines.\nline 1: Good morning.\nline 2: How are you?\nline 3: I wish you a good day.\nI'm going to write these to the file.\nAnd finally, we close it.\n\n\n\n\n\nRead the file.\n\n\n\n\nfilename = 'text.txt'\n\ntarget = open(filename, 'r')\nprint target.read()\ntarget.close()\n\n\n\n\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\n\n\nNow, truncate (empty, delete, erase, clear) the file, reopen it, and to read it.\n\n\n\n\nfilename = 'text.txt'\n\ntarget = open(filename, 'w')\nprint \nTruncating the file!\n\nprint \n-\n * 25\ntarget.truncate()\ntarget.close()\n\ntarget = open(filename, 'r')\nprint target.read()\ntarget.close()\n\n\n\n\nTruncating the file!\n------------------------\n\n\n\n\n\nExercise 17, More Files\n\n\n length, len()\n\n\n\n\ntarget.read()\n; read the whole file (EOF).\n\n\ntarget.read(10)\n; read the amount of bytes between the parentheses (1 byte = 1 character).\n\n\ntarget.readline()\n; read one line character at a time; the first line or the file until the first \n\\n\n.\n\n\ntarget.readline(10)\n; read 10 bytes of the first line, but never more than the first line.\n\n\nreadlines()\n; read in the whole file at once and splits it by line (create a list).\n\n\nxreadlines()\n; read big files.\n\n\nFirst, load \nscript ex17_1.py\n in IPython. This script needs two additional arguments.\n\n\n\n\n# %load ex17_1.py\nfrom sys import argv\nfrom os.path import exists # does the file exists, T or F?\n\nscript, from_file, to_file = argv\n\nprint \nCopying from %s to %s\n % (from_file, to_file)\n\nin_file = open(from_file, 'r') # 'r' is facultative\nindata = in_file.read() # read the content, store in memory\n\nprint \nThe input file is %d bytes long\n % len(indata) # number of bytes in the file or length of 'indata'\n\nprint \nDoes the output file exist? %r\n % exists(to_file) # if the second file hasn't been created, this row will yield a 'False'\n\n# after you run this script, if you run it again, il will yield a 'True'\nprint \nReady, hit RETURN to continue, CTRL-C to abort.\n\nraw_input(\n? \n)\n\nout_file = open(to_file, 'w')\nout_file.write(indata)\n\nprint \nAlright, all done.\n\n\nout_file.close()\nin_file.close()\n\n\n\n\n%run ex17_1.py text2.txt new.txt\n\n\n\n\nCopying from text2.txt to new.txt\nThe input file is 49 bytes long\nDoes the output file exist? True\nReady, hit RETURN to continue, CTRL-C to abort.\n? \nAlright, all done.\n\n\n\ntarget = open(\ntext2.txt\n)\nprint target.read()\ntarget.close()\n\n\n\n\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\ntarget = open(\nnew.txt\n)\nprint target.read()\ntarget.close()\n\n\n\n\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\n# %load ex17_2.py\nfrom sys import argv\nfrom os.path import exists # does the file exists, T or F?\n\nscript, from_file, to_file = argv\n\n# FIRST\nin_file = open(from_file, 'r')\nindata = in_file.read()\n\nprint \nThe input file is %d bytes long\n % len(indata)\n\nin_file.close()\n\nprint \n-\n * 25\n\n# SECOND\ncheckfile = open(from_file, 'r')\nprint checkfile.readline() # read line 1, show\nprint checkfile.readline() # read line 2\nprint checkfile.readline() # read line 3\n\ncheckfile.close()\n\nprint \n-\n * 25\n\n# THIRD\ncheckfile2 = open(from_file, 'r')\nout_file = open(to_file, 'w')\n\nindata = checkfile2.read()\nout_file.write(indata)\n\nprint \nAlright, all done.\n\n\ncheckfile2.close()\nout_file.close()\n\nprint \n-\n * 25\n\n# FOURTH\n\ncheckfile3 = open(to_file, 'r')\n\nprint checkfile3.read()\n\ncheckfile3.close()\n\n\n\n\n%run ex17_2.py text2.txt new2.txt\n\n\n\n\nThe input file is 49 bytes long\n-------------------------\nGood morning.\n\nHow are you?\n\nI wish you a good day.\n-------------------------\nAlright, all done.\n-------------------------\nGood morning.\nHow are you?\nI wish you a good day.\n\n\n\nExercise 18, Names, Variables, Code, Functions\n\n\n argument, flexible, indefinite\n\n\n\n\nA function can have no, one or several arguments.\n\n\ndef function():\n.\n\n\ndef function(one)\n.\n\n\ndef function(one, two, three)\n.\n\n\n\n\n\n\n*args\n means indifinite number of arguments. \n\n\nAll the arguments are is a list (\nargs\n).\n\n\n\n\n# indefinite\ndef print_two(*args):\n\n    arg1, arg2 = args\n    print \narg1: %r, arg2: %r\n % (arg1, arg2)\n\n# two arguments\ndef print_two_again(arg1, arg2):\n\n    print \narg1: %r, arg2: %r\n % (arg1, arg2)\n\n# one argument\ndef print_one(arg1):\n\n    print \narg1: %r\n % arg1\n\n# no arguments\ndef print_none():\n\n    print \nI got nothin'.\n\n\n# indefinite\ndef print_two_2(*args):\n\n    print \nargs: %r\n % (args,) # much more flexible    \n\n# two arguments\ndef print_two_again_2(arg1, arg2, arg3):\n\n    print \narg1: %r, arg2: %r, arg3: %r\n % (arg1, arg2, arg3)    \n\n# three arguments\ndef print_two_again_3(arg1, arg2, arg3):\n\n    print \narg1: %r, arg2: %r, arg3: %r\n % (arg1, arg2, arg3)\n    print_two(\nJoe\n, \nFrank\n) # call a function inside a function\n\n\n\n\n\n\nRun the functions.\n\n\n\n\nprint_two(\nZed\n, \nShaw\n)\nprint_two_again(\nZed\n, \nShaw\n)\n\n\n\n\narg1: 'Zed', arg2: 'Shaw'\narg1: 'Zed', arg2: 'Shaw'\n\n\n\nprint_one(\nFirst!\n)\nprint_none()\n\n\n\n\narg1: 'First!'\nI got nothin'.\n\n\n\nprint_two_2(\nZed\n, \nShaw\n, \nA\n, \nB\n)\n\n\n\n\nargs: ('Zed', 'Shaw', 'A', 'B')\n\n\n\nprint_two_again_2(\nZed\n, \nShaw\n, \nC\n)\n\n\n\n\narg1: 'Zed', arg2: 'Shaw', arg3: 'C'\n\n\n\nprint_two_again_3(\nZed\n, \nShaw\n, \nC\n)\n\n\n\n\narg1: 'Zed', arg2: 'Shaw', arg3: 'C'\narg1: 'Joe', arg2: 'Frank'\n\n\n\nExercise 19, Functions and Variables\n\n\n\n\nGive different names to functions and arguments not to get confuse.\n\n\n\n\ndef cheese_and_crackers(cheese_count, boxes_of_crackers):\n\n    print \nYou have %d cheeses!\n % cheese_count\n    print \nYou have %d boxes of crackers!\n % boxes_of_crackers\n    print \nMan that's enough for a party!\n\n    print \nGet a blanket. \\n\n\n\n\n\n\nprint \n1.We can just give the function numbers directly:\n\ncheese_and_crackers(20, 30)\n\n\n\n\n1.We can just give the function numbers directly:\nYou have 20 cheeses!\nYou have 30 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\nprint \n2.Or, we can use variables from our script:\n\namount_of_cheese = 10\namount_of_crackers = 50\ncheese_and_crackers(amount_of_cheese, amount_of_crackers)\n\n\n\n\n2.Or, we can use variables from our script:\nYou have 10 cheeses!\nYou have 50 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\nprint \n3.We can even do math inside too:\n\ncheese_and_crackers(10 + 20, 5 + 6)\n\n\n\n\n3.We can even do math inside too:\nYou have 30 cheeses!\nYou have 11 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\nprint \n4.And we can combine the two, variables and math:\n\ncheese_and_crackers(amount_of_cheese + 100, amount_of_crackers + 1000)\n\n\n\n\n4.And we can combine the two, variables and math:\nYou have 110 cheeses!\nYou have 1050 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\nprint \n5.Make a GUI.\n\nprint \nEnter the amount of cheese:\n,\namount_of_cheese = int(raw_input())\namount_of_crackers = int(raw_input(\nEnter the amount of crackers: \n))\ncheese_and_crackers(amount_of_cheese, amount_of_crackers)\n\n\n\n\n5.Make a GUI.\nEnter the amount of cheese:2\nEnter the amount of crackers: 5\n You have 2 cheeses!\nYou have 5 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.\n\n\n\nExercise 20, Functions and Files\n\n\n seek, move, file\n\n\n# %load ex20.py\nfrom sys import argv\n\nscript, input_file = argv\n# python ex20.py test.txt\n\ndef print_all(f): # f is the file\n\n    print f.read() # read the file, reach the end\n\ndef rewind(f):\n\n    f.seek(0) # move back to the initial position in the file\n# 'seek' actively move in the file\n\ndef print_a_line(line_count, f):\n\n    print line_count, f.readline() # print a line # and this line number in the file\n\n\ncurrent_file = open(input_file)\n\nprint \nFirst, let's print the whole file:\\n\n\n\nprint_all(current_file) # launch function, f = current_file\n\nprint \n-\n * 25\n\nprint \nNow let's rewind, kind of like a tape.\n\n\nrewind(current_file) # launch function, f = current_file\n\nprint \n-\n * 25\n\nprint \nLet's print three lines:\n\n\ncurrent_line = 1 # load variable\nprint_a_line(current_line, current_file) # launch function\n# set 'current_line' to 1\n\ncurrent_line = current_line + 1\n# current_line += 1\nprint_a_line(current_line, current_file)\n# 'current_line' grows to 2...\n\n# current_line = current_line + 1\ncurrent_line += 1\nprint_a_line(current_line, current_file)\n\n\n\n\n%run ex20.py new2.txt\n\n\n\n\nFirst, let's print the whole file:\n\nGood morning.\nHow are you?\nI wish you a good day.\n-------------------------\nNow let's rewind, kind of like a tape.\n-------------------------\nLet's print three lines:\n1 Good morning.\n\n2 How are you?\n\n3 I wish you a good day.\n\n\n\nExercise 21, Functions Can Return Something or not\n\n\n integer, float, int, coerce, digit, string, raw\n\n\n\n\n%r\n for raw.\n\n\n%d\n for digit.\n\n\n%s\n for string.\n\n\nint()\n with \n%d\n = integer.\n\n\nint()\n with \n%r\n or \n%s\n = integer.\n\n\nfloat()\n with \n%d\n = integer.\n\n\nfloat()\n  with \n%r\n or \n%s\n = float.\n\n\n%r\n is a safer choice; see below.\n\n\n\n\na = 10 # a digit\nb = 10.1\n\nprint \n%r\n % a\nprint \n%s\n % a\nprint \n%d\n % a\nprint \n%r\n % b\nprint \n%s\n % b\nprint \n%d\n % b\n\n\n\n\n10\n10\n10\n10.1\n10.1\n10\n\n\n\na = \n10\n # a string or str(10)\n\nprint \n%r\n % a\nprint \n%s\n % a\nprint \n%d\n % a\n\n\n\n\n'10'\n10\n\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n\nipython-input-34-71a6226dbd27\n in \nmodule\n()\n      2 print \"%r\" % a\n      3 print \"%s\" % a\n----\n 4 print \"%d\" % a\n\nTypeError: %d format: a number is required, not str\n\n\n\nb = \n10.1\n # a string or str(10)\n\nprint \n%r\n % b\nprint \n%s\n % b\nprint \n%d\n % b\n\n\n\n\n'10.1'\n10.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n\nipython-input-33-18d4f3068fee\n in \nmodule\n()\n      2 print \"%r\" % b\n      3 print \"%s\" % b\n----\n 4 print \"%d\" % b\n\nTypeError: %d format: a number is required, not str\n\n\n\na = \n10\n # a string or str(10)\nb = \n10.1\n # a string or str(10)\n\nprint \n%r\n * 1 % a\nprint \n%s\n * 1 % a\nprint \n%r\n * 1 % b\nprint \n%s\n * 1 % b\n\n\n\n\n'10'\n10\n'10.1'\n10.1\n\n\n\na = \n10\n # a string or str(10)\nb = \n10.1\n # a string or str(10)\n\nprint \n%r\n * 2 % a\nprint \n%s\n * 2 % a\nprint \n%r\n * 2 % b\nprint \n%s\n * 2 % b\n\n\n\n\n---------------------------------------------------------------------------\n\n\nTypeError                                 Traceback (most recent call last)\n\n\nipython-input-34-18d4f3068fee\n in \nmodule\n()\n      1 a = \"10\"\n      2 b = \"10.1\"\n----\n 3 print \"%r\" * 2 % a\n      4 print \"%s\" * 2 % a\n      5 print \"%r\" * 2 % b\n\nTypeError: not enough arguments for format string\n\n\n\na = 10\nb = 10.1\na = int(a)\nb = int(b)\nprint \n%r\n % a\nprint \n%s\n % a\nprint \n%d\n % a\nprint \n%r\n % b\nprint \n%s\n % b\nprint \n%d\n % b\n\n\n\n\n10\n10\n10\n10\n10\n10\n\n\n\na = 10\nb = 10.1\na = float(a)\nb = float(b)\n\nprint \n%r\n % a\nprint \n%s\n % a\nprint \n%d\n % a\nprint \n%r\n % b\nprint \n%s\n % b\nprint \n%d\n % b\n\n\n\n\n10.0\n10.0\n10\n10.1\n10.1\n10\n\n\n\na = 1\nb = 2.1\n\nprint a * b\nprint int(a) * int(b)\nprint float(a) * float(b)\nprint str(a) * 10\nprint str(b) * 10\nprint str(a) * str(b)\n\n\n\n\n2.1\n2\n2.1\n1111111111\n2.12.12.12.12.12.12.12.12.12.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n\nipython-input-52-57a5dd7c13d0\n in \nmodule\n()\n      7 print str(a) * 10\n      8 print str(b) * 10\n----\n 9 print str(a) * str(b)\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n\ndef add(a, b):\n\n    print \nADDING %s + %s\n % (a, b)\n    return a + b  \n\ndef substract(a, b):\n\n    print \nSUBTRACTING %d - %d\n % (a, b) # show the arguments\n    return a - b # compute the arguments\n\ndef multiply(a, b):\n\n    print \nMULTIPLYING %d * %d\n % (a, b)\n    return a * b    \n\ndef divide(a, b):\n\n    print \nDIVIDING %d / %d\n % (a, b)\n    return a / b\n\n\n\n\nprint \nLet's do some math with just functions!\n\n\naa = int(raw_input(\nEnter a (integer): \n)) # to enter an integer\nbb = float(raw_input(\nEnter b (float): \n)) # to enter a float\nage = add(aa, bb) # launch function add()\n\n\n\n\nLet's do some math with just functions!\nEnter a (integer): 1\nEnter b (float): 2.2\nADDING 1 + 2.2\n\n\n\nprint add(aa, bb)\n\n\n\n\nADDING 1 + 2.2\n3.2\n\n\n\nheight = substract(78, 4) # launch function substract()\nweight = multiply(90, 2) # launch function multiply()\niq = divide(100, 2) # launch function divide()\n\nprint height\nprint weight\nprint iq\n\n\n\n\nSUBTRACTING 78 - 4\nMULTIPLYING 90 * 2\nDIVIDING 100 / 2\n74\n180\n50\n\n\n\n# Use the variable, previously loaded\nprint \nAge: %d, Height: %d, Weight: %d, IQ: %d\n % (age, height, weight, iq)\n\n\n\n\nAge: 3, Height: 74, Weight: 180, IQ: 50\n\n\n\n# A puzzle for the extra credit, type it in anyway.\nprint \nHere is a puzzle.\n\n\nwhat = add(age, substract(height, multiply(weight, divide(iq, 2)))) # launch functions one by one!!!\n\n# Insert variable 'what' in the text\nprint \nThat becomes: \n, what, \nCan you do it by hand?\n\n\n\n\n\nHere is a puzzle.\nDIVIDING 50 / 2\nMULTIPLYING 180 * 25\nSUBTRACTING 74 - 4500\nADDING 3.2 + -4426\nThat becomes:  -4422.8 Can you do it by hand?\n\n\n\nExercise 23, Read Some Code\n\n\n\n\nGo to \nGitHub\n:\n\n\nIn the \nlamson\n directory, take a script.\n\n\nGo through the script.\n\n\nFind projects on collaborative sites or depositories:\n\n\nbitbucket.org\n.\n\n\ngithub.com\n.\n\n\ngitorious.org\n.\n\n\nlaunchpad.net\n.\n\n\nsourceforge.net\n.\n\n\n\n\n\n\n\n\nExercise 24, More Practice\n\n\n\n\n\\'\n for an aposthrophy.\n\n\n\\t\n for a tab.\n\n\n\\\\\n for a backslash.\n\n\n\\n\n for a new line.\n\n\n\n\nprint \nLet's practice everything.\n\n\nprint 'You\\'d need to know \\'bout escapes with \\\\ that do \\nnewlines and \\ttabs.'\n\n\n\n\nLet's practice everything.\nYou'd need to know 'bout escapes with \\ that do \nnewlines and    tabs.\n\n\n\npoem = \n\n\\tThe lovely world\nwith logic so firmly planted\nconnot discern \\n the needs of love\nnor comprehend passion from intuition\nand requires an explanation\n\\n\\t\\twhere there is none.\n\n\n\nprint \n----------------\n\nprint poem\nprint \n----------------\n\n\n\n\n\n----------------\n\n    The lovely world\nwith logic so firmly planted\nconnot discern \n the needs of love\nnor comprehend passion from intuition\nand requires an explanation\n\n        where there is none.\n\n----------------\n\n\n\n# variable 'five'\nfive = 10 -2 + 3 - 6\n\n# use of variable 'five'\nprint \nThis should be five: %s\n % five\n\n\n\n\nThis should be five: 5\n\n\n\n# function with one argument\ndef secret_formula(started):\n\n    jelly_beans = started * 500 # load variable with another\n    jars = jelly_beans / 1000\n    crates = jars / 100\n    return jelly_beans, jars, crates\n\n\n# variable; warning, this variable is modified further down\nstart_point = 10000\n\n# redefine the results of a function (rename a variable)\n# from this point, 'jelly_beans' becomes 'beans'\n# and must be called so in any line of code\nbeans, jars, crates = secret_formula(start_point)\n\nprint \nWith a starting point of: %d\n % start_point\n# we apply 'bean'\nprint \nWe's have %d beans, %d jars, and %d crates.\n % (beans, jars, crates)\n\n# modified variable is loaded into the code from this point\nstart_point = start_point / 10\n\nprint \nWe can also do that this way:\n\n# we apply the modified variable 'start_point'\nprint \nWe's have %d beans, %d jars, and %d crates.\n % secret_formula(start_point)\n\n\n\n\nWith a starting point of: 10000\nWe's have 5000000 beans, 5000 jars, and 50 crates.\nWe can also do that this way:\nWe's have 500000 beans, 500 jars, and 5 crates.\n\n\n\nExercise 25, Even More Practice\n\n\n import, module, package, script, library\n\n\n\n\nFor this exercice, consult the manual.\n\n\nFirst, run python ex25.py to find out any errors.\n\n\nSecond, use the python engine to run pieces of codes from this file and not just trigger the whole code from this file\n\n\nCheck out file \n25_1.txt\n.\n\n\n\n\n# %load ex25.py\ndef break_words(stuff):\n\n    \nThis function will break up words for us.\n\n    words = stuff.split(' ') # the method splits the characters each time it finds a 'space'\n    return words # you must specify in python where to load the result (into 'words')\n\ndef sort_words(words):\n\n    \nSorts the words.\n\n    return sorted(words) # the python function sorts the separated words\n\ndef print_first_word(words):\n\n    \nPrints the first word after popping in off.\n\n    word = words.pop(0) # the method returns the first word in the index (position 0)\n    print word\n\ndef print_last_word(words):\n\n    \nPrints the last word after popping it off.\n\n    word = words.pop(-1) # the method returns the last word in the index (position -1)\n    print word\n\ndef sort_sentence(sentence):\n\n    \nTakes in a full sentence and returns the sorted words.\n\n    words = break_words(sentence) # launch a function\n    return sort_words(words) # launch another function with the result of the first function\n\ndef print_first_and_last(sentence):\n\n    \nPrints the first and last words of the sentence.\n\n    words = break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n\ndef print_first_and_last_sorted(sentence):\n\n    \nSorts the words then prints the first and last one.\n\n    words = sort_sentence(sentence)\n    print_first_word(words)\n    print_last_word(words)\n\n\n\n\n%run ex25.py\n\n\n\n\n\n\nIn the next script, you \nimport\n the above script (ex25.py) as an external module (even though the script was previously run in IPython, and we want to simulate a script importing another script) and use its function as methods.\n\n\n\n\nimport ex25\n\nsentence = \nAll good things come to those who wait.\n\n\nwords = ex25.break_words(sentence)\nwords\n\n\n\n\n['All', 'good', 'things', 'come', 'to', 'those', 'who', 'wait.']\n\n\n\nsorted_words = ex25.sort_words(words)\nsorted_words\n\n\n\n\n['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']\n\n\n\nex25.print_first_word(words)\nex25.print_last_word(words)\nwords\n\n\n\n\nAll\nwait.\n['good', 'things', 'come', 'to', 'those', 'who']\n\n\n\nex25.print_first_word(sorted_words)\nex25.print_last_word(sorted_words)\nsorted_words\n\n\n\n\nAll\nwho\n['come', 'good', 'things', 'those', 'to', 'wait.']\n\n\n\nsorted_words = ex25.sort_sentence(sentence)\nsorted_words\n\n\n\n\n['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']\n\n\n\nex25.print_first_and_last(sentence)\nex25.print_first_and_last_sorted(sentence)\n\n\n\n\nAll\nwait.\nAll\nwho\n\n\n\nExercise 32, Loops and Lists\n\n\n for, loop, list\n\n\nthe_count = [1,2,3,4,5]\nfruits = ['apples', 'oranges', 'pears', 'apricots']\nchange = [1, 'pennies', 2, 'dimes', 3, 'quarters']\n\n# this first kind of for-loop goes through a list\nfor number in the_count:\n    print \n\\tThis is count %d\n % number\n\n\n\n\n    This is count 1\n    This is count 2\n    This is count 3\n    This is count 4\n    This is count 5\n\n\n\n# same as above\nfor fruit in fruits:\n    print \nA fruit of type: %s\n % fruit\n\n\n\n\nA fruit of type: apples\nA fruit of type: oranges\nA fruit of type: pears\nA fruit of type: apricots\n\n\n\n\n\nWe can go though mixed lists too. Notice we have to use \n%r\n since we don\nt know what\ns in it.\n\n\n\n\nfor i in change:\n    print \n\\tI got %r\n % i\n\n\n\n\n    I got 1\n    I got 'pennies'\n    I got 2\n    I got 'dimes'\n    I got 3\n    I got 'quarters'\n\n\n\n\n\nWe can also build lists. First, start with an empty one.\n\n\n\n\nelements = []\n\n# then use the range function to do 0 to 5 counts\n# 0 means 1st, the 6th is excluded; 0,1,2,3,4,5\nfor i in range(0, 6):\n    print \nAdding %d to the list.\n % i\n    # append is a function that lists understand\n    elements.append(i) # elements is a variable to which we add numbers\n\n\n\n\nAdding 0 to the list.\nAdding 1 to the list.\nAdding 2 to the list.\nAdding 3 to the list.\nAdding 4 to the list.\nAdding 5 to the list.\n\n\n\n\n\nWe can print them out.\n\n\n\n\nfor i in elements:\n    print \n\\tElement was: %d\n % i  \n\n\n\n\n    Element was: 0\n    Element was: 1\n    Element was: 2\n    Element was: 3\n    Element was: 4\n    Element was: 5\n\n\n\nprint \nTest the range function...\n\nprint \nrange(5):\n, range(5)\nprint \nrange(6):\n, range(6)\nprint \nrange(1, 5):\n, range(1, 5)\nprint \nrange(2, 5):\n, range(2, 5)\nprint \nrange(0, 10, 2):\n, range(0, 10, 2)\n\n\n\n\nTest the range function...\nrange(5): [0, 1, 2, 3, 4]\nrange(6): [0, 1, 2, 3, 4, 5]\nrange(1, 5): [1, 2, 3, 4]\nrange(2, 5): [2, 3, 4]\nrange(0, 10, 2): [0, 2, 4, 6, 8]\n\n\n\n\n\nTwo-dimentional lists (above 2 dimension, it can become memory-intensive to compute!).\n\n\n\n\n 2d, tabular, lists in list, list of lists\n\n\nthe_count_two = [[1,2,3],[4,5,6]]\n\n# this first kind of for-loop goes through a list\n# this list is not numerical, use %r or %s\nfor number in the_count_two:\n    print \n\\tThis is count %r\n % number\n\n\n\n\nThis is count [1, 2, 3]\nThis is count [4, 5, 6]\n\n\n\nExercise 33, While Loops\n\n\n while, loop\n\n\ni = 0\nnumbers = []\n\nwhile i \n 6:\n    print \nAt the top i is %d\n % i\n    numbers.append(i)\n\n    i += 1\n    print \nNumber now: \n, numbers\n    print \nAt the botton i is %d\n % i\n\n\nprint \nThe numbers: \n\n\n\n\n\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 1\nAt the top i is 1\nNumber now:  [0, 1]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 1, 2]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 1, 2, 3]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 1, 2, 3, 4]\nAt the botton i is 5\nAt the top i is 5\nNumber now:  [0, 1, 2, 3, 4, 5]\nAt the botton i is 6\nThe numbers:\n\n\n\nfor num in numbers:\n    print num    \n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n\n\n\nMake it a function.\n\n\n\n\ndef breaking_list(max_of, increm):\n\n    i = 0\n    numbers = []\n\n    while i \n max_of:\n        print \nAt the top i is %d\n % i\n        numbers.append(i)\n\n        i += increm\n        print \nNumber now: \n, numbers\n        print \nAt the botton i is %d\n % i\n\n    print \nThe numbers: \n\n\n    for num in numbers:\n        print num\n\nprint \nEnter an integer, a maximum, higher than 1.\n\nmax_integer = int(raw_input(\n \n))\nprint \nEnter an integer, an increment, equal or more than 1\n\nincrement = int(raw_input(\n \n))\nprint \nThe maximum is %d and the increment is %d\n % (max_integer, increment)\n\nbreaking_list(max_integer, increment)\n\n\n\n\nEnter an integer, a maximum, higher than 1.\n\n 5\nEnter an integer, an increment, equal or more than 1\n\n 2\nThe maximum is 5 and the increment is 2\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 2]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 2, 4]\nAt the botton i is 6\nThe numbers: \n0\n2\n4\n\n\n\n\n\nChange the function, replace with a for-loops. \n\n\n\n\ndef breaking_list2(max_of, increm):\n\n    i = 0\n    numbers = []\n\n    for i in range(0, max_of, increm):\n        print \nAt the top i is %d\n % i\n        numbers.append(i)\n\n        i += increm\n        print \nNumber now: \n, numbers\n        print \nAt the botton i is %d\n % i\n\n    print \nThe numbers: \n\n\n    for num in numbers:\n        print num\n\nmax_integer2 = max_integer + 2\nincrement2 = increment + 1\nbreaking_list2(max_integer2, increment2)\n\n\n\n\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 3]\nAt the botton i is 6\nAt the top i is 6\nNumber now:  [0, 3, 6]\nAt the botton i is 9\nThe numbers: \n0\n3\n6\n\n\n\nExercise 34, Accessing Elements of Lists\n\n\n list, list of lists, lists in list, exit, program\n\n\n\n\nLet\ns build a scenario; functions leading to other functions.\n\n\ndef gold_room():\n\n\ndef bear_room():\n\n\ndef cthulhu_room():\n\n\ndef dead(why):\n\n\ndef start():\n\n\nstart()\n to launch the chain reaction.\n\n\n\n\nfrom sys import exit\n\ndef gold_room():\n\n    print \nThis room is full of gold. How much do you take?\n\n\n    choice = raw_input(\nWrite any number from 0 to 100\n \n) # variable\n    if \n0\n in choice or \n1\n in choice: # could be 0, 1, 10, 11:19, 20, 21, 30, 31, 40, 41, 50, 51, etc.\n        how_much = int(choice) # variable\n    else:\n        dead(\nMan, learn to type a number.\n) # launch function dead\n\n    if how_much \n 50:\n        print \nNice, you're not greedy, you win!\n\n        exit(0) # launch system function exit\n    else:\n        dead(\nYou greedy bastard!\n) # launch function dead\n\ndef bear_room():\n\n    print \nThere is bear here.\n\n    print \nThe bear has a bunch of honey.\n\n    print \nThe fat bear is in front of another door.\n\n    print \nHow are you going to move the bear?\n\n    bear_moved = False # variable\n\n    while True: # infinite loop, run until it finds a right answer\n        choice = raw_input(\nWrite 'take honey', 'taunt bear' or 'open door'\n \n) # variable\n\n        if choice == \ntake honey\n: # variable check\n            dead(\nThe bear looks at you then slaps your face off.\n) # launch function dead\n        elif choice == \ntaunt bear\n and not bear_moved: # double variables check\n            print \nThe bear has moved from the door. You can go thought it now.\n\n            bear_moved = True # change the variable\n        elif choice == \ntaunt bear\n and bear_moved:\n            dead(\nThe bear gets pissed off and chews your leg off.\n)\n        elif choice == \nopen door\n and bear_moved: # variable check\n            gold_room() # launch function gold_room\n        else:\n            print \nI got no idea what that means.\n\n\ndef cthulhu_room():\n\n    print \nHere you see the great evil Cthulhu.\n\n    print \nHe, it, whatever stares at you and you go insane.\n\n    print \nDo you flee your life or eat your head?\n\n\n    choice = raw_input(\nWrite 'flee' or 'head'\n \n) # variable\n\n    if \nflee\n in choice: # variable check\n        start() # launch function start\n    elif \nhead\n in choice:\n        dead(\nWell that was tasty!\n)\n    else:\n        cthulhu_room() # launch function\n\ndef dead(why):\n\n    print why, \nGood job!\n\n    exit(0) # launch system function exit\n    # exit(0) is neutral\n    # exit(1) is an error, could be a useful warning\n    # exit(2) or others like exit(100) are other warnings, or different messages\n\ndef start():\n\n    print \nYou are in a dark room.\n\n    print \nThere is a door to your right and left.\n\n    print \nWhich one do you take: left or right?\n\n\n    choice = raw_input(\nWrite 'left' or 'right'\n \n) # variable\n\n    if choice == \nleft\n: # variable check, exact\n        bear_room() # launch function bear_room\n    elif choice == \nright\n: # variable check, exact\n        cthulhu_room()\n    else:\n        dead(\nYou stumble around the room until you starve.\n)\n\nstart() # launch the chain reaction\n\n\n\n\nYou are in a dark room.\nThere is a door to your right and left.\nWhich one do you take: left or right?\nWrite 'left' or 'right'\n left\nThere is bear here.\nThe bear has a bunch of honey.\nThe fat bear is in front of another door.\nHow are you going to move the bear?\nWrite 'take honey', 'taunt bear' or 'open door'\n taunt bear\nThe bear has moved from the door. You can go thought it now.\nWrite 'take honey', 'taunt bear' or 'open door'\n open door\nThis room is full of gold. How much do you take?\nWrite any number from 0 to 100\n 63\nMan, learn to type a number. Good job!\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 0\n\n\n\n\n\nThere are multiple scenarios to try\n\n\n\n\nExercise 38, Doing Things to Lists\n\n\n list, index, add, remove, delete, extract\n\n\nten_things = \nApples Oranges Crows Telephones Light Sugar\n\n\nprint \nten_things:\n, ten_things,\n, not a list\n\n\nprint \nWait there are not 10 things is that list. Let's fix that.\n\n\n\n\n\nten_things: Apples Oranges Crows Telephones Light Sugar , not a list\nWait there are not 10 things is that list. Let's fix that.\n\n\n\nstuff = ten_things.split(' ') # variable ten_things, method split\n\nprint \nstuff:\n, stuff,\n, a list\n\n\n\n\n\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar'] , a list\n\n\n\nmore_stuff = [\nDay\n, \nNight\n, \nSong\n, \nFrisbee\n, \nCorn\n, \nBanana\n, \nGirl\n, \nBoy\n] # list variable\n\nprint \nmore_stuff:\n, more_stuff,\n, a list\n\n\n\n\n\nmore_stuff: ['Day', 'Night', 'Song', 'Frisbee', 'Corn', 'Banana', 'Girl', 'Boy'] , a list\n\n\n\n\n\nMost of the time, a for-loop is better than a while-loop.\n\n\nA while-loop is better when there is a test, a condition.\n\n\n\n\nwhile len(stuff) != 10:\n    next_one = more_stuff.pop() # load a variable with another variable, method pop, pop means extracting 1 item from a list variable, the last item in the list\n    print \nAdding: \n, next_one # show the content\n    stuff.append(next_one) # variable stuff add 1-item list variable; the loop will go as long as stuff has less than 10 items  \n    print \nstuff:\n, stuff\n    print \nThere are %d items now.\n % len(stuff) # length of stuff or the number of items in it\n\nprint \nThere we go: \n, stuff\n\n\n\n\nAdding:  Boy\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy']\nThere are 7 items now.\nAdding:  Girl\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl']\nThere are 8 items now.\nAdding:  Banana\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana']\nThere are 9 items now.\nAdding:  Corn\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana', 'Corn']\nThere are 10 items now.\nThere we go:  ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana', 'Corn']\n\n\n\nprint \nLet's do some things with stuff.\n\n\n# print and pop choosen items according to the index\n# could also be random index values!!!\n# could reorder the list before (ascending, descending) \nprint stuff[1] # the 2nd item\nprint stuff[2] # the 3rd item\nprint stuff[-1] # the last item\nprint stuff[-2]\nprint stuff.pop() # pop the last item\nprint stuff.pop(0) # pop the first item\nprint stuff.pop(1) # pop the 2nd item\nprint stuff.pop(-1) # pop the last item\nprint ' '.join(stuff) # var.split(' ') vs ' '.join(var), concatenate the list\nprint '#'.join(stuff[3:5]) # add a character at position 3 and 4 (4th, 5th, excluding the last) \n\n\n\n\nLet's do some things with stuff.\nOranges\nCrows\nCorn\nBanana\nCorn\nApples\nCrows\nBanana\nOranges Telephones Light Sugar Boy Girl\nSugar#Boy\n\n\n\nExercise 39, Dictionaries, Oh Lovely Dictionaries\n\n\n dictionary\n\n\nthings = ['a','b','c','d'] # list\n\nprint things\nprint things[1]\n\n\n\n\n['a', 'b', 'c', 'd']\nb\n\n\n\n\n\nChange an element.\n\n\n\n\nthings[1] = 'z'\nprint things\n\n\n\n\n['a', 'z', 'c', 'd']\n\n\n\n\n\nA dictionary has keys associated with values. \n\n\nOrder does not matter. \n\n\nIf you supply the key, you will get the value.\n\n\n\n\nstuff = {'name' : 'Zed','age' : '39','height' : 8 * 12 + 2} # a dictionary\n\nprint stuff\nprint stuff['name']\nprint stuff['age']\nprint stuff['height']\n\n\n\n\n{'age': '39', 'name': 'Zed', 'height': 98}\nZed\n39\n98\n\n\n\n\n\nAdd an element.\n\n\n\n\nstuff['city'] = \nSan Francisco\n\nprint stuff['city']\nprint stuff\n\n\n\n\nSan Francisco\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n\n\n\n\n\nAdd and remove an element.\n\n\n\n\nstuff['color'] = \nblue\n\nprint stuff\n\ndel stuff['color']\nprint stuff\n\n\n\n\n{'color': 'blue', 'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n\n\n\n\n\nIf the value does not exist when you call it, it will turn out an error. Instead, write it this way: \nprint \"%r\" % stuff.get('color',None)\n. \n\n\nIf it\ns not existant, it will return \nNone\n or a value by default\n\n\n\n\nprint stuff['state']\n\n\n\n\n---------------------------------------------------------------------------\n\nKeyError                                  Traceback (most recent call last)\n\n\nipython-input-69-f211ffe8fe02\n in \nmodule\n()\n----\n 1 print stuff['state']\n\n\nKeyError: 'state'\n\n\n\nprint \n%r\n % stuff.get('color', None)\n\n\n\n\nNone\n\n\n\n\n\nChange an element.\n\n\n\n\nprint stuff['age']\n\nstuff['age'] = 400\nprint stuff['age']\n\n\n\n\n39\n400\n\n\n\n\n\nExtract with the index.\n\n\n\n\nstuff[1] = \nWow\n\nstuff[2] = \nNeato\n\nprint stuff[1]\nprint stuff[2]\n\nprint stuff # new items won't be in order\n\n\n\n\nWow\nNeato\n{'city': 'San Francisco', 2: 'Neato', 'name': 'Zed', 1: 'Wow', 'age': 400, 'height': 98}\n\n\n\n\n\nDelete an element (according to the index).\n\n\n\n\ndel stuff[1]\ndel stuff[2]\n\nprint stuff\n\n\n\n\n{'city': 'San Francisco', 'name': 'Zed', 'age': 400, 'height': 98}\n\n\n\n\n\nCreate a mapping of state to abbreviation.\n\n\n\n\nstates = {\n    'Oregon': 'OR',\n    'Florida': 'FL',\n    'California': 'CA',\n    'New York': 'NY',\n    'Michigan': 'MI'\n}\n\n\n\n\n\n\nCreate a basic set of states and some cities in them.\n\n\n\n\ncities = {\n    'CA': 'San Francisco',\n    'MI': 'Detroit',\n    'FL': 'Jacksonville'\n}\n\n\n\n\n\n\nAdd some key:value to dictionary cities.\n\n\n\n\ncities['NY'] = 'New York'\ncities['OR'] = 'Portland'\n\n\n\n\n\n\nPrint out some cities.\n\n\n\n\nprint \nDictionary 'cities': \n, cities\nprint '-' * 10\nprint \nNY State has: \n, cities['NY'] # call the key\nprint \nOR State has: \n, cities['OR'] # get the value\n\n\n\n\nDictionary 'cities':  {'FL': 'Jacksonville', 'CA': 'San Francisco', 'MI': 'Detroit', 'OR': 'Portland', 'NY': 'New York'}\n----------\nNY State has:  New York\nOR State has:  Portland\n\n\n\n\n\nPrint some states.\n\n\n\n\nprint \nDictionary 'states': \n, states\nprint '-' * 10\nprint \nMichigan's abbreviation is: \n, states['Michigan']\nprint \nFlorida's abbrebiation is: \n, states['Florida']\n\n\n\n\nDictionary 'states':  {'California': 'CA', 'Michigan': 'MI', 'New York': 'NY', 'Florida': 'FL', 'Oregon': 'OR'}\n----------\nMichigan's abbreviation is:  MI\nFlorida's abbrebiation is:  FL\n\n\n\n\n\nPrint a dictionary in dictionary.\n\n\n\n\nprint \nMichigan has: \n, cities[states['Michigan']]\n# is like states['Michigan'], then cities['MI']\nprint \nflorida has: \n, cities[states['Florida']]\n\n\n\n\nMichigan has:  Detroit\nflorida has:  Jacksonville\n\n\n\n\n\nPrint every state abbreviation.\n\n\n\n\nprint \nEnumerate Dictionary 'states', key:value...\n\nfor state, abbrev in states.items():\n    print \n%s is abbreviated %s\n % (state, abbrev)\n# state = 1st item = key, abbrev = 2nd item = value\n\n\n\n\nEnumerate Dictionary 'states', key:value...\nCalifornia is abbreviated CA\nMichigan is abbreviated MI\nNew York is abbreviated NY\nFlorida is abbreviated FL\nOregon is abbreviated OR\n\n\n\n\n\nPrint every city in state.\n\n\n\n\nprint \nEnumerate Dictionary 'cities', key:value...\n\nfor abbrev, city in cities.items():\n    print \n%s has the city %s\n % (abbrev, city)   \n\n\n\n\nEnumerate Dictionary 'cities', key:value...\nFL has the city Jacksonville\nCA has the city San Francisco\nMI has the city Detroit\nOR has the city Portland\nNY has the city New York\n\n\n\n\n\nNow do both at the same time.\n\n\n\n\nprint \nEnumerate both dictionaries...\n\nfor state, abbrev in states.items():\n    print \n%s state is abbreviated %s and has city %s\n % (state, abbrev, cities[abbrev])\n# state California gives abbrev CA, inside cities gives San Francisco   \n\n\n\n\nEnumerate both dictionaries...\nCalifornia state is abbreviated CA and has city San Francisco\nMichigan state is abbreviated MI and has city Detroit\nNew York state is abbreviated NY and has city New York\nFlorida state is abbreviated FL and has city Jacksonville\nOregon state is abbreviated OR and has city Portland\n\n\n\n\n\nget()\n seek a key, whether it exists or not.\n\n\n\n\nstate = states.get('Texas') # extract\n\nif not state:\n    print \nSorry, no Texas.\n\n\n\n\n\nSorry, no Texas.\n\n\n\n\n\nGet a city with a default value.\n\n\n\n\ncity = cities.get('TX', 'Does Not Exist')\nprint \nThe city for the state 'TX' is: %s\n % city\n\n\n\n\nThe city for the state 'TX' is: Does Not Exist\n\n\n\n\n\nLet\ns step up the above operations.\n\n\nModule \nhashmap.py\n works through a dictionary. \n\n\nModule \nex39_test.py\n contains dictionaries (just like the above).\n\n\nIn Python, we would run module \nex39_test.py\n. \n\n\nThe module would begin by importing module \nhashmap.py\n to use its methods and perform operations.\n\n\nConsult the manual.\n\n\n\n\nExercise 40, Modules, Classes, and Objects\n\n\nmystuff = {'apple': 'I AM APPLES'}\n\nprint mystuff['apple'] # get X from Y\n\n\n\n\nI AM APPLES\n\n\n\n\n\nYou can import a file with functions and variables from a another module.\n\n\nYou can access the functions (methods) and variables from this other module.\n\n\nBoth files must be in the same directory, otherwise, specify the path as well.\n\n\n\n\n# %load ex40.py\ndef apple():\n\n    print \nI AM APPLES!\n\n\n# this is just a variable\ntangerine = \nLiving reflection of a dream\n\n\napple()\n\n\n\n\n%run ex40.py\n\n\n\n\nI AM APPLES!\n\n\n\nimport ex40\n\nex40.apple()\n\nprint ex40.tangerine\n\n\n\n\nI AM APPLES!\nLiving reflection of a dream\n\n\n\nmystuff['new'] = ex40.tangerine\n\nprint mystuff['new']\n\n\n\n\nLiving reflection of a dream\n\n\n\nimport ex40\n\nthing = ex40\n\nthing.apple()\nprint thing.tangerine\n\n\n\n\nI AM APPLES!\nI AM APPLES!\nLiving reflection of a dream\n\n\n\n\n\nUse a class instead of an imported module.\n\n\nRemember: class method = class function.\n\n\n\n\nclass Song(object):\n\n\n    def __init__(self, lyrics): # instantiation and shortcut for a creating a variable\n        self.lyrics = lyrics # the variable could be equal to a text, a number or a variable\n\n    def sing_me_a_song(self): # create a class function\n        for line in self.lyrics:\n            print line\n\n\n# instance            \nhappy_bday = Song([\nHappy birthday to you\n,\n                   \nI don't want to get sued\n,\n                   \nSo I'll stop right there\n])\n\n# instance\nbulls_on_parade = Song([\nThey rally around tha family\n,\n                        \nWith pockets full of shells\n])\n\n# instance\nau_clair = Song([\nAu clair de la lune\n,\n                 \nMon ami Pierrot\n,\n                 \nPrete-moi ta plume\n,\n                 \nPour ecrire un mot\n])\n\n# not an instance!!!\nfrere_jacques = [\nFrere Jacques (bis)\n,\n                 \nDormez-vous (bis)\n,\n                 \nSonnez les matines (bis)\n,\n                 \nDing-din-don (bis)\n]\n\n# instance\nfrere = Song([\nFrere Jacques (bis)\n,\n              \nDormez-vous (bis)\n,\n              \nSonnez les matines (bis)\n,\n              \nDing-din-don (bis)\n])\n\n\n# not a class function\ndef chante_moi(paroles): # create a function\n\n    for ligne in paroles:\n        print ligne\n\n\n\n\n\n\nInvoke an instance.\n\n\n\n\nhappy_bday.sing_me_a_song()\n\n\n\n\nHappy birthday to you\nI don't want to get sued\nSo I'll stop right there\n\n\n\n\n\nAgain.\n\n\n\n\nbulls_on_parade.sing_me_a_song()\n\n\n\n\nThey rally around tha family\nWith pockets full of shells\n\n\n\nWrite \ninstance.class function\n/\ninstance.class method\n\n\nau_clair.sing_me_a_song()\n\n\n\n\nAu clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot\n\n\n\n\n\nWrite the method the other around: \nClass.class_function()\n/\nClass.class_method()\n.\n\n\n\n\n#au_clair.sing_me_a_song()\nSong.sing_me_a_song(au_clair)\n\n\n\n\nAu clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot\n\n\n\n\n\nThis function is independent.\n\n\nfrere_jacques.chante_moi()\n can\nt be!!!\n\n\n\n\nchante_moi(frere_jacques)\n\n\n\n\nFrere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)\n\n\n\n\n\nIt looks like \nClass.class_function()\n/\nClass.class_method()\n\n\n\n\nSong.sing_me_a_song(frere)\n\n\n\n\nFrere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)\n\n\n\nExercise 41, Learning to Speak Object-Oriented\n\n\n\n\nObject-oriented programming (oop).\n\n\nThe script below (\nex41.py\n) imports a word list from a text file (\nex41_words.txt\n).\n\n\nThe script is a drill for learning oop.\n\n\n\n\nimport random\nimport sys\n\n## WORD_URL = \nhttp://learncodethehardway.org/words.txt\n # read a file http://learncodethehardway.org/words.txt\nWORD_TXT = \nex41_words.txt\n\nWORDS = []\n\n# dictionary {\nPython\n: \nEnglish\n}\nPHRASES = {\n    \nclass %%%(%%%):\n:\n        \nMake a class named %%% that is-a %%%.\n,\n    \nclass %%%(object):\\n\\tdef __init__(self, ***):\n:\n        \nclass %%% has-a __init__ that takes self and *** parameters.\n,\n    \nclass %%%(object):\\n\\tdef ***(self, @@@):\n:\n        \nclass %%% has-a function named *** that takes self and @@@ parameters.\n,\n    \n*** = %%%()\n:\n        \nSet *** to an instance of class %%%.\n,\n    \n***.***(@@@)\n:\n        \nFrom *** get the *** function, and call it with parameters self, @@@.\n,\n    \n***.*** = '***'\n:\n        \nFrom *** get the *** attribute and set it to '***'.\n\n}\n\n# do they want to drill phrases first\nif len(sys.argv) == 2 and sys.argv[1] == \nEnglish\n:\n    PHRASE_FIRST = True\nelse:\n    PHRASE_FIRST = False\n\n# load up the words from the website\n## for word in urlopen(WORD_URL).readlines():\nfor word in open(WORD_TXT, \nr\n).readlines():\n    WORDS.append(word.strip())\n\ndef convert(snippet, phrase): # 'list comprehension', reseach on the Internet\n\n    class_names = [w.capitalize() for w in\n                    random.sample(WORDS, snippet.count(\n%%%\n))]\n    other_names = random.sample(WORDS, snippet.count(\n***\n))\n    results = []\n    param_names = []\n\n    for i in range(0, snippet.count(\n@@@\n)):\n        param_count = random.randint(1,3)\n        param_names.append(', '.join(random.sample(WORDS, param_count)))\n\n    for sentence in snippet, phrase:\n        result = sentence[:]\n\n        # fake class names\n        for word in class_names:\n            result = result.replace(\n%%%\n, word, 1)\n\n        # fake other names\n        for word in other_names:\n            result = result.replace(\n***\n, word, 1)\n\n        # fake parameter lists\n        for word in param_names:\n            result = result.replace(\n@@@\n, word, 1)\n\n        results.append(result)\n\n    return results\n\n# keep going until until they hit CTRL-D\ntry:\n    while True:\n        snippets = PHRASES.keys()\n        random.shuffle(snippets)\n\n        for snippet in snippets:\n            phrase = PHRASES[snippet]\n            question, answer = convert(snippet, phrase)\n            if PHRASE_FIRST:\n                question, answer = answer, question\n\n            print question\n\n            raw_input(\n \n)\n            print \nANSWER: %s\\n\\n\n % answer\nexcept EOFError:\n    print \n\\nBye\n\n\n\n\n\nalarm.deer(disgust, brass)\n\n deer is a Class alarm function that takes arguments digust and brass\nANSWER: From alarm get the deer function, and call it with parameters self, disgust, brass.\n\nclass Building(Blood):\n\n etc\nANSWER: Make a class named Building that is-a Blood.\n\nbucket = Berry()\n\n\n\n\n\n\n\nSample of the original word list, 10 out of 503:\n\n\ntext\naccount\nachiever\nactor\naddition\nadjustment\nadvertisement\nadvice\naftermath\nagreement\nairplane\n\n\n\n\n\n\n\nSame script, but the list of word comes  from the Internet.\n\n\n\n\nA note on the script:\n\n\nThe use of constant variable such as WORD_URL (such variable should not be modified).\n\n\nA constant variable can be anything from a number, a string to a dictionary.\n\n\nThe use of \ntry/except\n pair to check for errors. It is similar to the pair \nif/else\n.\n\n\nTherea are several types of errors. \nEOFError\n is just one type. Consult other (or online) manuals to find out about all the types of errors.\n\n\n\n\n\n\n\n\nimport random\nfrom urllib import urlopen\nimport sys\n\nWORD_URL = \nhttp://learncodethehardway.org/words.txt\n # read a file\nWORDS = []\n\n# dictionary {\nPython\n: \nEnglish\n}\nPHRASES = {\n    \nclass %%%(%%%):\n:\n        \nMake a class named %%% that is-a %%%.\n,\n    \nclass %%%(object):\\n\\tdef __init__(self, ***)\n:\n        \nclass %%% has-a __init__ that takes self and *** parameters.\n,\n    \nclass %%%(object):\\n\\tdef ***(self, @@@)\n:\n        \nclass %%% has-a function named *** that takes self and @@@ parameters.\n,\n    \n*** = %%%()\n:\n        \nSet *** to an instance of class %%%.\n,\n    \n***.***(@@@)\n:\n        \nFrom *** get the *** function, and call it with parameters self, @@@.\n,\n    \n***.*** = '***'\n:\n        \nFrom *** get the *** attribute and set it to '***'.\n\n}\n\n# do they want to drill phrases first\nif len(sys.argv) == 2 and sys.argv[1] == \nEnglish\n:\n    PHRASE_FIRST = True\nelse:\n    PHRASE_FIRST = False\n\n# load up the words from the website\nfor word in urlopen(WORD_URL).readlines():\n    WORDS.append(word.strip())\n\ndef convert(snippet, phrase): # 'list comprehension', reseach on the Internet\n\n    class_names = [w.capitalize() for w in\n                    random.sample(WORDS, snippet.count(\n%%%\n))]\n    other_names = random.sample(WORDS, snippet.count(\n***\n))\n    results = []\n    param_names = []\n\n    for i in range(0, snippet.count(\n@@@\n)):\n        param_count = random.randint(1,3)\n        param_names.append(', '.join(random.sample(WORDS, param_count)))\n\n    for sentence in snippet, phrase:\n        result = sentence[:]\n\n        # fake class names\n        for word in class_names:\n            result = result.replace(\n%%%\n, word, 1)\n\n        # fake other names\n        for word in other_names:\n            result = result.replace(\n***\n, word, 1)\n\n        # fake parameter lists\n        for word in param_names:\n            result = result.replace(\n@@@\n, word, 1)\n\n        results.append(result)\n\n    return results\n\n# keep going until until they hit CTRL-D\ntry:\n    while True:\n        snippets = PHRASES.keys()\n        random.shuffle(snippets)\n\n        for snippet in snippets:\n            phrase = PHRASES[snippet]\n            question, answer = convert(snippet, phrase)\n            if PHRASE_FIRST:\n                question, answer = answer, question\n\n            print question\n\n            raw_input(\n \n)\n            print \nANSWER: %s\\n\\n\n % answer\nexcept EOFError:\n    print \n\\nBye\n\n\n\n\n\nExercise 42, Is-A, Has-A, Objects, and Classes\n\n\n\n\nThis exercise explains Exercise 41.\n\n\n\n\nInheritance:\n\n\n\n\nis-a.\n\n\nobject.\n\n\ninstance of an object.\n\n\nobject of object.\n\n\n\n\n\n\nhas-a.\n\n\nattribute.\n\n\nnot attribute.\n\n\nobject.\n\n\n\n\n\n\n\n\n\n\n\n\nAnimal is-a object.\n\n\n\n\n\n\nclass Animal(object):\n\n\n    pass\n\n\n\n\n\n\nDog is-a Animal, Animal is-a object.\n\n\n\n\nclass Dog(Animal):\n\n\n    def __init__(self, name):\n\n    ## Cat has-a name\n        self.name = name\n\n\n\n\n\n\nCat is-a Animal, Animal is-a object.\n\n\n\n\nclass Cat(Animal):\n\n\n    def __init__(self, name):\n    ## Cat has-a name\n        self.name = name\n\n\n\n\n\n\n\nPerson is-a object.\n\n\n\n\nclass Person(object):\n\n\n    def __init__(self, name):\n\n    ## Person has-a name\n        self.name = name\n\n    ## Person has-a pet of some kind, but the pet is specifies elsewhere...\n        self.pet = None\n\n\n\n\n\n\nEmployee is-a Person, Person is-a object.\n\n\n\n\nclass Employee(Person):\n\n\n    def __init__(self, name, salary):\n\n    ## Employee has-a name, because Person has-a name\n    ## super:\n        super(Employee, self).__init__(name)\n    ## Employee has-a salary\n        self.salary = salary\n\n\n\n\n\n\n\nFish is-a object.\n\n\n\n\nclass Fish(object):\n\n\n    ## no attributes like has-a name\n    pass\n\n\n\n\n\n\nSalmon is-a Fish, Fish is-a object.\n\n\n\n\nclass Salmon(Fish):\n\n\n    ## no attributes like has-a name\n    pass\n\n\n\n\n\n\nHalibut is-a Fish, Fish is-a object.\n\n\n\n\nclass Halibut(Fish):\n\n\n    ## no attributes like has-a name\n    pass\n\n\n\n\n\n\n\nrover is-a instance of name, Dog has-a name.\n\n\n\n\nrover = Dog(\nRover\n)\n\n\n\n\n\n\nsatan is-a instance of name, Cat has-a name.\n\n\n\n\nsatan = Cat(\nSatan\n)\n\n\n\n\n\n\nmary is-a instance of name, Person has-a name.\n\n\n\n\nmary = Person(\nMary\n)\n\n\n\n\n\n\nmary has-a Cat, Cat has-a name, satan, is-a Cat.\n\n\n\n\nmary.pet = satan\n\n\n\n\n\n\nfrank is-a instance of name, salary, Employee has-a name, salary.\n\n\n\n\nfrank = Employee(\nFrank\n, 120000)\n\n\n\n\n\n\nfrank has-a Dog, Dog has-a name, rover, is-a Dog.\n\n\n\n\nfrank.pet = rover\n\n\n\n\n\n\nflipper is-a instance of Fish, Fish is-a object, both has-a not attributes.\n\n\n\n\nflipper = Fish()\n\n\n\n\n\n\ncrouse is-a instance of Salmon, Salmon is-a Fish; both has-a not attribute.\n\n\n\n\ncrouse = Salmon()\n\n\n\n\n\n\nharry is-a instance of Halibut, Halibut is-a Fish; both has-a not attribute.\n\n\n\n\nharry = Halibut()\n\n\n\n\n\n\nWrap-up.\n\n\n\n\nobject\n    class Fish(object)\n        class Salmon(Fish)\n            crouse = Salmon()\n        class Halibut(Fish)\n            harry = Halibut()\n        flipper = Fish()\n    class Animal(object)\n        class Dog(Animal)\n            rover = Dog(\nRover\n) has-a name\n        class Cat(Animal)\n            satan = Cat(\nSatan\n) has-a name\n    class Person(object)\n        mary.pet = satan has-a name, pet\n        class Employee(Person)\n            frank = Employee (\nFrank\n, 120000) has-a name, salary\n            frank.pet = rover has-a pet\n\n\n\n\n\n\nThe concept of inheritance, and those of implicit inheritance, overridden inheritance, multiple inheritance, composition, alteration, super objects (or \nreinheritance\n) are explained in Exercise 44.\n\n\n\n\nExercise 43, Gothons from Planet Percal #25\n\n\nThis Exercise is the first to prepare the final project (Exercise 52, the last chapter). Let\ns create a game, from A to Z. First, start by planning. This methodology is valuable for planning any kind of project or program.\n\n\nMethodology\n\n\n1- Write about the problem:\n\n\nAliens have invaded a space ship and our hero has to go through a maze of rooms defeating them so he can escape into an escape pod to the planet below. The game will be more like a Zork or Adventure type game with text outputs and funny ways to die. The game will involve an engine that runs a map full of rooms or scenes. Each room will print its own description when the player enters it and then tell the engine what room to run next out of the map.\n\n\n2- Describe each scene:\n\n\n\n\nDeath\n\n\nThis is when the player dies and should be something funny.\n\n\n\n\n\n\nCentral Corridor\n\n\nThis is the starting point and has a Gothon already standing there they have to defeat with a joke before continuing.\n\n\n\n\n\n\nLaser Weapon Armory\n\n\nThis is where the hero gets a neutron bomb to blow up the ship before getting to the escape pod. It has a keypad the hero has to guess the number for.\n\n\n\n\n\n\nThe Bridge\n\n\nAnother battle scene with a Gothon where the hero places the bomb.\n\n\n\n\n\n\nEscape Pod\n\n\nWhere the hero escapes but only after guessing the right escape pod. \n\n\n\n\n\n\n\n\n3- Draw a map, write more descriptions.\n\n\n4- Extract key concepts:\n\n\n\n\n1 concept = 1 class.\n\n\nResearch them, deepen things.\n\n\nNouns = concepts = classes:\n\n\nAlien\n\n\nPlayer\n\n\nShip\n\n\nMaze\n\n\nRoom\n\n\nScene\n\n\nGothon\n\n\nEscape Pod\n\n\nPlanet\n\n\nMap\n\n\nEngine\n\n\nDeath\n\n\nCentral Corridor\n\n\nLaser Weapon Armory\n\n\nThe Bridge\n\n\n\n\n\n\nVerbs = functions.\n\n\n\n\nThis is par the PEP: classes should be in an explicit noun startin with a uppercased letter such as \nclass Central Corridor()\n. Functions should be verbs such as \ndef play():\n.\n\n\n5- Create a class Hierarchy and object Map\n\n\n\n\nMake a class Hierarchy:\n\n\nMap\n\n\nEngine\n\n\nScene\n\n\nDeath\n\n\nCentral Corridor\n\n\nLaser Weapon Armory\n\n\nThe Bridge\n\n\nEscape Pod\n\n\n\n\n\n\n\n\nPEP: I know from the description I\nm going to need a way to \nrun\n the engine, \nget the next scene\n from the map, get the \nopening scene\n, and \nenter\n a scene. I\nll add those like this:\n\n\n\n\nMap\n\n\nnext_scene\n\n\nopening_scene\n\n\nEngine\n\n\nplay\n\n\nScene\n\n\nenter\n\n\nDeath\n\n\nCentral Corridor\n\n\nLaser Weapon Armory\n\n\nThe Bridge\n\n\nEscape Pod\n\n\n\n\nAll the scenes under another scene will inherit it; except \nenter\n: override it later.\n\n\n6- Code the Classes and a Test to Run Them:\n\n\n\n\nTurn:\n\n\n\n\n- Map\n    - next_scene (verb)\n    - opening scene (verb)\n- Engine\n    - play (verb)\n- Scene\n    - enter (verb)\n    - Death\n    - Central Corridor\n    - Laser Weapon Armory\n    - The Bridge\n    - Escape Pod\n\n\n\n\n\n\nInto:\n\n\n\n\nclass Map(object): \n    def __init__(self, start_scene):\n    def next_scene(self, start_scene):    \n    def opening_scene(self):\n\nclass Engine(object): \n    def __init__(self, scene_map):\n    def play(self):\n\nclass Scene(object):\n    def enter(self):\n\n    class CentralCorridor(Scene):\n        def enter(self):\n    class LaserWeaponArmory(Scene):\n        def enter(self):\n    class TheBridge(Scene):\n        def enter(self):\n    class EscapePod(Scene):\n        def enter(self):\n    class Death(Scene):\n        def enter(self):\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()\n\n\n\n\n\n\nInto:\n\n\n\n\nclass Scene(object):\n\n    def enter(self):\n        pass\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map):\n        pass\n    def play(self):\n        pass\n\n\nclass Death(Scene):\n\n    def enter(self):\n        pass\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self):\n        pass\n\n\n    def enter(self):\n        pass\n\n\nclass TheBridge(Scene):\n    def enter(self):\n        pass\n\n\nclass EscapePod(Scene):\n\n    def enter(self):\n        pass\n\n\nclass Map(object):\n\n    def __init__(self, start_scene):\n        pass\n    def next_scene(self, scene_name):\n        pass\n    def opening_scene(self):\n        pass\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()\n\n\n\n\n\n\nStart coding (first code skeleton).\n\n\n\n\nclass Scene(object):\n\n\n    def enter(self):\n\n        pass\n\nclass Engine(object):\n\n\n    def __init__(self, scene_map):\n\n        pass\n\n    def play(self):\n\n        pass\n\n\nclass Death(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass CentralCorridor(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass LaserWeaponArmory(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass TheBridge(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass EscapePod(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass Map(object):\n\n\n    def __init__(self, start_scene):\n\n        pass\n\n    def next_scene(self, scene_name):\n\n        pass\n\n    def opening_scene(self):\n\n        pass\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()\n\n\n\n\n\n\nImprove the code.\n\n\n\n\n# import two functions from two libraries\nfrom sys import exit\nfrom random import randint\n\n# class to generate child classes\nclass Scene(object):\n\n    def enter(self):\n\n        print \nThis scene is not yet configured. Subclass it and implement enter().\n\n        exit(1)\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map):\n\n        self.scene_map = scene_map\n\n    def play(self):\n\n        current_scene = self.scene_map.opening_scene() # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below\n\n        last_scene = self.scene_map.next_scene('finished') # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below\n\n        while current_scene != last_scene:\n\n            next_scene_name = current_scene.enter() # function/method from class Scene(object) above\n\n            current_scene = self.scene_map.next_scene(next_scene_name) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object)\n\n        current_scene.enter() # use newly-created current_scene with function/method from class Scene(object) above\n\n\nclass Death(Scene):\n\n    quips = [\nYou died.  You kinda suck at this.\n, \nYour mom would be proud...if she were smarter.\n, \nSuch a louser.\n, \nI have a small puppy that's better at this.\n] # a list (variable) where a random method will extract an element\n\n    def enter(self):\n\n        print Death.quips[randint(0, len(self.quips)-1)] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list)\n        exit(1)\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \nThe Gothons of Planet Percal #25 have invaded your ship and destroyed\n\n        print \nyour entire crew.  You are the last surviving member and your last\n\n        print \nmission is to get the neutron destruct bomb from the Weapons Armory,\n\n        print \nput it in the bridge, and blow the ship up after getting into an \n\n        print \nescape pod.\n\n        print \n\\n\n\n        print \nYou're running down the central corridor to the Weapons Armory when\n\n        print \na Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume\n\n        print \nflowing around his hate filled body.  He's blocking the door to the\n\n        print \nArmory and about to pull a weapon to blast you.\n\n\n        action = raw_input(\nshoot!/dodge!/tell a joke\n \n) \n\n        if action == \nshoot!\n:\n            print \nQuick on the draw you yank out your blaster and fire it at the Gothon.\n\n            print \nHis clown costume is flowing and moving around his body, which throws\n\n            print \noff your aim.  Your laser hits his costume but misses him entirely.  This\n\n            print \ncompletely ruins his brand new costume his mother bought him, which\n\n            print \nmakes him fly into an insane rage and blast you repeatedly in the face until\n\n            print \nyou are dead.  Then he eats you.\n\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \ndodge!\n:\n            print \nLike a world class boxer you dodge, weave, slip and slide right\n\n            print \nas the Gothon's blaster cranks a laser past your head.\n\n            print \nIn the middle of your artful dodge your foot slips and you\n\n            print \nbang your head on the metal wall and pass out.\n\n            print \nYou wake up shortly after only to die as the Gothon stomps on\n\n            print \nyour head and eats you.\n\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \ntell a joke\n:\n            print \nLucky for you they made you learn Gothon insults in the academy.\n\n            print \nYou tell the one Gothon joke you know:\n\n            print \nLbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr.\n\n            print \nThe Gothon stops, tries not to laugh, then busts out laughing and can't move.\n\n            print \nWhile he's laughing you run up and shoot him square in the head\n\n            print \nputting him down, then jump through the Weapon Armory door.\n\n            return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        else:\n            print \nDOES NOT COMPUTE!\n\n            return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass LaserWeaponArmory(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \nYou do a dive roll into the Weapon Armory, crouch and scan the room\n\n        print \nfor more Gothons that might be hiding.  It's dead quiet, too quiet.\n\n        print \nYou stand up and run to the far side of the room and find the\n\n        print \nneutron bomb in its container.  There's a keypad lock on the box\n\n        print \nand you need the code to get the bomb out.  If you get the code\n\n        print \nwrong 10 times then the lock closes forever and you can't\n\n        print \nget the bomb.  The code is 3 digits.\n\n        code = \n%d%d%d\n %(1,2,3) #% (randint(1,9), randint(1,9), randint(1,9))\n        guess = raw_input(\n[keypad]\n \n)\n        guesses = 0\n\n        while guess != code and guesses \n 10:\n            print \nBZZZZEDDD!\n\n            guesses += 1\n            guess = raw_input(\n[keypad]\n \n)\n\n        if guess == code:\n            print \nThe container clicks open and the seal breaks, letting gas out.\n\n            print \nYou grab the neutron bomb and run as fast as you can to the\n\n            print \nbridge where you must place it in the right spot.\n\n            return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \nThe lock buzzes one last time and then you hear a sickening\n\n            print \nmelting sound as the mechanism is fused together.\n\n            print \nYou decide to sit there, and finally the Gothons blow up the\n\n            print \nship from their ship and you die.\n\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass TheBridge(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \nYou burst onto the Bridge with the netron destruct bomb\n\n        print \nunder your arm and surprise 5 Gothons who are trying to\n\n        print \ntake control of the ship.  Each of them has an even uglier\n\n        print \nclown costume than the last.  They haven't pulled their\n\n        print \nweapons out yet, as they see the active bomb under your\n\n        print \narm and don't want to set it off.\n\n\n        action = raw_input(\nthrow the bomb/slowly place the bomb\n \n)\n\n        if action == \nthrow the bomb\n:\n            print \nIn a panic you throw the bomb at the group of Gothons\n\n            print \nand make a leap for the door.  Right as you drop it a\n\n            print \nGothon shoots you right in the back killing you.\n\n            print \nAs you die you see another Gothon frantically try to disarm\n\n            print \nthe bomb. You die knowing they will probably blow up when\n\n            print \nit goes off.\n\n            return 'death'\n\n        elif action == \nslowly place the bomb\n:\n            print \nYou point your blaster at the bomb under your arm\n\n            print \nand the Gothons put their hands up and start to sweat.\n\n            print \nYou inch backward to the door, open it, and then carefully\n\n            print \nplace the bomb on the floor, pointing your blaster at it.\n\n            print \nYou then jump back through the door, punch the close button\n\n            print \nand blast the lock so the Gothons can't get out.\n\n            print \nNow that the bomb is placed you run to the escape pod to\n\n            print \nget off this tin can.\n\n            return 'escape_pod'\n        else:\n            print \nDOES NOT COMPUTE!\n\n            return \nthe_bridge\n # input for class Map(object)'s dictionary of key:value; extract a function from another class    \n\n\nclass EscapePod(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \nYou rush through the ship desperately trying to make it to\n\n        print \nthe escape pod before the whole ship explodes.  It seems like\n\n        print \nhardly any Gothons are on the ship, so your run is clear of\n\n        print \ninterference.  You get to the chamber with the escape pods, and\n\n        print \nnow need to pick one to take.  Some of them could be damaged\n\n        print \nbut you don't have time to look.  There's 5 pods, which one\n\n        print \ndo you take?\n\n\n        good_pod = 1#randint(1,5)\n        guess = raw_input(\n[pod #]\n \n)\n\n        if int(guess) != good_pod:\n            print \nYou jump into pod %s and hit the eject button.\n % guess\n            print \nThe pod escapes out into the void of space, then\n\n            print \nimplodes as the hull ruptures, crushing your body\n\n            print \ninto jam jelly.\n\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \nYou jump into pod %s and hit the eject button.\n % guess\n            print \nThe pod easily slides out into space heading to\n\n            print \nthe planet below.  As it flies to the planet, you look\n\n            print \nback and see your ship implode then explode like a\n\n            print \nbright star, taking out the Gothon ship at the same\n\n            print \ntime.  You won!\n\n            return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Finished(Scene):\n\n    def enter(self):\n\n        print \nYou won! Good job.\n\n        return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Map(object):\n\n    scenes = {\n        'central_corridor': CentralCorridor(),\n        'laser_weapon_armory': LaserWeaponArmory(),\n        'the_bridge': TheBridge(),\n        'escape_pod': EscapePod(),\n        'death': Death(),\n        'finished': Finished(),\n    }\n\n    def __init__(self, start_scene):\n\n        self.start_scene = start_scene\n\n    def next_scene(self, scene_name):\n\n        val = Map.scenes.get(scene_name)\n        return val\n\n    def opening_scene(self):\n\n        return self.next_scene(self.start_scene)\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()\n\n\n\n\n\n\nImprove\n\n\n\n\n# import two functions from two libraries\nfrom sys import exit\nfrom random import randint\nimport time\nimport math\n\n# class to generate child classes\nclass Scene(object):\n\n    def enter(self):\n\n        print \nThis scene is not yet configured. Subclass it and implement enter().\n\n        exit(1)\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map, hero):\n\n        self.scene_map = scene_map\n        self.hero = hero\n\n    def play(self):\n\n        current_scene = self.scene_map.opening_scene() # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below\n\n        last_scene = self.scene_map.next_scene('finished') # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below\n\n        while current_scene != last_scene: # True:\n            print \n\\n----------\n\n            next_scene_name = current_scene.enter(self.hero) # function/method from class Scene(object) above\n\n            current_scene = self.scene_map.next_scene(next_scene_name) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object)\n\n        current_scene.enter() # use newly-created current_scene with function/method from class Scene(object) above\n\n\nclass Death(Scene):\n\n    quips = [\nDeath1\n, \nDeath2\n, \nDeath3\n, \nDeath4\n] # a list (variable) where a random method will extract an element\n\n    def enter(self, hero):\n\n        print Death.quips[randint(0, len(self.quips)-1)] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list)\n        exit(1)\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \nEnter. Select.\n\n        action = raw_input(\nPick one: a/b/c\n \n).upper() \n\n        if action == \nA\n:\n            print \nOuch!\n\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \nB\n:\n            print \nAye!\n\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action == \nC\n:\n            print \nGood.\n\n            return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        else:\n            print \nDOES NOT COMPUTE!\n\n            return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass LaserWeaponArmory(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \nPick a 3-digit combinaison.\n\n        code = \n%d%d%d\n %(1,2,3) #% (randint(1,9), randint(1,9), randint(1,9))\n        print code\n        guess = raw_input(\n[keypad]\n \n)\n        guesses = 0\n\n        while guess != code and guesses \n 10:\n            print \nBZZZZEDDD!\n\n            guesses += 1\n            guess = raw_input(\n[keypad]\n \n)\n\n        if guess == code:\n            print \nClick! Go!\n\n            return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \nBoom!\n\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass TheBridge(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \nBridge enigma.\n\n\n        action = raw_input(\ntrue/false\n \n).upper()\n\n        if action == \nTRUE\n or action == \nT\n:\n            print \nIt goes off.\n\n            return 'death'\n\n        elif action == \nFALSE\n or action == \nF\n:\n            print \nEscape.\n\n            return 'escape_pod'\n        else:\n            print \nDOES NOT COMPUTE!\n\n            return \nthe_bridge\n # input for class Map(object)'s dictionary of key:value; extract a function from another class    \n\n\nclass EscapePod(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print \nYou rush!\n\n\n        good_pod = 1 #randint(1,5)\n        guess = raw_input(\n[Pick a pod #]\n \n)\n\n        if int(guess) != good_pod:\n            print \nOups!\n\n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print \nGood choice!\n\n            return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Win(Scene):\n\n    def enter(self, hero):\n        print \nYou won! Good job.\n\n        return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        # exit(0)\n\n\nclass Final(Scene):\n\n    def enter(self, hero)\n\n        monster = Monster(\nGothon\n)\n        print \n%s, You now came across the final boss %s! Let's fight!!!\n % (hero.name, monster.name)\n        a_combat = Combat()\n        next_stage = a_combat.combat(hero, monster)\n        return next_stage\n\n\nclass Combat(object):\n\n    def combat(self, hero, monster): #combat between two roles\n\n        round = 1\n        while True:\n            print '='*30\n            print 'round %d' % round\n            print '='*30\n            print \nYour HP: %d\n % hero.hp\n            print \n%s's HP: %d\n % (monster.name, monster.hp)\n            print 'Which action do you want to take?'\n            print '-'*10\n            print '1) attack - Attack the enemy'\n            print '2) defend - Defend from being attacked, also will recover a bit'\n\n            try:\n                action = int(raw_input('\n '))\n            except ValueError:\n                print \nPlease enter a number!!\n\n                continue\n\n            # defending should be done before attacking\n            if action == 2:\n                hero.defend()\n\n            # action of monster, 1/5 possibility it will defends\n            monster_action = randint(1, 6)\n            if monster_action == 5:\n                monster.defend()\n\n            if action == 1:\n                hero.attack(monster)\n            elif action == 2:\n                pass\n            else:\n                print \nNo such action!\n\n\n            if monster_action \n 5:\n                monster.attack(hero)\n\n            # whether win or die\n            if hero.hp \n= 0:\n                return 'death'\n\n            if monster.hp \n= 0:\n                return 'win'\n\n            hero.rest()\n            monster.rest()\n\n            round += 1\n\n\nclass Map(object):\n\n    scenes = {\n        'central_corridor': CentralCorridor(),\n        'laser_weapon_armory': LaserWeaponArmory(),\n        'the_bridge': TheBridge(),\n        'escape_pod': EscapePod(),\n        'death': Death(),\n        'final_fight': Final(),\n        'win': Win(),\n        'finished': Finished(),\n    }\n\n    def __init__(self, start_scene):\n\n        self.start_scene = start_scene\n\n    def next_scene(self, scene_name):\n\n        val = Map.scenes.get(scene_name)\n        return val\n\n    def opening_scene(self):\n\n        return self.next_scene(self.start_scene)\n\n\nclass human(object):\n\n    defending = 0\n\n    def __init__(self, name):\n\n        self.name = name\n\n    def attack(self, target): # attack the target\n\n        percent = 0\n        time.sleep(1)\n        if target.defending == 1:\n            percent = float(self.power) / 10.0 + randint(0, 10)\n            target.hp = math.floor(target.hp - percent)\n        else:\n            percent = float(self.power) / 5.0 + randint(0, 10)\n            target.hp = math.floor(target.hp - percent)\n        print \n%s attack %s. %s's HP decreased by %d points.\n % (self.name, target.name, target.name, percent)\n\n    def defend(self): # be in the defending state\n\n        self.defending = 1\n        print \n%s is trying to defend.\n % self.name\n\n    def rest(self): # recover a bit after each round\n\n        if self.defending == 1:\n            percent = self.rate * 10 + randint(0, 10)\n        else:\n            percent = self.rate * 2 + randint(0, 10)\n        self.hp += percent\n        print \n%s's HP increased by %d after rest.\n % (self.name, percent)\n        self.defending = 0\n\n\nclass Hero(Human): # class for hero\n\n    hp = 1000\n    power = 200\n    rate = 5\n\n\nclass Monster(Human): # class for monster\n\n    hp = 5000\n    power = 250\n    rate = 5\n\n\na_map = Map('central_corridor')\na_hero = Hero('Joe')\na_game = Engine(a_map)\na_game.play()\n\n\n\n\nWrap up\n\n\n\n\nDraw a mindmap.\n\n\nDraw a flowchart.\n\n\nList all variables, data, other objects and add comments.\n\n\nBuild the modules (classes) and embed the primal code.\n\n\nRefine.\n\n\nUse a visualizing software.\n\n\n\n\nExercise 44, Inheritance vs Composition\n\n\nFrom the manual.\n\n\nWhen to Use Inheritance or Composition\n\n\nThe question of \ninheritance versus composition\n comes down to an attempt to solve the problem of reusable code. \n\n\nYou don\nt want to have duplicated code all over your software, since that\ns not clean and efficient. \n\n\n\n\nInheritance: solves this problem by creating a mechanism for you to have implied features in base classes.\n\n\nComposition: solves this by giving you modules and the ability to call functions in other classes.\n\n\n\n\nIf both solutions solve the problem of reuse, then which one is appropriate in which situations? The answer is incredibly subjective, but I\nll give you my three guidelines for when to do which:\n\n\n\n\nAvoid multiple Inheritance at all costs, as it\ns too complex to be reliable. If you\nre stuck with it, then be prepared to know the class hierarchy and spend time finding where everything is coming from.\n\n\nUse Composition to package code into modules that are used in many different unrelated places and situations.\n\n\nUse Inheritance only when there are clearly related reusable pieces of code that fit under a single common concept or if you have to because of something you\nre using.\n\n\n\n\nThe thing to remember about object-oriented programming is that it is entirely a social convention programmers have created to package and share code. In that case, find out how they use things and then just adapt to the situation.\n\n\nFunction Style\n\n\n pep\n\n\nFunction = Method.\n\n\nA class does things: name it as if it\ns a command you are giving to the class. Same as \npop\n is saying \npop this off the list\n.\n\n\nKeep functions small and simple (PEP).\n\n\nClass Style\n\n\n\n\nUse the camel case: \nSuperGoldFactory\n.\n\n\nMinimize what \n__init__\n does. It should be simple to use.\n\n\nOther class functions use the underscore format: \nmy_awesome_hair\n.\n\n\nBe consistent in how you organize your function arguments. Function 1 takes \n(dog, cat, user)\n, function 2 should take \n(dog, cat, user)\n. Unless there is a good reason.\n\n\nVariable should be self-contained. Limit importing from modules or globals.\n\n\nAlways have a class \nName(object)\n on top of all.\n\n\n\n\nCode Style\n\n\n\n\nGive your code vertical space to read.\n\n\nRead you code out loud to test it. Change the difficult passages to improve readibility.\n\n\nImitate other coders: find you style.\n\n\nRespect others\ns style; be a team player.\n\n\n\n\nGood Comments\n\n\n\n\nDescribe why you are doing doing what you are doing.\n\n\nWrite for the others.\n\n\nWrite sentences.\n\n\nAvoid clutering the code though. Short sentences, to the point.\n\n\nReview your comments.\n\n\n\n\nComposition\n\n\nIn this code I\nm not using the name Parent, since there is not a parent-child is-a relationship. This is a has-a relationship, where Child has-a Other that it uses to get its work done. \n\n\nclass Other(object):\n\n    def implicit(self):\n\n        print \nOTHER implicit()\n\n\n    def override(self):\n\n        print \nOTHER override()\n\n\n    def altered(self):\n\n        print \nOTHER altered()\n\n\n\nclass Child(object):\n\n    def __init__(self):\n\n        self.other = Other() # initialize this class with Other(), when an instance is created, it will inherit the class member variables, class functions...\n\n    def implicit(self):\n\n        self.other.implicit() # call the other class function \n\n    def override(self):\n\n        print \nCHILD override()\n\n\n    def altered(self):\n\n        print \nCHILD, BEFORE OTHER altered()\n\n        self.other.altered() # call the other class function\n        print \nCHILD, AFTER OTHER altered()\n\n\n\nson = Child() # instance\n\nson.implicit()\nson.override()\nson.altered()\n\n\n\n\nImplicit Inheritance\n\n\nActions on the child imply an action on the parent.\n\n\nThe use of pass under the \nclass Child:\n is how you tell Python that you want an empty block. This creates a class named \nChild\n but says that there\ns nothing new to define in it. Instead it will inherit all of its behavior from \nParent\n.\n\n\nIf you put functions in a base class (i.e., \nParent\n) then all subclasses (i.e., \nChild\n) will automatically get those features. Very handy for repetitive code you need in many classes.\n\n\nclass Parent(object):\n\n    def implicit(self):\n\n        print \nPARENT implicit()\n\n\n\nclass Child(Parent):\n\n    pass\n\n\ndad = Parent()\nson = Child()\n\n\n\n\nInherit from both Classes\n\n\nPython has to look-up the possible function in the class hierarchy for both \nChild\n and \nBadStuff\n, but it needs to do this in a consistent order. To do this Python uses \nmethod resolution order\n (MRO) and an algorithm called C3 to get it straight.\n\n\nBecause the MRO is complex and a well-defined algorithm is used, Python can\nt leave it to you to get the MRO right. Instead, Python gives you the \nsuper()\n function, which handles all of this for you in the places that you need the altering type of actions as I did in Child.altered. With \nsuper()\n you don\nt have to worry about getting this right, and Python will find the right function for you.\n\n\nclass SuperFun(Child, BadStuff):\n\n    pass\n\n\n\n\nOverride Explicitly\n\n\nActions on the child override the action on the parent.\n\n\nAs you can see, it runs the \nParent.override\n function because that variable (dad) is a Parent. But it also runs  \nChild.override\n messages because son is an instance of \nChild\n and \nChild\n overrides that function by defining its own version.\n\n\nclass Parent(object):\n\n    def override(self):\n        print \nPARENT override()\n\n\n\nclass Child(Parent):\n\n    def override(self):\n\n        print \nCHILD override()\n\n\n\ndad = Parent()\nson = Child()\n\ndad.override()\nson.override()\n\n\n\n\nAlter Before or After\n\n\nActions on the child alter the action on the parent.\n\n\nson.altered()\n overrides Parent.altered the \nChild.altered\n version runs, and line 9 executes like you\nd expect. In this case I want to do a before and after, I want to use super to get the \nParent.altered\n version. I call \nsuper(Child, self).altered()\n, which is aware of inheritance and will get the \nParent\n class for you. You should be able to read this as \ncall super with arguments \nChild\n and \nself\n, then call the function altered on whatever it returns.\n At this point, the \nParent.altered\n version of the function runs, and that prints out the Parent message. Finally, this returns from the \nParent.altered\n and the \nChild.altered\n function continues to print out the after message.\n\n\nclass Parent(object):\n\n    def altered(self):\n\n        print \nPARENT altered()\n\n\nclass Child(Parent):\n\n    def altered(self):\n\n        print \nCHILD, BEFORE PARENT altered()\n\n        super(Child, self).altered()\n        print \nCHILD, AFTER PARENT altered()\n\n\n\ndad = Parent()\nson = Child()\n\ndad.altered()\nson.altered()\n\n\n\n\nSuper\n\n\nWith \nsuper\n, \nChild\n reinherit from the \nParent\n.\n\n\nThe most common use of \nsuper()\n is actually in \n__init__\n functions in base classes. Then additional class functions.\n\n\nclass Child(Parent):\n\n    def __init__(self, stuff):\n\n        self.stuff = stuff\n        super(Child, self).__init__()\n\n\n\n\nAll Three Combined\n\n\nclass Parent(object):\n\n    def override(self):\n\n        print \nPARENT override()\n\n\n    def implicit(self):\n\n        print \nPARENT implicit()\n\n\n    def altered(self):\n\n        print \nPARENT altered()\n\n\n\nclass Child(Parent):\n\n    def override(self):\n\n        print \nCHILD override()\n\n\n    def altered(self):\n\n        print \nCHILD, BEFORE PARENT altered()\n\n        super(Child, self).altered()\n        print \nCHILD, AFTER PARENT altered()\n\n\n\ndad = Parent()\nson = Child()\n\ndad.implicit()\nson.implicit()\n\ndad.override()\nson.override()\n\ndad.altered()\nson.altered()\n\n\n\n\nExercise 45, You Make a Game\n\n\nUse an existing project, Exercise 43 for example, and adapt it. This is a first draft for a project\n\n\n1\n\n\nStoryboarding tool.\n\n\nCreate a program that would question the user on its data and advise him on what would be the best graphics to use. Frame by frame, the user could build a presentation knowing slide 1 should be a histogram, slide 2 a scatter plot, etc. \n\n\n2\n\n\n\n\nMap\n\n\nnext_graph\n\n\nopening comment (verb)\n\n\n\n\n\n\nEngine\n\n\nchoose (verb)\n\n\n\n\n\n\n\n\nGraph\n\n\n\n\nproceed (verb)\n\n\nCC pie\n\n\nIC bar\n\n\nTSC column, line\n\n\nFDC column, line\n\n\nCorC bar, dot\n\n\n\n\n\n\n\n\nopening comment\n\n\n\n\ngeneral comment\n\n\nstorytelling\n\n\npie\n\n\ncompare data, y, n\n\n\ny, stacked bar chart\n\n\nn, pie chart with a maximum of 6 items\n\n\n\n\n\n\nbar\n\n\nsimple series of data or items: h deviation bar chart (tornado), divide A from B (winners from losers, good markets from bad markets): h deviation bar chart (tornado), mix of two components (portfolio A items vs portfolio B items):sliding h bar chart, high-low spreads:range h bar chart, correlation x1 and x2 with y (two products, two markets\n with): paired bar chart, compare aspects (with or without discount, red or blue paint):group h bar chart, components of the total: subdivided h bar chart\n\n\n\n\n\n\ncolumn\n\n\np.37, 42\n\n\n\n\n\n\nline\n\n\np.39, 44-45\n\n\n\n\n\n\nsurface\n\n\np. 40\n\n\n\n\n\n\ndot\n\n\np.49\n\n\n\n\n\n\n\n\n3\n\n\n\n\nCreate module \n3graph_story\n (proof of concept).\n\n\nThe module presents a story in 3 graphs, according to 3 sets of data.\n\n\n\n\nclass Map(object):\n    def __init__(self,start):\n    def next(self, start):\n    def opening(self):\n\nclass Engine(object):\n    def __init__(self,graph_map):\n    def choose(self):\n\nclass Graph(object):\n    def proceed(self):\n\n    class 1CC(Graph):\n        def enter(self)\n            pie\n    class 2IC(Graph):\n        def enter(self):\n            bar\n    class 3TSC(Graph):\n        def enter(self):\n            column\n            line\n    class 4FDC(Graph):\n        def enter(self):\n            column\n            line\n    class 5CorC(Graph):\n        def enter(self):\n            bar\n            dot\n\n\n\n\nAnd so on. Consult the manual to find out more\n\n\nExercise 46, A Project Skeleton\n\n\n\n\nThe \nskeleton\n directory (see below) or the directory framework will have all the basics you need to get a new project up and running. \n\n\nIt will have your project layout, automated tests, modules, and install scripts.\n\n\n\n\n\\:.\n\u251c\u2500\u2500\u2500bin\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500docs\n\u251c\u2500\u2500\u2500NAME\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500tests\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u2514\u2500\u2500\u2500setup.py   \n\n\n\n\n\n\n\\:.\n is the project parent directory or simply \nthe\n directory (its name is the project\ns name).\n\n\nThe directory is the place to be when launching scripts.\n\n\nbin\n is the main sub-directory. It contains the main script (\npython bin/main.py\n) for launching other scripts in the project; and launching tests as well. These script are often located in other sub-directories.\n\n\nA sub-directory must be executable to import a module from it or execute a script in it: add an empty script called \n__init__.py\n.\n\n\nWhen a script is executed, it is compiled. Another script, with the extension \n.pyc\n, appears. Same as for \n__init__.pyc\n, as the sub-directory was executed (when a script import a script from another sub-directory for example).\n\n\ntests\n contains files to perform nose tests and unittests.\n\n\nsetup.py\n is for documenting and distributing the project (when the project is compiled to be launched as a whole or frozen to be distributed).\n\n\nYou can add a \nreadme\n file below (usually a text or markdown document).\n\n\nThe \ndocs\n sub-directory contains all the project\ns documentation. It is more elaborate than the \nreadme\n file: manuals, explanations, logs, wikis, etc.\n\n\nThere can be other sub-directories for static such as images, web languages, etc.\n\n\nRepeat this directory structure for every project.\n\n\nTo clean up the directory, in the bash:\n\n\n\n\nfind . -name \n*.pyc\n -print #display\nfind . -name \n*.pyc\n -exec rn{}\\; 1 remove\n\ngrep -r \nNAME\n * #search within files\n\n\n\n\n\n\nIn Linux, before running any script, be sure to set the path to the project directory. \n\n\nBash:\n\n\n\n\nexport PYTHONPATH=.\nexport PYTHONPATH=$PYTHONPATH:$PWD\n\nunset PYTHONPATH # to remove\n\n\n\n\n\n\nIn Windows, set the path in the environment variables. Otherwise, Python won\nt find the scripts.\n\n\nPowerShell:\n\n\n\n\n$env:PYTHONPATH = \n$env:PYTHONPATH;.\n\n\n\n\n\n\n\nOr, on top of the Python code, below the shebang lnes, and before any other imports, add:\n\n\n\n\nimport sys\nsys.path # to view\nsys.path.append('.') # to set\n\n\n\n\n\n\nConsult the manual to find out more.\n\n\n\n\nExercise 47, Automated Testing\n\n\nMiscellaneous notes\n\n\n\n\nThe project directory is \nex47\n.\n\n\nTest if you migrated the files correctly. In the bash:\n\n\n\n\ngrep -r NAME *  # no traces of 'NAME', from 'skeleton'\nfind . -name \n*.pyc\n -exec rm {} \\; # no trace of 'name'\n\n\n\n\n\n\nWhen you launch a script, you launch it from the parent directory with \npython bin/app.py\n.\n\n\nIn directory \nex47\n, run tests with \npython tests/BLAH_tests.py\n. \n\n\nConsult the manual about testing. This is not covered in this notebook. \n\n\nTesting must be done in the shell or in the bash. Make sure you\nre running the tests with nosetests not with just Python. \n\n\nThe important functions here are \nassert_equal\n which makes sure that variables you have set or paths you have built in a Room are actually what you think they are. If you get the wrong result, then nosetests will print out an error message so you can go figure it out.\n\n\nIn a script, when you import from another sub-directory, code:\n\n\n\n\nfrom ex47.game import Room\n\n\n\n\n\n\nWhen the imported script is in the same sub-directory, code:\n\n\n\n\nfrom bin import Room\n\n\n\n\n\n\nConsult the manual to find out more.\n\n\n\n\nExercise 50, Your First Website\n\n\nAn overview\n\n\n\n\nWeb framework for web projects.\n\n\nDjango (the real deal, but complicated), Flask (modest), Pyramid (scalable), etc.\n\n\nOr the simple, yet powerful enough, web.py.\n\n\nExercises, from 50 to 52, are done with web.p", 
            "title": "Learn Python the Hard Way"
        }, 
        {
            "location": "/Learn Python the Hard Way/#shorcuts-good-to-know", 
            "text": "In the terminal, type  pydoc  python item  to invoke the documentation on a python item (built-in functions, methods, objects, etc.).  ctrl+c  and/or  ctrl+d  break a loop.", 
            "title": "Shorcuts, Good to Know"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-3-numbers-and-math", 
            "text": "print, format, calculate  print  I will now count my chickens:   I will now count my chickens:  print  Hens , 25 + 30 / 6\nprint  Roosters , 100 - 25 * 3 % 4\n\nprint  Now I will count the eggs: \n\nprint 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6\n# copy 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 straight into the shell and run it\n# you will get the result only (don't add print before the statement)  Hens 30\nRoosters 97\nNow I will count the eggs:\n7  print  Is it true that 3 + 2   5 - 7 \nprint 3 + 2   5 - 7  Is it true that 3 + 2   5 - 7\nFalse  print  What is 3 + 2? , 3 + 2\nprint  What is 5 - 7? , 5 - 7  What is 3 + 2? 5\nWhat is 5 - 7? -2  print  Oh, that's why it's False. \nprint  How about some more.   Oh, that's why it's False.\nHow about some more.  print  Is it greater? , 5   -2\nprint  Is it greater or equal? , 5  = -2\nprint  Is it less or equal? , 5  = -2  Is it greater? True\nIs it greater or equal? True\nIs it less or equal? False  print (1 + 1) # integer  2  print (1.0 + 1) # float  2.0", 
            "title": "Exercise 3, Numbers and Math"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-4-variables-and-names", 
            "text": "cars = 100\nspace_in_a_car = 4.0 # float\ndrivers = 30\npassengers = 90\ncars_not_driven = cars - drivers\ncars_driven = drivers\ncarpool_capacity = cars_driven * space_in_a_car\naverage_passengers_per_car = passengers / cars_driven\n\nprint  There are , cars,  cars available. \nprint  There are only , drivers,  drivers available. \nprint  There will be , cars_not_driven,  empty cars today. \nprint  We can transport , carpool_capacity,  people today. \nprint  We have , passengers,  to carpool today. \nprint  We need to put about , average_passengers_per_car,  in each cars.   There are 100 cars available.\nThere are only 30 drivers available.\nThere will be 70 empty cars today.\nWe can transport 120.0 people today.\nWe have 90 to carpool today.\nWe need to put about 3 in each cars.   A constant variable, a variable that should never be altered, should be set in capital as  PI = 3.1416 .", 
            "title": "Exercise 4, Variables and Names"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-5-more-variables-and-printing", 
            "text": "Call a variable with:  %r ; raw variable.  %s ; string.  %d ; digit.    Make the choice depending on the variable type.  However, if calling a  string  (text, NLP), it must be done with  %s ;  numbers  is done with  %r  and  %d  (possibly with  %s ).   The use and effects of the different calls is explained in Exercises 6 and 21.   my_name = 'Zed A. Shaw'\nmy_age = 35 # not a lie\nmy_height = 74 # inches\nmy_weight = 180 # lbs\nmy_eyes = 'Blue'\nmy_teeth = 'White'\nmy_hair = 'Brown'\n\nprint  Let's talk about %s.  % my_name  Let's talk about Zed A. Shaw.  # does the same thing\nprint  He's %d years old.  %my_age\nprint  He's , my_age, years old. \nprint  He will be , my_age + 1, years old next year.   He's 35 years old.\nHe's 35 years old.\nHe will be 36 years old next year.  print  He's %d inches tall.  % my_height\nprint  He's %d pounds heavy  % my_weight\nprint  Actually that's not too heavy. \nprint  He's got %s eyes and %s hair.  % (my_eyes, my_hair)\nprint  His teeth are usually %s depending on the coffee.  % my_teeth  He's 74 inches tall.\nHe's 180 pounds heavy\nActually that's not too heavy.\nHe's got Blue eyes and Brown hair.\nHis teeth are usually White depending on the coffee.  # this line is tricky, try to get it exactly right\nprint  If I add %d, %d, and %d I get %d.  % (\n    my_age, my_height, my_weight, my_age + my_height + my_weight)  If I add 35, 74, and 180 I get 289.", 
            "title": "Exercise 5, More Variables and Printing"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-6-strings-and-text", 
            "text": "concatenate   %s  and  %r  help when concatenating strings.  %r  does not coerce the variable into a format ( %s  string or  %d  digit).   x =  There are %d types of people.  % 10\nbinary =  binary \ndo_not =  don't \n\ny =  Those who know %s and those who %s.  % (binary, do_not) # assign strings or chains of strings to a variable\n\nprint x \nprint y  There are 10 types of people.\nThose who know binary and those who don't.  print  I said: %r.  % x\nprint  I also said: '%s'.  % y  I said: 'There are 10 types of people.'.\nI also said: 'Those who know binary and those who don't.'.  hilarious = False\njoke_evaluation =  Isn't that joke so funny?! %r \n\nprint joke_evaluation % hilarious  Isn't that joke so funny?! False  # add two strings together, concatenate them\nw =  This is the left side of... \ne =   a string with a right side. \n\n# with Numpy, it would have added (mathematically speaking)\nprint w + e  This is the left side of... a string with a right side.", 
            "title": "Exercise 6, Strings and Text"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-15-reading-files", 
            "text": "Before running this script, create a text file.  Type  \"Test file thing\"   test.txt .  Then type  cat test.txt .  test.txt  is now saved along the other scripts.  Run the script:  python ex15.py test.txt  With IPython, type:  %run ex15.py test.txt  Run the script without the extra argument  test.txt  to check the result.   %run ex15.py test.txt  Here's your file 'test.txt':\nTest file thing\nType the filename again:  test.txt\nHere's your file 'test.txt' again:\nTest file thing  %run ex15.py  ---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n\\\\Learn Python the Hard Way\\ex15.py in  module ()\n      1 from sys import argv\n      2 \n----  3 script, filename = argv\n      4 \n      5 # similarities\n\n\nValueError: need more than 1 value to unpack   Load the script in IPython with  %load  to study it (don t run it!).  This type of script requires  external  arguments when launched:  python ex15.py test.txt  In the script itself, always preceed the  external  arguments, like  filename , with  script  since your write  python ex15.py test.txt  or  python script argument  when you launch the script.   # %load ex15.py\nfrom sys import argv\n\nscript, filename = argv\n\n# similarities between\n# var = raw_input( string , digit,  prompt )\n# var = open( string )\n\ntxt = open(filename) # reference to a file, not the file\nprint  Here's your file %r:  % filename\nprint txt.read()\n\nprint  Type the filename again: \nfile_again = raw_input(   )\n\ntext_again = open(file_again)\nprint  Here's your file %r again:  % file_again\nprint text_again.read()   The script again (this time, a manual import or copy-paste).   from sys import argv\n\n# always preceed the arguments like 'filename' with 'script'\nscript, filename = argv\n\n# similarities\n# var = raw_input( string , digit,  prompt )\n# var = open( string )\n\ntxt = open(filename) #reference to a file, not the file\nprint  Here's your file %r:  % filename\nprint txt.read()\n\nprint  Type the filename again: \nfile_again = raw_input(   )\n\ntext_again = open(file_again)\nprint  Here's your file %r again:  % file_again\nprint text_again.read()   Now, use this alternative code instead.  It does not require an external argument; the argument ( filename ) is in the script itself (it has become a variable).  Internal  arguments are for functions ( def function(arg1, arg2): ); see Exercise 18.   filename =  test.txt  # however, the code is limited to this file only\n\ntxt = open(filename) # reference to a file, not the file\nprint  Here's your file %r:  % filename\nprint txt.read()\n\nprint  Type the filename again: \nfile_again = raw_input(   )\n\ntext_again = open(file_again)\nprint text_again.read()", 
            "title": "Exercise 15, Reading Files"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-16-reading-and-writing-files", 
            "text": "open, close, readlines, truncate   'w' , write,  'r' , read,  'a' , append.  'w+' , read-write,  'r+' , read-write,  'a+' , read-append.  'r'  being the default argument, it is facultative when writing  open('file', 'r') .  The other arguments are mandatory; without them in  open('file, 'w') , you cannot write, truncate, append or replace.  First, load the script in IPython by typing  %load ex16_1.py ; it then turn to  a comment  # %load ex16_1.py .   # %load ex16.py\nfrom sys import argv\n\nscript, filename = argv\n\nprint  We're going to erase %r.  % filename\nprint  If you don't want that, hit CTRL-C (^C). \nprint  If you do want that, hit RETURN. \n\nraw_input( ? )\n\nprint  Opening the file... \ntarget = open(filename, 'w')\n\nprint  Truncating the file! \n\ntarget.truncate()\n\nprint  Now, I'm going to ask you  for three lines. \n\nline1 = raw_input( line 1:  )\nline2 = raw_input( line 2:  )\nline3 = raw_input( line 3:  )\n\nprint  I'm going to write these to the file. \n\ntarget.write(line1) # 'write' variable line1\ntarget.write( \\n ) # add a new line\ntarget.write(line2)\ntarget.write( \\n )\ntarget.write(line3)\ntarget.write( \\n )\n\nprint  And finally, we close it. \ntarget.close()   Now, run the external file in IPython (it imports the code behind the scene).  Careful: the script requires a second argument ( filename ).   %run ex16.py text.txt  We're going to erase 'text.txt'.\nIf you don't want that, hit CTRL-C (^C).\nIf you do want that, hit RETURN.\n?\nOpening the file...\nTruncating the file!\nNow, I'm going to ask you  for three lines.\nline 1: Good morning.\nline 2: How are you?\nline 3: I wish you a good day.\nI'm going to write these to the file.\nAnd finally, we close it.   Read the file.   filename = 'text.txt'\n\ntarget = open(filename, 'r')\nprint target.read()\ntarget.close()  Good morning.\nHow are you?\nI wish you a good day.   Now, truncate (empty, delete, erase, clear) the file, reopen it, and to read it.   filename = 'text.txt'\n\ntarget = open(filename, 'w')\nprint  Truncating the file! \nprint  -  * 25\ntarget.truncate()\ntarget.close()\n\ntarget = open(filename, 'r')\nprint target.read()\ntarget.close()  Truncating the file!\n------------------------", 
            "title": "Exercise 16, Reading and Writing Files"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-17-more-files", 
            "text": "length, len()   target.read() ; read the whole file (EOF).  target.read(10) ; read the amount of bytes between the parentheses (1 byte = 1 character).  target.readline() ; read one line character at a time; the first line or the file until the first  \\n .  target.readline(10) ; read 10 bytes of the first line, but never more than the first line.  readlines() ; read in the whole file at once and splits it by line (create a list).  xreadlines() ; read big files.  First, load  script ex17_1.py  in IPython. This script needs two additional arguments.   # %load ex17_1.py\nfrom sys import argv\nfrom os.path import exists # does the file exists, T or F?\n\nscript, from_file, to_file = argv\n\nprint  Copying from %s to %s  % (from_file, to_file)\n\nin_file = open(from_file, 'r') # 'r' is facultative\nindata = in_file.read() # read the content, store in memory\n\nprint  The input file is %d bytes long  % len(indata) # number of bytes in the file or length of 'indata'\n\nprint  Does the output file exist? %r  % exists(to_file) # if the second file hasn't been created, this row will yield a 'False'\n\n# after you run this script, if you run it again, il will yield a 'True'\nprint  Ready, hit RETURN to continue, CTRL-C to abort. \nraw_input( ?  )\n\nout_file = open(to_file, 'w')\nout_file.write(indata)\n\nprint  Alright, all done. \n\nout_file.close()\nin_file.close()  %run ex17_1.py text2.txt new.txt  Copying from text2.txt to new.txt\nThe input file is 49 bytes long\nDoes the output file exist? True\nReady, hit RETURN to continue, CTRL-C to abort.\n? \nAlright, all done.  target = open( text2.txt )\nprint target.read()\ntarget.close()  Good morning.\nHow are you?\nI wish you a good day.  target = open( new.txt )\nprint target.read()\ntarget.close()  Good morning.\nHow are you?\nI wish you a good day.  # %load ex17_2.py\nfrom sys import argv\nfrom os.path import exists # does the file exists, T or F?\n\nscript, from_file, to_file = argv\n\n# FIRST\nin_file = open(from_file, 'r')\nindata = in_file.read()\n\nprint  The input file is %d bytes long  % len(indata)\n\nin_file.close()\n\nprint  -  * 25\n\n# SECOND\ncheckfile = open(from_file, 'r')\nprint checkfile.readline() # read line 1, show\nprint checkfile.readline() # read line 2\nprint checkfile.readline() # read line 3\n\ncheckfile.close()\n\nprint  -  * 25\n\n# THIRD\ncheckfile2 = open(from_file, 'r')\nout_file = open(to_file, 'w')\n\nindata = checkfile2.read()\nout_file.write(indata)\n\nprint  Alright, all done. \n\ncheckfile2.close()\nout_file.close()\n\nprint  -  * 25\n\n# FOURTH\n\ncheckfile3 = open(to_file, 'r')\n\nprint checkfile3.read()\n\ncheckfile3.close()  %run ex17_2.py text2.txt new2.txt  The input file is 49 bytes long\n-------------------------\nGood morning.\n\nHow are you?\n\nI wish you a good day.\n-------------------------\nAlright, all done.\n-------------------------\nGood morning.\nHow are you?\nI wish you a good day.", 
            "title": "Exercise 17, More Files"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-18-names-variables-code-functions", 
            "text": "argument, flexible, indefinite   A function can have no, one or several arguments.  def function(): .  def function(one) .  def function(one, two, three) .    *args  means indifinite number of arguments.   All the arguments are is a list ( args ).   # indefinite\ndef print_two(*args):\n\n    arg1, arg2 = args\n    print  arg1: %r, arg2: %r  % (arg1, arg2)\n\n# two arguments\ndef print_two_again(arg1, arg2):\n\n    print  arg1: %r, arg2: %r  % (arg1, arg2)\n\n# one argument\ndef print_one(arg1):\n\n    print  arg1: %r  % arg1\n\n# no arguments\ndef print_none():\n\n    print  I got nothin'. \n\n# indefinite\ndef print_two_2(*args):\n\n    print  args: %r  % (args,) # much more flexible    \n\n# two arguments\ndef print_two_again_2(arg1, arg2, arg3):\n\n    print  arg1: %r, arg2: %r, arg3: %r  % (arg1, arg2, arg3)    \n\n# three arguments\ndef print_two_again_3(arg1, arg2, arg3):\n\n    print  arg1: %r, arg2: %r, arg3: %r  % (arg1, arg2, arg3)\n    print_two( Joe ,  Frank ) # call a function inside a function   Run the functions.   print_two( Zed ,  Shaw )\nprint_two_again( Zed ,  Shaw )  arg1: 'Zed', arg2: 'Shaw'\narg1: 'Zed', arg2: 'Shaw'  print_one( First! )\nprint_none()  arg1: 'First!'\nI got nothin'.  print_two_2( Zed ,  Shaw ,  A ,  B )  args: ('Zed', 'Shaw', 'A', 'B')  print_two_again_2( Zed ,  Shaw ,  C )  arg1: 'Zed', arg2: 'Shaw', arg3: 'C'  print_two_again_3( Zed ,  Shaw ,  C )  arg1: 'Zed', arg2: 'Shaw', arg3: 'C'\narg1: 'Joe', arg2: 'Frank'", 
            "title": "Exercise 18, Names, Variables, Code, Functions"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-19-functions-and-variables", 
            "text": "Give different names to functions and arguments not to get confuse.   def cheese_and_crackers(cheese_count, boxes_of_crackers):\n\n    print  You have %d cheeses!  % cheese_count\n    print  You have %d boxes of crackers!  % boxes_of_crackers\n    print  Man that's enough for a party! \n    print  Get a blanket. \\n   print  1.We can just give the function numbers directly: \ncheese_and_crackers(20, 30)  1.We can just give the function numbers directly:\nYou have 20 cheeses!\nYou have 30 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.  print  2.Or, we can use variables from our script: \namount_of_cheese = 10\namount_of_crackers = 50\ncheese_and_crackers(amount_of_cheese, amount_of_crackers)  2.Or, we can use variables from our script:\nYou have 10 cheeses!\nYou have 50 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.  print  3.We can even do math inside too: \ncheese_and_crackers(10 + 20, 5 + 6)  3.We can even do math inside too:\nYou have 30 cheeses!\nYou have 11 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.  print  4.And we can combine the two, variables and math: \ncheese_and_crackers(amount_of_cheese + 100, amount_of_crackers + 1000)  4.And we can combine the two, variables and math:\nYou have 110 cheeses!\nYou have 1050 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.  print  5.Make a GUI. \nprint  Enter the amount of cheese: ,\namount_of_cheese = int(raw_input())\namount_of_crackers = int(raw_input( Enter the amount of crackers:  ))\ncheese_and_crackers(amount_of_cheese, amount_of_crackers)  5.Make a GUI.\nEnter the amount of cheese:2\nEnter the amount of crackers: 5\n You have 2 cheeses!\nYou have 5 boxes of crackers!\nMan that's enough for a party!\nGet a blanket.", 
            "title": "Exercise 19, Functions and Variables"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-20-functions-and-files", 
            "text": "seek, move, file  # %load ex20.py\nfrom sys import argv\n\nscript, input_file = argv\n# python ex20.py test.txt\n\ndef print_all(f): # f is the file\n\n    print f.read() # read the file, reach the end\n\ndef rewind(f):\n\n    f.seek(0) # move back to the initial position in the file\n# 'seek' actively move in the file\n\ndef print_a_line(line_count, f):\n\n    print line_count, f.readline() # print a line # and this line number in the file\n\n\ncurrent_file = open(input_file)\n\nprint  First, let's print the whole file:\\n \n\nprint_all(current_file) # launch function, f = current_file\n\nprint  -  * 25\n\nprint  Now let's rewind, kind of like a tape. \n\nrewind(current_file) # launch function, f = current_file\n\nprint  -  * 25\n\nprint  Let's print three lines: \n\ncurrent_line = 1 # load variable\nprint_a_line(current_line, current_file) # launch function\n# set 'current_line' to 1\n\ncurrent_line = current_line + 1\n# current_line += 1\nprint_a_line(current_line, current_file)\n# 'current_line' grows to 2...\n\n# current_line = current_line + 1\ncurrent_line += 1\nprint_a_line(current_line, current_file)  %run ex20.py new2.txt  First, let's print the whole file:\n\nGood morning.\nHow are you?\nI wish you a good day.\n-------------------------\nNow let's rewind, kind of like a tape.\n-------------------------\nLet's print three lines:\n1 Good morning.\n\n2 How are you?\n\n3 I wish you a good day.", 
            "title": "Exercise 20, Functions and Files"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-21-functions-can-return-something-or-not", 
            "text": "integer, float, int, coerce, digit, string, raw   %r  for raw.  %d  for digit.  %s  for string.  int()  with  %d  = integer.  int()  with  %r  or  %s  = integer.  float()  with  %d  = integer.  float()   with  %r  or  %s  = float.  %r  is a safer choice; see below.   a = 10 # a digit\nb = 10.1\n\nprint  %r  % a\nprint  %s  % a\nprint  %d  % a\nprint  %r  % b\nprint  %s  % b\nprint  %d  % b  10\n10\n10\n10.1\n10.1\n10  a =  10  # a string or str(10)\n\nprint  %r  % a\nprint  %s  % a\nprint  %d  % a  '10'\n10\n\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last) ipython-input-34-71a6226dbd27  in  module ()\n      2 print \"%r\" % a\n      3 print \"%s\" % a\n----  4 print \"%d\" % a\n\nTypeError: %d format: a number is required, not str  b =  10.1  # a string or str(10)\n\nprint  %r  % b\nprint  %s  % b\nprint  %d  % b  '10.1'\n10.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last) ipython-input-33-18d4f3068fee  in  module ()\n      2 print \"%r\" % b\n      3 print \"%s\" % b\n----  4 print \"%d\" % b\n\nTypeError: %d format: a number is required, not str  a =  10  # a string or str(10)\nb =  10.1  # a string or str(10)\n\nprint  %r  * 1 % a\nprint  %s  * 1 % a\nprint  %r  * 1 % b\nprint  %s  * 1 % b  '10'\n10\n'10.1'\n10.1  a =  10  # a string or str(10)\nb =  10.1  # a string or str(10)\n\nprint  %r  * 2 % a\nprint  %s  * 2 % a\nprint  %r  * 2 % b\nprint  %s  * 2 % b  ---------------------------------------------------------------------------\n\n\nTypeError                                 Traceback (most recent call last) ipython-input-34-18d4f3068fee  in  module ()\n      1 a = \"10\"\n      2 b = \"10.1\"\n----  3 print \"%r\" * 2 % a\n      4 print \"%s\" * 2 % a\n      5 print \"%r\" * 2 % b\n\nTypeError: not enough arguments for format string  a = 10\nb = 10.1\na = int(a)\nb = int(b)\nprint  %r  % a\nprint  %s  % a\nprint  %d  % a\nprint  %r  % b\nprint  %s  % b\nprint  %d  % b  10\n10\n10\n10\n10\n10  a = 10\nb = 10.1\na = float(a)\nb = float(b)\n\nprint  %r  % a\nprint  %s  % a\nprint  %d  % a\nprint  %r  % b\nprint  %s  % b\nprint  %d  % b  10.0\n10.0\n10\n10.1\n10.1\n10  a = 1\nb = 2.1\n\nprint a * b\nprint int(a) * int(b)\nprint float(a) * float(b)\nprint str(a) * 10\nprint str(b) * 10\nprint str(a) * str(b)  2.1\n2\n2.1\n1111111111\n2.12.12.12.12.12.12.12.12.12.1\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last) ipython-input-52-57a5dd7c13d0  in  module ()\n      7 print str(a) * 10\n      8 print str(b) * 10\n----  9 print str(a) * str(b)\n\nTypeError: can't multiply sequence by non-int of type 'str'  def add(a, b):\n\n    print  ADDING %s + %s  % (a, b)\n    return a + b  \n\ndef substract(a, b):\n\n    print  SUBTRACTING %d - %d  % (a, b) # show the arguments\n    return a - b # compute the arguments\n\ndef multiply(a, b):\n\n    print  MULTIPLYING %d * %d  % (a, b)\n    return a * b    \n\ndef divide(a, b):\n\n    print  DIVIDING %d / %d  % (a, b)\n    return a / b  print  Let's do some math with just functions! \n\naa = int(raw_input( Enter a (integer):  )) # to enter an integer\nbb = float(raw_input( Enter b (float):  )) # to enter a float\nage = add(aa, bb) # launch function add()  Let's do some math with just functions!\nEnter a (integer): 1\nEnter b (float): 2.2\nADDING 1 + 2.2  print add(aa, bb)  ADDING 1 + 2.2\n3.2  height = substract(78, 4) # launch function substract()\nweight = multiply(90, 2) # launch function multiply()\niq = divide(100, 2) # launch function divide()\n\nprint height\nprint weight\nprint iq  SUBTRACTING 78 - 4\nMULTIPLYING 90 * 2\nDIVIDING 100 / 2\n74\n180\n50  # Use the variable, previously loaded\nprint  Age: %d, Height: %d, Weight: %d, IQ: %d  % (age, height, weight, iq)  Age: 3, Height: 74, Weight: 180, IQ: 50  # A puzzle for the extra credit, type it in anyway.\nprint  Here is a puzzle. \n\nwhat = add(age, substract(height, multiply(weight, divide(iq, 2)))) # launch functions one by one!!!\n\n# Insert variable 'what' in the text\nprint  That becomes:  , what,  Can you do it by hand?   Here is a puzzle.\nDIVIDING 50 / 2\nMULTIPLYING 180 * 25\nSUBTRACTING 74 - 4500\nADDING 3.2 + -4426\nThat becomes:  -4422.8 Can you do it by hand?", 
            "title": "Exercise 21, Functions Can Return Something or not..."
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-23-read-some-code", 
            "text": "Go to  GitHub :  In the  lamson  directory, take a script.  Go through the script.  Find projects on collaborative sites or depositories:  bitbucket.org .  github.com .  gitorious.org .  launchpad.net .  sourceforge.net .", 
            "title": "Exercise 23, Read Some Code"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-24-more-practice", 
            "text": "\\'  for an aposthrophy.  \\t  for a tab.  \\\\  for a backslash.  \\n  for a new line.   print  Let's practice everything. \n\nprint 'You\\'d need to know \\'bout escapes with \\\\ that do \\nnewlines and \\ttabs.'  Let's practice everything.\nYou'd need to know 'bout escapes with \\ that do \nnewlines and    tabs.  poem =  \n\\tThe lovely world\nwith logic so firmly planted\nconnot discern \\n the needs of love\nnor comprehend passion from intuition\nand requires an explanation\n\\n\\t\\twhere there is none. \n\nprint  ---------------- \nprint poem\nprint  ----------------   ----------------\n\n    The lovely world\nwith logic so firmly planted\nconnot discern \n the needs of love\nnor comprehend passion from intuition\nand requires an explanation\n\n        where there is none.\n\n----------------  # variable 'five'\nfive = 10 -2 + 3 - 6\n\n# use of variable 'five'\nprint  This should be five: %s  % five  This should be five: 5  # function with one argument\ndef secret_formula(started):\n\n    jelly_beans = started * 500 # load variable with another\n    jars = jelly_beans / 1000\n    crates = jars / 100\n    return jelly_beans, jars, crates\n\n\n# variable; warning, this variable is modified further down\nstart_point = 10000\n\n# redefine the results of a function (rename a variable)\n# from this point, 'jelly_beans' becomes 'beans'\n# and must be called so in any line of code\nbeans, jars, crates = secret_formula(start_point)\n\nprint  With a starting point of: %d  % start_point\n# we apply 'bean'\nprint  We's have %d beans, %d jars, and %d crates.  % (beans, jars, crates)\n\n# modified variable is loaded into the code from this point\nstart_point = start_point / 10\n\nprint  We can also do that this way: \n# we apply the modified variable 'start_point'\nprint  We's have %d beans, %d jars, and %d crates.  % secret_formula(start_point)  With a starting point of: 10000\nWe's have 5000000 beans, 5000 jars, and 50 crates.\nWe can also do that this way:\nWe's have 500000 beans, 500 jars, and 5 crates.", 
            "title": "Exercise 24, More Practice"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-25-even-more-practice", 
            "text": "import, module, package, script, library   For this exercice, consult the manual.  First, run python ex25.py to find out any errors.  Second, use the python engine to run pieces of codes from this file and not just trigger the whole code from this file  Check out file  25_1.txt .   # %load ex25.py\ndef break_words(stuff):\n\n     This function will break up words for us. \n    words = stuff.split(' ') # the method splits the characters each time it finds a 'space'\n    return words # you must specify in python where to load the result (into 'words')\n\ndef sort_words(words):\n\n     Sorts the words. \n    return sorted(words) # the python function sorts the separated words\n\ndef print_first_word(words):\n\n     Prints the first word after popping in off. \n    word = words.pop(0) # the method returns the first word in the index (position 0)\n    print word\n\ndef print_last_word(words):\n\n     Prints the last word after popping it off. \n    word = words.pop(-1) # the method returns the last word in the index (position -1)\n    print word\n\ndef sort_sentence(sentence):\n\n     Takes in a full sentence and returns the sorted words. \n    words = break_words(sentence) # launch a function\n    return sort_words(words) # launch another function with the result of the first function\n\ndef print_first_and_last(sentence):\n\n     Prints the first and last words of the sentence. \n    words = break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n\ndef print_first_and_last_sorted(sentence):\n\n     Sorts the words then prints the first and last one. \n    words = sort_sentence(sentence)\n    print_first_word(words)\n    print_last_word(words)  %run ex25.py   In the next script, you  import  the above script (ex25.py) as an external module (even though the script was previously run in IPython, and we want to simulate a script importing another script) and use its function as methods.   import ex25\n\nsentence =  All good things come to those who wait. \n\nwords = ex25.break_words(sentence)\nwords  ['All', 'good', 'things', 'come', 'to', 'those', 'who', 'wait.']  sorted_words = ex25.sort_words(words)\nsorted_words  ['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']  ex25.print_first_word(words)\nex25.print_last_word(words)\nwords  All\nwait.\n['good', 'things', 'come', 'to', 'those', 'who']  ex25.print_first_word(sorted_words)\nex25.print_last_word(sorted_words)\nsorted_words  All\nwho\n['come', 'good', 'things', 'those', 'to', 'wait.']  sorted_words = ex25.sort_sentence(sentence)\nsorted_words  ['All', 'come', 'good', 'things', 'those', 'to', 'wait.', 'who']  ex25.print_first_and_last(sentence)\nex25.print_first_and_last_sorted(sentence)  All\nwait.\nAll\nwho", 
            "title": "Exercise 25, Even More Practice"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-32-loops-and-lists", 
            "text": "for, loop, list  the_count = [1,2,3,4,5]\nfruits = ['apples', 'oranges', 'pears', 'apricots']\nchange = [1, 'pennies', 2, 'dimes', 3, 'quarters']\n\n# this first kind of for-loop goes through a list\nfor number in the_count:\n    print  \\tThis is count %d  % number      This is count 1\n    This is count 2\n    This is count 3\n    This is count 4\n    This is count 5  # same as above\nfor fruit in fruits:\n    print  A fruit of type: %s  % fruit  A fruit of type: apples\nA fruit of type: oranges\nA fruit of type: pears\nA fruit of type: apricots   We can go though mixed lists too. Notice we have to use  %r  since we don t know what s in it.   for i in change:\n    print  \\tI got %r  % i      I got 1\n    I got 'pennies'\n    I got 2\n    I got 'dimes'\n    I got 3\n    I got 'quarters'   We can also build lists. First, start with an empty one.   elements = []\n\n# then use the range function to do 0 to 5 counts\n# 0 means 1st, the 6th is excluded; 0,1,2,3,4,5\nfor i in range(0, 6):\n    print  Adding %d to the list.  % i\n    # append is a function that lists understand\n    elements.append(i) # elements is a variable to which we add numbers  Adding 0 to the list.\nAdding 1 to the list.\nAdding 2 to the list.\nAdding 3 to the list.\nAdding 4 to the list.\nAdding 5 to the list.   We can print them out.   for i in elements:\n    print  \\tElement was: %d  % i        Element was: 0\n    Element was: 1\n    Element was: 2\n    Element was: 3\n    Element was: 4\n    Element was: 5  print  Test the range function... \nprint  range(5): , range(5)\nprint  range(6): , range(6)\nprint  range(1, 5): , range(1, 5)\nprint  range(2, 5): , range(2, 5)\nprint  range(0, 10, 2): , range(0, 10, 2)  Test the range function...\nrange(5): [0, 1, 2, 3, 4]\nrange(6): [0, 1, 2, 3, 4, 5]\nrange(1, 5): [1, 2, 3, 4]\nrange(2, 5): [2, 3, 4]\nrange(0, 10, 2): [0, 2, 4, 6, 8]   Two-dimentional lists (above 2 dimension, it can become memory-intensive to compute!).    2d, tabular, lists in list, list of lists  the_count_two = [[1,2,3],[4,5,6]]\n\n# this first kind of for-loop goes through a list\n# this list is not numerical, use %r or %s\nfor number in the_count_two:\n    print  \\tThis is count %r  % number  This is count [1, 2, 3]\nThis is count [4, 5, 6]", 
            "title": "Exercise 32, Loops and Lists"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-33-while-loops", 
            "text": "while, loop  i = 0\nnumbers = []\n\nwhile i   6:\n    print  At the top i is %d  % i\n    numbers.append(i)\n\n    i += 1\n    print  Number now:  , numbers\n    print  At the botton i is %d  % i\n\n\nprint  The numbers:    At the top i is 0\nNumber now:  [0]\nAt the botton i is 1\nAt the top i is 1\nNumber now:  [0, 1]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 1, 2]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 1, 2, 3]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 1, 2, 3, 4]\nAt the botton i is 5\nAt the top i is 5\nNumber now:  [0, 1, 2, 3, 4, 5]\nAt the botton i is 6\nThe numbers:  for num in numbers:\n    print num      0\n1\n2\n3\n4\n5   Make it a function.   def breaking_list(max_of, increm):\n\n    i = 0\n    numbers = []\n\n    while i   max_of:\n        print  At the top i is %d  % i\n        numbers.append(i)\n\n        i += increm\n        print  Number now:  , numbers\n        print  At the botton i is %d  % i\n\n    print  The numbers:  \n\n    for num in numbers:\n        print num\n\nprint  Enter an integer, a maximum, higher than 1. \nmax_integer = int(raw_input(   ))\nprint  Enter an integer, an increment, equal or more than 1 \nincrement = int(raw_input(   ))\nprint  The maximum is %d and the increment is %d  % (max_integer, increment)\n\nbreaking_list(max_integer, increment)  Enter an integer, a maximum, higher than 1.  5\nEnter an integer, an increment, equal or more than 1  2\nThe maximum is 5 and the increment is 2\nAt the top i is 0\nNumber now:  [0]\nAt the botton i is 2\nAt the top i is 2\nNumber now:  [0, 2]\nAt the botton i is 4\nAt the top i is 4\nNumber now:  [0, 2, 4]\nAt the botton i is 6\nThe numbers: \n0\n2\n4   Change the function, replace with a for-loops.    def breaking_list2(max_of, increm):\n\n    i = 0\n    numbers = []\n\n    for i in range(0, max_of, increm):\n        print  At the top i is %d  % i\n        numbers.append(i)\n\n        i += increm\n        print  Number now:  , numbers\n        print  At the botton i is %d  % i\n\n    print  The numbers:  \n\n    for num in numbers:\n        print num\n\nmax_integer2 = max_integer + 2\nincrement2 = increment + 1\nbreaking_list2(max_integer2, increment2)  At the top i is 0\nNumber now:  [0]\nAt the botton i is 3\nAt the top i is 3\nNumber now:  [0, 3]\nAt the botton i is 6\nAt the top i is 6\nNumber now:  [0, 3, 6]\nAt the botton i is 9\nThe numbers: \n0\n3\n6", 
            "title": "Exercise 33, While Loops"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-34-accessing-elements-of-lists", 
            "text": "list, list of lists, lists in list, exit, program   Let s build a scenario; functions leading to other functions.  def gold_room():  def bear_room():  def cthulhu_room():  def dead(why):  def start():  start()  to launch the chain reaction.   from sys import exit\n\ndef gold_room():\n\n    print  This room is full of gold. How much do you take? \n\n    choice = raw_input( Write any number from 0 to 100   ) # variable\n    if  0  in choice or  1  in choice: # could be 0, 1, 10, 11:19, 20, 21, 30, 31, 40, 41, 50, 51, etc.\n        how_much = int(choice) # variable\n    else:\n        dead( Man, learn to type a number. ) # launch function dead\n\n    if how_much   50:\n        print  Nice, you're not greedy, you win! \n        exit(0) # launch system function exit\n    else:\n        dead( You greedy bastard! ) # launch function dead\n\ndef bear_room():\n\n    print  There is bear here. \n    print  The bear has a bunch of honey. \n    print  The fat bear is in front of another door. \n    print  How are you going to move the bear? \n    bear_moved = False # variable\n\n    while True: # infinite loop, run until it finds a right answer\n        choice = raw_input( Write 'take honey', 'taunt bear' or 'open door'   ) # variable\n\n        if choice ==  take honey : # variable check\n            dead( The bear looks at you then slaps your face off. ) # launch function dead\n        elif choice ==  taunt bear  and not bear_moved: # double variables check\n            print  The bear has moved from the door. You can go thought it now. \n            bear_moved = True # change the variable\n        elif choice ==  taunt bear  and bear_moved:\n            dead( The bear gets pissed off and chews your leg off. )\n        elif choice ==  open door  and bear_moved: # variable check\n            gold_room() # launch function gold_room\n        else:\n            print  I got no idea what that means. \n\ndef cthulhu_room():\n\n    print  Here you see the great evil Cthulhu. \n    print  He, it, whatever stares at you and you go insane. \n    print  Do you flee your life or eat your head? \n\n    choice = raw_input( Write 'flee' or 'head'   ) # variable\n\n    if  flee  in choice: # variable check\n        start() # launch function start\n    elif  head  in choice:\n        dead( Well that was tasty! )\n    else:\n        cthulhu_room() # launch function\n\ndef dead(why):\n\n    print why,  Good job! \n    exit(0) # launch system function exit\n    # exit(0) is neutral\n    # exit(1) is an error, could be a useful warning\n    # exit(2) or others like exit(100) are other warnings, or different messages\n\ndef start():\n\n    print  You are in a dark room. \n    print  There is a door to your right and left. \n    print  Which one do you take: left or right? \n\n    choice = raw_input( Write 'left' or 'right'   ) # variable\n\n    if choice ==  left : # variable check, exact\n        bear_room() # launch function bear_room\n    elif choice ==  right : # variable check, exact\n        cthulhu_room()\n    else:\n        dead( You stumble around the room until you starve. )\n\nstart() # launch the chain reaction  You are in a dark room.\nThere is a door to your right and left.\nWhich one do you take: left or right?\nWrite 'left' or 'right'  left\nThere is bear here.\nThe bear has a bunch of honey.\nThe fat bear is in front of another door.\nHow are you going to move the bear?\nWrite 'take honey', 'taunt bear' or 'open door'  taunt bear\nThe bear has moved from the door. You can go thought it now.\nWrite 'take honey', 'taunt bear' or 'open door'  open door\nThis room is full of gold. How much do you take?\nWrite any number from 0 to 100  63\nMan, learn to type a number. Good job!\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 0   There are multiple scenarios to try", 
            "title": "Exercise 34, Accessing Elements of Lists"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-38-doing-things-to-lists", 
            "text": "list, index, add, remove, delete, extract  ten_things =  Apples Oranges Crows Telephones Light Sugar \n\nprint  ten_things: , ten_things, , not a list \n\nprint  Wait there are not 10 things is that list. Let's fix that.   ten_things: Apples Oranges Crows Telephones Light Sugar , not a list\nWait there are not 10 things is that list. Let's fix that.  stuff = ten_things.split(' ') # variable ten_things, method split\n\nprint  stuff: , stuff, , a list   stuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar'] , a list  more_stuff = [ Day ,  Night ,  Song ,  Frisbee ,  Corn ,  Banana ,  Girl ,  Boy ] # list variable\n\nprint  more_stuff: , more_stuff, , a list   more_stuff: ['Day', 'Night', 'Song', 'Frisbee', 'Corn', 'Banana', 'Girl', 'Boy'] , a list   Most of the time, a for-loop is better than a while-loop.  A while-loop is better when there is a test, a condition.   while len(stuff) != 10:\n    next_one = more_stuff.pop() # load a variable with another variable, method pop, pop means extracting 1 item from a list variable, the last item in the list\n    print  Adding:  , next_one # show the content\n    stuff.append(next_one) # variable stuff add 1-item list variable; the loop will go as long as stuff has less than 10 items  \n    print  stuff: , stuff\n    print  There are %d items now.  % len(stuff) # length of stuff or the number of items in it\n\nprint  There we go:  , stuff  Adding:  Boy\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy']\nThere are 7 items now.\nAdding:  Girl\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl']\nThere are 8 items now.\nAdding:  Banana\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana']\nThere are 9 items now.\nAdding:  Corn\nstuff: ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana', 'Corn']\nThere are 10 items now.\nThere we go:  ['Apples', 'Oranges', 'Crows', 'Telephones', 'Light', 'Sugar', 'Boy', 'Girl', 'Banana', 'Corn']  print  Let's do some things with stuff. \n\n# print and pop choosen items according to the index\n# could also be random index values!!!\n# could reorder the list before (ascending, descending) \nprint stuff[1] # the 2nd item\nprint stuff[2] # the 3rd item\nprint stuff[-1] # the last item\nprint stuff[-2]\nprint stuff.pop() # pop the last item\nprint stuff.pop(0) # pop the first item\nprint stuff.pop(1) # pop the 2nd item\nprint stuff.pop(-1) # pop the last item\nprint ' '.join(stuff) # var.split(' ') vs ' '.join(var), concatenate the list\nprint '#'.join(stuff[3:5]) # add a character at position 3 and 4 (4th, 5th, excluding the last)   Let's do some things with stuff.\nOranges\nCrows\nCorn\nBanana\nCorn\nApples\nCrows\nBanana\nOranges Telephones Light Sugar Boy Girl\nSugar#Boy", 
            "title": "Exercise 38, Doing Things to Lists"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-39-dictionaries-oh-lovely-dictionaries", 
            "text": "dictionary  things = ['a','b','c','d'] # list\n\nprint things\nprint things[1]  ['a', 'b', 'c', 'd']\nb   Change an element.   things[1] = 'z'\nprint things  ['a', 'z', 'c', 'd']   A dictionary has keys associated with values.   Order does not matter.   If you supply the key, you will get the value.   stuff = {'name' : 'Zed','age' : '39','height' : 8 * 12 + 2} # a dictionary\n\nprint stuff\nprint stuff['name']\nprint stuff['age']\nprint stuff['height']  {'age': '39', 'name': 'Zed', 'height': 98}\nZed\n39\n98   Add an element.   stuff['city'] =  San Francisco \nprint stuff['city']\nprint stuff  San Francisco\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}   Add and remove an element.   stuff['color'] =  blue \nprint stuff\n\ndel stuff['color']\nprint stuff  {'color': 'blue', 'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}\n{'city': 'San Francisco', 'age': '39', 'name': 'Zed', 'height': 98}   If the value does not exist when you call it, it will turn out an error. Instead, write it this way:  print \"%r\" % stuff.get('color',None) .   If it s not existant, it will return  None  or a value by default   print stuff['state']  ---------------------------------------------------------------------------\n\nKeyError                                  Traceback (most recent call last) ipython-input-69-f211ffe8fe02  in  module ()\n----  1 print stuff['state']\n\n\nKeyError: 'state'  print  %r  % stuff.get('color', None)  None   Change an element.   print stuff['age']\n\nstuff['age'] = 400\nprint stuff['age']  39\n400   Extract with the index.   stuff[1] =  Wow \nstuff[2] =  Neato \nprint stuff[1]\nprint stuff[2]\n\nprint stuff # new items won't be in order  Wow\nNeato\n{'city': 'San Francisco', 2: 'Neato', 'name': 'Zed', 1: 'Wow', 'age': 400, 'height': 98}   Delete an element (according to the index).   del stuff[1]\ndel stuff[2]\n\nprint stuff  {'city': 'San Francisco', 'name': 'Zed', 'age': 400, 'height': 98}   Create a mapping of state to abbreviation.   states = {\n    'Oregon': 'OR',\n    'Florida': 'FL',\n    'California': 'CA',\n    'New York': 'NY',\n    'Michigan': 'MI'\n}   Create a basic set of states and some cities in them.   cities = {\n    'CA': 'San Francisco',\n    'MI': 'Detroit',\n    'FL': 'Jacksonville'\n}   Add some key:value to dictionary cities.   cities['NY'] = 'New York'\ncities['OR'] = 'Portland'   Print out some cities.   print  Dictionary 'cities':  , cities\nprint '-' * 10\nprint  NY State has:  , cities['NY'] # call the key\nprint  OR State has:  , cities['OR'] # get the value  Dictionary 'cities':  {'FL': 'Jacksonville', 'CA': 'San Francisco', 'MI': 'Detroit', 'OR': 'Portland', 'NY': 'New York'}\n----------\nNY State has:  New York\nOR State has:  Portland   Print some states.   print  Dictionary 'states':  , states\nprint '-' * 10\nprint  Michigan's abbreviation is:  , states['Michigan']\nprint  Florida's abbrebiation is:  , states['Florida']  Dictionary 'states':  {'California': 'CA', 'Michigan': 'MI', 'New York': 'NY', 'Florida': 'FL', 'Oregon': 'OR'}\n----------\nMichigan's abbreviation is:  MI\nFlorida's abbrebiation is:  FL   Print a dictionary in dictionary.   print  Michigan has:  , cities[states['Michigan']]\n# is like states['Michigan'], then cities['MI']\nprint  florida has:  , cities[states['Florida']]  Michigan has:  Detroit\nflorida has:  Jacksonville   Print every state abbreviation.   print  Enumerate Dictionary 'states', key:value... \nfor state, abbrev in states.items():\n    print  %s is abbreviated %s  % (state, abbrev)\n# state = 1st item = key, abbrev = 2nd item = value  Enumerate Dictionary 'states', key:value...\nCalifornia is abbreviated CA\nMichigan is abbreviated MI\nNew York is abbreviated NY\nFlorida is abbreviated FL\nOregon is abbreviated OR   Print every city in state.   print  Enumerate Dictionary 'cities', key:value... \nfor abbrev, city in cities.items():\n    print  %s has the city %s  % (abbrev, city)     Enumerate Dictionary 'cities', key:value...\nFL has the city Jacksonville\nCA has the city San Francisco\nMI has the city Detroit\nOR has the city Portland\nNY has the city New York   Now do both at the same time.   print  Enumerate both dictionaries... \nfor state, abbrev in states.items():\n    print  %s state is abbreviated %s and has city %s  % (state, abbrev, cities[abbrev])\n# state California gives abbrev CA, inside cities gives San Francisco     Enumerate both dictionaries...\nCalifornia state is abbreviated CA and has city San Francisco\nMichigan state is abbreviated MI and has city Detroit\nNew York state is abbreviated NY and has city New York\nFlorida state is abbreviated FL and has city Jacksonville\nOregon state is abbreviated OR and has city Portland   get()  seek a key, whether it exists or not.   state = states.get('Texas') # extract\n\nif not state:\n    print  Sorry, no Texas.   Sorry, no Texas.   Get a city with a default value.   city = cities.get('TX', 'Does Not Exist')\nprint  The city for the state 'TX' is: %s  % city  The city for the state 'TX' is: Does Not Exist   Let s step up the above operations.  Module  hashmap.py  works through a dictionary.   Module  ex39_test.py  contains dictionaries (just like the above).  In Python, we would run module  ex39_test.py .   The module would begin by importing module  hashmap.py  to use its methods and perform operations.  Consult the manual.", 
            "title": "Exercise 39, Dictionaries, Oh Lovely Dictionaries"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-40-modules-classes-and-objects", 
            "text": "mystuff = {'apple': 'I AM APPLES'}\n\nprint mystuff['apple'] # get X from Y  I AM APPLES   You can import a file with functions and variables from a another module.  You can access the functions (methods) and variables from this other module.  Both files must be in the same directory, otherwise, specify the path as well.   # %load ex40.py\ndef apple():\n\n    print  I AM APPLES! \n\n# this is just a variable\ntangerine =  Living reflection of a dream \n\napple()  %run ex40.py  I AM APPLES!  import ex40\n\nex40.apple()\n\nprint ex40.tangerine  I AM APPLES!\nLiving reflection of a dream  mystuff['new'] = ex40.tangerine\n\nprint mystuff['new']  Living reflection of a dream  import ex40\n\nthing = ex40\n\nthing.apple()\nprint thing.tangerine  I AM APPLES!\nI AM APPLES!\nLiving reflection of a dream   Use a class instead of an imported module.  Remember: class method = class function.   class Song(object):\n\n\n    def __init__(self, lyrics): # instantiation and shortcut for a creating a variable\n        self.lyrics = lyrics # the variable could be equal to a text, a number or a variable\n\n    def sing_me_a_song(self): # create a class function\n        for line in self.lyrics:\n            print line\n\n\n# instance            \nhappy_bday = Song([ Happy birthday to you ,\n                    I don't want to get sued ,\n                    So I'll stop right there ])\n\n# instance\nbulls_on_parade = Song([ They rally around tha family ,\n                         With pockets full of shells ])\n\n# instance\nau_clair = Song([ Au clair de la lune ,\n                  Mon ami Pierrot ,\n                  Prete-moi ta plume ,\n                  Pour ecrire un mot ])\n\n# not an instance!!!\nfrere_jacques = [ Frere Jacques (bis) ,\n                  Dormez-vous (bis) ,\n                  Sonnez les matines (bis) ,\n                  Ding-din-don (bis) ]\n\n# instance\nfrere = Song([ Frere Jacques (bis) ,\n               Dormez-vous (bis) ,\n               Sonnez les matines (bis) ,\n               Ding-din-don (bis) ])\n\n\n# not a class function\ndef chante_moi(paroles): # create a function\n\n    for ligne in paroles:\n        print ligne   Invoke an instance.   happy_bday.sing_me_a_song()  Happy birthday to you\nI don't want to get sued\nSo I'll stop right there   Again.   bulls_on_parade.sing_me_a_song()  They rally around tha family\nWith pockets full of shells  Write  instance.class function / instance.class method  au_clair.sing_me_a_song()  Au clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot   Write the method the other around:  Class.class_function() / Class.class_method() .   #au_clair.sing_me_a_song()\nSong.sing_me_a_song(au_clair)  Au clair de la lune\nMon ami Pierrot\nPrete-moi ta plume\nPour ecrire un mot   This function is independent.  frere_jacques.chante_moi()  can t be!!!   chante_moi(frere_jacques)  Frere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)   It looks like  Class.class_function() / Class.class_method()   Song.sing_me_a_song(frere)  Frere Jacques (bis)\nDormez-vous (bis)\nSonnez les matines (bis)\nDing-din-don (bis)", 
            "title": "Exercise 40, Modules, Classes, and Objects"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-41-learning-to-speak-object-oriented", 
            "text": "Object-oriented programming (oop).  The script below ( ex41.py ) imports a word list from a text file ( ex41_words.txt ).  The script is a drill for learning oop.   import random\nimport sys\n\n## WORD_URL =  http://learncodethehardway.org/words.txt  # read a file http://learncodethehardway.org/words.txt\nWORD_TXT =  ex41_words.txt \nWORDS = []\n\n# dictionary { Python :  English }\nPHRASES = {\n     class %%%(%%%): :\n         Make a class named %%% that is-a %%%. ,\n     class %%%(object):\\n\\tdef __init__(self, ***): :\n         class %%% has-a __init__ that takes self and *** parameters. ,\n     class %%%(object):\\n\\tdef ***(self, @@@): :\n         class %%% has-a function named *** that takes self and @@@ parameters. ,\n     *** = %%%() :\n         Set *** to an instance of class %%%. ,\n     ***.***(@@@) :\n         From *** get the *** function, and call it with parameters self, @@@. ,\n     ***.*** = '***' :\n         From *** get the *** attribute and set it to '***'. \n}\n\n# do they want to drill phrases first\nif len(sys.argv) == 2 and sys.argv[1] ==  English :\n    PHRASE_FIRST = True\nelse:\n    PHRASE_FIRST = False\n\n# load up the words from the website\n## for word in urlopen(WORD_URL).readlines():\nfor word in open(WORD_TXT,  r ).readlines():\n    WORDS.append(word.strip())\n\ndef convert(snippet, phrase): # 'list comprehension', reseach on the Internet\n\n    class_names = [w.capitalize() for w in\n                    random.sample(WORDS, snippet.count( %%% ))]\n    other_names = random.sample(WORDS, snippet.count( *** ))\n    results = []\n    param_names = []\n\n    for i in range(0, snippet.count( @@@ )):\n        param_count = random.randint(1,3)\n        param_names.append(', '.join(random.sample(WORDS, param_count)))\n\n    for sentence in snippet, phrase:\n        result = sentence[:]\n\n        # fake class names\n        for word in class_names:\n            result = result.replace( %%% , word, 1)\n\n        # fake other names\n        for word in other_names:\n            result = result.replace( *** , word, 1)\n\n        # fake parameter lists\n        for word in param_names:\n            result = result.replace( @@@ , word, 1)\n\n        results.append(result)\n\n    return results\n\n# keep going until until they hit CTRL-D\ntry:\n    while True:\n        snippets = PHRASES.keys()\n        random.shuffle(snippets)\n\n        for snippet in snippets:\n            phrase = PHRASES[snippet]\n            question, answer = convert(snippet, phrase)\n            if PHRASE_FIRST:\n                question, answer = answer, question\n\n            print question\n\n            raw_input(   )\n            print  ANSWER: %s\\n\\n  % answer\nexcept EOFError:\n    print  \\nBye   alarm.deer(disgust, brass)  deer is a Class alarm function that takes arguments digust and brass\nANSWER: From alarm get the deer function, and call it with parameters self, disgust, brass.\n\nclass Building(Blood):  etc\nANSWER: Make a class named Building that is-a Blood.\n\nbucket = Berry()    Sample of the original word list, 10 out of 503:  text\naccount\nachiever\nactor\naddition\nadjustment\nadvertisement\nadvice\naftermath\nagreement\nairplane    Same script, but the list of word comes  from the Internet.   A note on the script:  The use of constant variable such as WORD_URL (such variable should not be modified).  A constant variable can be anything from a number, a string to a dictionary.  The use of  try/except  pair to check for errors. It is similar to the pair  if/else .  Therea are several types of errors.  EOFError  is just one type. Consult other (or online) manuals to find out about all the types of errors.     import random\nfrom urllib import urlopen\nimport sys\n\nWORD_URL =  http://learncodethehardway.org/words.txt  # read a file\nWORDS = []\n\n# dictionary { Python :  English }\nPHRASES = {\n     class %%%(%%%): :\n         Make a class named %%% that is-a %%%. ,\n     class %%%(object):\\n\\tdef __init__(self, ***) :\n         class %%% has-a __init__ that takes self and *** parameters. ,\n     class %%%(object):\\n\\tdef ***(self, @@@) :\n         class %%% has-a function named *** that takes self and @@@ parameters. ,\n     *** = %%%() :\n         Set *** to an instance of class %%%. ,\n     ***.***(@@@) :\n         From *** get the *** function, and call it with parameters self, @@@. ,\n     ***.*** = '***' :\n         From *** get the *** attribute and set it to '***'. \n}\n\n# do they want to drill phrases first\nif len(sys.argv) == 2 and sys.argv[1] ==  English :\n    PHRASE_FIRST = True\nelse:\n    PHRASE_FIRST = False\n\n# load up the words from the website\nfor word in urlopen(WORD_URL).readlines():\n    WORDS.append(word.strip())\n\ndef convert(snippet, phrase): # 'list comprehension', reseach on the Internet\n\n    class_names = [w.capitalize() for w in\n                    random.sample(WORDS, snippet.count( %%% ))]\n    other_names = random.sample(WORDS, snippet.count( *** ))\n    results = []\n    param_names = []\n\n    for i in range(0, snippet.count( @@@ )):\n        param_count = random.randint(1,3)\n        param_names.append(', '.join(random.sample(WORDS, param_count)))\n\n    for sentence in snippet, phrase:\n        result = sentence[:]\n\n        # fake class names\n        for word in class_names:\n            result = result.replace( %%% , word, 1)\n\n        # fake other names\n        for word in other_names:\n            result = result.replace( *** , word, 1)\n\n        # fake parameter lists\n        for word in param_names:\n            result = result.replace( @@@ , word, 1)\n\n        results.append(result)\n\n    return results\n\n# keep going until until they hit CTRL-D\ntry:\n    while True:\n        snippets = PHRASES.keys()\n        random.shuffle(snippets)\n\n        for snippet in snippets:\n            phrase = PHRASES[snippet]\n            question, answer = convert(snippet, phrase)\n            if PHRASE_FIRST:\n                question, answer = answer, question\n\n            print question\n\n            raw_input(   )\n            print  ANSWER: %s\\n\\n  % answer\nexcept EOFError:\n    print  \\nBye", 
            "title": "Exercise 41, Learning to Speak Object-Oriented"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-42-is-a-has-a-objects-and-classes", 
            "text": "This exercise explains Exercise 41.   Inheritance:   is-a.  object.  instance of an object.  object of object.    has-a.  attribute.  not attribute.  object.       Animal is-a object.    class Animal(object):\n\n\n    pass   Dog is-a Animal, Animal is-a object.   class Dog(Animal):\n\n\n    def __init__(self, name):\n\n    ## Cat has-a name\n        self.name = name   Cat is-a Animal, Animal is-a object.   class Cat(Animal):\n\n\n    def __init__(self, name):\n    ## Cat has-a name\n        self.name = name   Person is-a object.   class Person(object):\n\n\n    def __init__(self, name):\n\n    ## Person has-a name\n        self.name = name\n\n    ## Person has-a pet of some kind, but the pet is specifies elsewhere...\n        self.pet = None   Employee is-a Person, Person is-a object.   class Employee(Person):\n\n\n    def __init__(self, name, salary):\n\n    ## Employee has-a name, because Person has-a name\n    ## super:\n        super(Employee, self).__init__(name)\n    ## Employee has-a salary\n        self.salary = salary   Fish is-a object.   class Fish(object):\n\n\n    ## no attributes like has-a name\n    pass   Salmon is-a Fish, Fish is-a object.   class Salmon(Fish):\n\n\n    ## no attributes like has-a name\n    pass   Halibut is-a Fish, Fish is-a object.   class Halibut(Fish):\n\n\n    ## no attributes like has-a name\n    pass   rover is-a instance of name, Dog has-a name.   rover = Dog( Rover )   satan is-a instance of name, Cat has-a name.   satan = Cat( Satan )   mary is-a instance of name, Person has-a name.   mary = Person( Mary )   mary has-a Cat, Cat has-a name, satan, is-a Cat.   mary.pet = satan   frank is-a instance of name, salary, Employee has-a name, salary.   frank = Employee( Frank , 120000)   frank has-a Dog, Dog has-a name, rover, is-a Dog.   frank.pet = rover   flipper is-a instance of Fish, Fish is-a object, both has-a not attributes.   flipper = Fish()   crouse is-a instance of Salmon, Salmon is-a Fish; both has-a not attribute.   crouse = Salmon()   harry is-a instance of Halibut, Halibut is-a Fish; both has-a not attribute.   harry = Halibut()   Wrap-up.   object\n    class Fish(object)\n        class Salmon(Fish)\n            crouse = Salmon()\n        class Halibut(Fish)\n            harry = Halibut()\n        flipper = Fish()\n    class Animal(object)\n        class Dog(Animal)\n            rover = Dog( Rover ) has-a name\n        class Cat(Animal)\n            satan = Cat( Satan ) has-a name\n    class Person(object)\n        mary.pet = satan has-a name, pet\n        class Employee(Person)\n            frank = Employee ( Frank , 120000) has-a name, salary\n            frank.pet = rover has-a pet   The concept of inheritance, and those of implicit inheritance, overridden inheritance, multiple inheritance, composition, alteration, super objects (or  reinheritance ) are explained in Exercise 44.", 
            "title": "Exercise 42, Is-A, Has-A, Objects, and Classes"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-43-gothons-from-planet-percal-25", 
            "text": "This Exercise is the first to prepare the final project (Exercise 52, the last chapter). Let s create a game, from A to Z. First, start by planning. This methodology is valuable for planning any kind of project or program.  Methodology  1- Write about the problem:  Aliens have invaded a space ship and our hero has to go through a maze of rooms defeating them so he can escape into an escape pod to the planet below. The game will be more like a Zork or Adventure type game with text outputs and funny ways to die. The game will involve an engine that runs a map full of rooms or scenes. Each room will print its own description when the player enters it and then tell the engine what room to run next out of the map.  2- Describe each scene:   Death  This is when the player dies and should be something funny.    Central Corridor  This is the starting point and has a Gothon already standing there they have to defeat with a joke before continuing.    Laser Weapon Armory  This is where the hero gets a neutron bomb to blow up the ship before getting to the escape pod. It has a keypad the hero has to guess the number for.    The Bridge  Another battle scene with a Gothon where the hero places the bomb.    Escape Pod  Where the hero escapes but only after guessing the right escape pod.      3- Draw a map, write more descriptions.  4- Extract key concepts:   1 concept = 1 class.  Research them, deepen things.  Nouns = concepts = classes:  Alien  Player  Ship  Maze  Room  Scene  Gothon  Escape Pod  Planet  Map  Engine  Death  Central Corridor  Laser Weapon Armory  The Bridge    Verbs = functions.   This is par the PEP: classes should be in an explicit noun startin with a uppercased letter such as  class Central Corridor() . Functions should be verbs such as  def play(): .  5- Create a class Hierarchy and object Map   Make a class Hierarchy:  Map  Engine  Scene  Death  Central Corridor  Laser Weapon Armory  The Bridge  Escape Pod     PEP: I know from the description I m going to need a way to  run  the engine,  get the next scene  from the map, get the  opening scene , and  enter  a scene. I ll add those like this:   Map  next_scene  opening_scene  Engine  play  Scene  enter  Death  Central Corridor  Laser Weapon Armory  The Bridge  Escape Pod   All the scenes under another scene will inherit it; except  enter : override it later.  6- Code the Classes and a Test to Run Them:   Turn:   - Map\n    - next_scene (verb)\n    - opening scene (verb)\n- Engine\n    - play (verb)\n- Scene\n    - enter (verb)\n    - Death\n    - Central Corridor\n    - Laser Weapon Armory\n    - The Bridge\n    - Escape Pod   Into:   class Map(object): \n    def __init__(self, start_scene):\n    def next_scene(self, start_scene):    \n    def opening_scene(self):\n\nclass Engine(object): \n    def __init__(self, scene_map):\n    def play(self):\n\nclass Scene(object):\n    def enter(self):\n\n    class CentralCorridor(Scene):\n        def enter(self):\n    class LaserWeaponArmory(Scene):\n        def enter(self):\n    class TheBridge(Scene):\n        def enter(self):\n    class EscapePod(Scene):\n        def enter(self):\n    class Death(Scene):\n        def enter(self):\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()   Into:   class Scene(object):\n\n    def enter(self):\n        pass\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map):\n        pass\n    def play(self):\n        pass\n\n\nclass Death(Scene):\n\n    def enter(self):\n        pass\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self):\n        pass\n\n\n    def enter(self):\n        pass\n\n\nclass TheBridge(Scene):\n    def enter(self):\n        pass\n\n\nclass EscapePod(Scene):\n\n    def enter(self):\n        pass\n\n\nclass Map(object):\n\n    def __init__(self, start_scene):\n        pass\n    def next_scene(self, scene_name):\n        pass\n    def opening_scene(self):\n        pass\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()   Start coding (first code skeleton).   class Scene(object):\n\n\n    def enter(self):\n\n        pass\n\nclass Engine(object):\n\n\n    def __init__(self, scene_map):\n\n        pass\n\n    def play(self):\n\n        pass\n\n\nclass Death(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass CentralCorridor(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass LaserWeaponArmory(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass TheBridge(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass EscapePod(Scene):\n\n\n    def enter(self):\n\n        pass\n\n\nclass Map(object):\n\n\n    def __init__(self, start_scene):\n\n        pass\n\n    def next_scene(self, scene_name):\n\n        pass\n\n    def opening_scene(self):\n\n        pass\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()   Improve the code.   # import two functions from two libraries\nfrom sys import exit\nfrom random import randint\n\n# class to generate child classes\nclass Scene(object):\n\n    def enter(self):\n\n        print  This scene is not yet configured. Subclass it and implement enter(). \n        exit(1)\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map):\n\n        self.scene_map = scene_map\n\n    def play(self):\n\n        current_scene = self.scene_map.opening_scene() # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below\n\n        last_scene = self.scene_map.next_scene('finished') # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below\n\n        while current_scene != last_scene:\n\n            next_scene_name = current_scene.enter() # function/method from class Scene(object) above\n\n            current_scene = self.scene_map.next_scene(next_scene_name) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object)\n\n        current_scene.enter() # use newly-created current_scene with function/method from class Scene(object) above\n\n\nclass Death(Scene):\n\n    quips = [ You died.  You kinda suck at this. ,  Your mom would be proud...if she were smarter. ,  Such a louser. ,  I have a small puppy that's better at this. ] # a list (variable) where a random method will extract an element\n\n    def enter(self):\n\n        print Death.quips[randint(0, len(self.quips)-1)] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list)\n        exit(1)\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print  The Gothons of Planet Percal #25 have invaded your ship and destroyed \n        print  your entire crew.  You are the last surviving member and your last \n        print  mission is to get the neutron destruct bomb from the Weapons Armory, \n        print  put it in the bridge, and blow the ship up after getting into an  \n        print  escape pod. \n        print  \\n \n        print  You're running down the central corridor to the Weapons Armory when \n        print  a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume \n        print  flowing around his hate filled body.  He's blocking the door to the \n        print  Armory and about to pull a weapon to blast you. \n\n        action = raw_input( shoot!/dodge!/tell a joke   ) \n\n        if action ==  shoot! :\n            print  Quick on the draw you yank out your blaster and fire it at the Gothon. \n            print  His clown costume is flowing and moving around his body, which throws \n            print  off your aim.  Your laser hits his costume but misses him entirely.  This \n            print  completely ruins his brand new costume his mother bought him, which \n            print  makes him fly into an insane rage and blast you repeatedly in the face until \n            print  you are dead.  Then he eats you. \n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action ==  dodge! :\n            print  Like a world class boxer you dodge, weave, slip and slide right \n            print  as the Gothon's blaster cranks a laser past your head. \n            print  In the middle of your artful dodge your foot slips and you \n            print  bang your head on the metal wall and pass out. \n            print  You wake up shortly after only to die as the Gothon stomps on \n            print  your head and eats you. \n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action ==  tell a joke :\n            print  Lucky for you they made you learn Gothon insults in the academy. \n            print  You tell the one Gothon joke you know: \n            print  Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr. \n            print  The Gothon stops, tries not to laugh, then busts out laughing and can't move. \n            print  While he's laughing you run up and shoot him square in the head \n            print  putting him down, then jump through the Weapon Armory door. \n            return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        else:\n            print  DOES NOT COMPUTE! \n            return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass LaserWeaponArmory(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print  You do a dive roll into the Weapon Armory, crouch and scan the room \n        print  for more Gothons that might be hiding.  It's dead quiet, too quiet. \n        print  You stand up and run to the far side of the room and find the \n        print  neutron bomb in its container.  There's a keypad lock on the box \n        print  and you need the code to get the bomb out.  If you get the code \n        print  wrong 10 times then the lock closes forever and you can't \n        print  get the bomb.  The code is 3 digits. \n        code =  %d%d%d  %(1,2,3) #% (randint(1,9), randint(1,9), randint(1,9))\n        guess = raw_input( [keypad]   )\n        guesses = 0\n\n        while guess != code and guesses   10:\n            print  BZZZZEDDD! \n            guesses += 1\n            guess = raw_input( [keypad]   )\n\n        if guess == code:\n            print  The container clicks open and the seal breaks, letting gas out. \n            print  You grab the neutron bomb and run as fast as you can to the \n            print  bridge where you must place it in the right spot. \n            return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print  The lock buzzes one last time and then you hear a sickening \n            print  melting sound as the mechanism is fused together. \n            print  You decide to sit there, and finally the Gothons blow up the \n            print  ship from their ship and you die. \n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass TheBridge(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print  You burst onto the Bridge with the netron destruct bomb \n        print  under your arm and surprise 5 Gothons who are trying to \n        print  take control of the ship.  Each of them has an even uglier \n        print  clown costume than the last.  They haven't pulled their \n        print  weapons out yet, as they see the active bomb under your \n        print  arm and don't want to set it off. \n\n        action = raw_input( throw the bomb/slowly place the bomb   )\n\n        if action ==  throw the bomb :\n            print  In a panic you throw the bomb at the group of Gothons \n            print  and make a leap for the door.  Right as you drop it a \n            print  Gothon shoots you right in the back killing you. \n            print  As you die you see another Gothon frantically try to disarm \n            print  the bomb. You die knowing they will probably blow up when \n            print  it goes off. \n            return 'death'\n\n        elif action ==  slowly place the bomb :\n            print  You point your blaster at the bomb under your arm \n            print  and the Gothons put their hands up and start to sweat. \n            print  You inch backward to the door, open it, and then carefully \n            print  place the bomb on the floor, pointing your blaster at it. \n            print  You then jump back through the door, punch the close button \n            print  and blast the lock so the Gothons can't get out. \n            print  Now that the bomb is placed you run to the escape pod to \n            print  get off this tin can. \n            return 'escape_pod'\n        else:\n            print  DOES NOT COMPUTE! \n            return  the_bridge  # input for class Map(object)'s dictionary of key:value; extract a function from another class    \n\n\nclass EscapePod(Scene):\n\n    def enter(self): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print  You rush through the ship desperately trying to make it to \n        print  the escape pod before the whole ship explodes.  It seems like \n        print  hardly any Gothons are on the ship, so your run is clear of \n        print  interference.  You get to the chamber with the escape pods, and \n        print  now need to pick one to take.  Some of them could be damaged \n        print  but you don't have time to look.  There's 5 pods, which one \n        print  do you take? \n\n        good_pod = 1#randint(1,5)\n        guess = raw_input( [pod #]   )\n\n        if int(guess) != good_pod:\n            print  You jump into pod %s and hit the eject button.  % guess\n            print  The pod escapes out into the void of space, then \n            print  implodes as the hull ruptures, crushing your body \n            print  into jam jelly. \n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print  You jump into pod %s and hit the eject button.  % guess\n            print  The pod easily slides out into space heading to \n            print  the planet below.  As it flies to the planet, you look \n            print  back and see your ship implode then explode like a \n            print  bright star, taking out the Gothon ship at the same \n            print  time.  You won! \n            return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Finished(Scene):\n\n    def enter(self):\n\n        print  You won! Good job. \n        return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Map(object):\n\n    scenes = {\n        'central_corridor': CentralCorridor(),\n        'laser_weapon_armory': LaserWeaponArmory(),\n        'the_bridge': TheBridge(),\n        'escape_pod': EscapePod(),\n        'death': Death(),\n        'finished': Finished(),\n    }\n\n    def __init__(self, start_scene):\n\n        self.start_scene = start_scene\n\n    def next_scene(self, scene_name):\n\n        val = Map.scenes.get(scene_name)\n        return val\n\n    def opening_scene(self):\n\n        return self.next_scene(self.start_scene)\n\n\na_map = Map('central_corridor')\na_game = Engine(a_map)\na_game.play()   Improve   # import two functions from two libraries\nfrom sys import exit\nfrom random import randint\nimport time\nimport math\n\n# class to generate child classes\nclass Scene(object):\n\n    def enter(self):\n\n        print  This scene is not yet configured. Subclass it and implement enter(). \n        exit(1)\n\n\nclass Engine(object):\n\n    def __init__(self, scene_map, hero):\n\n        self.scene_map = scene_map\n        self.hero = hero\n\n    def play(self):\n\n        current_scene = self.scene_map.opening_scene() # instance of class Engine(object), __init__(self, scene_map) with method/function opening_scene(self) from class Map(object) below\n\n        last_scene = self.scene_map.next_scene('finished') # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object) below\n\n        while current_scene != last_scene: # True:\n            print  \\n---------- \n            next_scene_name = current_scene.enter(self.hero) # function/method from class Scene(object) above\n\n            current_scene = self.scene_map.next_scene(next_scene_name) # instance of class Engine(object), __init__(self, scene_map) with method/function next_scene(self, scene_name) from class Map(object)\n\n        current_scene.enter() # use newly-created current_scene with function/method from class Scene(object) above\n\n\nclass Death(Scene):\n\n    quips = [ Death1 ,  Death2 ,  Death3 ,  Death4 ] # a list (variable) where a random method will extract an element\n\n    def enter(self, hero):\n\n        print Death.quips[randint(0, len(self.quips)-1)] # use class Death(object)'s variable and run a randint method; randint(1st random element from a number of elements contain in the list)\n        exit(1)\n\n\nclass CentralCorridor(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print  Enter. Select. \n        action = raw_input( Pick one: a/b/c   ).upper() \n\n        if action ==  A :\n            print  Ouch! \n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action ==  B :\n            print  Aye! \n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        elif action ==  C :\n            print  Good. \n            return 'laser_weapon_armory' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n        else:\n            print  DOES NOT COMPUTE! \n            return 'central_corridor' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass LaserWeaponArmory(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print  Pick a 3-digit combinaison. \n        code =  %d%d%d  %(1,2,3) #% (randint(1,9), randint(1,9), randint(1,9))\n        print code\n        guess = raw_input( [keypad]   )\n        guesses = 0\n\n        while guess != code and guesses   10:\n            print  BZZZZEDDD! \n            guesses += 1\n            guess = raw_input( [keypad]   )\n\n        if guess == code:\n            print  Click! Go! \n            return 'the_bridge' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print  Boom! \n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass TheBridge(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print  Bridge enigma. \n\n        action = raw_input( true/false   ).upper()\n\n        if action ==  TRUE  or action ==  T :\n            print  It goes off. \n            return 'death'\n\n        elif action ==  FALSE  or action ==  F :\n            print  Escape. \n            return 'escape_pod'\n        else:\n            print  DOES NOT COMPUTE! \n            return  the_bridge  # input for class Map(object)'s dictionary of key:value; extract a function from another class    \n\n\nclass EscapePod(Scene):\n\n    def enter(self, hero): # the following will print whenever you call CentralCorridor.enter() function/method elsewhere\n\n        print  You rush! \n\n        good_pod = 1 #randint(1,5)\n        guess = raw_input( [Pick a pod #]   )\n\n        if int(guess) != good_pod:\n            print  Oups! \n            return 'death' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        else:\n            print  Good choice! \n            return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n\n\nclass Win(Scene):\n\n    def enter(self, hero):\n        print  You won! Good job. \n        return 'finished' # input for class Map(object)'s dictionary of key:value; extract a function from another class\n        # exit(0)\n\n\nclass Final(Scene):\n\n    def enter(self, hero)\n\n        monster = Monster( Gothon )\n        print  %s, You now came across the final boss %s! Let's fight!!!  % (hero.name, monster.name)\n        a_combat = Combat()\n        next_stage = a_combat.combat(hero, monster)\n        return next_stage\n\n\nclass Combat(object):\n\n    def combat(self, hero, monster): #combat between two roles\n\n        round = 1\n        while True:\n            print '='*30\n            print 'round %d' % round\n            print '='*30\n            print  Your HP: %d  % hero.hp\n            print  %s's HP: %d  % (monster.name, monster.hp)\n            print 'Which action do you want to take?'\n            print '-'*10\n            print '1) attack - Attack the enemy'\n            print '2) defend - Defend from being attacked, also will recover a bit'\n\n            try:\n                action = int(raw_input('  '))\n            except ValueError:\n                print  Please enter a number!! \n                continue\n\n            # defending should be done before attacking\n            if action == 2:\n                hero.defend()\n\n            # action of monster, 1/5 possibility it will defends\n            monster_action = randint(1, 6)\n            if monster_action == 5:\n                monster.defend()\n\n            if action == 1:\n                hero.attack(monster)\n            elif action == 2:\n                pass\n            else:\n                print  No such action! \n\n            if monster_action   5:\n                monster.attack(hero)\n\n            # whether win or die\n            if hero.hp  = 0:\n                return 'death'\n\n            if monster.hp  = 0:\n                return 'win'\n\n            hero.rest()\n            monster.rest()\n\n            round += 1\n\n\nclass Map(object):\n\n    scenes = {\n        'central_corridor': CentralCorridor(),\n        'laser_weapon_armory': LaserWeaponArmory(),\n        'the_bridge': TheBridge(),\n        'escape_pod': EscapePod(),\n        'death': Death(),\n        'final_fight': Final(),\n        'win': Win(),\n        'finished': Finished(),\n    }\n\n    def __init__(self, start_scene):\n\n        self.start_scene = start_scene\n\n    def next_scene(self, scene_name):\n\n        val = Map.scenes.get(scene_name)\n        return val\n\n    def opening_scene(self):\n\n        return self.next_scene(self.start_scene)\n\n\nclass human(object):\n\n    defending = 0\n\n    def __init__(self, name):\n\n        self.name = name\n\n    def attack(self, target): # attack the target\n\n        percent = 0\n        time.sleep(1)\n        if target.defending == 1:\n            percent = float(self.power) / 10.0 + randint(0, 10)\n            target.hp = math.floor(target.hp - percent)\n        else:\n            percent = float(self.power) / 5.0 + randint(0, 10)\n            target.hp = math.floor(target.hp - percent)\n        print  %s attack %s. %s's HP decreased by %d points.  % (self.name, target.name, target.name, percent)\n\n    def defend(self): # be in the defending state\n\n        self.defending = 1\n        print  %s is trying to defend.  % self.name\n\n    def rest(self): # recover a bit after each round\n\n        if self.defending == 1:\n            percent = self.rate * 10 + randint(0, 10)\n        else:\n            percent = self.rate * 2 + randint(0, 10)\n        self.hp += percent\n        print  %s's HP increased by %d after rest.  % (self.name, percent)\n        self.defending = 0\n\n\nclass Hero(Human): # class for hero\n\n    hp = 1000\n    power = 200\n    rate = 5\n\n\nclass Monster(Human): # class for monster\n\n    hp = 5000\n    power = 250\n    rate = 5\n\n\na_map = Map('central_corridor')\na_hero = Hero('Joe')\na_game = Engine(a_map)\na_game.play()", 
            "title": "Exercise 43, Gothons from Planet Percal #25"
        }, 
        {
            "location": "/Learn Python the Hard Way/#wrap-up", 
            "text": "Draw a mindmap.  Draw a flowchart.  List all variables, data, other objects and add comments.  Build the modules (classes) and embed the primal code.  Refine.  Use a visualizing software.", 
            "title": "Wrap up"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-44-inheritance-vs-composition", 
            "text": "From the manual.", 
            "title": "Exercise 44, Inheritance vs Composition"
        }, 
        {
            "location": "/Learn Python the Hard Way/#when-to-use-inheritance-or-composition", 
            "text": "The question of  inheritance versus composition  comes down to an attempt to solve the problem of reusable code.   You don t want to have duplicated code all over your software, since that s not clean and efficient.    Inheritance: solves this problem by creating a mechanism for you to have implied features in base classes.  Composition: solves this by giving you modules and the ability to call functions in other classes.   If both solutions solve the problem of reuse, then which one is appropriate in which situations? The answer is incredibly subjective, but I ll give you my three guidelines for when to do which:   Avoid multiple Inheritance at all costs, as it s too complex to be reliable. If you re stuck with it, then be prepared to know the class hierarchy and spend time finding where everything is coming from.  Use Composition to package code into modules that are used in many different unrelated places and situations.  Use Inheritance only when there are clearly related reusable pieces of code that fit under a single common concept or if you have to because of something you re using.   The thing to remember about object-oriented programming is that it is entirely a social convention programmers have created to package and share code. In that case, find out how they use things and then just adapt to the situation.", 
            "title": "When to Use Inheritance or Composition"
        }, 
        {
            "location": "/Learn Python the Hard Way/#function-style", 
            "text": "pep  Function = Method.  A class does things: name it as if it s a command you are giving to the class. Same as  pop  is saying  pop this off the list .  Keep functions small and simple (PEP).  Class Style   Use the camel case:  SuperGoldFactory .  Minimize what  __init__  does. It should be simple to use.  Other class functions use the underscore format:  my_awesome_hair .  Be consistent in how you organize your function arguments. Function 1 takes  (dog, cat, user) , function 2 should take  (dog, cat, user) . Unless there is a good reason.  Variable should be self-contained. Limit importing from modules or globals.  Always have a class  Name(object)  on top of all.   Code Style   Give your code vertical space to read.  Read you code out loud to test it. Change the difficult passages to improve readibility.  Imitate other coders: find you style.  Respect others s style; be a team player.   Good Comments   Describe why you are doing doing what you are doing.  Write for the others.  Write sentences.  Avoid clutering the code though. Short sentences, to the point.  Review your comments.", 
            "title": "Function Style"
        }, 
        {
            "location": "/Learn Python the Hard Way/#composition", 
            "text": "In this code I m not using the name Parent, since there is not a parent-child is-a relationship. This is a has-a relationship, where Child has-a Other that it uses to get its work done.   class Other(object):\n\n    def implicit(self):\n\n        print  OTHER implicit() \n\n    def override(self):\n\n        print  OTHER override() \n\n    def altered(self):\n\n        print  OTHER altered() \n\n\nclass Child(object):\n\n    def __init__(self):\n\n        self.other = Other() # initialize this class with Other(), when an instance is created, it will inherit the class member variables, class functions...\n\n    def implicit(self):\n\n        self.other.implicit() # call the other class function \n\n    def override(self):\n\n        print  CHILD override() \n\n    def altered(self):\n\n        print  CHILD, BEFORE OTHER altered() \n        self.other.altered() # call the other class function\n        print  CHILD, AFTER OTHER altered() \n\n\nson = Child() # instance\n\nson.implicit()\nson.override()\nson.altered()", 
            "title": "Composition"
        }, 
        {
            "location": "/Learn Python the Hard Way/#implicit-inheritance", 
            "text": "Actions on the child imply an action on the parent.  The use of pass under the  class Child:  is how you tell Python that you want an empty block. This creates a class named  Child  but says that there s nothing new to define in it. Instead it will inherit all of its behavior from  Parent .  If you put functions in a base class (i.e.,  Parent ) then all subclasses (i.e.,  Child ) will automatically get those features. Very handy for repetitive code you need in many classes.  class Parent(object):\n\n    def implicit(self):\n\n        print  PARENT implicit() \n\n\nclass Child(Parent):\n\n    pass\n\n\ndad = Parent()\nson = Child()", 
            "title": "Implicit Inheritance"
        }, 
        {
            "location": "/Learn Python the Hard Way/#inherit-from-both-classes", 
            "text": "Python has to look-up the possible function in the class hierarchy for both  Child  and  BadStuff , but it needs to do this in a consistent order. To do this Python uses  method resolution order  (MRO) and an algorithm called C3 to get it straight.  Because the MRO is complex and a well-defined algorithm is used, Python can t leave it to you to get the MRO right. Instead, Python gives you the  super()  function, which handles all of this for you in the places that you need the altering type of actions as I did in Child.altered. With  super()  you don t have to worry about getting this right, and Python will find the right function for you.  class SuperFun(Child, BadStuff):\n\n    pass", 
            "title": "Inherit from both Classes"
        }, 
        {
            "location": "/Learn Python the Hard Way/#override-explicitly", 
            "text": "Actions on the child override the action on the parent.  As you can see, it runs the  Parent.override  function because that variable (dad) is a Parent. But it also runs   Child.override  messages because son is an instance of  Child  and  Child  overrides that function by defining its own version.  class Parent(object):\n\n    def override(self):\n        print  PARENT override() \n\n\nclass Child(Parent):\n\n    def override(self):\n\n        print  CHILD override() \n\n\ndad = Parent()\nson = Child()\n\ndad.override()\nson.override()", 
            "title": "Override Explicitly"
        }, 
        {
            "location": "/Learn Python the Hard Way/#alter-before-or-after", 
            "text": "Actions on the child alter the action on the parent.  son.altered()  overrides Parent.altered the  Child.altered  version runs, and line 9 executes like you d expect. In this case I want to do a before and after, I want to use super to get the  Parent.altered  version. I call  super(Child, self).altered() , which is aware of inheritance and will get the  Parent  class for you. You should be able to read this as  call super with arguments  Child  and  self , then call the function altered on whatever it returns.  At this point, the  Parent.altered  version of the function runs, and that prints out the Parent message. Finally, this returns from the  Parent.altered  and the  Child.altered  function continues to print out the after message.  class Parent(object):\n\n    def altered(self):\n\n        print  PARENT altered() \n\nclass Child(Parent):\n\n    def altered(self):\n\n        print  CHILD, BEFORE PARENT altered() \n        super(Child, self).altered()\n        print  CHILD, AFTER PARENT altered() \n\n\ndad = Parent()\nson = Child()\n\ndad.altered()\nson.altered()", 
            "title": "Alter Before or After"
        }, 
        {
            "location": "/Learn Python the Hard Way/#super", 
            "text": "With  super ,  Child  reinherit from the  Parent .  The most common use of  super()  is actually in  __init__  functions in base classes. Then additional class functions.  class Child(Parent):\n\n    def __init__(self, stuff):\n\n        self.stuff = stuff\n        super(Child, self).__init__()", 
            "title": "Super"
        }, 
        {
            "location": "/Learn Python the Hard Way/#all-three-combined", 
            "text": "class Parent(object):\n\n    def override(self):\n\n        print  PARENT override() \n\n    def implicit(self):\n\n        print  PARENT implicit() \n\n    def altered(self):\n\n        print  PARENT altered() \n\n\nclass Child(Parent):\n\n    def override(self):\n\n        print  CHILD override() \n\n    def altered(self):\n\n        print  CHILD, BEFORE PARENT altered() \n        super(Child, self).altered()\n        print  CHILD, AFTER PARENT altered() \n\n\ndad = Parent()\nson = Child()\n\ndad.implicit()\nson.implicit()\n\ndad.override()\nson.override()\n\ndad.altered()\nson.altered()", 
            "title": "All Three Combined"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-45-you-make-a-game", 
            "text": "Use an existing project, Exercise 43 for example, and adapt it. This is a first draft for a project  1  Storyboarding tool.  Create a program that would question the user on its data and advise him on what would be the best graphics to use. Frame by frame, the user could build a presentation knowing slide 1 should be a histogram, slide 2 a scatter plot, etc.   2   Map  next_graph  opening comment (verb)    Engine  choose (verb)     Graph   proceed (verb)  CC pie  IC bar  TSC column, line  FDC column, line  CorC bar, dot     opening comment   general comment  storytelling  pie  compare data, y, n  y, stacked bar chart  n, pie chart with a maximum of 6 items    bar  simple series of data or items: h deviation bar chart (tornado), divide A from B (winners from losers, good markets from bad markets): h deviation bar chart (tornado), mix of two components (portfolio A items vs portfolio B items):sliding h bar chart, high-low spreads:range h bar chart, correlation x1 and x2 with y (two products, two markets  with): paired bar chart, compare aspects (with or without discount, red or blue paint):group h bar chart, components of the total: subdivided h bar chart    column  p.37, 42    line  p.39, 44-45    surface  p. 40    dot  p.49     3   Create module  3graph_story  (proof of concept).  The module presents a story in 3 graphs, according to 3 sets of data.   class Map(object):\n    def __init__(self,start):\n    def next(self, start):\n    def opening(self):\n\nclass Engine(object):\n    def __init__(self,graph_map):\n    def choose(self):\n\nclass Graph(object):\n    def proceed(self):\n\n    class 1CC(Graph):\n        def enter(self)\n            pie\n    class 2IC(Graph):\n        def enter(self):\n            bar\n    class 3TSC(Graph):\n        def enter(self):\n            column\n            line\n    class 4FDC(Graph):\n        def enter(self):\n            column\n            line\n    class 5CorC(Graph):\n        def enter(self):\n            bar\n            dot  And so on. Consult the manual to find out more", 
            "title": "Exercise 45, You Make a Game"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-46-a-project-skeleton", 
            "text": "The  skeleton  directory (see below) or the directory framework will have all the basics you need to get a new project up and running.   It will have your project layout, automated tests, modules, and install scripts.   \\:.\n\u251c\u2500\u2500\u2500bin\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500docs\n\u251c\u2500\u2500\u2500NAME\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u251c\u2500\u2500\u2500tests\n\u2502   \u251c\u2500\u2500\u2500__init__.py\n\u2502   \u2514\u2500\u2500\u2500__init__.pyc\n\u2514\u2500\u2500\u2500setup.py      \\:.  is the project parent directory or simply  the  directory (its name is the project s name).  The directory is the place to be when launching scripts.  bin  is the main sub-directory. It contains the main script ( python bin/main.py ) for launching other scripts in the project; and launching tests as well. These script are often located in other sub-directories.  A sub-directory must be executable to import a module from it or execute a script in it: add an empty script called  __init__.py .  When a script is executed, it is compiled. Another script, with the extension  .pyc , appears. Same as for  __init__.pyc , as the sub-directory was executed (when a script import a script from another sub-directory for example).  tests  contains files to perform nose tests and unittests.  setup.py  is for documenting and distributing the project (when the project is compiled to be launched as a whole or frozen to be distributed).  You can add a  readme  file below (usually a text or markdown document).  The  docs  sub-directory contains all the project s documentation. It is more elaborate than the  readme  file: manuals, explanations, logs, wikis, etc.  There can be other sub-directories for static such as images, web languages, etc.  Repeat this directory structure for every project.  To clean up the directory, in the bash:   find . -name  *.pyc  -print #display\nfind . -name  *.pyc  -exec rn{}\\; 1 remove\n\ngrep -r  NAME  * #search within files   In Linux, before running any script, be sure to set the path to the project directory.   Bash:   export PYTHONPATH=.\nexport PYTHONPATH=$PYTHONPATH:$PWD\n\nunset PYTHONPATH # to remove   In Windows, set the path in the environment variables. Otherwise, Python won t find the scripts.  PowerShell:   $env:PYTHONPATH =  $env:PYTHONPATH;.    Or, on top of the Python code, below the shebang lnes, and before any other imports, add:   import sys\nsys.path # to view\nsys.path.append('.') # to set   Consult the manual to find out more.", 
            "title": "Exercise 46, A Project Skeleton"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-47-automated-testing", 
            "text": "", 
            "title": "Exercise 47, Automated Testing"
        }, 
        {
            "location": "/Learn Python the Hard Way/#miscellaneous-notes", 
            "text": "The project directory is  ex47 .  Test if you migrated the files correctly. In the bash:   grep -r NAME *  # no traces of 'NAME', from 'skeleton'\nfind . -name  *.pyc  -exec rm {} \\; # no trace of 'name'   When you launch a script, you launch it from the parent directory with  python bin/app.py .  In directory  ex47 , run tests with  python tests/BLAH_tests.py .   Consult the manual about testing. This is not covered in this notebook.   Testing must be done in the shell or in the bash. Make sure you re running the tests with nosetests not with just Python.   The important functions here are  assert_equal  which makes sure that variables you have set or paths you have built in a Room are actually what you think they are. If you get the wrong result, then nosetests will print out an error message so you can go figure it out.  In a script, when you import from another sub-directory, code:   from ex47.game import Room   When the imported script is in the same sub-directory, code:   from bin import Room   Consult the manual to find out more.", 
            "title": "Miscellaneous notes"
        }, 
        {
            "location": "/Learn Python the Hard Way/#exercise-50-your-first-website", 
            "text": "", 
            "title": "Exercise 50, Your First Website"
        }, 
        {
            "location": "/Learn Python the Hard Way/#an-overview", 
            "text": "Web framework for web projects.  Django (the real deal, but complicated), Flask (modest), Pyramid (scalable), etc.  Or the simple, yet powerful enough, web.py.  Exercises, from 50 to 52, are done with web.p", 
            "title": "An overview"
        }, 
        {
            "location": "/Python Code Snippets/", 
            "text": "CONTENT\n\n\nA Battleship Game\n\n\nAn Interactive Calendar\n\n\nA Gradebook for Students\n\n\nGuess Games\n\n\nRegex Tools\n\n\nRGB-HEX Converter\n\n\nProject DNA Analysis\n\n\n\n\n\n\n\n\nForeword\n\n\nCode snippets. Python 2.\n\n\n\n\nA Battleship Game\n\n\nbuild, board, grid, row, column, list, assign, random, value, loop, conditional, if, else, elif\n\n\nfrom random import randint\n\nboard = []\n\nfor x in range(5):\n    board.append([\nO\n] * 5)\n\ndef print_board(board):\n\n    for row in board:\n        print \n \n.join(row)\n\nprint \n\\nLet's play Battleship! You have 4 strikes to sink by ship.\\n\n\nprint_board(board)\n\ndef random_row(board):\n\n    return randint(0, len(board) - 1)\n\ndef random_col(board):\n\n    return randint(0, len(board) - 1)\n\nship_row = random_row(board)\nship_col = random_col(board)\n#ship_row = 1 to test and fix to (1,1)\n#ship_col = 1\n\nfor turn in range(5):\n    turn += 1\n    if turn == 5:\n        print \n\\nGame Over\n\n        print \nThe ship was here =\n I\\n\n\n        board[ship_row - 1][ship_col - 1] = \nI\n\n        print_board(board)\n        break\n    else:\n        print \n\\nTurn\n, turn\n\n        guess_row = int(raw_input(\nGuess Row (1 to 5): \n))\n        guess_col = int(raw_input(\nGuess Col (1 to 5): \n))\n\n        if (guess_row == ship_row) and (guess_col == ship_col):\n            print \n\\nCongratulations! You sank my battleship!\\n\n\n\n            guess_row = guess_row - 1\n            guess_col = guess_col - 1\n            board[guess_row][guess_col] = \nS\n\n\n            print_board(board)\n            print \n\\nGame Over\n\n            break\n\n        elif (guess_row \n 1 or guess_row \n 5) or (guess_col \n 1 or guess_col \n 5):\n            print \n\\nOops, that's not even in the ocean.\\n\n\n\n        elif board[guess_row - 1][guess_col - 1] == \nX\n:\n            print \n\\nYou guessed that one already.\\n\n\n            print_board(board)\n\n        else:\n            print \n\\nYou missed my battleship!\\n\n\n            board[guess_row - 1][guess_col - 1] = \nX\n\n            print_board(board)\n\n\n\n\n\nAn Interactive Calendar\n\n\nadd, delete, update, exit, dictionary, loop, conditional, if, else, elif\n\n\nfrom time import sleep, strftime\n\nhis_name = raw_input(\nWhat is your first name? \n)\nhis_name = str(his_name)\n# calendar will store the dates as keys and the events as values\n\ncalendar = {}\n\ndef welcome():\n\n    print(\nWelcome \n + his_name +\n.\n)\n\n    print(\nCalendar starting...\n)\n    sleep(0.5)\n    print(\nToday is: \n + strftime(\n%A, %B %d, %Y\n))\n    print(\nIt is currently: \n + strftime(\n%H:%M:%S\n))\n    sleep(0.5)\n\ndef start_calendar():\n\n    welcome()\n    print(\nWhat would you like to do?\n)\n    print(calendar)\n    start = True\n\n    while start:\n        user_choice = raw_input(\nChoose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit? \n).upper()\n\n        if user_choice == 'V': # V\n            if len(calendar.keys()) \n 1:\n                print(\nThe calendar is empty\n)\n            else:\n                print(calendar)\n\n        elif user_choice == 'U': # U\n            if len(calendar.keys()) \n 1:\n                print(\nThe calendar is empty\n)\n            else:\n                print(calendar)\n                date = raw_input(\nWhat date? \n)\n                update = raw_input(\nEnter the update: \n)\n                # could be more control here...\n                calendar[date] = update # without checking if the date is valid or if it already exists (which could override things)!\n                print(\nSuccessful!\n)\n                print(calendar)\n\n        elif user_choice == 'A': # A\n            event = raw_input(\nEnter event: \n)\n            date = raw_input(\nEnter date (MM/DD/YYYY): \n)\n            if (len(date) \n 10 or int(date[6:]) \n int(strftime(\n%Y\n))): # could be more control...\n                print(\nInvalid date format.\n)\n                try_again = raw_input(\nTry Again? 'Y' for Yes, 'N' for No: \n).upper()\n                if try_again == 'Y':\n                    continue #! break, continue, start is still True\n                else:\n                    start == False\n            else:\n                calendar[date] = event # without checking if the date is valid or if it already exists (which could override things)!\n                print(\nSuccessful!\n)\n                print(calendar)\n\n        elif user_choice == 'D': # D\n            if len(calendar.keys()) \n 1:\n                print(\nThe calendar is empty.\n)\n            else:\n                print(calendar)\n                event = raw_input(\nWhat event? \n) # could be more option like: What date?\n                for date in calendar.keys():\n                    if event == calendar[date]:\n                        del calendar[date] # del a[], [1], [\na\n], [1:3], [5:], [:9], etc.\n                        print(\nDeleted.\n)\n                        print(calendar)\n                    else:\n                        print(\nIncorrect.\n)\n\n        elif user_choice == 'X': # X\n            start = False\n\n        else:\n            print(\nInvalid command.\n)\n            break\n\nstart_calendar()\n\n\n\n\nA Gradebook for Students\n\n\nstudents, marks, grades, compute, average, weighted\n\n\nFirst, create 3 dictionaries.\n\n\nSecond, add names, marks.\n\n\nlloyd = {\n    \nname\n : \nLloyd\n,\n    \nhomework\n : [90.0, 97.0, 75.0, 92.0],\n    \nquizzes\n : [88.0, 40.0, 94.0],\n    \ntests\n : [75.0, 90.0]\n}\n\nalice = {\n    \nname\n: \nAlice\n,\n    \nhomework\n : [100.0, 92.0, 98.0, 100.0],\n    \nquizzes\n : [82.0, 83.0, 91.0],\n    \ntests\n : [89.0, 97.0]\n}\n\ntyler = {\n    \nname\n : \nTyler\n,\n    \nhomework\n : [0.0, 87.0, 75.0, 22.0],\n    \nquizzes\n : [0.0, 75.0, 78.0],\n    \ntests\n : [100.0, 100.0]\n}\n\n\n\n\nThird, make a list.\n\n\nstudents= [lloyd, alice, tyler]\n\ncases = [\nhomework\n, \nquizzes\n, \ntests\n]\n\nw_calc = [0.10, 0.30, 0.60]\n\nall_average = 0.0\n\n\n\n\nPrint out.\n\n\nprint \n\\nStudents' Grades\n.upper()\n\nprint \n\n\nfor student in students:\n    print student[\nname\n].upper()\n    print \nHomework\n\n    print student[\nhomework\n]\n    print \nQuizzes\n\n    print student[\nquizzes\n]\n    print \nTests\n\n    print student[\ntests\n]\n    print \n\n\n\n\n\nCompute averages.\n\n\ndef average(numbers):\n\n    total = sum(numbers)\n    temp = float(total) / len(numbers)\n    return temp\n\nprint \nStudents' Averages\n.upper()\n\nprint \n\n\nfor c in cases:\n    cc = c.upper()\n    print cc\n    for student in students:\n        numbers = student[c]\n        calc = round(average(numbers),1)\n        print student[\nname\n]\n        print calc\n    print \n\n\n\n\n\nCompute weighted averages.\n\n\ndef w_average(marks):\n\n    #w_calc = [0.10, 0.30, 0.60]\n    s_calc = 0\n    w = 0\n    while w \n len(w_calc):\n        s_calc += w_calc[w] * marks[w]\n        w += 1\n    return s_calc\n\ndef get_letter_grade(score):\n\n    if score \n= 90:\n        return \nA\n\n    elif score \n= 80:\n        return \nB\n\n    elif score \n= 70:\n        return \nC\n\n    elif score \n= 60:\n        return \nD\n\n    else:\n        return \nF\n\n\ndef get_class_average(ind):\n    class_total = round(ind / len(students), 1)\n    return class_total\n\nprint \nStudents' Weighted Average\n.upper()\n\nprint \n Ponderation [Homeworks, Quizzes, Tests]: [\n+str(float(w_calc[0])*100)+\n, \n+str(float(w_calc[1])*100)+\n, \n+str(float(w_calc[2])*100)+\n]\n\n\nprint \n\n\nfor student in students:\n    print(student[\nname\n] + \n's marks are:\n).upper()\n    l_calc = []\n    for c in cases:    \n        numbers = student[c]\n        calc = round(average(numbers),1)\n        l_calc.append(calc)\n    print l_calc\n    print(\nFor a weighted average of:\n)\n    ind_average = round(w_average(l_calc),1)\n    print ind_average\n    print(\nStanding for a:\n)\n    print get_letter_grade(ind_average)\n    all_average += ind_average\n    print \n\n\nprint(\nFinally, The class average is:\n).upper()\nprint get_class_average(all_average)\n\n\n\n\nGuess Games\n\n\nrandom, generate, number, conditional, if, else, ifel, loop\n\n\nGuess a number.\n\n\nimport random\n\nprint \nLucky Numbers! 3 numbers will be generated.\n\nprint \nIf one of them is a '5', you lose!\n\n\ncount = 0\n\nwhile count \n 3:\n    num = random.randint(1, 6)\n    print num\n    if num == 5:\n        print \nSorry, you lose!\n\n        break\n    count += 1\nelse:\n    print \nYou win!\n\n\n\n\n\nGuess a number (more).\n\n\nfrom random import randint\n\n# Generates a number from 1 through 10 inclusive\nrandom_number = randint(1, 10)\n\n# print random_number\nguesses_left = 3\nprint \nGuess right!\n\n\nwhile guesses_left \n 0:\n    print \nYou have \n+str(guesses_left)+\n attempts.\n\n    guess = raw_input(\nGuess a number from 1 to 10: \n)\n    if int(guess) == random_number:\n        print \nYou win!\n\n        break\n    elif guesses_left == 1:\n        print \nYou lose.\n\n        break\n    else:\n        guesses_left -= 1\n        print \nTry again.\n\n\n\n\n\nRoll a dice.\n\n\nfrom random import randint\nfrom time import sleep\n\ndef get_user_guess():\n\n    user_guess = int(raw_input(\nGuess a number: \n))\n    return user_guess\n\ndef roll_dice(number_of_sides):\n\n    first_roll = randint(1, number_of_sides)\n    second_roll = randint(1, number_of_sides)\n    max_value = number_of_sides * 2\n    print \nThe maximum value is: \n+str(max_value)\n    sleep(1)\n    user_guess = get_user_guess()\n    if user_guess \n max_value:\n        print \nYour guess is higher than the max allowed (\n+str(max_value)+\n). Please, take another guess.\n\n        return # exit the if block is condition met\n    else:\n        print \nRolling...\n\n        sleep(1)\n        print \nFirst roll is: %d\n % (first_roll)\n        sleep(1)\n        print \nSecond roll is: %d\n % (second_roll)\n        total_roll = first_roll + second_roll\n        print \nResult...\n\n        sleep(1)\n        if user_guess \n total_roll:\n            print \nYou win since your guess, \n+str(user_guess)+\n, is greater than the total roll, \n+str(total_roll)\n            return # exit\n        else:\n            print \nYou lose!\n\n            return # exit\n\nroll_dice(6)\n\n\n\n\nRock, paper, Scissors.\n\n\nfrom random import randint\nfrom time import sleep\n\noptions = [\nR\n, \nP\n, \nS\n]\nLOSE = \nYou lost!\n # constant, uppercase\nWIN = \nYou win!\n\n\ndef decide_winner(user_choice, computer_choice):\n\n    print(\nYou picked: \n+str(user_choice))\n    print \nComputer selecting...\n\n\n    sleep(1)\n\n    print(\nComputer picks: \n+str(computer_choice))\n\n    user_choice_index = options.index(user_choice)\n    computer_choice_index = options.index(computer_choice) # !!!!!\n\n    if user_choice_index == computer_choice_index:\n        print \nTie!\n\n    elif user_choice_index == 0 and computer_choice_index == 2:\n        print WIN\n    elif user_choice_index == 1 and computer_choice_index == 0:\n        print WIN\n    elif user_choice_index == 2 and computer_choice_index == 1:\n        print WIN\n    elif user_choice_index \n 2:\n        print \nInvalid choice!!!\n\n    else:\n        print LOSE\n\ndef play_RPS():\n\n    print \nLet's pay Rock-Paper-Scissors\n\n\n    user_choice = raw_input(\nSelect R for Rock, P for Paper, or S for Scissors: \n)\n\n    sleep(1)\n\n    user_choice = user_choice.upper()\n    # computer_choice = options[randint(0,2)] \n    # pull out an element from a list, the 1st (0) out of 3 (2)\n\n    computer_choice = options[randint(0,len(options)-1)] \n    # This will ensure that if we ever add more options to the game, we won't have to change this line of code.\n\n    decide_winner(user_choice, computer_choice)\n\nplay_RPS()\n\n\n\n\nRegex Tools\n\n\nRemove vowels\n\n\ndef anti_vowel(text):\n\n    vowels = \naAeEiIoOuU\n\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\n)\n    return text\n\nprint anti_vowel(\nallo\n)\n\n\n\n\nRemove all but punctuation.\n\n\ndef anti_vowel(text):\n\n    text = text.lower()\n    vowels = \nabcdefghijklmnopqrstuvwxyz1234567890$-\n\n\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char,\n)\n    for char in text:\n        if char == \n \n:\n            text = text.replace(char,\n)\n    return text\n\nprint anti_vowel(\nThe plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\\nID\\\n associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment.\n)\n\n\n\n\nScrape a text.\n\n\nurllib2, scrape, scrapy, parse, parser, split, extract, subset, join, project, gutenberg, split, conditional, count, occurences\n\n\nimport urllib2\n\nresponse = urllib2.urlopen('http://gutenberg.org/')\n\n# find Les Miserables by Victor Hugo\n# http://www.gutenberg.org/ebooks/135\n# the book is available in HTML, epub with images, w/o images, kindle with images, w/o images, and more...\n\nresponse = urllib2.urlopen('http://www.gutenberg.org/files/135/135-h/135-h.htm')\nhtml = response.read()\n\nprint html\n\nsad = 0\n\nlist_of_words = html.split(' ')\n\nfor word in list_of_words:\n    if word == 'sad':\n        sad += 1\n\nprint sad # count occurences\n\n\n\n\nScrabble score.\n\n\ndictionary, count, conditonal, if, loop\n\n\nscore = {\na\n: 1, \nc\n: 3, \nb\n: 3, \ne\n: 1, \nd\n: 2, \ng\n: 2, \n         \nf\n: 4, \ni\n: 1, \nh\n: 4, \nk\n: 5, \nj\n: 8, \nm\n: 3, \n         \nl\n: 1, \no\n: 1, \nn\n: 1, \nq\n: 10, \np\n: 3, \ns\n: 1, \n         \nr\n: 1, \nu\n: 1, \nt\n: 1, \nw\n: 4, \nv\n: 4, \ny\n: 4, \n         \nx\n: 8, \nz\n: 10}\n\ndef scrabble_score(word):\n\n    word2 = word.lower()\n\n    print word2+\n:\n,\n    points = 0\n    for letter in word2:\n        if letter == str(letter):\n            points += score[letter]\n    return points\n\nprint scrabble_score(\nab\n)\nprint scrabble_score(\nallo\n)\nprint scrabble_score(\nxylophone\n)\nprint scrabble_score(\ncoding\n)\nprint scrabble_score(\nyak\n)\n\n\n\n\nRGB-HEX Converter\n\n\nconvert, bitwise, hexadecimal, hex, rgb, color\n\n\ndef rgb_hex():\n\n    invalid_msg = \nInvalid entry\n\n    red = int(raw_input(\nEnter a 'red' (R) value, from 0 to 255: \n))\n    if red \n 0 or red \n 255:\n        print invalid_msg\n        return # return will exit the function, w/o return, the function jumps to the next line...\n\n    green = int(raw_input(\nEnter a 'green' (G) value, from 0 to 255: \n))\n    if green \n 0 or green \n 255:\n        print invalid_msg\n        return\n\n    blue = int(raw_input(\nEnter a 'blue' (B) value, from 0 to 255: \n))\n    if blue \n 0 or blue \n 255:\n        print invalid_msg\n        return\n\n    val = red \n 16 + green \n 8 + blue\n    # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character.\n    # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\n    # Become familiar with bits by reading more here.\n    print \n%s\n %(hex(val)[2:].upper()) # string formatting\n\ndef hex_rgb():\n\n    invalid_msg = \nInvalid entry\n\n    hex_val = raw_input(\nEnter a color (six hexadecimal digits): \n)\n    if len(hex_val) != 6:\n        print \nInvalid Entry\n\n    else:\n        hex_val = int(hex_val, 16)\n    two_hex_digits = 2 ** 8\n    blue = hex_val % two_hex_digits\n    hex_val = hex_val \n 8\n    green = hex_val % two_hex_digits\n    hex_val = hex_val \n 8\n    red = hex_val % two_hex_digits\n    print \nRed: %s Green: %s Blue: %s\n %(red, green,blue)\n\ndef convert():\n\n    while True:\n        option = str(raw_input(\nEnter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:. \n))\n        if option == '1':\n            print \nRGB to Hex...\n\n            rgb_hex()\n        elif option == '2':\n            print \nHex to RGB...\n\n            hex_rgb()\n        elif option == 'X' or option == 'x':\n            break\n        else:\n            print \nError\n\n\nconvert()\n\n\n\n\nProject DNA Analysis\n\n\nGiven the three suspects\n DNA and the sample DNA retrieved from the keyboard, figure out who the spy is!\n\n\nlist, open, close, file, read, line, loop, conditional, if, match\n\n\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n\n    dna_data = \n # empty string\n\n    with open(dna_file, \nr\n) as f: # f = open(dna_file, \nr\n); with, as\n        for line in f:\n            dna_data += line\n        return dna_data\n\ndef dna_codons(dna):\n\n    codons = []\n    for i in range(0,len(dna),3): # slice strings of 3 letters\n        if i+3 \n len(dna): # make sure that you don't add a string to the codon list that isn't at least 3 letters long\n            codons.append(dna[i:i+3]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3\n    return codons\n\ndef match_dna(dna):\n\n    matches = 0\n    for codon in dna:\n        if codon in sample: # if ,in\n            matches += 1\n    return matches\n\ndef is_criminal(dna_sample):\n\n    dna_data = read_dna(dna_sample)\n    codons = dna_codons(dna_data)\n    num_matches = match_dna(codons)\n    if num_matches \n= 3:\n        print((dna_sample)[:-4]).upper(),\n        print(\n: number of matches = \n + str(num_matches) + \n; the investigation will proceed further more with this suspect.\n)\n    else:\n        print((dna_sample)[:-4]).upper(),\n        print(\n: no evidence; the suspect can be freed.\n)\n\na = \nsuspect1.txt\n\nis_criminal(a)\n\na = \nsuspect2.txt\n\nis_criminal(a)\n\na = \nsuspect3.txt\n\nis_criminal(a)\n\n\n\n\nsuspect1.txt\n\n\nATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT\n\n\n\n\nsuspect2.txt\n\n\nCCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG\n\n\n\n\nsuspect3.txt\n\n\nTCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA", 
            "title": "Python Code Snippets"
        }, 
        {
            "location": "/Python Code Snippets/#an-interactive-calendar", 
            "text": "add, delete, update, exit, dictionary, loop, conditional, if, else, elif  from time import sleep, strftime\n\nhis_name = raw_input( What is your first name?  )\nhis_name = str(his_name)\n# calendar will store the dates as keys and the events as values\n\ncalendar = {}\n\ndef welcome():\n\n    print( Welcome   + his_name + . )\n\n    print( Calendar starting... )\n    sleep(0.5)\n    print( Today is:   + strftime( %A, %B %d, %Y ))\n    print( It is currently:   + strftime( %H:%M:%S ))\n    sleep(0.5)\n\ndef start_calendar():\n\n    welcome()\n    print( What would you like to do? )\n    print(calendar)\n    start = True\n\n    while start:\n        user_choice = raw_input( Choose between: 'A' to Add, 'U' to Update, 'V' to View, 'D' to Delete or 'X' to Exit?  ).upper()\n\n        if user_choice == 'V': # V\n            if len(calendar.keys())   1:\n                print( The calendar is empty )\n            else:\n                print(calendar)\n\n        elif user_choice == 'U': # U\n            if len(calendar.keys())   1:\n                print( The calendar is empty )\n            else:\n                print(calendar)\n                date = raw_input( What date?  )\n                update = raw_input( Enter the update:  )\n                # could be more control here...\n                calendar[date] = update # without checking if the date is valid or if it already exists (which could override things)!\n                print( Successful! )\n                print(calendar)\n\n        elif user_choice == 'A': # A\n            event = raw_input( Enter event:  )\n            date = raw_input( Enter date (MM/DD/YYYY):  )\n            if (len(date)   10 or int(date[6:])   int(strftime( %Y ))): # could be more control...\n                print( Invalid date format. )\n                try_again = raw_input( Try Again? 'Y' for Yes, 'N' for No:  ).upper()\n                if try_again == 'Y':\n                    continue #! break, continue, start is still True\n                else:\n                    start == False\n            else:\n                calendar[date] = event # without checking if the date is valid or if it already exists (which could override things)!\n                print( Successful! )\n                print(calendar)\n\n        elif user_choice == 'D': # D\n            if len(calendar.keys())   1:\n                print( The calendar is empty. )\n            else:\n                print(calendar)\n                event = raw_input( What event?  ) # could be more option like: What date?\n                for date in calendar.keys():\n                    if event == calendar[date]:\n                        del calendar[date] # del a[], [1], [ a ], [1:3], [5:], [:9], etc.\n                        print( Deleted. )\n                        print(calendar)\n                    else:\n                        print( Incorrect. )\n\n        elif user_choice == 'X': # X\n            start = False\n\n        else:\n            print( Invalid command. )\n            break\n\nstart_calendar()", 
            "title": "An Interactive Calendar"
        }, 
        {
            "location": "/Python Code Snippets/#a-gradebook-for-students", 
            "text": "students, marks, grades, compute, average, weighted  First, create 3 dictionaries.  Second, add names, marks.  lloyd = {\n     name  :  Lloyd ,\n     homework  : [90.0, 97.0, 75.0, 92.0],\n     quizzes  : [88.0, 40.0, 94.0],\n     tests  : [75.0, 90.0]\n}\n\nalice = {\n     name :  Alice ,\n     homework  : [100.0, 92.0, 98.0, 100.0],\n     quizzes  : [82.0, 83.0, 91.0],\n     tests  : [89.0, 97.0]\n}\n\ntyler = {\n     name  :  Tyler ,\n     homework  : [0.0, 87.0, 75.0, 22.0],\n     quizzes  : [0.0, 75.0, 78.0],\n     tests  : [100.0, 100.0]\n}  Third, make a list.  students= [lloyd, alice, tyler]\n\ncases = [ homework ,  quizzes ,  tests ]\n\nw_calc = [0.10, 0.30, 0.60]\n\nall_average = 0.0  Print out.  print  \\nStudents' Grades .upper()\n\nprint  \n\nfor student in students:\n    print student[ name ].upper()\n    print  Homework \n    print student[ homework ]\n    print  Quizzes \n    print student[ quizzes ]\n    print  Tests \n    print student[ tests ]\n    print    Compute averages.  def average(numbers):\n\n    total = sum(numbers)\n    temp = float(total) / len(numbers)\n    return temp\n\nprint  Students' Averages .upper()\n\nprint  \n\nfor c in cases:\n    cc = c.upper()\n    print cc\n    for student in students:\n        numbers = student[c]\n        calc = round(average(numbers),1)\n        print student[ name ]\n        print calc\n    print    Compute weighted averages.  def w_average(marks):\n\n    #w_calc = [0.10, 0.30, 0.60]\n    s_calc = 0\n    w = 0\n    while w   len(w_calc):\n        s_calc += w_calc[w] * marks[w]\n        w += 1\n    return s_calc\n\ndef get_letter_grade(score):\n\n    if score  = 90:\n        return  A \n    elif score  = 80:\n        return  B \n    elif score  = 70:\n        return  C \n    elif score  = 60:\n        return  D \n    else:\n        return  F \n\ndef get_class_average(ind):\n    class_total = round(ind / len(students), 1)\n    return class_total\n\nprint  Students' Weighted Average .upper()\n\nprint   Ponderation [Homeworks, Quizzes, Tests]: [ +str(float(w_calc[0])*100)+ ,  +str(float(w_calc[1])*100)+ ,  +str(float(w_calc[2])*100)+ ] \n\nprint  \n\nfor student in students:\n    print(student[ name ] +  's marks are: ).upper()\n    l_calc = []\n    for c in cases:    \n        numbers = student[c]\n        calc = round(average(numbers),1)\n        l_calc.append(calc)\n    print l_calc\n    print( For a weighted average of: )\n    ind_average = round(w_average(l_calc),1)\n    print ind_average\n    print( Standing for a: )\n    print get_letter_grade(ind_average)\n    all_average += ind_average\n    print  \n\nprint( Finally, The class average is: ).upper()\nprint get_class_average(all_average)", 
            "title": "A Gradebook for Students"
        }, 
        {
            "location": "/Python Code Snippets/#guess-games", 
            "text": "random, generate, number, conditional, if, else, ifel, loop  Guess a number.  import random\n\nprint  Lucky Numbers! 3 numbers will be generated. \nprint  If one of them is a '5', you lose! \n\ncount = 0\n\nwhile count   3:\n    num = random.randint(1, 6)\n    print num\n    if num == 5:\n        print  Sorry, you lose! \n        break\n    count += 1\nelse:\n    print  You win!   Guess a number (more).  from random import randint\n\n# Generates a number from 1 through 10 inclusive\nrandom_number = randint(1, 10)\n\n# print random_number\nguesses_left = 3\nprint  Guess right! \n\nwhile guesses_left   0:\n    print  You have  +str(guesses_left)+  attempts. \n    guess = raw_input( Guess a number from 1 to 10:  )\n    if int(guess) == random_number:\n        print  You win! \n        break\n    elif guesses_left == 1:\n        print  You lose. \n        break\n    else:\n        guesses_left -= 1\n        print  Try again.   Roll a dice.  from random import randint\nfrom time import sleep\n\ndef get_user_guess():\n\n    user_guess = int(raw_input( Guess a number:  ))\n    return user_guess\n\ndef roll_dice(number_of_sides):\n\n    first_roll = randint(1, number_of_sides)\n    second_roll = randint(1, number_of_sides)\n    max_value = number_of_sides * 2\n    print  The maximum value is:  +str(max_value)\n    sleep(1)\n    user_guess = get_user_guess()\n    if user_guess   max_value:\n        print  Your guess is higher than the max allowed ( +str(max_value)+ ). Please, take another guess. \n        return # exit the if block is condition met\n    else:\n        print  Rolling... \n        sleep(1)\n        print  First roll is: %d  % (first_roll)\n        sleep(1)\n        print  Second roll is: %d  % (second_roll)\n        total_roll = first_roll + second_roll\n        print  Result... \n        sleep(1)\n        if user_guess   total_roll:\n            print  You win since your guess,  +str(user_guess)+ , is greater than the total roll,  +str(total_roll)\n            return # exit\n        else:\n            print  You lose! \n            return # exit\n\nroll_dice(6)  Rock, paper, Scissors.  from random import randint\nfrom time import sleep\n\noptions = [ R ,  P ,  S ]\nLOSE =  You lost!  # constant, uppercase\nWIN =  You win! \n\ndef decide_winner(user_choice, computer_choice):\n\n    print( You picked:  +str(user_choice))\n    print  Computer selecting... \n\n    sleep(1)\n\n    print( Computer picks:  +str(computer_choice))\n\n    user_choice_index = options.index(user_choice)\n    computer_choice_index = options.index(computer_choice) # !!!!!\n\n    if user_choice_index == computer_choice_index:\n        print  Tie! \n    elif user_choice_index == 0 and computer_choice_index == 2:\n        print WIN\n    elif user_choice_index == 1 and computer_choice_index == 0:\n        print WIN\n    elif user_choice_index == 2 and computer_choice_index == 1:\n        print WIN\n    elif user_choice_index   2:\n        print  Invalid choice!!! \n    else:\n        print LOSE\n\ndef play_RPS():\n\n    print  Let's pay Rock-Paper-Scissors \n\n    user_choice = raw_input( Select R for Rock, P for Paper, or S for Scissors:  )\n\n    sleep(1)\n\n    user_choice = user_choice.upper()\n    # computer_choice = options[randint(0,2)] \n    # pull out an element from a list, the 1st (0) out of 3 (2)\n\n    computer_choice = options[randint(0,len(options)-1)] \n    # This will ensure that if we ever add more options to the game, we won't have to change this line of code.\n\n    decide_winner(user_choice, computer_choice)\n\nplay_RPS()", 
            "title": "Guess Games"
        }, 
        {
            "location": "/Python Code Snippets/#regex-tools", 
            "text": "Remove vowels  def anti_vowel(text):\n\n    vowels =  aAeEiIoOuU \n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char, )\n    return text\n\nprint anti_vowel( allo )  Remove all but punctuation.  def anti_vowel(text):\n\n    text = text.lower()\n    vowels =  abcdefghijklmnopqrstuvwxyz1234567890$- \n\n    for char in text:\n        for vow in vowels:\n            if vow == char:\n                text = text.replace(char, )\n    for char in text:\n        if char ==    :\n            text = text.replace(char, )\n    return text\n\nprint anti_vowel( The plethora of object oriented approaches leads to a natural question. Which one should you use? With respect to S3 and S4 classes, the S3 class is more flexible, and the S4 class is a more structured approach. This is a nice way of saying that the S3 class approach is for unaware slobs and is a sloppy way to shoot yourself in the foot, while the S4 class is for uptight pedants. Our focus here is on S3 classes. Before we delve into the details of S3 classes we need to talk about memory environments. These can be used to great effect in S3 classes to make your codes totally incomprehensible. On the down side they help give S3 classes their flexibility. An environment can be thought of as a local scope. It has a set of variables associated with it. You can access those variables if you have the \\ ID\\  associated with the environment. There are a number of commands you can use to manipulate and obtain the pointers to your environments. You can also use the assign and get commands to set and get the values of variables within an environment. )  Scrape a text.  urllib2, scrape, scrapy, parse, parser, split, extract, subset, join, project, gutenberg, split, conditional, count, occurences  import urllib2\n\nresponse = urllib2.urlopen('http://gutenberg.org/')\n\n# find Les Miserables by Victor Hugo\n# http://www.gutenberg.org/ebooks/135\n# the book is available in HTML, epub with images, w/o images, kindle with images, w/o images, and more...\n\nresponse = urllib2.urlopen('http://www.gutenberg.org/files/135/135-h/135-h.htm')\nhtml = response.read()\n\nprint html\n\nsad = 0\n\nlist_of_words = html.split(' ')\n\nfor word in list_of_words:\n    if word == 'sad':\n        sad += 1\n\nprint sad # count occurences  Scrabble score.  dictionary, count, conditonal, if, loop  score = { a : 1,  c : 3,  b : 3,  e : 1,  d : 2,  g : 2, \n          f : 4,  i : 1,  h : 4,  k : 5,  j : 8,  m : 3, \n          l : 1,  o : 1,  n : 1,  q : 10,  p : 3,  s : 1, \n          r : 1,  u : 1,  t : 1,  w : 4,  v : 4,  y : 4, \n          x : 8,  z : 10}\n\ndef scrabble_score(word):\n\n    word2 = word.lower()\n\n    print word2+ : ,\n    points = 0\n    for letter in word2:\n        if letter == str(letter):\n            points += score[letter]\n    return points\n\nprint scrabble_score( ab )\nprint scrabble_score( allo )\nprint scrabble_score( xylophone )\nprint scrabble_score( coding )\nprint scrabble_score( yak )", 
            "title": "Regex Tools"
        }, 
        {
            "location": "/Python Code Snippets/#rgb-hex-converter", 
            "text": "convert, bitwise, hexadecimal, hex, rgb, color  def rgb_hex():\n\n    invalid_msg =  Invalid entry \n    red = int(raw_input( Enter a 'red' (R) value, from 0 to 255:  ))\n    if red   0 or red   255:\n        print invalid_msg\n        return # return will exit the function, w/o return, the function jumps to the next line...\n\n    green = int(raw_input( Enter a 'green' (G) value, from 0 to 255:  ))\n    if green   0 or green   255:\n        print invalid_msg\n        return\n\n    blue = int(raw_input( Enter a 'blue' (B) value, from 0 to 255:  ))\n    if blue   0 or blue   255:\n        print invalid_msg\n        return\n\n    val = red   16 + green   8 + blue\n    # A hexadecimal number can be represented with 3 bytes, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character.\n    # Shifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\n    # Become familiar with bits by reading more here.\n    print  %s  %(hex(val)[2:].upper()) # string formatting\n\ndef hex_rgb():\n\n    invalid_msg =  Invalid entry \n    hex_val = raw_input( Enter a color (six hexadecimal digits):  )\n    if len(hex_val) != 6:\n        print  Invalid Entry \n    else:\n        hex_val = int(hex_val, 16)\n    two_hex_digits = 2 ** 8\n    blue = hex_val % two_hex_digits\n    hex_val = hex_val   8\n    green = hex_val % two_hex_digits\n    hex_val = hex_val   8\n    red = hex_val % two_hex_digits\n    print  Red: %s Green: %s Blue: %s  %(red, green,blue)\n\ndef convert():\n\n    while True:\n        option = str(raw_input( Enter '1' to convert RGB to HEX. Enter '2' to convert HEX to RGB. Enter 'X' to Exit:.  ))\n        if option == '1':\n            print  RGB to Hex... \n            rgb_hex()\n        elif option == '2':\n            print  Hex to RGB... \n            hex_rgb()\n        elif option == 'X' or option == 'x':\n            break\n        else:\n            print  Error \n\nconvert()", 
            "title": "RGB-HEX Converter"
        }, 
        {
            "location": "/Python Code Snippets/#project-dna-analysis", 
            "text": "Given the three suspects  DNA and the sample DNA retrieved from the keyboard, figure out who the spy is!  list, open, close, file, read, line, loop, conditional, if, match  sample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n\n    dna_data =   # empty string\n\n    with open(dna_file,  r ) as f: # f = open(dna_file,  r ); with, as\n        for line in f:\n            dna_data += line\n        return dna_data\n\ndef dna_codons(dna):\n\n    codons = []\n    for i in range(0,len(dna),3): # slice strings of 3 letters\n        if i+3   len(dna): # make sure that you don't add a string to the codon list that isn't at least 3 letters long\n            codons.append(dna[i:i+3]) # append to list in appendig positions 0 (new entry), 1, 2, stopping before 3\n    return codons\n\ndef match_dna(dna):\n\n    matches = 0\n    for codon in dna:\n        if codon in sample: # if ,in\n            matches += 1\n    return matches\n\ndef is_criminal(dna_sample):\n\n    dna_data = read_dna(dna_sample)\n    codons = dna_codons(dna_data)\n    num_matches = match_dna(codons)\n    if num_matches  = 3:\n        print((dna_sample)[:-4]).upper(),\n        print( : number of matches =   + str(num_matches) +  ; the investigation will proceed further more with this suspect. )\n    else:\n        print((dna_sample)[:-4]).upper(),\n        print( : no evidence; the suspect can be freed. )\n\na =  suspect1.txt \nis_criminal(a)\n\na =  suspect2.txt \nis_criminal(a)\n\na =  suspect3.txt \nis_criminal(a)  suspect1.txt  ATCGAAAGCACAATCATGCATCGTGCCAGTGTGTTCGTGTCATCTAGGACGGGGCCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTCCCCTGTGGTTCGAAGGGGAACTATTTCGTGGGGCGAGCCCACACCGTCTCTTCTGCGGAAGACTTAACACGTTAGGGAGGTGGAATAGTTTCGAACGATGGTTATTAATCGTGATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGTGTGTGACTCGATCAGTCACTCGCTATTCGAACTGCGCGAAAGATCCCAGCGCT  suspect2.txt  CCGTAAGACAAATAATTCAATAAAGATGTCGTTTTGCTAGTTTACGTCAAGGTGTCACGCGCCATCTCTGAGCAGGTGGGCCGACGAGACATTATCCCTGGAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGGATTTCCTTTTGGATACCTGAAACAAAGCCCATCGTGGTCCTTAGACTTGGCACACTTACACCTGCAGCGCGCGCATGTGGAATTAGAGGCCAAGTTCGATCCCTACACCGACGTACGATGCAACTGTGTGGATGTGACG  suspect3.txt  TCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACCATGCACTTGATTCCGAGGCCTGTCCCGATATATGAACCCAAACTAGAGCGAGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGAGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGAGGATAGCGCTAGCTAACAAAGACGCCTGCTACAACA", 
            "title": "Project DNA Analysis"
        }, 
        {
            "location": "/Introduction to Python/", 
            "text": "CONTENT\n\n\n1, A Good Way to Start (Crash Courses).\n\n\n2, More Comprehensive Courses\n\n\n3, A Comprehensive List of Courses\n\n\n4, Dive Right into a First Project\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 2 \n 3.\n\n\n\n\n1, A Good Way to Start (Crash Courses).\n\n\n\n\nA Python Course\n\n\nInstant Python\n\n\n\n\n2, More Comprehensive Courses\n\n\n\n\n\n\nThink Python\n\n\n\n\nThink Python starts with basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.\n\n\nSome examples and exercises are based on Swampy, a Python package written by the author to demonstrate aspects of software design, and to give readers a chance to experiment with simple graphics and animation.\n\n\nThink Python is a Free Book, available under the Creative Commons Attribution-NonCommercial 3.0 Unported License, which means that you are free to copy, distribute, and modify, as long as you attribute the work and don\nt use it for commercial purposes.\n\n\nSyllabus\n\n\nVariables, expressions and statements\n\n\nFunctions\n\n\nCase study: interface design\n\n\nConditionals and recursion\n\n\nFruitful functions\n\n\nIteration\n\n\nStrings\n\n\nCase study: word play\n\n\nLists\n\n\nDictionaries\n\n\nTuples\n\n\nCase study: data structure selection\n\n\nFiles\n\n\nClasses and objects\n\n\nClasses and functions\n\n\nClasses and methods\n\n\nInheritance\n\n\nCase study: Tkinter\n\n\nDebugging\n\n\nAnalysis of Algorithms\n\n\nLumpy (diagrams)\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\n\n\nCode School (focused on web frameworks)\n\n\n\n\nCodecademy (offers comprehensive intro course with a syllabus similar to the above)\n\n\nDataCamp (focused of data analysis)\n\n\nIntroduction au langage Python\n\n\nTreehouse (focused on web frameworks and specific packages)\n\n\n\n\n3, A Comprehensive List of Courses\n\n\nFrom \nThe Hitchhiker\ns Guide to Python\n\n\n4, Dive Right into a First Project\n\n\nProgramming Fundamentals in Python\n\n\n\n\nCreate a pypet.", 
            "title": "Introduction to Python"
        }, 
        {
            "location": "/Introduction to Python/#2-more-comprehensive-courses", 
            "text": "Think Python   Think Python starts with basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.  Some examples and exercises are based on Swampy, a Python package written by the author to demonstrate aspects of software design, and to give readers a chance to experiment with simple graphics and animation.  Think Python is a Free Book, available under the Creative Commons Attribution-NonCommercial 3.0 Unported License, which means that you are free to copy, distribute, and modify, as long as you attribute the work and don t use it for commercial purposes.  Syllabus  Variables, expressions and statements  Functions  Case study: interface design  Conditionals and recursion  Fruitful functions  Iteration  Strings  Case study: word play  Lists  Dictionaries  Tuples  Case study: data structure selection  Files  Classes and objects  Classes and functions  Classes and methods  Inheritance  Case study: Tkinter  Debugging  Analysis of Algorithms  Lumpy (diagrams)  Index       Code School (focused on web frameworks)   Codecademy (offers comprehensive intro course with a syllabus similar to the above)  DataCamp (focused of data analysis)  Introduction au langage Python  Treehouse (focused on web frameworks and specific packages)", 
            "title": "2, More Comprehensive Courses"
        }, 
        {
            "location": "/Introduction to Python/#3-a-comprehensive-list-of-courses", 
            "text": "From  The Hitchhiker s Guide to Python", 
            "title": "3, A Comprehensive List of Courses"
        }, 
        {
            "location": "/Introduction to Python/#4-dive-right-into-a-first-project", 
            "text": "Programming Fundamentals in Python   Create a pypet.", 
            "title": "4, Dive Right into a First Project"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/", 
            "text": "CONTENT\n\n\nChapter 2, Flow Control\n\n\nChapter 3, Functions\n\n\nChapter 4, Lists (and Tuples)\n\n\nChapter 5, Dictionaries and Structuring Data\n\n\nChapter 6, Manipulating Strings\n\n\nChapter 7, Pattern Matching and Regular Expressions\n\n\nChapter 8, Reading and Writing Files\n\n\nChapter 9, Organizing Files\n\n\nChapter 10, Debugging\n\n\nChapter 11, Web Scraping\n\n\nChapter 12, Excel Spreadsheets\n\n\nChapter 13, PDF and Word Documents\n\n\nChapter 14, CSV Files and JSON Data\n\n\nChapter 15, Time, Scheduling Tasks, and Launching Programs\n\n\nChapter 16, Sending Email and Text Messages\n\n\nChapter 17, Manipulating Images\n\n\nChapter 18, Controlling the Keyboard and Mouse with GUI Automation\n\n\nAppendix A\n\n\nAppendix B\n\n\nAppendix C\n\n\nAdditional Content\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes. Python 3. From No Starch Press, 2015. Creative Commons. More at:\n\n\n\n\nOnline at \nautomatetheboringstuff.com\n\n\nMore at \nInvent with Python.com\n\n\nBooks\n:\n\n\nDevelop video games!\n\n\nMake games with graphics!\n\n\nEncrypt messages and hack ciphers!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChapter 2, Flow Control\n\n\nboolean, comparison, operator, flow control, condition, conditional, loop\n\n\n\n\nTrue\n, \nFalse\n.\n\n\nand\n, \nor\n, \nnot\n.\n\n\n==\n, \n!=\n, \n, \n, etc.\n\n\nif\n, \nelse\n, \nelif\n\n\nLoops: \nwhile\n, \nfor\n with \nin\n, \nrange\n.\n\n\nbreak\n, \ncontinue\n.\n\n\nimport random, sys, os, math\n.\n\n\nrandom.randint\n.\n\n\nfrom random import *\n.\n\n\nsys.exit()\n.\n\n\n\n\nChapter 3, Functions\n\n\nglobal, local, variable, scope\n\n\nException handling with \ntry:\n and \nexcept\n.\n\n\nChapter 4, Lists (and Tuples)\n\n\ndata type, index, sublist, subset, slice,  change, concatenate, concatenation, tuple, convert, tuple to list\n\n\n\n\nlen()\n function; length.\n\n\nin\n and \nnot in\n operators.\n\n\n+=\n, \n-=\n, \n*=\n, \n/=\n, \n%=\n augmented assignments.\n\n\nindex()\n method; extract the position of an element.\n\n\nappend()\n method.\n\n\ninsert()\n method.\n\n\nremove()\n method.\n\n\nsort()\n method.\n\n\ncopy\n module and \ncopy()\n method.\n\n\ndeepcopy()\n method; for inner list or a list of lists (ensure the key exists).\n\n\n\n\nChapter 5, Dictionaries and Structuring Data\n\n\nloop\n\n\nDictionaries are not indexed and ordered like lists.\n\n\n\n\nkeys()\n method; extract keys.\n\n\nvalues()\n method; extract values.\n\n\nitems()\n method; extract both.\n\n\nget()\n method; check out both.\n\n\nin\n and \nnot in\n operators. \n\n\nsetdefault()\n method, check out a key and set value to a key.\n\n\n\n\nPretty print with the \npprint()\n and \npformat()\n functions.\n\n\nNested dictionaries and lists.\n\n\nChapter 6, Manipulating Strings\n\n\nEscape character: \n\\\n: \n\\'\n, \n\\\"\n, \n\\t\n, \n\\n\n, \n\\\\\n.\n\n\nRaw strings: \nprint(r'That is Carol')\n.\n\n\nTriple quotes:\n\n\nprint('''Dear Alice,\nbla-bla-bla\ncheers''')\n\nprint(\nDear Alice,\nbla-bla-bla\ncheers\n)\n\n\n\n\nComment: \n#\n.\n\nMultiline comments: \n\"\"\" \"\"\"\n.\n\n\n\n\nSlice, subset with \n[:]\n.\n\n\nin\n and \nnot in\n operators.\n\n\nlower()\n method.\n\n\nupper()\n method.\n\n\ncapitalize()\n method.\n\n\nis\n method; check if x is part of y.\n\n\nislower()\n method.\n\n\nisupper()\n method.\n\n\nisalpha()\n method; check letters, not blank.\n\n\nisalnum()\n method; check letters and numbers, and not blank.\n\n\nisdecimal()\n method; check numeric characters and not blank.\n\n\nisspace()\n method; check spaces, tabs and new lines and not blank.\n\n\nistitle()\n method; check if it begins with an uppercase letter followed with lowercase letters.\n\n\nstartwith()\n method; check if a string begins with a string of characters.\n\n\nendwith()\n method; idem.\n\n\njoin()\n method; concatenate.\n\n\nsplit()\n method.\n\n\nrjust()\n method; justify.\n\n\nljust()\n method justify.\n\n\ncenter()\n method.\n\n\nstrip()\n method; remove white space.\n\n\nrstrip()\n method; ; remove white space to the right.\n\n\nlstrip()\n method; remove white space to the left.\n\n\n\n\npyperclip\n module.\n\n\nThe \npyperclip.pyclip\n function send text to and receive text from the clipboard:\n\n\nIn addition:\n\n\nimport pyperclip\n\npyperclip.copy('Hello world!')\npyperclip.paste()\n\n\n\n\nChapter 7, Pattern Matching and Regular Expressions\n\n\npatterns of text, with, without regular expression, regex, object, match, matching, group, grouping, pipe, question mark, star, ?, *, plus, +, curly bracket, {, }, character class, digit, numeric, letter, underscore, space, tab, newline, caret, ^, dollar sign, $, wildcard, dot, ., dotstar, newline, symbols, case-sensitive, case-insensitive\n\n\nre\n module.\n\n\n\n\nre.compile()\n method; find a single occurrence.\n\n\nre.findall()\n method; find all occurrences.\n\n\nsub()\n method; substitute.\n\n\nre.IGNORECASE\n; ignore capitalization with the \ncompile()\n method.\n\n\nre.DOTALL\n; ignore dots with the \nre.compile()\n method.\n\n\nre.VERBOSE\n; write comment with the \nre.compile()\n method.\n\n\n\n\nChapter 8, Reading and Writing Files\n\n\nfile, file path, filename\n\n\nos\n module.\n\n\n\n\nA relative path: \n..\\eggs\\spam.txt\n, \n.\\fizz\\spam.txt\n.\n\n\nAn absolute path: \nC:\\bacon\\fizz\\spam.txt\n.\n\n\nos.getcwd()\n or \nos.chdir()\n functions; extract the current working directory.\n\n\nos.makedir()\nfunction; create a new folder.\n\n\n\n\nos.path\n module. \n\n\nHandle absolute and relative paths. Find file sizes and folder contents. Check path validity.\n\n\nWindows: backslash or \n\\\n:\n\n\nimport os\nos.path.join('usr', 'bin', 'spam')\n\n\n\n\nYields:\n\n\n'usr\\\\bin\\\\spam'\n\n\n\n\nUNIX: forwardslash or \n/\n:\n\n\nimport os\nos.path.join('usr', 'bin', 'spam')\n\n\n\n\nYields:\n\n\n'usr/bin/spam'\n\n\n\n\nRead and write files:\n\n\n\n\nos.path.open()\n function.\n\n\nos.path.read()\n method.\n\n\nos.path.readline()\n method.\n\n\nos.path.write()\n method.\n\n\nos.path.close()\n method.\n\n\n\n\nshelve\n module.\n\n\nHandle binary files.\n\n\npprint\n module. \n\n\nPretty printing:\n\n\n\n\npprint.pprint()\n.\n\n\npprint.pformat()\n.\n\n\n\n\nChapter 9, Organizing Files\n\n\npdf, every sub-folder, folder, foldername, subfolder, filename, file, remove, zero, change titles, compress, decompress, zip, unzip\n\n\nshutil\n module. \n\n\nCopy, move, rename, and delete files and folders. \nshutil.rmtree()\n function; delete file and folder.\n\n\nos\n module. \n\n\nDelete, empty, remove files and folders, and change the path. \nos.walk()\n method; walk the tree directory.\n\n\nsend2trash\n module. \n\n\nDelete files and folders, but much safer.\n\n\nzipfile\n module. \n\n\nCompress and uncompress. Read the content of compressed and zipped files.\n\n\n\n\nzipfile.extracall()\n; method  extracts all the files and folders from a zip file.\n\n\nwrite()\n method; create a zip file.\n\n\n\n\nChapter 10, Debugging\n\n\nHandle errors with \ntry\n and \nexcept\n.\n\n\nRaise exceptions with a \nraise\n statement and the \nException()\n function.\n\n\ntraceback\n module. \n\n\nDiscover what and how an error happens and obtain it as a string with the \ntraceback.format_exc()\n method. \n\n\nAn assertion is a sanity check performed with an \nassert\n statement. \n\n\nlogging\n module. \n\n\nDisplay log messages as the program runs. Log to a file. Debug a code. Enable and disable logging. Enable an IDLE debugger.\n\n\nSet a \nbreakpoint\n to check out potential bugs.\n\n\nChapter 11, Web Scraping\n\n\nhtml\n\n\nwebbrowser\n module.\n\n\nOpen a browser to a specific webpage (in conjunction with the \nsys\n module). \n\n\nUse:\n\n\n\n\nGet a street address from the command line to the clipboard.\n\n\nGo to a Google Maps page.\n\n\nRead command line arguments from \nsys.argv\n.\n\n\nRead the clipboard content.\n\n\nOpen all links on a page in separate tabs.\n\n\nOpen the browser to the url for local weather.\n\n\nOpen several social network sites.\n\n\n\n\nrequests\n module.\n\n\nDownload files and webpages; similar to opening, reading, writing, closing files and folders. \n\n\n\n\nSimpler than the \nurllib2\n module.\n\n\nCan check out errors.\n\n\nSave the downloaded files.\n\n\n\n\nHTML crash course!\n\n\nbs4\n module (BeautifulSoup).\n\n\n\n\nBeautifulSoup()\n function; parses HTML. \n\n\nselect()\n method;  find an element. \n\n\nGet data from an element\ns attributes.\n\n\n\n\nUse:\n\n\n\n\nSearch Google.\n\n\nRetrieve search results.\n\n\nOpen tabs for each results.\n\n\nRead the command line arguments from \nsys.argv\n.\n\n\nFetch results with the \nrequests\n module.\n\n\nFind the links.\n\n\nDownload all images, videos, files, etc.\n\n\nBack up an entire site by following all of its links.\n\n\nCopy all the messages off a web forum.\n\n\nDuplicate the catalogue of items for sale on an online store.\n\n\n\n\nselenium\n module.\n\n\nLaunches and controls a web browser. Fill and submit forms. Simulate mouse clicks. Find elements on a page. Click on a page. Send special keys.\n\n\nCombining modules :\n\n\n\n\nCommand line emailer.\n\n\nImage site downloader.\n\n\nLink verification.\n\n\n\n\nChapter 12, Excel Spreadsheets\n\n\nopenpyxl\n module.\n\n\nRead Excel documents. Open Excel documents. Get sheets from a workbook. Get cells from the sheets. Convert letters and numbers. Get rows and columns from sheets. Write results to a file.\n\n\nUse:\n\n\n\n\nCompare data across multiple rows in a spreadsheet.\n\n\nOpen multiple files and compare data.\n\n\nCheck blank rows or invalid data in any cells.\n\n\nRead data and use it as the input for Python programs.\n\n\nWrite Excel Documents.\n\n\nCreate and save Excel documents.\n\n\nCreate and remove sheets.\n\n\nWrite values to cells.\n\n\nUpdate a spreadsheet.\n\n\nRead data from one spreadsheet and write it to parts of other spreadsheets.\n\n\nRead data from websites, text files, or the clipboard and write it to a spreadsheet.\n\n\nClean up data, regular expressions.\n\n\nSet the font style, objects, formulas.\n\n\nAdjust rows and columns.\n\n\nSet row height and column width.\n\n\nMerge and unmerge cells.\n\n\nFreeze panes.\n\n\nCreate charts.\n\n\nInsert blank rows.\n\n\nConvert text files to spreadsheets, vice-versa.\n\n\n\n\nChapter 13, PDF and Word Documents\n\n\nPyPDF2\n module.\n\n\nExtract text from a PDF. Decrypt a PDF. Create PDF. Copy pages, rotate pages, overlay pages from a PDF. Add a logo, a timestamp, a watermark to a PDF.\n\n\nUse:\n\n\n\n\nCombine pages from many PDF.\n\n\nCut out specific pages.\n\n\nReorder pages.\n\n\nCreate a PDF from only those pages that have some specific text.\n\n\n\n\npython-docx\n module.\n\n\nRead word documents. Get the full text from a .docs file. Style paragraphs. Create word documents with nondefault styles. Write word documents. Add headings, lines, page breaks, and pictures. \n\n\nUse:\n\n\n\n\nPDF Paranoia or encrypting a bunch of files.\n\n\nCustom invitations in Word.\n\n\nBrute-force PDF password breaker.\n\n\n\n\nChapter 14, CSV Files and JSON Data\n\n\ncsv\n module.\n\n\nRead, open CSV. Split the file. Print CSV. Loop within a file or through many files. Write CSV. Change delimiters and lineterminators. Remove the header.\n\n\nUse:\n\n\n\n\nCompare data between different rows in a CSV file or between multiple CSV files.\n\n\nCopy specific data from a CSV file to an Excel file; vice-versa.\n\n\nCheck for invalid data or formatting mistakes in CSV files and alert the user.\n\n\nRead data from CSV file as input for Python programs.\n\n\nExcel to CSV to Excel converter (in conjunction with the \nopenpyxl\n module).\n\n\n\n\njson\n module.\n\n\nAlike web scraping. API. Read,  load, write, dump data.\n\n\nUse:\n\n\n\n\nFetch weather from a website.\n\n\nCollect weather forecasts for several campsites or hiking trails.\n\n\nSchedule a program to regularly check weather and send your a frost alert.\n\n\nPull weather data from multiple sites to show all at once, or calculate and show the average of multiple weather predictions.\n\n\n\n\nChapter 15, Time, Scheduling Tasks, and Launching Programs\n\n\ntime\n module.\n\n\nRead the system clock for the current time. Pause a program (sleep). Round numbers.\n\n\nUse:\n\n\n\n\nTrack how much time spent on tasks with a stopwatch.\n\n\nRecord track times or lap times.\n\n\nBuild a program that launches other programs on a schedule by using the \nsubprocess\n and \nthreading\n modules.\n\n\nCreate a timesheet app that records when you enter data, and use the current time to clock them in or out.\n\n\nAdd a feature to a program to display the elapsed time since a process started (in conjunction with the \nrequests\n module).\n\n\nCheck how long a program has been running and offer the user a chance to cancel tasks.\n\n\n\n\ndatetime\n module.\n\n\nCompute time and date delta. Retrieve a specific moment. Add a timestamp. Add pauses to a routine. Convert datetime object to strings. Convert strings to datetime objects.   \n\n\nUse:\n\n\n\n\nMultithreading; modify a program to use a function. Create and start threads (see above).\n\n\nPass command line arguments.\n\n\nTask scheduler.\n\n\nOpen websites (time event).\n\n\nRun Python scripts (time event).\n\n\nOpen files (time event).\n\n\nCreate a countdown program.\n\n\nSchedule downloader (time event).\n\n\n\n\nChapter 16, Sending Email and Text Messages\n\n\nhttp, smtp, mail, imap\n\n\nsmtplib\n module.\n\n\nConnect to an SMTP server. Log in. Search for emails. Send a message. Encrypt emails. Retrieve and delete emails. Disconnect from the SMTP server.\n\n\nimapclient\n module.\n\n\nConnect to an IMAP server. Log in. Search for emails. Fetch an email and mark it as read. Get email addresses from a raw message. Get the body from a raw message. Delete emails. Disconnect from the IMAP server.\n\n\nUse:\n\n\n\n\nSend members dues reminders.\n\n\nSend text messages.\n\n\nRandom emailer.\n\n\nUmbrella\n reminder (in conjunction with weather forecasts and the \nrequests\n module).\n\n\nAuto-unsubscriber.\n\n\n\n\ntwilio\n module.\n\n\nSend text messages, SMS.\n\n\nChapter 17, Manipulating Images\n\n\nColor and RGBA crash course!\n\n\nPIL\n module.\n\n\nManipulate images with Pillow. Work with the image data type. Crop, copy, paste an image. Multiply images tiles. Resize, rotate, flip an image. Change pixels. Draw on images (points, lines, rectangles, ellipses, polygons, text). \n\n\nUse:\n\n\n\n\nLoop through a folder of images.\n\n\nImage batch processing: resizing, cropping, copying and pasting, rotating, etc.\n\n\nAdding a logo to several images.\n\n\nIdentify the photo folders.\n\n\nCreate custom cards with custom invitations in Word (see chapter 13).\n\n\n\n\nChapter 18, Controlling the Keyboard and Mouse with GUI Automation\n\n\nvirtual keystrokes, mouse clicks\n\n\npyautogui\n module and dependencies based of the OS in use.\n\n\nShutdown the computer. Log out from a session. Pauses, fail-safes. Control mouse movements and move the mouse. Get the mouse position and control the mouse. Control the keyboard. Send a string from the keyboard. Type in key name. Press and release buttons. Activate hotkey.\n\n\nUse:\n\n\n\n\nImage recognition.\n\n\nAutomatic form filler.\n\n\nLook busy!\n\n\nInstant messenger bot.\n\n\nGame-playing bot tutorial.\n\n\n\n\nAppendix A\n\n\n\n\nPIP.\n\n\nInstalling modules.\n\n\n\n\nAppendix B\n\n\n\n\nRunning programs.\n\n\nShebang line.\n\n\nOn Windows.\n\n\nOn UNIX.\n\n\n\n\nAppendix C\n\n\nAnswers from questions: chapter 2 to 18.\n\n\nAdditional Content\n\n\n\n\nDownload files used in the book.\n\n\nList of JSON API:\n\n\nTwitter API.\n\n\nFacebook Social Graph API.\n\n\nFlickr.\n\n\nYouTube.\n\n\nOpenStreetMap.\n\n\nGoogle Maps.\n\n\nImgur API.\n\n\n26 Weather APIs.\n\n\nRotten Tomatoes.\n\n\nReddit.\n\n\n\n\n\n\nList of programming practice sites. (programming problems you can try to practice your coding skills).\n\n\nList of web comics.\n\n\nSchedulers (operating system scheduling process).\n\n\nHow to do PyCon or any tech conference.", 
            "title": "Automate the Boring Stuff with Python"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-3-functions", 
            "text": "global, local, variable, scope  Exception handling with  try:  and  except .", 
            "title": "Chapter 3, Functions"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-4-lists-and-tuples", 
            "text": "data type, index, sublist, subset, slice,  change, concatenate, concatenation, tuple, convert, tuple to list   len()  function; length.  in  and  not in  operators.  += ,  -= ,  *= ,  /= ,  %=  augmented assignments.  index()  method; extract the position of an element.  append()  method.  insert()  method.  remove()  method.  sort()  method.  copy  module and  copy()  method.  deepcopy()  method; for inner list or a list of lists (ensure the key exists).", 
            "title": "Chapter 4, Lists (and Tuples)"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-5-dictionaries-and-structuring-data", 
            "text": "loop  Dictionaries are not indexed and ordered like lists.   keys()  method; extract keys.  values()  method; extract values.  items()  method; extract both.  get()  method; check out both.  in  and  not in  operators.   setdefault()  method, check out a key and set value to a key.   Pretty print with the  pprint()  and  pformat()  functions.  Nested dictionaries and lists.", 
            "title": "Chapter 5, Dictionaries and Structuring Data"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-6-manipulating-strings", 
            "text": "Escape character:  \\ :  \\' ,  \\\" ,  \\t ,  \\n ,  \\\\ .  Raw strings:  print(r'That is Carol') .  Triple quotes:  print('''Dear Alice,\nbla-bla-bla\ncheers''')\n\nprint( Dear Alice,\nbla-bla-bla\ncheers )  Comment:  # . \nMultiline comments:  \"\"\" \"\"\" .   Slice, subset with  [:] .  in  and  not in  operators.  lower()  method.  upper()  method.  capitalize()  method.  is  method; check if x is part of y.  islower()  method.  isupper()  method.  isalpha()  method; check letters, not blank.  isalnum()  method; check letters and numbers, and not blank.  isdecimal()  method; check numeric characters and not blank.  isspace()  method; check spaces, tabs and new lines and not blank.  istitle()  method; check if it begins with an uppercase letter followed with lowercase letters.  startwith()  method; check if a string begins with a string of characters.  endwith()  method; idem.  join()  method; concatenate.  split()  method.  rjust()  method; justify.  ljust()  method justify.  center()  method.  strip()  method; remove white space.  rstrip()  method; ; remove white space to the right.  lstrip()  method; remove white space to the left.   pyperclip  module.  The  pyperclip.pyclip  function send text to and receive text from the clipboard:  In addition:  import pyperclip\n\npyperclip.copy('Hello world!')\npyperclip.paste()", 
            "title": "Chapter 6, Manipulating Strings"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-7-pattern-matching-and-regular-expressions", 
            "text": "patterns of text, with, without regular expression, regex, object, match, matching, group, grouping, pipe, question mark, star, ?, *, plus, +, curly bracket, {, }, character class, digit, numeric, letter, underscore, space, tab, newline, caret, ^, dollar sign, $, wildcard, dot, ., dotstar, newline, symbols, case-sensitive, case-insensitive  re  module.   re.compile()  method; find a single occurrence.  re.findall()  method; find all occurrences.  sub()  method; substitute.  re.IGNORECASE ; ignore capitalization with the  compile()  method.  re.DOTALL ; ignore dots with the  re.compile()  method.  re.VERBOSE ; write comment with the  re.compile()  method.", 
            "title": "Chapter 7, Pattern Matching and Regular Expressions"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-8-reading-and-writing-files", 
            "text": "file, file path, filename  os  module.   A relative path:  ..\\eggs\\spam.txt ,  .\\fizz\\spam.txt .  An absolute path:  C:\\bacon\\fizz\\spam.txt .  os.getcwd()  or  os.chdir()  functions; extract the current working directory.  os.makedir() function; create a new folder.   os.path  module.   Handle absolute and relative paths. Find file sizes and folder contents. Check path validity.  Windows: backslash or  \\ :  import os\nos.path.join('usr', 'bin', 'spam')  Yields:  'usr\\\\bin\\\\spam'  UNIX: forwardslash or  / :  import os\nos.path.join('usr', 'bin', 'spam')  Yields:  'usr/bin/spam'  Read and write files:   os.path.open()  function.  os.path.read()  method.  os.path.readline()  method.  os.path.write()  method.  os.path.close()  method.   shelve  module.  Handle binary files.  pprint  module.   Pretty printing:   pprint.pprint() .  pprint.pformat() .", 
            "title": "Chapter 8, Reading and Writing Files"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-9-organizing-files", 
            "text": "pdf, every sub-folder, folder, foldername, subfolder, filename, file, remove, zero, change titles, compress, decompress, zip, unzip  shutil  module.   Copy, move, rename, and delete files and folders.  shutil.rmtree()  function; delete file and folder.  os  module.   Delete, empty, remove files and folders, and change the path.  os.walk()  method; walk the tree directory.  send2trash  module.   Delete files and folders, but much safer.  zipfile  module.   Compress and uncompress. Read the content of compressed and zipped files.   zipfile.extracall() ; method  extracts all the files and folders from a zip file.  write()  method; create a zip file.", 
            "title": "Chapter 9, Organizing Files"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-10-debugging", 
            "text": "Handle errors with  try  and  except .  Raise exceptions with a  raise  statement and the  Exception()  function.  traceback  module.   Discover what and how an error happens and obtain it as a string with the  traceback.format_exc()  method.   An assertion is a sanity check performed with an  assert  statement.   logging  module.   Display log messages as the program runs. Log to a file. Debug a code. Enable and disable logging. Enable an IDLE debugger.  Set a  breakpoint  to check out potential bugs.", 
            "title": "Chapter 10, Debugging"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-11-web-scraping", 
            "text": "html  webbrowser  module.  Open a browser to a specific webpage (in conjunction with the  sys  module).   Use:   Get a street address from the command line to the clipboard.  Go to a Google Maps page.  Read command line arguments from  sys.argv .  Read the clipboard content.  Open all links on a page in separate tabs.  Open the browser to the url for local weather.  Open several social network sites.   requests  module.  Download files and webpages; similar to opening, reading, writing, closing files and folders.    Simpler than the  urllib2  module.  Can check out errors.  Save the downloaded files.   HTML crash course!  bs4  module (BeautifulSoup).   BeautifulSoup()  function; parses HTML.   select()  method;  find an element.   Get data from an element s attributes.   Use:   Search Google.  Retrieve search results.  Open tabs for each results.  Read the command line arguments from  sys.argv .  Fetch results with the  requests  module.  Find the links.  Download all images, videos, files, etc.  Back up an entire site by following all of its links.  Copy all the messages off a web forum.  Duplicate the catalogue of items for sale on an online store.   selenium  module.  Launches and controls a web browser. Fill and submit forms. Simulate mouse clicks. Find elements on a page. Click on a page. Send special keys.  Combining modules :   Command line emailer.  Image site downloader.  Link verification.", 
            "title": "Chapter 11, Web Scraping"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-12-excel-spreadsheets", 
            "text": "openpyxl  module.  Read Excel documents. Open Excel documents. Get sheets from a workbook. Get cells from the sheets. Convert letters and numbers. Get rows and columns from sheets. Write results to a file.  Use:   Compare data across multiple rows in a spreadsheet.  Open multiple files and compare data.  Check blank rows or invalid data in any cells.  Read data and use it as the input for Python programs.  Write Excel Documents.  Create and save Excel documents.  Create and remove sheets.  Write values to cells.  Update a spreadsheet.  Read data from one spreadsheet and write it to parts of other spreadsheets.  Read data from websites, text files, or the clipboard and write it to a spreadsheet.  Clean up data, regular expressions.  Set the font style, objects, formulas.  Adjust rows and columns.  Set row height and column width.  Merge and unmerge cells.  Freeze panes.  Create charts.  Insert blank rows.  Convert text files to spreadsheets, vice-versa.", 
            "title": "Chapter 12, Excel Spreadsheets"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-13-pdf-and-word-documents", 
            "text": "PyPDF2  module.  Extract text from a PDF. Decrypt a PDF. Create PDF. Copy pages, rotate pages, overlay pages from a PDF. Add a logo, a timestamp, a watermark to a PDF.  Use:   Combine pages from many PDF.  Cut out specific pages.  Reorder pages.  Create a PDF from only those pages that have some specific text.   python-docx  module.  Read word documents. Get the full text from a .docs file. Style paragraphs. Create word documents with nondefault styles. Write word documents. Add headings, lines, page breaks, and pictures.   Use:   PDF Paranoia or encrypting a bunch of files.  Custom invitations in Word.  Brute-force PDF password breaker.", 
            "title": "Chapter 13, PDF and Word Documents"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-14-csv-files-and-json-data", 
            "text": "csv  module.  Read, open CSV. Split the file. Print CSV. Loop within a file or through many files. Write CSV. Change delimiters and lineterminators. Remove the header.  Use:   Compare data between different rows in a CSV file or between multiple CSV files.  Copy specific data from a CSV file to an Excel file; vice-versa.  Check for invalid data or formatting mistakes in CSV files and alert the user.  Read data from CSV file as input for Python programs.  Excel to CSV to Excel converter (in conjunction with the  openpyxl  module).   json  module.  Alike web scraping. API. Read,  load, write, dump data.  Use:   Fetch weather from a website.  Collect weather forecasts for several campsites or hiking trails.  Schedule a program to regularly check weather and send your a frost alert.  Pull weather data from multiple sites to show all at once, or calculate and show the average of multiple weather predictions.", 
            "title": "Chapter 14, CSV Files and JSON Data"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-15-time-scheduling-tasks-and-launching-programs", 
            "text": "time  module.  Read the system clock for the current time. Pause a program (sleep). Round numbers.  Use:   Track how much time spent on tasks with a stopwatch.  Record track times or lap times.  Build a program that launches other programs on a schedule by using the  subprocess  and  threading  modules.  Create a timesheet app that records when you enter data, and use the current time to clock them in or out.  Add a feature to a program to display the elapsed time since a process started (in conjunction with the  requests  module).  Check how long a program has been running and offer the user a chance to cancel tasks.   datetime  module.  Compute time and date delta. Retrieve a specific moment. Add a timestamp. Add pauses to a routine. Convert datetime object to strings. Convert strings to datetime objects.     Use:   Multithreading; modify a program to use a function. Create and start threads (see above).  Pass command line arguments.  Task scheduler.  Open websites (time event).  Run Python scripts (time event).  Open files (time event).  Create a countdown program.  Schedule downloader (time event).", 
            "title": "Chapter 15, Time, Scheduling Tasks, and Launching Programs"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-16-sending-email-and-text-messages", 
            "text": "http, smtp, mail, imap  smtplib  module.  Connect to an SMTP server. Log in. Search for emails. Send a message. Encrypt emails. Retrieve and delete emails. Disconnect from the SMTP server.  imapclient  module.  Connect to an IMAP server. Log in. Search for emails. Fetch an email and mark it as read. Get email addresses from a raw message. Get the body from a raw message. Delete emails. Disconnect from the IMAP server.  Use:   Send members dues reminders.  Send text messages.  Random emailer.  Umbrella  reminder (in conjunction with weather forecasts and the  requests  module).  Auto-unsubscriber.   twilio  module.  Send text messages, SMS.", 
            "title": "Chapter 16, Sending Email and Text Messages"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-17-manipulating-images", 
            "text": "Color and RGBA crash course!  PIL  module.  Manipulate images with Pillow. Work with the image data type. Crop, copy, paste an image. Multiply images tiles. Resize, rotate, flip an image. Change pixels. Draw on images (points, lines, rectangles, ellipses, polygons, text).   Use:   Loop through a folder of images.  Image batch processing: resizing, cropping, copying and pasting, rotating, etc.  Adding a logo to several images.  Identify the photo folders.  Create custom cards with custom invitations in Word (see chapter 13).", 
            "title": "Chapter 17, Manipulating Images"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#chapter-18-controlling-the-keyboard-and-mouse-with-gui-automation", 
            "text": "virtual keystrokes, mouse clicks  pyautogui  module and dependencies based of the OS in use.  Shutdown the computer. Log out from a session. Pauses, fail-safes. Control mouse movements and move the mouse. Get the mouse position and control the mouse. Control the keyboard. Send a string from the keyboard. Type in key name. Press and release buttons. Activate hotkey.  Use:   Image recognition.  Automatic form filler.  Look busy!  Instant messenger bot.  Game-playing bot tutorial.", 
            "title": "Chapter 18, Controlling the Keyboard and Mouse with GUI Automation"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#appendix-a", 
            "text": "PIP.  Installing modules.", 
            "title": "Appendix A"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#appendix-b", 
            "text": "Running programs.  Shebang line.  On Windows.  On UNIX.", 
            "title": "Appendix B"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#appendix-c", 
            "text": "Answers from questions: chapter 2 to 18.", 
            "title": "Appendix C"
        }, 
        {
            "location": "/Automate the Boring Stuff with Python/#additional-content", 
            "text": "Download files used in the book.  List of JSON API:  Twitter API.  Facebook Social Graph API.  Flickr.  YouTube.  OpenStreetMap.  Google Maps.  Imgur API.  26 Weather APIs.  Rotten Tomatoes.  Reddit.    List of programming practice sites. (programming problems you can try to practice your coding skills).  List of web comics.  Schedulers (operating system scheduling process).  How to do PyCon or any tech conference.", 
            "title": "Additional Content"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/", 
            "text": "CONTENT\n\n\nPart 1, Getting Started\n\n\nChapter 1, The Python Shell and Basics\n\n\nChapter 2, Your First Python Program\n\n\nPart 2, Data management\n\n\nChapter 3, Analyzing a Data Column\n\n\nChapter 4, Parsing Data Records\n\n\nChapter 5, Searching Data\n\n\nChapter 6, Filtering Data\n\n\nChapter 7, Managing Tabular Data\n\n\nChapter 8, Sorting Data\n\n\nChapter 9, Pattern Matching and Text Mining\n\n\nPart 3, Modular Programming\n\n\nChapter 10, Divide a Program into Functions\n\n\nChapter 11 Managing Complexity with Classes\n\n\nChapter 12 Debugging\n\n\nChapter 13, Using External Modules, The Python Interface to R\n\n\nChapter 14, Building Program Pipelines\n\n\nChapter 15, Writing Good Programs\n\n\nPart 4, Data Visualization\n\n\nChapter 16, Creating Scientific Diagrams\n\n\nChapter 18, Manipulating Images\n\n\nPart 6, Cookbook\n\n\nRecipe 2, Reversing and Randomizing a Sequence\n\n\nRecipe 3, Creating a Random Sequence with Probabilities\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and code snippets. Python 2. The book comes with files and cases. Python 2. From CRC Press, 2014.\n\n\n\n\nPart 1, Getting Started\n\n\nChapter 1, The Python Shell and Basics\n\n\nData structure\n\n\n\n\nBooleans: \nTrue\n or \nFalse\n.\n\n\nDictionaries: unordered collections of key-value pairs; both can be numbers or strings; indicated with \n{key1: value1, 'key2': 'value2'}\n.\n\n\nFloats: numbers with digits after the dicemal point,\n\n\nIntegers: numbers without digits after the decimal point.\n\n\nLists: mutable ordered collections of objects; indicated with \n[a, b, c]\n.\n\n\nSets: immutable unordered collections of unique elements; indicated by \n([a, b, c])\n.\n\n\nStrings: immutable ordered collections of characters; indicated with \n'single'\n or \n\"double\"\n quotation marks.\n\n\nTuples: immutable ordered collections of objects; indicated with \n(a, b, c)\n.\n\n\n\n\nConversions\n\n\nConvert or coerce data:\n\n- \nfloat(value)\n; into a float.\n\n- \nint(value)\n; into an integer.\n\n- \nstr(value)\n; into a string.\n\n\nStrings\n\n\n'Single'\n and \n\"double\"\n quotes are for short strings.\n\n\nTriple single and double quotes\n\nare rather multilines.\n\n\nAccess character and substrings\n\n\n\n\nprint s[-1]\n; print the last character of a string.\n\n\nprint s[-5:]\n; print from the 5th position from the end to the end.\n\n\n\n\nString functions\n\n\n\n\nlen(s)\n; length of the string,\n\n\ns.upper()\n; convert to uppercase.\n\n\ns.lower()\n; convert to lowercase.\n\n\ns.strip()\n; remove white spaces and tabs from both ends.\n\n\ns.strio('m')\n; remove \n'm'\n from both ends.\n\n\ns.rstrip()\n; remove on the right only.\n\n\ns.lstrip('m')\n; remove on the left only.\n\n\ns.split(' ')\n; cut into words where there is space.\n\n\ns.find('m')\n; search for the \n'm'\n substring and return the starting position.\n\n\ns.replace('m', 'n')\n; replace \n'm'\n with \n'n'\n.\n\n\ns.startwith('m')\n; check beginning and return \nTrue\n or \nFalse\n.\n\n\ns.endwith('m')\n; check end and return \nTrue\n or \nFalse\n.\n\n\n\n\nCreate lists\n\n\n\n\ndata = [1, 2, 3, 4, 5]\n.\n\n\ndata[1:3]\n; \n[2, 3]\n.\n\n\ndata[0:2]\n; \n[1, 2]\n.\n\n\ndata[:3]\n; \n[1, 2, 3]\n.\n\n\ndata[-2:]\n; \n[4, 5]\n.\n\n\ndata2 = data[:]\n; create a copy.\n\n\n\n\nModify lists\n\n\n\n\nl[i] = x\n; replace the i\nth\n element with \nx\n.\n\n\nl[i;j] = t\n; replace elements from \ni\n to \nj\n by \nt\n (iterable).\n\n\ndel l[i;j]\n; delete the elements of the list from \ni\n to \nj\n.\n\n\ndel s[i;k;k]\n; delete the elements of the list from \ni\n to \nj\n with stop \nk\n.\n\n\nl.append(x)\n; add element \nx\n to the list.\n\n\nl.extend(x)\n; add several element \nx\n to the list (iterable).\n\n\nl.count(x)\n; return the number of elements \nx\n in the list.\n\n\nl.index(x[. i[. j]])\n; return the smaller \nk\n such that \nl[k] = x\n and \ni \n= k \n= j\n.\n\n\nl.insert(i.x)\n; insert(wedge in) \nx\n.\n\n\nl.pop(i)\n; cancel the ith element and return its value; \nl.pop()\n does it for the last element.\n\n\nl.remove(x)\n; delete a choosen \nx\n element.\n\n\nl.reverse()\n; reverse the list order.\n\n\nl.sort()\n; sort the list.\n\n\nl.sort([cmp[. key[. reverse]]])\n; sort the list; \ncmp\n is a customized function for the comparison of element pairs that must return a negative value, zero, or a positive value depending on if the first element of the pair is lower than. equal to. or greater than the second element.\n\n\nsorted(l)\n; create a new list made of a simple ascending sort of the list without modifying the list.\n\n\n\n\nFunctions working of lists\n\n\n\n\nlen(data)\n; length of the list.\n\n\nmin(data)\n; smallest.\n\n\nmax(data)\n; largest.\n\n\nsum(data)\n; sum.\n\n\nrange(4)\n; create a list of number from 0 to 3.\n\n\nrange(1.5)\n; create a list of number from 1 to 4.\n\n\nrange(2.9.2)\n; create \n[2, 4, 6, 8]\n.\n\n\nrange(5, 0, -1)\n; create \n[5, 4, 3, 2, 1]\n\n\n\n\nTuples\n\n\n\n\nt = 1, 2, 3\n or \nt = (1, 2, 3)\n\n\nt = 1\n or \ntuple = (1,)\n\n\n\n\nAccessing data in dictionaries\n\n\n\n\nprices['banana']\n; return the value of the key.\n\n\nprices.get('banaba')\n; do the same thing, but if the key does not exit, it returns \nNone\n.\n\n\nprices.has_key('apple')\n; check whether the key(s) is(are) defined.\n\n\nprices.keys()\n; return a list of all keys.\n\n\nprices.values()\n; return a list of all values.\n\n\nprices.items()\n; return all keys and values as a list of tuples.\n\n\n\n\nModifying dictionaries\n\n\n\n\nprices['kiwi'] = 0.6\n; set the value of the key.\n\n\nprices.setdefault('egg', 0.9)\n; set the value of the key if it is not yet defined.\n\n\n\n\nNone\n\n\nNone indicate the object or part of it is empty. For example:\n\n- \na = None\n.\n\n- \nb = [None, None, 'green']\n.\n\n\nChapter 2, Your First Python Program\n\n\nDifference between functions and methods\n\n\nFunctions are generic; use them anywhere without constraints. For example, \nlen()\n works on all data.\n\n\n len('protein')\n7\n\n len('111')\n3\n\n\n\n\nOther funtions, called methods, are specific; use them on a certain type of data. For example, \ncount()\n works only for strings or a \nstring\n variable (below, \nprotein\n is a string).\n\n\n 'protein'.count('r')\n1\n\n 'occurence'.count('c')\n3\n\n\n\n\nCount the occurrence of each amino acid in a protein sequence\n\n\ncount, element, in, string\n\n\ninsulin = \nGIVEQCCTSICSLYQLENYCNFVNQHLCGSHLVEALYLVCGERGFFYTPKT\n\n\nfor amino_acid in \nACDEFGHIKLMNPQRSTVWY\n:\n    number = insulin.count(amino_acid)\n    print amino_acid, number\n\n\n\n\nCreate a random DNA sequence of length 10\n\n\nimport random\n\nalphabet = \nAGCT\n\nsequence = \n\nfor i in range(10):\n    index = random.randint(0, 3)\n    sequence = sequence + alphabet[index]\n\nprint sequence\n\n\n\n\nPart 2, Data management\n\n\nChapter 3, Analyzing a Data Column\n\n\nRead from a text file\n\n\n\n\nreadlines()\n.\n\n\n\n\ntext_file = open('neuron_data.txt', 'r')\n# 'r' is facultative\n\nlines = text_file.readlines()\n\ntext_file.close()\n\nprint lines\n\n\n\n\n\n\nread()\n. \n\n\n\n\ntext_file = open('neuron_data.txt')\n# 'r' is facultative\n\nprint text_file.read()\n\ntext_file.close()\n\n\n\n\nDifference between \nread()\n and \nreadlines()\n\n\n\n\nread(x)\n; read up to x bytes in a file. If you don\nt supply the size, it reads the entire file. The output is displayed as strings only once.\n\n\nOne character = 1 byte.\n\n\nClose and reopen the file to read it again.\n\n\nreadlines(x)\n; read up to x bytes. If you don\nt supply a size, it reads all the data until it reaches a newline (\n\\n\n) or the end of a paragraph.\n\n\nClose and reopen the file to read it again.\n\n\n\n\nWrite a text file\n\n\noutput_file = open('counts.txt', 'w')\n# 'w' is mandatory\n\noutput_file.write('number of neuron lengths: 7\\n')\n\noutput_file.close()\n\n\n\n\nClean a text file\n\n\nstrip\n\n\n\n\nstrip()\n; removes blanks spaces.\n\n\nrstrip()\n; right only.\n\n\nlstrip()\n; left only.\n\n\n\n\noutput_file = open('counts.txt')\noutput_file.read()\noutput_file.close()\n\n# vs\n\noutput_file = open('counts.txt')\noutput_file.read().strip()\noutput_file.close()\n\n\n\n\nWrite and then read the same file\n\n\n\n\n'r'\n; cannot write with, only reads.\n\n\n'w'\n; cannot read with, only writes (an existing file with the same name will be erased).\n\n\n'a'\n append; data added to the end. \n\n\n'r+'\n; both read and write (by replacing the existing string at the beginning by the new string).\n\n\n\n\nfile1 = open('count.txt','w')\nfile1.write('this is just a dummy test\\n')\nfile1.close()\n\nfile2 = open('count.txt', 'r')\nprint file2.read()\nfile2.close()\n\nfile3 = open('count.txt','a')\nfile3.write('this is another test\\n')\nfile3.close()\n\nfile4 = open('count.txt', 'r')\nprint file4.read()\nfile4.close()\n\nfile5 = open('count.txt', 'w')\nfile5.write('this is a final test\\n')\nfile5.close()\n\nfile6 = open('count.txt', 'r')\nprint file6.read()\nfile6.close()\n\n\n\n\nRead a series of numbers from a text file and print a summary of the data\n\n\nstrip, append, length, minimum, maximum, sort, format, integer, float\n\n\n\n\nstrip()\n; remove blank spaces.\n\n\nA text is string by default even thought the file contains numbers; transform the text into float.\n\n\nappend()\n; each line to a list.\n\n\nlen(data)\n.\n\n\nsum(data)\n.\n\n\nmin(data)\n.\n\n\nmax(data)\n.\n\n\nsort()\n.\n\n\n%4i\n is an integer with 4 digits.\n\n\n%6.1f\n is a float with 6 digits and 2 decimals.\n\n\n\n\ndata = []\n\nfor line in open('neuron_data.txt'):\n    length = float(line.strip())\n    data.append(length)\n\nn_items = len(data)\ntotal = sum(data)\nshortest = min(data)\nlongest = max(data)\n\ndata.sort()\n\n\noutput = open(\nresults.txt\n,\nw\n)\n\noutput.write(\nnumber of dendritic lengths : %4i \\n\n%(n_items))\noutput.write(\ntotal dendritic length      : %6.1f \\n\n%(total))\noutput.write(\nshortest dendritic length   : %7.2f \\n\n%(shortest))\noutput.write(\nlongest dendritic length    : %7.2f \\n\n%(longest))\noutput.write(\n%37.2f\\n%37.2f\n%(data[-2], data[-3]))\n\noutput.close()\n\n\n\n\nFormat the data\n\n\nformatting, variable\n\n\n\n\n%s\n; a string.\n\n\n%d\n; a digit.\n\n\n%r\n; raw data.\n\n\n%10s\n; left-justify by 10 bytes.\n\n\n%-10s\n; right-justify. by bytes\n\n\n%i\n; an integer.\n\n\n%f\n; a float.\n\n\n%2f\n; a float with 2 digits.\n\n\n%2.2f\n; has 2 digits and 2 decimals.\n\n\n%2i\n; has 2 digits.\n\n\nAnd so on.\n\n\nstr()\n; turn a variable into a string (digit \n3\n to string \n'3'\n for example).\n\n\nint()\n; turn a variable into an integer (string \n'3'\n to digit \n3\n for example).\n\n\nfloat()\n; turn a variable into a float (digit \n3\n to \n3.0\n for example).\n\n\n\n\nfile1 = open('count.txt','w')\nfile1.write('this is just a dummy test')\nfile1.close()\n\nfile2 = open('count.txt', 'r')\nvariable = file2.read()\n\nprint \nTest1: %r\n % (variable)\nprint \nTest2: %s\n % (variable)\nprint \nTest3: %30s\n % (variable)\nprint \nTest4: %-30s\n % (variable)\nprint \nTest5: %30r\n % (variable)\nprint \nTest6: %-30r\n % (variable)\nprint \nTest7: %d, %d, %d\n % (1, 2, 3)\nprint \nTest8: %2d, %3d, %10d\n % (1, 2, 3)\nprint \nTest9: %d, %i, %f\n % (1, 2, 3)\nprint \nTest10: %i, %i, %i\n % (1, 2.8, 3.1416)\nprint \nTest11: %2i, %5i, %10i\n % (1, 2.8, 3.1416)\nprint \nTest12: %f, %f, %f\n % (1, 2.8, 3.1416)\nprint \nTest13: %2f, %2.2f, %10.3f\n % (1, 2.8, 3.1416)\nprint \nTest14: %2f, %2f, %2f\n % (0.11, 10.111, 1000.1111)\nprint \nTest15: %2.1f, %2.1f, %2.10f\n % (0.11, 10.111, 1000.1111)\n\nfile2.close()\n\n\n\n\nOutput:\n\n\nTest1: 'this is just a dummy test'\nTest2: this is just a dummy test\nTest3:      this is just a dummy test\nTest4: this is just a dummy test     \nTest5:    'this is just a dummy test'\nTest6: 'this is just a dummy test'   \nTest7: 1, 2, 3\nTest8:  1,   2,          3\nTest9: 1, 2, 3.000000\nTest10: 1, 2, 3\nTest11:  1,     2,          3\nTest12: 1.000000, 2.800000, 3.141600\nTest13: 1.000000, 2.80,      3.142\nTest14: 0.110000, 10.111000, 1000.111100\nTest15: 0.1, 10.1, 1000.1111000000\n\n\n\n\nWrite a list of numbers to a text file\n\n\ndata = [16.38, 139.90, 441.46, 29.03, 40.93, 202.07, 142.30, 346.00, 300.00]\n\nout = []\n\nfor value in data:\n    out.append(str(value) + '\\n')\nopen('results.txt', 'w').writelines(out)\n\n\n\n\nOuput:\n\n\n16.38\n139.9\n441.46\n29.03\n40.93\n202.07\n142.3\n346.0\n300.0\n\n\n\n\nCalculate the average from a list of numbers\n\n\n# calculate average from float numbers\ndata = [3.53, 3.47, 3.51, 3.72, 3.43]\naverage = sum(data) / len(data)\nprint average\n\n# calculate average from integer numbers\ndata = [1, 2, 3, 4]\naverage = float(sum(data)) / len(data)\nprint average\n\n\n\n\nCalculate the median from a list of numbers\n\n\ndata = [3.53, 3.47, 3.51, 3.72, 3.43]\n\ndata.sort()\n\nmid = len(data) / 2 \nif len(data) % 2 == 0:\n    median = (data[mid - 1] + data[mid]) / 2.0\nelse:\n    median = data[mid]\n\nprint median\n\n\n\n\nJoin or concatenate a list\n\n\n L = ['1', '2', '3']\n\n '+'.join(L)\n'1+2+3'\n\n\n L = ['a', 'b', 'c']\n\n ''.join(L)\n'abc'\n\n\n L = ['1', '2', '3']\n\n int(''.join(L))\n123\n\n\n\n\nCalculate (a variance and )a standard deviation from a list of numbers\n\n\nimport math\n\ndata = [3.53, 3.47, 3.51, 3.72, 3.43]\naverage = sum(data) / len(data)\n\ntotal = 0.0\n\nfor value in data:\n    total += (value - average) ** 2\n\nvariance = total / len(data) # population variance\nstddev = math.sqrt(variance) # population stddev\n\nprint variance\nprint stddev\n\n\n\n\nChapter 4, Parsing Data Records\n\n\nFind items common to two lists\n\n\n# proteins participating in cell cycle\n\nlist_a = []\n\nfor line in open(\ncell_cycle_proteins.txt\n):\n    list_a.append(line.strip())\n\nprint list_a\n\n# proteins expressed in a given cancer cell\n\nlist_b = []\n\nfor line in open(\ncancer_cell_proteins.txt\n):\n    list_b.append(line.strip()) \n\nprint list_b\n\nfor protein in list_a:\n    if protein in list_b:\n        print protein, 'detected in the cancer cell'\n    else:\n        print protein, 'not observed'\n\n\n\n\nOutput:\n\n\n['P62258', 'P61981', 'P62191', 'P17980', 'P43686', 'P35998', 'P62333', 'Q99460', 'O75832']\n['P43686', 'P62333']\n\nP62258 not observed\nP61981 not observed\nP62191 not observed\nP17980 not observed\nP43686 detected in the cancer cell\nP35998 not observed\nP62333 detected in the cancer cell\nQ99460 not observed\nO75832 not observed\n\n\n\n\n**Find if two or more conditions are met\n\n\nboolean, operators, and, or, not\n\n\nseq = \nMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQTPSKPASADGHRGPSAAFAPAAAE\n\n\nif 'GGG' in seq and 'RRR'in seq:\n    print 'GGG is at position: ', seq.find('GGG')\n    print 'RRR is at position: ', seq.find('RRR')\n\nif 'WWW' in seq or 'AAA' in seq:\n    print 'Either WWW or AAA occur in the sequence'\n\nif 'AAA' in seq and not 'PPP' in seq:\n    print 'AAA occurs in the sequence but not PPP'\n\n\n\n\nBoolean Operators\n\n\n\n\n\n\n\n\nCondition\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nA \n B\n\n\nA lower than B\n\n\n\n\n\n\nA \n= B\n\n\nA lower than or equal to B\n\n\n\n\n\n\nA \n B\n\n\nA greater than B\n\n\n\n\n\n\nA \n= B\n\n\nA greater than or equal to B\n\n\n\n\n\n\nA == B\n\n\nA equal to B\n\n\n\n\n\n\nA != B\n\n\nA different from B\n\n\n\n\n\n\nA\n B\n\n\nidem\n\n\n\n\n\n\nA is B\n\n\nA is the same thing as B \nthing\n being an object\n\n\n\n\n\n\nA is not B\n\n\nA is not the same thing as B\n\n\n\n\n\n\nA in B\n\n\nA is present in the sequence B\n\n\n\n\n\n\nA not in B\n\n\nA is not present in the sequence B\n\n\n\n\n\n\n\n\nFind all prime numbers under 30\n\n\nfor i in range(30):\n    if i \n 4:\n        print \nprime number:\n, i\n    elif i % 2 == 0:\n        print \nmultiple of two:\n, i\n    elif i % 3 == 0:\n        print \nmultiple of three:\n, i\n    elif i % 5 == 0:\n        print \nmultiple of five:\n, i\n    else:\n        print \nprime number:\n, i\n\n\n\n\nList vs Tuple vs Set\n\n\n\n\nmutable: change, replace, reorder, add elements.\n\n\nList = [1, 2, 3]\n; mutable sequences of objects. \n\n\nTuple = (1, 2, 3)\n; immutable ordered sequences of objects;.\n\n\nSet = set([1, 2, 3])\n; immutable unordered  collections of unique elements.\n\n\nThe three can contain digits, strings or other objects (embedded).\n\n\n\n\nMore on lists\n\n\n\n\nList[0]\n; extract\n\n\nLlist = [[1, 2, 3],[a, b, c],[x, 4, 'text'], 'seq']\n; embedded lists.\n\n\nList[0][1]\n; extract from embedded lists.\n\n\nList.append(5)\n; add.\n\n\nCreate:\n\n\nrange(3)\n.\n\n\nseq(0, 2, 1)\n.\n\n\n[0.0] * 10\n.\n\n\n[x**2 for x in range(5)]\n.\n\n\n\n\n\n\n\n\nCreating a list with a one-line loop\n\n\nloop, conditional, conditional, on one line\n\n\n# remove non-base symbols from a sequence\nsquares = [x**2 for x in range(5)]\nprint squares\n\nbases = ['A', 'C', 'T', 'G']\nprint bases\n\nseq = 'GGACXCAGXXGATT'\nprint seq\n\nseqlist = [base for base in seq if base in bases]\nprint seqlist\n\n\n\n\nWrite all headers from a file to a separate file\n\n\nfasta_file = open('SwissProt.fasta','r')\nout_file = open('SwissProt.header','w')\n\nfor line in fasta_file:\n    if line[0:1] == '\n':\n        out_file.write(line)\n\nout_file.close()\n\n\n\n\nReads all AC numbers from the deflines of a file\n\n\nparse, parsing, text, file\n\n\ninput_file = open(\nSwissProt.fasta\n,\nr\n)\n\nac_list = []\n\nfor line in input_file:\n    if line[0] == '\n':\n        fields = line.split('|')\n        ac_list.append(fields[1])\n\nprint ac_list\n\n\n\n\nOutput:\n\n\n['P31946', 'P62258', 'Q04917', 'P61981', 'P31947', 'P27348', 'P63104', 'P30443']\n\n\n\n\nRead a file (genbank_file) and convert it to another file (output_file)\n\n\ngenbank_file = open(\nAY810830.gb\n)\noutput_file = open(\nAY810830.fasta\n,\nw\n)\n\nflag = False\nfor line in genbank_file:\n    if line[0:9] == 'ACCESSION':\n        accession = line.split()[1].strip()\n        output_file.write('\n' + accession + '\\n')\n    if line[0:6] == 'ORIGIN': \n        flag = True\n    elif flag:\n        fields = line.split()\n        if fields != []:\n            seq = ''.join(fields[1:])\n            output_file.write(seq.upper() + '\\n')\n\ngenbank_file.close()\noutput_file.close()\n\n\n\n\nRead multiple files and extract data\n\n\nfasta_file = open('SwissProt.fasta','r')\nout_file = open('SwissProtHuman.fasta','w')\n\nseq = ''\nfor line in fasta_file:\n    if line[0] == '\n' and seq == '':\n        # process the first line of the input file\n        header = line\n    elif line [0] != '\n':\n        # join the lines with sequence\n        seq = seq + line\n    elif line[0] == '\n' and seq != '':\n        # in subsequent lines starting with '\n',\n        # write the previous header and sequence\n        # to the output file. Then re-initialize\n        # the header and seq variables for the next record\n        if \nHomo sapiens\n in header:\n            out_file.write(header + seq)\n        seq = ''\n        header = line\n\n# take care of the very last record of the input file\nif \nHomo sapiens\n in header:\n    out_file.write(header + seq)\nout_file.close()\n\n\n\n\nChapter 5, Searching Data\n\n\nTranslate a RNA sequence to a protein sequence in three reading frames\n\n\ndictionary\n\n\ncodon_table = {\n    'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A', 'CGU':'R', 'CGC':'R',   \n    'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R', 'UCU':'S', 'UCC':'S',\n    'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', 'AUU':'I', 'AUC':'I',\n    'AUA':'I', 'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L', 'CUA':'L',\n    'CUG':'L', 'GGU':'G', 'GGC':'G', 'GGA':'G', 'GGG':'G', 'GUU':'V',\n    'GUC':'V', 'GUA':'V', 'GUG':'V', 'ACU':'T', 'ACC':'T', 'ACA':'T',\n    'ACG':'T', 'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P', 'AAU':'N',\n    'AAC':'N', 'GAU':'D', 'GAC':'D', 'UGU':'C', 'UGC':'C', 'CAA':'Q',\n    'CAG':'Q', 'GAA':'E', 'GAG':'E', 'CAU':'H', 'CAC':'H', 'AAA':'K',\n    'AAG':'K', 'UUU':'F', 'UUC':'F', 'UAU':'Y', 'UAC':'Y', 'AUG':'M',\n    'UGG':'W',\n    'UAG':'STOP', 'UGA':'STOP', 'UAA':'STOP'\n    }\n\n# read the RNA sequence into a single string\nrna = ''\nfor line in open('A06662-RNA.fasta'):\n    if not line.startswith('\n'): \n        rna = rna + line.strip()\n\n# translate one frame at a time\nfor frame in range(3):\n    prot = '' \n    print 'Reading frame ' + str(frame + 1)\n    for i in range(frame, len(rna), 3):\n        codon = rna[i:i + 3]\n        if codon in codon_table:\n            if codon_table[codon] == 'STOP':\n                prot = prot + '*'\n            else: \n                prot = prot + codon_table[codon]\n        else:\n            # handle too short codons\n            prot = prot + '-'   \n\n    # format to blocks of 48 columns\n    i = 0\n    while i \n len(prot):\n        print prot[i:i + 48]\n        i = i + 48\n\n\n\n\nOutput (contains a translated sequence for each reading frame):\n\n\nReading frame 1\nWDQSAEAACVRVRVRVCACVCVRLHLCRVGKEIEMGGQ*AQVPKALNP\nLVWSLLRAMGAIEKSEQGCV*M*GLEGSSREASSKAFAIIW*ENPARM\nDRQNGIEMSWQLKWTGFGTSLVVGSKQRRIWDSGGLAWGRRGCLRGWE\nG*E*DDTWWCLAGGGQG*LCEGTARATEAF*DPAVPEPGRQDLHCGRP\nGEHLA\n\nReading frame 2\nGTSQQRQRVCACVCVCVRVCVYACICVGWVRR*RWAGSRPRSRRP*TH\nWFGVS*GQWGPLRSLNRAVSECEV*KDPPEKPALKLLQSSGERTQQGW\nTGRME*R*VGS*SGQDLVLAWLWGASRGESGTLVVWPGADGGVSGAGR\nDESRMIHGGVWQEAGKDDYVKALPGQLKPFETLLSQNQGGKTFIVGDQ\nVSIW-\n\nReading frame 3\nGPVSRGSVCARACACVCVCVCTLAFVSGG*GDRDGRAVGPGPEGLEPT\nGLESPKGNGGH*EV*TGLCLNVRSRRILQRSQL*SFCNHLVREPSKDG\nQAEWNRDELAAEVDRIWY*PGCGEQAEENLGLWWSGLGQTGVSQGLGG\nMRVG*YMVVSGRRRARMTM*RHCPGN*SLLRPCCPRTREARPSLWETR\n*ASG-\n\n\n\n\nWhile loop\n\n\nseq = \nIVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\n\n\ni = 0\nwhile i \n len(seq):\n    print seq[i:i + 12]\n    i = i + 12\n\n\n\n\nOutput:\n\n\nIVGGYTCGANTV\nPYQVSLNSGYHF\nCGGSLINSQWVV\nSAAHCYKSGIQV\nRLGEDNINVVEG\nNEQF\n\n\n\n\nFind the a sequence in a file\n\n\nswissprot = open(\nSwissProt.fasta\n)\ninsulin_ac = 'P61981'\nresult = None\n\nwhile result == None:\n    line = swissprot.next()\n    if line.startswith('\n'):\n        ac = line.split('|')[1]\n        if ac == insulin_ac:\n            result = line.strip()\n\nprint result\n\n\n\n\nOutput:\n\n\nsp|P61981|1433G_HUMAN 14-3-3 protein gamma OS=Homo sapiens GN=YWHAG PE=1 SV=2\n\n\n\n\nSearching a list\n\n\nsearch\n\n\nbases = ['A', 'C', 'T', 'G']\nseq = 'CAGGCCATTRKGL'\n\nfor i in seq:\n    if i not in bases:\n        print i, \nis not a nucleotide\n\n\n\n\n\nOutput:\n\n\nR is not a nucleotide\nK is not a nucleotide\nL is not a nucleotide\n\n\n\n\nRead a file and store entries in a dictionary\n\n\nsequences = {}\nac = ''\nseq = ''\n\nfor line in open(\nSwissProt.fasta\n):\n    if line.startswith('\n') and seq != '':\n        sequences[ac] = seq\n        seq = ''\n    if line.startswith('\n'):\n        ac = line.split('|')[1]\n    else:\n        seq = seq + line.strip()\n\nsequences[ac] = seq\nprint sequences.keys()\nprint sequences['P62258']\n\n\n\n\nOutput:\n\n\n['Q04917', 'P63104', 'P27348', 'P31947', 'P31946', 'P30443', 'P61981', 'P62258']\n\nMDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIGARRASWRIISSIEQKEENKGGEDKLKMIREYRQMVETELKLICCDILDVLDKHLIPAANTGESKVFYYKMKGDYHRYLAEFATGNDRKEAAENSLVAYKAASDIAMTELPPTHPIRLGLALNFSVFYYEILNSPDRACRLAKAAFDDAIAELDTLSEESYKDSTLIMQLLRDNLTLWTSDMQGDGEEQNKEALQDVEDENQ\n\n\n\n\nRead a sequence from a structure\n\n\naa_codes = {\n     'ALA':'A', 'CYS':'C', 'ASP':'D', 'GLU':'E',\n     'PHE':'F', 'GLY':'G', 'HIS':'H', 'LYS':'K',\n     'ILE':'I', 'LEU':'L', 'MET':'M', 'ASN':'N',\n     'PRO':'P', 'GLN':'Q', 'ARG':'R', 'SER':'S',\n     'THR':'T', 'VAL':'V', 'TYR':'Y', 'TRP':'W'}\n\nseq = ''\n\nfor line in open(\n1TLD.pdb\n):\n    if line[0:6] == \nSEQRES\n:\n        columns = line.split()\n        for resname in columns[4:]:\n            seq = seq + aa_codes[resname]\n\ni = 0\nprint \n1TLD\n\nwhile i \n len(seq):\n    print seq[i:i + 64]\n    i = i + 64\n\n\n\n\nOutput:\n\n\n1TLD\nIVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\nISASKSIVHPSYNSNTLNNDIMLIKLKSAASLNSRVASISLPTSCASAGTQCLISGWGNTKSSG\nTSYPDVLKCLKAPILSDSSCKSAYPGQITSNMFCAGYLEGGKDSCQGDSGGPVVCSGKLQGIVS\nWGSGCAQKNKPGVYTKVCNYVSWIKQTIASN\n\n\n\n\nChapter 6, Filtering Data\n\n\nCalculate the intersection of two lists\n\n\nvenn\n\n\ndata_a = [1, 2, 3, 4, 5, 6]\ndata_b = [1, 5, 7, 8, 9]\n\na_and_b = []\n\nfor num in data_a:\n    if num in data_b:\n        a_and_b.append(num)\n\nprint a_and_b\n\n\n\n\nOutput:\n\n\n[1, 5]\n\n\n\n\nMore about sets\n\n\nset\n\n\n\n\nSet = set([1, 2, 3])\n; immutable unordered collections of unique elements.\n\n\nThey are not sequential objects like lists.\n\n\nThey cannot contain identical elements.\n\n\nto remove duplicates\n\n\nto calculate the intersection\n\n\nthe union\n\n\nthe difference between two or more group of objects\n\n\nas long as the order is not important.\n\n\n\n\n\n\nThey do not support indexing and slicing operations.\n\n\nThey take the \nin\n and \nnot in\n operators (test an element for membership in a set).\n\n\n\n\n s1 = set('LDFGJLDFGDGD')\n\n s1\nset(['J', 'F', 'L', 'G', 'D'])\n\n\n 'L' in s1\nTrue\n\n\n 'Z' not in s1\nTrue\n\n\n s2 = ('LDF')\n\n s1.issubset(s2)\nFalse\n\n\n s1.issuperset(s2)\nTrue\n\n\n s1 = set(['a', 1, 2, 3, 4, 5, 'c', 'b'])\n\n 5 in s1\nTrue\n\n\n 6 in s1\nFalse\n\n\n s2 = set([10, 4, 5])\n\n s1.issubset(s2)\nFalse\n\n\n s1.issuperset(s2)\nFalse\n\n\n s3 = set((1, 2, 3, 4))\n\n s3\nset([1, 2, 3, 4])\n\n\n s3.add(5)\n\n s3\nset([1, 2, 3, 4, 5])\n\n\n s5 = set([1, 2, 3, 'b', 'c'])\n\n s5\nset([1, 2, 3, 'b', 'c'])\n\n\n s5.update(['a', 'd', 4])\n\n s5\nset(['a', 1, 2, 3, 4, 'd', 'c', 'b'])\n\n\n s1 = set(['a', 'b', 'c'])\n\n s2 = set(['c', 'd', 'e'])\n\n s1.union(s2)\nset(['a', 'c', 'b', 'e', 'd'])\n\n\n s1.intersection(s2)\nset(['c'])\n\n\n s1.symmetric_difference(s2)\nset(['a', 'b', 'e', 'd'])\n\n\n s1.difference(s2)\nset(['a', 'b'])\n\n\n s2.difference(s1)\nset(['e', 'd'])\n\n\n\n\nCalculate the intersection of two sets\n\n\ndata_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_and_b = data_a.intersection(data_b)\nprint a_and_b\n\n\n\n\nOutput:\n\n\nset([1, 5])\n\n\n\n\nFind numbers common to three sets\n\n\nreduce() is\n\na = set((1, 2, 3, 4, 5))\nb = set((2, 4, 6, 7, 1))\nc = set((1, 4, 5, 9))\n\ntriple_set = [a, b, c]\ncommon = reduce(set.intersection, triple_set)\nprint common\n\n\n\n\nOutput:\n\n\nset([1, 4])\n\n\n\n\nCalculate the differences of two lists\n\n\ndata_a = [1, 2, 3, 4, 5, 6]\ndata_b = [1, 5, 7, 8, 9]\n\na_not_b = []\nb_not_a = []\n\nfor num in data_a:\n    if num not in data_b:\n        a_not_b.append(num)\n\nfor num in data_b:\n    if num not in data_a:\n        b_not_a.append(num)\n\nprint a_not_b\nprint b_not_a\n\n\n\n\nOutput:\n\n\n[2, 3, 4, 6]\n[7, 8, 9]\n\n\n\n\nCalculate the differences of two sets 1\n\n\ndata_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_not_b = data_a.difference(data_b)\nb_not_a = data_b.difference(data_a)\n\nprint a_not_b\nprint b_not_a\n\n\n\n\nOutput:\n\n\nset([2, 3, 4, 6])\nset([8, 9, 7])\n\n\n\n\nCalculate the differences of two sets 2\n\n\ndata_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_or_b = data_a.union(data_b)\na_xor_b = data_a.symmetric_difference(data_b)\n\nprint a_or_b\nprint a_xor_b\n\n\n\n\nOutput:\n\n\nset([1, 2, 3, 4, 5, 6, 7, 8, 9])\nset([2, 3, 4, 6, 7, 8, 9])\n\n\n\n\nRemove elements from a list\n\n\n\n\npop()\n; return and remove the first value.\n\n\npop(0)\n; return and remove a specific position in the index.\n\n\n\n\n data_a = [1, 2, 3, 4, 5, 6, 7]\n\n data_a.pop()\n1\n\n\n print data_a\n[2, 3, 4, 5, 6, 7]\n\n\n\n\n\n\ndel()\n; remove a specific position in the index only.\n\n\n\n\ndelete\n\n\n data_a = [1, 2, 3, 4, 5, 6, 7]\n\n del(data_a[1])\n\n print data_a\n[1, 3, 4, 5, 6, 7]\n\n\n\n\n\n\nremove()\n;  remove a specific element only.\n\n\n\n\nremove\n\n\n data_a = [1, 2, 3, 4, 5, 6]\n\n data_a.remove(2)\n\n print data_a\n[1, 3, 4, 5, 6]\n\n\n data = [x for x in data_a if x != 3]\n\n\n\n\nSlicing a list\n\n\nslice, subset\n\n\n data_a = [1, 2, 3, 4, 5, 6]\n\n data_2 = data_a[:2]\n[1, 2]\n\n\n\n\nRemove elements from a dictionary\n\n\npop, delete\n\n\n d = {'a': 1, 'b': 2, 'c': 3}\n\n d.pop('a')\n1\n\n\n d\n{'b': 2, 'c': 3}\n\n\n d = {'a': 1, 'b': 2, 'c': 3}\n\n del d['a']\n1\n\n\n d\n{'b': 2, 'c': 3}\n\n\n\n\nDelete particular lines from a text file or write back particular lines in a new file\n\n\nlines = open('text.txt').readlines()\nopen('new.txt', 'w').writelines(lines[2:4]+lines[6:])\n\n\n\n\nRemove some lines from a text file\n\n\nin_file = open('text.txt')\nout_file = open('new.txt', 'w')\n\nindex = 0\nindices_to_remove = [1, 2, 5, 6]\nfor line in in_file:\n    index = index + 1\n    if index not in indices_to_remove:\n        out_file.write(line)\n\nin_file.close()\nout_file.close()\n\n\n\n\nRemove some lines from a text file with \nenumerate()\n\n\nenumerate\n\n\nout_file = open('new.txt', 'w')\nindices_to_remove = [1, 2, 5, 6]\n\nfor index, line in enumerate(open('text.txt')):\n    if (index + 1) not in indices_to_remove:\n        out_file_write(line)\n\nout_file.close()\n\n\n\n\nRemove duplicates from a file with accession numbers 1\n\n\nset\n\n\n\n\nUsing a set is faster but distorts the order.\n\n\n\n\ninput_file = open('UniprotID.txt')\noutput_file = open('UniprotID-unique.txt','w')\n\nunique = set(input_file)\nfor line in input_file:\n    unique.add(line)\n\nfor line in unique:\n    output_file.write(line)\n\n\n\n\nRemove duplicates from a list of accession numbers 2\n\n\nlist\n\n\ninput_file = open('UniprotID.txt')\noutput_file = open('UniprotID-unique.txt','w')\n\nunique = []\nfor line in input_file:\n    if line not in unique:\n        output_file.write(line)\n        unique.append(line)\n\ninput_file.close()\noutput_file.close()\n\n\n\n\nCompare two lists of accession codes using sets\n\n\nset comparison, difference\n\n\n# read the old database release\nold_db = set()\nfor line in open(\nlist_old.txt\n):\n    accession = line.strip()\n    old_db.add(accession)\n\n# read the new database release\nnew_db = set()\nfor line in open(\nlist_new.txt\n):\n    accession = line.strip()\n    new_db.add(accession)\n\n# report the differences\nnew_entries = new_db.difference(old_db)\nprint \nnew entries\n, list(new_entries)\nold_entries = old_db.difference(new_db)\nprint \ndeprecated entries\n, list(old_entries)\nunique_entries = new_db.symmetric_difference(old_db)\nprint \nunique entries\n, list(unique_entries)\n\n\n\n\nChapter 7, Managing Tabular Data\n\n\nThe original data\n\n\n\n\n\n\n\n\nprotein\n\n\next1\n\n\next2\n\n\next3\n\n\n\n\n\n\n\n\n\n\n0.16\n\n\n0.038\n\n\n0.044\n\n\n0.04\n\n\n\n\n\n\n0.33\n\n\n0.089\n\n\n0.095\n\n\n0.091\n\n\n\n\n\n\n0.66\n\n\n0.184\n\n\n0.191\n\n\n0.191\n\n\n\n\n\n\n1.0\n\n\n0.28\n\n\n0.292\n\n\n0.283\n\n\n\n\n\n\n1.32\n\n\n0.365\n\n\n0.367\n\n\n0.365\n\n\n\n\n\n\n1.66\n\n\n0.441\n\n\n0.443\n\n\n0.444\n\n\n\n\n\n\n\n\nRead tabular data from a tab-separated text file\n\n\ntable = []\n\nfor line in open('lowry_data.txt'):\n    table.append(line.strip().split('\\t'))\n\nprint table\n\n\n\n\nOutput:\n\n\n[\n['protein', 'ext1', 'ext2', 'ext3'],\n['0.16', '0.038', '0.044', '0.04'],\n['0.33', '0.089', '0.095', '0.091'],\n['0.66', '0.184', '0.191', '0.191'],\n['1.0', '0.28', '0.292', '0.283'],\n['1.32', '0.365', '0.367', '0.365'],\n['1.66', '0.441', '0.443', '0.444']\n]\n\n\n\n\nWrite a nested list to a text file\n\n\ntable = [\n    ['protein', 'ext1', 'ext2', 'ext3'],\n    [0.16, 0.038, 0.044, 0.040],\n    [0.33, 0.089, 0.095, 0.091],\n    [0.66, 0.184, 0.191, 0.191],\n    [1.00, 0.280, 0.292, 0.283],\n    [1.32, 0.365, 0.367, 0.365],\n    [1.66, 0.441, 0.443, 0.444]\n    ]\n\nout = ''\n\nfor row in table:\n    line = [str(cell) for cell in row]\n    out = out + '\\t'.join(line) + '\\n'\n\nopen('lowry_data.txt', 'w').write(out)\n\n\n\n\nReformat a four-column to a two-column table\n\n\nCreate a 2D table.\n\n\nPrint the table line by line.\n\n\ntable = [\n    ['protein', 'ext1', 'ext2', 'ext3'],\n    [0.16, 0.038, 0.044, 0.040],\n    [0.33, 0.089, 0.095, 0.091],\n    [0.66, 0.184, 0.191, 0.191],\n    [1.00, 0.280, 0.292, 0.283],\n    [1.32, 0.365, 0.367, 0.365],\n    [1.66, 0.441, 0.443, 0.444]\n    ]\n\n# remove the first row\ntable = table[1:]\n\nprotein, ext1, ext2, ext3 = zip(*table)\n\n# create a single column for `ext` or concatenate each `ext`\n# extend (`* 3`) the `protein` column to match the `ext` column.\nextinction = ext1 + ext2 + ext3\nprotein = protein * 3\n\n# create four tuples for each column\ntable = zip(protein, extinction)\n\nfor prot, ext in table:\n    print prot, ext\n\n\n\n\nOutput:\n\n\n\n\n\n\n\n\nprotein\n\n\next\n\n\n\n\n\n\n\n\n\n\n0.16\n\n\n0.038\n\n\n\n\n\n\n0.33\n\n\n0.089\n\n\n\n\n\n\n0.66\n\n\n0.184\n\n\n\n\n\n\n1.0\n\n\n0.28\n\n\n\n\n\n\n1.32\n\n\n0.365\n\n\n\n\n\n\n1.66\n\n\n0.441\n\n\n\n\n\n\n0.16\n\n\n0.044\n\n\n\n\n\n\n0.33\n\n\n0.095\n\n\n\n\n\n\n0.66\n\n\n0.191\n\n\n\n\n\n\n1.0\n\n\n0.292\n\n\n\n\n\n\n1.32\n\n\n0.367\n\n\n\n\n\n\n1.66\n\n\n0.443\n\n\n\n\n\n\n0.16\n\n\n0.04\n\n\n\n\n\n\n0.33\n\n\n0.091\n\n\n\n\n\n\n0.66\n\n\n0.191\n\n\n\n\n\n\n1.0\n\n\n0.283\n\n\n\n\n\n\n1.32\n\n\n0.365\n\n\n\n\n\n\n1.66\n\n\n0.444\n\n\n\n\n\n\n\n\nCreate a table; lists in a list\n\n\n\n\nEmpty 1.\n\n\n\n\ntable = [[0] * 3 for x in range(3)]\n\n\n\n\n\n\nEmpty 2.\n\n\n\n\ntable = []\nfor i in range(3):\n    table.append([0] * 3)\n\n\n\n\nEncode a 2D list; lists in a list\n\n\ntabular, table, two dimensions\n\n\ntable = [\n    [ 0,  1,  2,  3],\n    [10, 11, 12, 13],\n    [20, 21, 22, 23]\n    ]\n\n\n\n\nEncode a list of nested tuples; tuples in a list\n\n\ntable = [\n    ( 0,  1,  2,  3),\n    (10, 11, 12, 13),\n    (20, 21, 22, 23)\n    ]\n\n\n\n\nExtract, access rows and cells from a 2D table\n\n\ntabular, table, two dimensions\n\n\n\n\ntable[1]\n; extract the 2nd row.\n\n\ntable[1][2]\n; extract a single cell (2nd row, 3rd column).\n\n\ntable[1:]\n or \ntable.pop(0)\n; slice the 1st row, keep the remaining.\n\n\ntable.pop(2)\n; delete the 3rd row.\n\n\ntable[:2]\n; slice the 3rd column, keep the remaining.\n\n\ntable[:2] + table[3:]\n; slice the 3rd column and 4th row, keep the remaining.\n\n\ntable.insert(2, [0.55, 0.12, 0.12, 0.14])\n; insert a new row in 3rd position\n\n\ntable.append([0.55, 0.12, 0.12, 0.14])\n; insert a new row at the end.\n\n\n\n\nLooping to access each row\n\n\nfor row in table:\n    print row\n\n\n\n\nLooping to access each cell\n\n\nfor row in table:\n    for cell in row:\n        print cell\n\n\n\n\nExtract, access columns from a 2D table\n\n\ntabular, table, two dimensions\n\n\nprotein = []\n\n# access the 1st, 2nd... column (separate the columns)\nfor row in table:\n    protein.append(row[0])\n\n\n\n\n# access the 4th column\ncolumns = zip(*table)\nfourth = column[3]\n\n\n\n\n\n\nprotein, ex1. ext2, ext3 = zip(*table)\n; access many columns; now each column is in a separate tuple.\n\n\n\n\nFlip a table 90 degrees\n\n\nconvert column to row, row to column\n\n\n\n\nColumn becomes rows. Easier to extract or insert rows and cells.\n\n\n\n\ndata = [\n    [ 0,  1,  2,  3],\n    [10, 11, 12, 13],\n    [20, 21, 22, 23]\n]\n\ncolumns = zip(*data)\nprint columns\n\n\n\n\nOutput:\n\n\n[\n(0, 10, 20),\n(1, 11, 21),\n(2, 12, 22),\n(3, 13, 23)\n]\n\n\n\n\n\n\nBut rows are now immutable tuples!\n\n\nYou cannot manipulate individual cells.\n\n\nConvert the rows to lists again in order to extract a cell.\n\n\n\n\ntable[1] = list(table[1])\ntable[1][2]\n\n\n\n\nInsert, access or extract columns from a 2D table\n\n\ntabular, table, two dimensions\n\n\ntable = zip(*table)\ntable.append(['ext4', 0, 0, 0, 0, 0, 0])\ntable = zip(*table)\n\ntable = zip(*table)\ntable.pop(1)\ntable = zip(*table)\n\ntable = zip(*table)\ntable\n\n\n\n\nThe \nzip()\n function\n\n\n\n\nzip()\n; iterate though lists, tuples, and strings.\n\n\n\n\n zip([1, 2, 3], [4, 5, 6])\n[\n(1, 4),\n(2, 5),\n(3, 6)\n]\n\n\n\n\n\n\nThe asterik tells the function to use all the arguments.\n\n\n\n\nzip(*table)\n\n# vs\n\nzip(table[0], table[1], table[2], table[3])\n\n\n\n\nMulti-dimentional tables\n\n\ntabular, table, two dimensions, three dimensions, 2D, 3D, lists in list\n\n\ncube = [[[0, 1], [2, 3]], [[4, 5], [6, 7]]]\n\n\n\n\n\n\nWarning: more dimensions means more nested data.\n\n\nIt slows down the calculations!!! \n\n\nPrefer Numpy, Pandas, parallel computing.\n\n\nAvoid going over 2D!\n\n\n\n\nCreate a table; dictionaries in a table, in a list\n\n\ntable = [\n   {'protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040},\n   {'protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091},\n   {'protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191},\n   {'protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283},\n   {'protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365},\n   {'protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444}\n   ]\n\n\n\n\nExtract, access cells in a table\n\n\n# second row, cell 'ext2' instead of a number\ncell = table[1]['ext2']\n\nprint table\nprint cell\n\n\n\n\nCreate a table; dictionaries in a dictionary\n\n\ntable = {\n   'row1': {'protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040},\n   'row2': {'protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091},\n   'row3': {'protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191},\n   'row4': {'protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283},\n   'row5': {'protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365},\n   'row6': {'protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444}\n   }\n\n\n\n\nExtract, access cells in a table, in a dictionary\n\n\nMore readable this way; second row, cell \n'ext2'\n:\n\n\ncell = table['row1']['ext2']\n\nprint table\nprint cell\n\n\n\n\nCreate a table: lists in a dictionaries\n\n\nData for each row are in a simpler format.\n\n\ntable = {\n   '1': ['protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040\u00b8],\n   '2': ['protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091],\n   '3': ['protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191],\n   '4': ['protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283],\n   '5': ['protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365],\n   '6': ['protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444]\n   }\n\n\n\n\nCreate a table; formats\n\n\n\n\nLists in a list: \n\n\nEasy to access/add/delete rows, to sort. \n\n\nDifficult to deal with columns and a specific cell.\n\n\n\n\n\n\nDictionaries in a dictionary:\n\n\nEasy to access column entries.\n\n\nEasy to read (find data).\n\n\nUnsorted and impossible to sort.\n\n\n\n\n\n\nMixed lists and dictionaries:\n\n\nUse the advantage of both types and build the table accordingly (l, d or d, l for rows, columns) depending on the operations (see above).\n\n\nThe code is harder to read or less straightforward.\n\n\n\n\n\n\n\n\nConvert a table from a nested list to a nested dictionary\n\n\ntable = [\n    ['protein', 'ext'],\n    [0.16, 0.038],\n    [0.33, 0.089],\n    [0.66, 0.184],\n    [1.00, 0.280],\n    [1.32, 0.365],\n    [1.66, 0.441]\n]\n\n# convert nested list to nested dict\nnested_dict = {}\nn = 0\nkey = table[0]\nfor row in table[1:]: # for row in table[0:]  includes the header\n    n += 1\n    entry = {key[0]: row[0], key[1]: row[1]}\n    nested_dict['row'+str(n)] = entry\n\nprint nested_dict\n\n\n\n\nOutput:\n\n\n{\n'row1': {'protein': 0.16, 'ext': 0.038},\n'row2': {'protein': 0.33, 'ext': 0.089},\n'row3': {'protein': 0.66, 'ext': 0.184},\n'row4': {'protein': 1.0, 'ext': 0.28},\n'row5': {'protein': 1.32, 'ext': 0.365},\n'row6': {'protein': 1.66, 'ext': 0.441}\n}\n\n\n\n\nand convert a nested dictionary to a table\n\n\n# convert nested dict back to nested list\nnested_list = []\nfor entry in nested_dict:\n    key = nested_dict[entry]\n    nested_list.append([key['protein'], key['ext']])\n\nprint nested_list\n\n\n\n\nOutput:\n\n\n[\n[0.16, 0.038],\n[0.33, 0.089],\n[0.66, 0.184],\n[1.0, 0.28],\n[1.32, 0.365],\n[1.66, 0.441]\n]\n\n\n\n\nChapter 8, Sorting Data\n\n\nSort a table by one column and write it to a file\n\n\nadd, index, list\n\n\n\n\nsorted()\n.\n\n\nitemgetter()\n; turn elements of each column into a sortable key.\n\n\n\n\nfrom operator import itemgetter\n\n# read table to a nested list of floats\ntable = []\nfor line in open(\nrandom_distribution.tsv\n):\n    columns = line.split()\n    columns = [float(x) for x in columns]\n    table.append(columns)\n\n# sort the table by second column\ncolumn = 1\ntable_sorted = sorted(table, key = itemgetter(column))\n\n# format table as strings\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    print \n\\t\n.join(row)\n\n\n\n\nOutput (first 3 lines only):\n\n\n6153.0  58.0    0.00942629611572    40.0    0.00650089387291    260.0   0.0422558101739\n6101.0  64.0    0.0104900835929 41.0    0.00672020980167    299.0   0.0490083592854\n6101.0  68.0    0.0111457138174 39.0    0.0063923946894 274.0   0.0449106703819\n\n\n\n\nList are good for sorting\n\n\n\n\nASCII sort order chart (top to bottom, left to right):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspace\n\n\n0\n\n\n:\n\n\nA\n\n\nQ\n\n\n[\n\n\na\n\n\nq\n\n\n}\n\n\n\n\n\n\n!\n\n\n1\n\n\n;\n\n\nB\n\n\nR\n\n\n\\\n\n\nb\n\n\nr\n\n\ntick\n\n\n\n\n\n\n\n\n2\n\n\n\n\nC\n\n\nS\n\n\n]\n\n\nc\n\n\ns\n\n\n{\n\n\n\n\n\n\n#\n\n\n3\n\n\n=\n\n\nD\n\n\nT\n\n\n^\n\n\nd\n\n\nt\n\n\n\n\n\n\n\n\n$\n\n\n4\n\n\n\n\nE\n\n\nU\n\n\n_\n\n\ne\n\n\nu\n\n\nDEL\n\n\n\n\n\n\n%\n\n\n5\n\n\n?\n\n\nF\n\n\nV\n\n\n`\n\n\nf\n\n\nv\n\n\n\n\n\n\n\n\n\n\n6\n\n\n@\n\n\nG\n\n\nW\n\n\n\n\ng\n\n\nw\n\n\n\n\n\n\n\n\n\n\n7\n\n\n\n\nH\n\n\nX\n\n\n\n\nh\n\n\nx\n\n\n\n\n\n\n\n\n(\n\n\n8\n\n\n\n\nI\n\n\nY\n\n\n\n\ni\n\n\ny\n\n\n\n\n\n\n\n\n)\n\n\n9\n\n\n\n\nJ\n\n\nZ\n\n\n\n\nj\n\n\nz\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\nK\n\n\n\n\n\n\nk\n\n\n\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\nL\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\nM\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\nN\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\nO\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n/\n\n\n\n\n\n\nP\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\nDifference between \nsort()\n and \nsorted()\n\n\n\n\nsort()\n; apply to lists\n\n\nsorted()\n; apply to lists, tuples, and dictionary keys.\n\n\nreverse()\n sort the other way around.\n\n\nsorted(data, reverse = True)\n; idem.\n\n\noperator.itemgetter(i)(T)\n returns the \ni\nth element of \nT\n, a string, a list, a tuple, or a dictionary.\n\n\n\n\n from operator import itemgetter\n\n data = ['A', 'T', 'C']\n\n itemgetter(1)(data)\n'A'\n\n itemgetter(1, -1)(data)\n('A', 'T')\n\n\n\n\nnew_table = sorted(table, key = itemgetter(1, 3))\n\n\n\n\nSort entries in a tabular output file in reverse order\n\n\n\n\nNotice the \ntable_sorted = sorted(table, key = itemgetter(2), reverse=True)\n.\n\n\n\n\nfrom operator import itemgetter\n\ninput_file = open(\nBlastOut.csv\n)\noutput_file = open(\nBlastOutSorted.csv\n,\nw\n)\n\n# read BLAST output table\ntable = []\nfor line in input_file:\n    col = line.split(',')\n    col[2] = float(col[2])\n    table.append(col)\n\ntable_sorted = sorted(table, key = itemgetter(2), reverse=True)\n\n# write sorted table to an output file\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write(\n\\t\n.join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()\n\n\n\n\nSort a tuple by converting it to a list\n\n\n# sort a tuple\ndata = (1, 4, 5, 3, 8, 9, 2, 6, 8, 9, 30)\nlist_data = list(data)\nlist_data.sort()\nnew_tup = tuple(data)\nprint new_tup\n\n# sort a tuple using the sorted() built-in function\nnew_tup = tuple(sorted(data))\nprint new_tup\n\n\n\n\nBoth outputs:\n\n\n(1, 4, 5, 3, 8, 9, 2, 6, 8, 9, 30)\n(1, 2, 3, 4, 5, 6, 8, 8, 9, 9, 30)\n\n\n\n\nConvert a dictionary to a sorted list\n\n\ndata = {1: 'a', 2: 'b', 4: 'd', 3: 'c',\n        5: 't', 6: 'm', 36: 'z'}\n\n# create a list of keys and go through them one by one\nkeys = list(data)\nkeys.sort()\nfor key in keys:\n    print key, data[key]\n\n\n# sort keys using the sorted() built-in function\nfor key in sorted(data):\n    print key, data[key]\n\n\n\n\nOutput:\n\n\n1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z\n1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z\n\n\n\n\nSort strings by their length\n\n\nlamda, function\n\n\n\n\nUse a \nlambda\n function and replace \nitemgetter()\n.\n\n\n\n\ndata = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda x: len(x))\nprint new_data\n\n\n\n\ndata = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda col: col[1]) # alternative\nprint new_data\n\n\n\n\nSame output:\n\n\n['ASDF', 'SDFSD', 'GSGDGG', 'SDFSADGSAG']\n\n\n\n\nSort a table by seven columns in one operation\n\n\nfrom operator import itemgetter\n\n# read table\nin_file = open(\nrandom_distribution.tsv\n)\ntable = []\nfor line in in_file:\n    columns = line.split()\n    columns = [float(x) for x in columns]\n    table.append(columns)\n\ntable_sorted = sorted(table, key=itemgetter(0, 1, 2, 3, 4, 5, 6))\nprint table_sorted\n\n\n\n\nOutput (first 3 lines only):\n\n\n[\n[6041.0, 87.0, 0.0144015891409, 44.0, 0.00728356232412, 213.0, 0.035259063069],\n[6042.0, 121.0, 0.0200264812976, 35.0, 0.00579278384641, 262.0, 0.0433631247931],\n[6044.0, 113.0, 0.0186962276638, 67.0, 0.0110853739246, 266.0, 0.0440105890139],\n...\n]\n\n\n\n\nSort entries in a tabular BLAST output file in reverse order\n\n\nfrom operator import itemgetter\n\ninput_file = open(\nBlastOut.csv\n)\noutput_file = open(\nBlastOutSorted.csv\n,\nw\n)\n\n# read BLAST output table\ntable = []\nfor line in input_file:\n    col = line.split(',')\n    col[2] = float(col[2])\n    table.append(col)\n\ntable_sorted = sorted(table, key=itemgetter(2), reverse=True)\n\n# write sorted table to an output file\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write(\n\\t\n.join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()\n\n\n\n\nSort entries in a comma separated file by two columns\n\n\nfrom operator import itemgetter\n\ninput_file = open(\nPDBhaemoglobinReport.csv\n)\noutput_file = open(\nPDBhaemoglobinSorted.csv\n,\nw\n)\n\ntable = []\nheader = input_file.readline()\nfor line in input_file:\n    col = line.split(',')\n    col[3] = float(col[3][1:-1])\n    col[4] = int(col[4][1:-2])\n    table.append(col)\n\ntable_sorted = sorted(table, key=itemgetter(3, 4))\n\noutput_file.write(header + '\\t')\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write(\n\\t\n.join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()\n\n\n\n\nChapter 9, Pattern Matching and Text Mining\n\n\nFind a sequence pattern in a sequence\n\n\nregex, regular expression\n\n\n\n\nre\n package.\n\n\n\n\nimport re\n\n# define a string with occurrences of regex:\nseq = 'VSVLTMFRYAGWLDRLYMLVGTQLAAIIHGVALPLMMLI'\n\n# compile a pattern and assign it to a variable\npattern = re.compile('[ST]Q')\n\n# search for the pattern in the string\nmatch = pattern.search(seq)\nif match:\n    # print the first match along the sequence with the group() method\n    # 4 characters before and after the pattern\n    print '%10s' %(seq[match.start() - 4:match.end() + 4])\n    print '%6s' % match.group()\nelse:\n    print \nno match\n\n\n\n\n\nOutput:\n\n\nMLVGTQLAAI\n    TQ\n\n\n\n\nre\n methods\n\n\n\n\ngroup()\n; return the matching subgroup.\n\n\nspan()\n; return a tuple containing the starting and ending position of the match.\n\n\nstart()\n; return the starting position.\n\n\nend()\n; return the ending position.\n\n\nsearch()\n; find the \nfirst\n occurence within the string.\n\n\nmatch()\n; attempt to match a pattern to a string. If the pattern is within the string, it will not match it. It will find \nS\n in \nST\n, but not in \nTST\n. \n\n\nfindall()\n; return a list containing \nall\n the matching substrings.\n\n\nfinditer()\n; find \nall\n the match objects corresponding to the regex matches and returns them in the form of an iterator.\n\n\n\n\nimport re\n\npattern = re.compile('R.[ST][^P]')\nseq = 'RQSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'\n\n# findall returns a list of all matches\nmatches = pattern.findall(seq)\nprint matches\n\n# finditer returns an iterator of match objects\nmatch_iter = pattern.finditer(seq)\nfor match in match_iter:\n    print match.group(), match.span(), match.start(), match.end()\n\n\n\n\nOuput:\n\n\n['RQSA', 'RRSL', 'RPSK']\nRQSA (0, 4) 0 4\nRRSL (18, 22) 18 22\nRPSK (40, 44) 40 44\n\n\n\n\nMore \nre\n methods\n\n\n\n\nDivide regex in subgroups, each matching a different component of interest.\n\n\n(.)\n; delimite a group.\n\n\nR(.)[ST][^P]\n; stand for \nR\n, \nany character\n, pattern \nST\n, any character different from \nP\n.\n\n\nThe \nany character\n is also a subgroup.\n\n\nWhat ever is found between \nR\n and \n[ST][^P]\n is a subgroup.\n\n\n\n\n\n\nR(.{0,3})[ST][^P]\n; add a `{0,3}.\n\n\nThis qualifier or quantifiers means that at least 0 and at most 3 repetitions of \nR\n.\n\n\n\n\n\n\ngroup()\n; always return the complete matching substring (0 for no subgroup).\n\n\ngroup(#)\n; return subgroups numbered from left to right in increasing order (subgroup #).\n\n\n\n\nFind multiple patterns in a search string\n\n\nimport re\n\nseq = 'QSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'\n\npattern1 = re.compile('R(.)[ST][^P]')\nmatch1 = pattern1.search(seq)\nprint match1.group()\nprint match1.group(1)\n\npattern2 = re.compile('R(.{0,3})[ST][^P]')\nmatch2 = pattern2.search(seq)\nprint match2.group()\nprint match2.group(1)\n\n\n\n\nOutput:\n\n\nRRSL\nR\nRRRSL\nRR\n\n\n\n\nAnother example with two subgroups\n\n\nimport re\n\nseq = 'zzabcdzz'\n\npattern = re.compile('(a(b)c)d')\nmatch = pattern.search(seq)\nprint match.group(0)\nprint match.group(1)\nprint match.group(2)\nprint match.groups()\n\n\n\n\n\n\ngroups()\n; return a tuple with the substrings corresponding to all subgroups.\n\n\n\n\nOutput:\n\n\nabcd\nabc\nb\n('abc', 'b')\n\n\n\n\nAssign  names to subgroup: \n?P\nw1\n and \n?P\nw2\n\n\nimport re\n\nseq = 'zzabcdzz'\n\npattern = re.compile('(?P\nw1\na(?P\nw2\nb)c)d')\nmatch = pattern.search(seq)\nprint match.group(0)\nprint match.group('w1')\nprint match.group('w2')\n\n\n\n\nOuput:\n\n\nabcd\nabc\nb\n\n\n\n\nMore \nre\n methods\n\n\n\n\nsplits(s)\n; split the string \ns\n at the matches of a regex.\n\n\nsub(r, s, [c])\n; return a new string \ns\n where nonoverlapping occurrences of a given pattern in the string are all replaced with the value of \nr\n. \nc\n, an optional number, stands for the maximum numbers of occurences.\n\n\nsubn(r, s, [c])\n; do what \nsub()\n does, but returns a tuple of two elements; the first element is the new string (as with \nsub(r, s, [c])\n) and the second is the number of replacements.\n\n\n\n\nSplit text and replace separators with a pattern\n\n\nimport re\n\nseparator = re.compile('\\|')\n\n# split\nannotation = 'ATOM:CA|RES:ALA|CHAIN:B|NUMRES:166'\ncolumns = separator.split(annotation)\nprint columns\n\n# replace\nnew_annotation = separator.sub('@', annotation)\nprint \nreplace all |:\n\nprint new_annotation\n\nnew_annotation2 = separator.sub('@', annotation, 2)\nprint \nreplace 2 |:\n\nprint new_annotation2\n\nnew_annotation3 = separator.subn('@', annotation)\nprint \nreplace all |:\n\nprint new_annotation3\n\nnew_annotation4 = separator.subn('@', annotation, 2)\nprint \nreplace 2 |:\n\nprint new_annotation4\n\n\n\n\nOutput:\n\n\n['ATOM:CA', 'RES:ALA', 'CHAIN:B', 'NUMRES:166']\nreplace all |:\nATOM:CA@RES:ALA@CHAIN:B@NUMRES:166\nreplace 2 |:\nATOM:CA@RES:ALA@CHAIN:B|NUMRES:166\nreplace all |:\n('ATOM:CA@RES:ALA@CHAIN:B@NUMRES:166', 3)\nreplace 2 |:\n('ATOM:CA@RES:ALA@CHAIN:B|NUMRES:166', 2)\n\n\n\n\nFind transcription factor binding sites\n\n\nimport re\n\ngenome_seq = open('genome.txt').read()\n\n# read transcription factor binding site patterns\nsites = []\nfor line in open('TFBS.txt'):\n    fields = line.split()\n    tf = fields[0]\n    site = fields[1]\n    sites.append((tf, site))\n\n# match all TF's to the genome and print matches\nfor tf, site in sites:\n    tfbs_regexp = re.compile(site)\n    all_matches = tfbs_regexp.findall(genome_seq)\n    matches = tfbs_regexp.finditer(genome_seq)\n    if all_matches:\n        print tf, ':'\n        for tfbs in matches:\n            print '\\t', tfbs.group(), tfbs.start(), tfbs.end()\n\n\n\n\nParse abstracts from PubMed HTML pages\n\n\n\n\nThe script opens the HTML webpage and parses it in order to selectively fetch some parts of it.\n\n\nExtract the title and the abstract text.\n\n\nThe title of the paper is enclosed between \nh1\n and \n/h1\n.\n\n\nWhereas the text of the abstract is enclosed between \nh3\nAbstract\n/h3\ndiv class = \"\"\np\n and \n/p\n.\n\n\nThe paper.\n\n\n\n\nimport urllib2\nimport re\n\npmid = '18235848'\nurl = 'http://www.ncbi.nlm.nih.gov/pubmed?term=%s' % pmid\nhandler = urllib2.urlopen(url)\nhtml = handler.read()\n\ntitle_regexp = re.compile('\nh1\n.{5,400}\n/h1\n')\ntitle_text = title_regexp.search(html)\n\nabstract_regexp = re.compile('\nAbstractText\n.{20,3000}\n/AbstractText\n')\nabstract_text = abstract_regexp.search(html)\n\nprint 'TITLE:', title_text.group() \nprint 'ABSTRACT:', abstract_text.group()\n\n\n\n\nOutput:\n\n\nTITLE: \nh1\nQuantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade.\n/h1\n\nABSTRACT: \nAbstractText\nSchistosomiasis is a tropical disease associated with high morbidity and mortality, currently affecting over 200 million people worldwide. Praziquantel is the only drug used to treat the disease, and with its increased use the probability of developing drug resistance has grown significantly. The Schistosoma parasites can survive for up to decades in the human host due in part to a unique set of antioxidant enzymes that continuously degrade the reactive oxygen species produced by the host's innate immune response. Two principal components of this defense system have been recently identified in S. mansoni as thioredoxin/glutathione reductase (TGR) and peroxiredoxin (Prx) and as such these enzymes present attractive new targets for anti-schistosomiasis drug development. Inhibition of TGR/Prx activity was screened in a dual-enzyme format with reducing equivalents being transferred from NADPH to glutathione via a TGR-catalyzed reaction and then to hydrogen peroxide via a Prx-catalyzed step. A fully automated quantitative high-throughput (qHTS) experiment was performed against a collection of 71,028 compounds tested as 7- to 15-point concentration series at 5 microL reaction volume in 1536-well plate format. In order to generate a robust data set and to minimize the effect of compound autofluorescence, apparent reaction rates derived from a kinetic read were utilized instead of end-point measurements. Actives identified from the screen, along with previously untested analogues, were subjected to confirmatory experiments using the screening assay and subsequently against the individual targets in secondary assays. Several novel active series were identified which inhibited TGR at a range of potencies, with IC(50)s ranging from micromolar to the assay response limit ( approximately 25 nM). This is, to our knowledge, the first report of a large-scale HTS to identify lead compounds for a helminthic disease, and provides a paradigm that can be used to jump-start development of novel therapeutics for other neglected tropical diseases.\n/AbstractText\n\n\n\n\n\nSearch for keywords in a series of PubMed abstracts\n\n\n\n\nThis example can be applied to perform very simple text mining and can be compared to the \nfind\n tool in Microsoft Word.\n\n\nIt might stop on the first occurence.\n\n\n\n\nimport urllib2\nimport re\n\n# word to be searched\nword_regexp = re.compile('schistosoma')\n\n# list of PMIDs where we want to search the word\npmids = ['18235848', '22607149', '22405002', '21630672']\nfor pmid in pmids:\n    url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid\n    handler = urllib2.urlopen(url)\n    html = handler.read()\n    title_regexp = re.compile('\nh1\n.{5,400}\n/h1\n')\n    title = title_regexp.search(html)\n    title = title.group() \n    abstract_regexp = re.compile('\nAbstractText\n.{20,3000}\n/AbstractText\n')\n    abstract = abstract_regexp.search(html)\n    abstract = abstract.group()\n    word = word_regexp.search(abstract, re.IGNORECASE)\n    if word:\n        # display title and where the keyword was found\n        print title\n        print word.group(), word.start(), word.end()\n\n\n\n\n\n\nCircumvent the problem with the \nfinditer()\n method.\n\n\n\n\nimport urllib2\nimport re\n\n# word to be searched\nword_regexp = re.compile('schistosoma')\n\n# list of PMIDs where we want to search the word\npmids = ['18235848', '22607149', '22405002', '21630672']\nfor pmid in pmids:\n    url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid\n    handler = urllib2.urlopen(url)\n    html = handler.read()\n    title_regexp = re.compile('\nh1\n.{5,400}\n/h1\n')\n    title = title_regexp.search(html)\n    title = title.group() \n    abstract_regexp = re.compile('\nAbstractText\n.{20,3000}\n/AbstractText\n')\n    abstract = abstract_regexp.search(html)\n    abstract = abstract.group()\n    words = word_regexp.finditer(abstract)\n    if words:\n        # display title and where the keyword was found\n        print title\n        for word in words:\n            print word.group(), word.start(), word.end()\n\n\n\n\nOutput:\n\n\nh1\nQuantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade.\n/h1\n\n\nh1\nThe redox biology of schistosome parasites and applications for drug development.\n/h1\n\n\nh1\nMoonlighting by different stressors: crystal structure of the chaperone species of a 2-Cys peroxiredoxin.\n/h1\n\n\nh1\nInvestigations of the catalytic mechanism of thioredoxin glutathione reductase from Schistosoma mansoni.\n/h1\n\n\n\n\n\nMore \nre\n methods\n\n\n\n\nfindall()\n; look for all (non-overlapping) occurrences of pattern in string; return a list of matches.\n\n\nfinditer()\n; same as above except returns an iterator instead of a list; for each match, the iterator returns a match object; it is adapted for loops!\n\n\n|\n;  \nOR\n.\n\n\n$\n; indicate that a match exists in the string only if the pattern is in the last position of the string.\n\n\n^\n; indicate that a match exists in the string only if the pattern is in the first position of the string.\n\n\n\n\nPython Regex, Characters and Metacharaters\n\n\n\n\nPart 3, Modular Programming\n\n\nChapter 10, Divide a Program into Functions\n\n\nBuilt-in functions\n\n\nlength, total, sum, range\n\n\n\n\nlen()\n.\n\n\nsum()\n.\n\n\nrange(n, m, step)\n; from n to m-1, n = 0 by default.\n\n\nxrange(n, m, step)\n; better suited for big numbers.\n\n\n\n\nDefine functions\n\n\ndocstring, docstrings\n\n\n\n\nThe documentation is retrieved with the \n__doc__\n attribute: type \naddition.__doc__\n.\n\n\n\n\ndef addition(arg1, arg2):\n    '''\n    documentation: calculates the sum of two numbers\n    '''\n    result = arg1 + arg2\n    return result\n\nprint addition(1,1)\n\n\n\n\nLambda functions\n\n\n\n\nSmall anonymous functions; they are not declared using \ndef\n.\n\n\nThey do not contain return statement.\n\n\nThey can be defined in an argument in a function (useful).\n\n\nThere are nameless.\n\n\n\n\ndef f(x):\n    return x ** 2\n\nprint f(8)\n\n\n\n\nvs\n\n\ng = lambda x: x ** 2\n\nprint g(8)\n\n\n\n\nor\n\n\n(lambda x: x ** 2)(8)\n\n\n\n\n\n\nUse a \nlambda\n function as an argument of a built-in function:\n\n\n\n\ndata = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda x: len(x))\nprint new_data\n\n\n\n\nOutput:\n\n\n['ASDF', 'SDFSD', 'GSGDGG', 'SDFSADGSAG']\n\n\n\n\nFunction Arguments\n\n\n\n\nrequired arguments.\n\n\nkeyword arguments.\n\n\ndefault arguments.\n\n\nvariable-length arguments.\n\n\n\n\n1. Required Arguments\n\n\ndef print_funct(num, seq):\n    print num, seq\n\nprint_funct(10, \nABC\n)\n\n\n\n\nOutput:\n\n\n10 ABC\n\n\n\n\n2. Keyword Arguments\n\n\ndef print_funct(num, seq):\n    print num, seq\n\nprint_funct(seq = \nABC\n, num = 10)\n\n\n\n\nOutput:\n\n\n10 ABC\n\n\n\n\n3. Default Arguments\n\n\nsequence\n\n\n\n\nThe argument is given by default; but can be overwritten!\n\n\n\n\ndef print_funct(num, seq = \nA\n):\n    print num, seq\n\nprint_funct(10, \nABC\n)\nprint_funct(10)\n\n\n\n\nOutput:\n\n\n10 ABC\n10 A\n\n\n\n\n4. Variable-Length Arguments\n\n\nargument, list, tuple, dictionary\n\n\n\n\nFlexibility of providing any tuple.\n\n\n\n\ndef print_args(*args):\n    print args\n\nprint_args(1, 2, 3, 4, 5)\nprint_args('Hi')\nprint_args(100, 200, \nABC\n)\n\n\n\n\nOutput:\n\n\n(1, 2, 3, 4, 5)\n('Hi')\n(100, 200, 'ABC')\n\n\n\n\n\n\nProvide both the keys and values for a returned dictionary.\n\n\n\n\ndef print_args2(**args):\n    print args\n\nprint_args2(num = 100, num2 = 200, seq = \nABC\n)\n\n\n\n\nOutput:\n\n\n{'num': 100, 'seq': 'ABC, 'num2': 200}\n\n\n\n\nConvert a string into a tuple or vice-versa\n\n\n\n\nstruct\n package.\n\n\nIn the format, \ns\n stands for string, \n3s\n stands for a three-character string.\n\n\n\n\nimport struct\n\n# pack() method; creates a string\nformat = '2s1s1s1s1s'\ngroup = struct.pack(format, '10', '2', '3', '4', '5')\nprint group\n\n# unpack() method; parses the string to a tuple\nformat = '1s2s1s1s'\nline = '12345'\ncol = struct.unpack(format, line)\nprint col\n\n# calcsize() returns the number of characters\n# in a given format string\nformat = '30s30s20s1s'\nprint struct.calcsize(format)\n\n\n\n\nOutput:\n\n\n102345\n('1', '23', '4', '5')\n81\n\n\n\n\n\n\nThen, convert the tuple to a list if needed.\n\n\n\n\nFunction to calculate distance between two coordinates\n\n\npower\n\n\n\n\nmath\n package.\n\n\npow(x, y)\n replaces \nx ** y\n.\n\n\n\n\n\n\ndistance\n package; geometric calculations.\n\n\ncalc-dist()\n.\n\n\n\n\n\n\n\n\nfrom math import sqrt\n\ndef calc_dist(p1, p2):\n    '''returns the pythagorian distance between two 3D points'''\n    dx = p1[0] - p2[0]\n    dy = p1[1] - p2[1]\n    dz = p1[2] - p2[2]\n    distsq = pow(dx, 2) + pow(dy, 2) + pow(dz, 2)\n    distance = sqrt(distsq)\n    return distance\n\nprint calc_dist([3.0, 3.0, 3.0], [9.0, 9.0, 9.0])\n\n\n\n\nOutput:\n\n\n10.3923048454\n\n\n\n\nChapter 11 Managing Complexity with Classes\n\n\nClasses\n\n\n\n\nDefine a Class: \nclass Protein\n.\n\n\nAdd docstrings.\n\n\nThe constructor \n__init__()\n is a special function that defines what kinds of data your class should contain and enables the creation of instances. Add a docstring.\n\n\nOne class can have many instances. \nlys = Protein('lysozyme')\n is an instance of \nclass Protein\n.\n\n\nCreate a class function; a class function works like a method.\n\n\n\n\nclass Protein:\n    '''Class storing protein names'''\n\n    def __init__(self, name):\n        '''Sets the name of a protein'''\n        self.name = name\n\n    def write(self):\n        '''Writes protein name to the screen.'''\n        print 'I am ' + self.name\n\nlys = Protein('lysozyme')\nmyo = Protein('myoglobin')\n\nprint \nDocstrings:\n\nprint Protein.__doc__\nprint Protein.__init__.__doc__\nprint Protein.write.__doc__\n\nprint \n\n\nprint lys.name\nprint myo.name\n\nlys.write() # a class function works like a method\nmyo.write()\n\n\n\n\nOutput:\n\n\nDocstrings:\nClass storing protein names\nSets the name of a protein\nWrites protein name to the screen.\n\nlysozyme\nmyoglobin\nI am lysozyme\nI am myoglobin\n\n\n\n\nPrinting a object created from a class\n\n\n\n\nPrinting an object from a class is not very informative.\n\n\n\n\nclass Pea:\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\nclass PeaStrain:\n\n    def __init__(self, peas):\n        self.peas = peas\n\nyellow = Pea('GG')\ngreen = Pea('gg')\nstrain = PeaStrain([yellow, green])\n\nprint Pea\nprint PeaStrain\nprint Pea.__init__\nprint PeaStrain.__init__\n\nprint yellow\nprint green\nprint strain\n\n\n\n\nOutput:\n\n\n__main__.Pea\n__main__.PeaStrain\n\nunbound method Pea.__init__\n\n\nunbound method PeaStrain.__init__\n\n\n__main__.Pea instance at 0x0000000001DC6748\n\n\n__main__.Pea instance at 0x0000000001DC6748\n\n\n__main__.Pea instance at 0x000000000216BE08\n\n\n__main__.PeaStrain instance at 0x000000000216BE48\n\n\n\n\n\n\n\n__repr__\n fixes this problem. The \n__repr__\n method takes no parameters except self.\n\n\n\n\nclass Pea:\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\n    def __repr__(self):\n        return 'genotype: [%s]' % (self.genotype)\n\nclass PeaStrain:\n\n    def __init__(self, peas):\n        self.peas = peas\n\n    def __repr__(self):\n        return 'strain with %i peas' % (len(self.peas))\n\nyellow = Pea('GG')\ngreen = Pea('gg')\nstrain = PeaStrain([yellow, green])\n\nprint Pea\nprint PeaStrain\nprint Pea.__init__\nprint PeaStrain.__init__\n\nprint yellow\nprint repr(yellow)\nprint repr(green)\nprint repr(strain)\n\n\n\n\nNew output:\n\n\n__main__.Pea\n__main__.PeaStrain\n\nunbound method Pea.__init__\n\n\nunbound method PeaStrain.__init__\n\ngenotype: [GG]\ngenotype: [GG]\ngenotype: [gg]\nstrain with 2 peas\n\n\n\n\n\n\n\n\nNo difference between \nprint yellow\n and \nprint repr(yellow)\n.\n\n\n\n\n\n\nObjects\n predefined class attributes:\n\n\n\n\n__doc__\n: the docstring.\n\n\n__dict__\n: a list of attributes.\n\n\n__name__\n: the name of the object.\n\n\n__bases__\n: the object inherits from what object. For example, above, the PeaStrain class inherits from the Pea class. Classes (subclasses) can inherit from other classes\n\nand extend their functionality.\n\n\n__module__\n: the name of the module in which this class was defined. \n__main__\n means the object is in the current module. \n\n\n\n\n\n\n\n\nA python script can be imported just like a package:\n\n\n\n\nimport Protein\n.\n\n\nfrom Protein import write\n.\n\n\nimport math\n.\n\n\nfrom math import sqrt\n.\n\n\n\n\n\n\nSynonyms: packages, library, module, script, etc.\n\n\n\n\nclass Pea:\n    '''docstring 1'''\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\n    def __repr__(self):\n        return 'genotype: [%s]' % (self.genotype)\n\nyellow = Pea('GG')\n\nprint yellow\nprint Pea.__doc__\nprint Pea.__dict__\nprint Pea.__name__\nprint Pea.__bases__\nprint Pea.__module__\n\nprint \n\n\nclass Peaclone(Pea):\n    '''docstring 2'''\n\nblue = Peaclone('AA')\n\nprint blue\nprint Peaclone.__doc__\nprint Peaclone.__dict__\nprint Peaclone.__name__\nprint Peaclone.__bases__\nprint Peaclone.__module__\n\n\n\n\nOutput:\n\n\ngenotype: [GG]\ndocstring 1\n{'__module__': '__main__', '__doc__': 'docstring 1', '__init__': \nfunction __init__ at 0x000000000229FC18\n, '__repr__': \nfunction __repr__ at 0x000000000229FC88\n}\nPea\n()\n__main__\n\ngenotype: [AA]\ndocstring 2\n{'__module__': '__main__', '__doc__': 'docstring 2'}\nPeaclone\n(\nclass __main__.Pea at 0x0000000001D3C828\n,)\n__main__\n\n\n\n\n\n\nMore attributes:\n\n\n__del__\n.\n\n\n__getattr__\n.\n\n\n__setattr__\n.\n\n\n__delattr__\n.\n\n\n\n\n\n\n\n\nChapter 12 Debugging\n\n\nbug\n\n\n\n\nKinds of errors:\n\n\nLogical errors.\n\n\nSyntax errors.\n\n\nRuntime errors.\n\n\n\n\n\n\n\n\nIDE (Eric, PyCharm, etc.) automate debugging.\n\n\n1. Logical (semantic) errors\n\n\n\n\nResults are wrong because the program does something different from what you had in mind.\n\n\n\n\n2. Syntax errors\n\n\n\n\nWrong symbol, mispelling, wrong position in the code, etc..\n\n\n\n\ndef evaluate_data(data, lower = 100, upper = 300):\n    \nAnalyze a two-column table. Counts data points in three bins.\n\n\n    smaller = 0\n    between = 0\n    bigger  = 0\n\n    for length in data:\n        if length \n lower:\n            smaller = smaller + 1\n        elif lower \n length \n upper:\n            between = between + 1\n        elif length \n upper:\n            bigger = 1\n    return smaller, between, bigger\n\ndef read_data(filename):\n    \nReads neuron lengths from a text file.\n\n\n    primary, secondry = [], []\n\n    for line in open(filename):\n        category, length = line.split(\n\\t\n)\n        length = float(length)\n        if category == \nPrimary\n\n            primary.append(length)\n        elif category == \nSecondary\n:\n            secondary.append(length)\n    return primary, secondary\n\ndef write_output(filename, count_pri, count_sec):\n    \nWrites counted values to a file.\n\n\n    output = open(filename,\nw\n)\n    output.write(\ncategory      \n100  100-300   \n300\\n\n)\n    output.write(\nPrimary  :  %5i   %5i   %5i\\n\n % count_pri)\n    output.write(\nSecondary:  %5i   %5i   %5i\\n\n % count_sec)\n    output.close()\n\nprimary, secondary = read_data('neuron_data.xls')\ncount_pri = evaluate_data(primary)\ncount_sec = evaluate_data(secondary)\nwrite_output_file('results.txt' , count_pri,count_sec)\n\n\n\n\nBug 1\n\n\nif category == \nPrimary\n\n\n\n\n\n\n\nCause: \nSyntaxError: invalid syntax\n.\n\n\nFix:\n\n\n\n\nif category == \nPrimary\n:\n\n\n\n\n\n\nOther common \nSyntaxErrors\n:\n\n\nEOL\nor End Of Line; an open quote somewhere without a matching closing quote.\n\n\nTokenError\n; an open parenthesis, but not a matching closing parenthesis.\n\n\netc.\n\n\n\n\n\n\n\n\nBug 2\n\n\nwrite_output_file('results.txt' , count_pri,count_sec)\n\n\n\n\n\n\nCause: \nNameError: name 'write_output_file' is not defined\n.\n\n\nFix:\n\n\n\n\nfile = open('results.txt' , 'w')\nfile.write(str(count_pri))\nfile.write('\\n')\nfile.write(str(count_sec))\nfile.close()\n\n\n\n\n3. Runtime Error\n\n\nIOError\n\n\nprimary, secondary = read_data('neuron_data.xls')\n\n\n\n\n\n\nCause: \nIOError: [Errno21] No such file or directory: 'neuron_data.xls'\n\n\nFix: the file extention is .txt.\n\n\nOther common bugs and causes:\n\n\nMispelled files, directory name.\n\n\nWrong website URL.\n\n\nUser without the permission or access.\n\n\nThe file is already opened.\n\n\nProblem with the Internet connection.\n\n\nWhitespace, uppercase, lowercase letters.\n\n\nFile in a different directory.\n\n\nExpected date format.\n\n\netc.\n\n\n\n\n\n\n\n\nNameError\n\n\nprimary, secondry = [], []\n...\n...\nelif category == \nSecondary\n:\n\n\n\n\n\n\nCause: \nNameError: 'secondary' is not defined\n. The \nname\n was misspelled when called.\n\n\nFix: add the line \nprint dir()\n before the errors occurs. It shows the list of variables that are known. In the above case, only \nsecondry\n exits while \nsecondary\n is called. Choose one.\n\n\nOther common bugs and causes:\n\n\nUnknown object name:\n\n\na name was not imported (\nimport *\n).\n\n\na name was not initialized (as in \ncounter = 0\n for \ncounter += 1\n).\n\n\n\n\n\n\n\n\n\n\n\n\nIndexError\n\n\n\n\nCause and fix: when \nprint data[3]\n looks into \ndata = [1, 2, 3]\n, the list index is out of range.\n\n\n\n\nKeyError\n\n\nspam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'}\nprint('The name of my pet zebra is ' + spam['zebra'])\n\n\n\n\n\n\nCause and fix: the key does not exist!\n\n\n\n\nImportError\n\n\n\n\nCauses and fixes:\n\n\nThe imported module name is mispelled.\n\n\nThe imported module is located in a subdirectory without an \n__init__.py\n file.\n\n\nTry adding import sys and print sys.path; you need to add the directory to the PYTHONPATH variable or to append it to the sys.path.\n\n\nThe imported module has a duplicate name (two functions with the same name; try working with classes to avoir that).\n\n\n\n\n\n\n\n\nValueError\n\n\n\n\nCause and fix: when an object is loaded with a wrong type to perform another operation; variable \nrange_a\n should be a number for the loop \nfor a in range(range_a):\n, but a string is given instead.\n\n\nOther common bugs and causes: \nIndentationError: unexpected indent\n, \nIndentationError: unindent does not match any outer indentation level\n, and \nIndentationError: expected an indented block\n.\n\n\n\n\nTypeError\n\n\n\n\nCause and fix: an object does not support item assignment.\n\n\n\n\nspam = 'I have a pet cat.'\nspam[13] = 'r'\n\n\n\n\n\n\nCause:  cannot convert implicitly an object.\n\n\n\n\nnumEggs = 12\nprint('I have ' + numEggs + ' eggs.')\n\n\n\n\n\n\nFix:\n\n\n\n\nnumEggs = 12\nprint('I have ' + str(numEggs) + ' eggs.')\n\n\n\n\n\n\nCause:  an object is misinterpreted (for another object).\n\n\n\n\nspam = ['cat', 'dog', 'mouse']\nfor i in range(spam):\n    print(spam[i])\n\n\n\n\n\n\nFix: \nfor i in spam:\n.\n\n\n\n\nAttributeError\n\n\n\n\nCause and fix: apply the right method.\n\n\n\n\nspam = 'THIS IS IN LOWERCASE.'\nspam = spam.lowerr()\n\n\n\n\nUnboundLocalError\n\n\n\n\nCause and fix: a variable is referenced before assignment.\n\n\n\n\nCountermeasures to prevent errors\n\n\n\n\nBreak down the code in parts; print to a file using \npython code.py \n output.txt\n.\n\n\nCompare the input and output (print the input data, print the output data, create control points).\n\n\nAdd lots of \nprint\n statements within the code as control points,\n\n\nUse descriptive and explicit object names (\nsequence_file\n is better than \ns_file\n).\n\n\nStart function with verbs (\nread_sequence_file\n is better than \nseq_file\n).\n\n\nAdd comments.\n\n\nAvoid \nimport *\n, but rather \nfrom math import pi\n.\n\n\nFollow PEP8 and PEP20! \npylint\n and \nflake8\n packages.\n\n\nIDE (Eric, PyCharm, Spyder, etc.) automate debugging and easily execute \npylint\n and \nflake8\n.\n\n\n\n\nA note on \nraw_input()\n and \ninput()\n\n\npython2, python3, py2, py3\n\n\n\n\nIn Python 2, \nraw_input()\n takes exactly what the user typed and passes it back as a string. \ninput()\n takes the \nraw_input()\n and performs an \neval()\n on it as well. \ninput()\n expects a syntactically correct python statement where \nraw_input()\n does not.\n\n\nThe \neval()\n function run the code within itself:\n\n\n\n\n x = 1\n\n eval('x + 1')\n2\n\n eval('x')\n1\n\n\n\n\n\n\nIn Python 3, \nraw_input()\n is renamed to \ninput()\n and the old \ninput()\n is removed. If you want to use the old \ninput()\n, you can do \neval(input())\n.\n\n\n\n\nCountermeasures to prevent errors: the Python debugger or \npdb\n\n\n\n\npdb\n package.\n\n\n\n\n# on top of the code\nimport pdb\n\npdb.set_trace()\n\n\n\n\n\n\nThe code is executed line by line:\n\n\nn\n execute the next line.\n\n\ns\n execute the next line but does not descend into functions.\n\n\nl\n shows where in the code the program currently is.\n\n\nc\n continues execution normally.\n\n\n\n\n\n\n\n\nCountermeasurea to prevent errors: \ntry, except\n\n\ntry:\n    a = float(raw_input(\nInsert a number:\n))\n    print a\nexcept ValueError:\n    print \nYou haven't inserted a number. Please retry.\n\n    raise SystemExit\n\n\n\n\n\n\nelse\n is optional and only executed if no exception was generated.\n\n\n\n\ntry:\n    filename = raw_input(\nInsert a filename:\n)\n    in_file = open(filename)\nexcept IOError:\n    print \nThe filename %s has not been found.\n % filename\n    raise SystemExit\nelse:\n    for line in in_file:\n        print line\n        in_file.close()\n\n\n\n\n\n\nUsually, exceptions are typos and wrong entries:\n\n\nSyntaxError\n.\n\n\nIOError\n.\n\n\nNameError\n.\n\n\nValueError\n.\n\n\n\n\n\n\nRarely will we see:\n\n\nIndexError\n.\n\n\nKeyError\n.\n\n\nImportError\n.\n\n\nTypeError\n.\n\n\nAttributeError\n.\n\n\nUnbounLocalError\n.\n\n\n\n\n\n\n\n\nChapter 13, Using External Modules, The Python Interface to R\n\n\n\n\nRPy2\n package; bridge Python with R.\n\n\n\n\nThe R code:\n\n\np = pi\nx = c(1, 2, 3, 4, 5, 6)\ny = seq(1, 10)\nm = matrix(y, nrow = 5)\nn = matrix(y, ncol = 5)\nf = read.table('RandomDistribution.tsv', sep = '\\t')\nf_matrix = matrix(f, ncol = 7)\nmean_first_col = mean(f_mean[0])\n\n\n\n\nThe Python code:\n\n\nimport rpy2.reobjects as robjects\n\nr = robjects.r\n\npi = r.pi\nx = r.c(1, 2, 3, 4, 5, 6)\ny = r.seq(1, 10)\nm = r.matrix(y, nrow = 5)\nn = r.matrix(y, ncol = 5)\nf = r(\nread.table('RandomDistribution.tsv', sep = '\\t')\n)\nf_matrix = r.matrix(f, ncol = 7)\nmean_first_col = r.mean(f_mean[0])\n\n\n\n\n\n\nPython is better suited to implement solutions by building GUIs or freezing the code.\n\n\nRpy2 is the best of both worlds: \n\n\nR statistical analyses and data visualization.\n\n\nPython computation power with SciPy/NumPy/Pandas.\n\n\n\n\n\n\n\n\nCalculate a mean value from a table file\n\n\nimport rpy2.robjects as robjects\n\nr = robjects.r\ntable = r(\nread.table('RandomDistribution.tsv', sep = '\\t')\n)\nmatrix = r.matrix(table, ncol = 7)\nmean_first_col = r.mean(matrix[0])\nprint mean_first_col\n\n\n\n\nDraw a histogram\n\n\nimport rpy2.robjects as ro\nfrom rpy2.robjects.packages import importr\n\nr = ro.r\ntable = r(\nread.table('RandomDistribution.tsv',sep = '\\t')\n)\ngrdevices = importr('grDevices')\ngrdevices.png(file = \nPlot.png\n, width = 512, height = 512)\nr.plot(table[1], table[2], xlab = \nx\n, ylab = \ny\n)\ngrdevices.dev_off()\n\ngrdevices.png(file=\nHistogram.png\n, width = 512, height = 512)\nr.hist(table[4], xlab = 'x', main = 'Distribution of values')\ngrdevices.dev_off()\n\n\n\n\nCalculate a z-score and a p-value\n\n\nimport rpy2.robjects as ro\n\nr = ro.r\ntable = r(\nread.table('RandomDistribution.tsv',sep = '\\t')\n)\nm = r.mean(table[2], trim = 0, na_rm = 'FALSE')\nsdev = r.sd(table[2], na_rm = 'FALSE')\nvalue = 0.01844\nzscore = (m[0] - value) / sdev[0]\nprint zscore\n\nx = r.abs(zscore)\npvalue = r.pnorm(-x[0])\nprint pvalue[0]\n\n\n\n\nCreate an interactive plot and histogram from data in a file\n\n\nimport rpy2.robjects as robjects\n\nr = robjects.r\ntable = r(\nread.table('RandomDistribution.tsv', sep = '\\t')\n)\nr.plot(table[1], table[2], xlab = \nx\n, ylab = \ny\n)\nr.hist(table[4], xlab = 'x', main = 'Distribution of values')\n\n\n\n\nCreate an interactive plot\n\n\nimport rpy2.robjects as ro\n\nr = ro.r\nr.plot(r.pnorm(100), xlab = \ny\n, ylab = \ny\n)\n\n\n\n\nConduct a chi-square test on data from a text file\n\n\nimport rpy2.robjects as ro\n\nr = ro.r\ntable = r(\nread.table('Chi-square_input.txt', header = TRUE, sep = '\\t')\n)\nprint r.names(table)\n\ncont_table = r.table(table[1], table[2])\nchitest = r['chisq.test']\nprint chitest(table[1], table[2])\n\n\n\n\nChapter 14, Building Program Pipelines\n\n\n\n\nos\n package.\n\n\nsys\n package.\n\n\n\n\nPrograms can work together with Python\n\n\n\n\nCreate path and file variables.\n\n\nCreate command line.\n\n\nExecute commands from the command line (as if you did it with a mouse and keyboard) with \nos.system\n.\n\n\n\n\nREF: Appendix D.\n\n\nimport os\n\noutput_dir = '/home/RNA-seq/tophat_dir/'\noutput_file = 'accepted_hits.txt'\n\ncommand_line = 'pgm -o %s%s' % (output_dir, output_file)\n\nos.system(command_line)\n\n\n\n\n\nCommand lines in Python\n\n\n\n\nUNIX to Python:\n\n\nUNIX \npwd\n; \nprint os.getcwd()\n.\n\n\nUNIX \nls\n; \nprint os.listdir('.')\n.\n\n\nUNIX \ncd\n; \nos.chdir('../data/')\n.\n\n\nUNIX \nmkdir\n; \nos.mkdir()\n.\n\n\nUNIX \nrmdir\n; \nos.rmdir()\n.\n\n\nand many more.\n\n\n\n\n\n\n\n\nPipelines\n\n\n\n\nPipeline are scripts connecting programs to each other (run two or more external programs from command lines).\n\n\nA program that runs another program is a \nwrapper\n.\n\n\nExchange filenames and data between programs.\n\n\nsys.argv\n; Python program sorted parameters.\n\n\nimport sys\n; access or print them.\n\n\n\n\nimport sys\nimport os\n\nsys.path.append('/home/RNA-seq/')\n\nfrom pathvariables import tophat_dir, index_dir\n\nif os.path.exists(tophat_dir) and os.path.exists(index_dir):\n    os.system('tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt')\nelse:\n    print \nYou have to create tophat and/or index directories before running your wrapper\n\n\n\n\n\n\n\nOne problem with pipelines is lagging. \n\n\nThe system call of the second program should occur when the execution of the first program has finished, especially if the second one uses as input the output of the first one.\n\n\nUse subprocesses, such as \nos.popen()\n or \nsubprocess.call()\n, to wait for the command to complete and return a value corresponding to the program exit status (0 for success, 256 for failure)\n\n\nA more robust trick is to insert an action and verify its success after a system call and before the subsequent system call.\n\n\n\n\nimport sys\nimport os\n\nfrom pathvariables import tophat_dir, index_dir, cufflinks_dir\n\nsys.path.append('/home/RNA-seq/')\nfrom pathvariables import tophat_dir, index_dir, cufflinks_dir\n\n# the tophat program crates an output file\nos.system('tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt')\n\n# here we don't know whether the tophat output file is comleted and available\n# we open and close a dummy file, so the operating system catches up\nlag_file = open('dummy.txt, 'w')\nlag_file.write('tophat completed')\nlag_file.close()\n\n# read the output file\nif os.path.exists('/home/RNA-seq/dummy.txt'):\n    os.system('cufflinks -o ' + cufflinks_dir + ' ' + tophat_dir + '/accepted_hits.txt')\n\n\n\n\nAttributes\n\n\n\n\nprint dir()\n; Visualize attributes.\n\n\nSome attributes are module-specific, such as locatime, whereas others refer to modules in general:\n\n\n__file__\n; return the path of the module.\n\n\n__doc__\n; return the module documentation, if present.\n\n\n__name__\n; return the name of the imported file without the .py suffix if the module is imported and the string \n'__main__'\n is executed.\n\n\nExecute \nstatements\n only if the module is run from the command line and not imported by means of an import statement:\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == '__main__':\n    \nstatements\n\n\n\n\n\nWorking with files and directories\n\n\n\n\nos.path\n package.\n\n\nos.path.split(filename)\n; split a filename from the directory names.\n\n\nos.path.exists(filename)\n; verify if the file exists, return True or False.\n\n\n\n\nExport the path\n\n\n\n\nIn Windows, add the path to the PATH environment variables.\n\n\nIn PowerShell: \n$env:PYTHONPATH = \"$env:PYTHONPATH;.\"\n\n\n\n\n\n\nIn UNIX, enter in the bash: \nexport PYTHONPATH=.\n or \nadd PYTHONPATH=.\n.\n\n\nIn a Python code, add to the beginning of the script:\n\n\n\n\nimport sys\n\nsys.path.append('.') # '/var/www/'\n\n\n\n\n\n\nOr with \nsys.path.append('pathmodules/')\n.\n\n\n\n\nRead files from directories\n\n\nimport os\n\nfor filename is os.listdir('data/'):\n    os.system('\nmy_program\n%s' % (filename))\n\n\n\n\n\n\n\n\nos.remove('log.txt')\n; remove files.\n\n\n\n\n\n\ntempfile\n package;  create temporary files. \n\n\n\n\n\n\nChapter 15, Writing Good Programs\n\n\nPriorities\n\n\n\n\nMake it work.\n\n\nMake it nice.\n\n\nMake if fast.\n\n\n\n\nTips\n\n\n\n\nDivide a programming project into smaller tasks.\n\n\nWhat are the inputs?\n\n\nWhat are the outputs?\n\n\nWhat is between them?\n\n\nWrite smaller programs; split a program into functions and classes.\n\n\nAnalyze and run tests.\n\n\nAdopt PEP.\n\n\nScaffold before writing a functional program:\n\n\n\n\ndef read_files(directory):\n    '''\n    Reads a...\n    '''\n    pass\n\ndef filter(sequences):\n    '''\n    Removes all...\n    '''\n    pass\n\n...\n\nif __name == '__main__':\n    INPUT_DIR = 'aaa/'\n    OUTPUT_FILE = 'filtered.txt'\n    seq = read_files(INPUT_DIR)\n    filter(seq)\n    ...\n\n\n\n\nAdopt PEP\n\n\n\n\nVariables in functions in lowercase.\n\n\nConstants in modules in uppercase.\n\n\nA function name starts with a verb.\n\n\nAfter each function, two empty lines.\n\n\nAfter each logical chunks of long functions, one empty line.\n\n\nComment.\n\n\nKeep lines shorter than 80 characters long.\n\n\nEach class, function, and variable has a docstring; docstrings can be read with \nprint object.__doc__\n.\n\n\n\n\nEnforce PEP\n\n\n\n\npylint\n package.\n\n\npylint\n is a Python source code analyzer which looks for programming errors, helps enforcing a coding standard and sniffs for some code smells.\n\n\nDownload\n an install pylint.\n\n\nOr install it with \npip\n.\n\n\nDoc\n\n\nRun \npylint python_file.py\n.\n\n\n\n\n\n\nflake8\n package.\n\n\nflake8\n is a modular source code checker (a \nwrapper\n).\n\n\nIt works with \npep8\n, \npyflakes\n, \npycodestyle\n, and so on.\n\n\n\n\n\n\n\n\nVersion controls\n\n\n\n\nUse version control programs (Mercurial, git, SVN).\n\n\nUse repository (GitHub, Bitbucket) to control program versions.\n\n\nGitHub\n\n\nBitbucket\n\n\nSourceForce\n\n\nGitlab\n\n\nand others.\n\n\n\n\n\n\n\n\nBefore releasing (to a repository)\n\n\n\n\nCreate a directory with a concise name containing all the project.\n\n\nSet a version number (0.1 or 1.0).\n\n\nWrite a README.TXT file with the name of the program, the author, contacts, numbers, emails, a version number, the program purpose in 50-100 words, how to use the program, simple command-line examples, the license (\nAll rights reserved\n, MIT, etc.)\n\n\nCreate a zip file out of the directory including the README.TXT file in addition to the unzipped directory.\n\n\nRelease the project on a repository (for example, with git, push the project to the repository).\n\n\n\n\nReleasing a distribution\n\n\n\n\nRelease a distribution to a repository for others to download and install. \n\n\n\n\nFreezing a program\n\n\n\n\nNon-programmer would rather want an execuble program they can unzip and run.\n\n\nCompile the code or freeze it!\n\n\ncx_freeze\n is a set of utilities that create standalone executables from python scripts for any platform or OS.\n\n    i. There are alternatives to \ncx_freeze\n such as \nbbfreeze\n.\n\n\npyinstaller\n is a simpler alternative (it is not as flexible as \ncx_freeze\n but it can create single files).\n\n\ndistutils\n is a Python package that provides support for building and installing additional modules (libraries or packages) into a Python installation. The new modules may be either 100%-pure Python, written in C, or coded in both Python and C. \ndistutils\n autogenerates an install script.\n\n    i. Such distribution needs a \nsetup.py\n file with the group of subdirectories and program files.\n\n    i. \npy2exe\n is an extension to the \ndistutils\n package to create executable files on Windows.\n\n    i. \npy2app\n is an extension to the \ndistutils\n packages to create executable files on OS X.\n\n\nnuitka\n is a Python compiler, compatible with CPython.\n\n    i. CPython is a source code interpreter with an interface with several languages, including C, in which one must explicitly write bindings in a language other than Python.\n\n\npypy\n is an alternative to \nnuitka\n.\n\n\nCython is a compiled language that generates CPython extension modules.\n\n\nJython does the same, but in Java.\n\n\n\n\n\n\n\n\nContinuous improvement\n\n\n\n\nA good program is never finished:\n\n\nCreate a baseline release.\n\n\nUpdate and release new versions. Tell the users what is new.\n\n\nListen to users, improve on it.\n\n\nGo on programming.\n\n\n\n\n\n\n\n\nSoftware development\n\n\n\n\nThe Agile Manifesto.\n\n\nMethodologies: Scrum, eXtreme Programming, etc.\n\n\n\n\nPart 4, Data Visualization\n\n\nChapter 16, Creating Scientific Diagrams\n\n\n\n\nmatplotlib\n package.\n\n\nPillow\n or \nPIL\n package.\n\n\nTip: install the entire SciPy Stack: (Python (2.x \n= 2.6 or 3.x \n= 3.2), NumPy (\n= 1.6), SciPy library (\n= 0.10), Matplotlib (\n= 1.1) with dateutil and pytz, IPython (\n= 0.13) with pyzmq and tornado, pandas (\n= 0.8), Sympy (\n= 0.7), nose (\n= 1.1).\n\n\nMatplotlib\n depends on \nPillow\n for reading and saving JPEG, BMP, and TIFF image files. \nMatplotlib\n requires MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are required for the animation module. Add \nnose\n, \nmock\n, and Inkscape.\n\n\n\n\nDraw a simple line plot\n\n\n\n\nProvide \n(x, y)\n points.\n\n\nfigure()\n; main function is\n\n\nplot()\n.\n\n\nsavefig()\n; save the plot in a file.\n\n\nshow()\n; show the plot in a window.\n\n\n\n\nfrom pylab import figure, plot, savefig\n\nxdata = [1, 2, 3, 4]\nydata = [1.25, 2.5, 5.0, 10.0]\n\nfigure()\nplot(xdata, ydata)\n\nsavefig('figure1.png')\n\n\n\n\nResult:\n\n\n\n\nPlot a sine function\n\n\n\n\nGenerate \n(x, y)\n points; first the \nx\n; then generate the \ny\n with the \nx\n.\n\n\nplot()\n with a line type \n'kd'\n and \nlinewidth = 1\n.\n\n\n\n\nfrom pylab import figure, plot, text, axis, savefig\nimport math\n\nfigure()\n\nxdata = [0.1 * i for i in range(100)]\nydata = [math.sin(j) for j in xdata]\n\nplot(xdata, ydata, 'kd', linewidth = 1)\ntext(4.8, 0, \n$y = sin(x)$\n, horizontalalignment = 'center', fontsize = 20)\naxis([0, 3 * math.pi, -1.2, 1.2])\n\nsavefig('sinfunc.png')\n\n\n\n\nResult:\n\n\n\n\nDraw a histogram\n\n\n\n\nProvide the \n(x, y)\n points in lists, and the number of bins.\n\n\nhist()\n needs \ndata\n points and \nn_bins\n.\n\n\nalpha\n stands for the graph color transparency.\n\n\nAdd a title, labels, axes, and gridlines.\n\n\n\n\nfrom pylab import figure, title, xlabel, ylabel, hist, axis, grid, savefig\n\ndata = [1, 1, 9, 1, 3, 5, 8, 2, 1, 5, 11, 8, 3, 4, 2, 5]\nn_bins = 5\n\nfigure()\nnum, bins, patches = hist(data, n_bins, normed = 1.0, histtype = 'bar', facecolor = 'green', alpha = 0.75)\n\ntitle('Histogram')\nxlabel('value')\nylabel('frequency')\naxis()\ngrid(True)\n\nsavefig('histogram.png')\n\n\n\n\nResult:\n\n\n\n\nDraw a bar plot\n\n\n\n\ncount\n: two series, \nx1\n and \nx2\n with each four categories, \nnucleotides\n. \n\n\nAdd a title, labels, axes and ticks to the axes, and a legend.\n\n\nxticks(x1, nucleotides)\n,  where the first element is the list of \nx\n points and the second element is the label variable.\n\n\nlegend()\n takes the labels of all data sets that are plotted.\n\n\naxis()\n is set with a list [from left to right, bottom,  and top].\n\n\n\n\nfrom pylab import figure, title, xlabel, ylabel, xticks, bar, legend, axis, savefig\n\nnucleotides = [\nA\n, \nG\n, \nC\n, \nU\n]\n\ncounts = [\n    [606, 1024, 759, 398],\n    [762, 912, 639, 591],\n    ]\n\nfigure()\ntitle('RNA nucleotides in the ribosome')\nxlabel('RNA')\nylabel('base count')\n\nx1 = [2.0, 4.0, 6.0, 8.0]\nx2 = [x - 0.5 for x in x1]\n\nxticks(x1, nucleotides)\n\nbar(x1, counts[1], width = 0.5, color = \n#cccccc\n, label = \nE.coli 23S\n)\nbar(x2, counts[0], width = 0.5, color = \n#808080\n, label = \nT.thermophilus 23S\n)\n\nlegend()\naxis([1.0, 9.0, 0, 1200])\n\nsavefig('barplot.png')\n\n\n\n\nResult:\n\n\n\n\nAdd error bars to a scatterplot or a bar chart\n\n\n\n\nerrorbar()\n.\n\n\nbar()\n.\n\n\n\n\nfrom pylab import figure, errorbar, bar, savefig\n\nfigure()\n\n# scatterplot with error bars\nx1 = [0.1, 0.3, 0.5, 0.6, 0.7]\ny1 = [1, 5, 5, 10, 20]\nerr1 = [3, 3, 3, 10, 12]\nerrorbar(x1, y1, err1 , fmt = 'ro')\n\n# barplot with error bars\nx2 = [1.1, 1.2, 1.3, 1.4, 1.5]\ny2 = [10, 15, 10, 15, 17]\nerr2 = (2, 3, 4, 1, 2)\nwidth = 0.05\nbar(x2, y2, width, color = 'r', yerr = err2, ecolor = \nblack\n)\n\nsavefig('errorbars.png')\n\n\n\n\nResult:\n\n\n\n\nDraw a pie chart with protruding slices\n\n\nfrom pylab import figure, title, pie, savefig\n\nnucleotides = 'G', 'C', 'A', 'U'\ncount = [1024, 759, 606, 398]\nexplode = [0.0, 0.0, 0.05, 0.05]\n\ncolors = [\n#f0f0f0\n, \n#dddddd\n, \n#bbbbbb\n, \n#999999\n]\n\ndef get_percent(value):\n    '''Formats float values in pie slices to percent.'''\n    return \n%4.1f%%\n % (value)\n\nfigure(1)\ntitle('nucleotides in 23S RNA from T.thermophilus')\n\npie(count, explode = explode, labels = nucleotides, shadow = True,\n    colors = colors, autopct = get_percent)\n\nsavefig('piechart.png', dpi = 150)\n\n\n\n\nResult:\n\n\n\n\n\n\nIt is possible to use math symbols, subscripts, and superscripts in the strings:\n\n\nxlabel('protein concentration [mM]')\n.\n\n\nxlabel('protein concentration [$\\muM$]')\n.\n\n\n\n\n\n\nIt is possible to use placeholder for variables such as:\n\n\n\"4.1f%%\" % (variable)\n.\n\n\n\"2i%\" % (variable)\n.\n\n\netc. \n\n\nThe \n%%\n stands for percentage.\n\n\n\n\n\n\nChange the image file resolution (dpi = 100 or 150 or 300 or 600) as in \nsavefig('chart.png', dpi=150)\n.\n\n\nColors are based on the PIL library.\n\n\nPIL has 140 colors (X11 color names) such as:\n\n\n'red'\n, \n'lightred'\n, \n'magenta'\n, etc.\n\n\nin RGB, red is \n(255, 0, 0)\n.\n\n\nwhite is \n(255, 255, 255)\n or \n'#ffffff'\n.\n\n\nblack\n is \n(0, 0, 0)\n or \n'#000000'\n.\n\n\netc.\n\n\n\n\n\n\nThe \nX11 color names\n.\n\n\n\n\nChapter 18, Manipulating Images\n\n\n\n\nPillow\n or \nPIL\n package.\n\n\n\n\nPaste a small image into a big one\n\n\nfrom PIL import Image\n\nimage = Image.open('color.png', 'r')\nlabel = Image.open('label.png', 'r') # small legend\nimage.paste(label, (40, 460))\n\nimage.save('combined.png')\n\n\n\n\nResult:\n\n\n\n\nResizes a big image to a small one\n\n\nfrom PIL import Image\n\nimage = Image.open('big.png')\nsmall = image.resize((100, 100))\n\nsmall.save('small.png')\n\n\n\n\nResult:\n\n\n\n\nConverts a color to a black/white image\n\n\nfrom PIL import Image\n\nimage = Image.open('color.png', 'r')\nbw_image = Image.new('LA', image.size, (255, 255))\nbw_image.paste(image, (0, 0))\n\nbw_image.save('black_white.png')\n\n\n\n\nResult:\n\n\n\n\nDiminishes the size of all .png files by half\n\n\nfrom PIL import Image\nimport os\n\nfor filename in os.listdir('.'):\n    if filename.endswith('.png'):\n        im = Image.open(filename)\n        x = im.size[0] / 2\n        y = im.size[1] / 2\n        small = im.resize((x, y))\n        small.save('small_'+filename)\n\n\n\n\nFor \nos.listdir('.')\n, consult \nChapter 14, Building Program Pipelines, Command lines in Python\n.\n\n\nDraw an image of a plasmid\n\n\n\n\nUse constant variable: \nPLASMID_LENGTH = 4361\n is the total number of base pairs in the entire plastmid, \nSIZE = (500, 500)\n is the size of the entire image, \nCENTER = (250, 250)\n is the center point of the plasmid circle, the center of the image.\n\n\nCreate an image: \npBR322 = Image.new('RGB', SIZE, 'white')\n. \n'RGB'\n color scheme, \nSIZE = (x, y)\n size in pixels, \n'white'\n set the background color.\n\n\nDraw object \npBR322\n: \nDRAW = ImageDraw.Draw(pBR322)\n.\n\n\nThe image object is now in object \nDRAW\n.\n\n\nFinally, save the object: \npBR322.save('plasmid_pBR322.png')\n.\n\n\n\n\nfrom PIL import Image, ImageDraw\nimport math\n\nPLASMID_LENGTH = 4361\nSIZE = (500, 500)\nCENTER = (250, 250)\n\npBR322 = Image.new('RGB', SIZE, 'white')\nDRAW = ImageDraw.Draw(pBR322)\n\ndef get_angle(bp, length=PLASMID_LENGTH):\n    \nConverts base position into an angle.\n\n    return bp * 360 / length\n\ndef coord(angle, center, radius):\n    \nReturn (x, y) coordinates of a point in a circle.\n\n    rad = math.radians(90 - angle)\n    x = int(center[0] + math.sin(rad) * radius)\n    y = int(center[1] + math.cos(rad) * radius)\n    return x, y\n\ndef draw_arrow_tip(start, direction, color):\n    \nDraws a triangle at the given start angle.\n\n    p1 = coord(start + direction, CENTER, 185)\n    p2 = coord(start, CENTER, 160)\n    p3 = coord(start, CENTER, 210)\n    DRAW.polygon((p1, p2, p3), fill = color)\n\n\nTET_START, TET_END = get_angle(88), get_angle(1276)\nAMP_START, AMP_END = get_angle(3293), get_angle(4153)\nORI_START, ORI_END = get_angle(2519), get_angle(3133)\n\n# drawing the plasmid\nBOX = (50, 50, 450, 450)\nDRAW.pieslice(BOX, 0, 360, fill = 'gray')\nDRAW.pieslice(BOX, TET_START, TET_END, fill = 'blue')\nDRAW.pieslice(BOX, AMP_START, AMP_END, fill = 'orange')\nDRAW.pieslice(BOX, ORI_START, ORI_END, fill = 'darkmagenta')\nDRAW.pieslice((80, 80, 420, 420), 0, 360, fill = 'white')\n\ndraw_arrow_tip(TET_END, 10, 'blue')\ndraw_arrow_tip(AMP_START, -10, 'orange')\ndraw_arrow_tip(ORI_START, -10, 'darkmagenta')\n\npBR322.save('plasmid_pBR322.png')\n\n\n\n\nResult:\n\n\n\n\nDrawings\n\n\n\n\nImage extensions:\n\n\nBMP; simple table of pixels.\n\n\nPNG; preserves the color of every single pixel; can be partially transparent.\n\n\nGIF; can be animated; similar to PNG.\n\n\nJPG; compressed format, blurred.\n\n\nTIF; bigger and more precise than PNG.\n\n\n\n\n\n\nimage = Image.open('color.png', 'r')\n; read the object.\n\n\nWrite points:\n\n\npoint = (100, 100)\n; with tuples (x, y); x pixels from the left border, y pixels from the top of the image.\n\n\n\n\n\n\nWrite rectangles\n\n\nBOX = (100, 100, 150, 150)\n; with tuple (x, y, x\n, y\n); \nBOX\n becomes a constant.\n\n\nDRAW.rectangle(BOX, fill = 'lightblue', outline = 'black')\n\n\n\n\n\n\nDraw circles inside \nguidelines\n or a rectangle:\n\n\nDRAW.pieslice((50, 50, 450, 450), 0, 360, fill = 'grey')\n.\n\n\nDRAW.pieslice((50, 50, 450, 450), 0, 360, fill = (0, 0, 0))\n.\n\n\nDRAW.pieslice((50, 50, 450, 450), 0, 360, fill = '#ffffff')\n.\n\n\nBOX = (50, 50, 450, 450)\n\n\nDRAW.pieslice(BOX, 0, 360, fill = 'grey', outline = 'black')\n\n\nDRAW.pieslice(BOX, 7, 106, fill = 'blue')\n\n\n\n\n\n\n\n\n\n\nDraw an arc:\n\n\nDRAW.arc(BOX, 0, 360, fill = 'black')\n\n\n\n\n\n\nDraw a polygon:\n\n\nDRAW.polygon((point1, point2, point3) fill = 'lightblue', outline = 'blue')\n\n\n\n\n\n\nDraw a line:\n\n\nECOR1 = angle(4359)\n\n\np1 = coord(ECOR1, CENTER, 160)\n\n\np1 = coord(ECOR1, CENTER, 210)\n\n\nDRAW.line((p1, p2), fill = 'black', width = 3)\n\n\n\n\n\n\nRotate the image:\n\n\npBR322 = pBR322.rotate(45)\n\n\n\n\n\n\nAdd text:\n\n\nDRAW.text((370, 240), \"EcoR1\", fill = \"black\")\n\n\n\n\n\n\n\n\nDraw an image of a plasmid and label it\n\n\nfrom PIL import Image, ImageDraw\nimport math\n\nPLASMID_LENGTH = 4361\nSIZE = (500, 500)\nCENTER = (250, 250)\n\npBR322 = Image.new('RGB', SIZE, 'white')\nDRAW = ImageDraw.Draw(pBR322)\n\ndef get_angle(bp, length=PLASMID_LENGTH):\n    \nConverts base position into an angle.\n\n    return bp * 360 / length\n\ndef coord(angle, center, radius):\n    \nReturn (x, y) coordinates of a point in a circle.\n\n    rad = math.radians(90 - angle)\n    x = int(center[0] + math.sin(rad) * radius)\n    y = int(center[1] + math.cos(rad) * radius)\n    return x, y\n\ndef draw_arrow_tip(start, direction, color):\n    \nDraws a triangle at the given start angle.\n\n    p1 = coord(start + direction, CENTER, 185)\n    p2 = coord(start, CENTER, 160)\n    p3 = coord(start, CENTER, 210)\n    DRAW.polygon((p1, p2, p3), fill = color)\n\n\nTET_START, TET_END = get_angle(88), get_angle(1276)\nAMP_START, AMP_END = get_angle(3293), get_angle(4153)\nORI_START, ORI_END = get_angle(2519), get_angle(3133)\n\n# drawing the plasmid\nBOX = (50, 50, 450, 450)\nDRAW.pieslice(BOX, 0, 360, fill = 'gray')\nDRAW.pieslice(BOX, TET_START, TET_END, fill = 'blue')\nDRAW.pieslice(BOX, AMP_START, AMP_END, fill = 'orange')\nDRAW.pieslice(BOX, ORI_START, ORI_END, fill = 'darkmagenta')\nDRAW.pieslice((80, 80, 420, 420), 0, 360, fill = 'white')\n\ndraw_arrow_tip(TET_END, 10, 'blue')\ndraw_arrow_tip(AMP_START, -10, 'orange')\ndraw_arrow_tip(ORI_START, -10, 'darkmagenta')\n\nDRAW.text((150, 130), \nori\n, fill = (0, 0, 0))\nDRAW.text((340, 130), \namp\n, fill =(0, 0, 0))\nDRAW.text((300, 380), \ntet\n, fill = (0, 0, 0))\n\npBR322.save('plasmid_pBR322.png')\n\n\n\n\nResult:\n\n\n\n\nPart 6, Cookbook\n\n\nRecipe 2, Reversing and Randomizing a Sequence\n\n\nsort, reverse, random, probability, list, loop\n\n\nseq = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nprint(seq)\n\nseq_list = list(seq)\nseq_list.reverse()\nrev_seq = ''.join(seq_list)\nprint(rev_seq)\n\nprint(\n=\n * 25)\n\n# reverse a sequence, using a loop\n# rev_seq = ''\nrev_seq = ''\nfor s in reversed(seq):\n    rev_seq = rev_seq + s\nprint(rev_seq)\n\nprint(\n=\n * 25)\n\n# reverse a sequence, using seq[start:end:step]\nrev_seq = seq[:-1]\nprint(rev_seq)\n\nprint(\n=\n * 25)\n\n# mixing a sequence\nimport random\n\nran_seq = random.sample(seq, len(seq))\nprint(ran_seq)\nran_seq = ''.join(random.sample(seq, len(seq)))\nprint(ran_seq)\nran_seq = ''.join(random.sample(seq, len(seq)-10))\nprint(ran_seq)\n\nprint(\n=\n * 25)\n\n# mixing a sequence (using random again)\nran_seq = ''.join([random.choice(seq) \\\n for x in range(len(seq))])\nprint(ran_seq)\n\nprint(\n=\n * 25)\n\n# shuffle a sequence (using random again)\ndata = list(seq)\nrandom.shuffle(data)\nshuffled_seq = data\nprint(shuffled_seq)\n\nshuffled_seq = ''.join(data)\nprint(shuffled_seq)\n\n\n\n\nOuput:\n\n\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nABCDEFGHIJKLMNOPQRSTUVWXY\n=========================\n['F', 'J', 'I', 'L', 'O', 'R', 'U', 'C', 'A', 'V', 'Q', 'M', 'T', 'N', 'B', 'G', 'W', 'P', 'Y', 'H', 'D', 'S', 'Z', 'E', 'X', 'K']\nLKAZHTVFGQROUXIMYWESDPCBJN\nLXRDUVFHKGJZMIAB\n=========================\nRYYEYKWUGMYFYMUWWBOSZWSRMJ\n=========================\n['R', 'N', 'S', 'E', 'M', 'H', 'A', 'P', 'X', 'F', 'W', 'K', 'J', 'I', 'Y', 'T', 'Z', 'G', 'V', 'O', 'C', 'B', 'Q', 'D', 'L', 'U']\nRNSEMHAPXFWKJIYTZGVOCBQDLU\n\n\n\n\nRecipe 3, Creating a Random Sequence with Probabilities\n\n\nrandom, list, generate, probability\n\n\nimport random\n\nnucleotides = list('ACGT')\ndna = ''\nwhile len(dna) \n 100:\n    dna += random.choice(nucleotides) # choose amoung the list, fetch 1 item\nprint(dna)\n\nprint(\n=\n * 25)\n\nnucleotides = list('ACGT')\nprobs = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3} # sum of 1.0\nassert sum(probs.values()) == 1.0\n# or\n# if sum(probs.values()) != 1.0:\n#   raise Exception('Sum of probabilites is not 1.0!')\n\ndna = ''\nwhile len(dna) \n 100:\n    nuc = random.choi", 
            "title": "Managing Your Biological Data with Python"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-1-the-python-shell-and-basics", 
            "text": "Data structure   Booleans:  True  or  False .  Dictionaries: unordered collections of key-value pairs; both can be numbers or strings; indicated with  {key1: value1, 'key2': 'value2'} .  Floats: numbers with digits after the dicemal point,  Integers: numbers without digits after the decimal point.  Lists: mutable ordered collections of objects; indicated with  [a, b, c] .  Sets: immutable unordered collections of unique elements; indicated by  ([a, b, c]) .  Strings: immutable ordered collections of characters; indicated with  'single'  or  \"double\"  quotation marks.  Tuples: immutable ordered collections of objects; indicated with  (a, b, c) .   Conversions  Convert or coerce data: \n-  float(value) ; into a float. \n-  int(value) ; into an integer. \n-  str(value) ; into a string.  Strings  'Single'  and  \"double\"  quotes are for short strings.  Triple single and double quotes \nare rather multilines.  Access character and substrings   print s[-1] ; print the last character of a string.  print s[-5:] ; print from the 5th position from the end to the end.   String functions   len(s) ; length of the string,  s.upper() ; convert to uppercase.  s.lower() ; convert to lowercase.  s.strip() ; remove white spaces and tabs from both ends.  s.strio('m') ; remove  'm'  from both ends.  s.rstrip() ; remove on the right only.  s.lstrip('m') ; remove on the left only.  s.split(' ') ; cut into words where there is space.  s.find('m') ; search for the  'm'  substring and return the starting position.  s.replace('m', 'n') ; replace  'm'  with  'n' .  s.startwith('m') ; check beginning and return  True  or  False .  s.endwith('m') ; check end and return  True  or  False .   Create lists   data = [1, 2, 3, 4, 5] .  data[1:3] ;  [2, 3] .  data[0:2] ;  [1, 2] .  data[:3] ;  [1, 2, 3] .  data[-2:] ;  [4, 5] .  data2 = data[:] ; create a copy.   Modify lists   l[i] = x ; replace the i th  element with  x .  l[i;j] = t ; replace elements from  i  to  j  by  t  (iterable).  del l[i;j] ; delete the elements of the list from  i  to  j .  del s[i;k;k] ; delete the elements of the list from  i  to  j  with stop  k .  l.append(x) ; add element  x  to the list.  l.extend(x) ; add several element  x  to the list (iterable).  l.count(x) ; return the number of elements  x  in the list.  l.index(x[. i[. j]]) ; return the smaller  k  such that  l[k] = x  and  i  = k  = j .  l.insert(i.x) ; insert(wedge in)  x .  l.pop(i) ; cancel the ith element and return its value;  l.pop()  does it for the last element.  l.remove(x) ; delete a choosen  x  element.  l.reverse() ; reverse the list order.  l.sort() ; sort the list.  l.sort([cmp[. key[. reverse]]]) ; sort the list;  cmp  is a customized function for the comparison of element pairs that must return a negative value, zero, or a positive value depending on if the first element of the pair is lower than. equal to. or greater than the second element.  sorted(l) ; create a new list made of a simple ascending sort of the list without modifying the list.   Functions working of lists   len(data) ; length of the list.  min(data) ; smallest.  max(data) ; largest.  sum(data) ; sum.  range(4) ; create a list of number from 0 to 3.  range(1.5) ; create a list of number from 1 to 4.  range(2.9.2) ; create  [2, 4, 6, 8] .  range(5, 0, -1) ; create  [5, 4, 3, 2, 1]   Tuples   t = 1, 2, 3  or  t = (1, 2, 3)  t = 1  or  tuple = (1,)   Accessing data in dictionaries   prices['banana'] ; return the value of the key.  prices.get('banaba') ; do the same thing, but if the key does not exit, it returns  None .  prices.has_key('apple') ; check whether the key(s) is(are) defined.  prices.keys() ; return a list of all keys.  prices.values() ; return a list of all values.  prices.items() ; return all keys and values as a list of tuples.   Modifying dictionaries   prices['kiwi'] = 0.6 ; set the value of the key.  prices.setdefault('egg', 0.9) ; set the value of the key if it is not yet defined.   None  None indicate the object or part of it is empty. For example: \n-  a = None . \n-  b = [None, None, 'green'] .", 
            "title": "Chapter 1, The Python Shell and Basics"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-2-your-first-python-program", 
            "text": "Difference between functions and methods  Functions are generic; use them anywhere without constraints. For example,  len()  works on all data.   len('protein')\n7  len('111')\n3  Other funtions, called methods, are specific; use them on a certain type of data. For example,  count()  works only for strings or a  string  variable (below,  protein  is a string).   'protein'.count('r')\n1  'occurence'.count('c')\n3  Count the occurrence of each amino acid in a protein sequence  count, element, in, string  insulin =  GIVEQCCTSICSLYQLENYCNFVNQHLCGSHLVEALYLVCGERGFFYTPKT \n\nfor amino_acid in  ACDEFGHIKLMNPQRSTVWY :\n    number = insulin.count(amino_acid)\n    print amino_acid, number  Create a random DNA sequence of length 10  import random\n\nalphabet =  AGCT \nsequence =  \nfor i in range(10):\n    index = random.randint(0, 3)\n    sequence = sequence + alphabet[index]\n\nprint sequence", 
            "title": "Chapter 2, Your First Python Program"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#part-2-data-management", 
            "text": "", 
            "title": "Part 2, Data management"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-3-analyzing-a-data-column", 
            "text": "Read from a text file   readlines() .   text_file = open('neuron_data.txt', 'r')\n# 'r' is facultative\n\nlines = text_file.readlines()\n\ntext_file.close()\n\nprint lines   read() .    text_file = open('neuron_data.txt')\n# 'r' is facultative\n\nprint text_file.read()\n\ntext_file.close()  Difference between  read()  and  readlines()   read(x) ; read up to x bytes in a file. If you don t supply the size, it reads the entire file. The output is displayed as strings only once.  One character = 1 byte.  Close and reopen the file to read it again.  readlines(x) ; read up to x bytes. If you don t supply a size, it reads all the data until it reaches a newline ( \\n ) or the end of a paragraph.  Close and reopen the file to read it again.   Write a text file  output_file = open('counts.txt', 'w')\n# 'w' is mandatory\n\noutput_file.write('number of neuron lengths: 7\\n')\n\noutput_file.close()  Clean a text file  strip   strip() ; removes blanks spaces.  rstrip() ; right only.  lstrip() ; left only.   output_file = open('counts.txt')\noutput_file.read()\noutput_file.close()\n\n# vs\n\noutput_file = open('counts.txt')\noutput_file.read().strip()\noutput_file.close()  Write and then read the same file   'r' ; cannot write with, only reads.  'w' ; cannot read with, only writes (an existing file with the same name will be erased).  'a'  append; data added to the end.   'r+' ; both read and write (by replacing the existing string at the beginning by the new string).   file1 = open('count.txt','w')\nfile1.write('this is just a dummy test\\n')\nfile1.close()\n\nfile2 = open('count.txt', 'r')\nprint file2.read()\nfile2.close()\n\nfile3 = open('count.txt','a')\nfile3.write('this is another test\\n')\nfile3.close()\n\nfile4 = open('count.txt', 'r')\nprint file4.read()\nfile4.close()\n\nfile5 = open('count.txt', 'w')\nfile5.write('this is a final test\\n')\nfile5.close()\n\nfile6 = open('count.txt', 'r')\nprint file6.read()\nfile6.close()  Read a series of numbers from a text file and print a summary of the data  strip, append, length, minimum, maximum, sort, format, integer, float   strip() ; remove blank spaces.  A text is string by default even thought the file contains numbers; transform the text into float.  append() ; each line to a list.  len(data) .  sum(data) .  min(data) .  max(data) .  sort() .  %4i  is an integer with 4 digits.  %6.1f  is a float with 6 digits and 2 decimals.   data = []\n\nfor line in open('neuron_data.txt'):\n    length = float(line.strip())\n    data.append(length)\n\nn_items = len(data)\ntotal = sum(data)\nshortest = min(data)\nlongest = max(data)\n\ndata.sort()\n\n\noutput = open( results.txt , w )\n\noutput.write( number of dendritic lengths : %4i \\n %(n_items))\noutput.write( total dendritic length      : %6.1f \\n %(total))\noutput.write( shortest dendritic length   : %7.2f \\n %(shortest))\noutput.write( longest dendritic length    : %7.2f \\n %(longest))\noutput.write( %37.2f\\n%37.2f %(data[-2], data[-3]))\n\noutput.close()  Format the data  formatting, variable   %s ; a string.  %d ; a digit.  %r ; raw data.  %10s ; left-justify by 10 bytes.  %-10s ; right-justify. by bytes  %i ; an integer.  %f ; a float.  %2f ; a float with 2 digits.  %2.2f ; has 2 digits and 2 decimals.  %2i ; has 2 digits.  And so on.  str() ; turn a variable into a string (digit  3  to string  '3'  for example).  int() ; turn a variable into an integer (string  '3'  to digit  3  for example).  float() ; turn a variable into a float (digit  3  to  3.0  for example).   file1 = open('count.txt','w')\nfile1.write('this is just a dummy test')\nfile1.close()\n\nfile2 = open('count.txt', 'r')\nvariable = file2.read()\n\nprint  Test1: %r  % (variable)\nprint  Test2: %s  % (variable)\nprint  Test3: %30s  % (variable)\nprint  Test4: %-30s  % (variable)\nprint  Test5: %30r  % (variable)\nprint  Test6: %-30r  % (variable)\nprint  Test7: %d, %d, %d  % (1, 2, 3)\nprint  Test8: %2d, %3d, %10d  % (1, 2, 3)\nprint  Test9: %d, %i, %f  % (1, 2, 3)\nprint  Test10: %i, %i, %i  % (1, 2.8, 3.1416)\nprint  Test11: %2i, %5i, %10i  % (1, 2.8, 3.1416)\nprint  Test12: %f, %f, %f  % (1, 2.8, 3.1416)\nprint  Test13: %2f, %2.2f, %10.3f  % (1, 2.8, 3.1416)\nprint  Test14: %2f, %2f, %2f  % (0.11, 10.111, 1000.1111)\nprint  Test15: %2.1f, %2.1f, %2.10f  % (0.11, 10.111, 1000.1111)\n\nfile2.close()  Output:  Test1: 'this is just a dummy test'\nTest2: this is just a dummy test\nTest3:      this is just a dummy test\nTest4: this is just a dummy test     \nTest5:    'this is just a dummy test'\nTest6: 'this is just a dummy test'   \nTest7: 1, 2, 3\nTest8:  1,   2,          3\nTest9: 1, 2, 3.000000\nTest10: 1, 2, 3\nTest11:  1,     2,          3\nTest12: 1.000000, 2.800000, 3.141600\nTest13: 1.000000, 2.80,      3.142\nTest14: 0.110000, 10.111000, 1000.111100\nTest15: 0.1, 10.1, 1000.1111000000  Write a list of numbers to a text file  data = [16.38, 139.90, 441.46, 29.03, 40.93, 202.07, 142.30, 346.00, 300.00]\n\nout = []\n\nfor value in data:\n    out.append(str(value) + '\\n')\nopen('results.txt', 'w').writelines(out)  Ouput:  16.38\n139.9\n441.46\n29.03\n40.93\n202.07\n142.3\n346.0\n300.0  Calculate the average from a list of numbers  # calculate average from float numbers\ndata = [3.53, 3.47, 3.51, 3.72, 3.43]\naverage = sum(data) / len(data)\nprint average\n\n# calculate average from integer numbers\ndata = [1, 2, 3, 4]\naverage = float(sum(data)) / len(data)\nprint average  Calculate the median from a list of numbers  data = [3.53, 3.47, 3.51, 3.72, 3.43]\n\ndata.sort()\n\nmid = len(data) / 2 \nif len(data) % 2 == 0:\n    median = (data[mid - 1] + data[mid]) / 2.0\nelse:\n    median = data[mid]\n\nprint median  Join or concatenate a list   L = ['1', '2', '3']  '+'.join(L)\n'1+2+3'  L = ['a', 'b', 'c']  ''.join(L)\n'abc'  L = ['1', '2', '3']  int(''.join(L))\n123  Calculate (a variance and )a standard deviation from a list of numbers  import math\n\ndata = [3.53, 3.47, 3.51, 3.72, 3.43]\naverage = sum(data) / len(data)\n\ntotal = 0.0\n\nfor value in data:\n    total += (value - average) ** 2\n\nvariance = total / len(data) # population variance\nstddev = math.sqrt(variance) # population stddev\n\nprint variance\nprint stddev", 
            "title": "Chapter 3, Analyzing a Data Column"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-4-parsing-data-records", 
            "text": "Find items common to two lists  # proteins participating in cell cycle\n\nlist_a = []\n\nfor line in open( cell_cycle_proteins.txt ):\n    list_a.append(line.strip())\n\nprint list_a\n\n# proteins expressed in a given cancer cell\n\nlist_b = []\n\nfor line in open( cancer_cell_proteins.txt ):\n    list_b.append(line.strip()) \n\nprint list_b\n\nfor protein in list_a:\n    if protein in list_b:\n        print protein, 'detected in the cancer cell'\n    else:\n        print protein, 'not observed'  Output:  ['P62258', 'P61981', 'P62191', 'P17980', 'P43686', 'P35998', 'P62333', 'Q99460', 'O75832']\n['P43686', 'P62333']\n\nP62258 not observed\nP61981 not observed\nP62191 not observed\nP17980 not observed\nP43686 detected in the cancer cell\nP35998 not observed\nP62333 detected in the cancer cell\nQ99460 not observed\nO75832 not observed  **Find if two or more conditions are met  boolean, operators, and, or, not  seq =  MGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQTPSKPASADGHRGPSAAFAPAAAE \n\nif 'GGG' in seq and 'RRR'in seq:\n    print 'GGG is at position: ', seq.find('GGG')\n    print 'RRR is at position: ', seq.find('RRR')\n\nif 'WWW' in seq or 'AAA' in seq:\n    print 'Either WWW or AAA occur in the sequence'\n\nif 'AAA' in seq and not 'PPP' in seq:\n    print 'AAA occurs in the sequence but not PPP'  Boolean Operators     Condition  Meaning      A   B  A lower than B    A  = B  A lower than or equal to B    A   B  A greater than B    A  = B  A greater than or equal to B    A == B  A equal to B    A != B  A different from B    A  B  idem    A is B  A is the same thing as B  thing  being an object    A is not B  A is not the same thing as B    A in B  A is present in the sequence B    A not in B  A is not present in the sequence B     Find all prime numbers under 30  for i in range(30):\n    if i   4:\n        print  prime number: , i\n    elif i % 2 == 0:\n        print  multiple of two: , i\n    elif i % 3 == 0:\n        print  multiple of three: , i\n    elif i % 5 == 0:\n        print  multiple of five: , i\n    else:\n        print  prime number: , i  List vs Tuple vs Set   mutable: change, replace, reorder, add elements.  List = [1, 2, 3] ; mutable sequences of objects.   Tuple = (1, 2, 3) ; immutable ordered sequences of objects;.  Set = set([1, 2, 3]) ; immutable unordered  collections of unique elements.  The three can contain digits, strings or other objects (embedded).   More on lists   List[0] ; extract  Llist = [[1, 2, 3],[a, b, c],[x, 4, 'text'], 'seq'] ; embedded lists.  List[0][1] ; extract from embedded lists.  List.append(5) ; add.  Create:  range(3) .  seq(0, 2, 1) .  [0.0] * 10 .  [x**2 for x in range(5)] .     Creating a list with a one-line loop  loop, conditional, conditional, on one line  # remove non-base symbols from a sequence\nsquares = [x**2 for x in range(5)]\nprint squares\n\nbases = ['A', 'C', 'T', 'G']\nprint bases\n\nseq = 'GGACXCAGXXGATT'\nprint seq\n\nseqlist = [base for base in seq if base in bases]\nprint seqlist  Write all headers from a file to a separate file  fasta_file = open('SwissProt.fasta','r')\nout_file = open('SwissProt.header','w')\n\nfor line in fasta_file:\n    if line[0:1] == ' ':\n        out_file.write(line)\n\nout_file.close()  Reads all AC numbers from the deflines of a file  parse, parsing, text, file  input_file = open( SwissProt.fasta , r )\n\nac_list = []\n\nfor line in input_file:\n    if line[0] == ' ':\n        fields = line.split('|')\n        ac_list.append(fields[1])\n\nprint ac_list  Output:  ['P31946', 'P62258', 'Q04917', 'P61981', 'P31947', 'P27348', 'P63104', 'P30443']  Read a file (genbank_file) and convert it to another file (output_file)  genbank_file = open( AY810830.gb )\noutput_file = open( AY810830.fasta , w )\n\nflag = False\nfor line in genbank_file:\n    if line[0:9] == 'ACCESSION':\n        accession = line.split()[1].strip()\n        output_file.write(' ' + accession + '\\n')\n    if line[0:6] == 'ORIGIN': \n        flag = True\n    elif flag:\n        fields = line.split()\n        if fields != []:\n            seq = ''.join(fields[1:])\n            output_file.write(seq.upper() + '\\n')\n\ngenbank_file.close()\noutput_file.close()  Read multiple files and extract data  fasta_file = open('SwissProt.fasta','r')\nout_file = open('SwissProtHuman.fasta','w')\n\nseq = ''\nfor line in fasta_file:\n    if line[0] == ' ' and seq == '':\n        # process the first line of the input file\n        header = line\n    elif line [0] != ' ':\n        # join the lines with sequence\n        seq = seq + line\n    elif line[0] == ' ' and seq != '':\n        # in subsequent lines starting with ' ',\n        # write the previous header and sequence\n        # to the output file. Then re-initialize\n        # the header and seq variables for the next record\n        if  Homo sapiens  in header:\n            out_file.write(header + seq)\n        seq = ''\n        header = line\n\n# take care of the very last record of the input file\nif  Homo sapiens  in header:\n    out_file.write(header + seq)\nout_file.close()", 
            "title": "Chapter 4, Parsing Data Records"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-5-searching-data", 
            "text": "Translate a RNA sequence to a protein sequence in three reading frames  dictionary  codon_table = {\n    'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A', 'CGU':'R', 'CGC':'R',   \n    'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R', 'UCU':'S', 'UCC':'S',\n    'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', 'AUU':'I', 'AUC':'I',\n    'AUA':'I', 'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L', 'CUA':'L',\n    'CUG':'L', 'GGU':'G', 'GGC':'G', 'GGA':'G', 'GGG':'G', 'GUU':'V',\n    'GUC':'V', 'GUA':'V', 'GUG':'V', 'ACU':'T', 'ACC':'T', 'ACA':'T',\n    'ACG':'T', 'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P', 'AAU':'N',\n    'AAC':'N', 'GAU':'D', 'GAC':'D', 'UGU':'C', 'UGC':'C', 'CAA':'Q',\n    'CAG':'Q', 'GAA':'E', 'GAG':'E', 'CAU':'H', 'CAC':'H', 'AAA':'K',\n    'AAG':'K', 'UUU':'F', 'UUC':'F', 'UAU':'Y', 'UAC':'Y', 'AUG':'M',\n    'UGG':'W',\n    'UAG':'STOP', 'UGA':'STOP', 'UAA':'STOP'\n    }\n\n# read the RNA sequence into a single string\nrna = ''\nfor line in open('A06662-RNA.fasta'):\n    if not line.startswith(' '): \n        rna = rna + line.strip()\n\n# translate one frame at a time\nfor frame in range(3):\n    prot = '' \n    print 'Reading frame ' + str(frame + 1)\n    for i in range(frame, len(rna), 3):\n        codon = rna[i:i + 3]\n        if codon in codon_table:\n            if codon_table[codon] == 'STOP':\n                prot = prot + '*'\n            else: \n                prot = prot + codon_table[codon]\n        else:\n            # handle too short codons\n            prot = prot + '-'   \n\n    # format to blocks of 48 columns\n    i = 0\n    while i   len(prot):\n        print prot[i:i + 48]\n        i = i + 48  Output (contains a translated sequence for each reading frame):  Reading frame 1\nWDQSAEAACVRVRVRVCACVCVRLHLCRVGKEIEMGGQ*AQVPKALNP\nLVWSLLRAMGAIEKSEQGCV*M*GLEGSSREASSKAFAIIW*ENPARM\nDRQNGIEMSWQLKWTGFGTSLVVGSKQRRIWDSGGLAWGRRGCLRGWE\nG*E*DDTWWCLAGGGQG*LCEGTARATEAF*DPAVPEPGRQDLHCGRP\nGEHLA\n\nReading frame 2\nGTSQQRQRVCACVCVCVRVCVYACICVGWVRR*RWAGSRPRSRRP*TH\nWFGVS*GQWGPLRSLNRAVSECEV*KDPPEKPALKLLQSSGERTQQGW\nTGRME*R*VGS*SGQDLVLAWLWGASRGESGTLVVWPGADGGVSGAGR\nDESRMIHGGVWQEAGKDDYVKALPGQLKPFETLLSQNQGGKTFIVGDQ\nVSIW-\n\nReading frame 3\nGPVSRGSVCARACACVCVCVCTLAFVSGG*GDRDGRAVGPGPEGLEPT\nGLESPKGNGGH*EV*TGLCLNVRSRRILQRSQL*SFCNHLVREPSKDG\nQAEWNRDELAAEVDRIWY*PGCGEQAEENLGLWWSGLGQTGVSQGLGG\nMRVG*YMVVSGRRRARMTM*RHCPGN*SLLRPCCPRTREARPSLWETR\n*ASG-  While loop  seq =  IVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF \n\ni = 0\nwhile i   len(seq):\n    print seq[i:i + 12]\n    i = i + 12  Output:  IVGGYTCGANTV\nPYQVSLNSGYHF\nCGGSLINSQWVV\nSAAHCYKSGIQV\nRLGEDNINVVEG\nNEQF  Find the a sequence in a file  swissprot = open( SwissProt.fasta )\ninsulin_ac = 'P61981'\nresult = None\n\nwhile result == None:\n    line = swissprot.next()\n    if line.startswith(' '):\n        ac = line.split('|')[1]\n        if ac == insulin_ac:\n            result = line.strip()\n\nprint result  Output:  sp|P61981|1433G_HUMAN 14-3-3 protein gamma OS=Homo sapiens GN=YWHAG PE=1 SV=2  Searching a list  search  bases = ['A', 'C', 'T', 'G']\nseq = 'CAGGCCATTRKGL'\n\nfor i in seq:\n    if i not in bases:\n        print i,  is not a nucleotide   Output:  R is not a nucleotide\nK is not a nucleotide\nL is not a nucleotide  Read a file and store entries in a dictionary  sequences = {}\nac = ''\nseq = ''\n\nfor line in open( SwissProt.fasta ):\n    if line.startswith(' ') and seq != '':\n        sequences[ac] = seq\n        seq = ''\n    if line.startswith(' '):\n        ac = line.split('|')[1]\n    else:\n        seq = seq + line.strip()\n\nsequences[ac] = seq\nprint sequences.keys()\nprint sequences['P62258']  Output:  ['Q04917', 'P63104', 'P27348', 'P31947', 'P31946', 'P30443', 'P61981', 'P62258']\n\nMDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIGARRASWRIISSIEQKEENKGGEDKLKMIREYRQMVETELKLICCDILDVLDKHLIPAANTGESKVFYYKMKGDYHRYLAEFATGNDRKEAAENSLVAYKAASDIAMTELPPTHPIRLGLALNFSVFYYEILNSPDRACRLAKAAFDDAIAELDTLSEESYKDSTLIMQLLRDNLTLWTSDMQGDGEEQNKEALQDVEDENQ  Read a sequence from a structure  aa_codes = {\n     'ALA':'A', 'CYS':'C', 'ASP':'D', 'GLU':'E',\n     'PHE':'F', 'GLY':'G', 'HIS':'H', 'LYS':'K',\n     'ILE':'I', 'LEU':'L', 'MET':'M', 'ASN':'N',\n     'PRO':'P', 'GLN':'Q', 'ARG':'R', 'SER':'S',\n     'THR':'T', 'VAL':'V', 'TYR':'Y', 'TRP':'W'}\n\nseq = ''\n\nfor line in open( 1TLD.pdb ):\n    if line[0:6] ==  SEQRES :\n        columns = line.split()\n        for resname in columns[4:]:\n            seq = seq + aa_codes[resname]\n\ni = 0\nprint  1TLD \nwhile i   len(seq):\n    print seq[i:i + 64]\n    i = i + 64  Output:  1TLD\nIVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQF\nISASKSIVHPSYNSNTLNNDIMLIKLKSAASLNSRVASISLPTSCASAGTQCLISGWGNTKSSG\nTSYPDVLKCLKAPILSDSSCKSAYPGQITSNMFCAGYLEGGKDSCQGDSGGPVVCSGKLQGIVS\nWGSGCAQKNKPGVYTKVCNYVSWIKQTIASN", 
            "title": "Chapter 5, Searching Data"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-6-filtering-data", 
            "text": "Calculate the intersection of two lists  venn  data_a = [1, 2, 3, 4, 5, 6]\ndata_b = [1, 5, 7, 8, 9]\n\na_and_b = []\n\nfor num in data_a:\n    if num in data_b:\n        a_and_b.append(num)\n\nprint a_and_b  Output:  [1, 5]  More about sets  set   Set = set([1, 2, 3]) ; immutable unordered collections of unique elements.  They are not sequential objects like lists.  They cannot contain identical elements.  to remove duplicates  to calculate the intersection  the union  the difference between two or more group of objects  as long as the order is not important.    They do not support indexing and slicing operations.  They take the  in  and  not in  operators (test an element for membership in a set).    s1 = set('LDFGJLDFGDGD')  s1\nset(['J', 'F', 'L', 'G', 'D'])  'L' in s1\nTrue  'Z' not in s1\nTrue  s2 = ('LDF')  s1.issubset(s2)\nFalse  s1.issuperset(s2)\nTrue  s1 = set(['a', 1, 2, 3, 4, 5, 'c', 'b'])  5 in s1\nTrue  6 in s1\nFalse  s2 = set([10, 4, 5])  s1.issubset(s2)\nFalse  s1.issuperset(s2)\nFalse  s3 = set((1, 2, 3, 4))  s3\nset([1, 2, 3, 4])  s3.add(5)  s3\nset([1, 2, 3, 4, 5])  s5 = set([1, 2, 3, 'b', 'c'])  s5\nset([1, 2, 3, 'b', 'c'])  s5.update(['a', 'd', 4])  s5\nset(['a', 1, 2, 3, 4, 'd', 'c', 'b'])  s1 = set(['a', 'b', 'c'])  s2 = set(['c', 'd', 'e'])  s1.union(s2)\nset(['a', 'c', 'b', 'e', 'd'])  s1.intersection(s2)\nset(['c'])  s1.symmetric_difference(s2)\nset(['a', 'b', 'e', 'd'])  s1.difference(s2)\nset(['a', 'b'])  s2.difference(s1)\nset(['e', 'd'])  Calculate the intersection of two sets  data_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_and_b = data_a.intersection(data_b)\nprint a_and_b  Output:  set([1, 5])  Find numbers common to three sets  reduce() is\n\na = set((1, 2, 3, 4, 5))\nb = set((2, 4, 6, 7, 1))\nc = set((1, 4, 5, 9))\n\ntriple_set = [a, b, c]\ncommon = reduce(set.intersection, triple_set)\nprint common  Output:  set([1, 4])  Calculate the differences of two lists  data_a = [1, 2, 3, 4, 5, 6]\ndata_b = [1, 5, 7, 8, 9]\n\na_not_b = []\nb_not_a = []\n\nfor num in data_a:\n    if num not in data_b:\n        a_not_b.append(num)\n\nfor num in data_b:\n    if num not in data_a:\n        b_not_a.append(num)\n\nprint a_not_b\nprint b_not_a  Output:  [2, 3, 4, 6]\n[7, 8, 9]  Calculate the differences of two sets 1  data_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_not_b = data_a.difference(data_b)\nb_not_a = data_b.difference(data_a)\n\nprint a_not_b\nprint b_not_a  Output:  set([2, 3, 4, 6])\nset([8, 9, 7])  Calculate the differences of two sets 2  data_a = set([1, 2, 3, 4, 5, 6])\ndata_b = set([1, 5, 7, 8, 9])\n\na_or_b = data_a.union(data_b)\na_xor_b = data_a.symmetric_difference(data_b)\n\nprint a_or_b\nprint a_xor_b  Output:  set([1, 2, 3, 4, 5, 6, 7, 8, 9])\nset([2, 3, 4, 6, 7, 8, 9])  Remove elements from a list   pop() ; return and remove the first value.  pop(0) ; return and remove a specific position in the index.    data_a = [1, 2, 3, 4, 5, 6, 7]  data_a.pop()\n1  print data_a\n[2, 3, 4, 5, 6, 7]   del() ; remove a specific position in the index only.   delete   data_a = [1, 2, 3, 4, 5, 6, 7]  del(data_a[1])  print data_a\n[1, 3, 4, 5, 6, 7]   remove() ;  remove a specific element only.   remove   data_a = [1, 2, 3, 4, 5, 6]  data_a.remove(2)  print data_a\n[1, 3, 4, 5, 6]  data = [x for x in data_a if x != 3]  Slicing a list  slice, subset   data_a = [1, 2, 3, 4, 5, 6]  data_2 = data_a[:2]\n[1, 2]  Remove elements from a dictionary  pop, delete   d = {'a': 1, 'b': 2, 'c': 3}  d.pop('a')\n1  d\n{'b': 2, 'c': 3}  d = {'a': 1, 'b': 2, 'c': 3}  del d['a']\n1  d\n{'b': 2, 'c': 3}  Delete particular lines from a text file or write back particular lines in a new file  lines = open('text.txt').readlines()\nopen('new.txt', 'w').writelines(lines[2:4]+lines[6:])  Remove some lines from a text file  in_file = open('text.txt')\nout_file = open('new.txt', 'w')\n\nindex = 0\nindices_to_remove = [1, 2, 5, 6]\nfor line in in_file:\n    index = index + 1\n    if index not in indices_to_remove:\n        out_file.write(line)\n\nin_file.close()\nout_file.close()  Remove some lines from a text file with  enumerate()  enumerate  out_file = open('new.txt', 'w')\nindices_to_remove = [1, 2, 5, 6]\n\nfor index, line in enumerate(open('text.txt')):\n    if (index + 1) not in indices_to_remove:\n        out_file_write(line)\n\nout_file.close()  Remove duplicates from a file with accession numbers 1  set   Using a set is faster but distorts the order.   input_file = open('UniprotID.txt')\noutput_file = open('UniprotID-unique.txt','w')\n\nunique = set(input_file)\nfor line in input_file:\n    unique.add(line)\n\nfor line in unique:\n    output_file.write(line)  Remove duplicates from a list of accession numbers 2  list  input_file = open('UniprotID.txt')\noutput_file = open('UniprotID-unique.txt','w')\n\nunique = []\nfor line in input_file:\n    if line not in unique:\n        output_file.write(line)\n        unique.append(line)\n\ninput_file.close()\noutput_file.close()  Compare two lists of accession codes using sets  set comparison, difference  # read the old database release\nold_db = set()\nfor line in open( list_old.txt ):\n    accession = line.strip()\n    old_db.add(accession)\n\n# read the new database release\nnew_db = set()\nfor line in open( list_new.txt ):\n    accession = line.strip()\n    new_db.add(accession)\n\n# report the differences\nnew_entries = new_db.difference(old_db)\nprint  new entries , list(new_entries)\nold_entries = old_db.difference(new_db)\nprint  deprecated entries , list(old_entries)\nunique_entries = new_db.symmetric_difference(old_db)\nprint  unique entries , list(unique_entries)", 
            "title": "Chapter 6, Filtering Data"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-7-managing-tabular-data", 
            "text": "The original data     protein  ext1  ext2  ext3      0.16  0.038  0.044  0.04    0.33  0.089  0.095  0.091    0.66  0.184  0.191  0.191    1.0  0.28  0.292  0.283    1.32  0.365  0.367  0.365    1.66  0.441  0.443  0.444     Read tabular data from a tab-separated text file  table = []\n\nfor line in open('lowry_data.txt'):\n    table.append(line.strip().split('\\t'))\n\nprint table  Output:  [\n['protein', 'ext1', 'ext2', 'ext3'],\n['0.16', '0.038', '0.044', '0.04'],\n['0.33', '0.089', '0.095', '0.091'],\n['0.66', '0.184', '0.191', '0.191'],\n['1.0', '0.28', '0.292', '0.283'],\n['1.32', '0.365', '0.367', '0.365'],\n['1.66', '0.441', '0.443', '0.444']\n]  Write a nested list to a text file  table = [\n    ['protein', 'ext1', 'ext2', 'ext3'],\n    [0.16, 0.038, 0.044, 0.040],\n    [0.33, 0.089, 0.095, 0.091],\n    [0.66, 0.184, 0.191, 0.191],\n    [1.00, 0.280, 0.292, 0.283],\n    [1.32, 0.365, 0.367, 0.365],\n    [1.66, 0.441, 0.443, 0.444]\n    ]\n\nout = ''\n\nfor row in table:\n    line = [str(cell) for cell in row]\n    out = out + '\\t'.join(line) + '\\n'\n\nopen('lowry_data.txt', 'w').write(out)  Reformat a four-column to a two-column table  Create a 2D table.  Print the table line by line.  table = [\n    ['protein', 'ext1', 'ext2', 'ext3'],\n    [0.16, 0.038, 0.044, 0.040],\n    [0.33, 0.089, 0.095, 0.091],\n    [0.66, 0.184, 0.191, 0.191],\n    [1.00, 0.280, 0.292, 0.283],\n    [1.32, 0.365, 0.367, 0.365],\n    [1.66, 0.441, 0.443, 0.444]\n    ]\n\n# remove the first row\ntable = table[1:]\n\nprotein, ext1, ext2, ext3 = zip(*table)\n\n# create a single column for `ext` or concatenate each `ext`\n# extend (`* 3`) the `protein` column to match the `ext` column.\nextinction = ext1 + ext2 + ext3\nprotein = protein * 3\n\n# create four tuples for each column\ntable = zip(protein, extinction)\n\nfor prot, ext in table:\n    print prot, ext  Output:     protein  ext      0.16  0.038    0.33  0.089    0.66  0.184    1.0  0.28    1.32  0.365    1.66  0.441    0.16  0.044    0.33  0.095    0.66  0.191    1.0  0.292    1.32  0.367    1.66  0.443    0.16  0.04    0.33  0.091    0.66  0.191    1.0  0.283    1.32  0.365    1.66  0.444     Create a table; lists in a list   Empty 1.   table = [[0] * 3 for x in range(3)]   Empty 2.   table = []\nfor i in range(3):\n    table.append([0] * 3)  Encode a 2D list; lists in a list  tabular, table, two dimensions  table = [\n    [ 0,  1,  2,  3],\n    [10, 11, 12, 13],\n    [20, 21, 22, 23]\n    ]  Encode a list of nested tuples; tuples in a list  table = [\n    ( 0,  1,  2,  3),\n    (10, 11, 12, 13),\n    (20, 21, 22, 23)\n    ]  Extract, access rows and cells from a 2D table  tabular, table, two dimensions   table[1] ; extract the 2nd row.  table[1][2] ; extract a single cell (2nd row, 3rd column).  table[1:]  or  table.pop(0) ; slice the 1st row, keep the remaining.  table.pop(2) ; delete the 3rd row.  table[:2] ; slice the 3rd column, keep the remaining.  table[:2] + table[3:] ; slice the 3rd column and 4th row, keep the remaining.  table.insert(2, [0.55, 0.12, 0.12, 0.14]) ; insert a new row in 3rd position  table.append([0.55, 0.12, 0.12, 0.14]) ; insert a new row at the end.   Looping to access each row  for row in table:\n    print row  Looping to access each cell  for row in table:\n    for cell in row:\n        print cell  Extract, access columns from a 2D table  tabular, table, two dimensions  protein = []\n\n# access the 1st, 2nd... column (separate the columns)\nfor row in table:\n    protein.append(row[0])  # access the 4th column\ncolumns = zip(*table)\nfourth = column[3]   protein, ex1. ext2, ext3 = zip(*table) ; access many columns; now each column is in a separate tuple.   Flip a table 90 degrees  convert column to row, row to column   Column becomes rows. Easier to extract or insert rows and cells.   data = [\n    [ 0,  1,  2,  3],\n    [10, 11, 12, 13],\n    [20, 21, 22, 23]\n]\n\ncolumns = zip(*data)\nprint columns  Output:  [\n(0, 10, 20),\n(1, 11, 21),\n(2, 12, 22),\n(3, 13, 23)\n]   But rows are now immutable tuples!  You cannot manipulate individual cells.  Convert the rows to lists again in order to extract a cell.   table[1] = list(table[1])\ntable[1][2]  Insert, access or extract columns from a 2D table  tabular, table, two dimensions  table = zip(*table)\ntable.append(['ext4', 0, 0, 0, 0, 0, 0])\ntable = zip(*table)\n\ntable = zip(*table)\ntable.pop(1)\ntable = zip(*table)\n\ntable = zip(*table)\ntable  The  zip()  function   zip() ; iterate though lists, tuples, and strings.    zip([1, 2, 3], [4, 5, 6])\n[\n(1, 4),\n(2, 5),\n(3, 6)\n]   The asterik tells the function to use all the arguments.   zip(*table)\n\n# vs\n\nzip(table[0], table[1], table[2], table[3])  Multi-dimentional tables  tabular, table, two dimensions, three dimensions, 2D, 3D, lists in list  cube = [[[0, 1], [2, 3]], [[4, 5], [6, 7]]]   Warning: more dimensions means more nested data.  It slows down the calculations!!!   Prefer Numpy, Pandas, parallel computing.  Avoid going over 2D!   Create a table; dictionaries in a table, in a list  table = [\n   {'protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040},\n   {'protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091},\n   {'protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191},\n   {'protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283},\n   {'protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365},\n   {'protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444}\n   ]  Extract, access cells in a table  # second row, cell 'ext2' instead of a number\ncell = table[1]['ext2']\n\nprint table\nprint cell  Create a table; dictionaries in a dictionary  table = {\n   'row1': {'protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040},\n   'row2': {'protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091},\n   'row3': {'protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191},\n   'row4': {'protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283},\n   'row5': {'protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365},\n   'row6': {'protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444}\n   }  Extract, access cells in a table, in a dictionary  More readable this way; second row, cell  'ext2' :  cell = table['row1']['ext2']\n\nprint table\nprint cell  Create a table: lists in a dictionaries  Data for each row are in a simpler format.  table = {\n   '1': ['protein': 0.16, 'ext1': 0.038, 'ext2': 0.044, 'ext3': 0.040\u00b8],\n   '2': ['protein': 0.33, 'ext1': 0.089, 'ext2': 0.095, 'ext3': 0.091],\n   '3': ['protein': 0.66, 'ext1': 0.184, 'ext2': 0.191, 'ext3': 0.191],\n   '4': ['protein': 1.00, 'ext1': 0.280, 'ext2': 0.292, 'ext3': 0.283],\n   '5': ['protein': 1.32, 'ext1': 0.365, 'ext2': 0.367, 'ext3': 0.365],\n   '6': ['protein': 1.66, 'ext1': 0.441, 'ext2': 0.443, 'ext3': 0.444]\n   }  Create a table; formats   Lists in a list:   Easy to access/add/delete rows, to sort.   Difficult to deal with columns and a specific cell.    Dictionaries in a dictionary:  Easy to access column entries.  Easy to read (find data).  Unsorted and impossible to sort.    Mixed lists and dictionaries:  Use the advantage of both types and build the table accordingly (l, d or d, l for rows, columns) depending on the operations (see above).  The code is harder to read or less straightforward.     Convert a table from a nested list to a nested dictionary  table = [\n    ['protein', 'ext'],\n    [0.16, 0.038],\n    [0.33, 0.089],\n    [0.66, 0.184],\n    [1.00, 0.280],\n    [1.32, 0.365],\n    [1.66, 0.441]\n]\n\n# convert nested list to nested dict\nnested_dict = {}\nn = 0\nkey = table[0]\nfor row in table[1:]: # for row in table[0:]  includes the header\n    n += 1\n    entry = {key[0]: row[0], key[1]: row[1]}\n    nested_dict['row'+str(n)] = entry\n\nprint nested_dict  Output:  {\n'row1': {'protein': 0.16, 'ext': 0.038},\n'row2': {'protein': 0.33, 'ext': 0.089},\n'row3': {'protein': 0.66, 'ext': 0.184},\n'row4': {'protein': 1.0, 'ext': 0.28},\n'row5': {'protein': 1.32, 'ext': 0.365},\n'row6': {'protein': 1.66, 'ext': 0.441}\n}  and convert a nested dictionary to a table  # convert nested dict back to nested list\nnested_list = []\nfor entry in nested_dict:\n    key = nested_dict[entry]\n    nested_list.append([key['protein'], key['ext']])\n\nprint nested_list  Output:  [\n[0.16, 0.038],\n[0.33, 0.089],\n[0.66, 0.184],\n[1.0, 0.28],\n[1.32, 0.365],\n[1.66, 0.441]\n]", 
            "title": "Chapter 7, Managing Tabular Data"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-8-sorting-data", 
            "text": "Sort a table by one column and write it to a file  add, index, list   sorted() .  itemgetter() ; turn elements of each column into a sortable key.   from operator import itemgetter\n\n# read table to a nested list of floats\ntable = []\nfor line in open( random_distribution.tsv ):\n    columns = line.split()\n    columns = [float(x) for x in columns]\n    table.append(columns)\n\n# sort the table by second column\ncolumn = 1\ntable_sorted = sorted(table, key = itemgetter(column))\n\n# format table as strings\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    print  \\t .join(row)  Output (first 3 lines only):  6153.0  58.0    0.00942629611572    40.0    0.00650089387291    260.0   0.0422558101739\n6101.0  64.0    0.0104900835929 41.0    0.00672020980167    299.0   0.0490083592854\n6101.0  68.0    0.0111457138174 39.0    0.0063923946894 274.0   0.0449106703819  List are good for sorting   ASCII sort order chart (top to bottom, left to right):                   space  0  :  A  Q  [  a  q  }    !  1  ;  B  R  \\  b  r  tick     2   C  S  ]  c  s  {    #  3  =  D  T  ^  d  t     $  4   E  U  _  e  u  DEL    %  5  ?  F  V  `  f  v      6  @  G  W   g  w      7   H  X   h  x     (  8   I  Y   i  y     )  9   J  Z   j  z     *    K    k      +    L    l      ,    M    m      -    N    n      .    O    o      /    P    p       Difference between  sort()  and  sorted()   sort() ; apply to lists  sorted() ; apply to lists, tuples, and dictionary keys.  reverse()  sort the other way around.  sorted(data, reverse = True) ; idem.  operator.itemgetter(i)(T)  returns the  i th element of  T , a string, a list, a tuple, or a dictionary.    from operator import itemgetter  data = ['A', 'T', 'C']  itemgetter(1)(data)\n'A'  itemgetter(1, -1)(data)\n('A', 'T')  new_table = sorted(table, key = itemgetter(1, 3))  Sort entries in a tabular output file in reverse order   Notice the  table_sorted = sorted(table, key = itemgetter(2), reverse=True) .   from operator import itemgetter\n\ninput_file = open( BlastOut.csv )\noutput_file = open( BlastOutSorted.csv , w )\n\n# read BLAST output table\ntable = []\nfor line in input_file:\n    col = line.split(',')\n    col[2] = float(col[2])\n    table.append(col)\n\ntable_sorted = sorted(table, key = itemgetter(2), reverse=True)\n\n# write sorted table to an output file\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write( \\t .join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()  Sort a tuple by converting it to a list  # sort a tuple\ndata = (1, 4, 5, 3, 8, 9, 2, 6, 8, 9, 30)\nlist_data = list(data)\nlist_data.sort()\nnew_tup = tuple(data)\nprint new_tup\n\n# sort a tuple using the sorted() built-in function\nnew_tup = tuple(sorted(data))\nprint new_tup  Both outputs:  (1, 4, 5, 3, 8, 9, 2, 6, 8, 9, 30)\n(1, 2, 3, 4, 5, 6, 8, 8, 9, 9, 30)  Convert a dictionary to a sorted list  data = {1: 'a', 2: 'b', 4: 'd', 3: 'c',\n        5: 't', 6: 'm', 36: 'z'}\n\n# create a list of keys and go through them one by one\nkeys = list(data)\nkeys.sort()\nfor key in keys:\n    print key, data[key]\n\n\n# sort keys using the sorted() built-in function\nfor key in sorted(data):\n    print key, data[key]  Output:  1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z\n1  a\n2  b\n3  c\n4  d\n5  t\n6  m\n36 z  Sort strings by their length  lamda, function   Use a  lambda  function and replace  itemgetter() .   data = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda x: len(x))\nprint new_data  data = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda col: col[1]) # alternative\nprint new_data  Same output:  ['ASDF', 'SDFSD', 'GSGDGG', 'SDFSADGSAG']  Sort a table by seven columns in one operation  from operator import itemgetter\n\n# read table\nin_file = open( random_distribution.tsv )\ntable = []\nfor line in in_file:\n    columns = line.split()\n    columns = [float(x) for x in columns]\n    table.append(columns)\n\ntable_sorted = sorted(table, key=itemgetter(0, 1, 2, 3, 4, 5, 6))\nprint table_sorted  Output (first 3 lines only):  [\n[6041.0, 87.0, 0.0144015891409, 44.0, 0.00728356232412, 213.0, 0.035259063069],\n[6042.0, 121.0, 0.0200264812976, 35.0, 0.00579278384641, 262.0, 0.0433631247931],\n[6044.0, 113.0, 0.0186962276638, 67.0, 0.0110853739246, 266.0, 0.0440105890139],\n...\n]  Sort entries in a tabular BLAST output file in reverse order  from operator import itemgetter\n\ninput_file = open( BlastOut.csv )\noutput_file = open( BlastOutSorted.csv , w )\n\n# read BLAST output table\ntable = []\nfor line in input_file:\n    col = line.split(',')\n    col[2] = float(col[2])\n    table.append(col)\n\ntable_sorted = sorted(table, key=itemgetter(2), reverse=True)\n\n# write sorted table to an output file\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write( \\t .join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()  Sort entries in a comma separated file by two columns  from operator import itemgetter\n\ninput_file = open( PDBhaemoglobinReport.csv )\noutput_file = open( PDBhaemoglobinSorted.csv , w )\n\ntable = []\nheader = input_file.readline()\nfor line in input_file:\n    col = line.split(',')\n    col[3] = float(col[3][1:-1])\n    col[4] = int(col[4][1:-2])\n    table.append(col)\n\ntable_sorted = sorted(table, key=itemgetter(3, 4))\n\noutput_file.write(header + '\\t')\nfor row in table_sorted:\n    row = [str(x) for x in row]\n    output_file.write( \\t .join(row) + '\\n')\n\ninput_file.close()\noutput_file.close()", 
            "title": "Chapter 8, Sorting Data"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-9-pattern-matching-and-text-mining", 
            "text": "Find a sequence pattern in a sequence  regex, regular expression   re  package.   import re\n\n# define a string with occurrences of regex:\nseq = 'VSVLTMFRYAGWLDRLYMLVGTQLAAIIHGVALPLMMLI'\n\n# compile a pattern and assign it to a variable\npattern = re.compile('[ST]Q')\n\n# search for the pattern in the string\nmatch = pattern.search(seq)\nif match:\n    # print the first match along the sequence with the group() method\n    # 4 characters before and after the pattern\n    print '%10s' %(seq[match.start() - 4:match.end() + 4])\n    print '%6s' % match.group()\nelse:\n    print  no match   Output:  MLVGTQLAAI\n    TQ  re  methods   group() ; return the matching subgroup.  span() ; return a tuple containing the starting and ending position of the match.  start() ; return the starting position.  end() ; return the ending position.  search() ; find the  first  occurence within the string.  match() ; attempt to match a pattern to a string. If the pattern is within the string, it will not match it. It will find  S  in  ST , but not in  TST .   findall() ; return a list containing  all  the matching substrings.  finditer() ; find  all  the match objects corresponding to the regex matches and returns them in the form of an iterator.   import re\n\npattern = re.compile('R.[ST][^P]')\nseq = 'RQSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'\n\n# findall returns a list of all matches\nmatches = pattern.findall(seq)\nprint matches\n\n# finditer returns an iterator of match objects\nmatch_iter = pattern.finditer(seq)\nfor match in match_iter:\n    print match.group(), match.span(), match.start(), match.end()  Ouput:  ['RQSA', 'RRSL', 'RPSK']\nRQSA (0, 4) 0 4\nRRSL (18, 22) 18 22\nRPSK (40, 44) 40 44  More  re  methods   Divide regex in subgroups, each matching a different component of interest.  (.) ; delimite a group.  R(.)[ST][^P] ; stand for  R ,  any character , pattern  ST , any character different from  P .  The  any character  is also a subgroup.  What ever is found between  R  and  [ST][^P]  is a subgroup.    R(.{0,3})[ST][^P] ; add a `{0,3}.  This qualifier or quantifiers means that at least 0 and at most 3 repetitions of  R .    group() ; always return the complete matching substring (0 for no subgroup).  group(#) ; return subgroups numbered from left to right in increasing order (subgroup #).   Find multiple patterns in a search string  import re\n\nseq = 'QSAMGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQRPSKP'\n\npattern1 = re.compile('R(.)[ST][^P]')\nmatch1 = pattern1.search(seq)\nprint match1.group()\nprint match1.group(1)\n\npattern2 = re.compile('R(.{0,3})[ST][^P]')\nmatch2 = pattern2.search(seq)\nprint match2.group()\nprint match2.group(1)  Output:  RRSL\nR\nRRRSL\nRR  Another example with two subgroups  import re\n\nseq = 'zzabcdzz'\n\npattern = re.compile('(a(b)c)d')\nmatch = pattern.search(seq)\nprint match.group(0)\nprint match.group(1)\nprint match.group(2)\nprint match.groups()   groups() ; return a tuple with the substrings corresponding to all subgroups.   Output:  abcd\nabc\nb\n('abc', 'b')  Assign  names to subgroup:  ?P w1  and  ?P w2  import re\n\nseq = 'zzabcdzz'\n\npattern = re.compile('(?P w1 a(?P w2 b)c)d')\nmatch = pattern.search(seq)\nprint match.group(0)\nprint match.group('w1')\nprint match.group('w2')  Ouput:  abcd\nabc\nb  More  re  methods   splits(s) ; split the string  s  at the matches of a regex.  sub(r, s, [c]) ; return a new string  s  where nonoverlapping occurrences of a given pattern in the string are all replaced with the value of  r .  c , an optional number, stands for the maximum numbers of occurences.  subn(r, s, [c]) ; do what  sub()  does, but returns a tuple of two elements; the first element is the new string (as with  sub(r, s, [c]) ) and the second is the number of replacements.   Split text and replace separators with a pattern  import re\n\nseparator = re.compile('\\|')\n\n# split\nannotation = 'ATOM:CA|RES:ALA|CHAIN:B|NUMRES:166'\ncolumns = separator.split(annotation)\nprint columns\n\n# replace\nnew_annotation = separator.sub('@', annotation)\nprint  replace all |: \nprint new_annotation\n\nnew_annotation2 = separator.sub('@', annotation, 2)\nprint  replace 2 |: \nprint new_annotation2\n\nnew_annotation3 = separator.subn('@', annotation)\nprint  replace all |: \nprint new_annotation3\n\nnew_annotation4 = separator.subn('@', annotation, 2)\nprint  replace 2 |: \nprint new_annotation4  Output:  ['ATOM:CA', 'RES:ALA', 'CHAIN:B', 'NUMRES:166']\nreplace all |:\nATOM:CA@RES:ALA@CHAIN:B@NUMRES:166\nreplace 2 |:\nATOM:CA@RES:ALA@CHAIN:B|NUMRES:166\nreplace all |:\n('ATOM:CA@RES:ALA@CHAIN:B@NUMRES:166', 3)\nreplace 2 |:\n('ATOM:CA@RES:ALA@CHAIN:B|NUMRES:166', 2)  Find transcription factor binding sites  import re\n\ngenome_seq = open('genome.txt').read()\n\n# read transcription factor binding site patterns\nsites = []\nfor line in open('TFBS.txt'):\n    fields = line.split()\n    tf = fields[0]\n    site = fields[1]\n    sites.append((tf, site))\n\n# match all TF's to the genome and print matches\nfor tf, site in sites:\n    tfbs_regexp = re.compile(site)\n    all_matches = tfbs_regexp.findall(genome_seq)\n    matches = tfbs_regexp.finditer(genome_seq)\n    if all_matches:\n        print tf, ':'\n        for tfbs in matches:\n            print '\\t', tfbs.group(), tfbs.start(), tfbs.end()  Parse abstracts from PubMed HTML pages   The script opens the HTML webpage and parses it in order to selectively fetch some parts of it.  Extract the title and the abstract text.  The title of the paper is enclosed between  h1  and  /h1 .  Whereas the text of the abstract is enclosed between  h3 Abstract /h3 div class = \"\" p  and  /p .  The paper.   import urllib2\nimport re\n\npmid = '18235848'\nurl = 'http://www.ncbi.nlm.nih.gov/pubmed?term=%s' % pmid\nhandler = urllib2.urlopen(url)\nhtml = handler.read()\n\ntitle_regexp = re.compile(' h1 .{5,400} /h1 ')\ntitle_text = title_regexp.search(html)\n\nabstract_regexp = re.compile(' AbstractText .{20,3000} /AbstractText ')\nabstract_text = abstract_regexp.search(html)\n\nprint 'TITLE:', title_text.group() \nprint 'ABSTRACT:', abstract_text.group()  Output:  TITLE:  h1 Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade. /h1 \nABSTRACT:  AbstractText Schistosomiasis is a tropical disease associated with high morbidity and mortality, currently affecting over 200 million people worldwide. Praziquantel is the only drug used to treat the disease, and with its increased use the probability of developing drug resistance has grown significantly. The Schistosoma parasites can survive for up to decades in the human host due in part to a unique set of antioxidant enzymes that continuously degrade the reactive oxygen species produced by the host's innate immune response. Two principal components of this defense system have been recently identified in S. mansoni as thioredoxin/glutathione reductase (TGR) and peroxiredoxin (Prx) and as such these enzymes present attractive new targets for anti-schistosomiasis drug development. Inhibition of TGR/Prx activity was screened in a dual-enzyme format with reducing equivalents being transferred from NADPH to glutathione via a TGR-catalyzed reaction and then to hydrogen peroxide via a Prx-catalyzed step. A fully automated quantitative high-throughput (qHTS) experiment was performed against a collection of 71,028 compounds tested as 7- to 15-point concentration series at 5 microL reaction volume in 1536-well plate format. In order to generate a robust data set and to minimize the effect of compound autofluorescence, apparent reaction rates derived from a kinetic read were utilized instead of end-point measurements. Actives identified from the screen, along with previously untested analogues, were subjected to confirmatory experiments using the screening assay and subsequently against the individual targets in secondary assays. Several novel active series were identified which inhibited TGR at a range of potencies, with IC(50)s ranging from micromolar to the assay response limit ( approximately 25 nM). This is, to our knowledge, the first report of a large-scale HTS to identify lead compounds for a helminthic disease, and provides a paradigm that can be used to jump-start development of novel therapeutics for other neglected tropical diseases. /AbstractText   Search for keywords in a series of PubMed abstracts   This example can be applied to perform very simple text mining and can be compared to the  find  tool in Microsoft Word.  It might stop on the first occurence.   import urllib2\nimport re\n\n# word to be searched\nword_regexp = re.compile('schistosoma')\n\n# list of PMIDs where we want to search the word\npmids = ['18235848', '22607149', '22405002', '21630672']\nfor pmid in pmids:\n    url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid\n    handler = urllib2.urlopen(url)\n    html = handler.read()\n    title_regexp = re.compile(' h1 .{5,400} /h1 ')\n    title = title_regexp.search(html)\n    title = title.group() \n    abstract_regexp = re.compile(' AbstractText .{20,3000} /AbstractText ')\n    abstract = abstract_regexp.search(html)\n    abstract = abstract.group()\n    word = word_regexp.search(abstract, re.IGNORECASE)\n    if word:\n        # display title and where the keyword was found\n        print title\n        print word.group(), word.start(), word.end()   Circumvent the problem with the  finditer()  method.   import urllib2\nimport re\n\n# word to be searched\nword_regexp = re.compile('schistosoma')\n\n# list of PMIDs where we want to search the word\npmids = ['18235848', '22607149', '22405002', '21630672']\nfor pmid in pmids:\n    url = 'http://www.ncbi.nlm.nih.gov/pubmed?term=' + pmid\n    handler = urllib2.urlopen(url)\n    html = handler.read()\n    title_regexp = re.compile(' h1 .{5,400} /h1 ')\n    title = title_regexp.search(html)\n    title = title.group() \n    abstract_regexp = re.compile(' AbstractText .{20,3000} /AbstractText ')\n    abstract = abstract_regexp.search(html)\n    abstract = abstract.group()\n    words = word_regexp.finditer(abstract)\n    if words:\n        # display title and where the keyword was found\n        print title\n        for word in words:\n            print word.group(), word.start(), word.end()  Output:  h1 Quantitative high-throughput screen identifies inhibitors of the Schistosoma mansoni redox cascade. /h1  h1 The redox biology of schistosome parasites and applications for drug development. /h1  h1 Moonlighting by different stressors: crystal structure of the chaperone species of a 2-Cys peroxiredoxin. /h1  h1 Investigations of the catalytic mechanism of thioredoxin glutathione reductase from Schistosoma mansoni. /h1   More  re  methods   findall() ; look for all (non-overlapping) occurrences of pattern in string; return a list of matches.  finditer() ; same as above except returns an iterator instead of a list; for each match, the iterator returns a match object; it is adapted for loops!  | ;   OR .  $ ; indicate that a match exists in the string only if the pattern is in the last position of the string.  ^ ; indicate that a match exists in the string only if the pattern is in the first position of the string.   Python Regex, Characters and Metacharaters", 
            "title": "Chapter 9, Pattern Matching and Text Mining"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#part-3-modular-programming", 
            "text": "", 
            "title": "Part 3, Modular Programming"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-10-divide-a-program-into-functions", 
            "text": "Built-in functions  length, total, sum, range   len() .  sum() .  range(n, m, step) ; from n to m-1, n = 0 by default.  xrange(n, m, step) ; better suited for big numbers.   Define functions  docstring, docstrings   The documentation is retrieved with the  __doc__  attribute: type  addition.__doc__ .   def addition(arg1, arg2):\n    '''\n    documentation: calculates the sum of two numbers\n    '''\n    result = arg1 + arg2\n    return result\n\nprint addition(1,1)  Lambda functions   Small anonymous functions; they are not declared using  def .  They do not contain return statement.  They can be defined in an argument in a function (useful).  There are nameless.   def f(x):\n    return x ** 2\n\nprint f(8)  vs  g = lambda x: x ** 2\n\nprint g(8)  or  (lambda x: x ** 2)(8)   Use a  lambda  function as an argument of a built-in function:   data = ['ASDF', 'SDFSADGSAG', 'SDFSD', 'GSGDGG']\n\nnew_data = sorted(data, key = lambda x: len(x))\nprint new_data  Output:  ['ASDF', 'SDFSD', 'GSGDGG', 'SDFSADGSAG']  Function Arguments   required arguments.  keyword arguments.  default arguments.  variable-length arguments.   1. Required Arguments  def print_funct(num, seq):\n    print num, seq\n\nprint_funct(10,  ABC )  Output:  10 ABC  2. Keyword Arguments  def print_funct(num, seq):\n    print num, seq\n\nprint_funct(seq =  ABC , num = 10)  Output:  10 ABC  3. Default Arguments  sequence   The argument is given by default; but can be overwritten!   def print_funct(num, seq =  A ):\n    print num, seq\n\nprint_funct(10,  ABC )\nprint_funct(10)  Output:  10 ABC\n10 A  4. Variable-Length Arguments  argument, list, tuple, dictionary   Flexibility of providing any tuple.   def print_args(*args):\n    print args\n\nprint_args(1, 2, 3, 4, 5)\nprint_args('Hi')\nprint_args(100, 200,  ABC )  Output:  (1, 2, 3, 4, 5)\n('Hi')\n(100, 200, 'ABC')   Provide both the keys and values for a returned dictionary.   def print_args2(**args):\n    print args\n\nprint_args2(num = 100, num2 = 200, seq =  ABC )  Output:  {'num': 100, 'seq': 'ABC, 'num2': 200}  Convert a string into a tuple or vice-versa   struct  package.  In the format,  s  stands for string,  3s  stands for a three-character string.   import struct\n\n# pack() method; creates a string\nformat = '2s1s1s1s1s'\ngroup = struct.pack(format, '10', '2', '3', '4', '5')\nprint group\n\n# unpack() method; parses the string to a tuple\nformat = '1s2s1s1s'\nline = '12345'\ncol = struct.unpack(format, line)\nprint col\n\n# calcsize() returns the number of characters\n# in a given format string\nformat = '30s30s20s1s'\nprint struct.calcsize(format)  Output:  102345\n('1', '23', '4', '5')\n81   Then, convert the tuple to a list if needed.   Function to calculate distance between two coordinates  power   math  package.  pow(x, y)  replaces  x ** y .    distance  package; geometric calculations.  calc-dist() .     from math import sqrt\n\ndef calc_dist(p1, p2):\n    '''returns the pythagorian distance between two 3D points'''\n    dx = p1[0] - p2[0]\n    dy = p1[1] - p2[1]\n    dz = p1[2] - p2[2]\n    distsq = pow(dx, 2) + pow(dy, 2) + pow(dz, 2)\n    distance = sqrt(distsq)\n    return distance\n\nprint calc_dist([3.0, 3.0, 3.0], [9.0, 9.0, 9.0])  Output:  10.3923048454", 
            "title": "Chapter 10, Divide a Program into Functions"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-11-managing-complexity-with-classes", 
            "text": "Classes   Define a Class:  class Protein .  Add docstrings.  The constructor  __init__()  is a special function that defines what kinds of data your class should contain and enables the creation of instances. Add a docstring.  One class can have many instances.  lys = Protein('lysozyme')  is an instance of  class Protein .  Create a class function; a class function works like a method.   class Protein:\n    '''Class storing protein names'''\n\n    def __init__(self, name):\n        '''Sets the name of a protein'''\n        self.name = name\n\n    def write(self):\n        '''Writes protein name to the screen.'''\n        print 'I am ' + self.name\n\nlys = Protein('lysozyme')\nmyo = Protein('myoglobin')\n\nprint  Docstrings: \nprint Protein.__doc__\nprint Protein.__init__.__doc__\nprint Protein.write.__doc__\n\nprint  \n\nprint lys.name\nprint myo.name\n\nlys.write() # a class function works like a method\nmyo.write()  Output:  Docstrings:\nClass storing protein names\nSets the name of a protein\nWrites protein name to the screen.\n\nlysozyme\nmyoglobin\nI am lysozyme\nI am myoglobin  Printing a object created from a class   Printing an object from a class is not very informative.   class Pea:\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\nclass PeaStrain:\n\n    def __init__(self, peas):\n        self.peas = peas\n\nyellow = Pea('GG')\ngreen = Pea('gg')\nstrain = PeaStrain([yellow, green])\n\nprint Pea\nprint PeaStrain\nprint Pea.__init__\nprint PeaStrain.__init__\n\nprint yellow\nprint green\nprint strain  Output:  __main__.Pea\n__main__.PeaStrain unbound method Pea.__init__  unbound method PeaStrain.__init__  __main__.Pea instance at 0x0000000001DC6748  __main__.Pea instance at 0x0000000001DC6748  __main__.Pea instance at 0x000000000216BE08  __main__.PeaStrain instance at 0x000000000216BE48    __repr__  fixes this problem. The  __repr__  method takes no parameters except self.   class Pea:\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\n    def __repr__(self):\n        return 'genotype: [%s]' % (self.genotype)\n\nclass PeaStrain:\n\n    def __init__(self, peas):\n        self.peas = peas\n\n    def __repr__(self):\n        return 'strain with %i peas' % (len(self.peas))\n\nyellow = Pea('GG')\ngreen = Pea('gg')\nstrain = PeaStrain([yellow, green])\n\nprint Pea\nprint PeaStrain\nprint Pea.__init__\nprint PeaStrain.__init__\n\nprint yellow\nprint repr(yellow)\nprint repr(green)\nprint repr(strain)  New output:  __main__.Pea\n__main__.PeaStrain unbound method Pea.__init__  unbound method PeaStrain.__init__ \ngenotype: [GG]\ngenotype: [GG]\ngenotype: [gg]\nstrain with 2 peas    No difference between  print yellow  and  print repr(yellow) .    Objects  predefined class attributes:   __doc__ : the docstring.  __dict__ : a list of attributes.  __name__ : the name of the object.  __bases__ : the object inherits from what object. For example, above, the PeaStrain class inherits from the Pea class. Classes (subclasses) can inherit from other classes \nand extend their functionality.  __module__ : the name of the module in which this class was defined.  __main__  means the object is in the current module.      A python script can be imported just like a package:   import Protein .  from Protein import write .  import math .  from math import sqrt .    Synonyms: packages, library, module, script, etc.   class Pea:\n    '''docstring 1'''\n\n    def __init__(self, genotype):\n        self.genotype = genotype\n\n    def __repr__(self):\n        return 'genotype: [%s]' % (self.genotype)\n\nyellow = Pea('GG')\n\nprint yellow\nprint Pea.__doc__\nprint Pea.__dict__\nprint Pea.__name__\nprint Pea.__bases__\nprint Pea.__module__\n\nprint  \n\nclass Peaclone(Pea):\n    '''docstring 2'''\n\nblue = Peaclone('AA')\n\nprint blue\nprint Peaclone.__doc__\nprint Peaclone.__dict__\nprint Peaclone.__name__\nprint Peaclone.__bases__\nprint Peaclone.__module__  Output:  genotype: [GG]\ndocstring 1\n{'__module__': '__main__', '__doc__': 'docstring 1', '__init__':  function __init__ at 0x000000000229FC18 , '__repr__':  function __repr__ at 0x000000000229FC88 }\nPea\n()\n__main__\n\ngenotype: [AA]\ndocstring 2\n{'__module__': '__main__', '__doc__': 'docstring 2'}\nPeaclone\n( class __main__.Pea at 0x0000000001D3C828 ,)\n__main__   More attributes:  __del__ .  __getattr__ .  __setattr__ .  __delattr__ .", 
            "title": "Chapter 11 Managing Complexity with Classes"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-12-debugging", 
            "text": "bug   Kinds of errors:  Logical errors.  Syntax errors.  Runtime errors.     IDE (Eric, PyCharm, etc.) automate debugging.  1. Logical (semantic) errors   Results are wrong because the program does something different from what you had in mind.   2. Syntax errors   Wrong symbol, mispelling, wrong position in the code, etc..   def evaluate_data(data, lower = 100, upper = 300):\n     Analyze a two-column table. Counts data points in three bins. \n\n    smaller = 0\n    between = 0\n    bigger  = 0\n\n    for length in data:\n        if length   lower:\n            smaller = smaller + 1\n        elif lower   length   upper:\n            between = between + 1\n        elif length   upper:\n            bigger = 1\n    return smaller, between, bigger\n\ndef read_data(filename):\n     Reads neuron lengths from a text file. \n\n    primary, secondry = [], []\n\n    for line in open(filename):\n        category, length = line.split( \\t )\n        length = float(length)\n        if category ==  Primary \n            primary.append(length)\n        elif category ==  Secondary :\n            secondary.append(length)\n    return primary, secondary\n\ndef write_output(filename, count_pri, count_sec):\n     Writes counted values to a file. \n\n    output = open(filename, w )\n    output.write( category       100  100-300    300\\n )\n    output.write( Primary  :  %5i   %5i   %5i\\n  % count_pri)\n    output.write( Secondary:  %5i   %5i   %5i\\n  % count_sec)\n    output.close()\n\nprimary, secondary = read_data('neuron_data.xls')\ncount_pri = evaluate_data(primary)\ncount_sec = evaluate_data(secondary)\nwrite_output_file('results.txt' , count_pri,count_sec)  Bug 1  if category ==  Primary    Cause:  SyntaxError: invalid syntax .  Fix:   if category ==  Primary :   Other common  SyntaxErrors :  EOL or End Of Line; an open quote somewhere without a matching closing quote.  TokenError ; an open parenthesis, but not a matching closing parenthesis.  etc.     Bug 2  write_output_file('results.txt' , count_pri,count_sec)   Cause:  NameError: name 'write_output_file' is not defined .  Fix:   file = open('results.txt' , 'w')\nfile.write(str(count_pri))\nfile.write('\\n')\nfile.write(str(count_sec))\nfile.close()  3. Runtime Error  IOError  primary, secondary = read_data('neuron_data.xls')   Cause:  IOError: [Errno21] No such file or directory: 'neuron_data.xls'  Fix: the file extention is .txt.  Other common bugs and causes:  Mispelled files, directory name.  Wrong website URL.  User without the permission or access.  The file is already opened.  Problem with the Internet connection.  Whitespace, uppercase, lowercase letters.  File in a different directory.  Expected date format.  etc.     NameError  primary, secondry = [], []\n...\n...\nelif category ==  Secondary :   Cause:  NameError: 'secondary' is not defined . The  name  was misspelled when called.  Fix: add the line  print dir()  before the errors occurs. It shows the list of variables that are known. In the above case, only  secondry  exits while  secondary  is called. Choose one.  Other common bugs and causes:  Unknown object name:  a name was not imported ( import * ).  a name was not initialized (as in  counter = 0  for  counter += 1 ).       IndexError   Cause and fix: when  print data[3]  looks into  data = [1, 2, 3] , the list index is out of range.   KeyError  spam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'}\nprint('The name of my pet zebra is ' + spam['zebra'])   Cause and fix: the key does not exist!   ImportError   Causes and fixes:  The imported module name is mispelled.  The imported module is located in a subdirectory without an  __init__.py  file.  Try adding import sys and print sys.path; you need to add the directory to the PYTHONPATH variable or to append it to the sys.path.  The imported module has a duplicate name (two functions with the same name; try working with classes to avoir that).     ValueError   Cause and fix: when an object is loaded with a wrong type to perform another operation; variable  range_a  should be a number for the loop  for a in range(range_a): , but a string is given instead.  Other common bugs and causes:  IndentationError: unexpected indent ,  IndentationError: unindent does not match any outer indentation level , and  IndentationError: expected an indented block .   TypeError   Cause and fix: an object does not support item assignment.   spam = 'I have a pet cat.'\nspam[13] = 'r'   Cause:  cannot convert implicitly an object.   numEggs = 12\nprint('I have ' + numEggs + ' eggs.')   Fix:   numEggs = 12\nprint('I have ' + str(numEggs) + ' eggs.')   Cause:  an object is misinterpreted (for another object).   spam = ['cat', 'dog', 'mouse']\nfor i in range(spam):\n    print(spam[i])   Fix:  for i in spam: .   AttributeError   Cause and fix: apply the right method.   spam = 'THIS IS IN LOWERCASE.'\nspam = spam.lowerr()  UnboundLocalError   Cause and fix: a variable is referenced before assignment.   Countermeasures to prevent errors   Break down the code in parts; print to a file using  python code.py   output.txt .  Compare the input and output (print the input data, print the output data, create control points).  Add lots of  print  statements within the code as control points,  Use descriptive and explicit object names ( sequence_file  is better than  s_file ).  Start function with verbs ( read_sequence_file  is better than  seq_file ).  Add comments.  Avoid  import * , but rather  from math import pi .  Follow PEP8 and PEP20!  pylint  and  flake8  packages.  IDE (Eric, PyCharm, Spyder, etc.) automate debugging and easily execute  pylint  and  flake8 .   A note on  raw_input()  and  input()  python2, python3, py2, py3   In Python 2,  raw_input()  takes exactly what the user typed and passes it back as a string.  input()  takes the  raw_input()  and performs an  eval()  on it as well.  input()  expects a syntactically correct python statement where  raw_input()  does not.  The  eval()  function run the code within itself:    x = 1  eval('x + 1')\n2  eval('x')\n1   In Python 3,  raw_input()  is renamed to  input()  and the old  input()  is removed. If you want to use the old  input() , you can do  eval(input()) .   Countermeasures to prevent errors: the Python debugger or  pdb   pdb  package.   # on top of the code\nimport pdb\n\npdb.set_trace()   The code is executed line by line:  n  execute the next line.  s  execute the next line but does not descend into functions.  l  shows where in the code the program currently is.  c  continues execution normally.     Countermeasurea to prevent errors:  try, except  try:\n    a = float(raw_input( Insert a number: ))\n    print a\nexcept ValueError:\n    print  You haven't inserted a number. Please retry. \n    raise SystemExit   else  is optional and only executed if no exception was generated.   try:\n    filename = raw_input( Insert a filename: )\n    in_file = open(filename)\nexcept IOError:\n    print  The filename %s has not been found.  % filename\n    raise SystemExit\nelse:\n    for line in in_file:\n        print line\n        in_file.close()   Usually, exceptions are typos and wrong entries:  SyntaxError .  IOError .  NameError .  ValueError .    Rarely will we see:  IndexError .  KeyError .  ImportError .  TypeError .  AttributeError .  UnbounLocalError .", 
            "title": "Chapter 12 Debugging"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-13-using-external-modules-the-python-interface-to-r", 
            "text": "RPy2  package; bridge Python with R.   The R code:  p = pi\nx = c(1, 2, 3, 4, 5, 6)\ny = seq(1, 10)\nm = matrix(y, nrow = 5)\nn = matrix(y, ncol = 5)\nf = read.table('RandomDistribution.tsv', sep = '\\t')\nf_matrix = matrix(f, ncol = 7)\nmean_first_col = mean(f_mean[0])  The Python code:  import rpy2.reobjects as robjects\n\nr = robjects.r\n\npi = r.pi\nx = r.c(1, 2, 3, 4, 5, 6)\ny = r.seq(1, 10)\nm = r.matrix(y, nrow = 5)\nn = r.matrix(y, ncol = 5)\nf = r( read.table('RandomDistribution.tsv', sep = '\\t') )\nf_matrix = r.matrix(f, ncol = 7)\nmean_first_col = r.mean(f_mean[0])   Python is better suited to implement solutions by building GUIs or freezing the code.  Rpy2 is the best of both worlds:   R statistical analyses and data visualization.  Python computation power with SciPy/NumPy/Pandas.     Calculate a mean value from a table file  import rpy2.robjects as robjects\n\nr = robjects.r\ntable = r( read.table('RandomDistribution.tsv', sep = '\\t') )\nmatrix = r.matrix(table, ncol = 7)\nmean_first_col = r.mean(matrix[0])\nprint mean_first_col  Draw a histogram  import rpy2.robjects as ro\nfrom rpy2.robjects.packages import importr\n\nr = ro.r\ntable = r( read.table('RandomDistribution.tsv',sep = '\\t') )\ngrdevices = importr('grDevices')\ngrdevices.png(file =  Plot.png , width = 512, height = 512)\nr.plot(table[1], table[2], xlab =  x , ylab =  y )\ngrdevices.dev_off()\n\ngrdevices.png(file= Histogram.png , width = 512, height = 512)\nr.hist(table[4], xlab = 'x', main = 'Distribution of values')\ngrdevices.dev_off()  Calculate a z-score and a p-value  import rpy2.robjects as ro\n\nr = ro.r\ntable = r( read.table('RandomDistribution.tsv',sep = '\\t') )\nm = r.mean(table[2], trim = 0, na_rm = 'FALSE')\nsdev = r.sd(table[2], na_rm = 'FALSE')\nvalue = 0.01844\nzscore = (m[0] - value) / sdev[0]\nprint zscore\n\nx = r.abs(zscore)\npvalue = r.pnorm(-x[0])\nprint pvalue[0]  Create an interactive plot and histogram from data in a file  import rpy2.robjects as robjects\n\nr = robjects.r\ntable = r( read.table('RandomDistribution.tsv', sep = '\\t') )\nr.plot(table[1], table[2], xlab =  x , ylab =  y )\nr.hist(table[4], xlab = 'x', main = 'Distribution of values')  Create an interactive plot  import rpy2.robjects as ro\n\nr = ro.r\nr.plot(r.pnorm(100), xlab =  y , ylab =  y )  Conduct a chi-square test on data from a text file  import rpy2.robjects as ro\n\nr = ro.r\ntable = r( read.table('Chi-square_input.txt', header = TRUE, sep = '\\t') )\nprint r.names(table)\n\ncont_table = r.table(table[1], table[2])\nchitest = r['chisq.test']\nprint chitest(table[1], table[2])", 
            "title": "Chapter 13, Using External Modules, The Python Interface to R"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-14-building-program-pipelines", 
            "text": "os  package.  sys  package.   Programs can work together with Python   Create path and file variables.  Create command line.  Execute commands from the command line (as if you did it with a mouse and keyboard) with  os.system .   REF: Appendix D.  import os\n\noutput_dir = '/home/RNA-seq/tophat_dir/'\noutput_file = 'accepted_hits.txt'\n\ncommand_line = 'pgm -o %s%s' % (output_dir, output_file)\n\nos.system(command_line)  Command lines in Python   UNIX to Python:  UNIX  pwd ;  print os.getcwd() .  UNIX  ls ;  print os.listdir('.') .  UNIX  cd ;  os.chdir('../data/') .  UNIX  mkdir ;  os.mkdir() .  UNIX  rmdir ;  os.rmdir() .  and many more.     Pipelines   Pipeline are scripts connecting programs to each other (run two or more external programs from command lines).  A program that runs another program is a  wrapper .  Exchange filenames and data between programs.  sys.argv ; Python program sorted parameters.  import sys ; access or print them.   import sys\nimport os\n\nsys.path.append('/home/RNA-seq/')\n\nfrom pathvariables import tophat_dir, index_dir\n\nif os.path.exists(tophat_dir) and os.path.exists(index_dir):\n    os.system('tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt')\nelse:\n    print  You have to create tophat and/or index directories before running your wrapper    One problem with pipelines is lagging.   The system call of the second program should occur when the execution of the first program has finished, especially if the second one uses as input the output of the first one.  Use subprocesses, such as  os.popen()  or  subprocess.call() , to wait for the command to complete and return a value corresponding to the program exit status (0 for success, 256 for failure)  A more robust trick is to insert an action and verify its success after a system call and before the subsequent system call.   import sys\nimport os\n\nfrom pathvariables import tophat_dir, index_dir, cufflinks_dir\n\nsys.path.append('/home/RNA-seq/')\nfrom pathvariables import tophat_dir, index_dir, cufflinks_dir\n\n# the tophat program crates an output file\nos.system('tophat -o ' + tophat_dir + ' ' + index_dir + 'sample.txt')\n\n# here we don't know whether the tophat output file is comleted and available\n# we open and close a dummy file, so the operating system catches up\nlag_file = open('dummy.txt, 'w')\nlag_file.write('tophat completed')\nlag_file.close()\n\n# read the output file\nif os.path.exists('/home/RNA-seq/dummy.txt'):\n    os.system('cufflinks -o ' + cufflinks_dir + ' ' + tophat_dir + '/accepted_hits.txt')  Attributes   print dir() ; Visualize attributes.  Some attributes are module-specific, such as locatime, whereas others refer to modules in general:  __file__ ; return the path of the module.  __doc__ ; return the module documentation, if present.  __name__ ; return the name of the imported file without the .py suffix if the module is imported and the string  '__main__'  is executed.  Execute  statements  only if the module is run from the command line and not imported by means of an import statement:       if __name__ == '__main__':\n     statements   Working with files and directories   os.path  package.  os.path.split(filename) ; split a filename from the directory names.  os.path.exists(filename) ; verify if the file exists, return True or False.   Export the path   In Windows, add the path to the PATH environment variables.  In PowerShell:  $env:PYTHONPATH = \"$env:PYTHONPATH;.\"    In UNIX, enter in the bash:  export PYTHONPATH=.  or  add PYTHONPATH=. .  In a Python code, add to the beginning of the script:   import sys\n\nsys.path.append('.') # '/var/www/'   Or with  sys.path.append('pathmodules/') .   Read files from directories  import os\n\nfor filename is os.listdir('data/'):\n    os.system(' my_program %s' % (filename))    os.remove('log.txt') ; remove files.    tempfile  package;  create temporary files.", 
            "title": "Chapter 14, Building Program Pipelines"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-15-writing-good-programs", 
            "text": "Priorities   Make it work.  Make it nice.  Make if fast.   Tips   Divide a programming project into smaller tasks.  What are the inputs?  What are the outputs?  What is between them?  Write smaller programs; split a program into functions and classes.  Analyze and run tests.  Adopt PEP.  Scaffold before writing a functional program:   def read_files(directory):\n    '''\n    Reads a...\n    '''\n    pass\n\ndef filter(sequences):\n    '''\n    Removes all...\n    '''\n    pass\n\n...\n\nif __name == '__main__':\n    INPUT_DIR = 'aaa/'\n    OUTPUT_FILE = 'filtered.txt'\n    seq = read_files(INPUT_DIR)\n    filter(seq)\n    ...  Adopt PEP   Variables in functions in lowercase.  Constants in modules in uppercase.  A function name starts with a verb.  After each function, two empty lines.  After each logical chunks of long functions, one empty line.  Comment.  Keep lines shorter than 80 characters long.  Each class, function, and variable has a docstring; docstrings can be read with  print object.__doc__ .   Enforce PEP   pylint  package.  pylint  is a Python source code analyzer which looks for programming errors, helps enforcing a coding standard and sniffs for some code smells.  Download  an install pylint.  Or install it with  pip .  Doc  Run  pylint python_file.py .    flake8  package.  flake8  is a modular source code checker (a  wrapper ).  It works with  pep8 ,  pyflakes ,  pycodestyle , and so on.     Version controls   Use version control programs (Mercurial, git, SVN).  Use repository (GitHub, Bitbucket) to control program versions.  GitHub  Bitbucket  SourceForce  Gitlab  and others.     Before releasing (to a repository)   Create a directory with a concise name containing all the project.  Set a version number (0.1 or 1.0).  Write a README.TXT file with the name of the program, the author, contacts, numbers, emails, a version number, the program purpose in 50-100 words, how to use the program, simple command-line examples, the license ( All rights reserved , MIT, etc.)  Create a zip file out of the directory including the README.TXT file in addition to the unzipped directory.  Release the project on a repository (for example, with git, push the project to the repository).   Releasing a distribution   Release a distribution to a repository for others to download and install.    Freezing a program   Non-programmer would rather want an execuble program they can unzip and run.  Compile the code or freeze it!  cx_freeze  is a set of utilities that create standalone executables from python scripts for any platform or OS. \n    i. There are alternatives to  cx_freeze  such as  bbfreeze .  pyinstaller  is a simpler alternative (it is not as flexible as  cx_freeze  but it can create single files).  distutils  is a Python package that provides support for building and installing additional modules (libraries or packages) into a Python installation. The new modules may be either 100%-pure Python, written in C, or coded in both Python and C.  distutils  autogenerates an install script. \n    i. Such distribution needs a  setup.py  file with the group of subdirectories and program files. \n    i.  py2exe  is an extension to the  distutils  package to create executable files on Windows. \n    i.  py2app  is an extension to the  distutils  packages to create executable files on OS X.  nuitka  is a Python compiler, compatible with CPython. \n    i. CPython is a source code interpreter with an interface with several languages, including C, in which one must explicitly write bindings in a language other than Python.  pypy  is an alternative to  nuitka .  Cython is a compiled language that generates CPython extension modules.  Jython does the same, but in Java.     Continuous improvement   A good program is never finished:  Create a baseline release.  Update and release new versions. Tell the users what is new.  Listen to users, improve on it.  Go on programming.     Software development   The Agile Manifesto.  Methodologies: Scrum, eXtreme Programming, etc.", 
            "title": "Chapter 15, Writing Good Programs"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#part-4-data-visualization", 
            "text": "", 
            "title": "Part 4, Data Visualization"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-16-creating-scientific-diagrams", 
            "text": "matplotlib  package.  Pillow  or  PIL  package.  Tip: install the entire SciPy Stack: (Python (2.x  = 2.6 or 3.x  = 3.2), NumPy ( = 1.6), SciPy library ( = 0.10), Matplotlib ( = 1.1) with dateutil and pytz, IPython ( = 0.13) with pyzmq and tornado, pandas ( = 0.8), Sympy ( = 0.7), nose ( = 1.1).  Matplotlib  depends on  Pillow  for reading and saving JPEG, BMP, and TIFF image files.  Matplotlib  requires MiKTeX and GhostScript for rendering text with LaTeX. FFmpeg, avconv, mencoder, or ImageMagick are required for the animation module. Add  nose ,  mock , and Inkscape.   Draw a simple line plot   Provide  (x, y)  points.  figure() ; main function is  plot() .  savefig() ; save the plot in a file.  show() ; show the plot in a window.   from pylab import figure, plot, savefig\n\nxdata = [1, 2, 3, 4]\nydata = [1.25, 2.5, 5.0, 10.0]\n\nfigure()\nplot(xdata, ydata)\n\nsavefig('figure1.png')  Result:   Plot a sine function   Generate  (x, y)  points; first the  x ; then generate the  y  with the  x .  plot()  with a line type  'kd'  and  linewidth = 1 .   from pylab import figure, plot, text, axis, savefig\nimport math\n\nfigure()\n\nxdata = [0.1 * i for i in range(100)]\nydata = [math.sin(j) for j in xdata]\n\nplot(xdata, ydata, 'kd', linewidth = 1)\ntext(4.8, 0,  $y = sin(x)$ , horizontalalignment = 'center', fontsize = 20)\naxis([0, 3 * math.pi, -1.2, 1.2])\n\nsavefig('sinfunc.png')  Result:   Draw a histogram   Provide the  (x, y)  points in lists, and the number of bins.  hist()  needs  data  points and  n_bins .  alpha  stands for the graph color transparency.  Add a title, labels, axes, and gridlines.   from pylab import figure, title, xlabel, ylabel, hist, axis, grid, savefig\n\ndata = [1, 1, 9, 1, 3, 5, 8, 2, 1, 5, 11, 8, 3, 4, 2, 5]\nn_bins = 5\n\nfigure()\nnum, bins, patches = hist(data, n_bins, normed = 1.0, histtype = 'bar', facecolor = 'green', alpha = 0.75)\n\ntitle('Histogram')\nxlabel('value')\nylabel('frequency')\naxis()\ngrid(True)\n\nsavefig('histogram.png')  Result:   Draw a bar plot   count : two series,  x1  and  x2  with each four categories,  nucleotides .   Add a title, labels, axes and ticks to the axes, and a legend.  xticks(x1, nucleotides) ,  where the first element is the list of  x  points and the second element is the label variable.  legend()  takes the labels of all data sets that are plotted.  axis()  is set with a list [from left to right, bottom,  and top].   from pylab import figure, title, xlabel, ylabel, xticks, bar, legend, axis, savefig\n\nnucleotides = [ A ,  G ,  C ,  U ]\n\ncounts = [\n    [606, 1024, 759, 398],\n    [762, 912, 639, 591],\n    ]\n\nfigure()\ntitle('RNA nucleotides in the ribosome')\nxlabel('RNA')\nylabel('base count')\n\nx1 = [2.0, 4.0, 6.0, 8.0]\nx2 = [x - 0.5 for x in x1]\n\nxticks(x1, nucleotides)\n\nbar(x1, counts[1], width = 0.5, color =  #cccccc , label =  E.coli 23S )\nbar(x2, counts[0], width = 0.5, color =  #808080 , label =  T.thermophilus 23S )\n\nlegend()\naxis([1.0, 9.0, 0, 1200])\n\nsavefig('barplot.png')  Result:   Add error bars to a scatterplot or a bar chart   errorbar() .  bar() .   from pylab import figure, errorbar, bar, savefig\n\nfigure()\n\n# scatterplot with error bars\nx1 = [0.1, 0.3, 0.5, 0.6, 0.7]\ny1 = [1, 5, 5, 10, 20]\nerr1 = [3, 3, 3, 10, 12]\nerrorbar(x1, y1, err1 , fmt = 'ro')\n\n# barplot with error bars\nx2 = [1.1, 1.2, 1.3, 1.4, 1.5]\ny2 = [10, 15, 10, 15, 17]\nerr2 = (2, 3, 4, 1, 2)\nwidth = 0.05\nbar(x2, y2, width, color = 'r', yerr = err2, ecolor =  black )\n\nsavefig('errorbars.png')  Result:   Draw a pie chart with protruding slices  from pylab import figure, title, pie, savefig\n\nnucleotides = 'G', 'C', 'A', 'U'\ncount = [1024, 759, 606, 398]\nexplode = [0.0, 0.0, 0.05, 0.05]\n\ncolors = [ #f0f0f0 ,  #dddddd ,  #bbbbbb ,  #999999 ]\n\ndef get_percent(value):\n    '''Formats float values in pie slices to percent.'''\n    return  %4.1f%%  % (value)\n\nfigure(1)\ntitle('nucleotides in 23S RNA from T.thermophilus')\n\npie(count, explode = explode, labels = nucleotides, shadow = True,\n    colors = colors, autopct = get_percent)\n\nsavefig('piechart.png', dpi = 150)  Result:    It is possible to use math symbols, subscripts, and superscripts in the strings:  xlabel('protein concentration [mM]') .  xlabel('protein concentration [$\\muM$]') .    It is possible to use placeholder for variables such as:  \"4.1f%%\" % (variable) .  \"2i%\" % (variable) .  etc.   The  %%  stands for percentage.    Change the image file resolution (dpi = 100 or 150 or 300 or 600) as in  savefig('chart.png', dpi=150) .  Colors are based on the PIL library.  PIL has 140 colors (X11 color names) such as:  'red' ,  'lightred' ,  'magenta' , etc.  in RGB, red is  (255, 0, 0) .  white is  (255, 255, 255)  or  '#ffffff' .  black  is  (0, 0, 0)  or  '#000000' .  etc.    The  X11 color names .", 
            "title": "Chapter 16, Creating Scientific Diagrams"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#chapter-18-manipulating-images", 
            "text": "Pillow  or  PIL  package.   Paste a small image into a big one  from PIL import Image\n\nimage = Image.open('color.png', 'r')\nlabel = Image.open('label.png', 'r') # small legend\nimage.paste(label, (40, 460))\n\nimage.save('combined.png')  Result:   Resizes a big image to a small one  from PIL import Image\n\nimage = Image.open('big.png')\nsmall = image.resize((100, 100))\n\nsmall.save('small.png')  Result:   Converts a color to a black/white image  from PIL import Image\n\nimage = Image.open('color.png', 'r')\nbw_image = Image.new('LA', image.size, (255, 255))\nbw_image.paste(image, (0, 0))\n\nbw_image.save('black_white.png')  Result:   Diminishes the size of all .png files by half  from PIL import Image\nimport os\n\nfor filename in os.listdir('.'):\n    if filename.endswith('.png'):\n        im = Image.open(filename)\n        x = im.size[0] / 2\n        y = im.size[1] / 2\n        small = im.resize((x, y))\n        small.save('small_'+filename)  For  os.listdir('.') , consult  Chapter 14, Building Program Pipelines, Command lines in Python .  Draw an image of a plasmid   Use constant variable:  PLASMID_LENGTH = 4361  is the total number of base pairs in the entire plastmid,  SIZE = (500, 500)  is the size of the entire image,  CENTER = (250, 250)  is the center point of the plasmid circle, the center of the image.  Create an image:  pBR322 = Image.new('RGB', SIZE, 'white') .  'RGB'  color scheme,  SIZE = (x, y)  size in pixels,  'white'  set the background color.  Draw object  pBR322 :  DRAW = ImageDraw.Draw(pBR322) .  The image object is now in object  DRAW .  Finally, save the object:  pBR322.save('plasmid_pBR322.png') .   from PIL import Image, ImageDraw\nimport math\n\nPLASMID_LENGTH = 4361\nSIZE = (500, 500)\nCENTER = (250, 250)\n\npBR322 = Image.new('RGB', SIZE, 'white')\nDRAW = ImageDraw.Draw(pBR322)\n\ndef get_angle(bp, length=PLASMID_LENGTH):\n     Converts base position into an angle. \n    return bp * 360 / length\n\ndef coord(angle, center, radius):\n     Return (x, y) coordinates of a point in a circle. \n    rad = math.radians(90 - angle)\n    x = int(center[0] + math.sin(rad) * radius)\n    y = int(center[1] + math.cos(rad) * radius)\n    return x, y\n\ndef draw_arrow_tip(start, direction, color):\n     Draws a triangle at the given start angle. \n    p1 = coord(start + direction, CENTER, 185)\n    p2 = coord(start, CENTER, 160)\n    p3 = coord(start, CENTER, 210)\n    DRAW.polygon((p1, p2, p3), fill = color)\n\n\nTET_START, TET_END = get_angle(88), get_angle(1276)\nAMP_START, AMP_END = get_angle(3293), get_angle(4153)\nORI_START, ORI_END = get_angle(2519), get_angle(3133)\n\n# drawing the plasmid\nBOX = (50, 50, 450, 450)\nDRAW.pieslice(BOX, 0, 360, fill = 'gray')\nDRAW.pieslice(BOX, TET_START, TET_END, fill = 'blue')\nDRAW.pieslice(BOX, AMP_START, AMP_END, fill = 'orange')\nDRAW.pieslice(BOX, ORI_START, ORI_END, fill = 'darkmagenta')\nDRAW.pieslice((80, 80, 420, 420), 0, 360, fill = 'white')\n\ndraw_arrow_tip(TET_END, 10, 'blue')\ndraw_arrow_tip(AMP_START, -10, 'orange')\ndraw_arrow_tip(ORI_START, -10, 'darkmagenta')\n\npBR322.save('plasmid_pBR322.png')  Result:   Drawings   Image extensions:  BMP; simple table of pixels.  PNG; preserves the color of every single pixel; can be partially transparent.  GIF; can be animated; similar to PNG.  JPG; compressed format, blurred.  TIF; bigger and more precise than PNG.    image = Image.open('color.png', 'r') ; read the object.  Write points:  point = (100, 100) ; with tuples (x, y); x pixels from the left border, y pixels from the top of the image.    Write rectangles  BOX = (100, 100, 150, 150) ; with tuple (x, y, x , y );  BOX  becomes a constant.  DRAW.rectangle(BOX, fill = 'lightblue', outline = 'black')    Draw circles inside  guidelines  or a rectangle:  DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = 'grey') .  DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = (0, 0, 0)) .  DRAW.pieslice((50, 50, 450, 450), 0, 360, fill = '#ffffff') .  BOX = (50, 50, 450, 450)  DRAW.pieslice(BOX, 0, 360, fill = 'grey', outline = 'black')  DRAW.pieslice(BOX, 7, 106, fill = 'blue')      Draw an arc:  DRAW.arc(BOX, 0, 360, fill = 'black')    Draw a polygon:  DRAW.polygon((point1, point2, point3) fill = 'lightblue', outline = 'blue')    Draw a line:  ECOR1 = angle(4359)  p1 = coord(ECOR1, CENTER, 160)  p1 = coord(ECOR1, CENTER, 210)  DRAW.line((p1, p2), fill = 'black', width = 3)    Rotate the image:  pBR322 = pBR322.rotate(45)    Add text:  DRAW.text((370, 240), \"EcoR1\", fill = \"black\")     Draw an image of a plasmid and label it  from PIL import Image, ImageDraw\nimport math\n\nPLASMID_LENGTH = 4361\nSIZE = (500, 500)\nCENTER = (250, 250)\n\npBR322 = Image.new('RGB', SIZE, 'white')\nDRAW = ImageDraw.Draw(pBR322)\n\ndef get_angle(bp, length=PLASMID_LENGTH):\n     Converts base position into an angle. \n    return bp * 360 / length\n\ndef coord(angle, center, radius):\n     Return (x, y) coordinates of a point in a circle. \n    rad = math.radians(90 - angle)\n    x = int(center[0] + math.sin(rad) * radius)\n    y = int(center[1] + math.cos(rad) * radius)\n    return x, y\n\ndef draw_arrow_tip(start, direction, color):\n     Draws a triangle at the given start angle. \n    p1 = coord(start + direction, CENTER, 185)\n    p2 = coord(start, CENTER, 160)\n    p3 = coord(start, CENTER, 210)\n    DRAW.polygon((p1, p2, p3), fill = color)\n\n\nTET_START, TET_END = get_angle(88), get_angle(1276)\nAMP_START, AMP_END = get_angle(3293), get_angle(4153)\nORI_START, ORI_END = get_angle(2519), get_angle(3133)\n\n# drawing the plasmid\nBOX = (50, 50, 450, 450)\nDRAW.pieslice(BOX, 0, 360, fill = 'gray')\nDRAW.pieslice(BOX, TET_START, TET_END, fill = 'blue')\nDRAW.pieslice(BOX, AMP_START, AMP_END, fill = 'orange')\nDRAW.pieslice(BOX, ORI_START, ORI_END, fill = 'darkmagenta')\nDRAW.pieslice((80, 80, 420, 420), 0, 360, fill = 'white')\n\ndraw_arrow_tip(TET_END, 10, 'blue')\ndraw_arrow_tip(AMP_START, -10, 'orange')\ndraw_arrow_tip(ORI_START, -10, 'darkmagenta')\n\nDRAW.text((150, 130),  ori , fill = (0, 0, 0))\nDRAW.text((340, 130),  amp , fill =(0, 0, 0))\nDRAW.text((300, 380),  tet , fill = (0, 0, 0))\n\npBR322.save('plasmid_pBR322.png')  Result:", 
            "title": "Chapter 18, Manipulating Images"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#part-6-cookbook", 
            "text": "", 
            "title": "Part 6, Cookbook"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#recipe-2-reversing-and-randomizing-a-sequence", 
            "text": "sort, reverse, random, probability, list, loop  seq = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nprint(seq)\n\nseq_list = list(seq)\nseq_list.reverse()\nrev_seq = ''.join(seq_list)\nprint(rev_seq)\n\nprint( =  * 25)\n\n# reverse a sequence, using a loop\n# rev_seq = ''\nrev_seq = ''\nfor s in reversed(seq):\n    rev_seq = rev_seq + s\nprint(rev_seq)\n\nprint( =  * 25)\n\n# reverse a sequence, using seq[start:end:step]\nrev_seq = seq[:-1]\nprint(rev_seq)\n\nprint( =  * 25)\n\n# mixing a sequence\nimport random\n\nran_seq = random.sample(seq, len(seq))\nprint(ran_seq)\nran_seq = ''.join(random.sample(seq, len(seq)))\nprint(ran_seq)\nran_seq = ''.join(random.sample(seq, len(seq)-10))\nprint(ran_seq)\n\nprint( =  * 25)\n\n# mixing a sequence (using random again)\nran_seq = ''.join([random.choice(seq) \\\n for x in range(len(seq))])\nprint(ran_seq)\n\nprint( =  * 25)\n\n# shuffle a sequence (using random again)\ndata = list(seq)\nrandom.shuffle(data)\nshuffled_seq = data\nprint(shuffled_seq)\n\nshuffled_seq = ''.join(data)\nprint(shuffled_seq)  Ouput:  ABCDEFGHIJKLMNOPQRSTUVWXYZ\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nZYXWVUTSRQPONMLKJIHGFEDCBA\n=========================\nABCDEFGHIJKLMNOPQRSTUVWXY\n=========================\n['F', 'J', 'I', 'L', 'O', 'R', 'U', 'C', 'A', 'V', 'Q', 'M', 'T', 'N', 'B', 'G', 'W', 'P', 'Y', 'H', 'D', 'S', 'Z', 'E', 'X', 'K']\nLKAZHTVFGQROUXIMYWESDPCBJN\nLXRDUVFHKGJZMIAB\n=========================\nRYYEYKWUGMYFYMUWWBOSZWSRMJ\n=========================\n['R', 'N', 'S', 'E', 'M', 'H', 'A', 'P', 'X', 'F', 'W', 'K', 'J', 'I', 'Y', 'T', 'Z', 'G', 'V', 'O', 'C', 'B', 'Q', 'D', 'L', 'U']\nRNSEMHAPXFWKJIYTZGVOCBQDLU", 
            "title": "Recipe 2, Reversing and Randomizing a Sequence"
        }, 
        {
            "location": "/Managing Your Biological Data with Python/#recipe-3-creating-a-random-sequence-with-probabilities", 
            "text": "random, list, generate, probability  import random\n\nnucleotides = list('ACGT')\ndna = ''\nwhile len(dna)   100:\n    dna += random.choice(nucleotides) # choose amoung the list, fetch 1 item\nprint(dna)\n\nprint( =  * 25)\n\nnucleotides = list('ACGT')\nprobs = {'A': 0.3, 'C': 0.2, 'G': 0.2, 'T': 0.3} # sum of 1.0\nassert sum(probs.values()) == 1.0\n# or\n# if sum(probs.values()) != 1.0:\n#   raise Exception('Sum of probabilites is not 1.0!')\n\ndna = ''\nwhile len(dna)   100:\n    nuc = random.choi", 
            "title": "Recipe 3, Creating a Random Sequence with Probabilities"
        }, 
        {
            "location": "/Python for Education/", 
            "text": "CONTENT\n\n\n2, Programming in Python\n\n\n2.5, Python Lists\n\n\n2.7, Input from the Keyboard\n\n\n2.11, Line joining\n\n\n2.14, More on Strings and Lists\n\n\nRecap from the Above (Snippets)\n\n\n2.15, Python Modules and Packages\n\n\n2.16, Files Input/Ouput\n\n\n2.17, Formatted Printing\n\n\n2.18, Exception Handling\n\n\n2.20, Writing GUI Programs\n\n\n2.21, Object-Oriented Programming in Python\n\n\n\n\n\n\n3, Arrays and Matrices\n\n\n3.1, The NumPy Module\n\n\n3.2, Vectorized Functions\n\n\n\n\n\n\n4, Data visualization\n\n\n4.1, The Matplotlib Module\n\n\n\n\n\n\n5, Type Setting Using \\LaTeX\n\n\n6, Numerical Methods\n\n\n6.5, Finding Roots of an Equation\n\n\n6.6, System of Linear Equations\n\n\n6.7, Least Squares Fitting\n\n\n6.8, Interpolation\n\n\n\n\n\n\n\n\n\n\n\n\nForeword\n\n\nNotes and code snippets. IPython 2 \n 3. From Inter University Accelerator Centre, 2010. Creative Commons.\n\n\n\n\n2, Programming in Python\n\n\n2.5, Python Lists\n\n\na = 'hello world'\n\n# extract, subset\nprint(a[3:5])\nprint(a[6:])\nprint(a[:5])\n\n\n\n\nlo\nworld\nhello\n\n\n\na = [1, 2]\n\nprint(a)\nprint(a * 2) # double print\nprint(a + [1, 1]) # concatenate\n\n\n\n\n[1, 2]\n[1, 2, 1, 2]\n[1, 2, 1, 1]\n\n\n\nb = [1,2,a]\nprint(b) # embed\n\nb[2] = 3\nprint(b) # change a mutable from the above list\n\n# Output:\n\n\n\n\n[1, 2, [1, 2]]\n[1, 2, 3]\n\n\n\n2.7, Input from the Keyboard\n\n\n\n\ninput\n for numeric data.\n\n\nraw_input\n for string data.\n\n\n\n\nx = input('Enter an integer (x): ')\ny = input('Enter another one (y): ')\n\nprint('The sum is = ', x + y) # print as numeric, input\n\n\n\n\nEnter an integer (x): 1\nEnter another one (y): 2\n('The sum is = ', 3)\n\n\n\nt = raw_input('Enter an integer: ')\nu = raw_input('Enter another one: ')\n\nprint('The sum is = ', t + u) # print as string, raw input\n\n\n\n\nEnter an integer: 2\nEnter another one: 3\n('The sum is = ', '23')\n\n\n\nv = input('Enter an integer: ')\nw = input('Enter another one: ')\n\nprint('The sum is = ', str(v) + str(w)) # print as string, input changes into a string\n\n\n\n\nEnter an integer: 1\nEnter another one: 1\n('The sum is = ', '11')\n\n\n\ny1 = raw_input('Enter an integer: ')\ny2 = raw_input('Enter another one: ')\n\nprint( 'The sum is = ', int(y1) + int(y2)) # print as numeric, raw input changed into integer\n\n\n\n\nEnter an integer: 2\nEnter another one: 2\n('The sum is = ', 4)\n\n\n\ny3 = raw_input('Enter an integer: ')\ny4 = raw_input('Enter another one: ')\n\nprint( 'The sum is = ', float(y3) + float(y4)) # print as numeric, raw input changed into float\n\n\n\n\nEnter an integer: 1\nEnter another one: 2\n('The sum is = ', 3.0)\n\n\n\n2.11, Line joining\n\n\nyear = input('year: ')\nmonth = input('month: ')\nif 1900 \n year \n 2100 and 1 \n= month \n= 12 :\n    print('I am so long and will not fit in a single line')\n\n\n\n\nyear: 2016\nmonth: 10\nI am so long and will not fit in a single line\n\n\n\n# simplify the code, shorten the line\nyear = input('year: ')\nmonth = input('month: ')\nif 1900 \n year \n 2100\\\n and 1 \n= month \n= 12 :\n    print('I am so long and will\\\n not fit in a single line')\n\n\n\n\nyear: 2016\nmonth: 10\nI am so long and will not fit in a single line\n\n\n\n# object, variable type\nprint(type(4.5))\n\n\n\n\ntype 'float'\n\n\n\n\n2.14, More on Strings and Lists\n\n\ns = 'hello world'\n\n# string length\nprint(len(s))\nprint(s.upper())\n\n\n\n\n11\nHELLO WORLD\n\n\n\n# help with\nhelp(str)\n\n\n\n\nHelp on class str in module __builtin__:\n\nclass str(basestring)\n |  str(object='') -\n string\n |  \n |  Return a nice string representation of the object.\n |  If the argument is a string, the return value is the same object.\n |  \n |  Method resolution order:\n |      str\n |      basestring\n |      object\n |  \n |  Methods defined here:\n |  \n |  __add__(...)\n |      x.__add__(y) \n==\n x+y\n |  \n |  __contains__(...)\n |      x.__contains__(y) \n==\n y in x\n |  \n |  __eq__(...)\n |      x.__eq__(y) \n==\n x==y\n |  \n |  __format__(...)\n |      S.__format__(format_spec) -\n string\n |      \n |      Return a formatted version of S as described by format_spec.\n |  \n |  __ge__(...)\n |      x.__ge__(y) \n==\n x\n=y\n |  \n |  __getattribute__(...)\n |      x.__getattribute__('name') \n==\n x.name\n |  \n |  __getitem__(...)\n |      x.__getitem__(y) \n==\n x[y]\n |  \n |  __getnewargs__(...)\n |  \n |  __getslice__(...)\n |      x.__getslice__(i, j) \n==\n x[i:j]\n |      \n |      Use of negative indices is not supported.\n |  \n |  __gt__(...)\n |      x.__gt__(y) \n==\n x\ny\n |  \n |  __hash__(...)\n |      x.__hash__() \n==\n hash(x)\n |  \n |  __le__(...)\n |      x.__le__(y) \n==\n x\n=y\n |  \n |  __len__(...)\n |      x.__len__() \n==\n len(x)\n |  \n |  __lt__(...)\n |      x.__lt__(y) \n==\n x\ny\n |  \n |  __mod__(...)\n |      x.__mod__(y) \n==\n x%y\n |  \n |  __mul__(...)\n |      x.__mul__(n) \n==\n x*n\n |  \n |  __ne__(...)\n |      x.__ne__(y) \n==\n x!=y\n |  \n |  __repr__(...)\n |      x.__repr__() \n==\n repr(x)\n |  \n |  __rmod__(...)\n |      x.__rmod__(y) \n==\n y%x\n |  \n |  __rmul__(...)\n |      x.__rmul__(n) \n==\n n*x\n |  \n |  __sizeof__(...)\n |      S.__sizeof__() -\n size of S in memory, in bytes\n |  \n |  __str__(...)\n |      x.__str__() \n==\n str(x)\n |  \n |  capitalize(...)\n |      S.capitalize() -\n string\n |      \n |      Return a copy of the string S with only its first character\n |      capitalized.\n |  \n |  center(...)\n |      S.center(width[, fillchar]) -\n string\n |      \n |      Return S centered in a string of length width. Padding is\n |      done using the specified fill character (default is a space)\n |  \n |  count(...)\n |      S.count(sub[, start[, end]]) -\n int\n |      \n |      Return the number of non-overlapping occurrences of substring sub in\n |      string S[start:end].  Optional arguments start and end are interpreted\n |      as in slice notation.\n |  \n |  decode(...)\n |      S.decode([encoding[,errors]]) -\n object\n |      \n |      Decodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\n |      as well as any other name registered with codecs.register_error that is\n |      able to handle UnicodeDecodeErrors.\n |  \n |  encode(...)\n |      S.encode([encoding[,errors]]) -\n object\n |      \n |      Encodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n |      'xmlcharrefreplace' as well as any other name registered with\n |      codecs.register_error that is able to handle UnicodeEncodeErrors.\n |  \n |  endswith(...)\n |      S.endswith(suffix[, start[, end]]) -\n bool\n |      \n |      Return True if S ends with the specified suffix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      suffix can also be a tuple of strings to try.\n |  \n |  expandtabs(...)\n |      S.expandtabs([tabsize]) -\n string\n |      \n |      Return a copy of S where all tab characters are expanded using spaces.\n |      If tabsize is not given, a tab size of 8 characters is assumed.\n |  \n |  find(...)\n |      S.find(sub [,start [,end]]) -\n int\n |      \n |      Return the lowest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  format(...)\n |      S.format(*args, **kwargs) -\n string\n |      \n |      Return a formatted version of S, using substitutions from args and kwargs.\n |      The substitutions are identified by braces ('{' and '}').\n |  \n |  index(...)\n |      S.index(sub [,start [,end]]) -\n int\n |      \n |      Like S.find() but raise ValueError when the substring is not found.\n |  \n |  isalnum(...)\n |      S.isalnum() -\n bool\n |      \n |      Return True if all characters in S are alphanumeric\n |      and there is at least one character in S, False otherwise.\n |  \n |  isalpha(...)\n |      S.isalpha() -\n bool\n |      \n |      Return True if all characters in S are alphabetic\n |      and there is at least one character in S, False otherwise.\n |  \n |  isdigit(...)\n |      S.isdigit() -\n bool\n |      \n |      Return True if all characters in S are digits\n |      and there is at least one character in S, False otherwise.\n |  \n |  islower(...)\n |      S.islower() -\n bool\n |      \n |      Return True if all cased characters in S are lowercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  isspace(...)\n |      S.isspace() -\n bool\n |      \n |      Return True if all characters in S are whitespace\n |      and there is at least one character in S, False otherwise.\n |  \n |  istitle(...)\n |      S.istitle() -\n bool\n |      \n |      Return True if S is a titlecased string and there is at least one\n |      character in S, i.e. uppercase characters may only follow uncased\n |      characters and lowercase characters only cased ones. Return False\n |      otherwise.\n |  \n |  isupper(...)\n |      S.isupper() -\n bool\n |      \n |      Return True if all cased characters in S are uppercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  join(...)\n |      S.join(iterable) -\n string\n |      \n |      Return a string which is the concatenation of the strings in the\n |      iterable.  The separator between elements is S.\n |  \n |  ljust(...)\n |      S.ljust(width[, fillchar]) -\n string\n |      \n |      Return S left-justified in a string of length width. Padding is\n |      done using the specified fill character (default is a space).\n |  \n |  lower(...)\n |      S.lower() -\n string\n |      \n |      Return a copy of the string S converted to lowercase.\n |  \n |  lstrip(...)\n |      S.lstrip([chars]) -\n string or unicode\n |      \n |      Return a copy of the string S with leading whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  partition(...)\n |      S.partition(sep) -\n (head, sep, tail)\n |      \n |      Search for the separator sep in S, and return the part before it,\n |      the separator itself, and the part after it.  If the separator is not\n |      found, return S and two empty strings.\n |  \n |  replace(...)\n |      S.replace(old, new[, count]) -\n string\n |      \n |      Return a copy of string S with all occurrences of substring\n |      old replaced by new.  If the optional argument count is\n |      given, only the first count occurrences are replaced.\n |  \n |  rfind(...)\n |      S.rfind(sub [,start [,end]]) -\n int\n |      \n |      Return the highest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  rindex(...)\n |      S.rindex(sub [,start [,end]]) -\n int\n |      \n |      Like S.rfind() but raise ValueError when the substring is not found.\n |  \n |  rjust(...)\n |      S.rjust(width[, fillchar]) -\n string\n |      \n |      Return S right-justified in a string of length width. Padding is\n |      done using the specified fill character (default is a space)\n |  \n |  rpartition(...)\n |      S.rpartition(sep) -\n (head, sep, tail)\n |      \n |      Search for the separator sep in S, starting at the end of S, and return\n |      the part before it, the separator itself, and the part after it.  If the\n |      separator is not found, return two empty strings and S.\n |  \n |  rsplit(...)\n |      S.rsplit([sep [,maxsplit]]) -\n list of strings\n |      \n |      Return a list of the words in the string S, using sep as the\n |      delimiter string, starting at the end of the string and working\n |      to the front.  If maxsplit is given, at most maxsplit splits are\n |      done. If sep is not specified or is None, any whitespace string\n |      is a separator.\n |  \n |  rstrip(...)\n |      S.rstrip([chars]) -\n string or unicode\n |      \n |      Return a copy of the string S with trailing whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  split(...)\n |      S.split([sep [,maxsplit]]) -\n list of strings\n |      \n |      Return a list of the words in the string S, using sep as the\n |      delimiter string.  If maxsplit is given, at most maxsplit\n |      splits are done. If sep is not specified or is None, any\n |      whitespace string is a separator and empty strings are removed\n |      from the result.\n |  \n |  splitlines(...)\n |      S.splitlines(keepends=False) -\n list of strings\n |      \n |      Return a list of the lines in S, breaking at line boundaries.\n |      Line breaks are not included in the resulting list unless keepends\n |      is given and true.\n |  \n |  startswith(...)\n |      S.startswith(prefix[, start[, end]]) -\n bool\n |      \n |      Return True if S starts with the specified prefix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      prefix can also be a tuple of strings to try.\n |  \n |  strip(...)\n |      S.strip([chars]) -\n string or unicode\n |      \n |      Return a copy of the string S with leading and trailing\n |      whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  swapcase(...)\n |      S.swapcase() -\n string\n |      \n |      Return a copy of the string S with uppercase characters\n |      converted to lowercase and vice versa.\n |  \n |  title(...)\n |      S.title() -\n string\n |      \n |      Return a titlecased version of S, i.e. words start with uppercase\n |      characters, all remaining cased characters have lowercase.\n |  \n |  translate(...)\n |      S.translate(table [,deletechars]) -\n string\n |      \n |      Return a copy of the string S, where all characters occurring\n |      in the optional argument deletechars are removed, and the\n |      remaining characters have been mapped through the given\n |      translation table, which must be a string of length 256 or None.\n |      If the table argument is None, no translation is applied and\n |      the operation simply removes the characters in deletechars.\n |  \n |  upper(...)\n |      S.upper() -\n string\n |      \n |      Return a copy of the string S converted to uppercase.\n |  \n |  zfill(...)\n |      S.zfill(width) -\n string\n |      \n |      Pad a numeric string S with zeros on the left, to fill a field\n |      of the specified width.  The string S is never truncated.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __new__ = \nbuilt-in method __new__ of type object\n\n |      T.__new__(S, ...) -\n a new object with type S, a subtype of T\n\n\n\ns = 'I am a long string'\n\n# split a string on space\nprint(s.split())\n\n\n\n\n['I', 'am', 'a', 'long', 'string']\n\n\n\na = 'abc.abc.abc'\n\n# split a string on dot\naa = a.split('.')\nprint(aa)\n\n\n\n\n['abc', 'abc', 'abc']\n\n\n\n# join the elements, join character\nmm = '+'.join(aa)\nprint(mm)\n\n\n\n\nabc+abc+abc\n\n\n\na = []\n\n# append to a list\na.append(3)\nprint(a)\n\na.append(4)\nprint(a)\n\n\n\n\n[3]\n[3, 4]\n\n\n\n# insert 2.5 as first element (at index = 0)\na.insert(0, 2.5)\n\n# print several items\nprint(a, a[0])\nprint(len(a))\n\n\n\n\n([2.5, 3, 4], 2.5)\n3\n\n\n\n# copy module\na = [1, 2, 3, 4]\n\nprint(a)\n\nb = a\nprint(a == b) # True\n\n\n\n\n[1, 2, 3, 4]\nTrue\n\n\n\n# insert at index = 0\nb[0] = 5\n\n\n\n\n# b is a live duplicate, not an independent copy\nprint(a is b)\nprint(a, b)\n\n\n\n\nTrue\n([5, 2, 3, 4], [5, 2, 3, 4])\n\n\n\nimport copy\n\nc = copy.copy(a)\n\n\n\n\n# c is an ind. copy\nprint(a is c)\nprint(a, c)\n\n\n\n\nFalse\n([5, 2, 3, 4], [5, 2, 3, 4])\n\n\n\n# replace at index = 1\nc[1] = 100\nprint(a, c)\n\n\n\n\n([5, 2, 3, 4], [5, 100, 3, 4])\n\n\n\nRecap from the Above (Snippets)\n\n\ndicty = {'a': 'apple', 'b': 'berry', 'c': 'cherry'}\n\nfor keyy in dicty:\n    print('keys are: '), keyy\n    print('-' * 5)\n    print('values are: '), dicty[keyy]\n    print('-' * 10)    \n\n\n\n\nkeys are:  a\n-----\nvalues are:  apple\n----------\nkeys are:  c\n-----\nvalues are:  cherry\n----------\nkeys are:  b\n-----\nvalues are:  berry\n----------\n\n\n\nprint(type(0))\nprint(type(255))\nprint(type(-1))\nprint(type(-255))\nprint(type(-30000))\nprint(type(30000))\nprint(type(-3500000))\nprint(type(3500000))\nprint(type(-1.5))\nprint(type(1.345456734576345))\nprint(type('4'))\n\n\n\n\ntype 'int'\n\n\ntype 'int'\n\n\ntype 'int'\n\n\ntype 'int'\n\n\ntype 'int'\n\n\ntype 'int'\n\n\ntype 'int'\n\n\ntype 'int'\n\n\ntype 'float'\n\n\ntype 'float'\n\n\ntype 'str'\n\n\n\n\na1 = input('Enter: ')\n\na2 = a1\na3 = bytes(a1) # 0 - 255\na4 = int(a1) # -32768 - 32768\na5 = long(a1) # -2147483648 -\na6 = float(a1)\na9 = str(a1)\n\n\n\n\nEnter: 1\n\n\n\nlistnum = [0,1,2,3,4,5,6,7,8,9,10]\n\nfor i in listnum:\n    if i%2 == 0: # even\n        print(i),\n\n\n\n\n0 2 4 6 8 10\n\n\n\nfor i in range(0,10):\n    if i%2 == 0: # even\n        print(i),\n\n\n\n\n0 2 4 6 8\n\n\n\nfor i in range(0,100,3):\n    if i%2 == 0: # even\n        print(i),\n\n\n\n\n0 6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96\n\n\n\nlistnum = ['a','b']\nlisttext = []\n\nfor i in listnum:\n    if i == 'b': # even\n        listtext.append(i)\n\nprint listtext\n\n\n\n\n['b']\n\n\n\nlst = [3,5,7]\n\nlst.append(9)\nprint lst\n\nlst.append(lst[0])\nprint(lst)\n\n\n\n\n[3, 5, 7, 9]\n[3, 5, 7, 9, 3]\n\n\n\nlst = ['a','b','c']\n\nlst.append('d')\nprint(lst)\n\nlst.append(lst[0])\nprint(lst)\n\n\n\n\n['a', 'b', 'c', 'd']\n['a', 'b', 'c', 'd', 'a']\n\n\n\nelements = ('foo', 'bar', 'baz')\n\nfor elem in elements:\n    print(elem)\n\n\n\n\nfoo\nbar\nbaz\n\n\n\nfor count, elem in enumerate(elements):\n    print(count, elem)\n\n\n\n\n(0, 'foo')\n(1, 'bar')\n(2, 'baz')\n\n\n\nlistnum = [0,1,2,3,4,5,6,7,8,9,10]\n\nlistnum.pop() # last\nprint(listnum)\n\n\n\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlistnum.pop(0) # position 0\nprint(listnum)\n\n\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlistnum.pop(2) # position 2\nprint(listnum)\n\n\n\n\n[1, 2, 4, 5, 6, 7, 8, 9]\n\n\n\nlistnum.remove(8) # specific element\nprint(listnum)\n\n\n\n\n[1, 2, 4, 5, 6, 7, 9]\n\n\n\ndel(listnum[0])\nprint(listnum)\n\n\n\n\n[2, 4, 5, 6, 7, 9]\n\n\n\nword = 'original'\nword2 = word.upper()\nword3 = word.capitalize()\nfirst = word[0]\nallbutfirst = word[1:len(word)]\n\nprint(word)\nprint(word2)\nprint(word3)\nprint(first)\nprint(allbutfirst)\n\n\n\n\noriginal\nORIGINAL\nOriginal\no\nriginal\n\n\n\nlist1 = [1,2,3]\nlist2 = [4,5,6,7]\n\nlist3 = [list1,list2]\n\nresults = []\n\ndef joiny(listy):\n    for lst in listy:\n        for num in lst:\n            results.append(num)\n    return results\n\nprint(joiny(list3))\n\n\n\n\n[1, 2, 3, 4, 5, 6, 7]\n\n\n\n2.15, Python Modules and Packages\n\n\nprint(sin(0.5))\n\n\n\n\n0.479425538604\n\n\n\n# rename, more efficient\nimport math as m\nprint(m.sin(0.5))\n\n\n\n\n0.479425538604\n\n\n\n# package.module.function()\nimport random\n\na = random.randint(1,5)\nprint(a)\n\nrandom.randint(1,10)\n\n\n\n\n3\n8\n\n\n\nimport random as rd\n\naa = rd.randint(1,5)\nprint(aa)\n\n\n\n\n5\n\n\n\n2.16, Files Input/Ouput\n\n\n# create the file\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'w')\nf.write('This is a test file') # write in\nf.close()\n\n\n\n\n# read it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'r')\nprint(f.read())\nf.close()\n\n\n\n\nThis is a test file\n\n\n\n# read it again\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'r')\nprint(f.read(7)) # get first seven characters on the console\nprint(f.read()) # get the remaining ones\nf.close()\n\n\n\n\nThis is\n a test file\n\n\n\n# create it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'w')\nfor k in range(1,10): # 1, 2, 3 stop before 4\n    s = '%3d\\n' %(k) # no format 3d, new line\n    f.write(s) # write in\nf.close()\n\n\n\n\n# read it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r') # open\nprint(f.read())\nf.close()\n\n\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n\n\n\n# read it horizontally\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r') # open\nprint(f.read(),)\nf.close()\n\n\n\n\n('  1\\n  2\\n  3\\n  4\\n  5\\n  6\\n  7\\n  8\\n  9\\n',)\n\n\n\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if s == '': # Empty string means end of file\n        break # terminate the loop\n    m = int(s) # Convert to integer\n    print(m * 5),\nf.close()\n\n\n\n\n5 10 15 20 25 30 35 40 45\n\n\n\n# create it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'w')\nf.write('')\nf.close()\n\n\n\n\n# give an error if there is a blank line in the file\n# test it (without the if, there would be an error)\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if s == '': # empty string means end of file\n        break # terminate the loop\n    m = int(s) # convert to integer\n    print(m * 5)\nf.close()\n\n\n\n\n# alternatively\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if len(s) \n 1: # string with no value\n        break # terminate the loop\n    m = int(s) # convert to integer\n    print(m * 5)\nf.close()\n\n\n\n\nStrings can easily be written to and read from a \u001cle. Numbers take a bit more e\u001bort, since the \nread()\n method only returns Strings, which will have to be converted in to a number explicitly. However, when you want to save and restore data types like lists, dictionaries, or class instances, things get a lot more complicated. Rather than have the users constantly writing and debugging code to save complicated data types, Python provides a standard module called \npickle\n.\n\n\nThe \npickle\n module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure. \u201cPickling\u201d is the process whereby a Python object hierarchy is converted into a byte stream, and \u201cunpickling\u201d is the inverse operation, whereby a byte stream is converted back into an object hierarchy. Pickling (and unpickling) is alternatively known as \u201cserialization\u201d, \u201cmarshalling,\u201d [1] or \u201cflattening\u201d, however, to avoid confusion, the terms used here are \u201cpickling\u201d and \u201cunpickling\u201d.\n\n\nimport pickle\n\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt', 'w')\npickle.dump(12.3, f) # write a float type\nf.close()\n\n\n\n\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt', 'r')\nx = pickle.load(f)\nprint(x, type(x)) # check the type of data read\nf.close()\n\n\n\n\n(12.3, \ntype 'float'\n)\n\n\n\n2.17, Formatted Printing\n\n\na = 2.0 / 3 # 2/3 will print zero because of integer\nprint(a)\n\nprint('a = %5.3f') %(a) # up to 3 decimal places\n\n\n\n\n0.666666666667\na = 0.667\n\n\n\n\n\n\n\n\n\nConversion\n\n\nConversion\n\n\nExample\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nd, i\n\n\nsigned Integer\n\n\n%6d\n%(12)\n\n\n 12\n\n\n\n\n\n\nf\n\n\nfoating point decimal\n\n\n%6.4f\n%(2.0/3)\n\n\n0.667\n\n\n\n\n\n\ne\n\n\nfloating point exponential\n\n\n%6.2e\n%(2.0/3)\n\n\n6.67e-01\n\n\n\n\n\n\nx\n\n\nhexadecimal\n\n\n%x\n%(16)\n\n\n10\n\n\n\n\n\n\no\n\n\noctal\n\n\n%o\n%(8)\n\n\n10\n\n\n\n\n\n\ns\n\n\nstring\n\n\n%s\n%(\nabcd\n)\n\n\nabcd\n\n\n\n\n\n\n0d\n\n\nmodi\u001ced\n\n\nd\n \n%05d\n%(12)\n\n\n00012\n\n\n\n\n\n\n\n\na = 'justify as you like'\nprint('%30s') %(a) # right justified\n\n\n\n\n           justify as you like\n\n\n\nprint('%-30s') %(a) # minus sign for left justification\n\n\n\n\njustify as you like\n\n\n\nfor k in range(1,11): # A good looking table\n    print('5 x %2d = %2d') %(k, 5*k) # add 2 spaces before\n\n\n\n\n5 x  1 =  5\n5 x  2 = 10\n5 x  3 = 15\n5 x  4 = 20\n5 x  5 = 25\n5 x  6 = 30\n5 x  7 = 35\n5 x  8 = 40\n5 x  9 = 45\n5 x 10 = 50\n\n\n\n2.18, Exception Handling\n\n\nx = input('Enter a number ')\n\ntry:\n    print(10.0 / x)\nexcept:\n    print('Division by zero not allowed')\n\n\n\n\nEnter a number 0\nDivision by zero not allowed\n\n\n\n2.20, Writing GUI Programs\n\n\nTkinter\n\n\n\n\nAn introduction to tkinter\n\n\nTkinter\n\n\nTkinter\n\n\n\n\nThe GUI programs are event-driven like a macro. Create Widgets like a Button, Label, Canvas,  etc. The first step is to create a main graphics window by calling the function \nTk()\n.\n\n\n# Example tkmain.py\n\n# open an empty box with min, max, close buttons\nimport Tkinter as tk\n\nroot = tk.Tk()\nroot.mainloop()\n\n# it opens a windows!\n\n\n\n\n# Example tklabel.py\n\nroot = tk.Tk()\nw = tk.Label(root, text = \nHello, world\n)\n\nw.pack()\nroot.mainloop()\n\n# it opens a windows with the text in it\n\n\n\n\n# Example tkbutton.py\n\ndef hello():\n    print('hello world')\n\nw = tk.Tk() # Creates the main Graphics window\nb = tk.Button(w, text = 'Click Me', command = hello)\n\nb.pack()\nw.mainloop()\n\n# it opens a windows with a button; after clicking, it print the function\n\n\n\n\nhello world\n\n\n\n# Example tkcanvas.py\n\ndef draw(event):\n    c.create_rectangle(event.x, \\\n        event.y, event.x+5, event.y+5)\n\nw = tk.Tk()\nc = tk.Canvas(w, width = 300, height = 200)\n\nc.pack()\nc.bind(\nButton-1\n, draw)\nw.mainloop()\n\n# it open a windows; you can left-click and add dots in it\n\n\n\n\n# Example tkcanvas2.py\n\nrecs = [] # list keeping track of the rectangles\n\ndef remove(event):\n    global recs\n    if len(recs) \n 0:\n        c.delete(recs[0]) # delete from Canvas\n        recs.pop(0) # delete first item from list\n\ndef draw(event):\n    global recs\n    r = c.create_rectangle(event.x, \\\n        event.y, event.x + 5, event.y + 5)\n    recs.append(r)\n\nw = tk.Tk()\nc = tk.Canvas(w, width = 300, height = 200)\n\nc.pack()\nc.bind(\nButton-1\n, draw)\nc.bind(\nButton-3\n, remove)\nw.mainloop()\n\n# it open a windows; you can left-click and add dots in it; right-click and remove them\n\n\n\n\n2.21, Object-Oriented Programming in Python\n\n\n# example point.py\n\nclass Point:\n    '''\n    This is documentation comment.\n    help(Point) will display this.\n    '''\n\n    def __init__(self, x = 0, y = 0):\n        self.xpos = x\n        self.ypos = y\n\n    def __str__(self): # overload print()\n        return 'Point at (%f,%f)' %(self.xpos, self.ypos)\n\n    def __add__(self, other): # overloads\n        xpos = self.xpos + other.xpos\n        ypos = self.ypos + other.ypos\n        return Point(xpos, ypos)\n\n    def __sub__(self, other): # overloads\n        import math\n        dx = self.xpos - other.xpos\n        dy = self.ypos - other.ypos\n        return math.sqrt(dx ** 2 + dy ** 2)\n\n    def dist(self):\n        import math\n        return math.sqrt(self.xpos ** 2 + self.ypos ** 2)\n\n\n\n\n# example point1.py\n\n# import Point\n# if point.py is in the same directory and script point1.py is independent from point.py\n\norigin = Point() # instance\nprint(origin)\n\np1 = Point(4, 4) # instance\np2 = Point(8, 7)\n\nprint(p1)\n\n\n\n\nPoint at (0.000000,0.000000)\nPoint at (4.000000,4.000000)\n\n\n\nprint(p2) # __str__\n\n\n\n\nPoint at (8.000000,7.000000)\n\n\n\nprint(p1 + p2) # __add__, __str__, (4 + 4, 7 + 4)\n\n\n\n\nPoint at (12.000000,11.000000)\n\n\n\nprint(p1 - p2) # __sub__, __str__, ((4 - 8) ** 2, (3 - 7) ** 2)\n\n\n\n\n5.0\n\n\n\nprint(p1.dist()) # # __dist__, __str__, sqrt((4) ** 2 + (4) ** 2)\n\n\n\n\n5.65685424949\n\n\n\n# example cpoint.py\n\nclass colPoint(Point): # colPoint inherits Point\n    '''\n    This is documentation comment.\n    help(colPoint) will display this.\n    '''\n\n    color = 'black'\n\n    def __init__(self, x = 0, y = 0, col = 'black'):\n        Point.__init__(self, x, y)\n        self.color = col\n\n    def __str__(self):\n        return '%s colored Point at (%f,%f)' % \\\n            (self.color, self.xpos, self.ypos)\n\n\n\n\n# example point2.py\n\n# import cpoint\n# see above for the explanation\n\np1 = Point(5, 5)\nrp1 = colPoint(2, 2, 'red')\n\n\n\n\nprint(p1)\n\n\n\n\nPoint at (5.000000,5.000000)\n\n\n\nprint(rp1)\n\n\n\n\nred colored Point at (2.000000,2.000000)\n\n\n\nprint(rp1 + p1)\n\n\n\n\nPoint at (7.000000,7.000000)\n\n\n\nprint(rp1.dist())\n\n\n\n\n2.82842712475\n\n\n\n3, Arrays and Matrices\n\n\nLet\ns switch to Python 3 for the remaining of the document.\n\n\n3.1, The NumPy Module\n\n\nInstall (check) the Scipy Stack before.\n\n\n\n\nnumpy\n\n\nscipy\n\n\nmatplotlib\n\n\npandas\n\n\nsympy\n\n\nnose (testing)\n\n\n\n\nWith \npip\n.\n\n\nNote\n\n\nThe code below in Python 3 on Jupyter Notebook 3  installed on a Windows PC.\n\n\nHowever, running the Scipy Stack in Python 2.7 is problematic.\n\n\nSwitch kernel from here: from Python 2 to 3.\n\n\nNo need to \nimport numpy, matplotlib\n since it\ns included in the \n%pylab\n command.\n\n\n%pylab inline\n# the Scipy Stack is executed in the notebook, no need to import numpy\n\nx = array([1, 2, 3]) # make array from list\n\nprint(x, type(x))\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n[1 2 3] \nclass 'numpy.ndarray'\n\n\n\n\na = [[1,2], [3,4]] # make a list of lists\n\nx = array(a) # and convert to an array\nprint(a)\n\n\n\n\n[[1, 2], [3, 4]]\n\n\n\narange(2.0, 3.0, .1)\n\n\n\n\narray([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])\n\n\n\narray([ 2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9])\n\n\n\n\narray([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])\n\n\n\nlinspace(1, 2, 11)\n\n\n\n\narray([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])\n\n\n\narray([ 1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. ])\n\n\n\n\narray([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])\n\n\n\nzeros([3,2], 'float')\n\n\n\n\narray([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])\n\n\n\nzeros([3,2], 'int')\n\n\n\n\narray([[0, 0],\n       [0, 0],\n       [0, 0]])\n\n\n\nones([2,2], 'i')\n\n\n\n\narray([[1, 1],\n       [1, 1]], dtype=int32)\n\n\n\nrandom.random([3,3])\n\n\n\n\narray([[ 0.51158139,  0.83490474,  0.82306296],\n       [ 0.65830757,  0.98560397,  0.78565885],\n       [ 0.09887894,  0.11073038,  0.31037259]])\n\n\n\na = arange(20)\nprint(a)\n\n\n\n\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n\n\n\nb = reshape(a, [4,5])\nprint(b)\n\n\n\n\n[[ 0  1  2  3  4]\n [ 5  6  7  8  9]\n [10 11 12 13 14]\n [15 16 17 18 19]]\n\n\n\na = arange(1.0, 2.0, 0.1)\nprint(a)\n\n\n\n\n[ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9]\n\n\n\nb = linspace(1, 2, 11)\nprint(b)\n\n\n\n\n[ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2. ]\n\n\n\nc = ones(5, 'float')\nprint(c)\n\n\n\n\n[ 1.  1.  1.  1.  1.]\n\n\n\nd = zeros(5, 'int')\nprint(d)\n\n\n\n\n[0 0 0 0 0]\n\n\n\ne = random.rand(5)\nprint(e)\n\n\n\n\n[ 0.5677619   0.46086299  0.00274387  0.29916017  0.40593335]\n\n\n\na = zeros(5)\nprint(a)\n\nb = a\nb[0] = 10\nprint(a, b) # b and a remain in synch\n\nc = a.copy()\nc[4] = 10\nprint(a, c) # c is really a new variable, independent\n\n\n\n\n[ 0.  0.  0.  0.  0.]\n[ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.   0.]\n[ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.  10.]\n\n\n\n# simple arithmetics\na = array([[2,3], [4,5]])\nb = array([[1,2], [3,0]])\n\nprint(a + b)\nprint(a * b)\n\n\n\n\n[[3 5]\n [7 5]]\n[[ 2  6]\n [12  0]]\n\n\n\n# cross product\na = array([1,2,3])\nb = array([4,5,6])\n\nprint(a * b)\n\nc = cross(a,b)\nprint(c)\n\n\n\n\n[ 4 10 18]\n[-3  6 -3]\n\n\n\n# dot product\nc = dot(a, b)\nprint(c)\n\n\n\n\n32\n\n\n\na = arange(10)\nprint(a)\n\n\n\n\n[0 1 2 3 4 5 6 7 8 9]\n\n\n\n# save to file, restore or retrieve\na.tofile('myfile.dat') # a file is created in the directory\nb = fromfile('myfile.dat',dtype = 'int')\nprint(b)\n\n\n\n\n[0 1 2 3 4 5 6 7 8 9]\n\n\n\n# matrix inversion\n\na = array([[4,1,-2], [2,-3,3], [-6,-2,1] ], dtype='float')\nprint(a)\n\nainv = linalg.inv(a)\nprint(ainv)\n\nprint(dot(a, ainv))\n\n\n\n\n[[ 4.  1. -2.]\n [ 2. -3.  3.]\n [-6. -2.  1.]]\n[[ 0.08333333  0.08333333 -0.08333333]\n [-0.55555556 -0.22222222 -0.44444444]\n [-0.61111111  0.05555556 -0.38888889]]\n[[  1.00000000e+00  -1.38777878e-17   0.00000000e+00]\n [  0.00000000e+00   1.00000000e+00   0.00000000e+00]\n [  0.00000000e+00   2.08166817e-17   1.00000000e+00]]\n\n\n\n3.2, Vectorized Functions\n\n\n# avoid loop, generate number with a function\na = array([1, 10, 100, 1000])\nprint(log10(a))\n\n\n\n\n[ 0.  1.  2.  3.]\n\n\n\ndef spf(x):\n    return 3 * x\n\nvspf = vectorize(spf)\na = array([1, 2, 3, 4])\n\nprint(a)\nprint(vspf(a))\n\n\n\n\n[1 2 3 4]\n[ 3  6  9 12]\n\n\n\n4, Data visualization\n\n\n4.1, The Matplotlib Module\n\n\nBasic or common plots.\n\n\n%pylab inline\n# matplolib is part of pylab as is numpy\n\n# basic plot\ndata = [1, 2, 5]\n\nplot(data)\n\nshow()\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n\n\n# basic plot\nx = [1, 2, 5]\ny = [4, 5, 6]\n\nplot(x,y)\n\nshow()\n\n\n\n\n\n\n# basic plot\n\nx = [1, 2, 5]\ny = [4, 5, 6]\n\nplot(x, y, 'ro')\nxlabel('x-axis')\nylabel('y-axis')\naxis([0, 6, 1, 7])\n\nshow()\n\n\n\n\n\n\n# basic plots\n\n# data are unchanged\n\nt = arange(0.0, 5.0, 0.2)\n\nplot(t, t**2, 'x') # t2\nplot(t, t**3, 'ro') # t3\n\nshow()\n\n\n\n\n\n\n# subplot\n\n# data are unchanged\n\nsubplot(2, 1, 1) # the first subplot\nplot([1, 2, 3, 4])\nsubplot(2, 1, 2) # the second subplot\nplot([4, 2, 3, 1])\n\nshow()\n\n\n\n\n\n\nrand(10)\n\n\n\n\narray([ 0.88744591,  0.324907  ,  0.90704288,  0.81398935,  0.96866761,\n        0.75620965,  0.31821423,  0.64119535,  0.56738357,  0.98143592])\n\n\n\n# subplot\n\nmark = ['x','o','^','+','\n']\n\nNR = 2 # number of rows\nNC = 3 # number of columns\npn = 1 # plot number, starting number\n\nfor row in range(NR):\n    for col in range(NC):\n        subplot(NR, NC, pn)\n        a = rand(10) * pn\n        plot(a, marker = mark[(pn+1)%5]) # plot the random numbers vs tick = (n+1)5%\n        xlabel('plot %d X' %pn)\n        ylabel('plot %d Y' %pn)\n\n        pn = pn + 1 # move to the 2nd plot\n\nshow()\n\n\n\n\n\n\n# polar plot\n\nth = linspace(0, 2*pi, 100)\nr = 5 * ones(100) # radius = 5\npolar(th, r)\n\nshow()\n\n\n\n\n\n\n# pie chart\n\nlabels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\nfracs = [25, 25, 30, 20]\npie(fracs, labels = labels)\n\nshow()\n\n\n\n\n\n\nA few examples of mathematical plots. \n\n\nSpiral of Archimedes\n\n\n\n\nr = a\u03b8\n\n\n\n\na = 2\nth = linspace(0, 10*pi, 200)\nr = a*th\npolar(th,r)\naxis([0, 2*pi, 0, 70])\n\nshow()\n\n\n\n\n\n\nFermat\ns Spiral\n\n\n\n\nr^2 = a^2\u03b8\n\n\n\n\na = 2\nth = linspace(0, 10*pi, 200)\nr = sqrt(a**2 * th)\npolar(th, r)\npolar(th, -r)\n\nshow()\n\n\n\n\n\n\nAnd more\n\n\n# example 1\n\nx = arange(0, 3, 1)\ny = arange(0, 3, 1)\ngx, gy = meshgrid(x, y)\nprint(gx)\nprint(gy)\n\nprint('-' * 25)\n\nx = arange(-3*pi, 3*pi, 0.1)\ny = arange(-3*pi, 3*pi, 0.1)\nxx, yy = meshgrid(x, y)\nz = sin(xx) + sin(yy)\n\nimshow(z)\nshow()\n\n\n\n\n[[0 1 2]\n [0 1 2]\n [0 1 2]]\n[[0 0 0]\n [1 1 1]\n [2 2 2]]\n-------------------------\n\n\n\n\n\n# example 2\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nx = arange(-3*pi, 3*pi, 0.1)\ny = arange(-3*pi, 3*pi, 0.1)\nxx, yy = meshgrid(x, y)\nz = sin(xx) + sin(yy)\nax.plot_surface(xx, yy, z, cmap=cm.jet, cstride=1)\n\nshow()\n\n\n\n\n\n\n# example 3\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nphi = linspace(0, 2*pi, 400)\nx = cos(phi)\ny = sin(phi)\nz = 0\nax.plot(x, y, z, label = 'x')# circle\nz = sin(4*phi) # modulated in z plane\nax.plot(x, y, z, label = 'x')\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\nshow()\n\n\n\n\n\n\n# example 4\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nphi = linspace(0, 2 * pi, 100)\ntheta = linspace(0, pi, 100)\nx = 10 * outer(cos(phi), sin(theta))\ny = 10 * outer(sin(phi), sin(theta))\nz = 10 * outer(ones(size(phi)), cos(theta))\nax.plot_wireframe(x,y,z, rstride=2, cstride=2)\n\nshow()\n\n\n\n\n\n\nAdditional mathematical plots (with functions):\n\n\n\n\nsine, function and friends\n\n\ncircles\n\n\nastroids\n\n\nellipses\n\n\npolar rose\n\n\npower series\n\n\nFourier series\n\n\nfractals\n\n\nmeshgrids\n\n\n2D plots\n\n\n3D plots\n\n\nsurface plots\n\n\nline plots\n\n\nwire-frame plots\n\n\nadvanced 3D with Mayavi (render 3D shapes)\n\n\n\n\n5, Type Setting Using \n\\LaTeX\n\n\n\n\nOnce a graphic or an image is generated by IPython, save it and reuse it in \n\\LaTeX\n with the \nusepackage{graphicx}\n. Insert images and floating bodies.\n\n\n6, Numerical Methods\n\n\n\n\nderivatives and differential calculus\n\n\nintegral calculus and numerical integration\n\n\noptimization and linear programming\n\n\nordinary differential equations\n\n\nEuler method\n\n\nRunge-Kutta method\n\n\nfunctions depending on the integrals\n\n\nand more\n\n\n\n\n\n\nPolynomials\n\n\nTaylor\ns series\n\n\nand other series\n\n\n\n\n\n\n\n\n6.5, Finding Roots of an Equation\n\n\n\n\nA root is where a \nx\n intersects the \ny\n-axis.\n\n\nAn equation has any number of roots, or no roots at all.\n\n\n\n\nf(x) = x^2\n has a single root whereas \nf(x) = sin(x)\n has an infinite number of roots.\n\n\nVisual inspection will reveal the roots (by plotting the function).\n\n\nOther ways: the incremental search method, the method of bisection, and the Newton-Raphson method.\n\n\n\n\nIncremental Search Method\n\n\nThe basic idea behind the incremental search method is simple: if \nf(x1)\n and \nf(x2)\n have opposite signs, then there is at least one root in the interval \n(x1; x2)\n. If the interval is small enough, it is likely to contain a single root. Thus, the zeroes of \nf(x)\n can be detected by evaluating the function at intervals of \n\\Delta x\n and looking for change in sign.\n\n\nThere are several potential problems with the incremental search method: it is possible to miss two closely spaced roots if the search increment \n\\Delta x\n is larger than the spacing of the roots. Certain singularities of \nf(x)\n can be mistaken for roots. For example, \nf(x) = tan(x)\n changes sign at odd multiples of \n\\pi/2\n, but these locations are not true zeroes.\n\n\nFor example, below, function \nroot()\n that searches the roots of a function \nf(x)\n from \nx = a\n to \nx = b\n, incrementing it by \ndx\n.\n\n\n% pylab inline\n\nimport math\n\ndef func(x):\n    return x**3 - 10.0 * x * x + 5\n\ndef root(f, a, b, dx):\n    x = a\n    while True:\n        f1 = f(x)\n        f2 = f(x + dx)\n        if f1 * f2 \n 0:\n            return x, x + dx\n        x = x + dx\n        if x \n= b:\n            return (None,None)\n\nx, y = root(func, 0.0, 1.0, .1)\nprint(x, y)\n\nx, y = root(math.cos, 0.0, 4, .1)\nprint(x, y)\n\n\n\n\nPopulating the interactive namespace from numpy and matplotlib\n0.7 0.7999999999999999\n1.5000000000000002 1.6000000000000003\n\n\n\nThe visual inspection will confirm. Let\ns take the first function, \nf(x) = x^3 - 10x^2 + 5\n, and the inspected range, \n[0.0, 1.0]\n, to plot a graph.\n\n\nvector = arange(-10, 20, 0.05) # from numpy\n\nplot(vector, func(vector))\nxlabel('x-axis')\nylabel('y-axis')\ntitle('Find the roots')\naxis([0., 2., -1., 6.])\n# vert line\n# axvline(x = 4.,color = 'k',ls = 'dashed')\n# horiz line\naxhline(y = 0, color = 'k',ls = 'dashed')\n\nshow()\n\n\n\n\n\n\nBut, there is more than one root to the polynomial function, that is, \nf(x) = x^3 - 10x^2 + 5\n. Such function should have 3 roots. Indeed, another plot reveals two roots around \nx=0\n and another one close to \nx=10\n.\n\n\nvector = arange(-10, 20, 0.05) # from numpy\n\nplot(vector, func(vector))\nxlabel('x-axis')\nylabel('y-axis')\ntitle('Find the roots')\naxis([-2., 12., -2., 6.])\n# vert line\n# axvline(x = 4.,color = 'k',ls = 'dashed')\n# horiz line\naxhline(y = 0, color = 'k',ls = 'dashed')\n\nshow()\n\n\n\n\n\n\nMethod of Bisection\n\n\nThe method of bisection \u001cfinds the root by successively halving the interval until it becomes sufficiently small.\n\n\nBisection is not the fastest method available for computing roots, but it is the most reliable. Once a root has been bracketed, bisection will always \u001cfind it. The method of bisection works in the following manner:\n\n\n\n\nIf there is a root between \nx1\n and \nx2\n, then \nf(x1)*f(x2) < 0\n.\n\n\nNext, we compute \nf(x3)\n, where \nx3 = (x1 + x2) = 2\n.\n\n\nIf \nf(x2) * f(x3) < 0\n, then the root must be in \n(x2; x3)\n; we replace the original bound \nx1\n by \nx3\n.\n\n\nOtherwise, the root lies between \nx1\n and \nx3\n; in this case, \nx3\n replaces \nx2\n.\n\n\n\n\n\n\nThis process is repeated until the interval is reduced to a (previously) speci\u001cfied value, say \n\\epsilon\n.\n\n\nThe number of bisections required to reach the prescribed limit, \n\\epsilon\n, is given by equation:\n\n\n\n\n\n\n n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2} \n\n\n\n\nLet\ns continue with the example from above (\nf(x) = x^3 - 10x^2 + 5\n).\n\n\ndef bisect(f, x1, x2, epsilon = 1.0e-9):\n    f1 = f(x1)\n    f2 = f(x2)\n    if f1 * f2 \n 0.0:\n        print('x1 and x2 are on the same side of x-axis')\n        return   \n    n = math.ceil(math.log(abs(x2 - x1)/epsilon)/math.log(2.0))\n    n = int(n)\n    for i in range(n):\n        x3 = 0.5 * (x1 + x2)\n        f3 = f(x3)\n        if f3 == 0.0: return x3\n        if f2 * f3 \n 0.0:\n            x1 = x3\n            f1 = f3\n        else:\n            x2 = x3\n            f2 = f3\n    return (x1 + x2)/2.0\n\nprint(bisect(func, 0.70, 0.8, 1.0e-4)) # more precise than the incremental search method\nprint(bisect(func, 0.70, 0.8, 1.0e-9)) # even more decimals!\n\n\n\n\n0.734619140625\n0.7346035074442625\n\n\n\nNewton-Raphson Method\n\n\nThis other method is an algorithm that requires the derivative of the function to evaluate the roots. Therefore, it is usable only in problems where the derivative can be readily computed. It does not require the value at two points to start with. We start with an initial guess which is reasonably close to the true root. Then the function is approximated by its tangent line and the x-intercept of the tangent line is calculated. This value is taken as the next guess and the process is repeated. The Newton-Raphson formula is shown below.\n\n\n\n\nx_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)} \n\n\n\n\nLet\ns run an example on the quadratic equation \n2x^2 \u2212 3x \u22125 = 0\n and its two tangents. It can be seen that the zeros are at \nx = -1\n and \nx = 2.5\n. By the way, the derivative of the equation is: \n4x - 3\n\n\n\n\nFunction \nnr()\n is called twice, and we get the roots nearer to the corresponding starting values.\n\n\n# the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the algorithm\ndef nr(x, tol = 1.0e-9):\n    for i in range(30):\n        dx = -f(x)/df(x)\n        #print(x)\n        x = x + dx\n        if abs(dx) \n tol:\n            return x\n\nprint('The roots:')\nprint(nr(4))\nprint(nr(0))\n\n\n\n\nThe roots:\n2.5\n-1.0\n\n\n\n# the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the alogorithm\ndef nr(x, tol = 1.0e-9):\n    for i in range(30):\n        dx = -f(x)/df(x)\n        print(x)\n        x = x + dx\n        if abs(dx) \n tol:\n            return x\n\nprint('The iterations (nr(4):')\nprint(nr(4))\nprint('The iterations (nr(0):')\nprint(nr(0))\n\n\n\n\nThe iterations (nr(4):\n4\n2.8461538461538463\n2.528581510232886\n2.500229650067341\n2.5000000150663526\n2.5\n2.5\nThe iterations (nr(0):\n0\n-1.6666666666666667\n-1.0919540229885056\n-1.002295264224362\n-1.0000015032391993\n-1.0000000000006457\n-1.0\n\n\n\n# the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the plot\nvf = vectorize(f)\nx = linspace(-2, 5, 100)\ny = vf(x)\n\n# tangents at x = 3 and x = 4, using one point slope formula\nx1 = 4\ntg1 = df(x1)*(x-x1) + f(x1)\nx1 = 3\ntg2 = df(x1)*(x-x1) + f(x1)\n\ngrid(True)\nplot(x,y)\nplot(x,tg1)\nplot(x,tg2)\nylim([-20,40])\n\nshow()\n\n\n\n\n\n\n6.6, System of Linear Equations\n\n\nA system of \nm\n linear equations with \nn\n unknowns can be written in a matrix form and can be solved by using several standard techniques like the Gaussian elimination.\n\n\nNon-homogeneous matrix equations of the form \nAx = b\n can be solved by matrix inversion to obtain \nx = A^{\u22121}b\n. The system of equations\n\n\n\n\\begin{align}\n\\\\ 4x + y - 2z &= 0\n\\\\ 2x - 3y + 3z &= 9 \n\\\\ -6x - 2y + z &= 0\n\\end{align}\n\n\n\n\n\ncan be represented in the matrix form as\n\n\n\n\n\n \\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}\n\n\n\n\n\nand can be solved by \u001cnding the inverse of the coe\u001ecient matrix.\n\n\n\n\n\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n {\\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}}^{-1}\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}  \n\n\n\n\n\nLet\ns solve the equation.\n\n\nb = array([0, 9, 0])\nA = array([[4,1,-2], [2, -3, 3], [-6, -2, 1]])\n\nprint(dot(linalg.inv(A),b))\n\n\n\n\n[ 0.75 -2.    0.5 ]\n\n\n\n\n\nx = 0.75\n, \ny = \u22122\n, and \nz = 0.5\n.\n\n\n6.7, Least Squares Fitting\n\n\nA mathematical procedure for \u001cfinding the best-\u001cfitting curve \nf(x)\n for a given set of points \n(x_n, y_n)\n by minimizing the sum of the squares of the vertical off\u001bsets of the points from the curve is called least squares fi\u001ctting. \n\n\n# the raw data is generated by adding random numbers (between -1 and 1) to the y coordinates\n# generated by y = 3\u2217x + 2\n\nNP = 50 # observations\nr = 2 * ranf([NP]) - 0.5\nprint(r)\n\n\n\n\n[ 0.99203986 -0.36064885 -0.48805087  0.36617374  0.29567002  1.2411945\n  1.03900373 -0.32058291  0.45809449  0.7741206   1.11819248  1.04958093\n -0.47823795  0.14105707 -0.30262528  1.07469769 -0.44660783 -0.49313542\n  0.50995051 -0.11336372  1.47245243  0.34474142  0.52352519 -0.17051734\n  1.35723902  1.09822309  1.34626113  0.81862428  1.48731849  0.32958741\n  0.77572583  1.47898135  1.36664053  0.69356794  0.4978461   1.17619706\n -0.24303519  0.43521904  0.88177674  0.28791814 -0.22513721  0.78901677\n  0.15126297  1.24899092 -0.02995487  1.2136114   0.46617806 -0.29024591\n  0.23178231  0.50829941]\n\n\n\nx = linspace(0, 10, NP)\nprint(x)\n\n\n\n\n[  0.           0.20408163   0.40816327   0.6122449    0.81632653\n   1.02040816   1.2244898    1.42857143   1.63265306   1.83673469\n   2.04081633   2.24489796   2.44897959   2.65306122   2.85714286\n   3.06122449   3.26530612   3.46938776   3.67346939   3.87755102\n   4.08163265   4.28571429   4.48979592   4.69387755   4.89795918\n   5.10204082   5.30612245   5.51020408   5.71428571   5.91836735\n   6.12244898   6.32653061   6.53061224   6.73469388   6.93877551\n   7.14285714   7.34693878   7.55102041   7.75510204   7.95918367\n   8.16326531   8.36734694   8.57142857   8.7755102    8.97959184\n   9.18367347   9.3877551    9.59183673   9.79591837  10.        ]\n\n\n\ndata = 3 * x + 2 + r\nprint(data)\n\n\n\n\n[  2.99203986   2.25159605   2.73643893   4.20290843   4.74464961\n   6.30241899   6.71247312   5.96513138   7.35605367   8.28432469\n   9.24064146   9.7842748    8.86870082  10.10024074  10.26880329\n  12.25837115  11.34931053  11.91502784  13.53035867  13.51928934\n  15.71735039  15.20188427  15.99291295  15.91111532  18.05111657\n  18.40434554  19.26462847  19.34923652  20.63017563  20.08468945\n  21.14307277  22.45857319  22.95847726  22.89764957  23.31417263\n  24.60476849  23.79778114  25.08828026  26.14708286  26.16546916\n  26.26465871  27.89105759  27.86554869  29.57552153  28.90882064\n  30.76463181  30.62944337  30.48526429  31.61953741  32.50829941]\n\n\n\nxbar = mean(x)\nybar = mean(data)\nprint(xbar, ybar)\n\n\n\n\n5.0 17.5215723854\n\n\n\nb = sum(data * (x-xbar)) / sum(x*(x-xbar))\na = ybar - xbar * b\nprint(a, b)\n\n\n\n\n2.41774233468 3.02076601014\n\n\n\ny = a + b * x\n\nplot(x, y)\nplot(x, data, 'ob')\n\nshow()\n\n\n\n\n\n\n6.8, Interpolation\n\n\nInterpolation is the process of constructing a function \nf(x)\n from a set of data points \n(x_i, y_i)\n, in the interval \na < x < b\n that will satisfy \ny_i = f(x_i)\n\n\n\nfor any point in the same interval.\n\n\nIn other words, we find an equation with several observation by reverse engineering; we stand at the doorstep of machine and statistical learning here!\n\n\nThe easiest way is to construct a polynomial of degree \nn\n, such as a Newton\ns interpolating polynomial, that passes through the \nn + 1\n distinct data points. Consult the document for the mathematical demonstration. Let\ns do an example.\n\n\n# calculate the coefficients\n\nfrom copy import copy\n\ndef coef(x, y):\n    a = copy(y) # copy the list y to coefficient a\n    m = len(x)\n    for k in range(1, m): # with two loops, calculate the difference\n        tmp = copy(a)\n        for i in range(k, m):\n            tmp[i] = (a[i] - a[i-1]) / (x[i] - x[i-k])\n        a = copy(tmp)\n    return a\n\n\n\n\nx = [0, 1, 2, 3]\ny = [0, 3, 14, 39]\n\nprint(coef(x, y))\n\n\n\n\n[0, 3.0, 4.0, 1.0]\n\n\n\n# the same can be done with a Numpy array\n\ndef coef(x, y):\n    a = copy(y)\n    m = len(x)\n    for k in range(1, m):\n        a[k:m] = (a[k:m] - a[k-1]) / (x[k:m]-x[k-1])\n    return a\n\n\n\n\nx = array([0, 1, 2, 3])\ny = array([0, 3, 14, 39])\n\nprint(coef(x, y))\n\n\n\n\n[0 3 4 1]\n\n\n\nThe next step is to calculate the value of \ny\n for any given value of \nx\n, using the coffe\u001ecients already calculated (above).\n\n\nThe program generates 20 new values of \nx\n, and calculate corresponding values of \ny\n and plots them along with the original data points.\n\n\nThe function \neval()\n uses the recurrence relation.\n\n\nYou may explore the results for new points outside the range by changing the second argument of line \nnewx = linspace(0,3,NP)\n to a higher value.\n\n\ndef eval(a, xpoints, x):\n    n = len(xpoints) - 1\n    p = a[n]\n    for k in range(1,n+1):\n        p = a[n-k] + (x -xpoints[n-k]) * p\n    return p\n\n\n\n\ndef coef(x, y):\n    a = copy(y)\n    m = len(x)\n    for k in range(1,m):\n        a[k:m] = (a[k:m] - a[k-1])/(x[k:m]-x[k-1])\n    return a\n\n\n\n\nx = array([0, 1, 2, 3])\ny = array([0, 3, 14, 39])\ncoef = coef(x, y)\n\n\n\n\nNP = 20\nnewx = linspace(0,3, NP) # New x-values\nnewy = zeros(NP)\n\n\n\n\nfor i in range(NP): # evaluate y-values\n    newy[i] = eval(coef, x, newx[i])\n\n\n\n\nplot(newx, newy,'-x')\nplot(x, y,'ro')\n\nshow()", 
            "title": "Python for Education"
        }, 
        {
            "location": "/Python for Education/#25-python-lists", 
            "text": "a = 'hello world'\n\n# extract, subset\nprint(a[3:5])\nprint(a[6:])\nprint(a[:5])  lo\nworld\nhello  a = [1, 2]\n\nprint(a)\nprint(a * 2) # double print\nprint(a + [1, 1]) # concatenate  [1, 2]\n[1, 2, 1, 2]\n[1, 2, 1, 1]  b = [1,2,a]\nprint(b) # embed\n\nb[2] = 3\nprint(b) # change a mutable from the above list\n\n# Output:  [1, 2, [1, 2]]\n[1, 2, 3]", 
            "title": "2.5, Python Lists"
        }, 
        {
            "location": "/Python for Education/#27-input-from-the-keyboard", 
            "text": "input  for numeric data.  raw_input  for string data.   x = input('Enter an integer (x): ')\ny = input('Enter another one (y): ')\n\nprint('The sum is = ', x + y) # print as numeric, input  Enter an integer (x): 1\nEnter another one (y): 2\n('The sum is = ', 3)  t = raw_input('Enter an integer: ')\nu = raw_input('Enter another one: ')\n\nprint('The sum is = ', t + u) # print as string, raw input  Enter an integer: 2\nEnter another one: 3\n('The sum is = ', '23')  v = input('Enter an integer: ')\nw = input('Enter another one: ')\n\nprint('The sum is = ', str(v) + str(w)) # print as string, input changes into a string  Enter an integer: 1\nEnter another one: 1\n('The sum is = ', '11')  y1 = raw_input('Enter an integer: ')\ny2 = raw_input('Enter another one: ')\n\nprint( 'The sum is = ', int(y1) + int(y2)) # print as numeric, raw input changed into integer  Enter an integer: 2\nEnter another one: 2\n('The sum is = ', 4)  y3 = raw_input('Enter an integer: ')\ny4 = raw_input('Enter another one: ')\n\nprint( 'The sum is = ', float(y3) + float(y4)) # print as numeric, raw input changed into float  Enter an integer: 1\nEnter another one: 2\n('The sum is = ', 3.0)", 
            "title": "2.7, Input from the Keyboard"
        }, 
        {
            "location": "/Python for Education/#211-line-joining", 
            "text": "year = input('year: ')\nmonth = input('month: ')\nif 1900   year   2100 and 1  = month  = 12 :\n    print('I am so long and will not fit in a single line')  year: 2016\nmonth: 10\nI am so long and will not fit in a single line  # simplify the code, shorten the line\nyear = input('year: ')\nmonth = input('month: ')\nif 1900   year   2100\\\n and 1  = month  = 12 :\n    print('I am so long and will\\\n not fit in a single line')  year: 2016\nmonth: 10\nI am so long and will not fit in a single line  # object, variable type\nprint(type(4.5))  type 'float'", 
            "title": "2.11, Line joining"
        }, 
        {
            "location": "/Python for Education/#214-more-on-strings-and-lists", 
            "text": "s = 'hello world'\n\n# string length\nprint(len(s))\nprint(s.upper())  11\nHELLO WORLD  # help with\nhelp(str)  Help on class str in module __builtin__:\n\nclass str(basestring)\n |  str(object='') -  string\n |  \n |  Return a nice string representation of the object.\n |  If the argument is a string, the return value is the same object.\n |  \n |  Method resolution order:\n |      str\n |      basestring\n |      object\n |  \n |  Methods defined here:\n |  \n |  __add__(...)\n |      x.__add__(y)  ==  x+y\n |  \n |  __contains__(...)\n |      x.__contains__(y)  ==  y in x\n |  \n |  __eq__(...)\n |      x.__eq__(y)  ==  x==y\n |  \n |  __format__(...)\n |      S.__format__(format_spec) -  string\n |      \n |      Return a formatted version of S as described by format_spec.\n |  \n |  __ge__(...)\n |      x.__ge__(y)  ==  x =y\n |  \n |  __getattribute__(...)\n |      x.__getattribute__('name')  ==  x.name\n |  \n |  __getitem__(...)\n |      x.__getitem__(y)  ==  x[y]\n |  \n |  __getnewargs__(...)\n |  \n |  __getslice__(...)\n |      x.__getslice__(i, j)  ==  x[i:j]\n |      \n |      Use of negative indices is not supported.\n |  \n |  __gt__(...)\n |      x.__gt__(y)  ==  x y\n |  \n |  __hash__(...)\n |      x.__hash__()  ==  hash(x)\n |  \n |  __le__(...)\n |      x.__le__(y)  ==  x =y\n |  \n |  __len__(...)\n |      x.__len__()  ==  len(x)\n |  \n |  __lt__(...)\n |      x.__lt__(y)  ==  x y\n |  \n |  __mod__(...)\n |      x.__mod__(y)  ==  x%y\n |  \n |  __mul__(...)\n |      x.__mul__(n)  ==  x*n\n |  \n |  __ne__(...)\n |      x.__ne__(y)  ==  x!=y\n |  \n |  __repr__(...)\n |      x.__repr__()  ==  repr(x)\n |  \n |  __rmod__(...)\n |      x.__rmod__(y)  ==  y%x\n |  \n |  __rmul__(...)\n |      x.__rmul__(n)  ==  n*x\n |  \n |  __sizeof__(...)\n |      S.__sizeof__() -  size of S in memory, in bytes\n |  \n |  __str__(...)\n |      x.__str__()  ==  str(x)\n |  \n |  capitalize(...)\n |      S.capitalize() -  string\n |      \n |      Return a copy of the string S with only its first character\n |      capitalized.\n |  \n |  center(...)\n |      S.center(width[, fillchar]) -  string\n |      \n |      Return S centered in a string of length width. Padding is\n |      done using the specified fill character (default is a space)\n |  \n |  count(...)\n |      S.count(sub[, start[, end]]) -  int\n |      \n |      Return the number of non-overlapping occurrences of substring sub in\n |      string S[start:end].  Optional arguments start and end are interpreted\n |      as in slice notation.\n |  \n |  decode(...)\n |      S.decode([encoding[,errors]]) -  object\n |      \n |      Decodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\n |      as well as any other name registered with codecs.register_error that is\n |      able to handle UnicodeDecodeErrors.\n |  \n |  encode(...)\n |      S.encode([encoding[,errors]]) -  object\n |      \n |      Encodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n |      'xmlcharrefreplace' as well as any other name registered with\n |      codecs.register_error that is able to handle UnicodeEncodeErrors.\n |  \n |  endswith(...)\n |      S.endswith(suffix[, start[, end]]) -  bool\n |      \n |      Return True if S ends with the specified suffix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      suffix can also be a tuple of strings to try.\n |  \n |  expandtabs(...)\n |      S.expandtabs([tabsize]) -  string\n |      \n |      Return a copy of S where all tab characters are expanded using spaces.\n |      If tabsize is not given, a tab size of 8 characters is assumed.\n |  \n |  find(...)\n |      S.find(sub [,start [,end]]) -  int\n |      \n |      Return the lowest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  format(...)\n |      S.format(*args, **kwargs) -  string\n |      \n |      Return a formatted version of S, using substitutions from args and kwargs.\n |      The substitutions are identified by braces ('{' and '}').\n |  \n |  index(...)\n |      S.index(sub [,start [,end]]) -  int\n |      \n |      Like S.find() but raise ValueError when the substring is not found.\n |  \n |  isalnum(...)\n |      S.isalnum() -  bool\n |      \n |      Return True if all characters in S are alphanumeric\n |      and there is at least one character in S, False otherwise.\n |  \n |  isalpha(...)\n |      S.isalpha() -  bool\n |      \n |      Return True if all characters in S are alphabetic\n |      and there is at least one character in S, False otherwise.\n |  \n |  isdigit(...)\n |      S.isdigit() -  bool\n |      \n |      Return True if all characters in S are digits\n |      and there is at least one character in S, False otherwise.\n |  \n |  islower(...)\n |      S.islower() -  bool\n |      \n |      Return True if all cased characters in S are lowercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  isspace(...)\n |      S.isspace() -  bool\n |      \n |      Return True if all characters in S are whitespace\n |      and there is at least one character in S, False otherwise.\n |  \n |  istitle(...)\n |      S.istitle() -  bool\n |      \n |      Return True if S is a titlecased string and there is at least one\n |      character in S, i.e. uppercase characters may only follow uncased\n |      characters and lowercase characters only cased ones. Return False\n |      otherwise.\n |  \n |  isupper(...)\n |      S.isupper() -  bool\n |      \n |      Return True if all cased characters in S are uppercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  join(...)\n |      S.join(iterable) -  string\n |      \n |      Return a string which is the concatenation of the strings in the\n |      iterable.  The separator between elements is S.\n |  \n |  ljust(...)\n |      S.ljust(width[, fillchar]) -  string\n |      \n |      Return S left-justified in a string of length width. Padding is\n |      done using the specified fill character (default is a space).\n |  \n |  lower(...)\n |      S.lower() -  string\n |      \n |      Return a copy of the string S converted to lowercase.\n |  \n |  lstrip(...)\n |      S.lstrip([chars]) -  string or unicode\n |      \n |      Return a copy of the string S with leading whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  partition(...)\n |      S.partition(sep) -  (head, sep, tail)\n |      \n |      Search for the separator sep in S, and return the part before it,\n |      the separator itself, and the part after it.  If the separator is not\n |      found, return S and two empty strings.\n |  \n |  replace(...)\n |      S.replace(old, new[, count]) -  string\n |      \n |      Return a copy of string S with all occurrences of substring\n |      old replaced by new.  If the optional argument count is\n |      given, only the first count occurrences are replaced.\n |  \n |  rfind(...)\n |      S.rfind(sub [,start [,end]]) -  int\n |      \n |      Return the highest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  rindex(...)\n |      S.rindex(sub [,start [,end]]) -  int\n |      \n |      Like S.rfind() but raise ValueError when the substring is not found.\n |  \n |  rjust(...)\n |      S.rjust(width[, fillchar]) -  string\n |      \n |      Return S right-justified in a string of length width. Padding is\n |      done using the specified fill character (default is a space)\n |  \n |  rpartition(...)\n |      S.rpartition(sep) -  (head, sep, tail)\n |      \n |      Search for the separator sep in S, starting at the end of S, and return\n |      the part before it, the separator itself, and the part after it.  If the\n |      separator is not found, return two empty strings and S.\n |  \n |  rsplit(...)\n |      S.rsplit([sep [,maxsplit]]) -  list of strings\n |      \n |      Return a list of the words in the string S, using sep as the\n |      delimiter string, starting at the end of the string and working\n |      to the front.  If maxsplit is given, at most maxsplit splits are\n |      done. If sep is not specified or is None, any whitespace string\n |      is a separator.\n |  \n |  rstrip(...)\n |      S.rstrip([chars]) -  string or unicode\n |      \n |      Return a copy of the string S with trailing whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  split(...)\n |      S.split([sep [,maxsplit]]) -  list of strings\n |      \n |      Return a list of the words in the string S, using sep as the\n |      delimiter string.  If maxsplit is given, at most maxsplit\n |      splits are done. If sep is not specified or is None, any\n |      whitespace string is a separator and empty strings are removed\n |      from the result.\n |  \n |  splitlines(...)\n |      S.splitlines(keepends=False) -  list of strings\n |      \n |      Return a list of the lines in S, breaking at line boundaries.\n |      Line breaks are not included in the resulting list unless keepends\n |      is given and true.\n |  \n |  startswith(...)\n |      S.startswith(prefix[, start[, end]]) -  bool\n |      \n |      Return True if S starts with the specified prefix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      prefix can also be a tuple of strings to try.\n |  \n |  strip(...)\n |      S.strip([chars]) -  string or unicode\n |      \n |      Return a copy of the string S with leading and trailing\n |      whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is unicode, S will be converted to unicode before stripping\n |  \n |  swapcase(...)\n |      S.swapcase() -  string\n |      \n |      Return a copy of the string S with uppercase characters\n |      converted to lowercase and vice versa.\n |  \n |  title(...)\n |      S.title() -  string\n |      \n |      Return a titlecased version of S, i.e. words start with uppercase\n |      characters, all remaining cased characters have lowercase.\n |  \n |  translate(...)\n |      S.translate(table [,deletechars]) -  string\n |      \n |      Return a copy of the string S, where all characters occurring\n |      in the optional argument deletechars are removed, and the\n |      remaining characters have been mapped through the given\n |      translation table, which must be a string of length 256 or None.\n |      If the table argument is None, no translation is applied and\n |      the operation simply removes the characters in deletechars.\n |  \n |  upper(...)\n |      S.upper() -  string\n |      \n |      Return a copy of the string S converted to uppercase.\n |  \n |  zfill(...)\n |      S.zfill(width) -  string\n |      \n |      Pad a numeric string S with zeros on the left, to fill a field\n |      of the specified width.  The string S is never truncated.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __new__ =  built-in method __new__ of type object \n |      T.__new__(S, ...) -  a new object with type S, a subtype of T  s = 'I am a long string'\n\n# split a string on space\nprint(s.split())  ['I', 'am', 'a', 'long', 'string']  a = 'abc.abc.abc'\n\n# split a string on dot\naa = a.split('.')\nprint(aa)  ['abc', 'abc', 'abc']  # join the elements, join character\nmm = '+'.join(aa)\nprint(mm)  abc+abc+abc  a = []\n\n# append to a list\na.append(3)\nprint(a)\n\na.append(4)\nprint(a)  [3]\n[3, 4]  # insert 2.5 as first element (at index = 0)\na.insert(0, 2.5)\n\n# print several items\nprint(a, a[0])\nprint(len(a))  ([2.5, 3, 4], 2.5)\n3  # copy module\na = [1, 2, 3, 4]\n\nprint(a)\n\nb = a\nprint(a == b) # True  [1, 2, 3, 4]\nTrue  # insert at index = 0\nb[0] = 5  # b is a live duplicate, not an independent copy\nprint(a is b)\nprint(a, b)  True\n([5, 2, 3, 4], [5, 2, 3, 4])  import copy\n\nc = copy.copy(a)  # c is an ind. copy\nprint(a is c)\nprint(a, c)  False\n([5, 2, 3, 4], [5, 2, 3, 4])  # replace at index = 1\nc[1] = 100\nprint(a, c)  ([5, 2, 3, 4], [5, 100, 3, 4])", 
            "title": "2.14, More on Strings and Lists"
        }, 
        {
            "location": "/Python for Education/#recap-from-the-above-snippets", 
            "text": "dicty = {'a': 'apple', 'b': 'berry', 'c': 'cherry'}\n\nfor keyy in dicty:\n    print('keys are: '), keyy\n    print('-' * 5)\n    print('values are: '), dicty[keyy]\n    print('-' * 10)      keys are:  a\n-----\nvalues are:  apple\n----------\nkeys are:  c\n-----\nvalues are:  cherry\n----------\nkeys are:  b\n-----\nvalues are:  berry\n----------  print(type(0))\nprint(type(255))\nprint(type(-1))\nprint(type(-255))\nprint(type(-30000))\nprint(type(30000))\nprint(type(-3500000))\nprint(type(3500000))\nprint(type(-1.5))\nprint(type(1.345456734576345))\nprint(type('4'))  type 'int'  type 'int'  type 'int'  type 'int'  type 'int'  type 'int'  type 'int'  type 'int'  type 'float'  type 'float'  type 'str'   a1 = input('Enter: ')\n\na2 = a1\na3 = bytes(a1) # 0 - 255\na4 = int(a1) # -32768 - 32768\na5 = long(a1) # -2147483648 -\na6 = float(a1)\na9 = str(a1)  Enter: 1  listnum = [0,1,2,3,4,5,6,7,8,9,10]\n\nfor i in listnum:\n    if i%2 == 0: # even\n        print(i),  0 2 4 6 8 10  for i in range(0,10):\n    if i%2 == 0: # even\n        print(i),  0 2 4 6 8  for i in range(0,100,3):\n    if i%2 == 0: # even\n        print(i),  0 6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96  listnum = ['a','b']\nlisttext = []\n\nfor i in listnum:\n    if i == 'b': # even\n        listtext.append(i)\n\nprint listtext  ['b']  lst = [3,5,7]\n\nlst.append(9)\nprint lst\n\nlst.append(lst[0])\nprint(lst)  [3, 5, 7, 9]\n[3, 5, 7, 9, 3]  lst = ['a','b','c']\n\nlst.append('d')\nprint(lst)\n\nlst.append(lst[0])\nprint(lst)  ['a', 'b', 'c', 'd']\n['a', 'b', 'c', 'd', 'a']  elements = ('foo', 'bar', 'baz')\n\nfor elem in elements:\n    print(elem)  foo\nbar\nbaz  for count, elem in enumerate(elements):\n    print(count, elem)  (0, 'foo')\n(1, 'bar')\n(2, 'baz')  listnum = [0,1,2,3,4,5,6,7,8,9,10]\n\nlistnum.pop() # last\nprint(listnum)  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  listnum.pop(0) # position 0\nprint(listnum)  [1, 2, 3, 4, 5, 6, 7, 8, 9]  listnum.pop(2) # position 2\nprint(listnum)  [1, 2, 4, 5, 6, 7, 8, 9]  listnum.remove(8) # specific element\nprint(listnum)  [1, 2, 4, 5, 6, 7, 9]  del(listnum[0])\nprint(listnum)  [2, 4, 5, 6, 7, 9]  word = 'original'\nword2 = word.upper()\nword3 = word.capitalize()\nfirst = word[0]\nallbutfirst = word[1:len(word)]\n\nprint(word)\nprint(word2)\nprint(word3)\nprint(first)\nprint(allbutfirst)  original\nORIGINAL\nOriginal\no\nriginal  list1 = [1,2,3]\nlist2 = [4,5,6,7]\n\nlist3 = [list1,list2]\n\nresults = []\n\ndef joiny(listy):\n    for lst in listy:\n        for num in lst:\n            results.append(num)\n    return results\n\nprint(joiny(list3))  [1, 2, 3, 4, 5, 6, 7]", 
            "title": "Recap from the Above (Snippets)"
        }, 
        {
            "location": "/Python for Education/#215-python-modules-and-packages", 
            "text": "print(sin(0.5))  0.479425538604  # rename, more efficient\nimport math as m\nprint(m.sin(0.5))  0.479425538604  # package.module.function()\nimport random\n\na = random.randint(1,5)\nprint(a)\n\nrandom.randint(1,10)  3\n8  import random as rd\n\naa = rd.randint(1,5)\nprint(aa)  5", 
            "title": "2.15, Python Modules and Packages"
        }, 
        {
            "location": "/Python for Education/#216-files-inputouput", 
            "text": "# create the file\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'w')\nf.write('This is a test file') # write in\nf.close()  # read it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'r')\nprint(f.read())\nf.close()  This is a test file  # read it again\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes1.txt', 'r')\nprint(f.read(7)) # get first seven characters on the console\nprint(f.read()) # get the remaining ones\nf.close()  This is\n a test file  # create it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'w')\nfor k in range(1,10): # 1, 2, 3 stop before 4\n    s = '%3d\\n' %(k) # no format 3d, new line\n    f.write(s) # write in\nf.close()  # read it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r') # open\nprint(f.read())\nf.close()    1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9  # read it horizontally\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r') # open\nprint(f.read(),)\nf.close()  ('  1\\n  2\\n  3\\n  4\\n  5\\n  6\\n  7\\n  8\\n  9\\n',)  f = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes2.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if s == '': # Empty string means end of file\n        break # terminate the loop\n    m = int(s) # Convert to integer\n    print(m * 5),\nf.close()  5 10 15 20 25 30 35 40 45  # create it\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'w')\nf.write('')\nf.close()  # give an error if there is a blank line in the file\n# test it (without the if, there would be an error)\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if s == '': # empty string means end of file\n        break # terminate the loop\n    m = int(s) # convert to integer\n    print(m * 5)\nf.close()  # alternatively\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes3.txt', 'r')\nwhile 1: # infinite loop\n    s = f.readline()\n    if len(s)   1: # string with no value\n        break # terminate the loop\n    m = int(s) # convert to integer\n    print(m * 5)\nf.close()  Strings can easily be written to and read from a \u001cle. Numbers take a bit more e\u001bort, since the  read()  method only returns Strings, which will have to be converted in to a number explicitly. However, when you want to save and restore data types like lists, dictionaries, or class instances, things get a lot more complicated. Rather than have the users constantly writing and debugging code to save complicated data types, Python provides a standard module called  pickle .  The  pickle  module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure. \u201cPickling\u201d is the process whereby a Python object hierarchy is converted into a byte stream, and \u201cunpickling\u201d is the inverse operation, whereby a byte stream is converted back into an object hierarchy. Pickling (and unpickling) is alternatively known as \u201cserialization\u201d, \u201cmarshalling,\u201d [1] or \u201cflattening\u201d, however, to avoid confusion, the terms used here are \u201cpickling\u201d and \u201cunpickling\u201d.  import pickle\n\nf = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt', 'w')\npickle.dump(12.3, f) # write a float type\nf.close()  f = open('D:/Admin_Hugues/Documents/Notebooks/Python for Education/notes4.txt', 'r')\nx = pickle.load(f)\nprint(x, type(x)) # check the type of data read\nf.close()  (12.3,  type 'float' )", 
            "title": "2.16, Files Input/Ouput"
        }, 
        {
            "location": "/Python for Education/#217-formatted-printing", 
            "text": "a = 2.0 / 3 # 2/3 will print zero because of integer\nprint(a)\n\nprint('a = %5.3f') %(a) # up to 3 decimal places  0.666666666667\na = 0.667     Conversion  Conversion  Example  Result      d, i  signed Integer  %6d %(12)   12    f  foating point decimal  %6.4f %(2.0/3)  0.667    e  floating point exponential  %6.2e %(2.0/3)  6.67e-01    x  hexadecimal  %x %(16)  10    o  octal  %o %(8)  10    s  string  %s %( abcd )  abcd    0d  modi\u001ced  d   %05d %(12)  00012     a = 'justify as you like'\nprint('%30s') %(a) # right justified             justify as you like  print('%-30s') %(a) # minus sign for left justification  justify as you like  for k in range(1,11): # A good looking table\n    print('5 x %2d = %2d') %(k, 5*k) # add 2 spaces before  5 x  1 =  5\n5 x  2 = 10\n5 x  3 = 15\n5 x  4 = 20\n5 x  5 = 25\n5 x  6 = 30\n5 x  7 = 35\n5 x  8 = 40\n5 x  9 = 45\n5 x 10 = 50", 
            "title": "2.17, Formatted Printing"
        }, 
        {
            "location": "/Python for Education/#218-exception-handling", 
            "text": "x = input('Enter a number ')\n\ntry:\n    print(10.0 / x)\nexcept:\n    print('Division by zero not allowed')  Enter a number 0\nDivision by zero not allowed", 
            "title": "2.18, Exception Handling"
        }, 
        {
            "location": "/Python for Education/#220-writing-gui-programs", 
            "text": "Tkinter   An introduction to tkinter  Tkinter  Tkinter   The GUI programs are event-driven like a macro. Create Widgets like a Button, Label, Canvas,  etc. The first step is to create a main graphics window by calling the function  Tk() .  # Example tkmain.py\n\n# open an empty box with min, max, close buttons\nimport Tkinter as tk\n\nroot = tk.Tk()\nroot.mainloop()\n\n# it opens a windows!  # Example tklabel.py\n\nroot = tk.Tk()\nw = tk.Label(root, text =  Hello, world )\n\nw.pack()\nroot.mainloop()\n\n# it opens a windows with the text in it  # Example tkbutton.py\n\ndef hello():\n    print('hello world')\n\nw = tk.Tk() # Creates the main Graphics window\nb = tk.Button(w, text = 'Click Me', command = hello)\n\nb.pack()\nw.mainloop()\n\n# it opens a windows with a button; after clicking, it print the function  hello world  # Example tkcanvas.py\n\ndef draw(event):\n    c.create_rectangle(event.x, \\\n        event.y, event.x+5, event.y+5)\n\nw = tk.Tk()\nc = tk.Canvas(w, width = 300, height = 200)\n\nc.pack()\nc.bind( Button-1 , draw)\nw.mainloop()\n\n# it open a windows; you can left-click and add dots in it  # Example tkcanvas2.py\n\nrecs = [] # list keeping track of the rectangles\n\ndef remove(event):\n    global recs\n    if len(recs)   0:\n        c.delete(recs[0]) # delete from Canvas\n        recs.pop(0) # delete first item from list\n\ndef draw(event):\n    global recs\n    r = c.create_rectangle(event.x, \\\n        event.y, event.x + 5, event.y + 5)\n    recs.append(r)\n\nw = tk.Tk()\nc = tk.Canvas(w, width = 300, height = 200)\n\nc.pack()\nc.bind( Button-1 , draw)\nc.bind( Button-3 , remove)\nw.mainloop()\n\n# it open a windows; you can left-click and add dots in it; right-click and remove them", 
            "title": "2.20, Writing GUI Programs"
        }, 
        {
            "location": "/Python for Education/#221-object-oriented-programming-in-python", 
            "text": "# example point.py\n\nclass Point:\n    '''\n    This is documentation comment.\n    help(Point) will display this.\n    '''\n\n    def __init__(self, x = 0, y = 0):\n        self.xpos = x\n        self.ypos = y\n\n    def __str__(self): # overload print()\n        return 'Point at (%f,%f)' %(self.xpos, self.ypos)\n\n    def __add__(self, other): # overloads\n        xpos = self.xpos + other.xpos\n        ypos = self.ypos + other.ypos\n        return Point(xpos, ypos)\n\n    def __sub__(self, other): # overloads\n        import math\n        dx = self.xpos - other.xpos\n        dy = self.ypos - other.ypos\n        return math.sqrt(dx ** 2 + dy ** 2)\n\n    def dist(self):\n        import math\n        return math.sqrt(self.xpos ** 2 + self.ypos ** 2)  # example point1.py\n\n# import Point\n# if point.py is in the same directory and script point1.py is independent from point.py\n\norigin = Point() # instance\nprint(origin)\n\np1 = Point(4, 4) # instance\np2 = Point(8, 7)\n\nprint(p1)  Point at (0.000000,0.000000)\nPoint at (4.000000,4.000000)  print(p2) # __str__  Point at (8.000000,7.000000)  print(p1 + p2) # __add__, __str__, (4 + 4, 7 + 4)  Point at (12.000000,11.000000)  print(p1 - p2) # __sub__, __str__, ((4 - 8) ** 2, (3 - 7) ** 2)  5.0  print(p1.dist()) # # __dist__, __str__, sqrt((4) ** 2 + (4) ** 2)  5.65685424949  # example cpoint.py\n\nclass colPoint(Point): # colPoint inherits Point\n    '''\n    This is documentation comment.\n    help(colPoint) will display this.\n    '''\n\n    color = 'black'\n\n    def __init__(self, x = 0, y = 0, col = 'black'):\n        Point.__init__(self, x, y)\n        self.color = col\n\n    def __str__(self):\n        return '%s colored Point at (%f,%f)' % \\\n            (self.color, self.xpos, self.ypos)  # example point2.py\n\n# import cpoint\n# see above for the explanation\n\np1 = Point(5, 5)\nrp1 = colPoint(2, 2, 'red')  print(p1)  Point at (5.000000,5.000000)  print(rp1)  red colored Point at (2.000000,2.000000)  print(rp1 + p1)  Point at (7.000000,7.000000)  print(rp1.dist())  2.82842712475", 
            "title": "2.21, Object-Oriented Programming in Python"
        }, 
        {
            "location": "/Python for Education/#3-arrays-and-matrices", 
            "text": "Let s switch to Python 3 for the remaining of the document.", 
            "title": "3, Arrays and Matrices"
        }, 
        {
            "location": "/Python for Education/#31-the-numpy-module", 
            "text": "Install (check) the Scipy Stack before.   numpy  scipy  matplotlib  pandas  sympy  nose (testing)   With  pip .  Note  The code below in Python 3 on Jupyter Notebook 3  installed on a Windows PC.  However, running the Scipy Stack in Python 2.7 is problematic.  Switch kernel from here: from Python 2 to 3.  No need to  import numpy, matplotlib  since it s included in the  %pylab  command.  %pylab inline\n# the Scipy Stack is executed in the notebook, no need to import numpy\n\nx = array([1, 2, 3]) # make array from list\n\nprint(x, type(x))  Populating the interactive namespace from numpy and matplotlib\n[1 2 3]  class 'numpy.ndarray'   a = [[1,2], [3,4]] # make a list of lists\n\nx = array(a) # and convert to an array\nprint(a)  [[1, 2], [3, 4]]  arange(2.0, 3.0, .1)  array([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])  array([ 2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9])  array([ 2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9])  linspace(1, 2, 11)  array([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])  array([ 1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. ])  array([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ])  zeros([3,2], 'float')  array([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])  zeros([3,2], 'int')  array([[0, 0],\n       [0, 0],\n       [0, 0]])  ones([2,2], 'i')  array([[1, 1],\n       [1, 1]], dtype=int32)  random.random([3,3])  array([[ 0.51158139,  0.83490474,  0.82306296],\n       [ 0.65830757,  0.98560397,  0.78565885],\n       [ 0.09887894,  0.11073038,  0.31037259]])  a = arange(20)\nprint(a)  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]  b = reshape(a, [4,5])\nprint(b)  [[ 0  1  2  3  4]\n [ 5  6  7  8  9]\n [10 11 12 13 14]\n [15 16 17 18 19]]  a = arange(1.0, 2.0, 0.1)\nprint(a)  [ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9]  b = linspace(1, 2, 11)\nprint(b)  [ 1.   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2. ]  c = ones(5, 'float')\nprint(c)  [ 1.  1.  1.  1.  1.]  d = zeros(5, 'int')\nprint(d)  [0 0 0 0 0]  e = random.rand(5)\nprint(e)  [ 0.5677619   0.46086299  0.00274387  0.29916017  0.40593335]  a = zeros(5)\nprint(a)\n\nb = a\nb[0] = 10\nprint(a, b) # b and a remain in synch\n\nc = a.copy()\nc[4] = 10\nprint(a, c) # c is really a new variable, independent  [ 0.  0.  0.  0.  0.]\n[ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.   0.]\n[ 10.   0.   0.   0.   0.] [ 10.   0.   0.   0.  10.]  # simple arithmetics\na = array([[2,3], [4,5]])\nb = array([[1,2], [3,0]])\n\nprint(a + b)\nprint(a * b)  [[3 5]\n [7 5]]\n[[ 2  6]\n [12  0]]  # cross product\na = array([1,2,3])\nb = array([4,5,6])\n\nprint(a * b)\n\nc = cross(a,b)\nprint(c)  [ 4 10 18]\n[-3  6 -3]  # dot product\nc = dot(a, b)\nprint(c)  32  a = arange(10)\nprint(a)  [0 1 2 3 4 5 6 7 8 9]  # save to file, restore or retrieve\na.tofile('myfile.dat') # a file is created in the directory\nb = fromfile('myfile.dat',dtype = 'int')\nprint(b)  [0 1 2 3 4 5 6 7 8 9]  # matrix inversion\n\na = array([[4,1,-2], [2,-3,3], [-6,-2,1] ], dtype='float')\nprint(a)\n\nainv = linalg.inv(a)\nprint(ainv)\n\nprint(dot(a, ainv))  [[ 4.  1. -2.]\n [ 2. -3.  3.]\n [-6. -2.  1.]]\n[[ 0.08333333  0.08333333 -0.08333333]\n [-0.55555556 -0.22222222 -0.44444444]\n [-0.61111111  0.05555556 -0.38888889]]\n[[  1.00000000e+00  -1.38777878e-17   0.00000000e+00]\n [  0.00000000e+00   1.00000000e+00   0.00000000e+00]\n [  0.00000000e+00   2.08166817e-17   1.00000000e+00]]", 
            "title": "3.1, The NumPy Module"
        }, 
        {
            "location": "/Python for Education/#32-vectorized-functions", 
            "text": "# avoid loop, generate number with a function\na = array([1, 10, 100, 1000])\nprint(log10(a))  [ 0.  1.  2.  3.]  def spf(x):\n    return 3 * x\n\nvspf = vectorize(spf)\na = array([1, 2, 3, 4])\n\nprint(a)\nprint(vspf(a))  [1 2 3 4]\n[ 3  6  9 12]", 
            "title": "3.2, Vectorized Functions"
        }, 
        {
            "location": "/Python for Education/#4-data-visualization", 
            "text": "", 
            "title": "4, Data visualization"
        }, 
        {
            "location": "/Python for Education/#41-the-matplotlib-module", 
            "text": "Basic or common plots.  %pylab inline\n# matplolib is part of pylab as is numpy\n\n# basic plot\ndata = [1, 2, 5]\n\nplot(data)\n\nshow()  Populating the interactive namespace from numpy and matplotlib   # basic plot\nx = [1, 2, 5]\ny = [4, 5, 6]\n\nplot(x,y)\n\nshow()   # basic plot\n\nx = [1, 2, 5]\ny = [4, 5, 6]\n\nplot(x, y, 'ro')\nxlabel('x-axis')\nylabel('y-axis')\naxis([0, 6, 1, 7])\n\nshow()   # basic plots\n\n# data are unchanged\n\nt = arange(0.0, 5.0, 0.2)\n\nplot(t, t**2, 'x') # t2\nplot(t, t**3, 'ro') # t3\n\nshow()   # subplot\n\n# data are unchanged\n\nsubplot(2, 1, 1) # the first subplot\nplot([1, 2, 3, 4])\nsubplot(2, 1, 2) # the second subplot\nplot([4, 2, 3, 1])\n\nshow()   rand(10)  array([ 0.88744591,  0.324907  ,  0.90704288,  0.81398935,  0.96866761,\n        0.75620965,  0.31821423,  0.64119535,  0.56738357,  0.98143592])  # subplot\n\nmark = ['x','o','^','+',' ']\n\nNR = 2 # number of rows\nNC = 3 # number of columns\npn = 1 # plot number, starting number\n\nfor row in range(NR):\n    for col in range(NC):\n        subplot(NR, NC, pn)\n        a = rand(10) * pn\n        plot(a, marker = mark[(pn+1)%5]) # plot the random numbers vs tick = (n+1)5%\n        xlabel('plot %d X' %pn)\n        ylabel('plot %d Y' %pn)\n\n        pn = pn + 1 # move to the 2nd plot\n\nshow()   # polar plot\n\nth = linspace(0, 2*pi, 100)\nr = 5 * ones(100) # radius = 5\npolar(th, r)\n\nshow()   # pie chart\n\nlabels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\nfracs = [25, 25, 30, 20]\npie(fracs, labels = labels)\n\nshow()   A few examples of mathematical plots.   Spiral of Archimedes   r = a\u03b8   a = 2\nth = linspace(0, 10*pi, 200)\nr = a*th\npolar(th,r)\naxis([0, 2*pi, 0, 70])\n\nshow()   Fermat s Spiral   r^2 = a^2\u03b8   a = 2\nth = linspace(0, 10*pi, 200)\nr = sqrt(a**2 * th)\npolar(th, r)\npolar(th, -r)\n\nshow()   And more  # example 1\n\nx = arange(0, 3, 1)\ny = arange(0, 3, 1)\ngx, gy = meshgrid(x, y)\nprint(gx)\nprint(gy)\n\nprint('-' * 25)\n\nx = arange(-3*pi, 3*pi, 0.1)\ny = arange(-3*pi, 3*pi, 0.1)\nxx, yy = meshgrid(x, y)\nz = sin(xx) + sin(yy)\n\nimshow(z)\nshow()  [[0 1 2]\n [0 1 2]\n [0 1 2]]\n[[0 0 0]\n [1 1 1]\n [2 2 2]]\n-------------------------   # example 2\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nx = arange(-3*pi, 3*pi, 0.1)\ny = arange(-3*pi, 3*pi, 0.1)\nxx, yy = meshgrid(x, y)\nz = sin(xx) + sin(yy)\nax.plot_surface(xx, yy, z, cmap=cm.jet, cstride=1)\n\nshow()   # example 3\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nphi = linspace(0, 2*pi, 400)\nx = cos(phi)\ny = sin(phi)\nz = 0\nax.plot(x, y, z, label = 'x')# circle\nz = sin(4*phi) # modulated in z plane\nax.plot(x, y, z, label = 'x')\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\nshow()   # example 4\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = Axes3D(figure())\nphi = linspace(0, 2 * pi, 100)\ntheta = linspace(0, pi, 100)\nx = 10 * outer(cos(phi), sin(theta))\ny = 10 * outer(sin(phi), sin(theta))\nz = 10 * outer(ones(size(phi)), cos(theta))\nax.plot_wireframe(x,y,z, rstride=2, cstride=2)\n\nshow()   Additional mathematical plots (with functions):   sine, function and friends  circles  astroids  ellipses  polar rose  power series  Fourier series  fractals  meshgrids  2D plots  3D plots  surface plots  line plots  wire-frame plots  advanced 3D with Mayavi (render 3D shapes)", 
            "title": "4.1, The Matplotlib Module"
        }, 
        {
            "location": "/Python for Education/#5-type-setting-using-latex", 
            "text": "Once a graphic or an image is generated by IPython, save it and reuse it in  \\LaTeX  with the  usepackage{graphicx} . Insert images and floating bodies.", 
            "title": "5, Type Setting Using \\LaTeX"
        }, 
        {
            "location": "/Python for Education/#6-numerical-methods", 
            "text": "derivatives and differential calculus  integral calculus and numerical integration  optimization and linear programming  ordinary differential equations  Euler method  Runge-Kutta method  functions depending on the integrals  and more    Polynomials  Taylor s series  and other series", 
            "title": "6, Numerical Methods"
        }, 
        {
            "location": "/Python for Education/#65-finding-roots-of-an-equation", 
            "text": "A root is where a  x  intersects the  y -axis.  An equation has any number of roots, or no roots at all.   f(x) = x^2  has a single root whereas  f(x) = sin(x)  has an infinite number of roots.  Visual inspection will reveal the roots (by plotting the function).  Other ways: the incremental search method, the method of bisection, and the Newton-Raphson method.   Incremental Search Method  The basic idea behind the incremental search method is simple: if  f(x1)  and  f(x2)  have opposite signs, then there is at least one root in the interval  (x1; x2) . If the interval is small enough, it is likely to contain a single root. Thus, the zeroes of  f(x)  can be detected by evaluating the function at intervals of  \\Delta x  and looking for change in sign.  There are several potential problems with the incremental search method: it is possible to miss two closely spaced roots if the search increment  \\Delta x  is larger than the spacing of the roots. Certain singularities of  f(x)  can be mistaken for roots. For example,  f(x) = tan(x)  changes sign at odd multiples of  \\pi/2 , but these locations are not true zeroes.  For example, below, function  root()  that searches the roots of a function  f(x)  from  x = a  to  x = b , incrementing it by  dx .  % pylab inline\n\nimport math\n\ndef func(x):\n    return x**3 - 10.0 * x * x + 5\n\ndef root(f, a, b, dx):\n    x = a\n    while True:\n        f1 = f(x)\n        f2 = f(x + dx)\n        if f1 * f2   0:\n            return x, x + dx\n        x = x + dx\n        if x  = b:\n            return (None,None)\n\nx, y = root(func, 0.0, 1.0, .1)\nprint(x, y)\n\nx, y = root(math.cos, 0.0, 4, .1)\nprint(x, y)  Populating the interactive namespace from numpy and matplotlib\n0.7 0.7999999999999999\n1.5000000000000002 1.6000000000000003  The visual inspection will confirm. Let s take the first function,  f(x) = x^3 - 10x^2 + 5 , and the inspected range,  [0.0, 1.0] , to plot a graph.  vector = arange(-10, 20, 0.05) # from numpy\n\nplot(vector, func(vector))\nxlabel('x-axis')\nylabel('y-axis')\ntitle('Find the roots')\naxis([0., 2., -1., 6.])\n# vert line\n# axvline(x = 4.,color = 'k',ls = 'dashed')\n# horiz line\naxhline(y = 0, color = 'k',ls = 'dashed')\n\nshow()   But, there is more than one root to the polynomial function, that is,  f(x) = x^3 - 10x^2 + 5 . Such function should have 3 roots. Indeed, another plot reveals two roots around  x=0  and another one close to  x=10 .  vector = arange(-10, 20, 0.05) # from numpy\n\nplot(vector, func(vector))\nxlabel('x-axis')\nylabel('y-axis')\ntitle('Find the roots')\naxis([-2., 12., -2., 6.])\n# vert line\n# axvline(x = 4.,color = 'k',ls = 'dashed')\n# horiz line\naxhline(y = 0, color = 'k',ls = 'dashed')\n\nshow()   Method of Bisection  The method of bisection \u001cfinds the root by successively halving the interval until it becomes sufficiently small.  Bisection is not the fastest method available for computing roots, but it is the most reliable. Once a root has been bracketed, bisection will always \u001cfind it. The method of bisection works in the following manner:   If there is a root between  x1  and  x2 , then  f(x1)*f(x2) < 0 .  Next, we compute  f(x3) , where  x3 = (x1 + x2) = 2 .  If  f(x2) * f(x3) < 0 , then the root must be in  (x2; x3) ; we replace the original bound  x1  by  x3 .  Otherwise, the root lies between  x1  and  x3 ; in this case,  x3  replaces  x2 .    This process is repeated until the interval is reduced to a (previously) speci\u001cfied value, say  \\epsilon .  The number of bisections required to reach the prescribed limit,  \\epsilon , is given by equation:     n = \\frac{ln(|\\Delta x|)/\\epsilon}{ln2}    Let s continue with the example from above ( f(x) = x^3 - 10x^2 + 5 ).  def bisect(f, x1, x2, epsilon = 1.0e-9):\n    f1 = f(x1)\n    f2 = f(x2)\n    if f1 * f2   0.0:\n        print('x1 and x2 are on the same side of x-axis')\n        return   \n    n = math.ceil(math.log(abs(x2 - x1)/epsilon)/math.log(2.0))\n    n = int(n)\n    for i in range(n):\n        x3 = 0.5 * (x1 + x2)\n        f3 = f(x3)\n        if f3 == 0.0: return x3\n        if f2 * f3   0.0:\n            x1 = x3\n            f1 = f3\n        else:\n            x2 = x3\n            f2 = f3\n    return (x1 + x2)/2.0\n\nprint(bisect(func, 0.70, 0.8, 1.0e-4)) # more precise than the incremental search method\nprint(bisect(func, 0.70, 0.8, 1.0e-9)) # even more decimals!  0.734619140625\n0.7346035074442625  Newton-Raphson Method  This other method is an algorithm that requires the derivative of the function to evaluate the roots. Therefore, it is usable only in problems where the derivative can be readily computed. It does not require the value at two points to start with. We start with an initial guess which is reasonably close to the true root. Then the function is approximated by its tangent line and the x-intercept of the tangent line is calculated. This value is taken as the next guess and the process is repeated. The Newton-Raphson formula is shown below.   x_{i+1} = x_i - \\frac{f(x_i)}{f^{\\prime}(x_i)}    Let s run an example on the quadratic equation  2x^2 \u2212 3x \u22125 = 0  and its two tangents. It can be seen that the zeros are at  x = -1  and  x = 2.5 . By the way, the derivative of the equation is:  4x - 3   Function  nr()  is called twice, and we get the roots nearer to the corresponding starting values.  # the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the algorithm\ndef nr(x, tol = 1.0e-9):\n    for i in range(30):\n        dx = -f(x)/df(x)\n        #print(x)\n        x = x + dx\n        if abs(dx)   tol:\n            return x\n\nprint('The roots:')\nprint(nr(4))\nprint(nr(0))  The roots:\n2.5\n-1.0  # the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the alogorithm\ndef nr(x, tol = 1.0e-9):\n    for i in range(30):\n        dx = -f(x)/df(x)\n        print(x)\n        x = x + dx\n        if abs(dx)   tol:\n            return x\n\nprint('The iterations (nr(4):')\nprint(nr(4))\nprint('The iterations (nr(0):')\nprint(nr(0))  The iterations (nr(4):\n4\n2.8461538461538463\n2.528581510232886\n2.500229650067341\n2.5000000150663526\n2.5\n2.5\nThe iterations (nr(0):\n0\n-1.6666666666666667\n-1.0919540229885056\n-1.002295264224362\n-1.0000015032391993\n-1.0000000000006457\n-1.0  # the function\ndef f(x):\n    return 2.0 * x**2 - 3*x - 5\n\n# the derivative\ndef df(x):\n    return 4.0 * x - 3\n\n# the plot\nvf = vectorize(f)\nx = linspace(-2, 5, 100)\ny = vf(x)\n\n# tangents at x = 3 and x = 4, using one point slope formula\nx1 = 4\ntg1 = df(x1)*(x-x1) + f(x1)\nx1 = 3\ntg2 = df(x1)*(x-x1) + f(x1)\n\ngrid(True)\nplot(x,y)\nplot(x,tg1)\nplot(x,tg2)\nylim([-20,40])\n\nshow()", 
            "title": "6.5, Finding Roots of an Equation"
        }, 
        {
            "location": "/Python for Education/#66-system-of-linear-equations", 
            "text": "A system of  m  linear equations with  n  unknowns can be written in a matrix form and can be solved by using several standard techniques like the Gaussian elimination.  Non-homogeneous matrix equations of the form  Ax = b  can be solved by matrix inversion to obtain  x = A^{\u22121}b . The system of equations  \n\\begin{align}\n\\\\ 4x + y - 2z &= 0\n\\\\ 2x - 3y + 3z &= 9 \n\\\\ -6x - 2y + z &= 0\n\\end{align}   can be represented in the matrix form as   \n \\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}\n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}   and can be solved by \u001cnding the inverse of the coe\u001ecient matrix.   \n \\begin{pmatrix}\n   x \\\\\n   y \\\\\n   z\n \\end{pmatrix}\n =\n {\\begin{pmatrix}\n   4 & 1 & -2 \\\\\n   2 & -3 & 3 \\\\\n  -6 & -2 & 1\n \\end{pmatrix}}^{-1}\n \\begin{pmatrix}\n   0 \\\\\n   9 \\\\\n   0\n \\end{pmatrix}     Let s solve the equation.  b = array([0, 9, 0])\nA = array([[4,1,-2], [2, -3, 3], [-6, -2, 1]])\n\nprint(dot(linalg.inv(A),b))  [ 0.75 -2.    0.5 ]   x = 0.75 ,  y = \u22122 , and  z = 0.5 .", 
            "title": "6.6, System of Linear Equations"
        }, 
        {
            "location": "/Python for Education/#67-least-squares-fitting", 
            "text": "A mathematical procedure for \u001cfinding the best-\u001cfitting curve  f(x)  for a given set of points  (x_n, y_n)  by minimizing the sum of the squares of the vertical off\u001bsets of the points from the curve is called least squares fi\u001ctting.   # the raw data is generated by adding random numbers (between -1 and 1) to the y coordinates\n# generated by y = 3\u2217x + 2\n\nNP = 50 # observations\nr = 2 * ranf([NP]) - 0.5\nprint(r)  [ 0.99203986 -0.36064885 -0.48805087  0.36617374  0.29567002  1.2411945\n  1.03900373 -0.32058291  0.45809449  0.7741206   1.11819248  1.04958093\n -0.47823795  0.14105707 -0.30262528  1.07469769 -0.44660783 -0.49313542\n  0.50995051 -0.11336372  1.47245243  0.34474142  0.52352519 -0.17051734\n  1.35723902  1.09822309  1.34626113  0.81862428  1.48731849  0.32958741\n  0.77572583  1.47898135  1.36664053  0.69356794  0.4978461   1.17619706\n -0.24303519  0.43521904  0.88177674  0.28791814 -0.22513721  0.78901677\n  0.15126297  1.24899092 -0.02995487  1.2136114   0.46617806 -0.29024591\n  0.23178231  0.50829941]  x = linspace(0, 10, NP)\nprint(x)  [  0.           0.20408163   0.40816327   0.6122449    0.81632653\n   1.02040816   1.2244898    1.42857143   1.63265306   1.83673469\n   2.04081633   2.24489796   2.44897959   2.65306122   2.85714286\n   3.06122449   3.26530612   3.46938776   3.67346939   3.87755102\n   4.08163265   4.28571429   4.48979592   4.69387755   4.89795918\n   5.10204082   5.30612245   5.51020408   5.71428571   5.91836735\n   6.12244898   6.32653061   6.53061224   6.73469388   6.93877551\n   7.14285714   7.34693878   7.55102041   7.75510204   7.95918367\n   8.16326531   8.36734694   8.57142857   8.7755102    8.97959184\n   9.18367347   9.3877551    9.59183673   9.79591837  10.        ]  data = 3 * x + 2 + r\nprint(data)  [  2.99203986   2.25159605   2.73643893   4.20290843   4.74464961\n   6.30241899   6.71247312   5.96513138   7.35605367   8.28432469\n   9.24064146   9.7842748    8.86870082  10.10024074  10.26880329\n  12.25837115  11.34931053  11.91502784  13.53035867  13.51928934\n  15.71735039  15.20188427  15.99291295  15.91111532  18.05111657\n  18.40434554  19.26462847  19.34923652  20.63017563  20.08468945\n  21.14307277  22.45857319  22.95847726  22.89764957  23.31417263\n  24.60476849  23.79778114  25.08828026  26.14708286  26.16546916\n  26.26465871  27.89105759  27.86554869  29.57552153  28.90882064\n  30.76463181  30.62944337  30.48526429  31.61953741  32.50829941]  xbar = mean(x)\nybar = mean(data)\nprint(xbar, ybar)  5.0 17.5215723854  b = sum(data * (x-xbar)) / sum(x*(x-xbar))\na = ybar - xbar * b\nprint(a, b)  2.41774233468 3.02076601014  y = a + b * x\n\nplot(x, y)\nplot(x, data, 'ob')\n\nshow()", 
            "title": "6.7, Least Squares Fitting"
        }, 
        {
            "location": "/Python for Education/#68-interpolation", 
            "text": "Interpolation is the process of constructing a function  f(x)  from a set of data points  (x_i, y_i) , in the interval  a < x < b  that will satisfy  y_i = f(x_i)  \nfor any point in the same interval.  In other words, we find an equation with several observation by reverse engineering; we stand at the doorstep of machine and statistical learning here!  The easiest way is to construct a polynomial of degree  n , such as a Newton s interpolating polynomial, that passes through the  n + 1  distinct data points. Consult the document for the mathematical demonstration. Let s do an example.  # calculate the coefficients\n\nfrom copy import copy\n\ndef coef(x, y):\n    a = copy(y) # copy the list y to coefficient a\n    m = len(x)\n    for k in range(1, m): # with two loops, calculate the difference\n        tmp = copy(a)\n        for i in range(k, m):\n            tmp[i] = (a[i] - a[i-1]) / (x[i] - x[i-k])\n        a = copy(tmp)\n    return a  x = [0, 1, 2, 3]\ny = [0, 3, 14, 39]\n\nprint(coef(x, y))  [0, 3.0, 4.0, 1.0]  # the same can be done with a Numpy array\n\ndef coef(x, y):\n    a = copy(y)\n    m = len(x)\n    for k in range(1, m):\n        a[k:m] = (a[k:m] - a[k-1]) / (x[k:m]-x[k-1])\n    return a  x = array([0, 1, 2, 3])\ny = array([0, 3, 14, 39])\n\nprint(coef(x, y))  [0 3 4 1]  The next step is to calculate the value of  y  for any given value of  x , using the coffe\u001ecients already calculated (above).  The program generates 20 new values of  x , and calculate corresponding values of  y  and plots them along with the original data points.  The function  eval()  uses the recurrence relation.  You may explore the results for new points outside the range by changing the second argument of line  newx = linspace(0,3,NP)  to a higher value.  def eval(a, xpoints, x):\n    n = len(xpoints) - 1\n    p = a[n]\n    for k in range(1,n+1):\n        p = a[n-k] + (x -xpoints[n-k]) * p\n    return p  def coef(x, y):\n    a = copy(y)\n    m = len(x)\n    for k in range(1,m):\n        a[k:m] = (a[k:m] - a[k-1])/(x[k:m]-x[k-1])\n    return a  x = array([0, 1, 2, 3])\ny = array([0, 3, 14, 39])\ncoef = coef(x, y)  NP = 20\nnewx = linspace(0,3, NP) # New x-values\nnewy = zeros(NP)  for i in range(NP): # evaluate y-values\n    newy[i] = eval(coef, x, newx[i])  plot(newx, newy,'-x')\nplot(x, y,'ro')\n\nshow()", 
            "title": "6.8, Interpolation"
        }
    ]
}